
LoRaMac-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002008c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002008c  0002008c  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ac8  20000000  00020094  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040ac8  2**0
                  CONTENTS
  4 .bss          00001258  20000ac8  00020b5c  00040ac8  2**2
                  ALLOC
  5 .stack        00002000  20001d20  00021db4  00040ac8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040ac8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040af0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000462ae  00000000  00000000  00040b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006f39  00000000  00000000  00086df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c802  00000000  00000000  0008dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002210  00000000  00000000  0009a532  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f28  00000000  00000000  0009c742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023f86  00000000  00000000  0009e66a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e34a  00000000  00000000  000c25f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5534  00000000  00000000  000e093a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008b60  00000000  00000000  00185e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 3d 00 20 a1 5c 00 00 35 5d 00 00 35 5d 00 00      =. .\..5]..5]..
	...
      2c:	35 5d 00 00 00 00 00 00 00 00 00 00 35 5d 00 00     5]..........5]..
      3c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 42 00 00     5]..5]..5]..5B..
      4c:	65 2c 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     e,..5]..5]..5]..
      5c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     5]..5]..5]..5]..
      6c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     5]..5]..5]..5]..
      7c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     5]..5]..5]..5]..
      8c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     5]..5]..5]..5]..
      9c:	35 5d 00 00 35 5d 00 00 35 5d 00 00 35 5d 00 00     5]..5]..5]..5]..
      ac:	35 5d 00 00 00 00 00 00                             5]......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000ac8 	.word	0x20000ac8
      d4:	00000000 	.word	0x00000000
      d8:	00020094 	.word	0x00020094

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000acc 	.word	0x20000acc
     108:	00020094 	.word	0x00020094
     10c:	00020094 	.word	0x00020094
     110:	00000000 	.word	0x00000000

00000114 <PrintHexBuffer>:
 * 
 * \param buffer Buffer to be printed
 * \param size   Buffer size to be printed
 */
void PrintHexBuffer( uint8_t *buffer, uint8_t size )
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	000a      	movs	r2, r1
     11e:	1cfb      	adds	r3, r7, #3
     120:	701a      	strb	r2, [r3, #0]
    uint8_t newline = 0;
     122:	230f      	movs	r3, #15
     124:	18fb      	adds	r3, r7, r3
     126:	2200      	movs	r2, #0
     128:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < size; i++ )
     12a:	230e      	movs	r3, #14
     12c:	18fb      	adds	r3, r7, r3
     12e:	2200      	movs	r2, #0
     130:	701a      	strb	r2, [r3, #0]
     132:	e02b      	b.n	18c <PrintHexBuffer+0x78>
    {
        if( newline != 0 )
     134:	230f      	movs	r3, #15
     136:	18fb      	adds	r3, r7, r3
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b00      	cmp	r3, #0
     13c:	d007      	beq.n	14e <PrintHexBuffer+0x3a>
        {
            printf( "\r\n" );
     13e:	4b1b      	ldr	r3, [pc, #108]	; (1ac <PrintHexBuffer+0x98>)
     140:	0018      	movs	r0, r3
     142:	4b1b      	ldr	r3, [pc, #108]	; (1b0 <PrintHexBuffer+0x9c>)
     144:	4798      	blx	r3
            newline = 0;
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	2200      	movs	r2, #0
     14c:	701a      	strb	r2, [r3, #0]
        }

        printf( "%02X ", buffer[i] );
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	781b      	ldrb	r3, [r3, #0]
     154:	687a      	ldr	r2, [r7, #4]
     156:	18d3      	adds	r3, r2, r3
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	001a      	movs	r2, r3
     15c:	4b15      	ldr	r3, [pc, #84]	; (1b4 <PrintHexBuffer+0xa0>)
     15e:	0011      	movs	r1, r2
     160:	0018      	movs	r0, r3
     162:	4b15      	ldr	r3, [pc, #84]	; (1b8 <PrintHexBuffer+0xa4>)
     164:	4798      	blx	r3

        if( ( ( i + 1 ) % 16 ) == 0 )
     166:	230e      	movs	r3, #14
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	3301      	adds	r3, #1
     16e:	001a      	movs	r2, r3
     170:	230f      	movs	r3, #15
     172:	4013      	ands	r3, r2
     174:	d103      	bne.n	17e <PrintHexBuffer+0x6a>
        {
            newline = 1;
     176:	230f      	movs	r3, #15
     178:	18fb      	adds	r3, r7, r3
     17a:	2201      	movs	r2, #1
     17c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < size; i++ )
     17e:	230e      	movs	r3, #14
     180:	18fb      	adds	r3, r7, r3
     182:	781a      	ldrb	r2, [r3, #0]
     184:	230e      	movs	r3, #14
     186:	18fb      	adds	r3, r7, r3
     188:	3201      	adds	r2, #1
     18a:	701a      	strb	r2, [r3, #0]
     18c:	230e      	movs	r3, #14
     18e:	18fa      	adds	r2, r7, r3
     190:	1cfb      	adds	r3, r7, #3
     192:	7812      	ldrb	r2, [r2, #0]
     194:	781b      	ldrb	r3, [r3, #0]
     196:	429a      	cmp	r2, r3
     198:	d3cc      	bcc.n	134 <PrintHexBuffer+0x20>
        }
    }
    printf( "\r\n" );
     19a:	4b04      	ldr	r3, [pc, #16]	; (1ac <PrintHexBuffer+0x98>)
     19c:	0018      	movs	r0, r3
     19e:	4b04      	ldr	r3, [pc, #16]	; (1b0 <PrintHexBuffer+0x9c>)
     1a0:	4798      	blx	r3
}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	46bd      	mov	sp, r7
     1a6:	b004      	add	sp, #16
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	0001eb88 	.word	0x0001eb88
     1b0:	00019d41 	.word	0x00019d41
     1b4:	0001eb8c 	.word	0x0001eb8c
     1b8:	00019c7d 	.word	0x00019c7d

000001bc <JoinNetwork>:

/*!
 * Executes the network Join request
 */
static void JoinNetwork( void )
{
     1bc:	b590      	push	{r4, r7, lr}
     1be:	b087      	sub	sp, #28
     1c0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;
    mlmeReq.Type = MLME_JOIN;
     1c2:	1d3b      	adds	r3, r7, #4
     1c4:	2200      	movs	r2, #0
     1c6:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.DevEui = DevEui;
     1c8:	1d3b      	adds	r3, r7, #4
     1ca:	4a19      	ldr	r2, [pc, #100]	; (230 <JoinNetwork+0x74>)
     1cc:	605a      	str	r2, [r3, #4]
    mlmeReq.Req.Join.JoinEui = JoinEui;
     1ce:	1d3b      	adds	r3, r7, #4
     1d0:	4a18      	ldr	r2, [pc, #96]	; (234 <JoinNetwork+0x78>)
     1d2:	609a      	str	r2, [r3, #8]
    mlmeReq.Req.Join.Datarate = LORAWAN_DEFAULT_DATARATE;
     1d4:	1d3b      	adds	r3, r7, #4
     1d6:	2200      	movs	r2, #0
     1d8:	731a      	strb	r2, [r3, #12]

    // Starts the join procedure
    status = LoRaMacMlmeRequest( &mlmeReq );
     1da:	2317      	movs	r3, #23
     1dc:	18fc      	adds	r4, r7, r3
     1de:	1d3b      	adds	r3, r7, #4
     1e0:	0018      	movs	r0, r3
     1e2:	4b15      	ldr	r3, [pc, #84]	; (238 <JoinNetwork+0x7c>)
     1e4:	4798      	blx	r3
     1e6:	0003      	movs	r3, r0
     1e8:	7023      	strb	r3, [r4, #0]
    printf( "\r\n###### ===== MLME-Request - MLME_JOIN ==== ######\r\n" );
     1ea:	4b14      	ldr	r3, [pc, #80]	; (23c <JoinNetwork+0x80>)
     1ec:	0018      	movs	r0, r3
     1ee:	4b14      	ldr	r3, [pc, #80]	; (240 <JoinNetwork+0x84>)
     1f0:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     1f2:	2317      	movs	r3, #23
     1f4:	18fb      	adds	r3, r7, r3
     1f6:	781a      	ldrb	r2, [r3, #0]
     1f8:	4b12      	ldr	r3, [pc, #72]	; (244 <JoinNetwork+0x88>)
     1fa:	0092      	lsls	r2, r2, #2
     1fc:	58d2      	ldr	r2, [r2, r3]
     1fe:	4b12      	ldr	r3, [pc, #72]	; (248 <JoinNetwork+0x8c>)
     200:	0011      	movs	r1, r2
     202:	0018      	movs	r0, r3
     204:	4b11      	ldr	r3, [pc, #68]	; (24c <JoinNetwork+0x90>)
     206:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
     208:	2317      	movs	r3, #23
     20a:	18fb      	adds	r3, r7, r3
     20c:	781b      	ldrb	r3, [r3, #0]
     20e:	2b00      	cmp	r3, #0
     210:	d107      	bne.n	222 <JoinNetwork+0x66>
    {
        printf( "###### ===== JOINING ==== ######\r\n" );
     212:	4b0f      	ldr	r3, [pc, #60]	; (250 <JoinNetwork+0x94>)
     214:	0018      	movs	r0, r3
     216:	4b0a      	ldr	r3, [pc, #40]	; (240 <JoinNetwork+0x84>)
     218:	4798      	blx	r3
        DeviceState = DEVICE_STATE_SLEEP;
     21a:	4b0e      	ldr	r3, [pc, #56]	; (254 <JoinNetwork+0x98>)
     21c:	2205      	movs	r2, #5
     21e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        DeviceState = DEVICE_STATE_CYCLE;
    }
}
     220:	e002      	b.n	228 <JoinNetwork+0x6c>
        DeviceState = DEVICE_STATE_CYCLE;
     222:	4b0c      	ldr	r3, [pc, #48]	; (254 <JoinNetwork+0x98>)
     224:	2204      	movs	r2, #4
     226:	701a      	strb	r2, [r3, #0]
}
     228:	46c0      	nop			; (mov r8, r8)
     22a:	46bd      	mov	sp, r7
     22c:	b007      	add	sp, #28
     22e:	bd90      	pop	{r4, r7, pc}
     230:	20000000 	.word	0x20000000
     234:	20000008 	.word	0x20000008
     238:	0000b8a1 	.word	0x0000b8a1
     23c:	0001eb94 	.word	0x0001eb94
     240:	00019d41 	.word	0x00019d41
     244:	20000034 	.word	0x20000034
     248:	0001ebcc 	.word	0x0001ebcc
     24c:	00019c7d 	.word	0x00019c7d
     250:	0001ebe0 	.word	0x0001ebe0
     254:	20000c1d 	.word	0x20000c1d

00000258 <PrepareTxFrame>:

/*!
 * \brief   Prepares the payload of the frame
 */
static void PrepareTxFrame( uint8_t port )
{
     258:	b580      	push	{r7, lr}
     25a:	b082      	sub	sp, #8
     25c:	af00      	add	r7, sp, #0
     25e:	0002      	movs	r2, r0
     260:	1dfb      	adds	r3, r7, #7
     262:	701a      	strb	r2, [r3, #0]
    switch( port )
     264:	1dfb      	adds	r3, r7, #7
     266:	781b      	ldrb	r3, [r3, #0]
     268:	2b02      	cmp	r3, #2
     26a:	d002      	beq.n	272 <PrepareTxFrame+0x1a>
     26c:	2be0      	cmp	r3, #224	; 0xe0
     26e:	d00d      	beq.n	28c <PrepareTxFrame+0x34>
                break;
            }
        }
        break;
    default:
        break;
     270:	e041      	b.n	2f6 <PrepareTxFrame+0x9e>
            AppDataSizeBackup = AppDataSize = 1;
     272:	4b23      	ldr	r3, [pc, #140]	; (300 <PrepareTxFrame+0xa8>)
     274:	2201      	movs	r2, #1
     276:	701a      	strb	r2, [r3, #0]
     278:	4b21      	ldr	r3, [pc, #132]	; (300 <PrepareTxFrame+0xa8>)
     27a:	781a      	ldrb	r2, [r3, #0]
     27c:	4b21      	ldr	r3, [pc, #132]	; (304 <PrepareTxFrame+0xac>)
     27e:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[0] = AppLedStateOn;
     280:	4b21      	ldr	r3, [pc, #132]	; (308 <PrepareTxFrame+0xb0>)
     282:	781b      	ldrb	r3, [r3, #0]
     284:	001a      	movs	r2, r3
     286:	4b21      	ldr	r3, [pc, #132]	; (30c <PrepareTxFrame+0xb4>)
     288:	701a      	strb	r2, [r3, #0]
        break;
     28a:	e034      	b.n	2f6 <PrepareTxFrame+0x9e>
        if( ComplianceTest.LinkCheck == true )
     28c:	4b20      	ldr	r3, [pc, #128]	; (310 <PrepareTxFrame+0xb8>)
     28e:	7b9b      	ldrb	r3, [r3, #14]
     290:	2b00      	cmp	r3, #0
     292:	d014      	beq.n	2be <PrepareTxFrame+0x66>
            ComplianceTest.LinkCheck = false;
     294:	4b1e      	ldr	r3, [pc, #120]	; (310 <PrepareTxFrame+0xb8>)
     296:	2200      	movs	r2, #0
     298:	739a      	strb	r2, [r3, #14]
            AppDataSize = 3;
     29a:	4b19      	ldr	r3, [pc, #100]	; (300 <PrepareTxFrame+0xa8>)
     29c:	2203      	movs	r2, #3
     29e:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[0] = 5;
     2a0:	4b1a      	ldr	r3, [pc, #104]	; (30c <PrepareTxFrame+0xb4>)
     2a2:	2205      	movs	r2, #5
     2a4:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[1] = ComplianceTest.DemodMargin;
     2a6:	4b1a      	ldr	r3, [pc, #104]	; (310 <PrepareTxFrame+0xb8>)
     2a8:	7bda      	ldrb	r2, [r3, #15]
     2aa:	4b18      	ldr	r3, [pc, #96]	; (30c <PrepareTxFrame+0xb4>)
     2ac:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[2] = ComplianceTest.NbGateways;
     2ae:	4b18      	ldr	r3, [pc, #96]	; (310 <PrepareTxFrame+0xb8>)
     2b0:	7c1a      	ldrb	r2, [r3, #16]
     2b2:	4b16      	ldr	r3, [pc, #88]	; (30c <PrepareTxFrame+0xb4>)
     2b4:	709a      	strb	r2, [r3, #2]
            ComplianceTest.State = 1;
     2b6:	4b16      	ldr	r3, [pc, #88]	; (310 <PrepareTxFrame+0xb8>)
     2b8:	2201      	movs	r2, #1
     2ba:	705a      	strb	r2, [r3, #1]
        break;
     2bc:	e01a      	b.n	2f4 <PrepareTxFrame+0x9c>
            switch( ComplianceTest.State )
     2be:	4b14      	ldr	r3, [pc, #80]	; (310 <PrepareTxFrame+0xb8>)
     2c0:	785b      	ldrb	r3, [r3, #1]
     2c2:	2b01      	cmp	r3, #1
     2c4:	d006      	beq.n	2d4 <PrepareTxFrame+0x7c>
     2c6:	2b04      	cmp	r3, #4
     2c8:	d000      	beq.n	2cc <PrepareTxFrame+0x74>
        break;
     2ca:	e013      	b.n	2f4 <PrepareTxFrame+0x9c>
                ComplianceTest.State = 1;
     2cc:	4b10      	ldr	r3, [pc, #64]	; (310 <PrepareTxFrame+0xb8>)
     2ce:	2201      	movs	r2, #1
     2d0:	705a      	strb	r2, [r3, #1]
                break;
     2d2:	e00f      	b.n	2f4 <PrepareTxFrame+0x9c>
                AppDataSize = 2;
     2d4:	4b0a      	ldr	r3, [pc, #40]	; (300 <PrepareTxFrame+0xa8>)
     2d6:	2202      	movs	r2, #2
     2d8:	701a      	strb	r2, [r3, #0]
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
     2da:	4b0d      	ldr	r3, [pc, #52]	; (310 <PrepareTxFrame+0xb8>)
     2dc:	899b      	ldrh	r3, [r3, #12]
     2de:	0a1b      	lsrs	r3, r3, #8
     2e0:	b29b      	uxth	r3, r3
     2e2:	b2da      	uxtb	r2, r3
     2e4:	4b09      	ldr	r3, [pc, #36]	; (30c <PrepareTxFrame+0xb4>)
     2e6:	701a      	strb	r2, [r3, #0]
                AppDataBuffer[1] = ComplianceTest.DownLinkCounter;
     2e8:	4b09      	ldr	r3, [pc, #36]	; (310 <PrepareTxFrame+0xb8>)
     2ea:	899b      	ldrh	r3, [r3, #12]
     2ec:	b2da      	uxtb	r2, r3
     2ee:	4b07      	ldr	r3, [pc, #28]	; (30c <PrepareTxFrame+0xb4>)
     2f0:	705a      	strb	r2, [r3, #1]
                break;
     2f2:	46c0      	nop			; (mov r8, r8)
        break;
     2f4:	46c0      	nop			; (mov r8, r8)
    }
}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	46bd      	mov	sp, r7
     2fa:	b002      	add	sp, #8
     2fc:	bd80      	pop	{r7, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	20000031 	.word	0x20000031
     304:	20000032 	.word	0x20000032
     308:	20000bf0 	.word	0x20000bf0
     30c:	20000ae4 	.word	0x20000ae4
     310:	20001b04 	.word	0x20001b04

00000314 <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
static bool SendFrame( void )
{
     314:	b590      	push	{r4, r7, lr}
     316:	b087      	sub	sp, #28
     318:	af00      	add	r7, sp, #0
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
     31a:	4b3c      	ldr	r3, [pc, #240]	; (40c <SendFrame+0xf8>)
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	003a      	movs	r2, r7
     320:	0011      	movs	r1, r2
     322:	0018      	movs	r0, r3
     324:	4b3a      	ldr	r3, [pc, #232]	; (410 <SendFrame+0xfc>)
     326:	4798      	blx	r3
     328:	1e03      	subs	r3, r0, #0
     32a:	d00c      	beq.n	346 <SendFrame+0x32>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
     32c:	1d3b      	adds	r3, r7, #4
     32e:	2200      	movs	r2, #0
     330:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
     332:	1d3b      	adds	r3, r7, #4
     334:	2200      	movs	r2, #0
     336:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
     338:	1d3b      	adds	r3, r7, #4
     33a:	2200      	movs	r2, #0
     33c:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     33e:	1d3b      	adds	r3, r7, #4
     340:	2200      	movs	r2, #0
     342:	739a      	strb	r2, [r3, #14]
     344:	e028      	b.n	398 <SendFrame+0x84>
    }
    else
    {
        if( IsTxConfirmed == false )
     346:	4b33      	ldr	r3, [pc, #204]	; (414 <SendFrame+0x100>)
     348:	781b      	ldrb	r3, [r3, #0]
     34a:	2b00      	cmp	r3, #0
     34c:	d112      	bne.n	374 <SendFrame+0x60>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
     34e:	1d3b      	adds	r3, r7, #4
     350:	2200      	movs	r2, #0
     352:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
     354:	4b30      	ldr	r3, [pc, #192]	; (418 <SendFrame+0x104>)
     356:	781a      	ldrb	r2, [r3, #0]
     358:	1d3b      	adds	r3, r7, #4
     35a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBuffer = AppDataBuffer;
     35c:	1d3b      	adds	r3, r7, #4
     35e:	4a2f      	ldr	r2, [pc, #188]	; (41c <SendFrame+0x108>)
     360:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
     362:	4b2a      	ldr	r3, [pc, #168]	; (40c <SendFrame+0xf8>)
     364:	781b      	ldrb	r3, [r3, #0]
     366:	b29a      	uxth	r2, r3
     368:	1d3b      	adds	r3, r7, #4
     36a:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     36c:	1d3b      	adds	r3, r7, #4
     36e:	2200      	movs	r2, #0
     370:	739a      	strb	r2, [r3, #14]
     372:	e011      	b.n	398 <SendFrame+0x84>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
     374:	1d3b      	adds	r3, r7, #4
     376:	2201      	movs	r2, #1
     378:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppPort;
     37a:	4b27      	ldr	r3, [pc, #156]	; (418 <SendFrame+0x104>)
     37c:	781a      	ldrb	r2, [r3, #0]
     37e:	1d3b      	adds	r3, r7, #4
     380:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBuffer = AppDataBuffer;
     382:	1d3b      	adds	r3, r7, #4
     384:	4a25      	ldr	r2, [pc, #148]	; (41c <SendFrame+0x108>)
     386:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
     388:	4b20      	ldr	r3, [pc, #128]	; (40c <SendFrame+0xf8>)
     38a:	781b      	ldrb	r3, [r3, #0]
     38c:	b29a      	uxth	r2, r3
     38e:	1d3b      	adds	r3, r7, #4
     390:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     392:	1d3b      	adds	r3, r7, #4
     394:	2200      	movs	r2, #0
     396:	739a      	strb	r2, [r3, #14]
        }
    }

    // Update global variable
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
     398:	1d3b      	adds	r3, r7, #4
     39a:	781b      	ldrb	r3, [r3, #0]
     39c:	3b01      	subs	r3, #1
     39e:	425a      	negs	r2, r3
     3a0:	4153      	adcs	r3, r2
     3a2:	b2db      	uxtb	r3, r3
     3a4:	001a      	movs	r2, r3
     3a6:	4b1e      	ldr	r3, [pc, #120]	; (420 <SendFrame+0x10c>)
     3a8:	701a      	strb	r2, [r3, #0]
    AppData.Port = mcpsReq.Req.Unconfirmed.fPort;
     3aa:	1d3b      	adds	r3, r7, #4
     3ac:	791a      	ldrb	r2, [r3, #4]
     3ae:	4b1c      	ldr	r3, [pc, #112]	; (420 <SendFrame+0x10c>)
     3b0:	705a      	strb	r2, [r3, #1]
    AppData.Buffer = mcpsReq.Req.Unconfirmed.fBuffer;
     3b2:	1d3b      	adds	r3, r7, #4
     3b4:	689a      	ldr	r2, [r3, #8]
     3b6:	4b1a      	ldr	r3, [pc, #104]	; (420 <SendFrame+0x10c>)
     3b8:	605a      	str	r2, [r3, #4]
    AppData.BufferSize = mcpsReq.Req.Unconfirmed.fBufferSize;
     3ba:	1d3b      	adds	r3, r7, #4
     3bc:	899b      	ldrh	r3, [r3, #12]
     3be:	b2da      	uxtb	r2, r3
     3c0:	4b17      	ldr	r3, [pc, #92]	; (420 <SendFrame+0x10c>)
     3c2:	709a      	strb	r2, [r3, #2]

    LoRaMacStatus_t status;
    status = LoRaMacMcpsRequest( &mcpsReq );
     3c4:	2317      	movs	r3, #23
     3c6:	18fc      	adds	r4, r7, r3
     3c8:	1d3b      	adds	r3, r7, #4
     3ca:	0018      	movs	r0, r3
     3cc:	4b15      	ldr	r3, [pc, #84]	; (424 <SendFrame+0x110>)
     3ce:	4798      	blx	r3
     3d0:	0003      	movs	r3, r0
     3d2:	7023      	strb	r3, [r4, #0]
    printf( "\r\n###### ===== MCPS-Request ==== ######\r\n" );
     3d4:	4b14      	ldr	r3, [pc, #80]	; (428 <SendFrame+0x114>)
     3d6:	0018      	movs	r0, r3
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <SendFrame+0x118>)
     3da:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     3dc:	2317      	movs	r3, #23
     3de:	18fb      	adds	r3, r7, r3
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	4b13      	ldr	r3, [pc, #76]	; (430 <SendFrame+0x11c>)
     3e4:	0092      	lsls	r2, r2, #2
     3e6:	58d2      	ldr	r2, [r2, r3]
     3e8:	4b12      	ldr	r3, [pc, #72]	; (434 <SendFrame+0x120>)
     3ea:	0011      	movs	r1, r2
     3ec:	0018      	movs	r0, r3
     3ee:	4b12      	ldr	r3, [pc, #72]	; (438 <SendFrame+0x124>)
     3f0:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
     3f2:	2317      	movs	r3, #23
     3f4:	18fb      	adds	r3, r7, r3
     3f6:	781b      	ldrb	r3, [r3, #0]
     3f8:	2b00      	cmp	r3, #0
     3fa:	d101      	bne.n	400 <SendFrame+0xec>
    {
        return false;
     3fc:	2300      	movs	r3, #0
     3fe:	e000      	b.n	402 <SendFrame+0xee>
    }
    return true;
     400:	2301      	movs	r3, #1
}
     402:	0018      	movs	r0, r3
     404:	46bd      	mov	sp, r7
     406:	b007      	add	sp, #28
     408:	bd90      	pop	{r4, r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	20000031 	.word	0x20000031
     410:	0000aab9 	.word	0x0000aab9
     414:	20000bd6 	.word	0x20000bd6
     418:	20000030 	.word	0x20000030
     41c:	20000ae4 	.word	0x20000ae4
     420:	20000c20 	.word	0x20000c20
     424:	0000bd79 	.word	0x0000bd79
     428:	0001ec04 	.word	0x0001ec04
     42c:	00019d41 	.word	0x00019d41
     430:	20000034 	.word	0x20000034
     434:	0001ebcc 	.word	0x0001ebcc
     438:	00019c7d 	.word	0x00019c7d

0000043c <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void )
{
     43c:	b590      	push	{r4, r7, lr}
     43e:	b089      	sub	sp, #36	; 0x24
     440:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    TimerStop( &TxNextPacketTimer );
     442:	4b12      	ldr	r3, [pc, #72]	; (48c <OnTxNextPacketTimerEvent+0x50>)
     444:	0018      	movs	r0, r3
     446:	4b12      	ldr	r3, [pc, #72]	; (490 <OnTxNextPacketTimerEvent+0x54>)
     448:	4798      	blx	r3

    mibReq.Type = MIB_NETWORK_ACTIVATION;
     44a:	1d3b      	adds	r3, r7, #4
     44c:	2201      	movs	r2, #1
     44e:	701a      	strb	r2, [r3, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
     450:	231f      	movs	r3, #31
     452:	18fc      	adds	r4, r7, r3
     454:	1d3b      	adds	r3, r7, #4
     456:	0018      	movs	r0, r3
     458:	4b0e      	ldr	r3, [pc, #56]	; (494 <OnTxNextPacketTimerEvent+0x58>)
     45a:	4798      	blx	r3
     45c:	0003      	movs	r3, r0
     45e:	7023      	strb	r3, [r4, #0]

    if( status == LORAMAC_STATUS_OK )
     460:	231f      	movs	r3, #31
     462:	18fb      	adds	r3, r7, r3
     464:	781b      	ldrb	r3, [r3, #0]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <OnTxNextPacketTimerEvent+0x48>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
     46a:	1d3b      	adds	r3, r7, #4
     46c:	791b      	ldrb	r3, [r3, #4]
     46e:	2b00      	cmp	r3, #0
     470:	d102      	bne.n	478 <OnTxNextPacketTimerEvent+0x3c>
        {
            // Network not joined yet. Try to join again
            JoinNetwork( );
     472:	4b09      	ldr	r3, [pc, #36]	; (498 <OnTxNextPacketTimerEvent+0x5c>)
     474:	4798      	blx	r3
        {
            DeviceState = DEVICE_STATE_SEND;
            NextTx = true;
        }
    }
}
     476:	e005      	b.n	484 <OnTxNextPacketTimerEvent+0x48>
            DeviceState = DEVICE_STATE_SEND;
     478:	4b08      	ldr	r3, [pc, #32]	; (49c <OnTxNextPacketTimerEvent+0x60>)
     47a:	2203      	movs	r2, #3
     47c:	701a      	strb	r2, [r3, #0]
            NextTx = true;
     47e:	4b08      	ldr	r3, [pc, #32]	; (4a0 <OnTxNextPacketTimerEvent+0x64>)
     480:	2201      	movs	r2, #1
     482:	701a      	strb	r2, [r3, #0]
}
     484:	46c0      	nop			; (mov r8, r8)
     486:	46bd      	mov	sp, r7
     488:	b009      	add	sp, #36	; 0x24
     48a:	bd90      	pop	{r4, r7, pc}
     48c:	20000bdc 	.word	0x20000bdc
     490:	00016fe5 	.word	0x00016fe5
     494:	0000ac39 	.word	0x0000ac39
     498:	000001bd 	.word	0x000001bd
     49c:	20000c1d 	.word	0x20000c1d
     4a0:	20000033 	.word	0x20000033

000004a4 <OnLed1TimerEvent>:

/*!
 * \brief Function executed on Led 1 Timeout event
 */
static void OnLed1TimerEvent( void )
{
     4a4:	b580      	push	{r7, lr}
     4a6:	af00      	add	r7, sp, #0
    TimerStop( &Led1Timer );
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <OnLed1TimerEvent+0x1c>)
     4aa:	0018      	movs	r0, r3
     4ac:	4b05      	ldr	r3, [pc, #20]	; (4c4 <OnLed1TimerEvent+0x20>)
     4ae:	4798      	blx	r3
    // Switch LED 1 OFF
    GpioWrite( &Led1, 0 );
     4b0:	4b05      	ldr	r3, [pc, #20]	; (4c8 <OnLed1TimerEvent+0x24>)
     4b2:	2100      	movs	r1, #0
     4b4:	0018      	movs	r0, r3
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <OnLed1TimerEvent+0x28>)
     4b8:	4798      	blx	r3
}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	46bd      	mov	sp, r7
     4be:	bd80      	pop	{r7, pc}
     4c0:	20000bf4 	.word	0x20000bf4
     4c4:	00016fe5 	.word	0x00016fe5
     4c8:	20001b50 	.word	0x20001b50
     4cc:	00016a79 	.word	0x00016a79

000004d0 <OnLed2TimerEvent>:

/*!
 * \brief Function executed on Led 2 Timeout event
 */
static void OnLed2TimerEvent( void )
{
     4d0:	b580      	push	{r7, lr}
     4d2:	af00      	add	r7, sp, #0
    TimerStop( &Led2Timer );
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <OnLed2TimerEvent+0x1c>)
     4d6:	0018      	movs	r0, r3
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <OnLed2TimerEvent+0x20>)
     4da:	4798      	blx	r3
    // Switch LED 1 OFF
    GpioWrite( &Led1, 0 );
     4dc:	4b05      	ldr	r3, [pc, #20]	; (4f4 <OnLed2TimerEvent+0x24>)
     4de:	2100      	movs	r1, #0
     4e0:	0018      	movs	r0, r3
     4e2:	4b05      	ldr	r3, [pc, #20]	; (4f8 <OnLed2TimerEvent+0x28>)
     4e4:	4798      	blx	r3
}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	46bd      	mov	sp, r7
     4ea:	bd80      	pop	{r7, pc}
     4ec:	20000c08 	.word	0x20000c08
     4f0:	00016fe5 	.word	0x00016fe5
     4f4:	20001b50 	.word	0x20001b50
     4f8:	00016a79 	.word	0x00016a79

000004fc <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b090      	sub	sp, #64	; 0x40
     500:	af00      	add	r7, sp, #0
     502:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MCPS-Confirm ==== ######\r\n" );
     504:	4b72      	ldr	r3, [pc, #456]	; (6d0 <McpsConfirm+0x1d4>)
     506:	0018      	movs	r0, r3
     508:	4b72      	ldr	r3, [pc, #456]	; (6d4 <McpsConfirm+0x1d8>)
     50a:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] );
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	785b      	ldrb	r3, [r3, #1]
     510:	001a      	movs	r2, r3
     512:	4b71      	ldr	r3, [pc, #452]	; (6d8 <McpsConfirm+0x1dc>)
     514:	0092      	lsls	r2, r2, #2
     516:	58d2      	ldr	r2, [r2, r3]
     518:	4b70      	ldr	r3, [pc, #448]	; (6dc <McpsConfirm+0x1e0>)
     51a:	0011      	movs	r1, r2
     51c:	0018      	movs	r0, r3
     51e:	4b70      	ldr	r3, [pc, #448]	; (6e0 <McpsConfirm+0x1e4>)
     520:	4798      	blx	r3
    if( mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     522:	687b      	ldr	r3, [r7, #4]
     524:	785b      	ldrb	r3, [r3, #1]
     526:	2b00      	cmp	r3, #0
     528:	d116      	bne.n	558 <McpsConfirm+0x5c>
    {
    }
    else
    {
        switch( mcpsConfirm->McpsRequest )
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	2b01      	cmp	r3, #1
     530:	d004      	beq.n	53c <McpsConfirm+0x40>
     532:	2b03      	cmp	r3, #3
     534:	d004      	beq.n	540 <McpsConfirm+0x44>
     536:	2b00      	cmp	r3, #0
     538:	d004      	beq.n	544 <McpsConfirm+0x48>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
     53a:	e004      	b.n	546 <McpsConfirm+0x4a>
                break;
     53c:	46c0      	nop			; (mov r8, r8)
     53e:	e002      	b.n	546 <McpsConfirm+0x4a>
                break;
     540:	46c0      	nop			; (mov r8, r8)
     542:	e000      	b.n	546 <McpsConfirm+0x4a>
                break;
     544:	46c0      	nop			; (mov r8, r8)
        }

        // Switch LED 1 ON
        GpioWrite( &Led1, 0 );
     546:	4b67      	ldr	r3, [pc, #412]	; (6e4 <McpsConfirm+0x1e8>)
     548:	2100      	movs	r1, #0
     54a:	0018      	movs	r0, r3
     54c:	4b66      	ldr	r3, [pc, #408]	; (6e8 <McpsConfirm+0x1ec>)
     54e:	4798      	blx	r3
        TimerStart( &Led1Timer );
     550:	4b66      	ldr	r3, [pc, #408]	; (6ec <McpsConfirm+0x1f0>)
     552:	0018      	movs	r0, r3
     554:	4b66      	ldr	r3, [pc, #408]	; (6f0 <McpsConfirm+0x1f4>)
     556:	4798      	blx	r3
    }
    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
     558:	230c      	movs	r3, #12
     55a:	18fb      	adds	r3, r7, r3
     55c:	2200      	movs	r2, #0
     55e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
     560:	230c      	movs	r3, #12
     562:	18fb      	adds	r3, r7, r3
     564:	0018      	movs	r0, r3
     566:	4b63      	ldr	r3, [pc, #396]	; (6f4 <McpsConfirm+0x1f8>)
     568:	4798      	blx	r3

    printf( "\r\n###### ===== UPLINK FRAME %lu ==== ######\r\n", mcpsConfirm->UpLinkCounter );
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	68da      	ldr	r2, [r3, #12]
     56e:	4b62      	ldr	r3, [pc, #392]	; (6f8 <McpsConfirm+0x1fc>)
     570:	0011      	movs	r1, r2
     572:	0018      	movs	r0, r3
     574:	4b5a      	ldr	r3, [pc, #360]	; (6e0 <McpsConfirm+0x1e4>)
     576:	4798      	blx	r3
    printf( "\r\n" );
     578:	4b60      	ldr	r3, [pc, #384]	; (6fc <McpsConfirm+0x200>)
     57a:	0018      	movs	r0, r3
     57c:	4b55      	ldr	r3, [pc, #340]	; (6d4 <McpsConfirm+0x1d8>)
     57e:	4798      	blx	r3

    printf( "CLASS       : %c\r\n", "ABC"[mibReq.Param.Class] );
     580:	230c      	movs	r3, #12
     582:	18fb      	adds	r3, r7, r3
     584:	791b      	ldrb	r3, [r3, #4]
     586:	001a      	movs	r2, r3
     588:	4b5d      	ldr	r3, [pc, #372]	; (700 <McpsConfirm+0x204>)
     58a:	5c9b      	ldrb	r3, [r3, r2]
     58c:	001a      	movs	r2, r3
     58e:	4b5d      	ldr	r3, [pc, #372]	; (704 <McpsConfirm+0x208>)
     590:	0011      	movs	r1, r2
     592:	0018      	movs	r0, r3
     594:	4b52      	ldr	r3, [pc, #328]	; (6e0 <McpsConfirm+0x1e4>)
     596:	4798      	blx	r3
    printf( "\r\n" );
     598:	4b58      	ldr	r3, [pc, #352]	; (6fc <McpsConfirm+0x200>)
     59a:	0018      	movs	r0, r3
     59c:	4b4d      	ldr	r3, [pc, #308]	; (6d4 <McpsConfirm+0x1d8>)
     59e:	4798      	blx	r3
    printf( "TX PORT     : %d\r\n", AppData.Port );
     5a0:	4b59      	ldr	r3, [pc, #356]	; (708 <McpsConfirm+0x20c>)
     5a2:	785b      	ldrb	r3, [r3, #1]
     5a4:	001a      	movs	r2, r3
     5a6:	4b59      	ldr	r3, [pc, #356]	; (70c <McpsConfirm+0x210>)
     5a8:	0011      	movs	r1, r2
     5aa:	0018      	movs	r0, r3
     5ac:	4b4c      	ldr	r3, [pc, #304]	; (6e0 <McpsConfirm+0x1e4>)
     5ae:	4798      	blx	r3

    if( AppData.BufferSize != 0 )
     5b0:	4b55      	ldr	r3, [pc, #340]	; (708 <McpsConfirm+0x20c>)
     5b2:	789b      	ldrb	r3, [r3, #2]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d020      	beq.n	5fa <McpsConfirm+0xfe>
    {
        printf( "TX DATA     : " );
     5b8:	4b55      	ldr	r3, [pc, #340]	; (710 <McpsConfirm+0x214>)
     5ba:	0018      	movs	r0, r3
     5bc:	4b48      	ldr	r3, [pc, #288]	; (6e0 <McpsConfirm+0x1e4>)
     5be:	4798      	blx	r3
        if( AppData.MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
     5c0:	4b51      	ldr	r3, [pc, #324]	; (708 <McpsConfirm+0x20c>)
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b01      	cmp	r3, #1
     5c6:	d10c      	bne.n	5e2 <McpsConfirm+0xe6>
        {
            printf( "CONFIRMED - %s\r\n", ( mcpsConfirm->AckReceived != 0 ) ? "ACK" : "NACK" );
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	791b      	ldrb	r3, [r3, #4]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d001      	beq.n	5d4 <McpsConfirm+0xd8>
     5d0:	4b50      	ldr	r3, [pc, #320]	; (714 <McpsConfirm+0x218>)
     5d2:	e000      	b.n	5d6 <McpsConfirm+0xda>
     5d4:	4b50      	ldr	r3, [pc, #320]	; (718 <McpsConfirm+0x21c>)
     5d6:	4a51      	ldr	r2, [pc, #324]	; (71c <McpsConfirm+0x220>)
     5d8:	0019      	movs	r1, r3
     5da:	0010      	movs	r0, r2
     5dc:	4b40      	ldr	r3, [pc, #256]	; (6e0 <McpsConfirm+0x1e4>)
     5de:	4798      	blx	r3
     5e0:	e003      	b.n	5ea <McpsConfirm+0xee>
        }
        else
        {
            printf( "UNCONFIRMED\r\n" );
     5e2:	4b4f      	ldr	r3, [pc, #316]	; (720 <McpsConfirm+0x224>)
     5e4:	0018      	movs	r0, r3
     5e6:	4b3b      	ldr	r3, [pc, #236]	; (6d4 <McpsConfirm+0x1d8>)
     5e8:	4798      	blx	r3
        }
        PrintHexBuffer( AppData.Buffer, AppData.BufferSize );
     5ea:	4b47      	ldr	r3, [pc, #284]	; (708 <McpsConfirm+0x20c>)
     5ec:	685a      	ldr	r2, [r3, #4]
     5ee:	4b46      	ldr	r3, [pc, #280]	; (708 <McpsConfirm+0x20c>)
     5f0:	789b      	ldrb	r3, [r3, #2]
     5f2:	0019      	movs	r1, r3
     5f4:	0010      	movs	r0, r2
     5f6:	4b4b      	ldr	r3, [pc, #300]	; (724 <McpsConfirm+0x228>)
     5f8:	4798      	blx	r3
    }

    printf( "\r\n" );
     5fa:	4b40      	ldr	r3, [pc, #256]	; (6fc <McpsConfirm+0x200>)
     5fc:	0018      	movs	r0, r3
     5fe:	4b35      	ldr	r3, [pc, #212]	; (6d4 <McpsConfirm+0x1d8>)
     600:	4798      	blx	r3
    printf( "DATA RATE   : DR_%d\r\n", mcpsConfirm->Datarate );
     602:	687b      	ldr	r3, [r7, #4]
     604:	789b      	ldrb	r3, [r3, #2]
     606:	001a      	movs	r2, r3
     608:	4b47      	ldr	r3, [pc, #284]	; (728 <McpsConfirm+0x22c>)
     60a:	0011      	movs	r1, r2
     60c:	0018      	movs	r0, r3
     60e:	4b34      	ldr	r3, [pc, #208]	; (6e0 <McpsConfirm+0x1e4>)
     610:	4798      	blx	r3

    mibGet.Type  = MIB_CHANNELS;
     612:	2324      	movs	r3, #36	; 0x24
     614:	18fb      	adds	r3, r7, r3
     616:	221c      	movs	r2, #28
     618:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
     61a:	2324      	movs	r3, #36	; 0x24
     61c:	18fb      	adds	r3, r7, r3
     61e:	0018      	movs	r0, r3
     620:	4b34      	ldr	r3, [pc, #208]	; (6f4 <McpsConfirm+0x1f8>)
     622:	4798      	blx	r3
     624:	1e03      	subs	r3, r0, #0
     626:	d10f      	bne.n	648 <McpsConfirm+0x14c>
    {
        printf( "U/L FREQ    : %lu\r\n", mibGet.Param.ChannelList[mcpsConfirm->Channel].Frequency );
     628:	2324      	movs	r3, #36	; 0x24
     62a:	18fb      	adds	r3, r7, r3
     62c:	6859      	ldr	r1, [r3, #4]
     62e:	687b      	ldr	r3, [r7, #4]
     630:	691a      	ldr	r2, [r3, #16]
     632:	0013      	movs	r3, r2
     634:	005b      	lsls	r3, r3, #1
     636:	189b      	adds	r3, r3, r2
     638:	009b      	lsls	r3, r3, #2
     63a:	18cb      	adds	r3, r1, r3
     63c:	681a      	ldr	r2, [r3, #0]
     63e:	4b3b      	ldr	r3, [pc, #236]	; (72c <McpsConfirm+0x230>)
     640:	0011      	movs	r1, r2
     642:	0018      	movs	r0, r3
     644:	4b26      	ldr	r3, [pc, #152]	; (6e0 <McpsConfirm+0x1e4>)
     646:	4798      	blx	r3
    }

    printf( "TX POWER    : %d\r\n", mcpsConfirm->TxPower );
     648:	687b      	ldr	r3, [r7, #4]
     64a:	78db      	ldrb	r3, [r3, #3]
     64c:	b25b      	sxtb	r3, r3
     64e:	001a      	movs	r2, r3
     650:	4b37      	ldr	r3, [pc, #220]	; (730 <McpsConfirm+0x234>)
     652:	0011      	movs	r1, r2
     654:	0018      	movs	r0, r3
     656:	4b22      	ldr	r3, [pc, #136]	; (6e0 <McpsConfirm+0x1e4>)
     658:	4798      	blx	r3

    mibGet.Type  = MIB_CHANNELS_MASK;
     65a:	2324      	movs	r3, #36	; 0x24
     65c:	18fb      	adds	r3, r7, r3
     65e:	221f      	movs	r2, #31
     660:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
     662:	2324      	movs	r3, #36	; 0x24
     664:	18fb      	adds	r3, r7, r3
     666:	0018      	movs	r0, r3
     668:	4b22      	ldr	r3, [pc, #136]	; (6f4 <McpsConfirm+0x1f8>)
     66a:	4798      	blx	r3
     66c:	1e03      	subs	r3, r0, #0
     66e:	d127      	bne.n	6c0 <McpsConfirm+0x1c4>
    {
        printf("CHANNEL MASK: ");
     670:	4b30      	ldr	r3, [pc, #192]	; (734 <McpsConfirm+0x238>)
     672:	0018      	movs	r0, r3
     674:	4b1a      	ldr	r3, [pc, #104]	; (6e0 <McpsConfirm+0x1e4>)
     676:	4798      	blx	r3
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
     678:	233f      	movs	r3, #63	; 0x3f
     67a:	18fb      	adds	r3, r7, r3
     67c:	2200      	movs	r2, #0
     67e:	701a      	strb	r2, [r3, #0]
     680:	e015      	b.n	6ae <McpsConfirm+0x1b2>

#error "Please define a region in the compiler options."

#endif
        {
            printf("%04X ", mibGet.Param.ChannelsMask[i] );
     682:	2324      	movs	r3, #36	; 0x24
     684:	18fb      	adds	r3, r7, r3
     686:	685a      	ldr	r2, [r3, #4]
     688:	233f      	movs	r3, #63	; 0x3f
     68a:	18fb      	adds	r3, r7, r3
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	005b      	lsls	r3, r3, #1
     690:	18d3      	adds	r3, r2, r3
     692:	881b      	ldrh	r3, [r3, #0]
     694:	001a      	movs	r2, r3
     696:	4b28      	ldr	r3, [pc, #160]	; (738 <McpsConfirm+0x23c>)
     698:	0011      	movs	r1, r2
     69a:	0018      	movs	r0, r3
     69c:	4b10      	ldr	r3, [pc, #64]	; (6e0 <McpsConfirm+0x1e4>)
     69e:	4798      	blx	r3
        for( uint8_t i = 0; i < 1; i++)
     6a0:	233f      	movs	r3, #63	; 0x3f
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	781a      	ldrb	r2, [r3, #0]
     6a6:	233f      	movs	r3, #63	; 0x3f
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	3201      	adds	r2, #1
     6ac:	701a      	strb	r2, [r3, #0]
     6ae:	233f      	movs	r3, #63	; 0x3f
     6b0:	18fb      	adds	r3, r7, r3
     6b2:	781b      	ldrb	r3, [r3, #0]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d0e4      	beq.n	682 <McpsConfirm+0x186>
        }
        printf("\r\n");
     6b8:	4b10      	ldr	r3, [pc, #64]	; (6fc <McpsConfirm+0x200>)
     6ba:	0018      	movs	r0, r3
     6bc:	4b05      	ldr	r3, [pc, #20]	; (6d4 <McpsConfirm+0x1d8>)
     6be:	4798      	blx	r3
    }

    printf( "\r\n" );
     6c0:	4b0e      	ldr	r3, [pc, #56]	; (6fc <McpsConfirm+0x200>)
     6c2:	0018      	movs	r0, r3
     6c4:	4b03      	ldr	r3, [pc, #12]	; (6d4 <McpsConfirm+0x1d8>)
     6c6:	4798      	blx	r3
}
     6c8:	46c0      	nop			; (mov r8, r8)
     6ca:	46bd      	mov	sp, r7
     6cc:	b010      	add	sp, #64	; 0x40
     6ce:	bd80      	pop	{r7, pc}
     6d0:	0001ec30 	.word	0x0001ec30
     6d4:	00019d41 	.word	0x00019d41
     6d8:	20000090 	.word	0x20000090
     6dc:	0001ebcc 	.word	0x0001ebcc
     6e0:	00019c7d 	.word	0x00019c7d
     6e4:	20001b50 	.word	0x20001b50
     6e8:	00016a79 	.word	0x00016a79
     6ec:	20000bf4 	.word	0x20000bf4
     6f0:	00016d8d 	.word	0x00016d8d
     6f4:	0000ac39 	.word	0x0000ac39
     6f8:	0001ec5c 	.word	0x0001ec5c
     6fc:	0001eb88 	.word	0x0001eb88
     700:	0001ed4c 	.word	0x0001ed4c
     704:	0001ec8c 	.word	0x0001ec8c
     708:	20000c20 	.word	0x20000c20
     70c:	0001eca0 	.word	0x0001eca0
     710:	0001ecb4 	.word	0x0001ecb4
     714:	0001ecc4 	.word	0x0001ecc4
     718:	0001ecc8 	.word	0x0001ecc8
     71c:	0001ecd0 	.word	0x0001ecd0
     720:	0001ece4 	.word	0x0001ece4
     724:	00000115 	.word	0x00000115
     728:	0001ecf4 	.word	0x0001ecf4
     72c:	0001ed0c 	.word	0x0001ed0c
     730:	0001ed20 	.word	0x0001ed20
     734:	0001ed34 	.word	0x0001ed34
     738:	0001ed44 	.word	0x0001ed44

0000073c <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
     73c:	b590      	push	{r4, r7, lr}
     73e:	b0a9      	sub	sp, #164	; 0xa4
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MCPS-Indication ==== ######\r\n" );
     744:	4bc8      	ldr	r3, [pc, #800]	; (a68 <McpsIndication+0x32c>)
     746:	0018      	movs	r0, r3
     748:	4bc8      	ldr	r3, [pc, #800]	; (a6c <McpsIndication+0x330>)
     74a:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	785b      	ldrb	r3, [r3, #1]
     750:	001a      	movs	r2, r3
     752:	4bc7      	ldr	r3, [pc, #796]	; (a70 <McpsIndication+0x334>)
     754:	0092      	lsls	r2, r2, #2
     756:	58d2      	ldr	r2, [r2, r3]
     758:	4bc6      	ldr	r3, [pc, #792]	; (a74 <McpsIndication+0x338>)
     75a:	0011      	movs	r1, r2
     75c:	0018      	movs	r0, r3
     75e:	4bc6      	ldr	r3, [pc, #792]	; (a78 <McpsIndication+0x33c>)
     760:	4798      	blx	r3
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     762:	687b      	ldr	r3, [r7, #4]
     764:	785b      	ldrb	r3, [r3, #1]
     766:	2b00      	cmp	r3, #0
     768:	d000      	beq.n	76c <McpsIndication+0x30>
     76a:	e27d      	b.n	c68 <McpsIndication+0x52c>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	2b01      	cmp	r3, #1
     772:	d008      	beq.n	786 <McpsIndication+0x4a>
     774:	dc02      	bgt.n	77c <McpsIndication+0x40>
     776:	2b00      	cmp	r3, #0
     778:	d007      	beq.n	78a <McpsIndication+0x4e>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
     77a:	e00b      	b.n	794 <McpsIndication+0x58>
    switch( mcpsIndication->McpsIndication )
     77c:	2b02      	cmp	r3, #2
     77e:	d006      	beq.n	78e <McpsIndication+0x52>
     780:	2b03      	cmp	r3, #3
     782:	d006      	beq.n	792 <McpsIndication+0x56>
            break;
     784:	e006      	b.n	794 <McpsIndication+0x58>
            break;
     786:	46c0      	nop			; (mov r8, r8)
     788:	e004      	b.n	794 <McpsIndication+0x58>
            break;
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	e002      	b.n	794 <McpsIndication+0x58>
            break;
     78e:	46c0      	nop			; (mov r8, r8)
     790:	e000      	b.n	794 <McpsIndication+0x58>
            break;
     792:	46c0      	nop			; (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
     794:	687b      	ldr	r3, [r7, #4]
     796:	795b      	ldrb	r3, [r3, #5]
     798:	2b01      	cmp	r3, #1
     79a:	d101      	bne.n	7a0 <McpsIndication+0x64>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        OnTxNextPacketTimerEvent( );
     79c:	4bb7      	ldr	r3, [pc, #732]	; (a7c <McpsIndication+0x340>)
     79e:	4798      	blx	r3
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot

    if( ComplianceTest.Running == true )
     7a0:	4bb7      	ldr	r3, [pc, #732]	; (a80 <McpsIndication+0x344>)
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d005      	beq.n	7b4 <McpsIndication+0x78>
    {
        ComplianceTest.DownLinkCounter++;
     7a8:	4bb5      	ldr	r3, [pc, #724]	; (a80 <McpsIndication+0x344>)
     7aa:	899b      	ldrh	r3, [r3, #12]
     7ac:	3301      	adds	r3, #1
     7ae:	b29a      	uxth	r2, r3
     7b0:	4bb3      	ldr	r3, [pc, #716]	; (a80 <McpsIndication+0x344>)
     7b2:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->RxData == true )
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	7b5b      	ldrb	r3, [r3, #13]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d100      	bne.n	7be <McpsIndication+0x82>
     7bc:	e1d6      	b.n	b6c <McpsIndication+0x430>
    {
        switch( mcpsIndication->Port )
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	78db      	ldrb	r3, [r3, #3]
     7c2:	2b01      	cmp	r3, #1
     7c4:	da00      	bge.n	7c8 <McpsIndication+0x8c>
     7c6:	e1cc      	b.n	b62 <McpsIndication+0x426>
     7c8:	2b02      	cmp	r3, #2
     7ca:	dd02      	ble.n	7d2 <McpsIndication+0x96>
     7cc:	2be0      	cmp	r3, #224	; 0xe0
     7ce:	d011      	beq.n	7f4 <McpsIndication+0xb8>
                    break;
                }
            }
            break;
        default:
            break;
     7d0:	e1c7      	b.n	b62 <McpsIndication+0x426>
            if( mcpsIndication->BufferSize == 1 )
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	7b1b      	ldrb	r3, [r3, #12]
     7d6:	2b01      	cmp	r3, #1
     7d8:	d000      	beq.n	7dc <McpsIndication+0xa0>
     7da:	e1c4      	b.n	b66 <McpsIndication+0x42a>
                AppLedStateOn = mcpsIndication->Buffer[0] & 0x01;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	689b      	ldr	r3, [r3, #8]
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	001a      	movs	r2, r3
     7e4:	2301      	movs	r3, #1
     7e6:	4013      	ands	r3, r2
     7e8:	1e5a      	subs	r2, r3, #1
     7ea:	4193      	sbcs	r3, r2
     7ec:	b2da      	uxtb	r2, r3
     7ee:	4ba5      	ldr	r3, [pc, #660]	; (a84 <McpsIndication+0x348>)
     7f0:	701a      	strb	r2, [r3, #0]
            break;
     7f2:	e1b8      	b.n	b66 <McpsIndication+0x42a>
            if( ComplianceTest.Running == false )
     7f4:	4ba2      	ldr	r3, [pc, #648]	; (a80 <McpsIndication+0x344>)
     7f6:	781b      	ldrb	r3, [r3, #0]
     7f8:	2201      	movs	r2, #1
     7fa:	4053      	eors	r3, r2
     7fc:	b2db      	uxtb	r3, r3
     7fe:	2b00      	cmp	r3, #0
     800:	d04f      	beq.n	8a2 <McpsIndication+0x166>
                if( ( mcpsIndication->BufferSize == 4 ) &&
     802:	687b      	ldr	r3, [r7, #4]
     804:	7b1b      	ldrb	r3, [r3, #12]
     806:	2b04      	cmp	r3, #4
     808:	d000      	beq.n	80c <McpsIndication+0xd0>
     80a:	e1ae      	b.n	b6a <McpsIndication+0x42e>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	689b      	ldr	r3, [r3, #8]
     810:	781b      	ldrb	r3, [r3, #0]
                if( ( mcpsIndication->BufferSize == 4 ) &&
     812:	2b01      	cmp	r3, #1
     814:	d000      	beq.n	818 <McpsIndication+0xdc>
     816:	e1a8      	b.n	b6a <McpsIndication+0x42e>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
     818:	687b      	ldr	r3, [r7, #4]
     81a:	689b      	ldr	r3, [r3, #8]
     81c:	3301      	adds	r3, #1
     81e:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
     820:	2b01      	cmp	r3, #1
     822:	d000      	beq.n	826 <McpsIndication+0xea>
     824:	e1a1      	b.n	b6a <McpsIndication+0x42e>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
     826:	687b      	ldr	r3, [r7, #4]
     828:	689b      	ldr	r3, [r3, #8]
     82a:	3302      	adds	r3, #2
     82c:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
     82e:	2b01      	cmp	r3, #1
     830:	d000      	beq.n	834 <McpsIndication+0xf8>
     832:	e19a      	b.n	b6a <McpsIndication+0x42e>
                    ( mcpsIndication->Buffer[3] == 0x01 ) )
     834:	687b      	ldr	r3, [r7, #4]
     836:	689b      	ldr	r3, [r3, #8]
     838:	3303      	adds	r3, #3
     83a:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
     83c:	2b01      	cmp	r3, #1
     83e:	d000      	beq.n	842 <McpsIndication+0x106>
     840:	e193      	b.n	b6a <McpsIndication+0x42e>
                    IsTxConfirmed = false;
     842:	4b91      	ldr	r3, [pc, #580]	; (a88 <McpsIndication+0x34c>)
     844:	2200      	movs	r2, #0
     846:	701a      	strb	r2, [r3, #0]
                    AppPort = 224;
     848:	4b90      	ldr	r3, [pc, #576]	; (a8c <McpsIndication+0x350>)
     84a:	22e0      	movs	r2, #224	; 0xe0
     84c:	701a      	strb	r2, [r3, #0]
                    AppDataSizeBackup = AppDataSize;
     84e:	4b90      	ldr	r3, [pc, #576]	; (a90 <McpsIndication+0x354>)
     850:	781a      	ldrb	r2, [r3, #0]
     852:	4b90      	ldr	r3, [pc, #576]	; (a94 <McpsIndication+0x358>)
     854:	701a      	strb	r2, [r3, #0]
                    AppDataSize = 2;
     856:	4b8e      	ldr	r3, [pc, #568]	; (a90 <McpsIndication+0x354>)
     858:	2202      	movs	r2, #2
     85a:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
     85c:	4b88      	ldr	r3, [pc, #544]	; (a80 <McpsIndication+0x344>)
     85e:	2200      	movs	r2, #0
     860:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.LinkCheck = false;
     862:	4b87      	ldr	r3, [pc, #540]	; (a80 <McpsIndication+0x344>)
     864:	2200      	movs	r2, #0
     866:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = 0;
     868:	4b85      	ldr	r3, [pc, #532]	; (a80 <McpsIndication+0x344>)
     86a:	2200      	movs	r2, #0
     86c:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = 0;
     86e:	4b84      	ldr	r3, [pc, #528]	; (a80 <McpsIndication+0x344>)
     870:	2200      	movs	r2, #0
     872:	741a      	strb	r2, [r3, #16]
                    ComplianceTest.Running = true;
     874:	4b82      	ldr	r3, [pc, #520]	; (a80 <McpsIndication+0x344>)
     876:	2201      	movs	r2, #1
     878:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
     87a:	4b81      	ldr	r3, [pc, #516]	; (a80 <McpsIndication+0x344>)
     87c:	2201      	movs	r2, #1
     87e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
     880:	2368      	movs	r3, #104	; 0x68
     882:	18fb      	adds	r3, r7, r3
     884:	2202      	movs	r2, #2
     886:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = true;
     888:	2368      	movs	r3, #104	; 0x68
     88a:	18fb      	adds	r3, r7, r3
     88c:	2201      	movs	r2, #1
     88e:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     890:	2368      	movs	r3, #104	; 0x68
     892:	18fb      	adds	r3, r7, r3
     894:	0018      	movs	r0, r3
     896:	4b80      	ldr	r3, [pc, #512]	; (a98 <McpsIndication+0x35c>)
     898:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( false );
     89a:	2000      	movs	r0, #0
     89c:	4b7f      	ldr	r3, [pc, #508]	; (a9c <McpsIndication+0x360>)
     89e:	4798      	blx	r3
            break;
     8a0:	e163      	b.n	b6a <McpsIndication+0x42e>
                ComplianceTest.State = mcpsIndication->Buffer[0];
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	689b      	ldr	r3, [r3, #8]
     8a6:	781a      	ldrb	r2, [r3, #0]
     8a8:	4b75      	ldr	r3, [pc, #468]	; (a80 <McpsIndication+0x344>)
     8aa:	705a      	strb	r2, [r3, #1]
                switch( ComplianceTest.State )
     8ac:	4b74      	ldr	r3, [pc, #464]	; (a80 <McpsIndication+0x344>)
     8ae:	785b      	ldrb	r3, [r3, #1]
     8b0:	2b07      	cmp	r3, #7
     8b2:	d900      	bls.n	8b6 <McpsIndication+0x17a>
     8b4:	e153      	b.n	b5e <McpsIndication+0x422>
     8b6:	009a      	lsls	r2, r3, #2
     8b8:	4b79      	ldr	r3, [pc, #484]	; (aa0 <McpsIndication+0x364>)
     8ba:	18d3      	adds	r3, r2, r3
     8bc:	681b      	ldr	r3, [r3, #0]
     8be:	469f      	mov	pc, r3
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
     8c0:	4b71      	ldr	r3, [pc, #452]	; (a88 <McpsIndication+0x34c>)
     8c2:	2200      	movs	r2, #0
     8c4:	701a      	strb	r2, [r3, #0]
                    AppPort = LORAWAN_APP_PORT;
     8c6:	4b71      	ldr	r3, [pc, #452]	; (a8c <McpsIndication+0x350>)
     8c8:	2202      	movs	r2, #2
     8ca:	701a      	strb	r2, [r3, #0]
                    AppDataSize = AppDataSizeBackup;
     8cc:	4b71      	ldr	r3, [pc, #452]	; (a94 <McpsIndication+0x358>)
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	4b6f      	ldr	r3, [pc, #444]	; (a90 <McpsIndication+0x354>)
     8d2:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
     8d4:	4b6a      	ldr	r3, [pc, #424]	; (a80 <McpsIndication+0x344>)
     8d6:	2200      	movs	r2, #0
     8d8:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.Running = false;
     8da:	4b69      	ldr	r3, [pc, #420]	; (a80 <McpsIndication+0x344>)
     8dc:	2200      	movs	r2, #0
     8de:	701a      	strb	r2, [r3, #0]
                    mibReq.Type = MIB_ADR;
     8e0:	2350      	movs	r3, #80	; 0x50
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	2202      	movs	r2, #2
     8e6:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     8e8:	2350      	movs	r3, #80	; 0x50
     8ea:	18fb      	adds	r3, r7, r3
     8ec:	2201      	movs	r2, #1
     8ee:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     8f0:	2350      	movs	r3, #80	; 0x50
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	0018      	movs	r0, r3
     8f6:	4b68      	ldr	r3, [pc, #416]	; (a98 <McpsIndication+0x35c>)
     8f8:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     8fa:	2000      	movs	r0, #0
     8fc:	4b67      	ldr	r3, [pc, #412]	; (a9c <McpsIndication+0x360>)
     8fe:	4798      	blx	r3
                    break;
     900:	e12e      	b.n	b60 <McpsIndication+0x424>
                    AppDataSize = 2;
     902:	4b63      	ldr	r3, [pc, #396]	; (a90 <McpsIndication+0x354>)
     904:	2202      	movs	r2, #2
     906:	701a      	strb	r2, [r3, #0]
                    break;
     908:	e12a      	b.n	b60 <McpsIndication+0x424>
                    IsTxConfirmed = true;
     90a:	4b5f      	ldr	r3, [pc, #380]	; (a88 <McpsIndication+0x34c>)
     90c:	2201      	movs	r2, #1
     90e:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
     910:	4b5b      	ldr	r3, [pc, #364]	; (a80 <McpsIndication+0x344>)
     912:	2201      	movs	r2, #1
     914:	705a      	strb	r2, [r3, #1]
                    break;
     916:	e123      	b.n	b60 <McpsIndication+0x424>
                    IsTxConfirmed = false;
     918:	4b5b      	ldr	r3, [pc, #364]	; (a88 <McpsIndication+0x34c>)
     91a:	2200      	movs	r2, #0
     91c:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
     91e:	4b58      	ldr	r3, [pc, #352]	; (a80 <McpsIndication+0x344>)
     920:	2201      	movs	r2, #1
     922:	705a      	strb	r2, [r3, #1]
                    break;
     924:	e11c      	b.n	b60 <McpsIndication+0x424>
                    AppDataSize = mcpsIndication->BufferSize;
     926:	687b      	ldr	r3, [r7, #4]
     928:	7b1a      	ldrb	r2, [r3, #12]
     92a:	4b59      	ldr	r3, [pc, #356]	; (a90 <McpsIndication+0x354>)
     92c:	701a      	strb	r2, [r3, #0]
                    AppDataBuffer[0] = 4;
     92e:	4b5d      	ldr	r3, [pc, #372]	; (aa4 <McpsIndication+0x368>)
     930:	2204      	movs	r2, #4
     932:	701a      	strb	r2, [r3, #0]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
     934:	239f      	movs	r3, #159	; 0x9f
     936:	18fb      	adds	r3, r7, r3
     938:	2201      	movs	r2, #1
     93a:	701a      	strb	r2, [r3, #0]
     93c:	e014      	b.n	968 <McpsIndication+0x22c>
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
     93e:	239f      	movs	r3, #159	; 0x9f
     940:	18fb      	adds	r3, r7, r3
     942:	781a      	ldrb	r2, [r3, #0]
     944:	687b      	ldr	r3, [r7, #4]
     946:	6899      	ldr	r1, [r3, #8]
     948:	239f      	movs	r3, #159	; 0x9f
     94a:	18fb      	adds	r3, r7, r3
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	18cb      	adds	r3, r1, r3
     950:	781b      	ldrb	r3, [r3, #0]
     952:	3301      	adds	r3, #1
     954:	b2d9      	uxtb	r1, r3
     956:	4b53      	ldr	r3, [pc, #332]	; (aa4 <McpsIndication+0x368>)
     958:	5499      	strb	r1, [r3, r2]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
     95a:	239f      	movs	r3, #159	; 0x9f
     95c:	18fb      	adds	r3, r7, r3
     95e:	781a      	ldrb	r2, [r3, #0]
     960:	239f      	movs	r3, #159	; 0x9f
     962:	18fb      	adds	r3, r7, r3
     964:	3201      	adds	r2, #1
     966:	701a      	strb	r2, [r3, #0]
     968:	239f      	movs	r3, #159	; 0x9f
     96a:	18fb      	adds	r3, r7, r3
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	4a48      	ldr	r2, [pc, #288]	; (a90 <McpsIndication+0x354>)
     970:	7812      	ldrb	r2, [r2, #0]
     972:	2af1      	cmp	r2, #241	; 0xf1
     974:	d802      	bhi.n	97c <McpsIndication+0x240>
     976:	4a46      	ldr	r2, [pc, #280]	; (a90 <McpsIndication+0x354>)
     978:	7812      	ldrb	r2, [r2, #0]
     97a:	e000      	b.n	97e <McpsIndication+0x242>
     97c:	22f2      	movs	r2, #242	; 0xf2
     97e:	4293      	cmp	r3, r2
     980:	dbdd      	blt.n	93e <McpsIndication+0x202>
                    break;
     982:	e0ed      	b.n	b60 <McpsIndication+0x424>
                        mlmeReq.Type = MLME_LINK_CHECK;
     984:	2340      	movs	r3, #64	; 0x40
     986:	18fb      	adds	r3, r7, r3
     988:	2203      	movs	r2, #3
     98a:	701a      	strb	r2, [r3, #0]
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     98c:	2397      	movs	r3, #151	; 0x97
     98e:	18fc      	adds	r4, r7, r3
     990:	2340      	movs	r3, #64	; 0x40
     992:	18fb      	adds	r3, r7, r3
     994:	0018      	movs	r0, r3
     996:	4b44      	ldr	r3, [pc, #272]	; (aa8 <McpsIndication+0x36c>)
     998:	4798      	blx	r3
     99a:	0003      	movs	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
                        printf( "\r\n###### ===== MLME-Request - MLME_LINK_CHECK ==== ######\r\n" );
     99e:	4b43      	ldr	r3, [pc, #268]	; (aac <McpsIndication+0x370>)
     9a0:	0018      	movs	r0, r3
     9a2:	4b32      	ldr	r3, [pc, #200]	; (a6c <McpsIndication+0x330>)
     9a4:	4798      	blx	r3
                        printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     9a6:	2397      	movs	r3, #151	; 0x97
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	781a      	ldrb	r2, [r3, #0]
     9ac:	4b40      	ldr	r3, [pc, #256]	; (ab0 <McpsIndication+0x374>)
     9ae:	0092      	lsls	r2, r2, #2
     9b0:	58d2      	ldr	r2, [r2, r3]
     9b2:	4b30      	ldr	r3, [pc, #192]	; (a74 <McpsIndication+0x338>)
     9b4:	0011      	movs	r1, r2
     9b6:	0018      	movs	r0, r3
     9b8:	4b2f      	ldr	r3, [pc, #188]	; (a78 <McpsIndication+0x33c>)
     9ba:	4798      	blx	r3
                    break;
     9bc:	e0d0      	b.n	b60 <McpsIndication+0x424>
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
     9be:	4b32      	ldr	r3, [pc, #200]	; (a88 <McpsIndication+0x34c>)
     9c0:	2200      	movs	r2, #0
     9c2:	701a      	strb	r2, [r3, #0]
                        AppPort = LORAWAN_APP_PORT;
     9c4:	4b31      	ldr	r3, [pc, #196]	; (a8c <McpsIndication+0x350>)
     9c6:	2202      	movs	r2, #2
     9c8:	701a      	strb	r2, [r3, #0]
                        AppDataSize = AppDataSizeBackup;
     9ca:	4b32      	ldr	r3, [pc, #200]	; (a94 <McpsIndication+0x358>)
     9cc:	781a      	ldrb	r2, [r3, #0]
     9ce:	4b30      	ldr	r3, [pc, #192]	; (a90 <McpsIndication+0x354>)
     9d0:	701a      	strb	r2, [r3, #0]
                        ComplianceTest.DownLinkCounter = 0;
     9d2:	4b2b      	ldr	r3, [pc, #172]	; (a80 <McpsIndication+0x344>)
     9d4:	2200      	movs	r2, #0
     9d6:	819a      	strh	r2, [r3, #12]
                        ComplianceTest.Running = false;
     9d8:	4b29      	ldr	r3, [pc, #164]	; (a80 <McpsIndication+0x344>)
     9da:	2200      	movs	r2, #0
     9dc:	701a      	strb	r2, [r3, #0]
                        mibReq.Type = MIB_ADR;
     9de:	2328      	movs	r3, #40	; 0x28
     9e0:	18fb      	adds	r3, r7, r3
     9e2:	2202      	movs	r2, #2
     9e4:	701a      	strb	r2, [r3, #0]
                        mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     9e6:	2328      	movs	r3, #40	; 0x28
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	2201      	movs	r2, #1
     9ec:	711a      	strb	r2, [r3, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
     9ee:	2328      	movs	r3, #40	; 0x28
     9f0:	18fb      	adds	r3, r7, r3
     9f2:	0018      	movs	r0, r3
     9f4:	4b28      	ldr	r3, [pc, #160]	; (a98 <McpsIndication+0x35c>)
     9f6:	4798      	blx	r3
                        LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     9f8:	2000      	movs	r0, #0
     9fa:	4b28      	ldr	r3, [pc, #160]	; (a9c <McpsIndication+0x360>)
     9fc:	4798      	blx	r3
                        JoinNetwork( );
     9fe:	4b2d      	ldr	r3, [pc, #180]	; (ab4 <McpsIndication+0x378>)
     a00:	4798      	blx	r3
                    break;
     a02:	e0ad      	b.n	b60 <McpsIndication+0x424>
                        if( mcpsIndication->BufferSize == 3 )
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	7b1b      	ldrb	r3, [r3, #12]
     a08:	2b03      	cmp	r3, #3
     a0a:	d157      	bne.n	abc <McpsIndication+0x380>
                            mlmeReq.Type = MLME_TXCW;
     a0c:	2318      	movs	r3, #24
     a0e:	18fb      	adds	r3, r7, r3
     a10:	2204      	movs	r2, #4
     a12:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	689b      	ldr	r3, [r3, #8]
     a18:	3301      	adds	r3, #1
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	021b      	lsls	r3, r3, #8
     a1e:	b21a      	sxth	r2, r3
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	689b      	ldr	r3, [r3, #8]
     a24:	3302      	adds	r3, #2
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	b21b      	sxth	r3, r3
     a2a:	4313      	orrs	r3, r2
     a2c:	b21b      	sxth	r3, r3
     a2e:	b29a      	uxth	r2, r3
     a30:	2318      	movs	r3, #24
     a32:	18fb      	adds	r3, r7, r3
     a34:	809a      	strh	r2, [r3, #4]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     a36:	2396      	movs	r3, #150	; 0x96
     a38:	18fc      	adds	r4, r7, r3
     a3a:	2318      	movs	r3, #24
     a3c:	18fb      	adds	r3, r7, r3
     a3e:	0018      	movs	r0, r3
     a40:	4b19      	ldr	r3, [pc, #100]	; (aa8 <McpsIndication+0x36c>)
     a42:	4798      	blx	r3
     a44:	0003      	movs	r3, r0
     a46:	7023      	strb	r3, [r4, #0]
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW ==== ######\r\n" );
     a48:	4b1b      	ldr	r3, [pc, #108]	; (ab8 <McpsIndication+0x37c>)
     a4a:	0018      	movs	r0, r3
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <McpsIndication+0x330>)
     a4e:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     a50:	2396      	movs	r3, #150	; 0x96
     a52:	18fb      	adds	r3, r7, r3
     a54:	781a      	ldrb	r2, [r3, #0]
     a56:	4b16      	ldr	r3, [pc, #88]	; (ab0 <McpsIndication+0x374>)
     a58:	0092      	lsls	r2, r2, #2
     a5a:	58d2      	ldr	r2, [r2, r3]
     a5c:	4b05      	ldr	r3, [pc, #20]	; (a74 <McpsIndication+0x338>)
     a5e:	0011      	movs	r1, r2
     a60:	0018      	movs	r0, r3
     a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <McpsIndication+0x33c>)
     a64:	4798      	blx	r3
     a66:	e076      	b.n	b56 <McpsIndication+0x41a>
     a68:	0001ed50 	.word	0x0001ed50
     a6c:	00019d41 	.word	0x00019d41
     a70:	20000090 	.word	0x20000090
     a74:	0001ebcc 	.word	0x0001ebcc
     a78:	00019c7d 	.word	0x00019c7d
     a7c:	0000043d 	.word	0x0000043d
     a80:	20001b04 	.word	0x20001b04
     a84:	20000bf0 	.word	0x20000bf0
     a88:	20000bd6 	.word	0x20000bd6
     a8c:	20000030 	.word	0x20000030
     a90:	20000031 	.word	0x20000031
     a94:	20000032 	.word	0x20000032
     a98:	0000aeed 	.word	0x0000aeed
     a9c:	0000c1fd 	.word	0x0000c1fd
     aa0:	0001eef8 	.word	0x0001eef8
     aa4:	20000ae4 	.word	0x20000ae4
     aa8:	0000b8a1 	.word	0x0000b8a1
     aac:	0001ed7c 	.word	0x0001ed7c
     ab0:	20000034 	.word	0x20000034
     ab4:	000001bd 	.word	0x000001bd
     ab8:	0001edb8 	.word	0x0001edb8
                        else if( mcpsIndication->BufferSize == 7 )
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	7b1b      	ldrb	r3, [r3, #12]
     ac0:	2b07      	cmp	r3, #7
     ac2:	d148      	bne.n	b56 <McpsIndication+0x41a>
                            mlmeReq.Type = MLME_TXCW_1;
     ac4:	2308      	movs	r3, #8
     ac6:	18fb      	adds	r3, r7, r3
     ac8:	2205      	movs	r2, #5
     aca:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	3301      	adds	r3, #1
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	021b      	lsls	r3, r3, #8
     ad6:	b21a      	sxth	r2, r3
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	689b      	ldr	r3, [r3, #8]
     adc:	3302      	adds	r3, #2
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	b21b      	sxth	r3, r3
     ae2:	4313      	orrs	r3, r2
     ae4:	b21b      	sxth	r3, r3
     ae6:	b29a      	uxth	r2, r3
     ae8:	2308      	movs	r3, #8
     aea:	18fb      	adds	r3, r7, r3
     aec:	809a      	strh	r2, [r3, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	689b      	ldr	r3, [r3, #8]
     af2:	3303      	adds	r3, #3
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	041a      	lsls	r2, r3, #16
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	689b      	ldr	r3, [r3, #8]
     afc:	3304      	adds	r3, #4
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	021b      	lsls	r3, r3, #8
     b02:	431a      	orrs	r2, r3
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	689b      	ldr	r3, [r3, #8]
     b08:	3305      	adds	r3, #5
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	4313      	orrs	r3, r2
     b0e:	001a      	movs	r2, r3
     b10:	2364      	movs	r3, #100	; 0x64
     b12:	435a      	muls	r2, r3
     b14:	2308      	movs	r3, #8
     b16:	18fb      	adds	r3, r7, r3
     b18:	609a      	str	r2, [r3, #8]
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	689b      	ldr	r3, [r3, #8]
     b1e:	799a      	ldrb	r2, [r3, #6]
     b20:	2308      	movs	r3, #8
     b22:	18fb      	adds	r3, r7, r3
     b24:	731a      	strb	r2, [r3, #12]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     b26:	2395      	movs	r3, #149	; 0x95
     b28:	18fc      	adds	r4, r7, r3
     b2a:	2308      	movs	r3, #8
     b2c:	18fb      	adds	r3, r7, r3
     b2e:	0018      	movs	r0, r3
     b30:	4b4f      	ldr	r3, [pc, #316]	; (c70 <McpsIndication+0x534>)
     b32:	4798      	blx	r3
     b34:	0003      	movs	r3, r0
     b36:	7023      	strb	r3, [r4, #0]
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW1 ==== ######\r\n" );
     b38:	4b4e      	ldr	r3, [pc, #312]	; (c74 <McpsIndication+0x538>)
     b3a:	0018      	movs	r0, r3
     b3c:	4b4e      	ldr	r3, [pc, #312]	; (c78 <McpsIndication+0x53c>)
     b3e:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     b40:	2395      	movs	r3, #149	; 0x95
     b42:	18fb      	adds	r3, r7, r3
     b44:	781a      	ldrb	r2, [r3, #0]
     b46:	4b4d      	ldr	r3, [pc, #308]	; (c7c <McpsIndication+0x540>)
     b48:	0092      	lsls	r2, r2, #2
     b4a:	58d2      	ldr	r2, [r2, r3]
     b4c:	4b4c      	ldr	r3, [pc, #304]	; (c80 <McpsIndication+0x544>)
     b4e:	0011      	movs	r1, r2
     b50:	0018      	movs	r0, r3
     b52:	4b4c      	ldr	r3, [pc, #304]	; (c84 <McpsIndication+0x548>)
     b54:	4798      	blx	r3
                        ComplianceTest.State = 1;
     b56:	4b4c      	ldr	r3, [pc, #304]	; (c88 <McpsIndication+0x54c>)
     b58:	2201      	movs	r2, #1
     b5a:	705a      	strb	r2, [r3, #1]
                    break;
     b5c:	e000      	b.n	b60 <McpsIndication+0x424>
                    break;
     b5e:	46c0      	nop			; (mov r8, r8)
            break;
     b60:	e003      	b.n	b6a <McpsIndication+0x42e>
            break;
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	e002      	b.n	b6c <McpsIndication+0x430>
            break;
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	e000      	b.n	b6c <McpsIndication+0x430>
            break;
     b6a:	46c0      	nop			; (mov r8, r8)
        }
    }

    // Switch LED 1 ON for each received downlink
    GpioWrite( &Led1, 1 );
     b6c:	4b47      	ldr	r3, [pc, #284]	; (c8c <McpsIndication+0x550>)
     b6e:	2101      	movs	r1, #1
     b70:	0018      	movs	r0, r3
     b72:	4b47      	ldr	r3, [pc, #284]	; (c90 <McpsIndication+0x554>)
     b74:	4798      	blx	r3
    TimerStart( &Led2Timer );
     b76:	4b47      	ldr	r3, [pc, #284]	; (c94 <McpsIndication+0x558>)
     b78:	0018      	movs	r0, r3
     b7a:	4b47      	ldr	r3, [pc, #284]	; (c98 <McpsIndication+0x55c>)
     b7c:	4798      	blx	r3

    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
     b7e:	2380      	movs	r3, #128	; 0x80
     b80:	18fb      	adds	r3, r7, r3
     b82:	4a46      	ldr	r2, [pc, #280]	; (c9c <McpsIndication+0x560>)
     b84:	ca13      	ldmia	r2!, {r0, r1, r4}
     b86:	c313      	stmia	r3!, {r0, r1, r4}
     b88:	ca03      	ldmia	r2!, {r0, r1}
     b8a:	c303      	stmia	r3!, {r0, r1}
    int32_t snr = 0;
     b8c:	2300      	movs	r3, #0
     b8e:	2298      	movs	r2, #152	; 0x98
     b90:	18ba      	adds	r2, r7, r2
     b92:	6013      	str	r3, [r2, #0]
    if( mcpsIndication->Snr & 0x80 ) // The SNR sign bit is 1
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	7c1b      	ldrb	r3, [r3, #16]
     b98:	b25b      	sxtb	r3, r3
     b9a:	2b00      	cmp	r3, #0
     b9c:	da10      	bge.n	bc0 <McpsIndication+0x484>
    {
        // Invert and divide by 4
        snr = ( ( ~mcpsIndication->Snr + 1 ) & 0xFF ) >> 2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	7c1b      	ldrb	r3, [r3, #16]
     ba2:	425b      	negs	r3, r3
     ba4:	109b      	asrs	r3, r3, #2
     ba6:	223f      	movs	r2, #63	; 0x3f
     ba8:	4013      	ands	r3, r2
     baa:	2298      	movs	r2, #152	; 0x98
     bac:	18ba      	adds	r2, r7, r2
     bae:	6013      	str	r3, [r2, #0]
        snr = -snr;
     bb0:	2398      	movs	r3, #152	; 0x98
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	425b      	negs	r3, r3
     bb8:	2298      	movs	r2, #152	; 0x98
     bba:	18ba      	adds	r2, r7, r2
     bbc:	6013      	str	r3, [r2, #0]
     bbe:	e006      	b.n	bce <McpsIndication+0x492>
    }
    else
    {
        // Divide by 4
        snr = ( mcpsIndication->Snr & 0xFF ) >> 2;
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	7c1b      	ldrb	r3, [r3, #16]
     bc4:	089b      	lsrs	r3, r3, #2
     bc6:	b2db      	uxtb	r3, r3
     bc8:	2298      	movs	r2, #152	; 0x98
     bca:	18ba      	adds	r2, r7, r2
     bcc:	6013      	str	r3, [r2, #0]
    }

    printf( "\r\n###### ===== DOWNLINK FRAME %lu ==== ######\r\n", mcpsIndication->DownLinkCounter );
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	695a      	ldr	r2, [r3, #20]
     bd2:	4b33      	ldr	r3, [pc, #204]	; (ca0 <McpsIndication+0x564>)
     bd4:	0011      	movs	r1, r2
     bd6:	0018      	movs	r0, r3
     bd8:	4b2a      	ldr	r3, [pc, #168]	; (c84 <McpsIndication+0x548>)
     bda:	4798      	blx	r3

    printf( "RX WINDOW   : %s\r\n", slotStrings[mcpsIndication->RxSlot] );
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	7c5b      	ldrb	r3, [r3, #17]
     be0:	001a      	movs	r2, r3
     be2:	2380      	movs	r3, #128	; 0x80
     be4:	18fb      	adds	r3, r7, r3
     be6:	0092      	lsls	r2, r2, #2
     be8:	58d2      	ldr	r2, [r2, r3]
     bea:	4b2e      	ldr	r3, [pc, #184]	; (ca4 <McpsIndication+0x568>)
     bec:	0011      	movs	r1, r2
     bee:	0018      	movs	r0, r3
     bf0:	4b24      	ldr	r3, [pc, #144]	; (c84 <McpsIndication+0x548>)
     bf2:	4798      	blx	r3
    
    printf( "RX PORT     : %d\r\n", mcpsIndication->Port );
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	78db      	ldrb	r3, [r3, #3]
     bf8:	001a      	movs	r2, r3
     bfa:	4b2b      	ldr	r3, [pc, #172]	; (ca8 <McpsIndication+0x56c>)
     bfc:	0011      	movs	r1, r2
     bfe:	0018      	movs	r0, r3
     c00:	4b20      	ldr	r3, [pc, #128]	; (c84 <McpsIndication+0x548>)
     c02:	4798      	blx	r3

    if( mcpsIndication->BufferSize != 0 )
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	7b1b      	ldrb	r3, [r3, #12]
     c08:	2b00      	cmp	r3, #0
     c0a:	d00b      	beq.n	c24 <McpsIndication+0x4e8>
    {
        printf( "RX DATA     : \r\n" );
     c0c:	4b27      	ldr	r3, [pc, #156]	; (cac <McpsIndication+0x570>)
     c0e:	0018      	movs	r0, r3
     c10:	4b19      	ldr	r3, [pc, #100]	; (c78 <McpsIndication+0x53c>)
     c12:	4798      	blx	r3
        PrintHexBuffer( mcpsIndication->Buffer, mcpsIndication->BufferSize );
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	689a      	ldr	r2, [r3, #8]
     c18:	687b      	ldr	r3, [r7, #4]
     c1a:	7b1b      	ldrb	r3, [r3, #12]
     c1c:	0019      	movs	r1, r3
     c1e:	0010      	movs	r0, r2
     c20:	4b23      	ldr	r3, [pc, #140]	; (cb0 <McpsIndication+0x574>)
     c22:	4798      	blx	r3
    }

    printf( "\r\n" );
     c24:	4b23      	ldr	r3, [pc, #140]	; (cb4 <McpsIndication+0x578>)
     c26:	0018      	movs	r0, r3
     c28:	4b13      	ldr	r3, [pc, #76]	; (c78 <McpsIndication+0x53c>)
     c2a:	4798      	blx	r3
    printf( "DATA RATE   : DR_%d\r\n", mcpsIndication->RxDatarate );
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	791b      	ldrb	r3, [r3, #4]
     c30:	001a      	movs	r2, r3
     c32:	4b21      	ldr	r3, [pc, #132]	; (cb8 <McpsIndication+0x57c>)
     c34:	0011      	movs	r1, r2
     c36:	0018      	movs	r0, r3
     c38:	4b12      	ldr	r3, [pc, #72]	; (c84 <McpsIndication+0x548>)
     c3a:	4798      	blx	r3
    printf( "RX RSSI     : %d\r\n", mcpsIndication->Rssi );
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	220e      	movs	r2, #14
     c40:	5e9b      	ldrsh	r3, [r3, r2]
     c42:	001a      	movs	r2, r3
     c44:	4b1d      	ldr	r3, [pc, #116]	; (cbc <McpsIndication+0x580>)
     c46:	0011      	movs	r1, r2
     c48:	0018      	movs	r0, r3
     c4a:	4b0e      	ldr	r3, [pc, #56]	; (c84 <McpsIndication+0x548>)
     c4c:	4798      	blx	r3
    printf( "RX SNR      : %ld\r\n", snr );
     c4e:	2398      	movs	r3, #152	; 0x98
     c50:	18fb      	adds	r3, r7, r3
     c52:	681a      	ldr	r2, [r3, #0]
     c54:	4b1a      	ldr	r3, [pc, #104]	; (cc0 <McpsIndication+0x584>)
     c56:	0011      	movs	r1, r2
     c58:	0018      	movs	r0, r3
     c5a:	4b0a      	ldr	r3, [pc, #40]	; (c84 <McpsIndication+0x548>)
     c5c:	4798      	blx	r3

    printf( "\r\n" );
     c5e:	4b15      	ldr	r3, [pc, #84]	; (cb4 <McpsIndication+0x578>)
     c60:	0018      	movs	r0, r3
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <McpsIndication+0x53c>)
     c64:	4798      	blx	r3
     c66:	e000      	b.n	c6a <McpsIndication+0x52e>
        return;
     c68:	46c0      	nop			; (mov r8, r8)
}
     c6a:	46bd      	mov	sp, r7
     c6c:	b029      	add	sp, #164	; 0xa4
     c6e:	bd90      	pop	{r4, r7, pc}
     c70:	0000b8a1 	.word	0x0000b8a1
     c74:	0001edf0 	.word	0x0001edf0
     c78:	00019d41 	.word	0x00019d41
     c7c:	20000034 	.word	0x20000034
     c80:	0001ebcc 	.word	0x0001ebcc
     c84:	00019c7d 	.word	0x00019c7d
     c88:	20001b04 	.word	0x20001b04
     c8c:	20001b50 	.word	0x20001b50
     c90:	00016a79 	.word	0x00016a79
     c94:	20000c08 	.word	0x20000c08
     c98:	00016d8d 	.word	0x00016d8d
     c9c:	0001eee4 	.word	0x0001eee4
     ca0:	0001ee28 	.word	0x0001ee28
     ca4:	0001ee58 	.word	0x0001ee58
     ca8:	0001ee6c 	.word	0x0001ee6c
     cac:	0001ee80 	.word	0x0001ee80
     cb0:	00000115 	.word	0x00000115
     cb4:	0001eb88 	.word	0x0001eb88
     cb8:	0001ecf4 	.word	0x0001ecf4
     cbc:	0001ee90 	.word	0x0001ee90
     cc0:	0001eea4 	.word	0x0001eea4

00000cc4 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
     cc4:	b580      	push	{r7, lr}
     cc6:	b088      	sub	sp, #32
     cc8:	af00      	add	r7, sp, #0
     cca:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MLME-Confirm ==== ######\r\n" );
     ccc:	4b36      	ldr	r3, [pc, #216]	; (da8 <MlmeConfirm+0xe4>)
     cce:	0018      	movs	r0, r3
     cd0:	4b36      	ldr	r3, [pc, #216]	; (dac <MlmeConfirm+0xe8>)
     cd2:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
     cd4:	687b      	ldr	r3, [r7, #4]
     cd6:	785b      	ldrb	r3, [r3, #1]
     cd8:	001a      	movs	r2, r3
     cda:	4b35      	ldr	r3, [pc, #212]	; (db0 <MlmeConfirm+0xec>)
     cdc:	0092      	lsls	r2, r2, #2
     cde:	58d2      	ldr	r2, [r2, r3]
     ce0:	4b34      	ldr	r3, [pc, #208]	; (db4 <MlmeConfirm+0xf0>)
     ce2:	0011      	movs	r1, r2
     ce4:	0018      	movs	r0, r3
     ce6:	4b34      	ldr	r3, [pc, #208]	; (db8 <MlmeConfirm+0xf4>)
     ce8:	4798      	blx	r3
    if( mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
    {
    }
    switch( mlmeConfirm->MlmeRequest )
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	2b00      	cmp	r3, #0
     cf0:	d002      	beq.n	cf8 <MlmeConfirm+0x34>
     cf2:	2b03      	cmp	r3, #3
     cf4:	d03f      	beq.n	d76 <MlmeConfirm+0xb2>
                }
            }
            break;
        }
        default:
            break;
     cf6:	e052      	b.n	d9e <MlmeConfirm+0xda>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	785b      	ldrb	r3, [r3, #1]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d137      	bne.n	d70 <MlmeConfirm+0xac>
                printf( "###### ===== JOINED ==== ######\r\n" );
     d00:	4b2e      	ldr	r3, [pc, #184]	; (dbc <MlmeConfirm+0xf8>)
     d02:	0018      	movs	r0, r3
     d04:	4b29      	ldr	r3, [pc, #164]	; (dac <MlmeConfirm+0xe8>)
     d06:	4798      	blx	r3
                printf( "\r\nOTAA\r\n\r\n" );
     d08:	4b2d      	ldr	r3, [pc, #180]	; (dc0 <MlmeConfirm+0xfc>)
     d0a:	0018      	movs	r0, r3
     d0c:	4b27      	ldr	r3, [pc, #156]	; (dac <MlmeConfirm+0xe8>)
     d0e:	4798      	blx	r3
                mibGet.Type = MIB_DEV_ADDR;
     d10:	2308      	movs	r3, #8
     d12:	18fb      	adds	r3, r7, r3
     d14:	2204      	movs	r2, #4
     d16:	701a      	strb	r2, [r3, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
     d18:	2308      	movs	r3, #8
     d1a:	18fb      	adds	r3, r7, r3
     d1c:	0018      	movs	r0, r3
     d1e:	4b29      	ldr	r3, [pc, #164]	; (dc4 <MlmeConfirm+0x100>)
     d20:	4798      	blx	r3
                printf( "DevAddr     : %08lX\r\n", mibGet.Param.DevAddr );
     d22:	2308      	movs	r3, #8
     d24:	18fb      	adds	r3, r7, r3
     d26:	685a      	ldr	r2, [r3, #4]
     d28:	4b27      	ldr	r3, [pc, #156]	; (dc8 <MlmeConfirm+0x104>)
     d2a:	0011      	movs	r1, r2
     d2c:	0018      	movs	r0, r3
     d2e:	4b22      	ldr	r3, [pc, #136]	; (db8 <MlmeConfirm+0xf4>)
     d30:	4798      	blx	r3
                printf( "\n\r\n" );
     d32:	4b26      	ldr	r3, [pc, #152]	; (dcc <MlmeConfirm+0x108>)
     d34:	0018      	movs	r0, r3
     d36:	4b1d      	ldr	r3, [pc, #116]	; (dac <MlmeConfirm+0xe8>)
     d38:	4798      	blx	r3
                mibGet.Type = MIB_CHANNELS_DATARATE;
     d3a:	2308      	movs	r3, #8
     d3c:	18fb      	adds	r3, r7, r3
     d3e:	2228      	movs	r2, #40	; 0x28
     d40:	701a      	strb	r2, [r3, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
     d42:	2308      	movs	r3, #8
     d44:	18fb      	adds	r3, r7, r3
     d46:	0018      	movs	r0, r3
     d48:	4b1e      	ldr	r3, [pc, #120]	; (dc4 <MlmeConfirm+0x100>)
     d4a:	4798      	blx	r3
                printf( "DATA RATE   : DR_%d\r\n", mibGet.Param.ChannelsDatarate );
     d4c:	2308      	movs	r3, #8
     d4e:	18fb      	adds	r3, r7, r3
     d50:	791b      	ldrb	r3, [r3, #4]
     d52:	b25b      	sxtb	r3, r3
     d54:	001a      	movs	r2, r3
     d56:	4b1e      	ldr	r3, [pc, #120]	; (dd0 <MlmeConfirm+0x10c>)
     d58:	0011      	movs	r1, r2
     d5a:	0018      	movs	r0, r3
     d5c:	4b16      	ldr	r3, [pc, #88]	; (db8 <MlmeConfirm+0xf4>)
     d5e:	4798      	blx	r3
                printf( "\r\n" );
     d60:	4b1c      	ldr	r3, [pc, #112]	; (dd4 <MlmeConfirm+0x110>)
     d62:	0018      	movs	r0, r3
     d64:	4b11      	ldr	r3, [pc, #68]	; (dac <MlmeConfirm+0xe8>)
     d66:	4798      	blx	r3
                DeviceState = DEVICE_STATE_SEND;
     d68:	4b1b      	ldr	r3, [pc, #108]	; (dd8 <MlmeConfirm+0x114>)
     d6a:	2203      	movs	r2, #3
     d6c:	701a      	strb	r2, [r3, #0]
            break;
     d6e:	e016      	b.n	d9e <MlmeConfirm+0xda>
                JoinNetwork( );
     d70:	4b1a      	ldr	r3, [pc, #104]	; (ddc <MlmeConfirm+0x118>)
     d72:	4798      	blx	r3
            break;
     d74:	e013      	b.n	d9e <MlmeConfirm+0xda>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	785b      	ldrb	r3, [r3, #1]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d10e      	bne.n	d9c <MlmeConfirm+0xd8>
                if( ComplianceTest.Running == true )
     d7e:	4b18      	ldr	r3, [pc, #96]	; (de0 <MlmeConfirm+0x11c>)
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d00a      	beq.n	d9c <MlmeConfirm+0xd8>
                    ComplianceTest.LinkCheck = true;
     d86:	4b16      	ldr	r3, [pc, #88]	; (de0 <MlmeConfirm+0x11c>)
     d88:	2201      	movs	r2, #1
     d8a:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	7a1a      	ldrb	r2, [r3, #8]
     d90:	4b13      	ldr	r3, [pc, #76]	; (de0 <MlmeConfirm+0x11c>)
     d92:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	7a5a      	ldrb	r2, [r3, #9]
     d98:	4b11      	ldr	r3, [pc, #68]	; (de0 <MlmeConfirm+0x11c>)
     d9a:	741a      	strb	r2, [r3, #16]
            break;
     d9c:	46c0      	nop			; (mov r8, r8)
    }
}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	46bd      	mov	sp, r7
     da2:	b008      	add	sp, #32
     da4:	bd80      	pop	{r7, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	0001ef18 	.word	0x0001ef18
     dac:	00019d41 	.word	0x00019d41
     db0:	20000090 	.word	0x20000090
     db4:	0001ebcc 	.word	0x0001ebcc
     db8:	00019c7d 	.word	0x00019c7d
     dbc:	0001ef44 	.word	0x0001ef44
     dc0:	0001ef68 	.word	0x0001ef68
     dc4:	0000ac39 	.word	0x0000ac39
     dc8:	0001ef74 	.word	0x0001ef74
     dcc:	0001ef8c 	.word	0x0001ef8c
     dd0:	0001ecf4 	.word	0x0001ecf4
     dd4:	0001eb88 	.word	0x0001eb88
     dd8:	20000c1d 	.word	0x20000c1d
     ddc:	000001bd 	.word	0x000001bd
     de0:	20001b04 	.word	0x20001b04

00000de4 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] mlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
     de4:	b580      	push	{r7, lr}
     de6:	b082      	sub	sp, #8
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	785b      	ldrb	r3, [r3, #1]
     df0:	2b0e      	cmp	r3, #14
     df2:	d00e      	beq.n	e12 <MlmeIndication+0x2e>
    {
        printf( "\r\n###### ===== MLME-Indication ==== ######\r\n" );
     df4:	4b0d      	ldr	r3, [pc, #52]	; (e2c <MlmeIndication+0x48>)
     df6:	0018      	movs	r0, r3
     df8:	4b0d      	ldr	r3, [pc, #52]	; (e30 <MlmeIndication+0x4c>)
     dfa:	4798      	blx	r3
        printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeIndication->Status] );
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	785b      	ldrb	r3, [r3, #1]
     e00:	001a      	movs	r2, r3
     e02:	4b0c      	ldr	r3, [pc, #48]	; (e34 <MlmeIndication+0x50>)
     e04:	0092      	lsls	r2, r2, #2
     e06:	58d2      	ldr	r2, [r2, r3]
     e08:	4b0b      	ldr	r3, [pc, #44]	; (e38 <MlmeIndication+0x54>)
     e0a:	0011      	movs	r1, r2
     e0c:	0018      	movs	r0, r3
     e0e:	4b0b      	ldr	r3, [pc, #44]	; (e3c <MlmeIndication+0x58>)
     e10:	4798      	blx	r3
    }
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
    {
    }
    switch( mlmeIndication->MlmeIndication )
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	2b06      	cmp	r3, #6
     e18:	d000      	beq.n	e1c <MlmeIndication+0x38>
        {// The MAC signals that we shall provide an uplink as soon as possible
            OnTxNextPacketTimerEvent( );
            break;
        }
        default:
            break;
     e1a:	e002      	b.n	e22 <MlmeIndication+0x3e>
            OnTxNextPacketTimerEvent( );
     e1c:	4b08      	ldr	r3, [pc, #32]	; (e40 <MlmeIndication+0x5c>)
     e1e:	4798      	blx	r3
            break;
     e20:	46c0      	nop			; (mov r8, r8)
    }
}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	46bd      	mov	sp, r7
     e26:	b002      	add	sp, #8
     e28:	bd80      	pop	{r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	0001ef90 	.word	0x0001ef90
     e30:	00019d41 	.word	0x00019d41
     e34:	20000090 	.word	0x20000090
     e38:	0001ebcc 	.word	0x0001ebcc
     e3c:	00019c7d 	.word	0x00019c7d
     e40:	0000043d 	.word	0x0000043d

00000e44 <OnMacProcessNotify>:

void OnMacProcessNotify( void )
{
     e44:	b580      	push	{r7, lr}
     e46:	af00      	add	r7, sp, #0
    IsMacProcessPending = 1;
     e48:	4b02      	ldr	r3, [pc, #8]	; (e54 <OnMacProcessNotify+0x10>)
     e4a:	2201      	movs	r2, #1
     e4c:	701a      	strb	r2, [r3, #0]
}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	46bd      	mov	sp, r7
     e52:	bd80      	pop	{r7, pc}
     e54:	20000c1c 	.word	0x20000c1c

00000e58 <main>:

/**
 * Main application entry point.
 */
int main( void )
{
     e58:	b590      	push	{r4, r7, lr}
     e5a:	b095      	sub	sp, #84	; 0x54
     e5c:	af00      	add	r7, sp, #0
    LoRaMacPrimitives_t macPrimitives;
    LoRaMacCallback_t macCallbacks;
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    BoardInitMcu( );
     e5e:	4be2      	ldr	r3, [pc, #904]	; (11e8 <main+0x390>)
     e60:	4798      	blx	r3
    BoardInitPeriph( );
     e62:	4be2      	ldr	r3, [pc, #904]	; (11ec <main+0x394>)
     e64:	4798      	blx	r3

	printf( "Start app\r\n" );
     e66:	4be2      	ldr	r3, [pc, #904]	; (11f0 <main+0x398>)
     e68:	0018      	movs	r0, r3
     e6a:	4be2      	ldr	r3, [pc, #904]	; (11f4 <main+0x39c>)
     e6c:	4798      	blx	r3

    macPrimitives.MacMcpsConfirm = McpsConfirm;
     e6e:	2330      	movs	r3, #48	; 0x30
     e70:	18fb      	adds	r3, r7, r3
     e72:	4ae1      	ldr	r2, [pc, #900]	; (11f8 <main+0x3a0>)
     e74:	601a      	str	r2, [r3, #0]
    macPrimitives.MacMcpsIndication = McpsIndication;
     e76:	2330      	movs	r3, #48	; 0x30
     e78:	18fb      	adds	r3, r7, r3
     e7a:	4ae0      	ldr	r2, [pc, #896]	; (11fc <main+0x3a4>)
     e7c:	605a      	str	r2, [r3, #4]
    macPrimitives.MacMlmeConfirm = MlmeConfirm;
     e7e:	2330      	movs	r3, #48	; 0x30
     e80:	18fb      	adds	r3, r7, r3
     e82:	4adf      	ldr	r2, [pc, #892]	; (1200 <main+0x3a8>)
     e84:	609a      	str	r2, [r3, #8]
    macPrimitives.MacMlmeIndication = MlmeIndication;
     e86:	2330      	movs	r3, #48	; 0x30
     e88:	18fb      	adds	r3, r7, r3
     e8a:	4ade      	ldr	r2, [pc, #888]	; (1204 <main+0x3ac>)
     e8c:	60da      	str	r2, [r3, #12]
    macCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
     e8e:	2320      	movs	r3, #32
     e90:	18fb      	adds	r3, r7, r3
     e92:	4add      	ldr	r2, [pc, #884]	; (1208 <main+0x3b0>)
     e94:	601a      	str	r2, [r3, #0]
    macCallbacks.GetTemperatureLevel = NULL;
     e96:	2320      	movs	r3, #32
     e98:	18fb      	adds	r3, r7, r3
     e9a:	2200      	movs	r2, #0
     e9c:	605a      	str	r2, [r3, #4]
    macCallbacks.NvmContextChange = NvmCtxMgmtEvent;
     e9e:	2320      	movs	r3, #32
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	4ada      	ldr	r2, [pc, #872]	; (120c <main+0x3b4>)
     ea4:	609a      	str	r2, [r3, #8]
    macCallbacks.MacProcessNotify = OnMacProcessNotify;
     ea6:	2320      	movs	r3, #32
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	4ad9      	ldr	r2, [pc, #868]	; (1210 <main+0x3b8>)
     eac:	60da      	str	r2, [r3, #12]

    LoRaMacInitialization( &macPrimitives, &macCallbacks, ACTIVE_REGION );
     eae:	2320      	movs	r3, #32
     eb0:	18f9      	adds	r1, r7, r3
     eb2:	2330      	movs	r3, #48	; 0x30
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	2205      	movs	r2, #5
     eb8:	0018      	movs	r0, r3
     eba:	4bd6      	ldr	r3, [pc, #856]	; (1214 <main+0x3bc>)
     ebc:	4798      	blx	r3

    DeviceState = DEVICE_STATE_RESTORE;
     ebe:	4bd6      	ldr	r3, [pc, #856]	; (1218 <main+0x3c0>)
     ec0:	2200      	movs	r2, #0
     ec2:	701a      	strb	r2, [r3, #0]

    printf( "###### ===== ClassC demo application v1.0.RC1 ==== ######\r\n\r\n" );
     ec4:	4bd5      	ldr	r3, [pc, #852]	; (121c <main+0x3c4>)
     ec6:	0018      	movs	r0, r3
     ec8:	4bca      	ldr	r3, [pc, #808]	; (11f4 <main+0x39c>)
     eca:	4798      	blx	r3

    while( 1 )
    {
        // Tick the RTC to execute callback in context of the main loop (in stead of the IRQ)
        TimerProcess( );
     ecc:	4bd4      	ldr	r3, [pc, #848]	; (1220 <main+0x3c8>)
     ece:	4798      	blx	r3
        // Process Radio IRQ
        if( Radio.IrqProcess != NULL )
     ed0:	4bd4      	ldr	r3, [pc, #848]	; (1224 <main+0x3cc>)
     ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     ed4:	2b00      	cmp	r3, #0
     ed6:	d002      	beq.n	ede <main+0x86>
        {
            Radio.IrqProcess( );
     ed8:	4bd2      	ldr	r3, [pc, #840]	; (1224 <main+0x3cc>)
     eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     edc:	4798      	blx	r3
        }
        // Processes the LoRaMac events
        LoRaMacProcess( );
     ede:	4bd2      	ldr	r3, [pc, #840]	; (1228 <main+0x3d0>)
     ee0:	4798      	blx	r3

        switch( DeviceState )
     ee2:	4bcd      	ldr	r3, [pc, #820]	; (1218 <main+0x3c0>)
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	2b05      	cmp	r3, #5
     ee8:	d900      	bls.n	eec <main+0x94>
     eea:	e20b      	b.n	1304 <main+0x4ac>
     eec:	009a      	lsls	r2, r3, #2
     eee:	4bcf      	ldr	r3, [pc, #828]	; (122c <main+0x3d4>)
     ef0:	18d3      	adds	r3, r2, r3
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	469f      	mov	pc, r3
        {
            case DEVICE_STATE_RESTORE:
            {
                // Try to restore from NVM and query the mac if possible.
                if( NvmCtxMgmtRestore( ) == NVMCTXMGMT_STATUS_SUCCESS )
     ef6:	4bce      	ldr	r3, [pc, #824]	; (1230 <main+0x3d8>)
     ef8:	4798      	blx	r3
     efa:	1e03      	subs	r3, r0, #0
     efc:	d104      	bne.n	f08 <main+0xb0>
                {
                    printf( "\r\n###### ===== CTXS RESTORED ==== ######\r\n\r\n" );
     efe:	4bcd      	ldr	r3, [pc, #820]	; (1234 <main+0x3dc>)
     f00:	0018      	movs	r0, r3
     f02:	4bbc      	ldr	r3, [pc, #752]	; (11f4 <main+0x39c>)
     f04:	4798      	blx	r3
     f06:	e03d      	b.n	f84 <main+0x12c>
                }
                else
                {
                    mibReq.Type = MIB_APP_KEY;
     f08:	2308      	movs	r3, #8
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	2205      	movs	r2, #5
     f0e:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AppKey = AppKey;
     f10:	2308      	movs	r3, #8
     f12:	18fb      	adds	r3, r7, r3
     f14:	4ac8      	ldr	r2, [pc, #800]	; (1238 <main+0x3e0>)
     f16:	605a      	str	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     f18:	2308      	movs	r3, #8
     f1a:	18fb      	adds	r3, r7, r3
     f1c:	0018      	movs	r0, r3
     f1e:	4bc7      	ldr	r3, [pc, #796]	; (123c <main+0x3e4>)
     f20:	4798      	blx	r3

                    mibReq.Type = MIB_NWK_KEY;
     f22:	2308      	movs	r3, #8
     f24:	18fb      	adds	r3, r7, r3
     f26:	2206      	movs	r2, #6
     f28:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.NwkKey = NwkKey;
     f2a:	2308      	movs	r3, #8
     f2c:	18fb      	adds	r3, r7, r3
     f2e:	4ac4      	ldr	r2, [pc, #784]	; (1240 <main+0x3e8>)
     f30:	605a      	str	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     f32:	2308      	movs	r3, #8
     f34:	18fb      	adds	r3, r7, r3
     f36:	0018      	movs	r0, r3
     f38:	4bc0      	ldr	r3, [pc, #768]	; (123c <main+0x3e4>)
     f3a:	4798      	blx	r3

                    // Initialize LoRaMac device unique ID if not already defined in Commissioning.h
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
     f3c:	4bc1      	ldr	r3, [pc, #772]	; (1244 <main+0x3ec>)
     f3e:	781b      	ldrb	r3, [r3, #0]
     f40:	2b00      	cmp	r3, #0
     f42:	d11f      	bne.n	f84 <main+0x12c>
     f44:	4bbf      	ldr	r3, [pc, #764]	; (1244 <main+0x3ec>)
     f46:	785b      	ldrb	r3, [r3, #1]
     f48:	2b00      	cmp	r3, #0
     f4a:	d11b      	bne.n	f84 <main+0x12c>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     f4c:	4bbd      	ldr	r3, [pc, #756]	; (1244 <main+0x3ec>)
     f4e:	789b      	ldrb	r3, [r3, #2]
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
     f50:	2b00      	cmp	r3, #0
     f52:	d117      	bne.n	f84 <main+0x12c>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     f54:	4bbb      	ldr	r3, [pc, #748]	; (1244 <main+0x3ec>)
     f56:	78db      	ldrb	r3, [r3, #3]
     f58:	2b00      	cmp	r3, #0
     f5a:	d113      	bne.n	f84 <main+0x12c>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     f5c:	4bb9      	ldr	r3, [pc, #740]	; (1244 <main+0x3ec>)
     f5e:	791b      	ldrb	r3, [r3, #4]
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     f60:	2b00      	cmp	r3, #0
     f62:	d10f      	bne.n	f84 <main+0x12c>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     f64:	4bb7      	ldr	r3, [pc, #732]	; (1244 <main+0x3ec>)
     f66:	795b      	ldrb	r3, [r3, #5]
     f68:	2b00      	cmp	r3, #0
     f6a:	d10b      	bne.n	f84 <main+0x12c>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
     f6c:	4bb5      	ldr	r3, [pc, #724]	; (1244 <main+0x3ec>)
     f6e:	799b      	ldrb	r3, [r3, #6]
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     f70:	2b00      	cmp	r3, #0
     f72:	d107      	bne.n	f84 <main+0x12c>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
     f74:	4bb3      	ldr	r3, [pc, #716]	; (1244 <main+0x3ec>)
     f76:	79db      	ldrb	r3, [r3, #7]
     f78:	2b00      	cmp	r3, #0
     f7a:	d103      	bne.n	f84 <main+0x12c>
                    {
                        BoardGetUniqueId( DevEui );
     f7c:	4bb1      	ldr	r3, [pc, #708]	; (1244 <main+0x3ec>)
     f7e:	0018      	movs	r0, r3
     f80:	4bb1      	ldr	r3, [pc, #708]	; (1248 <main+0x3f0>)
     f82:	4798      	blx	r3
                    mibReq.Type = MIB_APP_S_KEY;
                    mibReq.Param.AppSKey = AppSKey;
                    LoRaMacMibSetRequestConfirm( &mibReq );
#endif
                }
                DeviceState = DEVICE_STATE_START;
     f84:	4ba4      	ldr	r3, [pc, #656]	; (1218 <main+0x3c0>)
     f86:	2201      	movs	r2, #1
     f88:	701a      	strb	r2, [r3, #0]
                break;
     f8a:	e1c0      	b.n	130e <main+0x4b6>
            }

            case DEVICE_STATE_START:
            {
                TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
     f8c:	4aaf      	ldr	r2, [pc, #700]	; (124c <main+0x3f4>)
     f8e:	4bb0      	ldr	r3, [pc, #704]	; (1250 <main+0x3f8>)
     f90:	0011      	movs	r1, r2
     f92:	0018      	movs	r0, r3
     f94:	4baf      	ldr	r3, [pc, #700]	; (1254 <main+0x3fc>)
     f96:	4798      	blx	r3

                TimerInit( &Led1Timer, OnLed1TimerEvent );
     f98:	4aaf      	ldr	r2, [pc, #700]	; (1258 <main+0x400>)
     f9a:	4bb0      	ldr	r3, [pc, #704]	; (125c <main+0x404>)
     f9c:	0011      	movs	r1, r2
     f9e:	0018      	movs	r0, r3
     fa0:	4bac      	ldr	r3, [pc, #688]	; (1254 <main+0x3fc>)
     fa2:	4798      	blx	r3
                TimerSetValue( &Led1Timer, 25 );
     fa4:	4bad      	ldr	r3, [pc, #692]	; (125c <main+0x404>)
     fa6:	2119      	movs	r1, #25
     fa8:	0018      	movs	r0, r3
     faa:	4bad      	ldr	r3, [pc, #692]	; (1260 <main+0x408>)
     fac:	4798      	blx	r3

                TimerInit( &Led2Timer, OnLed2TimerEvent );
     fae:	4aad      	ldr	r2, [pc, #692]	; (1264 <main+0x40c>)
     fb0:	4bad      	ldr	r3, [pc, #692]	; (1268 <main+0x410>)
     fb2:	0011      	movs	r1, r2
     fb4:	0018      	movs	r0, r3
     fb6:	4ba7      	ldr	r3, [pc, #668]	; (1254 <main+0x3fc>)
     fb8:	4798      	blx	r3
                TimerSetValue( &Led2Timer, 25 );
     fba:	4bab      	ldr	r3, [pc, #684]	; (1268 <main+0x410>)
     fbc:	2119      	movs	r1, #25
     fbe:	0018      	movs	r0, r3
     fc0:	4ba7      	ldr	r3, [pc, #668]	; (1260 <main+0x408>)
     fc2:	4798      	blx	r3

                mibReq.Type = MIB_PUBLIC_NETWORK;
     fc4:	2308      	movs	r3, #8
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	221a      	movs	r2, #26
     fca:	701a      	strb	r2, [r3, #0]
                mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
     fcc:	2308      	movs	r3, #8
     fce:	18fb      	adds	r3, r7, r3
     fd0:	2201      	movs	r2, #1
     fd2:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     fd4:	2308      	movs	r3, #8
     fd6:	18fb      	adds	r3, r7, r3
     fd8:	0018      	movs	r0, r3
     fda:	4b98      	ldr	r3, [pc, #608]	; (123c <main+0x3e4>)
     fdc:	4798      	blx	r3

                mibReq.Type = MIB_ADR;
     fde:	2308      	movs	r3, #8
     fe0:	18fb      	adds	r3, r7, r3
     fe2:	2202      	movs	r2, #2
     fe4:	701a      	strb	r2, [r3, #0]
                mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     fe6:	2308      	movs	r3, #8
     fe8:	18fb      	adds	r3, r7, r3
     fea:	2201      	movs	r2, #1
     fec:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     fee:	2308      	movs	r3, #8
     ff0:	18fb      	adds	r3, r7, r3
     ff2:	0018      	movs	r0, r3
     ff4:	4b91      	ldr	r3, [pc, #580]	; (123c <main+0x3e4>)
     ff6:	4798      	blx	r3

#if defined( REGION_EU868 )
                LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     ff8:	2000      	movs	r0, #0
     ffa:	4b9c      	ldr	r3, [pc, #624]	; (126c <main+0x414>)
     ffc:	4798      	blx	r3

#if( USE_TTN_NETWORK == 1 )
                mibReq.Type = MIB_RX2_DEFAULT_CHANNEL;
     ffe:	2308      	movs	r3, #8
    1000:	18fb      	adds	r3, r7, r3
    1002:	221e      	movs	r2, #30
    1004:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Rx2DefaultChannel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
    1006:	2308      	movs	r3, #8
    1008:	18fb      	adds	r3, r7, r3
    100a:	4a99      	ldr	r2, [pc, #612]	; (1270 <main+0x418>)
    100c:	3304      	adds	r3, #4
    100e:	ca03      	ldmia	r2!, {r0, r1}
    1010:	c303      	stmia	r3!, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
    1012:	2308      	movs	r3, #8
    1014:	18fb      	adds	r3, r7, r3
    1016:	0018      	movs	r0, r3
    1018:	4b88      	ldr	r3, [pc, #544]	; (123c <main+0x3e4>)
    101a:	4798      	blx	r3

                mibReq.Type = MIB_RX2_CHANNEL;
    101c:	2308      	movs	r3, #8
    101e:	18fb      	adds	r3, r7, r3
    1020:	221d      	movs	r2, #29
    1022:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Rx2Channel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
    1024:	2308      	movs	r3, #8
    1026:	18fb      	adds	r3, r7, r3
    1028:	4a91      	ldr	r2, [pc, #580]	; (1270 <main+0x418>)
    102a:	3304      	adds	r3, #4
    102c:	ca03      	ldmia	r2!, {r0, r1}
    102e:	c303      	stmia	r3!, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
    1030:	2308      	movs	r3, #8
    1032:	18fb      	adds	r3, r7, r3
    1034:	0018      	movs	r0, r3
    1036:	4b81      	ldr	r3, [pc, #516]	; (123c <main+0x3e4>)
    1038:	4798      	blx	r3
#endif

#endif
                mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
    103a:	2308      	movs	r3, #8
    103c:	18fb      	adds	r3, r7, r3
    103e:	222b      	movs	r2, #43	; 0x2b
    1040:	701a      	strb	r2, [r3, #0]
                mibReq.Param.SystemMaxRxError = 20;
    1042:	2308      	movs	r3, #8
    1044:	18fb      	adds	r3, r7, r3
    1046:	2214      	movs	r2, #20
    1048:	605a      	str	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
    104a:	2308      	movs	r3, #8
    104c:	18fb      	adds	r3, r7, r3
    104e:	0018      	movs	r0, r3
    1050:	4b7a      	ldr	r3, [pc, #488]	; (123c <main+0x3e4>)
    1052:	4798      	blx	r3

                mibReq.Type = MIB_DEVICE_CLASS;
    1054:	2308      	movs	r3, #8
    1056:	18fb      	adds	r3, r7, r3
    1058:	2200      	movs	r2, #0
    105a:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Class = CLASS_C;
    105c:	2308      	movs	r3, #8
    105e:	18fb      	adds	r3, r7, r3
    1060:	2202      	movs	r2, #2
    1062:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
    1064:	2308      	movs	r3, #8
    1066:	18fb      	adds	r3, r7, r3
    1068:	0018      	movs	r0, r3
    106a:	4b74      	ldr	r3, [pc, #464]	; (123c <main+0x3e4>)
    106c:	4798      	blx	r3

                LoRaMacStart( );
    106e:	4b81      	ldr	r3, [pc, #516]	; (1274 <main+0x41c>)
    1070:	4798      	blx	r3

                mibReq.Type = MIB_NETWORK_ACTIVATION;
    1072:	2308      	movs	r3, #8
    1074:	18fb      	adds	r3, r7, r3
    1076:	2201      	movs	r2, #1
    1078:	701a      	strb	r2, [r3, #0]
                status = LoRaMacMibGetRequestConfirm( &mibReq );
    107a:	2343      	movs	r3, #67	; 0x43
    107c:	18fc      	adds	r4, r7, r3
    107e:	2308      	movs	r3, #8
    1080:	18fb      	adds	r3, r7, r3
    1082:	0018      	movs	r0, r3
    1084:	4b7c      	ldr	r3, [pc, #496]	; (1278 <main+0x420>)
    1086:	4798      	blx	r3
    1088:	0003      	movs	r3, r0
    108a:	7023      	strb	r3, [r4, #0]

                if( status == LORAMAC_STATUS_OK )
    108c:	2343      	movs	r3, #67	; 0x43
    108e:	18fb      	adds	r3, r7, r3
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	2b00      	cmp	r3, #0
    1094:	d000      	beq.n	1098 <main+0x240>
    1096:	e139      	b.n	130c <main+0x4b4>
                {
                    if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
    1098:	2308      	movs	r3, #8
    109a:	18fb      	adds	r3, r7, r3
    109c:	791b      	ldrb	r3, [r3, #4]
    109e:	2b00      	cmp	r3, #0
    10a0:	d103      	bne.n	10aa <main+0x252>
                    {
                        DeviceState = DEVICE_STATE_JOIN;
    10a2:	4b5d      	ldr	r3, [pc, #372]	; (1218 <main+0x3c0>)
    10a4:	2202      	movs	r2, #2
    10a6:	701a      	strb	r2, [r3, #0]
    10a8:	e006      	b.n	10b8 <main+0x260>
                    }
                    else
                    {
                        DeviceState = DEVICE_STATE_SEND;
    10aa:	4b5b      	ldr	r3, [pc, #364]	; (1218 <main+0x3c0>)
    10ac:	2203      	movs	r2, #3
    10ae:	701a      	strb	r2, [r3, #0]
                        NextTx = true;
    10b0:	4b72      	ldr	r3, [pc, #456]	; (127c <main+0x424>)
    10b2:	2201      	movs	r2, #1
    10b4:	701a      	strb	r2, [r3, #0]
						break;
    10b6:	e12a      	b.n	130e <main+0x4b6>
                    }
                } else break;
            }
            case DEVICE_STATE_JOIN:
            {
                printf( "DevEui      : %02X", DevEui[0] );
    10b8:	4b62      	ldr	r3, [pc, #392]	; (1244 <main+0x3ec>)
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	001a      	movs	r2, r3
    10be:	4b70      	ldr	r3, [pc, #448]	; (1280 <main+0x428>)
    10c0:	0011      	movs	r1, r2
    10c2:	0018      	movs	r0, r3
    10c4:	4b6f      	ldr	r3, [pc, #444]	; (1284 <main+0x42c>)
    10c6:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
    10c8:	2301      	movs	r3, #1
    10ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    10cc:	e00c      	b.n	10e8 <main+0x290>
                {
                    printf( "-%02X", DevEui[i] );
    10ce:	4a5d      	ldr	r2, [pc, #372]	; (1244 <main+0x3ec>)
    10d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10d2:	18d3      	adds	r3, r2, r3
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	001a      	movs	r2, r3
    10d8:	4b6b      	ldr	r3, [pc, #428]	; (1288 <main+0x430>)
    10da:	0011      	movs	r1, r2
    10dc:	0018      	movs	r0, r3
    10de:	4b69      	ldr	r3, [pc, #420]	; (1284 <main+0x42c>)
    10e0:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
    10e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10e4:	3301      	adds	r3, #1
    10e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    10e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10ea:	2b07      	cmp	r3, #7
    10ec:	ddef      	ble.n	10ce <main+0x276>
                }
                printf( "\r\n" );
    10ee:	4b67      	ldr	r3, [pc, #412]	; (128c <main+0x434>)
    10f0:	0018      	movs	r0, r3
    10f2:	4b40      	ldr	r3, [pc, #256]	; (11f4 <main+0x39c>)
    10f4:	4798      	blx	r3
                printf( "AppEui      : %02X", JoinEui[0] );
    10f6:	4b66      	ldr	r3, [pc, #408]	; (1290 <main+0x438>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	001a      	movs	r2, r3
    10fc:	4b65      	ldr	r3, [pc, #404]	; (1294 <main+0x43c>)
    10fe:	0011      	movs	r1, r2
    1100:	0018      	movs	r0, r3
    1102:	4b60      	ldr	r3, [pc, #384]	; (1284 <main+0x42c>)
    1104:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
    1106:	2301      	movs	r3, #1
    1108:	64bb      	str	r3, [r7, #72]	; 0x48
    110a:	e00c      	b.n	1126 <main+0x2ce>
                {
                    printf( "-%02X", JoinEui[i] );
    110c:	4a60      	ldr	r2, [pc, #384]	; (1290 <main+0x438>)
    110e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1110:	18d3      	adds	r3, r2, r3
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	001a      	movs	r2, r3
    1116:	4b5c      	ldr	r3, [pc, #368]	; (1288 <main+0x430>)
    1118:	0011      	movs	r1, r2
    111a:	0018      	movs	r0, r3
    111c:	4b59      	ldr	r3, [pc, #356]	; (1284 <main+0x42c>)
    111e:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
    1120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1122:	3301      	adds	r3, #1
    1124:	64bb      	str	r3, [r7, #72]	; 0x48
    1126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1128:	2b07      	cmp	r3, #7
    112a:	ddef      	ble.n	110c <main+0x2b4>
                }
                printf( "\r\n" );
    112c:	4b57      	ldr	r3, [pc, #348]	; (128c <main+0x434>)
    112e:	0018      	movs	r0, r3
    1130:	4b30      	ldr	r3, [pc, #192]	; (11f4 <main+0x39c>)
    1132:	4798      	blx	r3
                printf( "AppKey      : %02X", NwkKey[0] );
    1134:	4b42      	ldr	r3, [pc, #264]	; (1240 <main+0x3e8>)
    1136:	781b      	ldrb	r3, [r3, #0]
    1138:	001a      	movs	r2, r3
    113a:	4b57      	ldr	r3, [pc, #348]	; (1298 <main+0x440>)
    113c:	0011      	movs	r1, r2
    113e:	0018      	movs	r0, r3
    1140:	4b50      	ldr	r3, [pc, #320]	; (1284 <main+0x42c>)
    1142:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
    1144:	2301      	movs	r3, #1
    1146:	647b      	str	r3, [r7, #68]	; 0x44
    1148:	e00c      	b.n	1164 <main+0x30c>
                {
                    printf( " %02X", NwkKey[i] );
    114a:	4a3d      	ldr	r2, [pc, #244]	; (1240 <main+0x3e8>)
    114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    114e:	18d3      	adds	r3, r2, r3
    1150:	781b      	ldrb	r3, [r3, #0]
    1152:	001a      	movs	r2, r3
    1154:	4b51      	ldr	r3, [pc, #324]	; (129c <main+0x444>)
    1156:	0011      	movs	r1, r2
    1158:	0018      	movs	r0, r3
    115a:	4b4a      	ldr	r3, [pc, #296]	; (1284 <main+0x42c>)
    115c:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
    115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1160:	3301      	adds	r3, #1
    1162:	647b      	str	r3, [r7, #68]	; 0x44
    1164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1166:	2b0f      	cmp	r3, #15
    1168:	ddef      	ble.n	114a <main+0x2f2>
                }
                printf( "\n\r\n" );
    116a:	4b4d      	ldr	r3, [pc, #308]	; (12a0 <main+0x448>)
    116c:	0018      	movs	r0, r3
    116e:	4b21      	ldr	r3, [pc, #132]	; (11f4 <main+0x39c>)
    1170:	4798      	blx	r3
                mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
                LoRaMacMibSetRequestConfirm( &mibReq );

                DeviceState = DEVICE_STATE_SEND;
#else
                JoinNetwork( );
    1172:	4b4c      	ldr	r3, [pc, #304]	; (12a4 <main+0x44c>)
    1174:	4798      	blx	r3
#endif
                break;
    1176:	e0ca      	b.n	130e <main+0x4b6>
            }
            case DEVICE_STATE_SEND:
            {
                if( NextTx == true )
    1178:	4b40      	ldr	r3, [pc, #256]	; (127c <main+0x424>)
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	2b00      	cmp	r3, #0
    117e:	d00a      	beq.n	1196 <main+0x33e>
                {
                    PrepareTxFrame( AppPort );
    1180:	4b49      	ldr	r3, [pc, #292]	; (12a8 <main+0x450>)
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	0018      	movs	r0, r3
    1186:	4b49      	ldr	r3, [pc, #292]	; (12ac <main+0x454>)
    1188:	4798      	blx	r3

                    NextTx = SendFrame( );
    118a:	4b49      	ldr	r3, [pc, #292]	; (12b0 <main+0x458>)
    118c:	4798      	blx	r3
    118e:	0003      	movs	r3, r0
    1190:	001a      	movs	r2, r3
    1192:	4b3a      	ldr	r3, [pc, #232]	; (127c <main+0x424>)
    1194:	701a      	strb	r2, [r3, #0]
                }
                DeviceState = DEVICE_STATE_CYCLE;
    1196:	4b20      	ldr	r3, [pc, #128]	; (1218 <main+0x3c0>)
    1198:	2204      	movs	r2, #4
    119a:	701a      	strb	r2, [r3, #0]
                break;
    119c:	e0b7      	b.n	130e <main+0x4b6>
            }
            case DEVICE_STATE_CYCLE:
            {
                DeviceState = DEVICE_STATE_SLEEP;
    119e:	4b1e      	ldr	r3, [pc, #120]	; (1218 <main+0x3c0>)
    11a0:	2205      	movs	r2, #5
    11a2:	701a      	strb	r2, [r3, #0]
                if( ComplianceTest.Running == true )
    11a4:	4b43      	ldr	r3, [pc, #268]	; (12b4 <main+0x45c>)
    11a6:	781b      	ldrb	r3, [r3, #0]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d003      	beq.n	11b4 <main+0x35c>
                {
                    // Schedule next packet transmission
                    TxDutyCycleTime = 5000; // 5000 ms
    11ac:	4b42      	ldr	r3, [pc, #264]	; (12b8 <main+0x460>)
    11ae:	4a43      	ldr	r2, [pc, #268]	; (12bc <main+0x464>)
    11b0:	601a      	str	r2, [r3, #0]
    11b2:	e00d      	b.n	11d0 <main+0x378>
                }
                else
                {
                    // Schedule next packet transmission
                    TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
    11b4:	23fa      	movs	r3, #250	; 0xfa
    11b6:	009b      	lsls	r3, r3, #2
    11b8:	4a41      	ldr	r2, [pc, #260]	; (12c0 <main+0x468>)
    11ba:	0019      	movs	r1, r3
    11bc:	0010      	movs	r0, r2
    11be:	4b41      	ldr	r3, [pc, #260]	; (12c4 <main+0x46c>)
    11c0:	4798      	blx	r3
    11c2:	0003      	movs	r3, r0
    11c4:	4a3d      	ldr	r2, [pc, #244]	; (12bc <main+0x464>)
    11c6:	4694      	mov	ip, r2
    11c8:	4463      	add	r3, ip
    11ca:	001a      	movs	r2, r3
    11cc:	4b3a      	ldr	r3, [pc, #232]	; (12b8 <main+0x460>)
    11ce:	601a      	str	r2, [r3, #0]
                }

                // Schedule next packet transmission
                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
    11d0:	4b39      	ldr	r3, [pc, #228]	; (12b8 <main+0x460>)
    11d2:	681a      	ldr	r2, [r3, #0]
    11d4:	4b1e      	ldr	r3, [pc, #120]	; (1250 <main+0x3f8>)
    11d6:	0011      	movs	r1, r2
    11d8:	0018      	movs	r0, r3
    11da:	4b21      	ldr	r3, [pc, #132]	; (1260 <main+0x408>)
    11dc:	4798      	blx	r3
                TimerStart( &TxNextPacketTimer );
    11de:	4b1c      	ldr	r3, [pc, #112]	; (1250 <main+0x3f8>)
    11e0:	0018      	movs	r0, r3
    11e2:	4b39      	ldr	r3, [pc, #228]	; (12c8 <main+0x470>)
    11e4:	4798      	blx	r3
                break;
    11e6:	e092      	b.n	130e <main+0x4b6>
    11e8:	00001421 	.word	0x00001421
    11ec:	000013f5 	.word	0x000013f5
    11f0:	0001efbc 	.word	0x0001efbc
    11f4:	00019d41 	.word	0x00019d41
    11f8:	000004fd 	.word	0x000004fd
    11fc:	0000073d 	.word	0x0000073d
    1200:	00000cc5 	.word	0x00000cc5
    1204:	00000de5 	.word	0x00000de5
    1208:	000014e5 	.word	0x000014e5
    120c:	00001331 	.word	0x00001331
    1210:	00000e45 	.word	0x00000e45
    1214:	0000a251 	.word	0x0000a251
    1218:	20000c1d 	.word	0x20000c1d
    121c:	0001efc8 	.word	0x0001efc8
    1220:	0001722d 	.word	0x0001722d
    1224:	0001f2a4 	.word	0x0001f2a4
    1228:	00007029 	.word	0x00007029
    122c:	0001f0b0 	.word	0x0001f0b0
    1230:	00001351 	.word	0x00001351
    1234:	0001f008 	.word	0x0001f008
    1238:	20000010 	.word	0x20000010
    123c:	0000aeed 	.word	0x0000aeed
    1240:	20000020 	.word	0x20000020
    1244:	20000000 	.word	0x20000000
    1248:	000014d5 	.word	0x000014d5
    124c:	0000043d 	.word	0x0000043d
    1250:	20000bdc 	.word	0x20000bdc
    1254:	00016d5d 	.word	0x00016d5d
    1258:	000004a5 	.word	0x000004a5
    125c:	20000bf4 	.word	0x20000bf4
    1260:	00017119 	.word	0x00017119
    1264:	000004d1 	.word	0x000004d1
    1268:	20000c08 	.word	0x20000c08
    126c:	0000c1fd 	.word	0x0000c1fd
    1270:	0001f0a8 	.word	0x0001f0a8
    1274:	0000aa9d 	.word	0x0000aa9d
    1278:	0000ac39 	.word	0x0000ac39
    127c:	20000033 	.word	0x20000033
    1280:	0001f034 	.word	0x0001f034
    1284:	00019c7d 	.word	0x00019c7d
    1288:	0001f048 	.word	0x0001f048
    128c:	0001eb88 	.word	0x0001eb88
    1290:	20000008 	.word	0x20000008
    1294:	0001f050 	.word	0x0001f050
    1298:	0001f064 	.word	0x0001f064
    129c:	0001f078 	.word	0x0001f078
    12a0:	0001ef8c 	.word	0x0001ef8c
    12a4:	000001bd 	.word	0x000001bd
    12a8:	20000030 	.word	0x20000030
    12ac:	00000259 	.word	0x00000259
    12b0:	00000315 	.word	0x00000315
    12b4:	20001b04 	.word	0x20001b04
    12b8:	20000bd8 	.word	0x20000bd8
    12bc:	00001388 	.word	0x00001388
    12c0:	fffffc18 	.word	0xfffffc18
    12c4:	00004305 	.word	0x00004305
    12c8:	00016d8d 	.word	0x00016d8d
            }
            case DEVICE_STATE_SLEEP:
            {
                if( NvmCtxMgmtStore( ) == NVMCTXMGMT_STATUS_SUCCESS )
    12cc:	4b10      	ldr	r3, [pc, #64]	; (1310 <main+0x4b8>)
    12ce:	4798      	blx	r3
    12d0:	1e03      	subs	r3, r0, #0
    12d2:	d103      	bne.n	12dc <main+0x484>
                {
                    printf( "\r\n###### ===== CTXS STORED ==== ######\r\n" );
    12d4:	4b0f      	ldr	r3, [pc, #60]	; (1314 <main+0x4bc>)
    12d6:	0018      	movs	r0, r3
    12d8:	4b0f      	ldr	r3, [pc, #60]	; (1318 <main+0x4c0>)
    12da:	4798      	blx	r3
                }

                CRITICAL_SECTION_BEGIN( );
    12dc:	1d3b      	adds	r3, r7, #4
    12de:	0018      	movs	r0, r3
    12e0:	4b0e      	ldr	r3, [pc, #56]	; (131c <main+0x4c4>)
    12e2:	4798      	blx	r3
                if( IsMacProcessPending == 1 )
    12e4:	4b0e      	ldr	r3, [pc, #56]	; (1320 <main+0x4c8>)
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	2b01      	cmp	r3, #1
    12ea:	d103      	bne.n	12f4 <main+0x49c>
                {
                    // Clear flag and prevent MCU to go into low power modes.
                    IsMacProcessPending = 0;
    12ec:	4b0c      	ldr	r3, [pc, #48]	; (1320 <main+0x4c8>)
    12ee:	2200      	movs	r2, #0
    12f0:	701a      	strb	r2, [r3, #0]
    12f2:	e001      	b.n	12f8 <main+0x4a0>
                }
                else
                {
                    // The MCU wakes up through events
                    BoardLowPowerHandler( );
    12f4:	4b0b      	ldr	r3, [pc, #44]	; (1324 <main+0x4cc>)
    12f6:	4798      	blx	r3
                }
                CRITICAL_SECTION_END( );
    12f8:	1d3b      	adds	r3, r7, #4
    12fa:	0018      	movs	r0, r3
    12fc:	4b0a      	ldr	r3, [pc, #40]	; (1328 <main+0x4d0>)
    12fe:	4798      	blx	r3
                break;
    1300:	46c0      	nop			; (mov r8, r8)
    1302:	e004      	b.n	130e <main+0x4b6>
            }
            default:
            {
                DeviceState = DEVICE_STATE_START;
    1304:	4b09      	ldr	r3, [pc, #36]	; (132c <main+0x4d4>)
    1306:	2201      	movs	r2, #1
    1308:	701a      	strb	r2, [r3, #0]
                break;
    130a:	e000      	b.n	130e <main+0x4b6>
                } else break;
    130c:	46c0      	nop			; (mov r8, r8)
        TimerProcess( );
    130e:	e5dd      	b.n	ecc <main+0x74>
    1310:	00001345 	.word	0x00001345
    1314:	0001f080 	.word	0x0001f080
    1318:	00019d41 	.word	0x00019d41
    131c:	000013b9 	.word	0x000013b9
    1320:	20000c1c 	.word	0x20000c1c
    1324:	000014f1 	.word	0x000014f1
    1328:	000013d7 	.word	0x000013d7
    132c:	20000c1d 	.word	0x20000c1d

00001330 <NvmCtxMgmtEvent>:
static NvmmDataBlock_t ClassBNvmCtxDataBlock;
#endif
#endif

void NvmCtxMgmtEvent( LoRaMacNvmCtxModule_t module )
{
    1330:	b580      	push	{r7, lr}
    1332:	b082      	sub	sp, #8
    1334:	af00      	add	r7, sp, #0
    1336:	0002      	movs	r2, r0
    1338:	1dfb      	adds	r3, r7, #7
    133a:	701a      	strb	r2, [r3, #0]
        {
            break;
        }
    }
#endif
}
    133c:	46c0      	nop			; (mov r8, r8)
    133e:	46bd      	mov	sp, r7
    1340:	b002      	add	sp, #8
    1342:	bd80      	pop	{r7, pc}

00001344 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore( void )
{
    1344:	b580      	push	{r7, lr}
    1346:	af00      	add	r7, sp, #0
    // Resume LoRaMac
    LoRaMacStart( );

    return NVMCTXMGMT_STATUS_SUCCESS;
#else
    return NVMCTXMGMT_STATUS_FAIL;
    1348:	2301      	movs	r3, #1
#endif
}
    134a:	0018      	movs	r0, r3
    134c:	46bd      	mov	sp, r7
    134e:	bd80      	pop	{r7, pc}

00001350 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore( void )
{
    1350:	b580      	push	{r7, lr}
    1352:	af00      	add	r7, sp, #0
        LoRaMacMibSetRequestConfirm( &mibReq );
    }

    return status;
#else
    return NVMCTXMGMT_STATUS_FAIL;
    1354:	2301      	movs	r3, #1
#endif
}
    1356:	0018      	movs	r0, r3
    1358:	46bd      	mov	sp, r7
    135a:	bd80      	pop	{r7, pc}

0000135c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    135c:	b580      	push	{r7, lr}
    135e:	b084      	sub	sp, #16
    1360:	af00      	add	r7, sp, #0
    1362:	60f8      	str	r0, [r7, #12]
    1364:	607a      	str	r2, [r7, #4]
    1366:	230b      	movs	r3, #11
    1368:	18fb      	adds	r3, r7, r3
    136a:	1c0a      	adds	r2, r1, #0
    136c:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    136e:	230b      	movs	r3, #11
    1370:	18fb      	adds	r3, r7, r3
    1372:	781a      	ldrb	r2, [r3, #0]
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	3220      	adds	r2, #32
    1378:	0092      	lsls	r2, r2, #2
    137a:	6879      	ldr	r1, [r7, #4]
    137c:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	46bd      	mov	sp, r7
    1382:	b004      	add	sp, #16
    1384:	bd80      	pop	{r7, pc}

00001386 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1386:	b580      	push	{r7, lr}
    1388:	b082      	sub	sp, #8
    138a:	af00      	add	r7, sp, #0
    138c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	695b      	ldr	r3, [r3, #20]
    1392:	2280      	movs	r2, #128	; 0x80
    1394:	0092      	lsls	r2, r2, #2
    1396:	431a      	orrs	r2, r3
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    139c:	46c0      	nop			; (mov r8, r8)
    139e:	46bd      	mov	sp, r7
    13a0:	b002      	add	sp, #8
    13a2:	bd80      	pop	{r7, pc}

000013a4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	af00      	add	r7, sp, #0
	_init_chip();
    13a8:	4b02      	ldr	r3, [pc, #8]	; (13b4 <init_mcu+0x10>)
    13aa:	4798      	blx	r3
}
    13ac:	46c0      	nop			; (mov r8, r8)
    13ae:	46bd      	mov	sp, r7
    13b0:	bd80      	pop	{r7, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	00002679 	.word	0x00002679

000013b8 <BoardCriticalSectionBegin>:
 * Flag to indicate if the MCU is Initialized
 */
static bool McuInitialized = false;

void BoardCriticalSectionBegin( uint32_t *mask )
{
    13b8:	b580      	push	{r7, lr}
    13ba:	b084      	sub	sp, #16
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    13c0:	f3ef 8310 	mrs	r3, PRIMASK
    13c4:	60fb      	str	r3, [r7, #12]
  return(result);
    13c6:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    13cc:	b672      	cpsid	i
    __disable_irq( );
}
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	46bd      	mov	sp, r7
    13d2:	b004      	add	sp, #16
    13d4:	bd80      	pop	{r7, pc}

000013d6 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
    13d6:	b580      	push	{r7, lr}
    13d8:	b084      	sub	sp, #16
    13da:	af00      	add	r7, sp, #0
    13dc:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	f383 8810 	msr	PRIMASK, r3
}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	46bd      	mov	sp, r7
    13ee:	b004      	add	sp, #16
    13f0:	bd80      	pop	{r7, pc}
	...

000013f4 <BoardInitPeriph>:

void BoardInitPeriph( void )
{
    13f4:	b590      	push	{r4, r7, lr}
    13f6:	b083      	sub	sp, #12
    13f8:	af02      	add	r7, sp, #8
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    13fa:	4807      	ldr	r0, [pc, #28]	; (1418 <BoardInitPeriph+0x24>)
    13fc:	2300      	movs	r3, #0
    13fe:	9301      	str	r3, [sp, #4]
    1400:	2300      	movs	r3, #0
    1402:	9300      	str	r3, [sp, #0]
    1404:	2300      	movs	r3, #0
    1406:	2201      	movs	r2, #1
    1408:	212a      	movs	r1, #42	; 0x2a
    140a:	4c04      	ldr	r4, [pc, #16]	; (141c <BoardInitPeriph+0x28>)
    140c:	47a0      	blx	r4
}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	46bd      	mov	sp, r7
    1412:	b001      	add	sp, #4
    1414:	bd90      	pop	{r4, r7, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	20001b50 	.word	0x20001b50
    141c:	00016a29 	.word	0x00016a29

00001420 <BoardInitMcu>:

void BoardInitMcu( void )
{
    1420:	b590      	push	{r4, r7, lr}
    1422:	b085      	sub	sp, #20
    1424:	af04      	add	r7, sp, #16
    init_mcu( );
    1426:	4b1c      	ldr	r3, [pc, #112]	; (1498 <BoardInitMcu+0x78>)
    1428:	4798      	blx	r3
    delay_init( SysTick );
    142a:	4b1c      	ldr	r3, [pc, #112]	; (149c <BoardInitMcu+0x7c>)
    142c:	0018      	movs	r0, r3
    142e:	4b1c      	ldr	r3, [pc, #112]	; (14a0 <BoardInitMcu+0x80>)
    1430:	4798      	blx	r3

    hri_gclk_write_PCHCTRL_reg( GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    1432:	4b1c      	ldr	r3, [pc, #112]	; (14a4 <BoardInitMcu+0x84>)
    1434:	2240      	movs	r2, #64	; 0x40
    1436:	2103      	movs	r1, #3
    1438:	0018      	movs	r0, r3
    143a:	4b1b      	ldr	r3, [pc, #108]	; (14a8 <BoardInitMcu+0x88>)
    143c:	4798      	blx	r3
    hri_mclk_set_APBAMASK_EIC_bit( MCLK );
    143e:	4b1b      	ldr	r3, [pc, #108]	; (14ac <BoardInitMcu+0x8c>)
    1440:	0018      	movs	r0, r3
    1442:	4b1b      	ldr	r3, [pc, #108]	; (14b0 <BoardInitMcu+0x90>)
    1444:	4798      	blx	r3

    RtcInit( );
    1446:	4b1b      	ldr	r3, [pc, #108]	; (14b4 <BoardInitMcu+0x94>)
    1448:	4798      	blx	r3

    UartInit( &Uart1, UART_1, UART_TX, UART_RX );
    144a:	481b      	ldr	r0, [pc, #108]	; (14b8 <BoardInitMcu+0x98>)
    144c:	2317      	movs	r3, #23
    144e:	2216      	movs	r2, #22
    1450:	2100      	movs	r1, #0
    1452:	4c1a      	ldr	r4, [pc, #104]	; (14bc <BoardInitMcu+0x9c>)
    1454:	47a0      	blx	r4
    UartConfig( &Uart1, RX_TX, 921600, UART_8_BIT, UART_1_STOP_BIT, NO_PARITY, NO_FLOW_CTRL );
    1456:	23e1      	movs	r3, #225	; 0xe1
    1458:	031a      	lsls	r2, r3, #12
    145a:	4817      	ldr	r0, [pc, #92]	; (14b8 <BoardInitMcu+0x98>)
    145c:	2300      	movs	r3, #0
    145e:	9302      	str	r3, [sp, #8]
    1460:	2300      	movs	r3, #0
    1462:	9301      	str	r3, [sp, #4]
    1464:	2300      	movs	r3, #0
    1466:	9300      	str	r3, [sp, #0]
    1468:	2300      	movs	r3, #0
    146a:	2102      	movs	r1, #2
    146c:	4c14      	ldr	r4, [pc, #80]	; (14c0 <BoardInitMcu+0xa0>)
    146e:	47a0      	blx	r4

    SpiInit( &SX1276.Spi, SPI_1, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
    1470:	4814      	ldr	r0, [pc, #80]	; (14c4 <BoardInitMcu+0xa4>)
    1472:	2301      	movs	r3, #1
    1474:	425b      	negs	r3, r3
    1476:	9301      	str	r3, [sp, #4]
    1478:	2337      	movs	r3, #55	; 0x37
    147a:	9300      	str	r3, [sp, #0]
    147c:	2330      	movs	r3, #48	; 0x30
    147e:	2236      	movs	r2, #54	; 0x36
    1480:	2100      	movs	r1, #0
    1482:	4c11      	ldr	r4, [pc, #68]	; (14c8 <BoardInitMcu+0xa8>)
    1484:	47a0      	blx	r4
    SX1276IoInit( );
    1486:	4b11      	ldr	r3, [pc, #68]	; (14cc <BoardInitMcu+0xac>)
    1488:	4798      	blx	r3

    McuInitialized = true;
    148a:	4b11      	ldr	r3, [pc, #68]	; (14d0 <BoardInitMcu+0xb0>)
    148c:	2201      	movs	r2, #1
    148e:	701a      	strb	r2, [r3, #0]
}
    1490:	46c0      	nop			; (mov r8, r8)
    1492:	46bd      	mov	sp, r7
    1494:	b001      	add	sp, #4
    1496:	bd90      	pop	{r4, r7, pc}
    1498:	000013a5 	.word	0x000013a5
    149c:	e000e010 	.word	0xe000e010
    14a0:	00001b69 	.word	0x00001b69
    14a4:	40001800 	.word	0x40001800
    14a8:	0000135d 	.word	0x0000135d
    14ac:	40000400 	.word	0x40000400
    14b0:	00001387 	.word	0x00001387
    14b4:	000043ed 	.word	0x000043ed
    14b8:	20001b18 	.word	0x20001b18
    14bc:	00017241 	.word	0x00017241
    14c0:	00017299 	.word	0x00017299
    14c4:	20001c4c 	.word	0x20001c4c
    14c8:	00004fb9 	.word	0x00004fb9
    14cc:	0000542d 	.word	0x0000542d
    14d0:	20000c28 	.word	0x20000c28

000014d4 <BoardGetUniqueId>:
{
    return 0;
}

void BoardGetUniqueId( uint8_t *id )
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    // We don't have an ID, so use the one from Commissioning.h
}
    14dc:	46c0      	nop			; (mov r8, r8)
    14de:	46bd      	mov	sp, r7
    14e0:	b002      	add	sp, #8
    14e2:	bd80      	pop	{r7, pc}

000014e4 <BoardGetBatteryLevel>:

uint8_t BoardGetBatteryLevel( void )
{
    14e4:	b580      	push	{r7, lr}
    14e6:	af00      	add	r7, sp, #0
    return 0; //  Battery level [0: node is connected to an external power source ...
    14e8:	2300      	movs	r3, #0
}
    14ea:	0018      	movs	r0, r3
    14ec:	46bd      	mov	sp, r7
    14ee:	bd80      	pop	{r7, pc}

000014f0 <BoardLowPowerHandler>:
{
    return USB_POWER;
}

void BoardLowPowerHandler( void )
{
    14f0:	b580      	push	{r7, lr}
    14f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    14f4:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
    14f6:	b662      	cpsie	i
     */

    // Call low power handling function.

    __enable_irq( );
}
    14f8:	46c0      	nop			; (mov r8, r8)
    14fa:	46bd      	mov	sp, r7
    14fc:	bd80      	pop	{r7, pc}
	...

00001500 <_write>:

/*
 * Function to be used by stdout for printf etc
 */
int _write( int fd, const void *buf, size_t count )
{
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	60f8      	str	r0, [r7, #12]
    1508:	60b9      	str	r1, [r7, #8]
    150a:	607a      	str	r2, [r7, #4]
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )count ) != 0 ){ };
    150c:	46c0      	nop			; (mov r8, r8)
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	b29a      	uxth	r2, r3
    1512:	68b9      	ldr	r1, [r7, #8]
    1514:	4b05      	ldr	r3, [pc, #20]	; (152c <_write+0x2c>)
    1516:	0018      	movs	r0, r3
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <_write+0x30>)
    151a:	4798      	blx	r3
    151c:	1e03      	subs	r3, r0, #0
    151e:	d1f6      	bne.n	150e <_write+0xe>
    return count;
    1520:	687b      	ldr	r3, [r7, #4]
}
    1522:	0018      	movs	r0, r3
    1524:	46bd      	mov	sp, r7
    1526:	b004      	add	sp, #16
    1528:	bd80      	pop	{r7, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	20001b18 	.word	0x20001b18
    1530:	000172f1 	.word	0x000172f1

00001534 <_read>:

/*
 * Function to be used by stdin for scanf etc
 */
int _read( int fd, const void *buf, size_t count )
{
    1534:	b590      	push	{r4, r7, lr}
    1536:	b087      	sub	sp, #28
    1538:	af00      	add	r7, sp, #0
    153a:	60f8      	str	r0, [r7, #12]
    153c:	60b9      	str	r1, [r7, #8]
    153e:	607a      	str	r2, [r7, #4]
    size_t bytesRead = 0;
    1540:	2300      	movs	r3, #0
    1542:	617b      	str	r3, [r7, #20]
    while( UartGetBuffer( &Uart1, ( uint8_t* )buf, count, ( uint16_t* )&bytesRead ) != 0 ){ };
    1544:	46c0      	nop			; (mov r8, r8)
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	b29a      	uxth	r2, r3
    154a:	2314      	movs	r3, #20
    154c:	18fb      	adds	r3, r7, r3
    154e:	68b9      	ldr	r1, [r7, #8]
    1550:	4809      	ldr	r0, [pc, #36]	; (1578 <_read+0x44>)
    1552:	4c0a      	ldr	r4, [pc, #40]	; (157c <_read+0x48>)
    1554:	47a0      	blx	r4
    1556:	1e03      	subs	r3, r0, #0
    1558:	d1f5      	bne.n	1546 <_read+0x12>
    // Echo back the character
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )bytesRead ) != 0 ){ };
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	b29a      	uxth	r2, r3
    1560:	68b9      	ldr	r1, [r7, #8]
    1562:	4b05      	ldr	r3, [pc, #20]	; (1578 <_read+0x44>)
    1564:	0018      	movs	r0, r3
    1566:	4b06      	ldr	r3, [pc, #24]	; (1580 <_read+0x4c>)
    1568:	4798      	blx	r3
    156a:	1e03      	subs	r3, r0, #0
    156c:	d1f6      	bne.n	155c <_read+0x28>
    return bytesRead;
    156e:	697b      	ldr	r3, [r7, #20]
}
    1570:	0018      	movs	r0, r3
    1572:	46bd      	mov	sp, r7
    1574:	b007      	add	sp, #28
    1576:	bd90      	pop	{r4, r7, pc}
    1578:	20001b18 	.word	0x20001b18
    157c:	0001731d 	.word	0x0001731d
    1580:	000172f1 	.word	0x000172f1

00001584 <DelayMsMcu>:
 */
#include <hal_delay.h>
#include "delay-board.h"

void DelayMsMcu( uint32_t ms )
{
    1584:	b580      	push	{r7, lr}
    1586:	b082      	sub	sp, #8
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    delay_ms( ms );
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	b29b      	uxth	r3, r3
    1590:	0018      	movs	r0, r3
    1592:	4b03      	ldr	r3, [pc, #12]	; (15a0 <DelayMsMcu+0x1c>)
    1594:	4798      	blx	r3
}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	46bd      	mov	sp, r7
    159a:	b002      	add	sp, #8
    159c:	bd80      	pop	{r7, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	00001b91 	.word	0x00001b91

000015a4 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b084      	sub	sp, #16
    15a8:	af00      	add	r7, sp, #0
    15aa:	60f8      	str	r0, [r7, #12]
    15ac:	607a      	str	r2, [r7, #4]
    15ae:	230b      	movs	r3, #11
    15b0:	18fb      	adds	r3, r7, r3
    15b2:	1c0a      	adds	r2, r1, #0
    15b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    15b6:	230b      	movs	r3, #11
    15b8:	18fb      	adds	r3, r7, r3
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	01db      	lsls	r3, r3, #7
    15c0:	18d3      	adds	r3, r2, r3
    15c2:	3308      	adds	r3, #8
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	601a      	str	r2, [r3, #0]
}
    15c8:	46c0      	nop			; (mov r8, r8)
    15ca:	46bd      	mov	sp, r7
    15cc:	b004      	add	sp, #16
    15ce:	bd80      	pop	{r7, pc}

000015d0 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	60f8      	str	r0, [r7, #12]
    15d8:	607a      	str	r2, [r7, #4]
    15da:	230b      	movs	r3, #11
    15dc:	18fb      	adds	r3, r7, r3
    15de:	1c0a      	adds	r2, r1, #0
    15e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    15e2:	230b      	movs	r3, #11
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	781b      	ldrb	r3, [r3, #0]
    15e8:	68fa      	ldr	r2, [r7, #12]
    15ea:	01db      	lsls	r3, r3, #7
    15ec:	18d3      	adds	r3, r2, r3
    15ee:	3304      	adds	r3, #4
    15f0:	687a      	ldr	r2, [r7, #4]
    15f2:	601a      	str	r2, [r3, #0]
}
    15f4:	46c0      	nop			; (mov r8, r8)
    15f6:	46bd      	mov	sp, r7
    15f8:	b004      	add	sp, #16
    15fa:	bd80      	pop	{r7, pc}

000015fc <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    15fc:	b580      	push	{r7, lr}
    15fe:	b084      	sub	sp, #16
    1600:	af00      	add	r7, sp, #0
    1602:	60f8      	str	r0, [r7, #12]
    1604:	607a      	str	r2, [r7, #4]
    1606:	230b      	movs	r3, #11
    1608:	18fb      	adds	r3, r7, r3
    160a:	1c0a      	adds	r2, r1, #0
    160c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    160e:	230b      	movs	r3, #11
    1610:	18fb      	adds	r3, r7, r3
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	01db      	lsls	r3, r3, #7
    1618:	18d3      	adds	r3, r2, r3
    161a:	3318      	adds	r3, #24
    161c:	687a      	ldr	r2, [r7, #4]
    161e:	601a      	str	r2, [r3, #0]
}
    1620:	46c0      	nop			; (mov r8, r8)
    1622:	46bd      	mov	sp, r7
    1624:	b004      	add	sp, #16
    1626:	bd80      	pop	{r7, pc}

00001628 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1628:	b580      	push	{r7, lr}
    162a:	b084      	sub	sp, #16
    162c:	af00      	add	r7, sp, #0
    162e:	60f8      	str	r0, [r7, #12]
    1630:	607a      	str	r2, [r7, #4]
    1632:	230b      	movs	r3, #11
    1634:	18fb      	adds	r3, r7, r3
    1636:	1c0a      	adds	r2, r1, #0
    1638:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    163a:	230b      	movs	r3, #11
    163c:	18fb      	adds	r3, r7, r3
    163e:	781b      	ldrb	r3, [r3, #0]
    1640:	68fa      	ldr	r2, [r7, #12]
    1642:	01db      	lsls	r3, r3, #7
    1644:	18d3      	adds	r3, r2, r3
    1646:	3314      	adds	r3, #20
    1648:	687a      	ldr	r2, [r7, #4]
    164a:	601a      	str	r2, [r3, #0]
}
    164c:	46c0      	nop			; (mov r8, r8)
    164e:	46bd      	mov	sp, r7
    1650:	b004      	add	sp, #16
    1652:	bd80      	pop	{r7, pc}

00001654 <hri_port_write_WRCONFIG_reg>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1654:	b580      	push	{r7, lr}
    1656:	b084      	sub	sp, #16
    1658:	af00      	add	r7, sp, #0
    165a:	60f8      	str	r0, [r7, #12]
    165c:	607a      	str	r2, [r7, #4]
    165e:	230b      	movs	r3, #11
    1660:	18fb      	adds	r3, r7, r3
    1662:	1c0a      	adds	r2, r1, #0
    1664:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1666:	230b      	movs	r3, #11
    1668:	18fb      	adds	r3, r7, r3
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	68fa      	ldr	r2, [r7, #12]
    166e:	01db      	lsls	r3, r3, #7
    1670:	18d3      	adds	r3, r2, r3
    1672:	3328      	adds	r3, #40	; 0x28
    1674:	687a      	ldr	r2, [r7, #4]
    1676:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1678:	46c0      	nop			; (mov r8, r8)
    167a:	46bd      	mov	sp, r7
    167c:	b004      	add	sp, #16
    167e:	bd80      	pop	{r7, pc}

00001680 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1680:	b5b0      	push	{r4, r5, r7, lr}
    1682:	b082      	sub	sp, #8
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
    1688:	0008      	movs	r0, r1
    168a:	0011      	movs	r1, r2
    168c:	1cfb      	adds	r3, r7, #3
    168e:	1c02      	adds	r2, r0, #0
    1690:	701a      	strb	r2, [r3, #0]
    1692:	1cbb      	adds	r3, r7, #2
    1694:	1c0a      	adds	r2, r1, #0
    1696:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1698:	1cfb      	adds	r3, r7, #3
    169a:	781a      	ldrb	r2, [r3, #0]
    169c:	1cbb      	adds	r3, r7, #2
    169e:	781b      	ldrb	r3, [r3, #0]
    16a0:	1cf9      	adds	r1, r7, #3
    16a2:	7808      	ldrb	r0, [r1, #0]
    16a4:	1cb9      	adds	r1, r7, #2
    16a6:	7809      	ldrb	r1, [r1, #0]
    16a8:	687c      	ldr	r4, [r7, #4]
    16aa:	2540      	movs	r5, #64	; 0x40
    16ac:	01c0      	lsls	r0, r0, #7
    16ae:	1820      	adds	r0, r4, r0
    16b0:	1841      	adds	r1, r0, r1
    16b2:	1949      	adds	r1, r1, r5
    16b4:	7809      	ldrb	r1, [r1, #0]
    16b6:	b2c9      	uxtb	r1, r1
    16b8:	2004      	movs	r0, #4
    16ba:	4301      	orrs	r1, r0
    16bc:	b2cc      	uxtb	r4, r1
    16be:	6879      	ldr	r1, [r7, #4]
    16c0:	2040      	movs	r0, #64	; 0x40
    16c2:	01d2      	lsls	r2, r2, #7
    16c4:	188a      	adds	r2, r1, r2
    16c6:	18d3      	adds	r3, r2, r3
    16c8:	181b      	adds	r3, r3, r0
    16ca:	1c22      	adds	r2, r4, #0
    16cc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	46bd      	mov	sp, r7
    16d2:	b002      	add	sp, #8
    16d4:	bdb0      	pop	{r4, r5, r7, pc}

000016d6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    16d6:	b5b0      	push	{r4, r5, r7, lr}
    16d8:	b082      	sub	sp, #8
    16da:	af00      	add	r7, sp, #0
    16dc:	6078      	str	r0, [r7, #4]
    16de:	0008      	movs	r0, r1
    16e0:	0011      	movs	r1, r2
    16e2:	1cfb      	adds	r3, r7, #3
    16e4:	1c02      	adds	r2, r0, #0
    16e6:	701a      	strb	r2, [r3, #0]
    16e8:	1cbb      	adds	r3, r7, #2
    16ea:	1c0a      	adds	r2, r1, #0
    16ec:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    16ee:	1cfb      	adds	r3, r7, #3
    16f0:	781a      	ldrb	r2, [r3, #0]
    16f2:	1cbb      	adds	r3, r7, #2
    16f4:	781b      	ldrb	r3, [r3, #0]
    16f6:	1cf9      	adds	r1, r7, #3
    16f8:	7808      	ldrb	r0, [r1, #0]
    16fa:	1cb9      	adds	r1, r7, #2
    16fc:	7809      	ldrb	r1, [r1, #0]
    16fe:	687c      	ldr	r4, [r7, #4]
    1700:	2540      	movs	r5, #64	; 0x40
    1702:	01c0      	lsls	r0, r0, #7
    1704:	1820      	adds	r0, r4, r0
    1706:	1841      	adds	r1, r0, r1
    1708:	1949      	adds	r1, r1, r5
    170a:	7809      	ldrb	r1, [r1, #0]
    170c:	b2c9      	uxtb	r1, r1
    170e:	2004      	movs	r0, #4
    1710:	4381      	bics	r1, r0
    1712:	b2cc      	uxtb	r4, r1
    1714:	6879      	ldr	r1, [r7, #4]
    1716:	2040      	movs	r0, #64	; 0x40
    1718:	01d2      	lsls	r2, r2, #7
    171a:	188a      	adds	r2, r1, r2
    171c:	18d3      	adds	r3, r2, r3
    171e:	181b      	adds	r3, r3, r0
    1720:	1c22      	adds	r2, r4, #0
    1722:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1724:	46c0      	nop			; (mov r8, r8)
    1726:	46bd      	mov	sp, r7
    1728:	b002      	add	sp, #8
    172a:	bdb0      	pop	{r4, r5, r7, pc}

0000172c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    172c:	b580      	push	{r7, lr}
    172e:	b082      	sub	sp, #8
    1730:	af00      	add	r7, sp, #0
    1732:	6039      	str	r1, [r7, #0]
    1734:	0011      	movs	r1, r2
    1736:	1dfb      	adds	r3, r7, #7
    1738:	1c02      	adds	r2, r0, #0
    173a:	701a      	strb	r2, [r3, #0]
    173c:	1dbb      	adds	r3, r7, #6
    173e:	1c0a      	adds	r2, r1, #0
    1740:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    1742:	1dbb      	adds	r3, r7, #6
    1744:	781b      	ldrb	r3, [r3, #0]
    1746:	2b01      	cmp	r3, #1
    1748:	d023      	beq.n	1792 <_gpio_set_direction+0x66>
    174a:	2b02      	cmp	r3, #2
    174c:	d03f      	beq.n	17ce <_gpio_set_direction+0xa2>
    174e:	2b00      	cmp	r3, #0
    1750:	d15d      	bne.n	180e <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1752:	683a      	ldr	r2, [r7, #0]
    1754:	1dfb      	adds	r3, r7, #7
    1756:	7819      	ldrb	r1, [r3, #0]
    1758:	23c0      	movs	r3, #192	; 0xc0
    175a:	05db      	lsls	r3, r3, #23
    175c:	0018      	movs	r0, r3
    175e:	4b31      	ldr	r3, [pc, #196]	; (1824 <_gpio_set_direction+0xf8>)
    1760:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1762:	683b      	ldr	r3, [r7, #0]
    1764:	041b      	lsls	r3, r3, #16
    1766:	0c1b      	lsrs	r3, r3, #16
    1768:	2280      	movs	r2, #128	; 0x80
    176a:	05d2      	lsls	r2, r2, #23
    176c:	431a      	orrs	r2, r3
    176e:	1dfb      	adds	r3, r7, #7
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	482d      	ldr	r0, [pc, #180]	; (1828 <_gpio_set_direction+0xfc>)
    1774:	0019      	movs	r1, r3
    1776:	4b2d      	ldr	r3, [pc, #180]	; (182c <_gpio_set_direction+0x100>)
    1778:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    177a:	683b      	ldr	r3, [r7, #0]
    177c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    177e:	22c0      	movs	r2, #192	; 0xc0
    1780:	0612      	lsls	r2, r2, #24
    1782:	431a      	orrs	r2, r3
    1784:	1dfb      	adds	r3, r7, #7
    1786:	781b      	ldrb	r3, [r3, #0]
    1788:	4827      	ldr	r0, [pc, #156]	; (1828 <_gpio_set_direction+0xfc>)
    178a:	0019      	movs	r1, r3
    178c:	4b27      	ldr	r3, [pc, #156]	; (182c <_gpio_set_direction+0x100>)
    178e:	4798      	blx	r3
		break;
    1790:	e043      	b.n	181a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    1792:	683a      	ldr	r2, [r7, #0]
    1794:	1dfb      	adds	r3, r7, #7
    1796:	7819      	ldrb	r1, [r3, #0]
    1798:	23c0      	movs	r3, #192	; 0xc0
    179a:	05db      	lsls	r3, r3, #23
    179c:	0018      	movs	r0, r3
    179e:	4b21      	ldr	r3, [pc, #132]	; (1824 <_gpio_set_direction+0xf8>)
    17a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    17a2:	683b      	ldr	r3, [r7, #0]
    17a4:	041b      	lsls	r3, r3, #16
    17a6:	0c1b      	lsrs	r3, r3, #16
    17a8:	4a21      	ldr	r2, [pc, #132]	; (1830 <_gpio_set_direction+0x104>)
    17aa:	431a      	orrs	r2, r3
    17ac:	1dfb      	adds	r3, r7, #7
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	481d      	ldr	r0, [pc, #116]	; (1828 <_gpio_set_direction+0xfc>)
    17b2:	0019      	movs	r1, r3
    17b4:	4b1d      	ldr	r3, [pc, #116]	; (182c <_gpio_set_direction+0x100>)
    17b6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    17b8:	683b      	ldr	r3, [r7, #0]
    17ba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    17bc:	4a1d      	ldr	r2, [pc, #116]	; (1834 <_gpio_set_direction+0x108>)
    17be:	431a      	orrs	r2, r3
    17c0:	1dfb      	adds	r3, r7, #7
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	4818      	ldr	r0, [pc, #96]	; (1828 <_gpio_set_direction+0xfc>)
    17c6:	0019      	movs	r1, r3
    17c8:	4b18      	ldr	r3, [pc, #96]	; (182c <_gpio_set_direction+0x100>)
    17ca:	4798      	blx	r3
		break;
    17cc:	e025      	b.n	181a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    17ce:	683a      	ldr	r2, [r7, #0]
    17d0:	1dfb      	adds	r3, r7, #7
    17d2:	7819      	ldrb	r1, [r3, #0]
    17d4:	23c0      	movs	r3, #192	; 0xc0
    17d6:	05db      	lsls	r3, r3, #23
    17d8:	0018      	movs	r0, r3
    17da:	4b17      	ldr	r3, [pc, #92]	; (1838 <_gpio_set_direction+0x10c>)
    17dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    17de:	683b      	ldr	r3, [r7, #0]
    17e0:	041b      	lsls	r3, r3, #16
    17e2:	0c1b      	lsrs	r3, r3, #16
    17e4:	2280      	movs	r2, #128	; 0x80
    17e6:	05d2      	lsls	r2, r2, #23
    17e8:	431a      	orrs	r2, r3
    17ea:	1dfb      	adds	r3, r7, #7
    17ec:	781b      	ldrb	r3, [r3, #0]
    17ee:	480e      	ldr	r0, [pc, #56]	; (1828 <_gpio_set_direction+0xfc>)
    17f0:	0019      	movs	r1, r3
    17f2:	4b0e      	ldr	r3, [pc, #56]	; (182c <_gpio_set_direction+0x100>)
    17f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    17f6:	683b      	ldr	r3, [r7, #0]
    17f8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    17fa:	22c0      	movs	r2, #192	; 0xc0
    17fc:	0612      	lsls	r2, r2, #24
    17fe:	431a      	orrs	r2, r3
    1800:	1dfb      	adds	r3, r7, #7
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	4808      	ldr	r0, [pc, #32]	; (1828 <_gpio_set_direction+0xfc>)
    1806:	0019      	movs	r1, r3
    1808:	4b08      	ldr	r3, [pc, #32]	; (182c <_gpio_set_direction+0x100>)
    180a:	4798      	blx	r3
		break;
    180c:	e005      	b.n	181a <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    180e:	4b0b      	ldr	r3, [pc, #44]	; (183c <_gpio_set_direction+0x110>)
    1810:	224e      	movs	r2, #78	; 0x4e
    1812:	0019      	movs	r1, r3
    1814:	2000      	movs	r0, #0
    1816:	4b0a      	ldr	r3, [pc, #40]	; (1840 <_gpio_set_direction+0x114>)
    1818:	4798      	blx	r3
	}
}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	46bd      	mov	sp, r7
    181e:	b002      	add	sp, #8
    1820:	bd80      	pop	{r7, pc}
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	000015d1 	.word	0x000015d1
    1828:	40002800 	.word	0x40002800
    182c:	00001655 	.word	0x00001655
    1830:	40020000 	.word	0x40020000
    1834:	c0020000 	.word	0xc0020000
    1838:	000015a5 	.word	0x000015a5
    183c:	0001f0c8 	.word	0x0001f0c8
    1840:	00002379 	.word	0x00002379

00001844 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1844:	b580      	push	{r7, lr}
    1846:	b082      	sub	sp, #8
    1848:	af00      	add	r7, sp, #0
    184a:	6039      	str	r1, [r7, #0]
    184c:	0011      	movs	r1, r2
    184e:	1dfb      	adds	r3, r7, #7
    1850:	1c02      	adds	r2, r0, #0
    1852:	701a      	strb	r2, [r3, #0]
    1854:	1dbb      	adds	r3, r7, #6
    1856:	1c0a      	adds	r2, r1, #0
    1858:	701a      	strb	r2, [r3, #0]
	if (level) {
    185a:	1dbb      	adds	r3, r7, #6
    185c:	781b      	ldrb	r3, [r3, #0]
    185e:	2b00      	cmp	r3, #0
    1860:	d008      	beq.n	1874 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    1862:	683a      	ldr	r2, [r7, #0]
    1864:	1dfb      	adds	r3, r7, #7
    1866:	7819      	ldrb	r1, [r3, #0]
    1868:	23c0      	movs	r3, #192	; 0xc0
    186a:	05db      	lsls	r3, r3, #23
    186c:	0018      	movs	r0, r3
    186e:	4b07      	ldr	r3, [pc, #28]	; (188c <_gpio_set_level+0x48>)
    1870:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    1872:	e007      	b.n	1884 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    1874:	683a      	ldr	r2, [r7, #0]
    1876:	1dfb      	adds	r3, r7, #7
    1878:	7819      	ldrb	r1, [r3, #0]
    187a:	23c0      	movs	r3, #192	; 0xc0
    187c:	05db      	lsls	r3, r3, #23
    187e:	0018      	movs	r0, r3
    1880:	4b03      	ldr	r3, [pc, #12]	; (1890 <_gpio_set_level+0x4c>)
    1882:	4798      	blx	r3
}
    1884:	46c0      	nop			; (mov r8, r8)
    1886:	46bd      	mov	sp, r7
    1888:	b002      	add	sp, #8
    188a:	bd80      	pop	{r7, pc}
    188c:	000015fd 	.word	0x000015fd
    1890:	00001629 	.word	0x00001629

00001894 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1894:	b590      	push	{r4, r7, lr}
    1896:	b083      	sub	sp, #12
    1898:	af00      	add	r7, sp, #0
    189a:	0004      	movs	r4, r0
    189c:	0008      	movs	r0, r1
    189e:	0011      	movs	r1, r2
    18a0:	1dfb      	adds	r3, r7, #7
    18a2:	1c22      	adds	r2, r4, #0
    18a4:	701a      	strb	r2, [r3, #0]
    18a6:	1dbb      	adds	r3, r7, #6
    18a8:	1c02      	adds	r2, r0, #0
    18aa:	701a      	strb	r2, [r3, #0]
    18ac:	1d7b      	adds	r3, r7, #5
    18ae:	1c0a      	adds	r2, r1, #0
    18b0:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    18b2:	1d7b      	adds	r3, r7, #5
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2b01      	cmp	r3, #1
    18b8:	d00c      	beq.n	18d4 <_gpio_set_pin_pull_mode+0x40>
    18ba:	2b02      	cmp	r3, #2
    18bc:	d029      	beq.n	1912 <_gpio_set_pin_pull_mode+0x7e>
    18be:	2b00      	cmp	r3, #0
    18c0:	d146      	bne.n	1950 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    18c2:	1dbb      	adds	r3, r7, #6
    18c4:	781a      	ldrb	r2, [r3, #0]
    18c6:	1dfb      	adds	r3, r7, #7
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	4827      	ldr	r0, [pc, #156]	; (1968 <_gpio_set_pin_pull_mode+0xd4>)
    18cc:	0019      	movs	r1, r3
    18ce:	4b27      	ldr	r3, [pc, #156]	; (196c <_gpio_set_pin_pull_mode+0xd8>)
    18d0:	4798      	blx	r3
		break;
    18d2:	e044      	b.n	195e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    18d4:	1dbb      	adds	r3, r7, #6
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	2201      	movs	r2, #1
    18da:	409a      	lsls	r2, r3
    18dc:	1dfb      	adds	r3, r7, #7
    18de:	7819      	ldrb	r1, [r3, #0]
    18e0:	23c0      	movs	r3, #192	; 0xc0
    18e2:	05db      	lsls	r3, r3, #23
    18e4:	0018      	movs	r0, r3
    18e6:	4b22      	ldr	r3, [pc, #136]	; (1970 <_gpio_set_pin_pull_mode+0xdc>)
    18e8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    18ea:	1dbb      	adds	r3, r7, #6
    18ec:	781a      	ldrb	r2, [r3, #0]
    18ee:	1dfb      	adds	r3, r7, #7
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	481d      	ldr	r0, [pc, #116]	; (1968 <_gpio_set_pin_pull_mode+0xd4>)
    18f4:	0019      	movs	r1, r3
    18f6:	4b1f      	ldr	r3, [pc, #124]	; (1974 <_gpio_set_pin_pull_mode+0xe0>)
    18f8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    18fa:	1dbb      	adds	r3, r7, #6
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	2201      	movs	r2, #1
    1900:	409a      	lsls	r2, r3
    1902:	1dfb      	adds	r3, r7, #7
    1904:	7819      	ldrb	r1, [r3, #0]
    1906:	23c0      	movs	r3, #192	; 0xc0
    1908:	05db      	lsls	r3, r3, #23
    190a:	0018      	movs	r0, r3
    190c:	4b1a      	ldr	r3, [pc, #104]	; (1978 <_gpio_set_pin_pull_mode+0xe4>)
    190e:	4798      	blx	r3
		break;
    1910:	e025      	b.n	195e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    1912:	1dbb      	adds	r3, r7, #6
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	2201      	movs	r2, #1
    1918:	409a      	lsls	r2, r3
    191a:	1dfb      	adds	r3, r7, #7
    191c:	7819      	ldrb	r1, [r3, #0]
    191e:	23c0      	movs	r3, #192	; 0xc0
    1920:	05db      	lsls	r3, r3, #23
    1922:	0018      	movs	r0, r3
    1924:	4b12      	ldr	r3, [pc, #72]	; (1970 <_gpio_set_pin_pull_mode+0xdc>)
    1926:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1928:	1dbb      	adds	r3, r7, #6
    192a:	781a      	ldrb	r2, [r3, #0]
    192c:	1dfb      	adds	r3, r7, #7
    192e:	781b      	ldrb	r3, [r3, #0]
    1930:	480d      	ldr	r0, [pc, #52]	; (1968 <_gpio_set_pin_pull_mode+0xd4>)
    1932:	0019      	movs	r1, r3
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <_gpio_set_pin_pull_mode+0xe0>)
    1936:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    1938:	1dbb      	adds	r3, r7, #6
    193a:	781b      	ldrb	r3, [r3, #0]
    193c:	2201      	movs	r2, #1
    193e:	409a      	lsls	r2, r3
    1940:	1dfb      	adds	r3, r7, #7
    1942:	7819      	ldrb	r1, [r3, #0]
    1944:	23c0      	movs	r3, #192	; 0xc0
    1946:	05db      	lsls	r3, r3, #23
    1948:	0018      	movs	r0, r3
    194a:	4b0c      	ldr	r3, [pc, #48]	; (197c <_gpio_set_pin_pull_mode+0xe8>)
    194c:	4798      	blx	r3
		break;
    194e:	e006      	b.n	195e <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    1950:	4b0b      	ldr	r3, [pc, #44]	; (1980 <_gpio_set_pin_pull_mode+0xec>)
    1952:	2291      	movs	r2, #145	; 0x91
    1954:	0019      	movs	r1, r3
    1956:	2000      	movs	r0, #0
    1958:	4b0a      	ldr	r3, [pc, #40]	; (1984 <_gpio_set_pin_pull_mode+0xf0>)
    195a:	4798      	blx	r3
		break;
    195c:	46c0      	nop			; (mov r8, r8)
	}
}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	46bd      	mov	sp, r7
    1962:	b003      	add	sp, #12
    1964:	bd90      	pop	{r4, r7, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	40002800 	.word	0x40002800
    196c:	000016d7 	.word	0x000016d7
    1970:	000015d1 	.word	0x000015d1
    1974:	00001681 	.word	0x00001681
    1978:	000015fd 	.word	0x000015fd
    197c:	00001629 	.word	0x00001629
    1980:	0001f0c8 	.word	0x0001f0c8
    1984:	00002379 	.word	0x00002379

00001988 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1988:	b580      	push	{r7, lr}
    198a:	b082      	sub	sp, #8
    198c:	af00      	add	r7, sp, #0
    198e:	0002      	movs	r2, r0
    1990:	1dfb      	adds	r3, r7, #7
    1992:	701a      	strb	r2, [r3, #0]
    1994:	1dbb      	adds	r3, r7, #6
    1996:	1c0a      	adds	r2, r1, #0
    1998:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    199a:	1dfb      	adds	r3, r7, #7
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	095b      	lsrs	r3, r3, #5
    19a0:	b2d8      	uxtb	r0, r3
    19a2:	1dfb      	adds	r3, r7, #7
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	221f      	movs	r2, #31
    19a8:	4013      	ands	r3, r2
    19aa:	b2d9      	uxtb	r1, r3
    19ac:	1dbb      	adds	r3, r7, #6
    19ae:	781b      	ldrb	r3, [r3, #0]
    19b0:	001a      	movs	r2, r3
    19b2:	4b03      	ldr	r3, [pc, #12]	; (19c0 <gpio_set_pin_pull_mode+0x38>)
    19b4:	4798      	blx	r3
}
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	46bd      	mov	sp, r7
    19ba:	b002      	add	sp, #8
    19bc:	bd80      	pop	{r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	00001895 	.word	0x00001895

000019c4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	0002      	movs	r2, r0
    19cc:	1dfb      	adds	r3, r7, #7
    19ce:	701a      	strb	r2, [r3, #0]
    19d0:	1dbb      	adds	r3, r7, #6
    19d2:	1c0a      	adds	r2, r1, #0
    19d4:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    19d6:	1dfb      	adds	r3, r7, #7
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	095b      	lsrs	r3, r3, #5
    19dc:	b2d8      	uxtb	r0, r3
    19de:	1dfb      	adds	r3, r7, #7
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	221f      	movs	r2, #31
    19e4:	4013      	ands	r3, r2
    19e6:	2201      	movs	r2, #1
    19e8:	409a      	lsls	r2, r3
    19ea:	0011      	movs	r1, r2
    19ec:	1dbb      	adds	r3, r7, #6
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	001a      	movs	r2, r3
    19f2:	4b03      	ldr	r3, [pc, #12]	; (1a00 <gpio_set_pin_direction+0x3c>)
    19f4:	4798      	blx	r3
}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	46bd      	mov	sp, r7
    19fa:	b002      	add	sp, #8
    19fc:	bd80      	pop	{r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	0000172d 	.word	0x0000172d

00001a04 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	0002      	movs	r2, r0
    1a0c:	1dfb      	adds	r3, r7, #7
    1a0e:	701a      	strb	r2, [r3, #0]
    1a10:	1dbb      	adds	r3, r7, #6
    1a12:	1c0a      	adds	r2, r1, #0
    1a14:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1a16:	1dfb      	adds	r3, r7, #7
    1a18:	781b      	ldrb	r3, [r3, #0]
    1a1a:	095b      	lsrs	r3, r3, #5
    1a1c:	b2d8      	uxtb	r0, r3
    1a1e:	1dfb      	adds	r3, r7, #7
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	221f      	movs	r2, #31
    1a24:	4013      	ands	r3, r2
    1a26:	2201      	movs	r2, #1
    1a28:	409a      	lsls	r2, r3
    1a2a:	0011      	movs	r1, r2
    1a2c:	1dbb      	adds	r3, r7, #6
    1a2e:	781b      	ldrb	r3, [r3, #0]
    1a30:	001a      	movs	r2, r3
    1a32:	4b03      	ldr	r3, [pc, #12]	; (1a40 <gpio_set_pin_level+0x3c>)
    1a34:	4798      	blx	r3
}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	46bd      	mov	sp, r7
    1a3a:	b002      	add	sp, #8
    1a3c:	bd80      	pop	{r7, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	00001845 	.word	0x00001845

00001a44 <GpioMcuInit>:
#include <hal_gpio.h>
#include <hal_ext_irq.h>
#include "gpio-board.h"

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
    1a44:	b590      	push	{r4, r7, lr}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	000c      	movs	r4, r1
    1a4e:	0010      	movs	r0, r2
    1a50:	0019      	movs	r1, r3
    1a52:	1cfb      	adds	r3, r7, #3
    1a54:	1c22      	adds	r2, r4, #0
    1a56:	701a      	strb	r2, [r3, #0]
    1a58:	1cbb      	adds	r3, r7, #2
    1a5a:	1c02      	adds	r2, r0, #0
    1a5c:	701a      	strb	r2, [r3, #0]
    1a5e:	1c7b      	adds	r3, r7, #1
    1a60:	1c0a      	adds	r2, r1, #0
    1a62:	701a      	strb	r2, [r3, #0]
    obj->pin = pin;
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	1cfa      	adds	r2, r7, #3
    1a68:	7812      	ldrb	r2, [r2, #0]
    1a6a:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
    1a6c:	1cfb      	adds	r3, r7, #3
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	b25b      	sxtb	r3, r3
    1a72:	3301      	adds	r3, #1
    1a74:	d02a      	beq.n	1acc <GpioMcuInit+0x88>
        return;
    }

    //obj->port = ( void* )GPIO_PORT( obj->pin );

    if( mode == PIN_INPUT )
    1a76:	1cbb      	adds	r3, r7, #2
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d113      	bne.n	1aa6 <GpioMcuInit+0x62>
    {
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_IN );
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	781b      	ldrb	r3, [r3, #0]
    1a82:	b25b      	sxtb	r3, r3
    1a84:	b2db      	uxtb	r3, r3
    1a86:	2101      	movs	r1, #1
    1a88:	0018      	movs	r0, r3
    1a8a:	4b12      	ldr	r3, [pc, #72]	; (1ad4 <GpioMcuInit+0x90>)
    1a8c:	4798      	blx	r3
        gpio_set_pin_pull_mode( obj->pin, type ); // the pull up/down need to be set after the direction for correct working
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	781b      	ldrb	r3, [r3, #0]
    1a92:	b25b      	sxtb	r3, r3
    1a94:	b2db      	uxtb	r3, r3
    1a96:	2218      	movs	r2, #24
    1a98:	18ba      	adds	r2, r7, r2
    1a9a:	7812      	ldrb	r2, [r2, #0]
    1a9c:	0011      	movs	r1, r2
    1a9e:	0018      	movs	r0, r3
    1aa0:	4b0d      	ldr	r3, [pc, #52]	; (1ad8 <GpioMcuInit+0x94>)
    1aa2:	4798      	blx	r3
    1aa4:	e007      	b.n	1ab6 <GpioMcuInit+0x72>
    }
    else // mode output
    {
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_OUT );
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	b25b      	sxtb	r3, r3
    1aac:	b2db      	uxtb	r3, r3
    1aae:	2102      	movs	r1, #2
    1ab0:	0018      	movs	r0, r3
    1ab2:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <GpioMcuInit+0x90>)
    1ab4:	4798      	blx	r3
    }


    // Sets initial output value
    if( mode == PIN_OUTPUT )
    1ab6:	1cbb      	adds	r3, r7, #2
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	2b01      	cmp	r3, #1
    1abc:	d107      	bne.n	1ace <GpioMcuInit+0x8a>
    {
        GpioMcuWrite( obj, value );
    1abe:	69fa      	ldr	r2, [r7, #28]
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	0011      	movs	r1, r2
    1ac4:	0018      	movs	r0, r3
    1ac6:	4b05      	ldr	r3, [pc, #20]	; (1adc <GpioMcuInit+0x98>)
    1ac8:	4798      	blx	r3
    1aca:	e000      	b.n	1ace <GpioMcuInit+0x8a>
        return;
    1acc:	46c0      	nop			; (mov r8, r8)
    }
}
    1ace:	46bd      	mov	sp, r7
    1ad0:	b003      	add	sp, #12
    1ad2:	bd90      	pop	{r4, r7, pc}
    1ad4:	000019c5 	.word	0x000019c5
    1ad8:	00001989 	.word	0x00001989
    1adc:	00001ae1 	.word	0x00001ae1

00001ae0 <GpioMcuWrite>:
{
    //ext_irq_register( obj->pin, NULL );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
    1ae8:	6039      	str	r1, [r7, #0]

    if( obj == NULL )
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d100      	bne.n	1af2 <GpioMcuWrite+0x12>
    {
        //assert_param( FAIL );
        while( 1 );
    1af0:	e7fe      	b.n	1af0 <GpioMcuWrite+0x10>
    }
    // Check if pin is not connected
    if( obj->pin == NC )
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	b25b      	sxtb	r3, r3
    1af8:	3301      	adds	r3, #1
    1afa:	d00c      	beq.n	1b16 <GpioMcuWrite+0x36>
    {
        return;
    }
    gpio_set_pin_level( obj->pin, value );
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	781b      	ldrb	r3, [r3, #0]
    1b00:	b25b      	sxtb	r3, r3
    1b02:	b2da      	uxtb	r2, r3
    1b04:	683b      	ldr	r3, [r7, #0]
    1b06:	1e59      	subs	r1, r3, #1
    1b08:	418b      	sbcs	r3, r1
    1b0a:	b2db      	uxtb	r3, r3
    1b0c:	0019      	movs	r1, r3
    1b0e:	0010      	movs	r0, r2
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <GpioMcuWrite+0x40>)
    1b12:	4798      	blx	r3
    1b14:	e000      	b.n	1b18 <GpioMcuWrite+0x38>
        return;
    1b16:	46c0      	nop			; (mov r8, r8)
}
    1b18:	46bd      	mov	sp, r7
    1b1a:	b002      	add	sp, #8
    1b1c:	bd80      	pop	{r7, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001a05 	.word	0x00001a05

00001b24 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1b24:	b580      	push	{r7, lr}
    1b26:	b084      	sub	sp, #16
    1b28:	af00      	add	r7, sp, #0
    1b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b2c:	f3ef 8310 	mrs	r3, PRIMASK
    1b30:	60fb      	str	r3, [r7, #12]
  return(result);
    1b32:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b38:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1b3a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	46bd      	mov	sp, r7
    1b42:	b004      	add	sp, #16
    1b44:	bd80      	pop	{r7, pc}

00001b46 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1b46:	b580      	push	{r7, lr}
    1b48:	b084      	sub	sp, #16
    1b4a:	af00      	add	r7, sp, #0
    1b4c:	6078      	str	r0, [r7, #4]
    1b4e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	f383 8810 	msr	PRIMASK, r3
}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	46bd      	mov	sp, r7
    1b62:	b004      	add	sp, #16
    1b64:	bd80      	pop	{r7, pc}
	...

00001b68 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	b082      	sub	sp, #8
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1b70:	4b05      	ldr	r3, [pc, #20]	; (1b88 <delay_init+0x20>)
    1b72:	687a      	ldr	r2, [r7, #4]
    1b74:	601a      	str	r2, [r3, #0]
    1b76:	4b04      	ldr	r3, [pc, #16]	; (1b88 <delay_init+0x20>)
    1b78:	681b      	ldr	r3, [r3, #0]
    1b7a:	0018      	movs	r0, r3
    1b7c:	4b03      	ldr	r3, [pc, #12]	; (1b8c <delay_init+0x24>)
    1b7e:	4798      	blx	r3
}
    1b80:	46c0      	nop			; (mov r8, r8)
    1b82:	46bd      	mov	sp, r7
    1b84:	b002      	add	sp, #8
    1b86:	bd80      	pop	{r7, pc}
    1b88:	20000c2c 	.word	0x20000c2c
    1b8c:	00003e91 	.word	0x00003e91

00001b90 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b90:	b590      	push	{r4, r7, lr}
    1b92:	b083      	sub	sp, #12
    1b94:	af00      	add	r7, sp, #0
    1b96:	0002      	movs	r2, r0
    1b98:	1dbb      	adds	r3, r7, #6
    1b9a:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b9c:	4b07      	ldr	r3, [pc, #28]	; (1bbc <delay_ms+0x2c>)
    1b9e:	681c      	ldr	r4, [r3, #0]
    1ba0:	1dbb      	adds	r3, r7, #6
    1ba2:	881b      	ldrh	r3, [r3, #0]
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <delay_ms+0x30>)
    1ba8:	4798      	blx	r3
    1baa:	0003      	movs	r3, r0
    1bac:	0019      	movs	r1, r3
    1bae:	0020      	movs	r0, r4
    1bb0:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <delay_ms+0x34>)
    1bb2:	4798      	blx	r3
}
    1bb4:	46c0      	nop			; (mov r8, r8)
    1bb6:	46bd      	mov	sp, r7
    1bb8:	b003      	add	sp, #12
    1bba:	bd90      	pop	{r4, r7, pc}
    1bbc:	20000c2c 	.word	0x20000c2c
    1bc0:	00002629 	.word	0x00002629
    1bc4:	00003ead 	.word	0x00003ead

00001bc8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1bce:	1dbb      	adds	r3, r7, #6
    1bd0:	2200      	movs	r2, #0
    1bd2:	801a      	strh	r2, [r3, #0]
    1bd4:	e013      	b.n	1bfe <ext_irq_init+0x36>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1bd6:	1dbb      	adds	r3, r7, #6
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	4a0f      	ldr	r2, [pc, #60]	; (1c18 <ext_irq_init+0x50>)
    1bdc:	00db      	lsls	r3, r3, #3
    1bde:	18d3      	adds	r3, r2, r3
    1be0:	3304      	adds	r3, #4
    1be2:	2201      	movs	r2, #1
    1be4:	4252      	negs	r2, r2
    1be6:	601a      	str	r2, [r3, #0]
		ext_irqs[i].cb  = NULL;
    1be8:	1dbb      	adds	r3, r7, #6
    1bea:	881a      	ldrh	r2, [r3, #0]
    1bec:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <ext_irq_init+0x50>)
    1bee:	00d2      	lsls	r2, r2, #3
    1bf0:	2100      	movs	r1, #0
    1bf2:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1bf4:	1dbb      	adds	r3, r7, #6
    1bf6:	881a      	ldrh	r2, [r3, #0]
    1bf8:	1dbb      	adds	r3, r7, #6
    1bfa:	3201      	adds	r2, #1
    1bfc:	801a      	strh	r2, [r3, #0]
    1bfe:	1dbb      	adds	r3, r7, #6
    1c00:	881b      	ldrh	r3, [r3, #0]
    1c02:	2b05      	cmp	r3, #5
    1c04:	d9e7      	bls.n	1bd6 <ext_irq_init+0xe>
	}

	return _ext_irq_init(process_ext_irq);
    1c06:	4b05      	ldr	r3, [pc, #20]	; (1c1c <ext_irq_init+0x54>)
    1c08:	0018      	movs	r0, r3
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <ext_irq_init+0x58>)
    1c0c:	4798      	blx	r3
    1c0e:	0003      	movs	r3, r0
}
    1c10:	0018      	movs	r0, r3
    1c12:	46bd      	mov	sp, r7
    1c14:	b002      	add	sp, #8
    1c16:	bd80      	pop	{r7, pc}
    1c18:	20000c30 	.word	0x20000c30
    1c1c:	00001dfd 	.word	0x00001dfd
    1c20:	00002945 	.word	0x00002945

00001c24 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b086      	sub	sp, #24
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1c2e:	2317      	movs	r3, #23
    1c30:	18fb      	adds	r3, r7, r3
    1c32:	2200      	movs	r2, #0
    1c34:	701a      	strb	r2, [r3, #0]
    1c36:	2316      	movs	r3, #22
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	2200      	movs	r2, #0
    1c3c:	701a      	strb	r2, [r3, #0]
	bool    found = false;
    1c3e:	2315      	movs	r3, #21
    1c40:	18fb      	adds	r3, r7, r3
    1c42:	2200      	movs	r2, #0
    1c44:	701a      	strb	r2, [r3, #0]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1c46:	e01d      	b.n	1c84 <ext_irq_register+0x60>
		if (ext_irqs[i].pin == pin) {
    1c48:	2317      	movs	r3, #23
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	4a69      	ldr	r2, [pc, #420]	; (1df4 <ext_irq_register+0x1d0>)
    1c50:	00db      	lsls	r3, r3, #3
    1c52:	18d3      	adds	r3, r2, r3
    1c54:	3304      	adds	r3, #4
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	429a      	cmp	r2, r3
    1c5c:	d10b      	bne.n	1c76 <ext_irq_register+0x52>
			ext_irqs[i].cb = cb;
    1c5e:	2317      	movs	r3, #23
    1c60:	18fb      	adds	r3, r7, r3
    1c62:	781a      	ldrb	r2, [r3, #0]
    1c64:	4b63      	ldr	r3, [pc, #396]	; (1df4 <ext_irq_register+0x1d0>)
    1c66:	00d2      	lsls	r2, r2, #3
    1c68:	6839      	ldr	r1, [r7, #0]
    1c6a:	50d1      	str	r1, [r2, r3]
			found          = true;
    1c6c:	2315      	movs	r3, #21
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	2201      	movs	r2, #1
    1c72:	701a      	strb	r2, [r3, #0]
			break;
    1c74:	e00b      	b.n	1c8e <ext_irq_register+0x6a>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1c76:	2317      	movs	r3, #23
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781a      	ldrb	r2, [r3, #0]
    1c7c:	2317      	movs	r3, #23
    1c7e:	18fb      	adds	r3, r7, r3
    1c80:	3201      	adds	r2, #1
    1c82:	701a      	strb	r2, [r3, #0]
    1c84:	2317      	movs	r3, #23
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	2b05      	cmp	r3, #5
    1c8c:	d9dc      	bls.n	1c48 <ext_irq_register+0x24>
		}
	}

	if (NULL == cb) {
    1c8e:	683b      	ldr	r3, [r7, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d111      	bne.n	1cb8 <ext_irq_register+0x94>
		if (!found) {
    1c94:	2315      	movs	r3, #21
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781b      	ldrb	r3, [r3, #0]
    1c9a:	2201      	movs	r2, #1
    1c9c:	4053      	eors	r3, r2
    1c9e:	b2db      	uxtb	r3, r3
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d002      	beq.n	1caa <ext_irq_register+0x86>
			return ERR_INVALID_ARG;
    1ca4:	230d      	movs	r3, #13
    1ca6:	425b      	negs	r3, r3
    1ca8:	e09f      	b.n	1dea <ext_irq_register+0x1c6>
		}
		return _ext_irq_enable(pin, false);
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	2100      	movs	r1, #0
    1cae:	0018      	movs	r0, r3
    1cb0:	4b51      	ldr	r3, [pc, #324]	; (1df8 <ext_irq_register+0x1d4>)
    1cb2:	4798      	blx	r3
    1cb4:	0003      	movs	r3, r0
    1cb6:	e098      	b.n	1dea <ext_irq_register+0x1c6>
	}

	if (!found) {
    1cb8:	2315      	movs	r3, #21
    1cba:	18fb      	adds	r3, r7, r3
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	2201      	movs	r2, #1
    1cc0:	4053      	eors	r3, r2
    1cc2:	b2db      	uxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d100      	bne.n	1cca <ext_irq_register+0xa6>
    1cc8:	e07e      	b.n	1dc8 <ext_irq_register+0x1a4>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1cca:	2317      	movs	r3, #23
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	2200      	movs	r2, #0
    1cd0:	701a      	strb	r2, [r3, #0]
    1cd2:	e023      	b.n	1d1c <ext_irq_register+0xf8>
			if (NULL == ext_irqs[i].cb) {
    1cd4:	2317      	movs	r3, #23
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	781a      	ldrb	r2, [r3, #0]
    1cda:	4b46      	ldr	r3, [pc, #280]	; (1df4 <ext_irq_register+0x1d0>)
    1cdc:	00d2      	lsls	r2, r2, #3
    1cde:	58d3      	ldr	r3, [r2, r3]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d114      	bne.n	1d0e <ext_irq_register+0xea>
				ext_irqs[i].cb  = cb;
    1ce4:	2317      	movs	r3, #23
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	781a      	ldrb	r2, [r3, #0]
    1cea:	4b42      	ldr	r3, [pc, #264]	; (1df4 <ext_irq_register+0x1d0>)
    1cec:	00d2      	lsls	r2, r2, #3
    1cee:	6839      	ldr	r1, [r7, #0]
    1cf0:	50d1      	str	r1, [r2, r3]
				ext_irqs[i].pin = pin;
    1cf2:	2317      	movs	r3, #23
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	4a3e      	ldr	r2, [pc, #248]	; (1df4 <ext_irq_register+0x1d0>)
    1cfa:	00db      	lsls	r3, r3, #3
    1cfc:	18d3      	adds	r3, r2, r3
    1cfe:	3304      	adds	r3, #4
    1d00:	687a      	ldr	r2, [r7, #4]
    1d02:	601a      	str	r2, [r3, #0]
				found           = true;
    1d04:	2315      	movs	r3, #21
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	2201      	movs	r2, #1
    1d0a:	701a      	strb	r2, [r3, #0]
				break;
    1d0c:	e00b      	b.n	1d26 <ext_irq_register+0x102>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d0e:	2317      	movs	r3, #23
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	781a      	ldrb	r2, [r3, #0]
    1d14:	2317      	movs	r3, #23
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	3201      	adds	r2, #1
    1d1a:	701a      	strb	r2, [r3, #0]
    1d1c:	2317      	movs	r3, #23
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b05      	cmp	r3, #5
    1d24:	d9d6      	bls.n	1cd4 <ext_irq_register+0xb0>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1d26:	e045      	b.n	1db4 <ext_irq_register+0x190>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1d28:	2317      	movs	r3, #23
    1d2a:	18fb      	adds	r3, r7, r3
    1d2c:	781b      	ldrb	r3, [r3, #0]
    1d2e:	4a31      	ldr	r2, [pc, #196]	; (1df4 <ext_irq_register+0x1d0>)
    1d30:	00db      	lsls	r3, r3, #3
    1d32:	18d3      	adds	r3, r2, r3
    1d34:	3304      	adds	r3, #4
    1d36:	681a      	ldr	r2, [r3, #0]
    1d38:	2316      	movs	r3, #22
    1d3a:	18fb      	adds	r3, r7, r3
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	492d      	ldr	r1, [pc, #180]	; (1df4 <ext_irq_register+0x1d0>)
    1d40:	00db      	lsls	r3, r3, #3
    1d42:	18cb      	adds	r3, r1, r3
    1d44:	3304      	adds	r3, #4
    1d46:	681b      	ldr	r3, [r3, #0]
    1d48:	429a      	cmp	r2, r3
    1d4a:	d22c      	bcs.n	1da6 <ext_irq_register+0x182>
    1d4c:	2316      	movs	r3, #22
    1d4e:	18fb      	adds	r3, r7, r3
    1d50:	781b      	ldrb	r3, [r3, #0]
    1d52:	4a28      	ldr	r2, [pc, #160]	; (1df4 <ext_irq_register+0x1d0>)
    1d54:	00db      	lsls	r3, r3, #3
    1d56:	18d3      	adds	r3, r2, r3
    1d58:	3304      	adds	r3, #4
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	3301      	adds	r3, #1
    1d5e:	d022      	beq.n	1da6 <ext_irq_register+0x182>
				struct ext_irq tmp = ext_irqs[j];
    1d60:	2316      	movs	r3, #22
    1d62:	18fb      	adds	r3, r7, r3
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	220c      	movs	r2, #12
    1d68:	18ba      	adds	r2, r7, r2
    1d6a:	4922      	ldr	r1, [pc, #136]	; (1df4 <ext_irq_register+0x1d0>)
    1d6c:	00db      	lsls	r3, r3, #3
    1d6e:	18cb      	adds	r3, r1, r3
    1d70:	cb03      	ldmia	r3!, {r0, r1}
    1d72:	c203      	stmia	r2!, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1d74:	2316      	movs	r3, #22
    1d76:	18fb      	adds	r3, r7, r3
    1d78:	781b      	ldrb	r3, [r3, #0]
    1d7a:	2217      	movs	r2, #23
    1d7c:	18ba      	adds	r2, r7, r2
    1d7e:	7812      	ldrb	r2, [r2, #0]
    1d80:	481c      	ldr	r0, [pc, #112]	; (1df4 <ext_irq_register+0x1d0>)
    1d82:	00db      	lsls	r3, r3, #3
    1d84:	491b      	ldr	r1, [pc, #108]	; (1df4 <ext_irq_register+0x1d0>)
    1d86:	00d2      	lsls	r2, r2, #3
    1d88:	18c3      	adds	r3, r0, r3
    1d8a:	188a      	adds	r2, r1, r2
    1d8c:	ca03      	ldmia	r2!, {r0, r1}
    1d8e:	c303      	stmia	r3!, {r0, r1}
				ext_irqs[i] = tmp;
    1d90:	2317      	movs	r3, #23
    1d92:	18fb      	adds	r3, r7, r3
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	4a17      	ldr	r2, [pc, #92]	; (1df4 <ext_irq_register+0x1d0>)
    1d98:	00db      	lsls	r3, r3, #3
    1d9a:	210c      	movs	r1, #12
    1d9c:	1879      	adds	r1, r7, r1
    1d9e:	18d3      	adds	r3, r2, r3
    1da0:	000a      	movs	r2, r1
    1da2:	ca03      	ldmia	r2!, {r0, r1}
    1da4:	c303      	stmia	r3!, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1da6:	2316      	movs	r3, #22
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	781a      	ldrb	r2, [r3, #0]
    1dac:	2316      	movs	r3, #22
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	3201      	adds	r2, #1
    1db2:	701a      	strb	r2, [r3, #0]
    1db4:	2316      	movs	r3, #22
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	781b      	ldrb	r3, [r3, #0]
    1dba:	2b05      	cmp	r3, #5
    1dbc:	d804      	bhi.n	1dc8 <ext_irq_register+0x1a4>
    1dbe:	2317      	movs	r3, #23
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	2b05      	cmp	r3, #5
    1dc6:	d9af      	bls.n	1d28 <ext_irq_register+0x104>
			}
		}
	}

	if (!found) {
    1dc8:	2315      	movs	r3, #21
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	2201      	movs	r2, #1
    1dd0:	4053      	eors	r3, r2
    1dd2:	b2db      	uxtb	r3, r3
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d002      	beq.n	1dde <ext_irq_register+0x1ba>
		return ERR_INVALID_ARG;
    1dd8:	230d      	movs	r3, #13
    1dda:	425b      	negs	r3, r3
    1ddc:	e005      	b.n	1dea <ext_irq_register+0x1c6>
	}

	return _ext_irq_enable(pin, true);
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	2101      	movs	r1, #1
    1de2:	0018      	movs	r0, r3
    1de4:	4b04      	ldr	r3, [pc, #16]	; (1df8 <ext_irq_register+0x1d4>)
    1de6:	4798      	blx	r3
    1de8:	0003      	movs	r3, r0
}
    1dea:	0018      	movs	r0, r3
    1dec:	46bd      	mov	sp, r7
    1dee:	b006      	add	sp, #24
    1df0:	bd80      	pop	{r7, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	20000c30 	.word	0x20000c30
    1df8:	00002a15 	.word	0x00002a15

00001dfc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	b084      	sub	sp, #16
    1e00:	af00      	add	r7, sp, #0
    1e02:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1e04:	230f      	movs	r3, #15
    1e06:	18fb      	adds	r3, r7, r3
    1e08:	2200      	movs	r2, #0
    1e0a:	701a      	strb	r2, [r3, #0]
    1e0c:	230e      	movs	r3, #14
    1e0e:	18fb      	adds	r3, r7, r3
    1e10:	2206      	movs	r2, #6
    1e12:	701a      	strb	r2, [r3, #0]

	while (upper >= lower) {
    1e14:	e04b      	b.n	1eae <process_ext_irq+0xb2>
		middle = (upper + lower) >> 1;
    1e16:	230e      	movs	r3, #14
    1e18:	18fb      	adds	r3, r7, r3
    1e1a:	781a      	ldrb	r2, [r3, #0]
    1e1c:	230f      	movs	r3, #15
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	18d3      	adds	r3, r2, r3
    1e24:	105a      	asrs	r2, r3, #1
    1e26:	230d      	movs	r3, #13
    1e28:	18fb      	adds	r3, r7, r3
    1e2a:	701a      	strb	r2, [r3, #0]

		if (ext_irqs[middle].pin == pin) {
    1e2c:	230d      	movs	r3, #13
    1e2e:	18fb      	adds	r3, r7, r3
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	4a24      	ldr	r2, [pc, #144]	; (1ec4 <process_ext_irq+0xc8>)
    1e34:	00db      	lsls	r3, r3, #3
    1e36:	18d3      	adds	r3, r2, r3
    1e38:	3304      	adds	r3, #4
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d10f      	bne.n	1e62 <process_ext_irq+0x66>
			if (ext_irqs[middle].cb) {
    1e42:	230d      	movs	r3, #13
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	781a      	ldrb	r2, [r3, #0]
    1e48:	4b1e      	ldr	r3, [pc, #120]	; (1ec4 <process_ext_irq+0xc8>)
    1e4a:	00d2      	lsls	r2, r2, #3
    1e4c:	58d3      	ldr	r3, [r2, r3]
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d007      	beq.n	1e62 <process_ext_irq+0x66>
				ext_irqs[middle].cb();
    1e52:	230d      	movs	r3, #13
    1e54:	18fb      	adds	r3, r7, r3
    1e56:	781a      	ldrb	r2, [r3, #0]
    1e58:	4b1a      	ldr	r3, [pc, #104]	; (1ec4 <process_ext_irq+0xc8>)
    1e5a:	00d2      	lsls	r2, r2, #3
    1e5c:	58d3      	ldr	r3, [r2, r3]
    1e5e:	4798      	blx	r3
				return;
    1e60:	e02d      	b.n	1ebe <process_ext_irq+0xc2>
			}
		}

		if (ext_irqs[middle].pin < pin) {
    1e62:	230d      	movs	r3, #13
    1e64:	18fb      	adds	r3, r7, r3
    1e66:	781b      	ldrb	r3, [r3, #0]
    1e68:	4a16      	ldr	r2, [pc, #88]	; (1ec4 <process_ext_irq+0xc8>)
    1e6a:	00db      	lsls	r3, r3, #3
    1e6c:	18d3      	adds	r3, r2, r3
    1e6e:	3304      	adds	r3, #4
    1e70:	681a      	ldr	r2, [r3, #0]
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	429a      	cmp	r2, r3
    1e76:	d20d      	bcs.n	1e94 <process_ext_irq+0x98>
			lower = middle + 1;
    1e78:	230f      	movs	r3, #15
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	220d      	movs	r2, #13
    1e7e:	18ba      	adds	r2, r7, r2
    1e80:	7812      	ldrb	r2, [r2, #0]
    1e82:	3201      	adds	r2, #1
    1e84:	701a      	strb	r2, [r3, #0]
    1e86:	230e      	movs	r3, #14
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	220e      	movs	r2, #14
    1e8c:	18ba      	adds	r2, r7, r2
    1e8e:	7812      	ldrb	r2, [r2, #0]
    1e90:	701a      	strb	r2, [r3, #0]
    1e92:	e00c      	b.n	1eae <process_ext_irq+0xb2>
		} else {
			upper = middle - 1;
    1e94:	230e      	movs	r3, #14
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	220d      	movs	r2, #13
    1e9a:	18ba      	adds	r2, r7, r2
    1e9c:	7812      	ldrb	r2, [r2, #0]
    1e9e:	3a01      	subs	r2, #1
    1ea0:	701a      	strb	r2, [r3, #0]
    1ea2:	230f      	movs	r3, #15
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	220f      	movs	r2, #15
    1ea8:	18ba      	adds	r2, r7, r2
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	701a      	strb	r2, [r3, #0]
	while (upper >= lower) {
    1eae:	230e      	movs	r3, #14
    1eb0:	18fa      	adds	r2, r7, r3
    1eb2:	230f      	movs	r3, #15
    1eb4:	18fb      	adds	r3, r7, r3
    1eb6:	7812      	ldrb	r2, [r2, #0]
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	429a      	cmp	r2, r3
    1ebc:	d2ab      	bcs.n	1e16 <process_ext_irq+0x1a>
		}
	}
}
    1ebe:	46bd      	mov	sp, r7
    1ec0:	b004      	add	sp, #16
    1ec2:	bd80      	pop	{r7, pc}
    1ec4:	20000c30 	.word	0x20000c30

00001ec8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b084      	sub	sp, #16
    1ecc:	af00      	add	r7, sp, #0
    1ece:	60f8      	str	r0, [r7, #12]
    1ed0:	60b9      	str	r1, [r7, #8]
    1ed2:	1dbb      	adds	r3, r7, #6
    1ed4:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d004      	beq.n	1ee6 <io_write+0x1e>
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d001      	beq.n	1ee6 <io_write+0x1e>
    1ee2:	2301      	movs	r3, #1
    1ee4:	e000      	b.n	1ee8 <io_write+0x20>
    1ee6:	2300      	movs	r3, #0
    1ee8:	1c1a      	adds	r2, r3, #0
    1eea:	2301      	movs	r3, #1
    1eec:	4013      	ands	r3, r2
    1eee:	b2db      	uxtb	r3, r3
    1ef0:	4908      	ldr	r1, [pc, #32]	; (1f14 <io_write+0x4c>)
    1ef2:	223e      	movs	r2, #62	; 0x3e
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b08      	ldr	r3, [pc, #32]	; (1f18 <io_write+0x50>)
    1ef8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	1dba      	adds	r2, r7, #6
    1f00:	8812      	ldrh	r2, [r2, #0]
    1f02:	68b9      	ldr	r1, [r7, #8]
    1f04:	68f8      	ldr	r0, [r7, #12]
    1f06:	4798      	blx	r3
    1f08:	0003      	movs	r3, r0
}
    1f0a:	0018      	movs	r0, r3
    1f0c:	46bd      	mov	sp, r7
    1f0e:	b004      	add	sp, #16
    1f10:	bd80      	pop	{r7, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	0001f0f8 	.word	0x0001f0f8
    1f18:	00002379 	.word	0x00002379

00001f1c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b084      	sub	sp, #16
    1f20:	af00      	add	r7, sp, #0
    1f22:	60f8      	str	r0, [r7, #12]
    1f24:	60b9      	str	r1, [r7, #8]
    1f26:	1dbb      	adds	r3, r7, #6
    1f28:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1f2a:	68fb      	ldr	r3, [r7, #12]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d004      	beq.n	1f3a <io_read+0x1e>
    1f30:	68bb      	ldr	r3, [r7, #8]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d001      	beq.n	1f3a <io_read+0x1e>
    1f36:	2301      	movs	r3, #1
    1f38:	e000      	b.n	1f3c <io_read+0x20>
    1f3a:	2300      	movs	r3, #0
    1f3c:	1c1a      	adds	r2, r3, #0
    1f3e:	2301      	movs	r3, #1
    1f40:	4013      	ands	r3, r2
    1f42:	b2db      	uxtb	r3, r3
    1f44:	4908      	ldr	r1, [pc, #32]	; (1f68 <io_read+0x4c>)
    1f46:	2247      	movs	r2, #71	; 0x47
    1f48:	0018      	movs	r0, r3
    1f4a:	4b08      	ldr	r3, [pc, #32]	; (1f6c <io_read+0x50>)
    1f4c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1f4e:	68fb      	ldr	r3, [r7, #12]
    1f50:	685b      	ldr	r3, [r3, #4]
    1f52:	1dba      	adds	r2, r7, #6
    1f54:	8812      	ldrh	r2, [r2, #0]
    1f56:	68b9      	ldr	r1, [r7, #8]
    1f58:	68f8      	ldr	r0, [r7, #12]
    1f5a:	4798      	blx	r3
    1f5c:	0003      	movs	r3, r0
}
    1f5e:	0018      	movs	r0, r3
    1f60:	46bd      	mov	sp, r7
    1f62:	b004      	add	sp, #16
    1f64:	bd80      	pop	{r7, pc}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	0001f0f8 	.word	0x0001f0f8
    1f6c:	00002379 	.word	0x00002379

00001f70 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	b084      	sub	sp, #16
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
    1f78:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    1f7a:	2300      	movs	r3, #0
    1f7c:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d004      	beq.n	1f8e <spi_m_sync_init+0x1e>
    1f84:	683b      	ldr	r3, [r7, #0]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d001      	beq.n	1f8e <spi_m_sync_init+0x1e>
    1f8a:	2301      	movs	r3, #1
    1f8c:	e000      	b.n	1f90 <spi_m_sync_init+0x20>
    1f8e:	2300      	movs	r3, #0
    1f90:	1c1a      	adds	r2, r3, #0
    1f92:	2301      	movs	r3, #1
    1f94:	4013      	ands	r3, r2
    1f96:	b2db      	uxtb	r3, r3
    1f98:	4911      	ldr	r1, [pc, #68]	; (1fe0 <spi_m_sync_init+0x70>)
    1f9a:	2242      	movs	r2, #66	; 0x42
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b11      	ldr	r3, [pc, #68]	; (1fe4 <spi_m_sync_init+0x74>)
    1fa0:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	683a      	ldr	r2, [r7, #0]
    1fa6:	601a      	str	r2, [r3, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	683a      	ldr	r2, [r7, #0]
    1fac:	0011      	movs	r1, r2
    1fae:	0018      	movs	r0, r3
    1fb0:	4b0d      	ldr	r3, [pc, #52]	; (1fe8 <spi_m_sync_init+0x78>)
    1fb2:	4798      	blx	r3
    1fb4:	0003      	movs	r3, r0
    1fb6:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
    1fb8:	68fb      	ldr	r3, [r7, #12]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	da01      	bge.n	1fc2 <spi_m_sync_init+0x52>
		return rc;
    1fbe:	68fb      	ldr	r3, [r7, #12]
    1fc0:	e009      	b.n	1fd6 <spi_m_sync_init+0x66>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	4a09      	ldr	r2, [pc, #36]	; (1fec <spi_m_sync_init+0x7c>)
    1fc6:	821a      	strh	r2, [r3, #16]
	spi->io.read  = _spi_m_sync_io_read;
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	4a09      	ldr	r2, [pc, #36]	; (1ff0 <spi_m_sync_init+0x80>)
    1fcc:	60da      	str	r2, [r3, #12]
	spi->io.write = _spi_m_sync_io_write;
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	4a08      	ldr	r2, [pc, #32]	; (1ff4 <spi_m_sync_init+0x84>)
    1fd2:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1fd4:	2300      	movs	r3, #0
}
    1fd6:	0018      	movs	r0, r3
    1fd8:	46bd      	mov	sp, r7
    1fda:	b004      	add	sp, #16
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	0001f120 	.word	0x0001f120
    1fe4:	00002379 	.word	0x00002379
    1fe8:	00003a91 	.word	0x00003a91
    1fec:	ffff8000 	.word	0xffff8000
    1ff0:	00001ff9 	.word	0x00001ff9
    1ff4:	0000205d 	.word	0x0000205d

00001ff8 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	b088      	sub	sp, #32
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	60f8      	str	r0, [r7, #12]
    2000:	60b9      	str	r1, [r7, #8]
    2002:	1dbb      	adds	r3, r7, #6
    2004:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	1e5a      	subs	r2, r3, #1
    200a:	4193      	sbcs	r3, r2
    200c:	b2db      	uxtb	r3, r3
    200e:	4910      	ldr	r1, [pc, #64]	; (2050 <STACK_SIZE+0x50>)
    2010:	2291      	movs	r2, #145	; 0x91
    2012:	0018      	movs	r0, r3
    2014:	4b0f      	ldr	r3, [pc, #60]	; (2054 <STACK_SIZE+0x54>)
    2016:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	3b08      	subs	r3, #8
    201c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    201e:	2310      	movs	r3, #16
    2020:	18fb      	adds	r3, r7, r3
    2022:	68ba      	ldr	r2, [r7, #8]
    2024:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
    2026:	2310      	movs	r3, #16
    2028:	18fb      	adds	r3, r7, r3
    202a:	2200      	movs	r2, #0
    202c:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    202e:	1dbb      	adds	r3, r7, #6
    2030:	881a      	ldrh	r2, [r3, #0]
    2032:	2310      	movs	r3, #16
    2034:	18fb      	adds	r3, r7, r3
    2036:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    2038:	2310      	movs	r3, #16
    203a:	18fa      	adds	r2, r7, r3
    203c:	69fb      	ldr	r3, [r7, #28]
    203e:	0011      	movs	r1, r2
    2040:	0018      	movs	r0, r3
    2042:	4b05      	ldr	r3, [pc, #20]	; (2058 <STACK_SIZE+0x58>)
    2044:	4798      	blx	r3
    2046:	0003      	movs	r3, r0
}
    2048:	0018      	movs	r0, r3
    204a:	46bd      	mov	sp, r7
    204c:	b008      	add	sp, #32
    204e:	bd80      	pop	{r7, pc}
    2050:	0001f120 	.word	0x0001f120
    2054:	00002379 	.word	0x00002379
    2058:	000020c1 	.word	0x000020c1

0000205c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    205c:	b580      	push	{r7, lr}
    205e:	b088      	sub	sp, #32
    2060:	af00      	add	r7, sp, #0
    2062:	60f8      	str	r0, [r7, #12]
    2064:	60b9      	str	r1, [r7, #8]
    2066:	1dbb      	adds	r3, r7, #6
    2068:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
    206a:	68fb      	ldr	r3, [r7, #12]
    206c:	1e5a      	subs	r2, r3, #1
    206e:	4193      	sbcs	r3, r2
    2070:	b2db      	uxtb	r3, r3
    2072:	4910      	ldr	r1, [pc, #64]	; (20b4 <_spi_m_sync_io_write+0x58>)
    2074:	22ad      	movs	r2, #173	; 0xad
    2076:	0018      	movs	r0, r3
    2078:	4b0f      	ldr	r3, [pc, #60]	; (20b8 <_spi_m_sync_io_write+0x5c>)
    207a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    207c:	68fb      	ldr	r3, [r7, #12]
    207e:	3b08      	subs	r3, #8
    2080:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2082:	2310      	movs	r3, #16
    2084:	18fb      	adds	r3, r7, r3
    2086:	2200      	movs	r2, #0
    2088:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
    208a:	2310      	movs	r3, #16
    208c:	18fb      	adds	r3, r7, r3
    208e:	68ba      	ldr	r2, [r7, #8]
    2090:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
    2092:	1dbb      	adds	r3, r7, #6
    2094:	881a      	ldrh	r2, [r3, #0]
    2096:	2310      	movs	r3, #16
    2098:	18fb      	adds	r3, r7, r3
    209a:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
    209c:	2310      	movs	r3, #16
    209e:	18fa      	adds	r2, r7, r3
    20a0:	69fb      	ldr	r3, [r7, #28]
    20a2:	0011      	movs	r1, r2
    20a4:	0018      	movs	r0, r3
    20a6:	4b05      	ldr	r3, [pc, #20]	; (20bc <_spi_m_sync_io_write+0x60>)
    20a8:	4798      	blx	r3
    20aa:	0003      	movs	r3, r0
}
    20ac:	0018      	movs	r0, r3
    20ae:	46bd      	mov	sp, r7
    20b0:	b008      	add	sp, #32
    20b2:	bd80      	pop	{r7, pc}
    20b4:	0001f120 	.word	0x0001f120
    20b8:	00002379 	.word	0x00002379
    20bc:	000020c1 	.word	0x000020c1

000020c0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b086      	sub	sp, #24
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
    20c8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d004      	beq.n	20da <spi_m_sync_transfer+0x1a>
    20d0:	683b      	ldr	r3, [r7, #0]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d001      	beq.n	20da <spi_m_sync_transfer+0x1a>
    20d6:	2301      	movs	r3, #1
    20d8:	e000      	b.n	20dc <spi_m_sync_transfer+0x1c>
    20da:	2300      	movs	r3, #0
    20dc:	1c1a      	adds	r2, r3, #0
    20de:	2301      	movs	r3, #1
    20e0:	4013      	ands	r3, r2
    20e2:	b2db      	uxtb	r3, r3
    20e4:	490f      	ldr	r1, [pc, #60]	; (2124 <spi_m_sync_transfer+0x64>)
    20e6:	22bd      	movs	r2, #189	; 0xbd
    20e8:	0018      	movs	r0, r3
    20ea:	4b0f      	ldr	r3, [pc, #60]	; (2128 <spi_m_sync_transfer+0x68>)
    20ec:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    20ee:	683b      	ldr	r3, [r7, #0]
    20f0:	681a      	ldr	r2, [r3, #0]
    20f2:	230c      	movs	r3, #12
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
    20f8:	683b      	ldr	r3, [r7, #0]
    20fa:	685a      	ldr	r2, [r3, #4]
    20fc:	230c      	movs	r3, #12
    20fe:	18fb      	adds	r3, r7, r3
    2100:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
    2102:	683b      	ldr	r3, [r7, #0]
    2104:	689a      	ldr	r2, [r3, #8]
    2106:	230c      	movs	r3, #12
    2108:	18fb      	adds	r3, r7, r3
    210a:	609a      	str	r2, [r3, #8]

	return _spi_m_sync_trans(&spi->dev, &msg);
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	220c      	movs	r2, #12
    2110:	18ba      	adds	r2, r7, r2
    2112:	0011      	movs	r1, r2
    2114:	0018      	movs	r0, r3
    2116:	4b05      	ldr	r3, [pc, #20]	; (212c <spi_m_sync_transfer+0x6c>)
    2118:	4798      	blx	r3
    211a:	0003      	movs	r3, r0
}
    211c:	0018      	movs	r0, r3
    211e:	46bd      	mov	sp, r7
    2120:	b006      	add	sp, #24
    2122:	bd80      	pop	{r7, pc}
    2124:	0001f120 	.word	0x0001f120
    2128:	00002379 	.word	0x00002379
    212c:	00003d15 	.word	0x00003d15

00002130 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    2130:	b580      	push	{r7, lr}
    2132:	b086      	sub	sp, #24
    2134:	af00      	add	r7, sp, #0
    2136:	60f8      	str	r0, [r7, #12]
    2138:	60b9      	str	r1, [r7, #8]
    213a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	2b00      	cmp	r3, #0
    2140:	d004      	beq.n	214c <usart_sync_init+0x1c>
    2142:	68bb      	ldr	r3, [r7, #8]
    2144:	2b00      	cmp	r3, #0
    2146:	d001      	beq.n	214c <usart_sync_init+0x1c>
    2148:	2301      	movs	r3, #1
    214a:	e000      	b.n	214e <usart_sync_init+0x1e>
    214c:	2300      	movs	r3, #0
    214e:	1c1a      	adds	r2, r3, #0
    2150:	2301      	movs	r3, #1
    2152:	4013      	ands	r3, r2
    2154:	b2db      	uxtb	r3, r3
    2156:	490f      	ldr	r1, [pc, #60]	; (2194 <usart_sync_init+0x64>)
    2158:	223e      	movs	r2, #62	; 0x3e
    215a:	0018      	movs	r0, r3
    215c:	4b0e      	ldr	r3, [pc, #56]	; (2198 <usart_sync_init+0x68>)
    215e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	3308      	adds	r3, #8
    2164:	68ba      	ldr	r2, [r7, #8]
    2166:	0011      	movs	r1, r2
    2168:	0018      	movs	r0, r3
    216a:	4b0c      	ldr	r3, [pc, #48]	; (219c <usart_sync_init+0x6c>)
    216c:	4798      	blx	r3
    216e:	0003      	movs	r3, r0
    2170:	617b      	str	r3, [r7, #20]
	if (init_status) {
    2172:	697b      	ldr	r3, [r7, #20]
    2174:	2b00      	cmp	r3, #0
    2176:	d001      	beq.n	217c <usart_sync_init+0x4c>
		return init_status;
    2178:	697b      	ldr	r3, [r7, #20]
    217a:	e006      	b.n	218a <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	4a08      	ldr	r2, [pc, #32]	; (21a0 <usart_sync_init+0x70>)
    2180:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    2182:	68fb      	ldr	r3, [r7, #12]
    2184:	4a07      	ldr	r2, [pc, #28]	; (21a4 <usart_sync_init+0x74>)
    2186:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2188:	2300      	movs	r3, #0
}
    218a:	0018      	movs	r0, r3
    218c:	46bd      	mov	sp, r7
    218e:	b006      	add	sp, #24
    2190:	bd80      	pop	{r7, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	0001f150 	.word	0x0001f150
    2198:	00002379 	.word	0x00002379
    219c:	0000345d 	.word	0x0000345d
    21a0:	000022d9 	.word	0x000022d9
    21a4:	00002225 	.word	0x00002225

000021a8 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    21a8:	b580      	push	{r7, lr}
    21aa:	b082      	sub	sp, #8
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	1e5a      	subs	r2, r3, #1
    21b4:	4193      	sbcs	r3, r2
    21b6:	b2db      	uxtb	r3, r3
    21b8:	4907      	ldr	r1, [pc, #28]	; (21d8 <usart_sync_enable+0x30>)
    21ba:	225d      	movs	r2, #93	; 0x5d
    21bc:	0018      	movs	r0, r3
    21be:	4b07      	ldr	r3, [pc, #28]	; (21dc <usart_sync_enable+0x34>)
    21c0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	3308      	adds	r3, #8
    21c6:	0018      	movs	r0, r3
    21c8:	4b05      	ldr	r3, [pc, #20]	; (21e0 <usart_sync_enable+0x38>)
    21ca:	4798      	blx	r3

	return ERR_NONE;
    21cc:	2300      	movs	r3, #0
}
    21ce:	0018      	movs	r0, r3
    21d0:	46bd      	mov	sp, r7
    21d2:	b002      	add	sp, #8
    21d4:	bd80      	pop	{r7, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	0001f150 	.word	0x0001f150
    21dc:	00002379 	.word	0x00002379
    21e0:	0000349d 	.word	0x0000349d

000021e4 <usart_sync_set_baud_rate>:

/**
 * \brief Set usart baud rate
 */
int32_t usart_sync_set_baud_rate(struct usart_sync_descriptor *const descr, const uint32_t baud_rate)
{
    21e4:	b580      	push	{r7, lr}
    21e6:	b082      	sub	sp, #8
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
    21ec:	6039      	str	r1, [r7, #0]
	ASSERT(descr);
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	1e5a      	subs	r2, r3, #1
    21f2:	4193      	sbcs	r3, r2
    21f4:	b2db      	uxtb	r3, r3
    21f6:	4908      	ldr	r1, [pc, #32]	; (2218 <usart_sync_set_baud_rate+0x34>)
    21f8:	228a      	movs	r2, #138	; 0x8a
    21fa:	0018      	movs	r0, r3
    21fc:	4b07      	ldr	r3, [pc, #28]	; (221c <usart_sync_set_baud_rate+0x38>)
    21fe:	4798      	blx	r3
	_usart_sync_set_baud_rate(&descr->device, baud_rate);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	3308      	adds	r3, #8
    2204:	683a      	ldr	r2, [r7, #0]
    2206:	0011      	movs	r1, r2
    2208:	0018      	movs	r0, r3
    220a:	4b05      	ldr	r3, [pc, #20]	; (2220 <usart_sync_set_baud_rate+0x3c>)
    220c:	4798      	blx	r3

	return ERR_NONE;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b002      	add	sp, #8
    2216:	bd80      	pop	{r7, pc}
    2218:	0001f150 	.word	0x0001f150
    221c:	00002379 	.word	0x00002379
    2220:	000034bd 	.word	0x000034bd

00002224 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2224:	b580      	push	{r7, lr}
    2226:	b086      	sub	sp, #24
    2228:	af00      	add	r7, sp, #0
    222a:	60f8      	str	r0, [r7, #12]
    222c:	60b9      	str	r1, [r7, #8]
    222e:	1dbb      	adds	r3, r7, #6
    2230:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    2232:	2300      	movs	r3, #0
    2234:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    2236:	68fb      	ldr	r3, [r7, #12]
    2238:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    223a:	68fb      	ldr	r3, [r7, #12]
    223c:	2b00      	cmp	r3, #0
    223e:	d008      	beq.n	2252 <usart_sync_write+0x2e>
    2240:	68bb      	ldr	r3, [r7, #8]
    2242:	2b00      	cmp	r3, #0
    2244:	d005      	beq.n	2252 <usart_sync_write+0x2e>
    2246:	1dbb      	adds	r3, r7, #6
    2248:	881b      	ldrh	r3, [r3, #0]
    224a:	2b00      	cmp	r3, #0
    224c:	d001      	beq.n	2252 <usart_sync_write+0x2e>
    224e:	2301      	movs	r3, #1
    2250:	e000      	b.n	2254 <usart_sync_write+0x30>
    2252:	2300      	movs	r3, #0
    2254:	1c1a      	adds	r2, r3, #0
    2256:	2301      	movs	r3, #1
    2258:	4013      	ands	r3, r2
    225a:	b2db      	uxtb	r3, r3
    225c:	491a      	ldr	r1, [pc, #104]	; (22c8 <usart_sync_write+0xa4>)
    225e:	22fb      	movs	r2, #251	; 0xfb
    2260:	0018      	movs	r0, r3
    2262:	4b1a      	ldr	r3, [pc, #104]	; (22cc <usart_sync_write+0xa8>)
    2264:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	693b      	ldr	r3, [r7, #16]
    226a:	3308      	adds	r3, #8
    226c:	0018      	movs	r0, r3
    226e:	4b18      	ldr	r3, [pc, #96]	; (22d0 <usart_sync_write+0xac>)
    2270:	4798      	blx	r3
    2272:	0003      	movs	r3, r0
    2274:	001a      	movs	r2, r3
    2276:	2301      	movs	r3, #1
    2278:	4053      	eors	r3, r2
    227a:	b2db      	uxtb	r3, r3
    227c:	2b00      	cmp	r3, #0
    227e:	d1f3      	bne.n	2268 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2280:	693b      	ldr	r3, [r7, #16]
    2282:	3308      	adds	r3, #8
    2284:	0018      	movs	r0, r3
    2286:	68ba      	ldr	r2, [r7, #8]
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	18d3      	adds	r3, r2, r3
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	0019      	movs	r1, r3
    2290:	4b10      	ldr	r3, [pc, #64]	; (22d4 <usart_sync_write+0xb0>)
    2292:	4798      	blx	r3
		while (!_usart_sync_is_byte_sent(&descr->device))
    2294:	46c0      	nop			; (mov r8, r8)
    2296:	693b      	ldr	r3, [r7, #16]
    2298:	3308      	adds	r3, #8
    229a:	0018      	movs	r0, r3
    229c:	4b0c      	ldr	r3, [pc, #48]	; (22d0 <usart_sync_write+0xac>)
    229e:	4798      	blx	r3
    22a0:	0003      	movs	r3, r0
    22a2:	001a      	movs	r2, r3
    22a4:	2301      	movs	r3, #1
    22a6:	4053      	eors	r3, r2
    22a8:	b2db      	uxtb	r3, r3
    22aa:	2b00      	cmp	r3, #0
    22ac:	d1f3      	bne.n	2296 <usart_sync_write+0x72>
			;
	} while (++offset < length);
    22ae:	697b      	ldr	r3, [r7, #20]
    22b0:	3301      	adds	r3, #1
    22b2:	617b      	str	r3, [r7, #20]
    22b4:	1dbb      	adds	r3, r7, #6
    22b6:	881b      	ldrh	r3, [r3, #0]
    22b8:	697a      	ldr	r2, [r7, #20]
    22ba:	429a      	cmp	r2, r3
    22bc:	d3e0      	bcc.n	2280 <usart_sync_write+0x5c>

	return (int32_t)offset;
    22be:	697b      	ldr	r3, [r7, #20]
}
    22c0:	0018      	movs	r0, r3
    22c2:	46bd      	mov	sp, r7
    22c4:	b006      	add	sp, #24
    22c6:	bd80      	pop	{r7, pc}
    22c8:	0001f150 	.word	0x0001f150
    22cc:	00002379 	.word	0x00002379
    22d0:	00003531 	.word	0x00003531
    22d4:	000034e1 	.word	0x000034e1

000022d8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    22d8:	b590      	push	{r4, r7, lr}
    22da:	b087      	sub	sp, #28
    22dc:	af00      	add	r7, sp, #0
    22de:	60f8      	str	r0, [r7, #12]
    22e0:	60b9      	str	r1, [r7, #8]
    22e2:	1dbb      	adds	r3, r7, #6
    22e4:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    22e6:	2300      	movs	r3, #0
    22e8:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    22ea:	68fb      	ldr	r3, [r7, #12]
    22ec:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    22ee:	68fb      	ldr	r3, [r7, #12]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d008      	beq.n	2306 <usart_sync_read+0x2e>
    22f4:	68bb      	ldr	r3, [r7, #8]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d005      	beq.n	2306 <usart_sync_read+0x2e>
    22fa:	1dbb      	adds	r3, r7, #6
    22fc:	881b      	ldrh	r3, [r3, #0]
    22fe:	2b00      	cmp	r3, #0
    2300:	d001      	beq.n	2306 <usart_sync_read+0x2e>
    2302:	2301      	movs	r3, #1
    2304:	e000      	b.n	2308 <usart_sync_read+0x30>
    2306:	2300      	movs	r3, #0
    2308:	1c1a      	adds	r2, r3, #0
    230a:	2301      	movs	r3, #1
    230c:	4013      	ands	r3, r2
    230e:	b2d8      	uxtb	r0, r3
    2310:	2316      	movs	r3, #22
    2312:	33ff      	adds	r3, #255	; 0xff
    2314:	001a      	movs	r2, r3
    2316:	4b14      	ldr	r3, [pc, #80]	; (2368 <usart_sync_read+0x90>)
    2318:	0019      	movs	r1, r3
    231a:	4b14      	ldr	r3, [pc, #80]	; (236c <usart_sync_read+0x94>)
    231c:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	693b      	ldr	r3, [r7, #16]
    2322:	3308      	adds	r3, #8
    2324:	0018      	movs	r0, r3
    2326:	4b12      	ldr	r3, [pc, #72]	; (2370 <usart_sync_read+0x98>)
    2328:	4798      	blx	r3
    232a:	0003      	movs	r3, r0
    232c:	001a      	movs	r2, r3
    232e:	2301      	movs	r3, #1
    2330:	4053      	eors	r3, r2
    2332:	b2db      	uxtb	r3, r3
    2334:	2b00      	cmp	r3, #0
    2336:	d1f3      	bne.n	2320 <usart_sync_read+0x48>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2338:	68ba      	ldr	r2, [r7, #8]
    233a:	697b      	ldr	r3, [r7, #20]
    233c:	18d4      	adds	r4, r2, r3
    233e:	693b      	ldr	r3, [r7, #16]
    2340:	3308      	adds	r3, #8
    2342:	0018      	movs	r0, r3
    2344:	4b0b      	ldr	r3, [pc, #44]	; (2374 <usart_sync_read+0x9c>)
    2346:	4798      	blx	r3
    2348:	0003      	movs	r3, r0
    234a:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    234c:	697b      	ldr	r3, [r7, #20]
    234e:	3301      	adds	r3, #1
    2350:	617b      	str	r3, [r7, #20]
    2352:	1dbb      	adds	r3, r7, #6
    2354:	881b      	ldrh	r3, [r3, #0]
    2356:	697a      	ldr	r2, [r7, #20]
    2358:	429a      	cmp	r2, r3
    235a:	d3e0      	bcc.n	231e <usart_sync_read+0x46>

	return (int32_t)offset;
    235c:	697b      	ldr	r3, [r7, #20]
}
    235e:	0018      	movs	r0, r3
    2360:	46bd      	mov	sp, r7
    2362:	b007      	add	sp, #28
    2364:	bd90      	pop	{r4, r7, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	0001f150 	.word	0x0001f150
    236c:	00002379 	.word	0x00002379
    2370:	00003551 	.word	0x00003551
    2374:	0000350d 	.word	0x0000350d

00002378 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2378:	b580      	push	{r7, lr}
    237a:	b084      	sub	sp, #16
    237c:	af00      	add	r7, sp, #0
    237e:	60b9      	str	r1, [r7, #8]
    2380:	607a      	str	r2, [r7, #4]
    2382:	230f      	movs	r3, #15
    2384:	18fb      	adds	r3, r7, r3
    2386:	1c02      	adds	r2, r0, #0
    2388:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    238a:	230f      	movs	r3, #15
    238c:	18fb      	adds	r3, r7, r3
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	2201      	movs	r2, #1
    2392:	4053      	eors	r3, r2
    2394:	b2db      	uxtb	r3, r3
    2396:	2b00      	cmp	r3, #0
    2398:	d000      	beq.n	239c <assert+0x24>
		__asm("BKPT #0");
    239a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    239c:	46c0      	nop			; (mov r8, r8)
    239e:	46bd      	mov	sp, r7
    23a0:	b004      	add	sp, #16
    23a2:	bd80      	pop	{r7, pc}

000023a4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	b084      	sub	sp, #16
    23a8:	af00      	add	r7, sp, #0
    23aa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    23ac:	4b0a      	ldr	r3, [pc, #40]	; (23d8 <_sbrk+0x34>)
    23ae:	681b      	ldr	r3, [r3, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d102      	bne.n	23ba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    23b4:	4b08      	ldr	r3, [pc, #32]	; (23d8 <_sbrk+0x34>)
    23b6:	4a09      	ldr	r2, [pc, #36]	; (23dc <_sbrk+0x38>)
    23b8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    23ba:	4b07      	ldr	r3, [pc, #28]	; (23d8 <_sbrk+0x34>)
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	60fb      	str	r3, [r7, #12]

	heap += incr;
    23c0:	4b05      	ldr	r3, [pc, #20]	; (23d8 <_sbrk+0x34>)
    23c2:	681a      	ldr	r2, [r3, #0]
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	18d2      	adds	r2, r2, r3
    23c8:	4b03      	ldr	r3, [pc, #12]	; (23d8 <_sbrk+0x34>)
    23ca:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
    23cc:	68fb      	ldr	r3, [r7, #12]
}
    23ce:	0018      	movs	r0, r3
    23d0:	46bd      	mov	sp, r7
    23d2:	b004      	add	sp, #16
    23d4:	bd80      	pop	{r7, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	20000c60 	.word	0x20000c60
    23dc:	20003d20 	.word	0x20003d20

000023e0 <_close>:

/**
 * \brief Replacement of C library of _close
 */
extern int _close(int file)
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
    23e8:	2301      	movs	r3, #1
    23ea:	425b      	negs	r3, r3
}
    23ec:	0018      	movs	r0, r3
    23ee:	46bd      	mov	sp, r7
    23f0:	b002      	add	sp, #8
    23f2:	bd80      	pop	{r7, pc}

000023f4 <_fstat>:

/**
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b082      	sub	sp, #8
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
    23fc:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
    23fe:	683b      	ldr	r3, [r7, #0]
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	0192      	lsls	r2, r2, #6
    2404:	605a      	str	r2, [r3, #4]

	return 0;
    2406:	2300      	movs	r3, #0
}
    2408:	0018      	movs	r0, r3
    240a:	46bd      	mov	sp, r7
    240c:	b002      	add	sp, #8
    240e:	bd80      	pop	{r7, pc}

00002410 <_isatty>:

/**
 * \brief Replacement of C library of _isatty
 */
extern int _isatty(int file)
{
    2410:	b580      	push	{r7, lr}
    2412:	b082      	sub	sp, #8
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
    2418:	2301      	movs	r3, #1
}
    241a:	0018      	movs	r0, r3
    241c:	46bd      	mov	sp, r7
    241e:	b002      	add	sp, #8
    2420:	bd80      	pop	{r7, pc}

00002422 <_lseek>:

/**
 * \brief Replacement of C library of _lseek
 */
extern int _lseek(int file, int ptr, int dir)
{
    2422:	b580      	push	{r7, lr}
    2424:	b084      	sub	sp, #16
    2426:	af00      	add	r7, sp, #0
    2428:	60f8      	str	r0, [r7, #12]
    242a:	60b9      	str	r1, [r7, #8]
    242c:	607a      	str	r2, [r7, #4]
	(void)file, (void)ptr, (void)dir;
	return 0;
    242e:	2300      	movs	r3, #0
}
    2430:	0018      	movs	r0, r3
    2432:	46bd      	mov	sp, r7
    2434:	b004      	add	sp, #16
    2436:	bd80      	pop	{r7, pc}

00002438 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2438:	b590      	push	{r4, r7, lr}
    243a:	b083      	sub	sp, #12
    243c:	af00      	add	r7, sp, #0
    243e:	6039      	str	r1, [r7, #0]
    2440:	0011      	movs	r1, r2
    2442:	1dbb      	adds	r3, r7, #6
    2444:	1c02      	adds	r2, r0, #0
    2446:	801a      	strh	r2, [r3, #0]
    2448:	1d7b      	adds	r3, r7, #5
    244a:	1c0a      	adds	r2, r1, #0
    244c:	701a      	strb	r2, [r3, #0]
	switch (power) {
    244e:	1d7b      	adds	r3, r7, #5
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	3b04      	subs	r3, #4
    2454:	2b04      	cmp	r3, #4
    2456:	d859      	bhi.n	250c <_get_cycles_for_us_internal+0xd4>
    2458:	009a      	lsls	r2, r3, #2
    245a:	4b34      	ldr	r3, [pc, #208]	; (252c <_get_cycles_for_us_internal+0xf4>)
    245c:	18d3      	adds	r3, r2, r3
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2462:	1dbb      	adds	r3, r7, #6
    2464:	881c      	ldrh	r4, [r3, #0]
    2466:	683a      	ldr	r2, [r7, #0]
    2468:	4b31      	ldr	r3, [pc, #196]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    246a:	4932      	ldr	r1, [pc, #200]	; (2534 <_get_cycles_for_us_internal+0xfc>)
    246c:	0010      	movs	r0, r2
    246e:	4798      	blx	r3
    2470:	0003      	movs	r3, r0
    2472:	4363      	muls	r3, r4
    2474:	1e5a      	subs	r2, r3, #1
    2476:	4b2e      	ldr	r3, [pc, #184]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    2478:	210a      	movs	r1, #10
    247a:	0010      	movs	r0, r2
    247c:	4798      	blx	r3
    247e:	0003      	movs	r3, r0
    2480:	3301      	adds	r3, #1
    2482:	e04e      	b.n	2522 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2484:	1dbb      	adds	r3, r7, #6
    2486:	881c      	ldrh	r4, [r3, #0]
    2488:	683a      	ldr	r2, [r7, #0]
    248a:	4b29      	ldr	r3, [pc, #164]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    248c:	492a      	ldr	r1, [pc, #168]	; (2538 <_get_cycles_for_us_internal+0x100>)
    248e:	0010      	movs	r0, r2
    2490:	4798      	blx	r3
    2492:	0003      	movs	r3, r0
    2494:	4363      	muls	r3, r4
    2496:	1e5a      	subs	r2, r3, #1
    2498:	4b25      	ldr	r3, [pc, #148]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    249a:	2164      	movs	r1, #100	; 0x64
    249c:	0010      	movs	r0, r2
    249e:	4798      	blx	r3
    24a0:	0003      	movs	r3, r0
    24a2:	3301      	adds	r3, #1
    24a4:	e03d      	b.n	2522 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    24a6:	1dbb      	adds	r3, r7, #6
    24a8:	881c      	ldrh	r4, [r3, #0]
    24aa:	6838      	ldr	r0, [r7, #0]
    24ac:	4b20      	ldr	r3, [pc, #128]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    24ae:	22fa      	movs	r2, #250	; 0xfa
    24b0:	0091      	lsls	r1, r2, #2
    24b2:	4798      	blx	r3
    24b4:	0003      	movs	r3, r0
    24b6:	4363      	muls	r3, r4
    24b8:	1e58      	subs	r0, r3, #1
    24ba:	4b1d      	ldr	r3, [pc, #116]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    24bc:	22fa      	movs	r2, #250	; 0xfa
    24be:	0091      	lsls	r1, r2, #2
    24c0:	4798      	blx	r3
    24c2:	0003      	movs	r3, r0
    24c4:	3301      	adds	r3, #1
    24c6:	e02c      	b.n	2522 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    24c8:	1dbb      	adds	r3, r7, #6
    24ca:	881c      	ldrh	r4, [r3, #0]
    24cc:	683a      	ldr	r2, [r7, #0]
    24ce:	4b18      	ldr	r3, [pc, #96]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    24d0:	2164      	movs	r1, #100	; 0x64
    24d2:	0010      	movs	r0, r2
    24d4:	4798      	blx	r3
    24d6:	0003      	movs	r3, r0
    24d8:	4363      	muls	r3, r4
    24da:	1e5a      	subs	r2, r3, #1
    24dc:	4b14      	ldr	r3, [pc, #80]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    24de:	4916      	ldr	r1, [pc, #88]	; (2538 <_get_cycles_for_us_internal+0x100>)
    24e0:	0010      	movs	r0, r2
    24e2:	4798      	blx	r3
    24e4:	0003      	movs	r3, r0
    24e6:	3301      	adds	r3, #1
    24e8:	e01b      	b.n	2522 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    24ea:	1dbb      	adds	r3, r7, #6
    24ec:	881c      	ldrh	r4, [r3, #0]
    24ee:	683a      	ldr	r2, [r7, #0]
    24f0:	4b0f      	ldr	r3, [pc, #60]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    24f2:	210a      	movs	r1, #10
    24f4:	0010      	movs	r0, r2
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
    24fa:	4363      	muls	r3, r4
    24fc:	1e5a      	subs	r2, r3, #1
    24fe:	4b0c      	ldr	r3, [pc, #48]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    2500:	490c      	ldr	r1, [pc, #48]	; (2534 <_get_cycles_for_us_internal+0xfc>)
    2502:	0010      	movs	r0, r2
    2504:	4798      	blx	r3
    2506:	0003      	movs	r3, r0
    2508:	3301      	adds	r3, #1
    250a:	e00a      	b.n	2522 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    250c:	1dbb      	adds	r3, r7, #6
    250e:	881b      	ldrh	r3, [r3, #0]
    2510:	683a      	ldr	r2, [r7, #0]
    2512:	4353      	muls	r3, r2
    2514:	1e5a      	subs	r2, r3, #1
    2516:	4b06      	ldr	r3, [pc, #24]	; (2530 <_get_cycles_for_us_internal+0xf8>)
    2518:	4908      	ldr	r1, [pc, #32]	; (253c <_get_cycles_for_us_internal+0x104>)
    251a:	0010      	movs	r0, r2
    251c:	4798      	blx	r3
    251e:	0003      	movs	r3, r0
    2520:	3301      	adds	r3, #1
	}
}
    2522:	0018      	movs	r0, r3
    2524:	46bd      	mov	sp, r7
    2526:	b003      	add	sp, #12
    2528:	bd90      	pop	{r4, r7, pc}
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	0001f1b4 	.word	0x0001f1b4
    2530:	00017655 	.word	0x00017655
    2534:	000186a0 	.word	0x000186a0
    2538:	00002710 	.word	0x00002710
    253c:	000f4240 	.word	0x000f4240

00002540 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2540:	b590      	push	{r4, r7, lr}
    2542:	b083      	sub	sp, #12
    2544:	af00      	add	r7, sp, #0
    2546:	6039      	str	r1, [r7, #0]
    2548:	0011      	movs	r1, r2
    254a:	1dbb      	adds	r3, r7, #6
    254c:	1c02      	adds	r2, r0, #0
    254e:	801a      	strh	r2, [r3, #0]
    2550:	1d7b      	adds	r3, r7, #5
    2552:	1c0a      	adds	r2, r1, #0
    2554:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2556:	1d7b      	adds	r3, r7, #5
    2558:	781b      	ldrb	r3, [r3, #0]
    255a:	3b04      	subs	r3, #4
    255c:	2b04      	cmp	r3, #4
    255e:	d84b      	bhi.n	25f8 <_get_cycles_for_ms_internal+0xb8>
    2560:	009a      	lsls	r2, r3, #2
    2562:	4b2d      	ldr	r3, [pc, #180]	; (2618 <_get_cycles_for_ms_internal+0xd8>)
    2564:	18d3      	adds	r3, r2, r3
    2566:	681b      	ldr	r3, [r3, #0]
    2568:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    256a:	1dbb      	adds	r3, r7, #6
    256c:	881c      	ldrh	r4, [r3, #0]
    256e:	683a      	ldr	r2, [r7, #0]
    2570:	4b2a      	ldr	r3, [pc, #168]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    2572:	492b      	ldr	r1, [pc, #172]	; (2620 <_get_cycles_for_ms_internal+0xe0>)
    2574:	0010      	movs	r0, r2
    2576:	4798      	blx	r3
    2578:	0003      	movs	r3, r0
    257a:	4363      	muls	r3, r4
    257c:	2264      	movs	r2, #100	; 0x64
    257e:	4353      	muls	r3, r2
    2580:	e045      	b.n	260e <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    2582:	1dbb      	adds	r3, r7, #6
    2584:	881c      	ldrh	r4, [r3, #0]
    2586:	683a      	ldr	r2, [r7, #0]
    2588:	4b24      	ldr	r3, [pc, #144]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    258a:	4926      	ldr	r1, [pc, #152]	; (2624 <_get_cycles_for_ms_internal+0xe4>)
    258c:	0010      	movs	r0, r2
    258e:	4798      	blx	r3
    2590:	0003      	movs	r3, r0
    2592:	4363      	muls	r3, r4
    2594:	001a      	movs	r2, r3
    2596:	0013      	movs	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	189b      	adds	r3, r3, r2
    259c:	005b      	lsls	r3, r3, #1
    259e:	e036      	b.n	260e <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    25a0:	1dbb      	adds	r3, r7, #6
    25a2:	881c      	ldrh	r4, [r3, #0]
    25a4:	6838      	ldr	r0, [r7, #0]
    25a6:	4b1d      	ldr	r3, [pc, #116]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    25a8:	22fa      	movs	r2, #250	; 0xfa
    25aa:	0091      	lsls	r1, r2, #2
    25ac:	4798      	blx	r3
    25ae:	0003      	movs	r3, r0
    25b0:	4363      	muls	r3, r4
    25b2:	e02c      	b.n	260e <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    25b4:	1dbb      	adds	r3, r7, #6
    25b6:	881c      	ldrh	r4, [r3, #0]
    25b8:	683a      	ldr	r2, [r7, #0]
    25ba:	4b18      	ldr	r3, [pc, #96]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    25bc:	2164      	movs	r1, #100	; 0x64
    25be:	0010      	movs	r0, r2
    25c0:	4798      	blx	r3
    25c2:	0003      	movs	r3, r0
    25c4:	4363      	muls	r3, r4
    25c6:	1e5a      	subs	r2, r3, #1
    25c8:	4b14      	ldr	r3, [pc, #80]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    25ca:	210a      	movs	r1, #10
    25cc:	0010      	movs	r0, r2
    25ce:	4798      	blx	r3
    25d0:	0003      	movs	r3, r0
    25d2:	3301      	adds	r3, #1
    25d4:	e01b      	b.n	260e <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    25d6:	1dbb      	adds	r3, r7, #6
    25d8:	881c      	ldrh	r4, [r3, #0]
    25da:	683a      	ldr	r2, [r7, #0]
    25dc:	4b0f      	ldr	r3, [pc, #60]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    25de:	210a      	movs	r1, #10
    25e0:	0010      	movs	r0, r2
    25e2:	4798      	blx	r3
    25e4:	0003      	movs	r3, r0
    25e6:	4363      	muls	r3, r4
    25e8:	1e5a      	subs	r2, r3, #1
    25ea:	4b0c      	ldr	r3, [pc, #48]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    25ec:	2164      	movs	r1, #100	; 0x64
    25ee:	0010      	movs	r0, r2
    25f0:	4798      	blx	r3
    25f2:	0003      	movs	r3, r0
    25f4:	3301      	adds	r3, #1
    25f6:	e00a      	b.n	260e <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    25f8:	1dbb      	adds	r3, r7, #6
    25fa:	881b      	ldrh	r3, [r3, #0]
    25fc:	683a      	ldr	r2, [r7, #0]
    25fe:	4353      	muls	r3, r2
    2600:	1e58      	subs	r0, r3, #1
    2602:	4b06      	ldr	r3, [pc, #24]	; (261c <_get_cycles_for_ms_internal+0xdc>)
    2604:	22fa      	movs	r2, #250	; 0xfa
    2606:	0091      	lsls	r1, r2, #2
    2608:	4798      	blx	r3
    260a:	0003      	movs	r3, r0
    260c:	3301      	adds	r3, #1
	}
}
    260e:	0018      	movs	r0, r3
    2610:	46bd      	mov	sp, r7
    2612:	b003      	add	sp, #12
    2614:	bd90      	pop	{r4, r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	0001f1c8 	.word	0x0001f1c8
    261c:	00017655 	.word	0x00017655
    2620:	000186a0 	.word	0x000186a0
    2624:	00002710 	.word	0x00002710

00002628 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	0002      	movs	r2, r0
    2630:	1dbb      	adds	r3, r7, #6
    2632:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2634:	4905      	ldr	r1, [pc, #20]	; (264c <_get_cycles_for_ms+0x24>)
    2636:	1dbb      	adds	r3, r7, #6
    2638:	881b      	ldrh	r3, [r3, #0]
    263a:	2208      	movs	r2, #8
    263c:	0018      	movs	r0, r3
    263e:	4b04      	ldr	r3, [pc, #16]	; (2650 <_get_cycles_for_ms+0x28>)
    2640:	4798      	blx	r3
    2642:	0003      	movs	r3, r0
}
    2644:	0018      	movs	r0, r3
    2646:	46bd      	mov	sp, r7
    2648:	b002      	add	sp, #8
    264a:	bd80      	pop	{r7, pc}
    264c:	00f42400 	.word	0x00f42400
    2650:	00002541 	.word	0x00002541

00002654 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	6078      	str	r0, [r7, #4]
    265c:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	685a      	ldr	r2, [r3, #4]
    2662:	683b      	ldr	r3, [r7, #0]
    2664:	005b      	lsls	r3, r3, #1
    2666:	211e      	movs	r1, #30
    2668:	400b      	ands	r3, r1
    266a:	431a      	orrs	r2, r3
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2670:	46c0      	nop			; (mov r8, r8)
    2672:	46bd      	mov	sp, r7
    2674:	b002      	add	sp, #8
    2676:	bd80      	pop	{r7, pc}

00002678 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2678:	b580      	push	{r7, lr}
    267a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    267c:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <_init_chip+0x30>)
    267e:	2100      	movs	r1, #0
    2680:	0018      	movs	r0, r3
    2682:	4b0a      	ldr	r3, [pc, #40]	; (26ac <_init_chip+0x34>)
    2684:	4798      	blx	r3

	_set_performance_level(2);
    2686:	2002      	movs	r0, #2
    2688:	4b09      	ldr	r3, [pc, #36]	; (26b0 <_init_chip+0x38>)
    268a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    268c:	4b09      	ldr	r3, [pc, #36]	; (26b4 <_init_chip+0x3c>)
    268e:	4798      	blx	r3
	_oscctrl_init_sources();
    2690:	4b09      	ldr	r3, [pc, #36]	; (26b8 <_init_chip+0x40>)
    2692:	4798      	blx	r3
	_mclk_init();
    2694:	4b09      	ldr	r3, [pc, #36]	; (26bc <_init_chip+0x44>)
    2696:	4798      	blx	r3
	_gclk_init_generators();
    2698:	4b09      	ldr	r3, [pc, #36]	; (26c0 <_init_chip+0x48>)
    269a:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
    269c:	4b09      	ldr	r3, [pc, #36]	; (26c4 <_init_chip+0x4c>)
    269e:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    26a0:	46c0      	nop			; (mov r8, r8)
    26a2:	46bd      	mov	sp, r7
    26a4:	bd80      	pop	{r7, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	41004000 	.word	0x41004000
    26ac:	00002655 	.word	0x00002655
    26b0:	00002fed 	.word	0x00002fed
    26b4:	00002e11 	.word	0x00002e11
    26b8:	00002ec5 	.word	0x00002ec5
    26bc:	00002d81 	.word	0x00002d81
    26c0:	00002ca5 	.word	0x00002ca5
    26c4:	00002f11 	.word	0x00002f11

000026c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b082      	sub	sp, #8
    26cc:	af00      	add	r7, sp, #0
    26ce:	0002      	movs	r2, r0
    26d0:	1dfb      	adds	r3, r7, #7
    26d2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    26d4:	4b06      	ldr	r3, [pc, #24]	; (26f0 <NVIC_EnableIRQ+0x28>)
    26d6:	1dfa      	adds	r2, r7, #7
    26d8:	7812      	ldrb	r2, [r2, #0]
    26da:	0011      	movs	r1, r2
    26dc:	221f      	movs	r2, #31
    26de:	400a      	ands	r2, r1
    26e0:	2101      	movs	r1, #1
    26e2:	4091      	lsls	r1, r2
    26e4:	000a      	movs	r2, r1
    26e6:	601a      	str	r2, [r3, #0]
}
    26e8:	46c0      	nop			; (mov r8, r8)
    26ea:	46bd      	mov	sp, r7
    26ec:	b002      	add	sp, #8
    26ee:	bd80      	pop	{r7, pc}
    26f0:	e000e100 	.word	0xe000e100

000026f4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
    26fa:	0002      	movs	r2, r0
    26fc:	1dfb      	adds	r3, r7, #7
    26fe:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2700:	4a07      	ldr	r2, [pc, #28]	; (2720 <NVIC_DisableIRQ+0x2c>)
    2702:	1dfb      	adds	r3, r7, #7
    2704:	781b      	ldrb	r3, [r3, #0]
    2706:	0019      	movs	r1, r3
    2708:	231f      	movs	r3, #31
    270a:	400b      	ands	r3, r1
    270c:	2101      	movs	r1, #1
    270e:	4099      	lsls	r1, r3
    2710:	000b      	movs	r3, r1
    2712:	0019      	movs	r1, r3
    2714:	2380      	movs	r3, #128	; 0x80
    2716:	50d1      	str	r1, [r2, r3]
}
    2718:	46c0      	nop			; (mov r8, r8)
    271a:	46bd      	mov	sp, r7
    271c:	b002      	add	sp, #8
    271e:	bd80      	pop	{r7, pc}
    2720:	e000e100 	.word	0xe000e100

00002724 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2724:	b580      	push	{r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
    272a:	0002      	movs	r2, r0
    272c:	1dfb      	adds	r3, r7, #7
    272e:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2730:	4a08      	ldr	r2, [pc, #32]	; (2754 <NVIC_ClearPendingIRQ+0x30>)
    2732:	1dfb      	adds	r3, r7, #7
    2734:	781b      	ldrb	r3, [r3, #0]
    2736:	0019      	movs	r1, r3
    2738:	231f      	movs	r3, #31
    273a:	400b      	ands	r3, r1
    273c:	2101      	movs	r1, #1
    273e:	4099      	lsls	r1, r3
    2740:	000b      	movs	r3, r1
    2742:	0019      	movs	r1, r3
    2744:	23c0      	movs	r3, #192	; 0xc0
    2746:	005b      	lsls	r3, r3, #1
    2748:	50d1      	str	r1, [r2, r3]
}
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	46bd      	mov	sp, r7
    274e:	b002      	add	sp, #8
    2750:	bd80      	pop	{r7, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	e000e100 	.word	0xe000e100

00002758 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    2758:	b580      	push	{r7, lr}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	685b      	ldr	r3, [r3, #4]
    2768:	683a      	ldr	r2, [r7, #0]
    276a:	4013      	ands	r3, r2
    276c:	d1fa      	bne.n	2764 <hri_eic_wait_for_sync+0xc>
	};
}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	46bd      	mov	sp, r7
    2772:	b002      	add	sp, #8
    2774:	bd80      	pop	{r7, pc}

00002776 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    2776:	b580      	push	{r7, lr}
    2778:	b082      	sub	sp, #8
    277a:	af00      	add	r7, sp, #0
    277c:	6078      	str	r0, [r7, #4]
    277e:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	683a      	ldr	r2, [r7, #0]
    2784:	611a      	str	r2, [r3, #16]
}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	46bd      	mov	sp, r7
    278a:	b002      	add	sp, #8
    278c:	bd80      	pop	{r7, pc}

0000278e <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    278e:	b580      	push	{r7, lr}
    2790:	b082      	sub	sp, #8
    2792:	af00      	add	r7, sp, #0
    2794:	6078      	str	r0, [r7, #4]
    2796:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	683a      	ldr	r2, [r7, #0]
    279c:	60da      	str	r2, [r3, #12]
}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	46bd      	mov	sp, r7
    27a2:	b002      	add	sp, #8
    27a4:	bd80      	pop	{r7, pc}

000027a6 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    27a6:	b580      	push	{r7, lr}
    27a8:	b082      	sub	sp, #8
    27aa:	af00      	add	r7, sp, #0
    27ac:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	695b      	ldr	r3, [r3, #20]
}
    27b2:	0018      	movs	r0, r3
    27b4:	46bd      	mov	sp, r7
    27b6:	b002      	add	sp, #8
    27b8:	bd80      	pop	{r7, pc}

000027ba <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    27ba:	b580      	push	{r7, lr}
    27bc:	b082      	sub	sp, #8
    27be:	af00      	add	r7, sp, #0
    27c0:	6078      	str	r0, [r7, #4]
    27c2:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	683a      	ldr	r2, [r7, #0]
    27c8:	615a      	str	r2, [r3, #20]
}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46bd      	mov	sp, r7
    27ce:	b002      	add	sp, #8
    27d0:	bd80      	pop	{r7, pc}
	...

000027d4 <hri_eic_set_CTRLA_SWRST_bit>:

static inline void hri_eic_set_CTRLA_SWRST_bit(const void *const hw)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b082      	sub	sp, #8
    27d8:	af00      	add	r7, sp, #0
    27da:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST);
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	2101      	movs	r1, #1
    27e0:	0018      	movs	r0, r3
    27e2:	4b07      	ldr	r3, [pc, #28]	; (2800 <hri_eic_set_CTRLA_SWRST_bit+0x2c>)
    27e4:	4798      	blx	r3
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	b2db      	uxtb	r3, r3
    27ec:	2201      	movs	r2, #1
    27ee:	4313      	orrs	r3, r2
    27f0:	b2da      	uxtb	r2, r3
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	46bd      	mov	sp, r7
    27fa:	b002      	add	sp, #8
    27fc:	bd80      	pop	{r7, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00002759 	.word	0x00002759

00002804 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2804:	b580      	push	{r7, lr}
    2806:	b082      	sub	sp, #8
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	2103      	movs	r1, #3
    2810:	0018      	movs	r0, r3
    2812:	4b07      	ldr	r3, [pc, #28]	; (2830 <hri_eic_set_CTRLA_ENABLE_bit+0x2c>)
    2814:	4798      	blx	r3
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	781b      	ldrb	r3, [r3, #0]
    281a:	b2db      	uxtb	r3, r3
    281c:	2202      	movs	r2, #2
    281e:	4313      	orrs	r3, r2
    2820:	b2da      	uxtb	r2, r3
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	46bd      	mov	sp, r7
    282a:	b002      	add	sp, #8
    282c:	bd80      	pop	{r7, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	00002759 	.word	0x00002759

00002834 <hri_eic_get_CTRLA_ENABLE_bit>:

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2834:	b580      	push	{r7, lr}
    2836:	b084      	sub	sp, #16
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	2103      	movs	r1, #3
    2840:	0018      	movs	r0, r3
    2842:	4b0d      	ldr	r3, [pc, #52]	; (2878 <hri_eic_get_CTRLA_ENABLE_bit+0x44>)
    2844:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    2846:	230f      	movs	r3, #15
    2848:	18fb      	adds	r3, r7, r3
    284a:	687a      	ldr	r2, [r7, #4]
    284c:	7812      	ldrb	r2, [r2, #0]
    284e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & EIC_CTRLA_ENABLE) >> EIC_CTRLA_ENABLE_Pos;
    2850:	230f      	movs	r3, #15
    2852:	18fb      	adds	r3, r7, r3
    2854:	781b      	ldrb	r3, [r3, #0]
    2856:	085b      	lsrs	r3, r3, #1
    2858:	b2da      	uxtb	r2, r3
    285a:	230f      	movs	r3, #15
    285c:	18fb      	adds	r3, r7, r3
    285e:	2101      	movs	r1, #1
    2860:	400a      	ands	r2, r1
    2862:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    2864:	230f      	movs	r3, #15
    2866:	18fb      	adds	r3, r7, r3
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	1e5a      	subs	r2, r3, #1
    286c:	4193      	sbcs	r3, r2
    286e:	b2db      	uxtb	r3, r3
}
    2870:	0018      	movs	r0, r3
    2872:	46bd      	mov	sp, r7
    2874:	b004      	add	sp, #16
    2876:	bd80      	pop	{r7, pc}
    2878:	00002759 	.word	0x00002759

0000287c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    287c:	b580      	push	{r7, lr}
    287e:	b084      	sub	sp, #16
    2880:	af00      	add	r7, sp, #0
    2882:	6078      	str	r0, [r7, #4]
    2884:	000a      	movs	r2, r1
    2886:	1cfb      	adds	r3, r7, #3
    2888:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	2103      	movs	r1, #3
    288e:	0018      	movs	r0, r3
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <hri_eic_write_CTRLA_CKSEL_bit+0x60>)
    2892:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    2894:	230f      	movs	r3, #15
    2896:	18fb      	adds	r3, r7, r3
    2898:	687a      	ldr	r2, [r7, #4]
    289a:	7812      	ldrb	r2, [r2, #0]
    289c:	701a      	strb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    289e:	230f      	movs	r3, #15
    28a0:	18fb      	adds	r3, r7, r3
    28a2:	220f      	movs	r2, #15
    28a4:	18ba      	adds	r2, r7, r2
    28a6:	7812      	ldrb	r2, [r2, #0]
    28a8:	2110      	movs	r1, #16
    28aa:	438a      	bics	r2, r1
    28ac:	701a      	strb	r2, [r3, #0]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    28ae:	1cfb      	adds	r3, r7, #3
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	011b      	lsls	r3, r3, #4
    28b4:	b25a      	sxtb	r2, r3
    28b6:	230f      	movs	r3, #15
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	b25b      	sxtb	r3, r3
    28be:	4313      	orrs	r3, r2
    28c0:	b25a      	sxtb	r2, r3
    28c2:	230f      	movs	r3, #15
    28c4:	18fb      	adds	r3, r7, r3
    28c6:	701a      	strb	r2, [r3, #0]
	((Eic *)hw)->CTRLA.reg = tmp;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	220f      	movs	r2, #15
    28cc:	18ba      	adds	r2, r7, r2
    28ce:	7812      	ldrb	r2, [r2, #0]
    28d0:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	46bd      	mov	sp, r7
    28d6:	b004      	add	sp, #16
    28d8:	bd80      	pop	{r7, pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	00002759 	.word	0x00002759

000028e0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	b082      	sub	sp, #8
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
    28e8:	000a      	movs	r2, r1
    28ea:	1cfb      	adds	r3, r7, #3
    28ec:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	1cfa      	adds	r2, r7, #3
    28f2:	7812      	ldrb	r2, [r2, #0]
    28f4:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	46bd      	mov	sp, r7
    28fa:	b002      	add	sp, #8
    28fc:	bd80      	pop	{r7, pc}

000028fe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    28fe:	b580      	push	{r7, lr}
    2900:	b082      	sub	sp, #8
    2902:	af00      	add	r7, sp, #0
    2904:	6078      	str	r0, [r7, #4]
    2906:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	683a      	ldr	r2, [r7, #0]
    290c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	46bd      	mov	sp, r7
    2912:	b002      	add	sp, #8
    2914:	bd80      	pop	{r7, pc}

00002916 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    2916:	b580      	push	{r7, lr}
    2918:	b084      	sub	sp, #16
    291a:	af00      	add	r7, sp, #0
    291c:	60f8      	str	r0, [r7, #12]
    291e:	607a      	str	r2, [r7, #4]
    2920:	230b      	movs	r3, #11
    2922:	18fb      	adds	r3, r7, r3
    2924:	1c0a      	adds	r2, r1, #0
    2926:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2928:	230b      	movs	r3, #11
    292a:	18fb      	adds	r3, r7, r3
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	3306      	adds	r3, #6
    2932:	009b      	lsls	r3, r3, #2
    2934:	18d3      	adds	r3, r2, r3
    2936:	3304      	adds	r3, #4
    2938:	687a      	ldr	r2, [r7, #4]
    293a:	601a      	str	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b004      	add	sp, #16
    2942:	bd80      	pop	{r7, pc}

00002944 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    294c:	4b23      	ldr	r3, [pc, #140]	; (29dc <_ext_irq_init+0x98>)
    294e:	2101      	movs	r1, #1
    2950:	0018      	movs	r0, r3
    2952:	4b23      	ldr	r3, [pc, #140]	; (29e0 <_ext_irq_init+0x9c>)
    2954:	4798      	blx	r3
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    2956:	4b21      	ldr	r3, [pc, #132]	; (29dc <_ext_irq_init+0x98>)
    2958:	0018      	movs	r0, r3
    295a:	4b22      	ldr	r3, [pc, #136]	; (29e4 <_ext_irq_init+0xa0>)
    295c:	4798      	blx	r3
    295e:	1e03      	subs	r3, r0, #0
    2960:	d002      	beq.n	2968 <_ext_irq_init+0x24>
		return ERR_DENIED;
    2962:	2311      	movs	r3, #17
    2964:	425b      	negs	r3, r3
    2966:	e035      	b.n	29d4 <_ext_irq_init+0x90>
	}
	hri_eic_set_CTRLA_SWRST_bit(EIC);
    2968:	4b1c      	ldr	r3, [pc, #112]	; (29dc <_ext_irq_init+0x98>)
    296a:	0018      	movs	r0, r3
    296c:	4b1e      	ldr	r3, [pc, #120]	; (29e8 <_ext_irq_init+0xa4>)
    296e:	4798      	blx	r3
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    2970:	4b1a      	ldr	r3, [pc, #104]	; (29dc <_ext_irq_init+0x98>)
    2972:	2101      	movs	r1, #1
    2974:	0018      	movs	r0, r3
    2976:	4b1a      	ldr	r3, [pc, #104]	; (29e0 <_ext_irq_init+0x9c>)
    2978:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    297a:	4b18      	ldr	r3, [pc, #96]	; (29dc <_ext_irq_init+0x98>)
    297c:	2100      	movs	r1, #0
    297e:	0018      	movs	r0, r3
    2980:	4b1a      	ldr	r3, [pc, #104]	; (29ec <_ext_irq_init+0xa8>)
    2982:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(
    2984:	4b15      	ldr	r3, [pc, #84]	; (29dc <_ext_irq_init+0x98>)
    2986:	2100      	movs	r1, #0
    2988:	0018      	movs	r0, r3
    298a:	4b19      	ldr	r3, [pc, #100]	; (29f0 <_ext_irq_init+0xac>)
    298c:	4798      	blx	r3
	    EIC, (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos) | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    298e:	4b13      	ldr	r3, [pc, #76]	; (29dc <_ext_irq_init+0x98>)
    2990:	2100      	movs	r1, #0
    2992:	0018      	movs	r0, r3
    2994:	4b17      	ldr	r3, [pc, #92]	; (29f4 <_ext_irq_init+0xb0>)
    2996:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14)
	                             | (CONF_EIC_EXTINTEO15 << 15)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    2998:	2388      	movs	r3, #136	; 0x88
    299a:	035b      	lsls	r3, r3, #13
    299c:	480f      	ldr	r0, [pc, #60]	; (29dc <_ext_irq_init+0x98>)
    299e:	001a      	movs	r2, r3
    29a0:	2100      	movs	r1, #0
    29a2:	4b15      	ldr	r3, [pc, #84]	; (29f8 <_ext_irq_init+0xb4>)
    29a4:	4798      	blx	r3
	                             | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos)
	                             | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    29a6:	4a15      	ldr	r2, [pc, #84]	; (29fc <_ext_irq_init+0xb8>)
    29a8:	4b0c      	ldr	r3, [pc, #48]	; (29dc <_ext_irq_init+0x98>)
    29aa:	2101      	movs	r1, #1
    29ac:	0018      	movs	r0, r3
    29ae:	4b12      	ldr	r3, [pc, #72]	; (29f8 <_ext_irq_init+0xb4>)
    29b0:	4798      	blx	r3
	                             | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos)
	                             | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    29b2:	4b0a      	ldr	r3, [pc, #40]	; (29dc <_ext_irq_init+0x98>)
    29b4:	0018      	movs	r0, r3
    29b6:	4b12      	ldr	r3, [pc, #72]	; (2a00 <_ext_irq_init+0xbc>)
    29b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_IRQn);
    29ba:	2003      	movs	r0, #3
    29bc:	4b11      	ldr	r3, [pc, #68]	; (2a04 <_ext_irq_init+0xc0>)
    29be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_IRQn);
    29c0:	2003      	movs	r0, #3
    29c2:	4b11      	ldr	r3, [pc, #68]	; (2a08 <_ext_irq_init+0xc4>)
    29c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
    29c6:	2003      	movs	r0, #3
    29c8:	4b10      	ldr	r3, [pc, #64]	; (2a0c <_ext_irq_init+0xc8>)
    29ca:	4798      	blx	r3

	callback = cb;
    29cc:	4b10      	ldr	r3, [pc, #64]	; (2a10 <_ext_irq_init+0xcc>)
    29ce:	687a      	ldr	r2, [r7, #4]
    29d0:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    29d2:	2300      	movs	r3, #0
}
    29d4:	0018      	movs	r0, r3
    29d6:	46bd      	mov	sp, r7
    29d8:	b002      	add	sp, #8
    29da:	bd80      	pop	{r7, pc}
    29dc:	40002400 	.word	0x40002400
    29e0:	00002759 	.word	0x00002759
    29e4:	00002835 	.word	0x00002835
    29e8:	000027d5 	.word	0x000027d5
    29ec:	0000287d 	.word	0x0000287d
    29f0:	000028e1 	.word	0x000028e1
    29f4:	000028ff 	.word	0x000028ff
    29f8:	00002917 	.word	0x00002917
    29fc:	11110000 	.word	0x11110000
    2a00:	00002805 	.word	0x00002805
    2a04:	000026f5 	.word	0x000026f5
    2a08:	00002725 	.word	0x00002725
    2a0c:	000026c9 	.word	0x000026c9
    2a10:	20000c64 	.word	0x20000c64

00002a14 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    2a14:	b580      	push	{r7, lr}
    2a16:	b084      	sub	sp, #16
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    2a1c:	000a      	movs	r2, r1
    2a1e:	1cfb      	adds	r3, r7, #3
    2a20:	701a      	strb	r2, [r3, #0]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    2a22:	230f      	movs	r3, #15
    2a24:	18fb      	adds	r3, r7, r3
    2a26:	22ff      	movs	r2, #255	; 0xff
    2a28:	701a      	strb	r2, [r3, #0]
	uint8_t i      = 0;
    2a2a:	230e      	movs	r3, #14
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	2200      	movs	r2, #0
    2a30:	701a      	strb	r2, [r3, #0]

	for (; i < ARRAY_SIZE(_map); i++) {
    2a32:	e01b      	b.n	2a6c <_ext_irq_enable+0x58>
		if (_map[i].pin == pin) {
    2a34:	230e      	movs	r3, #14
    2a36:	18fb      	adds	r3, r7, r3
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	4a28      	ldr	r2, [pc, #160]	; (2adc <_ext_irq_enable+0xc8>)
    2a3c:	00db      	lsls	r3, r3, #3
    2a3e:	18d3      	adds	r3, r2, r3
    2a40:	3304      	adds	r3, #4
    2a42:	681a      	ldr	r2, [r3, #0]
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	429a      	cmp	r2, r3
    2a48:	d109      	bne.n	2a5e <_ext_irq_enable+0x4a>
			extint = _map[i].extint;
    2a4a:	230e      	movs	r3, #14
    2a4c:	18fb      	adds	r3, r7, r3
    2a4e:	7819      	ldrb	r1, [r3, #0]
    2a50:	230f      	movs	r3, #15
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	4a21      	ldr	r2, [pc, #132]	; (2adc <_ext_irq_enable+0xc8>)
    2a56:	00c9      	lsls	r1, r1, #3
    2a58:	5c8a      	ldrb	r2, [r1, r2]
    2a5a:	701a      	strb	r2, [r3, #0]
			break;
    2a5c:	e00b      	b.n	2a76 <_ext_irq_enable+0x62>
	for (; i < ARRAY_SIZE(_map); i++) {
    2a5e:	230e      	movs	r3, #14
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	781a      	ldrb	r2, [r3, #0]
    2a64:	230e      	movs	r3, #14
    2a66:	18fb      	adds	r3, r7, r3
    2a68:	3201      	adds	r2, #1
    2a6a:	701a      	strb	r2, [r3, #0]
    2a6c:	230e      	movs	r3, #14
    2a6e:	18fb      	adds	r3, r7, r3
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	2b05      	cmp	r3, #5
    2a74:	d9de      	bls.n	2a34 <_ext_irq_enable+0x20>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    2a76:	230f      	movs	r3, #15
    2a78:	18fb      	adds	r3, r7, r3
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	2bff      	cmp	r3, #255	; 0xff
    2a7e:	d102      	bne.n	2a86 <_ext_irq_enable+0x72>
		return -1;
    2a80:	2301      	movs	r3, #1
    2a82:	425b      	negs	r3, r3
    2a84:	e026      	b.n	2ad4 <_ext_irq_enable+0xc0>
	}

	if (enable) {
    2a86:	1cfb      	adds	r3, r7, #3
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d00b      	beq.n	2aa6 <_ext_irq_enable+0x92>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2a8e:	230f      	movs	r3, #15
    2a90:	18fb      	adds	r3, r7, r3
    2a92:	781b      	ldrb	r3, [r3, #0]
    2a94:	2201      	movs	r2, #1
    2a96:	409a      	lsls	r2, r3
    2a98:	0013      	movs	r3, r2
    2a9a:	4a11      	ldr	r2, [pc, #68]	; (2ae0 <_ext_irq_enable+0xcc>)
    2a9c:	0019      	movs	r1, r3
    2a9e:	0010      	movs	r0, r2
    2aa0:	4b10      	ldr	r3, [pc, #64]	; (2ae4 <_ext_irq_enable+0xd0>)
    2aa2:	4798      	blx	r3
    2aa4:	e015      	b.n	2ad2 <_ext_irq_enable+0xbe>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    2aa6:	230f      	movs	r3, #15
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	2201      	movs	r2, #1
    2aae:	409a      	lsls	r2, r3
    2ab0:	0013      	movs	r3, r2
    2ab2:	4a0b      	ldr	r2, [pc, #44]	; (2ae0 <_ext_irq_enable+0xcc>)
    2ab4:	0019      	movs	r1, r3
    2ab6:	0010      	movs	r0, r2
    2ab8:	4b0b      	ldr	r3, [pc, #44]	; (2ae8 <_ext_irq_enable+0xd4>)
    2aba:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    2abc:	230f      	movs	r3, #15
    2abe:	18fb      	adds	r3, r7, r3
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	2201      	movs	r2, #1
    2ac4:	409a      	lsls	r2, r3
    2ac6:	0013      	movs	r3, r2
    2ac8:	4a05      	ldr	r2, [pc, #20]	; (2ae0 <_ext_irq_enable+0xcc>)
    2aca:	0019      	movs	r1, r3
    2acc:	0010      	movs	r0, r2
    2ace:	4b07      	ldr	r3, [pc, #28]	; (2aec <_ext_irq_enable+0xd8>)
    2ad0:	4798      	blx	r3
	}

	return ERR_NONE;
    2ad2:	2300      	movs	r3, #0
}
    2ad4:	0018      	movs	r0, r3
    2ad6:	46bd      	mov	sp, r7
    2ad8:	b004      	add	sp, #16
    2ada:	bd80      	pop	{r7, pc}
    2adc:	0001f1dc 	.word	0x0001f1dc
    2ae0:	40002400 	.word	0x40002400
    2ae4:	00002777 	.word	0x00002777
    2ae8:	0000278f 	.word	0x0000278f
    2aec:	000027bb 	.word	0x000027bb

00002af0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b084      	sub	sp, #16
    2af4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    2af6:	4b53      	ldr	r3, [pc, #332]	; (2c44 <_ext_irq_handler+0x154>)
    2af8:	0018      	movs	r0, r3
    2afa:	4b53      	ldr	r3, [pc, #332]	; (2c48 <_ext_irq_handler+0x158>)
    2afc:	4798      	blx	r3
    2afe:	0003      	movs	r3, r0
    2b00:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    2b02:	2301      	movs	r3, #1
    2b04:	425b      	negs	r3, r3
    2b06:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2b08:	683b      	ldr	r3, [r7, #0]
    2b0a:	4a4e      	ldr	r2, [pc, #312]	; (2c44 <_ext_irq_handler+0x154>)
    2b0c:	0019      	movs	r1, r3
    2b0e:	0010      	movs	r0, r2
    2b10:	4b4e      	ldr	r3, [pc, #312]	; (2c4c <_ext_irq_handler+0x15c>)
    2b12:	4798      	blx	r3

	ASSERT(callback);
    2b14:	4b4e      	ldr	r3, [pc, #312]	; (2c50 <_ext_irq_handler+0x160>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	1e5a      	subs	r2, r3, #1
    2b1a:	4193      	sbcs	r3, r2
    2b1c:	b2db      	uxtb	r3, r3
    2b1e:	494d      	ldr	r1, [pc, #308]	; (2c54 <_ext_irq_handler+0x164>)
    2b20:	22f0      	movs	r2, #240	; 0xf0
    2b22:	0018      	movs	r0, r3
    2b24:	4b4c      	ldr	r3, [pc, #304]	; (2c58 <_ext_irq_handler+0x168>)
    2b26:	4798      	blx	r3

	while (flags) {
    2b28:	e084      	b.n	2c34 <_ext_irq_handler+0x144>
		pos = ffs(flags) - 1;
    2b2a:	683b      	ldr	r3, [r7, #0]
    2b2c:	0018      	movs	r0, r3
    2b2e:	4b4b      	ldr	r3, [pc, #300]	; (2c5c <_ext_irq_handler+0x16c>)
    2b30:	4798      	blx	r3
    2b32:	0003      	movs	r3, r0
    2b34:	b2db      	uxtb	r3, r3
    2b36:	3b01      	subs	r3, #1
    2b38:	b2da      	uxtb	r2, r3
    2b3a:	230f      	movs	r3, #15
    2b3c:	18fb      	adds	r3, r7, r3
    2b3e:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    2b40:	e066      	b.n	2c10 <_ext_irq_handler+0x120>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2b42:	1dfb      	adds	r3, r7, #7
    2b44:	2200      	movs	r2, #0
    2b46:	701a      	strb	r2, [r3, #0]
    2b48:	1dbb      	adds	r3, r7, #6
    2b4a:	2206      	movs	r2, #6
    2b4c:	701a      	strb	r2, [r3, #0]

			while (upper >= lower) {
    2b4e:	e03b      	b.n	2bc8 <_ext_irq_handler+0xd8>
				middle = (upper + lower) >> 1;
    2b50:	1dbb      	adds	r3, r7, #6
    2b52:	781a      	ldrb	r2, [r3, #0]
    2b54:	1dfb      	adds	r3, r7, #7
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	18d3      	adds	r3, r2, r3
    2b5a:	105a      	asrs	r2, r3, #1
    2b5c:	1d7b      	adds	r3, r7, #5
    2b5e:	701a      	strb	r2, [r3, #0]
				if (_map[middle].extint == pos) {
    2b60:	1d7b      	adds	r3, r7, #5
    2b62:	781a      	ldrb	r2, [r3, #0]
    2b64:	4b3e      	ldr	r3, [pc, #248]	; (2c60 <_ext_irq_handler+0x170>)
    2b66:	00d2      	lsls	r2, r2, #3
    2b68:	5cd3      	ldrb	r3, [r2, r3]
    2b6a:	001a      	movs	r2, r3
    2b6c:	230f      	movs	r3, #15
    2b6e:	18fb      	adds	r3, r7, r3
    2b70:	781b      	ldrb	r3, [r3, #0]
    2b72:	b25b      	sxtb	r3, r3
    2b74:	429a      	cmp	r2, r3
    2b76:	d108      	bne.n	2b8a <_ext_irq_handler+0x9a>
					pin = _map[middle].pin;
    2b78:	1d7b      	adds	r3, r7, #5
    2b7a:	781b      	ldrb	r3, [r3, #0]
    2b7c:	4a38      	ldr	r2, [pc, #224]	; (2c60 <_ext_irq_handler+0x170>)
    2b7e:	00db      	lsls	r3, r3, #3
    2b80:	18d3      	adds	r3, r2, r3
    2b82:	3304      	adds	r3, #4
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	60bb      	str	r3, [r7, #8]
					break;
    2b88:	e024      	b.n	2bd4 <_ext_irq_handler+0xe4>
				}
				if (_map[middle].extint < pos) {
    2b8a:	1d7b      	adds	r3, r7, #5
    2b8c:	781a      	ldrb	r2, [r3, #0]
    2b8e:	4b34      	ldr	r3, [pc, #208]	; (2c60 <_ext_irq_handler+0x170>)
    2b90:	00d2      	lsls	r2, r2, #3
    2b92:	5cd3      	ldrb	r3, [r2, r3]
    2b94:	001a      	movs	r2, r3
    2b96:	230f      	movs	r3, #15
    2b98:	18fb      	adds	r3, r7, r3
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	b25b      	sxtb	r3, r3
    2b9e:	429a      	cmp	r2, r3
    2ba0:	da09      	bge.n	2bb6 <_ext_irq_handler+0xc6>
					lower = middle + 1;
    2ba2:	1dfb      	adds	r3, r7, #7
    2ba4:	1d7a      	adds	r2, r7, #5
    2ba6:	7812      	ldrb	r2, [r2, #0]
    2ba8:	3201      	adds	r2, #1
    2baa:	701a      	strb	r2, [r3, #0]
    2bac:	1dbb      	adds	r3, r7, #6
    2bae:	1dba      	adds	r2, r7, #6
    2bb0:	7812      	ldrb	r2, [r2, #0]
    2bb2:	701a      	strb	r2, [r3, #0]
    2bb4:	e008      	b.n	2bc8 <_ext_irq_handler+0xd8>
				} else {
					upper = middle - 1;
    2bb6:	1dbb      	adds	r3, r7, #6
    2bb8:	1d7a      	adds	r2, r7, #5
    2bba:	7812      	ldrb	r2, [r2, #0]
    2bbc:	3a01      	subs	r2, #1
    2bbe:	701a      	strb	r2, [r3, #0]
    2bc0:	1dfb      	adds	r3, r7, #7
    2bc2:	1dfa      	adds	r2, r7, #7
    2bc4:	7812      	ldrb	r2, [r2, #0]
    2bc6:	701a      	strb	r2, [r3, #0]
			while (upper >= lower) {
    2bc8:	1dba      	adds	r2, r7, #6
    2bca:	1dfb      	adds	r3, r7, #7
    2bcc:	7812      	ldrb	r2, [r2, #0]
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	429a      	cmp	r2, r3
    2bd2:	d2bd      	bcs.n	2b50 <_ext_irq_handler+0x60>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2bd4:	68bb      	ldr	r3, [r7, #8]
    2bd6:	3301      	adds	r3, #1
    2bd8:	d004      	beq.n	2be4 <_ext_irq_handler+0xf4>
				callback(pin);
    2bda:	4b1d      	ldr	r3, [pc, #116]	; (2c50 <_ext_irq_handler+0x160>)
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	68ba      	ldr	r2, [r7, #8]
    2be0:	0010      	movs	r0, r2
    2be2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2be4:	230f      	movs	r3, #15
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	b25b      	sxtb	r3, r3
    2bec:	2201      	movs	r2, #1
    2bee:	409a      	lsls	r2, r3
    2bf0:	0013      	movs	r3, r2
    2bf2:	43db      	mvns	r3, r3
    2bf4:	683a      	ldr	r2, [r7, #0]
    2bf6:	4013      	ands	r3, r2
    2bf8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	0018      	movs	r0, r3
    2bfe:	4b17      	ldr	r3, [pc, #92]	; (2c5c <_ext_irq_handler+0x16c>)
    2c00:	4798      	blx	r3
    2c02:	0003      	movs	r3, r0
    2c04:	b2db      	uxtb	r3, r3
    2c06:	3b01      	subs	r3, #1
    2c08:	b2da      	uxtb	r2, r3
    2c0a:	230f      	movs	r3, #15
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    2c10:	230f      	movs	r3, #15
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	b25b      	sxtb	r3, r3
    2c18:	3301      	adds	r3, #1
    2c1a:	d192      	bne.n	2b42 <_ext_irq_handler+0x52>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    2c1c:	4b09      	ldr	r3, [pc, #36]	; (2c44 <_ext_irq_handler+0x154>)
    2c1e:	0018      	movs	r0, r3
    2c20:	4b09      	ldr	r3, [pc, #36]	; (2c48 <_ext_irq_handler+0x158>)
    2c22:	4798      	blx	r3
    2c24:	0003      	movs	r3, r0
    2c26:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2c28:	683b      	ldr	r3, [r7, #0]
    2c2a:	4a06      	ldr	r2, [pc, #24]	; (2c44 <_ext_irq_handler+0x154>)
    2c2c:	0019      	movs	r1, r3
    2c2e:	0010      	movs	r0, r2
    2c30:	4b06      	ldr	r3, [pc, #24]	; (2c4c <_ext_irq_handler+0x15c>)
    2c32:	4798      	blx	r3
	while (flags) {
    2c34:	683b      	ldr	r3, [r7, #0]
    2c36:	2b00      	cmp	r3, #0
    2c38:	d000      	beq.n	2c3c <_ext_irq_handler+0x14c>
    2c3a:	e776      	b.n	2b2a <_ext_irq_handler+0x3a>
	}
}
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	46bd      	mov	sp, r7
    2c40:	b004      	add	sp, #16
    2c42:	bd80      	pop	{r7, pc}
    2c44:	40002400 	.word	0x40002400
    2c48:	000027a7 	.word	0x000027a7
    2c4c:	000027bb 	.word	0x000027bb
    2c50:	20000c64 	.word	0x20000c64
    2c54:	0001f20c 	.word	0x0001f20c
    2c58:	00002379 	.word	0x00002379
    2c5c:	00019b85 	.word	0x00019b85
    2c60:	0001f1dc 	.word	0x0001f1dc

00002c64 <EIC_Handler>:

/**
* \brief EIC interrupt handler
*/
void EIC_Handler(void)
{
    2c64:	b580      	push	{r7, lr}
    2c66:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    2c68:	4b02      	ldr	r3, [pc, #8]	; (2c74 <EIC_Handler+0x10>)
    2c6a:	4798      	blx	r3
}
    2c6c:	46c0      	nop			; (mov r8, r8)
    2c6e:	46bd      	mov	sp, r7
    2c70:	bd80      	pop	{r7, pc}
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	00002af1 	.word	0x00002af1

00002c78 <hri_gclk_write_GENCTRL_reg>:
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b084      	sub	sp, #16
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	60f8      	str	r0, [r7, #12]
    2c80:	607a      	str	r2, [r7, #4]
    2c82:	230b      	movs	r3, #11
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	1c0a      	adds	r2, r1, #0
    2c88:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2c8a:	230b      	movs	r3, #11
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	781a      	ldrb	r2, [r3, #0]
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	3208      	adds	r2, #8
    2c94:	0092      	lsls	r2, r2, #2
    2c96:	6879      	ldr	r1, [r7, #4]
    2c98:	50d1      	str	r1, [r2, r3]
}
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	46bd      	mov	sp, r7
    2c9e:	b004      	add	sp, #16
    2ca0:	bd80      	pop	{r7, pc}
	...

00002ca4 <_gclk_init_generators>:
/**
 * \brief Initializes generators

 */
void _gclk_init_generators(void)
{
    2ca4:	b580      	push	{r7, lr}
    2ca6:	af00      	add	r7, sp, #0

#if CONF_GCLK_GEN_0_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2ca8:	4a19      	ldr	r2, [pc, #100]	; (2d10 <_gclk_init_generators+0x6c>)
    2caa:	4b1a      	ldr	r3, [pc, #104]	; (2d14 <_gclk_init_generators+0x70>)
    2cac:	2100      	movs	r1, #0
    2cae:	0018      	movs	r0, r3
    2cb0:	4b19      	ldr	r3, [pc, #100]	; (2d18 <_gclk_init_generators+0x74>)
    2cb2:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_0_SOURCE);
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2cb4:	4a16      	ldr	r2, [pc, #88]	; (2d10 <_gclk_init_generators+0x6c>)
    2cb6:	4b17      	ldr	r3, [pc, #92]	; (2d14 <_gclk_init_generators+0x70>)
    2cb8:	2101      	movs	r1, #1
    2cba:	0018      	movs	r0, r3
    2cbc:	4b16      	ldr	r3, [pc, #88]	; (2d18 <_gclk_init_generators+0x74>)
    2cbe:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_1_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_1_SOURCE);
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2cc0:	4a16      	ldr	r2, [pc, #88]	; (2d1c <_gclk_init_generators+0x78>)
    2cc2:	4b14      	ldr	r3, [pc, #80]	; (2d14 <_gclk_init_generators+0x70>)
    2cc4:	2102      	movs	r1, #2
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b13      	ldr	r3, [pc, #76]	; (2d18 <_gclk_init_generators+0x74>)
    2cca:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_2_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_2_SOURCE);
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2ccc:	4a14      	ldr	r2, [pc, #80]	; (2d20 <_gclk_init_generators+0x7c>)
    2cce:	4b11      	ldr	r3, [pc, #68]	; (2d14 <_gclk_init_generators+0x70>)
    2cd0:	2103      	movs	r1, #3
    2cd2:	0018      	movs	r0, r3
    2cd4:	4b10      	ldr	r3, [pc, #64]	; (2d18 <_gclk_init_generators+0x74>)
    2cd6:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_3_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_3_SOURCE);
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2cd8:	4a0d      	ldr	r2, [pc, #52]	; (2d10 <_gclk_init_generators+0x6c>)
    2cda:	4b0e      	ldr	r3, [pc, #56]	; (2d14 <_gclk_init_generators+0x70>)
    2cdc:	2104      	movs	r1, #4
    2cde:	0018      	movs	r0, r3
    2ce0:	4b0d      	ldr	r3, [pc, #52]	; (2d18 <_gclk_init_generators+0x74>)
    2ce2:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_4_SOURCE);
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2ce4:	4a0a      	ldr	r2, [pc, #40]	; (2d10 <_gclk_init_generators+0x6c>)
    2ce6:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <_gclk_init_generators+0x70>)
    2ce8:	2105      	movs	r1, #5
    2cea:	0018      	movs	r0, r3
    2cec:	4b0a      	ldr	r3, [pc, #40]	; (2d18 <_gclk_init_generators+0x74>)
    2cee:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_5_SOURCE);
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2cf0:	4a07      	ldr	r2, [pc, #28]	; (2d10 <_gclk_init_generators+0x6c>)
    2cf2:	4b08      	ldr	r3, [pc, #32]	; (2d14 <_gclk_init_generators+0x70>)
    2cf4:	2106      	movs	r1, #6
    2cf6:	0018      	movs	r0, r3
    2cf8:	4b07      	ldr	r3, [pc, #28]	; (2d18 <_gclk_init_generators+0x74>)
    2cfa:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_6_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_6_SOURCE);
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    2cfc:	4a04      	ldr	r2, [pc, #16]	; (2d10 <_gclk_init_generators+0x6c>)
    2cfe:	4b05      	ldr	r3, [pc, #20]	; (2d14 <_gclk_init_generators+0x70>)
    2d00:	2107      	movs	r1, #7
    2d02:	0018      	movs	r0, r3
    2d04:	4b04      	ldr	r3, [pc, #16]	; (2d18 <_gclk_init_generators+0x74>)
    2d06:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos)
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SOURCE);
#endif
}
    2d08:	46c0      	nop			; (mov r8, r8)
    2d0a:	46bd      	mov	sp, r7
    2d0c:	bd80      	pop	{r7, pc}
    2d0e:	46c0      	nop			; (mov r8, r8)
    2d10:	00010106 	.word	0x00010106
    2d14:	40001800 	.word	0x40001800
    2d18:	00002c79 	.word	0x00002c79
    2d1c:	00011106 	.word	0x00011106
    2d20:	00010103 	.word	0x00010103

00002d24 <hri_mclk_write_CPUDIV_reg>:
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	000a      	movs	r2, r1
    2d2e:	1cfb      	adds	r3, r7, #3
    2d30:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	1cfa      	adds	r2, r7, #3
    2d36:	7812      	ldrb	r2, [r2, #0]
    2d38:	711a      	strb	r2, [r3, #4]
}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	46bd      	mov	sp, r7
    2d3e:	b002      	add	sp, #8
    2d40:	bd80      	pop	{r7, pc}

00002d42 <hri_mclk_write_LPDIV_reg>:
{
    2d42:	b580      	push	{r7, lr}
    2d44:	b082      	sub	sp, #8
    2d46:	af00      	add	r7, sp, #0
    2d48:	6078      	str	r0, [r7, #4]
    2d4a:	000a      	movs	r2, r1
    2d4c:	1cfb      	adds	r3, r7, #3
    2d4e:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->LPDIV.reg = data;
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	1cfa      	adds	r2, r7, #3
    2d54:	7812      	ldrb	r2, [r2, #0]
    2d56:	715a      	strb	r2, [r3, #5]
}
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	46bd      	mov	sp, r7
    2d5c:	b002      	add	sp, #8
    2d5e:	bd80      	pop	{r7, pc}

00002d60 <hri_mclk_write_BUPDIV_reg>:
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b082      	sub	sp, #8
    2d64:	af00      	add	r7, sp, #0
    2d66:	6078      	str	r0, [r7, #4]
    2d68:	000a      	movs	r2, r1
    2d6a:	1cfb      	adds	r3, r7, #3
    2d6c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->BUPDIV.reg = data;
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	1cfa      	adds	r2, r7, #3
    2d72:	7812      	ldrb	r2, [r2, #0]
    2d74:	719a      	strb	r2, [r3, #6]
}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	46bd      	mov	sp, r7
    2d7a:	b002      	add	sp, #8
    2d7c:	bd80      	pop	{r7, pc}
	...

00002d80 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b082      	sub	sp, #8
    2d84:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    2d86:	4b0a      	ldr	r3, [pc, #40]	; (2db0 <_mclk_init+0x30>)
    2d88:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	2108      	movs	r1, #8
    2d8e:	0018      	movs	r0, r3
    2d90:	4b08      	ldr	r3, [pc, #32]	; (2db4 <_mclk_init+0x34>)
    2d92:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	2104      	movs	r1, #4
    2d98:	0018      	movs	r0, r3
    2d9a:	4b07      	ldr	r3, [pc, #28]	; (2db8 <_mclk_init+0x38>)
    2d9c:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	2101      	movs	r1, #1
    2da2:	0018      	movs	r0, r3
    2da4:	4b05      	ldr	r3, [pc, #20]	; (2dbc <_mclk_init+0x3c>)
    2da6:	4798      	blx	r3
}
    2da8:	46c0      	nop			; (mov r8, r8)
    2daa:	46bd      	mov	sp, r7
    2dac:	b002      	add	sp, #8
    2dae:	bd80      	pop	{r7, pc}
    2db0:	40000400 	.word	0x40000400
    2db4:	00002d61 	.word	0x00002d61
    2db8:	00002d43 	.word	0x00002d43
    2dbc:	00002d25 	.word	0x00002d25

00002dc0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b082      	sub	sp, #8
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	683a      	ldr	r2, [r7, #0]
    2dce:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2dd0:	46c0      	nop			; (mov r8, r8)
    2dd2:	46bd      	mov	sp, r7
    2dd4:	b002      	add	sp, #8
    2dd6:	bd80      	pop	{r7, pc}

00002dd8 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	683a      	ldr	r2, [r7, #0]
    2de6:	615a      	str	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	b002      	add	sp, #8
    2dee:	bd80      	pop	{r7, pc}

00002df0 <hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit>:
{
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	68db      	ldr	r3, [r3, #12]
    2dfc:	2201      	movs	r2, #1
    2dfe:	4013      	ands	r3, r2
    2e00:	1e5a      	subs	r2, r3, #1
    2e02:	4193      	sbcs	r3, r2
    2e04:	b2db      	uxtb	r3, r3
}
    2e06:	0018      	movs	r0, r3
    2e08:	46bd      	mov	sp, r7
    2e0a:	b002      	add	sp, #8
    2e0c:	bd80      	pop	{r7, pc}
	...

00002e10 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    2e16:	4b0f      	ldr	r3, [pc, #60]	; (2e54 <_osc32kctrl_init_sources+0x44>)
    2e18:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    2e1a:	1cbb      	adds	r3, r7, #2
    2e1c:	2200      	movs	r2, #0
    2e1e:	801a      	strh	r2, [r3, #0]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(hw,
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	2156      	movs	r1, #86	; 0x56
    2e24:	0018      	movs	r0, r3
    2e26:	4b0c      	ldr	r3, [pc, #48]	; (2e58 <_osc32kctrl_init_sources+0x48>)
    2e28:	4798      	blx	r3
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	0018      	movs	r0, r3
    2e30:	4b0a      	ldr	r3, [pc, #40]	; (2e5c <_osc32kctrl_init_sources+0x4c>)
    2e32:	4798      	blx	r3
    2e34:	0003      	movs	r3, r0
    2e36:	001a      	movs	r2, r3
    2e38:	2301      	movs	r3, #1
    2e3a:	4053      	eors	r3, r2
    2e3c:	b2db      	uxtb	r3, r3
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d1f4      	bne.n	2e2c <_osc32kctrl_init_sources+0x1c>
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	2104      	movs	r1, #4
    2e46:	0018      	movs	r0, r3
    2e48:	4b05      	ldr	r3, [pc, #20]	; (2e60 <_osc32kctrl_init_sources+0x50>)
    2e4a:	4798      	blx	r3
	(void)calib;
}
    2e4c:	46c0      	nop			; (mov r8, r8)
    2e4e:	46bd      	mov	sp, r7
    2e50:	b002      	add	sp, #8
    2e52:	bd80      	pop	{r7, pc}
    2e54:	40001000 	.word	0x40001000
    2e58:	00002dd9 	.word	0x00002dd9
    2e5c:	00002df1 	.word	0x00002df1
    2e60:	00002dc1 	.word	0x00002dc1

00002e64 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC16MCTRL.reg ^= OSCCTRL_OSC16MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    2e64:	b580      	push	{r7, lr}
    2e66:	b082      	sub	sp, #8
    2e68:	af00      	add	r7, sp, #0
    2e6a:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	7d1b      	ldrb	r3, [r3, #20]
    2e70:	b2db      	uxtb	r3, r3
    2e72:	2280      	movs	r2, #128	; 0x80
    2e74:	4252      	negs	r2, r2
    2e76:	4313      	orrs	r3, r2
    2e78:	b2da      	uxtb	r2, r3
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	46bd      	mov	sp, r7
    2e82:	b002      	add	sp, #8
    2e84:	bd80      	pop	{r7, pc}

00002e86 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    2e86:	b580      	push	{r7, lr}
    2e88:	b082      	sub	sp, #8
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
    2e8e:	000a      	movs	r2, r1
    2e90:	1cfb      	adds	r3, r7, #3
    2e92:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	1cfa      	adds	r2, r7, #3
    2e98:	7812      	ldrb	r2, [r2, #0]
    2e9a:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	46bd      	mov	sp, r7
    2ea0:	b002      	add	sp, #8
    2ea2:	bd80      	pop	{r7, pc}

00002ea4 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b082      	sub	sp, #8
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	68db      	ldr	r3, [r3, #12]
    2eb0:	091b      	lsrs	r3, r3, #4
    2eb2:	2201      	movs	r2, #1
    2eb4:	4013      	ands	r3, r2
    2eb6:	1e5a      	subs	r2, r3, #1
    2eb8:	4193      	sbcs	r3, r2
    2eba:	b2db      	uxtb	r3, r3
}
    2ebc:	0018      	movs	r0, r3
    2ebe:	46bd      	mov	sp, r7
    2ec0:	b002      	add	sp, #8
    2ec2:	bd80      	pop	{r7, pc}

00002ec4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b082      	sub	sp, #8
    2ec8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    2eca:	4b0d      	ldr	r3, [pc, #52]	; (2f00 <_oscctrl_init_sources+0x3c>)
    2ecc:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	218e      	movs	r1, #142	; 0x8e
    2ed2:	0018      	movs	r0, r3
    2ed4:	4b0b      	ldr	r3, [pc, #44]	; (2f04 <_oscctrl_init_sources+0x40>)
    2ed6:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	0018      	movs	r0, r3
    2ede:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <_oscctrl_init_sources+0x44>)
    2ee0:	4798      	blx	r3
    2ee2:	0003      	movs	r3, r0
    2ee4:	001a      	movs	r2, r3
    2ee6:	2301      	movs	r3, #1
    2ee8:	4053      	eors	r3, r2
    2eea:	b2db      	uxtb	r3, r3
    2eec:	2b00      	cmp	r3, #0
    2eee:	d1f4      	bne.n	2eda <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	0018      	movs	r0, r3
    2ef4:	4b05      	ldr	r3, [pc, #20]	; (2f0c <_oscctrl_init_sources+0x48>)
    2ef6:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    2ef8:	46c0      	nop			; (mov r8, r8)
    2efa:	46bd      	mov	sp, r7
    2efc:	b002      	add	sp, #8
    2efe:	bd80      	pop	{r7, pc}
    2f00:	40000c00 	.word	0x40000c00
    2f04:	00002e87 	.word	0x00002e87
    2f08:	00002ea5 	.word	0x00002ea5
    2f0c:	00002e65 	.word	0x00002e65

00002f10 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b082      	sub	sp, #8
    2f14:	af00      	add	r7, sp, #0
	void *                     hw = (void *)OSCCTRL;
    2f16:	4b03      	ldr	r3, [pc, #12]	; (2f24 <_oscctrl_init_referenced_generators+0x14>)
    2f18:	607b      	str	r3, [r7, #4]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	46bd      	mov	sp, r7
    2f1e:	b002      	add	sp, #8
    2f20:	bd80      	pop	{r7, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	40000c00 	.word	0x40000c00

00002f28 <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	b082      	sub	sp, #8
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	799b      	ldrb	r3, [r3, #6]
    2f34:	b2db      	uxtb	r3, r3
}
    2f36:	0018      	movs	r0, r3
    2f38:	46bd      	mov	sp, r7
    2f3a:	b002      	add	sp, #8
    2f3c:	bd80      	pop	{r7, pc}

00002f3e <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    2f3e:	b580      	push	{r7, lr}
    2f40:	b082      	sub	sp, #8
    2f42:	af00      	add	r7, sp, #0
    2f44:	6078      	str	r0, [r7, #4]
    2f46:	000a      	movs	r2, r1
    2f48:	1cfb      	adds	r3, r7, #3
    2f4a:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	1cfa      	adds	r2, r7, #3
    2f50:	7812      	ldrb	r2, [r2, #0]
    2f52:	719a      	strb	r2, [r3, #6]
}
    2f54:	46c0      	nop			; (mov r8, r8)
    2f56:	46bd      	mov	sp, r7
    2f58:	b002      	add	sp, #8
    2f5a:	bd80      	pop	{r7, pc}

00002f5c <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    2f5c:	b580      	push	{r7, lr}
    2f5e:	b084      	sub	sp, #16
    2f60:	af00      	add	r7, sp, #0
    2f62:	6078      	str	r0, [r7, #4]
    2f64:	000a      	movs	r2, r1
    2f66:	1cfb      	adds	r3, r7, #3
    2f68:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    2f6a:	230f      	movs	r3, #15
    2f6c:	18fb      	adds	r3, r7, r3
    2f6e:	687a      	ldr	r2, [r7, #4]
    2f70:	7892      	ldrb	r2, [r2, #2]
    2f72:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    2f74:	230f      	movs	r3, #15
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	1cfa      	adds	r2, r7, #3
    2f7a:	781b      	ldrb	r3, [r3, #0]
    2f7c:	7812      	ldrb	r2, [r2, #0]
    2f7e:	4013      	ands	r3, r2
    2f80:	b2da      	uxtb	r2, r3
    2f82:	230f      	movs	r3, #15
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	2103      	movs	r1, #3
    2f88:	400a      	ands	r2, r1
    2f8a:	701a      	strb	r2, [r3, #0]
	return tmp;
    2f8c:	230f      	movs	r3, #15
    2f8e:	18fb      	adds	r3, r7, r3
    2f90:	781b      	ldrb	r3, [r3, #0]
}
    2f92:	0018      	movs	r0, r3
    2f94:	46bd      	mov	sp, r7
    2f96:	b004      	add	sp, #16
    2f98:	bd80      	pop	{r7, pc}

00002f9a <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    2f9a:	b580      	push	{r7, lr}
    2f9c:	b084      	sub	sp, #16
    2f9e:	af00      	add	r7, sp, #0
    2fa0:	6078      	str	r0, [r7, #4]
    2fa2:	000a      	movs	r2, r1
    2fa4:	1cfb      	adds	r3, r7, #3
    2fa6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    2fa8:	230f      	movs	r3, #15
    2faa:	18fb      	adds	r3, r7, r3
    2fac:	687a      	ldr	r2, [r7, #4]
    2fae:	7892      	ldrb	r2, [r2, #2]
    2fb0:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    2fb2:	230f      	movs	r3, #15
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	220f      	movs	r2, #15
    2fb8:	18ba      	adds	r2, r7, r2
    2fba:	7812      	ldrb	r2, [r2, #0]
    2fbc:	2103      	movs	r1, #3
    2fbe:	438a      	bics	r2, r1
    2fc0:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    2fc2:	1cfb      	adds	r3, r7, #3
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	2203      	movs	r2, #3
    2fc8:	4013      	ands	r3, r2
    2fca:	b2d9      	uxtb	r1, r3
    2fcc:	230f      	movs	r3, #15
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	220f      	movs	r2, #15
    2fd2:	18ba      	adds	r2, r7, r2
    2fd4:	7812      	ldrb	r2, [r2, #0]
    2fd6:	430a      	orrs	r2, r1
    2fd8:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	220f      	movs	r2, #15
    2fde:	18ba      	adds	r2, r7, r2
    2fe0:	7812      	ldrb	r2, [r2, #0]
    2fe2:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    2fe4:	46c0      	nop			; (mov r8, r8)
    2fe6:	46bd      	mov	sp, r7
    2fe8:	b004      	add	sp, #16
    2fea:	bd80      	pop	{r7, pc}

00002fec <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b082      	sub	sp, #8
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	0002      	movs	r2, r0
    2ff4:	1dfb      	adds	r3, r7, #7
    2ff6:	701a      	strb	r2, [r3, #0]
	hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    2ff8:	2380      	movs	r3, #128	; 0x80
    2ffa:	05db      	lsls	r3, r3, #23
    2ffc:	21ff      	movs	r1, #255	; 0xff
    2ffe:	0018      	movs	r0, r3
    3000:	4b10      	ldr	r3, [pc, #64]	; (3044 <_set_performance_level+0x58>)
    3002:	4798      	blx	r3
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    3004:	2380      	movs	r3, #128	; 0x80
    3006:	05db      	lsls	r3, r3, #23
    3008:	2103      	movs	r1, #3
    300a:	0018      	movs	r0, r3
    300c:	4b0e      	ldr	r3, [pc, #56]	; (3048 <_set_performance_level+0x5c>)
    300e:	4798      	blx	r3
    3010:	0003      	movs	r3, r0
    3012:	001a      	movs	r2, r3
    3014:	1dfb      	adds	r3, r7, #7
    3016:	781b      	ldrb	r3, [r3, #0]
    3018:	4293      	cmp	r3, r2
    301a:	d007      	beq.n	302c <_set_performance_level+0x40>
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    301c:	1dfb      	adds	r3, r7, #7
    301e:	781a      	ldrb	r2, [r3, #0]
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	05db      	lsls	r3, r3, #23
    3024:	0011      	movs	r1, r2
    3026:	0018      	movs	r0, r3
    3028:	4b08      	ldr	r3, [pc, #32]	; (304c <_set_performance_level+0x60>)
    302a:	4798      	blx	r3
	}
	while (!hri_pm_read_INTFLAG_reg(PM))
    302c:	46c0      	nop			; (mov r8, r8)
    302e:	2380      	movs	r3, #128	; 0x80
    3030:	05db      	lsls	r3, r3, #23
    3032:	0018      	movs	r0, r3
    3034:	4b06      	ldr	r3, [pc, #24]	; (3050 <_set_performance_level+0x64>)
    3036:	4798      	blx	r3
    3038:	1e03      	subs	r3, r0, #0
    303a:	d0f8      	beq.n	302e <_set_performance_level+0x42>
		;
}
    303c:	46c0      	nop			; (mov r8, r8)
    303e:	46bd      	mov	sp, r7
    3040:	b002      	add	sp, #8
    3042:	bd80      	pop	{r7, pc}
    3044:	00002f3f 	.word	0x00002f3f
    3048:	00002f5d 	.word	0x00002f5d
    304c:	00002f9b 	.word	0x00002f9b
    3050:	00002f29 	.word	0x00002f29

00003054 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3054:	b580      	push	{r7, lr}
    3056:	b082      	sub	sp, #8
    3058:	af00      	add	r7, sp, #0
    305a:	6078      	str	r0, [r7, #4]
    305c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	69db      	ldr	r3, [r3, #28]
    3064:	683a      	ldr	r2, [r7, #0]
    3066:	4013      	ands	r3, r2
    3068:	d1fa      	bne.n	3060 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	46bd      	mov	sp, r7
    306e:	b002      	add	sp, #8
    3070:	bd80      	pop	{r7, pc}

00003072 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    3072:	b580      	push	{r7, lr}
    3074:	b082      	sub	sp, #8
    3076:	af00      	add	r7, sp, #0
    3078:	6078      	str	r0, [r7, #4]
    307a:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	69db      	ldr	r3, [r3, #28]
    3080:	683a      	ldr	r2, [r7, #0]
    3082:	4013      	ands	r3, r2
    3084:	1e5a      	subs	r2, r3, #1
    3086:	4193      	sbcs	r3, r2
    3088:	b2db      	uxtb	r3, r3
}
    308a:	0018      	movs	r0, r3
    308c:	46bd      	mov	sp, r7
    308e:	b002      	add	sp, #8
    3090:	bd80      	pop	{r7, pc}

00003092 <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3092:	b580      	push	{r7, lr}
    3094:	b082      	sub	sp, #8
    3096:	af00      	add	r7, sp, #0
    3098:	6078      	str	r0, [r7, #4]
    309a:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    309c:	46c0      	nop			; (mov r8, r8)
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	69db      	ldr	r3, [r3, #28]
    30a2:	683a      	ldr	r2, [r7, #0]
    30a4:	4013      	ands	r3, r2
    30a6:	d1fa      	bne.n	309e <hri_sercomusart_wait_for_sync+0xc>
	};
}
    30a8:	46c0      	nop			; (mov r8, r8)
    30aa:	46bd      	mov	sp, r7
    30ac:	b002      	add	sp, #8
    30ae:	bd80      	pop	{r7, pc}

000030b0 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b084      	sub	sp, #16
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
    30b8:	000a      	movs	r2, r1
    30ba:	1cfb      	adds	r3, r7, #3
    30bc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    30be:	230f      	movs	r3, #15
    30c0:	18fb      	adds	r3, r7, r3
    30c2:	687a      	ldr	r2, [r7, #4]
    30c4:	7e12      	ldrb	r2, [r2, #24]
    30c6:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    30c8:	230f      	movs	r3, #15
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	220f      	movs	r2, #15
    30ce:	18ba      	adds	r2, r7, r2
    30d0:	1cf9      	adds	r1, r7, #3
    30d2:	7812      	ldrb	r2, [r2, #0]
    30d4:	7809      	ldrb	r1, [r1, #0]
    30d6:	400a      	ands	r2, r1
    30d8:	701a      	strb	r2, [r3, #0]
	return tmp;
    30da:	230f      	movs	r3, #15
    30dc:	18fb      	adds	r3, r7, r3
    30de:	781b      	ldrb	r3, [r3, #0]
}
    30e0:	0018      	movs	r0, r3
    30e2:	46bd      	mov	sp, r7
    30e4:	b004      	add	sp, #16
    30e6:	bd80      	pop	{r7, pc}

000030e8 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    30e8:	b580      	push	{r7, lr}
    30ea:	b082      	sub	sp, #8
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	7e1b      	ldrb	r3, [r3, #24]
    30f4:	b2db      	uxtb	r3, r3
}
    30f6:	0018      	movs	r0, r3
    30f8:	46bd      	mov	sp, r7
    30fa:	b002      	add	sp, #8
    30fc:	bd80      	pop	{r7, pc}

000030fe <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    30fe:	b580      	push	{r7, lr}
    3100:	b082      	sub	sp, #8
    3102:	af00      	add	r7, sp, #0
    3104:	6078      	str	r0, [r7, #4]
    3106:	000a      	movs	r2, r1
    3108:	1cfb      	adds	r3, r7, #3
    310a:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	1cfa      	adds	r2, r7, #3
    3110:	7812      	ldrb	r2, [r2, #0]
    3112:	761a      	strb	r2, [r3, #24]
}
    3114:	46c0      	nop			; (mov r8, r8)
    3116:	46bd      	mov	sp, r7
    3118:	b002      	add	sp, #8
    311a:	bd80      	pop	{r7, pc}

0000311c <hri_sercomspi_set_CTRLA_SWRST_bit>:

static inline void hri_sercomspi_set_CTRLA_SWRST_bit(const void *const hw)
{
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	2101      	movs	r1, #1
    3128:	0018      	movs	r0, r3
    312a:	4b06      	ldr	r3, [pc, #24]	; (3144 <hri_sercomspi_set_CTRLA_SWRST_bit+0x28>)
    312c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	2201      	movs	r2, #1
    3134:	431a      	orrs	r2, r3
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	46bd      	mov	sp, r7
    313e:	b002      	add	sp, #8
    3140:	bd80      	pop	{r7, pc}
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	00003055 	.word	0x00003055

00003148 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    3148:	b580      	push	{r7, lr}
    314a:	b084      	sub	sp, #16
    314c:	af00      	add	r7, sp, #0
    314e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	2103      	movs	r1, #3
    3154:	0018      	movs	r0, r3
    3156:	4b09      	ldr	r3, [pc, #36]	; (317c <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    3158:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	681b      	ldr	r3, [r3, #0]
    315e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	085b      	lsrs	r3, r3, #1
    3164:	2201      	movs	r2, #1
    3166:	4013      	ands	r3, r2
    3168:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    316a:	68fb      	ldr	r3, [r7, #12]
    316c:	1e5a      	subs	r2, r3, #1
    316e:	4193      	sbcs	r3, r2
    3170:	b2db      	uxtb	r3, r3
}
    3172:	0018      	movs	r0, r3
    3174:	46bd      	mov	sp, r7
    3176:	b004      	add	sp, #16
    3178:	bd80      	pop	{r7, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	00003055 	.word	0x00003055

00003180 <hri_sercomspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    3180:	b580      	push	{r7, lr}
    3182:	b082      	sub	sp, #8
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
    3188:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	683a      	ldr	r2, [r7, #0]
    318e:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3190:	46c0      	nop			; (mov r8, r8)
    3192:	46bd      	mov	sp, r7
    3194:	b002      	add	sp, #8
    3196:	bd80      	pop	{r7, pc}

00003198 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    3198:	b580      	push	{r7, lr}
    319a:	b082      	sub	sp, #8
    319c:	af00      	add	r7, sp, #0
    319e:	6078      	str	r0, [r7, #4]
    31a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	683a      	ldr	r2, [r7, #0]
    31a6:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31a8:	46c0      	nop			; (mov r8, r8)
    31aa:	46bd      	mov	sp, r7
    31ac:	b002      	add	sp, #8
    31ae:	bd80      	pop	{r7, pc}

000031b0 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b082      	sub	sp, #8
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	000a      	movs	r2, r1
    31ba:	1cfb      	adds	r3, r7, #3
    31bc:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	1cfa      	adds	r2, r7, #3
    31c2:	7812      	ldrb	r2, [r2, #0]
    31c4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	46bd      	mov	sp, r7
    31ca:	b002      	add	sp, #8
    31cc:	bd80      	pop	{r7, pc}

000031ce <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    31ce:	b580      	push	{r7, lr}
    31d0:	b082      	sub	sp, #8
    31d2:	af00      	add	r7, sp, #0
    31d4:	6078      	str	r0, [r7, #4]
    31d6:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	683a      	ldr	r2, [r7, #0]
    31dc:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	46bd      	mov	sp, r7
    31e2:	b002      	add	sp, #8
    31e4:	bd80      	pop	{r7, pc}

000031e6 <hri_sercomspi_read_DATA_reg>:
{
	return ((Sercom *)hw)->SPI.ADDR.reg;
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    31e6:	b580      	push	{r7, lr}
    31e8:	b082      	sub	sp, #8
    31ea:	af00      	add	r7, sp, #0
    31ec:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    31f2:	0018      	movs	r0, r3
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}

000031fa <hri_sercomspi_write_DATA_reg>:

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    31fa:	b580      	push	{r7, lr}
    31fc:	b082      	sub	sp, #8
    31fe:	af00      	add	r7, sp, #0
    3200:	6078      	str	r0, [r7, #4]
    3202:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	683a      	ldr	r2, [r7, #0]
    3208:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	46bd      	mov	sp, r7
    320e:	b002      	add	sp, #8
    3210:	bd80      	pop	{r7, pc}

00003212 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    3212:	b580      	push	{r7, lr}
    3214:	b082      	sub	sp, #8
    3216:	af00      	add	r7, sp, #0
    3218:	6078      	str	r0, [r7, #4]
    321a:	000a      	movs	r2, r1
    321c:	1cfb      	adds	r3, r7, #3
    321e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	1cfa      	adds	r2, r7, #3
    3224:	2130      	movs	r1, #48	; 0x30
    3226:	7812      	ldrb	r2, [r2, #0]
    3228:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	46bd      	mov	sp, r7
    322e:	b002      	add	sp, #8
    3230:	bd80      	pop	{r7, pc}

00003232 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    3232:	b580      	push	{r7, lr}
    3234:	b082      	sub	sp, #8
    3236:	af00      	add	r7, sp, #0
    3238:	6078      	str	r0, [r7, #4]
    323a:	000a      	movs	r2, r1
    323c:	1cbb      	adds	r3, r7, #2
    323e:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	1cba      	adds	r2, r7, #2
    3244:	8812      	ldrh	r2, [r2, #0]
    3246:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3248:	46c0      	nop			; (mov r8, r8)
    324a:	46bd      	mov	sp, r7
    324c:	b002      	add	sp, #8
    324e:	bd80      	pop	{r7, pc}

00003250 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    3250:	b580      	push	{r7, lr}
    3252:	b082      	sub	sp, #8
    3254:	af00      	add	r7, sp, #0
    3256:	6078      	str	r0, [r7, #4]
    3258:	000a      	movs	r2, r1
    325a:	1cbb      	adds	r3, r7, #2
    325c:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	1cba      	adds	r2, r7, #2
    3262:	8812      	ldrh	r2, [r2, #0]
    3264:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	46bd      	mov	sp, r7
    326a:	b002      	add	sp, #8
    326c:	bd80      	pop	{r7, pc}

0000326e <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    326e:	b580      	push	{r7, lr}
    3270:	b082      	sub	sp, #8
    3272:	af00      	add	r7, sp, #0
    3274:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	7e1b      	ldrb	r3, [r3, #24]
    327a:	b2db      	uxtb	r3, r3
    327c:	001a      	movs	r2, r3
    327e:	2301      	movs	r3, #1
    3280:	4013      	ands	r3, r2
    3282:	1e5a      	subs	r2, r3, #1
    3284:	4193      	sbcs	r3, r2
    3286:	b2db      	uxtb	r3, r3
}
    3288:	0018      	movs	r0, r3
    328a:	46bd      	mov	sp, r7
    328c:	b002      	add	sp, #8
    328e:	bd80      	pop	{r7, pc}

00003290 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    3290:	b580      	push	{r7, lr}
    3292:	b082      	sub	sp, #8
    3294:	af00      	add	r7, sp, #0
    3296:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	7e1b      	ldrb	r3, [r3, #24]
    329c:	b2db      	uxtb	r3, r3
    329e:	089b      	lsrs	r3, r3, #2
    32a0:	2201      	movs	r2, #1
    32a2:	4013      	ands	r3, r2
    32a4:	1e5a      	subs	r2, r3, #1
    32a6:	4193      	sbcs	r3, r2
    32a8:	b2db      	uxtb	r3, r3
}
    32aa:	0018      	movs	r0, r3
    32ac:	46bd      	mov	sp, r7
    32ae:	b002      	add	sp, #8
    32b0:	bd80      	pop	{r7, pc}
	...

000032b4 <hri_sercomusart_set_CTRLA_SWRST_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = mask;
}

static inline void hri_sercomusart_set_CTRLA_SWRST_bit(const void *const hw)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	2101      	movs	r1, #1
    32c0:	0018      	movs	r0, r3
    32c2:	4b06      	ldr	r3, [pc, #24]	; (32dc <hri_sercomusart_set_CTRLA_SWRST_bit+0x28>)
    32c4:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	681b      	ldr	r3, [r3, #0]
    32ca:	2201      	movs	r2, #1
    32cc:	431a      	orrs	r2, r3
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	46bd      	mov	sp, r7
    32d6:	b002      	add	sp, #8
    32d8:	bd80      	pop	{r7, pc}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	00003093 	.word	0x00003093

000032e0 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	2103      	movs	r1, #3
    32ec:	0018      	movs	r0, r3
    32ee:	4b06      	ldr	r3, [pc, #24]	; (3308 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    32f0:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	2202      	movs	r2, #2
    32f8:	431a      	orrs	r2, r3
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	00003093 	.word	0x00003093

0000330c <hri_sercomusart_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    330c:	b580      	push	{r7, lr}
    330e:	b084      	sub	sp, #16
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	2103      	movs	r1, #3
    3318:	0018      	movs	r0, r3
    331a:	4b09      	ldr	r3, [pc, #36]	; (3340 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x34>)
    331c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	681b      	ldr	r3, [r3, #0]
    3322:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	085b      	lsrs	r3, r3, #1
    3328:	2201      	movs	r2, #1
    332a:	4013      	ands	r3, r2
    332c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    332e:	68fb      	ldr	r3, [r7, #12]
    3330:	1e5a      	subs	r2, r3, #1
    3332:	4193      	sbcs	r3, r2
    3334:	b2db      	uxtb	r3, r3
}
    3336:	0018      	movs	r0, r3
    3338:	46bd      	mov	sp, r7
    333a:	b004      	add	sp, #16
    333c:	bd80      	pop	{r7, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	00003093 	.word	0x00003093

00003344 <hri_sercomusart_write_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    3344:	b580      	push	{r7, lr}
    3346:	b084      	sub	sp, #16
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	000a      	movs	r2, r1
    334e:	1cfb      	adds	r3, r7, #3
    3350:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	2103      	movs	r1, #3
    3356:	0018      	movs	r0, r3
    3358:	4b0b      	ldr	r3, [pc, #44]	; (3388 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x44>)
    335a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	681b      	ldr	r3, [r3, #0]
    3360:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	2202      	movs	r2, #2
    3366:	4393      	bics	r3, r2
    3368:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    336a:	1cfb      	adds	r3, r7, #3
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	005b      	lsls	r3, r3, #1
    3370:	001a      	movs	r2, r3
    3372:	68fb      	ldr	r3, [r7, #12]
    3374:	4313      	orrs	r3, r2
    3376:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	68fa      	ldr	r2, [r7, #12]
    337c:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	46bd      	mov	sp, r7
    3382:	b004      	add	sp, #16
    3384:	bd80      	pop	{r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	00003093 	.word	0x00003093

0000338c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    338c:	b580      	push	{r7, lr}
    338e:	b082      	sub	sp, #8
    3390:	af00      	add	r7, sp, #0
    3392:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	2103      	movs	r1, #3
    3398:	0018      	movs	r0, r3
    339a:	4b06      	ldr	r3, [pc, #24]	; (33b4 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    339c:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	681b      	ldr	r3, [r3, #0]
    33a2:	2202      	movs	r2, #2
    33a4:	4393      	bics	r3, r2
    33a6:	001a      	movs	r2, r3
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	46bd      	mov	sp, r7
    33b0:	b002      	add	sp, #8
    33b2:	bd80      	pop	{r7, pc}
    33b4:	00003093 	.word	0x00003093

000033b8 <hri_sercomusart_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    33c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	683a      	ldr	r2, [r7, #0]
    33c6:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33c8:	46c0      	nop			; (mov r8, r8)
    33ca:	46bd      	mov	sp, r7
    33cc:	b002      	add	sp, #8
    33ce:	bd80      	pop	{r7, pc}

000033d0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    33d0:	b580      	push	{r7, lr}
    33d2:	b082      	sub	sp, #8
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
    33d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	683a      	ldr	r2, [r7, #0]
    33de:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33e0:	46c0      	nop			; (mov r8, r8)
    33e2:	46bd      	mov	sp, r7
    33e4:	b002      	add	sp, #8
    33e6:	bd80      	pop	{r7, pc}

000033e8 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b082      	sub	sp, #8
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
    33f0:	000a      	movs	r2, r1
    33f2:	1cfb      	adds	r3, r7, #3
    33f4:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    33f6:	687b      	ldr	r3, [r7, #4]
    33f8:	1cfa      	adds	r2, r7, #3
    33fa:	7812      	ldrb	r2, [r2, #0]
    33fc:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	46bd      	mov	sp, r7
    3402:	b002      	add	sp, #8
    3404:	bd80      	pop	{r7, pc}

00003406 <hri_sercomusart_read_DATA_reg>:
{
	return ((Sercom *)hw)->USART.RXPL.reg;
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    3406:	b580      	push	{r7, lr}
    3408:	b082      	sub	sp, #8
    340a:	af00      	add	r7, sp, #0
    340c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3412:	b29b      	uxth	r3, r3
}
    3414:	0018      	movs	r0, r3
    3416:	46bd      	mov	sp, r7
    3418:	b002      	add	sp, #8
    341a:	bd80      	pop	{r7, pc}

0000341c <hri_sercomusart_write_DATA_reg>:

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    341c:	b580      	push	{r7, lr}
    341e:	b082      	sub	sp, #8
    3420:	af00      	add	r7, sp, #0
    3422:	6078      	str	r0, [r7, #4]
    3424:	000a      	movs	r2, r1
    3426:	1cbb      	adds	r3, r7, #2
    3428:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	1cba      	adds	r2, r7, #2
    342e:	8812      	ldrh	r2, [r2, #0]
    3430:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	46bd      	mov	sp, r7
    3436:	b002      	add	sp, #8
    3438:	bd80      	pop	{r7, pc}

0000343a <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    343a:	b580      	push	{r7, lr}
    343c:	b082      	sub	sp, #8
    343e:	af00      	add	r7, sp, #0
    3440:	6078      	str	r0, [r7, #4]
    3442:	000a      	movs	r2, r1
    3444:	1cfb      	adds	r3, r7, #3
    3446:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	1cfa      	adds	r2, r7, #3
    344c:	2130      	movs	r1, #48	; 0x30
    344e:	7812      	ldrb	r2, [r2, #0]
    3450:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	46bd      	mov	sp, r7
    3456:	b002      	add	sp, #8
    3458:	bd80      	pop	{r7, pc}
	...

0000345c <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	6078      	str	r0, [r7, #4]
    3464:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    3466:	687b      	ldr	r3, [r7, #4]
    3468:	1e5a      	subs	r2, r3, #1
    346a:	4193      	sbcs	r3, r2
    346c:	b2db      	uxtb	r3, r3
    346e:	4908      	ldr	r1, [pc, #32]	; (3490 <_usart_sync_init+0x34>)
    3470:	22bf      	movs	r2, #191	; 0xbf
    3472:	0018      	movs	r0, r3
    3474:	4b07      	ldr	r3, [pc, #28]	; (3494 <_usart_sync_init+0x38>)
    3476:	4798      	blx	r3

	device->hw = hw;
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	683a      	ldr	r2, [r7, #0]
    347c:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    347e:	683b      	ldr	r3, [r7, #0]
    3480:	0018      	movs	r0, r3
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <_usart_sync_init+0x3c>)
    3484:	4798      	blx	r3
    3486:	0003      	movs	r3, r0
}
    3488:	0018      	movs	r0, r3
    348a:	46bd      	mov	sp, r7
    348c:	b002      	add	sp, #8
    348e:	bd80      	pop	{r7, pc}
    3490:	0001f234 	.word	0x0001f234
    3494:	00002379 	.word	0x00002379
    3498:	00003629 	.word	0x00003629

0000349c <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    349c:	b580      	push	{r7, lr}
    349e:	b082      	sub	sp, #8
    34a0:	af00      	add	r7, sp, #0
    34a2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	0018      	movs	r0, r3
    34aa:	4b03      	ldr	r3, [pc, #12]	; (34b8 <_usart_sync_enable+0x1c>)
    34ac:	4798      	blx	r3
}
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	46bd      	mov	sp, r7
    34b2:	b002      	add	sp, #8
    34b4:	bd80      	pop	{r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	000032e1 	.word	0x000032e1

000034bc <_usart_sync_set_baud_rate>:

/**
 * \brief Set baud rate
 */
void _usart_sync_set_baud_rate(struct _usart_sync_device *const device, const uint32_t baud_rate)
{
    34bc:	b580      	push	{r7, lr}
    34be:	b082      	sub	sp, #8
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	6039      	str	r1, [r7, #0]
	_usart_set_baud_rate(device->hw, baud_rate);
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	683a      	ldr	r2, [r7, #0]
    34cc:	0011      	movs	r1, r2
    34ce:	0018      	movs	r0, r3
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <_usart_sync_set_baud_rate+0x20>)
    34d2:	4798      	blx	r3
}
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	46bd      	mov	sp, r7
    34d8:	b002      	add	sp, #8
    34da:	bd80      	pop	{r7, pc}
    34dc:	000037e1 	.word	0x000037e1

000034e0 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
    34e8:	000a      	movs	r2, r1
    34ea:	1cfb      	adds	r3, r7, #3
    34ec:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	681a      	ldr	r2, [r3, #0]
    34f2:	1cfb      	adds	r3, r7, #3
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	b29b      	uxth	r3, r3
    34f8:	0019      	movs	r1, r3
    34fa:	0010      	movs	r0, r2
    34fc:	4b02      	ldr	r3, [pc, #8]	; (3508 <_usart_sync_write_byte+0x28>)
    34fe:	4798      	blx	r3
}
    3500:	46c0      	nop			; (mov r8, r8)
    3502:	46bd      	mov	sp, r7
    3504:	b002      	add	sp, #8
    3506:	bd80      	pop	{r7, pc}
    3508:	0000341d 	.word	0x0000341d

0000350c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	681b      	ldr	r3, [r3, #0]
    3518:	0018      	movs	r0, r3
    351a:	4b04      	ldr	r3, [pc, #16]	; (352c <_usart_sync_read_byte+0x20>)
    351c:	4798      	blx	r3
    351e:	0003      	movs	r3, r0
    3520:	b2db      	uxtb	r3, r3
}
    3522:	0018      	movs	r0, r3
    3524:	46bd      	mov	sp, r7
    3526:	b002      	add	sp, #8
    3528:	bd80      	pop	{r7, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	00003407 	.word	0x00003407

00003530 <_usart_sync_is_byte_sent>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
    3530:	b580      	push	{r7, lr}
    3532:	b082      	sub	sp, #8
    3534:	af00      	add	r7, sp, #0
    3536:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	0018      	movs	r0, r3
    353e:	4b03      	ldr	r3, [pc, #12]	; (354c <_usart_sync_is_byte_sent+0x1c>)
    3540:	4798      	blx	r3
    3542:	0003      	movs	r3, r0
}
    3544:	0018      	movs	r0, r3
    3546:	46bd      	mov	sp, r7
    3548:	b002      	add	sp, #8
    354a:	bd80      	pop	{r7, pc}
    354c:	0000326f 	.word	0x0000326f

00003550 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    3550:	b580      	push	{r7, lr}
    3552:	b082      	sub	sp, #8
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	0018      	movs	r0, r3
    355e:	4b03      	ldr	r3, [pc, #12]	; (356c <_usart_sync_is_byte_received+0x1c>)
    3560:	4798      	blx	r3
    3562:	0003      	movs	r3, r0
}
    3564:	0018      	movs	r0, r3
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}
    356c:	00003291 	.word	0x00003291

00003570 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ || defined __ATSAML21G18B__           \
    || defined __SAML21J18B__ || defined __ATSAML21J18B__ || defined __ATSAMR30G18A__ || defined __ATSAMR30E18A__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	4a08      	ldr	r2, [pc, #32]	; (359c <_sercom_get_hardware_index+0x2c>)
    357c:	4293      	cmp	r3, r2
    357e:	d101      	bne.n	3584 <_sercom_get_hardware_index+0x14>
		return 5;
    3580:	2305      	movs	r3, #5
    3582:	e006      	b.n	3592 <_sercom_get_hardware_index+0x22>
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	22be      	movs	r2, #190	; 0xbe
    3588:	0612      	lsls	r2, r2, #24
    358a:	4694      	mov	ip, r2
    358c:	4463      	add	r3, ip
    358e:	0a9b      	lsrs	r3, r3, #10
    3590:	b2db      	uxtb	r3, r3
}
    3592:	0018      	movs	r0, r3
    3594:	46bd      	mov	sp, r7
    3596:	b002      	add	sp, #8
    3598:	bd80      	pop	{r7, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	43000400 	.word	0x43000400

000035a0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    35a0:	b590      	push	{r4, r7, lr}
    35a2:	b085      	sub	sp, #20
    35a4:	af00      	add	r7, sp, #0
    35a6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    35a8:	230e      	movs	r3, #14
    35aa:	18fc      	adds	r4, r7, r3
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	0018      	movs	r0, r3
    35b0:	4b19      	ldr	r3, [pc, #100]	; (3618 <_get_sercom_index+0x78>)
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35b8:	230f      	movs	r3, #15
    35ba:	18fb      	adds	r3, r7, r3
    35bc:	2200      	movs	r2, #0
    35be:	701a      	strb	r2, [r3, #0]
    35c0:	e018      	b.n	35f4 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    35c2:	230f      	movs	r3, #15
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	781a      	ldrb	r2, [r3, #0]
    35c8:	4914      	ldr	r1, [pc, #80]	; (361c <_get_sercom_index+0x7c>)
    35ca:	0013      	movs	r3, r2
    35cc:	009b      	lsls	r3, r3, #2
    35ce:	189b      	adds	r3, r3, r2
    35d0:	009b      	lsls	r3, r3, #2
    35d2:	5c5b      	ldrb	r3, [r3, r1]
    35d4:	220e      	movs	r2, #14
    35d6:	18ba      	adds	r2, r7, r2
    35d8:	7812      	ldrb	r2, [r2, #0]
    35da:	429a      	cmp	r2, r3
    35dc:	d103      	bne.n	35e6 <_get_sercom_index+0x46>
			return i;
    35de:	230f      	movs	r3, #15
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	e013      	b.n	360e <_get_sercom_index+0x6e>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35e6:	230f      	movs	r3, #15
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	781a      	ldrb	r2, [r3, #0]
    35ec:	230f      	movs	r3, #15
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	3201      	adds	r2, #1
    35f2:	701a      	strb	r2, [r3, #0]
    35f4:	230f      	movs	r3, #15
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	781b      	ldrb	r3, [r3, #0]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d0e1      	beq.n	35c2 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    35fe:	2391      	movs	r3, #145	; 0x91
    3600:	009a      	lsls	r2, r3, #2
    3602:	4b07      	ldr	r3, [pc, #28]	; (3620 <_get_sercom_index+0x80>)
    3604:	0019      	movs	r1, r3
    3606:	2000      	movs	r0, #0
    3608:	4b06      	ldr	r3, [pc, #24]	; (3624 <_get_sercom_index+0x84>)
    360a:	4798      	blx	r3
	return 0;
    360c:	2300      	movs	r3, #0
}
    360e:	0018      	movs	r0, r3
    3610:	46bd      	mov	sp, r7
    3612:	b005      	add	sp, #20
    3614:	bd90      	pop	{r4, r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	00003571 	.word	0x00003571
    361c:	200000d4 	.word	0x200000d4
    3620:	0001f234 	.word	0x0001f234
    3624:	00002379 	.word	0x00002379

00003628 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3628:	b590      	push	{r4, r7, lr}
    362a:	b085      	sub	sp, #20
    362c:	af00      	add	r7, sp, #0
    362e:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    3630:	230f      	movs	r3, #15
    3632:	18fc      	adds	r4, r7, r3
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	0018      	movs	r0, r3
    3638:	4b5f      	ldr	r3, [pc, #380]	; (37b8 <_usart_init+0x190>)
    363a:	4798      	blx	r3
    363c:	0003      	movs	r3, r0
    363e:	7023      	strb	r3, [r4, #0]

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	2101      	movs	r1, #1
    3644:	0018      	movs	r0, r3
    3646:	4b5d      	ldr	r3, [pc, #372]	; (37bc <_usart_init+0x194>)
    3648:	4798      	blx	r3
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0018      	movs	r0, r3
    364e:	4b5c      	ldr	r3, [pc, #368]	; (37c0 <_usart_init+0x198>)
    3650:	4798      	blx	r3
    3652:	1e03      	subs	r3, r0, #0
    3654:	d002      	beq.n	365c <_usart_init+0x34>
		return ERR_DENIED;
    3656:	2311      	movs	r3, #17
    3658:	425b      	negs	r3, r3
    365a:	e0a8      	b.n	37ae <_usart_init+0x186>
	}
	hri_sercomusart_set_CTRLA_SWRST_bit(hw);
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	0018      	movs	r0, r3
    3660:	4b58      	ldr	r3, [pc, #352]	; (37c4 <_usart_init+0x19c>)
    3662:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	2101      	movs	r1, #1
    3668:	0018      	movs	r0, r3
    366a:	4b54      	ldr	r3, [pc, #336]	; (37bc <_usart_init+0x194>)
    366c:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    366e:	230f      	movs	r3, #15
    3670:	18fb      	adds	r3, r7, r3
    3672:	781a      	ldrb	r2, [r3, #0]
    3674:	4954      	ldr	r1, [pc, #336]	; (37c8 <_usart_init+0x1a0>)
    3676:	0013      	movs	r3, r2
    3678:	009b      	lsls	r3, r3, #2
    367a:	189b      	adds	r3, r3, r2
    367c:	009b      	lsls	r3, r3, #2
    367e:	18cb      	adds	r3, r1, r3
    3680:	3304      	adds	r3, #4
    3682:	681a      	ldr	r2, [r3, #0]
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	0011      	movs	r1, r2
    3688:	0018      	movs	r0, r3
    368a:	4b50      	ldr	r3, [pc, #320]	; (37cc <_usart_init+0x1a4>)
    368c:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    368e:	230f      	movs	r3, #15
    3690:	18fb      	adds	r3, r7, r3
    3692:	781a      	ldrb	r2, [r3, #0]
    3694:	494c      	ldr	r1, [pc, #304]	; (37c8 <_usart_init+0x1a0>)
    3696:	0013      	movs	r3, r2
    3698:	009b      	lsls	r3, r3, #2
    369a:	189b      	adds	r3, r3, r2
    369c:	009b      	lsls	r3, r3, #2
    369e:	18cb      	adds	r3, r1, r3
    36a0:	3308      	adds	r3, #8
    36a2:	681a      	ldr	r2, [r3, #0]
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	0011      	movs	r1, r2
    36a8:	0018      	movs	r0, r3
    36aa:	4b49      	ldr	r3, [pc, #292]	; (37d0 <_usart_init+0x1a8>)
    36ac:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    36ae:	230f      	movs	r3, #15
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	781a      	ldrb	r2, [r3, #0]
    36b4:	4944      	ldr	r1, [pc, #272]	; (37c8 <_usart_init+0x1a0>)
    36b6:	0013      	movs	r3, r2
    36b8:	009b      	lsls	r3, r3, #2
    36ba:	189b      	adds	r3, r3, r2
    36bc:	009b      	lsls	r3, r3, #2
    36be:	18cb      	adds	r3, r1, r3
    36c0:	3304      	adds	r3, #4
    36c2:	681a      	ldr	r2, [r3, #0]
    36c4:	2380      	movs	r3, #128	; 0x80
    36c6:	019b      	lsls	r3, r3, #6
    36c8:	4013      	ands	r3, r2
    36ca:	d10e      	bne.n	36ea <_usart_init+0xc2>
    36cc:	230f      	movs	r3, #15
    36ce:	18fb      	adds	r3, r7, r3
    36d0:	781a      	ldrb	r2, [r3, #0]
    36d2:	493d      	ldr	r1, [pc, #244]	; (37c8 <_usart_init+0x1a0>)
    36d4:	0013      	movs	r3, r2
    36d6:	009b      	lsls	r3, r3, #2
    36d8:	189b      	adds	r3, r3, r2
    36da:	009b      	lsls	r3, r3, #2
    36dc:	18cb      	adds	r3, r1, r3
    36de:	3304      	adds	r3, #4
    36e0:	681a      	ldr	r2, [r3, #0]
    36e2:	23c0      	movs	r3, #192	; 0xc0
    36e4:	01db      	lsls	r3, r3, #7
    36e6:	4013      	ands	r3, r2
    36e8:	d030      	beq.n	374c <_usart_init+0x124>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    36ea:	230f      	movs	r3, #15
    36ec:	18fb      	adds	r3, r7, r3
    36ee:	781a      	ldrb	r2, [r3, #0]
    36f0:	4935      	ldr	r1, [pc, #212]	; (37c8 <_usart_init+0x1a0>)
    36f2:	0013      	movs	r3, r2
    36f4:	009b      	lsls	r3, r3, #2
    36f6:	189b      	adds	r3, r3, r2
    36f8:	009b      	lsls	r3, r3, #2
    36fa:	18cb      	adds	r3, r1, r3
    36fc:	330c      	adds	r3, #12
    36fe:	881b      	ldrh	r3, [r3, #0]
    3700:	04db      	lsls	r3, r3, #19
    3702:	0cdb      	lsrs	r3, r3, #19
    3704:	b299      	uxth	r1, r3
    3706:	687a      	ldr	r2, [r7, #4]
    3708:	8993      	ldrh	r3, [r2, #12]
    370a:	04c9      	lsls	r1, r1, #19
    370c:	0cc8      	lsrs	r0, r1, #19
    370e:	0b5b      	lsrs	r3, r3, #13
    3710:	035b      	lsls	r3, r3, #13
    3712:	1c19      	adds	r1, r3, #0
    3714:	1c03      	adds	r3, r0, #0
    3716:	430b      	orrs	r3, r1
    3718:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    371a:	230f      	movs	r3, #15
    371c:	18fb      	adds	r3, r7, r3
    371e:	781a      	ldrb	r2, [r3, #0]
    3720:	4929      	ldr	r1, [pc, #164]	; (37c8 <_usart_init+0x1a0>)
    3722:	0013      	movs	r3, r2
    3724:	009b      	lsls	r3, r3, #2
    3726:	189b      	adds	r3, r3, r2
    3728:	009b      	lsls	r3, r3, #2
    372a:	18cb      	adds	r3, r1, r3
    372c:	330e      	adds	r3, #14
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	1c1a      	adds	r2, r3, #0
    3732:	2307      	movs	r3, #7
    3734:	4013      	ands	r3, r2
    3736:	b2d9      	uxtb	r1, r3
    3738:	687a      	ldr	r2, [r7, #4]
    373a:	8993      	ldrh	r3, [r2, #12]
    373c:	0348      	lsls	r0, r1, #13
    373e:	04db      	lsls	r3, r3, #19
    3740:	0cdb      	lsrs	r3, r3, #19
    3742:	1c19      	adds	r1, r3, #0
    3744:	1c03      	adds	r3, r0, #0
    3746:	430b      	orrs	r3, r1
    3748:	8193      	strh	r3, [r2, #12]
    374a:	e00f      	b.n	376c <_usart_init+0x144>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    374c:	230f      	movs	r3, #15
    374e:	18fb      	adds	r3, r7, r3
    3750:	781a      	ldrb	r2, [r3, #0]
    3752:	491d      	ldr	r1, [pc, #116]	; (37c8 <_usart_init+0x1a0>)
    3754:	0013      	movs	r3, r2
    3756:	009b      	lsls	r3, r3, #2
    3758:	189b      	adds	r3, r3, r2
    375a:	009b      	lsls	r3, r3, #2
    375c:	18cb      	adds	r3, r1, r3
    375e:	330c      	adds	r3, #12
    3760:	881a      	ldrh	r2, [r3, #0]
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	0011      	movs	r1, r2
    3766:	0018      	movs	r0, r3
    3768:	4b1a      	ldr	r3, [pc, #104]	; (37d4 <_usart_init+0x1ac>)
    376a:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    376c:	230f      	movs	r3, #15
    376e:	18fb      	adds	r3, r7, r3
    3770:	781a      	ldrb	r2, [r3, #0]
    3772:	4915      	ldr	r1, [pc, #84]	; (37c8 <_usart_init+0x1a0>)
    3774:	0013      	movs	r3, r2
    3776:	009b      	lsls	r3, r3, #2
    3778:	189b      	adds	r3, r3, r2
    377a:	009b      	lsls	r3, r3, #2
    377c:	18cb      	adds	r3, r1, r3
    377e:	330f      	adds	r3, #15
    3780:	781a      	ldrb	r2, [r3, #0]
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	0011      	movs	r1, r2
    3786:	0018      	movs	r0, r3
    3788:	4b13      	ldr	r3, [pc, #76]	; (37d8 <_usart_init+0x1b0>)
    378a:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    378c:	230f      	movs	r3, #15
    378e:	18fb      	adds	r3, r7, r3
    3790:	781a      	ldrb	r2, [r3, #0]
    3792:	490d      	ldr	r1, [pc, #52]	; (37c8 <_usart_init+0x1a0>)
    3794:	0013      	movs	r3, r2
    3796:	009b      	lsls	r3, r3, #2
    3798:	189b      	adds	r3, r3, r2
    379a:	009b      	lsls	r3, r3, #2
    379c:	18cb      	adds	r3, r1, r3
    379e:	3310      	adds	r3, #16
    37a0:	781a      	ldrb	r2, [r3, #0]
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	0011      	movs	r1, r2
    37a6:	0018      	movs	r0, r3
    37a8:	4b0c      	ldr	r3, [pc, #48]	; (37dc <_usart_init+0x1b4>)
    37aa:	4798      	blx	r3

	return ERR_NONE;
    37ac:	2300      	movs	r3, #0
}
    37ae:	0018      	movs	r0, r3
    37b0:	46bd      	mov	sp, r7
    37b2:	b005      	add	sp, #20
    37b4:	bd90      	pop	{r4, r7, pc}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	000035a1 	.word	0x000035a1
    37bc:	00003093 	.word	0x00003093
    37c0:	0000330d 	.word	0x0000330d
    37c4:	000032b5 	.word	0x000032b5
    37c8:	200000d4 	.word	0x200000d4
    37cc:	000033b9 	.word	0x000033b9
    37d0:	000033d1 	.word	0x000033d1
    37d4:	00003251 	.word	0x00003251
    37d8:	000033e9 	.word	0x000033e9
    37dc:	0000343b 	.word	0x0000343b

000037e0 <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    37e0:	b590      	push	{r4, r7, lr}
    37e2:	b085      	sub	sp, #20
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
    37e8:	6039      	str	r1, [r7, #0]
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    37ea:	230f      	movs	r3, #15
    37ec:	18fc      	adds	r4, r7, r3
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	0018      	movs	r0, r3
    37f2:	4b15      	ldr	r3, [pc, #84]	; (3848 <_usart_set_baud_rate+0x68>)
    37f4:	4798      	blx	r3
    37f6:	0003      	movs	r3, r0
    37f8:	7023      	strb	r3, [r4, #0]

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	0018      	movs	r0, r3
    37fe:	4b13      	ldr	r3, [pc, #76]	; (384c <_usart_set_baud_rate+0x6c>)
    3800:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    3802:	2308      	movs	r3, #8
    3804:	18fb      	adds	r3, r7, r3
    3806:	0018      	movs	r0, r3
    3808:	4b11      	ldr	r3, [pc, #68]	; (3850 <_usart_set_baud_rate+0x70>)
    380a:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	2102      	movs	r1, #2
    3810:	0018      	movs	r0, r3
    3812:	4b10      	ldr	r3, [pc, #64]	; (3854 <_usart_set_baud_rate+0x74>)
    3814:	4798      	blx	r3
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    3816:	683b      	ldr	r3, [r7, #0]
    3818:	b29a      	uxth	r2, r3
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	0011      	movs	r1, r2
    381e:	0018      	movs	r0, r3
    3820:	4b0d      	ldr	r3, [pc, #52]	; (3858 <_usart_set_baud_rate+0x78>)
    3822:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    3824:	2308      	movs	r3, #8
    3826:	18fb      	adds	r3, r7, r3
    3828:	0018      	movs	r0, r3
    382a:	4b0c      	ldr	r3, [pc, #48]	; (385c <_usart_set_baud_rate+0x7c>)
    382c:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    382e:	230f      	movs	r3, #15
    3830:	18fb      	adds	r3, r7, r3
    3832:	781a      	ldrb	r2, [r3, #0]
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	0011      	movs	r1, r2
    3838:	0018      	movs	r0, r3
    383a:	4b09      	ldr	r3, [pc, #36]	; (3860 <_usart_set_baud_rate+0x80>)
    383c:	4798      	blx	r3
}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	46bd      	mov	sp, r7
    3842:	b005      	add	sp, #20
    3844:	bd90      	pop	{r4, r7, pc}
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	0000330d 	.word	0x0000330d
    384c:	0000338d 	.word	0x0000338d
    3850:	00001b25 	.word	0x00001b25
    3854:	00003093 	.word	0x00003093
    3858:	00003251 	.word	0x00003251
    385c:	00001b47 	.word	0x00001b47
    3860:	00003345 	.word	0x00003345

00003864 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	2b00      	cmp	r3, #0
    3872:	d004      	beq.n	387e <_spi_load_regs_master+0x1a>
    3874:	683b      	ldr	r3, [r7, #0]
    3876:	2b00      	cmp	r3, #0
    3878:	d001      	beq.n	387e <_spi_load_regs_master+0x1a>
    387a:	2301      	movs	r3, #1
    387c:	e000      	b.n	3880 <_spi_load_regs_master+0x1c>
    387e:	2300      	movs	r3, #0
    3880:	1c1a      	adds	r2, r3, #0
    3882:	2301      	movs	r3, #1
    3884:	4013      	ands	r3, r2
    3886:	b2d8      	uxtb	r0, r3
    3888:	238e      	movs	r3, #142	; 0x8e
    388a:	011a      	lsls	r2, r3, #4
    388c:	4b1f      	ldr	r3, [pc, #124]	; (390c <_spi_load_regs_master+0xa8>)
    388e:	0019      	movs	r1, r3
    3890:	4b1f      	ldr	r3, [pc, #124]	; (3910 <_spi_load_regs_master+0xac>)
    3892:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3894:	683b      	ldr	r3, [r7, #0]
    3896:	781a      	ldrb	r2, [r3, #0]
    3898:	7859      	ldrb	r1, [r3, #1]
    389a:	0209      	lsls	r1, r1, #8
    389c:	430a      	orrs	r2, r1
    389e:	7899      	ldrb	r1, [r3, #2]
    38a0:	0409      	lsls	r1, r1, #16
    38a2:	430a      	orrs	r2, r1
    38a4:	78db      	ldrb	r3, [r3, #3]
    38a6:	061b      	lsls	r3, r3, #24
    38a8:	4313      	orrs	r3, r2
    38aa:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    38ac:	4b19      	ldr	r3, [pc, #100]	; (3914 <_spi_load_regs_master+0xb0>)
    38ae:	401a      	ands	r2, r3
    38b0:	687b      	ldr	r3, [r7, #4]
    38b2:	0011      	movs	r1, r2
    38b4:	0018      	movs	r0, r3
    38b6:	4b18      	ldr	r3, [pc, #96]	; (3918 <_spi_load_regs_master+0xb4>)
    38b8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	791a      	ldrb	r2, [r3, #4]
    38be:	7959      	ldrb	r1, [r3, #5]
    38c0:	0209      	lsls	r1, r1, #8
    38c2:	430a      	orrs	r2, r1
    38c4:	7999      	ldrb	r1, [r3, #6]
    38c6:	0409      	lsls	r1, r1, #16
    38c8:	430a      	orrs	r2, r1
    38ca:	79db      	ldrb	r3, [r3, #7]
    38cc:	061b      	lsls	r3, r3, #24
    38ce:	4313      	orrs	r3, r2
    38d0:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    38d2:	4b12      	ldr	r3, [pc, #72]	; (391c <_spi_load_regs_master+0xb8>)
    38d4:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    38d6:	2280      	movs	r2, #128	; 0x80
    38d8:	0292      	lsls	r2, r2, #10
    38da:	431a      	orrs	r2, r3
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	0011      	movs	r1, r2
    38e0:	0018      	movs	r0, r3
    38e2:	4b0f      	ldr	r3, [pc, #60]	; (3920 <_spi_load_regs_master+0xbc>)
    38e4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    38e6:	683b      	ldr	r3, [r7, #0]
    38e8:	7b1a      	ldrb	r2, [r3, #12]
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	0011      	movs	r1, r2
    38ee:	0018      	movs	r0, r3
    38f0:	4b0c      	ldr	r3, [pc, #48]	; (3924 <_spi_load_regs_master+0xc0>)
    38f2:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    38f4:	683b      	ldr	r3, [r7, #0]
    38f6:	7b5a      	ldrb	r2, [r3, #13]
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	0011      	movs	r1, r2
    38fc:	0018      	movs	r0, r3
    38fe:	4b0a      	ldr	r3, [pc, #40]	; (3928 <_spi_load_regs_master+0xc4>)
    3900:	4798      	blx	r3
}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	46bd      	mov	sp, r7
    3906:	b002      	add	sp, #8
    3908:	bd80      	pop	{r7, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	0001f234 	.word	0x0001f234
    3910:	00002379 	.word	0x00002379
    3914:	fffffefc 	.word	0xfffffefc
    3918:	00003181 	.word	0x00003181
    391c:	fffd1dbf 	.word	0xfffd1dbf
    3920:	00003199 	.word	0x00003199
    3924:	000031b1 	.word	0x000031b1
    3928:	00003213 	.word	0x00003213

0000392c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    392c:	b580      	push	{r7, lr}
    392e:	b082      	sub	sp, #8
    3930:	af00      	add	r7, sp, #0
    3932:	6078      	str	r0, [r7, #4]
    3934:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	2b00      	cmp	r3, #0
    393a:	d004      	beq.n	3946 <_spi_load_regs_slave+0x1a>
    393c:	683b      	ldr	r3, [r7, #0]
    393e:	2b00      	cmp	r3, #0
    3940:	d001      	beq.n	3946 <_spi_load_regs_slave+0x1a>
    3942:	2301      	movs	r3, #1
    3944:	e000      	b.n	3948 <_spi_load_regs_slave+0x1c>
    3946:	2300      	movs	r3, #0
    3948:	1c1a      	adds	r2, r3, #0
    394a:	2301      	movs	r3, #1
    394c:	4013      	ands	r3, r2
    394e:	b2db      	uxtb	r3, r3
    3950:	4a29      	ldr	r2, [pc, #164]	; (39f8 <_spi_load_regs_slave+0xcc>)
    3952:	492a      	ldr	r1, [pc, #168]	; (39fc <_spi_load_regs_slave+0xd0>)
    3954:	0018      	movs	r0, r3
    3956:	4b2a      	ldr	r3, [pc, #168]	; (3a00 <_spi_load_regs_slave+0xd4>)
    3958:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    395a:	683b      	ldr	r3, [r7, #0]
    395c:	781a      	ldrb	r2, [r3, #0]
    395e:	7859      	ldrb	r1, [r3, #1]
    3960:	0209      	lsls	r1, r1, #8
    3962:	430a      	orrs	r2, r1
    3964:	7899      	ldrb	r1, [r3, #2]
    3966:	0409      	lsls	r1, r1, #16
    3968:	430a      	orrs	r2, r1
    396a:	78db      	ldrb	r3, [r3, #3]
    396c:	061b      	lsls	r3, r3, #24
    396e:	4313      	orrs	r3, r2
    3970:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    3972:	4b24      	ldr	r3, [pc, #144]	; (3a04 <_spi_load_regs_slave+0xd8>)
    3974:	401a      	ands	r2, r3
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	0011      	movs	r1, r2
    397a:	0018      	movs	r0, r3
    397c:	4b22      	ldr	r3, [pc, #136]	; (3a08 <_spi_load_regs_slave+0xdc>)
    397e:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3980:	683b      	ldr	r3, [r7, #0]
    3982:	791a      	ldrb	r2, [r3, #4]
    3984:	7959      	ldrb	r1, [r3, #5]
    3986:	0209      	lsls	r1, r1, #8
    3988:	430a      	orrs	r2, r1
    398a:	7999      	ldrb	r1, [r3, #6]
    398c:	0409      	lsls	r1, r1, #16
    398e:	430a      	orrs	r2, r1
    3990:	79db      	ldrb	r3, [r3, #7]
    3992:	061b      	lsls	r3, r3, #24
    3994:	4313      	orrs	r3, r2
    3996:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3998:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <_spi_load_regs_slave+0xe0>)
    399a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    399c:	4a1c      	ldr	r2, [pc, #112]	; (3a10 <_spi_load_regs_slave+0xe4>)
    399e:	431a      	orrs	r2, r3
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	0011      	movs	r1, r2
    39a4:	0018      	movs	r0, r3
    39a6:	4b1b      	ldr	r3, [pc, #108]	; (3a14 <_spi_load_regs_slave+0xe8>)
    39a8:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	7a1a      	ldrb	r2, [r3, #8]
    39ae:	7a59      	ldrb	r1, [r3, #9]
    39b0:	0209      	lsls	r1, r1, #8
    39b2:	430a      	orrs	r2, r1
    39b4:	7a99      	ldrb	r1, [r3, #10]
    39b6:	0409      	lsls	r1, r1, #16
    39b8:	430a      	orrs	r2, r1
    39ba:	7adb      	ldrb	r3, [r3, #11]
    39bc:	061b      	lsls	r3, r3, #24
    39be:	4313      	orrs	r3, r2
    39c0:	001a      	movs	r2, r3
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	0011      	movs	r1, r2
    39c6:	0018      	movs	r0, r3
    39c8:	4b13      	ldr	r3, [pc, #76]	; (3a18 <_spi_load_regs_slave+0xec>)
    39ca:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    39cc:	683b      	ldr	r3, [r7, #0]
    39ce:	7b5a      	ldrb	r2, [r3, #13]
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	0011      	movs	r1, r2
    39d4:	0018      	movs	r0, r3
    39d6:	4b11      	ldr	r3, [pc, #68]	; (3a1c <_spi_load_regs_slave+0xf0>)
    39d8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	2301      	movs	r3, #1
    39de:	425a      	negs	r2, r3
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	0011      	movs	r1, r2
    39e4:	0018      	movs	r0, r3
    39e6:	4b0e      	ldr	r3, [pc, #56]	; (3a20 <_spi_load_regs_slave+0xf4>)
    39e8:	4798      	blx	r3
    39ea:	1e03      	subs	r3, r0, #0
    39ec:	d1f6      	bne.n	39dc <_spi_load_regs_slave+0xb0>
		;
}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	46bd      	mov	sp, r7
    39f2:	b002      	add	sp, #8
    39f4:	bd80      	pop	{r7, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	000008f4 	.word	0x000008f4
    39fc:	0001f234 	.word	0x0001f234
    3a00:	00002379 	.word	0x00002379
    3a04:	fffffefc 	.word	0xfffffefc
    3a08:	00003181 	.word	0x00003181
    3a0c:	fffdddbf 	.word	0xfffdddbf
    3a10:	00020240 	.word	0x00020240
    3a14:	00003199 	.word	0x00003199
    3a18:	000031cf 	.word	0x000031cf
    3a1c:	00003213 	.word	0x00003213
    3a20:	00003073 	.word	0x00003073

00003a24 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    3a24:	b590      	push	{r4, r7, lr}
    3a26:	b085      	sub	sp, #20
    3a28:	af00      	add	r7, sp, #0
    3a2a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	220e      	movs	r2, #14
    3a30:	18bc      	adds	r4, r7, r2
    3a32:	0018      	movs	r0, r3
    3a34:	4b14      	ldr	r3, [pc, #80]	; (3a88 <_spi_get_regs+0x64>)
    3a36:	4798      	blx	r3
    3a38:	0003      	movs	r3, r0
    3a3a:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a3c:	230f      	movs	r3, #15
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	2200      	movs	r2, #0
    3a42:	701a      	strb	r2, [r3, #0]
    3a44:	e015      	b.n	3a72 <_spi_get_regs+0x4e>
		if (sercomspi_regs[i].n == n) {
    3a46:	2205      	movs	r2, #5
    3a48:	230e      	movs	r3, #14
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
    3a4e:	4293      	cmp	r3, r2
    3a50:	d108      	bne.n	3a64 <_spi_get_regs+0x40>
			return &sercomspi_regs[i];
    3a52:	230f      	movs	r3, #15
    3a54:	18fb      	adds	r3, r7, r3
    3a56:	781a      	ldrb	r2, [r3, #0]
    3a58:	0013      	movs	r3, r2
    3a5a:	011b      	lsls	r3, r3, #4
    3a5c:	189b      	adds	r3, r3, r2
    3a5e:	4a0b      	ldr	r2, [pc, #44]	; (3a8c <_spi_get_regs+0x68>)
    3a60:	189b      	adds	r3, r3, r2
    3a62:	e00c      	b.n	3a7e <_spi_get_regs+0x5a>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3a64:	230f      	movs	r3, #15
    3a66:	18fb      	adds	r3, r7, r3
    3a68:	781a      	ldrb	r2, [r3, #0]
    3a6a:	230f      	movs	r3, #15
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	3201      	adds	r2, #1
    3a70:	701a      	strb	r2, [r3, #0]
    3a72:	230f      	movs	r3, #15
    3a74:	18fb      	adds	r3, r7, r3
    3a76:	781b      	ldrb	r3, [r3, #0]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d0e4      	beq.n	3a46 <_spi_get_regs+0x22>
		}
	}

	return NULL;
    3a7c:	2300      	movs	r3, #0
}
    3a7e:	0018      	movs	r0, r3
    3a80:	46bd      	mov	sp, r7
    3a82:	b005      	add	sp, #20
    3a84:	bd90      	pop	{r4, r7, pc}
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	00003571 	.word	0x00003571
    3a8c:	0001f260 	.word	0x0001f260

00003a90 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3a90:	b580      	push	{r7, lr}
    3a92:	b084      	sub	sp, #16
    3a94:	af00      	add	r7, sp, #0
    3a96:	6078      	str	r0, [r7, #4]
    3a98:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    3a9a:	683b      	ldr	r3, [r7, #0]
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b3a      	ldr	r3, [pc, #232]	; (3b88 <_spi_m_sync_init+0xf8>)
    3aa0:	4798      	blx	r3
    3aa2:	0003      	movs	r3, r0
    3aa4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d004      	beq.n	3ab6 <_spi_m_sync_init+0x26>
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d001      	beq.n	3ab6 <_spi_m_sync_init+0x26>
    3ab2:	2301      	movs	r3, #1
    3ab4:	e000      	b.n	3ab8 <_spi_m_sync_init+0x28>
    3ab6:	2300      	movs	r3, #0
    3ab8:	1c1a      	adds	r2, r3, #0
    3aba:	2301      	movs	r3, #1
    3abc:	4013      	ands	r3, r2
    3abe:	b2db      	uxtb	r3, r3
    3ac0:	4a32      	ldr	r2, [pc, #200]	; (3b8c <_spi_m_sync_init+0xfc>)
    3ac2:	4933      	ldr	r1, [pc, #204]	; (3b90 <_spi_m_sync_init+0x100>)
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b33      	ldr	r3, [pc, #204]	; (3b94 <_spi_m_sync_init+0x104>)
    3ac8:	4798      	blx	r3

	if (regs == NULL) {
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	2b00      	cmp	r3, #0
    3ace:	d102      	bne.n	3ad6 <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    3ad0:	230d      	movs	r3, #13
    3ad2:	425b      	negs	r3, r3
    3ad4:	e053      	b.n	3b7e <_spi_m_sync_init+0xee>
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3ad6:	683b      	ldr	r3, [r7, #0]
    3ad8:	2101      	movs	r1, #1
    3ada:	0018      	movs	r0, r3
    3adc:	4b2e      	ldr	r3, [pc, #184]	; (3b98 <_spi_m_sync_init+0x108>)
    3ade:	4798      	blx	r3
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3ae0:	683b      	ldr	r3, [r7, #0]
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b2d      	ldr	r3, [pc, #180]	; (3b9c <_spi_m_sync_init+0x10c>)
    3ae6:	4798      	blx	r3
    3ae8:	1e03      	subs	r3, r0, #0
    3aea:	d002      	beq.n	3af2 <_spi_m_sync_init+0x62>
		return ERR_DENIED;
    3aec:	2311      	movs	r3, #17
    3aee:	425b      	negs	r3, r3
    3af0:	e045      	b.n	3b7e <_spi_m_sync_init+0xee>
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
    3af2:	683b      	ldr	r3, [r7, #0]
    3af4:	0018      	movs	r0, r3
    3af6:	4b2a      	ldr	r3, [pc, #168]	; (3ba0 <_spi_m_sync_init+0x110>)
    3af8:	4798      	blx	r3
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	2101      	movs	r1, #1
    3afe:	0018      	movs	r0, r3
    3b00:	4b25      	ldr	r3, [pc, #148]	; (3b98 <_spi_m_sync_init+0x108>)
    3b02:	4798      	blx	r3
	dev->prvt = hw;
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	683a      	ldr	r2, [r7, #0]
    3b08:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b0a:	68fb      	ldr	r3, [r7, #12]
    3b0c:	781a      	ldrb	r2, [r3, #0]
    3b0e:	7859      	ldrb	r1, [r3, #1]
    3b10:	0209      	lsls	r1, r1, #8
    3b12:	430a      	orrs	r2, r1
    3b14:	7899      	ldrb	r1, [r3, #2]
    3b16:	0409      	lsls	r1, r1, #16
    3b18:	430a      	orrs	r2, r1
    3b1a:	78db      	ldrb	r3, [r3, #3]
    3b1c:	061b      	lsls	r3, r3, #24
    3b1e:	4313      	orrs	r3, r2
    3b20:	001a      	movs	r2, r3
    3b22:	231c      	movs	r3, #28
    3b24:	4013      	ands	r3, r2
    3b26:	2b08      	cmp	r3, #8
    3b28:	d106      	bne.n	3b38 <_spi_m_sync_init+0xa8>
		_spi_load_regs_slave(hw, regs);
    3b2a:	68fa      	ldr	r2, [r7, #12]
    3b2c:	683b      	ldr	r3, [r7, #0]
    3b2e:	0011      	movs	r1, r2
    3b30:	0018      	movs	r0, r3
    3b32:	4b1c      	ldr	r3, [pc, #112]	; (3ba4 <_spi_m_sync_init+0x114>)
    3b34:	4798      	blx	r3
    3b36:	e005      	b.n	3b44 <_spi_m_sync_init+0xb4>
	} else {
		_spi_load_regs_master(hw, regs);
    3b38:	68fa      	ldr	r2, [r7, #12]
    3b3a:	683b      	ldr	r3, [r7, #0]
    3b3c:	0011      	movs	r1, r2
    3b3e:	0018      	movs	r0, r3
    3b40:	4b19      	ldr	r3, [pc, #100]	; (3ba8 <_spi_m_sync_init+0x118>)
    3b42:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b44:	68fb      	ldr	r3, [r7, #12]
    3b46:	791a      	ldrb	r2, [r3, #4]
    3b48:	7959      	ldrb	r1, [r3, #5]
    3b4a:	0209      	lsls	r1, r1, #8
    3b4c:	430a      	orrs	r2, r1
    3b4e:	7999      	ldrb	r1, [r3, #6]
    3b50:	0409      	lsls	r1, r1, #16
    3b52:	430a      	orrs	r2, r1
    3b54:	79db      	ldrb	r3, [r3, #7]
    3b56:	061b      	lsls	r3, r3, #24
    3b58:	4313      	orrs	r3, r2
    3b5a:	001a      	movs	r2, r3
    3b5c:	2307      	movs	r3, #7
    3b5e:	4013      	ands	r3, r2
    3b60:	d101      	bne.n	3b66 <_spi_m_sync_init+0xd6>
    3b62:	2201      	movs	r2, #1
    3b64:	e000      	b.n	3b68 <_spi_m_sync_init+0xd8>
    3b66:	2202      	movs	r2, #2
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    3b6c:	68fb      	ldr	r3, [r7, #12]
    3b6e:	7b9a      	ldrb	r2, [r3, #14]
    3b70:	7bdb      	ldrb	r3, [r3, #15]
    3b72:	021b      	lsls	r3, r3, #8
    3b74:	4313      	orrs	r3, r2
    3b76:	b29a      	uxth	r2, r3
    3b78:	687b      	ldr	r3, [r7, #4]
    3b7a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    3b7c:	2300      	movs	r3, #0
}
    3b7e:	0018      	movs	r0, r3
    3b80:	46bd      	mov	sp, r7
    3b82:	b004      	add	sp, #16
    3b84:	bd80      	pop	{r7, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	00003a25 	.word	0x00003a25
    3b8c:	00000916 	.word	0x00000916
    3b90:	0001f234 	.word	0x0001f234
    3b94:	00002379 	.word	0x00002379
    3b98:	00003055 	.word	0x00003055
    3b9c:	00003149 	.word	0x00003149
    3ba0:	0000311d 	.word	0x0000311d
    3ba4:	0000392d 	.word	0x0000392d
    3ba8:	00003865 	.word	0x00003865

00003bac <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	b082      	sub	sp, #8
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3bb4:	46c0      	nop			; (mov r8, r8)
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	2103      	movs	r1, #3
    3bba:	0018      	movs	r0, r3
    3bbc:	4b06      	ldr	r3, [pc, #24]	; (3bd8 <_spi_wait_bus_idle+0x2c>)
    3bbe:	4798      	blx	r3
    3bc0:	1e03      	subs	r3, r0, #0
    3bc2:	d0f8      	beq.n	3bb6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	2103      	movs	r1, #3
    3bc8:	0018      	movs	r0, r3
    3bca:	4b04      	ldr	r3, [pc, #16]	; (3bdc <_spi_wait_bus_idle+0x30>)
    3bcc:	4798      	blx	r3
}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	46bd      	mov	sp, r7
    3bd2:	b002      	add	sp, #8
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	000030b1 	.word	0x000030b1
    3bdc:	000030ff 	.word	0x000030ff

00003be0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    3be0:	b580      	push	{r7, lr}
    3be2:	b086      	sub	sp, #24
    3be4:	af00      	add	r7, sp, #0
    3be6:	60f8      	str	r0, [r7, #12]
    3be8:	60b9      	str	r1, [r7, #8]
    3bea:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3bec:	68bb      	ldr	r3, [r7, #8]
    3bee:	2204      	movs	r2, #4
    3bf0:	4013      	ands	r3, r2
    3bf2:	d101      	bne.n	3bf8 <_spi_rx_check_and_receive+0x18>
		return false;
    3bf4:	2300      	movs	r3, #0
    3bf6:	e024      	b.n	3c42 <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    3bf8:	68fb      	ldr	r3, [r7, #12]
    3bfa:	0018      	movs	r0, r3
    3bfc:	4b13      	ldr	r3, [pc, #76]	; (3c4c <_spi_rx_check_and_receive+0x6c>)
    3bfe:	4798      	blx	r3
    3c00:	0003      	movs	r3, r0
    3c02:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	685b      	ldr	r3, [r3, #4]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d014      	beq.n	3c36 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	685b      	ldr	r3, [r3, #4]
    3c10:	1c59      	adds	r1, r3, #1
    3c12:	687a      	ldr	r2, [r7, #4]
    3c14:	6051      	str	r1, [r2, #4]
    3c16:	697a      	ldr	r2, [r7, #20]
    3c18:	b2d2      	uxtb	r2, r2
    3c1a:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	7c1b      	ldrb	r3, [r3, #16]
    3c20:	2b01      	cmp	r3, #1
    3c22:	d908      	bls.n	3c36 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	685b      	ldr	r3, [r3, #4]
    3c28:	1c59      	adds	r1, r3, #1
    3c2a:	687a      	ldr	r2, [r7, #4]
    3c2c:	6051      	str	r1, [r2, #4]
    3c2e:	697a      	ldr	r2, [r7, #20]
    3c30:	0a12      	lsrs	r2, r2, #8
    3c32:	b2d2      	uxtb	r2, r2
    3c34:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	68db      	ldr	r3, [r3, #12]
    3c3a:	1c5a      	adds	r2, r3, #1
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	60da      	str	r2, [r3, #12]

	return true;
    3c40:	2301      	movs	r3, #1
}
    3c42:	0018      	movs	r0, r3
    3c44:	46bd      	mov	sp, r7
    3c46:	b006      	add	sp, #24
    3c48:	bd80      	pop	{r7, pc}
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	000031e7 	.word	0x000031e7

00003c50 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    3c50:	b580      	push	{r7, lr}
    3c52:	b086      	sub	sp, #24
    3c54:	af00      	add	r7, sp, #0
    3c56:	60f8      	str	r0, [r7, #12]
    3c58:	60b9      	str	r1, [r7, #8]
    3c5a:	607a      	str	r2, [r7, #4]
    3c5c:	001a      	movs	r2, r3
    3c5e:	1cbb      	adds	r3, r7, #2
    3c60:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3c62:	68bb      	ldr	r3, [r7, #8]
    3c64:	2201      	movs	r2, #1
    3c66:	4013      	ands	r3, r2
    3c68:	d02b      	beq.n	3cc2 <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d018      	beq.n	3ca4 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	1c59      	adds	r1, r3, #1
    3c78:	687a      	ldr	r2, [r7, #4]
    3c7a:	6011      	str	r1, [r2, #0]
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	7c1b      	ldrb	r3, [r3, #16]
    3c84:	2b01      	cmp	r3, #1
    3c86:	d910      	bls.n	3caa <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	781b      	ldrb	r3, [r3, #0]
    3c8e:	021b      	lsls	r3, r3, #8
    3c90:	001a      	movs	r2, r3
    3c92:	697b      	ldr	r3, [r7, #20]
    3c94:	4313      	orrs	r3, r2
    3c96:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	1c5a      	adds	r2, r3, #1
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	601a      	str	r2, [r3, #0]
    3ca2:	e002      	b.n	3caa <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    3ca4:	1cbb      	adds	r3, r7, #2
    3ca6:	881b      	ldrh	r3, [r3, #0]
    3ca8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	689b      	ldr	r3, [r3, #8]
    3cae:	1c5a      	adds	r2, r3, #1
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    3cb4:	697a      	ldr	r2, [r7, #20]
    3cb6:	68fb      	ldr	r3, [r7, #12]
    3cb8:	0011      	movs	r1, r2
    3cba:	0018      	movs	r0, r3
    3cbc:	4b03      	ldr	r3, [pc, #12]	; (3ccc <_spi_tx_check_and_send+0x7c>)
    3cbe:	4798      	blx	r3
    3cc0:	e000      	b.n	3cc4 <_spi_tx_check_and_send+0x74>
		return;
    3cc2:	46c0      	nop			; (mov r8, r8)
}
    3cc4:	46bd      	mov	sp, r7
    3cc6:	b006      	add	sp, #24
    3cc8:	bd80      	pop	{r7, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	000031fb 	.word	0x000031fb

00003cd0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b082      	sub	sp, #8
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
    3cd8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	2280      	movs	r2, #128	; 0x80
    3cde:	4013      	ands	r3, r2
    3ce0:	d00d      	beq.n	3cfe <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    3ce2:	4a09      	ldr	r2, [pc, #36]	; (3d08 <_spi_err_check+0x38>)
    3ce4:	683b      	ldr	r3, [r7, #0]
    3ce6:	0011      	movs	r1, r2
    3ce8:	0018      	movs	r0, r3
    3cea:	4b08      	ldr	r3, [pc, #32]	; (3d0c <_spi_err_check+0x3c>)
    3cec:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    3cee:	683b      	ldr	r3, [r7, #0]
    3cf0:	2180      	movs	r1, #128	; 0x80
    3cf2:	0018      	movs	r0, r3
    3cf4:	4b06      	ldr	r3, [pc, #24]	; (3d10 <_spi_err_check+0x40>)
    3cf6:	4798      	blx	r3
		return ERR_OVERFLOW;
    3cf8:	2313      	movs	r3, #19
    3cfa:	425b      	negs	r3, r3
    3cfc:	e000      	b.n	3d00 <_spi_err_check+0x30>
	}

	return ERR_NONE;
    3cfe:	2300      	movs	r3, #0
}
    3d00:	0018      	movs	r0, r3
    3d02:	46bd      	mov	sp, r7
    3d04:	b002      	add	sp, #8
    3d06:	bd80      	pop	{r7, pc}
    3d08:	0000ffff 	.word	0x0000ffff
    3d0c:	00003233 	.word	0x00003233
    3d10:	000030ff 	.word	0x000030ff

00003d14 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3d14:	b590      	push	{r4, r7, lr}
    3d16:	b08b      	sub	sp, #44	; 0x2c
    3d18:	af00      	add	r7, sp, #0
    3d1a:	6078      	str	r0, [r7, #4]
    3d1c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    3d24:	2300      	movs	r3, #0
    3d26:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3d28:	683b      	ldr	r3, [r7, #0]
    3d2a:	681a      	ldr	r2, [r3, #0]
    3d2c:	2308      	movs	r3, #8
    3d2e:	18fb      	adds	r3, r7, r3
    3d30:	601a      	str	r2, [r3, #0]
    3d32:	683b      	ldr	r3, [r7, #0]
    3d34:	685a      	ldr	r2, [r3, #4]
    3d36:	2308      	movs	r3, #8
    3d38:	18fb      	adds	r3, r7, r3
    3d3a:	605a      	str	r2, [r3, #4]
    3d3c:	2308      	movs	r3, #8
    3d3e:	18fb      	adds	r3, r7, r3
    3d40:	2200      	movs	r2, #0
    3d42:	609a      	str	r2, [r3, #8]
    3d44:	2308      	movs	r3, #8
    3d46:	18fb      	adds	r3, r7, r3
    3d48:	2200      	movs	r2, #0
    3d4a:	60da      	str	r2, [r3, #12]
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	791a      	ldrb	r2, [r3, #4]
    3d50:	2308      	movs	r3, #8
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d004      	beq.n	3d66 <_spi_m_sync_trans+0x52>
    3d5c:	6a3b      	ldr	r3, [r7, #32]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d001      	beq.n	3d66 <_spi_m_sync_trans+0x52>
    3d62:	2301      	movs	r3, #1
    3d64:	e000      	b.n	3d68 <_spi_m_sync_trans+0x54>
    3d66:	2300      	movs	r3, #0
    3d68:	1c1a      	adds	r2, r3, #0
    3d6a:	2301      	movs	r3, #1
    3d6c:	4013      	ands	r3, r2
    3d6e:	b2db      	uxtb	r3, r3
    3d70:	4a34      	ldr	r2, [pc, #208]	; (3e44 <_spi_m_sync_trans+0x130>)
    3d72:	4935      	ldr	r1, [pc, #212]	; (3e48 <_spi_m_sync_trans+0x134>)
    3d74:	0018      	movs	r0, r3
    3d76:	4b35      	ldr	r3, [pc, #212]	; (3e4c <_spi_m_sync_trans+0x138>)
    3d78:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3d7a:	6a3b      	ldr	r3, [r7, #32]
    3d7c:	2107      	movs	r1, #7
    3d7e:	0018      	movs	r0, r3
    3d80:	4b33      	ldr	r3, [pc, #204]	; (3e50 <_spi_m_sync_trans+0x13c>)
    3d82:	4798      	blx	r3
    3d84:	1e03      	subs	r3, r0, #0
    3d86:	d002      	beq.n	3d8e <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    3d88:	2304      	movs	r3, #4
    3d8a:	425b      	negs	r3, r3
    3d8c:	e055      	b.n	3e3a <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3d8e:	6a3b      	ldr	r3, [r7, #32]
    3d90:	0018      	movs	r0, r3
    3d92:	4b30      	ldr	r3, [pc, #192]	; (3e54 <_spi_m_sync_trans+0x140>)
    3d94:	4798      	blx	r3
    3d96:	0003      	movs	r3, r0
    3d98:	001a      	movs	r2, r3
    3d9a:	2301      	movs	r3, #1
    3d9c:	4053      	eors	r3, r2
    3d9e:	b2db      	uxtb	r3, r3
    3da0:	2b00      	cmp	r3, #0
    3da2:	d002      	beq.n	3daa <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    3da4:	2314      	movs	r3, #20
    3da6:	425b      	negs	r3, r3
    3da8:	e047      	b.n	3e3a <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    3daa:	6a3b      	ldr	r3, [r7, #32]
    3dac:	0018      	movs	r0, r3
    3dae:	4b2a      	ldr	r3, [pc, #168]	; (3e58 <_spi_m_sync_trans+0x144>)
    3db0:	4798      	blx	r3
    3db2:	0003      	movs	r3, r0
    3db4:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3db6:	2308      	movs	r3, #8
    3db8:	18fa      	adds	r2, r7, r3
    3dba:	69f9      	ldr	r1, [r7, #28]
    3dbc:	6a3b      	ldr	r3, [r7, #32]
    3dbe:	0018      	movs	r0, r3
    3dc0:	4b26      	ldr	r3, [pc, #152]	; (3e5c <_spi_m_sync_trans+0x148>)
    3dc2:	4798      	blx	r3
    3dc4:	0003      	movs	r3, r0
    3dc6:	001a      	movs	r2, r3
    3dc8:	2301      	movs	r3, #1
    3dca:	4053      	eors	r3, r2
    3dcc:	b2db      	uxtb	r3, r3
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d00f      	beq.n	3df2 <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3dd2:	2308      	movs	r3, #8
    3dd4:	18fb      	adds	r3, r7, r3
    3dd6:	68da      	ldr	r2, [r3, #12]
    3dd8:	2308      	movs	r3, #8
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	689b      	ldr	r3, [r3, #8]
    3dde:	429a      	cmp	r2, r3
    3de0:	d307      	bcc.n	3df2 <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	88db      	ldrh	r3, [r3, #6]
    3de6:	2208      	movs	r2, #8
    3de8:	18ba      	adds	r2, r7, r2
    3dea:	69f9      	ldr	r1, [r7, #28]
    3dec:	6a38      	ldr	r0, [r7, #32]
    3dee:	4c1c      	ldr	r4, [pc, #112]	; (3e60 <_spi_m_sync_trans+0x14c>)
    3df0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    3df2:	6a3a      	ldr	r2, [r7, #32]
    3df4:	69fb      	ldr	r3, [r7, #28]
    3df6:	0011      	movs	r1, r2
    3df8:	0018      	movs	r0, r3
    3dfa:	4b1a      	ldr	r3, [pc, #104]	; (3e64 <_spi_m_sync_trans+0x150>)
    3dfc:	4798      	blx	r3
    3dfe:	0003      	movs	r3, r0
    3e00:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    3e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e04:	2b00      	cmp	r3, #0
    3e06:	db12      	blt.n	3e2e <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3e08:	2308      	movs	r3, #8
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	689a      	ldr	r2, [r3, #8]
    3e0e:	683b      	ldr	r3, [r7, #0]
    3e10:	689b      	ldr	r3, [r3, #8]
    3e12:	429a      	cmp	r2, r3
    3e14:	d3c9      	bcc.n	3daa <_spi_m_sync_trans+0x96>
    3e16:	2308      	movs	r3, #8
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	68da      	ldr	r2, [r3, #12]
    3e1c:	683b      	ldr	r3, [r7, #0]
    3e1e:	689b      	ldr	r3, [r3, #8]
    3e20:	429a      	cmp	r2, r3
    3e22:	d3c2      	bcc.n	3daa <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    3e24:	2308      	movs	r3, #8
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	689b      	ldr	r3, [r3, #8]
    3e2a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    3e2c:	e000      	b.n	3e30 <_spi_m_sync_trans+0x11c>
			break;
    3e2e:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    3e30:	6a3b      	ldr	r3, [r7, #32]
    3e32:	0018      	movs	r0, r3
    3e34:	4b0c      	ldr	r3, [pc, #48]	; (3e68 <_spi_m_sync_trans+0x154>)
    3e36:	4798      	blx	r3

	return rc;
    3e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    3e3a:	0018      	movs	r0, r3
    3e3c:	46bd      	mov	sp, r7
    3e3e:	b00b      	add	sp, #44	; 0x2c
    3e40:	bd90      	pop	{r4, r7, pc}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	00000a72 	.word	0x00000a72
    3e48:	0001f234 	.word	0x0001f234
    3e4c:	00002379 	.word	0x00002379
    3e50:	00003073 	.word	0x00003073
    3e54:	00003149 	.word	0x00003149
    3e58:	000030e9 	.word	0x000030e9
    3e5c:	00003be1 	.word	0x00003be1
    3e60:	00003c51 	.word	0x00003c51
    3e64:	00003cd1 	.word	0x00003cd1
    3e68:	00003bad 	.word	0x00003bad

00003e6c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <_system_time_init+0x1c>)
    3e76:	4a05      	ldr	r2, [pc, #20]	; (3e8c <_system_time_init+0x20>)
    3e78:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3e7a:	4b03      	ldr	r3, [pc, #12]	; (3e88 <_system_time_init+0x1c>)
    3e7c:	2205      	movs	r2, #5
    3e7e:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3e80:	46c0      	nop			; (mov r8, r8)
    3e82:	46bd      	mov	sp, r7
    3e84:	b002      	add	sp, #8
    3e86:	bd80      	pop	{r7, pc}
    3e88:	e000e010 	.word	0xe000e010
    3e8c:	00ffffff 	.word	0x00ffffff

00003e90 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b082      	sub	sp, #8
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	0018      	movs	r0, r3
    3e9c:	4b02      	ldr	r3, [pc, #8]	; (3ea8 <_delay_init+0x18>)
    3e9e:	4798      	blx	r3
}
    3ea0:	46c0      	nop			; (mov r8, r8)
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b002      	add	sp, #8
    3ea6:	bd80      	pop	{r7, pc}
    3ea8:	00003e6d 	.word	0x00003e6d

00003eac <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3eb6:	683b      	ldr	r3, [r7, #0]
    3eb8:	0e1a      	lsrs	r2, r3, #24
    3eba:	230f      	movs	r3, #15
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    3ec0:	683b      	ldr	r3, [r7, #0]
    3ec2:	60bb      	str	r3, [r7, #8]

	while (n--) {
    3ec4:	e011      	b.n	3eea <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    3ec6:	4b16      	ldr	r3, [pc, #88]	; (3f20 <_delay_cycles+0x74>)
    3ec8:	4a16      	ldr	r2, [pc, #88]	; (3f24 <_delay_cycles+0x78>)
    3eca:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3ecc:	4b14      	ldr	r3, [pc, #80]	; (3f20 <_delay_cycles+0x74>)
    3ece:	4a15      	ldr	r2, [pc, #84]	; (3f24 <_delay_cycles+0x78>)
    3ed0:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	4b12      	ldr	r3, [pc, #72]	; (3f20 <_delay_cycles+0x74>)
    3ed6:	681a      	ldr	r2, [r3, #0]
    3ed8:	2380      	movs	r3, #128	; 0x80
    3eda:	025b      	lsls	r3, r3, #9
    3edc:	4013      	ands	r3, r2
    3ede:	d0f9      	beq.n	3ed4 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    3ee0:	68bb      	ldr	r3, [r7, #8]
    3ee2:	4a11      	ldr	r2, [pc, #68]	; (3f28 <_delay_cycles+0x7c>)
    3ee4:	4694      	mov	ip, r2
    3ee6:	4463      	add	r3, ip
    3ee8:	60bb      	str	r3, [r7, #8]
	while (n--) {
    3eea:	230f      	movs	r3, #15
    3eec:	18fb      	adds	r3, r7, r3
    3eee:	781b      	ldrb	r3, [r3, #0]
    3ef0:	220f      	movs	r2, #15
    3ef2:	18ba      	adds	r2, r7, r2
    3ef4:	1e59      	subs	r1, r3, #1
    3ef6:	7011      	strb	r1, [r2, #0]
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d1e4      	bne.n	3ec6 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    3efc:	4b08      	ldr	r3, [pc, #32]	; (3f20 <_delay_cycles+0x74>)
    3efe:	68ba      	ldr	r2, [r7, #8]
    3f00:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    3f02:	4b07      	ldr	r3, [pc, #28]	; (3f20 <_delay_cycles+0x74>)
    3f04:	68ba      	ldr	r2, [r7, #8]
    3f06:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3f08:	46c0      	nop			; (mov r8, r8)
    3f0a:	4b05      	ldr	r3, [pc, #20]	; (3f20 <_delay_cycles+0x74>)
    3f0c:	681a      	ldr	r2, [r3, #0]
    3f0e:	2380      	movs	r3, #128	; 0x80
    3f10:	025b      	lsls	r3, r3, #9
    3f12:	4013      	ands	r3, r2
    3f14:	d0f9      	beq.n	3f0a <_delay_cycles+0x5e>
		;
}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	46bd      	mov	sp, r7
    3f1a:	b004      	add	sp, #16
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	e000e010 	.word	0xe000e010
    3f24:	00ffffff 	.word	0x00ffffff
    3f28:	ff000001 	.word	0xff000001

00003f2c <NVIC_EnableIRQ>:
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	0002      	movs	r2, r0
    3f34:	1dfb      	adds	r3, r7, #7
    3f36:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3f38:	4b06      	ldr	r3, [pc, #24]	; (3f54 <NVIC_EnableIRQ+0x28>)
    3f3a:	1dfa      	adds	r2, r7, #7
    3f3c:	7812      	ldrb	r2, [r2, #0]
    3f3e:	0011      	movs	r1, r2
    3f40:	221f      	movs	r2, #31
    3f42:	400a      	ands	r2, r1
    3f44:	2101      	movs	r1, #1
    3f46:	4091      	lsls	r1, r2
    3f48:	000a      	movs	r2, r1
    3f4a:	601a      	str	r2, [r3, #0]
}
    3f4c:	46c0      	nop			; (mov r8, r8)
    3f4e:	46bd      	mov	sp, r7
    3f50:	b002      	add	sp, #8
    3f52:	bd80      	pop	{r7, pc}
    3f54:	e000e100 	.word	0xe000e100

00003f58 <hri_mclk_set_APBAMASK_RTC_bit>:
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b082      	sub	sp, #8
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	6078      	str	r0, [r7, #4]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	695b      	ldr	r3, [r3, #20]
    3f64:	2280      	movs	r2, #128	; 0x80
    3f66:	0052      	lsls	r2, r2, #1
    3f68:	431a      	orrs	r2, r3
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	615a      	str	r2, [r3, #20]
}
    3f6e:	46c0      	nop			; (mov r8, r8)
    3f70:	46bd      	mov	sp, r7
    3f72:	b002      	add	sp, #8
    3f74:	bd80      	pop	{r7, pc}

00003f76 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcmode2_dbgctrl_reg_t;
typedef uint8_t  hri_rtcmode2_freqcorr_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    3f76:	b580      	push	{r7, lr}
    3f78:	b082      	sub	sp, #8
    3f7a:	af00      	add	r7, sp, #0
    3f7c:	6078      	str	r0, [r7, #4]
    3f7e:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3f80:	46c0      	nop			; (mov r8, r8)
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	691b      	ldr	r3, [r3, #16]
    3f86:	683a      	ldr	r2, [r7, #0]
    3f88:	4013      	ands	r3, r2
    3f8a:	d1fa      	bne.n	3f82 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    3f8c:	46c0      	nop			; (mov r8, r8)
    3f8e:	46bd      	mov	sp, r7
    3f90:	b002      	add	sp, #8
    3f92:	bd80      	pop	{r7, pc}

00003f94 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    3f94:	b580      	push	{r7, lr}
    3f96:	b082      	sub	sp, #8
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	2280      	movs	r2, #128	; 0x80
    3fa0:	0052      	lsls	r2, r2, #1
    3fa2:	815a      	strh	r2, [r3, #10]
}
    3fa4:	46c0      	nop			; (mov r8, r8)
    3fa6:	46bd      	mov	sp, r7
    3fa8:	b002      	add	sp, #8
    3faa:	bd80      	pop	{r7, pc}

00003fac <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2280      	movs	r2, #128	; 0x80
    3fb8:	0052      	lsls	r2, r2, #1
    3fba:	819a      	strh	r2, [r3, #12]
}
    3fbc:	46c0      	nop			; (mov r8, r8)
    3fbe:	46bd      	mov	sp, r7
    3fc0:	b002      	add	sp, #8
    3fc2:	bd80      	pop	{r7, pc}

00003fc4 <hri_rtcmode0_clear_interrupt_OVF_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_OVF) >> RTC_MODE0_INTFLAG_OVF_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_OVF_bit(const void *const hw)
{
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b082      	sub	sp, #8
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	4a03      	ldr	r2, [pc, #12]	; (3fdc <hri_rtcmode0_clear_interrupt_OVF_bit+0x18>)
    3fd0:	819a      	strh	r2, [r3, #12]
}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b002      	add	sp, #8
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	ffff8000 	.word	0xffff8000

00003fe0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b082      	sub	sp, #8
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	899b      	ldrh	r3, [r3, #12]
    3fec:	b29b      	uxth	r3, r3
}
    3fee:	0018      	movs	r0, r3
    3ff0:	46bd      	mov	sp, r7
    3ff2:	b002      	add	sp, #8
    3ff4:	bd80      	pop	{r7, pc}
	...

00003ff8 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	b082      	sub	sp, #8
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4000:	4a08      	ldr	r2, [pc, #32]	; (4024 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	0011      	movs	r1, r2
    4006:	0018      	movs	r0, r3
    4008:	4b07      	ldr	r3, [pc, #28]	; (4028 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x30>)
    400a:	4798      	blx	r3
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	881b      	ldrh	r3, [r3, #0]
    4010:	b29b      	uxth	r3, r3
    4012:	2202      	movs	r2, #2
    4014:	4313      	orrs	r3, r2
    4016:	b29a      	uxth	r2, r3
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_LEAVE();
}
    401c:	46c0      	nop			; (mov r8, r8)
    401e:	46bd      	mov	sp, r7
    4020:	b002      	add	sp, #8
    4022:	bd80      	pop	{r7, pc}
    4024:	00008003 	.word	0x00008003
    4028:	00003f77 	.word	0x00003f77

0000402c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
    4034:	000a      	movs	r2, r1
    4036:	1cbb      	adds	r3, r7, #2
    4038:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	1cba      	adds	r2, r7, #2
    403e:	8812      	ldrh	r2, [r2, #0]
    4040:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_LEAVE();
}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	46bd      	mov	sp, r7
    4046:	b002      	add	sp, #8
    4048:	bd80      	pop	{r7, pc}

0000404a <hri_rtcmode0_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
    404a:	b580      	push	{r7, lr}
    404c:	b082      	sub	sp, #8
    404e:	af00      	add	r7, sp, #0
    4050:	6078      	str	r0, [r7, #4]
    4052:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    4054:	687b      	ldr	r3, [r7, #4]
    4056:	683a      	ldr	r2, [r7, #0]
    4058:	605a      	str	r2, [r3, #4]
	RTC_CRITICAL_SECTION_LEAVE();
}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	46bd      	mov	sp, r7
    405e:	b002      	add	sp, #8
    4060:	bd80      	pop	{r7, pc}

00004062 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    4062:	b580      	push	{r7, lr}
    4064:	b082      	sub	sp, #8
    4066:	af00      	add	r7, sp, #0
    4068:	6078      	str	r0, [r7, #4]
    406a:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	683a      	ldr	r2, [r7, #0]
    4070:	619a      	str	r2, [r3, #24]
	RTC_CRITICAL_SECTION_LEAVE();
}
    4072:	46c0      	nop			; (mov r8, r8)
    4074:	46bd      	mov	sp, r7
    4076:	b002      	add	sp, #8
    4078:	bd80      	pop	{r7, pc}

0000407a <hri_rtcmode0_read_COUNT_reg>:
	((Rtc *)hw)->MODE0.COUNT.reg ^= mask;
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    407a:	b580      	push	{r7, lr}
    407c:	b082      	sub	sp, #8
    407e:	af00      	add	r7, sp, #0
    4080:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	699b      	ldr	r3, [r3, #24]
}
    4086:	0018      	movs	r0, r3
    4088:	46bd      	mov	sp, r7
    408a:	b002      	add	sp, #8
    408c:	bd80      	pop	{r7, pc}

0000408e <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    408e:	b580      	push	{r7, lr}
    4090:	b084      	sub	sp, #16
    4092:	af00      	add	r7, sp, #0
    4094:	60f8      	str	r0, [r7, #12]
    4096:	607a      	str	r2, [r7, #4]
    4098:	230b      	movs	r3, #11
    409a:	18fb      	adds	r3, r7, r3
    409c:	1c0a      	adds	r2, r1, #0
    409e:	701a      	strb	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    40a0:	230b      	movs	r3, #11
    40a2:	18fb      	adds	r3, r7, r3
    40a4:	781a      	ldrb	r2, [r3, #0]
    40a6:	68fb      	ldr	r3, [r7, #12]
    40a8:	3208      	adds	r2, #8
    40aa:	0092      	lsls	r2, r2, #2
    40ac:	6879      	ldr	r1, [r7, #4]
    40ae:	50d1      	str	r1, [r2, r3]
	RTC_CRITICAL_SECTION_LEAVE();
}
    40b0:	46c0      	nop			; (mov r8, r8)
    40b2:	46bd      	mov	sp, r7
    40b4:	b004      	add	sp, #16
    40b6:	bd80      	pop	{r7, pc}

000040b8 <HwTimerInit>:

/**
* \brief Initializes the hw timer module
*/
void HwTimerInit(void)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	af00      	add	r7, sp, #0
#if defined( USE_HWTMR_DEBUG )
    GpioInit( &DbgHwTmrPin, HWTMR_DBG_PIN_0, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif

    hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    40bc:	4b1d      	ldr	r3, [pc, #116]	; (4134 <HwTimerInit+0x7c>)
    40be:	0018      	movs	r0, r3
    40c0:	4b1d      	ldr	r3, [pc, #116]	; (4138 <HwTimerInit+0x80>)
    40c2:	4798      	blx	r3
    hri_rtcmode0_write_CTRLA_reg(RTC, RTC_MODE0_CTRLA_SWRST);
    40c4:	4b1d      	ldr	r3, [pc, #116]	; (413c <HwTimerInit+0x84>)
    40c6:	2101      	movs	r1, #1
    40c8:	0018      	movs	r0, r3
    40ca:	4b1d      	ldr	r3, [pc, #116]	; (4140 <HwTimerInit+0x88>)
    40cc:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_SWRST);
    40ce:	4b1b      	ldr	r3, [pc, #108]	; (413c <HwTimerInit+0x84>)
    40d0:	2101      	movs	r1, #1
    40d2:	0018      	movs	r0, r3
    40d4:	4b1b      	ldr	r3, [pc, #108]	; (4144 <HwTimerInit+0x8c>)
    40d6:	4798      	blx	r3

    hri_rtcmode0_write_CTRLA_reg(RTC, RTC_MODE0_CTRLA_PRESCALER(0) |
    40d8:	2380      	movs	r3, #128	; 0x80
    40da:	021b      	lsls	r3, r3, #8
    40dc:	4a17      	ldr	r2, [pc, #92]	; (413c <HwTimerInit+0x84>)
    40de:	0019      	movs	r1, r3
    40e0:	0010      	movs	r0, r2
    40e2:	4b17      	ldr	r3, [pc, #92]	; (4140 <HwTimerInit+0x88>)
    40e4:	4798      	blx	r3
                                 RTC_MODE0_CTRLA_COUNTSYNC);
    hri_rtcmode0_write_EVCTRL_reg(RTC, RTC_MODE0_EVCTRL_CMPEO0);
    40e6:	2380      	movs	r3, #128	; 0x80
    40e8:	005b      	lsls	r3, r3, #1
    40ea:	4a14      	ldr	r2, [pc, #80]	; (413c <HwTimerInit+0x84>)
    40ec:	0019      	movs	r1, r3
    40ee:	0010      	movs	r0, r2
    40f0:	4b15      	ldr	r3, [pc, #84]	; (4148 <HwTimerInit+0x90>)
    40f2:	4798      	blx	r3
    hri_rtcmode0_write_COMP_reg(RTC, 0, ( uint32_t )COMPARE_COUNT_MAX_VALUE);
    40f4:	2301      	movs	r3, #1
    40f6:	425b      	negs	r3, r3
    40f8:	4810      	ldr	r0, [pc, #64]	; (413c <HwTimerInit+0x84>)
    40fa:	001a      	movs	r2, r3
    40fc:	2100      	movs	r1, #0
    40fe:	4b13      	ldr	r3, [pc, #76]	; (414c <HwTimerInit+0x94>)
    4100:	4798      	blx	r3
    hri_rtcmode0_set_INTEN_CMP0_bit(RTC);
    4102:	4b0e      	ldr	r3, [pc, #56]	; (413c <HwTimerInit+0x84>)
    4104:	0018      	movs	r0, r3
    4106:	4b12      	ldr	r3, [pc, #72]	; (4150 <HwTimerInit+0x98>)
    4108:	4798      	blx	r3

    NVIC_EnableIRQ(RTC_IRQn);
    410a:	2002      	movs	r0, #2
    410c:	4b11      	ldr	r3, [pc, #68]	; (4154 <HwTimerInit+0x9c>)
    410e:	4798      	blx	r3
    hri_rtcmode0_write_COUNT_reg(RTC, 0);
    4110:	4b0a      	ldr	r3, [pc, #40]	; (413c <HwTimerInit+0x84>)
    4112:	2100      	movs	r1, #0
    4114:	0018      	movs	r0, r3
    4116:	4b10      	ldr	r3, [pc, #64]	; (4158 <HwTimerInit+0xa0>)
    4118:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    411a:	4b08      	ldr	r3, [pc, #32]	; (413c <HwTimerInit+0x84>)
    411c:	2108      	movs	r1, #8
    411e:	0018      	movs	r0, r3
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <HwTimerInit+0x8c>)
    4122:	4798      	blx	r3
    hri_rtcmode0_set_CTRLA_ENABLE_bit(RTC);
    4124:	4b05      	ldr	r3, [pc, #20]	; (413c <HwTimerInit+0x84>)
    4126:	0018      	movs	r0, r3
    4128:	4b0c      	ldr	r3, [pc, #48]	; (415c <HwTimerInit+0xa4>)
    412a:	4798      	blx	r3
}
    412c:	46c0      	nop			; (mov r8, r8)
    412e:	46bd      	mov	sp, r7
    4130:	bd80      	pop	{r7, pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	40000400 	.word	0x40000400
    4138:	00003f59 	.word	0x00003f59
    413c:	40002000 	.word	0x40002000
    4140:	0000402d 	.word	0x0000402d
    4144:	00003f77 	.word	0x00003f77
    4148:	0000404b 	.word	0x0000404b
    414c:	0000408f 	.word	0x0000408f
    4150:	00003f95 	.word	0x00003f95
    4154:	00003f2d 	.word	0x00003f2d
    4158:	00004063 	.word	0x00004063
    415c:	00003ff9 	.word	0x00003ff9

00004160 <HwTimerAlarmSetCallback>:
* \brief This function is used to set the callback when the hw timer
* expires.
* \param callback Callback to be registered
*/
void HwTimerAlarmSetCallback(HwTimerCallback_t callback)
{
    4160:	b580      	push	{r7, lr}
    4162:	b082      	sub	sp, #8
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
    HwTimerAlarmCallback = callback;
    4168:	4b03      	ldr	r3, [pc, #12]	; (4178 <HwTimerAlarmSetCallback+0x18>)
    416a:	687a      	ldr	r2, [r7, #4]
    416c:	601a      	str	r2, [r3, #0]
}
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	46bd      	mov	sp, r7
    4172:	b002      	add	sp, #8
    4174:	bd80      	pop	{r7, pc}
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	20000c68 	.word	0x20000c68

0000417c <HwTimerOverflowSetCallback>:
* \brief This function is used to set the callback when the hw timer
* overflows.
* \param callback Callback to be registered
*/
void HwTimerOverflowSetCallback(HwTimerCallback_t callback)
{
    417c:	b580      	push	{r7, lr}
    417e:	b082      	sub	sp, #8
    4180:	af00      	add	r7, sp, #0
    4182:	6078      	str	r0, [r7, #4]
    HwTimerOverflowCallback = callback;
    4184:	4b03      	ldr	r3, [pc, #12]	; (4194 <HwTimerOverflowSetCallback+0x18>)
    4186:	687a      	ldr	r2, [r7, #4]
    4188:	601a      	str	r2, [r3, #0]
}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	46bd      	mov	sp, r7
    418e:	b002      	add	sp, #8
    4190:	bd80      	pop	{r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	20000c6c 	.word	0x20000c6c

00004198 <HwTimerLoadAbsoluteTicks>:
/**
* \brief Loads the timeout in terms of ticks into the hardware
* \ticks Time value in terms of timer ticks
*/
bool HwTimerLoadAbsoluteTicks(uint32_t ticks)
{
    4198:	b580      	push	{r7, lr}
    419a:	b084      	sub	sp, #16
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
#if defined( USE_HWTMR_DEBUG )
    GpioWrite( &DbgHwTmrPin, 1 );
#endif

    RTC_CRITICAL_SECTION_ENTER();
    hri_rtcmode0_write_COMP_reg(RTC, 0, ticks);
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	4813      	ldr	r0, [pc, #76]	; (41f0 <HwTimerLoadAbsoluteTicks+0x58>)
    41a4:	001a      	movs	r2, r3
    41a6:	2100      	movs	r1, #0
    41a8:	4b12      	ldr	r3, [pc, #72]	; (41f4 <HwTimerLoadAbsoluteTicks+0x5c>)
    41aa:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_MASK);
    41ac:	4a12      	ldr	r2, [pc, #72]	; (41f8 <HwTimerLoadAbsoluteTicks+0x60>)
    41ae:	4b10      	ldr	r3, [pc, #64]	; (41f0 <HwTimerLoadAbsoluteTicks+0x58>)
    41b0:	0011      	movs	r1, r2
    41b2:	0018      	movs	r0, r3
    41b4:	4b11      	ldr	r3, [pc, #68]	; (41fc <HwTimerLoadAbsoluteTicks+0x64>)
    41b6:	4798      	blx	r3
    uint32_t current = hri_rtcmode0_read_COUNT_reg(RTC);
    41b8:	4b0d      	ldr	r3, [pc, #52]	; (41f0 <HwTimerLoadAbsoluteTicks+0x58>)
    41ba:	0018      	movs	r0, r3
    41bc:	4b10      	ldr	r3, [pc, #64]	; (4200 <HwTimerLoadAbsoluteTicks+0x68>)
    41be:	4798      	blx	r3
    41c0:	0003      	movs	r3, r0
    41c2:	60fb      	str	r3, [r7, #12]
    RTC_CRITICAL_SECTION_LEAVE();

    if((ticks - current - 1) >= (COMPARE_COUNT_MAX_VALUE >> 1)) {
    41c4:	687a      	ldr	r2, [r7, #4]
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	1ad3      	subs	r3, r2, r3
    41ca:	3b01      	subs	r3, #1
    41cc:	4a0d      	ldr	r2, [pc, #52]	; (4204 <HwTimerLoadAbsoluteTicks+0x6c>)
    41ce:	4293      	cmp	r3, r2
    41d0:	d901      	bls.n	41d6 <HwTimerLoadAbsoluteTicks+0x3e>
        // if difference is more than half of max assume timer has passed
        return false;
    41d2:	2300      	movs	r3, #0
    41d4:	e007      	b.n	41e6 <HwTimerLoadAbsoluteTicks+0x4e>
    }
    if((ticks - current) < 10) {
    41d6:	687a      	ldr	r2, [r7, #4]
    41d8:	68fb      	ldr	r3, [r7, #12]
    41da:	1ad3      	subs	r3, r2, r3
    41dc:	2b09      	cmp	r3, #9
    41de:	d801      	bhi.n	41e4 <HwTimerLoadAbsoluteTicks+0x4c>
        // if too close the matching interrupt does not trigger, so handle same as passed
        return false;
    41e0:	2300      	movs	r3, #0
    41e2:	e000      	b.n	41e6 <HwTimerLoadAbsoluteTicks+0x4e>
    }
    return true;
    41e4:	2301      	movs	r3, #1
}
    41e6:	0018      	movs	r0, r3
    41e8:	46bd      	mov	sp, r7
    41ea:	b004      	add	sp, #16
    41ec:	bd80      	pop	{r7, pc}
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	40002000 	.word	0x40002000
    41f4:	0000408f 	.word	0x0000408f
    41f8:	0000802f 	.word	0x0000802f
    41fc:	00003f77 	.word	0x00003f77
    4200:	0000407b 	.word	0x0000407b
    4204:	7ffffffe 	.word	0x7ffffffe

00004208 <HwTimerGetTime>:
/**
* \brief Gets the absolute time value
* \retval Absolute time in ticks
*/
uint32_t HwTimerGetTime(void)
{
    4208:	b580      	push	{r7, lr}
    420a:	af00      	add	r7, sp, #0
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    420c:	4b06      	ldr	r3, [pc, #24]	; (4228 <HwTimerGetTime+0x20>)
    420e:	2108      	movs	r1, #8
    4210:	0018      	movs	r0, r3
    4212:	4b06      	ldr	r3, [pc, #24]	; (422c <HwTimerGetTime+0x24>)
    4214:	4798      	blx	r3
    return hri_rtcmode0_read_COUNT_reg(RTC);
    4216:	4b04      	ldr	r3, [pc, #16]	; (4228 <HwTimerGetTime+0x20>)
    4218:	0018      	movs	r0, r3
    421a:	4b05      	ldr	r3, [pc, #20]	; (4230 <HwTimerGetTime+0x28>)
    421c:	4798      	blx	r3
    421e:	0003      	movs	r3, r0
}
    4220:	0018      	movs	r0, r3
    4222:	46bd      	mov	sp, r7
    4224:	bd80      	pop	{r7, pc}
    4226:	46c0      	nop			; (mov r8, r8)
    4228:	40002000 	.word	0x40002000
    422c:	00003f77 	.word	0x00003f77
    4230:	0000407b 	.word	0x0000407b

00004234 <RTC_Handler>:

/**
* \brief Rtc interrupt handler
*/
void RTC_Handler(void)
{
    4234:	b590      	push	{r4, r7, lr}
    4236:	b083      	sub	sp, #12
    4238:	af00      	add	r7, sp, #0
    /* Read and mask interrupt flag register */
    uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(RTC);
    423a:	1dbc      	adds	r4, r7, #6
    423c:	4b15      	ldr	r3, [pc, #84]	; (4294 <RTC_Handler+0x60>)
    423e:	0018      	movs	r0, r3
    4240:	4b15      	ldr	r3, [pc, #84]	; (4298 <RTC_Handler+0x64>)
    4242:	4798      	blx	r3
    4244:	0003      	movs	r3, r0
    4246:	8023      	strh	r3, [r4, #0]

    if (flag & RTC_MODE0_INTFLAG_CMP0) {
    4248:	1dbb      	adds	r3, r7, #6
    424a:	881a      	ldrh	r2, [r3, #0]
    424c:	2380      	movs	r3, #128	; 0x80
    424e:	005b      	lsls	r3, r3, #1
    4250:	4013      	ands	r3, r2
    4252:	d00b      	beq.n	426c <RTC_Handler+0x38>
#if defined( USE_HWTMR_DEBUG )
        GpioWrite( &DbgHwTmrPin, 0 );
#endif
        hri_rtcmode0_clear_interrupt_CMP0_bit(RTC);
    4254:	4b0f      	ldr	r3, [pc, #60]	; (4294 <RTC_Handler+0x60>)
    4256:	0018      	movs	r0, r3
    4258:	4b10      	ldr	r3, [pc, #64]	; (429c <RTC_Handler+0x68>)
    425a:	4798      	blx	r3
        if (HwTimerAlarmCallback != NULL) {
    425c:	4b10      	ldr	r3, [pc, #64]	; (42a0 <RTC_Handler+0x6c>)
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	2b00      	cmp	r3, #0
    4262:	d013      	beq.n	428c <RTC_Handler+0x58>
            HwTimerAlarmCallback();
    4264:	4b0e      	ldr	r3, [pc, #56]	; (42a0 <RTC_Handler+0x6c>)
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	4798      	blx	r3
        if (HwTimerOverflowCallback != NULL) {
            HwTimerOverflowCallback();
        }
    }

}
    426a:	e00f      	b.n	428c <RTC_Handler+0x58>
    else if ( flag & RTC_MODE0_INTFLAG_OVF) {
    426c:	1dbb      	adds	r3, r7, #6
    426e:	2200      	movs	r2, #0
    4270:	5e9b      	ldrsh	r3, [r3, r2]
    4272:	2b00      	cmp	r3, #0
    4274:	da0a      	bge.n	428c <RTC_Handler+0x58>
        hri_rtcmode0_clear_interrupt_OVF_bit(RTC);
    4276:	4b07      	ldr	r3, [pc, #28]	; (4294 <RTC_Handler+0x60>)
    4278:	0018      	movs	r0, r3
    427a:	4b0a      	ldr	r3, [pc, #40]	; (42a4 <RTC_Handler+0x70>)
    427c:	4798      	blx	r3
        if (HwTimerOverflowCallback != NULL) {
    427e:	4b0a      	ldr	r3, [pc, #40]	; (42a8 <RTC_Handler+0x74>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d002      	beq.n	428c <RTC_Handler+0x58>
            HwTimerOverflowCallback();
    4286:	4b08      	ldr	r3, [pc, #32]	; (42a8 <RTC_Handler+0x74>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	4798      	blx	r3
}
    428c:	46c0      	nop			; (mov r8, r8)
    428e:	46bd      	mov	sp, r7
    4290:	b003      	add	sp, #12
    4292:	bd90      	pop	{r4, r7, pc}
    4294:	40002000 	.word	0x40002000
    4298:	00003fe1 	.word	0x00003fe1
    429c:	00003fad 	.word	0x00003fad
    42a0:	20000c68 	.word	0x20000c68
    42a4:	00003fc5 	.word	0x00003fc5
    42a8:	20000c6c 	.word	0x20000c6c

000042ac <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
    42ac:	b580      	push	{r7, lr}
    42ae:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
    42b0:	4b08      	ldr	r3, [pc, #32]	; (42d4 <rand1+0x28>)
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	4a08      	ldr	r2, [pc, #32]	; (42d8 <rand1+0x2c>)
    42b6:	4353      	muls	r3, r2
    42b8:	4a08      	ldr	r2, [pc, #32]	; (42dc <rand1+0x30>)
    42ba:	189a      	adds	r2, r3, r2
    42bc:	4b05      	ldr	r3, [pc, #20]	; (42d4 <rand1+0x28>)
    42be:	601a      	str	r2, [r3, #0]
    42c0:	4b04      	ldr	r3, [pc, #16]	; (42d4 <rand1+0x28>)
    42c2:	681a      	ldr	r2, [r3, #0]
    42c4:	4b06      	ldr	r3, [pc, #24]	; (42e0 <rand1+0x34>)
    42c6:	4907      	ldr	r1, [pc, #28]	; (42e4 <rand1+0x38>)
    42c8:	0010      	movs	r0, r2
    42ca:	4798      	blx	r3
    42cc:	000b      	movs	r3, r1
}
    42ce:	0018      	movs	r0, r3
    42d0:	46bd      	mov	sp, r7
    42d2:	bd80      	pop	{r7, pc}
    42d4:	200000e8 	.word	0x200000e8
    42d8:	41c64e6d 	.word	0x41c64e6d
    42dc:	00003039 	.word	0x00003039
    42e0:	00017761 	.word	0x00017761
    42e4:	7fffffff 	.word	0x7fffffff

000042e8 <srand1>:

void srand1( uint32_t seed )
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
    next = seed;
    42f0:	4b03      	ldr	r3, [pc, #12]	; (4300 <srand1+0x18>)
    42f2:	687a      	ldr	r2, [r7, #4]
    42f4:	601a      	str	r2, [r3, #0]
}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	46bd      	mov	sp, r7
    42fa:	b002      	add	sp, #8
    42fc:	bd80      	pop	{r7, pc}
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	200000e8 	.word	0x200000e8

00004304 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
    4304:	b580      	push	{r7, lr}
    4306:	b082      	sub	sp, #8
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
    430c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
    430e:	4b08      	ldr	r3, [pc, #32]	; (4330 <randr+0x2c>)
    4310:	4798      	blx	r3
    4312:	683a      	ldr	r2, [r7, #0]
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	1ad3      	subs	r3, r2, r3
    4318:	1c5a      	adds	r2, r3, #1
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <randr+0x30>)
    431c:	0011      	movs	r1, r2
    431e:	4798      	blx	r3
    4320:	000b      	movs	r3, r1
    4322:	001a      	movs	r2, r3
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	18d3      	adds	r3, r2, r3
}
    4328:	0018      	movs	r0, r3
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}
    4330:	000042ad 	.word	0x000042ad
    4334:	00017935 	.word	0x00017935

00004338 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    4338:	b580      	push	{r7, lr}
    433a:	b084      	sub	sp, #16
    433c:	af00      	add	r7, sp, #0
    433e:	60f8      	str	r0, [r7, #12]
    4340:	60b9      	str	r1, [r7, #8]
    4342:	1dbb      	adds	r3, r7, #6
    4344:	801a      	strh	r2, [r3, #0]
    while( size-- )
    4346:	e007      	b.n	4358 <memcpy1+0x20>
    {
        *dst++ = *src++;
    4348:	68fb      	ldr	r3, [r7, #12]
    434a:	1c5a      	adds	r2, r3, #1
    434c:	60fa      	str	r2, [r7, #12]
    434e:	68ba      	ldr	r2, [r7, #8]
    4350:	1c51      	adds	r1, r2, #1
    4352:	60b9      	str	r1, [r7, #8]
    4354:	7812      	ldrb	r2, [r2, #0]
    4356:	701a      	strb	r2, [r3, #0]
    while( size-- )
    4358:	1dbb      	adds	r3, r7, #6
    435a:	881b      	ldrh	r3, [r3, #0]
    435c:	1dba      	adds	r2, r7, #6
    435e:	1e59      	subs	r1, r3, #1
    4360:	8011      	strh	r1, [r2, #0]
    4362:	2b00      	cmp	r3, #0
    4364:	d1f0      	bne.n	4348 <memcpy1+0x10>
    }
}
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	46bd      	mov	sp, r7
    436a:	b004      	add	sp, #16
    436c:	bd80      	pop	{r7, pc}

0000436e <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    436e:	b580      	push	{r7, lr}
    4370:	b084      	sub	sp, #16
    4372:	af00      	add	r7, sp, #0
    4374:	60f8      	str	r0, [r7, #12]
    4376:	60b9      	str	r1, [r7, #8]
    4378:	1dbb      	adds	r3, r7, #6
    437a:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
    437c:	1dbb      	adds	r3, r7, #6
    437e:	881b      	ldrh	r3, [r3, #0]
    4380:	3b01      	subs	r3, #1
    4382:	68fa      	ldr	r2, [r7, #12]
    4384:	18d3      	adds	r3, r2, r3
    4386:	60fb      	str	r3, [r7, #12]
    while( size-- )
    4388:	e007      	b.n	439a <memcpyr+0x2c>
    {
        *dst-- = *src++;
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	1e5a      	subs	r2, r3, #1
    438e:	60fa      	str	r2, [r7, #12]
    4390:	68ba      	ldr	r2, [r7, #8]
    4392:	1c51      	adds	r1, r2, #1
    4394:	60b9      	str	r1, [r7, #8]
    4396:	7812      	ldrb	r2, [r2, #0]
    4398:	701a      	strb	r2, [r3, #0]
    while( size-- )
    439a:	1dbb      	adds	r3, r7, #6
    439c:	881b      	ldrh	r3, [r3, #0]
    439e:	1dba      	adds	r2, r7, #6
    43a0:	1e59      	subs	r1, r3, #1
    43a2:	8011      	strh	r1, [r2, #0]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d1f0      	bne.n	438a <memcpyr+0x1c>
    }
}
    43a8:	46c0      	nop			; (mov r8, r8)
    43aa:	46bd      	mov	sp, r7
    43ac:	b004      	add	sp, #16
    43ae:	bd80      	pop	{r7, pc}

000043b0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b082      	sub	sp, #8
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
    43b8:	0008      	movs	r0, r1
    43ba:	0011      	movs	r1, r2
    43bc:	1cfb      	adds	r3, r7, #3
    43be:	1c02      	adds	r2, r0, #0
    43c0:	701a      	strb	r2, [r3, #0]
    43c2:	003b      	movs	r3, r7
    43c4:	1c0a      	adds	r2, r1, #0
    43c6:	801a      	strh	r2, [r3, #0]
    while( size-- )
    43c8:	e005      	b.n	43d6 <memset1+0x26>
    {
        *dst++ = value;
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	1c5a      	adds	r2, r3, #1
    43ce:	607a      	str	r2, [r7, #4]
    43d0:	1cfa      	adds	r2, r7, #3
    43d2:	7812      	ldrb	r2, [r2, #0]
    43d4:	701a      	strb	r2, [r3, #0]
    while( size-- )
    43d6:	003b      	movs	r3, r7
    43d8:	881b      	ldrh	r3, [r3, #0]
    43da:	003a      	movs	r2, r7
    43dc:	1e59      	subs	r1, r3, #1
    43de:	8011      	strh	r1, [r2, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d1f2      	bne.n	43ca <memset1+0x1a>
    }
}
    43e4:	46c0      	nop			; (mov r8, r8)
    43e6:	46bd      	mov	sp, r7
    43e8:	b002      	add	sp, #8
    43ea:	bd80      	pop	{r7, pc}

000043ec <RtcInit>:
 * \brief Callback for the hw_timer when counter overflows
 */
static void RtcOverflowIrq( void );

void RtcInit( void )
{
    43ec:	b580      	push	{r7, lr}
    43ee:	af00      	add	r7, sp, #0
    if( RtcInitialized == false )
    43f0:	4b0d      	ldr	r3, [pc, #52]	; (4428 <RtcInit+0x3c>)
    43f2:	781b      	ldrb	r3, [r3, #0]
    43f4:	2201      	movs	r2, #1
    43f6:	4053      	eors	r3, r2
    43f8:	b2db      	uxtb	r3, r3
    43fa:	2b00      	cmp	r3, #0
    43fc:	d011      	beq.n	4422 <RtcInit+0x36>
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
        GpioInit( &DbgRtcPin0, RTC_DBG_PIN_0, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
        GpioInit( &DbgRtcPin1, RTC_DBG_PIN_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
        // RTC timer
        HwTimerInit( );
    43fe:	4b0b      	ldr	r3, [pc, #44]	; (442c <RtcInit+0x40>)
    4400:	4798      	blx	r3
        HwTimerAlarmSetCallback( RtcAlarmIrq );
    4402:	4b0b      	ldr	r3, [pc, #44]	; (4430 <RtcInit+0x44>)
    4404:	0018      	movs	r0, r3
    4406:	4b0b      	ldr	r3, [pc, #44]	; (4434 <RtcInit+0x48>)
    4408:	4798      	blx	r3
        HwTimerOverflowSetCallback( RtcOverflowIrq );
    440a:	4b0b      	ldr	r3, [pc, #44]	; (4438 <RtcInit+0x4c>)
    440c:	0018      	movs	r0, r3
    440e:	4b0b      	ldr	r3, [pc, #44]	; (443c <RtcInit+0x50>)
    4410:	4798      	blx	r3

        RtcTimerContext.AlarmState = ALARM_STOPPED;
    4412:	4b0b      	ldr	r3, [pc, #44]	; (4440 <RtcInit+0x54>)
    4414:	2200      	movs	r2, #0
    4416:	609a      	str	r2, [r3, #8]
        RtcSetTimerContext( );
    4418:	4b0a      	ldr	r3, [pc, #40]	; (4444 <RtcInit+0x58>)
    441a:	4798      	blx	r3
        RtcInitialized = true;
    441c:	4b02      	ldr	r3, [pc, #8]	; (4428 <RtcInit+0x3c>)
    441e:	2201      	movs	r2, #1
    4420:	701a      	strb	r2, [r3, #0]
    }
}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	46bd      	mov	sp, r7
    4426:	bd80      	pop	{r7, pc}
    4428:	20000c70 	.word	0x20000c70
    442c:	000040b9 	.word	0x000040b9
    4430:	000046f1 	.word	0x000046f1
    4434:	00004161 	.word	0x00004161
    4438:	00004719 	.word	0x00004719
    443c:	0000417d 	.word	0x0000417d
    4440:	20000c74 	.word	0x20000c74
    4444:	00004449 	.word	0x00004449

00004448 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext( void )
{
    4448:	b580      	push	{r7, lr}
    444a:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )HwTimerGetTime( );
    444c:	4b04      	ldr	r3, [pc, #16]	; (4460 <RtcSetTimerContext+0x18>)
    444e:	4798      	blx	r3
    4450:	0002      	movs	r2, r0
    4452:	4b04      	ldr	r3, [pc, #16]	; (4464 <RtcSetTimerContext+0x1c>)
    4454:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
    4456:	4b03      	ldr	r3, [pc, #12]	; (4464 <RtcSetTimerContext+0x1c>)
    4458:	681b      	ldr	r3, [r3, #0]
}
    445a:	0018      	movs	r0, r3
    445c:	46bd      	mov	sp, r7
    445e:	bd80      	pop	{r7, pc}
    4460:	00004209 	.word	0x00004209
    4464:	20000c74 	.word	0x20000c74

00004468 <RtcGetTimerContext>:

uint32_t RtcGetTimerContext( void )
{
    4468:	b580      	push	{r7, lr}
    446a:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
    446c:	4b02      	ldr	r3, [pc, #8]	; (4478 <RtcGetTimerContext+0x10>)
    446e:	681b      	ldr	r3, [r3, #0]
}
    4470:	0018      	movs	r0, r3
    4472:	46bd      	mov	sp, r7
    4474:	bd80      	pop	{r7, pc}
    4476:	46c0      	nop			; (mov r8, r8)
    4478:	20000c74 	.word	0x20000c74

0000447c <RtcGetMinimumTimeout>:

uint32_t RtcGetMinimumTimeout( void )
{
    447c:	b580      	push	{r7, lr}
    447e:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
    4480:	2303      	movs	r3, #3
}
    4482:	0018      	movs	r0, r3
    4484:	46bd      	mov	sp, r7
    4486:	bd80      	pop	{r7, pc}

00004488 <RtcMs2Tick>:

uint32_t RtcMs2Tick( TimerTime_t milliseconds )
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( milliseconds );
    4490:	687b      	ldr	r3, [r7, #4]
}
    4492:	0018      	movs	r0, r3
    4494:	46bd      	mov	sp, r7
    4496:	b002      	add	sp, #8
    4498:	bd80      	pop	{r7, pc}

0000449a <RtcTick2Ms>:

TimerTime_t RtcTick2Ms( uint32_t tick )
{
    449a:	b580      	push	{r7, lr}
    449c:	b084      	sub	sp, #16
    449e:	af00      	add	r7, sp, #0
    44a0:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> 10;
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	0a9b      	lsrs	r3, r3, #10
    44a6:	60fb      	str	r3, [r7, #12]

    tick = tick & 0x3FF;
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	059b      	lsls	r3, r3, #22
    44ac:	0d9b      	lsrs	r3, r3, #22
    44ae:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> 10 ) );
    44b0:	68fb      	ldr	r3, [r7, #12]
    44b2:	22fa      	movs	r2, #250	; 0xfa
    44b4:	0092      	lsls	r2, r2, #2
    44b6:	435a      	muls	r2, r3
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	21fa      	movs	r1, #250	; 0xfa
    44bc:	0089      	lsls	r1, r1, #2
    44be:	434b      	muls	r3, r1
    44c0:	0a9b      	lsrs	r3, r3, #10
    44c2:	18d3      	adds	r3, r2, r3
}
    44c4:	0018      	movs	r0, r3
    44c6:	46bd      	mov	sp, r7
    44c8:	b004      	add	sp, #16
    44ca:	bd80      	pop	{r7, pc}

000044cc <RtcSetAlarm>:
        __NOP( );
    }
}

void RtcSetAlarm( uint32_t timeout )
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b082      	sub	sp, #8
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
    RtcStartAlarm( timeout );
    44d4:	687b      	ldr	r3, [r7, #4]
    44d6:	0018      	movs	r0, r3
    44d8:	4b02      	ldr	r3, [pc, #8]	; (44e4 <RtcSetAlarm+0x18>)
    44da:	4798      	blx	r3
}
    44dc:	46c0      	nop			; (mov r8, r8)
    44de:	46bd      	mov	sp, r7
    44e0:	b002      	add	sp, #8
    44e2:	bd80      	pop	{r7, pc}
    44e4:	000044fd 	.word	0x000044fd

000044e8 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
    44e8:	b580      	push	{r7, lr}
    44ea:	af00      	add	r7, sp, #0
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    44ec:	4b02      	ldr	r3, [pc, #8]	; (44f8 <RtcStopAlarm+0x10>)
    44ee:	2200      	movs	r2, #0
    44f0:	609a      	str	r2, [r3, #8]
}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	46bd      	mov	sp, r7
    44f6:	bd80      	pop	{r7, pc}
    44f8:	20000c74 	.word	0x20000c74

000044fc <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
    44fc:	b580      	push	{r7, lr}
    44fe:	b084      	sub	sp, #16
    4500:	af00      	add	r7, sp, #0
    4502:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
    4504:	230c      	movs	r3, #12
    4506:	18fb      	adds	r3, r7, r3
    4508:	0018      	movs	r0, r3
    450a:	4b19      	ldr	r3, [pc, #100]	; (4570 <RtcStartAlarm+0x74>)
    450c:	4798      	blx	r3

    RtcStopAlarm( );
    450e:	4b19      	ldr	r3, [pc, #100]	; (4574 <RtcStartAlarm+0x78>)
    4510:	4798      	blx	r3

    RtcTimerContext.Delay = timeout;
    4512:	4b19      	ldr	r3, [pc, #100]	; (4578 <RtcStartAlarm+0x7c>)
    4514:	687a      	ldr	r2, [r7, #4]
    4516:	605a      	str	r2, [r3, #4]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin0, 0 );
    GpioWrite( &DbgRtcPin1, 0 );
#endif

    RtcTimeoutPendingInterrupt = true;
    4518:	4b18      	ldr	r3, [pc, #96]	; (457c <RtcStartAlarm+0x80>)
    451a:	2201      	movs	r2, #1
    451c:	701a      	strb	r2, [r3, #0]
    RtcTimeoutPendingPolling = false;
    451e:	4b18      	ldr	r3, [pc, #96]	; (4580 <RtcStartAlarm+0x84>)
    4520:	2200      	movs	r2, #0
    4522:	701a      	strb	r2, [r3, #0]

    RtcTimerContext.AlarmState = ALARM_RUNNING;
    4524:	4b14      	ldr	r3, [pc, #80]	; (4578 <RtcStartAlarm+0x7c>)
    4526:	2201      	movs	r2, #1
    4528:	609a      	str	r2, [r3, #8]
    if( HwTimerLoadAbsoluteTicks( RtcTimerContext.Time + RtcTimerContext.Delay ) == false )
    452a:	4b13      	ldr	r3, [pc, #76]	; (4578 <RtcStartAlarm+0x7c>)
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	4b12      	ldr	r3, [pc, #72]	; (4578 <RtcStartAlarm+0x7c>)
    4530:	685b      	ldr	r3, [r3, #4]
    4532:	18d3      	adds	r3, r2, r3
    4534:	0018      	movs	r0, r3
    4536:	4b13      	ldr	r3, [pc, #76]	; (4584 <RtcStartAlarm+0x88>)
    4538:	4798      	blx	r3
    453a:	0003      	movs	r3, r0
    453c:	001a      	movs	r2, r3
    453e:	2301      	movs	r3, #1
    4540:	4053      	eors	r3, r2
    4542:	b2db      	uxtb	r3, r3
    4544:	2b00      	cmp	r3, #0
    4546:	d00a      	beq.n	455e <RtcStartAlarm+0x62>
    {
        // If timer already passed
        if( RtcTimeoutPendingInterrupt == true )
    4548:	4b0c      	ldr	r3, [pc, #48]	; (457c <RtcStartAlarm+0x80>)
    454a:	781b      	ldrb	r3, [r3, #0]
    454c:	b2db      	uxtb	r3, r3
    454e:	2b00      	cmp	r3, #0
    4550:	d005      	beq.n	455e <RtcStartAlarm+0x62>
        {
            // And interrupt not handled, mark as polling
            RtcTimeoutPendingPolling = true;
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <RtcStartAlarm+0x84>)
    4554:	2201      	movs	r2, #1
    4556:	701a      	strb	r2, [r3, #0]
            RtcTimeoutPendingInterrupt = false;
    4558:	4b08      	ldr	r3, [pc, #32]	; (457c <RtcStartAlarm+0x80>)
    455a:	2200      	movs	r2, #0
    455c:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin0, 1 );
#endif
        }
    }
    CRITICAL_SECTION_END( );
    455e:	230c      	movs	r3, #12
    4560:	18fb      	adds	r3, r7, r3
    4562:	0018      	movs	r0, r3
    4564:	4b08      	ldr	r3, [pc, #32]	; (4588 <RtcStartAlarm+0x8c>)
    4566:	4798      	blx	r3
}
    4568:	46c0      	nop			; (mov r8, r8)
    456a:	46bd      	mov	sp, r7
    456c:	b004      	add	sp, #16
    456e:	bd80      	pop	{r7, pc}
    4570:	000013b9 	.word	0x000013b9
    4574:	000044e9 	.word	0x000044e9
    4578:	20000c74 	.word	0x20000c74
    457c:	20000c71 	.word	0x20000c71
    4580:	20000c72 	.word	0x20000c72
    4584:	00004199 	.word	0x00004199
    4588:	000013d7 	.word	0x000013d7

0000458c <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
    458c:	b580      	push	{r7, lr}
    458e:	af00      	add	r7, sp, #0
    return ( uint32_t )HwTimerGetTime( );
    4590:	4b02      	ldr	r3, [pc, #8]	; (459c <RtcGetTimerValue+0x10>)
    4592:	4798      	blx	r3
    4594:	0003      	movs	r3, r0
}
    4596:	0018      	movs	r0, r3
    4598:	46bd      	mov	sp, r7
    459a:	bd80      	pop	{r7, pc}
    459c:	00004209 	.word	0x00004209

000045a0 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
    45a0:	b580      	push	{r7, lr}
    45a2:	af00      	add	r7, sp, #0
    return ( uint32_t)( HwTimerGetTime( ) - RtcTimerContext.Time );
    45a4:	4b04      	ldr	r3, [pc, #16]	; (45b8 <RtcGetTimerElapsedTime+0x18>)
    45a6:	4798      	blx	r3
    45a8:	0002      	movs	r2, r0
    45aa:	4b04      	ldr	r3, [pc, #16]	; (45bc <RtcGetTimerElapsedTime+0x1c>)
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	1ad3      	subs	r3, r2, r3
}
    45b0:	0018      	movs	r0, r3
    45b2:	46bd      	mov	sp, r7
    45b4:	bd80      	pop	{r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00004209 	.word	0x00004209
    45bc:	20000c74 	.word	0x20000c74

000045c0 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b086      	sub	sp, #24
    45c4:	af00      	add	r7, sp, #0
    45c6:	6078      	str	r0, [r7, #4]
    uint32_t ticks = 0;
    45c8:	2300      	movs	r3, #0
    45ca:	617b      	str	r3, [r7, #20]

    uint32_t calendarValue = HwTimerGetTime( );
    45cc:	4b0b      	ldr	r3, [pc, #44]	; (45fc <RtcGetCalendarTime+0x3c>)
    45ce:	4798      	blx	r3
    45d0:	0003      	movs	r3, r0
    45d2:	613b      	str	r3, [r7, #16]

    uint32_t seconds = ( uint32_t )calendarValue >> 10;
    45d4:	693b      	ldr	r3, [r7, #16]
    45d6:	0a9b      	lsrs	r3, r3, #10
    45d8:	60fb      	str	r3, [r7, #12]

    ticks =  ( uint32_t )calendarValue & 0x3FF;
    45da:	693b      	ldr	r3, [r7, #16]
    45dc:	059b      	lsls	r3, r3, #22
    45de:	0d9b      	lsrs	r3, r3, #22
    45e0:	617b      	str	r3, [r7, #20]

    *milliseconds = RtcTick2Ms( ticks );
    45e2:	697b      	ldr	r3, [r7, #20]
    45e4:	0018      	movs	r0, r3
    45e6:	4b06      	ldr	r3, [pc, #24]	; (4600 <RtcGetCalendarTime+0x40>)
    45e8:	4798      	blx	r3
    45ea:	0003      	movs	r3, r0
    45ec:	b29a      	uxth	r2, r3
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	801a      	strh	r2, [r3, #0]

    return seconds;
    45f2:	68fb      	ldr	r3, [r7, #12]
}
    45f4:	0018      	movs	r0, r3
    45f6:	46bd      	mov	sp, r7
    45f8:	b006      	add	sp, #24
    45fa:	bd80      	pop	{r7, pc}
    45fc:	00004209 	.word	0x00004209
    4600:	0000449b 	.word	0x0000449b

00004604 <RtcBkupWrite>:

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
    4604:	b580      	push	{r7, lr}
    4606:	b084      	sub	sp, #16
    4608:	af00      	add	r7, sp, #0
    460a:	6078      	str	r0, [r7, #4]
    460c:	6039      	str	r1, [r7, #0]
    CRITICAL_SECTION_BEGIN( );
    460e:	230c      	movs	r3, #12
    4610:	18fb      	adds	r3, r7, r3
    4612:	0018      	movs	r0, r3
    4614:	4b08      	ldr	r3, [pc, #32]	; (4638 <RtcBkupWrite+0x34>)
    4616:	4798      	blx	r3
    RtcBkupRegisters[0] = data0;
    4618:	4b08      	ldr	r3, [pc, #32]	; (463c <RtcBkupWrite+0x38>)
    461a:	687a      	ldr	r2, [r7, #4]
    461c:	601a      	str	r2, [r3, #0]
    RtcBkupRegisters[1] = data1;
    461e:	4b07      	ldr	r3, [pc, #28]	; (463c <RtcBkupWrite+0x38>)
    4620:	683a      	ldr	r2, [r7, #0]
    4622:	605a      	str	r2, [r3, #4]
    CRITICAL_SECTION_END( );
    4624:	230c      	movs	r3, #12
    4626:	18fb      	adds	r3, r7, r3
    4628:	0018      	movs	r0, r3
    462a:	4b05      	ldr	r3, [pc, #20]	; (4640 <RtcBkupWrite+0x3c>)
    462c:	4798      	blx	r3
}
    462e:	46c0      	nop			; (mov r8, r8)
    4630:	46bd      	mov	sp, r7
    4632:	b004      	add	sp, #16
    4634:	bd80      	pop	{r7, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	000013b9 	.word	0x000013b9
    463c:	20000c80 	.word	0x20000c80
    4640:	000013d7 	.word	0x000013d7

00004644 <RtcBkupRead>:

void RtcBkupRead( uint32_t* data0, uint32_t* data1 )
{
    4644:	b580      	push	{r7, lr}
    4646:	b084      	sub	sp, #16
    4648:	af00      	add	r7, sp, #0
    464a:	6078      	str	r0, [r7, #4]
    464c:	6039      	str	r1, [r7, #0]
    CRITICAL_SECTION_BEGIN( );
    464e:	230c      	movs	r3, #12
    4650:	18fb      	adds	r3, r7, r3
    4652:	0018      	movs	r0, r3
    4654:	4b09      	ldr	r3, [pc, #36]	; (467c <RtcBkupRead+0x38>)
    4656:	4798      	blx	r3
    *data0 = RtcBkupRegisters[0];
    4658:	4b09      	ldr	r3, [pc, #36]	; (4680 <RtcBkupRead+0x3c>)
    465a:	681a      	ldr	r2, [r3, #0]
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	601a      	str	r2, [r3, #0]
    *data1 = RtcBkupRegisters[1];
    4660:	4b07      	ldr	r3, [pc, #28]	; (4680 <RtcBkupRead+0x3c>)
    4662:	685a      	ldr	r2, [r3, #4]
    4664:	683b      	ldr	r3, [r7, #0]
    4666:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
    4668:	230c      	movs	r3, #12
    466a:	18fb      	adds	r3, r7, r3
    466c:	0018      	movs	r0, r3
    466e:	4b05      	ldr	r3, [pc, #20]	; (4684 <RtcBkupRead+0x40>)
    4670:	4798      	blx	r3
}
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	46bd      	mov	sp, r7
    4676:	b004      	add	sp, #16
    4678:	bd80      	pop	{r7, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	000013b9 	.word	0x000013b9
    4680:	20000c80 	.word	0x20000c80
    4684:	000013d7 	.word	0x000013d7

00004688 <RtcProcess>:

void RtcProcess( void )
{
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    468e:	1d3b      	adds	r3, r7, #4
    4690:	0018      	movs	r0, r3
    4692:	4b11      	ldr	r3, [pc, #68]	; (46d8 <RtcProcess+0x50>)
    4694:	4798      	blx	r3

    if( (  RtcTimerContext.AlarmState == ALARM_RUNNING ) && ( RtcTimeoutPendingPolling == true ) )
    4696:	4b11      	ldr	r3, [pc, #68]	; (46dc <RtcProcess+0x54>)
    4698:	689b      	ldr	r3, [r3, #8]
    469a:	2b01      	cmp	r3, #1
    469c:	d113      	bne.n	46c6 <RtcProcess+0x3e>
    469e:	4b10      	ldr	r3, [pc, #64]	; (46e0 <RtcProcess+0x58>)
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	b2db      	uxtb	r3, r3
    46a4:	2b00      	cmp	r3, #0
    46a6:	d00e      	beq.n	46c6 <RtcProcess+0x3e>
    {
        if( RtcGetTimerElapsedTime( ) >= RtcTimerContext.Delay )
    46a8:	4b0e      	ldr	r3, [pc, #56]	; (46e4 <RtcProcess+0x5c>)
    46aa:	4798      	blx	r3
    46ac:	0002      	movs	r2, r0
    46ae:	4b0b      	ldr	r3, [pc, #44]	; (46dc <RtcProcess+0x54>)
    46b0:	685b      	ldr	r3, [r3, #4]
    46b2:	429a      	cmp	r2, r3
    46b4:	d307      	bcc.n	46c6 <RtcProcess+0x3e>
        {
            RtcTimerContext.AlarmState = ALARM_STOPPED;
    46b6:	4b09      	ldr	r3, [pc, #36]	; (46dc <RtcProcess+0x54>)
    46b8:	2200      	movs	r2, #0
    46ba:	609a      	str	r2, [r3, #8]

            // Because of one shot the task will be removed after the callback
            RtcTimeoutPendingPolling = false;
    46bc:	4b08      	ldr	r3, [pc, #32]	; (46e0 <RtcProcess+0x58>)
    46be:	2200      	movs	r2, #0
    46c0:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin0, 0 );
            GpioWrite( &DbgRtcPin1, 1 );
#endif
            // NOTE: The handler should take less then 1 ms otherwise the clock shifts
            TimerIrqHandler( );
    46c2:	4b09      	ldr	r3, [pc, #36]	; (46e8 <RtcProcess+0x60>)
    46c4:	4798      	blx	r3
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin1, 0 );
#endif
        }
    }
    CRITICAL_SECTION_END( );
    46c6:	1d3b      	adds	r3, r7, #4
    46c8:	0018      	movs	r0, r3
    46ca:	4b08      	ldr	r3, [pc, #32]	; (46ec <RtcProcess+0x64>)
    46cc:	4798      	blx	r3
}
    46ce:	46c0      	nop			; (mov r8, r8)
    46d0:	46bd      	mov	sp, r7
    46d2:	b002      	add	sp, #8
    46d4:	bd80      	pop	{r7, pc}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	000013b9 	.word	0x000013b9
    46dc:	20000c74 	.word	0x20000c74
    46e0:	20000c72 	.word	0x20000c72
    46e4:	000045a1 	.word	0x000045a1
    46e8:	00016ee5 	.word	0x00016ee5
    46ec:	000013d7 	.word	0x000013d7

000046f0 <RtcAlarmIrq>:
{
    return period;
}

static void RtcAlarmIrq( void )
{
    46f0:	b580      	push	{r7, lr}
    46f2:	af00      	add	r7, sp, #0
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    46f4:	4b05      	ldr	r3, [pc, #20]	; (470c <RtcAlarmIrq+0x1c>)
    46f6:	2200      	movs	r2, #0
    46f8:	609a      	str	r2, [r3, #8]
    // Because of one shot the task will be removed after the callback
    RtcTimeoutPendingInterrupt = false;
    46fa:	4b05      	ldr	r3, [pc, #20]	; (4710 <RtcAlarmIrq+0x20>)
    46fc:	2200      	movs	r2, #0
    46fe:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin1, 1 );
#endif
    // NOTE: The handler should take less then 1 ms otherwise the clock shifts
    TimerIrqHandler( );
    4700:	4b04      	ldr	r3, [pc, #16]	; (4714 <RtcAlarmIrq+0x24>)
    4702:	4798      	blx	r3
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin1, 0 );
#endif
}
    4704:	46c0      	nop			; (mov r8, r8)
    4706:	46bd      	mov	sp, r7
    4708:	bd80      	pop	{r7, pc}
    470a:	46c0      	nop			; (mov r8, r8)
    470c:	20000c74 	.word	0x20000c74
    4710:	20000c71 	.word	0x20000c71
    4714:	00016ee5 	.word	0x00016ee5

00004718 <RtcOverflowIrq>:

static void RtcOverflowIrq( void )
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
    //RtcTimerContext.Time += ( uint64_t )( 1 << 32 );
}
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	bd80      	pop	{r7, pc}

00004722 <hri_gclk_write_PCHCTRL_reg>:
{
    4722:	b580      	push	{r7, lr}
    4724:	b084      	sub	sp, #16
    4726:	af00      	add	r7, sp, #0
    4728:	60f8      	str	r0, [r7, #12]
    472a:	607a      	str	r2, [r7, #4]
    472c:	230b      	movs	r3, #11
    472e:	18fb      	adds	r3, r7, r3
    4730:	1c0a      	adds	r2, r1, #0
    4732:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4734:	230b      	movs	r3, #11
    4736:	18fb      	adds	r3, r7, r3
    4738:	781a      	ldrb	r2, [r3, #0]
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	3220      	adds	r2, #32
    473e:	0092      	lsls	r2, r2, #2
    4740:	6879      	ldr	r1, [r7, #4]
    4742:	50d1      	str	r1, [r2, r3]
}
    4744:	46c0      	nop			; (mov r8, r8)
    4746:	46bd      	mov	sp, r7
    4748:	b004      	add	sp, #16
    474a:	bd80      	pop	{r7, pc}

0000474c <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    474c:	b580      	push	{r7, lr}
    474e:	b082      	sub	sp, #8
    4750:	af00      	add	r7, sp, #0
    4752:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	6a1b      	ldr	r3, [r3, #32]
    4758:	2202      	movs	r2, #2
    475a:	431a      	orrs	r2, r3
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4760:	46c0      	nop			; (mov r8, r8)
    4762:	46bd      	mov	sp, r7
    4764:	b002      	add	sp, #8
    4766:	bd80      	pop	{r7, pc}

00004768 <hri_port_set_DIR_reg>:
{
    4768:	b580      	push	{r7, lr}
    476a:	b084      	sub	sp, #16
    476c:	af00      	add	r7, sp, #0
    476e:	60f8      	str	r0, [r7, #12]
    4770:	607a      	str	r2, [r7, #4]
    4772:	230b      	movs	r3, #11
    4774:	18fb      	adds	r3, r7, r3
    4776:	1c0a      	adds	r2, r1, #0
    4778:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    477a:	230b      	movs	r3, #11
    477c:	18fb      	adds	r3, r7, r3
    477e:	781b      	ldrb	r3, [r3, #0]
    4780:	68fa      	ldr	r2, [r7, #12]
    4782:	01db      	lsls	r3, r3, #7
    4784:	18d3      	adds	r3, r2, r3
    4786:	3308      	adds	r3, #8
    4788:	687a      	ldr	r2, [r7, #4]
    478a:	601a      	str	r2, [r3, #0]
}
    478c:	46c0      	nop			; (mov r8, r8)
    478e:	46bd      	mov	sp, r7
    4790:	b004      	add	sp, #16
    4792:	bd80      	pop	{r7, pc}

00004794 <hri_port_clear_DIR_reg>:
{
    4794:	b580      	push	{r7, lr}
    4796:	b084      	sub	sp, #16
    4798:	af00      	add	r7, sp, #0
    479a:	60f8      	str	r0, [r7, #12]
    479c:	607a      	str	r2, [r7, #4]
    479e:	230b      	movs	r3, #11
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	1c0a      	adds	r2, r1, #0
    47a4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    47a6:	230b      	movs	r3, #11
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	781b      	ldrb	r3, [r3, #0]
    47ac:	68fa      	ldr	r2, [r7, #12]
    47ae:	01db      	lsls	r3, r3, #7
    47b0:	18d3      	adds	r3, r2, r3
    47b2:	3304      	adds	r3, #4
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	601a      	str	r2, [r3, #0]
}
    47b8:	46c0      	nop			; (mov r8, r8)
    47ba:	46bd      	mov	sp, r7
    47bc:	b004      	add	sp, #16
    47be:	bd80      	pop	{r7, pc}

000047c0 <hri_port_set_OUT_reg>:
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b084      	sub	sp, #16
    47c4:	af00      	add	r7, sp, #0
    47c6:	60f8      	str	r0, [r7, #12]
    47c8:	607a      	str	r2, [r7, #4]
    47ca:	230b      	movs	r3, #11
    47cc:	18fb      	adds	r3, r7, r3
    47ce:	1c0a      	adds	r2, r1, #0
    47d0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    47d2:	230b      	movs	r3, #11
    47d4:	18fb      	adds	r3, r7, r3
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	68fa      	ldr	r2, [r7, #12]
    47da:	01db      	lsls	r3, r3, #7
    47dc:	18d3      	adds	r3, r2, r3
    47de:	3318      	adds	r3, #24
    47e0:	687a      	ldr	r2, [r7, #4]
    47e2:	601a      	str	r2, [r3, #0]
}
    47e4:	46c0      	nop			; (mov r8, r8)
    47e6:	46bd      	mov	sp, r7
    47e8:	b004      	add	sp, #16
    47ea:	bd80      	pop	{r7, pc}

000047ec <hri_port_clear_OUT_reg>:
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b084      	sub	sp, #16
    47f0:	af00      	add	r7, sp, #0
    47f2:	60f8      	str	r0, [r7, #12]
    47f4:	607a      	str	r2, [r7, #4]
    47f6:	230b      	movs	r3, #11
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	1c0a      	adds	r2, r1, #0
    47fc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    47fe:	230b      	movs	r3, #11
    4800:	18fb      	adds	r3, r7, r3
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	68fa      	ldr	r2, [r7, #12]
    4806:	01db      	lsls	r3, r3, #7
    4808:	18d3      	adds	r3, r2, r3
    480a:	3314      	adds	r3, #20
    480c:	687a      	ldr	r2, [r7, #4]
    480e:	601a      	str	r2, [r3, #0]
}
    4810:	46c0      	nop			; (mov r8, r8)
    4812:	46bd      	mov	sp, r7
    4814:	b004      	add	sp, #16
    4816:	bd80      	pop	{r7, pc}

00004818 <hri_port_write_WRCONFIG_reg>:
{
    4818:	b580      	push	{r7, lr}
    481a:	b084      	sub	sp, #16
    481c:	af00      	add	r7, sp, #0
    481e:	60f8      	str	r0, [r7, #12]
    4820:	607a      	str	r2, [r7, #4]
    4822:	230b      	movs	r3, #11
    4824:	18fb      	adds	r3, r7, r3
    4826:	1c0a      	adds	r2, r1, #0
    4828:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    482a:	230b      	movs	r3, #11
    482c:	18fb      	adds	r3, r7, r3
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	68fa      	ldr	r2, [r7, #12]
    4832:	01db      	lsls	r3, r3, #7
    4834:	18d3      	adds	r3, r2, r3
    4836:	3328      	adds	r3, #40	; 0x28
    4838:	687a      	ldr	r2, [r7, #4]
    483a:	601a      	str	r2, [r3, #0]
}
    483c:	46c0      	nop			; (mov r8, r8)
    483e:	46bd      	mov	sp, r7
    4840:	b004      	add	sp, #16
    4842:	bd80      	pop	{r7, pc}

00004844 <hri_port_write_PMUX_PMUXE_bf>:
{
    4844:	b590      	push	{r4, r7, lr}
    4846:	b085      	sub	sp, #20
    4848:	af00      	add	r7, sp, #0
    484a:	6078      	str	r0, [r7, #4]
    484c:	000c      	movs	r4, r1
    484e:	0010      	movs	r0, r2
    4850:	0019      	movs	r1, r3
    4852:	1cfb      	adds	r3, r7, #3
    4854:	1c22      	adds	r2, r4, #0
    4856:	701a      	strb	r2, [r3, #0]
    4858:	1cbb      	adds	r3, r7, #2
    485a:	1c02      	adds	r2, r0, #0
    485c:	701a      	strb	r2, [r3, #0]
    485e:	1c7b      	adds	r3, r7, #1
    4860:	1c0a      	adds	r2, r1, #0
    4862:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4864:	1cfb      	adds	r3, r7, #3
    4866:	7819      	ldrb	r1, [r3, #0]
    4868:	1cbb      	adds	r3, r7, #2
    486a:	781a      	ldrb	r2, [r3, #0]
    486c:	230f      	movs	r3, #15
    486e:	18fb      	adds	r3, r7, r3
    4870:	6878      	ldr	r0, [r7, #4]
    4872:	2430      	movs	r4, #48	; 0x30
    4874:	01c9      	lsls	r1, r1, #7
    4876:	1841      	adds	r1, r0, r1
    4878:	188a      	adds	r2, r1, r2
    487a:	1912      	adds	r2, r2, r4
    487c:	7812      	ldrb	r2, [r2, #0]
    487e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4880:	230f      	movs	r3, #15
    4882:	18fb      	adds	r3, r7, r3
    4884:	220f      	movs	r2, #15
    4886:	18ba      	adds	r2, r7, r2
    4888:	7812      	ldrb	r2, [r2, #0]
    488a:	210f      	movs	r1, #15
    488c:	438a      	bics	r2, r1
    488e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    4890:	1c7b      	adds	r3, r7, #1
    4892:	781b      	ldrb	r3, [r3, #0]
    4894:	220f      	movs	r2, #15
    4896:	4013      	ands	r3, r2
    4898:	b2d9      	uxtb	r1, r3
    489a:	230f      	movs	r3, #15
    489c:	18fb      	adds	r3, r7, r3
    489e:	220f      	movs	r2, #15
    48a0:	18ba      	adds	r2, r7, r2
    48a2:	7812      	ldrb	r2, [r2, #0]
    48a4:	430a      	orrs	r2, r1
    48a6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48a8:	1cfb      	adds	r3, r7, #3
    48aa:	781a      	ldrb	r2, [r3, #0]
    48ac:	1cbb      	adds	r3, r7, #2
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	6879      	ldr	r1, [r7, #4]
    48b2:	2030      	movs	r0, #48	; 0x30
    48b4:	01d2      	lsls	r2, r2, #7
    48b6:	188a      	adds	r2, r1, r2
    48b8:	18d3      	adds	r3, r2, r3
    48ba:	181b      	adds	r3, r3, r0
    48bc:	220f      	movs	r2, #15
    48be:	18ba      	adds	r2, r7, r2
    48c0:	7812      	ldrb	r2, [r2, #0]
    48c2:	701a      	strb	r2, [r3, #0]
}
    48c4:	46c0      	nop			; (mov r8, r8)
    48c6:	46bd      	mov	sp, r7
    48c8:	b005      	add	sp, #20
    48ca:	bd90      	pop	{r4, r7, pc}

000048cc <hri_port_write_PMUX_PMUXO_bf>:
{
    48cc:	b590      	push	{r4, r7, lr}
    48ce:	b085      	sub	sp, #20
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
    48d4:	000c      	movs	r4, r1
    48d6:	0010      	movs	r0, r2
    48d8:	0019      	movs	r1, r3
    48da:	1cfb      	adds	r3, r7, #3
    48dc:	1c22      	adds	r2, r4, #0
    48de:	701a      	strb	r2, [r3, #0]
    48e0:	1cbb      	adds	r3, r7, #2
    48e2:	1c02      	adds	r2, r0, #0
    48e4:	701a      	strb	r2, [r3, #0]
    48e6:	1c7b      	adds	r3, r7, #1
    48e8:	1c0a      	adds	r2, r1, #0
    48ea:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    48ec:	1cfb      	adds	r3, r7, #3
    48ee:	7819      	ldrb	r1, [r3, #0]
    48f0:	1cbb      	adds	r3, r7, #2
    48f2:	781a      	ldrb	r2, [r3, #0]
    48f4:	230f      	movs	r3, #15
    48f6:	18fb      	adds	r3, r7, r3
    48f8:	6878      	ldr	r0, [r7, #4]
    48fa:	2430      	movs	r4, #48	; 0x30
    48fc:	01c9      	lsls	r1, r1, #7
    48fe:	1841      	adds	r1, r0, r1
    4900:	188a      	adds	r2, r1, r2
    4902:	1912      	adds	r2, r2, r4
    4904:	7812      	ldrb	r2, [r2, #0]
    4906:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4908:	230f      	movs	r3, #15
    490a:	18fb      	adds	r3, r7, r3
    490c:	220f      	movs	r2, #15
    490e:	18ba      	adds	r2, r7, r2
    4910:	7812      	ldrb	r2, [r2, #0]
    4912:	210f      	movs	r1, #15
    4914:	400a      	ands	r2, r1
    4916:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    4918:	1c7b      	adds	r3, r7, #1
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	011b      	lsls	r3, r3, #4
    491e:	b2d9      	uxtb	r1, r3
    4920:	230f      	movs	r3, #15
    4922:	18fb      	adds	r3, r7, r3
    4924:	220f      	movs	r2, #15
    4926:	18ba      	adds	r2, r7, r2
    4928:	7812      	ldrb	r2, [r2, #0]
    492a:	430a      	orrs	r2, r1
    492c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    492e:	1cfb      	adds	r3, r7, #3
    4930:	781a      	ldrb	r2, [r3, #0]
    4932:	1cbb      	adds	r3, r7, #2
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	6879      	ldr	r1, [r7, #4]
    4938:	2030      	movs	r0, #48	; 0x30
    493a:	01d2      	lsls	r2, r2, #7
    493c:	188a      	adds	r2, r1, r2
    493e:	18d3      	adds	r3, r2, r3
    4940:	181b      	adds	r3, r3, r0
    4942:	220f      	movs	r2, #15
    4944:	18ba      	adds	r2, r7, r2
    4946:	7812      	ldrb	r2, [r2, #0]
    4948:	701a      	strb	r2, [r3, #0]
}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	46bd      	mov	sp, r7
    494e:	b005      	add	sp, #20
    4950:	bd90      	pop	{r4, r7, pc}

00004952 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    4952:	b590      	push	{r4, r7, lr}
    4954:	b085      	sub	sp, #20
    4956:	af00      	add	r7, sp, #0
    4958:	6078      	str	r0, [r7, #4]
    495a:	000c      	movs	r4, r1
    495c:	0010      	movs	r0, r2
    495e:	0019      	movs	r1, r3
    4960:	1cfb      	adds	r3, r7, #3
    4962:	1c22      	adds	r2, r4, #0
    4964:	701a      	strb	r2, [r3, #0]
    4966:	1cbb      	adds	r3, r7, #2
    4968:	1c02      	adds	r2, r0, #0
    496a:	701a      	strb	r2, [r3, #0]
    496c:	1c7b      	adds	r3, r7, #1
    496e:	1c0a      	adds	r2, r1, #0
    4970:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4972:	1cfb      	adds	r3, r7, #3
    4974:	7819      	ldrb	r1, [r3, #0]
    4976:	1cbb      	adds	r3, r7, #2
    4978:	781a      	ldrb	r2, [r3, #0]
    497a:	230f      	movs	r3, #15
    497c:	18fb      	adds	r3, r7, r3
    497e:	6878      	ldr	r0, [r7, #4]
    4980:	2440      	movs	r4, #64	; 0x40
    4982:	01c9      	lsls	r1, r1, #7
    4984:	1841      	adds	r1, r0, r1
    4986:	188a      	adds	r2, r1, r2
    4988:	1912      	adds	r2, r2, r4
    498a:	7812      	ldrb	r2, [r2, #0]
    498c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    498e:	230f      	movs	r3, #15
    4990:	18fb      	adds	r3, r7, r3
    4992:	220f      	movs	r2, #15
    4994:	18ba      	adds	r2, r7, r2
    4996:	7812      	ldrb	r2, [r2, #0]
    4998:	2101      	movs	r1, #1
    499a:	438a      	bics	r2, r1
    499c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    499e:	1c7b      	adds	r3, r7, #1
    49a0:	7819      	ldrb	r1, [r3, #0]
    49a2:	230f      	movs	r3, #15
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	220f      	movs	r2, #15
    49a8:	18ba      	adds	r2, r7, r2
    49aa:	7812      	ldrb	r2, [r2, #0]
    49ac:	430a      	orrs	r2, r1
    49ae:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    49b0:	1cfb      	adds	r3, r7, #3
    49b2:	781a      	ldrb	r2, [r3, #0]
    49b4:	1cbb      	adds	r3, r7, #2
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	2040      	movs	r0, #64	; 0x40
    49bc:	01d2      	lsls	r2, r2, #7
    49be:	188a      	adds	r2, r1, r2
    49c0:	18d3      	adds	r3, r2, r3
    49c2:	181b      	adds	r3, r3, r0
    49c4:	220f      	movs	r2, #15
    49c6:	18ba      	adds	r2, r7, r2
    49c8:	7812      	ldrb	r2, [r2, #0]
    49ca:	701a      	strb	r2, [r3, #0]
}
    49cc:	46c0      	nop			; (mov r8, r8)
    49ce:	46bd      	mov	sp, r7
    49d0:	b005      	add	sp, #20
    49d2:	bd90      	pop	{r4, r7, pc}

000049d4 <hri_port_set_PINCFG_PULLEN_bit>:
{
    49d4:	b5b0      	push	{r4, r5, r7, lr}
    49d6:	b082      	sub	sp, #8
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
    49dc:	0008      	movs	r0, r1
    49de:	0011      	movs	r1, r2
    49e0:	1cfb      	adds	r3, r7, #3
    49e2:	1c02      	adds	r2, r0, #0
    49e4:	701a      	strb	r2, [r3, #0]
    49e6:	1cbb      	adds	r3, r7, #2
    49e8:	1c0a      	adds	r2, r1, #0
    49ea:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    49ec:	1cfb      	adds	r3, r7, #3
    49ee:	781a      	ldrb	r2, [r3, #0]
    49f0:	1cbb      	adds	r3, r7, #2
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	1cf9      	adds	r1, r7, #3
    49f6:	7808      	ldrb	r0, [r1, #0]
    49f8:	1cb9      	adds	r1, r7, #2
    49fa:	7809      	ldrb	r1, [r1, #0]
    49fc:	687c      	ldr	r4, [r7, #4]
    49fe:	2540      	movs	r5, #64	; 0x40
    4a00:	01c0      	lsls	r0, r0, #7
    4a02:	1820      	adds	r0, r4, r0
    4a04:	1841      	adds	r1, r0, r1
    4a06:	1949      	adds	r1, r1, r5
    4a08:	7809      	ldrb	r1, [r1, #0]
    4a0a:	b2c9      	uxtb	r1, r1
    4a0c:	2004      	movs	r0, #4
    4a0e:	4301      	orrs	r1, r0
    4a10:	b2cc      	uxtb	r4, r1
    4a12:	6879      	ldr	r1, [r7, #4]
    4a14:	2040      	movs	r0, #64	; 0x40
    4a16:	01d2      	lsls	r2, r2, #7
    4a18:	188a      	adds	r2, r1, r2
    4a1a:	18d3      	adds	r3, r2, r3
    4a1c:	181b      	adds	r3, r3, r0
    4a1e:	1c22      	adds	r2, r4, #0
    4a20:	701a      	strb	r2, [r3, #0]
}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	46bd      	mov	sp, r7
    4a26:	b002      	add	sp, #8
    4a28:	bdb0      	pop	{r4, r5, r7, pc}

00004a2a <hri_port_clear_PINCFG_PULLEN_bit>:
{
    4a2a:	b5b0      	push	{r4, r5, r7, lr}
    4a2c:	b082      	sub	sp, #8
    4a2e:	af00      	add	r7, sp, #0
    4a30:	6078      	str	r0, [r7, #4]
    4a32:	0008      	movs	r0, r1
    4a34:	0011      	movs	r1, r2
    4a36:	1cfb      	adds	r3, r7, #3
    4a38:	1c02      	adds	r2, r0, #0
    4a3a:	701a      	strb	r2, [r3, #0]
    4a3c:	1cbb      	adds	r3, r7, #2
    4a3e:	1c0a      	adds	r2, r1, #0
    4a40:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4a42:	1cfb      	adds	r3, r7, #3
    4a44:	781a      	ldrb	r2, [r3, #0]
    4a46:	1cbb      	adds	r3, r7, #2
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	1cf9      	adds	r1, r7, #3
    4a4c:	7808      	ldrb	r0, [r1, #0]
    4a4e:	1cb9      	adds	r1, r7, #2
    4a50:	7809      	ldrb	r1, [r1, #0]
    4a52:	687c      	ldr	r4, [r7, #4]
    4a54:	2540      	movs	r5, #64	; 0x40
    4a56:	01c0      	lsls	r0, r0, #7
    4a58:	1820      	adds	r0, r4, r0
    4a5a:	1841      	adds	r1, r0, r1
    4a5c:	1949      	adds	r1, r1, r5
    4a5e:	7809      	ldrb	r1, [r1, #0]
    4a60:	b2c9      	uxtb	r1, r1
    4a62:	2004      	movs	r0, #4
    4a64:	4381      	bics	r1, r0
    4a66:	b2cc      	uxtb	r4, r1
    4a68:	6879      	ldr	r1, [r7, #4]
    4a6a:	2040      	movs	r0, #64	; 0x40
    4a6c:	01d2      	lsls	r2, r2, #7
    4a6e:	188a      	adds	r2, r1, r2
    4a70:	18d3      	adds	r3, r2, r3
    4a72:	181b      	adds	r3, r3, r0
    4a74:	1c22      	adds	r2, r4, #0
    4a76:	701a      	strb	r2, [r3, #0]
}
    4a78:	46c0      	nop			; (mov r8, r8)
    4a7a:	46bd      	mov	sp, r7
    4a7c:	b002      	add	sp, #8
    4a7e:	bdb0      	pop	{r4, r5, r7, pc}

00004a80 <hri_sercomspi_wait_for_sync>:
{
    4a80:	b580      	push	{r7, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
    4a88:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4a8a:	46c0      	nop			; (mov r8, r8)
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	69db      	ldr	r3, [r3, #28]
    4a90:	683a      	ldr	r2, [r7, #0]
    4a92:	4013      	ands	r3, r2
    4a94:	d1fa      	bne.n	4a8c <hri_sercomspi_wait_for_sync+0xc>
}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	46bd      	mov	sp, r7
    4a9a:	b002      	add	sp, #8
    4a9c:	bd80      	pop	{r7, pc}

00004a9e <hri_sercomspi_read_INTFLAG_reg>:
{
    4a9e:	b580      	push	{r7, lr}
    4aa0:	b082      	sub	sp, #8
    4aa2:	af00      	add	r7, sp, #0
    4aa4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	7e1b      	ldrb	r3, [r3, #24]
    4aaa:	b2db      	uxtb	r3, r3
}
    4aac:	0018      	movs	r0, r3
    4aae:	46bd      	mov	sp, r7
    4ab0:	b002      	add	sp, #8
    4ab2:	bd80      	pop	{r7, pc}

00004ab4 <hri_sercomspi_clear_INTFLAG_reg>:
{
    4ab4:	b580      	push	{r7, lr}
    4ab6:	b082      	sub	sp, #8
    4ab8:	af00      	add	r7, sp, #0
    4aba:	6078      	str	r0, [r7, #4]
    4abc:	000a      	movs	r2, r1
    4abe:	1cfb      	adds	r3, r7, #3
    4ac0:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	1cfa      	adds	r2, r7, #3
    4ac6:	7812      	ldrb	r2, [r2, #0]
    4ac8:	761a      	strb	r2, [r3, #24]
}
    4aca:	46c0      	nop			; (mov r8, r8)
    4acc:	46bd      	mov	sp, r7
    4ace:	b002      	add	sp, #8
    4ad0:	bd80      	pop	{r7, pc}
	...

00004ad4 <hri_sercomspi_set_CTRLA_SWRST_bit>:
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	af00      	add	r7, sp, #0
    4ada:	6078      	str	r0, [r7, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	2101      	movs	r1, #1
    4ae0:	0018      	movs	r0, r3
    4ae2:	4b06      	ldr	r3, [pc, #24]	; (4afc <hri_sercomspi_set_CTRLA_SWRST_bit+0x28>)
    4ae4:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	2201      	movs	r2, #1
    4aec:	431a      	orrs	r2, r3
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	601a      	str	r2, [r3, #0]
}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	46bd      	mov	sp, r7
    4af6:	b002      	add	sp, #8
    4af8:	bd80      	pop	{r7, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	00004a81 	.word	0x00004a81

00004b00 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b082      	sub	sp, #8
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2103      	movs	r1, #3
    4b0c:	0018      	movs	r0, r3
    4b0e:	4b06      	ldr	r3, [pc, #24]	; (4b28 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    4b10:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4b12:	687b      	ldr	r3, [r7, #4]
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	2202      	movs	r2, #2
    4b18:	431a      	orrs	r2, r3
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	601a      	str	r2, [r3, #0]
}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	46bd      	mov	sp, r7
    4b22:	b002      	add	sp, #8
    4b24:	bd80      	pop	{r7, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	00004a81 	.word	0x00004a81

00004b2c <hri_sercomspi_write_CTRLA_reg>:
{
    4b2c:	b580      	push	{r7, lr}
    4b2e:	b082      	sub	sp, #8
    4b30:	af00      	add	r7, sp, #0
    4b32:	6078      	str	r0, [r7, #4]
    4b34:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	683a      	ldr	r2, [r7, #0]
    4b3a:	601a      	str	r2, [r3, #0]
}
    4b3c:	46c0      	nop			; (mov r8, r8)
    4b3e:	46bd      	mov	sp, r7
    4b40:	b002      	add	sp, #8
    4b42:	bd80      	pop	{r7, pc}

00004b44 <hri_sercomspi_write_CTRLB_reg>:
{
    4b44:	b580      	push	{r7, lr}
    4b46:	b082      	sub	sp, #8
    4b48:	af00      	add	r7, sp, #0
    4b4a:	6078      	str	r0, [r7, #4]
    4b4c:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	683a      	ldr	r2, [r7, #0]
    4b52:	605a      	str	r2, [r3, #4]
}
    4b54:	46c0      	nop			; (mov r8, r8)
    4b56:	46bd      	mov	sp, r7
    4b58:	b002      	add	sp, #8
    4b5a:	bd80      	pop	{r7, pc}

00004b5c <hri_sercomspi_write_BAUD_reg>:
{
    4b5c:	b580      	push	{r7, lr}
    4b5e:	b082      	sub	sp, #8
    4b60:	af00      	add	r7, sp, #0
    4b62:	6078      	str	r0, [r7, #4]
    4b64:	000a      	movs	r2, r1
    4b66:	1cfb      	adds	r3, r7, #3
    4b68:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	1cfa      	adds	r2, r7, #3
    4b6e:	7812      	ldrb	r2, [r2, #0]
    4b70:	731a      	strb	r2, [r3, #12]
}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	46bd      	mov	sp, r7
    4b76:	b002      	add	sp, #8
    4b78:	bd80      	pop	{r7, pc}

00004b7a <hri_sercomspi_read_DATA_reg>:
{
    4b7a:	b580      	push	{r7, lr}
    4b7c:	b082      	sub	sp, #8
    4b7e:	af00      	add	r7, sp, #0
    4b80:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    4b86:	0018      	movs	r0, r3
    4b88:	46bd      	mov	sp, r7
    4b8a:	b002      	add	sp, #8
    4b8c:	bd80      	pop	{r7, pc}

00004b8e <hri_sercomspi_write_DATA_reg>:
{
    4b8e:	b580      	push	{r7, lr}
    4b90:	b082      	sub	sp, #8
    4b92:	af00      	add	r7, sp, #0
    4b94:	6078      	str	r0, [r7, #4]
    4b96:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	46bd      	mov	sp, r7
    4ba2:	b002      	add	sp, #8
    4ba4:	bd80      	pop	{r7, pc}

00004ba6 <hri_sercomspi_write_DBGCTRL_reg>:
{
    4ba6:	b580      	push	{r7, lr}
    4ba8:	b082      	sub	sp, #8
    4baa:	af00      	add	r7, sp, #0
    4bac:	6078      	str	r0, [r7, #4]
    4bae:	000a      	movs	r2, r1
    4bb0:	1cfb      	adds	r3, r7, #3
    4bb2:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	1cfa      	adds	r2, r7, #3
    4bb8:	2130      	movs	r1, #48	; 0x30
    4bba:	7812      	ldrb	r2, [r2, #0]
    4bbc:	545a      	strb	r2, [r3, r1]
}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	46bd      	mov	sp, r7
    4bc2:	b002      	add	sp, #8
    4bc4:	bd80      	pop	{r7, pc}
	...

00004bc8 <_gpio_set_direction>:
{
    4bc8:	b580      	push	{r7, lr}
    4bca:	b082      	sub	sp, #8
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6039      	str	r1, [r7, #0]
    4bd0:	0011      	movs	r1, r2
    4bd2:	1dfb      	adds	r3, r7, #7
    4bd4:	1c02      	adds	r2, r0, #0
    4bd6:	701a      	strb	r2, [r3, #0]
    4bd8:	1dbb      	adds	r3, r7, #6
    4bda:	1c0a      	adds	r2, r1, #0
    4bdc:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    4bde:	1dbb      	adds	r3, r7, #6
    4be0:	781b      	ldrb	r3, [r3, #0]
    4be2:	2b01      	cmp	r3, #1
    4be4:	d023      	beq.n	4c2e <_gpio_set_direction+0x66>
    4be6:	2b02      	cmp	r3, #2
    4be8:	d03f      	beq.n	4c6a <_gpio_set_direction+0xa2>
    4bea:	2b00      	cmp	r3, #0
    4bec:	d15d      	bne.n	4caa <_gpio_set_direction+0xe2>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    4bee:	683a      	ldr	r2, [r7, #0]
    4bf0:	1dfb      	adds	r3, r7, #7
    4bf2:	7819      	ldrb	r1, [r3, #0]
    4bf4:	23c0      	movs	r3, #192	; 0xc0
    4bf6:	05db      	lsls	r3, r3, #23
    4bf8:	0018      	movs	r0, r3
    4bfa:	4b31      	ldr	r3, [pc, #196]	; (4cc0 <_gpio_set_direction+0xf8>)
    4bfc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4bfe:	683b      	ldr	r3, [r7, #0]
    4c00:	041b      	lsls	r3, r3, #16
    4c02:	0c1b      	lsrs	r3, r3, #16
    4c04:	2280      	movs	r2, #128	; 0x80
    4c06:	05d2      	lsls	r2, r2, #23
    4c08:	431a      	orrs	r2, r3
    4c0a:	1dfb      	adds	r3, r7, #7
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	482d      	ldr	r0, [pc, #180]	; (4cc4 <_gpio_set_direction+0xfc>)
    4c10:	0019      	movs	r1, r3
    4c12:	4b2d      	ldr	r3, [pc, #180]	; (4cc8 <_gpio_set_direction+0x100>)
    4c14:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4c16:	683b      	ldr	r3, [r7, #0]
    4c18:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4c1a:	22c0      	movs	r2, #192	; 0xc0
    4c1c:	0612      	lsls	r2, r2, #24
    4c1e:	431a      	orrs	r2, r3
    4c20:	1dfb      	adds	r3, r7, #7
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	4827      	ldr	r0, [pc, #156]	; (4cc4 <_gpio_set_direction+0xfc>)
    4c26:	0019      	movs	r1, r3
    4c28:	4b27      	ldr	r3, [pc, #156]	; (4cc8 <_gpio_set_direction+0x100>)
    4c2a:	4798      	blx	r3
		break;
    4c2c:	e043      	b.n	4cb6 <_gpio_set_direction+0xee>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    4c2e:	683a      	ldr	r2, [r7, #0]
    4c30:	1dfb      	adds	r3, r7, #7
    4c32:	7819      	ldrb	r1, [r3, #0]
    4c34:	23c0      	movs	r3, #192	; 0xc0
    4c36:	05db      	lsls	r3, r3, #23
    4c38:	0018      	movs	r0, r3
    4c3a:	4b21      	ldr	r3, [pc, #132]	; (4cc0 <_gpio_set_direction+0xf8>)
    4c3c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4c3e:	683b      	ldr	r3, [r7, #0]
    4c40:	041b      	lsls	r3, r3, #16
    4c42:	0c1b      	lsrs	r3, r3, #16
    4c44:	4a21      	ldr	r2, [pc, #132]	; (4ccc <_gpio_set_direction+0x104>)
    4c46:	431a      	orrs	r2, r3
    4c48:	1dfb      	adds	r3, r7, #7
    4c4a:	781b      	ldrb	r3, [r3, #0]
    4c4c:	481d      	ldr	r0, [pc, #116]	; (4cc4 <_gpio_set_direction+0xfc>)
    4c4e:	0019      	movs	r1, r3
    4c50:	4b1d      	ldr	r3, [pc, #116]	; (4cc8 <_gpio_set_direction+0x100>)
    4c52:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    4c54:	683b      	ldr	r3, [r7, #0]
    4c56:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4c58:	4a1d      	ldr	r2, [pc, #116]	; (4cd0 <_gpio_set_direction+0x108>)
    4c5a:	431a      	orrs	r2, r3
    4c5c:	1dfb      	adds	r3, r7, #7
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	4818      	ldr	r0, [pc, #96]	; (4cc4 <_gpio_set_direction+0xfc>)
    4c62:	0019      	movs	r1, r3
    4c64:	4b18      	ldr	r3, [pc, #96]	; (4cc8 <_gpio_set_direction+0x100>)
    4c66:	4798      	blx	r3
		break;
    4c68:	e025      	b.n	4cb6 <_gpio_set_direction+0xee>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    4c6a:	683a      	ldr	r2, [r7, #0]
    4c6c:	1dfb      	adds	r3, r7, #7
    4c6e:	7819      	ldrb	r1, [r3, #0]
    4c70:	23c0      	movs	r3, #192	; 0xc0
    4c72:	05db      	lsls	r3, r3, #23
    4c74:	0018      	movs	r0, r3
    4c76:	4b17      	ldr	r3, [pc, #92]	; (4cd4 <_gpio_set_direction+0x10c>)
    4c78:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4c7a:	683b      	ldr	r3, [r7, #0]
    4c7c:	041b      	lsls	r3, r3, #16
    4c7e:	0c1b      	lsrs	r3, r3, #16
    4c80:	2280      	movs	r2, #128	; 0x80
    4c82:	05d2      	lsls	r2, r2, #23
    4c84:	431a      	orrs	r2, r3
    4c86:	1dfb      	adds	r3, r7, #7
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	480e      	ldr	r0, [pc, #56]	; (4cc4 <_gpio_set_direction+0xfc>)
    4c8c:	0019      	movs	r1, r3
    4c8e:	4b0e      	ldr	r3, [pc, #56]	; (4cc8 <_gpio_set_direction+0x100>)
    4c90:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4c92:	683b      	ldr	r3, [r7, #0]
    4c94:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4c96:	22c0      	movs	r2, #192	; 0xc0
    4c98:	0612      	lsls	r2, r2, #24
    4c9a:	431a      	orrs	r2, r3
    4c9c:	1dfb      	adds	r3, r7, #7
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	4808      	ldr	r0, [pc, #32]	; (4cc4 <_gpio_set_direction+0xfc>)
    4ca2:	0019      	movs	r1, r3
    4ca4:	4b08      	ldr	r3, [pc, #32]	; (4cc8 <_gpio_set_direction+0x100>)
    4ca6:	4798      	blx	r3
		break;
    4ca8:	e005      	b.n	4cb6 <_gpio_set_direction+0xee>
		ASSERT(false);
    4caa:	4b0b      	ldr	r3, [pc, #44]	; (4cd8 <_gpio_set_direction+0x110>)
    4cac:	224e      	movs	r2, #78	; 0x4e
    4cae:	0019      	movs	r1, r3
    4cb0:	2000      	movs	r0, #0
    4cb2:	4b0a      	ldr	r3, [pc, #40]	; (4cdc <_gpio_set_direction+0x114>)
    4cb4:	4798      	blx	r3
}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	46bd      	mov	sp, r7
    4cba:	b002      	add	sp, #8
    4cbc:	bd80      	pop	{r7, pc}
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	00004795 	.word	0x00004795
    4cc4:	40002800 	.word	0x40002800
    4cc8:	00004819 	.word	0x00004819
    4ccc:	40020000 	.word	0x40020000
    4cd0:	c0020000 	.word	0xc0020000
    4cd4:	00004769 	.word	0x00004769
    4cd8:	0001f274 	.word	0x0001f274
    4cdc:	00002379 	.word	0x00002379

00004ce0 <_gpio_set_level>:
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b082      	sub	sp, #8
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6039      	str	r1, [r7, #0]
    4ce8:	0011      	movs	r1, r2
    4cea:	1dfb      	adds	r3, r7, #7
    4cec:	1c02      	adds	r2, r0, #0
    4cee:	701a      	strb	r2, [r3, #0]
    4cf0:	1dbb      	adds	r3, r7, #6
    4cf2:	1c0a      	adds	r2, r1, #0
    4cf4:	701a      	strb	r2, [r3, #0]
	if (level) {
    4cf6:	1dbb      	adds	r3, r7, #6
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d008      	beq.n	4d10 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    4cfe:	683a      	ldr	r2, [r7, #0]
    4d00:	1dfb      	adds	r3, r7, #7
    4d02:	7819      	ldrb	r1, [r3, #0]
    4d04:	23c0      	movs	r3, #192	; 0xc0
    4d06:	05db      	lsls	r3, r3, #23
    4d08:	0018      	movs	r0, r3
    4d0a:	4b07      	ldr	r3, [pc, #28]	; (4d28 <_gpio_set_level+0x48>)
    4d0c:	4798      	blx	r3
}
    4d0e:	e007      	b.n	4d20 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    4d10:	683a      	ldr	r2, [r7, #0]
    4d12:	1dfb      	adds	r3, r7, #7
    4d14:	7819      	ldrb	r1, [r3, #0]
    4d16:	23c0      	movs	r3, #192	; 0xc0
    4d18:	05db      	lsls	r3, r3, #23
    4d1a:	0018      	movs	r0, r3
    4d1c:	4b03      	ldr	r3, [pc, #12]	; (4d2c <_gpio_set_level+0x4c>)
    4d1e:	4798      	blx	r3
}
    4d20:	46c0      	nop			; (mov r8, r8)
    4d22:	46bd      	mov	sp, r7
    4d24:	b002      	add	sp, #8
    4d26:	bd80      	pop	{r7, pc}
    4d28:	000047c1 	.word	0x000047c1
    4d2c:	000047ed 	.word	0x000047ed

00004d30 <_gpio_set_pin_pull_mode>:
{
    4d30:	b590      	push	{r4, r7, lr}
    4d32:	b083      	sub	sp, #12
    4d34:	af00      	add	r7, sp, #0
    4d36:	0004      	movs	r4, r0
    4d38:	0008      	movs	r0, r1
    4d3a:	0011      	movs	r1, r2
    4d3c:	1dfb      	adds	r3, r7, #7
    4d3e:	1c22      	adds	r2, r4, #0
    4d40:	701a      	strb	r2, [r3, #0]
    4d42:	1dbb      	adds	r3, r7, #6
    4d44:	1c02      	adds	r2, r0, #0
    4d46:	701a      	strb	r2, [r3, #0]
    4d48:	1d7b      	adds	r3, r7, #5
    4d4a:	1c0a      	adds	r2, r1, #0
    4d4c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    4d4e:	1d7b      	adds	r3, r7, #5
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	2b01      	cmp	r3, #1
    4d54:	d00c      	beq.n	4d70 <_gpio_set_pin_pull_mode+0x40>
    4d56:	2b02      	cmp	r3, #2
    4d58:	d029      	beq.n	4dae <_gpio_set_pin_pull_mode+0x7e>
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d146      	bne.n	4dec <_gpio_set_pin_pull_mode+0xbc>
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4d5e:	1dbb      	adds	r3, r7, #6
    4d60:	781a      	ldrb	r2, [r3, #0]
    4d62:	1dfb      	adds	r3, r7, #7
    4d64:	781b      	ldrb	r3, [r3, #0]
    4d66:	4827      	ldr	r0, [pc, #156]	; (4e04 <_gpio_set_pin_pull_mode+0xd4>)
    4d68:	0019      	movs	r1, r3
    4d6a:	4b27      	ldr	r3, [pc, #156]	; (4e08 <_gpio_set_pin_pull_mode+0xd8>)
    4d6c:	4798      	blx	r3
		break;
    4d6e:	e044      	b.n	4dfa <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    4d70:	1dbb      	adds	r3, r7, #6
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	2201      	movs	r2, #1
    4d76:	409a      	lsls	r2, r3
    4d78:	1dfb      	adds	r3, r7, #7
    4d7a:	7819      	ldrb	r1, [r3, #0]
    4d7c:	23c0      	movs	r3, #192	; 0xc0
    4d7e:	05db      	lsls	r3, r3, #23
    4d80:	0018      	movs	r0, r3
    4d82:	4b22      	ldr	r3, [pc, #136]	; (4e0c <_gpio_set_pin_pull_mode+0xdc>)
    4d84:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4d86:	1dbb      	adds	r3, r7, #6
    4d88:	781a      	ldrb	r2, [r3, #0]
    4d8a:	1dfb      	adds	r3, r7, #7
    4d8c:	781b      	ldrb	r3, [r3, #0]
    4d8e:	481d      	ldr	r0, [pc, #116]	; (4e04 <_gpio_set_pin_pull_mode+0xd4>)
    4d90:	0019      	movs	r1, r3
    4d92:	4b1f      	ldr	r3, [pc, #124]	; (4e10 <_gpio_set_pin_pull_mode+0xe0>)
    4d94:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    4d96:	1dbb      	adds	r3, r7, #6
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	2201      	movs	r2, #1
    4d9c:	409a      	lsls	r2, r3
    4d9e:	1dfb      	adds	r3, r7, #7
    4da0:	7819      	ldrb	r1, [r3, #0]
    4da2:	23c0      	movs	r3, #192	; 0xc0
    4da4:	05db      	lsls	r3, r3, #23
    4da6:	0018      	movs	r0, r3
    4da8:	4b1a      	ldr	r3, [pc, #104]	; (4e14 <_gpio_set_pin_pull_mode+0xe4>)
    4daa:	4798      	blx	r3
		break;
    4dac:	e025      	b.n	4dfa <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    4dae:	1dbb      	adds	r3, r7, #6
    4db0:	781b      	ldrb	r3, [r3, #0]
    4db2:	2201      	movs	r2, #1
    4db4:	409a      	lsls	r2, r3
    4db6:	1dfb      	adds	r3, r7, #7
    4db8:	7819      	ldrb	r1, [r3, #0]
    4dba:	23c0      	movs	r3, #192	; 0xc0
    4dbc:	05db      	lsls	r3, r3, #23
    4dbe:	0018      	movs	r0, r3
    4dc0:	4b12      	ldr	r3, [pc, #72]	; (4e0c <_gpio_set_pin_pull_mode+0xdc>)
    4dc2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4dc4:	1dbb      	adds	r3, r7, #6
    4dc6:	781a      	ldrb	r2, [r3, #0]
    4dc8:	1dfb      	adds	r3, r7, #7
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	480d      	ldr	r0, [pc, #52]	; (4e04 <_gpio_set_pin_pull_mode+0xd4>)
    4dce:	0019      	movs	r1, r3
    4dd0:	4b0f      	ldr	r3, [pc, #60]	; (4e10 <_gpio_set_pin_pull_mode+0xe0>)
    4dd2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    4dd4:	1dbb      	adds	r3, r7, #6
    4dd6:	781b      	ldrb	r3, [r3, #0]
    4dd8:	2201      	movs	r2, #1
    4dda:	409a      	lsls	r2, r3
    4ddc:	1dfb      	adds	r3, r7, #7
    4dde:	7819      	ldrb	r1, [r3, #0]
    4de0:	23c0      	movs	r3, #192	; 0xc0
    4de2:	05db      	lsls	r3, r3, #23
    4de4:	0018      	movs	r0, r3
    4de6:	4b0c      	ldr	r3, [pc, #48]	; (4e18 <_gpio_set_pin_pull_mode+0xe8>)
    4de8:	4798      	blx	r3
		break;
    4dea:	e006      	b.n	4dfa <_gpio_set_pin_pull_mode+0xca>
		ASSERT(false);
    4dec:	4b0b      	ldr	r3, [pc, #44]	; (4e1c <_gpio_set_pin_pull_mode+0xec>)
    4dee:	2291      	movs	r2, #145	; 0x91
    4df0:	0019      	movs	r1, r3
    4df2:	2000      	movs	r0, #0
    4df4:	4b0a      	ldr	r3, [pc, #40]	; (4e20 <_gpio_set_pin_pull_mode+0xf0>)
    4df6:	4798      	blx	r3
		break;
    4df8:	46c0      	nop			; (mov r8, r8)
}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	46bd      	mov	sp, r7
    4dfe:	b003      	add	sp, #12
    4e00:	bd90      	pop	{r4, r7, pc}
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	40002800 	.word	0x40002800
    4e08:	00004a2b 	.word	0x00004a2b
    4e0c:	00004795 	.word	0x00004795
    4e10:	000049d5 	.word	0x000049d5
    4e14:	000047c1 	.word	0x000047c1
    4e18:	000047ed 	.word	0x000047ed
    4e1c:	0001f274 	.word	0x0001f274
    4e20:	00002379 	.word	0x00002379

00004e24 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4e24:	b590      	push	{r4, r7, lr}
    4e26:	b085      	sub	sp, #20
    4e28:	af00      	add	r7, sp, #0
    4e2a:	6078      	str	r0, [r7, #4]
    4e2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	095a      	lsrs	r2, r3, #5
    4e32:	230f      	movs	r3, #15
    4e34:	18fb      	adds	r3, r7, r3
    4e36:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	b2da      	uxtb	r2, r3
    4e3c:	230e      	movs	r3, #14
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	211f      	movs	r1, #31
    4e42:	400a      	ands	r2, r1
    4e44:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4e46:	683b      	ldr	r3, [r7, #0]
    4e48:	3301      	adds	r3, #1
    4e4a:	d10a      	bne.n	4e62 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4e4c:	230e      	movs	r3, #14
    4e4e:	18fb      	adds	r3, r7, r3
    4e50:	781a      	ldrb	r2, [r3, #0]
    4e52:	230f      	movs	r3, #15
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	7819      	ldrb	r1, [r3, #0]
    4e58:	481b      	ldr	r0, [pc, #108]	; (4ec8 <_gpio_set_pin_function+0xa4>)
    4e5a:	2300      	movs	r3, #0
    4e5c:	4c1b      	ldr	r4, [pc, #108]	; (4ecc <_gpio_set_pin_function+0xa8>)
    4e5e:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4e60:	e02e      	b.n	4ec0 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4e62:	230e      	movs	r3, #14
    4e64:	18fb      	adds	r3, r7, r3
    4e66:	781a      	ldrb	r2, [r3, #0]
    4e68:	230f      	movs	r3, #15
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	7819      	ldrb	r1, [r3, #0]
    4e6e:	4816      	ldr	r0, [pc, #88]	; (4ec8 <_gpio_set_pin_function+0xa4>)
    4e70:	2301      	movs	r3, #1
    4e72:	4c16      	ldr	r4, [pc, #88]	; (4ecc <_gpio_set_pin_function+0xa8>)
    4e74:	47a0      	blx	r4
		if (pin & 1) {
    4e76:	230e      	movs	r3, #14
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	781b      	ldrb	r3, [r3, #0]
    4e7c:	2201      	movs	r2, #1
    4e7e:	4013      	ands	r3, r2
    4e80:	d00f      	beq.n	4ea2 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4e82:	230e      	movs	r3, #14
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	781b      	ldrb	r3, [r3, #0]
    4e88:	085b      	lsrs	r3, r3, #1
    4e8a:	b2da      	uxtb	r2, r3
    4e8c:	683b      	ldr	r3, [r7, #0]
    4e8e:	b2d8      	uxtb	r0, r3
    4e90:	230f      	movs	r3, #15
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	7819      	ldrb	r1, [r3, #0]
    4e96:	4c0c      	ldr	r4, [pc, #48]	; (4ec8 <_gpio_set_pin_function+0xa4>)
    4e98:	0003      	movs	r3, r0
    4e9a:	0020      	movs	r0, r4
    4e9c:	4c0c      	ldr	r4, [pc, #48]	; (4ed0 <_gpio_set_pin_function+0xac>)
    4e9e:	47a0      	blx	r4
}
    4ea0:	e00e      	b.n	4ec0 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4ea2:	230e      	movs	r3, #14
    4ea4:	18fb      	adds	r3, r7, r3
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	085b      	lsrs	r3, r3, #1
    4eaa:	b2da      	uxtb	r2, r3
    4eac:	683b      	ldr	r3, [r7, #0]
    4eae:	b2d8      	uxtb	r0, r3
    4eb0:	230f      	movs	r3, #15
    4eb2:	18fb      	adds	r3, r7, r3
    4eb4:	7819      	ldrb	r1, [r3, #0]
    4eb6:	4c04      	ldr	r4, [pc, #16]	; (4ec8 <_gpio_set_pin_function+0xa4>)
    4eb8:	0003      	movs	r3, r0
    4eba:	0020      	movs	r0, r4
    4ebc:	4c05      	ldr	r4, [pc, #20]	; (4ed4 <_gpio_set_pin_function+0xb0>)
    4ebe:	47a0      	blx	r4
}
    4ec0:	46c0      	nop			; (mov r8, r8)
    4ec2:	46bd      	mov	sp, r7
    4ec4:	b005      	add	sp, #20
    4ec6:	bd90      	pop	{r4, r7, pc}
    4ec8:	40002800 	.word	0x40002800
    4ecc:	00004953 	.word	0x00004953
    4ed0:	000048cd 	.word	0x000048cd
    4ed4:	00004845 	.word	0x00004845

00004ed8 <gpio_set_pin_pull_mode>:
{
    4ed8:	b580      	push	{r7, lr}
    4eda:	b082      	sub	sp, #8
    4edc:	af00      	add	r7, sp, #0
    4ede:	0002      	movs	r2, r0
    4ee0:	1dfb      	adds	r3, r7, #7
    4ee2:	701a      	strb	r2, [r3, #0]
    4ee4:	1dbb      	adds	r3, r7, #6
    4ee6:	1c0a      	adds	r2, r1, #0
    4ee8:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4eea:	1dfb      	adds	r3, r7, #7
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	095b      	lsrs	r3, r3, #5
    4ef0:	b2d8      	uxtb	r0, r3
    4ef2:	1dfb      	adds	r3, r7, #7
    4ef4:	781b      	ldrb	r3, [r3, #0]
    4ef6:	221f      	movs	r2, #31
    4ef8:	4013      	ands	r3, r2
    4efa:	b2d9      	uxtb	r1, r3
    4efc:	1dbb      	adds	r3, r7, #6
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	001a      	movs	r2, r3
    4f02:	4b03      	ldr	r3, [pc, #12]	; (4f10 <gpio_set_pin_pull_mode+0x38>)
    4f04:	4798      	blx	r3
}
    4f06:	46c0      	nop			; (mov r8, r8)
    4f08:	46bd      	mov	sp, r7
    4f0a:	b002      	add	sp, #8
    4f0c:	bd80      	pop	{r7, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	00004d31 	.word	0x00004d31

00004f14 <gpio_set_pin_function>:
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b082      	sub	sp, #8
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
    4f1c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4f1e:	683a      	ldr	r2, [r7, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	0011      	movs	r1, r2
    4f24:	0018      	movs	r0, r3
    4f26:	4b03      	ldr	r3, [pc, #12]	; (4f34 <gpio_set_pin_function+0x20>)
    4f28:	4798      	blx	r3
}
    4f2a:	46c0      	nop			; (mov r8, r8)
    4f2c:	46bd      	mov	sp, r7
    4f2e:	b002      	add	sp, #8
    4f30:	bd80      	pop	{r7, pc}
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	00004e25 	.word	0x00004e25

00004f38 <gpio_set_pin_direction>:
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	b082      	sub	sp, #8
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	0002      	movs	r2, r0
    4f40:	1dfb      	adds	r3, r7, #7
    4f42:	701a      	strb	r2, [r3, #0]
    4f44:	1dbb      	adds	r3, r7, #6
    4f46:	1c0a      	adds	r2, r1, #0
    4f48:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4f4a:	1dfb      	adds	r3, r7, #7
    4f4c:	781b      	ldrb	r3, [r3, #0]
    4f4e:	095b      	lsrs	r3, r3, #5
    4f50:	b2d8      	uxtb	r0, r3
    4f52:	1dfb      	adds	r3, r7, #7
    4f54:	781b      	ldrb	r3, [r3, #0]
    4f56:	221f      	movs	r2, #31
    4f58:	4013      	ands	r3, r2
    4f5a:	2201      	movs	r2, #1
    4f5c:	409a      	lsls	r2, r3
    4f5e:	0011      	movs	r1, r2
    4f60:	1dbb      	adds	r3, r7, #6
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	001a      	movs	r2, r3
    4f66:	4b03      	ldr	r3, [pc, #12]	; (4f74 <gpio_set_pin_direction+0x3c>)
    4f68:	4798      	blx	r3
}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	46bd      	mov	sp, r7
    4f6e:	b002      	add	sp, #8
    4f70:	bd80      	pop	{r7, pc}
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	00004bc9 	.word	0x00004bc9

00004f78 <gpio_set_pin_level>:
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b082      	sub	sp, #8
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	0002      	movs	r2, r0
    4f80:	1dfb      	adds	r3, r7, #7
    4f82:	701a      	strb	r2, [r3, #0]
    4f84:	1dbb      	adds	r3, r7, #6
    4f86:	1c0a      	adds	r2, r1, #0
    4f88:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4f8a:	1dfb      	adds	r3, r7, #7
    4f8c:	781b      	ldrb	r3, [r3, #0]
    4f8e:	095b      	lsrs	r3, r3, #5
    4f90:	b2d8      	uxtb	r0, r3
    4f92:	1dfb      	adds	r3, r7, #7
    4f94:	781b      	ldrb	r3, [r3, #0]
    4f96:	221f      	movs	r2, #31
    4f98:	4013      	ands	r3, r2
    4f9a:	2201      	movs	r2, #1
    4f9c:	409a      	lsls	r2, r3
    4f9e:	0011      	movs	r1, r2
    4fa0:	1dbb      	adds	r3, r7, #6
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	001a      	movs	r2, r3
    4fa6:	4b03      	ldr	r3, [pc, #12]	; (4fb4 <gpio_set_pin_level+0x3c>)
    4fa8:	4798      	blx	r3
}
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	46bd      	mov	sp, r7
    4fae:	b002      	add	sp, #8
    4fb0:	bd80      	pop	{r7, pc}
    4fb2:	46c0      	nop			; (mov r8, r8)
    4fb4:	00004ce1 	.word	0x00004ce1

00004fb8 <SpiInit>:
#include "spi-board.h"

struct spi_m_sync_descriptor Spi0;

void SpiInit( Spi_t *obj, SpiId_t spiId, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
    4fb8:	b590      	push	{r4, r7, lr}
    4fba:	b083      	sub	sp, #12
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
    4fc0:	000c      	movs	r4, r1
    4fc2:	0010      	movs	r0, r2
    4fc4:	0019      	movs	r1, r3
    4fc6:	1cfb      	adds	r3, r7, #3
    4fc8:	1c22      	adds	r2, r4, #0
    4fca:	701a      	strb	r2, [r3, #0]
    4fcc:	1cbb      	adds	r3, r7, #2
    4fce:	1c02      	adds	r2, r0, #0
    4fd0:	701a      	strb	r2, [r3, #0]
    4fd2:	1c7b      	adds	r3, r7, #1
    4fd4:	1c0a      	adds	r2, r1, #0
    4fd6:	701a      	strb	r2, [r3, #0]
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    4fd8:	4b40      	ldr	r3, [pc, #256]	; (50dc <SpiInit+0x124>)
    4fda:	2240      	movs	r2, #64	; 0x40
    4fdc:	2118      	movs	r1, #24
    4fde:	0018      	movs	r0, r3
    4fe0:	4b3f      	ldr	r3, [pc, #252]	; (50e0 <SpiInit+0x128>)
    4fe2:	4798      	blx	r3
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    4fe4:	4b3d      	ldr	r3, [pc, #244]	; (50dc <SpiInit+0x124>)
    4fe6:	2240      	movs	r2, #64	; 0x40
    4fe8:	2117      	movs	r1, #23
    4fea:	0018      	movs	r0, r3
    4fec:	4b3c      	ldr	r3, [pc, #240]	; (50e0 <SpiInit+0x128>)
    4fee:	4798      	blx	r3

    hri_mclk_set_APBDMASK_SERCOM5_bit( MCLK );
    4ff0:	4b3c      	ldr	r3, [pc, #240]	; (50e4 <SpiInit+0x12c>)
    4ff2:	0018      	movs	r0, r3
    4ff4:	4b3c      	ldr	r3, [pc, #240]	; (50e8 <SpiInit+0x130>)
    4ff6:	4798      	blx	r3

    spi_m_sync_init( &Spi0, SERCOM5 );
    4ff8:	4a3c      	ldr	r2, [pc, #240]	; (50ec <SpiInit+0x134>)
    4ffa:	4b3d      	ldr	r3, [pc, #244]	; (50f0 <SpiInit+0x138>)
    4ffc:	0011      	movs	r1, r2
    4ffe:	0018      	movs	r0, r3
    5000:	4b3c      	ldr	r3, [pc, #240]	; (50f4 <SpiInit+0x13c>)
    5002:	4798      	blx	r3

    hri_sercomspi_wait_for_sync( SERCOM5, SERCOM_SPI_SYNCBUSY_SWRST );
    5004:	4b39      	ldr	r3, [pc, #228]	; (50ec <SpiInit+0x134>)
    5006:	2101      	movs	r1, #1
    5008:	0018      	movs	r0, r3
    500a:	4b3b      	ldr	r3, [pc, #236]	; (50f8 <SpiInit+0x140>)
    500c:	4798      	blx	r3
    hri_sercomspi_set_CTRLA_SWRST_bit( SERCOM5 );
    500e:	4b37      	ldr	r3, [pc, #220]	; (50ec <SpiInit+0x134>)
    5010:	0018      	movs	r0, r3
    5012:	4b3a      	ldr	r3, [pc, #232]	; (50fc <SpiInit+0x144>)
    5014:	4798      	blx	r3
    hri_sercomspi_wait_for_sync( SERCOM5, SERCOM_SPI_SYNCBUSY_SWRST );
    5016:	4b35      	ldr	r3, [pc, #212]	; (50ec <SpiInit+0x134>)
    5018:	2101      	movs	r1, #1
    501a:	0018      	movs	r0, r3
    501c:	4b36      	ldr	r3, [pc, #216]	; (50f8 <SpiInit+0x140>)
    501e:	4798      	blx	r3
    // 0x0001000C DOPO=1 MODE=3
    hri_sercomspi_write_CTRLA_reg( SERCOM5, SERCOM_SPI_CTRLA_MODE( 3 ) | SERCOM_SPI_CTRLA_DOPO( 1 ) );
    5020:	4a37      	ldr	r2, [pc, #220]	; (5100 <SpiInit+0x148>)
    5022:	4b32      	ldr	r3, [pc, #200]	; (50ec <SpiInit+0x134>)
    5024:	0011      	movs	r1, r2
    5026:	0018      	movs	r0, r3
    5028:	4b36      	ldr	r3, [pc, #216]	; (5104 <SpiInit+0x14c>)
    502a:	4798      	blx	r3
    // 0x00020000 RXEN
    hri_sercomspi_write_CTRLB_reg( SERCOM5, SERCOM_SPI_CTRLB_RXEN );
    502c:	2380      	movs	r3, #128	; 0x80
    502e:	029b      	lsls	r3, r3, #10
    5030:	4a2e      	ldr	r2, [pc, #184]	; (50ec <SpiInit+0x134>)
    5032:	0019      	movs	r1, r3
    5034:	0010      	movs	r0, r2
    5036:	4b34      	ldr	r3, [pc, #208]	; (5108 <SpiInit+0x150>)
    5038:	4798      	blx	r3
    hri_sercomspi_write_BAUD_reg( SERCOM5, ( ( float )CONF_GCLK_SERCOM5_CORE_FREQUENCY / ( float )( 2 * 1000000 ) ) - 1 );
    503a:	4b2c      	ldr	r3, [pc, #176]	; (50ec <SpiInit+0x134>)
    503c:	2107      	movs	r1, #7
    503e:	0018      	movs	r0, r3
    5040:	4b32      	ldr	r3, [pc, #200]	; (510c <SpiInit+0x154>)
    5042:	4798      	blx	r3
    hri_sercomspi_write_DBGCTRL_reg( SERCOM5, 0 );
    5044:	4b29      	ldr	r3, [pc, #164]	; (50ec <SpiInit+0x134>)
    5046:	2100      	movs	r1, #0
    5048:	0018      	movs	r0, r3
    504a:	4b31      	ldr	r3, [pc, #196]	; (5110 <SpiInit+0x158>)
    504c:	4798      	blx	r3

    // Set pin direction to input. MISO
    gpio_set_pin_direction( miso, GPIO_DIRECTION_IN );
    504e:	1c7b      	adds	r3, r7, #1
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	2101      	movs	r1, #1
    5054:	0018      	movs	r0, r3
    5056:	4b2f      	ldr	r3, [pc, #188]	; (5114 <SpiInit+0x15c>)
    5058:	4798      	blx	r3
    gpio_set_pin_pull_mode( miso, GPIO_PULL_OFF );
    505a:	1c7b      	adds	r3, r7, #1
    505c:	781b      	ldrb	r3, [r3, #0]
    505e:	2100      	movs	r1, #0
    5060:	0018      	movs	r0, r3
    5062:	4b2d      	ldr	r3, [pc, #180]	; (5118 <SpiInit+0x160>)
    5064:	4798      	blx	r3
    gpio_set_pin_function( miso, PINMUX_PB16C_SERCOM5_PAD0 );
    5066:	1c7b      	adds	r3, r7, #1
    5068:	781b      	ldrb	r3, [r3, #0]
    506a:	b25b      	sxtb	r3, r3
    506c:	4a2b      	ldr	r2, [pc, #172]	; (511c <SpiInit+0x164>)
    506e:	0011      	movs	r1, r2
    5070:	0018      	movs	r0, r3
    5072:	4b2b      	ldr	r3, [pc, #172]	; (5120 <SpiInit+0x168>)
    5074:	4798      	blx	r3

    // Set pin direction to output. MOSI
    gpio_set_pin_direction( mosi, GPIO_DIRECTION_OUT );
    5076:	1cbb      	adds	r3, r7, #2
    5078:	781b      	ldrb	r3, [r3, #0]
    507a:	2102      	movs	r1, #2
    507c:	0018      	movs	r0, r3
    507e:	4b25      	ldr	r3, [pc, #148]	; (5114 <SpiInit+0x15c>)
    5080:	4798      	blx	r3
    gpio_set_pin_level( mosi, false );
    5082:	1cbb      	adds	r3, r7, #2
    5084:	781b      	ldrb	r3, [r3, #0]
    5086:	2100      	movs	r1, #0
    5088:	0018      	movs	r0, r3
    508a:	4b26      	ldr	r3, [pc, #152]	; (5124 <SpiInit+0x16c>)
    508c:	4798      	blx	r3
    gpio_set_pin_function( mosi, PINMUX_PB22D_SERCOM5_PAD2 );
    508e:	1cbb      	adds	r3, r7, #2
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	b25b      	sxtb	r3, r3
    5094:	4a24      	ldr	r2, [pc, #144]	; (5128 <SpiInit+0x170>)
    5096:	0011      	movs	r1, r2
    5098:	0018      	movs	r0, r3
    509a:	4b21      	ldr	r3, [pc, #132]	; (5120 <SpiInit+0x168>)
    509c:	4798      	blx	r3

    // Set pin direction to output. CLK
    gpio_set_pin_direction( sclk, GPIO_DIRECTION_OUT );
    509e:	2318      	movs	r3, #24
    50a0:	18fb      	adds	r3, r7, r3
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	2102      	movs	r1, #2
    50a6:	0018      	movs	r0, r3
    50a8:	4b1a      	ldr	r3, [pc, #104]	; (5114 <SpiInit+0x15c>)
    50aa:	4798      	blx	r3
    gpio_set_pin_level( sclk,  false );
    50ac:	2318      	movs	r3, #24
    50ae:	18fb      	adds	r3, r7, r3
    50b0:	781b      	ldrb	r3, [r3, #0]
    50b2:	2100      	movs	r1, #0
    50b4:	0018      	movs	r0, r3
    50b6:	4b1b      	ldr	r3, [pc, #108]	; (5124 <SpiInit+0x16c>)
    50b8:	4798      	blx	r3
    gpio_set_pin_function( sclk, PINMUX_PB23D_SERCOM5_PAD3 );
    50ba:	2318      	movs	r3, #24
    50bc:	18fb      	adds	r3, r7, r3
    50be:	781b      	ldrb	r3, [r3, #0]
    50c0:	b25b      	sxtb	r3, r3
    50c2:	4a1a      	ldr	r2, [pc, #104]	; (512c <SpiInit+0x174>)
    50c4:	0011      	movs	r1, r2
    50c6:	0018      	movs	r0, r3
    50c8:	4b15      	ldr	r3, [pc, #84]	; (5120 <SpiInit+0x168>)
    50ca:	4798      	blx	r3

    hri_sercomspi_set_CTRLA_ENABLE_bit( SERCOM5 );
    50cc:	4b07      	ldr	r3, [pc, #28]	; (50ec <SpiInit+0x134>)
    50ce:	0018      	movs	r0, r3
    50d0:	4b17      	ldr	r3, [pc, #92]	; (5130 <SpiInit+0x178>)
    50d2:	4798      	blx	r3
}
    50d4:	46c0      	nop			; (mov r8, r8)
    50d6:	46bd      	mov	sp, r7
    50d8:	b003      	add	sp, #12
    50da:	bd90      	pop	{r4, r7, pc}
    50dc:	40001800 	.word	0x40001800
    50e0:	00004723 	.word	0x00004723
    50e4:	40000400 	.word	0x40000400
    50e8:	0000474d 	.word	0x0000474d
    50ec:	43000400 	.word	0x43000400
    50f0:	20001b5c 	.word	0x20001b5c
    50f4:	00001f71 	.word	0x00001f71
    50f8:	00004a81 	.word	0x00004a81
    50fc:	00004ad5 	.word	0x00004ad5
    5100:	0001000c 	.word	0x0001000c
    5104:	00004b2d 	.word	0x00004b2d
    5108:	00004b45 	.word	0x00004b45
    510c:	00004b5d 	.word	0x00004b5d
    5110:	00004ba7 	.word	0x00004ba7
    5114:	00004f39 	.word	0x00004f39
    5118:	00004ed9 	.word	0x00004ed9
    511c:	00300002 	.word	0x00300002
    5120:	00004f15 	.word	0x00004f15
    5124:	00004f79 	.word	0x00004f79
    5128:	00360003 	.word	0x00360003
    512c:	00370003 	.word	0x00370003
    5130:	00004b01 	.word	0x00004b01

00005134 <SpiInOut>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
    5134:	b580      	push	{r7, lr}
    5136:	b082      	sub	sp, #8
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
    513c:	000a      	movs	r2, r1
    513e:	1cbb      	adds	r3, r7, #2
    5140:	801a      	strh	r2, [r3, #0]
    // Wait for bus idle (ready to write)
    while( ( SERCOM_SPI_INTFLAG_DRE & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	4b1a      	ldr	r3, [pc, #104]	; (51b0 <SpiInOut+0x7c>)
    5146:	0018      	movs	r0, r3
    5148:	4b1a      	ldr	r3, [pc, #104]	; (51b4 <SpiInOut+0x80>)
    514a:	4798      	blx	r3
    514c:	0003      	movs	r3, r0
    514e:	001a      	movs	r2, r3
    5150:	2301      	movs	r3, #1
    5152:	4013      	ands	r3, r2
    5154:	b2db      	uxtb	r3, r3
    5156:	2b00      	cmp	r3, #0
    5158:	d0f4      	beq.n	5144 <SpiInOut+0x10>
    {

    }
    hri_sercomspi_clear_INTFLAG_reg( SERCOM5, SERCOM_SPI_INTFLAG_DRE );
    515a:	4b15      	ldr	r3, [pc, #84]	; (51b0 <SpiInOut+0x7c>)
    515c:	2101      	movs	r1, #1
    515e:	0018      	movs	r0, r3
    5160:	4b15      	ldr	r3, [pc, #84]	; (51b8 <SpiInOut+0x84>)
    5162:	4798      	blx	r3

    // Write byte
    hri_sercomspi_write_DATA_reg( SERCOM5, outData );
    5164:	1cbb      	adds	r3, r7, #2
    5166:	881b      	ldrh	r3, [r3, #0]
    5168:	4a11      	ldr	r2, [pc, #68]	; (51b0 <SpiInOut+0x7c>)
    516a:	0019      	movs	r1, r3
    516c:	0010      	movs	r0, r2
    516e:	4b13      	ldr	r3, [pc, #76]	; (51bc <SpiInOut+0x88>)
    5170:	4798      	blx	r3

    // Wait for ready to read
    while( ( SERCOM_SPI_INTFLAG_RXC & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	4b0e      	ldr	r3, [pc, #56]	; (51b0 <SpiInOut+0x7c>)
    5176:	0018      	movs	r0, r3
    5178:	4b0e      	ldr	r3, [pc, #56]	; (51b4 <SpiInOut+0x80>)
    517a:	4798      	blx	r3
    517c:	0003      	movs	r3, r0
    517e:	001a      	movs	r2, r3
    5180:	2304      	movs	r3, #4
    5182:	4013      	ands	r3, r2
    5184:	b2db      	uxtb	r3, r3
    5186:	2b00      	cmp	r3, #0
    5188:	d0f4      	beq.n	5174 <SpiInOut+0x40>
    {

    }
    hri_sercomspi_clear_INTFLAG_reg( SERCOM5, SERCOM_SPI_INTFLAG_RXC );
    518a:	4b09      	ldr	r3, [pc, #36]	; (51b0 <SpiInOut+0x7c>)
    518c:	2104      	movs	r1, #4
    518e:	0018      	movs	r0, r3
    5190:	4b09      	ldr	r3, [pc, #36]	; (51b8 <SpiInOut+0x84>)
    5192:	4798      	blx	r3

    // Read byte
    outData = ( uint16_t )hri_sercomspi_read_DATA_reg( SERCOM5 );
    5194:	4b06      	ldr	r3, [pc, #24]	; (51b0 <SpiInOut+0x7c>)
    5196:	0018      	movs	r0, r3
    5198:	4b09      	ldr	r3, [pc, #36]	; (51c0 <SpiInOut+0x8c>)
    519a:	4798      	blx	r3
    519c:	0002      	movs	r2, r0
    519e:	1cbb      	adds	r3, r7, #2
    51a0:	801a      	strh	r2, [r3, #0]

    return outData;
    51a2:	1cbb      	adds	r3, r7, #2
    51a4:	881b      	ldrh	r3, [r3, #0]
}
    51a6:	0018      	movs	r0, r3
    51a8:	46bd      	mov	sp, r7
    51aa:	b002      	add	sp, #8
    51ac:	bd80      	pop	{r7, pc}
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	43000400 	.word	0x43000400
    51b4:	00004a9f 	.word	0x00004a9f
    51b8:	00004ab5 	.word	0x00004ab5
    51bc:	00004b8f 	.word	0x00004b8f
    51c0:	00004b7b 	.word	0x00004b7b

000051c4 <hri_port_write_PMUX_PMUXE_bf>:
{
    51c4:	b590      	push	{r4, r7, lr}
    51c6:	b085      	sub	sp, #20
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	000c      	movs	r4, r1
    51ce:	0010      	movs	r0, r2
    51d0:	0019      	movs	r1, r3
    51d2:	1cfb      	adds	r3, r7, #3
    51d4:	1c22      	adds	r2, r4, #0
    51d6:	701a      	strb	r2, [r3, #0]
    51d8:	1cbb      	adds	r3, r7, #2
    51da:	1c02      	adds	r2, r0, #0
    51dc:	701a      	strb	r2, [r3, #0]
    51de:	1c7b      	adds	r3, r7, #1
    51e0:	1c0a      	adds	r2, r1, #0
    51e2:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    51e4:	1cfb      	adds	r3, r7, #3
    51e6:	7819      	ldrb	r1, [r3, #0]
    51e8:	1cbb      	adds	r3, r7, #2
    51ea:	781a      	ldrb	r2, [r3, #0]
    51ec:	230f      	movs	r3, #15
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	6878      	ldr	r0, [r7, #4]
    51f2:	2430      	movs	r4, #48	; 0x30
    51f4:	01c9      	lsls	r1, r1, #7
    51f6:	1841      	adds	r1, r0, r1
    51f8:	188a      	adds	r2, r1, r2
    51fa:	1912      	adds	r2, r2, r4
    51fc:	7812      	ldrb	r2, [r2, #0]
    51fe:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    5200:	230f      	movs	r3, #15
    5202:	18fb      	adds	r3, r7, r3
    5204:	220f      	movs	r2, #15
    5206:	18ba      	adds	r2, r7, r2
    5208:	7812      	ldrb	r2, [r2, #0]
    520a:	210f      	movs	r1, #15
    520c:	438a      	bics	r2, r1
    520e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    5210:	1c7b      	adds	r3, r7, #1
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	220f      	movs	r2, #15
    5216:	4013      	ands	r3, r2
    5218:	b2d9      	uxtb	r1, r3
    521a:	230f      	movs	r3, #15
    521c:	18fb      	adds	r3, r7, r3
    521e:	220f      	movs	r2, #15
    5220:	18ba      	adds	r2, r7, r2
    5222:	7812      	ldrb	r2, [r2, #0]
    5224:	430a      	orrs	r2, r1
    5226:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5228:	1cfb      	adds	r3, r7, #3
    522a:	781a      	ldrb	r2, [r3, #0]
    522c:	1cbb      	adds	r3, r7, #2
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	6879      	ldr	r1, [r7, #4]
    5232:	2030      	movs	r0, #48	; 0x30
    5234:	01d2      	lsls	r2, r2, #7
    5236:	188a      	adds	r2, r1, r2
    5238:	18d3      	adds	r3, r2, r3
    523a:	181b      	adds	r3, r3, r0
    523c:	220f      	movs	r2, #15
    523e:	18ba      	adds	r2, r7, r2
    5240:	7812      	ldrb	r2, [r2, #0]
    5242:	701a      	strb	r2, [r3, #0]
}
    5244:	46c0      	nop			; (mov r8, r8)
    5246:	46bd      	mov	sp, r7
    5248:	b005      	add	sp, #20
    524a:	bd90      	pop	{r4, r7, pc}

0000524c <hri_port_write_PMUX_PMUXO_bf>:
{
    524c:	b590      	push	{r4, r7, lr}
    524e:	b085      	sub	sp, #20
    5250:	af00      	add	r7, sp, #0
    5252:	6078      	str	r0, [r7, #4]
    5254:	000c      	movs	r4, r1
    5256:	0010      	movs	r0, r2
    5258:	0019      	movs	r1, r3
    525a:	1cfb      	adds	r3, r7, #3
    525c:	1c22      	adds	r2, r4, #0
    525e:	701a      	strb	r2, [r3, #0]
    5260:	1cbb      	adds	r3, r7, #2
    5262:	1c02      	adds	r2, r0, #0
    5264:	701a      	strb	r2, [r3, #0]
    5266:	1c7b      	adds	r3, r7, #1
    5268:	1c0a      	adds	r2, r1, #0
    526a:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    526c:	1cfb      	adds	r3, r7, #3
    526e:	7819      	ldrb	r1, [r3, #0]
    5270:	1cbb      	adds	r3, r7, #2
    5272:	781a      	ldrb	r2, [r3, #0]
    5274:	230f      	movs	r3, #15
    5276:	18fb      	adds	r3, r7, r3
    5278:	6878      	ldr	r0, [r7, #4]
    527a:	2430      	movs	r4, #48	; 0x30
    527c:	01c9      	lsls	r1, r1, #7
    527e:	1841      	adds	r1, r0, r1
    5280:	188a      	adds	r2, r1, r2
    5282:	1912      	adds	r2, r2, r4
    5284:	7812      	ldrb	r2, [r2, #0]
    5286:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    5288:	230f      	movs	r3, #15
    528a:	18fb      	adds	r3, r7, r3
    528c:	220f      	movs	r2, #15
    528e:	18ba      	adds	r2, r7, r2
    5290:	7812      	ldrb	r2, [r2, #0]
    5292:	210f      	movs	r1, #15
    5294:	400a      	ands	r2, r1
    5296:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    5298:	1c7b      	adds	r3, r7, #1
    529a:	781b      	ldrb	r3, [r3, #0]
    529c:	011b      	lsls	r3, r3, #4
    529e:	b2d9      	uxtb	r1, r3
    52a0:	230f      	movs	r3, #15
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	220f      	movs	r2, #15
    52a6:	18ba      	adds	r2, r7, r2
    52a8:	7812      	ldrb	r2, [r2, #0]
    52aa:	430a      	orrs	r2, r1
    52ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    52ae:	1cfb      	adds	r3, r7, #3
    52b0:	781a      	ldrb	r2, [r3, #0]
    52b2:	1cbb      	adds	r3, r7, #2
    52b4:	781b      	ldrb	r3, [r3, #0]
    52b6:	6879      	ldr	r1, [r7, #4]
    52b8:	2030      	movs	r0, #48	; 0x30
    52ba:	01d2      	lsls	r2, r2, #7
    52bc:	188a      	adds	r2, r1, r2
    52be:	18d3      	adds	r3, r2, r3
    52c0:	181b      	adds	r3, r3, r0
    52c2:	220f      	movs	r2, #15
    52c4:	18ba      	adds	r2, r7, r2
    52c6:	7812      	ldrb	r2, [r2, #0]
    52c8:	701a      	strb	r2, [r3, #0]
}
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	46bd      	mov	sp, r7
    52ce:	b005      	add	sp, #20
    52d0:	bd90      	pop	{r4, r7, pc}

000052d2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    52d2:	b590      	push	{r4, r7, lr}
    52d4:	b085      	sub	sp, #20
    52d6:	af00      	add	r7, sp, #0
    52d8:	6078      	str	r0, [r7, #4]
    52da:	000c      	movs	r4, r1
    52dc:	0010      	movs	r0, r2
    52de:	0019      	movs	r1, r3
    52e0:	1cfb      	adds	r3, r7, #3
    52e2:	1c22      	adds	r2, r4, #0
    52e4:	701a      	strb	r2, [r3, #0]
    52e6:	1cbb      	adds	r3, r7, #2
    52e8:	1c02      	adds	r2, r0, #0
    52ea:	701a      	strb	r2, [r3, #0]
    52ec:	1c7b      	adds	r3, r7, #1
    52ee:	1c0a      	adds	r2, r1, #0
    52f0:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52f2:	1cfb      	adds	r3, r7, #3
    52f4:	7819      	ldrb	r1, [r3, #0]
    52f6:	1cbb      	adds	r3, r7, #2
    52f8:	781a      	ldrb	r2, [r3, #0]
    52fa:	230f      	movs	r3, #15
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	6878      	ldr	r0, [r7, #4]
    5300:	2440      	movs	r4, #64	; 0x40
    5302:	01c9      	lsls	r1, r1, #7
    5304:	1841      	adds	r1, r0, r1
    5306:	188a      	adds	r2, r1, r2
    5308:	1912      	adds	r2, r2, r4
    530a:	7812      	ldrb	r2, [r2, #0]
    530c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    530e:	230f      	movs	r3, #15
    5310:	18fb      	adds	r3, r7, r3
    5312:	220f      	movs	r2, #15
    5314:	18ba      	adds	r2, r7, r2
    5316:	7812      	ldrb	r2, [r2, #0]
    5318:	2101      	movs	r1, #1
    531a:	438a      	bics	r2, r1
    531c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    531e:	1c7b      	adds	r3, r7, #1
    5320:	7819      	ldrb	r1, [r3, #0]
    5322:	230f      	movs	r3, #15
    5324:	18fb      	adds	r3, r7, r3
    5326:	220f      	movs	r2, #15
    5328:	18ba      	adds	r2, r7, r2
    532a:	7812      	ldrb	r2, [r2, #0]
    532c:	430a      	orrs	r2, r1
    532e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5330:	1cfb      	adds	r3, r7, #3
    5332:	781a      	ldrb	r2, [r3, #0]
    5334:	1cbb      	adds	r3, r7, #2
    5336:	781b      	ldrb	r3, [r3, #0]
    5338:	6879      	ldr	r1, [r7, #4]
    533a:	2040      	movs	r0, #64	; 0x40
    533c:	01d2      	lsls	r2, r2, #7
    533e:	188a      	adds	r2, r1, r2
    5340:	18d3      	adds	r3, r2, r3
    5342:	181b      	adds	r3, r3, r0
    5344:	220f      	movs	r2, #15
    5346:	18ba      	adds	r2, r7, r2
    5348:	7812      	ldrb	r2, [r2, #0]
    534a:	701a      	strb	r2, [r3, #0]
}
    534c:	46c0      	nop			; (mov r8, r8)
    534e:	46bd      	mov	sp, r7
    5350:	b005      	add	sp, #20
    5352:	bd90      	pop	{r4, r7, pc}

00005354 <_gpio_set_pin_function>:
{
    5354:	b590      	push	{r4, r7, lr}
    5356:	b085      	sub	sp, #20
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
    535c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	095a      	lsrs	r2, r3, #5
    5362:	230f      	movs	r3, #15
    5364:	18fb      	adds	r3, r7, r3
    5366:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	b2da      	uxtb	r2, r3
    536c:	230e      	movs	r3, #14
    536e:	18fb      	adds	r3, r7, r3
    5370:	211f      	movs	r1, #31
    5372:	400a      	ands	r2, r1
    5374:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    5376:	683b      	ldr	r3, [r7, #0]
    5378:	3301      	adds	r3, #1
    537a:	d10a      	bne.n	5392 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    537c:	230e      	movs	r3, #14
    537e:	18fb      	adds	r3, r7, r3
    5380:	781a      	ldrb	r2, [r3, #0]
    5382:	230f      	movs	r3, #15
    5384:	18fb      	adds	r3, r7, r3
    5386:	7819      	ldrb	r1, [r3, #0]
    5388:	481b      	ldr	r0, [pc, #108]	; (53f8 <_gpio_set_pin_function+0xa4>)
    538a:	2300      	movs	r3, #0
    538c:	4c1b      	ldr	r4, [pc, #108]	; (53fc <_gpio_set_pin_function+0xa8>)
    538e:	47a0      	blx	r4
}
    5390:	e02e      	b.n	53f0 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    5392:	230e      	movs	r3, #14
    5394:	18fb      	adds	r3, r7, r3
    5396:	781a      	ldrb	r2, [r3, #0]
    5398:	230f      	movs	r3, #15
    539a:	18fb      	adds	r3, r7, r3
    539c:	7819      	ldrb	r1, [r3, #0]
    539e:	4816      	ldr	r0, [pc, #88]	; (53f8 <_gpio_set_pin_function+0xa4>)
    53a0:	2301      	movs	r3, #1
    53a2:	4c16      	ldr	r4, [pc, #88]	; (53fc <_gpio_set_pin_function+0xa8>)
    53a4:	47a0      	blx	r4
		if (pin & 1) {
    53a6:	230e      	movs	r3, #14
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	781b      	ldrb	r3, [r3, #0]
    53ac:	2201      	movs	r2, #1
    53ae:	4013      	ands	r3, r2
    53b0:	d00f      	beq.n	53d2 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    53b2:	230e      	movs	r3, #14
    53b4:	18fb      	adds	r3, r7, r3
    53b6:	781b      	ldrb	r3, [r3, #0]
    53b8:	085b      	lsrs	r3, r3, #1
    53ba:	b2da      	uxtb	r2, r3
    53bc:	683b      	ldr	r3, [r7, #0]
    53be:	b2d8      	uxtb	r0, r3
    53c0:	230f      	movs	r3, #15
    53c2:	18fb      	adds	r3, r7, r3
    53c4:	7819      	ldrb	r1, [r3, #0]
    53c6:	4c0c      	ldr	r4, [pc, #48]	; (53f8 <_gpio_set_pin_function+0xa4>)
    53c8:	0003      	movs	r3, r0
    53ca:	0020      	movs	r0, r4
    53cc:	4c0c      	ldr	r4, [pc, #48]	; (5400 <_gpio_set_pin_function+0xac>)
    53ce:	47a0      	blx	r4
}
    53d0:	e00e      	b.n	53f0 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    53d2:	230e      	movs	r3, #14
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	085b      	lsrs	r3, r3, #1
    53da:	b2da      	uxtb	r2, r3
    53dc:	683b      	ldr	r3, [r7, #0]
    53de:	b2d8      	uxtb	r0, r3
    53e0:	230f      	movs	r3, #15
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	7819      	ldrb	r1, [r3, #0]
    53e6:	4c04      	ldr	r4, [pc, #16]	; (53f8 <_gpio_set_pin_function+0xa4>)
    53e8:	0003      	movs	r3, r0
    53ea:	0020      	movs	r0, r4
    53ec:	4c05      	ldr	r4, [pc, #20]	; (5404 <_gpio_set_pin_function+0xb0>)
    53ee:	47a0      	blx	r4
}
    53f0:	46c0      	nop			; (mov r8, r8)
    53f2:	46bd      	mov	sp, r7
    53f4:	b005      	add	sp, #20
    53f6:	bd90      	pop	{r4, r7, pc}
    53f8:	40002800 	.word	0x40002800
    53fc:	000052d3 	.word	0x000052d3
    5400:	0000524d 	.word	0x0000524d
    5404:	000051c5 	.word	0x000051c5

00005408 <gpio_set_pin_function>:
{
    5408:	b580      	push	{r7, lr}
    540a:	b082      	sub	sp, #8
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
    5410:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    5412:	683a      	ldr	r2, [r7, #0]
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	0011      	movs	r1, r2
    5418:	0018      	movs	r0, r3
    541a:	4b03      	ldr	r3, [pc, #12]	; (5428 <gpio_set_pin_function+0x20>)
    541c:	4798      	blx	r3
}
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	46bd      	mov	sp, r7
    5422:	b002      	add	sp, #8
    5424:	bd80      	pop	{r7, pc}
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	00005355 	.word	0x00005355

0000542c <SX1276IoInit>:
Gpio_t DbgPinTx;
Gpio_t DbgPinRx;
#endif

void SX1276IoInit( void )
{
    542c:	b590      	push	{r4, r7, lr}
    542e:	b083      	sub	sp, #12
    5430:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
    5432:	4838      	ldr	r0, [pc, #224]	; (5514 <SX1276IoInit+0xe8>)
    5434:	2301      	movs	r3, #1
    5436:	9301      	str	r3, [sp, #4]
    5438:	2301      	movs	r3, #1
    543a:	9300      	str	r3, [sp, #0]
    543c:	2300      	movs	r3, #0
    543e:	2201      	movs	r2, #1
    5440:	2111      	movs	r1, #17
    5442:	4c35      	ldr	r4, [pc, #212]	; (5518 <SX1276IoInit+0xec>)
    5444:	47a0      	blx	r4

    ext_irq_init( );
    5446:	4b35      	ldr	r3, [pc, #212]	; (551c <SX1276IoInit+0xf0>)
    5448:	4798      	blx	r3

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    544a:	4835      	ldr	r0, [pc, #212]	; (5520 <SX1276IoInit+0xf4>)
    544c:	2300      	movs	r3, #0
    544e:	9301      	str	r3, [sp, #4]
    5450:	2300      	movs	r3, #0
    5452:	9300      	str	r3, [sp, #0]
    5454:	2300      	movs	r3, #0
    5456:	2200      	movs	r2, #0
    5458:	2114      	movs	r1, #20
    545a:	4c2f      	ldr	r4, [pc, #188]	; (5518 <SX1276IoInit+0xec>)
    545c:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_0, PINMUX_PA20A_EIC_EXTINT4 );
    545e:	23a0      	movs	r3, #160	; 0xa0
    5460:	035b      	lsls	r3, r3, #13
    5462:	0019      	movs	r1, r3
    5464:	2014      	movs	r0, #20
    5466:	4b2f      	ldr	r3, [pc, #188]	; (5524 <SX1276IoInit+0xf8>)
    5468:	4798      	blx	r3
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    546a:	482f      	ldr	r0, [pc, #188]	; (5528 <SX1276IoInit+0xfc>)
    546c:	2300      	movs	r3, #0
    546e:	9301      	str	r3, [sp, #4]
    5470:	2300      	movs	r3, #0
    5472:	9300      	str	r3, [sp, #0]
    5474:	2300      	movs	r3, #0
    5476:	2200      	movs	r2, #0
    5478:	2115      	movs	r1, #21
    547a:	4c27      	ldr	r4, [pc, #156]	; (5518 <SX1276IoInit+0xec>)
    547c:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_1, PINMUX_PA21A_EIC_EXTINT5 );
    547e:	23a8      	movs	r3, #168	; 0xa8
    5480:	035b      	lsls	r3, r3, #13
    5482:	0019      	movs	r1, r3
    5484:	2015      	movs	r0, #21
    5486:	4b27      	ldr	r3, [pc, #156]	; (5524 <SX1276IoInit+0xf8>)
    5488:	4798      	blx	r3
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    548a:	4828      	ldr	r0, [pc, #160]	; (552c <SX1276IoInit+0x100>)
    548c:	2300      	movs	r3, #0
    548e:	9301      	str	r3, [sp, #4]
    5490:	2300      	movs	r3, #0
    5492:	9300      	str	r3, [sp, #0]
    5494:	2300      	movs	r3, #0
    5496:	2200      	movs	r2, #0
    5498:	212c      	movs	r1, #44	; 0x2c
    549a:	4c1f      	ldr	r4, [pc, #124]	; (5518 <SX1276IoInit+0xec>)
    549c:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_2, PINMUX_PB12A_EIC_EXTINT12 );
    549e:	23b0      	movs	r3, #176	; 0xb0
    54a0:	039b      	lsls	r3, r3, #14
    54a2:	0019      	movs	r1, r3
    54a4:	202c      	movs	r0, #44	; 0x2c
    54a6:	4b1f      	ldr	r3, [pc, #124]	; (5524 <SX1276IoInit+0xf8>)
    54a8:	4798      	blx	r3
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    54aa:	4821      	ldr	r0, [pc, #132]	; (5530 <SX1276IoInit+0x104>)
    54ac:	2300      	movs	r3, #0
    54ae:	9301      	str	r3, [sp, #4]
    54b0:	2300      	movs	r3, #0
    54b2:	9300      	str	r3, [sp, #0]
    54b4:	2300      	movs	r3, #0
    54b6:	2200      	movs	r2, #0
    54b8:	212d      	movs	r1, #45	; 0x2d
    54ba:	4c17      	ldr	r4, [pc, #92]	; (5518 <SX1276IoInit+0xec>)
    54bc:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_3, PINMUX_PB13A_EIC_EXTINT13 );
    54be:	23b4      	movs	r3, #180	; 0xb4
    54c0:	039b      	lsls	r3, r3, #14
    54c2:	0019      	movs	r1, r3
    54c4:	202d      	movs	r0, #45	; 0x2d
    54c6:	4b17      	ldr	r3, [pc, #92]	; (5524 <SX1276IoInit+0xf8>)
    54c8:	4798      	blx	r3
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    54ca:	481a      	ldr	r0, [pc, #104]	; (5534 <SX1276IoInit+0x108>)
    54cc:	2300      	movs	r3, #0
    54ce:	9301      	str	r3, [sp, #4]
    54d0:	2300      	movs	r3, #0
    54d2:	9300      	str	r3, [sp, #0]
    54d4:	2300      	movs	r3, #0
    54d6:	2200      	movs	r2, #0
    54d8:	212e      	movs	r1, #46	; 0x2e
    54da:	4c0f      	ldr	r4, [pc, #60]	; (5518 <SX1276IoInit+0xec>)
    54dc:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_4, PINMUX_PB14A_EIC_EXTINT14 );
    54de:	23b8      	movs	r3, #184	; 0xb8
    54e0:	039b      	lsls	r3, r3, #14
    54e2:	0019      	movs	r1, r3
    54e4:	202e      	movs	r0, #46	; 0x2e
    54e6:	4b0f      	ldr	r3, [pc, #60]	; (5524 <SX1276IoInit+0xf8>)
    54e8:	4798      	blx	r3
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    54ea:	4813      	ldr	r0, [pc, #76]	; (5538 <SX1276IoInit+0x10c>)
    54ec:	2300      	movs	r3, #0
    54ee:	9301      	str	r3, [sp, #4]
    54f0:	2300      	movs	r3, #0
    54f2:	9300      	str	r3, [sp, #0]
    54f4:	2300      	movs	r3, #0
    54f6:	2200      	movs	r2, #0
    54f8:	212f      	movs	r1, #47	; 0x2f
    54fa:	4c07      	ldr	r4, [pc, #28]	; (5518 <SX1276IoInit+0xec>)
    54fc:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_5, PINMUX_PB15A_EIC_EXTINT15 );
    54fe:	23bc      	movs	r3, #188	; 0xbc
    5500:	039b      	lsls	r3, r3, #14
    5502:	0019      	movs	r1, r3
    5504:	202f      	movs	r0, #47	; 0x2f
    5506:	4b07      	ldr	r3, [pc, #28]	; (5524 <SX1276IoInit+0xf8>)
    5508:	4798      	blx	r3

#if defined( USE_RADIO_DEBUG )
    GpioInit( &DbgPinTx, RADIO_DBG_PIN_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &DbgPinRx, RADIO_DBG_PIN_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	46bd      	mov	sp, r7
    550e:	b001      	add	sp, #4
    5510:	bd90      	pop	{r4, r7, pc}
    5512:	46c0      	nop			; (mov r8, r8)
    5514:	20001c74 	.word	0x20001c74
    5518:	00016a29 	.word	0x00016a29
    551c:	00001bc9 	.word	0x00001bc9
    5520:	20001c04 	.word	0x20001c04
    5524:	00005409 	.word	0x00005409
    5528:	20001c10 	.word	0x20001c10
    552c:	20001c1c 	.word	0x20001c1c
    5530:	20001c28 	.word	0x20001c28
    5534:	20001c34 	.word	0x20001c34
    5538:	20001c40 	.word	0x20001c40

0000553c <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
    553c:	b580      	push	{r7, lr}
    553e:	b082      	sub	sp, #8
    5540:	af00      	add	r7, sp, #0
    5542:	6078      	str	r0, [r7, #4]
    ext_irq_register( RADIO_DIO_0, irqHandlers[0] );
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	681b      	ldr	r3, [r3, #0]
    5548:	0019      	movs	r1, r3
    554a:	2014      	movs	r0, #20
    554c:	4b14      	ldr	r3, [pc, #80]	; (55a0 <SX1276IoIrqInit+0x64>)
    554e:	4798      	blx	r3
    ext_irq_register( RADIO_DIO_1, irqHandlers[1] );
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	3304      	adds	r3, #4
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	0019      	movs	r1, r3
    5558:	2015      	movs	r0, #21
    555a:	4b11      	ldr	r3, [pc, #68]	; (55a0 <SX1276IoIrqInit+0x64>)
    555c:	4798      	blx	r3
    ext_irq_register( RADIO_DIO_2, irqHandlers[2] );
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	3308      	adds	r3, #8
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	0019      	movs	r1, r3
    5566:	202c      	movs	r0, #44	; 0x2c
    5568:	4b0d      	ldr	r3, [pc, #52]	; (55a0 <SX1276IoIrqInit+0x64>)
    556a:	4798      	blx	r3
    ext_irq_register( RADIO_DIO_3, irqHandlers[3] );
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	330c      	adds	r3, #12
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	0019      	movs	r1, r3
    5574:	202d      	movs	r0, #45	; 0x2d
    5576:	4b0a      	ldr	r3, [pc, #40]	; (55a0 <SX1276IoIrqInit+0x64>)
    5578:	4798      	blx	r3
    ext_irq_register( RADIO_DIO_4, irqHandlers[4] );
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	3310      	adds	r3, #16
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	0019      	movs	r1, r3
    5582:	202e      	movs	r0, #46	; 0x2e
    5584:	4b06      	ldr	r3, [pc, #24]	; (55a0 <SX1276IoIrqInit+0x64>)
    5586:	4798      	blx	r3
    ext_irq_register( RADIO_DIO_5, irqHandlers[5] );
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	3314      	adds	r3, #20
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	0019      	movs	r1, r3
    5590:	202f      	movs	r0, #47	; 0x2f
    5592:	4b03      	ldr	r3, [pc, #12]	; (55a0 <SX1276IoIrqInit+0x64>)
    5594:	4798      	blx	r3
}
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	46bd      	mov	sp, r7
    559a:	b002      	add	sp, #8
    559c:	bd80      	pop	{r7, pc}
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	00001c25 	.word	0x00001c25

000055a4 <SX1276SetBoardTcxo>:
 * \brief Enables/disables the TCXO if available on board design.
 *
 * \param [IN] state TCXO enabled when true and disabled when false.
 */
static void SX1276SetBoardTcxo( uint8_t state )
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b082      	sub	sp, #8
    55a8:	af00      	add	r7, sp, #0
    55aa:	0002      	movs	r2, r0
    55ac:	1dfb      	adds	r3, r7, #7
    55ae:	701a      	strb	r2, [r3, #0]
    else
    {
        TCXO_OFF( );
    }
#endif
}
    55b0:	46c0      	nop			; (mov r8, r8)
    55b2:	46bd      	mov	sp, r7
    55b4:	b002      	add	sp, #8
    55b6:	bd80      	pop	{r7, pc}

000055b8 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
    55b8:	b580      	push	{r7, lr}
    55ba:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
    55bc:	2300      	movs	r3, #0
}
    55be:	0018      	movs	r0, r3
    55c0:	46bd      	mov	sp, r7
    55c2:	bd80      	pop	{r7, pc}

000055c4 <SX1276Reset>:

void SX1276Reset( void )
{
    55c4:	b590      	push	{r4, r7, lr}
    55c6:	b083      	sub	sp, #12
    55c8:	af02      	add	r7, sp, #8
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
    55ca:	2001      	movs	r0, #1
    55cc:	4b0f      	ldr	r3, [pc, #60]	; (560c <SX1276Reset+0x48>)
    55ce:	4798      	blx	r3

    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    55d0:	480f      	ldr	r0, [pc, #60]	; (5610 <SX1276Reset+0x4c>)
    55d2:	2300      	movs	r3, #0
    55d4:	9301      	str	r3, [sp, #4]
    55d6:	2300      	movs	r3, #0
    55d8:	9300      	str	r3, [sp, #0]
    55da:	2300      	movs	r3, #0
    55dc:	2201      	movs	r2, #1
    55de:	210a      	movs	r1, #10
    55e0:	4c0c      	ldr	r4, [pc, #48]	; (5614 <SX1276Reset+0x50>)
    55e2:	47a0      	blx	r4

    // Wait 1 ms
    DelayMs( 1 );
    55e4:	2001      	movs	r0, #1
    55e6:	4b0c      	ldr	r3, [pc, #48]	; (5618 <SX1276Reset+0x54>)
    55e8:	4798      	blx	r3

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    55ea:	4809      	ldr	r0, [pc, #36]	; (5610 <SX1276Reset+0x4c>)
    55ec:	2301      	movs	r3, #1
    55ee:	9301      	str	r3, [sp, #4]
    55f0:	2300      	movs	r3, #0
    55f2:	9300      	str	r3, [sp, #0]
    55f4:	2300      	movs	r3, #0
    55f6:	2200      	movs	r2, #0
    55f8:	210a      	movs	r1, #10
    55fa:	4c06      	ldr	r4, [pc, #24]	; (5614 <SX1276Reset+0x50>)
    55fc:	47a0      	blx	r4

    // Wait 6 ms
    DelayMs( 6 );
    55fe:	2006      	movs	r0, #6
    5600:	4b05      	ldr	r3, [pc, #20]	; (5618 <SX1276Reset+0x54>)
    5602:	4798      	blx	r3
}
    5604:	46c0      	nop			; (mov r8, r8)
    5606:	46bd      	mov	sp, r7
    5608:	b001      	add	sp, #4
    560a:	bd90      	pop	{r4, r7, pc}
    560c:	000055a5 	.word	0x000055a5
    5610:	20001bf8 	.word	0x20001bf8
    5614:	00016a29 	.word	0x00016a29
    5618:	00016a0d 	.word	0x00016a0d

0000561c <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
    561c:	b590      	push	{r4, r7, lr}
    561e:	b085      	sub	sp, #20
    5620:	af00      	add	r7, sp, #0
    5622:	0002      	movs	r2, r0
    5624:	1dfb      	adds	r3, r7, #7
    5626:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
    5628:	230f      	movs	r3, #15
    562a:	18fb      	adds	r3, r7, r3
    562c:	2200      	movs	r2, #0
    562e:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
    5630:	230e      	movs	r3, #14
    5632:	18fb      	adds	r3, r7, r3
    5634:	2200      	movs	r2, #0
    5636:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
    5638:	230f      	movs	r3, #15
    563a:	18fc      	adds	r4, r7, r3
    563c:	2009      	movs	r0, #9
    563e:	4b6d      	ldr	r3, [pc, #436]	; (57f4 <SX1276SetRfTxPower+0x1d8>)
    5640:	4798      	blx	r3
    5642:	0003      	movs	r3, r0
    5644:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
    5646:	230e      	movs	r3, #14
    5648:	18fc      	adds	r4, r7, r3
    564a:	204d      	movs	r0, #77	; 0x4d
    564c:	4b69      	ldr	r3, [pc, #420]	; (57f4 <SX1276SetRfTxPower+0x1d8>)
    564e:	4798      	blx	r3
    5650:	0003      	movs	r3, r0
    5652:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
    5654:	230f      	movs	r3, #15
    5656:	18fb      	adds	r3, r7, r3
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	b25b      	sxtb	r3, r3
    565c:	227f      	movs	r2, #127	; 0x7f
    565e:	4013      	ands	r3, r2
    5660:	b25c      	sxtb	r4, r3
    5662:	4b65      	ldr	r3, [pc, #404]	; (57f8 <SX1276SetRfTxPower+0x1dc>)
    5664:	228c      	movs	r2, #140	; 0x8c
    5666:	589b      	ldr	r3, [r3, r2]
    5668:	0018      	movs	r0, r3
    566a:	4b64      	ldr	r3, [pc, #400]	; (57fc <SX1276SetRfTxPower+0x1e0>)
    566c:	4798      	blx	r3
    566e:	0003      	movs	r3, r0
    5670:	b25b      	sxtb	r3, r3
    5672:	4323      	orrs	r3, r4
    5674:	b25a      	sxtb	r2, r3
    5676:	230f      	movs	r3, #15
    5678:	18fb      	adds	r3, r7, r3
    567a:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
    567c:	230f      	movs	r3, #15
    567e:	18fb      	adds	r3, r7, r3
    5680:	781b      	ldrb	r3, [r3, #0]
    5682:	b25b      	sxtb	r3, r3
    5684:	2b00      	cmp	r3, #0
    5686:	da6b      	bge.n	5760 <SX1276SetRfTxPower+0x144>
    {
        if( power > 17 )
    5688:	1dfb      	adds	r3, r7, #7
    568a:	781b      	ldrb	r3, [r3, #0]
    568c:	b25b      	sxtb	r3, r3
    568e:	2b11      	cmp	r3, #17
    5690:	dd08      	ble.n	56a4 <SX1276SetRfTxPower+0x88>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
    5692:	230e      	movs	r3, #14
    5694:	18fb      	adds	r3, r7, r3
    5696:	220e      	movs	r2, #14
    5698:	18ba      	adds	r2, r7, r2
    569a:	7812      	ldrb	r2, [r2, #0]
    569c:	2107      	movs	r1, #7
    569e:	430a      	orrs	r2, r1
    56a0:	701a      	strb	r2, [r3, #0]
    56a2:	e00c      	b.n	56be <SX1276SetRfTxPower+0xa2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
    56a4:	230e      	movs	r3, #14
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	781b      	ldrb	r3, [r3, #0]
    56aa:	b25b      	sxtb	r3, r3
    56ac:	2207      	movs	r2, #7
    56ae:	4393      	bics	r3, r2
    56b0:	b25b      	sxtb	r3, r3
    56b2:	2204      	movs	r2, #4
    56b4:	4313      	orrs	r3, r2
    56b6:	b25a      	sxtb	r2, r3
    56b8:	230e      	movs	r3, #14
    56ba:	18fb      	adds	r3, r7, r3
    56bc:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
    56be:	230e      	movs	r3, #14
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	2207      	movs	r2, #7
    56c6:	4013      	ands	r3, r2
    56c8:	2b07      	cmp	r3, #7
    56ca:	d124      	bne.n	5716 <SX1276SetRfTxPower+0xfa>
        {
            if( power < 5 )
    56cc:	1dfb      	adds	r3, r7, #7
    56ce:	781b      	ldrb	r3, [r3, #0]
    56d0:	b25b      	sxtb	r3, r3
    56d2:	2b04      	cmp	r3, #4
    56d4:	dc02      	bgt.n	56dc <SX1276SetRfTxPower+0xc0>
            {
                power = 5;
    56d6:	1dfb      	adds	r3, r7, #7
    56d8:	2205      	movs	r2, #5
    56da:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
    56dc:	1dfb      	adds	r3, r7, #7
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	b25b      	sxtb	r3, r3
    56e2:	2b14      	cmp	r3, #20
    56e4:	dd02      	ble.n	56ec <SX1276SetRfTxPower+0xd0>
            {
                power = 20;
    56e6:	1dfb      	adds	r3, r7, #7
    56e8:	2214      	movs	r2, #20
    56ea:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
    56ec:	230f      	movs	r3, #15
    56ee:	18fb      	adds	r3, r7, r3
    56f0:	781b      	ldrb	r3, [r3, #0]
    56f2:	b25b      	sxtb	r3, r3
    56f4:	220f      	movs	r2, #15
    56f6:	4393      	bics	r3, r2
    56f8:	b25a      	sxtb	r2, r3
    56fa:	1dfb      	adds	r3, r7, #7
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	3b05      	subs	r3, #5
    5700:	b2db      	uxtb	r3, r3
    5702:	b25b      	sxtb	r3, r3
    5704:	210f      	movs	r1, #15
    5706:	400b      	ands	r3, r1
    5708:	b25b      	sxtb	r3, r3
    570a:	4313      	orrs	r3, r2
    570c:	b25a      	sxtb	r2, r3
    570e:	230f      	movs	r3, #15
    5710:	18fb      	adds	r3, r7, r3
    5712:	701a      	strb	r2, [r3, #0]
    5714:	e05c      	b.n	57d0 <SX1276SetRfTxPower+0x1b4>
        }
        else
        {
            if( power < 2 )
    5716:	1dfb      	adds	r3, r7, #7
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	b25b      	sxtb	r3, r3
    571c:	2b01      	cmp	r3, #1
    571e:	dc02      	bgt.n	5726 <SX1276SetRfTxPower+0x10a>
            {
                power = 2;
    5720:	1dfb      	adds	r3, r7, #7
    5722:	2202      	movs	r2, #2
    5724:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
    5726:	1dfb      	adds	r3, r7, #7
    5728:	781b      	ldrb	r3, [r3, #0]
    572a:	b25b      	sxtb	r3, r3
    572c:	2b11      	cmp	r3, #17
    572e:	dd02      	ble.n	5736 <SX1276SetRfTxPower+0x11a>
            {
                power = 17;
    5730:	1dfb      	adds	r3, r7, #7
    5732:	2211      	movs	r2, #17
    5734:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
    5736:	230f      	movs	r3, #15
    5738:	18fb      	adds	r3, r7, r3
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	b25b      	sxtb	r3, r3
    573e:	220f      	movs	r2, #15
    5740:	4393      	bics	r3, r2
    5742:	b25a      	sxtb	r2, r3
    5744:	1dfb      	adds	r3, r7, #7
    5746:	781b      	ldrb	r3, [r3, #0]
    5748:	3b02      	subs	r3, #2
    574a:	b2db      	uxtb	r3, r3
    574c:	b25b      	sxtb	r3, r3
    574e:	210f      	movs	r1, #15
    5750:	400b      	ands	r3, r1
    5752:	b25b      	sxtb	r3, r3
    5754:	4313      	orrs	r3, r2
    5756:	b25a      	sxtb	r2, r3
    5758:	230f      	movs	r3, #15
    575a:	18fb      	adds	r3, r7, r3
    575c:	701a      	strb	r2, [r3, #0]
    575e:	e037      	b.n	57d0 <SX1276SetRfTxPower+0x1b4>
        }
    }
    else
    {
        if( power > 0 )
    5760:	1dfb      	adds	r3, r7, #7
    5762:	781b      	ldrb	r3, [r3, #0]
    5764:	b25b      	sxtb	r3, r3
    5766:	2b00      	cmp	r3, #0
    5768:	dd19      	ble.n	579e <SX1276SetRfTxPower+0x182>
        {
            if( power > 15 )
    576a:	1dfb      	adds	r3, r7, #7
    576c:	781b      	ldrb	r3, [r3, #0]
    576e:	b25b      	sxtb	r3, r3
    5770:	2b0f      	cmp	r3, #15
    5772:	dd02      	ble.n	577a <SX1276SetRfTxPower+0x15e>
            {
                power = 15;
    5774:	1dfb      	adds	r3, r7, #7
    5776:	220f      	movs	r2, #15
    5778:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
    577a:	230f      	movs	r3, #15
    577c:	18fb      	adds	r3, r7, r3
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	b25b      	sxtb	r3, r3
    5782:	227f      	movs	r2, #127	; 0x7f
    5784:	4393      	bics	r3, r2
    5786:	b25b      	sxtb	r3, r3
    5788:	2270      	movs	r2, #112	; 0x70
    578a:	4313      	orrs	r3, r2
    578c:	b25a      	sxtb	r2, r3
    578e:	1dfb      	adds	r3, r7, #7
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	4313      	orrs	r3, r2
    5794:	b25a      	sxtb	r2, r3
    5796:	230f      	movs	r3, #15
    5798:	18fb      	adds	r3, r7, r3
    579a:	701a      	strb	r2, [r3, #0]
    579c:	e018      	b.n	57d0 <SX1276SetRfTxPower+0x1b4>
        }
        else
        {
            if( power < -4 )
    579e:	1dfb      	adds	r3, r7, #7
    57a0:	781b      	ldrb	r3, [r3, #0]
    57a2:	b25b      	sxtb	r3, r3
    57a4:	3304      	adds	r3, #4
    57a6:	da02      	bge.n	57ae <SX1276SetRfTxPower+0x192>
            {
                power = -4;
    57a8:	1dfb      	adds	r3, r7, #7
    57aa:	22fc      	movs	r2, #252	; 0xfc
    57ac:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
    57ae:	230f      	movs	r3, #15
    57b0:	18fb      	adds	r3, r7, r3
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b25b      	sxtb	r3, r3
    57b6:	227f      	movs	r2, #127	; 0x7f
    57b8:	4393      	bics	r3, r2
    57ba:	b25a      	sxtb	r2, r3
    57bc:	1dfb      	adds	r3, r7, #7
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	3304      	adds	r3, #4
    57c2:	b2db      	uxtb	r3, r3
    57c4:	b25b      	sxtb	r3, r3
    57c6:	4313      	orrs	r3, r2
    57c8:	b25a      	sxtb	r2, r3
    57ca:	230f      	movs	r3, #15
    57cc:	18fb      	adds	r3, r7, r3
    57ce:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
    57d0:	230f      	movs	r3, #15
    57d2:	18fb      	adds	r3, r7, r3
    57d4:	781b      	ldrb	r3, [r3, #0]
    57d6:	0019      	movs	r1, r3
    57d8:	2009      	movs	r0, #9
    57da:	4b09      	ldr	r3, [pc, #36]	; (5800 <SX1276SetRfTxPower+0x1e4>)
    57dc:	4798      	blx	r3
    SX1276Write( REG_PADAC, paDac );
    57de:	230e      	movs	r3, #14
    57e0:	18fb      	adds	r3, r7, r3
    57e2:	781b      	ldrb	r3, [r3, #0]
    57e4:	0019      	movs	r1, r3
    57e6:	204d      	movs	r0, #77	; 0x4d
    57e8:	4b05      	ldr	r3, [pc, #20]	; (5800 <SX1276SetRfTxPower+0x1e4>)
    57ea:	4798      	blx	r3
}
    57ec:	46c0      	nop			; (mov r8, r8)
    57ee:	46bd      	mov	sp, r7
    57f0:	b005      	add	sp, #20
    57f2:	bd90      	pop	{r4, r7, pc}
    57f4:	00014229 	.word	0x00014229
    57f8:	20001bf8 	.word	0x20001bf8
    57fc:	00005805 	.word	0x00005805
    5800:	000141fd 	.word	0x000141fd

00005804 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
    5804:	b580      	push	{r7, lr}
    5806:	b082      	sub	sp, #8
    5808:	af00      	add	r7, sp, #0
    580a:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
    580c:	2380      	movs	r3, #128	; 0x80
}
    580e:	0018      	movs	r0, r3
    5810:	46bd      	mov	sp, r7
    5812:	b002      	add	sp, #8
    5814:	bd80      	pop	{r7, pc}
	...

00005818 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
    5818:	b580      	push	{r7, lr}
    581a:	b082      	sub	sp, #8
    581c:	af00      	add	r7, sp, #0
    581e:	0002      	movs	r2, r0
    5820:	1dfb      	adds	r3, r7, #7
    5822:	701a      	strb	r2, [r3, #0]
    // No antenna switch available.
    // Just control the TCXO if available.
    if( RadioIsActive != status )
    5824:	4b0d      	ldr	r3, [pc, #52]	; (585c <SX1276SetAntSwLowPower+0x44>)
    5826:	781b      	ldrb	r3, [r3, #0]
    5828:	1dfa      	adds	r2, r7, #7
    582a:	7812      	ldrb	r2, [r2, #0]
    582c:	429a      	cmp	r2, r3
    582e:	d011      	beq.n	5854 <SX1276SetAntSwLowPower+0x3c>
    {
        RadioIsActive = status;
    5830:	4b0a      	ldr	r3, [pc, #40]	; (585c <SX1276SetAntSwLowPower+0x44>)
    5832:	1dfa      	adds	r2, r7, #7
    5834:	7812      	ldrb	r2, [r2, #0]
    5836:	701a      	strb	r2, [r3, #0]

        if( status == false )
    5838:	1dfb      	adds	r3, r7, #7
    583a:	781b      	ldrb	r3, [r3, #0]
    583c:	2201      	movs	r2, #1
    583e:	4053      	eors	r3, r2
    5840:	b2db      	uxtb	r3, r3
    5842:	2b00      	cmp	r3, #0
    5844:	d003      	beq.n	584e <SX1276SetAntSwLowPower+0x36>
        {
            SX1276SetBoardTcxo( true );
    5846:	2001      	movs	r0, #1
    5848:	4b05      	ldr	r3, [pc, #20]	; (5860 <SX1276SetAntSwLowPower+0x48>)
    584a:	4798      	blx	r3
        else
        {
            SX1276SetBoardTcxo( false );
        }
    }
}
    584c:	e002      	b.n	5854 <SX1276SetAntSwLowPower+0x3c>
            SX1276SetBoardTcxo( false );
    584e:	2000      	movs	r0, #0
    5850:	4b03      	ldr	r3, [pc, #12]	; (5860 <SX1276SetAntSwLowPower+0x48>)
    5852:	4798      	blx	r3
}
    5854:	46c0      	nop			; (mov r8, r8)
    5856:	46bd      	mov	sp, r7
    5858:	b002      	add	sp, #8
    585a:	bd80      	pop	{r7, pc}
    585c:	20000c88 	.word	0x20000c88
    5860:	000055a5 	.word	0x000055a5

00005864 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
    5864:	b580      	push	{r7, lr}
    5866:	b082      	sub	sp, #8
    5868:	af00      	add	r7, sp, #0
    586a:	0002      	movs	r2, r0
    586c:	1dfb      	adds	r3, r7, #7
    586e:	701a      	strb	r2, [r3, #0]
    // No antenna switch available
}
    5870:	46c0      	nop			; (mov r8, r8)
    5872:	46bd      	mov	sp, r7
    5874:	b002      	add	sp, #8
    5876:	bd80      	pop	{r7, pc}

00005878 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    5878:	b580      	push	{r7, lr}
    587a:	b082      	sub	sp, #8
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
    5880:	2301      	movs	r3, #1
}
    5882:	0018      	movs	r0, r3
    5884:	46bd      	mov	sp, r7
    5886:	b002      	add	sp, #8
    5888:	bd80      	pop	{r7, pc}

0000588a <hri_gclk_write_PCHCTRL_reg>:
{
    588a:	b580      	push	{r7, lr}
    588c:	b084      	sub	sp, #16
    588e:	af00      	add	r7, sp, #0
    5890:	60f8      	str	r0, [r7, #12]
    5892:	607a      	str	r2, [r7, #4]
    5894:	230b      	movs	r3, #11
    5896:	18fb      	adds	r3, r7, r3
    5898:	1c0a      	adds	r2, r1, #0
    589a:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    589c:	230b      	movs	r3, #11
    589e:	18fb      	adds	r3, r7, r3
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	68fb      	ldr	r3, [r7, #12]
    58a4:	3220      	adds	r2, #32
    58a6:	0092      	lsls	r2, r2, #2
    58a8:	6879      	ldr	r1, [r7, #4]
    58aa:	50d1      	str	r1, [r2, r3]
}
    58ac:	46c0      	nop			; (mov r8, r8)
    58ae:	46bd      	mov	sp, r7
    58b0:	b004      	add	sp, #16
    58b2:	bd80      	pop	{r7, pc}

000058b4 <hri_mclk_set_APBCMASK_SERCOM3_bit>:
{
    58b4:	b580      	push	{r7, lr}
    58b6:	b082      	sub	sp, #8
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	69db      	ldr	r3, [r3, #28]
    58c0:	2208      	movs	r2, #8
    58c2:	431a      	orrs	r2, r3
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	61da      	str	r2, [r3, #28]
}
    58c8:	46c0      	nop			; (mov r8, r8)
    58ca:	46bd      	mov	sp, r7
    58cc:	b002      	add	sp, #8
    58ce:	bd80      	pop	{r7, pc}

000058d0 <hri_port_write_PMUX_PMUXE_bf>:
{
    58d0:	b590      	push	{r4, r7, lr}
    58d2:	b085      	sub	sp, #20
    58d4:	af00      	add	r7, sp, #0
    58d6:	6078      	str	r0, [r7, #4]
    58d8:	000c      	movs	r4, r1
    58da:	0010      	movs	r0, r2
    58dc:	0019      	movs	r1, r3
    58de:	1cfb      	adds	r3, r7, #3
    58e0:	1c22      	adds	r2, r4, #0
    58e2:	701a      	strb	r2, [r3, #0]
    58e4:	1cbb      	adds	r3, r7, #2
    58e6:	1c02      	adds	r2, r0, #0
    58e8:	701a      	strb	r2, [r3, #0]
    58ea:	1c7b      	adds	r3, r7, #1
    58ec:	1c0a      	adds	r2, r1, #0
    58ee:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    58f0:	1cfb      	adds	r3, r7, #3
    58f2:	7819      	ldrb	r1, [r3, #0]
    58f4:	1cbb      	adds	r3, r7, #2
    58f6:	781a      	ldrb	r2, [r3, #0]
    58f8:	230f      	movs	r3, #15
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	6878      	ldr	r0, [r7, #4]
    58fe:	2430      	movs	r4, #48	; 0x30
    5900:	01c9      	lsls	r1, r1, #7
    5902:	1841      	adds	r1, r0, r1
    5904:	188a      	adds	r2, r1, r2
    5906:	1912      	adds	r2, r2, r4
    5908:	7812      	ldrb	r2, [r2, #0]
    590a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    590c:	230f      	movs	r3, #15
    590e:	18fb      	adds	r3, r7, r3
    5910:	220f      	movs	r2, #15
    5912:	18ba      	adds	r2, r7, r2
    5914:	7812      	ldrb	r2, [r2, #0]
    5916:	210f      	movs	r1, #15
    5918:	438a      	bics	r2, r1
    591a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    591c:	1c7b      	adds	r3, r7, #1
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	220f      	movs	r2, #15
    5922:	4013      	ands	r3, r2
    5924:	b2d9      	uxtb	r1, r3
    5926:	230f      	movs	r3, #15
    5928:	18fb      	adds	r3, r7, r3
    592a:	220f      	movs	r2, #15
    592c:	18ba      	adds	r2, r7, r2
    592e:	7812      	ldrb	r2, [r2, #0]
    5930:	430a      	orrs	r2, r1
    5932:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5934:	1cfb      	adds	r3, r7, #3
    5936:	781a      	ldrb	r2, [r3, #0]
    5938:	1cbb      	adds	r3, r7, #2
    593a:	781b      	ldrb	r3, [r3, #0]
    593c:	6879      	ldr	r1, [r7, #4]
    593e:	2030      	movs	r0, #48	; 0x30
    5940:	01d2      	lsls	r2, r2, #7
    5942:	188a      	adds	r2, r1, r2
    5944:	18d3      	adds	r3, r2, r3
    5946:	181b      	adds	r3, r3, r0
    5948:	220f      	movs	r2, #15
    594a:	18ba      	adds	r2, r7, r2
    594c:	7812      	ldrb	r2, [r2, #0]
    594e:	701a      	strb	r2, [r3, #0]
}
    5950:	46c0      	nop			; (mov r8, r8)
    5952:	46bd      	mov	sp, r7
    5954:	b005      	add	sp, #20
    5956:	bd90      	pop	{r4, r7, pc}

00005958 <hri_port_write_PMUX_PMUXO_bf>:
{
    5958:	b590      	push	{r4, r7, lr}
    595a:	b085      	sub	sp, #20
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
    5960:	000c      	movs	r4, r1
    5962:	0010      	movs	r0, r2
    5964:	0019      	movs	r1, r3
    5966:	1cfb      	adds	r3, r7, #3
    5968:	1c22      	adds	r2, r4, #0
    596a:	701a      	strb	r2, [r3, #0]
    596c:	1cbb      	adds	r3, r7, #2
    596e:	1c02      	adds	r2, r0, #0
    5970:	701a      	strb	r2, [r3, #0]
    5972:	1c7b      	adds	r3, r7, #1
    5974:	1c0a      	adds	r2, r1, #0
    5976:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    5978:	1cfb      	adds	r3, r7, #3
    597a:	7819      	ldrb	r1, [r3, #0]
    597c:	1cbb      	adds	r3, r7, #2
    597e:	781a      	ldrb	r2, [r3, #0]
    5980:	230f      	movs	r3, #15
    5982:	18fb      	adds	r3, r7, r3
    5984:	6878      	ldr	r0, [r7, #4]
    5986:	2430      	movs	r4, #48	; 0x30
    5988:	01c9      	lsls	r1, r1, #7
    598a:	1841      	adds	r1, r0, r1
    598c:	188a      	adds	r2, r1, r2
    598e:	1912      	adds	r2, r2, r4
    5990:	7812      	ldrb	r2, [r2, #0]
    5992:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    5994:	230f      	movs	r3, #15
    5996:	18fb      	adds	r3, r7, r3
    5998:	220f      	movs	r2, #15
    599a:	18ba      	adds	r2, r7, r2
    599c:	7812      	ldrb	r2, [r2, #0]
    599e:	210f      	movs	r1, #15
    59a0:	400a      	ands	r2, r1
    59a2:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    59a4:	1c7b      	adds	r3, r7, #1
    59a6:	781b      	ldrb	r3, [r3, #0]
    59a8:	011b      	lsls	r3, r3, #4
    59aa:	b2d9      	uxtb	r1, r3
    59ac:	230f      	movs	r3, #15
    59ae:	18fb      	adds	r3, r7, r3
    59b0:	220f      	movs	r2, #15
    59b2:	18ba      	adds	r2, r7, r2
    59b4:	7812      	ldrb	r2, [r2, #0]
    59b6:	430a      	orrs	r2, r1
    59b8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    59ba:	1cfb      	adds	r3, r7, #3
    59bc:	781a      	ldrb	r2, [r3, #0]
    59be:	1cbb      	adds	r3, r7, #2
    59c0:	781b      	ldrb	r3, [r3, #0]
    59c2:	6879      	ldr	r1, [r7, #4]
    59c4:	2030      	movs	r0, #48	; 0x30
    59c6:	01d2      	lsls	r2, r2, #7
    59c8:	188a      	adds	r2, r1, r2
    59ca:	18d3      	adds	r3, r2, r3
    59cc:	181b      	adds	r3, r3, r0
    59ce:	220f      	movs	r2, #15
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	7812      	ldrb	r2, [r2, #0]
    59d4:	701a      	strb	r2, [r3, #0]
}
    59d6:	46c0      	nop			; (mov r8, r8)
    59d8:	46bd      	mov	sp, r7
    59da:	b005      	add	sp, #20
    59dc:	bd90      	pop	{r4, r7, pc}

000059de <hri_port_write_PINCFG_PMUXEN_bit>:
{
    59de:	b590      	push	{r4, r7, lr}
    59e0:	b085      	sub	sp, #20
    59e2:	af00      	add	r7, sp, #0
    59e4:	6078      	str	r0, [r7, #4]
    59e6:	000c      	movs	r4, r1
    59e8:	0010      	movs	r0, r2
    59ea:	0019      	movs	r1, r3
    59ec:	1cfb      	adds	r3, r7, #3
    59ee:	1c22      	adds	r2, r4, #0
    59f0:	701a      	strb	r2, [r3, #0]
    59f2:	1cbb      	adds	r3, r7, #2
    59f4:	1c02      	adds	r2, r0, #0
    59f6:	701a      	strb	r2, [r3, #0]
    59f8:	1c7b      	adds	r3, r7, #1
    59fa:	1c0a      	adds	r2, r1, #0
    59fc:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    59fe:	1cfb      	adds	r3, r7, #3
    5a00:	7819      	ldrb	r1, [r3, #0]
    5a02:	1cbb      	adds	r3, r7, #2
    5a04:	781a      	ldrb	r2, [r3, #0]
    5a06:	230f      	movs	r3, #15
    5a08:	18fb      	adds	r3, r7, r3
    5a0a:	6878      	ldr	r0, [r7, #4]
    5a0c:	2440      	movs	r4, #64	; 0x40
    5a0e:	01c9      	lsls	r1, r1, #7
    5a10:	1841      	adds	r1, r0, r1
    5a12:	188a      	adds	r2, r1, r2
    5a14:	1912      	adds	r2, r2, r4
    5a16:	7812      	ldrb	r2, [r2, #0]
    5a18:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    5a1a:	230f      	movs	r3, #15
    5a1c:	18fb      	adds	r3, r7, r3
    5a1e:	220f      	movs	r2, #15
    5a20:	18ba      	adds	r2, r7, r2
    5a22:	7812      	ldrb	r2, [r2, #0]
    5a24:	2101      	movs	r1, #1
    5a26:	438a      	bics	r2, r1
    5a28:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    5a2a:	1c7b      	adds	r3, r7, #1
    5a2c:	7819      	ldrb	r1, [r3, #0]
    5a2e:	230f      	movs	r3, #15
    5a30:	18fb      	adds	r3, r7, r3
    5a32:	220f      	movs	r2, #15
    5a34:	18ba      	adds	r2, r7, r2
    5a36:	7812      	ldrb	r2, [r2, #0]
    5a38:	430a      	orrs	r2, r1
    5a3a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5a3c:	1cfb      	adds	r3, r7, #3
    5a3e:	781a      	ldrb	r2, [r3, #0]
    5a40:	1cbb      	adds	r3, r7, #2
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	6879      	ldr	r1, [r7, #4]
    5a46:	2040      	movs	r0, #64	; 0x40
    5a48:	01d2      	lsls	r2, r2, #7
    5a4a:	188a      	adds	r2, r1, r2
    5a4c:	18d3      	adds	r3, r2, r3
    5a4e:	181b      	adds	r3, r3, r0
    5a50:	220f      	movs	r2, #15
    5a52:	18ba      	adds	r2, r7, r2
    5a54:	7812      	ldrb	r2, [r2, #0]
    5a56:	701a      	strb	r2, [r3, #0]
}
    5a58:	46c0      	nop			; (mov r8, r8)
    5a5a:	46bd      	mov	sp, r7
    5a5c:	b005      	add	sp, #20
    5a5e:	bd90      	pop	{r4, r7, pc}

00005a60 <_gpio_set_pin_function>:
{
    5a60:	b590      	push	{r4, r7, lr}
    5a62:	b085      	sub	sp, #20
    5a64:	af00      	add	r7, sp, #0
    5a66:	6078      	str	r0, [r7, #4]
    5a68:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	095a      	lsrs	r2, r3, #5
    5a6e:	230f      	movs	r3, #15
    5a70:	18fb      	adds	r3, r7, r3
    5a72:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	b2da      	uxtb	r2, r3
    5a78:	230e      	movs	r3, #14
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	211f      	movs	r1, #31
    5a7e:	400a      	ands	r2, r1
    5a80:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    5a82:	683b      	ldr	r3, [r7, #0]
    5a84:	3301      	adds	r3, #1
    5a86:	d10a      	bne.n	5a9e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    5a88:	230e      	movs	r3, #14
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	781a      	ldrb	r2, [r3, #0]
    5a8e:	230f      	movs	r3, #15
    5a90:	18fb      	adds	r3, r7, r3
    5a92:	7819      	ldrb	r1, [r3, #0]
    5a94:	481b      	ldr	r0, [pc, #108]	; (5b04 <_gpio_set_pin_function+0xa4>)
    5a96:	2300      	movs	r3, #0
    5a98:	4c1b      	ldr	r4, [pc, #108]	; (5b08 <_gpio_set_pin_function+0xa8>)
    5a9a:	47a0      	blx	r4
}
    5a9c:	e02e      	b.n	5afc <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    5a9e:	230e      	movs	r3, #14
    5aa0:	18fb      	adds	r3, r7, r3
    5aa2:	781a      	ldrb	r2, [r3, #0]
    5aa4:	230f      	movs	r3, #15
    5aa6:	18fb      	adds	r3, r7, r3
    5aa8:	7819      	ldrb	r1, [r3, #0]
    5aaa:	4816      	ldr	r0, [pc, #88]	; (5b04 <_gpio_set_pin_function+0xa4>)
    5aac:	2301      	movs	r3, #1
    5aae:	4c16      	ldr	r4, [pc, #88]	; (5b08 <_gpio_set_pin_function+0xa8>)
    5ab0:	47a0      	blx	r4
		if (pin & 1) {
    5ab2:	230e      	movs	r3, #14
    5ab4:	18fb      	adds	r3, r7, r3
    5ab6:	781b      	ldrb	r3, [r3, #0]
    5ab8:	2201      	movs	r2, #1
    5aba:	4013      	ands	r3, r2
    5abc:	d00f      	beq.n	5ade <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    5abe:	230e      	movs	r3, #14
    5ac0:	18fb      	adds	r3, r7, r3
    5ac2:	781b      	ldrb	r3, [r3, #0]
    5ac4:	085b      	lsrs	r3, r3, #1
    5ac6:	b2da      	uxtb	r2, r3
    5ac8:	683b      	ldr	r3, [r7, #0]
    5aca:	b2d8      	uxtb	r0, r3
    5acc:	230f      	movs	r3, #15
    5ace:	18fb      	adds	r3, r7, r3
    5ad0:	7819      	ldrb	r1, [r3, #0]
    5ad2:	4c0c      	ldr	r4, [pc, #48]	; (5b04 <_gpio_set_pin_function+0xa4>)
    5ad4:	0003      	movs	r3, r0
    5ad6:	0020      	movs	r0, r4
    5ad8:	4c0c      	ldr	r4, [pc, #48]	; (5b0c <_gpio_set_pin_function+0xac>)
    5ada:	47a0      	blx	r4
}
    5adc:	e00e      	b.n	5afc <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    5ade:	230e      	movs	r3, #14
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	085b      	lsrs	r3, r3, #1
    5ae6:	b2da      	uxtb	r2, r3
    5ae8:	683b      	ldr	r3, [r7, #0]
    5aea:	b2d8      	uxtb	r0, r3
    5aec:	230f      	movs	r3, #15
    5aee:	18fb      	adds	r3, r7, r3
    5af0:	7819      	ldrb	r1, [r3, #0]
    5af2:	4c04      	ldr	r4, [pc, #16]	; (5b04 <_gpio_set_pin_function+0xa4>)
    5af4:	0003      	movs	r3, r0
    5af6:	0020      	movs	r0, r4
    5af8:	4c05      	ldr	r4, [pc, #20]	; (5b10 <_gpio_set_pin_function+0xb0>)
    5afa:	47a0      	blx	r4
}
    5afc:	46c0      	nop			; (mov r8, r8)
    5afe:	46bd      	mov	sp, r7
    5b00:	b005      	add	sp, #20
    5b02:	bd90      	pop	{r4, r7, pc}
    5b04:	40002800 	.word	0x40002800
    5b08:	000059df 	.word	0x000059df
    5b0c:	00005959 	.word	0x00005959
    5b10:	000058d1 	.word	0x000058d1

00005b14 <gpio_set_pin_function>:
{
    5b14:	b580      	push	{r7, lr}
    5b16:	b082      	sub	sp, #8
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
    5b1c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    5b1e:	683a      	ldr	r2, [r7, #0]
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	0011      	movs	r1, r2
    5b24:	0018      	movs	r0, r3
    5b26:	4b03      	ldr	r3, [pc, #12]	; (5b34 <gpio_set_pin_function+0x20>)
    5b28:	4798      	blx	r3
}
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	46bd      	mov	sp, r7
    5b2e:	b002      	add	sp, #8
    5b30:	bd80      	pop	{r7, pc}
    5b32:	46c0      	nop			; (mov r8, r8)
    5b34:	00005a61 	.word	0x00005a61

00005b38 <UartMcuInit>:
#include "uart-board.h"

struct usart_sync_descriptor Usart0;

void UartMcuInit( Uart_t *obj, uint8_t uartId, PinNames tx, PinNames rx )
{
    5b38:	b590      	push	{r4, r7, lr}
    5b3a:	b083      	sub	sp, #12
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
    5b40:	000c      	movs	r4, r1
    5b42:	0010      	movs	r0, r2
    5b44:	0019      	movs	r1, r3
    5b46:	1cfb      	adds	r3, r7, #3
    5b48:	1c22      	adds	r2, r4, #0
    5b4a:	701a      	strb	r2, [r3, #0]
    5b4c:	1cbb      	adds	r3, r7, #2
    5b4e:	1c02      	adds	r2, r0, #0
    5b50:	701a      	strb	r2, [r3, #0]
    5b52:	1c7b      	adds	r3, r7, #1
    5b54:	1c0a      	adds	r2, r1, #0
    5b56:	701a      	strb	r2, [r3, #0]
    obj->UartId = uartId;
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	1cfa      	adds	r2, r7, #3
    5b5c:	7812      	ldrb	r2, [r2, #0]
    5b5e:	701a      	strb	r2, [r3, #0]

    // Clock initialization
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    5b60:	4b16      	ldr	r3, [pc, #88]	; (5bbc <UartMcuInit+0x84>)
    5b62:	2240      	movs	r2, #64	; 0x40
    5b64:	2115      	movs	r1, #21
    5b66:	0018      	movs	r0, r3
    5b68:	4b15      	ldr	r3, [pc, #84]	; (5bc0 <UartMcuInit+0x88>)
    5b6a:	4798      	blx	r3
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    5b6c:	4b13      	ldr	r3, [pc, #76]	; (5bbc <UartMcuInit+0x84>)
    5b6e:	2240      	movs	r2, #64	; 0x40
    5b70:	2111      	movs	r1, #17
    5b72:	0018      	movs	r0, r3
    5b74:	4b12      	ldr	r3, [pc, #72]	; (5bc0 <UartMcuInit+0x88>)
    5b76:	4798      	blx	r3
    hri_mclk_set_APBCMASK_SERCOM3_bit( MCLK );
    5b78:	4b12      	ldr	r3, [pc, #72]	; (5bc4 <UartMcuInit+0x8c>)
    5b7a:	0018      	movs	r0, r3
    5b7c:	4b12      	ldr	r3, [pc, #72]	; (5bc8 <UartMcuInit+0x90>)
    5b7e:	4798      	blx	r3

    // USART initialization
    usart_sync_init( &Usart0, SERCOM3, ( void * )NULL );
    5b80:	4912      	ldr	r1, [pc, #72]	; (5bcc <UartMcuInit+0x94>)
    5b82:	4b13      	ldr	r3, [pc, #76]	; (5bd0 <UartMcuInit+0x98>)
    5b84:	2200      	movs	r2, #0
    5b86:	0018      	movs	r0, r3
    5b88:	4b12      	ldr	r3, [pc, #72]	; (5bd4 <UartMcuInit+0x9c>)
    5b8a:	4798      	blx	r3

    // UASRT GPIO initialization
    gpio_set_pin_function( tx, PINMUX_PA22C_SERCOM3_PAD0 );
    5b8c:	1cbb      	adds	r3, r7, #2
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	b25b      	sxtb	r3, r3
    5b92:	4a11      	ldr	r2, [pc, #68]	; (5bd8 <UartMcuInit+0xa0>)
    5b94:	0011      	movs	r1, r2
    5b96:	0018      	movs	r0, r3
    5b98:	4b10      	ldr	r3, [pc, #64]	; (5bdc <UartMcuInit+0xa4>)
    5b9a:	4798      	blx	r3
    gpio_set_pin_function( rx, PINMUX_PA23C_SERCOM3_PAD1 );
    5b9c:	1c7b      	adds	r3, r7, #1
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	b25b      	sxtb	r3, r3
    5ba2:	4a0f      	ldr	r2, [pc, #60]	; (5be0 <UartMcuInit+0xa8>)
    5ba4:	0011      	movs	r1, r2
    5ba6:	0018      	movs	r0, r3
    5ba8:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <UartMcuInit+0xa4>)
    5baa:	4798      	blx	r3

    usart_sync_enable( &Usart0 );
    5bac:	4b08      	ldr	r3, [pc, #32]	; (5bd0 <UartMcuInit+0x98>)
    5bae:	0018      	movs	r0, r3
    5bb0:	4b0c      	ldr	r3, [pc, #48]	; (5be4 <UartMcuInit+0xac>)
    5bb2:	4798      	blx	r3
}
    5bb4:	46c0      	nop			; (mov r8, r8)
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b003      	add	sp, #12
    5bba:	bd90      	pop	{r4, r7, pc}
    5bbc:	40001800 	.word	0x40001800
    5bc0:	0000588b 	.word	0x0000588b
    5bc4:	40000400 	.word	0x40000400
    5bc8:	000058b5 	.word	0x000058b5
    5bcc:	42000c00 	.word	0x42000c00
    5bd0:	20001b70 	.word	0x20001b70
    5bd4:	00002131 	.word	0x00002131
    5bd8:	00160002 	.word	0x00160002
    5bdc:	00005b15 	.word	0x00005b15
    5be0:	00170002 	.word	0x00170002
    5be4:	000021a9 	.word	0x000021a9

00005be8 <UartMcuConfig>:

void UartMcuConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b084      	sub	sp, #16
    5bec:	af00      	add	r7, sp, #0
    5bee:	60f8      	str	r0, [r7, #12]
    5bf0:	0008      	movs	r0, r1
    5bf2:	607a      	str	r2, [r7, #4]
    5bf4:	0019      	movs	r1, r3
    5bf6:	230b      	movs	r3, #11
    5bf8:	18fb      	adds	r3, r7, r3
    5bfa:	1c02      	adds	r2, r0, #0
    5bfc:	701a      	strb	r2, [r3, #0]
    5bfe:	230a      	movs	r3, #10
    5c00:	18fb      	adds	r3, r7, r3
    5c02:	1c0a      	adds	r2, r1, #0
    5c04:	701a      	strb	r2, [r3, #0]
    usart_sync_set_baud_rate( &Usart0, baudrate );
    5c06:	687a      	ldr	r2, [r7, #4]
    5c08:	4b04      	ldr	r3, [pc, #16]	; (5c1c <UartMcuConfig+0x34>)
    5c0a:	0011      	movs	r1, r2
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b04      	ldr	r3, [pc, #16]	; (5c20 <UartMcuConfig+0x38>)
    5c10:	4798      	blx	r3
}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	46bd      	mov	sp, r7
    5c16:	b004      	add	sp, #16
    5c18:	bd80      	pop	{r7, pc}
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	20001b70 	.word	0x20001b70
    5c20:	000021e5 	.word	0x000021e5

00005c24 <UartMcuPutBuffer>:
        return 1; // Busy
    }
}

uint8_t UartMcuPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
    5c24:	b580      	push	{r7, lr}
    5c26:	b084      	sub	sp, #16
    5c28:	af00      	add	r7, sp, #0
    5c2a:	60f8      	str	r0, [r7, #12]
    5c2c:	60b9      	str	r1, [r7, #8]
    5c2e:	1dbb      	adds	r3, r7, #6
    5c30:	801a      	strh	r2, [r3, #0]
    if( io_write( &Usart0.io, buffer, size ) == 0 )
    5c32:	1dbb      	adds	r3, r7, #6
    5c34:	881a      	ldrh	r2, [r3, #0]
    5c36:	68b9      	ldr	r1, [r7, #8]
    5c38:	4b06      	ldr	r3, [pc, #24]	; (5c54 <UartMcuPutBuffer+0x30>)
    5c3a:	0018      	movs	r0, r3
    5c3c:	4b06      	ldr	r3, [pc, #24]	; (5c58 <UartMcuPutBuffer+0x34>)
    5c3e:	4798      	blx	r3
    5c40:	1e03      	subs	r3, r0, #0
    5c42:	d101      	bne.n	5c48 <UartMcuPutBuffer+0x24>
    {
        return 1; //Error
    5c44:	2301      	movs	r3, #1
    5c46:	e000      	b.n	5c4a <UartMcuPutBuffer+0x26>
    }
    return 0; // OK
    5c48:	2300      	movs	r3, #0
}
    5c4a:	0018      	movs	r0, r3
    5c4c:	46bd      	mov	sp, r7
    5c4e:	b004      	add	sp, #16
    5c50:	bd80      	pop	{r7, pc}
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	20001b70 	.word	0x20001b70
    5c58:	00001ec9 	.word	0x00001ec9

00005c5c <UartMcuGetBuffer>:

uint8_t UartMcuGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b084      	sub	sp, #16
    5c60:	af00      	add	r7, sp, #0
    5c62:	60f8      	str	r0, [r7, #12]
    5c64:	60b9      	str	r1, [r7, #8]
    5c66:	603b      	str	r3, [r7, #0]
    5c68:	1dbb      	adds	r3, r7, #6
    5c6a:	801a      	strh	r2, [r3, #0]
    *nbReadBytes = io_read( &Usart0.io, buffer, size );
    5c6c:	1dbb      	adds	r3, r7, #6
    5c6e:	881a      	ldrh	r2, [r3, #0]
    5c70:	68b9      	ldr	r1, [r7, #8]
    5c72:	4b09      	ldr	r3, [pc, #36]	; (5c98 <UartMcuGetBuffer+0x3c>)
    5c74:	0018      	movs	r0, r3
    5c76:	4b09      	ldr	r3, [pc, #36]	; (5c9c <UartMcuGetBuffer+0x40>)
    5c78:	4798      	blx	r3
    5c7a:	0003      	movs	r3, r0
    5c7c:	b29a      	uxth	r2, r3
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	801a      	strh	r2, [r3, #0]
    if( *nbReadBytes == 0 )
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	881b      	ldrh	r3, [r3, #0]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d101      	bne.n	5c8e <UartMcuGetBuffer+0x32>
    {
        return 1; // Empty
    5c8a:	2301      	movs	r3, #1
    5c8c:	e000      	b.n	5c90 <UartMcuGetBuffer+0x34>
    }
    return 0; // OK
    5c8e:	2300      	movs	r3, #0
}
    5c90:	0018      	movs	r0, r3
    5c92:	46bd      	mov	sp, r7
    5c94:	b004      	add	sp, #16
    5c96:	bd80      	pop	{r7, pc}
    5c98:	20001b70 	.word	0x20001b70
    5c9c:	00001f1d 	.word	0x00001f1d

00005ca0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b082      	sub	sp, #8
    5ca4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    5ca6:	4b19      	ldr	r3, [pc, #100]	; (5d0c <Reset_Handler+0x6c>)
    5ca8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    5caa:	4b19      	ldr	r3, [pc, #100]	; (5d10 <Reset_Handler+0x70>)
    5cac:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5cae:	687a      	ldr	r2, [r7, #4]
    5cb0:	683b      	ldr	r3, [r7, #0]
    5cb2:	429a      	cmp	r2, r3
    5cb4:	d00c      	beq.n	5cd0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5cb6:	e007      	b.n	5cc8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5cb8:	683b      	ldr	r3, [r7, #0]
    5cba:	1d1a      	adds	r2, r3, #4
    5cbc:	603a      	str	r2, [r7, #0]
    5cbe:	687a      	ldr	r2, [r7, #4]
    5cc0:	1d11      	adds	r1, r2, #4
    5cc2:	6079      	str	r1, [r7, #4]
    5cc4:	6812      	ldr	r2, [r2, #0]
    5cc6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    5cc8:	683a      	ldr	r2, [r7, #0]
    5cca:	4b12      	ldr	r3, [pc, #72]	; (5d14 <Reset_Handler+0x74>)
    5ccc:	429a      	cmp	r2, r3
    5cce:	d3f3      	bcc.n	5cb8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5cd0:	4b11      	ldr	r3, [pc, #68]	; (5d18 <Reset_Handler+0x78>)
    5cd2:	603b      	str	r3, [r7, #0]
    5cd4:	e004      	b.n	5ce0 <Reset_Handler+0x40>
                *pDest++ = 0;
    5cd6:	683b      	ldr	r3, [r7, #0]
    5cd8:	1d1a      	adds	r2, r3, #4
    5cda:	603a      	str	r2, [r7, #0]
    5cdc:	2200      	movs	r2, #0
    5cde:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    5ce0:	683a      	ldr	r2, [r7, #0]
    5ce2:	4b0e      	ldr	r3, [pc, #56]	; (5d1c <Reset_Handler+0x7c>)
    5ce4:	429a      	cmp	r2, r3
    5ce6:	d3f6      	bcc.n	5cd6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5ce8:	4b0d      	ldr	r3, [pc, #52]	; (5d20 <Reset_Handler+0x80>)
    5cea:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5cec:	4b0d      	ldr	r3, [pc, #52]	; (5d24 <Reset_Handler+0x84>)
    5cee:	687a      	ldr	r2, [r7, #4]
    5cf0:	21ff      	movs	r1, #255	; 0xff
    5cf2:	438a      	bics	r2, r1
    5cf4:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5cf6:	4a0c      	ldr	r2, [pc, #48]	; (5d28 <Reset_Handler+0x88>)
    5cf8:	6853      	ldr	r3, [r2, #4]
    5cfa:	2180      	movs	r1, #128	; 0x80
    5cfc:	430b      	orrs	r3, r1
    5cfe:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5d00:	4b0a      	ldr	r3, [pc, #40]	; (5d2c <Reset_Handler+0x8c>)
    5d02:	4798      	blx	r3

        /* Branch to main function */
        main();
    5d04:	4b0a      	ldr	r3, [pc, #40]	; (5d30 <Reset_Handler+0x90>)
    5d06:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5d08:	e7fe      	b.n	5d08 <Reset_Handler+0x68>
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	00020094 	.word	0x00020094
    5d10:	20000000 	.word	0x20000000
    5d14:	20000ac8 	.word	0x20000ac8
    5d18:	20000ac8 	.word	0x20000ac8
    5d1c:	20001d20 	.word	0x20001d20
    5d20:	00000000 	.word	0x00000000
    5d24:	e000ed00 	.word	0xe000ed00
    5d28:	41004000 	.word	0x41004000
    5d2c:	00019ba1 	.word	0x00019ba1
    5d30:	00000e59 	.word	0x00000e59

00005d34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5d34:	b580      	push	{r7, lr}
    5d36:	af00      	add	r7, sp, #0
        while (1) {
    5d38:	e7fe      	b.n	5d38 <Dummy_Handler+0x4>
	...

00005d3c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
    5d3c:	b5b0      	push	{r4, r5, r7, lr}
    5d3e:	b082      	sub	sp, #8
    5d40:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
    5d42:	4b16      	ldr	r3, [pc, #88]	; (5d9c <OnRadioTxDone+0x60>)
    5d44:	4798      	blx	r3
    5d46:	0002      	movs	r2, r0
    5d48:	4b15      	ldr	r3, [pc, #84]	; (5da0 <OnRadioTxDone+0x64>)
    5d4a:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
    5d4c:	4d15      	ldr	r5, [pc, #84]	; (5da4 <OnRadioTxDone+0x68>)
    5d4e:	23d5      	movs	r3, #213	; 0xd5
    5d50:	009c      	lsls	r4, r3, #2
    5d52:	003b      	movs	r3, r7
    5d54:	0018      	movs	r0, r3
    5d56:	4b14      	ldr	r3, [pc, #80]	; (5da8 <OnRadioTxDone+0x6c>)
    5d58:	4798      	blx	r3
    5d5a:	003a      	movs	r2, r7
    5d5c:	192b      	adds	r3, r5, r4
    5d5e:	ca03      	ldmia	r2!, {r0, r1}
    5d60:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
    5d62:	4b12      	ldr	r3, [pc, #72]	; (5dac <OnRadioTxDone+0x70>)
    5d64:	781a      	ldrb	r2, [r3, #0]
    5d66:	2110      	movs	r1, #16
    5d68:	430a      	orrs	r2, r1
    5d6a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    5d6c:	4a0d      	ldr	r2, [pc, #52]	; (5da4 <OnRadioTxDone+0x68>)
    5d6e:	23d9      	movs	r3, #217	; 0xd9
    5d70:	009b      	lsls	r3, r3, #2
    5d72:	58d3      	ldr	r3, [r2, r3]
    5d74:	2b00      	cmp	r3, #0
    5d76:	d00c      	beq.n	5d92 <OnRadioTxDone+0x56>
    5d78:	4a0a      	ldr	r2, [pc, #40]	; (5da4 <OnRadioTxDone+0x68>)
    5d7a:	23d9      	movs	r3, #217	; 0xd9
    5d7c:	009b      	lsls	r3, r3, #2
    5d7e:	58d3      	ldr	r3, [r2, r3]
    5d80:	68db      	ldr	r3, [r3, #12]
    5d82:	2b00      	cmp	r3, #0
    5d84:	d005      	beq.n	5d92 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    5d86:	4a07      	ldr	r2, [pc, #28]	; (5da4 <OnRadioTxDone+0x68>)
    5d88:	23d9      	movs	r3, #217	; 0xd9
    5d8a:	009b      	lsls	r3, r3, #2
    5d8c:	58d3      	ldr	r3, [r2, r3]
    5d8e:	68db      	ldr	r3, [r3, #12]
    5d90:	4798      	blx	r3
    }
}
    5d92:	46c0      	nop			; (mov r8, r8)
    5d94:	46bd      	mov	sp, r7
    5d96:	b002      	add	sp, #8
    5d98:	bdb0      	pop	{r4, r5, r7, pc}
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	00017171 	.word	0x00017171
    5da0:	20001b7c 	.word	0x20001b7c
    5da4:	20000c8c 	.word	0x20000c8c
    5da8:	00016c8d 	.word	0x00016c8d
    5dac:	20001394 	.word	0x20001394

00005db0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    5db0:	b590      	push	{r4, r7, lr}
    5db2:	b085      	sub	sp, #20
    5db4:	af00      	add	r7, sp, #0
    5db6:	60f8      	str	r0, [r7, #12]
    5db8:	000c      	movs	r4, r1
    5dba:	0010      	movs	r0, r2
    5dbc:	0019      	movs	r1, r3
    5dbe:	230a      	movs	r3, #10
    5dc0:	18fb      	adds	r3, r7, r3
    5dc2:	1c22      	adds	r2, r4, #0
    5dc4:	801a      	strh	r2, [r3, #0]
    5dc6:	2308      	movs	r3, #8
    5dc8:	18fb      	adds	r3, r7, r3
    5dca:	1c02      	adds	r2, r0, #0
    5dcc:	801a      	strh	r2, [r3, #0]
    5dce:	1dfb      	adds	r3, r7, #7
    5dd0:	1c0a      	adds	r2, r1, #0
    5dd2:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
    5dd4:	4b18      	ldr	r3, [pc, #96]	; (5e38 <OnRadioRxDone+0x88>)
    5dd6:	4798      	blx	r3
    5dd8:	0002      	movs	r2, r0
    5dda:	4b18      	ldr	r3, [pc, #96]	; (5e3c <OnRadioRxDone+0x8c>)
    5ddc:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
    5dde:	4b17      	ldr	r3, [pc, #92]	; (5e3c <OnRadioRxDone+0x8c>)
    5de0:	68fa      	ldr	r2, [r7, #12]
    5de2:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
    5de4:	4b15      	ldr	r3, [pc, #84]	; (5e3c <OnRadioRxDone+0x8c>)
    5de6:	220a      	movs	r2, #10
    5de8:	18ba      	adds	r2, r7, r2
    5dea:	8812      	ldrh	r2, [r2, #0]
    5dec:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
    5dee:	4b13      	ldr	r3, [pc, #76]	; (5e3c <OnRadioRxDone+0x8c>)
    5df0:	2208      	movs	r2, #8
    5df2:	18ba      	adds	r2, r7, r2
    5df4:	8812      	ldrh	r2, [r2, #0]
    5df6:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
    5df8:	4b10      	ldr	r3, [pc, #64]	; (5e3c <OnRadioRxDone+0x8c>)
    5dfa:	1dfa      	adds	r2, r7, #7
    5dfc:	7812      	ldrb	r2, [r2, #0]
    5dfe:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
    5e00:	4b0f      	ldr	r3, [pc, #60]	; (5e40 <OnRadioRxDone+0x90>)
    5e02:	781a      	ldrb	r2, [r3, #0]
    5e04:	2108      	movs	r1, #8
    5e06:	430a      	orrs	r2, r1
    5e08:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    5e0a:	4a0e      	ldr	r2, [pc, #56]	; (5e44 <OnRadioRxDone+0x94>)
    5e0c:	23d9      	movs	r3, #217	; 0xd9
    5e0e:	009b      	lsls	r3, r3, #2
    5e10:	58d3      	ldr	r3, [r2, r3]
    5e12:	2b00      	cmp	r3, #0
    5e14:	d00c      	beq.n	5e30 <OnRadioRxDone+0x80>
    5e16:	4a0b      	ldr	r2, [pc, #44]	; (5e44 <OnRadioRxDone+0x94>)
    5e18:	23d9      	movs	r3, #217	; 0xd9
    5e1a:	009b      	lsls	r3, r3, #2
    5e1c:	58d3      	ldr	r3, [r2, r3]
    5e1e:	68db      	ldr	r3, [r3, #12]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d005      	beq.n	5e30 <OnRadioRxDone+0x80>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    5e24:	4a07      	ldr	r2, [pc, #28]	; (5e44 <OnRadioRxDone+0x94>)
    5e26:	23d9      	movs	r3, #217	; 0xd9
    5e28:	009b      	lsls	r3, r3, #2
    5e2a:	58d3      	ldr	r3, [r2, r3]
    5e2c:	68db      	ldr	r3, [r3, #12]
    5e2e:	4798      	blx	r3
    }
}
    5e30:	46c0      	nop			; (mov r8, r8)
    5e32:	46bd      	mov	sp, r7
    5e34:	b005      	add	sp, #20
    5e36:	bd90      	pop	{r4, r7, pc}
    5e38:	00017171 	.word	0x00017171
    5e3c:	20001b80 	.word	0x20001b80
    5e40:	20001394 	.word	0x20001394
    5e44:	20000c8c 	.word	0x20000c8c

00005e48 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
    5e48:	b580      	push	{r7, lr}
    5e4a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
    5e4c:	4b0d      	ldr	r3, [pc, #52]	; (5e84 <OnRadioTxTimeout+0x3c>)
    5e4e:	781a      	ldrb	r2, [r3, #0]
    5e50:	2104      	movs	r1, #4
    5e52:	430a      	orrs	r2, r1
    5e54:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    5e56:	4a0c      	ldr	r2, [pc, #48]	; (5e88 <OnRadioTxTimeout+0x40>)
    5e58:	23d9      	movs	r3, #217	; 0xd9
    5e5a:	009b      	lsls	r3, r3, #2
    5e5c:	58d3      	ldr	r3, [r2, r3]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d00c      	beq.n	5e7c <OnRadioTxTimeout+0x34>
    5e62:	4a09      	ldr	r2, [pc, #36]	; (5e88 <OnRadioTxTimeout+0x40>)
    5e64:	23d9      	movs	r3, #217	; 0xd9
    5e66:	009b      	lsls	r3, r3, #2
    5e68:	58d3      	ldr	r3, [r2, r3]
    5e6a:	68db      	ldr	r3, [r3, #12]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d005      	beq.n	5e7c <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    5e70:	4a05      	ldr	r2, [pc, #20]	; (5e88 <OnRadioTxTimeout+0x40>)
    5e72:	23d9      	movs	r3, #217	; 0xd9
    5e74:	009b      	lsls	r3, r3, #2
    5e76:	58d3      	ldr	r3, [r2, r3]
    5e78:	68db      	ldr	r3, [r3, #12]
    5e7a:	4798      	blx	r3
    }
}
    5e7c:	46c0      	nop			; (mov r8, r8)
    5e7e:	46bd      	mov	sp, r7
    5e80:	bd80      	pop	{r7, pc}
    5e82:	46c0      	nop			; (mov r8, r8)
    5e84:	20001394 	.word	0x20001394
    5e88:	20000c8c 	.word	0x20000c8c

00005e8c <OnRadioRxError>:

static void OnRadioRxError( void )
{
    5e8c:	b580      	push	{r7, lr}
    5e8e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
    5e90:	4b0d      	ldr	r3, [pc, #52]	; (5ec8 <OnRadioRxError+0x3c>)
    5e92:	781a      	ldrb	r2, [r3, #0]
    5e94:	2102      	movs	r1, #2
    5e96:	430a      	orrs	r2, r1
    5e98:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    5e9a:	4a0c      	ldr	r2, [pc, #48]	; (5ecc <OnRadioRxError+0x40>)
    5e9c:	23d9      	movs	r3, #217	; 0xd9
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	58d3      	ldr	r3, [r2, r3]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d00c      	beq.n	5ec0 <OnRadioRxError+0x34>
    5ea6:	4a09      	ldr	r2, [pc, #36]	; (5ecc <OnRadioRxError+0x40>)
    5ea8:	23d9      	movs	r3, #217	; 0xd9
    5eaa:	009b      	lsls	r3, r3, #2
    5eac:	58d3      	ldr	r3, [r2, r3]
    5eae:	68db      	ldr	r3, [r3, #12]
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	d005      	beq.n	5ec0 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    5eb4:	4a05      	ldr	r2, [pc, #20]	; (5ecc <OnRadioRxError+0x40>)
    5eb6:	23d9      	movs	r3, #217	; 0xd9
    5eb8:	009b      	lsls	r3, r3, #2
    5eba:	58d3      	ldr	r3, [r2, r3]
    5ebc:	68db      	ldr	r3, [r3, #12]
    5ebe:	4798      	blx	r3
    }
}
    5ec0:	46c0      	nop			; (mov r8, r8)
    5ec2:	46bd      	mov	sp, r7
    5ec4:	bd80      	pop	{r7, pc}
    5ec6:	46c0      	nop			; (mov r8, r8)
    5ec8:	20001394 	.word	0x20001394
    5ecc:	20000c8c 	.word	0x20000c8c

00005ed0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    5ed0:	b580      	push	{r7, lr}
    5ed2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
    5ed4:	4b0d      	ldr	r3, [pc, #52]	; (5f0c <OnRadioRxTimeout+0x3c>)
    5ed6:	781a      	ldrb	r2, [r3, #0]
    5ed8:	2101      	movs	r1, #1
    5eda:	430a      	orrs	r2, r1
    5edc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    5ede:	4a0c      	ldr	r2, [pc, #48]	; (5f10 <OnRadioRxTimeout+0x40>)
    5ee0:	23d9      	movs	r3, #217	; 0xd9
    5ee2:	009b      	lsls	r3, r3, #2
    5ee4:	58d3      	ldr	r3, [r2, r3]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d00c      	beq.n	5f04 <OnRadioRxTimeout+0x34>
    5eea:	4a09      	ldr	r2, [pc, #36]	; (5f10 <OnRadioRxTimeout+0x40>)
    5eec:	23d9      	movs	r3, #217	; 0xd9
    5eee:	009b      	lsls	r3, r3, #2
    5ef0:	58d3      	ldr	r3, [r2, r3]
    5ef2:	68db      	ldr	r3, [r3, #12]
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d005      	beq.n	5f04 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    5ef8:	4a05      	ldr	r2, [pc, #20]	; (5f10 <OnRadioRxTimeout+0x40>)
    5efa:	23d9      	movs	r3, #217	; 0xd9
    5efc:	009b      	lsls	r3, r3, #2
    5efe:	58d3      	ldr	r3, [r2, r3]
    5f00:	68db      	ldr	r3, [r3, #12]
    5f02:	4798      	blx	r3
    }
}
    5f04:	46c0      	nop			; (mov r8, r8)
    5f06:	46bd      	mov	sp, r7
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	20001394 	.word	0x20001394
    5f10:	20000c8c 	.word	0x20000c8c

00005f14 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b084      	sub	sp, #16
    5f18:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5f1a:	4b6a      	ldr	r3, [pc, #424]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f1c:	4a6a      	ldr	r2, [pc, #424]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    5f1e:	589b      	ldr	r3, [r3, r2]
    5f20:	22c8      	movs	r2, #200	; 0xc8
    5f22:	5c9b      	ldrb	r3, [r3, r2]
    5f24:	2b02      	cmp	r3, #2
    5f26:	d003      	beq.n	5f30 <ProcessRadioTxDone+0x1c>
    {
        Radio.Sleep( );
    5f28:	4b68      	ldr	r3, [pc, #416]	; (60cc <ProcessRadioTxDone+0x1b8>)
    5f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5f2c:	4798      	blx	r3
    5f2e:	e001      	b.n	5f34 <ProcessRadioTxDone+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
    5f30:	4b67      	ldr	r3, [pc, #412]	; (60d0 <ProcessRadioTxDone+0x1bc>)
    5f32:	4798      	blx	r3
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
    5f34:	4a63      	ldr	r2, [pc, #396]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f36:	23f0      	movs	r3, #240	; 0xf0
    5f38:	009b      	lsls	r3, r3, #2
    5f3a:	58d2      	ldr	r2, [r2, r3]
    5f3c:	4b65      	ldr	r3, [pc, #404]	; (60d4 <ProcessRadioTxDone+0x1c0>)
    5f3e:	0011      	movs	r1, r2
    5f40:	0018      	movs	r0, r3
    5f42:	4b65      	ldr	r3, [pc, #404]	; (60d8 <ProcessRadioTxDone+0x1c4>)
    5f44:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    5f46:	4b63      	ldr	r3, [pc, #396]	; (60d4 <ProcessRadioTxDone+0x1c0>)
    5f48:	0018      	movs	r0, r3
    5f4a:	4b64      	ldr	r3, [pc, #400]	; (60dc <ProcessRadioTxDone+0x1c8>)
    5f4c:	4798      	blx	r3
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5f4e:	4b5d      	ldr	r3, [pc, #372]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f50:	4a5d      	ldr	r2, [pc, #372]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    5f52:	589b      	ldr	r3, [r3, r2]
    5f54:	22c8      	movs	r2, #200	; 0xc8
    5f56:	5c9b      	ldrb	r3, [r3, r2]
    5f58:	2b02      	cmp	r3, #2
    5f5a:	d00c      	beq.n	5f76 <ProcessRadioTxDone+0x62>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
    5f5c:	4a59      	ldr	r2, [pc, #356]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f5e:	23f1      	movs	r3, #241	; 0xf1
    5f60:	009b      	lsls	r3, r3, #2
    5f62:	58d2      	ldr	r2, [r2, r3]
    5f64:	4b5e      	ldr	r3, [pc, #376]	; (60e0 <ProcessRadioTxDone+0x1cc>)
    5f66:	0011      	movs	r1, r2
    5f68:	0018      	movs	r0, r3
    5f6a:	4b5b      	ldr	r3, [pc, #364]	; (60d8 <ProcessRadioTxDone+0x1c4>)
    5f6c:	4798      	blx	r3
        TimerStart( &MacCtx.RxWindowTimer2 );
    5f6e:	4b5c      	ldr	r3, [pc, #368]	; (60e0 <ProcessRadioTxDone+0x1cc>)
    5f70:	0018      	movs	r0, r3
    5f72:	4b5a      	ldr	r3, [pc, #360]	; (60dc <ProcessRadioTxDone+0x1c8>)
    5f74:	4798      	blx	r3
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
    5f76:	4b53      	ldr	r3, [pc, #332]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f78:	4a53      	ldr	r2, [pc, #332]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    5f7a:	589b      	ldr	r3, [r3, r2]
    5f7c:	22c8      	movs	r2, #200	; 0xc8
    5f7e:	5c9b      	ldrb	r3, [r3, r2]
    5f80:	2b02      	cmp	r3, #2
    5f82:	d006      	beq.n	5f92 <ProcessRadioTxDone+0x7e>
    5f84:	4b4f      	ldr	r3, [pc, #316]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f86:	4a50      	ldr	r2, [pc, #320]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    5f88:	589b      	ldr	r3, [r3, r2]
    5f8a:	4a56      	ldr	r2, [pc, #344]	; (60e4 <ProcessRadioTxDone+0x1d0>)
    5f8c:	5c9b      	ldrb	r3, [r3, r2]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d023      	beq.n	5fda <ProcessRadioTxDone+0xc6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
    5f92:	230c      	movs	r3, #12
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	2215      	movs	r2, #21
    5f98:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5f9a:	4b4a      	ldr	r3, [pc, #296]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5f9c:	4a4a      	ldr	r2, [pc, #296]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    5f9e:	589b      	ldr	r3, [r3, r2]
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	220c      	movs	r2, #12
    5fa4:	18ba      	adds	r2, r7, r2
    5fa6:	0011      	movs	r1, r2
    5fa8:	0018      	movs	r0, r3
    5faa:	4b4f      	ldr	r3, [pc, #316]	; (60e8 <ProcessRadioTxDone+0x1d4>)
    5fac:	4798      	blx	r3
    5fae:	0003      	movs	r3, r0
    5fb0:	001a      	movs	r2, r3
    5fb2:	2308      	movs	r3, #8
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
    5fb8:	4a42      	ldr	r2, [pc, #264]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5fba:	23f1      	movs	r3, #241	; 0xf1
    5fbc:	009b      	lsls	r3, r3, #2
    5fbe:	58d2      	ldr	r2, [r2, r3]
    5fc0:	2308      	movs	r3, #8
    5fc2:	18fb      	adds	r3, r7, r3
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	18d2      	adds	r2, r2, r3
    5fc8:	4b48      	ldr	r3, [pc, #288]	; (60ec <ProcessRadioTxDone+0x1d8>)
    5fca:	0011      	movs	r1, r2
    5fcc:	0018      	movs	r0, r3
    5fce:	4b42      	ldr	r3, [pc, #264]	; (60d8 <ProcessRadioTxDone+0x1c4>)
    5fd0:	4798      	blx	r3
        TimerStart( &MacCtx.AckTimeoutTimer );
    5fd2:	4b46      	ldr	r3, [pc, #280]	; (60ec <ProcessRadioTxDone+0x1d8>)
    5fd4:	0018      	movs	r0, r3
    5fd6:	4b41      	ldr	r3, [pc, #260]	; (60dc <ProcessRadioTxDone+0x1c8>)
    5fd8:	4798      	blx	r3
    }

    // Verify if the last uplink was a join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( MacCtx.MlmeConfirm.MlmeRequest == MLME_JOIN ) )
    5fda:	4b3a      	ldr	r3, [pc, #232]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5fdc:	4a44      	ldr	r2, [pc, #272]	; (60f0 <ProcessRadioTxDone+0x1dc>)
    5fde:	5c9b      	ldrb	r3, [r3, r2]
    5fe0:	2204      	movs	r2, #4
    5fe2:	4013      	ands	r3, r2
    5fe4:	b2db      	uxtb	r3, r3
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d00b      	beq.n	6002 <ProcessRadioTxDone+0xee>
    5fea:	4a36      	ldr	r2, [pc, #216]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5fec:	2387      	movs	r3, #135	; 0x87
    5fee:	00db      	lsls	r3, r3, #3
    5ff0:	5cd3      	ldrb	r3, [r2, r3]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d105      	bne.n	6002 <ProcessRadioTxDone+0xee>
    {
        MacCtx.LastTxIsJoinRequest = true;
    5ff6:	4a33      	ldr	r2, [pc, #204]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    5ff8:	23d2      	movs	r3, #210	; 0xd2
    5ffa:	009b      	lsls	r3, r3, #2
    5ffc:	2101      	movs	r1, #1
    5ffe:	54d1      	strb	r1, [r2, r3]
    6000:	e004      	b.n	600c <ProcessRadioTxDone+0xf8>
    }
    else
    {
        MacCtx.LastTxIsJoinRequest = false;
    6002:	4a30      	ldr	r2, [pc, #192]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6004:	23d2      	movs	r3, #210	; 0xd2
    6006:	009b      	lsls	r3, r3, #2
    6008:	2100      	movs	r1, #0
    600a:	54d1      	strb	r1, [r2, r3]
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    600c:	4b2d      	ldr	r3, [pc, #180]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    600e:	4a2e      	ldr	r2, [pc, #184]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    6010:	589a      	ldr	r2, [r3, r2]
    6012:	4b2c      	ldr	r3, [pc, #176]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6014:	492c      	ldr	r1, [pc, #176]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    6016:	5859      	ldr	r1, [r3, r1]
    6018:	2314      	movs	r3, #20
    601a:	33ff      	adds	r3, #255	; 0xff
    601c:	5cc9      	ldrb	r1, [r1, r3]
    601e:	238a      	movs	r3, #138	; 0x8a
    6020:	005b      	lsls	r3, r3, #1
    6022:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
    6024:	4b27      	ldr	r3, [pc, #156]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6026:	4a28      	ldr	r2, [pc, #160]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    6028:	589a      	ldr	r2, [r3, r2]
    602a:	2314      	movs	r3, #20
    602c:	33ff      	adds	r3, #255	; 0xff
    602e:	5cd2      	ldrb	r2, [r2, r3]
    6030:	003b      	movs	r3, r7
    6032:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    6034:	4b23      	ldr	r3, [pc, #140]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6036:	4a24      	ldr	r2, [pc, #144]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    6038:	589a      	ldr	r2, [r3, r2]
    603a:	2388      	movs	r3, #136	; 0x88
    603c:	009b      	lsls	r3, r3, #2
    603e:	5cd3      	ldrb	r3, [r2, r3]
    6040:	2b00      	cmp	r3, #0
    6042:	d103      	bne.n	604c <ProcessRadioTxDone+0x138>
    {
        txDone.Joined  = false;
    6044:	003b      	movs	r3, r7
    6046:	2200      	movs	r2, #0
    6048:	705a      	strb	r2, [r3, #1]
    604a:	e002      	b.n	6052 <ProcessRadioTxDone+0x13e>
    }
    else
    {
        txDone.Joined  = true;
    604c:	003b      	movs	r3, r7
    604e:	2201      	movs	r2, #1
    6050:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
    6052:	4b28      	ldr	r3, [pc, #160]	; (60f4 <ProcessRadioTxDone+0x1e0>)
    6054:	681a      	ldr	r2, [r3, #0]
    6056:	003b      	movs	r3, r7
    6058:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
    605a:	4b1a      	ldr	r3, [pc, #104]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    605c:	4a1a      	ldr	r2, [pc, #104]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    605e:	589b      	ldr	r3, [r3, r2]
    6060:	781b      	ldrb	r3, [r3, #0]
    6062:	003a      	movs	r2, r7
    6064:	0011      	movs	r1, r2
    6066:	0018      	movs	r0, r3
    6068:	4b23      	ldr	r3, [pc, #140]	; (60f8 <ProcessRadioTxDone+0x1e4>)
    606a:	4798      	blx	r3
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
    606c:	4b21      	ldr	r3, [pc, #132]	; (60f4 <ProcessRadioTxDone+0x1e0>)
    606e:	6819      	ldr	r1, [r3, #0]
    6070:	4a14      	ldr	r2, [pc, #80]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6072:	23d0      	movs	r3, #208	; 0xd0
    6074:	009b      	lsls	r3, r3, #2
    6076:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
    6078:	4b12      	ldr	r3, [pc, #72]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    607a:	4a13      	ldr	r2, [pc, #76]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    607c:	589b      	ldr	r3, [r3, r2]
    607e:	4a19      	ldr	r2, [pc, #100]	; (60e4 <ProcessRadioTxDone+0x1d0>)
    6080:	5c9b      	ldrb	r3, [r3, r2]
    6082:	2201      	movs	r2, #1
    6084:	4053      	eors	r3, r2
    6086:	b2db      	uxtb	r3, r3
    6088:	2b00      	cmp	r3, #0
    608a:	d003      	beq.n	6094 <ProcessRadioTxDone+0x180>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    608c:	4b0d      	ldr	r3, [pc, #52]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    608e:	4a1b      	ldr	r2, [pc, #108]	; (60fc <ProcessRadioTxDone+0x1e8>)
    6090:	2100      	movs	r1, #0
    6092:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.NvmCtx->ChannelsNbTransCounter++;
    6094:	4b0b      	ldr	r3, [pc, #44]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    6096:	4a0c      	ldr	r2, [pc, #48]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    6098:	589b      	ldr	r3, [r3, r2]
    609a:	2288      	movs	r2, #136	; 0x88
    609c:	0052      	lsls	r2, r2, #1
    609e:	5c9a      	ldrb	r2, [r3, r2]
    60a0:	3201      	adds	r2, #1
    60a2:	b2d1      	uxtb	r1, r2
    60a4:	2288      	movs	r2, #136	; 0x88
    60a6:	0052      	lsls	r2, r2, #1
    60a8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    60aa:	4b06      	ldr	r3, [pc, #24]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    60ac:	4a06      	ldr	r2, [pc, #24]	; (60c8 <ProcessRadioTxDone+0x1b4>)
    60ae:	589a      	ldr	r2, [r3, r2]
    60b0:	2388      	movs	r3, #136	; 0x88
    60b2:	005b      	lsls	r3, r3, #1
    60b4:	5cd1      	ldrb	r1, [r2, r3]
    60b6:	4b03      	ldr	r3, [pc, #12]	; (60c4 <ProcessRadioTxDone+0x1b0>)
    60b8:	4a11      	ldr	r2, [pc, #68]	; (6100 <ProcessRadioTxDone+0x1ec>)
    60ba:	5499      	strb	r1, [r3, r2]

}
    60bc:	46c0      	nop			; (mov r8, r8)
    60be:	46bd      	mov	sp, r7
    60c0:	b004      	add	sp, #16
    60c2:	bd80      	pop	{r7, pc}
    60c4:	20000c8c 	.word	0x20000c8c
    60c8:	000004c4 	.word	0x000004c4
    60cc:	0001f2a4 	.word	0x0001f2a4
    60d0:	0000966d 	.word	0x0000966d
    60d4:	20001024 	.word	0x20001024
    60d8:	00017119 	.word	0x00017119
    60dc:	00016d8d 	.word	0x00016d8d
    60e0:	20001038 	.word	0x20001038
    60e4:	00000217 	.word	0x00000217
    60e8:	0000fec1 	.word	0x0000fec1
    60ec:	2000107c 	.word	0x2000107c
    60f0:	00000465 	.word	0x00000465
    60f4:	20001b7c 	.word	0x20001b7c
    60f8:	0000ff15 	.word	0x0000ff15
    60fc:	00000425 	.word	0x00000425
    6100:	00000429 	.word	0x00000429

00006104 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
    6104:	b580      	push	{r7, lr}
    6106:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
    6108:	4a11      	ldr	r2, [pc, #68]	; (6150 <PrepareRxDoneAbort+0x4c>)
    610a:	23d7      	movs	r3, #215	; 0xd7
    610c:	009b      	lsls	r3, r3, #2
    610e:	58d3      	ldr	r3, [r2, r3]
    6110:	2280      	movs	r2, #128	; 0x80
    6112:	431a      	orrs	r2, r3
    6114:	0011      	movs	r1, r2
    6116:	4a0e      	ldr	r2, [pc, #56]	; (6150 <PrepareRxDoneAbort+0x4c>)
    6118:	23d7      	movs	r3, #215	; 0xd7
    611a:	009b      	lsls	r3, r3, #2
    611c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
    611e:	4b0c      	ldr	r3, [pc, #48]	; (6150 <PrepareRxDoneAbort+0x4c>)
    6120:	4a0c      	ldr	r2, [pc, #48]	; (6154 <PrepareRxDoneAbort+0x50>)
    6122:	589b      	ldr	r3, [r3, r2]
    6124:	4a0c      	ldr	r2, [pc, #48]	; (6158 <PrepareRxDoneAbort+0x54>)
    6126:	5c9b      	ldrb	r3, [r3, r2]
    6128:	2b00      	cmp	r3, #0
    612a:	d001      	beq.n	6130 <PrepareRxDoneAbort+0x2c>
    {
        OnAckTimeoutTimerEvent( );
    612c:	4b0b      	ldr	r3, [pc, #44]	; (615c <PrepareRxDoneAbort+0x58>)
    612e:	4798      	blx	r3
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
    6130:	4b07      	ldr	r3, [pc, #28]	; (6150 <PrepareRxDoneAbort+0x4c>)
    6132:	4a0b      	ldr	r2, [pc, #44]	; (6160 <PrepareRxDoneAbort+0x5c>)
    6134:	5c99      	ldrb	r1, [r3, r2]
    6136:	2002      	movs	r0, #2
    6138:	4301      	orrs	r1, r0
    613a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
    613c:	4b04      	ldr	r3, [pc, #16]	; (6150 <PrepareRxDoneAbort+0x4c>)
    613e:	4a08      	ldr	r2, [pc, #32]	; (6160 <PrepareRxDoneAbort+0x5c>)
    6140:	5c99      	ldrb	r1, [r3, r2]
    6142:	2010      	movs	r0, #16
    6144:	4301      	orrs	r1, r0
    6146:	5499      	strb	r1, [r3, r2]
}
    6148:	46c0      	nop			; (mov r8, r8)
    614a:	46bd      	mov	sp, r7
    614c:	bd80      	pop	{r7, pc}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	20000c8c 	.word	0x20000c8c
    6154:	000004c4 	.word	0x000004c4
    6158:	00000217 	.word	0x00000217
    615c:	000076bd 	.word	0x000076bd
    6160:	00000465 	.word	0x00000465

00006164 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
    6164:	b5f0      	push	{r4, r5, r6, r7, lr}
    6166:	b0a7      	sub	sp, #156	; 0x9c
    6168:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
    616a:	2380      	movs	r3, #128	; 0x80
    616c:	18fb      	adds	r3, r7, r3
    616e:	2210      	movs	r2, #16
    6170:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
    6172:	4bcd      	ldr	r3, [pc, #820]	; (64a8 <ProcessRadioRxDone+0x344>)
    6174:	685b      	ldr	r3, [r3, #4]
    6176:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
    6178:	237a      	movs	r3, #122	; 0x7a
    617a:	18fb      	adds	r3, r7, r3
    617c:	4aca      	ldr	r2, [pc, #808]	; (64a8 <ProcessRadioRxDone+0x344>)
    617e:	8912      	ldrh	r2, [r2, #8]
    6180:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
    6182:	2378      	movs	r3, #120	; 0x78
    6184:	18fb      	adds	r3, r7, r3
    6186:	4ac8      	ldr	r2, [pc, #800]	; (64a8 <ProcessRadioRxDone+0x344>)
    6188:	8952      	ldrh	r2, [r2, #10]
    618a:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
    618c:	2377      	movs	r3, #119	; 0x77
    618e:	18fb      	adds	r3, r7, r3
    6190:	4ac5      	ldr	r2, [pc, #788]	; (64a8 <ProcessRadioRxDone+0x344>)
    6192:	7b12      	ldrb	r2, [r2, #12]
    6194:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
    6196:	2376      	movs	r3, #118	; 0x76
    6198:	18fb      	adds	r3, r7, r3
    619a:	2200      	movs	r2, #0
    619c:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
    619e:	2300      	movs	r3, #0
    61a0:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
    61a2:	4bc2      	ldr	r3, [pc, #776]	; (64ac <ProcessRadioRxDone+0x348>)
    61a4:	4ac2      	ldr	r2, [pc, #776]	; (64b0 <ProcessRadioRxDone+0x34c>)
    61a6:	589b      	ldr	r3, [r3, r2]
    61a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    61aa:	2284      	movs	r2, #132	; 0x84
    61ac:	18ba      	adds	r2, r7, r2
    61ae:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
    61b0:	2383      	movs	r3, #131	; 0x83
    61b2:	18fb      	adds	r3, r7, r3
    61b4:	2200      	movs	r2, #0
    61b6:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
    61b8:	2382      	movs	r3, #130	; 0x82
    61ba:	18fb      	adds	r3, r7, r3
    61bc:	2204      	movs	r2, #4
    61be:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;
    uint8_t macCmdPayload[2] = { 0 };
    61c0:	1d3b      	adds	r3, r7, #4
    61c2:	2200      	movs	r2, #0
    61c4:	801a      	strh	r2, [r3, #0]

    MacCtx.McpsConfirm.AckReceived = false;
    61c6:	4ab9      	ldr	r2, [pc, #740]	; (64ac <ProcessRadioRxDone+0x348>)
    61c8:	2385      	movs	r3, #133	; 0x85
    61ca:	00db      	lsls	r3, r3, #3
    61cc:	2100      	movs	r1, #0
    61ce:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
    61d0:	4bb6      	ldr	r3, [pc, #728]	; (64ac <ProcessRadioRxDone+0x348>)
    61d2:	2278      	movs	r2, #120	; 0x78
    61d4:	18ba      	adds	r2, r7, r2
    61d6:	49b7      	ldr	r1, [pc, #732]	; (64b4 <ProcessRadioRxDone+0x350>)
    61d8:	8812      	ldrh	r2, [r2, #0]
    61da:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
    61dc:	2377      	movs	r3, #119	; 0x77
    61de:	18fb      	adds	r3, r7, r3
    61e0:	7819      	ldrb	r1, [r3, #0]
    61e2:	4ab2      	ldr	r2, [pc, #712]	; (64ac <ProcessRadioRxDone+0x348>)
    61e4:	2383      	movs	r3, #131	; 0x83
    61e6:	00db      	lsls	r3, r3, #3
    61e8:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
    61ea:	4bb0      	ldr	r3, [pc, #704]	; (64ac <ProcessRadioRxDone+0x348>)
    61ec:	4ab2      	ldr	r2, [pc, #712]	; (64b8 <ProcessRadioRxDone+0x354>)
    61ee:	5c99      	ldrb	r1, [r3, r2]
    61f0:	4bae      	ldr	r3, [pc, #696]	; (64ac <ProcessRadioRxDone+0x348>)
    61f2:	4ab2      	ldr	r2, [pc, #712]	; (64bc <ProcessRadioRxDone+0x358>)
    61f4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
    61f6:	4bad      	ldr	r3, [pc, #692]	; (64ac <ProcessRadioRxDone+0x348>)
    61f8:	4ab1      	ldr	r2, [pc, #708]	; (64c0 <ProcessRadioRxDone+0x35c>)
    61fa:	2100      	movs	r1, #0
    61fc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
    61fe:	4bab      	ldr	r3, [pc, #684]	; (64ac <ProcessRadioRxDone+0x348>)
    6200:	4ab0      	ldr	r2, [pc, #704]	; (64c4 <ProcessRadioRxDone+0x360>)
    6202:	2100      	movs	r1, #0
    6204:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
    6206:	4ba9      	ldr	r3, [pc, #676]	; (64ac <ProcessRadioRxDone+0x348>)
    6208:	4aaf      	ldr	r2, [pc, #700]	; (64c8 <ProcessRadioRxDone+0x364>)
    620a:	2100      	movs	r1, #0
    620c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
    620e:	4aa7      	ldr	r2, [pc, #668]	; (64ac <ProcessRadioRxDone+0x348>)
    6210:	2382      	movs	r3, #130	; 0x82
    6212:	00db      	lsls	r3, r3, #3
    6214:	2100      	movs	r1, #0
    6216:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
    6218:	4ba4      	ldr	r3, [pc, #656]	; (64ac <ProcessRadioRxDone+0x348>)
    621a:	4aac      	ldr	r2, [pc, #688]	; (64cc <ProcessRadioRxDone+0x368>)
    621c:	2100      	movs	r1, #0
    621e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
    6220:	4ba2      	ldr	r3, [pc, #648]	; (64ac <ProcessRadioRxDone+0x348>)
    6222:	4aab      	ldr	r2, [pc, #684]	; (64d0 <ProcessRadioRxDone+0x36c>)
    6224:	2100      	movs	r1, #0
    6226:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
    6228:	4ba0      	ldr	r3, [pc, #640]	; (64ac <ProcessRadioRxDone+0x348>)
    622a:	4aaa      	ldr	r2, [pc, #680]	; (64d4 <ProcessRadioRxDone+0x370>)
    622c:	2100      	movs	r1, #0
    622e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
    6230:	4b9e      	ldr	r3, [pc, #632]	; (64ac <ProcessRadioRxDone+0x348>)
    6232:	4aa9      	ldr	r2, [pc, #676]	; (64d8 <ProcessRadioRxDone+0x374>)
    6234:	2100      	movs	r1, #0
    6236:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    6238:	4a9c      	ldr	r2, [pc, #624]	; (64ac <ProcessRadioRxDone+0x348>)
    623a:	2381      	movs	r3, #129	; 0x81
    623c:	00db      	lsls	r3, r3, #3
    623e:	2100      	movs	r1, #0
    6240:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
    6242:	4a9a      	ldr	r2, [pc, #616]	; (64ac <ProcessRadioRxDone+0x348>)
    6244:	2384      	movs	r3, #132	; 0x84
    6246:	00db      	lsls	r3, r3, #3
    6248:	2100      	movs	r1, #0
    624a:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
    624c:	4ba3      	ldr	r3, [pc, #652]	; (64dc <ProcessRadioRxDone+0x378>)
    624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6250:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
    6252:	4ba3      	ldr	r3, [pc, #652]	; (64e0 <ProcessRadioRxDone+0x37c>)
    6254:	0018      	movs	r0, r3
    6256:	4ba3      	ldr	r3, [pc, #652]	; (64e4 <ProcessRadioRxDone+0x380>)
    6258:	4798      	blx	r3

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
    625a:	237a      	movs	r3, #122	; 0x7a
    625c:	18fb      	adds	r3, r7, r3
    625e:	881a      	ldrh	r2, [r3, #0]
    6260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6262:	0011      	movs	r1, r2
    6264:	0018      	movs	r0, r3
    6266:	4ba0      	ldr	r3, [pc, #640]	; (64e8 <ProcessRadioRxDone+0x384>)
    6268:	4798      	blx	r3
    626a:	1e03      	subs	r3, r0, #0
    626c:	d00d      	beq.n	628a <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
    626e:	4b8f      	ldr	r3, [pc, #572]	; (64ac <ProcessRadioRxDone+0x348>)
    6270:	2278      	movs	r2, #120	; 0x78
    6272:	18ba      	adds	r2, r7, r2
    6274:	499d      	ldr	r1, [pc, #628]	; (64ec <ProcessRadioRxDone+0x388>)
    6276:	8812      	ldrh	r2, [r2, #0]
    6278:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
    627a:	2377      	movs	r3, #119	; 0x77
    627c:	18fb      	adds	r3, r7, r3
    627e:	7819      	ldrb	r1, [r3, #0]
    6280:	4b8a      	ldr	r3, [pc, #552]	; (64ac <ProcessRadioRxDone+0x348>)
    6282:	4a9b      	ldr	r2, [pc, #620]	; (64f0 <ProcessRadioRxDone+0x38c>)
    6284:	5499      	strb	r1, [r3, r2]
        return;
    6286:	f000 fd4e 	bl	6d26 <ProcessRadioRxDone+0xbc2>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    628a:	4b88      	ldr	r3, [pc, #544]	; (64ac <ProcessRadioRxDone+0x348>)
    628c:	4a88      	ldr	r2, [pc, #544]	; (64b0 <ProcessRadioRxDone+0x34c>)
    628e:	589b      	ldr	r3, [r3, r2]
    6290:	22c8      	movs	r2, #200	; 0xc8
    6292:	5c9b      	ldrb	r3, [r3, r2]
    6294:	2b01      	cmp	r3, #1
    6296:	d11a      	bne.n	62ce <ProcessRadioRxDone+0x16a>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    6298:	4b96      	ldr	r3, [pc, #600]	; (64f4 <ProcessRadioRxDone+0x390>)
    629a:	4798      	blx	r3
    629c:	1e03      	subs	r3, r0, #0
    629e:	d009      	beq.n	62b4 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    62a0:	2000      	movs	r0, #0
    62a2:	4b95      	ldr	r3, [pc, #596]	; (64f8 <ProcessRadioRxDone+0x394>)
    62a4:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( );
    62a6:	4b95      	ldr	r3, [pc, #596]	; (64fc <ProcessRadioRxDone+0x398>)
    62a8:	4798      	blx	r3
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
    62aa:	4b80      	ldr	r3, [pc, #512]	; (64ac <ProcessRadioRxDone+0x348>)
    62ac:	4a83      	ldr	r2, [pc, #524]	; (64bc <ProcessRadioRxDone+0x358>)
    62ae:	2103      	movs	r1, #3
    62b0:	5499      	strb	r1, [r3, r2]
    62b2:	e00c      	b.n	62ce <ProcessRadioRxDone+0x16a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    62b4:	4b92      	ldr	r3, [pc, #584]	; (6500 <ProcessRadioRxDone+0x39c>)
    62b6:	4798      	blx	r3
    62b8:	1e03      	subs	r3, r0, #0
    62ba:	d008      	beq.n	62ce <ProcessRadioRxDone+0x16a>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    62bc:	2000      	movs	r0, #0
    62be:	4b91      	ldr	r3, [pc, #580]	; (6504 <ProcessRadioRxDone+0x3a0>)
    62c0:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( );
    62c2:	4b91      	ldr	r3, [pc, #580]	; (6508 <ProcessRadioRxDone+0x3a4>)
    62c4:	4798      	blx	r3
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
    62c6:	4b79      	ldr	r3, [pc, #484]	; (64ac <ProcessRadioRxDone+0x348>)
    62c8:	4a7c      	ldr	r2, [pc, #496]	; (64bc <ProcessRadioRxDone+0x358>)
    62ca:	2104      	movs	r1, #4
    62cc:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
    62ce:	2376      	movs	r3, #118	; 0x76
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	781b      	ldrb	r3, [r3, #0]
    62d4:	2276      	movs	r2, #118	; 0x76
    62d6:	18ba      	adds	r2, r7, r2
    62d8:	1c59      	adds	r1, r3, #1
    62da:	7011      	strb	r1, [r2, #0]
    62dc:	001a      	movs	r2, r3
    62de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    62e0:	189b      	adds	r3, r3, r2
    62e2:	781a      	ldrb	r2, [r3, #0]
    62e4:	2374      	movs	r3, #116	; 0x74
    62e6:	18fb      	adds	r3, r7, r3
    62e8:	701a      	strb	r2, [r3, #0]

    // Accept frames of LoRaWAN Major Version 1 only
    if( macHdr.Bits.Major != 0 )
    62ea:	2374      	movs	r3, #116	; 0x74
    62ec:	18fb      	adds	r3, r7, r3
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	2203      	movs	r2, #3
    62f2:	4013      	ands	r3, r2
    62f4:	b2db      	uxtb	r3, r3
    62f6:	2b00      	cmp	r3, #0
    62f8:	d007      	beq.n	630a <ProcessRadioRxDone+0x1a6>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    62fa:	4b6c      	ldr	r3, [pc, #432]	; (64ac <ProcessRadioRxDone+0x348>)
    62fc:	4a83      	ldr	r2, [pc, #524]	; (650c <ProcessRadioRxDone+0x3a8>)
    62fe:	2101      	movs	r1, #1
    6300:	5499      	strb	r1, [r3, r2]
        PrepareRxDoneAbort( );
    6302:	4b83      	ldr	r3, [pc, #524]	; (6510 <ProcessRadioRxDone+0x3ac>)
    6304:	4798      	blx	r3
        return;
    6306:	f000 fd0e 	bl	6d26 <ProcessRadioRxDone+0xbc2>
    }

    switch( macHdr.Bits.MType )
    630a:	2374      	movs	r3, #116	; 0x74
    630c:	18fb      	adds	r3, r7, r3
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	061b      	lsls	r3, r3, #24
    6312:	0f5b      	lsrs	r3, r3, #29
    6314:	b2db      	uxtb	r3, r3
    6316:	2b03      	cmp	r3, #3
    6318:	d100      	bne.n	631c <ProcessRadioRxDone+0x1b8>
    631a:	e16d      	b.n	65f8 <ProcessRadioRxDone+0x494>
    631c:	dc03      	bgt.n	6326 <ProcessRadioRxDone+0x1c2>
    631e:	2b01      	cmp	r3, #1
    6320:	d00a      	beq.n	6338 <ProcessRadioRxDone+0x1d4>
    6322:	f000 fca3 	bl	6c6c <ProcessRadioRxDone+0xb08>
    6326:	2b05      	cmp	r3, #5
    6328:	d100      	bne.n	632c <ProcessRadioRxDone+0x1c8>
    632a:	e160      	b.n	65ee <ProcessRadioRxDone+0x48a>
    632c:	2b07      	cmp	r3, #7
    632e:	d101      	bne.n	6334 <ProcessRadioRxDone+0x1d0>
    6330:	f000 fc6f 	bl	6c12 <ProcessRadioRxDone+0xaae>
    6334:	f000 fc9a 	bl	6c6c <ProcessRadioRxDone+0xb08>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
    6338:	230c      	movs	r3, #12
    633a:	18fb      	adds	r3, r7, r3
    633c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    633e:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
    6340:	237a      	movs	r3, #122	; 0x7a
    6342:	18fb      	adds	r3, r7, r3
    6344:	881b      	ldrh	r3, [r3, #0]
    6346:	b2da      	uxtb	r2, r3
    6348:	230c      	movs	r3, #12
    634a:	18fb      	adds	r3, r7, r3
    634c:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) && ( MacCtx.NvmCtx->IsRejoinRequestPending == false ) )
    634e:	4b57      	ldr	r3, [pc, #348]	; (64ac <ProcessRadioRxDone+0x348>)
    6350:	4a57      	ldr	r2, [pc, #348]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6352:	589a      	ldr	r2, [r3, r2]
    6354:	2388      	movs	r3, #136	; 0x88
    6356:	009b      	lsls	r3, r3, #2
    6358:	5cd3      	ldrb	r3, [r2, r3]
    635a:	2b00      	cmp	r3, #0
    635c:	d012      	beq.n	6384 <ProcessRadioRxDone+0x220>
    635e:	4b53      	ldr	r3, [pc, #332]	; (64ac <ProcessRadioRxDone+0x348>)
    6360:	4a53      	ldr	r2, [pc, #332]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6362:	589a      	ldr	r2, [r3, r2]
    6364:	238e      	movs	r3, #142	; 0x8e
    6366:	009b      	lsls	r3, r3, #2
    6368:	5cd3      	ldrb	r3, [r2, r3]
    636a:	2201      	movs	r2, #1
    636c:	4053      	eors	r3, r2
    636e:	b2db      	uxtb	r3, r3
    6370:	2b00      	cmp	r3, #0
    6372:	d007      	beq.n	6384 <ProcessRadioRxDone+0x220>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6374:	4b4d      	ldr	r3, [pc, #308]	; (64ac <ProcessRadioRxDone+0x348>)
    6376:	4a65      	ldr	r2, [pc, #404]	; (650c <ProcessRadioRxDone+0x3a8>)
    6378:	2101      	movs	r1, #1
    637a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    637c:	4b64      	ldr	r3, [pc, #400]	; (6510 <ProcessRadioRxDone+0x3ac>)
    637e:	4798      	blx	r3
                return;
    6380:	f000 fcd1 	bl	6d26 <ProcessRadioRxDone+0xbc2>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
    6384:	4b49      	ldr	r3, [pc, #292]	; (64ac <ProcessRadioRxDone+0x348>)
    6386:	685b      	ldr	r3, [r3, #4]
    6388:	2280      	movs	r2, #128	; 0x80
    638a:	18bc      	adds	r4, r7, r2
    638c:	220c      	movs	r2, #12
    638e:	18ba      	adds	r2, r7, r2
    6390:	0019      	movs	r1, r3
    6392:	20ff      	movs	r0, #255	; 0xff
    6394:	4b5f      	ldr	r3, [pc, #380]	; (6514 <ProcessRadioRxDone+0x3b0>)
    6396:	4798      	blx	r3
    6398:	0003      	movs	r3, r0
    639a:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
    639c:	2380      	movs	r3, #128	; 0x80
    639e:	18fb      	adds	r3, r7, r3
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d000      	beq.n	63a8 <ProcessRadioRxDone+0x244>
    63a6:	e117      	b.n	65d8 <ProcessRadioRxDone+0x474>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
    63a8:	4b40      	ldr	r3, [pc, #256]	; (64ac <ProcessRadioRxDone+0x348>)
    63aa:	4a41      	ldr	r2, [pc, #260]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63ac:	589b      	ldr	r3, [r3, r2]
    63ae:	220c      	movs	r2, #12
    63b0:	18ba      	adds	r2, r7, r2
    63b2:	7a52      	ldrb	r2, [r2, #9]
    63b4:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
    63b6:	4b3d      	ldr	r3, [pc, #244]	; (64ac <ProcessRadioRxDone+0x348>)
    63b8:	4a3d      	ldr	r2, [pc, #244]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63ba:	589b      	ldr	r3, [r3, r2]
    63bc:	4a3b      	ldr	r2, [pc, #236]	; (64ac <ProcessRadioRxDone+0x348>)
    63be:	493c      	ldr	r1, [pc, #240]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63c0:	5852      	ldr	r2, [r2, r1]
    63c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    63c4:	220c      	movs	r2, #12
    63c6:	18ba      	adds	r2, r7, r2
    63c8:	7a92      	ldrb	r2, [r2, #10]
    63ca:	0212      	lsls	r2, r2, #8
    63cc:	430a      	orrs	r2, r1
    63ce:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
    63d0:	4b36      	ldr	r3, [pc, #216]	; (64ac <ProcessRadioRxDone+0x348>)
    63d2:	4a37      	ldr	r2, [pc, #220]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63d4:	589b      	ldr	r3, [r3, r2]
    63d6:	4a35      	ldr	r2, [pc, #212]	; (64ac <ProcessRadioRxDone+0x348>)
    63d8:	4935      	ldr	r1, [pc, #212]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63da:	5852      	ldr	r2, [r2, r1]
    63dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
    63de:	220c      	movs	r2, #12
    63e0:	18ba      	adds	r2, r7, r2
    63e2:	7ad2      	ldrb	r2, [r2, #11]
    63e4:	0412      	lsls	r2, r2, #16
    63e6:	430a      	orrs	r2, r1
    63e8:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
    63ea:	4b30      	ldr	r3, [pc, #192]	; (64ac <ProcessRadioRxDone+0x348>)
    63ec:	4a30      	ldr	r2, [pc, #192]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63ee:	589b      	ldr	r3, [r3, r2]
    63f0:	220c      	movs	r2, #12
    63f2:	18ba      	adds	r2, r7, r2
    63f4:	68d2      	ldr	r2, [r2, #12]
    63f6:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
    63f8:	4b2c      	ldr	r3, [pc, #176]	; (64ac <ProcessRadioRxDone+0x348>)
    63fa:	4a2d      	ldr	r2, [pc, #180]	; (64b0 <ProcessRadioRxDone+0x34c>)
    63fc:	589b      	ldr	r3, [r3, r2]
    63fe:	220c      	movs	r2, #12
    6400:	18ba      	adds	r2, r7, r2
    6402:	7c12      	ldrb	r2, [r2, #16]
    6404:	0652      	lsls	r2, r2, #25
    6406:	0f52      	lsrs	r2, r2, #29
    6408:	b2d2      	uxtb	r2, r2
    640a:	0011      	movs	r1, r2
    640c:	22f5      	movs	r2, #245	; 0xf5
    640e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
    6410:	4b26      	ldr	r3, [pc, #152]	; (64ac <ProcessRadioRxDone+0x348>)
    6412:	4a27      	ldr	r2, [pc, #156]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6414:	589b      	ldr	r3, [r3, r2]
    6416:	220c      	movs	r2, #12
    6418:	18ba      	adds	r2, r7, r2
    641a:	7c12      	ldrb	r2, [r2, #16]
    641c:	0712      	lsls	r2, r2, #28
    641e:	0f12      	lsrs	r2, r2, #28
    6420:	b2d2      	uxtb	r2, r2
    6422:	0011      	movs	r1, r2
    6424:	22fc      	movs	r2, #252	; 0xfc
    6426:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
    6428:	4b20      	ldr	r3, [pc, #128]	; (64ac <ProcessRadioRxDone+0x348>)
    642a:	4a21      	ldr	r2, [pc, #132]	; (64b0 <ProcessRadioRxDone+0x34c>)
    642c:	589b      	ldr	r3, [r3, r2]
    642e:	220c      	movs	r2, #12
    6430:	18ba      	adds	r2, r7, r2
    6432:	7c52      	ldrb	r2, [r2, #17]
    6434:	0011      	movs	r1, r2
    6436:	22e4      	movs	r2, #228	; 0xe4
    6438:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
    643a:	4b1c      	ldr	r3, [pc, #112]	; (64ac <ProcessRadioRxDone+0x348>)
    643c:	4a1c      	ldr	r2, [pc, #112]	; (64b0 <ProcessRadioRxDone+0x34c>)
    643e:	589b      	ldr	r3, [r3, r2]
    6440:	22e4      	movs	r2, #228	; 0xe4
    6442:	589b      	ldr	r3, [r3, r2]
    6444:	2b00      	cmp	r3, #0
    6446:	d105      	bne.n	6454 <ProcessRadioRxDone+0x2f0>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
    6448:	4b18      	ldr	r3, [pc, #96]	; (64ac <ProcessRadioRxDone+0x348>)
    644a:	4a19      	ldr	r2, [pc, #100]	; (64b0 <ProcessRadioRxDone+0x34c>)
    644c:	589b      	ldr	r3, [r3, r2]
    644e:	22e4      	movs	r2, #228	; 0xe4
    6450:	2101      	movs	r1, #1
    6452:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
    6454:	4b15      	ldr	r3, [pc, #84]	; (64ac <ProcessRadioRxDone+0x348>)
    6456:	4a16      	ldr	r2, [pc, #88]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6458:	589b      	ldr	r3, [r3, r2]
    645a:	4a14      	ldr	r2, [pc, #80]	; (64ac <ProcessRadioRxDone+0x348>)
    645c:	4914      	ldr	r1, [pc, #80]	; (64b0 <ProcessRadioRxDone+0x34c>)
    645e:	5852      	ldr	r2, [r2, r1]
    6460:	21e4      	movs	r1, #228	; 0xe4
    6462:	5852      	ldr	r2, [r2, r1]
    6464:	21fa      	movs	r1, #250	; 0xfa
    6466:	0089      	lsls	r1, r1, #2
    6468:	434a      	muls	r2, r1
    646a:	21e4      	movs	r1, #228	; 0xe4
    646c:	505a      	str	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    646e:	4b0f      	ldr	r3, [pc, #60]	; (64ac <ProcessRadioRxDone+0x348>)
    6470:	4a0f      	ldr	r2, [pc, #60]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6472:	589b      	ldr	r3, [r3, r2]
    6474:	4a0d      	ldr	r2, [pc, #52]	; (64ac <ProcessRadioRxDone+0x348>)
    6476:	490e      	ldr	r1, [pc, #56]	; (64b0 <ProcessRadioRxDone+0x34c>)
    6478:	5852      	ldr	r2, [r2, r1]
    647a:	21e4      	movs	r1, #228	; 0xe4
    647c:	5852      	ldr	r2, [r2, r1]
    647e:	21fa      	movs	r1, #250	; 0xfa
    6480:	0089      	lsls	r1, r1, #2
    6482:	468c      	mov	ip, r1
    6484:	4462      	add	r2, ip
    6486:	21e8      	movs	r1, #232	; 0xe8
    6488:	505a      	str	r2, [r3, r1]

                // Is Networkserver's LoRaWAN Version before 1.1.0 ?
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
    648a:	230c      	movs	r3, #12
    648c:	18fb      	adds	r3, r7, r3
    648e:	7c1b      	ldrb	r3, [r3, #16]
    6490:	227f      	movs	r2, #127	; 0x7f
    6492:	4393      	bics	r3, r2
    6494:	b2db      	uxtb	r3, r3
    6496:	2b00      	cmp	r3, #0
    6498:	d140      	bne.n	651c <ProcessRadioRxDone+0x3b8>
                {
                    MacCtx.NvmCtx->Version.Fields.Minor = 0;
    649a:	4b04      	ldr	r3, [pc, #16]	; (64ac <ProcessRadioRxDone+0x348>)
    649c:	4a04      	ldr	r2, [pc, #16]	; (64b0 <ProcessRadioRxDone+0x34c>)
    649e:	589b      	ldr	r3, [r3, r2]
    64a0:	4a1d      	ldr	r2, [pc, #116]	; (6518 <ProcessRadioRxDone+0x3b4>)
    64a2:	2100      	movs	r1, #0
    64a4:	5499      	strb	r1, [r3, r2]
    64a6:	e03f      	b.n	6528 <ProcessRadioRxDone+0x3c4>
    64a8:	20001b80 	.word	0x20001b80
    64ac:	20000c8c 	.word	0x20000c8c
    64b0:	000004c4 	.word	0x000004c4
    64b4:	00000416 	.word	0x00000416
    64b8:	00000464 	.word	0x00000464
    64bc:	00000419 	.word	0x00000419
    64c0:	0000040b 	.word	0x0000040b
    64c4:	0000040a 	.word	0x0000040a
    64c8:	0000040d 	.word	0x0000040d
    64cc:	00000414 	.word	0x00000414
    64d0:	00000415 	.word	0x00000415
    64d4:	0000041a 	.word	0x0000041a
    64d8:	0000041c 	.word	0x0000041c
    64dc:	0001f2a4 	.word	0x0001f2a4
    64e0:	20001038 	.word	0x20001038
    64e4:	00016fe5 	.word	0x00016fe5
    64e8:	0000c6fd 	.word	0x0000c6fd
    64ec:	0000045a 	.word	0x0000045a
    64f0:	0000045c 	.word	0x0000045c
    64f4:	0000c721 	.word	0x0000c721
    64f8:	0000c6ab 	.word	0x0000c6ab
    64fc:	0000c6e9 	.word	0x0000c6e9
    6500:	0000c72d 	.word	0x0000c72d
    6504:	0000c6bf 	.word	0x0000c6bf
    6508:	0000c6f3 	.word	0x0000c6f3
    650c:	00000409 	.word	0x00000409
    6510:	00006105 	.word	0x00006105
    6514:	0000e5b1 	.word	0x0000e5b1
    6518:	0000021e 	.word	0x0000021e
                }
                else
                {
                    MacCtx.NvmCtx->Version.Fields.Minor = 1;
    651c:	4be3      	ldr	r3, [pc, #908]	; (68ac <ProcessRadioRxDone+0x748>)
    651e:	4ae4      	ldr	r2, [pc, #912]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6520:	589b      	ldr	r3, [r3, r2]
    6522:	4ae4      	ldr	r2, [pc, #912]	; (68b4 <ProcessRadioRxDone+0x750>)
    6524:	2101      	movs	r1, #1
    6526:	5499      	strb	r1, [r3, r2]
                }

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
    6528:	236c      	movs	r3, #108	; 0x6c
    652a:	18fb      	adds	r3, r7, r3
    652c:	220c      	movs	r2, #12
    652e:	18ba      	adds	r2, r7, r2
    6530:	3212      	adds	r2, #18
    6532:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
    6534:	237a      	movs	r3, #122	; 0x7a
    6536:	18fb      	adds	r3, r7, r3
    6538:	881b      	ldrh	r3, [r3, #0]
    653a:	b2db      	uxtb	r3, r3
    653c:	3b11      	subs	r3, #17
    653e:	b2da      	uxtb	r2, r3
    6540:	236c      	movs	r3, #108	; 0x6c
    6542:	18fb      	adds	r3, r7, r3
    6544:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
    6546:	4bd9      	ldr	r3, [pc, #868]	; (68ac <ProcessRadioRxDone+0x748>)
    6548:	4ad9      	ldr	r2, [pc, #868]	; (68b0 <ProcessRadioRxDone+0x74c>)
    654a:	589b      	ldr	r3, [r3, r2]
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	226c      	movs	r2, #108	; 0x6c
    6550:	18ba      	adds	r2, r7, r2
    6552:	0011      	movs	r1, r2
    6554:	0018      	movs	r0, r3
    6556:	4bd8      	ldr	r3, [pc, #864]	; (68b8 <ProcessRadioRxDone+0x754>)
    6558:	4798      	blx	r3

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
    655a:	4bd4      	ldr	r3, [pc, #848]	; (68ac <ProcessRadioRxDone+0x748>)
    655c:	4ad4      	ldr	r2, [pc, #848]	; (68b0 <ProcessRadioRxDone+0x74c>)
    655e:	589a      	ldr	r2, [r3, r2]
    6560:	2388      	movs	r3, #136	; 0x88
    6562:	009b      	lsls	r3, r3, #2
    6564:	2102      	movs	r1, #2
    6566:	54d1      	strb	r1, [r2, r3]

                // Add a RekeyInd MAC command to confirm the security key update.
                if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    6568:	4bd0      	ldr	r3, [pc, #832]	; (68ac <ProcessRadioRxDone+0x748>)
    656a:	4ad1      	ldr	r2, [pc, #836]	; (68b0 <ProcessRadioRxDone+0x74c>)
    656c:	589b      	ldr	r3, [r3, r2]
    656e:	4ad1      	ldr	r2, [pc, #836]	; (68b4 <ProcessRadioRxDone+0x750>)
    6570:	5c9b      	ldrb	r3, [r3, r2]
    6572:	2b00      	cmp	r3, #0
    6574:	d012      	beq.n	659c <ProcessRadioRxDone+0x438>
                {
                    MacCtx.NvmCtx->RekeyIndUplinksCounter = 0;
    6576:	4bcd      	ldr	r3, [pc, #820]	; (68ac <ProcessRadioRxDone+0x748>)
    6578:	4acd      	ldr	r2, [pc, #820]	; (68b0 <ProcessRadioRxDone+0x74c>)
    657a:	589b      	ldr	r3, [r3, r2]
    657c:	4acf      	ldr	r2, [pc, #828]	; (68bc <ProcessRadioRxDone+0x758>)
    657e:	2100      	movs	r1, #0
    6580:	5299      	strh	r1, [r3, r2]
                    macCmdPayload[0] = MacCtx.NvmCtx->Version.Fields.Minor;
    6582:	4bca      	ldr	r3, [pc, #808]	; (68ac <ProcessRadioRxDone+0x748>)
    6584:	4aca      	ldr	r2, [pc, #808]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6586:	589b      	ldr	r3, [r3, r2]
    6588:	4aca      	ldr	r2, [pc, #808]	; (68b4 <ProcessRadioRxDone+0x750>)
    658a:	5c9a      	ldrb	r2, [r3, r2]
    658c:	1d3b      	adds	r3, r7, #4
    658e:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
    6590:	1d3b      	adds	r3, r7, #4
    6592:	2201      	movs	r2, #1
    6594:	0019      	movs	r1, r3
    6596:	200b      	movs	r0, #11
    6598:	4bc9      	ldr	r3, [pc, #804]	; (68c0 <ProcessRadioRxDone+0x75c>)
    659a:	4798      	blx	r3
                }

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    659c:	2000      	movs	r0, #0
    659e:	4bc9      	ldr	r3, [pc, #804]	; (68c4 <ProcessRadioRxDone+0x760>)
    65a0:	4798      	blx	r3
    65a2:	1e03      	subs	r3, r0, #0
    65a4:	d003      	beq.n	65ae <ProcessRadioRxDone+0x44a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
    65a6:	2100      	movs	r1, #0
    65a8:	2000      	movs	r0, #0
    65aa:	4bc7      	ldr	r3, [pc, #796]	; (68c8 <ProcessRadioRxDone+0x764>)
    65ac:	4798      	blx	r3
                }

                // Rejoin handling
                if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    65ae:	4bbf      	ldr	r3, [pc, #764]	; (68ac <ProcessRadioRxDone+0x748>)
    65b0:	4abf      	ldr	r2, [pc, #764]	; (68b0 <ProcessRadioRxDone+0x74c>)
    65b2:	589a      	ldr	r2, [r3, r2]
    65b4:	238e      	movs	r3, #142	; 0x8e
    65b6:	009b      	lsls	r3, r3, #2
    65b8:	5cd3      	ldrb	r3, [r2, r3]
    65ba:	2b00      	cmp	r3, #0
    65bc:	d100      	bne.n	65c0 <ProcessRadioRxDone+0x45c>
    65be:	e38f      	b.n	6ce0 <ProcessRadioRxDone+0xb7c>
                {
                    MacCtx.NvmCtx->IsRejoinRequestPending = false;
    65c0:	4bba      	ldr	r3, [pc, #744]	; (68ac <ProcessRadioRxDone+0x748>)
    65c2:	4abb      	ldr	r2, [pc, #748]	; (68b0 <ProcessRadioRxDone+0x74c>)
    65c4:	589a      	ldr	r2, [r3, r2]
    65c6:	238e      	movs	r3, #142	; 0x8e
    65c8:	009b      	lsls	r3, r3, #2
    65ca:	2100      	movs	r1, #0
    65cc:	54d1      	strb	r1, [r2, r3]

                    // Stop in any case the ForceRejoinReqCycleTimer
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    65ce:	4bbf      	ldr	r3, [pc, #764]	; (68cc <ProcessRadioRxDone+0x768>)
    65d0:	0018      	movs	r0, r3
    65d2:	4bbf      	ldr	r3, [pc, #764]	; (68d0 <ProcessRadioRxDone+0x76c>)
    65d4:	4798      	blx	r3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
    65d6:	e383      	b.n	6ce0 <ProcessRadioRxDone+0xb7c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    65d8:	2000      	movs	r0, #0
    65da:	4bba      	ldr	r3, [pc, #744]	; (68c4 <ProcessRadioRxDone+0x760>)
    65dc:	4798      	blx	r3
    65de:	1e03      	subs	r3, r0, #0
    65e0:	d100      	bne.n	65e4 <ProcessRadioRxDone+0x480>
    65e2:	e37d      	b.n	6ce0 <ProcessRadioRxDone+0xb7c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
    65e4:	2100      	movs	r1, #0
    65e6:	2007      	movs	r0, #7
    65e8:	4bb7      	ldr	r3, [pc, #732]	; (68c8 <ProcessRadioRxDone+0x764>)
    65ea:	4798      	blx	r3
            break;
    65ec:	e378      	b.n	6ce0 <ProcessRadioRxDone+0xb7c>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    65ee:	4aaf      	ldr	r2, [pc, #700]	; (68ac <ProcessRadioRxDone+0x748>)
    65f0:	2381      	movs	r3, #129	; 0x81
    65f2:	00db      	lsls	r3, r3, #3
    65f4:	2101      	movs	r1, #1
    65f6:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    65f8:	4bac      	ldr	r3, [pc, #688]	; (68ac <ProcessRadioRxDone+0x748>)
    65fa:	4aad      	ldr	r2, [pc, #692]	; (68b0 <ProcessRadioRxDone+0x74c>)
    65fc:	589a      	ldr	r2, [r3, r2]
    65fe:	2302      	movs	r3, #2
    6600:	33ff      	adds	r3, #255	; 0xff
    6602:	5cd2      	ldrb	r2, [r2, r3]
    6604:	2368      	movs	r3, #104	; 0x68
    6606:	18fb      	adds	r3, r7, r3
    6608:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
    660a:	4ba8      	ldr	r3, [pc, #672]	; (68ac <ProcessRadioRxDone+0x748>)
    660c:	4ab1      	ldr	r2, [pc, #708]	; (68d4 <ProcessRadioRxDone+0x770>)
    660e:	5c9b      	ldrb	r3, [r3, r2]
    6610:	b25a      	sxtb	r2, r3
    6612:	2368      	movs	r3, #104	; 0x68
    6614:	18fb      	adds	r3, r7, r3
    6616:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
    6618:	2368      	movs	r3, #104	; 0x68
    661a:	18fb      	adds	r3, r7, r3
    661c:	220c      	movs	r2, #12
    661e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
    6620:	4ba2      	ldr	r3, [pc, #648]	; (68ac <ProcessRadioRxDone+0x748>)
    6622:	4aa3      	ldr	r2, [pc, #652]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6624:	589a      	ldr	r2, [r3, r2]
    6626:	2316      	movs	r3, #22
    6628:	33ff      	adds	r3, #255	; 0xff
    662a:	5cd3      	ldrb	r3, [r2, r3]
    662c:	2b00      	cmp	r3, #0
    662e:	d003      	beq.n	6638 <ProcessRadioRxDone+0x4d4>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    6630:	2368      	movs	r3, #104	; 0x68
    6632:	18fb      	adds	r3, r7, r3
    6634:	220d      	movs	r2, #13
    6636:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    6638:	4b9c      	ldr	r3, [pc, #624]	; (68ac <ProcessRadioRxDone+0x748>)
    663a:	4a9d      	ldr	r2, [pc, #628]	; (68b0 <ProcessRadioRxDone+0x74c>)
    663c:	589b      	ldr	r3, [r3, r2]
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	2268      	movs	r2, #104	; 0x68
    6642:	18ba      	adds	r2, r7, r2
    6644:	0011      	movs	r1, r2
    6646:	0018      	movs	r0, r3
    6648:	4ba3      	ldr	r3, [pc, #652]	; (68d8 <ProcessRadioRxDone+0x774>)
    664a:	4798      	blx	r3
    664c:	0003      	movs	r3, r0
    664e:	001a      	movs	r2, r3
    6650:	2364      	movs	r3, #100	; 0x64
    6652:	18fb      	adds	r3, r7, r3
    6654:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
    6656:	237a      	movs	r3, #122	; 0x7a
    6658:	18fb      	adds	r3, r7, r3
    665a:	881b      	ldrh	r3, [r3, #0]
    665c:	3b0d      	subs	r3, #13
    665e:	b29b      	uxth	r3, r3
    6660:	b21b      	sxth	r3, r3
    6662:	1c1a      	adds	r2, r3, #0
    6664:	b213      	sxth	r3, r2
    6666:	2b00      	cmp	r3, #0
    6668:	da01      	bge.n	666e <ProcessRadioRxDone+0x50a>
    666a:	2300      	movs	r3, #0
    666c:	1c1a      	adds	r2, r3, #0
    666e:	b212      	sxth	r2, r2
    6670:	2364      	movs	r3, #100	; 0x64
    6672:	18fb      	adds	r3, r7, r3
    6674:	681b      	ldr	r3, [r3, #0]
    6676:	b21b      	sxth	r3, r3
    6678:	429a      	cmp	r2, r3
    667a:	dd06      	ble.n	668a <ProcessRadioRxDone+0x526>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    667c:	4b8b      	ldr	r3, [pc, #556]	; (68ac <ProcessRadioRxDone+0x748>)
    667e:	4a97      	ldr	r2, [pc, #604]	; (68dc <ProcessRadioRxDone+0x778>)
    6680:	2101      	movs	r1, #1
    6682:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    6684:	4b96      	ldr	r3, [pc, #600]	; (68e0 <ProcessRadioRxDone+0x77c>)
    6686:	4798      	blx	r3
                return;
    6688:	e34d      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
            }
            macMsgData.Buffer = payload;
    668a:	2334      	movs	r3, #52	; 0x34
    668c:	18fb      	adds	r3, r7, r3
    668e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6690:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
    6692:	237a      	movs	r3, #122	; 0x7a
    6694:	18fb      	adds	r3, r7, r3
    6696:	881b      	ldrh	r3, [r3, #0]
    6698:	b2da      	uxtb	r2, r3
    669a:	2334      	movs	r3, #52	; 0x34
    669c:	18fb      	adds	r3, r7, r3
    669e:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
    66a0:	2334      	movs	r3, #52	; 0x34
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	4a8f      	ldr	r2, [pc, #572]	; (68e4 <ProcessRadioRxDone+0x780>)
    66a6:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
    66a8:	2334      	movs	r3, #52	; 0x34
    66aa:	18fb      	adds	r3, r7, r3
    66ac:	2228      	movs	r2, #40	; 0x28
    66ae:	21ff      	movs	r1, #255	; 0xff
    66b0:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
    66b2:	2334      	movs	r3, #52	; 0x34
    66b4:	18fb      	adds	r3, r7, r3
    66b6:	0018      	movs	r0, r3
    66b8:	4b8b      	ldr	r3, [pc, #556]	; (68e8 <ProcessRadioRxDone+0x784>)
    66ba:	4798      	blx	r3
    66bc:	1e03      	subs	r3, r0, #0
    66be:	d006      	beq.n	66ce <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    66c0:	4b7a      	ldr	r3, [pc, #488]	; (68ac <ProcessRadioRxDone+0x748>)
    66c2:	4a86      	ldr	r2, [pc, #536]	; (68dc <ProcessRadioRxDone+0x778>)
    66c4:	2101      	movs	r1, #1
    66c6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    66c8:	4b85      	ldr	r3, [pc, #532]	; (68e0 <ProcessRadioRxDone+0x77c>)
    66ca:	4798      	blx	r3
                return;
    66cc:	e32b      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
    66ce:	2334      	movs	r3, #52	; 0x34
    66d0:	18fb      	adds	r3, r7, r3
    66d2:	6899      	ldr	r1, [r3, #8]
    66d4:	4a75      	ldr	r2, [pc, #468]	; (68ac <ProcessRadioRxDone+0x748>)
    66d6:	2384      	movs	r3, #132	; 0x84
    66d8:	00db      	lsls	r3, r3, #3
    66da:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
    66dc:	1cfa      	adds	r2, r7, #3
    66de:	2334      	movs	r3, #52	; 0x34
    66e0:	18fb      	adds	r3, r7, r3
    66e2:	0011      	movs	r1, r2
    66e4:	0018      	movs	r0, r3
    66e6:	4b81      	ldr	r3, [pc, #516]	; (68ec <ProcessRadioRxDone+0x788>)
    66e8:	4798      	blx	r3
    66ea:	1e03      	subs	r3, r0, #0
    66ec:	d006      	beq.n	66fc <ProcessRadioRxDone+0x598>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    66ee:	4b6f      	ldr	r3, [pc, #444]	; (68ac <ProcessRadioRxDone+0x748>)
    66f0:	4a7a      	ldr	r2, [pc, #488]	; (68dc <ProcessRadioRxDone+0x778>)
    66f2:	2101      	movs	r1, #1
    66f4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    66f6:	4b7a      	ldr	r3, [pc, #488]	; (68e0 <ProcessRadioRxDone+0x77c>)
    66f8:	4798      	blx	r3
                return;
    66fa:	e314      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
            }

            //Check if it is a multicast message
            multicast = 0;
    66fc:	2383      	movs	r3, #131	; 0x83
    66fe:	18fb      	adds	r3, r7, r3
    6700:	2200      	movs	r2, #0
    6702:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
    6704:	2300      	movs	r3, #0
    6706:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    6708:	2381      	movs	r3, #129	; 0x81
    670a:	18fb      	adds	r3, r7, r3
    670c:	2200      	movs	r2, #0
    670e:	701a      	strb	r2, [r3, #0]
    6710:	e04e      	b.n	67b0 <ProcessRadioRxDone+0x64c>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    6712:	4b66      	ldr	r3, [pc, #408]	; (68ac <ProcessRadioRxDone+0x748>)
    6714:	4a66      	ldr	r2, [pc, #408]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6716:	589a      	ldr	r2, [r3, r2]
    6718:	2381      	movs	r3, #129	; 0x81
    671a:	18fb      	adds	r3, r7, r3
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	015b      	lsls	r3, r3, #5
    6720:	18d3      	adds	r3, r2, r3
    6722:	334c      	adds	r3, #76	; 0x4c
    6724:	681a      	ldr	r2, [r3, #0]
    6726:	2334      	movs	r3, #52	; 0x34
    6728:	18fb      	adds	r3, r7, r3
    672a:	689b      	ldr	r3, [r3, #8]
    672c:	429a      	cmp	r2, r3
    672e:	d138      	bne.n	67a2 <ProcessRadioRxDone+0x63e>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
    6730:	4b5e      	ldr	r3, [pc, #376]	; (68ac <ProcessRadioRxDone+0x748>)
    6732:	4a5f      	ldr	r2, [pc, #380]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6734:	589a      	ldr	r2, [r3, r2]
    6736:	2381      	movs	r3, #129	; 0x81
    6738:	18fb      	adds	r3, r7, r3
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	2154      	movs	r1, #84	; 0x54
    673e:	015b      	lsls	r3, r3, #5
    6740:	18d3      	adds	r3, r2, r3
    6742:	185b      	adds	r3, r3, r1
    6744:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    6746:	2b00      	cmp	r3, #0
    6748:	d02b      	beq.n	67a2 <ProcessRadioRxDone+0x63e>
                {
                    multicast = 1;
    674a:	2383      	movs	r3, #131	; 0x83
    674c:	18fb      	adds	r3, r7, r3
    674e:	2201      	movs	r2, #1
    6750:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
    6752:	4b56      	ldr	r3, [pc, #344]	; (68ac <ProcessRadioRxDone+0x748>)
    6754:	4a56      	ldr	r2, [pc, #344]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6756:	5899      	ldr	r1, [r3, r2]
    6758:	2381      	movs	r3, #129	; 0x81
    675a:	18fb      	adds	r3, r7, r3
    675c:	781a      	ldrb	r2, [r3, #0]
    675e:	2382      	movs	r3, #130	; 0x82
    6760:	18fb      	adds	r3, r7, r3
    6762:	2048      	movs	r0, #72	; 0x48
    6764:	0152      	lsls	r2, r2, #5
    6766:	188a      	adds	r2, r1, r2
    6768:	1812      	adds	r2, r2, r0
    676a:	7812      	ldrb	r2, [r2, #0]
    676c:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
    676e:	4b4f      	ldr	r3, [pc, #316]	; (68ac <ProcessRadioRxDone+0x748>)
    6770:	4a4f      	ldr	r2, [pc, #316]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6772:	589a      	ldr	r2, [r3, r2]
    6774:	2381      	movs	r3, #129	; 0x81
    6776:	18fb      	adds	r3, r7, r3
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	015b      	lsls	r3, r3, #5
    677c:	18d3      	adds	r3, r2, r3
    677e:	3350      	adds	r3, #80	; 0x50
    6780:	681b      	ldr	r3, [r3, #0]
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
    6786:	4b49      	ldr	r3, [pc, #292]	; (68ac <ProcessRadioRxDone+0x748>)
    6788:	4a49      	ldr	r2, [pc, #292]	; (68b0 <ProcessRadioRxDone+0x74c>)
    678a:	589a      	ldr	r2, [r3, r2]
    678c:	2381      	movs	r3, #129	; 0x81
    678e:	18fb      	adds	r3, r7, r3
    6790:	781b      	ldrb	r3, [r3, #0]
    6792:	015b      	lsls	r3, r3, #5
    6794:	18d3      	adds	r3, r2, r3
    6796:	334c      	adds	r3, #76	; 0x4c
    6798:	681b      	ldr	r3, [r3, #0]
    679a:	2284      	movs	r2, #132	; 0x84
    679c:	18ba      	adds	r2, r7, r2
    679e:	6013      	str	r3, [r2, #0]
                    break;
    67a0:	e00b      	b.n	67ba <ProcessRadioRxDone+0x656>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    67a2:	2381      	movs	r3, #129	; 0x81
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	781a      	ldrb	r2, [r3, #0]
    67a8:	2381      	movs	r3, #129	; 0x81
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	3201      	adds	r2, #1
    67ae:	701a      	strb	r2, [r3, #0]
    67b0:	2381      	movs	r3, #129	; 0x81
    67b2:	18fb      	adds	r3, r7, r3
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	2b03      	cmp	r3, #3
    67b8:	d9ab      	bls.n	6712 <ProcessRadioRxDone+0x5ae>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
    67ba:	2368      	movs	r3, #104	; 0x68
    67bc:	18fb      	adds	r3, r7, r3
    67be:	2214      	movs	r2, #20
    67c0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    67c2:	4b3a      	ldr	r3, [pc, #232]	; (68ac <ProcessRadioRxDone+0x748>)
    67c4:	4a3a      	ldr	r2, [pc, #232]	; (68b0 <ProcessRadioRxDone+0x74c>)
    67c6:	589b      	ldr	r3, [r3, r2]
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	2268      	movs	r2, #104	; 0x68
    67cc:	18ba      	adds	r2, r7, r2
    67ce:	0011      	movs	r1, r2
    67d0:	0018      	movs	r0, r3
    67d2:	4b41      	ldr	r3, [pc, #260]	; (68d8 <ProcessRadioRxDone+0x774>)
    67d4:	4798      	blx	r3
    67d6:	0003      	movs	r3, r0
    67d8:	001a      	movs	r2, r3
    67da:	2364      	movs	r3, #100	; 0x64
    67dc:	18fb      	adds	r3, r7, r3
    67de:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
    67e0:	1cfb      	adds	r3, r7, #3
    67e2:	781d      	ldrb	r5, [r3, #0]
    67e4:	4b31      	ldr	r3, [pc, #196]	; (68ac <ProcessRadioRxDone+0x748>)
    67e6:	4a32      	ldr	r2, [pc, #200]	; (68b0 <ProcessRadioRxDone+0x74c>)
    67e8:	5899      	ldr	r1, [r3, r2]
    67ea:	2364      	movs	r3, #100	; 0x64
    67ec:	18fb      	adds	r3, r7, r3
    67ee:	681b      	ldr	r3, [r3, #0]
    67f0:	b29b      	uxth	r3, r3
    67f2:	2275      	movs	r2, #117	; 0x75
    67f4:	18bc      	adds	r4, r7, r2
    67f6:	2287      	movs	r2, #135	; 0x87
    67f8:	0092      	lsls	r2, r2, #2
    67fa:	588e      	ldr	r6, [r1, r2]
    67fc:	2234      	movs	r2, #52	; 0x34
    67fe:	18b9      	adds	r1, r7, r2
    6800:	2282      	movs	r2, #130	; 0x82
    6802:	18ba      	adds	r2, r7, r2
    6804:	7810      	ldrb	r0, [r2, #0]
    6806:	2208      	movs	r2, #8
    6808:	18ba      	adds	r2, r7, r2
    680a:	9202      	str	r2, [sp, #8]
    680c:	1dfa      	adds	r2, r7, #7
    680e:	9201      	str	r2, [sp, #4]
    6810:	9300      	str	r3, [sp, #0]
    6812:	0033      	movs	r3, r6
    6814:	000a      	movs	r2, r1
    6816:	0029      	movs	r1, r5
    6818:	4d35      	ldr	r5, [pc, #212]	; (68f0 <ProcessRadioRxDone+0x78c>)
    681a:	47a8      	blx	r5
    681c:	0003      	movs	r3, r0
    681e:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
    6820:	2375      	movs	r3, #117	; 0x75
    6822:	18fb      	adds	r3, r7, r3
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	2b00      	cmp	r3, #0
    6828:	d066      	beq.n	68f8 <ProcessRadioRxDone+0x794>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
    682a:	2375      	movs	r3, #117	; 0x75
    682c:	18fb      	adds	r3, r7, r3
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	2b01      	cmp	r3, #1
    6832:	d125      	bne.n	6880 <ProcessRadioRxDone+0x71c>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
    6834:	4b1d      	ldr	r3, [pc, #116]	; (68ac <ProcessRadioRxDone+0x748>)
    6836:	4a29      	ldr	r2, [pc, #164]	; (68dc <ProcessRadioRxDone+0x778>)
    6838:	2108      	movs	r1, #8
    683a:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
    683c:	4b1b      	ldr	r3, [pc, #108]	; (68ac <ProcessRadioRxDone+0x748>)
    683e:	4a1c      	ldr	r2, [pc, #112]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6840:	589b      	ldr	r3, [r3, r2]
    6842:	4a1c      	ldr	r2, [pc, #112]	; (68b4 <ProcessRadioRxDone+0x750>)
    6844:	5c9b      	ldrb	r3, [r3, r2]
    6846:	2b00      	cmp	r3, #0
    6848:	d128      	bne.n	689c <ProcessRadioRxDone+0x738>
    684a:	2374      	movs	r3, #116	; 0x74
    684c:	18fb      	adds	r3, r7, r3
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	221f      	movs	r2, #31
    6852:	4393      	bics	r3, r2
    6854:	b2db      	uxtb	r3, r3
    6856:	2ba0      	cmp	r3, #160	; 0xa0
    6858:	d120      	bne.n	689c <ProcessRadioRxDone+0x738>
    685a:	4b14      	ldr	r3, [pc, #80]	; (68ac <ProcessRadioRxDone+0x748>)
    685c:	4a14      	ldr	r2, [pc, #80]	; (68b0 <ProcessRadioRxDone+0x74c>)
    685e:	589a      	ldr	r2, [r3, r2]
    6860:	238f      	movs	r3, #143	; 0x8f
    6862:	009b      	lsls	r3, r3, #2
    6864:	58d2      	ldr	r2, [r2, r3]
    6866:	2334      	movs	r3, #52	; 0x34
    6868:	18fb      	adds	r3, r7, r3
    686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    686c:	429a      	cmp	r2, r3
    686e:	d115      	bne.n	689c <ProcessRadioRxDone+0x738>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
    6870:	4b0e      	ldr	r3, [pc, #56]	; (68ac <ProcessRadioRxDone+0x748>)
    6872:	4a0f      	ldr	r2, [pc, #60]	; (68b0 <ProcessRadioRxDone+0x74c>)
    6874:	589a      	ldr	r2, [r3, r2]
    6876:	2386      	movs	r3, #134	; 0x86
    6878:	009b      	lsls	r3, r3, #2
    687a:	2101      	movs	r1, #1
    687c:	54d1      	strb	r1, [r2, r3]
    687e:	e00d      	b.n	689c <ProcessRadioRxDone+0x738>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
    6880:	2375      	movs	r3, #117	; 0x75
    6882:	18fb      	adds	r3, r7, r3
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	2b02      	cmp	r3, #2
    6888:	d104      	bne.n	6894 <ProcessRadioRxDone+0x730>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
    688a:	4b08      	ldr	r3, [pc, #32]	; (68ac <ProcessRadioRxDone+0x748>)
    688c:	4a13      	ldr	r2, [pc, #76]	; (68dc <ProcessRadioRxDone+0x778>)
    688e:	210a      	movs	r1, #10
    6890:	5499      	strb	r1, [r3, r2]
    6892:	e003      	b.n	689c <ProcessRadioRxDone+0x738>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6894:	4b05      	ldr	r3, [pc, #20]	; (68ac <ProcessRadioRxDone+0x748>)
    6896:	4a11      	ldr	r2, [pc, #68]	; (68dc <ProcessRadioRxDone+0x778>)
    6898:	2101      	movs	r1, #1
    689a:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    689c:	68ba      	ldr	r2, [r7, #8]
    689e:	4b03      	ldr	r3, [pc, #12]	; (68ac <ProcessRadioRxDone+0x748>)
    68a0:	4914      	ldr	r1, [pc, #80]	; (68f4 <ProcessRadioRxDone+0x790>)
    68a2:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
    68a4:	4b0e      	ldr	r3, [pc, #56]	; (68e0 <ProcessRadioRxDone+0x77c>)
    68a6:	4798      	blx	r3
                return;
    68a8:	e23d      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
    68aa:	46c0      	nop			; (mov r8, r8)
    68ac:	20000c8c 	.word	0x20000c8c
    68b0:	000004c4 	.word	0x000004c4
    68b4:	0000021e 	.word	0x0000021e
    68b8:	0000ffe1 	.word	0x0000ffe1
    68bc:	0000023a 	.word	0x0000023a
    68c0:	0000cb11 	.word	0x0000cb11
    68c4:	0000d209 	.word	0x0000d209
    68c8:	0000d0e1 	.word	0x0000d0e1
    68cc:	20001130 	.word	0x20001130
    68d0:	00016fe5 	.word	0x00016fe5
    68d4:	0000040c 	.word	0x0000040c
    68d8:	0000fec1 	.word	0x0000fec1
    68dc:	00000409 	.word	0x00000409
    68e0:	00006105 	.word	0x00006105
    68e4:	20000ecc 	.word	0x20000ecc
    68e8:	0000f555 	.word	0x0000f555
    68ec:	00009e79 	.word	0x00009e79
    68f0:	0000f011 	.word	0x0000f011
    68f4:	0000041c 	.word	0x0000041c
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
    68f8:	1dfb      	adds	r3, r7, #7
    68fa:	781a      	ldrb	r2, [r3, #0]
    68fc:	68bd      	ldr	r5, [r7, #8]
    68fe:	2380      	movs	r3, #128	; 0x80
    6900:	18fc      	adds	r4, r7, r3
    6902:	2384      	movs	r3, #132	; 0x84
    6904:	18fb      	adds	r3, r7, r3
    6906:	6819      	ldr	r1, [r3, #0]
    6908:	2382      	movs	r3, #130	; 0x82
    690a:	18fb      	adds	r3, r7, r3
    690c:	7818      	ldrb	r0, [r3, #0]
    690e:	2334      	movs	r3, #52	; 0x34
    6910:	18fb      	adds	r3, r7, r3
    6912:	9300      	str	r3, [sp, #0]
    6914:	002b      	movs	r3, r5
    6916:	4dd9      	ldr	r5, [pc, #868]	; (6c7c <ProcessRadioRxDone+0xb18>)
    6918:	47a8      	blx	r5
    691a:	0003      	movs	r3, r0
    691c:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
    691e:	2380      	movs	r3, #128	; 0x80
    6920:	18fb      	adds	r3, r7, r3
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	2b00      	cmp	r3, #0
    6926:	d018      	beq.n	695a <ProcessRadioRxDone+0x7f6>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
    6928:	2380      	movs	r3, #128	; 0x80
    692a:	18fb      	adds	r3, r7, r3
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	2b02      	cmp	r3, #2
    6930:	d10c      	bne.n	694c <ProcessRadioRxDone+0x7e8>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
    6932:	4bd3      	ldr	r3, [pc, #844]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6934:	4ad3      	ldr	r2, [pc, #844]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6936:	210b      	movs	r1, #11
    6938:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
    693a:	4bd1      	ldr	r3, [pc, #836]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    693c:	4ad2      	ldr	r2, [pc, #840]	; (6c88 <ProcessRadioRxDone+0xb24>)
    693e:	5c9b      	ldrb	r3, [r3, r2]
    6940:	2b02      	cmp	r3, #2
    6942:	d100      	bne.n	6946 <ProcessRadioRxDone+0x7e2>
    6944:	e1ee      	b.n	6d24 <ProcessRadioRxDone+0xbc0>
                    {
                        PrepareRxDoneAbort( );
    6946:	4bd1      	ldr	r3, [pc, #836]	; (6c8c <ProcessRadioRxDone+0xb28>)
    6948:	4798      	blx	r3
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
    694a:	e1eb      	b.n	6d24 <ProcessRadioRxDone+0xbc0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
    694c:	4bcc      	ldr	r3, [pc, #816]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    694e:	4acd      	ldr	r2, [pc, #820]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6950:	210c      	movs	r1, #12
    6952:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
    6954:	4bcd      	ldr	r3, [pc, #820]	; (6c8c <ProcessRadioRxDone+0xb28>)
    6956:	4798      	blx	r3
                return;
    6958:	e1e4      	b.n	6d24 <ProcessRadioRxDone+0xbc0>
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    695a:	4bc9      	ldr	r3, [pc, #804]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    695c:	4ac9      	ldr	r2, [pc, #804]	; (6c84 <ProcessRadioRxDone+0xb20>)
    695e:	2100      	movs	r1, #0
    6960:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
    6962:	4bc7      	ldr	r3, [pc, #796]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6964:	2283      	movs	r2, #131	; 0x83
    6966:	18ba      	adds	r2, r7, r2
    6968:	49c9      	ldr	r1, [pc, #804]	; (6c90 <ProcessRadioRxDone+0xb2c>)
    696a:	7812      	ldrb	r2, [r2, #0]
    696c:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
    696e:	2334      	movs	r3, #52	; 0x34
    6970:	18fb      	adds	r3, r7, r3
    6972:	7b1b      	ldrb	r3, [r3, #12]
    6974:	06db      	lsls	r3, r3, #27
    6976:	0fdb      	lsrs	r3, r3, #31
    6978:	b2db      	uxtb	r3, r3
    697a:	0019      	movs	r1, r3
    697c:	4bc0      	ldr	r3, [pc, #768]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    697e:	4ac5      	ldr	r2, [pc, #788]	; (6c94 <ProcessRadioRxDone+0xb30>)
    6980:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
    6982:	4abf      	ldr	r2, [pc, #764]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6984:	2382      	movs	r3, #130	; 0x82
    6986:	00db      	lsls	r3, r3, #3
    6988:	2100      	movs	r1, #0
    698a:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
    698c:	4bbc      	ldr	r3, [pc, #752]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    698e:	4ac2      	ldr	r2, [pc, #776]	; (6c98 <ProcessRadioRxDone+0xb34>)
    6990:	2100      	movs	r1, #0
    6992:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    6994:	68ba      	ldr	r2, [r7, #8]
    6996:	4bba      	ldr	r3, [pc, #744]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6998:	49c0      	ldr	r1, [pc, #768]	; (6c9c <ProcessRadioRxDone+0xb38>)
    699a:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    699c:	2334      	movs	r3, #52	; 0x34
    699e:	18fb      	adds	r3, r7, r3
    69a0:	7b1b      	ldrb	r3, [r3, #12]
    69a2:	069b      	lsls	r3, r3, #26
    69a4:	0fdb      	lsrs	r3, r3, #31
    69a6:	b2db      	uxtb	r3, r3
    69a8:	1e5a      	subs	r2, r3, #1
    69aa:	4193      	sbcs	r3, r2
    69ac:	b2d9      	uxtb	r1, r3
    69ae:	4bb4      	ldr	r3, [pc, #720]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    69b0:	4abb      	ldr	r2, [pc, #748]	; (6ca0 <ProcessRadioRxDone+0xb3c>)
    69b2:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    69b4:	4bb2      	ldr	r3, [pc, #712]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    69b6:	4abb      	ldr	r2, [pc, #748]	; (6ca4 <ProcessRadioRxDone+0xb40>)
    69b8:	2100      	movs	r1, #0
    69ba:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    69bc:	2334      	movs	r3, #52	; 0x34
    69be:	18fb      	adds	r3, r7, r3
    69c0:	7b1b      	ldrb	r3, [r3, #12]
    69c2:	069b      	lsls	r3, r3, #26
    69c4:	0fdb      	lsrs	r3, r3, #31
    69c6:	b2db      	uxtb	r3, r3
    69c8:	1e5a      	subs	r2, r3, #1
    69ca:	4193      	sbcs	r3, r2
    69cc:	b2d9      	uxtb	r1, r3
    69ce:	4aac      	ldr	r2, [pc, #688]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    69d0:	2385      	movs	r3, #133	; 0x85
    69d2:	00db      	lsls	r3, r3, #3
    69d4:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
    69d6:	4baa      	ldr	r3, [pc, #680]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    69d8:	4ab3      	ldr	r2, [pc, #716]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    69da:	589b      	ldr	r3, [r3, r2]
    69dc:	22cc      	movs	r2, #204	; 0xcc
    69de:	2100      	movs	r1, #0
    69e0:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
    69e2:	2383      	movs	r3, #131	; 0x83
    69e4:	18fb      	adds	r3, r7, r3
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	2b01      	cmp	r3, #1
    69ea:	d105      	bne.n	69f8 <ProcessRadioRxDone+0x894>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
    69ec:	4aa4      	ldr	r2, [pc, #656]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    69ee:	2381      	movs	r3, #129	; 0x81
    69f0:	00db      	lsls	r3, r3, #3
    69f2:	2102      	movs	r1, #2
    69f4:	54d1      	strb	r1, [r2, r3]
    69f6:	e030      	b.n	6a5a <ProcessRadioRxDone+0x8f6>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
    69f8:	2374      	movs	r3, #116	; 0x74
    69fa:	18fb      	adds	r3, r7, r3
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	221f      	movs	r2, #31
    6a00:	4393      	bics	r3, r2
    6a02:	b2db      	uxtb	r3, r3
    6a04:	2ba0      	cmp	r3, #160	; 0xa0
    6a06:	d11c      	bne.n	6a42 <ProcessRadioRxDone+0x8de>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
    6a08:	4b9d      	ldr	r3, [pc, #628]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a0a:	4aa7      	ldr	r2, [pc, #668]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6a0c:	589a      	ldr	r2, [r3, r2]
    6a0e:	2386      	movs	r3, #134	; 0x86
    6a10:	009b      	lsls	r3, r3, #2
    6a12:	2101      	movs	r1, #1
    6a14:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
    6a16:	4b9a      	ldr	r3, [pc, #616]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a18:	4aa3      	ldr	r2, [pc, #652]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6a1a:	589b      	ldr	r3, [r3, r2]
    6a1c:	4aa3      	ldr	r2, [pc, #652]	; (6cac <ProcessRadioRxDone+0xb48>)
    6a1e:	5c9b      	ldrb	r3, [r3, r2]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d108      	bne.n	6a36 <ProcessRadioRxDone+0x8d2>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
    6a24:	4b96      	ldr	r3, [pc, #600]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a26:	4aa0      	ldr	r2, [pc, #640]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6a28:	589a      	ldr	r2, [r3, r2]
    6a2a:	2334      	movs	r3, #52	; 0x34
    6a2c:	18fb      	adds	r3, r7, r3
    6a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6a30:	238f      	movs	r3, #143	; 0x8f
    6a32:	009b      	lsls	r3, r3, #2
    6a34:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    6a36:	4a92      	ldr	r2, [pc, #584]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a38:	2381      	movs	r3, #129	; 0x81
    6a3a:	00db      	lsls	r3, r3, #3
    6a3c:	2101      	movs	r1, #1
    6a3e:	54d1      	strb	r1, [r2, r3]
    6a40:	e00b      	b.n	6a5a <ProcessRadioRxDone+0x8f6>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
    6a42:	4b8f      	ldr	r3, [pc, #572]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a44:	4a98      	ldr	r2, [pc, #608]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6a46:	589a      	ldr	r2, [r3, r2]
    6a48:	2386      	movs	r3, #134	; 0x86
    6a4a:	009b      	lsls	r3, r3, #2
    6a4c:	2100      	movs	r1, #0
    6a4e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    6a50:	4a8b      	ldr	r2, [pc, #556]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a52:	2381      	movs	r3, #129	; 0x81
    6a54:	00db      	lsls	r3, r3, #3
    6a56:	2100      	movs	r1, #0
    6a58:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
    6a5a:	1dfb      	adds	r3, r7, #7
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	68ba      	ldr	r2, [r7, #8]
    6a60:	0011      	movs	r1, r2
    6a62:	0018      	movs	r0, r3
    6a64:	4b92      	ldr	r3, [pc, #584]	; (6cb0 <ProcessRadioRxDone+0xb4c>)
    6a66:	4798      	blx	r3
    6a68:	1e03      	subs	r3, r0, #0
    6a6a:	d007      	beq.n	6a7c <ProcessRadioRxDone+0x918>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6a6c:	4b84      	ldr	r3, [pc, #528]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a6e:	4a85      	ldr	r2, [pc, #532]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6a70:	2101      	movs	r1, #1
    6a72:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    6a74:	4b85      	ldr	r3, [pc, #532]	; (6c8c <ProcessRadioRxDone+0xb28>)
    6a76:	4798      	blx	r3
                return;
    6a78:	46c0      	nop			; (mov r8, r8)
    6a7a:	e154      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
    6a7c:	4b80      	ldr	r3, [pc, #512]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a7e:	4a82      	ldr	r2, [pc, #520]	; (6c88 <ProcessRadioRxDone+0xb24>)
    6a80:	5c98      	ldrb	r0, [r3, r2]
    6a82:	4b7f      	ldr	r3, [pc, #508]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6a84:	4a8b      	ldr	r2, [pc, #556]	; (6cb4 <ProcessRadioRxDone+0xb50>)
    6a86:	5c9a      	ldrb	r2, [r3, r2]
    6a88:	2334      	movs	r3, #52	; 0x34
    6a8a:	18fb      	adds	r3, r7, r3
    6a8c:	7b1b      	ldrb	r3, [r3, #12]
    6a8e:	1c19      	adds	r1, r3, #0
    6a90:	4b89      	ldr	r3, [pc, #548]	; (6cb8 <ProcessRadioRxDone+0xb54>)
    6a92:	4798      	blx	r3

            switch( fType )
    6a94:	1cfb      	adds	r3, r7, #3
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	2b01      	cmp	r3, #1
    6a9a:	d039      	beq.n	6b10 <ProcessRadioRxDone+0x9ac>
    6a9c:	dc02      	bgt.n	6aa4 <ProcessRadioRxDone+0x940>
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d005      	beq.n	6aae <ProcessRadioRxDone+0x94a>
    6aa2:	e089      	b.n	6bb8 <ProcessRadioRxDone+0xa54>
    6aa4:	2b02      	cmp	r3, #2
    6aa6:	d052      	beq.n	6b4e <ProcessRadioRxDone+0x9ea>
    6aa8:	2b03      	cmp	r3, #3
    6aaa:	d06b      	beq.n	6b84 <ProcessRadioRxDone+0xa20>
    6aac:	e084      	b.n	6bb8 <ProcessRadioRxDone+0xa54>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    6aae:	2334      	movs	r3, #52	; 0x34
    6ab0:	18fb      	adds	r3, r7, r3
    6ab2:	7b1b      	ldrb	r3, [r3, #12]
    6ab4:	071b      	lsls	r3, r3, #28
    6ab6:	0f1b      	lsrs	r3, r3, #28
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	001c      	movs	r4, r3
    6abc:	2377      	movs	r3, #119	; 0x77
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	7819      	ldrb	r1, [r3, #0]
    6ac2:	4b6f      	ldr	r3, [pc, #444]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6ac4:	4a70      	ldr	r2, [pc, #448]	; (6c88 <ProcessRadioRxDone+0xb24>)
    6ac6:	5c9b      	ldrb	r3, [r3, r2]
    6ac8:	2234      	movs	r2, #52	; 0x34
    6aca:	18ba      	adds	r2, r7, r2
    6acc:	3210      	adds	r2, #16
    6ace:	0010      	movs	r0, r2
    6ad0:	9300      	str	r3, [sp, #0]
    6ad2:	000b      	movs	r3, r1
    6ad4:	0022      	movs	r2, r4
    6ad6:	2100      	movs	r1, #0
    6ad8:	4c78      	ldr	r4, [pc, #480]	; (6cbc <ProcessRadioRxDone+0xb58>)
    6ada:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    6adc:	2334      	movs	r3, #52	; 0x34
    6ade:	18fb      	adds	r3, r7, r3
    6ae0:	2220      	movs	r2, #32
    6ae2:	5c99      	ldrb	r1, [r3, r2]
    6ae4:	4b66      	ldr	r3, [pc, #408]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6ae6:	4a76      	ldr	r2, [pc, #472]	; (6cc0 <ProcessRadioRxDone+0xb5c>)
    6ae8:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    6aea:	2334      	movs	r3, #52	; 0x34
    6aec:	18fb      	adds	r3, r7, r3
    6aee:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6af0:	4a63      	ldr	r2, [pc, #396]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6af2:	2382      	movs	r3, #130	; 0x82
    6af4:	00db      	lsls	r3, r3, #3
    6af6:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    6af8:	2334      	movs	r3, #52	; 0x34
    6afa:	18fb      	adds	r3, r7, r3
    6afc:	2228      	movs	r2, #40	; 0x28
    6afe:	5c99      	ldrb	r1, [r3, r2]
    6b00:	4b5f      	ldr	r3, [pc, #380]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b02:	4a65      	ldr	r2, [pc, #404]	; (6c98 <ProcessRadioRxDone+0xb34>)
    6b04:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
    6b06:	4b5e      	ldr	r3, [pc, #376]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b08:	4a6e      	ldr	r2, [pc, #440]	; (6cc4 <ProcessRadioRxDone+0xb60>)
    6b0a:	2101      	movs	r1, #1
    6b0c:	5499      	strb	r1, [r3, r2]
                    break;
    6b0e:	e05a      	b.n	6bc6 <ProcessRadioRxDone+0xa62>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    6b10:	2334      	movs	r3, #52	; 0x34
    6b12:	18fb      	adds	r3, r7, r3
    6b14:	7b1b      	ldrb	r3, [r3, #12]
    6b16:	071b      	lsls	r3, r3, #28
    6b18:	0f1b      	lsrs	r3, r3, #28
    6b1a:	b2db      	uxtb	r3, r3
    6b1c:	001c      	movs	r4, r3
    6b1e:	2377      	movs	r3, #119	; 0x77
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	7819      	ldrb	r1, [r3, #0]
    6b24:	4b56      	ldr	r3, [pc, #344]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b26:	4a58      	ldr	r2, [pc, #352]	; (6c88 <ProcessRadioRxDone+0xb24>)
    6b28:	5c9b      	ldrb	r3, [r3, r2]
    6b2a:	2234      	movs	r2, #52	; 0x34
    6b2c:	18ba      	adds	r2, r7, r2
    6b2e:	3210      	adds	r2, #16
    6b30:	0010      	movs	r0, r2
    6b32:	9300      	str	r3, [sp, #0]
    6b34:	000b      	movs	r3, r1
    6b36:	0022      	movs	r2, r4
    6b38:	2100      	movs	r1, #0
    6b3a:	4c60      	ldr	r4, [pc, #384]	; (6cbc <ProcessRadioRxDone+0xb58>)
    6b3c:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    6b3e:	2334      	movs	r3, #52	; 0x34
    6b40:	18fb      	adds	r3, r7, r3
    6b42:	2220      	movs	r2, #32
    6b44:	5c99      	ldrb	r1, [r3, r2]
    6b46:	4b4e      	ldr	r3, [pc, #312]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b48:	4a5d      	ldr	r2, [pc, #372]	; (6cc0 <ProcessRadioRxDone+0xb5c>)
    6b4a:	5499      	strb	r1, [r3, r2]
                    break;
    6b4c:	e03b      	b.n	6bc6 <ProcessRadioRxDone+0xa62>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
    6b4e:	2334      	movs	r3, #52	; 0x34
    6b50:	18fb      	adds	r3, r7, r3
    6b52:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6b54:	2334      	movs	r3, #52	; 0x34
    6b56:	18fb      	adds	r3, r7, r3
    6b58:	2228      	movs	r2, #40	; 0x28
    6b5a:	5c99      	ldrb	r1, [r3, r2]
    6b5c:	2377      	movs	r3, #119	; 0x77
    6b5e:	18fb      	adds	r3, r7, r3
    6b60:	781c      	ldrb	r4, [r3, #0]
    6b62:	4b47      	ldr	r3, [pc, #284]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b64:	4a48      	ldr	r2, [pc, #288]	; (6c88 <ProcessRadioRxDone+0xb24>)
    6b66:	5c9b      	ldrb	r3, [r3, r2]
    6b68:	9300      	str	r3, [sp, #0]
    6b6a:	0023      	movs	r3, r4
    6b6c:	000a      	movs	r2, r1
    6b6e:	2100      	movs	r1, #0
    6b70:	4c52      	ldr	r4, [pc, #328]	; (6cbc <ProcessRadioRxDone+0xb58>)
    6b72:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    6b74:	2334      	movs	r3, #52	; 0x34
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	2220      	movs	r2, #32
    6b7a:	5c99      	ldrb	r1, [r3, r2]
    6b7c:	4b40      	ldr	r3, [pc, #256]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b7e:	4a50      	ldr	r2, [pc, #320]	; (6cc0 <ProcessRadioRxDone+0xb5c>)
    6b80:	5499      	strb	r1, [r3, r2]
                    break;
    6b82:	e020      	b.n	6bc6 <ProcessRadioRxDone+0xa62>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    6b84:	2334      	movs	r3, #52	; 0x34
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	2220      	movs	r2, #32
    6b8a:	5c99      	ldrb	r1, [r3, r2]
    6b8c:	4b3c      	ldr	r3, [pc, #240]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b8e:	4a4c      	ldr	r2, [pc, #304]	; (6cc0 <ProcessRadioRxDone+0xb5c>)
    6b90:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    6b92:	2334      	movs	r3, #52	; 0x34
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6b98:	4a39      	ldr	r2, [pc, #228]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6b9a:	2382      	movs	r3, #130	; 0x82
    6b9c:	00db      	lsls	r3, r3, #3
    6b9e:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    6ba0:	2334      	movs	r3, #52	; 0x34
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	2228      	movs	r2, #40	; 0x28
    6ba6:	5c99      	ldrb	r1, [r3, r2]
    6ba8:	4b35      	ldr	r3, [pc, #212]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6baa:	4a3b      	ldr	r2, [pc, #236]	; (6c98 <ProcessRadioRxDone+0xb34>)
    6bac:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
    6bae:	4b34      	ldr	r3, [pc, #208]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bb0:	4a44      	ldr	r2, [pc, #272]	; (6cc4 <ProcessRadioRxDone+0xb60>)
    6bb2:	2101      	movs	r1, #1
    6bb4:	5499      	strb	r1, [r3, r2]
                    break;
    6bb6:	e006      	b.n	6bc6 <ProcessRadioRxDone+0xa62>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6bb8:	4b31      	ldr	r3, [pc, #196]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bba:	4a32      	ldr	r2, [pc, #200]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6bbc:	2101      	movs	r1, #1
    6bbe:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
    6bc0:	4b32      	ldr	r3, [pc, #200]	; (6c8c <ProcessRadioRxDone+0xb28>)
    6bc2:	4798      	blx	r3
                    break;
    6bc4:	46c0      	nop			; (mov r8, r8)
            }

            // Rejoin handling
            if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    6bc6:	4b2e      	ldr	r3, [pc, #184]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bc8:	4a37      	ldr	r2, [pc, #220]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6bca:	589a      	ldr	r2, [r3, r2]
    6bcc:	238e      	movs	r3, #142	; 0x8e
    6bce:	009b      	lsls	r3, r3, #2
    6bd0:	5cd3      	ldrb	r3, [r2, r3]
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d016      	beq.n	6c04 <ProcessRadioRxDone+0xaa0>
            {
                MacCtx.NvmCtx->IsRejoinRequestPending = false;
    6bd6:	4b2a      	ldr	r3, [pc, #168]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bd8:	4a33      	ldr	r2, [pc, #204]	; (6ca8 <ProcessRadioRxDone+0xb44>)
    6bda:	589a      	ldr	r2, [r3, r2]
    6bdc:	238e      	movs	r3, #142	; 0x8e
    6bde:	009b      	lsls	r3, r3, #2
    6be0:	2100      	movs	r1, #0
    6be2:	54d1      	strb	r1, [r2, r3]

                // Stop in any case the ForceRejoinReqCycleTimer
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    6be4:	4b38      	ldr	r3, [pc, #224]	; (6cc8 <ProcessRadioRxDone+0xb64>)
    6be6:	0018      	movs	r0, r3
    6be8:	4b38      	ldr	r3, [pc, #224]	; (6ccc <ProcessRadioRxDone+0xb68>)
    6bea:	4798      	blx	r3

                // If the rejoin was trigged by MLME, set confirmation status
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    6bec:	4b24      	ldr	r3, [pc, #144]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bee:	4a38      	ldr	r2, [pc, #224]	; (6cd0 <ProcessRadioRxDone+0xb6c>)
    6bf0:	5c9b      	ldrb	r3, [r3, r2]
    6bf2:	2204      	movs	r2, #4
    6bf4:	4013      	ands	r3, r2
    6bf6:	b2db      	uxtb	r3, r3
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d003      	beq.n	6c04 <ProcessRadioRxDone+0xaa0>
                {
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    6bfc:	4b20      	ldr	r3, [pc, #128]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6bfe:	4a35      	ldr	r2, [pc, #212]	; (6cd4 <ProcessRadioRxDone+0xb70>)
    6c00:	2100      	movs	r1, #0
    6c02:	5499      	strb	r1, [r3, r2]
                }
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
    6c04:	4b1e      	ldr	r3, [pc, #120]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c06:	4a32      	ldr	r2, [pc, #200]	; (6cd0 <ProcessRadioRxDone+0xb6c>)
    6c08:	5c99      	ldrb	r1, [r3, r2]
    6c0a:	2002      	movs	r0, #2
    6c0c:	4301      	orrs	r1, r0
    6c0e:	5499      	strb	r1, [r3, r2]

            break;
    6c10:	e067      	b.n	6ce2 <ProcessRadioRxDone+0xb7e>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
    6c12:	2376      	movs	r3, #118	; 0x76
    6c14:	18fb      	adds	r3, r7, r3
    6c16:	781b      	ldrb	r3, [r3, #0]
    6c18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6c1a:	18d1      	adds	r1, r2, r3
    6c1c:	237a      	movs	r3, #122	; 0x7a
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	881a      	ldrh	r2, [r3, #0]
    6c22:	4b2d      	ldr	r3, [pc, #180]	; (6cd8 <ProcessRadioRxDone+0xb74>)
    6c24:	0018      	movs	r0, r3
    6c26:	4b2d      	ldr	r3, [pc, #180]	; (6cdc <ProcessRadioRxDone+0xb78>)
    6c28:	4798      	blx	r3

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
    6c2a:	4a15      	ldr	r2, [pc, #84]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c2c:	2381      	movs	r3, #129	; 0x81
    6c2e:	00db      	lsls	r3, r3, #3
    6c30:	2103      	movs	r1, #3
    6c32:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    6c34:	4b12      	ldr	r3, [pc, #72]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c36:	4a13      	ldr	r2, [pc, #76]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6c38:	2100      	movs	r1, #0
    6c3a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
    6c3c:	4a10      	ldr	r2, [pc, #64]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c3e:	2382      	movs	r3, #130	; 0x82
    6c40:	00db      	lsls	r3, r3, #3
    6c42:	4925      	ldr	r1, [pc, #148]	; (6cd8 <ProcessRadioRxDone+0xb74>)
    6c44:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
    6c46:	237a      	movs	r3, #122	; 0x7a
    6c48:	18fb      	adds	r3, r7, r3
    6c4a:	881b      	ldrh	r3, [r3, #0]
    6c4c:	b2da      	uxtb	r2, r3
    6c4e:	2376      	movs	r3, #118	; 0x76
    6c50:	18fb      	adds	r3, r7, r3
    6c52:	781b      	ldrb	r3, [r3, #0]
    6c54:	1ad3      	subs	r3, r2, r3
    6c56:	b2d9      	uxtb	r1, r3
    6c58:	4b09      	ldr	r3, [pc, #36]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c5a:	4a0f      	ldr	r2, [pc, #60]	; (6c98 <ProcessRadioRxDone+0xb34>)
    6c5c:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
    6c5e:	4b08      	ldr	r3, [pc, #32]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c60:	4a1b      	ldr	r2, [pc, #108]	; (6cd0 <ProcessRadioRxDone+0xb6c>)
    6c62:	5c99      	ldrb	r1, [r3, r2]
    6c64:	2002      	movs	r0, #2
    6c66:	4301      	orrs	r1, r0
    6c68:	5499      	strb	r1, [r3, r2]
            break;
    6c6a:	e03a      	b.n	6ce2 <ProcessRadioRxDone+0xb7e>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6c6c:	4b04      	ldr	r3, [pc, #16]	; (6c80 <ProcessRadioRxDone+0xb1c>)
    6c6e:	4a05      	ldr	r2, [pc, #20]	; (6c84 <ProcessRadioRxDone+0xb20>)
    6c70:	2101      	movs	r1, #1
    6c72:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
    6c74:	4b05      	ldr	r3, [pc, #20]	; (6c8c <ProcessRadioRxDone+0xb28>)
    6c76:	4798      	blx	r3
            break;
    6c78:	e033      	b.n	6ce2 <ProcessRadioRxDone+0xb7e>
    6c7a:	46c0      	nop			; (mov r8, r8)
    6c7c:	0000ed8d 	.word	0x0000ed8d
    6c80:	20000c8c 	.word	0x20000c8c
    6c84:	00000409 	.word	0x00000409
    6c88:	00000419 	.word	0x00000419
    6c8c:	00006105 	.word	0x00006105
    6c90:	0000040a 	.word	0x0000040a
    6c94:	0000040d 	.word	0x0000040d
    6c98:	00000414 	.word	0x00000414
    6c9c:	0000041c 	.word	0x0000041c
    6ca0:	0000041a 	.word	0x0000041a
    6ca4:	00000425 	.word	0x00000425
    6ca8:	000004c4 	.word	0x000004c4
    6cac:	0000021e 	.word	0x0000021e
    6cb0:	0000f16d 	.word	0x0000f16d
    6cb4:	00000424 	.word	0x00000424
    6cb8:	00009435 	.word	0x00009435
    6cbc:	00007a31 	.word	0x00007a31
    6cc0:	0000040b 	.word	0x0000040b
    6cc4:	00000415 	.word	0x00000415
    6cc8:	20001130 	.word	0x20001130
    6ccc:	00016fe5 	.word	0x00016fe5
    6cd0:	00000465 	.word	0x00000465
    6cd4:	00000439 	.word	0x00000439
    6cd8:	20000ecc 	.word	0x20000ecc
    6cdc:	00004339 	.word	0x00004339
            break;
    6ce0:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
    6ce2:	4b12      	ldr	r3, [pc, #72]	; (6d2c <ProcessRadioRxDone+0xbc8>)
    6ce4:	4a12      	ldr	r2, [pc, #72]	; (6d30 <ProcessRadioRxDone+0xbcc>)
    6ce6:	589b      	ldr	r3, [r3, r2]
    6ce8:	4a12      	ldr	r2, [pc, #72]	; (6d34 <ProcessRadioRxDone+0xbd0>)
    6cea:	5c98      	ldrb	r0, [r3, r2]
    6cec:	4b0f      	ldr	r3, [pc, #60]	; (6d2c <ProcessRadioRxDone+0xbc8>)
    6cee:	4a10      	ldr	r2, [pc, #64]	; (6d30 <ProcessRadioRxDone+0xbcc>)
    6cf0:	589b      	ldr	r3, [r3, r2]
    6cf2:	22c8      	movs	r2, #200	; 0xc8
    6cf4:	5c99      	ldrb	r1, [r3, r2]
    6cf6:	4a0d      	ldr	r2, [pc, #52]	; (6d2c <ProcessRadioRxDone+0xbc8>)
    6cf8:	2385      	movs	r3, #133	; 0x85
    6cfa:	00db      	lsls	r3, r3, #3
    6cfc:	5cd3      	ldrb	r3, [r2, r3]
    6cfe:	001a      	movs	r2, r3
    6d00:	4b0d      	ldr	r3, [pc, #52]	; (6d38 <ProcessRadioRxDone+0xbd4>)
    6d02:	4798      	blx	r3

    if( MacCtx.AckTimeoutTimer.IsRunning == false )
    6d04:	4a09      	ldr	r2, [pc, #36]	; (6d2c <ProcessRadioRxDone+0xbc8>)
    6d06:	23fe      	movs	r3, #254	; 0xfe
    6d08:	009b      	lsls	r3, r3, #2
    6d0a:	5cd3      	ldrb	r3, [r2, r3]
    6d0c:	2201      	movs	r2, #1
    6d0e:	4053      	eors	r3, r2
    6d10:	b2db      	uxtb	r3, r3
    6d12:	2b00      	cmp	r3, #0
    6d14:	d007      	beq.n	6d26 <ProcessRadioRxDone+0xbc2>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
    6d16:	4b05      	ldr	r3, [pc, #20]	; (6d2c <ProcessRadioRxDone+0xbc8>)
    6d18:	4a08      	ldr	r2, [pc, #32]	; (6d3c <ProcessRadioRxDone+0xbd8>)
    6d1a:	5c99      	ldrb	r1, [r3, r2]
    6d1c:	2010      	movs	r0, #16
    6d1e:	4301      	orrs	r1, r0
    6d20:	5499      	strb	r1, [r3, r2]
    6d22:	e000      	b.n	6d26 <ProcessRadioRxDone+0xbc2>
                return;
    6d24:	46c0      	nop			; (mov r8, r8)

    }
}
    6d26:	46bd      	mov	sp, r7
    6d28:	b023      	add	sp, #140	; 0x8c
    6d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d2c:	20000c8c 	.word	0x20000c8c
    6d30:	000004c4 	.word	0x000004c4
    6d34:	00000217 	.word	0x00000217
    6d38:	00007669 	.word	0x00007669
    6d3c:	00000465 	.word	0x00000465

00006d40 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
    6d40:	b580      	push	{r7, lr}
    6d42:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    6d44:	4b0e      	ldr	r3, [pc, #56]	; (6d80 <ProcessRadioTxTimeout+0x40>)
    6d46:	4a0f      	ldr	r2, [pc, #60]	; (6d84 <ProcessRadioTxTimeout+0x44>)
    6d48:	589b      	ldr	r3, [r3, r2]
    6d4a:	22c8      	movs	r2, #200	; 0xc8
    6d4c:	5c9b      	ldrb	r3, [r3, r2]
    6d4e:	2b02      	cmp	r3, #2
    6d50:	d003      	beq.n	6d5a <ProcessRadioTxTimeout+0x1a>
    {
        Radio.Sleep( );
    6d52:	4b0d      	ldr	r3, [pc, #52]	; (6d88 <ProcessRadioTxTimeout+0x48>)
    6d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d56:	4798      	blx	r3
    6d58:	e001      	b.n	6d5e <ProcessRadioTxTimeout+0x1e>
    }
    else
    {
        OpenContinuousRx2Window( );
    6d5a:	4b0c      	ldr	r3, [pc, #48]	; (6d8c <ProcessRadioTxTimeout+0x4c>)
    6d5c:	4798      	blx	r3
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
    6d5e:	4b08      	ldr	r3, [pc, #32]	; (6d80 <ProcessRadioTxTimeout+0x40>)
    6d60:	4a0b      	ldr	r2, [pc, #44]	; (6d90 <ProcessRadioTxTimeout+0x50>)
    6d62:	2102      	movs	r1, #2
    6d64:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
    6d66:	2002      	movs	r0, #2
    6d68:	4b0a      	ldr	r3, [pc, #40]	; (6d94 <ProcessRadioTxTimeout+0x54>)
    6d6a:	4798      	blx	r3
    MacCtx.MacFlags.Bits.MacDone = 1;
    6d6c:	4b04      	ldr	r3, [pc, #16]	; (6d80 <ProcessRadioTxTimeout+0x40>)
    6d6e:	4a0a      	ldr	r2, [pc, #40]	; (6d98 <ProcessRadioTxTimeout+0x58>)
    6d70:	5c99      	ldrb	r1, [r3, r2]
    6d72:	2010      	movs	r0, #16
    6d74:	4301      	orrs	r1, r0
    6d76:	5499      	strb	r1, [r3, r2]
}
    6d78:	46c0      	nop			; (mov r8, r8)
    6d7a:	46bd      	mov	sp, r7
    6d7c:	bd80      	pop	{r7, pc}
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	20000c8c 	.word	0x20000c8c
    6d84:	000004c4 	.word	0x000004c4
    6d88:	0001f2a4 	.word	0x0001f2a4
    6d8c:	0000966d 	.word	0x0000966d
    6d90:	00000425 	.word	0x00000425
    6d94:	0000d18d 	.word	0x0000d18d
    6d98:	00000465 	.word	0x00000465

00006d9c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
    6d9c:	b580      	push	{r7, lr}
    6d9e:	b084      	sub	sp, #16
    6da0:	af00      	add	r7, sp, #0
    6da2:	0002      	movs	r2, r0
    6da4:	1dfb      	adds	r3, r7, #7
    6da6:	701a      	strb	r2, [r3, #0]
    6da8:	1dbb      	adds	r3, r7, #6
    6daa:	1c0a      	adds	r2, r1, #0
    6dac:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
    6dae:	230f      	movs	r3, #15
    6db0:	18fb      	adds	r3, r7, r3
    6db2:	2200      	movs	r2, #0
    6db4:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    6db6:	4b50      	ldr	r3, [pc, #320]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6db8:	4a50      	ldr	r2, [pc, #320]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6dba:	589b      	ldr	r3, [r3, r2]
    6dbc:	22c8      	movs	r2, #200	; 0xc8
    6dbe:	5c9b      	ldrb	r3, [r3, r2]
    6dc0:	2b02      	cmp	r3, #2
    6dc2:	d002      	beq.n	6dca <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
    6dc4:	4b4e      	ldr	r3, [pc, #312]	; (6f00 <HandleRadioRxErrorTimeout+0x164>)
    6dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6dc8:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
    6dca:	4b4e      	ldr	r3, [pc, #312]	; (6f04 <HandleRadioRxErrorTimeout+0x168>)
    6dcc:	4798      	blx	r3
    6dce:	1e03      	subs	r3, r0, #0
    6dd0:	d008      	beq.n	6de4 <HandleRadioRxErrorTimeout+0x48>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
    6dd2:	2002      	movs	r0, #2
    6dd4:	4b4c      	ldr	r3, [pc, #304]	; (6f08 <HandleRadioRxErrorTimeout+0x16c>)
    6dd6:	4798      	blx	r3
        LoRaMacClassBBeaconTimerEvent( );
    6dd8:	4b4c      	ldr	r3, [pc, #304]	; (6f0c <HandleRadioRxErrorTimeout+0x170>)
    6dda:	4798      	blx	r3
        classBRx = true;
    6ddc:	230f      	movs	r3, #15
    6dde:	18fb      	adds	r3, r7, r3
    6de0:	2201      	movs	r2, #1
    6de2:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    6de4:	4b44      	ldr	r3, [pc, #272]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6de6:	4a45      	ldr	r2, [pc, #276]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6de8:	589b      	ldr	r3, [r3, r2]
    6dea:	22c8      	movs	r2, #200	; 0xc8
    6dec:	5c9b      	ldrb	r3, [r3, r2]
    6dee:	2b01      	cmp	r3, #1
    6df0:	d119      	bne.n	6e26 <HandleRadioRxErrorTimeout+0x8a>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    6df2:	4b47      	ldr	r3, [pc, #284]	; (6f10 <HandleRadioRxErrorTimeout+0x174>)
    6df4:	4798      	blx	r3
    6df6:	1e03      	subs	r3, r0, #0
    6df8:	d008      	beq.n	6e0c <HandleRadioRxErrorTimeout+0x70>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    6dfa:	2000      	movs	r0, #0
    6dfc:	4b45      	ldr	r3, [pc, #276]	; (6f14 <HandleRadioRxErrorTimeout+0x178>)
    6dfe:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( );
    6e00:	4b45      	ldr	r3, [pc, #276]	; (6f18 <HandleRadioRxErrorTimeout+0x17c>)
    6e02:	4798      	blx	r3
            classBRx = true;
    6e04:	230f      	movs	r3, #15
    6e06:	18fb      	adds	r3, r7, r3
    6e08:	2201      	movs	r2, #1
    6e0a:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
    6e0c:	4b43      	ldr	r3, [pc, #268]	; (6f1c <HandleRadioRxErrorTimeout+0x180>)
    6e0e:	4798      	blx	r3
    6e10:	1e03      	subs	r3, r0, #0
    6e12:	d008      	beq.n	6e26 <HandleRadioRxErrorTimeout+0x8a>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    6e14:	2000      	movs	r0, #0
    6e16:	4b42      	ldr	r3, [pc, #264]	; (6f20 <HandleRadioRxErrorTimeout+0x184>)
    6e18:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( );
    6e1a:	4b42      	ldr	r3, [pc, #264]	; (6f24 <HandleRadioRxErrorTimeout+0x188>)
    6e1c:	4798      	blx	r3
            classBRx = true;
    6e1e:	230f      	movs	r3, #15
    6e20:	18fb      	adds	r3, r7, r3
    6e22:	2201      	movs	r2, #1
    6e24:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
    6e26:	230f      	movs	r3, #15
    6e28:	18fb      	adds	r3, r7, r3
    6e2a:	781b      	ldrb	r3, [r3, #0]
    6e2c:	2201      	movs	r2, #1
    6e2e:	4053      	eors	r3, r2
    6e30:	b2db      	uxtb	r3, r3
    6e32:	2b00      	cmp	r3, #0
    6e34:	d053      	beq.n	6ede <HandleRadioRxErrorTimeout+0x142>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    6e36:	4b30      	ldr	r3, [pc, #192]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e38:	4a3b      	ldr	r2, [pc, #236]	; (6f28 <HandleRadioRxErrorTimeout+0x18c>)
    6e3a:	5c9b      	ldrb	r3, [r3, r2]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d130      	bne.n	6ea2 <HandleRadioRxErrorTimeout+0x106>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    6e40:	4b2d      	ldr	r3, [pc, #180]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e42:	4a2e      	ldr	r2, [pc, #184]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6e44:	589b      	ldr	r3, [r3, r2]
    6e46:	4a39      	ldr	r2, [pc, #228]	; (6f2c <HandleRadioRxErrorTimeout+0x190>)
    6e48:	5c9b      	ldrb	r3, [r3, r2]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d004      	beq.n	6e58 <HandleRadioRxErrorTimeout+0xbc>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
    6e4e:	4b2a      	ldr	r3, [pc, #168]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e50:	1dfa      	adds	r2, r7, #7
    6e52:	4937      	ldr	r1, [pc, #220]	; (6f30 <HandleRadioRxErrorTimeout+0x194>)
    6e54:	7812      	ldrb	r2, [r2, #0]
    6e56:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
    6e58:	1dfb      	adds	r3, r7, #7
    6e5a:	781b      	ldrb	r3, [r3, #0]
    6e5c:	0018      	movs	r0, r3
    6e5e:	4b35      	ldr	r3, [pc, #212]	; (6f34 <HandleRadioRxErrorTimeout+0x198>)
    6e60:	4798      	blx	r3

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    6e62:	4b25      	ldr	r3, [pc, #148]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e64:	4a25      	ldr	r2, [pc, #148]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6e66:	589b      	ldr	r3, [r3, r2]
    6e68:	22c8      	movs	r2, #200	; 0xc8
    6e6a:	5c9b      	ldrb	r3, [r3, r2]
    6e6c:	2b02      	cmp	r3, #2
    6e6e:	d036      	beq.n	6ede <HandleRadioRxErrorTimeout+0x142>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
    6e70:	4a21      	ldr	r2, [pc, #132]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e72:	23d0      	movs	r3, #208	; 0xd0
    6e74:	009b      	lsls	r3, r3, #2
    6e76:	58d3      	ldr	r3, [r2, r3]
    6e78:	0018      	movs	r0, r3
    6e7a:	4b2f      	ldr	r3, [pc, #188]	; (6f38 <HandleRadioRxErrorTimeout+0x19c>)
    6e7c:	4798      	blx	r3
    6e7e:	0001      	movs	r1, r0
    6e80:	4a1d      	ldr	r2, [pc, #116]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e82:	23f1      	movs	r3, #241	; 0xf1
    6e84:	009b      	lsls	r3, r3, #2
    6e86:	58d3      	ldr	r3, [r2, r3]
    6e88:	4299      	cmp	r1, r3
    6e8a:	d328      	bcc.n	6ede <HandleRadioRxErrorTimeout+0x142>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
    6e8c:	4b2b      	ldr	r3, [pc, #172]	; (6f3c <HandleRadioRxErrorTimeout+0x1a0>)
    6e8e:	0018      	movs	r0, r3
    6e90:	4b2b      	ldr	r3, [pc, #172]	; (6f40 <HandleRadioRxErrorTimeout+0x1a4>)
    6e92:	4798      	blx	r3
                    MacCtx.MacFlags.Bits.MacDone = 1;
    6e94:	4b18      	ldr	r3, [pc, #96]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6e96:	4a2b      	ldr	r2, [pc, #172]	; (6f44 <HandleRadioRxErrorTimeout+0x1a8>)
    6e98:	5c99      	ldrb	r1, [r3, r2]
    6e9a:	2010      	movs	r0, #16
    6e9c:	4301      	orrs	r1, r0
    6e9e:	5499      	strb	r1, [r3, r2]
    6ea0:	e01d      	b.n	6ede <HandleRadioRxErrorTimeout+0x142>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    6ea2:	4b15      	ldr	r3, [pc, #84]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6ea4:	4a15      	ldr	r2, [pc, #84]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6ea6:	589b      	ldr	r3, [r3, r2]
    6ea8:	4a20      	ldr	r2, [pc, #128]	; (6f2c <HandleRadioRxErrorTimeout+0x190>)
    6eaa:	5c9b      	ldrb	r3, [r3, r2]
    6eac:	2b00      	cmp	r3, #0
    6eae:	d004      	beq.n	6eba <HandleRadioRxErrorTimeout+0x11e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
    6eb0:	4b11      	ldr	r3, [pc, #68]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6eb2:	1dba      	adds	r2, r7, #6
    6eb4:	491e      	ldr	r1, [pc, #120]	; (6f30 <HandleRadioRxErrorTimeout+0x194>)
    6eb6:	7812      	ldrb	r2, [r2, #0]
    6eb8:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
    6eba:	1dbb      	adds	r3, r7, #6
    6ebc:	781b      	ldrb	r3, [r3, #0]
    6ebe:	0018      	movs	r0, r3
    6ec0:	4b1c      	ldr	r3, [pc, #112]	; (6f34 <HandleRadioRxErrorTimeout+0x198>)
    6ec2:	4798      	blx	r3

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    6ec4:	4b0c      	ldr	r3, [pc, #48]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6ec6:	4a0d      	ldr	r2, [pc, #52]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6ec8:	589b      	ldr	r3, [r3, r2]
    6eca:	22c8      	movs	r2, #200	; 0xc8
    6ecc:	5c9b      	ldrb	r3, [r3, r2]
    6ece:	2b02      	cmp	r3, #2
    6ed0:	d005      	beq.n	6ede <HandleRadioRxErrorTimeout+0x142>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
    6ed2:	4b09      	ldr	r3, [pc, #36]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6ed4:	4a1b      	ldr	r2, [pc, #108]	; (6f44 <HandleRadioRxErrorTimeout+0x1a8>)
    6ed6:	5c99      	ldrb	r1, [r3, r2]
    6ed8:	2010      	movs	r0, #16
    6eda:	4301      	orrs	r1, r0
    6edc:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    6ede:	4b06      	ldr	r3, [pc, #24]	; (6ef8 <HandleRadioRxErrorTimeout+0x15c>)
    6ee0:	4a06      	ldr	r2, [pc, #24]	; (6efc <HandleRadioRxErrorTimeout+0x160>)
    6ee2:	589b      	ldr	r3, [r3, r2]
    6ee4:	22c8      	movs	r2, #200	; 0xc8
    6ee6:	5c9b      	ldrb	r3, [r3, r2]
    6ee8:	2b02      	cmp	r3, #2
    6eea:	d101      	bne.n	6ef0 <HandleRadioRxErrorTimeout+0x154>
    {
        OpenContinuousRx2Window( );
    6eec:	4b16      	ldr	r3, [pc, #88]	; (6f48 <HandleRadioRxErrorTimeout+0x1ac>)
    6eee:	4798      	blx	r3
    }
}
    6ef0:	46c0      	nop			; (mov r8, r8)
    6ef2:	46bd      	mov	sp, r7
    6ef4:	b004      	add	sp, #16
    6ef6:	bd80      	pop	{r7, pc}
    6ef8:	20000c8c 	.word	0x20000c8c
    6efc:	000004c4 	.word	0x000004c4
    6f00:	0001f2a4 	.word	0x0001f2a4
    6f04:	0000c715 	.word	0x0000c715
    6f08:	0000c697 	.word	0x0000c697
    6f0c:	0000c6df 	.word	0x0000c6df
    6f10:	0000c721 	.word	0x0000c721
    6f14:	0000c6ab 	.word	0x0000c6ab
    6f18:	0000c6e9 	.word	0x0000c6e9
    6f1c:	0000c72d 	.word	0x0000c72d
    6f20:	0000c6bf 	.word	0x0000c6bf
    6f24:	0000c6f3 	.word	0x0000c6f3
    6f28:	00000464 	.word	0x00000464
    6f2c:	00000217 	.word	0x00000217
    6f30:	00000425 	.word	0x00000425
    6f34:	0000d18d 	.word	0x0000d18d
    6f38:	00017199 	.word	0x00017199
    6f3c:	20001038 	.word	0x20001038
    6f40:	00016fe5 	.word	0x00016fe5
    6f44:	00000465 	.word	0x00000465
    6f48:	0000966d 	.word	0x0000966d

00006f4c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
    6f4c:	b580      	push	{r7, lr}
    6f4e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
    6f50:	2106      	movs	r1, #6
    6f52:	2005      	movs	r0, #5
    6f54:	4b02      	ldr	r3, [pc, #8]	; (6f60 <ProcessRadioRxError+0x14>)
    6f56:	4798      	blx	r3
}
    6f58:	46c0      	nop			; (mov r8, r8)
    6f5a:	46bd      	mov	sp, r7
    6f5c:	bd80      	pop	{r7, pc}
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	00006d9d 	.word	0x00006d9d

00006f64 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
    6f64:	b580      	push	{r7, lr}
    6f66:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
    6f68:	2104      	movs	r1, #4
    6f6a:	2003      	movs	r0, #3
    6f6c:	4b02      	ldr	r3, [pc, #8]	; (6f78 <ProcessRadioRxTimeout+0x14>)
    6f6e:	4798      	blx	r3
}
    6f70:	46c0      	nop			; (mov r8, r8)
    6f72:	46bd      	mov	sp, r7
    6f74:	bd80      	pop	{r7, pc}
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	00006d9d 	.word	0x00006d9d

00006f7c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b082      	sub	sp, #8
    6f80:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    6f82:	003b      	movs	r3, r7
    6f84:	0018      	movs	r0, r3
    6f86:	4b20      	ldr	r3, [pc, #128]	; (7008 <LoRaMacHandleIrqEvents+0x8c>)
    6f88:	4798      	blx	r3
    events = LoRaMacRadioEvents;
    6f8a:	4b20      	ldr	r3, [pc, #128]	; (700c <LoRaMacHandleIrqEvents+0x90>)
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
    6f90:	4b1e      	ldr	r3, [pc, #120]	; (700c <LoRaMacHandleIrqEvents+0x90>)
    6f92:	2200      	movs	r2, #0
    6f94:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
    6f96:	003b      	movs	r3, r7
    6f98:	0018      	movs	r0, r3
    6f9a:	4b1d      	ldr	r3, [pc, #116]	; (7010 <LoRaMacHandleIrqEvents+0x94>)
    6f9c:	4798      	blx	r3

    if( events.Value != 0 )
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d02c      	beq.n	6ffe <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
    6fa4:	1d3b      	adds	r3, r7, #4
    6fa6:	781b      	ldrb	r3, [r3, #0]
    6fa8:	2210      	movs	r2, #16
    6faa:	4013      	ands	r3, r2
    6fac:	b2db      	uxtb	r3, r3
    6fae:	2b00      	cmp	r3, #0
    6fb0:	d001      	beq.n	6fb6 <LoRaMacHandleIrqEvents+0x3a>
        {
            ProcessRadioTxDone( );
    6fb2:	4b18      	ldr	r3, [pc, #96]	; (7014 <LoRaMacHandleIrqEvents+0x98>)
    6fb4:	4798      	blx	r3
        }
        if( events.Events.RxDone == 1 )
    6fb6:	1d3b      	adds	r3, r7, #4
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	2208      	movs	r2, #8
    6fbc:	4013      	ands	r3, r2
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d001      	beq.n	6fc8 <LoRaMacHandleIrqEvents+0x4c>
        {
            ProcessRadioRxDone( );
    6fc4:	4b14      	ldr	r3, [pc, #80]	; (7018 <LoRaMacHandleIrqEvents+0x9c>)
    6fc6:	4798      	blx	r3
        }
        if( events.Events.TxTimeout == 1 )
    6fc8:	1d3b      	adds	r3, r7, #4
    6fca:	781b      	ldrb	r3, [r3, #0]
    6fcc:	2204      	movs	r2, #4
    6fce:	4013      	ands	r3, r2
    6fd0:	b2db      	uxtb	r3, r3
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d001      	beq.n	6fda <LoRaMacHandleIrqEvents+0x5e>
        {
            ProcessRadioTxTimeout( );
    6fd6:	4b11      	ldr	r3, [pc, #68]	; (701c <LoRaMacHandleIrqEvents+0xa0>)
    6fd8:	4798      	blx	r3
        }
        if( events.Events.RxError == 1 )
    6fda:	1d3b      	adds	r3, r7, #4
    6fdc:	781b      	ldrb	r3, [r3, #0]
    6fde:	2202      	movs	r2, #2
    6fe0:	4013      	ands	r3, r2
    6fe2:	b2db      	uxtb	r3, r3
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d001      	beq.n	6fec <LoRaMacHandleIrqEvents+0x70>
        {
            ProcessRadioRxError( );
    6fe8:	4b0d      	ldr	r3, [pc, #52]	; (7020 <LoRaMacHandleIrqEvents+0xa4>)
    6fea:	4798      	blx	r3
        }
        if( events.Events.RxTimeout == 1 )
    6fec:	1d3b      	adds	r3, r7, #4
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	2201      	movs	r2, #1
    6ff2:	4013      	ands	r3, r2
    6ff4:	b2db      	uxtb	r3, r3
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d001      	beq.n	6ffe <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
    6ffa:	4b0a      	ldr	r3, [pc, #40]	; (7024 <LoRaMacHandleIrqEvents+0xa8>)
    6ffc:	4798      	blx	r3
        }
    }
}
    6ffe:	46c0      	nop			; (mov r8, r8)
    7000:	46bd      	mov	sp, r7
    7002:	b002      	add	sp, #8
    7004:	bd80      	pop	{r7, pc}
    7006:	46c0      	nop			; (mov r8, r8)
    7008:	000013b9 	.word	0x000013b9
    700c:	20001394 	.word	0x20001394
    7010:	000013d7 	.word	0x000013d7
    7014:	00005f15 	.word	0x00005f15
    7018:	00006165 	.word	0x00006165
    701c:	00006d41 	.word	0x00006d41
    7020:	00006f4d 	.word	0x00006f4d
    7024:	00006f65 	.word	0x00006f65

00007028 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
    7028:	b590      	push	{r4, r7, lr}
    702a:	b083      	sub	sp, #12
    702c:	af00      	add	r7, sp, #0
    bool noTx = false;
    702e:	1dfb      	adds	r3, r7, #7
    7030:	2200      	movs	r2, #0
    7032:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
    7034:	4bcf      	ldr	r3, [pc, #828]	; (7374 <LoRaMacProcess+0x34c>)
    7036:	4798      	blx	r3
    LoRaMacClassBProcess( );
    7038:	4bcf      	ldr	r3, [pc, #828]	; (7378 <LoRaMacProcess+0x350>)
    703a:	4798      	blx	r3

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
    703c:	4bcf      	ldr	r3, [pc, #828]	; (737c <LoRaMacProcess+0x354>)
    703e:	4ad0      	ldr	r2, [pc, #832]	; (7380 <LoRaMacProcess+0x358>)
    7040:	5c9b      	ldrb	r3, [r3, r2]
    7042:	2210      	movs	r2, #16
    7044:	4013      	ands	r3, r2
    7046:	b2db      	uxtb	r3, r3
    7048:	2b00      	cmp	r3, #0
    704a:	d100      	bne.n	704e <LoRaMacProcess+0x26>
    704c:	e0f8      	b.n	7240 <LoRaMacProcess+0x218>
    {
        // A error occurs during receiving
        if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
    704e:	4acb      	ldr	r2, [pc, #812]	; (737c <LoRaMacProcess+0x354>)
    7050:	23d7      	movs	r3, #215	; 0xd7
    7052:	009b      	lsls	r3, r3, #2
    7054:	58d3      	ldr	r3, [r2, r3]
    7056:	2280      	movs	r2, #128	; 0x80
    7058:	4013      	ands	r3, r2
    705a:	d015      	beq.n	7088 <LoRaMacProcess+0x60>
        {
            MacCtx.MacState &= ~LORAMAC_RX_ABORT;
    705c:	4ac7      	ldr	r2, [pc, #796]	; (737c <LoRaMacProcess+0x354>)
    705e:	23d7      	movs	r3, #215	; 0xd7
    7060:	009b      	lsls	r3, r3, #2
    7062:	58d3      	ldr	r3, [r2, r3]
    7064:	2280      	movs	r2, #128	; 0x80
    7066:	4393      	bics	r3, r2
    7068:	0019      	movs	r1, r3
    706a:	4ac4      	ldr	r2, [pc, #784]	; (737c <LoRaMacProcess+0x354>)
    706c:	23d7      	movs	r3, #215	; 0xd7
    706e:	009b      	lsls	r3, r3, #2
    7070:	50d1      	str	r1, [r2, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    7072:	4ac2      	ldr	r2, [pc, #776]	; (737c <LoRaMacProcess+0x354>)
    7074:	23d7      	movs	r3, #215	; 0xd7
    7076:	009b      	lsls	r3, r3, #2
    7078:	58d3      	ldr	r3, [r2, r3]
    707a:	2202      	movs	r2, #2
    707c:	4393      	bics	r3, r2
    707e:	0019      	movs	r1, r3
    7080:	4abe      	ldr	r2, [pc, #760]	; (737c <LoRaMacProcess+0x354>)
    7082:	23d7      	movs	r3, #215	; 0xd7
    7084:	009b      	lsls	r3, r3, #2
    7086:	50d1      	str	r1, [r2, r3]
        }

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
    7088:	4bbe      	ldr	r3, [pc, #760]	; (7384 <LoRaMacProcess+0x35c>)
    708a:	4798      	blx	r3
    708c:	1e03      	subs	r3, r0, #0
    708e:	d053      	beq.n	7138 <LoRaMacProcess+0x110>
        {
            // Get a status of any request and check if we have a TX timeout
            MacCtx.MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
    7090:	4bbd      	ldr	r3, [pc, #756]	; (7388 <LoRaMacProcess+0x360>)
    7092:	4798      	blx	r3
    7094:	0003      	movs	r3, r0
    7096:	0019      	movs	r1, r3
    7098:	4bb8      	ldr	r3, [pc, #736]	; (737c <LoRaMacProcess+0x354>)
    709a:	4abc      	ldr	r2, [pc, #752]	; (738c <LoRaMacProcess+0x364>)
    709c:	5499      	strb	r1, [r3, r2]

            if( ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
    709e:	4bb7      	ldr	r3, [pc, #732]	; (737c <LoRaMacProcess+0x354>)
    70a0:	4abb      	ldr	r2, [pc, #748]	; (7390 <LoRaMacProcess+0x368>)
    70a2:	5c9b      	ldrb	r3, [r3, r2]
    70a4:	2b02      	cmp	r3, #2
    70a6:	d004      	beq.n	70b2 <LoRaMacProcess+0x8a>
                ( MacCtx.MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
    70a8:	4bb4      	ldr	r3, [pc, #720]	; (737c <LoRaMacProcess+0x354>)
    70aa:	4ab8      	ldr	r2, [pc, #736]	; (738c <LoRaMacProcess+0x364>)
    70ac:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
    70ae:	2b02      	cmp	r3, #2
    70b0:	d11f      	bne.n	70f2 <LoRaMacProcess+0xca>
            {
                // Stop transmit cycle due to tx timeout.
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    70b2:	4ab2      	ldr	r2, [pc, #712]	; (737c <LoRaMacProcess+0x354>)
    70b4:	23d7      	movs	r3, #215	; 0xd7
    70b6:	009b      	lsls	r3, r3, #2
    70b8:	58d3      	ldr	r3, [r2, r3]
    70ba:	2202      	movs	r2, #2
    70bc:	4393      	bics	r3, r2
    70be:	0019      	movs	r1, r3
    70c0:	4aae      	ldr	r2, [pc, #696]	; (737c <LoRaMacProcess+0x354>)
    70c2:	23d7      	movs	r3, #215	; 0xd7
    70c4:	009b      	lsls	r3, r3, #2
    70c6:	50d1      	str	r1, [r2, r3]
                MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    70c8:	4bac      	ldr	r3, [pc, #688]	; (737c <LoRaMacProcess+0x354>)
    70ca:	4ab2      	ldr	r2, [pc, #712]	; (7394 <LoRaMacProcess+0x36c>)
    70cc:	589a      	ldr	r2, [r3, r2]
    70ce:	2388      	movs	r3, #136	; 0x88
    70d0:	005b      	lsls	r3, r3, #1
    70d2:	5cd1      	ldrb	r1, [r2, r3]
    70d4:	4ba9      	ldr	r3, [pc, #676]	; (737c <LoRaMacProcess+0x354>)
    70d6:	4ab0      	ldr	r2, [pc, #704]	; (7398 <LoRaMacProcess+0x370>)
    70d8:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsConfirm.AckReceived = false;
    70da:	4aa8      	ldr	r2, [pc, #672]	; (737c <LoRaMacProcess+0x354>)
    70dc:	2385      	movs	r3, #133	; 0x85
    70de:	00db      	lsls	r3, r3, #3
    70e0:	2100      	movs	r1, #0
    70e2:	54d1      	strb	r1, [r2, r3]
                MacCtx.McpsConfirm.TxTimeOnAir = 0;
    70e4:	4ba5      	ldr	r3, [pc, #660]	; (737c <LoRaMacProcess+0x354>)
    70e6:	4aad      	ldr	r2, [pc, #692]	; (739c <LoRaMacProcess+0x374>)
    70e8:	2100      	movs	r1, #0
    70ea:	5099      	str	r1, [r3, r2]
                noTx = true;
    70ec:	1dfb      	adds	r3, r7, #7
    70ee:	2201      	movs	r2, #1
    70f0:	701a      	strb	r2, [r3, #0]
            }

            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    70f2:	200b      	movs	r0, #11
    70f4:	4baa      	ldr	r3, [pc, #680]	; (73a0 <LoRaMacProcess+0x378>)
    70f6:	4798      	blx	r3
    70f8:	1e03      	subs	r3, r0, #0
    70fa:	d01d      	beq.n	7138 <LoRaMacProcess+0x110>
                ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
    70fc:	4b9f      	ldr	r3, [pc, #636]	; (737c <LoRaMacProcess+0x354>)
    70fe:	4aa0      	ldr	r2, [pc, #640]	; (7380 <LoRaMacProcess+0x358>)
    7100:	5c9b      	ldrb	r3, [r3, r2]
    7102:	2201      	movs	r2, #1
    7104:	4013      	ands	r3, r2
    7106:	b2db      	uxtb	r3, r3
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    7108:	2b00      	cmp	r3, #0
    710a:	d115      	bne.n	7138 <LoRaMacProcess+0x110>
            {
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    710c:	4b9b      	ldr	r3, [pc, #620]	; (737c <LoRaMacProcess+0x354>)
    710e:	4a9c      	ldr	r2, [pc, #624]	; (7380 <LoRaMacProcess+0x358>)
    7110:	5c9b      	ldrb	r3, [r3, r2]
    7112:	2204      	movs	r2, #4
    7114:	4013      	ands	r3, r2
    7116:	b2db      	uxtb	r3, r3
    7118:	2b00      	cmp	r3, #0
    711a:	d00d      	beq.n	7138 <LoRaMacProcess+0x110>
                {
                    noTx = true;
    711c:	1dfb      	adds	r3, r7, #7
    711e:	2201      	movs	r2, #1
    7120:	701a      	strb	r2, [r3, #0]
                    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    7122:	4a96      	ldr	r2, [pc, #600]	; (737c <LoRaMacProcess+0x354>)
    7124:	23d7      	movs	r3, #215	; 0xd7
    7126:	009b      	lsls	r3, r3, #2
    7128:	58d3      	ldr	r3, [r2, r3]
    712a:	2202      	movs	r2, #2
    712c:	4393      	bics	r3, r2
    712e:	0019      	movs	r1, r3
    7130:	4a92      	ldr	r2, [pc, #584]	; (737c <LoRaMacProcess+0x354>)
    7132:	23d7      	movs	r3, #215	; 0xd7
    7134:	009b      	lsls	r3, r3, #2
    7136:	50d1      	str	r1, [r2, r3]
                }
            }
        }

        if( noTx == false )
    7138:	1dfb      	adds	r3, r7, #7
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	2201      	movs	r2, #1
    713e:	4053      	eors	r3, r2
    7140:	b2db      	uxtb	r3, r3
    7142:	2b00      	cmp	r3, #0
    7144:	d100      	bne.n	7148 <LoRaMacProcess+0x120>
    7146:	e07b      	b.n	7240 <LoRaMacProcess+0x218>
        {
            // Handle join request
            if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
    7148:	4b8c      	ldr	r3, [pc, #560]	; (737c <LoRaMacProcess+0x354>)
    714a:	4a8d      	ldr	r2, [pc, #564]	; (7380 <LoRaMacProcess+0x358>)
    714c:	5c9b      	ldrb	r3, [r3, r2]
    714e:	2204      	movs	r2, #4
    7150:	4013      	ands	r3, r2
    7152:	b2db      	uxtb	r3, r3
    7154:	2b00      	cmp	r3, #0
    7156:	d01d      	beq.n	7194 <LoRaMacProcess+0x16c>
    7158:	2000      	movs	r0, #0
    715a:	4b91      	ldr	r3, [pc, #580]	; (73a0 <LoRaMacProcess+0x378>)
    715c:	4798      	blx	r3
    715e:	1e03      	subs	r3, r0, #0
    7160:	d018      	beq.n	7194 <LoRaMacProcess+0x16c>
            {
                if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
    7162:	2000      	movs	r0, #0
    7164:	4b8f      	ldr	r3, [pc, #572]	; (73a4 <LoRaMacProcess+0x37c>)
    7166:	4798      	blx	r3
    7168:	1e03      	subs	r3, r0, #0
    716a:	d108      	bne.n	717e <LoRaMacProcess+0x156>
                {// Node joined successfully
                    LoRaMacResetFCnts( );
    716c:	4b8e      	ldr	r3, [pc, #568]	; (73a8 <LoRaMacProcess+0x380>)
    716e:	4798      	blx	r3
                    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    7170:	4b82      	ldr	r3, [pc, #520]	; (737c <LoRaMacProcess+0x354>)
    7172:	4a88      	ldr	r2, [pc, #544]	; (7394 <LoRaMacProcess+0x36c>)
    7174:	589a      	ldr	r2, [r3, r2]
    7176:	2388      	movs	r3, #136	; 0x88
    7178:	005b      	lsls	r3, r3, #1
    717a:	2100      	movs	r1, #0
    717c:	54d1      	strb	r1, [r2, r3]
                }
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    717e:	4a7f      	ldr	r2, [pc, #508]	; (737c <LoRaMacProcess+0x354>)
    7180:	23d7      	movs	r3, #215	; 0xd7
    7182:	009b      	lsls	r3, r3, #2
    7184:	58d3      	ldr	r3, [r2, r3]
    7186:	2202      	movs	r2, #2
    7188:	4393      	bics	r3, r2
    718a:	0019      	movs	r1, r3
    718c:	4a7b      	ldr	r2, [pc, #492]	; (737c <LoRaMacProcess+0x354>)
    718e:	23d7      	movs	r3, #215	; 0xd7
    7190:	009b      	lsls	r3, r3, #2
    7192:	50d1      	str	r1, [r2, r3]
            }

            // Handle MCPS uplinks
            if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    7194:	4b79      	ldr	r3, [pc, #484]	; (737c <LoRaMacProcess+0x354>)
    7196:	4a7a      	ldr	r2, [pc, #488]	; (7380 <LoRaMacProcess+0x358>)
    7198:	5c9b      	ldrb	r3, [r3, r2]
    719a:	2201      	movs	r2, #1
    719c:	4013      	ands	r3, r2
    719e:	b2db      	uxtb	r3, r3
    71a0:	2b00      	cmp	r3, #0
    71a2:	d04d      	beq.n	7240 <LoRaMacProcess+0x218>
            {
                bool stopRetransmission = false;
    71a4:	1dbb      	adds	r3, r7, #6
    71a6:	2200      	movs	r2, #0
    71a8:	701a      	strb	r2, [r3, #0]
                bool waitForRetransmission = false;
    71aa:	1d7b      	adds	r3, r7, #5
    71ac:	2200      	movs	r2, #0
    71ae:	701a      	strb	r2, [r3, #0]

                if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
    71b0:	4b72      	ldr	r3, [pc, #456]	; (737c <LoRaMacProcess+0x354>)
    71b2:	4a7e      	ldr	r2, [pc, #504]	; (73ac <LoRaMacProcess+0x384>)
    71b4:	5c9b      	ldrb	r3, [r3, r2]
    71b6:	2b00      	cmp	r3, #0
    71b8:	d004      	beq.n	71c4 <LoRaMacProcess+0x19c>
                    ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
    71ba:	4b70      	ldr	r3, [pc, #448]	; (737c <LoRaMacProcess+0x354>)
    71bc:	4a7b      	ldr	r2, [pc, #492]	; (73ac <LoRaMacProcess+0x384>)
    71be:	5c9b      	ldrb	r3, [r3, r2]
                if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
    71c0:	2b03      	cmp	r3, #3
    71c2:	d105      	bne.n	71d0 <LoRaMacProcess+0x1a8>
                {
                    stopRetransmission = CheckRetransUnconfirmedUplink( );
    71c4:	1dbc      	adds	r4, r7, #6
    71c6:	4b7a      	ldr	r3, [pc, #488]	; (73b0 <LoRaMacProcess+0x388>)
    71c8:	4798      	blx	r3
    71ca:	0003      	movs	r3, r0
    71cc:	7023      	strb	r3, [r4, #0]
    71ce:	e014      	b.n	71fa <LoRaMacProcess+0x1d2>
                }
                else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
    71d0:	4b6a      	ldr	r3, [pc, #424]	; (737c <LoRaMacProcess+0x354>)
    71d2:	4a76      	ldr	r2, [pc, #472]	; (73ac <LoRaMacProcess+0x384>)
    71d4:	5c9b      	ldrb	r3, [r3, r2]
    71d6:	2b01      	cmp	r3, #1
    71d8:	d10f      	bne.n	71fa <LoRaMacProcess+0x1d2>
                {
                    if( MacCtx.NvmCtx->AckTimeoutRetry == true )
    71da:	4b68      	ldr	r3, [pc, #416]	; (737c <LoRaMacProcess+0x354>)
    71dc:	4a6d      	ldr	r2, [pc, #436]	; (7394 <LoRaMacProcess+0x36c>)
    71de:	589b      	ldr	r3, [r3, r2]
    71e0:	4a74      	ldr	r2, [pc, #464]	; (73b4 <LoRaMacProcess+0x38c>)
    71e2:	5c9b      	ldrb	r3, [r3, r2]
    71e4:	2b00      	cmp	r3, #0
    71e6:	d005      	beq.n	71f4 <LoRaMacProcess+0x1cc>
                    {
                        stopRetransmission = CheckRetransConfirmedUplink( );
    71e8:	1dbc      	adds	r4, r7, #6
    71ea:	4b73      	ldr	r3, [pc, #460]	; (73b8 <LoRaMacProcess+0x390>)
    71ec:	4798      	blx	r3
    71ee:	0003      	movs	r3, r0
    71f0:	7023      	strb	r3, [r4, #0]
    71f2:	e002      	b.n	71fa <LoRaMacProcess+0x1d2>
                    }
                    else
                    {
                        waitForRetransmission = true;
    71f4:	1d7b      	adds	r3, r7, #5
    71f6:	2201      	movs	r2, #1
    71f8:	701a      	strb	r2, [r3, #0]
                    }
                }

                if( stopRetransmission == true )
    71fa:	1dbb      	adds	r3, r7, #6
    71fc:	781b      	ldrb	r3, [r3, #0]
    71fe:	2b00      	cmp	r3, #0
    7200:	d009      	beq.n	7216 <LoRaMacProcess+0x1ee>
                {// Stop retransmission
                    StopRetransmission( );
    7202:	4b6e      	ldr	r3, [pc, #440]	; (73bc <LoRaMacProcess+0x394>)
    7204:	4798      	blx	r3

                    if( IsReJoin0Required( ) == true )
    7206:	4b6e      	ldr	r3, [pc, #440]	; (73c0 <LoRaMacProcess+0x398>)
    7208:	4798      	blx	r3
    720a:	1e03      	subs	r3, r0, #0
    720c:	d018      	beq.n	7240 <LoRaMacProcess+0x218>
                    {
                        SendReJoinReq( REJOIN_REQ_0 );
    720e:	2000      	movs	r0, #0
    7210:	4b6c      	ldr	r3, [pc, #432]	; (73c4 <LoRaMacProcess+0x39c>)
    7212:	4798      	blx	r3
    7214:	e014      	b.n	7240 <LoRaMacProcess+0x218>
                    }
                }
                else if( waitForRetransmission == false )
    7216:	1d7b      	adds	r3, r7, #5
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	2201      	movs	r2, #1
    721c:	4053      	eors	r3, r2
    721e:	b2db      	uxtb	r3, r3
    7220:	2b00      	cmp	r3, #0
    7222:	d00d      	beq.n	7240 <LoRaMacProcess+0x218>
                {// Arrange further retransmission
                    MacCtx.MacFlags.Bits.MacDone = 0;
    7224:	4b55      	ldr	r3, [pc, #340]	; (737c <LoRaMacProcess+0x354>)
    7226:	4a56      	ldr	r2, [pc, #344]	; (7380 <LoRaMacProcess+0x358>)
    7228:	5c99      	ldrb	r1, [r3, r2]
    722a:	2010      	movs	r0, #16
    722c:	4381      	bics	r1, r0
    722e:	5499      	strb	r1, [r3, r2]
                    // Reset the state of the AckTimeout
                    MacCtx.NvmCtx->AckTimeoutRetry = false;
    7230:	4b52      	ldr	r3, [pc, #328]	; (737c <LoRaMacProcess+0x354>)
    7232:	4a58      	ldr	r2, [pc, #352]	; (7394 <LoRaMacProcess+0x36c>)
    7234:	589b      	ldr	r3, [r3, r2]
    7236:	4a5f      	ldr	r2, [pc, #380]	; (73b4 <LoRaMacProcess+0x38c>)
    7238:	2100      	movs	r1, #0
    723a:	5499      	strb	r1, [r3, r2]
                    // Sends the same frame again
                    OnTxDelayedTimerEvent( );
    723c:	4b62      	ldr	r3, [pc, #392]	; (73c8 <LoRaMacProcess+0x3a0>)
    723e:	4798      	blx	r3
            }
        }
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
    7240:	4a4e      	ldr	r2, [pc, #312]	; (737c <LoRaMacProcess+0x354>)
    7242:	23d7      	movs	r3, #215	; 0xd7
    7244:	009b      	lsls	r3, r3, #2
    7246:	58d3      	ldr	r3, [r2, r3]
    7248:	2b00      	cmp	r3, #0
    724a:	d16a      	bne.n	7322 <LoRaMacProcess+0x2fa>
    {
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    724c:	4b4b      	ldr	r3, [pc, #300]	; (737c <LoRaMacProcess+0x354>)
    724e:	4a4c      	ldr	r2, [pc, #304]	; (7380 <LoRaMacProcess+0x358>)
    7250:	5c9b      	ldrb	r3, [r3, r2]
    7252:	2201      	movs	r2, #1
    7254:	4013      	ands	r3, r2
    7256:	b2db      	uxtb	r3, r3
    7258:	2b00      	cmp	r3, #0
    725a:	d00d      	beq.n	7278 <LoRaMacProcess+0x250>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
    725c:	4b47      	ldr	r3, [pc, #284]	; (737c <LoRaMacProcess+0x354>)
    725e:	4a48      	ldr	r2, [pc, #288]	; (7380 <LoRaMacProcess+0x358>)
    7260:	5c99      	ldrb	r1, [r3, r2]
    7262:	2001      	movs	r0, #1
    7264:	4381      	bics	r1, r0
    7266:	5499      	strb	r1, [r3, r2]
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
    7268:	4a44      	ldr	r2, [pc, #272]	; (737c <LoRaMacProcess+0x354>)
    726a:	23d8      	movs	r3, #216	; 0xd8
    726c:	009b      	lsls	r3, r3, #2
    726e:	58d3      	ldr	r3, [r2, r3]
    7270:	681b      	ldr	r3, [r3, #0]
    7272:	4a56      	ldr	r2, [pc, #344]	; (73cc <LoRaMacProcess+0x3a4>)
    7274:	0010      	movs	r0, r2
    7276:	4798      	blx	r3
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    7278:	4b40      	ldr	r3, [pc, #256]	; (737c <LoRaMacProcess+0x354>)
    727a:	4a41      	ldr	r2, [pc, #260]	; (7380 <LoRaMacProcess+0x358>)
    727c:	5c9b      	ldrb	r3, [r3, r2]
    727e:	2204      	movs	r2, #4
    7280:	4013      	ands	r3, r2
    7282:	b2db      	uxtb	r3, r3
    7284:	2b00      	cmp	r3, #0
    7286:	d013      	beq.n	72b0 <LoRaMacProcess+0x288>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    7288:	4b3c      	ldr	r3, [pc, #240]	; (737c <LoRaMacProcess+0x354>)
    728a:	4a3d      	ldr	r2, [pc, #244]	; (7380 <LoRaMacProcess+0x358>)
    728c:	5c99      	ldrb	r1, [r3, r2]
    728e:	2004      	movs	r0, #4
    7290:	4381      	bics	r1, r0
    7292:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
    7294:	4b4e      	ldr	r3, [pc, #312]	; (73d0 <LoRaMacProcess+0x3a8>)
    7296:	0018      	movs	r0, r3
    7298:	4b4e      	ldr	r3, [pc, #312]	; (73d4 <LoRaMacProcess+0x3ac>)
    729a:	4798      	blx	r3
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
    729c:	4b4e      	ldr	r3, [pc, #312]	; (73d8 <LoRaMacProcess+0x3b0>)
    729e:	4798      	blx	r3
    72a0:	1e03      	subs	r3, r0, #0
    72a2:	d005      	beq.n	72b0 <LoRaMacProcess+0x288>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
    72a4:	4b35      	ldr	r3, [pc, #212]	; (737c <LoRaMacProcess+0x354>)
    72a6:	4a36      	ldr	r2, [pc, #216]	; (7380 <LoRaMacProcess+0x358>)
    72a8:	5c99      	ldrb	r1, [r3, r2]
    72aa:	2004      	movs	r0, #4
    72ac:	4301      	orrs	r1, r0
    72ae:	5499      	strb	r1, [r3, r2]
            }
        }

        // Handle MLME indication
        if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
    72b0:	4b32      	ldr	r3, [pc, #200]	; (737c <LoRaMacProcess+0x354>)
    72b2:	4a33      	ldr	r2, [pc, #204]	; (7380 <LoRaMacProcess+0x358>)
    72b4:	5c9b      	ldrb	r3, [r3, r2]
    72b6:	2208      	movs	r2, #8
    72b8:	4013      	ands	r3, r2
    72ba:	b2db      	uxtb	r3, r3
    72bc:	2b00      	cmp	r3, #0
    72be:	d00d      	beq.n	72dc <LoRaMacProcess+0x2b4>
        {
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    72c0:	4a2e      	ldr	r2, [pc, #184]	; (737c <LoRaMacProcess+0x354>)
    72c2:	23d8      	movs	r3, #216	; 0xd8
    72c4:	009b      	lsls	r3, r3, #2
    72c6:	58d3      	ldr	r3, [r2, r3]
    72c8:	68db      	ldr	r3, [r3, #12]
    72ca:	4a44      	ldr	r2, [pc, #272]	; (73dc <LoRaMacProcess+0x3b4>)
    72cc:	0010      	movs	r0, r2
    72ce:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
    72d0:	4b2a      	ldr	r3, [pc, #168]	; (737c <LoRaMacProcess+0x354>)
    72d2:	4a2b      	ldr	r2, [pc, #172]	; (7380 <LoRaMacProcess+0x358>)
    72d4:	5c99      	ldrb	r1, [r3, r2]
    72d6:	2008      	movs	r0, #8
    72d8:	4381      	bics	r1, r0
    72da:	5499      	strb	r1, [r3, r2]
        }

        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
    72dc:	1d3b      	adds	r3, r7, #4
    72de:	2200      	movs	r2, #0
    72e0:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
    72e2:	1d3b      	adds	r3, r7, #4
    72e4:	0018      	movs	r0, r3
    72e6:	4b3e      	ldr	r3, [pc, #248]	; (73e0 <LoRaMacProcess+0x3b8>)
    72e8:	4798      	blx	r3
        if( isStickyMacCommandPending == true )
    72ea:	1d3b      	adds	r3, r7, #4
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d00f      	beq.n	7312 <LoRaMacProcess+0x2ea>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
    72f2:	4b3c      	ldr	r3, [pc, #240]	; (73e4 <LoRaMacProcess+0x3bc>)
    72f4:	4798      	blx	r3
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    72f6:	4a21      	ldr	r2, [pc, #132]	; (737c <LoRaMacProcess+0x354>)
    72f8:	23d8      	movs	r3, #216	; 0xd8
    72fa:	009b      	lsls	r3, r3, #2
    72fc:	58d3      	ldr	r3, [r2, r3]
    72fe:	68db      	ldr	r3, [r3, #12]
    7300:	4a36      	ldr	r2, [pc, #216]	; (73dc <LoRaMacProcess+0x3b4>)
    7302:	0010      	movs	r0, r2
    7304:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
    7306:	4b1d      	ldr	r3, [pc, #116]	; (737c <LoRaMacProcess+0x354>)
    7308:	4a1d      	ldr	r2, [pc, #116]	; (7380 <LoRaMacProcess+0x358>)
    730a:	5c99      	ldrb	r1, [r3, r2]
    730c:	2008      	movs	r0, #8
    730e:	4381      	bics	r1, r0
    7310:	5499      	strb	r1, [r3, r2]
        }

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
    7312:	4b1a      	ldr	r3, [pc, #104]	; (737c <LoRaMacProcess+0x354>)
    7314:	4a1a      	ldr	r2, [pc, #104]	; (7380 <LoRaMacProcess+0x358>)
    7316:	5c99      	ldrb	r1, [r3, r2]
    7318:	2010      	movs	r0, #16
    731a:	4381      	bics	r1, r0
    731c:	5499      	strb	r1, [r3, r2]

        LoRaMacClassBResumeBeaconing( );
    731e:	4b32      	ldr	r3, [pc, #200]	; (73e8 <LoRaMacProcess+0x3c0>)
    7320:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    7322:	4b16      	ldr	r3, [pc, #88]	; (737c <LoRaMacProcess+0x354>)
    7324:	4a16      	ldr	r2, [pc, #88]	; (7380 <LoRaMacProcess+0x358>)
    7326:	5c9b      	ldrb	r3, [r3, r2]
    7328:	2202      	movs	r2, #2
    732a:	4013      	ands	r3, r2
    732c:	b2db      	uxtb	r3, r3
    732e:	2b00      	cmp	r3, #0
    7330:	d01c      	beq.n	736c <LoRaMacProcess+0x344>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
    7332:	4b12      	ldr	r3, [pc, #72]	; (737c <LoRaMacProcess+0x354>)
    7334:	4a12      	ldr	r2, [pc, #72]	; (7380 <LoRaMacProcess+0x358>)
    7336:	5c99      	ldrb	r1, [r3, r2]
    7338:	2002      	movs	r0, #2
    733a:	4381      	bics	r1, r0
    733c:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    733e:	4b0f      	ldr	r3, [pc, #60]	; (737c <LoRaMacProcess+0x354>)
    7340:	4a14      	ldr	r2, [pc, #80]	; (7394 <LoRaMacProcess+0x36c>)
    7342:	589b      	ldr	r3, [r3, r2]
    7344:	22c8      	movs	r2, #200	; 0xc8
    7346:	5c9b      	ldrb	r3, [r3, r2]
    7348:	2b02      	cmp	r3, #2
    734a:	d107      	bne.n	735c <LoRaMacProcess+0x334>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
    734c:	4a0b      	ldr	r2, [pc, #44]	; (737c <LoRaMacProcess+0x354>)
    734e:	23d7      	movs	r3, #215	; 0xd7
    7350:	009b      	lsls	r3, r3, #2
    7352:	58d3      	ldr	r3, [r2, r3]
    7354:	2b00      	cmp	r3, #0
    7356:	d101      	bne.n	735c <LoRaMacProcess+0x334>
            {
                OpenContinuousRx2Window( );
    7358:	4b24      	ldr	r3, [pc, #144]	; (73ec <LoRaMacProcess+0x3c4>)
    735a:	4798      	blx	r3
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
    735c:	4a07      	ldr	r2, [pc, #28]	; (737c <LoRaMacProcess+0x354>)
    735e:	23d8      	movs	r3, #216	; 0xd8
    7360:	009b      	lsls	r3, r3, #2
    7362:	58d3      	ldr	r3, [r2, r3]
    7364:	685b      	ldr	r3, [r3, #4]
    7366:	4a22      	ldr	r2, [pc, #136]	; (73f0 <LoRaMacProcess+0x3c8>)
    7368:	0010      	movs	r0, r2
    736a:	4798      	blx	r3
    }
}
    736c:	46c0      	nop			; (mov r8, r8)
    736e:	46bd      	mov	sp, r7
    7370:	b003      	add	sp, #12
    7372:	bd90      	pop	{r4, r7, pc}
    7374:	00006f7d 	.word	0x00006f7d
    7378:	0000c81d 	.word	0x0000c81d
    737c:	20000c8c 	.word	0x20000c8c
    7380:	00000465 	.word	0x00000465
    7384:	0000a219 	.word	0x0000a219
    7388:	0000d1f5 	.word	0x0000d1f5
    738c:	00000439 	.word	0x00000439
    7390:	00000425 	.word	0x00000425
    7394:	000004c4 	.word	0x000004c4
    7398:	00000429 	.word	0x00000429
    739c:	0000042c 	.word	0x0000042c
    73a0:	0000d209 	.word	0x0000d209
    73a4:	0000d13d 	.word	0x0000d13d
    73a8:	0000f239 	.word	0x0000f239
    73ac:	00000424 	.word	0x00000424
    73b0:	00009f15 	.word	0x00009f15
    73b4:	00000216 	.word	0x00000216
    73b8:	00009f81 	.word	0x00009f81
    73bc:	00009fd9 	.word	0x00009fd9
    73c0:	00009609 	.word	0x00009609
    73c4:	00008cad 	.word	0x00008cad
    73c8:	000073f5 	.word	0x000073f5
    73cc:	200010b0 	.word	0x200010b0
    73d0:	200010c4 	.word	0x200010c4
    73d4:	0000d241 	.word	0x0000d241
    73d8:	0000d315 	.word	0x0000d315
    73dc:	200010d8 	.word	0x200010d8
    73e0:	0000ce45 	.word	0x0000ce45
    73e4:	00007a05 	.word	0x00007a05
    73e8:	0000c763 	.word	0x0000c763
    73ec:	0000966d 	.word	0x0000966d
    73f0:	20001094 	.word	0x20001094

000073f4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void )
{
    73f4:	b580      	push	{r7, lr}
    73f6:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.TxDelayedTimer );
    73f8:	4b1a      	ldr	r3, [pc, #104]	; (7464 <OnTxDelayedTimerEvent+0x70>)
    73fa:	0018      	movs	r0, r3
    73fc:	4b1a      	ldr	r3, [pc, #104]	; (7468 <OnTxDelayedTimerEvent+0x74>)
    73fe:	4798      	blx	r3
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
    7400:	4a1a      	ldr	r2, [pc, #104]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7402:	23d7      	movs	r3, #215	; 0xd7
    7404:	009b      	lsls	r3, r3, #2
    7406:	58d3      	ldr	r3, [r2, r3]
    7408:	2220      	movs	r2, #32
    740a:	4393      	bics	r3, r2
    740c:	0019      	movs	r1, r3
    740e:	4a17      	ldr	r2, [pc, #92]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7410:	23d7      	movs	r3, #215	; 0xd7
    7412:	009b      	lsls	r3, r3, #2
    7414:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
    7416:	2001      	movs	r0, #1
    7418:	4b15      	ldr	r3, [pc, #84]	; (7470 <OnTxDelayedTimerEvent+0x7c>)
    741a:	4798      	blx	r3
    741c:	1e03      	subs	r3, r0, #0
    741e:	d01d      	beq.n	745c <OnTxDelayedTimerEvent+0x68>
    7420:	2b0b      	cmp	r3, #11
    7422:	d01b      	beq.n	745c <OnTxDelayedTimerEvent+0x68>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    7424:	4b11      	ldr	r3, [pc, #68]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7426:	4a13      	ldr	r2, [pc, #76]	; (7474 <OnTxDelayedTimerEvent+0x80>)
    7428:	589b      	ldr	r3, [r3, r2]
    742a:	22d5      	movs	r2, #213	; 0xd5
    742c:	569b      	ldrsb	r3, [r3, r2]
    742e:	b2d9      	uxtb	r1, r3
    7430:	4b0e      	ldr	r3, [pc, #56]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7432:	4a11      	ldr	r2, [pc, #68]	; (7478 <OnTxDelayedTimerEvent+0x84>)
    7434:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    7436:	4b0d      	ldr	r3, [pc, #52]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7438:	4a0e      	ldr	r2, [pc, #56]	; (7474 <OnTxDelayedTimerEvent+0x80>)
    743a:	589a      	ldr	r2, [r3, r2]
    743c:	2388      	movs	r3, #136	; 0x88
    743e:	005b      	lsls	r3, r3, #1
    7440:	5cd1      	ldrb	r1, [r2, r3]
    7442:	4b0a      	ldr	r3, [pc, #40]	; (746c <OnTxDelayedTimerEvent+0x78>)
    7444:	4a0d      	ldr	r2, [pc, #52]	; (747c <OnTxDelayedTimerEvent+0x88>)
    7446:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
    7448:	4b08      	ldr	r3, [pc, #32]	; (746c <OnTxDelayedTimerEvent+0x78>)
    744a:	4a0d      	ldr	r2, [pc, #52]	; (7480 <OnTxDelayedTimerEvent+0x8c>)
    744c:	2109      	movs	r1, #9
    744e:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
    7450:	2009      	movs	r0, #9
    7452:	4b0c      	ldr	r3, [pc, #48]	; (7484 <OnTxDelayedTimerEvent+0x90>)
    7454:	4798      	blx	r3
            StopRetransmission( );
    7456:	4b0c      	ldr	r3, [pc, #48]	; (7488 <OnTxDelayedTimerEvent+0x94>)
    7458:	4798      	blx	r3
            break;
    745a:	e000      	b.n	745e <OnTxDelayedTimerEvent+0x6a>
            break;
    745c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    745e:	46c0      	nop			; (mov r8, r8)
    7460:	46bd      	mov	sp, r7
    7462:	bd80      	pop	{r7, pc}
    7464:	20001010 	.word	0x20001010
    7468:	00016fe5 	.word	0x00016fe5
    746c:	20000c8c 	.word	0x20000c8c
    7470:	00008f01 	.word	0x00008f01
    7474:	000004c4 	.word	0x000004c4
    7478:	00000426 	.word	0x00000426
    747c:	00000429 	.word	0x00000429
    7480:	00000425 	.word	0x00000425
    7484:	0000d18d 	.word	0x0000d18d
    7488:	00009fd9 	.word	0x00009fd9

0000748c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void )
{
    748c:	b580      	push	{r7, lr}
    748e:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.RxWindowTimer1 );
    7490:	4b2c      	ldr	r3, [pc, #176]	; (7544 <OnRxWindow1TimerEvent+0xb8>)
    7492:	0018      	movs	r0, r3
    7494:	4b2c      	ldr	r3, [pc, #176]	; (7548 <OnRxWindow1TimerEvent+0xbc>)
    7496:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_1;
    7498:	4b2c      	ldr	r3, [pc, #176]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    749a:	4a2d      	ldr	r2, [pc, #180]	; (7550 <OnRxWindow1TimerEvent+0xc4>)
    749c:	2100      	movs	r1, #0
    749e:	5499      	strb	r1, [r3, r2]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
    74a0:	4b2a      	ldr	r3, [pc, #168]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74a2:	4a2c      	ldr	r2, [pc, #176]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    74a4:	589a      	ldr	r2, [r3, r2]
    74a6:	2314      	movs	r3, #20
    74a8:	33ff      	adds	r3, #255	; 0xff
    74aa:	5cd1      	ldrb	r1, [r2, r3]
    74ac:	4a27      	ldr	r2, [pc, #156]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74ae:	23f2      	movs	r3, #242	; 0xf2
    74b0:	009b      	lsls	r3, r3, #2
    74b2:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
    74b4:	4b25      	ldr	r3, [pc, #148]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74b6:	4a27      	ldr	r2, [pc, #156]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    74b8:	589b      	ldr	r3, [r3, r2]
    74ba:	22f5      	movs	r2, #245	; 0xf5
    74bc:	5c9b      	ldrb	r3, [r3, r2]
    74be:	b259      	sxtb	r1, r3
    74c0:	4b22      	ldr	r3, [pc, #136]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74c2:	4a25      	ldr	r2, [pc, #148]	; (7558 <OnRxWindow1TimerEvent+0xcc>)
    74c4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    74c6:	4b21      	ldr	r3, [pc, #132]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74c8:	4a22      	ldr	r2, [pc, #136]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    74ca:	589a      	ldr	r2, [r3, r2]
    74cc:	2302      	movs	r3, #2
    74ce:	33ff      	adds	r3, #255	; 0xff
    74d0:	5cd1      	ldrb	r1, [r2, r3]
    74d2:	4a1e      	ldr	r2, [pc, #120]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74d4:	23f6      	movs	r3, #246	; 0xf6
    74d6:	009b      	lsls	r3, r3, #2
    74d8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    74da:	4b1c      	ldr	r3, [pc, #112]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74dc:	4a1d      	ldr	r2, [pc, #116]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    74de:	589a      	ldr	r2, [r3, r2]
    74e0:	2316      	movs	r3, #22
    74e2:	33ff      	adds	r3, #255	; 0xff
    74e4:	5cd1      	ldrb	r1, [r2, r3]
    74e6:	4b19      	ldr	r3, [pc, #100]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74e8:	4a1c      	ldr	r2, [pc, #112]	; (755c <OnRxWindow1TimerEvent+0xd0>)
    74ea:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
    74ec:	4b17      	ldr	r3, [pc, #92]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74ee:	4a1c      	ldr	r2, [pc, #112]	; (7560 <OnRxWindow1TimerEvent+0xd4>)
    74f0:	2100      	movs	r1, #0
    74f2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
    74f4:	4b15      	ldr	r3, [pc, #84]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74f6:	4a16      	ldr	r2, [pc, #88]	; (7550 <OnRxWindow1TimerEvent+0xc4>)
    74f8:	5c99      	ldrb	r1, [r3, r2]
    74fa:	4b14      	ldr	r3, [pc, #80]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    74fc:	4a19      	ldr	r2, [pc, #100]	; (7564 <OnRxWindow1TimerEvent+0xd8>)
    74fe:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    7500:	4b12      	ldr	r3, [pc, #72]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    7502:	4a14      	ldr	r2, [pc, #80]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    7504:	589b      	ldr	r3, [r3, r2]
    7506:	22c8      	movs	r2, #200	; 0xc8
    7508:	5c9b      	ldrb	r3, [r3, r2]
    750a:	2b02      	cmp	r3, #2
    750c:	d102      	bne.n	7514 <OnRxWindow1TimerEvent+0x88>
    {
        Radio.Standby( );
    750e:	4b16      	ldr	r3, [pc, #88]	; (7568 <OnRxWindow1TimerEvent+0xdc>)
    7510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7512:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    7514:	4b0d      	ldr	r3, [pc, #52]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    7516:	4a0f      	ldr	r2, [pc, #60]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    7518:	589b      	ldr	r3, [r3, r2]
    751a:	781b      	ldrb	r3, [r3, #0]
    751c:	4a13      	ldr	r2, [pc, #76]	; (756c <OnRxWindow1TimerEvent+0xe0>)
    751e:	4914      	ldr	r1, [pc, #80]	; (7570 <OnRxWindow1TimerEvent+0xe4>)
    7520:	0018      	movs	r0, r3
    7522:	4b14      	ldr	r3, [pc, #80]	; (7574 <OnRxWindow1TimerEvent+0xe8>)
    7524:	4798      	blx	r3
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    7526:	4b09      	ldr	r3, [pc, #36]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    7528:	4a0d      	ldr	r2, [pc, #52]	; (7560 <OnRxWindow1TimerEvent+0xd4>)
    752a:	5c98      	ldrb	r0, [r3, r2]
    752c:	4b07      	ldr	r3, [pc, #28]	; (754c <OnRxWindow1TimerEvent+0xc0>)
    752e:	4a09      	ldr	r2, [pc, #36]	; (7554 <OnRxWindow1TimerEvent+0xc8>)
    7530:	589b      	ldr	r3, [r3, r2]
    7532:	22e0      	movs	r2, #224	; 0xe0
    7534:	589b      	ldr	r3, [r3, r2]
    7536:	0019      	movs	r1, r3
    7538:	4b0f      	ldr	r3, [pc, #60]	; (7578 <OnRxWindow1TimerEvent+0xec>)
    753a:	4798      	blx	r3
}
    753c:	46c0      	nop			; (mov r8, r8)
    753e:	46bd      	mov	sp, r7
    7540:	bd80      	pop	{r7, pc}
    7542:	46c0      	nop			; (mov r8, r8)
    7544:	20001024 	.word	0x20001024
    7548:	00016fe5 	.word	0x00016fe5
    754c:	20000c8c 	.word	0x20000c8c
    7550:	00000464 	.word	0x00000464
    7554:	000004c4 	.word	0x000004c4
    7558:	000003cb 	.word	0x000003cb
    755c:	000003d9 	.word	0x000003d9
    7560:	000003da 	.word	0x000003da
    7564:	000003db 	.word	0x000003db
    7568:	0001f2a4 	.word	0x0001f2a4
    756c:	20001098 	.word	0x20001098
    7570:	20001054 	.word	0x20001054
    7574:	0001008d 	.word	0x0001008d
    7578:	00007721 	.word	0x00007721

0000757c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void )
{
    757c:	b580      	push	{r7, lr}
    757e:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.RxWindowTimer2 );
    7580:	4b2d      	ldr	r3, [pc, #180]	; (7638 <OnRxWindow2TimerEvent+0xbc>)
    7582:	0018      	movs	r0, r3
    7584:	4b2d      	ldr	r3, [pc, #180]	; (763c <OnRxWindow2TimerEvent+0xc0>)
    7586:	4798      	blx	r3

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
    7588:	4b2d      	ldr	r3, [pc, #180]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    758a:	4a2e      	ldr	r2, [pc, #184]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    758c:	589a      	ldr	r2, [r3, r2]
    758e:	2314      	movs	r3, #20
    7590:	33ff      	adds	r3, #255	; 0xff
    7592:	5cd1      	ldrb	r1, [r2, r3]
    7594:	4a2a      	ldr	r2, [pc, #168]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    7596:	23f7      	movs	r3, #247	; 0xf7
    7598:	009b      	lsls	r3, r3, #2
    759a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
    759c:	4b28      	ldr	r3, [pc, #160]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    759e:	4a29      	ldr	r2, [pc, #164]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    75a0:	589b      	ldr	r3, [r3, r2]
    75a2:	22f8      	movs	r2, #248	; 0xf8
    75a4:	5899      	ldr	r1, [r3, r2]
    75a6:	4a26      	ldr	r2, [pc, #152]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75a8:	23f8      	movs	r3, #248	; 0xf8
    75aa:	009b      	lsls	r3, r3, #2
    75ac:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    75ae:	4b24      	ldr	r3, [pc, #144]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75b0:	4a24      	ldr	r2, [pc, #144]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    75b2:	589a      	ldr	r2, [r3, r2]
    75b4:	2302      	movs	r3, #2
    75b6:	33ff      	adds	r3, #255	; 0xff
    75b8:	5cd1      	ldrb	r1, [r2, r3]
    75ba:	4a21      	ldr	r2, [pc, #132]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75bc:	23fb      	movs	r3, #251	; 0xfb
    75be:	009b      	lsls	r3, r3, #2
    75c0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    75c2:	4b1f      	ldr	r3, [pc, #124]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75c4:	4a1f      	ldr	r2, [pc, #124]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    75c6:	589a      	ldr	r2, [r3, r2]
    75c8:	2316      	movs	r3, #22
    75ca:	33ff      	adds	r3, #255	; 0xff
    75cc:	5cd1      	ldrb	r1, [r2, r3]
    75ce:	4b1c      	ldr	r3, [pc, #112]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75d0:	4a1d      	ldr	r2, [pc, #116]	; (7648 <OnRxWindow2TimerEvent+0xcc>)
    75d2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    75d4:	4b1a      	ldr	r3, [pc, #104]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75d6:	4a1d      	ldr	r2, [pc, #116]	; (764c <OnRxWindow2TimerEvent+0xd0>)
    75d8:	2101      	movs	r1, #1
    75da:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    75dc:	4b18      	ldr	r3, [pc, #96]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75de:	4a19      	ldr	r2, [pc, #100]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    75e0:	589b      	ldr	r3, [r3, r2]
    75e2:	22c8      	movs	r2, #200	; 0xc8
    75e4:	5c9b      	ldrb	r3, [r3, r2]
    75e6:	2b02      	cmp	r3, #2
    75e8:	d004      	beq.n	75f4 <OnRxWindow2TimerEvent+0x78>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
    75ea:	4b15      	ldr	r3, [pc, #84]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75ec:	4a18      	ldr	r2, [pc, #96]	; (7650 <OnRxWindow2TimerEvent+0xd4>)
    75ee:	2100      	movs	r1, #0
    75f0:	5499      	strb	r1, [r3, r2]
    75f2:	e003      	b.n	75fc <OnRxWindow2TimerEvent+0x80>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
    75f4:	4b12      	ldr	r3, [pc, #72]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75f6:	4a16      	ldr	r2, [pc, #88]	; (7650 <OnRxWindow2TimerEvent+0xd4>)
    75f8:	2101      	movs	r1, #1
    75fa:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
    75fc:	4b10      	ldr	r3, [pc, #64]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    75fe:	4a11      	ldr	r2, [pc, #68]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    7600:	589b      	ldr	r3, [r3, r2]
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	4a13      	ldr	r2, [pc, #76]	; (7654 <OnRxWindow2TimerEvent+0xd8>)
    7606:	4914      	ldr	r1, [pc, #80]	; (7658 <OnRxWindow2TimerEvent+0xdc>)
    7608:	0018      	movs	r0, r3
    760a:	4b14      	ldr	r3, [pc, #80]	; (765c <OnRxWindow2TimerEvent+0xe0>)
    760c:	4798      	blx	r3
    760e:	1e03      	subs	r3, r0, #0
    7610:	d00e      	beq.n	7630 <OnRxWindow2TimerEvent+0xb4>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    7612:	4b0b      	ldr	r3, [pc, #44]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    7614:	4a0e      	ldr	r2, [pc, #56]	; (7650 <OnRxWindow2TimerEvent+0xd4>)
    7616:	5c98      	ldrb	r0, [r3, r2]
    7618:	4b09      	ldr	r3, [pc, #36]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    761a:	4a0a      	ldr	r2, [pc, #40]	; (7644 <OnRxWindow2TimerEvent+0xc8>)
    761c:	589b      	ldr	r3, [r3, r2]
    761e:	22e0      	movs	r2, #224	; 0xe0
    7620:	589b      	ldr	r3, [r3, r2]
    7622:	0019      	movs	r1, r3
    7624:	4b0e      	ldr	r3, [pc, #56]	; (7660 <OnRxWindow2TimerEvent+0xe4>)
    7626:	4798      	blx	r3
        MacCtx.RxSlot = RX_SLOT_WIN_2;
    7628:	4b05      	ldr	r3, [pc, #20]	; (7640 <OnRxWindow2TimerEvent+0xc4>)
    762a:	4a0e      	ldr	r2, [pc, #56]	; (7664 <OnRxWindow2TimerEvent+0xe8>)
    762c:	2101      	movs	r1, #1
    762e:	5499      	strb	r1, [r3, r2]
    }
}
    7630:	46c0      	nop			; (mov r8, r8)
    7632:	46bd      	mov	sp, r7
    7634:	bd80      	pop	{r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	20001038 	.word	0x20001038
    763c:	00016fe5 	.word	0x00016fe5
    7640:	20000c8c 	.word	0x20000c8c
    7644:	000004c4 	.word	0x000004c4
    7648:	000003ed 	.word	0x000003ed
    764c:	000003ef 	.word	0x000003ef
    7650:	000003ee 	.word	0x000003ee
    7654:	20001098 	.word	0x20001098
    7658:	20001068 	.word	0x20001068
    765c:	0001008d 	.word	0x0001008d
    7660:	00007721 	.word	0x00007721
    7664:	00000464 	.word	0x00000464

00007668 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
    7668:	b590      	push	{r4, r7, lr}
    766a:	b083      	sub	sp, #12
    766c:	af00      	add	r7, sp, #0
    766e:	0004      	movs	r4, r0
    7670:	0008      	movs	r0, r1
    7672:	0011      	movs	r1, r2
    7674:	1dfb      	adds	r3, r7, #7
    7676:	1c22      	adds	r2, r4, #0
    7678:	701a      	strb	r2, [r3, #0]
    767a:	1dbb      	adds	r3, r7, #6
    767c:	1c02      	adds	r2, r0, #0
    767e:	701a      	strb	r2, [r3, #0]
    7680:	1d7b      	adds	r3, r7, #5
    7682:	1c0a      	adds	r2, r1, #0
    7684:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
    7686:	1dfb      	adds	r3, r7, #7
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	2201      	movs	r2, #1
    768c:	4053      	eors	r3, r2
    768e:	b2db      	uxtb	r3, r3
    7690:	2b00      	cmp	r3, #0
    7692:	d006      	beq.n	76a2 <CheckToDisableAckTimeout+0x3a>
    {
        if( devClass == CLASS_C )
    7694:	1dbb      	adds	r3, r7, #6
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	2b02      	cmp	r3, #2
    769a:	d108      	bne.n	76ae <CheckToDisableAckTimeout+0x46>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( );
    769c:	4b06      	ldr	r3, [pc, #24]	; (76b8 <CheckToDisableAckTimeout+0x50>)
    769e:	4798      	blx	r3
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( );
        }
    }
}
    76a0:	e005      	b.n	76ae <CheckToDisableAckTimeout+0x46>
        if( ackReceived == 1 )
    76a2:	1d7b      	adds	r3, r7, #5
    76a4:	781b      	ldrb	r3, [r3, #0]
    76a6:	2b00      	cmp	r3, #0
    76a8:	d001      	beq.n	76ae <CheckToDisableAckTimeout+0x46>
            OnAckTimeoutTimerEvent( );
    76aa:	4b03      	ldr	r3, [pc, #12]	; (76b8 <CheckToDisableAckTimeout+0x50>)
    76ac:	4798      	blx	r3
}
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	46bd      	mov	sp, r7
    76b2:	b003      	add	sp, #12
    76b4:	bd90      	pop	{r4, r7, pc}
    76b6:	46c0      	nop			; (mov r8, r8)
    76b8:	000076bd 	.word	0x000076bd

000076bc <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void )
{
    76bc:	b580      	push	{r7, lr}
    76be:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.AckTimeoutTimer );
    76c0:	4b10      	ldr	r3, [pc, #64]	; (7704 <OnAckTimeoutTimerEvent+0x48>)
    76c2:	0018      	movs	r0, r3
    76c4:	4b10      	ldr	r3, [pc, #64]	; (7708 <OnAckTimeoutTimerEvent+0x4c>)
    76c6:	4798      	blx	r3

    if( MacCtx.NvmCtx->NodeAckRequested == true )
    76c8:	4b10      	ldr	r3, [pc, #64]	; (770c <OnAckTimeoutTimerEvent+0x50>)
    76ca:	4a11      	ldr	r2, [pc, #68]	; (7710 <OnAckTimeoutTimerEvent+0x54>)
    76cc:	589b      	ldr	r3, [r3, r2]
    76ce:	4a11      	ldr	r2, [pc, #68]	; (7714 <OnAckTimeoutTimerEvent+0x58>)
    76d0:	5c9b      	ldrb	r3, [r3, r2]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d005      	beq.n	76e2 <OnAckTimeoutTimerEvent+0x26>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
    76d6:	4b0d      	ldr	r3, [pc, #52]	; (770c <OnAckTimeoutTimerEvent+0x50>)
    76d8:	4a0d      	ldr	r2, [pc, #52]	; (7710 <OnAckTimeoutTimerEvent+0x54>)
    76da:	589b      	ldr	r3, [r3, r2]
    76dc:	4a0e      	ldr	r2, [pc, #56]	; (7718 <OnAckTimeoutTimerEvent+0x5c>)
    76de:	2101      	movs	r1, #1
    76e0:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    76e2:	4b0a      	ldr	r3, [pc, #40]	; (770c <OnAckTimeoutTimerEvent+0x50>)
    76e4:	4a0a      	ldr	r2, [pc, #40]	; (7710 <OnAckTimeoutTimerEvent+0x54>)
    76e6:	589b      	ldr	r3, [r3, r2]
    76e8:	22c8      	movs	r2, #200	; 0xc8
    76ea:	5c9b      	ldrb	r3, [r3, r2]
    76ec:	2b02      	cmp	r3, #2
    76ee:	d105      	bne.n	76fc <OnAckTimeoutTimerEvent+0x40>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    76f0:	4b06      	ldr	r3, [pc, #24]	; (770c <OnAckTimeoutTimerEvent+0x50>)
    76f2:	4a0a      	ldr	r2, [pc, #40]	; (771c <OnAckTimeoutTimerEvent+0x60>)
    76f4:	5c99      	ldrb	r1, [r3, r2]
    76f6:	2010      	movs	r0, #16
    76f8:	4301      	orrs	r1, r0
    76fa:	5499      	strb	r1, [r3, r2]
    }
}
    76fc:	46c0      	nop			; (mov r8, r8)
    76fe:	46bd      	mov	sp, r7
    7700:	bd80      	pop	{r7, pc}
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	2000107c 	.word	0x2000107c
    7708:	00016fe5 	.word	0x00016fe5
    770c:	20000c8c 	.word	0x20000c8c
    7710:	000004c4 	.word	0x000004c4
    7714:	00000217 	.word	0x00000217
    7718:	00000216 	.word	0x00000216
    771c:	00000465 	.word	0x00000465

00007720 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
    7720:	b580      	push	{r7, lr}
    7722:	b082      	sub	sp, #8
    7724:	af00      	add	r7, sp, #0
    7726:	0002      	movs	r2, r0
    7728:	6039      	str	r1, [r7, #0]
    772a:	1dfb      	adds	r3, r7, #7
    772c:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
    772e:	1dfb      	adds	r3, r7, #7
    7730:	781b      	ldrb	r3, [r3, #0]
    7732:	2201      	movs	r2, #1
    7734:	4053      	eors	r3, r2
    7736:	b2db      	uxtb	r3, r3
    7738:	2b00      	cmp	r3, #0
    773a:	d005      	beq.n	7748 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
    773c:	4b06      	ldr	r3, [pc, #24]	; (7758 <RxWindowSetup+0x38>)
    773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7740:	683a      	ldr	r2, [r7, #0]
    7742:	0010      	movs	r0, r2
    7744:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
    7746:	e003      	b.n	7750 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
    7748:	4b03      	ldr	r3, [pc, #12]	; (7758 <RxWindowSetup+0x38>)
    774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    774c:	2000      	movs	r0, #0
    774e:	4798      	blx	r3
}
    7750:	46c0      	nop			; (mov r8, r8)
    7752:	46bd      	mov	sp, r7
    7754:	b002      	add	sp, #8
    7756:	bd80      	pop	{r7, pc}
    7758:	0001f2a4 	.word	0x0001f2a4

0000775c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
    775c:	b590      	push	{r4, r7, lr}
    775e:	b087      	sub	sp, #28
    7760:	af02      	add	r7, sp, #8
    7762:	0002      	movs	r2, r0
    7764:	1dfb      	adds	r3, r7, #7
    7766:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    7768:	230f      	movs	r3, #15
    776a:	18fb      	adds	r3, r7, r3
    776c:	2203      	movs	r2, #3
    776e:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
    7770:	4b58      	ldr	r3, [pc, #352]	; (78d4 <SwitchClass+0x178>)
    7772:	4a59      	ldr	r2, [pc, #356]	; (78d8 <SwitchClass+0x17c>)
    7774:	589b      	ldr	r3, [r3, r2]
    7776:	22c8      	movs	r2, #200	; 0xc8
    7778:	5c9b      	ldrb	r3, [r3, r2]
    777a:	2b01      	cmp	r3, #1
    777c:	d064      	beq.n	7848 <SwitchClass+0xec>
    777e:	2b02      	cmp	r3, #2
    7780:	d100      	bne.n	7784 <SwitchClass+0x28>
    7782:	e077      	b.n	7874 <SwitchClass+0x118>
    7784:	2b00      	cmp	r3, #0
    7786:	d000      	beq.n	778a <SwitchClass+0x2e>
    7788:	e09c      	b.n	78c4 <SwitchClass+0x168>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
    778a:	1dfb      	adds	r3, r7, #7
    778c:	781b      	ldrb	r3, [r3, #0]
    778e:	2b01      	cmp	r3, #1
    7790:	d114      	bne.n	77bc <SwitchClass+0x60>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
    7792:	230f      	movs	r3, #15
    7794:	18fc      	adds	r4, r7, r3
    7796:	1dfb      	adds	r3, r7, #7
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	0018      	movs	r0, r3
    779c:	4b4f      	ldr	r3, [pc, #316]	; (78dc <SwitchClass+0x180>)
    779e:	4798      	blx	r3
    77a0:	0003      	movs	r3, r0
    77a2:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
    77a4:	230f      	movs	r3, #15
    77a6:	18fb      	adds	r3, r7, r3
    77a8:	781b      	ldrb	r3, [r3, #0]
    77aa:	2b00      	cmp	r3, #0
    77ac:	d106      	bne.n	77bc <SwitchClass+0x60>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
    77ae:	4b49      	ldr	r3, [pc, #292]	; (78d4 <SwitchClass+0x178>)
    77b0:	4a49      	ldr	r2, [pc, #292]	; (78d8 <SwitchClass+0x17c>)
    77b2:	589b      	ldr	r3, [r3, r2]
    77b4:	1dfa      	adds	r2, r7, #7
    77b6:	21c8      	movs	r1, #200	; 0xc8
    77b8:	7812      	ldrb	r2, [r2, #0]
    77ba:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
    77bc:	1dfb      	adds	r3, r7, #7
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	2b02      	cmp	r3, #2
    77c2:	d000      	beq.n	77c6 <SwitchClass+0x6a>
    77c4:	e079      	b.n	78ba <SwitchClass+0x15e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    77c6:	4b43      	ldr	r3, [pc, #268]	; (78d4 <SwitchClass+0x178>)
    77c8:	4a43      	ldr	r2, [pc, #268]	; (78d8 <SwitchClass+0x17c>)
    77ca:	589b      	ldr	r3, [r3, r2]
    77cc:	1dfa      	adds	r2, r7, #7
    77ce:	21c8      	movs	r1, #200	; 0xc8
    77d0:	7812      	ldrb	r2, [r2, #0]
    77d2:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
    77d4:	4b3f      	ldr	r3, [pc, #252]	; (78d4 <SwitchClass+0x178>)
    77d6:	4a40      	ldr	r2, [pc, #256]	; (78d8 <SwitchClass+0x17c>)
    77d8:	589b      	ldr	r3, [r3, r2]
    77da:	4a41      	ldr	r2, [pc, #260]	; (78e0 <SwitchClass+0x184>)
    77dc:	2100      	movs	r1, #0
    77de:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
    77e0:	4b40      	ldr	r3, [pc, #256]	; (78e4 <SwitchClass+0x188>)
    77e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    77e4:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    77e6:	4b3b      	ldr	r3, [pc, #236]	; (78d4 <SwitchClass+0x178>)
    77e8:	4a3b      	ldr	r2, [pc, #236]	; (78d8 <SwitchClass+0x17c>)
    77ea:	589b      	ldr	r3, [r3, r2]
    77ec:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    77ee:	4b39      	ldr	r3, [pc, #228]	; (78d4 <SwitchClass+0x178>)
    77f0:	4a39      	ldr	r2, [pc, #228]	; (78d8 <SwitchClass+0x17c>)
    77f2:	589b      	ldr	r3, [r3, r2]
    77f4:	22fc      	movs	r2, #252	; 0xfc
    77f6:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    77f8:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
    77fa:	4b36      	ldr	r3, [pc, #216]	; (78d4 <SwitchClass+0x178>)
    77fc:	4a36      	ldr	r2, [pc, #216]	; (78d8 <SwitchClass+0x17c>)
    77fe:	589b      	ldr	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    7800:	22dc      	movs	r2, #220	; 0xdc
    7802:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    7804:	4b33      	ldr	r3, [pc, #204]	; (78d4 <SwitchClass+0x178>)
    7806:	4a34      	ldr	r2, [pc, #208]	; (78d8 <SwitchClass+0x17c>)
    7808:	589b      	ldr	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    780a:	22d8      	movs	r2, #216	; 0xd8
    780c:	589a      	ldr	r2, [r3, r2]
    780e:	4b36      	ldr	r3, [pc, #216]	; (78e8 <SwitchClass+0x18c>)
    7810:	9300      	str	r3, [sp, #0]
    7812:	0013      	movs	r3, r2
    7814:	0022      	movs	r2, r4
    7816:	4c35      	ldr	r4, [pc, #212]	; (78ec <SwitchClass+0x190>)
    7818:	47a0      	blx	r4
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
    781a:	4b35      	ldr	r3, [pc, #212]	; (78f0 <SwitchClass+0x194>)
    781c:	4798      	blx	r3

                // Add a DeviceModeInd MAC Command to indicate the network a device mode change.
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    781e:	4b2d      	ldr	r3, [pc, #180]	; (78d4 <SwitchClass+0x178>)
    7820:	4a2d      	ldr	r2, [pc, #180]	; (78d8 <SwitchClass+0x17c>)
    7822:	589b      	ldr	r3, [r3, r2]
    7824:	4a33      	ldr	r2, [pc, #204]	; (78f4 <SwitchClass+0x198>)
    7826:	5c9b      	ldrb	r3, [r3, r2]
    7828:	2b01      	cmp	r3, #1
    782a:	d108      	bne.n	783e <SwitchClass+0xe2>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    782c:	4b29      	ldr	r3, [pc, #164]	; (78d4 <SwitchClass+0x178>)
    782e:	4a2a      	ldr	r2, [pc, #168]	; (78d8 <SwitchClass+0x17c>)
    7830:	589b      	ldr	r3, [r3, r2]
    7832:	33c8      	adds	r3, #200	; 0xc8
    7834:	2201      	movs	r2, #1
    7836:	0019      	movs	r1, r3
    7838:	2020      	movs	r0, #32
    783a:	4b2f      	ldr	r3, [pc, #188]	; (78f8 <SwitchClass+0x19c>)
    783c:	4798      	blx	r3
                }

                status = LORAMAC_STATUS_OK;
    783e:	230f      	movs	r3, #15
    7840:	18fb      	adds	r3, r7, r3
    7842:	2200      	movs	r2, #0
    7844:	701a      	strb	r2, [r3, #0]
            }
            break;
    7846:	e038      	b.n	78ba <SwitchClass+0x15e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
    7848:	230f      	movs	r3, #15
    784a:	18fc      	adds	r4, r7, r3
    784c:	1dfb      	adds	r3, r7, #7
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	0018      	movs	r0, r3
    7852:	4b22      	ldr	r3, [pc, #136]	; (78dc <SwitchClass+0x180>)
    7854:	4798      	blx	r3
    7856:	0003      	movs	r3, r0
    7858:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
    785a:	230f      	movs	r3, #15
    785c:	18fb      	adds	r3, r7, r3
    785e:	781b      	ldrb	r3, [r3, #0]
    7860:	2b00      	cmp	r3, #0
    7862:	d12c      	bne.n	78be <SwitchClass+0x162>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    7864:	4b1b      	ldr	r3, [pc, #108]	; (78d4 <SwitchClass+0x178>)
    7866:	4a1c      	ldr	r2, [pc, #112]	; (78d8 <SwitchClass+0x17c>)
    7868:	589b      	ldr	r3, [r3, r2]
    786a:	1dfa      	adds	r2, r7, #7
    786c:	21c8      	movs	r1, #200	; 0xc8
    786e:	7812      	ldrb	r2, [r2, #0]
    7870:	545a      	strb	r2, [r3, r1]
            }
            break;
    7872:	e024      	b.n	78be <SwitchClass+0x162>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
    7874:	1dfb      	adds	r3, r7, #7
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	2b00      	cmp	r3, #0
    787a:	d122      	bne.n	78c2 <SwitchClass+0x166>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    787c:	4b15      	ldr	r3, [pc, #84]	; (78d4 <SwitchClass+0x178>)
    787e:	4a16      	ldr	r2, [pc, #88]	; (78d8 <SwitchClass+0x17c>)
    7880:	589b      	ldr	r3, [r3, r2]
    7882:	1dfa      	adds	r2, r7, #7
    7884:	21c8      	movs	r1, #200	; 0xc8
    7886:	7812      	ldrb	r2, [r2, #0]
    7888:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
    788a:	4b16      	ldr	r3, [pc, #88]	; (78e4 <SwitchClass+0x188>)
    788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    788e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
    7890:	230f      	movs	r3, #15
    7892:	18fb      	adds	r3, r7, r3
    7894:	2200      	movs	r2, #0
    7896:	701a      	strb	r2, [r3, #0]

                // Add a DeviceModeInd MAC Command to indicate the network a device mode change.
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    7898:	4b0e      	ldr	r3, [pc, #56]	; (78d4 <SwitchClass+0x178>)
    789a:	4a0f      	ldr	r2, [pc, #60]	; (78d8 <SwitchClass+0x17c>)
    789c:	589b      	ldr	r3, [r3, r2]
    789e:	4a15      	ldr	r2, [pc, #84]	; (78f4 <SwitchClass+0x198>)
    78a0:	5c9b      	ldrb	r3, [r3, r2]
    78a2:	2b01      	cmp	r3, #1
    78a4:	d10d      	bne.n	78c2 <SwitchClass+0x166>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    78a6:	4b0b      	ldr	r3, [pc, #44]	; (78d4 <SwitchClass+0x178>)
    78a8:	4a0b      	ldr	r2, [pc, #44]	; (78d8 <SwitchClass+0x17c>)
    78aa:	589b      	ldr	r3, [r3, r2]
    78ac:	33c8      	adds	r3, #200	; 0xc8
    78ae:	2201      	movs	r2, #1
    78b0:	0019      	movs	r1, r3
    78b2:	2020      	movs	r0, #32
    78b4:	4b10      	ldr	r3, [pc, #64]	; (78f8 <SwitchClass+0x19c>)
    78b6:	4798      	blx	r3
                }
            }
            break;
    78b8:	e003      	b.n	78c2 <SwitchClass+0x166>
            break;
    78ba:	46c0      	nop			; (mov r8, r8)
    78bc:	e002      	b.n	78c4 <SwitchClass+0x168>
            break;
    78be:	46c0      	nop			; (mov r8, r8)
    78c0:	e000      	b.n	78c4 <SwitchClass+0x168>
            break;
    78c2:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
    78c4:	230f      	movs	r3, #15
    78c6:	18fb      	adds	r3, r7, r3
    78c8:	781b      	ldrb	r3, [r3, #0]
}
    78ca:	0018      	movs	r0, r3
    78cc:	46bd      	mov	sp, r7
    78ce:	b005      	add	sp, #20
    78d0:	bd90      	pop	{r4, r7, pc}
    78d2:	46c0      	nop			; (mov r8, r8)
    78d4:	20000c8c 	.word	0x20000c8c
    78d8:	000004c4 	.word	0x000004c4
    78dc:	0000c76d 	.word	0x0000c76d
    78e0:	00000217 	.word	0x00000217
    78e4:	0001f2a4 	.word	0x0001f2a4
    78e8:	20001068 	.word	0x20001068
    78ec:	00010041 	.word	0x00010041
    78f0:	0000966d 	.word	0x0000966d
    78f4:	0000021e 	.word	0x0000021e
    78f8:	0000cb11 	.word	0x0000cb11

000078fc <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
    78fc:	b580      	push	{r7, lr}
    78fe:	b084      	sub	sp, #16
    7900:	af00      	add	r7, sp, #0
    7902:	0002      	movs	r2, r0
    7904:	1dfb      	adds	r3, r7, #7
    7906:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    7908:	4b1a      	ldr	r3, [pc, #104]	; (7974 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
    790a:	4a1b      	ldr	r2, [pc, #108]	; (7978 <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    790c:	589a      	ldr	r2, [r3, r2]
    790e:	2380      	movs	r3, #128	; 0x80
    7910:	005b      	lsls	r3, r3, #1
    7912:	5cd2      	ldrb	r2, [r2, r3]
    7914:	230c      	movs	r3, #12
    7916:	18fb      	adds	r3, r7, r3
    7918:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
    791a:	230c      	movs	r3, #12
    791c:	18fb      	adds	r3, r7, r3
    791e:	1dfa      	adds	r2, r7, #7
    7920:	7812      	ldrb	r2, [r2, #0]
    7922:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    7924:	230c      	movs	r3, #12
    7926:	18fb      	adds	r3, r7, r3
    7928:	220c      	movs	r2, #12
    792a:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
    792c:	4b11      	ldr	r3, [pc, #68]	; (7974 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
    792e:	4a12      	ldr	r2, [pc, #72]	; (7978 <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    7930:	589a      	ldr	r2, [r3, r2]
    7932:	2316      	movs	r3, #22
    7934:	33ff      	adds	r3, #255	; 0xff
    7936:	5cd3      	ldrb	r3, [r2, r3]
    7938:	2b00      	cmp	r3, #0
    793a:	d003      	beq.n	7944 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    793c:	230c      	movs	r3, #12
    793e:	18fb      	adds	r3, r7, r3
    7940:	220d      	movs	r2, #13
    7942:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    7944:	4b0b      	ldr	r3, [pc, #44]	; (7974 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
    7946:	4a0c      	ldr	r2, [pc, #48]	; (7978 <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    7948:	589b      	ldr	r3, [r3, r2]
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	220c      	movs	r2, #12
    794e:	18ba      	adds	r2, r7, r2
    7950:	0011      	movs	r1, r2
    7952:	0018      	movs	r0, r3
    7954:	4b09      	ldr	r3, [pc, #36]	; (797c <GetMaxAppPayloadWithoutFOptsLength+0x80>)
    7956:	4798      	blx	r3
    7958:	0003      	movs	r3, r0
    795a:	001a      	movs	r2, r3
    795c:	2308      	movs	r3, #8
    795e:	18fb      	adds	r3, r7, r3
    7960:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
    7962:	2308      	movs	r3, #8
    7964:	18fb      	adds	r3, r7, r3
    7966:	681b      	ldr	r3, [r3, #0]
    7968:	b2db      	uxtb	r3, r3
}
    796a:	0018      	movs	r0, r3
    796c:	46bd      	mov	sp, r7
    796e:	b004      	add	sp, #16
    7970:	bd80      	pop	{r7, pc}
    7972:	46c0      	nop			; (mov r8, r8)
    7974:	20000c8c 	.word	0x20000c8c
    7978:	000004c4 	.word	0x000004c4
    797c:	0000fec1 	.word	0x0000fec1

00007980 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
    7980:	b590      	push	{r4, r7, lr}
    7982:	b085      	sub	sp, #20
    7984:	af00      	add	r7, sp, #0
    7986:	0004      	movs	r4, r0
    7988:	0008      	movs	r0, r1
    798a:	0011      	movs	r1, r2
    798c:	1dfb      	adds	r3, r7, #7
    798e:	1c22      	adds	r2, r4, #0
    7990:	701a      	strb	r2, [r3, #0]
    7992:	1dbb      	adds	r3, r7, #6
    7994:	1c02      	adds	r2, r0, #0
    7996:	701a      	strb	r2, [r3, #0]
    7998:	1d7b      	adds	r3, r7, #5
    799a:	1c0a      	adds	r2, r1, #0
    799c:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
    799e:	230e      	movs	r3, #14
    79a0:	18fb      	adds	r3, r7, r3
    79a2:	2200      	movs	r2, #0
    79a4:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
    79a6:	230c      	movs	r3, #12
    79a8:	18fb      	adds	r3, r7, r3
    79aa:	2200      	movs	r2, #0
    79ac:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
    79ae:	1dbb      	adds	r3, r7, #6
    79b0:	781b      	ldrb	r3, [r3, #0]
    79b2:	b25b      	sxtb	r3, r3
    79b4:	0018      	movs	r0, r3
    79b6:	4b12      	ldr	r3, [pc, #72]	; (7a00 <ValidatePayloadLength+0x80>)
    79b8:	4798      	blx	r3
    79ba:	0003      	movs	r3, r0
    79bc:	001a      	movs	r2, r3
    79be:	230e      	movs	r3, #14
    79c0:	18fb      	adds	r3, r7, r3
    79c2:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
    79c4:	1dfb      	adds	r3, r7, #7
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	b299      	uxth	r1, r3
    79ca:	1d7b      	adds	r3, r7, #5
    79cc:	781b      	ldrb	r3, [r3, #0]
    79ce:	b29a      	uxth	r2, r3
    79d0:	230c      	movs	r3, #12
    79d2:	18fb      	adds	r3, r7, r3
    79d4:	188a      	adds	r2, r1, r2
    79d6:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
    79d8:	230c      	movs	r3, #12
    79da:	18fa      	adds	r2, r7, r3
    79dc:	230e      	movs	r3, #14
    79de:	18fb      	adds	r3, r7, r3
    79e0:	8812      	ldrh	r2, [r2, #0]
    79e2:	881b      	ldrh	r3, [r3, #0]
    79e4:	429a      	cmp	r2, r3
    79e6:	d806      	bhi.n	79f6 <ValidatePayloadLength+0x76>
    79e8:	230c      	movs	r3, #12
    79ea:	18fb      	adds	r3, r7, r3
    79ec:	881b      	ldrh	r3, [r3, #0]
    79ee:	2bff      	cmp	r3, #255	; 0xff
    79f0:	d801      	bhi.n	79f6 <ValidatePayloadLength+0x76>
    {
        return true;
    79f2:	2301      	movs	r3, #1
    79f4:	e000      	b.n	79f8 <ValidatePayloadLength+0x78>
    }
    return false;
    79f6:	2300      	movs	r3, #0
}
    79f8:	0018      	movs	r0, r3
    79fa:	46bd      	mov	sp, r7
    79fc:	b005      	add	sp, #20
    79fe:	bd90      	pop	{r4, r7, pc}
    7a00:	000078fd 	.word	0x000078fd

00007a04 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
    7a04:	b580      	push	{r7, lr}
    7a06:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    7a08:	4b06      	ldr	r3, [pc, #24]	; (7a24 <SetMlmeScheduleUplinkIndication+0x20>)
    7a0a:	4a07      	ldr	r2, [pc, #28]	; (7a28 <SetMlmeScheduleUplinkIndication+0x24>)
    7a0c:	2106      	movs	r1, #6
    7a0e:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    7a10:	4b04      	ldr	r3, [pc, #16]	; (7a24 <SetMlmeScheduleUplinkIndication+0x20>)
    7a12:	4a06      	ldr	r2, [pc, #24]	; (7a2c <SetMlmeScheduleUplinkIndication+0x28>)
    7a14:	5c99      	ldrb	r1, [r3, r2]
    7a16:	2008      	movs	r0, #8
    7a18:	4301      	orrs	r1, r0
    7a1a:	5499      	strb	r1, [r3, r2]
}
    7a1c:	46c0      	nop			; (mov r8, r8)
    7a1e:	46bd      	mov	sp, r7
    7a20:	bd80      	pop	{r7, pc}
    7a22:	46c0      	nop			; (mov r8, r8)
    7a24:	20000c8c 	.word	0x20000c8c
    7a28:	0000044c 	.word	0x0000044c
    7a2c:	00000465 	.word	0x00000465

00007a30 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
{
    7a30:	b5b0      	push	{r4, r5, r7, lr}
    7a32:	b0aa      	sub	sp, #168	; 0xa8
    7a34:	af02      	add	r7, sp, #8
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	000c      	movs	r4, r1
    7a3a:	0010      	movs	r0, r2
    7a3c:	0019      	movs	r1, r3
    7a3e:	1cfb      	adds	r3, r7, #3
    7a40:	1c22      	adds	r2, r4, #0
    7a42:	701a      	strb	r2, [r3, #0]
    7a44:	1cbb      	adds	r3, r7, #2
    7a46:	1c02      	adds	r2, r0, #0
    7a48:	701a      	strb	r2, [r3, #0]
    7a4a:	1c7b      	adds	r3, r7, #1
    7a4c:	1c0a      	adds	r2, r1, #0
    7a4e:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
    7a50:	2373      	movs	r3, #115	; 0x73
    7a52:	18fb      	adds	r3, r7, r3
    7a54:	2200      	movs	r2, #0
    7a56:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
    7a58:	239f      	movs	r3, #159	; 0x9f
    7a5a:	18fb      	adds	r3, r7, r3
    7a5c:	2200      	movs	r2, #0
    7a5e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    7a60:	2370      	movs	r3, #112	; 0x70
    7a62:	18fb      	adds	r3, r7, r3
    7a64:	2200      	movs	r2, #0
    7a66:	701a      	strb	r2, [r3, #0]
    7a68:	2370      	movs	r3, #112	; 0x70
    7a6a:	18fb      	adds	r3, r7, r3
    7a6c:	2200      	movs	r2, #0
    7a6e:	705a      	strb	r2, [r3, #1]
    MacCommand_t* macCmd;

    while( macIndex < commandsSize )
    7a70:	f000 ffc1 	bl	89f6 <ProcessMacCommands+0xfc6>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
    7a74:	1cfb      	adds	r3, r7, #3
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	1cfa      	adds	r2, r7, #3
    7a7a:	1c59      	adds	r1, r3, #1
    7a7c:	7011      	strb	r1, [r2, #0]
    7a7e:	001a      	movs	r2, r3
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	189b      	adds	r3, r3, r2
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	2b20      	cmp	r3, #32
    7a88:	d901      	bls.n	7a8e <ProcessMacCommands+0x5e>
    7a8a:	f000 ffbd 	bl	8a08 <ProcessMacCommands+0xfd8>
    7a8e:	009a      	lsls	r2, r3, #2
    7a90:	4ba7      	ldr	r3, [pc, #668]	; (7d30 <ProcessMacCommands+0x300>)
    7a92:	18d3      	adds	r3, r2, r3
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	469f      	mov	pc, r3
        {
            case SRV_MAC_RESET_CONF:
            {
                uint8_t serverMinorVersion = payload[macIndex++];
    7a98:	1cfb      	adds	r3, r7, #3
    7a9a:	781b      	ldrb	r3, [r3, #0]
    7a9c:	1cfa      	adds	r2, r7, #3
    7a9e:	1c59      	adds	r1, r3, #1
    7aa0:	7011      	strb	r1, [r2, #0]
    7aa2:	001a      	movs	r2, r3
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	189a      	adds	r2, r3, r2
    7aa8:	239a      	movs	r3, #154	; 0x9a
    7aaa:	18fb      	adds	r3, r7, r3
    7aac:	7812      	ldrb	r2, [r2, #0]
    7aae:	701a      	strb	r2, [r3, #0]

                // Compare own LoRaWAN Version with server's
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    7ab0:	4ba0      	ldr	r3, [pc, #640]	; (7d34 <ProcessMacCommands+0x304>)
    7ab2:	4aa1      	ldr	r2, [pc, #644]	; (7d38 <ProcessMacCommands+0x308>)
    7ab4:	589b      	ldr	r3, [r3, r2]
    7ab6:	4aa1      	ldr	r2, [pc, #644]	; (7d3c <ProcessMacCommands+0x30c>)
    7ab8:	5c9b      	ldrb	r3, [r3, r2]
    7aba:	229a      	movs	r2, #154	; 0x9a
    7abc:	18ba      	adds	r2, r7, r2
    7abe:	7812      	ldrb	r2, [r2, #0]
    7ac0:	429a      	cmp	r2, r3
    7ac2:	d109      	bne.n	7ad8 <ProcessMacCommands+0xa8>
                {
                    // If they equal remove the sticky ResetInd MAC-Command.
                    LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd);
    7ac4:	236c      	movs	r3, #108	; 0x6c
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	0019      	movs	r1, r3
    7aca:	2001      	movs	r0, #1
    7acc:	4b9c      	ldr	r3, [pc, #624]	; (7d40 <ProcessMacCommands+0x310>)
    7ace:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    7ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7ad2:	0018      	movs	r0, r3
    7ad4:	4b9b      	ldr	r3, [pc, #620]	; (7d44 <ProcessMacCommands+0x314>)
    7ad6:	4798      	blx	r3
    7ad8:	239f      	movs	r3, #159	; 0x9f
    7ada:	18fb      	adds	r3, r7, r3
    7adc:	229f      	movs	r2, #159	; 0x9f
    7ade:	18ba      	adds	r2, r7, r2
    7ae0:	7812      	ldrb	r2, [r2, #0]
    7ae2:	701a      	strb	r2, [r3, #0]
                }
                break;
    7ae4:	f000 ff87 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
    7ae8:	2003      	movs	r0, #3
    7aea:	4b97      	ldr	r3, [pc, #604]	; (7d48 <ProcessMacCommands+0x318>)
    7aec:	4798      	blx	r3
    7aee:	1e03      	subs	r3, r0, #0
    7af0:	d01c      	beq.n	7b2c <ProcessMacCommands+0xfc>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
    7af2:	2103      	movs	r1, #3
    7af4:	2000      	movs	r0, #0
    7af6:	4b95      	ldr	r3, [pc, #596]	; (7d4c <ProcessMacCommands+0x31c>)
    7af8:	4798      	blx	r3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
    7afa:	1cfb      	adds	r3, r7, #3
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	1cfa      	adds	r2, r7, #3
    7b00:	1c59      	adds	r1, r3, #1
    7b02:	7011      	strb	r1, [r2, #0]
    7b04:	001a      	movs	r2, r3
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	189b      	adds	r3, r3, r2
    7b0a:	7819      	ldrb	r1, [r3, #0]
    7b0c:	4a89      	ldr	r2, [pc, #548]	; (7d34 <ProcessMacCommands+0x304>)
    7b0e:	2388      	movs	r3, #136	; 0x88
    7b10:	00db      	lsls	r3, r3, #3
    7b12:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
    7b14:	1cfb      	adds	r3, r7, #3
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	1cfa      	adds	r2, r7, #3
    7b1a:	1c59      	adds	r1, r3, #1
    7b1c:	7011      	strb	r1, [r2, #0]
    7b1e:	001a      	movs	r2, r3
    7b20:	687b      	ldr	r3, [r7, #4]
    7b22:	189b      	adds	r3, r3, r2
    7b24:	7819      	ldrb	r1, [r3, #0]
    7b26:	4b83      	ldr	r3, [pc, #524]	; (7d34 <ProcessMacCommands+0x304>)
    7b28:	4a89      	ldr	r2, [pc, #548]	; (7d50 <ProcessMacCommands+0x320>)
    7b2a:	5499      	strb	r1, [r3, r2]
    7b2c:	239f      	movs	r3, #159	; 0x9f
    7b2e:	18fb      	adds	r3, r7, r3
    7b30:	229f      	movs	r2, #159	; 0x9f
    7b32:	18ba      	adds	r2, r7, r2
    7b34:	7812      	ldrb	r2, [r2, #0]
    7b36:	701a      	strb	r2, [r3, #0]
                }
                break;
    7b38:	f000 ff5d 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
    7b3c:	235b      	movs	r3, #91	; 0x5b
    7b3e:	18fb      	adds	r3, r7, r3
    7b40:	2200      	movs	r2, #0
    7b42:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
    7b44:	235a      	movs	r3, #90	; 0x5a
    7b46:	18fb      	adds	r3, r7, r3
    7b48:	2200      	movs	r2, #0
    7b4a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
    7b4c:	2359      	movs	r3, #89	; 0x59
    7b4e:	18fb      	adds	r3, r7, r3
    7b50:	2200      	movs	r2, #0
    7b52:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
    7b54:	2358      	movs	r3, #88	; 0x58
    7b56:	18fb      	adds	r3, r7, r3
    7b58:	2200      	movs	r2, #0
    7b5a:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
    7b5c:	239f      	movs	r3, #159	; 0x9f
    7b5e:	18fb      	adds	r3, r7, r3
    7b60:	781b      	ldrb	r3, [r3, #0]
    7b62:	2201      	movs	r2, #1
    7b64:	4053      	eors	r3, r2
    7b66:	b2db      	uxtb	r3, r3
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d100      	bne.n	7b6e <ProcessMacCommands+0x13e>
    7b6c:	e0ad      	b.n	7cca <ProcessMacCommands+0x29a>
                {
                    adrBlockFound = true;
    7b6e:	239f      	movs	r3, #159	; 0x9f
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	2201      	movs	r2, #1
    7b74:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
    7b76:	1cfb      	adds	r3, r7, #3
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	3b01      	subs	r3, #1
    7b7c:	687a      	ldr	r2, [r7, #4]
    7b7e:	18d2      	adds	r2, r2, r3
    7b80:	235c      	movs	r3, #92	; 0x5c
    7b82:	18fb      	adds	r3, r7, r3
    7b84:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
    7b86:	1cba      	adds	r2, r7, #2
    7b88:	1cfb      	adds	r3, r7, #3
    7b8a:	7812      	ldrb	r2, [r2, #0]
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	1ad3      	subs	r3, r2, r3
    7b90:	b2db      	uxtb	r3, r3
    7b92:	3301      	adds	r3, #1
    7b94:	b2da      	uxtb	r2, r3
    7b96:	235c      	movs	r3, #92	; 0x5c
    7b98:	18fb      	adds	r3, r7, r3
    7b9a:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    7b9c:	4b65      	ldr	r3, [pc, #404]	; (7d34 <ProcessMacCommands+0x304>)
    7b9e:	4a66      	ldr	r2, [pc, #408]	; (7d38 <ProcessMacCommands+0x308>)
    7ba0:	589b      	ldr	r3, [r3, r2]
    7ba2:	22ca      	movs	r2, #202	; 0xca
    7ba4:	5c9a      	ldrb	r2, [r3, r2]
    7ba6:	235c      	movs	r3, #92	; 0x5c
    7ba8:	18fb      	adds	r3, r7, r3
    7baa:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    7bac:	4b61      	ldr	r3, [pc, #388]	; (7d34 <ProcessMacCommands+0x304>)
    7bae:	4a62      	ldr	r2, [pc, #392]	; (7d38 <ProcessMacCommands+0x308>)
    7bb0:	589a      	ldr	r2, [r3, r2]
    7bb2:	2380      	movs	r3, #128	; 0x80
    7bb4:	005b      	lsls	r3, r3, #1
    7bb6:	5cd2      	ldrb	r2, [r2, r3]
    7bb8:	235c      	movs	r3, #92	; 0x5c
    7bba:	18fb      	adds	r3, r7, r3
    7bbc:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    7bbe:	4b5d      	ldr	r3, [pc, #372]	; (7d34 <ProcessMacCommands+0x304>)
    7bc0:	4a5d      	ldr	r2, [pc, #372]	; (7d38 <ProcessMacCommands+0x308>)
    7bc2:	589b      	ldr	r3, [r3, r2]
    7bc4:	22d5      	movs	r2, #213	; 0xd5
    7bc6:	569a      	ldrsb	r2, [r3, r2]
    7bc8:	235c      	movs	r3, #92	; 0x5c
    7bca:	18fb      	adds	r3, r7, r3
    7bcc:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    7bce:	4b59      	ldr	r3, [pc, #356]	; (7d34 <ProcessMacCommands+0x304>)
    7bd0:	4a59      	ldr	r2, [pc, #356]	; (7d38 <ProcessMacCommands+0x308>)
    7bd2:	589b      	ldr	r3, [r3, r2]
    7bd4:	22d4      	movs	r2, #212	; 0xd4
    7bd6:	569a      	ldrsb	r2, [r3, r2]
    7bd8:	235c      	movs	r3, #92	; 0x5c
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    7bde:	4b55      	ldr	r3, [pc, #340]	; (7d34 <ProcessMacCommands+0x304>)
    7be0:	4a55      	ldr	r2, [pc, #340]	; (7d38 <ProcessMacCommands+0x308>)
    7be2:	589b      	ldr	r3, [r3, r2]
    7be4:	22f4      	movs	r2, #244	; 0xf4
    7be6:	5c9a      	ldrb	r2, [r3, r2]
    7be8:	235c      	movs	r3, #92	; 0x5c
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
    7bee:	4b51      	ldr	r3, [pc, #324]	; (7d34 <ProcessMacCommands+0x304>)
    7bf0:	4a51      	ldr	r2, [pc, #324]	; (7d38 <ProcessMacCommands+0x308>)
    7bf2:	5899      	ldr	r1, [r3, r2]
    7bf4:	235c      	movs	r3, #92	; 0x5c
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	2287      	movs	r2, #135	; 0x87
    7bfa:	0092      	lsls	r2, r2, #2
    7bfc:	588a      	ldr	r2, [r1, r2]
    7bfe:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
    7c00:	4b4c      	ldr	r3, [pc, #304]	; (7d34 <ProcessMacCommands+0x304>)
    7c02:	4a4d      	ldr	r2, [pc, #308]	; (7d38 <ProcessMacCommands+0x308>)
    7c04:	589b      	ldr	r3, [r3, r2]
    7c06:	7818      	ldrb	r0, [r3, #0]
    7c08:	235a      	movs	r3, #90	; 0x5a
    7c0a:	18fc      	adds	r4, r7, r3
    7c0c:	235b      	movs	r3, #91	; 0x5b
    7c0e:	18fa      	adds	r2, r7, r3
    7c10:	235c      	movs	r3, #92	; 0x5c
    7c12:	18f9      	adds	r1, r7, r3
    7c14:	2358      	movs	r3, #88	; 0x58
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	9301      	str	r3, [sp, #4]
    7c1a:	2359      	movs	r3, #89	; 0x59
    7c1c:	18fb      	adds	r3, r7, r3
    7c1e:	9300      	str	r3, [sp, #0]
    7c20:	0023      	movs	r3, r4
    7c22:	4c4c      	ldr	r4, [pc, #304]	; (7d54 <ProcessMacCommands+0x324>)
    7c24:	47a0      	blx	r4
    7c26:	0003      	movs	r3, r0
    7c28:	001a      	movs	r2, r3
    7c2a:	2373      	movs	r3, #115	; 0x73
    7c2c:	18fb      	adds	r3, r7, r3
    7c2e:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
    7c30:	2373      	movs	r3, #115	; 0x73
    7c32:	18fb      	adds	r3, r7, r3
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	001a      	movs	r2, r3
    7c38:	2307      	movs	r3, #7
    7c3a:	4013      	ands	r3, r2
    7c3c:	2b07      	cmp	r3, #7
    7c3e:	d119      	bne.n	7c74 <ProcessMacCommands+0x244>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
    7c40:	4b3c      	ldr	r3, [pc, #240]	; (7d34 <ProcessMacCommands+0x304>)
    7c42:	4a3d      	ldr	r2, [pc, #244]	; (7d38 <ProcessMacCommands+0x308>)
    7c44:	589b      	ldr	r3, [r3, r2]
    7c46:	225b      	movs	r2, #91	; 0x5b
    7c48:	18ba      	adds	r2, r7, r2
    7c4a:	2100      	movs	r1, #0
    7c4c:	5651      	ldrsb	r1, [r2, r1]
    7c4e:	22d5      	movs	r2, #213	; 0xd5
    7c50:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
    7c52:	4b38      	ldr	r3, [pc, #224]	; (7d34 <ProcessMacCommands+0x304>)
    7c54:	4a38      	ldr	r2, [pc, #224]	; (7d38 <ProcessMacCommands+0x308>)
    7c56:	589b      	ldr	r3, [r3, r2]
    7c58:	225a      	movs	r2, #90	; 0x5a
    7c5a:	18ba      	adds	r2, r7, r2
    7c5c:	2100      	movs	r1, #0
    7c5e:	5651      	ldrsb	r1, [r2, r1]
    7c60:	22d4      	movs	r2, #212	; 0xd4
    7c62:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
    7c64:	4b33      	ldr	r3, [pc, #204]	; (7d34 <ProcessMacCommands+0x304>)
    7c66:	4a34      	ldr	r2, [pc, #208]	; (7d38 <ProcessMacCommands+0x308>)
    7c68:	589b      	ldr	r3, [r3, r2]
    7c6a:	2259      	movs	r2, #89	; 0x59
    7c6c:	18ba      	adds	r2, r7, r2
    7c6e:	7811      	ldrb	r1, [r2, #0]
    7c70:	22f4      	movs	r2, #244	; 0xf4
    7c72:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    7c74:	239e      	movs	r3, #158	; 0x9e
    7c76:	18fb      	adds	r3, r7, r3
    7c78:	2200      	movs	r2, #0
    7c7a:	701a      	strb	r2, [r3, #0]
    7c7c:	e00d      	b.n	7c9a <ProcessMacCommands+0x26a>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
    7c7e:	2373      	movs	r3, #115	; 0x73
    7c80:	18fb      	adds	r3, r7, r3
    7c82:	2201      	movs	r2, #1
    7c84:	0019      	movs	r1, r3
    7c86:	2003      	movs	r0, #3
    7c88:	4b33      	ldr	r3, [pc, #204]	; (7d58 <ProcessMacCommands+0x328>)
    7c8a:	4798      	blx	r3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    7c8c:	239e      	movs	r3, #158	; 0x9e
    7c8e:	18fb      	adds	r3, r7, r3
    7c90:	781a      	ldrb	r2, [r3, #0]
    7c92:	239e      	movs	r3, #158	; 0x9e
    7c94:	18fb      	adds	r3, r7, r3
    7c96:	3201      	adds	r2, #1
    7c98:	701a      	strb	r2, [r3, #0]
    7c9a:	2358      	movs	r3, #88	; 0x58
    7c9c:	18fb      	adds	r3, r7, r3
    7c9e:	781a      	ldrb	r2, [r3, #0]
    7ca0:	4b2e      	ldr	r3, [pc, #184]	; (7d5c <ProcessMacCommands+0x32c>)
    7ca2:	2105      	movs	r1, #5
    7ca4:	0010      	movs	r0, r2
    7ca6:	4798      	blx	r3
    7ca8:	0003      	movs	r3, r0
    7caa:	b2db      	uxtb	r3, r3
    7cac:	229e      	movs	r2, #158	; 0x9e
    7cae:	18ba      	adds	r2, r7, r2
    7cb0:	7812      	ldrb	r2, [r2, #0]
    7cb2:	429a      	cmp	r2, r3
    7cb4:	d3e3      	bcc.n	7c7e <ProcessMacCommands+0x24e>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
    7cb6:	2358      	movs	r3, #88	; 0x58
    7cb8:	18fb      	adds	r3, r7, r3
    7cba:	781a      	ldrb	r2, [r3, #0]
    7cbc:	1cfb      	adds	r3, r7, #3
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	18d3      	adds	r3, r2, r3
    7cc2:	b2da      	uxtb	r2, r3
    7cc4:	1cfb      	adds	r3, r7, #3
    7cc6:	3a01      	subs	r2, #1
    7cc8:	701a      	strb	r2, [r3, #0]
                }
                break;
    7cca:	46c0      	nop			; (mov r8, r8)
    7ccc:	f000 fe93 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
    7cd0:	4b18      	ldr	r3, [pc, #96]	; (7d34 <ProcessMacCommands+0x304>)
    7cd2:	4a19      	ldr	r2, [pc, #100]	; (7d38 <ProcessMacCommands+0x308>)
    7cd4:	589a      	ldr	r2, [r3, r2]
    7cd6:	1cfb      	adds	r3, r7, #3
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	1cf9      	adds	r1, r7, #3
    7cdc:	1c58      	adds	r0, r3, #1
    7cde:	7008      	strb	r0, [r1, #0]
    7ce0:	0019      	movs	r1, r3
    7ce2:	687b      	ldr	r3, [r7, #4]
    7ce4:	185b      	adds	r3, r3, r1
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	210f      	movs	r1, #15
    7cea:	400b      	ands	r3, r1
    7cec:	b2d9      	uxtb	r1, r3
    7cee:	2312      	movs	r3, #18
    7cf0:	33ff      	adds	r3, #255	; 0xff
    7cf2:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
    7cf4:	4b0f      	ldr	r3, [pc, #60]	; (7d34 <ProcessMacCommands+0x304>)
    7cf6:	4a10      	ldr	r2, [pc, #64]	; (7d38 <ProcessMacCommands+0x308>)
    7cf8:	589b      	ldr	r3, [r3, r2]
    7cfa:	4a0e      	ldr	r2, [pc, #56]	; (7d34 <ProcessMacCommands+0x304>)
    7cfc:	490e      	ldr	r1, [pc, #56]	; (7d38 <ProcessMacCommands+0x308>)
    7cfe:	5851      	ldr	r1, [r2, r1]
    7d00:	2212      	movs	r2, #18
    7d02:	32ff      	adds	r2, #255	; 0xff
    7d04:	5c8a      	ldrb	r2, [r1, r2]
    7d06:	0011      	movs	r1, r2
    7d08:	2201      	movs	r2, #1
    7d0a:	408a      	lsls	r2, r1
    7d0c:	b291      	uxth	r1, r2
    7d0e:	4a14      	ldr	r2, [pc, #80]	; (7d60 <ProcessMacCommands+0x330>)
    7d10:	5299      	strh	r1, [r3, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
    7d12:	2370      	movs	r3, #112	; 0x70
    7d14:	18fb      	adds	r3, r7, r3
    7d16:	2200      	movs	r2, #0
    7d18:	0019      	movs	r1, r3
    7d1a:	2004      	movs	r0, #4
    7d1c:	4b0e      	ldr	r3, [pc, #56]	; (7d58 <ProcessMacCommands+0x328>)
    7d1e:	4798      	blx	r3
    7d20:	239f      	movs	r3, #159	; 0x9f
    7d22:	18fb      	adds	r3, r7, r3
    7d24:	229f      	movs	r2, #159	; 0x9f
    7d26:	18ba      	adds	r2, r7, r2
    7d28:	7812      	ldrb	r2, [r2, #0]
    7d2a:	701a      	strb	r2, [r3, #0]
                break;
    7d2c:	f000 fe63 	bl	89f6 <ProcessMacCommands+0xfc6>
    7d30:	0001f320 	.word	0x0001f320
    7d34:	20000c8c 	.word	0x20000c8c
    7d38:	000004c4 	.word	0x000004c4
    7d3c:	0000021e 	.word	0x0000021e
    7d40:	0000cc45 	.word	0x0000cc45
    7d44:	0000cbc9 	.word	0x0000cbc9
    7d48:	0000d209 	.word	0x0000d209
    7d4c:	0000d0e1 	.word	0x0000d0e1
    7d50:	00000441 	.word	0x00000441
    7d54:	00010105 	.word	0x00010105
    7d58:	0000cb11 	.word	0x0000cb11
    7d5c:	00017655 	.word	0x00017655
    7d60:	0000021a 	.word	0x0000021a
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
    7d64:	2373      	movs	r3, #115	; 0x73
    7d66:	18fb      	adds	r3, r7, r3
    7d68:	2207      	movs	r2, #7
    7d6a:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
    7d6c:	1cfb      	adds	r3, r7, #3
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	687a      	ldr	r2, [r7, #4]
    7d72:	18d3      	adds	r3, r2, r3
    7d74:	781b      	ldrb	r3, [r3, #0]
    7d76:	091b      	lsrs	r3, r3, #4
    7d78:	b2db      	uxtb	r3, r3
    7d7a:	b25b      	sxtb	r3, r3
    7d7c:	2207      	movs	r2, #7
    7d7e:	4013      	ands	r3, r2
    7d80:	b25a      	sxtb	r2, r3
    7d82:	2350      	movs	r3, #80	; 0x50
    7d84:	18fb      	adds	r3, r7, r3
    7d86:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
    7d88:	1cfb      	adds	r3, r7, #3
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	687a      	ldr	r2, [r7, #4]
    7d8e:	18d3      	adds	r3, r2, r3
    7d90:	781b      	ldrb	r3, [r3, #0]
    7d92:	b25b      	sxtb	r3, r3
    7d94:	220f      	movs	r2, #15
    7d96:	4013      	ands	r3, r2
    7d98:	b25a      	sxtb	r2, r3
    7d9a:	2350      	movs	r3, #80	; 0x50
    7d9c:	18fb      	adds	r3, r7, r3
    7d9e:	701a      	strb	r2, [r3, #0]
                macIndex++;
    7da0:	1cfb      	adds	r3, r7, #3
    7da2:	781a      	ldrb	r2, [r3, #0]
    7da4:	1cfb      	adds	r3, r7, #3
    7da6:	3201      	adds	r2, #1
    7da8:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
    7daa:	1cfb      	adds	r3, r7, #3
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	1cfa      	adds	r2, r7, #3
    7db0:	1c59      	adds	r1, r3, #1
    7db2:	7011      	strb	r1, [r2, #0]
    7db4:	001a      	movs	r2, r3
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	189b      	adds	r3, r3, r2
    7dba:	781b      	ldrb	r3, [r3, #0]
    7dbc:	001a      	movs	r2, r3
    7dbe:	2350      	movs	r3, #80	; 0x50
    7dc0:	18fb      	adds	r3, r7, r3
    7dc2:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    7dc4:	1cfb      	adds	r3, r7, #3
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	1cfa      	adds	r2, r7, #3
    7dca:	1c59      	adds	r1, r3, #1
    7dcc:	7011      	strb	r1, [r2, #0]
    7dce:	001a      	movs	r2, r3
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	189b      	adds	r3, r3, r2
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	021a      	lsls	r2, r3, #8
    7dd8:	2350      	movs	r3, #80	; 0x50
    7dda:	18fb      	adds	r3, r7, r3
    7ddc:	685b      	ldr	r3, [r3, #4]
    7dde:	431a      	orrs	r2, r3
    7de0:	2350      	movs	r3, #80	; 0x50
    7de2:	18fb      	adds	r3, r7, r3
    7de4:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    7de6:	1cfb      	adds	r3, r7, #3
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	1cfa      	adds	r2, r7, #3
    7dec:	1c59      	adds	r1, r3, #1
    7dee:	7011      	strb	r1, [r2, #0]
    7df0:	001a      	movs	r2, r3
    7df2:	687b      	ldr	r3, [r7, #4]
    7df4:	189b      	adds	r3, r3, r2
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	041a      	lsls	r2, r3, #16
    7dfa:	2350      	movs	r3, #80	; 0x50
    7dfc:	18fb      	adds	r3, r7, r3
    7dfe:	685b      	ldr	r3, [r3, #4]
    7e00:	431a      	orrs	r2, r3
    7e02:	2350      	movs	r3, #80	; 0x50
    7e04:	18fb      	adds	r3, r7, r3
    7e06:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
    7e08:	2350      	movs	r3, #80	; 0x50
    7e0a:	18fb      	adds	r3, r7, r3
    7e0c:	685b      	ldr	r3, [r3, #4]
    7e0e:	2264      	movs	r2, #100	; 0x64
    7e10:	435a      	muls	r2, r3
    7e12:	2350      	movs	r3, #80	; 0x50
    7e14:	18fb      	adds	r3, r7, r3
    7e16:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
    7e18:	4ba5      	ldr	r3, [pc, #660]	; (80b0 <ProcessMacCommands+0x680>)
    7e1a:	4aa6      	ldr	r2, [pc, #664]	; (80b4 <ProcessMacCommands+0x684>)
    7e1c:	589b      	ldr	r3, [r3, r2]
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	2250      	movs	r2, #80	; 0x50
    7e22:	18ba      	adds	r2, r7, r2
    7e24:	0011      	movs	r1, r2
    7e26:	0018      	movs	r0, r3
    7e28:	4ba3      	ldr	r3, [pc, #652]	; (80b8 <ProcessMacCommands+0x688>)
    7e2a:	4798      	blx	r3
    7e2c:	0003      	movs	r3, r0
    7e2e:	001a      	movs	r2, r3
    7e30:	2373      	movs	r3, #115	; 0x73
    7e32:	18fb      	adds	r3, r7, r3
    7e34:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
    7e36:	2373      	movs	r3, #115	; 0x73
    7e38:	18fb      	adds	r3, r7, r3
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	001a      	movs	r2, r3
    7e3e:	2307      	movs	r3, #7
    7e40:	4013      	ands	r3, r2
    7e42:	2b07      	cmp	r3, #7
    7e44:	d11b      	bne.n	7e7e <ProcessMacCommands+0x44e>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
    7e46:	4b9a      	ldr	r3, [pc, #616]	; (80b0 <ProcessMacCommands+0x680>)
    7e48:	4a9a      	ldr	r2, [pc, #616]	; (80b4 <ProcessMacCommands+0x684>)
    7e4a:	589b      	ldr	r3, [r3, r2]
    7e4c:	2250      	movs	r2, #80	; 0x50
    7e4e:	18ba      	adds	r2, r7, r2
    7e50:	7812      	ldrb	r2, [r2, #0]
    7e52:	b252      	sxtb	r2, r2
    7e54:	b2d1      	uxtb	r1, r2
    7e56:	22fc      	movs	r2, #252	; 0xfc
    7e58:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
    7e5a:	4b95      	ldr	r3, [pc, #596]	; (80b0 <ProcessMacCommands+0x680>)
    7e5c:	4a95      	ldr	r2, [pc, #596]	; (80b4 <ProcessMacCommands+0x684>)
    7e5e:	589a      	ldr	r2, [r3, r2]
    7e60:	2350      	movs	r3, #80	; 0x50
    7e62:	18fb      	adds	r3, r7, r3
    7e64:	685b      	ldr	r3, [r3, #4]
    7e66:	21f8      	movs	r1, #248	; 0xf8
    7e68:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
    7e6a:	4b91      	ldr	r3, [pc, #580]	; (80b0 <ProcessMacCommands+0x680>)
    7e6c:	4a91      	ldr	r2, [pc, #580]	; (80b4 <ProcessMacCommands+0x684>)
    7e6e:	589b      	ldr	r3, [r3, r2]
    7e70:	2250      	movs	r2, #80	; 0x50
    7e72:	18ba      	adds	r2, r7, r2
    7e74:	7852      	ldrb	r2, [r2, #1]
    7e76:	b252      	sxtb	r2, r2
    7e78:	b2d1      	uxtb	r1, r2
    7e7a:	22f5      	movs	r2, #245	; 0xf5
    7e7c:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
    7e7e:	2373      	movs	r3, #115	; 0x73
    7e80:	18fb      	adds	r3, r7, r3
    7e82:	781a      	ldrb	r2, [r3, #0]
    7e84:	2370      	movs	r3, #112	; 0x70
    7e86:	18fb      	adds	r3, r7, r3
    7e88:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
    7e8a:	2370      	movs	r3, #112	; 0x70
    7e8c:	18fb      	adds	r3, r7, r3
    7e8e:	2201      	movs	r2, #1
    7e90:	0019      	movs	r1, r3
    7e92:	2005      	movs	r0, #5
    7e94:	4b89      	ldr	r3, [pc, #548]	; (80bc <ProcessMacCommands+0x68c>)
    7e96:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    7e98:	4b89      	ldr	r3, [pc, #548]	; (80c0 <ProcessMacCommands+0x690>)
    7e9a:	4798      	blx	r3
                break;
    7e9c:	46c0      	nop			; (mov r8, r8)
    7e9e:	239f      	movs	r3, #159	; 0x9f
    7ea0:	18fb      	adds	r3, r7, r3
    7ea2:	229f      	movs	r2, #159	; 0x9f
    7ea4:	18ba      	adds	r2, r7, r2
    7ea6:	7812      	ldrb	r2, [r2, #0]
    7ea8:	701a      	strb	r2, [r3, #0]
    7eaa:	f000 fda4 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
    7eae:	239d      	movs	r3, #157	; 0x9d
    7eb0:	18fb      	adds	r3, r7, r3
    7eb2:	22ff      	movs	r2, #255	; 0xff
    7eb4:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
    7eb6:	4a7e      	ldr	r2, [pc, #504]	; (80b0 <ProcessMacCommands+0x680>)
    7eb8:	23d9      	movs	r3, #217	; 0xd9
    7eba:	009b      	lsls	r3, r3, #2
    7ebc:	58d3      	ldr	r3, [r2, r3]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d010      	beq.n	7ee4 <ProcessMacCommands+0x4b4>
    7ec2:	4a7b      	ldr	r2, [pc, #492]	; (80b0 <ProcessMacCommands+0x680>)
    7ec4:	23d9      	movs	r3, #217	; 0xd9
    7ec6:	009b      	lsls	r3, r3, #2
    7ec8:	58d3      	ldr	r3, [r2, r3]
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d009      	beq.n	7ee4 <ProcessMacCommands+0x4b4>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
    7ed0:	4a77      	ldr	r2, [pc, #476]	; (80b0 <ProcessMacCommands+0x680>)
    7ed2:	23d9      	movs	r3, #217	; 0xd9
    7ed4:	009b      	lsls	r3, r3, #2
    7ed6:	58d3      	ldr	r3, [r2, r3]
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	229d      	movs	r2, #157	; 0x9d
    7edc:	18bc      	adds	r4, r7, r2
    7ede:	4798      	blx	r3
    7ee0:	0003      	movs	r3, r0
    7ee2:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
    7ee4:	2370      	movs	r3, #112	; 0x70
    7ee6:	18fb      	adds	r3, r7, r3
    7ee8:	229d      	movs	r2, #157	; 0x9d
    7eea:	18ba      	adds	r2, r7, r2
    7eec:	7812      	ldrb	r2, [r2, #0]
    7eee:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = snr & 0x3F;
    7ef0:	1c7b      	adds	r3, r7, #1
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	223f      	movs	r2, #63	; 0x3f
    7ef6:	4013      	ands	r3, r2
    7ef8:	b2da      	uxtb	r2, r3
    7efa:	2370      	movs	r3, #112	; 0x70
    7efc:	18fb      	adds	r3, r7, r3
    7efe:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
    7f00:	2370      	movs	r3, #112	; 0x70
    7f02:	18fb      	adds	r3, r7, r3
    7f04:	2202      	movs	r2, #2
    7f06:	0019      	movs	r1, r3
    7f08:	2006      	movs	r0, #6
    7f0a:	4b6c      	ldr	r3, [pc, #432]	; (80bc <ProcessMacCommands+0x68c>)
    7f0c:	4798      	blx	r3
    7f0e:	239f      	movs	r3, #159	; 0x9f
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	229f      	movs	r2, #159	; 0x9f
    7f14:	18ba      	adds	r2, r7, r2
    7f16:	7812      	ldrb	r2, [r2, #0]
    7f18:	701a      	strb	r2, [r3, #0]
                break;
    7f1a:	f000 fd6c 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
    7f1e:	2373      	movs	r3, #115	; 0x73
    7f20:	18fb      	adds	r3, r7, r3
    7f22:	2203      	movs	r2, #3
    7f24:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
    7f26:	1cfb      	adds	r3, r7, #3
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	1cfa      	adds	r2, r7, #3
    7f2c:	1c59      	adds	r1, r3, #1
    7f2e:	7011      	strb	r1, [r2, #0]
    7f30:	001a      	movs	r2, r3
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	189b      	adds	r3, r3, r2
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	b25a      	sxtb	r2, r3
    7f3a:	2348      	movs	r3, #72	; 0x48
    7f3c:	18fb      	adds	r3, r7, r3
    7f3e:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
    7f40:	2348      	movs	r3, #72	; 0x48
    7f42:	18fb      	adds	r3, r7, r3
    7f44:	223c      	movs	r2, #60	; 0x3c
    7f46:	18ba      	adds	r2, r7, r2
    7f48:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
    7f4a:	1cfb      	adds	r3, r7, #3
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	1cfa      	adds	r2, r7, #3
    7f50:	1c59      	adds	r1, r3, #1
    7f52:	7011      	strb	r1, [r2, #0]
    7f54:	001a      	movs	r2, r3
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	189b      	adds	r3, r3, r2
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	001a      	movs	r2, r3
    7f5e:	233c      	movs	r3, #60	; 0x3c
    7f60:	18fb      	adds	r3, r7, r3
    7f62:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    7f64:	1cfb      	adds	r3, r7, #3
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	1cfa      	adds	r2, r7, #3
    7f6a:	1c59      	adds	r1, r3, #1
    7f6c:	7011      	strb	r1, [r2, #0]
    7f6e:	001a      	movs	r2, r3
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	189b      	adds	r3, r3, r2
    7f74:	781b      	ldrb	r3, [r3, #0]
    7f76:	021a      	lsls	r2, r3, #8
    7f78:	233c      	movs	r3, #60	; 0x3c
    7f7a:	18fb      	adds	r3, r7, r3
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	431a      	orrs	r2, r3
    7f80:	233c      	movs	r3, #60	; 0x3c
    7f82:	18fb      	adds	r3, r7, r3
    7f84:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    7f86:	1cfb      	adds	r3, r7, #3
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	1cfa      	adds	r2, r7, #3
    7f8c:	1c59      	adds	r1, r3, #1
    7f8e:	7011      	strb	r1, [r2, #0]
    7f90:	001a      	movs	r2, r3
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	189b      	adds	r3, r3, r2
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	041a      	lsls	r2, r3, #16
    7f9a:	233c      	movs	r3, #60	; 0x3c
    7f9c:	18fb      	adds	r3, r7, r3
    7f9e:	681b      	ldr	r3, [r3, #0]
    7fa0:	431a      	orrs	r2, r3
    7fa2:	233c      	movs	r3, #60	; 0x3c
    7fa4:	18fb      	adds	r3, r7, r3
    7fa6:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
    7fa8:	233c      	movs	r3, #60	; 0x3c
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	2264      	movs	r2, #100	; 0x64
    7fb0:	435a      	muls	r2, r3
    7fb2:	233c      	movs	r3, #60	; 0x3c
    7fb4:	18fb      	adds	r3, r7, r3
    7fb6:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
    7fb8:	233c      	movs	r3, #60	; 0x3c
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	2200      	movs	r2, #0
    7fbe:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
    7fc0:	1cfb      	adds	r3, r7, #3
    7fc2:	781b      	ldrb	r3, [r3, #0]
    7fc4:	1cfa      	adds	r2, r7, #3
    7fc6:	1c59      	adds	r1, r3, #1
    7fc8:	7011      	strb	r1, [r2, #0]
    7fca:	001a      	movs	r2, r3
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	189b      	adds	r3, r3, r2
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	b25a      	sxtb	r2, r3
    7fd4:	233c      	movs	r3, #60	; 0x3c
    7fd6:	18fb      	adds	r3, r7, r3
    7fd8:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
    7fda:	4b35      	ldr	r3, [pc, #212]	; (80b0 <ProcessMacCommands+0x680>)
    7fdc:	4a35      	ldr	r2, [pc, #212]	; (80b4 <ProcessMacCommands+0x684>)
    7fde:	589b      	ldr	r3, [r3, r2]
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	2248      	movs	r2, #72	; 0x48
    7fe4:	18ba      	adds	r2, r7, r2
    7fe6:	0011      	movs	r1, r2
    7fe8:	0018      	movs	r0, r3
    7fea:	4b36      	ldr	r3, [pc, #216]	; (80c4 <ProcessMacCommands+0x694>)
    7fec:	4798      	blx	r3
    7fee:	0003      	movs	r3, r0
    7ff0:	001a      	movs	r2, r3
    7ff2:	2373      	movs	r3, #115	; 0x73
    7ff4:	18fb      	adds	r3, r7, r3
    7ff6:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
    7ff8:	2373      	movs	r3, #115	; 0x73
    7ffa:	18fb      	adds	r3, r7, r3
    7ffc:	781a      	ldrb	r2, [r3, #0]
    7ffe:	2370      	movs	r3, #112	; 0x70
    8000:	18fb      	adds	r3, r7, r3
    8002:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
    8004:	2370      	movs	r3, #112	; 0x70
    8006:	18fb      	adds	r3, r7, r3
    8008:	2201      	movs	r2, #1
    800a:	0019      	movs	r1, r3
    800c:	2007      	movs	r0, #7
    800e:	4b2b      	ldr	r3, [pc, #172]	; (80bc <ProcessMacCommands+0x68c>)
    8010:	4798      	blx	r3
                break;
    8012:	46c0      	nop			; (mov r8, r8)
    8014:	239f      	movs	r3, #159	; 0x9f
    8016:	18fb      	adds	r3, r7, r3
    8018:	229f      	movs	r2, #159	; 0x9f
    801a:	18ba      	adds	r2, r7, r2
    801c:	7812      	ldrb	r2, [r2, #0]
    801e:	701a      	strb	r2, [r3, #0]
    8020:	f000 fce9 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
    8024:	1cfb      	adds	r3, r7, #3
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	1cfa      	adds	r2, r7, #3
    802a:	1c59      	adds	r1, r3, #1
    802c:	7011      	strb	r1, [r2, #0]
    802e:	001a      	movs	r2, r3
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	189b      	adds	r3, r3, r2
    8034:	781a      	ldrb	r2, [r3, #0]
    8036:	239c      	movs	r3, #156	; 0x9c
    8038:	18fb      	adds	r3, r7, r3
    803a:	210f      	movs	r1, #15
    803c:	400a      	ands	r2, r1
    803e:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
    8040:	239c      	movs	r3, #156	; 0x9c
    8042:	18fb      	adds	r3, r7, r3
    8044:	781b      	ldrb	r3, [r3, #0]
    8046:	2b00      	cmp	r3, #0
    8048:	d106      	bne.n	8058 <ProcessMacCommands+0x628>
                {
                    delay++;
    804a:	239c      	movs	r3, #156	; 0x9c
    804c:	18fb      	adds	r3, r7, r3
    804e:	781a      	ldrb	r2, [r3, #0]
    8050:	239c      	movs	r3, #156	; 0x9c
    8052:	18fb      	adds	r3, r7, r3
    8054:	3201      	adds	r2, #1
    8056:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
    8058:	4b15      	ldr	r3, [pc, #84]	; (80b0 <ProcessMacCommands+0x680>)
    805a:	4a16      	ldr	r2, [pc, #88]	; (80b4 <ProcessMacCommands+0x684>)
    805c:	589b      	ldr	r3, [r3, r2]
    805e:	229c      	movs	r2, #156	; 0x9c
    8060:	18ba      	adds	r2, r7, r2
    8062:	7812      	ldrb	r2, [r2, #0]
    8064:	21fa      	movs	r1, #250	; 0xfa
    8066:	0089      	lsls	r1, r1, #2
    8068:	434a      	muls	r2, r1
    806a:	0011      	movs	r1, r2
    806c:	22e4      	movs	r2, #228	; 0xe4
    806e:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    8070:	4b0f      	ldr	r3, [pc, #60]	; (80b0 <ProcessMacCommands+0x680>)
    8072:	4a10      	ldr	r2, [pc, #64]	; (80b4 <ProcessMacCommands+0x684>)
    8074:	589b      	ldr	r3, [r3, r2]
    8076:	4a0e      	ldr	r2, [pc, #56]	; (80b0 <ProcessMacCommands+0x680>)
    8078:	490e      	ldr	r1, [pc, #56]	; (80b4 <ProcessMacCommands+0x684>)
    807a:	5852      	ldr	r2, [r2, r1]
    807c:	21e4      	movs	r1, #228	; 0xe4
    807e:	5852      	ldr	r2, [r2, r1]
    8080:	21fa      	movs	r1, #250	; 0xfa
    8082:	0089      	lsls	r1, r1, #2
    8084:	468c      	mov	ip, r1
    8086:	4462      	add	r2, ip
    8088:	21e8      	movs	r1, #232	; 0xe8
    808a:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
    808c:	2370      	movs	r3, #112	; 0x70
    808e:	18fb      	adds	r3, r7, r3
    8090:	2200      	movs	r2, #0
    8092:	0019      	movs	r1, r3
    8094:	2008      	movs	r0, #8
    8096:	4b09      	ldr	r3, [pc, #36]	; (80bc <ProcessMacCommands+0x68c>)
    8098:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    809a:	4b09      	ldr	r3, [pc, #36]	; (80c0 <ProcessMacCommands+0x690>)
    809c:	4798      	blx	r3
    809e:	239f      	movs	r3, #159	; 0x9f
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	229f      	movs	r2, #159	; 0x9f
    80a4:	18ba      	adds	r2, r7, r2
    80a6:	7812      	ldrb	r2, [r2, #0]
    80a8:	701a      	strb	r2, [r3, #0]
                break;
    80aa:	f000 fca4 	bl	89f6 <ProcessMacCommands+0xfc6>
    80ae:	46c0      	nop			; (mov r8, r8)
    80b0:	20000c8c 	.word	0x20000c8c
    80b4:	000004c4 	.word	0x000004c4
    80b8:	00010149 	.word	0x00010149
    80bc:	0000cb11 	.word	0x0000cb11
    80c0:	00007a05 	.word	0x00007a05
    80c4:	00010179 	.word	0x00010179
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
    80c8:	1cfb      	adds	r3, r7, #3
    80ca:	781b      	ldrb	r3, [r3, #0]
    80cc:	1cfa      	adds	r2, r7, #3
    80ce:	1c59      	adds	r1, r3, #1
    80d0:	7011      	strb	r1, [r2, #0]
    80d2:	001a      	movs	r2, r3
    80d4:	687b      	ldr	r3, [r7, #4]
    80d6:	189a      	adds	r2, r3, r2
    80d8:	2399      	movs	r3, #153	; 0x99
    80da:	18fb      	adds	r3, r7, r3
    80dc:	7812      	ldrb	r2, [r2, #0]
    80de:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
    80e0:	2338      	movs	r3, #56	; 0x38
    80e2:	18fb      	adds	r3, r7, r3
    80e4:	2200      	movs	r2, #0
    80e6:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
    80e8:	2338      	movs	r3, #56	; 0x38
    80ea:	18fb      	adds	r3, r7, r3
    80ec:	2200      	movs	r2, #0
    80ee:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
    80f0:	2399      	movs	r3, #153	; 0x99
    80f2:	18fb      	adds	r3, r7, r3
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	2220      	movs	r2, #32
    80f8:	4013      	ands	r3, r2
    80fa:	d003      	beq.n	8104 <ProcessMacCommands+0x6d4>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
    80fc:	2338      	movs	r3, #56	; 0x38
    80fe:	18fb      	adds	r3, r7, r3
    8100:	2201      	movs	r2, #1
    8102:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
    8104:	2399      	movs	r3, #153	; 0x99
    8106:	18fb      	adds	r3, r7, r3
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	2210      	movs	r2, #16
    810c:	4013      	ands	r3, r2
    810e:	d003      	beq.n	8118 <ProcessMacCommands+0x6e8>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
    8110:	2338      	movs	r3, #56	; 0x38
    8112:	18fb      	adds	r3, r7, r3
    8114:	2201      	movs	r2, #1
    8116:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
    8118:	2399      	movs	r3, #153	; 0x99
    811a:	18fb      	adds	r3, r7, r3
    811c:	781b      	ldrb	r3, [r3, #0]
    811e:	220f      	movs	r2, #15
    8120:	4013      	ands	r3, r2
    8122:	b2da      	uxtb	r2, r3
    8124:	2338      	movs	r3, #56	; 0x38
    8126:	18fb      	adds	r3, r7, r3
    8128:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
    812a:	4be3      	ldr	r3, [pc, #908]	; (84b8 <ProcessMacCommands+0xa88>)
    812c:	4ae3      	ldr	r2, [pc, #908]	; (84bc <ProcessMacCommands+0xa8c>)
    812e:	589b      	ldr	r3, [r3, r2]
    8130:	781b      	ldrb	r3, [r3, #0]
    8132:	2238      	movs	r2, #56	; 0x38
    8134:	18ba      	adds	r2, r7, r2
    8136:	0011      	movs	r1, r2
    8138:	0018      	movs	r0, r3
    813a:	4be1      	ldr	r3, [pc, #900]	; (84c0 <ProcessMacCommands+0xa90>)
    813c:	4798      	blx	r3
    813e:	0003      	movs	r3, r0
    8140:	3301      	adds	r3, #1
    8142:	d059      	beq.n	81f8 <ProcessMacCommands+0x7c8>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
    8144:	4bdc      	ldr	r3, [pc, #880]	; (84b8 <ProcessMacCommands+0xa88>)
    8146:	4add      	ldr	r2, [pc, #884]	; (84bc <ProcessMacCommands+0xa8c>)
    8148:	589a      	ldr	r2, [r3, r2]
    814a:	2338      	movs	r3, #56	; 0x38
    814c:	18fb      	adds	r3, r7, r3
    814e:	7819      	ldrb	r1, [r3, #0]
    8150:	2380      	movs	r3, #128	; 0x80
    8152:	005b      	lsls	r3, r3, #1
    8154:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
    8156:	4bd8      	ldr	r3, [pc, #864]	; (84b8 <ProcessMacCommands+0xa88>)
    8158:	4ad8      	ldr	r2, [pc, #864]	; (84bc <ProcessMacCommands+0xa8c>)
    815a:	589a      	ldr	r2, [r3, r2]
    815c:	2338      	movs	r3, #56	; 0x38
    815e:	18fb      	adds	r3, r7, r3
    8160:	7859      	ldrb	r1, [r3, #1]
    8162:	2302      	movs	r3, #2
    8164:	33ff      	adds	r3, #255	; 0xff
    8166:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
    8168:	4bd3      	ldr	r3, [pc, #844]	; (84b8 <ProcessMacCommands+0xa88>)
    816a:	4ad4      	ldr	r2, [pc, #848]	; (84bc <ProcessMacCommands+0xa8c>)
    816c:	589c      	ldr	r4, [r3, r2]
    816e:	2338      	movs	r3, #56	; 0x38
    8170:	18fb      	adds	r3, r7, r3
    8172:	789b      	ldrb	r3, [r3, #2]
    8174:	001a      	movs	r2, r3
    8176:	4bd3      	ldr	r3, [pc, #844]	; (84c4 <ProcessMacCommands+0xa94>)
    8178:	5c9a      	ldrb	r2, [r3, r2]
    817a:	4bd3      	ldr	r3, [pc, #844]	; (84c8 <ProcessMacCommands+0xa98>)
    817c:	0010      	movs	r0, r2
    817e:	4798      	blx	r3
    8180:	1c02      	adds	r2, r0, #0
    8182:	2382      	movs	r3, #130	; 0x82
    8184:	005b      	lsls	r3, r3, #1
    8186:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
    8188:	2334      	movs	r3, #52	; 0x34
    818a:	18fb      	adds	r3, r7, r3
    818c:	2201      	movs	r2, #1
    818e:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    8190:	4bc9      	ldr	r3, [pc, #804]	; (84b8 <ProcessMacCommands+0xa88>)
    8192:	4aca      	ldr	r2, [pc, #808]	; (84bc <ProcessMacCommands+0xa8c>)
    8194:	589a      	ldr	r2, [r3, r2]
    8196:	2380      	movs	r3, #128	; 0x80
    8198:	005b      	lsls	r3, r3, #1
    819a:	5cd2      	ldrb	r2, [r2, r3]
    819c:	2334      	movs	r3, #52	; 0x34
    819e:	18fb      	adds	r3, r7, r3
    81a0:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    81a2:	4bc5      	ldr	r3, [pc, #788]	; (84b8 <ProcessMacCommands+0xa88>)
    81a4:	4ac5      	ldr	r2, [pc, #788]	; (84bc <ProcessMacCommands+0xa8c>)
    81a6:	589b      	ldr	r3, [r3, r2]
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	2234      	movs	r2, #52	; 0x34
    81ac:	18ba      	adds	r2, r7, r2
    81ae:	0011      	movs	r1, r2
    81b0:	0018      	movs	r0, r3
    81b2:	4bc6      	ldr	r3, [pc, #792]	; (84cc <ProcessMacCommands+0xa9c>)
    81b4:	4798      	blx	r3
    81b6:	0003      	movs	r3, r0
    81b8:	001a      	movs	r2, r3
    81ba:	2330      	movs	r3, #48	; 0x30
    81bc:	18fb      	adds	r3, r7, r3
    81be:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
    81c0:	4bbd      	ldr	r3, [pc, #756]	; (84b8 <ProcessMacCommands+0xa88>)
    81c2:	4abe      	ldr	r2, [pc, #760]	; (84bc <ProcessMacCommands+0xa8c>)
    81c4:	589a      	ldr	r2, [r3, r2]
    81c6:	2330      	movs	r3, #48	; 0x30
    81c8:	18fb      	adds	r3, r7, r3
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	b258      	sxtb	r0, r3
    81ce:	4bba      	ldr	r3, [pc, #744]	; (84b8 <ProcessMacCommands+0xa88>)
    81d0:	49ba      	ldr	r1, [pc, #744]	; (84bc <ProcessMacCommands+0xa8c>)
    81d2:	585b      	ldr	r3, [r3, r1]
    81d4:	21d5      	movs	r1, #213	; 0xd5
    81d6:	565b      	ldrsb	r3, [r3, r1]
    81d8:	1c1c      	adds	r4, r3, #0
    81da:	b241      	sxtb	r1, r0
    81dc:	b263      	sxtb	r3, r4
    81de:	4299      	cmp	r1, r3
    81e0:	da00      	bge.n	81e4 <ProcessMacCommands+0x7b4>
    81e2:	1c20      	adds	r0, r4, #0
    81e4:	b241      	sxtb	r1, r0
    81e6:	23d5      	movs	r3, #213	; 0xd5
    81e8:	54d1      	strb	r1, [r2, r3]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
    81ea:	2370      	movs	r3, #112	; 0x70
    81ec:	18fb      	adds	r3, r7, r3
    81ee:	2200      	movs	r2, #0
    81f0:	0019      	movs	r1, r3
    81f2:	2009      	movs	r0, #9
    81f4:	4bb6      	ldr	r3, [pc, #728]	; (84d0 <ProcessMacCommands+0xaa0>)
    81f6:	4798      	blx	r3
                }
                break;
    81f8:	46c0      	nop			; (mov r8, r8)
    81fa:	239f      	movs	r3, #159	; 0x9f
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	229f      	movs	r2, #159	; 0x9f
    8200:	18ba      	adds	r2, r7, r2
    8202:	7812      	ldrb	r2, [r2, #0]
    8204:	701a      	strb	r2, [r3, #0]
    8206:	f000 fbf6 	bl	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_REKEY_CONF:
            {
                uint8_t serverMinorVersion = payload[macIndex++];
    820a:	1cfb      	adds	r3, r7, #3
    820c:	781b      	ldrb	r3, [r3, #0]
    820e:	1cfa      	adds	r2, r7, #3
    8210:	1c59      	adds	r1, r3, #1
    8212:	7011      	strb	r1, [r2, #0]
    8214:	001a      	movs	r2, r3
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	189a      	adds	r2, r3, r2
    821a:	2398      	movs	r3, #152	; 0x98
    821c:	18fb      	adds	r3, r7, r3
    821e:	7812      	ldrb	r2, [r2, #0]
    8220:	701a      	strb	r2, [r3, #0]

                // Compare own LoRaWAN Version with server's
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    8222:	4ba5      	ldr	r3, [pc, #660]	; (84b8 <ProcessMacCommands+0xa88>)
    8224:	4aa5      	ldr	r2, [pc, #660]	; (84bc <ProcessMacCommands+0xa8c>)
    8226:	589b      	ldr	r3, [r3, r2]
    8228:	4aaa      	ldr	r2, [pc, #680]	; (84d4 <ProcessMacCommands+0xaa4>)
    822a:	5c9b      	ldrb	r3, [r3, r2]
    822c:	2298      	movs	r2, #152	; 0x98
    822e:	18ba      	adds	r2, r7, r2
    8230:	7812      	ldrb	r2, [r2, #0]
    8232:	429a      	cmp	r2, r3
    8234:	d109      	bne.n	824a <ProcessMacCommands+0x81a>
                {
                    // If they equal remove the sticky RekeyInd MAC-Command.
                    LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd);
    8236:	236c      	movs	r3, #108	; 0x6c
    8238:	18fb      	adds	r3, r7, r3
    823a:	0019      	movs	r1, r3
    823c:	200b      	movs	r0, #11
    823e:	4ba6      	ldr	r3, [pc, #664]	; (84d8 <ProcessMacCommands+0xaa8>)
    8240:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    8242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    8244:	0018      	movs	r0, r3
    8246:	4ba5      	ldr	r3, [pc, #660]	; (84dc <ProcessMacCommands+0xaac>)
    8248:	4798      	blx	r3
    824a:	239f      	movs	r3, #159	; 0x9f
    824c:	18fb      	adds	r3, r7, r3
    824e:	229f      	movs	r2, #159	; 0x9f
    8250:	18ba      	adds	r2, r7, r2
    8252:	7812      	ldrb	r2, [r2, #0]
    8254:	701a      	strb	r2, [r3, #0]
                }
                break;
    8256:	e3ce      	b.n	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
    8258:	2373      	movs	r3, #115	; 0x73
    825a:	18fb      	adds	r3, r7, r3
    825c:	2203      	movs	r2, #3
    825e:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
    8260:	1cfb      	adds	r3, r7, #3
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	1cfa      	adds	r2, r7, #3
    8266:	1c59      	adds	r1, r3, #1
    8268:	7011      	strb	r1, [r2, #0]
    826a:	001a      	movs	r2, r3
    826c:	687b      	ldr	r3, [r7, #4]
    826e:	189b      	adds	r3, r3, r2
    8270:	781a      	ldrb	r2, [r3, #0]
    8272:	2328      	movs	r3, #40	; 0x28
    8274:	18fb      	adds	r3, r7, r3
    8276:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
    8278:	1cfb      	adds	r3, r7, #3
    827a:	781b      	ldrb	r3, [r3, #0]
    827c:	1cfa      	adds	r2, r7, #3
    827e:	1c59      	adds	r1, r3, #1
    8280:	7011      	strb	r1, [r2, #0]
    8282:	001a      	movs	r2, r3
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	189b      	adds	r3, r3, r2
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	001a      	movs	r2, r3
    828c:	2328      	movs	r3, #40	; 0x28
    828e:	18fb      	adds	r3, r7, r3
    8290:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    8292:	1cfb      	adds	r3, r7, #3
    8294:	781b      	ldrb	r3, [r3, #0]
    8296:	1cfa      	adds	r2, r7, #3
    8298:	1c59      	adds	r1, r3, #1
    829a:	7011      	strb	r1, [r2, #0]
    829c:	001a      	movs	r2, r3
    829e:	687b      	ldr	r3, [r7, #4]
    82a0:	189b      	adds	r3, r3, r2
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	021a      	lsls	r2, r3, #8
    82a6:	2328      	movs	r3, #40	; 0x28
    82a8:	18fb      	adds	r3, r7, r3
    82aa:	685b      	ldr	r3, [r3, #4]
    82ac:	431a      	orrs	r2, r3
    82ae:	2328      	movs	r3, #40	; 0x28
    82b0:	18fb      	adds	r3, r7, r3
    82b2:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    82b4:	1cfb      	adds	r3, r7, #3
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	1cfa      	adds	r2, r7, #3
    82ba:	1c59      	adds	r1, r3, #1
    82bc:	7011      	strb	r1, [r2, #0]
    82be:	001a      	movs	r2, r3
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	189b      	adds	r3, r3, r2
    82c4:	781b      	ldrb	r3, [r3, #0]
    82c6:	041a      	lsls	r2, r3, #16
    82c8:	2328      	movs	r3, #40	; 0x28
    82ca:	18fb      	adds	r3, r7, r3
    82cc:	685b      	ldr	r3, [r3, #4]
    82ce:	431a      	orrs	r2, r3
    82d0:	2328      	movs	r3, #40	; 0x28
    82d2:	18fb      	adds	r3, r7, r3
    82d4:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
    82d6:	2328      	movs	r3, #40	; 0x28
    82d8:	18fb      	adds	r3, r7, r3
    82da:	685b      	ldr	r3, [r3, #4]
    82dc:	2264      	movs	r2, #100	; 0x64
    82de:	435a      	muls	r2, r3
    82e0:	2328      	movs	r3, #40	; 0x28
    82e2:	18fb      	adds	r3, r7, r3
    82e4:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
    82e6:	4b74      	ldr	r3, [pc, #464]	; (84b8 <ProcessMacCommands+0xa88>)
    82e8:	4a74      	ldr	r2, [pc, #464]	; (84bc <ProcessMacCommands+0xa8c>)
    82ea:	589b      	ldr	r3, [r3, r2]
    82ec:	781b      	ldrb	r3, [r3, #0]
    82ee:	2228      	movs	r2, #40	; 0x28
    82f0:	18ba      	adds	r2, r7, r2
    82f2:	0011      	movs	r1, r2
    82f4:	0018      	movs	r0, r3
    82f6:	4b7a      	ldr	r3, [pc, #488]	; (84e0 <ProcessMacCommands+0xab0>)
    82f8:	4798      	blx	r3
    82fa:	0003      	movs	r3, r0
    82fc:	001a      	movs	r2, r3
    82fe:	2373      	movs	r3, #115	; 0x73
    8300:	18fb      	adds	r3, r7, r3
    8302:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
    8304:	2373      	movs	r3, #115	; 0x73
    8306:	18fb      	adds	r3, r7, r3
    8308:	781a      	ldrb	r2, [r3, #0]
    830a:	2370      	movs	r3, #112	; 0x70
    830c:	18fb      	adds	r3, r7, r3
    830e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
    8310:	2370      	movs	r3, #112	; 0x70
    8312:	18fb      	adds	r3, r7, r3
    8314:	2201      	movs	r2, #1
    8316:	0019      	movs	r1, r3
    8318:	200a      	movs	r0, #10
    831a:	4b6d      	ldr	r3, [pc, #436]	; (84d0 <ProcessMacCommands+0xaa0>)
    831c:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    831e:	4b71      	ldr	r3, [pc, #452]	; (84e4 <ProcessMacCommands+0xab4>)
    8320:	4798      	blx	r3
                break;
    8322:	46c0      	nop			; (mov r8, r8)
    8324:	239f      	movs	r3, #159	; 0x9f
    8326:	18fb      	adds	r3, r7, r3
    8328:	229f      	movs	r2, #159	; 0x9f
    832a:	18ba      	adds	r2, r7, r2
    832c:	7812      	ldrb	r2, [r2, #0]
    832e:	701a      	strb	r2, [r3, #0]
    8330:	e361      	b.n	89f6 <ProcessMacCommands+0xfc6>
                 * +----------------+---------------+
                 * | 7:4 Limit_exp  | 3:0 Delay_exp |
                 * +----------------+---------------+
                 */

                uint8_t delayExp = 0x0F & payload[macIndex];
    8332:	1cfb      	adds	r3, r7, #3
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	687a      	ldr	r2, [r7, #4]
    8338:	18d3      	adds	r3, r2, r3
    833a:	781a      	ldrb	r2, [r3, #0]
    833c:	2397      	movs	r3, #151	; 0x97
    833e:	18fb      	adds	r3, r7, r3
    8340:	210f      	movs	r1, #15
    8342:	400a      	ands	r2, r1
    8344:	701a      	strb	r2, [r3, #0]
                uint8_t limitExp = 0x0F & ( payload[macIndex] >> 4 );
    8346:	1cfb      	adds	r3, r7, #3
    8348:	781b      	ldrb	r3, [r3, #0]
    834a:	687a      	ldr	r2, [r7, #4]
    834c:	18d3      	adds	r3, r2, r3
    834e:	781a      	ldrb	r2, [r3, #0]
    8350:	2396      	movs	r3, #150	; 0x96
    8352:	18fb      	adds	r3, r7, r3
    8354:	0912      	lsrs	r2, r2, #4
    8356:	701a      	strb	r2, [r3, #0]
                macIndex++;
    8358:	1cfb      	adds	r3, r7, #3
    835a:	781a      	ldrb	r2, [r3, #0]
    835c:	1cfb      	adds	r3, r7, #3
    835e:	3201      	adds	r2, #1
    8360:	701a      	strb	r2, [r3, #0]

                // ADR_ACK_ DELAY = 2^Delay_exp
                MacCtx.NvmCtx->AdrAckDelay = 0x01 << delayExp;
    8362:	4b55      	ldr	r3, [pc, #340]	; (84b8 <ProcessMacCommands+0xa88>)
    8364:	4a55      	ldr	r2, [pc, #340]	; (84bc <ProcessMacCommands+0xa8c>)
    8366:	589b      	ldr	r3, [r3, r2]
    8368:	2297      	movs	r2, #151	; 0x97
    836a:	18ba      	adds	r2, r7, r2
    836c:	7812      	ldrb	r2, [r2, #0]
    836e:	2101      	movs	r1, #1
    8370:	4091      	lsls	r1, r2
    8372:	000a      	movs	r2, r1
    8374:	b291      	uxth	r1, r2
    8376:	22d2      	movs	r2, #210	; 0xd2
    8378:	5299      	strh	r1, [r3, r2]

                // ADR_ACK_LIMIT = 2^Limit_exp
                MacCtx.NvmCtx->AdrAckLimit = 0x01 << limitExp;
    837a:	4b4f      	ldr	r3, [pc, #316]	; (84b8 <ProcessMacCommands+0xa88>)
    837c:	4a4f      	ldr	r2, [pc, #316]	; (84bc <ProcessMacCommands+0xa8c>)
    837e:	589b      	ldr	r3, [r3, r2]
    8380:	2296      	movs	r2, #150	; 0x96
    8382:	18ba      	adds	r2, r7, r2
    8384:	7812      	ldrb	r2, [r2, #0]
    8386:	2101      	movs	r1, #1
    8388:	4091      	lsls	r1, r2
    838a:	000a      	movs	r2, r1
    838c:	b291      	uxth	r1, r2
    838e:	22d0      	movs	r2, #208	; 0xd0
    8390:	5299      	strh	r1, [r3, r2]

                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
    8392:	2370      	movs	r3, #112	; 0x70
    8394:	18fb      	adds	r3, r7, r3
    8396:	2200      	movs	r2, #0
    8398:	0019      	movs	r1, r3
    839a:	200c      	movs	r0, #12
    839c:	4b4c      	ldr	r3, [pc, #304]	; (84d0 <ProcessMacCommands+0xaa0>)
    839e:	4798      	blx	r3
    83a0:	239f      	movs	r3, #159	; 0x9f
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	229f      	movs	r2, #159	; 0x9f
    83a6:	18ba      	adds	r2, r7, r2
    83a8:	7812      	ldrb	r2, [r2, #0]
    83aa:	701a      	strb	r2, [r3, #0]
                break;
    83ac:	e323      	b.n	89f6 <ProcessMacCommands+0xfc6>
                 * | 13:11 Period | 10:8 Max_Retries | 7 RFU | 6:4 RejoinType | 3:0 DR |
                 * +--------------+------------------+-------+----------------+--------+
                 */

                // Parse payload
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
    83ae:	1cfb      	adds	r3, r7, #3
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	687a      	ldr	r2, [r7, #4]
    83b4:	18d3      	adds	r3, r2, r3
    83b6:	781b      	ldrb	r3, [r3, #0]
    83b8:	08db      	lsrs	r3, r3, #3
    83ba:	b2da      	uxtb	r2, r3
    83bc:	2395      	movs	r3, #149	; 0x95
    83be:	18fb      	adds	r3, r7, r3
    83c0:	2107      	movs	r1, #7
    83c2:	400a      	ands	r2, r1
    83c4:	701a      	strb	r2, [r3, #0]
                MacCtx.NvmCtx->ForceRejoinMaxRetries = 0x07 & payload[macIndex];
    83c6:	4b3c      	ldr	r3, [pc, #240]	; (84b8 <ProcessMacCommands+0xa88>)
    83c8:	4a3c      	ldr	r2, [pc, #240]	; (84bc <ProcessMacCommands+0xa8c>)
    83ca:	589b      	ldr	r3, [r3, r2]
    83cc:	1cfa      	adds	r2, r7, #3
    83ce:	7812      	ldrb	r2, [r2, #0]
    83d0:	6879      	ldr	r1, [r7, #4]
    83d2:	188a      	adds	r2, r1, r2
    83d4:	7812      	ldrb	r2, [r2, #0]
    83d6:	2107      	movs	r1, #7
    83d8:	400a      	ands	r2, r1
    83da:	b2d1      	uxtb	r1, r2
    83dc:	4a42      	ldr	r2, [pc, #264]	; (84e8 <ProcessMacCommands+0xab8>)
    83de:	5499      	strb	r1, [r3, r2]
                macIndex++;
    83e0:	1cfb      	adds	r3, r7, #3
    83e2:	781a      	ldrb	r2, [r3, #0]
    83e4:	1cfb      	adds	r3, r7, #3
    83e6:	3201      	adds	r2, #1
    83e8:	701a      	strb	r2, [r3, #0]
                MacCtx.NvmCtx->ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
    83ea:	4b33      	ldr	r3, [pc, #204]	; (84b8 <ProcessMacCommands+0xa88>)
    83ec:	4a33      	ldr	r2, [pc, #204]	; (84bc <ProcessMacCommands+0xa8c>)
    83ee:	589a      	ldr	r2, [r3, r2]
    83f0:	1cfb      	adds	r3, r7, #3
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	6879      	ldr	r1, [r7, #4]
    83f6:	18cb      	adds	r3, r1, r3
    83f8:	781b      	ldrb	r3, [r3, #0]
    83fa:	091b      	lsrs	r3, r3, #4
    83fc:	b2db      	uxtb	r3, r3
    83fe:	2107      	movs	r1, #7
    8400:	400b      	ands	r3, r1
    8402:	b2d9      	uxtb	r1, r3
    8404:	238a      	movs	r3, #138	; 0x8a
    8406:	009b      	lsls	r3, r3, #2
    8408:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = 0x0F & payload[macIndex];
    840a:	4b2b      	ldr	r3, [pc, #172]	; (84b8 <ProcessMacCommands+0xa88>)
    840c:	4a2b      	ldr	r2, [pc, #172]	; (84bc <ProcessMacCommands+0xa8c>)
    840e:	589b      	ldr	r3, [r3, r2]
    8410:	1cfa      	adds	r2, r7, #3
    8412:	7812      	ldrb	r2, [r2, #0]
    8414:	6879      	ldr	r1, [r7, #4]
    8416:	188a      	adds	r2, r1, r2
    8418:	7812      	ldrb	r2, [r2, #0]
    841a:	b252      	sxtb	r2, r2
    841c:	210f      	movs	r1, #15
    841e:	400a      	ands	r2, r1
    8420:	b251      	sxtb	r1, r2
    8422:	22d5      	movs	r2, #213	; 0xd5
    8424:	5499      	strb	r1, [r3, r2]
                macIndex ++;
    8426:	1cfb      	adds	r3, r7, #3
    8428:	781a      	ldrb	r2, [r3, #0]
    842a:	1cfb      	adds	r3, r7, #3
    842c:	3201      	adds	r2, #1
    842e:	701a      	strb	r2, [r3, #0]

                // Calc delay between retransmissions: 32 seconds x 2^Period + Rand32
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
    8430:	2395      	movs	r3, #149	; 0x95
    8432:	18fb      	adds	r3, r7, r3
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	2220      	movs	r2, #32
    8438:	409a      	lsls	r2, r3
    843a:	0014      	movs	r4, r2
    843c:	2120      	movs	r1, #32
    843e:	2000      	movs	r0, #0
    8440:	4b2a      	ldr	r3, [pc, #168]	; (84ec <ProcessMacCommands+0xabc>)
    8442:	4798      	blx	r3
    8444:	0003      	movs	r3, r0
    8446:	18e3      	adds	r3, r4, r3
    8448:	2290      	movs	r2, #144	; 0x90
    844a:	18ba      	adds	r2, r7, r2
    844c:	6013      	str	r3, [r2, #0]

                uint32_t forceRejoinReqCycleTime = 0;
    844e:	2300      	movs	r3, #0
    8450:	627b      	str	r3, [r7, #36]	; 0x24
                ConvertRejoinCycleTime( rejoinCycleInSec, &forceRejoinReqCycleTime );
    8452:	2324      	movs	r3, #36	; 0x24
    8454:	18fa      	adds	r2, r7, r3
    8456:	2390      	movs	r3, #144	; 0x90
    8458:	18fb      	adds	r3, r7, r3
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	0011      	movs	r1, r2
    845e:	0018      	movs	r0, r3
    8460:	4b23      	ldr	r3, [pc, #140]	; (84f0 <ProcessMacCommands+0xac0>)
    8462:	4798      	blx	r3
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
    8464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8466:	4b23      	ldr	r3, [pc, #140]	; (84f4 <ProcessMacCommands+0xac4>)
    8468:	0011      	movs	r1, r2
    846a:	0018      	movs	r0, r3
    846c:	4b22      	ldr	r3, [pc, #136]	; (84f8 <ProcessMacCommands+0xac8>)
    846e:	4798      	blx	r3

                if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    8470:	4b11      	ldr	r3, [pc, #68]	; (84b8 <ProcessMacCommands+0xa88>)
    8472:	4a12      	ldr	r2, [pc, #72]	; (84bc <ProcessMacCommands+0xa8c>)
    8474:	589a      	ldr	r2, [r3, r2]
    8476:	238a      	movs	r3, #138	; 0x8a
    8478:	009b      	lsls	r3, r3, #2
    847a:	5cd3      	ldrb	r3, [r2, r3]
    847c:	2b00      	cmp	r3, #0
    847e:	d007      	beq.n	8490 <ProcessMacCommands+0xa60>
    8480:	4b0d      	ldr	r3, [pc, #52]	; (84b8 <ProcessMacCommands+0xa88>)
    8482:	4a0e      	ldr	r2, [pc, #56]	; (84bc <ProcessMacCommands+0xa8c>)
    8484:	589a      	ldr	r2, [r3, r2]
    8486:	238a      	movs	r3, #138	; 0x8a
    8488:	009b      	lsls	r3, r3, #2
    848a:	5cd3      	ldrb	r3, [r2, r3]
    848c:	2b01      	cmp	r3, #1
    848e:	d103      	bne.n	8498 <ProcessMacCommands+0xa68>
                {
                    SendReJoinReq( REJOIN_REQ_0 );
    8490:	2000      	movs	r0, #0
    8492:	4b1a      	ldr	r3, [pc, #104]	; (84fc <ProcessMacCommands+0xacc>)
    8494:	4798      	blx	r3
    8496:	e002      	b.n	849e <ProcessMacCommands+0xa6e>
                }
                else
                {
                    SendReJoinReq( REJOIN_REQ_2 );
    8498:	2002      	movs	r0, #2
    849a:	4b18      	ldr	r3, [pc, #96]	; (84fc <ProcessMacCommands+0xacc>)
    849c:	4798      	blx	r3
                }
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
    849e:	4b15      	ldr	r3, [pc, #84]	; (84f4 <ProcessMacCommands+0xac4>)
    84a0:	0018      	movs	r0, r3
    84a2:	4b17      	ldr	r3, [pc, #92]	; (8500 <ProcessMacCommands+0xad0>)
    84a4:	4798      	blx	r3
                break;
    84a6:	46c0      	nop			; (mov r8, r8)
    84a8:	239f      	movs	r3, #159	; 0x9f
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	229f      	movs	r2, #159	; 0x9f
    84ae:	18ba      	adds	r2, r7, r2
    84b0:	7812      	ldrb	r2, [r2, #0]
    84b2:	701a      	strb	r2, [r3, #0]
    84b4:	e29f      	b.n	89f6 <ProcessMacCommands+0xfc6>
    84b6:	46c0      	nop			; (mov r8, r8)
    84b8:	20000c8c 	.word	0x20000c8c
    84bc:	000004c4 	.word	0x000004c4
    84c0:	000101a9 	.word	0x000101a9
    84c4:	0001f310 	.word	0x0001f310
    84c8:	00017ef1 	.word	0x00017ef1
    84cc:	0000fec1 	.word	0x0000fec1
    84d0:	0000cb11 	.word	0x0000cb11
    84d4:	0000021e 	.word	0x0000021e
    84d8:	0000cc45 	.word	0x0000cc45
    84dc:	0000cbc9 	.word	0x0000cbc9
    84e0:	000101d9 	.word	0x000101d9
    84e4:	00007a05 	.word	0x00007a05
    84e8:	00000226 	.word	0x00000226
    84ec:	00004305 	.word	0x00004305
    84f0:	0000bff1 	.word	0x0000bff1
    84f4:	20001130 	.word	0x20001130
    84f8:	00017119 	.word	0x00017119
    84fc:	00008cad 	.word	0x00008cad
    8500:	00016d8d 	.word	0x00016d8d
                 * +----------------+---------------+
                 * | 7:4 MaxTimeN   | 3:0 MaxCountN |
                 * +----------------+---------------+
                 */

                uint8_t timeOK = 0;
    8504:	239b      	movs	r3, #155	; 0x9b
    8506:	18fb      	adds	r3, r7, r3
    8508:	2200      	movs	r2, #0
    850a:	701a      	strb	r2, [r3, #0]
                uint8_t maxCountN = 0x0F & payload[macIndex];
    850c:	1cfb      	adds	r3, r7, #3
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	687a      	ldr	r2, [r7, #4]
    8512:	18d3      	adds	r3, r2, r3
    8514:	781a      	ldrb	r2, [r3, #0]
    8516:	238f      	movs	r3, #143	; 0x8f
    8518:	18fb      	adds	r3, r7, r3
    851a:	210f      	movs	r1, #15
    851c:	400a      	ands	r2, r1
    851e:	701a      	strb	r2, [r3, #0]
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
    8520:	1cfb      	adds	r3, r7, #3
    8522:	781b      	ldrb	r3, [r3, #0]
    8524:	687a      	ldr	r2, [r7, #4]
    8526:	18d3      	adds	r3, r2, r3
    8528:	781a      	ldrb	r2, [r3, #0]
    852a:	238e      	movs	r3, #142	; 0x8e
    852c:	18fb      	adds	r3, r7, r3
    852e:	0912      	lsrs	r2, r2, #4
    8530:	701a      	strb	r2, [r3, #0]
                macIndex ++;
    8532:	1cfb      	adds	r3, r7, #3
    8534:	781a      	ldrb	r2, [r3, #0]
    8536:	1cfb      	adds	r3, r7, #3
    8538:	3201      	adds	r2, #1
    853a:	701a      	strb	r2, [r3, #0]

                // Calc delay between retransmissions: 2^(maxTimeN+10)
                MacCtx.NvmCtx->Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
    853c:	4bf2      	ldr	r3, [pc, #968]	; (8908 <ProcessMacCommands+0xed8>)
    853e:	4af3      	ldr	r2, [pc, #972]	; (890c <ProcessMacCommands+0xedc>)
    8540:	589a      	ldr	r2, [r3, r2]
    8542:	238e      	movs	r3, #142	; 0x8e
    8544:	18fb      	adds	r3, r7, r3
    8546:	781b      	ldrb	r3, [r3, #0]
    8548:	330a      	adds	r3, #10
    854a:	2101      	movs	r1, #1
    854c:	4099      	lsls	r1, r3
    854e:	000b      	movs	r3, r1
    8550:	0019      	movs	r1, r3
    8552:	238b      	movs	r3, #139	; 0x8b
    8554:	009b      	lsls	r3, r3, #2
    8556:	50d1      	str	r1, [r2, r3]

                // Calc number if uplinks without rejoin request: 2^(maxCountN+4)
                MacCtx.NvmCtx->Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
    8558:	4beb      	ldr	r3, [pc, #940]	; (8908 <ProcessMacCommands+0xed8>)
    855a:	4aec      	ldr	r2, [pc, #944]	; (890c <ProcessMacCommands+0xedc>)
    855c:	589b      	ldr	r3, [r3, r2]
    855e:	228f      	movs	r2, #143	; 0x8f
    8560:	18ba      	adds	r2, r7, r2
    8562:	7812      	ldrb	r2, [r2, #0]
    8564:	3204      	adds	r2, #4
    8566:	2101      	movs	r1, #1
    8568:	4091      	lsls	r1, r2
    856a:	000a      	movs	r2, r1
    856c:	b291      	uxth	r1, r2
    856e:	4ae8      	ldr	r2, [pc, #928]	; (8910 <ProcessMacCommands+0xee0>)
    8570:	5299      	strh	r1, [r3, r2]

                if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    8572:	4be5      	ldr	r3, [pc, #916]	; (8908 <ProcessMacCommands+0xed8>)
    8574:	4ae5      	ldr	r2, [pc, #916]	; (890c <ProcessMacCommands+0xedc>)
    8576:	589a      	ldr	r2, [r3, r2]
    8578:	238b      	movs	r3, #139	; 0x8b
    857a:	009b      	lsls	r3, r3, #2
    857c:	58d3      	ldr	r3, [r2, r3]
    857e:	4ae5      	ldr	r2, [pc, #916]	; (8914 <ProcessMacCommands+0xee4>)
    8580:	0011      	movs	r1, r2
    8582:	0018      	movs	r0, r3
    8584:	4be4      	ldr	r3, [pc, #912]	; (8918 <ProcessMacCommands+0xee8>)
    8586:	4798      	blx	r3
    8588:	1e03      	subs	r3, r0, #0
    858a:	d014      	beq.n	85b6 <ProcessMacCommands+0xb86>
                {
                    timeOK = 0x01;
    858c:	239b      	movs	r3, #155	; 0x9b
    858e:	18fb      	adds	r3, r7, r3
    8590:	2201      	movs	r2, #1
    8592:	701a      	strb	r2, [r3, #0]
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
    8594:	4be1      	ldr	r3, [pc, #900]	; (891c <ProcessMacCommands+0xeec>)
    8596:	0018      	movs	r0, r3
    8598:	4be1      	ldr	r3, [pc, #900]	; (8920 <ProcessMacCommands+0xef0>)
    859a:	4798      	blx	r3
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    859c:	4ada      	ldr	r2, [pc, #872]	; (8908 <ProcessMacCommands+0xed8>)
    859e:	2397      	movs	r3, #151	; 0x97
    85a0:	00db      	lsls	r3, r3, #3
    85a2:	58d2      	ldr	r2, [r2, r3]
    85a4:	4bdd      	ldr	r3, [pc, #884]	; (891c <ProcessMacCommands+0xeec>)
    85a6:	0011      	movs	r1, r2
    85a8:	0018      	movs	r0, r3
    85aa:	4bde      	ldr	r3, [pc, #888]	; (8924 <ProcessMacCommands+0xef4>)
    85ac:	4798      	blx	r3
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
    85ae:	4bdb      	ldr	r3, [pc, #876]	; (891c <ProcessMacCommands+0xeec>)
    85b0:	0018      	movs	r0, r3
    85b2:	4bdd      	ldr	r3, [pc, #884]	; (8928 <ProcessMacCommands+0xef8>)
    85b4:	4798      	blx	r3
                }
                macCmdPayload[0] = timeOK;
    85b6:	2370      	movs	r3, #112	; 0x70
    85b8:	18fb      	adds	r3, r7, r3
    85ba:	229b      	movs	r2, #155	; 0x9b
    85bc:	18ba      	adds	r2, r7, r2
    85be:	7812      	ldrb	r2, [r2, #0]
    85c0:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
    85c2:	2370      	movs	r3, #112	; 0x70
    85c4:	18fb      	adds	r3, r7, r3
    85c6:	2201      	movs	r2, #1
    85c8:	0019      	movs	r1, r3
    85ca:	200f      	movs	r0, #15
    85cc:	4bd7      	ldr	r3, [pc, #860]	; (892c <ProcessMacCommands+0xefc>)
    85ce:	4798      	blx	r3
    85d0:	239f      	movs	r3, #159	; 0x9f
    85d2:	18fb      	adds	r3, r7, r3
    85d4:	229f      	movs	r2, #159	; 0x9f
    85d6:	18ba      	adds	r2, r7, r2
    85d8:	7812      	ldrb	r2, [r2, #0]
    85da:	701a      	strb	r2, [r3, #0]
                break;
    85dc:	e20b      	b.n	89f6 <ProcessMacCommands+0xfc6>
             }
            case SRV_MAC_DEVICE_MODE_CONF:
            {
                // 1 byte payload which we do not handle.
                macIndex++;
    85de:	1cfb      	adds	r3, r7, #3
    85e0:	781a      	ldrb	r2, [r3, #0]
    85e2:	1cfb      	adds	r3, r7, #3
    85e4:	3201      	adds	r2, #1
    85e6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd );
    85e8:	236c      	movs	r3, #108	; 0x6c
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	0019      	movs	r1, r3
    85ee:	2020      	movs	r0, #32
    85f0:	4bcf      	ldr	r3, [pc, #828]	; (8930 <ProcessMacCommands+0xf00>)
    85f2:	4798      	blx	r3
                LoRaMacCommandsRemoveCmd( macCmd );
    85f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    85f6:	0018      	movs	r0, r3
    85f8:	4bce      	ldr	r3, [pc, #824]	; (8934 <ProcessMacCommands+0xf04>)
    85fa:	4798      	blx	r3
    85fc:	239f      	movs	r3, #159	; 0x9f
    85fe:	18fb      	adds	r3, r7, r3
    8600:	229f      	movs	r2, #159	; 0x9f
    8602:	18ba      	adds	r2, r7, r2
    8604:	7812      	ldrb	r2, [r2, #0]
    8606:	701a      	strb	r2, [r3, #0]
                break;
    8608:	e1f5      	b.n	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
    860a:	231c      	movs	r3, #28
    860c:	18fb      	adds	r3, r7, r3
    860e:	0018      	movs	r0, r3
    8610:	2308      	movs	r3, #8
    8612:	001a      	movs	r2, r3
    8614:	2100      	movs	r1, #0
    8616:	4bc8      	ldr	r3, [pc, #800]	; (8938 <ProcessMacCommands+0xf08>)
    8618:	4798      	blx	r3
                SysTime_t sysTime = { 0 };
    861a:	2314      	movs	r3, #20
    861c:	18fb      	adds	r3, r7, r3
    861e:	0018      	movs	r0, r3
    8620:	2308      	movs	r3, #8
    8622:	001a      	movs	r2, r3
    8624:	2100      	movs	r1, #0
    8626:	4bc4      	ldr	r3, [pc, #784]	; (8938 <ProcessMacCommands+0xf08>)
    8628:	4798      	blx	r3
                SysTime_t sysTimeCurrent = { 0 };
    862a:	230c      	movs	r3, #12
    862c:	18fb      	adds	r3, r7, r3
    862e:	0018      	movs	r0, r3
    8630:	2308      	movs	r3, #8
    8632:	001a      	movs	r2, r3
    8634:	2100      	movs	r1, #0
    8636:	4bc0      	ldr	r3, [pc, #768]	; (8938 <ProcessMacCommands+0xf08>)
    8638:	4798      	blx	r3

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
    863a:	1cfb      	adds	r3, r7, #3
    863c:	781b      	ldrb	r3, [r3, #0]
    863e:	1cfa      	adds	r2, r7, #3
    8640:	1c59      	adds	r1, r3, #1
    8642:	7011      	strb	r1, [r2, #0]
    8644:	001a      	movs	r2, r3
    8646:	687b      	ldr	r3, [r7, #4]
    8648:	189b      	adds	r3, r3, r2
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	001a      	movs	r2, r3
    864e:	231c      	movs	r3, #28
    8650:	18fb      	adds	r3, r7, r3
    8652:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
    8654:	1cfb      	adds	r3, r7, #3
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	1cfa      	adds	r2, r7, #3
    865a:	1c59      	adds	r1, r3, #1
    865c:	7011      	strb	r1, [r2, #0]
    865e:	001a      	movs	r2, r3
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	189b      	adds	r3, r3, r2
    8664:	781b      	ldrb	r3, [r3, #0]
    8666:	021a      	lsls	r2, r3, #8
    8668:	231c      	movs	r3, #28
    866a:	18fb      	adds	r3, r7, r3
    866c:	681b      	ldr	r3, [r3, #0]
    866e:	431a      	orrs	r2, r3
    8670:	231c      	movs	r3, #28
    8672:	18fb      	adds	r3, r7, r3
    8674:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
    8676:	1cfb      	adds	r3, r7, #3
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	1cfa      	adds	r2, r7, #3
    867c:	1c59      	adds	r1, r3, #1
    867e:	7011      	strb	r1, [r2, #0]
    8680:	001a      	movs	r2, r3
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	189b      	adds	r3, r3, r2
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	041a      	lsls	r2, r3, #16
    868a:	231c      	movs	r3, #28
    868c:	18fb      	adds	r3, r7, r3
    868e:	681b      	ldr	r3, [r3, #0]
    8690:	431a      	orrs	r2, r3
    8692:	231c      	movs	r3, #28
    8694:	18fb      	adds	r3, r7, r3
    8696:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
    8698:	1cfb      	adds	r3, r7, #3
    869a:	781b      	ldrb	r3, [r3, #0]
    869c:	1cfa      	adds	r2, r7, #3
    869e:	1c59      	adds	r1, r3, #1
    86a0:	7011      	strb	r1, [r2, #0]
    86a2:	001a      	movs	r2, r3
    86a4:	687b      	ldr	r3, [r7, #4]
    86a6:	189b      	adds	r3, r3, r2
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	061a      	lsls	r2, r3, #24
    86ac:	231c      	movs	r3, #28
    86ae:	18fb      	adds	r3, r7, r3
    86b0:	681b      	ldr	r3, [r3, #0]
    86b2:	431a      	orrs	r2, r3
    86b4:	231c      	movs	r3, #28
    86b6:	18fb      	adds	r3, r7, r3
    86b8:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
    86ba:	1cfb      	adds	r3, r7, #3
    86bc:	781b      	ldrb	r3, [r3, #0]
    86be:	1cfa      	adds	r2, r7, #3
    86c0:	1c59      	adds	r1, r3, #1
    86c2:	7011      	strb	r1, [r2, #0]
    86c4:	001a      	movs	r2, r3
    86c6:	687b      	ldr	r3, [r7, #4]
    86c8:	189b      	adds	r3, r3, r2
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	b21a      	sxth	r2, r3
    86ce:	231c      	movs	r3, #28
    86d0:	18fb      	adds	r3, r7, r3
    86d2:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
    86d4:	231c      	movs	r3, #28
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	2204      	movs	r2, #4
    86da:	5e9b      	ldrsh	r3, [r3, r2]
    86dc:	001a      	movs	r2, r3
    86de:	23fa      	movs	r3, #250	; 0xfa
    86e0:	009b      	lsls	r3, r3, #2
    86e2:	4353      	muls	r3, r2
    86e4:	121b      	asrs	r3, r3, #8
    86e6:	b21a      	sxth	r2, r3
    86e8:	231c      	movs	r3, #28
    86ea:	18fb      	adds	r3, r7, r3
    86ec:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
    86ee:	2314      	movs	r3, #20
    86f0:	18fb      	adds	r3, r7, r3
    86f2:	221c      	movs	r2, #28
    86f4:	18ba      	adds	r2, r7, r2
    86f6:	ca03      	ldmia	r2!, {r0, r1}
    86f8:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
    86fa:	2314      	movs	r3, #20
    86fc:	18fb      	adds	r3, r7, r3
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	4a8e      	ldr	r2, [pc, #568]	; (893c <ProcessMacCommands+0xf0c>)
    8702:	189a      	adds	r2, r3, r2
    8704:	2314      	movs	r3, #20
    8706:	18fb      	adds	r3, r7, r3
    8708:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
    870a:	230c      	movs	r3, #12
    870c:	18fb      	adds	r3, r7, r3
    870e:	0018      	movs	r0, r3
    8710:	4b8b      	ldr	r3, [pc, #556]	; (8940 <ProcessMacCommands+0xf10>)
    8712:	4798      	blx	r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
    8714:	2374      	movs	r3, #116	; 0x74
    8716:	18fd      	adds	r5, r7, r3
    8718:	497b      	ldr	r1, [pc, #492]	; (8908 <ProcessMacCommands+0xed8>)
    871a:	23d5      	movs	r3, #213	; 0xd5
    871c:	009b      	lsls	r3, r3, #2
    871e:	2214      	movs	r2, #20
    8720:	18ba      	adds	r2, r7, r2
    8722:	2404      	movs	r4, #4
    8724:	18c8      	adds	r0, r1, r3
    8726:	1900      	adds	r0, r0, r4
    8728:	466c      	mov	r4, sp
    872a:	6800      	ldr	r0, [r0, #0]
    872c:	6020      	str	r0, [r4, #0]
    872e:	58cb      	ldr	r3, [r1, r3]
    8730:	6811      	ldr	r1, [r2, #0]
    8732:	6852      	ldr	r2, [r2, #4]
    8734:	0028      	movs	r0, r5
    8736:	4c83      	ldr	r4, [pc, #524]	; (8944 <ProcessMacCommands+0xf14>)
    8738:	47a0      	blx	r4
    873a:	2314      	movs	r3, #20
    873c:	18fc      	adds	r4, r7, r3
    873e:	2374      	movs	r3, #116	; 0x74
    8740:	18fb      	adds	r3, r7, r3
    8742:	220c      	movs	r2, #12
    8744:	18ba      	adds	r2, r7, r2
    8746:	4669      	mov	r1, sp
    8748:	6858      	ldr	r0, [r3, #4]
    874a:	6008      	str	r0, [r1, #0]
    874c:	681b      	ldr	r3, [r3, #0]
    874e:	6811      	ldr	r1, [r2, #0]
    8750:	6852      	ldr	r2, [r2, #4]
    8752:	0020      	movs	r0, r4
    8754:	4c7c      	ldr	r4, [pc, #496]	; (8948 <ProcessMacCommands+0xf18>)
    8756:	47a0      	blx	r4

                // Apply the new system time.
                SysTimeSet( sysTime );
    8758:	2314      	movs	r3, #20
    875a:	18fb      	adds	r3, r7, r3
    875c:	6818      	ldr	r0, [r3, #0]
    875e:	6859      	ldr	r1, [r3, #4]
    8760:	4b7a      	ldr	r3, [pc, #488]	; (894c <ProcessMacCommands+0xf1c>)
    8762:	4798      	blx	r3
                LoRaMacClassBDeviceTimeAns( );
    8764:	4b7a      	ldr	r3, [pc, #488]	; (8950 <ProcessMacCommands+0xf20>)
    8766:	4798      	blx	r3
                break;
    8768:	46c0      	nop			; (mov r8, r8)
    876a:	239f      	movs	r3, #159	; 0x9f
    876c:	18fb      	adds	r3, r7, r3
    876e:	229f      	movs	r2, #159	; 0x9f
    8770:	18ba      	adds	r2, r7, r2
    8772:	7812      	ldrb	r2, [r2, #0]
    8774:	701a      	strb	r2, [r3, #0]
    8776:	e13e      	b.n	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
    8778:	4b63      	ldr	r3, [pc, #396]	; (8908 <ProcessMacCommands+0xed8>)
    877a:	4a76      	ldr	r2, [pc, #472]	; (8954 <ProcessMacCommands+0xf24>)
    877c:	5c9b      	ldrb	r3, [r3, r2]
    877e:	2b03      	cmp	r3, #3
    8780:	d006      	beq.n	8790 <ProcessMacCommands+0xd60>
    8782:	4b61      	ldr	r3, [pc, #388]	; (8908 <ProcessMacCommands+0xed8>)
    8784:	4a73      	ldr	r2, [pc, #460]	; (8954 <ProcessMacCommands+0xf24>)
    8786:	5c9b      	ldrb	r3, [r3, r2]
    8788:	2b04      	cmp	r3, #4
    878a:	d001      	beq.n	8790 <ProcessMacCommands+0xd60>
                {
                    LoRaMacClassBPingSlotInfoAns( );
    878c:	4b72      	ldr	r3, [pc, #456]	; (8958 <ProcessMacCommands+0xf28>)
    878e:	4798      	blx	r3
    8790:	239f      	movs	r3, #159	; 0x9f
    8792:	18fb      	adds	r3, r7, r3
    8794:	229f      	movs	r2, #159	; 0x9f
    8796:	18ba      	adds	r2, r7, r2
    8798:	7812      	ldrb	r2, [r2, #0]
    879a:	701a      	strb	r2, [r3, #0]
                }
                break;
    879c:	e12b      	b.n	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
    879e:	238d      	movs	r3, #141	; 0x8d
    87a0:	18fb      	adds	r3, r7, r3
    87a2:	2203      	movs	r2, #3
    87a4:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
    87a6:	2300      	movs	r3, #0
    87a8:	2288      	movs	r2, #136	; 0x88
    87aa:	18ba      	adds	r2, r7, r2
    87ac:	6013      	str	r3, [r2, #0]
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
    87ae:	1cfb      	adds	r3, r7, #3
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	1cfa      	adds	r2, r7, #3
    87b4:	1c59      	adds	r1, r3, #1
    87b6:	7011      	strb	r1, [r2, #0]
    87b8:	001a      	movs	r2, r3
    87ba:	687b      	ldr	r3, [r7, #4]
    87bc:	189b      	adds	r3, r3, r2
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	2288      	movs	r2, #136	; 0x88
    87c2:	18ba      	adds	r2, r7, r2
    87c4:	6013      	str	r3, [r2, #0]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
    87c6:	1cfb      	adds	r3, r7, #3
    87c8:	781b      	ldrb	r3, [r3, #0]
    87ca:	1cfa      	adds	r2, r7, #3
    87cc:	1c59      	adds	r1, r3, #1
    87ce:	7011      	strb	r1, [r2, #0]
    87d0:	001a      	movs	r2, r3
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	189b      	adds	r3, r3, r2
    87d6:	781b      	ldrb	r3, [r3, #0]
    87d8:	021b      	lsls	r3, r3, #8
    87da:	2288      	movs	r2, #136	; 0x88
    87dc:	18ba      	adds	r2, r7, r2
    87de:	6812      	ldr	r2, [r2, #0]
    87e0:	4313      	orrs	r3, r2
    87e2:	2288      	movs	r2, #136	; 0x88
    87e4:	18ba      	adds	r2, r7, r2
    87e6:	6013      	str	r3, [r2, #0]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
    87e8:	1cfb      	adds	r3, r7, #3
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	1cfa      	adds	r2, r7, #3
    87ee:	1c59      	adds	r1, r3, #1
    87f0:	7011      	strb	r1, [r2, #0]
    87f2:	001a      	movs	r2, r3
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	189b      	adds	r3, r3, r2
    87f8:	781b      	ldrb	r3, [r3, #0]
    87fa:	041b      	lsls	r3, r3, #16
    87fc:	2288      	movs	r2, #136	; 0x88
    87fe:	18ba      	adds	r2, r7, r2
    8800:	6812      	ldr	r2, [r2, #0]
    8802:	4313      	orrs	r3, r2
    8804:	2288      	movs	r2, #136	; 0x88
    8806:	18ba      	adds	r2, r7, r2
    8808:	6013      	str	r3, [r2, #0]
                frequency *= 100;
    880a:	2388      	movs	r3, #136	; 0x88
    880c:	18fb      	adds	r3, r7, r3
    880e:	681b      	ldr	r3, [r3, #0]
    8810:	2264      	movs	r2, #100	; 0x64
    8812:	4353      	muls	r3, r2
    8814:	2288      	movs	r2, #136	; 0x88
    8816:	18ba      	adds	r2, r7, r2
    8818:	6013      	str	r3, [r2, #0]
                datarate = payload[macIndex++] & 0x0F;
    881a:	1cfb      	adds	r3, r7, #3
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	1cfa      	adds	r2, r7, #3
    8820:	1c59      	adds	r1, r3, #1
    8822:	7011      	strb	r1, [r2, #0]
    8824:	001a      	movs	r2, r3
    8826:	687b      	ldr	r3, [r7, #4]
    8828:	189b      	adds	r3, r3, r2
    882a:	781a      	ldrb	r2, [r3, #0]
    882c:	2387      	movs	r3, #135	; 0x87
    882e:	18fb      	adds	r3, r7, r3
    8830:	210f      	movs	r1, #15
    8832:	400a      	ands	r2, r1
    8834:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
    8836:	238d      	movs	r3, #141	; 0x8d
    8838:	18fc      	adds	r4, r7, r3
    883a:	2388      	movs	r3, #136	; 0x88
    883c:	18fb      	adds	r3, r7, r3
    883e:	681a      	ldr	r2, [r3, #0]
    8840:	2387      	movs	r3, #135	; 0x87
    8842:	18fb      	adds	r3, r7, r3
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	0011      	movs	r1, r2
    8848:	0018      	movs	r0, r3
    884a:	4b44      	ldr	r3, [pc, #272]	; (895c <ProcessMacCommands+0xf2c>)
    884c:	4798      	blx	r3
    884e:	0003      	movs	r3, r0
    8850:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
    8852:	2370      	movs	r3, #112	; 0x70
    8854:	18fb      	adds	r3, r7, r3
    8856:	228d      	movs	r2, #141	; 0x8d
    8858:	18ba      	adds	r2, r7, r2
    885a:	7812      	ldrb	r2, [r2, #0]
    885c:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
    885e:	2370      	movs	r3, #112	; 0x70
    8860:	18fb      	adds	r3, r7, r3
    8862:	2201      	movs	r2, #1
    8864:	0019      	movs	r1, r3
    8866:	2011      	movs	r0, #17
    8868:	4b30      	ldr	r3, [pc, #192]	; (892c <ProcessMacCommands+0xefc>)
    886a:	4798      	blx	r3
    886c:	239f      	movs	r3, #159	; 0x9f
    886e:	18fb      	adds	r3, r7, r3
    8870:	229f      	movs	r2, #159	; 0x9f
    8872:	18ba      	adds	r2, r7, r2
    8874:	7812      	ldrb	r2, [r2, #0]
    8876:	701a      	strb	r2, [r3, #0]
                break;
    8878:	e0bd      	b.n	89f6 <ProcessMacCommands+0xfc6>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
    887a:	2384      	movs	r3, #132	; 0x84
    887c:	18fb      	adds	r3, r7, r3
    887e:	2200      	movs	r2, #0
    8880:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
    8882:	2383      	movs	r3, #131	; 0x83
    8884:	18fb      	adds	r3, r7, r3
    8886:	2200      	movs	r2, #0
    8888:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
    888a:	1cfb      	adds	r3, r7, #3
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	1cfa      	adds	r2, r7, #3
    8890:	1c59      	adds	r1, r3, #1
    8892:	7011      	strb	r1, [r2, #0]
    8894:	001a      	movs	r2, r3
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	189b      	adds	r3, r3, r2
    889a:	781a      	ldrb	r2, [r3, #0]
    889c:	2384      	movs	r3, #132	; 0x84
    889e:	18fb      	adds	r3, r7, r3
    88a0:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
    88a2:	1cfb      	adds	r3, r7, #3
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	1cfa      	adds	r2, r7, #3
    88a8:	1c59      	adds	r1, r3, #1
    88aa:	7011      	strb	r1, [r2, #0]
    88ac:	001a      	movs	r2, r3
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	189b      	adds	r3, r3, r2
    88b2:	781b      	ldrb	r3, [r3, #0]
    88b4:	021b      	lsls	r3, r3, #8
    88b6:	b21a      	sxth	r2, r3
    88b8:	2384      	movs	r3, #132	; 0x84
    88ba:	18fb      	adds	r3, r7, r3
    88bc:	2100      	movs	r1, #0
    88be:	5e5b      	ldrsh	r3, [r3, r1]
    88c0:	4313      	orrs	r3, r2
    88c2:	b21a      	sxth	r2, r3
    88c4:	2384      	movs	r3, #132	; 0x84
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
    88ca:	1cfb      	adds	r3, r7, #3
    88cc:	781b      	ldrb	r3, [r3, #0]
    88ce:	1cfa      	adds	r2, r7, #3
    88d0:	1c59      	adds	r1, r3, #1
    88d2:	7011      	strb	r1, [r2, #0]
    88d4:	001a      	movs	r2, r3
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	189a      	adds	r2, r3, r2
    88da:	2383      	movs	r3, #131	; 0x83
    88dc:	18fb      	adds	r3, r7, r3
    88de:	7812      	ldrb	r2, [r2, #0]
    88e0:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
    88e2:	4b1f      	ldr	r3, [pc, #124]	; (8960 <ProcessMacCommands+0xf30>)
    88e4:	681a      	ldr	r2, [r3, #0]
    88e6:	2383      	movs	r3, #131	; 0x83
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	7819      	ldrb	r1, [r3, #0]
    88ec:	2384      	movs	r3, #132	; 0x84
    88ee:	18fb      	adds	r3, r7, r3
    88f0:	881b      	ldrh	r3, [r3, #0]
    88f2:	0018      	movs	r0, r3
    88f4:	4b1b      	ldr	r3, [pc, #108]	; (8964 <ProcessMacCommands+0xf34>)
    88f6:	4798      	blx	r3
    88f8:	239f      	movs	r3, #159	; 0x9f
    88fa:	18fb      	adds	r3, r7, r3
    88fc:	229f      	movs	r2, #159	; 0x9f
    88fe:	18ba      	adds	r2, r7, r2
    8900:	7812      	ldrb	r2, [r2, #0]
    8902:	701a      	strb	r2, [r3, #0]
                break;
    8904:	e077      	b.n	89f6 <ProcessMacCommands+0xfc6>
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	20000c8c 	.word	0x20000c8c
    890c:	000004c4 	.word	0x000004c4
    8910:	00000222 	.word	0x00000222
    8914:	20001144 	.word	0x20001144
    8918:	0000bff1 	.word	0x0000bff1
    891c:	200010f4 	.word	0x200010f4
    8920:	00016fe5 	.word	0x00016fe5
    8924:	00017119 	.word	0x00017119
    8928:	00016d8d 	.word	0x00016d8d
    892c:	0000cb11 	.word	0x0000cb11
    8930:	0000cc45 	.word	0x0000cc45
    8934:	0000cbc9 	.word	0x0000cbc9
    8938:	00019be9 	.word	0x00019be9
    893c:	12d53d80 	.word	0x12d53d80
    8940:	00016c8d 	.word	0x00016c8d
    8944:	00016b5d 	.word	0x00016b5d
    8948:	00016a9d 	.word	0x00016a9d
    894c:	00016c15 	.word	0x00016c15
    8950:	0000c7e5 	.word	0x0000c7e5
    8954:	00000464 	.word	0x00000464
    8958:	0000c7a7 	.word	0x0000c7a7
    895c:	0000c7b1 	.word	0x0000c7b1
    8960:	20001b80 	.word	0x20001b80
    8964:	0000c7c9 	.word	0x0000c7c9
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
    8968:	2300      	movs	r3, #0
    896a:	67fb      	str	r3, [r7, #124]	; 0x7c

                    frequency = ( uint32_t )payload[macIndex++];
    896c:	1cfb      	adds	r3, r7, #3
    896e:	781b      	ldrb	r3, [r3, #0]
    8970:	1cfa      	adds	r2, r7, #3
    8972:	1c59      	adds	r1, r3, #1
    8974:	7011      	strb	r1, [r2, #0]
    8976:	001a      	movs	r2, r3
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	189b      	adds	r3, r3, r2
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
    8980:	1cfb      	adds	r3, r7, #3
    8982:	781b      	ldrb	r3, [r3, #0]
    8984:	1cfa      	adds	r2, r7, #3
    8986:	1c59      	adds	r1, r3, #1
    8988:	7011      	strb	r1, [r2, #0]
    898a:	001a      	movs	r2, r3
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	189b      	adds	r3, r3, r2
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	021b      	lsls	r3, r3, #8
    8994:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8996:	4313      	orrs	r3, r2
    8998:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
    899a:	1cfb      	adds	r3, r7, #3
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	1cfa      	adds	r2, r7, #3
    89a0:	1c59      	adds	r1, r3, #1
    89a2:	7011      	strb	r1, [r2, #0]
    89a4:	001a      	movs	r2, r3
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	189b      	adds	r3, r3, r2
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	041b      	lsls	r3, r3, #16
    89ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    89b0:	4313      	orrs	r3, r2
    89b2:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency *= 100;
    89b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    89b6:	2264      	movs	r2, #100	; 0x64
    89b8:	4353      	muls	r3, r2
    89ba:	67fb      	str	r3, [r7, #124]	; 0x7c

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
    89bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    89be:	0018      	movs	r0, r3
    89c0:	4b13      	ldr	r3, [pc, #76]	; (8a10 <ProcessMacCommands+0xfe0>)
    89c2:	4798      	blx	r3
    89c4:	1e03      	subs	r3, r0, #0
    89c6:	d004      	beq.n	89d2 <ProcessMacCommands+0xfa2>
                    {
                        macCmdPayload[0] = 1;
    89c8:	2370      	movs	r3, #112	; 0x70
    89ca:	18fb      	adds	r3, r7, r3
    89cc:	2201      	movs	r2, #1
    89ce:	701a      	strb	r2, [r3, #0]
    89d0:	e003      	b.n	89da <ProcessMacCommands+0xfaa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
    89d2:	2370      	movs	r3, #112	; 0x70
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	2200      	movs	r2, #0
    89d8:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
    89da:	2370      	movs	r3, #112	; 0x70
    89dc:	18fb      	adds	r3, r7, r3
    89de:	2201      	movs	r2, #1
    89e0:	0019      	movs	r1, r3
    89e2:	2013      	movs	r0, #19
    89e4:	4b0b      	ldr	r3, [pc, #44]	; (8a14 <ProcessMacCommands+0xfe4>)
    89e6:	4798      	blx	r3
    89e8:	239f      	movs	r3, #159	; 0x9f
    89ea:	18fb      	adds	r3, r7, r3
    89ec:	229f      	movs	r2, #159	; 0x9f
    89ee:	18ba      	adds	r2, r7, r2
    89f0:	7812      	ldrb	r2, [r2, #0]
    89f2:	701a      	strb	r2, [r3, #0]
                }
                break;
    89f4:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
    89f6:	1cfa      	adds	r2, r7, #3
    89f8:	1cbb      	adds	r3, r7, #2
    89fa:	7812      	ldrb	r2, [r2, #0]
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	429a      	cmp	r2, r3
    8a00:	d201      	bcs.n	8a06 <ProcessMacCommands+0xfd6>
    8a02:	f7ff f837 	bl	7a74 <ProcessMacCommands+0x44>
    8a06:	e000      	b.n	8a0a <ProcessMacCommands+0xfda>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
    8a08:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    8a0a:	46bd      	mov	sp, r7
    8a0c:	b028      	add	sp, #160	; 0xa0
    8a0e:	bdb0      	pop	{r4, r5, r7, pc}
    8a10:	0000c7ef 	.word	0x0000c7ef
    8a14:	0000cb11 	.word	0x0000cb11

00008a18 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
    8a18:	b5b0      	push	{r4, r5, r7, lr}
    8a1a:	b08e      	sub	sp, #56	; 0x38
    8a1c:	af02      	add	r7, sp, #8
    8a1e:	60f8      	str	r0, [r7, #12]
    8a20:	0008      	movs	r0, r1
    8a22:	607a      	str	r2, [r7, #4]
    8a24:	0019      	movs	r1, r3
    8a26:	230b      	movs	r3, #11
    8a28:	18fb      	adds	r3, r7, r3
    8a2a:	1c02      	adds	r2, r0, #0
    8a2c:	701a      	strb	r2, [r3, #0]
    8a2e:	2308      	movs	r3, #8
    8a30:	18fb      	adds	r3, r7, r3
    8a32:	1c0a      	adds	r2, r1, #0
    8a34:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    8a36:	232f      	movs	r3, #47	; 0x2f
    8a38:	18fb      	adds	r3, r7, r3
    8a3a:	2203      	movs	r2, #3
    8a3c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8a3e:	4b95      	ldr	r3, [pc, #596]	; (8c94 <Send+0x27c>)
    8a40:	4a95      	ldr	r2, [pc, #596]	; (8c98 <Send+0x280>)
    8a42:	589a      	ldr	r2, [r3, r2]
    8a44:	232e      	movs	r3, #46	; 0x2e
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	21d5      	movs	r1, #213	; 0xd5
    8a4a:	5c52      	ldrb	r2, [r2, r1]
    8a4c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    8a4e:	4b91      	ldr	r3, [pc, #580]	; (8c94 <Send+0x27c>)
    8a50:	4a91      	ldr	r2, [pc, #580]	; (8c98 <Send+0x280>)
    8a52:	589a      	ldr	r2, [r3, r2]
    8a54:	232d      	movs	r3, #45	; 0x2d
    8a56:	18fb      	adds	r3, r7, r3
    8a58:	21d4      	movs	r1, #212	; 0xd4
    8a5a:	5c52      	ldrb	r2, [r2, r1]
    8a5c:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    8a5e:	4b8d      	ldr	r3, [pc, #564]	; (8c94 <Send+0x27c>)
    8a60:	4a8d      	ldr	r2, [pc, #564]	; (8c98 <Send+0x280>)
    8a62:	589b      	ldr	r3, [r3, r2]
    8a64:	22cc      	movs	r2, #204	; 0xcc
    8a66:	589b      	ldr	r3, [r3, r2]
    8a68:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    8a6a:	4b8a      	ldr	r3, [pc, #552]	; (8c94 <Send+0x27c>)
    8a6c:	4a8a      	ldr	r2, [pc, #552]	; (8c98 <Send+0x280>)
    8a6e:	589a      	ldr	r2, [r3, r2]
    8a70:	2388      	movs	r3, #136	; 0x88
    8a72:	009b      	lsls	r3, r3, #2
    8a74:	5cd3      	ldrb	r3, [r2, r3]
    8a76:	2b00      	cmp	r3, #0
    8a78:	d101      	bne.n	8a7e <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
    8a7a:	2307      	movs	r3, #7
    8a7c:	e105      	b.n	8c8a <Send+0x272>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
    8a7e:	4b85      	ldr	r3, [pc, #532]	; (8c94 <Send+0x27c>)
    8a80:	4a85      	ldr	r2, [pc, #532]	; (8c98 <Send+0x280>)
    8a82:	589a      	ldr	r2, [r3, r2]
    8a84:	2312      	movs	r3, #18
    8a86:	33ff      	adds	r3, #255	; 0xff
    8a88:	5cd3      	ldrb	r3, [r2, r3]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d104      	bne.n	8a98 <Send+0x80>
    {
        MacCtx.AggregatedTimeOff = 0;
    8a8e:	4a81      	ldr	r2, [pc, #516]	; (8c94 <Send+0x27c>)
    8a90:	23d1      	movs	r3, #209	; 0xd1
    8a92:	009b      	lsls	r3, r3, #2
    8a94:	2100      	movs	r1, #0
    8a96:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
    8a98:	232c      	movs	r3, #44	; 0x2c
    8a9a:	18fb      	adds	r3, r7, r3
    8a9c:	2200      	movs	r2, #0
    8a9e:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
    8aa0:	232c      	movs	r3, #44	; 0x2c
    8aa2:	18fb      	adds	r3, r7, r3
    8aa4:	781a      	ldrb	r2, [r3, #0]
    8aa6:	210f      	movs	r1, #15
    8aa8:	438a      	bics	r2, r1
    8aaa:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
    8aac:	4b79      	ldr	r3, [pc, #484]	; (8c94 <Send+0x27c>)
    8aae:	4a7a      	ldr	r2, [pc, #488]	; (8c98 <Send+0x280>)
    8ab0:	589b      	ldr	r3, [r3, r2]
    8ab2:	22ca      	movs	r2, #202	; 0xca
    8ab4:	5c9a      	ldrb	r2, [r3, r2]
    8ab6:	232c      	movs	r3, #44	; 0x2c
    8ab8:	18fb      	adds	r3, r7, r3
    8aba:	01d0      	lsls	r0, r2, #7
    8abc:	781a      	ldrb	r2, [r3, #0]
    8abe:	217f      	movs	r1, #127	; 0x7f
    8ac0:	400a      	ands	r2, r1
    8ac2:	1c11      	adds	r1, r2, #0
    8ac4:	1c02      	adds	r2, r0, #0
    8ac6:	430a      	orrs	r2, r1
    8ac8:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    8aca:	4b72      	ldr	r3, [pc, #456]	; (8c94 <Send+0x27c>)
    8acc:	4a72      	ldr	r2, [pc, #456]	; (8c98 <Send+0x280>)
    8ace:	589b      	ldr	r3, [r3, r2]
    8ad0:	22c8      	movs	r2, #200	; 0xc8
    8ad2:	5c9b      	ldrb	r3, [r3, r2]
    8ad4:	2b01      	cmp	r3, #1
    8ad6:	d106      	bne.n	8ae6 <Send+0xce>
    {
        fCtrl.Bits.FPending      = 1;
    8ad8:	232c      	movs	r3, #44	; 0x2c
    8ada:	18fb      	adds	r3, r7, r3
    8adc:	781a      	ldrb	r2, [r3, #0]
    8ade:	2110      	movs	r1, #16
    8ae0:	430a      	orrs	r2, r1
    8ae2:	701a      	strb	r2, [r3, #0]
    8ae4:	e005      	b.n	8af2 <Send+0xda>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
    8ae6:	232c      	movs	r3, #44	; 0x2c
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	781a      	ldrb	r2, [r3, #0]
    8aec:	2110      	movs	r1, #16
    8aee:	438a      	bics	r2, r1
    8af0:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
    8af2:	4b68      	ldr	r3, [pc, #416]	; (8c94 <Send+0x27c>)
    8af4:	4a68      	ldr	r2, [pc, #416]	; (8c98 <Send+0x280>)
    8af6:	589a      	ldr	r2, [r3, r2]
    8af8:	2386      	movs	r3, #134	; 0x86
    8afa:	009b      	lsls	r3, r3, #2
    8afc:	5cd3      	ldrb	r3, [r2, r3]
    8afe:	2b00      	cmp	r3, #0
    8b00:	d005      	beq.n	8b0e <Send+0xf6>
    {
        fCtrl.Bits.Ack = 1;
    8b02:	232c      	movs	r3, #44	; 0x2c
    8b04:	18fb      	adds	r3, r7, r3
    8b06:	781a      	ldrb	r2, [r3, #0]
    8b08:	2120      	movs	r1, #32
    8b0a:	430a      	orrs	r2, r1
    8b0c:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
    8b0e:	4b61      	ldr	r3, [pc, #388]	; (8c94 <Send+0x27c>)
    8b10:	4a61      	ldr	r2, [pc, #388]	; (8c98 <Send+0x280>)
    8b12:	5899      	ldr	r1, [r3, r2]
    8b14:	2314      	movs	r3, #20
    8b16:	18fb      	adds	r3, r7, r3
    8b18:	2287      	movs	r2, #135	; 0x87
    8b1a:	0092      	lsls	r2, r2, #2
    8b1c:	588a      	ldr	r2, [r1, r2]
    8b1e:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
    8b20:	2314      	movs	r3, #20
    8b22:	18fb      	adds	r3, r7, r3
    8b24:	2201      	movs	r2, #1
    8b26:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
    8b28:	232c      	movs	r3, #44	; 0x2c
    8b2a:	18fb      	adds	r3, r7, r3
    8b2c:	781b      	ldrb	r3, [r3, #0]
    8b2e:	061b      	lsls	r3, r3, #24
    8b30:	0fdb      	lsrs	r3, r3, #31
    8b32:	b2db      	uxtb	r3, r3
    8b34:	1e5a      	subs	r2, r3, #1
    8b36:	4193      	sbcs	r3, r2
    8b38:	b2da      	uxtb	r2, r3
    8b3a:	2314      	movs	r3, #20
    8b3c:	18fb      	adds	r3, r7, r3
    8b3e:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    8b40:	4b54      	ldr	r3, [pc, #336]	; (8c94 <Send+0x27c>)
    8b42:	4a55      	ldr	r2, [pc, #340]	; (8c98 <Send+0x280>)
    8b44:	589b      	ldr	r3, [r3, r2]
    8b46:	22cc      	movs	r2, #204	; 0xcc
    8b48:	589a      	ldr	r2, [r3, r2]
    8b4a:	2314      	movs	r3, #20
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    8b50:	4b50      	ldr	r3, [pc, #320]	; (8c94 <Send+0x27c>)
    8b52:	4a51      	ldr	r2, [pc, #324]	; (8c98 <Send+0x280>)
    8b54:	589b      	ldr	r3, [r3, r2]
    8b56:	22d0      	movs	r2, #208	; 0xd0
    8b58:	5a9a      	ldrh	r2, [r3, r2]
    8b5a:	2314      	movs	r3, #20
    8b5c:	18fb      	adds	r3, r7, r3
    8b5e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    8b60:	4b4c      	ldr	r3, [pc, #304]	; (8c94 <Send+0x27c>)
    8b62:	4a4d      	ldr	r2, [pc, #308]	; (8c98 <Send+0x280>)
    8b64:	589b      	ldr	r3, [r3, r2]
    8b66:	22d2      	movs	r2, #210	; 0xd2
    8b68:	5a9a      	ldrh	r2, [r3, r2]
    8b6a:	2314      	movs	r3, #20
    8b6c:	18fb      	adds	r3, r7, r3
    8b6e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8b70:	4b48      	ldr	r3, [pc, #288]	; (8c94 <Send+0x27c>)
    8b72:	4a49      	ldr	r2, [pc, #292]	; (8c98 <Send+0x280>)
    8b74:	589b      	ldr	r3, [r3, r2]
    8b76:	22d5      	movs	r2, #213	; 0xd5
    8b78:	569a      	ldrsb	r2, [r3, r2]
    8b7a:	2314      	movs	r3, #20
    8b7c:	18fb      	adds	r3, r7, r3
    8b7e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    8b80:	4b44      	ldr	r3, [pc, #272]	; (8c94 <Send+0x27c>)
    8b82:	4a45      	ldr	r2, [pc, #276]	; (8c98 <Send+0x280>)
    8b84:	589b      	ldr	r3, [r3, r2]
    8b86:	22d4      	movs	r2, #212	; 0xd4
    8b88:	569a      	ldrsb	r2, [r3, r2]
    8b8a:	2314      	movs	r3, #20
    8b8c:	18fb      	adds	r3, r7, r3
    8b8e:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    8b90:	4b40      	ldr	r3, [pc, #256]	; (8c94 <Send+0x27c>)
    8b92:	4a41      	ldr	r2, [pc, #260]	; (8c98 <Send+0x280>)
    8b94:	589a      	ldr	r2, [r3, r2]
    8b96:	2380      	movs	r3, #128	; 0x80
    8b98:	005b      	lsls	r3, r3, #1
    8b9a:	5cd2      	ldrb	r2, [r2, r3]
    8b9c:	2314      	movs	r3, #20
    8b9e:	18fb      	adds	r3, r7, r3
    8ba0:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    8ba2:	4b3c      	ldr	r3, [pc, #240]	; (8c94 <Send+0x27c>)
    8ba4:	4a3c      	ldr	r2, [pc, #240]	; (8c98 <Send+0x280>)
    8ba6:	589b      	ldr	r3, [r3, r2]
    8ba8:	781a      	ldrb	r2, [r3, #0]
    8baa:	2314      	movs	r3, #20
    8bac:	18fb      	adds	r3, r7, r3
    8bae:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
    8bb0:	4b38      	ldr	r3, [pc, #224]	; (8c94 <Send+0x27c>)
    8bb2:	4a39      	ldr	r2, [pc, #228]	; (8c98 <Send+0x280>)
    8bb4:	589b      	ldr	r3, [r3, r2]
    8bb6:	33d5      	adds	r3, #213	; 0xd5
    8bb8:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
    8bba:	4b36      	ldr	r3, [pc, #216]	; (8c94 <Send+0x27c>)
    8bbc:	4a36      	ldr	r2, [pc, #216]	; (8c98 <Send+0x280>)
    8bbe:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
    8bc0:	33d4      	adds	r3, #212	; 0xd4
    8bc2:	001a      	movs	r2, r3
    8bc4:	2328      	movs	r3, #40	; 0x28
    8bc6:	18fb      	adds	r3, r7, r3
    8bc8:	2014      	movs	r0, #20
    8bca:	1838      	adds	r0, r7, r0
    8bcc:	4c33      	ldr	r4, [pc, #204]	; (8c9c <Send+0x284>)
    8bce:	47a0      	blx	r4
    8bd0:	0003      	movs	r3, r0
    8bd2:	0019      	movs	r1, r3
    8bd4:	232c      	movs	r3, #44	; 0x2c
    8bd6:	18fb      	adds	r3, r7, r3
    8bd8:	2201      	movs	r2, #1
    8bda:	400a      	ands	r2, r1
    8bdc:	0190      	lsls	r0, r2, #6
    8bde:	781a      	ldrb	r2, [r3, #0]
    8be0:	2140      	movs	r1, #64	; 0x40
    8be2:	438a      	bics	r2, r1
    8be4:	1c11      	adds	r1, r2, #0
    8be6:	1c02      	adds	r2, r0, #0
    8be8:	430a      	orrs	r2, r1
    8bea:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
    8bec:	232f      	movs	r3, #47	; 0x2f
    8bee:	18fc      	adds	r4, r7, r3
    8bf0:	687d      	ldr	r5, [r7, #4]
    8bf2:	230b      	movs	r3, #11
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	781a      	ldrb	r2, [r3, #0]
    8bf8:	232c      	movs	r3, #44	; 0x2c
    8bfa:	18f9      	adds	r1, r7, r3
    8bfc:	68f8      	ldr	r0, [r7, #12]
    8bfe:	2308      	movs	r3, #8
    8c00:	18fb      	adds	r3, r7, r3
    8c02:	881b      	ldrh	r3, [r3, #0]
    8c04:	9300      	str	r3, [sp, #0]
    8c06:	002b      	movs	r3, r5
    8c08:	4d25      	ldr	r5, [pc, #148]	; (8ca0 <Send+0x288>)
    8c0a:	47a8      	blx	r5
    8c0c:	0003      	movs	r3, r0
    8c0e:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
    8c10:	232f      	movs	r3, #47	; 0x2f
    8c12:	18fb      	adds	r3, r7, r3
    8c14:	781b      	ldrb	r3, [r3, #0]
    8c16:	2b00      	cmp	r3, #0
    8c18:	d004      	beq.n	8c24 <Send+0x20c>
    8c1a:	232f      	movs	r3, #47	; 0x2f
    8c1c:	18fb      	adds	r3, r7, r3
    8c1e:	781b      	ldrb	r3, [r3, #0]
    8c20:	2b0a      	cmp	r3, #10
    8c22:	d106      	bne.n	8c32 <Send+0x21a>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
    8c24:	232f      	movs	r3, #47	; 0x2f
    8c26:	18fc      	adds	r4, r7, r3
    8c28:	2000      	movs	r0, #0
    8c2a:	4b1e      	ldr	r3, [pc, #120]	; (8ca4 <Send+0x28c>)
    8c2c:	4798      	blx	r3
    8c2e:	0003      	movs	r3, r0
    8c30:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
    8c32:	232f      	movs	r3, #47	; 0x2f
    8c34:	18fb      	adds	r3, r7, r3
    8c36:	781b      	ldrb	r3, [r3, #0]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d010      	beq.n	8c5e <Send+0x246>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
    8c3c:	4b15      	ldr	r3, [pc, #84]	; (8c94 <Send+0x27c>)
    8c3e:	4a16      	ldr	r2, [pc, #88]	; (8c98 <Send+0x280>)
    8c40:	589b      	ldr	r3, [r3, r2]
    8c42:	222e      	movs	r2, #46	; 0x2e
    8c44:	18ba      	adds	r2, r7, r2
    8c46:	21d5      	movs	r1, #213	; 0xd5
    8c48:	7812      	ldrb	r2, [r2, #0]
    8c4a:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
    8c4c:	4b11      	ldr	r3, [pc, #68]	; (8c94 <Send+0x27c>)
    8c4e:	4a12      	ldr	r2, [pc, #72]	; (8c98 <Send+0x280>)
    8c50:	589b      	ldr	r3, [r3, r2]
    8c52:	222d      	movs	r2, #45	; 0x2d
    8c54:	18ba      	adds	r2, r7, r2
    8c56:	21d4      	movs	r1, #212	; 0xd4
    8c58:	7812      	ldrb	r2, [r2, #0]
    8c5a:	545a      	strb	r2, [r3, r1]
    8c5c:	e012      	b.n	8c84 <Send+0x26c>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
    8c5e:	4b0d      	ldr	r3, [pc, #52]	; (8c94 <Send+0x27c>)
    8c60:	4a0d      	ldr	r2, [pc, #52]	; (8c98 <Send+0x280>)
    8c62:	589a      	ldr	r2, [r3, r2]
    8c64:	2386      	movs	r3, #134	; 0x86
    8c66:	009b      	lsls	r3, r3, #2
    8c68:	2100      	movs	r1, #0
    8c6a:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
    8c6c:	4b09      	ldr	r3, [pc, #36]	; (8c94 <Send+0x27c>)
    8c6e:	4a0a      	ldr	r2, [pc, #40]	; (8c98 <Send+0x280>)
    8c70:	589b      	ldr	r3, [r3, r2]
    8c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8c74:	21cc      	movs	r1, #204	; 0xcc
    8c76:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
    8c78:	4b0b      	ldr	r3, [pc, #44]	; (8ca8 <Send+0x290>)
    8c7a:	4798      	blx	r3
    8c7c:	1e03      	subs	r3, r0, #0
    8c7e:	d001      	beq.n	8c84 <Send+0x26c>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    8c80:	2313      	movs	r3, #19
    8c82:	e002      	b.n	8c8a <Send+0x272>
        }
    }
    return status;
    8c84:	232f      	movs	r3, #47	; 0x2f
    8c86:	18fb      	adds	r3, r7, r3
    8c88:	781b      	ldrb	r3, [r3, #0]
}
    8c8a:	0018      	movs	r0, r3
    8c8c:	46bd      	mov	sp, r7
    8c8e:	b00c      	add	sp, #48	; 0x30
    8c90:	bdb0      	pop	{r4, r5, r7, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	20000c8c 	.word	0x20000c8c
    8c98:	000004c4 	.word	0x000004c4
    8c9c:	0000c615 	.word	0x0000c615
    8ca0:	00009691 	.word	0x00009691
    8ca4:	00008f01 	.word	0x00008f01
    8ca8:	0000cc91 	.word	0x0000cc91

00008cac <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
    8cac:	b590      	push	{r4, r7, lr}
    8cae:	b085      	sub	sp, #20
    8cb0:	af00      	add	r7, sp, #0
    8cb2:	0002      	movs	r2, r0
    8cb4:	1dfb      	adds	r3, r7, #7
    8cb6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    8cb8:	230e      	movs	r3, #14
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	2200      	movs	r2, #0
    8cbe:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
    8cc0:	230c      	movs	r3, #12
    8cc2:	18fb      	adds	r3, r7, r3
    8cc4:	2200      	movs	r2, #0
    8cc6:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
    8cc8:	230f      	movs	r3, #15
    8cca:	18fb      	adds	r3, r7, r3
    8ccc:	2201      	movs	r2, #1
    8cce:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
    8cd0:	1dfb      	adds	r3, r7, #7
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	2b01      	cmp	r3, #1
    8cd6:	d009      	beq.n	8cec <SendReJoinReq+0x40>
    8cd8:	dc02      	bgt.n	8ce0 <SendReJoinReq+0x34>
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d04a      	beq.n	8d74 <SendReJoinReq+0xc8>
    8cde:	e0db      	b.n	8e98 <SendReJoinReq+0x1ec>
    8ce0:	2b02      	cmp	r3, #2
    8ce2:	d047      	beq.n	8d74 <SendReJoinReq+0xc8>
    8ce4:	2bff      	cmp	r3, #255	; 0xff
    8ce6:	d100      	bne.n	8cea <SendReJoinReq+0x3e>
    8ce8:	e0a7      	b.n	8e3a <SendReJoinReq+0x18e>
    8cea:	e0d5      	b.n	8e98 <SendReJoinReq+0x1ec>
    {
        case REJOIN_REQ_1:
        {
            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    8cec:	4b77      	ldr	r3, [pc, #476]	; (8ecc <SendReJoinReq+0x220>)
    8cee:	4a78      	ldr	r2, [pc, #480]	; (8ed0 <SendReJoinReq+0x224>)
    8cf0:	589a      	ldr	r2, [r3, r2]
    8cf2:	238e      	movs	r3, #142	; 0x8e
    8cf4:	009b      	lsls	r3, r3, #2
    8cf6:	2101      	movs	r1, #1
    8cf8:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
    8cfa:	4a74      	ldr	r2, [pc, #464]	; (8ecc <SendReJoinReq+0x220>)
    8cfc:	2386      	movs	r3, #134	; 0x86
    8cfe:	005b      	lsls	r3, r3, #1
    8d00:	2101      	movs	r1, #1
    8d02:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
    8d04:	4a71      	ldr	r2, [pc, #452]	; (8ecc <SendReJoinReq+0x220>)
    8d06:	2388      	movs	r3, #136	; 0x88
    8d08:	005b      	lsls	r3, r3, #1
    8d0a:	4972      	ldr	r1, [pc, #456]	; (8ed4 <SendReJoinReq+0x228>)
    8d0c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    8d0e:	4a6f      	ldr	r2, [pc, #444]	; (8ecc <SendReJoinReq+0x220>)
    8d10:	238a      	movs	r3, #138	; 0x8a
    8d12:	005b      	lsls	r3, r3, #1
    8d14:	21ff      	movs	r1, #255	; 0xff
    8d16:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
    8d18:	230c      	movs	r3, #12
    8d1a:	18fb      	adds	r3, r7, r3
    8d1c:	781a      	ldrb	r2, [r3, #0]
    8d1e:	211f      	movs	r1, #31
    8d20:	400a      	ands	r2, r1
    8d22:	1c11      	adds	r1, r2, #0
    8d24:	2240      	movs	r2, #64	; 0x40
    8d26:	4252      	negs	r2, r2
    8d28:	430a      	orrs	r2, r1
    8d2a:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.ReJoin1.MHDR.Value = macHdr.Value;
    8d2c:	230c      	movs	r3, #12
    8d2e:	18fb      	adds	r3, r7, r3
    8d30:	7819      	ldrb	r1, [r3, #0]
    8d32:	4a66      	ldr	r2, [pc, #408]	; (8ecc <SendReJoinReq+0x220>)
    8d34:	2316      	movs	r3, #22
    8d36:	33ff      	adds	r3, #255	; 0xff
    8d38:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
    8d3a:	4a64      	ldr	r2, [pc, #400]	; (8ecc <SendReJoinReq+0x220>)
    8d3c:	238b      	movs	r3, #139	; 0x8b
    8d3e:	005b      	lsls	r3, r3, #1
    8d40:	2101      	movs	r1, #1
    8d42:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    8d44:	4b61      	ldr	r3, [pc, #388]	; (8ecc <SendReJoinReq+0x220>)
    8d46:	6859      	ldr	r1, [r3, #4]
    8d48:	4b63      	ldr	r3, [pc, #396]	; (8ed8 <SendReJoinReq+0x22c>)
    8d4a:	2208      	movs	r2, #8
    8d4c:	0018      	movs	r0, r3
    8d4e:	4b63      	ldr	r3, [pc, #396]	; (8edc <SendReJoinReq+0x230>)
    8d50:	4798      	blx	r3
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    8d52:	4b5e      	ldr	r3, [pc, #376]	; (8ecc <SendReJoinReq+0x220>)
    8d54:	6819      	ldr	r1, [r3, #0]
    8d56:	4b62      	ldr	r3, [pc, #392]	; (8ee0 <SendReJoinReq+0x234>)
    8d58:	2208      	movs	r2, #8
    8d5a:	0018      	movs	r0, r3
    8d5c:	4b5f      	ldr	r3, [pc, #380]	; (8edc <SendReJoinReq+0x230>)
    8d5e:	4798      	blx	r3

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
    8d60:	4b60      	ldr	r3, [pc, #384]	; (8ee4 <SendReJoinReq+0x238>)
    8d62:	0019      	movs	r1, r3
    8d64:	2009      	movs	r0, #9
    8d66:	4b60      	ldr	r3, [pc, #384]	; (8ee8 <SendReJoinReq+0x23c>)
    8d68:	4798      	blx	r3
    8d6a:	1e03      	subs	r3, r0, #0
    8d6c:	d100      	bne.n	8d70 <SendReJoinReq+0xc4>
    8d6e:	e098      	b.n	8ea2 <SendReJoinReq+0x1f6>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    8d70:	2312      	movs	r3, #18
    8d72:	e0a6      	b.n	8ec2 <SendReJoinReq+0x216>
            break;
        }
        case REJOIN_REQ_0:
        case REJOIN_REQ_2:
        {
            if( joinReqType == REJOIN_REQ_0 )
    8d74:	1dfb      	adds	r3, r7, #7
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d105      	bne.n	8d88 <SendReJoinReq+0xdc>
            {
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 0;
    8d7c:	4a53      	ldr	r2, [pc, #332]	; (8ecc <SendReJoinReq+0x220>)
    8d7e:	238b      	movs	r3, #139	; 0x8b
    8d80:	005b      	lsls	r3, r3, #1
    8d82:	2100      	movs	r1, #0
    8d84:	54d1      	strb	r1, [r2, r3]
    8d86:	e004      	b.n	8d92 <SendReJoinReq+0xe6>
            }
            else
            {
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 2;
    8d88:	4a50      	ldr	r2, [pc, #320]	; (8ecc <SendReJoinReq+0x220>)
    8d8a:	238b      	movs	r3, #139	; 0x8b
    8d8c:	005b      	lsls	r3, r3, #1
    8d8e:	2102      	movs	r1, #2
    8d90:	54d1      	strb	r1, [r2, r3]
            }

            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    8d92:	4b4e      	ldr	r3, [pc, #312]	; (8ecc <SendReJoinReq+0x220>)
    8d94:	4a4e      	ldr	r2, [pc, #312]	; (8ed0 <SendReJoinReq+0x224>)
    8d96:	589a      	ldr	r2, [r3, r2]
    8d98:	238e      	movs	r3, #142	; 0x8e
    8d9a:	009b      	lsls	r3, r3, #2
    8d9c:	2101      	movs	r1, #1
    8d9e:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
    8da0:	4a4a      	ldr	r2, [pc, #296]	; (8ecc <SendReJoinReq+0x220>)
    8da2:	2386      	movs	r3, #134	; 0x86
    8da4:	005b      	lsls	r3, r3, #1
    8da6:	2102      	movs	r1, #2
    8da8:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
    8daa:	4a48      	ldr	r2, [pc, #288]	; (8ecc <SendReJoinReq+0x220>)
    8dac:	2388      	movs	r3, #136	; 0x88
    8dae:	005b      	lsls	r3, r3, #1
    8db0:	4948      	ldr	r1, [pc, #288]	; (8ed4 <SendReJoinReq+0x228>)
    8db2:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    8db4:	4a45      	ldr	r2, [pc, #276]	; (8ecc <SendReJoinReq+0x220>)
    8db6:	238a      	movs	r3, #138	; 0x8a
    8db8:	005b      	lsls	r3, r3, #1
    8dba:	21ff      	movs	r1, #255	; 0xff
    8dbc:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
    8dbe:	230c      	movs	r3, #12
    8dc0:	18fb      	adds	r3, r7, r3
    8dc2:	781a      	ldrb	r2, [r3, #0]
    8dc4:	211f      	movs	r1, #31
    8dc6:	400a      	ands	r2, r1
    8dc8:	1c11      	adds	r1, r2, #0
    8dca:	2240      	movs	r2, #64	; 0x40
    8dcc:	4252      	negs	r2, r2
    8dce:	430a      	orrs	r2, r1
    8dd0:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.ReJoin0or2.MHDR.Value = macHdr.Value;
    8dd2:	230c      	movs	r3, #12
    8dd4:	18fb      	adds	r3, r7, r3
    8dd6:	7819      	ldrb	r1, [r3, #0]
    8dd8:	4a3c      	ldr	r2, [pc, #240]	; (8ecc <SendReJoinReq+0x220>)
    8dda:	2316      	movs	r3, #22
    8ddc:	33ff      	adds	r3, #255	; 0xff
    8dde:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = MacCtx.NvmCtx->NetID & 0xFF;
    8de0:	4b3a      	ldr	r3, [pc, #232]	; (8ecc <SendReJoinReq+0x220>)
    8de2:	4a3b      	ldr	r2, [pc, #236]	; (8ed0 <SendReJoinReq+0x224>)
    8de4:	589b      	ldr	r3, [r3, r2]
    8de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8de8:	b2d9      	uxtb	r1, r3
    8dea:	4a38      	ldr	r2, [pc, #224]	; (8ecc <SendReJoinReq+0x220>)
    8dec:	2318      	movs	r3, #24
    8dee:	33ff      	adds	r3, #255	; 0xff
    8df0:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( MacCtx.NvmCtx->NetID >> 8 ) & 0xFF;
    8df2:	4b36      	ldr	r3, [pc, #216]	; (8ecc <SendReJoinReq+0x220>)
    8df4:	4a36      	ldr	r2, [pc, #216]	; (8ed0 <SendReJoinReq+0x224>)
    8df6:	589b      	ldr	r3, [r3, r2]
    8df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8dfa:	0a1b      	lsrs	r3, r3, #8
    8dfc:	b2d9      	uxtb	r1, r3
    8dfe:	4a33      	ldr	r2, [pc, #204]	; (8ecc <SendReJoinReq+0x220>)
    8e00:	238c      	movs	r3, #140	; 0x8c
    8e02:	005b      	lsls	r3, r3, #1
    8e04:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( MacCtx.NvmCtx->NetID >> 16 ) & 0xFF;
    8e06:	4b31      	ldr	r3, [pc, #196]	; (8ecc <SendReJoinReq+0x220>)
    8e08:	4a31      	ldr	r2, [pc, #196]	; (8ed0 <SendReJoinReq+0x224>)
    8e0a:	589b      	ldr	r3, [r3, r2]
    8e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8e0e:	0c1b      	lsrs	r3, r3, #16
    8e10:	b2d9      	uxtb	r1, r3
    8e12:	4a2e      	ldr	r2, [pc, #184]	; (8ecc <SendReJoinReq+0x220>)
    8e14:	231a      	movs	r3, #26
    8e16:	33ff      	adds	r3, #255	; 0xff
    8e18:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    8e1a:	4b2c      	ldr	r3, [pc, #176]	; (8ecc <SendReJoinReq+0x220>)
    8e1c:	6819      	ldr	r1, [r3, #0]
    8e1e:	4b33      	ldr	r3, [pc, #204]	; (8eec <SendReJoinReq+0x240>)
    8e20:	2208      	movs	r2, #8
    8e22:	0018      	movs	r0, r3
    8e24:	4b2d      	ldr	r3, [pc, #180]	; (8edc <SendReJoinReq+0x230>)
    8e26:	4798      	blx	r3

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
    8e28:	4b31      	ldr	r3, [pc, #196]	; (8ef0 <SendReJoinReq+0x244>)
    8e2a:	0019      	movs	r1, r3
    8e2c:	2008      	movs	r0, #8
    8e2e:	4b2e      	ldr	r3, [pc, #184]	; (8ee8 <SendReJoinReq+0x23c>)
    8e30:	4798      	blx	r3
    8e32:	1e03      	subs	r3, r0, #0
    8e34:	d037      	beq.n	8ea6 <SendReJoinReq+0x1fa>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    8e36:	2312      	movs	r3, #18
    8e38:	e043      	b.n	8ec2 <SendReJoinReq+0x216>

            break;
        }
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
    8e3a:	4a24      	ldr	r2, [pc, #144]	; (8ecc <SendReJoinReq+0x220>)
    8e3c:	2386      	movs	r3, #134	; 0x86
    8e3e:	005b      	lsls	r3, r3, #1
    8e40:	2100      	movs	r1, #0
    8e42:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
    8e44:	4a21      	ldr	r2, [pc, #132]	; (8ecc <SendReJoinReq+0x220>)
    8e46:	2388      	movs	r3, #136	; 0x88
    8e48:	005b      	lsls	r3, r3, #1
    8e4a:	4922      	ldr	r1, [pc, #136]	; (8ed4 <SendReJoinReq+0x228>)
    8e4c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    8e4e:	4a1f      	ldr	r2, [pc, #124]	; (8ecc <SendReJoinReq+0x220>)
    8e50:	238a      	movs	r3, #138	; 0x8a
    8e52:	005b      	lsls	r3, r3, #1
    8e54:	21ff      	movs	r1, #255	; 0xff
    8e56:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
    8e58:	230c      	movs	r3, #12
    8e5a:	18fb      	adds	r3, r7, r3
    8e5c:	781a      	ldrb	r2, [r3, #0]
    8e5e:	211f      	movs	r1, #31
    8e60:	400a      	ands	r2, r1
    8e62:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
    8e64:	230c      	movs	r3, #12
    8e66:	18fb      	adds	r3, r7, r3
    8e68:	7819      	ldrb	r1, [r3, #0]
    8e6a:	4a18      	ldr	r2, [pc, #96]	; (8ecc <SendReJoinReq+0x220>)
    8e6c:	2316      	movs	r3, #22
    8e6e:	33ff      	adds	r3, #255	; 0xff
    8e70:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    8e72:	4b16      	ldr	r3, [pc, #88]	; (8ecc <SendReJoinReq+0x220>)
    8e74:	6859      	ldr	r1, [r3, #4]
    8e76:	4b1f      	ldr	r3, [pc, #124]	; (8ef4 <SendReJoinReq+0x248>)
    8e78:	2208      	movs	r2, #8
    8e7a:	0018      	movs	r0, r3
    8e7c:	4b17      	ldr	r3, [pc, #92]	; (8edc <SendReJoinReq+0x230>)
    8e7e:	4798      	blx	r3
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    8e80:	4b12      	ldr	r3, [pc, #72]	; (8ecc <SendReJoinReq+0x220>)
    8e82:	6819      	ldr	r1, [r3, #0]
    8e84:	4b1c      	ldr	r3, [pc, #112]	; (8ef8 <SendReJoinReq+0x24c>)
    8e86:	2208      	movs	r2, #8
    8e88:	0018      	movs	r0, r3
    8e8a:	4b14      	ldr	r3, [pc, #80]	; (8edc <SendReJoinReq+0x230>)
    8e8c:	4798      	blx	r3

            allowDelayedTx = false;
    8e8e:	230f      	movs	r3, #15
    8e90:	18fb      	adds	r3, r7, r3
    8e92:	2200      	movs	r2, #0
    8e94:	701a      	strb	r2, [r3, #0]

            break;
    8e96:	e007      	b.n	8ea8 <SendReJoinReq+0x1fc>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    8e98:	230e      	movs	r3, #14
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	2202      	movs	r2, #2
    8e9e:	701a      	strb	r2, [r3, #0]
            break;
    8ea0:	e002      	b.n	8ea8 <SendReJoinReq+0x1fc>
            break;
    8ea2:	46c0      	nop			; (mov r8, r8)
    8ea4:	e000      	b.n	8ea8 <SendReJoinReq+0x1fc>
            break;
    8ea6:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
    8ea8:	230e      	movs	r3, #14
    8eaa:	18fc      	adds	r4, r7, r3
    8eac:	230f      	movs	r3, #15
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	0018      	movs	r0, r3
    8eb4:	4b11      	ldr	r3, [pc, #68]	; (8efc <SendReJoinReq+0x250>)
    8eb6:	4798      	blx	r3
    8eb8:	0003      	movs	r3, r0
    8eba:	7023      	strb	r3, [r4, #0]
    return status;
    8ebc:	230e      	movs	r3, #14
    8ebe:	18fb      	adds	r3, r7, r3
    8ec0:	781b      	ldrb	r3, [r3, #0]
}
    8ec2:	0018      	movs	r0, r3
    8ec4:	46bd      	mov	sp, r7
    8ec6:	b005      	add	sp, #20
    8ec8:	bd90      	pop	{r4, r7, pc}
    8eca:	46c0      	nop			; (mov r8, r8)
    8ecc:	20000c8c 	.word	0x20000c8c
    8ed0:	000004c4 	.word	0x000004c4
    8ed4:	20000c96 	.word	0x20000c96
    8ed8:	20000da3 	.word	0x20000da3
    8edc:	00004339 	.word	0x00004339
    8ee0:	20000dab 	.word	0x20000dab
    8ee4:	20000db4 	.word	0x20000db4
    8ee8:	0000f291 	.word	0x0000f291
    8eec:	20000da6 	.word	0x20000da6
    8ef0:	20000dae 	.word	0x20000dae
    8ef4:	20000da2 	.word	0x20000da2
    8ef8:	20000daa 	.word	0x20000daa
    8efc:	00008f01 	.word	0x00008f01

00008f00 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
    8f00:	b5b0      	push	{r4, r5, r7, lr}
    8f02:	b08a      	sub	sp, #40	; 0x28
    8f04:	af02      	add	r7, sp, #8
    8f06:	0002      	movs	r2, r0
    8f08:	1dfb      	adds	r3, r7, #7
    8f0a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    8f0c:	231f      	movs	r3, #31
    8f0e:	18fb      	adds	r3, r7, r3
    8f10:	2203      	movs	r2, #3
    8f12:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
    8f14:	2300      	movs	r3, #0
    8f16:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
    8f18:	2300      	movs	r3, #0
    8f1a:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
    8f1c:	4ba7      	ldr	r3, [pc, #668]	; (91bc <ScheduleTx+0x2bc>)
    8f1e:	4aa8      	ldr	r2, [pc, #672]	; (91c0 <ScheduleTx+0x2c0>)
    8f20:	589a      	ldr	r2, [r3, r2]
    8f22:	238a      	movs	r3, #138	; 0x8a
    8f24:	005b      	lsls	r3, r3, #1
    8f26:	5cd3      	ldrb	r3, [r2, r3]
    8f28:	0018      	movs	r0, r3
    8f2a:	4ba6      	ldr	r3, [pc, #664]	; (91c4 <ScheduleTx+0x2c4>)
    8f2c:	4798      	blx	r3

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
    8f2e:	4aa3      	ldr	r2, [pc, #652]	; (91bc <ScheduleTx+0x2bc>)
    8f30:	23d1      	movs	r3, #209	; 0xd1
    8f32:	009b      	lsls	r3, r3, #2
    8f34:	58d2      	ldr	r2, [r2, r3]
    8f36:	230c      	movs	r3, #12
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8f3c:	4b9f      	ldr	r3, [pc, #636]	; (91bc <ScheduleTx+0x2bc>)
    8f3e:	4aa0      	ldr	r2, [pc, #640]	; (91c0 <ScheduleTx+0x2c0>)
    8f40:	589b      	ldr	r3, [r3, r2]
    8f42:	22d5      	movs	r2, #213	; 0xd5
    8f44:	569a      	ldrsb	r2, [r3, r2]
    8f46:	230c      	movs	r3, #12
    8f48:	18fb      	adds	r3, r7, r3
    8f4a:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    8f4c:	4b9b      	ldr	r3, [pc, #620]	; (91bc <ScheduleTx+0x2bc>)
    8f4e:	4a9c      	ldr	r2, [pc, #624]	; (91c0 <ScheduleTx+0x2c0>)
    8f50:	589a      	ldr	r2, [r3, r2]
    8f52:	2389      	movs	r3, #137	; 0x89
    8f54:	005b      	lsls	r3, r3, #1
    8f56:	5cd2      	ldrb	r2, [r2, r3]
    8f58:	230c      	movs	r3, #12
    8f5a:	18fb      	adds	r3, r7, r3
    8f5c:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    8f5e:	4b97      	ldr	r3, [pc, #604]	; (91bc <ScheduleTx+0x2bc>)
    8f60:	4a97      	ldr	r2, [pc, #604]	; (91c0 <ScheduleTx+0x2c0>)
    8f62:	589a      	ldr	r2, [r3, r2]
    8f64:	2388      	movs	r3, #136	; 0x88
    8f66:	009b      	lsls	r3, r3, #2
    8f68:	5cd3      	ldrb	r3, [r2, r3]
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d104      	bne.n	8f78 <ScheduleTx+0x78>
    {
        nextChan.Joined = false;
    8f6e:	230c      	movs	r3, #12
    8f70:	18fb      	adds	r3, r7, r3
    8f72:	2200      	movs	r2, #0
    8f74:	725a      	strb	r2, [r3, #9]
    8f76:	e003      	b.n	8f80 <ScheduleTx+0x80>
    }
    else
    {
        nextChan.Joined = true;
    8f78:	230c      	movs	r3, #12
    8f7a:	18fb      	adds	r3, r7, r3
    8f7c:	2201      	movs	r2, #1
    8f7e:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
    8f80:	4a8e      	ldr	r2, [pc, #568]	; (91bc <ScheduleTx+0x2bc>)
    8f82:	23d0      	movs	r3, #208	; 0xd0
    8f84:	009b      	lsls	r3, r3, #2
    8f86:	58d2      	ldr	r2, [r2, r3]
    8f88:	230c      	movs	r3, #12
    8f8a:	18fb      	adds	r3, r7, r3
    8f8c:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
    8f8e:	4b8b      	ldr	r3, [pc, #556]	; (91bc <ScheduleTx+0x2bc>)
    8f90:	4a8b      	ldr	r2, [pc, #556]	; (91c0 <ScheduleTx+0x2c0>)
    8f92:	589b      	ldr	r3, [r3, r2]
    8f94:	7818      	ldrb	r0, [r3, #0]
    8f96:	4b89      	ldr	r3, [pc, #548]	; (91bc <ScheduleTx+0x2bc>)
    8f98:	4a89      	ldr	r2, [pc, #548]	; (91c0 <ScheduleTx+0x2c0>)
    8f9a:	589b      	ldr	r3, [r3, r2]
    8f9c:	3314      	adds	r3, #20
    8f9e:	33ff      	adds	r3, #255	; 0xff
    8fa0:	001a      	movs	r2, r3
    8fa2:	231f      	movs	r3, #31
    8fa4:	18fc      	adds	r4, r7, r3
    8fa6:	2318      	movs	r3, #24
    8fa8:	18fd      	adds	r5, r7, r3
    8faa:	230c      	movs	r3, #12
    8fac:	18f9      	adds	r1, r7, r3
    8fae:	4b86      	ldr	r3, [pc, #536]	; (91c8 <ScheduleTx+0x2c8>)
    8fb0:	9300      	str	r3, [sp, #0]
    8fb2:	002b      	movs	r3, r5
    8fb4:	4d85      	ldr	r5, [pc, #532]	; (91cc <ScheduleTx+0x2cc>)
    8fb6:	47a8      	blx	r5
    8fb8:	0003      	movs	r3, r0
    8fba:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
    8fbc:	231f      	movs	r3, #31
    8fbe:	18fb      	adds	r3, r7, r3
    8fc0:	781b      	ldrb	r3, [r3, #0]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d026      	beq.n	9014 <ScheduleTx+0x114>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
    8fc6:	231f      	movs	r3, #31
    8fc8:	18fb      	adds	r3, r7, r3
    8fca:	781b      	ldrb	r3, [r3, #0]
    8fcc:	2b0b      	cmp	r3, #11
    8fce:	d11d      	bne.n	900c <ScheduleTx+0x10c>
    8fd0:	1dfb      	adds	r3, r7, #7
    8fd2:	781b      	ldrb	r3, [r3, #0]
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	d019      	beq.n	900c <ScheduleTx+0x10c>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
    8fd8:	69bb      	ldr	r3, [r7, #24]
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d014      	beq.n	9008 <ScheduleTx+0x108>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
    8fde:	4a77      	ldr	r2, [pc, #476]	; (91bc <ScheduleTx+0x2bc>)
    8fe0:	23d7      	movs	r3, #215	; 0xd7
    8fe2:	009b      	lsls	r3, r3, #2
    8fe4:	58d3      	ldr	r3, [r2, r3]
    8fe6:	2220      	movs	r2, #32
    8fe8:	431a      	orrs	r2, r3
    8fea:	0011      	movs	r1, r2
    8fec:	4a73      	ldr	r2, [pc, #460]	; (91bc <ScheduleTx+0x2bc>)
    8fee:	23d7      	movs	r3, #215	; 0xd7
    8ff0:	009b      	lsls	r3, r3, #2
    8ff2:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
    8ff4:	69ba      	ldr	r2, [r7, #24]
    8ff6:	4b76      	ldr	r3, [pc, #472]	; (91d0 <ScheduleTx+0x2d0>)
    8ff8:	0011      	movs	r1, r2
    8ffa:	0018      	movs	r0, r3
    8ffc:	4b75      	ldr	r3, [pc, #468]	; (91d4 <ScheduleTx+0x2d4>)
    8ffe:	4798      	blx	r3
                TimerStart( &MacCtx.TxDelayedTimer );
    9000:	4b73      	ldr	r3, [pc, #460]	; (91d0 <ScheduleTx+0x2d0>)
    9002:	0018      	movs	r0, r3
    9004:	4b74      	ldr	r3, [pc, #464]	; (91d8 <ScheduleTx+0x2d8>)
    9006:	4798      	blx	r3
            }
            return LORAMAC_STATUS_OK;
    9008:	2300      	movs	r3, #0
    900a:	e0d2      	b.n	91b2 <ScheduleTx+0x2b2>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
    900c:	231f      	movs	r3, #31
    900e:	18fb      	adds	r3, r7, r3
    9010:	781b      	ldrb	r3, [r3, #0]
    9012:	e0ce      	b.n	91b2 <ScheduleTx+0x2b2>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9014:	4b69      	ldr	r3, [pc, #420]	; (91bc <ScheduleTx+0x2bc>)
    9016:	4a6a      	ldr	r2, [pc, #424]	; (91c0 <ScheduleTx+0x2c0>)
    9018:	589b      	ldr	r3, [r3, r2]
    901a:	781d      	ldrb	r5, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
    901c:	4b67      	ldr	r3, [pc, #412]	; (91bc <ScheduleTx+0x2bc>)
    901e:	4a68      	ldr	r2, [pc, #416]	; (91c0 <ScheduleTx+0x2c0>)
    9020:	589b      	ldr	r3, [r3, r2]
    9022:	7818      	ldrb	r0, [r3, #0]
    9024:	4b65      	ldr	r3, [pc, #404]	; (91bc <ScheduleTx+0x2bc>)
    9026:	4a66      	ldr	r2, [pc, #408]	; (91c0 <ScheduleTx+0x2c0>)
    9028:	589a      	ldr	r2, [r3, r2]
    902a:	2302      	movs	r3, #2
    902c:	33ff      	adds	r3, #255	; 0xff
    902e:	5cd1      	ldrb	r1, [r2, r3]
    9030:	4b62      	ldr	r3, [pc, #392]	; (91bc <ScheduleTx+0x2bc>)
    9032:	4a63      	ldr	r2, [pc, #396]	; (91c0 <ScheduleTx+0x2c0>)
    9034:	589b      	ldr	r3, [r3, r2]
    9036:	22d5      	movs	r2, #213	; 0xd5
    9038:	569c      	ldrsb	r4, [r3, r2]
    903a:	4b60      	ldr	r3, [pc, #384]	; (91bc <ScheduleTx+0x2bc>)
    903c:	4a60      	ldr	r2, [pc, #384]	; (91c0 <ScheduleTx+0x2c0>)
    903e:	589b      	ldr	r3, [r3, r2]
    9040:	22f5      	movs	r2, #245	; 0xf5
    9042:	5c9b      	ldrb	r3, [r3, r2]
    9044:	b25b      	sxtb	r3, r3
    9046:	0022      	movs	r2, r4
    9048:	4c64      	ldr	r4, [pc, #400]	; (91dc <ScheduleTx+0x2dc>)
    904a:	47a0      	blx	r4
    904c:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    904e:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    9050:	4b5a      	ldr	r3, [pc, #360]	; (91bc <ScheduleTx+0x2bc>)
    9052:	4a5b      	ldr	r2, [pc, #364]	; (91c0 <ScheduleTx+0x2c0>)
    9054:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9056:	22dc      	movs	r2, #220	; 0xdc
    9058:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    905a:	4b58      	ldr	r3, [pc, #352]	; (91bc <ScheduleTx+0x2bc>)
    905c:	4a58      	ldr	r2, [pc, #352]	; (91c0 <ScheduleTx+0x2c0>)
    905e:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9060:	22d8      	movs	r2, #216	; 0xd8
    9062:	589a      	ldr	r2, [r3, r2]
    9064:	4b5e      	ldr	r3, [pc, #376]	; (91e0 <ScheduleTx+0x2e0>)
    9066:	9300      	str	r3, [sp, #0]
    9068:	0013      	movs	r3, r2
    906a:	0002      	movs	r2, r0
    906c:	0028      	movs	r0, r5
    906e:	4c5d      	ldr	r4, [pc, #372]	; (91e4 <ScheduleTx+0x2e4>)
    9070:	47a0      	blx	r4
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9072:	4b52      	ldr	r3, [pc, #328]	; (91bc <ScheduleTx+0x2bc>)
    9074:	4a52      	ldr	r2, [pc, #328]	; (91c0 <ScheduleTx+0x2c0>)
    9076:	589b      	ldr	r3, [r3, r2]
    9078:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    907a:	4b50      	ldr	r3, [pc, #320]	; (91bc <ScheduleTx+0x2bc>)
    907c:	4a50      	ldr	r2, [pc, #320]	; (91c0 <ScheduleTx+0x2c0>)
    907e:	589b      	ldr	r3, [r3, r2]
    9080:	22fc      	movs	r2, #252	; 0xfc
    9082:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9084:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    9086:	4b4d      	ldr	r3, [pc, #308]	; (91bc <ScheduleTx+0x2bc>)
    9088:	4a4d      	ldr	r2, [pc, #308]	; (91c0 <ScheduleTx+0x2c0>)
    908a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    908c:	22dc      	movs	r2, #220	; 0xdc
    908e:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    9090:	4b4a      	ldr	r3, [pc, #296]	; (91bc <ScheduleTx+0x2bc>)
    9092:	4a4b      	ldr	r2, [pc, #300]	; (91c0 <ScheduleTx+0x2c0>)
    9094:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    9096:	22d8      	movs	r2, #216	; 0xd8
    9098:	589a      	ldr	r2, [r3, r2]
    909a:	4b53      	ldr	r3, [pc, #332]	; (91e8 <ScheduleTx+0x2e8>)
    909c:	9300      	str	r3, [sp, #0]
    909e:	0013      	movs	r3, r2
    90a0:	0022      	movs	r2, r4
    90a2:	4c50      	ldr	r4, [pc, #320]	; (91e4 <ScheduleTx+0x2e4>)
    90a4:	47a0      	blx	r4
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    90a6:	4b45      	ldr	r3, [pc, #276]	; (91bc <ScheduleTx+0x2bc>)
    90a8:	4a45      	ldr	r2, [pc, #276]	; (91c0 <ScheduleTx+0x2c0>)
    90aa:	589a      	ldr	r2, [r3, r2]
    90ac:	2388      	movs	r3, #136	; 0x88
    90ae:	009b      	lsls	r3, r3, #2
    90b0:	5cd3      	ldrb	r3, [r2, r3]
    90b2:	2b00      	cmp	r3, #0
    90b4:	d11c      	bne.n	90f0 <ScheduleTx+0x1f0>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    90b6:	4b41      	ldr	r3, [pc, #260]	; (91bc <ScheduleTx+0x2bc>)
    90b8:	4a41      	ldr	r2, [pc, #260]	; (91c0 <ScheduleTx+0x2c0>)
    90ba:	589b      	ldr	r3, [r3, r2]
    90bc:	22ec      	movs	r2, #236	; 0xec
    90be:	589b      	ldr	r3, [r3, r2]
    90c0:	493e      	ldr	r1, [pc, #248]	; (91bc <ScheduleTx+0x2bc>)
    90c2:	22f5      	movs	r2, #245	; 0xf5
    90c4:	0092      	lsls	r2, r2, #2
    90c6:	588a      	ldr	r2, [r1, r2]
    90c8:	1899      	adds	r1, r3, r2
    90ca:	4a3c      	ldr	r2, [pc, #240]	; (91bc <ScheduleTx+0x2bc>)
    90cc:	23f0      	movs	r3, #240	; 0xf0
    90ce:	009b      	lsls	r3, r3, #2
    90d0:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    90d2:	4b3a      	ldr	r3, [pc, #232]	; (91bc <ScheduleTx+0x2bc>)
    90d4:	4a3a      	ldr	r2, [pc, #232]	; (91c0 <ScheduleTx+0x2c0>)
    90d6:	589b      	ldr	r3, [r3, r2]
    90d8:	22f0      	movs	r2, #240	; 0xf0
    90da:	589b      	ldr	r3, [r3, r2]
    90dc:	4937      	ldr	r1, [pc, #220]	; (91bc <ScheduleTx+0x2bc>)
    90de:	22fa      	movs	r2, #250	; 0xfa
    90e0:	0092      	lsls	r2, r2, #2
    90e2:	588a      	ldr	r2, [r1, r2]
    90e4:	1899      	adds	r1, r3, r2
    90e6:	4a35      	ldr	r2, [pc, #212]	; (91bc <ScheduleTx+0x2bc>)
    90e8:	23f1      	movs	r3, #241	; 0xf1
    90ea:	009b      	lsls	r3, r3, #2
    90ec:	50d1      	str	r1, [r2, r3]
    90ee:	e03a      	b.n	9166 <ScheduleTx+0x266>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    90f0:	2308      	movs	r3, #8
    90f2:	18fb      	adds	r3, r7, r3
    90f4:	0018      	movs	r0, r3
    90f6:	4b3d      	ldr	r3, [pc, #244]	; (91ec <ScheduleTx+0x2ec>)
    90f8:	4798      	blx	r3
    90fa:	1e03      	subs	r3, r0, #0
    90fc:	d001      	beq.n	9102 <ScheduleTx+0x202>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    90fe:	2313      	movs	r3, #19
    9100:	e057      	b.n	91b2 <ScheduleTx+0x2b2>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
    9102:	4b2e      	ldr	r3, [pc, #184]	; (91bc <ScheduleTx+0x2bc>)
    9104:	4a3a      	ldr	r2, [pc, #232]	; (91f0 <ScheduleTx+0x2f0>)
    9106:	5c98      	ldrb	r0, [r3, r2]
    9108:	4b2c      	ldr	r3, [pc, #176]	; (91bc <ScheduleTx+0x2bc>)
    910a:	4a2d      	ldr	r2, [pc, #180]	; (91c0 <ScheduleTx+0x2c0>)
    910c:	589b      	ldr	r3, [r3, r2]
    910e:	22d5      	movs	r2, #213	; 0xd5
    9110:	569b      	ldrsb	r3, [r3, r2]
    9112:	68ba      	ldr	r2, [r7, #8]
    9114:	b2d2      	uxtb	r2, r2
    9116:	0019      	movs	r1, r3
    9118:	4b36      	ldr	r3, [pc, #216]	; (91f4 <ScheduleTx+0x2f4>)
    911a:	4798      	blx	r3
    911c:	0003      	movs	r3, r0
    911e:	001a      	movs	r2, r3
    9120:	2301      	movs	r3, #1
    9122:	4053      	eors	r3, r2
    9124:	b2db      	uxtb	r3, r3
    9126:	2b00      	cmp	r3, #0
    9128:	d001      	beq.n	912e <ScheduleTx+0x22e>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
    912a:	2308      	movs	r3, #8
    912c:	e041      	b.n	91b2 <ScheduleTx+0x2b2>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    912e:	4b23      	ldr	r3, [pc, #140]	; (91bc <ScheduleTx+0x2bc>)
    9130:	4a23      	ldr	r2, [pc, #140]	; (91c0 <ScheduleTx+0x2c0>)
    9132:	589b      	ldr	r3, [r3, r2]
    9134:	22e4      	movs	r2, #228	; 0xe4
    9136:	589b      	ldr	r3, [r3, r2]
    9138:	4920      	ldr	r1, [pc, #128]	; (91bc <ScheduleTx+0x2bc>)
    913a:	22f5      	movs	r2, #245	; 0xf5
    913c:	0092      	lsls	r2, r2, #2
    913e:	588a      	ldr	r2, [r1, r2]
    9140:	1899      	adds	r1, r3, r2
    9142:	4a1e      	ldr	r2, [pc, #120]	; (91bc <ScheduleTx+0x2bc>)
    9144:	23f0      	movs	r3, #240	; 0xf0
    9146:	009b      	lsls	r3, r3, #2
    9148:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    914a:	4b1c      	ldr	r3, [pc, #112]	; (91bc <ScheduleTx+0x2bc>)
    914c:	4a1c      	ldr	r2, [pc, #112]	; (91c0 <ScheduleTx+0x2c0>)
    914e:	589b      	ldr	r3, [r3, r2]
    9150:	22e8      	movs	r2, #232	; 0xe8
    9152:	589b      	ldr	r3, [r3, r2]
    9154:	4919      	ldr	r1, [pc, #100]	; (91bc <ScheduleTx+0x2bc>)
    9156:	22fa      	movs	r2, #250	; 0xfa
    9158:	0092      	lsls	r2, r2, #2
    915a:	588a      	ldr	r2, [r1, r2]
    915c:	1899      	adds	r1, r3, r2
    915e:	4a17      	ldr	r2, [pc, #92]	; (91bc <ScheduleTx+0x2bc>)
    9160:	23f1      	movs	r3, #241	; 0xf1
    9162:	009b      	lsls	r3, r3, #2
    9164:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
    9166:	4b15      	ldr	r3, [pc, #84]	; (91bc <ScheduleTx+0x2bc>)
    9168:	4a15      	ldr	r2, [pc, #84]	; (91c0 <ScheduleTx+0x2c0>)
    916a:	589b      	ldr	r3, [r3, r2]
    916c:	22d5      	movs	r2, #213	; 0xd5
    916e:	569b      	ldrsb	r3, [r3, r2]
    9170:	b2d8      	uxtb	r0, r3
    9172:	4b12      	ldr	r3, [pc, #72]	; (91bc <ScheduleTx+0x2bc>)
    9174:	4a12      	ldr	r2, [pc, #72]	; (91c0 <ScheduleTx+0x2c0>)
    9176:	589a      	ldr	r2, [r3, r2]
    9178:	2314      	movs	r3, #20
    917a:	33ff      	adds	r3, #255	; 0xff
    917c:	5cd3      	ldrb	r3, [r2, r3]
    917e:	221e      	movs	r2, #30
    9180:	18bc      	adds	r4, r7, r2
    9182:	0019      	movs	r1, r3
    9184:	4b1c      	ldr	r3, [pc, #112]	; (91f8 <ScheduleTx+0x2f8>)
    9186:	4798      	blx	r3
    9188:	0003      	movs	r3, r0
    918a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
    918c:	231e      	movs	r3, #30
    918e:	18fb      	adds	r3, r7, r3
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	2b00      	cmp	r3, #0
    9194:	d003      	beq.n	919e <ScheduleTx+0x29e>
    {
        return retval;
    9196:	231e      	movs	r3, #30
    9198:	18fb      	adds	r3, r7, r3
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	e009      	b.n	91b2 <ScheduleTx+0x2b2>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
    919e:	4b07      	ldr	r3, [pc, #28]	; (91bc <ScheduleTx+0x2bc>)
    91a0:	4a07      	ldr	r2, [pc, #28]	; (91c0 <ScheduleTx+0x2c0>)
    91a2:	589a      	ldr	r2, [r3, r2]
    91a4:	2314      	movs	r3, #20
    91a6:	33ff      	adds	r3, #255	; 0xff
    91a8:	5cd3      	ldrb	r3, [r2, r3]
    91aa:	0018      	movs	r0, r3
    91ac:	4b13      	ldr	r3, [pc, #76]	; (91fc <ScheduleTx+0x2fc>)
    91ae:	4798      	blx	r3
    91b0:	0003      	movs	r3, r0
}
    91b2:	0018      	movs	r0, r3
    91b4:	46bd      	mov	sp, r7
    91b6:	b008      	add	sp, #32
    91b8:	bdb0      	pop	{r4, r5, r7, pc}
    91ba:	46c0      	nop			; (mov r8, r8)
    91bc:	20000c8c 	.word	0x20000c8c
    91c0:	000004c4 	.word	0x000004c4
    91c4:	0000933d 	.word	0x0000933d
    91c8:	20000fd0 	.word	0x20000fd0
    91cc:	00010271 	.word	0x00010271
    91d0:	20001010 	.word	0x20001010
    91d4:	00017119 	.word	0x00017119
    91d8:	00016d8d 	.word	0x00016d8d
    91dc:	000102dd 	.word	0x000102dd
    91e0:	20001054 	.word	0x20001054
    91e4:	00010041 	.word	0x00010041
    91e8:	20001068 	.word	0x20001068
    91ec:	0000cd6d 	.word	0x0000cd6d
    91f0:	0000023f 	.word	0x0000023f
    91f4:	00007981 	.word	0x00007981
    91f8:	00009201 	.word	0x00009201
    91fc:	00009951 	.word	0x00009951

00009200 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
    9200:	b5b0      	push	{r4, r5, r7, lr}
    9202:	b084      	sub	sp, #16
    9204:	af00      	add	r7, sp, #0
    9206:	0002      	movs	r2, r0
    9208:	1dfb      	adds	r3, r7, #7
    920a:	701a      	strb	r2, [r3, #0]
    920c:	1dbb      	adds	r3, r7, #6
    920e:	1c0a      	adds	r2, r1, #0
    9210:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
    9212:	230f      	movs	r3, #15
    9214:	18fb      	adds	r3, r7, r3
    9216:	2210      	movs	r2, #16
    9218:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
    921a:	2300      	movs	r3, #0
    921c:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
    921e:	4a40      	ldr	r2, [pc, #256]	; (9320 <SecureFrame+0x120>)
    9220:	2386      	movs	r3, #134	; 0x86
    9222:	005b      	lsls	r3, r3, #1
    9224:	5cd3      	ldrb	r3, [r2, r3]
    9226:	2b01      	cmp	r3, #1
    9228:	d01f      	beq.n	926a <SecureFrame+0x6a>
    922a:	dc02      	bgt.n	9232 <SecureFrame+0x32>
    922c:	2b00      	cmp	r3, #0
    922e:	d005      	beq.n	923c <SecureFrame+0x3c>
    9230:	e06e      	b.n	9310 <SecureFrame+0x110>
    9232:	2b02      	cmp	r3, #2
    9234:	d030      	beq.n	9298 <SecureFrame+0x98>
    9236:	2b04      	cmp	r3, #4
    9238:	d045      	beq.n	92c6 <SecureFrame+0xc6>
    923a:	e069      	b.n	9310 <SecureFrame+0x110>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
    923c:	230f      	movs	r3, #15
    923e:	18fc      	adds	r4, r7, r3
    9240:	4b38      	ldr	r3, [pc, #224]	; (9324 <SecureFrame+0x124>)
    9242:	0018      	movs	r0, r3
    9244:	4b38      	ldr	r3, [pc, #224]	; (9328 <SecureFrame+0x128>)
    9246:	4798      	blx	r3
    9248:	0003      	movs	r3, r0
    924a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    924c:	230f      	movs	r3, #15
    924e:	18fb      	adds	r3, r7, r3
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	2b00      	cmp	r3, #0
    9254:	d001      	beq.n	925a <SecureFrame+0x5a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    9256:	2311      	movs	r3, #17
    9258:	e05d      	b.n	9316 <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
    925a:	4a31      	ldr	r2, [pc, #196]	; (9320 <SecureFrame+0x120>)
    925c:	238a      	movs	r3, #138	; 0x8a
    925e:	005b      	lsls	r3, r3, #1
    9260:	5cd3      	ldrb	r3, [r2, r3]
    9262:	b29a      	uxth	r2, r3
    9264:	4b2e      	ldr	r3, [pc, #184]	; (9320 <SecureFrame+0x120>)
    9266:	811a      	strh	r2, [r3, #8]
            break;
    9268:	e054      	b.n	9314 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_RE_JOIN_1:
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
    926a:	230f      	movs	r3, #15
    926c:	18fc      	adds	r4, r7, r3
    926e:	4b2d      	ldr	r3, [pc, #180]	; (9324 <SecureFrame+0x124>)
    9270:	0018      	movs	r0, r3
    9272:	4b2e      	ldr	r3, [pc, #184]	; (932c <SecureFrame+0x12c>)
    9274:	4798      	blx	r3
    9276:	0003      	movs	r3, r0
    9278:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    927a:	230f      	movs	r3, #15
    927c:	18fb      	adds	r3, r7, r3
    927e:	781b      	ldrb	r3, [r3, #0]
    9280:	2b00      	cmp	r3, #0
    9282:	d001      	beq.n	9288 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    9284:	2311      	movs	r3, #17
    9286:	e046      	b.n	9316 <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
    9288:	4a25      	ldr	r2, [pc, #148]	; (9320 <SecureFrame+0x120>)
    928a:	238a      	movs	r3, #138	; 0x8a
    928c:	005b      	lsls	r3, r3, #1
    928e:	5cd3      	ldrb	r3, [r2, r3]
    9290:	b29a      	uxth	r2, r3
    9292:	4b23      	ldr	r3, [pc, #140]	; (9320 <SecureFrame+0x120>)
    9294:	811a      	strh	r2, [r3, #8]
            break;
    9296:	e03d      	b.n	9314 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_RE_JOIN_0_2:
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
    9298:	230f      	movs	r3, #15
    929a:	18fc      	adds	r4, r7, r3
    929c:	4b21      	ldr	r3, [pc, #132]	; (9324 <SecureFrame+0x124>)
    929e:	0018      	movs	r0, r3
    92a0:	4b23      	ldr	r3, [pc, #140]	; (9330 <SecureFrame+0x130>)
    92a2:	4798      	blx	r3
    92a4:	0003      	movs	r3, r0
    92a6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    92a8:	230f      	movs	r3, #15
    92aa:	18fb      	adds	r3, r7, r3
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d001      	beq.n	92b6 <SecureFrame+0xb6>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    92b2:	2311      	movs	r3, #17
    92b4:	e02f      	b.n	9316 <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
    92b6:	4a1a      	ldr	r2, [pc, #104]	; (9320 <SecureFrame+0x120>)
    92b8:	238a      	movs	r3, #138	; 0x8a
    92ba:	005b      	lsls	r3, r3, #1
    92bc:	5cd3      	ldrb	r3, [r2, r3]
    92be:	b29a      	uxth	r2, r3
    92c0:	4b17      	ldr	r3, [pc, #92]	; (9320 <SecureFrame+0x120>)
    92c2:	811a      	strh	r2, [r3, #8]
            break;
    92c4:	e026      	b.n	9314 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    92c6:	2308      	movs	r3, #8
    92c8:	18fb      	adds	r3, r7, r3
    92ca:	0018      	movs	r0, r3
    92cc:	4b19      	ldr	r3, [pc, #100]	; (9334 <SecureFrame+0x134>)
    92ce:	4798      	blx	r3
    92d0:	1e03      	subs	r3, r0, #0
    92d2:	d001      	beq.n	92d8 <SecureFrame+0xd8>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    92d4:	2312      	movs	r3, #18
    92d6:	e01e      	b.n	9316 <SecureFrame+0x116>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
    92d8:	68b8      	ldr	r0, [r7, #8]
    92da:	230f      	movs	r3, #15
    92dc:	18fc      	adds	r4, r7, r3
    92de:	4d11      	ldr	r5, [pc, #68]	; (9324 <SecureFrame+0x124>)
    92e0:	1dbb      	adds	r3, r7, #6
    92e2:	781a      	ldrb	r2, [r3, #0]
    92e4:	1dfb      	adds	r3, r7, #7
    92e6:	7819      	ldrb	r1, [r3, #0]
    92e8:	002b      	movs	r3, r5
    92ea:	4d13      	ldr	r5, [pc, #76]	; (9338 <SecureFrame+0x138>)
    92ec:	47a8      	blx	r5
    92ee:	0003      	movs	r3, r0
    92f0:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    92f2:	230f      	movs	r3, #15
    92f4:	18fb      	adds	r3, r7, r3
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	2b00      	cmp	r3, #0
    92fa:	d001      	beq.n	9300 <SecureFrame+0x100>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    92fc:	2311      	movs	r3, #17
    92fe:	e00a      	b.n	9316 <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
    9300:	4a07      	ldr	r2, [pc, #28]	; (9320 <SecureFrame+0x120>)
    9302:	238a      	movs	r3, #138	; 0x8a
    9304:	005b      	lsls	r3, r3, #1
    9306:	5cd3      	ldrb	r3, [r2, r3]
    9308:	b29a      	uxth	r2, r3
    930a:	4b05      	ldr	r3, [pc, #20]	; (9320 <SecureFrame+0x120>)
    930c:	811a      	strh	r2, [r3, #8]
            break;
    930e:	e001      	b.n	9314 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
    9310:	2303      	movs	r3, #3
    9312:	e000      	b.n	9316 <SecureFrame+0x116>
    }
    return LORAMAC_STATUS_OK;
    9314:	2300      	movs	r3, #0
}
    9316:	0018      	movs	r0, r3
    9318:	46bd      	mov	sp, r7
    931a:	b004      	add	sp, #16
    931c:	bdb0      	pop	{r4, r5, r7, pc}
    931e:	46c0      	nop			; (mov r8, r8)
    9320:	20000c8c 	.word	0x20000c8c
    9324:	20000d9c 	.word	0x20000d9c
    9328:	0000e391 	.word	0x0000e391
    932c:	0000e489 	.word	0x0000e489
    9330:	0000e521 	.word	0x0000e521
    9334:	0000f1e9 	.word	0x0000f1e9
    9338:	0000eb2d 	.word	0x0000eb2d

0000933c <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
    933c:	b5f0      	push	{r4, r5, r6, r7, lr}
    933e:	b08d      	sub	sp, #52	; 0x34
    9340:	af02      	add	r7, sp, #8
    9342:	0002      	movs	r2, r0
    9344:	230f      	movs	r3, #15
    9346:	18fb      	adds	r3, r7, r3
    9348:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    934a:	4b33      	ldr	r3, [pc, #204]	; (9418 <CalculateBackOff+0xdc>)
    934c:	4a33      	ldr	r2, [pc, #204]	; (941c <CalculateBackOff+0xe0>)
    934e:	589a      	ldr	r2, [r3, r2]
    9350:	2388      	movs	r3, #136	; 0x88
    9352:	009b      	lsls	r3, r3, #2
    9354:	5cd3      	ldrb	r3, [r2, r3]
    9356:	2b00      	cmp	r3, #0
    9358:	d104      	bne.n	9364 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
    935a:	2310      	movs	r3, #16
    935c:	18fb      	adds	r3, r7, r3
    935e:	2200      	movs	r2, #0
    9360:	701a      	strb	r2, [r3, #0]
    9362:	e003      	b.n	936c <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
    9364:	2310      	movs	r3, #16
    9366:	18fb      	adds	r3, r7, r3
    9368:	2201      	movs	r2, #1
    936a:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    936c:	4b2a      	ldr	r3, [pc, #168]	; (9418 <CalculateBackOff+0xdc>)
    936e:	4a2b      	ldr	r2, [pc, #172]	; (941c <CalculateBackOff+0xe0>)
    9370:	589a      	ldr	r2, [r3, r2]
    9372:	2389      	movs	r3, #137	; 0x89
    9374:	005b      	lsls	r3, r3, #1
    9376:	5cd2      	ldrb	r2, [r2, r3]
    9378:	2310      	movs	r3, #16
    937a:	18fb      	adds	r3, r7, r3
    937c:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
    937e:	2310      	movs	r3, #16
    9380:	18fb      	adds	r3, r7, r3
    9382:	220f      	movs	r2, #15
    9384:	18ba      	adds	r2, r7, r2
    9386:	7812      	ldrb	r2, [r2, #0]
    9388:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.InitializationTime );
    938a:	2320      	movs	r3, #32
    938c:	18fb      	adds	r3, r7, r3
    938e:	0018      	movs	r0, r3
    9390:	4b23      	ldr	r3, [pc, #140]	; (9420 <CalculateBackOff+0xe4>)
    9392:	4798      	blx	r3
    9394:	2310      	movs	r3, #16
    9396:	18fd      	adds	r5, r7, r3
    9398:	003e      	movs	r6, r7
    939a:	491f      	ldr	r1, [pc, #124]	; (9418 <CalculateBackOff+0xdc>)
    939c:	23d3      	movs	r3, #211	; 0xd3
    939e:	009b      	lsls	r3, r3, #2
    93a0:	2220      	movs	r2, #32
    93a2:	18ba      	adds	r2, r7, r2
    93a4:	2404      	movs	r4, #4
    93a6:	18c8      	adds	r0, r1, r3
    93a8:	1900      	adds	r0, r0, r4
    93aa:	466c      	mov	r4, sp
    93ac:	6800      	ldr	r0, [r0, #0]
    93ae:	6020      	str	r0, [r4, #0]
    93b0:	58cb      	ldr	r3, [r1, r3]
    93b2:	6811      	ldr	r1, [r2, #0]
    93b4:	6852      	ldr	r2, [r2, #4]
    93b6:	0030      	movs	r0, r6
    93b8:	4c1a      	ldr	r4, [pc, #104]	; (9424 <CalculateBackOff+0xe8>)
    93ba:	47a0      	blx	r4
    93bc:	003a      	movs	r2, r7
    93be:	1d2b      	adds	r3, r5, #4
    93c0:	ca03      	ldmia	r2!, {r0, r1}
    93c2:	c303      	stmia	r3!, {r0, r1}
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
    93c4:	4b14      	ldr	r3, [pc, #80]	; (9418 <CalculateBackOff+0xdc>)
    93c6:	4a18      	ldr	r2, [pc, #96]	; (9428 <CalculateBackOff+0xec>)
    93c8:	589a      	ldr	r2, [r3, r2]
    93ca:	2310      	movs	r3, #16
    93cc:	18fb      	adds	r3, r7, r3
    93ce:	60da      	str	r2, [r3, #12]
    calcBackOff.LastTxIsJoinRequest = MacCtx.LastTxIsJoinRequest;
    93d0:	4a11      	ldr	r2, [pc, #68]	; (9418 <CalculateBackOff+0xdc>)
    93d2:	23d2      	movs	r3, #210	; 0xd2
    93d4:	009b      	lsls	r3, r3, #2
    93d6:	5cd2      	ldrb	r2, [r2, r3]
    93d8:	2310      	movs	r3, #16
    93da:	18fb      	adds	r3, r7, r3
    93dc:	705a      	strb	r2, [r3, #1]

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
    93de:	4b0e      	ldr	r3, [pc, #56]	; (9418 <CalculateBackOff+0xdc>)
    93e0:	4a0e      	ldr	r2, [pc, #56]	; (941c <CalculateBackOff+0xe0>)
    93e2:	589b      	ldr	r3, [r3, r2]
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	2210      	movs	r2, #16
    93e8:	18ba      	adds	r2, r7, r2
    93ea:	0011      	movs	r1, r2
    93ec:	0018      	movs	r0, r3
    93ee:	4b0f      	ldr	r3, [pc, #60]	; (942c <CalculateBackOff+0xf0>)
    93f0:	4798      	blx	r3

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
    93f2:	4b09      	ldr	r3, [pc, #36]	; (9418 <CalculateBackOff+0xdc>)
    93f4:	4a09      	ldr	r2, [pc, #36]	; (941c <CalculateBackOff+0xe0>)
    93f6:	589b      	ldr	r3, [r3, r2]
    93f8:	4a0d      	ldr	r2, [pc, #52]	; (9430 <CalculateBackOff+0xf4>)
    93fa:	5a9b      	ldrh	r3, [r3, r2]
    93fc:	3b01      	subs	r3, #1
    93fe:	4a06      	ldr	r2, [pc, #24]	; (9418 <CalculateBackOff+0xdc>)
    9400:	4909      	ldr	r1, [pc, #36]	; (9428 <CalculateBackOff+0xec>)
    9402:	5852      	ldr	r2, [r2, r1]
    9404:	435a      	muls	r2, r3
    9406:	0011      	movs	r1, r2
    9408:	4a03      	ldr	r2, [pc, #12]	; (9418 <CalculateBackOff+0xdc>)
    940a:	23d1      	movs	r3, #209	; 0xd1
    940c:	009b      	lsls	r3, r3, #2
    940e:	50d1      	str	r1, [r2, r3]
}
    9410:	46c0      	nop			; (mov r8, r8)
    9412:	46bd      	mov	sp, r7
    9414:	b00b      	add	sp, #44	; 0x2c
    9416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9418:	20000c8c 	.word	0x20000c8c
    941c:	000004c4 	.word	0x000004c4
    9420:	00016d19 	.word	0x00016d19
    9424:	00016b5d 	.word	0x00016b5d
    9428:	00000404 	.word	0x00000404
    942c:	00010241 	.word	0x00010241
    9430:	0000021a 	.word	0x0000021a

00009434 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
    9434:	b580      	push	{r7, lr}
    9436:	b082      	sub	sp, #8
    9438:	af00      	add	r7, sp, #0
    943a:	1d3b      	adds	r3, r7, #4
    943c:	7019      	strb	r1, [r3, #0]
    943e:	0011      	movs	r1, r2
    9440:	1dfb      	adds	r3, r7, #7
    9442:	1c02      	adds	r2, r0, #0
    9444:	701a      	strb	r2, [r3, #0]
    9446:	1dbb      	adds	r3, r7, #6
    9448:	1c0a      	adds	r2, r1, #0
    944a:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
    944c:	1dfb      	adds	r3, r7, #7
    944e:	781b      	ldrb	r3, [r3, #0]
    9450:	2b00      	cmp	r3, #0
    9452:	d003      	beq.n	945c <RemoveMacCommands+0x28>
    9454:	1dfb      	adds	r3, r7, #7
    9456:	781b      	ldrb	r3, [r3, #0]
    9458:	2b01      	cmp	r3, #1
    945a:	d10f      	bne.n	947c <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
    945c:	1dbb      	adds	r3, r7, #6
    945e:	781b      	ldrb	r3, [r3, #0]
    9460:	2b01      	cmp	r3, #1
    9462:	d109      	bne.n	9478 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
    9464:	1d3b      	adds	r3, r7, #4
    9466:	781b      	ldrb	r3, [r3, #0]
    9468:	2220      	movs	r2, #32
    946a:	4013      	ands	r3, r2
    946c:	b2db      	uxtb	r3, r3
    946e:	2b00      	cmp	r3, #0
    9470:	d004      	beq.n	947c <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
    9472:	4b04      	ldr	r3, [pc, #16]	; (9484 <RemoveMacCommands+0x50>)
    9474:	4798      	blx	r3
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
    9476:	e001      	b.n	947c <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
    9478:	4b02      	ldr	r3, [pc, #8]	; (9484 <RemoveMacCommands+0x50>)
    947a:	4798      	blx	r3
}
    947c:	46c0      	nop			; (mov r8, r8)
    947e:	46bd      	mov	sp, r7
    9480:	b002      	add	sp, #8
    9482:	bd80      	pop	{r7, pc}
    9484:	0000cce9 	.word	0x0000cce9

00009488 <ResetMacParameters>:


static void ResetMacParameters( void )
{
    9488:	b580      	push	{r7, lr}
    948a:	b082      	sub	sp, #8
    948c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    948e:	4b57      	ldr	r3, [pc, #348]	; (95ec <ResetMacParameters+0x164>)
    9490:	4a57      	ldr	r2, [pc, #348]	; (95f0 <ResetMacParameters+0x168>)
    9492:	589a      	ldr	r2, [r3, r2]
    9494:	2388      	movs	r3, #136	; 0x88
    9496:	009b      	lsls	r3, r3, #2
    9498:	2100      	movs	r1, #0
    949a:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
    949c:	4b53      	ldr	r3, [pc, #332]	; (95ec <ResetMacParameters+0x164>)
    949e:	4a54      	ldr	r2, [pc, #336]	; (95f0 <ResetMacParameters+0x168>)
    94a0:	589b      	ldr	r3, [r3, r2]
    94a2:	22cc      	movs	r2, #204	; 0xcc
    94a4:	2100      	movs	r1, #0
    94a6:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
    94a8:	4b52      	ldr	r3, [pc, #328]	; (95f4 <ResetMacParameters+0x16c>)
    94aa:	4798      	blx	r3

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    94ac:	4b4f      	ldr	r3, [pc, #316]	; (95ec <ResetMacParameters+0x164>)
    94ae:	4a50      	ldr	r2, [pc, #320]	; (95f0 <ResetMacParameters+0x168>)
    94b0:	589a      	ldr	r2, [r3, r2]
    94b2:	2388      	movs	r3, #136	; 0x88
    94b4:	005b      	lsls	r3, r3, #1
    94b6:	2100      	movs	r1, #0
    94b8:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    94ba:	4b4c      	ldr	r3, [pc, #304]	; (95ec <ResetMacParameters+0x164>)
    94bc:	4a4c      	ldr	r2, [pc, #304]	; (95f0 <ResetMacParameters+0x168>)
    94be:	589b      	ldr	r3, [r3, r2]
    94c0:	4a4d      	ldr	r2, [pc, #308]	; (95f8 <ResetMacParameters+0x170>)
    94c2:	2100      	movs	r1, #0
    94c4:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
    94c6:	4b49      	ldr	r3, [pc, #292]	; (95ec <ResetMacParameters+0x164>)
    94c8:	4a49      	ldr	r2, [pc, #292]	; (95f0 <ResetMacParameters+0x168>)
    94ca:	589a      	ldr	r2, [r3, r2]
    94cc:	2312      	movs	r3, #18
    94ce:	33ff      	adds	r3, #255	; 0xff
    94d0:	2100      	movs	r1, #0
    94d2:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
    94d4:	4b45      	ldr	r3, [pc, #276]	; (95ec <ResetMacParameters+0x164>)
    94d6:	4a46      	ldr	r2, [pc, #280]	; (95f0 <ResetMacParameters+0x168>)
    94d8:	589b      	ldr	r3, [r3, r2]
    94da:	4a48      	ldr	r2, [pc, #288]	; (95fc <ResetMacParameters+0x174>)
    94dc:	2101      	movs	r1, #1
    94de:	5299      	strh	r1, [r3, r2]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    94e0:	4b42      	ldr	r3, [pc, #264]	; (95ec <ResetMacParameters+0x164>)
    94e2:	4a43      	ldr	r2, [pc, #268]	; (95f0 <ResetMacParameters+0x168>)
    94e4:	589b      	ldr	r3, [r3, r2]
    94e6:	4a41      	ldr	r2, [pc, #260]	; (95ec <ResetMacParameters+0x164>)
    94e8:	4941      	ldr	r1, [pc, #260]	; (95f0 <ResetMacParameters+0x168>)
    94ea:	5852      	ldr	r2, [r2, r1]
    94ec:	2104      	movs	r1, #4
    94ee:	5651      	ldrsb	r1, [r2, r1]
    94f0:	22d4      	movs	r2, #212	; 0xd4
    94f2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    94f4:	4b3d      	ldr	r3, [pc, #244]	; (95ec <ResetMacParameters+0x164>)
    94f6:	4a3e      	ldr	r2, [pc, #248]	; (95f0 <ResetMacParameters+0x168>)
    94f8:	589b      	ldr	r3, [r3, r2]
    94fa:	4a3c      	ldr	r2, [pc, #240]	; (95ec <ResetMacParameters+0x164>)
    94fc:	493c      	ldr	r1, [pc, #240]	; (95f0 <ResetMacParameters+0x168>)
    94fe:	5852      	ldr	r2, [r2, r1]
    9500:	2105      	movs	r1, #5
    9502:	5651      	ldrsb	r1, [r2, r1]
    9504:	22d5      	movs	r2, #213	; 0xd5
    9506:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
    9508:	4b38      	ldr	r3, [pc, #224]	; (95ec <ResetMacParameters+0x164>)
    950a:	4a39      	ldr	r2, [pc, #228]	; (95f0 <ResetMacParameters+0x168>)
    950c:	589b      	ldr	r3, [r3, r2]
    950e:	4a37      	ldr	r2, [pc, #220]	; (95ec <ResetMacParameters+0x164>)
    9510:	4937      	ldr	r1, [pc, #220]	; (95f0 <ResetMacParameters+0x168>)
    9512:	5852      	ldr	r2, [r2, r1]
    9514:	2125      	movs	r1, #37	; 0x25
    9516:	5c51      	ldrb	r1, [r2, r1]
    9518:	22f5      	movs	r2, #245	; 0xf5
    951a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    951c:	4b33      	ldr	r3, [pc, #204]	; (95ec <ResetMacParameters+0x164>)
    951e:	4a34      	ldr	r2, [pc, #208]	; (95f0 <ResetMacParameters+0x168>)
    9520:	589b      	ldr	r3, [r3, r2]
    9522:	4a32      	ldr	r2, [pc, #200]	; (95ec <ResetMacParameters+0x164>)
    9524:	4932      	ldr	r1, [pc, #200]	; (95f0 <ResetMacParameters+0x168>)
    9526:	5852      	ldr	r2, [r2, r1]
    9528:	21f8      	movs	r1, #248	; 0xf8
    952a:	185b      	adds	r3, r3, r1
    952c:	3228      	adds	r2, #40	; 0x28
    952e:	ca03      	ldmia	r2!, {r0, r1}
    9530:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
    9532:	4b2e      	ldr	r3, [pc, #184]	; (95ec <ResetMacParameters+0x164>)
    9534:	4a2e      	ldr	r2, [pc, #184]	; (95f0 <ResetMacParameters+0x168>)
    9536:	589a      	ldr	r2, [r3, r2]
    9538:	4b2c      	ldr	r3, [pc, #176]	; (95ec <ResetMacParameters+0x164>)
    953a:	492d      	ldr	r1, [pc, #180]	; (95f0 <ResetMacParameters+0x168>)
    953c:	585b      	ldr	r3, [r3, r1]
    953e:	2130      	movs	r1, #48	; 0x30
    9540:	5c59      	ldrb	r1, [r3, r1]
    9542:	2380      	movs	r3, #128	; 0x80
    9544:	005b      	lsls	r3, r3, #1
    9546:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
    9548:	4b28      	ldr	r3, [pc, #160]	; (95ec <ResetMacParameters+0x164>)
    954a:	4a29      	ldr	r2, [pc, #164]	; (95f0 <ResetMacParameters+0x168>)
    954c:	589a      	ldr	r2, [r3, r2]
    954e:	4b27      	ldr	r3, [pc, #156]	; (95ec <ResetMacParameters+0x164>)
    9550:	4927      	ldr	r1, [pc, #156]	; (95f0 <ResetMacParameters+0x168>)
    9552:	585b      	ldr	r3, [r3, r1]
    9554:	2131      	movs	r1, #49	; 0x31
    9556:	5c59      	ldrb	r1, [r3, r1]
    9558:	2302      	movs	r3, #2
    955a:	33ff      	adds	r3, #255	; 0xff
    955c:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
    955e:	4b23      	ldr	r3, [pc, #140]	; (95ec <ResetMacParameters+0x164>)
    9560:	4a23      	ldr	r2, [pc, #140]	; (95f0 <ResetMacParameters+0x168>)
    9562:	589a      	ldr	r2, [r3, r2]
    9564:	4b21      	ldr	r3, [pc, #132]	; (95ec <ResetMacParameters+0x164>)
    9566:	4922      	ldr	r1, [pc, #136]	; (95f0 <ResetMacParameters+0x168>)
    9568:	585b      	ldr	r3, [r3, r1]
    956a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    956c:	2382      	movs	r3, #130	; 0x82
    956e:	005b      	lsls	r3, r3, #1
    9570:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    9572:	4b1e      	ldr	r3, [pc, #120]	; (95ec <ResetMacParameters+0x164>)
    9574:	4a1e      	ldr	r2, [pc, #120]	; (95f0 <ResetMacParameters+0x168>)
    9576:	589a      	ldr	r2, [r3, r2]
    9578:	4b1c      	ldr	r3, [pc, #112]	; (95ec <ResetMacParameters+0x164>)
    957a:	491d      	ldr	r1, [pc, #116]	; (95f0 <ResetMacParameters+0x168>)
    957c:	585b      	ldr	r3, [r3, r1]
    957e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    9580:	2384      	movs	r3, #132	; 0x84
    9582:	005b      	lsls	r3, r3, #1
    9584:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
    9586:	4b19      	ldr	r3, [pc, #100]	; (95ec <ResetMacParameters+0x164>)
    9588:	4a19      	ldr	r2, [pc, #100]	; (95f0 <ResetMacParameters+0x168>)
    958a:	589b      	ldr	r3, [r3, r2]
    958c:	4a1c      	ldr	r2, [pc, #112]	; (9600 <ResetMacParameters+0x178>)
    958e:	2100      	movs	r1, #0
    9590:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
    9592:	4b16      	ldr	r3, [pc, #88]	; (95ec <ResetMacParameters+0x164>)
    9594:	4a16      	ldr	r2, [pc, #88]	; (95f0 <ResetMacParameters+0x168>)
    9596:	589a      	ldr	r2, [r3, r2]
    9598:	2386      	movs	r3, #134	; 0x86
    959a:	009b      	lsls	r3, r3, #2
    959c:	2100      	movs	r1, #0
    959e:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_APP_DEFAULTS;
    95a0:	003b      	movs	r3, r7
    95a2:	2202      	movs	r2, #2
    95a4:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
    95a6:	003b      	movs	r3, r7
    95a8:	2200      	movs	r2, #0
    95aa:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    95ac:	4b0f      	ldr	r3, [pc, #60]	; (95ec <ResetMacParameters+0x164>)
    95ae:	4a10      	ldr	r2, [pc, #64]	; (95f0 <ResetMacParameters+0x168>)
    95b0:	589b      	ldr	r3, [r3, r2]
    95b2:	781b      	ldrb	r3, [r3, #0]
    95b4:	003a      	movs	r2, r7
    95b6:	0011      	movs	r1, r2
    95b8:	0018      	movs	r0, r3
    95ba:	4b12      	ldr	r3, [pc, #72]	; (9604 <ResetMacParameters+0x17c>)
    95bc:	4798      	blx	r3

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
    95be:	4b0b      	ldr	r3, [pc, #44]	; (95ec <ResetMacParameters+0x164>)
    95c0:	4a0b      	ldr	r2, [pc, #44]	; (95f0 <ResetMacParameters+0x168>)
    95c2:	589a      	ldr	r2, [r3, r2]
    95c4:	2314      	movs	r3, #20
    95c6:	33ff      	adds	r3, #255	; 0xff
    95c8:	2100      	movs	r1, #0
    95ca:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    95cc:	4b07      	ldr	r3, [pc, #28]	; (95ec <ResetMacParameters+0x164>)
    95ce:	4a08      	ldr	r2, [pc, #32]	; (95f0 <ResetMacParameters+0x168>)
    95d0:	589a      	ldr	r2, [r3, r2]
    95d2:	4b06      	ldr	r3, [pc, #24]	; (95ec <ResetMacParameters+0x164>)
    95d4:	4906      	ldr	r1, [pc, #24]	; (95f0 <ResetMacParameters+0x168>)
    95d6:	5859      	ldr	r1, [r3, r1]
    95d8:	2314      	movs	r3, #20
    95da:	33ff      	adds	r3, #255	; 0xff
    95dc:	5cc9      	ldrb	r1, [r1, r3]
    95de:	238a      	movs	r3, #138	; 0x8a
    95e0:	005b      	lsls	r3, r3, #1
    95e2:	54d1      	strb	r1, [r2, r3]
}
    95e4:	46c0      	nop			; (mov r8, r8)
    95e6:	46bd      	mov	sp, r7
    95e8:	b002      	add	sp, #8
    95ea:	bd80      	pop	{r7, pc}
    95ec:	20000c8c 	.word	0x20000c8c
    95f0:	000004c4 	.word	0x000004c4
    95f4:	0000f239 	.word	0x0000f239
    95f8:	00000216 	.word	0x00000216
    95fc:	0000021a 	.word	0x0000021a
    9600:	00000217 	.word	0x00000217
    9604:	0000ff41 	.word	0x0000ff41

00009608 <IsReJoin0Required>:

static bool IsReJoin0Required( )
{
    9608:	b580      	push	{r7, lr}
    960a:	af00      	add	r7, sp, #0

    if( ( MacCtx.NvmCtx->Rejoin0UplinksLimit == MacCtx.NvmCtx->Rejoin0UplinksCounter ) && ( MacCtx.NvmCtx->Version.Fields.Minor == 1 ) && ( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 ) )
    960c:	4b13      	ldr	r3, [pc, #76]	; (965c <IsReJoin0Required+0x54>)
    960e:	4a14      	ldr	r2, [pc, #80]	; (9660 <IsReJoin0Required+0x58>)
    9610:	589b      	ldr	r3, [r3, r2]
    9612:	4a14      	ldr	r2, [pc, #80]	; (9664 <IsReJoin0Required+0x5c>)
    9614:	5a9a      	ldrh	r2, [r3, r2]
    9616:	4b11      	ldr	r3, [pc, #68]	; (965c <IsReJoin0Required+0x54>)
    9618:	4911      	ldr	r1, [pc, #68]	; (9660 <IsReJoin0Required+0x58>)
    961a:	5859      	ldr	r1, [r3, r1]
    961c:	2389      	movs	r3, #137	; 0x89
    961e:	009b      	lsls	r3, r3, #2
    9620:	5acb      	ldrh	r3, [r1, r3]
    9622:	429a      	cmp	r2, r3
    9624:	d116      	bne.n	9654 <IsReJoin0Required+0x4c>
    9626:	4b0d      	ldr	r3, [pc, #52]	; (965c <IsReJoin0Required+0x54>)
    9628:	4a0d      	ldr	r2, [pc, #52]	; (9660 <IsReJoin0Required+0x58>)
    962a:	589b      	ldr	r3, [r3, r2]
    962c:	4a0e      	ldr	r2, [pc, #56]	; (9668 <IsReJoin0Required+0x60>)
    962e:	5c9b      	ldrb	r3, [r3, r2]
    9630:	2b01      	cmp	r3, #1
    9632:	d10f      	bne.n	9654 <IsReJoin0Required+0x4c>
    9634:	4b09      	ldr	r3, [pc, #36]	; (965c <IsReJoin0Required+0x54>)
    9636:	4a0a      	ldr	r2, [pc, #40]	; (9660 <IsReJoin0Required+0x58>)
    9638:	589b      	ldr	r3, [r3, r2]
    963a:	4a0a      	ldr	r2, [pc, #40]	; (9664 <IsReJoin0Required+0x5c>)
    963c:	5a9b      	ldrh	r3, [r3, r2]
    963e:	2b00      	cmp	r3, #0
    9640:	d008      	beq.n	9654 <IsReJoin0Required+0x4c>
    {
        MacCtx.NvmCtx->Rejoin0UplinksCounter = 0;
    9642:	4b06      	ldr	r3, [pc, #24]	; (965c <IsReJoin0Required+0x54>)
    9644:	4a06      	ldr	r2, [pc, #24]	; (9660 <IsReJoin0Required+0x58>)
    9646:	589a      	ldr	r2, [r3, r2]
    9648:	2389      	movs	r3, #137	; 0x89
    964a:	009b      	lsls	r3, r3, #2
    964c:	2100      	movs	r1, #0
    964e:	52d1      	strh	r1, [r2, r3]
        return true;
    9650:	2301      	movs	r3, #1
    9652:	e000      	b.n	9656 <IsReJoin0Required+0x4e>
    }
    return false;
    9654:	2300      	movs	r3, #0
}
    9656:	0018      	movs	r0, r3
    9658:	46bd      	mov	sp, r7
    965a:	bd80      	pop	{r7, pc}
    965c:	20000c8c 	.word	0x20000c8c
    9660:	000004c4 	.word	0x000004c4
    9664:	00000222 	.word	0x00000222
    9668:	0000021e 	.word	0x0000021e

0000966c <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
    966c:	b580      	push	{r7, lr}
    966e:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( );
    9670:	4b04      	ldr	r3, [pc, #16]	; (9684 <OpenContinuousRx2Window+0x18>)
    9672:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    9674:	4b04      	ldr	r3, [pc, #16]	; (9688 <OpenContinuousRx2Window+0x1c>)
    9676:	4a05      	ldr	r2, [pc, #20]	; (968c <OpenContinuousRx2Window+0x20>)
    9678:	2102      	movs	r1, #2
    967a:	5499      	strb	r1, [r3, r2]
}
    967c:	46c0      	nop			; (mov r8, r8)
    967e:	46bd      	mov	sp, r7
    9680:	bd80      	pop	{r7, pc}
    9682:	46c0      	nop			; (mov r8, r8)
    9684:	0000757d 	.word	0x0000757d
    9688:	20000c8c 	.word	0x20000c8c
    968c:	00000464 	.word	0x00000464

00009690 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
    9690:	b590      	push	{r4, r7, lr}
    9692:	b089      	sub	sp, #36	; 0x24
    9694:	af00      	add	r7, sp, #0
    9696:	60f8      	str	r0, [r7, #12]
    9698:	60b9      	str	r1, [r7, #8]
    969a:	603b      	str	r3, [r7, #0]
    969c:	1dfb      	adds	r3, r7, #7
    969e:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
    96a0:	4b9d      	ldr	r3, [pc, #628]	; (9918 <PrepareFrame+0x288>)
    96a2:	2200      	movs	r2, #0
    96a4:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
    96a6:	4b9c      	ldr	r3, [pc, #624]	; (9918 <PrepareFrame+0x288>)
    96a8:	4a9c      	ldr	r2, [pc, #624]	; (991c <PrepareFrame+0x28c>)
    96aa:	589b      	ldr	r3, [r3, r2]
    96ac:	4a9c      	ldr	r2, [pc, #624]	; (9920 <PrepareFrame+0x290>)
    96ae:	2100      	movs	r1, #0
    96b0:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
    96b2:	2300      	movs	r3, #0
    96b4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
    96b6:	2300      	movs	r3, #0
    96b8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
    96ba:	231f      	movs	r3, #31
    96bc:	18fb      	adds	r3, r7, r3
    96be:	2200      	movs	r2, #0
    96c0:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
    96c2:	683b      	ldr	r3, [r7, #0]
    96c4:	2b00      	cmp	r3, #0
    96c6:	d103      	bne.n	96d0 <PrepareFrame+0x40>
    {
        fBufferSize = 0;
    96c8:	2330      	movs	r3, #48	; 0x30
    96ca:	18fb      	adds	r3, r7, r3
    96cc:	2200      	movs	r2, #0
    96ce:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
    96d0:	2330      	movs	r3, #48	; 0x30
    96d2:	18fb      	adds	r3, r7, r3
    96d4:	881a      	ldrh	r2, [r3, #0]
    96d6:	6839      	ldr	r1, [r7, #0]
    96d8:	4b92      	ldr	r3, [pc, #584]	; (9924 <PrepareFrame+0x294>)
    96da:	0018      	movs	r0, r3
    96dc:	4b92      	ldr	r3, [pc, #584]	; (9928 <PrepareFrame+0x298>)
    96de:	4798      	blx	r3
    MacCtx.AppDataSize = fBufferSize;
    96e0:	2330      	movs	r3, #48	; 0x30
    96e2:	18fb      	adds	r3, r7, r3
    96e4:	881b      	ldrh	r3, [r3, #0]
    96e6:	b2d9      	uxtb	r1, r3
    96e8:	4b8b      	ldr	r3, [pc, #556]	; (9918 <PrepareFrame+0x288>)
    96ea:	4a90      	ldr	r2, [pc, #576]	; (992c <PrepareFrame+0x29c>)
    96ec:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
    96ee:	68fb      	ldr	r3, [r7, #12]
    96f0:	781a      	ldrb	r2, [r3, #0]
    96f2:	4b89      	ldr	r3, [pc, #548]	; (9918 <PrepareFrame+0x288>)
    96f4:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
    96f6:	68fb      	ldr	r3, [r7, #12]
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	061b      	lsls	r3, r3, #24
    96fc:	0f5b      	lsrs	r3, r3, #29
    96fe:	b2db      	uxtb	r3, r3
    9700:	2b04      	cmp	r3, #4
    9702:	d005      	beq.n	9710 <PrepareFrame+0x80>
    9704:	2b07      	cmp	r3, #7
    9706:	d100      	bne.n	970a <PrepareFrame+0x7a>
    9708:	e0e2      	b.n	98d0 <PrepareFrame+0x240>
    970a:	2b02      	cmp	r3, #2
    970c:	d006      	beq.n	971c <PrepareFrame+0x8c>
    970e:	e0f9      	b.n	9904 <PrepareFrame+0x274>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
    9710:	4b81      	ldr	r3, [pc, #516]	; (9918 <PrepareFrame+0x288>)
    9712:	4a82      	ldr	r2, [pc, #520]	; (991c <PrepareFrame+0x28c>)
    9714:	589b      	ldr	r3, [r3, r2]
    9716:	4a82      	ldr	r2, [pc, #520]	; (9920 <PrepareFrame+0x290>)
    9718:	2101      	movs	r1, #1
    971a:	5499      	strb	r1, [r3, r2]
            //Intentional fall-through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
    971c:	4a7e      	ldr	r2, [pc, #504]	; (9918 <PrepareFrame+0x288>)
    971e:	2386      	movs	r3, #134	; 0x86
    9720:	005b      	lsls	r3, r3, #1
    9722:	2104      	movs	r1, #4
    9724:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
    9726:	4a7c      	ldr	r2, [pc, #496]	; (9918 <PrepareFrame+0x288>)
    9728:	2388      	movs	r3, #136	; 0x88
    972a:	005b      	lsls	r3, r3, #1
    972c:	4980      	ldr	r1, [pc, #512]	; (9930 <PrepareFrame+0x2a0>)
    972e:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    9730:	4a79      	ldr	r2, [pc, #484]	; (9918 <PrepareFrame+0x288>)
    9732:	238a      	movs	r3, #138	; 0x8a
    9734:	005b      	lsls	r3, r3, #1
    9736:	21ff      	movs	r1, #255	; 0xff
    9738:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
    973a:	68fb      	ldr	r3, [r7, #12]
    973c:	7819      	ldrb	r1, [r3, #0]
    973e:	4a76      	ldr	r2, [pc, #472]	; (9918 <PrepareFrame+0x288>)
    9740:	2316      	movs	r3, #22
    9742:	33ff      	adds	r3, #255	; 0xff
    9744:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
    9746:	4a74      	ldr	r2, [pc, #464]	; (9918 <PrepareFrame+0x288>)
    9748:	1df9      	adds	r1, r7, #7
    974a:	2398      	movs	r3, #152	; 0x98
    974c:	005b      	lsls	r3, r3, #1
    974e:	7809      	ldrb	r1, [r1, #0]
    9750:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
    9752:	4b71      	ldr	r3, [pc, #452]	; (9918 <PrepareFrame+0x288>)
    9754:	4a71      	ldr	r2, [pc, #452]	; (991c <PrepareFrame+0x28c>)
    9756:	589b      	ldr	r3, [r3, r2]
    9758:	6c59      	ldr	r1, [r3, #68]	; 0x44
    975a:	4a6f      	ldr	r2, [pc, #444]	; (9918 <PrepareFrame+0x288>)
    975c:	238c      	movs	r3, #140	; 0x8c
    975e:	005b      	lsls	r3, r3, #1
    9760:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    9762:	68bb      	ldr	r3, [r7, #8]
    9764:	7819      	ldrb	r1, [r3, #0]
    9766:	4a6c      	ldr	r2, [pc, #432]	; (9918 <PrepareFrame+0x288>)
    9768:	238e      	movs	r3, #142	; 0x8e
    976a:	005b      	lsls	r3, r3, #1
    976c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
    976e:	4b6a      	ldr	r3, [pc, #424]	; (9918 <PrepareFrame+0x288>)
    9770:	4a6e      	ldr	r2, [pc, #440]	; (992c <PrepareFrame+0x29c>)
    9772:	5c99      	ldrb	r1, [r3, r2]
    9774:	4a68      	ldr	r2, [pc, #416]	; (9918 <PrepareFrame+0x288>)
    9776:	239c      	movs	r3, #156	; 0x9c
    9778:	005b      	lsls	r3, r3, #1
    977a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
    977c:	4a66      	ldr	r2, [pc, #408]	; (9918 <PrepareFrame+0x288>)
    977e:	239a      	movs	r3, #154	; 0x9a
    9780:	005b      	lsls	r3, r3, #1
    9782:	4968      	ldr	r1, [pc, #416]	; (9924 <PrepareFrame+0x294>)
    9784:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    9786:	2318      	movs	r3, #24
    9788:	18fb      	adds	r3, r7, r3
    978a:	0018      	movs	r0, r3
    978c:	4b69      	ldr	r3, [pc, #420]	; (9934 <PrepareFrame+0x2a4>)
    978e:	4798      	blx	r3
    9790:	1e03      	subs	r3, r0, #0
    9792:	d001      	beq.n	9798 <PrepareFrame+0x108>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    9794:	2312      	movs	r3, #18
    9796:	e0bb      	b.n	9910 <PrepareFrame+0x280>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
    9798:	69bb      	ldr	r3, [r7, #24]
    979a:	b299      	uxth	r1, r3
    979c:	4a5e      	ldr	r2, [pc, #376]	; (9918 <PrepareFrame+0x288>)
    979e:	238f      	movs	r3, #143	; 0x8f
    97a0:	005b      	lsls	r3, r3, #1
    97a2:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbTrans = 0;
    97a4:	4b5c      	ldr	r3, [pc, #368]	; (9918 <PrepareFrame+0x288>)
    97a6:	4a64      	ldr	r2, [pc, #400]	; (9938 <PrepareFrame+0x2a8>)
    97a8:	2100      	movs	r1, #0
    97aa:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
    97ac:	4a5a      	ldr	r2, [pc, #360]	; (9918 <PrepareFrame+0x288>)
    97ae:	2385      	movs	r3, #133	; 0x85
    97b0:	00db      	lsls	r3, r3, #3
    97b2:	2100      	movs	r1, #0
    97b4:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
    97b6:	69b9      	ldr	r1, [r7, #24]
    97b8:	4a57      	ldr	r2, [pc, #348]	; (9918 <PrepareFrame+0x288>)
    97ba:	2386      	movs	r3, #134	; 0x86
    97bc:	00db      	lsls	r3, r3, #3
    97be:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    97c0:	2314      	movs	r3, #20
    97c2:	18fb      	adds	r3, r7, r3
    97c4:	0018      	movs	r0, r3
    97c6:	4b5d      	ldr	r3, [pc, #372]	; (993c <PrepareFrame+0x2ac>)
    97c8:	4798      	blx	r3
    97ca:	1e03      	subs	r3, r0, #0
    97cc:	d001      	beq.n	97d2 <PrepareFrame+0x142>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    97ce:	2313      	movs	r3, #19
    97d0:	e09e      	b.n	9910 <PrepareFrame+0x280>
            }

            if( macCmdsSize > 0 )
    97d2:	697b      	ldr	r3, [r7, #20]
    97d4:	2b00      	cmp	r3, #0
    97d6:	d100      	bne.n	97da <PrepareFrame+0x14a>
    97d8:	e096      	b.n	9908 <PrepareFrame+0x278>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
    97da:	4b4f      	ldr	r3, [pc, #316]	; (9918 <PrepareFrame+0x288>)
    97dc:	4a4f      	ldr	r2, [pc, #316]	; (991c <PrepareFrame+0x28c>)
    97de:	589b      	ldr	r3, [r3, r2]
    97e0:	22d5      	movs	r2, #213	; 0xd5
    97e2:	569b      	ldrsb	r3, [r3, r2]
    97e4:	221f      	movs	r2, #31
    97e6:	18bc      	adds	r4, r7, r2
    97e8:	0018      	movs	r0, r3
    97ea:	4b55      	ldr	r3, [pc, #340]	; (9940 <PrepareFrame+0x2b0>)
    97ec:	4798      	blx	r3
    97ee:	0003      	movs	r3, r0
    97f0:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
    97f2:	4b49      	ldr	r3, [pc, #292]	; (9918 <PrepareFrame+0x288>)
    97f4:	4a4d      	ldr	r2, [pc, #308]	; (992c <PrepareFrame+0x29c>)
    97f6:	5c9b      	ldrb	r3, [r3, r2]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d025      	beq.n	9848 <PrepareFrame+0x1b8>
    97fc:	697b      	ldr	r3, [r7, #20]
    97fe:	2b0f      	cmp	r3, #15
    9800:	d822      	bhi.n	9848 <PrepareFrame+0x1b8>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
    9802:	4a50      	ldr	r2, [pc, #320]	; (9944 <PrepareFrame+0x2b4>)
    9804:	2314      	movs	r3, #20
    9806:	18fb      	adds	r3, r7, r3
    9808:	0019      	movs	r1, r3
    980a:	200f      	movs	r0, #15
    980c:	4b4e      	ldr	r3, [pc, #312]	; (9948 <PrepareFrame+0x2b8>)
    980e:	4798      	blx	r3
    9810:	1e03      	subs	r3, r0, #0
    9812:	d001      	beq.n	9818 <PrepareFrame+0x188>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    9814:	2313      	movs	r3, #19
    9816:	e07b      	b.n	9910 <PrepareFrame+0x280>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
    9818:	697b      	ldr	r3, [r7, #20]
    981a:	b2db      	uxtb	r3, r3
    981c:	1c1a      	adds	r2, r3, #0
    981e:	230f      	movs	r3, #15
    9820:	4013      	ands	r3, r2
    9822:	b2da      	uxtb	r2, r3
    9824:	68bb      	ldr	r3, [r7, #8]
    9826:	210f      	movs	r1, #15
    9828:	400a      	ands	r2, r1
    982a:	0010      	movs	r0, r2
    982c:	781a      	ldrb	r2, [r3, #0]
    982e:	210f      	movs	r1, #15
    9830:	438a      	bics	r2, r1
    9832:	1c11      	adds	r1, r2, #0
    9834:	1c02      	adds	r2, r0, #0
    9836:	430a      	orrs	r2, r1
    9838:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    983a:	68bb      	ldr	r3, [r7, #8]
    983c:	7819      	ldrb	r1, [r3, #0]
    983e:	4a36      	ldr	r2, [pc, #216]	; (9918 <PrepareFrame+0x288>)
    9840:	238e      	movs	r3, #142	; 0x8e
    9842:	005b      	lsls	r3, r3, #1
    9844:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
    9846:	e05f      	b.n	9908 <PrepareFrame+0x278>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
    9848:	4b33      	ldr	r3, [pc, #204]	; (9918 <PrepareFrame+0x288>)
    984a:	4a38      	ldr	r2, [pc, #224]	; (992c <PrepareFrame+0x29c>)
    984c:	5c9b      	ldrb	r3, [r3, r2]
    984e:	2b00      	cmp	r3, #0
    9850:	d016      	beq.n	9880 <PrepareFrame+0x1f0>
    9852:	697b      	ldr	r3, [r7, #20]
    9854:	2b0f      	cmp	r3, #15
    9856:	d913      	bls.n	9880 <PrepareFrame+0x1f0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    9858:	231f      	movs	r3, #31
    985a:	18fb      	adds	r3, r7, r3
    985c:	7818      	ldrb	r0, [r3, #0]
    985e:	4b2e      	ldr	r3, [pc, #184]	; (9918 <PrepareFrame+0x288>)
    9860:	4a2e      	ldr	r2, [pc, #184]	; (991c <PrepareFrame+0x28c>)
    9862:	589b      	ldr	r3, [r3, r2]
    9864:	3317      	adds	r3, #23
    9866:	33ff      	adds	r3, #255	; 0xff
    9868:	001a      	movs	r2, r3
    986a:	2314      	movs	r3, #20
    986c:	18fb      	adds	r3, r7, r3
    986e:	0019      	movs	r1, r3
    9870:	4b35      	ldr	r3, [pc, #212]	; (9948 <PrepareFrame+0x2b8>)
    9872:	4798      	blx	r3
    9874:	1e03      	subs	r3, r0, #0
    9876:	d001      	beq.n	987c <PrepareFrame+0x1ec>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    9878:	2313      	movs	r3, #19
    987a:	e049      	b.n	9910 <PrepareFrame+0x280>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
    987c:	230a      	movs	r3, #10
    987e:	e047      	b.n	9910 <PrepareFrame+0x280>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    9880:	231f      	movs	r3, #31
    9882:	18fb      	adds	r3, r7, r3
    9884:	7818      	ldrb	r0, [r3, #0]
    9886:	4b24      	ldr	r3, [pc, #144]	; (9918 <PrepareFrame+0x288>)
    9888:	4a24      	ldr	r2, [pc, #144]	; (991c <PrepareFrame+0x28c>)
    988a:	589b      	ldr	r3, [r3, r2]
    988c:	3317      	adds	r3, #23
    988e:	33ff      	adds	r3, #255	; 0xff
    9890:	001a      	movs	r2, r3
    9892:	2314      	movs	r3, #20
    9894:	18fb      	adds	r3, r7, r3
    9896:	0019      	movs	r1, r3
    9898:	4b2b      	ldr	r3, [pc, #172]	; (9948 <PrepareFrame+0x2b8>)
    989a:	4798      	blx	r3
    989c:	1e03      	subs	r3, r0, #0
    989e:	d001      	beq.n	98a4 <PrepareFrame+0x214>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    98a0:	2313      	movs	r3, #19
    98a2:	e035      	b.n	9910 <PrepareFrame+0x280>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
    98a4:	4a1c      	ldr	r2, [pc, #112]	; (9918 <PrepareFrame+0x288>)
    98a6:	2398      	movs	r3, #152	; 0x98
    98a8:	005b      	lsls	r3, r3, #1
    98aa:	2100      	movs	r1, #0
    98ac:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
    98ae:	4b1a      	ldr	r3, [pc, #104]	; (9918 <PrepareFrame+0x288>)
    98b0:	4a1a      	ldr	r2, [pc, #104]	; (991c <PrepareFrame+0x28c>)
    98b2:	589b      	ldr	r3, [r3, r2]
    98b4:	3317      	adds	r3, #23
    98b6:	33ff      	adds	r3, #255	; 0xff
    98b8:	0019      	movs	r1, r3
    98ba:	4a17      	ldr	r2, [pc, #92]	; (9918 <PrepareFrame+0x288>)
    98bc:	239a      	movs	r3, #154	; 0x9a
    98be:	005b      	lsls	r3, r3, #1
    98c0:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
    98c2:	697b      	ldr	r3, [r7, #20]
    98c4:	b2d9      	uxtb	r1, r3
    98c6:	4a14      	ldr	r2, [pc, #80]	; (9918 <PrepareFrame+0x288>)
    98c8:	239c      	movs	r3, #156	; 0x9c
    98ca:	005b      	lsls	r3, r3, #1
    98cc:	54d1      	strb	r1, [r2, r3]
            break;
    98ce:	e01b      	b.n	9908 <PrepareFrame+0x278>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
    98d0:	683b      	ldr	r3, [r7, #0]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d01a      	beq.n	990c <PrepareFrame+0x27c>
    98d6:	4b10      	ldr	r3, [pc, #64]	; (9918 <PrepareFrame+0x288>)
    98d8:	4a14      	ldr	r2, [pc, #80]	; (992c <PrepareFrame+0x29c>)
    98da:	5c9b      	ldrb	r3, [r3, r2]
    98dc:	2b00      	cmp	r3, #0
    98de:	d015      	beq.n	990c <PrepareFrame+0x27c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
    98e0:	481a      	ldr	r0, [pc, #104]	; (994c <PrepareFrame+0x2bc>)
    98e2:	4b0d      	ldr	r3, [pc, #52]	; (9918 <PrepareFrame+0x288>)
    98e4:	4a11      	ldr	r2, [pc, #68]	; (992c <PrepareFrame+0x29c>)
    98e6:	5c9b      	ldrb	r3, [r3, r2]
    98e8:	b29a      	uxth	r2, r3
    98ea:	683b      	ldr	r3, [r7, #0]
    98ec:	0019      	movs	r1, r3
    98ee:	4b0e      	ldr	r3, [pc, #56]	; (9928 <PrepareFrame+0x298>)
    98f0:	4798      	blx	r3
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
    98f2:	4b09      	ldr	r3, [pc, #36]	; (9918 <PrepareFrame+0x288>)
    98f4:	4a0d      	ldr	r2, [pc, #52]	; (992c <PrepareFrame+0x29c>)
    98f6:	5c9b      	ldrb	r3, [r3, r2]
    98f8:	b29b      	uxth	r3, r3
    98fa:	3301      	adds	r3, #1
    98fc:	b29a      	uxth	r2, r3
    98fe:	4b06      	ldr	r3, [pc, #24]	; (9918 <PrepareFrame+0x288>)
    9900:	811a      	strh	r2, [r3, #8]
            }
            break;
    9902:	e003      	b.n	990c <PrepareFrame+0x27c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
    9904:	2302      	movs	r3, #2
    9906:	e003      	b.n	9910 <PrepareFrame+0x280>
            break;
    9908:	46c0      	nop			; (mov r8, r8)
    990a:	e000      	b.n	990e <PrepareFrame+0x27e>
            break;
    990c:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
    990e:	2300      	movs	r3, #0
}
    9910:	0018      	movs	r0, r3
    9912:	46bd      	mov	sp, r7
    9914:	b009      	add	sp, #36	; 0x24
    9916:	bd90      	pop	{r4, r7, pc}
    9918:	20000c8c 	.word	0x20000c8c
    991c:	000004c4 	.word	0x000004c4
    9920:	00000217 	.word	0x00000217
    9924:	20000dcc 	.word	0x20000dcc
    9928:	00004339 	.word	0x00004339
    992c:	0000023f 	.word	0x0000023f
    9930:	20000c96 	.word	0x20000c96
    9934:	0000f1e9 	.word	0x0000f1e9
    9938:	00000429 	.word	0x00000429
    993c:	0000cd6d 	.word	0x0000cd6d
    9940:	000078fd 	.word	0x000078fd
    9944:	20000dac 	.word	0x20000dac
    9948:	0000cd99 	.word	0x0000cd99
    994c:	20000c97 	.word	0x20000c97

00009950 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
    9950:	b590      	push	{r4, r7, lr}
    9952:	b089      	sub	sp, #36	; 0x24
    9954:	af00      	add	r7, sp, #0
    9956:	0002      	movs	r2, r0
    9958:	1dfb      	adds	r3, r7, #7
    995a:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
    995c:	230b      	movs	r3, #11
    995e:	18fb      	adds	r3, r7, r3
    9960:	2200      	movs	r2, #0
    9962:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
    9964:	230c      	movs	r3, #12
    9966:	18fb      	adds	r3, r7, r3
    9968:	1dfa      	adds	r2, r7, #7
    996a:	7812      	ldrb	r2, [r2, #0]
    996c:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    996e:	4b50      	ldr	r3, [pc, #320]	; (9ab0 <SendFrameOnChannel+0x160>)
    9970:	4a50      	ldr	r2, [pc, #320]	; (9ab4 <SendFrameOnChannel+0x164>)
    9972:	589b      	ldr	r3, [r3, r2]
    9974:	22d5      	movs	r2, #213	; 0xd5
    9976:	569a      	ldrsb	r2, [r3, r2]
    9978:	230c      	movs	r3, #12
    997a:	18fb      	adds	r3, r7, r3
    997c:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    997e:	4b4c      	ldr	r3, [pc, #304]	; (9ab0 <SendFrameOnChannel+0x160>)
    9980:	4a4c      	ldr	r2, [pc, #304]	; (9ab4 <SendFrameOnChannel+0x164>)
    9982:	589b      	ldr	r3, [r3, r2]
    9984:	22d4      	movs	r2, #212	; 0xd4
    9986:	569a      	ldrsb	r2, [r3, r2]
    9988:	230c      	movs	r3, #12
    998a:	18fb      	adds	r3, r7, r3
    998c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    998e:	4b48      	ldr	r3, [pc, #288]	; (9ab0 <SendFrameOnChannel+0x160>)
    9990:	4a48      	ldr	r2, [pc, #288]	; (9ab4 <SendFrameOnChannel+0x164>)
    9992:	589a      	ldr	r2, [r3, r2]
    9994:	2382      	movs	r3, #130	; 0x82
    9996:	005b      	lsls	r3, r3, #1
    9998:	58d2      	ldr	r2, [r2, r3]
    999a:	230c      	movs	r3, #12
    999c:	18fb      	adds	r3, r7, r3
    999e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    99a0:	4b43      	ldr	r3, [pc, #268]	; (9ab0 <SendFrameOnChannel+0x160>)
    99a2:	4a44      	ldr	r2, [pc, #272]	; (9ab4 <SendFrameOnChannel+0x164>)
    99a4:	589a      	ldr	r2, [r3, r2]
    99a6:	2384      	movs	r3, #132	; 0x84
    99a8:	005b      	lsls	r3, r3, #1
    99aa:	58d2      	ldr	r2, [r2, r3]
    99ac:	230c      	movs	r3, #12
    99ae:	18fb      	adds	r3, r7, r3
    99b0:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
    99b2:	4b3f      	ldr	r3, [pc, #252]	; (9ab0 <SendFrameOnChannel+0x160>)
    99b4:	891a      	ldrh	r2, [r3, #8]
    99b6:	230c      	movs	r3, #12
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
    99bc:	4b3e      	ldr	r3, [pc, #248]	; (9ab8 <SendFrameOnChannel+0x168>)
    99be:	4798      	blx	r3
    99c0:	1e03      	subs	r3, r0, #0
    99c2:	d001      	beq.n	99c8 <SendFrameOnChannel+0x78>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
    99c4:	230e      	movs	r3, #14
    99c6:	e06e      	b.n	9aa6 <SendFrameOnChannel+0x156>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    99c8:	4b39      	ldr	r3, [pc, #228]	; (9ab0 <SendFrameOnChannel+0x160>)
    99ca:	4a3a      	ldr	r2, [pc, #232]	; (9ab4 <SendFrameOnChannel+0x164>)
    99cc:	589b      	ldr	r3, [r3, r2]
    99ce:	22c8      	movs	r2, #200	; 0xc8
    99d0:	5c9b      	ldrb	r3, [r3, r2]
    99d2:	2b01      	cmp	r3, #1
    99d4:	d10d      	bne.n	99f2 <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    99d6:	4b39      	ldr	r3, [pc, #228]	; (9abc <SendFrameOnChannel+0x16c>)
    99d8:	4798      	blx	r3
    99da:	1e03      	subs	r3, r0, #0
    99dc:	d001      	beq.n	99e2 <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    99de:	230f      	movs	r3, #15
    99e0:	e061      	b.n	9aa6 <SendFrameOnChannel+0x156>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    99e2:	4b37      	ldr	r3, [pc, #220]	; (9ac0 <SendFrameOnChannel+0x170>)
    99e4:	4798      	blx	r3
    99e6:	1e03      	subs	r3, r0, #0
    99e8:	d001      	beq.n	99ee <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    99ea:	230f      	movs	r3, #15
    99ec:	e05b      	b.n	9aa6 <SendFrameOnChannel+0x156>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
    99ee:	4b35      	ldr	r3, [pc, #212]	; (9ac4 <SendFrameOnChannel+0x174>)
    99f0:	4798      	blx	r3
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
    99f2:	4b2f      	ldr	r3, [pc, #188]	; (9ab0 <SendFrameOnChannel+0x160>)
    99f4:	4a2f      	ldr	r2, [pc, #188]	; (9ab4 <SendFrameOnChannel+0x164>)
    99f6:	589b      	ldr	r3, [r3, r2]
    99f8:	7818      	ldrb	r0, [r3, #0]
    99fa:	4b33      	ldr	r3, [pc, #204]	; (9ac8 <SendFrameOnChannel+0x178>)
    99fc:	220b      	movs	r2, #11
    99fe:	18ba      	adds	r2, r7, r2
    9a00:	210c      	movs	r1, #12
    9a02:	1879      	adds	r1, r7, r1
    9a04:	4c31      	ldr	r4, [pc, #196]	; (9acc <SendFrameOnChannel+0x17c>)
    9a06:	47a0      	blx	r4

    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
    9a08:	2001      	movs	r0, #1
    9a0a:	4b31      	ldr	r3, [pc, #196]	; (9ad0 <SendFrameOnChannel+0x180>)
    9a0c:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    9a0e:	4b28      	ldr	r3, [pc, #160]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a10:	4a30      	ldr	r2, [pc, #192]	; (9ad4 <SendFrameOnChannel+0x184>)
    9a12:	2101      	movs	r1, #1
    9a14:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    9a16:	4b26      	ldr	r3, [pc, #152]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a18:	4a26      	ldr	r2, [pc, #152]	; (9ab4 <SendFrameOnChannel+0x164>)
    9a1a:	589b      	ldr	r3, [r3, r2]
    9a1c:	22d5      	movs	r2, #213	; 0xd5
    9a1e:	569b      	ldrsb	r3, [r3, r2]
    9a20:	b2d9      	uxtb	r1, r3
    9a22:	4b23      	ldr	r3, [pc, #140]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a24:	4a2c      	ldr	r2, [pc, #176]	; (9ad8 <SendFrameOnChannel+0x188>)
    9a26:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
    9a28:	230b      	movs	r3, #11
    9a2a:	18fb      	adds	r3, r7, r3
    9a2c:	2100      	movs	r1, #0
    9a2e:	5659      	ldrsb	r1, [r3, r1]
    9a30:	4b1f      	ldr	r3, [pc, #124]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a32:	4a2a      	ldr	r2, [pc, #168]	; (9adc <SendFrameOnChannel+0x18c>)
    9a34:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
    9a36:	1dfb      	adds	r3, r7, #7
    9a38:	781a      	ldrb	r2, [r3, #0]
    9a3a:	4b1d      	ldr	r3, [pc, #116]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a3c:	4928      	ldr	r1, [pc, #160]	; (9ae0 <SendFrameOnChannel+0x190>)
    9a3e:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    9a40:	4b1b      	ldr	r3, [pc, #108]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a42:	4a28      	ldr	r2, [pc, #160]	; (9ae4 <SendFrameOnChannel+0x194>)
    9a44:	589a      	ldr	r2, [r3, r2]
    9a46:	4b1a      	ldr	r3, [pc, #104]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a48:	4927      	ldr	r1, [pc, #156]	; (9ae8 <SendFrameOnChannel+0x198>)
    9a4a:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    9a4c:	4b18      	ldr	r3, [pc, #96]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a4e:	4a25      	ldr	r2, [pc, #148]	; (9ae4 <SendFrameOnChannel+0x194>)
    9a50:	589a      	ldr	r2, [r3, r2]
    9a52:	4b17      	ldr	r3, [pc, #92]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a54:	4925      	ldr	r1, [pc, #148]	; (9aec <SendFrameOnChannel+0x19c>)
    9a56:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
    9a58:	4b25      	ldr	r3, [pc, #148]	; (9af0 <SendFrameOnChannel+0x1a0>)
    9a5a:	4798      	blx	r3
    9a5c:	1e03      	subs	r3, r0, #0
    9a5e:	d00c      	beq.n	9a7a <SendFrameOnChannel+0x12a>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
    9a60:	4b13      	ldr	r3, [pc, #76]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a62:	4a20      	ldr	r2, [pc, #128]	; (9ae4 <SendFrameOnChannel+0x194>)
    9a64:	589b      	ldr	r3, [r3, r2]
    9a66:	0018      	movs	r0, r3
    9a68:	4b22      	ldr	r3, [pc, #136]	; (9af4 <SendFrameOnChannel+0x1a4>)
    9a6a:	4798      	blx	r3
    9a6c:	0003      	movs	r3, r0
    9a6e:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
    9a70:	69fb      	ldr	r3, [r7, #28]
    9a72:	2b00      	cmp	r3, #0
    9a74:	d001      	beq.n	9a7a <SendFrameOnChannel+0x12a>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
    9a76:	2310      	movs	r3, #16
    9a78:	e015      	b.n	9aa6 <SendFrameOnChannel+0x156>
        }
    }

    LoRaMacClassBHaltBeaconing( );
    9a7a:	4b1f      	ldr	r3, [pc, #124]	; (9af8 <SendFrameOnChannel+0x1a8>)
    9a7c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    9a7e:	4a0c      	ldr	r2, [pc, #48]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a80:	23d7      	movs	r3, #215	; 0xd7
    9a82:	009b      	lsls	r3, r3, #2
    9a84:	58d3      	ldr	r3, [r2, r3]
    9a86:	2202      	movs	r2, #2
    9a88:	431a      	orrs	r2, r3
    9a8a:	0011      	movs	r1, r2
    9a8c:	4a08      	ldr	r2, [pc, #32]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a8e:	23d7      	movs	r3, #215	; 0xd7
    9a90:	009b      	lsls	r3, r3, #2
    9a92:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
    9a94:	4b19      	ldr	r3, [pc, #100]	; (9afc <SendFrameOnChannel+0x1ac>)
    9a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a98:	4a05      	ldr	r2, [pc, #20]	; (9ab0 <SendFrameOnChannel+0x160>)
    9a9a:	8912      	ldrh	r2, [r2, #8]
    9a9c:	b2d1      	uxtb	r1, r2
    9a9e:	4a18      	ldr	r2, [pc, #96]	; (9b00 <SendFrameOnChannel+0x1b0>)
    9aa0:	0010      	movs	r0, r2
    9aa2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
    9aa4:	2300      	movs	r3, #0
}
    9aa6:	0018      	movs	r0, r3
    9aa8:	46bd      	mov	sp, r7
    9aaa:	b009      	add	sp, #36	; 0x24
    9aac:	bd90      	pop	{r4, r7, pc}
    9aae:	46c0      	nop			; (mov r8, r8)
    9ab0:	20000c8c 	.word	0x20000c8c
    9ab4:	000004c4 	.word	0x000004c4
    9ab8:	0000c715 	.word	0x0000c715
    9abc:	0000c721 	.word	0x0000c721
    9ac0:	0000c72d 	.word	0x0000c72d
    9ac4:	0000c813 	.word	0x0000c813
    9ac8:	20001090 	.word	0x20001090
    9acc:	000100c9 	.word	0x000100c9
    9ad0:	0000d18d 	.word	0x0000d18d
    9ad4:	00000425 	.word	0x00000425
    9ad8:	00000426 	.word	0x00000426
    9adc:	00000427 	.word	0x00000427
    9ae0:	00000434 	.word	0x00000434
    9ae4:	00000404 	.word	0x00000404
    9ae8:	0000042c 	.word	0x0000042c
    9aec:	0000043c 	.word	0x0000043c
    9af0:	0000c739 	.word	0x0000c739
    9af4:	0000c801 	.word	0x0000c801
    9af8:	0000c759 	.word	0x0000c759
    9afc:	0001f2a4 	.word	0x0001f2a4
    9b00:	20000c96 	.word	0x20000c96

00009b04 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b086      	sub	sp, #24
    9b08:	af00      	add	r7, sp, #0
    9b0a:	0002      	movs	r2, r0
    9b0c:	1dbb      	adds	r3, r7, #6
    9b0e:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
    9b10:	4b24      	ldr	r3, [pc, #144]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b12:	4a25      	ldr	r2, [pc, #148]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b14:	589a      	ldr	r2, [r3, r2]
    9b16:	2314      	movs	r3, #20
    9b18:	33ff      	adds	r3, #255	; 0xff
    9b1a:	5cd2      	ldrb	r2, [r2, r3]
    9b1c:	2308      	movs	r3, #8
    9b1e:	18fb      	adds	r3, r7, r3
    9b20:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    9b22:	4b20      	ldr	r3, [pc, #128]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b24:	4a20      	ldr	r2, [pc, #128]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b26:	589b      	ldr	r3, [r3, r2]
    9b28:	22d5      	movs	r2, #213	; 0xd5
    9b2a:	569a      	ldrsb	r2, [r3, r2]
    9b2c:	2308      	movs	r3, #8
    9b2e:	18fb      	adds	r3, r7, r3
    9b30:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    9b32:	4b1c      	ldr	r3, [pc, #112]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b34:	4a1c      	ldr	r2, [pc, #112]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b36:	589b      	ldr	r3, [r3, r2]
    9b38:	22d4      	movs	r2, #212	; 0xd4
    9b3a:	569a      	ldrsb	r2, [r3, r2]
    9b3c:	2308      	movs	r3, #8
    9b3e:	18fb      	adds	r3, r7, r3
    9b40:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    9b42:	4b18      	ldr	r3, [pc, #96]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b44:	4a18      	ldr	r2, [pc, #96]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b46:	589a      	ldr	r2, [r3, r2]
    9b48:	2382      	movs	r3, #130	; 0x82
    9b4a:	005b      	lsls	r3, r3, #1
    9b4c:	58d2      	ldr	r2, [r2, r3]
    9b4e:	2308      	movs	r3, #8
    9b50:	18fb      	adds	r3, r7, r3
    9b52:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    9b54:	4b13      	ldr	r3, [pc, #76]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b56:	4a14      	ldr	r2, [pc, #80]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b58:	589a      	ldr	r2, [r3, r2]
    9b5a:	2384      	movs	r3, #132	; 0x84
    9b5c:	005b      	lsls	r3, r3, #1
    9b5e:	58d2      	ldr	r2, [r2, r3]
    9b60:	2308      	movs	r3, #8
    9b62:	18fb      	adds	r3, r7, r3
    9b64:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
    9b66:	2308      	movs	r3, #8
    9b68:	18fb      	adds	r3, r7, r3
    9b6a:	1dba      	adds	r2, r7, #6
    9b6c:	8812      	ldrh	r2, [r2, #0]
    9b6e:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
    9b70:	4b0c      	ldr	r3, [pc, #48]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b72:	4a0d      	ldr	r2, [pc, #52]	; (9ba8 <SetTxContinuousWave+0xa4>)
    9b74:	589b      	ldr	r3, [r3, r2]
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	2208      	movs	r2, #8
    9b7a:	18ba      	adds	r2, r7, r2
    9b7c:	0011      	movs	r1, r2
    9b7e:	0018      	movs	r0, r3
    9b80:	4b0a      	ldr	r3, [pc, #40]	; (9bac <SetTxContinuousWave+0xa8>)
    9b82:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    9b84:	4a07      	ldr	r2, [pc, #28]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b86:	23d7      	movs	r3, #215	; 0xd7
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	58d3      	ldr	r3, [r2, r3]
    9b8c:	2202      	movs	r2, #2
    9b8e:	431a      	orrs	r2, r3
    9b90:	0011      	movs	r1, r2
    9b92:	4a04      	ldr	r2, [pc, #16]	; (9ba4 <SetTxContinuousWave+0xa0>)
    9b94:	23d7      	movs	r3, #215	; 0xd7
    9b96:	009b      	lsls	r3, r3, #2
    9b98:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
    9b9a:	2300      	movs	r3, #0
}
    9b9c:	0018      	movs	r0, r3
    9b9e:	46bd      	mov	sp, r7
    9ba0:	b006      	add	sp, #24
    9ba2:	bd80      	pop	{r7, pc}
    9ba4:	20000c8c 	.word	0x20000c8c
    9ba8:	000004c4 	.word	0x000004c4
    9bac:	000102ad 	.word	0x000102ad

00009bb0 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
    9bb0:	b580      	push	{r7, lr}
    9bb2:	b082      	sub	sp, #8
    9bb4:	af00      	add	r7, sp, #0
    9bb6:	6039      	str	r1, [r7, #0]
    9bb8:	0011      	movs	r1, r2
    9bba:	1dbb      	adds	r3, r7, #6
    9bbc:	1c02      	adds	r2, r0, #0
    9bbe:	801a      	strh	r2, [r3, #0]
    9bc0:	1d7b      	adds	r3, r7, #5
    9bc2:	1c0a      	adds	r2, r1, #0
    9bc4:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
    9bc6:	4b0c      	ldr	r3, [pc, #48]	; (9bf8 <SetTxContinuousWave1+0x48>)
    9bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9bca:	1d7a      	adds	r2, r7, #5
    9bcc:	2100      	movs	r1, #0
    9bce:	5651      	ldrsb	r1, [r2, r1]
    9bd0:	1dba      	adds	r2, r7, #6
    9bd2:	8812      	ldrh	r2, [r2, #0]
    9bd4:	6838      	ldr	r0, [r7, #0]
    9bd6:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    9bd8:	4a08      	ldr	r2, [pc, #32]	; (9bfc <SetTxContinuousWave1+0x4c>)
    9bda:	23d7      	movs	r3, #215	; 0xd7
    9bdc:	009b      	lsls	r3, r3, #2
    9bde:	58d3      	ldr	r3, [r2, r3]
    9be0:	2202      	movs	r2, #2
    9be2:	431a      	orrs	r2, r3
    9be4:	0011      	movs	r1, r2
    9be6:	4a05      	ldr	r2, [pc, #20]	; (9bfc <SetTxContinuousWave1+0x4c>)
    9be8:	23d7      	movs	r3, #215	; 0xd7
    9bea:	009b      	lsls	r3, r3, #2
    9bec:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
    9bee:	2300      	movs	r3, #0
}
    9bf0:	0018      	movs	r0, r3
    9bf2:	46bd      	mov	sp, r7
    9bf4:	b002      	add	sp, #8
    9bf6:	bd80      	pop	{r7, pc}
    9bf8:	0001f2a4 	.word	0x0001f2a4
    9bfc:	20000c8c 	.word	0x20000c8c

00009c00 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
    9c00:	b580      	push	{r7, lr}
    9c02:	b082      	sub	sp, #8
    9c04:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
    9c06:	4b23      	ldr	r3, [pc, #140]	; (9c94 <GetCtxs+0x94>)
    9c08:	4a23      	ldr	r2, [pc, #140]	; (9c98 <GetCtxs+0x98>)
    9c0a:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
    9c0c:	4b21      	ldr	r3, [pc, #132]	; (9c94 <GetCtxs+0x94>)
    9c0e:	2290      	movs	r2, #144	; 0x90
    9c10:	0092      	lsls	r2, r2, #2
    9c12:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
    9c14:	4b21      	ldr	r3, [pc, #132]	; (9c9c <GetCtxs+0x9c>)
    9c16:	0018      	movs	r0, r3
    9c18:	4b21      	ldr	r3, [pc, #132]	; (9ca0 <GetCtxs+0xa0>)
    9c1a:	4798      	blx	r3
    9c1c:	0002      	movs	r2, r0
    9c1e:	4b1d      	ldr	r3, [pc, #116]	; (9c94 <GetCtxs+0x94>)
    9c20:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
    9c22:	2300      	movs	r3, #0
    9c24:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
    9c26:	4b1f      	ldr	r3, [pc, #124]	; (9ca4 <GetCtxs+0xa4>)
    9c28:	4a1f      	ldr	r2, [pc, #124]	; (9ca8 <GetCtxs+0xa8>)
    9c2a:	589b      	ldr	r3, [r3, r2]
    9c2c:	781b      	ldrb	r3, [r3, #0]
    9c2e:	1d3a      	adds	r2, r7, #4
    9c30:	0011      	movs	r1, r2
    9c32:	0018      	movs	r0, r3
    9c34:	4b1d      	ldr	r3, [pc, #116]	; (9cac <GetCtxs+0xac>)
    9c36:	4798      	blx	r3
    9c38:	0002      	movs	r2, r0
    9c3a:	4b16      	ldr	r3, [pc, #88]	; (9c94 <GetCtxs+0x94>)
    9c3c:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
    9c3e:	687a      	ldr	r2, [r7, #4]
    9c40:	4b14      	ldr	r3, [pc, #80]	; (9c94 <GetCtxs+0x94>)
    9c42:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
    9c44:	4b1a      	ldr	r3, [pc, #104]	; (9cb0 <GetCtxs+0xb0>)
    9c46:	0018      	movs	r0, r3
    9c48:	4b1a      	ldr	r3, [pc, #104]	; (9cb4 <GetCtxs+0xb4>)
    9c4a:	4798      	blx	r3
    9c4c:	0002      	movs	r2, r0
    9c4e:	4b11      	ldr	r3, [pc, #68]	; (9c94 <GetCtxs+0x94>)
    9c50:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
    9c52:	4b19      	ldr	r3, [pc, #100]	; (9cb8 <GetCtxs+0xb8>)
    9c54:	0018      	movs	r0, r3
    9c56:	4b19      	ldr	r3, [pc, #100]	; (9cbc <GetCtxs+0xbc>)
    9c58:	4798      	blx	r3
    9c5a:	0002      	movs	r2, r0
    9c5c:	4b0d      	ldr	r3, [pc, #52]	; (9c94 <GetCtxs+0x94>)
    9c5e:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
    9c60:	4b17      	ldr	r3, [pc, #92]	; (9cc0 <GetCtxs+0xc0>)
    9c62:	0018      	movs	r0, r3
    9c64:	4b17      	ldr	r3, [pc, #92]	; (9cc4 <GetCtxs+0xc4>)
    9c66:	4798      	blx	r3
    9c68:	0002      	movs	r2, r0
    9c6a:	4b0a      	ldr	r3, [pc, #40]	; (9c94 <GetCtxs+0x94>)
    9c6c:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
    9c6e:	4b16      	ldr	r3, [pc, #88]	; (9cc8 <GetCtxs+0xc8>)
    9c70:	0018      	movs	r0, r3
    9c72:	4b16      	ldr	r3, [pc, #88]	; (9ccc <GetCtxs+0xcc>)
    9c74:	4798      	blx	r3
    9c76:	0002      	movs	r2, r0
    9c78:	4b06      	ldr	r3, [pc, #24]	; (9c94 <GetCtxs+0x94>)
    9c7a:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
    9c7c:	4b14      	ldr	r3, [pc, #80]	; (9cd0 <GetCtxs+0xd0>)
    9c7e:	0018      	movs	r0, r3
    9c80:	4b14      	ldr	r3, [pc, #80]	; (9cd4 <GetCtxs+0xd4>)
    9c82:	4798      	blx	r3
    9c84:	0002      	movs	r2, r0
    9c86:	4b03      	ldr	r3, [pc, #12]	; (9c94 <GetCtxs+0x94>)
    9c88:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
    9c8a:	4b02      	ldr	r3, [pc, #8]	; (9c94 <GetCtxs+0x94>)
}
    9c8c:	0018      	movs	r0, r3
    9c8e:	46bd      	mov	sp, r7
    9c90:	b002      	add	sp, #8
    9c92:	bd80      	pop	{r7, pc}
    9c94:	20001b90 	.word	0x20001b90
    9c98:	20001154 	.word	0x20001154
    9c9c:	20001ba4 	.word	0x20001ba4
    9ca0:	0000e341 	.word	0x0000e341
    9ca4:	20000c8c 	.word	0x20000c8c
    9ca8:	000004c4 	.word	0x000004c4
    9cac:	0000ff71 	.word	0x0000ff71
    9cb0:	20001bac 	.word	0x20001bac
    9cb4:	00016615 	.word	0x00016615
    9cb8:	20001bb4 	.word	0x20001bb4
    9cbc:	0000caf5 	.word	0x0000caf5
    9cc0:	20001bbc 	.word	0x20001bbc
    9cc4:	0000c67f 	.word	0x0000c67f
    9cc8:	20001bc4 	.word	0x20001bc4
    9ccc:	0000cfd9 	.word	0x0000cfd9
    9cd0:	20001bcc 	.word	0x20001bcc
    9cd4:	0000eff5 	.word	0x0000eff5

00009cd8 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
    9cd8:	b580      	push	{r7, lr}
    9cda:	b088      	sub	sp, #32
    9cdc:	af00      	add	r7, sp, #0
    9cde:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    9ce0:	231f      	movs	r3, #31
    9ce2:	18fb      	adds	r3, r7, r3
    9ce4:	2200      	movs	r2, #0
    9ce6:	701a      	strb	r2, [r3, #0]
    MacCommand_t* macCmd = NULL;
    9ce8:	2300      	movs	r3, #0
    9cea:	61bb      	str	r3, [r7, #24]
    uint8_t cmdPayload = 0;
    9cec:	2317      	movs	r3, #23
    9cee:	18fb      	adds	r3, r7, r3
    9cf0:	2200      	movs	r2, #0
    9cf2:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState != LORAMAC_STOPPED )
    9cf4:	4a52      	ldr	r2, [pc, #328]	; (9e40 <RestoreCtxs+0x168>)
    9cf6:	23d7      	movs	r3, #215	; 0xd7
    9cf8:	009b      	lsls	r3, r3, #2
    9cfa:	58d3      	ldr	r3, [r2, r3]
    9cfc:	2b01      	cmp	r3, #1
    9cfe:	d001      	beq.n	9d04 <RestoreCtxs+0x2c>
    {
        return LORAMAC_STATUS_BUSY;
    9d00:	2301      	movs	r3, #1
    9d02:	e099      	b.n	9e38 <RestoreCtxs+0x160>
    }
    if( contexts == NULL )
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	2b00      	cmp	r3, #0
    9d08:	d103      	bne.n	9d12 <RestoreCtxs+0x3a>
    {
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    9d0a:	231f      	movs	r3, #31
    9d0c:	18fb      	adds	r3, r7, r3
    9d0e:	2203      	movs	r2, #3
    9d10:	701a      	strb	r2, [r3, #0]
    }

    if( contexts->MacNvmCtx != NULL )
    9d12:	687b      	ldr	r3, [r7, #4]
    9d14:	681b      	ldr	r3, [r3, #0]
    9d16:	2b00      	cmp	r3, #0
    9d18:	d009      	beq.n	9d2e <RestoreCtxs+0x56>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	6819      	ldr	r1, [r3, #0]
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	685b      	ldr	r3, [r3, #4]
    9d22:	b29a      	uxth	r2, r3
    9d24:	4b47      	ldr	r3, [pc, #284]	; (9e44 <RestoreCtxs+0x16c>)
    9d26:	0018      	movs	r0, r3
    9d28:	4b47      	ldr	r3, [pc, #284]	; (9e48 <RestoreCtxs+0x170>)
    9d2a:	4798      	blx	r3
    9d2c:	e003      	b.n	9d36 <RestoreCtxs+0x5e>
    }
    else
    {
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    9d2e:	231f      	movs	r3, #31
    9d30:	18fb      	adds	r3, r7, r3
    9d32:	2203      	movs	r2, #3
    9d34:	701a      	strb	r2, [r3, #0]
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
    9d36:	230c      	movs	r3, #12
    9d38:	18fb      	adds	r3, r7, r3
    9d3a:	2203      	movs	r2, #3
    9d3c:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	689a      	ldr	r2, [r3, #8]
    9d42:	230c      	movs	r3, #12
    9d44:	18fb      	adds	r3, r7, r3
    9d46:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    9d48:	4b3d      	ldr	r3, [pc, #244]	; (9e40 <RestoreCtxs+0x168>)
    9d4a:	4a40      	ldr	r2, [pc, #256]	; (9e4c <RestoreCtxs+0x174>)
    9d4c:	589b      	ldr	r3, [r3, r2]
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	220c      	movs	r2, #12
    9d52:	18ba      	adds	r2, r7, r2
    9d54:	0011      	movs	r1, r2
    9d56:	0018      	movs	r0, r3
    9d58:	4b3d      	ldr	r3, [pc, #244]	; (9e50 <RestoreCtxs+0x178>)
    9d5a:	4798      	blx	r3

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
    9d5c:	687b      	ldr	r3, [r7, #4]
    9d5e:	699b      	ldr	r3, [r3, #24]
    9d60:	0018      	movs	r0, r3
    9d62:	4b3c      	ldr	r3, [pc, #240]	; (9e54 <RestoreCtxs+0x17c>)
    9d64:	4798      	blx	r3
    9d66:	1e03      	subs	r3, r0, #0
    9d68:	d003      	beq.n	9d72 <RestoreCtxs+0x9a>
    {
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    9d6a:	231f      	movs	r3, #31
    9d6c:	18fb      	adds	r3, r7, r3
    9d6e:	2211      	movs	r2, #17
    9d70:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	691b      	ldr	r3, [r3, #16]
    9d76:	0018      	movs	r0, r3
    9d78:	4b37      	ldr	r3, [pc, #220]	; (9e58 <RestoreCtxs+0x180>)
    9d7a:	4798      	blx	r3
    9d7c:	1e03      	subs	r3, r0, #0
    9d7e:	d003      	beq.n	9d88 <RestoreCtxs+0xb0>
    {
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    9d80:	231f      	movs	r3, #31
    9d82:	18fb      	adds	r3, r7, r3
    9d84:	2211      	movs	r2, #17
    9d86:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9d8c:	0018      	movs	r0, r3
    9d8e:	4b33      	ldr	r3, [pc, #204]	; (9e5c <RestoreCtxs+0x184>)
    9d90:	4798      	blx	r3
    9d92:	1e03      	subs	r3, r0, #0
    9d94:	d003      	beq.n	9d9e <RestoreCtxs+0xc6>
    {
        status = LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    9d96:	231f      	movs	r3, #31
    9d98:	18fb      	adds	r3, r7, r3
    9d9a:	2212      	movs	r2, #18
    9d9c:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	6a1b      	ldr	r3, [r3, #32]
    9da2:	0018      	movs	r0, r3
    9da4:	4b2e      	ldr	r3, [pc, #184]	; (9e60 <RestoreCtxs+0x188>)
    9da6:	4798      	blx	r3
    9da8:	1e03      	subs	r3, r0, #0
    9daa:	d003      	beq.n	9db4 <RestoreCtxs+0xdc>
    {
        status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    9dac:	231f      	movs	r3, #31
    9dae:	18fb      	adds	r3, r7, r3
    9db0:	2213      	movs	r2, #19
    9db2:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
    9db4:	687b      	ldr	r3, [r7, #4]
    9db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9db8:	0018      	movs	r0, r3
    9dba:	4b2a      	ldr	r3, [pc, #168]	; (9e64 <RestoreCtxs+0x18c>)
    9dbc:	4798      	blx	r3
    9dbe:	0003      	movs	r3, r0
    9dc0:	001a      	movs	r2, r3
    9dc2:	2301      	movs	r3, #1
    9dc4:	4053      	eors	r3, r2
    9dc6:	b2db      	uxtb	r3, r3
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d003      	beq.n	9dd4 <RestoreCtxs+0xfc>
    {
        status = LORAMAC_STATUS_CLASS_B_ERROR;
    9dcc:	231f      	movs	r3, #31
    9dce:	18fb      	adds	r3, r7, r3
    9dd0:	2214      	movs	r2, #20
    9dd2:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9dd8:	0018      	movs	r0, r3
    9dda:	4b23      	ldr	r3, [pc, #140]	; (9e68 <RestoreCtxs+0x190>)
    9ddc:	4798      	blx	r3
    9dde:	0003      	movs	r3, r0
    9de0:	001a      	movs	r2, r3
    9de2:	2301      	movs	r3, #1
    9de4:	4053      	eors	r3, r2
    9de6:	b2db      	uxtb	r3, r3
    9de8:	2b00      	cmp	r3, #0
    9dea:	d003      	beq.n	9df4 <RestoreCtxs+0x11c>
    {
        status = LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
    9dec:	231f      	movs	r3, #31
    9dee:	18fb      	adds	r3, r7, r3
    9df0:	2215      	movs	r2, #21
    9df2:	701a      	strb	r2, [r3, #0]
    }

    if( status != LORAMAC_STATUS_OK)
    9df4:	231f      	movs	r3, #31
    9df6:	18fb      	adds	r3, r7, r3
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d019      	beq.n	9e32 <RestoreCtxs+0x15a>
    {
        if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd ) != LORAMAC_COMMANDS_SUCCESS )
    9dfe:	2318      	movs	r3, #24
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	0019      	movs	r1, r3
    9e04:	2001      	movs	r0, #1
    9e06:	4b19      	ldr	r3, [pc, #100]	; (9e6c <RestoreCtxs+0x194>)
    9e08:	4798      	blx	r3
    9e0a:	1e03      	subs	r3, r0, #0
    9e0c:	d011      	beq.n	9e32 <RestoreCtxs+0x15a>
        {
            cmdPayload = 0x0F & MacCtx.NvmCtx->Version.Fields.Minor;
    9e0e:	4b0c      	ldr	r3, [pc, #48]	; (9e40 <RestoreCtxs+0x168>)
    9e10:	4a0e      	ldr	r2, [pc, #56]	; (9e4c <RestoreCtxs+0x174>)
    9e12:	589b      	ldr	r3, [r3, r2]
    9e14:	4a16      	ldr	r2, [pc, #88]	; (9e70 <RestoreCtxs+0x198>)
    9e16:	5c9b      	ldrb	r3, [r3, r2]
    9e18:	220f      	movs	r2, #15
    9e1a:	4013      	ands	r3, r2
    9e1c:	b2da      	uxtb	r2, r3
    9e1e:	2317      	movs	r3, #23
    9e20:	18fb      	adds	r3, r7, r3
    9e22:	701a      	strb	r2, [r3, #0]
            LoRaMacCommandsAddCmd( MOTE_MAC_RESET_IND, &cmdPayload, 1 );
    9e24:	2317      	movs	r3, #23
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	2201      	movs	r2, #1
    9e2a:	0019      	movs	r1, r3
    9e2c:	2001      	movs	r0, #1
    9e2e:	4b11      	ldr	r3, [pc, #68]	; (9e74 <RestoreCtxs+0x19c>)
    9e30:	4798      	blx	r3
        }
    }
    return status;
    9e32:	231f      	movs	r3, #31
    9e34:	18fb      	adds	r3, r7, r3
    9e36:	781b      	ldrb	r3, [r3, #0]
}
    9e38:	0018      	movs	r0, r3
    9e3a:	46bd      	mov	sp, r7
    9e3c:	b008      	add	sp, #32
    9e3e:	bd80      	pop	{r7, pc}
    9e40:	20000c8c 	.word	0x20000c8c
    9e44:	20001154 	.word	0x20001154
    9e48:	00004339 	.word	0x00004339
    9e4c:	000004c4 	.word	0x000004c4
    9e50:	0000ff41 	.word	0x0000ff41
    9e54:	000165e1 	.word	0x000165e1
    9e58:	0000e311 	.word	0x0000e311
    9e5c:	0000efc5 	.word	0x0000efc5
    9e60:	0000cac5 	.word	0x0000cac5
    9e64:	0000c66d 	.word	0x0000c66d
    9e68:	0000cfa9 	.word	0x0000cfa9
    9e6c:	0000cc45 	.word	0x0000cc45
    9e70:	0000021e 	.word	0x0000021e
    9e74:	0000cb11 	.word	0x0000cb11

00009e78 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    9e78:	b580      	push	{r7, lr}
    9e7a:	b082      	sub	sp, #8
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	6078      	str	r0, [r7, #4]
    9e80:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	2b00      	cmp	r3, #0
    9e86:	d002      	beq.n	9e8e <DetermineFrameType+0x16>
    9e88:	683b      	ldr	r3, [r7, #0]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d101      	bne.n	9e92 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    9e8e:	2303      	movs	r3, #3
    9e90:	e03b      	b.n	9f0a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	7b1b      	ldrb	r3, [r3, #12]
    9e96:	071b      	lsls	r3, r3, #28
    9e98:	0f1b      	lsrs	r3, r3, #28
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	dd08      	ble.n	9eb2 <DetermineFrameType+0x3a>
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	2220      	movs	r2, #32
    9ea4:	5c9b      	ldrb	r3, [r3, r2]
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d003      	beq.n	9eb2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
    9eaa:	683b      	ldr	r3, [r7, #0]
    9eac:	2200      	movs	r2, #0
    9eae:	701a      	strb	r2, [r3, #0]
    9eb0:	e02a      	b.n	9f08 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	2228      	movs	r2, #40	; 0x28
    9eb6:	5c9b      	ldrb	r3, [r3, r2]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d103      	bne.n	9ec4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
    9ebc:	683b      	ldr	r3, [r7, #0]
    9ebe:	2201      	movs	r2, #1
    9ec0:	701a      	strb	r2, [r3, #0]
    9ec2:	e021      	b.n	9f08 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	7b1b      	ldrb	r3, [r3, #12]
    9ec8:	220f      	movs	r2, #15
    9eca:	4013      	ands	r3, r2
    9ecc:	b2db      	uxtb	r3, r3
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d108      	bne.n	9ee4 <DetermineFrameType+0x6c>
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	2220      	movs	r2, #32
    9ed6:	5c9b      	ldrb	r3, [r3, r2]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d103      	bne.n	9ee4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
    9edc:	683b      	ldr	r3, [r7, #0]
    9ede:	2202      	movs	r2, #2
    9ee0:	701a      	strb	r2, [r3, #0]
    9ee2:	e011      	b.n	9f08 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	7b1b      	ldrb	r3, [r3, #12]
    9ee8:	220f      	movs	r2, #15
    9eea:	4013      	ands	r3, r2
    9eec:	b2db      	uxtb	r3, r3
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d108      	bne.n	9f04 <DetermineFrameType+0x8c>
    9ef2:	687b      	ldr	r3, [r7, #4]
    9ef4:	2220      	movs	r2, #32
    9ef6:	5c9b      	ldrb	r3, [r3, r2]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d003      	beq.n	9f04 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
    9efc:	683b      	ldr	r3, [r7, #0]
    9efe:	2203      	movs	r2, #3
    9f00:	701a      	strb	r2, [r3, #0]
    9f02:	e001      	b.n	9f08 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    9f04:	2316      	movs	r3, #22
    9f06:	e000      	b.n	9f0a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
    9f08:	2300      	movs	r3, #0
}
    9f0a:	0018      	movs	r0, r3
    9f0c:	46bd      	mov	sp, r7
    9f0e:	b002      	add	sp, #8
    9f10:	bd80      	pop	{r7, pc}
	...

00009f14 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    9f14:	b580      	push	{r7, lr}
    9f16:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9f18:	4b15      	ldr	r3, [pc, #84]	; (9f70 <CheckRetransUnconfirmedUplink+0x5c>)
    9f1a:	4a16      	ldr	r2, [pc, #88]	; (9f74 <CheckRetransUnconfirmedUplink+0x60>)
    9f1c:	589a      	ldr	r2, [r3, r2]
    9f1e:	2388      	movs	r3, #136	; 0x88
    9f20:	005b      	lsls	r3, r3, #1
    9f22:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
    9f24:	4b12      	ldr	r3, [pc, #72]	; (9f70 <CheckRetransUnconfirmedUplink+0x5c>)
    9f26:	4913      	ldr	r1, [pc, #76]	; (9f74 <CheckRetransUnconfirmedUplink+0x60>)
    9f28:	585b      	ldr	r3, [r3, r1]
    9f2a:	21f4      	movs	r1, #244	; 0xf4
    9f2c:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9f2e:	429a      	cmp	r2, r3
    9f30:	d301      	bcc.n	9f36 <CheckRetransUnconfirmedUplink+0x22>
    {
        return true;
    9f32:	2301      	movs	r3, #1
    9f34:	e018      	b.n	9f68 <CheckRetransUnconfirmedUplink+0x54>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    9f36:	4b0e      	ldr	r3, [pc, #56]	; (9f70 <CheckRetransUnconfirmedUplink+0x5c>)
    9f38:	4a0f      	ldr	r2, [pc, #60]	; (9f78 <CheckRetransUnconfirmedUplink+0x64>)
    9f3a:	5c9b      	ldrb	r3, [r3, r2]
    9f3c:	2202      	movs	r2, #2
    9f3e:	4013      	ands	r3, r2
    9f40:	b2db      	uxtb	r3, r3
    9f42:	2b00      	cmp	r3, #0
    9f44:	d00f      	beq.n	9f66 <CheckRetransUnconfirmedUplink+0x52>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
    9f46:	4b0a      	ldr	r3, [pc, #40]	; (9f70 <CheckRetransUnconfirmedUplink+0x5c>)
    9f48:	4a0a      	ldr	r2, [pc, #40]	; (9f74 <CheckRetransUnconfirmedUplink+0x60>)
    9f4a:	589b      	ldr	r3, [r3, r2]
    9f4c:	22c8      	movs	r2, #200	; 0xc8
    9f4e:	5c9b      	ldrb	r3, [r3, r2]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d101      	bne.n	9f58 <CheckRetransUnconfirmedUplink+0x44>
        {
            return true;
    9f54:	2301      	movs	r3, #1
    9f56:	e007      	b.n	9f68 <CheckRetransUnconfirmedUplink+0x54>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    9f58:	4b05      	ldr	r3, [pc, #20]	; (9f70 <CheckRetransUnconfirmedUplink+0x5c>)
    9f5a:	4a08      	ldr	r2, [pc, #32]	; (9f7c <CheckRetransUnconfirmedUplink+0x68>)
    9f5c:	5c9b      	ldrb	r3, [r3, r2]
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d101      	bne.n	9f66 <CheckRetransUnconfirmedUplink+0x52>
            {
                return true;
    9f62:	2301      	movs	r3, #1
    9f64:	e000      	b.n	9f68 <CheckRetransUnconfirmedUplink+0x54>
            }
        }
    }
    return false;
    9f66:	2300      	movs	r3, #0
}
    9f68:	0018      	movs	r0, r3
    9f6a:	46bd      	mov	sp, r7
    9f6c:	bd80      	pop	{r7, pc}
    9f6e:	46c0      	nop			; (mov r8, r8)
    9f70:	20000c8c 	.word	0x20000c8c
    9f74:	000004c4 	.word	0x000004c4
    9f78:	00000465 	.word	0x00000465
    9f7c:	00000464 	.word	0x00000464

00009f80 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    9f80:	b580      	push	{r7, lr}
    9f82:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9f84:	4b11      	ldr	r3, [pc, #68]	; (9fcc <CheckRetransConfirmedUplink+0x4c>)
    9f86:	4a12      	ldr	r2, [pc, #72]	; (9fd0 <CheckRetransConfirmedUplink+0x50>)
    9f88:	589a      	ldr	r2, [r3, r2]
    9f8a:	2388      	movs	r3, #136	; 0x88
    9f8c:	005b      	lsls	r3, r3, #1
    9f8e:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
    9f90:	4b0e      	ldr	r3, [pc, #56]	; (9fcc <CheckRetransConfirmedUplink+0x4c>)
    9f92:	490f      	ldr	r1, [pc, #60]	; (9fd0 <CheckRetransConfirmedUplink+0x50>)
    9f94:	585b      	ldr	r3, [r3, r1]
    9f96:	21f4      	movs	r1, #244	; 0xf4
    9f98:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9f9a:	429a      	cmp	r2, r3
    9f9c:	d301      	bcc.n	9fa2 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    9f9e:	2301      	movs	r3, #1
    9fa0:	e010      	b.n	9fc4 <CheckRetransConfirmedUplink+0x44>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    9fa2:	4b0a      	ldr	r3, [pc, #40]	; (9fcc <CheckRetransConfirmedUplink+0x4c>)
    9fa4:	4a0b      	ldr	r2, [pc, #44]	; (9fd4 <CheckRetransConfirmedUplink+0x54>)
    9fa6:	5c9b      	ldrb	r3, [r3, r2]
    9fa8:	2202      	movs	r2, #2
    9faa:	4013      	ands	r3, r2
    9fac:	b2db      	uxtb	r3, r3
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d007      	beq.n	9fc2 <CheckRetransConfirmedUplink+0x42>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
    9fb2:	4a06      	ldr	r2, [pc, #24]	; (9fcc <CheckRetransConfirmedUplink+0x4c>)
    9fb4:	2385      	movs	r3, #133	; 0x85
    9fb6:	00db      	lsls	r3, r3, #3
    9fb8:	5cd3      	ldrb	r3, [r2, r3]
    9fba:	2b00      	cmp	r3, #0
    9fbc:	d001      	beq.n	9fc2 <CheckRetransConfirmedUplink+0x42>
        {
            return true;
    9fbe:	2301      	movs	r3, #1
    9fc0:	e000      	b.n	9fc4 <CheckRetransConfirmedUplink+0x44>
        }
    }
    return false;
    9fc2:	2300      	movs	r3, #0
}
    9fc4:	0018      	movs	r0, r3
    9fc6:	46bd      	mov	sp, r7
    9fc8:	bd80      	pop	{r7, pc}
    9fca:	46c0      	nop			; (mov r8, r8)
    9fcc:	20000c8c 	.word	0x20000c8c
    9fd0:	000004c4 	.word	0x000004c4
    9fd4:	00000465 	.word	0x00000465

00009fd8 <StopRetransmission>:


static bool StopRetransmission( void )
{
    9fd8:	b580      	push	{r7, lr}
    9fda:	b082      	sub	sp, #8
    9fdc:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
    9fde:	2300      	movs	r3, #0
    9fe0:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    9fe2:	1d3b      	adds	r3, r7, #4
    9fe4:	0018      	movs	r0, r3
    9fe6:	4b47      	ldr	r3, [pc, #284]	; (a104 <StopRetransmission+0x12c>)
    9fe8:	4798      	blx	r3
    9fea:	1e03      	subs	r3, r0, #0
    9fec:	d001      	beq.n	9ff2 <StopRetransmission+0x1a>
    {
        return false;
    9fee:	2300      	movs	r3, #0
    9ff0:	e083      	b.n	a0fa <StopRetransmission+0x122>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	0018      	movs	r0, r3
    9ff6:	4b44      	ldr	r3, [pc, #272]	; (a108 <StopRetransmission+0x130>)
    9ff8:	4798      	blx	r3
    9ffa:	1e03      	subs	r3, r0, #0
    9ffc:	d001      	beq.n	a002 <StopRetransmission+0x2a>
    {
        return false;
    9ffe:	2300      	movs	r3, #0
    a000:	e07b      	b.n	a0fa <StopRetransmission+0x122>
    }

    // Increase Rejoin Uplinks counter
    if( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 )
    a002:	4b42      	ldr	r3, [pc, #264]	; (a10c <StopRetransmission+0x134>)
    a004:	4a42      	ldr	r2, [pc, #264]	; (a110 <StopRetransmission+0x138>)
    a006:	589b      	ldr	r3, [r3, r2]
    a008:	4a42      	ldr	r2, [pc, #264]	; (a114 <StopRetransmission+0x13c>)
    a00a:	5a9b      	ldrh	r3, [r3, r2]
    a00c:	2b00      	cmp	r3, #0
    a00e:	d00a      	beq.n	a026 <StopRetransmission+0x4e>
    {
        MacCtx.NvmCtx->Rejoin0UplinksCounter++;
    a010:	4b3e      	ldr	r3, [pc, #248]	; (a10c <StopRetransmission+0x134>)
    a012:	4a3f      	ldr	r2, [pc, #252]	; (a110 <StopRetransmission+0x138>)
    a014:	589b      	ldr	r3, [r3, r2]
    a016:	2289      	movs	r2, #137	; 0x89
    a018:	0092      	lsls	r2, r2, #2
    a01a:	5a9a      	ldrh	r2, [r3, r2]
    a01c:	3201      	adds	r2, #1
    a01e:	b291      	uxth	r1, r2
    a020:	2289      	movs	r2, #137	; 0x89
    a022:	0092      	lsls	r2, r2, #2
    a024:	5299      	strh	r1, [r3, r2]
    }

    if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    a026:	4b39      	ldr	r3, [pc, #228]	; (a10c <StopRetransmission+0x134>)
    a028:	4a39      	ldr	r2, [pc, #228]	; (a110 <StopRetransmission+0x138>)
    a02a:	589b      	ldr	r3, [r3, r2]
    a02c:	4a3a      	ldr	r2, [pc, #232]	; (a118 <StopRetransmission+0x140>)
    a02e:	5c9b      	ldrb	r3, [r3, r2]
    a030:	2b00      	cmp	r3, #0
    a032:	d02c      	beq.n	a08e <StopRetransmission+0xb6>
    {
        MacCommand_t* macCmd;
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
    a034:	003b      	movs	r3, r7
    a036:	0019      	movs	r1, r3
    a038:	200b      	movs	r0, #11
    a03a:	4b38      	ldr	r3, [pc, #224]	; (a11c <StopRetransmission+0x144>)
    a03c:	4798      	blx	r3
    a03e:	1e03      	subs	r3, r0, #0
    a040:	d125      	bne.n	a08e <StopRetransmission+0xb6>
        {
            // Increase the Rekey Uplinks counter
            MacCtx.NvmCtx->RekeyIndUplinksCounter++;
    a042:	4b32      	ldr	r3, [pc, #200]	; (a10c <StopRetransmission+0x134>)
    a044:	4a32      	ldr	r2, [pc, #200]	; (a110 <StopRetransmission+0x138>)
    a046:	589b      	ldr	r3, [r3, r2]
    a048:	4a35      	ldr	r2, [pc, #212]	; (a120 <StopRetransmission+0x148>)
    a04a:	5a9a      	ldrh	r2, [r3, r2]
    a04c:	3201      	adds	r2, #1
    a04e:	b291      	uxth	r1, r2
    a050:	4a33      	ldr	r2, [pc, #204]	; (a120 <StopRetransmission+0x148>)
    a052:	5299      	strh	r1, [r3, r2]

            /*
             * If the device has not received a RekeyConf within
             * the first ADR_ACK_LIMIT uplinks it SHALL revert to the Join state.
             */
            if( MacCtx.NvmCtx->RekeyIndUplinksCounter == MacCtx.NvmCtx->AdrAckLimit )
    a054:	4b2d      	ldr	r3, [pc, #180]	; (a10c <StopRetransmission+0x134>)
    a056:	4a2e      	ldr	r2, [pc, #184]	; (a110 <StopRetransmission+0x138>)
    a058:	589b      	ldr	r3, [r3, r2]
    a05a:	4a31      	ldr	r2, [pc, #196]	; (a120 <StopRetransmission+0x148>)
    a05c:	5a9a      	ldrh	r2, [r3, r2]
    a05e:	4b2b      	ldr	r3, [pc, #172]	; (a10c <StopRetransmission+0x134>)
    a060:	492b      	ldr	r1, [pc, #172]	; (a110 <StopRetransmission+0x138>)
    a062:	585b      	ldr	r3, [r3, r1]
    a064:	21d0      	movs	r1, #208	; 0xd0
    a066:	5a5b      	ldrh	r3, [r3, r1]
    a068:	429a      	cmp	r2, r3
    a06a:	d110      	bne.n	a08e <StopRetransmission+0xb6>
            {
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    a06c:	4b27      	ldr	r3, [pc, #156]	; (a10c <StopRetransmission+0x134>)
    a06e:	4a28      	ldr	r2, [pc, #160]	; (a110 <StopRetransmission+0x138>)
    a070:	589a      	ldr	r2, [r3, r2]
    a072:	2388      	movs	r3, #136	; 0x88
    a074:	009b      	lsls	r3, r3, #2
    a076:	2100      	movs	r1, #0
    a078:	54d1      	strb	r1, [r2, r3]
                MacCtx.MacFlags.Bits.MlmeInd = 1;
    a07a:	4b24      	ldr	r3, [pc, #144]	; (a10c <StopRetransmission+0x134>)
    a07c:	4a29      	ldr	r2, [pc, #164]	; (a124 <StopRetransmission+0x14c>)
    a07e:	5c99      	ldrb	r1, [r3, r2]
    a080:	2008      	movs	r0, #8
    a082:	4301      	orrs	r1, r0
    a084:	5499      	strb	r1, [r3, r2]
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
    a086:	4b21      	ldr	r3, [pc, #132]	; (a10c <StopRetransmission+0x134>)
    a088:	4a27      	ldr	r2, [pc, #156]	; (a128 <StopRetransmission+0x150>)
    a08a:	210f      	movs	r1, #15
    a08c:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
    a08e:	4b1f      	ldr	r3, [pc, #124]	; (a10c <StopRetransmission+0x134>)
    a090:	4a24      	ldr	r2, [pc, #144]	; (a124 <StopRetransmission+0x14c>)
    a092:	5c9b      	ldrb	r3, [r3, r2]
    a094:	2202      	movs	r2, #2
    a096:	4013      	ands	r3, r2
    a098:	b2db      	uxtb	r3, r3
    a09a:	2b00      	cmp	r3, #0
    a09c:	d10e      	bne.n	a0bc <StopRetransmission+0xe4>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
    a09e:	4b1b      	ldr	r3, [pc, #108]	; (a10c <StopRetransmission+0x134>)
    a0a0:	4a1b      	ldr	r2, [pc, #108]	; (a110 <StopRetransmission+0x138>)
    a0a2:	589b      	ldr	r3, [r3, r2]
    a0a4:	22ca      	movs	r2, #202	; 0xca
    a0a6:	5c9b      	ldrb	r3, [r3, r2]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d007      	beq.n	a0bc <StopRetransmission+0xe4>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
    a0ac:	4b17      	ldr	r3, [pc, #92]	; (a10c <StopRetransmission+0x134>)
    a0ae:	4a18      	ldr	r2, [pc, #96]	; (a110 <StopRetransmission+0x138>)
    a0b0:	589b      	ldr	r3, [r3, r2]
    a0b2:	22cc      	movs	r2, #204	; 0xcc
    a0b4:	589a      	ldr	r2, [r3, r2]
    a0b6:	3201      	adds	r2, #1
    a0b8:	21cc      	movs	r1, #204	; 0xcc
    a0ba:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    a0bc:	4b13      	ldr	r3, [pc, #76]	; (a10c <StopRetransmission+0x134>)
    a0be:	4a14      	ldr	r2, [pc, #80]	; (a110 <StopRetransmission+0x138>)
    a0c0:	589a      	ldr	r2, [r3, r2]
    a0c2:	2388      	movs	r3, #136	; 0x88
    a0c4:	005b      	lsls	r3, r3, #1
    a0c6:	2100      	movs	r1, #0
    a0c8:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
    a0ca:	4b10      	ldr	r3, [pc, #64]	; (a10c <StopRetransmission+0x134>)
    a0cc:	4a10      	ldr	r2, [pc, #64]	; (a110 <StopRetransmission+0x138>)
    a0ce:	589b      	ldr	r3, [r3, r2]
    a0d0:	4a16      	ldr	r2, [pc, #88]	; (a12c <StopRetransmission+0x154>)
    a0d2:	2100      	movs	r1, #0
    a0d4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    a0d6:	4b0d      	ldr	r3, [pc, #52]	; (a10c <StopRetransmission+0x134>)
    a0d8:	4a0d      	ldr	r2, [pc, #52]	; (a110 <StopRetransmission+0x138>)
    a0da:	589b      	ldr	r3, [r3, r2]
    a0dc:	4a14      	ldr	r2, [pc, #80]	; (a130 <StopRetransmission+0x158>)
    a0de:	2100      	movs	r1, #0
    a0e0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    a0e2:	4a0a      	ldr	r2, [pc, #40]	; (a10c <StopRetransmission+0x134>)
    a0e4:	23d7      	movs	r3, #215	; 0xd7
    a0e6:	009b      	lsls	r3, r3, #2
    a0e8:	58d3      	ldr	r3, [r2, r3]
    a0ea:	2202      	movs	r2, #2
    a0ec:	4393      	bics	r3, r2
    a0ee:	0019      	movs	r1, r3
    a0f0:	4a06      	ldr	r2, [pc, #24]	; (a10c <StopRetransmission+0x134>)
    a0f2:	23d7      	movs	r3, #215	; 0xd7
    a0f4:	009b      	lsls	r3, r3, #2
    a0f6:	50d1      	str	r1, [r2, r3]

    return true;
    a0f8:	2301      	movs	r3, #1
}
    a0fa:	0018      	movs	r0, r3
    a0fc:	46bd      	mov	sp, r7
    a0fe:	b002      	add	sp, #8
    a100:	bd80      	pop	{r7, pc}
    a102:	46c0      	nop			; (mov r8, r8)
    a104:	0000f1e9 	.word	0x0000f1e9
    a108:	0000f215 	.word	0x0000f215
    a10c:	20000c8c 	.word	0x20000c8c
    a110:	000004c4 	.word	0x000004c4
    a114:	00000222 	.word	0x00000222
    a118:	0000021e 	.word	0x0000021e
    a11c:	0000cc45 	.word	0x0000cc45
    a120:	0000023a 	.word	0x0000023a
    a124:	00000465 	.word	0x00000465
    a128:	0000044c 	.word	0x0000044c
    a12c:	00000217 	.word	0x00000217
    a130:	00000216 	.word	0x00000216

0000a134 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    a134:	b580      	push	{r7, lr}
    a136:	b082      	sub	sp, #8
    a138:	af00      	add	r7, sp, #0
    a13a:	0002      	movs	r2, r0
    a13c:	1dfb      	adds	r3, r7, #7
    a13e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
    a140:	4a0c      	ldr	r2, [pc, #48]	; (a174 <CallNvmCtxCallback+0x40>)
    a142:	23d9      	movs	r3, #217	; 0xd9
    a144:	009b      	lsls	r3, r3, #2
    a146:	58d3      	ldr	r3, [r2, r3]
    a148:	2b00      	cmp	r3, #0
    a14a:	d00f      	beq.n	a16c <CallNvmCtxCallback+0x38>
    a14c:	4a09      	ldr	r2, [pc, #36]	; (a174 <CallNvmCtxCallback+0x40>)
    a14e:	23d9      	movs	r3, #217	; 0xd9
    a150:	009b      	lsls	r3, r3, #2
    a152:	58d3      	ldr	r3, [r2, r3]
    a154:	689b      	ldr	r3, [r3, #8]
    a156:	2b00      	cmp	r3, #0
    a158:	d008      	beq.n	a16c <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
    a15a:	4a06      	ldr	r2, [pc, #24]	; (a174 <CallNvmCtxCallback+0x40>)
    a15c:	23d9      	movs	r3, #217	; 0xd9
    a15e:	009b      	lsls	r3, r3, #2
    a160:	58d3      	ldr	r3, [r2, r3]
    a162:	689b      	ldr	r3, [r3, #8]
    a164:	1dfa      	adds	r2, r7, #7
    a166:	7812      	ldrb	r2, [r2, #0]
    a168:	0010      	movs	r0, r2
    a16a:	4798      	blx	r3
    }
}
    a16c:	46c0      	nop			; (mov r8, r8)
    a16e:	46bd      	mov	sp, r7
    a170:	b002      	add	sp, #8
    a172:	bd80      	pop	{r7, pc}
    a174:	20000c8c 	.word	0x20000c8c

0000a178 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    a178:	b580      	push	{r7, lr}
    a17a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
    a17c:	2000      	movs	r0, #0
    a17e:	4b02      	ldr	r3, [pc, #8]	; (a188 <EventMacNvmCtxChanged+0x10>)
    a180:	4798      	blx	r3
}
    a182:	46c0      	nop			; (mov r8, r8)
    a184:	46bd      	mov	sp, r7
    a186:	bd80      	pop	{r7, pc}
    a188:	0000a135 	.word	0x0000a135

0000a18c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
    a18c:	b580      	push	{r7, lr}
    a18e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
    a190:	2001      	movs	r0, #1
    a192:	4b02      	ldr	r3, [pc, #8]	; (a19c <EventRegionNvmCtxChanged+0x10>)
    a194:	4798      	blx	r3
}
    a196:	46c0      	nop			; (mov r8, r8)
    a198:	46bd      	mov	sp, r7
    a19a:	bd80      	pop	{r7, pc}
    a19c:	0000a135 	.word	0x0000a135

0000a1a0 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
    a1a0:	b580      	push	{r7, lr}
    a1a2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
    a1a4:	2002      	movs	r0, #2
    a1a6:	4b02      	ldr	r3, [pc, #8]	; (a1b0 <EventCryptoNvmCtxChanged+0x10>)
    a1a8:	4798      	blx	r3
}
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	46bd      	mov	sp, r7
    a1ae:	bd80      	pop	{r7, pc}
    a1b0:	0000a135 	.word	0x0000a135

0000a1b4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
    a1b8:	2003      	movs	r0, #3
    a1ba:	4b02      	ldr	r3, [pc, #8]	; (a1c4 <EventSecureElementNvmCtxChanged+0x10>)
    a1bc:	4798      	blx	r3
}
    a1be:	46c0      	nop			; (mov r8, r8)
    a1c0:	46bd      	mov	sp, r7
    a1c2:	bd80      	pop	{r7, pc}
    a1c4:	0000a135 	.word	0x0000a135

0000a1c8 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
    a1c8:	b580      	push	{r7, lr}
    a1ca:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
    a1cc:	2004      	movs	r0, #4
    a1ce:	4b02      	ldr	r3, [pc, #8]	; (a1d8 <EventCommandsNvmCtxChanged+0x10>)
    a1d0:	4798      	blx	r3
}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	46bd      	mov	sp, r7
    a1d6:	bd80      	pop	{r7, pc}
    a1d8:	0000a135 	.word	0x0000a135

0000a1dc <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
    a1dc:	b580      	push	{r7, lr}
    a1de:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
    a1e0:	2005      	movs	r0, #5
    a1e2:	4b02      	ldr	r3, [pc, #8]	; (a1ec <EventClassBNvmCtxChanged+0x10>)
    a1e4:	4798      	blx	r3
}
    a1e6:	46c0      	nop			; (mov r8, r8)
    a1e8:	46bd      	mov	sp, r7
    a1ea:	bd80      	pop	{r7, pc}
    a1ec:	0000a135 	.word	0x0000a135

0000a1f0 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
    a1f0:	b580      	push	{r7, lr}
    a1f2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
    a1f4:	2006      	movs	r0, #6
    a1f6:	4b02      	ldr	r3, [pc, #8]	; (a200 <EventConfirmQueueNvmCtxChanged+0x10>)
    a1f8:	4798      	blx	r3
}
    a1fa:	46c0      	nop			; (mov r8, r8)
    a1fc:	46bd      	mov	sp, r7
    a1fe:	bd80      	pop	{r7, pc}
    a200:	0000a135 	.word	0x0000a135

0000a204 <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
    a204:	b580      	push	{r7, lr}
    a206:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
    a208:	2007      	movs	r0, #7
    a20a:	4b02      	ldr	r3, [pc, #8]	; (a214 <EventFCntHandlerNvmCtxChanged+0x10>)
    a20c:	4798      	blx	r3
}
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	46bd      	mov	sp, r7
    a212:	bd80      	pop	{r7, pc}
    a214:	0000a135 	.word	0x0000a135

0000a218 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
    a218:	b580      	push	{r7, lr}
    a21a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
    a21c:	4b0a      	ldr	r3, [pc, #40]	; (a248 <IsRequestPending+0x30>)
    a21e:	4a0b      	ldr	r2, [pc, #44]	; (a24c <IsRequestPending+0x34>)
    a220:	5c9b      	ldrb	r3, [r3, r2]
    a222:	2204      	movs	r2, #4
    a224:	4013      	ands	r3, r2
    a226:	b2db      	uxtb	r3, r3
    a228:	2b00      	cmp	r3, #0
    a22a:	d107      	bne.n	a23c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    a22c:	4b06      	ldr	r3, [pc, #24]	; (a248 <IsRequestPending+0x30>)
    a22e:	4a07      	ldr	r2, [pc, #28]	; (a24c <IsRequestPending+0x34>)
    a230:	5c9b      	ldrb	r3, [r3, r2]
    a232:	2201      	movs	r2, #1
    a234:	4013      	ands	r3, r2
    a236:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
    a238:	2b00      	cmp	r3, #0
    a23a:	d001      	beq.n	a240 <IsRequestPending+0x28>
    {
        return 1;
    a23c:	2301      	movs	r3, #1
    a23e:	e000      	b.n	a242 <IsRequestPending+0x2a>
    }
    return 0;
    a240:	2300      	movs	r3, #0
}
    a242:	0018      	movs	r0, r3
    a244:	46bd      	mov	sp, r7
    a246:	bd80      	pop	{r7, pc}
    a248:	20000c8c 	.word	0x20000c8c
    a24c:	00000465 	.word	0x00000465

0000a250 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
    a250:	b5b0      	push	{r4, r5, r7, lr}
    a252:	b096      	sub	sp, #88	; 0x58
    a254:	af00      	add	r7, sp, #0
    a256:	6178      	str	r0, [r7, #20]
    a258:	6139      	str	r1, [r7, #16]
    a25a:	230f      	movs	r3, #15
    a25c:	18fb      	adds	r3, r7, r3
    a25e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
    a260:	697b      	ldr	r3, [r7, #20]
    a262:	2b00      	cmp	r3, #0
    a264:	d002      	beq.n	a26c <LoRaMacInitialization+0x1c>
    a266:	693b      	ldr	r3, [r7, #16]
    a268:	2b00      	cmp	r3, #0
    a26a:	d101      	bne.n	a270 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    a26c:	2303      	movs	r3, #3
    a26e:	e3b3      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
    a270:	697b      	ldr	r3, [r7, #20]
    a272:	681b      	ldr	r3, [r3, #0]
    a274:	2b00      	cmp	r3, #0
    a276:	d00b      	beq.n	a290 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
    a278:	697b      	ldr	r3, [r7, #20]
    a27a:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
    a27c:	2b00      	cmp	r3, #0
    a27e:	d007      	beq.n	a290 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
    a280:	697b      	ldr	r3, [r7, #20]
    a282:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
    a284:	2b00      	cmp	r3, #0
    a286:	d003      	beq.n	a290 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
    a288:	697b      	ldr	r3, [r7, #20]
    a28a:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
    a28c:	2b00      	cmp	r3, #0
    a28e:	d101      	bne.n	a294 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    a290:	2303      	movs	r3, #3
    a292:	e3a1      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
    a294:	230f      	movs	r3, #15
    a296:	18fb      	adds	r3, r7, r3
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	0018      	movs	r0, r3
    a29c:	4b05      	ldr	r3, [pc, #20]	; (a2b4 <LoRaMacInitialization+0x64>)
    a29e:	4798      	blx	r3
    a2a0:	0003      	movs	r3, r0
    a2a2:	001a      	movs	r2, r3
    a2a4:	2301      	movs	r3, #1
    a2a6:	4053      	eors	r3, r2
    a2a8:	b2db      	uxtb	r3, r3
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d004      	beq.n	a2b8 <LoRaMacInitialization+0x68>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    a2ae:	2309      	movs	r3, #9
    a2b0:	e392      	b.n	a9d8 <LoRaMacInitialization+0x788>
    a2b2:	46c0      	nop			; (mov r8, r8)
    a2b4:	0000fe9d 	.word	0x0000fe9d
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
    a2b8:	4afe      	ldr	r2, [pc, #1016]	; (a6b4 <LoRaMacInitialization+0x464>)
    a2ba:	697b      	ldr	r3, [r7, #20]
    a2bc:	0011      	movs	r1, r2
    a2be:	0018      	movs	r0, r3
    a2c0:	4bfd      	ldr	r3, [pc, #1012]	; (a6b8 <LoRaMacInitialization+0x468>)
    a2c2:	4798      	blx	r3

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
    a2c4:	2390      	movs	r3, #144	; 0x90
    a2c6:	009a      	lsls	r2, r3, #2
    a2c8:	4bfc      	ldr	r3, [pc, #1008]	; (a6bc <LoRaMacInitialization+0x46c>)
    a2ca:	2100      	movs	r1, #0
    a2cc:	0018      	movs	r0, r3
    a2ce:	4bfc      	ldr	r3, [pc, #1008]	; (a6c0 <LoRaMacInitialization+0x470>)
    a2d0:	4798      	blx	r3
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
    a2d2:	2399      	movs	r3, #153	; 0x99
    a2d4:	00da      	lsls	r2, r3, #3
    a2d6:	4bfb      	ldr	r3, [pc, #1004]	; (a6c4 <LoRaMacInitialization+0x474>)
    a2d8:	2100      	movs	r1, #0
    a2da:	0018      	movs	r0, r3
    a2dc:	4bf8      	ldr	r3, [pc, #992]	; (a6c0 <LoRaMacInitialization+0x470>)
    a2de:	4798      	blx	r3
    MacCtx.NvmCtx = &NvmMacCtx;
    a2e0:	4bf8      	ldr	r3, [pc, #992]	; (a6c4 <LoRaMacInitialization+0x474>)
    a2e2:	49f9      	ldr	r1, [pc, #996]	; (a6c8 <LoRaMacInitialization+0x478>)
    a2e4:	4af5      	ldr	r2, [pc, #980]	; (a6bc <LoRaMacInitialization+0x46c>)
    a2e6:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->Region = region;
    a2e8:	4bf6      	ldr	r3, [pc, #984]	; (a6c4 <LoRaMacInitialization+0x474>)
    a2ea:	4af7      	ldr	r2, [pc, #988]	; (a6c8 <LoRaMacInitialization+0x478>)
    a2ec:	589b      	ldr	r3, [r3, r2]
    a2ee:	220f      	movs	r2, #15
    a2f0:	18ba      	adds	r2, r7, r2
    a2f2:	7812      	ldrb	r2, [r2, #0]
    a2f4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
    a2f6:	4bf3      	ldr	r3, [pc, #972]	; (a6c4 <LoRaMacInitialization+0x474>)
    a2f8:	4af3      	ldr	r2, [pc, #972]	; (a6c8 <LoRaMacInitialization+0x478>)
    a2fa:	589b      	ldr	r3, [r3, r2]
    a2fc:	22c8      	movs	r2, #200	; 0xc8
    a2fe:	2100      	movs	r1, #0
    a300:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
    a302:	4bf0      	ldr	r3, [pc, #960]	; (a6c4 <LoRaMacInitialization+0x474>)
    a304:	4af0      	ldr	r2, [pc, #960]	; (a6c8 <LoRaMacInitialization+0x478>)
    a306:	589a      	ldr	r2, [r3, r2]
    a308:	2316      	movs	r3, #22
    a30a:	33ff      	adds	r3, #255	; 0xff
    a30c:	2100      	movs	r1, #0
    a30e:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    a310:	2324      	movs	r3, #36	; 0x24
    a312:	18fb      	adds	r3, r7, r3
    a314:	2201      	movs	r2, #1
    a316:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 1;
    a318:	2324      	movs	r3, #36	; 0x24
    a31a:	18fb      	adds	r3, r7, r3
    a31c:	2201      	movs	r2, #1
    a31e:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 0;
    a320:	2324      	movs	r3, #36	; 0x24
    a322:	18fb      	adds	r3, r7, r3
    a324:	2200      	movs	r2, #0
    a326:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
    a328:	2324      	movs	r3, #36	; 0x24
    a32a:	18fb      	adds	r3, r7, r3
    a32c:	2200      	movs	r2, #0
    a32e:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
    a330:	4be4      	ldr	r3, [pc, #912]	; (a6c4 <LoRaMacInitialization+0x474>)
    a332:	4ae5      	ldr	r2, [pc, #916]	; (a6c8 <LoRaMacInitialization+0x478>)
    a334:	589a      	ldr	r2, [r3, r2]
    a336:	2387      	movs	r3, #135	; 0x87
    a338:	009b      	lsls	r3, r3, #2
    a33a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a33c:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
    a33e:	2354      	movs	r3, #84	; 0x54
    a340:	18fb      	adds	r3, r7, r3
    a342:	220e      	movs	r2, #14
    a344:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a346:	4bdf      	ldr	r3, [pc, #892]	; (a6c4 <LoRaMacInitialization+0x474>)
    a348:	4adf      	ldr	r2, [pc, #892]	; (a6c8 <LoRaMacInitialization+0x478>)
    a34a:	589b      	ldr	r3, [r3, r2]
    a34c:	781b      	ldrb	r3, [r3, #0]
    a34e:	2254      	movs	r2, #84	; 0x54
    a350:	18ba      	adds	r2, r7, r2
    a352:	0011      	movs	r1, r2
    a354:	0018      	movs	r0, r3
    a356:	4bdd      	ldr	r3, [pc, #884]	; (a6cc <LoRaMacInitialization+0x47c>)
    a358:	4798      	blx	r3
    a35a:	0003      	movs	r3, r0
    a35c:	001a      	movs	r2, r3
    a35e:	2350      	movs	r3, #80	; 0x50
    a360:	18fb      	adds	r3, r7, r3
    a362:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
    a364:	4bd7      	ldr	r3, [pc, #860]	; (a6c4 <LoRaMacInitialization+0x474>)
    a366:	4ad8      	ldr	r2, [pc, #864]	; (a6c8 <LoRaMacInitialization+0x478>)
    a368:	589a      	ldr	r2, [r3, r2]
    a36a:	2350      	movs	r3, #80	; 0x50
    a36c:	18fb      	adds	r3, r7, r3
    a36e:	681b      	ldr	r3, [r3, #0]
    a370:	1e59      	subs	r1, r3, #1
    a372:	418b      	sbcs	r3, r1
    a374:	b2d9      	uxtb	r1, r3
    a376:	2389      	movs	r3, #137	; 0x89
    a378:	005b      	lsls	r3, r3, #1
    a37a:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
    a37c:	2354      	movs	r3, #84	; 0x54
    a37e:	18fb      	adds	r3, r7, r3
    a380:	2209      	movs	r2, #9
    a382:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a384:	4bcf      	ldr	r3, [pc, #828]	; (a6c4 <LoRaMacInitialization+0x474>)
    a386:	4ad0      	ldr	r2, [pc, #832]	; (a6c8 <LoRaMacInitialization+0x478>)
    a388:	589b      	ldr	r3, [r3, r2]
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	2254      	movs	r2, #84	; 0x54
    a38e:	18ba      	adds	r2, r7, r2
    a390:	0011      	movs	r1, r2
    a392:	0018      	movs	r0, r3
    a394:	4bcd      	ldr	r3, [pc, #820]	; (a6cc <LoRaMacInitialization+0x47c>)
    a396:	4798      	blx	r3
    a398:	0003      	movs	r3, r0
    a39a:	001a      	movs	r2, r3
    a39c:	2350      	movs	r3, #80	; 0x50
    a39e:	18fb      	adds	r3, r7, r3
    a3a0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
    a3a2:	4bc8      	ldr	r3, [pc, #800]	; (a6c4 <LoRaMacInitialization+0x474>)
    a3a4:	4ac8      	ldr	r2, [pc, #800]	; (a6c8 <LoRaMacInitialization+0x478>)
    a3a6:	589a      	ldr	r2, [r3, r2]
    a3a8:	2350      	movs	r3, #80	; 0x50
    a3aa:	18fb      	adds	r3, r7, r3
    a3ac:	681b      	ldr	r3, [r3, #0]
    a3ae:	b25b      	sxtb	r3, r3
    a3b0:	7113      	strb	r3, [r2, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
    a3b2:	2354      	movs	r3, #84	; 0x54
    a3b4:	18fb      	adds	r3, r7, r3
    a3b6:	2205      	movs	r2, #5
    a3b8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a3ba:	4bc2      	ldr	r3, [pc, #776]	; (a6c4 <LoRaMacInitialization+0x474>)
    a3bc:	4ac2      	ldr	r2, [pc, #776]	; (a6c8 <LoRaMacInitialization+0x478>)
    a3be:	589b      	ldr	r3, [r3, r2]
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	2254      	movs	r2, #84	; 0x54
    a3c4:	18ba      	adds	r2, r7, r2
    a3c6:	0011      	movs	r1, r2
    a3c8:	0018      	movs	r0, r3
    a3ca:	4bc0      	ldr	r3, [pc, #768]	; (a6cc <LoRaMacInitialization+0x47c>)
    a3cc:	4798      	blx	r3
    a3ce:	0003      	movs	r3, r0
    a3d0:	001a      	movs	r2, r3
    a3d2:	2350      	movs	r3, #80	; 0x50
    a3d4:	18fb      	adds	r3, r7, r3
    a3d6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
    a3d8:	4bba      	ldr	r3, [pc, #744]	; (a6c4 <LoRaMacInitialization+0x474>)
    a3da:	4abb      	ldr	r2, [pc, #748]	; (a6c8 <LoRaMacInitialization+0x478>)
    a3dc:	589a      	ldr	r2, [r3, r2]
    a3de:	2350      	movs	r3, #80	; 0x50
    a3e0:	18fb      	adds	r3, r7, r3
    a3e2:	681b      	ldr	r3, [r3, #0]
    a3e4:	b25b      	sxtb	r3, r3
    a3e6:	7153      	strb	r3, [r2, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
    a3e8:	2354      	movs	r3, #84	; 0x54
    a3ea:	18fb      	adds	r3, r7, r3
    a3ec:	220f      	movs	r2, #15
    a3ee:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a3f0:	4bb4      	ldr	r3, [pc, #720]	; (a6c4 <LoRaMacInitialization+0x474>)
    a3f2:	4ab5      	ldr	r2, [pc, #724]	; (a6c8 <LoRaMacInitialization+0x478>)
    a3f4:	589b      	ldr	r3, [r3, r2]
    a3f6:	781b      	ldrb	r3, [r3, #0]
    a3f8:	2254      	movs	r2, #84	; 0x54
    a3fa:	18ba      	adds	r2, r7, r2
    a3fc:	0011      	movs	r1, r2
    a3fe:	0018      	movs	r0, r3
    a400:	4bb2      	ldr	r3, [pc, #712]	; (a6cc <LoRaMacInitialization+0x47c>)
    a402:	4798      	blx	r3
    a404:	0003      	movs	r3, r0
    a406:	001a      	movs	r2, r3
    a408:	2350      	movs	r3, #80	; 0x50
    a40a:	18fb      	adds	r3, r7, r3
    a40c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
    a40e:	4bad      	ldr	r3, [pc, #692]	; (a6c4 <LoRaMacInitialization+0x474>)
    a410:	4aad      	ldr	r2, [pc, #692]	; (a6c8 <LoRaMacInitialization+0x478>)
    a412:	589b      	ldr	r3, [r3, r2]
    a414:	2250      	movs	r2, #80	; 0x50
    a416:	18ba      	adds	r2, r7, r2
    a418:	6812      	ldr	r2, [r2, #0]
    a41a:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    a41c:	2354      	movs	r3, #84	; 0x54
    a41e:	18fb      	adds	r3, r7, r3
    a420:	2210      	movs	r2, #16
    a422:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a424:	4ba7      	ldr	r3, [pc, #668]	; (a6c4 <LoRaMacInitialization+0x474>)
    a426:	4aa8      	ldr	r2, [pc, #672]	; (a6c8 <LoRaMacInitialization+0x478>)
    a428:	589b      	ldr	r3, [r3, r2]
    a42a:	781b      	ldrb	r3, [r3, #0]
    a42c:	2254      	movs	r2, #84	; 0x54
    a42e:	18ba      	adds	r2, r7, r2
    a430:	0011      	movs	r1, r2
    a432:	0018      	movs	r0, r3
    a434:	4ba5      	ldr	r3, [pc, #660]	; (a6cc <LoRaMacInitialization+0x47c>)
    a436:	4798      	blx	r3
    a438:	0003      	movs	r3, r0
    a43a:	001a      	movs	r2, r3
    a43c:	2350      	movs	r3, #80	; 0x50
    a43e:	18fb      	adds	r3, r7, r3
    a440:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
    a442:	4ba0      	ldr	r3, [pc, #640]	; (a6c4 <LoRaMacInitialization+0x474>)
    a444:	4aa0      	ldr	r2, [pc, #640]	; (a6c8 <LoRaMacInitialization+0x478>)
    a446:	589b      	ldr	r3, [r3, r2]
    a448:	2250      	movs	r2, #80	; 0x50
    a44a:	18ba      	adds	r2, r7, r2
    a44c:	6812      	ldr	r2, [r2, #0]
    a44e:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    a450:	2354      	movs	r3, #84	; 0x54
    a452:	18fb      	adds	r3, r7, r3
    a454:	2211      	movs	r2, #17
    a456:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a458:	4b9a      	ldr	r3, [pc, #616]	; (a6c4 <LoRaMacInitialization+0x474>)
    a45a:	4a9b      	ldr	r2, [pc, #620]	; (a6c8 <LoRaMacInitialization+0x478>)
    a45c:	589b      	ldr	r3, [r3, r2]
    a45e:	781b      	ldrb	r3, [r3, #0]
    a460:	2254      	movs	r2, #84	; 0x54
    a462:	18ba      	adds	r2, r7, r2
    a464:	0011      	movs	r1, r2
    a466:	0018      	movs	r0, r3
    a468:	4b98      	ldr	r3, [pc, #608]	; (a6cc <LoRaMacInitialization+0x47c>)
    a46a:	4798      	blx	r3
    a46c:	0003      	movs	r3, r0
    a46e:	001a      	movs	r2, r3
    a470:	2350      	movs	r3, #80	; 0x50
    a472:	18fb      	adds	r3, r7, r3
    a474:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
    a476:	4b93      	ldr	r3, [pc, #588]	; (a6c4 <LoRaMacInitialization+0x474>)
    a478:	4a93      	ldr	r2, [pc, #588]	; (a6c8 <LoRaMacInitialization+0x478>)
    a47a:	589b      	ldr	r3, [r3, r2]
    a47c:	2250      	movs	r2, #80	; 0x50
    a47e:	18ba      	adds	r2, r7, r2
    a480:	6812      	ldr	r2, [r2, #0]
    a482:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    a484:	2354      	movs	r3, #84	; 0x54
    a486:	18fb      	adds	r3, r7, r3
    a488:	2212      	movs	r2, #18
    a48a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a48c:	4b8d      	ldr	r3, [pc, #564]	; (a6c4 <LoRaMacInitialization+0x474>)
    a48e:	4a8e      	ldr	r2, [pc, #568]	; (a6c8 <LoRaMacInitialization+0x478>)
    a490:	589b      	ldr	r3, [r3, r2]
    a492:	781b      	ldrb	r3, [r3, #0]
    a494:	2254      	movs	r2, #84	; 0x54
    a496:	18ba      	adds	r2, r7, r2
    a498:	0011      	movs	r1, r2
    a49a:	0018      	movs	r0, r3
    a49c:	4b8b      	ldr	r3, [pc, #556]	; (a6cc <LoRaMacInitialization+0x47c>)
    a49e:	4798      	blx	r3
    a4a0:	0003      	movs	r3, r0
    a4a2:	001a      	movs	r2, r3
    a4a4:	2350      	movs	r3, #80	; 0x50
    a4a6:	18fb      	adds	r3, r7, r3
    a4a8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
    a4aa:	4b86      	ldr	r3, [pc, #536]	; (a6c4 <LoRaMacInitialization+0x474>)
    a4ac:	4a86      	ldr	r2, [pc, #536]	; (a6c8 <LoRaMacInitialization+0x478>)
    a4ae:	589b      	ldr	r3, [r3, r2]
    a4b0:	2250      	movs	r2, #80	; 0x50
    a4b2:	18ba      	adds	r2, r7, r2
    a4b4:	6812      	ldr	r2, [r2, #0]
    a4b6:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    a4b8:	2354      	movs	r3, #84	; 0x54
    a4ba:	18fb      	adds	r3, r7, r3
    a4bc:	2213      	movs	r2, #19
    a4be:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a4c0:	4b80      	ldr	r3, [pc, #512]	; (a6c4 <LoRaMacInitialization+0x474>)
    a4c2:	4a81      	ldr	r2, [pc, #516]	; (a6c8 <LoRaMacInitialization+0x478>)
    a4c4:	589b      	ldr	r3, [r3, r2]
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	2254      	movs	r2, #84	; 0x54
    a4ca:	18ba      	adds	r2, r7, r2
    a4cc:	0011      	movs	r1, r2
    a4ce:	0018      	movs	r0, r3
    a4d0:	4b7e      	ldr	r3, [pc, #504]	; (a6cc <LoRaMacInitialization+0x47c>)
    a4d2:	4798      	blx	r3
    a4d4:	0003      	movs	r3, r0
    a4d6:	001a      	movs	r2, r3
    a4d8:	2350      	movs	r3, #80	; 0x50
    a4da:	18fb      	adds	r3, r7, r3
    a4dc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
    a4de:	4b79      	ldr	r3, [pc, #484]	; (a6c4 <LoRaMacInitialization+0x474>)
    a4e0:	4a79      	ldr	r2, [pc, #484]	; (a6c8 <LoRaMacInitialization+0x478>)
    a4e2:	589b      	ldr	r3, [r3, r2]
    a4e4:	2250      	movs	r2, #80	; 0x50
    a4e6:	18ba      	adds	r2, r7, r2
    a4e8:	6812      	ldr	r2, [r2, #0]
    a4ea:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    a4ec:	2354      	movs	r3, #84	; 0x54
    a4ee:	18fb      	adds	r3, r7, r3
    a4f0:	2216      	movs	r2, #22
    a4f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a4f4:	4b73      	ldr	r3, [pc, #460]	; (a6c4 <LoRaMacInitialization+0x474>)
    a4f6:	4a74      	ldr	r2, [pc, #464]	; (a6c8 <LoRaMacInitialization+0x478>)
    a4f8:	589b      	ldr	r3, [r3, r2]
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	2254      	movs	r2, #84	; 0x54
    a4fe:	18ba      	adds	r2, r7, r2
    a500:	0011      	movs	r1, r2
    a502:	0018      	movs	r0, r3
    a504:	4b71      	ldr	r3, [pc, #452]	; (a6cc <LoRaMacInitialization+0x47c>)
    a506:	4798      	blx	r3
    a508:	0003      	movs	r3, r0
    a50a:	001a      	movs	r2, r3
    a50c:	2350      	movs	r3, #80	; 0x50
    a50e:	18fb      	adds	r3, r7, r3
    a510:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
    a512:	4b6c      	ldr	r3, [pc, #432]	; (a6c4 <LoRaMacInitialization+0x474>)
    a514:	4a6c      	ldr	r2, [pc, #432]	; (a6c8 <LoRaMacInitialization+0x478>)
    a516:	589a      	ldr	r2, [r3, r2]
    a518:	2350      	movs	r3, #80	; 0x50
    a51a:	18fb      	adds	r3, r7, r3
    a51c:	681b      	ldr	r3, [r3, #0]
    a51e:	b2d9      	uxtb	r1, r3
    a520:	2325      	movs	r3, #37	; 0x25
    a522:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    a524:	2354      	movs	r3, #84	; 0x54
    a526:	18fb      	adds	r3, r7, r3
    a528:	2217      	movs	r2, #23
    a52a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a52c:	4b65      	ldr	r3, [pc, #404]	; (a6c4 <LoRaMacInitialization+0x474>)
    a52e:	4a66      	ldr	r2, [pc, #408]	; (a6c8 <LoRaMacInitialization+0x478>)
    a530:	589b      	ldr	r3, [r3, r2]
    a532:	781b      	ldrb	r3, [r3, #0]
    a534:	2254      	movs	r2, #84	; 0x54
    a536:	18ba      	adds	r2, r7, r2
    a538:	0011      	movs	r1, r2
    a53a:	0018      	movs	r0, r3
    a53c:	4b63      	ldr	r3, [pc, #396]	; (a6cc <LoRaMacInitialization+0x47c>)
    a53e:	4798      	blx	r3
    a540:	0003      	movs	r3, r0
    a542:	001a      	movs	r2, r3
    a544:	2350      	movs	r3, #80	; 0x50
    a546:	18fb      	adds	r3, r7, r3
    a548:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    a54a:	4b5e      	ldr	r3, [pc, #376]	; (a6c4 <LoRaMacInitialization+0x474>)
    a54c:	4a5e      	ldr	r2, [pc, #376]	; (a6c8 <LoRaMacInitialization+0x478>)
    a54e:	589b      	ldr	r3, [r3, r2]
    a550:	2250      	movs	r2, #80	; 0x50
    a552:	18ba      	adds	r2, r7, r2
    a554:	6812      	ldr	r2, [r2, #0]
    a556:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
    a558:	2354      	movs	r3, #84	; 0x54
    a55a:	18fb      	adds	r3, r7, r3
    a55c:	2218      	movs	r2, #24
    a55e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a560:	4b58      	ldr	r3, [pc, #352]	; (a6c4 <LoRaMacInitialization+0x474>)
    a562:	4a59      	ldr	r2, [pc, #356]	; (a6c8 <LoRaMacInitialization+0x478>)
    a564:	589b      	ldr	r3, [r3, r2]
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	2254      	movs	r2, #84	; 0x54
    a56a:	18ba      	adds	r2, r7, r2
    a56c:	0011      	movs	r1, r2
    a56e:	0018      	movs	r0, r3
    a570:	4b56      	ldr	r3, [pc, #344]	; (a6cc <LoRaMacInitialization+0x47c>)
    a572:	4798      	blx	r3
    a574:	0003      	movs	r3, r0
    a576:	001a      	movs	r2, r3
    a578:	2350      	movs	r3, #80	; 0x50
    a57a:	18fb      	adds	r3, r7, r3
    a57c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
    a57e:	4b51      	ldr	r3, [pc, #324]	; (a6c4 <LoRaMacInitialization+0x474>)
    a580:	4a51      	ldr	r2, [pc, #324]	; (a6c8 <LoRaMacInitialization+0x478>)
    a582:	589a      	ldr	r2, [r3, r2]
    a584:	2350      	movs	r3, #80	; 0x50
    a586:	18fb      	adds	r3, r7, r3
    a588:	681b      	ldr	r3, [r3, #0]
    a58a:	b2d9      	uxtb	r1, r3
    a58c:	232c      	movs	r3, #44	; 0x2c
    a58e:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
    a590:	2354      	movs	r3, #84	; 0x54
    a592:	18fb      	adds	r3, r7, r3
    a594:	221d      	movs	r2, #29
    a596:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a598:	4b4a      	ldr	r3, [pc, #296]	; (a6c4 <LoRaMacInitialization+0x474>)
    a59a:	4a4b      	ldr	r2, [pc, #300]	; (a6c8 <LoRaMacInitialization+0x478>)
    a59c:	589b      	ldr	r3, [r3, r2]
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	2254      	movs	r2, #84	; 0x54
    a5a2:	18ba      	adds	r2, r7, r2
    a5a4:	0011      	movs	r1, r2
    a5a6:	0018      	movs	r0, r3
    a5a8:	4b48      	ldr	r3, [pc, #288]	; (a6cc <LoRaMacInitialization+0x47c>)
    a5aa:	4798      	blx	r3
    a5ac:	0003      	movs	r3, r0
    a5ae:	001a      	movs	r2, r3
    a5b0:	2350      	movs	r3, #80	; 0x50
    a5b2:	18fb      	adds	r3, r7, r3
    a5b4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
    a5b6:	4b43      	ldr	r3, [pc, #268]	; (a6c4 <LoRaMacInitialization+0x474>)
    a5b8:	4a43      	ldr	r2, [pc, #268]	; (a6c8 <LoRaMacInitialization+0x478>)
    a5ba:	589a      	ldr	r2, [r3, r2]
    a5bc:	2350      	movs	r3, #80	; 0x50
    a5be:	18fb      	adds	r3, r7, r3
    a5c0:	681b      	ldr	r3, [r3, #0]
    a5c2:	b2d9      	uxtb	r1, r3
    a5c4:	2330      	movs	r3, #48	; 0x30
    a5c6:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    a5c8:	2354      	movs	r3, #84	; 0x54
    a5ca:	18fb      	adds	r3, r7, r3
    a5cc:	221e      	movs	r2, #30
    a5ce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a5d0:	4b3c      	ldr	r3, [pc, #240]	; (a6c4 <LoRaMacInitialization+0x474>)
    a5d2:	4a3d      	ldr	r2, [pc, #244]	; (a6c8 <LoRaMacInitialization+0x478>)
    a5d4:	589b      	ldr	r3, [r3, r2]
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	2254      	movs	r2, #84	; 0x54
    a5da:	18ba      	adds	r2, r7, r2
    a5dc:	0011      	movs	r1, r2
    a5de:	0018      	movs	r0, r3
    a5e0:	4b3a      	ldr	r3, [pc, #232]	; (a6cc <LoRaMacInitialization+0x47c>)
    a5e2:	4798      	blx	r3
    a5e4:	0003      	movs	r3, r0
    a5e6:	001a      	movs	r2, r3
    a5e8:	2350      	movs	r3, #80	; 0x50
    a5ea:	18fb      	adds	r3, r7, r3
    a5ec:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
    a5ee:	4b35      	ldr	r3, [pc, #212]	; (a6c4 <LoRaMacInitialization+0x474>)
    a5f0:	4a35      	ldr	r2, [pc, #212]	; (a6c8 <LoRaMacInitialization+0x478>)
    a5f2:	589a      	ldr	r2, [r3, r2]
    a5f4:	2350      	movs	r3, #80	; 0x50
    a5f6:	18fb      	adds	r3, r7, r3
    a5f8:	681b      	ldr	r3, [r3, #0]
    a5fa:	b2d9      	uxtb	r1, r3
    a5fc:	2331      	movs	r3, #49	; 0x31
    a5fe:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    a600:	2354      	movs	r3, #84	; 0x54
    a602:	18fb      	adds	r3, r7, r3
    a604:	221f      	movs	r2, #31
    a606:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a608:	4b2e      	ldr	r3, [pc, #184]	; (a6c4 <LoRaMacInitialization+0x474>)
    a60a:	4a2f      	ldr	r2, [pc, #188]	; (a6c8 <LoRaMacInitialization+0x478>)
    a60c:	589b      	ldr	r3, [r3, r2]
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	2254      	movs	r2, #84	; 0x54
    a612:	18ba      	adds	r2, r7, r2
    a614:	0011      	movs	r1, r2
    a616:	0018      	movs	r0, r3
    a618:	4b2c      	ldr	r3, [pc, #176]	; (a6cc <LoRaMacInitialization+0x47c>)
    a61a:	4798      	blx	r3
    a61c:	0003      	movs	r3, r0
    a61e:	001a      	movs	r2, r3
    a620:	2350      	movs	r3, #80	; 0x50
    a622:	18fb      	adds	r3, r7, r3
    a624:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
    a626:	4b27      	ldr	r3, [pc, #156]	; (a6c4 <LoRaMacInitialization+0x474>)
    a628:	4a27      	ldr	r2, [pc, #156]	; (a6c8 <LoRaMacInitialization+0x478>)
    a62a:	589b      	ldr	r3, [r3, r2]
    a62c:	2250      	movs	r2, #80	; 0x50
    a62e:	18ba      	adds	r2, r7, r2
    a630:	6812      	ldr	r2, [r2, #0]
    a632:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    a634:	2354      	movs	r3, #84	; 0x54
    a636:	18fb      	adds	r3, r7, r3
    a638:	2220      	movs	r2, #32
    a63a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a63c:	4b21      	ldr	r3, [pc, #132]	; (a6c4 <LoRaMacInitialization+0x474>)
    a63e:	4a22      	ldr	r2, [pc, #136]	; (a6c8 <LoRaMacInitialization+0x478>)
    a640:	589b      	ldr	r3, [r3, r2]
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	2254      	movs	r2, #84	; 0x54
    a646:	18ba      	adds	r2, r7, r2
    a648:	0011      	movs	r1, r2
    a64a:	0018      	movs	r0, r3
    a64c:	4b1f      	ldr	r3, [pc, #124]	; (a6cc <LoRaMacInitialization+0x47c>)
    a64e:	4798      	blx	r3
    a650:	0003      	movs	r3, r0
    a652:	001a      	movs	r2, r3
    a654:	2350      	movs	r3, #80	; 0x50
    a656:	18fb      	adds	r3, r7, r3
    a658:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
    a65a:	4b1a      	ldr	r3, [pc, #104]	; (a6c4 <LoRaMacInitialization+0x474>)
    a65c:	4a1a      	ldr	r2, [pc, #104]	; (a6c8 <LoRaMacInitialization+0x478>)
    a65e:	589b      	ldr	r3, [r3, r2]
    a660:	2250      	movs	r2, #80	; 0x50
    a662:	18ba      	adds	r2, r7, r2
    a664:	6812      	ldr	r2, [r2, #0]
    a666:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    a668:	2354      	movs	r3, #84	; 0x54
    a66a:	18fb      	adds	r3, r7, r3
    a66c:	220a      	movs	r2, #10
    a66e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a670:	4b14      	ldr	r3, [pc, #80]	; (a6c4 <LoRaMacInitialization+0x474>)
    a672:	4a15      	ldr	r2, [pc, #84]	; (a6c8 <LoRaMacInitialization+0x478>)
    a674:	589b      	ldr	r3, [r3, r2]
    a676:	781b      	ldrb	r3, [r3, #0]
    a678:	2254      	movs	r2, #84	; 0x54
    a67a:	18ba      	adds	r2, r7, r2
    a67c:	0011      	movs	r1, r2
    a67e:	0018      	movs	r0, r3
    a680:	4b12      	ldr	r3, [pc, #72]	; (a6cc <LoRaMacInitialization+0x47c>)
    a682:	4798      	blx	r3
    a684:	0003      	movs	r3, r0
    a686:	001a      	movs	r2, r3
    a688:	2350      	movs	r3, #80	; 0x50
    a68a:	18fb      	adds	r3, r7, r3
    a68c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
    a68e:	4b0d      	ldr	r3, [pc, #52]	; (a6c4 <LoRaMacInitialization+0x474>)
    a690:	4a0d      	ldr	r2, [pc, #52]	; (a6c8 <LoRaMacInitialization+0x478>)
    a692:	589a      	ldr	r2, [r3, r2]
    a694:	2350      	movs	r3, #80	; 0x50
    a696:	18fb      	adds	r3, r7, r3
    a698:	681b      	ldr	r3, [r3, #0]
    a69a:	b299      	uxth	r1, r3
    a69c:	23d0      	movs	r3, #208	; 0xd0
    a69e:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
    a6a0:	2354      	movs	r3, #84	; 0x54
    a6a2:	18fb      	adds	r3, r7, r3
    a6a4:	220b      	movs	r2, #11
    a6a6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    a6a8:	4b06      	ldr	r3, [pc, #24]	; (a6c4 <LoRaMacInitialization+0x474>)
    a6aa:	4a07      	ldr	r2, [pc, #28]	; (a6c8 <LoRaMacInitialization+0x478>)
    a6ac:	589b      	ldr	r3, [r3, r2]
    a6ae:	781b      	ldrb	r3, [r3, #0]
    a6b0:	e00e      	b.n	a6d0 <LoRaMacInitialization+0x480>
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	0000a1f1 	.word	0x0000a1f1
    a6b8:	0000cf45 	.word	0x0000cf45
    a6bc:	20001154 	.word	0x20001154
    a6c0:	000043b1 	.word	0x000043b1
    a6c4:	20000c8c 	.word	0x20000c8c
    a6c8:	000004c4 	.word	0x000004c4
    a6cc:	0000fec1 	.word	0x0000fec1
    a6d0:	2254      	movs	r2, #84	; 0x54
    a6d2:	18ba      	adds	r2, r7, r2
    a6d4:	0011      	movs	r1, r2
    a6d6:	0018      	movs	r0, r3
    a6d8:	4bc1      	ldr	r3, [pc, #772]	; (a9e0 <LoRaMacInitialization+0x790>)
    a6da:	4798      	blx	r3
    a6dc:	0003      	movs	r3, r0
    a6de:	001a      	movs	r2, r3
    a6e0:	2350      	movs	r3, #80	; 0x50
    a6e2:	18fb      	adds	r3, r7, r3
    a6e4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
    a6e6:	4bbf      	ldr	r3, [pc, #764]	; (a9e4 <LoRaMacInitialization+0x794>)
    a6e8:	4abf      	ldr	r2, [pc, #764]	; (a9e8 <LoRaMacInitialization+0x798>)
    a6ea:	589a      	ldr	r2, [r3, r2]
    a6ec:	2350      	movs	r3, #80	; 0x50
    a6ee:	18fb      	adds	r3, r7, r3
    a6f0:	681b      	ldr	r3, [r3, #0]
    a6f2:	b299      	uxth	r1, r3
    a6f4:	23d2      	movs	r3, #210	; 0xd2
    a6f6:	52d1      	strh	r1, [r2, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
    a6f8:	4bba      	ldr	r3, [pc, #744]	; (a9e4 <LoRaMacInitialization+0x794>)
    a6fa:	4abb      	ldr	r2, [pc, #748]	; (a9e8 <LoRaMacInitialization+0x798>)
    a6fc:	589b      	ldr	r3, [r3, r2]
    a6fe:	2224      	movs	r2, #36	; 0x24
    a700:	2101      	movs	r1, #1
    a702:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    a704:	4bb7      	ldr	r3, [pc, #732]	; (a9e4 <LoRaMacInitialization+0x794>)
    a706:	4ab8      	ldr	r2, [pc, #736]	; (a9e8 <LoRaMacInitialization+0x798>)
    a708:	589b      	ldr	r3, [r3, r2]
    a70a:	220a      	movs	r2, #10
    a70c:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
    a70e:	4bb5      	ldr	r3, [pc, #724]	; (a9e4 <LoRaMacInitialization+0x794>)
    a710:	4ab5      	ldr	r2, [pc, #724]	; (a9e8 <LoRaMacInitialization+0x798>)
    a712:	589b      	ldr	r3, [r3, r2]
    a714:	2206      	movs	r2, #6
    a716:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    a718:	4bb2      	ldr	r3, [pc, #712]	; (a9e4 <LoRaMacInitialization+0x794>)
    a71a:	4ab3      	ldr	r2, [pc, #716]	; (a9e8 <LoRaMacInitialization+0x798>)
    a71c:	589a      	ldr	r2, [r3, r2]
    a71e:	4bb1      	ldr	r3, [pc, #708]	; (a9e4 <LoRaMacInitialization+0x794>)
    a720:	49b1      	ldr	r1, [pc, #708]	; (a9e8 <LoRaMacInitialization+0x798>)
    a722:	585b      	ldr	r3, [r3, r1]
    a724:	689b      	ldr	r3, [r3, #8]
    a726:	21d8      	movs	r1, #216	; 0xd8
    a728:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    a72a:	4bae      	ldr	r3, [pc, #696]	; (a9e4 <LoRaMacInitialization+0x794>)
    a72c:	4aae      	ldr	r2, [pc, #696]	; (a9e8 <LoRaMacInitialization+0x798>)
    a72e:	589b      	ldr	r3, [r3, r2]
    a730:	4aac      	ldr	r2, [pc, #688]	; (a9e4 <LoRaMacInitialization+0x794>)
    a732:	49ad      	ldr	r1, [pc, #692]	; (a9e8 <LoRaMacInitialization+0x798>)
    a734:	5852      	ldr	r2, [r2, r1]
    a736:	7b11      	ldrb	r1, [r2, #12]
    a738:	22dc      	movs	r2, #220	; 0xdc
    a73a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
    a73c:	4ba9      	ldr	r3, [pc, #676]	; (a9e4 <LoRaMacInitialization+0x794>)
    a73e:	4aaa      	ldr	r2, [pc, #680]	; (a9e8 <LoRaMacInitialization+0x798>)
    a740:	589a      	ldr	r2, [r3, r2]
    a742:	4ba8      	ldr	r3, [pc, #672]	; (a9e4 <LoRaMacInitialization+0x794>)
    a744:	49a8      	ldr	r1, [pc, #672]	; (a9e8 <LoRaMacInitialization+0x798>)
    a746:	585b      	ldr	r3, [r3, r1]
    a748:	691b      	ldr	r3, [r3, #16]
    a74a:	21e0      	movs	r1, #224	; 0xe0
    a74c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
    a74e:	4ba5      	ldr	r3, [pc, #660]	; (a9e4 <LoRaMacInitialization+0x794>)
    a750:	4aa5      	ldr	r2, [pc, #660]	; (a9e8 <LoRaMacInitialization+0x798>)
    a752:	589a      	ldr	r2, [r3, r2]
    a754:	4ba3      	ldr	r3, [pc, #652]	; (a9e4 <LoRaMacInitialization+0x794>)
    a756:	49a4      	ldr	r1, [pc, #656]	; (a9e8 <LoRaMacInitialization+0x798>)
    a758:	585b      	ldr	r3, [r3, r1]
    a75a:	695b      	ldr	r3, [r3, #20]
    a75c:	21e4      	movs	r1, #228	; 0xe4
    a75e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
    a760:	4ba0      	ldr	r3, [pc, #640]	; (a9e4 <LoRaMacInitialization+0x794>)
    a762:	4aa1      	ldr	r2, [pc, #644]	; (a9e8 <LoRaMacInitialization+0x798>)
    a764:	589a      	ldr	r2, [r3, r2]
    a766:	4b9f      	ldr	r3, [pc, #636]	; (a9e4 <LoRaMacInitialization+0x794>)
    a768:	499f      	ldr	r1, [pc, #636]	; (a9e8 <LoRaMacInitialization+0x798>)
    a76a:	585b      	ldr	r3, [r3, r1]
    a76c:	699b      	ldr	r3, [r3, #24]
    a76e:	21e8      	movs	r1, #232	; 0xe8
    a770:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    a772:	4b9c      	ldr	r3, [pc, #624]	; (a9e4 <LoRaMacInitialization+0x794>)
    a774:	4a9c      	ldr	r2, [pc, #624]	; (a9e8 <LoRaMacInitialization+0x798>)
    a776:	589a      	ldr	r2, [r3, r2]
    a778:	4b9a      	ldr	r3, [pc, #616]	; (a9e4 <LoRaMacInitialization+0x794>)
    a77a:	499b      	ldr	r1, [pc, #620]	; (a9e8 <LoRaMacInitialization+0x798>)
    a77c:	585b      	ldr	r3, [r3, r1]
    a77e:	69db      	ldr	r3, [r3, #28]
    a780:	21ec      	movs	r1, #236	; 0xec
    a782:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    a784:	4b97      	ldr	r3, [pc, #604]	; (a9e4 <LoRaMacInitialization+0x794>)
    a786:	4a98      	ldr	r2, [pc, #608]	; (a9e8 <LoRaMacInitialization+0x798>)
    a788:	589a      	ldr	r2, [r3, r2]
    a78a:	4b96      	ldr	r3, [pc, #600]	; (a9e4 <LoRaMacInitialization+0x794>)
    a78c:	4996      	ldr	r1, [pc, #600]	; (a9e8 <LoRaMacInitialization+0x798>)
    a78e:	585b      	ldr	r3, [r3, r1]
    a790:	6a1b      	ldr	r3, [r3, #32]
    a792:	21f0      	movs	r1, #240	; 0xf0
    a794:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
    a796:	4b93      	ldr	r3, [pc, #588]	; (a9e4 <LoRaMacInitialization+0x794>)
    a798:	4a93      	ldr	r2, [pc, #588]	; (a9e8 <LoRaMacInitialization+0x798>)
    a79a:	589b      	ldr	r3, [r3, r2]
    a79c:	4a91      	ldr	r2, [pc, #580]	; (a9e4 <LoRaMacInitialization+0x794>)
    a79e:	4992      	ldr	r1, [pc, #584]	; (a9e8 <LoRaMacInitialization+0x798>)
    a7a0:	5852      	ldr	r2, [r2, r1]
    a7a2:	2124      	movs	r1, #36	; 0x24
    a7a4:	5c51      	ldrb	r1, [r2, r1]
    a7a6:	22f4      	movs	r2, #244	; 0xf4
    a7a8:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
    a7aa:	4b90      	ldr	r3, [pc, #576]	; (a9ec <LoRaMacInitialization+0x79c>)
    a7ac:	4798      	blx	r3

    MacCtx.NvmCtx->PublicNetwork = true;
    a7ae:	4b8d      	ldr	r3, [pc, #564]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7b0:	4a8d      	ldr	r2, [pc, #564]	; (a9e8 <LoRaMacInitialization+0x798>)
    a7b2:	589b      	ldr	r3, [r3, r2]
    a7b4:	22c9      	movs	r2, #201	; 0xc9
    a7b6:	2101      	movs	r1, #1
    a7b8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
    a7ba:	4a8a      	ldr	r2, [pc, #552]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7bc:	23d8      	movs	r3, #216	; 0xd8
    a7be:	009b      	lsls	r3, r3, #2
    a7c0:	6979      	ldr	r1, [r7, #20]
    a7c2:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
    a7c4:	4a87      	ldr	r2, [pc, #540]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7c6:	23d9      	movs	r3, #217	; 0xd9
    a7c8:	009b      	lsls	r3, r3, #2
    a7ca:	6939      	ldr	r1, [r7, #16]
    a7cc:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
    a7ce:	4b85      	ldr	r3, [pc, #532]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7d0:	4a87      	ldr	r2, [pc, #540]	; (a9f0 <LoRaMacInitialization+0x7a0>)
    a7d2:	2100      	movs	r1, #0
    a7d4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
    a7d6:	4a83      	ldr	r2, [pc, #524]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7d8:	23d7      	movs	r3, #215	; 0xd7
    a7da:	009b      	lsls	r3, r3, #2
    a7dc:	2101      	movs	r1, #1
    a7de:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
    a7e0:	4a80      	ldr	r2, [pc, #512]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7e2:	23d0      	movs	r3, #208	; 0xd0
    a7e4:	009b      	lsls	r3, r3, #2
    a7e6:	2100      	movs	r1, #0
    a7e8:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
    a7ea:	4a7e      	ldr	r2, [pc, #504]	; (a9e4 <LoRaMacInitialization+0x794>)
    a7ec:	23d1      	movs	r3, #209	; 0xd1
    a7ee:	009b      	lsls	r3, r3, #2
    a7f0:	2100      	movs	r1, #0
    a7f2:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
    a7f4:	4a7f      	ldr	r2, [pc, #508]	; (a9f4 <LoRaMacInitialization+0x7a4>)
    a7f6:	4b80      	ldr	r3, [pc, #512]	; (a9f8 <LoRaMacInitialization+0x7a8>)
    a7f8:	0011      	movs	r1, r2
    a7fa:	0018      	movs	r0, r3
    a7fc:	4b7f      	ldr	r3, [pc, #508]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a7fe:	4798      	blx	r3
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
    a800:	4a7f      	ldr	r2, [pc, #508]	; (aa00 <LoRaMacInitialization+0x7b0>)
    a802:	4b80      	ldr	r3, [pc, #512]	; (aa04 <LoRaMacInitialization+0x7b4>)
    a804:	0011      	movs	r1, r2
    a806:	0018      	movs	r0, r3
    a808:	4b7c      	ldr	r3, [pc, #496]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a80a:	4798      	blx	r3
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
    a80c:	4a7e      	ldr	r2, [pc, #504]	; (aa08 <LoRaMacInitialization+0x7b8>)
    a80e:	4b7f      	ldr	r3, [pc, #508]	; (aa0c <LoRaMacInitialization+0x7bc>)
    a810:	0011      	movs	r1, r2
    a812:	0018      	movs	r0, r3
    a814:	4b79      	ldr	r3, [pc, #484]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a816:	4798      	blx	r3
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
    a818:	4a7d      	ldr	r2, [pc, #500]	; (aa10 <LoRaMacInitialization+0x7c0>)
    a81a:	4b7e      	ldr	r3, [pc, #504]	; (aa14 <LoRaMacInitialization+0x7c4>)
    a81c:	0011      	movs	r1, r2
    a81e:	0018      	movs	r0, r3
    a820:	4b76      	ldr	r3, [pc, #472]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a822:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
    a824:	4a7c      	ldr	r2, [pc, #496]	; (aa18 <LoRaMacInitialization+0x7c8>)
    a826:	4b7d      	ldr	r3, [pc, #500]	; (aa1c <LoRaMacInitialization+0x7cc>)
    a828:	0011      	movs	r1, r2
    a82a:	0018      	movs	r0, r3
    a82c:	4b73      	ldr	r3, [pc, #460]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a82e:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    a830:	4a7b      	ldr	r2, [pc, #492]	; (aa20 <LoRaMacInitialization+0x7d0>)
    a832:	4b7c      	ldr	r3, [pc, #496]	; (aa24 <LoRaMacInitialization+0x7d4>)
    a834:	0011      	movs	r1, r2
    a836:	0018      	movs	r0, r3
    a838:	4b70      	ldr	r3, [pc, #448]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a83a:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
    a83c:	4a7a      	ldr	r2, [pc, #488]	; (aa28 <LoRaMacInitialization+0x7d8>)
    a83e:	4b7b      	ldr	r3, [pc, #492]	; (aa2c <LoRaMacInitialization+0x7dc>)
    a840:	0011      	movs	r1, r2
    a842:	0018      	movs	r0, r3
    a844:	4b6d      	ldr	r3, [pc, #436]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a846:	4798      	blx	r3
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
    a848:	4a79      	ldr	r2, [pc, #484]	; (aa30 <LoRaMacInitialization+0x7e0>)
    a84a:	4b7a      	ldr	r3, [pc, #488]	; (aa34 <LoRaMacInitialization+0x7e4>)
    a84c:	0011      	movs	r1, r2
    a84e:	0018      	movs	r0, r3
    a850:	4b6a      	ldr	r3, [pc, #424]	; (a9fc <LoRaMacInitialization+0x7ac>)
    a852:	4798      	blx	r3

    // Store the current initialization time
    MacCtx.InitializationTime = SysTimeGetMcuTime( );
    a854:	4d63      	ldr	r5, [pc, #396]	; (a9e4 <LoRaMacInitialization+0x794>)
    a856:	23d3      	movs	r3, #211	; 0xd3
    a858:	009c      	lsls	r4, r3, #2
    a85a:	003b      	movs	r3, r7
    a85c:	0018      	movs	r0, r3
    a85e:	4b76      	ldr	r3, [pc, #472]	; (aa38 <LoRaMacInitialization+0x7e8>)
    a860:	4798      	blx	r3
    a862:	003a      	movs	r2, r7
    a864:	192b      	adds	r3, r5, r4
    a866:	ca03      	ldmia	r2!, {r0, r1}
    a868:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
    a86a:	4a5e      	ldr	r2, [pc, #376]	; (a9e4 <LoRaMacInitialization+0x794>)
    a86c:	23da      	movs	r3, #218	; 0xda
    a86e:	009b      	lsls	r3, r3, #2
    a870:	4972      	ldr	r1, [pc, #456]	; (aa3c <LoRaMacInitialization+0x7ec>)
    a872:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
    a874:	4a5b      	ldr	r2, [pc, #364]	; (a9e4 <LoRaMacInitialization+0x794>)
    a876:	23dc      	movs	r3, #220	; 0xdc
    a878:	009b      	lsls	r3, r3, #2
    a87a:	4971      	ldr	r1, [pc, #452]	; (aa40 <LoRaMacInitialization+0x7f0>)
    a87c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
    a87e:	4a59      	ldr	r2, [pc, #356]	; (a9e4 <LoRaMacInitialization+0x794>)
    a880:	23de      	movs	r3, #222	; 0xde
    a882:	009b      	lsls	r3, r3, #2
    a884:	496f      	ldr	r1, [pc, #444]	; (aa44 <LoRaMacInitialization+0x7f4>)
    a886:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    a888:	4a56      	ldr	r2, [pc, #344]	; (a9e4 <LoRaMacInitialization+0x794>)
    a88a:	23db      	movs	r3, #219	; 0xdb
    a88c:	009b      	lsls	r3, r3, #2
    a88e:	496e      	ldr	r1, [pc, #440]	; (aa48 <LoRaMacInitialization+0x7f8>)
    a890:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    a892:	4a54      	ldr	r2, [pc, #336]	; (a9e4 <LoRaMacInitialization+0x794>)
    a894:	23dd      	movs	r3, #221	; 0xdd
    a896:	009b      	lsls	r3, r3, #2
    a898:	496c      	ldr	r1, [pc, #432]	; (aa4c <LoRaMacInitialization+0x7fc>)
    a89a:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
    a89c:	4b6c      	ldr	r3, [pc, #432]	; (aa50 <LoRaMacInitialization+0x800>)
    a89e:	681b      	ldr	r3, [r3, #0]
    a8a0:	4a6c      	ldr	r2, [pc, #432]	; (aa54 <LoRaMacInitialization+0x804>)
    a8a2:	0010      	movs	r0, r2
    a8a4:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    a8a6:	231c      	movs	r3, #28
    a8a8:	18fb      	adds	r3, r7, r3
    a8aa:	2200      	movs	r2, #0
    a8ac:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
    a8ae:	231c      	movs	r3, #28
    a8b0:	18fb      	adds	r3, r7, r3
    a8b2:	2200      	movs	r2, #0
    a8b4:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    a8b6:	4b4b      	ldr	r3, [pc, #300]	; (a9e4 <LoRaMacInitialization+0x794>)
    a8b8:	4a4b      	ldr	r2, [pc, #300]	; (a9e8 <LoRaMacInitialization+0x798>)
    a8ba:	589b      	ldr	r3, [r3, r2]
    a8bc:	781b      	ldrb	r3, [r3, #0]
    a8be:	221c      	movs	r2, #28
    a8c0:	18ba      	adds	r2, r7, r2
    a8c2:	0011      	movs	r1, r2
    a8c4:	0018      	movs	r0, r3
    a8c6:	4b64      	ldr	r3, [pc, #400]	; (aa58 <LoRaMacInitialization+0x808>)
    a8c8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
    a8ca:	4b64      	ldr	r3, [pc, #400]	; (aa5c <LoRaMacInitialization+0x80c>)
    a8cc:	0018      	movs	r0, r3
    a8ce:	4b64      	ldr	r3, [pc, #400]	; (aa60 <LoRaMacInitialization+0x810>)
    a8d0:	4798      	blx	r3
    a8d2:	1e03      	subs	r3, r0, #0
    a8d4:	d001      	beq.n	a8da <LoRaMacInitialization+0x68a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    a8d6:	2311      	movs	r3, #17
    a8d8:	e07e      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
    a8da:	4b62      	ldr	r3, [pc, #392]	; (aa64 <LoRaMacInitialization+0x814>)
    a8dc:	0018      	movs	r0, r3
    a8de:	4b62      	ldr	r3, [pc, #392]	; (aa68 <LoRaMacInitialization+0x818>)
    a8e0:	4798      	blx	r3
    a8e2:	1e03      	subs	r3, r0, #0
    a8e4:	d001      	beq.n	a8ea <LoRaMacInitialization+0x69a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    a8e6:	2311      	movs	r3, #17
    a8e8:	e076      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
    a8ea:	4b60      	ldr	r3, [pc, #384]	; (aa6c <LoRaMacInitialization+0x81c>)
    a8ec:	0018      	movs	r0, r3
    a8ee:	4b60      	ldr	r3, [pc, #384]	; (aa70 <LoRaMacInitialization+0x820>)
    a8f0:	4798      	blx	r3
    a8f2:	1e03      	subs	r3, r0, #0
    a8f4:	d001      	beq.n	a8fa <LoRaMacInitialization+0x6aa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    a8f6:	2313      	movs	r3, #19
    a8f8:	e06e      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    a8fa:	4b5e      	ldr	r3, [pc, #376]	; (aa74 <LoRaMacInitialization+0x824>)
    a8fc:	0018      	movs	r0, r3
    a8fe:	4b5e      	ldr	r3, [pc, #376]	; (aa78 <LoRaMacInitialization+0x828>)
    a900:	4798      	blx	r3
    a902:	1e03      	subs	r3, r0, #0
    a904:	d001      	beq.n	a90a <LoRaMacInitialization+0x6ba>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    a906:	2312      	movs	r3, #18
    a908:	e066      	b.n	a9d8 <LoRaMacInitialization+0x788>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
    a90a:	4b36      	ldr	r3, [pc, #216]	; (a9e4 <LoRaMacInitialization+0x794>)
    a90c:	4a36      	ldr	r2, [pc, #216]	; (a9e8 <LoRaMacInitialization+0x798>)
    a90e:	589b      	ldr	r3, [r3, r2]
    a910:	3348      	adds	r3, #72	; 0x48
    a912:	0018      	movs	r0, r3
    a914:	4b59      	ldr	r3, [pc, #356]	; (aa7c <LoRaMacInitialization+0x82c>)
    a916:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
    a918:	4b4d      	ldr	r3, [pc, #308]	; (aa50 <LoRaMacInitialization+0x800>)
    a91a:	695b      	ldr	r3, [r3, #20]
    a91c:	4798      	blx	r3
    a91e:	0003      	movs	r3, r0
    a920:	0018      	movs	r0, r3
    a922:	4b57      	ldr	r3, [pc, #348]	; (aa80 <LoRaMacInitialization+0x830>)
    a924:	4798      	blx	r3

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    a926:	4b4a      	ldr	r3, [pc, #296]	; (aa50 <LoRaMacInitialization+0x800>)
    a928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a92a:	4a2e      	ldr	r2, [pc, #184]	; (a9e4 <LoRaMacInitialization+0x794>)
    a92c:	492e      	ldr	r1, [pc, #184]	; (a9e8 <LoRaMacInitialization+0x798>)
    a92e:	5852      	ldr	r2, [r2, r1]
    a930:	21c9      	movs	r1, #201	; 0xc9
    a932:	5c52      	ldrb	r2, [r2, r1]
    a934:	0010      	movs	r0, r2
    a936:	4798      	blx	r3
    Radio.Sleep( );
    a938:	4b45      	ldr	r3, [pc, #276]	; (aa50 <LoRaMacInitialization+0x800>)
    a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a93c:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    a93e:	2348      	movs	r3, #72	; 0x48
    a940:	18fb      	adds	r3, r7, r3
    a942:	2200      	movs	r2, #0
    a944:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
    a946:	2348      	movs	r3, #72	; 0x48
    a948:	18fb      	adds	r3, r7, r3
    a94a:	2200      	movs	r2, #0
    a94c:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
    a94e:	693b      	ldr	r3, [r7, #16]
    a950:	2b00      	cmp	r3, #0
    a952:	d009      	beq.n	a968 <LoRaMacInitialization+0x718>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
    a954:	693b      	ldr	r3, [r7, #16]
    a956:	685a      	ldr	r2, [r3, #4]
    a958:	2348      	movs	r3, #72	; 0x48
    a95a:	18fb      	adds	r3, r7, r3
    a95c:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
    a95e:	693b      	ldr	r3, [r7, #16]
    a960:	68da      	ldr	r2, [r3, #12]
    a962:	2348      	movs	r3, #72	; 0x48
    a964:	18fb      	adds	r3, r7, r3
    a966:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
    a968:	2328      	movs	r3, #40	; 0x28
    a96a:	18fb      	adds	r3, r7, r3
    a96c:	4a45      	ldr	r2, [pc, #276]	; (aa84 <LoRaMacInitialization+0x834>)
    a96e:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
    a970:	2328      	movs	r3, #40	; 0x28
    a972:	18fb      	adds	r3, r7, r3
    a974:	4a44      	ldr	r2, [pc, #272]	; (aa88 <LoRaMacInitialization+0x838>)
    a976:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
    a978:	2328      	movs	r3, #40	; 0x28
    a97a:	18fb      	adds	r3, r7, r3
    a97c:	4a43      	ldr	r2, [pc, #268]	; (aa8c <LoRaMacInitialization+0x83c>)
    a97e:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
    a980:	2328      	movs	r3, #40	; 0x28
    a982:	18fb      	adds	r3, r7, r3
    a984:	4a42      	ldr	r2, [pc, #264]	; (aa90 <LoRaMacInitialization+0x840>)
    a986:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
    a988:	4b16      	ldr	r3, [pc, #88]	; (a9e4 <LoRaMacInitialization+0x794>)
    a98a:	4a17      	ldr	r2, [pc, #92]	; (a9e8 <LoRaMacInitialization+0x798>)
    a98c:	589b      	ldr	r3, [r3, r2]
    a98e:	3344      	adds	r3, #68	; 0x44
    a990:	001a      	movs	r2, r3
    a992:	2328      	movs	r3, #40	; 0x28
    a994:	18fb      	adds	r3, r7, r3
    a996:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
    a998:	4b12      	ldr	r3, [pc, #72]	; (a9e4 <LoRaMacInitialization+0x794>)
    a99a:	4a13      	ldr	r2, [pc, #76]	; (a9e8 <LoRaMacInitialization+0x798>)
    a99c:	589b      	ldr	r3, [r3, r2]
    a99e:	001a      	movs	r2, r3
    a9a0:	2328      	movs	r3, #40	; 0x28
    a9a2:	18fb      	adds	r3, r7, r3
    a9a4:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
    a9a6:	4b0f      	ldr	r3, [pc, #60]	; (a9e4 <LoRaMacInitialization+0x794>)
    a9a8:	4a0f      	ldr	r2, [pc, #60]	; (a9e8 <LoRaMacInitialization+0x798>)
    a9aa:	589b      	ldr	r3, [r3, r2]
    a9ac:	33d4      	adds	r3, #212	; 0xd4
    a9ae:	001a      	movs	r2, r3
    a9b0:	2328      	movs	r3, #40	; 0x28
    a9b2:	18fb      	adds	r3, r7, r3
    a9b4:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
    a9b6:	4b0b      	ldr	r3, [pc, #44]	; (a9e4 <LoRaMacInitialization+0x794>)
    a9b8:	4a0b      	ldr	r2, [pc, #44]	; (a9e8 <LoRaMacInitialization+0x798>)
    a9ba:	589b      	ldr	r3, [r3, r2]
    a9bc:	3348      	adds	r3, #72	; 0x48
    a9be:	001a      	movs	r2, r3
    a9c0:	2328      	movs	r3, #40	; 0x28
    a9c2:	18fb      	adds	r3, r7, r3
    a9c4:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
    a9c6:	4a33      	ldr	r2, [pc, #204]	; (aa94 <LoRaMacInitialization+0x844>)
    a9c8:	2348      	movs	r3, #72	; 0x48
    a9ca:	18f9      	adds	r1, r7, r3
    a9cc:	2328      	movs	r3, #40	; 0x28
    a9ce:	18fb      	adds	r3, r7, r3
    a9d0:	0018      	movs	r0, r3
    a9d2:	4b31      	ldr	r3, [pc, #196]	; (aa98 <LoRaMacInitialization+0x848>)
    a9d4:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
    a9d6:	2300      	movs	r3, #0
}
    a9d8:	0018      	movs	r0, r3
    a9da:	46bd      	mov	sp, r7
    a9dc:	b016      	add	sp, #88	; 0x58
    a9de:	bdb0      	pop	{r4, r5, r7, pc}
    a9e0:	0000fec1 	.word	0x0000fec1
    a9e4:	20000c8c 	.word	0x20000c8c
    a9e8:	000004c4 	.word	0x000004c4
    a9ec:	00009489 	.word	0x00009489
    a9f0:	00000465 	.word	0x00000465
    a9f4:	000073f5 	.word	0x000073f5
    a9f8:	20001010 	.word	0x20001010
    a9fc:	00016d5d 	.word	0x00016d5d
    aa00:	0000748d 	.word	0x0000748d
    aa04:	20001024 	.word	0x20001024
    aa08:	0000757d 	.word	0x0000757d
    aa0c:	20001038 	.word	0x20001038
    aa10:	000076bd 	.word	0x000076bd
    aa14:	2000107c 	.word	0x2000107c
    aa18:	0000c021 	.word	0x0000c021
    aa1c:	200010f4 	.word	0x200010f4
    aa20:	0000c08d 	.word	0x0000c08d
    aa24:	20001108 	.word	0x20001108
    aa28:	0000c0fd 	.word	0x0000c0fd
    aa2c:	2000111c 	.word	0x2000111c
    aa30:	0000c169 	.word	0x0000c169
    aa34:	20001130 	.word	0x20001130
    aa38:	00016d19 	.word	0x00016d19
    aa3c:	00005d3d 	.word	0x00005d3d
    aa40:	00005db1 	.word	0x00005db1
    aa44:	00005e8d 	.word	0x00005e8d
    aa48:	00005e49 	.word	0x00005e49
    aa4c:	00005ed1 	.word	0x00005ed1
    aa50:	0001f2a4 	.word	0x0001f2a4
    aa54:	20000ff4 	.word	0x20000ff4
    aa58:	0000ff41 	.word	0x0000ff41
    aa5c:	0000a1b5 	.word	0x0000a1b5
    aa60:	0001628d 	.word	0x0001628d
    aa64:	0000a1a1 	.word	0x0000a1a1
    aa68:	0000e24d 	.word	0x0000e24d
    aa6c:	0000a1c9 	.word	0x0000a1c9
    aa70:	0000ca89 	.word	0x0000ca89
    aa74:	0000a205 	.word	0x0000a205
    aa78:	0000efa1 	.word	0x0000efa1
    aa7c:	0000f2e5 	.word	0x0000f2e5
    aa80:	000042e9 	.word	0x000042e9
    aa84:	200010d8 	.word	0x200010d8
    aa88:	20001094 	.word	0x20001094
    aa8c:	200010c4 	.word	0x200010c4
    aa90:	200010f1 	.word	0x200010f1
    aa94:	0000a1dd 	.word	0x0000a1dd
    aa98:	0000c659 	.word	0x0000c659

0000aa9c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    aa9c:	b580      	push	{r7, lr}
    aa9e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
    aaa0:	4a04      	ldr	r2, [pc, #16]	; (aab4 <LoRaMacStart+0x18>)
    aaa2:	23d7      	movs	r3, #215	; 0xd7
    aaa4:	009b      	lsls	r3, r3, #2
    aaa6:	2100      	movs	r1, #0
    aaa8:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
    aaaa:	2300      	movs	r3, #0
}
    aaac:	0018      	movs	r0, r3
    aaae:	46bd      	mov	sp, r7
    aab0:	bd80      	pop	{r7, pc}
    aab2:	46c0      	nop			; (mov r8, r8)
    aab4:	20000c8c 	.word	0x20000c8c

0000aab8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
    aab8:	b590      	push	{r4, r7, lr}
    aaba:	b08b      	sub	sp, #44	; 0x2c
    aabc:	af00      	add	r7, sp, #0
    aabe:	0002      	movs	r2, r0
    aac0:	6039      	str	r1, [r7, #0]
    aac2:	1dfb      	adds	r3, r7, #7
    aac4:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    aac6:	4b57      	ldr	r3, [pc, #348]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    aac8:	4a57      	ldr	r2, [pc, #348]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    aaca:	589b      	ldr	r3, [r3, r2]
    aacc:	22cc      	movs	r2, #204	; 0xcc
    aace:	589b      	ldr	r3, [r3, r2]
    aad0:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    aad2:	4b54      	ldr	r3, [pc, #336]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    aad4:	4a54      	ldr	r2, [pc, #336]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    aad6:	589b      	ldr	r3, [r3, r2]
    aad8:	2205      	movs	r2, #5
    aada:	569a      	ldrsb	r2, [r3, r2]
    aadc:	230f      	movs	r3, #15
    aade:	18fb      	adds	r3, r7, r3
    aae0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    aae2:	4b50      	ldr	r3, [pc, #320]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    aae4:	4a50      	ldr	r2, [pc, #320]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    aae6:	589b      	ldr	r3, [r3, r2]
    aae8:	2204      	movs	r2, #4
    aaea:	569a      	ldrsb	r2, [r3, r2]
    aaec:	230e      	movs	r3, #14
    aaee:	18fb      	adds	r3, r7, r3
    aaf0:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
    aaf2:	2300      	movs	r3, #0
    aaf4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
    aaf6:	683b      	ldr	r3, [r7, #0]
    aaf8:	2b00      	cmp	r3, #0
    aafa:	d101      	bne.n	ab00 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    aafc:	2303      	movs	r3, #3
    aafe:	e08c      	b.n	ac1a <LoRaMacQueryTxPossible+0x162>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
    ab00:	4b48      	ldr	r3, [pc, #288]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab02:	4a49      	ldr	r2, [pc, #292]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab04:	5899      	ldr	r1, [r3, r2]
    ab06:	2314      	movs	r3, #20
    ab08:	18fb      	adds	r3, r7, r3
    ab0a:	2287      	movs	r2, #135	; 0x87
    ab0c:	0092      	lsls	r2, r2, #2
    ab0e:	588a      	ldr	r2, [r1, r2]
    ab10:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
    ab12:	2314      	movs	r3, #20
    ab14:	18fb      	adds	r3, r7, r3
    ab16:	2200      	movs	r2, #0
    ab18:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    ab1a:	4b42      	ldr	r3, [pc, #264]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab1c:	4a42      	ldr	r2, [pc, #264]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab1e:	589b      	ldr	r3, [r3, r2]
    ab20:	22ca      	movs	r2, #202	; 0xca
    ab22:	5c9a      	ldrb	r2, [r3, r2]
    ab24:	2314      	movs	r3, #20
    ab26:	18fb      	adds	r3, r7, r3
    ab28:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    ab2a:	4b3e      	ldr	r3, [pc, #248]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab2c:	4a3e      	ldr	r2, [pc, #248]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab2e:	589b      	ldr	r3, [r3, r2]
    ab30:	22cc      	movs	r2, #204	; 0xcc
    ab32:	589a      	ldr	r2, [r3, r2]
    ab34:	2314      	movs	r3, #20
    ab36:	18fb      	adds	r3, r7, r3
    ab38:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    ab3a:	4b3a      	ldr	r3, [pc, #232]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab3c:	4a3a      	ldr	r2, [pc, #232]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab3e:	589b      	ldr	r3, [r3, r2]
    ab40:	22d0      	movs	r2, #208	; 0xd0
    ab42:	5a9a      	ldrh	r2, [r3, r2]
    ab44:	2314      	movs	r3, #20
    ab46:	18fb      	adds	r3, r7, r3
    ab48:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    ab4a:	4b36      	ldr	r3, [pc, #216]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab4c:	4a36      	ldr	r2, [pc, #216]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab4e:	589b      	ldr	r3, [r3, r2]
    ab50:	22d2      	movs	r2, #210	; 0xd2
    ab52:	5a9a      	ldrh	r2, [r3, r2]
    ab54:	2314      	movs	r3, #20
    ab56:	18fb      	adds	r3, r7, r3
    ab58:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    ab5a:	4b32      	ldr	r3, [pc, #200]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab5c:	4a32      	ldr	r2, [pc, #200]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab5e:	589b      	ldr	r3, [r3, r2]
    ab60:	22d5      	movs	r2, #213	; 0xd5
    ab62:	569a      	ldrsb	r2, [r3, r2]
    ab64:	2314      	movs	r3, #20
    ab66:	18fb      	adds	r3, r7, r3
    ab68:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    ab6a:	4b2e      	ldr	r3, [pc, #184]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab6c:	4a2e      	ldr	r2, [pc, #184]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab6e:	589b      	ldr	r3, [r3, r2]
    ab70:	22d4      	movs	r2, #212	; 0xd4
    ab72:	569a      	ldrsb	r2, [r3, r2]
    ab74:	2314      	movs	r3, #20
    ab76:	18fb      	adds	r3, r7, r3
    ab78:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    ab7a:	4b2a      	ldr	r3, [pc, #168]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab7c:	4a2a      	ldr	r2, [pc, #168]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab7e:	589a      	ldr	r2, [r3, r2]
    ab80:	2380      	movs	r3, #128	; 0x80
    ab82:	005b      	lsls	r3, r3, #1
    ab84:	5cd2      	ldrb	r2, [r2, r3]
    ab86:	2314      	movs	r3, #20
    ab88:	18fb      	adds	r3, r7, r3
    ab8a:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    ab8c:	4b25      	ldr	r3, [pc, #148]	; (ac24 <LoRaMacQueryTxPossible+0x16c>)
    ab8e:	4a26      	ldr	r2, [pc, #152]	; (ac28 <LoRaMacQueryTxPossible+0x170>)
    ab90:	589b      	ldr	r3, [r3, r2]
    ab92:	781a      	ldrb	r2, [r3, #0]
    ab94:	2314      	movs	r3, #20
    ab96:	18fb      	adds	r3, r7, r3
    ab98:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
    ab9a:	2310      	movs	r3, #16
    ab9c:	18fb      	adds	r3, r7, r3
    ab9e:	220e      	movs	r2, #14
    aba0:	18ba      	adds	r2, r7, r2
    aba2:	210f      	movs	r1, #15
    aba4:	1879      	adds	r1, r7, r1
    aba6:	2014      	movs	r0, #20
    aba8:	1838      	adds	r0, r7, r0
    abaa:	4c20      	ldr	r4, [pc, #128]	; (ac2c <LoRaMacQueryTxPossible+0x174>)
    abac:	47a0      	blx	r4

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
    abae:	230f      	movs	r3, #15
    abb0:	18fb      	adds	r3, r7, r3
    abb2:	781b      	ldrb	r3, [r3, #0]
    abb4:	b25b      	sxtb	r3, r3
    abb6:	0018      	movs	r0, r3
    abb8:	4b1d      	ldr	r3, [pc, #116]	; (ac30 <LoRaMacQueryTxPossible+0x178>)
    abba:	4798      	blx	r3
    abbc:	0003      	movs	r3, r0
    abbe:	001a      	movs	r2, r3
    abc0:	683b      	ldr	r3, [r7, #0]
    abc2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    abc4:	2308      	movs	r3, #8
    abc6:	18fb      	adds	r3, r7, r3
    abc8:	0018      	movs	r0, r3
    abca:	4b1a      	ldr	r3, [pc, #104]	; (ac34 <LoRaMacQueryTxPossible+0x17c>)
    abcc:	4798      	blx	r3
    abce:	1e03      	subs	r3, r0, #0
    abd0:	d001      	beq.n	abd6 <LoRaMacQueryTxPossible+0x11e>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    abd2:	2313      	movs	r3, #19
    abd4:	e021      	b.n	ac1a <LoRaMacQueryTxPossible+0x162>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
    abd6:	68bb      	ldr	r3, [r7, #8]
    abd8:	2b0f      	cmp	r3, #15
    abda:	d81a      	bhi.n	ac12 <LoRaMacQueryTxPossible+0x15a>
    abdc:	683b      	ldr	r3, [r7, #0]
    abde:	785b      	ldrb	r3, [r3, #1]
    abe0:	001a      	movs	r2, r3
    abe2:	68bb      	ldr	r3, [r7, #8]
    abe4:	429a      	cmp	r2, r3
    abe6:	d314      	bcc.n	ac12 <LoRaMacQueryTxPossible+0x15a>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
    abe8:	683b      	ldr	r3, [r7, #0]
    abea:	785a      	ldrb	r2, [r3, #1]
    abec:	68bb      	ldr	r3, [r7, #8]
    abee:	b2db      	uxtb	r3, r3
    abf0:	1ad3      	subs	r3, r2, r3
    abf2:	b2da      	uxtb	r2, r3
    abf4:	683b      	ldr	r3, [r7, #0]
    abf6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
    abf8:	683b      	ldr	r3, [r7, #0]
    abfa:	785b      	ldrb	r3, [r3, #1]
    abfc:	0019      	movs	r1, r3
    abfe:	1dfb      	adds	r3, r7, #7
    ac00:	781a      	ldrb	r2, [r3, #0]
    ac02:	68bb      	ldr	r3, [r7, #8]
    ac04:	18d3      	adds	r3, r2, r3
    ac06:	4299      	cmp	r1, r3
    ac08:	d301      	bcc.n	ac0e <LoRaMacQueryTxPossible+0x156>
        {
            return LORAMAC_STATUS_OK;
    ac0a:	2300      	movs	r3, #0
    ac0c:	e005      	b.n	ac1a <LoRaMacQueryTxPossible+0x162>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
    ac0e:	2308      	movs	r3, #8
    ac10:	e003      	b.n	ac1a <LoRaMacQueryTxPossible+0x162>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
    ac12:	683b      	ldr	r3, [r7, #0]
    ac14:	2200      	movs	r2, #0
    ac16:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
    ac18:	2308      	movs	r3, #8
    }
}
    ac1a:	0018      	movs	r0, r3
    ac1c:	46bd      	mov	sp, r7
    ac1e:	b00b      	add	sp, #44	; 0x2c
    ac20:	bd90      	pop	{r4, r7, pc}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	20000c8c 	.word	0x20000c8c
    ac28:	000004c4 	.word	0x000004c4
    ac2c:	0000c615 	.word	0x0000c615
    ac30:	000078fd 	.word	0x000078fd
    ac34:	0000cd6d 	.word	0x0000cd6d

0000ac38 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
    ac38:	b590      	push	{r4, r7, lr}
    ac3a:	b087      	sub	sp, #28
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ac40:	2317      	movs	r3, #23
    ac42:	18fb      	adds	r3, r7, r3
    ac44:	2200      	movs	r2, #0
    ac46:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    ac48:	687b      	ldr	r3, [r7, #4]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d101      	bne.n	ac52 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    ac4e:	2303      	movs	r3, #3
    ac50:	e13c      	b.n	aecc <LoRaMacMibGetRequestConfirm+0x294>
    }

    switch( mibGet->Type )
    ac52:	687b      	ldr	r3, [r7, #4]
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	2b33      	cmp	r3, #51	; 0x33
    ac58:	d900      	bls.n	ac5c <LoRaMacMibGetRequestConfirm+0x24>
    ac5a:	e12b      	b.n	aeb4 <LoRaMacMibGetRequestConfirm+0x27c>
    ac5c:	009a      	lsls	r2, r3, #2
    ac5e:	4b9d      	ldr	r3, [pc, #628]	; (aed4 <LoRaMacMibGetRequestConfirm+0x29c>)
    ac60:	18d3      	adds	r3, r2, r3
    ac62:	681b      	ldr	r3, [r3, #0]
    ac64:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
    ac66:	4b9c      	ldr	r3, [pc, #624]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ac68:	4a9c      	ldr	r2, [pc, #624]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ac6a:	589b      	ldr	r3, [r3, r2]
    ac6c:	22c8      	movs	r2, #200	; 0xc8
    ac6e:	5c9a      	ldrb	r2, [r3, r2]
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	711a      	strb	r2, [r3, #4]
            break;
    ac74:	e127      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
    ac76:	4b98      	ldr	r3, [pc, #608]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ac78:	4a98      	ldr	r2, [pc, #608]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ac7a:	589a      	ldr	r2, [r3, r2]
    ac7c:	2388      	movs	r3, #136	; 0x88
    ac7e:	009b      	lsls	r3, r3, #2
    ac80:	5cd2      	ldrb	r2, [r2, r3]
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	711a      	strb	r2, [r3, #4]
            break;
    ac86:	e11e      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
    ac88:	4b93      	ldr	r3, [pc, #588]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ac8a:	4a94      	ldr	r2, [pc, #592]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ac8c:	589b      	ldr	r3, [r3, r2]
    ac8e:	22ca      	movs	r2, #202	; 0xca
    ac90:	5c9a      	ldrb	r2, [r3, r2]
    ac92:	687b      	ldr	r3, [r7, #4]
    ac94:	711a      	strb	r2, [r3, #4]
            break;
    ac96:	e116      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
    ac98:	4b8f      	ldr	r3, [pc, #572]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ac9a:	4a90      	ldr	r2, [pc, #576]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ac9c:	589b      	ldr	r3, [r3, r2]
    ac9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	605a      	str	r2, [r3, #4]
            break;
    aca4:	e10f      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
    aca6:	4b8c      	ldr	r3, [pc, #560]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    aca8:	4a8c      	ldr	r2, [pc, #560]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    acaa:	589b      	ldr	r3, [r3, r2]
    acac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    acae:	687b      	ldr	r3, [r7, #4]
    acb0:	605a      	str	r2, [r3, #4]
            break;
    acb2:	e108      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
    acb4:	4b88      	ldr	r3, [pc, #544]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    acb6:	4a89      	ldr	r2, [pc, #548]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    acb8:	589b      	ldr	r3, [r3, r2]
    acba:	22c9      	movs	r2, #201	; 0xc9
    acbc:	5c9a      	ldrb	r2, [r3, r2]
    acbe:	687b      	ldr	r3, [r7, #4]
    acc0:	711a      	strb	r2, [r3, #4]
            break;
    acc2:	e100      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    acc4:	4b84      	ldr	r3, [pc, #528]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    acc6:	4a85      	ldr	r2, [pc, #532]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    acc8:	589a      	ldr	r2, [r3, r2]
    acca:	2316      	movs	r3, #22
    accc:	33ff      	adds	r3, #255	; 0xff
    acce:	5cd2      	ldrb	r2, [r2, r3]
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	711a      	strb	r2, [r3, #4]
            break;
    acd4:	e0f7      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
    acd6:	2310      	movs	r3, #16
    acd8:	18fb      	adds	r3, r7, r3
    acda:	221c      	movs	r2, #28
    acdc:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    acde:	4b7e      	ldr	r3, [pc, #504]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ace0:	4a7e      	ldr	r2, [pc, #504]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ace2:	589b      	ldr	r3, [r3, r2]
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2210      	movs	r2, #16
    ace8:	18ba      	adds	r2, r7, r2
    acea:	0011      	movs	r1, r2
    acec:	0018      	movs	r0, r3
    acee:	4b7c      	ldr	r3, [pc, #496]	; (aee0 <LoRaMacMibGetRequestConfirm+0x2a8>)
    acf0:	4798      	blx	r3
    acf2:	0003      	movs	r3, r0
    acf4:	001a      	movs	r2, r3
    acf6:	230c      	movs	r3, #12
    acf8:	18fb      	adds	r3, r7, r3
    acfa:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
    acfc:	230c      	movs	r3, #12
    acfe:	18fb      	adds	r3, r7, r3
    ad00:	681a      	ldr	r2, [r3, #0]
    ad02:	687b      	ldr	r3, [r7, #4]
    ad04:	605a      	str	r2, [r3, #4]
            break;
    ad06:	e0de      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
    ad08:	4b73      	ldr	r3, [pc, #460]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ad0a:	4a74      	ldr	r2, [pc, #464]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ad0c:	589a      	ldr	r2, [r3, r2]
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	21f8      	movs	r1, #248	; 0xf8
    ad12:	3304      	adds	r3, #4
    ad14:	1852      	adds	r2, r2, r1
    ad16:	ca03      	ldmia	r2!, {r0, r1}
    ad18:	c303      	stmia	r3!, {r0, r1}
            break;
    ad1a:	e0d4      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    ad1c:	4b6e      	ldr	r3, [pc, #440]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ad1e:	4a6f      	ldr	r2, [pc, #444]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ad20:	589a      	ldr	r2, [r3, r2]
    ad22:	687b      	ldr	r3, [r7, #4]
    ad24:	3304      	adds	r3, #4
    ad26:	3228      	adds	r2, #40	; 0x28
    ad28:	ca03      	ldmia	r2!, {r0, r1}
    ad2a:	c303      	stmia	r3!, {r0, r1}
            break;
    ad2c:	e0cb      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
    ad2e:	2310      	movs	r3, #16
    ad30:	18fb      	adds	r3, r7, r3
    ad32:	221a      	movs	r2, #26
    ad34:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    ad36:	4b68      	ldr	r3, [pc, #416]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ad38:	4a68      	ldr	r2, [pc, #416]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ad3a:	589b      	ldr	r3, [r3, r2]
    ad3c:	781b      	ldrb	r3, [r3, #0]
    ad3e:	2210      	movs	r2, #16
    ad40:	18ba      	adds	r2, r7, r2
    ad42:	0011      	movs	r1, r2
    ad44:	0018      	movs	r0, r3
    ad46:	4b66      	ldr	r3, [pc, #408]	; (aee0 <LoRaMacMibGetRequestConfirm+0x2a8>)
    ad48:	4798      	blx	r3
    ad4a:	0003      	movs	r3, r0
    ad4c:	001a      	movs	r2, r3
    ad4e:	230c      	movs	r3, #12
    ad50:	18fb      	adds	r3, r7, r3
    ad52:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
    ad54:	230c      	movs	r3, #12
    ad56:	18fb      	adds	r3, r7, r3
    ad58:	681a      	ldr	r2, [r3, #0]
    ad5a:	687b      	ldr	r3, [r7, #4]
    ad5c:	605a      	str	r2, [r3, #4]
            break;
    ad5e:	e0b2      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
    ad60:	2310      	movs	r3, #16
    ad62:	18fb      	adds	r3, r7, r3
    ad64:	2219      	movs	r2, #25
    ad66:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    ad68:	4b5b      	ldr	r3, [pc, #364]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ad6a:	4a5c      	ldr	r2, [pc, #368]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ad6c:	589b      	ldr	r3, [r3, r2]
    ad6e:	781b      	ldrb	r3, [r3, #0]
    ad70:	2210      	movs	r2, #16
    ad72:	18ba      	adds	r2, r7, r2
    ad74:	0011      	movs	r1, r2
    ad76:	0018      	movs	r0, r3
    ad78:	4b59      	ldr	r3, [pc, #356]	; (aee0 <LoRaMacMibGetRequestConfirm+0x2a8>)
    ad7a:	4798      	blx	r3
    ad7c:	0003      	movs	r3, r0
    ad7e:	001a      	movs	r2, r3
    ad80:	230c      	movs	r3, #12
    ad82:	18fb      	adds	r3, r7, r3
    ad84:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
    ad86:	230c      	movs	r3, #12
    ad88:	18fb      	adds	r3, r7, r3
    ad8a:	681a      	ldr	r2, [r3, #0]
    ad8c:	687b      	ldr	r3, [r7, #4]
    ad8e:	605a      	str	r2, [r3, #4]
            break;
    ad90:	e099      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    ad92:	4b51      	ldr	r3, [pc, #324]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ad94:	4a51      	ldr	r2, [pc, #324]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ad96:	589b      	ldr	r3, [r3, r2]
    ad98:	22f4      	movs	r2, #244	; 0xf4
    ad9a:	5c9a      	ldrb	r2, [r3, r2]
    ad9c:	687b      	ldr	r3, [r7, #4]
    ad9e:	711a      	strb	r2, [r3, #4]
            break;
    ada0:	e091      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
    ada2:	4b4d      	ldr	r3, [pc, #308]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ada4:	4a4d      	ldr	r2, [pc, #308]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ada6:	589b      	ldr	r3, [r3, r2]
    ada8:	22e0      	movs	r2, #224	; 0xe0
    adaa:	589a      	ldr	r2, [r3, r2]
    adac:	687b      	ldr	r3, [r7, #4]
    adae:	605a      	str	r2, [r3, #4]
            break;
    adb0:	e089      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
    adb2:	4b49      	ldr	r3, [pc, #292]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    adb4:	4a49      	ldr	r2, [pc, #292]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    adb6:	589b      	ldr	r3, [r3, r2]
    adb8:	22e4      	movs	r2, #228	; 0xe4
    adba:	589a      	ldr	r2, [r3, r2]
    adbc:	687b      	ldr	r3, [r7, #4]
    adbe:	605a      	str	r2, [r3, #4]
            break;
    adc0:	e081      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
    adc2:	4b45      	ldr	r3, [pc, #276]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    adc4:	4a45      	ldr	r2, [pc, #276]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    adc6:	589b      	ldr	r3, [r3, r2]
    adc8:	22e8      	movs	r2, #232	; 0xe8
    adca:	589a      	ldr	r2, [r3, r2]
    adcc:	687b      	ldr	r3, [r7, #4]
    adce:	605a      	str	r2, [r3, #4]
            break;
    add0:	e079      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
    add2:	4b41      	ldr	r3, [pc, #260]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    add4:	4a41      	ldr	r2, [pc, #260]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    add6:	589b      	ldr	r3, [r3, r2]
    add8:	22ec      	movs	r2, #236	; 0xec
    adda:	589a      	ldr	r2, [r3, r2]
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	605a      	str	r2, [r3, #4]
            break;
    ade0:	e071      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
    ade2:	4b3d      	ldr	r3, [pc, #244]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ade4:	4a3d      	ldr	r2, [pc, #244]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ade6:	589b      	ldr	r3, [r3, r2]
    ade8:	22f0      	movs	r2, #240	; 0xf0
    adea:	589a      	ldr	r2, [r3, r2]
    adec:	687b      	ldr	r3, [r7, #4]
    adee:	605a      	str	r2, [r3, #4]
            break;
    adf0:	e069      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    adf2:	4b39      	ldr	r3, [pc, #228]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    adf4:	4a39      	ldr	r2, [pc, #228]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    adf6:	589b      	ldr	r3, [r3, r2]
    adf8:	2205      	movs	r2, #5
    adfa:	569a      	ldrsb	r2, [r3, r2]
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	711a      	strb	r2, [r3, #4]
            break;
    ae00:	e061      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    ae02:	4b35      	ldr	r3, [pc, #212]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae04:	4a35      	ldr	r2, [pc, #212]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae06:	589b      	ldr	r3, [r3, r2]
    ae08:	22d5      	movs	r2, #213	; 0xd5
    ae0a:	569a      	ldrsb	r2, [r3, r2]
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	711a      	strb	r2, [r3, #4]
            break;
    ae10:	e059      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    ae12:	4b31      	ldr	r3, [pc, #196]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae14:	4a31      	ldr	r2, [pc, #196]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae16:	589b      	ldr	r3, [r3, r2]
    ae18:	2204      	movs	r2, #4
    ae1a:	569a      	ldrsb	r2, [r3, r2]
    ae1c:	687b      	ldr	r3, [r7, #4]
    ae1e:	711a      	strb	r2, [r3, #4]
            break;
    ae20:	e051      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    ae22:	4b2d      	ldr	r3, [pc, #180]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae24:	4a2d      	ldr	r2, [pc, #180]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae26:	589b      	ldr	r3, [r3, r2]
    ae28:	22d4      	movs	r2, #212	; 0xd4
    ae2a:	569a      	ldrsb	r2, [r3, r2]
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	711a      	strb	r2, [r3, #4]
            break;
    ae30:	e049      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
    ae32:	4b29      	ldr	r3, [pc, #164]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae34:	4a29      	ldr	r2, [pc, #164]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae36:	589b      	ldr	r3, [r3, r2]
    ae38:	22d8      	movs	r2, #216	; 0xd8
    ae3a:	589a      	ldr	r2, [r3, r2]
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	605a      	str	r2, [r3, #4]
            break;
    ae40:	e041      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
    ae42:	4b25      	ldr	r3, [pc, #148]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae44:	4a25      	ldr	r2, [pc, #148]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae46:	589b      	ldr	r3, [r3, r2]
    ae48:	22dc      	movs	r2, #220	; 0xdc
    ae4a:	5c9a      	ldrb	r2, [r3, r2]
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	711a      	strb	r2, [r3, #4]
            break;
    ae50:	e039      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    ae52:	4b21      	ldr	r3, [pc, #132]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae54:	4a21      	ldr	r2, [pc, #132]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae56:	589a      	ldr	r2, [r3, r2]
    ae58:	2384      	movs	r3, #132	; 0x84
    ae5a:	005b      	lsls	r3, r3, #1
    ae5c:	58d2      	ldr	r2, [r2, r3]
    ae5e:	687b      	ldr	r3, [r7, #4]
    ae60:	605a      	str	r2, [r3, #4]
            break;
    ae62:	e030      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
    ae64:	4b1f      	ldr	r3, [pc, #124]	; (aee4 <LoRaMacMibGetRequestConfirm+0x2ac>)
    ae66:	4798      	blx	r3
    ae68:	0002      	movs	r2, r0
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	605a      	str	r2, [r3, #4]
            break;
    ae6e:	e02a      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    ae70:	4b19      	ldr	r3, [pc, #100]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae72:	4a1a      	ldr	r2, [pc, #104]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae74:	589b      	ldr	r3, [r3, r2]
    ae76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	605a      	str	r2, [r3, #4]
            break;
    ae7c:	e023      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_REJOIN_0_CYCLE:
        {
            mibGet->Param.Rejoin0CycleInSec = MacCtx.NvmCtx->Rejoin0CycleInSec;
    ae7e:	4b16      	ldr	r3, [pc, #88]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae80:	4a16      	ldr	r2, [pc, #88]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae82:	589a      	ldr	r2, [r3, r2]
    ae84:	238b      	movs	r3, #139	; 0x8b
    ae86:	009b      	lsls	r3, r3, #2
    ae88:	58d2      	ldr	r2, [r2, r3]
    ae8a:	687b      	ldr	r3, [r7, #4]
    ae8c:	605a      	str	r2, [r3, #4]
            break;
    ae8e:	e01a      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_REJOIN_1_CYCLE:
        {
            mibGet->Param.Rejoin1CycleInSec = MacCtx.NvmCtx->Rejoin1CycleInSec;
    ae90:	4b11      	ldr	r3, [pc, #68]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    ae92:	4a12      	ldr	r2, [pc, #72]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    ae94:	589a      	ldr	r2, [r3, r2]
    ae96:	238c      	movs	r3, #140	; 0x8c
    ae98:	009b      	lsls	r3, r3, #2
    ae9a:	58d2      	ldr	r2, [r2, r3]
    ae9c:	687b      	ldr	r3, [r7, #4]
    ae9e:	605a      	str	r2, [r3, #4]
            break;
    aea0:	e011      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        case MIB_REJOIN_2_CYCLE:
        {
            mibGet->Param.Rejoin2CycleInSec = MacCtx.NvmCtx->Rejoin2CycleInSec;
    aea2:	4b0d      	ldr	r3, [pc, #52]	; (aed8 <LoRaMacMibGetRequestConfirm+0x2a0>)
    aea4:	4a0d      	ldr	r2, [pc, #52]	; (aedc <LoRaMacMibGetRequestConfirm+0x2a4>)
    aea6:	589a      	ldr	r2, [r3, r2]
    aea8:	238d      	movs	r3, #141	; 0x8d
    aeaa:	009b      	lsls	r3, r3, #2
    aeac:	58d2      	ldr	r2, [r2, r3]
    aeae:	687b      	ldr	r3, [r7, #4]
    aeb0:	605a      	str	r2, [r3, #4]
            break;
    aeb2:	e008      	b.n	aec6 <LoRaMacMibGetRequestConfirm+0x28e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
    aeb4:	2317      	movs	r3, #23
    aeb6:	18fc      	adds	r4, r7, r3
    aeb8:	687b      	ldr	r3, [r7, #4]
    aeba:	0018      	movs	r0, r3
    aebc:	4b0a      	ldr	r3, [pc, #40]	; (aee8 <LoRaMacMibGetRequestConfirm+0x2b0>)
    aebe:	4798      	blx	r3
    aec0:	0003      	movs	r3, r0
    aec2:	7023      	strb	r3, [r4, #0]
            break;
    aec4:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
    aec6:	2317      	movs	r3, #23
    aec8:	18fb      	adds	r3, r7, r3
    aeca:	781b      	ldrb	r3, [r3, #0]
}
    aecc:	0018      	movs	r0, r3
    aece:	46bd      	mov	sp, r7
    aed0:	b007      	add	sp, #28
    aed2:	bd90      	pop	{r4, r7, pc}
    aed4:	0001f3a4 	.word	0x0001f3a4
    aed8:	20000c8c 	.word	0x20000c8c
    aedc:	000004c4 	.word	0x000004c4
    aee0:	0000fec1 	.word	0x0000fec1
    aee4:	00009c01 	.word	0x00009c01
    aee8:	0000c783 	.word	0x0000c783

0000aeec <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
    aeec:	b590      	push	{r4, r7, lr}
    aeee:	b089      	sub	sp, #36	; 0x24
    aef0:	af02      	add	r7, sp, #8
    aef2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    aef4:	2317      	movs	r3, #23
    aef6:	18fb      	adds	r3, r7, r3
    aef8:	2200      	movs	r2, #0
    aefa:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	2b00      	cmp	r3, #0
    af00:	d102      	bne.n	af08 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    af02:	2303      	movs	r3, #3
    af04:	f000 fca7 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
    af08:	4ad4      	ldr	r2, [pc, #848]	; (b25c <LoRaMacMibSetRequestConfirm+0x370>)
    af0a:	23d7      	movs	r3, #215	; 0xd7
    af0c:	009b      	lsls	r3, r3, #2
    af0e:	58d3      	ldr	r3, [r2, r3]
    af10:	2202      	movs	r2, #2
    af12:	4013      	ands	r3, r2
    af14:	d002      	beq.n	af1c <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
    af16:	2301      	movs	r3, #1
    af18:	f000 fc9d 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
    }

    switch( mibSet->Type )
    af1c:	687b      	ldr	r3, [r7, #4]
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	2b32      	cmp	r3, #50	; 0x32
    af22:	d901      	bls.n	af28 <LoRaMacMibSetRequestConfirm+0x3c>
    af24:	f000 fc56 	bl	b7d4 <LoRaMacMibSetRequestConfirm+0x8e8>
    af28:	009a      	lsls	r2, r3, #2
    af2a:	4bcd      	ldr	r3, [pc, #820]	; (b260 <LoRaMacMibSetRequestConfirm+0x374>)
    af2c:	18d3      	adds	r3, r2, r3
    af2e:	681b      	ldr	r3, [r3, #0]
    af30:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
    af32:	687b      	ldr	r3, [r7, #4]
    af34:	791b      	ldrb	r3, [r3, #4]
    af36:	2217      	movs	r2, #23
    af38:	18bc      	adds	r4, r7, r2
    af3a:	0018      	movs	r0, r3
    af3c:	4bc9      	ldr	r3, [pc, #804]	; (b264 <LoRaMacMibSetRequestConfirm+0x378>)
    af3e:	4798      	blx	r3
    af40:	0003      	movs	r3, r0
    af42:	7023      	strb	r3, [r4, #0]
            break;
    af44:	f000 fc80 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	791b      	ldrb	r3, [r3, #4]
    af4c:	2b02      	cmp	r3, #2
    af4e:	d009      	beq.n	af64 <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
    af50:	4bc2      	ldr	r3, [pc, #776]	; (b25c <LoRaMacMibSetRequestConfirm+0x370>)
    af52:	4ac5      	ldr	r2, [pc, #788]	; (b268 <LoRaMacMibSetRequestConfirm+0x37c>)
    af54:	589a      	ldr	r2, [r3, r2]
    af56:	687b      	ldr	r3, [r7, #4]
    af58:	7919      	ldrb	r1, [r3, #4]
    af5a:	2388      	movs	r3, #136	; 0x88
    af5c:	009b      	lsls	r3, r3, #2
    af5e:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    af60:	f000 fc72 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    af64:	2317      	movs	r3, #23
    af66:	18fb      	adds	r3, r7, r3
    af68:	2203      	movs	r2, #3
    af6a:	701a      	strb	r2, [r3, #0]
            break;
    af6c:	f000 fc6c 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
    af70:	4bba      	ldr	r3, [pc, #744]	; (b25c <LoRaMacMibSetRequestConfirm+0x370>)
    af72:	4abd      	ldr	r2, [pc, #756]	; (b268 <LoRaMacMibSetRequestConfirm+0x37c>)
    af74:	589b      	ldr	r3, [r3, r2]
    af76:	687a      	ldr	r2, [r7, #4]
    af78:	7911      	ldrb	r1, [r2, #4]
    af7a:	22ca      	movs	r2, #202	; 0xca
    af7c:	5499      	strb	r1, [r3, r2]
            break;
    af7e:	f000 fc63 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
    af82:	4bb6      	ldr	r3, [pc, #728]	; (b25c <LoRaMacMibSetRequestConfirm+0x370>)
    af84:	4ab8      	ldr	r2, [pc, #736]	; (b268 <LoRaMacMibSetRequestConfirm+0x37c>)
    af86:	589b      	ldr	r3, [r3, r2]
    af88:	687a      	ldr	r2, [r7, #4]
    af8a:	6852      	ldr	r2, [r2, #4]
    af8c:	641a      	str	r2, [r3, #64]	; 0x40
            break;
    af8e:	f000 fc5b 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
    af92:	4bb2      	ldr	r3, [pc, #712]	; (b25c <LoRaMacMibSetRequestConfirm+0x370>)
    af94:	4ab4      	ldr	r2, [pc, #720]	; (b268 <LoRaMacMibSetRequestConfirm+0x37c>)
    af96:	589b      	ldr	r3, [r3, r2]
    af98:	687a      	ldr	r2, [r7, #4]
    af9a:	6852      	ldr	r2, [r2, #4]
    af9c:	645a      	str	r2, [r3, #68]	; 0x44
            break;
    af9e:	f000 fc53 	bl	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
    afa2:	687b      	ldr	r3, [r7, #4]
    afa4:	685b      	ldr	r3, [r3, #4]
    afa6:	2b00      	cmp	r3, #0
    afa8:	d00c      	beq.n	afc4 <LoRaMacMibSetRequestConfirm+0xd8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
    afaa:	687b      	ldr	r3, [r7, #4]
    afac:	685b      	ldr	r3, [r3, #4]
    afae:	0019      	movs	r1, r3
    afb0:	2000      	movs	r0, #0
    afb2:	4bae      	ldr	r3, [pc, #696]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    afb4:	4798      	blx	r3
    afb6:	1e03      	subs	r3, r0, #0
    afb8:	d101      	bne.n	afbe <LoRaMacMibSetRequestConfirm+0xd2>
    afba:	f000 fc14 	bl	b7e6 <LoRaMacMibSetRequestConfirm+0x8fa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    afbe:	2311      	movs	r3, #17
    afc0:	f000 fc49 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    afc4:	2317      	movs	r3, #23
    afc6:	18fb      	adds	r3, r7, r3
    afc8:	2203      	movs	r2, #3
    afca:	701a      	strb	r2, [r3, #0]
            }
            break;
    afcc:	f000 fc0b 	bl	b7e6 <LoRaMacMibSetRequestConfirm+0x8fa>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	685b      	ldr	r3, [r3, #4]
    afd4:	2b00      	cmp	r3, #0
    afd6:	d00c      	beq.n	aff2 <LoRaMacMibSetRequestConfirm+0x106>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	685b      	ldr	r3, [r3, #4]
    afdc:	0019      	movs	r1, r3
    afde:	2001      	movs	r0, #1
    afe0:	4ba2      	ldr	r3, [pc, #648]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    afe2:	4798      	blx	r3
    afe4:	1e03      	subs	r3, r0, #0
    afe6:	d101      	bne.n	afec <LoRaMacMibSetRequestConfirm+0x100>
    afe8:	f000 fbff 	bl	b7ea <LoRaMacMibSetRequestConfirm+0x8fe>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    afec:	2311      	movs	r3, #17
    afee:	f000 fc32 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    aff2:	2317      	movs	r3, #23
    aff4:	18fb      	adds	r3, r7, r3
    aff6:	2203      	movs	r2, #3
    aff8:	701a      	strb	r2, [r3, #0]
            }
            break;
    affa:	f000 fbf6 	bl	b7ea <LoRaMacMibSetRequestConfirm+0x8fe>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
    affe:	687b      	ldr	r3, [r7, #4]
    b000:	685b      	ldr	r3, [r3, #4]
    b002:	2b00      	cmp	r3, #0
    b004:	d00c      	beq.n	b020 <LoRaMacMibSetRequestConfirm+0x134>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
    b006:	687b      	ldr	r3, [r7, #4]
    b008:	685b      	ldr	r3, [r3, #4]
    b00a:	0019      	movs	r1, r3
    b00c:	2002      	movs	r0, #2
    b00e:	4b97      	ldr	r3, [pc, #604]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b010:	4798      	blx	r3
    b012:	1e03      	subs	r3, r0, #0
    b014:	d101      	bne.n	b01a <LoRaMacMibSetRequestConfirm+0x12e>
    b016:	f000 fbea 	bl	b7ee <LoRaMacMibSetRequestConfirm+0x902>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b01a:	2311      	movs	r3, #17
    b01c:	f000 fc1b 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b020:	2317      	movs	r3, #23
    b022:	18fb      	adds	r3, r7, r3
    b024:	2203      	movs	r2, #3
    b026:	701a      	strb	r2, [r3, #0]
            }
            break;
    b028:	f000 fbe1 	bl	b7ee <LoRaMacMibSetRequestConfirm+0x902>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	685b      	ldr	r3, [r3, #4]
    b030:	2b00      	cmp	r3, #0
    b032:	d00c      	beq.n	b04e <LoRaMacMibSetRequestConfirm+0x162>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
    b034:	687b      	ldr	r3, [r7, #4]
    b036:	685b      	ldr	r3, [r3, #4]
    b038:	0019      	movs	r1, r3
    b03a:	2003      	movs	r0, #3
    b03c:	4b8b      	ldr	r3, [pc, #556]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b03e:	4798      	blx	r3
    b040:	1e03      	subs	r3, r0, #0
    b042:	d101      	bne.n	b048 <LoRaMacMibSetRequestConfirm+0x15c>
    b044:	f000 fbd5 	bl	b7f2 <LoRaMacMibSetRequestConfirm+0x906>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b048:	2311      	movs	r3, #17
    b04a:	f000 fc04 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b04e:	2317      	movs	r3, #23
    b050:	18fb      	adds	r3, r7, r3
    b052:	2203      	movs	r2, #3
    b054:	701a      	strb	r2, [r3, #0]
            }
            break;
    b056:	f000 fbcc 	bl	b7f2 <LoRaMacMibSetRequestConfirm+0x906>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	685b      	ldr	r3, [r3, #4]
    b05e:	2b00      	cmp	r3, #0
    b060:	d00c      	beq.n	b07c <LoRaMacMibSetRequestConfirm+0x190>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	685b      	ldr	r3, [r3, #4]
    b066:	0019      	movs	r1, r3
    b068:	2004      	movs	r0, #4
    b06a:	4b80      	ldr	r3, [pc, #512]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b06c:	4798      	blx	r3
    b06e:	1e03      	subs	r3, r0, #0
    b070:	d101      	bne.n	b076 <LoRaMacMibSetRequestConfirm+0x18a>
    b072:	f000 fbc0 	bl	b7f6 <LoRaMacMibSetRequestConfirm+0x90a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b076:	2311      	movs	r3, #17
    b078:	f000 fbed 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b07c:	2317      	movs	r3, #23
    b07e:	18fb      	adds	r3, r7, r3
    b080:	2203      	movs	r2, #3
    b082:	701a      	strb	r2, [r3, #0]
            }
            break;
    b084:	f000 fbb7 	bl	b7f6 <LoRaMacMibSetRequestConfirm+0x90a>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	685b      	ldr	r3, [r3, #4]
    b08c:	2b00      	cmp	r3, #0
    b08e:	d00c      	beq.n	b0aa <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	685b      	ldr	r3, [r3, #4]
    b094:	0019      	movs	r1, r3
    b096:	2005      	movs	r0, #5
    b098:	4b74      	ldr	r3, [pc, #464]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b09a:	4798      	blx	r3
    b09c:	1e03      	subs	r3, r0, #0
    b09e:	d101      	bne.n	b0a4 <LoRaMacMibSetRequestConfirm+0x1b8>
    b0a0:	f000 fbab 	bl	b7fa <LoRaMacMibSetRequestConfirm+0x90e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b0a4:	2311      	movs	r3, #17
    b0a6:	f000 fbd6 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b0aa:	2317      	movs	r3, #23
    b0ac:	18fb      	adds	r3, r7, r3
    b0ae:	2203      	movs	r2, #3
    b0b0:	701a      	strb	r2, [r3, #0]
            }
            break;
    b0b2:	f000 fba2 	bl	b7fa <LoRaMacMibSetRequestConfirm+0x90e>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
    b0b6:	687b      	ldr	r3, [r7, #4]
    b0b8:	685b      	ldr	r3, [r3, #4]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d00c      	beq.n	b0d8 <LoRaMacMibSetRequestConfirm+0x1ec>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
    b0be:	687b      	ldr	r3, [r7, #4]
    b0c0:	685b      	ldr	r3, [r3, #4]
    b0c2:	0019      	movs	r1, r3
    b0c4:	2006      	movs	r0, #6
    b0c6:	4b69      	ldr	r3, [pc, #420]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b0c8:	4798      	blx	r3
    b0ca:	1e03      	subs	r3, r0, #0
    b0cc:	d101      	bne.n	b0d2 <LoRaMacMibSetRequestConfirm+0x1e6>
    b0ce:	f000 fb96 	bl	b7fe <LoRaMacMibSetRequestConfirm+0x912>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b0d2:	2311      	movs	r3, #17
    b0d4:	f000 fbbf 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b0d8:	2317      	movs	r3, #23
    b0da:	18fb      	adds	r3, r7, r3
    b0dc:	2203      	movs	r2, #3
    b0de:	701a      	strb	r2, [r3, #0]
            }
            break;
    b0e0:	f000 fb8d 	bl	b7fe <LoRaMacMibSetRequestConfirm+0x912>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	685b      	ldr	r3, [r3, #4]
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d00c      	beq.n	b106 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	685b      	ldr	r3, [r3, #4]
    b0f0:	0019      	movs	r1, r3
    b0f2:	2007      	movs	r0, #7
    b0f4:	4b5d      	ldr	r3, [pc, #372]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b0f6:	4798      	blx	r3
    b0f8:	1e03      	subs	r3, r0, #0
    b0fa:	d101      	bne.n	b100 <LoRaMacMibSetRequestConfirm+0x214>
    b0fc:	f000 fb81 	bl	b802 <LoRaMacMibSetRequestConfirm+0x916>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b100:	2311      	movs	r3, #17
    b102:	f000 fba8 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b106:	2317      	movs	r3, #23
    b108:	18fb      	adds	r3, r7, r3
    b10a:	2203      	movs	r2, #3
    b10c:	701a      	strb	r2, [r3, #0]
            }
            break;
    b10e:	f000 fb78 	bl	b802 <LoRaMacMibSetRequestConfirm+0x916>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
    b112:	687b      	ldr	r3, [r7, #4]
    b114:	685b      	ldr	r3, [r3, #4]
    b116:	2b00      	cmp	r3, #0
    b118:	d00c      	beq.n	b134 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
    b11a:	687b      	ldr	r3, [r7, #4]
    b11c:	685b      	ldr	r3, [r3, #4]
    b11e:	0019      	movs	r1, r3
    b120:	207f      	movs	r0, #127	; 0x7f
    b122:	4b52      	ldr	r3, [pc, #328]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b124:	4798      	blx	r3
    b126:	1e03      	subs	r3, r0, #0
    b128:	d101      	bne.n	b12e <LoRaMacMibSetRequestConfirm+0x242>
    b12a:	f000 fb6c 	bl	b806 <LoRaMacMibSetRequestConfirm+0x91a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b12e:	2311      	movs	r3, #17
    b130:	f000 fb91 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b134:	2317      	movs	r3, #23
    b136:	18fb      	adds	r3, r7, r3
    b138:	2203      	movs	r2, #3
    b13a:	701a      	strb	r2, [r3, #0]
            }
            break;
    b13c:	f000 fb63 	bl	b806 <LoRaMacMibSetRequestConfirm+0x91a>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	685b      	ldr	r3, [r3, #4]
    b144:	2b00      	cmp	r3, #0
    b146:	d00b      	beq.n	b160 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	685b      	ldr	r3, [r3, #4]
    b14c:	0019      	movs	r1, r3
    b14e:	2080      	movs	r0, #128	; 0x80
    b150:	4b46      	ldr	r3, [pc, #280]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b152:	4798      	blx	r3
    b154:	1e03      	subs	r3, r0, #0
    b156:	d100      	bne.n	b15a <LoRaMacMibSetRequestConfirm+0x26e>
    b158:	e357      	b.n	b80a <LoRaMacMibSetRequestConfirm+0x91e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b15a:	2311      	movs	r3, #17
    b15c:	f000 fb7b 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b160:	2317      	movs	r3, #23
    b162:	18fb      	adds	r3, r7, r3
    b164:	2203      	movs	r2, #3
    b166:	701a      	strb	r2, [r3, #0]
            }
            break;
    b168:	e34f      	b.n	b80a <LoRaMacMibSetRequestConfirm+0x91e>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
    b16a:	687b      	ldr	r3, [r7, #4]
    b16c:	685b      	ldr	r3, [r3, #4]
    b16e:	2b00      	cmp	r3, #0
    b170:	d00b      	beq.n	b18a <LoRaMacMibSetRequestConfirm+0x29e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	685b      	ldr	r3, [r3, #4]
    b176:	0019      	movs	r1, r3
    b178:	2081      	movs	r0, #129	; 0x81
    b17a:	4b3c      	ldr	r3, [pc, #240]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b17c:	4798      	blx	r3
    b17e:	1e03      	subs	r3, r0, #0
    b180:	d100      	bne.n	b184 <LoRaMacMibSetRequestConfirm+0x298>
    b182:	e344      	b.n	b80e <LoRaMacMibSetRequestConfirm+0x922>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b184:	2311      	movs	r3, #17
    b186:	f000 fb66 	bl	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b18a:	2317      	movs	r3, #23
    b18c:	18fb      	adds	r3, r7, r3
    b18e:	2203      	movs	r2, #3
    b190:	701a      	strb	r2, [r3, #0]
            }
            break;
    b192:	e33c      	b.n	b80e <LoRaMacMibSetRequestConfirm+0x922>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
    b194:	687b      	ldr	r3, [r7, #4]
    b196:	685b      	ldr	r3, [r3, #4]
    b198:	2b00      	cmp	r3, #0
    b19a:	d00a      	beq.n	b1b2 <LoRaMacMibSetRequestConfirm+0x2c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	685b      	ldr	r3, [r3, #4]
    b1a0:	0019      	movs	r1, r3
    b1a2:	2082      	movs	r0, #130	; 0x82
    b1a4:	4b31      	ldr	r3, [pc, #196]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b1a6:	4798      	blx	r3
    b1a8:	1e03      	subs	r3, r0, #0
    b1aa:	d100      	bne.n	b1ae <LoRaMacMibSetRequestConfirm+0x2c2>
    b1ac:	e331      	b.n	b812 <LoRaMacMibSetRequestConfirm+0x926>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b1ae:	2311      	movs	r3, #17
    b1b0:	e351      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b1b2:	2317      	movs	r3, #23
    b1b4:	18fb      	adds	r3, r7, r3
    b1b6:	2203      	movs	r2, #3
    b1b8:	701a      	strb	r2, [r3, #0]
            }
            break;
    b1ba:	e32a      	b.n	b812 <LoRaMacMibSetRequestConfirm+0x926>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	685b      	ldr	r3, [r3, #4]
    b1c0:	2b00      	cmp	r3, #0
    b1c2:	d00a      	beq.n	b1da <LoRaMacMibSetRequestConfirm+0x2ee>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	685b      	ldr	r3, [r3, #4]
    b1c8:	0019      	movs	r1, r3
    b1ca:	2083      	movs	r0, #131	; 0x83
    b1cc:	4b27      	ldr	r3, [pc, #156]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b1ce:	4798      	blx	r3
    b1d0:	1e03      	subs	r3, r0, #0
    b1d2:	d100      	bne.n	b1d6 <LoRaMacMibSetRequestConfirm+0x2ea>
    b1d4:	e31f      	b.n	b816 <LoRaMacMibSetRequestConfirm+0x92a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b1d6:	2311      	movs	r3, #17
    b1d8:	e33d      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b1da:	2317      	movs	r3, #23
    b1dc:	18fb      	adds	r3, r7, r3
    b1de:	2203      	movs	r2, #3
    b1e0:	701a      	strb	r2, [r3, #0]
            }
            break;
    b1e2:	e318      	b.n	b816 <LoRaMacMibSetRequestConfirm+0x92a>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
    b1e4:	687b      	ldr	r3, [r7, #4]
    b1e6:	685b      	ldr	r3, [r3, #4]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d00a      	beq.n	b202 <LoRaMacMibSetRequestConfirm+0x316>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
    b1ec:	687b      	ldr	r3, [r7, #4]
    b1ee:	685b      	ldr	r3, [r3, #4]
    b1f0:	0019      	movs	r1, r3
    b1f2:	2084      	movs	r0, #132	; 0x84
    b1f4:	4b1d      	ldr	r3, [pc, #116]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b1f6:	4798      	blx	r3
    b1f8:	1e03      	subs	r3, r0, #0
    b1fa:	d100      	bne.n	b1fe <LoRaMacMibSetRequestConfirm+0x312>
    b1fc:	e30d      	b.n	b81a <LoRaMacMibSetRequestConfirm+0x92e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b1fe:	2311      	movs	r3, #17
    b200:	e329      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b202:	2317      	movs	r3, #23
    b204:	18fb      	adds	r3, r7, r3
    b206:	2203      	movs	r2, #3
    b208:	701a      	strb	r2, [r3, #0]
            }
            break;
    b20a:	e306      	b.n	b81a <LoRaMacMibSetRequestConfirm+0x92e>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	685b      	ldr	r3, [r3, #4]
    b210:	2b00      	cmp	r3, #0
    b212:	d00a      	beq.n	b22a <LoRaMacMibSetRequestConfirm+0x33e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	685b      	ldr	r3, [r3, #4]
    b218:	0019      	movs	r1, r3
    b21a:	2085      	movs	r0, #133	; 0x85
    b21c:	4b13      	ldr	r3, [pc, #76]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b21e:	4798      	blx	r3
    b220:	1e03      	subs	r3, r0, #0
    b222:	d100      	bne.n	b226 <LoRaMacMibSetRequestConfirm+0x33a>
    b224:	e2fb      	b.n	b81e <LoRaMacMibSetRequestConfirm+0x932>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b226:	2311      	movs	r3, #17
    b228:	e315      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b22a:	2317      	movs	r3, #23
    b22c:	18fb      	adds	r3, r7, r3
    b22e:	2203      	movs	r2, #3
    b230:	701a      	strb	r2, [r3, #0]
            }
            break;
    b232:	e2f4      	b.n	b81e <LoRaMacMibSetRequestConfirm+0x932>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
    b234:	687b      	ldr	r3, [r7, #4]
    b236:	685b      	ldr	r3, [r3, #4]
    b238:	2b00      	cmp	r3, #0
    b23a:	d00a      	beq.n	b252 <LoRaMacMibSetRequestConfirm+0x366>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
    b23c:	687b      	ldr	r3, [r7, #4]
    b23e:	685b      	ldr	r3, [r3, #4]
    b240:	0019      	movs	r1, r3
    b242:	2086      	movs	r0, #134	; 0x86
    b244:	4b09      	ldr	r3, [pc, #36]	; (b26c <LoRaMacMibSetRequestConfirm+0x380>)
    b246:	4798      	blx	r3
    b248:	1e03      	subs	r3, r0, #0
    b24a:	d100      	bne.n	b24e <LoRaMacMibSetRequestConfirm+0x362>
    b24c:	e2e9      	b.n	b822 <LoRaMacMibSetRequestConfirm+0x936>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b24e:	2311      	movs	r3, #17
    b250:	e301      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b252:	2317      	movs	r3, #23
    b254:	18fb      	adds	r3, r7, r3
    b256:	2203      	movs	r2, #3
    b258:	701a      	strb	r2, [r3, #0]
            }
            break;
    b25a:	e2e2      	b.n	b822 <LoRaMacMibSetRequestConfirm+0x936>
    b25c:	20000c8c 	.word	0x20000c8c
    b260:	0001f474 	.word	0x0001f474
    b264:	0000775d 	.word	0x0000775d
    b268:	000004c4 	.word	0x000004c4
    b26c:	0000e35d 	.word	0x0000e35d
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
    b270:	687b      	ldr	r3, [r7, #4]
    b272:	685b      	ldr	r3, [r3, #4]
    b274:	2b00      	cmp	r3, #0
    b276:	d00a      	beq.n	b28e <LoRaMacMibSetRequestConfirm+0x3a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	685b      	ldr	r3, [r3, #4]
    b27c:	0019      	movs	r1, r3
    b27e:	2087      	movs	r0, #135	; 0x87
    b280:	4bca      	ldr	r3, [pc, #808]	; (b5ac <LoRaMacMibSetRequestConfirm+0x6c0>)
    b282:	4798      	blx	r3
    b284:	1e03      	subs	r3, r0, #0
    b286:	d100      	bne.n	b28a <LoRaMacMibSetRequestConfirm+0x39e>
    b288:	e2cd      	b.n	b826 <LoRaMacMibSetRequestConfirm+0x93a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b28a:	2311      	movs	r3, #17
    b28c:	e2e3      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b28e:	2317      	movs	r3, #23
    b290:	18fb      	adds	r3, r7, r3
    b292:	2203      	movs	r2, #3
    b294:	701a      	strb	r2, [r3, #0]
            }
            break;
    b296:	e2c6      	b.n	b826 <LoRaMacMibSetRequestConfirm+0x93a>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
    b298:	687b      	ldr	r3, [r7, #4]
    b29a:	685b      	ldr	r3, [r3, #4]
    b29c:	2b00      	cmp	r3, #0
    b29e:	d00a      	beq.n	b2b6 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
    b2a0:	687b      	ldr	r3, [r7, #4]
    b2a2:	685b      	ldr	r3, [r3, #4]
    b2a4:	0019      	movs	r1, r3
    b2a6:	2088      	movs	r0, #136	; 0x88
    b2a8:	4bc0      	ldr	r3, [pc, #768]	; (b5ac <LoRaMacMibSetRequestConfirm+0x6c0>)
    b2aa:	4798      	blx	r3
    b2ac:	1e03      	subs	r3, r0, #0
    b2ae:	d100      	bne.n	b2b2 <LoRaMacMibSetRequestConfirm+0x3c6>
    b2b0:	e2bb      	b.n	b82a <LoRaMacMibSetRequestConfirm+0x93e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b2b2:	2311      	movs	r3, #17
    b2b4:	e2cf      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b2b6:	2317      	movs	r3, #23
    b2b8:	18fb      	adds	r3, r7, r3
    b2ba:	2203      	movs	r2, #3
    b2bc:	701a      	strb	r2, [r3, #0]
            }
            break;
    b2be:	e2b4      	b.n	b82a <LoRaMacMibSetRequestConfirm+0x93e>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	685b      	ldr	r3, [r3, #4]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d00a      	beq.n	b2de <LoRaMacMibSetRequestConfirm+0x3f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
    b2c8:	687b      	ldr	r3, [r7, #4]
    b2ca:	685b      	ldr	r3, [r3, #4]
    b2cc:	0019      	movs	r1, r3
    b2ce:	2089      	movs	r0, #137	; 0x89
    b2d0:	4bb6      	ldr	r3, [pc, #728]	; (b5ac <LoRaMacMibSetRequestConfirm+0x6c0>)
    b2d2:	4798      	blx	r3
    b2d4:	1e03      	subs	r3, r0, #0
    b2d6:	d100      	bne.n	b2da <LoRaMacMibSetRequestConfirm+0x3ee>
    b2d8:	e2a9      	b.n	b82e <LoRaMacMibSetRequestConfirm+0x942>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b2da:	2311      	movs	r3, #17
    b2dc:	e2bb      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b2de:	2317      	movs	r3, #23
    b2e0:	18fb      	adds	r3, r7, r3
    b2e2:	2203      	movs	r2, #3
    b2e4:	701a      	strb	r2, [r3, #0]
            }
            break;
    b2e6:	e2a2      	b.n	b82e <LoRaMacMibSetRequestConfirm+0x942>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	685b      	ldr	r3, [r3, #4]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d00a      	beq.n	b306 <LoRaMacMibSetRequestConfirm+0x41a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	685b      	ldr	r3, [r3, #4]
    b2f4:	0019      	movs	r1, r3
    b2f6:	208a      	movs	r0, #138	; 0x8a
    b2f8:	4bac      	ldr	r3, [pc, #688]	; (b5ac <LoRaMacMibSetRequestConfirm+0x6c0>)
    b2fa:	4798      	blx	r3
    b2fc:	1e03      	subs	r3, r0, #0
    b2fe:	d100      	bne.n	b302 <LoRaMacMibSetRequestConfirm+0x416>
    b300:	e297      	b.n	b832 <LoRaMacMibSetRequestConfirm+0x946>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b302:	2311      	movs	r3, #17
    b304:	e2a7      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b306:	2317      	movs	r3, #23
    b308:	18fb      	adds	r3, r7, r3
    b30a:	2203      	movs	r2, #3
    b30c:	701a      	strb	r2, [r3, #0]
            }
            break;
    b30e:	e290      	b.n	b832 <LoRaMacMibSetRequestConfirm+0x946>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	685b      	ldr	r3, [r3, #4]
    b314:	2b00      	cmp	r3, #0
    b316:	d00a      	beq.n	b32e <LoRaMacMibSetRequestConfirm+0x442>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	685b      	ldr	r3, [r3, #4]
    b31c:	0019      	movs	r1, r3
    b31e:	208b      	movs	r0, #139	; 0x8b
    b320:	4ba2      	ldr	r3, [pc, #648]	; (b5ac <LoRaMacMibSetRequestConfirm+0x6c0>)
    b322:	4798      	blx	r3
    b324:	1e03      	subs	r3, r0, #0
    b326:	d100      	bne.n	b32a <LoRaMacMibSetRequestConfirm+0x43e>
    b328:	e285      	b.n	b836 <LoRaMacMibSetRequestConfirm+0x94a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b32a:	2311      	movs	r3, #17
    b32c:	e293      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b32e:	2317      	movs	r3, #23
    b330:	18fb      	adds	r3, r7, r3
    b332:	2203      	movs	r2, #3
    b334:	701a      	strb	r2, [r3, #0]
            }
            break;
    b336:	e27e      	b.n	b836 <LoRaMacMibSetRequestConfirm+0x94a>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
    b338:	4b9d      	ldr	r3, [pc, #628]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b33a:	4a9e      	ldr	r2, [pc, #632]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b33c:	589b      	ldr	r3, [r3, r2]
    b33e:	687a      	ldr	r2, [r7, #4]
    b340:	7911      	ldrb	r1, [r2, #4]
    b342:	22c9      	movs	r2, #201	; 0xc9
    b344:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    b346:	4b9c      	ldr	r3, [pc, #624]	; (b5b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
    b348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b34a:	4a99      	ldr	r2, [pc, #612]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b34c:	4999      	ldr	r1, [pc, #612]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b34e:	5852      	ldr	r2, [r2, r1]
    b350:	21c9      	movs	r1, #201	; 0xc9
    b352:	5c52      	ldrb	r2, [r2, r1]
    b354:	0010      	movs	r0, r2
    b356:	4798      	blx	r3
            break;
    b358:	e276      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
    b35a:	4b95      	ldr	r3, [pc, #596]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b35c:	4a95      	ldr	r2, [pc, #596]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b35e:	589a      	ldr	r2, [r3, r2]
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	7919      	ldrb	r1, [r3, #4]
    b364:	2316      	movs	r3, #22
    b366:	33ff      	adds	r3, #255	; 0xff
    b368:	54d1      	strb	r1, [r2, r3]
            break;
    b36a:	e26d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	7a1b      	ldrb	r3, [r3, #8]
    b370:	b25a      	sxtb	r2, r3
    b372:	2308      	movs	r3, #8
    b374:	18fb      	adds	r3, r7, r3
    b376:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    b378:	4b8d      	ldr	r3, [pc, #564]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b37a:	4a8e      	ldr	r2, [pc, #568]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b37c:	589a      	ldr	r2, [r3, r2]
    b37e:	2302      	movs	r3, #2
    b380:	33ff      	adds	r3, #255	; 0xff
    b382:	5cd2      	ldrb	r2, [r2, r3]
    b384:	2308      	movs	r3, #8
    b386:	18fb      	adds	r3, r7, r3
    b388:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    b38a:	4b89      	ldr	r3, [pc, #548]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b38c:	4a89      	ldr	r2, [pc, #548]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b38e:	589b      	ldr	r3, [r3, r2]
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	2208      	movs	r2, #8
    b394:	18b9      	adds	r1, r7, r2
    b396:	2206      	movs	r2, #6
    b398:	0018      	movs	r0, r3
    b39a:	4b88      	ldr	r3, [pc, #544]	; (b5bc <LoRaMacMibSetRequestConfirm+0x6d0>)
    b39c:	4798      	blx	r3
    b39e:	1e03      	subs	r3, r0, #0
    b3a0:	d039      	beq.n	b416 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
    b3a2:	4b83      	ldr	r3, [pc, #524]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3a4:	4a83      	ldr	r2, [pc, #524]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3a6:	589b      	ldr	r3, [r3, r2]
    b3a8:	21f8      	movs	r1, #248	; 0xf8
    b3aa:	687a      	ldr	r2, [r7, #4]
    b3ac:	185b      	adds	r3, r3, r1
    b3ae:	3204      	adds	r2, #4
    b3b0:	ca03      	ldmia	r2!, {r0, r1}
    b3b2:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
    b3b4:	4b7e      	ldr	r3, [pc, #504]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3b6:	4a7f      	ldr	r2, [pc, #508]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3b8:	589b      	ldr	r3, [r3, r2]
    b3ba:	22c8      	movs	r2, #200	; 0xc8
    b3bc:	5c9b      	ldrb	r3, [r3, r2]
    b3be:	2b02      	cmp	r3, #2
    b3c0:	d000      	beq.n	b3c4 <LoRaMacMibSetRequestConfirm+0x4d8>
    b3c2:	e23a      	b.n	b83a <LoRaMacMibSetRequestConfirm+0x94e>
    b3c4:	4b7a      	ldr	r3, [pc, #488]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3c6:	4a7b      	ldr	r2, [pc, #492]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3c8:	589a      	ldr	r2, [r3, r2]
    b3ca:	2388      	movs	r3, #136	; 0x88
    b3cc:	009b      	lsls	r3, r3, #2
    b3ce:	5cd3      	ldrb	r3, [r2, r3]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d100      	bne.n	b3d6 <LoRaMacMibSetRequestConfirm+0x4ea>
    b3d4:	e231      	b.n	b83a <LoRaMacMibSetRequestConfirm+0x94e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
    b3d6:	4b78      	ldr	r3, [pc, #480]	; (b5b8 <LoRaMacMibSetRequestConfirm+0x6cc>)
    b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b3da:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    b3dc:	4b74      	ldr	r3, [pc, #464]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3de:	4a75      	ldr	r2, [pc, #468]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3e0:	589b      	ldr	r3, [r3, r2]
    b3e2:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    b3e4:	4b72      	ldr	r3, [pc, #456]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3e6:	4a73      	ldr	r2, [pc, #460]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3e8:	589b      	ldr	r3, [r3, r2]
    b3ea:	22fc      	movs	r2, #252	; 0xfc
    b3ec:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    b3ee:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    b3f0:	4b6f      	ldr	r3, [pc, #444]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3f2:	4a70      	ldr	r2, [pc, #448]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3f4:	589b      	ldr	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    b3f6:	22dc      	movs	r2, #220	; 0xdc
    b3f8:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    b3fa:	4b6d      	ldr	r3, [pc, #436]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b3fc:	4a6d      	ldr	r2, [pc, #436]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b3fe:	589b      	ldr	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    b400:	22d8      	movs	r2, #216	; 0xd8
    b402:	589a      	ldr	r2, [r3, r2]
    b404:	4b6e      	ldr	r3, [pc, #440]	; (b5c0 <LoRaMacMibSetRequestConfirm+0x6d4>)
    b406:	9300      	str	r3, [sp, #0]
    b408:	0013      	movs	r3, r2
    b40a:	0022      	movs	r2, r4
    b40c:	4c6d      	ldr	r4, [pc, #436]	; (b5c4 <LoRaMacMibSetRequestConfirm+0x6d8>)
    b40e:	47a0      	blx	r4
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
    b410:	4b6d      	ldr	r3, [pc, #436]	; (b5c8 <LoRaMacMibSetRequestConfirm+0x6dc>)
    b412:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b414:	e211      	b.n	b83a <LoRaMacMibSetRequestConfirm+0x94e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b416:	2317      	movs	r3, #23
    b418:	18fb      	adds	r3, r7, r3
    b41a:	2203      	movs	r2, #3
    b41c:	701a      	strb	r2, [r3, #0]
            break;
    b41e:	e20c      	b.n	b83a <LoRaMacMibSetRequestConfirm+0x94e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    b420:	687b      	ldr	r3, [r7, #4]
    b422:	7a1b      	ldrb	r3, [r3, #8]
    b424:	b25a      	sxtb	r2, r3
    b426:	2308      	movs	r3, #8
    b428:	18fb      	adds	r3, r7, r3
    b42a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    b42c:	4b60      	ldr	r3, [pc, #384]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b42e:	4a61      	ldr	r2, [pc, #388]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b430:	589a      	ldr	r2, [r3, r2]
    b432:	2302      	movs	r3, #2
    b434:	33ff      	adds	r3, #255	; 0xff
    b436:	5cd2      	ldrb	r2, [r2, r3]
    b438:	2308      	movs	r3, #8
    b43a:	18fb      	adds	r3, r7, r3
    b43c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    b43e:	4b5c      	ldr	r3, [pc, #368]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b440:	4a5c      	ldr	r2, [pc, #368]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b442:	589b      	ldr	r3, [r3, r2]
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	2208      	movs	r2, #8
    b448:	18b9      	adds	r1, r7, r2
    b44a:	2206      	movs	r2, #6
    b44c:	0018      	movs	r0, r3
    b44e:	4b5b      	ldr	r3, [pc, #364]	; (b5bc <LoRaMacMibSetRequestConfirm+0x6d0>)
    b450:	4798      	blx	r3
    b452:	1e03      	subs	r3, r0, #0
    b454:	d008      	beq.n	b468 <LoRaMacMibSetRequestConfirm+0x57c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
    b456:	4b56      	ldr	r3, [pc, #344]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b458:	4a56      	ldr	r2, [pc, #344]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b45a:	589b      	ldr	r3, [r3, r2]
    b45c:	687a      	ldr	r2, [r7, #4]
    b45e:	3328      	adds	r3, #40	; 0x28
    b460:	3204      	adds	r2, #4
    b462:	ca03      	ldmia	r2!, {r0, r1}
    b464:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b466:	e1ef      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b468:	2317      	movs	r3, #23
    b46a:	18fb      	adds	r3, r7, r3
    b46c:	2203      	movs	r2, #3
    b46e:	701a      	strb	r2, [r3, #0]
            break;
    b470:	e1ea      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	685a      	ldr	r2, [r3, #4]
    b476:	230c      	movs	r3, #12
    b478:	18fb      	adds	r3, r7, r3
    b47a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
    b47c:	230c      	movs	r3, #12
    b47e:	18fb      	adds	r3, r7, r3
    b480:	2201      	movs	r2, #1
    b482:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    b484:	4b4a      	ldr	r3, [pc, #296]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b486:	4a4b      	ldr	r2, [pc, #300]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b488:	589b      	ldr	r3, [r3, r2]
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	220c      	movs	r2, #12
    b48e:	18ba      	adds	r2, r7, r2
    b490:	0011      	movs	r1, r2
    b492:	0018      	movs	r0, r3
    b494:	4b4d      	ldr	r3, [pc, #308]	; (b5cc <LoRaMacMibSetRequestConfirm+0x6e0>)
    b496:	4798      	blx	r3
    b498:	0003      	movs	r3, r0
    b49a:	001a      	movs	r2, r3
    b49c:	2301      	movs	r3, #1
    b49e:	4053      	eors	r3, r2
    b4a0:	b2db      	uxtb	r3, r3
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d100      	bne.n	b4a8 <LoRaMacMibSetRequestConfirm+0x5bc>
    b4a6:	e1ca      	b.n	b83e <LoRaMacMibSetRequestConfirm+0x952>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b4a8:	2317      	movs	r3, #23
    b4aa:	18fb      	adds	r3, r7, r3
    b4ac:	2203      	movs	r2, #3
    b4ae:	701a      	strb	r2, [r3, #0]
            }
            break;
    b4b0:	e1c5      	b.n	b83e <LoRaMacMibSetRequestConfirm+0x952>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    b4b2:	687b      	ldr	r3, [r7, #4]
    b4b4:	685a      	ldr	r2, [r3, #4]
    b4b6:	230c      	movs	r3, #12
    b4b8:	18fb      	adds	r3, r7, r3
    b4ba:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
    b4bc:	230c      	movs	r3, #12
    b4be:	18fb      	adds	r3, r7, r3
    b4c0:	2200      	movs	r2, #0
    b4c2:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    b4c4:	4b3a      	ldr	r3, [pc, #232]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b4c6:	4a3b      	ldr	r2, [pc, #236]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b4c8:	589b      	ldr	r3, [r3, r2]
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	220c      	movs	r2, #12
    b4ce:	18ba      	adds	r2, r7, r2
    b4d0:	0011      	movs	r1, r2
    b4d2:	0018      	movs	r0, r3
    b4d4:	4b3d      	ldr	r3, [pc, #244]	; (b5cc <LoRaMacMibSetRequestConfirm+0x6e0>)
    b4d6:	4798      	blx	r3
    b4d8:	0003      	movs	r3, r0
    b4da:	001a      	movs	r2, r3
    b4dc:	2301      	movs	r3, #1
    b4de:	4053      	eors	r3, r2
    b4e0:	b2db      	uxtb	r3, r3
    b4e2:	2b00      	cmp	r3, #0
    b4e4:	d100      	bne.n	b4e8 <LoRaMacMibSetRequestConfirm+0x5fc>
    b4e6:	e1ac      	b.n	b842 <LoRaMacMibSetRequestConfirm+0x956>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b4e8:	2317      	movs	r3, #23
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	2203      	movs	r2, #3
    b4ee:	701a      	strb	r2, [r3, #0]
            }
            break;
    b4f0:	e1a7      	b.n	b842 <LoRaMacMibSetRequestConfirm+0x956>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    b4f2:	687b      	ldr	r3, [r7, #4]
    b4f4:	791b      	ldrb	r3, [r3, #4]
    b4f6:	2b00      	cmp	r3, #0
    b4f8:	d00b      	beq.n	b512 <LoRaMacMibSetRequestConfirm+0x626>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    b4fe:	2b0f      	cmp	r3, #15
    b500:	d807      	bhi.n	b512 <LoRaMacMibSetRequestConfirm+0x626>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
    b502:	4b2b      	ldr	r3, [pc, #172]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b504:	4a2b      	ldr	r2, [pc, #172]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b506:	589b      	ldr	r3, [r3, r2]
    b508:	687a      	ldr	r2, [r7, #4]
    b50a:	7911      	ldrb	r1, [r2, #4]
    b50c:	22f4      	movs	r2, #244	; 0xf4
    b50e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b510:	e19a      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b512:	2317      	movs	r3, #23
    b514:	18fb      	adds	r3, r7, r3
    b516:	2203      	movs	r2, #3
    b518:	701a      	strb	r2, [r3, #0]
            break;
    b51a:	e195      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
    b51c:	4b24      	ldr	r3, [pc, #144]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b51e:	4a25      	ldr	r2, [pc, #148]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b520:	589a      	ldr	r2, [r3, r2]
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	685b      	ldr	r3, [r3, #4]
    b526:	21e0      	movs	r1, #224	; 0xe0
    b528:	5053      	str	r3, [r2, r1]
            break;
    b52a:	e18d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
    b52c:	4b20      	ldr	r3, [pc, #128]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b52e:	4a21      	ldr	r2, [pc, #132]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b530:	589a      	ldr	r2, [r3, r2]
    b532:	687b      	ldr	r3, [r7, #4]
    b534:	685b      	ldr	r3, [r3, #4]
    b536:	21e4      	movs	r1, #228	; 0xe4
    b538:	5053      	str	r3, [r2, r1]
            break;
    b53a:	e185      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
    b53c:	4b1c      	ldr	r3, [pc, #112]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b53e:	4a1d      	ldr	r2, [pc, #116]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b540:	589a      	ldr	r2, [r3, r2]
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	685b      	ldr	r3, [r3, #4]
    b546:	21e8      	movs	r1, #232	; 0xe8
    b548:	5053      	str	r3, [r2, r1]
            break;
    b54a:	e17d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
    b54c:	4b18      	ldr	r3, [pc, #96]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b54e:	4a19      	ldr	r2, [pc, #100]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b550:	589a      	ldr	r2, [r3, r2]
    b552:	687b      	ldr	r3, [r7, #4]
    b554:	685b      	ldr	r3, [r3, #4]
    b556:	21ec      	movs	r1, #236	; 0xec
    b558:	5053      	str	r3, [r2, r1]
            break;
    b55a:	e175      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
    b55c:	4b14      	ldr	r3, [pc, #80]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b55e:	4a15      	ldr	r2, [pc, #84]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b560:	589a      	ldr	r2, [r3, r2]
    b562:	687b      	ldr	r3, [r7, #4]
    b564:	685b      	ldr	r3, [r3, #4]
    b566:	21f0      	movs	r1, #240	; 0xf0
    b568:	5053      	str	r3, [r2, r1]
            break;
    b56a:	e16d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	2204      	movs	r2, #4
    b570:	569a      	ldrsb	r2, [r3, r2]
    b572:	2308      	movs	r3, #8
    b574:	18fb      	adds	r3, r7, r3
    b576:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
    b578:	4b0d      	ldr	r3, [pc, #52]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b57a:	4a0e      	ldr	r2, [pc, #56]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b57c:	589b      	ldr	r3, [r3, r2]
    b57e:	781b      	ldrb	r3, [r3, #0]
    b580:	2208      	movs	r2, #8
    b582:	18b9      	adds	r1, r7, r2
    b584:	2205      	movs	r2, #5
    b586:	0018      	movs	r0, r3
    b588:	4b0c      	ldr	r3, [pc, #48]	; (b5bc <LoRaMacMibSetRequestConfirm+0x6d0>)
    b58a:	4798      	blx	r3
    b58c:	1e03      	subs	r3, r0, #0
    b58e:	d008      	beq.n	b5a2 <LoRaMacMibSetRequestConfirm+0x6b6>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
    b590:	4b07      	ldr	r3, [pc, #28]	; (b5b0 <LoRaMacMibSetRequestConfirm+0x6c4>)
    b592:	4a08      	ldr	r2, [pc, #32]	; (b5b4 <LoRaMacMibSetRequestConfirm+0x6c8>)
    b594:	589b      	ldr	r3, [r3, r2]
    b596:	2208      	movs	r2, #8
    b598:	18ba      	adds	r2, r7, r2
    b59a:	7812      	ldrb	r2, [r2, #0]
    b59c:	b252      	sxtb	r2, r2
    b59e:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b5a0:	e152      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b5a2:	2317      	movs	r3, #23
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	2203      	movs	r2, #3
    b5a8:	701a      	strb	r2, [r3, #0]
            break;
    b5aa:	e14d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
    b5ac:	0000e35d 	.word	0x0000e35d
    b5b0:	20000c8c 	.word	0x20000c8c
    b5b4:	000004c4 	.word	0x000004c4
    b5b8:	0001f2a4 	.word	0x0001f2a4
    b5bc:	0000ffa1 	.word	0x0000ffa1
    b5c0:	20001068 	.word	0x20001068
    b5c4:	00010041 	.word	0x00010041
    b5c8:	0000966d 	.word	0x0000966d
    b5cc:	00010011 	.word	0x00010011
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
    b5d0:	687b      	ldr	r3, [r7, #4]
    b5d2:	2204      	movs	r2, #4
    b5d4:	569a      	ldrsb	r2, [r3, r2]
    b5d6:	2308      	movs	r3, #8
    b5d8:	18fb      	adds	r3, r7, r3
    b5da:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    b5dc:	4ba0      	ldr	r3, [pc, #640]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b5de:	4aa1      	ldr	r2, [pc, #644]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b5e0:	589a      	ldr	r2, [r3, r2]
    b5e2:	2380      	movs	r3, #128	; 0x80
    b5e4:	005b      	lsls	r3, r3, #1
    b5e6:	5cd2      	ldrb	r2, [r2, r3]
    b5e8:	2308      	movs	r3, #8
    b5ea:	18fb      	adds	r3, r7, r3
    b5ec:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    b5ee:	4b9c      	ldr	r3, [pc, #624]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b5f0:	4a9c      	ldr	r2, [pc, #624]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b5f2:	589b      	ldr	r3, [r3, r2]
    b5f4:	781b      	ldrb	r3, [r3, #0]
    b5f6:	2208      	movs	r2, #8
    b5f8:	18b9      	adds	r1, r7, r2
    b5fa:	2204      	movs	r2, #4
    b5fc:	0018      	movs	r0, r3
    b5fe:	4b9a      	ldr	r3, [pc, #616]	; (b868 <LoRaMacMibSetRequestConfirm+0x97c>)
    b600:	4798      	blx	r3
    b602:	1e03      	subs	r3, r0, #0
    b604:	d009      	beq.n	b61a <LoRaMacMibSetRequestConfirm+0x72e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    b606:	4b96      	ldr	r3, [pc, #600]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b608:	4a96      	ldr	r2, [pc, #600]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b60a:	589b      	ldr	r3, [r3, r2]
    b60c:	2208      	movs	r2, #8
    b60e:	18ba      	adds	r2, r7, r2
    b610:	2100      	movs	r1, #0
    b612:	5651      	ldrsb	r1, [r2, r1]
    b614:	22d5      	movs	r2, #213	; 0xd5
    b616:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b618:	e116      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b61a:	2317      	movs	r3, #23
    b61c:	18fb      	adds	r3, r7, r3
    b61e:	2203      	movs	r2, #3
    b620:	701a      	strb	r2, [r3, #0]
            break;
    b622:	e111      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	2204      	movs	r2, #4
    b628:	569a      	ldrsb	r2, [r3, r2]
    b62a:	2308      	movs	r3, #8
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
    b630:	4b8b      	ldr	r3, [pc, #556]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b632:	4a8c      	ldr	r2, [pc, #560]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b634:	589b      	ldr	r3, [r3, r2]
    b636:	781b      	ldrb	r3, [r3, #0]
    b638:	2208      	movs	r2, #8
    b63a:	18b9      	adds	r1, r7, r2
    b63c:	2209      	movs	r2, #9
    b63e:	0018      	movs	r0, r3
    b640:	4b89      	ldr	r3, [pc, #548]	; (b868 <LoRaMacMibSetRequestConfirm+0x97c>)
    b642:	4798      	blx	r3
    b644:	1e03      	subs	r3, r0, #0
    b646:	d008      	beq.n	b65a <LoRaMacMibSetRequestConfirm+0x76e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
    b648:	4b85      	ldr	r3, [pc, #532]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b64a:	4a86      	ldr	r2, [pc, #536]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b64c:	589b      	ldr	r3, [r3, r2]
    b64e:	2208      	movs	r2, #8
    b650:	18ba      	adds	r2, r7, r2
    b652:	7812      	ldrb	r2, [r2, #0]
    b654:	b252      	sxtb	r2, r2
    b656:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b658:	e0f6      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b65a:	2317      	movs	r3, #23
    b65c:	18fb      	adds	r3, r7, r3
    b65e:	2203      	movs	r2, #3
    b660:	701a      	strb	r2, [r3, #0]
            break;
    b662:	e0f1      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	2204      	movs	r2, #4
    b668:	569a      	ldrsb	r2, [r3, r2]
    b66a:	2308      	movs	r3, #8
    b66c:	18fb      	adds	r3, r7, r3
    b66e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
    b670:	4b7b      	ldr	r3, [pc, #492]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b672:	4a7c      	ldr	r2, [pc, #496]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b674:	589b      	ldr	r3, [r3, r2]
    b676:	781b      	ldrb	r3, [r3, #0]
    b678:	2208      	movs	r2, #8
    b67a:	18b9      	adds	r1, r7, r2
    b67c:	2208      	movs	r2, #8
    b67e:	0018      	movs	r0, r3
    b680:	4b79      	ldr	r3, [pc, #484]	; (b868 <LoRaMacMibSetRequestConfirm+0x97c>)
    b682:	4798      	blx	r3
    b684:	1e03      	subs	r3, r0, #0
    b686:	d009      	beq.n	b69c <LoRaMacMibSetRequestConfirm+0x7b0>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
    b688:	4b75      	ldr	r3, [pc, #468]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b68a:	4a76      	ldr	r2, [pc, #472]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b68c:	589b      	ldr	r3, [r3, r2]
    b68e:	2208      	movs	r2, #8
    b690:	18ba      	adds	r2, r7, r2
    b692:	2100      	movs	r1, #0
    b694:	5651      	ldrsb	r1, [r2, r1]
    b696:	22d4      	movs	r2, #212	; 0xd4
    b698:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b69a:	e0d5      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b69c:	2317      	movs	r3, #23
    b69e:	18fb      	adds	r3, r7, r3
    b6a0:	2203      	movs	r2, #3
    b6a2:	701a      	strb	r2, [r3, #0]
            break;
    b6a4:	e0d0      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
    b6a6:	4b6e      	ldr	r3, [pc, #440]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6a8:	4a6e      	ldr	r2, [pc, #440]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6aa:	5899      	ldr	r1, [r3, r2]
    b6ac:	4b6c      	ldr	r3, [pc, #432]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6ae:	4a6d      	ldr	r2, [pc, #436]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6b0:	589b      	ldr	r3, [r3, r2]
    b6b2:	687a      	ldr	r2, [r7, #4]
    b6b4:	6852      	ldr	r2, [r2, #4]
    b6b6:	609a      	str	r2, [r3, #8]
    b6b8:	689b      	ldr	r3, [r3, #8]
    b6ba:	22d8      	movs	r2, #216	; 0xd8
    b6bc:	508b      	str	r3, [r1, r2]
            break;
    b6be:	e0c3      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
    b6c0:	4b67      	ldr	r3, [pc, #412]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6c2:	4a68      	ldr	r2, [pc, #416]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6c4:	589a      	ldr	r2, [r3, r2]
    b6c6:	4b66      	ldr	r3, [pc, #408]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6c8:	4966      	ldr	r1, [pc, #408]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6ca:	585b      	ldr	r3, [r3, r1]
    b6cc:	6879      	ldr	r1, [r7, #4]
    b6ce:	7909      	ldrb	r1, [r1, #4]
    b6d0:	7319      	strb	r1, [r3, #12]
    b6d2:	7b19      	ldrb	r1, [r3, #12]
    b6d4:	23dc      	movs	r3, #220	; 0xdc
    b6d6:	54d1      	strb	r1, [r2, r3]
            break;
    b6d8:	e0b6      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
    b6da:	4b61      	ldr	r3, [pc, #388]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6dc:	4a61      	ldr	r2, [pc, #388]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6de:	589a      	ldr	r2, [r3, r2]
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	6859      	ldr	r1, [r3, #4]
    b6e4:	2384      	movs	r3, #132	; 0x84
    b6e6:	005b      	lsls	r3, r3, #1
    b6e8:	50d1      	str	r1, [r2, r3]
            break;
    b6ea:	e0ad      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
    b6ec:	4b5c      	ldr	r3, [pc, #368]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b6ee:	4a5d      	ldr	r2, [pc, #372]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b6f0:	589b      	ldr	r3, [r3, r2]
    b6f2:	687a      	ldr	r2, [r7, #4]
    b6f4:	6852      	ldr	r2, [r2, #4]
    b6f6:	639a      	str	r2, [r3, #56]	; 0x38
            break;
    b6f8:	e0a6      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
    b6fa:	687b      	ldr	r3, [r7, #4]
    b6fc:	685b      	ldr	r3, [r3, #4]
    b6fe:	2b00      	cmp	r3, #0
    b700:	d009      	beq.n	b716 <LoRaMacMibSetRequestConfirm+0x82a>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	685b      	ldr	r3, [r3, #4]
    b706:	2217      	movs	r2, #23
    b708:	18bc      	adds	r4, r7, r2
    b70a:	0018      	movs	r0, r3
    b70c:	4b57      	ldr	r3, [pc, #348]	; (b86c <LoRaMacMibSetRequestConfirm+0x980>)
    b70e:	4798      	blx	r3
    b710:	0003      	movs	r3, r0
    b712:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b714:	e098      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b716:	2317      	movs	r3, #23
    b718:	18fb      	adds	r3, r7, r3
    b71a:	2203      	movs	r2, #3
    b71c:	701a      	strb	r2, [r3, #0]
            break;
    b71e:	e093      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	799b      	ldrb	r3, [r3, #6]
    b724:	2b01      	cmp	r3, #1
    b726:	d811      	bhi.n	b74c <LoRaMacMibSetRequestConfirm+0x860>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
    b728:	4b4d      	ldr	r3, [pc, #308]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b72a:	4a4e      	ldr	r2, [pc, #312]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b72c:	5899      	ldr	r1, [r3, r2]
    b72e:	2387      	movs	r3, #135	; 0x87
    b730:	009a      	lsls	r2, r3, #2
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	685b      	ldr	r3, [r3, #4]
    b736:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	685b      	ldr	r3, [r3, #4]
    b73c:	0018      	movs	r0, r3
    b73e:	4b4c      	ldr	r3, [pc, #304]	; (b870 <LoRaMacMibSetRequestConfirm+0x984>)
    b740:	4798      	blx	r3
    b742:	1e03      	subs	r3, r0, #0
    b744:	d100      	bne.n	b748 <LoRaMacMibSetRequestConfirm+0x85c>
    b746:	e07e      	b.n	b846 <LoRaMacMibSetRequestConfirm+0x95a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    b748:	2311      	movs	r3, #17
    b74a:	e084      	b.n	b856 <LoRaMacMibSetRequestConfirm+0x96a>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b74c:	2317      	movs	r3, #23
    b74e:	18fb      	adds	r3, r7, r3
    b750:	2203      	movs	r2, #3
    b752:	701a      	strb	r2, [r3, #0]
            }
            break;
    b754:	e077      	b.n	b846 <LoRaMacMibSetRequestConfirm+0x95a>
        }
        case MIB_REJOIN_0_CYCLE:
        {
            if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    b756:	4b42      	ldr	r3, [pc, #264]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b758:	4a42      	ldr	r2, [pc, #264]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b75a:	589a      	ldr	r2, [r3, r2]
    b75c:	238b      	movs	r3, #139	; 0x8b
    b75e:	009b      	lsls	r3, r3, #2
    b760:	58d3      	ldr	r3, [r2, r3]
    b762:	4a44      	ldr	r2, [pc, #272]	; (b874 <LoRaMacMibSetRequestConfirm+0x988>)
    b764:	0011      	movs	r1, r2
    b766:	0018      	movs	r0, r3
    b768:	4b43      	ldr	r3, [pc, #268]	; (b878 <LoRaMacMibSetRequestConfirm+0x98c>)
    b76a:	4798      	blx	r3
    b76c:	1e03      	subs	r3, r0, #0
    b76e:	d00d      	beq.n	b78c <LoRaMacMibSetRequestConfirm+0x8a0>
            {
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    b770:	4a3b      	ldr	r2, [pc, #236]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b772:	2397      	movs	r3, #151	; 0x97
    b774:	00db      	lsls	r3, r3, #3
    b776:	58d2      	ldr	r2, [r2, r3]
    b778:	4b40      	ldr	r3, [pc, #256]	; (b87c <LoRaMacMibSetRequestConfirm+0x990>)
    b77a:	0011      	movs	r1, r2
    b77c:	0018      	movs	r0, r3
    b77e:	4b40      	ldr	r3, [pc, #256]	; (b880 <LoRaMacMibSetRequestConfirm+0x994>)
    b780:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin0CycleTimer );
    b782:	4b3e      	ldr	r3, [pc, #248]	; (b87c <LoRaMacMibSetRequestConfirm+0x990>)
    b784:	0018      	movs	r0, r3
    b786:	4b3f      	ldr	r3, [pc, #252]	; (b884 <LoRaMacMibSetRequestConfirm+0x998>)
    b788:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b78a:	e05d      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b78c:	2317      	movs	r3, #23
    b78e:	18fb      	adds	r3, r7, r3
    b790:	2203      	movs	r2, #3
    b792:	701a      	strb	r2, [r3, #0]
            break;
    b794:	e058      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        case MIB_REJOIN_1_CYCLE:
        {
           if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
    b796:	4b32      	ldr	r3, [pc, #200]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b798:	4a32      	ldr	r2, [pc, #200]	; (b864 <LoRaMacMibSetRequestConfirm+0x978>)
    b79a:	589a      	ldr	r2, [r3, r2]
    b79c:	238c      	movs	r3, #140	; 0x8c
    b79e:	009b      	lsls	r3, r3, #2
    b7a0:	58d3      	ldr	r3, [r2, r3]
    b7a2:	4a39      	ldr	r2, [pc, #228]	; (b888 <LoRaMacMibSetRequestConfirm+0x99c>)
    b7a4:	0011      	movs	r1, r2
    b7a6:	0018      	movs	r0, r3
    b7a8:	4b33      	ldr	r3, [pc, #204]	; (b878 <LoRaMacMibSetRequestConfirm+0x98c>)
    b7aa:	4798      	blx	r3
    b7ac:	1e03      	subs	r3, r0, #0
    b7ae:	d00c      	beq.n	b7ca <LoRaMacMibSetRequestConfirm+0x8de>
            {
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    b7b0:	4b2b      	ldr	r3, [pc, #172]	; (b860 <LoRaMacMibSetRequestConfirm+0x974>)
    b7b2:	4a36      	ldr	r2, [pc, #216]	; (b88c <LoRaMacMibSetRequestConfirm+0x9a0>)
    b7b4:	589a      	ldr	r2, [r3, r2]
    b7b6:	4b36      	ldr	r3, [pc, #216]	; (b890 <LoRaMacMibSetRequestConfirm+0x9a4>)
    b7b8:	0011      	movs	r1, r2
    b7ba:	0018      	movs	r0, r3
    b7bc:	4b30      	ldr	r3, [pc, #192]	; (b880 <LoRaMacMibSetRequestConfirm+0x994>)
    b7be:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin1CycleTimer );
    b7c0:	4b33      	ldr	r3, [pc, #204]	; (b890 <LoRaMacMibSetRequestConfirm+0x9a4>)
    b7c2:	0018      	movs	r0, r3
    b7c4:	4b2f      	ldr	r3, [pc, #188]	; (b884 <LoRaMacMibSetRequestConfirm+0x998>)
    b7c6:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    b7c8:	e03e      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    b7ca:	2317      	movs	r3, #23
    b7cc:	18fb      	adds	r3, r7, r3
    b7ce:	2203      	movs	r2, #3
    b7d0:	701a      	strb	r2, [r3, #0]
            break;
    b7d2:	e039      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
    b7d4:	2317      	movs	r3, #23
    b7d6:	18fc      	adds	r4, r7, r3
    b7d8:	687b      	ldr	r3, [r7, #4]
    b7da:	0018      	movs	r0, r3
    b7dc:	4b2d      	ldr	r3, [pc, #180]	; (b894 <LoRaMacMibSetRequestConfirm+0x9a8>)
    b7de:	4798      	blx	r3
    b7e0:	0003      	movs	r3, r0
    b7e2:	7023      	strb	r3, [r4, #0]
            break;
    b7e4:	e030      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7e6:	46c0      	nop			; (mov r8, r8)
    b7e8:	e02e      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7ea:	46c0      	nop			; (mov r8, r8)
    b7ec:	e02c      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7ee:	46c0      	nop			; (mov r8, r8)
    b7f0:	e02a      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7f2:	46c0      	nop			; (mov r8, r8)
    b7f4:	e028      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7f6:	46c0      	nop			; (mov r8, r8)
    b7f8:	e026      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7fa:	46c0      	nop			; (mov r8, r8)
    b7fc:	e024      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b7fe:	46c0      	nop			; (mov r8, r8)
    b800:	e022      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	e020      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b806:	46c0      	nop			; (mov r8, r8)
    b808:	e01e      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b80a:	46c0      	nop			; (mov r8, r8)
    b80c:	e01c      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	e01a      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b812:	46c0      	nop			; (mov r8, r8)
    b814:	e018      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b816:	46c0      	nop			; (mov r8, r8)
    b818:	e016      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b81a:	46c0      	nop			; (mov r8, r8)
    b81c:	e014      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b81e:	46c0      	nop			; (mov r8, r8)
    b820:	e012      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b822:	46c0      	nop			; (mov r8, r8)
    b824:	e010      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b826:	46c0      	nop			; (mov r8, r8)
    b828:	e00e      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	e00c      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b82e:	46c0      	nop			; (mov r8, r8)
    b830:	e00a      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b832:	46c0      	nop			; (mov r8, r8)
    b834:	e008      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b836:	46c0      	nop			; (mov r8, r8)
    b838:	e006      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b83a:	46c0      	nop			; (mov r8, r8)
    b83c:	e004      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b83e:	46c0      	nop			; (mov r8, r8)
    b840:	e002      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b842:	46c0      	nop			; (mov r8, r8)
    b844:	e000      	b.n	b848 <LoRaMacMibSetRequestConfirm+0x95c>
            break;
    b846:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
    b848:	4b13      	ldr	r3, [pc, #76]	; (b898 <LoRaMacMibSetRequestConfirm+0x9ac>)
    b84a:	4798      	blx	r3
    EventMacNvmCtxChanged( );
    b84c:	4b13      	ldr	r3, [pc, #76]	; (b89c <LoRaMacMibSetRequestConfirm+0x9b0>)
    b84e:	4798      	blx	r3
    return status;
    b850:	2317      	movs	r3, #23
    b852:	18fb      	adds	r3, r7, r3
    b854:	781b      	ldrb	r3, [r3, #0]
}
    b856:	0018      	movs	r0, r3
    b858:	46bd      	mov	sp, r7
    b85a:	b007      	add	sp, #28
    b85c:	bd90      	pop	{r4, r7, pc}
    b85e:	46c0      	nop			; (mov r8, r8)
    b860:	20000c8c 	.word	0x20000c8c
    b864:	000004c4 	.word	0x000004c4
    b868:	0000ffa1 	.word	0x0000ffa1
    b86c:	00009cd9 	.word	0x00009cd9
    b870:	0000e2f5 	.word	0x0000e2f5
    b874:	20001144 	.word	0x20001144
    b878:	0000bff1 	.word	0x0000bff1
    b87c:	200010f4 	.word	0x200010f4
    b880:	00017119 	.word	0x00017119
    b884:	00016d8d 	.word	0x00016d8d
    b888:	20001148 	.word	0x20001148
    b88c:	000004bc 	.word	0x000004bc
    b890:	20001108 	.word	0x20001108
    b894:	0000c795 	.word	0x0000c795
    b898:	0000a18d 	.word	0x0000a18d
    b89c:	0000a179 	.word	0x0000a179

0000b8a0 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    b8a0:	b590      	push	{r4, r7, lr}
    b8a2:	b087      	sub	sp, #28
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    b8a8:	2317      	movs	r3, #23
    b8aa:	18fb      	adds	r3, r7, r3
    b8ac:	2202      	movs	r2, #2
    b8ae:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    b8b0:	230c      	movs	r3, #12
    b8b2:	18fb      	adds	r3, r7, r3
    b8b4:	2200      	movs	r2, #0
    b8b6:	701a      	strb	r2, [r3, #0]
    b8b8:	230c      	movs	r3, #12
    b8ba:	18fb      	adds	r3, r7, r3
    b8bc:	2200      	movs	r2, #0
    b8be:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
    b8c0:	687b      	ldr	r3, [r7, #4]
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d101      	bne.n	b8ca <LoRaMacMlmeRequest+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    b8c6:	2303      	movs	r3, #3
    b8c8:	e23b      	b.n	bd42 <LoRaMacMlmeRequest+0x4a2>
    }
    if( MacCtx.MacState != LORAMAC_IDLE )
    b8ca:	4ae2      	ldr	r2, [pc, #904]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b8cc:	23d7      	movs	r3, #215	; 0xd7
    b8ce:	009b      	lsls	r3, r3, #2
    b8d0:	58d3      	ldr	r3, [r2, r3]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d001      	beq.n	b8da <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
    b8d6:	2301      	movs	r3, #1
    b8d8:	e233      	b.n	bd42 <LoRaMacMlmeRequest+0x4a2>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
    b8da:	4bdf      	ldr	r3, [pc, #892]	; (bc58 <LoRaMacMlmeRequest+0x3b8>)
    b8dc:	4798      	blx	r3
    b8de:	1e03      	subs	r3, r0, #0
    b8e0:	d001      	beq.n	b8e6 <LoRaMacMlmeRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
    b8e2:	2301      	movs	r3, #1
    b8e4:	e22d      	b.n	bd42 <LoRaMacMlmeRequest+0x4a2>
    }

    memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
    b8e6:	4bdd      	ldr	r3, [pc, #884]	; (bc5c <LoRaMacMlmeRequest+0x3bc>)
    b8e8:	2214      	movs	r2, #20
    b8ea:	2100      	movs	r1, #0
    b8ec:	0018      	movs	r0, r3
    b8ee:	4bdc      	ldr	r3, [pc, #880]	; (bc60 <LoRaMacMlmeRequest+0x3c0>)
    b8f0:	4798      	blx	r3

    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    b8f2:	4bd8      	ldr	r3, [pc, #864]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b8f4:	4adb      	ldr	r2, [pc, #876]	; (bc64 <LoRaMacMlmeRequest+0x3c4>)
    b8f6:	2101      	movs	r1, #1
    b8f8:	5499      	strb	r1, [r3, r2]

    switch( mlmeRequest->Type )
    b8fa:	687b      	ldr	r3, [r7, #4]
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	2b0d      	cmp	r3, #13
    b900:	d900      	bls.n	b904 <LoRaMacMlmeRequest+0x64>
    b902:	e1f9      	b.n	bcf8 <LoRaMacMlmeRequest+0x458>
    b904:	009a      	lsls	r2, r3, #2
    b906:	4bd8      	ldr	r3, [pc, #864]	; (bc68 <LoRaMacMlmeRequest+0x3c8>)
    b908:	18d3      	adds	r3, r2, r3
    b90a:	681b      	ldr	r3, [r3, #0]
    b90c:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
    b90e:	4ad1      	ldr	r2, [pc, #836]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b910:	23d7      	movs	r3, #215	; 0xd7
    b912:	009b      	lsls	r3, r3, #2
    b914:	58d3      	ldr	r3, [r2, r3]
    b916:	2220      	movs	r2, #32
    b918:	4013      	ands	r3, r2
    b91a:	d001      	beq.n	b920 <LoRaMacMlmeRequest+0x80>
            {
                return LORAMAC_STATUS_BUSY;
    b91c:	2301      	movs	r3, #1
    b91e:	e210      	b.n	bd42 <LoRaMacMlmeRequest+0x4a2>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	685b      	ldr	r3, [r3, #4]
    b924:	2b00      	cmp	r3, #0
    b926:	d003      	beq.n	b930 <LoRaMacMlmeRequest+0x90>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
    b928:	687b      	ldr	r3, [r7, #4]
    b92a:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    b92c:	2b00      	cmp	r3, #0
    b92e:	d101      	bne.n	b934 <LoRaMacMlmeRequest+0x94>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
    b930:	2303      	movs	r3, #3
    b932:	e206      	b.n	bd42 <LoRaMacMlmeRequest+0x4a2>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    b934:	4bc7      	ldr	r3, [pc, #796]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b936:	4acd      	ldr	r2, [pc, #820]	; (bc6c <LoRaMacMlmeRequest+0x3cc>)
    b938:	589a      	ldr	r2, [r3, r2]
    b93a:	2388      	movs	r3, #136	; 0x88
    b93c:	009b      	lsls	r3, r3, #2
    b93e:	2100      	movs	r1, #0
    b940:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
    b942:	4bcb      	ldr	r3, [pc, #812]	; (bc70 <LoRaMacMlmeRequest+0x3d0>)
    b944:	4798      	blx	r3

            MacCtx.MacFlags.Bits.MlmeReq = 1;
    b946:	4bc3      	ldr	r3, [pc, #780]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b948:	4aca      	ldr	r2, [pc, #808]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    b94a:	5c99      	ldrb	r1, [r3, r2]
    b94c:	2004      	movs	r0, #4
    b94e:	4301      	orrs	r1, r0
    b950:	5499      	strb	r1, [r3, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    b952:	687b      	ldr	r3, [r7, #4]
    b954:	7819      	ldrb	r1, [r3, #0]
    b956:	4abf      	ldr	r2, [pc, #764]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b958:	2387      	movs	r3, #135	; 0x87
    b95a:	00db      	lsls	r3, r3, #3
    b95c:	54d1      	strb	r1, [r2, r3]
            queueElement.Request = mlmeRequest->Type;
    b95e:	687b      	ldr	r3, [r7, #4]
    b960:	781a      	ldrb	r2, [r3, #0]
    b962:	2310      	movs	r3, #16
    b964:	18fb      	adds	r3, r7, r3
    b966:	701a      	strb	r2, [r3, #0]

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
    b968:	687b      	ldr	r3, [r7, #4]
    b96a:	685a      	ldr	r2, [r3, #4]
    b96c:	4bb9      	ldr	r3, [pc, #740]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b96e:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
    b970:	687b      	ldr	r3, [r7, #4]
    b972:	689a      	ldr	r2, [r3, #8]
    b974:	4bb7      	ldr	r3, [pc, #732]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b976:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
    b978:	4bb6      	ldr	r3, [pc, #728]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b97a:	4abc      	ldr	r2, [pc, #752]	; (bc6c <LoRaMacMlmeRequest+0x3cc>)
    b97c:	589c      	ldr	r4, [r3, r2]
    b97e:	4bb5      	ldr	r3, [pc, #724]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b980:	4aba      	ldr	r2, [pc, #744]	; (bc6c <LoRaMacMlmeRequest+0x3cc>)
    b982:	589b      	ldr	r3, [r3, r2]
    b984:	781a      	ldrb	r2, [r3, #0]
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	7b1b      	ldrb	r3, [r3, #12]
    b98a:	b25b      	sxtb	r3, r3
    b98c:	0019      	movs	r1, r3
    b98e:	0010      	movs	r0, r2
    b990:	4bb9      	ldr	r3, [pc, #740]	; (bc78 <LoRaMacMlmeRequest+0x3d8>)
    b992:	4798      	blx	r3
    b994:	0003      	movs	r3, r0
    b996:	001a      	movs	r2, r3
    b998:	23d5      	movs	r3, #213	; 0xd5
    b99a:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
    b99c:	2310      	movs	r3, #16
    b99e:	18fb      	adds	r3, r7, r3
    b9a0:	2207      	movs	r2, #7
    b9a2:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    b9a4:	2310      	movs	r3, #16
    b9a6:	18fb      	adds	r3, r7, r3
    b9a8:	2200      	movs	r2, #0
    b9aa:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    b9ac:	2310      	movs	r3, #16
    b9ae:	18fb      	adds	r3, r7, r3
    b9b0:	0018      	movs	r0, r3
    b9b2:	4bb2      	ldr	r3, [pc, #712]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    b9b4:	4798      	blx	r3

            status = SendReJoinReq( JOIN_REQ );
    b9b6:	2317      	movs	r3, #23
    b9b8:	18fc      	adds	r4, r7, r3
    b9ba:	20ff      	movs	r0, #255	; 0xff
    b9bc:	4bb0      	ldr	r3, [pc, #704]	; (bc80 <LoRaMacMlmeRequest+0x3e0>)
    b9be:	4798      	blx	r3
    b9c0:	0003      	movs	r3, r0
    b9c2:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
    b9c4:	2317      	movs	r3, #23
    b9c6:	18fb      	adds	r3, r7, r3
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d011      	beq.n	b9f2 <LoRaMacMlmeRequest+0x152>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
    b9ce:	4ba1      	ldr	r3, [pc, #644]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b9d0:	4aa6      	ldr	r2, [pc, #664]	; (bc6c <LoRaMacMlmeRequest+0x3cc>)
    b9d2:	589c      	ldr	r4, [r3, r2]
    b9d4:	4b9f      	ldr	r3, [pc, #636]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b9d6:	4aa5      	ldr	r2, [pc, #660]	; (bc6c <LoRaMacMlmeRequest+0x3cc>)
    b9d8:	589b      	ldr	r3, [r3, r2]
    b9da:	781a      	ldrb	r2, [r3, #0]
    b9dc:	687b      	ldr	r3, [r7, #4]
    b9de:	7b1b      	ldrb	r3, [r3, #12]
    b9e0:	b25b      	sxtb	r3, r3
    b9e2:	0019      	movs	r1, r3
    b9e4:	0010      	movs	r0, r2
    b9e6:	4ba4      	ldr	r3, [pc, #656]	; (bc78 <LoRaMacMlmeRequest+0x3d8>)
    b9e8:	4798      	blx	r3
    b9ea:	0003      	movs	r3, r0
    b9ec:	001a      	movs	r2, r3
    b9ee:	23d5      	movs	r3, #213	; 0xd5
    b9f0:	54e2      	strb	r2, [r4, r3]
            }
            EventRegionNvmCtxChanged( );
    b9f2:	4ba4      	ldr	r3, [pc, #656]	; (bc84 <LoRaMacMlmeRequest+0x3e4>)
    b9f4:	4798      	blx	r3
            break;
    b9f6:	e188      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        case MLME_REJOIN_0:
        {
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    b9f8:	4b96      	ldr	r3, [pc, #600]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    b9fa:	4a9e      	ldr	r2, [pc, #632]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    b9fc:	5c99      	ldrb	r1, [r3, r2]
    b9fe:	2004      	movs	r0, #4
    ba00:	4301      	orrs	r1, r0
    ba02:	5499      	strb	r1, [r3, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    ba04:	687b      	ldr	r3, [r7, #4]
    ba06:	7819      	ldrb	r1, [r3, #0]
    ba08:	4a92      	ldr	r2, [pc, #584]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    ba0a:	2387      	movs	r3, #135	; 0x87
    ba0c:	00db      	lsls	r3, r3, #3
    ba0e:	54d1      	strb	r1, [r2, r3]

            status = SendReJoinReq( REJOIN_REQ_0 );
    ba10:	2317      	movs	r3, #23
    ba12:	18fc      	adds	r4, r7, r3
    ba14:	2000      	movs	r0, #0
    ba16:	4b9a      	ldr	r3, [pc, #616]	; (bc80 <LoRaMacMlmeRequest+0x3e0>)
    ba18:	4798      	blx	r3
    ba1a:	0003      	movs	r3, r0
    ba1c:	7023      	strb	r3, [r4, #0]

            break;
    ba1e:	e174      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        case MLME_REJOIN_1:
        {
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    ba20:	4b8c      	ldr	r3, [pc, #560]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    ba22:	4a94      	ldr	r2, [pc, #592]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    ba24:	5c99      	ldrb	r1, [r3, r2]
    ba26:	2004      	movs	r0, #4
    ba28:	4301      	orrs	r1, r0
    ba2a:	5499      	strb	r1, [r3, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    ba2c:	687b      	ldr	r3, [r7, #4]
    ba2e:	7819      	ldrb	r1, [r3, #0]
    ba30:	4a88      	ldr	r2, [pc, #544]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    ba32:	2387      	movs	r3, #135	; 0x87
    ba34:	00db      	lsls	r3, r3, #3
    ba36:	54d1      	strb	r1, [r2, r3]

            status = SendReJoinReq( REJOIN_REQ_1 );
    ba38:	2317      	movs	r3, #23
    ba3a:	18fc      	adds	r4, r7, r3
    ba3c:	2001      	movs	r0, #1
    ba3e:	4b90      	ldr	r3, [pc, #576]	; (bc80 <LoRaMacMlmeRequest+0x3e0>)
    ba40:	4798      	blx	r3
    ba42:	0003      	movs	r3, r0
    ba44:	7023      	strb	r3, [r4, #0]

            break;
    ba46:	e160      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        case MLME_LINK_CHECK:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    ba48:	4b82      	ldr	r3, [pc, #520]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    ba4a:	4a8a      	ldr	r2, [pc, #552]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    ba4c:	5c99      	ldrb	r1, [r3, r2]
    ba4e:	2004      	movs	r0, #4
    ba50:	4301      	orrs	r1, r0
    ba52:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    ba54:	687b      	ldr	r3, [r7, #4]
    ba56:	781a      	ldrb	r2, [r3, #0]
    ba58:	2310      	movs	r3, #16
    ba5a:	18fb      	adds	r3, r7, r3
    ba5c:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    ba5e:	2310      	movs	r3, #16
    ba60:	18fb      	adds	r3, r7, r3
    ba62:	2201      	movs	r2, #1
    ba64:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    ba66:	2310      	movs	r3, #16
    ba68:	18fb      	adds	r3, r7, r3
    ba6a:	2200      	movs	r2, #0
    ba6c:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    ba6e:	2310      	movs	r3, #16
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	0018      	movs	r0, r3
    ba74:	4b81      	ldr	r3, [pc, #516]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    ba76:	4798      	blx	r3

            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    ba78:	2317      	movs	r3, #23
    ba7a:	18fb      	adds	r3, r7, r3
    ba7c:	2200      	movs	r2, #0
    ba7e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    ba80:	230c      	movs	r3, #12
    ba82:	18fb      	adds	r3, r7, r3
    ba84:	2200      	movs	r2, #0
    ba86:	0019      	movs	r1, r3
    ba88:	2002      	movs	r0, #2
    ba8a:	4b7f      	ldr	r3, [pc, #508]	; (bc88 <LoRaMacMlmeRequest+0x3e8>)
    ba8c:	4798      	blx	r3
    ba8e:	1e03      	subs	r3, r0, #0
    ba90:	d100      	bne.n	ba94 <LoRaMacMlmeRequest+0x1f4>
    ba92:	e133      	b.n	bcfc <LoRaMacMlmeRequest+0x45c>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    ba94:	2317      	movs	r3, #23
    ba96:	18fb      	adds	r3, r7, r3
    ba98:	2213      	movs	r2, #19
    ba9a:	701a      	strb	r2, [r3, #0]
            }
            break;
    ba9c:	e12e      	b.n	bcfc <LoRaMacMlmeRequest+0x45c>
        }
        case MLME_TXCW:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    ba9e:	4b6d      	ldr	r3, [pc, #436]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    baa0:	4a74      	ldr	r2, [pc, #464]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    baa2:	5c99      	ldrb	r1, [r3, r2]
    baa4:	2004      	movs	r0, #4
    baa6:	4301      	orrs	r1, r0
    baa8:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    baaa:	687b      	ldr	r3, [r7, #4]
    baac:	781a      	ldrb	r2, [r3, #0]
    baae:	2310      	movs	r3, #16
    bab0:	18fb      	adds	r3, r7, r3
    bab2:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bab4:	2310      	movs	r3, #16
    bab6:	18fb      	adds	r3, r7, r3
    bab8:	2201      	movs	r2, #1
    baba:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    babc:	2310      	movs	r3, #16
    babe:	18fb      	adds	r3, r7, r3
    bac0:	2200      	movs	r2, #0
    bac2:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bac4:	2310      	movs	r3, #16
    bac6:	18fb      	adds	r3, r7, r3
    bac8:	0018      	movs	r0, r3
    baca:	4b6c      	ldr	r3, [pc, #432]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    bacc:	4798      	blx	r3

            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
    bace:	687b      	ldr	r3, [r7, #4]
    bad0:	889b      	ldrh	r3, [r3, #4]
    bad2:	2217      	movs	r2, #23
    bad4:	18bc      	adds	r4, r7, r2
    bad6:	0018      	movs	r0, r3
    bad8:	4b6c      	ldr	r3, [pc, #432]	; (bc8c <LoRaMacMlmeRequest+0x3ec>)
    bada:	4798      	blx	r3
    badc:	0003      	movs	r3, r0
    bade:	7023      	strb	r3, [r4, #0]
            break;
    bae0:	e113      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        case MLME_TXCW_1:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    bae2:	4b5c      	ldr	r3, [pc, #368]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    bae4:	4a63      	ldr	r2, [pc, #396]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    bae6:	5c99      	ldrb	r1, [r3, r2]
    bae8:	2004      	movs	r0, #4
    baea:	4301      	orrs	r1, r0
    baec:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    baee:	687b      	ldr	r3, [r7, #4]
    baf0:	781a      	ldrb	r2, [r3, #0]
    baf2:	2310      	movs	r3, #16
    baf4:	18fb      	adds	r3, r7, r3
    baf6:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    baf8:	2310      	movs	r3, #16
    bafa:	18fb      	adds	r3, r7, r3
    bafc:	2201      	movs	r2, #1
    bafe:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    bb00:	2310      	movs	r3, #16
    bb02:	18fb      	adds	r3, r7, r3
    bb04:	2200      	movs	r2, #0
    bb06:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bb08:	2310      	movs	r3, #16
    bb0a:	18fb      	adds	r3, r7, r3
    bb0c:	0018      	movs	r0, r3
    bb0e:	4b5b      	ldr	r3, [pc, #364]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    bb10:	4798      	blx	r3

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	8898      	ldrh	r0, [r3, #4]
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	6899      	ldr	r1, [r3, #8]
    bb1a:	687b      	ldr	r3, [r7, #4]
    bb1c:	7b1b      	ldrb	r3, [r3, #12]
    bb1e:	2217      	movs	r2, #23
    bb20:	18bc      	adds	r4, r7, r2
    bb22:	001a      	movs	r2, r3
    bb24:	4b5a      	ldr	r3, [pc, #360]	; (bc90 <LoRaMacMlmeRequest+0x3f0>)
    bb26:	4798      	blx	r3
    bb28:	0003      	movs	r3, r0
    bb2a:	7023      	strb	r3, [r4, #0]
            break;
    bb2c:	e0ed      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        case MLME_DEVICE_TIME:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    bb2e:	4b49      	ldr	r3, [pc, #292]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    bb30:	4a50      	ldr	r2, [pc, #320]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    bb32:	5c99      	ldrb	r1, [r3, r2]
    bb34:	2004      	movs	r0, #4
    bb36:	4301      	orrs	r1, r0
    bb38:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    bb3a:	687b      	ldr	r3, [r7, #4]
    bb3c:	781a      	ldrb	r2, [r3, #0]
    bb3e:	2310      	movs	r3, #16
    bb40:	18fb      	adds	r3, r7, r3
    bb42:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bb44:	2310      	movs	r3, #16
    bb46:	18fb      	adds	r3, r7, r3
    bb48:	2201      	movs	r2, #1
    bb4a:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    bb4c:	2310      	movs	r3, #16
    bb4e:	18fb      	adds	r3, r7, r3
    bb50:	2200      	movs	r2, #0
    bb52:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bb54:	2310      	movs	r3, #16
    bb56:	18fb      	adds	r3, r7, r3
    bb58:	0018      	movs	r0, r3
    bb5a:	4b48      	ldr	r3, [pc, #288]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    bb5c:	4798      	blx	r3

            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    bb5e:	2317      	movs	r3, #23
    bb60:	18fb      	adds	r3, r7, r3
    bb62:	2200      	movs	r2, #0
    bb64:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    bb66:	230c      	movs	r3, #12
    bb68:	18fb      	adds	r3, r7, r3
    bb6a:	2200      	movs	r2, #0
    bb6c:	0019      	movs	r1, r3
    bb6e:	200d      	movs	r0, #13
    bb70:	4b45      	ldr	r3, [pc, #276]	; (bc88 <LoRaMacMlmeRequest+0x3e8>)
    bb72:	4798      	blx	r3
    bb74:	1e03      	subs	r3, r0, #0
    bb76:	d100      	bne.n	bb7a <LoRaMacMlmeRequest+0x2da>
    bb78:	e0c2      	b.n	bd00 <LoRaMacMlmeRequest+0x460>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    bb7a:	2317      	movs	r3, #23
    bb7c:	18fb      	adds	r3, r7, r3
    bb7e:	2213      	movs	r2, #19
    bb80:	701a      	strb	r2, [r3, #0]
            }
            break;
    bb82:	e0bd      	b.n	bd00 <LoRaMacMlmeRequest+0x460>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
    bb84:	2316      	movs	r3, #22
    bb86:	18fb      	adds	r3, r7, r3
    bb88:	687a      	ldr	r2, [r7, #4]
    bb8a:	7912      	ldrb	r2, [r2, #4]
    bb8c:	701a      	strb	r2, [r3, #0]

            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    bb8e:	4b31      	ldr	r3, [pc, #196]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    bb90:	4a38      	ldr	r2, [pc, #224]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    bb92:	5c99      	ldrb	r1, [r3, r2]
    bb94:	2004      	movs	r0, #4
    bb96:	4301      	orrs	r1, r0
    bb98:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	781a      	ldrb	r2, [r3, #0]
    bb9e:	2310      	movs	r3, #16
    bba0:	18fb      	adds	r3, r7, r3
    bba2:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bba4:	2310      	movs	r3, #16
    bba6:	18fb      	adds	r3, r7, r3
    bba8:	2201      	movs	r2, #1
    bbaa:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    bbac:	2310      	movs	r3, #16
    bbae:	18fb      	adds	r3, r7, r3
    bbb0:	2200      	movs	r2, #0
    bbb2:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bbb4:	2310      	movs	r3, #16
    bbb6:	18fb      	adds	r3, r7, r3
    bbb8:	0018      	movs	r0, r3
    bbba:	4b30      	ldr	r3, [pc, #192]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    bbbc:	4798      	blx	r3

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
    bbbe:	687b      	ldr	r3, [r7, #4]
    bbc0:	791b      	ldrb	r3, [r3, #4]
    bbc2:	075b      	lsls	r3, r3, #29
    bbc4:	0f5b      	lsrs	r3, r3, #29
    bbc6:	b2db      	uxtb	r3, r3
    bbc8:	0018      	movs	r0, r3
    bbca:	4b32      	ldr	r3, [pc, #200]	; (bc94 <LoRaMacMlmeRequest+0x3f4>)
    bbcc:	4798      	blx	r3
            macCmdPayload[0] = value;
    bbce:	230c      	movs	r3, #12
    bbd0:	18fb      	adds	r3, r7, r3
    bbd2:	2216      	movs	r2, #22
    bbd4:	18ba      	adds	r2, r7, r2
    bbd6:	7812      	ldrb	r2, [r2, #0]
    bbd8:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
    bbda:	2317      	movs	r3, #23
    bbdc:	18fb      	adds	r3, r7, r3
    bbde:	2200      	movs	r2, #0
    bbe0:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
    bbe2:	230c      	movs	r3, #12
    bbe4:	18fb      	adds	r3, r7, r3
    bbe6:	2201      	movs	r2, #1
    bbe8:	0019      	movs	r1, r3
    bbea:	2010      	movs	r0, #16
    bbec:	4b26      	ldr	r3, [pc, #152]	; (bc88 <LoRaMacMlmeRequest+0x3e8>)
    bbee:	4798      	blx	r3
    bbf0:	1e03      	subs	r3, r0, #0
    bbf2:	d100      	bne.n	bbf6 <LoRaMacMlmeRequest+0x356>
    bbf4:	e086      	b.n	bd04 <LoRaMacMlmeRequest+0x464>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    bbf6:	2317      	movs	r3, #23
    bbf8:	18fb      	adds	r3, r7, r3
    bbfa:	2213      	movs	r2, #19
    bbfc:	701a      	strb	r2, [r3, #0]
            }
            break;
    bbfe:	e081      	b.n	bd04 <LoRaMacMlmeRequest+0x464>
        }
        case MLME_BEACON_TIMING:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    bc00:	4b14      	ldr	r3, [pc, #80]	; (bc54 <LoRaMacMlmeRequest+0x3b4>)
    bc02:	4a1c      	ldr	r2, [pc, #112]	; (bc74 <LoRaMacMlmeRequest+0x3d4>)
    bc04:	5c99      	ldrb	r1, [r3, r2]
    bc06:	2004      	movs	r0, #4
    bc08:	4301      	orrs	r1, r0
    bc0a:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    bc0c:	687b      	ldr	r3, [r7, #4]
    bc0e:	781a      	ldrb	r2, [r3, #0]
    bc10:	2310      	movs	r3, #16
    bc12:	18fb      	adds	r3, r7, r3
    bc14:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bc16:	2310      	movs	r3, #16
    bc18:	18fb      	adds	r3, r7, r3
    bc1a:	2201      	movs	r2, #1
    bc1c:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    bc1e:	2310      	movs	r3, #16
    bc20:	18fb      	adds	r3, r7, r3
    bc22:	2200      	movs	r2, #0
    bc24:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bc26:	2310      	movs	r3, #16
    bc28:	18fb      	adds	r3, r7, r3
    bc2a:	0018      	movs	r0, r3
    bc2c:	4b13      	ldr	r3, [pc, #76]	; (bc7c <LoRaMacMlmeRequest+0x3dc>)
    bc2e:	4798      	blx	r3

            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    bc30:	2317      	movs	r3, #23
    bc32:	18fb      	adds	r3, r7, r3
    bc34:	2200      	movs	r2, #0
    bc36:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    bc38:	230c      	movs	r3, #12
    bc3a:	18fb      	adds	r3, r7, r3
    bc3c:	2200      	movs	r2, #0
    bc3e:	0019      	movs	r1, r3
    bc40:	2012      	movs	r0, #18
    bc42:	4b11      	ldr	r3, [pc, #68]	; (bc88 <LoRaMacMlmeRequest+0x3e8>)
    bc44:	4798      	blx	r3
    bc46:	1e03      	subs	r3, r0, #0
    bc48:	d05e      	beq.n	bd08 <LoRaMacMlmeRequest+0x468>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    bc4a:	2317      	movs	r3, #23
    bc4c:	18fb      	adds	r3, r7, r3
    bc4e:	2213      	movs	r2, #19
    bc50:	701a      	strb	r2, [r3, #0]
            }
            break;
    bc52:	e059      	b.n	bd08 <LoRaMacMlmeRequest+0x468>
    bc54:	20000c8c 	.word	0x20000c8c
    bc58:	0000d329 	.word	0x0000d329
    bc5c:	200010c4 	.word	0x200010c4
    bc60:	000043b1 	.word	0x000043b1
    bc64:	00000439 	.word	0x00000439
    bc68:	0001f540 	.word	0x0001f540
    bc6c:	000004c4 	.word	0x000004c4
    bc70:	00009489 	.word	0x00009489
    bc74:	00000465 	.word	0x00000465
    bc78:	00010209 	.word	0x00010209
    bc7c:	0000cff5 	.word	0x0000cff5
    bc80:	00008cad 	.word	0x00008cad
    bc84:	0000a18d 	.word	0x0000a18d
    bc88:	0000cb11 	.word	0x0000cb11
    bc8c:	00009b05 	.word	0x00009b05
    bc90:	00009bb1 	.word	0x00009bb1
    bc94:	0000c745 	.word	0x0000c745
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    bc98:	4b2c      	ldr	r3, [pc, #176]	; (bd4c <LoRaMacMlmeRequest+0x4ac>)
    bc9a:	4a2d      	ldr	r2, [pc, #180]	; (bd50 <LoRaMacMlmeRequest+0x4b0>)
    bc9c:	5c99      	ldrb	r1, [r3, r2]
    bc9e:	2004      	movs	r0, #4
    bca0:	4301      	orrs	r1, r0
    bca2:	5499      	strb	r1, [r3, r2]
            queueElement.Request = mlmeRequest->Type;
    bca4:	687b      	ldr	r3, [r7, #4]
    bca6:	781a      	ldrb	r2, [r3, #0]
    bca8:	2310      	movs	r3, #16
    bcaa:	18fb      	adds	r3, r7, r3
    bcac:	701a      	strb	r2, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bcae:	2310      	movs	r3, #16
    bcb0:	18fb      	adds	r3, r7, r3
    bcb2:	2201      	movs	r2, #1
    bcb4:	705a      	strb	r2, [r3, #1]
            queueElement.RestrictCommonReadyToHandle = true;
    bcb6:	2310      	movs	r3, #16
    bcb8:	18fb      	adds	r3, r7, r3
    bcba:	2201      	movs	r2, #1
    bcbc:	70da      	strb	r2, [r3, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    bcbe:	2310      	movs	r3, #16
    bcc0:	18fb      	adds	r3, r7, r3
    bcc2:	0018      	movs	r0, r3
    bcc4:	4b23      	ldr	r3, [pc, #140]	; (bd54 <LoRaMacMlmeRequest+0x4b4>)
    bcc6:	4798      	blx	r3

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
    bcc8:	4b23      	ldr	r3, [pc, #140]	; (bd58 <LoRaMacMlmeRequest+0x4b8>)
    bcca:	4798      	blx	r3
    bccc:	0003      	movs	r3, r0
    bcce:	001a      	movs	r2, r3
    bcd0:	2301      	movs	r3, #1
    bcd2:	4053      	eors	r3, r2
    bcd4:	b2db      	uxtb	r3, r3
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d009      	beq.n	bcee <LoRaMacMlmeRequest+0x44e>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
    bcda:	2000      	movs	r0, #0
    bcdc:	4b1f      	ldr	r3, [pc, #124]	; (bd5c <LoRaMacMlmeRequest+0x4bc>)
    bcde:	4798      	blx	r3
                LoRaMacClassBBeaconTimerEvent( );
    bce0:	4b1f      	ldr	r3, [pc, #124]	; (bd60 <LoRaMacMlmeRequest+0x4c0>)
    bce2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
    bce4:	2317      	movs	r3, #23
    bce6:	18fb      	adds	r3, r7, r3
    bce8:	2200      	movs	r2, #0
    bcea:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
    bcec:	e00d      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
                status = LORAMAC_STATUS_BUSY;
    bcee:	2317      	movs	r3, #23
    bcf0:	18fb      	adds	r3, r7, r3
    bcf2:	2201      	movs	r2, #1
    bcf4:	701a      	strb	r2, [r3, #0]
            break;
    bcf6:	e008      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
        }
        default:
            break;
    bcf8:	46c0      	nop			; (mov r8, r8)
    bcfa:	e006      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
            break;
    bcfc:	46c0      	nop			; (mov r8, r8)
    bcfe:	e004      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
            break;
    bd00:	46c0      	nop			; (mov r8, r8)
    bd02:	e002      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
            break;
    bd04:	46c0      	nop			; (mov r8, r8)
    bd06:	e000      	b.n	bd0a <LoRaMacMlmeRequest+0x46a>
            break;
    bd08:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
    bd0a:	2317      	movs	r3, #23
    bd0c:	18fb      	adds	r3, r7, r3
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d011      	beq.n	bd38 <LoRaMacMlmeRequest+0x498>
    {
        MacCtx.NvmCtx->NodeAckRequested = false;
    bd14:	4b0d      	ldr	r3, [pc, #52]	; (bd4c <LoRaMacMlmeRequest+0x4ac>)
    bd16:	4a13      	ldr	r2, [pc, #76]	; (bd64 <LoRaMacMlmeRequest+0x4c4>)
    bd18:	589b      	ldr	r3, [r3, r2]
    bd1a:	4a13      	ldr	r2, [pc, #76]	; (bd68 <LoRaMacMlmeRequest+0x4c8>)
    bd1c:	2100      	movs	r1, #0
    bd1e:	5499      	strb	r1, [r3, r2]
        LoRaMacConfirmQueueRemoveLast( );
    bd20:	4b12      	ldr	r3, [pc, #72]	; (bd6c <LoRaMacMlmeRequest+0x4cc>)
    bd22:	4798      	blx	r3
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
    bd24:	4b12      	ldr	r3, [pc, #72]	; (bd70 <LoRaMacMlmeRequest+0x4d0>)
    bd26:	4798      	blx	r3
    bd28:	1e03      	subs	r3, r0, #0
    bd2a:	d105      	bne.n	bd38 <LoRaMacMlmeRequest+0x498>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    bd2c:	4b07      	ldr	r3, [pc, #28]	; (bd4c <LoRaMacMlmeRequest+0x4ac>)
    bd2e:	4a08      	ldr	r2, [pc, #32]	; (bd50 <LoRaMacMlmeRequest+0x4b0>)
    bd30:	5c99      	ldrb	r1, [r3, r2]
    bd32:	2004      	movs	r0, #4
    bd34:	4381      	bics	r1, r0
    bd36:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
    bd38:	4b0e      	ldr	r3, [pc, #56]	; (bd74 <LoRaMacMlmeRequest+0x4d4>)
    bd3a:	4798      	blx	r3
    return status;
    bd3c:	2317      	movs	r3, #23
    bd3e:	18fb      	adds	r3, r7, r3
    bd40:	781b      	ldrb	r3, [r3, #0]
}
    bd42:	0018      	movs	r0, r3
    bd44:	46bd      	mov	sp, r7
    bd46:	b007      	add	sp, #28
    bd48:	bd90      	pop	{r4, r7, pc}
    bd4a:	46c0      	nop			; (mov r8, r8)
    bd4c:	20000c8c 	.word	0x20000c8c
    bd50:	00000465 	.word	0x00000465
    bd54:	0000cff5 	.word	0x0000cff5
    bd58:	0000c6d3 	.word	0x0000c6d3
    bd5c:	0000c697 	.word	0x0000c697
    bd60:	0000c6df 	.word	0x0000c6df
    bd64:	000004c4 	.word	0x000004c4
    bd68:	00000217 	.word	0x00000217
    bd6c:	0000d061 	.word	0x0000d061
    bd70:	0000d315 	.word	0x0000d315
    bd74:	0000a179 	.word	0x0000a179

0000bd78 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
    bd78:	b5b0      	push	{r4, r5, r7, lr}
    bd7a:	b08a      	sub	sp, #40	; 0x28
    bd7c:	af00      	add	r7, sp, #0
    bd7e:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    bd80:	2327      	movs	r3, #39	; 0x27
    bd82:	18fb      	adds	r3, r7, r3
    bd84:	2202      	movs	r2, #2
    bd86:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
    bd88:	2326      	movs	r3, #38	; 0x26
    bd8a:	18fb      	adds	r3, r7, r3
    bd8c:	2200      	movs	r2, #0
    bd8e:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bd90:	231d      	movs	r3, #29
    bd92:	18fb      	adds	r3, r7, r3
    bd94:	2200      	movs	r2, #0
    bd96:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
    bd98:	231c      	movs	r3, #28
    bd9a:	18fb      	adds	r3, r7, r3
    bd9c:	2200      	movs	r2, #0
    bd9e:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
    bda0:	687b      	ldr	r3, [r7, #4]
    bda2:	2b00      	cmp	r3, #0
    bda4:	d101      	bne.n	bdaa <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    bda6:	2303      	movs	r3, #3
    bda8:	e106      	b.n	bfb8 <LoRaMacMcpsRequest+0x240>
    }
    if( MacCtx.MacState != LORAMAC_IDLE )
    bdaa:	4a85      	ldr	r2, [pc, #532]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bdac:	23d7      	movs	r3, #215	; 0xd7
    bdae:	009b      	lsls	r3, r3, #2
    bdb0:	58d3      	ldr	r3, [r2, r3]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d001      	beq.n	bdba <LoRaMacMcpsRequest+0x42>
    {
        return LORAMAC_STATUS_BUSY;
    bdb6:	2301      	movs	r3, #1
    bdb8:	e0fe      	b.n	bfb8 <LoRaMacMcpsRequest+0x240>
    }

    macHdr.Value = 0;
    bdba:	2310      	movs	r3, #16
    bdbc:	18fb      	adds	r3, r7, r3
    bdbe:	2200      	movs	r2, #0
    bdc0:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
    bdc2:	4b80      	ldr	r3, [pc, #512]	; (bfc4 <LoRaMacMcpsRequest+0x24c>)
    bdc4:	2214      	movs	r2, #20
    bdc6:	2100      	movs	r1, #0
    bdc8:	0018      	movs	r0, r3
    bdca:	4b7f      	ldr	r3, [pc, #508]	; (bfc8 <LoRaMacMcpsRequest+0x250>)
    bdcc:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    bdce:	4b7c      	ldr	r3, [pc, #496]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bdd0:	4a7e      	ldr	r2, [pc, #504]	; (bfcc <LoRaMacMcpsRequest+0x254>)
    bdd2:	2101      	movs	r1, #1
    bdd4:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
    bdd6:	687b      	ldr	r3, [r7, #4]
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	2b01      	cmp	r3, #1
    bddc:	d024      	beq.n	be28 <LoRaMacMcpsRequest+0xb0>
    bdde:	2b03      	cmp	r3, #3
    bde0:	d043      	beq.n	be6a <LoRaMacMcpsRequest+0xf2>
    bde2:	2b00      	cmp	r3, #0
    bde4:	d000      	beq.n	bde8 <LoRaMacMcpsRequest+0x70>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
    bde6:	e059      	b.n	be9c <LoRaMacMcpsRequest+0x124>
            readyToSend = true;
    bde8:	231c      	movs	r3, #28
    bdea:	18fb      	adds	r3, r7, r3
    bdec:	2201      	movs	r2, #1
    bdee:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
    bdf0:	2310      	movs	r3, #16
    bdf2:	18fb      	adds	r3, r7, r3
    bdf4:	781a      	ldrb	r2, [r3, #0]
    bdf6:	211f      	movs	r1, #31
    bdf8:	400a      	ands	r2, r1
    bdfa:	1c11      	adds	r1, r2, #0
    bdfc:	2240      	movs	r2, #64	; 0x40
    bdfe:	430a      	orrs	r2, r1
    be00:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
    be02:	2326      	movs	r3, #38	; 0x26
    be04:	18fb      	adds	r3, r7, r3
    be06:	687a      	ldr	r2, [r7, #4]
    be08:	7912      	ldrb	r2, [r2, #4]
    be0a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
    be0c:	687b      	ldr	r3, [r7, #4]
    be0e:	689b      	ldr	r3, [r3, #8]
    be10:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
    be12:	231e      	movs	r3, #30
    be14:	18fb      	adds	r3, r7, r3
    be16:	687a      	ldr	r2, [r7, #4]
    be18:	8992      	ldrh	r2, [r2, #12]
    be1a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
    be1c:	231d      	movs	r3, #29
    be1e:	18fb      	adds	r3, r7, r3
    be20:	687a      	ldr	r2, [r7, #4]
    be22:	7b92      	ldrb	r2, [r2, #14]
    be24:	701a      	strb	r2, [r3, #0]
            break;
    be26:	e039      	b.n	be9c <LoRaMacMcpsRequest+0x124>
            readyToSend = true;
    be28:	231c      	movs	r3, #28
    be2a:	18fb      	adds	r3, r7, r3
    be2c:	2201      	movs	r2, #1
    be2e:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
    be30:	2310      	movs	r3, #16
    be32:	18fb      	adds	r3, r7, r3
    be34:	781a      	ldrb	r2, [r3, #0]
    be36:	211f      	movs	r1, #31
    be38:	400a      	ands	r2, r1
    be3a:	1c11      	adds	r1, r2, #0
    be3c:	2280      	movs	r2, #128	; 0x80
    be3e:	4252      	negs	r2, r2
    be40:	430a      	orrs	r2, r1
    be42:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
    be44:	2326      	movs	r3, #38	; 0x26
    be46:	18fb      	adds	r3, r7, r3
    be48:	687a      	ldr	r2, [r7, #4]
    be4a:	7912      	ldrb	r2, [r2, #4]
    be4c:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
    be4e:	687b      	ldr	r3, [r7, #4]
    be50:	689b      	ldr	r3, [r3, #8]
    be52:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
    be54:	231e      	movs	r3, #30
    be56:	18fb      	adds	r3, r7, r3
    be58:	687a      	ldr	r2, [r7, #4]
    be5a:	8992      	ldrh	r2, [r2, #12]
    be5c:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
    be5e:	231d      	movs	r3, #29
    be60:	18fb      	adds	r3, r7, r3
    be62:	687a      	ldr	r2, [r7, #4]
    be64:	7b92      	ldrb	r2, [r2, #14]
    be66:	701a      	strb	r2, [r3, #0]
            break;
    be68:	e018      	b.n	be9c <LoRaMacMcpsRequest+0x124>
            readyToSend = true;
    be6a:	231c      	movs	r3, #28
    be6c:	18fb      	adds	r3, r7, r3
    be6e:	2201      	movs	r2, #1
    be70:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
    be72:	2310      	movs	r3, #16
    be74:	18fb      	adds	r3, r7, r3
    be76:	781a      	ldrb	r2, [r3, #0]
    be78:	2120      	movs	r1, #32
    be7a:	4249      	negs	r1, r1
    be7c:	430a      	orrs	r2, r1
    be7e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
    be80:	687b      	ldr	r3, [r7, #4]
    be82:	685b      	ldr	r3, [r3, #4]
    be84:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
    be86:	231e      	movs	r3, #30
    be88:	18fb      	adds	r3, r7, r3
    be8a:	687a      	ldr	r2, [r7, #4]
    be8c:	8912      	ldrh	r2, [r2, #8]
    be8e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
    be90:	231d      	movs	r3, #29
    be92:	18fb      	adds	r3, r7, r3
    be94:	687a      	ldr	r2, [r7, #4]
    be96:	7a92      	ldrb	r2, [r2, #10]
    be98:	701a      	strb	r2, [r3, #0]
            break;
    be9a:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    be9c:	2318      	movs	r3, #24
    be9e:	18fb      	adds	r3, r7, r3
    bea0:	2201      	movs	r2, #1
    bea2:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    bea4:	4b46      	ldr	r3, [pc, #280]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bea6:	4a4a      	ldr	r2, [pc, #296]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bea8:	589a      	ldr	r2, [r3, r2]
    beaa:	2380      	movs	r3, #128	; 0x80
    beac:	005b      	lsls	r3, r3, #1
    beae:	5cd2      	ldrb	r2, [r2, r3]
    beb0:	2318      	movs	r3, #24
    beb2:	18fb      	adds	r3, r7, r3
    beb4:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    beb6:	4b42      	ldr	r3, [pc, #264]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    beb8:	4a45      	ldr	r2, [pc, #276]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    beba:	589b      	ldr	r3, [r3, r2]
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	2218      	movs	r2, #24
    bec0:	18ba      	adds	r2, r7, r2
    bec2:	0011      	movs	r1, r2
    bec4:	0018      	movs	r0, r3
    bec6:	4b43      	ldr	r3, [pc, #268]	; (bfd4 <LoRaMacMcpsRequest+0x25c>)
    bec8:	4798      	blx	r3
    beca:	0003      	movs	r3, r0
    becc:	001a      	movs	r2, r3
    bece:	2314      	movs	r3, #20
    bed0:	18fb      	adds	r3, r7, r3
    bed2:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
    bed4:	2314      	movs	r3, #20
    bed6:	18fb      	adds	r3, r7, r3
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	b259      	sxtb	r1, r3
    bedc:	231d      	movs	r3, #29
    bede:	18fa      	adds	r2, r7, r3
    bee0:	231d      	movs	r3, #29
    bee2:	18fb      	adds	r3, r7, r3
    bee4:	781c      	ldrb	r4, [r3, #0]
    bee6:	1c0b      	adds	r3, r1, #0
    bee8:	b258      	sxtb	r0, r3
    beea:	b261      	sxtb	r1, r4
    beec:	4288      	cmp	r0, r1
    beee:	da00      	bge.n	bef2 <LoRaMacMcpsRequest+0x17a>
    bef0:	1c23      	adds	r3, r4, #0
    bef2:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
    bef4:	231c      	movs	r3, #28
    bef6:	18fb      	adds	r3, r7, r3
    bef8:	781b      	ldrb	r3, [r3, #0]
    befa:	2b00      	cmp	r3, #0
    befc:	d057      	beq.n	bfae <LoRaMacMcpsRequest+0x236>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
    befe:	4b30      	ldr	r3, [pc, #192]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf00:	4a33      	ldr	r2, [pc, #204]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bf02:	589b      	ldr	r3, [r3, r2]
    bf04:	22ca      	movs	r2, #202	; 0xca
    bf06:	5c9b      	ldrb	r3, [r3, r2]
    bf08:	2201      	movs	r2, #1
    bf0a:	4053      	eors	r3, r2
    bf0c:	b2db      	uxtb	r3, r3
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d026      	beq.n	bf60 <LoRaMacMcpsRequest+0x1e8>
        {
            verify.DatarateParams.Datarate = datarate;
    bf12:	230c      	movs	r3, #12
    bf14:	18fb      	adds	r3, r7, r3
    bf16:	221d      	movs	r2, #29
    bf18:	18ba      	adds	r2, r7, r2
    bf1a:	7812      	ldrb	r2, [r2, #0]
    bf1c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    bf1e:	4b28      	ldr	r3, [pc, #160]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf20:	4a2b      	ldr	r2, [pc, #172]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bf22:	589a      	ldr	r2, [r3, r2]
    bf24:	2380      	movs	r3, #128	; 0x80
    bf26:	005b      	lsls	r3, r3, #1
    bf28:	5cd2      	ldrb	r2, [r2, r3]
    bf2a:	230c      	movs	r3, #12
    bf2c:	18fb      	adds	r3, r7, r3
    bf2e:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    bf30:	4b23      	ldr	r3, [pc, #140]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf32:	4a27      	ldr	r2, [pc, #156]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bf34:	589b      	ldr	r3, [r3, r2]
    bf36:	781b      	ldrb	r3, [r3, #0]
    bf38:	220c      	movs	r2, #12
    bf3a:	18b9      	adds	r1, r7, r2
    bf3c:	2204      	movs	r2, #4
    bf3e:	0018      	movs	r0, r3
    bf40:	4b25      	ldr	r3, [pc, #148]	; (bfd8 <LoRaMacMcpsRequest+0x260>)
    bf42:	4798      	blx	r3
    bf44:	1e03      	subs	r3, r0, #0
    bf46:	d009      	beq.n	bf5c <LoRaMacMcpsRequest+0x1e4>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    bf48:	4b1d      	ldr	r3, [pc, #116]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf4a:	4a21      	ldr	r2, [pc, #132]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bf4c:	589b      	ldr	r3, [r3, r2]
    bf4e:	220c      	movs	r2, #12
    bf50:	18ba      	adds	r2, r7, r2
    bf52:	2100      	movs	r1, #0
    bf54:	5651      	ldrsb	r1, [r2, r1]
    bf56:	22d5      	movs	r2, #213	; 0xd5
    bf58:	5499      	strb	r1, [r3, r2]
    bf5a:	e001      	b.n	bf60 <LoRaMacMcpsRequest+0x1e8>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
    bf5c:	2303      	movs	r3, #3
    bf5e:	e02b      	b.n	bfb8 <LoRaMacMcpsRequest+0x240>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
    bf60:	2327      	movs	r3, #39	; 0x27
    bf62:	18fc      	adds	r4, r7, r3
    bf64:	231e      	movs	r3, #30
    bf66:	18fb      	adds	r3, r7, r3
    bf68:	881d      	ldrh	r5, [r3, #0]
    bf6a:	6a3a      	ldr	r2, [r7, #32]
    bf6c:	2326      	movs	r3, #38	; 0x26
    bf6e:	18fb      	adds	r3, r7, r3
    bf70:	7819      	ldrb	r1, [r3, #0]
    bf72:	2310      	movs	r3, #16
    bf74:	18f8      	adds	r0, r7, r3
    bf76:	002b      	movs	r3, r5
    bf78:	4d18      	ldr	r5, [pc, #96]	; (bfdc <LoRaMacMcpsRequest+0x264>)
    bf7a:	47a8      	blx	r5
    bf7c:	0003      	movs	r3, r0
    bf7e:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
    bf80:	2327      	movs	r3, #39	; 0x27
    bf82:	18fb      	adds	r3, r7, r3
    bf84:	781b      	ldrb	r3, [r3, #0]
    bf86:	2b00      	cmp	r3, #0
    bf88:	d10b      	bne.n	bfa2 <LoRaMacMcpsRequest+0x22a>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
    bf8a:	687b      	ldr	r3, [r7, #4]
    bf8c:	7819      	ldrb	r1, [r3, #0]
    bf8e:	4b0c      	ldr	r3, [pc, #48]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf90:	4a13      	ldr	r2, [pc, #76]	; (bfe0 <LoRaMacMcpsRequest+0x268>)
    bf92:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
    bf94:	4b0a      	ldr	r3, [pc, #40]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bf96:	4a13      	ldr	r2, [pc, #76]	; (bfe4 <LoRaMacMcpsRequest+0x26c>)
    bf98:	5c99      	ldrb	r1, [r3, r2]
    bf9a:	2001      	movs	r0, #1
    bf9c:	4301      	orrs	r1, r0
    bf9e:	5499      	strb	r1, [r3, r2]
    bfa0:	e005      	b.n	bfae <LoRaMacMcpsRequest+0x236>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
    bfa2:	4b07      	ldr	r3, [pc, #28]	; (bfc0 <LoRaMacMcpsRequest+0x248>)
    bfa4:	4a0a      	ldr	r2, [pc, #40]	; (bfd0 <LoRaMacMcpsRequest+0x258>)
    bfa6:	589b      	ldr	r3, [r3, r2]
    bfa8:	4a0f      	ldr	r2, [pc, #60]	; (bfe8 <LoRaMacMcpsRequest+0x270>)
    bfaa:	2100      	movs	r1, #0
    bfac:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
    bfae:	4b0f      	ldr	r3, [pc, #60]	; (bfec <LoRaMacMcpsRequest+0x274>)
    bfb0:	4798      	blx	r3
    return status;
    bfb2:	2327      	movs	r3, #39	; 0x27
    bfb4:	18fb      	adds	r3, r7, r3
    bfb6:	781b      	ldrb	r3, [r3, #0]
}
    bfb8:	0018      	movs	r0, r3
    bfba:	46bd      	mov	sp, r7
    bfbc:	b00a      	add	sp, #40	; 0x28
    bfbe:	bdb0      	pop	{r4, r5, r7, pc}
    bfc0:	20000c8c 	.word	0x20000c8c
    bfc4:	200010b0 	.word	0x200010b0
    bfc8:	000043b1 	.word	0x000043b1
    bfcc:	00000425 	.word	0x00000425
    bfd0:	000004c4 	.word	0x000004c4
    bfd4:	0000fec1 	.word	0x0000fec1
    bfd8:	0000ffa1 	.word	0x0000ffa1
    bfdc:	00008a19 	.word	0x00008a19
    bfe0:	00000424 	.word	0x00000424
    bfe4:	00000465 	.word	0x00000465
    bfe8:	00000217 	.word	0x00000217
    bfec:	0000a179 	.word	0x0000a179

0000bff0 <ConvertRejoinCycleTime>:

static bool ConvertRejoinCycleTime( uint32_t rejoinCycleTime, uint32_t* timeInMiliSec )
{
    bff0:	b580      	push	{r7, lr}
    bff2:	b082      	sub	sp, #8
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
    bff8:	6039      	str	r1, [r7, #0]
    // Our timer implementation do not allow longer times than 4294967295 ms
    if( rejoinCycleTime > 4294967 )
    bffa:	687b      	ldr	r3, [r7, #4]
    bffc:	4a07      	ldr	r2, [pc, #28]	; (c01c <ConvertRejoinCycleTime+0x2c>)
    bffe:	4293      	cmp	r3, r2
    c000:	d907      	bls.n	c012 <ConvertRejoinCycleTime+0x22>
    {
        *timeInMiliSec = rejoinCycleTime * 1000;
    c002:	687b      	ldr	r3, [r7, #4]
    c004:	22fa      	movs	r2, #250	; 0xfa
    c006:	0092      	lsls	r2, r2, #2
    c008:	435a      	muls	r2, r3
    c00a:	683b      	ldr	r3, [r7, #0]
    c00c:	601a      	str	r2, [r3, #0]
        return true;
    c00e:	2301      	movs	r3, #1
    c010:	e000      	b.n	c014 <ConvertRejoinCycleTime+0x24>
    }
    else
    {
        return false;
    c012:	2300      	movs	r3, #0
    }
}
    c014:	0018      	movs	r0, r3
    c016:	46bd      	mov	sp, r7
    c018:	b002      	add	sp, #8
    c01a:	bd80      	pop	{r7, pc}
    c01c:	00418937 	.word	0x00418937

0000c020 <OnRejoin0CycleTimerEvent>:

static void OnRejoin0CycleTimerEvent( void )
{
    c020:	b580      	push	{r7, lr}
    c022:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.Rejoin0CycleTimer );
    c024:	4b10      	ldr	r3, [pc, #64]	; (c068 <OnRejoin0CycleTimerEvent+0x48>)
    c026:	0018      	movs	r0, r3
    c028:	4b10      	ldr	r3, [pc, #64]	; (c06c <OnRejoin0CycleTimerEvent+0x4c>)
    c02a:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
    c02c:	4b10      	ldr	r3, [pc, #64]	; (c070 <OnRejoin0CycleTimerEvent+0x50>)
    c02e:	4a11      	ldr	r2, [pc, #68]	; (c074 <OnRejoin0CycleTimerEvent+0x54>)
    c030:	589a      	ldr	r2, [r3, r2]
    c032:	238b      	movs	r3, #139	; 0x8b
    c034:	009b      	lsls	r3, r3, #2
    c036:	58d3      	ldr	r3, [r2, r3]
    c038:	4a0f      	ldr	r2, [pc, #60]	; (c078 <OnRejoin0CycleTimerEvent+0x58>)
    c03a:	0011      	movs	r1, r2
    c03c:	0018      	movs	r0, r3
    c03e:	4b0f      	ldr	r3, [pc, #60]	; (c07c <OnRejoin0CycleTimerEvent+0x5c>)
    c040:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_0 );
    c042:	2000      	movs	r0, #0
    c044:	4b0e      	ldr	r3, [pc, #56]	; (c080 <OnRejoin0CycleTimerEvent+0x60>)
    c046:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    c048:	4a09      	ldr	r2, [pc, #36]	; (c070 <OnRejoin0CycleTimerEvent+0x50>)
    c04a:	2397      	movs	r3, #151	; 0x97
    c04c:	00db      	lsls	r3, r3, #3
    c04e:	58d2      	ldr	r2, [r2, r3]
    c050:	4b05      	ldr	r3, [pc, #20]	; (c068 <OnRejoin0CycleTimerEvent+0x48>)
    c052:	0011      	movs	r1, r2
    c054:	0018      	movs	r0, r3
    c056:	4b0b      	ldr	r3, [pc, #44]	; (c084 <OnRejoin0CycleTimerEvent+0x64>)
    c058:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin0CycleTimer );
    c05a:	4b03      	ldr	r3, [pc, #12]	; (c068 <OnRejoin0CycleTimerEvent+0x48>)
    c05c:	0018      	movs	r0, r3
    c05e:	4b0a      	ldr	r3, [pc, #40]	; (c088 <OnRejoin0CycleTimerEvent+0x68>)
    c060:	4798      	blx	r3
}
    c062:	46c0      	nop			; (mov r8, r8)
    c064:	46bd      	mov	sp, r7
    c066:	bd80      	pop	{r7, pc}
    c068:	200010f4 	.word	0x200010f4
    c06c:	00016fe5 	.word	0x00016fe5
    c070:	20000c8c 	.word	0x20000c8c
    c074:	000004c4 	.word	0x000004c4
    c078:	20001144 	.word	0x20001144
    c07c:	0000bff1 	.word	0x0000bff1
    c080:	00008cad 	.word	0x00008cad
    c084:	00017119 	.word	0x00017119
    c088:	00016d8d 	.word	0x00016d8d

0000c08c <OnRejoin1CycleTimerEvent>:

static void OnRejoin1CycleTimerEvent( void )
{
    c08c:	b580      	push	{r7, lr}
    c08e:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.Rejoin1CycleTimer );
    c090:	4b10      	ldr	r3, [pc, #64]	; (c0d4 <OnRejoin1CycleTimerEvent+0x48>)
    c092:	0018      	movs	r0, r3
    c094:	4b10      	ldr	r3, [pc, #64]	; (c0d8 <OnRejoin1CycleTimerEvent+0x4c>)
    c096:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
    c098:	4b10      	ldr	r3, [pc, #64]	; (c0dc <OnRejoin1CycleTimerEvent+0x50>)
    c09a:	4a11      	ldr	r2, [pc, #68]	; (c0e0 <OnRejoin1CycleTimerEvent+0x54>)
    c09c:	589a      	ldr	r2, [r3, r2]
    c09e:	238c      	movs	r3, #140	; 0x8c
    c0a0:	009b      	lsls	r3, r3, #2
    c0a2:	58d3      	ldr	r3, [r2, r3]
    c0a4:	4a0f      	ldr	r2, [pc, #60]	; (c0e4 <OnRejoin1CycleTimerEvent+0x58>)
    c0a6:	0011      	movs	r1, r2
    c0a8:	0018      	movs	r0, r3
    c0aa:	4b0f      	ldr	r3, [pc, #60]	; (c0e8 <OnRejoin1CycleTimerEvent+0x5c>)
    c0ac:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_1 );
    c0ae:	2001      	movs	r0, #1
    c0b0:	4b0e      	ldr	r3, [pc, #56]	; (c0ec <OnRejoin1CycleTimerEvent+0x60>)
    c0b2:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    c0b4:	4b09      	ldr	r3, [pc, #36]	; (c0dc <OnRejoin1CycleTimerEvent+0x50>)
    c0b6:	4a0e      	ldr	r2, [pc, #56]	; (c0f0 <OnRejoin1CycleTimerEvent+0x64>)
    c0b8:	589a      	ldr	r2, [r3, r2]
    c0ba:	4b06      	ldr	r3, [pc, #24]	; (c0d4 <OnRejoin1CycleTimerEvent+0x48>)
    c0bc:	0011      	movs	r1, r2
    c0be:	0018      	movs	r0, r3
    c0c0:	4b0c      	ldr	r3, [pc, #48]	; (c0f4 <OnRejoin1CycleTimerEvent+0x68>)
    c0c2:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin1CycleTimer );
    c0c4:	4b03      	ldr	r3, [pc, #12]	; (c0d4 <OnRejoin1CycleTimerEvent+0x48>)
    c0c6:	0018      	movs	r0, r3
    c0c8:	4b0b      	ldr	r3, [pc, #44]	; (c0f8 <OnRejoin1CycleTimerEvent+0x6c>)
    c0ca:	4798      	blx	r3
}
    c0cc:	46c0      	nop			; (mov r8, r8)
    c0ce:	46bd      	mov	sp, r7
    c0d0:	bd80      	pop	{r7, pc}
    c0d2:	46c0      	nop			; (mov r8, r8)
    c0d4:	20001108 	.word	0x20001108
    c0d8:	00016fe5 	.word	0x00016fe5
    c0dc:	20000c8c 	.word	0x20000c8c
    c0e0:	000004c4 	.word	0x000004c4
    c0e4:	20001148 	.word	0x20001148
    c0e8:	0000bff1 	.word	0x0000bff1
    c0ec:	00008cad 	.word	0x00008cad
    c0f0:	000004bc 	.word	0x000004bc
    c0f4:	00017119 	.word	0x00017119
    c0f8:	00016d8d 	.word	0x00016d8d

0000c0fc <OnRejoin2CycleTimerEvent>:

static void OnRejoin2CycleTimerEvent( void )
{
    c0fc:	b580      	push	{r7, lr}
    c0fe:	af00      	add	r7, sp, #0
    TimerStop( &MacCtx.Rejoin2CycleTimer );
    c100:	4b10      	ldr	r3, [pc, #64]	; (c144 <OnRejoin2CycleTimerEvent+0x48>)
    c102:	0018      	movs	r0, r3
    c104:	4b10      	ldr	r3, [pc, #64]	; (c148 <OnRejoin2CycleTimerEvent+0x4c>)
    c106:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
    c108:	4b10      	ldr	r3, [pc, #64]	; (c14c <OnRejoin2CycleTimerEvent+0x50>)
    c10a:	4a11      	ldr	r2, [pc, #68]	; (c150 <OnRejoin2CycleTimerEvent+0x54>)
    c10c:	589a      	ldr	r2, [r3, r2]
    c10e:	238d      	movs	r3, #141	; 0x8d
    c110:	009b      	lsls	r3, r3, #2
    c112:	58d3      	ldr	r3, [r2, r3]
    c114:	4a0f      	ldr	r2, [pc, #60]	; (c154 <OnRejoin2CycleTimerEvent+0x58>)
    c116:	0011      	movs	r1, r2
    c118:	0018      	movs	r0, r3
    c11a:	4b0f      	ldr	r3, [pc, #60]	; (c158 <OnRejoin2CycleTimerEvent+0x5c>)
    c11c:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_2 );
    c11e:	2002      	movs	r0, #2
    c120:	4b0e      	ldr	r3, [pc, #56]	; (c15c <OnRejoin2CycleTimerEvent+0x60>)
    c122:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    c124:	4a09      	ldr	r2, [pc, #36]	; (c14c <OnRejoin2CycleTimerEvent+0x50>)
    c126:	2398      	movs	r3, #152	; 0x98
    c128:	00db      	lsls	r3, r3, #3
    c12a:	58d2      	ldr	r2, [r2, r3]
    c12c:	4b05      	ldr	r3, [pc, #20]	; (c144 <OnRejoin2CycleTimerEvent+0x48>)
    c12e:	0011      	movs	r1, r2
    c130:	0018      	movs	r0, r3
    c132:	4b0b      	ldr	r3, [pc, #44]	; (c160 <OnRejoin2CycleTimerEvent+0x64>)
    c134:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin2CycleTimer );
    c136:	4b03      	ldr	r3, [pc, #12]	; (c144 <OnRejoin2CycleTimerEvent+0x48>)
    c138:	0018      	movs	r0, r3
    c13a:	4b0a      	ldr	r3, [pc, #40]	; (c164 <OnRejoin2CycleTimerEvent+0x68>)
    c13c:	4798      	blx	r3
}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	46bd      	mov	sp, r7
    c142:	bd80      	pop	{r7, pc}
    c144:	2000111c 	.word	0x2000111c
    c148:	00016fe5 	.word	0x00016fe5
    c14c:	20000c8c 	.word	0x20000c8c
    c150:	000004c4 	.word	0x000004c4
    c154:	2000114c 	.word	0x2000114c
    c158:	0000bff1 	.word	0x0000bff1
    c15c:	00008cad 	.word	0x00008cad
    c160:	00017119 	.word	0x00017119
    c164:	00016d8d 	.word	0x00016d8d

0000c168 <OnForceRejoinReqCycleTimerEvent>:

static void OnForceRejoinReqCycleTimerEvent( void )
{
    c168:	b580      	push	{r7, lr}
    c16a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->ForceRejoinRetriesCounter == MacCtx.NvmCtx->ForceRejoinMaxRetries )
    c16c:	4b1c      	ldr	r3, [pc, #112]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c16e:	4a1d      	ldr	r2, [pc, #116]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c170:	589b      	ldr	r3, [r3, r2]
    c172:	4a1d      	ldr	r2, [pc, #116]	; (c1e8 <OnForceRejoinReqCycleTimerEvent+0x80>)
    c174:	5c9a      	ldrb	r2, [r3, r2]
    c176:	4b1a      	ldr	r3, [pc, #104]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c178:	491a      	ldr	r1, [pc, #104]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c17a:	585b      	ldr	r3, [r3, r1]
    c17c:	491b      	ldr	r1, [pc, #108]	; (c1ec <OnForceRejoinReqCycleTimerEvent+0x84>)
    c17e:	5c5b      	ldrb	r3, [r3, r1]
    c180:	429a      	cmp	r2, r3
    c182:	d109      	bne.n	c198 <OnForceRejoinReqCycleTimerEvent+0x30>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    c184:	4b1a      	ldr	r3, [pc, #104]	; (c1f0 <OnForceRejoinReqCycleTimerEvent+0x88>)
    c186:	0018      	movs	r0, r3
    c188:	4b1a      	ldr	r3, [pc, #104]	; (c1f4 <OnForceRejoinReqCycleTimerEvent+0x8c>)
    c18a:	4798      	blx	r3
        MacCtx.NvmCtx->ForceRejoinRetriesCounter = 0;
    c18c:	4b14      	ldr	r3, [pc, #80]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c18e:	4a15      	ldr	r2, [pc, #84]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c190:	589b      	ldr	r3, [r3, r2]
    c192:	4a15      	ldr	r2, [pc, #84]	; (c1e8 <OnForceRejoinReqCycleTimerEvent+0x80>)
    c194:	2100      	movs	r1, #0
    c196:	5499      	strb	r1, [r3, r2]
    }

    MacCtx.NvmCtx->ForceRejoinRetriesCounter ++;
    c198:	4b11      	ldr	r3, [pc, #68]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c19a:	4a12      	ldr	r2, [pc, #72]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c19c:	589b      	ldr	r3, [r3, r2]
    c19e:	4a12      	ldr	r2, [pc, #72]	; (c1e8 <OnForceRejoinReqCycleTimerEvent+0x80>)
    c1a0:	5c9a      	ldrb	r2, [r3, r2]
    c1a2:	3201      	adds	r2, #1
    c1a4:	b2d1      	uxtb	r1, r2
    c1a6:	4a10      	ldr	r2, [pc, #64]	; (c1e8 <OnForceRejoinReqCycleTimerEvent+0x80>)
    c1a8:	5499      	strb	r1, [r3, r2]

    if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    c1aa:	4b0d      	ldr	r3, [pc, #52]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c1ac:	4a0d      	ldr	r2, [pc, #52]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c1ae:	589a      	ldr	r2, [r3, r2]
    c1b0:	238a      	movs	r3, #138	; 0x8a
    c1b2:	009b      	lsls	r3, r3, #2
    c1b4:	5cd3      	ldrb	r3, [r2, r3]
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	d007      	beq.n	c1ca <OnForceRejoinReqCycleTimerEvent+0x62>
    c1ba:	4b09      	ldr	r3, [pc, #36]	; (c1e0 <OnForceRejoinReqCycleTimerEvent+0x78>)
    c1bc:	4a09      	ldr	r2, [pc, #36]	; (c1e4 <OnForceRejoinReqCycleTimerEvent+0x7c>)
    c1be:	589a      	ldr	r2, [r3, r2]
    c1c0:	238a      	movs	r3, #138	; 0x8a
    c1c2:	009b      	lsls	r3, r3, #2
    c1c4:	5cd3      	ldrb	r3, [r2, r3]
    c1c6:	2b01      	cmp	r3, #1
    c1c8:	d103      	bne.n	c1d2 <OnForceRejoinReqCycleTimerEvent+0x6a>
    {
        SendReJoinReq( REJOIN_REQ_0 );
    c1ca:	2000      	movs	r0, #0
    c1cc:	4b0a      	ldr	r3, [pc, #40]	; (c1f8 <OnForceRejoinReqCycleTimerEvent+0x90>)
    c1ce:	4798      	blx	r3
    c1d0:	e002      	b.n	c1d8 <OnForceRejoinReqCycleTimerEvent+0x70>
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    c1d2:	2002      	movs	r0, #2
    c1d4:	4b08      	ldr	r3, [pc, #32]	; (c1f8 <OnForceRejoinReqCycleTimerEvent+0x90>)
    c1d6:	4798      	blx	r3
    }
}
    c1d8:	46c0      	nop			; (mov r8, r8)
    c1da:	46bd      	mov	sp, r7
    c1dc:	bd80      	pop	{r7, pc}
    c1de:	46c0      	nop			; (mov r8, r8)
    c1e0:	20000c8c 	.word	0x20000c8c
    c1e4:	000004c4 	.word	0x000004c4
    c1e8:	00000227 	.word	0x00000227
    c1ec:	00000226 	.word	0x00000226
    c1f0:	20001130 	.word	0x20001130
    c1f4:	00016fe5 	.word	0x00016fe5
    c1f8:	00008cad 	.word	0x00008cad

0000c1fc <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b084      	sub	sp, #16
    c200:	af00      	add	r7, sp, #0
    c202:	0002      	movs	r2, r0
    c204:	1dfb      	adds	r3, r7, #7
    c206:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
    c208:	230c      	movs	r3, #12
    c20a:	18fb      	adds	r3, r7, r3
    c20c:	1dfa      	adds	r2, r7, #7
    c20e:	7812      	ldrb	r2, [r2, #0]
    c210:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
    c212:	4b0c      	ldr	r3, [pc, #48]	; (c244 <LoRaMacTestSetDutyCycleOn+0x48>)
    c214:	4a0c      	ldr	r2, [pc, #48]	; (c248 <LoRaMacTestSetDutyCycleOn+0x4c>)
    c216:	589b      	ldr	r3, [r3, r2]
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	220c      	movs	r2, #12
    c21c:	18b9      	adds	r1, r7, r2
    c21e:	220e      	movs	r2, #14
    c220:	0018      	movs	r0, r3
    c222:	4b0a      	ldr	r3, [pc, #40]	; (c24c <LoRaMacTestSetDutyCycleOn+0x50>)
    c224:	4798      	blx	r3
    c226:	1e03      	subs	r3, r0, #0
    c228:	d007      	beq.n	c23a <LoRaMacTestSetDutyCycleOn+0x3e>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
    c22a:	4b06      	ldr	r3, [pc, #24]	; (c244 <LoRaMacTestSetDutyCycleOn+0x48>)
    c22c:	4a06      	ldr	r2, [pc, #24]	; (c248 <LoRaMacTestSetDutyCycleOn+0x4c>)
    c22e:	589a      	ldr	r2, [r3, r2]
    c230:	1df9      	adds	r1, r7, #7
    c232:	2389      	movs	r3, #137	; 0x89
    c234:	005b      	lsls	r3, r3, #1
    c236:	7809      	ldrb	r1, [r1, #0]
    c238:	54d1      	strb	r1, [r2, r3]
    }
}
    c23a:	46c0      	nop			; (mov r8, r8)
    c23c:	46bd      	mov	sp, r7
    c23e:	b004      	add	sp, #16
    c240:	bd80      	pop	{r7, pc}
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	20000c8c 	.word	0x20000c8c
    c248:	000004c4 	.word	0x000004c4
    c24c:	0000ffa1 	.word	0x0000ffa1

0000c250 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    c250:	b590      	push	{r4, r7, lr}
    c252:	b08b      	sub	sp, #44	; 0x2c
    c254:	af00      	add	r7, sp, #0
    c256:	60f8      	str	r0, [r7, #12]
    c258:	60b9      	str	r1, [r7, #8]
    c25a:	607a      	str	r2, [r7, #4]
    c25c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
    c25e:	2327      	movs	r3, #39	; 0x27
    c260:	18fb      	adds	r3, r7, r3
    c262:	2200      	movs	r2, #0
    c264:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
    c266:	2326      	movs	r3, #38	; 0x26
    c268:	18fb      	adds	r3, r7, r3
    c26a:	68fa      	ldr	r2, [r7, #12]
    c26c:	7c12      	ldrb	r2, [r2, #16]
    c26e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
    c270:	2325      	movs	r3, #37	; 0x25
    c272:	18fb      	adds	r3, r7, r3
    c274:	68fa      	ldr	r2, [r7, #12]
    c276:	7c52      	ldrb	r2, [r2, #17]
    c278:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
    c27a:	68fb      	ldr	r3, [r7, #12]
    c27c:	689a      	ldr	r2, [r3, #8]
    c27e:	683b      	ldr	r3, [r7, #0]
    c280:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
    c282:	68fb      	ldr	r3, [r7, #12]
    c284:	795b      	ldrb	r3, [r3, #5]
    c286:	2b00      	cmp	r3, #0
    c288:	d100      	bne.n	c28c <CalcNextV10X+0x3c>
    c28a:	e0b6      	b.n	c3fa <CalcNextV10X+0x1aa>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
    c28c:	2320      	movs	r3, #32
    c28e:	18fb      	adds	r3, r7, r3
    c290:	2201      	movs	r2, #1
    c292:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    c294:	68fb      	ldr	r3, [r7, #12]
    c296:	7c9a      	ldrb	r2, [r3, #18]
    c298:	2320      	movs	r3, #32
    c29a:	18fb      	adds	r3, r7, r3
    c29c:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c29e:	68fb      	ldr	r3, [r7, #12]
    c2a0:	7cdb      	ldrb	r3, [r3, #19]
    c2a2:	2220      	movs	r2, #32
    c2a4:	18ba      	adds	r2, r7, r2
    c2a6:	0011      	movs	r1, r2
    c2a8:	0018      	movs	r0, r3
    c2aa:	4b5c      	ldr	r3, [pc, #368]	; (c41c <CalcNextV10X+0x1cc>)
    c2ac:	4798      	blx	r3
    c2ae:	0003      	movs	r3, r0
    c2b0:	001a      	movs	r2, r3
    c2b2:	231c      	movs	r3, #28
    c2b4:	18fb      	adds	r3, r7, r3
    c2b6:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
    c2b8:	231c      	movs	r3, #28
    c2ba:	18fb      	adds	r3, r7, r3
    c2bc:	681a      	ldr	r2, [r3, #0]
    c2be:	2324      	movs	r3, #36	; 0x24
    c2c0:	18fb      	adds	r3, r7, r3
    c2c2:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
    c2c4:	2326      	movs	r3, #38	; 0x26
    c2c6:	18fa      	adds	r2, r7, r3
    c2c8:	2324      	movs	r3, #36	; 0x24
    c2ca:	18fb      	adds	r3, r7, r3
    c2cc:	2126      	movs	r1, #38	; 0x26
    c2ce:	1879      	adds	r1, r7, r1
    c2d0:	780c      	ldrb	r4, [r1, #0]
    c2d2:	781b      	ldrb	r3, [r3, #0]
    c2d4:	b258      	sxtb	r0, r3
    c2d6:	b261      	sxtb	r1, r4
    c2d8:	4288      	cmp	r0, r1
    c2da:	da00      	bge.n	c2de <CalcNextV10X+0x8e>
    c2dc:	1c23      	adds	r3, r4, #0
    c2de:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
    c2e0:	2326      	movs	r3, #38	; 0x26
    c2e2:	18fa      	adds	r2, r7, r3
    c2e4:	2324      	movs	r3, #36	; 0x24
    c2e6:	18fb      	adds	r3, r7, r3
    c2e8:	7812      	ldrb	r2, [r2, #0]
    c2ea:	b252      	sxtb	r2, r2
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	b25b      	sxtb	r3, r3
    c2f0:	429a      	cmp	r2, r3
    c2f2:	d107      	bne.n	c304 <CalcNextV10X+0xb4>
        {
            *adrAckCounter = 0;
    c2f4:	683b      	ldr	r3, [r7, #0]
    c2f6:	2200      	movs	r2, #0
    c2f8:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
    c2fa:	2327      	movs	r3, #39	; 0x27
    c2fc:	18fb      	adds	r3, r7, r3
    c2fe:	2200      	movs	r2, #0
    c300:	701a      	strb	r2, [r3, #0]
    c302:	e07a      	b.n	c3fa <CalcNextV10X+0x1aa>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
    c304:	68fb      	ldr	r3, [r7, #12]
    c306:	689b      	ldr	r3, [r3, #8]
    c308:	68fa      	ldr	r2, [r7, #12]
    c30a:	8992      	ldrh	r2, [r2, #12]
    c30c:	4293      	cmp	r3, r2
    c30e:	d31b      	bcc.n	c348 <CalcNextV10X+0xf8>
            {
                adrAckReq = true;
    c310:	2327      	movs	r3, #39	; 0x27
    c312:	18fb      	adds	r3, r7, r3
    c314:	2201      	movs	r2, #1
    c316:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
    c318:	2320      	movs	r3, #32
    c31a:	18fb      	adds	r3, r7, r3
    c31c:	2207      	movs	r2, #7
    c31e:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c320:	68fb      	ldr	r3, [r7, #12]
    c322:	7cdb      	ldrb	r3, [r3, #19]
    c324:	2220      	movs	r2, #32
    c326:	18ba      	adds	r2, r7, r2
    c328:	0011      	movs	r1, r2
    c32a:	0018      	movs	r0, r3
    c32c:	4b3b      	ldr	r3, [pc, #236]	; (c41c <CalcNextV10X+0x1cc>)
    c32e:	4798      	blx	r3
    c330:	0003      	movs	r3, r0
    c332:	001a      	movs	r2, r3
    c334:	231c      	movs	r3, #28
    c336:	18fb      	adds	r3, r7, r3
    c338:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
    c33a:	231c      	movs	r3, #28
    c33c:	18fb      	adds	r3, r7, r3
    c33e:	681a      	ldr	r2, [r3, #0]
    c340:	2325      	movs	r3, #37	; 0x25
    c342:	18fb      	adds	r3, r7, r3
    c344:	701a      	strb	r2, [r3, #0]
    c346:	e003      	b.n	c350 <CalcNextV10X+0x100>
            }
            else
            {
                adrAckReq = false;
    c348:	2327      	movs	r3, #39	; 0x27
    c34a:	18fb      	adds	r3, r7, r3
    c34c:	2200      	movs	r2, #0
    c34e:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    c350:	68fb      	ldr	r3, [r7, #12]
    c352:	689b      	ldr	r3, [r3, #8]
    c354:	68fa      	ldr	r2, [r7, #12]
    c356:	8992      	ldrh	r2, [r2, #12]
    c358:	0011      	movs	r1, r2
    c35a:	68fa      	ldr	r2, [r7, #12]
    c35c:	89d2      	ldrh	r2, [r2, #14]
    c35e:	188a      	adds	r2, r1, r2
    c360:	4293      	cmp	r3, r2
    c362:	d34a      	bcc.n	c3fa <CalcNextV10X+0x1aa>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    c364:	68fb      	ldr	r3, [r7, #12]
    c366:	689a      	ldr	r2, [r3, #8]
    c368:	68fb      	ldr	r3, [r7, #12]
    c36a:	89db      	ldrh	r3, [r3, #14]
    c36c:	0019      	movs	r1, r3
    c36e:	4b2c      	ldr	r3, [pc, #176]	; (c420 <CalcNextV10X+0x1d0>)
    c370:	0010      	movs	r0, r2
    c372:	4798      	blx	r3
    c374:	000b      	movs	r3, r1
    c376:	2b01      	cmp	r3, #1
    c378:	d13f      	bne.n	c3fa <CalcNextV10X+0x1aa>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    c37a:	2320      	movs	r3, #32
    c37c:	18fb      	adds	r3, r7, r3
    c37e:	2221      	movs	r2, #33	; 0x21
    c380:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
    c382:	2320      	movs	r3, #32
    c384:	18fb      	adds	r3, r7, r3
    c386:	2226      	movs	r2, #38	; 0x26
    c388:	18ba      	adds	r2, r7, r2
    c38a:	7812      	ldrb	r2, [r2, #0]
    c38c:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    c38e:	68fb      	ldr	r3, [r7, #12]
    c390:	7c9a      	ldrb	r2, [r3, #18]
    c392:	2320      	movs	r3, #32
    c394:	18fb      	adds	r3, r7, r3
    c396:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c398:	68fb      	ldr	r3, [r7, #12]
    c39a:	7cdb      	ldrb	r3, [r3, #19]
    c39c:	2220      	movs	r2, #32
    c39e:	18ba      	adds	r2, r7, r2
    c3a0:	0011      	movs	r1, r2
    c3a2:	0018      	movs	r0, r3
    c3a4:	4b1d      	ldr	r3, [pc, #116]	; (c41c <CalcNextV10X+0x1cc>)
    c3a6:	4798      	blx	r3
    c3a8:	0003      	movs	r3, r0
    c3aa:	001a      	movs	r2, r3
    c3ac:	231c      	movs	r3, #28
    c3ae:	18fb      	adds	r3, r7, r3
    c3b0:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
    c3b2:	231c      	movs	r3, #28
    c3b4:	18fb      	adds	r3, r7, r3
    c3b6:	681a      	ldr	r2, [r3, #0]
    c3b8:	2326      	movs	r3, #38	; 0x26
    c3ba:	18fb      	adds	r3, r7, r3
    c3bc:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
    c3be:	2326      	movs	r3, #38	; 0x26
    c3c0:	18fa      	adds	r2, r7, r3
    c3c2:	2324      	movs	r3, #36	; 0x24
    c3c4:	18fb      	adds	r3, r7, r3
    c3c6:	7812      	ldrb	r2, [r2, #0]
    c3c8:	b252      	sxtb	r2, r2
    c3ca:	781b      	ldrb	r3, [r3, #0]
    c3cc:	b25b      	sxtb	r3, r3
    c3ce:	429a      	cmp	r2, r3
    c3d0:	d113      	bne.n	c3fa <CalcNextV10X+0x1aa>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
    c3d2:	2327      	movs	r3, #39	; 0x27
    c3d4:	18fb      	adds	r3, r7, r3
    c3d6:	2200      	movs	r2, #0
    c3d8:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
    c3da:	68fb      	ldr	r3, [r7, #12]
    c3dc:	791b      	ldrb	r3, [r3, #4]
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d00b      	beq.n	c3fa <CalcNextV10X+0x1aa>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    c3e2:	2314      	movs	r3, #20
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	2201      	movs	r2, #1
    c3e8:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    c3ea:	68fb      	ldr	r3, [r7, #12]
    c3ec:	7cdb      	ldrb	r3, [r3, #19]
    c3ee:	2214      	movs	r2, #20
    c3f0:	18ba      	adds	r2, r7, r2
    c3f2:	0011      	movs	r1, r2
    c3f4:	0018      	movs	r0, r3
    c3f6:	4b0b      	ldr	r3, [pc, #44]	; (c424 <CalcNextV10X+0x1d4>)
    c3f8:	4798      	blx	r3
                }
            }
        }
    }

    *drOut = datarate;
    c3fa:	68bb      	ldr	r3, [r7, #8]
    c3fc:	2226      	movs	r2, #38	; 0x26
    c3fe:	18ba      	adds	r2, r7, r2
    c400:	7812      	ldrb	r2, [r2, #0]
    c402:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
    c404:	687b      	ldr	r3, [r7, #4]
    c406:	2225      	movs	r2, #37	; 0x25
    c408:	18ba      	adds	r2, r7, r2
    c40a:	7812      	ldrb	r2, [r2, #0]
    c40c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
    c40e:	2327      	movs	r3, #39	; 0x27
    c410:	18fb      	adds	r3, r7, r3
    c412:	781b      	ldrb	r3, [r3, #0]
}
    c414:	0018      	movs	r0, r3
    c416:	46bd      	mov	sp, r7
    c418:	b00b      	add	sp, #44	; 0x2c
    c41a:	bd90      	pop	{r4, r7, pc}
    c41c:	0000fec1 	.word	0x0000fec1
    c420:	00017761 	.word	0x00017761
    c424:	0000ff41 	.word	0x0000ff41

0000c428 <CalcNextV11X>:

static bool CalcNextV11X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    c428:	b590      	push	{r4, r7, lr}
    c42a:	b08b      	sub	sp, #44	; 0x2c
    c42c:	af00      	add	r7, sp, #0
    c42e:	60f8      	str	r0, [r7, #12]
    c430:	60b9      	str	r1, [r7, #8]
    c432:	607a      	str	r2, [r7, #4]
    c434:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
    c436:	2327      	movs	r3, #39	; 0x27
    c438:	18fb      	adds	r3, r7, r3
    c43a:	2200      	movs	r2, #0
    c43c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
    c43e:	2326      	movs	r3, #38	; 0x26
    c440:	18fb      	adds	r3, r7, r3
    c442:	68fa      	ldr	r2, [r7, #12]
    c444:	7c12      	ldrb	r2, [r2, #16]
    c446:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
    c448:	2325      	movs	r3, #37	; 0x25
    c44a:	18fb      	adds	r3, r7, r3
    c44c:	68fa      	ldr	r2, [r7, #12]
    c44e:	7c52      	ldrb	r2, [r2, #17]
    c450:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
    c452:	68fb      	ldr	r3, [r7, #12]
    c454:	689a      	ldr	r2, [r3, #8]
    c456:	683b      	ldr	r3, [r7, #0]
    c458:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
    c45a:	68fb      	ldr	r3, [r7, #12]
    c45c:	795b      	ldrb	r3, [r3, #5]
    c45e:	2b00      	cmp	r3, #0
    c460:	d100      	bne.n	c464 <CalcNextV11X+0x3c>
    c462:	e0bf      	b.n	c5e4 <CalcNextV11X+0x1bc>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
    c464:	2320      	movs	r3, #32
    c466:	18fb      	adds	r3, r7, r3
    c468:	2201      	movs	r2, #1
    c46a:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    c46c:	68fb      	ldr	r3, [r7, #12]
    c46e:	7c9a      	ldrb	r2, [r3, #18]
    c470:	2320      	movs	r3, #32
    c472:	18fb      	adds	r3, r7, r3
    c474:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c476:	68fb      	ldr	r3, [r7, #12]
    c478:	7cdb      	ldrb	r3, [r3, #19]
    c47a:	2220      	movs	r2, #32
    c47c:	18ba      	adds	r2, r7, r2
    c47e:	0011      	movs	r1, r2
    c480:	0018      	movs	r0, r3
    c482:	4b61      	ldr	r3, [pc, #388]	; (c608 <CalcNextV11X+0x1e0>)
    c484:	4798      	blx	r3
    c486:	0003      	movs	r3, r0
    c488:	001a      	movs	r2, r3
    c48a:	231c      	movs	r3, #28
    c48c:	18fb      	adds	r3, r7, r3
    c48e:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
    c490:	231c      	movs	r3, #28
    c492:	18fb      	adds	r3, r7, r3
    c494:	681a      	ldr	r2, [r3, #0]
    c496:	2324      	movs	r3, #36	; 0x24
    c498:	18fb      	adds	r3, r7, r3
    c49a:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
    c49c:	2326      	movs	r3, #38	; 0x26
    c49e:	18fa      	adds	r2, r7, r3
    c4a0:	2324      	movs	r3, #36	; 0x24
    c4a2:	18fb      	adds	r3, r7, r3
    c4a4:	2126      	movs	r1, #38	; 0x26
    c4a6:	1879      	adds	r1, r7, r1
    c4a8:	780c      	ldrb	r4, [r1, #0]
    c4aa:	781b      	ldrb	r3, [r3, #0]
    c4ac:	b258      	sxtb	r0, r3
    c4ae:	b261      	sxtb	r1, r4
    c4b0:	4288      	cmp	r0, r1
    c4b2:	da00      	bge.n	c4b6 <CalcNextV11X+0x8e>
    c4b4:	1c23      	adds	r3, r4, #0
    c4b6:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
    c4b8:	2326      	movs	r3, #38	; 0x26
    c4ba:	18fa      	adds	r2, r7, r3
    c4bc:	2324      	movs	r3, #36	; 0x24
    c4be:	18fb      	adds	r3, r7, r3
    c4c0:	7812      	ldrb	r2, [r2, #0]
    c4c2:	b252      	sxtb	r2, r2
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	b25b      	sxtb	r3, r3
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d107      	bne.n	c4dc <CalcNextV11X+0xb4>
        {
            *adrAckCounter = 0;
    c4cc:	683b      	ldr	r3, [r7, #0]
    c4ce:	2200      	movs	r2, #0
    c4d0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
    c4d2:	2327      	movs	r3, #39	; 0x27
    c4d4:	18fb      	adds	r3, r7, r3
    c4d6:	2200      	movs	r2, #0
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	e009      	b.n	c4f0 <CalcNextV11X+0xc8>
        }
        else
        {
            if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
    c4dc:	68fb      	ldr	r3, [r7, #12]
    c4de:	689b      	ldr	r3, [r3, #8]
    c4e0:	68fa      	ldr	r2, [r7, #12]
    c4e2:	8992      	ldrh	r2, [r2, #12]
    c4e4:	4293      	cmp	r3, r2
    c4e6:	d303      	bcc.n	c4f0 <CalcNextV11X+0xc8>
            {
                adrAckReq = true;
    c4e8:	2327      	movs	r3, #39	; 0x27
    c4ea:	18fb      	adds	r3, r7, r3
    c4ec:	2201      	movs	r2, #1
    c4ee:	701a      	strb	r2, [r3, #0]
            }
        }

        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    c4f0:	68fb      	ldr	r3, [r7, #12]
    c4f2:	689b      	ldr	r3, [r3, #8]
    c4f4:	68fa      	ldr	r2, [r7, #12]
    c4f6:	8992      	ldrh	r2, [r2, #12]
    c4f8:	0011      	movs	r1, r2
    c4fa:	68fa      	ldr	r2, [r7, #12]
    c4fc:	89d2      	ldrh	r2, [r2, #14]
    c4fe:	188a      	adds	r2, r1, r2
    c500:	4293      	cmp	r3, r2
    c502:	d36f      	bcc.n	c5e4 <CalcNextV11X+0x1bc>
        {
            if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + adrNext->AdrAckDelay + adrNext->AdrAckDelay ) )
    c504:	68fb      	ldr	r3, [r7, #12]
    c506:	689b      	ldr	r3, [r3, #8]
    c508:	68fa      	ldr	r2, [r7, #12]
    c50a:	8992      	ldrh	r2, [r2, #12]
    c50c:	0011      	movs	r1, r2
    c50e:	68fa      	ldr	r2, [r7, #12]
    c510:	89d2      	ldrh	r2, [r2, #14]
    c512:	188a      	adds	r2, r1, r2
    c514:	68f9      	ldr	r1, [r7, #12]
    c516:	89c9      	ldrh	r1, [r1, #14]
    c518:	1852      	adds	r2, r2, r1
    c51a:	4293      	cmp	r3, r2
    c51c:	d34b      	bcc.n	c5b6 <CalcNextV11X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    c51e:	68fb      	ldr	r3, [r7, #12]
    c520:	689a      	ldr	r2, [r3, #8]
    c522:	68fb      	ldr	r3, [r7, #12]
    c524:	89db      	ldrh	r3, [r3, #14]
    c526:	0019      	movs	r1, r3
    c528:	4b38      	ldr	r3, [pc, #224]	; (c60c <CalcNextV11X+0x1e4>)
    c52a:	0010      	movs	r0, r2
    c52c:	4798      	blx	r3
    c52e:	000b      	movs	r3, r1
    c530:	2b01      	cmp	r3, #1
    c532:	d157      	bne.n	c5e4 <CalcNextV11X+0x1bc>
                {
                    if( datarate == minTxDatarate )
    c534:	2326      	movs	r3, #38	; 0x26
    c536:	18fa      	adds	r2, r7, r3
    c538:	2324      	movs	r3, #36	; 0x24
    c53a:	18fb      	adds	r3, r7, r3
    c53c:	7812      	ldrb	r2, [r2, #0]
    c53e:	b252      	sxtb	r2, r2
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	b25b      	sxtb	r3, r3
    c544:	429a      	cmp	r2, r3
    c546:	d113      	bne.n	c570 <CalcNextV11X+0x148>
                    {
                        // Unset adrAckReq as soon as we sent ADR_ACK_DELAY times with  the lowest datarate
                        adrAckReq = false;
    c548:	2327      	movs	r3, #39	; 0x27
    c54a:	18fb      	adds	r3, r7, r3
    c54c:	2200      	movs	r2, #0
    c54e:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
    c550:	68fb      	ldr	r3, [r7, #12]
    c552:	791b      	ldrb	r3, [r3, #4]
    c554:	2b00      	cmp	r3, #0
    c556:	d00b      	beq.n	c570 <CalcNextV11X+0x148>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    c558:	2314      	movs	r3, #20
    c55a:	18fb      	adds	r3, r7, r3
    c55c:	2201      	movs	r2, #1
    c55e:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    c560:	68fb      	ldr	r3, [r7, #12]
    c562:	7cdb      	ldrb	r3, [r3, #19]
    c564:	2214      	movs	r2, #20
    c566:	18ba      	adds	r2, r7, r2
    c568:	0011      	movs	r1, r2
    c56a:	0018      	movs	r0, r3
    c56c:	4b28      	ldr	r3, [pc, #160]	; (c610 <CalcNextV11X+0x1e8>)
    c56e:	4798      	blx	r3
                        }
                    }

                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    c570:	2320      	movs	r3, #32
    c572:	18fb      	adds	r3, r7, r3
    c574:	2221      	movs	r2, #33	; 0x21
    c576:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
    c578:	2320      	movs	r3, #32
    c57a:	18fb      	adds	r3, r7, r3
    c57c:	2226      	movs	r2, #38	; 0x26
    c57e:	18ba      	adds	r2, r7, r2
    c580:	7812      	ldrb	r2, [r2, #0]
    c582:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    c584:	68fb      	ldr	r3, [r7, #12]
    c586:	7c9a      	ldrb	r2, [r3, #18]
    c588:	2320      	movs	r3, #32
    c58a:	18fb      	adds	r3, r7, r3
    c58c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c58e:	68fb      	ldr	r3, [r7, #12]
    c590:	7cdb      	ldrb	r3, [r3, #19]
    c592:	2220      	movs	r2, #32
    c594:	18ba      	adds	r2, r7, r2
    c596:	0011      	movs	r1, r2
    c598:	0018      	movs	r0, r3
    c59a:	4b1b      	ldr	r3, [pc, #108]	; (c608 <CalcNextV11X+0x1e0>)
    c59c:	4798      	blx	r3
    c59e:	0003      	movs	r3, r0
    c5a0:	001a      	movs	r2, r3
    c5a2:	231c      	movs	r3, #28
    c5a4:	18fb      	adds	r3, r7, r3
    c5a6:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
    c5a8:	231c      	movs	r3, #28
    c5aa:	18fb      	adds	r3, r7, r3
    c5ac:	681a      	ldr	r2, [r3, #0]
    c5ae:	2326      	movs	r3, #38	; 0x26
    c5b0:	18fb      	adds	r3, r7, r3
    c5b2:	701a      	strb	r2, [r3, #0]
    c5b4:	e016      	b.n	c5e4 <CalcNextV11X+0x1bc>
                }
            }
            else
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
    c5b6:	2320      	movs	r3, #32
    c5b8:	18fb      	adds	r3, r7, r3
    c5ba:	2207      	movs	r2, #7
    c5bc:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    c5be:	68fb      	ldr	r3, [r7, #12]
    c5c0:	7cdb      	ldrb	r3, [r3, #19]
    c5c2:	2220      	movs	r2, #32
    c5c4:	18ba      	adds	r2, r7, r2
    c5c6:	0011      	movs	r1, r2
    c5c8:	0018      	movs	r0, r3
    c5ca:	4b0f      	ldr	r3, [pc, #60]	; (c608 <CalcNextV11X+0x1e0>)
    c5cc:	4798      	blx	r3
    c5ce:	0003      	movs	r3, r0
    c5d0:	001a      	movs	r2, r3
    c5d2:	231c      	movs	r3, #28
    c5d4:	18fb      	adds	r3, r7, r3
    c5d6:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
    c5d8:	231c      	movs	r3, #28
    c5da:	18fb      	adds	r3, r7, r3
    c5dc:	681a      	ldr	r2, [r3, #0]
    c5de:	2325      	movs	r3, #37	; 0x25
    c5e0:	18fb      	adds	r3, r7, r3
    c5e2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    *drOut = datarate;
    c5e4:	68bb      	ldr	r3, [r7, #8]
    c5e6:	2226      	movs	r2, #38	; 0x26
    c5e8:	18ba      	adds	r2, r7, r2
    c5ea:	7812      	ldrb	r2, [r2, #0]
    c5ec:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
    c5ee:	687b      	ldr	r3, [r7, #4]
    c5f0:	2225      	movs	r2, #37	; 0x25
    c5f2:	18ba      	adds	r2, r7, r2
    c5f4:	7812      	ldrb	r2, [r2, #0]
    c5f6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
    c5f8:	2327      	movs	r3, #39	; 0x27
    c5fa:	18fb      	adds	r3, r7, r3
    c5fc:	781b      	ldrb	r3, [r3, #0]
}
    c5fe:	0018      	movs	r0, r3
    c600:	46bd      	mov	sp, r7
    c602:	b00b      	add	sp, #44	; 0x2c
    c604:	bd90      	pop	{r4, r7, pc}
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	0000fec1 	.word	0x0000fec1
    c60c:	00017761 	.word	0x00017761
    c610:	0000ff41 	.word	0x0000ff41

0000c614 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    c614:	b590      	push	{r4, r7, lr}
    c616:	b085      	sub	sp, #20
    c618:	af00      	add	r7, sp, #0
    c61a:	60f8      	str	r0, [r7, #12]
    c61c:	60b9      	str	r1, [r7, #8]
    c61e:	607a      	str	r2, [r7, #4]
    c620:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
    c622:	68fb      	ldr	r3, [r7, #12]
    c624:	789b      	ldrb	r3, [r3, #2]
    c626:	2b00      	cmp	r3, #0
    c628:	d107      	bne.n	c63a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    c62a:	683b      	ldr	r3, [r7, #0]
    c62c:	687a      	ldr	r2, [r7, #4]
    c62e:	68b9      	ldr	r1, [r7, #8]
    c630:	68f8      	ldr	r0, [r7, #12]
    c632:	4c07      	ldr	r4, [pc, #28]	; (c650 <LoRaMacAdrCalcNext+0x3c>)
    c634:	47a0      	blx	r4
    c636:	0003      	movs	r3, r0
    c638:	e006      	b.n	c648 <LoRaMacAdrCalcNext+0x34>
    }
    else
    {
        return CalcNextV11X( adrNext, drOut, txPowOut, adrAckCounter );
    c63a:	683b      	ldr	r3, [r7, #0]
    c63c:	687a      	ldr	r2, [r7, #4]
    c63e:	68b9      	ldr	r1, [r7, #8]
    c640:	68f8      	ldr	r0, [r7, #12]
    c642:	4c04      	ldr	r4, [pc, #16]	; (c654 <LoRaMacAdrCalcNext+0x40>)
    c644:	47a0      	blx	r4
    c646:	0003      	movs	r3, r0
    }
}
    c648:	0018      	movs	r0, r3
    c64a:	46bd      	mov	sp, r7
    c64c:	b005      	add	sp, #20
    c64e:	bd90      	pop	{r4, r7, pc}
    c650:	0000c251 	.word	0x0000c251
    c654:	0000c429 	.word	0x0000c429

0000c658 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
    c658:	b580      	push	{r7, lr}
    c65a:	b084      	sub	sp, #16
    c65c:	af00      	add	r7, sp, #0
    c65e:	60f8      	str	r0, [r7, #12]
    c660:	60b9      	str	r1, [r7, #8]
    c662:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c664:	46c0      	nop			; (mov r8, r8)
    c666:	46bd      	mov	sp, r7
    c668:	b004      	add	sp, #16
    c66a:	bd80      	pop	{r7, pc}

0000c66c <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
    c66c:	b580      	push	{r7, lr}
    c66e:	b082      	sub	sp, #8
    c670:	af00      	add	r7, sp, #0
    c672:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
    c674:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
    c676:	0018      	movs	r0, r3
    c678:	46bd      	mov	sp, r7
    c67a:	b002      	add	sp, #8
    c67c:	bd80      	pop	{r7, pc}

0000c67e <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
    c67e:	b580      	push	{r7, lr}
    c680:	b082      	sub	sp, #8
    c682:	af00      	add	r7, sp, #0
    c684:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
    c686:	687b      	ldr	r3, [r7, #4]
    c688:	2200      	movs	r2, #0
    c68a:	601a      	str	r2, [r3, #0]
    return NULL;
    c68c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c68e:	0018      	movs	r0, r3
    c690:	46bd      	mov	sp, r7
    c692:	b002      	add	sp, #8
    c694:	bd80      	pop	{r7, pc}

0000c696 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
    c696:	b580      	push	{r7, lr}
    c698:	b082      	sub	sp, #8
    c69a:	af00      	add	r7, sp, #0
    c69c:	0002      	movs	r2, r0
    c69e:	1dfb      	adds	r3, r7, #7
    c6a0:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
    c6a2:	46c0      	nop			; (mov r8, r8)
    c6a4:	46bd      	mov	sp, r7
    c6a6:	b002      	add	sp, #8
    c6a8:	bd80      	pop	{r7, pc}

0000c6aa <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
    c6aa:	b580      	push	{r7, lr}
    c6ac:	b082      	sub	sp, #8
    c6ae:	af00      	add	r7, sp, #0
    c6b0:	0002      	movs	r2, r0
    c6b2:	1dfb      	adds	r3, r7, #7
    c6b4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c6b6:	46c0      	nop			; (mov r8, r8)
    c6b8:	46bd      	mov	sp, r7
    c6ba:	b002      	add	sp, #8
    c6bc:	bd80      	pop	{r7, pc}

0000c6be <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
    c6be:	b580      	push	{r7, lr}
    c6c0:	b082      	sub	sp, #8
    c6c2:	af00      	add	r7, sp, #0
    c6c4:	0002      	movs	r2, r0
    c6c6:	1dfb      	adds	r3, r7, #7
    c6c8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c6ca:	46c0      	nop			; (mov r8, r8)
    c6cc:	46bd      	mov	sp, r7
    c6ce:	b002      	add	sp, #8
    c6d0:	bd80      	pop	{r7, pc}

0000c6d2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
    c6d2:	b580      	push	{r7, lr}
    c6d4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
    c6d6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c6d8:	0018      	movs	r0, r3
    c6da:	46bd      	mov	sp, r7
    c6dc:	bd80      	pop	{r7, pc}

0000c6de <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void )
{
    c6de:	b580      	push	{r7, lr}
    c6e0:	af00      	add	r7, sp, #0
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c6e2:	46c0      	nop			; (mov r8, r8)
    c6e4:	46bd      	mov	sp, r7
    c6e6:	bd80      	pop	{r7, pc}

0000c6e8 <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void )
{
    c6e8:	b580      	push	{r7, lr}
    c6ea:	af00      	add	r7, sp, #0
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c6ec:	46c0      	nop			; (mov r8, r8)
    c6ee:	46bd      	mov	sp, r7
    c6f0:	bd80      	pop	{r7, pc}

0000c6f2 <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void )
{
    c6f2:	b580      	push	{r7, lr}
    c6f4:	af00      	add	r7, sp, #0
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	46bd      	mov	sp, r7
    c6fa:	bd80      	pop	{r7, pc}

0000c6fc <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b082      	sub	sp, #8
    c700:	af00      	add	r7, sp, #0
    c702:	6078      	str	r0, [r7, #4]
    c704:	000a      	movs	r2, r1
    c706:	1cbb      	adds	r3, r7, #2
    c708:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
    c70a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c70c:	0018      	movs	r0, r3
    c70e:	46bd      	mov	sp, r7
    c710:	b002      	add	sp, #8
    c712:	bd80      	pop	{r7, pc}

0000c714 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
    c714:	b580      	push	{r7, lr}
    c716:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    c718:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c71a:	0018      	movs	r0, r3
    c71c:	46bd      	mov	sp, r7
    c71e:	bd80      	pop	{r7, pc}

0000c720 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
    c720:	b580      	push	{r7, lr}
    c722:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    c724:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c726:	0018      	movs	r0, r3
    c728:	46bd      	mov	sp, r7
    c72a:	bd80      	pop	{r7, pc}

0000c72c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
    c72c:	b580      	push	{r7, lr}
    c72e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    c730:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c732:	0018      	movs	r0, r3
    c734:	46bd      	mov	sp, r7
    c736:	bd80      	pop	{r7, pc}

0000c738 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
    c738:	b580      	push	{r7, lr}
    c73a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    c73c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c73e:	0018      	movs	r0, r3
    c740:	46bd      	mov	sp, r7
    c742:	bd80      	pop	{r7, pc}

0000c744 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
    c744:	b580      	push	{r7, lr}
    c746:	b082      	sub	sp, #8
    c748:	af00      	add	r7, sp, #0
    c74a:	0002      	movs	r2, r0
    c74c:	1dfb      	adds	r3, r7, #7
    c74e:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c750:	46c0      	nop			; (mov r8, r8)
    c752:	46bd      	mov	sp, r7
    c754:	b002      	add	sp, #8
    c756:	bd80      	pop	{r7, pc}

0000c758 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
    c758:	b580      	push	{r7, lr}
    c75a:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c75c:	46c0      	nop			; (mov r8, r8)
    c75e:	46bd      	mov	sp, r7
    c760:	bd80      	pop	{r7, pc}

0000c762 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
    c762:	b580      	push	{r7, lr}
    c764:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c766:	46c0      	nop			; (mov r8, r8)
    c768:	46bd      	mov	sp, r7
    c76a:	bd80      	pop	{r7, pc}

0000c76c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
    c76c:	b580      	push	{r7, lr}
    c76e:	b082      	sub	sp, #8
    c770:	af00      	add	r7, sp, #0
    c772:	0002      	movs	r2, r0
    c774:	1dfb      	adds	r3, r7, #7
    c776:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    c778:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    c77a:	0018      	movs	r0, r3
    c77c:	46bd      	mov	sp, r7
    c77e:	b002      	add	sp, #8
    c780:	bd80      	pop	{r7, pc}

0000c782 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
    c782:	b580      	push	{r7, lr}
    c784:	b082      	sub	sp, #8
    c786:	af00      	add	r7, sp, #0
    c788:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    c78a:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    c78c:	0018      	movs	r0, r3
    c78e:	46bd      	mov	sp, r7
    c790:	b002      	add	sp, #8
    c792:	bd80      	pop	{r7, pc}

0000c794 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
    c794:	b580      	push	{r7, lr}
    c796:	b082      	sub	sp, #8
    c798:	af00      	add	r7, sp, #0
    c79a:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    c79c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    c79e:	0018      	movs	r0, r3
    c7a0:	46bd      	mov	sp, r7
    c7a2:	b002      	add	sp, #8
    c7a4:	bd80      	pop	{r7, pc}

0000c7a6 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
    c7a6:	b580      	push	{r7, lr}
    c7a8:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c7aa:	46c0      	nop			; (mov r8, r8)
    c7ac:	46bd      	mov	sp, r7
    c7ae:	bd80      	pop	{r7, pc}

0000c7b0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
    c7b0:	b580      	push	{r7, lr}
    c7b2:	b082      	sub	sp, #8
    c7b4:	af00      	add	r7, sp, #0
    c7b6:	0002      	movs	r2, r0
    c7b8:	6039      	str	r1, [r7, #0]
    c7ba:	1dfb      	adds	r3, r7, #7
    c7bc:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
    c7be:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c7c0:	0018      	movs	r0, r3
    c7c2:	46bd      	mov	sp, r7
    c7c4:	b002      	add	sp, #8
    c7c6:	bd80      	pop	{r7, pc}

0000c7c8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b082      	sub	sp, #8
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	603a      	str	r2, [r7, #0]
    c7d0:	1dbb      	adds	r3, r7, #6
    c7d2:	1c02      	adds	r2, r0, #0
    c7d4:	801a      	strh	r2, [r3, #0]
    c7d6:	1d7b      	adds	r3, r7, #5
    c7d8:	1c0a      	adds	r2, r1, #0
    c7da:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c7dc:	46c0      	nop			; (mov r8, r8)
    c7de:	46bd      	mov	sp, r7
    c7e0:	b002      	add	sp, #8
    c7e2:	bd80      	pop	{r7, pc}

0000c7e4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
    c7e4:	b580      	push	{r7, lr}
    c7e6:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c7e8:	46c0      	nop			; (mov r8, r8)
    c7ea:	46bd      	mov	sp, r7
    c7ec:	bd80      	pop	{r7, pc}

0000c7ee <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
    c7ee:	b580      	push	{r7, lr}
    c7f0:	b082      	sub	sp, #8
    c7f2:	af00      	add	r7, sp, #0
    c7f4:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
    c7f6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c7f8:	0018      	movs	r0, r3
    c7fa:	46bd      	mov	sp, r7
    c7fc:	b002      	add	sp, #8
    c7fe:	bd80      	pop	{r7, pc}

0000c800 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
    c800:	b580      	push	{r7, lr}
    c802:	b082      	sub	sp, #8
    c804:	af00      	add	r7, sp, #0
    c806:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
    c808:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    c80a:	0018      	movs	r0, r3
    c80c:	46bd      	mov	sp, r7
    c80e:	b002      	add	sp, #8
    c810:	bd80      	pop	{r7, pc}

0000c812 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
    c812:	b580      	push	{r7, lr}
    c814:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
    c816:	46c0      	nop			; (mov r8, r8)
    c818:	46bd      	mov	sp, r7
    c81a:	bd80      	pop	{r7, pc}

0000c81c <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
    c81c:	b580      	push	{r7, lr}
    c81e:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    c820:	46c0      	nop			; (mov r8, r8)
    c822:	46bd      	mov	sp, r7
    c824:	bd80      	pop	{r7, pc}

0000c826 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
    c826:	b580      	push	{r7, lr}
    c828:	b084      	sub	sp, #16
    c82a:	af00      	add	r7, sp, #0
    c82c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
    c82e:	687b      	ldr	r3, [r7, #4]
    c830:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
    c832:	230e      	movs	r3, #14
    c834:	18fb      	adds	r3, r7, r3
    c836:	2200      	movs	r2, #0
    c838:	801a      	strh	r2, [r3, #0]
    c83a:	e010      	b.n	c85e <isSlotFree+0x38>
    {
        if( mem[size] != 0x00 )
    c83c:	230e      	movs	r3, #14
    c83e:	18fb      	adds	r3, r7, r3
    c840:	881b      	ldrh	r3, [r3, #0]
    c842:	68ba      	ldr	r2, [r7, #8]
    c844:	18d3      	adds	r3, r2, r3
    c846:	781b      	ldrb	r3, [r3, #0]
    c848:	2b00      	cmp	r3, #0
    c84a:	d001      	beq.n	c850 <isSlotFree+0x2a>
        {
            return false;
    c84c:	2300      	movs	r3, #0
    c84e:	e00c      	b.n	c86a <isSlotFree+0x44>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
    c850:	230e      	movs	r3, #14
    c852:	18fb      	adds	r3, r7, r3
    c854:	881a      	ldrh	r2, [r3, #0]
    c856:	230e      	movs	r3, #14
    c858:	18fb      	adds	r3, r7, r3
    c85a:	3201      	adds	r2, #1
    c85c:	801a      	strh	r2, [r3, #0]
    c85e:	230e      	movs	r3, #14
    c860:	18fb      	adds	r3, r7, r3
    c862:	881b      	ldrh	r3, [r3, #0]
    c864:	2b0f      	cmp	r3, #15
    c866:	d9e9      	bls.n	c83c <isSlotFree+0x16>
        }
    }
    return true;
    c868:	2301      	movs	r3, #1
}
    c86a:	0018      	movs	r0, r3
    c86c:	46bd      	mov	sp, r7
    c86e:	b004      	add	sp, #16
    c870:	bd80      	pop	{r7, pc}
	...

0000c874 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
    c874:	b580      	push	{r7, lr}
    c876:	b082      	sub	sp, #8
    c878:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
    c87a:	1dfb      	adds	r3, r7, #7
    c87c:	2200      	movs	r2, #0
    c87e:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
    c880:	e00a      	b.n	c898 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
    c882:	1dfb      	adds	r3, r7, #7
    c884:	781a      	ldrb	r2, [r3, #0]
    c886:	1dfb      	adds	r3, r7, #7
    c888:	3201      	adds	r2, #1
    c88a:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
    c88c:	1dfb      	adds	r3, r7, #7
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	2b0f      	cmp	r3, #15
    c892:	d101      	bne.n	c898 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
    c894:	2300      	movs	r3, #0
    c896:	e017      	b.n	c8c8 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
    c898:	1dfb      	adds	r3, r7, #7
    c89a:	781b      	ldrb	r3, [r3, #0]
    c89c:	011b      	lsls	r3, r3, #4
    c89e:	3308      	adds	r3, #8
    c8a0:	001a      	movs	r2, r3
    c8a2:	4b0b      	ldr	r3, [pc, #44]	; (c8d0 <mallocNewMacCommandSlot+0x5c>)
    c8a4:	18d3      	adds	r3, r2, r3
    c8a6:	0018      	movs	r0, r3
    c8a8:	4b0a      	ldr	r3, [pc, #40]	; (c8d4 <mallocNewMacCommandSlot+0x60>)
    c8aa:	4798      	blx	r3
    c8ac:	0003      	movs	r3, r0
    c8ae:	001a      	movs	r2, r3
    c8b0:	2301      	movs	r3, #1
    c8b2:	4053      	eors	r3, r2
    c8b4:	b2db      	uxtb	r3, r3
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d1e3      	bne.n	c882 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
    c8ba:	1dfb      	adds	r3, r7, #7
    c8bc:	781b      	ldrb	r3, [r3, #0]
    c8be:	011b      	lsls	r3, r3, #4
    c8c0:	3308      	adds	r3, #8
    c8c2:	001a      	movs	r2, r3
    c8c4:	4b02      	ldr	r3, [pc, #8]	; (c8d0 <mallocNewMacCommandSlot+0x5c>)
    c8c6:	18d3      	adds	r3, r2, r3
}
    c8c8:	0018      	movs	r0, r3
    c8ca:	46bd      	mov	sp, r7
    c8cc:	b002      	add	sp, #8
    c8ce:	bd80      	pop	{r7, pc}
    c8d0:	2000139c 	.word	0x2000139c
    c8d4:	0000c827 	.word	0x0000c827

0000c8d8 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
    c8d8:	b580      	push	{r7, lr}
    c8da:	b082      	sub	sp, #8
    c8dc:	af00      	add	r7, sp, #0
    c8de:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d101      	bne.n	c8ea <freeMacCommandSlot+0x12>
    {
        return false;
    c8e6:	2300      	movs	r3, #0
    c8e8:	e006      	b.n	c8f8 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
    c8ea:	687b      	ldr	r3, [r7, #4]
    c8ec:	2210      	movs	r2, #16
    c8ee:	2100      	movs	r1, #0
    c8f0:	0018      	movs	r0, r3
    c8f2:	4b03      	ldr	r3, [pc, #12]	; (c900 <freeMacCommandSlot+0x28>)
    c8f4:	4798      	blx	r3

    return true;
    c8f6:	2301      	movs	r3, #1
}
    c8f8:	0018      	movs	r0, r3
    c8fa:	46bd      	mov	sp, r7
    c8fc:	b002      	add	sp, #8
    c8fe:	bd80      	pop	{r7, pc}
    c900:	000043b1 	.word	0x000043b1

0000c904 <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
    c904:	b580      	push	{r7, lr}
    c906:	b082      	sub	sp, #8
    c908:	af00      	add	r7, sp, #0
    c90a:	6078      	str	r0, [r7, #4]
    if( list == 0 )
    c90c:	687b      	ldr	r3, [r7, #4]
    c90e:	2b00      	cmp	r3, #0
    c910:	d101      	bne.n	c916 <linkedListInit+0x12>
    {
        return false;
    c912:	2300      	movs	r3, #0
    c914:	e006      	b.n	c924 <linkedListInit+0x20>
    }

    list->First = 0;
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	2200      	movs	r2, #0
    c91a:	601a      	str	r2, [r3, #0]
    list->Last = 0;
    c91c:	687b      	ldr	r3, [r7, #4]
    c91e:	2200      	movs	r2, #0
    c920:	605a      	str	r2, [r3, #4]

    return true;
    c922:	2301      	movs	r3, #1
}
    c924:	0018      	movs	r0, r3
    c926:	46bd      	mov	sp, r7
    c928:	b002      	add	sp, #8
    c92a:	bd80      	pop	{r7, pc}

0000c92c <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    c92c:	b580      	push	{r7, lr}
    c92e:	b082      	sub	sp, #8
    c930:	af00      	add	r7, sp, #0
    c932:	6078      	str	r0, [r7, #4]
    c934:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	2b00      	cmp	r3, #0
    c93a:	d104      	bne.n	c946 <linkedListAdd+0x1a>
    c93c:	683b      	ldr	r3, [r7, #0]
    c93e:	2b00      	cmp	r3, #0
    c940:	d101      	bne.n	c946 <linkedListAdd+0x1a>
    {
        return false;
    c942:	2300      	movs	r3, #0
    c944:	e015      	b.n	c972 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
    c946:	687b      	ldr	r3, [r7, #4]
    c948:	681b      	ldr	r3, [r3, #0]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d102      	bne.n	c954 <linkedListAdd+0x28>
    {
        list->First = element;
    c94e:	687b      	ldr	r3, [r7, #4]
    c950:	683a      	ldr	r2, [r7, #0]
    c952:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
    c954:	687b      	ldr	r3, [r7, #4]
    c956:	685b      	ldr	r3, [r3, #4]
    c958:	2b00      	cmp	r3, #0
    c95a:	d003      	beq.n	c964 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	685b      	ldr	r3, [r3, #4]
    c960:	683a      	ldr	r2, [r7, #0]
    c962:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
    c964:	683b      	ldr	r3, [r7, #0]
    c966:	2200      	movs	r2, #0
    c968:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
    c96a:	687b      	ldr	r3, [r7, #4]
    c96c:	683a      	ldr	r2, [r7, #0]
    c96e:	605a      	str	r2, [r3, #4]

    return true;
    c970:	2301      	movs	r3, #1
}
    c972:	0018      	movs	r0, r3
    c974:	46bd      	mov	sp, r7
    c976:	b002      	add	sp, #8
    c978:	bd80      	pop	{r7, pc}

0000c97a <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    c97a:	b580      	push	{r7, lr}
    c97c:	b084      	sub	sp, #16
    c97e:	af00      	add	r7, sp, #0
    c980:	6078      	str	r0, [r7, #4]
    c982:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    c984:	687b      	ldr	r3, [r7, #4]
    c986:	2b00      	cmp	r3, #0
    c988:	d104      	bne.n	c994 <linkedListGetPrevious+0x1a>
    c98a:	683b      	ldr	r3, [r7, #0]
    c98c:	2b00      	cmp	r3, #0
    c98e:	d101      	bne.n	c994 <linkedListGetPrevious+0x1a>
    {
        return NULL;
    c990:	2300      	movs	r3, #0
    c992:	e016      	b.n	c9c2 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
    c994:	687b      	ldr	r3, [r7, #4]
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
    c99a:	683a      	ldr	r2, [r7, #0]
    c99c:	68fb      	ldr	r3, [r7, #12]
    c99e:	429a      	cmp	r2, r3
    c9a0:	d00c      	beq.n	c9bc <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
    c9a2:	e002      	b.n	c9aa <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
    c9a4:	68fb      	ldr	r3, [r7, #12]
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d007      	beq.n	c9c0 <linkedListGetPrevious+0x46>
    c9b0:	68fb      	ldr	r3, [r7, #12]
    c9b2:	681a      	ldr	r2, [r3, #0]
    c9b4:	683b      	ldr	r3, [r7, #0]
    c9b6:	429a      	cmp	r2, r3
    c9b8:	d1f4      	bne.n	c9a4 <linkedListGetPrevious+0x2a>
    c9ba:	e001      	b.n	c9c0 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
    c9bc:	2300      	movs	r3, #0
    c9be:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
    c9c0:	68fb      	ldr	r3, [r7, #12]
}
    c9c2:	0018      	movs	r0, r3
    c9c4:	46bd      	mov	sp, r7
    c9c6:	b004      	add	sp, #16
    c9c8:	bd80      	pop	{r7, pc}
	...

0000c9cc <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    c9cc:	b580      	push	{r7, lr}
    c9ce:	b084      	sub	sp, #16
    c9d0:	af00      	add	r7, sp, #0
    c9d2:	6078      	str	r0, [r7, #4]
    c9d4:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    c9d6:	687b      	ldr	r3, [r7, #4]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d104      	bne.n	c9e6 <linkedListRemove+0x1a>
    c9dc:	683b      	ldr	r3, [r7, #0]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d101      	bne.n	c9e6 <linkedListRemove+0x1a>
    {
        return false;
    c9e2:	2300      	movs	r3, #0
    c9e4:	e023      	b.n	ca2e <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
    c9e6:	683a      	ldr	r2, [r7, #0]
    c9e8:	687b      	ldr	r3, [r7, #4]
    c9ea:	0011      	movs	r1, r2
    c9ec:	0018      	movs	r0, r3
    c9ee:	4b12      	ldr	r3, [pc, #72]	; (ca38 <linkedListRemove+0x6c>)
    c9f0:	4798      	blx	r3
    c9f2:	0003      	movs	r3, r0
    c9f4:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	681a      	ldr	r2, [r3, #0]
    c9fa:	683b      	ldr	r3, [r7, #0]
    c9fc:	429a      	cmp	r2, r3
    c9fe:	d103      	bne.n	ca08 <linkedListRemove+0x3c>
    {
        list->First = element->Next;
    ca00:	683b      	ldr	r3, [r7, #0]
    ca02:	681a      	ldr	r2, [r3, #0]
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
    ca08:	687b      	ldr	r3, [r7, #4]
    ca0a:	685a      	ldr	r2, [r3, #4]
    ca0c:	683b      	ldr	r3, [r7, #0]
    ca0e:	429a      	cmp	r2, r3
    ca10:	d102      	bne.n	ca18 <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
    ca12:	687b      	ldr	r3, [r7, #4]
    ca14:	68fa      	ldr	r2, [r7, #12]
    ca16:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
    ca18:	68fb      	ldr	r3, [r7, #12]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d003      	beq.n	ca26 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
    ca1e:	683b      	ldr	r3, [r7, #0]
    ca20:	681a      	ldr	r2, [r3, #0]
    ca22:	68fb      	ldr	r3, [r7, #12]
    ca24:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
    ca26:	683b      	ldr	r3, [r7, #0]
    ca28:	2200      	movs	r2, #0
    ca2a:	601a      	str	r2, [r3, #0]

    return true;
    ca2c:	2301      	movs	r3, #1
}
    ca2e:	0018      	movs	r0, r3
    ca30:	46bd      	mov	sp, r7
    ca32:	b004      	add	sp, #16
    ca34:	bd80      	pop	{r7, pc}
    ca36:	46c0      	nop			; (mov r8, r8)
    ca38:	0000c97b 	.word	0x0000c97b

0000ca3c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    ca3c:	b580      	push	{r7, lr}
    ca3e:	b082      	sub	sp, #8
    ca40:	af00      	add	r7, sp, #0
    ca42:	0002      	movs	r2, r0
    ca44:	1dfb      	adds	r3, r7, #7
    ca46:	701a      	strb	r2, [r3, #0]
    switch( cid )
    ca48:	1dfb      	adds	r3, r7, #7
    ca4a:	781b      	ldrb	r3, [r3, #0]
    ca4c:	2b20      	cmp	r3, #32
    ca4e:	d806      	bhi.n	ca5e <IsSticky+0x22>
    ca50:	009a      	lsls	r2, r3, #2
    ca52:	4b05      	ldr	r3, [pc, #20]	; (ca68 <IsSticky+0x2c>)
    ca54:	18d3      	adds	r3, r2, r3
    ca56:	681b      	ldr	r3, [r3, #0]
    ca58:	469f      	mov	pc, r3
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
    ca5a:	2301      	movs	r3, #1
    ca5c:	e000      	b.n	ca60 <IsSticky+0x24>
        default:
            return false;
    ca5e:	2300      	movs	r3, #0
    }
}
    ca60:	0018      	movs	r0, r3
    ca62:	46bd      	mov	sp, r7
    ca64:	b002      	add	sp, #8
    ca66:	bd80      	pop	{r7, pc}
    ca68:	0001f58c 	.word	0x0001f58c

0000ca6c <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    ca6c:	b580      	push	{r7, lr}
    ca6e:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
    ca70:	4b04      	ldr	r3, [pc, #16]	; (ca84 <NvmCtxCallback+0x18>)
    ca72:	681b      	ldr	r3, [r3, #0]
    ca74:	2b00      	cmp	r3, #0
    ca76:	d002      	beq.n	ca7e <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
    ca78:	4b02      	ldr	r3, [pc, #8]	; (ca84 <NvmCtxCallback+0x18>)
    ca7a:	681b      	ldr	r3, [r3, #0]
    ca7c:	4798      	blx	r3
    }
}
    ca7e:	46c0      	nop			; (mov r8, r8)
    ca80:	46bd      	mov	sp, r7
    ca82:	bd80      	pop	{r7, pc}
    ca84:	20001398 	.word	0x20001398

0000ca88 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	b082      	sub	sp, #8
    ca8c:	af00      	add	r7, sp, #0
    ca8e:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
    ca90:	4b08      	ldr	r3, [pc, #32]	; (cab4 <LoRaMacCommandsInit+0x2c>)
    ca92:	22fc      	movs	r2, #252	; 0xfc
    ca94:	2100      	movs	r1, #0
    ca96:	0018      	movs	r0, r3
    ca98:	4b07      	ldr	r3, [pc, #28]	; (cab8 <LoRaMacCommandsInit+0x30>)
    ca9a:	4798      	blx	r3

    linkedListInit( &NvmCtx.MacCommandList );
    ca9c:	4b05      	ldr	r3, [pc, #20]	; (cab4 <LoRaMacCommandsInit+0x2c>)
    ca9e:	0018      	movs	r0, r3
    caa0:	4b06      	ldr	r3, [pc, #24]	; (cabc <LoRaMacCommandsInit+0x34>)
    caa2:	4798      	blx	r3

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
    caa4:	4b06      	ldr	r3, [pc, #24]	; (cac0 <LoRaMacCommandsInit+0x38>)
    caa6:	687a      	ldr	r2, [r7, #4]
    caa8:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
    caaa:	2300      	movs	r3, #0
}
    caac:	0018      	movs	r0, r3
    caae:	46bd      	mov	sp, r7
    cab0:	b002      	add	sp, #8
    cab2:	bd80      	pop	{r7, pc}
    cab4:	2000139c 	.word	0x2000139c
    cab8:	000043b1 	.word	0x000043b1
    cabc:	0000c905 	.word	0x0000c905
    cac0:	20001398 	.word	0x20001398

0000cac4 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
    cac4:	b580      	push	{r7, lr}
    cac6:	b082      	sub	sp, #8
    cac8:	af00      	add	r7, sp, #0
    caca:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	2b00      	cmp	r3, #0
    cad0:	d007      	beq.n	cae2 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
    cad2:	6879      	ldr	r1, [r7, #4]
    cad4:	4b05      	ldr	r3, [pc, #20]	; (caec <LoRaMacCommandsRestoreNvmCtx+0x28>)
    cad6:	22fc      	movs	r2, #252	; 0xfc
    cad8:	0018      	movs	r0, r3
    cada:	4b05      	ldr	r3, [pc, #20]	; (caf0 <LoRaMacCommandsRestoreNvmCtx+0x2c>)
    cadc:	4798      	blx	r3
        return LORAMAC_COMMANDS_SUCCESS;
    cade:	2300      	movs	r3, #0
    cae0:	e000      	b.n	cae4 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    cae2:	2301      	movs	r3, #1
    }
}
    cae4:	0018      	movs	r0, r3
    cae6:	46bd      	mov	sp, r7
    cae8:	b002      	add	sp, #8
    caea:	bd80      	pop	{r7, pc}
    caec:	2000139c 	.word	0x2000139c
    caf0:	00004339 	.word	0x00004339

0000caf4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    caf4:	b580      	push	{r7, lr}
    caf6:	b082      	sub	sp, #8
    caf8:	af00      	add	r7, sp, #0
    cafa:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	22fc      	movs	r2, #252	; 0xfc
    cb00:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
    cb02:	4b02      	ldr	r3, [pc, #8]	; (cb0c <LoRaMacCommandsGetNvmCtx+0x18>)
}
    cb04:	0018      	movs	r0, r3
    cb06:	46bd      	mov	sp, r7
    cb08:	b002      	add	sp, #8
    cb0a:	bd80      	pop	{r7, pc}
    cb0c:	2000139c 	.word	0x2000139c

0000cb10 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
    cb10:	b580      	push	{r7, lr}
    cb12:	b086      	sub	sp, #24
    cb14:	af00      	add	r7, sp, #0
    cb16:	60b9      	str	r1, [r7, #8]
    cb18:	607a      	str	r2, [r7, #4]
    cb1a:	230f      	movs	r3, #15
    cb1c:	18fb      	adds	r3, r7, r3
    cb1e:	1c02      	adds	r2, r0, #0
    cb20:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
    cb22:	68bb      	ldr	r3, [r7, #8]
    cb24:	2b00      	cmp	r3, #0
    cb26:	d101      	bne.n	cb2c <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    cb28:	2301      	movs	r3, #1
    cb2a:	e03d      	b.n	cba8 <LoRaMacCommandsAddCmd+0x98>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
    cb2c:	4b20      	ldr	r3, [pc, #128]	; (cbb0 <LoRaMacCommandsAddCmd+0xa0>)
    cb2e:	4798      	blx	r3
    cb30:	0003      	movs	r3, r0
    cb32:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
    cb34:	697b      	ldr	r3, [r7, #20]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d101      	bne.n	cb3e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    cb3a:	2302      	movs	r3, #2
    cb3c:	e034      	b.n	cba8 <LoRaMacCommandsAddCmd+0x98>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
    cb3e:	697a      	ldr	r2, [r7, #20]
    cb40:	4b1c      	ldr	r3, [pc, #112]	; (cbb4 <LoRaMacCommandsAddCmd+0xa4>)
    cb42:	0011      	movs	r1, r2
    cb44:	0018      	movs	r0, r3
    cb46:	4b1c      	ldr	r3, [pc, #112]	; (cbb8 <LoRaMacCommandsAddCmd+0xa8>)
    cb48:	4798      	blx	r3
    cb4a:	0003      	movs	r3, r0
    cb4c:	001a      	movs	r2, r3
    cb4e:	2301      	movs	r3, #1
    cb50:	4053      	eors	r3, r2
    cb52:	b2db      	uxtb	r3, r3
    cb54:	2b00      	cmp	r3, #0
    cb56:	d001      	beq.n	cb5c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    cb58:	2305      	movs	r3, #5
    cb5a:	e025      	b.n	cba8 <LoRaMacCommandsAddCmd+0x98>
    }

    // Set Values
    newCmd->CID = cid;
    cb5c:	697b      	ldr	r3, [r7, #20]
    cb5e:	220f      	movs	r2, #15
    cb60:	18ba      	adds	r2, r7, r2
    cb62:	7812      	ldrb	r2, [r2, #0]
    cb64:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
    cb66:	697b      	ldr	r3, [r7, #20]
    cb68:	687a      	ldr	r2, [r7, #4]
    cb6a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
    cb6c:	697b      	ldr	r3, [r7, #20]
    cb6e:	3305      	adds	r3, #5
    cb70:	687a      	ldr	r2, [r7, #4]
    cb72:	b292      	uxth	r2, r2
    cb74:	68b9      	ldr	r1, [r7, #8]
    cb76:	0018      	movs	r0, r3
    cb78:	4b10      	ldr	r3, [pc, #64]	; (cbbc <LoRaMacCommandsAddCmd+0xac>)
    cb7a:	4798      	blx	r3
    newCmd->IsSticky = IsSticky( cid );
    cb7c:	230f      	movs	r3, #15
    cb7e:	18fb      	adds	r3, r7, r3
    cb80:	781b      	ldrb	r3, [r3, #0]
    cb82:	0018      	movs	r0, r3
    cb84:	4b0e      	ldr	r3, [pc, #56]	; (cbc0 <LoRaMacCommandsAddCmd+0xb0>)
    cb86:	4798      	blx	r3
    cb88:	0003      	movs	r3, r0
    cb8a:	001a      	movs	r2, r3
    cb8c:	697b      	ldr	r3, [r7, #20]
    cb8e:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
    cb90:	4b08      	ldr	r3, [pc, #32]	; (cbb4 <LoRaMacCommandsAddCmd+0xa4>)
    cb92:	22f8      	movs	r2, #248	; 0xf8
    cb94:	589a      	ldr	r2, [r3, r2]
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	18d3      	adds	r3, r2, r3
    cb9a:	1c5a      	adds	r2, r3, #1
    cb9c:	4b05      	ldr	r3, [pc, #20]	; (cbb4 <LoRaMacCommandsAddCmd+0xa4>)
    cb9e:	21f8      	movs	r1, #248	; 0xf8
    cba0:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
    cba2:	4b08      	ldr	r3, [pc, #32]	; (cbc4 <LoRaMacCommandsAddCmd+0xb4>)
    cba4:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    cba6:	2300      	movs	r3, #0
}
    cba8:	0018      	movs	r0, r3
    cbaa:	46bd      	mov	sp, r7
    cbac:	b006      	add	sp, #24
    cbae:	bd80      	pop	{r7, pc}
    cbb0:	0000c875 	.word	0x0000c875
    cbb4:	2000139c 	.word	0x2000139c
    cbb8:	0000c92d 	.word	0x0000c92d
    cbbc:	00004339 	.word	0x00004339
    cbc0:	0000ca3d 	.word	0x0000ca3d
    cbc4:	0000ca6d 	.word	0x0000ca6d

0000cbc8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    cbc8:	b580      	push	{r7, lr}
    cbca:	b082      	sub	sp, #8
    cbcc:	af00      	add	r7, sp, #0
    cbce:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d101      	bne.n	cbda <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    cbd6:	2301      	movs	r3, #1
    cbd8:	e028      	b.n	cc2c <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    cbda:	687a      	ldr	r2, [r7, #4]
    cbdc:	4b15      	ldr	r3, [pc, #84]	; (cc34 <LoRaMacCommandsRemoveCmd+0x6c>)
    cbde:	0011      	movs	r1, r2
    cbe0:	0018      	movs	r0, r3
    cbe2:	4b15      	ldr	r3, [pc, #84]	; (cc38 <LoRaMacCommandsRemoveCmd+0x70>)
    cbe4:	4798      	blx	r3
    cbe6:	0003      	movs	r3, r0
    cbe8:	001a      	movs	r2, r3
    cbea:	2301      	movs	r3, #1
    cbec:	4053      	eors	r3, r2
    cbee:	b2db      	uxtb	r3, r3
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	d001      	beq.n	cbf8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    cbf4:	2303      	movs	r3, #3
    cbf6:	e019      	b.n	cc2c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
    cbf8:	4b0e      	ldr	r3, [pc, #56]	; (cc34 <LoRaMacCommandsRemoveCmd+0x6c>)
    cbfa:	22f8      	movs	r2, #248	; 0xf8
    cbfc:	589a      	ldr	r2, [r3, r2]
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	689b      	ldr	r3, [r3, #8]
    cc02:	1ad3      	subs	r3, r2, r3
    cc04:	1e5a      	subs	r2, r3, #1
    cc06:	4b0b      	ldr	r3, [pc, #44]	; (cc34 <LoRaMacCommandsRemoveCmd+0x6c>)
    cc08:	21f8      	movs	r1, #248	; 0xf8
    cc0a:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
    cc0c:	687b      	ldr	r3, [r7, #4]
    cc0e:	0018      	movs	r0, r3
    cc10:	4b0a      	ldr	r3, [pc, #40]	; (cc3c <LoRaMacCommandsRemoveCmd+0x74>)
    cc12:	4798      	blx	r3
    cc14:	0003      	movs	r3, r0
    cc16:	001a      	movs	r2, r3
    cc18:	2301      	movs	r3, #1
    cc1a:	4053      	eors	r3, r2
    cc1c:	b2db      	uxtb	r3, r3
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d001      	beq.n	cc26 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
    cc22:	2305      	movs	r3, #5
    cc24:	e002      	b.n	cc2c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
    cc26:	4b06      	ldr	r3, [pc, #24]	; (cc40 <LoRaMacCommandsRemoveCmd+0x78>)
    cc28:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    cc2a:	2300      	movs	r3, #0
}
    cc2c:	0018      	movs	r0, r3
    cc2e:	46bd      	mov	sp, r7
    cc30:	b002      	add	sp, #8
    cc32:	bd80      	pop	{r7, pc}
    cc34:	2000139c 	.word	0x2000139c
    cc38:	0000c9cd 	.word	0x0000c9cd
    cc3c:	0000c8d9 	.word	0x0000c8d9
    cc40:	0000ca6d 	.word	0x0000ca6d

0000cc44 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    cc44:	b580      	push	{r7, lr}
    cc46:	b084      	sub	sp, #16
    cc48:	af00      	add	r7, sp, #0
    cc4a:	0002      	movs	r2, r0
    cc4c:	6039      	str	r1, [r7, #0]
    cc4e:	1dfb      	adds	r3, r7, #7
    cc50:	701a      	strb	r2, [r3, #0]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    cc52:	4b0e      	ldr	r3, [pc, #56]	; (cc8c <LoRaMacCommandsGetCmd+0x48>)
    cc54:	681b      	ldr	r3, [r3, #0]
    cc56:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while(curElement && ( curElement->CID != cid ) )
    cc58:	e002      	b.n	cc60 <LoRaMacCommandsGetCmd+0x1c>
    {
        curElement = curElement->Next;
    cc5a:	68fb      	ldr	r3, [r7, #12]
    cc5c:	681b      	ldr	r3, [r3, #0]
    cc5e:	60fb      	str	r3, [r7, #12]
    while(curElement && ( curElement->CID != cid ) )
    cc60:	68fb      	ldr	r3, [r7, #12]
    cc62:	2b00      	cmp	r3, #0
    cc64:	d005      	beq.n	cc72 <LoRaMacCommandsGetCmd+0x2e>
    cc66:	68fb      	ldr	r3, [r7, #12]
    cc68:	791b      	ldrb	r3, [r3, #4]
    cc6a:	1dfa      	adds	r2, r7, #7
    cc6c:	7812      	ldrb	r2, [r2, #0]
    cc6e:	429a      	cmp	r2, r3
    cc70:	d1f3      	bne.n	cc5a <LoRaMacCommandsGetCmd+0x16>
    }

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    cc72:	68fb      	ldr	r3, [r7, #12]
    cc74:	2b00      	cmp	r3, #0
    cc76:	d101      	bne.n	cc7c <LoRaMacCommandsGetCmd+0x38>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    cc78:	2303      	movs	r3, #3
    cc7a:	e003      	b.n	cc84 <LoRaMacCommandsGetCmd+0x40>
    }

    *macCmd = curElement;
    cc7c:	683b      	ldr	r3, [r7, #0]
    cc7e:	68fa      	ldr	r2, [r7, #12]
    cc80:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
    cc82:	2300      	movs	r3, #0
}
    cc84:	0018      	movs	r0, r3
    cc86:	46bd      	mov	sp, r7
    cc88:	b004      	add	sp, #16
    cc8a:	bd80      	pop	{r7, pc}
    cc8c:	2000139c 	.word	0x2000139c

0000cc90 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
    cc90:	b580      	push	{r7, lr}
    cc92:	b082      	sub	sp, #8
    cc94:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    cc96:	4b11      	ldr	r3, [pc, #68]	; (ccdc <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
    cc9c:	e013      	b.n	ccc6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
    cc9e:	687b      	ldr	r3, [r7, #4]
    cca0:	7b1b      	ldrb	r3, [r3, #12]
    cca2:	2201      	movs	r2, #1
    cca4:	4053      	eors	r3, r2
    cca6:	b2db      	uxtb	r3, r3
    cca8:	2b00      	cmp	r3, #0
    ccaa:	d009      	beq.n	ccc0 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
    ccac:	687b      	ldr	r3, [r7, #4]
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
    ccb2:	687b      	ldr	r3, [r7, #4]
    ccb4:	0018      	movs	r0, r3
    ccb6:	4b0a      	ldr	r3, [pc, #40]	; (cce0 <LoRaMacCommandsRemoveNoneStickyCmds+0x50>)
    ccb8:	4798      	blx	r3
            curElement = nexElement;
    ccba:	683b      	ldr	r3, [r7, #0]
    ccbc:	607b      	str	r3, [r7, #4]
    ccbe:	e002      	b.n	ccc6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
    ccc0:	687b      	ldr	r3, [r7, #4]
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	607b      	str	r3, [r7, #4]
    while( curElement )
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d1e8      	bne.n	cc9e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
    cccc:	4b05      	ldr	r3, [pc, #20]	; (cce4 <LoRaMacCommandsRemoveNoneStickyCmds+0x54>)
    ccce:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    ccd0:	2300      	movs	r3, #0
}
    ccd2:	0018      	movs	r0, r3
    ccd4:	46bd      	mov	sp, r7
    ccd6:	b002      	add	sp, #8
    ccd8:	bd80      	pop	{r7, pc}
    ccda:	46c0      	nop			; (mov r8, r8)
    ccdc:	2000139c 	.word	0x2000139c
    cce0:	0000cbc9 	.word	0x0000cbc9
    cce4:	0000ca6d 	.word	0x0000ca6d

0000cce8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
    cce8:	b580      	push	{r7, lr}
    ccea:	b084      	sub	sp, #16
    ccec:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    ccee:	4b1b      	ldr	r3, [pc, #108]	; (cd5c <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
    ccf0:	681b      	ldr	r3, [r3, #0]
    ccf2:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
    ccf4:	e027      	b.n	cd46 <LoRaMacCommandsRemoveStickyAnsCmds+0x5e>
    {
        nexElement = curElement->Next;
    ccf6:	68fb      	ldr	r3, [r7, #12]
    ccf8:	681b      	ldr	r3, [r3, #0]
    ccfa:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
    ccfc:	68fb      	ldr	r3, [r7, #12]
    ccfe:	7b1b      	ldrb	r3, [r3, #12]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d01e      	beq.n	cd42 <LoRaMacCommandsRemoveStickyAnsCmds+0x5a>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
    cd04:	230b      	movs	r3, #11
    cd06:	18fb      	adds	r3, r7, r3
    cd08:	2200      	movs	r2, #0
    cd0a:	701a      	strb	r2, [r3, #0]
    cd0c:	e014      	b.n	cd38 <LoRaMacCommandsRemoveStickyAnsCmds+0x50>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	791a      	ldrb	r2, [r3, #4]
    cd12:	230b      	movs	r3, #11
    cd14:	18fb      	adds	r3, r7, r3
    cd16:	781b      	ldrb	r3, [r3, #0]
    cd18:	4911      	ldr	r1, [pc, #68]	; (cd60 <LoRaMacCommandsRemoveStickyAnsCmds+0x78>)
    cd1a:	5ccb      	ldrb	r3, [r1, r3]
    cd1c:	429a      	cmp	r2, r3
    cd1e:	d104      	bne.n	cd2a <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
    cd20:	68fb      	ldr	r3, [r7, #12]
    cd22:	0018      	movs	r0, r3
    cd24:	4b0f      	ldr	r3, [pc, #60]	; (cd64 <LoRaMacCommandsRemoveStickyAnsCmds+0x7c>)
    cd26:	4798      	blx	r3
                    break;
    cd28:	e00b      	b.n	cd42 <LoRaMacCommandsRemoveStickyAnsCmds+0x5a>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
    cd2a:	230b      	movs	r3, #11
    cd2c:	18fb      	adds	r3, r7, r3
    cd2e:	781a      	ldrb	r2, [r3, #0]
    cd30:	230b      	movs	r3, #11
    cd32:	18fb      	adds	r3, r7, r3
    cd34:	3201      	adds	r2, #1
    cd36:	701a      	strb	r2, [r3, #0]
    cd38:	230b      	movs	r3, #11
    cd3a:	18fb      	adds	r3, r7, r3
    cd3c:	781b      	ldrb	r3, [r3, #0]
    cd3e:	2b02      	cmp	r3, #2
    cd40:	d9e5      	bls.n	cd0e <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
    cd42:	687b      	ldr	r3, [r7, #4]
    cd44:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
    cd46:	68fb      	ldr	r3, [r7, #12]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d1d4      	bne.n	ccf6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
    cd4c:	4b06      	ldr	r3, [pc, #24]	; (cd68 <LoRaMacCommandsRemoveStickyAnsCmds+0x80>)
    cd4e:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    cd50:	2300      	movs	r3, #0
}
    cd52:	0018      	movs	r0, r3
    cd54:	46bd      	mov	sp, r7
    cd56:	b004      	add	sp, #16
    cd58:	bd80      	pop	{r7, pc}
    cd5a:	46c0      	nop			; (mov r8, r8)
    cd5c:	2000139c 	.word	0x2000139c
    cd60:	0001f588 	.word	0x0001f588
    cd64:	0000cbc9 	.word	0x0000cbc9
    cd68:	0000ca6d 	.word	0x0000ca6d

0000cd6c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    cd6c:	b580      	push	{r7, lr}
    cd6e:	b082      	sub	sp, #8
    cd70:	af00      	add	r7, sp, #0
    cd72:	6078      	str	r0, [r7, #4]
    if( size == NULL )
    cd74:	687b      	ldr	r3, [r7, #4]
    cd76:	2b00      	cmp	r3, #0
    cd78:	d101      	bne.n	cd7e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    cd7a:	2301      	movs	r3, #1
    cd7c:	e005      	b.n	cd8a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
    cd7e:	4b05      	ldr	r3, [pc, #20]	; (cd94 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
    cd80:	22f8      	movs	r2, #248	; 0xf8
    cd82:	589a      	ldr	r2, [r3, r2]
    cd84:	687b      	ldr	r3, [r7, #4]
    cd86:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
    cd88:	2300      	movs	r3, #0

}
    cd8a:	0018      	movs	r0, r3
    cd8c:	46bd      	mov	sp, r7
    cd8e:	b002      	add	sp, #8
    cd90:	bd80      	pop	{r7, pc}
    cd92:	46c0      	nop			; (mov r8, r8)
    cd94:	2000139c 	.word	0x2000139c

0000cd98 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b086      	sub	sp, #24
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	60f8      	str	r0, [r7, #12]
    cda0:	60b9      	str	r1, [r7, #8]
    cda2:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	2b00      	cmp	r3, #0
    cda8:	d002      	beq.n	cdb0 <LoRaMacCommandsSerializeCmds+0x18>
    cdaa:	68bb      	ldr	r3, [r7, #8]
    cdac:	2b00      	cmp	r3, #0
    cdae:	d101      	bne.n	cdb4 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    cdb0:	2301      	movs	r3, #1
    cdb2:	e03e      	b.n	ce32 <LoRaMacCommandsSerializeCmds+0x9a>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    cdb4:	4b21      	ldr	r3, [pc, #132]	; (ce3c <LoRaMacCommandsSerializeCmds+0xa4>)
    cdb6:	681b      	ldr	r3, [r3, #0]
    cdb8:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
    cdba:	2313      	movs	r3, #19
    cdbc:	18fb      	adds	r3, r7, r3
    cdbe:	2200      	movs	r2, #0
    cdc0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
    cdc2:	e030      	b.n	ce26 <LoRaMacCommandsSerializeCmds+0x8e>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
    cdc4:	2313      	movs	r3, #19
    cdc6:	18fb      	adds	r3, r7, r3
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	68fa      	ldr	r2, [r7, #12]
    cdcc:	1ad2      	subs	r2, r2, r3
    cdce:	697b      	ldr	r3, [r7, #20]
    cdd0:	689b      	ldr	r3, [r3, #8]
    cdd2:	3301      	adds	r3, #1
    cdd4:	429a      	cmp	r2, r3
    cdd6:	d32a      	bcc.n	ce2e <LoRaMacCommandsSerializeCmds+0x96>
        {
            buffer[itr++] = curElement->CID;
    cdd8:	2313      	movs	r3, #19
    cdda:	18fb      	adds	r3, r7, r3
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	2213      	movs	r2, #19
    cde0:	18ba      	adds	r2, r7, r2
    cde2:	1c59      	adds	r1, r3, #1
    cde4:	7011      	strb	r1, [r2, #0]
    cde6:	001a      	movs	r2, r3
    cde8:	687b      	ldr	r3, [r7, #4]
    cdea:	189b      	adds	r3, r3, r2
    cdec:	697a      	ldr	r2, [r7, #20]
    cdee:	7912      	ldrb	r2, [r2, #4]
    cdf0:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
    cdf2:	2313      	movs	r3, #19
    cdf4:	18fb      	adds	r3, r7, r3
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	687a      	ldr	r2, [r7, #4]
    cdfa:	18d0      	adds	r0, r2, r3
    cdfc:	697b      	ldr	r3, [r7, #20]
    cdfe:	1d59      	adds	r1, r3, #5
    ce00:	697b      	ldr	r3, [r7, #20]
    ce02:	689b      	ldr	r3, [r3, #8]
    ce04:	b29b      	uxth	r3, r3
    ce06:	001a      	movs	r2, r3
    ce08:	4b0d      	ldr	r3, [pc, #52]	; (ce40 <LoRaMacCommandsSerializeCmds+0xa8>)
    ce0a:	4798      	blx	r3
            itr = itr + curElement->PayloadSize;
    ce0c:	697b      	ldr	r3, [r7, #20]
    ce0e:	689b      	ldr	r3, [r3, #8]
    ce10:	b2d9      	uxtb	r1, r3
    ce12:	2313      	movs	r3, #19
    ce14:	18fb      	adds	r3, r7, r3
    ce16:	2213      	movs	r2, #19
    ce18:	18ba      	adds	r2, r7, r2
    ce1a:	7812      	ldrb	r2, [r2, #0]
    ce1c:	188a      	adds	r2, r1, r2
    ce1e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
    ce20:	697b      	ldr	r3, [r7, #20]
    ce22:	681b      	ldr	r3, [r3, #0]
    ce24:	617b      	str	r3, [r7, #20]
    while( curElement )
    ce26:	697b      	ldr	r3, [r7, #20]
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d1cb      	bne.n	cdc4 <LoRaMacCommandsSerializeCmds+0x2c>
    ce2c:	e000      	b.n	ce30 <LoRaMacCommandsSerializeCmds+0x98>
            break;
    ce2e:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
    ce30:	2300      	movs	r3, #0
}
    ce32:	0018      	movs	r0, r3
    ce34:	46bd      	mov	sp, r7
    ce36:	b006      	add	sp, #24
    ce38:	bd80      	pop	{r7, pc}
    ce3a:	46c0      	nop			; (mov r8, r8)
    ce3c:	2000139c 	.word	0x2000139c
    ce40:	00004339 	.word	0x00004339

0000ce44 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b084      	sub	sp, #16
    ce48:	af00      	add	r7, sp, #0
    ce4a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d101      	bne.n	ce56 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    ce52:	2301      	movs	r3, #1
    ce54:	e016      	b.n	ce84 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    ce56:	4b0d      	ldr	r3, [pc, #52]	; (ce8c <LoRaMacCommandsStickyCmdsPending+0x48>)
    ce58:	681b      	ldr	r3, [r3, #0]
    ce5a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
    ce5c:	687b      	ldr	r3, [r7, #4]
    ce5e:	2200      	movs	r2, #0
    ce60:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
    ce62:	e00b      	b.n	ce7c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
    ce64:	68fb      	ldr	r3, [r7, #12]
    ce66:	7b1b      	ldrb	r3, [r3, #12]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d004      	beq.n	ce76 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	2201      	movs	r2, #1
    ce70:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
    ce72:	2300      	movs	r3, #0
    ce74:	e006      	b.n	ce84 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
    ce76:	68fb      	ldr	r3, [r7, #12]
    ce78:	681b      	ldr	r3, [r3, #0]
    ce7a:	60fb      	str	r3, [r7, #12]
    while( curElement )
    ce7c:	68fb      	ldr	r3, [r7, #12]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d1f0      	bne.n	ce64 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
    ce82:	2300      	movs	r3, #0
}
    ce84:	0018      	movs	r0, r3
    ce86:	46bd      	mov	sp, r7
    ce88:	b004      	add	sp, #16
    ce8a:	bd80      	pop	{r7, pc}
    ce8c:	2000139c 	.word	0x2000139c

0000ce90 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    ce90:	b580      	push	{r7, lr}
    ce92:	b082      	sub	sp, #8
    ce94:	af00      	add	r7, sp, #0
    ce96:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    ce98:	4b09      	ldr	r3, [pc, #36]	; (cec0 <IncreaseBufferPointer+0x30>)
    ce9a:	691b      	ldr	r3, [r3, #16]
    ce9c:	3310      	adds	r3, #16
    ce9e:	001a      	movs	r2, r3
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	429a      	cmp	r2, r3
    cea4:	d103      	bne.n	ceae <IncreaseBufferPointer+0x1e>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    cea6:	4b06      	ldr	r3, [pc, #24]	; (cec0 <IncreaseBufferPointer+0x30>)
    cea8:	691b      	ldr	r3, [r3, #16]
    ceaa:	607b      	str	r3, [r7, #4]
    ceac:	e002      	b.n	ceb4 <IncreaseBufferPointer+0x24>
    }
    else
    {
        // Increase
        bufferPointer++;
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	3304      	adds	r3, #4
    ceb2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
    ceb4:	687b      	ldr	r3, [r7, #4]
}
    ceb6:	0018      	movs	r0, r3
    ceb8:	46bd      	mov	sp, r7
    ceba:	b002      	add	sp, #8
    cebc:	bd80      	pop	{r7, pc}
    cebe:	46c0      	nop			; (mov r8, r8)
    cec0:	200014b0 	.word	0x200014b0

0000cec4 <DecreaseBufferPointer>:

static MlmeConfirmQueue_t* DecreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    cec4:	b580      	push	{r7, lr}
    cec6:	b082      	sub	sp, #8
    cec8:	af00      	add	r7, sp, #0
    ceca:	6078      	str	r0, [r7, #4]
    if( bufferPointer == ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue )
    cecc:	4b09      	ldr	r3, [pc, #36]	; (cef4 <DecreaseBufferPointer+0x30>)
    cece:	691b      	ldr	r3, [r3, #16]
    ced0:	001a      	movs	r2, r3
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	429a      	cmp	r2, r3
    ced6:	d104      	bne.n	cee2 <DecreaseBufferPointer+0x1e>
    {
        // Reset to the last element
        bufferPointer = &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
    ced8:	4b06      	ldr	r3, [pc, #24]	; (cef4 <DecreaseBufferPointer+0x30>)
    ceda:	691b      	ldr	r3, [r3, #16]
    cedc:	3310      	adds	r3, #16
    cede:	607b      	str	r3, [r7, #4]
    cee0:	e002      	b.n	cee8 <DecreaseBufferPointer+0x24>
    }
    else
    {
        bufferPointer--;
    cee2:	687b      	ldr	r3, [r7, #4]
    cee4:	3b04      	subs	r3, #4
    cee6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
    cee8:	687b      	ldr	r3, [r7, #4]
}
    ceea:	0018      	movs	r0, r3
    ceec:	46bd      	mov	sp, r7
    ceee:	b002      	add	sp, #8
    cef0:	bd80      	pop	{r7, pc}
    cef2:	46c0      	nop			; (mov r8, r8)
    cef4:	200014b0 	.word	0x200014b0

0000cef8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
    cef8:	b580      	push	{r7, lr}
    cefa:	b086      	sub	sp, #24
    cefc:	af00      	add	r7, sp, #0
    cefe:	60b9      	str	r1, [r7, #8]
    cf00:	607a      	str	r2, [r7, #4]
    cf02:	230f      	movs	r3, #15
    cf04:	18fb      	adds	r3, r7, r3
    cf06:	1c02      	adds	r2, r0, #0
    cf08:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
    cf0a:	68bb      	ldr	r3, [r7, #8]
    cf0c:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
    cf0e:	e00e      	b.n	cf2e <GetElement+0x36>
    {
        if( element->Request == request )
    cf10:	697b      	ldr	r3, [r7, #20]
    cf12:	781b      	ldrb	r3, [r3, #0]
    cf14:	220f      	movs	r2, #15
    cf16:	18ba      	adds	r2, r7, r2
    cf18:	7812      	ldrb	r2, [r2, #0]
    cf1a:	429a      	cmp	r2, r3
    cf1c:	d101      	bne.n	cf22 <GetElement+0x2a>
        {
            // We have found the element
            return element;
    cf1e:	697b      	ldr	r3, [r7, #20]
    cf20:	e00a      	b.n	cf38 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
    cf22:	697b      	ldr	r3, [r7, #20]
    cf24:	0018      	movs	r0, r3
    cf26:	4b06      	ldr	r3, [pc, #24]	; (cf40 <GetElement+0x48>)
    cf28:	4798      	blx	r3
    cf2a:	0003      	movs	r3, r0
    cf2c:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
    cf2e:	697a      	ldr	r2, [r7, #20]
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	429a      	cmp	r2, r3
    cf34:	d1ec      	bne.n	cf10 <GetElement+0x18>
        }
    }
    return NULL;
    cf36:	2300      	movs	r3, #0
}
    cf38:	0018      	movs	r0, r3
    cf3a:	46bd      	mov	sp, r7
    cf3c:	b006      	add	sp, #24
    cf3e:	bd80      	pop	{r7, pc}
    cf40:	0000ce91 	.word	0x0000ce91

0000cf44 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
    cf44:	b580      	push	{r7, lr}
    cf46:	b082      	sub	sp, #8
    cf48:	af00      	add	r7, sp, #0
    cf4a:	6078      	str	r0, [r7, #4]
    cf4c:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
    cf4e:	4b13      	ldr	r3, [pc, #76]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf50:	687a      	ldr	r2, [r7, #4]
    cf52:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
    cf54:	4b11      	ldr	r3, [pc, #68]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf56:	4a12      	ldr	r2, [pc, #72]	; (cfa0 <LoRaMacConfirmQueueInit+0x5c>)
    cf58:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
    cf5a:	4b10      	ldr	r3, [pc, #64]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf5c:	691b      	ldr	r3, [r3, #16]
    cf5e:	2200      	movs	r2, #0
    cf60:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    cf62:	4b0e      	ldr	r3, [pc, #56]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf64:	691b      	ldr	r3, [r3, #16]
    cf66:	001a      	movs	r2, r3
    cf68:	4b0c      	ldr	r3, [pc, #48]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf6a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    cf6c:	4b0b      	ldr	r3, [pc, #44]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf6e:	691b      	ldr	r3, [r3, #16]
    cf70:	001a      	movs	r2, r3
    cf72:	4b0a      	ldr	r3, [pc, #40]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf74:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
    cf76:	4b09      	ldr	r3, [pc, #36]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf78:	691b      	ldr	r3, [r3, #16]
    cf7a:	2214      	movs	r2, #20
    cf7c:	21ff      	movs	r1, #255	; 0xff
    cf7e:	0018      	movs	r0, r3
    cf80:	4b08      	ldr	r3, [pc, #32]	; (cfa4 <LoRaMacConfirmQueueInit+0x60>)
    cf82:	4798      	blx	r3

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
    cf84:	4b05      	ldr	r3, [pc, #20]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf86:	691b      	ldr	r3, [r3, #16]
    cf88:	2201      	movs	r2, #1
    cf8a:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
    cf8c:	4b03      	ldr	r3, [pc, #12]	; (cf9c <LoRaMacConfirmQueueInit+0x58>)
    cf8e:	683a      	ldr	r2, [r7, #0]
    cf90:	60da      	str	r2, [r3, #12]
}
    cf92:	46c0      	nop			; (mov r8, r8)
    cf94:	46bd      	mov	sp, r7
    cf96:	b002      	add	sp, #8
    cf98:	bd80      	pop	{r7, pc}
    cf9a:	46c0      	nop			; (mov r8, r8)
    cf9c:	200014b0 	.word	0x200014b0
    cfa0:	20001498 	.word	0x20001498
    cfa4:	000043b1 	.word	0x000043b1

0000cfa8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b082      	sub	sp, #8
    cfac:	af00      	add	r7, sp, #0
    cfae:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d007      	beq.n	cfc6 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
    cfb6:	6879      	ldr	r1, [r7, #4]
    cfb8:	4b05      	ldr	r3, [pc, #20]	; (cfd0 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
    cfba:	2216      	movs	r2, #22
    cfbc:	0018      	movs	r0, r3
    cfbe:	4b05      	ldr	r3, [pc, #20]	; (cfd4 <LoRaMacConfirmQueueRestoreNvmCtx+0x2c>)
    cfc0:	4798      	blx	r3
        return true;
    cfc2:	2301      	movs	r3, #1
    cfc4:	e000      	b.n	cfc8 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
    cfc6:	2300      	movs	r3, #0
    }
}
    cfc8:	0018      	movs	r0, r3
    cfca:	46bd      	mov	sp, r7
    cfcc:	b002      	add	sp, #8
    cfce:	bd80      	pop	{r7, pc}
    cfd0:	20001498 	.word	0x20001498
    cfd4:	00004339 	.word	0x00004339

0000cfd8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    cfd8:	b580      	push	{r7, lr}
    cfda:	b082      	sub	sp, #8
    cfdc:	af00      	add	r7, sp, #0
    cfde:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	2216      	movs	r2, #22
    cfe4:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
    cfe6:	4b02      	ldr	r3, [pc, #8]	; (cff0 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
    cfe8:	0018      	movs	r0, r3
    cfea:	46bd      	mov	sp, r7
    cfec:	b002      	add	sp, #8
    cfee:	bd80      	pop	{r7, pc}
    cff0:	20001498 	.word	0x20001498

0000cff4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    cff4:	b580      	push	{r7, lr}
    cff6:	b082      	sub	sp, #8
    cff8:	af00      	add	r7, sp, #0
    cffa:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    cffc:	4b16      	ldr	r3, [pc, #88]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    cffe:	691b      	ldr	r3, [r3, #16]
    d000:	7d1b      	ldrb	r3, [r3, #20]
    d002:	2b04      	cmp	r3, #4
    d004:	d901      	bls.n	d00a <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
    d006:	2300      	movs	r3, #0
    d008:	e021      	b.n	d04e <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
    d00a:	4b13      	ldr	r3, [pc, #76]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d00c:	689b      	ldr	r3, [r3, #8]
    d00e:	687a      	ldr	r2, [r7, #4]
    d010:	7812      	ldrb	r2, [r2, #0]
    d012:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    d014:	4b10      	ldr	r3, [pc, #64]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d016:	689b      	ldr	r3, [r3, #8]
    d018:	687a      	ldr	r2, [r7, #4]
    d01a:	7852      	ldrb	r2, [r2, #1]
    d01c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    d01e:	4b0e      	ldr	r3, [pc, #56]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d020:	689b      	ldr	r3, [r3, #8]
    d022:	687a      	ldr	r2, [r7, #4]
    d024:	78d2      	ldrb	r2, [r2, #3]
    d026:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    d028:	4b0b      	ldr	r3, [pc, #44]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d02a:	689b      	ldr	r3, [r3, #8]
    d02c:	2200      	movs	r2, #0
    d02e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
    d030:	4b09      	ldr	r3, [pc, #36]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d032:	691b      	ldr	r3, [r3, #16]
    d034:	7d1a      	ldrb	r2, [r3, #20]
    d036:	3201      	adds	r2, #1
    d038:	b2d2      	uxtb	r2, r2
    d03a:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    d03c:	4b06      	ldr	r3, [pc, #24]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d03e:	689b      	ldr	r3, [r3, #8]
    d040:	0018      	movs	r0, r3
    d042:	4b06      	ldr	r3, [pc, #24]	; (d05c <LoRaMacConfirmQueueAdd+0x68>)
    d044:	4798      	blx	r3
    d046:	0002      	movs	r2, r0
    d048:	4b03      	ldr	r3, [pc, #12]	; (d058 <LoRaMacConfirmQueueAdd+0x64>)
    d04a:	609a      	str	r2, [r3, #8]

    return true;
    d04c:	2301      	movs	r3, #1
}
    d04e:	0018      	movs	r0, r3
    d050:	46bd      	mov	sp, r7
    d052:	b002      	add	sp, #8
    d054:	bd80      	pop	{r7, pc}
    d056:	46c0      	nop			; (mov r8, r8)
    d058:	200014b0 	.word	0x200014b0
    d05c:	0000ce91 	.word	0x0000ce91

0000d060 <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
    d060:	b580      	push	{r7, lr}
    d062:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    d064:	4b0c      	ldr	r3, [pc, #48]	; (d098 <LoRaMacConfirmQueueRemoveLast+0x38>)
    d066:	691b      	ldr	r3, [r3, #16]
    d068:	7d1b      	ldrb	r3, [r3, #20]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d101      	bne.n	d072 <LoRaMacConfirmQueueRemoveLast+0x12>
    {
        return false;
    d06e:	2300      	movs	r3, #0
    d070:	e00e      	b.n	d090 <LoRaMacConfirmQueueRemoveLast+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    d072:	4b09      	ldr	r3, [pc, #36]	; (d098 <LoRaMacConfirmQueueRemoveLast+0x38>)
    d074:	691b      	ldr	r3, [r3, #16]
    d076:	7d1a      	ldrb	r2, [r3, #20]
    d078:	3a01      	subs	r2, #1
    d07a:	b2d2      	uxtb	r2, r2
    d07c:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferEnd = DecreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    d07e:	4b06      	ldr	r3, [pc, #24]	; (d098 <LoRaMacConfirmQueueRemoveLast+0x38>)
    d080:	689b      	ldr	r3, [r3, #8]
    d082:	0018      	movs	r0, r3
    d084:	4b05      	ldr	r3, [pc, #20]	; (d09c <LoRaMacConfirmQueueRemoveLast+0x3c>)
    d086:	4798      	blx	r3
    d088:	0002      	movs	r2, r0
    d08a:	4b03      	ldr	r3, [pc, #12]	; (d098 <LoRaMacConfirmQueueRemoveLast+0x38>)
    d08c:	609a      	str	r2, [r3, #8]

    return true;
    d08e:	2301      	movs	r3, #1
}
    d090:	0018      	movs	r0, r3
    d092:	46bd      	mov	sp, r7
    d094:	bd80      	pop	{r7, pc}
    d096:	46c0      	nop			; (mov r8, r8)
    d098:	200014b0 	.word	0x200014b0
    d09c:	0000cec5 	.word	0x0000cec5

0000d0a0 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    d0a4:	4b0c      	ldr	r3, [pc, #48]	; (d0d8 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    d0a6:	691b      	ldr	r3, [r3, #16]
    d0a8:	7d1b      	ldrb	r3, [r3, #20]
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d101      	bne.n	d0b2 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
    d0ae:	2300      	movs	r3, #0
    d0b0:	e00e      	b.n	d0d0 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    d0b2:	4b09      	ldr	r3, [pc, #36]	; (d0d8 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    d0b4:	691b      	ldr	r3, [r3, #16]
    d0b6:	7d1a      	ldrb	r2, [r3, #20]
    d0b8:	3a01      	subs	r2, #1
    d0ba:	b2d2      	uxtb	r2, r2
    d0bc:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
    d0be:	4b06      	ldr	r3, [pc, #24]	; (d0d8 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    d0c0:	685b      	ldr	r3, [r3, #4]
    d0c2:	0018      	movs	r0, r3
    d0c4:	4b05      	ldr	r3, [pc, #20]	; (d0dc <LoRaMacConfirmQueueRemoveFirst+0x3c>)
    d0c6:	4798      	blx	r3
    d0c8:	0002      	movs	r2, r0
    d0ca:	4b03      	ldr	r3, [pc, #12]	; (d0d8 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    d0cc:	605a      	str	r2, [r3, #4]

    return true;
    d0ce:	2301      	movs	r3, #1
}
    d0d0:	0018      	movs	r0, r3
    d0d2:	46bd      	mov	sp, r7
    d0d4:	bd80      	pop	{r7, pc}
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	200014b0 	.word	0x200014b0
    d0dc:	0000ce91 	.word	0x0000ce91

0000d0e0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	b084      	sub	sp, #16
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	0002      	movs	r2, r0
    d0e8:	1dfb      	adds	r3, r7, #7
    d0ea:	701a      	strb	r2, [r3, #0]
    d0ec:	1dbb      	adds	r3, r7, #6
    d0ee:	1c0a      	adds	r2, r1, #0
    d0f0:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
    d0f2:	2300      	movs	r3, #0
    d0f4:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    d0f6:	4b0f      	ldr	r3, [pc, #60]	; (d134 <LoRaMacConfirmQueueSetStatus+0x54>)
    d0f8:	691b      	ldr	r3, [r3, #16]
    d0fa:	7d1b      	ldrb	r3, [r3, #20]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d014      	beq.n	d12a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    d100:	4b0c      	ldr	r3, [pc, #48]	; (d134 <LoRaMacConfirmQueueSetStatus+0x54>)
    d102:	6859      	ldr	r1, [r3, #4]
    d104:	4b0b      	ldr	r3, [pc, #44]	; (d134 <LoRaMacConfirmQueueSetStatus+0x54>)
    d106:	689a      	ldr	r2, [r3, #8]
    d108:	1dbb      	adds	r3, r7, #6
    d10a:	781b      	ldrb	r3, [r3, #0]
    d10c:	0018      	movs	r0, r3
    d10e:	4b0a      	ldr	r3, [pc, #40]	; (d138 <LoRaMacConfirmQueueSetStatus+0x58>)
    d110:	4798      	blx	r3
    d112:	0003      	movs	r3, r0
    d114:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
    d116:	68fb      	ldr	r3, [r7, #12]
    d118:	2b00      	cmp	r3, #0
    d11a:	d006      	beq.n	d12a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
    d11c:	68fb      	ldr	r3, [r7, #12]
    d11e:	1dfa      	adds	r2, r7, #7
    d120:	7812      	ldrb	r2, [r2, #0]
    d122:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
    d124:	68fb      	ldr	r3, [r7, #12]
    d126:	2201      	movs	r2, #1
    d128:	709a      	strb	r2, [r3, #2]
        }
    }
}
    d12a:	46c0      	nop			; (mov r8, r8)
    d12c:	46bd      	mov	sp, r7
    d12e:	b004      	add	sp, #16
    d130:	bd80      	pop	{r7, pc}
    d132:	46c0      	nop			; (mov r8, r8)
    d134:	200014b0 	.word	0x200014b0
    d138:	0000cef9 	.word	0x0000cef9

0000d13c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
    d13c:	b580      	push	{r7, lr}
    d13e:	b084      	sub	sp, #16
    d140:	af00      	add	r7, sp, #0
    d142:	0002      	movs	r2, r0
    d144:	1dfb      	adds	r3, r7, #7
    d146:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
    d148:	2300      	movs	r3, #0
    d14a:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    d14c:	4b0d      	ldr	r3, [pc, #52]	; (d184 <LoRaMacConfirmQueueGetStatus+0x48>)
    d14e:	691b      	ldr	r3, [r3, #16]
    d150:	7d1b      	ldrb	r3, [r3, #20]
    d152:	2b00      	cmp	r3, #0
    d154:	d010      	beq.n	d178 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    d156:	4b0b      	ldr	r3, [pc, #44]	; (d184 <LoRaMacConfirmQueueGetStatus+0x48>)
    d158:	6859      	ldr	r1, [r3, #4]
    d15a:	4b0a      	ldr	r3, [pc, #40]	; (d184 <LoRaMacConfirmQueueGetStatus+0x48>)
    d15c:	689a      	ldr	r2, [r3, #8]
    d15e:	1dfb      	adds	r3, r7, #7
    d160:	781b      	ldrb	r3, [r3, #0]
    d162:	0018      	movs	r0, r3
    d164:	4b08      	ldr	r3, [pc, #32]	; (d188 <LoRaMacConfirmQueueGetStatus+0x4c>)
    d166:	4798      	blx	r3
    d168:	0003      	movs	r3, r0
    d16a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
    d16c:	68fb      	ldr	r3, [r7, #12]
    d16e:	2b00      	cmp	r3, #0
    d170:	d002      	beq.n	d178 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
    d172:	68fb      	ldr	r3, [r7, #12]
    d174:	785b      	ldrb	r3, [r3, #1]
    d176:	e000      	b.n	d17a <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
    d178:	2301      	movs	r3, #1
}
    d17a:	0018      	movs	r0, r3
    d17c:	46bd      	mov	sp, r7
    d17e:	b004      	add	sp, #16
    d180:	bd80      	pop	{r7, pc}
    d182:	46c0      	nop			; (mov r8, r8)
    d184:	200014b0 	.word	0x200014b0
    d188:	0000cef9 	.word	0x0000cef9

0000d18c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    d18c:	b580      	push	{r7, lr}
    d18e:	b084      	sub	sp, #16
    d190:	af00      	add	r7, sp, #0
    d192:	0002      	movs	r2, r0
    d194:	1dfb      	adds	r3, r7, #7
    d196:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
    d198:	4b14      	ldr	r3, [pc, #80]	; (d1ec <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    d19a:	685b      	ldr	r3, [r3, #4]
    d19c:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
    d19e:	4b13      	ldr	r3, [pc, #76]	; (d1ec <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    d1a0:	691b      	ldr	r3, [r3, #16]
    d1a2:	1dfa      	adds	r2, r7, #7
    d1a4:	7812      	ldrb	r2, [r2, #0]
    d1a6:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    d1a8:	4b10      	ldr	r3, [pc, #64]	; (d1ec <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    d1aa:	691b      	ldr	r3, [r3, #16]
    d1ac:	7d1b      	ldrb	r3, [r3, #20]
    d1ae:	2b00      	cmp	r3, #0
    d1b0:	d018      	beq.n	d1e4 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
    d1b2:	68fb      	ldr	r3, [r7, #12]
    d1b4:	1dfa      	adds	r2, r7, #7
    d1b6:	7812      	ldrb	r2, [r2, #0]
    d1b8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
    d1ba:	68fb      	ldr	r3, [r7, #12]
    d1bc:	78db      	ldrb	r3, [r3, #3]
    d1be:	2201      	movs	r2, #1
    d1c0:	4053      	eors	r3, r2
    d1c2:	b2db      	uxtb	r3, r3
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d002      	beq.n	d1ce <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
    d1c8:	68fb      	ldr	r3, [r7, #12]
    d1ca:	2201      	movs	r2, #1
    d1cc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
    d1ce:	68fb      	ldr	r3, [r7, #12]
    d1d0:	0018      	movs	r0, r3
    d1d2:	4b07      	ldr	r3, [pc, #28]	; (d1f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
    d1d4:	4798      	blx	r3
    d1d6:	0003      	movs	r3, r0
    d1d8:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
    d1da:	4b04      	ldr	r3, [pc, #16]	; (d1ec <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    d1dc:	689a      	ldr	r2, [r3, #8]
    d1de:	68fb      	ldr	r3, [r7, #12]
    d1e0:	429a      	cmp	r2, r3
    d1e2:	d1e6      	bne.n	d1b2 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
    d1e4:	46c0      	nop			; (mov r8, r8)
    d1e6:	46bd      	mov	sp, r7
    d1e8:	b004      	add	sp, #16
    d1ea:	bd80      	pop	{r7, pc}
    d1ec:	200014b0 	.word	0x200014b0
    d1f0:	0000ce91 	.word	0x0000ce91

0000d1f4 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
    d1f4:	b580      	push	{r7, lr}
    d1f6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
    d1f8:	4b02      	ldr	r3, [pc, #8]	; (d204 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
    d1fa:	691b      	ldr	r3, [r3, #16]
    d1fc:	7d5b      	ldrb	r3, [r3, #21]
}
    d1fe:	0018      	movs	r0, r3
    d200:	46bd      	mov	sp, r7
    d202:	bd80      	pop	{r7, pc}
    d204:	200014b0 	.word	0x200014b0

0000d208 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    d208:	b580      	push	{r7, lr}
    d20a:	b082      	sub	sp, #8
    d20c:	af00      	add	r7, sp, #0
    d20e:	0002      	movs	r2, r0
    d210:	1dfb      	adds	r3, r7, #7
    d212:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
    d214:	4b08      	ldr	r3, [pc, #32]	; (d238 <LoRaMacConfirmQueueIsCmdActive+0x30>)
    d216:	6859      	ldr	r1, [r3, #4]
    d218:	4b07      	ldr	r3, [pc, #28]	; (d238 <LoRaMacConfirmQueueIsCmdActive+0x30>)
    d21a:	689a      	ldr	r2, [r3, #8]
    d21c:	1dfb      	adds	r3, r7, #7
    d21e:	781b      	ldrb	r3, [r3, #0]
    d220:	0018      	movs	r0, r3
    d222:	4b06      	ldr	r3, [pc, #24]	; (d23c <LoRaMacConfirmQueueIsCmdActive+0x34>)
    d224:	4798      	blx	r3
    d226:	1e03      	subs	r3, r0, #0
    d228:	d001      	beq.n	d22e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
    d22a:	2301      	movs	r3, #1
    d22c:	e000      	b.n	d230 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
    d22e:	2300      	movs	r3, #0
}
    d230:	0018      	movs	r0, r3
    d232:	46bd      	mov	sp, r7
    d234:	b002      	add	sp, #8
    d236:	bd80      	pop	{r7, pc}
    d238:	200014b0 	.word	0x200014b0
    d23c:	0000cef9 	.word	0x0000cef9

0000d240 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
    d240:	b580      	push	{r7, lr}
    d242:	b084      	sub	sp, #16
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    d248:	4b2f      	ldr	r3, [pc, #188]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d24a:	691a      	ldr	r2, [r3, #16]
    d24c:	230e      	movs	r3, #14
    d24e:	18fb      	adds	r3, r7, r3
    d250:	7d12      	ldrb	r2, [r2, #20]
    d252:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
    d254:	230d      	movs	r3, #13
    d256:	18fb      	adds	r3, r7, r3
    d258:	2200      	movs	r2, #0
    d25a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
    d25c:	230f      	movs	r3, #15
    d25e:	18fb      	adds	r3, r7, r3
    d260:	2200      	movs	r2, #0
    d262:	701a      	strb	r2, [r3, #0]
    d264:	e043      	b.n	d2ee <LoRaMacConfirmQueueHandleCb+0xae>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
    d266:	4b28      	ldr	r3, [pc, #160]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d268:	685b      	ldr	r3, [r3, #4]
    d26a:	781a      	ldrb	r2, [r3, #0]
    d26c:	687b      	ldr	r3, [r7, #4]
    d26e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
    d270:	4b25      	ldr	r3, [pc, #148]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d272:	685b      	ldr	r3, [r3, #4]
    d274:	785a      	ldrb	r2, [r3, #1]
    d276:	687b      	ldr	r3, [r7, #4]
    d278:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
    d27a:	4b23      	ldr	r3, [pc, #140]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d27c:	685a      	ldr	r2, [r3, #4]
    d27e:	230d      	movs	r3, #13
    d280:	18fb      	adds	r3, r7, r3
    d282:	7892      	ldrb	r2, [r2, #2]
    d284:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
    d286:	230d      	movs	r3, #13
    d288:	18fb      	adds	r3, r7, r3
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d006      	beq.n	d29e <LoRaMacConfirmQueueHandleCb+0x5e>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
    d290:	4b1d      	ldr	r3, [pc, #116]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	689b      	ldr	r3, [r3, #8]
    d296:	687a      	ldr	r2, [r7, #4]
    d298:	0010      	movs	r0, r2
    d29a:	4798      	blx	r3
    d29c:	e011      	b.n	d2c2 <LoRaMacConfirmQueueHandleCb+0x82>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
    d29e:	4b1a      	ldr	r3, [pc, #104]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d2a0:	685b      	ldr	r3, [r3, #4]
    d2a2:	781a      	ldrb	r2, [r3, #0]
    d2a4:	2308      	movs	r3, #8
    d2a6:	18fb      	adds	r3, r7, r3
    d2a8:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
    d2aa:	4b17      	ldr	r3, [pc, #92]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d2ac:	685b      	ldr	r3, [r3, #4]
    d2ae:	785a      	ldrb	r2, [r3, #1]
    d2b0:	2308      	movs	r3, #8
    d2b2:	18fb      	adds	r3, r7, r3
    d2b4:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
    d2b6:	4b14      	ldr	r3, [pc, #80]	; (d308 <LoRaMacConfirmQueueHandleCb+0xc8>)
    d2b8:	685b      	ldr	r3, [r3, #4]
    d2ba:	78da      	ldrb	r2, [r3, #3]
    d2bc:	2308      	movs	r3, #8
    d2be:	18fb      	adds	r3, r7, r3
    d2c0:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
    d2c2:	4b12      	ldr	r3, [pc, #72]	; (d30c <LoRaMacConfirmQueueHandleCb+0xcc>)
    d2c4:	4798      	blx	r3

        if( readyToHandle == false )
    d2c6:	230d      	movs	r3, #13
    d2c8:	18fb      	adds	r3, r7, r3
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	2201      	movs	r2, #1
    d2ce:	4053      	eors	r3, r2
    d2d0:	b2db      	uxtb	r3, r3
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d004      	beq.n	d2e0 <LoRaMacConfirmQueueHandleCb+0xa0>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
    d2d6:	2308      	movs	r3, #8
    d2d8:	18fb      	adds	r3, r7, r3
    d2da:	0018      	movs	r0, r3
    d2dc:	4b0c      	ldr	r3, [pc, #48]	; (d310 <LoRaMacConfirmQueueHandleCb+0xd0>)
    d2de:	4798      	blx	r3
    for( uint8_t i = 0; i < nbElements; i++ )
    d2e0:	230f      	movs	r3, #15
    d2e2:	18fb      	adds	r3, r7, r3
    d2e4:	781a      	ldrb	r2, [r3, #0]
    d2e6:	230f      	movs	r3, #15
    d2e8:	18fb      	adds	r3, r7, r3
    d2ea:	3201      	adds	r2, #1
    d2ec:	701a      	strb	r2, [r3, #0]
    d2ee:	230f      	movs	r3, #15
    d2f0:	18fa      	adds	r2, r7, r3
    d2f2:	230e      	movs	r3, #14
    d2f4:	18fb      	adds	r3, r7, r3
    d2f6:	7812      	ldrb	r2, [r2, #0]
    d2f8:	781b      	ldrb	r3, [r3, #0]
    d2fa:	429a      	cmp	r2, r3
    d2fc:	d3b3      	bcc.n	d266 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
    d2fe:	46c0      	nop			; (mov r8, r8)
    d300:	46bd      	mov	sp, r7
    d302:	b004      	add	sp, #16
    d304:	bd80      	pop	{r7, pc}
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	200014b0 	.word	0x200014b0
    d30c:	0000d0a1 	.word	0x0000d0a1
    d310:	0000cff5 	.word	0x0000cff5

0000d314 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    d314:	b580      	push	{r7, lr}
    d316:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    d318:	4b02      	ldr	r3, [pc, #8]	; (d324 <LoRaMacConfirmQueueGetCnt+0x10>)
    d31a:	691b      	ldr	r3, [r3, #16]
    d31c:	7d1b      	ldrb	r3, [r3, #20]
}
    d31e:	0018      	movs	r0, r3
    d320:	46bd      	mov	sp, r7
    d322:	bd80      	pop	{r7, pc}
    d324:	200014b0 	.word	0x200014b0

0000d328 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    d328:	b580      	push	{r7, lr}
    d32a:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    d32c:	4b05      	ldr	r3, [pc, #20]	; (d344 <LoRaMacConfirmQueueIsFull+0x1c>)
    d32e:	691b      	ldr	r3, [r3, #16]
    d330:	7d1b      	ldrb	r3, [r3, #20]
    d332:	2b04      	cmp	r3, #4
    d334:	d901      	bls.n	d33a <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
    d336:	2301      	movs	r3, #1
    d338:	e000      	b.n	d33c <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
    d33a:	2300      	movs	r3, #0
    }
}
    d33c:	0018      	movs	r0, r3
    d33e:	46bd      	mov	sp, r7
    d340:	bd80      	pop	{r7, pc}
    d342:	46c0      	nop			; (mov r8, r8)
    d344:	200014b0 	.word	0x200014b0

0000d348 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
    d348:	b590      	push	{r4, r7, lr}
    d34a:	b08f      	sub	sp, #60	; 0x3c
    d34c:	af00      	add	r7, sp, #0
    d34e:	60f8      	str	r0, [r7, #12]
    d350:	0008      	movs	r0, r1
    d352:	0011      	movs	r1, r2
    d354:	607b      	str	r3, [r7, #4]
    d356:	230a      	movs	r3, #10
    d358:	18fb      	adds	r3, r7, r3
    d35a:	1c02      	adds	r2, r0, #0
    d35c:	801a      	strh	r2, [r3, #0]
    d35e:	2309      	movs	r3, #9
    d360:	18fb      	adds	r3, r7, r3
    d362:	1c0a      	adds	r2, r1, #0
    d364:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
    d366:	68fb      	ldr	r3, [r7, #12]
    d368:	2b00      	cmp	r3, #0
    d36a:	d101      	bne.n	d370 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d36c:	2307      	movs	r3, #7
    d36e:	e0fe      	b.n	d56e <PayloadEncrypt+0x226>
    }

    uint8_t bufferIndex = 0;
    d370:	2337      	movs	r3, #55	; 0x37
    d372:	18fb      	adds	r3, r7, r3
    d374:	2200      	movs	r2, #0
    d376:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
    d378:	2334      	movs	r3, #52	; 0x34
    d37a:	18fb      	adds	r3, r7, r3
    d37c:	2201      	movs	r2, #1
    d37e:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
    d380:	2320      	movs	r3, #32
    d382:	18fb      	adds	r3, r7, r3
    d384:	0018      	movs	r0, r3
    d386:	2310      	movs	r3, #16
    d388:	001a      	movs	r2, r3
    d38a:	2100      	movs	r1, #0
    d38c:	4b7a      	ldr	r3, [pc, #488]	; (d578 <PayloadEncrypt+0x230>)
    d38e:	4798      	blx	r3
    uint8_t aBlock[16] = { 0 };
    d390:	2310      	movs	r3, #16
    d392:	18fb      	adds	r3, r7, r3
    d394:	0018      	movs	r0, r3
    d396:	2310      	movs	r3, #16
    d398:	001a      	movs	r2, r3
    d39a:	2100      	movs	r1, #0
    d39c:	4b76      	ldr	r3, [pc, #472]	; (d578 <PayloadEncrypt+0x230>)
    d39e:	4798      	blx	r3

    aBlock[0] = 0x01;
    d3a0:	2310      	movs	r3, #16
    d3a2:	18fb      	adds	r3, r7, r3
    d3a4:	2201      	movs	r2, #1
    d3a6:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
    d3a8:	2310      	movs	r3, #16
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	2248      	movs	r2, #72	; 0x48
    d3ae:	18ba      	adds	r2, r7, r2
    d3b0:	7812      	ldrb	r2, [r2, #0]
    d3b2:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	b2da      	uxtb	r2, r3
    d3b8:	2310      	movs	r3, #16
    d3ba:	18fb      	adds	r3, r7, r3
    d3bc:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	0a1b      	lsrs	r3, r3, #8
    d3c2:	b2da      	uxtb	r2, r3
    d3c4:	2310      	movs	r3, #16
    d3c6:	18fb      	adds	r3, r7, r3
    d3c8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    d3ca:	687b      	ldr	r3, [r7, #4]
    d3cc:	0c1b      	lsrs	r3, r3, #16
    d3ce:	b2da      	uxtb	r2, r3
    d3d0:	2310      	movs	r3, #16
    d3d2:	18fb      	adds	r3, r7, r3
    d3d4:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	0e1b      	lsrs	r3, r3, #24
    d3da:	b2da      	uxtb	r2, r3
    d3dc:	2310      	movs	r3, #16
    d3de:	18fb      	adds	r3, r7, r3
    d3e0:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
    d3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3e4:	b2da      	uxtb	r2, r3
    d3e6:	2310      	movs	r3, #16
    d3e8:	18fb      	adds	r3, r7, r3
    d3ea:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    d3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3ee:	0a1b      	lsrs	r3, r3, #8
    d3f0:	b2da      	uxtb	r2, r3
    d3f2:	2310      	movs	r3, #16
    d3f4:	18fb      	adds	r3, r7, r3
    d3f6:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    d3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3fa:	0c1b      	lsrs	r3, r3, #16
    d3fc:	b2da      	uxtb	r2, r3
    d3fe:	2310      	movs	r3, #16
    d400:	18fb      	adds	r3, r7, r3
    d402:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    d404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d406:	0e1b      	lsrs	r3, r3, #24
    d408:	b2da      	uxtb	r2, r3
    d40a:	2310      	movs	r3, #16
    d40c:	18fb      	adds	r3, r7, r3
    d40e:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
    d410:	e059      	b.n	d4c6 <PayloadEncrypt+0x17e>
    {
        aBlock[15] = ctr & 0xFF;
    d412:	2334      	movs	r3, #52	; 0x34
    d414:	18fb      	adds	r3, r7, r3
    d416:	881b      	ldrh	r3, [r3, #0]
    d418:	b2da      	uxtb	r2, r3
    d41a:	2310      	movs	r3, #16
    d41c:	18fb      	adds	r3, r7, r3
    d41e:	73da      	strb	r2, [r3, #15]
        ctr++;
    d420:	2334      	movs	r3, #52	; 0x34
    d422:	18fb      	adds	r3, r7, r3
    d424:	881a      	ldrh	r2, [r3, #0]
    d426:	2334      	movs	r3, #52	; 0x34
    d428:	18fb      	adds	r3, r7, r3
    d42a:	3201      	adds	r2, #1
    d42c:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    d42e:	2320      	movs	r3, #32
    d430:	18f9      	adds	r1, r7, r3
    d432:	2309      	movs	r3, #9
    d434:	18fb      	adds	r3, r7, r3
    d436:	781a      	ldrb	r2, [r3, #0]
    d438:	2310      	movs	r3, #16
    d43a:	18f8      	adds	r0, r7, r3
    d43c:	000b      	movs	r3, r1
    d43e:	2110      	movs	r1, #16
    d440:	4c4e      	ldr	r4, [pc, #312]	; (d57c <PayloadEncrypt+0x234>)
    d442:	47a0      	blx	r4
    d444:	1e03      	subs	r3, r0, #0
    d446:	d001      	beq.n	d44c <PayloadEncrypt+0x104>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d448:	230c      	movs	r3, #12
    d44a:	e090      	b.n	d56e <PayloadEncrypt+0x226>
        }

        for( uint8_t i = 0; i < 16; i++ )
    d44c:	2333      	movs	r3, #51	; 0x33
    d44e:	18fb      	adds	r3, r7, r3
    d450:	2200      	movs	r2, #0
    d452:	701a      	strb	r2, [r3, #0]
    d454:	e024      	b.n	d4a0 <PayloadEncrypt+0x158>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    d456:	2337      	movs	r3, #55	; 0x37
    d458:	18fb      	adds	r3, r7, r3
    d45a:	781a      	ldrb	r2, [r3, #0]
    d45c:	2333      	movs	r3, #51	; 0x33
    d45e:	18fb      	adds	r3, r7, r3
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	18d3      	adds	r3, r2, r3
    d464:	001a      	movs	r2, r3
    d466:	68fb      	ldr	r3, [r7, #12]
    d468:	189b      	adds	r3, r3, r2
    d46a:	2237      	movs	r2, #55	; 0x37
    d46c:	18ba      	adds	r2, r7, r2
    d46e:	7811      	ldrb	r1, [r2, #0]
    d470:	2233      	movs	r2, #51	; 0x33
    d472:	18ba      	adds	r2, r7, r2
    d474:	7812      	ldrb	r2, [r2, #0]
    d476:	188a      	adds	r2, r1, r2
    d478:	0011      	movs	r1, r2
    d47a:	68fa      	ldr	r2, [r7, #12]
    d47c:	1852      	adds	r2, r2, r1
    d47e:	7811      	ldrb	r1, [r2, #0]
    d480:	2233      	movs	r2, #51	; 0x33
    d482:	18ba      	adds	r2, r7, r2
    d484:	7812      	ldrb	r2, [r2, #0]
    d486:	2020      	movs	r0, #32
    d488:	1838      	adds	r0, r7, r0
    d48a:	5c82      	ldrb	r2, [r0, r2]
    d48c:	404a      	eors	r2, r1
    d48e:	b2d2      	uxtb	r2, r2
    d490:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
    d492:	2333      	movs	r3, #51	; 0x33
    d494:	18fb      	adds	r3, r7, r3
    d496:	781a      	ldrb	r2, [r3, #0]
    d498:	2333      	movs	r3, #51	; 0x33
    d49a:	18fb      	adds	r3, r7, r3
    d49c:	3201      	adds	r2, #1
    d49e:	701a      	strb	r2, [r3, #0]
    d4a0:	2333      	movs	r3, #51	; 0x33
    d4a2:	18fb      	adds	r3, r7, r3
    d4a4:	781b      	ldrb	r3, [r3, #0]
    d4a6:	2b0f      	cmp	r3, #15
    d4a8:	d9d5      	bls.n	d456 <PayloadEncrypt+0x10e>
        }
        size -= 16;
    d4aa:	230a      	movs	r3, #10
    d4ac:	18fb      	adds	r3, r7, r3
    d4ae:	220a      	movs	r2, #10
    d4b0:	18ba      	adds	r2, r7, r2
    d4b2:	8812      	ldrh	r2, [r2, #0]
    d4b4:	3a10      	subs	r2, #16
    d4b6:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
    d4b8:	2337      	movs	r3, #55	; 0x37
    d4ba:	18fb      	adds	r3, r7, r3
    d4bc:	2237      	movs	r2, #55	; 0x37
    d4be:	18ba      	adds	r2, r7, r2
    d4c0:	7812      	ldrb	r2, [r2, #0]
    d4c2:	3210      	adds	r2, #16
    d4c4:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
    d4c6:	230a      	movs	r3, #10
    d4c8:	18fb      	adds	r3, r7, r3
    d4ca:	881b      	ldrh	r3, [r3, #0]
    d4cc:	2b0f      	cmp	r3, #15
    d4ce:	d8a0      	bhi.n	d412 <PayloadEncrypt+0xca>
    }

    if( size > 0 )
    d4d0:	230a      	movs	r3, #10
    d4d2:	18fb      	adds	r3, r7, r3
    d4d4:	881b      	ldrh	r3, [r3, #0]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d048      	beq.n	d56c <PayloadEncrypt+0x224>
    {
        aBlock[15] = ctr & 0xFF;
    d4da:	2334      	movs	r3, #52	; 0x34
    d4dc:	18fb      	adds	r3, r7, r3
    d4de:	881b      	ldrh	r3, [r3, #0]
    d4e0:	b2da      	uxtb	r2, r3
    d4e2:	2310      	movs	r3, #16
    d4e4:	18fb      	adds	r3, r7, r3
    d4e6:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    d4e8:	2320      	movs	r3, #32
    d4ea:	18f9      	adds	r1, r7, r3
    d4ec:	2309      	movs	r3, #9
    d4ee:	18fb      	adds	r3, r7, r3
    d4f0:	781a      	ldrb	r2, [r3, #0]
    d4f2:	2310      	movs	r3, #16
    d4f4:	18f8      	adds	r0, r7, r3
    d4f6:	000b      	movs	r3, r1
    d4f8:	2110      	movs	r1, #16
    d4fa:	4c20      	ldr	r4, [pc, #128]	; (d57c <PayloadEncrypt+0x234>)
    d4fc:	47a0      	blx	r4
    d4fe:	1e03      	subs	r3, r0, #0
    d500:	d001      	beq.n	d506 <PayloadEncrypt+0x1be>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d502:	230c      	movs	r3, #12
    d504:	e033      	b.n	d56e <PayloadEncrypt+0x226>
        }
        for( uint8_t i = 0; i < size; i++ )
    d506:	2332      	movs	r3, #50	; 0x32
    d508:	18fb      	adds	r3, r7, r3
    d50a:	2200      	movs	r2, #0
    d50c:	701a      	strb	r2, [r3, #0]
    d50e:	e024      	b.n	d55a <PayloadEncrypt+0x212>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    d510:	2337      	movs	r3, #55	; 0x37
    d512:	18fb      	adds	r3, r7, r3
    d514:	781a      	ldrb	r2, [r3, #0]
    d516:	2332      	movs	r3, #50	; 0x32
    d518:	18fb      	adds	r3, r7, r3
    d51a:	781b      	ldrb	r3, [r3, #0]
    d51c:	18d3      	adds	r3, r2, r3
    d51e:	001a      	movs	r2, r3
    d520:	68fb      	ldr	r3, [r7, #12]
    d522:	189b      	adds	r3, r3, r2
    d524:	2237      	movs	r2, #55	; 0x37
    d526:	18ba      	adds	r2, r7, r2
    d528:	7811      	ldrb	r1, [r2, #0]
    d52a:	2232      	movs	r2, #50	; 0x32
    d52c:	18ba      	adds	r2, r7, r2
    d52e:	7812      	ldrb	r2, [r2, #0]
    d530:	188a      	adds	r2, r1, r2
    d532:	0011      	movs	r1, r2
    d534:	68fa      	ldr	r2, [r7, #12]
    d536:	1852      	adds	r2, r2, r1
    d538:	7811      	ldrb	r1, [r2, #0]
    d53a:	2232      	movs	r2, #50	; 0x32
    d53c:	18ba      	adds	r2, r7, r2
    d53e:	7812      	ldrb	r2, [r2, #0]
    d540:	2020      	movs	r0, #32
    d542:	1838      	adds	r0, r7, r0
    d544:	5c82      	ldrb	r2, [r0, r2]
    d546:	404a      	eors	r2, r1
    d548:	b2d2      	uxtb	r2, r2
    d54a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
    d54c:	2332      	movs	r3, #50	; 0x32
    d54e:	18fb      	adds	r3, r7, r3
    d550:	781a      	ldrb	r2, [r3, #0]
    d552:	2332      	movs	r3, #50	; 0x32
    d554:	18fb      	adds	r3, r7, r3
    d556:	3201      	adds	r2, #1
    d558:	701a      	strb	r2, [r3, #0]
    d55a:	2332      	movs	r3, #50	; 0x32
    d55c:	18fb      	adds	r3, r7, r3
    d55e:	781b      	ldrb	r3, [r3, #0]
    d560:	b29b      	uxth	r3, r3
    d562:	220a      	movs	r2, #10
    d564:	18ba      	adds	r2, r7, r2
    d566:	8812      	ldrh	r2, [r2, #0]
    d568:	429a      	cmp	r2, r3
    d56a:	d8d1      	bhi.n	d510 <PayloadEncrypt+0x1c8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d56c:	2300      	movs	r3, #0
}
    d56e:	0018      	movs	r0, r3
    d570:	46bd      	mov	sp, r7
    d572:	b00f      	add	sp, #60	; 0x3c
    d574:	bd90      	pop	{r4, r7, pc}
    d576:	46c0      	nop			; (mov r8, r8)
    d578:	00019be9 	.word	0x00019be9
    d57c:	00016811 	.word	0x00016811

0000d580 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
    d580:	b590      	push	{r4, r7, lr}
    d582:	b08d      	sub	sp, #52	; 0x34
    d584:	af00      	add	r7, sp, #0
    d586:	0004      	movs	r4, r0
    d588:	6039      	str	r1, [r7, #0]
    d58a:	0010      	movs	r0, r2
    d58c:	0019      	movs	r1, r3
    d58e:	1dbb      	adds	r3, r7, #6
    d590:	1c22      	adds	r2, r4, #0
    d592:	801a      	strh	r2, [r3, #0]
    d594:	1d7b      	adds	r3, r7, #5
    d596:	1c02      	adds	r2, r0, #0
    d598:	701a      	strb	r2, [r3, #0]
    d59a:	1d3b      	adds	r3, r7, #4
    d59c:	1c0a      	adds	r2, r1, #0
    d59e:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
    d5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d101      	bne.n	d5aa <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d5a6:	2307      	movs	r3, #7
    d5a8:	e08d      	b.n	d6c6 <FOptsEncrypt+0x146>
    }

    uint8_t bufferIndex = 0;
    d5aa:	232e      	movs	r3, #46	; 0x2e
    d5ac:	18fb      	adds	r3, r7, r3
    d5ae:	2200      	movs	r2, #0
    d5b0:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
    d5b2:	231c      	movs	r3, #28
    d5b4:	18fb      	adds	r3, r7, r3
    d5b6:	0018      	movs	r0, r3
    d5b8:	2310      	movs	r3, #16
    d5ba:	001a      	movs	r2, r3
    d5bc:	2100      	movs	r1, #0
    d5be:	4b44      	ldr	r3, [pc, #272]	; (d6d0 <FOptsEncrypt+0x150>)
    d5c0:	4798      	blx	r3
    uint8_t aBlock[16] = { 0 };
    d5c2:	230c      	movs	r3, #12
    d5c4:	18fb      	adds	r3, r7, r3
    d5c6:	0018      	movs	r0, r3
    d5c8:	2310      	movs	r3, #16
    d5ca:	001a      	movs	r2, r3
    d5cc:	2100      	movs	r1, #0
    d5ce:	4b40      	ldr	r3, [pc, #256]	; (d6d0 <FOptsEncrypt+0x150>)
    d5d0:	4798      	blx	r3

    aBlock[0] = 0x01;
    d5d2:	230c      	movs	r3, #12
    d5d4:	18fb      	adds	r3, r7, r3
    d5d6:	2201      	movs	r2, #1
    d5d8:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
    d5da:	230c      	movs	r3, #12
    d5dc:	18fb      	adds	r3, r7, r3
    d5de:	1d7a      	adds	r2, r7, #5
    d5e0:	7812      	ldrb	r2, [r2, #0]
    d5e2:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
    d5e4:	683b      	ldr	r3, [r7, #0]
    d5e6:	b2da      	uxtb	r2, r3
    d5e8:	230c      	movs	r3, #12
    d5ea:	18fb      	adds	r3, r7, r3
    d5ec:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    d5ee:	683b      	ldr	r3, [r7, #0]
    d5f0:	0a1b      	lsrs	r3, r3, #8
    d5f2:	b2da      	uxtb	r2, r3
    d5f4:	230c      	movs	r3, #12
    d5f6:	18fb      	adds	r3, r7, r3
    d5f8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    d5fa:	683b      	ldr	r3, [r7, #0]
    d5fc:	0c1b      	lsrs	r3, r3, #16
    d5fe:	b2da      	uxtb	r2, r3
    d600:	230c      	movs	r3, #12
    d602:	18fb      	adds	r3, r7, r3
    d604:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    d606:	683b      	ldr	r3, [r7, #0]
    d608:	0e1b      	lsrs	r3, r3, #24
    d60a:	b2da      	uxtb	r2, r3
    d60c:	230c      	movs	r3, #12
    d60e:	18fb      	adds	r3, r7, r3
    d610:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
    d612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d614:	b2da      	uxtb	r2, r3
    d616:	230c      	movs	r3, #12
    d618:	18fb      	adds	r3, r7, r3
    d61a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    d61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d61e:	0a1b      	lsrs	r3, r3, #8
    d620:	b2da      	uxtb	r2, r3
    d622:	230c      	movs	r3, #12
    d624:	18fb      	adds	r3, r7, r3
    d626:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    d628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d62a:	0c1b      	lsrs	r3, r3, #16
    d62c:	b2da      	uxtb	r2, r3
    d62e:	230c      	movs	r3, #12
    d630:	18fb      	adds	r3, r7, r3
    d632:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    d634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d636:	0e1b      	lsrs	r3, r3, #24
    d638:	b2da      	uxtb	r2, r3
    d63a:	230c      	movs	r3, #12
    d63c:	18fb      	adds	r3, r7, r3
    d63e:	735a      	strb	r2, [r3, #13]

    if( size > 0 )
    d640:	1dbb      	adds	r3, r7, #6
    d642:	881b      	ldrh	r3, [r3, #0]
    d644:	2b00      	cmp	r3, #0
    d646:	d03d      	beq.n	d6c4 <FOptsEncrypt+0x144>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
    d648:	231c      	movs	r3, #28
    d64a:	18fb      	adds	r3, r7, r3
    d64c:	220c      	movs	r2, #12
    d64e:	18b8      	adds	r0, r7, r2
    d650:	2206      	movs	r2, #6
    d652:	2110      	movs	r1, #16
    d654:	4c1f      	ldr	r4, [pc, #124]	; (d6d4 <FOptsEncrypt+0x154>)
    d656:	47a0      	blx	r4
    d658:	1e03      	subs	r3, r0, #0
    d65a:	d001      	beq.n	d660 <FOptsEncrypt+0xe0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d65c:	230c      	movs	r3, #12
    d65e:	e032      	b.n	d6c6 <FOptsEncrypt+0x146>
        }
        for( uint8_t i = 0; i < size; i++ )
    d660:	232f      	movs	r3, #47	; 0x2f
    d662:	18fb      	adds	r3, r7, r3
    d664:	2200      	movs	r2, #0
    d666:	701a      	strb	r2, [r3, #0]
    d668:	e024      	b.n	d6b4 <FOptsEncrypt+0x134>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    d66a:	232e      	movs	r3, #46	; 0x2e
    d66c:	18fb      	adds	r3, r7, r3
    d66e:	781a      	ldrb	r2, [r3, #0]
    d670:	232f      	movs	r3, #47	; 0x2f
    d672:	18fb      	adds	r3, r7, r3
    d674:	781b      	ldrb	r3, [r3, #0]
    d676:	18d3      	adds	r3, r2, r3
    d678:	001a      	movs	r2, r3
    d67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d67c:	189b      	adds	r3, r3, r2
    d67e:	222e      	movs	r2, #46	; 0x2e
    d680:	18ba      	adds	r2, r7, r2
    d682:	7811      	ldrb	r1, [r2, #0]
    d684:	222f      	movs	r2, #47	; 0x2f
    d686:	18ba      	adds	r2, r7, r2
    d688:	7812      	ldrb	r2, [r2, #0]
    d68a:	188a      	adds	r2, r1, r2
    d68c:	0011      	movs	r1, r2
    d68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d690:	1852      	adds	r2, r2, r1
    d692:	7811      	ldrb	r1, [r2, #0]
    d694:	222f      	movs	r2, #47	; 0x2f
    d696:	18ba      	adds	r2, r7, r2
    d698:	7812      	ldrb	r2, [r2, #0]
    d69a:	201c      	movs	r0, #28
    d69c:	1838      	adds	r0, r7, r0
    d69e:	5c82      	ldrb	r2, [r0, r2]
    d6a0:	404a      	eors	r2, r1
    d6a2:	b2d2      	uxtb	r2, r2
    d6a4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
    d6a6:	232f      	movs	r3, #47	; 0x2f
    d6a8:	18fb      	adds	r3, r7, r3
    d6aa:	781a      	ldrb	r2, [r3, #0]
    d6ac:	232f      	movs	r3, #47	; 0x2f
    d6ae:	18fb      	adds	r3, r7, r3
    d6b0:	3201      	adds	r2, #1
    d6b2:	701a      	strb	r2, [r3, #0]
    d6b4:	232f      	movs	r3, #47	; 0x2f
    d6b6:	18fb      	adds	r3, r7, r3
    d6b8:	781b      	ldrb	r3, [r3, #0]
    d6ba:	b29b      	uxth	r3, r3
    d6bc:	1dba      	adds	r2, r7, #6
    d6be:	8812      	ldrh	r2, [r2, #0]
    d6c0:	429a      	cmp	r2, r3
    d6c2:	d8d2      	bhi.n	d66a <FOptsEncrypt+0xea>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d6c4:	2300      	movs	r3, #0
}
    d6c6:	0018      	movs	r0, r3
    d6c8:	46bd      	mov	sp, r7
    d6ca:	b00d      	add	sp, #52	; 0x34
    d6cc:	bd90      	pop	{r4, r7, pc}
    d6ce:	46c0      	nop			; (mov r8, r8)
    d6d0:	00019be9 	.word	0x00019be9
    d6d4:	00016811 	.word	0x00016811

0000d6d8 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
    d6d8:	b590      	push	{r4, r7, lr}
    d6da:	b085      	sub	sp, #20
    d6dc:	af00      	add	r7, sp, #0
    d6de:	60f8      	str	r0, [r7, #12]
    d6e0:	0008      	movs	r0, r1
    d6e2:	0011      	movs	r1, r2
    d6e4:	607b      	str	r3, [r7, #4]
    d6e6:	230a      	movs	r3, #10
    d6e8:	18fb      	adds	r3, r7, r3
    d6ea:	1c02      	adds	r2, r0, #0
    d6ec:	801a      	strh	r2, [r3, #0]
    d6ee:	2309      	movs	r3, #9
    d6f0:	18fb      	adds	r3, r7, r3
    d6f2:	1c0a      	adds	r2, r1, #0
    d6f4:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    d6f6:	687c      	ldr	r4, [r7, #4]
    d6f8:	2309      	movs	r3, #9
    d6fa:	18fb      	adds	r3, r7, r3
    d6fc:	781a      	ldrb	r2, [r3, #0]
    d6fe:	230a      	movs	r3, #10
    d700:	18fb      	adds	r3, r7, r3
    d702:	8819      	ldrh	r1, [r3, #0]
    d704:	68f8      	ldr	r0, [r7, #12]
    d706:	0023      	movs	r3, r4
    d708:	4c05      	ldr	r4, [pc, #20]	; (d720 <ComputeCmac+0x48>)
    d70a:	47a0      	blx	r4
    d70c:	1e03      	subs	r3, r0, #0
    d70e:	d001      	beq.n	d714 <ComputeCmac+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d710:	230c      	movs	r3, #12
    d712:	e000      	b.n	d716 <ComputeCmac+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d714:	2300      	movs	r3, #0
}
    d716:	0018      	movs	r0, r3
    d718:	46bd      	mov	sp, r7
    d71a:	b005      	add	sp, #20
    d71c:	bd90      	pop	{r4, r7, pc}
    d71e:	46c0      	nop			; (mov r8, r8)
    d720:	00016739 	.word	0x00016739

0000d724 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
    d724:	b590      	push	{r4, r7, lr}
    d726:	b085      	sub	sp, #20
    d728:	af00      	add	r7, sp, #0
    d72a:	60f8      	str	r0, [r7, #12]
    d72c:	0008      	movs	r0, r1
    d72e:	0011      	movs	r1, r2
    d730:	607b      	str	r3, [r7, #4]
    d732:	230a      	movs	r3, #10
    d734:	18fb      	adds	r3, r7, r3
    d736:	1c02      	adds	r2, r0, #0
    d738:	801a      	strh	r2, [r3, #0]
    d73a:	2309      	movs	r3, #9
    d73c:	18fb      	adds	r3, r7, r3
    d73e:	1c0a      	adds	r2, r1, #0
    d740:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    d742:	2309      	movs	r3, #9
    d744:	18fb      	adds	r3, r7, r3
    d746:	781c      	ldrb	r4, [r3, #0]
    d748:	687a      	ldr	r2, [r7, #4]
    d74a:	230a      	movs	r3, #10
    d74c:	18fb      	adds	r3, r7, r3
    d74e:	8819      	ldrh	r1, [r3, #0]
    d750:	68f8      	ldr	r0, [r7, #12]
    d752:	0023      	movs	r3, r4
    d754:	4c05      	ldr	r4, [pc, #20]	; (d76c <VerifyCmac+0x48>)
    d756:	47a0      	blx	r4
    d758:	1e03      	subs	r3, r0, #0
    d75a:	d001      	beq.n	d760 <VerifyCmac+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d75c:	230c      	movs	r3, #12
    d75e:	e000      	b.n	d762 <VerifyCmac+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d760:	2300      	movs	r3, #0
}
    d762:	0018      	movs	r0, r3
    d764:	46bd      	mov	sp, r7
    d766:	b005      	add	sp, #20
    d768:	bd90      	pop	{r4, r7, pc}
    d76a:	46c0      	nop			; (mov r8, r8)
    d76c:	00016789 	.word	0x00016789

0000d770 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
    d770:	b5b0      	push	{r4, r5, r7, lr}
    d772:	b084      	sub	sp, #16
    d774:	af00      	add	r7, sp, #0
    d776:	0005      	movs	r5, r0
    d778:	000c      	movs	r4, r1
    d77a:	0010      	movs	r0, r2
    d77c:	0019      	movs	r1, r3
    d77e:	1dbb      	adds	r3, r7, #6
    d780:	1c2a      	adds	r2, r5, #0
    d782:	801a      	strh	r2, [r3, #0]
    d784:	1d7b      	adds	r3, r7, #5
    d786:	1c22      	adds	r2, r4, #0
    d788:	701a      	strb	r2, [r3, #0]
    d78a:	1d3b      	adds	r3, r7, #4
    d78c:	1c02      	adds	r2, r0, #0
    d78e:	701a      	strb	r2, [r3, #0]
    d790:	1cfb      	adds	r3, r7, #3
    d792:	1c0a      	adds	r2, r1, #0
    d794:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
    d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d798:	2b00      	cmp	r3, #0
    d79a:	d101      	bne.n	d7a0 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d79c:	2307      	movs	r3, #7
    d79e:	e07a      	b.n	d896 <PrepareB0+0x126>
    }

    b0[0] = 0x49;
    d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7a2:	2249      	movs	r2, #73	; 0x49
    d7a4:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
    d7a6:	1d3b      	adds	r3, r7, #4
    d7a8:	781b      	ldrb	r3, [r3, #0]
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	d025      	beq.n	d7fa <PrepareB0+0x8a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
    d7ae:	230e      	movs	r3, #14
    d7b0:	18fb      	adds	r3, r7, r3
    d7b2:	2200      	movs	r2, #0
    d7b4:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
    d7b6:	1cfb      	adds	r3, r7, #3
    d7b8:	781b      	ldrb	r3, [r3, #0]
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d106      	bne.n	d7cc <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
    d7be:	4b38      	ldr	r3, [pc, #224]	; (d8a0 <PrepareB0+0x130>)
    d7c0:	689b      	ldr	r3, [r3, #8]
    d7c2:	695a      	ldr	r2, [r3, #20]
    d7c4:	230e      	movs	r3, #14
    d7c6:	18fb      	adds	r3, r7, r3
    d7c8:	801a      	strh	r2, [r3, #0]
    d7ca:	e005      	b.n	d7d8 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
    d7cc:	4b34      	ldr	r3, [pc, #208]	; (d8a0 <PrepareB0+0x130>)
    d7ce:	689b      	ldr	r3, [r3, #8]
    d7d0:	689a      	ldr	r2, [r3, #8]
    d7d2:	230e      	movs	r3, #14
    d7d4:	18fb      	adds	r3, r7, r3
    d7d6:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
    d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7da:	3301      	adds	r3, #1
    d7dc:	220e      	movs	r2, #14
    d7de:	18ba      	adds	r2, r7, r2
    d7e0:	8812      	ldrh	r2, [r2, #0]
    d7e2:	b2d2      	uxtb	r2, r2
    d7e4:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7e8:	3302      	adds	r3, #2
    d7ea:	220e      	movs	r2, #14
    d7ec:	18ba      	adds	r2, r7, r2
    d7ee:	8812      	ldrh	r2, [r2, #0]
    d7f0:	0a12      	lsrs	r2, r2, #8
    d7f2:	b292      	uxth	r2, r2
    d7f4:	b2d2      	uxtb	r2, r2
    d7f6:	701a      	strb	r2, [r3, #0]
    d7f8:	e007      	b.n	d80a <PrepareB0+0x9a>
    }
    else
    {
        b0[1] = 0x00;
    d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7fc:	3301      	adds	r3, #1
    d7fe:	2200      	movs	r2, #0
    d800:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
    d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d804:	3302      	adds	r3, #2
    d806:	2200      	movs	r2, #0
    d808:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
    d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d80c:	3303      	adds	r3, #3
    d80e:	2200      	movs	r2, #0
    d810:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
    d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d814:	3304      	adds	r3, #4
    d816:	2200      	movs	r2, #0
    d818:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
    d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d81c:	3305      	adds	r3, #5
    d81e:	1cfa      	adds	r2, r7, #3
    d820:	7812      	ldrb	r2, [r2, #0]
    d822:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
    d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d826:	3306      	adds	r3, #6
    d828:	6a3a      	ldr	r2, [r7, #32]
    d82a:	b2d2      	uxtb	r2, r2
    d82c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
    d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d830:	3307      	adds	r3, #7
    d832:	6a3a      	ldr	r2, [r7, #32]
    d834:	0a12      	lsrs	r2, r2, #8
    d836:	b2d2      	uxtb	r2, r2
    d838:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
    d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d83c:	3308      	adds	r3, #8
    d83e:	6a3a      	ldr	r2, [r7, #32]
    d840:	0c12      	lsrs	r2, r2, #16
    d842:	b2d2      	uxtb	r2, r2
    d844:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
    d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d848:	3309      	adds	r3, #9
    d84a:	6a3a      	ldr	r2, [r7, #32]
    d84c:	0e12      	lsrs	r2, r2, #24
    d84e:	b2d2      	uxtb	r2, r2
    d850:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
    d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d854:	330a      	adds	r3, #10
    d856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d858:	b2d2      	uxtb	r2, r2
    d85a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
    d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d85e:	330b      	adds	r3, #11
    d860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d862:	0a12      	lsrs	r2, r2, #8
    d864:	b2d2      	uxtb	r2, r2
    d866:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
    d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d86a:	330c      	adds	r3, #12
    d86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d86e:	0c12      	lsrs	r2, r2, #16
    d870:	b2d2      	uxtb	r2, r2
    d872:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
    d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d876:	330d      	adds	r3, #13
    d878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d87a:	0e12      	lsrs	r2, r2, #24
    d87c:	b2d2      	uxtb	r2, r2
    d87e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
    d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d882:	330e      	adds	r3, #14
    d884:	2200      	movs	r2, #0
    d886:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
    d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d88a:	330f      	adds	r3, #15
    d88c:	1dba      	adds	r2, r7, #6
    d88e:	8812      	ldrh	r2, [r2, #0]
    d890:	b2d2      	uxtb	r2, r2
    d892:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
    d894:	2300      	movs	r3, #0
}
    d896:	0018      	movs	r0, r3
    d898:	46bd      	mov	sp, r7
    d89a:	b004      	add	sp, #16
    d89c:	bdb0      	pop	{r4, r5, r7, pc}
    d89e:	46c0      	nop			; (mov r8, r8)
    d8a0:	200014c4 	.word	0x200014c4

0000d8a4 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
    d8a4:	b590      	push	{r4, r7, lr}
    d8a6:	b0cb      	sub	sp, #300	; 0x12c
    d8a8:	af04      	add	r7, sp, #16
    d8aa:	6078      	str	r0, [r7, #4]
    d8ac:	000c      	movs	r4, r1
    d8ae:	0010      	movs	r0, r2
    d8b0:	0019      	movs	r1, r3
    d8b2:	4b48      	ldr	r3, [pc, #288]	; (d9d4 <ComputeCmacB0+0x130>)
    d8b4:	228c      	movs	r2, #140	; 0x8c
    d8b6:	0052      	lsls	r2, r2, #1
    d8b8:	4694      	mov	ip, r2
    d8ba:	44bc      	add	ip, r7
    d8bc:	4463      	add	r3, ip
    d8be:	1c22      	adds	r2, r4, #0
    d8c0:	801a      	strh	r2, [r3, #0]
    d8c2:	4b45      	ldr	r3, [pc, #276]	; (d9d8 <ComputeCmacB0+0x134>)
    d8c4:	228c      	movs	r2, #140	; 0x8c
    d8c6:	0052      	lsls	r2, r2, #1
    d8c8:	4694      	mov	ip, r2
    d8ca:	44bc      	add	ip, r7
    d8cc:	4463      	add	r3, ip
    d8ce:	1c02      	adds	r2, r0, #0
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	4b42      	ldr	r3, [pc, #264]	; (d9dc <ComputeCmacB0+0x138>)
    d8d4:	228c      	movs	r2, #140	; 0x8c
    d8d6:	0052      	lsls	r2, r2, #1
    d8d8:	4694      	mov	ip, r2
    d8da:	44bc      	add	ip, r7
    d8dc:	4463      	add	r3, ip
    d8de:	1c0a      	adds	r2, r1, #0
    d8e0:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d005      	beq.n	d8f4 <ComputeCmacB0+0x50>
    d8e8:	239a      	movs	r3, #154	; 0x9a
    d8ea:	005b      	lsls	r3, r3, #1
    d8ec:	18fb      	adds	r3, r7, r3
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	2b00      	cmp	r3, #0
    d8f2:	d101      	bne.n	d8f8 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d8f4:	2307      	movs	r3, #7
    d8f6:	e069      	b.n	d9cc <ComputeCmacB0+0x128>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    d8f8:	4b36      	ldr	r3, [pc, #216]	; (d9d4 <ComputeCmacB0+0x130>)
    d8fa:	228c      	movs	r2, #140	; 0x8c
    d8fc:	0052      	lsls	r2, r2, #1
    d8fe:	4694      	mov	ip, r2
    d900:	44bc      	add	ip, r7
    d902:	4463      	add	r3, ip
    d904:	881a      	ldrh	r2, [r3, #0]
    d906:	2380      	movs	r3, #128	; 0x80
    d908:	005b      	lsls	r3, r3, #1
    d90a:	429a      	cmp	r2, r3
    d90c:	d901      	bls.n	d912 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    d90e:	230b      	movs	r3, #11
    d910:	e05c      	b.n	d9cc <ComputeCmacB0+0x128>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    d912:	2388      	movs	r3, #136	; 0x88
    d914:	005a      	lsls	r2, r3, #1
    d916:	2308      	movs	r3, #8
    d918:	18fb      	adds	r3, r7, r3
    d91a:	2100      	movs	r1, #0
    d91c:	0018      	movs	r0, r3
    d91e:	4b30      	ldr	r3, [pc, #192]	; (d9e0 <ComputeCmacB0+0x13c>)
    d920:	4798      	blx	r3

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
    d922:	2394      	movs	r3, #148	; 0x94
    d924:	005b      	lsls	r3, r3, #1
    d926:	18fb      	adds	r3, r7, r3
    d928:	781c      	ldrb	r4, [r3, #0]
    d92a:	4b2c      	ldr	r3, [pc, #176]	; (d9dc <ComputeCmacB0+0x138>)
    d92c:	228c      	movs	r2, #140	; 0x8c
    d92e:	0052      	lsls	r2, r2, #1
    d930:	4694      	mov	ip, r2
    d932:	44bc      	add	ip, r7
    d934:	4463      	add	r3, ip
    d936:	781a      	ldrb	r2, [r3, #0]
    d938:	4b27      	ldr	r3, [pc, #156]	; (d9d8 <ComputeCmacB0+0x134>)
    d93a:	218c      	movs	r1, #140	; 0x8c
    d93c:	0049      	lsls	r1, r1, #1
    d93e:	468c      	mov	ip, r1
    d940:	44bc      	add	ip, r7
    d942:	4463      	add	r3, ip
    d944:	7819      	ldrb	r1, [r3, #0]
    d946:	4b23      	ldr	r3, [pc, #140]	; (d9d4 <ComputeCmacB0+0x130>)
    d948:	208c      	movs	r0, #140	; 0x8c
    d94a:	0040      	lsls	r0, r0, #1
    d94c:	4684      	mov	ip, r0
    d94e:	44bc      	add	ip, r7
    d950:	4463      	add	r3, ip
    d952:	8818      	ldrh	r0, [r3, #0]
    d954:	2308      	movs	r3, #8
    d956:	18fb      	adds	r3, r7, r3
    d958:	9302      	str	r3, [sp, #8]
    d95a:	2398      	movs	r3, #152	; 0x98
    d95c:	005b      	lsls	r3, r3, #1
    d95e:	18fb      	adds	r3, r7, r3
    d960:	681b      	ldr	r3, [r3, #0]
    d962:	9301      	str	r3, [sp, #4]
    d964:	2396      	movs	r3, #150	; 0x96
    d966:	005b      	lsls	r3, r3, #1
    d968:	18fb      	adds	r3, r7, r3
    d96a:	681b      	ldr	r3, [r3, #0]
    d96c:	9300      	str	r3, [sp, #0]
    d96e:	0023      	movs	r3, r4
    d970:	4c1c      	ldr	r4, [pc, #112]	; (d9e4 <ComputeCmacB0+0x140>)
    d972:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    d974:	2308      	movs	r3, #8
    d976:	18fb      	adds	r3, r7, r3
    d978:	3310      	adds	r3, #16
    d97a:	4a16      	ldr	r2, [pc, #88]	; (d9d4 <ComputeCmacB0+0x130>)
    d97c:	218c      	movs	r1, #140	; 0x8c
    d97e:	0049      	lsls	r1, r1, #1
    d980:	468c      	mov	ip, r1
    d982:	44bc      	add	ip, r7
    d984:	4462      	add	r2, ip
    d986:	8812      	ldrh	r2, [r2, #0]
    d988:	6879      	ldr	r1, [r7, #4]
    d98a:	0018      	movs	r0, r3
    d98c:	4b16      	ldr	r3, [pc, #88]	; (d9e8 <ComputeCmacB0+0x144>)
    d98e:	4798      	blx	r3

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    d990:	4b10      	ldr	r3, [pc, #64]	; (d9d4 <ComputeCmacB0+0x130>)
    d992:	228c      	movs	r2, #140	; 0x8c
    d994:	0052      	lsls	r2, r2, #1
    d996:	4694      	mov	ip, r2
    d998:	44bc      	add	ip, r7
    d99a:	4463      	add	r3, ip
    d99c:	881b      	ldrh	r3, [r3, #0]
    d99e:	3310      	adds	r3, #16
    d9a0:	b299      	uxth	r1, r3
    d9a2:	239a      	movs	r3, #154	; 0x9a
    d9a4:	005b      	lsls	r3, r3, #1
    d9a6:	18fb      	adds	r3, r7, r3
    d9a8:	681c      	ldr	r4, [r3, #0]
    d9aa:	4b0b      	ldr	r3, [pc, #44]	; (d9d8 <ComputeCmacB0+0x134>)
    d9ac:	228c      	movs	r2, #140	; 0x8c
    d9ae:	0052      	lsls	r2, r2, #1
    d9b0:	4694      	mov	ip, r2
    d9b2:	44bc      	add	ip, r7
    d9b4:	4463      	add	r3, ip
    d9b6:	781a      	ldrb	r2, [r3, #0]
    d9b8:	2308      	movs	r3, #8
    d9ba:	18f8      	adds	r0, r7, r3
    d9bc:	0023      	movs	r3, r4
    d9be:	4c0b      	ldr	r4, [pc, #44]	; (d9ec <ComputeCmacB0+0x148>)
    d9c0:	47a0      	blx	r4
    d9c2:	1e03      	subs	r3, r0, #0
    d9c4:	d001      	beq.n	d9ca <ComputeCmacB0+0x126>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d9c6:	230c      	movs	r3, #12
    d9c8:	e000      	b.n	d9cc <ComputeCmacB0+0x128>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d9ca:	2300      	movs	r3, #0
}
    d9cc:	0018      	movs	r0, r3
    d9ce:	46bd      	mov	sp, r7
    d9d0:	b047      	add	sp, #284	; 0x11c
    d9d2:	bd90      	pop	{r4, r7, pc}
    d9d4:	fffffeea 	.word	0xfffffeea
    d9d8:	fffffee9 	.word	0xfffffee9
    d9dc:	fffffee8 	.word	0xfffffee8
    d9e0:	000043b1 	.word	0x000043b1
    d9e4:	0000d771 	.word	0x0000d771
    d9e8:	00004339 	.word	0x00004339
    d9ec:	00016739 	.word	0x00016739

0000d9f0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
    d9f0:	b5b0      	push	{r4, r5, r7, lr}
    d9f2:	b0cc      	sub	sp, #304	; 0x130
    d9f4:	af04      	add	r7, sp, #16
    d9f6:	6078      	str	r0, [r7, #4]
    d9f8:	000c      	movs	r4, r1
    d9fa:	0010      	movs	r0, r2
    d9fc:	0019      	movs	r1, r3
    d9fe:	4b50      	ldr	r3, [pc, #320]	; (db40 <VerifyCmacB0+0x150>)
    da00:	2290      	movs	r2, #144	; 0x90
    da02:	0052      	lsls	r2, r2, #1
    da04:	4694      	mov	ip, r2
    da06:	44bc      	add	ip, r7
    da08:	4463      	add	r3, ip
    da0a:	1c22      	adds	r2, r4, #0
    da0c:	801a      	strh	r2, [r3, #0]
    da0e:	4b4d      	ldr	r3, [pc, #308]	; (db44 <VerifyCmacB0+0x154>)
    da10:	2290      	movs	r2, #144	; 0x90
    da12:	0052      	lsls	r2, r2, #1
    da14:	4694      	mov	ip, r2
    da16:	44bc      	add	ip, r7
    da18:	4463      	add	r3, ip
    da1a:	1c02      	adds	r2, r0, #0
    da1c:	701a      	strb	r2, [r3, #0]
    da1e:	4b4a      	ldr	r3, [pc, #296]	; (db48 <VerifyCmacB0+0x158>)
    da20:	2290      	movs	r2, #144	; 0x90
    da22:	0052      	lsls	r2, r2, #1
    da24:	4694      	mov	ip, r2
    da26:	44bc      	add	ip, r7
    da28:	4463      	add	r3, ip
    da2a:	1c0a      	adds	r2, r1, #0
    da2c:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	2b00      	cmp	r3, #0
    da32:	d101      	bne.n	da38 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    da34:	2307      	movs	r3, #7
    da36:	e07e      	b.n	db36 <VerifyCmacB0+0x146>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    da38:	4b41      	ldr	r3, [pc, #260]	; (db40 <VerifyCmacB0+0x150>)
    da3a:	2290      	movs	r2, #144	; 0x90
    da3c:	0052      	lsls	r2, r2, #1
    da3e:	4694      	mov	ip, r2
    da40:	44bc      	add	ip, r7
    da42:	4463      	add	r3, ip
    da44:	881a      	ldrh	r2, [r3, #0]
    da46:	2380      	movs	r3, #128	; 0x80
    da48:	005b      	lsls	r3, r3, #1
    da4a:	429a      	cmp	r2, r3
    da4c:	d901      	bls.n	da52 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    da4e:	230b      	movs	r3, #11
    da50:	e071      	b.n	db36 <VerifyCmacB0+0x146>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    da52:	2388      	movs	r3, #136	; 0x88
    da54:	005a      	lsls	r2, r3, #1
    da56:	230c      	movs	r3, #12
    da58:	18fb      	adds	r3, r7, r3
    da5a:	2100      	movs	r1, #0
    da5c:	0018      	movs	r0, r3
    da5e:	4b3b      	ldr	r3, [pc, #236]	; (db4c <VerifyCmacB0+0x15c>)
    da60:	4798      	blx	r3

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
    da62:	2398      	movs	r3, #152	; 0x98
    da64:	005b      	lsls	r3, r3, #1
    da66:	18fb      	adds	r3, r7, r3
    da68:	781c      	ldrb	r4, [r3, #0]
    da6a:	4b37      	ldr	r3, [pc, #220]	; (db48 <VerifyCmacB0+0x158>)
    da6c:	2290      	movs	r2, #144	; 0x90
    da6e:	0052      	lsls	r2, r2, #1
    da70:	4694      	mov	ip, r2
    da72:	44bc      	add	ip, r7
    da74:	4463      	add	r3, ip
    da76:	781a      	ldrb	r2, [r3, #0]
    da78:	4b32      	ldr	r3, [pc, #200]	; (db44 <VerifyCmacB0+0x154>)
    da7a:	2190      	movs	r1, #144	; 0x90
    da7c:	0049      	lsls	r1, r1, #1
    da7e:	468c      	mov	ip, r1
    da80:	44bc      	add	ip, r7
    da82:	4463      	add	r3, ip
    da84:	7819      	ldrb	r1, [r3, #0]
    da86:	4b2e      	ldr	r3, [pc, #184]	; (db40 <VerifyCmacB0+0x150>)
    da88:	2090      	movs	r0, #144	; 0x90
    da8a:	0040      	lsls	r0, r0, #1
    da8c:	4684      	mov	ip, r0
    da8e:	44bc      	add	ip, r7
    da90:	4463      	add	r3, ip
    da92:	8818      	ldrh	r0, [r3, #0]
    da94:	230c      	movs	r3, #12
    da96:	18fb      	adds	r3, r7, r3
    da98:	9302      	str	r3, [sp, #8]
    da9a:	239c      	movs	r3, #156	; 0x9c
    da9c:	005b      	lsls	r3, r3, #1
    da9e:	18fb      	adds	r3, r7, r3
    daa0:	681b      	ldr	r3, [r3, #0]
    daa2:	9301      	str	r3, [sp, #4]
    daa4:	239a      	movs	r3, #154	; 0x9a
    daa6:	005b      	lsls	r3, r3, #1
    daa8:	18fb      	adds	r3, r7, r3
    daaa:	681b      	ldr	r3, [r3, #0]
    daac:	9300      	str	r3, [sp, #0]
    daae:	0023      	movs	r3, r4
    dab0:	4c27      	ldr	r4, [pc, #156]	; (db50 <VerifyCmacB0+0x160>)
    dab2:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    dab4:	230c      	movs	r3, #12
    dab6:	18fb      	adds	r3, r7, r3
    dab8:	3310      	adds	r3, #16
    daba:	4a21      	ldr	r2, [pc, #132]	; (db40 <VerifyCmacB0+0x150>)
    dabc:	2190      	movs	r1, #144	; 0x90
    dabe:	0049      	lsls	r1, r1, #1
    dac0:	468c      	mov	ip, r1
    dac2:	44bc      	add	ip, r7
    dac4:	4462      	add	r2, ip
    dac6:	8812      	ldrh	r2, [r2, #0]
    dac8:	6879      	ldr	r1, [r7, #4]
    daca:	0018      	movs	r0, r3
    dacc:	4b21      	ldr	r3, [pc, #132]	; (db54 <VerifyCmacB0+0x164>)
    dace:	4798      	blx	r3

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    dad0:	2320      	movs	r3, #32
    dad2:	33ff      	adds	r3, #255	; 0xff
    dad4:	18fb      	adds	r3, r7, r3
    dad6:	2206      	movs	r2, #6
    dad8:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
    dada:	4b19      	ldr	r3, [pc, #100]	; (db40 <VerifyCmacB0+0x150>)
    dadc:	2290      	movs	r2, #144	; 0x90
    dade:	0052      	lsls	r2, r2, #1
    dae0:	4694      	mov	ip, r2
    dae2:	44bc      	add	ip, r7
    dae4:	4463      	add	r3, ip
    dae6:	881b      	ldrh	r3, [r3, #0]
    dae8:	3310      	adds	r3, #16
    daea:	b299      	uxth	r1, r3
    daec:	2320      	movs	r3, #32
    daee:	33ff      	adds	r3, #255	; 0xff
    daf0:	18fc      	adds	r4, r7, r3
    daf2:	4b14      	ldr	r3, [pc, #80]	; (db44 <VerifyCmacB0+0x154>)
    daf4:	2290      	movs	r2, #144	; 0x90
    daf6:	0052      	lsls	r2, r2, #1
    daf8:	4694      	mov	ip, r2
    dafa:	44bc      	add	ip, r7
    dafc:	4463      	add	r3, ip
    dafe:	781b      	ldrb	r3, [r3, #0]
    db00:	229e      	movs	r2, #158	; 0x9e
    db02:	0052      	lsls	r2, r2, #1
    db04:	18ba      	adds	r2, r7, r2
    db06:	6812      	ldr	r2, [r2, #0]
    db08:	200c      	movs	r0, #12
    db0a:	1838      	adds	r0, r7, r0
    db0c:	4d12      	ldr	r5, [pc, #72]	; (db58 <VerifyCmacB0+0x168>)
    db0e:	47a8      	blx	r5
    db10:	0003      	movs	r3, r0
    db12:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
    db14:	2320      	movs	r3, #32
    db16:	33ff      	adds	r3, #255	; 0xff
    db18:	18fb      	adds	r3, r7, r3
    db1a:	781b      	ldrb	r3, [r3, #0]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d101      	bne.n	db24 <VerifyCmacB0+0x134>
    {
        return LORAMAC_CRYPTO_SUCCESS;
    db20:	2300      	movs	r3, #0
    db22:	e008      	b.n	db36 <VerifyCmacB0+0x146>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
    db24:	2320      	movs	r3, #32
    db26:	33ff      	adds	r3, #255	; 0xff
    db28:	18fb      	adds	r3, r7, r3
    db2a:	781b      	ldrb	r3, [r3, #0]
    db2c:	2b01      	cmp	r3, #1
    db2e:	d101      	bne.n	db34 <VerifyCmacB0+0x144>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
    db30:	2301      	movs	r3, #1
    db32:	e000      	b.n	db36 <VerifyCmacB0+0x146>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    db34:	230c      	movs	r3, #12
}
    db36:	0018      	movs	r0, r3
    db38:	46bd      	mov	sp, r7
    db3a:	b048      	add	sp, #288	; 0x120
    db3c:	bdb0      	pop	{r4, r5, r7, pc}
    db3e:	46c0      	nop			; (mov r8, r8)
    db40:	fffffee2 	.word	0xfffffee2
    db44:	fffffee1 	.word	0xfffffee1
    db48:	fffffee0 	.word	0xfffffee0
    db4c:	000043b1 	.word	0x000043b1
    db50:	0000d771 	.word	0x0000d771
    db54:	00004339 	.word	0x00004339
    db58:	00016789 	.word	0x00016789

0000db5c <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
    db5c:	b5b0      	push	{r4, r5, r7, lr}
    db5e:	b084      	sub	sp, #16
    db60:	af00      	add	r7, sp, #0
    db62:	0005      	movs	r5, r0
    db64:	000c      	movs	r4, r1
    db66:	0010      	movs	r0, r2
    db68:	0019      	movs	r1, r3
    db6a:	1dbb      	adds	r3, r7, #6
    db6c:	1c2a      	adds	r2, r5, #0
    db6e:	801a      	strh	r2, [r3, #0]
    db70:	1d7b      	adds	r3, r7, #5
    db72:	1c22      	adds	r2, r4, #0
    db74:	701a      	strb	r2, [r3, #0]
    db76:	1d3b      	adds	r3, r7, #4
    db78:	1c02      	adds	r2, r0, #0
    db7a:	701a      	strb	r2, [r3, #0]
    db7c:	1cfb      	adds	r3, r7, #3
    db7e:	1c0a      	adds	r2, r1, #0
    db80:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
    db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db84:	2b00      	cmp	r3, #0
    db86:	d101      	bne.n	db8c <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    db88:	2307      	movs	r3, #7
    db8a:	e06e      	b.n	dc6a <PrepareB1+0x10e>
    }

    b1[0] = 0x49;
    db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db8e:	2249      	movs	r2, #73	; 0x49
    db90:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
    db92:	1d3b      	adds	r3, r7, #4
    db94:	781b      	ldrb	r3, [r3, #0]
    db96:	2b00      	cmp	r3, #0
    db98:	d017      	beq.n	dbca <PrepareB1+0x6e>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
    db9a:	4b36      	ldr	r3, [pc, #216]	; (dc74 <PrepareB1+0x118>)
    db9c:	689b      	ldr	r3, [r3, #8]
    db9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dba0:	681a      	ldr	r2, [r3, #0]
    dba2:	230e      	movs	r3, #14
    dba4:	18fb      	adds	r3, r7, r3
    dba6:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
    dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbaa:	3301      	adds	r3, #1
    dbac:	220e      	movs	r2, #14
    dbae:	18ba      	adds	r2, r7, r2
    dbb0:	8812      	ldrh	r2, [r2, #0]
    dbb2:	b2d2      	uxtb	r2, r2
    dbb4:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
    dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbb8:	3302      	adds	r3, #2
    dbba:	220e      	movs	r2, #14
    dbbc:	18ba      	adds	r2, r7, r2
    dbbe:	8812      	ldrh	r2, [r2, #0]
    dbc0:	0a12      	lsrs	r2, r2, #8
    dbc2:	b292      	uxth	r2, r2
    dbc4:	b2d2      	uxtb	r2, r2
    dbc6:	701a      	strb	r2, [r3, #0]
    dbc8:	e007      	b.n	dbda <PrepareB1+0x7e>
    }
    else
    {
        b1[1] = 0x00;
    dbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbcc:	3301      	adds	r3, #1
    dbce:	2200      	movs	r2, #0
    dbd0:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
    dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbd4:	3302      	adds	r3, #2
    dbd6:	2200      	movs	r2, #0
    dbd8:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
    dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbdc:	3303      	adds	r3, #3
    dbde:	1cfa      	adds	r2, r7, #3
    dbe0:	7812      	ldrb	r2, [r2, #0]
    dbe2:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
    dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbe6:	3304      	adds	r3, #4
    dbe8:	2220      	movs	r2, #32
    dbea:	18ba      	adds	r2, r7, r2
    dbec:	7812      	ldrb	r2, [r2, #0]
    dbee:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
    dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbf2:	3305      	adds	r3, #5
    dbf4:	2200      	movs	r2, #0
    dbf6:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
    dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbfa:	3306      	adds	r3, #6
    dbfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dbfe:	b2d2      	uxtb	r2, r2
    dc00:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
    dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc04:	3307      	adds	r3, #7
    dc06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dc08:	0a12      	lsrs	r2, r2, #8
    dc0a:	b2d2      	uxtb	r2, r2
    dc0c:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
    dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc10:	3308      	adds	r3, #8
    dc12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dc14:	0c12      	lsrs	r2, r2, #16
    dc16:	b2d2      	uxtb	r2, r2
    dc18:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
    dc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc1c:	3309      	adds	r3, #9
    dc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dc20:	0e12      	lsrs	r2, r2, #24
    dc22:	b2d2      	uxtb	r2, r2
    dc24:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
    dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc28:	330a      	adds	r3, #10
    dc2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dc2c:	b2d2      	uxtb	r2, r2
    dc2e:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
    dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc32:	330b      	adds	r3, #11
    dc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dc36:	0a12      	lsrs	r2, r2, #8
    dc38:	b2d2      	uxtb	r2, r2
    dc3a:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
    dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc3e:	330c      	adds	r3, #12
    dc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dc42:	0c12      	lsrs	r2, r2, #16
    dc44:	b2d2      	uxtb	r2, r2
    dc46:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
    dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc4a:	330d      	adds	r3, #13
    dc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dc4e:	0e12      	lsrs	r2, r2, #24
    dc50:	b2d2      	uxtb	r2, r2
    dc52:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
    dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc56:	330e      	adds	r3, #14
    dc58:	2200      	movs	r2, #0
    dc5a:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
    dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc5e:	330f      	adds	r3, #15
    dc60:	1dba      	adds	r2, r7, #6
    dc62:	8812      	ldrh	r2, [r2, #0]
    dc64:	b2d2      	uxtb	r2, r2
    dc66:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
    dc68:	2300      	movs	r3, #0
}
    dc6a:	0018      	movs	r0, r3
    dc6c:	46bd      	mov	sp, r7
    dc6e:	b004      	add	sp, #16
    dc70:	bdb0      	pop	{r4, r5, r7, pc}
    dc72:	46c0      	nop			; (mov r8, r8)
    dc74:	200014c4 	.word	0x200014c4

0000dc78 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
    dc78:	b590      	push	{r4, r7, lr}
    dc7a:	b0cb      	sub	sp, #300	; 0x12c
    dc7c:	af04      	add	r7, sp, #16
    dc7e:	6078      	str	r0, [r7, #4]
    dc80:	000c      	movs	r4, r1
    dc82:	0010      	movs	r0, r2
    dc84:	0019      	movs	r1, r3
    dc86:	4b4b      	ldr	r3, [pc, #300]	; (ddb4 <ComputeCmacB1+0x13c>)
    dc88:	228c      	movs	r2, #140	; 0x8c
    dc8a:	0052      	lsls	r2, r2, #1
    dc8c:	4694      	mov	ip, r2
    dc8e:	44bc      	add	ip, r7
    dc90:	4463      	add	r3, ip
    dc92:	1c22      	adds	r2, r4, #0
    dc94:	801a      	strh	r2, [r3, #0]
    dc96:	4b48      	ldr	r3, [pc, #288]	; (ddb8 <ComputeCmacB1+0x140>)
    dc98:	228c      	movs	r2, #140	; 0x8c
    dc9a:	0052      	lsls	r2, r2, #1
    dc9c:	4694      	mov	ip, r2
    dc9e:	44bc      	add	ip, r7
    dca0:	4463      	add	r3, ip
    dca2:	1c02      	adds	r2, r0, #0
    dca4:	701a      	strb	r2, [r3, #0]
    dca6:	4b45      	ldr	r3, [pc, #276]	; (ddbc <ComputeCmacB1+0x144>)
    dca8:	228c      	movs	r2, #140	; 0x8c
    dcaa:	0052      	lsls	r2, r2, #1
    dcac:	4694      	mov	ip, r2
    dcae:	44bc      	add	ip, r7
    dcb0:	4463      	add	r3, ip
    dcb2:	1c0a      	adds	r2, r1, #0
    dcb4:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d005      	beq.n	dcc8 <ComputeCmacB1+0x50>
    dcbc:	239c      	movs	r3, #156	; 0x9c
    dcbe:	005b      	lsls	r3, r3, #1
    dcc0:	18fb      	adds	r3, r7, r3
    dcc2:	681b      	ldr	r3, [r3, #0]
    dcc4:	2b00      	cmp	r3, #0
    dcc6:	d101      	bne.n	dccc <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    dcc8:	2307      	movs	r3, #7
    dcca:	e06e      	b.n	ddaa <ComputeCmacB1+0x132>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    dccc:	4b39      	ldr	r3, [pc, #228]	; (ddb4 <ComputeCmacB1+0x13c>)
    dcce:	228c      	movs	r2, #140	; 0x8c
    dcd0:	0052      	lsls	r2, r2, #1
    dcd2:	4694      	mov	ip, r2
    dcd4:	44bc      	add	ip, r7
    dcd6:	4463      	add	r3, ip
    dcd8:	881a      	ldrh	r2, [r3, #0]
    dcda:	2380      	movs	r3, #128	; 0x80
    dcdc:	005b      	lsls	r3, r3, #1
    dcde:	429a      	cmp	r2, r3
    dce0:	d901      	bls.n	dce6 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    dce2:	230b      	movs	r3, #11
    dce4:	e061      	b.n	ddaa <ComputeCmacB1+0x132>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    dce6:	2388      	movs	r3, #136	; 0x88
    dce8:	005a      	lsls	r2, r3, #1
    dcea:	2308      	movs	r3, #8
    dcec:	18fb      	adds	r3, r7, r3
    dcee:	2100      	movs	r1, #0
    dcf0:	0018      	movs	r0, r3
    dcf2:	4b33      	ldr	r3, [pc, #204]	; (ddc0 <ComputeCmacB1+0x148>)
    dcf4:	4798      	blx	r3

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
    dcf6:	2394      	movs	r3, #148	; 0x94
    dcf8:	005b      	lsls	r3, r3, #1
    dcfa:	18fb      	adds	r3, r7, r3
    dcfc:	781c      	ldrb	r4, [r3, #0]
    dcfe:	4b2f      	ldr	r3, [pc, #188]	; (ddbc <ComputeCmacB1+0x144>)
    dd00:	228c      	movs	r2, #140	; 0x8c
    dd02:	0052      	lsls	r2, r2, #1
    dd04:	4694      	mov	ip, r2
    dd06:	44bc      	add	ip, r7
    dd08:	4463      	add	r3, ip
    dd0a:	781a      	ldrb	r2, [r3, #0]
    dd0c:	4b2a      	ldr	r3, [pc, #168]	; (ddb8 <ComputeCmacB1+0x140>)
    dd0e:	218c      	movs	r1, #140	; 0x8c
    dd10:	0049      	lsls	r1, r1, #1
    dd12:	468c      	mov	ip, r1
    dd14:	44bc      	add	ip, r7
    dd16:	4463      	add	r3, ip
    dd18:	7819      	ldrb	r1, [r3, #0]
    dd1a:	4b26      	ldr	r3, [pc, #152]	; (ddb4 <ComputeCmacB1+0x13c>)
    dd1c:	208c      	movs	r0, #140	; 0x8c
    dd1e:	0040      	lsls	r0, r0, #1
    dd20:	4684      	mov	ip, r0
    dd22:	44bc      	add	ip, r7
    dd24:	4463      	add	r3, ip
    dd26:	8818      	ldrh	r0, [r3, #0]
    dd28:	2308      	movs	r3, #8
    dd2a:	18fb      	adds	r3, r7, r3
    dd2c:	9303      	str	r3, [sp, #12]
    dd2e:	239a      	movs	r3, #154	; 0x9a
    dd30:	005b      	lsls	r3, r3, #1
    dd32:	18fb      	adds	r3, r7, r3
    dd34:	681b      	ldr	r3, [r3, #0]
    dd36:	9302      	str	r3, [sp, #8]
    dd38:	2398      	movs	r3, #152	; 0x98
    dd3a:	005b      	lsls	r3, r3, #1
    dd3c:	18fb      	adds	r3, r7, r3
    dd3e:	681b      	ldr	r3, [r3, #0]
    dd40:	9301      	str	r3, [sp, #4]
    dd42:	2396      	movs	r3, #150	; 0x96
    dd44:	005b      	lsls	r3, r3, #1
    dd46:	18fb      	adds	r3, r7, r3
    dd48:	781b      	ldrb	r3, [r3, #0]
    dd4a:	9300      	str	r3, [sp, #0]
    dd4c:	0023      	movs	r3, r4
    dd4e:	4c1d      	ldr	r4, [pc, #116]	; (ddc4 <ComputeCmacB1+0x14c>)
    dd50:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    dd52:	2308      	movs	r3, #8
    dd54:	18fb      	adds	r3, r7, r3
    dd56:	3310      	adds	r3, #16
    dd58:	4a16      	ldr	r2, [pc, #88]	; (ddb4 <ComputeCmacB1+0x13c>)
    dd5a:	218c      	movs	r1, #140	; 0x8c
    dd5c:	0049      	lsls	r1, r1, #1
    dd5e:	468c      	mov	ip, r1
    dd60:	44bc      	add	ip, r7
    dd62:	4462      	add	r2, ip
    dd64:	8812      	ldrh	r2, [r2, #0]
    dd66:	6879      	ldr	r1, [r7, #4]
    dd68:	0018      	movs	r0, r3
    dd6a:	4b17      	ldr	r3, [pc, #92]	; (ddc8 <ComputeCmacB1+0x150>)
    dd6c:	4798      	blx	r3

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    dd6e:	4b11      	ldr	r3, [pc, #68]	; (ddb4 <ComputeCmacB1+0x13c>)
    dd70:	228c      	movs	r2, #140	; 0x8c
    dd72:	0052      	lsls	r2, r2, #1
    dd74:	4694      	mov	ip, r2
    dd76:	44bc      	add	ip, r7
    dd78:	4463      	add	r3, ip
    dd7a:	881b      	ldrh	r3, [r3, #0]
    dd7c:	3310      	adds	r3, #16
    dd7e:	b299      	uxth	r1, r3
    dd80:	239c      	movs	r3, #156	; 0x9c
    dd82:	005b      	lsls	r3, r3, #1
    dd84:	18fb      	adds	r3, r7, r3
    dd86:	681c      	ldr	r4, [r3, #0]
    dd88:	4b0b      	ldr	r3, [pc, #44]	; (ddb8 <ComputeCmacB1+0x140>)
    dd8a:	228c      	movs	r2, #140	; 0x8c
    dd8c:	0052      	lsls	r2, r2, #1
    dd8e:	4694      	mov	ip, r2
    dd90:	44bc      	add	ip, r7
    dd92:	4463      	add	r3, ip
    dd94:	781a      	ldrb	r2, [r3, #0]
    dd96:	2308      	movs	r3, #8
    dd98:	18f8      	adds	r0, r7, r3
    dd9a:	0023      	movs	r3, r4
    dd9c:	4c0b      	ldr	r4, [pc, #44]	; (ddcc <ComputeCmacB1+0x154>)
    dd9e:	47a0      	blx	r4
    dda0:	1e03      	subs	r3, r0, #0
    dda2:	d001      	beq.n	dda8 <ComputeCmacB1+0x130>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    dda4:	230c      	movs	r3, #12
    dda6:	e000      	b.n	ddaa <ComputeCmacB1+0x132>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    dda8:	2300      	movs	r3, #0
}
    ddaa:	0018      	movs	r0, r3
    ddac:	46bd      	mov	sp, r7
    ddae:	b047      	add	sp, #284	; 0x11c
    ddb0:	bd90      	pop	{r4, r7, pc}
    ddb2:	46c0      	nop			; (mov r8, r8)
    ddb4:	fffffeea 	.word	0xfffffeea
    ddb8:	fffffee9 	.word	0xfffffee9
    ddbc:	fffffee8 	.word	0xfffffee8
    ddc0:	000043b1 	.word	0x000043b1
    ddc4:	0000db5d 	.word	0x0000db5d
    ddc8:	00004339 	.word	0x00004339
    ddcc:	00016739 	.word	0x00016739

0000ddd0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    ddd0:	b580      	push	{r7, lr}
    ddd2:	b084      	sub	sp, #16
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	0002      	movs	r2, r0
    ddd8:	6039      	str	r1, [r7, #0]
    ddda:	1dfb      	adds	r3, r7, #7
    dddc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
    ddde:	230f      	movs	r3, #15
    dde0:	18fb      	adds	r3, r7, r3
    dde2:	2200      	movs	r2, #0
    dde4:	701a      	strb	r2, [r3, #0]
    dde6:	e01a      	b.n	de1e <GetKeyAddrItem+0x4e>
    {
        if( KeyAddrList[i].AddrID == addrID )
    dde8:	230f      	movs	r3, #15
    ddea:	18fb      	adds	r3, r7, r3
    ddec:	781a      	ldrb	r2, [r3, #0]
    ddee:	4b11      	ldr	r3, [pc, #68]	; (de34 <GetKeyAddrItem+0x64>)
    ddf0:	0092      	lsls	r2, r2, #2
    ddf2:	5cd3      	ldrb	r3, [r2, r3]
    ddf4:	1dfa      	adds	r2, r7, #7
    ddf6:	7812      	ldrb	r2, [r2, #0]
    ddf8:	429a      	cmp	r2, r3
    ddfa:	d109      	bne.n	de10 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
    ddfc:	230f      	movs	r3, #15
    ddfe:	18fb      	adds	r3, r7, r3
    de00:	781b      	ldrb	r3, [r3, #0]
    de02:	009a      	lsls	r2, r3, #2
    de04:	4b0b      	ldr	r3, [pc, #44]	; (de34 <GetKeyAddrItem+0x64>)
    de06:	18d2      	adds	r2, r2, r3
    de08:	683b      	ldr	r3, [r7, #0]
    de0a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
    de0c:	2300      	movs	r3, #0
    de0e:	e00c      	b.n	de2a <GetKeyAddrItem+0x5a>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
    de10:	230f      	movs	r3, #15
    de12:	18fb      	adds	r3, r7, r3
    de14:	781a      	ldrb	r2, [r3, #0]
    de16:	230f      	movs	r3, #15
    de18:	18fb      	adds	r3, r7, r3
    de1a:	3201      	adds	r2, #1
    de1c:	701a      	strb	r2, [r3, #0]
    de1e:	230f      	movs	r3, #15
    de20:	18fb      	adds	r3, r7, r3
    de22:	781b      	ldrb	r3, [r3, #0]
    de24:	2b04      	cmp	r3, #4
    de26:	d9df      	bls.n	dde8 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
    de28:	2309      	movs	r3, #9
}
    de2a:	0018      	movs	r0, r3
    de2c:	46bd      	mov	sp, r7
    de2e:	b004      	add	sp, #16
    de30:	bd80      	pop	{r7, pc}
    de32:	46c0      	nop			; (mov r8, r8)
    de34:	200000ec 	.word	0x200000ec

0000de38 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
    de38:	b590      	push	{r4, r7, lr}
    de3a:	b089      	sub	sp, #36	; 0x24
    de3c:	af00      	add	r7, sp, #0
    de3e:	60b9      	str	r1, [r7, #8]
    de40:	607a      	str	r2, [r7, #4]
    de42:	603b      	str	r3, [r7, #0]
    de44:	230f      	movs	r3, #15
    de46:	18fb      	adds	r3, r7, r3
    de48:	1c02      	adds	r2, r0, #0
    de4a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
    de4c:	68bb      	ldr	r3, [r7, #8]
    de4e:	2b00      	cmp	r3, #0
    de50:	d005      	beq.n	de5e <DeriveSessionKey10x+0x26>
    de52:	687b      	ldr	r3, [r7, #4]
    de54:	2b00      	cmp	r3, #0
    de56:	d002      	beq.n	de5e <DeriveSessionKey10x+0x26>
    de58:	683b      	ldr	r3, [r7, #0]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d101      	bne.n	de62 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    de5e:	2307      	movs	r3, #7
    de60:	e045      	b.n	deee <DeriveSessionKey10x+0xb6>
    }

    uint8_t compBase[16] = { 0 };
    de62:	2310      	movs	r3, #16
    de64:	18fb      	adds	r3, r7, r3
    de66:	0018      	movs	r0, r3
    de68:	2310      	movs	r3, #16
    de6a:	001a      	movs	r2, r3
    de6c:	2100      	movs	r1, #0
    de6e:	4b22      	ldr	r3, [pc, #136]	; (def8 <DeriveSessionKey10x+0xc0>)
    de70:	4798      	blx	r3

    switch( keyID )
    de72:	230f      	movs	r3, #15
    de74:	18fb      	adds	r3, r7, r3
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	2b04      	cmp	r3, #4
    de7a:	db0e      	blt.n	de9a <DeriveSessionKey10x+0x62>
    de7c:	2b06      	cmp	r3, #6
    de7e:	dd02      	ble.n	de86 <DeriveSessionKey10x+0x4e>
    de80:	2b07      	cmp	r3, #7
    de82:	d005      	beq.n	de90 <DeriveSessionKey10x+0x58>
    de84:	e009      	b.n	de9a <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
    de86:	2310      	movs	r3, #16
    de88:	18fb      	adds	r3, r7, r3
    de8a:	2201      	movs	r2, #1
    de8c:	701a      	strb	r2, [r3, #0]
            break;
    de8e:	e006      	b.n	de9e <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
    de90:	2310      	movs	r3, #16
    de92:	18fb      	adds	r3, r7, r3
    de94:	2202      	movs	r2, #2
    de96:	701a      	strb	r2, [r3, #0]
            break;
    de98:	e001      	b.n	de9e <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    de9a:	2308      	movs	r3, #8
    de9c:	e027      	b.n	deee <DeriveSessionKey10x+0xb6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
    de9e:	2310      	movs	r3, #16
    dea0:	18fb      	adds	r3, r7, r3
    dea2:	3301      	adds	r3, #1
    dea4:	68b9      	ldr	r1, [r7, #8]
    dea6:	2203      	movs	r2, #3
    dea8:	0018      	movs	r0, r3
    deaa:	4b14      	ldr	r3, [pc, #80]	; (defc <DeriveSessionKey10x+0xc4>)
    deac:	4798      	blx	r3
    memcpy1( compBase + 4, netID, 3 );
    deae:	2310      	movs	r3, #16
    deb0:	18fb      	adds	r3, r7, r3
    deb2:	3304      	adds	r3, #4
    deb4:	6879      	ldr	r1, [r7, #4]
    deb6:	2203      	movs	r2, #3
    deb8:	0018      	movs	r0, r3
    deba:	4b10      	ldr	r3, [pc, #64]	; (defc <DeriveSessionKey10x+0xc4>)
    debc:	4798      	blx	r3
    memcpy1( compBase + 7, devNonce, 2 );
    debe:	2310      	movs	r3, #16
    dec0:	18fb      	adds	r3, r7, r3
    dec2:	3307      	adds	r3, #7
    dec4:	6839      	ldr	r1, [r7, #0]
    dec6:	2202      	movs	r2, #2
    dec8:	0018      	movs	r0, r3
    deca:	4b0c      	ldr	r3, [pc, #48]	; (defc <DeriveSessionKey10x+0xc4>)
    decc:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    dece:	230f      	movs	r3, #15
    ded0:	18fb      	adds	r3, r7, r3
    ded2:	781a      	ldrb	r2, [r3, #0]
    ded4:	2310      	movs	r3, #16
    ded6:	18f9      	adds	r1, r7, r3
    ded8:	4b09      	ldr	r3, [pc, #36]	; (df00 <DeriveSessionKey10x+0xc8>)
    deda:	6818      	ldr	r0, [r3, #0]
    dedc:	0013      	movs	r3, r2
    dede:	2201      	movs	r2, #1
    dee0:	4c08      	ldr	r4, [pc, #32]	; (df04 <DeriveSessionKey10x+0xcc>)
    dee2:	47a0      	blx	r4
    dee4:	1e03      	subs	r3, r0, #0
    dee6:	d001      	beq.n	deec <DeriveSessionKey10x+0xb4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    dee8:	230c      	movs	r3, #12
    deea:	e000      	b.n	deee <DeriveSessionKey10x+0xb6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    deec:	2300      	movs	r3, #0
}
    deee:	0018      	movs	r0, r3
    def0:	46bd      	mov	sp, r7
    def2:	b009      	add	sp, #36	; 0x24
    def4:	bd90      	pop	{r4, r7, pc}
    def6:	46c0      	nop			; (mov r8, r8)
    def8:	00019be9 	.word	0x00019be9
    defc:	00004339 	.word	0x00004339
    df00:	200014c4 	.word	0x200014c4
    df04:	00016901 	.word	0x00016901

0000df08 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
    df08:	b590      	push	{r4, r7, lr}
    df0a:	b08b      	sub	sp, #44	; 0x2c
    df0c:	af00      	add	r7, sp, #0
    df0e:	60b9      	str	r1, [r7, #8]
    df10:	607a      	str	r2, [r7, #4]
    df12:	603b      	str	r3, [r7, #0]
    df14:	230f      	movs	r3, #15
    df16:	18fb      	adds	r3, r7, r3
    df18:	1c02      	adds	r2, r0, #0
    df1a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
    df1c:	68bb      	ldr	r3, [r7, #8]
    df1e:	2b00      	cmp	r3, #0
    df20:	d005      	beq.n	df2e <DeriveSessionKey11x+0x26>
    df22:	687b      	ldr	r3, [r7, #4]
    df24:	2b00      	cmp	r3, #0
    df26:	d002      	beq.n	df2e <DeriveSessionKey11x+0x26>
    df28:	683b      	ldr	r3, [r7, #0]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d101      	bne.n	df32 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    df2e:	2307      	movs	r3, #7
    df30:	e05d      	b.n	dfee <DeriveSessionKey11x+0xe6>
    }

    uint8_t compBase[16] = { 0 };
    df32:	2314      	movs	r3, #20
    df34:	18fb      	adds	r3, r7, r3
    df36:	0018      	movs	r0, r3
    df38:	2310      	movs	r3, #16
    df3a:	001a      	movs	r2, r3
    df3c:	2100      	movs	r1, #0
    df3e:	4b2e      	ldr	r3, [pc, #184]	; (dff8 <DeriveSessionKey11x+0xf0>)
    df40:	4798      	blx	r3
    KeyIdentifier_t rootKeyId = NWK_KEY;
    df42:	2327      	movs	r3, #39	; 0x27
    df44:	18fb      	adds	r3, r7, r3
    df46:	2201      	movs	r2, #1
    df48:	701a      	strb	r2, [r3, #0]

    switch( keyID )
    df4a:	230f      	movs	r3, #15
    df4c:	18fb      	adds	r3, r7, r3
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	2b05      	cmp	r3, #5
    df52:	d00d      	beq.n	df70 <DeriveSessionKey11x+0x68>
    df54:	dc02      	bgt.n	df5c <DeriveSessionKey11x+0x54>
    df56:	2b04      	cmp	r3, #4
    df58:	d005      	beq.n	df66 <DeriveSessionKey11x+0x5e>
    df5a:	e01c      	b.n	df96 <DeriveSessionKey11x+0x8e>
    df5c:	2b06      	cmp	r3, #6
    df5e:	d00c      	beq.n	df7a <DeriveSessionKey11x+0x72>
    df60:	2b07      	cmp	r3, #7
    df62:	d00f      	beq.n	df84 <DeriveSessionKey11x+0x7c>
    df64:	e017      	b.n	df96 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
    df66:	2314      	movs	r3, #20
    df68:	18fb      	adds	r3, r7, r3
    df6a:	2201      	movs	r2, #1
    df6c:	701a      	strb	r2, [r3, #0]
            break;
    df6e:	e014      	b.n	df9a <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
    df70:	2314      	movs	r3, #20
    df72:	18fb      	adds	r3, r7, r3
    df74:	2203      	movs	r2, #3
    df76:	701a      	strb	r2, [r3, #0]
            break;
    df78:	e00f      	b.n	df9a <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
    df7a:	2314      	movs	r3, #20
    df7c:	18fb      	adds	r3, r7, r3
    df7e:	2204      	movs	r2, #4
    df80:	701a      	strb	r2, [r3, #0]
            break;
    df82:	e00a      	b.n	df9a <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
    df84:	2327      	movs	r3, #39	; 0x27
    df86:	18fb      	adds	r3, r7, r3
    df88:	2200      	movs	r2, #0
    df8a:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
    df8c:	2314      	movs	r3, #20
    df8e:	18fb      	adds	r3, r7, r3
    df90:	2202      	movs	r2, #2
    df92:	701a      	strb	r2, [r3, #0]
            break;
    df94:	e001      	b.n	df9a <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    df96:	2308      	movs	r3, #8
    df98:	e029      	b.n	dfee <DeriveSessionKey11x+0xe6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
    df9a:	2314      	movs	r3, #20
    df9c:	18fb      	adds	r3, r7, r3
    df9e:	3301      	adds	r3, #1
    dfa0:	68b9      	ldr	r1, [r7, #8]
    dfa2:	2203      	movs	r2, #3
    dfa4:	0018      	movs	r0, r3
    dfa6:	4b15      	ldr	r3, [pc, #84]	; (dffc <DeriveSessionKey11x+0xf4>)
    dfa8:	4798      	blx	r3
    memcpyr( compBase + 4, joinEUI, 8 );
    dfaa:	2314      	movs	r3, #20
    dfac:	18fb      	adds	r3, r7, r3
    dfae:	3304      	adds	r3, #4
    dfb0:	6879      	ldr	r1, [r7, #4]
    dfb2:	2208      	movs	r2, #8
    dfb4:	0018      	movs	r0, r3
    dfb6:	4b12      	ldr	r3, [pc, #72]	; (e000 <DeriveSessionKey11x+0xf8>)
    dfb8:	4798      	blx	r3
    memcpy1( compBase + 12, devNonce, 2 );
    dfba:	2314      	movs	r3, #20
    dfbc:	18fb      	adds	r3, r7, r3
    dfbe:	330c      	adds	r3, #12
    dfc0:	6839      	ldr	r1, [r7, #0]
    dfc2:	2202      	movs	r2, #2
    dfc4:	0018      	movs	r0, r3
    dfc6:	4b0d      	ldr	r3, [pc, #52]	; (dffc <DeriveSessionKey11x+0xf4>)
    dfc8:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
    dfca:	230f      	movs	r3, #15
    dfcc:	18fb      	adds	r3, r7, r3
    dfce:	781c      	ldrb	r4, [r3, #0]
    dfd0:	2327      	movs	r3, #39	; 0x27
    dfd2:	18fb      	adds	r3, r7, r3
    dfd4:	781a      	ldrb	r2, [r3, #0]
    dfd6:	2314      	movs	r3, #20
    dfd8:	18f9      	adds	r1, r7, r3
    dfda:	4b0a      	ldr	r3, [pc, #40]	; (e004 <DeriveSessionKey11x+0xfc>)
    dfdc:	6818      	ldr	r0, [r3, #0]
    dfde:	0023      	movs	r3, r4
    dfe0:	4c09      	ldr	r4, [pc, #36]	; (e008 <DeriveSessionKey11x+0x100>)
    dfe2:	47a0      	blx	r4
    dfe4:	1e03      	subs	r3, r0, #0
    dfe6:	d001      	beq.n	dfec <DeriveSessionKey11x+0xe4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    dfe8:	230c      	movs	r3, #12
    dfea:	e000      	b.n	dfee <DeriveSessionKey11x+0xe6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    dfec:	2300      	movs	r3, #0
}
    dfee:	0018      	movs	r0, r3
    dff0:	46bd      	mov	sp, r7
    dff2:	b00b      	add	sp, #44	; 0x2c
    dff4:	bd90      	pop	{r4, r7, pc}
    dff6:	46c0      	nop			; (mov r8, r8)
    dff8:	00019be9 	.word	0x00019be9
    dffc:	00004339 	.word	0x00004339
    e000:	0000436f 	.word	0x0000436f
    e004:	200014c4 	.word	0x200014c4
    e008:	00016901 	.word	0x00016901

0000e00c <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
    e00c:	b590      	push	{r4, r7, lr}
    e00e:	b087      	sub	sp, #28
    e010:	af00      	add	r7, sp, #0
    e012:	0002      	movs	r2, r0
    e014:	6039      	str	r1, [r7, #0]
    e016:	1dfb      	adds	r3, r7, #7
    e018:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
    e01a:	683b      	ldr	r3, [r7, #0]
    e01c:	2b00      	cmp	r3, #0
    e01e:	d101      	bne.n	e024 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e020:	2307      	movs	r3, #7
    e022:	e031      	b.n	e088 <DeriveLifeTimeSessionKey+0x7c>
    }

    uint8_t compBase[16] = { 0 };
    e024:	2308      	movs	r3, #8
    e026:	18fb      	adds	r3, r7, r3
    e028:	0018      	movs	r0, r3
    e02a:	2310      	movs	r3, #16
    e02c:	001a      	movs	r2, r3
    e02e:	2100      	movs	r1, #0
    e030:	4b17      	ldr	r3, [pc, #92]	; (e090 <DeriveLifeTimeSessionKey+0x84>)
    e032:	4798      	blx	r3

    switch( keyID )
    e034:	1dfb      	adds	r3, r7, #7
    e036:	781b      	ldrb	r3, [r3, #0]
    e038:	2b02      	cmp	r3, #2
    e03a:	d002      	beq.n	e042 <DeriveLifeTimeSessionKey+0x36>
    e03c:	2b03      	cmp	r3, #3
    e03e:	d005      	beq.n	e04c <DeriveLifeTimeSessionKey+0x40>
    e040:	e009      	b.n	e056 <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
    e042:	2308      	movs	r3, #8
    e044:	18fb      	adds	r3, r7, r3
    e046:	2206      	movs	r2, #6
    e048:	701a      	strb	r2, [r3, #0]
            break;
    e04a:	e006      	b.n	e05a <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
    e04c:	2308      	movs	r3, #8
    e04e:	18fb      	adds	r3, r7, r3
    e050:	2205      	movs	r2, #5
    e052:	701a      	strb	r2, [r3, #0]
            break;
    e054:	e001      	b.n	e05a <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    e056:	2308      	movs	r3, #8
    e058:	e016      	b.n	e088 <DeriveLifeTimeSessionKey+0x7c>
    }

    memcpyr( compBase + 1, devEUI, 8 );
    e05a:	2308      	movs	r3, #8
    e05c:	18fb      	adds	r3, r7, r3
    e05e:	3301      	adds	r3, #1
    e060:	6839      	ldr	r1, [r7, #0]
    e062:	2208      	movs	r2, #8
    e064:	0018      	movs	r0, r3
    e066:	4b0b      	ldr	r3, [pc, #44]	; (e094 <DeriveLifeTimeSessionKey+0x88>)
    e068:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    e06a:	1dfb      	adds	r3, r7, #7
    e06c:	781a      	ldrb	r2, [r3, #0]
    e06e:	2308      	movs	r3, #8
    e070:	18f9      	adds	r1, r7, r3
    e072:	4b09      	ldr	r3, [pc, #36]	; (e098 <DeriveLifeTimeSessionKey+0x8c>)
    e074:	6818      	ldr	r0, [r3, #0]
    e076:	0013      	movs	r3, r2
    e078:	2201      	movs	r2, #1
    e07a:	4c08      	ldr	r4, [pc, #32]	; (e09c <DeriveLifeTimeSessionKey+0x90>)
    e07c:	47a0      	blx	r4
    e07e:	1e03      	subs	r3, r0, #0
    e080:	d001      	beq.n	e086 <DeriveLifeTimeSessionKey+0x7a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    e082:	230c      	movs	r3, #12
    e084:	e000      	b.n	e088 <DeriveLifeTimeSessionKey+0x7c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    e086:	2300      	movs	r3, #0
}
    e088:	0018      	movs	r0, r3
    e08a:	46bd      	mov	sp, r7
    e08c:	b007      	add	sp, #28
    e08e:	bd90      	pop	{r4, r7, pc}
    e090:	00019be9 	.word	0x00019be9
    e094:	0000436f 	.word	0x0000436f
    e098:	200014c4 	.word	0x200014c4
    e09c:	00016901 	.word	0x00016901

0000e0a0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    e0a0:	b580      	push	{r7, lr}
    e0a2:	b084      	sub	sp, #16
    e0a4:	af00      	add	r7, sp, #0
    e0a6:	0002      	movs	r2, r0
    e0a8:	6039      	str	r1, [r7, #0]
    e0aa:	1dfb      	adds	r3, r7, #7
    e0ac:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
    e0ae:	2300      	movs	r3, #0
    e0b0:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
    e0b2:	1dfb      	adds	r3, r7, #7
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	2b07      	cmp	r3, #7
    e0b8:	d83b      	bhi.n	e132 <CheckFCntDown+0x92>
    e0ba:	009a      	lsls	r2, r3, #2
    e0bc:	4b25      	ldr	r3, [pc, #148]	; (e154 <CheckFCntDown+0xb4>)
    e0be:	18d3      	adds	r3, r2, r3
    e0c0:	681b      	ldr	r3, [r3, #0]
    e0c2:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
    e0c4:	2300      	movs	r3, #0
    e0c6:	e040      	b.n	e14a <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
    e0c8:	4b23      	ldr	r3, [pc, #140]	; (e158 <CheckFCntDown+0xb8>)
    e0ca:	689b      	ldr	r3, [r3, #8]
    e0cc:	68db      	ldr	r3, [r3, #12]
    e0ce:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
    e0d0:	4b21      	ldr	r3, [pc, #132]	; (e158 <CheckFCntDown+0xb8>)
    e0d2:	689b      	ldr	r3, [r3, #8]
    e0d4:	4a20      	ldr	r2, [pc, #128]	; (e158 <CheckFCntDown+0xb8>)
    e0d6:	6892      	ldr	r2, [r2, #8]
    e0d8:	320c      	adds	r2, #12
    e0da:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    e0dc:	e02b      	b.n	e136 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
    e0de:	4b1e      	ldr	r3, [pc, #120]	; (e158 <CheckFCntDown+0xb8>)
    e0e0:	689b      	ldr	r3, [r3, #8]
    e0e2:	691b      	ldr	r3, [r3, #16]
    e0e4:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
    e0e6:	4b1c      	ldr	r3, [pc, #112]	; (e158 <CheckFCntDown+0xb8>)
    e0e8:	689b      	ldr	r3, [r3, #8]
    e0ea:	4a1b      	ldr	r2, [pc, #108]	; (e158 <CheckFCntDown+0xb8>)
    e0ec:	6892      	ldr	r2, [r2, #8]
    e0ee:	3210      	adds	r2, #16
    e0f0:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    e0f2:	e020      	b.n	e136 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
    e0f4:	4b18      	ldr	r3, [pc, #96]	; (e158 <CheckFCntDown+0xb8>)
    e0f6:	689b      	ldr	r3, [r3, #8]
    e0f8:	695b      	ldr	r3, [r3, #20]
    e0fa:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    e0fc:	4b16      	ldr	r3, [pc, #88]	; (e158 <CheckFCntDown+0xb8>)
    e0fe:	689b      	ldr	r3, [r3, #8]
    e100:	4a15      	ldr	r2, [pc, #84]	; (e158 <CheckFCntDown+0xb8>)
    e102:	6892      	ldr	r2, [r2, #8]
    e104:	3214      	adds	r2, #20
    e106:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    e108:	e015      	b.n	e136 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
    e10a:	4b13      	ldr	r3, [pc, #76]	; (e158 <CheckFCntDown+0xb8>)
    e10c:	689b      	ldr	r3, [r3, #8]
    e10e:	699b      	ldr	r3, [r3, #24]
    e110:	60fb      	str	r3, [r7, #12]
            break;
    e112:	e010      	b.n	e136 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
    e114:	4b10      	ldr	r3, [pc, #64]	; (e158 <CheckFCntDown+0xb8>)
    e116:	689b      	ldr	r3, [r3, #8]
    e118:	69db      	ldr	r3, [r3, #28]
    e11a:	60fb      	str	r3, [r7, #12]
            break;
    e11c:	e00b      	b.n	e136 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
    e11e:	4b0e      	ldr	r3, [pc, #56]	; (e158 <CheckFCntDown+0xb8>)
    e120:	689b      	ldr	r3, [r3, #8]
    e122:	6a1b      	ldr	r3, [r3, #32]
    e124:	60fb      	str	r3, [r7, #12]
            break;
    e126:	e006      	b.n	e136 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
    e128:	4b0b      	ldr	r3, [pc, #44]	; (e158 <CheckFCntDown+0xb8>)
    e12a:	689b      	ldr	r3, [r3, #8]
    e12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e12e:	60fb      	str	r3, [r7, #12]
            break;
    e130:	e001      	b.n	e136 <CheckFCntDown+0x96>
        default:
            return false;
    e132:	2300      	movs	r3, #0
    e134:	e009      	b.n	e14a <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
    e136:	683a      	ldr	r2, [r7, #0]
    e138:	68fb      	ldr	r3, [r7, #12]
    e13a:	429a      	cmp	r2, r3
    e13c:	d802      	bhi.n	e144 <CheckFCntDown+0xa4>
    e13e:	68fb      	ldr	r3, [r7, #12]
    e140:	3301      	adds	r3, #1
    e142:	d101      	bne.n	e148 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
    e144:	2301      	movs	r3, #1
    e146:	e000      	b.n	e14a <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
    e148:	2300      	movs	r3, #0
    }
}
    e14a:	0018      	movs	r0, r3
    e14c:	46bd      	mov	sp, r7
    e14e:	b004      	add	sp, #16
    e150:	bd80      	pop	{r7, pc}
    e152:	46c0      	nop			; (mov r8, r8)
    e154:	0001f610 	.word	0x0001f610
    e158:	200014c4 	.word	0x200014c4

0000e15c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    e15c:	b580      	push	{r7, lr}
    e15e:	b082      	sub	sp, #8
    e160:	af00      	add	r7, sp, #0
    e162:	0002      	movs	r2, r0
    e164:	6039      	str	r1, [r7, #0]
    e166:	1dfb      	adds	r3, r7, #7
    e168:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
    e16a:	1dfb      	adds	r3, r7, #7
    e16c:	781b      	ldrb	r3, [r3, #0]
    e16e:	2b07      	cmp	r3, #7
    e170:	d827      	bhi.n	e1c2 <UpdateFCntDown+0x66>
    e172:	009a      	lsls	r2, r3, #2
    e174:	4b17      	ldr	r3, [pc, #92]	; (e1d4 <UpdateFCntDown+0x78>)
    e176:	18d3      	adds	r3, r2, r3
    e178:	681b      	ldr	r3, [r3, #0]
    e17a:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
    e17c:	4b16      	ldr	r3, [pc, #88]	; (e1d8 <UpdateFCntDown+0x7c>)
    e17e:	689b      	ldr	r3, [r3, #8]
    e180:	683a      	ldr	r2, [r7, #0]
    e182:	60da      	str	r2, [r3, #12]
            break;
    e184:	e01e      	b.n	e1c4 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
    e186:	4b14      	ldr	r3, [pc, #80]	; (e1d8 <UpdateFCntDown+0x7c>)
    e188:	689b      	ldr	r3, [r3, #8]
    e18a:	683a      	ldr	r2, [r7, #0]
    e18c:	611a      	str	r2, [r3, #16]
            break;
    e18e:	e019      	b.n	e1c4 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
    e190:	4b11      	ldr	r3, [pc, #68]	; (e1d8 <UpdateFCntDown+0x7c>)
    e192:	689b      	ldr	r3, [r3, #8]
    e194:	683a      	ldr	r2, [r7, #0]
    e196:	615a      	str	r2, [r3, #20]
            break;
    e198:	e014      	b.n	e1c4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
    e19a:	4b0f      	ldr	r3, [pc, #60]	; (e1d8 <UpdateFCntDown+0x7c>)
    e19c:	689b      	ldr	r3, [r3, #8]
    e19e:	683a      	ldr	r2, [r7, #0]
    e1a0:	619a      	str	r2, [r3, #24]
            break;
    e1a2:	e00f      	b.n	e1c4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
    e1a4:	4b0c      	ldr	r3, [pc, #48]	; (e1d8 <UpdateFCntDown+0x7c>)
    e1a6:	689b      	ldr	r3, [r3, #8]
    e1a8:	683a      	ldr	r2, [r7, #0]
    e1aa:	61da      	str	r2, [r3, #28]
            break;
    e1ac:	e00a      	b.n	e1c4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
    e1ae:	4b0a      	ldr	r3, [pc, #40]	; (e1d8 <UpdateFCntDown+0x7c>)
    e1b0:	689b      	ldr	r3, [r3, #8]
    e1b2:	683a      	ldr	r2, [r7, #0]
    e1b4:	621a      	str	r2, [r3, #32]
            break;
    e1b6:	e005      	b.n	e1c4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
    e1b8:	4b07      	ldr	r3, [pc, #28]	; (e1d8 <UpdateFCntDown+0x7c>)
    e1ba:	689b      	ldr	r3, [r3, #8]
    e1bc:	683a      	ldr	r2, [r7, #0]
    e1be:	625a      	str	r2, [r3, #36]	; 0x24
            break;
    e1c0:	e000      	b.n	e1c4 <UpdateFCntDown+0x68>
        default:
            break;
    e1c2:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
    e1c4:	4b04      	ldr	r3, [pc, #16]	; (e1d8 <UpdateFCntDown+0x7c>)
    e1c6:	68db      	ldr	r3, [r3, #12]
    e1c8:	4798      	blx	r3
}
    e1ca:	46c0      	nop			; (mov r8, r8)
    e1cc:	46bd      	mov	sp, r7
    e1ce:	b002      	add	sp, #8
    e1d0:	bd80      	pop	{r7, pc}
    e1d2:	46c0      	nop			; (mov r8, r8)
    e1d4:	0001f630 	.word	0x0001f630
    e1d8:	200014c4 	.word	0x200014c4

0000e1dc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
    e1dc:	b580      	push	{r7, lr}
    e1de:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
    e1e0:	4b16      	ldr	r3, [pc, #88]	; (e23c <ResetFCnts+0x60>)
    e1e2:	689b      	ldr	r3, [r3, #8]
    e1e4:	2200      	movs	r2, #0
    e1e6:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    e1e8:	4b14      	ldr	r3, [pc, #80]	; (e23c <ResetFCnts+0x60>)
    e1ea:	689b      	ldr	r3, [r3, #8]
    e1ec:	2201      	movs	r2, #1
    e1ee:	4252      	negs	r2, r2
    e1f0:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    e1f2:	4b12      	ldr	r3, [pc, #72]	; (e23c <ResetFCnts+0x60>)
    e1f4:	689b      	ldr	r3, [r3, #8]
    e1f6:	2201      	movs	r2, #1
    e1f8:	4252      	negs	r2, r2
    e1fa:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    e1fc:	4b0f      	ldr	r3, [pc, #60]	; (e23c <ResetFCnts+0x60>)
    e1fe:	689b      	ldr	r3, [r3, #8]
    e200:	2201      	movs	r2, #1
    e202:	4252      	negs	r2, r2
    e204:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    e206:	4b0d      	ldr	r3, [pc, #52]	; (e23c <ResetFCnts+0x60>)
    e208:	689b      	ldr	r3, [r3, #8]
    e20a:	2201      	movs	r2, #1
    e20c:	4252      	negs	r2, r2
    e20e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    e210:	4b0a      	ldr	r3, [pc, #40]	; (e23c <ResetFCnts+0x60>)
    e212:	689b      	ldr	r3, [r3, #8]
    e214:	2201      	movs	r2, #1
    e216:	4252      	negs	r2, r2
    e218:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    e21a:	4b08      	ldr	r3, [pc, #32]	; (e23c <ResetFCnts+0x60>)
    e21c:	689b      	ldr	r3, [r3, #8]
    e21e:	2201      	movs	r2, #1
    e220:	4252      	negs	r2, r2
    e222:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    e224:	4b05      	ldr	r3, [pc, #20]	; (e23c <ResetFCnts+0x60>)
    e226:	689b      	ldr	r3, [r3, #8]
    e228:	2201      	movs	r2, #1
    e22a:	4252      	negs	r2, r2
    e22c:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
    e22e:	4b03      	ldr	r3, [pc, #12]	; (e23c <ResetFCnts+0x60>)
    e230:	68db      	ldr	r3, [r3, #12]
    e232:	4798      	blx	r3
}
    e234:	46c0      	nop			; (mov r8, r8)
    e236:	46bd      	mov	sp, r7
    e238:	bd80      	pop	{r7, pc}
    e23a:	46c0      	nop			; (mov r8, r8)
    e23c:	200014c4 	.word	0x200014c4

0000e240 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    e240:	b580      	push	{r7, lr}
    e242:	af00      	add	r7, sp, #0
    return;
    e244:	46c0      	nop			; (mov r8, r8)
}
    e246:	46bd      	mov	sp, r7
    e248:	bd80      	pop	{r7, pc}
	...

0000e24c <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
    e24c:	b580      	push	{r7, lr}
    e24e:	b082      	sub	sp, #8
    e250:	af00      	add	r7, sp, #0
    e252:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
    e254:	4b22      	ldr	r3, [pc, #136]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e256:	2201      	movs	r2, #1
    e258:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
    e25a:	4b21      	ldr	r3, [pc, #132]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e25c:	2201      	movs	r2, #1
    e25e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
    e260:	4b1f      	ldr	r3, [pc, #124]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e262:	2200      	movs	r2, #0
    e264:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
    e266:	4b1e      	ldr	r3, [pc, #120]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e268:	2200      	movs	r2, #0
    e26a:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
    e26c:	4b1c      	ldr	r3, [pc, #112]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e26e:	2200      	movs	r2, #0
    e270:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
    e272:	4b1b      	ldr	r3, [pc, #108]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e274:	4a1b      	ldr	r2, [pc, #108]	; (e2e4 <LoRaMacCryptoInit+0x98>)
    e276:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
    e278:	687b      	ldr	r3, [r7, #4]
    e27a:	2b00      	cmp	r3, #0
    e27c:	d003      	beq.n	e286 <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
    e27e:	4b18      	ldr	r3, [pc, #96]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e280:	687a      	ldr	r2, [r7, #4]
    e282:	60da      	str	r2, [r3, #12]
    e284:	e002      	b.n	e28c <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    e286:	4b16      	ldr	r3, [pc, #88]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e288:	4a17      	ldr	r2, [pc, #92]	; (e2e8 <LoRaMacCryptoInit+0x9c>)
    e28a:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
    e28c:	4b14      	ldr	r3, [pc, #80]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e28e:	689b      	ldr	r3, [r3, #8]
    e290:	2230      	movs	r2, #48	; 0x30
    e292:	2100      	movs	r1, #0
    e294:	0018      	movs	r0, r3
    e296:	4b15      	ldr	r3, [pc, #84]	; (e2ec <LoRaMacCryptoInit+0xa0>)
    e298:	4798      	blx	r3

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
    e29a:	4b11      	ldr	r3, [pc, #68]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e29c:	2200      	movs	r2, #0
    e29e:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    e2a0:	4b0f      	ldr	r3, [pc, #60]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2a2:	689b      	ldr	r3, [r3, #8]
    e2a4:	2200      	movs	r2, #0
    e2a6:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    e2a8:	4b0d      	ldr	r3, [pc, #52]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2aa:	689b      	ldr	r3, [r3, #8]
    e2ac:	2201      	movs	r2, #1
    e2ae:	4252      	negs	r2, r2
    e2b0:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    e2b2:	4b0b      	ldr	r3, [pc, #44]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2b4:	689b      	ldr	r3, [r3, #8]
    e2b6:	2201      	movs	r2, #1
    e2b8:	4252      	negs	r2, r2
    e2ba:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    e2bc:	4b08      	ldr	r3, [pc, #32]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2be:	689b      	ldr	r3, [r3, #8]
    e2c0:	2201      	movs	r2, #1
    e2c2:	4252      	negs	r2, r2
    e2c4:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    e2c6:	4b06      	ldr	r3, [pc, #24]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2c8:	689b      	ldr	r3, [r3, #8]
    e2ca:	4a05      	ldr	r2, [pc, #20]	; (e2e0 <LoRaMacCryptoInit+0x94>)
    e2cc:	6892      	ldr	r2, [r2, #8]
    e2ce:	3214      	adds	r2, #20
    e2d0:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
    e2d2:	4b07      	ldr	r3, [pc, #28]	; (e2f0 <LoRaMacCryptoInit+0xa4>)
    e2d4:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    e2d6:	2300      	movs	r3, #0
}
    e2d8:	0018      	movs	r0, r3
    e2da:	46bd      	mov	sp, r7
    e2dc:	b002      	add	sp, #8
    e2de:	bd80      	pop	{r7, pc}
    e2e0:	200014c4 	.word	0x200014c4
    e2e4:	200014d4 	.word	0x200014d4
    e2e8:	0000e241 	.word	0x0000e241
    e2ec:	000043b1 	.word	0x000043b1
    e2f0:	0000e1dd 	.word	0x0000e1dd

0000e2f4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b082      	sub	sp, #8
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
    e2fc:	4b03      	ldr	r3, [pc, #12]	; (e30c <LoRaMacCryptoSetLrWanVersion+0x18>)
    e2fe:	687a      	ldr	r2, [r7, #4]
    e300:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
    e302:	2300      	movs	r3, #0
}
    e304:	0018      	movs	r0, r3
    e306:	46bd      	mov	sp, r7
    e308:	b002      	add	sp, #8
    e30a:	bd80      	pop	{r7, pc}
    e30c:	200014c4 	.word	0x200014c4

0000e310 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
    e310:	b580      	push	{r7, lr}
    e312:	b082      	sub	sp, #8
    e314:	af00      	add	r7, sp, #0
    e316:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
    e318:	687b      	ldr	r3, [r7, #4]
    e31a:	2b00      	cmp	r3, #0
    e31c:	d007      	beq.n	e32e <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
    e31e:	6879      	ldr	r1, [r7, #4]
    e320:	4b05      	ldr	r3, [pc, #20]	; (e338 <LoRaMacCryptoRestoreNvmCtx+0x28>)
    e322:	2230      	movs	r2, #48	; 0x30
    e324:	0018      	movs	r0, r3
    e326:	4b05      	ldr	r3, [pc, #20]	; (e33c <LoRaMacCryptoRestoreNvmCtx+0x2c>)
    e328:	4798      	blx	r3
        return LORAMAC_CRYPTO_SUCCESS;
    e32a:	2300      	movs	r3, #0
    e32c:	e000      	b.n	e330 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e32e:	2307      	movs	r3, #7
    }
}
    e330:	0018      	movs	r0, r3
    e332:	46bd      	mov	sp, r7
    e334:	b002      	add	sp, #8
    e336:	bd80      	pop	{r7, pc}
    e338:	200014d4 	.word	0x200014d4
    e33c:	00004339 	.word	0x00004339

0000e340 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
    e340:	b580      	push	{r7, lr}
    e342:	b082      	sub	sp, #8
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	2230      	movs	r2, #48	; 0x30
    e34c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
    e34e:	4b02      	ldr	r3, [pc, #8]	; (e358 <LoRaMacCryptoGetNvmCtx+0x18>)
}
    e350:	0018      	movs	r0, r3
    e352:	46bd      	mov	sp, r7
    e354:	b002      	add	sp, #8
    e356:	bd80      	pop	{r7, pc}
    e358:	200014d4 	.word	0x200014d4

0000e35c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
    e35c:	b580      	push	{r7, lr}
    e35e:	b082      	sub	sp, #8
    e360:	af00      	add	r7, sp, #0
    e362:	0002      	movs	r2, r0
    e364:	6039      	str	r1, [r7, #0]
    e366:	1dfb      	adds	r3, r7, #7
    e368:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
    e36a:	683a      	ldr	r2, [r7, #0]
    e36c:	1dfb      	adds	r3, r7, #7
    e36e:	781b      	ldrb	r3, [r3, #0]
    e370:	0011      	movs	r1, r2
    e372:	0018      	movs	r0, r3
    e374:	4b05      	ldr	r3, [pc, #20]	; (e38c <LoRaMacCryptoSetKey+0x30>)
    e376:	4798      	blx	r3
    e378:	1e03      	subs	r3, r0, #0
    e37a:	d001      	beq.n	e380 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    e37c:	230c      	movs	r3, #12
    e37e:	e000      	b.n	e382 <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
    e380:	2300      	movs	r3, #0
}
    e382:	0018      	movs	r0, r3
    e384:	46bd      	mov	sp, r7
    e386:	b002      	add	sp, #8
    e388:	bd80      	pop	{r7, pc}
    e38a:	46c0      	nop			; (mov r8, r8)
    e38c:	00016635 	.word	0x00016635

0000e390 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    e390:	b5b0      	push	{r4, r5, r7, lr}
    e392:	b084      	sub	sp, #16
    e394:	af00      	add	r7, sp, #0
    e396:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	2b00      	cmp	r3, #0
    e39c:	d101      	bne.n	e3a2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e39e:	2307      	movs	r3, #7
    e3a0:	e065      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
    e3a2:	230f      	movs	r3, #15
    e3a4:	18fb      	adds	r3, r7, r3
    e3a6:	2201      	movs	r2, #1
    e3a8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    e3aa:	230e      	movs	r3, #14
    e3ac:	18fb      	adds	r3, r7, r3
    e3ae:	2210      	movs	r2, #16
    e3b0:	701a      	strb	r2, [r3, #0]

    // Add device nonce
    CryptoCtx.NvmCtx->DevNonce++;
    e3b2:	4b31      	ldr	r3, [pc, #196]	; (e478 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    e3b4:	689b      	ldr	r3, [r3, #8]
    e3b6:	881a      	ldrh	r2, [r3, #0]
    e3b8:	3201      	adds	r2, #1
    e3ba:	b292      	uxth	r2, r2
    e3bc:	801a      	strh	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    e3be:	4b2e      	ldr	r3, [pc, #184]	; (e478 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    e3c0:	68db      	ldr	r3, [r3, #12]
    e3c2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
    e3c4:	4b2c      	ldr	r3, [pc, #176]	; (e478 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    e3c6:	689b      	ldr	r3, [r3, #8]
    e3c8:	881a      	ldrh	r2, [r3, #0]
    e3ca:	687b      	ldr	r3, [r7, #4]
    e3cc:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
    e3ce:	687b      	ldr	r3, [r7, #4]
    e3d0:	330e      	adds	r3, #14
    e3d2:	220e      	movs	r2, #14
    e3d4:	18bc      	adds	r4, r7, r2
    e3d6:	0019      	movs	r1, r3
    e3d8:	2002      	movs	r0, #2
    e3da:	4b28      	ldr	r3, [pc, #160]	; (e47c <LoRaMacCryptoPrepareJoinRequest+0xec>)
    e3dc:	4798      	blx	r3
    e3de:	0003      	movs	r3, r0
    e3e0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e3e2:	230e      	movs	r3, #14
    e3e4:	18fb      	adds	r3, r7, r3
    e3e6:	781b      	ldrb	r3, [r3, #0]
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d003      	beq.n	e3f4 <LoRaMacCryptoPrepareJoinRequest+0x64>
    {
        return retval;
    e3ec:	230e      	movs	r3, #14
    e3ee:	18fb      	adds	r3, r7, r3
    e3f0:	781b      	ldrb	r3, [r3, #0]
    e3f2:	e03c      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
    e3f4:	687b      	ldr	r3, [r7, #4]
    e3f6:	330e      	adds	r3, #14
    e3f8:	220e      	movs	r2, #14
    e3fa:	18bc      	adds	r4, r7, r2
    e3fc:	0019      	movs	r1, r3
    e3fe:	2003      	movs	r0, #3
    e400:	4b1e      	ldr	r3, [pc, #120]	; (e47c <LoRaMacCryptoPrepareJoinRequest+0xec>)
    e402:	4798      	blx	r3
    e404:	0003      	movs	r3, r0
    e406:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e408:	230e      	movs	r3, #14
    e40a:	18fb      	adds	r3, r7, r3
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	2b00      	cmp	r3, #0
    e410:	d003      	beq.n	e41a <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
    e412:	230e      	movs	r3, #14
    e414:	18fb      	adds	r3, r7, r3
    e416:	781b      	ldrb	r3, [r3, #0]
    e418:	e029      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e41a:	687b      	ldr	r3, [r7, #4]
    e41c:	0018      	movs	r0, r3
    e41e:	4b18      	ldr	r3, [pc, #96]	; (e480 <LoRaMacCryptoPrepareJoinRequest+0xf0>)
    e420:	4798      	blx	r3
    e422:	1e03      	subs	r3, r0, #0
    e424:	d001      	beq.n	e42a <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e426:	230e      	movs	r3, #14
    e428:	e021      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Compute mic
    retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	6818      	ldr	r0, [r3, #0]
    e42e:	687b      	ldr	r3, [r7, #4]
    e430:	3318      	adds	r3, #24
    e432:	0019      	movs	r1, r3
    e434:	230e      	movs	r3, #14
    e436:	18fc      	adds	r4, r7, r3
    e438:	230f      	movs	r3, #15
    e43a:	18fb      	adds	r3, r7, r3
    e43c:	781a      	ldrb	r2, [r3, #0]
    e43e:	000b      	movs	r3, r1
    e440:	2113      	movs	r1, #19
    e442:	4d10      	ldr	r5, [pc, #64]	; (e484 <LoRaMacCryptoPrepareJoinRequest+0xf4>)
    e444:	47a8      	blx	r5
    e446:	0003      	movs	r3, r0
    e448:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e44a:	230e      	movs	r3, #14
    e44c:	18fb      	adds	r3, r7, r3
    e44e:	781b      	ldrb	r3, [r3, #0]
    e450:	2b00      	cmp	r3, #0
    e452:	d003      	beq.n	e45c <LoRaMacCryptoPrepareJoinRequest+0xcc>
    {
        return retval;
    e454:	230e      	movs	r3, #14
    e456:	18fb      	adds	r3, r7, r3
    e458:	781b      	ldrb	r3, [r3, #0]
    e45a:	e008      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e45c:	687b      	ldr	r3, [r7, #4]
    e45e:	0018      	movs	r0, r3
    e460:	4b07      	ldr	r3, [pc, #28]	; (e480 <LoRaMacCryptoPrepareJoinRequest+0xf0>)
    e462:	4798      	blx	r3
    e464:	1e03      	subs	r3, r0, #0
    e466:	d001      	beq.n	e46c <LoRaMacCryptoPrepareJoinRequest+0xdc>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e468:	230e      	movs	r3, #14
    e46a:	e000      	b.n	e46e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    e46c:	2300      	movs	r3, #0
}
    e46e:	0018      	movs	r0, r3
    e470:	46bd      	mov	sp, r7
    e472:	b004      	add	sp, #16
    e474:	bdb0      	pop	{r4, r5, r7, pc}
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	200014c4 	.word	0x200014c4
    e47c:	0000e00d 	.word	0x0000e00d
    e480:	0000f7c5 	.word	0x0000f7c5
    e484:	0000d6d9 	.word	0x0000d6d9

0000e488 <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    e488:	b5b0      	push	{r4, r5, r7, lr}
    e48a:	b084      	sub	sp, #16
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    e490:	687b      	ldr	r3, [r7, #4]
    e492:	2b00      	cmp	r3, #0
    e494:	d101      	bne.n	e49a <LoRaMacCryptoPrepareReJoinType1+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e496:	2307      	movs	r3, #7
    e498:	e036      	b.n	e508 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Check for RJcount1 overflow
    if( CryptoCtx.NvmCtx->RJcount1 == 65535 )
    e49a:	4b1d      	ldr	r3, [pc, #116]	; (e510 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    e49c:	689b      	ldr	r3, [r3, #8]
    e49e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    e4a0:	4a1c      	ldr	r2, [pc, #112]	; (e514 <LoRaMacCryptoPrepareReJoinType1+0x8c>)
    e4a2:	4293      	cmp	r3, r2
    e4a4:	d101      	bne.n	e4aa <LoRaMacCryptoPrepareReJoinType1+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    e4a6:	230f      	movs	r3, #15
    e4a8:	e02e      	b.n	e508 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e4aa:	687b      	ldr	r3, [r7, #4]
    e4ac:	0018      	movs	r0, r3
    e4ae:	4b1a      	ldr	r3, [pc, #104]	; (e518 <LoRaMacCryptoPrepareReJoinType1+0x90>)
    e4b0:	4798      	blx	r3
    e4b2:	1e03      	subs	r3, r0, #0
    e4b4:	d001      	beq.n	e4ba <LoRaMacCryptoPrepareReJoinType1+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e4b6:	230e      	movs	r3, #14
    e4b8:	e026      	b.n	e508 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Compute mic
    // cmac = aes128_cmac(JSIntKey, MHDR | RejoinType | JoinEUI| DevEUI | RJcount1)
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC );
    e4ba:	687b      	ldr	r3, [r7, #4]
    e4bc:	6818      	ldr	r0, [r3, #0]
    e4be:	687b      	ldr	r3, [r7, #4]
    e4c0:	331c      	adds	r3, #28
    e4c2:	220f      	movs	r2, #15
    e4c4:	18bc      	adds	r4, r7, r2
    e4c6:	2202      	movs	r2, #2
    e4c8:	2114      	movs	r1, #20
    e4ca:	4d14      	ldr	r5, [pc, #80]	; (e51c <LoRaMacCryptoPrepareReJoinType1+0x94>)
    e4cc:	47a8      	blx	r5
    e4ce:	0003      	movs	r3, r0
    e4d0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e4d2:	230f      	movs	r3, #15
    e4d4:	18fb      	adds	r3, r7, r3
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d003      	beq.n	e4e4 <LoRaMacCryptoPrepareReJoinType1+0x5c>
    {
        return retval;
    e4dc:	230f      	movs	r3, #15
    e4de:	18fb      	adds	r3, r7, r3
    e4e0:	781b      	ldrb	r3, [r3, #0]
    e4e2:	e011      	b.n	e508 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e4e4:	687b      	ldr	r3, [r7, #4]
    e4e6:	0018      	movs	r0, r3
    e4e8:	4b0b      	ldr	r3, [pc, #44]	; (e518 <LoRaMacCryptoPrepareReJoinType1+0x90>)
    e4ea:	4798      	blx	r3
    e4ec:	1e03      	subs	r3, r0, #0
    e4ee:	d001      	beq.n	e4f4 <LoRaMacCryptoPrepareReJoinType1+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e4f0:	230e      	movs	r3, #14
    e4f2:	e009      	b.n	e508 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Increment RJcount1
    CryptoCtx.NvmCtx->RJcount1++;
    e4f4:	4b06      	ldr	r3, [pc, #24]	; (e510 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    e4f6:	689b      	ldr	r3, [r3, #8]
    e4f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    e4fa:	3201      	adds	r2, #1
    e4fc:	b292      	uxth	r2, r2
    e4fe:	851a      	strh	r2, [r3, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
    e500:	4b03      	ldr	r3, [pc, #12]	; (e510 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    e502:	68db      	ldr	r3, [r3, #12]
    e504:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    e506:	2300      	movs	r3, #0
}
    e508:	0018      	movs	r0, r3
    e50a:	46bd      	mov	sp, r7
    e50c:	b004      	add	sp, #16
    e50e:	bdb0      	pop	{r4, r5, r7, pc}
    e510:	200014c4 	.word	0x200014c4
    e514:	0000ffff 	.word	0x0000ffff
    e518:	0000f925 	.word	0x0000f925
    e51c:	0000d6d9 	.word	0x0000d6d9

0000e520 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    e520:	b5b0      	push	{r4, r5, r7, lr}
    e522:	b084      	sub	sp, #16
    e524:	af00      	add	r7, sp, #0
    e526:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	2b00      	cmp	r3, #0
    e52c:	d101      	bne.n	e532 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e52e:	2307      	movs	r3, #7
    e530:	e032      	b.n	e598 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Check for RJcount0 overflow
    if( CryptoCtx.RJcount0 == 65535 )
    e532:	4b1b      	ldr	r3, [pc, #108]	; (e5a0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    e534:	889b      	ldrh	r3, [r3, #4]
    e536:	4a1b      	ldr	r2, [pc, #108]	; (e5a4 <LoRaMacCryptoPrepareReJoinType0or2+0x84>)
    e538:	4293      	cmp	r3, r2
    e53a:	d101      	bne.n	e540 <LoRaMacCryptoPrepareReJoinType0or2+0x20>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    e53c:	2304      	movs	r3, #4
    e53e:	e02b      	b.n	e598 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e540:	687b      	ldr	r3, [r7, #4]
    e542:	0018      	movs	r0, r3
    e544:	4b18      	ldr	r3, [pc, #96]	; (e5a8 <LoRaMacCryptoPrepareReJoinType0or2+0x88>)
    e546:	4798      	blx	r3
    e548:	1e03      	subs	r3, r0, #0
    e54a:	d001      	beq.n	e550 <LoRaMacCryptoPrepareReJoinType0or2+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e54c:	230e      	movs	r3, #14
    e54e:	e023      	b.n	e598 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Compute mic
    // cmac = aes128_cmac(SNwkSIntKey, MHDR | Rejoin Type | NetID | DevEUI | RJcount0)
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC );
    e550:	687b      	ldr	r3, [r7, #4]
    e552:	6818      	ldr	r0, [r3, #0]
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	3314      	adds	r3, #20
    e558:	220f      	movs	r2, #15
    e55a:	18bc      	adds	r4, r7, r2
    e55c:	2205      	movs	r2, #5
    e55e:	210f      	movs	r1, #15
    e560:	4d12      	ldr	r5, [pc, #72]	; (e5ac <LoRaMacCryptoPrepareReJoinType0or2+0x8c>)
    e562:	47a8      	blx	r5
    e564:	0003      	movs	r3, r0
    e566:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e568:	230f      	movs	r3, #15
    e56a:	18fb      	adds	r3, r7, r3
    e56c:	781b      	ldrb	r3, [r3, #0]
    e56e:	2b00      	cmp	r3, #0
    e570:	d003      	beq.n	e57a <LoRaMacCryptoPrepareReJoinType0or2+0x5a>
    {
        return retval;
    e572:	230f      	movs	r3, #15
    e574:	18fb      	adds	r3, r7, r3
    e576:	781b      	ldrb	r3, [r3, #0]
    e578:	e00e      	b.n	e598 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    e57a:	687b      	ldr	r3, [r7, #4]
    e57c:	0018      	movs	r0, r3
    e57e:	4b0a      	ldr	r3, [pc, #40]	; (e5a8 <LoRaMacCryptoPrepareReJoinType0or2+0x88>)
    e580:	4798      	blx	r3
    e582:	1e03      	subs	r3, r0, #0
    e584:	d001      	beq.n	e58a <LoRaMacCryptoPrepareReJoinType0or2+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    e586:	230e      	movs	r3, #14
    e588:	e006      	b.n	e598 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Increment RJcount0
    CryptoCtx.RJcount0++;
    e58a:	4b05      	ldr	r3, [pc, #20]	; (e5a0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    e58c:	889b      	ldrh	r3, [r3, #4]
    e58e:	3301      	adds	r3, #1
    e590:	b29a      	uxth	r2, r3
    e592:	4b03      	ldr	r3, [pc, #12]	; (e5a0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    e594:	809a      	strh	r2, [r3, #4]

    return LORAMAC_CRYPTO_SUCCESS;
    e596:	2300      	movs	r3, #0
}
    e598:	0018      	movs	r0, r3
    e59a:	46bd      	mov	sp, r7
    e59c:	b004      	add	sp, #16
    e59e:	bdb0      	pop	{r4, r5, r7, pc}
    e5a0:	200014c4 	.word	0x200014c4
    e5a4:	0000ffff 	.word	0x0000ffff
    e5a8:	0000faa1 	.word	0x0000faa1
    e5ac:	0000d6d9 	.word	0x0000d6d9

0000e5b0 <LoRaMacCryptoHandleJoinAccept>:

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
    e5b0:	b5b0      	push	{r4, r5, r7, lr}
    e5b2:	b0cc      	sub	sp, #304	; 0x130
    e5b4:	af00      	add	r7, sp, #0
    e5b6:	60b9      	str	r1, [r7, #8]
    e5b8:	607a      	str	r2, [r7, #4]
    e5ba:	4be4      	ldr	r3, [pc, #912]	; (e94c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    e5bc:	2298      	movs	r2, #152	; 0x98
    e5be:	0052      	lsls	r2, r2, #1
    e5c0:	4694      	mov	ip, r2
    e5c2:	44bc      	add	ip, r7
    e5c4:	4463      	add	r3, ip
    e5c6:	1c02      	adds	r2, r0, #0
    e5c8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
    e5ca:	687b      	ldr	r3, [r7, #4]
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d002      	beq.n	e5d6 <LoRaMacCryptoHandleJoinAccept+0x26>
    e5d0:	68bb      	ldr	r3, [r7, #8]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d101      	bne.n	e5da <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    e5d6:	2307      	movs	r3, #7
    e5d8:	e29e      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    e5da:	2328      	movs	r3, #40	; 0x28
    e5dc:	33ff      	adds	r3, #255	; 0xff
    e5de:	18fb      	adds	r3, r7, r3
    e5e0:	2210      	movs	r2, #16
    e5e2:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
    e5e4:	232e      	movs	r3, #46	; 0x2e
    e5e6:	33ff      	adds	r3, #255	; 0xff
    e5e8:	18fb      	adds	r3, r7, r3
    e5ea:	2200      	movs	r2, #0
    e5ec:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
    e5ee:	4bd8      	ldr	r3, [pc, #864]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e5f0:	689b      	ldr	r3, [r3, #8]
    e5f2:	2294      	movs	r2, #148	; 0x94
    e5f4:	0052      	lsls	r2, r2, #1
    e5f6:	18ba      	adds	r2, r7, r2
    e5f8:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
    e5fa:	4bd4      	ldr	r3, [pc, #848]	; (e94c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    e5fc:	2298      	movs	r2, #152	; 0x98
    e5fe:	0052      	lsls	r2, r2, #1
    e600:	4694      	mov	ip, r2
    e602:	44bc      	add	ip, r7
    e604:	4463      	add	r3, ip
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	2bff      	cmp	r3, #255	; 0xff
    e60a:	d10a      	bne.n	e622 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
    e60c:	2397      	movs	r3, #151	; 0x97
    e60e:	005b      	lsls	r3, r3, #1
    e610:	18fb      	adds	r3, r7, r3
    e612:	2201      	movs	r2, #1
    e614:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
    e616:	232e      	movs	r3, #46	; 0x2e
    e618:	33ff      	adds	r3, #255	; 0xff
    e61a:	18fb      	adds	r3, r7, r3
    e61c:	220c      	movs	r2, #12
    e61e:	701a      	strb	r2, [r3, #0]
    e620:	e023      	b.n	e66a <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
    e622:	2397      	movs	r3, #151	; 0x97
    e624:	005b      	lsls	r3, r3, #1
    e626:	18fb      	adds	r3, r7, r3
    e628:	2203      	movs	r2, #3
    e62a:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
    e62c:	4bc7      	ldr	r3, [pc, #796]	; (e94c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    e62e:	2298      	movs	r2, #152	; 0x98
    e630:	0052      	lsls	r2, r2, #1
    e632:	4694      	mov	ip, r2
    e634:	44bc      	add	ip, r7
    e636:	4463      	add	r3, ip
    e638:	781b      	ldrb	r3, [r3, #0]
    e63a:	2b00      	cmp	r3, #0
    e63c:	d008      	beq.n	e650 <LoRaMacCryptoHandleJoinAccept+0xa0>
    e63e:	4bc3      	ldr	r3, [pc, #780]	; (e94c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    e640:	2298      	movs	r2, #152	; 0x98
    e642:	0052      	lsls	r2, r2, #1
    e644:	4694      	mov	ip, r2
    e646:	44bc      	add	ip, r7
    e648:	4463      	add	r3, ip
    e64a:	781b      	ldrb	r3, [r3, #0]
    e64c:	2b02      	cmp	r3, #2
    e64e:	d105      	bne.n	e65c <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
    e650:	4bc0      	ldr	r3, [pc, #768]	; (e954 <LoRaMacCryptoHandleJoinAccept+0x3a4>)
    e652:	2294      	movs	r2, #148	; 0x94
    e654:	0052      	lsls	r2, r2, #1
    e656:	18ba      	adds	r2, r7, r2
    e658:	6013      	str	r3, [r2, #0]
    e65a:	e006      	b.n	e66a <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
    e65c:	4bbc      	ldr	r3, [pc, #752]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e65e:	689b      	ldr	r3, [r3, #8]
    e660:	3328      	adds	r3, #40	; 0x28
    e662:	2294      	movs	r2, #148	; 0x94
    e664:	0052      	lsls	r2, r2, #1
    e666:	18ba      	adds	r2, r7, r2
    e668:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
    e66a:	687b      	ldr	r3, [r7, #4]
    e66c:	791b      	ldrb	r3, [r3, #4]
    e66e:	b29a      	uxth	r2, r3
    e670:	232e      	movs	r3, #46	; 0x2e
    e672:	33ff      	adds	r3, #255	; 0xff
    e674:	18fb      	adds	r3, r7, r3
    e676:	781b      	ldrb	r3, [r3, #0]
    e678:	b29b      	uxth	r3, r3
    e67a:	18d3      	adds	r3, r2, r3
    e67c:	b29a      	uxth	r2, r3
    e67e:	2314      	movs	r3, #20
    e680:	18fb      	adds	r3, r7, r3
    e682:	2100      	movs	r1, #0
    e684:	0018      	movs	r0, r3
    e686:	4bb4      	ldr	r3, [pc, #720]	; (e958 <LoRaMacCryptoHandleJoinAccept+0x3a8>)
    e688:	4798      	blx	r3

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
    e68a:	687b      	ldr	r3, [r7, #4]
    e68c:	681b      	ldr	r3, [r3, #0]
    e68e:	1c58      	adds	r0, r3, #1
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	791b      	ldrb	r3, [r3, #4]
    e694:	b29b      	uxth	r3, r3
    e696:	3b01      	subs	r3, #1
    e698:	b299      	uxth	r1, r3
    e69a:	232e      	movs	r3, #46	; 0x2e
    e69c:	33ff      	adds	r3, #255	; 0xff
    e69e:	18fb      	adds	r3, r7, r3
    e6a0:	781b      	ldrb	r3, [r3, #0]
    e6a2:	2214      	movs	r2, #20
    e6a4:	18ba      	adds	r2, r7, r2
    e6a6:	18d4      	adds	r4, r2, r3
    e6a8:	2397      	movs	r3, #151	; 0x97
    e6aa:	005b      	lsls	r3, r3, #1
    e6ac:	18fb      	adds	r3, r7, r3
    e6ae:	781a      	ldrb	r2, [r3, #0]
    e6b0:	0023      	movs	r3, r4
    e6b2:	4caa      	ldr	r4, [pc, #680]	; (e95c <LoRaMacCryptoHandleJoinAccept+0x3ac>)
    e6b4:	47a0      	blx	r4
    e6b6:	1e03      	subs	r3, r0, #0
    e6b8:	d001      	beq.n	e6be <LoRaMacCryptoHandleJoinAccept+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    e6ba:	230c      	movs	r3, #12
    e6bc:	e22c      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	681b      	ldr	r3, [r3, #0]
    e6c2:	1c58      	adds	r0, r3, #1
    e6c4:	232e      	movs	r3, #46	; 0x2e
    e6c6:	33ff      	adds	r3, #255	; 0xff
    e6c8:	18fb      	adds	r3, r7, r3
    e6ca:	781b      	ldrb	r3, [r3, #0]
    e6cc:	2214      	movs	r2, #20
    e6ce:	18ba      	adds	r2, r7, r2
    e6d0:	18d1      	adds	r1, r2, r3
    e6d2:	687b      	ldr	r3, [r7, #4]
    e6d4:	791b      	ldrb	r3, [r3, #4]
    e6d6:	b29b      	uxth	r3, r3
    e6d8:	3b01      	subs	r3, #1
    e6da:	b29b      	uxth	r3, r3
    e6dc:	001a      	movs	r2, r3
    e6de:	4ba0      	ldr	r3, [pc, #640]	; (e960 <LoRaMacCryptoHandleJoinAccept+0x3b0>)
    e6e0:	4798      	blx	r3

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
    e6e2:	687b      	ldr	r3, [r7, #4]
    e6e4:	0018      	movs	r0, r3
    e6e6:	4b9f      	ldr	r3, [pc, #636]	; (e964 <LoRaMacCryptoHandleJoinAccept+0x3b4>)
    e6e8:	4798      	blx	r3
    e6ea:	1e03      	subs	r3, r0, #0
    e6ec:	d001      	beq.n	e6f2 <LoRaMacCryptoHandleJoinAccept+0x142>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    e6ee:	230d      	movs	r3, #13
    e6f0:	e212      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
    e6f2:	687b      	ldr	r3, [r7, #4]
    e6f4:	7c1b      	ldrb	r3, [r3, #16]
    e6f6:	227f      	movs	r2, #127	; 0x7f
    e6f8:	4393      	bics	r3, r2
    e6fa:	b2db      	uxtb	r3, r3
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d008      	beq.n	e712 <LoRaMacCryptoHandleJoinAccept+0x162>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
    e700:	4b93      	ldr	r3, [pc, #588]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e702:	2201      	movs	r2, #1
    e704:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
    e706:	2330      	movs	r3, #48	; 0x30
    e708:	33ff      	adds	r3, #255	; 0xff
    e70a:	18fb      	adds	r3, r7, r3
    e70c:	2202      	movs	r2, #2
    e70e:	701a      	strb	r2, [r3, #0]
    e710:	e007      	b.n	e722 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
    e712:	4b8f      	ldr	r3, [pc, #572]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e714:	2200      	movs	r2, #0
    e716:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
    e718:	2330      	movs	r3, #48	; 0x30
    e71a:	33ff      	adds	r3, #255	; 0xff
    e71c:	18fb      	adds	r3, r7, r3
    e71e:	2201      	movs	r2, #1
    e720:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
    e722:	4b8b      	ldr	r3, [pc, #556]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e724:	789b      	ldrb	r3, [r3, #2]
    e726:	2b00      	cmp	r3, #0
    e728:	d120      	bne.n	e76c <LoRaMacCryptoHandleJoinAccept+0x1bc>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    e72a:	687b      	ldr	r3, [r7, #4]
    e72c:	6818      	ldr	r0, [r3, #0]
    e72e:	687b      	ldr	r3, [r7, #4]
    e730:	791b      	ldrb	r3, [r3, #4]
    e732:	b29b      	uxth	r3, r3
    e734:	3b04      	subs	r3, #4
    e736:	b299      	uxth	r1, r3
    e738:	687b      	ldr	r3, [r7, #4]
    e73a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    e73c:	2328      	movs	r3, #40	; 0x28
    e73e:	33ff      	adds	r3, #255	; 0xff
    e740:	18fc      	adds	r4, r7, r3
    e742:	2330      	movs	r3, #48	; 0x30
    e744:	33ff      	adds	r3, #255	; 0xff
    e746:	18fb      	adds	r3, r7, r3
    e748:	781a      	ldrb	r2, [r3, #0]
    e74a:	002b      	movs	r3, r5
    e74c:	4d86      	ldr	r5, [pc, #536]	; (e968 <LoRaMacCryptoHandleJoinAccept+0x3b8>)
    e74e:	47a8      	blx	r5
    e750:	0003      	movs	r3, r0
    e752:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e754:	2328      	movs	r3, #40	; 0x28
    e756:	33ff      	adds	r3, #255	; 0xff
    e758:	18fb      	adds	r3, r7, r3
    e75a:	781b      	ldrb	r3, [r3, #0]
    e75c:	2b00      	cmp	r3, #0
    e75e:	d100      	bne.n	e762 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    e760:	e0d5      	b.n	e90e <LoRaMacCryptoHandleJoinAccept+0x35e>
        {
            return retval;
    e762:	2328      	movs	r3, #40	; 0x28
    e764:	33ff      	adds	r3, #255	; 0xff
    e766:	18fb      	adds	r3, r7, r3
    e768:	781b      	ldrb	r3, [r3, #0]
    e76a:	e1d5      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
    e76c:	2392      	movs	r3, #146	; 0x92
    e76e:	005b      	lsls	r3, r3, #1
    e770:	18fb      	adds	r3, r7, r3
    e772:	2200      	movs	r2, #0
    e774:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
    e776:	2392      	movs	r3, #146	; 0x92
    e778:	005b      	lsls	r3, r3, #1
    e77a:	18fb      	adds	r3, r7, r3
    e77c:	881b      	ldrh	r3, [r3, #0]
    e77e:	2292      	movs	r2, #146	; 0x92
    e780:	0052      	lsls	r2, r2, #1
    e782:	18ba      	adds	r2, r7, r2
    e784:	1c59      	adds	r1, r3, #1
    e786:	8011      	strh	r1, [r2, #0]
    e788:	0019      	movs	r1, r3
    e78a:	4b78      	ldr	r3, [pc, #480]	; (e96c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    e78c:	2298      	movs	r2, #152	; 0x98
    e78e:	0052      	lsls	r2, r2, #1
    e790:	4694      	mov	ip, r2
    e792:	44bc      	add	ip, r7
    e794:	4463      	add	r3, ip
    e796:	4a6d      	ldr	r2, [pc, #436]	; (e94c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    e798:	2098      	movs	r0, #152	; 0x98
    e79a:	0040      	lsls	r0, r0, #1
    e79c:	4684      	mov	ip, r0
    e79e:	44bc      	add	ip, r7
    e7a0:	4462      	add	r2, ip
    e7a2:	7812      	ldrb	r2, [r2, #0]
    e7a4:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    e7a6:	2392      	movs	r3, #146	; 0x92
    e7a8:	005b      	lsls	r3, r3, #1
    e7aa:	18fb      	adds	r3, r7, r3
    e7ac:	881b      	ldrh	r3, [r3, #0]
    e7ae:	2214      	movs	r2, #20
    e7b0:	18ba      	adds	r2, r7, r2
    e7b2:	18d3      	adds	r3, r2, r3
    e7b4:	68b9      	ldr	r1, [r7, #8]
    e7b6:	2208      	movs	r2, #8
    e7b8:	0018      	movs	r0, r3
    e7ba:	4b6d      	ldr	r3, [pc, #436]	; (e970 <LoRaMacCryptoHandleJoinAccept+0x3c0>)
    e7bc:	4798      	blx	r3
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    e7be:	2392      	movs	r3, #146	; 0x92
    e7c0:	005b      	lsls	r3, r3, #1
    e7c2:	18fb      	adds	r3, r7, r3
    e7c4:	2292      	movs	r2, #146	; 0x92
    e7c6:	0052      	lsls	r2, r2, #1
    e7c8:	18ba      	adds	r2, r7, r2
    e7ca:	8812      	ldrh	r2, [r2, #0]
    e7cc:	3208      	adds	r2, #8
    e7ce:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
    e7d0:	2392      	movs	r3, #146	; 0x92
    e7d2:	005b      	lsls	r3, r3, #1
    e7d4:	18fb      	adds	r3, r7, r3
    e7d6:	881b      	ldrh	r3, [r3, #0]
    e7d8:	2292      	movs	r2, #146	; 0x92
    e7da:	0052      	lsls	r2, r2, #1
    e7dc:	18ba      	adds	r2, r7, r2
    e7de:	1c59      	adds	r1, r3, #1
    e7e0:	8011      	strh	r1, [r2, #0]
    e7e2:	001a      	movs	r2, r3
    e7e4:	4b5a      	ldr	r3, [pc, #360]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e7e6:	689b      	ldr	r3, [r3, #8]
    e7e8:	881b      	ldrh	r3, [r3, #0]
    e7ea:	b2d9      	uxtb	r1, r3
    e7ec:	4b5f      	ldr	r3, [pc, #380]	; (e96c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    e7ee:	2098      	movs	r0, #152	; 0x98
    e7f0:	0040      	lsls	r0, r0, #1
    e7f2:	4684      	mov	ip, r0
    e7f4:	44bc      	add	ip, r7
    e7f6:	4463      	add	r3, ip
    e7f8:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
    e7fa:	2392      	movs	r3, #146	; 0x92
    e7fc:	005b      	lsls	r3, r3, #1
    e7fe:	18fb      	adds	r3, r7, r3
    e800:	881b      	ldrh	r3, [r3, #0]
    e802:	2292      	movs	r2, #146	; 0x92
    e804:	0052      	lsls	r2, r2, #1
    e806:	18ba      	adds	r2, r7, r2
    e808:	1c59      	adds	r1, r3, #1
    e80a:	8011      	strh	r1, [r2, #0]
    e80c:	001a      	movs	r2, r3
    e80e:	4b50      	ldr	r3, [pc, #320]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e810:	689b      	ldr	r3, [r3, #8]
    e812:	881b      	ldrh	r3, [r3, #0]
    e814:	0a1b      	lsrs	r3, r3, #8
    e816:	b29b      	uxth	r3, r3
    e818:	b2d9      	uxtb	r1, r3
    e81a:	4b54      	ldr	r3, [pc, #336]	; (e96c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    e81c:	2098      	movs	r0, #152	; 0x98
    e81e:	0040      	lsls	r0, r0, #1
    e820:	4684      	mov	ip, r0
    e822:	44bc      	add	ip, r7
    e824:	4463      	add	r3, ip
    e826:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
    e828:	2392      	movs	r3, #146	; 0x92
    e82a:	005b      	lsls	r3, r3, #1
    e82c:	18fb      	adds	r3, r7, r3
    e82e:	881b      	ldrh	r3, [r3, #0]
    e830:	2292      	movs	r2, #146	; 0x92
    e832:	0052      	lsls	r2, r2, #1
    e834:	18ba      	adds	r2, r7, r2
    e836:	1c59      	adds	r1, r3, #1
    e838:	8011      	strh	r1, [r2, #0]
    e83a:	001a      	movs	r2, r3
    e83c:	687b      	ldr	r3, [r7, #4]
    e83e:	7959      	ldrb	r1, [r3, #5]
    e840:	4b4a      	ldr	r3, [pc, #296]	; (e96c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    e842:	2098      	movs	r0, #152	; 0x98
    e844:	0040      	lsls	r0, r0, #1
    e846:	4684      	mov	ip, r0
    e848:	44bc      	add	ip, r7
    e84a:	4463      	add	r3, ip
    e84c:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	791b      	ldrb	r3, [r3, #4]
    e852:	b29a      	uxth	r2, r3
    e854:	232e      	movs	r3, #46	; 0x2e
    e856:	33ff      	adds	r3, #255	; 0xff
    e858:	18fb      	adds	r3, r7, r3
    e85a:	781b      	ldrb	r3, [r3, #0]
    e85c:	b29b      	uxth	r3, r3
    e85e:	18d3      	adds	r3, r2, r3
    e860:	b29b      	uxth	r3, r3
    e862:	3b05      	subs	r3, #5
    e864:	b299      	uxth	r1, r3
    e866:	687b      	ldr	r3, [r7, #4]
    e868:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    e86a:	2328      	movs	r3, #40	; 0x28
    e86c:	33ff      	adds	r3, #255	; 0xff
    e86e:	18fc      	adds	r4, r7, r3
    e870:	2330      	movs	r3, #48	; 0x30
    e872:	33ff      	adds	r3, #255	; 0xff
    e874:	18fb      	adds	r3, r7, r3
    e876:	781a      	ldrb	r2, [r3, #0]
    e878:	2314      	movs	r3, #20
    e87a:	18f8      	adds	r0, r7, r3
    e87c:	002b      	movs	r3, r5
    e87e:	4d3a      	ldr	r5, [pc, #232]	; (e968 <LoRaMacCryptoHandleJoinAccept+0x3b8>)
    e880:	47a8      	blx	r5
    e882:	0003      	movs	r3, r0
    e884:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e886:	2328      	movs	r3, #40	; 0x28
    e888:	33ff      	adds	r3, #255	; 0xff
    e88a:	18fb      	adds	r3, r7, r3
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	2b00      	cmp	r3, #0
    e890:	d004      	beq.n	e89c <LoRaMacCryptoHandleJoinAccept+0x2ec>
        {
            return retval;
    e892:	2328      	movs	r3, #40	; 0x28
    e894:	33ff      	adds	r3, #255	; 0xff
    e896:	18fb      	adds	r3, r7, r3
    e898:	781b      	ldrb	r3, [r3, #0]
    e89a:	e13d      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
    e89c:	2300      	movs	r3, #0
    e89e:	2290      	movs	r2, #144	; 0x90
    e8a0:	0052      	lsls	r2, r2, #1
    e8a2:	18ba      	adds	r2, r7, r2
    e8a4:	6013      	str	r3, [r2, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
    e8a6:	687b      	ldr	r3, [r7, #4]
    e8a8:	799b      	ldrb	r3, [r3, #6]
    e8aa:	2290      	movs	r2, #144	; 0x90
    e8ac:	0052      	lsls	r2, r2, #1
    e8ae:	18ba      	adds	r2, r7, r2
    e8b0:	6013      	str	r3, [r2, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	79db      	ldrb	r3, [r3, #7]
    e8b6:	021b      	lsls	r3, r3, #8
    e8b8:	2290      	movs	r2, #144	; 0x90
    e8ba:	0052      	lsls	r2, r2, #1
    e8bc:	18ba      	adds	r2, r7, r2
    e8be:	6812      	ldr	r2, [r2, #0]
    e8c0:	4313      	orrs	r3, r2
    e8c2:	2290      	movs	r2, #144	; 0x90
    e8c4:	0052      	lsls	r2, r2, #1
    e8c6:	18ba      	adds	r2, r7, r2
    e8c8:	6013      	str	r3, [r2, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
    e8ca:	687b      	ldr	r3, [r7, #4]
    e8cc:	7a1b      	ldrb	r3, [r3, #8]
    e8ce:	041b      	lsls	r3, r3, #16
    e8d0:	2290      	movs	r2, #144	; 0x90
    e8d2:	0052      	lsls	r2, r2, #1
    e8d4:	18ba      	adds	r2, r7, r2
    e8d6:	6812      	ldr	r2, [r2, #0]
    e8d8:	4313      	orrs	r3, r2
    e8da:	2290      	movs	r2, #144	; 0x90
    e8dc:	0052      	lsls	r2, r2, #1
    e8de:	18ba      	adds	r2, r7, r2
    e8e0:	6013      	str	r3, [r2, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
    e8e2:	4b1b      	ldr	r3, [pc, #108]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e8e4:	689b      	ldr	r3, [r3, #8]
    e8e6:	685a      	ldr	r2, [r3, #4]
    e8e8:	2390      	movs	r3, #144	; 0x90
    e8ea:	005b      	lsls	r3, r3, #1
    e8ec:	18fb      	adds	r3, r7, r3
    e8ee:	681b      	ldr	r3, [r3, #0]
    e8f0:	429a      	cmp	r2, r3
    e8f2:	d20a      	bcs.n	e90a <LoRaMacCryptoHandleJoinAccept+0x35a>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
    e8f4:	4b16      	ldr	r3, [pc, #88]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e8f6:	689b      	ldr	r3, [r3, #8]
    e8f8:	2290      	movs	r2, #144	; 0x90
    e8fa:	0052      	lsls	r2, r2, #1
    e8fc:	18ba      	adds	r2, r7, r2
    e8fe:	6812      	ldr	r2, [r2, #0]
    e900:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
    e902:	4b13      	ldr	r3, [pc, #76]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e904:	68db      	ldr	r3, [r3, #12]
    e906:	4798      	blx	r3
    e908:	e001      	b.n	e90e <LoRaMacCryptoHandleJoinAccept+0x35e>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    e90a:	2303      	movs	r3, #3
    e90c:	e104      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    e90e:	4b10      	ldr	r3, [pc, #64]	; (e950 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    e910:	789b      	ldrb	r3, [r3, #2]
    e912:	2b01      	cmp	r3, #1
    e914:	d000      	beq.n	e918 <LoRaMacCryptoHandleJoinAccept+0x368>
    e916:	e07d      	b.n	ea14 <LoRaMacCryptoHandleJoinAccept+0x464>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	1d99      	adds	r1, r3, #6
    e91c:	2328      	movs	r3, #40	; 0x28
    e91e:	33ff      	adds	r3, #255	; 0xff
    e920:	18fc      	adds	r4, r7, r3
    e922:	2394      	movs	r3, #148	; 0x94
    e924:	005b      	lsls	r3, r3, #1
    e926:	18fb      	adds	r3, r7, r3
    e928:	681b      	ldr	r3, [r3, #0]
    e92a:	68ba      	ldr	r2, [r7, #8]
    e92c:	2004      	movs	r0, #4
    e92e:	4d11      	ldr	r5, [pc, #68]	; (e974 <LoRaMacCryptoHandleJoinAccept+0x3c4>)
    e930:	47a8      	blx	r5
    e932:	0003      	movs	r3, r0
    e934:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e936:	2328      	movs	r3, #40	; 0x28
    e938:	33ff      	adds	r3, #255	; 0xff
    e93a:	18fb      	adds	r3, r7, r3
    e93c:	781b      	ldrb	r3, [r3, #0]
    e93e:	2b00      	cmp	r3, #0
    e940:	d01a      	beq.n	e978 <LoRaMacCryptoHandleJoinAccept+0x3c8>
        {
            return retval;
    e942:	2328      	movs	r3, #40	; 0x28
    e944:	33ff      	adds	r3, #255	; 0xff
    e946:	18fb      	adds	r3, r7, r3
    e948:	781b      	ldrb	r3, [r3, #0]
    e94a:	e0e5      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    e94c:	fffffedf 	.word	0xfffffedf
    e950:	200014c4 	.word	0x200014c4
    e954:	200014c8 	.word	0x200014c8
    e958:	000043b1 	.word	0x000043b1
    e95c:	00016811 	.word	0x00016811
    e960:	00004339 	.word	0x00004339
    e964:	0000f331 	.word	0x0000f331
    e968:	0000d725 	.word	0x0000d725
    e96c:	fffffee4 	.word	0xfffffee4
    e970:	0000436f 	.word	0x0000436f
    e974:	0000df09 	.word	0x0000df09
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	1d99      	adds	r1, r3, #6
    e97c:	2328      	movs	r3, #40	; 0x28
    e97e:	33ff      	adds	r3, #255	; 0xff
    e980:	18fc      	adds	r4, r7, r3
    e982:	2394      	movs	r3, #148	; 0x94
    e984:	005b      	lsls	r3, r3, #1
    e986:	18fb      	adds	r3, r7, r3
    e988:	681b      	ldr	r3, [r3, #0]
    e98a:	68ba      	ldr	r2, [r7, #8]
    e98c:	2005      	movs	r0, #5
    e98e:	4d64      	ldr	r5, [pc, #400]	; (eb20 <LoRaMacCryptoHandleJoinAccept+0x570>)
    e990:	47a8      	blx	r5
    e992:	0003      	movs	r3, r0
    e994:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e996:	2328      	movs	r3, #40	; 0x28
    e998:	33ff      	adds	r3, #255	; 0xff
    e99a:	18fb      	adds	r3, r7, r3
    e99c:	781b      	ldrb	r3, [r3, #0]
    e99e:	2b00      	cmp	r3, #0
    e9a0:	d004      	beq.n	e9ac <LoRaMacCryptoHandleJoinAccept+0x3fc>
        {
            return retval;
    e9a2:	2328      	movs	r3, #40	; 0x28
    e9a4:	33ff      	adds	r3, #255	; 0xff
    e9a6:	18fb      	adds	r3, r7, r3
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	e0b5      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    e9ac:	687b      	ldr	r3, [r7, #4]
    e9ae:	1d99      	adds	r1, r3, #6
    e9b0:	2328      	movs	r3, #40	; 0x28
    e9b2:	33ff      	adds	r3, #255	; 0xff
    e9b4:	18fc      	adds	r4, r7, r3
    e9b6:	2394      	movs	r3, #148	; 0x94
    e9b8:	005b      	lsls	r3, r3, #1
    e9ba:	18fb      	adds	r3, r7, r3
    e9bc:	681b      	ldr	r3, [r3, #0]
    e9be:	68ba      	ldr	r2, [r7, #8]
    e9c0:	2006      	movs	r0, #6
    e9c2:	4d57      	ldr	r5, [pc, #348]	; (eb20 <LoRaMacCryptoHandleJoinAccept+0x570>)
    e9c4:	47a8      	blx	r5
    e9c6:	0003      	movs	r3, r0
    e9c8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e9ca:	2328      	movs	r3, #40	; 0x28
    e9cc:	33ff      	adds	r3, #255	; 0xff
    e9ce:	18fb      	adds	r3, r7, r3
    e9d0:	781b      	ldrb	r3, [r3, #0]
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d004      	beq.n	e9e0 <LoRaMacCryptoHandleJoinAccept+0x430>
        {
            return retval;
    e9d6:	2328      	movs	r3, #40	; 0x28
    e9d8:	33ff      	adds	r3, #255	; 0xff
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	781b      	ldrb	r3, [r3, #0]
    e9de:	e09b      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    e9e0:	687b      	ldr	r3, [r7, #4]
    e9e2:	1d99      	adds	r1, r3, #6
    e9e4:	2328      	movs	r3, #40	; 0x28
    e9e6:	33ff      	adds	r3, #255	; 0xff
    e9e8:	18fc      	adds	r4, r7, r3
    e9ea:	2394      	movs	r3, #148	; 0x94
    e9ec:	005b      	lsls	r3, r3, #1
    e9ee:	18fb      	adds	r3, r7, r3
    e9f0:	681b      	ldr	r3, [r3, #0]
    e9f2:	68ba      	ldr	r2, [r7, #8]
    e9f4:	2007      	movs	r0, #7
    e9f6:	4d4a      	ldr	r5, [pc, #296]	; (eb20 <LoRaMacCryptoHandleJoinAccept+0x570>)
    e9f8:	47a8      	blx	r5
    e9fa:	0003      	movs	r3, r0
    e9fc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e9fe:	2328      	movs	r3, #40	; 0x28
    ea00:	33ff      	adds	r3, #255	; 0xff
    ea02:	18fb      	adds	r3, r7, r3
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b00      	cmp	r3, #0
    ea08:	d06c      	beq.n	eae4 <LoRaMacCryptoHandleJoinAccept+0x534>
        {
            return retval;
    ea0a:	2328      	movs	r3, #40	; 0x28
    ea0c:	33ff      	adds	r3, #255	; 0xff
    ea0e:	18fb      	adds	r3, r7, r3
    ea10:	781b      	ldrb	r3, [r3, #0]
    ea12:	e081      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    ea14:	687b      	ldr	r3, [r7, #4]
    ea16:	1d99      	adds	r1, r3, #6
    ea18:	687b      	ldr	r3, [r7, #4]
    ea1a:	3309      	adds	r3, #9
    ea1c:	001a      	movs	r2, r3
    ea1e:	4b41      	ldr	r3, [pc, #260]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    ea20:	689b      	ldr	r3, [r3, #8]
    ea22:	2028      	movs	r0, #40	; 0x28
    ea24:	30ff      	adds	r0, #255	; 0xff
    ea26:	183c      	adds	r4, r7, r0
    ea28:	2007      	movs	r0, #7
    ea2a:	4d3f      	ldr	r5, [pc, #252]	; (eb28 <LoRaMacCryptoHandleJoinAccept+0x578>)
    ea2c:	47a8      	blx	r5
    ea2e:	0003      	movs	r3, r0
    ea30:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ea32:	2328      	movs	r3, #40	; 0x28
    ea34:	33ff      	adds	r3, #255	; 0xff
    ea36:	18fb      	adds	r3, r7, r3
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	d004      	beq.n	ea48 <LoRaMacCryptoHandleJoinAccept+0x498>
        {
            return retval;
    ea3e:	2328      	movs	r3, #40	; 0x28
    ea40:	33ff      	adds	r3, #255	; 0xff
    ea42:	18fb      	adds	r3, r7, r3
    ea44:	781b      	ldrb	r3, [r3, #0]
    ea46:	e067      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	1d99      	adds	r1, r3, #6
    ea4c:	687b      	ldr	r3, [r7, #4]
    ea4e:	3309      	adds	r3, #9
    ea50:	001a      	movs	r2, r3
    ea52:	4b34      	ldr	r3, [pc, #208]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    ea54:	689b      	ldr	r3, [r3, #8]
    ea56:	2028      	movs	r0, #40	; 0x28
    ea58:	30ff      	adds	r0, #255	; 0xff
    ea5a:	183c      	adds	r4, r7, r0
    ea5c:	2006      	movs	r0, #6
    ea5e:	4d32      	ldr	r5, [pc, #200]	; (eb28 <LoRaMacCryptoHandleJoinAccept+0x578>)
    ea60:	47a8      	blx	r5
    ea62:	0003      	movs	r3, r0
    ea64:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ea66:	2328      	movs	r3, #40	; 0x28
    ea68:	33ff      	adds	r3, #255	; 0xff
    ea6a:	18fb      	adds	r3, r7, r3
    ea6c:	781b      	ldrb	r3, [r3, #0]
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d004      	beq.n	ea7c <LoRaMacCryptoHandleJoinAccept+0x4cc>
        {
            return retval;
    ea72:	2328      	movs	r3, #40	; 0x28
    ea74:	33ff      	adds	r3, #255	; 0xff
    ea76:	18fb      	adds	r3, r7, r3
    ea78:	781b      	ldrb	r3, [r3, #0]
    ea7a:	e04d      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    ea7c:	687b      	ldr	r3, [r7, #4]
    ea7e:	1d99      	adds	r1, r3, #6
    ea80:	687b      	ldr	r3, [r7, #4]
    ea82:	3309      	adds	r3, #9
    ea84:	001a      	movs	r2, r3
    ea86:	4b27      	ldr	r3, [pc, #156]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    ea88:	689b      	ldr	r3, [r3, #8]
    ea8a:	2028      	movs	r0, #40	; 0x28
    ea8c:	30ff      	adds	r0, #255	; 0xff
    ea8e:	183c      	adds	r4, r7, r0
    ea90:	2004      	movs	r0, #4
    ea92:	4d25      	ldr	r5, [pc, #148]	; (eb28 <LoRaMacCryptoHandleJoinAccept+0x578>)
    ea94:	47a8      	blx	r5
    ea96:	0003      	movs	r3, r0
    ea98:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ea9a:	2328      	movs	r3, #40	; 0x28
    ea9c:	33ff      	adds	r3, #255	; 0xff
    ea9e:	18fb      	adds	r3, r7, r3
    eaa0:	781b      	ldrb	r3, [r3, #0]
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	d004      	beq.n	eab0 <LoRaMacCryptoHandleJoinAccept+0x500>
        {
            return retval;
    eaa6:	2328      	movs	r3, #40	; 0x28
    eaa8:	33ff      	adds	r3, #255	; 0xff
    eaaa:	18fb      	adds	r3, r7, r3
    eaac:	781b      	ldrb	r3, [r3, #0]
    eaae:	e033      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    eab0:	687b      	ldr	r3, [r7, #4]
    eab2:	1d99      	adds	r1, r3, #6
    eab4:	687b      	ldr	r3, [r7, #4]
    eab6:	3309      	adds	r3, #9
    eab8:	001a      	movs	r2, r3
    eaba:	4b1a      	ldr	r3, [pc, #104]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eabc:	689b      	ldr	r3, [r3, #8]
    eabe:	2028      	movs	r0, #40	; 0x28
    eac0:	30ff      	adds	r0, #255	; 0xff
    eac2:	183c      	adds	r4, r7, r0
    eac4:	2005      	movs	r0, #5
    eac6:	4d18      	ldr	r5, [pc, #96]	; (eb28 <LoRaMacCryptoHandleJoinAccept+0x578>)
    eac8:	47a8      	blx	r5
    eaca:	0003      	movs	r3, r0
    eacc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    eace:	2328      	movs	r3, #40	; 0x28
    ead0:	33ff      	adds	r3, #255	; 0xff
    ead2:	18fb      	adds	r3, r7, r3
    ead4:	781b      	ldrb	r3, [r3, #0]
    ead6:	2b00      	cmp	r3, #0
    ead8:	d004      	beq.n	eae4 <LoRaMacCryptoHandleJoinAccept+0x534>
        {
            return retval;
    eada:	2328      	movs	r3, #40	; 0x28
    eadc:	33ff      	adds	r3, #255	; 0xff
    eade:	18fb      	adds	r3, r7, r3
    eae0:	781b      	ldrb	r3, [r3, #0]
    eae2:	e019      	b.n	eb18 <LoRaMacCryptoHandleJoinAccept+0x568>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
    eae4:	4b0f      	ldr	r3, [pc, #60]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eae6:	2200      	movs	r2, #0
    eae8:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    eaea:	4b0e      	ldr	r3, [pc, #56]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eaec:	689b      	ldr	r3, [r3, #8]
    eaee:	2200      	movs	r2, #0
    eaf0:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    eaf2:	4b0c      	ldr	r3, [pc, #48]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eaf4:	689b      	ldr	r3, [r3, #8]
    eaf6:	2201      	movs	r2, #1
    eaf8:	4252      	negs	r2, r2
    eafa:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    eafc:	4b09      	ldr	r3, [pc, #36]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eafe:	689b      	ldr	r3, [r3, #8]
    eb00:	2201      	movs	r2, #1
    eb02:	4252      	negs	r2, r2
    eb04:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    eb06:	4b07      	ldr	r3, [pc, #28]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eb08:	689b      	ldr	r3, [r3, #8]
    eb0a:	2201      	movs	r2, #1
    eb0c:	4252      	negs	r2, r2
    eb0e:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    eb10:	4b04      	ldr	r3, [pc, #16]	; (eb24 <LoRaMacCryptoHandleJoinAccept+0x574>)
    eb12:	68db      	ldr	r3, [r3, #12]
    eb14:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    eb16:	2300      	movs	r3, #0
}
    eb18:	0018      	movs	r0, r3
    eb1a:	46bd      	mov	sp, r7
    eb1c:	b04c      	add	sp, #304	; 0x130
    eb1e:	bdb0      	pop	{r4, r5, r7, pc}
    eb20:	0000df09 	.word	0x0000df09
    eb24:	200014c4 	.word	0x200014c4
    eb28:	0000de39 	.word	0x0000de39

0000eb2c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    eb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb2e:	b08f      	sub	sp, #60	; 0x3c
    eb30:	af06      	add	r7, sp, #24
    eb32:	60f8      	str	r0, [r7, #12]
    eb34:	0008      	movs	r0, r1
    eb36:	0011      	movs	r1, r2
    eb38:	607b      	str	r3, [r7, #4]
    eb3a:	230b      	movs	r3, #11
    eb3c:	18fb      	adds	r3, r7, r3
    eb3e:	1c02      	adds	r2, r0, #0
    eb40:	701a      	strb	r2, [r3, #0]
    eb42:	230a      	movs	r3, #10
    eb44:	18fb      	adds	r3, r7, r3
    eb46:	1c0a      	adds	r2, r1, #0
    eb48:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    eb4a:	231e      	movs	r3, #30
    eb4c:	18fb      	adds	r3, r7, r3
    eb4e:	2210      	movs	r2, #16
    eb50:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
    eb52:	231f      	movs	r3, #31
    eb54:	18fb      	adds	r3, r7, r3
    eb56:	2207      	movs	r2, #7
    eb58:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d101      	bne.n	eb64 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    eb60:	2307      	movs	r3, #7
    eb62:	e102      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
    eb64:	4b83      	ldr	r3, [pc, #524]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    eb66:	689b      	ldr	r3, [r3, #8]
    eb68:	689a      	ldr	r2, [r3, #8]
    eb6a:	68fb      	ldr	r3, [r7, #12]
    eb6c:	429a      	cmp	r2, r3
    eb6e:	d901      	bls.n	eb74 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    eb70:	2305      	movs	r3, #5
    eb72:	e0fa      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
    eb74:	687b      	ldr	r3, [r7, #4]
    eb76:	2220      	movs	r2, #32
    eb78:	5c9b      	ldrb	r3, [r3, r2]
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	d103      	bne.n	eb86 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    eb7e:	231f      	movs	r3, #31
    eb80:	18fb      	adds	r3, r7, r3
    eb82:	2206      	movs	r2, #6
    eb84:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
    eb86:	4b7b      	ldr	r3, [pc, #492]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    eb88:	689b      	ldr	r3, [r3, #8]
    eb8a:	689a      	ldr	r2, [r3, #8]
    eb8c:	68fb      	ldr	r3, [r7, #12]
    eb8e:	429a      	cmp	r2, r3
    eb90:	d240      	bcs.n	ec14 <LoRaMacCryptoSecureMessage+0xe8>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
    eb92:	687b      	ldr	r3, [r7, #4]
    eb94:	6a58      	ldr	r0, [r3, #36]	; 0x24
    eb96:	687b      	ldr	r3, [r7, #4]
    eb98:	2228      	movs	r2, #40	; 0x28
    eb9a:	5c9b      	ldrb	r3, [r3, r2]
    eb9c:	b299      	uxth	r1, r3
    eb9e:	687b      	ldr	r3, [r7, #4]
    eba0:	689d      	ldr	r5, [r3, #8]
    eba2:	231e      	movs	r3, #30
    eba4:	18fc      	adds	r4, r7, r3
    eba6:	231f      	movs	r3, #31
    eba8:	18fb      	adds	r3, r7, r3
    ebaa:	781a      	ldrb	r2, [r3, #0]
    ebac:	68fb      	ldr	r3, [r7, #12]
    ebae:	9301      	str	r3, [sp, #4]
    ebb0:	2300      	movs	r3, #0
    ebb2:	9300      	str	r3, [sp, #0]
    ebb4:	002b      	movs	r3, r5
    ebb6:	4d70      	ldr	r5, [pc, #448]	; (ed78 <LoRaMacCryptoSecureMessage+0x24c>)
    ebb8:	47a8      	blx	r5
    ebba:	0003      	movs	r3, r0
    ebbc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ebbe:	231e      	movs	r3, #30
    ebc0:	18fb      	adds	r3, r7, r3
    ebc2:	781b      	ldrb	r3, [r3, #0]
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d003      	beq.n	ebd0 <LoRaMacCryptoSecureMessage+0xa4>
        {
            return retval;
    ebc8:	231e      	movs	r3, #30
    ebca:	18fb      	adds	r3, r7, r3
    ebcc:	781b      	ldrb	r3, [r3, #0]
    ebce:	e0cc      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    ebd0:	4b68      	ldr	r3, [pc, #416]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    ebd2:	789b      	ldrb	r3, [r3, #2]
    ebd4:	2b01      	cmp	r3, #1
    ebd6:	d11d      	bne.n	ec14 <LoRaMacCryptoSecureMessage+0xe8>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
    ebd8:	687b      	ldr	r3, [r7, #4]
    ebda:	7b1b      	ldrb	r3, [r3, #12]
    ebdc:	071b      	lsls	r3, r3, #28
    ebde:	0f1b      	lsrs	r3, r3, #28
    ebe0:	b2db      	uxtb	r3, r3
    ebe2:	b298      	uxth	r0, r3
    ebe4:	687b      	ldr	r3, [r7, #4]
    ebe6:	6899      	ldr	r1, [r3, #8]
    ebe8:	687b      	ldr	r3, [r7, #4]
    ebea:	3310      	adds	r3, #16
    ebec:	221e      	movs	r2, #30
    ebee:	18bc      	adds	r4, r7, r2
    ebf0:	9301      	str	r3, [sp, #4]
    ebf2:	68fb      	ldr	r3, [r7, #12]
    ebf4:	9300      	str	r3, [sp, #0]
    ebf6:	2300      	movs	r3, #0
    ebf8:	2200      	movs	r2, #0
    ebfa:	4d60      	ldr	r5, [pc, #384]	; (ed7c <LoRaMacCryptoSecureMessage+0x250>)
    ebfc:	47a8      	blx	r5
    ebfe:	0003      	movs	r3, r0
    ec00:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
    ec02:	231e      	movs	r3, #30
    ec04:	18fb      	adds	r3, r7, r3
    ec06:	781b      	ldrb	r3, [r3, #0]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d003      	beq.n	ec14 <LoRaMacCryptoSecureMessage+0xe8>
            {
                return retval;
    ec0c:	231e      	movs	r3, #30
    ec0e:	18fb      	adds	r3, r7, r3
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	e0aa      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
    ec14:	4b57      	ldr	r3, [pc, #348]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    ec16:	689b      	ldr	r3, [r3, #8]
    ec18:	68fa      	ldr	r2, [r7, #12]
    ec1a:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    ec1c:	4b55      	ldr	r3, [pc, #340]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    ec1e:	68db      	ldr	r3, [r3, #12]
    ec20:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    ec22:	687b      	ldr	r3, [r7, #4]
    ec24:	0018      	movs	r0, r3
    ec26:	4b56      	ldr	r3, [pc, #344]	; (ed80 <LoRaMacCryptoSecureMessage+0x254>)
    ec28:	4798      	blx	r3
    ec2a:	1e03      	subs	r3, r0, #0
    ec2c:	d001      	beq.n	ec32 <LoRaMacCryptoSecureMessage+0x106>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    ec2e:	230e      	movs	r3, #14
    ec30:	e09b      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    ec32:	4b50      	ldr	r3, [pc, #320]	; (ed74 <LoRaMacCryptoSecureMessage+0x248>)
    ec34:	789b      	ldrb	r3, [r3, #2]
    ec36:	2b01      	cmp	r3, #1
    ec38:	d16a      	bne.n	ed10 <LoRaMacCryptoSecureMessage+0x1e4>
    {
        uint32_t cmacS = 0;
    ec3a:	2300      	movs	r3, #0
    ec3c:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
    ec3e:	2300      	movs	r3, #0
    ec40:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	6818      	ldr	r0, [r3, #0]
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	791b      	ldrb	r3, [r3, #4]
    ec4a:	b29b      	uxth	r3, r3
    ec4c:	3b04      	subs	r3, #4
    ec4e:	b299      	uxth	r1, r3
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	7b1b      	ldrb	r3, [r3, #12]
    ec54:	069b      	lsls	r3, r3, #26
    ec56:	0fdb      	lsrs	r3, r3, #31
    ec58:	b2db      	uxtb	r3, r3
    ec5a:	1e5a      	subs	r2, r3, #1
    ec5c:	4193      	sbcs	r3, r2
    ec5e:	b2dd      	uxtb	r5, r3
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	689b      	ldr	r3, [r3, #8]
    ec64:	687a      	ldr	r2, [r7, #4]
    ec66:	89d2      	ldrh	r2, [r2, #14]
    ec68:	0016      	movs	r6, r2
    ec6a:	221e      	movs	r2, #30
    ec6c:	18bc      	adds	r4, r7, r2
    ec6e:	2218      	movs	r2, #24
    ec70:	18ba      	adds	r2, r7, r2
    ec72:	9204      	str	r2, [sp, #16]
    ec74:	9603      	str	r6, [sp, #12]
    ec76:	9302      	str	r3, [sp, #8]
    ec78:	230a      	movs	r3, #10
    ec7a:	18fb      	adds	r3, r7, r3
    ec7c:	781b      	ldrb	r3, [r3, #0]
    ec7e:	9301      	str	r3, [sp, #4]
    ec80:	230b      	movs	r3, #11
    ec82:	18fb      	adds	r3, r7, r3
    ec84:	781b      	ldrb	r3, [r3, #0]
    ec86:	9300      	str	r3, [sp, #0]
    ec88:	002b      	movs	r3, r5
    ec8a:	2205      	movs	r2, #5
    ec8c:	4d3d      	ldr	r5, [pc, #244]	; (ed84 <LoRaMacCryptoSecureMessage+0x258>)
    ec8e:	47a8      	blx	r5
    ec90:	0003      	movs	r3, r0
    ec92:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ec94:	231e      	movs	r3, #30
    ec96:	18fb      	adds	r3, r7, r3
    ec98:	781b      	ldrb	r3, [r3, #0]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d003      	beq.n	eca6 <LoRaMacCryptoSecureMessage+0x17a>
        {
            return retval;
    ec9e:	231e      	movs	r3, #30
    eca0:	18fb      	adds	r3, r7, r3
    eca2:	781b      	ldrb	r3, [r3, #0]
    eca4:	e061      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
    eca6:	687b      	ldr	r3, [r7, #4]
    eca8:	6818      	ldr	r0, [r3, #0]
    ecaa:	687b      	ldr	r3, [r7, #4]
    ecac:	791b      	ldrb	r3, [r3, #4]
    ecae:	b29b      	uxth	r3, r3
    ecb0:	3b04      	subs	r3, #4
    ecb2:	b299      	uxth	r1, r3
    ecb4:	687b      	ldr	r3, [r7, #4]
    ecb6:	7b1b      	ldrb	r3, [r3, #12]
    ecb8:	069b      	lsls	r3, r3, #26
    ecba:	0fdb      	lsrs	r3, r3, #31
    ecbc:	b2db      	uxtb	r3, r3
    ecbe:	1e5a      	subs	r2, r3, #1
    ecc0:	4193      	sbcs	r3, r2
    ecc2:	b2dd      	uxtb	r5, r3
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	689b      	ldr	r3, [r3, #8]
    ecc8:	687a      	ldr	r2, [r7, #4]
    ecca:	89d2      	ldrh	r2, [r2, #14]
    eccc:	0016      	movs	r6, r2
    ecce:	221e      	movs	r2, #30
    ecd0:	18bc      	adds	r4, r7, r2
    ecd2:	2214      	movs	r2, #20
    ecd4:	18ba      	adds	r2, r7, r2
    ecd6:	9203      	str	r2, [sp, #12]
    ecd8:	9602      	str	r6, [sp, #8]
    ecda:	9301      	str	r3, [sp, #4]
    ecdc:	2300      	movs	r3, #0
    ecde:	9300      	str	r3, [sp, #0]
    ece0:	002b      	movs	r3, r5
    ece2:	2204      	movs	r2, #4
    ece4:	4d28      	ldr	r5, [pc, #160]	; (ed88 <LoRaMacCryptoSecureMessage+0x25c>)
    ece6:	47a8      	blx	r5
    ece8:	0003      	movs	r3, r0
    ecea:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ecec:	231e      	movs	r3, #30
    ecee:	18fb      	adds	r3, r7, r3
    ecf0:	781b      	ldrb	r3, [r3, #0]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d003      	beq.n	ecfe <LoRaMacCryptoSecureMessage+0x1d2>
        {
            return retval;
    ecf6:	231e      	movs	r3, #30
    ecf8:	18fb      	adds	r3, r7, r3
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	e035      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
    ecfe:	697b      	ldr	r3, [r7, #20]
    ed00:	041a      	lsls	r2, r3, #16
    ed02:	69bb      	ldr	r3, [r7, #24]
    ed04:	041b      	lsls	r3, r3, #16
    ed06:	0c1b      	lsrs	r3, r3, #16
    ed08:	431a      	orrs	r2, r3
    ed0a:	687b      	ldr	r3, [r7, #4]
    ed0c:	62da      	str	r2, [r3, #44]	; 0x2c
    ed0e:	e023      	b.n	ed58 <LoRaMacCryptoSecureMessage+0x22c>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
    ed10:	687b      	ldr	r3, [r7, #4]
    ed12:	6818      	ldr	r0, [r3, #0]
    ed14:	687b      	ldr	r3, [r7, #4]
    ed16:	791b      	ldrb	r3, [r3, #4]
    ed18:	b29b      	uxth	r3, r3
    ed1a:	3b04      	subs	r3, #4
    ed1c:	b299      	uxth	r1, r3
    ed1e:	687b      	ldr	r3, [r7, #4]
    ed20:	689b      	ldr	r3, [r3, #8]
    ed22:	687a      	ldr	r2, [r7, #4]
    ed24:	89d2      	ldrh	r2, [r2, #14]
    ed26:	0015      	movs	r5, r2
    ed28:	687a      	ldr	r2, [r7, #4]
    ed2a:	322c      	adds	r2, #44	; 0x2c
    ed2c:	241e      	movs	r4, #30
    ed2e:	193c      	adds	r4, r7, r4
    ed30:	9203      	str	r2, [sp, #12]
    ed32:	9502      	str	r5, [sp, #8]
    ed34:	9301      	str	r3, [sp, #4]
    ed36:	2300      	movs	r3, #0
    ed38:	9300      	str	r3, [sp, #0]
    ed3a:	2300      	movs	r3, #0
    ed3c:	2206      	movs	r2, #6
    ed3e:	4d12      	ldr	r5, [pc, #72]	; (ed88 <LoRaMacCryptoSecureMessage+0x25c>)
    ed40:	47a8      	blx	r5
    ed42:	0003      	movs	r3, r0
    ed44:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ed46:	231e      	movs	r3, #30
    ed48:	18fb      	adds	r3, r7, r3
    ed4a:	781b      	ldrb	r3, [r3, #0]
    ed4c:	2b00      	cmp	r3, #0
    ed4e:	d003      	beq.n	ed58 <LoRaMacCryptoSecureMessage+0x22c>
        {
            return retval;
    ed50:	231e      	movs	r3, #30
    ed52:	18fb      	adds	r3, r7, r3
    ed54:	781b      	ldrb	r3, [r3, #0]
    ed56:	e008      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	0018      	movs	r0, r3
    ed5c:	4b08      	ldr	r3, [pc, #32]	; (ed80 <LoRaMacCryptoSecureMessage+0x254>)
    ed5e:	4798      	blx	r3
    ed60:	1e03      	subs	r3, r0, #0
    ed62:	d001      	beq.n	ed68 <LoRaMacCryptoSecureMessage+0x23c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    ed64:	230e      	movs	r3, #14
    ed66:	e000      	b.n	ed6a <LoRaMacCryptoSecureMessage+0x23e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    ed68:	2300      	movs	r3, #0
}
    ed6a:	0018      	movs	r0, r3
    ed6c:	46bd      	mov	sp, r7
    ed6e:	b009      	add	sp, #36	; 0x24
    ed70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed72:	46c0      	nop			; (mov r8, r8)
    ed74:	200014c4 	.word	0x200014c4
    ed78:	0000d349 	.word	0x0000d349
    ed7c:	0000d581 	.word	0x0000d581
    ed80:	0000fc1d 	.word	0x0000fc1d
    ed84:	0000dc79 	.word	0x0000dc79
    ed88:	0000d8a5 	.word	0x0000d8a5

0000ed8c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
    ed8c:	b5b0      	push	{r4, r5, r7, lr}
    ed8e:	b08a      	sub	sp, #40	; 0x28
    ed90:	af04      	add	r7, sp, #16
    ed92:	60b9      	str	r1, [r7, #8]
    ed94:	0011      	movs	r1, r2
    ed96:	607b      	str	r3, [r7, #4]
    ed98:	230f      	movs	r3, #15
    ed9a:	18fb      	adds	r3, r7, r3
    ed9c:	1c02      	adds	r2, r0, #0
    ed9e:	701a      	strb	r2, [r3, #0]
    eda0:	230e      	movs	r3, #14
    eda2:	18fb      	adds	r3, r7, r3
    eda4:	1c0a      	adds	r2, r1, #0
    eda6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
    eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edaa:	2b00      	cmp	r3, #0
    edac:	d101      	bne.n	edb2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    edae:	2307      	movs	r3, #7
    edb0:	e0d3      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    edb2:	687a      	ldr	r2, [r7, #4]
    edb4:	230e      	movs	r3, #14
    edb6:	18fb      	adds	r3, r7, r3
    edb8:	781b      	ldrb	r3, [r3, #0]
    edba:	0011      	movs	r1, r2
    edbc:	0018      	movs	r0, r3
    edbe:	4b69      	ldr	r3, [pc, #420]	; (ef64 <LoRaMacCryptoUnsecureMessage+0x1d8>)
    edc0:	4798      	blx	r3
    edc2:	0003      	movs	r3, r0
    edc4:	001a      	movs	r2, r3
    edc6:	2301      	movs	r3, #1
    edc8:	4053      	eors	r3, r2
    edca:	b2db      	uxtb	r3, r3
    edcc:	2b00      	cmp	r3, #0
    edce:	d001      	beq.n	edd4 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    edd0:	2305      	movs	r3, #5
    edd2:	e0c2      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    edd4:	2315      	movs	r3, #21
    edd6:	18fb      	adds	r3, r7, r3
    edd8:	2210      	movs	r2, #16
    edda:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
    eddc:	2317      	movs	r3, #23
    edde:	18fb      	adds	r3, r7, r3
    ede0:	2207      	movs	r2, #7
    ede2:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
    ede4:	2314      	movs	r3, #20
    ede6:	18fb      	adds	r3, r7, r3
    ede8:	2205      	movs	r2, #5
    edea:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
    edec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edee:	0018      	movs	r0, r3
    edf0:	4b5d      	ldr	r3, [pc, #372]	; (ef68 <LoRaMacCryptoUnsecureMessage+0x1dc>)
    edf2:	4798      	blx	r3
    edf4:	1e03      	subs	r3, r0, #0
    edf6:	d001      	beq.n	edfc <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    edf8:	230d      	movs	r3, #13
    edfa:	e0ae      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
    edfc:	2315      	movs	r3, #21
    edfe:	18fc      	adds	r4, r7, r3
    ee00:	2310      	movs	r3, #16
    ee02:	18fa      	adds	r2, r7, r3
    ee04:	230f      	movs	r3, #15
    ee06:	18fb      	adds	r3, r7, r3
    ee08:	781b      	ldrb	r3, [r3, #0]
    ee0a:	0011      	movs	r1, r2
    ee0c:	0018      	movs	r0, r3
    ee0e:	4b57      	ldr	r3, [pc, #348]	; (ef6c <LoRaMacCryptoUnsecureMessage+0x1e0>)
    ee10:	4798      	blx	r3
    ee12:	0003      	movs	r3, r0
    ee14:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    ee16:	2315      	movs	r3, #21
    ee18:	18fb      	adds	r3, r7, r3
    ee1a:	781b      	ldrb	r3, [r3, #0]
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d003      	beq.n	ee28 <LoRaMacCryptoUnsecureMessage+0x9c>
    {
        return retval;
    ee20:	2315      	movs	r3, #21
    ee22:	18fb      	adds	r3, r7, r3
    ee24:	781b      	ldrb	r3, [r3, #0]
    ee26:	e098      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
    ee28:	693a      	ldr	r2, [r7, #16]
    ee2a:	2317      	movs	r3, #23
    ee2c:	18fb      	adds	r3, r7, r3
    ee2e:	7852      	ldrb	r2, [r2, #1]
    ee30:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
    ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee34:	689a      	ldr	r2, [r3, #8]
    ee36:	68bb      	ldr	r3, [r7, #8]
    ee38:	429a      	cmp	r2, r3
    ee3a:	d001      	beq.n	ee40 <LoRaMacCryptoUnsecureMessage+0xb4>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    ee3c:	2302      	movs	r3, #2
    ee3e:	e08c      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
    ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee42:	7b1b      	ldrb	r3, [r3, #12]
    ee44:	069b      	lsls	r3, r3, #26
    ee46:	0fdb      	lsrs	r3, r3, #31
    ee48:	b2db      	uxtb	r3, r3
    ee4a:	001a      	movs	r2, r3
    ee4c:	2316      	movs	r3, #22
    ee4e:	18fb      	adds	r3, r7, r3
    ee50:	1e51      	subs	r1, r2, #1
    ee52:	418a      	sbcs	r2, r1
    ee54:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
    ee56:	4b46      	ldr	r3, [pc, #280]	; (ef70 <LoRaMacCryptoUnsecureMessage+0x1e4>)
    ee58:	789b      	ldrb	r3, [r3, #2]
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d103      	bne.n	ee66 <LoRaMacCryptoUnsecureMessage+0xda>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
    ee5e:	2316      	movs	r3, #22
    ee60:	18fb      	adds	r3, r7, r3
    ee62:	2200      	movs	r2, #0
    ee64:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
    ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee68:	6818      	ldr	r0, [r3, #0]
    ee6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee6c:	791b      	ldrb	r3, [r3, #4]
    ee6e:	b29b      	uxth	r3, r3
    ee70:	3b04      	subs	r3, #4
    ee72:	b299      	uxth	r1, r3
    ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ee78:	2215      	movs	r2, #21
    ee7a:	18bc      	adds	r4, r7, r2
    ee7c:	2216      	movs	r2, #22
    ee7e:	18ba      	adds	r2, r7, r2
    ee80:	7815      	ldrb	r5, [r2, #0]
    ee82:	2214      	movs	r2, #20
    ee84:	18ba      	adds	r2, r7, r2
    ee86:	7812      	ldrb	r2, [r2, #0]
    ee88:	9303      	str	r3, [sp, #12]
    ee8a:	687b      	ldr	r3, [r7, #4]
    ee8c:	9302      	str	r3, [sp, #8]
    ee8e:	68bb      	ldr	r3, [r7, #8]
    ee90:	9301      	str	r3, [sp, #4]
    ee92:	2301      	movs	r3, #1
    ee94:	9300      	str	r3, [sp, #0]
    ee96:	002b      	movs	r3, r5
    ee98:	4d36      	ldr	r5, [pc, #216]	; (ef74 <LoRaMacCryptoUnsecureMessage+0x1e8>)
    ee9a:	47a8      	blx	r5
    ee9c:	0003      	movs	r3, r0
    ee9e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    eea0:	2315      	movs	r3, #21
    eea2:	18fb      	adds	r3, r7, r3
    eea4:	781b      	ldrb	r3, [r3, #0]
    eea6:	2b00      	cmp	r3, #0
    eea8:	d003      	beq.n	eeb2 <LoRaMacCryptoUnsecureMessage+0x126>
    {
        return retval;
    eeaa:	2315      	movs	r3, #21
    eeac:	18fb      	adds	r3, r7, r3
    eeae:	781b      	ldrb	r3, [r3, #0]
    eeb0:	e053      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
    eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeb4:	2220      	movs	r2, #32
    eeb6:	5c9b      	ldrb	r3, [r3, r2]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d103      	bne.n	eec4 <LoRaMacCryptoUnsecureMessage+0x138>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    eebc:	2317      	movs	r3, #23
    eebe:	18fb      	adds	r3, r7, r3
    eec0:	2206      	movs	r2, #6
    eec2:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
    eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eec6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeca:	2228      	movs	r2, #40	; 0x28
    eecc:	5c9b      	ldrb	r3, [r3, r2]
    eece:	b299      	uxth	r1, r3
    eed0:	2315      	movs	r3, #21
    eed2:	18fc      	adds	r4, r7, r3
    eed4:	68bd      	ldr	r5, [r7, #8]
    eed6:	2317      	movs	r3, #23
    eed8:	18fb      	adds	r3, r7, r3
    eeda:	781a      	ldrb	r2, [r3, #0]
    eedc:	687b      	ldr	r3, [r7, #4]
    eede:	9301      	str	r3, [sp, #4]
    eee0:	2301      	movs	r3, #1
    eee2:	9300      	str	r3, [sp, #0]
    eee4:	002b      	movs	r3, r5
    eee6:	4d24      	ldr	r5, [pc, #144]	; (ef78 <LoRaMacCryptoUnsecureMessage+0x1ec>)
    eee8:	47a8      	blx	r5
    eeea:	0003      	movs	r3, r0
    eeec:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    eeee:	2315      	movs	r3, #21
    eef0:	18fb      	adds	r3, r7, r3
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	2b00      	cmp	r3, #0
    eef6:	d003      	beq.n	ef00 <LoRaMacCryptoUnsecureMessage+0x174>
    {
        return retval;
    eef8:	2315      	movs	r3, #21
    eefa:	18fb      	adds	r3, r7, r3
    eefc:	781b      	ldrb	r3, [r3, #0]
    eefe:	e02c      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    ef00:	4b1b      	ldr	r3, [pc, #108]	; (ef70 <LoRaMacCryptoUnsecureMessage+0x1e4>)
    ef02:	789b      	ldrb	r3, [r3, #2]
    ef04:	2b01      	cmp	r3, #1
    ef06:	d11f      	bne.n	ef48 <LoRaMacCryptoUnsecureMessage+0x1bc>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
    ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef0a:	7b1b      	ldrb	r3, [r3, #12]
    ef0c:	071b      	lsls	r3, r3, #28
    ef0e:	0f1b      	lsrs	r3, r3, #28
    ef10:	b2db      	uxtb	r3, r3
    ef12:	b298      	uxth	r0, r3
    ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef16:	3310      	adds	r3, #16
    ef18:	2215      	movs	r2, #21
    ef1a:	18bc      	adds	r4, r7, r2
    ef1c:	220e      	movs	r2, #14
    ef1e:	18ba      	adds	r2, r7, r2
    ef20:	7812      	ldrb	r2, [r2, #0]
    ef22:	68b9      	ldr	r1, [r7, #8]
    ef24:	9301      	str	r3, [sp, #4]
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	9300      	str	r3, [sp, #0]
    ef2a:	0013      	movs	r3, r2
    ef2c:	2201      	movs	r2, #1
    ef2e:	4d13      	ldr	r5, [pc, #76]	; (ef7c <LoRaMacCryptoUnsecureMessage+0x1f0>)
    ef30:	47a8      	blx	r5
    ef32:	0003      	movs	r3, r0
    ef34:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ef36:	2315      	movs	r3, #21
    ef38:	18fb      	adds	r3, r7, r3
    ef3a:	781b      	ldrb	r3, [r3, #0]
    ef3c:	2b00      	cmp	r3, #0
    ef3e:	d003      	beq.n	ef48 <LoRaMacCryptoUnsecureMessage+0x1bc>
        {
            return retval;
    ef40:	2315      	movs	r3, #21
    ef42:	18fb      	adds	r3, r7, r3
    ef44:	781b      	ldrb	r3, [r3, #0]
    ef46:	e008      	b.n	ef5a <LoRaMacCryptoUnsecureMessage+0x1ce>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
    ef48:	687a      	ldr	r2, [r7, #4]
    ef4a:	230e      	movs	r3, #14
    ef4c:	18fb      	adds	r3, r7, r3
    ef4e:	781b      	ldrb	r3, [r3, #0]
    ef50:	0011      	movs	r1, r2
    ef52:	0018      	movs	r0, r3
    ef54:	4b0a      	ldr	r3, [pc, #40]	; (ef80 <LoRaMacCryptoUnsecureMessage+0x1f4>)
    ef56:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    ef58:	2300      	movs	r3, #0
}
    ef5a:	0018      	movs	r0, r3
    ef5c:	46bd      	mov	sp, r7
    ef5e:	b006      	add	sp, #24
    ef60:	bdb0      	pop	{r4, r5, r7, pc}
    ef62:	46c0      	nop			; (mov r8, r8)
    ef64:	0000e0a1 	.word	0x0000e0a1
    ef68:	0000f555 	.word	0x0000f555
    ef6c:	0000ddd1 	.word	0x0000ddd1
    ef70:	200014c4 	.word	0x200014c4
    ef74:	0000d9f1 	.word	0x0000d9f1
    ef78:	0000d349 	.word	0x0000d349
    ef7c:	0000d581 	.word	0x0000d581
    ef80:	0000e15d 	.word	0x0000e15d

0000ef84 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
    ef84:	b580      	push	{r7, lr}
    ef86:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
    ef88:	4b04      	ldr	r3, [pc, #16]	; (ef9c <NvmCtxChanged+0x18>)
    ef8a:	681b      	ldr	r3, [r3, #0]
    ef8c:	2b00      	cmp	r3, #0
    ef8e:	d002      	beq.n	ef96 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
    ef90:	4b02      	ldr	r3, [pc, #8]	; (ef9c <NvmCtxChanged+0x18>)
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	4798      	blx	r3
    }
}
    ef96:	46c0      	nop			; (mov r8, r8)
    ef98:	46bd      	mov	sp, r7
    ef9a:	bd80      	pop	{r7, pc}
    ef9c:	20001528 	.word	0x20001528

0000efa0 <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
    efa0:	b580      	push	{r7, lr}
    efa2:	b082      	sub	sp, #8
    efa4:	af00      	add	r7, sp, #0
    efa6:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
    efa8:	4b04      	ldr	r3, [pc, #16]	; (efbc <LoRaMacFCntHandlerInit+0x1c>)
    efaa:	4798      	blx	r3

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
    efac:	4b04      	ldr	r3, [pc, #16]	; (efc0 <LoRaMacFCntHandlerInit+0x20>)
    efae:	687a      	ldr	r2, [r7, #4]
    efb0:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    efb2:	2300      	movs	r3, #0
}
    efb4:	0018      	movs	r0, r3
    efb6:	46bd      	mov	sp, r7
    efb8:	b002      	add	sp, #8
    efba:	bd80      	pop	{r7, pc}
    efbc:	0000f239 	.word	0x0000f239
    efc0:	20001528 	.word	0x20001528

0000efc4 <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
    efc4:	b580      	push	{r7, lr}
    efc6:	b082      	sub	sp, #8
    efc8:	af00      	add	r7, sp, #0
    efca:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
    efcc:	687b      	ldr	r3, [r7, #4]
    efce:	2b00      	cmp	r3, #0
    efd0:	d007      	beq.n	efe2 <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
    efd2:	6879      	ldr	r1, [r7, #4]
    efd4:	4b05      	ldr	r3, [pc, #20]	; (efec <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
    efd6:	2224      	movs	r2, #36	; 0x24
    efd8:	0018      	movs	r0, r3
    efda:	4b05      	ldr	r3, [pc, #20]	; (eff0 <LoRaMacFCntHandlerRestoreNvmCtx+0x2c>)
    efdc:	4798      	blx	r3
        return LORAMAC_FCNT_HANDLER_SUCCESS;
    efde:	2300      	movs	r3, #0
    efe0:	e000      	b.n	efe4 <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    efe2:	2304      	movs	r3, #4
    }
}
    efe4:	0018      	movs	r0, r3
    efe6:	46bd      	mov	sp, r7
    efe8:	b002      	add	sp, #8
    efea:	bd80      	pop	{r7, pc}
    efec:	20001504 	.word	0x20001504
    eff0:	00004339 	.word	0x00004339

0000eff4 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
    eff4:	b580      	push	{r7, lr}
    eff6:	b082      	sub	sp, #8
    eff8:	af00      	add	r7, sp, #0
    effa:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	2224      	movs	r2, #36	; 0x24
    f000:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
    f002:	4b02      	ldr	r3, [pc, #8]	; (f00c <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
    f004:	0018      	movs	r0, r3
    f006:	46bd      	mov	sp, r7
    f008:	b002      	add	sp, #8
    f00a:	bd80      	pop	{r7, pc}
    f00c:	20001504 	.word	0x20001504

0000f010 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
    f010:	b580      	push	{r7, lr}
    f012:	b086      	sub	sp, #24
    f014:	af00      	add	r7, sp, #0
    f016:	60ba      	str	r2, [r7, #8]
    f018:	607b      	str	r3, [r7, #4]
    f01a:	230f      	movs	r3, #15
    f01c:	18fb      	adds	r3, r7, r3
    f01e:	1c02      	adds	r2, r0, #0
    f020:	701a      	strb	r2, [r3, #0]
    f022:	230e      	movs	r3, #14
    f024:	18fb      	adds	r3, r7, r3
    f026:	1c0a      	adds	r2, r1, #0
    f028:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
    f02a:	2300      	movs	r3, #0
    f02c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
    f02e:	2300      	movs	r3, #0
    f030:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
    f032:	68bb      	ldr	r3, [r7, #8]
    f034:	2b00      	cmp	r3, #0
    f036:	d005      	beq.n	f044 <LoRaMacGetFCntDown+0x34>
    f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f03a:	2b00      	cmp	r3, #0
    f03c:	d002      	beq.n	f044 <LoRaMacGetFCntDown+0x34>
    f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f040:	2b00      	cmp	r3, #0
    f042:	d101      	bne.n	f048 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    f044:	2304      	movs	r3, #4
    f046:	e089      	b.n	f15c <LoRaMacGetFCntDown+0x14c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
    f048:	230f      	movs	r3, #15
    f04a:	18fb      	adds	r3, r7, r3
    f04c:	781b      	ldrb	r3, [r3, #0]
    f04e:	2b04      	cmp	r3, #4
    f050:	d843      	bhi.n	f0da <LoRaMacGetFCntDown+0xca>
    f052:	009a      	lsls	r2, r3, #2
    f054:	4b43      	ldr	r3, [pc, #268]	; (f164 <LoRaMacGetFCntDown+0x154>)
    f056:	18d3      	adds	r3, r2, r3
    f058:	681b      	ldr	r3, [r3, #0]
    f05a:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
    f05c:	1d3b      	adds	r3, r7, #4
    f05e:	789b      	ldrb	r3, [r3, #2]
    f060:	2b01      	cmp	r3, #1
    f062:	d117      	bne.n	f094 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
    f064:	230e      	movs	r3, #14
    f066:	18fb      	adds	r3, r7, r3
    f068:	781b      	ldrb	r3, [r3, #0]
    f06a:	2b00      	cmp	r3, #0
    f06c:	d004      	beq.n	f078 <LoRaMacGetFCntDown+0x68>
    f06e:	230e      	movs	r3, #14
    f070:	18fb      	adds	r3, r7, r3
    f072:	781b      	ldrb	r3, [r3, #0]
    f074:	2b03      	cmp	r3, #3
    f076:	d106      	bne.n	f086 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
    f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f07a:	2202      	movs	r2, #2
    f07c:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
    f07e:	4b3a      	ldr	r3, [pc, #232]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f080:	689b      	ldr	r3, [r3, #8]
    f082:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
    f084:	e02b      	b.n	f0de <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
    f086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f088:	2201      	movs	r2, #1
    f08a:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
    f08c:	4b36      	ldr	r3, [pc, #216]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f08e:	685b      	ldr	r3, [r3, #4]
    f090:	617b      	str	r3, [r7, #20]
            break;
    f092:	e024      	b.n	f0de <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
    f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f096:	2203      	movs	r2, #3
    f098:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
    f09a:	4b33      	ldr	r3, [pc, #204]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f09c:	68db      	ldr	r3, [r3, #12]
    f09e:	617b      	str	r3, [r7, #20]
            break;
    f0a0:	e01d      	b.n	f0de <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
    f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0a4:	2204      	movs	r2, #4
    f0a6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
    f0a8:	4b2f      	ldr	r3, [pc, #188]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f0aa:	691b      	ldr	r3, [r3, #16]
    f0ac:	617b      	str	r3, [r7, #20]
            break;
    f0ae:	e016      	b.n	f0de <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
    f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0b2:	2205      	movs	r2, #5
    f0b4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
    f0b6:	4b2c      	ldr	r3, [pc, #176]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f0b8:	695b      	ldr	r3, [r3, #20]
    f0ba:	617b      	str	r3, [r7, #20]
            break;
    f0bc:	e00f      	b.n	f0de <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
    f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0c0:	2206      	movs	r2, #6
    f0c2:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    f0c4:	4b28      	ldr	r3, [pc, #160]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f0c6:	69db      	ldr	r3, [r3, #28]
    f0c8:	617b      	str	r3, [r7, #20]
            break;
    f0ca:	e008      	b.n	f0de <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
    f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0ce:	2207      	movs	r2, #7
    f0d0:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    f0d2:	4b25      	ldr	r3, [pc, #148]	; (f168 <LoRaMacGetFCntDown+0x158>)
    f0d4:	69db      	ldr	r3, [r3, #28]
    f0d6:	617b      	str	r3, [r7, #20]
            break;
    f0d8:	e001      	b.n	f0de <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    f0da:	2305      	movs	r3, #5
    f0dc:	e03e      	b.n	f15c <LoRaMacGetFCntDown+0x14c>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
    f0de:	697b      	ldr	r3, [r7, #20]
    f0e0:	3301      	adds	r3, #1
    f0e2:	d105      	bne.n	f0f0 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
    f0e4:	68bb      	ldr	r3, [r7, #8]
    f0e6:	89db      	ldrh	r3, [r3, #14]
    f0e8:	001a      	movs	r2, r3
    f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f0ec:	601a      	str	r2, [r3, #0]
    f0ee:	e024      	b.n	f13a <LoRaMacGetFCntDown+0x12a>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
    f0f0:	68bb      	ldr	r3, [r7, #8]
    f0f2:	89db      	ldrh	r3, [r3, #14]
    f0f4:	001a      	movs	r2, r3
    f0f6:	697b      	ldr	r3, [r7, #20]
    f0f8:	041b      	lsls	r3, r3, #16
    f0fa:	0c1b      	lsrs	r3, r3, #16
    f0fc:	1ad3      	subs	r3, r2, r3
    f0fe:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
    f100:	693b      	ldr	r3, [r7, #16]
    f102:	2b00      	cmp	r3, #0
    f104:	dd05      	ble.n	f112 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
    f106:	693a      	ldr	r2, [r7, #16]
    f108:	697b      	ldr	r3, [r7, #20]
    f10a:	18d2      	adds	r2, r2, r3
    f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f10e:	601a      	str	r2, [r3, #0]
    f110:	e013      	b.n	f13a <LoRaMacGetFCntDown+0x12a>
        }
        else if( fCntDiff == 0 )
    f112:	693b      	ldr	r3, [r7, #16]
    f114:	2b00      	cmp	r3, #0
    f116:	d104      	bne.n	f122 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
    f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f11a:	697a      	ldr	r2, [r7, #20]
    f11c:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
    f11e:	2301      	movs	r3, #1
    f120:	e01c      	b.n	f15c <LoRaMacGetFCntDown+0x14c>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = previousDown + fCntDiff + ( 0x10000 + ( previousDown & 0xFFFF0000 ) );
    f122:	693a      	ldr	r2, [r7, #16]
    f124:	697b      	ldr	r3, [r7, #20]
    f126:	18d2      	adds	r2, r2, r3
    f128:	697b      	ldr	r3, [r7, #20]
    f12a:	0c1b      	lsrs	r3, r3, #16
    f12c:	041b      	lsls	r3, r3, #16
    f12e:	18d3      	adds	r3, r2, r3
    f130:	2280      	movs	r2, #128	; 0x80
    f132:	0252      	lsls	r2, r2, #9
    f134:	189a      	adds	r2, r3, r2
    f136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f138:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
    f13a:	1d3b      	adds	r3, r7, #4
    f13c:	789b      	ldrb	r3, [r3, #2]
    f13e:	2b00      	cmp	r3, #0
    f140:	d10b      	bne.n	f15a <LoRaMacGetFCntDown+0x14a>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
    f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f144:	681b      	ldr	r3, [r3, #0]
    f146:	001a      	movs	r2, r3
    f148:	697b      	ldr	r3, [r7, #20]
    f14a:	1ad2      	subs	r2, r2, r3
    f14c:	2320      	movs	r3, #32
    f14e:	18fb      	adds	r3, r7, r3
    f150:	881b      	ldrh	r3, [r3, #0]
    f152:	429a      	cmp	r2, r3
    f154:	db01      	blt.n	f15a <LoRaMacGetFCntDown+0x14a>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
    f156:	2302      	movs	r3, #2
    f158:	e000      	b.n	f15c <LoRaMacGetFCntDown+0x14c>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f15a:	2300      	movs	r3, #0
}
    f15c:	0018      	movs	r0, r3
    f15e:	46bd      	mov	sp, r7
    f160:	b006      	add	sp, #24
    f162:	bd80      	pop	{r7, pc}
    f164:	0001f650 	.word	0x0001f650
    f168:	20001504 	.word	0x20001504

0000f16c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    f16c:	b580      	push	{r7, lr}
    f16e:	b082      	sub	sp, #8
    f170:	af00      	add	r7, sp, #0
    f172:	0002      	movs	r2, r0
    f174:	6039      	str	r1, [r7, #0]
    f176:	1dfb      	adds	r3, r7, #7
    f178:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
    f17a:	1dfb      	adds	r3, r7, #7
    f17c:	781b      	ldrb	r3, [r3, #0]
    f17e:	2b07      	cmp	r3, #7
    f180:	d822      	bhi.n	f1c8 <LoRaMacSetFCntDown+0x5c>
    f182:	009a      	lsls	r2, r3, #2
    f184:	4b15      	ldr	r3, [pc, #84]	; (f1dc <LoRaMacSetFCntDown+0x70>)
    f186:	18d3      	adds	r3, r2, r3
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
    f18c:	2303      	movs	r3, #3
    f18e:	e020      	b.n	f1d2 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
    f190:	4b13      	ldr	r3, [pc, #76]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f192:	683a      	ldr	r2, [r7, #0]
    f194:	605a      	str	r2, [r3, #4]
            break;
    f196:	e019      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
    f198:	4b11      	ldr	r3, [pc, #68]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f19a:	683a      	ldr	r2, [r7, #0]
    f19c:	609a      	str	r2, [r3, #8]
            break;
    f19e:	e015      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
    f1a0:	4b0f      	ldr	r3, [pc, #60]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f1a2:	683a      	ldr	r2, [r7, #0]
    f1a4:	60da      	str	r2, [r3, #12]
            break;
    f1a6:	e011      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
    f1a8:	4b0d      	ldr	r3, [pc, #52]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f1aa:	683a      	ldr	r2, [r7, #0]
    f1ac:	611a      	str	r2, [r3, #16]
            break;
    f1ae:	e00d      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
    f1b0:	4b0b      	ldr	r3, [pc, #44]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f1b2:	683a      	ldr	r2, [r7, #0]
    f1b4:	615a      	str	r2, [r3, #20]
            break;
    f1b6:	e009      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
    f1b8:	4b09      	ldr	r3, [pc, #36]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f1ba:	683a      	ldr	r2, [r7, #0]
    f1bc:	619a      	str	r2, [r3, #24]
            break;
    f1be:	e005      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
    f1c0:	4b07      	ldr	r3, [pc, #28]	; (f1e0 <LoRaMacSetFCntDown+0x74>)
    f1c2:	683a      	ldr	r2, [r7, #0]
    f1c4:	61da      	str	r2, [r3, #28]
            break;
    f1c6:	e001      	b.n	f1cc <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    f1c8:	2305      	movs	r3, #5
    f1ca:	e002      	b.n	f1d2 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
    f1cc:	4b05      	ldr	r3, [pc, #20]	; (f1e4 <LoRaMacSetFCntDown+0x78>)
    f1ce:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f1d0:	2300      	movs	r3, #0
}
    f1d2:	0018      	movs	r0, r3
    f1d4:	46bd      	mov	sp, r7
    f1d6:	b002      	add	sp, #8
    f1d8:	bd80      	pop	{r7, pc}
    f1da:	46c0      	nop			; (mov r8, r8)
    f1dc:	0001f664 	.word	0x0001f664
    f1e0:	20001504 	.word	0x20001504
    f1e4:	0000ef85 	.word	0x0000ef85

0000f1e8 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
    f1e8:	b580      	push	{r7, lr}
    f1ea:	b082      	sub	sp, #8
    f1ec:	af00      	add	r7, sp, #0
    f1ee:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
    f1f0:	687b      	ldr	r3, [r7, #4]
    f1f2:	2b00      	cmp	r3, #0
    f1f4:	d101      	bne.n	f1fa <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    f1f6:	2304      	movs	r3, #4
    f1f8:	e005      	b.n	f206 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
    f1fa:	4b05      	ldr	r3, [pc, #20]	; (f210 <LoRaMacGetFCntUp+0x28>)
    f1fc:	681b      	ldr	r3, [r3, #0]
    f1fe:	1c5a      	adds	r2, r3, #1
    f200:	687b      	ldr	r3, [r7, #4]
    f202:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f204:	2300      	movs	r3, #0
}
    f206:	0018      	movs	r0, r3
    f208:	46bd      	mov	sp, r7
    f20a:	b002      	add	sp, #8
    f20c:	bd80      	pop	{r7, pc}
    f20e:	46c0      	nop			; (mov r8, r8)
    f210:	20001504 	.word	0x20001504

0000f214 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
    f214:	b580      	push	{r7, lr}
    f216:	b082      	sub	sp, #8
    f218:	af00      	add	r7, sp, #0
    f21a:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
    f21c:	4b04      	ldr	r3, [pc, #16]	; (f230 <LoRaMacSetFCntUp+0x1c>)
    f21e:	687a      	ldr	r2, [r7, #4]
    f220:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
    f222:	4b04      	ldr	r3, [pc, #16]	; (f234 <LoRaMacSetFCntUp+0x20>)
    f224:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f226:	2300      	movs	r3, #0
}
    f228:	0018      	movs	r0, r3
    f22a:	46bd      	mov	sp, r7
    f22c:	b002      	add	sp, #8
    f22e:	bd80      	pop	{r7, pc}
    f230:	20001504 	.word	0x20001504
    f234:	0000ef85 	.word	0x0000ef85

0000f238 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
    f238:	b580      	push	{r7, lr}
    f23a:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
    f23c:	4b12      	ldr	r3, [pc, #72]	; (f288 <LoRaMacResetFCnts+0x50>)
    f23e:	2200      	movs	r2, #0
    f240:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
    f242:	4b11      	ldr	r3, [pc, #68]	; (f288 <LoRaMacResetFCnts+0x50>)
    f244:	2201      	movs	r2, #1
    f246:	4252      	negs	r2, r2
    f248:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
    f24a:	4b0f      	ldr	r3, [pc, #60]	; (f288 <LoRaMacResetFCnts+0x50>)
    f24c:	2201      	movs	r2, #1
    f24e:	4252      	negs	r2, r2
    f250:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
    f252:	4b0d      	ldr	r3, [pc, #52]	; (f288 <LoRaMacResetFCnts+0x50>)
    f254:	2201      	movs	r2, #1
    f256:	4252      	negs	r2, r2
    f258:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    f25a:	4b0b      	ldr	r3, [pc, #44]	; (f288 <LoRaMacResetFCnts+0x50>)
    f25c:	2201      	movs	r2, #1
    f25e:	4252      	negs	r2, r2
    f260:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    f262:	4b09      	ldr	r3, [pc, #36]	; (f288 <LoRaMacResetFCnts+0x50>)
    f264:	2201      	movs	r2, #1
    f266:	4252      	negs	r2, r2
    f268:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    f26a:	4b07      	ldr	r3, [pc, #28]	; (f288 <LoRaMacResetFCnts+0x50>)
    f26c:	2201      	movs	r2, #1
    f26e:	4252      	negs	r2, r2
    f270:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    f272:	4b05      	ldr	r3, [pc, #20]	; (f288 <LoRaMacResetFCnts+0x50>)
    f274:	2201      	movs	r2, #1
    f276:	4252      	negs	r2, r2
    f278:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
    f27a:	4b04      	ldr	r3, [pc, #16]	; (f28c <LoRaMacResetFCnts+0x54>)
    f27c:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f27e:	2300      	movs	r3, #0
}
    f280:	0018      	movs	r0, r3
    f282:	46bd      	mov	sp, r7
    f284:	bd80      	pop	{r7, pc}
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	20001504 	.word	0x20001504
    f28c:	0000ef85 	.word	0x0000ef85

0000f290 <LoRaMacGetRJcount>:

LoRaMacFCntHandlerStatus_t LoRaMacGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
    f290:	b580      	push	{r7, lr}
    f292:	b082      	sub	sp, #8
    f294:	af00      	add	r7, sp, #0
    f296:	0002      	movs	r2, r0
    f298:	6039      	str	r1, [r7, #0]
    f29a:	1dfb      	adds	r3, r7, #7
    f29c:	701a      	strb	r2, [r3, #0]
    if( rJcount == 0 )
    f29e:	683b      	ldr	r3, [r7, #0]
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	d101      	bne.n	f2a8 <LoRaMacGetRJcount+0x18>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    f2a4:	2304      	movs	r3, #4
    f2a6:	e017      	b.n	f2d8 <LoRaMacGetRJcount+0x48>
    }

    switch( fCntID )
    f2a8:	1dfb      	adds	r3, r7, #7
    f2aa:	781b      	ldrb	r3, [r3, #0]
    f2ac:	2b08      	cmp	r3, #8
    f2ae:	d002      	beq.n	f2b6 <LoRaMacGetRJcount+0x26>
    f2b0:	2b09      	cmp	r3, #9
    f2b2:	d007      	beq.n	f2c4 <LoRaMacGetRJcount+0x34>
    f2b4:	e00d      	b.n	f2d2 <LoRaMacGetRJcount+0x42>
    {
        case RJ_COUNT_0:
        {
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount0 + 1;
    f2b6:	4b0a      	ldr	r3, [pc, #40]	; (f2e0 <LoRaMacGetRJcount+0x50>)
    f2b8:	8c1b      	ldrh	r3, [r3, #32]
    f2ba:	3301      	adds	r3, #1
    f2bc:	b29a      	uxth	r2, r3
    f2be:	683b      	ldr	r3, [r7, #0]
    f2c0:	801a      	strh	r2, [r3, #0]
            break;
    f2c2:	e008      	b.n	f2d6 <LoRaMacGetRJcount+0x46>
        }
        case RJ_COUNT_1:
        {
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount1 + 1;
    f2c4:	4b06      	ldr	r3, [pc, #24]	; (f2e0 <LoRaMacGetRJcount+0x50>)
    f2c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    f2c8:	3301      	adds	r3, #1
    f2ca:	b29a      	uxth	r2, r3
    f2cc:	683b      	ldr	r3, [r7, #0]
    f2ce:	801a      	strh	r2, [r3, #0]
            break;
    f2d0:	e001      	b.n	f2d6 <LoRaMacGetRJcount+0x46>
        }
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    f2d2:	2305      	movs	r3, #5
    f2d4:	e000      	b.n	f2d8 <LoRaMacGetRJcount+0x48>
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f2d6:	2300      	movs	r3, #0
}
    f2d8:	0018      	movs	r0, r3
    f2da:	46bd      	mov	sp, r7
    f2dc:	b002      	add	sp, #8
    f2de:	bd80      	pop	{r7, pc}
    f2e0:	20001504 	.word	0x20001504

0000f2e4 <LoRaMacFCntHandlerSetMulticastReference>:
    }
    return LORAMAC_FCNT_HANDLER_SUCCESS;
}

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
    f2e4:	b580      	push	{r7, lr}
    f2e6:	b082      	sub	sp, #8
    f2e8:	af00      	add	r7, sp, #0
    f2ea:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
    f2ec:	687b      	ldr	r3, [r7, #4]
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	d101      	bne.n	f2f6 <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    f2f2:	2304      	movs	r3, #4
    f2f4:	e00f      	b.n	f316 <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
    f2f6:	687b      	ldr	r3, [r7, #4]
    f2f8:	4a09      	ldr	r2, [pc, #36]	; (f320 <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
    f2fa:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	3320      	adds	r3, #32
    f300:	4a08      	ldr	r2, [pc, #32]	; (f324 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
    f302:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
    f304:	687b      	ldr	r3, [r7, #4]
    f306:	3340      	adds	r3, #64	; 0x40
    f308:	4a07      	ldr	r2, [pc, #28]	; (f328 <LoRaMacFCntHandlerSetMulticastReference+0x44>)
    f30a:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
    f30c:	687b      	ldr	r3, [r7, #4]
    f30e:	3360      	adds	r3, #96	; 0x60
    f310:	4a06      	ldr	r2, [pc, #24]	; (f32c <LoRaMacFCntHandlerSetMulticastReference+0x48>)
    f312:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    f314:	2300      	movs	r3, #0
}
    f316:	0018      	movs	r0, r3
    f318:	46bd      	mov	sp, r7
    f31a:	b002      	add	sp, #8
    f31c:	bd80      	pop	{r7, pc}
    f31e:	46c0      	nop			; (mov r8, r8)
    f320:	20001514 	.word	0x20001514
    f324:	20001518 	.word	0x20001518
    f328:	2000151c 	.word	0x2000151c
    f32c:	20001520 	.word	0x20001520

0000f330 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    f330:	b580      	push	{r7, lr}
    f332:	b084      	sub	sp, #16
    f334:	af00      	add	r7, sp, #0
    f336:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	2b00      	cmp	r3, #0
    f33c:	d003      	beq.n	f346 <LoRaMacParserJoinAccept+0x16>
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	681b      	ldr	r3, [r3, #0]
    f342:	2b00      	cmp	r3, #0
    f344:	d101      	bne.n	f34a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
    f346:	2302      	movs	r3, #2
    f348:	e0fd      	b.n	f546 <LoRaMacParserJoinAccept+0x216>
    }

    uint16_t bufItr = 0;
    f34a:	230e      	movs	r3, #14
    f34c:	18fb      	adds	r3, r7, r3
    f34e:	2200      	movs	r2, #0
    f350:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    f352:	687b      	ldr	r3, [r7, #4]
    f354:	681a      	ldr	r2, [r3, #0]
    f356:	230e      	movs	r3, #14
    f358:	18fb      	adds	r3, r7, r3
    f35a:	881b      	ldrh	r3, [r3, #0]
    f35c:	210e      	movs	r1, #14
    f35e:	1879      	adds	r1, r7, r1
    f360:	1c58      	adds	r0, r3, #1
    f362:	8008      	strh	r0, [r1, #0]
    f364:	18d3      	adds	r3, r2, r3
    f366:	781a      	ldrb	r2, [r3, #0]
    f368:	687b      	ldr	r3, [r7, #4]
    f36a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
    f36c:	687b      	ldr	r3, [r7, #4]
    f36e:	1d98      	adds	r0, r3, #6
    f370:	687b      	ldr	r3, [r7, #4]
    f372:	681a      	ldr	r2, [r3, #0]
    f374:	230e      	movs	r3, #14
    f376:	18fb      	adds	r3, r7, r3
    f378:	881b      	ldrh	r3, [r3, #0]
    f37a:	18d3      	adds	r3, r2, r3
    f37c:	2203      	movs	r2, #3
    f37e:	0019      	movs	r1, r3
    f380:	4b73      	ldr	r3, [pc, #460]	; (f550 <LoRaMacParserJoinAccept+0x220>)
    f382:	4798      	blx	r3
    bufItr = bufItr + 3;
    f384:	230e      	movs	r3, #14
    f386:	18fb      	adds	r3, r7, r3
    f388:	220e      	movs	r2, #14
    f38a:	18ba      	adds	r2, r7, r2
    f38c:	8812      	ldrh	r2, [r2, #0]
    f38e:	3203      	adds	r2, #3
    f390:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
    f392:	687b      	ldr	r3, [r7, #4]
    f394:	3309      	adds	r3, #9
    f396:	0018      	movs	r0, r3
    f398:	687b      	ldr	r3, [r7, #4]
    f39a:	681a      	ldr	r2, [r3, #0]
    f39c:	230e      	movs	r3, #14
    f39e:	18fb      	adds	r3, r7, r3
    f3a0:	881b      	ldrh	r3, [r3, #0]
    f3a2:	18d3      	adds	r3, r2, r3
    f3a4:	2203      	movs	r2, #3
    f3a6:	0019      	movs	r1, r3
    f3a8:	4b69      	ldr	r3, [pc, #420]	; (f550 <LoRaMacParserJoinAccept+0x220>)
    f3aa:	4798      	blx	r3
    bufItr = bufItr + 3;
    f3ac:	230e      	movs	r3, #14
    f3ae:	18fb      	adds	r3, r7, r3
    f3b0:	220e      	movs	r2, #14
    f3b2:	18ba      	adds	r2, r7, r2
    f3b4:	8812      	ldrh	r2, [r2, #0]
    f3b6:	3203      	adds	r2, #3
    f3b8:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
    f3ba:	687b      	ldr	r3, [r7, #4]
    f3bc:	681a      	ldr	r2, [r3, #0]
    f3be:	230e      	movs	r3, #14
    f3c0:	18fb      	adds	r3, r7, r3
    f3c2:	881b      	ldrh	r3, [r3, #0]
    f3c4:	210e      	movs	r1, #14
    f3c6:	1879      	adds	r1, r7, r1
    f3c8:	1c58      	adds	r0, r3, #1
    f3ca:	8008      	strh	r0, [r1, #0]
    f3cc:	18d3      	adds	r3, r2, r3
    f3ce:	781b      	ldrb	r3, [r3, #0]
    f3d0:	001a      	movs	r2, r3
    f3d2:	687b      	ldr	r3, [r7, #4]
    f3d4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    f3d6:	687b      	ldr	r3, [r7, #4]
    f3d8:	681a      	ldr	r2, [r3, #0]
    f3da:	230e      	movs	r3, #14
    f3dc:	18fb      	adds	r3, r7, r3
    f3de:	881b      	ldrh	r3, [r3, #0]
    f3e0:	210e      	movs	r1, #14
    f3e2:	1879      	adds	r1, r7, r1
    f3e4:	1c58      	adds	r0, r3, #1
    f3e6:	8008      	strh	r0, [r1, #0]
    f3e8:	18d3      	adds	r3, r2, r3
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	021a      	lsls	r2, r3, #8
    f3ee:	687b      	ldr	r3, [r7, #4]
    f3f0:	68db      	ldr	r3, [r3, #12]
    f3f2:	431a      	orrs	r2, r3
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    f3f8:	687b      	ldr	r3, [r7, #4]
    f3fa:	681a      	ldr	r2, [r3, #0]
    f3fc:	230e      	movs	r3, #14
    f3fe:	18fb      	adds	r3, r7, r3
    f400:	881b      	ldrh	r3, [r3, #0]
    f402:	210e      	movs	r1, #14
    f404:	1879      	adds	r1, r7, r1
    f406:	1c58      	adds	r0, r3, #1
    f408:	8008      	strh	r0, [r1, #0]
    f40a:	18d3      	adds	r3, r2, r3
    f40c:	781b      	ldrb	r3, [r3, #0]
    f40e:	041a      	lsls	r2, r3, #16
    f410:	687b      	ldr	r3, [r7, #4]
    f412:	68db      	ldr	r3, [r3, #12]
    f414:	431a      	orrs	r2, r3
    f416:	687b      	ldr	r3, [r7, #4]
    f418:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    f41a:	687b      	ldr	r3, [r7, #4]
    f41c:	681a      	ldr	r2, [r3, #0]
    f41e:	230e      	movs	r3, #14
    f420:	18fb      	adds	r3, r7, r3
    f422:	881b      	ldrh	r3, [r3, #0]
    f424:	210e      	movs	r1, #14
    f426:	1879      	adds	r1, r7, r1
    f428:	1c58      	adds	r0, r3, #1
    f42a:	8008      	strh	r0, [r1, #0]
    f42c:	18d3      	adds	r3, r2, r3
    f42e:	781b      	ldrb	r3, [r3, #0]
    f430:	061a      	lsls	r2, r3, #24
    f432:	687b      	ldr	r3, [r7, #4]
    f434:	68db      	ldr	r3, [r3, #12]
    f436:	431a      	orrs	r2, r3
    f438:	687b      	ldr	r3, [r7, #4]
    f43a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	681a      	ldr	r2, [r3, #0]
    f440:	230e      	movs	r3, #14
    f442:	18fb      	adds	r3, r7, r3
    f444:	881b      	ldrh	r3, [r3, #0]
    f446:	210e      	movs	r1, #14
    f448:	1879      	adds	r1, r7, r1
    f44a:	1c58      	adds	r0, r3, #1
    f44c:	8008      	strh	r0, [r1, #0]
    f44e:	18d3      	adds	r3, r2, r3
    f450:	781a      	ldrb	r2, [r3, #0]
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	681a      	ldr	r2, [r3, #0]
    f45a:	230e      	movs	r3, #14
    f45c:	18fb      	adds	r3, r7, r3
    f45e:	881b      	ldrh	r3, [r3, #0]
    f460:	210e      	movs	r1, #14
    f462:	1879      	adds	r1, r7, r1
    f464:	1c58      	adds	r0, r3, #1
    f466:	8008      	strh	r0, [r1, #0]
    f468:	18d3      	adds	r3, r2, r3
    f46a:	781a      	ldrb	r2, [r3, #0]
    f46c:	687b      	ldr	r3, [r7, #4]
    f46e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
    f470:	687b      	ldr	r3, [r7, #4]
    f472:	791b      	ldrb	r3, [r3, #4]
    f474:	1f1a      	subs	r2, r3, #4
    f476:	230e      	movs	r3, #14
    f478:	18fb      	adds	r3, r7, r3
    f47a:	881b      	ldrh	r3, [r3, #0]
    f47c:	1ad3      	subs	r3, r2, r3
    f47e:	2b10      	cmp	r3, #16
    f480:	d114      	bne.n	f4ac <LoRaMacParserJoinAccept+0x17c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
    f482:	687b      	ldr	r3, [r7, #4]
    f484:	3312      	adds	r3, #18
    f486:	0018      	movs	r0, r3
    f488:	687b      	ldr	r3, [r7, #4]
    f48a:	681a      	ldr	r2, [r3, #0]
    f48c:	230e      	movs	r3, #14
    f48e:	18fb      	adds	r3, r7, r3
    f490:	881b      	ldrh	r3, [r3, #0]
    f492:	18d3      	adds	r3, r2, r3
    f494:	2210      	movs	r2, #16
    f496:	0019      	movs	r1, r3
    f498:	4b2d      	ldr	r3, [pc, #180]	; (f550 <LoRaMacParserJoinAccept+0x220>)
    f49a:	4798      	blx	r3
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
    f49c:	230e      	movs	r3, #14
    f49e:	18fb      	adds	r3, r7, r3
    f4a0:	220e      	movs	r2, #14
    f4a2:	18ba      	adds	r2, r7, r2
    f4a4:	8812      	ldrh	r2, [r2, #0]
    f4a6:	3210      	adds	r2, #16
    f4a8:	801a      	strh	r2, [r3, #0]
    f4aa:	e00a      	b.n	f4c2 <LoRaMacParserJoinAccept+0x192>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    f4ac:	687b      	ldr	r3, [r7, #4]
    f4ae:	791b      	ldrb	r3, [r3, #4]
    f4b0:	1f1a      	subs	r2, r3, #4
    f4b2:	230e      	movs	r3, #14
    f4b4:	18fb      	adds	r3, r7, r3
    f4b6:	881b      	ldrh	r3, [r3, #0]
    f4b8:	1ad3      	subs	r3, r2, r3
    f4ba:	2b00      	cmp	r3, #0
    f4bc:	dd01      	ble.n	f4c2 <LoRaMacParserJoinAccept+0x192>
    {
        return LORAMAC_PARSER_FAIL;
    f4be:	2301      	movs	r3, #1
    f4c0:	e041      	b.n	f546 <LoRaMacParserJoinAccept+0x216>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
    f4c2:	687b      	ldr	r3, [r7, #4]
    f4c4:	681a      	ldr	r2, [r3, #0]
    f4c6:	230e      	movs	r3, #14
    f4c8:	18fb      	adds	r3, r7, r3
    f4ca:	881b      	ldrh	r3, [r3, #0]
    f4cc:	210e      	movs	r1, #14
    f4ce:	1879      	adds	r1, r7, r1
    f4d0:	1c58      	adds	r0, r3, #1
    f4d2:	8008      	strh	r0, [r1, #0]
    f4d4:	18d3      	adds	r3, r2, r3
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	001a      	movs	r2, r3
    f4da:	687b      	ldr	r3, [r7, #4]
    f4dc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    f4de:	687b      	ldr	r3, [r7, #4]
    f4e0:	681a      	ldr	r2, [r3, #0]
    f4e2:	230e      	movs	r3, #14
    f4e4:	18fb      	adds	r3, r7, r3
    f4e6:	881b      	ldrh	r3, [r3, #0]
    f4e8:	210e      	movs	r1, #14
    f4ea:	1879      	adds	r1, r7, r1
    f4ec:	1c58      	adds	r0, r3, #1
    f4ee:	8008      	strh	r0, [r1, #0]
    f4f0:	18d3      	adds	r3, r2, r3
    f4f2:	781b      	ldrb	r3, [r3, #0]
    f4f4:	021a      	lsls	r2, r3, #8
    f4f6:	687b      	ldr	r3, [r7, #4]
    f4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f4fa:	431a      	orrs	r2, r3
    f4fc:	687b      	ldr	r3, [r7, #4]
    f4fe:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    f500:	687b      	ldr	r3, [r7, #4]
    f502:	681a      	ldr	r2, [r3, #0]
    f504:	230e      	movs	r3, #14
    f506:	18fb      	adds	r3, r7, r3
    f508:	881b      	ldrh	r3, [r3, #0]
    f50a:	210e      	movs	r1, #14
    f50c:	1879      	adds	r1, r7, r1
    f50e:	1c58      	adds	r0, r3, #1
    f510:	8008      	strh	r0, [r1, #0]
    f512:	18d3      	adds	r3, r2, r3
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	041a      	lsls	r2, r3, #16
    f518:	687b      	ldr	r3, [r7, #4]
    f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f51c:	431a      	orrs	r2, r3
    f51e:	687b      	ldr	r3, [r7, #4]
    f520:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    f522:	687b      	ldr	r3, [r7, #4]
    f524:	681a      	ldr	r2, [r3, #0]
    f526:	230e      	movs	r3, #14
    f528:	18fb      	adds	r3, r7, r3
    f52a:	881b      	ldrh	r3, [r3, #0]
    f52c:	210e      	movs	r1, #14
    f52e:	1879      	adds	r1, r7, r1
    f530:	1c58      	adds	r0, r3, #1
    f532:	8008      	strh	r0, [r1, #0]
    f534:	18d3      	adds	r3, r2, r3
    f536:	781b      	ldrb	r3, [r3, #0]
    f538:	061a      	lsls	r2, r3, #24
    f53a:	687b      	ldr	r3, [r7, #4]
    f53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f53e:	431a      	orrs	r2, r3
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
    f544:	2300      	movs	r3, #0
}
    f546:	0018      	movs	r0, r3
    f548:	46bd      	mov	sp, r7
    f54a:	b004      	add	sp, #16
    f54c:	bd80      	pop	{r7, pc}
    f54e:	46c0      	nop			; (mov r8, r8)
    f550:	00004339 	.word	0x00004339

0000f554 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    f554:	b580      	push	{r7, lr}
    f556:	b084      	sub	sp, #16
    f558:	af00      	add	r7, sp, #0
    f55a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    f55c:	687b      	ldr	r3, [r7, #4]
    f55e:	2b00      	cmp	r3, #0
    f560:	d003      	beq.n	f56a <LoRaMacParserData+0x16>
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	681b      	ldr	r3, [r3, #0]
    f566:	2b00      	cmp	r3, #0
    f568:	d101      	bne.n	f56e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
    f56a:	2302      	movs	r3, #2
    f56c:	e123      	b.n	f7b6 <LoRaMacParserData+0x262>
    }

    uint16_t bufItr = 0;
    f56e:	230e      	movs	r3, #14
    f570:	18fb      	adds	r3, r7, r3
    f572:	2200      	movs	r2, #0
    f574:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    f576:	687b      	ldr	r3, [r7, #4]
    f578:	681a      	ldr	r2, [r3, #0]
    f57a:	230e      	movs	r3, #14
    f57c:	18fb      	adds	r3, r7, r3
    f57e:	881b      	ldrh	r3, [r3, #0]
    f580:	210e      	movs	r1, #14
    f582:	1879      	adds	r1, r7, r1
    f584:	1c58      	adds	r0, r3, #1
    f586:	8008      	strh	r0, [r1, #0]
    f588:	18d3      	adds	r3, r2, r3
    f58a:	781a      	ldrb	r2, [r3, #0]
    f58c:	687b      	ldr	r3, [r7, #4]
    f58e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
    f590:	687b      	ldr	r3, [r7, #4]
    f592:	681a      	ldr	r2, [r3, #0]
    f594:	230e      	movs	r3, #14
    f596:	18fb      	adds	r3, r7, r3
    f598:	881b      	ldrh	r3, [r3, #0]
    f59a:	210e      	movs	r1, #14
    f59c:	1879      	adds	r1, r7, r1
    f59e:	1c58      	adds	r0, r3, #1
    f5a0:	8008      	strh	r0, [r1, #0]
    f5a2:	18d3      	adds	r3, r2, r3
    f5a4:	781b      	ldrb	r3, [r3, #0]
    f5a6:	001a      	movs	r2, r3
    f5a8:	687b      	ldr	r3, [r7, #4]
    f5aa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    f5ac:	687b      	ldr	r3, [r7, #4]
    f5ae:	681a      	ldr	r2, [r3, #0]
    f5b0:	230e      	movs	r3, #14
    f5b2:	18fb      	adds	r3, r7, r3
    f5b4:	881b      	ldrh	r3, [r3, #0]
    f5b6:	210e      	movs	r1, #14
    f5b8:	1879      	adds	r1, r7, r1
    f5ba:	1c58      	adds	r0, r3, #1
    f5bc:	8008      	strh	r0, [r1, #0]
    f5be:	18d3      	adds	r3, r2, r3
    f5c0:	781b      	ldrb	r3, [r3, #0]
    f5c2:	021a      	lsls	r2, r3, #8
    f5c4:	687b      	ldr	r3, [r7, #4]
    f5c6:	689b      	ldr	r3, [r3, #8]
    f5c8:	431a      	orrs	r2, r3
    f5ca:	687b      	ldr	r3, [r7, #4]
    f5cc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    f5ce:	687b      	ldr	r3, [r7, #4]
    f5d0:	681a      	ldr	r2, [r3, #0]
    f5d2:	230e      	movs	r3, #14
    f5d4:	18fb      	adds	r3, r7, r3
    f5d6:	881b      	ldrh	r3, [r3, #0]
    f5d8:	210e      	movs	r1, #14
    f5da:	1879      	adds	r1, r7, r1
    f5dc:	1c58      	adds	r0, r3, #1
    f5de:	8008      	strh	r0, [r1, #0]
    f5e0:	18d3      	adds	r3, r2, r3
    f5e2:	781b      	ldrb	r3, [r3, #0]
    f5e4:	041a      	lsls	r2, r3, #16
    f5e6:	687b      	ldr	r3, [r7, #4]
    f5e8:	689b      	ldr	r3, [r3, #8]
    f5ea:	431a      	orrs	r2, r3
    f5ec:	687b      	ldr	r3, [r7, #4]
    f5ee:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    f5f0:	687b      	ldr	r3, [r7, #4]
    f5f2:	681a      	ldr	r2, [r3, #0]
    f5f4:	230e      	movs	r3, #14
    f5f6:	18fb      	adds	r3, r7, r3
    f5f8:	881b      	ldrh	r3, [r3, #0]
    f5fa:	210e      	movs	r1, #14
    f5fc:	1879      	adds	r1, r7, r1
    f5fe:	1c58      	adds	r0, r3, #1
    f600:	8008      	strh	r0, [r1, #0]
    f602:	18d3      	adds	r3, r2, r3
    f604:	781b      	ldrb	r3, [r3, #0]
    f606:	061a      	lsls	r2, r3, #24
    f608:	687b      	ldr	r3, [r7, #4]
    f60a:	689b      	ldr	r3, [r3, #8]
    f60c:	431a      	orrs	r2, r3
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	681a      	ldr	r2, [r3, #0]
    f616:	230e      	movs	r3, #14
    f618:	18fb      	adds	r3, r7, r3
    f61a:	881b      	ldrh	r3, [r3, #0]
    f61c:	210e      	movs	r1, #14
    f61e:	1879      	adds	r1, r7, r1
    f620:	1c58      	adds	r0, r3, #1
    f622:	8008      	strh	r0, [r1, #0]
    f624:	18d3      	adds	r3, r2, r3
    f626:	781a      	ldrb	r2, [r3, #0]
    f628:	687b      	ldr	r3, [r7, #4]
    f62a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    f62c:	687b      	ldr	r3, [r7, #4]
    f62e:	681a      	ldr	r2, [r3, #0]
    f630:	230e      	movs	r3, #14
    f632:	18fb      	adds	r3, r7, r3
    f634:	881b      	ldrh	r3, [r3, #0]
    f636:	210e      	movs	r1, #14
    f638:	1879      	adds	r1, r7, r1
    f63a:	1c58      	adds	r0, r3, #1
    f63c:	8008      	strh	r0, [r1, #0]
    f63e:	18d3      	adds	r3, r2, r3
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	b29a      	uxth	r2, r3
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	681a      	ldr	r2, [r3, #0]
    f64c:	230e      	movs	r3, #14
    f64e:	18fb      	adds	r3, r7, r3
    f650:	881b      	ldrh	r3, [r3, #0]
    f652:	210e      	movs	r1, #14
    f654:	1879      	adds	r1, r7, r1
    f656:	1c58      	adds	r0, r3, #1
    f658:	8008      	strh	r0, [r1, #0]
    f65a:	18d3      	adds	r3, r2, r3
    f65c:	781b      	ldrb	r3, [r3, #0]
    f65e:	0219      	lsls	r1, r3, #8
    f660:	687b      	ldr	r3, [r7, #4]
    f662:	89db      	ldrh	r3, [r3, #14]
    f664:	b21a      	sxth	r2, r3
    f666:	b20b      	sxth	r3, r1
    f668:	4313      	orrs	r3, r2
    f66a:	b21b      	sxth	r3, r3
    f66c:	b29a      	uxth	r2, r3
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    f672:	687b      	ldr	r3, [r7, #4]
    f674:	7b1b      	ldrb	r3, [r3, #12]
    f676:	071b      	lsls	r3, r3, #28
    f678:	0f1b      	lsrs	r3, r3, #28
    f67a:	b2db      	uxtb	r3, r3
    f67c:	2b0f      	cmp	r3, #15
    f67e:	dc31      	bgt.n	f6e4 <LoRaMacParserData+0x190>
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
    f680:	687b      	ldr	r3, [r7, #4]
    f682:	3310      	adds	r3, #16
    f684:	0018      	movs	r0, r3
    f686:	687b      	ldr	r3, [r7, #4]
    f688:	681a      	ldr	r2, [r3, #0]
    f68a:	230e      	movs	r3, #14
    f68c:	18fb      	adds	r3, r7, r3
    f68e:	881b      	ldrh	r3, [r3, #0]
    f690:	18d1      	adds	r1, r2, r3
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	7b1b      	ldrb	r3, [r3, #12]
    f696:	071b      	lsls	r3, r3, #28
    f698:	0f1b      	lsrs	r3, r3, #28
    f69a:	b2db      	uxtb	r3, r3
    f69c:	b29b      	uxth	r3, r3
    f69e:	001a      	movs	r2, r3
    f6a0:	4b47      	ldr	r3, [pc, #284]	; (f7c0 <LoRaMacParserData+0x26c>)
    f6a2:	4798      	blx	r3
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    f6a4:	687b      	ldr	r3, [r7, #4]
    f6a6:	7b1b      	ldrb	r3, [r3, #12]
    f6a8:	071b      	lsls	r3, r3, #28
    f6aa:	0f1b      	lsrs	r3, r3, #28
    f6ac:	b2db      	uxtb	r3, r3
    f6ae:	b299      	uxth	r1, r3
    f6b0:	230e      	movs	r3, #14
    f6b2:	18fb      	adds	r3, r7, r3
    f6b4:	220e      	movs	r2, #14
    f6b6:	18ba      	adds	r2, r7, r2
    f6b8:	8812      	ldrh	r2, [r2, #0]
    f6ba:	188a      	adds	r2, r1, r2
    f6bc:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
    f6be:	687b      	ldr	r3, [r7, #4]
    f6c0:	2220      	movs	r2, #32
    f6c2:	2100      	movs	r1, #0
    f6c4:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
    f6c6:	687b      	ldr	r3, [r7, #4]
    f6c8:	2228      	movs	r2, #40	; 0x28
    f6ca:	2100      	movs	r1, #0
    f6cc:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
    f6ce:	687b      	ldr	r3, [r7, #4]
    f6d0:	791b      	ldrb	r3, [r3, #4]
    f6d2:	001a      	movs	r2, r3
    f6d4:	230e      	movs	r3, #14
    f6d6:	18fb      	adds	r3, r7, r3
    f6d8:	881b      	ldrh	r3, [r3, #0]
    f6da:	1ad3      	subs	r3, r2, r3
    f6dc:	3b04      	subs	r3, #4
    f6de:	2b00      	cmp	r3, #0
    f6e0:	dd37      	ble.n	f752 <LoRaMacParserData+0x1fe>
    f6e2:	e001      	b.n	f6e8 <LoRaMacParserData+0x194>
        return LORAMAC_PARSER_FAIL;
    f6e4:	2301      	movs	r3, #1
    f6e6:	e066      	b.n	f7b6 <LoRaMacParserData+0x262>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
    f6e8:	687b      	ldr	r3, [r7, #4]
    f6ea:	681a      	ldr	r2, [r3, #0]
    f6ec:	230e      	movs	r3, #14
    f6ee:	18fb      	adds	r3, r7, r3
    f6f0:	881b      	ldrh	r3, [r3, #0]
    f6f2:	210e      	movs	r1, #14
    f6f4:	1879      	adds	r1, r7, r1
    f6f6:	1c58      	adds	r0, r3, #1
    f6f8:	8008      	strh	r0, [r1, #0]
    f6fa:	18d3      	adds	r3, r2, r3
    f6fc:	7819      	ldrb	r1, [r3, #0]
    f6fe:	687b      	ldr	r3, [r7, #4]
    f700:	2220      	movs	r2, #32
    f702:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
    f704:	687b      	ldr	r3, [r7, #4]
    f706:	791a      	ldrb	r2, [r3, #4]
    f708:	230e      	movs	r3, #14
    f70a:	18fb      	adds	r3, r7, r3
    f70c:	881b      	ldrh	r3, [r3, #0]
    f70e:	b2db      	uxtb	r3, r3
    f710:	1ad3      	subs	r3, r2, r3
    f712:	b2db      	uxtb	r3, r3
    f714:	3b04      	subs	r3, #4
    f716:	b2d9      	uxtb	r1, r3
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	2228      	movs	r2, #40	; 0x28
    f71c:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
    f71e:	687b      	ldr	r3, [r7, #4]
    f720:	6a58      	ldr	r0, [r3, #36]	; 0x24
    f722:	687b      	ldr	r3, [r7, #4]
    f724:	681a      	ldr	r2, [r3, #0]
    f726:	230e      	movs	r3, #14
    f728:	18fb      	adds	r3, r7, r3
    f72a:	881b      	ldrh	r3, [r3, #0]
    f72c:	18d1      	adds	r1, r2, r3
    f72e:	687b      	ldr	r3, [r7, #4]
    f730:	2228      	movs	r2, #40	; 0x28
    f732:	5c9b      	ldrb	r3, [r3, r2]
    f734:	b29b      	uxth	r3, r3
    f736:	001a      	movs	r2, r3
    f738:	4b21      	ldr	r3, [pc, #132]	; (f7c0 <LoRaMacParserData+0x26c>)
    f73a:	4798      	blx	r3
        bufItr = bufItr + macMsg->FRMPayloadSize;
    f73c:	687b      	ldr	r3, [r7, #4]
    f73e:	2228      	movs	r2, #40	; 0x28
    f740:	5c9b      	ldrb	r3, [r3, r2]
    f742:	b299      	uxth	r1, r3
    f744:	230e      	movs	r3, #14
    f746:	18fb      	adds	r3, r7, r3
    f748:	220e      	movs	r2, #14
    f74a:	18ba      	adds	r2, r7, r2
    f74c:	8812      	ldrh	r2, [r2, #0]
    f74e:	188a      	adds	r2, r1, r2
    f750:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    f752:	687b      	ldr	r3, [r7, #4]
    f754:	681a      	ldr	r2, [r3, #0]
    f756:	687b      	ldr	r3, [r7, #4]
    f758:	791b      	ldrb	r3, [r3, #4]
    f75a:	3b04      	subs	r3, #4
    f75c:	18d3      	adds	r3, r2, r3
    f75e:	781b      	ldrb	r3, [r3, #0]
    f760:	001a      	movs	r2, r3
    f762:	687b      	ldr	r3, [r7, #4]
    f764:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    f766:	687b      	ldr	r3, [r7, #4]
    f768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f76a:	687b      	ldr	r3, [r7, #4]
    f76c:	6819      	ldr	r1, [r3, #0]
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	791b      	ldrb	r3, [r3, #4]
    f772:	3b03      	subs	r3, #3
    f774:	18cb      	adds	r3, r1, r3
    f776:	781b      	ldrb	r3, [r3, #0]
    f778:	021b      	lsls	r3, r3, #8
    f77a:	431a      	orrs	r2, r3
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f784:	687b      	ldr	r3, [r7, #4]
    f786:	6819      	ldr	r1, [r3, #0]
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	791b      	ldrb	r3, [r3, #4]
    f78c:	3b02      	subs	r3, #2
    f78e:	18cb      	adds	r3, r1, r3
    f790:	781b      	ldrb	r3, [r3, #0]
    f792:	041b      	lsls	r3, r3, #16
    f794:	431a      	orrs	r2, r3
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
    f79a:	687b      	ldr	r3, [r7, #4]
    f79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f79e:	687b      	ldr	r3, [r7, #4]
    f7a0:	6819      	ldr	r1, [r3, #0]
    f7a2:	687b      	ldr	r3, [r7, #4]
    f7a4:	791b      	ldrb	r3, [r3, #4]
    f7a6:	3b01      	subs	r3, #1
    f7a8:	18cb      	adds	r3, r1, r3
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	061b      	lsls	r3, r3, #24
    f7ae:	431a      	orrs	r2, r3
    f7b0:	687b      	ldr	r3, [r7, #4]
    f7b2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
    f7b4:	2300      	movs	r3, #0
}
    f7b6:	0018      	movs	r0, r3
    f7b8:	46bd      	mov	sp, r7
    f7ba:	b004      	add	sp, #16
    f7bc:	bd80      	pop	{r7, pc}
    f7be:	46c0      	nop			; (mov r8, r8)
    f7c0:	00004339 	.word	0x00004339

0000f7c4 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    f7c4:	b580      	push	{r7, lr}
    f7c6:	b084      	sub	sp, #16
    f7c8:	af00      	add	r7, sp, #0
    f7ca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    f7cc:	687b      	ldr	r3, [r7, #4]
    f7ce:	2b00      	cmp	r3, #0
    f7d0:	d003      	beq.n	f7da <LoRaMacSerializerJoinRequest+0x16>
    f7d2:	687b      	ldr	r3, [r7, #4]
    f7d4:	681b      	ldr	r3, [r3, #0]
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d101      	bne.n	f7de <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    f7da:	2301      	movs	r3, #1
    f7dc:	e09c      	b.n	f918 <LoRaMacSerializerJoinRequest+0x154>
    }

    uint16_t bufItr = 0;
    f7de:	230e      	movs	r3, #14
    f7e0:	18fb      	adds	r3, r7, r3
    f7e2:	2200      	movs	r2, #0
    f7e4:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	791b      	ldrb	r3, [r3, #4]
    f7ea:	2b16      	cmp	r3, #22
    f7ec:	d801      	bhi.n	f7f2 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    f7ee:	2302      	movs	r3, #2
    f7f0:	e092      	b.n	f918 <LoRaMacSerializerJoinRequest+0x154>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    f7f2:	687b      	ldr	r3, [r7, #4]
    f7f4:	681a      	ldr	r2, [r3, #0]
    f7f6:	230e      	movs	r3, #14
    f7f8:	18fb      	adds	r3, r7, r3
    f7fa:	881b      	ldrh	r3, [r3, #0]
    f7fc:	210e      	movs	r1, #14
    f7fe:	1879      	adds	r1, r7, r1
    f800:	1c58      	adds	r0, r3, #1
    f802:	8008      	strh	r0, [r1, #0]
    f804:	18d3      	adds	r3, r2, r3
    f806:	687a      	ldr	r2, [r7, #4]
    f808:	7952      	ldrb	r2, [r2, #5]
    f80a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    f80c:	687b      	ldr	r3, [r7, #4]
    f80e:	681a      	ldr	r2, [r3, #0]
    f810:	230e      	movs	r3, #14
    f812:	18fb      	adds	r3, r7, r3
    f814:	881b      	ldrh	r3, [r3, #0]
    f816:	18d0      	adds	r0, r2, r3
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	3306      	adds	r3, #6
    f81c:	2208      	movs	r2, #8
    f81e:	0019      	movs	r1, r3
    f820:	4b3f      	ldr	r3, [pc, #252]	; (f920 <LoRaMacSerializerJoinRequest+0x15c>)
    f822:	4798      	blx	r3
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    f824:	230e      	movs	r3, #14
    f826:	18fb      	adds	r3, r7, r3
    f828:	220e      	movs	r2, #14
    f82a:	18ba      	adds	r2, r7, r2
    f82c:	8812      	ldrh	r2, [r2, #0]
    f82e:	3208      	adds	r2, #8
    f830:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	681a      	ldr	r2, [r3, #0]
    f836:	230e      	movs	r3, #14
    f838:	18fb      	adds	r3, r7, r3
    f83a:	881b      	ldrh	r3, [r3, #0]
    f83c:	18d0      	adds	r0, r2, r3
    f83e:	687b      	ldr	r3, [r7, #4]
    f840:	330e      	adds	r3, #14
    f842:	2208      	movs	r2, #8
    f844:	0019      	movs	r1, r3
    f846:	4b36      	ldr	r3, [pc, #216]	; (f920 <LoRaMacSerializerJoinRequest+0x15c>)
    f848:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    f84a:	230e      	movs	r3, #14
    f84c:	18fb      	adds	r3, r7, r3
    f84e:	220e      	movs	r2, #14
    f850:	18ba      	adds	r2, r7, r2
    f852:	8812      	ldrh	r2, [r2, #0]
    f854:	3208      	adds	r2, #8
    f856:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	681a      	ldr	r2, [r3, #0]
    f85c:	230e      	movs	r3, #14
    f85e:	18fb      	adds	r3, r7, r3
    f860:	881b      	ldrh	r3, [r3, #0]
    f862:	210e      	movs	r1, #14
    f864:	1879      	adds	r1, r7, r1
    f866:	1c58      	adds	r0, r3, #1
    f868:	8008      	strh	r0, [r1, #0]
    f86a:	18d3      	adds	r3, r2, r3
    f86c:	687a      	ldr	r2, [r7, #4]
    f86e:	8ad2      	ldrh	r2, [r2, #22]
    f870:	b2d2      	uxtb	r2, r2
    f872:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	681a      	ldr	r2, [r3, #0]
    f878:	230e      	movs	r3, #14
    f87a:	18fb      	adds	r3, r7, r3
    f87c:	881b      	ldrh	r3, [r3, #0]
    f87e:	210e      	movs	r1, #14
    f880:	1879      	adds	r1, r7, r1
    f882:	1c58      	adds	r0, r3, #1
    f884:	8008      	strh	r0, [r1, #0]
    f886:	18d3      	adds	r3, r2, r3
    f888:	687a      	ldr	r2, [r7, #4]
    f88a:	8ad2      	ldrh	r2, [r2, #22]
    f88c:	0a12      	lsrs	r2, r2, #8
    f88e:	b292      	uxth	r2, r2
    f890:	b2d2      	uxtb	r2, r2
    f892:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    f894:	687b      	ldr	r3, [r7, #4]
    f896:	681a      	ldr	r2, [r3, #0]
    f898:	230e      	movs	r3, #14
    f89a:	18fb      	adds	r3, r7, r3
    f89c:	881b      	ldrh	r3, [r3, #0]
    f89e:	210e      	movs	r1, #14
    f8a0:	1879      	adds	r1, r7, r1
    f8a2:	1c58      	adds	r0, r3, #1
    f8a4:	8008      	strh	r0, [r1, #0]
    f8a6:	18d2      	adds	r2, r2, r3
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	699b      	ldr	r3, [r3, #24]
    f8ac:	b2db      	uxtb	r3, r3
    f8ae:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    f8b0:	687b      	ldr	r3, [r7, #4]
    f8b2:	681a      	ldr	r2, [r3, #0]
    f8b4:	230e      	movs	r3, #14
    f8b6:	18fb      	adds	r3, r7, r3
    f8b8:	881b      	ldrh	r3, [r3, #0]
    f8ba:	210e      	movs	r1, #14
    f8bc:	1879      	adds	r1, r7, r1
    f8be:	1c58      	adds	r0, r3, #1
    f8c0:	8008      	strh	r0, [r1, #0]
    f8c2:	18d2      	adds	r2, r2, r3
    f8c4:	687b      	ldr	r3, [r7, #4]
    f8c6:	699b      	ldr	r3, [r3, #24]
    f8c8:	0a1b      	lsrs	r3, r3, #8
    f8ca:	b2db      	uxtb	r3, r3
    f8cc:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    f8ce:	687b      	ldr	r3, [r7, #4]
    f8d0:	681a      	ldr	r2, [r3, #0]
    f8d2:	230e      	movs	r3, #14
    f8d4:	18fb      	adds	r3, r7, r3
    f8d6:	881b      	ldrh	r3, [r3, #0]
    f8d8:	210e      	movs	r1, #14
    f8da:	1879      	adds	r1, r7, r1
    f8dc:	1c58      	adds	r0, r3, #1
    f8de:	8008      	strh	r0, [r1, #0]
    f8e0:	18d2      	adds	r2, r2, r3
    f8e2:	687b      	ldr	r3, [r7, #4]
    f8e4:	699b      	ldr	r3, [r3, #24]
    f8e6:	0c1b      	lsrs	r3, r3, #16
    f8e8:	b2db      	uxtb	r3, r3
    f8ea:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    f8ec:	687b      	ldr	r3, [r7, #4]
    f8ee:	681a      	ldr	r2, [r3, #0]
    f8f0:	230e      	movs	r3, #14
    f8f2:	18fb      	adds	r3, r7, r3
    f8f4:	881b      	ldrh	r3, [r3, #0]
    f8f6:	210e      	movs	r1, #14
    f8f8:	1879      	adds	r1, r7, r1
    f8fa:	1c58      	adds	r0, r3, #1
    f8fc:	8008      	strh	r0, [r1, #0]
    f8fe:	18d2      	adds	r2, r2, r3
    f900:	687b      	ldr	r3, [r7, #4]
    f902:	699b      	ldr	r3, [r3, #24]
    f904:	0e1b      	lsrs	r3, r3, #24
    f906:	b2db      	uxtb	r3, r3
    f908:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    f90a:	230e      	movs	r3, #14
    f90c:	18fb      	adds	r3, r7, r3
    f90e:	881b      	ldrh	r3, [r3, #0]
    f910:	b2da      	uxtb	r2, r3
    f912:	687b      	ldr	r3, [r7, #4]
    f914:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    f916:	2300      	movs	r3, #0
}
    f918:	0018      	movs	r0, r3
    f91a:	46bd      	mov	sp, r7
    f91c:	b004      	add	sp, #16
    f91e:	bd80      	pop	{r7, pc}
    f920:	0000436f 	.word	0x0000436f

0000f924 <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    f924:	b580      	push	{r7, lr}
    f926:	b084      	sub	sp, #16
    f928:	af00      	add	r7, sp, #0
    f92a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    f92c:	687b      	ldr	r3, [r7, #4]
    f92e:	2b00      	cmp	r3, #0
    f930:	d003      	beq.n	f93a <LoRaMacSerializerReJoinType1+0x16>
    f932:	687b      	ldr	r3, [r7, #4]
    f934:	681b      	ldr	r3, [r3, #0]
    f936:	2b00      	cmp	r3, #0
    f938:	d101      	bne.n	f93e <LoRaMacSerializerReJoinType1+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    f93a:	2301      	movs	r3, #1
    f93c:	e0a9      	b.n	fa92 <LoRaMacSerializerReJoinType1+0x16e>
    }

    uint16_t bufItr = 0;
    f93e:	230e      	movs	r3, #14
    f940:	18fb      	adds	r3, r7, r3
    f942:	2200      	movs	r2, #0
    f944:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	791b      	ldrb	r3, [r3, #4]
    f94a:	2b17      	cmp	r3, #23
    f94c:	d801      	bhi.n	f952 <LoRaMacSerializerReJoinType1+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    f94e:	2302      	movs	r3, #2
    f950:	e09f      	b.n	fa92 <LoRaMacSerializerReJoinType1+0x16e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    f952:	687b      	ldr	r3, [r7, #4]
    f954:	681a      	ldr	r2, [r3, #0]
    f956:	230e      	movs	r3, #14
    f958:	18fb      	adds	r3, r7, r3
    f95a:	881b      	ldrh	r3, [r3, #0]
    f95c:	210e      	movs	r1, #14
    f95e:	1879      	adds	r1, r7, r1
    f960:	1c58      	adds	r0, r3, #1
    f962:	8008      	strh	r0, [r1, #0]
    f964:	18d3      	adds	r3, r2, r3
    f966:	687a      	ldr	r2, [r7, #4]
    f968:	7952      	ldrb	r2, [r2, #5]
    f96a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    f96c:	687b      	ldr	r3, [r7, #4]
    f96e:	681a      	ldr	r2, [r3, #0]
    f970:	230e      	movs	r3, #14
    f972:	18fb      	adds	r3, r7, r3
    f974:	881b      	ldrh	r3, [r3, #0]
    f976:	210e      	movs	r1, #14
    f978:	1879      	adds	r1, r7, r1
    f97a:	1c58      	adds	r0, r3, #1
    f97c:	8008      	strh	r0, [r1, #0]
    f97e:	18d3      	adds	r3, r2, r3
    f980:	687a      	ldr	r2, [r7, #4]
    f982:	7992      	ldrb	r2, [r2, #6]
    f984:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    f986:	687b      	ldr	r3, [r7, #4]
    f988:	681a      	ldr	r2, [r3, #0]
    f98a:	230e      	movs	r3, #14
    f98c:	18fb      	adds	r3, r7, r3
    f98e:	881b      	ldrh	r3, [r3, #0]
    f990:	18d0      	adds	r0, r2, r3
    f992:	687b      	ldr	r3, [r7, #4]
    f994:	3307      	adds	r3, #7
    f996:	2208      	movs	r2, #8
    f998:	0019      	movs	r1, r3
    f99a:	4b40      	ldr	r3, [pc, #256]	; (fa9c <LoRaMacSerializerReJoinType1+0x178>)
    f99c:	4798      	blx	r3
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    f99e:	230e      	movs	r3, #14
    f9a0:	18fb      	adds	r3, r7, r3
    f9a2:	220e      	movs	r2, #14
    f9a4:	18ba      	adds	r2, r7, r2
    f9a6:	8812      	ldrh	r2, [r2, #0]
    f9a8:	3208      	adds	r2, #8
    f9aa:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    f9ac:	687b      	ldr	r3, [r7, #4]
    f9ae:	681a      	ldr	r2, [r3, #0]
    f9b0:	230e      	movs	r3, #14
    f9b2:	18fb      	adds	r3, r7, r3
    f9b4:	881b      	ldrh	r3, [r3, #0]
    f9b6:	18d0      	adds	r0, r2, r3
    f9b8:	687b      	ldr	r3, [r7, #4]
    f9ba:	330f      	adds	r3, #15
    f9bc:	2208      	movs	r2, #8
    f9be:	0019      	movs	r1, r3
    f9c0:	4b36      	ldr	r3, [pc, #216]	; (fa9c <LoRaMacSerializerReJoinType1+0x178>)
    f9c2:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    f9c4:	230e      	movs	r3, #14
    f9c6:	18fb      	adds	r3, r7, r3
    f9c8:	220e      	movs	r2, #14
    f9ca:	18ba      	adds	r2, r7, r2
    f9cc:	8812      	ldrh	r2, [r2, #0]
    f9ce:	3208      	adds	r2, #8
    f9d0:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
    f9d2:	687b      	ldr	r3, [r7, #4]
    f9d4:	681a      	ldr	r2, [r3, #0]
    f9d6:	230e      	movs	r3, #14
    f9d8:	18fb      	adds	r3, r7, r3
    f9da:	881b      	ldrh	r3, [r3, #0]
    f9dc:	210e      	movs	r1, #14
    f9de:	1879      	adds	r1, r7, r1
    f9e0:	1c58      	adds	r0, r3, #1
    f9e2:	8008      	strh	r0, [r1, #0]
    f9e4:	18d3      	adds	r3, r2, r3
    f9e6:	687a      	ldr	r2, [r7, #4]
    f9e8:	8b12      	ldrh	r2, [r2, #24]
    f9ea:	b2d2      	uxtb	r2, r2
    f9ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	681a      	ldr	r2, [r3, #0]
    f9f2:	230e      	movs	r3, #14
    f9f4:	18fb      	adds	r3, r7, r3
    f9f6:	881b      	ldrh	r3, [r3, #0]
    f9f8:	210e      	movs	r1, #14
    f9fa:	1879      	adds	r1, r7, r1
    f9fc:	1c58      	adds	r0, r3, #1
    f9fe:	8008      	strh	r0, [r1, #0]
    fa00:	18d3      	adds	r3, r2, r3
    fa02:	687a      	ldr	r2, [r7, #4]
    fa04:	8b12      	ldrh	r2, [r2, #24]
    fa06:	0a12      	lsrs	r2, r2, #8
    fa08:	b292      	uxth	r2, r2
    fa0a:	b2d2      	uxtb	r2, r2
    fa0c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    fa0e:	687b      	ldr	r3, [r7, #4]
    fa10:	681a      	ldr	r2, [r3, #0]
    fa12:	230e      	movs	r3, #14
    fa14:	18fb      	adds	r3, r7, r3
    fa16:	881b      	ldrh	r3, [r3, #0]
    fa18:	210e      	movs	r1, #14
    fa1a:	1879      	adds	r1, r7, r1
    fa1c:	1c58      	adds	r0, r3, #1
    fa1e:	8008      	strh	r0, [r1, #0]
    fa20:	18d2      	adds	r2, r2, r3
    fa22:	687b      	ldr	r3, [r7, #4]
    fa24:	69db      	ldr	r3, [r3, #28]
    fa26:	b2db      	uxtb	r3, r3
    fa28:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    fa2a:	687b      	ldr	r3, [r7, #4]
    fa2c:	681a      	ldr	r2, [r3, #0]
    fa2e:	230e      	movs	r3, #14
    fa30:	18fb      	adds	r3, r7, r3
    fa32:	881b      	ldrh	r3, [r3, #0]
    fa34:	210e      	movs	r1, #14
    fa36:	1879      	adds	r1, r7, r1
    fa38:	1c58      	adds	r0, r3, #1
    fa3a:	8008      	strh	r0, [r1, #0]
    fa3c:	18d2      	adds	r2, r2, r3
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	69db      	ldr	r3, [r3, #28]
    fa42:	0a1b      	lsrs	r3, r3, #8
    fa44:	b2db      	uxtb	r3, r3
    fa46:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    fa48:	687b      	ldr	r3, [r7, #4]
    fa4a:	681a      	ldr	r2, [r3, #0]
    fa4c:	230e      	movs	r3, #14
    fa4e:	18fb      	adds	r3, r7, r3
    fa50:	881b      	ldrh	r3, [r3, #0]
    fa52:	210e      	movs	r1, #14
    fa54:	1879      	adds	r1, r7, r1
    fa56:	1c58      	adds	r0, r3, #1
    fa58:	8008      	strh	r0, [r1, #0]
    fa5a:	18d2      	adds	r2, r2, r3
    fa5c:	687b      	ldr	r3, [r7, #4]
    fa5e:	69db      	ldr	r3, [r3, #28]
    fa60:	0c1b      	lsrs	r3, r3, #16
    fa62:	b2db      	uxtb	r3, r3
    fa64:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    fa66:	687b      	ldr	r3, [r7, #4]
    fa68:	681a      	ldr	r2, [r3, #0]
    fa6a:	230e      	movs	r3, #14
    fa6c:	18fb      	adds	r3, r7, r3
    fa6e:	881b      	ldrh	r3, [r3, #0]
    fa70:	210e      	movs	r1, #14
    fa72:	1879      	adds	r1, r7, r1
    fa74:	1c58      	adds	r0, r3, #1
    fa76:	8008      	strh	r0, [r1, #0]
    fa78:	18d2      	adds	r2, r2, r3
    fa7a:	687b      	ldr	r3, [r7, #4]
    fa7c:	69db      	ldr	r3, [r3, #28]
    fa7e:	0e1b      	lsrs	r3, r3, #24
    fa80:	b2db      	uxtb	r3, r3
    fa82:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    fa84:	230e      	movs	r3, #14
    fa86:	18fb      	adds	r3, r7, r3
    fa88:	881b      	ldrh	r3, [r3, #0]
    fa8a:	b2da      	uxtb	r2, r3
    fa8c:	687b      	ldr	r3, [r7, #4]
    fa8e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    fa90:	2300      	movs	r3, #0
}
    fa92:	0018      	movs	r0, r3
    fa94:	46bd      	mov	sp, r7
    fa96:	b004      	add	sp, #16
    fa98:	bd80      	pop	{r7, pc}
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	0000436f 	.word	0x0000436f

0000faa0 <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    faa0:	b580      	push	{r7, lr}
    faa2:	b084      	sub	sp, #16
    faa4:	af00      	add	r7, sp, #0
    faa6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	2b00      	cmp	r3, #0
    faac:	d003      	beq.n	fab6 <LoRaMacSerializerReJoinType0or2+0x16>
    faae:	687b      	ldr	r3, [r7, #4]
    fab0:	681b      	ldr	r3, [r3, #0]
    fab2:	2b00      	cmp	r3, #0
    fab4:	d101      	bne.n	faba <LoRaMacSerializerReJoinType0or2+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    fab6:	2301      	movs	r3, #1
    fab8:	e0a9      	b.n	fc0e <LoRaMacSerializerReJoinType0or2+0x16e>
    }

    uint16_t bufItr = 0;
    faba:	230e      	movs	r3, #14
    fabc:	18fb      	adds	r3, r7, r3
    fabe:	2200      	movs	r2, #0
    fac0:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
    fac2:	687b      	ldr	r3, [r7, #4]
    fac4:	791b      	ldrb	r3, [r3, #4]
    fac6:	2b12      	cmp	r3, #18
    fac8:	d801      	bhi.n	face <LoRaMacSerializerReJoinType0or2+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    faca:	2302      	movs	r3, #2
    facc:	e09f      	b.n	fc0e <LoRaMacSerializerReJoinType0or2+0x16e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    face:	687b      	ldr	r3, [r7, #4]
    fad0:	681a      	ldr	r2, [r3, #0]
    fad2:	230e      	movs	r3, #14
    fad4:	18fb      	adds	r3, r7, r3
    fad6:	881b      	ldrh	r3, [r3, #0]
    fad8:	210e      	movs	r1, #14
    fada:	1879      	adds	r1, r7, r1
    fadc:	1c58      	adds	r0, r3, #1
    fade:	8008      	strh	r0, [r1, #0]
    fae0:	18d3      	adds	r3, r2, r3
    fae2:	687a      	ldr	r2, [r7, #4]
    fae4:	7952      	ldrb	r2, [r2, #5]
    fae6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    fae8:	687b      	ldr	r3, [r7, #4]
    faea:	681a      	ldr	r2, [r3, #0]
    faec:	230e      	movs	r3, #14
    faee:	18fb      	adds	r3, r7, r3
    faf0:	881b      	ldrh	r3, [r3, #0]
    faf2:	210e      	movs	r1, #14
    faf4:	1879      	adds	r1, r7, r1
    faf6:	1c58      	adds	r0, r3, #1
    faf8:	8008      	strh	r0, [r1, #0]
    fafa:	18d3      	adds	r3, r2, r3
    fafc:	687a      	ldr	r2, [r7, #4]
    fafe:	7992      	ldrb	r2, [r2, #6]
    fb00:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
    fb02:	687b      	ldr	r3, [r7, #4]
    fb04:	681a      	ldr	r2, [r3, #0]
    fb06:	230e      	movs	r3, #14
    fb08:	18fb      	adds	r3, r7, r3
    fb0a:	881b      	ldrh	r3, [r3, #0]
    fb0c:	18d0      	adds	r0, r2, r3
    fb0e:	687b      	ldr	r3, [r7, #4]
    fb10:	3307      	adds	r3, #7
    fb12:	2203      	movs	r2, #3
    fb14:	0019      	movs	r1, r3
    fb16:	4b40      	ldr	r3, [pc, #256]	; (fc18 <LoRaMacSerializerReJoinType0or2+0x178>)
    fb18:	4798      	blx	r3
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;
    fb1a:	230e      	movs	r3, #14
    fb1c:	18fb      	adds	r3, r7, r3
    fb1e:	220e      	movs	r2, #14
    fb20:	18ba      	adds	r2, r7, r2
    fb22:	8812      	ldrh	r2, [r2, #0]
    fb24:	3203      	adds	r2, #3
    fb26:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    fb28:	687b      	ldr	r3, [r7, #4]
    fb2a:	681a      	ldr	r2, [r3, #0]
    fb2c:	230e      	movs	r3, #14
    fb2e:	18fb      	adds	r3, r7, r3
    fb30:	881b      	ldrh	r3, [r3, #0]
    fb32:	18d0      	adds	r0, r2, r3
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	330a      	adds	r3, #10
    fb38:	2208      	movs	r2, #8
    fb3a:	0019      	movs	r1, r3
    fb3c:	4b36      	ldr	r3, [pc, #216]	; (fc18 <LoRaMacSerializerReJoinType0or2+0x178>)
    fb3e:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    fb40:	230e      	movs	r3, #14
    fb42:	18fb      	adds	r3, r7, r3
    fb44:	220e      	movs	r2, #14
    fb46:	18ba      	adds	r2, r7, r2
    fb48:	8812      	ldrh	r2, [r2, #0]
    fb4a:	3208      	adds	r2, #8
    fb4c:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
    fb4e:	687b      	ldr	r3, [r7, #4]
    fb50:	681a      	ldr	r2, [r3, #0]
    fb52:	230e      	movs	r3, #14
    fb54:	18fb      	adds	r3, r7, r3
    fb56:	881b      	ldrh	r3, [r3, #0]
    fb58:	210e      	movs	r1, #14
    fb5a:	1879      	adds	r1, r7, r1
    fb5c:	1c58      	adds	r0, r3, #1
    fb5e:	8008      	strh	r0, [r1, #0]
    fb60:	18d3      	adds	r3, r2, r3
    fb62:	687a      	ldr	r2, [r7, #4]
    fb64:	8a52      	ldrh	r2, [r2, #18]
    fb66:	b2d2      	uxtb	r2, r2
    fb68:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
    fb6a:	687b      	ldr	r3, [r7, #4]
    fb6c:	681a      	ldr	r2, [r3, #0]
    fb6e:	230e      	movs	r3, #14
    fb70:	18fb      	adds	r3, r7, r3
    fb72:	881b      	ldrh	r3, [r3, #0]
    fb74:	210e      	movs	r1, #14
    fb76:	1879      	adds	r1, r7, r1
    fb78:	1c58      	adds	r0, r3, #1
    fb7a:	8008      	strh	r0, [r1, #0]
    fb7c:	18d3      	adds	r3, r2, r3
    fb7e:	687a      	ldr	r2, [r7, #4]
    fb80:	8a52      	ldrh	r2, [r2, #18]
    fb82:	0a12      	lsrs	r2, r2, #8
    fb84:	b292      	uxth	r2, r2
    fb86:	b2d2      	uxtb	r2, r2
    fb88:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    fb8a:	687b      	ldr	r3, [r7, #4]
    fb8c:	681a      	ldr	r2, [r3, #0]
    fb8e:	230e      	movs	r3, #14
    fb90:	18fb      	adds	r3, r7, r3
    fb92:	881b      	ldrh	r3, [r3, #0]
    fb94:	210e      	movs	r1, #14
    fb96:	1879      	adds	r1, r7, r1
    fb98:	1c58      	adds	r0, r3, #1
    fb9a:	8008      	strh	r0, [r1, #0]
    fb9c:	18d2      	adds	r2, r2, r3
    fb9e:	687b      	ldr	r3, [r7, #4]
    fba0:	695b      	ldr	r3, [r3, #20]
    fba2:	b2db      	uxtb	r3, r3
    fba4:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    fba6:	687b      	ldr	r3, [r7, #4]
    fba8:	681a      	ldr	r2, [r3, #0]
    fbaa:	230e      	movs	r3, #14
    fbac:	18fb      	adds	r3, r7, r3
    fbae:	881b      	ldrh	r3, [r3, #0]
    fbb0:	210e      	movs	r1, #14
    fbb2:	1879      	adds	r1, r7, r1
    fbb4:	1c58      	adds	r0, r3, #1
    fbb6:	8008      	strh	r0, [r1, #0]
    fbb8:	18d2      	adds	r2, r2, r3
    fbba:	687b      	ldr	r3, [r7, #4]
    fbbc:	695b      	ldr	r3, [r3, #20]
    fbbe:	0a1b      	lsrs	r3, r3, #8
    fbc0:	b2db      	uxtb	r3, r3
    fbc2:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    fbc4:	687b      	ldr	r3, [r7, #4]
    fbc6:	681a      	ldr	r2, [r3, #0]
    fbc8:	230e      	movs	r3, #14
    fbca:	18fb      	adds	r3, r7, r3
    fbcc:	881b      	ldrh	r3, [r3, #0]
    fbce:	210e      	movs	r1, #14
    fbd0:	1879      	adds	r1, r7, r1
    fbd2:	1c58      	adds	r0, r3, #1
    fbd4:	8008      	strh	r0, [r1, #0]
    fbd6:	18d2      	adds	r2, r2, r3
    fbd8:	687b      	ldr	r3, [r7, #4]
    fbda:	695b      	ldr	r3, [r3, #20]
    fbdc:	0c1b      	lsrs	r3, r3, #16
    fbde:	b2db      	uxtb	r3, r3
    fbe0:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    fbe2:	687b      	ldr	r3, [r7, #4]
    fbe4:	681a      	ldr	r2, [r3, #0]
    fbe6:	230e      	movs	r3, #14
    fbe8:	18fb      	adds	r3, r7, r3
    fbea:	881b      	ldrh	r3, [r3, #0]
    fbec:	210e      	movs	r1, #14
    fbee:	1879      	adds	r1, r7, r1
    fbf0:	1c58      	adds	r0, r3, #1
    fbf2:	8008      	strh	r0, [r1, #0]
    fbf4:	18d2      	adds	r2, r2, r3
    fbf6:	687b      	ldr	r3, [r7, #4]
    fbf8:	695b      	ldr	r3, [r3, #20]
    fbfa:	0e1b      	lsrs	r3, r3, #24
    fbfc:	b2db      	uxtb	r3, r3
    fbfe:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    fc00:	230e      	movs	r3, #14
    fc02:	18fb      	adds	r3, r7, r3
    fc04:	881b      	ldrh	r3, [r3, #0]
    fc06:	b2da      	uxtb	r2, r3
    fc08:	687b      	ldr	r3, [r7, #4]
    fc0a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    fc0c:	2300      	movs	r3, #0
}
    fc0e:	0018      	movs	r0, r3
    fc10:	46bd      	mov	sp, r7
    fc12:	b004      	add	sp, #16
    fc14:	bd80      	pop	{r7, pc}
    fc16:	46c0      	nop			; (mov r8, r8)
    fc18:	0000436f 	.word	0x0000436f

0000fc1c <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    fc1c:	b580      	push	{r7, lr}
    fc1e:	b084      	sub	sp, #16
    fc20:	af00      	add	r7, sp, #0
    fc22:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    fc24:	687b      	ldr	r3, [r7, #4]
    fc26:	2b00      	cmp	r3, #0
    fc28:	d003      	beq.n	fc32 <LoRaMacSerializerData+0x16>
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	681b      	ldr	r3, [r3, #0]
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d101      	bne.n	fc36 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    fc32:	2301      	movs	r3, #1
    fc34:	e12c      	b.n	fe90 <LoRaMacSerializerData+0x274>
    }

    uint16_t bufItr = 0;
    fc36:	230e      	movs	r3, #14
    fc38:	18fb      	adds	r3, r7, r3
    fc3a:	2200      	movs	r2, #0
    fc3c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
    fc3e:	230c      	movs	r3, #12
    fc40:	18fb      	adds	r3, r7, r3
    fc42:	2208      	movs	r2, #8
    fc44:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	2228      	movs	r2, #40	; 0x28
    fc4a:	5c9b      	ldrb	r3, [r3, r2]
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d109      	bne.n	fc64 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	791b      	ldrb	r3, [r3, #4]
    fc54:	b29b      	uxth	r3, r3
    fc56:	220c      	movs	r2, #12
    fc58:	18ba      	adds	r2, r7, r2
    fc5a:	8812      	ldrh	r2, [r2, #0]
    fc5c:	429a      	cmp	r2, r3
    fc5e:	d916      	bls.n	fc8e <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    fc60:	2302      	movs	r3, #2
    fc62:	e115      	b.n	fe90 <LoRaMacSerializerData+0x274>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
    fc64:	687b      	ldr	r3, [r7, #4]
    fc66:	791b      	ldrb	r3, [r3, #4]
    fc68:	0018      	movs	r0, r3
    fc6a:	230c      	movs	r3, #12
    fc6c:	18fb      	adds	r3, r7, r3
    fc6e:	881b      	ldrh	r3, [r3, #0]
    fc70:	687a      	ldr	r2, [r7, #4]
    fc72:	7b12      	ldrb	r2, [r2, #12]
    fc74:	0712      	lsls	r2, r2, #28
    fc76:	0f12      	lsrs	r2, r2, #28
    fc78:	b2d2      	uxtb	r2, r2
    fc7a:	189b      	adds	r3, r3, r2
    fc7c:	687a      	ldr	r2, [r7, #4]
    fc7e:	2128      	movs	r1, #40	; 0x28
    fc80:	5c52      	ldrb	r2, [r2, r1]
    fc82:	189b      	adds	r3, r3, r2
    fc84:	3301      	adds	r3, #1
    fc86:	4298      	cmp	r0, r3
    fc88:	da01      	bge.n	fc8e <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    fc8a:	2302      	movs	r3, #2
    fc8c:	e100      	b.n	fe90 <LoRaMacSerializerData+0x274>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    fc8e:	687b      	ldr	r3, [r7, #4]
    fc90:	681a      	ldr	r2, [r3, #0]
    fc92:	230e      	movs	r3, #14
    fc94:	18fb      	adds	r3, r7, r3
    fc96:	881b      	ldrh	r3, [r3, #0]
    fc98:	210e      	movs	r1, #14
    fc9a:	1879      	adds	r1, r7, r1
    fc9c:	1c58      	adds	r0, r3, #1
    fc9e:	8008      	strh	r0, [r1, #0]
    fca0:	18d3      	adds	r3, r2, r3
    fca2:	687a      	ldr	r2, [r7, #4]
    fca4:	7952      	ldrb	r2, [r2, #5]
    fca6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	681a      	ldr	r2, [r3, #0]
    fcac:	230e      	movs	r3, #14
    fcae:	18fb      	adds	r3, r7, r3
    fcb0:	881b      	ldrh	r3, [r3, #0]
    fcb2:	210e      	movs	r1, #14
    fcb4:	1879      	adds	r1, r7, r1
    fcb6:	1c58      	adds	r0, r3, #1
    fcb8:	8008      	strh	r0, [r1, #0]
    fcba:	18d2      	adds	r2, r2, r3
    fcbc:	687b      	ldr	r3, [r7, #4]
    fcbe:	689b      	ldr	r3, [r3, #8]
    fcc0:	b2db      	uxtb	r3, r3
    fcc2:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
    fcc4:	687b      	ldr	r3, [r7, #4]
    fcc6:	681a      	ldr	r2, [r3, #0]
    fcc8:	230e      	movs	r3, #14
    fcca:	18fb      	adds	r3, r7, r3
    fccc:	881b      	ldrh	r3, [r3, #0]
    fcce:	210e      	movs	r1, #14
    fcd0:	1879      	adds	r1, r7, r1
    fcd2:	1c58      	adds	r0, r3, #1
    fcd4:	8008      	strh	r0, [r1, #0]
    fcd6:	18d2      	adds	r2, r2, r3
    fcd8:	687b      	ldr	r3, [r7, #4]
    fcda:	689b      	ldr	r3, [r3, #8]
    fcdc:	0a1b      	lsrs	r3, r3, #8
    fcde:	b2db      	uxtb	r3, r3
    fce0:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
    fce2:	687b      	ldr	r3, [r7, #4]
    fce4:	681a      	ldr	r2, [r3, #0]
    fce6:	230e      	movs	r3, #14
    fce8:	18fb      	adds	r3, r7, r3
    fcea:	881b      	ldrh	r3, [r3, #0]
    fcec:	210e      	movs	r1, #14
    fcee:	1879      	adds	r1, r7, r1
    fcf0:	1c58      	adds	r0, r3, #1
    fcf2:	8008      	strh	r0, [r1, #0]
    fcf4:	18d2      	adds	r2, r2, r3
    fcf6:	687b      	ldr	r3, [r7, #4]
    fcf8:	689b      	ldr	r3, [r3, #8]
    fcfa:	0c1b      	lsrs	r3, r3, #16
    fcfc:	b2db      	uxtb	r3, r3
    fcfe:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
    fd00:	687b      	ldr	r3, [r7, #4]
    fd02:	681a      	ldr	r2, [r3, #0]
    fd04:	230e      	movs	r3, #14
    fd06:	18fb      	adds	r3, r7, r3
    fd08:	881b      	ldrh	r3, [r3, #0]
    fd0a:	210e      	movs	r1, #14
    fd0c:	1879      	adds	r1, r7, r1
    fd0e:	1c58      	adds	r0, r3, #1
    fd10:	8008      	strh	r0, [r1, #0]
    fd12:	18d2      	adds	r2, r2, r3
    fd14:	687b      	ldr	r3, [r7, #4]
    fd16:	689b      	ldr	r3, [r3, #8]
    fd18:	0e1b      	lsrs	r3, r3, #24
    fd1a:	b2db      	uxtb	r3, r3
    fd1c:	7013      	strb	r3, [r2, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	681a      	ldr	r2, [r3, #0]
    fd22:	230e      	movs	r3, #14
    fd24:	18fb      	adds	r3, r7, r3
    fd26:	881b      	ldrh	r3, [r3, #0]
    fd28:	210e      	movs	r1, #14
    fd2a:	1879      	adds	r1, r7, r1
    fd2c:	1c58      	adds	r0, r3, #1
    fd2e:	8008      	strh	r0, [r1, #0]
    fd30:	18d3      	adds	r3, r2, r3
    fd32:	687a      	ldr	r2, [r7, #4]
    fd34:	7b12      	ldrb	r2, [r2, #12]
    fd36:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	681a      	ldr	r2, [r3, #0]
    fd3c:	230e      	movs	r3, #14
    fd3e:	18fb      	adds	r3, r7, r3
    fd40:	881b      	ldrh	r3, [r3, #0]
    fd42:	210e      	movs	r1, #14
    fd44:	1879      	adds	r1, r7, r1
    fd46:	1c58      	adds	r0, r3, #1
    fd48:	8008      	strh	r0, [r1, #0]
    fd4a:	18d3      	adds	r3, r2, r3
    fd4c:	687a      	ldr	r2, [r7, #4]
    fd4e:	89d2      	ldrh	r2, [r2, #14]
    fd50:	b2d2      	uxtb	r2, r2
    fd52:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
    fd54:	687b      	ldr	r3, [r7, #4]
    fd56:	681a      	ldr	r2, [r3, #0]
    fd58:	230e      	movs	r3, #14
    fd5a:	18fb      	adds	r3, r7, r3
    fd5c:	881b      	ldrh	r3, [r3, #0]
    fd5e:	210e      	movs	r1, #14
    fd60:	1879      	adds	r1, r7, r1
    fd62:	1c58      	adds	r0, r3, #1
    fd64:	8008      	strh	r0, [r1, #0]
    fd66:	18d3      	adds	r3, r2, r3
    fd68:	687a      	ldr	r2, [r7, #4]
    fd6a:	89d2      	ldrh	r2, [r2, #14]
    fd6c:	0a12      	lsrs	r2, r2, #8
    fd6e:	b292      	uxth	r2, r2
    fd70:	b2d2      	uxtb	r2, r2
    fd72:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
    fd74:	687b      	ldr	r3, [r7, #4]
    fd76:	681a      	ldr	r2, [r3, #0]
    fd78:	230e      	movs	r3, #14
    fd7a:	18fb      	adds	r3, r7, r3
    fd7c:	881b      	ldrh	r3, [r3, #0]
    fd7e:	18d0      	adds	r0, r2, r3
    fd80:	687b      	ldr	r3, [r7, #4]
    fd82:	3310      	adds	r3, #16
    fd84:	0019      	movs	r1, r3
    fd86:	687b      	ldr	r3, [r7, #4]
    fd88:	7b1b      	ldrb	r3, [r3, #12]
    fd8a:	071b      	lsls	r3, r3, #28
    fd8c:	0f1b      	lsrs	r3, r3, #28
    fd8e:	b2db      	uxtb	r3, r3
    fd90:	b29b      	uxth	r3, r3
    fd92:	001a      	movs	r2, r3
    fd94:	4b40      	ldr	r3, [pc, #256]	; (fe98 <LoRaMacSerializerData+0x27c>)
    fd96:	4798      	blx	r3
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    fd98:	687b      	ldr	r3, [r7, #4]
    fd9a:	7b1b      	ldrb	r3, [r3, #12]
    fd9c:	071b      	lsls	r3, r3, #28
    fd9e:	0f1b      	lsrs	r3, r3, #28
    fda0:	b2db      	uxtb	r3, r3
    fda2:	b299      	uxth	r1, r3
    fda4:	230e      	movs	r3, #14
    fda6:	18fb      	adds	r3, r7, r3
    fda8:	220e      	movs	r2, #14
    fdaa:	18ba      	adds	r2, r7, r2
    fdac:	8812      	ldrh	r2, [r2, #0]
    fdae:	188a      	adds	r2, r1, r2
    fdb0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
    fdb2:	687b      	ldr	r3, [r7, #4]
    fdb4:	2228      	movs	r2, #40	; 0x28
    fdb6:	5c9b      	ldrb	r3, [r3, r2]
    fdb8:	2b00      	cmp	r3, #0
    fdba:	d00d      	beq.n	fdd8 <LoRaMacSerializerData+0x1bc>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
    fdbc:	687b      	ldr	r3, [r7, #4]
    fdbe:	681a      	ldr	r2, [r3, #0]
    fdc0:	230e      	movs	r3, #14
    fdc2:	18fb      	adds	r3, r7, r3
    fdc4:	881b      	ldrh	r3, [r3, #0]
    fdc6:	210e      	movs	r1, #14
    fdc8:	1879      	adds	r1, r7, r1
    fdca:	1c58      	adds	r0, r3, #1
    fdcc:	8008      	strh	r0, [r1, #0]
    fdce:	18d3      	adds	r3, r2, r3
    fdd0:	687a      	ldr	r2, [r7, #4]
    fdd2:	2120      	movs	r1, #32
    fdd4:	5c52      	ldrb	r2, [r2, r1]
    fdd6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
    fdd8:	687b      	ldr	r3, [r7, #4]
    fdda:	681a      	ldr	r2, [r3, #0]
    fddc:	230e      	movs	r3, #14
    fdde:	18fb      	adds	r3, r7, r3
    fde0:	881b      	ldrh	r3, [r3, #0]
    fde2:	18d0      	adds	r0, r2, r3
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    fde8:	687b      	ldr	r3, [r7, #4]
    fdea:	2228      	movs	r2, #40	; 0x28
    fdec:	5c9b      	ldrb	r3, [r3, r2]
    fdee:	b29b      	uxth	r3, r3
    fdf0:	001a      	movs	r2, r3
    fdf2:	4b29      	ldr	r3, [pc, #164]	; (fe98 <LoRaMacSerializerData+0x27c>)
    fdf4:	4798      	blx	r3
    bufItr = bufItr + macMsg->FRMPayloadSize;
    fdf6:	687b      	ldr	r3, [r7, #4]
    fdf8:	2228      	movs	r2, #40	; 0x28
    fdfa:	5c9b      	ldrb	r3, [r3, r2]
    fdfc:	b299      	uxth	r1, r3
    fdfe:	230e      	movs	r3, #14
    fe00:	18fb      	adds	r3, r7, r3
    fe02:	220e      	movs	r2, #14
    fe04:	18ba      	adds	r2, r7, r2
    fe06:	8812      	ldrh	r2, [r2, #0]
    fe08:	188a      	adds	r2, r1, r2
    fe0a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    fe0c:	687b      	ldr	r3, [r7, #4]
    fe0e:	681a      	ldr	r2, [r3, #0]
    fe10:	230e      	movs	r3, #14
    fe12:	18fb      	adds	r3, r7, r3
    fe14:	881b      	ldrh	r3, [r3, #0]
    fe16:	210e      	movs	r1, #14
    fe18:	1879      	adds	r1, r7, r1
    fe1a:	1c58      	adds	r0, r3, #1
    fe1c:	8008      	strh	r0, [r1, #0]
    fe1e:	18d2      	adds	r2, r2, r3
    fe20:	687b      	ldr	r3, [r7, #4]
    fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fe24:	b2db      	uxtb	r3, r3
    fe26:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    fe28:	687b      	ldr	r3, [r7, #4]
    fe2a:	681a      	ldr	r2, [r3, #0]
    fe2c:	230e      	movs	r3, #14
    fe2e:	18fb      	adds	r3, r7, r3
    fe30:	881b      	ldrh	r3, [r3, #0]
    fe32:	210e      	movs	r1, #14
    fe34:	1879      	adds	r1, r7, r1
    fe36:	1c58      	adds	r0, r3, #1
    fe38:	8008      	strh	r0, [r1, #0]
    fe3a:	18d2      	adds	r2, r2, r3
    fe3c:	687b      	ldr	r3, [r7, #4]
    fe3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fe40:	0a1b      	lsrs	r3, r3, #8
    fe42:	b2db      	uxtb	r3, r3
    fe44:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    fe46:	687b      	ldr	r3, [r7, #4]
    fe48:	681a      	ldr	r2, [r3, #0]
    fe4a:	230e      	movs	r3, #14
    fe4c:	18fb      	adds	r3, r7, r3
    fe4e:	881b      	ldrh	r3, [r3, #0]
    fe50:	210e      	movs	r1, #14
    fe52:	1879      	adds	r1, r7, r1
    fe54:	1c58      	adds	r0, r3, #1
    fe56:	8008      	strh	r0, [r1, #0]
    fe58:	18d2      	adds	r2, r2, r3
    fe5a:	687b      	ldr	r3, [r7, #4]
    fe5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fe5e:	0c1b      	lsrs	r3, r3, #16
    fe60:	b2db      	uxtb	r3, r3
    fe62:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    fe64:	687b      	ldr	r3, [r7, #4]
    fe66:	681a      	ldr	r2, [r3, #0]
    fe68:	230e      	movs	r3, #14
    fe6a:	18fb      	adds	r3, r7, r3
    fe6c:	881b      	ldrh	r3, [r3, #0]
    fe6e:	210e      	movs	r1, #14
    fe70:	1879      	adds	r1, r7, r1
    fe72:	1c58      	adds	r0, r3, #1
    fe74:	8008      	strh	r0, [r1, #0]
    fe76:	18d2      	adds	r2, r2, r3
    fe78:	687b      	ldr	r3, [r7, #4]
    fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fe7c:	0e1b      	lsrs	r3, r3, #24
    fe7e:	b2db      	uxtb	r3, r3
    fe80:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    fe82:	230e      	movs	r3, #14
    fe84:	18fb      	adds	r3, r7, r3
    fe86:	881b      	ldrh	r3, [r3, #0]
    fe88:	b2da      	uxtb	r2, r3
    fe8a:	687b      	ldr	r3, [r7, #4]
    fe8c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    fe8e:	2300      	movs	r3, #0
}
    fe90:	0018      	movs	r0, r3
    fe92:	46bd      	mov	sp, r7
    fe94:	b004      	add	sp, #16
    fe96:	bd80      	pop	{r7, pc}
    fe98:	00004339 	.word	0x00004339

0000fe9c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    fe9c:	b580      	push	{r7, lr}
    fe9e:	b082      	sub	sp, #8
    fea0:	af00      	add	r7, sp, #0
    fea2:	0002      	movs	r2, r0
    fea4:	1dfb      	adds	r3, r7, #7
    fea6:	701a      	strb	r2, [r3, #0]
    switch( region )
    fea8:	1dfb      	adds	r3, r7, #7
    feaa:	781b      	ldrb	r3, [r3, #0]
    feac:	2b05      	cmp	r3, #5
    feae:	d101      	bne.n	feb4 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
    feb0:	2301      	movs	r3, #1
    feb2:	e000      	b.n	feb6 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
    feb4:	2300      	movs	r3, #0
        }
    }
}
    feb6:	0018      	movs	r0, r3
    feb8:	46bd      	mov	sp, r7
    feba:	b002      	add	sp, #8
    febc:	bd80      	pop	{r7, pc}
	...

0000fec0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    fec0:	b580      	push	{r7, lr}
    fec2:	b084      	sub	sp, #16
    fec4:	af00      	add	r7, sp, #0
    fec6:	0002      	movs	r2, r0
    fec8:	6039      	str	r1, [r7, #0]
    feca:	1dfb      	adds	r3, r7, #7
    fecc:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
    fece:	2308      	movs	r3, #8
    fed0:	18fb      	adds	r3, r7, r3
    fed2:	2200      	movs	r2, #0
    fed4:	601a      	str	r2, [r3, #0]
    switch( region )
    fed6:	1dfb      	adds	r3, r7, #7
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	2b05      	cmp	r3, #5
    fedc:	d109      	bne.n	fef2 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
    fede:	683b      	ldr	r3, [r7, #0]
    fee0:	0018      	movs	r0, r3
    fee2:	4b0b      	ldr	r3, [pc, #44]	; (ff10 <RegionGetPhyParam+0x50>)
    fee4:	4798      	blx	r3
    fee6:	0003      	movs	r3, r0
    fee8:	001a      	movs	r2, r3
    feea:	230c      	movs	r3, #12
    feec:	18fb      	adds	r3, r7, r3
    feee:	601a      	str	r2, [r3, #0]
    fef0:	e005      	b.n	fefe <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
    fef2:	230c      	movs	r3, #12
    fef4:	18fb      	adds	r3, r7, r3
    fef6:	2208      	movs	r2, #8
    fef8:	18ba      	adds	r2, r7, r2
    fefa:	6812      	ldr	r2, [r2, #0]
    fefc:	601a      	str	r2, [r3, #0]
    fefe:	230c      	movs	r3, #12
    ff00:	18fb      	adds	r3, r7, r3
    ff02:	2200      	movs	r2, #0
    ff04:	681a      	ldr	r2, [r3, #0]
    ff06:	0013      	movs	r3, r2
        }
    }
}
    ff08:	0018      	movs	r0, r3
    ff0a:	46bd      	mov	sp, r7
    ff0c:	b004      	add	sp, #16
    ff0e:	bd80      	pop	{r7, pc}
    ff10:	000112f1 	.word	0x000112f1

0000ff14 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    ff14:	b580      	push	{r7, lr}
    ff16:	b082      	sub	sp, #8
    ff18:	af00      	add	r7, sp, #0
    ff1a:	0002      	movs	r2, r0
    ff1c:	6039      	str	r1, [r7, #0]
    ff1e:	1dfb      	adds	r3, r7, #7
    ff20:	701a      	strb	r2, [r3, #0]
    switch( region )
    ff22:	1dfb      	adds	r3, r7, #7
    ff24:	781b      	ldrb	r3, [r3, #0]
    ff26:	2b05      	cmp	r3, #5
    ff28:	d000      	beq.n	ff2c <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
    ff2a:	e004      	b.n	ff36 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
    ff2c:	683b      	ldr	r3, [r7, #0]
    ff2e:	0018      	movs	r0, r3
    ff30:	4b02      	ldr	r3, [pc, #8]	; (ff3c <RegionSetBandTxDone+0x28>)
    ff32:	4798      	blx	r3
    ff34:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    ff36:	46bd      	mov	sp, r7
    ff38:	b002      	add	sp, #8
    ff3a:	bd80      	pop	{r7, pc}
    ff3c:	00011505 	.word	0x00011505

0000ff40 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    ff40:	b580      	push	{r7, lr}
    ff42:	b082      	sub	sp, #8
    ff44:	af00      	add	r7, sp, #0
    ff46:	0002      	movs	r2, r0
    ff48:	6039      	str	r1, [r7, #0]
    ff4a:	1dfb      	adds	r3, r7, #7
    ff4c:	701a      	strb	r2, [r3, #0]
    switch( region )
    ff4e:	1dfb      	adds	r3, r7, #7
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	2b05      	cmp	r3, #5
    ff54:	d000      	beq.n	ff58 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
    ff56:	e004      	b.n	ff62 <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
    ff58:	683b      	ldr	r3, [r7, #0]
    ff5a:	0018      	movs	r0, r3
    ff5c:	4b03      	ldr	r3, [pc, #12]	; (ff6c <RegionInitDefaults+0x2c>)
    ff5e:	4798      	blx	r3
    ff60:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    ff62:	46c0      	nop			; (mov r8, r8)
    ff64:	46bd      	mov	sp, r7
    ff66:	b002      	add	sp, #8
    ff68:	bd80      	pop	{r7, pc}
    ff6a:	46c0      	nop			; (mov r8, r8)
    ff6c:	00011549 	.word	0x00011549

0000ff70 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    ff70:	b580      	push	{r7, lr}
    ff72:	b082      	sub	sp, #8
    ff74:	af00      	add	r7, sp, #0
    ff76:	0002      	movs	r2, r0
    ff78:	6039      	str	r1, [r7, #0]
    ff7a:	1dfb      	adds	r3, r7, #7
    ff7c:	701a      	strb	r2, [r3, #0]
    switch( region )
    ff7e:	1dfb      	adds	r3, r7, #7
    ff80:	781b      	ldrb	r3, [r3, #0]
    ff82:	2b05      	cmp	r3, #5
    ff84:	d105      	bne.n	ff92 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
    ff86:	683b      	ldr	r3, [r7, #0]
    ff88:	0018      	movs	r0, r3
    ff8a:	4b04      	ldr	r3, [pc, #16]	; (ff9c <RegionGetNvmCtx+0x2c>)
    ff8c:	4798      	blx	r3
    ff8e:	0003      	movs	r3, r0
    ff90:	e000      	b.n	ff94 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
    ff92:	2300      	movs	r3, #0
        }
    }
}
    ff94:	0018      	movs	r0, r3
    ff96:	46bd      	mov	sp, r7
    ff98:	b002      	add	sp, #8
    ff9a:	bd80      	pop	{r7, pc}
    ff9c:	00011661 	.word	0x00011661

0000ffa0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    ffa0:	b580      	push	{r7, lr}
    ffa2:	b082      	sub	sp, #8
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	6039      	str	r1, [r7, #0]
    ffa8:	0011      	movs	r1, r2
    ffaa:	1dfb      	adds	r3, r7, #7
    ffac:	1c02      	adds	r2, r0, #0
    ffae:	701a      	strb	r2, [r3, #0]
    ffb0:	1dbb      	adds	r3, r7, #6
    ffb2:	1c0a      	adds	r2, r1, #0
    ffb4:	701a      	strb	r2, [r3, #0]
    switch( region )
    ffb6:	1dfb      	adds	r3, r7, #7
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	2b05      	cmp	r3, #5
    ffbc:	d108      	bne.n	ffd0 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
    ffbe:	1dbb      	adds	r3, r7, #6
    ffc0:	781a      	ldrb	r2, [r3, #0]
    ffc2:	683b      	ldr	r3, [r7, #0]
    ffc4:	0011      	movs	r1, r2
    ffc6:	0018      	movs	r0, r3
    ffc8:	4b04      	ldr	r3, [pc, #16]	; (ffdc <RegionVerify+0x3c>)
    ffca:	4798      	blx	r3
    ffcc:	0003      	movs	r3, r0
    ffce:	e000      	b.n	ffd2 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
    ffd0:	2300      	movs	r3, #0
        }
    }
}
    ffd2:	0018      	movs	r0, r3
    ffd4:	46bd      	mov	sp, r7
    ffd6:	b002      	add	sp, #8
    ffd8:	bd80      	pop	{r7, pc}
    ffda:	46c0      	nop			; (mov r8, r8)
    ffdc:	00011681 	.word	0x00011681

0000ffe0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    ffe0:	b580      	push	{r7, lr}
    ffe2:	b082      	sub	sp, #8
    ffe4:	af00      	add	r7, sp, #0
    ffe6:	0002      	movs	r2, r0
    ffe8:	6039      	str	r1, [r7, #0]
    ffea:	1dfb      	adds	r3, r7, #7
    ffec:	701a      	strb	r2, [r3, #0]
    switch( region )
    ffee:	1dfb      	adds	r3, r7, #7
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	2b05      	cmp	r3, #5
    fff4:	d000      	beq.n	fff8 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
    fff6:	e004      	b.n	10002 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
    fff8:	683b      	ldr	r3, [r7, #0]
    fffa:	0018      	movs	r0, r3
    fffc:	4b03      	ldr	r3, [pc, #12]	; (1000c <RegionApplyCFList+0x2c>)
    fffe:	4798      	blx	r3
   10000:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   10002:	46c0      	nop			; (mov r8, r8)
   10004:	46bd      	mov	sp, r7
   10006:	b002      	add	sp, #8
   10008:	bd80      	pop	{r7, pc}
   1000a:	46c0      	nop			; (mov r8, r8)
   1000c:	00011721 	.word	0x00011721

00010010 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
   10010:	b580      	push	{r7, lr}
   10012:	b082      	sub	sp, #8
   10014:	af00      	add	r7, sp, #0
   10016:	0002      	movs	r2, r0
   10018:	6039      	str	r1, [r7, #0]
   1001a:	1dfb      	adds	r3, r7, #7
   1001c:	701a      	strb	r2, [r3, #0]
    switch( region )
   1001e:	1dfb      	adds	r3, r7, #7
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	2b05      	cmp	r3, #5
   10024:	d105      	bne.n	10032 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
   10026:	683b      	ldr	r3, [r7, #0]
   10028:	0018      	movs	r0, r3
   1002a:	4b04      	ldr	r3, [pc, #16]	; (1003c <RegionChanMaskSet+0x2c>)
   1002c:	4798      	blx	r3
   1002e:	0003      	movs	r3, r0
   10030:	e000      	b.n	10034 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
   10032:	2300      	movs	r3, #0
        }
    }
}
   10034:	0018      	movs	r0, r3
   10036:	46bd      	mov	sp, r7
   10038:	b002      	add	sp, #8
   1003a:	bd80      	pop	{r7, pc}
   1003c:	0001186d 	.word	0x0001186d

00010040 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
   10040:	b590      	push	{r4, r7, lr}
   10042:	b083      	sub	sp, #12
   10044:	af00      	add	r7, sp, #0
   10046:	0004      	movs	r4, r0
   10048:	0008      	movs	r0, r1
   1004a:	0011      	movs	r1, r2
   1004c:	603b      	str	r3, [r7, #0]
   1004e:	1dfb      	adds	r3, r7, #7
   10050:	1c22      	adds	r2, r4, #0
   10052:	701a      	strb	r2, [r3, #0]
   10054:	1dbb      	adds	r3, r7, #6
   10056:	1c02      	adds	r2, r0, #0
   10058:	701a      	strb	r2, [r3, #0]
   1005a:	1d7b      	adds	r3, r7, #5
   1005c:	1c0a      	adds	r2, r1, #0
   1005e:	701a      	strb	r2, [r3, #0]
    switch( region )
   10060:	1dfb      	adds	r3, r7, #7
   10062:	781b      	ldrb	r3, [r3, #0]
   10064:	2b05      	cmp	r3, #5
   10066:	d000      	beq.n	1006a <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
   10068:	e00a      	b.n	10080 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
   1006a:	69bc      	ldr	r4, [r7, #24]
   1006c:	683a      	ldr	r2, [r7, #0]
   1006e:	1d7b      	adds	r3, r7, #5
   10070:	7819      	ldrb	r1, [r3, #0]
   10072:	1dbb      	adds	r3, r7, #6
   10074:	2000      	movs	r0, #0
   10076:	5618      	ldrsb	r0, [r3, r0]
   10078:	0023      	movs	r3, r4
   1007a:	4c03      	ldr	r4, [pc, #12]	; (10088 <RegionComputeRxWindowParameters+0x48>)
   1007c:	47a0      	blx	r4
   1007e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   10080:	46c0      	nop			; (mov r8, r8)
   10082:	46bd      	mov	sp, r7
   10084:	b003      	add	sp, #12
   10086:	bd90      	pop	{r4, r7, pc}
   10088:	000118bd 	.word	0x000118bd

0001008c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
   1008c:	b580      	push	{r7, lr}
   1008e:	b084      	sub	sp, #16
   10090:	af00      	add	r7, sp, #0
   10092:	60b9      	str	r1, [r7, #8]
   10094:	607a      	str	r2, [r7, #4]
   10096:	230f      	movs	r3, #15
   10098:	18fb      	adds	r3, r7, r3
   1009a:	1c02      	adds	r2, r0, #0
   1009c:	701a      	strb	r2, [r3, #0]
    switch( region )
   1009e:	230f      	movs	r3, #15
   100a0:	18fb      	adds	r3, r7, r3
   100a2:	781b      	ldrb	r3, [r3, #0]
   100a4:	2b05      	cmp	r3, #5
   100a6:	d107      	bne.n	100b8 <RegionRxConfig+0x2c>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
   100a8:	687a      	ldr	r2, [r7, #4]
   100aa:	68bb      	ldr	r3, [r7, #8]
   100ac:	0011      	movs	r1, r2
   100ae:	0018      	movs	r0, r3
   100b0:	4b04      	ldr	r3, [pc, #16]	; (100c4 <RegionRxConfig+0x38>)
   100b2:	4798      	blx	r3
   100b4:	0003      	movs	r3, r0
   100b6:	e000      	b.n	100ba <RegionRxConfig+0x2e>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
   100b8:	2300      	movs	r3, #0
        }
    }
}
   100ba:	0018      	movs	r0, r3
   100bc:	46bd      	mov	sp, r7
   100be:	b004      	add	sp, #16
   100c0:	bd80      	pop	{r7, pc}
   100c2:	46c0      	nop			; (mov r8, r8)
   100c4:	000119a5 	.word	0x000119a5

000100c8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   100c8:	b580      	push	{r7, lr}
   100ca:	b084      	sub	sp, #16
   100cc:	af00      	add	r7, sp, #0
   100ce:	60b9      	str	r1, [r7, #8]
   100d0:	607a      	str	r2, [r7, #4]
   100d2:	603b      	str	r3, [r7, #0]
   100d4:	230f      	movs	r3, #15
   100d6:	18fb      	adds	r3, r7, r3
   100d8:	1c02      	adds	r2, r0, #0
   100da:	701a      	strb	r2, [r3, #0]
    switch( region )
   100dc:	230f      	movs	r3, #15
   100de:	18fb      	adds	r3, r7, r3
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	2b05      	cmp	r3, #5
   100e4:	d107      	bne.n	100f6 <RegionTxConfig+0x2e>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
   100e6:	683a      	ldr	r2, [r7, #0]
   100e8:	6879      	ldr	r1, [r7, #4]
   100ea:	68bb      	ldr	r3, [r7, #8]
   100ec:	0018      	movs	r0, r3
   100ee:	4b04      	ldr	r3, [pc, #16]	; (10100 <RegionTxConfig+0x38>)
   100f0:	4798      	blx	r3
   100f2:	0003      	movs	r3, r0
   100f4:	e000      	b.n	100f8 <RegionTxConfig+0x30>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
   100f6:	2300      	movs	r3, #0
        }
    }
}
   100f8:	0018      	movs	r0, r3
   100fa:	46bd      	mov	sp, r7
   100fc:	b004      	add	sp, #16
   100fe:	bd80      	pop	{r7, pc}
   10100:	00011b7d 	.word	0x00011b7d

00010104 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   10104:	b590      	push	{r4, r7, lr}
   10106:	b087      	sub	sp, #28
   10108:	af02      	add	r7, sp, #8
   1010a:	60b9      	str	r1, [r7, #8]
   1010c:	607a      	str	r2, [r7, #4]
   1010e:	603b      	str	r3, [r7, #0]
   10110:	230f      	movs	r3, #15
   10112:	18fb      	adds	r3, r7, r3
   10114:	1c02      	adds	r2, r0, #0
   10116:	701a      	strb	r2, [r3, #0]
    switch( region )
   10118:	230f      	movs	r3, #15
   1011a:	18fb      	adds	r3, r7, r3
   1011c:	781b      	ldrb	r3, [r3, #0]
   1011e:	2b05      	cmp	r3, #5
   10120:	d10a      	bne.n	10138 <RegionLinkAdrReq+0x34>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
   10122:	6a3c      	ldr	r4, [r7, #32]
   10124:	683a      	ldr	r2, [r7, #0]
   10126:	6879      	ldr	r1, [r7, #4]
   10128:	68b8      	ldr	r0, [r7, #8]
   1012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1012c:	9300      	str	r3, [sp, #0]
   1012e:	0023      	movs	r3, r4
   10130:	4c04      	ldr	r4, [pc, #16]	; (10144 <RegionLinkAdrReq+0x40>)
   10132:	47a0      	blx	r4
   10134:	0003      	movs	r3, r0
   10136:	e000      	b.n	1013a <RegionLinkAdrReq+0x36>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
   10138:	2300      	movs	r3, #0
        }
    }
}
   1013a:	0018      	movs	r0, r3
   1013c:	46bd      	mov	sp, r7
   1013e:	b005      	add	sp, #20
   10140:	bd90      	pop	{r4, r7, pc}
   10142:	46c0      	nop			; (mov r8, r8)
   10144:	00011d3d 	.word	0x00011d3d

00010148 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
   10148:	b580      	push	{r7, lr}
   1014a:	b082      	sub	sp, #8
   1014c:	af00      	add	r7, sp, #0
   1014e:	0002      	movs	r2, r0
   10150:	6039      	str	r1, [r7, #0]
   10152:	1dfb      	adds	r3, r7, #7
   10154:	701a      	strb	r2, [r3, #0]
    switch( region )
   10156:	1dfb      	adds	r3, r7, #7
   10158:	781b      	ldrb	r3, [r3, #0]
   1015a:	2b05      	cmp	r3, #5
   1015c:	d105      	bne.n	1016a <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
   1015e:	683b      	ldr	r3, [r7, #0]
   10160:	0018      	movs	r0, r3
   10162:	4b04      	ldr	r3, [pc, #16]	; (10174 <RegionRxParamSetupReq+0x2c>)
   10164:	4798      	blx	r3
   10166:	0003      	movs	r3, r0
   10168:	e000      	b.n	1016c <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
   1016a:	2300      	movs	r3, #0
        }
    }
}
   1016c:	0018      	movs	r0, r3
   1016e:	46bd      	mov	sp, r7
   10170:	b002      	add	sp, #8
   10172:	bd80      	pop	{r7, pc}
   10174:	00012039 	.word	0x00012039

00010178 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
   10178:	b580      	push	{r7, lr}
   1017a:	b082      	sub	sp, #8
   1017c:	af00      	add	r7, sp, #0
   1017e:	0002      	movs	r2, r0
   10180:	6039      	str	r1, [r7, #0]
   10182:	1dfb      	adds	r3, r7, #7
   10184:	701a      	strb	r2, [r3, #0]
    switch( region )
   10186:	1dfb      	adds	r3, r7, #7
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	2b05      	cmp	r3, #5
   1018c:	d105      	bne.n	1019a <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
   1018e:	683b      	ldr	r3, [r7, #0]
   10190:	0018      	movs	r0, r3
   10192:	4b04      	ldr	r3, [pc, #16]	; (101a4 <RegionNewChannelReq+0x2c>)
   10194:	4798      	blx	r3
   10196:	0003      	movs	r3, r0
   10198:	e000      	b.n	1019c <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
   1019a:	2300      	movs	r3, #0
        }
    }
}
   1019c:	0018      	movs	r0, r3
   1019e:	46bd      	mov	sp, r7
   101a0:	b002      	add	sp, #8
   101a2:	bd80      	pop	{r7, pc}
   101a4:	000120dd 	.word	0x000120dd

000101a8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
   101a8:	b580      	push	{r7, lr}
   101aa:	b082      	sub	sp, #8
   101ac:	af00      	add	r7, sp, #0
   101ae:	0002      	movs	r2, r0
   101b0:	6039      	str	r1, [r7, #0]
   101b2:	1dfb      	adds	r3, r7, #7
   101b4:	701a      	strb	r2, [r3, #0]
    switch( region )
   101b6:	1dfb      	adds	r3, r7, #7
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	2b05      	cmp	r3, #5
   101bc:	d105      	bne.n	101ca <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
   101be:	683b      	ldr	r3, [r7, #0]
   101c0:	0018      	movs	r0, r3
   101c2:	4b04      	ldr	r3, [pc, #16]	; (101d4 <RegionTxParamSetupReq+0x2c>)
   101c4:	4798      	blx	r3
   101c6:	0003      	movs	r3, r0
   101c8:	e000      	b.n	101cc <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
   101ca:	2300      	movs	r3, #0
        }
    }
}
   101cc:	0018      	movs	r0, r3
   101ce:	46bd      	mov	sp, r7
   101d0:	b002      	add	sp, #8
   101d2:	bd80      	pop	{r7, pc}
   101d4:	000121c9 	.word	0x000121c9

000101d8 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
   101d8:	b580      	push	{r7, lr}
   101da:	b082      	sub	sp, #8
   101dc:	af00      	add	r7, sp, #0
   101de:	0002      	movs	r2, r0
   101e0:	6039      	str	r1, [r7, #0]
   101e2:	1dfb      	adds	r3, r7, #7
   101e4:	701a      	strb	r2, [r3, #0]
    switch( region )
   101e6:	1dfb      	adds	r3, r7, #7
   101e8:	781b      	ldrb	r3, [r3, #0]
   101ea:	2b05      	cmp	r3, #5
   101ec:	d105      	bne.n	101fa <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
   101ee:	683b      	ldr	r3, [r7, #0]
   101f0:	0018      	movs	r0, r3
   101f2:	4b04      	ldr	r3, [pc, #16]	; (10204 <RegionDlChannelReq+0x2c>)
   101f4:	4798      	blx	r3
   101f6:	0003      	movs	r3, r0
   101f8:	e000      	b.n	101fc <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
   101fa:	2300      	movs	r3, #0
        }
    }
}
   101fc:	0018      	movs	r0, r3
   101fe:	46bd      	mov	sp, r7
   10200:	b002      	add	sp, #8
   10202:	bd80      	pop	{r7, pc}
   10204:	000121dd 	.word	0x000121dd

00010208 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr )
{
   10208:	b580      	push	{r7, lr}
   1020a:	b082      	sub	sp, #8
   1020c:	af00      	add	r7, sp, #0
   1020e:	0002      	movs	r2, r0
   10210:	1dfb      	adds	r3, r7, #7
   10212:	701a      	strb	r2, [r3, #0]
   10214:	1dbb      	adds	r3, r7, #6
   10216:	1c0a      	adds	r2, r1, #0
   10218:	701a      	strb	r2, [r3, #0]
    switch( region )
   1021a:	1dfb      	adds	r3, r7, #7
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	2b05      	cmp	r3, #5
   10220:	d107      	bne.n	10232 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
   10222:	1dbb      	adds	r3, r7, #6
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	b25b      	sxtb	r3, r3
   10228:	0018      	movs	r0, r3
   1022a:	4b04      	ldr	r3, [pc, #16]	; (1023c <RegionAlternateDr+0x34>)
   1022c:	4798      	blx	r3
   1022e:	0003      	movs	r3, r0
   10230:	e000      	b.n	10234 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
   10232:	2300      	movs	r3, #0
        }
    }
}
   10234:	0018      	movs	r0, r3
   10236:	46bd      	mov	sp, r7
   10238:	b002      	add	sp, #8
   1023a:	bd80      	pop	{r7, pc}
   1023c:	00012285 	.word	0x00012285

00010240 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
   10240:	b580      	push	{r7, lr}
   10242:	b082      	sub	sp, #8
   10244:	af00      	add	r7, sp, #0
   10246:	0002      	movs	r2, r0
   10248:	6039      	str	r1, [r7, #0]
   1024a:	1dfb      	adds	r3, r7, #7
   1024c:	701a      	strb	r2, [r3, #0]
    switch( region )
   1024e:	1dfb      	adds	r3, r7, #7
   10250:	781b      	ldrb	r3, [r3, #0]
   10252:	2b05      	cmp	r3, #5
   10254:	d000      	beq.n	10258 <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
   10256:	e004      	b.n	10262 <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
   10258:	683b      	ldr	r3, [r7, #0]
   1025a:	0018      	movs	r0, r3
   1025c:	4b03      	ldr	r3, [pc, #12]	; (1026c <RegionCalcBackOff+0x2c>)
   1025e:	4798      	blx	r3
   10260:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   10262:	46c0      	nop			; (mov r8, r8)
   10264:	46bd      	mov	sp, r7
   10266:	b002      	add	sp, #8
   10268:	bd80      	pop	{r7, pc}
   1026a:	46c0      	nop			; (mov r8, r8)
   1026c:	000122a1 	.word	0x000122a1

00010270 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   10270:	b590      	push	{r4, r7, lr}
   10272:	b085      	sub	sp, #20
   10274:	af00      	add	r7, sp, #0
   10276:	60b9      	str	r1, [r7, #8]
   10278:	607a      	str	r2, [r7, #4]
   1027a:	603b      	str	r3, [r7, #0]
   1027c:	230f      	movs	r3, #15
   1027e:	18fb      	adds	r3, r7, r3
   10280:	1c02      	adds	r2, r0, #0
   10282:	701a      	strb	r2, [r3, #0]
    switch( region )
   10284:	230f      	movs	r3, #15
   10286:	18fb      	adds	r3, r7, r3
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	2b05      	cmp	r3, #5
   1028c:	d107      	bne.n	1029e <RegionNextChannel+0x2e>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
   1028e:	6a3b      	ldr	r3, [r7, #32]
   10290:	683a      	ldr	r2, [r7, #0]
   10292:	6879      	ldr	r1, [r7, #4]
   10294:	68b8      	ldr	r0, [r7, #8]
   10296:	4c04      	ldr	r4, [pc, #16]	; (102a8 <RegionNextChannel+0x38>)
   10298:	47a0      	blx	r4
   1029a:	0003      	movs	r3, r0
   1029c:	e000      	b.n	102a0 <RegionNextChannel+0x30>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
   1029e:	2309      	movs	r3, #9
        }
    }
}
   102a0:	0018      	movs	r0, r3
   102a2:	46bd      	mov	sp, r7
   102a4:	b005      	add	sp, #20
   102a6:	bd90      	pop	{r4, r7, pc}
   102a8:	00012319 	.word	0x00012319

000102ac <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
   102ac:	b580      	push	{r7, lr}
   102ae:	b082      	sub	sp, #8
   102b0:	af00      	add	r7, sp, #0
   102b2:	0002      	movs	r2, r0
   102b4:	6039      	str	r1, [r7, #0]
   102b6:	1dfb      	adds	r3, r7, #7
   102b8:	701a      	strb	r2, [r3, #0]
    switch( region )
   102ba:	1dfb      	adds	r3, r7, #7
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	2b05      	cmp	r3, #5
   102c0:	d000      	beq.n	102c4 <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
   102c2:	e004      	b.n	102ce <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
   102c4:	683b      	ldr	r3, [r7, #0]
   102c6:	0018      	movs	r0, r3
   102c8:	4b03      	ldr	r3, [pc, #12]	; (102d8 <RegionSetContinuousWave+0x2c>)
   102ca:	4798      	blx	r3
   102cc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	46bd      	mov	sp, r7
   102d2:	b002      	add	sp, #8
   102d4:	bd80      	pop	{r7, pc}
   102d6:	46c0      	nop			; (mov r8, r8)
   102d8:	000126e1 	.word	0x000126e1

000102dc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
   102dc:	b5b0      	push	{r4, r5, r7, lr}
   102de:	b082      	sub	sp, #8
   102e0:	af00      	add	r7, sp, #0
   102e2:	0005      	movs	r5, r0
   102e4:	000c      	movs	r4, r1
   102e6:	0010      	movs	r0, r2
   102e8:	0019      	movs	r1, r3
   102ea:	1dfb      	adds	r3, r7, #7
   102ec:	1c2a      	adds	r2, r5, #0
   102ee:	701a      	strb	r2, [r3, #0]
   102f0:	1dbb      	adds	r3, r7, #6
   102f2:	1c22      	adds	r2, r4, #0
   102f4:	701a      	strb	r2, [r3, #0]
   102f6:	1d7b      	adds	r3, r7, #5
   102f8:	1c02      	adds	r2, r0, #0
   102fa:	701a      	strb	r2, [r3, #0]
   102fc:	1d3b      	adds	r3, r7, #4
   102fe:	1c0a      	adds	r2, r1, #0
   10300:	701a      	strb	r2, [r3, #0]
    switch( region )
   10302:	1dfb      	adds	r3, r7, #7
   10304:	781b      	ldrb	r3, [r3, #0]
   10306:	2b05      	cmp	r3, #5
   10308:	d10c      	bne.n	10324 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
   1030a:	1d3b      	adds	r3, r7, #4
   1030c:	2200      	movs	r2, #0
   1030e:	569a      	ldrsb	r2, [r3, r2]
   10310:	1d7b      	adds	r3, r7, #5
   10312:	2100      	movs	r1, #0
   10314:	5659      	ldrsb	r1, [r3, r1]
   10316:	1dbb      	adds	r3, r7, #6
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	0018      	movs	r0, r3
   1031c:	4b04      	ldr	r3, [pc, #16]	; (10330 <RegionApplyDrOffset+0x54>)
   1031e:	4798      	blx	r3
   10320:	0003      	movs	r3, r0
   10322:	e001      	b.n	10328 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
   10324:	1d7b      	adds	r3, r7, #5
   10326:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
   10328:	0018      	movs	r0, r3
   1032a:	46bd      	mov	sp, r7
   1032c:	b002      	add	sp, #8
   1032e:	bdb0      	pop	{r4, r5, r7, pc}
   10330:	00012795 	.word	0x00012795

00010334 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
   10334:	b580      	push	{r7, lr}
   10336:	b084      	sub	sp, #16
   10338:	af00      	add	r7, sp, #0
   1033a:	0002      	movs	r2, r0
   1033c:	1dbb      	adds	r3, r7, #6
   1033e:	801a      	strh	r2, [r3, #0]
   10340:	1d7b      	adds	r3, r7, #5
   10342:	1c0a      	adds	r2, r1, #0
   10344:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
   10346:	230f      	movs	r3, #15
   10348:	18fb      	adds	r3, r7, r3
   1034a:	2200      	movs	r2, #0
   1034c:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
   1034e:	230e      	movs	r3, #14
   10350:	18fb      	adds	r3, r7, r3
   10352:	2200      	movs	r2, #0
   10354:	701a      	strb	r2, [r3, #0]
   10356:	e01e      	b.n	10396 <CountChannels+0x62>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   10358:	1dbb      	adds	r3, r7, #6
   1035a:	881b      	ldrh	r3, [r3, #0]
   1035c:	220e      	movs	r2, #14
   1035e:	18ba      	adds	r2, r7, r2
   10360:	7812      	ldrb	r2, [r2, #0]
   10362:	2101      	movs	r1, #1
   10364:	4091      	lsls	r1, r2
   10366:	000a      	movs	r2, r1
   10368:	401a      	ands	r2, r3
   1036a:	230e      	movs	r3, #14
   1036c:	18fb      	adds	r3, r7, r3
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	2101      	movs	r1, #1
   10372:	4099      	lsls	r1, r3
   10374:	000b      	movs	r3, r1
   10376:	429a      	cmp	r2, r3
   10378:	d106      	bne.n	10388 <CountChannels+0x54>
        {
            nbActiveBits++;
   1037a:	230f      	movs	r3, #15
   1037c:	18fb      	adds	r3, r7, r3
   1037e:	781a      	ldrb	r2, [r3, #0]
   10380:	230f      	movs	r3, #15
   10382:	18fb      	adds	r3, r7, r3
   10384:	3201      	adds	r2, #1
   10386:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
   10388:	230e      	movs	r3, #14
   1038a:	18fb      	adds	r3, r7, r3
   1038c:	781a      	ldrb	r2, [r3, #0]
   1038e:	230e      	movs	r3, #14
   10390:	18fb      	adds	r3, r7, r3
   10392:	3201      	adds	r2, #1
   10394:	701a      	strb	r2, [r3, #0]
   10396:	230e      	movs	r3, #14
   10398:	18fa      	adds	r2, r7, r3
   1039a:	1d7b      	adds	r3, r7, #5
   1039c:	7812      	ldrb	r2, [r2, #0]
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	429a      	cmp	r2, r3
   103a2:	d3d9      	bcc.n	10358 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
   103a4:	230f      	movs	r3, #15
   103a6:	18fb      	adds	r3, r7, r3
   103a8:	781b      	ldrb	r3, [r3, #0]
}
   103aa:	0018      	movs	r0, r3
   103ac:	46bd      	mov	sp, r7
   103ae:	b004      	add	sp, #16
   103b0:	bd80      	pop	{r7, pc}
	...

000103b4 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
   103b4:	b580      	push	{r7, lr}
   103b6:	b084      	sub	sp, #16
   103b8:	af00      	add	r7, sp, #0
   103ba:	003b      	movs	r3, r7
   103bc:	6018      	str	r0, [r3, #0]
   103be:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
   103c0:	230e      	movs	r3, #14
   103c2:	18fb      	adds	r3, r7, r3
   103c4:	2200      	movs	r2, #0
   103c6:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
   103c8:	003b      	movs	r3, r7
   103ca:	681b      	ldr	r3, [r3, #0]
   103cc:	4a0e      	ldr	r2, [pc, #56]	; (10408 <RegionCommonGetJoinDc+0x54>)
   103ce:	4293      	cmp	r3, r2
   103d0:	d804      	bhi.n	103dc <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
   103d2:	230e      	movs	r3, #14
   103d4:	18fb      	adds	r3, r7, r3
   103d6:	2264      	movs	r2, #100	; 0x64
   103d8:	801a      	strh	r2, [r3, #0]
   103da:	e00e      	b.n	103fa <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
   103dc:	003b      	movs	r3, r7
   103de:	681b      	ldr	r3, [r3, #0]
   103e0:	4a0a      	ldr	r2, [pc, #40]	; (1040c <RegionCommonGetJoinDc+0x58>)
   103e2:	4293      	cmp	r3, r2
   103e4:	d805      	bhi.n	103f2 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
   103e6:	230e      	movs	r3, #14
   103e8:	18fb      	adds	r3, r7, r3
   103ea:	22fa      	movs	r2, #250	; 0xfa
   103ec:	0092      	lsls	r2, r2, #2
   103ee:	801a      	strh	r2, [r3, #0]
   103f0:	e003      	b.n	103fa <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
   103f2:	230e      	movs	r3, #14
   103f4:	18fb      	adds	r3, r7, r3
   103f6:	4a06      	ldr	r2, [pc, #24]	; (10410 <RegionCommonGetJoinDc+0x5c>)
   103f8:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
   103fa:	230e      	movs	r3, #14
   103fc:	18fb      	adds	r3, r7, r3
   103fe:	881b      	ldrh	r3, [r3, #0]
}
   10400:	0018      	movs	r0, r3
   10402:	46bd      	mov	sp, r7
   10404:	b004      	add	sp, #16
   10406:	bd80      	pop	{r7, pc}
   10408:	00000e0f 	.word	0x00000e0f
   1040c:	00009aaf 	.word	0x00009aaf
   10410:	00002710 	.word	0x00002710

00010414 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
   10414:	b590      	push	{r4, r7, lr}
   10416:	b085      	sub	sp, #20
   10418:	af00      	add	r7, sp, #0
   1041a:	0004      	movs	r4, r0
   1041c:	6039      	str	r1, [r7, #0]
   1041e:	0010      	movs	r0, r2
   10420:	0019      	movs	r1, r3
   10422:	1dfb      	adds	r3, r7, #7
   10424:	1c22      	adds	r2, r4, #0
   10426:	701a      	strb	r2, [r3, #0]
   10428:	1dbb      	adds	r3, r7, #6
   1042a:	1c02      	adds	r2, r0, #0
   1042c:	701a      	strb	r2, [r3, #0]
   1042e:	1d7b      	adds	r3, r7, #5
   10430:	1c0a      	adds	r2, r1, #0
   10432:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
   10434:	2320      	movs	r3, #32
   10436:	18fb      	adds	r3, r7, r3
   10438:	2200      	movs	r2, #0
   1043a:	569a      	ldrsb	r2, [r3, r2]
   1043c:	1d7b      	adds	r3, r7, #5
   1043e:	2100      	movs	r1, #0
   10440:	5659      	ldrsb	r1, [r3, r1]
   10442:	1dbb      	adds	r3, r7, #6
   10444:	781b      	ldrb	r3, [r3, #0]
   10446:	b25b      	sxtb	r3, r3
   10448:	0018      	movs	r0, r3
   1044a:	4b42      	ldr	r3, [pc, #264]	; (10554 <RegionCommonChanVerifyDr+0x140>)
   1044c:	4798      	blx	r3
   1044e:	1e03      	subs	r3, r0, #0
   10450:	d101      	bne.n	10456 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
   10452:	2300      	movs	r3, #0
   10454:	e079      	b.n	1054a <RegionCommonChanVerifyDr+0x136>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
   10456:	230f      	movs	r3, #15
   10458:	18fb      	adds	r3, r7, r3
   1045a:	2200      	movs	r2, #0
   1045c:	701a      	strb	r2, [r3, #0]
   1045e:	230e      	movs	r3, #14
   10460:	18fb      	adds	r3, r7, r3
   10462:	2200      	movs	r2, #0
   10464:	701a      	strb	r2, [r3, #0]
   10466:	e068      	b.n	1053a <RegionCommonChanVerifyDr+0x126>
    {
        for( uint8_t j = 0; j < 16; j++ )
   10468:	230d      	movs	r3, #13
   1046a:	18fb      	adds	r3, r7, r3
   1046c:	2200      	movs	r2, #0
   1046e:	701a      	strb	r2, [r3, #0]
   10470:	e050      	b.n	10514 <RegionCommonChanVerifyDr+0x100>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
   10472:	230e      	movs	r3, #14
   10474:	18fb      	adds	r3, r7, r3
   10476:	781b      	ldrb	r3, [r3, #0]
   10478:	005b      	lsls	r3, r3, #1
   1047a:	683a      	ldr	r2, [r7, #0]
   1047c:	18d3      	adds	r3, r2, r3
   1047e:	881b      	ldrh	r3, [r3, #0]
   10480:	001a      	movs	r2, r3
   10482:	230d      	movs	r3, #13
   10484:	18fb      	adds	r3, r7, r3
   10486:	781b      	ldrb	r3, [r3, #0]
   10488:	411a      	asrs	r2, r3
   1048a:	0013      	movs	r3, r2
   1048c:	2201      	movs	r2, #1
   1048e:	4013      	ands	r3, r2
   10490:	d039      	beq.n	10506 <RegionCommonChanVerifyDr+0xf2>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
   10492:	230f      	movs	r3, #15
   10494:	18fb      	adds	r3, r7, r3
   10496:	781a      	ldrb	r2, [r3, #0]
   10498:	230d      	movs	r3, #13
   1049a:	18fb      	adds	r3, r7, r3
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	18d3      	adds	r3, r2, r3
   104a0:	001a      	movs	r2, r3
   104a2:	0013      	movs	r3, r2
   104a4:	005b      	lsls	r3, r3, #1
   104a6:	189b      	adds	r3, r3, r2
   104a8:	009b      	lsls	r3, r3, #2
   104aa:	001a      	movs	r2, r3
   104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104ae:	189b      	adds	r3, r3, r2
   104b0:	7a1b      	ldrb	r3, [r3, #8]
   104b2:	011b      	lsls	r3, r3, #4
   104b4:	b25b      	sxtb	r3, r3
   104b6:	111b      	asrs	r3, r3, #4
   104b8:	b25b      	sxtb	r3, r3
   104ba:	001a      	movs	r2, r3
   104bc:	230f      	movs	r3, #15
   104be:	4013      	ands	r3, r2
   104c0:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
   104c2:	230f      	movs	r3, #15
   104c4:	18fb      	adds	r3, r7, r3
   104c6:	781a      	ldrb	r2, [r3, #0]
   104c8:	230d      	movs	r3, #13
   104ca:	18fb      	adds	r3, r7, r3
   104cc:	781b      	ldrb	r3, [r3, #0]
   104ce:	18d3      	adds	r3, r2, r3
   104d0:	001a      	movs	r2, r3
   104d2:	0013      	movs	r3, r2
   104d4:	005b      	lsls	r3, r3, #1
   104d6:	189b      	adds	r3, r3, r2
   104d8:	009b      	lsls	r3, r3, #2
   104da:	001a      	movs	r2, r3
   104dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104de:	189b      	adds	r3, r3, r2
   104e0:	7a1b      	ldrb	r3, [r3, #8]
   104e2:	b25b      	sxtb	r3, r3
   104e4:	111b      	asrs	r3, r3, #4
   104e6:	b25b      	sxtb	r3, r3
   104e8:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
   104ea:	230f      	movs	r3, #15
   104ec:	4013      	ands	r3, r2
   104ee:	b25a      	sxtb	r2, r3
   104f0:	1dbb      	adds	r3, r7, #6
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	b25b      	sxtb	r3, r3
   104f6:	0018      	movs	r0, r3
   104f8:	4b16      	ldr	r3, [pc, #88]	; (10554 <RegionCommonChanVerifyDr+0x140>)
   104fa:	4798      	blx	r3
   104fc:	0003      	movs	r3, r0
   104fe:	2b01      	cmp	r3, #1
   10500:	d101      	bne.n	10506 <RegionCommonChanVerifyDr+0xf2>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
   10502:	2301      	movs	r3, #1
   10504:	e021      	b.n	1054a <RegionCommonChanVerifyDr+0x136>
        for( uint8_t j = 0; j < 16; j++ )
   10506:	230d      	movs	r3, #13
   10508:	18fb      	adds	r3, r7, r3
   1050a:	781a      	ldrb	r2, [r3, #0]
   1050c:	230d      	movs	r3, #13
   1050e:	18fb      	adds	r3, r7, r3
   10510:	3201      	adds	r2, #1
   10512:	701a      	strb	r2, [r3, #0]
   10514:	230d      	movs	r3, #13
   10516:	18fb      	adds	r3, r7, r3
   10518:	781b      	ldrb	r3, [r3, #0]
   1051a:	2b0f      	cmp	r3, #15
   1051c:	d9a9      	bls.n	10472 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
   1051e:	230f      	movs	r3, #15
   10520:	18fb      	adds	r3, r7, r3
   10522:	220f      	movs	r2, #15
   10524:	18ba      	adds	r2, r7, r2
   10526:	7812      	ldrb	r2, [r2, #0]
   10528:	3210      	adds	r2, #16
   1052a:	701a      	strb	r2, [r3, #0]
   1052c:	230e      	movs	r3, #14
   1052e:	18fb      	adds	r3, r7, r3
   10530:	781a      	ldrb	r2, [r3, #0]
   10532:	230e      	movs	r3, #14
   10534:	18fb      	adds	r3, r7, r3
   10536:	3201      	adds	r2, #1
   10538:	701a      	strb	r2, [r3, #0]
   1053a:	230f      	movs	r3, #15
   1053c:	18fa      	adds	r2, r7, r3
   1053e:	1dfb      	adds	r3, r7, #7
   10540:	7812      	ldrb	r2, [r2, #0]
   10542:	781b      	ldrb	r3, [r3, #0]
   10544:	429a      	cmp	r2, r3
   10546:	d38f      	bcc.n	10468 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
   10548:	2300      	movs	r3, #0
}
   1054a:	0018      	movs	r0, r3
   1054c:	46bd      	mov	sp, r7
   1054e:	b005      	add	sp, #20
   10550:	bd90      	pop	{r4, r7, pc}
   10552:	46c0      	nop			; (mov r8, r8)
   10554:	00010559 	.word	0x00010559

00010558 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
   10558:	b590      	push	{r4, r7, lr}
   1055a:	b083      	sub	sp, #12
   1055c:	af00      	add	r7, sp, #0
   1055e:	0004      	movs	r4, r0
   10560:	0008      	movs	r0, r1
   10562:	0011      	movs	r1, r2
   10564:	1dfb      	adds	r3, r7, #7
   10566:	1c22      	adds	r2, r4, #0
   10568:	701a      	strb	r2, [r3, #0]
   1056a:	1dbb      	adds	r3, r7, #6
   1056c:	1c02      	adds	r2, r0, #0
   1056e:	701a      	strb	r2, [r3, #0]
   10570:	1d7b      	adds	r3, r7, #5
   10572:	1c0a      	adds	r2, r1, #0
   10574:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
   10576:	1dfa      	adds	r2, r7, #7
   10578:	1dbb      	adds	r3, r7, #6
   1057a:	7812      	ldrb	r2, [r2, #0]
   1057c:	b252      	sxtb	r2, r2
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	b25b      	sxtb	r3, r3
   10582:	429a      	cmp	r2, r3
   10584:	db09      	blt.n	1059a <RegionCommonValueInRange+0x42>
   10586:	1dfa      	adds	r2, r7, #7
   10588:	1d7b      	adds	r3, r7, #5
   1058a:	7812      	ldrb	r2, [r2, #0]
   1058c:	b252      	sxtb	r2, r2
   1058e:	781b      	ldrb	r3, [r3, #0]
   10590:	b25b      	sxtb	r3, r3
   10592:	429a      	cmp	r2, r3
   10594:	dc01      	bgt.n	1059a <RegionCommonValueInRange+0x42>
    {
        return 1;
   10596:	2301      	movs	r3, #1
   10598:	e000      	b.n	1059c <RegionCommonValueInRange+0x44>
    }
    return 0;
   1059a:	2300      	movs	r3, #0
}
   1059c:	0018      	movs	r0, r3
   1059e:	46bd      	mov	sp, r7
   105a0:	b003      	add	sp, #12
   105a2:	bd90      	pop	{r4, r7, pc}

000105a4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
   105a4:	b580      	push	{r7, lr}
   105a6:	b084      	sub	sp, #16
   105a8:	af00      	add	r7, sp, #0
   105aa:	6078      	str	r0, [r7, #4]
   105ac:	0008      	movs	r0, r1
   105ae:	0011      	movs	r1, r2
   105b0:	1cfb      	adds	r3, r7, #3
   105b2:	1c02      	adds	r2, r0, #0
   105b4:	701a      	strb	r2, [r3, #0]
   105b6:	1cbb      	adds	r3, r7, #2
   105b8:	1c0a      	adds	r2, r1, #0
   105ba:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
   105bc:	230f      	movs	r3, #15
   105be:	18fb      	adds	r3, r7, r3
   105c0:	1cfa      	adds	r2, r7, #3
   105c2:	7812      	ldrb	r2, [r2, #0]
   105c4:	0912      	lsrs	r2, r2, #4
   105c6:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   105c8:	1cbb      	adds	r3, r7, #2
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	091b      	lsrs	r3, r3, #4
   105ce:	b2db      	uxtb	r3, r3
   105d0:	220f      	movs	r2, #15
   105d2:	18ba      	adds	r2, r7, r2
   105d4:	7812      	ldrb	r2, [r2, #0]
   105d6:	429a      	cmp	r2, r3
   105d8:	d805      	bhi.n	105e6 <RegionCommonChanDisable+0x42>
   105da:	1cfa      	adds	r2, r7, #3
   105dc:	1cbb      	adds	r3, r7, #2
   105de:	7812      	ldrb	r2, [r2, #0]
   105e0:	781b      	ldrb	r3, [r3, #0]
   105e2:	429a      	cmp	r2, r3
   105e4:	d301      	bcc.n	105ea <RegionCommonChanDisable+0x46>
    {
        return false;
   105e6:	2300      	movs	r3, #0
   105e8:	e01c      	b.n	10624 <RegionCommonChanDisable+0x80>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
   105ea:	230f      	movs	r3, #15
   105ec:	18fb      	adds	r3, r7, r3
   105ee:	781b      	ldrb	r3, [r3, #0]
   105f0:	005b      	lsls	r3, r3, #1
   105f2:	687a      	ldr	r2, [r7, #4]
   105f4:	18d3      	adds	r3, r2, r3
   105f6:	220f      	movs	r2, #15
   105f8:	18ba      	adds	r2, r7, r2
   105fa:	7812      	ldrb	r2, [r2, #0]
   105fc:	0052      	lsls	r2, r2, #1
   105fe:	6879      	ldr	r1, [r7, #4]
   10600:	188a      	adds	r2, r1, r2
   10602:	8812      	ldrh	r2, [r2, #0]
   10604:	b212      	sxth	r2, r2
   10606:	1cf9      	adds	r1, r7, #3
   10608:	7809      	ldrb	r1, [r1, #0]
   1060a:	200f      	movs	r0, #15
   1060c:	4001      	ands	r1, r0
   1060e:	2001      	movs	r0, #1
   10610:	4088      	lsls	r0, r1
   10612:	0001      	movs	r1, r0
   10614:	b209      	sxth	r1, r1
   10616:	43c9      	mvns	r1, r1
   10618:	b209      	sxth	r1, r1
   1061a:	400a      	ands	r2, r1
   1061c:	b212      	sxth	r2, r2
   1061e:	b292      	uxth	r2, r2
   10620:	801a      	strh	r2, [r3, #0]

    return true;
   10622:	2301      	movs	r3, #1
}
   10624:	0018      	movs	r0, r3
   10626:	46bd      	mov	sp, r7
   10628:	b004      	add	sp, #16
   1062a:	bd80      	pop	{r7, pc}

0001062c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
   1062c:	b580      	push	{r7, lr}
   1062e:	b084      	sub	sp, #16
   10630:	af00      	add	r7, sp, #0
   10632:	6078      	str	r0, [r7, #4]
   10634:	0008      	movs	r0, r1
   10636:	0011      	movs	r1, r2
   10638:	1cfb      	adds	r3, r7, #3
   1063a:	1c02      	adds	r2, r0, #0
   1063c:	701a      	strb	r2, [r3, #0]
   1063e:	1cbb      	adds	r3, r7, #2
   10640:	1c0a      	adds	r2, r1, #0
   10642:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
   10644:	230f      	movs	r3, #15
   10646:	18fb      	adds	r3, r7, r3
   10648:	2200      	movs	r2, #0
   1064a:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
   1064c:	687b      	ldr	r3, [r7, #4]
   1064e:	2b00      	cmp	r3, #0
   10650:	d101      	bne.n	10656 <RegionCommonCountChannels+0x2a>
    {
        return 0;
   10652:	2300      	movs	r3, #0
   10654:	e02a      	b.n	106ac <RegionCommonCountChannels+0x80>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
   10656:	230e      	movs	r3, #14
   10658:	18fb      	adds	r3, r7, r3
   1065a:	1cfa      	adds	r2, r7, #3
   1065c:	7812      	ldrb	r2, [r2, #0]
   1065e:	701a      	strb	r2, [r3, #0]
   10660:	e01a      	b.n	10698 <RegionCommonCountChannels+0x6c>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
   10662:	230e      	movs	r3, #14
   10664:	18fb      	adds	r3, r7, r3
   10666:	781b      	ldrb	r3, [r3, #0]
   10668:	005b      	lsls	r3, r3, #1
   1066a:	687a      	ldr	r2, [r7, #4]
   1066c:	18d3      	adds	r3, r2, r3
   1066e:	881b      	ldrh	r3, [r3, #0]
   10670:	2110      	movs	r1, #16
   10672:	0018      	movs	r0, r3
   10674:	4b0f      	ldr	r3, [pc, #60]	; (106b4 <RegionCommonCountChannels+0x88>)
   10676:	4798      	blx	r3
   10678:	0003      	movs	r3, r0
   1067a:	0019      	movs	r1, r3
   1067c:	230f      	movs	r3, #15
   1067e:	18fb      	adds	r3, r7, r3
   10680:	220f      	movs	r2, #15
   10682:	18ba      	adds	r2, r7, r2
   10684:	7812      	ldrb	r2, [r2, #0]
   10686:	188a      	adds	r2, r1, r2
   10688:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   1068a:	230e      	movs	r3, #14
   1068c:	18fb      	adds	r3, r7, r3
   1068e:	781a      	ldrb	r2, [r3, #0]
   10690:	230e      	movs	r3, #14
   10692:	18fb      	adds	r3, r7, r3
   10694:	3201      	adds	r2, #1
   10696:	701a      	strb	r2, [r3, #0]
   10698:	230e      	movs	r3, #14
   1069a:	18fa      	adds	r2, r7, r3
   1069c:	1cbb      	adds	r3, r7, #2
   1069e:	7812      	ldrb	r2, [r2, #0]
   106a0:	781b      	ldrb	r3, [r3, #0]
   106a2:	429a      	cmp	r2, r3
   106a4:	d3dd      	bcc.n	10662 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
   106a6:	230f      	movs	r3, #15
   106a8:	18fb      	adds	r3, r7, r3
   106aa:	781b      	ldrb	r3, [r3, #0]
}
   106ac:	0018      	movs	r0, r3
   106ae:	46bd      	mov	sp, r7
   106b0:	b004      	add	sp, #16
   106b2:	bd80      	pop	{r7, pc}
   106b4:	00010335 	.word	0x00010335

000106b8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
   106b8:	b580      	push	{r7, lr}
   106ba:	b086      	sub	sp, #24
   106bc:	af00      	add	r7, sp, #0
   106be:	60f8      	str	r0, [r7, #12]
   106c0:	60b9      	str	r1, [r7, #8]
   106c2:	1dfb      	adds	r3, r7, #7
   106c4:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
   106c6:	68fb      	ldr	r3, [r7, #12]
   106c8:	2b00      	cmp	r3, #0
   106ca:	d023      	beq.n	10714 <RegionCommonChanMaskCopy+0x5c>
   106cc:	68bb      	ldr	r3, [r7, #8]
   106ce:	2b00      	cmp	r3, #0
   106d0:	d020      	beq.n	10714 <RegionCommonChanMaskCopy+0x5c>
    {
        for( uint8_t i = 0; i < len; i++ )
   106d2:	2317      	movs	r3, #23
   106d4:	18fb      	adds	r3, r7, r3
   106d6:	2200      	movs	r2, #0
   106d8:	701a      	strb	r2, [r3, #0]
   106da:	e014      	b.n	10706 <RegionCommonChanMaskCopy+0x4e>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
   106dc:	2317      	movs	r3, #23
   106de:	18fb      	adds	r3, r7, r3
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	005b      	lsls	r3, r3, #1
   106e4:	68fa      	ldr	r2, [r7, #12]
   106e6:	18d3      	adds	r3, r2, r3
   106e8:	2217      	movs	r2, #23
   106ea:	18ba      	adds	r2, r7, r2
   106ec:	7812      	ldrb	r2, [r2, #0]
   106ee:	0052      	lsls	r2, r2, #1
   106f0:	68b9      	ldr	r1, [r7, #8]
   106f2:	188a      	adds	r2, r1, r2
   106f4:	8812      	ldrh	r2, [r2, #0]
   106f6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
   106f8:	2317      	movs	r3, #23
   106fa:	18fb      	adds	r3, r7, r3
   106fc:	781a      	ldrb	r2, [r3, #0]
   106fe:	2317      	movs	r3, #23
   10700:	18fb      	adds	r3, r7, r3
   10702:	3201      	adds	r2, #1
   10704:	701a      	strb	r2, [r3, #0]
   10706:	2317      	movs	r3, #23
   10708:	18fa      	adds	r2, r7, r3
   1070a:	1dfb      	adds	r3, r7, #7
   1070c:	7812      	ldrb	r2, [r2, #0]
   1070e:	781b      	ldrb	r3, [r3, #0]
   10710:	429a      	cmp	r2, r3
   10712:	d3e3      	bcc.n	106dc <RegionCommonChanMaskCopy+0x24>
        }
    }
}
   10714:	46c0      	nop			; (mov r8, r8)
   10716:	46bd      	mov	sp, r7
   10718:	b006      	add	sp, #24
   1071a:	bd80      	pop	{r7, pc}

0001071c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
   1071c:	b580      	push	{r7, lr}
   1071e:	b084      	sub	sp, #16
   10720:	af00      	add	r7, sp, #0
   10722:	60b9      	str	r1, [r7, #8]
   10724:	607a      	str	r2, [r7, #4]
   10726:	230f      	movs	r3, #15
   10728:	18fb      	adds	r3, r7, r3
   1072a:	1c02      	adds	r2, r0, #0
   1072c:	701a      	strb	r2, [r3, #0]
    if( joined == true )
   1072e:	230f      	movs	r3, #15
   10730:	18fb      	adds	r3, r7, r3
   10732:	781b      	ldrb	r3, [r3, #0]
   10734:	2b00      	cmp	r3, #0
   10736:	d003      	beq.n	10740 <RegionCommonSetBandTxDone+0x24>
    {
        band->LastTxDoneTime = lastTxDone;
   10738:	68bb      	ldr	r3, [r7, #8]
   1073a:	687a      	ldr	r2, [r7, #4]
   1073c:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
   1073e:	e005      	b.n	1074c <RegionCommonSetBandTxDone+0x30>
        band->LastTxDoneTime = lastTxDone;
   10740:	68bb      	ldr	r3, [r7, #8]
   10742:	687a      	ldr	r2, [r7, #4]
   10744:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
   10746:	68bb      	ldr	r3, [r7, #8]
   10748:	687a      	ldr	r2, [r7, #4]
   1074a:	605a      	str	r2, [r3, #4]
}
   1074c:	46c0      	nop			; (mov r8, r8)
   1074e:	46bd      	mov	sp, r7
   10750:	b004      	add	sp, #16
   10752:	bd80      	pop	{r7, pc}

00010754 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
   10754:	b590      	push	{r4, r7, lr}
   10756:	b087      	sub	sp, #28
   10758:	af00      	add	r7, sp, #0
   1075a:	0004      	movs	r4, r0
   1075c:	0008      	movs	r0, r1
   1075e:	603a      	str	r2, [r7, #0]
   10760:	0019      	movs	r1, r3
   10762:	1dfb      	adds	r3, r7, #7
   10764:	1c22      	adds	r2, r4, #0
   10766:	701a      	strb	r2, [r3, #0]
   10768:	1dbb      	adds	r3, r7, #6
   1076a:	1c02      	adds	r2, r0, #0
   1076c:	701a      	strb	r2, [r3, #0]
   1076e:	1d7b      	adds	r3, r7, #5
   10770:	1c0a      	adds	r2, r1, #0
   10772:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
   10774:	2301      	movs	r3, #1
   10776:	425b      	negs	r3, r3
   10778:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
   1077a:	2313      	movs	r3, #19
   1077c:	18fb      	adds	r3, r7, r3
   1077e:	2200      	movs	r2, #0
   10780:	701a      	strb	r2, [r3, #0]
   10782:	e0d3      	b.n	1092c <RegionCommonUpdateBandTimeOff+0x1d8>
    {
        if( joined == false )
   10784:	1dfb      	adds	r3, r7, #7
   10786:	781b      	ldrb	r3, [r3, #0]
   10788:	2201      	movs	r2, #1
   1078a:	4053      	eors	r3, r2
   1078c:	b2db      	uxtb	r3, r3
   1078e:	2b00      	cmp	r3, #0
   10790:	d065      	beq.n	1085e <RegionCommonUpdateBandTimeOff+0x10a>
        {
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
   10792:	2313      	movs	r3, #19
   10794:	18fb      	adds	r3, r7, r3
   10796:	781b      	ldrb	r3, [r3, #0]
   10798:	011b      	lsls	r3, r3, #4
   1079a:	683a      	ldr	r2, [r7, #0]
   1079c:	18d3      	adds	r3, r2, r3
   1079e:	685b      	ldr	r3, [r3, #4]
   107a0:	0018      	movs	r0, r3
   107a2:	4b69      	ldr	r3, [pc, #420]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   107a4:	4798      	blx	r3
   107a6:	0004      	movs	r4, r0
   107a8:	1dbb      	adds	r3, r7, #6
   107aa:	781b      	ldrb	r3, [r3, #0]
   107ac:	2b00      	cmp	r3, #0
   107ae:	d00b      	beq.n	107c8 <RegionCommonUpdateBandTimeOff+0x74>
   107b0:	2313      	movs	r3, #19
   107b2:	18fb      	adds	r3, r7, r3
   107b4:	781b      	ldrb	r3, [r3, #0]
   107b6:	011b      	lsls	r3, r3, #4
   107b8:	683a      	ldr	r2, [r7, #0]
   107ba:	18d3      	adds	r3, r2, r3
   107bc:	689b      	ldr	r3, [r3, #8]
   107be:	0018      	movs	r0, r3
   107c0:	4b61      	ldr	r3, [pc, #388]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   107c2:	4798      	blx	r3
   107c4:	0003      	movs	r3, r0
   107c6:	e000      	b.n	107ca <RegionCommonUpdateBandTimeOff+0x76>
   107c8:	2300      	movs	r3, #0
   107ca:	429c      	cmp	r4, r3
   107cc:	d90b      	bls.n	107e6 <RegionCommonUpdateBandTimeOff+0x92>
   107ce:	2313      	movs	r3, #19
   107d0:	18fb      	adds	r3, r7, r3
   107d2:	781b      	ldrb	r3, [r3, #0]
   107d4:	011b      	lsls	r3, r3, #4
   107d6:	683a      	ldr	r2, [r7, #0]
   107d8:	18d3      	adds	r3, r2, r3
   107da:	685b      	ldr	r3, [r3, #4]
   107dc:	0018      	movs	r0, r3
   107de:	4b5a      	ldr	r3, [pc, #360]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   107e0:	4798      	blx	r3
   107e2:	0003      	movs	r3, r0
   107e4:	e010      	b.n	10808 <RegionCommonUpdateBandTimeOff+0xb4>
   107e6:	1dbb      	adds	r3, r7, #6
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	2b00      	cmp	r3, #0
   107ec:	d00b      	beq.n	10806 <RegionCommonUpdateBandTimeOff+0xb2>
   107ee:	2313      	movs	r3, #19
   107f0:	18fb      	adds	r3, r7, r3
   107f2:	781b      	ldrb	r3, [r3, #0]
   107f4:	011b      	lsls	r3, r3, #4
   107f6:	683a      	ldr	r2, [r7, #0]
   107f8:	18d3      	adds	r3, r2, r3
   107fa:	689b      	ldr	r3, [r3, #8]
   107fc:	0018      	movs	r0, r3
   107fe:	4b52      	ldr	r3, [pc, #328]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   10800:	4798      	blx	r3
   10802:	0003      	movs	r3, r0
   10804:	e000      	b.n	10808 <RegionCommonUpdateBandTimeOff+0xb4>
   10806:	2300      	movs	r3, #0
   10808:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
   1080a:	2313      	movs	r3, #19
   1080c:	18fb      	adds	r3, r7, r3
   1080e:	781b      	ldrb	r3, [r3, #0]
   10810:	011b      	lsls	r3, r3, #4
   10812:	683a      	ldr	r2, [r7, #0]
   10814:	18d3      	adds	r3, r2, r3
   10816:	68da      	ldr	r2, [r3, #12]
   10818:	68fb      	ldr	r3, [r7, #12]
   1081a:	429a      	cmp	r2, r3
   1081c:	d807      	bhi.n	1082e <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
   1081e:	2313      	movs	r3, #19
   10820:	18fb      	adds	r3, r7, r3
   10822:	781b      	ldrb	r3, [r3, #0]
   10824:	011b      	lsls	r3, r3, #4
   10826:	683a      	ldr	r2, [r7, #0]
   10828:	18d3      	adds	r3, r2, r3
   1082a:	2200      	movs	r2, #0
   1082c:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
   1082e:	2313      	movs	r3, #19
   10830:	18fb      	adds	r3, r7, r3
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	011b      	lsls	r3, r3, #4
   10836:	683a      	ldr	r2, [r7, #0]
   10838:	18d3      	adds	r3, r2, r3
   1083a:	68db      	ldr	r3, [r3, #12]
   1083c:	2b00      	cmp	r3, #0
   1083e:	d06e      	beq.n	1091e <RegionCommonUpdateBandTimeOff+0x1ca>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
   10840:	2313      	movs	r3, #19
   10842:	18fb      	adds	r3, r7, r3
   10844:	781b      	ldrb	r3, [r3, #0]
   10846:	011b      	lsls	r3, r3, #4
   10848:	683a      	ldr	r2, [r7, #0]
   1084a:	18d3      	adds	r3, r2, r3
   1084c:	68da      	ldr	r2, [r3, #12]
   1084e:	68fb      	ldr	r3, [r7, #12]
   10850:	1ad3      	subs	r3, r2, r3
   10852:	697a      	ldr	r2, [r7, #20]
   10854:	4293      	cmp	r3, r2
   10856:	d900      	bls.n	1085a <RegionCommonUpdateBandTimeOff+0x106>
   10858:	0013      	movs	r3, r2
   1085a:	617b      	str	r3, [r7, #20]
   1085c:	e05f      	b.n	1091e <RegionCommonUpdateBandTimeOff+0x1ca>
            }
        }
        else
        {
            if( dutyCycle == true )
   1085e:	1dbb      	adds	r3, r7, #6
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	2b00      	cmp	r3, #0
   10864:	d051      	beq.n	1090a <RegionCommonUpdateBandTimeOff+0x1b6>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
   10866:	2313      	movs	r3, #19
   10868:	18fb      	adds	r3, r7, r3
   1086a:	781b      	ldrb	r3, [r3, #0]
   1086c:	011b      	lsls	r3, r3, #4
   1086e:	683a      	ldr	r2, [r7, #0]
   10870:	18d3      	adds	r3, r2, r3
   10872:	68dc      	ldr	r4, [r3, #12]
   10874:	2313      	movs	r3, #19
   10876:	18fb      	adds	r3, r7, r3
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	011b      	lsls	r3, r3, #4
   1087c:	683a      	ldr	r2, [r7, #0]
   1087e:	18d3      	adds	r3, r2, r3
   10880:	689b      	ldr	r3, [r3, #8]
   10882:	0018      	movs	r0, r3
   10884:	4b30      	ldr	r3, [pc, #192]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   10886:	4798      	blx	r3
   10888:	0003      	movs	r3, r0
   1088a:	429c      	cmp	r4, r3
   1088c:	d807      	bhi.n	1089e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    bands[i].TimeOff = 0;
   1088e:	2313      	movs	r3, #19
   10890:	18fb      	adds	r3, r7, r3
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	011b      	lsls	r3, r3, #4
   10896:	683a      	ldr	r2, [r7, #0]
   10898:	18d3      	adds	r3, r2, r3
   1089a:	2200      	movs	r2, #0
   1089c:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
   1089e:	2313      	movs	r3, #19
   108a0:	18fb      	adds	r3, r7, r3
   108a2:	781b      	ldrb	r3, [r3, #0]
   108a4:	011b      	lsls	r3, r3, #4
   108a6:	683a      	ldr	r2, [r7, #0]
   108a8:	18d3      	adds	r3, r2, r3
   108aa:	68db      	ldr	r3, [r3, #12]
   108ac:	2b00      	cmp	r3, #0
   108ae:	d036      	beq.n	1091e <RegionCommonUpdateBandTimeOff+0x1ca>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
   108b0:	2313      	movs	r3, #19
   108b2:	18fb      	adds	r3, r7, r3
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	011b      	lsls	r3, r3, #4
   108b8:	683a      	ldr	r2, [r7, #0]
   108ba:	18d3      	adds	r3, r2, r3
   108bc:	68dc      	ldr	r4, [r3, #12]
   108be:	2313      	movs	r3, #19
   108c0:	18fb      	adds	r3, r7, r3
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	011b      	lsls	r3, r3, #4
   108c6:	683a      	ldr	r2, [r7, #0]
   108c8:	18d3      	adds	r3, r2, r3
   108ca:	689b      	ldr	r3, [r3, #8]
   108cc:	0018      	movs	r0, r3
   108ce:	4b1e      	ldr	r3, [pc, #120]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   108d0:	4798      	blx	r3
   108d2:	0003      	movs	r3, r0
   108d4:	1ae2      	subs	r2, r4, r3
   108d6:	697b      	ldr	r3, [r7, #20]
   108d8:	429a      	cmp	r2, r3
   108da:	d213      	bcs.n	10904 <RegionCommonUpdateBandTimeOff+0x1b0>
   108dc:	2313      	movs	r3, #19
   108de:	18fb      	adds	r3, r7, r3
   108e0:	781b      	ldrb	r3, [r3, #0]
   108e2:	011b      	lsls	r3, r3, #4
   108e4:	683a      	ldr	r2, [r7, #0]
   108e6:	18d3      	adds	r3, r2, r3
   108e8:	68dc      	ldr	r4, [r3, #12]
   108ea:	2313      	movs	r3, #19
   108ec:	18fb      	adds	r3, r7, r3
   108ee:	781b      	ldrb	r3, [r3, #0]
   108f0:	011b      	lsls	r3, r3, #4
   108f2:	683a      	ldr	r2, [r7, #0]
   108f4:	18d3      	adds	r3, r2, r3
   108f6:	689b      	ldr	r3, [r3, #8]
   108f8:	0018      	movs	r0, r3
   108fa:	4b13      	ldr	r3, [pc, #76]	; (10948 <RegionCommonUpdateBandTimeOff+0x1f4>)
   108fc:	4798      	blx	r3
   108fe:	0003      	movs	r3, r0
   10900:	1ae3      	subs	r3, r4, r3
   10902:	e000      	b.n	10906 <RegionCommonUpdateBandTimeOff+0x1b2>
   10904:	697b      	ldr	r3, [r7, #20]
   10906:	617b      	str	r3, [r7, #20]
   10908:	e009      	b.n	1091e <RegionCommonUpdateBandTimeOff+0x1ca>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
   1090a:	2300      	movs	r3, #0
   1090c:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
   1090e:	2313      	movs	r3, #19
   10910:	18fb      	adds	r3, r7, r3
   10912:	781b      	ldrb	r3, [r3, #0]
   10914:	011b      	lsls	r3, r3, #4
   10916:	683a      	ldr	r2, [r7, #0]
   10918:	18d3      	adds	r3, r2, r3
   1091a:	2200      	movs	r2, #0
   1091c:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
   1091e:	2313      	movs	r3, #19
   10920:	18fb      	adds	r3, r7, r3
   10922:	781a      	ldrb	r2, [r3, #0]
   10924:	2313      	movs	r3, #19
   10926:	18fb      	adds	r3, r7, r3
   10928:	3201      	adds	r2, #1
   1092a:	701a      	strb	r2, [r3, #0]
   1092c:	2313      	movs	r3, #19
   1092e:	18fa      	adds	r2, r7, r3
   10930:	1d7b      	adds	r3, r7, #5
   10932:	7812      	ldrb	r2, [r2, #0]
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	429a      	cmp	r2, r3
   10938:	d200      	bcs.n	1093c <RegionCommonUpdateBandTimeOff+0x1e8>
   1093a:	e723      	b.n	10784 <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
   1093c:	697b      	ldr	r3, [r7, #20]
}
   1093e:	0018      	movs	r0, r3
   10940:	46bd      	mov	sp, r7
   10942:	b007      	add	sp, #28
   10944:	bd90      	pop	{r4, r7, pc}
   10946:	46c0      	nop			; (mov r8, r8)
   10948:	00017199 	.word	0x00017199

0001094c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
   1094c:	b580      	push	{r7, lr}
   1094e:	b084      	sub	sp, #16
   10950:	af00      	add	r7, sp, #0
   10952:	6078      	str	r0, [r7, #4]
   10954:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
   10956:	230f      	movs	r3, #15
   10958:	18fb      	adds	r3, r7, r3
   1095a:	2200      	movs	r2, #0
   1095c:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
   1095e:	687b      	ldr	r3, [r7, #4]
   10960:	781b      	ldrb	r3, [r3, #0]
   10962:	2b03      	cmp	r3, #3
   10964:	d141      	bne.n	109ea <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
   10966:	687b      	ldr	r3, [r7, #4]
   10968:	3301      	adds	r3, #1
   1096a:	781b      	ldrb	r3, [r3, #0]
   1096c:	b25a      	sxtb	r2, r3
   1096e:	683b      	ldr	r3, [r7, #0]
   10970:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   10972:	683b      	ldr	r3, [r7, #0]
   10974:	785b      	ldrb	r3, [r3, #1]
   10976:	b25b      	sxtb	r3, r3
   10978:	220f      	movs	r2, #15
   1097a:	4013      	ands	r3, r2
   1097c:	b25a      	sxtb	r2, r3
   1097e:	683b      	ldr	r3, [r7, #0]
   10980:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   10982:	683b      	ldr	r3, [r7, #0]
   10984:	785b      	ldrb	r3, [r3, #1]
   10986:	b25b      	sxtb	r3, r3
   10988:	b2db      	uxtb	r3, r3
   1098a:	091b      	lsrs	r3, r3, #4
   1098c:	b2db      	uxtb	r3, r3
   1098e:	b25a      	sxtb	r2, r3
   10990:	683b      	ldr	r3, [r7, #0]
   10992:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
   10994:	687b      	ldr	r3, [r7, #4]
   10996:	3302      	adds	r3, #2
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	b29a      	uxth	r2, r3
   1099c:	683b      	ldr	r3, [r7, #0]
   1099e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
   109a0:	683b      	ldr	r3, [r7, #0]
   109a2:	889b      	ldrh	r3, [r3, #4]
   109a4:	b21a      	sxth	r2, r3
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	3303      	adds	r3, #3
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	021b      	lsls	r3, r3, #8
   109ae:	b21b      	sxth	r3, r3
   109b0:	4313      	orrs	r3, r2
   109b2:	b21b      	sxth	r3, r3
   109b4:	b29a      	uxth	r2, r3
   109b6:	683b      	ldr	r3, [r7, #0]
   109b8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
   109ba:	687b      	ldr	r3, [r7, #4]
   109bc:	791a      	ldrb	r2, [r3, #4]
   109be:	683b      	ldr	r3, [r7, #0]
   109c0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   109c2:	683b      	ldr	r3, [r7, #0]
   109c4:	781b      	ldrb	r3, [r3, #0]
   109c6:	091b      	lsrs	r3, r3, #4
   109c8:	b2db      	uxtb	r3, r3
   109ca:	2207      	movs	r2, #7
   109cc:	4013      	ands	r3, r2
   109ce:	b2da      	uxtb	r2, r3
   109d0:	683b      	ldr	r3, [r7, #0]
   109d2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
   109d4:	683b      	ldr	r3, [r7, #0]
   109d6:	781b      	ldrb	r3, [r3, #0]
   109d8:	220f      	movs	r2, #15
   109da:	4013      	ands	r3, r2
   109dc:	b2da      	uxtb	r2, r3
   109de:	683b      	ldr	r3, [r7, #0]
   109e0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
   109e2:	230f      	movs	r3, #15
   109e4:	18fb      	adds	r3, r7, r3
   109e6:	2205      	movs	r2, #5
   109e8:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
   109ea:	230f      	movs	r3, #15
   109ec:	18fb      	adds	r3, r7, r3
   109ee:	781b      	ldrb	r3, [r3, #0]
}
   109f0:	0018      	movs	r0, r3
   109f2:	46bd      	mov	sp, r7
   109f4:	b004      	add	sp, #16
   109f6:	bd80      	pop	{r7, pc}

000109f8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
   109f8:	b5b0      	push	{r4, r5, r7, lr}
   109fa:	b088      	sub	sp, #32
   109fc:	af02      	add	r7, sp, #8
   109fe:	60f8      	str	r0, [r7, #12]
   10a00:	60b9      	str	r1, [r7, #8]
   10a02:	607a      	str	r2, [r7, #4]
   10a04:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
   10a06:	2317      	movs	r3, #23
   10a08:	18fb      	adds	r3, r7, r3
   10a0a:	68fa      	ldr	r2, [r7, #12]
   10a0c:	7912      	ldrb	r2, [r2, #4]
   10a0e:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
   10a10:	2316      	movs	r3, #22
   10a12:	18fb      	adds	r3, r7, r3
   10a14:	68fa      	ldr	r2, [r7, #12]
   10a16:	7992      	ldrb	r2, [r2, #6]
   10a18:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
   10a1a:	2315      	movs	r3, #21
   10a1c:	18fb      	adds	r3, r7, r3
   10a1e:	68fa      	ldr	r2, [r7, #12]
   10a20:	79d2      	ldrb	r2, [r2, #7]
   10a22:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
   10a24:	68fb      	ldr	r3, [r7, #12]
   10a26:	7a1a      	ldrb	r2, [r3, #8]
   10a28:	2314      	movs	r3, #20
   10a2a:	18fb      	adds	r3, r7, r3
   10a2c:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
   10a2e:	68fb      	ldr	r3, [r7, #12]
   10a30:	795b      	ldrb	r3, [r3, #5]
   10a32:	2201      	movs	r2, #1
   10a34:	4053      	eors	r3, r2
   10a36:	b2db      	uxtb	r3, r3
   10a38:	2b00      	cmp	r3, #0
   10a3a:	d00e      	beq.n	10a5a <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is disable juts ignore all parameters except the channel mask
        datarate = verifyParams->CurrentDatarate;
   10a3c:	2316      	movs	r3, #22
   10a3e:	18fb      	adds	r3, r7, r3
   10a40:	68fa      	ldr	r2, [r7, #12]
   10a42:	7a52      	ldrb	r2, [r2, #9]
   10a44:	701a      	strb	r2, [r3, #0]
        txPower = verifyParams->CurrentTxPower;
   10a46:	2315      	movs	r3, #21
   10a48:	18fb      	adds	r3, r7, r3
   10a4a:	68fa      	ldr	r2, [r7, #12]
   10a4c:	7a92      	ldrb	r2, [r2, #10]
   10a4e:	701a      	strb	r2, [r3, #0]
        nbRepetitions = verifyParams->CurrentNbRep;
   10a50:	2314      	movs	r3, #20
   10a52:	18fb      	adds	r3, r7, r3
   10a54:	68fa      	ldr	r2, [r7, #12]
   10a56:	7ad2      	ldrb	r2, [r2, #11]
   10a58:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
   10a5a:	2317      	movs	r3, #23
   10a5c:	18fb      	adds	r3, r7, r3
   10a5e:	781b      	ldrb	r3, [r3, #0]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d100      	bne.n	10a66 <RegionCommonLinkAdrReqVerifyParams+0x6e>
   10a64:	e06b      	b.n	10b3e <RegionCommonLinkAdrReqVerifyParams+0x146>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( ( verifyParams->Version.Fields.Minor >= 1 ) && ( datarate == 0xF ) )
   10a66:	68fb      	ldr	r3, [r7, #12]
   10a68:	789b      	ldrb	r3, [r3, #2]
   10a6a:	2b00      	cmp	r3, #0
   10a6c:	d00b      	beq.n	10a86 <RegionCommonLinkAdrReqVerifyParams+0x8e>
   10a6e:	2316      	movs	r3, #22
   10a70:	18fb      	adds	r3, r7, r3
   10a72:	781b      	ldrb	r3, [r3, #0]
   10a74:	b25b      	sxtb	r3, r3
   10a76:	2b0f      	cmp	r3, #15
   10a78:	d105      	bne.n	10a86 <RegionCommonLinkAdrReqVerifyParams+0x8e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
   10a7a:	2316      	movs	r3, #22
   10a7c:	18fb      	adds	r3, r7, r3
   10a7e:	68fa      	ldr	r2, [r7, #12]
   10a80:	7a52      	ldrb	r2, [r2, #9]
   10a82:	701a      	strb	r2, [r3, #0]
   10a84:	e025      	b.n	10ad2 <RegionCommonLinkAdrReqVerifyParams+0xda>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
   10a86:	68fb      	ldr	r3, [r7, #12]
   10a88:	7b18      	ldrb	r0, [r3, #12]
   10a8a:	68fb      	ldr	r3, [r7, #12]
   10a8c:	691c      	ldr	r4, [r3, #16]
   10a8e:	68fb      	ldr	r3, [r7, #12]
   10a90:	2514      	movs	r5, #20
   10a92:	575d      	ldrsb	r5, [r3, r5]
   10a94:	68fb      	ldr	r3, [r7, #12]
   10a96:	2215      	movs	r2, #21
   10a98:	569a      	ldrsb	r2, [r3, r2]
   10a9a:	68fb      	ldr	r3, [r7, #12]
   10a9c:	699b      	ldr	r3, [r3, #24]
   10a9e:	2116      	movs	r1, #22
   10aa0:	1879      	adds	r1, r7, r1
   10aa2:	7809      	ldrb	r1, [r1, #0]
   10aa4:	b249      	sxtb	r1, r1
   10aa6:	9301      	str	r3, [sp, #4]
   10aa8:	9200      	str	r2, [sp, #0]
   10aaa:	002b      	movs	r3, r5
   10aac:	000a      	movs	r2, r1
   10aae:	0021      	movs	r1, r4
   10ab0:	4c3d      	ldr	r4, [pc, #244]	; (10ba8 <RegionCommonLinkAdrReqVerifyParams+0x1b0>)
   10ab2:	47a0      	blx	r4
   10ab4:	0003      	movs	r3, r0
   10ab6:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
   10ab8:	2301      	movs	r3, #1
   10aba:	4053      	eors	r3, r2
   10abc:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
   10abe:	2b00      	cmp	r3, #0
   10ac0:	d007      	beq.n	10ad2 <RegionCommonLinkAdrReqVerifyParams+0xda>
        {
            status &= 0xFD; // Datarate KO
   10ac2:	2317      	movs	r3, #23
   10ac4:	18fb      	adds	r3, r7, r3
   10ac6:	2217      	movs	r2, #23
   10ac8:	18ba      	adds	r2, r7, r2
   10aca:	7812      	ldrb	r2, [r2, #0]
   10acc:	2102      	movs	r1, #2
   10ace:	438a      	bics	r2, r1
   10ad0:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( (  verifyParams->Version.Fields.Minor >= 1 ) && ( txPower == 0xF ) )
   10ad2:	68fb      	ldr	r3, [r7, #12]
   10ad4:	789b      	ldrb	r3, [r3, #2]
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d00b      	beq.n	10af2 <RegionCommonLinkAdrReqVerifyParams+0xfa>
   10ada:	2315      	movs	r3, #21
   10adc:	18fb      	adds	r3, r7, r3
   10ade:	781b      	ldrb	r3, [r3, #0]
   10ae0:	b25b      	sxtb	r3, r3
   10ae2:	2b0f      	cmp	r3, #15
   10ae4:	d105      	bne.n	10af2 <RegionCommonLinkAdrReqVerifyParams+0xfa>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
   10ae6:	2315      	movs	r3, #21
   10ae8:	18fb      	adds	r3, r7, r3
   10aea:	68fa      	ldr	r2, [r7, #12]
   10aec:	7a92      	ldrb	r2, [r2, #10]
   10aee:	701a      	strb	r2, [r3, #0]
   10af0:	e025      	b.n	10b3e <RegionCommonLinkAdrReqVerifyParams+0x146>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
   10af2:	68fb      	ldr	r3, [r7, #12]
   10af4:	211d      	movs	r1, #29
   10af6:	5659      	ldrsb	r1, [r3, r1]
   10af8:	68fb      	ldr	r3, [r7, #12]
   10afa:	221c      	movs	r2, #28
   10afc:	569a      	ldrsb	r2, [r3, r2]
   10afe:	2315      	movs	r3, #21
   10b00:	18fb      	adds	r3, r7, r3
   10b02:	781b      	ldrb	r3, [r3, #0]
   10b04:	b25b      	sxtb	r3, r3
   10b06:	0018      	movs	r0, r3
   10b08:	4b28      	ldr	r3, [pc, #160]	; (10bac <RegionCommonLinkAdrReqVerifyParams+0x1b4>)
   10b0a:	4798      	blx	r3
   10b0c:	1e03      	subs	r3, r0, #0
   10b0e:	d116      	bne.n	10b3e <RegionCommonLinkAdrReqVerifyParams+0x146>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
   10b10:	68fb      	ldr	r3, [r7, #12]
   10b12:	7f5b      	ldrb	r3, [r3, #29]
   10b14:	b25b      	sxtb	r3, r3
   10b16:	2215      	movs	r2, #21
   10b18:	18ba      	adds	r2, r7, r2
   10b1a:	7812      	ldrb	r2, [r2, #0]
   10b1c:	b252      	sxtb	r2, r2
   10b1e:	429a      	cmp	r2, r3
   10b20:	da05      	bge.n	10b2e <RegionCommonLinkAdrReqVerifyParams+0x136>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
   10b22:	2315      	movs	r3, #21
   10b24:	18fb      	adds	r3, r7, r3
   10b26:	68fa      	ldr	r2, [r7, #12]
   10b28:	7f52      	ldrb	r2, [r2, #29]
   10b2a:	701a      	strb	r2, [r3, #0]
   10b2c:	e007      	b.n	10b3e <RegionCommonLinkAdrReqVerifyParams+0x146>
            }
            else
            {
                status &= 0xFB; // TxPower KO
   10b2e:	2317      	movs	r3, #23
   10b30:	18fb      	adds	r3, r7, r3
   10b32:	2217      	movs	r2, #23
   10b34:	18ba      	adds	r2, r7, r2
   10b36:	7812      	ldrb	r2, [r2, #0]
   10b38:	2104      	movs	r1, #4
   10b3a:	438a      	bics	r2, r1
   10b3c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
   10b3e:	2317      	movs	r3, #23
   10b40:	18fb      	adds	r3, r7, r3
   10b42:	781b      	ldrb	r3, [r3, #0]
   10b44:	2b07      	cmp	r3, #7
   10b46:	d119      	bne.n	10b7c <RegionCommonLinkAdrReqVerifyParams+0x184>
    {
        if( verifyParams->Version.Fields.Minor < 1 )
   10b48:	68fb      	ldr	r3, [r7, #12]
   10b4a:	789b      	ldrb	r3, [r3, #2]
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	d10a      	bne.n	10b66 <RegionCommonLinkAdrReqVerifyParams+0x16e>
        {
            if( nbRepetitions == 0 )
   10b50:	2314      	movs	r3, #20
   10b52:	18fb      	adds	r3, r7, r3
   10b54:	781b      	ldrb	r3, [r3, #0]
   10b56:	b25b      	sxtb	r3, r3
   10b58:	2b00      	cmp	r3, #0
   10b5a:	d10f      	bne.n	10b7c <RegionCommonLinkAdrReqVerifyParams+0x184>
            { // Restore the default value.
                nbRepetitions = 1;
   10b5c:	2314      	movs	r3, #20
   10b5e:	18fb      	adds	r3, r7, r3
   10b60:	2201      	movs	r2, #1
   10b62:	701a      	strb	r2, [r3, #0]
   10b64:	e00a      	b.n	10b7c <RegionCommonLinkAdrReqVerifyParams+0x184>
            }
        }
        else
        {
            if( nbRepetitions == 0 )
   10b66:	2314      	movs	r3, #20
   10b68:	18fb      	adds	r3, r7, r3
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	b25b      	sxtb	r3, r3
   10b6e:	2b00      	cmp	r3, #0
   10b70:	d104      	bne.n	10b7c <RegionCommonLinkAdrReqVerifyParams+0x184>
            {  // Keep the current NbTrans value unchanged.
                nbRepetitions = verifyParams->CurrentNbRep;
   10b72:	2314      	movs	r3, #20
   10b74:	18fb      	adds	r3, r7, r3
   10b76:	68fa      	ldr	r2, [r7, #12]
   10b78:	7ad2      	ldrb	r2, [r2, #11]
   10b7a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // Apply changes
    *dr = datarate;
   10b7c:	68bb      	ldr	r3, [r7, #8]
   10b7e:	2216      	movs	r2, #22
   10b80:	18ba      	adds	r2, r7, r2
   10b82:	7812      	ldrb	r2, [r2, #0]
   10b84:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
   10b86:	687b      	ldr	r3, [r7, #4]
   10b88:	2215      	movs	r2, #21
   10b8a:	18ba      	adds	r2, r7, r2
   10b8c:	7812      	ldrb	r2, [r2, #0]
   10b8e:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
   10b90:	2314      	movs	r3, #20
   10b92:	18fb      	adds	r3, r7, r3
   10b94:	781a      	ldrb	r2, [r3, #0]
   10b96:	683b      	ldr	r3, [r7, #0]
   10b98:	701a      	strb	r2, [r3, #0]

    return status;
   10b9a:	2317      	movs	r3, #23
   10b9c:	18fb      	adds	r3, r7, r3
   10b9e:	781b      	ldrb	r3, [r3, #0]
}
   10ba0:	0018      	movs	r0, r3
   10ba2:	46bd      	mov	sp, r7
   10ba4:	b006      	add	sp, #24
   10ba6:	bdb0      	pop	{r4, r5, r7, pc}
   10ba8:	00010415 	.word	0x00010415
   10bac:	00010559 	.word	0x00010559

00010bb0 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
   10bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bb2:	b083      	sub	sp, #12
   10bb4:	af00      	add	r7, sp, #0
   10bb6:	0002      	movs	r2, r0
   10bb8:	6039      	str	r1, [r7, #0]
   10bba:	1dfb      	adds	r3, r7, #7
   10bbc:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
   10bbe:	1dfb      	adds	r3, r7, #7
   10bc0:	781b      	ldrb	r3, [r3, #0]
   10bc2:	2201      	movs	r2, #1
   10bc4:	409a      	lsls	r2, r3
   10bc6:	4b0e      	ldr	r3, [pc, #56]	; (10c00 <RegionCommonComputeSymbolTimeLoRa+0x50>)
   10bc8:	0010      	movs	r0, r2
   10bca:	4798      	blx	r3
   10bcc:	0005      	movs	r5, r0
   10bce:	000e      	movs	r6, r1
   10bd0:	4b0c      	ldr	r3, [pc, #48]	; (10c04 <RegionCommonComputeSymbolTimeLoRa+0x54>)
   10bd2:	6838      	ldr	r0, [r7, #0]
   10bd4:	4798      	blx	r3
   10bd6:	0002      	movs	r2, r0
   10bd8:	000b      	movs	r3, r1
   10bda:	4c0b      	ldr	r4, [pc, #44]	; (10c08 <RegionCommonComputeSymbolTimeLoRa+0x58>)
   10bdc:	0028      	movs	r0, r5
   10bde:	0031      	movs	r1, r6
   10be0:	47a0      	blx	r4
   10be2:	0003      	movs	r3, r0
   10be4:	000c      	movs	r4, r1
   10be6:	0018      	movs	r0, r3
   10be8:	0021      	movs	r1, r4
   10bea:	4c08      	ldr	r4, [pc, #32]	; (10c0c <RegionCommonComputeSymbolTimeLoRa+0x5c>)
   10bec:	2200      	movs	r2, #0
   10bee:	4b08      	ldr	r3, [pc, #32]	; (10c10 <RegionCommonComputeSymbolTimeLoRa+0x60>)
   10bf0:	47a0      	blx	r4
   10bf2:	0003      	movs	r3, r0
   10bf4:	000c      	movs	r4, r1
}
   10bf6:	0018      	movs	r0, r3
   10bf8:	0021      	movs	r1, r4
   10bfa:	46bd      	mov	sp, r7
   10bfc:	b003      	add	sp, #12
   10bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c00:	00019999 	.word	0x00019999
   10c04:	00019a1d 	.word	0x00019a1d
   10c08:	0001859d 	.word	0x0001859d
   10c0c:	00018e05 	.word	0x00018e05
   10c10:	408f4000 	.word	0x408f4000

00010c14 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
   10c14:	b590      	push	{r4, r7, lr}
   10c16:	b083      	sub	sp, #12
   10c18:	af00      	add	r7, sp, #0
   10c1a:	0002      	movs	r2, r0
   10c1c:	1dfb      	adds	r3, r7, #7
   10c1e:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
   10c20:	1dfb      	adds	r3, r7, #7
   10c22:	781a      	ldrb	r2, [r3, #0]
   10c24:	4b07      	ldr	r3, [pc, #28]	; (10c44 <RegionCommonComputeSymbolTimeFsk+0x30>)
   10c26:	0010      	movs	r0, r2
   10c28:	4798      	blx	r3
   10c2a:	0002      	movs	r2, r0
   10c2c:	000b      	movs	r3, r1
   10c2e:	4c06      	ldr	r4, [pc, #24]	; (10c48 <RegionCommonComputeSymbolTimeFsk+0x34>)
   10c30:	2000      	movs	r0, #0
   10c32:	4906      	ldr	r1, [pc, #24]	; (10c4c <RegionCommonComputeSymbolTimeFsk+0x38>)
   10c34:	47a0      	blx	r4
   10c36:	0003      	movs	r3, r0
   10c38:	000c      	movs	r4, r1
}
   10c3a:	0018      	movs	r0, r3
   10c3c:	0021      	movs	r1, r4
   10c3e:	46bd      	mov	sp, r7
   10c40:	b003      	add	sp, #12
   10c42:	bd90      	pop	{r4, r7, pc}
   10c44:	00019a1d 	.word	0x00019a1d
   10c48:	0001859d 	.word	0x0001859d
   10c4c:	40200000 	.word	0x40200000

00010c50 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
   10c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c52:	b087      	sub	sp, #28
   10c54:	af00      	add	r7, sp, #0
   10c56:	6138      	str	r0, [r7, #16]
   10c58:	6179      	str	r1, [r7, #20]
   10c5a:	60bb      	str	r3, [r7, #8]
   10c5c:	230f      	movs	r3, #15
   10c5e:	18fb      	adds	r3, r7, r3
   10c60:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
   10c62:	230f      	movs	r3, #15
   10c64:	18fb      	adds	r3, r7, r3
   10c66:	781d      	ldrb	r5, [r3, #0]
   10c68:	230f      	movs	r3, #15
   10c6a:	18fb      	adds	r3, r7, r3
   10c6c:	781b      	ldrb	r3, [r3, #0]
   10c6e:	3b04      	subs	r3, #4
   10c70:	005a      	lsls	r2, r3, #1
   10c72:	4b3a      	ldr	r3, [pc, #232]	; (10d5c <RegionCommonComputeRxWindowParameters+0x10c>)
   10c74:	0010      	movs	r0, r2
   10c76:	4798      	blx	r3
   10c78:	4c39      	ldr	r4, [pc, #228]	; (10d60 <RegionCommonComputeRxWindowParameters+0x110>)
   10c7a:	693a      	ldr	r2, [r7, #16]
   10c7c:	697b      	ldr	r3, [r7, #20]
   10c7e:	47a0      	blx	r4
   10c80:	0003      	movs	r3, r0
   10c82:	000c      	movs	r4, r1
   10c84:	603b      	str	r3, [r7, #0]
   10c86:	607c      	str	r4, [r7, #4]
   10c88:	68bb      	ldr	r3, [r7, #8]
   10c8a:	005a      	lsls	r2, r3, #1
   10c8c:	4b35      	ldr	r3, [pc, #212]	; (10d64 <RegionCommonComputeRxWindowParameters+0x114>)
   10c8e:	0010      	movs	r0, r2
   10c90:	4798      	blx	r3
   10c92:	0002      	movs	r2, r0
   10c94:	000b      	movs	r3, r1
   10c96:	4c34      	ldr	r4, [pc, #208]	; (10d68 <RegionCommonComputeRxWindowParameters+0x118>)
   10c98:	6838      	ldr	r0, [r7, #0]
   10c9a:	6879      	ldr	r1, [r7, #4]
   10c9c:	47a0      	blx	r4
   10c9e:	0003      	movs	r3, r0
   10ca0:	000c      	movs	r4, r1
   10ca2:	0018      	movs	r0, r3
   10ca4:	0021      	movs	r1, r4
   10ca6:	4c31      	ldr	r4, [pc, #196]	; (10d6c <RegionCommonComputeRxWindowParameters+0x11c>)
   10ca8:	693a      	ldr	r2, [r7, #16]
   10caa:	697b      	ldr	r3, [r7, #20]
   10cac:	47a0      	blx	r4
   10cae:	0003      	movs	r3, r0
   10cb0:	000c      	movs	r4, r1
   10cb2:	0018      	movs	r0, r3
   10cb4:	0021      	movs	r1, r4
   10cb6:	4b2e      	ldr	r3, [pc, #184]	; (10d70 <RegionCommonComputeRxWindowParameters+0x120>)
   10cb8:	4798      	blx	r3
   10cba:	000a      	movs	r2, r1
   10cbc:	0001      	movs	r1, r0
   10cbe:	4b2d      	ldr	r3, [pc, #180]	; (10d74 <RegionCommonComputeRxWindowParameters+0x124>)
   10cc0:	0008      	movs	r0, r1
   10cc2:	0011      	movs	r1, r2
   10cc4:	4798      	blx	r3
   10cc6:	0002      	movs	r2, r0
   10cc8:	002b      	movs	r3, r5
   10cca:	4293      	cmp	r3, r2
   10ccc:	d200      	bcs.n	10cd0 <RegionCommonComputeRxWindowParameters+0x80>
   10cce:	0013      	movs	r3, r2
   10cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10cd2:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
   10cd4:	4c22      	ldr	r4, [pc, #136]	; (10d60 <RegionCommonComputeRxWindowParameters+0x110>)
   10cd6:	2200      	movs	r2, #0
   10cd8:	4b27      	ldr	r3, [pc, #156]	; (10d78 <RegionCommonComputeRxWindowParameters+0x128>)
   10cda:	6938      	ldr	r0, [r7, #16]
   10cdc:	6979      	ldr	r1, [r7, #20]
   10cde:	47a0      	blx	r4
   10ce0:	0003      	movs	r3, r0
   10ce2:	000c      	movs	r4, r1
   10ce4:	001d      	movs	r5, r3
   10ce6:	0026      	movs	r6, r4
   10ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10cea:	681a      	ldr	r2, [r3, #0]
   10cec:	4b1d      	ldr	r3, [pc, #116]	; (10d64 <RegionCommonComputeRxWindowParameters+0x114>)
   10cee:	0010      	movs	r0, r2
   10cf0:	4798      	blx	r3
   10cf2:	4c1b      	ldr	r4, [pc, #108]	; (10d60 <RegionCommonComputeRxWindowParameters+0x110>)
   10cf4:	693a      	ldr	r2, [r7, #16]
   10cf6:	697b      	ldr	r3, [r7, #20]
   10cf8:	47a0      	blx	r4
   10cfa:	0003      	movs	r3, r0
   10cfc:	000c      	movs	r4, r1
   10cfe:	0018      	movs	r0, r3
   10d00:	0021      	movs	r1, r4
   10d02:	4c1a      	ldr	r4, [pc, #104]	; (10d6c <RegionCommonComputeRxWindowParameters+0x11c>)
   10d04:	2200      	movs	r2, #0
   10d06:	2380      	movs	r3, #128	; 0x80
   10d08:	05db      	lsls	r3, r3, #23
   10d0a:	47a0      	blx	r4
   10d0c:	0003      	movs	r3, r0
   10d0e:	000c      	movs	r4, r1
   10d10:	001a      	movs	r2, r3
   10d12:	0023      	movs	r3, r4
   10d14:	4c19      	ldr	r4, [pc, #100]	; (10d7c <RegionCommonComputeRxWindowParameters+0x12c>)
   10d16:	0028      	movs	r0, r5
   10d18:	0031      	movs	r1, r6
   10d1a:	47a0      	blx	r4
   10d1c:	0003      	movs	r3, r0
   10d1e:	000c      	movs	r4, r1
   10d20:	001d      	movs	r5, r3
   10d22:	0026      	movs	r6, r4
   10d24:	4b0f      	ldr	r3, [pc, #60]	; (10d64 <RegionCommonComputeRxWindowParameters+0x114>)
   10d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10d28:	4798      	blx	r3
   10d2a:	0002      	movs	r2, r0
   10d2c:	000b      	movs	r3, r1
   10d2e:	4c13      	ldr	r4, [pc, #76]	; (10d7c <RegionCommonComputeRxWindowParameters+0x12c>)
   10d30:	0028      	movs	r0, r5
   10d32:	0031      	movs	r1, r6
   10d34:	47a0      	blx	r4
   10d36:	0003      	movs	r3, r0
   10d38:	000c      	movs	r4, r1
   10d3a:	0018      	movs	r0, r3
   10d3c:	0021      	movs	r1, r4
   10d3e:	4b0c      	ldr	r3, [pc, #48]	; (10d70 <RegionCommonComputeRxWindowParameters+0x120>)
   10d40:	4798      	blx	r3
   10d42:	000a      	movs	r2, r1
   10d44:	0001      	movs	r1, r0
   10d46:	4b0e      	ldr	r3, [pc, #56]	; (10d80 <RegionCommonComputeRxWindowParameters+0x130>)
   10d48:	0008      	movs	r0, r1
   10d4a:	0011      	movs	r1, r2
   10d4c:	4798      	blx	r3
   10d4e:	0002      	movs	r2, r0
   10d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10d52:	601a      	str	r2, [r3, #0]
}
   10d54:	46c0      	nop			; (mov r8, r8)
   10d56:	46bd      	mov	sp, r7
   10d58:	b007      	add	sp, #28
   10d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d5c:	00019999 	.word	0x00019999
   10d60:	00018e05 	.word	0x00018e05
   10d64:	00019a1d 	.word	0x00019a1d
   10d68:	00017f7d 	.word	0x00017f7d
   10d6c:	0001859d 	.word	0x0001859d
   10d70:	0001734d 	.word	0x0001734d
   10d74:	000179fd 	.word	0x000179fd
   10d78:	40100000 	.word	0x40100000
   10d7c:	00019305 	.word	0x00019305
   10d80:	00019931 	.word	0x00019931

00010d84 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
   10d84:	b590      	push	{r4, r7, lr}
   10d86:	b087      	sub	sp, #28
   10d88:	af00      	add	r7, sp, #0
   10d8a:	60b9      	str	r1, [r7, #8]
   10d8c:	607a      	str	r2, [r7, #4]
   10d8e:	230f      	movs	r3, #15
   10d90:	18fb      	adds	r3, r7, r3
   10d92:	1c02      	adds	r2, r0, #0
   10d94:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
   10d96:	2317      	movs	r3, #23
   10d98:	18fb      	adds	r3, r7, r3
   10d9a:	2200      	movs	r2, #0
   10d9c:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   10d9e:	230f      	movs	r3, #15
   10da0:	18fb      	adds	r3, r7, r3
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	b25b      	sxtb	r3, r3
   10da6:	005a      	lsls	r2, r3, #1
   10da8:	4b15      	ldr	r3, [pc, #84]	; (10e00 <RegionCommonComputeTxPower+0x7c>)
   10daa:	0010      	movs	r0, r2
   10dac:	4798      	blx	r3
   10dae:	1c02      	adds	r2, r0, #0
   10db0:	4b14      	ldr	r3, [pc, #80]	; (10e04 <RegionCommonComputeTxPower+0x80>)
   10db2:	1c11      	adds	r1, r2, #0
   10db4:	68b8      	ldr	r0, [r7, #8]
   10db6:	4798      	blx	r3
   10db8:	1c03      	adds	r3, r0, #0
   10dba:	1c1a      	adds	r2, r3, #0
   10dbc:	4b11      	ldr	r3, [pc, #68]	; (10e04 <RegionCommonComputeTxPower+0x80>)
   10dbe:	6879      	ldr	r1, [r7, #4]
   10dc0:	1c10      	adds	r0, r2, #0
   10dc2:	4798      	blx	r3
   10dc4:	1c03      	adds	r3, r0, #0
   10dc6:	1c1a      	adds	r2, r3, #0
   10dc8:	4b0f      	ldr	r3, [pc, #60]	; (10e08 <RegionCommonComputeTxPower+0x84>)
   10dca:	1c10      	adds	r0, r2, #0
   10dcc:	4798      	blx	r3
   10dce:	0003      	movs	r3, r0
   10dd0:	000c      	movs	r4, r1
   10dd2:	0018      	movs	r0, r3
   10dd4:	0021      	movs	r1, r4
   10dd6:	4b0d      	ldr	r3, [pc, #52]	; (10e0c <RegionCommonComputeTxPower+0x88>)
   10dd8:	4798      	blx	r3
   10dda:	000a      	movs	r2, r1
   10ddc:	0001      	movs	r1, r0
   10dde:	2317      	movs	r3, #23
   10de0:	18fc      	adds	r4, r7, r3
   10de2:	4b0b      	ldr	r3, [pc, #44]	; (10e10 <RegionCommonComputeTxPower+0x8c>)
   10de4:	0008      	movs	r0, r1
   10de6:	0011      	movs	r1, r2
   10de8:	4798      	blx	r3
   10dea:	0003      	movs	r3, r0
   10dec:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
   10dee:	2317      	movs	r3, #23
   10df0:	18fb      	adds	r3, r7, r3
   10df2:	781b      	ldrb	r3, [r3, #0]
   10df4:	b25b      	sxtb	r3, r3
}
   10df6:	0018      	movs	r0, r3
   10df8:	46bd      	mov	sp, r7
   10dfa:	b007      	add	sp, #28
   10dfc:	bd90      	pop	{r4, r7, pc}
   10dfe:	46c0      	nop			; (mov r8, r8)
   10e00:	00017ef1 	.word	0x00017ef1
   10e04:	00017bb9 	.word	0x00017bb9
   10e08:	00019a8d 	.word	0x00019a8d
   10e0c:	00017479 	.word	0x00017479
   10e10:	00019931 	.word	0x00019931

00010e14 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
   10e14:	b590      	push	{r4, r7, lr}
   10e16:	b085      	sub	sp, #20
   10e18:	af00      	add	r7, sp, #0
   10e1a:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
   10e1c:	687b      	ldr	r3, [r7, #4]
   10e1e:	681a      	ldr	r2, [r3, #0]
   10e20:	687b      	ldr	r3, [r7, #4]
   10e22:	7adb      	ldrb	r3, [r3, #11]
   10e24:	0019      	movs	r1, r3
   10e26:	000b      	movs	r3, r1
   10e28:	005b      	lsls	r3, r3, #1
   10e2a:	185b      	adds	r3, r3, r1
   10e2c:	009b      	lsls	r3, r3, #2
   10e2e:	18d2      	adds	r2, r2, r3
   10e30:	230f      	movs	r3, #15
   10e32:	18fb      	adds	r3, r7, r3
   10e34:	7a52      	ldrb	r2, [r2, #9]
   10e36:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
   10e38:	687b      	ldr	r3, [r7, #4]
   10e3a:	685a      	ldr	r2, [r3, #4]
   10e3c:	230f      	movs	r3, #15
   10e3e:	18fb      	adds	r3, r7, r3
   10e40:	781b      	ldrb	r3, [r3, #0]
   10e42:	011b      	lsls	r3, r3, #4
   10e44:	18d2      	adds	r2, r2, r3
   10e46:	230c      	movs	r3, #12
   10e48:	18fb      	adds	r3, r7, r3
   10e4a:	8812      	ldrh	r2, [r2, #0]
   10e4c:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
   10e4e:	230a      	movs	r3, #10
   10e50:	18fb      	adds	r3, r7, r3
   10e52:	2200      	movs	r2, #0
   10e54:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
   10e56:	687b      	ldr	r3, [r7, #4]
   10e58:	685a      	ldr	r2, [r3, #4]
   10e5a:	230f      	movs	r3, #15
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	781b      	ldrb	r3, [r3, #0]
   10e60:	011b      	lsls	r3, r3, #4
   10e62:	18d3      	adds	r3, r2, r3
   10e64:	2200      	movs	r2, #0
   10e66:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
   10e68:	687b      	ldr	r3, [r7, #4]
   10e6a:	7a5b      	ldrb	r3, [r3, #9]
   10e6c:	2201      	movs	r2, #1
   10e6e:	4053      	eors	r3, r2
   10e70:	b2db      	uxtb	r3, r3
   10e72:	2b00      	cmp	r3, #0
   10e74:	d03e      	beq.n	10ef4 <RegionCommonCalcBackOff+0xe0>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
   10e76:	230a      	movs	r3, #10
   10e78:	18fc      	adds	r4, r7, r3
   10e7a:	687b      	ldr	r3, [r7, #4]
   10e7c:	68d8      	ldr	r0, [r3, #12]
   10e7e:	6919      	ldr	r1, [r3, #16]
   10e80:	4b2d      	ldr	r3, [pc, #180]	; (10f38 <RegionCommonCalcBackOff+0x124>)
   10e82:	4798      	blx	r3
   10e84:	0003      	movs	r3, r0
   10e86:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   10e88:	230c      	movs	r3, #12
   10e8a:	18fa      	adds	r2, r7, r3
   10e8c:	230a      	movs	r3, #10
   10e8e:	18fb      	adds	r3, r7, r3
   10e90:	210c      	movs	r1, #12
   10e92:	1879      	adds	r1, r7, r1
   10e94:	880c      	ldrh	r4, [r1, #0]
   10e96:	881b      	ldrh	r3, [r3, #0]
   10e98:	b298      	uxth	r0, r3
   10e9a:	b2a1      	uxth	r1, r4
   10e9c:	4288      	cmp	r0, r1
   10e9e:	d200      	bcs.n	10ea2 <RegionCommonCalcBackOff+0x8e>
   10ea0:	1c23      	adds	r3, r4, #0
   10ea2:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	7a9b      	ldrb	r3, [r3, #10]
   10ea8:	2201      	movs	r2, #1
   10eaa:	4053      	eors	r3, r2
   10eac:	b2db      	uxtb	r3, r3
   10eae:	2b00      	cmp	r3, #0
   10eb0:	d010      	beq.n	10ed4 <RegionCommonCalcBackOff+0xc0>
   10eb2:	687b      	ldr	r3, [r7, #4]
   10eb4:	7a1b      	ldrb	r3, [r3, #8]
   10eb6:	2201      	movs	r2, #1
   10eb8:	4053      	eors	r3, r2
   10eba:	b2db      	uxtb	r3, r3
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d009      	beq.n	10ed4 <RegionCommonCalcBackOff+0xc0>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
   10ec0:	687b      	ldr	r3, [r7, #4]
   10ec2:	685a      	ldr	r2, [r3, #4]
   10ec4:	230f      	movs	r3, #15
   10ec6:	18fb      	adds	r3, r7, r3
   10ec8:	781b      	ldrb	r3, [r3, #0]
   10eca:	011b      	lsls	r3, r3, #4
   10ecc:	18d3      	adds	r3, r2, r3
   10ece:	2200      	movs	r2, #0
   10ed0:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
   10ed2:	e02c      	b.n	10f2e <RegionCommonCalcBackOff+0x11a>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
   10ed4:	687b      	ldr	r3, [r7, #4]
   10ed6:	685a      	ldr	r2, [r3, #4]
   10ed8:	230f      	movs	r3, #15
   10eda:	18fb      	adds	r3, r7, r3
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	011b      	lsls	r3, r3, #4
   10ee0:	18d3      	adds	r3, r2, r3
   10ee2:	220c      	movs	r2, #12
   10ee4:	18ba      	adds	r2, r7, r2
   10ee6:	8812      	ldrh	r2, [r2, #0]
   10ee8:	1e51      	subs	r1, r2, #1
   10eea:	687a      	ldr	r2, [r7, #4]
   10eec:	6952      	ldr	r2, [r2, #20]
   10eee:	434a      	muls	r2, r1
   10ef0:	60da      	str	r2, [r3, #12]
}
   10ef2:	e01c      	b.n	10f2e <RegionCommonCalcBackOff+0x11a>
        if( calcBackOffParams->DutyCycleEnabled == true )
   10ef4:	687b      	ldr	r3, [r7, #4]
   10ef6:	7a9b      	ldrb	r3, [r3, #10]
   10ef8:	2b00      	cmp	r3, #0
   10efa:	d00f      	beq.n	10f1c <RegionCommonCalcBackOff+0x108>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
   10efc:	687b      	ldr	r3, [r7, #4]
   10efe:	685a      	ldr	r2, [r3, #4]
   10f00:	230f      	movs	r3, #15
   10f02:	18fb      	adds	r3, r7, r3
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	011b      	lsls	r3, r3, #4
   10f08:	18d3      	adds	r3, r2, r3
   10f0a:	220c      	movs	r2, #12
   10f0c:	18ba      	adds	r2, r7, r2
   10f0e:	8812      	ldrh	r2, [r2, #0]
   10f10:	1e51      	subs	r1, r2, #1
   10f12:	687a      	ldr	r2, [r7, #4]
   10f14:	6952      	ldr	r2, [r2, #20]
   10f16:	434a      	muls	r2, r1
   10f18:	60da      	str	r2, [r3, #12]
}
   10f1a:	e008      	b.n	10f2e <RegionCommonCalcBackOff+0x11a>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
   10f1c:	687b      	ldr	r3, [r7, #4]
   10f1e:	685a      	ldr	r2, [r3, #4]
   10f20:	230f      	movs	r3, #15
   10f22:	18fb      	adds	r3, r7, r3
   10f24:	781b      	ldrb	r3, [r3, #0]
   10f26:	011b      	lsls	r3, r3, #4
   10f28:	18d3      	adds	r3, r2, r3
   10f2a:	2200      	movs	r2, #0
   10f2c:	60da      	str	r2, [r3, #12]
}
   10f2e:	46c0      	nop			; (mov r8, r8)
   10f30:	46bd      	mov	sp, r7
   10f32:	b005      	add	sp, #20
   10f34:	bd90      	pop	{r4, r7, pc}
   10f36:	46c0      	nop			; (mov r8, r8)
   10f38:	000103b5 	.word	0x000103b5

00010f3c <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
   10f3c:	b580      	push	{r7, lr}
   10f3e:	b084      	sub	sp, #16
   10f40:	af00      	add	r7, sp, #0
   10f42:	0002      	movs	r2, r0
   10f44:	1dfb      	adds	r3, r7, #7
   10f46:	701a      	strb	r2, [r3, #0]
   10f48:	1dbb      	adds	r3, r7, #6
   10f4a:	1c0a      	adds	r2, r1, #0
   10f4c:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
   10f4e:	230f      	movs	r3, #15
   10f50:	18fb      	adds	r3, r7, r3
   10f52:	2200      	movs	r2, #0
   10f54:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
   10f56:	1dfa      	adds	r2, r7, #7
   10f58:	1dbb      	adds	r3, r7, #6
   10f5a:	7812      	ldrb	r2, [r2, #0]
   10f5c:	b252      	sxtb	r2, r2
   10f5e:	781b      	ldrb	r3, [r3, #0]
   10f60:	b25b      	sxtb	r3, r3
   10f62:	429a      	cmp	r2, r3
   10f64:	d105      	bne.n	10f72 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
   10f66:	230f      	movs	r3, #15
   10f68:	18fb      	adds	r3, r7, r3
   10f6a:	1dba      	adds	r2, r7, #6
   10f6c:	7812      	ldrb	r2, [r2, #0]
   10f6e:	701a      	strb	r2, [r3, #0]
   10f70:	e005      	b.n	10f7e <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
   10f72:	1dfb      	adds	r3, r7, #7
   10f74:	781a      	ldrb	r2, [r3, #0]
   10f76:	230f      	movs	r3, #15
   10f78:	18fb      	adds	r3, r7, r3
   10f7a:	3a01      	subs	r2, #1
   10f7c:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
   10f7e:	230f      	movs	r3, #15
   10f80:	18fb      	adds	r3, r7, r3
   10f82:	781b      	ldrb	r3, [r3, #0]
   10f84:	b25b      	sxtb	r3, r3
}
   10f86:	0018      	movs	r0, r3
   10f88:	46bd      	mov	sp, r7
   10f8a:	b004      	add	sp, #16
   10f8c:	bd80      	pop	{r7, pc}
	...

00010f90 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
   10f90:	b580      	push	{r7, lr}
   10f92:	b082      	sub	sp, #8
   10f94:	af00      	add	r7, sp, #0
   10f96:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
   10f98:	4b09      	ldr	r3, [pc, #36]	; (10fc0 <GetBandwidth+0x30>)
   10f9a:	687a      	ldr	r2, [r7, #4]
   10f9c:	0092      	lsls	r2, r2, #2
   10f9e:	58d3      	ldr	r3, [r2, r3]
   10fa0:	4a08      	ldr	r2, [pc, #32]	; (10fc4 <GetBandwidth+0x34>)
   10fa2:	4293      	cmp	r3, r2
   10fa4:	d004      	beq.n	10fb0 <GetBandwidth+0x20>
   10fa6:	4a08      	ldr	r2, [pc, #32]	; (10fc8 <GetBandwidth+0x38>)
   10fa8:	4293      	cmp	r3, r2
   10faa:	d003      	beq.n	10fb4 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
   10fac:	2300      	movs	r3, #0
   10fae:	e002      	b.n	10fb6 <GetBandwidth+0x26>
        case 250000:
            return 1;
   10fb0:	2301      	movs	r3, #1
   10fb2:	e000      	b.n	10fb6 <GetBandwidth+0x26>
        case 500000:
            return 2;
   10fb4:	2302      	movs	r3, #2
    }
}
   10fb6:	0018      	movs	r0, r3
   10fb8:	46bd      	mov	sp, r7
   10fba:	b002      	add	sp, #8
   10fbc:	bd80      	pop	{r7, pc}
   10fbe:	46c0      	nop			; (mov r8, r8)
   10fc0:	0001f69c 	.word	0x0001f69c
   10fc4:	0003d090 	.word	0x0003d090
   10fc8:	0007a120 	.word	0x0007a120

00010fcc <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
   10fcc:	b590      	push	{r4, r7, lr}
   10fce:	b085      	sub	sp, #20
   10fd0:	af00      	add	r7, sp, #0
   10fd2:	0004      	movs	r4, r0
   10fd4:	0008      	movs	r0, r1
   10fd6:	0011      	movs	r1, r2
   10fd8:	603b      	str	r3, [r7, #0]
   10fda:	1dfb      	adds	r3, r7, #7
   10fdc:	1c22      	adds	r2, r4, #0
   10fde:	701a      	strb	r2, [r3, #0]
   10fe0:	1dbb      	adds	r3, r7, #6
   10fe2:	1c02      	adds	r2, r0, #0
   10fe4:	701a      	strb	r2, [r3, #0]
   10fe6:	1d7b      	adds	r3, r7, #5
   10fe8:	1c0a      	adds	r2, r1, #0
   10fea:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
   10fec:	230f      	movs	r3, #15
   10fee:	18fb      	adds	r3, r7, r3
   10ff0:	1dfa      	adds	r2, r7, #7
   10ff2:	7812      	ldrb	r2, [r2, #0]
   10ff4:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
   10ff6:	230f      	movs	r3, #15
   10ff8:	18fa      	adds	r2, r7, r3
   10ffa:	1dbb      	adds	r3, r7, #6
   10ffc:	1df9      	adds	r1, r7, #7
   10ffe:	780c      	ldrb	r4, [r1, #0]
   11000:	781b      	ldrb	r3, [r3, #0]
   11002:	b258      	sxtb	r0, r3
   11004:	b261      	sxtb	r1, r4
   11006:	4288      	cmp	r0, r1
   11008:	da00      	bge.n	1100c <LimitTxPower+0x40>
   1100a:	1c23      	adds	r3, r4, #0
   1100c:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
   1100e:	230f      	movs	r3, #15
   11010:	18fb      	adds	r3, r7, r3
   11012:	781b      	ldrb	r3, [r3, #0]
   11014:	b25b      	sxtb	r3, r3
}
   11016:	0018      	movs	r0, r3
   11018:	46bd      	mov	sp, r7
   1101a:	b005      	add	sp, #20
   1101c:	bd90      	pop	{r4, r7, pc}
	...

00011020 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
   11020:	b580      	push	{r7, lr}
   11022:	b082      	sub	sp, #8
   11024:	af00      	add	r7, sp, #0
   11026:	6078      	str	r0, [r7, #4]
   11028:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
   1102a:	4b2e      	ldr	r3, [pc, #184]	; (110e4 <VerifyRfFreq+0xc4>)
   1102c:	6a1b      	ldr	r3, [r3, #32]
   1102e:	687a      	ldr	r2, [r7, #4]
   11030:	0010      	movs	r0, r2
   11032:	4798      	blx	r3
   11034:	0003      	movs	r3, r0
   11036:	001a      	movs	r2, r3
   11038:	2301      	movs	r3, #1
   1103a:	4053      	eors	r3, r2
   1103c:	b2db      	uxtb	r3, r3
   1103e:	2b00      	cmp	r3, #0
   11040:	d001      	beq.n	11046 <VerifyRfFreq+0x26>
    {
        return false;
   11042:	2300      	movs	r3, #0
   11044:	e04a      	b.n	110dc <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
   11046:	687b      	ldr	r3, [r7, #4]
   11048:	4a27      	ldr	r2, [pc, #156]	; (110e8 <VerifyRfFreq+0xc8>)
   1104a:	4293      	cmp	r3, r2
   1104c:	d907      	bls.n	1105e <VerifyRfFreq+0x3e>
   1104e:	687b      	ldr	r3, [r7, #4]
   11050:	4a26      	ldr	r2, [pc, #152]	; (110ec <VerifyRfFreq+0xcc>)
   11052:	4293      	cmp	r3, r2
   11054:	d803      	bhi.n	1105e <VerifyRfFreq+0x3e>
    {
        *band = 2;
   11056:	683b      	ldr	r3, [r7, #0]
   11058:	2202      	movs	r2, #2
   1105a:	701a      	strb	r2, [r3, #0]
   1105c:	e03d      	b.n	110da <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
   1105e:	687b      	ldr	r3, [r7, #4]
   11060:	4a22      	ldr	r2, [pc, #136]	; (110ec <VerifyRfFreq+0xcc>)
   11062:	4293      	cmp	r3, r2
   11064:	d907      	bls.n	11076 <VerifyRfFreq+0x56>
   11066:	687b      	ldr	r3, [r7, #4]
   11068:	4a21      	ldr	r2, [pc, #132]	; (110f0 <VerifyRfFreq+0xd0>)
   1106a:	4293      	cmp	r3, r2
   1106c:	d803      	bhi.n	11076 <VerifyRfFreq+0x56>
    {
        *band = 0;
   1106e:	683b      	ldr	r3, [r7, #0]
   11070:	2200      	movs	r2, #0
   11072:	701a      	strb	r2, [r3, #0]
   11074:	e031      	b.n	110da <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
   11076:	687b      	ldr	r3, [r7, #4]
   11078:	4a1d      	ldr	r2, [pc, #116]	; (110f0 <VerifyRfFreq+0xd0>)
   1107a:	4293      	cmp	r3, r2
   1107c:	d907      	bls.n	1108e <VerifyRfFreq+0x6e>
   1107e:	687b      	ldr	r3, [r7, #4]
   11080:	4a1c      	ldr	r2, [pc, #112]	; (110f4 <VerifyRfFreq+0xd4>)
   11082:	4293      	cmp	r3, r2
   11084:	d803      	bhi.n	1108e <VerifyRfFreq+0x6e>
    {
        *band = 1;
   11086:	683b      	ldr	r3, [r7, #0]
   11088:	2201      	movs	r2, #1
   1108a:	701a      	strb	r2, [r3, #0]
   1108c:	e025      	b.n	110da <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
   1108e:	687b      	ldr	r3, [r7, #4]
   11090:	4a19      	ldr	r2, [pc, #100]	; (110f8 <VerifyRfFreq+0xd8>)
   11092:	4293      	cmp	r3, r2
   11094:	d907      	bls.n	110a6 <VerifyRfFreq+0x86>
   11096:	687b      	ldr	r3, [r7, #4]
   11098:	4a18      	ldr	r2, [pc, #96]	; (110fc <VerifyRfFreq+0xdc>)
   1109a:	4293      	cmp	r3, r2
   1109c:	d803      	bhi.n	110a6 <VerifyRfFreq+0x86>
    {
        *band = 2;
   1109e:	683b      	ldr	r3, [r7, #0]
   110a0:	2202      	movs	r2, #2
   110a2:	701a      	strb	r2, [r3, #0]
   110a4:	e019      	b.n	110da <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
   110a6:	687b      	ldr	r3, [r7, #4]
   110a8:	4a15      	ldr	r2, [pc, #84]	; (11100 <VerifyRfFreq+0xe0>)
   110aa:	4293      	cmp	r3, r2
   110ac:	d907      	bls.n	110be <VerifyRfFreq+0x9e>
   110ae:	687b      	ldr	r3, [r7, #4]
   110b0:	4a14      	ldr	r2, [pc, #80]	; (11104 <VerifyRfFreq+0xe4>)
   110b2:	4293      	cmp	r3, r2
   110b4:	d803      	bhi.n	110be <VerifyRfFreq+0x9e>
    {
        *band = 3;
   110b6:	683b      	ldr	r3, [r7, #0]
   110b8:	2203      	movs	r2, #3
   110ba:	701a      	strb	r2, [r3, #0]
   110bc:	e00d      	b.n	110da <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
   110be:	687b      	ldr	r3, [r7, #4]
   110c0:	4a11      	ldr	r2, [pc, #68]	; (11108 <VerifyRfFreq+0xe8>)
   110c2:	4293      	cmp	r3, r2
   110c4:	d907      	bls.n	110d6 <VerifyRfFreq+0xb6>
   110c6:	687b      	ldr	r3, [r7, #4]
   110c8:	4a10      	ldr	r2, [pc, #64]	; (1110c <VerifyRfFreq+0xec>)
   110ca:	4293      	cmp	r3, r2
   110cc:	d803      	bhi.n	110d6 <VerifyRfFreq+0xb6>
    {
        *band = 4;
   110ce:	683b      	ldr	r3, [r7, #0]
   110d0:	2204      	movs	r2, #4
   110d2:	701a      	strb	r2, [r3, #0]
   110d4:	e001      	b.n	110da <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
   110d6:	2300      	movs	r3, #0
   110d8:	e000      	b.n	110dc <VerifyRfFreq+0xbc>
    }
    return true;
   110da:	2301      	movs	r3, #1
}
   110dc:	0018      	movs	r0, r3
   110de:	46bd      	mov	sp, r7
   110e0:	b002      	add	sp, #8
   110e2:	bd80      	pop	{r7, pc}
   110e4:	0001f2a4 	.word	0x0001f2a4
   110e8:	337055bf 	.word	0x337055bf
   110ec:	338eda3f 	.word	0x338eda3f
   110f0:	33bca100 	.word	0x33bca100
   110f4:	33c5c8c0 	.word	0x33c5c8c0
   110f8:	33c74f5f 	.word	0x33c74f5f
   110fc:	33cef080 	.word	0x33cef080
   11100:	33d1fdbf 	.word	0x33d1fdbf
   11104:	33d5ce50 	.word	0x33d5ce50
   11108:	33d6919f 	.word	0x33d6919f
   1110c:	33db2580 	.word	0x33db2580

00011110 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
   11110:	b580      	push	{r7, lr}
   11112:	b086      	sub	sp, #24
   11114:	af00      	add	r7, sp, #0
   11116:	60ba      	str	r2, [r7, #8]
   11118:	607b      	str	r3, [r7, #4]
   1111a:	230f      	movs	r3, #15
   1111c:	18fb      	adds	r3, r7, r3
   1111e:	1c02      	adds	r2, r0, #0
   11120:	701a      	strb	r2, [r3, #0]
   11122:	230e      	movs	r3, #14
   11124:	18fb      	adds	r3, r7, r3
   11126:	1c0a      	adds	r2, r1, #0
   11128:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
   1112a:	2317      	movs	r3, #23
   1112c:	18fb      	adds	r3, r7, r3
   1112e:	2200      	movs	r2, #0
   11130:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
   11132:	2316      	movs	r3, #22
   11134:	18fb      	adds	r3, r7, r3
   11136:	2200      	movs	r2, #0
   11138:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
   1113a:	2315      	movs	r3, #21
   1113c:	18fb      	adds	r3, r7, r3
   1113e:	2200      	movs	r2, #0
   11140:	701a      	strb	r2, [r3, #0]
   11142:	2314      	movs	r3, #20
   11144:	18fb      	adds	r3, r7, r3
   11146:	2200      	movs	r2, #0
   11148:	701a      	strb	r2, [r3, #0]
   1114a:	e0bc      	b.n	112c6 <CountNbOfEnabledChannels+0x1b6>
    {
        for( uint8_t j = 0; j < 16; j++ )
   1114c:	2313      	movs	r3, #19
   1114e:	18fb      	adds	r3, r7, r3
   11150:	2200      	movs	r2, #0
   11152:	701a      	strb	r2, [r3, #0]
   11154:	e0a3      	b.n	1129e <CountNbOfEnabledChannels+0x18e>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
   11156:	2314      	movs	r3, #20
   11158:	18fb      	adds	r3, r7, r3
   1115a:	781b      	ldrb	r3, [r3, #0]
   1115c:	005b      	lsls	r3, r3, #1
   1115e:	68ba      	ldr	r2, [r7, #8]
   11160:	18d3      	adds	r3, r2, r3
   11162:	881b      	ldrh	r3, [r3, #0]
   11164:	001a      	movs	r2, r3
   11166:	2313      	movs	r3, #19
   11168:	18fb      	adds	r3, r7, r3
   1116a:	781b      	ldrb	r3, [r3, #0]
   1116c:	411a      	asrs	r2, r3
   1116e:	0013      	movs	r3, r2
   11170:	2201      	movs	r2, #1
   11172:	4013      	ands	r3, r2
   11174:	d100      	bne.n	11178 <CountNbOfEnabledChannels+0x68>
   11176:	e08b      	b.n	11290 <CountNbOfEnabledChannels+0x180>
            {
                if( channels[i + j].Frequency == 0 )
   11178:	2315      	movs	r3, #21
   1117a:	18fb      	adds	r3, r7, r3
   1117c:	781a      	ldrb	r2, [r3, #0]
   1117e:	2313      	movs	r3, #19
   11180:	18fb      	adds	r3, r7, r3
   11182:	781b      	ldrb	r3, [r3, #0]
   11184:	18d3      	adds	r3, r2, r3
   11186:	001a      	movs	r2, r3
   11188:	0013      	movs	r3, r2
   1118a:	005b      	lsls	r3, r3, #1
   1118c:	189b      	adds	r3, r3, r2
   1118e:	009b      	lsls	r3, r3, #2
   11190:	001a      	movs	r2, r3
   11192:	687b      	ldr	r3, [r7, #4]
   11194:	189b      	adds	r3, r3, r2
   11196:	681b      	ldr	r3, [r3, #0]
   11198:	2b00      	cmp	r3, #0
   1119a:	d100      	bne.n	1119e <CountNbOfEnabledChannels+0x8e>
   1119c:	e073      	b.n	11286 <CountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
   1119e:	230f      	movs	r3, #15
   111a0:	18fb      	adds	r3, r7, r3
   111a2:	781b      	ldrb	r3, [r3, #0]
   111a4:	2201      	movs	r2, #1
   111a6:	4053      	eors	r3, r2
   111a8:	b2db      	uxtb	r3, r3
   111aa:	2b00      	cmp	r3, #0
   111ac:	d008      	beq.n	111c0 <CountNbOfEnabledChannels+0xb0>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
   111ae:	2313      	movs	r3, #19
   111b0:	18fb      	adds	r3, r7, r3
   111b2:	781b      	ldrb	r3, [r3, #0]
   111b4:	2207      	movs	r2, #7
   111b6:	411a      	asrs	r2, r3
   111b8:	0013      	movs	r3, r2
   111ba:	2201      	movs	r2, #1
   111bc:	4013      	ands	r3, r2
   111be:	d064      	beq.n	1128a <CountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
   111c0:	230e      	movs	r3, #14
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	2000      	movs	r0, #0
   111c6:	5618      	ldrsb	r0, [r3, r0]
   111c8:	2315      	movs	r3, #21
   111ca:	18fb      	adds	r3, r7, r3
   111cc:	781a      	ldrb	r2, [r3, #0]
   111ce:	2313      	movs	r3, #19
   111d0:	18fb      	adds	r3, r7, r3
   111d2:	781b      	ldrb	r3, [r3, #0]
   111d4:	18d3      	adds	r3, r2, r3
   111d6:	001a      	movs	r2, r3
   111d8:	0013      	movs	r3, r2
   111da:	005b      	lsls	r3, r3, #1
   111dc:	189b      	adds	r3, r3, r2
   111de:	009b      	lsls	r3, r3, #2
   111e0:	001a      	movs	r2, r3
   111e2:	687b      	ldr	r3, [r7, #4]
   111e4:	189b      	adds	r3, r3, r2
   111e6:	7a1b      	ldrb	r3, [r3, #8]
   111e8:	011b      	lsls	r3, r3, #4
   111ea:	b25b      	sxtb	r3, r3
   111ec:	111b      	asrs	r3, r3, #4
   111ee:	b25b      	sxtb	r3, r3
   111f0:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
   111f2:	2315      	movs	r3, #21
   111f4:	18fb      	adds	r3, r7, r3
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	2313      	movs	r3, #19
   111fa:	18fb      	adds	r3, r7, r3
   111fc:	781b      	ldrb	r3, [r3, #0]
   111fe:	18d3      	adds	r3, r2, r3
   11200:	001a      	movs	r2, r3
   11202:	0013      	movs	r3, r2
   11204:	005b      	lsls	r3, r3, #1
   11206:	189b      	adds	r3, r3, r2
   11208:	009b      	lsls	r3, r3, #2
   1120a:	001a      	movs	r2, r3
   1120c:	687b      	ldr	r3, [r7, #4]
   1120e:	189b      	adds	r3, r3, r2
   11210:	7a1b      	ldrb	r3, [r3, #8]
   11212:	b25b      	sxtb	r3, r3
   11214:	111b      	asrs	r3, r3, #4
   11216:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
   11218:	001a      	movs	r2, r3
   1121a:	4b34      	ldr	r3, [pc, #208]	; (112ec <CountNbOfEnabledChannels+0x1dc>)
   1121c:	4798      	blx	r3
   1121e:	1e03      	subs	r3, r0, #0
   11220:	d035      	beq.n	1128e <CountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
   11222:	2315      	movs	r3, #21
   11224:	18fb      	adds	r3, r7, r3
   11226:	781a      	ldrb	r2, [r3, #0]
   11228:	2313      	movs	r3, #19
   1122a:	18fb      	adds	r3, r7, r3
   1122c:	781b      	ldrb	r3, [r3, #0]
   1122e:	18d3      	adds	r3, r2, r3
   11230:	001a      	movs	r2, r3
   11232:	0013      	movs	r3, r2
   11234:	005b      	lsls	r3, r3, #1
   11236:	189b      	adds	r3, r3, r2
   11238:	009b      	lsls	r3, r3, #2
   1123a:	001a      	movs	r2, r3
   1123c:	687b      	ldr	r3, [r7, #4]
   1123e:	189b      	adds	r3, r3, r2
   11240:	7a5b      	ldrb	r3, [r3, #9]
   11242:	011b      	lsls	r3, r3, #4
   11244:	6a3a      	ldr	r2, [r7, #32]
   11246:	18d3      	adds	r3, r2, r3
   11248:	68db      	ldr	r3, [r3, #12]
   1124a:	2b00      	cmp	r3, #0
   1124c:	d007      	beq.n	1125e <CountNbOfEnabledChannels+0x14e>
                { // Check if the band is available for transmission
                    delayTransmission++;
   1124e:	2316      	movs	r3, #22
   11250:	18fb      	adds	r3, r7, r3
   11252:	781a      	ldrb	r2, [r3, #0]
   11254:	2316      	movs	r3, #22
   11256:	18fb      	adds	r3, r7, r3
   11258:	3201      	adds	r2, #1
   1125a:	701a      	strb	r2, [r3, #0]
                    continue;
   1125c:	e018      	b.n	11290 <CountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
   1125e:	2317      	movs	r3, #23
   11260:	18fb      	adds	r3, r7, r3
   11262:	781b      	ldrb	r3, [r3, #0]
   11264:	2217      	movs	r2, #23
   11266:	18ba      	adds	r2, r7, r2
   11268:	1c59      	adds	r1, r3, #1
   1126a:	7011      	strb	r1, [r2, #0]
   1126c:	001a      	movs	r2, r3
   1126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11270:	189b      	adds	r3, r3, r2
   11272:	2215      	movs	r2, #21
   11274:	18b9      	adds	r1, r7, r2
   11276:	2213      	movs	r2, #19
   11278:	18ba      	adds	r2, r7, r2
   1127a:	7809      	ldrb	r1, [r1, #0]
   1127c:	7812      	ldrb	r2, [r2, #0]
   1127e:	188a      	adds	r2, r1, r2
   11280:	b2d2      	uxtb	r2, r2
   11282:	701a      	strb	r2, [r3, #0]
   11284:	e004      	b.n	11290 <CountNbOfEnabledChannels+0x180>
                    continue;
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	e002      	b.n	11290 <CountNbOfEnabledChannels+0x180>
                        continue;
   1128a:	46c0      	nop			; (mov r8, r8)
   1128c:	e000      	b.n	11290 <CountNbOfEnabledChannels+0x180>
                    continue;
   1128e:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
   11290:	2313      	movs	r3, #19
   11292:	18fb      	adds	r3, r7, r3
   11294:	781a      	ldrb	r2, [r3, #0]
   11296:	2313      	movs	r3, #19
   11298:	18fb      	adds	r3, r7, r3
   1129a:	3201      	adds	r2, #1
   1129c:	701a      	strb	r2, [r3, #0]
   1129e:	2313      	movs	r3, #19
   112a0:	18fb      	adds	r3, r7, r3
   112a2:	781b      	ldrb	r3, [r3, #0]
   112a4:	2b0f      	cmp	r3, #15
   112a6:	d800      	bhi.n	112aa <CountNbOfEnabledChannels+0x19a>
   112a8:	e755      	b.n	11156 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
   112aa:	2315      	movs	r3, #21
   112ac:	18fb      	adds	r3, r7, r3
   112ae:	2215      	movs	r2, #21
   112b0:	18ba      	adds	r2, r7, r2
   112b2:	7812      	ldrb	r2, [r2, #0]
   112b4:	3210      	adds	r2, #16
   112b6:	701a      	strb	r2, [r3, #0]
   112b8:	2314      	movs	r3, #20
   112ba:	18fb      	adds	r3, r7, r3
   112bc:	781a      	ldrb	r2, [r3, #0]
   112be:	2314      	movs	r3, #20
   112c0:	18fb      	adds	r3, r7, r3
   112c2:	3201      	adds	r2, #1
   112c4:	701a      	strb	r2, [r3, #0]
   112c6:	2315      	movs	r3, #21
   112c8:	18fb      	adds	r3, r7, r3
   112ca:	781b      	ldrb	r3, [r3, #0]
   112cc:	2b0f      	cmp	r3, #15
   112ce:	d800      	bhi.n	112d2 <CountNbOfEnabledChannels+0x1c2>
   112d0:	e73c      	b.n	1114c <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
   112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   112d4:	2216      	movs	r2, #22
   112d6:	18ba      	adds	r2, r7, r2
   112d8:	7812      	ldrb	r2, [r2, #0]
   112da:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
   112dc:	2317      	movs	r3, #23
   112de:	18fb      	adds	r3, r7, r3
   112e0:	781b      	ldrb	r3, [r3, #0]
}
   112e2:	0018      	movs	r0, r3
   112e4:	46bd      	mov	sp, r7
   112e6:	b006      	add	sp, #24
   112e8:	bd80      	pop	{r7, pc}
   112ea:	46c0      	nop			; (mov r8, r8)
   112ec:	00010559 	.word	0x00010559

000112f0 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
   112f0:	b580      	push	{r7, lr}
   112f2:	b084      	sub	sp, #16
   112f4:	af00      	add	r7, sp, #0
   112f6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
   112f8:	2308      	movs	r3, #8
   112fa:	18fb      	adds	r3, r7, r3
   112fc:	2200      	movs	r2, #0
   112fe:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
   11300:	687b      	ldr	r3, [r7, #4]
   11302:	781b      	ldrb	r3, [r3, #0]
   11304:	2b34      	cmp	r3, #52	; 0x34
   11306:	d900      	bls.n	1130a <RegionEU868GetPhyParam+0x1a>
   11308:	e0d0      	b.n	114ac <RegionEU868GetPhyParam+0x1bc>
   1130a:	009a      	lsls	r2, r3, #2
   1130c:	4b6f      	ldr	r3, [pc, #444]	; (114cc <RegionEU868GetPhyParam+0x1dc>)
   1130e:	18d3      	adds	r3, r2, r3
   11310:	681b      	ldr	r3, [r3, #0]
   11312:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
   11314:	2308      	movs	r3, #8
   11316:	18fb      	adds	r3, r7, r3
   11318:	2200      	movs	r2, #0
   1131a:	601a      	str	r2, [r3, #0]
            break;
   1131c:	e0c7      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
   1131e:	2308      	movs	r3, #8
   11320:	18fb      	adds	r3, r7, r3
   11322:	2200      	movs	r2, #0
   11324:	601a      	str	r2, [r3, #0]
            break;
   11326:	e0c2      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
   11328:	2308      	movs	r3, #8
   1132a:	18fb      	adds	r3, r7, r3
   1132c:	2200      	movs	r2, #0
   1132e:	601a      	str	r2, [r3, #0]
            break;
   11330:	e0bd      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
   11332:	687b      	ldr	r3, [r7, #4]
   11334:	785b      	ldrb	r3, [r3, #1]
   11336:	b25b      	sxtb	r3, r3
   11338:	2100      	movs	r1, #0
   1133a:	0018      	movs	r0, r3
   1133c:	4b64      	ldr	r3, [pc, #400]	; (114d0 <RegionEU868GetPhyParam+0x1e0>)
   1133e:	4798      	blx	r3
   11340:	0003      	movs	r3, r0
   11342:	001a      	movs	r2, r3
   11344:	2308      	movs	r3, #8
   11346:	18fb      	adds	r3, r7, r3
   11348:	601a      	str	r2, [r3, #0]
            break;
   1134a:	e0b0      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
   1134c:	2308      	movs	r3, #8
   1134e:	18fb      	adds	r3, r7, r3
   11350:	2200      	movs	r2, #0
   11352:	601a      	str	r2, [r3, #0]
            break;
   11354:	e0ab      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
   11356:	2308      	movs	r3, #8
   11358:	18fb      	adds	r3, r7, r3
   1135a:	2200      	movs	r2, #0
   1135c:	601a      	str	r2, [r3, #0]
            break;
   1135e:	e0a6      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
   11360:	2308      	movs	r3, #8
   11362:	18fb      	adds	r3, r7, r3
   11364:	2240      	movs	r2, #64	; 0x40
   11366:	601a      	str	r2, [r3, #0]
            break;
   11368:	e0a1      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
   1136a:	2308      	movs	r3, #8
   1136c:	18fb      	adds	r3, r7, r3
   1136e:	2220      	movs	r2, #32
   11370:	601a      	str	r2, [r3, #0]
            break;
   11372:	e09c      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
   11374:	687b      	ldr	r3, [r7, #4]
   11376:	785b      	ldrb	r3, [r3, #1]
   11378:	b25b      	sxtb	r3, r3
   1137a:	001a      	movs	r2, r3
   1137c:	4b55      	ldr	r3, [pc, #340]	; (114d4 <RegionEU868GetPhyParam+0x1e4>)
   1137e:	5c9b      	ldrb	r3, [r3, r2]
   11380:	001a      	movs	r2, r3
   11382:	2308      	movs	r3, #8
   11384:	18fb      	adds	r3, r7, r3
   11386:	601a      	str	r2, [r3, #0]
            break;
   11388:	e091      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
   1138a:	687b      	ldr	r3, [r7, #4]
   1138c:	785b      	ldrb	r3, [r3, #1]
   1138e:	b25b      	sxtb	r3, r3
   11390:	001a      	movs	r2, r3
   11392:	4b51      	ldr	r3, [pc, #324]	; (114d8 <RegionEU868GetPhyParam+0x1e8>)
   11394:	5c9b      	ldrb	r3, [r3, r2]
   11396:	001a      	movs	r2, r3
   11398:	2308      	movs	r3, #8
   1139a:	18fb      	adds	r3, r7, r3
   1139c:	601a      	str	r2, [r3, #0]
            break;
   1139e:	e086      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
   113a0:	2308      	movs	r3, #8
   113a2:	18fb      	adds	r3, r7, r3
   113a4:	2201      	movs	r2, #1
   113a6:	601a      	str	r2, [r3, #0]
            break;
   113a8:	e081      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
   113aa:	2308      	movs	r3, #8
   113ac:	18fb      	adds	r3, r7, r3
   113ae:	4a4b      	ldr	r2, [pc, #300]	; (114dc <RegionEU868GetPhyParam+0x1ec>)
   113b0:	601a      	str	r2, [r3, #0]
            break;
   113b2:	e07c      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
   113b4:	2308      	movs	r3, #8
   113b6:	18fb      	adds	r3, r7, r3
   113b8:	22fa      	movs	r2, #250	; 0xfa
   113ba:	0092      	lsls	r2, r2, #2
   113bc:	601a      	str	r2, [r3, #0]
            break;
   113be:	e076      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
   113c0:	2308      	movs	r3, #8
   113c2:	18fb      	adds	r3, r7, r3
   113c4:	22fa      	movs	r2, #250	; 0xfa
   113c6:	00d2      	lsls	r2, r2, #3
   113c8:	601a      	str	r2, [r3, #0]
            break;
   113ca:	e070      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
   113cc:	2308      	movs	r3, #8
   113ce:	18fb      	adds	r3, r7, r3
   113d0:	4a43      	ldr	r2, [pc, #268]	; (114e0 <RegionEU868GetPhyParam+0x1f0>)
   113d2:	601a      	str	r2, [r3, #0]
            break;
   113d4:	e06b      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
   113d6:	2308      	movs	r3, #8
   113d8:	18fb      	adds	r3, r7, r3
   113da:	4a42      	ldr	r2, [pc, #264]	; (114e4 <RegionEU868GetPhyParam+0x1f4>)
   113dc:	601a      	str	r2, [r3, #0]
            break;
   113de:	e066      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
   113e0:	2308      	movs	r3, #8
   113e2:	18fb      	adds	r3, r7, r3
   113e4:	2280      	movs	r2, #128	; 0x80
   113e6:	01d2      	lsls	r2, r2, #7
   113e8:	601a      	str	r2, [r3, #0]
            break;
   113ea:	e060      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
   113ec:	23fa      	movs	r3, #250	; 0xfa
   113ee:	009b      	lsls	r3, r3, #2
   113f0:	4a3d      	ldr	r2, [pc, #244]	; (114e8 <RegionEU868GetPhyParam+0x1f8>)
   113f2:	0019      	movs	r1, r3
   113f4:	0010      	movs	r0, r2
   113f6:	4b3d      	ldr	r3, [pc, #244]	; (114ec <RegionEU868GetPhyParam+0x1fc>)
   113f8:	4798      	blx	r3
   113fa:	0003      	movs	r3, r0
   113fc:	22fa      	movs	r2, #250	; 0xfa
   113fe:	00d2      	lsls	r2, r2, #3
   11400:	4694      	mov	ip, r2
   11402:	4463      	add	r3, ip
   11404:	001a      	movs	r2, r3
   11406:	2308      	movs	r3, #8
   11408:	18fb      	adds	r3, r7, r3
   1140a:	601a      	str	r2, [r3, #0]
            break;
   1140c:	e04f      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
   1140e:	2308      	movs	r3, #8
   11410:	18fb      	adds	r3, r7, r3
   11412:	2200      	movs	r2, #0
   11414:	601a      	str	r2, [r3, #0]
            break;
   11416:	e04a      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
   11418:	2308      	movs	r3, #8
   1141a:	18fb      	adds	r3, r7, r3
   1141c:	4a34      	ldr	r2, [pc, #208]	; (114f0 <RegionEU868GetPhyParam+0x200>)
   1141e:	601a      	str	r2, [r3, #0]
            break;
   11420:	e045      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
   11422:	2308      	movs	r3, #8
   11424:	18fb      	adds	r3, r7, r3
   11426:	2200      	movs	r2, #0
   11428:	601a      	str	r2, [r3, #0]
            break;
   1142a:	e040      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
   1142c:	2308      	movs	r3, #8
   1142e:	18fb      	adds	r3, r7, r3
   11430:	4a30      	ldr	r2, [pc, #192]	; (114f4 <RegionEU868GetPhyParam+0x204>)
   11432:	601a      	str	r2, [r3, #0]
            break;
   11434:	e03b      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
   11436:	2308      	movs	r3, #8
   11438:	18fb      	adds	r3, r7, r3
   1143a:	4a2f      	ldr	r2, [pc, #188]	; (114f8 <RegionEU868GetPhyParam+0x208>)
   1143c:	601a      	str	r2, [r3, #0]
            break;
   1143e:	e036      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
   11440:	2308      	movs	r3, #8
   11442:	18fb      	adds	r3, r7, r3
   11444:	2210      	movs	r2, #16
   11446:	601a      	str	r2, [r3, #0]
            break;
   11448:	e031      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
   1144a:	2308      	movs	r3, #8
   1144c:	18fb      	adds	r3, r7, r3
   1144e:	4a2b      	ldr	r2, [pc, #172]	; (114fc <RegionEU868GetPhyParam+0x20c>)
   11450:	601a      	str	r2, [r3, #0]
            break;
   11452:	e02c      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
   11454:	2308      	movs	r3, #8
   11456:	18fb      	adds	r3, r7, r3
   11458:	2200      	movs	r2, #0
   1145a:	601a      	str	r2, [r3, #0]
            break;
   1145c:	e027      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
   1145e:	2308      	movs	r3, #8
   11460:	18fb      	adds	r3, r7, r3
   11462:	2283      	movs	r2, #131	; 0x83
   11464:	05d2      	lsls	r2, r2, #23
   11466:	601a      	str	r2, [r3, #0]
            break;
   11468:	e021      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   1146a:	2308      	movs	r3, #8
   1146c:	18fb      	adds	r3, r7, r3
   1146e:	4a24      	ldr	r2, [pc, #144]	; (11500 <RegionEU868GetPhyParam+0x210>)
   11470:	601a      	str	r2, [r3, #0]
            break;
   11472:	e01c      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
   11474:	2308      	movs	r3, #8
   11476:	18fb      	adds	r3, r7, r3
   11478:	4a1d      	ldr	r2, [pc, #116]	; (114f0 <RegionEU868GetPhyParam+0x200>)
   1147a:	601a      	str	r2, [r3, #0]
            break;
   1147c:	e017      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
   1147e:	2308      	movs	r3, #8
   11480:	18fb      	adds	r3, r7, r3
   11482:	2211      	movs	r2, #17
   11484:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
   11486:	2308      	movs	r3, #8
   11488:	18fb      	adds	r3, r7, r3
   1148a:	2202      	movs	r2, #2
   1148c:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
   1148e:	2308      	movs	r3, #8
   11490:	18fb      	adds	r3, r7, r3
   11492:	2200      	movs	r2, #0
   11494:	709a      	strb	r2, [r3, #2]
            break;
   11496:	e00a      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
   11498:	2308      	movs	r3, #8
   1149a:	18fb      	adds	r3, r7, r3
   1149c:	2203      	movs	r2, #3
   1149e:	601a      	str	r2, [r3, #0]
            break;
   114a0:	e005      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
   114a2:	2308      	movs	r3, #8
   114a4:	18fb      	adds	r3, r7, r3
   114a6:	2203      	movs	r2, #3
   114a8:	601a      	str	r2, [r3, #0]
            break;
   114aa:	e000      	b.n	114ae <RegionEU868GetPhyParam+0x1be>
        }
        default:
        {
            break;
   114ac:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
   114ae:	230c      	movs	r3, #12
   114b0:	18fb      	adds	r3, r7, r3
   114b2:	2208      	movs	r2, #8
   114b4:	18ba      	adds	r2, r7, r2
   114b6:	6812      	ldr	r2, [r2, #0]
   114b8:	601a      	str	r2, [r3, #0]
   114ba:	230c      	movs	r3, #12
   114bc:	18fb      	adds	r3, r7, r3
   114be:	2200      	movs	r2, #0
   114c0:	681a      	ldr	r2, [r3, #0]
   114c2:	0013      	movs	r3, r2
}
   114c4:	0018      	movs	r0, r3
   114c6:	46bd      	mov	sp, r7
   114c8:	b004      	add	sp, #16
   114ca:	bd80      	pop	{r7, pc}
   114cc:	0001f6cc 	.word	0x0001f6cc
   114d0:	00010f3d 	.word	0x00010f3d
   114d4:	0001f6bc 	.word	0x0001f6bc
   114d8:	0001f6c4 	.word	0x0001f6c4
   114dc:	00000bb8 	.word	0x00000bb8
   114e0:	00001388 	.word	0x00001388
   114e4:	00001770 	.word	0x00001770
   114e8:	fffffc18 	.word	0xfffffc18
   114ec:	00004305 	.word	0x00004305
   114f0:	33d3e608 	.word	0x33d3e608
   114f4:	2000163c 	.word	0x2000163c
   114f8:	2000163e 	.word	0x2000163e
   114fc:	2000152c 	.word	0x2000152c
   11500:	4009999a 	.word	0x4009999a

00011504 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
   11504:	b580      	push	{r7, lr}
   11506:	b082      	sub	sp, #8
   11508:	af00      	add	r7, sp, #0
   1150a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
   1150c:	687b      	ldr	r3, [r7, #4]
   1150e:	7858      	ldrb	r0, [r3, #1]
   11510:	687b      	ldr	r3, [r7, #4]
   11512:	781b      	ldrb	r3, [r3, #0]
   11514:	0019      	movs	r1, r3
   11516:	4a0a      	ldr	r2, [pc, #40]	; (11540 <RegionEU868SetBandTxDone+0x3c>)
   11518:	000b      	movs	r3, r1
   1151a:	005b      	lsls	r3, r3, #1
   1151c:	185b      	adds	r3, r3, r1
   1151e:	009b      	lsls	r3, r3, #2
   11520:	18d3      	adds	r3, r2, r3
   11522:	3309      	adds	r3, #9
   11524:	781b      	ldrb	r3, [r3, #0]
   11526:	330c      	adds	r3, #12
   11528:	011a      	lsls	r2, r3, #4
   1152a:	4b05      	ldr	r3, [pc, #20]	; (11540 <RegionEU868SetBandTxDone+0x3c>)
   1152c:	18d1      	adds	r1, r2, r3
   1152e:	687b      	ldr	r3, [r7, #4]
   11530:	685b      	ldr	r3, [r3, #4]
   11532:	001a      	movs	r2, r3
   11534:	4b03      	ldr	r3, [pc, #12]	; (11544 <RegionEU868SetBandTxDone+0x40>)
   11536:	4798      	blx	r3
}
   11538:	46c0      	nop			; (mov r8, r8)
   1153a:	46bd      	mov	sp, r7
   1153c:	b002      	add	sp, #8
   1153e:	bd80      	pop	{r7, pc}
   11540:	2000152c 	.word	0x2000152c
   11544:	0001071d 	.word	0x0001071d

00011548 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
   11548:	b590      	push	{r4, r7, lr}
   1154a:	b097      	sub	sp, #92	; 0x5c
   1154c:	af00      	add	r7, sp, #0
   1154e:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
   11550:	2308      	movs	r3, #8
   11552:	18fb      	adds	r3, r7, r3
   11554:	0018      	movs	r0, r3
   11556:	2350      	movs	r3, #80	; 0x50
   11558:	001a      	movs	r2, r3
   1155a:	2100      	movs	r1, #0
   1155c:	4b36      	ldr	r3, [pc, #216]	; (11638 <RegionEU868InitDefaults+0xf0>)
   1155e:	4798      	blx	r3
   11560:	2308      	movs	r3, #8
   11562:	18fb      	adds	r3, r7, r3
   11564:	2264      	movs	r2, #100	; 0x64
   11566:	801a      	strh	r2, [r3, #0]
   11568:	2308      	movs	r3, #8
   1156a:	18fb      	adds	r3, r7, r3
   1156c:	2264      	movs	r2, #100	; 0x64
   1156e:	821a      	strh	r2, [r3, #16]
   11570:	2308      	movs	r3, #8
   11572:	18fb      	adds	r3, r7, r3
   11574:	22fa      	movs	r2, #250	; 0xfa
   11576:	0092      	lsls	r2, r2, #2
   11578:	841a      	strh	r2, [r3, #32]
   1157a:	2308      	movs	r3, #8
   1157c:	18fb      	adds	r3, r7, r3
   1157e:	220a      	movs	r2, #10
   11580:	861a      	strh	r2, [r3, #48]	; 0x30
   11582:	2308      	movs	r3, #8
   11584:	18fb      	adds	r3, r7, r3
   11586:	2240      	movs	r2, #64	; 0x40
   11588:	2164      	movs	r1, #100	; 0x64
   1158a:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
   1158c:	687b      	ldr	r3, [r7, #4]
   1158e:	791b      	ldrb	r3, [r3, #4]
   11590:	2b01      	cmp	r3, #1
   11592:	d036      	beq.n	11602 <RegionEU868InitDefaults+0xba>
   11594:	dc02      	bgt.n	1159c <RegionEU868InitDefaults+0x54>
   11596:	2b00      	cmp	r3, #0
   11598:	d005      	beq.n	115a6 <RegionEU868InitDefaults+0x5e>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
            break;
        }
        default:
        {
            break;
   1159a:	e049      	b.n	11630 <RegionEU868InitDefaults+0xe8>
    switch( params->Type )
   1159c:	2b02      	cmp	r3, #2
   1159e:	d03f      	beq.n	11620 <RegionEU868InitDefaults+0xd8>
   115a0:	2b03      	cmp	r3, #3
   115a2:	d021      	beq.n	115e8 <RegionEU868InitDefaults+0xa0>
            break;
   115a4:	e044      	b.n	11630 <RegionEU868InitDefaults+0xe8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   115a6:	2308      	movs	r3, #8
   115a8:	18f9      	adds	r1, r7, r3
   115aa:	4b24      	ldr	r3, [pc, #144]	; (1163c <RegionEU868InitDefaults+0xf4>)
   115ac:	2250      	movs	r2, #80	; 0x50
   115ae:	0018      	movs	r0, r3
   115b0:	4b23      	ldr	r3, [pc, #140]	; (11640 <RegionEU868InitDefaults+0xf8>)
   115b2:	4798      	blx	r3
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
   115b4:	4b23      	ldr	r3, [pc, #140]	; (11644 <RegionEU868InitDefaults+0xfc>)
   115b6:	4a24      	ldr	r2, [pc, #144]	; (11648 <RegionEU868InitDefaults+0x100>)
   115b8:	ca13      	ldmia	r2!, {r0, r1, r4}
   115ba:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
   115bc:	4b21      	ldr	r3, [pc, #132]	; (11644 <RegionEU868InitDefaults+0xfc>)
   115be:	4a23      	ldr	r2, [pc, #140]	; (1164c <RegionEU868InitDefaults+0x104>)
   115c0:	330c      	adds	r3, #12
   115c2:	ca13      	ldmia	r2!, {r0, r1, r4}
   115c4:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
   115c6:	4b1f      	ldr	r3, [pc, #124]	; (11644 <RegionEU868InitDefaults+0xfc>)
   115c8:	4a21      	ldr	r2, [pc, #132]	; (11650 <RegionEU868InitDefaults+0x108>)
   115ca:	3318      	adds	r3, #24
   115cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   115ce:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   115d0:	4a1c      	ldr	r2, [pc, #112]	; (11644 <RegionEU868InitDefaults+0xfc>)
   115d2:	2389      	movs	r3, #137	; 0x89
   115d4:	005b      	lsls	r3, r3, #1
   115d6:	2107      	movs	r1, #7
   115d8:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
   115da:	491e      	ldr	r1, [pc, #120]	; (11654 <RegionEU868InitDefaults+0x10c>)
   115dc:	4b1e      	ldr	r3, [pc, #120]	; (11658 <RegionEU868InitDefaults+0x110>)
   115de:	2201      	movs	r2, #1
   115e0:	0018      	movs	r0, r3
   115e2:	4b1e      	ldr	r3, [pc, #120]	; (1165c <RegionEU868InitDefaults+0x114>)
   115e4:	4798      	blx	r3
            break;
   115e6:	e023      	b.n	11630 <RegionEU868InitDefaults+0xe8>
            if( params->NvmCtx != 0 )
   115e8:	687b      	ldr	r3, [r7, #4]
   115ea:	681b      	ldr	r3, [r3, #0]
   115ec:	2b00      	cmp	r3, #0
   115ee:	d01e      	beq.n	1162e <RegionEU868InitDefaults+0xe6>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
   115f0:	687b      	ldr	r3, [r7, #4]
   115f2:	6819      	ldr	r1, [r3, #0]
   115f4:	238a      	movs	r3, #138	; 0x8a
   115f6:	005a      	lsls	r2, r3, #1
   115f8:	4b12      	ldr	r3, [pc, #72]	; (11644 <RegionEU868InitDefaults+0xfc>)
   115fa:	0018      	movs	r0, r3
   115fc:	4b10      	ldr	r3, [pc, #64]	; (11640 <RegionEU868InitDefaults+0xf8>)
   115fe:	4798      	blx	r3
            break;
   11600:	e015      	b.n	1162e <RegionEU868InitDefaults+0xe6>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
   11602:	4a10      	ldr	r2, [pc, #64]	; (11644 <RegionEU868InitDefaults+0xfc>)
   11604:	2388      	movs	r3, #136	; 0x88
   11606:	005b      	lsls	r3, r3, #1
   11608:	5ad2      	ldrh	r2, [r2, r3]
   1160a:	490e      	ldr	r1, [pc, #56]	; (11644 <RegionEU868InitDefaults+0xfc>)
   1160c:	2389      	movs	r3, #137	; 0x89
   1160e:	005b      	lsls	r3, r3, #1
   11610:	5acb      	ldrh	r3, [r1, r3]
   11612:	4313      	orrs	r3, r2
   11614:	b299      	uxth	r1, r3
   11616:	4a0b      	ldr	r2, [pc, #44]	; (11644 <RegionEU868InitDefaults+0xfc>)
   11618:	2388      	movs	r3, #136	; 0x88
   1161a:	005b      	lsls	r3, r3, #1
   1161c:	52d1      	strh	r1, [r2, r3]
            break;
   1161e:	e007      	b.n	11630 <RegionEU868InitDefaults+0xe8>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
   11620:	490c      	ldr	r1, [pc, #48]	; (11654 <RegionEU868InitDefaults+0x10c>)
   11622:	4b0d      	ldr	r3, [pc, #52]	; (11658 <RegionEU868InitDefaults+0x110>)
   11624:	2201      	movs	r2, #1
   11626:	0018      	movs	r0, r3
   11628:	4b0c      	ldr	r3, [pc, #48]	; (1165c <RegionEU868InitDefaults+0x114>)
   1162a:	4798      	blx	r3
            break;
   1162c:	e000      	b.n	11630 <RegionEU868InitDefaults+0xe8>
            break;
   1162e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   11630:	46c0      	nop			; (mov r8, r8)
   11632:	46bd      	mov	sp, r7
   11634:	b017      	add	sp, #92	; 0x5c
   11636:	bd90      	pop	{r4, r7, pc}
   11638:	00019be9 	.word	0x00019be9
   1163c:	200015ec 	.word	0x200015ec
   11640:	00004339 	.word	0x00004339
   11644:	2000152c 	.word	0x2000152c
   11648:	0001f7a0 	.word	0x0001f7a0
   1164c:	0001f7ac 	.word	0x0001f7ac
   11650:	0001f7b8 	.word	0x0001f7b8
   11654:	2000163e 	.word	0x2000163e
   11658:	2000163c 	.word	0x2000163c
   1165c:	000106b9 	.word	0x000106b9

00011660 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
   11660:	b580      	push	{r7, lr}
   11662:	b082      	sub	sp, #8
   11664:	af00      	add	r7, sp, #0
   11666:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
   11668:	687b      	ldr	r3, [r7, #4]
   1166a:	228a      	movs	r2, #138	; 0x8a
   1166c:	0052      	lsls	r2, r2, #1
   1166e:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
   11670:	4b02      	ldr	r3, [pc, #8]	; (1167c <RegionEU868GetNvmCtx+0x1c>)
}
   11672:	0018      	movs	r0, r3
   11674:	46bd      	mov	sp, r7
   11676:	b002      	add	sp, #8
   11678:	bd80      	pop	{r7, pc}
   1167a:	46c0      	nop			; (mov r8, r8)
   1167c:	2000152c 	.word	0x2000152c

00011680 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
   11680:	b580      	push	{r7, lr}
   11682:	b082      	sub	sp, #8
   11684:	af00      	add	r7, sp, #0
   11686:	6078      	str	r0, [r7, #4]
   11688:	000a      	movs	r2, r1
   1168a:	1cfb      	adds	r3, r7, #3
   1168c:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
   1168e:	1cfb      	adds	r3, r7, #3
   11690:	781b      	ldrb	r3, [r3, #0]
   11692:	3b04      	subs	r3, #4
   11694:	2b0a      	cmp	r3, #10
   11696:	d83a      	bhi.n	1170e <RegionEU868Verify+0x8e>
   11698:	009a      	lsls	r2, r3, #2
   1169a:	4b1f      	ldr	r3, [pc, #124]	; (11718 <RegionEU868Verify+0x98>)
   1169c:	18d3      	adds	r3, r2, r3
   1169e:	681b      	ldr	r3, [r3, #0]
   116a0:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
   116a2:	687b      	ldr	r3, [r7, #4]
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	b25b      	sxtb	r3, r3
   116a8:	2207      	movs	r2, #7
   116aa:	2100      	movs	r1, #0
   116ac:	0018      	movs	r0, r3
   116ae:	4b1b      	ldr	r3, [pc, #108]	; (1171c <RegionEU868Verify+0x9c>)
   116b0:	4798      	blx	r3
   116b2:	0003      	movs	r3, r0
   116b4:	1e5a      	subs	r2, r3, #1
   116b6:	4193      	sbcs	r3, r2
   116b8:	b2db      	uxtb	r3, r3
   116ba:	e029      	b.n	11710 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
   116bc:	687b      	ldr	r3, [r7, #4]
   116be:	781b      	ldrb	r3, [r3, #0]
   116c0:	b25b      	sxtb	r3, r3
   116c2:	2205      	movs	r2, #5
   116c4:	2100      	movs	r1, #0
   116c6:	0018      	movs	r0, r3
   116c8:	4b14      	ldr	r3, [pc, #80]	; (1171c <RegionEU868Verify+0x9c>)
   116ca:	4798      	blx	r3
   116cc:	0003      	movs	r3, r0
   116ce:	1e5a      	subs	r2, r3, #1
   116d0:	4193      	sbcs	r3, r2
   116d2:	b2db      	uxtb	r3, r3
   116d4:	e01c      	b.n	11710 <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
   116d6:	687b      	ldr	r3, [r7, #4]
   116d8:	781b      	ldrb	r3, [r3, #0]
   116da:	b25b      	sxtb	r3, r3
   116dc:	2207      	movs	r2, #7
   116de:	2100      	movs	r1, #0
   116e0:	0018      	movs	r0, r3
   116e2:	4b0e      	ldr	r3, [pc, #56]	; (1171c <RegionEU868Verify+0x9c>)
   116e4:	4798      	blx	r3
   116e6:	0003      	movs	r3, r0
   116e8:	1e5a      	subs	r2, r3, #1
   116ea:	4193      	sbcs	r3, r2
   116ec:	b2db      	uxtb	r3, r3
   116ee:	e00f      	b.n	11710 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
   116f0:	687b      	ldr	r3, [r7, #4]
   116f2:	781b      	ldrb	r3, [r3, #0]
   116f4:	b25b      	sxtb	r3, r3
   116f6:	2207      	movs	r2, #7
   116f8:	2100      	movs	r1, #0
   116fa:	0018      	movs	r0, r3
   116fc:	4b07      	ldr	r3, [pc, #28]	; (1171c <RegionEU868Verify+0x9c>)
   116fe:	4798      	blx	r3
   11700:	0003      	movs	r3, r0
   11702:	1e5a      	subs	r2, r3, #1
   11704:	4193      	sbcs	r3, r2
   11706:	b2db      	uxtb	r3, r3
   11708:	e002      	b.n	11710 <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
   1170a:	2301      	movs	r3, #1
   1170c:	e000      	b.n	11710 <RegionEU868Verify+0x90>
        }
        default:
            return false;
   1170e:	2300      	movs	r3, #0
    }
}
   11710:	0018      	movs	r0, r3
   11712:	46bd      	mov	sp, r7
   11714:	b002      	add	sp, #8
   11716:	bd80      	pop	{r7, pc}
   11718:	0001f7c4 	.word	0x0001f7c4
   1171c:	00010559 	.word	0x00010559

00011720 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
   11720:	b580      	push	{r7, lr}
   11722:	b08a      	sub	sp, #40	; 0x28
   11724:	af00      	add	r7, sp, #0
   11726:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   11728:	2318      	movs	r3, #24
   1172a:	18fb      	adds	r3, r7, r3
   1172c:	2250      	movs	r2, #80	; 0x50
   1172e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
   11730:	687b      	ldr	r3, [r7, #4]
   11732:	791b      	ldrb	r3, [r3, #4]
   11734:	2b10      	cmp	r3, #16
   11736:	d000      	beq.n	1173a <RegionEU868ApplyCFList+0x1a>
   11738:	e08d      	b.n	11856 <RegionEU868ApplyCFList+0x136>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
   1173a:	687b      	ldr	r3, [r7, #4]
   1173c:	681b      	ldr	r3, [r3, #0]
   1173e:	330f      	adds	r3, #15
   11740:	781b      	ldrb	r3, [r3, #0]
   11742:	2b00      	cmp	r3, #0
   11744:	d000      	beq.n	11748 <RegionEU868ApplyCFList+0x28>
   11746:	e088      	b.n	1185a <RegionEU868ApplyCFList+0x13a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   11748:	2327      	movs	r3, #39	; 0x27
   1174a:	18fb      	adds	r3, r7, r3
   1174c:	2200      	movs	r2, #0
   1174e:	701a      	strb	r2, [r3, #0]
   11750:	2326      	movs	r3, #38	; 0x26
   11752:	18fb      	adds	r3, r7, r3
   11754:	2203      	movs	r2, #3
   11756:	701a      	strb	r2, [r3, #0]
   11758:	e077      	b.n	1184a <RegionEU868ApplyCFList+0x12a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
   1175a:	2326      	movs	r3, #38	; 0x26
   1175c:	18fb      	adds	r3, r7, r3
   1175e:	781b      	ldrb	r3, [r3, #0]
   11760:	2b07      	cmp	r3, #7
   11762:	d837      	bhi.n	117d4 <RegionEU868ApplyCFList+0xb4>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   11764:	687b      	ldr	r3, [r7, #4]
   11766:	681a      	ldr	r2, [r3, #0]
   11768:	2327      	movs	r3, #39	; 0x27
   1176a:	18fb      	adds	r3, r7, r3
   1176c:	781b      	ldrb	r3, [r3, #0]
   1176e:	18d3      	adds	r3, r2, r3
   11770:	781b      	ldrb	r3, [r3, #0]
   11772:	001a      	movs	r2, r3
   11774:	2318      	movs	r3, #24
   11776:	18fb      	adds	r3, r7, r3
   11778:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   1177a:	2318      	movs	r3, #24
   1177c:	18fb      	adds	r3, r7, r3
   1177e:	681a      	ldr	r2, [r3, #0]
   11780:	687b      	ldr	r3, [r7, #4]
   11782:	6819      	ldr	r1, [r3, #0]
   11784:	2327      	movs	r3, #39	; 0x27
   11786:	18fb      	adds	r3, r7, r3
   11788:	781b      	ldrb	r3, [r3, #0]
   1178a:	3301      	adds	r3, #1
   1178c:	18cb      	adds	r3, r1, r3
   1178e:	781b      	ldrb	r3, [r3, #0]
   11790:	021b      	lsls	r3, r3, #8
   11792:	431a      	orrs	r2, r3
   11794:	2318      	movs	r3, #24
   11796:	18fb      	adds	r3, r7, r3
   11798:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
   1179a:	2318      	movs	r3, #24
   1179c:	18fb      	adds	r3, r7, r3
   1179e:	681a      	ldr	r2, [r3, #0]
   117a0:	687b      	ldr	r3, [r7, #4]
   117a2:	6819      	ldr	r1, [r3, #0]
   117a4:	2327      	movs	r3, #39	; 0x27
   117a6:	18fb      	adds	r3, r7, r3
   117a8:	781b      	ldrb	r3, [r3, #0]
   117aa:	3302      	adds	r3, #2
   117ac:	18cb      	adds	r3, r1, r3
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	041b      	lsls	r3, r3, #16
   117b2:	431a      	orrs	r2, r3
   117b4:	2318      	movs	r3, #24
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
   117ba:	2318      	movs	r3, #24
   117bc:	18fb      	adds	r3, r7, r3
   117be:	681b      	ldr	r3, [r3, #0]
   117c0:	2264      	movs	r2, #100	; 0x64
   117c2:	435a      	muls	r2, r3
   117c4:	2318      	movs	r3, #24
   117c6:	18fb      	adds	r3, r7, r3
   117c8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
   117ca:	2318      	movs	r3, #24
   117cc:	18fb      	adds	r3, r7, r3
   117ce:	2200      	movs	r2, #0
   117d0:	605a      	str	r2, [r3, #4]
   117d2:	e00b      	b.n	117ec <RegionEU868ApplyCFList+0xcc>
        }
        else
        {
            newChannel.Frequency = 0;
   117d4:	2318      	movs	r3, #24
   117d6:	18fb      	adds	r3, r7, r3
   117d8:	2200      	movs	r2, #0
   117da:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
   117dc:	2318      	movs	r3, #24
   117de:	18fb      	adds	r3, r7, r3
   117e0:	2200      	movs	r2, #0
   117e2:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
   117e4:	2318      	movs	r3, #24
   117e6:	18fb      	adds	r3, r7, r3
   117e8:	2200      	movs	r2, #0
   117ea:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
   117ec:	2318      	movs	r3, #24
   117ee:	18fb      	adds	r3, r7, r3
   117f0:	681b      	ldr	r3, [r3, #0]
   117f2:	2b00      	cmp	r3, #0
   117f4:	d010      	beq.n	11818 <RegionEU868ApplyCFList+0xf8>
        {
            channelAdd.NewChannel = &newChannel;
   117f6:	2310      	movs	r3, #16
   117f8:	18fb      	adds	r3, r7, r3
   117fa:	2218      	movs	r2, #24
   117fc:	18ba      	adds	r2, r7, r2
   117fe:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
   11800:	2310      	movs	r3, #16
   11802:	18fb      	adds	r3, r7, r3
   11804:	2226      	movs	r2, #38	; 0x26
   11806:	18ba      	adds	r2, r7, r2
   11808:	7812      	ldrb	r2, [r2, #0]
   1180a:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
   1180c:	2310      	movs	r3, #16
   1180e:	18fb      	adds	r3, r7, r3
   11810:	0018      	movs	r0, r3
   11812:	4b14      	ldr	r3, [pc, #80]	; (11864 <RegionEU868ApplyCFList+0x144>)
   11814:	4798      	blx	r3
   11816:	e00a      	b.n	1182e <RegionEU868ApplyCFList+0x10e>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
   11818:	230c      	movs	r3, #12
   1181a:	18fb      	adds	r3, r7, r3
   1181c:	2226      	movs	r2, #38	; 0x26
   1181e:	18ba      	adds	r2, r7, r2
   11820:	7812      	ldrb	r2, [r2, #0]
   11822:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
   11824:	230c      	movs	r3, #12
   11826:	18fb      	adds	r3, r7, r3
   11828:	0018      	movs	r0, r3
   1182a:	4b0f      	ldr	r3, [pc, #60]	; (11868 <RegionEU868ApplyCFList+0x148>)
   1182c:	4798      	blx	r3
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   1182e:	2327      	movs	r3, #39	; 0x27
   11830:	18fb      	adds	r3, r7, r3
   11832:	2227      	movs	r2, #39	; 0x27
   11834:	18ba      	adds	r2, r7, r2
   11836:	7812      	ldrb	r2, [r2, #0]
   11838:	3203      	adds	r2, #3
   1183a:	701a      	strb	r2, [r3, #0]
   1183c:	2326      	movs	r3, #38	; 0x26
   1183e:	18fb      	adds	r3, r7, r3
   11840:	781a      	ldrb	r2, [r3, #0]
   11842:	2326      	movs	r3, #38	; 0x26
   11844:	18fb      	adds	r3, r7, r3
   11846:	3201      	adds	r2, #1
   11848:	701a      	strb	r2, [r3, #0]
   1184a:	2326      	movs	r3, #38	; 0x26
   1184c:	18fb      	adds	r3, r7, r3
   1184e:	781b      	ldrb	r3, [r3, #0]
   11850:	2b0f      	cmp	r3, #15
   11852:	d982      	bls.n	1175a <RegionEU868ApplyCFList+0x3a>
   11854:	e002      	b.n	1185c <RegionEU868ApplyCFList+0x13c>
        return;
   11856:	46c0      	nop			; (mov r8, r8)
   11858:	e000      	b.n	1185c <RegionEU868ApplyCFList+0x13c>
        return;
   1185a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1185c:	46bd      	mov	sp, r7
   1185e:	b00a      	add	sp, #40	; 0x28
   11860:	bd80      	pop	{r7, pc}
   11862:	46c0      	nop			; (mov r8, r8)
   11864:	00012481 	.word	0x00012481
   11868:	00012679 	.word	0x00012679

0001186c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
   1186c:	b580      	push	{r7, lr}
   1186e:	b082      	sub	sp, #8
   11870:	af00      	add	r7, sp, #0
   11872:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
   11874:	687b      	ldr	r3, [r7, #4]
   11876:	791b      	ldrb	r3, [r3, #4]
   11878:	2b00      	cmp	r3, #0
   1187a:	d002      	beq.n	11882 <RegionEU868ChanMaskSet+0x16>
   1187c:	2b01      	cmp	r3, #1
   1187e:	d008      	beq.n	11892 <RegionEU868ChanMaskSet+0x26>
   11880:	e00f      	b.n	118a2 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
   11882:	687b      	ldr	r3, [r7, #4]
   11884:	6819      	ldr	r1, [r3, #0]
   11886:	4b0a      	ldr	r3, [pc, #40]	; (118b0 <RegionEU868ChanMaskSet+0x44>)
   11888:	2201      	movs	r2, #1
   1188a:	0018      	movs	r0, r3
   1188c:	4b09      	ldr	r3, [pc, #36]	; (118b4 <RegionEU868ChanMaskSet+0x48>)
   1188e:	4798      	blx	r3
            break;
   11890:	e009      	b.n	118a6 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
   11892:	687b      	ldr	r3, [r7, #4]
   11894:	6819      	ldr	r1, [r3, #0]
   11896:	4b08      	ldr	r3, [pc, #32]	; (118b8 <RegionEU868ChanMaskSet+0x4c>)
   11898:	2201      	movs	r2, #1
   1189a:	0018      	movs	r0, r3
   1189c:	4b05      	ldr	r3, [pc, #20]	; (118b4 <RegionEU868ChanMaskSet+0x48>)
   1189e:	4798      	blx	r3
            break;
   118a0:	e001      	b.n	118a6 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
   118a2:	2300      	movs	r3, #0
   118a4:	e000      	b.n	118a8 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
   118a6:	2301      	movs	r3, #1
}
   118a8:	0018      	movs	r0, r3
   118aa:	46bd      	mov	sp, r7
   118ac:	b002      	add	sp, #8
   118ae:	bd80      	pop	{r7, pc}
   118b0:	2000163c 	.word	0x2000163c
   118b4:	000106b9 	.word	0x000106b9
   118b8:	2000163e 	.word	0x2000163e

000118bc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
   118bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   118be:	b08b      	sub	sp, #44	; 0x2c
   118c0:	af04      	add	r7, sp, #16
   118c2:	60ba      	str	r2, [r7, #8]
   118c4:	607b      	str	r3, [r7, #4]
   118c6:	230f      	movs	r3, #15
   118c8:	18fb      	adds	r3, r7, r3
   118ca:	1c02      	adds	r2, r0, #0
   118cc:	701a      	strb	r2, [r3, #0]
   118ce:	230e      	movs	r3, #14
   118d0:	18fb      	adds	r3, r7, r3
   118d2:	1c0a      	adds	r2, r1, #0
   118d4:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
   118d6:	2300      	movs	r3, #0
   118d8:	2400      	movs	r4, #0
   118da:	613b      	str	r3, [r7, #16]
   118dc:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   118de:	230f      	movs	r3, #15
   118e0:	18fb      	adds	r3, r7, r3
   118e2:	781b      	ldrb	r3, [r3, #0]
   118e4:	b25a      	sxtb	r2, r3
   118e6:	2a07      	cmp	r2, #7
   118e8:	dd00      	ble.n	118ec <RegionEU868ComputeRxWindowParameters+0x30>
   118ea:	2307      	movs	r3, #7
   118ec:	b25a      	sxtb	r2, r3
   118ee:	687b      	ldr	r3, [r7, #4]
   118f0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
   118f2:	687b      	ldr	r3, [r7, #4]
   118f4:	785b      	ldrb	r3, [r3, #1]
   118f6:	b25b      	sxtb	r3, r3
   118f8:	0018      	movs	r0, r3
   118fa:	4b23      	ldr	r3, [pc, #140]	; (11988 <RegionEU868ComputeRxWindowParameters+0xcc>)
   118fc:	4798      	blx	r3
   118fe:	0003      	movs	r3, r0
   11900:	b2da      	uxtb	r2, r3
   11902:	687b      	ldr	r3, [r7, #4]
   11904:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
   11906:	687b      	ldr	r3, [r7, #4]
   11908:	785b      	ldrb	r3, [r3, #1]
   1190a:	b25b      	sxtb	r3, r3
   1190c:	2b07      	cmp	r3, #7
   1190e:	d10d      	bne.n	1192c <RegionEU868ComputeRxWindowParameters+0x70>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
   11910:	687b      	ldr	r3, [r7, #4]
   11912:	785b      	ldrb	r3, [r3, #1]
   11914:	b25b      	sxtb	r3, r3
   11916:	001a      	movs	r2, r3
   11918:	4b1c      	ldr	r3, [pc, #112]	; (1198c <RegionEU868ComputeRxWindowParameters+0xd0>)
   1191a:	5c9b      	ldrb	r3, [r3, r2]
   1191c:	0018      	movs	r0, r3
   1191e:	4b1c      	ldr	r3, [pc, #112]	; (11990 <RegionEU868ComputeRxWindowParameters+0xd4>)
   11920:	4798      	blx	r3
   11922:	0003      	movs	r3, r0
   11924:	000c      	movs	r4, r1
   11926:	613b      	str	r3, [r7, #16]
   11928:	617c      	str	r4, [r7, #20]
   1192a:	e013      	b.n	11954 <RegionEU868ComputeRxWindowParameters+0x98>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   1192c:	687b      	ldr	r3, [r7, #4]
   1192e:	785b      	ldrb	r3, [r3, #1]
   11930:	b25b      	sxtb	r3, r3
   11932:	001a      	movs	r2, r3
   11934:	4b15      	ldr	r3, [pc, #84]	; (1198c <RegionEU868ComputeRxWindowParameters+0xd0>)
   11936:	5c98      	ldrb	r0, [r3, r2]
   11938:	687b      	ldr	r3, [r7, #4]
   1193a:	785b      	ldrb	r3, [r3, #1]
   1193c:	b25b      	sxtb	r3, r3
   1193e:	001a      	movs	r2, r3
   11940:	4b14      	ldr	r3, [pc, #80]	; (11994 <RegionEU868ComputeRxWindowParameters+0xd8>)
   11942:	0092      	lsls	r2, r2, #2
   11944:	58d3      	ldr	r3, [r2, r3]
   11946:	0019      	movs	r1, r3
   11948:	4b13      	ldr	r3, [pc, #76]	; (11998 <RegionEU868ComputeRxWindowParameters+0xdc>)
   1194a:	4798      	blx	r3
   1194c:	0003      	movs	r3, r0
   1194e:	000c      	movs	r4, r1
   11950:	613b      	str	r3, [r7, #16]
   11952:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   11954:	4b11      	ldr	r3, [pc, #68]	; (1199c <RegionEU868ComputeRxWindowParameters+0xe0>)
   11956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11958:	4798      	blx	r3
   1195a:	0006      	movs	r6, r0
   1195c:	687b      	ldr	r3, [r7, #4]
   1195e:	3308      	adds	r3, #8
   11960:	687a      	ldr	r2, [r7, #4]
   11962:	320c      	adds	r2, #12
   11964:	68bd      	ldr	r5, [r7, #8]
   11966:	210e      	movs	r1, #14
   11968:	1879      	adds	r1, r7, r1
   1196a:	780c      	ldrb	r4, [r1, #0]
   1196c:	6938      	ldr	r0, [r7, #16]
   1196e:	6979      	ldr	r1, [r7, #20]
   11970:	9202      	str	r2, [sp, #8]
   11972:	9301      	str	r3, [sp, #4]
   11974:	9600      	str	r6, [sp, #0]
   11976:	002b      	movs	r3, r5
   11978:	0022      	movs	r2, r4
   1197a:	4c09      	ldr	r4, [pc, #36]	; (119a0 <RegionEU868ComputeRxWindowParameters+0xe4>)
   1197c:	47a0      	blx	r4
}
   1197e:	46c0      	nop			; (mov r8, r8)
   11980:	46bd      	mov	sp, r7
   11982:	b007      	add	sp, #28
   11984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11986:	46c0      	nop			; (mov r8, r8)
   11988:	00010f91 	.word	0x00010f91
   1198c:	0001f694 	.word	0x0001f694
   11990:	00010c15 	.word	0x00010c15
   11994:	0001f69c 	.word	0x0001f69c
   11998:	00010bb1 	.word	0x00010bb1
   1199c:	0001f2a4 	.word	0x0001f2a4
   119a0:	00010c51 	.word	0x00010c51

000119a4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
   119a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119a6:	b091      	sub	sp, #68	; 0x44
   119a8:	af0a      	add	r7, sp, #40	; 0x28
   119aa:	6078      	str	r0, [r7, #4]
   119ac:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
   119ae:	230f      	movs	r3, #15
   119b0:	18fb      	adds	r3, r7, r3
   119b2:	687a      	ldr	r2, [r7, #4]
   119b4:	7852      	ldrb	r2, [r2, #1]
   119b6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
   119b8:	2316      	movs	r3, #22
   119ba:	18fb      	adds	r3, r7, r3
   119bc:	2200      	movs	r2, #0
   119be:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
   119c0:	230e      	movs	r3, #14
   119c2:	18fb      	adds	r3, r7, r3
   119c4:	2200      	movs	r2, #0
   119c6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
   119c8:	687b      	ldr	r3, [r7, #4]
   119ca:	685b      	ldr	r3, [r3, #4]
   119cc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
   119ce:	4b64      	ldr	r3, [pc, #400]	; (11b60 <RegionEU868RxConfig+0x1bc>)
   119d0:	685b      	ldr	r3, [r3, #4]
   119d2:	4798      	blx	r3
   119d4:	1e03      	subs	r3, r0, #0
   119d6:	d001      	beq.n	119dc <RegionEU868RxConfig+0x38>
    {
        return false;
   119d8:	2300      	movs	r3, #0
   119da:	e0bc      	b.n	11b56 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
   119dc:	687b      	ldr	r3, [r7, #4]
   119de:	7cdb      	ldrb	r3, [r3, #19]
   119e0:	2b00      	cmp	r3, #0
   119e2:	d122      	bne.n	11a2a <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
   119e4:	687b      	ldr	r3, [r7, #4]
   119e6:	781b      	ldrb	r3, [r3, #0]
   119e8:	0019      	movs	r1, r3
   119ea:	4a5e      	ldr	r2, [pc, #376]	; (11b64 <RegionEU868RxConfig+0x1c0>)
   119ec:	000b      	movs	r3, r1
   119ee:	005b      	lsls	r3, r3, #1
   119f0:	185b      	adds	r3, r3, r1
   119f2:	009b      	lsls	r3, r3, #2
   119f4:	589b      	ldr	r3, [r3, r2]
   119f6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
   119f8:	687b      	ldr	r3, [r7, #4]
   119fa:	781b      	ldrb	r3, [r3, #0]
   119fc:	0019      	movs	r1, r3
   119fe:	4a59      	ldr	r2, [pc, #356]	; (11b64 <RegionEU868RxConfig+0x1c0>)
   11a00:	000b      	movs	r3, r1
   11a02:	005b      	lsls	r3, r3, #1
   11a04:	185b      	adds	r3, r3, r1
   11a06:	009b      	lsls	r3, r3, #2
   11a08:	18d3      	adds	r3, r2, r3
   11a0a:	3304      	adds	r3, #4
   11a0c:	681b      	ldr	r3, [r3, #0]
   11a0e:	2b00      	cmp	r3, #0
   11a10:	d00b      	beq.n	11a2a <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
   11a12:	687b      	ldr	r3, [r7, #4]
   11a14:	781b      	ldrb	r3, [r3, #0]
   11a16:	0019      	movs	r1, r3
   11a18:	4a52      	ldr	r2, [pc, #328]	; (11b64 <RegionEU868RxConfig+0x1c0>)
   11a1a:	000b      	movs	r3, r1
   11a1c:	005b      	lsls	r3, r3, #1
   11a1e:	185b      	adds	r3, r3, r1
   11a20:	009b      	lsls	r3, r3, #2
   11a22:	18d3      	adds	r3, r2, r3
   11a24:	3304      	adds	r3, #4
   11a26:	681b      	ldr	r3, [r3, #0]
   11a28:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
   11a2a:	230f      	movs	r3, #15
   11a2c:	18fb      	adds	r3, r7, r3
   11a2e:	781b      	ldrb	r3, [r3, #0]
   11a30:	b25b      	sxtb	r3, r3
   11a32:	4a4d      	ldr	r2, [pc, #308]	; (11b68 <RegionEU868RxConfig+0x1c4>)
   11a34:	5cd2      	ldrb	r2, [r2, r3]
   11a36:	230e      	movs	r3, #14
   11a38:	18fb      	adds	r3, r7, r3
   11a3a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
   11a3c:	4b48      	ldr	r3, [pc, #288]	; (11b60 <RegionEU868RxConfig+0x1bc>)
   11a3e:	68db      	ldr	r3, [r3, #12]
   11a40:	693a      	ldr	r2, [r7, #16]
   11a42:	0010      	movs	r0, r2
   11a44:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
   11a46:	230f      	movs	r3, #15
   11a48:	18fb      	adds	r3, r7, r3
   11a4a:	781b      	ldrb	r3, [r3, #0]
   11a4c:	b25b      	sxtb	r3, r3
   11a4e:	2b07      	cmp	r3, #7
   11a50:	d12d      	bne.n	11aae <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
   11a52:	2317      	movs	r3, #23
   11a54:	18fb      	adds	r3, r7, r3
   11a56:	2200      	movs	r2, #0
   11a58:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   11a5a:	4b41      	ldr	r3, [pc, #260]	; (11b60 <RegionEU868RxConfig+0x1bc>)
   11a5c:	699c      	ldr	r4, [r3, #24]
   11a5e:	230e      	movs	r3, #14
   11a60:	18fb      	adds	r3, r7, r3
   11a62:	781b      	ldrb	r3, [r3, #0]
   11a64:	b25b      	sxtb	r3, r3
   11a66:	22fa      	movs	r2, #250	; 0xfa
   11a68:	0092      	lsls	r2, r2, #2
   11a6a:	4353      	muls	r3, r2
   11a6c:	001e      	movs	r6, r3
   11a6e:	687b      	ldr	r3, [r7, #4]
   11a70:	689b      	ldr	r3, [r3, #8]
   11a72:	b29b      	uxth	r3, r3
   11a74:	687a      	ldr	r2, [r7, #4]
   11a76:	7c92      	ldrb	r2, [r2, #18]
   11a78:	4d3c      	ldr	r5, [pc, #240]	; (11b6c <RegionEU868RxConfig+0x1c8>)
   11a7a:	2117      	movs	r1, #23
   11a7c:	1879      	adds	r1, r7, r1
   11a7e:	7808      	ldrb	r0, [r1, #0]
   11a80:	9209      	str	r2, [sp, #36]	; 0x24
   11a82:	2200      	movs	r2, #0
   11a84:	9208      	str	r2, [sp, #32]
   11a86:	2200      	movs	r2, #0
   11a88:	9207      	str	r2, [sp, #28]
   11a8a:	2200      	movs	r2, #0
   11a8c:	9206      	str	r2, [sp, #24]
   11a8e:	2201      	movs	r2, #1
   11a90:	9205      	str	r2, [sp, #20]
   11a92:	2200      	movs	r2, #0
   11a94:	9204      	str	r2, [sp, #16]
   11a96:	2200      	movs	r2, #0
   11a98:	9203      	str	r2, [sp, #12]
   11a9a:	9302      	str	r3, [sp, #8]
   11a9c:	2305      	movs	r3, #5
   11a9e:	9301      	str	r3, [sp, #4]
   11aa0:	4b33      	ldr	r3, [pc, #204]	; (11b70 <RegionEU868RxConfig+0x1cc>)
   11aa2:	9300      	str	r3, [sp, #0]
   11aa4:	2300      	movs	r3, #0
   11aa6:	0032      	movs	r2, r6
   11aa8:	0029      	movs	r1, r5
   11aaa:	47a0      	blx	r4
   11aac:	e02a      	b.n	11b04 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
   11aae:	2317      	movs	r3, #23
   11ab0:	18fb      	adds	r3, r7, r3
   11ab2:	2201      	movs	r2, #1
   11ab4:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   11ab6:	4b2a      	ldr	r3, [pc, #168]	; (11b60 <RegionEU868RxConfig+0x1bc>)
   11ab8:	699c      	ldr	r4, [r3, #24]
   11aba:	687b      	ldr	r3, [r7, #4]
   11abc:	789b      	ldrb	r3, [r3, #2]
   11abe:	001e      	movs	r6, r3
   11ac0:	230e      	movs	r3, #14
   11ac2:	18fb      	adds	r3, r7, r3
   11ac4:	2500      	movs	r5, #0
   11ac6:	575d      	ldrsb	r5, [r3, r5]
   11ac8:	687b      	ldr	r3, [r7, #4]
   11aca:	689b      	ldr	r3, [r3, #8]
   11acc:	b29b      	uxth	r3, r3
   11ace:	687a      	ldr	r2, [r7, #4]
   11ad0:	7c92      	ldrb	r2, [r2, #18]
   11ad2:	2117      	movs	r1, #23
   11ad4:	1879      	adds	r1, r7, r1
   11ad6:	7808      	ldrb	r0, [r1, #0]
   11ad8:	9209      	str	r2, [sp, #36]	; 0x24
   11ada:	2201      	movs	r2, #1
   11adc:	9208      	str	r2, [sp, #32]
   11ade:	2200      	movs	r2, #0
   11ae0:	9207      	str	r2, [sp, #28]
   11ae2:	2200      	movs	r2, #0
   11ae4:	9206      	str	r2, [sp, #24]
   11ae6:	2200      	movs	r2, #0
   11ae8:	9205      	str	r2, [sp, #20]
   11aea:	2200      	movs	r2, #0
   11aec:	9204      	str	r2, [sp, #16]
   11aee:	2200      	movs	r2, #0
   11af0:	9203      	str	r2, [sp, #12]
   11af2:	9302      	str	r3, [sp, #8]
   11af4:	2308      	movs	r3, #8
   11af6:	9301      	str	r3, [sp, #4]
   11af8:	2300      	movs	r3, #0
   11afa:	9300      	str	r3, [sp, #0]
   11afc:	2301      	movs	r3, #1
   11afe:	002a      	movs	r2, r5
   11b00:	0031      	movs	r1, r6
   11b02:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
   11b04:	687b      	ldr	r3, [r7, #4]
   11b06:	7c5b      	ldrb	r3, [r3, #17]
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d009      	beq.n	11b20 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
   11b0c:	230f      	movs	r3, #15
   11b0e:	18fb      	adds	r3, r7, r3
   11b10:	2200      	movs	r2, #0
   11b12:	569a      	ldrsb	r2, [r3, r2]
   11b14:	2316      	movs	r3, #22
   11b16:	18fb      	adds	r3, r7, r3
   11b18:	4916      	ldr	r1, [pc, #88]	; (11b74 <RegionEU868RxConfig+0x1d0>)
   11b1a:	5c8a      	ldrb	r2, [r1, r2]
   11b1c:	701a      	strb	r2, [r3, #0]
   11b1e:	e008      	b.n	11b32 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
   11b20:	230f      	movs	r3, #15
   11b22:	18fb      	adds	r3, r7, r3
   11b24:	2200      	movs	r2, #0
   11b26:	569a      	ldrsb	r2, [r3, r2]
   11b28:	2316      	movs	r3, #22
   11b2a:	18fb      	adds	r3, r7, r3
   11b2c:	4912      	ldr	r1, [pc, #72]	; (11b78 <RegionEU868RxConfig+0x1d4>)
   11b2e:	5c8a      	ldrb	r2, [r1, r2]
   11b30:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
   11b32:	4b0b      	ldr	r3, [pc, #44]	; (11b60 <RegionEU868RxConfig+0x1bc>)
   11b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11b36:	2216      	movs	r2, #22
   11b38:	18ba      	adds	r2, r7, r2
   11b3a:	7812      	ldrb	r2, [r2, #0]
   11b3c:	320d      	adds	r2, #13
   11b3e:	b2d1      	uxtb	r1, r2
   11b40:	2217      	movs	r2, #23
   11b42:	18ba      	adds	r2, r7, r2
   11b44:	7812      	ldrb	r2, [r2, #0]
   11b46:	0010      	movs	r0, r2
   11b48:	4798      	blx	r3

    *datarate = (uint8_t) dr;
   11b4a:	683b      	ldr	r3, [r7, #0]
   11b4c:	220f      	movs	r2, #15
   11b4e:	18ba      	adds	r2, r7, r2
   11b50:	7812      	ldrb	r2, [r2, #0]
   11b52:	701a      	strb	r2, [r3, #0]
    return true;
   11b54:	2301      	movs	r3, #1
}
   11b56:	0018      	movs	r0, r3
   11b58:	46bd      	mov	sp, r7
   11b5a:	b007      	add	sp, #28
   11b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b5e:	46c0      	nop			; (mov r8, r8)
   11b60:	0001f2a4 	.word	0x0001f2a4
   11b64:	2000152c 	.word	0x2000152c
   11b68:	0001f694 	.word	0x0001f694
   11b6c:	0000c350 	.word	0x0000c350
   11b70:	00014585 	.word	0x00014585
   11b74:	0001f6c4 	.word	0x0001f6c4
   11b78:	0001f6bc 	.word	0x0001f6bc

00011b7c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   11b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b7e:	b093      	sub	sp, #76	; 0x4c
   11b80:	af0a      	add	r7, sp, #40	; 0x28
   11b82:	60f8      	str	r0, [r7, #12]
   11b84:	60b9      	str	r1, [r7, #8]
   11b86:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   11b88:	68fb      	ldr	r3, [r7, #12]
   11b8a:	785b      	ldrb	r3, [r3, #1]
   11b8c:	b25b      	sxtb	r3, r3
   11b8e:	001a      	movs	r2, r3
   11b90:	4b61      	ldr	r3, [pc, #388]	; (11d18 <RegionEU868TxConfig+0x19c>)
   11b92:	5c9a      	ldrb	r2, [r3, r2]
   11b94:	231e      	movs	r3, #30
   11b96:	18fb      	adds	r3, r7, r3
   11b98:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
   11b9a:	68fb      	ldr	r3, [r7, #12]
   11b9c:	2002      	movs	r0, #2
   11b9e:	5618      	ldrsb	r0, [r3, r0]
   11ba0:	68fb      	ldr	r3, [r7, #12]
   11ba2:	781b      	ldrb	r3, [r3, #0]
   11ba4:	0019      	movs	r1, r3
   11ba6:	4a5d      	ldr	r2, [pc, #372]	; (11d1c <RegionEU868TxConfig+0x1a0>)
   11ba8:	000b      	movs	r3, r1
   11baa:	005b      	lsls	r3, r3, #1
   11bac:	185b      	adds	r3, r3, r1
   11bae:	009b      	lsls	r3, r3, #2
   11bb0:	18d3      	adds	r3, r2, r3
   11bb2:	3309      	adds	r3, #9
   11bb4:	781b      	ldrb	r3, [r3, #0]
   11bb6:	4a59      	ldr	r2, [pc, #356]	; (11d1c <RegionEU868TxConfig+0x1a0>)
   11bb8:	330c      	adds	r3, #12
   11bba:	011b      	lsls	r3, r3, #4
   11bbc:	18d3      	adds	r3, r2, r3
   11bbe:	3302      	adds	r3, #2
   11bc0:	2100      	movs	r1, #0
   11bc2:	5659      	ldrsb	r1, [r3, r1]
   11bc4:	68fb      	ldr	r3, [r7, #12]
   11bc6:	2201      	movs	r2, #1
   11bc8:	569a      	ldrsb	r2, [r3, r2]
   11bca:	231d      	movs	r3, #29
   11bcc:	18fc      	adds	r4, r7, r3
   11bce:	4b54      	ldr	r3, [pc, #336]	; (11d20 <RegionEU868TxConfig+0x1a4>)
   11bd0:	4d54      	ldr	r5, [pc, #336]	; (11d24 <RegionEU868TxConfig+0x1a8>)
   11bd2:	47a8      	blx	r5
   11bd4:	0003      	movs	r3, r0
   11bd6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
   11bd8:	68fb      	ldr	r3, [r7, #12]
   11bda:	785b      	ldrb	r3, [r3, #1]
   11bdc:	b25b      	sxtb	r3, r3
   11bde:	0018      	movs	r0, r3
   11be0:	4b51      	ldr	r3, [pc, #324]	; (11d28 <RegionEU868TxConfig+0x1ac>)
   11be2:	4798      	blx	r3
   11be4:	0003      	movs	r3, r0
   11be6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
   11be8:	2317      	movs	r3, #23
   11bea:	18fb      	adds	r3, r7, r3
   11bec:	2200      	movs	r2, #0
   11bee:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   11bf0:	68fb      	ldr	r3, [r7, #12]
   11bf2:	6859      	ldr	r1, [r3, #4]
   11bf4:	68fb      	ldr	r3, [r7, #12]
   11bf6:	689a      	ldr	r2, [r3, #8]
   11bf8:	2317      	movs	r3, #23
   11bfa:	18fc      	adds	r4, r7, r3
   11bfc:	231d      	movs	r3, #29
   11bfe:	18fb      	adds	r3, r7, r3
   11c00:	781b      	ldrb	r3, [r3, #0]
   11c02:	b25b      	sxtb	r3, r3
   11c04:	0018      	movs	r0, r3
   11c06:	4b49      	ldr	r3, [pc, #292]	; (11d2c <RegionEU868TxConfig+0x1b0>)
   11c08:	4798      	blx	r3
   11c0a:	0003      	movs	r3, r0
   11c0c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
   11c0e:	4b48      	ldr	r3, [pc, #288]	; (11d30 <RegionEU868TxConfig+0x1b4>)
   11c10:	68da      	ldr	r2, [r3, #12]
   11c12:	68fb      	ldr	r3, [r7, #12]
   11c14:	781b      	ldrb	r3, [r3, #0]
   11c16:	0018      	movs	r0, r3
   11c18:	4940      	ldr	r1, [pc, #256]	; (11d1c <RegionEU868TxConfig+0x1a0>)
   11c1a:	0003      	movs	r3, r0
   11c1c:	005b      	lsls	r3, r3, #1
   11c1e:	181b      	adds	r3, r3, r0
   11c20:	009b      	lsls	r3, r3, #2
   11c22:	585b      	ldr	r3, [r3, r1]
   11c24:	0018      	movs	r0, r3
   11c26:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
   11c28:	68fb      	ldr	r3, [r7, #12]
   11c2a:	785b      	ldrb	r3, [r3, #1]
   11c2c:	b25b      	sxtb	r3, r3
   11c2e:	2b07      	cmp	r3, #7
   11c30:	d12b      	bne.n	11c8a <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
   11c32:	231f      	movs	r3, #31
   11c34:	18fb      	adds	r3, r7, r3
   11c36:	2200      	movs	r2, #0
   11c38:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
   11c3a:	4b3d      	ldr	r3, [pc, #244]	; (11d30 <RegionEU868TxConfig+0x1b4>)
   11c3c:	69dc      	ldr	r4, [r3, #28]
   11c3e:	231e      	movs	r3, #30
   11c40:	18fb      	adds	r3, r7, r3
   11c42:	781b      	ldrb	r3, [r3, #0]
   11c44:	b25b      	sxtb	r3, r3
   11c46:	22fa      	movs	r2, #250	; 0xfa
   11c48:	0092      	lsls	r2, r2, #2
   11c4a:	4353      	muls	r3, r2
   11c4c:	001d      	movs	r5, r3
   11c4e:	69ba      	ldr	r2, [r7, #24]
   11c50:	4e38      	ldr	r6, [pc, #224]	; (11d34 <RegionEU868TxConfig+0x1b8>)
   11c52:	2317      	movs	r3, #23
   11c54:	18fb      	adds	r3, r7, r3
   11c56:	2100      	movs	r1, #0
   11c58:	5659      	ldrsb	r1, [r3, r1]
   11c5a:	231f      	movs	r3, #31
   11c5c:	18fb      	adds	r3, r7, r3
   11c5e:	7818      	ldrb	r0, [r3, #0]
   11c60:	4b35      	ldr	r3, [pc, #212]	; (11d38 <RegionEU868TxConfig+0x1bc>)
   11c62:	9308      	str	r3, [sp, #32]
   11c64:	2300      	movs	r3, #0
   11c66:	9307      	str	r3, [sp, #28]
   11c68:	2300      	movs	r3, #0
   11c6a:	9306      	str	r3, [sp, #24]
   11c6c:	2300      	movs	r3, #0
   11c6e:	9305      	str	r3, [sp, #20]
   11c70:	2301      	movs	r3, #1
   11c72:	9304      	str	r3, [sp, #16]
   11c74:	2300      	movs	r3, #0
   11c76:	9303      	str	r3, [sp, #12]
   11c78:	2305      	movs	r3, #5
   11c7a:	9302      	str	r3, [sp, #8]
   11c7c:	2300      	movs	r3, #0
   11c7e:	9301      	str	r3, [sp, #4]
   11c80:	9500      	str	r5, [sp, #0]
   11c82:	0013      	movs	r3, r2
   11c84:	0032      	movs	r2, r6
   11c86:	47a0      	blx	r4
   11c88:	e025      	b.n	11cd6 <RegionEU868TxConfig+0x15a>
    }
    else
    {
        modem = MODEM_LORA;
   11c8a:	231f      	movs	r3, #31
   11c8c:	18fb      	adds	r3, r7, r3
   11c8e:	2201      	movs	r2, #1
   11c90:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
   11c92:	4b27      	ldr	r3, [pc, #156]	; (11d30 <RegionEU868TxConfig+0x1b4>)
   11c94:	69dc      	ldr	r4, [r3, #28]
   11c96:	231e      	movs	r3, #30
   11c98:	18fb      	adds	r3, r7, r3
   11c9a:	781b      	ldrb	r3, [r3, #0]
   11c9c:	b25b      	sxtb	r3, r3
   11c9e:	69bd      	ldr	r5, [r7, #24]
   11ca0:	2217      	movs	r2, #23
   11ca2:	18ba      	adds	r2, r7, r2
   11ca4:	2100      	movs	r1, #0
   11ca6:	5651      	ldrsb	r1, [r2, r1]
   11ca8:	221f      	movs	r2, #31
   11caa:	18ba      	adds	r2, r7, r2
   11cac:	7810      	ldrb	r0, [r2, #0]
   11cae:	4a22      	ldr	r2, [pc, #136]	; (11d38 <RegionEU868TxConfig+0x1bc>)
   11cb0:	9208      	str	r2, [sp, #32]
   11cb2:	2200      	movs	r2, #0
   11cb4:	9207      	str	r2, [sp, #28]
   11cb6:	2200      	movs	r2, #0
   11cb8:	9206      	str	r2, [sp, #24]
   11cba:	2200      	movs	r2, #0
   11cbc:	9205      	str	r2, [sp, #20]
   11cbe:	2201      	movs	r2, #1
   11cc0:	9204      	str	r2, [sp, #16]
   11cc2:	2200      	movs	r2, #0
   11cc4:	9203      	str	r2, [sp, #12]
   11cc6:	2208      	movs	r2, #8
   11cc8:	9202      	str	r2, [sp, #8]
   11cca:	2201      	movs	r2, #1
   11ccc:	9201      	str	r2, [sp, #4]
   11cce:	9300      	str	r3, [sp, #0]
   11cd0:	002b      	movs	r3, r5
   11cd2:	2200      	movs	r2, #0
   11cd4:	47a0      	blx	r4
    }

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
   11cd6:	4b16      	ldr	r3, [pc, #88]	; (11d30 <RegionEU868TxConfig+0x1b4>)
   11cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11cda:	68fa      	ldr	r2, [r7, #12]
   11cdc:	8992      	ldrh	r2, [r2, #12]
   11cde:	b2d1      	uxtb	r1, r2
   11ce0:	221f      	movs	r2, #31
   11ce2:	18ba      	adds	r2, r7, r2
   11ce4:	7812      	ldrb	r2, [r2, #0]
   11ce6:	0010      	movs	r0, r2
   11ce8:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
   11cea:	4b11      	ldr	r3, [pc, #68]	; (11d30 <RegionEU868TxConfig+0x1b4>)
   11cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11cee:	68fa      	ldr	r2, [r7, #12]
   11cf0:	8992      	ldrh	r2, [r2, #12]
   11cf2:	b2d1      	uxtb	r1, r2
   11cf4:	221f      	movs	r2, #31
   11cf6:	18ba      	adds	r2, r7, r2
   11cf8:	7812      	ldrb	r2, [r2, #0]
   11cfa:	0010      	movs	r0, r2
   11cfc:	4798      	blx	r3
   11cfe:	0002      	movs	r2, r0
   11d00:	687b      	ldr	r3, [r7, #4]
   11d02:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
   11d04:	68bb      	ldr	r3, [r7, #8]
   11d06:	221d      	movs	r2, #29
   11d08:	18ba      	adds	r2, r7, r2
   11d0a:	7812      	ldrb	r2, [r2, #0]
   11d0c:	701a      	strb	r2, [r3, #0]
    return true;
   11d0e:	2301      	movs	r3, #1
}
   11d10:	0018      	movs	r0, r3
   11d12:	46bd      	mov	sp, r7
   11d14:	b009      	add	sp, #36	; 0x24
   11d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d18:	0001f694 	.word	0x0001f694
   11d1c:	2000152c 	.word	0x2000152c
   11d20:	2000163c 	.word	0x2000163c
   11d24:	00010fcd 	.word	0x00010fcd
   11d28:	00010f91 	.word	0x00010f91
   11d2c:	00010d85 	.word	0x00010d85
   11d30:	0001f2a4 	.word	0x0001f2a4
   11d34:	000061a8 	.word	0x000061a8
   11d38:	00000bb8 	.word	0x00000bb8

00011d3c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   11d3c:	b5b0      	push	{r4, r5, r7, lr}
   11d3e:	b092      	sub	sp, #72	; 0x48
   11d40:	af00      	add	r7, sp, #0
   11d42:	60f8      	str	r0, [r7, #12]
   11d44:	60b9      	str	r1, [r7, #8]
   11d46:	607a      	str	r2, [r7, #4]
   11d48:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
   11d4a:	2347      	movs	r3, #71	; 0x47
   11d4c:	18fb      	adds	r3, r7, r3
   11d4e:	2207      	movs	r2, #7
   11d50:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
   11d52:	2344      	movs	r3, #68	; 0x44
   11d54:	18fb      	adds	r3, r7, r3
   11d56:	2200      	movs	r2, #0
   11d58:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
   11d5a:	2346      	movs	r3, #70	; 0x46
   11d5c:	18fb      	adds	r3, r7, r3
   11d5e:	2200      	movs	r2, #0
   11d60:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
   11d62:	233a      	movs	r3, #58	; 0x3a
   11d64:	18fb      	adds	r3, r7, r3
   11d66:	2200      	movs	r2, #0
   11d68:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
   11d6a:	e0a6      	b.n	11eba <RegionEU868LinkAdrReq+0x17e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
   11d6c:	68fb      	ldr	r3, [r7, #12]
   11d6e:	685a      	ldr	r2, [r3, #4]
   11d70:	2346      	movs	r3, #70	; 0x46
   11d72:	18fb      	adds	r3, r7, r3
   11d74:	781b      	ldrb	r3, [r3, #0]
   11d76:	18d3      	adds	r3, r2, r3
   11d78:	2244      	movs	r2, #68	; 0x44
   11d7a:	18bc      	adds	r4, r7, r2
   11d7c:	223c      	movs	r2, #60	; 0x3c
   11d7e:	18ba      	adds	r2, r7, r2
   11d80:	0011      	movs	r1, r2
   11d82:	0018      	movs	r0, r3
   11d84:	4ba6      	ldr	r3, [pc, #664]	; (12020 <RegionEU868LinkAdrReq+0x2e4>)
   11d86:	4798      	blx	r3
   11d88:	0003      	movs	r3, r0
   11d8a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
   11d8c:	2344      	movs	r3, #68	; 0x44
   11d8e:	18fb      	adds	r3, r7, r3
   11d90:	781b      	ldrb	r3, [r3, #0]
   11d92:	2b00      	cmp	r3, #0
   11d94:	d100      	bne.n	11d98 <RegionEU868LinkAdrReq+0x5c>
   11d96:	e099      	b.n	11ecc <RegionEU868LinkAdrReq+0x190>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
   11d98:	2346      	movs	r3, #70	; 0x46
   11d9a:	18fb      	adds	r3, r7, r3
   11d9c:	2246      	movs	r2, #70	; 0x46
   11d9e:	18b9      	adds	r1, r7, r2
   11da0:	2244      	movs	r2, #68	; 0x44
   11da2:	18ba      	adds	r2, r7, r2
   11da4:	7809      	ldrb	r1, [r1, #0]
   11da6:	7812      	ldrb	r2, [r2, #0]
   11da8:	188a      	adds	r2, r1, r2
   11daa:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
   11dac:	2347      	movs	r3, #71	; 0x47
   11dae:	18fb      	adds	r3, r7, r3
   11db0:	2207      	movs	r2, #7
   11db2:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
   11db4:	233c      	movs	r3, #60	; 0x3c
   11db6:	18fb      	adds	r3, r7, r3
   11db8:	889a      	ldrh	r2, [r3, #4]
   11dba:	233a      	movs	r3, #58	; 0x3a
   11dbc:	18fb      	adds	r3, r7, r3
   11dbe:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   11dc0:	233c      	movs	r3, #60	; 0x3c
   11dc2:	18fb      	adds	r3, r7, r3
   11dc4:	78db      	ldrb	r3, [r3, #3]
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	d10d      	bne.n	11de6 <RegionEU868LinkAdrReq+0xaa>
   11dca:	233a      	movs	r3, #58	; 0x3a
   11dcc:	18fb      	adds	r3, r7, r3
   11dce:	881b      	ldrh	r3, [r3, #0]
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d108      	bne.n	11de6 <RegionEU868LinkAdrReq+0xaa>
        {
            status &= 0xFE; // Channel mask KO
   11dd4:	2347      	movs	r3, #71	; 0x47
   11dd6:	18fb      	adds	r3, r7, r3
   11dd8:	2247      	movs	r2, #71	; 0x47
   11dda:	18ba      	adds	r2, r7, r2
   11ddc:	7812      	ldrb	r2, [r2, #0]
   11dde:	2101      	movs	r1, #1
   11de0:	438a      	bics	r2, r1
   11de2:	701a      	strb	r2, [r3, #0]
   11de4:	e069      	b.n	11eba <RegionEU868LinkAdrReq+0x17e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   11de6:	233c      	movs	r3, #60	; 0x3c
   11de8:	18fb      	adds	r3, r7, r3
   11dea:	78db      	ldrb	r3, [r3, #3]
   11dec:	2b00      	cmp	r3, #0
   11dee:	d004      	beq.n	11dfa <RegionEU868LinkAdrReq+0xbe>
   11df0:	233c      	movs	r3, #60	; 0x3c
   11df2:	18fb      	adds	r3, r7, r3
   11df4:	78db      	ldrb	r3, [r3, #3]
   11df6:	2b05      	cmp	r3, #5
   11df8:	d904      	bls.n	11e04 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
   11dfa:	233c      	movs	r3, #60	; 0x3c
   11dfc:	18fb      	adds	r3, r7, r3
   11dfe:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   11e00:	2b06      	cmp	r3, #6
   11e02:	d908      	bls.n	11e16 <RegionEU868LinkAdrReq+0xda>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
   11e04:	2347      	movs	r3, #71	; 0x47
   11e06:	18fb      	adds	r3, r7, r3
   11e08:	2247      	movs	r2, #71	; 0x47
   11e0a:	18ba      	adds	r2, r7, r2
   11e0c:	7812      	ldrb	r2, [r2, #0]
   11e0e:	2101      	movs	r1, #1
   11e10:	438a      	bics	r2, r1
   11e12:	701a      	strb	r2, [r3, #0]
   11e14:	e051      	b.n	11eba <RegionEU868LinkAdrReq+0x17e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   11e16:	2345      	movs	r3, #69	; 0x45
   11e18:	18fb      	adds	r3, r7, r3
   11e1a:	2200      	movs	r2, #0
   11e1c:	701a      	strb	r2, [r3, #0]
   11e1e:	e047      	b.n	11eb0 <RegionEU868LinkAdrReq+0x174>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
   11e20:	233c      	movs	r3, #60	; 0x3c
   11e22:	18fb      	adds	r3, r7, r3
   11e24:	78db      	ldrb	r3, [r3, #3]
   11e26:	2b06      	cmp	r3, #6
   11e28:	d11c      	bne.n	11e64 <RegionEU868LinkAdrReq+0x128>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
   11e2a:	2345      	movs	r3, #69	; 0x45
   11e2c:	18fb      	adds	r3, r7, r3
   11e2e:	781a      	ldrb	r2, [r3, #0]
   11e30:	497c      	ldr	r1, [pc, #496]	; (12024 <RegionEU868LinkAdrReq+0x2e8>)
   11e32:	0013      	movs	r3, r2
   11e34:	005b      	lsls	r3, r3, #1
   11e36:	189b      	adds	r3, r3, r2
   11e38:	009b      	lsls	r3, r3, #2
   11e3a:	585b      	ldr	r3, [r3, r1]
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d030      	beq.n	11ea2 <RegionEU868LinkAdrReq+0x166>
                    {
                        chMask |= 1 << i;
   11e40:	2345      	movs	r3, #69	; 0x45
   11e42:	18fb      	adds	r3, r7, r3
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	2201      	movs	r2, #1
   11e48:	409a      	lsls	r2, r3
   11e4a:	0013      	movs	r3, r2
   11e4c:	b21a      	sxth	r2, r3
   11e4e:	233a      	movs	r3, #58	; 0x3a
   11e50:	18fb      	adds	r3, r7, r3
   11e52:	881b      	ldrh	r3, [r3, #0]
   11e54:	b21b      	sxth	r3, r3
   11e56:	4313      	orrs	r3, r2
   11e58:	b21b      	sxth	r3, r3
   11e5a:	b29a      	uxth	r2, r3
   11e5c:	233a      	movs	r3, #58	; 0x3a
   11e5e:	18fb      	adds	r3, r7, r3
   11e60:	801a      	strh	r2, [r3, #0]
   11e62:	e01e      	b.n	11ea2 <RegionEU868LinkAdrReq+0x166>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   11e64:	233a      	movs	r3, #58	; 0x3a
   11e66:	18fb      	adds	r3, r7, r3
   11e68:	881b      	ldrh	r3, [r3, #0]
   11e6a:	001a      	movs	r2, r3
   11e6c:	2345      	movs	r3, #69	; 0x45
   11e6e:	18fb      	adds	r3, r7, r3
   11e70:	781b      	ldrb	r3, [r3, #0]
   11e72:	411a      	asrs	r2, r3
   11e74:	0013      	movs	r3, r2
   11e76:	2201      	movs	r2, #1
   11e78:	4013      	ands	r3, r2
   11e7a:	d012      	beq.n	11ea2 <RegionEU868LinkAdrReq+0x166>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
   11e7c:	2345      	movs	r3, #69	; 0x45
   11e7e:	18fb      	adds	r3, r7, r3
   11e80:	781a      	ldrb	r2, [r3, #0]
   11e82:	4968      	ldr	r1, [pc, #416]	; (12024 <RegionEU868LinkAdrReq+0x2e8>)
   11e84:	0013      	movs	r3, r2
   11e86:	005b      	lsls	r3, r3, #1
   11e88:	189b      	adds	r3, r3, r2
   11e8a:	009b      	lsls	r3, r3, #2
   11e8c:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d107      	bne.n	11ea2 <RegionEU868LinkAdrReq+0x166>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
   11e92:	2347      	movs	r3, #71	; 0x47
   11e94:	18fb      	adds	r3, r7, r3
   11e96:	2247      	movs	r2, #71	; 0x47
   11e98:	18ba      	adds	r2, r7, r2
   11e9a:	7812      	ldrb	r2, [r2, #0]
   11e9c:	2101      	movs	r1, #1
   11e9e:	438a      	bics	r2, r1
   11ea0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   11ea2:	2345      	movs	r3, #69	; 0x45
   11ea4:	18fb      	adds	r3, r7, r3
   11ea6:	781a      	ldrb	r2, [r3, #0]
   11ea8:	2345      	movs	r3, #69	; 0x45
   11eaa:	18fb      	adds	r3, r7, r3
   11eac:	3201      	adds	r2, #1
   11eae:	701a      	strb	r2, [r3, #0]
   11eb0:	2345      	movs	r3, #69	; 0x45
   11eb2:	18fb      	adds	r3, r7, r3
   11eb4:	781b      	ldrb	r3, [r3, #0]
   11eb6:	2b0f      	cmp	r3, #15
   11eb8:	d9b2      	bls.n	11e20 <RegionEU868LinkAdrReq+0xe4>
    while( bytesProcessed < linkAdrReq->PayloadSize )
   11eba:	68fb      	ldr	r3, [r7, #12]
   11ebc:	7a1b      	ldrb	r3, [r3, #8]
   11ebe:	2246      	movs	r2, #70	; 0x46
   11ec0:	18ba      	adds	r2, r7, r2
   11ec2:	7812      	ldrb	r2, [r2, #0]
   11ec4:	429a      	cmp	r2, r3
   11ec6:	d200      	bcs.n	11eca <RegionEU868LinkAdrReq+0x18e>
   11ec8:	e750      	b.n	11d6c <RegionEU868LinkAdrReq+0x30>
   11eca:	e000      	b.n	11ece <RegionEU868LinkAdrReq+0x192>
            break; // break loop, since no more request has been found
   11ecc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
   11ece:	2334      	movs	r3, #52	; 0x34
   11ed0:	18fb      	adds	r3, r7, r3
   11ed2:	2201      	movs	r2, #1
   11ed4:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
   11ed6:	68fb      	ldr	r3, [r7, #12]
   11ed8:	7a5a      	ldrb	r2, [r3, #9]
   11eda:	2334      	movs	r3, #52	; 0x34
   11edc:	18fb      	adds	r3, r7, r3
   11ede:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
   11ee0:	2334      	movs	r3, #52	; 0x34
   11ee2:	18fb      	adds	r3, r7, r3
   11ee4:	0018      	movs	r0, r3
   11ee6:	4b50      	ldr	r3, [pc, #320]	; (12028 <RegionEU868LinkAdrReq+0x2ec>)
   11ee8:	4798      	blx	r3
   11eea:	0003      	movs	r3, r0
   11eec:	001a      	movs	r2, r3
   11eee:	2330      	movs	r3, #48	; 0x30
   11ef0:	18fb      	adds	r3, r7, r3
   11ef2:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
   11ef4:	2310      	movs	r3, #16
   11ef6:	18fb      	adds	r3, r7, r3
   11ef8:	2247      	movs	r2, #71	; 0x47
   11efa:	18ba      	adds	r2, r7, r2
   11efc:	7812      	ldrb	r2, [r2, #0]
   11efe:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   11f00:	68fb      	ldr	r3, [r7, #12]
   11f02:	7a9a      	ldrb	r2, [r3, #10]
   11f04:	2310      	movs	r3, #16
   11f06:	18fb      	adds	r3, r7, r3
   11f08:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   11f0a:	233c      	movs	r3, #60	; 0x3c
   11f0c:	18fb      	adds	r3, r7, r3
   11f0e:	2201      	movs	r2, #1
   11f10:	569a      	ldrsb	r2, [r3, r2]
   11f12:	2310      	movs	r3, #16
   11f14:	18fb      	adds	r3, r7, r3
   11f16:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   11f18:	233c      	movs	r3, #60	; 0x3c
   11f1a:	18fb      	adds	r3, r7, r3
   11f1c:	2202      	movs	r2, #2
   11f1e:	569a      	ldrsb	r2, [r3, r2]
   11f20:	2310      	movs	r3, #16
   11f22:	18fb      	adds	r3, r7, r3
   11f24:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   11f26:	233c      	movs	r3, #60	; 0x3c
   11f28:	18fb      	adds	r3, r7, r3
   11f2a:	781a      	ldrb	r2, [r3, #0]
   11f2c:	2310      	movs	r3, #16
   11f2e:	18fb      	adds	r3, r7, r3
   11f30:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   11f32:	68fb      	ldr	r3, [r7, #12]
   11f34:	220b      	movs	r2, #11
   11f36:	569a      	ldrsb	r2, [r3, r2]
   11f38:	2310      	movs	r3, #16
   11f3a:	18fb      	adds	r3, r7, r3
   11f3c:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
   11f3e:	68fb      	ldr	r3, [r7, #12]
   11f40:	220c      	movs	r2, #12
   11f42:	569a      	ldrsb	r2, [r3, r2]
   11f44:	2310      	movs	r3, #16
   11f46:	18fb      	adds	r3, r7, r3
   11f48:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
   11f4a:	68fb      	ldr	r3, [r7, #12]
   11f4c:	7b5b      	ldrb	r3, [r3, #13]
   11f4e:	b25a      	sxtb	r2, r3
   11f50:	2310      	movs	r3, #16
   11f52:	18fb      	adds	r3, r7, r3
   11f54:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
   11f56:	2310      	movs	r3, #16
   11f58:	18fb      	adds	r3, r7, r3
   11f5a:	2210      	movs	r2, #16
   11f5c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
   11f5e:	2310      	movs	r3, #16
   11f60:	18fb      	adds	r3, r7, r3
   11f62:	223a      	movs	r2, #58	; 0x3a
   11f64:	18ba      	adds	r2, r7, r2
   11f66:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
   11f68:	2330      	movs	r3, #48	; 0x30
   11f6a:	18fb      	adds	r3, r7, r3
   11f6c:	681b      	ldr	r3, [r3, #0]
   11f6e:	b25a      	sxtb	r2, r3
   11f70:	2310      	movs	r3, #16
   11f72:	18fb      	adds	r3, r7, r3
   11f74:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
   11f76:	2310      	movs	r3, #16
   11f78:	18fb      	adds	r3, r7, r3
   11f7a:	2207      	movs	r2, #7
   11f7c:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
   11f7e:	2310      	movs	r3, #16
   11f80:	18fb      	adds	r3, r7, r3
   11f82:	4a28      	ldr	r2, [pc, #160]	; (12024 <RegionEU868LinkAdrReq+0x2e8>)
   11f84:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
   11f86:	2310      	movs	r3, #16
   11f88:	18fb      	adds	r3, r7, r3
   11f8a:	2207      	movs	r2, #7
   11f8c:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
   11f8e:	2310      	movs	r3, #16
   11f90:	18fb      	adds	r3, r7, r3
   11f92:	2200      	movs	r2, #0
   11f94:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
   11f96:	2310      	movs	r3, #16
   11f98:	18fb      	adds	r3, r7, r3
   11f9a:	68fa      	ldr	r2, [r7, #12]
   11f9c:	6812      	ldr	r2, [r2, #0]
   11f9e:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   11fa0:	2347      	movs	r3, #71	; 0x47
   11fa2:	18fc      	adds	r4, r7, r3
   11fa4:	233c      	movs	r3, #60	; 0x3c
   11fa6:	18fd      	adds	r5, r7, r3
   11fa8:	233c      	movs	r3, #60	; 0x3c
   11faa:	18fb      	adds	r3, r7, r3
   11fac:	1c9a      	adds	r2, r3, #2
   11fae:	233c      	movs	r3, #60	; 0x3c
   11fb0:	18fb      	adds	r3, r7, r3
   11fb2:	1c59      	adds	r1, r3, #1
   11fb4:	2310      	movs	r3, #16
   11fb6:	18f8      	adds	r0, r7, r3
   11fb8:	002b      	movs	r3, r5
   11fba:	4d1c      	ldr	r5, [pc, #112]	; (1202c <RegionEU868LinkAdrReq+0x2f0>)
   11fbc:	47a8      	blx	r5
   11fbe:	0003      	movs	r3, r0
   11fc0:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
   11fc2:	2347      	movs	r3, #71	; 0x47
   11fc4:	18fb      	adds	r3, r7, r3
   11fc6:	781b      	ldrb	r3, [r3, #0]
   11fc8:	2b07      	cmp	r3, #7
   11fca:	d10c      	bne.n	11fe6 <RegionEU868LinkAdrReq+0x2aa>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
   11fcc:	4b18      	ldr	r3, [pc, #96]	; (12030 <RegionEU868LinkAdrReq+0x2f4>)
   11fce:	2202      	movs	r2, #2
   11fd0:	2100      	movs	r1, #0
   11fd2:	0018      	movs	r0, r3
   11fd4:	4b17      	ldr	r3, [pc, #92]	; (12034 <RegionEU868LinkAdrReq+0x2f8>)
   11fd6:	4798      	blx	r3
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
   11fd8:	233a      	movs	r3, #58	; 0x3a
   11fda:	18fb      	adds	r3, r7, r3
   11fdc:	8819      	ldrh	r1, [r3, #0]
   11fde:	4a11      	ldr	r2, [pc, #68]	; (12024 <RegionEU868LinkAdrReq+0x2e8>)
   11fe0:	2388      	movs	r3, #136	; 0x88
   11fe2:	005b      	lsls	r3, r3, #1
   11fe4:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
   11fe6:	233c      	movs	r3, #60	; 0x3c
   11fe8:	18fb      	adds	r3, r7, r3
   11fea:	2201      	movs	r2, #1
   11fec:	569a      	ldrsb	r2, [r3, r2]
   11fee:	68bb      	ldr	r3, [r7, #8]
   11ff0:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
   11ff2:	233c      	movs	r3, #60	; 0x3c
   11ff4:	18fb      	adds	r3, r7, r3
   11ff6:	2202      	movs	r2, #2
   11ff8:	569a      	ldrsb	r2, [r3, r2]
   11ffa:	687b      	ldr	r3, [r7, #4]
   11ffc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
   11ffe:	233c      	movs	r3, #60	; 0x3c
   12000:	18fb      	adds	r3, r7, r3
   12002:	781a      	ldrb	r2, [r3, #0]
   12004:	683b      	ldr	r3, [r7, #0]
   12006:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
   12008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1200a:	2246      	movs	r2, #70	; 0x46
   1200c:	18ba      	adds	r2, r7, r2
   1200e:	7812      	ldrb	r2, [r2, #0]
   12010:	701a      	strb	r2, [r3, #0]

    return status;
   12012:	2347      	movs	r3, #71	; 0x47
   12014:	18fb      	adds	r3, r7, r3
   12016:	781b      	ldrb	r3, [r3, #0]
}
   12018:	0018      	movs	r0, r3
   1201a:	46bd      	mov	sp, r7
   1201c:	b012      	add	sp, #72	; 0x48
   1201e:	bdb0      	pop	{r4, r5, r7, pc}
   12020:	0001094d 	.word	0x0001094d
   12024:	2000152c 	.word	0x2000152c
   12028:	000112f1 	.word	0x000112f1
   1202c:	000109f9 	.word	0x000109f9
   12030:	2000163c 	.word	0x2000163c
   12034:	000043b1 	.word	0x000043b1

00012038 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
   12038:	b580      	push	{r7, lr}
   1203a:	b084      	sub	sp, #16
   1203c:	af00      	add	r7, sp, #0
   1203e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
   12040:	230f      	movs	r3, #15
   12042:	18fb      	adds	r3, r7, r3
   12044:	2207      	movs	r2, #7
   12046:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
   12048:	230e      	movs	r3, #14
   1204a:	18fb      	adds	r3, r7, r3
   1204c:	2200      	movs	r2, #0
   1204e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
   12050:	687b      	ldr	r3, [r7, #4]
   12052:	685b      	ldr	r3, [r3, #4]
   12054:	220e      	movs	r2, #14
   12056:	18ba      	adds	r2, r7, r2
   12058:	0011      	movs	r1, r2
   1205a:	0018      	movs	r0, r3
   1205c:	4b1d      	ldr	r3, [pc, #116]	; (120d4 <RegionEU868RxParamSetupReq+0x9c>)
   1205e:	4798      	blx	r3
   12060:	0003      	movs	r3, r0
   12062:	001a      	movs	r2, r3
   12064:	2301      	movs	r3, #1
   12066:	4053      	eors	r3, r2
   12068:	b2db      	uxtb	r3, r3
   1206a:	2b00      	cmp	r3, #0
   1206c:	d007      	beq.n	1207e <RegionEU868RxParamSetupReq+0x46>
    {
        status &= 0xFE; // Channel frequency KO
   1206e:	230f      	movs	r3, #15
   12070:	18fb      	adds	r3, r7, r3
   12072:	220f      	movs	r2, #15
   12074:	18ba      	adds	r2, r7, r2
   12076:	7812      	ldrb	r2, [r2, #0]
   12078:	2101      	movs	r1, #1
   1207a:	438a      	bics	r2, r1
   1207c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
   1207e:	687b      	ldr	r3, [r7, #4]
   12080:	781b      	ldrb	r3, [r3, #0]
   12082:	b25b      	sxtb	r3, r3
   12084:	2207      	movs	r2, #7
   12086:	2100      	movs	r1, #0
   12088:	0018      	movs	r0, r3
   1208a:	4b13      	ldr	r3, [pc, #76]	; (120d8 <RegionEU868RxParamSetupReq+0xa0>)
   1208c:	4798      	blx	r3
   1208e:	1e03      	subs	r3, r0, #0
   12090:	d107      	bne.n	120a2 <RegionEU868RxParamSetupReq+0x6a>
    {
        status &= 0xFD; // Datarate KO
   12092:	230f      	movs	r3, #15
   12094:	18fb      	adds	r3, r7, r3
   12096:	220f      	movs	r2, #15
   12098:	18ba      	adds	r2, r7, r2
   1209a:	7812      	ldrb	r2, [r2, #0]
   1209c:	2102      	movs	r1, #2
   1209e:	438a      	bics	r2, r1
   120a0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
   120a2:	687b      	ldr	r3, [r7, #4]
   120a4:	785b      	ldrb	r3, [r3, #1]
   120a6:	b25b      	sxtb	r3, r3
   120a8:	2205      	movs	r2, #5
   120aa:	2100      	movs	r1, #0
   120ac:	0018      	movs	r0, r3
   120ae:	4b0a      	ldr	r3, [pc, #40]	; (120d8 <RegionEU868RxParamSetupReq+0xa0>)
   120b0:	4798      	blx	r3
   120b2:	1e03      	subs	r3, r0, #0
   120b4:	d107      	bne.n	120c6 <RegionEU868RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
   120b6:	230f      	movs	r3, #15
   120b8:	18fb      	adds	r3, r7, r3
   120ba:	220f      	movs	r2, #15
   120bc:	18ba      	adds	r2, r7, r2
   120be:	7812      	ldrb	r2, [r2, #0]
   120c0:	2104      	movs	r1, #4
   120c2:	438a      	bics	r2, r1
   120c4:	701a      	strb	r2, [r3, #0]
    }

    return status;
   120c6:	230f      	movs	r3, #15
   120c8:	18fb      	adds	r3, r7, r3
   120ca:	781b      	ldrb	r3, [r3, #0]
}
   120cc:	0018      	movs	r0, r3
   120ce:	46bd      	mov	sp, r7
   120d0:	b004      	add	sp, #16
   120d2:	bd80      	pop	{r7, pc}
   120d4:	00011021 	.word	0x00011021
   120d8:	00010559 	.word	0x00010559

000120dc <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
   120dc:	b580      	push	{r7, lr}
   120de:	b086      	sub	sp, #24
   120e0:	af00      	add	r7, sp, #0
   120e2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
   120e4:	2317      	movs	r3, #23
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	2203      	movs	r2, #3
   120ea:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
   120ec:	687b      	ldr	r3, [r7, #4]
   120ee:	681b      	ldr	r3, [r3, #0]
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	2b00      	cmp	r3, #0
   120f4:	d11b      	bne.n	1212e <RegionEU868NewChannelReq+0x52>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
   120f6:	687b      	ldr	r3, [r7, #4]
   120f8:	791b      	ldrb	r3, [r3, #4]
   120fa:	b25b      	sxtb	r3, r3
   120fc:	b2da      	uxtb	r2, r3
   120fe:	2308      	movs	r3, #8
   12100:	18fb      	adds	r3, r7, r3
   12102:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   12104:	2308      	movs	r3, #8
   12106:	18fb      	adds	r3, r7, r3
   12108:	0018      	movs	r0, r3
   1210a:	4b2d      	ldr	r3, [pc, #180]	; (121c0 <RegionEU868NewChannelReq+0xe4>)
   1210c:	4798      	blx	r3
   1210e:	0003      	movs	r3, r0
   12110:	001a      	movs	r2, r3
   12112:	2301      	movs	r3, #1
   12114:	4053      	eors	r3, r2
   12116:	b2db      	uxtb	r3, r3
   12118:	2b00      	cmp	r3, #0
   1211a:	d04a      	beq.n	121b2 <RegionEU868NewChannelReq+0xd6>
        {
            status &= 0xFC;
   1211c:	2317      	movs	r3, #23
   1211e:	18fb      	adds	r3, r7, r3
   12120:	2217      	movs	r2, #23
   12122:	18ba      	adds	r2, r7, r2
   12124:	7812      	ldrb	r2, [r2, #0]
   12126:	2103      	movs	r1, #3
   12128:	438a      	bics	r2, r1
   1212a:	701a      	strb	r2, [r3, #0]
   1212c:	e041      	b.n	121b2 <RegionEU868NewChannelReq+0xd6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
   1212e:	687b      	ldr	r3, [r7, #4]
   12130:	681a      	ldr	r2, [r3, #0]
   12132:	230c      	movs	r3, #12
   12134:	18fb      	adds	r3, r7, r3
   12136:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
   12138:	687b      	ldr	r3, [r7, #4]
   1213a:	791b      	ldrb	r3, [r3, #4]
   1213c:	b25b      	sxtb	r3, r3
   1213e:	b2da      	uxtb	r2, r3
   12140:	230c      	movs	r3, #12
   12142:	18fb      	adds	r3, r7, r3
   12144:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
   12146:	230c      	movs	r3, #12
   12148:	18fb      	adds	r3, r7, r3
   1214a:	0018      	movs	r0, r3
   1214c:	4b1d      	ldr	r3, [pc, #116]	; (121c4 <RegionEU868NewChannelReq+0xe8>)
   1214e:	4798      	blx	r3
   12150:	0003      	movs	r3, r0
   12152:	2b04      	cmp	r3, #4
   12154:	d008      	beq.n	12168 <RegionEU868NewChannelReq+0x8c>
   12156:	dc02      	bgt.n	1215e <RegionEU868NewChannelReq+0x82>
   12158:	2b00      	cmp	r3, #0
   1215a:	d029      	beq.n	121b0 <RegionEU868NewChannelReq+0xd4>
   1215c:	e01f      	b.n	1219e <RegionEU868NewChannelReq+0xc2>
   1215e:	2b05      	cmp	r3, #5
   12160:	d00b      	beq.n	1217a <RegionEU868NewChannelReq+0x9e>
   12162:	2b06      	cmp	r3, #6
   12164:	d012      	beq.n	1218c <RegionEU868NewChannelReq+0xb0>
   12166:	e01a      	b.n	1219e <RegionEU868NewChannelReq+0xc2>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
   12168:	2317      	movs	r3, #23
   1216a:	18fb      	adds	r3, r7, r3
   1216c:	2217      	movs	r2, #23
   1216e:	18ba      	adds	r2, r7, r2
   12170:	7812      	ldrb	r2, [r2, #0]
   12172:	2101      	movs	r1, #1
   12174:	438a      	bics	r2, r1
   12176:	701a      	strb	r2, [r3, #0]
                break;
   12178:	e01b      	b.n	121b2 <RegionEU868NewChannelReq+0xd6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
   1217a:	2317      	movs	r3, #23
   1217c:	18fb      	adds	r3, r7, r3
   1217e:	2217      	movs	r2, #23
   12180:	18ba      	adds	r2, r7, r2
   12182:	7812      	ldrb	r2, [r2, #0]
   12184:	2102      	movs	r1, #2
   12186:	438a      	bics	r2, r1
   12188:	701a      	strb	r2, [r3, #0]
                break;
   1218a:	e012      	b.n	121b2 <RegionEU868NewChannelReq+0xd6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
   1218c:	2317      	movs	r3, #23
   1218e:	18fb      	adds	r3, r7, r3
   12190:	2217      	movs	r2, #23
   12192:	18ba      	adds	r2, r7, r2
   12194:	7812      	ldrb	r2, [r2, #0]
   12196:	2103      	movs	r1, #3
   12198:	438a      	bics	r2, r1
   1219a:	701a      	strb	r2, [r3, #0]
                break;
   1219c:	e009      	b.n	121b2 <RegionEU868NewChannelReq+0xd6>
            }
            default:
            {
                status &= 0xFC;
   1219e:	2317      	movs	r3, #23
   121a0:	18fb      	adds	r3, r7, r3
   121a2:	2217      	movs	r2, #23
   121a4:	18ba      	adds	r2, r7, r2
   121a6:	7812      	ldrb	r2, [r2, #0]
   121a8:	2103      	movs	r1, #3
   121aa:	438a      	bics	r2, r1
   121ac:	701a      	strb	r2, [r3, #0]
                break;
   121ae:	e000      	b.n	121b2 <RegionEU868NewChannelReq+0xd6>
                break;
   121b0:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
   121b2:	2317      	movs	r3, #23
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	781b      	ldrb	r3, [r3, #0]
}
   121b8:	0018      	movs	r0, r3
   121ba:	46bd      	mov	sp, r7
   121bc:	b006      	add	sp, #24
   121be:	bd80      	pop	{r7, pc}
   121c0:	00012679 	.word	0x00012679
   121c4:	00012481 	.word	0x00012481

000121c8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
   121c8:	b580      	push	{r7, lr}
   121ca:	b082      	sub	sp, #8
   121cc:	af00      	add	r7, sp, #0
   121ce:	6078      	str	r0, [r7, #4]
    return -1;
   121d0:	2301      	movs	r3, #1
   121d2:	425b      	negs	r3, r3
}
   121d4:	0018      	movs	r0, r3
   121d6:	46bd      	mov	sp, r7
   121d8:	b002      	add	sp, #8
   121da:	bd80      	pop	{r7, pc}

000121dc <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
   121dc:	b580      	push	{r7, lr}
   121de:	b084      	sub	sp, #16
   121e0:	af00      	add	r7, sp, #0
   121e2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
   121e4:	230f      	movs	r3, #15
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	2203      	movs	r2, #3
   121ea:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
   121ec:	230e      	movs	r3, #14
   121ee:	18fb      	adds	r3, r7, r3
   121f0:	2200      	movs	r2, #0
   121f2:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
   121f4:	687b      	ldr	r3, [r7, #4]
   121f6:	685b      	ldr	r3, [r3, #4]
   121f8:	220e      	movs	r2, #14
   121fa:	18ba      	adds	r2, r7, r2
   121fc:	0011      	movs	r1, r2
   121fe:	0018      	movs	r0, r3
   12200:	4b1e      	ldr	r3, [pc, #120]	; (1227c <RegionEU868DlChannelReq+0xa0>)
   12202:	4798      	blx	r3
   12204:	0003      	movs	r3, r0
   12206:	001a      	movs	r2, r3
   12208:	2301      	movs	r3, #1
   1220a:	4053      	eors	r3, r2
   1220c:	b2db      	uxtb	r3, r3
   1220e:	2b00      	cmp	r3, #0
   12210:	d007      	beq.n	12222 <RegionEU868DlChannelReq+0x46>
    {
        status &= 0xFE;
   12212:	230f      	movs	r3, #15
   12214:	18fb      	adds	r3, r7, r3
   12216:	220f      	movs	r2, #15
   12218:	18ba      	adds	r2, r7, r2
   1221a:	7812      	ldrb	r2, [r2, #0]
   1221c:	2101      	movs	r1, #1
   1221e:	438a      	bics	r2, r1
   12220:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
   12222:	687b      	ldr	r3, [r7, #4]
   12224:	781b      	ldrb	r3, [r3, #0]
   12226:	0019      	movs	r1, r3
   12228:	4a15      	ldr	r2, [pc, #84]	; (12280 <RegionEU868DlChannelReq+0xa4>)
   1222a:	000b      	movs	r3, r1
   1222c:	005b      	lsls	r3, r3, #1
   1222e:	185b      	adds	r3, r3, r1
   12230:	009b      	lsls	r3, r3, #2
   12232:	589b      	ldr	r3, [r3, r2]
   12234:	2b00      	cmp	r3, #0
   12236:	d107      	bne.n	12248 <RegionEU868DlChannelReq+0x6c>
    {
        status &= 0xFD;
   12238:	230f      	movs	r3, #15
   1223a:	18fb      	adds	r3, r7, r3
   1223c:	220f      	movs	r2, #15
   1223e:	18ba      	adds	r2, r7, r2
   12240:	7812      	ldrb	r2, [r2, #0]
   12242:	2102      	movs	r1, #2
   12244:	438a      	bics	r2, r1
   12246:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
   12248:	230f      	movs	r3, #15
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	781b      	ldrb	r3, [r3, #0]
   1224e:	2b03      	cmp	r3, #3
   12250:	d10c      	bne.n	1226c <RegionEU868DlChannelReq+0x90>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
   12252:	687b      	ldr	r3, [r7, #4]
   12254:	781b      	ldrb	r3, [r3, #0]
   12256:	0018      	movs	r0, r3
   12258:	687b      	ldr	r3, [r7, #4]
   1225a:	685a      	ldr	r2, [r3, #4]
   1225c:	4908      	ldr	r1, [pc, #32]	; (12280 <RegionEU868DlChannelReq+0xa4>)
   1225e:	0003      	movs	r3, r0
   12260:	005b      	lsls	r3, r3, #1
   12262:	181b      	adds	r3, r3, r0
   12264:	009b      	lsls	r3, r3, #2
   12266:	18cb      	adds	r3, r1, r3
   12268:	3304      	adds	r3, #4
   1226a:	601a      	str	r2, [r3, #0]
    }

    return status;
   1226c:	230f      	movs	r3, #15
   1226e:	18fb      	adds	r3, r7, r3
   12270:	781b      	ldrb	r3, [r3, #0]
}
   12272:	0018      	movs	r0, r3
   12274:	46bd      	mov	sp, r7
   12276:	b004      	add	sp, #16
   12278:	bd80      	pop	{r7, pc}
   1227a:	46c0      	nop			; (mov r8, r8)
   1227c:	00011021 	.word	0x00011021
   12280:	2000152c 	.word	0x2000152c

00012284 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr )
{
   12284:	b580      	push	{r7, lr}
   12286:	b082      	sub	sp, #8
   12288:	af00      	add	r7, sp, #0
   1228a:	0002      	movs	r2, r0
   1228c:	1dfb      	adds	r3, r7, #7
   1228e:	701a      	strb	r2, [r3, #0]
    return currentDr;
   12290:	1dfb      	adds	r3, r7, #7
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	b25b      	sxtb	r3, r3
}
   12296:	0018      	movs	r0, r3
   12298:	46bd      	mov	sp, r7
   1229a:	b002      	add	sp, #8
   1229c:	bd80      	pop	{r7, pc}
	...

000122a0 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
   122a0:	b580      	push	{r7, lr}
   122a2:	b088      	sub	sp, #32
   122a4:	af00      	add	r7, sp, #0
   122a6:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
   122a8:	2308      	movs	r3, #8
   122aa:	18fb      	adds	r3, r7, r3
   122ac:	4a17      	ldr	r2, [pc, #92]	; (1230c <RegionEU868CalcBackOff+0x6c>)
   122ae:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
   122b0:	2308      	movs	r3, #8
   122b2:	18fb      	adds	r3, r7, r3
   122b4:	4a16      	ldr	r2, [pc, #88]	; (12310 <RegionEU868CalcBackOff+0x70>)
   122b6:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	785a      	ldrb	r2, [r3, #1]
   122bc:	2308      	movs	r3, #8
   122be:	18fb      	adds	r3, r7, r3
   122c0:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
   122c2:	687b      	ldr	r3, [r7, #4]
   122c4:	781a      	ldrb	r2, [r3, #0]
   122c6:	2308      	movs	r3, #8
   122c8:	18fb      	adds	r3, r7, r3
   122ca:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
   122cc:	687b      	ldr	r3, [r7, #4]
   122ce:	789a      	ldrb	r2, [r3, #2]
   122d0:	2308      	movs	r3, #8
   122d2:	18fb      	adds	r3, r7, r3
   122d4:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
   122d6:	687b      	ldr	r3, [r7, #4]
   122d8:	78da      	ldrb	r2, [r3, #3]
   122da:	2308      	movs	r3, #8
   122dc:	18fb      	adds	r3, r7, r3
   122de:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
   122e0:	2308      	movs	r3, #8
   122e2:	18fb      	adds	r3, r7, r3
   122e4:	687a      	ldr	r2, [r7, #4]
   122e6:	330c      	adds	r3, #12
   122e8:	3204      	adds	r2, #4
   122ea:	ca03      	ldmia	r2!, {r0, r1}
   122ec:	c303      	stmia	r3!, {r0, r1}
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
   122ee:	687b      	ldr	r3, [r7, #4]
   122f0:	68da      	ldr	r2, [r3, #12]
   122f2:	2308      	movs	r3, #8
   122f4:	18fb      	adds	r3, r7, r3
   122f6:	615a      	str	r2, [r3, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
   122f8:	2308      	movs	r3, #8
   122fa:	18fb      	adds	r3, r7, r3
   122fc:	0018      	movs	r0, r3
   122fe:	4b05      	ldr	r3, [pc, #20]	; (12314 <RegionEU868CalcBackOff+0x74>)
   12300:	4798      	blx	r3
}
   12302:	46c0      	nop			; (mov r8, r8)
   12304:	46bd      	mov	sp, r7
   12306:	b008      	add	sp, #32
   12308:	bd80      	pop	{r7, pc}
   1230a:	46c0      	nop			; (mov r8, r8)
   1230c:	2000152c 	.word	0x2000152c
   12310:	200015ec 	.word	0x200015ec
   12314:	00010e15 	.word	0x00010e15

00012318 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   12318:	b5b0      	push	{r4, r5, r7, lr}
   1231a:	b090      	sub	sp, #64	; 0x40
   1231c:	af04      	add	r7, sp, #16
   1231e:	60f8      	str	r0, [r7, #12]
   12320:	60b9      	str	r1, [r7, #8]
   12322:	607a      	str	r2, [r7, #4]
   12324:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
   12326:	232f      	movs	r3, #47	; 0x2f
   12328:	18fb      	adds	r3, r7, r3
   1232a:	2200      	movs	r2, #0
   1232c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
   1232e:	2327      	movs	r3, #39	; 0x27
   12330:	18fb      	adds	r3, r7, r3
   12332:	2200      	movs	r2, #0
   12334:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
   12336:	2314      	movs	r3, #20
   12338:	18fb      	adds	r3, r7, r3
   1233a:	0018      	movs	r0, r3
   1233c:	2310      	movs	r3, #16
   1233e:	001a      	movs	r2, r3
   12340:	2100      	movs	r1, #0
   12342:	4b46      	ldr	r3, [pc, #280]	; (1245c <RegionEU868NextChannel+0x144>)
   12344:	4798      	blx	r3
    TimerTime_t nextTxDelay = 0;
   12346:	2300      	movs	r3, #0
   12348:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
   1234a:	4b45      	ldr	r3, [pc, #276]	; (12460 <RegionEU868NextChannel+0x148>)
   1234c:	2201      	movs	r2, #1
   1234e:	2100      	movs	r1, #0
   12350:	0018      	movs	r0, r3
   12352:	4b44      	ldr	r3, [pc, #272]	; (12464 <RegionEU868NextChannel+0x14c>)
   12354:	4798      	blx	r3
   12356:	1e03      	subs	r3, r0, #0
   12358:	d10a      	bne.n	12370 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   1235a:	4a43      	ldr	r2, [pc, #268]	; (12468 <RegionEU868NextChannel+0x150>)
   1235c:	2388      	movs	r3, #136	; 0x88
   1235e:	005b      	lsls	r3, r3, #1
   12360:	5ad3      	ldrh	r3, [r2, r3]
   12362:	2207      	movs	r2, #7
   12364:	4313      	orrs	r3, r2
   12366:	b299      	uxth	r1, r3
   12368:	4a3f      	ldr	r2, [pc, #252]	; (12468 <RegionEU868NextChannel+0x150>)
   1236a:	2388      	movs	r3, #136	; 0x88
   1236c:	005b      	lsls	r3, r3, #1
   1236e:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
   12370:	68fb      	ldr	r3, [r7, #12]
   12372:	681c      	ldr	r4, [r3, #0]
   12374:	68fb      	ldr	r3, [r7, #12]
   12376:	685b      	ldr	r3, [r3, #4]
   12378:	0018      	movs	r0, r3
   1237a:	4b3c      	ldr	r3, [pc, #240]	; (1246c <RegionEU868NextChannel+0x154>)
   1237c:	4798      	blx	r3
   1237e:	0003      	movs	r3, r0
   12380:	429c      	cmp	r4, r3
   12382:	d824      	bhi.n	123ce <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
   12384:	683b      	ldr	r3, [r7, #0]
   12386:	2200      	movs	r2, #0
   12388:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	7a58      	ldrb	r0, [r3, #9]
   1238e:	68fb      	ldr	r3, [r7, #12]
   12390:	7a99      	ldrb	r1, [r3, #10]
   12392:	4a37      	ldr	r2, [pc, #220]	; (12470 <RegionEU868NextChannel+0x158>)
   12394:	2305      	movs	r3, #5
   12396:	4c37      	ldr	r4, [pc, #220]	; (12474 <RegionEU868NextChannel+0x15c>)
   12398:	47a0      	blx	r4
   1239a:	0003      	movs	r3, r0
   1239c:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
   1239e:	68fb      	ldr	r3, [r7, #12]
   123a0:	7a58      	ldrb	r0, [r3, #9]
   123a2:	68fb      	ldr	r3, [r7, #12]
   123a4:	7a1b      	ldrb	r3, [r3, #8]
   123a6:	b25b      	sxtb	r3, r3
   123a8:	b2d9      	uxtb	r1, r3
   123aa:	232f      	movs	r3, #47	; 0x2f
   123ac:	18fc      	adds	r4, r7, r3
   123ae:	4d2e      	ldr	r5, [pc, #184]	; (12468 <RegionEU868NextChannel+0x150>)
   123b0:	4a2b      	ldr	r2, [pc, #172]	; (12460 <RegionEU868NextChannel+0x148>)
   123b2:	2327      	movs	r3, #39	; 0x27
   123b4:	18fb      	adds	r3, r7, r3
   123b6:	9302      	str	r3, [sp, #8]
   123b8:	2314      	movs	r3, #20
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	9301      	str	r3, [sp, #4]
   123be:	4b2c      	ldr	r3, [pc, #176]	; (12470 <RegionEU868NextChannel+0x158>)
   123c0:	9300      	str	r3, [sp, #0]
   123c2:	002b      	movs	r3, r5
   123c4:	4d2c      	ldr	r5, [pc, #176]	; (12478 <RegionEU868NextChannel+0x160>)
   123c6:	47a8      	blx	r5
   123c8:	0003      	movs	r3, r0
   123ca:	7023      	strb	r3, [r4, #0]
   123cc:	e011      	b.n	123f2 <RegionEU868NextChannel+0xda>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
   123ce:	2327      	movs	r3, #39	; 0x27
   123d0:	18fb      	adds	r3, r7, r3
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	3301      	adds	r3, #1
   123d6:	b2da      	uxtb	r2, r3
   123d8:	2327      	movs	r3, #39	; 0x27
   123da:	18fb      	adds	r3, r7, r3
   123dc:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
   123de:	68fb      	ldr	r3, [r7, #12]
   123e0:	681c      	ldr	r4, [r3, #0]
   123e2:	68fb      	ldr	r3, [r7, #12]
   123e4:	685b      	ldr	r3, [r3, #4]
   123e6:	0018      	movs	r0, r3
   123e8:	4b20      	ldr	r3, [pc, #128]	; (1246c <RegionEU868NextChannel+0x154>)
   123ea:	4798      	blx	r3
   123ec:	0003      	movs	r3, r0
   123ee:	1ae3      	subs	r3, r4, r3
   123f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
   123f2:	232f      	movs	r3, #47	; 0x2f
   123f4:	18fb      	adds	r3, r7, r3
   123f6:	781b      	ldrb	r3, [r3, #0]
   123f8:	2b00      	cmp	r3, #0
   123fa:	d012      	beq.n	12422 <RegionEU868NextChannel+0x10a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
   123fc:	232f      	movs	r3, #47	; 0x2f
   123fe:	18fb      	adds	r3, r7, r3
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	3b01      	subs	r3, #1
   12404:	0019      	movs	r1, r3
   12406:	2000      	movs	r0, #0
   12408:	4b1c      	ldr	r3, [pc, #112]	; (1247c <RegionEU868NextChannel+0x164>)
   1240a:	4798      	blx	r3
   1240c:	0002      	movs	r2, r0
   1240e:	2314      	movs	r3, #20
   12410:	18fb      	adds	r3, r7, r3
   12412:	5c9a      	ldrb	r2, [r3, r2]
   12414:	68bb      	ldr	r3, [r7, #8]
   12416:	701a      	strb	r2, [r3, #0]

        *time = 0;
   12418:	687b      	ldr	r3, [r7, #4]
   1241a:	2200      	movs	r2, #0
   1241c:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
   1241e:	2300      	movs	r3, #0
   12420:	e018      	b.n	12454 <RegionEU868NextChannel+0x13c>
    }
    else
    {
        if( delayTx > 0 )
   12422:	2327      	movs	r3, #39	; 0x27
   12424:	18fb      	adds	r3, r7, r3
   12426:	781b      	ldrb	r3, [r3, #0]
   12428:	2b00      	cmp	r3, #0
   1242a:	d004      	beq.n	12436 <RegionEU868NextChannel+0x11e>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
   1242c:	687b      	ldr	r3, [r7, #4]
   1242e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12430:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
   12432:	230b      	movs	r3, #11
   12434:	e00e      	b.n	12454 <RegionEU868NextChannel+0x13c>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   12436:	4a0c      	ldr	r2, [pc, #48]	; (12468 <RegionEU868NextChannel+0x150>)
   12438:	2388      	movs	r3, #136	; 0x88
   1243a:	005b      	lsls	r3, r3, #1
   1243c:	5ad3      	ldrh	r3, [r2, r3]
   1243e:	2207      	movs	r2, #7
   12440:	4313      	orrs	r3, r2
   12442:	b299      	uxth	r1, r3
   12444:	4a08      	ldr	r2, [pc, #32]	; (12468 <RegionEU868NextChannel+0x150>)
   12446:	2388      	movs	r3, #136	; 0x88
   12448:	005b      	lsls	r3, r3, #1
   1244a:	52d1      	strh	r1, [r2, r3]
        *time = 0;
   1244c:	687b      	ldr	r3, [r7, #4]
   1244e:	2200      	movs	r2, #0
   12450:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
   12452:	230c      	movs	r3, #12
    }
}
   12454:	0018      	movs	r0, r3
   12456:	46bd      	mov	sp, r7
   12458:	b00c      	add	sp, #48	; 0x30
   1245a:	bdb0      	pop	{r4, r5, r7, pc}
   1245c:	00019be9 	.word	0x00019be9
   12460:	2000163c 	.word	0x2000163c
   12464:	0001062d 	.word	0x0001062d
   12468:	2000152c 	.word	0x2000152c
   1246c:	00017199 	.word	0x00017199
   12470:	200015ec 	.word	0x200015ec
   12474:	00010755 	.word	0x00010755
   12478:	00011111 	.word	0x00011111
   1247c:	00004305 	.word	0x00004305

00012480 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
   12480:	b580      	push	{r7, lr}
   12482:	b084      	sub	sp, #16
   12484:	af00      	add	r7, sp, #0
   12486:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
   12488:	230c      	movs	r3, #12
   1248a:	18fb      	adds	r3, r7, r3
   1248c:	2200      	movs	r2, #0
   1248e:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
   12490:	230f      	movs	r3, #15
   12492:	18fb      	adds	r3, r7, r3
   12494:	2200      	movs	r2, #0
   12496:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
   12498:	230e      	movs	r3, #14
   1249a:	18fb      	adds	r3, r7, r3
   1249c:	2200      	movs	r2, #0
   1249e:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
   124a0:	230d      	movs	r3, #13
   124a2:	18fb      	adds	r3, r7, r3
   124a4:	687a      	ldr	r2, [r7, #4]
   124a6:	7912      	ldrb	r2, [r2, #4]
   124a8:	701a      	strb	r2, [r3, #0]

    if( id >= EU868_MAX_NB_CHANNELS )
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781b      	ldrb	r3, [r3, #0]
   124b0:	2b0f      	cmp	r3, #15
   124b2:	d901      	bls.n	124b8 <RegionEU868ChannelAdd+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
   124b4:	2303      	movs	r3, #3
   124b6:	e0d2      	b.n	1265e <RegionEU868ChannelAdd+0x1de>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   124b8:	687b      	ldr	r3, [r7, #4]
   124ba:	681b      	ldr	r3, [r3, #0]
   124bc:	7a1b      	ldrb	r3, [r3, #8]
   124be:	011b      	lsls	r3, r3, #4
   124c0:	b25b      	sxtb	r3, r3
   124c2:	111b      	asrs	r3, r3, #4
   124c4:	b25b      	sxtb	r3, r3
   124c6:	2207      	movs	r2, #7
   124c8:	2100      	movs	r1, #0
   124ca:	0018      	movs	r0, r3
   124cc:	4b66      	ldr	r3, [pc, #408]	; (12668 <RegionEU868ChannelAdd+0x1e8>)
   124ce:	4798      	blx	r3
   124d0:	1e03      	subs	r3, r0, #0
   124d2:	d103      	bne.n	124dc <RegionEU868ChannelAdd+0x5c>
    {
        drInvalid = true;
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	2201      	movs	r2, #1
   124da:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   124dc:	687b      	ldr	r3, [r7, #4]
   124de:	681b      	ldr	r3, [r3, #0]
   124e0:	7a1b      	ldrb	r3, [r3, #8]
   124e2:	b25b      	sxtb	r3, r3
   124e4:	111b      	asrs	r3, r3, #4
   124e6:	b25b      	sxtb	r3, r3
   124e8:	2207      	movs	r2, #7
   124ea:	2100      	movs	r1, #0
   124ec:	0018      	movs	r0, r3
   124ee:	4b5e      	ldr	r3, [pc, #376]	; (12668 <RegionEU868ChannelAdd+0x1e8>)
   124f0:	4798      	blx	r3
   124f2:	1e03      	subs	r3, r0, #0
   124f4:	d103      	bne.n	124fe <RegionEU868ChannelAdd+0x7e>
    {
        drInvalid = true;
   124f6:	230f      	movs	r3, #15
   124f8:	18fb      	adds	r3, r7, r3
   124fa:	2201      	movs	r2, #1
   124fc:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   124fe:	687b      	ldr	r3, [r7, #4]
   12500:	681b      	ldr	r3, [r3, #0]
   12502:	7a1b      	ldrb	r3, [r3, #8]
   12504:	011b      	lsls	r3, r3, #4
   12506:	b25b      	sxtb	r3, r3
   12508:	111b      	asrs	r3, r3, #4
   1250a:	b25a      	sxtb	r2, r3
   1250c:	687b      	ldr	r3, [r7, #4]
   1250e:	681b      	ldr	r3, [r3, #0]
   12510:	7a1b      	ldrb	r3, [r3, #8]
   12512:	b25b      	sxtb	r3, r3
   12514:	111b      	asrs	r3, r3, #4
   12516:	b25b      	sxtb	r3, r3
   12518:	429a      	cmp	r2, r3
   1251a:	dd03      	ble.n	12524 <RegionEU868ChannelAdd+0xa4>
    {
        drInvalid = true;
   1251c:	230f      	movs	r3, #15
   1251e:	18fb      	adds	r3, r7, r3
   12520:	2201      	movs	r2, #1
   12522:	701a      	strb	r2, [r3, #0]
    }

    // Default channels don't accept all values
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   12524:	230d      	movs	r3, #13
   12526:	18fb      	adds	r3, r7, r3
   12528:	781b      	ldrb	r3, [r3, #0]
   1252a:	2b02      	cmp	r3, #2
   1252c:	d82f      	bhi.n	1258e <RegionEU868ChannelAdd+0x10e>
    {
        // Validate the datarate range for min: must be DR_0
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
   1252e:	687b      	ldr	r3, [r7, #4]
   12530:	681b      	ldr	r3, [r3, #0]
   12532:	7a1b      	ldrb	r3, [r3, #8]
   12534:	011b      	lsls	r3, r3, #4
   12536:	b25b      	sxtb	r3, r3
   12538:	111b      	asrs	r3, r3, #4
   1253a:	b25b      	sxtb	r3, r3
   1253c:	2b00      	cmp	r3, #0
   1253e:	dd03      	ble.n	12548 <RegionEU868ChannelAdd+0xc8>
        {
            drInvalid = true;
   12540:	230f      	movs	r3, #15
   12542:	18fb      	adds	r3, r7, r3
   12544:	2201      	movs	r2, #1
   12546:	701a      	strb	r2, [r3, #0]
        }
        // Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
   12548:	687b      	ldr	r3, [r7, #4]
   1254a:	681b      	ldr	r3, [r3, #0]
   1254c:	7a1b      	ldrb	r3, [r3, #8]
   1254e:	b25b      	sxtb	r3, r3
   12550:	111b      	asrs	r3, r3, #4
   12552:	b25b      	sxtb	r3, r3
   12554:	2207      	movs	r2, #7
   12556:	2105      	movs	r1, #5
   12558:	0018      	movs	r0, r3
   1255a:	4b43      	ldr	r3, [pc, #268]	; (12668 <RegionEU868ChannelAdd+0x1e8>)
   1255c:	4798      	blx	r3
   1255e:	1e03      	subs	r3, r0, #0
   12560:	d103      	bne.n	1256a <RegionEU868ChannelAdd+0xea>
        {
            drInvalid = true;
   12562:	230f      	movs	r3, #15
   12564:	18fb      	adds	r3, r7, r3
   12566:	2201      	movs	r2, #1
   12568:	701a      	strb	r2, [r3, #0]
        }
        // We are not allowed to change the frequency
        if( channelAdd->NewChannel->Frequency != NvmCtx.Channels[id].Frequency )
   1256a:	687b      	ldr	r3, [r7, #4]
   1256c:	681b      	ldr	r3, [r3, #0]
   1256e:	6819      	ldr	r1, [r3, #0]
   12570:	230d      	movs	r3, #13
   12572:	18fb      	adds	r3, r7, r3
   12574:	781a      	ldrb	r2, [r3, #0]
   12576:	483d      	ldr	r0, [pc, #244]	; (1266c <RegionEU868ChannelAdd+0x1ec>)
   12578:	0013      	movs	r3, r2
   1257a:	005b      	lsls	r3, r3, #1
   1257c:	189b      	adds	r3, r3, r2
   1257e:	009b      	lsls	r3, r3, #2
   12580:	581b      	ldr	r3, [r3, r0]
   12582:	4299      	cmp	r1, r3
   12584:	d003      	beq.n	1258e <RegionEU868ChannelAdd+0x10e>
        {
            freqInvalid = true;
   12586:	230e      	movs	r3, #14
   12588:	18fb      	adds	r3, r7, r3
   1258a:	2201      	movs	r2, #1
   1258c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check frequency
    if( freqInvalid == false )
   1258e:	230e      	movs	r3, #14
   12590:	18fb      	adds	r3, r7, r3
   12592:	781b      	ldrb	r3, [r3, #0]
   12594:	2201      	movs	r2, #1
   12596:	4053      	eors	r3, r2
   12598:	b2db      	uxtb	r3, r3
   1259a:	2b00      	cmp	r3, #0
   1259c:	d013      	beq.n	125c6 <RegionEU868ChannelAdd+0x146>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   1259e:	687b      	ldr	r3, [r7, #4]
   125a0:	681b      	ldr	r3, [r3, #0]
   125a2:	681b      	ldr	r3, [r3, #0]
   125a4:	220c      	movs	r2, #12
   125a6:	18ba      	adds	r2, r7, r2
   125a8:	0011      	movs	r1, r2
   125aa:	0018      	movs	r0, r3
   125ac:	4b30      	ldr	r3, [pc, #192]	; (12670 <RegionEU868ChannelAdd+0x1f0>)
   125ae:	4798      	blx	r3
   125b0:	0003      	movs	r3, r0
   125b2:	001a      	movs	r2, r3
   125b4:	2301      	movs	r3, #1
   125b6:	4053      	eors	r3, r2
   125b8:	b2db      	uxtb	r3, r3
   125ba:	2b00      	cmp	r3, #0
   125bc:	d003      	beq.n	125c6 <RegionEU868ChannelAdd+0x146>
        {
            freqInvalid = true;
   125be:	230e      	movs	r3, #14
   125c0:	18fb      	adds	r3, r7, r3
   125c2:	2201      	movs	r2, #1
   125c4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   125c6:	230f      	movs	r3, #15
   125c8:	18fb      	adds	r3, r7, r3
   125ca:	781b      	ldrb	r3, [r3, #0]
   125cc:	2b00      	cmp	r3, #0
   125ce:	d006      	beq.n	125de <RegionEU868ChannelAdd+0x15e>
   125d0:	230e      	movs	r3, #14
   125d2:	18fb      	adds	r3, r7, r3
   125d4:	781b      	ldrb	r3, [r3, #0]
   125d6:	2b00      	cmp	r3, #0
   125d8:	d001      	beq.n	125de <RegionEU868ChannelAdd+0x15e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   125da:	2306      	movs	r3, #6
   125dc:	e03f      	b.n	1265e <RegionEU868ChannelAdd+0x1de>
    }
    if( drInvalid == true )
   125de:	230f      	movs	r3, #15
   125e0:	18fb      	adds	r3, r7, r3
   125e2:	781b      	ldrb	r3, [r3, #0]
   125e4:	2b00      	cmp	r3, #0
   125e6:	d001      	beq.n	125ec <RegionEU868ChannelAdd+0x16c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
   125e8:	2305      	movs	r3, #5
   125ea:	e038      	b.n	1265e <RegionEU868ChannelAdd+0x1de>
    }
    if( freqInvalid == true )
   125ec:	230e      	movs	r3, #14
   125ee:	18fb      	adds	r3, r7, r3
   125f0:	781b      	ldrb	r3, [r3, #0]
   125f2:	2b00      	cmp	r3, #0
   125f4:	d001      	beq.n	125fa <RegionEU868ChannelAdd+0x17a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
   125f6:	2304      	movs	r3, #4
   125f8:	e031      	b.n	1265e <RegionEU868ChannelAdd+0x1de>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
   125fa:	230d      	movs	r3, #13
   125fc:	18fb      	adds	r3, r7, r3
   125fe:	781a      	ldrb	r2, [r3, #0]
   12600:	0013      	movs	r3, r2
   12602:	005b      	lsls	r3, r3, #1
   12604:	189b      	adds	r3, r3, r2
   12606:	009b      	lsls	r3, r3, #2
   12608:	4a18      	ldr	r2, [pc, #96]	; (1266c <RegionEU868ChannelAdd+0x1ec>)
   1260a:	1898      	adds	r0, r3, r2
   1260c:	687b      	ldr	r3, [r7, #4]
   1260e:	681b      	ldr	r3, [r3, #0]
   12610:	220c      	movs	r2, #12
   12612:	0019      	movs	r1, r3
   12614:	4b17      	ldr	r3, [pc, #92]	; (12674 <RegionEU868ChannelAdd+0x1f4>)
   12616:	4798      	blx	r3
    NvmCtx.Channels[id].Band = band;
   12618:	230d      	movs	r3, #13
   1261a:	18fb      	adds	r3, r7, r3
   1261c:	781a      	ldrb	r2, [r3, #0]
   1261e:	230c      	movs	r3, #12
   12620:	18fb      	adds	r3, r7, r3
   12622:	7818      	ldrb	r0, [r3, #0]
   12624:	4911      	ldr	r1, [pc, #68]	; (1266c <RegionEU868ChannelAdd+0x1ec>)
   12626:	0013      	movs	r3, r2
   12628:	005b      	lsls	r3, r3, #1
   1262a:	189b      	adds	r3, r3, r2
   1262c:	009b      	lsls	r3, r3, #2
   1262e:	18cb      	adds	r3, r1, r3
   12630:	3309      	adds	r3, #9
   12632:	1c02      	adds	r2, r0, #0
   12634:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
   12636:	4a0d      	ldr	r2, [pc, #52]	; (1266c <RegionEU868ChannelAdd+0x1ec>)
   12638:	2388      	movs	r3, #136	; 0x88
   1263a:	005b      	lsls	r3, r3, #1
   1263c:	5ad3      	ldrh	r3, [r2, r3]
   1263e:	b21a      	sxth	r2, r3
   12640:	230d      	movs	r3, #13
   12642:	18fb      	adds	r3, r7, r3
   12644:	781b      	ldrb	r3, [r3, #0]
   12646:	2101      	movs	r1, #1
   12648:	4099      	lsls	r1, r3
   1264a:	000b      	movs	r3, r1
   1264c:	b21b      	sxth	r3, r3
   1264e:	4313      	orrs	r3, r2
   12650:	b21b      	sxth	r3, r3
   12652:	b299      	uxth	r1, r3
   12654:	4a05      	ldr	r2, [pc, #20]	; (1266c <RegionEU868ChannelAdd+0x1ec>)
   12656:	2388      	movs	r3, #136	; 0x88
   12658:	005b      	lsls	r3, r3, #1
   1265a:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
   1265c:	2300      	movs	r3, #0
}
   1265e:	0018      	movs	r0, r3
   12660:	46bd      	mov	sp, r7
   12662:	b004      	add	sp, #16
   12664:	bd80      	pop	{r7, pc}
   12666:	46c0      	nop			; (mov r8, r8)
   12668:	00010559 	.word	0x00010559
   1266c:	2000152c 	.word	0x2000152c
   12670:	00011021 	.word	0x00011021
   12674:	00004339 	.word	0x00004339

00012678 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
   12678:	b580      	push	{r7, lr}
   1267a:	b084      	sub	sp, #16
   1267c:	af00      	add	r7, sp, #0
   1267e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
   12680:	230f      	movs	r3, #15
   12682:	18fb      	adds	r3, r7, r3
   12684:	687a      	ldr	r2, [r7, #4]
   12686:	7812      	ldrb	r2, [r2, #0]
   12688:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   1268a:	230f      	movs	r3, #15
   1268c:	18fb      	adds	r3, r7, r3
   1268e:	781b      	ldrb	r3, [r3, #0]
   12690:	2b02      	cmp	r3, #2
   12692:	d801      	bhi.n	12698 <RegionEU868ChannelsRemove+0x20>
    {
        return false;
   12694:	2300      	movs	r3, #0
   12696:	e016      	b.n	126c6 <RegionEU868ChannelsRemove+0x4e>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
   12698:	230f      	movs	r3, #15
   1269a:	18fb      	adds	r3, r7, r3
   1269c:	781a      	ldrb	r2, [r3, #0]
   1269e:	490c      	ldr	r1, [pc, #48]	; (126d0 <RegionEU868ChannelsRemove+0x58>)
   126a0:	0013      	movs	r3, r2
   126a2:	005b      	lsls	r3, r3, #1
   126a4:	189b      	adds	r3, r3, r2
   126a6:	009b      	lsls	r3, r3, #2
   126a8:	18cb      	adds	r3, r1, r3
   126aa:	220c      	movs	r2, #12
   126ac:	2100      	movs	r1, #0
   126ae:	0018      	movs	r0, r3
   126b0:	4b08      	ldr	r3, [pc, #32]	; (126d4 <RegionEU868ChannelsRemove+0x5c>)
   126b2:	4798      	blx	r3

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   126b4:	230f      	movs	r3, #15
   126b6:	18fb      	adds	r3, r7, r3
   126b8:	7819      	ldrb	r1, [r3, #0]
   126ba:	4b07      	ldr	r3, [pc, #28]	; (126d8 <RegionEU868ChannelsRemove+0x60>)
   126bc:	2210      	movs	r2, #16
   126be:	0018      	movs	r0, r3
   126c0:	4b06      	ldr	r3, [pc, #24]	; (126dc <RegionEU868ChannelsRemove+0x64>)
   126c2:	4798      	blx	r3
   126c4:	0003      	movs	r3, r0
}
   126c6:	0018      	movs	r0, r3
   126c8:	46bd      	mov	sp, r7
   126ca:	b004      	add	sp, #16
   126cc:	bd80      	pop	{r7, pc}
   126ce:	46c0      	nop			; (mov r8, r8)
   126d0:	2000152c 	.word	0x2000152c
   126d4:	00019be9 	.word	0x00019be9
   126d8:	2000163c 	.word	0x2000163c
   126dc:	000105a5 	.word	0x000105a5

000126e0 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
   126e0:	b5b0      	push	{r4, r5, r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	2002      	movs	r0, #2
   126ec:	5618      	ldrsb	r0, [r3, r0]
   126ee:	687b      	ldr	r3, [r7, #4]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	0019      	movs	r1, r3
   126f4:	4a22      	ldr	r2, [pc, #136]	; (12780 <RegionEU868SetContinuousWave+0xa0>)
   126f6:	000b      	movs	r3, r1
   126f8:	005b      	lsls	r3, r3, #1
   126fa:	185b      	adds	r3, r3, r1
   126fc:	009b      	lsls	r3, r3, #2
   126fe:	18d3      	adds	r3, r2, r3
   12700:	3309      	adds	r3, #9
   12702:	781b      	ldrb	r3, [r3, #0]
   12704:	4a1e      	ldr	r2, [pc, #120]	; (12780 <RegionEU868SetContinuousWave+0xa0>)
   12706:	330c      	adds	r3, #12
   12708:	011b      	lsls	r3, r3, #4
   1270a:	18d3      	adds	r3, r2, r3
   1270c:	3302      	adds	r3, #2
   1270e:	2100      	movs	r1, #0
   12710:	5659      	ldrsb	r1, [r3, r1]
   12712:	687b      	ldr	r3, [r7, #4]
   12714:	2201      	movs	r2, #1
   12716:	569a      	ldrsb	r2, [r3, r2]
   12718:	230f      	movs	r3, #15
   1271a:	18fc      	adds	r4, r7, r3
   1271c:	4b19      	ldr	r3, [pc, #100]	; (12784 <RegionEU868SetContinuousWave+0xa4>)
   1271e:	4d1a      	ldr	r5, [pc, #104]	; (12788 <RegionEU868SetContinuousWave+0xa8>)
   12720:	47a8      	blx	r5
   12722:	0003      	movs	r3, r0
   12724:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
   12726:	230e      	movs	r3, #14
   12728:	18fb      	adds	r3, r7, r3
   1272a:	2200      	movs	r2, #0
   1272c:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
   1272e:	687b      	ldr	r3, [r7, #4]
   12730:	781b      	ldrb	r3, [r3, #0]
   12732:	0019      	movs	r1, r3
   12734:	4a12      	ldr	r2, [pc, #72]	; (12780 <RegionEU868SetContinuousWave+0xa0>)
   12736:	000b      	movs	r3, r1
   12738:	005b      	lsls	r3, r3, #1
   1273a:	185b      	adds	r3, r3, r1
   1273c:	009b      	lsls	r3, r3, #2
   1273e:	589b      	ldr	r3, [r3, r2]
   12740:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	6859      	ldr	r1, [r3, #4]
   12746:	687b      	ldr	r3, [r7, #4]
   12748:	689a      	ldr	r2, [r3, #8]
   1274a:	230e      	movs	r3, #14
   1274c:	18fc      	adds	r4, r7, r3
   1274e:	230f      	movs	r3, #15
   12750:	18fb      	adds	r3, r7, r3
   12752:	781b      	ldrb	r3, [r3, #0]
   12754:	b25b      	sxtb	r3, r3
   12756:	0018      	movs	r0, r3
   12758:	4b0c      	ldr	r3, [pc, #48]	; (1278c <RegionEU868SetContinuousWave+0xac>)
   1275a:	4798      	blx	r3
   1275c:	0003      	movs	r3, r0
   1275e:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
   12760:	4b0b      	ldr	r3, [pc, #44]	; (12790 <RegionEU868SetContinuousWave+0xb0>)
   12762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   12764:	687a      	ldr	r2, [r7, #4]
   12766:	8994      	ldrh	r4, [r2, #12]
   12768:	220e      	movs	r2, #14
   1276a:	18ba      	adds	r2, r7, r2
   1276c:	2100      	movs	r1, #0
   1276e:	5651      	ldrsb	r1, [r2, r1]
   12770:	68b8      	ldr	r0, [r7, #8]
   12772:	0022      	movs	r2, r4
   12774:	4798      	blx	r3
}
   12776:	46c0      	nop			; (mov r8, r8)
   12778:	46bd      	mov	sp, r7
   1277a:	b004      	add	sp, #16
   1277c:	bdb0      	pop	{r4, r5, r7, pc}
   1277e:	46c0      	nop			; (mov r8, r8)
   12780:	2000152c 	.word	0x2000152c
   12784:	2000163c 	.word	0x2000163c
   12788:	00010fcd 	.word	0x00010fcd
   1278c:	00010d85 	.word	0x00010d85
   12790:	0001f2a4 	.word	0x0001f2a4

00012794 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
   12794:	b590      	push	{r4, r7, lr}
   12796:	b085      	sub	sp, #20
   12798:	af00      	add	r7, sp, #0
   1279a:	0004      	movs	r4, r0
   1279c:	0008      	movs	r0, r1
   1279e:	0011      	movs	r1, r2
   127a0:	1dfb      	adds	r3, r7, #7
   127a2:	1c22      	adds	r2, r4, #0
   127a4:	701a      	strb	r2, [r3, #0]
   127a6:	1dbb      	adds	r3, r7, #6
   127a8:	1c02      	adds	r2, r0, #0
   127aa:	701a      	strb	r2, [r3, #0]
   127ac:	1d7b      	adds	r3, r7, #5
   127ae:	1c0a      	adds	r2, r1, #0
   127b0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
   127b2:	1dbb      	adds	r3, r7, #6
   127b4:	781a      	ldrb	r2, [r3, #0]
   127b6:	1d7b      	adds	r3, r7, #5
   127b8:	781b      	ldrb	r3, [r3, #0]
   127ba:	1ad3      	subs	r3, r2, r3
   127bc:	b2da      	uxtb	r2, r3
   127be:	230f      	movs	r3, #15
   127c0:	18fb      	adds	r3, r7, r3
   127c2:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
   127c4:	230f      	movs	r3, #15
   127c6:	18fb      	adds	r3, r7, r3
   127c8:	781b      	ldrb	r3, [r3, #0]
   127ca:	2b7f      	cmp	r3, #127	; 0x7f
   127cc:	d903      	bls.n	127d6 <RegionEU868ApplyDrOffset+0x42>
    {
        datarate = DR_0;
   127ce:	230f      	movs	r3, #15
   127d0:	18fb      	adds	r3, r7, r3
   127d2:	2200      	movs	r2, #0
   127d4:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
   127d6:	230f      	movs	r3, #15
   127d8:	18fb      	adds	r3, r7, r3
   127da:	781b      	ldrb	r3, [r3, #0]
}
   127dc:	0018      	movs	r0, r3
   127de:	46bd      	mov	sp, r7
   127e0:	b005      	add	sp, #20
   127e2:	bd90      	pop	{r4, r7, pc}

000127e4 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
   127e4:	b580      	push	{r7, lr}
   127e6:	b084      	sub	sp, #16
   127e8:	af00      	add	r7, sp, #0
   127ea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
   127ec:	4b2f      	ldr	r3, [pc, #188]	; (128ac <SX1276Init+0xc8>)
   127ee:	687a      	ldr	r2, [r7, #4]
   127f0:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   127f2:	4a2f      	ldr	r2, [pc, #188]	; (128b0 <SX1276Init+0xcc>)
   127f4:	4b2f      	ldr	r3, [pc, #188]	; (128b4 <SX1276Init+0xd0>)
   127f6:	0011      	movs	r1, r2
   127f8:	0018      	movs	r0, r3
   127fa:	4b2f      	ldr	r3, [pc, #188]	; (128b8 <SX1276Init+0xd4>)
   127fc:	4798      	blx	r3
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   127fe:	4a2c      	ldr	r2, [pc, #176]	; (128b0 <SX1276Init+0xcc>)
   12800:	4b2e      	ldr	r3, [pc, #184]	; (128bc <SX1276Init+0xd8>)
   12802:	0011      	movs	r1, r2
   12804:	0018      	movs	r0, r3
   12806:	4b2c      	ldr	r3, [pc, #176]	; (128b8 <SX1276Init+0xd4>)
   12808:	4798      	blx	r3
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   1280a:	4a29      	ldr	r2, [pc, #164]	; (128b0 <SX1276Init+0xcc>)
   1280c:	4b2c      	ldr	r3, [pc, #176]	; (128c0 <SX1276Init+0xdc>)
   1280e:	0011      	movs	r1, r2
   12810:	0018      	movs	r0, r3
   12812:	4b29      	ldr	r3, [pc, #164]	; (128b8 <SX1276Init+0xd4>)
   12814:	4798      	blx	r3

    SX1276Reset( );
   12816:	4b2b      	ldr	r3, [pc, #172]	; (128c4 <SX1276Init+0xe0>)
   12818:	4798      	blx	r3

    RxChainCalibration( );
   1281a:	4b2b      	ldr	r3, [pc, #172]	; (128c8 <SX1276Init+0xe4>)
   1281c:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1281e:	2000      	movs	r0, #0
   12820:	4b2a      	ldr	r3, [pc, #168]	; (128cc <SX1276Init+0xe8>)
   12822:	4798      	blx	r3

    SX1276IoIrqInit( DioIrq );
   12824:	4b2a      	ldr	r3, [pc, #168]	; (128d0 <SX1276Init+0xec>)
   12826:	0018      	movs	r0, r3
   12828:	4b2a      	ldr	r3, [pc, #168]	; (128d4 <SX1276Init+0xf0>)
   1282a:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1282c:	230f      	movs	r3, #15
   1282e:	18fb      	adds	r3, r7, r3
   12830:	2200      	movs	r2, #0
   12832:	701a      	strb	r2, [r3, #0]
   12834:	e029      	b.n	1288a <SX1276Init+0xa6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
   12836:	230f      	movs	r3, #15
   12838:	18fb      	adds	r3, r7, r3
   1283a:	781a      	ldrb	r2, [r3, #0]
   1283c:	4926      	ldr	r1, [pc, #152]	; (128d8 <SX1276Init+0xf4>)
   1283e:	0013      	movs	r3, r2
   12840:	005b      	lsls	r3, r3, #1
   12842:	189b      	adds	r3, r3, r2
   12844:	5c5b      	ldrb	r3, [r3, r1]
   12846:	0018      	movs	r0, r3
   12848:	4b24      	ldr	r3, [pc, #144]	; (128dc <SX1276Init+0xf8>)
   1284a:	4798      	blx	r3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1284c:	230f      	movs	r3, #15
   1284e:	18fb      	adds	r3, r7, r3
   12850:	781a      	ldrb	r2, [r3, #0]
   12852:	4921      	ldr	r1, [pc, #132]	; (128d8 <SX1276Init+0xf4>)
   12854:	0013      	movs	r3, r2
   12856:	005b      	lsls	r3, r3, #1
   12858:	189b      	adds	r3, r3, r2
   1285a:	18cb      	adds	r3, r1, r3
   1285c:	3301      	adds	r3, #1
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	b298      	uxth	r0, r3
   12862:	230f      	movs	r3, #15
   12864:	18fb      	adds	r3, r7, r3
   12866:	781a      	ldrb	r2, [r3, #0]
   12868:	491b      	ldr	r1, [pc, #108]	; (128d8 <SX1276Init+0xf4>)
   1286a:	0013      	movs	r3, r2
   1286c:	005b      	lsls	r3, r3, #1
   1286e:	189b      	adds	r3, r3, r2
   12870:	18cb      	adds	r3, r1, r3
   12872:	3302      	adds	r3, #2
   12874:	781b      	ldrb	r3, [r3, #0]
   12876:	0019      	movs	r1, r3
   12878:	4b19      	ldr	r3, [pc, #100]	; (128e0 <SX1276Init+0xfc>)
   1287a:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1287c:	230f      	movs	r3, #15
   1287e:	18fb      	adds	r3, r7, r3
   12880:	781a      	ldrb	r2, [r3, #0]
   12882:	230f      	movs	r3, #15
   12884:	18fb      	adds	r3, r7, r3
   12886:	3201      	adds	r2, #1
   12888:	701a      	strb	r2, [r3, #0]
   1288a:	230f      	movs	r3, #15
   1288c:	18fb      	adds	r3, r7, r3
   1288e:	781b      	ldrb	r3, [r3, #0]
   12890:	2b0f      	cmp	r3, #15
   12892:	d9d0      	bls.n	12836 <SX1276Init+0x52>
    }

    SX1276SetModem( MODEM_FSK );
   12894:	2000      	movs	r0, #0
   12896:	4b11      	ldr	r3, [pc, #68]	; (128dc <SX1276Init+0xf8>)
   12898:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
   1289a:	4b12      	ldr	r3, [pc, #72]	; (128e4 <SX1276Init+0x100>)
   1289c:	2288      	movs	r2, #136	; 0x88
   1289e:	2100      	movs	r1, #0
   128a0:	5499      	strb	r1, [r3, r2]
}
   128a2:	46c0      	nop			; (mov r8, r8)
   128a4:	46bd      	mov	sp, r7
   128a6:	b004      	add	sp, #16
   128a8:	bd80      	pop	{r7, pc}
   128aa:	46c0      	nop			; (mov r8, r8)
   128ac:	20001640 	.word	0x20001640
   128b0:	000144a5 	.word	0x000144a5
   128b4:	20001bd0 	.word	0x20001bd0
   128b8:	00016d5d 	.word	0x00016d5d
   128bc:	20001ce4 	.word	0x20001ce4
   128c0:	20001be4 	.word	0x20001be4
   128c4:	000055c5 	.word	0x000055c5
   128c8:	00012ac9 	.word	0x00012ac9
   128cc:	000140cd 	.word	0x000140cd
   128d0:	20000100 	.word	0x20000100
   128d4:	0000553d 	.word	0x0000553d
   128d8:	0001f7f0 	.word	0x0001f7f0
   128dc:	00014135 	.word	0x00014135
   128e0:	000141fd 	.word	0x000141fd
   128e4:	20001bf8 	.word	0x20001bf8

000128e8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
   128e8:	b580      	push	{r7, lr}
   128ea:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
   128ec:	4b02      	ldr	r3, [pc, #8]	; (128f8 <SX1276GetStatus+0x10>)
   128ee:	2288      	movs	r2, #136	; 0x88
   128f0:	5c9b      	ldrb	r3, [r3, r2]
}
   128f2:	0018      	movs	r0, r3
   128f4:	46bd      	mov	sp, r7
   128f6:	bd80      	pop	{r7, pc}
   128f8:	20001bf8 	.word	0x20001bf8

000128fc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
   128fc:	b590      	push	{r4, r7, lr}
   128fe:	b083      	sub	sp, #12
   12900:	af00      	add	r7, sp, #0
   12902:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
   12904:	4b16      	ldr	r3, [pc, #88]	; (12960 <SX1276SetChannel+0x64>)
   12906:	218c      	movs	r1, #140	; 0x8c
   12908:	687a      	ldr	r2, [r7, #4]
   1290a:	505a      	str	r2, [r3, r1]
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   1290c:	4b15      	ldr	r3, [pc, #84]	; (12964 <SX1276SetChannel+0x68>)
   1290e:	6878      	ldr	r0, [r7, #4]
   12910:	4798      	blx	r3
   12912:	4c15      	ldr	r4, [pc, #84]	; (12968 <SX1276SetChannel+0x6c>)
   12914:	2200      	movs	r2, #0
   12916:	4b15      	ldr	r3, [pc, #84]	; (1296c <SX1276SetChannel+0x70>)
   12918:	47a0      	blx	r4
   1291a:	0003      	movs	r3, r0
   1291c:	000c      	movs	r4, r1
   1291e:	0019      	movs	r1, r3
   12920:	0022      	movs	r2, r4
   12922:	4b13      	ldr	r3, [pc, #76]	; (12970 <SX1276SetChannel+0x74>)
   12924:	0008      	movs	r0, r1
   12926:	0011      	movs	r1, r2
   12928:	4798      	blx	r3
   1292a:	0003      	movs	r3, r0
   1292c:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
   1292e:	687b      	ldr	r3, [r7, #4]
   12930:	0c1b      	lsrs	r3, r3, #16
   12932:	b2db      	uxtb	r3, r3
   12934:	0019      	movs	r1, r3
   12936:	2006      	movs	r0, #6
   12938:	4b0e      	ldr	r3, [pc, #56]	; (12974 <SX1276SetChannel+0x78>)
   1293a:	4798      	blx	r3
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
   1293c:	687b      	ldr	r3, [r7, #4]
   1293e:	0a1b      	lsrs	r3, r3, #8
   12940:	b2db      	uxtb	r3, r3
   12942:	0019      	movs	r1, r3
   12944:	2007      	movs	r0, #7
   12946:	4b0b      	ldr	r3, [pc, #44]	; (12974 <SX1276SetChannel+0x78>)
   12948:	4798      	blx	r3
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
   1294a:	687b      	ldr	r3, [r7, #4]
   1294c:	b2db      	uxtb	r3, r3
   1294e:	0019      	movs	r1, r3
   12950:	2008      	movs	r0, #8
   12952:	4b08      	ldr	r3, [pc, #32]	; (12974 <SX1276SetChannel+0x78>)
   12954:	4798      	blx	r3
}
   12956:	46c0      	nop			; (mov r8, r8)
   12958:	46bd      	mov	sp, r7
   1295a:	b003      	add	sp, #12
   1295c:	bd90      	pop	{r4, r7, pc}
   1295e:	46c0      	nop			; (mov r8, r8)
   12960:	20001bf8 	.word	0x20001bf8
   12964:	00019a1d 	.word	0x00019a1d
   12968:	0001859d 	.word	0x0001859d
   1296c:	404e8480 	.word	0x404e8480
   12970:	000179fd 	.word	0x000179fd
   12974:	000141fd 	.word	0x000141fd

00012978 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
   12978:	b590      	push	{r4, r7, lr}
   1297a:	b087      	sub	sp, #28
   1297c:	af00      	add	r7, sp, #0
   1297e:	60b9      	str	r1, [r7, #8]
   12980:	0011      	movs	r1, r2
   12982:	607b      	str	r3, [r7, #4]
   12984:	230f      	movs	r3, #15
   12986:	18fb      	adds	r3, r7, r3
   12988:	1c02      	adds	r2, r0, #0
   1298a:	701a      	strb	r2, [r3, #0]
   1298c:	230c      	movs	r3, #12
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1c0a      	adds	r2, r1, #0
   12992:	801a      	strh	r2, [r3, #0]
    bool status = true;
   12994:	2317      	movs	r3, #23
   12996:	18fb      	adds	r3, r7, r3
   12998:	2201      	movs	r2, #1
   1299a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
   1299c:	2314      	movs	r3, #20
   1299e:	18fb      	adds	r3, r7, r3
   129a0:	2200      	movs	r2, #0
   129a2:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
   129a4:	2300      	movs	r3, #0
   129a6:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
   129a8:	230f      	movs	r3, #15
   129aa:	18fb      	adds	r3, r7, r3
   129ac:	781b      	ldrb	r3, [r3, #0]
   129ae:	0018      	movs	r0, r3
   129b0:	4b1d      	ldr	r3, [pc, #116]	; (12a28 <SX1276IsChannelFree+0xb0>)
   129b2:	4798      	blx	r3

    SX1276SetChannel( freq );
   129b4:	68bb      	ldr	r3, [r7, #8]
   129b6:	0018      	movs	r0, r3
   129b8:	4b1c      	ldr	r3, [pc, #112]	; (12a2c <SX1276IsChannelFree+0xb4>)
   129ba:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   129bc:	2005      	movs	r0, #5
   129be:	4b1c      	ldr	r3, [pc, #112]	; (12a30 <SX1276IsChannelFree+0xb8>)
   129c0:	4798      	blx	r3

    DelayMs( 1 );
   129c2:	2001      	movs	r0, #1
   129c4:	4b1b      	ldr	r3, [pc, #108]	; (12a34 <SX1276IsChannelFree+0xbc>)
   129c6:	4798      	blx	r3

    carrierSenseTime = TimerGetCurrentTime( );
   129c8:	4b1b      	ldr	r3, [pc, #108]	; (12a38 <SX1276IsChannelFree+0xc0>)
   129ca:	4798      	blx	r3
   129cc:	0003      	movs	r3, r0
   129ce:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   129d0:	e018      	b.n	12a04 <SX1276IsChannelFree+0x8c>
    {
        rssi = SX1276ReadRssi( modem );
   129d2:	2314      	movs	r3, #20
   129d4:	18fc      	adds	r4, r7, r3
   129d6:	230f      	movs	r3, #15
   129d8:	18fb      	adds	r3, r7, r3
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	0018      	movs	r0, r3
   129de:	4b17      	ldr	r3, [pc, #92]	; (12a3c <SX1276IsChannelFree+0xc4>)
   129e0:	4798      	blx	r3
   129e2:	0003      	movs	r3, r0
   129e4:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
   129e6:	2314      	movs	r3, #20
   129e8:	18fa      	adds	r2, r7, r3
   129ea:	230c      	movs	r3, #12
   129ec:	18fb      	adds	r3, r7, r3
   129ee:	2100      	movs	r1, #0
   129f0:	5e52      	ldrsh	r2, [r2, r1]
   129f2:	2100      	movs	r1, #0
   129f4:	5e5b      	ldrsh	r3, [r3, r1]
   129f6:	429a      	cmp	r2, r3
   129f8:	dd04      	ble.n	12a04 <SX1276IsChannelFree+0x8c>
        {
            status = false;
   129fa:	2317      	movs	r3, #23
   129fc:	18fb      	adds	r3, r7, r3
   129fe:	2200      	movs	r2, #0
   12a00:	701a      	strb	r2, [r3, #0]
            break;
   12a02:	e007      	b.n	12a14 <SX1276IsChannelFree+0x9c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   12a04:	693b      	ldr	r3, [r7, #16]
   12a06:	0018      	movs	r0, r3
   12a08:	4b0d      	ldr	r3, [pc, #52]	; (12a40 <SX1276IsChannelFree+0xc8>)
   12a0a:	4798      	blx	r3
   12a0c:	0002      	movs	r2, r0
   12a0e:	687b      	ldr	r3, [r7, #4]
   12a10:	429a      	cmp	r2, r3
   12a12:	d3de      	bcc.n	129d2 <SX1276IsChannelFree+0x5a>
        }
    }
    SX1276SetSleep( );
   12a14:	4b0b      	ldr	r3, [pc, #44]	; (12a44 <SX1276IsChannelFree+0xcc>)
   12a16:	4798      	blx	r3
    return status;
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
}
   12a1e:	0018      	movs	r0, r3
   12a20:	46bd      	mov	sp, r7
   12a22:	b007      	add	sp, #28
   12a24:	bd90      	pop	{r4, r7, pc}
   12a26:	46c0      	nop			; (mov r8, r8)
   12a28:	00014135 	.word	0x00014135
   12a2c:	000128fd 	.word	0x000128fd
   12a30:	000140cd 	.word	0x000140cd
   12a34:	00016a0d 	.word	0x00016a0d
   12a38:	00017171 	.word	0x00017171
   12a3c:	00014031 	.word	0x00014031
   12a40:	00017199 	.word	0x00017199
   12a44:	00013a19 	.word	0x00013a19

00012a48 <SX1276Random>:

uint32_t SX1276Random( void )
{
   12a48:	b580      	push	{r7, lr}
   12a4a:	b082      	sub	sp, #8
   12a4c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
   12a4e:	2300      	movs	r3, #0
   12a50:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
   12a52:	2001      	movs	r0, #1
   12a54:	4b16      	ldr	r3, [pc, #88]	; (12ab0 <SX1276Random+0x68>)
   12a56:	4798      	blx	r3

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   12a58:	21ff      	movs	r1, #255	; 0xff
   12a5a:	2011      	movs	r0, #17
   12a5c:	4b15      	ldr	r3, [pc, #84]	; (12ab4 <SX1276Random+0x6c>)
   12a5e:	4798      	blx	r3
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   12a60:	2005      	movs	r0, #5
   12a62:	4b15      	ldr	r3, [pc, #84]	; (12ab8 <SX1276Random+0x70>)
   12a64:	4798      	blx	r3

    for( i = 0; i < 32; i++ )
   12a66:	1dfb      	adds	r3, r7, #7
   12a68:	2200      	movs	r2, #0
   12a6a:	701a      	strb	r2, [r3, #0]
   12a6c:	e015      	b.n	12a9a <SX1276Random+0x52>
    {
        DelayMs( 1 );
   12a6e:	2001      	movs	r0, #1
   12a70:	4b12      	ldr	r3, [pc, #72]	; (12abc <SX1276Random+0x74>)
   12a72:	4798      	blx	r3
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   12a74:	202c      	movs	r0, #44	; 0x2c
   12a76:	4b12      	ldr	r3, [pc, #72]	; (12ac0 <SX1276Random+0x78>)
   12a78:	4798      	blx	r3
   12a7a:	0003      	movs	r3, r0
   12a7c:	001a      	movs	r2, r3
   12a7e:	2301      	movs	r3, #1
   12a80:	401a      	ands	r2, r3
   12a82:	1dfb      	adds	r3, r7, #7
   12a84:	781b      	ldrb	r3, [r3, #0]
   12a86:	409a      	lsls	r2, r3
   12a88:	0013      	movs	r3, r2
   12a8a:	683a      	ldr	r2, [r7, #0]
   12a8c:	4313      	orrs	r3, r2
   12a8e:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
   12a90:	1dfb      	adds	r3, r7, #7
   12a92:	781a      	ldrb	r2, [r3, #0]
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	3201      	adds	r2, #1
   12a98:	701a      	strb	r2, [r3, #0]
   12a9a:	1dfb      	adds	r3, r7, #7
   12a9c:	781b      	ldrb	r3, [r3, #0]
   12a9e:	2b1f      	cmp	r3, #31
   12aa0:	d9e5      	bls.n	12a6e <SX1276Random+0x26>
    }

    SX1276SetSleep( );
   12aa2:	4b08      	ldr	r3, [pc, #32]	; (12ac4 <SX1276Random+0x7c>)
   12aa4:	4798      	blx	r3

    return rnd;
   12aa6:	683b      	ldr	r3, [r7, #0]
}
   12aa8:	0018      	movs	r0, r3
   12aaa:	46bd      	mov	sp, r7
   12aac:	b002      	add	sp, #8
   12aae:	bd80      	pop	{r7, pc}
   12ab0:	00014135 	.word	0x00014135
   12ab4:	000141fd 	.word	0x000141fd
   12ab8:	000140cd 	.word	0x000140cd
   12abc:	00016a0d 	.word	0x00016a0d
   12ac0:	00014229 	.word	0x00014229
   12ac4:	00013a19 	.word	0x00013a19

00012ac8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
   12ac8:	b590      	push	{r4, r7, lr}
   12aca:	b083      	sub	sp, #12
   12acc:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
   12ace:	1dfc      	adds	r4, r7, #7
   12ad0:	2009      	movs	r0, #9
   12ad2:	4b34      	ldr	r3, [pc, #208]	; (12ba4 <RxChainCalibration+0xdc>)
   12ad4:	4798      	blx	r3
   12ad6:	0003      	movs	r3, r0
   12ad8:	7023      	strb	r3, [r4, #0]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   12ada:	2006      	movs	r0, #6
   12adc:	4b31      	ldr	r3, [pc, #196]	; (12ba4 <RxChainCalibration+0xdc>)
   12ade:	4798      	blx	r3
   12ae0:	0003      	movs	r3, r0
   12ae2:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   12ae4:	2007      	movs	r0, #7
   12ae6:	4b2f      	ldr	r3, [pc, #188]	; (12ba4 <RxChainCalibration+0xdc>)
   12ae8:	4798      	blx	r3
   12aea:	0003      	movs	r3, r0
   12aec:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   12aee:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
   12af0:	2008      	movs	r0, #8
   12af2:	4b2c      	ldr	r3, [pc, #176]	; (12ba4 <RxChainCalibration+0xdc>)
   12af4:	4798      	blx	r3
   12af6:	0003      	movs	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   12af8:	0022      	movs	r2, r4
   12afa:	431a      	orrs	r2, r3
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   12afc:	4b2a      	ldr	r3, [pc, #168]	; (12ba8 <RxChainCalibration+0xe0>)
   12afe:	0010      	movs	r0, r2
   12b00:	4798      	blx	r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
   12b02:	4c2a      	ldr	r4, [pc, #168]	; (12bac <RxChainCalibration+0xe4>)
   12b04:	2200      	movs	r2, #0
   12b06:	4b2a      	ldr	r3, [pc, #168]	; (12bb0 <RxChainCalibration+0xe8>)
   12b08:	47a0      	blx	r4
   12b0a:	0003      	movs	r3, r0
   12b0c:	000c      	movs	r4, r1
   12b0e:	0019      	movs	r1, r3
   12b10:	0022      	movs	r2, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   12b12:	4b28      	ldr	r3, [pc, #160]	; (12bb4 <RxChainCalibration+0xec>)
   12b14:	0008      	movs	r0, r1
   12b16:	0011      	movs	r1, r2
   12b18:	4798      	blx	r3
   12b1a:	0003      	movs	r3, r0
   12b1c:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
   12b1e:	2100      	movs	r1, #0
   12b20:	2009      	movs	r0, #9
   12b22:	4b25      	ldr	r3, [pc, #148]	; (12bb8 <RxChainCalibration+0xf0>)
   12b24:	4798      	blx	r3

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   12b26:	203b      	movs	r0, #59	; 0x3b
   12b28:	4b1e      	ldr	r3, [pc, #120]	; (12ba4 <RxChainCalibration+0xdc>)
   12b2a:	4798      	blx	r3
   12b2c:	0003      	movs	r3, r0
   12b2e:	001a      	movs	r2, r3
   12b30:	2340      	movs	r3, #64	; 0x40
   12b32:	4313      	orrs	r3, r2
   12b34:	b2db      	uxtb	r3, r3
   12b36:	0019      	movs	r1, r3
   12b38:	203b      	movs	r0, #59	; 0x3b
   12b3a:	4b1f      	ldr	r3, [pc, #124]	; (12bb8 <RxChainCalibration+0xf0>)
   12b3c:	4798      	blx	r3
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   12b3e:	46c0      	nop			; (mov r8, r8)
   12b40:	203b      	movs	r0, #59	; 0x3b
   12b42:	4b18      	ldr	r3, [pc, #96]	; (12ba4 <RxChainCalibration+0xdc>)
   12b44:	4798      	blx	r3
   12b46:	0003      	movs	r3, r0
   12b48:	001a      	movs	r2, r3
   12b4a:	2320      	movs	r3, #32
   12b4c:	4013      	ands	r3, r2
   12b4e:	2b20      	cmp	r3, #32
   12b50:	d0f6      	beq.n	12b40 <RxChainCalibration+0x78>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
   12b52:	4b1a      	ldr	r3, [pc, #104]	; (12bbc <RxChainCalibration+0xf4>)
   12b54:	0018      	movs	r0, r3
   12b56:	4b1a      	ldr	r3, [pc, #104]	; (12bc0 <RxChainCalibration+0xf8>)
   12b58:	4798      	blx	r3

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   12b5a:	203b      	movs	r0, #59	; 0x3b
   12b5c:	4b11      	ldr	r3, [pc, #68]	; (12ba4 <RxChainCalibration+0xdc>)
   12b5e:	4798      	blx	r3
   12b60:	0003      	movs	r3, r0
   12b62:	001a      	movs	r2, r3
   12b64:	2340      	movs	r3, #64	; 0x40
   12b66:	4313      	orrs	r3, r2
   12b68:	b2db      	uxtb	r3, r3
   12b6a:	0019      	movs	r1, r3
   12b6c:	203b      	movs	r0, #59	; 0x3b
   12b6e:	4b12      	ldr	r3, [pc, #72]	; (12bb8 <RxChainCalibration+0xf0>)
   12b70:	4798      	blx	r3
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   12b72:	46c0      	nop			; (mov r8, r8)
   12b74:	203b      	movs	r0, #59	; 0x3b
   12b76:	4b0b      	ldr	r3, [pc, #44]	; (12ba4 <RxChainCalibration+0xdc>)
   12b78:	4798      	blx	r3
   12b7a:	0003      	movs	r3, r0
   12b7c:	001a      	movs	r2, r3
   12b7e:	2320      	movs	r3, #32
   12b80:	4013      	ands	r3, r2
   12b82:	2b20      	cmp	r3, #32
   12b84:	d0f6      	beq.n	12b74 <RxChainCalibration+0xac>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
   12b86:	1dfb      	adds	r3, r7, #7
   12b88:	781b      	ldrb	r3, [r3, #0]
   12b8a:	0019      	movs	r1, r3
   12b8c:	2009      	movs	r0, #9
   12b8e:	4b0a      	ldr	r3, [pc, #40]	; (12bb8 <RxChainCalibration+0xf0>)
   12b90:	4798      	blx	r3
    SX1276SetChannel( initialFreq );
   12b92:	683b      	ldr	r3, [r7, #0]
   12b94:	0018      	movs	r0, r3
   12b96:	4b0a      	ldr	r3, [pc, #40]	; (12bc0 <RxChainCalibration+0xf8>)
   12b98:	4798      	blx	r3
}
   12b9a:	46c0      	nop			; (mov r8, r8)
   12b9c:	46bd      	mov	sp, r7
   12b9e:	b003      	add	sp, #12
   12ba0:	bd90      	pop	{r4, r7, pc}
   12ba2:	46c0      	nop			; (mov r8, r8)
   12ba4:	00014229 	.word	0x00014229
   12ba8:	00019a1d 	.word	0x00019a1d
   12bac:	00018e05 	.word	0x00018e05
   12bb0:	404e8480 	.word	0x404e8480
   12bb4:	000179fd 	.word	0x000179fd
   12bb8:	000141fd 	.word	0x000141fd
   12bbc:	33bca100 	.word	0x33bca100
   12bc0:	000128fd 	.word	0x000128fd

00012bc4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
   12bc4:	b580      	push	{r7, lr}
   12bc6:	b084      	sub	sp, #16
   12bc8:	af00      	add	r7, sp, #0
   12bca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   12bcc:	230f      	movs	r3, #15
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	2200      	movs	r2, #0
   12bd2:	701a      	strb	r2, [r3, #0]
   12bd4:	e022      	b.n	12c1c <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
   12bd6:	230f      	movs	r3, #15
   12bd8:	18fb      	adds	r3, r7, r3
   12bda:	781a      	ldrb	r2, [r3, #0]
   12bdc:	4b14      	ldr	r3, [pc, #80]	; (12c30 <GetFskBandwidthRegValue+0x6c>)
   12bde:	00d2      	lsls	r2, r2, #3
   12be0:	58d2      	ldr	r2, [r2, r3]
   12be2:	687b      	ldr	r3, [r7, #4]
   12be4:	429a      	cmp	r2, r3
   12be6:	d812      	bhi.n	12c0e <GetFskBandwidthRegValue+0x4a>
   12be8:	230f      	movs	r3, #15
   12bea:	18fb      	adds	r3, r7, r3
   12bec:	781b      	ldrb	r3, [r3, #0]
   12bee:	1c5a      	adds	r2, r3, #1
   12bf0:	4b0f      	ldr	r3, [pc, #60]	; (12c30 <GetFskBandwidthRegValue+0x6c>)
   12bf2:	00d2      	lsls	r2, r2, #3
   12bf4:	58d2      	ldr	r2, [r2, r3]
   12bf6:	687b      	ldr	r3, [r7, #4]
   12bf8:	429a      	cmp	r2, r3
   12bfa:	d908      	bls.n	12c0e <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
   12bfc:	230f      	movs	r3, #15
   12bfe:	18fb      	adds	r3, r7, r3
   12c00:	781b      	ldrb	r3, [r3, #0]
   12c02:	4a0b      	ldr	r2, [pc, #44]	; (12c30 <GetFskBandwidthRegValue+0x6c>)
   12c04:	00db      	lsls	r3, r3, #3
   12c06:	18d3      	adds	r3, r2, r3
   12c08:	3304      	adds	r3, #4
   12c0a:	781b      	ldrb	r3, [r3, #0]
   12c0c:	e00c      	b.n	12c28 <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   12c0e:	230f      	movs	r3, #15
   12c10:	18fb      	adds	r3, r7, r3
   12c12:	781a      	ldrb	r2, [r3, #0]
   12c14:	230f      	movs	r3, #15
   12c16:	18fb      	adds	r3, r7, r3
   12c18:	3201      	adds	r2, #1
   12c1a:	701a      	strb	r2, [r3, #0]
   12c1c:	230f      	movs	r3, #15
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	781b      	ldrb	r3, [r3, #0]
   12c22:	2b14      	cmp	r3, #20
   12c24:	d9d7      	bls.n	12bd6 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
   12c26:	e7fe      	b.n	12c26 <GetFskBandwidthRegValue+0x62>
}
   12c28:	0018      	movs	r0, r3
   12c2a:	46bd      	mov	sp, r7
   12c2c:	b004      	add	sp, #16
   12c2e:	bd80      	pop	{r7, pc}
   12c30:	0001f820 	.word	0x0001f820

00012c34 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
   12c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c36:	b085      	sub	sp, #20
   12c38:	af00      	add	r7, sp, #0
   12c3a:	60b9      	str	r1, [r7, #8]
   12c3c:	607a      	str	r2, [r7, #4]
   12c3e:	0019      	movs	r1, r3
   12c40:	230f      	movs	r3, #15
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	1c02      	adds	r2, r0, #0
   12c46:	701a      	strb	r2, [r3, #0]
   12c48:	230e      	movs	r3, #14
   12c4a:	18fb      	adds	r3, r7, r3
   12c4c:	1c0a      	adds	r2, r1, #0
   12c4e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   12c50:	230f      	movs	r3, #15
   12c52:	18fb      	adds	r3, r7, r3
   12c54:	781b      	ldrb	r3, [r3, #0]
   12c56:	0018      	movs	r0, r3
   12c58:	4bb0      	ldr	r3, [pc, #704]	; (12f1c <SX1276SetRxConfig+0x2e8>)
   12c5a:	4798      	blx	r3

    switch( modem )
   12c5c:	230f      	movs	r3, #15
   12c5e:	18fb      	adds	r3, r7, r3
   12c60:	781b      	ldrb	r3, [r3, #0]
   12c62:	2b00      	cmp	r3, #0
   12c64:	d003      	beq.n	12c6e <SX1276SetRxConfig+0x3a>
   12c66:	2b01      	cmp	r3, #1
   12c68:	d100      	bne.n	12c6c <SX1276SetRxConfig+0x38>
   12c6a:	e0ed      	b.n	12e48 <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
   12c6c:	e253      	b.n	13116 <SX1276SetRxConfig+0x4e2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   12c6e:	4bac      	ldr	r3, [pc, #688]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12c70:	2198      	movs	r1, #152	; 0x98
   12c72:	68ba      	ldr	r2, [r7, #8]
   12c74:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Datarate = datarate;
   12c76:	4baa      	ldr	r3, [pc, #680]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12c78:	21a0      	movs	r1, #160	; 0xa0
   12c7a:	687a      	ldr	r2, [r7, #4]
   12c7c:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   12c7e:	4ba8      	ldr	r3, [pc, #672]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12c80:	219c      	movs	r1, #156	; 0x9c
   12c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12c84:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.FixLen = fixLen;
   12c86:	4ba6      	ldr	r3, [pc, #664]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12c88:	2234      	movs	r2, #52	; 0x34
   12c8a:	18ba      	adds	r2, r7, r2
   12c8c:	21a6      	movs	r1, #166	; 0xa6
   12c8e:	7812      	ldrb	r2, [r2, #0]
   12c90:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
   12c92:	4ba3      	ldr	r3, [pc, #652]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12c94:	2238      	movs	r2, #56	; 0x38
   12c96:	18ba      	adds	r2, r7, r2
   12c98:	21a7      	movs	r1, #167	; 0xa7
   12c9a:	7812      	ldrb	r2, [r2, #0]
   12c9c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
   12c9e:	4ba0      	ldr	r3, [pc, #640]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12ca0:	223c      	movs	r2, #60	; 0x3c
   12ca2:	18ba      	adds	r2, r7, r2
   12ca4:	21a8      	movs	r1, #168	; 0xa8
   12ca6:	7812      	ldrb	r2, [r2, #0]
   12ca8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   12caa:	4b9d      	ldr	r3, [pc, #628]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12cac:	2220      	movs	r2, #32
   12cae:	2128      	movs	r1, #40	; 0x28
   12cb0:	468c      	mov	ip, r1
   12cb2:	44bc      	add	ip, r7
   12cb4:	4462      	add	r2, ip
   12cb6:	21a9      	movs	r1, #169	; 0xa9
   12cb8:	7812      	ldrb	r2, [r2, #0]
   12cba:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
   12cbc:	4b98      	ldr	r3, [pc, #608]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12cbe:	2224      	movs	r2, #36	; 0x24
   12cc0:	2128      	movs	r1, #40	; 0x28
   12cc2:	468c      	mov	ip, r1
   12cc4:	44bc      	add	ip, r7
   12cc6:	4462      	add	r2, ip
   12cc8:	21aa      	movs	r1, #170	; 0xaa
   12cca:	7812      	ldrb	r2, [r2, #0]
   12ccc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   12cce:	4b94      	ldr	r3, [pc, #592]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12cd0:	222c      	movs	r2, #44	; 0x2c
   12cd2:	18ba      	adds	r2, r7, r2
   12cd4:	21a4      	movs	r1, #164	; 0xa4
   12cd6:	8812      	ldrh	r2, [r2, #0]
   12cd8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
   12cda:	2330      	movs	r3, #48	; 0x30
   12cdc:	18fb      	adds	r3, r7, r3
   12cde:	881a      	ldrh	r2, [r3, #0]
   12ce0:	4b90      	ldr	r3, [pc, #576]	; (12f24 <SX1276SetRxConfig+0x2f0>)
   12ce2:	0010      	movs	r0, r2
   12ce4:	4798      	blx	r3
   12ce6:	0005      	movs	r5, r0
   12ce8:	000e      	movs	r6, r1
   12cea:	4b8f      	ldr	r3, [pc, #572]	; (12f28 <SX1276SetRxConfig+0x2f4>)
   12cec:	6878      	ldr	r0, [r7, #4]
   12cee:	4798      	blx	r3
   12cf0:	0002      	movs	r2, r0
   12cf2:	000b      	movs	r3, r1
   12cf4:	4c8d      	ldr	r4, [pc, #564]	; (12f2c <SX1276SetRxConfig+0x2f8>)
   12cf6:	2000      	movs	r0, #0
   12cf8:	498d      	ldr	r1, [pc, #564]	; (12f30 <SX1276SetRxConfig+0x2fc>)
   12cfa:	47a0      	blx	r4
   12cfc:	0003      	movs	r3, r0
   12cfe:	000c      	movs	r4, r1
   12d00:	0018      	movs	r0, r3
   12d02:	0021      	movs	r1, r4
   12d04:	4c8b      	ldr	r4, [pc, #556]	; (12f34 <SX1276SetRxConfig+0x300>)
   12d06:	2200      	movs	r2, #0
   12d08:	4b8b      	ldr	r3, [pc, #556]	; (12f38 <SX1276SetRxConfig+0x304>)
   12d0a:	47a0      	blx	r4
   12d0c:	0003      	movs	r3, r0
   12d0e:	000c      	movs	r4, r1
   12d10:	001a      	movs	r2, r3
   12d12:	0023      	movs	r3, r4
   12d14:	4c87      	ldr	r4, [pc, #540]	; (12f34 <SX1276SetRxConfig+0x300>)
   12d16:	0028      	movs	r0, r5
   12d18:	0031      	movs	r1, r6
   12d1a:	47a0      	blx	r4
   12d1c:	0003      	movs	r3, r0
   12d1e:	000c      	movs	r4, r1
   12d20:	0018      	movs	r0, r3
   12d22:	0021      	movs	r1, r4
   12d24:	4c83      	ldr	r4, [pc, #524]	; (12f34 <SX1276SetRxConfig+0x300>)
   12d26:	2200      	movs	r2, #0
   12d28:	4b84      	ldr	r3, [pc, #528]	; (12f3c <SX1276SetRxConfig+0x308>)
   12d2a:	47a0      	blx	r4
   12d2c:	0003      	movs	r3, r0
   12d2e:	000c      	movs	r4, r1
   12d30:	0019      	movs	r1, r3
   12d32:	0022      	movs	r2, r4
   12d34:	4b82      	ldr	r3, [pc, #520]	; (12f40 <SX1276SetRxConfig+0x30c>)
   12d36:	0008      	movs	r0, r1
   12d38:	0011      	movs	r1, r2
   12d3a:	4798      	blx	r3
   12d3c:	0001      	movs	r1, r0
   12d3e:	4b78      	ldr	r3, [pc, #480]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12d40:	22b0      	movs	r2, #176	; 0xb0
   12d42:	5099      	str	r1, [r3, r2]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
   12d44:	4b78      	ldr	r3, [pc, #480]	; (12f28 <SX1276SetRxConfig+0x2f4>)
   12d46:	6878      	ldr	r0, [r7, #4]
   12d48:	4798      	blx	r3
   12d4a:	0002      	movs	r2, r0
   12d4c:	000b      	movs	r3, r1
   12d4e:	4c77      	ldr	r4, [pc, #476]	; (12f2c <SX1276SetRxConfig+0x2f8>)
   12d50:	2000      	movs	r0, #0
   12d52:	497c      	ldr	r1, [pc, #496]	; (12f44 <SX1276SetRxConfig+0x310>)
   12d54:	47a0      	blx	r4
   12d56:	0003      	movs	r3, r0
   12d58:	000c      	movs	r4, r1
   12d5a:	0019      	movs	r1, r3
   12d5c:	0022      	movs	r2, r4
   12d5e:	4b78      	ldr	r3, [pc, #480]	; (12f40 <SX1276SetRxConfig+0x30c>)
   12d60:	0008      	movs	r0, r1
   12d62:	0011      	movs	r1, r2
   12d64:	4798      	blx	r3
   12d66:	0003      	movs	r3, r0
   12d68:	b29b      	uxth	r3, r3
   12d6a:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	0a1b      	lsrs	r3, r3, #8
   12d70:	b2db      	uxtb	r3, r3
   12d72:	0019      	movs	r1, r3
   12d74:	2002      	movs	r0, #2
   12d76:	4b74      	ldr	r3, [pc, #464]	; (12f48 <SX1276SetRxConfig+0x314>)
   12d78:	4798      	blx	r3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
   12d7a:	687b      	ldr	r3, [r7, #4]
   12d7c:	b2db      	uxtb	r3, r3
   12d7e:	0019      	movs	r1, r3
   12d80:	2003      	movs	r0, #3
   12d82:	4b71      	ldr	r3, [pc, #452]	; (12f48 <SX1276SetRxConfig+0x314>)
   12d84:	4798      	blx	r3
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
   12d86:	68bb      	ldr	r3, [r7, #8]
   12d88:	0018      	movs	r0, r3
   12d8a:	4b70      	ldr	r3, [pc, #448]	; (12f4c <SX1276SetRxConfig+0x318>)
   12d8c:	4798      	blx	r3
   12d8e:	0003      	movs	r3, r0
   12d90:	0019      	movs	r1, r3
   12d92:	2012      	movs	r0, #18
   12d94:	4b6c      	ldr	r3, [pc, #432]	; (12f48 <SX1276SetRxConfig+0x314>)
   12d96:	4798      	blx	r3
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
   12d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d9a:	0018      	movs	r0, r3
   12d9c:	4b6b      	ldr	r3, [pc, #428]	; (12f4c <SX1276SetRxConfig+0x318>)
   12d9e:	4798      	blx	r3
   12da0:	0003      	movs	r3, r0
   12da2:	0019      	movs	r1, r3
   12da4:	2013      	movs	r0, #19
   12da6:	4b68      	ldr	r3, [pc, #416]	; (12f48 <SX1276SetRxConfig+0x314>)
   12da8:	4798      	blx	r3
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   12daa:	232c      	movs	r3, #44	; 0x2c
   12dac:	18fb      	adds	r3, r7, r3
   12dae:	881b      	ldrh	r3, [r3, #0]
   12db0:	0a1b      	lsrs	r3, r3, #8
   12db2:	b29b      	uxth	r3, r3
   12db4:	b2db      	uxtb	r3, r3
   12db6:	0019      	movs	r1, r3
   12db8:	2025      	movs	r0, #37	; 0x25
   12dba:	4b63      	ldr	r3, [pc, #396]	; (12f48 <SX1276SetRxConfig+0x314>)
   12dbc:	4798      	blx	r3
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   12dbe:	232c      	movs	r3, #44	; 0x2c
   12dc0:	18fb      	adds	r3, r7, r3
   12dc2:	881b      	ldrh	r3, [r3, #0]
   12dc4:	b2db      	uxtb	r3, r3
   12dc6:	0019      	movs	r1, r3
   12dc8:	2026      	movs	r0, #38	; 0x26
   12dca:	4b5f      	ldr	r3, [pc, #380]	; (12f48 <SX1276SetRxConfig+0x314>)
   12dcc:	4798      	blx	r3
            if( fixLen == 1 )
   12dce:	2334      	movs	r3, #52	; 0x34
   12dd0:	18fb      	adds	r3, r7, r3
   12dd2:	781b      	ldrb	r3, [r3, #0]
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d007      	beq.n	12de8 <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
   12dd8:	2338      	movs	r3, #56	; 0x38
   12dda:	18fb      	adds	r3, r7, r3
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	0019      	movs	r1, r3
   12de0:	2032      	movs	r0, #50	; 0x32
   12de2:	4b59      	ldr	r3, [pc, #356]	; (12f48 <SX1276SetRxConfig+0x314>)
   12de4:	4798      	blx	r3
   12de6:	e003      	b.n	12df0 <SX1276SetRxConfig+0x1bc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
   12de8:	21ff      	movs	r1, #255	; 0xff
   12dea:	2032      	movs	r0, #50	; 0x32
   12dec:	4b56      	ldr	r3, [pc, #344]	; (12f48 <SX1276SetRxConfig+0x314>)
   12dee:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   12df0:	2030      	movs	r0, #48	; 0x30
   12df2:	4b57      	ldr	r3, [pc, #348]	; (12f50 <SX1276SetRxConfig+0x31c>)
   12df4:	4798      	blx	r3
   12df6:	0003      	movs	r3, r0
   12df8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
   12dfa:	226f      	movs	r2, #111	; 0x6f
   12dfc:	4013      	ands	r3, r2
   12dfe:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   12e00:	2334      	movs	r3, #52	; 0x34
   12e02:	18fb      	adds	r3, r7, r3
   12e04:	781b      	ldrb	r3, [r3, #0]
   12e06:	2b00      	cmp	r3, #0
   12e08:	d001      	beq.n	12e0e <SX1276SetRxConfig+0x1da>
   12e0a:	2300      	movs	r3, #0
   12e0c:	e001      	b.n	12e12 <SX1276SetRxConfig+0x1de>
   12e0e:	2380      	movs	r3, #128	; 0x80
   12e10:	425b      	negs	r3, r3
   12e12:	4313      	orrs	r3, r2
   12e14:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
   12e16:	233c      	movs	r3, #60	; 0x3c
   12e18:	18fb      	adds	r3, r7, r3
   12e1a:	781b      	ldrb	r3, [r3, #0]
   12e1c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   12e1e:	b25b      	sxtb	r3, r3
   12e20:	4313      	orrs	r3, r2
   12e22:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
   12e24:	b2db      	uxtb	r3, r3
   12e26:	0019      	movs	r1, r3
   12e28:	2030      	movs	r0, #48	; 0x30
   12e2a:	4b47      	ldr	r3, [pc, #284]	; (12f48 <SX1276SetRxConfig+0x314>)
   12e2c:	4798      	blx	r3
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   12e2e:	2031      	movs	r0, #49	; 0x31
   12e30:	4b47      	ldr	r3, [pc, #284]	; (12f50 <SX1276SetRxConfig+0x31c>)
   12e32:	4798      	blx	r3
   12e34:	0003      	movs	r3, r0
   12e36:	001a      	movs	r2, r3
   12e38:	2340      	movs	r3, #64	; 0x40
   12e3a:	4313      	orrs	r3, r2
   12e3c:	b2db      	uxtb	r3, r3
   12e3e:	0019      	movs	r1, r3
   12e40:	2031      	movs	r0, #49	; 0x31
   12e42:	4b41      	ldr	r3, [pc, #260]	; (12f48 <SX1276SetRxConfig+0x314>)
   12e44:	4798      	blx	r3
        break;
   12e46:	e166      	b.n	13116 <SX1276SetRxConfig+0x4e2>
            if( bandwidth > 2 )
   12e48:	68bb      	ldr	r3, [r7, #8]
   12e4a:	2b02      	cmp	r3, #2
   12e4c:	d900      	bls.n	12e50 <SX1276SetRxConfig+0x21c>
                while( 1 );
   12e4e:	e7fe      	b.n	12e4e <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
   12e50:	68bb      	ldr	r3, [r7, #8]
   12e52:	3307      	adds	r3, #7
   12e54:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   12e56:	4b32      	ldr	r3, [pc, #200]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e58:	21c8      	movs	r1, #200	; 0xc8
   12e5a:	68ba      	ldr	r2, [r7, #8]
   12e5c:	505a      	str	r2, [r3, r1]
            SX1276.Settings.LoRa.Datarate = datarate;
   12e5e:	4b30      	ldr	r3, [pc, #192]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e60:	21cc      	movs	r1, #204	; 0xcc
   12e62:	687a      	ldr	r2, [r7, #4]
   12e64:	505a      	str	r2, [r3, r1]
            SX1276.Settings.LoRa.Coderate = coderate;
   12e66:	4b2e      	ldr	r3, [pc, #184]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e68:	220e      	movs	r2, #14
   12e6a:	18ba      	adds	r2, r7, r2
   12e6c:	21d1      	movs	r1, #209	; 0xd1
   12e6e:	7812      	ldrb	r2, [r2, #0]
   12e70:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   12e72:	4b2b      	ldr	r3, [pc, #172]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e74:	222c      	movs	r2, #44	; 0x2c
   12e76:	18ba      	adds	r2, r7, r2
   12e78:	21d2      	movs	r1, #210	; 0xd2
   12e7a:	8812      	ldrh	r2, [r2, #0]
   12e7c:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
   12e7e:	4b28      	ldr	r3, [pc, #160]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e80:	2234      	movs	r2, #52	; 0x34
   12e82:	18ba      	adds	r2, r7, r2
   12e84:	21d4      	movs	r1, #212	; 0xd4
   12e86:	7812      	ldrb	r2, [r2, #0]
   12e88:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
   12e8a:	4b25      	ldr	r3, [pc, #148]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e8c:	2238      	movs	r2, #56	; 0x38
   12e8e:	18ba      	adds	r2, r7, r2
   12e90:	21d5      	movs	r1, #213	; 0xd5
   12e92:	7812      	ldrb	r2, [r2, #0]
   12e94:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
   12e96:	4b22      	ldr	r3, [pc, #136]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12e98:	223c      	movs	r2, #60	; 0x3c
   12e9a:	18ba      	adds	r2, r7, r2
   12e9c:	21d6      	movs	r1, #214	; 0xd6
   12e9e:	7812      	ldrb	r2, [r2, #0]
   12ea0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   12ea2:	4b1f      	ldr	r3, [pc, #124]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12ea4:	2240      	movs	r2, #64	; 0x40
   12ea6:	18ba      	adds	r2, r7, r2
   12ea8:	21d7      	movs	r1, #215	; 0xd7
   12eaa:	7812      	ldrb	r2, [r2, #0]
   12eac:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   12eae:	4b1c      	ldr	r3, [pc, #112]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12eb0:	2244      	movs	r2, #68	; 0x44
   12eb2:	18ba      	adds	r2, r7, r2
   12eb4:	21d8      	movs	r1, #216	; 0xd8
   12eb6:	7812      	ldrb	r2, [r2, #0]
   12eb8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   12eba:	4b19      	ldr	r3, [pc, #100]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12ebc:	2220      	movs	r2, #32
   12ebe:	2128      	movs	r1, #40	; 0x28
   12ec0:	468c      	mov	ip, r1
   12ec2:	44bc      	add	ip, r7
   12ec4:	4462      	add	r2, ip
   12ec6:	21d9      	movs	r1, #217	; 0xd9
   12ec8:	7812      	ldrb	r2, [r2, #0]
   12eca:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
   12ecc:	4b14      	ldr	r3, [pc, #80]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12ece:	2224      	movs	r2, #36	; 0x24
   12ed0:	2128      	movs	r1, #40	; 0x28
   12ed2:	468c      	mov	ip, r1
   12ed4:	44bc      	add	ip, r7
   12ed6:	4462      	add	r2, ip
   12ed8:	21da      	movs	r1, #218	; 0xda
   12eda:	7812      	ldrb	r2, [r2, #0]
   12edc:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
   12ede:	687b      	ldr	r3, [r7, #4]
   12ee0:	2b0c      	cmp	r3, #12
   12ee2:	d902      	bls.n	12eea <SX1276SetRxConfig+0x2b6>
                datarate = 12;
   12ee4:	230c      	movs	r3, #12
   12ee6:	607b      	str	r3, [r7, #4]
   12ee8:	e004      	b.n	12ef4 <SX1276SetRxConfig+0x2c0>
            else if( datarate < 6 )
   12eea:	687b      	ldr	r3, [r7, #4]
   12eec:	2b05      	cmp	r3, #5
   12eee:	d801      	bhi.n	12ef4 <SX1276SetRxConfig+0x2c0>
                datarate = 6;
   12ef0:	2306      	movs	r3, #6
   12ef2:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   12ef4:	68bb      	ldr	r3, [r7, #8]
   12ef6:	2b07      	cmp	r3, #7
   12ef8:	d105      	bne.n	12f06 <SX1276SetRxConfig+0x2d2>
   12efa:	687b      	ldr	r3, [r7, #4]
   12efc:	2b0b      	cmp	r3, #11
   12efe:	d008      	beq.n	12f12 <SX1276SetRxConfig+0x2de>
   12f00:	687b      	ldr	r3, [r7, #4]
   12f02:	2b0c      	cmp	r3, #12
   12f04:	d005      	beq.n	12f12 <SX1276SetRxConfig+0x2de>
   12f06:	68bb      	ldr	r3, [r7, #8]
   12f08:	2b08      	cmp	r3, #8
   12f0a:	d123      	bne.n	12f54 <SX1276SetRxConfig+0x320>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	2b0c      	cmp	r3, #12
   12f10:	d120      	bne.n	12f54 <SX1276SetRxConfig+0x320>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
   12f12:	4b03      	ldr	r3, [pc, #12]	; (12f20 <SX1276SetRxConfig+0x2ec>)
   12f14:	22d0      	movs	r2, #208	; 0xd0
   12f16:	2101      	movs	r1, #1
   12f18:	5499      	strb	r1, [r3, r2]
   12f1a:	e01f      	b.n	12f5c <SX1276SetRxConfig+0x328>
   12f1c:	00014135 	.word	0x00014135
   12f20:	20001bf8 	.word	0x20001bf8
   12f24:	00019999 	.word	0x00019999
   12f28:	00019a1d 	.word	0x00019a1d
   12f2c:	0001859d 	.word	0x0001859d
   12f30:	3ff00000 	.word	0x3ff00000
   12f34:	00018e05 	.word	0x00018e05
   12f38:	40200000 	.word	0x40200000
   12f3c:	408f4000 	.word	0x408f4000
   12f40:	000179fd 	.word	0x000179fd
   12f44:	417e8480 	.word	0x417e8480
   12f48:	000141fd 	.word	0x000141fd
   12f4c:	00012bc5 	.word	0x00012bc5
   12f50:	00014229 	.word	0x00014229
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   12f54:	4b72      	ldr	r3, [pc, #456]	; (13120 <SX1276SetRxConfig+0x4ec>)
   12f56:	22d0      	movs	r2, #208	; 0xd0
   12f58:	2100      	movs	r1, #0
   12f5a:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   12f5c:	201d      	movs	r0, #29
   12f5e:	4b71      	ldr	r3, [pc, #452]	; (13124 <SX1276SetRxConfig+0x4f0>)
   12f60:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   12f62:	68bb      	ldr	r3, [r7, #8]
   12f64:	b2db      	uxtb	r3, r3
   12f66:	011b      	lsls	r3, r3, #4
   12f68:	b2da      	uxtb	r2, r3
   12f6a:	230e      	movs	r3, #14
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	781b      	ldrb	r3, [r3, #0]
   12f70:	18db      	adds	r3, r3, r3
   12f72:	b2db      	uxtb	r3, r3
   12f74:	4313      	orrs	r3, r2
   12f76:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   12f78:	2334      	movs	r3, #52	; 0x34
   12f7a:	18fb      	adds	r3, r7, r3
   12f7c:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   12f7e:	4313      	orrs	r3, r2
   12f80:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   12f82:	0019      	movs	r1, r3
   12f84:	201d      	movs	r0, #29
   12f86:	4b68      	ldr	r3, [pc, #416]	; (13128 <SX1276SetRxConfig+0x4f4>)
   12f88:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   12f8a:	201e      	movs	r0, #30
   12f8c:	4b65      	ldr	r3, [pc, #404]	; (13124 <SX1276SetRxConfig+0x4f0>)
   12f8e:	4798      	blx	r3
   12f90:	0003      	movs	r3, r0
   12f92:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
   12f94:	2308      	movs	r3, #8
   12f96:	4013      	ands	r3, r2
   12f98:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
   12f9a:	687b      	ldr	r3, [r7, #4]
   12f9c:	b2db      	uxtb	r3, r3
   12f9e:	011b      	lsls	r3, r3, #4
   12fa0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
   12fa2:	4313      	orrs	r3, r2
   12fa4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
   12fa6:	233c      	movs	r3, #60	; 0x3c
   12fa8:	18fb      	adds	r3, r7, r3
   12faa:	781b      	ldrb	r3, [r3, #0]
   12fac:	009b      	lsls	r3, r3, #2
   12fae:	b2db      	uxtb	r3, r3
   12fb0:	4313      	orrs	r3, r2
   12fb2:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
   12fb4:	2330      	movs	r3, #48	; 0x30
   12fb6:	18fb      	adds	r3, r7, r3
   12fb8:	881b      	ldrh	r3, [r3, #0]
   12fba:	0a1b      	lsrs	r3, r3, #8
   12fbc:	b29b      	uxth	r3, r3
   12fbe:	b2db      	uxtb	r3, r3
   12fc0:	2103      	movs	r1, #3
   12fc2:	400b      	ands	r3, r1
   12fc4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
   12fc6:	4313      	orrs	r3, r2
   12fc8:	b2db      	uxtb	r3, r3
   12fca:	0019      	movs	r1, r3
   12fcc:	201e      	movs	r0, #30
   12fce:	4b56      	ldr	r3, [pc, #344]	; (13128 <SX1276SetRxConfig+0x4f4>)
   12fd0:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   12fd2:	2026      	movs	r0, #38	; 0x26
   12fd4:	4b53      	ldr	r3, [pc, #332]	; (13124 <SX1276SetRxConfig+0x4f0>)
   12fd6:	4798      	blx	r3
   12fd8:	0003      	movs	r3, r0
   12fda:	b25b      	sxtb	r3, r3
   12fdc:	2208      	movs	r2, #8
   12fde:	4393      	bics	r3, r2
   12fe0:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   12fe2:	4b4f      	ldr	r3, [pc, #316]	; (13120 <SX1276SetRxConfig+0x4ec>)
   12fe4:	21d0      	movs	r1, #208	; 0xd0
   12fe6:	5c5b      	ldrb	r3, [r3, r1]
   12fe8:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
   12fea:	b25b      	sxtb	r3, r3
   12fec:	4313      	orrs	r3, r2
   12fee:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
   12ff0:	b2db      	uxtb	r3, r3
   12ff2:	0019      	movs	r1, r3
   12ff4:	2026      	movs	r0, #38	; 0x26
   12ff6:	4b4c      	ldr	r3, [pc, #304]	; (13128 <SX1276SetRxConfig+0x4f4>)
   12ff8:	4798      	blx	r3
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
   12ffa:	2330      	movs	r3, #48	; 0x30
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	881b      	ldrh	r3, [r3, #0]
   13000:	b2db      	uxtb	r3, r3
   13002:	0019      	movs	r1, r3
   13004:	201f      	movs	r0, #31
   13006:	4b48      	ldr	r3, [pc, #288]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13008:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   1300a:	232c      	movs	r3, #44	; 0x2c
   1300c:	18fb      	adds	r3, r7, r3
   1300e:	881b      	ldrh	r3, [r3, #0]
   13010:	0a1b      	lsrs	r3, r3, #8
   13012:	b29b      	uxth	r3, r3
   13014:	b2db      	uxtb	r3, r3
   13016:	0019      	movs	r1, r3
   13018:	2020      	movs	r0, #32
   1301a:	4b43      	ldr	r3, [pc, #268]	; (13128 <SX1276SetRxConfig+0x4f4>)
   1301c:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   1301e:	232c      	movs	r3, #44	; 0x2c
   13020:	18fb      	adds	r3, r7, r3
   13022:	881b      	ldrh	r3, [r3, #0]
   13024:	b2db      	uxtb	r3, r3
   13026:	0019      	movs	r1, r3
   13028:	2021      	movs	r0, #33	; 0x21
   1302a:	4b3f      	ldr	r3, [pc, #252]	; (13128 <SX1276SetRxConfig+0x4f4>)
   1302c:	4798      	blx	r3
            if( fixLen == 1 )
   1302e:	2334      	movs	r3, #52	; 0x34
   13030:	18fb      	adds	r3, r7, r3
   13032:	781b      	ldrb	r3, [r3, #0]
   13034:	2b00      	cmp	r3, #0
   13036:	d006      	beq.n	13046 <SX1276SetRxConfig+0x412>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
   13038:	2338      	movs	r3, #56	; 0x38
   1303a:	18fb      	adds	r3, r7, r3
   1303c:	781b      	ldrb	r3, [r3, #0]
   1303e:	0019      	movs	r1, r3
   13040:	2022      	movs	r0, #34	; 0x22
   13042:	4b39      	ldr	r3, [pc, #228]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13044:	4798      	blx	r3
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13046:	4b36      	ldr	r3, [pc, #216]	; (13120 <SX1276SetRxConfig+0x4ec>)
   13048:	22d7      	movs	r2, #215	; 0xd7
   1304a:	5c9b      	ldrb	r3, [r3, r2]
   1304c:	2b00      	cmp	r3, #0
   1304e:	d013      	beq.n	13078 <SX1276SetRxConfig+0x444>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   13050:	2044      	movs	r0, #68	; 0x44
   13052:	4b34      	ldr	r3, [pc, #208]	; (13124 <SX1276SetRxConfig+0x4f0>)
   13054:	4798      	blx	r3
   13056:	0003      	movs	r3, r0
   13058:	001a      	movs	r2, r3
   1305a:	2380      	movs	r3, #128	; 0x80
   1305c:	425b      	negs	r3, r3
   1305e:	4313      	orrs	r3, r2
   13060:	b2db      	uxtb	r3, r3
   13062:	0019      	movs	r1, r3
   13064:	2044      	movs	r0, #68	; 0x44
   13066:	4b30      	ldr	r3, [pc, #192]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13068:	4798      	blx	r3
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   1306a:	4b2d      	ldr	r3, [pc, #180]	; (13120 <SX1276SetRxConfig+0x4ec>)
   1306c:	22d8      	movs	r2, #216	; 0xd8
   1306e:	5c9b      	ldrb	r3, [r3, r2]
   13070:	0019      	movs	r1, r3
   13072:	2024      	movs	r0, #36	; 0x24
   13074:	4b2c      	ldr	r3, [pc, #176]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13076:	4798      	blx	r3
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   13078:	68bb      	ldr	r3, [r7, #8]
   1307a:	2b09      	cmp	r3, #9
   1307c:	d10e      	bne.n	1309c <SX1276SetRxConfig+0x468>
   1307e:	4b28      	ldr	r3, [pc, #160]	; (13120 <SX1276SetRxConfig+0x4ec>)
   13080:	228c      	movs	r2, #140	; 0x8c
   13082:	589b      	ldr	r3, [r3, r2]
   13084:	4a29      	ldr	r2, [pc, #164]	; (1312c <SX1276SetRxConfig+0x4f8>)
   13086:	4293      	cmp	r3, r2
   13088:	d908      	bls.n	1309c <SX1276SetRxConfig+0x468>
                SX1276Write( REG_LR_TEST36, 0x02 );
   1308a:	2102      	movs	r1, #2
   1308c:	2036      	movs	r0, #54	; 0x36
   1308e:	4b26      	ldr	r3, [pc, #152]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13090:	4798      	blx	r3
                SX1276Write( REG_LR_TEST3A, 0x64 );
   13092:	2164      	movs	r1, #100	; 0x64
   13094:	203a      	movs	r0, #58	; 0x3a
   13096:	4b24      	ldr	r3, [pc, #144]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13098:	4798      	blx	r3
   1309a:	e00f      	b.n	130bc <SX1276SetRxConfig+0x488>
            else if( bandwidth == 9 )
   1309c:	68bb      	ldr	r3, [r7, #8]
   1309e:	2b09      	cmp	r3, #9
   130a0:	d108      	bne.n	130b4 <SX1276SetRxConfig+0x480>
                SX1276Write( REG_LR_TEST36, 0x02 );
   130a2:	2102      	movs	r1, #2
   130a4:	2036      	movs	r0, #54	; 0x36
   130a6:	4b20      	ldr	r3, [pc, #128]	; (13128 <SX1276SetRxConfig+0x4f4>)
   130a8:	4798      	blx	r3
                SX1276Write( REG_LR_TEST3A, 0x7F );
   130aa:	217f      	movs	r1, #127	; 0x7f
   130ac:	203a      	movs	r0, #58	; 0x3a
   130ae:	4b1e      	ldr	r3, [pc, #120]	; (13128 <SX1276SetRxConfig+0x4f4>)
   130b0:	4798      	blx	r3
   130b2:	e003      	b.n	130bc <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_TEST36, 0x03 );
   130b4:	2103      	movs	r1, #3
   130b6:	2036      	movs	r0, #54	; 0x36
   130b8:	4b1b      	ldr	r3, [pc, #108]	; (13128 <SX1276SetRxConfig+0x4f4>)
   130ba:	4798      	blx	r3
            if( datarate == 6 )
   130bc:	687b      	ldr	r3, [r7, #4]
   130be:	2b06      	cmp	r3, #6
   130c0:	d114      	bne.n	130ec <SX1276SetRxConfig+0x4b8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   130c2:	2031      	movs	r0, #49	; 0x31
   130c4:	4b17      	ldr	r3, [pc, #92]	; (13124 <SX1276SetRxConfig+0x4f0>)
   130c6:	4798      	blx	r3
   130c8:	0003      	movs	r3, r0
   130ca:	b25b      	sxtb	r3, r3
   130cc:	2207      	movs	r2, #7
   130ce:	4393      	bics	r3, r2
   130d0:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
   130d2:	2205      	movs	r2, #5
   130d4:	4313      	orrs	r3, r2
   130d6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   130d8:	b2db      	uxtb	r3, r3
   130da:	0019      	movs	r1, r3
   130dc:	2031      	movs	r0, #49	; 0x31
   130de:	4b12      	ldr	r3, [pc, #72]	; (13128 <SX1276SetRxConfig+0x4f4>)
   130e0:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   130e2:	210c      	movs	r1, #12
   130e4:	2037      	movs	r0, #55	; 0x37
   130e6:	4b10      	ldr	r3, [pc, #64]	; (13128 <SX1276SetRxConfig+0x4f4>)
   130e8:	4798      	blx	r3
        break;
   130ea:	e013      	b.n	13114 <SX1276SetRxConfig+0x4e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   130ec:	2031      	movs	r0, #49	; 0x31
   130ee:	4b0d      	ldr	r3, [pc, #52]	; (13124 <SX1276SetRxConfig+0x4f0>)
   130f0:	4798      	blx	r3
   130f2:	0003      	movs	r3, r0
   130f4:	b25b      	sxtb	r3, r3
   130f6:	2207      	movs	r2, #7
   130f8:	4393      	bics	r3, r2
   130fa:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
   130fc:	2203      	movs	r2, #3
   130fe:	4313      	orrs	r3, r2
   13100:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13102:	b2db      	uxtb	r3, r3
   13104:	0019      	movs	r1, r3
   13106:	2031      	movs	r0, #49	; 0x31
   13108:	4b07      	ldr	r3, [pc, #28]	; (13128 <SX1276SetRxConfig+0x4f4>)
   1310a:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   1310c:	210a      	movs	r1, #10
   1310e:	2037      	movs	r0, #55	; 0x37
   13110:	4b05      	ldr	r3, [pc, #20]	; (13128 <SX1276SetRxConfig+0x4f4>)
   13112:	4798      	blx	r3
        break;
   13114:	46c0      	nop			; (mov r8, r8)
}
   13116:	46c0      	nop			; (mov r8, r8)
   13118:	46bd      	mov	sp, r7
   1311a:	b005      	add	sp, #20
   1311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1311e:	46c0      	nop			; (mov r8, r8)
   13120:	20001bf8 	.word	0x20001bf8
   13124:	00014229 	.word	0x00014229
   13128:	000141fd 	.word	0x000141fd
   1312c:	1f4add40 	.word	0x1f4add40

00013130 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
   13130:	b590      	push	{r4, r7, lr}
   13132:	b085      	sub	sp, #20
   13134:	af00      	add	r7, sp, #0
   13136:	60ba      	str	r2, [r7, #8]
   13138:	607b      	str	r3, [r7, #4]
   1313a:	230f      	movs	r3, #15
   1313c:	18fb      	adds	r3, r7, r3
   1313e:	1c02      	adds	r2, r0, #0
   13140:	701a      	strb	r2, [r3, #0]
   13142:	230e      	movs	r3, #14
   13144:	18fb      	adds	r3, r7, r3
   13146:	1c0a      	adds	r2, r1, #0
   13148:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   1314a:	230f      	movs	r3, #15
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	781b      	ldrb	r3, [r3, #0]
   13150:	0018      	movs	r0, r3
   13152:	4bd5      	ldr	r3, [pc, #852]	; (134a8 <SX1276SetTxConfig+0x378>)
   13154:	4798      	blx	r3

    SX1276SetRfTxPower( power );
   13156:	230e      	movs	r3, #14
   13158:	18fb      	adds	r3, r7, r3
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	b25b      	sxtb	r3, r3
   1315e:	0018      	movs	r0, r3
   13160:	4bd2      	ldr	r3, [pc, #840]	; (134ac <SX1276SetTxConfig+0x37c>)
   13162:	4798      	blx	r3

    switch( modem )
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	2b00      	cmp	r3, #0
   1316c:	d003      	beq.n	13176 <SX1276SetTxConfig+0x46>
   1316e:	2b01      	cmp	r3, #1
   13170:	d100      	bne.n	13174 <SX1276SetTxConfig+0x44>
   13172:	e0ac      	b.n	132ce <SX1276SetTxConfig+0x19e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
   13174:	e1c1      	b.n	134fa <SX1276SetTxConfig+0x3ca>
            SX1276.Settings.Fsk.Power = power;
   13176:	4bce      	ldr	r3, [pc, #824]	; (134b0 <SX1276SetTxConfig+0x380>)
   13178:	220e      	movs	r2, #14
   1317a:	18ba      	adds	r2, r7, r2
   1317c:	2190      	movs	r1, #144	; 0x90
   1317e:	7812      	ldrb	r2, [r2, #0]
   13180:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.Fdev = fdev;
   13182:	4bcb      	ldr	r3, [pc, #812]	; (134b0 <SX1276SetTxConfig+0x380>)
   13184:	2194      	movs	r1, #148	; 0x94
   13186:	68ba      	ldr	r2, [r7, #8]
   13188:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   1318a:	4bc9      	ldr	r3, [pc, #804]	; (134b0 <SX1276SetTxConfig+0x380>)
   1318c:	2198      	movs	r1, #152	; 0x98
   1318e:	687a      	ldr	r2, [r7, #4]
   13190:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Datarate = datarate;
   13192:	4bc7      	ldr	r3, [pc, #796]	; (134b0 <SX1276SetTxConfig+0x380>)
   13194:	21a0      	movs	r1, #160	; 0xa0
   13196:	6a3a      	ldr	r2, [r7, #32]
   13198:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   1319a:	4bc5      	ldr	r3, [pc, #788]	; (134b0 <SX1276SetTxConfig+0x380>)
   1319c:	2228      	movs	r2, #40	; 0x28
   1319e:	18ba      	adds	r2, r7, r2
   131a0:	21a4      	movs	r1, #164	; 0xa4
   131a2:	8812      	ldrh	r2, [r2, #0]
   131a4:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.Fsk.FixLen = fixLen;
   131a6:	4bc2      	ldr	r3, [pc, #776]	; (134b0 <SX1276SetTxConfig+0x380>)
   131a8:	222c      	movs	r2, #44	; 0x2c
   131aa:	18ba      	adds	r2, r7, r2
   131ac:	21a6      	movs	r1, #166	; 0xa6
   131ae:	7812      	ldrb	r2, [r2, #0]
   131b0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
   131b2:	4bbf      	ldr	r3, [pc, #764]	; (134b0 <SX1276SetTxConfig+0x380>)
   131b4:	2230      	movs	r2, #48	; 0x30
   131b6:	18ba      	adds	r2, r7, r2
   131b8:	21a8      	movs	r1, #168	; 0xa8
   131ba:	7812      	ldrb	r2, [r2, #0]
   131bc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   131be:	4bbc      	ldr	r3, [pc, #752]	; (134b0 <SX1276SetTxConfig+0x380>)
   131c0:	223c      	movs	r2, #60	; 0x3c
   131c2:	18ba      	adds	r2, r7, r2
   131c4:	21a9      	movs	r1, #169	; 0xa9
   131c6:	7812      	ldrb	r2, [r2, #0]
   131c8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
   131ca:	4bb9      	ldr	r3, [pc, #740]	; (134b0 <SX1276SetTxConfig+0x380>)
   131cc:	21ac      	movs	r1, #172	; 0xac
   131ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   131d0:	505a      	str	r2, [r3, r1]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
   131d2:	4bb8      	ldr	r3, [pc, #736]	; (134b4 <SX1276SetTxConfig+0x384>)
   131d4:	68b8      	ldr	r0, [r7, #8]
   131d6:	4798      	blx	r3
   131d8:	4cb7      	ldr	r4, [pc, #732]	; (134b8 <SX1276SetTxConfig+0x388>)
   131da:	2200      	movs	r2, #0
   131dc:	4bb7      	ldr	r3, [pc, #732]	; (134bc <SX1276SetTxConfig+0x38c>)
   131de:	47a0      	blx	r4
   131e0:	0003      	movs	r3, r0
   131e2:	000c      	movs	r4, r1
   131e4:	0019      	movs	r1, r3
   131e6:	0022      	movs	r2, r4
   131e8:	4bb5      	ldr	r3, [pc, #724]	; (134c0 <SX1276SetTxConfig+0x390>)
   131ea:	0008      	movs	r0, r1
   131ec:	0011      	movs	r1, r2
   131ee:	4798      	blx	r3
   131f0:	0003      	movs	r3, r0
   131f2:	b29b      	uxth	r3, r3
   131f4:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
   131f6:	68bb      	ldr	r3, [r7, #8]
   131f8:	0a1b      	lsrs	r3, r3, #8
   131fa:	b2db      	uxtb	r3, r3
   131fc:	0019      	movs	r1, r3
   131fe:	2004      	movs	r0, #4
   13200:	4bb0      	ldr	r3, [pc, #704]	; (134c4 <SX1276SetTxConfig+0x394>)
   13202:	4798      	blx	r3
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
   13204:	68bb      	ldr	r3, [r7, #8]
   13206:	b2db      	uxtb	r3, r3
   13208:	0019      	movs	r1, r3
   1320a:	2005      	movs	r0, #5
   1320c:	4bad      	ldr	r3, [pc, #692]	; (134c4 <SX1276SetTxConfig+0x394>)
   1320e:	4798      	blx	r3
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
   13210:	4ba8      	ldr	r3, [pc, #672]	; (134b4 <SX1276SetTxConfig+0x384>)
   13212:	6a38      	ldr	r0, [r7, #32]
   13214:	4798      	blx	r3
   13216:	0002      	movs	r2, r0
   13218:	000b      	movs	r3, r1
   1321a:	4ca7      	ldr	r4, [pc, #668]	; (134b8 <SX1276SetTxConfig+0x388>)
   1321c:	2000      	movs	r0, #0
   1321e:	49aa      	ldr	r1, [pc, #680]	; (134c8 <SX1276SetTxConfig+0x398>)
   13220:	47a0      	blx	r4
   13222:	0003      	movs	r3, r0
   13224:	000c      	movs	r4, r1
   13226:	0019      	movs	r1, r3
   13228:	0022      	movs	r2, r4
   1322a:	4ba5      	ldr	r3, [pc, #660]	; (134c0 <SX1276SetTxConfig+0x390>)
   1322c:	0008      	movs	r0, r1
   1322e:	0011      	movs	r1, r2
   13230:	4798      	blx	r3
   13232:	0003      	movs	r3, r0
   13234:	b29b      	uxth	r3, r3
   13236:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
   13238:	6a3b      	ldr	r3, [r7, #32]
   1323a:	0a1b      	lsrs	r3, r3, #8
   1323c:	b2db      	uxtb	r3, r3
   1323e:	0019      	movs	r1, r3
   13240:	2002      	movs	r0, #2
   13242:	4ba0      	ldr	r3, [pc, #640]	; (134c4 <SX1276SetTxConfig+0x394>)
   13244:	4798      	blx	r3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
   13246:	6a3b      	ldr	r3, [r7, #32]
   13248:	b2db      	uxtb	r3, r3
   1324a:	0019      	movs	r1, r3
   1324c:	2003      	movs	r0, #3
   1324e:	4b9d      	ldr	r3, [pc, #628]	; (134c4 <SX1276SetTxConfig+0x394>)
   13250:	4798      	blx	r3
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   13252:	2328      	movs	r3, #40	; 0x28
   13254:	18fb      	adds	r3, r7, r3
   13256:	881b      	ldrh	r3, [r3, #0]
   13258:	0a1b      	lsrs	r3, r3, #8
   1325a:	b29b      	uxth	r3, r3
   1325c:	b2db      	uxtb	r3, r3
   1325e:	0019      	movs	r1, r3
   13260:	2025      	movs	r0, #37	; 0x25
   13262:	4b98      	ldr	r3, [pc, #608]	; (134c4 <SX1276SetTxConfig+0x394>)
   13264:	4798      	blx	r3
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
   13266:	2328      	movs	r3, #40	; 0x28
   13268:	18fb      	adds	r3, r7, r3
   1326a:	881b      	ldrh	r3, [r3, #0]
   1326c:	b2db      	uxtb	r3, r3
   1326e:	0019      	movs	r1, r3
   13270:	2026      	movs	r0, #38	; 0x26
   13272:	4b94      	ldr	r3, [pc, #592]	; (134c4 <SX1276SetTxConfig+0x394>)
   13274:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13276:	2030      	movs	r0, #48	; 0x30
   13278:	4b94      	ldr	r3, [pc, #592]	; (134cc <SX1276SetTxConfig+0x39c>)
   1327a:	4798      	blx	r3
   1327c:	0003      	movs	r3, r0
   1327e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
   13280:	226f      	movs	r2, #111	; 0x6f
   13282:	4013      	ands	r3, r2
   13284:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13286:	232c      	movs	r3, #44	; 0x2c
   13288:	18fb      	adds	r3, r7, r3
   1328a:	781b      	ldrb	r3, [r3, #0]
   1328c:	2b00      	cmp	r3, #0
   1328e:	d001      	beq.n	13294 <SX1276SetTxConfig+0x164>
   13290:	2300      	movs	r3, #0
   13292:	e001      	b.n	13298 <SX1276SetTxConfig+0x168>
   13294:	2380      	movs	r3, #128	; 0x80
   13296:	425b      	negs	r3, r3
   13298:	4313      	orrs	r3, r2
   1329a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
   1329c:	2330      	movs	r3, #48	; 0x30
   1329e:	18fb      	adds	r3, r7, r3
   132a0:	781b      	ldrb	r3, [r3, #0]
   132a2:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   132a4:	b25b      	sxtb	r3, r3
   132a6:	4313      	orrs	r3, r2
   132a8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
   132aa:	b2db      	uxtb	r3, r3
   132ac:	0019      	movs	r1, r3
   132ae:	2030      	movs	r0, #48	; 0x30
   132b0:	4b84      	ldr	r3, [pc, #528]	; (134c4 <SX1276SetTxConfig+0x394>)
   132b2:	4798      	blx	r3
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   132b4:	2031      	movs	r0, #49	; 0x31
   132b6:	4b85      	ldr	r3, [pc, #532]	; (134cc <SX1276SetTxConfig+0x39c>)
   132b8:	4798      	blx	r3
   132ba:	0003      	movs	r3, r0
   132bc:	001a      	movs	r2, r3
   132be:	2340      	movs	r3, #64	; 0x40
   132c0:	4313      	orrs	r3, r2
   132c2:	b2db      	uxtb	r3, r3
   132c4:	0019      	movs	r1, r3
   132c6:	2031      	movs	r0, #49	; 0x31
   132c8:	4b7e      	ldr	r3, [pc, #504]	; (134c4 <SX1276SetTxConfig+0x394>)
   132ca:	4798      	blx	r3
        break;
   132cc:	e115      	b.n	134fa <SX1276SetTxConfig+0x3ca>
            SX1276.Settings.LoRa.Power = power;
   132ce:	4b78      	ldr	r3, [pc, #480]	; (134b0 <SX1276SetTxConfig+0x380>)
   132d0:	220e      	movs	r2, #14
   132d2:	18ba      	adds	r2, r7, r2
   132d4:	21c4      	movs	r1, #196	; 0xc4
   132d6:	7812      	ldrb	r2, [r2, #0]
   132d8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
   132da:	687b      	ldr	r3, [r7, #4]
   132dc:	2b02      	cmp	r3, #2
   132de:	d900      	bls.n	132e2 <SX1276SetTxConfig+0x1b2>
                while( 1 );
   132e0:	e7fe      	b.n	132e0 <SX1276SetTxConfig+0x1b0>
            bandwidth += 7;
   132e2:	687b      	ldr	r3, [r7, #4]
   132e4:	3307      	adds	r3, #7
   132e6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   132e8:	4b71      	ldr	r3, [pc, #452]	; (134b0 <SX1276SetTxConfig+0x380>)
   132ea:	21c8      	movs	r1, #200	; 0xc8
   132ec:	687a      	ldr	r2, [r7, #4]
   132ee:	505a      	str	r2, [r3, r1]
            SX1276.Settings.LoRa.Datarate = datarate;
   132f0:	4b6f      	ldr	r3, [pc, #444]	; (134b0 <SX1276SetTxConfig+0x380>)
   132f2:	21cc      	movs	r1, #204	; 0xcc
   132f4:	6a3a      	ldr	r2, [r7, #32]
   132f6:	505a      	str	r2, [r3, r1]
            SX1276.Settings.LoRa.Coderate = coderate;
   132f8:	4b6d      	ldr	r3, [pc, #436]	; (134b0 <SX1276SetTxConfig+0x380>)
   132fa:	2224      	movs	r2, #36	; 0x24
   132fc:	18ba      	adds	r2, r7, r2
   132fe:	21d1      	movs	r1, #209	; 0xd1
   13300:	7812      	ldrb	r2, [r2, #0]
   13302:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   13304:	4b6a      	ldr	r3, [pc, #424]	; (134b0 <SX1276SetTxConfig+0x380>)
   13306:	2228      	movs	r2, #40	; 0x28
   13308:	18ba      	adds	r2, r7, r2
   1330a:	21d2      	movs	r1, #210	; 0xd2
   1330c:	8812      	ldrh	r2, [r2, #0]
   1330e:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
   13310:	4b67      	ldr	r3, [pc, #412]	; (134b0 <SX1276SetTxConfig+0x380>)
   13312:	222c      	movs	r2, #44	; 0x2c
   13314:	18ba      	adds	r2, r7, r2
   13316:	21d4      	movs	r1, #212	; 0xd4
   13318:	7812      	ldrb	r2, [r2, #0]
   1331a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   1331c:	4b64      	ldr	r3, [pc, #400]	; (134b0 <SX1276SetTxConfig+0x380>)
   1331e:	2234      	movs	r2, #52	; 0x34
   13320:	18ba      	adds	r2, r7, r2
   13322:	21d7      	movs	r1, #215	; 0xd7
   13324:	7812      	ldrb	r2, [r2, #0]
   13326:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13328:	4b61      	ldr	r3, [pc, #388]	; (134b0 <SX1276SetTxConfig+0x380>)
   1332a:	2238      	movs	r2, #56	; 0x38
   1332c:	18ba      	adds	r2, r7, r2
   1332e:	21d8      	movs	r1, #216	; 0xd8
   13330:	7812      	ldrb	r2, [r2, #0]
   13332:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
   13334:	4b5e      	ldr	r3, [pc, #376]	; (134b0 <SX1276SetTxConfig+0x380>)
   13336:	2230      	movs	r2, #48	; 0x30
   13338:	18ba      	adds	r2, r7, r2
   1333a:	21d6      	movs	r1, #214	; 0xd6
   1333c:	7812      	ldrb	r2, [r2, #0]
   1333e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   13340:	4b5b      	ldr	r3, [pc, #364]	; (134b0 <SX1276SetTxConfig+0x380>)
   13342:	223c      	movs	r2, #60	; 0x3c
   13344:	18ba      	adds	r2, r7, r2
   13346:	21d9      	movs	r1, #217	; 0xd9
   13348:	7812      	ldrb	r2, [r2, #0]
   1334a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
   1334c:	4b58      	ldr	r3, [pc, #352]	; (134b0 <SX1276SetTxConfig+0x380>)
   1334e:	21dc      	movs	r1, #220	; 0xdc
   13350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13352:	505a      	str	r2, [r3, r1]
            if( datarate > 12 )
   13354:	6a3b      	ldr	r3, [r7, #32]
   13356:	2b0c      	cmp	r3, #12
   13358:	d902      	bls.n	13360 <SX1276SetTxConfig+0x230>
                datarate = 12;
   1335a:	230c      	movs	r3, #12
   1335c:	623b      	str	r3, [r7, #32]
   1335e:	e004      	b.n	1336a <SX1276SetTxConfig+0x23a>
            else if( datarate < 6 )
   13360:	6a3b      	ldr	r3, [r7, #32]
   13362:	2b05      	cmp	r3, #5
   13364:	d801      	bhi.n	1336a <SX1276SetTxConfig+0x23a>
                datarate = 6;
   13366:	2306      	movs	r3, #6
   13368:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   1336a:	687b      	ldr	r3, [r7, #4]
   1336c:	2b07      	cmp	r3, #7
   1336e:	d105      	bne.n	1337c <SX1276SetTxConfig+0x24c>
   13370:	6a3b      	ldr	r3, [r7, #32]
   13372:	2b0b      	cmp	r3, #11
   13374:	d008      	beq.n	13388 <SX1276SetTxConfig+0x258>
   13376:	6a3b      	ldr	r3, [r7, #32]
   13378:	2b0c      	cmp	r3, #12
   1337a:	d005      	beq.n	13388 <SX1276SetTxConfig+0x258>
   1337c:	687b      	ldr	r3, [r7, #4]
   1337e:	2b08      	cmp	r3, #8
   13380:	d107      	bne.n	13392 <SX1276SetTxConfig+0x262>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   13382:	6a3b      	ldr	r3, [r7, #32]
   13384:	2b0c      	cmp	r3, #12
   13386:	d104      	bne.n	13392 <SX1276SetTxConfig+0x262>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
   13388:	4b49      	ldr	r3, [pc, #292]	; (134b0 <SX1276SetTxConfig+0x380>)
   1338a:	22d0      	movs	r2, #208	; 0xd0
   1338c:	2101      	movs	r1, #1
   1338e:	5499      	strb	r1, [r3, r2]
   13390:	e003      	b.n	1339a <SX1276SetTxConfig+0x26a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   13392:	4b47      	ldr	r3, [pc, #284]	; (134b0 <SX1276SetTxConfig+0x380>)
   13394:	22d0      	movs	r2, #208	; 0xd0
   13396:	2100      	movs	r1, #0
   13398:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1339a:	4b45      	ldr	r3, [pc, #276]	; (134b0 <SX1276SetTxConfig+0x380>)
   1339c:	22d7      	movs	r2, #215	; 0xd7
   1339e:	5c9b      	ldrb	r3, [r3, r2]
   133a0:	2b00      	cmp	r3, #0
   133a2:	d013      	beq.n	133cc <SX1276SetTxConfig+0x29c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   133a4:	2044      	movs	r0, #68	; 0x44
   133a6:	4b49      	ldr	r3, [pc, #292]	; (134cc <SX1276SetTxConfig+0x39c>)
   133a8:	4798      	blx	r3
   133aa:	0003      	movs	r3, r0
   133ac:	001a      	movs	r2, r3
   133ae:	2380      	movs	r3, #128	; 0x80
   133b0:	425b      	negs	r3, r3
   133b2:	4313      	orrs	r3, r2
   133b4:	b2db      	uxtb	r3, r3
   133b6:	0019      	movs	r1, r3
   133b8:	2044      	movs	r0, #68	; 0x44
   133ba:	4b42      	ldr	r3, [pc, #264]	; (134c4 <SX1276SetTxConfig+0x394>)
   133bc:	4798      	blx	r3
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   133be:	4b3c      	ldr	r3, [pc, #240]	; (134b0 <SX1276SetTxConfig+0x380>)
   133c0:	22d8      	movs	r2, #216	; 0xd8
   133c2:	5c9b      	ldrb	r3, [r3, r2]
   133c4:	0019      	movs	r1, r3
   133c6:	2024      	movs	r0, #36	; 0x24
   133c8:	4b3e      	ldr	r3, [pc, #248]	; (134c4 <SX1276SetTxConfig+0x394>)
   133ca:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   133cc:	201d      	movs	r0, #29
   133ce:	4b3f      	ldr	r3, [pc, #252]	; (134cc <SX1276SetTxConfig+0x39c>)
   133d0:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   133d2:	687b      	ldr	r3, [r7, #4]
   133d4:	b2db      	uxtb	r3, r3
   133d6:	011b      	lsls	r3, r3, #4
   133d8:	b2da      	uxtb	r2, r3
   133da:	2324      	movs	r3, #36	; 0x24
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	18db      	adds	r3, r3, r3
   133e2:	b2db      	uxtb	r3, r3
   133e4:	4313      	orrs	r3, r2
   133e6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   133e8:	232c      	movs	r3, #44	; 0x2c
   133ea:	18fb      	adds	r3, r7, r3
   133ec:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   133ee:	4313      	orrs	r3, r2
   133f0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   133f2:	0019      	movs	r1, r3
   133f4:	201d      	movs	r0, #29
   133f6:	4b33      	ldr	r3, [pc, #204]	; (134c4 <SX1276SetTxConfig+0x394>)
   133f8:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   133fa:	201e      	movs	r0, #30
   133fc:	4b33      	ldr	r3, [pc, #204]	; (134cc <SX1276SetTxConfig+0x39c>)
   133fe:	4798      	blx	r3
   13400:	0003      	movs	r3, r0
   13402:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
   13404:	230b      	movs	r3, #11
   13406:	4013      	ands	r3, r2
   13408:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   1340a:	6a3b      	ldr	r3, [r7, #32]
   1340c:	b2db      	uxtb	r3, r3
   1340e:	011b      	lsls	r3, r3, #4
   13410:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
   13412:	4313      	orrs	r3, r2
   13414:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   13416:	2330      	movs	r3, #48	; 0x30
   13418:	18fb      	adds	r3, r7, r3
   1341a:	781b      	ldrb	r3, [r3, #0]
   1341c:	009b      	lsls	r3, r3, #2
   1341e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
   13420:	4313      	orrs	r3, r2
   13422:	b2db      	uxtb	r3, r3
   13424:	0019      	movs	r1, r3
   13426:	201e      	movs	r0, #30
   13428:	4b26      	ldr	r3, [pc, #152]	; (134c4 <SX1276SetTxConfig+0x394>)
   1342a:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   1342c:	2026      	movs	r0, #38	; 0x26
   1342e:	4b27      	ldr	r3, [pc, #156]	; (134cc <SX1276SetTxConfig+0x39c>)
   13430:	4798      	blx	r3
   13432:	0003      	movs	r3, r0
   13434:	b25b      	sxtb	r3, r3
   13436:	2208      	movs	r2, #8
   13438:	4393      	bics	r3, r2
   1343a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   1343c:	4b1c      	ldr	r3, [pc, #112]	; (134b0 <SX1276SetTxConfig+0x380>)
   1343e:	21d0      	movs	r1, #208	; 0xd0
   13440:	5c5b      	ldrb	r3, [r3, r1]
   13442:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
   13444:	b25b      	sxtb	r3, r3
   13446:	4313      	orrs	r3, r2
   13448:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
   1344a:	b2db      	uxtb	r3, r3
   1344c:	0019      	movs	r1, r3
   1344e:	2026      	movs	r0, #38	; 0x26
   13450:	4b1c      	ldr	r3, [pc, #112]	; (134c4 <SX1276SetTxConfig+0x394>)
   13452:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   13454:	2328      	movs	r3, #40	; 0x28
   13456:	18fb      	adds	r3, r7, r3
   13458:	881b      	ldrh	r3, [r3, #0]
   1345a:	0a1b      	lsrs	r3, r3, #8
   1345c:	b29b      	uxth	r3, r3
   1345e:	b2db      	uxtb	r3, r3
   13460:	0019      	movs	r1, r3
   13462:	2020      	movs	r0, #32
   13464:	4b17      	ldr	r3, [pc, #92]	; (134c4 <SX1276SetTxConfig+0x394>)
   13466:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
   13468:	2328      	movs	r3, #40	; 0x28
   1346a:	18fb      	adds	r3, r7, r3
   1346c:	881b      	ldrh	r3, [r3, #0]
   1346e:	b2db      	uxtb	r3, r3
   13470:	0019      	movs	r1, r3
   13472:	2021      	movs	r0, #33	; 0x21
   13474:	4b13      	ldr	r3, [pc, #76]	; (134c4 <SX1276SetTxConfig+0x394>)
   13476:	4798      	blx	r3
            if( datarate == 6 )
   13478:	6a3b      	ldr	r3, [r7, #32]
   1347a:	2b06      	cmp	r3, #6
   1347c:	d128      	bne.n	134d0 <SX1276SetTxConfig+0x3a0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   1347e:	2031      	movs	r0, #49	; 0x31
   13480:	4b12      	ldr	r3, [pc, #72]	; (134cc <SX1276SetTxConfig+0x39c>)
   13482:	4798      	blx	r3
   13484:	0003      	movs	r3, r0
   13486:	b25b      	sxtb	r3, r3
   13488:	2207      	movs	r2, #7
   1348a:	4393      	bics	r3, r2
   1348c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
   1348e:	2205      	movs	r2, #5
   13490:	4313      	orrs	r3, r2
   13492:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13494:	b2db      	uxtb	r3, r3
   13496:	0019      	movs	r1, r3
   13498:	2031      	movs	r0, #49	; 0x31
   1349a:	4b0a      	ldr	r3, [pc, #40]	; (134c4 <SX1276SetTxConfig+0x394>)
   1349c:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   1349e:	210c      	movs	r1, #12
   134a0:	2037      	movs	r0, #55	; 0x37
   134a2:	4b08      	ldr	r3, [pc, #32]	; (134c4 <SX1276SetTxConfig+0x394>)
   134a4:	4798      	blx	r3
        break;
   134a6:	e027      	b.n	134f8 <SX1276SetTxConfig+0x3c8>
   134a8:	00014135 	.word	0x00014135
   134ac:	0000561d 	.word	0x0000561d
   134b0:	20001bf8 	.word	0x20001bf8
   134b4:	00019a1d 	.word	0x00019a1d
   134b8:	0001859d 	.word	0x0001859d
   134bc:	404e8480 	.word	0x404e8480
   134c0:	000179fd 	.word	0x000179fd
   134c4:	000141fd 	.word	0x000141fd
   134c8:	417e8480 	.word	0x417e8480
   134cc:	00014229 	.word	0x00014229
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   134d0:	2031      	movs	r0, #49	; 0x31
   134d2:	4b0c      	ldr	r3, [pc, #48]	; (13504 <SX1276SetTxConfig+0x3d4>)
   134d4:	4798      	blx	r3
   134d6:	0003      	movs	r3, r0
   134d8:	b25b      	sxtb	r3, r3
   134da:	2207      	movs	r2, #7
   134dc:	4393      	bics	r3, r2
   134de:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
   134e0:	2203      	movs	r2, #3
   134e2:	4313      	orrs	r3, r2
   134e4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   134e6:	b2db      	uxtb	r3, r3
   134e8:	0019      	movs	r1, r3
   134ea:	2031      	movs	r0, #49	; 0x31
   134ec:	4b06      	ldr	r3, [pc, #24]	; (13508 <SX1276SetTxConfig+0x3d8>)
   134ee:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   134f0:	210a      	movs	r1, #10
   134f2:	2037      	movs	r0, #55	; 0x37
   134f4:	4b04      	ldr	r3, [pc, #16]	; (13508 <SX1276SetTxConfig+0x3d8>)
   134f6:	4798      	blx	r3
        break;
   134f8:	46c0      	nop			; (mov r8, r8)
}
   134fa:	46c0      	nop			; (mov r8, r8)
   134fc:	46bd      	mov	sp, r7
   134fe:	b005      	add	sp, #20
   13500:	bd90      	pop	{r4, r7, pc}
   13502:	46c0      	nop			; (mov r8, r8)
   13504:	00014229 	.word	0x00014229
   13508:	000141fd 	.word	0x000141fd

0001350c <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
   1350c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1350e:	b097      	sub	sp, #92	; 0x5c
   13510:	af00      	add	r7, sp, #0
   13512:	0002      	movs	r2, r0
   13514:	230f      	movs	r3, #15
   13516:	18fb      	adds	r3, r7, r3
   13518:	701a      	strb	r2, [r3, #0]
   1351a:	230e      	movs	r3, #14
   1351c:	18fb      	adds	r3, r7, r3
   1351e:	1c0a      	adds	r2, r1, #0
   13520:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
   13522:	2300      	movs	r3, #0
   13524:	657b      	str	r3, [r7, #84]	; 0x54

    switch( modem )
   13526:	230f      	movs	r3, #15
   13528:	18fb      	adds	r3, r7, r3
   1352a:	781b      	ldrb	r3, [r3, #0]
   1352c:	2b00      	cmp	r3, #0
   1352e:	d003      	beq.n	13538 <SX1276GetTimeOnAir+0x2c>
   13530:	2b01      	cmp	r3, #1
   13532:	d100      	bne.n	13536 <SX1276GetTimeOnAir+0x2a>
   13534:	e089      	b.n	1364a <SX1276GetTimeOnAir+0x13e>
   13536:	e16b      	b.n	13810 <SX1276GetTimeOnAir+0x304>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   13538:	4bb8      	ldr	r3, [pc, #736]	; (1381c <SX1276GetTimeOnAir+0x310>)
   1353a:	22a4      	movs	r2, #164	; 0xa4
   1353c:	5a9b      	ldrh	r3, [r3, r2]
   1353e:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   13540:	2027      	movs	r0, #39	; 0x27
   13542:	4bb7      	ldr	r3, [pc, #732]	; (13820 <SX1276GetTimeOnAir+0x314>)
   13544:	4798      	blx	r3
   13546:	0003      	movs	r3, r0
   13548:	001a      	movs	r2, r3
   1354a:	23f8      	movs	r3, #248	; 0xf8
   1354c:	439a      	bics	r2, r3
   1354e:	0013      	movs	r3, r2
   13550:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   13552:	18e2      	adds	r2, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   13554:	4bb3      	ldr	r3, [pc, #716]	; (13824 <SX1276GetTimeOnAir+0x318>)
   13556:	0010      	movs	r0, r2
   13558:	4798      	blx	r3
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
   1355a:	4bb0      	ldr	r3, [pc, #704]	; (1381c <SX1276GetTimeOnAir+0x310>)
   1355c:	22a6      	movs	r2, #166	; 0xa6
   1355e:	5c9b      	ldrb	r3, [r3, r2]
   13560:	2b00      	cmp	r3, #0
   13562:	d002      	beq.n	1356a <SX1276GetTimeOnAir+0x5e>
   13564:	2300      	movs	r3, #0
   13566:	2400      	movs	r4, #0
   13568:	e001      	b.n	1356e <SX1276GetTimeOnAir+0x62>
   1356a:	2300      	movs	r3, #0
   1356c:	4cae      	ldr	r4, [pc, #696]	; (13828 <SX1276GetTimeOnAir+0x31c>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   1356e:	4daf      	ldr	r5, [pc, #700]	; (1382c <SX1276GetTimeOnAir+0x320>)
   13570:	001a      	movs	r2, r3
   13572:	0023      	movs	r3, r4
   13574:	47a8      	blx	r5
   13576:	0003      	movs	r3, r0
   13578:	000c      	movs	r4, r1
   1357a:	603b      	str	r3, [r7, #0]
   1357c:	607c      	str	r4, [r7, #4]
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
   1357e:	2030      	movs	r0, #48	; 0x30
   13580:	4ba7      	ldr	r3, [pc, #668]	; (13820 <SX1276GetTimeOnAir+0x314>)
   13582:	4798      	blx	r3
   13584:	0003      	movs	r3, r0
   13586:	001a      	movs	r2, r3
   13588:	23f9      	movs	r3, #249	; 0xf9
   1358a:	439a      	bics	r2, r3
   1358c:	1e13      	subs	r3, r2, #0
   1358e:	d002      	beq.n	13596 <SX1276GetTimeOnAir+0x8a>
   13590:	2300      	movs	r3, #0
   13592:	4ca5      	ldr	r4, [pc, #660]	; (13828 <SX1276GetTimeOnAir+0x31c>)
   13594:	e001      	b.n	1359a <SX1276GetTimeOnAir+0x8e>
   13596:	2300      	movs	r3, #0
   13598:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
   1359a:	4da4      	ldr	r5, [pc, #656]	; (1382c <SX1276GetTimeOnAir+0x320>)
   1359c:	001a      	movs	r2, r3
   1359e:	0023      	movs	r3, r4
   135a0:	6838      	ldr	r0, [r7, #0]
   135a2:	6879      	ldr	r1, [r7, #4]
   135a4:	47a8      	blx	r5
   135a6:	0003      	movs	r3, r0
   135a8:	000c      	movs	r4, r1
   135aa:	001d      	movs	r5, r3
   135ac:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
   135ae:	230e      	movs	r3, #14
   135b0:	18fb      	adds	r3, r7, r3
   135b2:	781a      	ldrb	r2, [r3, #0]
   135b4:	4b9b      	ldr	r3, [pc, #620]	; (13824 <SX1276GetTimeOnAir+0x318>)
   135b6:	0010      	movs	r0, r2
   135b8:	4798      	blx	r3
   135ba:	0002      	movs	r2, r0
   135bc:	000b      	movs	r3, r1
   135be:	4c9b      	ldr	r4, [pc, #620]	; (1382c <SX1276GetTimeOnAir+0x320>)
   135c0:	0028      	movs	r0, r5
   135c2:	0031      	movs	r1, r6
   135c4:	47a0      	blx	r4
   135c6:	0003      	movs	r3, r0
   135c8:	000c      	movs	r4, r1
   135ca:	0018      	movs	r0, r3
   135cc:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
   135ce:	4b93      	ldr	r3, [pc, #588]	; (1381c <SX1276GetTimeOnAir+0x310>)
   135d0:	22a8      	movs	r2, #168	; 0xa8
   135d2:	5c9b      	ldrb	r3, [r3, r2]
   135d4:	2b00      	cmp	r3, #0
   135d6:	d003      	beq.n	135e0 <SX1276GetTimeOnAir+0xd4>
   135d8:	2300      	movs	r3, #0
   135da:	2480      	movs	r4, #128	; 0x80
   135dc:	05e4      	lsls	r4, r4, #23
   135de:	e001      	b.n	135e4 <SX1276GetTimeOnAir+0xd8>
   135e0:	2300      	movs	r3, #0
   135e2:	2400      	movs	r4, #0
                                     pktLen +
   135e4:	4d91      	ldr	r5, [pc, #580]	; (1382c <SX1276GetTimeOnAir+0x320>)
   135e6:	001a      	movs	r2, r3
   135e8:	0023      	movs	r3, r4
   135ea:	47a8      	blx	r5
   135ec:	0003      	movs	r3, r0
   135ee:	000c      	movs	r4, r1
   135f0:	0018      	movs	r0, r3
   135f2:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   135f4:	4c8e      	ldr	r4, [pc, #568]	; (13830 <SX1276GetTimeOnAir+0x324>)
   135f6:	2200      	movs	r2, #0
   135f8:	4b8e      	ldr	r3, [pc, #568]	; (13834 <SX1276GetTimeOnAir+0x328>)
   135fa:	47a0      	blx	r4
   135fc:	0003      	movs	r3, r0
   135fe:	000c      	movs	r4, r1
   13600:	001d      	movs	r5, r3
   13602:	0026      	movs	r6, r4
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
   13604:	4b85      	ldr	r3, [pc, #532]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13606:	22a0      	movs	r2, #160	; 0xa0
   13608:	589a      	ldr	r2, [r3, r2]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
   1360a:	4b8b      	ldr	r3, [pc, #556]	; (13838 <SX1276GetTimeOnAir+0x32c>)
   1360c:	0010      	movs	r0, r2
   1360e:	4798      	blx	r3
   13610:	0002      	movs	r2, r0
   13612:	000b      	movs	r3, r1
   13614:	4c89      	ldr	r4, [pc, #548]	; (1383c <SX1276GetTimeOnAir+0x330>)
   13616:	0028      	movs	r0, r5
   13618:	0031      	movs	r1, r6
   1361a:	47a0      	blx	r4
   1361c:	0003      	movs	r3, r0
   1361e:	000c      	movs	r4, r1
   13620:	0018      	movs	r0, r3
   13622:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   13624:	4c82      	ldr	r4, [pc, #520]	; (13830 <SX1276GetTimeOnAir+0x324>)
   13626:	2200      	movs	r2, #0
   13628:	4b85      	ldr	r3, [pc, #532]	; (13840 <SX1276GetTimeOnAir+0x334>)
   1362a:	47a0      	blx	r4
   1362c:	0003      	movs	r3, r0
   1362e:	000c      	movs	r4, r1
   13630:	0018      	movs	r0, r3
   13632:	0021      	movs	r1, r4
   13634:	4b83      	ldr	r3, [pc, #524]	; (13844 <SX1276GetTimeOnAir+0x338>)
   13636:	4798      	blx	r3
   13638:	000a      	movs	r2, r1
   1363a:	0001      	movs	r1, r0
   1363c:	4b82      	ldr	r3, [pc, #520]	; (13848 <SX1276GetTimeOnAir+0x33c>)
   1363e:	0008      	movs	r0, r1
   13640:	0011      	movs	r1, r2
   13642:	4798      	blx	r3
   13644:	0003      	movs	r3, r0
   13646:	657b      	str	r3, [r7, #84]	; 0x54
        }
        break;
   13648:	e0e2      	b.n	13810 <SX1276GetTimeOnAir+0x304>
    case MODEM_LORA:
        {
            double bw = 0.0;
   1364a:	2300      	movs	r3, #0
   1364c:	2400      	movs	r4, #0
   1364e:	64bb      	str	r3, [r7, #72]	; 0x48
   13650:	64fc      	str	r4, [r7, #76]	; 0x4c
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
   13652:	4b72      	ldr	r3, [pc, #456]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13654:	22c8      	movs	r2, #200	; 0xc8
   13656:	589b      	ldr	r3, [r3, r2]
   13658:	2b08      	cmp	r3, #8
   1365a:	d008      	beq.n	1366e <SX1276GetTimeOnAir+0x162>
   1365c:	2b09      	cmp	r3, #9
   1365e:	d00b      	beq.n	13678 <SX1276GetTimeOnAir+0x16c>
   13660:	2b07      	cmp	r3, #7
   13662:	d10e      	bne.n	13682 <SX1276GetTimeOnAir+0x176>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
   13664:	2300      	movs	r3, #0
   13666:	4c79      	ldr	r4, [pc, #484]	; (1384c <SX1276GetTimeOnAir+0x340>)
   13668:	64bb      	str	r3, [r7, #72]	; 0x48
   1366a:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   1366c:	e009      	b.n	13682 <SX1276GetTimeOnAir+0x176>
            case 8: // 250 kHz
                bw = 250000;
   1366e:	2300      	movs	r3, #0
   13670:	4c77      	ldr	r4, [pc, #476]	; (13850 <SX1276GetTimeOnAir+0x344>)
   13672:	64bb      	str	r3, [r7, #72]	; 0x48
   13674:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   13676:	e004      	b.n	13682 <SX1276GetTimeOnAir+0x176>
            case 9: // 500 kHz
                bw = 500000;
   13678:	2300      	movs	r3, #0
   1367a:	4c76      	ldr	r4, [pc, #472]	; (13854 <SX1276GetTimeOnAir+0x348>)
   1367c:	64bb      	str	r3, [r7, #72]	; 0x48
   1367e:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   13680:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
   13682:	4b66      	ldr	r3, [pc, #408]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13684:	22cc      	movs	r2, #204	; 0xcc
   13686:	589b      	ldr	r3, [r3, r2]
   13688:	2201      	movs	r2, #1
   1368a:	409a      	lsls	r2, r3
   1368c:	4b65      	ldr	r3, [pc, #404]	; (13824 <SX1276GetTimeOnAir+0x318>)
   1368e:	0010      	movs	r0, r2
   13690:	4798      	blx	r3
   13692:	0002      	movs	r2, r0
   13694:	000b      	movs	r3, r1
   13696:	4c69      	ldr	r4, [pc, #420]	; (1383c <SX1276GetTimeOnAir+0x330>)
   13698:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1369a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1369c:	47a0      	blx	r4
   1369e:	0003      	movs	r3, r0
   136a0:	000c      	movs	r4, r1
   136a2:	643b      	str	r3, [r7, #64]	; 0x40
   136a4:	647c      	str	r4, [r7, #68]	; 0x44
            double ts = 1 / rs;
   136a6:	4c65      	ldr	r4, [pc, #404]	; (1383c <SX1276GetTimeOnAir+0x330>)
   136a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   136aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   136ac:	2000      	movs	r0, #0
   136ae:	495e      	ldr	r1, [pc, #376]	; (13828 <SX1276GetTimeOnAir+0x31c>)
   136b0:	47a0      	blx	r4
   136b2:	0003      	movs	r3, r0
   136b4:	000c      	movs	r4, r1
   136b6:	63bb      	str	r3, [r7, #56]	; 0x38
   136b8:	63fc      	str	r4, [r7, #60]	; 0x3c
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
   136ba:	4b58      	ldr	r3, [pc, #352]	; (1381c <SX1276GetTimeOnAir+0x310>)
   136bc:	22d2      	movs	r2, #210	; 0xd2
   136be:	5a9b      	ldrh	r3, [r3, r2]
   136c0:	001a      	movs	r2, r3
   136c2:	4b58      	ldr	r3, [pc, #352]	; (13824 <SX1276GetTimeOnAir+0x318>)
   136c4:	0010      	movs	r0, r2
   136c6:	4798      	blx	r3
   136c8:	4c58      	ldr	r4, [pc, #352]	; (1382c <SX1276GetTimeOnAir+0x320>)
   136ca:	2200      	movs	r2, #0
   136cc:	4b62      	ldr	r3, [pc, #392]	; (13858 <SX1276GetTimeOnAir+0x34c>)
   136ce:	47a0      	blx	r4
   136d0:	0003      	movs	r3, r0
   136d2:	000c      	movs	r4, r1
   136d4:	0018      	movs	r0, r3
   136d6:	0021      	movs	r1, r4
   136d8:	4c55      	ldr	r4, [pc, #340]	; (13830 <SX1276GetTimeOnAir+0x324>)
   136da:	6bba      	ldr	r2, [r7, #56]	; 0x38
   136dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   136de:	47a0      	blx	r4
   136e0:	0003      	movs	r3, r0
   136e2:	000c      	movs	r4, r1
   136e4:	633b      	str	r3, [r7, #48]	; 0x30
   136e6:	637c      	str	r4, [r7, #52]	; 0x34
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   136e8:	230e      	movs	r3, #14
   136ea:	18fb      	adds	r3, r7, r3
   136ec:	781b      	ldrb	r3, [r3, #0]
   136ee:	00db      	lsls	r3, r3, #3
   136f0:	0019      	movs	r1, r3
   136f2:	4b4a      	ldr	r3, [pc, #296]	; (1381c <SX1276GetTimeOnAir+0x310>)
   136f4:	22cc      	movs	r2, #204	; 0xcc
   136f6:	589b      	ldr	r3, [r3, r2]
   136f8:	009b      	lsls	r3, r3, #2
   136fa:	1acb      	subs	r3, r1, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
   136fc:	4a47      	ldr	r2, [pc, #284]	; (1381c <SX1276GetTimeOnAir+0x310>)
   136fe:	21d6      	movs	r1, #214	; 0xd6
   13700:	5c52      	ldrb	r2, [r2, r1]
   13702:	0112      	lsls	r2, r2, #4
   13704:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
   13706:	4b45      	ldr	r3, [pc, #276]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13708:	21d4      	movs	r1, #212	; 0xd4
   1370a:	5c5b      	ldrb	r3, [r3, r1]
   1370c:	2b00      	cmp	r3, #0
   1370e:	d001      	beq.n	13714 <SX1276GetTimeOnAir+0x208>
   13710:	2314      	movs	r3, #20
   13712:	e000      	b.n	13716 <SX1276GetTimeOnAir+0x20a>
   13714:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
   13716:	1ad3      	subs	r3, r2, r3
   13718:	331c      	adds	r3, #28
   1371a:	001a      	movs	r2, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   1371c:	4b46      	ldr	r3, [pc, #280]	; (13838 <SX1276GetTimeOnAir+0x32c>)
   1371e:	0010      	movs	r0, r2
   13720:	4798      	blx	r3
   13722:	0005      	movs	r5, r0
   13724:	000e      	movs	r6, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
   13726:	4b3d      	ldr	r3, [pc, #244]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13728:	22cc      	movs	r2, #204	; 0xcc
   1372a:	589a      	ldr	r2, [r3, r2]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
   1372c:	4b3b      	ldr	r3, [pc, #236]	; (1381c <SX1276GetTimeOnAir+0x310>)
   1372e:	21d0      	movs	r1, #208	; 0xd0
   13730:	5c5b      	ldrb	r3, [r3, r1]
   13732:	2b00      	cmp	r3, #0
   13734:	dd01      	ble.n	1373a <SX1276GetTimeOnAir+0x22e>
   13736:	2302      	movs	r3, #2
   13738:	e000      	b.n	1373c <SX1276GetTimeOnAir+0x230>
   1373a:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
   1373c:	1ad3      	subs	r3, r2, r3
   1373e:	009a      	lsls	r2, r3, #2
   13740:	4b3d      	ldr	r3, [pc, #244]	; (13838 <SX1276GetTimeOnAir+0x32c>)
   13742:	0010      	movs	r0, r2
   13744:	4798      	blx	r3
   13746:	0002      	movs	r2, r0
   13748:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   1374a:	4c3c      	ldr	r4, [pc, #240]	; (1383c <SX1276GetTimeOnAir+0x330>)
   1374c:	0028      	movs	r0, r5
   1374e:	0031      	movs	r1, r6
   13750:	47a0      	blx	r4
   13752:	0003      	movs	r3, r0
   13754:	000c      	movs	r4, r1
   13756:	0018      	movs	r0, r3
   13758:	0021      	movs	r1, r4
   1375a:	4b40      	ldr	r3, [pc, #256]	; (1385c <SX1276GetTimeOnAir+0x350>)
   1375c:	4798      	blx	r3
   1375e:	0005      	movs	r5, r0
   13760:	000e      	movs	r6, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
   13762:	4b2e      	ldr	r3, [pc, #184]	; (1381c <SX1276GetTimeOnAir+0x310>)
   13764:	22d1      	movs	r2, #209	; 0xd1
   13766:	5c9b      	ldrb	r3, [r3, r2]
   13768:	1d1a      	adds	r2, r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
   1376a:	4b2e      	ldr	r3, [pc, #184]	; (13824 <SX1276GetTimeOnAir+0x318>)
   1376c:	0010      	movs	r0, r2
   1376e:	4798      	blx	r3
   13770:	0002      	movs	r2, r0
   13772:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   13774:	4c2e      	ldr	r4, [pc, #184]	; (13830 <SX1276GetTimeOnAir+0x324>)
   13776:	0028      	movs	r0, r5
   13778:	0031      	movs	r1, r6
   1377a:	47a0      	blx	r4
   1377c:	0003      	movs	r3, r0
   1377e:	000c      	movs	r4, r1
   13780:	62bb      	str	r3, [r7, #40]	; 0x28
   13782:	62fc      	str	r4, [r7, #44]	; 0x2c
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
   13784:	4c36      	ldr	r4, [pc, #216]	; (13860 <SX1276GetTimeOnAir+0x354>)
   13786:	2200      	movs	r2, #0
   13788:	2300      	movs	r3, #0
   1378a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1378c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1378e:	47a0      	blx	r4
   13790:	1e03      	subs	r3, r0, #0
   13792:	d008      	beq.n	137a6 <SX1276GetTimeOnAir+0x29a>
   13794:	4c25      	ldr	r4, [pc, #148]	; (1382c <SX1276GetTimeOnAir+0x320>)
   13796:	2200      	movs	r2, #0
   13798:	4b26      	ldr	r3, [pc, #152]	; (13834 <SX1276GetTimeOnAir+0x328>)
   1379a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1379c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1379e:	47a0      	blx	r4
   137a0:	0003      	movs	r3, r0
   137a2:	000c      	movs	r4, r1
   137a4:	e001      	b.n	137aa <SX1276GetTimeOnAir+0x29e>
   137a6:	2300      	movs	r3, #0
   137a8:	4c22      	ldr	r4, [pc, #136]	; (13834 <SX1276GetTimeOnAir+0x328>)
   137aa:	623b      	str	r3, [r7, #32]
   137ac:	627c      	str	r4, [r7, #36]	; 0x24
            double tPayload = nPayload * ts;
   137ae:	4c20      	ldr	r4, [pc, #128]	; (13830 <SX1276GetTimeOnAir+0x324>)
   137b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   137b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   137b4:	6a38      	ldr	r0, [r7, #32]
   137b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   137b8:	47a0      	blx	r4
   137ba:	0003      	movs	r3, r0
   137bc:	000c      	movs	r4, r1
   137be:	61bb      	str	r3, [r7, #24]
   137c0:	61fc      	str	r4, [r7, #28]
            // Time on air
            double tOnAir = tPreamble + tPayload;
   137c2:	4c1a      	ldr	r4, [pc, #104]	; (1382c <SX1276GetTimeOnAir+0x320>)
   137c4:	69ba      	ldr	r2, [r7, #24]
   137c6:	69fb      	ldr	r3, [r7, #28]
   137c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   137ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
   137cc:	47a0      	blx	r4
   137ce:	0003      	movs	r3, r0
   137d0:	000c      	movs	r4, r1
   137d2:	613b      	str	r3, [r7, #16]
   137d4:	617c      	str	r4, [r7, #20]
            // return ms secs
            airTime = floor( tOnAir * 1000 + 0.999 );
   137d6:	4c16      	ldr	r4, [pc, #88]	; (13830 <SX1276GetTimeOnAir+0x324>)
   137d8:	2200      	movs	r2, #0
   137da:	4b19      	ldr	r3, [pc, #100]	; (13840 <SX1276GetTimeOnAir+0x334>)
   137dc:	6938      	ldr	r0, [r7, #16]
   137de:	6979      	ldr	r1, [r7, #20]
   137e0:	47a0      	blx	r4
   137e2:	0003      	movs	r3, r0
   137e4:	000c      	movs	r4, r1
   137e6:	0018      	movs	r0, r3
   137e8:	0021      	movs	r1, r4
   137ea:	4c10      	ldr	r4, [pc, #64]	; (1382c <SX1276GetTimeOnAir+0x320>)
   137ec:	4a1d      	ldr	r2, [pc, #116]	; (13864 <SX1276GetTimeOnAir+0x358>)
   137ee:	4b1e      	ldr	r3, [pc, #120]	; (13868 <SX1276GetTimeOnAir+0x35c>)
   137f0:	47a0      	blx	r4
   137f2:	0003      	movs	r3, r0
   137f4:	000c      	movs	r4, r1
   137f6:	0018      	movs	r0, r3
   137f8:	0021      	movs	r1, r4
   137fa:	4b1c      	ldr	r3, [pc, #112]	; (1386c <SX1276GetTimeOnAir+0x360>)
   137fc:	4798      	blx	r3
   137fe:	000a      	movs	r2, r1
   13800:	0001      	movs	r1, r0
   13802:	4b11      	ldr	r3, [pc, #68]	; (13848 <SX1276GetTimeOnAir+0x33c>)
   13804:	0008      	movs	r0, r1
   13806:	0011      	movs	r1, r2
   13808:	4798      	blx	r3
   1380a:	0003      	movs	r3, r0
   1380c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        break;
   1380e:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
   13810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   13812:	0018      	movs	r0, r3
   13814:	46bd      	mov	sp, r7
   13816:	b017      	add	sp, #92	; 0x5c
   13818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1381a:	46c0      	nop			; (mov r8, r8)
   1381c:	20001bf8 	.word	0x20001bf8
   13820:	00014229 	.word	0x00014229
   13824:	00019999 	.word	0x00019999
   13828:	3ff00000 	.word	0x3ff00000
   1382c:	00017f7d 	.word	0x00017f7d
   13830:	00018e05 	.word	0x00018e05
   13834:	40200000 	.word	0x40200000
   13838:	00019a1d 	.word	0x00019a1d
   1383c:	0001859d 	.word	0x0001859d
   13840:	408f4000 	.word	0x408f4000
   13844:	000175a9 	.word	0x000175a9
   13848:	000179fd 	.word	0x000179fd
   1384c:	40fe8480 	.word	0x40fe8480
   13850:	410e8480 	.word	0x410e8480
   13854:	411e8480 	.word	0x411e8480
   13858:	40110000 	.word	0x40110000
   1385c:	0001734d 	.word	0x0001734d
   13860:	00017995 	.word	0x00017995
   13864:	d916872b 	.word	0xd916872b
   13868:	3feff7ce 	.word	0x3feff7ce
   1386c:	00017479 	.word	0x00017479

00013870 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
   13870:	b580      	push	{r7, lr}
   13872:	b084      	sub	sp, #16
   13874:	af00      	add	r7, sp, #0
   13876:	6078      	str	r0, [r7, #4]
   13878:	000a      	movs	r2, r1
   1387a:	1cfb      	adds	r3, r7, #3
   1387c:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
   1387e:	2300      	movs	r3, #0
   13880:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
   13882:	4b5c      	ldr	r3, [pc, #368]	; (139f4 <SX1276Send+0x184>)
   13884:	2289      	movs	r2, #137	; 0x89
   13886:	5c9b      	ldrb	r3, [r3, r2]
   13888:	2b00      	cmp	r3, #0
   1388a:	d002      	beq.n	13892 <SX1276Send+0x22>
   1388c:	2b01      	cmp	r3, #1
   1388e:	d051      	beq.n	13934 <SX1276Send+0xc4>
   13890:	e0a8      	b.n	139e4 <SX1276Send+0x174>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13892:	4b58      	ldr	r3, [pc, #352]	; (139f4 <SX1276Send+0x184>)
   13894:	22c0      	movs	r2, #192	; 0xc0
   13896:	2100      	movs	r1, #0
   13898:	5299      	strh	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.Size = size;
   1389a:	1cfb      	adds	r3, r7, #3
   1389c:	781b      	ldrb	r3, [r3, #0]
   1389e:	b299      	uxth	r1, r3
   138a0:	4b54      	ldr	r3, [pc, #336]	; (139f4 <SX1276Send+0x184>)
   138a2:	22be      	movs	r2, #190	; 0xbe
   138a4:	5299      	strh	r1, [r3, r2]

            if( SX1276.Settings.Fsk.FixLen == false )
   138a6:	4b53      	ldr	r3, [pc, #332]	; (139f4 <SX1276Send+0x184>)
   138a8:	22a6      	movs	r2, #166	; 0xa6
   138aa:	5c9b      	ldrb	r3, [r3, r2]
   138ac:	2201      	movs	r2, #1
   138ae:	4053      	eors	r3, r2
   138b0:	b2db      	uxtb	r3, r3
   138b2:	2b00      	cmp	r3, #0
   138b4:	d005      	beq.n	138c2 <SX1276Send+0x52>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
   138b6:	1cfb      	adds	r3, r7, #3
   138b8:	2101      	movs	r1, #1
   138ba:	0018      	movs	r0, r3
   138bc:	4b4e      	ldr	r3, [pc, #312]	; (139f8 <SX1276Send+0x188>)
   138be:	4798      	blx	r3
   138c0:	e005      	b.n	138ce <SX1276Send+0x5e>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
   138c2:	1cfb      	adds	r3, r7, #3
   138c4:	781b      	ldrb	r3, [r3, #0]
   138c6:	0019      	movs	r1, r3
   138c8:	2032      	movs	r0, #50	; 0x32
   138ca:	4b4c      	ldr	r3, [pc, #304]	; (139fc <SX1276Send+0x18c>)
   138cc:	4798      	blx	r3
            }

            if( ( size > 0 ) && ( size <= 64 ) )
   138ce:	1cfb      	adds	r3, r7, #3
   138d0:	781b      	ldrb	r3, [r3, #0]
   138d2:	2b00      	cmp	r3, #0
   138d4:	d009      	beq.n	138ea <SX1276Send+0x7a>
   138d6:	1cfb      	adds	r3, r7, #3
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b40      	cmp	r3, #64	; 0x40
   138dc:	d805      	bhi.n	138ea <SX1276Send+0x7a>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   138de:	1cfb      	adds	r3, r7, #3
   138e0:	7819      	ldrb	r1, [r3, #0]
   138e2:	4b44      	ldr	r3, [pc, #272]	; (139f4 <SX1276Send+0x184>)
   138e4:	22c3      	movs	r2, #195	; 0xc3
   138e6:	5499      	strb	r1, [r3, r2]
   138e8:	e00b      	b.n	13902 <SX1276Send+0x92>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
   138ea:	1cfb      	adds	r3, r7, #3
   138ec:	781b      	ldrb	r3, [r3, #0]
   138ee:	b29a      	uxth	r2, r3
   138f0:	6879      	ldr	r1, [r7, #4]
   138f2:	4b43      	ldr	r3, [pc, #268]	; (13a00 <SX1276Send+0x190>)
   138f4:	0018      	movs	r0, r3
   138f6:	4b43      	ldr	r3, [pc, #268]	; (13a04 <SX1276Send+0x194>)
   138f8:	4798      	blx	r3
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
   138fa:	4b3e      	ldr	r3, [pc, #248]	; (139f4 <SX1276Send+0x184>)
   138fc:	22c3      	movs	r2, #195	; 0xc3
   138fe:	2120      	movs	r1, #32
   13900:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
   13902:	4b3c      	ldr	r3, [pc, #240]	; (139f4 <SX1276Send+0x184>)
   13904:	22c3      	movs	r2, #195	; 0xc3
   13906:	5c9a      	ldrb	r2, [r3, r2]
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	0011      	movs	r1, r2
   1390c:	0018      	movs	r0, r3
   1390e:	4b3a      	ldr	r3, [pc, #232]	; (139f8 <SX1276Send+0x188>)
   13910:	4798      	blx	r3
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13912:	4b38      	ldr	r3, [pc, #224]	; (139f4 <SX1276Send+0x184>)
   13914:	22c0      	movs	r2, #192	; 0xc0
   13916:	5a9a      	ldrh	r2, [r3, r2]
   13918:	4b36      	ldr	r3, [pc, #216]	; (139f4 <SX1276Send+0x184>)
   1391a:	21c3      	movs	r1, #195	; 0xc3
   1391c:	5c5b      	ldrb	r3, [r3, r1]
   1391e:	b29b      	uxth	r3, r3
   13920:	18d3      	adds	r3, r2, r3
   13922:	b299      	uxth	r1, r3
   13924:	4b33      	ldr	r3, [pc, #204]	; (139f4 <SX1276Send+0x184>)
   13926:	22c0      	movs	r2, #192	; 0xc0
   13928:	5299      	strh	r1, [r3, r2]
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   1392a:	4b32      	ldr	r3, [pc, #200]	; (139f4 <SX1276Send+0x184>)
   1392c:	22ac      	movs	r2, #172	; 0xac
   1392e:	589b      	ldr	r3, [r3, r2]
   13930:	60fb      	str	r3, [r7, #12]
        }
        break;
   13932:	e057      	b.n	139e4 <SX1276Send+0x174>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
   13934:	4b2f      	ldr	r3, [pc, #188]	; (139f4 <SX1276Send+0x184>)
   13936:	22d9      	movs	r2, #217	; 0xd9
   13938:	5c9b      	ldrb	r3, [r3, r2]
   1393a:	2b00      	cmp	r3, #0
   1393c:	d011      	beq.n	13962 <SX1276Send+0xf2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1393e:	2033      	movs	r0, #51	; 0x33
   13940:	4b31      	ldr	r3, [pc, #196]	; (13a08 <SX1276Send+0x198>)
   13942:	4798      	blx	r3
   13944:	0003      	movs	r3, r0
   13946:	001a      	movs	r2, r3
   13948:	2341      	movs	r3, #65	; 0x41
   1394a:	439a      	bics	r2, r3
   1394c:	0013      	movs	r3, r2
   1394e:	b2db      	uxtb	r3, r3
   13950:	0019      	movs	r1, r3
   13952:	2033      	movs	r0, #51	; 0x33
   13954:	4b29      	ldr	r3, [pc, #164]	; (139fc <SX1276Send+0x18c>)
   13956:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13958:	2119      	movs	r1, #25
   1395a:	203b      	movs	r0, #59	; 0x3b
   1395c:	4b27      	ldr	r3, [pc, #156]	; (139fc <SX1276Send+0x18c>)
   1395e:	4798      	blx	r3
   13960:	e013      	b.n	1398a <SX1276Send+0x11a>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13962:	2033      	movs	r0, #51	; 0x33
   13964:	4b28      	ldr	r3, [pc, #160]	; (13a08 <SX1276Send+0x198>)
   13966:	4798      	blx	r3
   13968:	0003      	movs	r3, r0
   1396a:	b25b      	sxtb	r3, r3
   1396c:	2241      	movs	r2, #65	; 0x41
   1396e:	4393      	bics	r3, r2
   13970:	b25b      	sxtb	r3, r3
   13972:	2201      	movs	r2, #1
   13974:	4313      	orrs	r3, r2
   13976:	b25b      	sxtb	r3, r3
   13978:	b2db      	uxtb	r3, r3
   1397a:	0019      	movs	r1, r3
   1397c:	2033      	movs	r0, #51	; 0x33
   1397e:	4b1f      	ldr	r3, [pc, #124]	; (139fc <SX1276Send+0x18c>)
   13980:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13982:	211d      	movs	r1, #29
   13984:	203b      	movs	r0, #59	; 0x3b
   13986:	4b1d      	ldr	r3, [pc, #116]	; (139fc <SX1276Send+0x18c>)
   13988:	4798      	blx	r3
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
   1398a:	1cfb      	adds	r3, r7, #3
   1398c:	7819      	ldrb	r1, [r3, #0]
   1398e:	4b19      	ldr	r3, [pc, #100]	; (139f4 <SX1276Send+0x184>)
   13990:	22e8      	movs	r2, #232	; 0xe8
   13992:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13994:	1cfb      	adds	r3, r7, #3
   13996:	781b      	ldrb	r3, [r3, #0]
   13998:	0019      	movs	r1, r3
   1399a:	2022      	movs	r0, #34	; 0x22
   1399c:	4b17      	ldr	r3, [pc, #92]	; (139fc <SX1276Send+0x18c>)
   1399e:	4798      	blx	r3

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   139a0:	2100      	movs	r1, #0
   139a2:	200e      	movs	r0, #14
   139a4:	4b15      	ldr	r3, [pc, #84]	; (139fc <SX1276Send+0x18c>)
   139a6:	4798      	blx	r3
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   139a8:	2100      	movs	r1, #0
   139aa:	200d      	movs	r0, #13
   139ac:	4b13      	ldr	r3, [pc, #76]	; (139fc <SX1276Send+0x18c>)
   139ae:	4798      	blx	r3

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   139b0:	2001      	movs	r0, #1
   139b2:	4b15      	ldr	r3, [pc, #84]	; (13a08 <SX1276Send+0x198>)
   139b4:	4798      	blx	r3
   139b6:	0003      	movs	r3, r0
   139b8:	001a      	movs	r2, r3
   139ba:	23f8      	movs	r3, #248	; 0xf8
   139bc:	439a      	bics	r2, r3
   139be:	1e13      	subs	r3, r2, #0
   139c0:	d104      	bne.n	139cc <SX1276Send+0x15c>
            {
                SX1276SetStby( );
   139c2:	4b12      	ldr	r3, [pc, #72]	; (13a0c <SX1276Send+0x19c>)
   139c4:	4798      	blx	r3
                DelayMs( 1 );
   139c6:	2001      	movs	r0, #1
   139c8:	4b11      	ldr	r3, [pc, #68]	; (13a10 <SX1276Send+0x1a0>)
   139ca:	4798      	blx	r3
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
   139cc:	1cfb      	adds	r3, r7, #3
   139ce:	781a      	ldrb	r2, [r3, #0]
   139d0:	687b      	ldr	r3, [r7, #4]
   139d2:	0011      	movs	r1, r2
   139d4:	0018      	movs	r0, r3
   139d6:	4b08      	ldr	r3, [pc, #32]	; (139f8 <SX1276Send+0x188>)
   139d8:	4798      	blx	r3
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   139da:	4b06      	ldr	r3, [pc, #24]	; (139f4 <SX1276Send+0x184>)
   139dc:	22dc      	movs	r2, #220	; 0xdc
   139de:	589b      	ldr	r3, [r3, r2]
   139e0:	60fb      	str	r3, [r7, #12]
        }
        break;
   139e2:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
   139e4:	68fb      	ldr	r3, [r7, #12]
   139e6:	0018      	movs	r0, r3
   139e8:	4b0a      	ldr	r3, [pc, #40]	; (13a14 <SX1276Send+0x1a4>)
   139ea:	4798      	blx	r3
}
   139ec:	46c0      	nop			; (mov r8, r8)
   139ee:	46bd      	mov	sp, r7
   139f0:	b004      	add	sp, #16
   139f2:	bd80      	pop	{r7, pc}
   139f4:	20001bf8 	.word	0x20001bf8
   139f8:	00014385 	.word	0x00014385
   139fc:	000141fd 	.word	0x000141fd
   13a00:	20001644 	.word	0x20001644
   13a04:	00004339 	.word	0x00004339
   13a08:	00014229 	.word	0x00014229
   13a0c:	00013a55 	.word	0x00013a55
   13a10:	00016a0d 	.word	0x00016a0d
   13a14:	00013de9 	.word	0x00013de9

00013a18 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
   13a18:	b580      	push	{r7, lr}
   13a1a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
   13a1c:	4b08      	ldr	r3, [pc, #32]	; (13a40 <SX1276SetSleep+0x28>)
   13a1e:	0018      	movs	r0, r3
   13a20:	4b08      	ldr	r3, [pc, #32]	; (13a44 <SX1276SetSleep+0x2c>)
   13a22:	4798      	blx	r3
    TimerStop( &TxTimeoutTimer );
   13a24:	4b08      	ldr	r3, [pc, #32]	; (13a48 <SX1276SetSleep+0x30>)
   13a26:	0018      	movs	r0, r3
   13a28:	4b06      	ldr	r3, [pc, #24]	; (13a44 <SX1276SetSleep+0x2c>)
   13a2a:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13a2c:	2000      	movs	r0, #0
   13a2e:	4b07      	ldr	r3, [pc, #28]	; (13a4c <SX1276SetSleep+0x34>)
   13a30:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
   13a32:	4b07      	ldr	r3, [pc, #28]	; (13a50 <SX1276SetSleep+0x38>)
   13a34:	2288      	movs	r2, #136	; 0x88
   13a36:	2100      	movs	r1, #0
   13a38:	5499      	strb	r1, [r3, r2]
}
   13a3a:	46c0      	nop			; (mov r8, r8)
   13a3c:	46bd      	mov	sp, r7
   13a3e:	bd80      	pop	{r7, pc}
   13a40:	20001ce4 	.word	0x20001ce4
   13a44:	00016fe5 	.word	0x00016fe5
   13a48:	20001bd0 	.word	0x20001bd0
   13a4c:	000140cd 	.word	0x000140cd
   13a50:	20001bf8 	.word	0x20001bf8

00013a54 <SX1276SetStby>:

void SX1276SetStby( void )
{
   13a54:	b580      	push	{r7, lr}
   13a56:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
   13a58:	4b08      	ldr	r3, [pc, #32]	; (13a7c <SX1276SetStby+0x28>)
   13a5a:	0018      	movs	r0, r3
   13a5c:	4b08      	ldr	r3, [pc, #32]	; (13a80 <SX1276SetStby+0x2c>)
   13a5e:	4798      	blx	r3
    TimerStop( &TxTimeoutTimer );
   13a60:	4b08      	ldr	r3, [pc, #32]	; (13a84 <SX1276SetStby+0x30>)
   13a62:	0018      	movs	r0, r3
   13a64:	4b06      	ldr	r3, [pc, #24]	; (13a80 <SX1276SetStby+0x2c>)
   13a66:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_STANDBY );
   13a68:	2001      	movs	r0, #1
   13a6a:	4b07      	ldr	r3, [pc, #28]	; (13a88 <SX1276SetStby+0x34>)
   13a6c:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
   13a6e:	4b07      	ldr	r3, [pc, #28]	; (13a8c <SX1276SetStby+0x38>)
   13a70:	2288      	movs	r2, #136	; 0x88
   13a72:	2100      	movs	r1, #0
   13a74:	5499      	strb	r1, [r3, r2]
}
   13a76:	46c0      	nop			; (mov r8, r8)
   13a78:	46bd      	mov	sp, r7
   13a7a:	bd80      	pop	{r7, pc}
   13a7c:	20001ce4 	.word	0x20001ce4
   13a80:	00016fe5 	.word	0x00016fe5
   13a84:	20001bd0 	.word	0x20001bd0
   13a88:	000140cd 	.word	0x000140cd
   13a8c:	20001bf8 	.word	0x20001bf8

00013a90 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
   13a90:	b580      	push	{r7, lr}
   13a92:	b084      	sub	sp, #16
   13a94:	af00      	add	r7, sp, #0
   13a96:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
   13a98:	230f      	movs	r3, #15
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	2200      	movs	r2, #0
   13a9e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
   13aa0:	4bbf      	ldr	r3, [pc, #764]	; (13da0 <SX1276SetRx+0x310>)
   13aa2:	2289      	movs	r2, #137	; 0x89
   13aa4:	5c9b      	ldrb	r3, [r3, r2]
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d002      	beq.n	13ab0 <SX1276SetRx+0x20>
   13aaa:	2b01      	cmp	r3, #1
   13aac:	d043      	beq.n	13b36 <SX1276SetRx+0xa6>
   13aae:	e132      	b.n	13d16 <SX1276SetRx+0x286>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   13ab0:	230f      	movs	r3, #15
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	4aba      	ldr	r2, [pc, #744]	; (13da0 <SX1276SetRx+0x310>)
   13ab6:	21aa      	movs	r1, #170	; 0xaa
   13ab8:	5c52      	ldrb	r2, [r2, r1]
   13aba:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13abc:	2040      	movs	r0, #64	; 0x40
   13abe:	4bb9      	ldr	r3, [pc, #740]	; (13da4 <SX1276SetRx+0x314>)
   13ac0:	4798      	blx	r3
   13ac2:	0003      	movs	r3, r0
   13ac4:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
   13ac6:	2203      	movs	r2, #3
   13ac8:	4013      	ands	r3, r2
   13aca:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
   13acc:	220c      	movs	r2, #12
   13ace:	4313      	orrs	r3, r2
   13ad0:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13ad2:	b2db      	uxtb	r3, r3
   13ad4:	0019      	movs	r1, r3
   13ad6:	2040      	movs	r0, #64	; 0x40
   13ad8:	4bb3      	ldr	r3, [pc, #716]	; (13da8 <SX1276SetRx+0x318>)
   13ada:	4798      	blx	r3
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13adc:	2041      	movs	r0, #65	; 0x41
   13ade:	4bb1      	ldr	r3, [pc, #708]	; (13da4 <SX1276SetRx+0x314>)
   13ae0:	4798      	blx	r3
   13ae2:	0003      	movs	r3, r0
   13ae4:	001a      	movs	r2, r3
   13ae6:	233f      	movs	r3, #63	; 0x3f
   13ae8:	425b      	negs	r3, r3
   13aea:	4313      	orrs	r3, r2
   13aec:	b2db      	uxtb	r3, r3
   13aee:	0019      	movs	r1, r3
   13af0:	2041      	movs	r0, #65	; 0x41
   13af2:	4bad      	ldr	r3, [pc, #692]	; (13da8 <SX1276SetRx+0x318>)
   13af4:	4798      	blx	r3
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13af6:	2035      	movs	r0, #53	; 0x35
   13af8:	4baa      	ldr	r3, [pc, #680]	; (13da4 <SX1276SetRx+0x314>)
   13afa:	4798      	blx	r3
   13afc:	0003      	movs	r3, r0
   13afe:	001a      	movs	r2, r3
   13b00:	233f      	movs	r3, #63	; 0x3f
   13b02:	4013      	ands	r3, r2
   13b04:	b2d9      	uxtb	r1, r3
   13b06:	4ba6      	ldr	r3, [pc, #664]	; (13da0 <SX1276SetRx+0x310>)
   13b08:	22c2      	movs	r2, #194	; 0xc2
   13b0a:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   13b0c:	211e      	movs	r1, #30
   13b0e:	200d      	movs	r0, #13
   13b10:	4ba5      	ldr	r3, [pc, #660]	; (13da8 <SX1276SetRx+0x318>)
   13b12:	4798      	blx	r3

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   13b14:	4ba2      	ldr	r3, [pc, #648]	; (13da0 <SX1276SetRx+0x310>)
   13b16:	22b4      	movs	r2, #180	; 0xb4
   13b18:	2100      	movs	r1, #0
   13b1a:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   13b1c:	4ba0      	ldr	r3, [pc, #640]	; (13da0 <SX1276SetRx+0x310>)
   13b1e:	22b5      	movs	r2, #181	; 0xb5
   13b20:	2100      	movs	r1, #0
   13b22:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13b24:	4b9e      	ldr	r3, [pc, #632]	; (13da0 <SX1276SetRx+0x310>)
   13b26:	22c0      	movs	r2, #192	; 0xc0
   13b28:	2100      	movs	r1, #0
   13b2a:	5299      	strh	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.Size = 0;
   13b2c:	4b9c      	ldr	r3, [pc, #624]	; (13da0 <SX1276SetRx+0x310>)
   13b2e:	22be      	movs	r2, #190	; 0xbe
   13b30:	2100      	movs	r1, #0
   13b32:	5299      	strh	r1, [r3, r2]
        }
        break;
   13b34:	e0ef      	b.n	13d16 <SX1276SetRx+0x286>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
   13b36:	4b9a      	ldr	r3, [pc, #616]	; (13da0 <SX1276SetRx+0x310>)
   13b38:	22d9      	movs	r2, #217	; 0xd9
   13b3a:	5c9b      	ldrb	r3, [r3, r2]
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d010      	beq.n	13b62 <SX1276SetRx+0xd2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13b40:	2033      	movs	r0, #51	; 0x33
   13b42:	4b98      	ldr	r3, [pc, #608]	; (13da4 <SX1276SetRx+0x314>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	001a      	movs	r2, r3
   13b4a:	2341      	movs	r3, #65	; 0x41
   13b4c:	4313      	orrs	r3, r2
   13b4e:	b2db      	uxtb	r3, r3
   13b50:	0019      	movs	r1, r3
   13b52:	2033      	movs	r0, #51	; 0x33
   13b54:	4b94      	ldr	r3, [pc, #592]	; (13da8 <SX1276SetRx+0x318>)
   13b56:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13b58:	2119      	movs	r1, #25
   13b5a:	203b      	movs	r0, #59	; 0x3b
   13b5c:	4b92      	ldr	r3, [pc, #584]	; (13da8 <SX1276SetRx+0x318>)
   13b5e:	4798      	blx	r3
   13b60:	e013      	b.n	13b8a <SX1276SetRx+0xfa>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13b62:	2033      	movs	r0, #51	; 0x33
   13b64:	4b8f      	ldr	r3, [pc, #572]	; (13da4 <SX1276SetRx+0x314>)
   13b66:	4798      	blx	r3
   13b68:	0003      	movs	r3, r0
   13b6a:	b25b      	sxtb	r3, r3
   13b6c:	2241      	movs	r2, #65	; 0x41
   13b6e:	4393      	bics	r3, r2
   13b70:	b25b      	sxtb	r3, r3
   13b72:	2201      	movs	r2, #1
   13b74:	4313      	orrs	r3, r2
   13b76:	b25b      	sxtb	r3, r3
   13b78:	b2db      	uxtb	r3, r3
   13b7a:	0019      	movs	r1, r3
   13b7c:	2033      	movs	r0, #51	; 0x33
   13b7e:	4b8a      	ldr	r3, [pc, #552]	; (13da8 <SX1276SetRx+0x318>)
   13b80:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13b82:	211d      	movs	r1, #29
   13b84:	203b      	movs	r0, #59	; 0x3b
   13b86:	4b88      	ldr	r3, [pc, #544]	; (13da8 <SX1276SetRx+0x318>)
   13b88:	4798      	blx	r3
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13b8a:	4b85      	ldr	r3, [pc, #532]	; (13da0 <SX1276SetRx+0x310>)
   13b8c:	22c8      	movs	r2, #200	; 0xc8
   13b8e:	589b      	ldr	r3, [r3, r2]
   13b90:	2b08      	cmp	r3, #8
   13b92:	d900      	bls.n	13b96 <SX1276SetRx+0x106>
   13b94:	e07d      	b.n	13c92 <SX1276SetRx+0x202>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13b96:	2031      	movs	r0, #49	; 0x31
   13b98:	4b82      	ldr	r3, [pc, #520]	; (13da4 <SX1276SetRx+0x314>)
   13b9a:	4798      	blx	r3
   13b9c:	0003      	movs	r3, r0
   13b9e:	001a      	movs	r2, r3
   13ba0:	237f      	movs	r3, #127	; 0x7f
   13ba2:	4013      	ands	r3, r2
   13ba4:	b2db      	uxtb	r3, r3
   13ba6:	0019      	movs	r1, r3
   13ba8:	2031      	movs	r0, #49	; 0x31
   13baa:	4b7f      	ldr	r3, [pc, #508]	; (13da8 <SX1276SetRx+0x318>)
   13bac:	4798      	blx	r3
                SX1276Write( REG_LR_TEST30, 0x00 );
   13bae:	2100      	movs	r1, #0
   13bb0:	2030      	movs	r0, #48	; 0x30
   13bb2:	4b7d      	ldr	r3, [pc, #500]	; (13da8 <SX1276SetRx+0x318>)
   13bb4:	4798      	blx	r3
                switch( SX1276.Settings.LoRa.Bandwidth )
   13bb6:	4b7a      	ldr	r3, [pc, #488]	; (13da0 <SX1276SetRx+0x310>)
   13bb8:	22c8      	movs	r2, #200	; 0xc8
   13bba:	589b      	ldr	r3, [r3, r2]
   13bbc:	2b08      	cmp	r3, #8
   13bbe:	d875      	bhi.n	13cac <SX1276SetRx+0x21c>
   13bc0:	009a      	lsls	r2, r3, #2
   13bc2:	4b7a      	ldr	r3, [pc, #488]	; (13dac <SX1276SetRx+0x31c>)
   13bc4:	18d3      	adds	r3, r2, r3
   13bc6:	681b      	ldr	r3, [r3, #0]
   13bc8:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
   13bca:	2148      	movs	r1, #72	; 0x48
   13bcc:	202f      	movs	r0, #47	; 0x2f
   13bce:	4b76      	ldr	r3, [pc, #472]	; (13da8 <SX1276SetRx+0x318>)
   13bd0:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   13bd2:	4b73      	ldr	r3, [pc, #460]	; (13da0 <SX1276SetRx+0x310>)
   13bd4:	228c      	movs	r2, #140	; 0x8c
   13bd6:	589b      	ldr	r3, [r3, r2]
   13bd8:	4a75      	ldr	r2, [pc, #468]	; (13db0 <SX1276SetRx+0x320>)
   13bda:	4694      	mov	ip, r2
   13bdc:	4463      	add	r3, ip
   13bde:	0018      	movs	r0, r3
   13be0:	4b74      	ldr	r3, [pc, #464]	; (13db4 <SX1276SetRx+0x324>)
   13be2:	4798      	blx	r3
                    break;
   13be4:	e062      	b.n	13cac <SX1276SetRx+0x21c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   13be6:	2144      	movs	r1, #68	; 0x44
   13be8:	202f      	movs	r0, #47	; 0x2f
   13bea:	4b6f      	ldr	r3, [pc, #444]	; (13da8 <SX1276SetRx+0x318>)
   13bec:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   13bee:	4b6c      	ldr	r3, [pc, #432]	; (13da0 <SX1276SetRx+0x310>)
   13bf0:	228c      	movs	r2, #140	; 0x8c
   13bf2:	589b      	ldr	r3, [r3, r2]
   13bf4:	4a70      	ldr	r2, [pc, #448]	; (13db8 <SX1276SetRx+0x328>)
   13bf6:	4694      	mov	ip, r2
   13bf8:	4463      	add	r3, ip
   13bfa:	0018      	movs	r0, r3
   13bfc:	4b6d      	ldr	r3, [pc, #436]	; (13db4 <SX1276SetRx+0x324>)
   13bfe:	4798      	blx	r3
                    break;
   13c00:	e054      	b.n	13cac <SX1276SetRx+0x21c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   13c02:	2144      	movs	r1, #68	; 0x44
   13c04:	202f      	movs	r0, #47	; 0x2f
   13c06:	4b68      	ldr	r3, [pc, #416]	; (13da8 <SX1276SetRx+0x318>)
   13c08:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   13c0a:	4b65      	ldr	r3, [pc, #404]	; (13da0 <SX1276SetRx+0x310>)
   13c0c:	228c      	movs	r2, #140	; 0x8c
   13c0e:	589b      	ldr	r3, [r3, r2]
   13c10:	4a6a      	ldr	r2, [pc, #424]	; (13dbc <SX1276SetRx+0x32c>)
   13c12:	4694      	mov	ip, r2
   13c14:	4463      	add	r3, ip
   13c16:	0018      	movs	r0, r3
   13c18:	4b66      	ldr	r3, [pc, #408]	; (13db4 <SX1276SetRx+0x324>)
   13c1a:	4798      	blx	r3
                    break;
   13c1c:	e046      	b.n	13cac <SX1276SetRx+0x21c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   13c1e:	2144      	movs	r1, #68	; 0x44
   13c20:	202f      	movs	r0, #47	; 0x2f
   13c22:	4b61      	ldr	r3, [pc, #388]	; (13da8 <SX1276SetRx+0x318>)
   13c24:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   13c26:	4b5e      	ldr	r3, [pc, #376]	; (13da0 <SX1276SetRx+0x310>)
   13c28:	228c      	movs	r2, #140	; 0x8c
   13c2a:	589b      	ldr	r3, [r3, r2]
   13c2c:	4a64      	ldr	r2, [pc, #400]	; (13dc0 <SX1276SetRx+0x330>)
   13c2e:	4694      	mov	ip, r2
   13c30:	4463      	add	r3, ip
   13c32:	0018      	movs	r0, r3
   13c34:	4b5f      	ldr	r3, [pc, #380]	; (13db4 <SX1276SetRx+0x324>)
   13c36:	4798      	blx	r3
                    break;
   13c38:	e038      	b.n	13cac <SX1276SetRx+0x21c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   13c3a:	2144      	movs	r1, #68	; 0x44
   13c3c:	202f      	movs	r0, #47	; 0x2f
   13c3e:	4b5a      	ldr	r3, [pc, #360]	; (13da8 <SX1276SetRx+0x318>)
   13c40:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   13c42:	4b57      	ldr	r3, [pc, #348]	; (13da0 <SX1276SetRx+0x310>)
   13c44:	228c      	movs	r2, #140	; 0x8c
   13c46:	589b      	ldr	r3, [r3, r2]
   13c48:	4a5e      	ldr	r2, [pc, #376]	; (13dc4 <SX1276SetRx+0x334>)
   13c4a:	4694      	mov	ip, r2
   13c4c:	4463      	add	r3, ip
   13c4e:	0018      	movs	r0, r3
   13c50:	4b58      	ldr	r3, [pc, #352]	; (13db4 <SX1276SetRx+0x324>)
   13c52:	4798      	blx	r3
                    break;
   13c54:	e02a      	b.n	13cac <SX1276SetRx+0x21c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   13c56:	2144      	movs	r1, #68	; 0x44
   13c58:	202f      	movs	r0, #47	; 0x2f
   13c5a:	4b53      	ldr	r3, [pc, #332]	; (13da8 <SX1276SetRx+0x318>)
   13c5c:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13c5e:	4b50      	ldr	r3, [pc, #320]	; (13da0 <SX1276SetRx+0x310>)
   13c60:	228c      	movs	r2, #140	; 0x8c
   13c62:	589b      	ldr	r3, [r3, r2]
   13c64:	4a58      	ldr	r2, [pc, #352]	; (13dc8 <SX1276SetRx+0x338>)
   13c66:	4694      	mov	ip, r2
   13c68:	4463      	add	r3, ip
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b51      	ldr	r3, [pc, #324]	; (13db4 <SX1276SetRx+0x324>)
   13c6e:	4798      	blx	r3
                    break;
   13c70:	e01c      	b.n	13cac <SX1276SetRx+0x21c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   13c72:	2140      	movs	r1, #64	; 0x40
   13c74:	202f      	movs	r0, #47	; 0x2f
   13c76:	4b4c      	ldr	r3, [pc, #304]	; (13da8 <SX1276SetRx+0x318>)
   13c78:	4798      	blx	r3
                    break;
   13c7a:	e017      	b.n	13cac <SX1276SetRx+0x21c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   13c7c:	2140      	movs	r1, #64	; 0x40
   13c7e:	202f      	movs	r0, #47	; 0x2f
   13c80:	4b49      	ldr	r3, [pc, #292]	; (13da8 <SX1276SetRx+0x318>)
   13c82:	4798      	blx	r3
                    break;
   13c84:	e012      	b.n	13cac <SX1276SetRx+0x21c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   13c86:	2140      	movs	r1, #64	; 0x40
   13c88:	202f      	movs	r0, #47	; 0x2f
   13c8a:	4b47      	ldr	r3, [pc, #284]	; (13da8 <SX1276SetRx+0x318>)
   13c8c:	4798      	blx	r3
                    break;
   13c8e:	46c0      	nop			; (mov r8, r8)
   13c90:	e00c      	b.n	13cac <SX1276SetRx+0x21c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   13c92:	2031      	movs	r0, #49	; 0x31
   13c94:	4b43      	ldr	r3, [pc, #268]	; (13da4 <SX1276SetRx+0x314>)
   13c96:	4798      	blx	r3
   13c98:	0003      	movs	r3, r0
   13c9a:	001a      	movs	r2, r3
   13c9c:	2380      	movs	r3, #128	; 0x80
   13c9e:	425b      	negs	r3, r3
   13ca0:	4313      	orrs	r3, r2
   13ca2:	b2db      	uxtb	r3, r3
   13ca4:	0019      	movs	r1, r3
   13ca6:	2031      	movs	r0, #49	; 0x31
   13ca8:	4b3f      	ldr	r3, [pc, #252]	; (13da8 <SX1276SetRx+0x318>)
   13caa:	4798      	blx	r3
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   13cac:	230f      	movs	r3, #15
   13cae:	18fb      	adds	r3, r7, r3
   13cb0:	4a3b      	ldr	r2, [pc, #236]	; (13da0 <SX1276SetRx+0x310>)
   13cb2:	21da      	movs	r1, #218	; 0xda
   13cb4:	5c52      	ldrb	r2, [r2, r1]
   13cb6:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13cb8:	4b39      	ldr	r3, [pc, #228]	; (13da0 <SX1276SetRx+0x310>)
   13cba:	22d7      	movs	r2, #215	; 0xd7
   13cbc:	5c9b      	ldrb	r3, [r3, r2]
   13cbe:	2b00      	cmp	r3, #0
   13cc0:	d010      	beq.n	13ce4 <SX1276SetRx+0x254>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13cc2:	211d      	movs	r1, #29
   13cc4:	2011      	movs	r0, #17
   13cc6:	4b38      	ldr	r3, [pc, #224]	; (13da8 <SX1276SetRx+0x318>)
   13cc8:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   13cca:	2040      	movs	r0, #64	; 0x40
   13ccc:	4b35      	ldr	r3, [pc, #212]	; (13da4 <SX1276SetRx+0x314>)
   13cce:	4798      	blx	r3
   13cd0:	0003      	movs	r3, r0
   13cd2:	001a      	movs	r2, r3
   13cd4:	2333      	movs	r3, #51	; 0x33
   13cd6:	4013      	ands	r3, r2
   13cd8:	b2db      	uxtb	r3, r3
   13cda:	0019      	movs	r1, r3
   13cdc:	2040      	movs	r0, #64	; 0x40
   13cde:	4b32      	ldr	r3, [pc, #200]	; (13da8 <SX1276SetRx+0x318>)
   13ce0:	4798      	blx	r3
   13ce2:	e00f      	b.n	13d04 <SX1276SetRx+0x274>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13ce4:	211f      	movs	r1, #31
   13ce6:	2011      	movs	r0, #17
   13ce8:	4b2f      	ldr	r3, [pc, #188]	; (13da8 <SX1276SetRx+0x318>)
   13cea:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13cec:	2040      	movs	r0, #64	; 0x40
   13cee:	4b2d      	ldr	r3, [pc, #180]	; (13da4 <SX1276SetRx+0x314>)
   13cf0:	4798      	blx	r3
   13cf2:	0003      	movs	r3, r0
   13cf4:	001a      	movs	r2, r3
   13cf6:	233f      	movs	r3, #63	; 0x3f
   13cf8:	4013      	ands	r3, r2
   13cfa:	b2db      	uxtb	r3, r3
   13cfc:	0019      	movs	r1, r3
   13cfe:	2040      	movs	r0, #64	; 0x40
   13d00:	4b29      	ldr	r3, [pc, #164]	; (13da8 <SX1276SetRx+0x318>)
   13d02:	4798      	blx	r3
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   13d04:	2100      	movs	r1, #0
   13d06:	200f      	movs	r0, #15
   13d08:	4b27      	ldr	r3, [pc, #156]	; (13da8 <SX1276SetRx+0x318>)
   13d0a:	4798      	blx	r3
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13d0c:	2100      	movs	r1, #0
   13d0e:	200d      	movs	r0, #13
   13d10:	4b25      	ldr	r3, [pc, #148]	; (13da8 <SX1276SetRx+0x318>)
   13d12:	4798      	blx	r3
        }
        break;
   13d14:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
   13d16:	2380      	movs	r3, #128	; 0x80
   13d18:	005a      	lsls	r2, r3, #1
   13d1a:	4b2c      	ldr	r3, [pc, #176]	; (13dcc <SX1276SetRx+0x33c>)
   13d1c:	2100      	movs	r1, #0
   13d1e:	0018      	movs	r0, r3
   13d20:	4b2b      	ldr	r3, [pc, #172]	; (13dd0 <SX1276SetRx+0x340>)
   13d22:	4798      	blx	r3

    SX1276.Settings.State = RF_RX_RUNNING;
   13d24:	4b1e      	ldr	r3, [pc, #120]	; (13da0 <SX1276SetRx+0x310>)
   13d26:	2288      	movs	r2, #136	; 0x88
   13d28:	2101      	movs	r1, #1
   13d2a:	5499      	strb	r1, [r3, r2]
    if( timeout != 0 )
   13d2c:	687b      	ldr	r3, [r7, #4]
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d009      	beq.n	13d46 <SX1276SetRx+0x2b6>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
   13d32:	687a      	ldr	r2, [r7, #4]
   13d34:	4b27      	ldr	r3, [pc, #156]	; (13dd4 <SX1276SetRx+0x344>)
   13d36:	0011      	movs	r1, r2
   13d38:	0018      	movs	r0, r3
   13d3a:	4b27      	ldr	r3, [pc, #156]	; (13dd8 <SX1276SetRx+0x348>)
   13d3c:	4798      	blx	r3
        TimerStart( &RxTimeoutTimer );
   13d3e:	4b25      	ldr	r3, [pc, #148]	; (13dd4 <SX1276SetRx+0x344>)
   13d40:	0018      	movs	r0, r3
   13d42:	4b26      	ldr	r3, [pc, #152]	; (13ddc <SX1276SetRx+0x34c>)
   13d44:	4798      	blx	r3
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
   13d46:	4b16      	ldr	r3, [pc, #88]	; (13da0 <SX1276SetRx+0x310>)
   13d48:	2289      	movs	r2, #137	; 0x89
   13d4a:	5c9b      	ldrb	r3, [r3, r2]
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d117      	bne.n	13d80 <SX1276SetRx+0x2f0>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   13d50:	2005      	movs	r0, #5
   13d52:	4b23      	ldr	r3, [pc, #140]	; (13de0 <SX1276SetRx+0x350>)
   13d54:	4798      	blx	r3

        if( rxContinuous == false )
   13d56:	230f      	movs	r3, #15
   13d58:	18fb      	adds	r3, r7, r3
   13d5a:	781b      	ldrb	r3, [r3, #0]
   13d5c:	2201      	movs	r2, #1
   13d5e:	4053      	eors	r3, r2
   13d60:	b2db      	uxtb	r3, r3
   13d62:	2b00      	cmp	r3, #0
   13d64:	d018      	beq.n	13d98 <SX1276SetRx+0x308>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   13d66:	4b0e      	ldr	r3, [pc, #56]	; (13da0 <SX1276SetRx+0x310>)
   13d68:	22b0      	movs	r2, #176	; 0xb0
   13d6a:	589a      	ldr	r2, [r3, r2]
   13d6c:	4b1d      	ldr	r3, [pc, #116]	; (13de4 <SX1276SetRx+0x354>)
   13d6e:	0011      	movs	r1, r2
   13d70:	0018      	movs	r0, r3
   13d72:	4b19      	ldr	r3, [pc, #100]	; (13dd8 <SX1276SetRx+0x348>)
   13d74:	4798      	blx	r3
            TimerStart( &RxTimeoutSyncWord );
   13d76:	4b1b      	ldr	r3, [pc, #108]	; (13de4 <SX1276SetRx+0x354>)
   13d78:	0018      	movs	r0, r3
   13d7a:	4b18      	ldr	r3, [pc, #96]	; (13ddc <SX1276SetRx+0x34c>)
   13d7c:	4798      	blx	r3
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
   13d7e:	e00b      	b.n	13d98 <SX1276SetRx+0x308>
        if( rxContinuous == true )
   13d80:	230f      	movs	r3, #15
   13d82:	18fb      	adds	r3, r7, r3
   13d84:	781b      	ldrb	r3, [r3, #0]
   13d86:	2b00      	cmp	r3, #0
   13d88:	d003      	beq.n	13d92 <SX1276SetRx+0x302>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   13d8a:	2005      	movs	r0, #5
   13d8c:	4b14      	ldr	r3, [pc, #80]	; (13de0 <SX1276SetRx+0x350>)
   13d8e:	4798      	blx	r3
}
   13d90:	e002      	b.n	13d98 <SX1276SetRx+0x308>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   13d92:	2006      	movs	r0, #6
   13d94:	4b12      	ldr	r3, [pc, #72]	; (13de0 <SX1276SetRx+0x350>)
   13d96:	4798      	blx	r3
}
   13d98:	46c0      	nop			; (mov r8, r8)
   13d9a:	46bd      	mov	sp, r7
   13d9c:	b004      	add	sp, #16
   13d9e:	bd80      	pop	{r7, pc}
   13da0:	20001bf8 	.word	0x20001bf8
   13da4:	00014229 	.word	0x00014229
   13da8:	000141fd 	.word	0x000141fd
   13dac:	0001f8d0 	.word	0x0001f8d0
   13db0:	00001e82 	.word	0x00001e82
   13db4:	000128fd 	.word	0x000128fd
   13db8:	000028b4 	.word	0x000028b4
   13dbc:	00003d04 	.word	0x00003d04
   13dc0:	0000515e 	.word	0x0000515e
   13dc4:	00007a12 	.word	0x00007a12
   13dc8:	0000a2c6 	.word	0x0000a2c6
   13dcc:	20001644 	.word	0x20001644
   13dd0:	00019be9 	.word	0x00019be9
   13dd4:	20001ce4 	.word	0x20001ce4
   13dd8:	00017119 	.word	0x00017119
   13ddc:	00016d8d 	.word	0x00016d8d
   13de0:	000140cd 	.word	0x000140cd
   13de4:	20001be4 	.word	0x20001be4

00013de8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
   13de8:	b580      	push	{r7, lr}
   13dea:	b082      	sub	sp, #8
   13dec:	af00      	add	r7, sp, #0
   13dee:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
   13df0:	687a      	ldr	r2, [r7, #4]
   13df2:	4b39      	ldr	r3, [pc, #228]	; (13ed8 <SX1276SetTx+0xf0>)
   13df4:	0011      	movs	r1, r2
   13df6:	0018      	movs	r0, r3
   13df8:	4b38      	ldr	r3, [pc, #224]	; (13edc <SX1276SetTx+0xf4>)
   13dfa:	4798      	blx	r3

    switch( SX1276.Settings.Modem )
   13dfc:	4b38      	ldr	r3, [pc, #224]	; (13ee0 <SX1276SetTx+0xf8>)
   13dfe:	2289      	movs	r2, #137	; 0x89
   13e00:	5c9b      	ldrb	r3, [r3, r2]
   13e02:	2b00      	cmp	r3, #0
   13e04:	d002      	beq.n	13e0c <SX1276SetTx+0x24>
   13e06:	2b01      	cmp	r3, #1
   13e08:	d028      	beq.n	13e5c <SX1276SetTx+0x74>
   13e0a:	e056      	b.n	13eba <SX1276SetTx+0xd2>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13e0c:	2040      	movs	r0, #64	; 0x40
   13e0e:	4b35      	ldr	r3, [pc, #212]	; (13ee4 <SX1276SetTx+0xfc>)
   13e10:	4798      	blx	r3
   13e12:	0003      	movs	r3, r0
   13e14:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
   13e16:	2203      	movs	r2, #3
   13e18:	4013      	ands	r3, r2
   13e1a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
   13e1c:	2210      	movs	r2, #16
   13e1e:	4313      	orrs	r3, r2
   13e20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13e22:	b2db      	uxtb	r3, r3
   13e24:	0019      	movs	r1, r3
   13e26:	2040      	movs	r0, #64	; 0x40
   13e28:	4b2f      	ldr	r3, [pc, #188]	; (13ee8 <SX1276SetTx+0x100>)
   13e2a:	4798      	blx	r3
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13e2c:	2041      	movs	r0, #65	; 0x41
   13e2e:	4b2d      	ldr	r3, [pc, #180]	; (13ee4 <SX1276SetTx+0xfc>)
   13e30:	4798      	blx	r3
   13e32:	0003      	movs	r3, r0
   13e34:	001a      	movs	r2, r3
   13e36:	233e      	movs	r3, #62	; 0x3e
   13e38:	4013      	ands	r3, r2
   13e3a:	b2db      	uxtb	r3, r3
   13e3c:	0019      	movs	r1, r3
   13e3e:	2041      	movs	r0, #65	; 0x41
   13e40:	4b29      	ldr	r3, [pc, #164]	; (13ee8 <SX1276SetTx+0x100>)
   13e42:	4798      	blx	r3
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13e44:	2035      	movs	r0, #53	; 0x35
   13e46:	4b27      	ldr	r3, [pc, #156]	; (13ee4 <SX1276SetTx+0xfc>)
   13e48:	4798      	blx	r3
   13e4a:	0003      	movs	r3, r0
   13e4c:	001a      	movs	r2, r3
   13e4e:	233f      	movs	r3, #63	; 0x3f
   13e50:	4013      	ands	r3, r2
   13e52:	b2d9      	uxtb	r1, r3
   13e54:	4b22      	ldr	r3, [pc, #136]	; (13ee0 <SX1276SetTx+0xf8>)
   13e56:	22c2      	movs	r2, #194	; 0xc2
   13e58:	5499      	strb	r1, [r3, r2]
        }
        break;
   13e5a:	e02e      	b.n	13eba <SX1276SetTx+0xd2>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13e5c:	4b20      	ldr	r3, [pc, #128]	; (13ee0 <SX1276SetTx+0xf8>)
   13e5e:	22d7      	movs	r2, #215	; 0xd7
   13e60:	5c9b      	ldrb	r3, [r3, r2]
   13e62:	2b00      	cmp	r3, #0
   13e64:	d014      	beq.n	13e90 <SX1276SetTx+0xa8>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13e66:	21f5      	movs	r1, #245	; 0xf5
   13e68:	2011      	movs	r0, #17
   13e6a:	4b1f      	ldr	r3, [pc, #124]	; (13ee8 <SX1276SetTx+0x100>)
   13e6c:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   13e6e:	2040      	movs	r0, #64	; 0x40
   13e70:	4b1c      	ldr	r3, [pc, #112]	; (13ee4 <SX1276SetTx+0xfc>)
   13e72:	4798      	blx	r3
   13e74:	0003      	movs	r3, r0
   13e76:	b25b      	sxtb	r3, r3
   13e78:	2233      	movs	r2, #51	; 0x33
   13e7a:	4013      	ands	r3, r2
   13e7c:	b25b      	sxtb	r3, r3
   13e7e:	2240      	movs	r2, #64	; 0x40
   13e80:	4313      	orrs	r3, r2
   13e82:	b25b      	sxtb	r3, r3
   13e84:	b2db      	uxtb	r3, r3
   13e86:	0019      	movs	r1, r3
   13e88:	2040      	movs	r0, #64	; 0x40
   13e8a:	4b17      	ldr	r3, [pc, #92]	; (13ee8 <SX1276SetTx+0x100>)
   13e8c:	4798      	blx	r3

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
   13e8e:	e013      	b.n	13eb8 <SX1276SetTx+0xd0>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13e90:	21f7      	movs	r1, #247	; 0xf7
   13e92:	2011      	movs	r0, #17
   13e94:	4b14      	ldr	r3, [pc, #80]	; (13ee8 <SX1276SetTx+0x100>)
   13e96:	4798      	blx	r3
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   13e98:	2040      	movs	r0, #64	; 0x40
   13e9a:	4b12      	ldr	r3, [pc, #72]	; (13ee4 <SX1276SetTx+0xfc>)
   13e9c:	4798      	blx	r3
   13e9e:	0003      	movs	r3, r0
   13ea0:	b25b      	sxtb	r3, r3
   13ea2:	223f      	movs	r2, #63	; 0x3f
   13ea4:	4013      	ands	r3, r2
   13ea6:	b25b      	sxtb	r3, r3
   13ea8:	2240      	movs	r2, #64	; 0x40
   13eaa:	4313      	orrs	r3, r2
   13eac:	b25b      	sxtb	r3, r3
   13eae:	b2db      	uxtb	r3, r3
   13eb0:	0019      	movs	r1, r3
   13eb2:	2040      	movs	r0, #64	; 0x40
   13eb4:	4b0c      	ldr	r3, [pc, #48]	; (13ee8 <SX1276SetTx+0x100>)
   13eb6:	4798      	blx	r3
        break;
   13eb8:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <SX1276SetTx+0xf8>)
   13ebc:	2288      	movs	r2, #136	; 0x88
   13ebe:	2102      	movs	r1, #2
   13ec0:	5499      	strb	r1, [r3, r2]
    TimerStart( &TxTimeoutTimer );
   13ec2:	4b05      	ldr	r3, [pc, #20]	; (13ed8 <SX1276SetTx+0xf0>)
   13ec4:	0018      	movs	r0, r3
   13ec6:	4b09      	ldr	r3, [pc, #36]	; (13eec <SX1276SetTx+0x104>)
   13ec8:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   13eca:	2003      	movs	r0, #3
   13ecc:	4b08      	ldr	r3, [pc, #32]	; (13ef0 <SX1276SetTx+0x108>)
   13ece:	4798      	blx	r3
}
   13ed0:	46c0      	nop			; (mov r8, r8)
   13ed2:	46bd      	mov	sp, r7
   13ed4:	b002      	add	sp, #8
   13ed6:	bd80      	pop	{r7, pc}
   13ed8:	20001bd0 	.word	0x20001bd0
   13edc:	00017119 	.word	0x00017119
   13ee0:	20001bf8 	.word	0x20001bf8
   13ee4:	00014229 	.word	0x00014229
   13ee8:	000141fd 	.word	0x000141fd
   13eec:	00016d8d 	.word	0x00016d8d
   13ef0:	000140cd 	.word	0x000140cd

00013ef4 <SX1276StartCad>:

void SX1276StartCad( void )
{
   13ef4:	b580      	push	{r7, lr}
   13ef6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
   13ef8:	4b12      	ldr	r3, [pc, #72]	; (13f44 <SX1276StartCad+0x50>)
   13efa:	2289      	movs	r2, #137	; 0x89
   13efc:	5c9b      	ldrb	r3, [r3, r2]
   13efe:	2b00      	cmp	r3, #0
   13f00:	d01b      	beq.n	13f3a <SX1276StartCad+0x46>
   13f02:	2b01      	cmp	r3, #1
   13f04:	d000      	beq.n	13f08 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
   13f06:	e019      	b.n	13f3c <SX1276StartCad+0x48>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13f08:	21fa      	movs	r1, #250	; 0xfa
   13f0a:	2011      	movs	r0, #17
   13f0c:	4b0e      	ldr	r3, [pc, #56]	; (13f48 <SX1276StartCad+0x54>)
   13f0e:	4798      	blx	r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
   13f10:	2040      	movs	r0, #64	; 0x40
   13f12:	4b0e      	ldr	r3, [pc, #56]	; (13f4c <SX1276StartCad+0x58>)
   13f14:	4798      	blx	r3
   13f16:	0003      	movs	r3, r0
   13f18:	001a      	movs	r2, r3
   13f1a:	2303      	movs	r3, #3
   13f1c:	439a      	bics	r2, r3
   13f1e:	0013      	movs	r3, r2
   13f20:	b2db      	uxtb	r3, r3
   13f22:	0019      	movs	r1, r3
   13f24:	2040      	movs	r0, #64	; 0x40
   13f26:	4b08      	ldr	r3, [pc, #32]	; (13f48 <SX1276StartCad+0x54>)
   13f28:	4798      	blx	r3
            SX1276.Settings.State = RF_CAD;
   13f2a:	4b06      	ldr	r3, [pc, #24]	; (13f44 <SX1276StartCad+0x50>)
   13f2c:	2288      	movs	r2, #136	; 0x88
   13f2e:	2103      	movs	r1, #3
   13f30:	5499      	strb	r1, [r3, r2]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
   13f32:	2007      	movs	r0, #7
   13f34:	4b06      	ldr	r3, [pc, #24]	; (13f50 <SX1276StartCad+0x5c>)
   13f36:	4798      	blx	r3
        break;
   13f38:	e000      	b.n	13f3c <SX1276StartCad+0x48>
        break;
   13f3a:	46c0      	nop			; (mov r8, r8)
    }
}
   13f3c:	46c0      	nop			; (mov r8, r8)
   13f3e:	46bd      	mov	sp, r7
   13f40:	bd80      	pop	{r7, pc}
   13f42:	46c0      	nop			; (mov r8, r8)
   13f44:	20001bf8 	.word	0x20001bf8
   13f48:	000141fd 	.word	0x000141fd
   13f4c:	00014229 	.word	0x00014229
   13f50:	000140cd 	.word	0x000140cd

00013f54 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
   13f54:	b590      	push	{r4, r7, lr}
   13f56:	b08f      	sub	sp, #60	; 0x3c
   13f58:	af0a      	add	r7, sp, #40	; 0x28
   13f5a:	6078      	str	r0, [r7, #4]
   13f5c:	0008      	movs	r0, r1
   13f5e:	0011      	movs	r1, r2
   13f60:	1cfb      	adds	r3, r7, #3
   13f62:	1c02      	adds	r2, r0, #0
   13f64:	701a      	strb	r2, [r3, #0]
   13f66:	003b      	movs	r3, r7
   13f68:	1c0a      	adds	r2, r1, #0
   13f6a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
   13f6c:	003b      	movs	r3, r7
   13f6e:	881b      	ldrh	r3, [r3, #0]
   13f70:	22fa      	movs	r2, #250	; 0xfa
   13f72:	0092      	lsls	r2, r2, #2
   13f74:	4353      	muls	r3, r2
   13f76:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b23      	ldr	r3, [pc, #140]	; (1400c <SX1276SetTxContinuousWave+0xb8>)
   13f7e:	4798      	blx	r3

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   13f80:	1cfb      	adds	r3, r7, #3
   13f82:	2100      	movs	r1, #0
   13f84:	5659      	ldrsb	r1, [r3, r1]
   13f86:	68fb      	ldr	r3, [r7, #12]
   13f88:	9308      	str	r3, [sp, #32]
   13f8a:	2300      	movs	r3, #0
   13f8c:	9307      	str	r3, [sp, #28]
   13f8e:	2300      	movs	r3, #0
   13f90:	9306      	str	r3, [sp, #24]
   13f92:	2300      	movs	r3, #0
   13f94:	9305      	str	r3, [sp, #20]
   13f96:	2300      	movs	r3, #0
   13f98:	9304      	str	r3, [sp, #16]
   13f9a:	2300      	movs	r3, #0
   13f9c:	9303      	str	r3, [sp, #12]
   13f9e:	2305      	movs	r3, #5
   13fa0:	9302      	str	r3, [sp, #8]
   13fa2:	2300      	movs	r3, #0
   13fa4:	9301      	str	r3, [sp, #4]
   13fa6:	2396      	movs	r3, #150	; 0x96
   13fa8:	015b      	lsls	r3, r3, #5
   13faa:	9300      	str	r3, [sp, #0]
   13fac:	2300      	movs	r3, #0
   13fae:	2200      	movs	r2, #0
   13fb0:	2000      	movs	r0, #0
   13fb2:	4c17      	ldr	r4, [pc, #92]	; (14010 <SX1276SetTxContinuousWave+0xbc>)
   13fb4:	47a0      	blx	r4

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   13fb6:	2031      	movs	r0, #49	; 0x31
   13fb8:	4b16      	ldr	r3, [pc, #88]	; (14014 <SX1276SetTxContinuousWave+0xc0>)
   13fba:	4798      	blx	r3
   13fbc:	0003      	movs	r3, r0
   13fbe:	001a      	movs	r2, r3
   13fc0:	2340      	movs	r3, #64	; 0x40
   13fc2:	439a      	bics	r2, r3
   13fc4:	0013      	movs	r3, r2
   13fc6:	b2db      	uxtb	r3, r3
   13fc8:	0019      	movs	r1, r3
   13fca:	2031      	movs	r0, #49	; 0x31
   13fcc:	4b12      	ldr	r3, [pc, #72]	; (14018 <SX1276SetTxContinuousWave+0xc4>)
   13fce:	4798      	blx	r3
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   13fd0:	21f0      	movs	r1, #240	; 0xf0
   13fd2:	2040      	movs	r0, #64	; 0x40
   13fd4:	4b10      	ldr	r3, [pc, #64]	; (14018 <SX1276SetTxContinuousWave+0xc4>)
   13fd6:	4798      	blx	r3
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   13fd8:	21a0      	movs	r1, #160	; 0xa0
   13fda:	2041      	movs	r0, #65	; 0x41
   13fdc:	4b0e      	ldr	r3, [pc, #56]	; (14018 <SX1276SetTxContinuousWave+0xc4>)
   13fde:	4798      	blx	r3

    TimerSetValue( &TxTimeoutTimer, timeout );
   13fe0:	68fa      	ldr	r2, [r7, #12]
   13fe2:	4b0e      	ldr	r3, [pc, #56]	; (1401c <SX1276SetTxContinuousWave+0xc8>)
   13fe4:	0011      	movs	r1, r2
   13fe6:	0018      	movs	r0, r3
   13fe8:	4b0d      	ldr	r3, [pc, #52]	; (14020 <SX1276SetTxContinuousWave+0xcc>)
   13fea:	4798      	blx	r3

    SX1276.Settings.State = RF_TX_RUNNING;
   13fec:	4b0d      	ldr	r3, [pc, #52]	; (14024 <SX1276SetTxContinuousWave+0xd0>)
   13fee:	2288      	movs	r2, #136	; 0x88
   13ff0:	2102      	movs	r1, #2
   13ff2:	5499      	strb	r1, [r3, r2]
    TimerStart( &TxTimeoutTimer );
   13ff4:	4b09      	ldr	r3, [pc, #36]	; (1401c <SX1276SetTxContinuousWave+0xc8>)
   13ff6:	0018      	movs	r0, r3
   13ff8:	4b0b      	ldr	r3, [pc, #44]	; (14028 <SX1276SetTxContinuousWave+0xd4>)
   13ffa:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   13ffc:	2003      	movs	r0, #3
   13ffe:	4b0b      	ldr	r3, [pc, #44]	; (1402c <SX1276SetTxContinuousWave+0xd8>)
   14000:	4798      	blx	r3
}
   14002:	46c0      	nop			; (mov r8, r8)
   14004:	46bd      	mov	sp, r7
   14006:	b005      	add	sp, #20
   14008:	bd90      	pop	{r4, r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	000128fd 	.word	0x000128fd
   14010:	00013131 	.word	0x00013131
   14014:	00014229 	.word	0x00014229
   14018:	000141fd 	.word	0x000141fd
   1401c:	20001bd0 	.word	0x20001bd0
   14020:	00017119 	.word	0x00017119
   14024:	20001bf8 	.word	0x20001bf8
   14028:	00016d8d 	.word	0x00016d8d
   1402c:	000140cd 	.word	0x000140cd

00014030 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
   14030:	b580      	push	{r7, lr}
   14032:	b084      	sub	sp, #16
   14034:	af00      	add	r7, sp, #0
   14036:	0002      	movs	r2, r0
   14038:	1dfb      	adds	r3, r7, #7
   1403a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
   1403c:	230e      	movs	r3, #14
   1403e:	18fb      	adds	r3, r7, r3
   14040:	2200      	movs	r2, #0
   14042:	801a      	strh	r2, [r3, #0]

    switch( modem )
   14044:	1dfb      	adds	r3, r7, #7
   14046:	781b      	ldrb	r3, [r3, #0]
   14048:	2b00      	cmp	r3, #0
   1404a:	d002      	beq.n	14052 <SX1276ReadRssi+0x22>
   1404c:	2b01      	cmp	r3, #1
   1404e:	d00d      	beq.n	1406c <SX1276ReadRssi+0x3c>
   14050:	e028      	b.n	140a4 <SX1276ReadRssi+0x74>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   14052:	2011      	movs	r0, #17
   14054:	4b1a      	ldr	r3, [pc, #104]	; (140c0 <SX1276ReadRssi+0x90>)
   14056:	4798      	blx	r3
   14058:	0003      	movs	r3, r0
   1405a:	085b      	lsrs	r3, r3, #1
   1405c:	b2db      	uxtb	r3, r3
   1405e:	b29b      	uxth	r3, r3
   14060:	425b      	negs	r3, r3
   14062:	b29a      	uxth	r2, r3
   14064:	230e      	movs	r3, #14
   14066:	18fb      	adds	r3, r7, r3
   14068:	801a      	strh	r2, [r3, #0]
        break;
   1406a:	e021      	b.n	140b0 <SX1276ReadRssi+0x80>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1406c:	4b15      	ldr	r3, [pc, #84]	; (140c4 <SX1276ReadRssi+0x94>)
   1406e:	228c      	movs	r2, #140	; 0x8c
   14070:	589b      	ldr	r3, [r3, r2]
   14072:	4a15      	ldr	r2, [pc, #84]	; (140c8 <SX1276ReadRssi+0x98>)
   14074:	4293      	cmp	r3, r2
   14076:	d90a      	bls.n	1408e <SX1276ReadRssi+0x5e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   14078:	201b      	movs	r0, #27
   1407a:	4b11      	ldr	r3, [pc, #68]	; (140c0 <SX1276ReadRssi+0x90>)
   1407c:	4798      	blx	r3
   1407e:	0003      	movs	r3, r0
   14080:	b29b      	uxth	r3, r3
   14082:	3b9d      	subs	r3, #157	; 0x9d
   14084:	b29a      	uxth	r2, r3
   14086:	230e      	movs	r3, #14
   14088:	18fb      	adds	r3, r7, r3
   1408a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
   1408c:	e010      	b.n	140b0 <SX1276ReadRssi+0x80>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1408e:	201b      	movs	r0, #27
   14090:	4b0b      	ldr	r3, [pc, #44]	; (140c0 <SX1276ReadRssi+0x90>)
   14092:	4798      	blx	r3
   14094:	0003      	movs	r3, r0
   14096:	b29b      	uxth	r3, r3
   14098:	3ba4      	subs	r3, #164	; 0xa4
   1409a:	b29a      	uxth	r2, r3
   1409c:	230e      	movs	r3, #14
   1409e:	18fb      	adds	r3, r7, r3
   140a0:	801a      	strh	r2, [r3, #0]
        break;
   140a2:	e005      	b.n	140b0 <SX1276ReadRssi+0x80>
    default:
        rssi = -1;
   140a4:	230e      	movs	r3, #14
   140a6:	18fb      	adds	r3, r7, r3
   140a8:	2201      	movs	r2, #1
   140aa:	4252      	negs	r2, r2
   140ac:	801a      	strh	r2, [r3, #0]
        break;
   140ae:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
   140b0:	230e      	movs	r3, #14
   140b2:	18fb      	adds	r3, r7, r3
   140b4:	2200      	movs	r2, #0
   140b6:	5e9b      	ldrsh	r3, [r3, r2]
}
   140b8:	0018      	movs	r0, r3
   140ba:	46bd      	mov	sp, r7
   140bc:	b004      	add	sp, #16
   140be:	bd80      	pop	{r7, pc}
   140c0:	00014229 	.word	0x00014229
   140c4:	20001bf8 	.word	0x20001bf8
   140c8:	1f4add40 	.word	0x1f4add40

000140cc <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
   140cc:	b580      	push	{r7, lr}
   140ce:	b082      	sub	sp, #8
   140d0:	af00      	add	r7, sp, #0
   140d2:	0002      	movs	r2, r0
   140d4:	1dfb      	adds	r3, r7, #7
   140d6:	701a      	strb	r2, [r3, #0]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
   140d8:	1dfb      	adds	r3, r7, #7
   140da:	781b      	ldrb	r3, [r3, #0]
   140dc:	2b00      	cmp	r3, #0
   140de:	d103      	bne.n	140e8 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
   140e0:	2001      	movs	r0, #1
   140e2:	4b10      	ldr	r3, [pc, #64]	; (14124 <SX1276SetOpMode+0x58>)
   140e4:	4798      	blx	r3
   140e6:	e007      	b.n	140f8 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
   140e8:	2000      	movs	r0, #0
   140ea:	4b0e      	ldr	r3, [pc, #56]	; (14124 <SX1276SetOpMode+0x58>)
   140ec:	4798      	blx	r3
        SX1276SetAntSw( opMode );
   140ee:	1dfb      	adds	r3, r7, #7
   140f0:	781b      	ldrb	r3, [r3, #0]
   140f2:	0018      	movs	r0, r3
   140f4:	4b0c      	ldr	r3, [pc, #48]	; (14128 <SX1276SetOpMode+0x5c>)
   140f6:	4798      	blx	r3
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   140f8:	2001      	movs	r0, #1
   140fa:	4b0c      	ldr	r3, [pc, #48]	; (1412c <SX1276SetOpMode+0x60>)
   140fc:	4798      	blx	r3
   140fe:	0003      	movs	r3, r0
   14100:	b25b      	sxtb	r3, r3
   14102:	2207      	movs	r2, #7
   14104:	4393      	bics	r3, r2
   14106:	b25a      	sxtb	r2, r3
   14108:	1dfb      	adds	r3, r7, #7
   1410a:	781b      	ldrb	r3, [r3, #0]
   1410c:	b25b      	sxtb	r3, r3
   1410e:	4313      	orrs	r3, r2
   14110:	b25b      	sxtb	r3, r3
   14112:	b2db      	uxtb	r3, r3
   14114:	0019      	movs	r1, r3
   14116:	2001      	movs	r0, #1
   14118:	4b05      	ldr	r3, [pc, #20]	; (14130 <SX1276SetOpMode+0x64>)
   1411a:	4798      	blx	r3
}
   1411c:	46c0      	nop			; (mov r8, r8)
   1411e:	46bd      	mov	sp, r7
   14120:	b002      	add	sp, #8
   14122:	bd80      	pop	{r7, pc}
   14124:	00005819 	.word	0x00005819
   14128:	00005865 	.word	0x00005865
   1412c:	00014229 	.word	0x00014229
   14130:	000141fd 	.word	0x000141fd

00014134 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
   14134:	b580      	push	{r7, lr}
   14136:	b082      	sub	sp, #8
   14138:	af00      	add	r7, sp, #0
   1413a:	0002      	movs	r2, r0
   1413c:	1dfb      	adds	r3, r7, #7
   1413e:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   14140:	2001      	movs	r0, #1
   14142:	4b2a      	ldr	r3, [pc, #168]	; (141ec <SX1276SetModem+0xb8>)
   14144:	4798      	blx	r3
   14146:	0003      	movs	r3, r0
   14148:	b25b      	sxtb	r3, r3
   1414a:	2b00      	cmp	r3, #0
   1414c:	da04      	bge.n	14158 <SX1276SetModem+0x24>
    {
        SX1276.Settings.Modem = MODEM_LORA;
   1414e:	4b28      	ldr	r3, [pc, #160]	; (141f0 <SX1276SetModem+0xbc>)
   14150:	2289      	movs	r2, #137	; 0x89
   14152:	2101      	movs	r1, #1
   14154:	5499      	strb	r1, [r3, r2]
   14156:	e003      	b.n	14160 <SX1276SetModem+0x2c>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
   14158:	4b25      	ldr	r3, [pc, #148]	; (141f0 <SX1276SetModem+0xbc>)
   1415a:	2289      	movs	r2, #137	; 0x89
   1415c:	2100      	movs	r1, #0
   1415e:	5499      	strb	r1, [r3, r2]
    }

    if( SX1276.Settings.Modem == modem )
   14160:	4b23      	ldr	r3, [pc, #140]	; (141f0 <SX1276SetModem+0xbc>)
   14162:	2289      	movs	r2, #137	; 0x89
   14164:	5c9b      	ldrb	r3, [r3, r2]
   14166:	1dfa      	adds	r2, r7, #7
   14168:	7812      	ldrb	r2, [r2, #0]
   1416a:	429a      	cmp	r2, r3
   1416c:	d039      	beq.n	141e2 <SX1276SetModem+0xae>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
   1416e:	4b20      	ldr	r3, [pc, #128]	; (141f0 <SX1276SetModem+0xbc>)
   14170:	1dfa      	adds	r2, r7, #7
   14172:	2189      	movs	r1, #137	; 0x89
   14174:	7812      	ldrb	r2, [r2, #0]
   14176:	545a      	strb	r2, [r3, r1]
    switch( SX1276.Settings.Modem )
   14178:	4b1d      	ldr	r3, [pc, #116]	; (141f0 <SX1276SetModem+0xbc>)
   1417a:	2289      	movs	r2, #137	; 0x89
   1417c:	5c9b      	ldrb	r3, [r3, r2]
   1417e:	2b01      	cmp	r3, #1
   14180:	d016      	beq.n	141b0 <SX1276SetModem+0x7c>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
   14182:	4b1c      	ldr	r3, [pc, #112]	; (141f4 <SX1276SetModem+0xc0>)
   14184:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   14186:	2001      	movs	r0, #1
   14188:	4b18      	ldr	r3, [pc, #96]	; (141ec <SX1276SetModem+0xb8>)
   1418a:	4798      	blx	r3
   1418c:	0003      	movs	r3, r0
   1418e:	001a      	movs	r2, r3
   14190:	237f      	movs	r3, #127	; 0x7f
   14192:	4013      	ands	r3, r2
   14194:	b2db      	uxtb	r3, r3
   14196:	0019      	movs	r1, r3
   14198:	2001      	movs	r0, #1
   1419a:	4b17      	ldr	r3, [pc, #92]	; (141f8 <SX1276SetModem+0xc4>)
   1419c:	4798      	blx	r3

        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1419e:	2100      	movs	r1, #0
   141a0:	2040      	movs	r0, #64	; 0x40
   141a2:	4b15      	ldr	r3, [pc, #84]	; (141f8 <SX1276SetModem+0xc4>)
   141a4:	4798      	blx	r3
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   141a6:	2130      	movs	r1, #48	; 0x30
   141a8:	2041      	movs	r0, #65	; 0x41
   141aa:	4b13      	ldr	r3, [pc, #76]	; (141f8 <SX1276SetModem+0xc4>)
   141ac:	4798      	blx	r3
        break;
   141ae:	e019      	b.n	141e4 <SX1276SetModem+0xb0>
    case MODEM_LORA:
        SX1276SetSleep( );
   141b0:	4b10      	ldr	r3, [pc, #64]	; (141f4 <SX1276SetModem+0xc0>)
   141b2:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   141b4:	2001      	movs	r0, #1
   141b6:	4b0d      	ldr	r3, [pc, #52]	; (141ec <SX1276SetModem+0xb8>)
   141b8:	4798      	blx	r3
   141ba:	0003      	movs	r3, r0
   141bc:	001a      	movs	r2, r3
   141be:	2380      	movs	r3, #128	; 0x80
   141c0:	425b      	negs	r3, r3
   141c2:	4313      	orrs	r3, r2
   141c4:	b2db      	uxtb	r3, r3
   141c6:	0019      	movs	r1, r3
   141c8:	2001      	movs	r0, #1
   141ca:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <SX1276SetModem+0xc4>)
   141cc:	4798      	blx	r3

        SX1276Write( REG_DIOMAPPING1, 0x00 );
   141ce:	2100      	movs	r1, #0
   141d0:	2040      	movs	r0, #64	; 0x40
   141d2:	4b09      	ldr	r3, [pc, #36]	; (141f8 <SX1276SetModem+0xc4>)
   141d4:	4798      	blx	r3
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   141d6:	2100      	movs	r1, #0
   141d8:	2041      	movs	r0, #65	; 0x41
   141da:	4b07      	ldr	r3, [pc, #28]	; (141f8 <SX1276SetModem+0xc4>)
   141dc:	4798      	blx	r3
        break;
   141de:	46c0      	nop			; (mov r8, r8)
   141e0:	e000      	b.n	141e4 <SX1276SetModem+0xb0>
        return;
   141e2:	46c0      	nop			; (mov r8, r8)
    }
}
   141e4:	46bd      	mov	sp, r7
   141e6:	b002      	add	sp, #8
   141e8:	bd80      	pop	{r7, pc}
   141ea:	46c0      	nop			; (mov r8, r8)
   141ec:	00014229 	.word	0x00014229
   141f0:	20001bf8 	.word	0x20001bf8
   141f4:	00013a19 	.word	0x00013a19
   141f8:	000141fd 	.word	0x000141fd

000141fc <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
   141fc:	b580      	push	{r7, lr}
   141fe:	b082      	sub	sp, #8
   14200:	af00      	add	r7, sp, #0
   14202:	0002      	movs	r2, r0
   14204:	1dbb      	adds	r3, r7, #6
   14206:	801a      	strh	r2, [r3, #0]
   14208:	1d7b      	adds	r3, r7, #5
   1420a:	1c0a      	adds	r2, r1, #0
   1420c:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
   1420e:	1d79      	adds	r1, r7, #5
   14210:	1dbb      	adds	r3, r7, #6
   14212:	881b      	ldrh	r3, [r3, #0]
   14214:	2201      	movs	r2, #1
   14216:	0018      	movs	r0, r3
   14218:	4b02      	ldr	r3, [pc, #8]	; (14224 <SX1276Write+0x28>)
   1421a:	4798      	blx	r3
}
   1421c:	46c0      	nop			; (mov r8, r8)
   1421e:	46bd      	mov	sp, r7
   14220:	b002      	add	sp, #8
   14222:	bd80      	pop	{r7, pc}
   14224:	00014259 	.word	0x00014259

00014228 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
   14228:	b580      	push	{r7, lr}
   1422a:	b084      	sub	sp, #16
   1422c:	af00      	add	r7, sp, #0
   1422e:	0002      	movs	r2, r0
   14230:	1dbb      	adds	r3, r7, #6
   14232:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
   14234:	230f      	movs	r3, #15
   14236:	18f9      	adds	r1, r7, r3
   14238:	1dbb      	adds	r3, r7, #6
   1423a:	881b      	ldrh	r3, [r3, #0]
   1423c:	2201      	movs	r2, #1
   1423e:	0018      	movs	r0, r3
   14240:	4b04      	ldr	r3, [pc, #16]	; (14254 <SX1276Read+0x2c>)
   14242:	4798      	blx	r3
    return data;
   14244:	230f      	movs	r3, #15
   14246:	18fb      	adds	r3, r7, r3
   14248:	781b      	ldrb	r3, [r3, #0]
}
   1424a:	0018      	movs	r0, r3
   1424c:	46bd      	mov	sp, r7
   1424e:	b004      	add	sp, #16
   14250:	bd80      	pop	{r7, pc}
   14252:	46c0      	nop			; (mov r8, r8)
   14254:	000142ed 	.word	0x000142ed

00014258 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
   14258:	b580      	push	{r7, lr}
   1425a:	b084      	sub	sp, #16
   1425c:	af00      	add	r7, sp, #0
   1425e:	6039      	str	r1, [r7, #0]
   14260:	0011      	movs	r1, r2
   14262:	1dbb      	adds	r3, r7, #6
   14264:	1c02      	adds	r2, r0, #0
   14266:	801a      	strh	r2, [r3, #0]
   14268:	1d7b      	adds	r3, r7, #5
   1426a:	1c0a      	adds	r2, r1, #0
   1426c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
   1426e:	4b1b      	ldr	r3, [pc, #108]	; (142dc <SX1276WriteBuffer+0x84>)
   14270:	2100      	movs	r1, #0
   14272:	0018      	movs	r0, r3
   14274:	4b1a      	ldr	r3, [pc, #104]	; (142e0 <SX1276WriteBuffer+0x88>)
   14276:	4798      	blx	r3

    SpiInOut( &SX1276.Spi, addr | 0x80 );
   14278:	1dbb      	adds	r3, r7, #6
   1427a:	881b      	ldrh	r3, [r3, #0]
   1427c:	2280      	movs	r2, #128	; 0x80
   1427e:	4313      	orrs	r3, r2
   14280:	b29a      	uxth	r2, r3
   14282:	4b18      	ldr	r3, [pc, #96]	; (142e4 <SX1276WriteBuffer+0x8c>)
   14284:	0011      	movs	r1, r2
   14286:	0018      	movs	r0, r3
   14288:	4b17      	ldr	r3, [pc, #92]	; (142e8 <SX1276WriteBuffer+0x90>)
   1428a:	4798      	blx	r3
    for( i = 0; i < size; i++ )
   1428c:	230f      	movs	r3, #15
   1428e:	18fb      	adds	r3, r7, r3
   14290:	2200      	movs	r2, #0
   14292:	701a      	strb	r2, [r3, #0]
   14294:	e012      	b.n	142bc <SX1276WriteBuffer+0x64>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
   14296:	230f      	movs	r3, #15
   14298:	18fb      	adds	r3, r7, r3
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	683a      	ldr	r2, [r7, #0]
   1429e:	18d3      	adds	r3, r2, r3
   142a0:	781b      	ldrb	r3, [r3, #0]
   142a2:	b29a      	uxth	r2, r3
   142a4:	4b0f      	ldr	r3, [pc, #60]	; (142e4 <SX1276WriteBuffer+0x8c>)
   142a6:	0011      	movs	r1, r2
   142a8:	0018      	movs	r0, r3
   142aa:	4b0f      	ldr	r3, [pc, #60]	; (142e8 <SX1276WriteBuffer+0x90>)
   142ac:	4798      	blx	r3
    for( i = 0; i < size; i++ )
   142ae:	230f      	movs	r3, #15
   142b0:	18fb      	adds	r3, r7, r3
   142b2:	781a      	ldrb	r2, [r3, #0]
   142b4:	230f      	movs	r3, #15
   142b6:	18fb      	adds	r3, r7, r3
   142b8:	3201      	adds	r2, #1
   142ba:	701a      	strb	r2, [r3, #0]
   142bc:	230f      	movs	r3, #15
   142be:	18fa      	adds	r2, r7, r3
   142c0:	1d7b      	adds	r3, r7, #5
   142c2:	7812      	ldrb	r2, [r2, #0]
   142c4:	781b      	ldrb	r3, [r3, #0]
   142c6:	429a      	cmp	r2, r3
   142c8:	d3e5      	bcc.n	14296 <SX1276WriteBuffer+0x3e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
   142ca:	4b04      	ldr	r3, [pc, #16]	; (142dc <SX1276WriteBuffer+0x84>)
   142cc:	2101      	movs	r1, #1
   142ce:	0018      	movs	r0, r3
   142d0:	4b03      	ldr	r3, [pc, #12]	; (142e0 <SX1276WriteBuffer+0x88>)
   142d2:	4798      	blx	r3
}
   142d4:	46c0      	nop			; (mov r8, r8)
   142d6:	46bd      	mov	sp, r7
   142d8:	b004      	add	sp, #16
   142da:	bd80      	pop	{r7, pc}
   142dc:	20001c74 	.word	0x20001c74
   142e0:	00016a79 	.word	0x00016a79
   142e4:	20001c4c 	.word	0x20001c4c
   142e8:	00005135 	.word	0x00005135

000142ec <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
   142ec:	b590      	push	{r4, r7, lr}
   142ee:	b085      	sub	sp, #20
   142f0:	af00      	add	r7, sp, #0
   142f2:	6039      	str	r1, [r7, #0]
   142f4:	0011      	movs	r1, r2
   142f6:	1dbb      	adds	r3, r7, #6
   142f8:	1c02      	adds	r2, r0, #0
   142fa:	801a      	strh	r2, [r3, #0]
   142fc:	1d7b      	adds	r3, r7, #5
   142fe:	1c0a      	adds	r2, r1, #0
   14300:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
   14302:	4b1c      	ldr	r3, [pc, #112]	; (14374 <SX1276ReadBuffer+0x88>)
   14304:	2100      	movs	r1, #0
   14306:	0018      	movs	r0, r3
   14308:	4b1b      	ldr	r3, [pc, #108]	; (14378 <SX1276ReadBuffer+0x8c>)
   1430a:	4798      	blx	r3

    SpiInOut( &SX1276.Spi, addr & 0x7F );
   1430c:	1dbb      	adds	r3, r7, #6
   1430e:	881b      	ldrh	r3, [r3, #0]
   14310:	227f      	movs	r2, #127	; 0x7f
   14312:	4013      	ands	r3, r2
   14314:	b29a      	uxth	r2, r3
   14316:	4b19      	ldr	r3, [pc, #100]	; (1437c <SX1276ReadBuffer+0x90>)
   14318:	0011      	movs	r1, r2
   1431a:	0018      	movs	r0, r3
   1431c:	4b18      	ldr	r3, [pc, #96]	; (14380 <SX1276ReadBuffer+0x94>)
   1431e:	4798      	blx	r3

    for( i = 0; i < size; i++ )
   14320:	230f      	movs	r3, #15
   14322:	18fb      	adds	r3, r7, r3
   14324:	2200      	movs	r2, #0
   14326:	701a      	strb	r2, [r3, #0]
   14328:	e013      	b.n	14352 <SX1276ReadBuffer+0x66>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
   1432a:	230f      	movs	r3, #15
   1432c:	18fb      	adds	r3, r7, r3
   1432e:	781b      	ldrb	r3, [r3, #0]
   14330:	683a      	ldr	r2, [r7, #0]
   14332:	18d4      	adds	r4, r2, r3
   14334:	4b11      	ldr	r3, [pc, #68]	; (1437c <SX1276ReadBuffer+0x90>)
   14336:	2100      	movs	r1, #0
   14338:	0018      	movs	r0, r3
   1433a:	4b11      	ldr	r3, [pc, #68]	; (14380 <SX1276ReadBuffer+0x94>)
   1433c:	4798      	blx	r3
   1433e:	0003      	movs	r3, r0
   14340:	b2db      	uxtb	r3, r3
   14342:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
   14344:	230f      	movs	r3, #15
   14346:	18fb      	adds	r3, r7, r3
   14348:	781a      	ldrb	r2, [r3, #0]
   1434a:	230f      	movs	r3, #15
   1434c:	18fb      	adds	r3, r7, r3
   1434e:	3201      	adds	r2, #1
   14350:	701a      	strb	r2, [r3, #0]
   14352:	230f      	movs	r3, #15
   14354:	18fa      	adds	r2, r7, r3
   14356:	1d7b      	adds	r3, r7, #5
   14358:	7812      	ldrb	r2, [r2, #0]
   1435a:	781b      	ldrb	r3, [r3, #0]
   1435c:	429a      	cmp	r2, r3
   1435e:	d3e4      	bcc.n	1432a <SX1276ReadBuffer+0x3e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
   14360:	4b04      	ldr	r3, [pc, #16]	; (14374 <SX1276ReadBuffer+0x88>)
   14362:	2101      	movs	r1, #1
   14364:	0018      	movs	r0, r3
   14366:	4b04      	ldr	r3, [pc, #16]	; (14378 <SX1276ReadBuffer+0x8c>)
   14368:	4798      	blx	r3
}
   1436a:	46c0      	nop			; (mov r8, r8)
   1436c:	46bd      	mov	sp, r7
   1436e:	b005      	add	sp, #20
   14370:	bd90      	pop	{r4, r7, pc}
   14372:	46c0      	nop			; (mov r8, r8)
   14374:	20001c74 	.word	0x20001c74
   14378:	00016a79 	.word	0x00016a79
   1437c:	20001c4c 	.word	0x20001c4c
   14380:	00005135 	.word	0x00005135

00014384 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
   14384:	b580      	push	{r7, lr}
   14386:	b082      	sub	sp, #8
   14388:	af00      	add	r7, sp, #0
   1438a:	6078      	str	r0, [r7, #4]
   1438c:	000a      	movs	r2, r1
   1438e:	1cfb      	adds	r3, r7, #3
   14390:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
   14392:	1cfb      	adds	r3, r7, #3
   14394:	781a      	ldrb	r2, [r3, #0]
   14396:	687b      	ldr	r3, [r7, #4]
   14398:	0019      	movs	r1, r3
   1439a:	2000      	movs	r0, #0
   1439c:	4b02      	ldr	r3, [pc, #8]	; (143a8 <SX1276WriteFifo+0x24>)
   1439e:	4798      	blx	r3
}
   143a0:	46c0      	nop			; (mov r8, r8)
   143a2:	46bd      	mov	sp, r7
   143a4:	b002      	add	sp, #8
   143a6:	bd80      	pop	{r7, pc}
   143a8:	00014259 	.word	0x00014259

000143ac <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
   143ac:	b580      	push	{r7, lr}
   143ae:	b082      	sub	sp, #8
   143b0:	af00      	add	r7, sp, #0
   143b2:	6078      	str	r0, [r7, #4]
   143b4:	000a      	movs	r2, r1
   143b6:	1cfb      	adds	r3, r7, #3
   143b8:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
   143ba:	1cfb      	adds	r3, r7, #3
   143bc:	781a      	ldrb	r2, [r3, #0]
   143be:	687b      	ldr	r3, [r7, #4]
   143c0:	0019      	movs	r1, r3
   143c2:	2000      	movs	r0, #0
   143c4:	4b02      	ldr	r3, [pc, #8]	; (143d0 <SX1276ReadFifo+0x24>)
   143c6:	4798      	blx	r3
}
   143c8:	46c0      	nop			; (mov r8, r8)
   143ca:	46bd      	mov	sp, r7
   143cc:	b002      	add	sp, #8
   143ce:	bd80      	pop	{r7, pc}
   143d0:	000142ed 	.word	0x000142ed

000143d4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
   143d4:	b580      	push	{r7, lr}
   143d6:	b082      	sub	sp, #8
   143d8:	af00      	add	r7, sp, #0
   143da:	0002      	movs	r2, r0
   143dc:	1dfb      	adds	r3, r7, #7
   143de:	701a      	strb	r2, [r3, #0]
   143e0:	1dbb      	adds	r3, r7, #6
   143e2:	1c0a      	adds	r2, r1, #0
   143e4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   143e6:	1dfb      	adds	r3, r7, #7
   143e8:	781b      	ldrb	r3, [r3, #0]
   143ea:	0018      	movs	r0, r3
   143ec:	4b11      	ldr	r3, [pc, #68]	; (14434 <SX1276SetMaxPayloadLength+0x60>)
   143ee:	4798      	blx	r3

    switch( modem )
   143f0:	1dfb      	adds	r3, r7, #7
   143f2:	781b      	ldrb	r3, [r3, #0]
   143f4:	2b00      	cmp	r3, #0
   143f6:	d002      	beq.n	143fe <SX1276SetMaxPayloadLength+0x2a>
   143f8:	2b01      	cmp	r3, #1
   143fa:	d00f      	beq.n	1441c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
   143fc:	e016      	b.n	1442c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
   143fe:	4b0e      	ldr	r3, [pc, #56]	; (14438 <SX1276SetMaxPayloadLength+0x64>)
   14400:	22a6      	movs	r2, #166	; 0xa6
   14402:	5c9b      	ldrb	r3, [r3, r2]
   14404:	2201      	movs	r2, #1
   14406:	4053      	eors	r3, r2
   14408:	b2db      	uxtb	r3, r3
   1440a:	2b00      	cmp	r3, #0
   1440c:	d00d      	beq.n	1442a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
   1440e:	1dbb      	adds	r3, r7, #6
   14410:	781b      	ldrb	r3, [r3, #0]
   14412:	0019      	movs	r1, r3
   14414:	2032      	movs	r0, #50	; 0x32
   14416:	4b09      	ldr	r3, [pc, #36]	; (1443c <SX1276SetMaxPayloadLength+0x68>)
   14418:	4798      	blx	r3
        break;
   1441a:	e006      	b.n	1442a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   1441c:	1dbb      	adds	r3, r7, #6
   1441e:	781b      	ldrb	r3, [r3, #0]
   14420:	0019      	movs	r1, r3
   14422:	2023      	movs	r0, #35	; 0x23
   14424:	4b05      	ldr	r3, [pc, #20]	; (1443c <SX1276SetMaxPayloadLength+0x68>)
   14426:	4798      	blx	r3
        break;
   14428:	e000      	b.n	1442c <SX1276SetMaxPayloadLength+0x58>
        break;
   1442a:	46c0      	nop			; (mov r8, r8)
}
   1442c:	46c0      	nop			; (mov r8, r8)
   1442e:	46bd      	mov	sp, r7
   14430:	b002      	add	sp, #8
   14432:	bd80      	pop	{r7, pc}
   14434:	00014135 	.word	0x00014135
   14438:	20001bf8 	.word	0x20001bf8
   1443c:	000141fd 	.word	0x000141fd

00014440 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
   14440:	b580      	push	{r7, lr}
   14442:	b082      	sub	sp, #8
   14444:	af00      	add	r7, sp, #0
   14446:	0002      	movs	r2, r0
   14448:	1dfb      	adds	r3, r7, #7
   1444a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
   1444c:	2001      	movs	r0, #1
   1444e:	4b0c      	ldr	r3, [pc, #48]	; (14480 <SX1276SetPublicNetwork+0x40>)
   14450:	4798      	blx	r3
    SX1276.Settings.LoRa.PublicNetwork = enable;
   14452:	4b0c      	ldr	r3, [pc, #48]	; (14484 <SX1276SetPublicNetwork+0x44>)
   14454:	1dfa      	adds	r2, r7, #7
   14456:	21e0      	movs	r1, #224	; 0xe0
   14458:	7812      	ldrb	r2, [r2, #0]
   1445a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
   1445c:	1dfb      	adds	r3, r7, #7
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	2b00      	cmp	r3, #0
   14462:	d004      	beq.n	1446e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   14464:	2134      	movs	r1, #52	; 0x34
   14466:	2039      	movs	r0, #57	; 0x39
   14468:	4b07      	ldr	r3, [pc, #28]	; (14488 <SX1276SetPublicNetwork+0x48>)
   1446a:	4798      	blx	r3
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
   1446c:	e003      	b.n	14476 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   1446e:	2112      	movs	r1, #18
   14470:	2039      	movs	r0, #57	; 0x39
   14472:	4b05      	ldr	r3, [pc, #20]	; (14488 <SX1276SetPublicNetwork+0x48>)
   14474:	4798      	blx	r3
}
   14476:	46c0      	nop			; (mov r8, r8)
   14478:	46bd      	mov	sp, r7
   1447a:	b002      	add	sp, #8
   1447c:	bd80      	pop	{r7, pc}
   1447e:	46c0      	nop			; (mov r8, r8)
   14480:	00014135 	.word	0x00014135
   14484:	20001bf8 	.word	0x20001bf8
   14488:	000141fd 	.word	0x000141fd

0001448c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
   1448c:	b580      	push	{r7, lr}
   1448e:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   14490:	4b03      	ldr	r3, [pc, #12]	; (144a0 <SX1276GetWakeupTime+0x14>)
   14492:	4798      	blx	r3
   14494:	0003      	movs	r3, r0
   14496:	3301      	adds	r3, #1
}
   14498:	0018      	movs	r0, r3
   1449a:	46bd      	mov	sp, r7
   1449c:	bd80      	pop	{r7, pc}
   1449e:	46c0      	nop			; (mov r8, r8)
   144a0:	000055b9 	.word	0x000055b9

000144a4 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
   144a4:	b580      	push	{r7, lr}
   144a6:	b082      	sub	sp, #8
   144a8:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
   144aa:	4b53      	ldr	r3, [pc, #332]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144ac:	2288      	movs	r2, #136	; 0x88
   144ae:	5c9b      	ldrb	r3, [r3, r2]
   144b0:	2b01      	cmp	r3, #1
   144b2:	d002      	beq.n	144ba <SX1276OnTimeoutIrq+0x16>
   144b4:	2b02      	cmp	r3, #2
   144b6:	d049      	beq.n	1454c <SX1276OnTimeoutIrq+0xa8>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
   144b8:	e09a      	b.n	145f0 <SX1276OnTimeoutIrq+0x14c>
        if( SX1276.Settings.Modem == MODEM_FSK )
   144ba:	4b4f      	ldr	r3, [pc, #316]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144bc:	2289      	movs	r2, #137	; 0x89
   144be:	5c9b      	ldrb	r3, [r3, r2]
   144c0:	2b00      	cmp	r3, #0
   144c2:	d135      	bne.n	14530 <SX1276OnTimeoutIrq+0x8c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   144c4:	4b4c      	ldr	r3, [pc, #304]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144c6:	22b4      	movs	r2, #180	; 0xb4
   144c8:	2100      	movs	r1, #0
   144ca:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   144cc:	4b4a      	ldr	r3, [pc, #296]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144ce:	22b5      	movs	r2, #181	; 0xb5
   144d0:	2100      	movs	r1, #0
   144d2:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   144d4:	4b48      	ldr	r3, [pc, #288]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144d6:	22c0      	movs	r2, #192	; 0xc0
   144d8:	2100      	movs	r1, #0
   144da:	5299      	strh	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.Size = 0;
   144dc:	4b46      	ldr	r3, [pc, #280]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144de:	22be      	movs	r2, #190	; 0xbe
   144e0:	2100      	movs	r1, #0
   144e2:	5299      	strh	r1, [r3, r2]
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   144e4:	210b      	movs	r1, #11
   144e6:	203e      	movs	r0, #62	; 0x3e
   144e8:	4b44      	ldr	r3, [pc, #272]	; (145fc <SX1276OnTimeoutIrq+0x158>)
   144ea:	4798      	blx	r3
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   144ec:	2110      	movs	r1, #16
   144ee:	203f      	movs	r0, #63	; 0x3f
   144f0:	4b42      	ldr	r3, [pc, #264]	; (145fc <SX1276OnTimeoutIrq+0x158>)
   144f2:	4798      	blx	r3
            if( SX1276.Settings.Fsk.RxContinuous == true )
   144f4:	4b40      	ldr	r3, [pc, #256]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   144f6:	22aa      	movs	r2, #170	; 0xaa
   144f8:	5c9b      	ldrb	r3, [r3, r2]
   144fa:	2b00      	cmp	r3, #0
   144fc:	d010      	beq.n	14520 <SX1276OnTimeoutIrq+0x7c>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   144fe:	200d      	movs	r0, #13
   14500:	4b3f      	ldr	r3, [pc, #252]	; (14600 <SX1276OnTimeoutIrq+0x15c>)
   14502:	4798      	blx	r3
   14504:	0003      	movs	r3, r0
   14506:	001a      	movs	r2, r3
   14508:	2340      	movs	r3, #64	; 0x40
   1450a:	4313      	orrs	r3, r2
   1450c:	b2db      	uxtb	r3, r3
   1450e:	0019      	movs	r1, r3
   14510:	200d      	movs	r0, #13
   14512:	4b3a      	ldr	r3, [pc, #232]	; (145fc <SX1276OnTimeoutIrq+0x158>)
   14514:	4798      	blx	r3
                TimerStart( &RxTimeoutSyncWord );
   14516:	4b3b      	ldr	r3, [pc, #236]	; (14604 <SX1276OnTimeoutIrq+0x160>)
   14518:	0018      	movs	r0, r3
   1451a:	4b3b      	ldr	r3, [pc, #236]	; (14608 <SX1276OnTimeoutIrq+0x164>)
   1451c:	4798      	blx	r3
   1451e:	e007      	b.n	14530 <SX1276OnTimeoutIrq+0x8c>
                SX1276.Settings.State = RF_IDLE;
   14520:	4b35      	ldr	r3, [pc, #212]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   14522:	2288      	movs	r2, #136	; 0x88
   14524:	2100      	movs	r1, #0
   14526:	5499      	strb	r1, [r3, r2]
                TimerStop( &RxTimeoutSyncWord );
   14528:	4b36      	ldr	r3, [pc, #216]	; (14604 <SX1276OnTimeoutIrq+0x160>)
   1452a:	0018      	movs	r0, r3
   1452c:	4b37      	ldr	r3, [pc, #220]	; (1460c <SX1276OnTimeoutIrq+0x168>)
   1452e:	4798      	blx	r3
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   14530:	4b37      	ldr	r3, [pc, #220]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   14532:	681b      	ldr	r3, [r3, #0]
   14534:	2b00      	cmp	r3, #0
   14536:	d058      	beq.n	145ea <SX1276OnTimeoutIrq+0x146>
   14538:	4b35      	ldr	r3, [pc, #212]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   1453a:	681b      	ldr	r3, [r3, #0]
   1453c:	68db      	ldr	r3, [r3, #12]
   1453e:	2b00      	cmp	r3, #0
   14540:	d053      	beq.n	145ea <SX1276OnTimeoutIrq+0x146>
            RadioEvents->RxTimeout( );
   14542:	4b33      	ldr	r3, [pc, #204]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   14544:	681b      	ldr	r3, [r3, #0]
   14546:	68db      	ldr	r3, [r3, #12]
   14548:	4798      	blx	r3
        break;
   1454a:	e04e      	b.n	145ea <SX1276OnTimeoutIrq+0x146>
        SX1276Reset( );
   1454c:	4b31      	ldr	r3, [pc, #196]	; (14614 <SX1276OnTimeoutIrq+0x170>)
   1454e:	4798      	blx	r3
        RxChainCalibration( );
   14550:	4b31      	ldr	r3, [pc, #196]	; (14618 <SX1276OnTimeoutIrq+0x174>)
   14552:	4798      	blx	r3
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   14554:	2000      	movs	r0, #0
   14556:	4b31      	ldr	r3, [pc, #196]	; (1461c <SX1276OnTimeoutIrq+0x178>)
   14558:	4798      	blx	r3
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1455a:	1dfb      	adds	r3, r7, #7
   1455c:	2200      	movs	r2, #0
   1455e:	701a      	strb	r2, [r3, #0]
   14560:	e024      	b.n	145ac <SX1276OnTimeoutIrq+0x108>
            SX1276SetModem( RadioRegsInit[i].Modem );
   14562:	1dfb      	adds	r3, r7, #7
   14564:	781a      	ldrb	r2, [r3, #0]
   14566:	492e      	ldr	r1, [pc, #184]	; (14620 <SX1276OnTimeoutIrq+0x17c>)
   14568:	0013      	movs	r3, r2
   1456a:	005b      	lsls	r3, r3, #1
   1456c:	189b      	adds	r3, r3, r2
   1456e:	5c5b      	ldrb	r3, [r3, r1]
   14570:	0018      	movs	r0, r3
   14572:	4b2c      	ldr	r3, [pc, #176]	; (14624 <SX1276OnTimeoutIrq+0x180>)
   14574:	4798      	blx	r3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   14576:	1dfb      	adds	r3, r7, #7
   14578:	781a      	ldrb	r2, [r3, #0]
   1457a:	4929      	ldr	r1, [pc, #164]	; (14620 <SX1276OnTimeoutIrq+0x17c>)
   1457c:	0013      	movs	r3, r2
   1457e:	005b      	lsls	r3, r3, #1
   14580:	189b      	adds	r3, r3, r2
   14582:	18cb      	adds	r3, r1, r3
   14584:	3301      	adds	r3, #1
   14586:	781b      	ldrb	r3, [r3, #0]
   14588:	b298      	uxth	r0, r3
   1458a:	1dfb      	adds	r3, r7, #7
   1458c:	781a      	ldrb	r2, [r3, #0]
   1458e:	4924      	ldr	r1, [pc, #144]	; (14620 <SX1276OnTimeoutIrq+0x17c>)
   14590:	0013      	movs	r3, r2
   14592:	005b      	lsls	r3, r3, #1
   14594:	189b      	adds	r3, r3, r2
   14596:	18cb      	adds	r3, r1, r3
   14598:	3302      	adds	r3, #2
   1459a:	781b      	ldrb	r3, [r3, #0]
   1459c:	0019      	movs	r1, r3
   1459e:	4b17      	ldr	r3, [pc, #92]	; (145fc <SX1276OnTimeoutIrq+0x158>)
   145a0:	4798      	blx	r3
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   145a2:	1dfb      	adds	r3, r7, #7
   145a4:	781a      	ldrb	r2, [r3, #0]
   145a6:	1dfb      	adds	r3, r7, #7
   145a8:	3201      	adds	r2, #1
   145aa:	701a      	strb	r2, [r3, #0]
   145ac:	1dfb      	adds	r3, r7, #7
   145ae:	781b      	ldrb	r3, [r3, #0]
   145b0:	2b0f      	cmp	r3, #15
   145b2:	d9d6      	bls.n	14562 <SX1276OnTimeoutIrq+0xbe>
        SX1276SetModem( MODEM_FSK );
   145b4:	2000      	movs	r0, #0
   145b6:	4b1b      	ldr	r3, [pc, #108]	; (14624 <SX1276OnTimeoutIrq+0x180>)
   145b8:	4798      	blx	r3
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   145ba:	4b0f      	ldr	r3, [pc, #60]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   145bc:	22e0      	movs	r2, #224	; 0xe0
   145be:	5c9b      	ldrb	r3, [r3, r2]
   145c0:	0018      	movs	r0, r3
   145c2:	4b19      	ldr	r3, [pc, #100]	; (14628 <SX1276OnTimeoutIrq+0x184>)
   145c4:	4798      	blx	r3
        SX1276.Settings.State = RF_IDLE;
   145c6:	4b0c      	ldr	r3, [pc, #48]	; (145f8 <SX1276OnTimeoutIrq+0x154>)
   145c8:	2288      	movs	r2, #136	; 0x88
   145ca:	2100      	movs	r1, #0
   145cc:	5499      	strb	r1, [r3, r2]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   145ce:	4b10      	ldr	r3, [pc, #64]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   145d0:	681b      	ldr	r3, [r3, #0]
   145d2:	2b00      	cmp	r3, #0
   145d4:	d00b      	beq.n	145ee <SX1276OnTimeoutIrq+0x14a>
   145d6:	4b0e      	ldr	r3, [pc, #56]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   145d8:	681b      	ldr	r3, [r3, #0]
   145da:	685b      	ldr	r3, [r3, #4]
   145dc:	2b00      	cmp	r3, #0
   145de:	d006      	beq.n	145ee <SX1276OnTimeoutIrq+0x14a>
            RadioEvents->TxTimeout( );
   145e0:	4b0b      	ldr	r3, [pc, #44]	; (14610 <SX1276OnTimeoutIrq+0x16c>)
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	685b      	ldr	r3, [r3, #4]
   145e6:	4798      	blx	r3
        break;
   145e8:	e001      	b.n	145ee <SX1276OnTimeoutIrq+0x14a>
        break;
   145ea:	46c0      	nop			; (mov r8, r8)
   145ec:	e000      	b.n	145f0 <SX1276OnTimeoutIrq+0x14c>
        break;
   145ee:	46c0      	nop			; (mov r8, r8)
    }
}
   145f0:	46c0      	nop			; (mov r8, r8)
   145f2:	46bd      	mov	sp, r7
   145f4:	b002      	add	sp, #8
   145f6:	bd80      	pop	{r7, pc}
   145f8:	20001bf8 	.word	0x20001bf8
   145fc:	000141fd 	.word	0x000141fd
   14600:	00014229 	.word	0x00014229
   14604:	20001be4 	.word	0x20001be4
   14608:	00016d8d 	.word	0x00016d8d
   1460c:	00016fe5 	.word	0x00016fe5
   14610:	20001640 	.word	0x20001640
   14614:	000055c5 	.word	0x000055c5
   14618:	00012ac9 	.word	0x00012ac9
   1461c:	000140cd 	.word	0x000140cd
   14620:	0001f7f0 	.word	0x0001f7f0
   14624:	00014135 	.word	0x00014135
   14628:	00014441 	.word	0x00014441

0001462c <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
   1462c:	b5b0      	push	{r4, r5, r7, lr}
   1462e:	b082      	sub	sp, #8
   14630:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
   14632:	1cfb      	adds	r3, r7, #3
   14634:	2200      	movs	r2, #0
   14636:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
   14638:	4bd7      	ldr	r3, [pc, #860]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1463a:	2288      	movs	r2, #136	; 0x88
   1463c:	5c9b      	ldrb	r3, [r3, r2]
   1463e:	2b01      	cmp	r3, #1
   14640:	d003      	beq.n	1464a <SX1276OnDio0Irq+0x1e>
   14642:	2b02      	cmp	r3, #2
   14644:	d100      	bne.n	14648 <SX1276OnDio0Irq+0x1c>
   14646:	e22c      	b.n	14aa2 <SX1276OnDio0Irq+0x476>
                }
                break;
            }
            break;
        default:
            break;
   14648:	e24b      	b.n	14ae2 <SX1276OnDio0Irq+0x4b6>
            switch( SX1276.Settings.Modem )
   1464a:	4bd3      	ldr	r3, [pc, #844]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1464c:	2289      	movs	r2, #137	; 0x89
   1464e:	5c9b      	ldrb	r3, [r3, r2]
   14650:	2b00      	cmp	r3, #0
   14652:	d003      	beq.n	1465c <SX1276OnDio0Irq+0x30>
   14654:	2b01      	cmp	r3, #1
   14656:	d100      	bne.n	1465a <SX1276OnDio0Irq+0x2e>
   14658:	e0fe      	b.n	14858 <SX1276OnDio0Irq+0x22c>
                break;
   1465a:	e221      	b.n	14aa0 <SX1276OnDio0Irq+0x474>
                if( SX1276.Settings.Fsk.CrcOn == true )
   1465c:	4bce      	ldr	r3, [pc, #824]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1465e:	22a8      	movs	r2, #168	; 0xa8
   14660:	5c9b      	ldrb	r3, [r3, r2]
   14662:	2b00      	cmp	r3, #0
   14664:	d059      	beq.n	1471a <SX1276OnDio0Irq+0xee>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   14666:	203f      	movs	r0, #63	; 0x3f
   14668:	4bcc      	ldr	r3, [pc, #816]	; (1499c <SX1276OnDio0Irq+0x370>)
   1466a:	4798      	blx	r3
   1466c:	0003      	movs	r3, r0
   1466e:	001a      	movs	r2, r3
   14670:	1cfb      	adds	r3, r7, #3
   14672:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   14674:	1cfb      	adds	r3, r7, #3
   14676:	781b      	ldrb	r3, [r3, #0]
   14678:	b2db      	uxtb	r3, r3
   1467a:	001a      	movs	r2, r3
   1467c:	2302      	movs	r3, #2
   1467e:	4013      	ands	r3, r2
   14680:	2b02      	cmp	r3, #2
   14682:	d04a      	beq.n	1471a <SX1276OnDio0Irq+0xee>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14684:	210b      	movs	r1, #11
   14686:	203e      	movs	r0, #62	; 0x3e
   14688:	4bc5      	ldr	r3, [pc, #788]	; (149a0 <SX1276OnDio0Irq+0x374>)
   1468a:	4798      	blx	r3
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1468c:	2110      	movs	r1, #16
   1468e:	203f      	movs	r0, #63	; 0x3f
   14690:	4bc3      	ldr	r3, [pc, #780]	; (149a0 <SX1276OnDio0Irq+0x374>)
   14692:	4798      	blx	r3
                        TimerStop( &RxTimeoutTimer );
   14694:	4bc3      	ldr	r3, [pc, #780]	; (149a4 <SX1276OnDio0Irq+0x378>)
   14696:	0018      	movs	r0, r3
   14698:	4bc3      	ldr	r3, [pc, #780]	; (149a8 <SX1276OnDio0Irq+0x37c>)
   1469a:	4798      	blx	r3
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1469c:	4bbe      	ldr	r3, [pc, #760]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1469e:	22aa      	movs	r2, #170	; 0xaa
   146a0:	5c9b      	ldrb	r3, [r3, r2]
   146a2:	2201      	movs	r2, #1
   146a4:	4053      	eors	r3, r2
   146a6:	b2db      	uxtb	r3, r3
   146a8:	2b00      	cmp	r3, #0
   146aa:	d008      	beq.n	146be <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
   146ac:	4bbf      	ldr	r3, [pc, #764]	; (149ac <SX1276OnDio0Irq+0x380>)
   146ae:	0018      	movs	r0, r3
   146b0:	4bbd      	ldr	r3, [pc, #756]	; (149a8 <SX1276OnDio0Irq+0x37c>)
   146b2:	4798      	blx	r3
                            SX1276.Settings.State = RF_IDLE;
   146b4:	4bb8      	ldr	r3, [pc, #736]	; (14998 <SX1276OnDio0Irq+0x36c>)
   146b6:	2288      	movs	r2, #136	; 0x88
   146b8:	2100      	movs	r1, #0
   146ba:	5499      	strb	r1, [r3, r2]
   146bc:	e00f      	b.n	146de <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   146be:	200d      	movs	r0, #13
   146c0:	4bb6      	ldr	r3, [pc, #728]	; (1499c <SX1276OnDio0Irq+0x370>)
   146c2:	4798      	blx	r3
   146c4:	0003      	movs	r3, r0
   146c6:	001a      	movs	r2, r3
   146c8:	2340      	movs	r3, #64	; 0x40
   146ca:	4313      	orrs	r3, r2
   146cc:	b2db      	uxtb	r3, r3
   146ce:	0019      	movs	r1, r3
   146d0:	200d      	movs	r0, #13
   146d2:	4bb3      	ldr	r3, [pc, #716]	; (149a0 <SX1276OnDio0Irq+0x374>)
   146d4:	4798      	blx	r3
                            TimerStart( &RxTimeoutSyncWord );
   146d6:	4bb5      	ldr	r3, [pc, #724]	; (149ac <SX1276OnDio0Irq+0x380>)
   146d8:	0018      	movs	r0, r3
   146da:	4bb5      	ldr	r3, [pc, #724]	; (149b0 <SX1276OnDio0Irq+0x384>)
   146dc:	4798      	blx	r3
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   146de:	4bb5      	ldr	r3, [pc, #724]	; (149b4 <SX1276OnDio0Irq+0x388>)
   146e0:	681b      	ldr	r3, [r3, #0]
   146e2:	2b00      	cmp	r3, #0
   146e4:	d008      	beq.n	146f8 <SX1276OnDio0Irq+0xcc>
   146e6:	4bb3      	ldr	r3, [pc, #716]	; (149b4 <SX1276OnDio0Irq+0x388>)
   146e8:	681b      	ldr	r3, [r3, #0]
   146ea:	691b      	ldr	r3, [r3, #16]
   146ec:	2b00      	cmp	r3, #0
   146ee:	d003      	beq.n	146f8 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
   146f0:	4bb0      	ldr	r3, [pc, #704]	; (149b4 <SX1276OnDio0Irq+0x388>)
   146f2:	681b      	ldr	r3, [r3, #0]
   146f4:	691b      	ldr	r3, [r3, #16]
   146f6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   146f8:	4ba7      	ldr	r3, [pc, #668]	; (14998 <SX1276OnDio0Irq+0x36c>)
   146fa:	22b4      	movs	r2, #180	; 0xb4
   146fc:	2100      	movs	r1, #0
   146fe:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   14700:	4ba5      	ldr	r3, [pc, #660]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14702:	22b5      	movs	r2, #181	; 0xb5
   14704:	2100      	movs	r1, #0
   14706:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   14708:	4ba3      	ldr	r3, [pc, #652]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1470a:	22c0      	movs	r2, #192	; 0xc0
   1470c:	2100      	movs	r1, #0
   1470e:	5299      	strh	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.Size = 0;
   14710:	4ba1      	ldr	r3, [pc, #644]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14712:	22be      	movs	r2, #190	; 0xbe
   14714:	2100      	movs	r1, #0
   14716:	5299      	strh	r1, [r3, r2]
                        break;
   14718:	e1c2      	b.n	14aa0 <SX1276OnDio0Irq+0x474>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1471a:	4b9f      	ldr	r3, [pc, #636]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1471c:	22be      	movs	r2, #190	; 0xbe
   1471e:	5a9b      	ldrh	r3, [r3, r2]
   14720:	2b00      	cmp	r3, #0
   14722:	d134      	bne.n	1478e <SX1276OnDio0Irq+0x162>
   14724:	4b9c      	ldr	r3, [pc, #624]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14726:	22c0      	movs	r2, #192	; 0xc0
   14728:	5a9b      	ldrh	r3, [r3, r2]
   1472a:	2b00      	cmp	r3, #0
   1472c:	d12f      	bne.n	1478e <SX1276OnDio0Irq+0x162>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1472e:	4b9a      	ldr	r3, [pc, #616]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14730:	22a6      	movs	r2, #166	; 0xa6
   14732:	5c9b      	ldrb	r3, [r3, r2]
   14734:	2201      	movs	r2, #1
   14736:	4053      	eors	r3, r2
   14738:	b2db      	uxtb	r3, r3
   1473a:	2b00      	cmp	r3, #0
   1473c:	d005      	beq.n	1474a <SX1276OnDio0Irq+0x11e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1473e:	4b9e      	ldr	r3, [pc, #632]	; (149b8 <SX1276OnDio0Irq+0x38c>)
   14740:	2101      	movs	r1, #1
   14742:	0018      	movs	r0, r3
   14744:	4b9d      	ldr	r3, [pc, #628]	; (149bc <SX1276OnDio0Irq+0x390>)
   14746:	4798      	blx	r3
   14748:	e007      	b.n	1475a <SX1276OnDio0Irq+0x12e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1474a:	2032      	movs	r0, #50	; 0x32
   1474c:	4b93      	ldr	r3, [pc, #588]	; (1499c <SX1276OnDio0Irq+0x370>)
   1474e:	4798      	blx	r3
   14750:	0003      	movs	r3, r0
   14752:	b299      	uxth	r1, r3
   14754:	4b90      	ldr	r3, [pc, #576]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14756:	22be      	movs	r2, #190	; 0xbe
   14758:	5299      	strh	r1, [r3, r2]
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1475a:	4b8f      	ldr	r3, [pc, #572]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1475c:	22c0      	movs	r2, #192	; 0xc0
   1475e:	5a9b      	ldrh	r3, [r3, r2]
   14760:	001a      	movs	r2, r3
   14762:	4b97      	ldr	r3, [pc, #604]	; (149c0 <SX1276OnDio0Irq+0x394>)
   14764:	18d0      	adds	r0, r2, r3
   14766:	4b8c      	ldr	r3, [pc, #560]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14768:	22be      	movs	r2, #190	; 0xbe
   1476a:	5a9b      	ldrh	r3, [r3, r2]
   1476c:	b2da      	uxtb	r2, r3
   1476e:	4b8a      	ldr	r3, [pc, #552]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14770:	21c0      	movs	r1, #192	; 0xc0
   14772:	5a5b      	ldrh	r3, [r3, r1]
   14774:	b2db      	uxtb	r3, r3
   14776:	1ad3      	subs	r3, r2, r3
   14778:	b2db      	uxtb	r3, r3
   1477a:	0019      	movs	r1, r3
   1477c:	4b8f      	ldr	r3, [pc, #572]	; (149bc <SX1276OnDio0Irq+0x390>)
   1477e:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   14780:	4b85      	ldr	r3, [pc, #532]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14782:	22be      	movs	r2, #190	; 0xbe
   14784:	5a99      	ldrh	r1, [r3, r2]
   14786:	4b84      	ldr	r3, [pc, #528]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14788:	22c0      	movs	r2, #192	; 0xc0
   1478a:	5299      	strh	r1, [r3, r2]
   1478c:	e018      	b.n	147c0 <SX1276OnDio0Irq+0x194>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1478e:	4b82      	ldr	r3, [pc, #520]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14790:	22c0      	movs	r2, #192	; 0xc0
   14792:	5a9b      	ldrh	r3, [r3, r2]
   14794:	001a      	movs	r2, r3
   14796:	4b8a      	ldr	r3, [pc, #552]	; (149c0 <SX1276OnDio0Irq+0x394>)
   14798:	18d0      	adds	r0, r2, r3
   1479a:	4b7f      	ldr	r3, [pc, #508]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1479c:	22be      	movs	r2, #190	; 0xbe
   1479e:	5a9b      	ldrh	r3, [r3, r2]
   147a0:	b2da      	uxtb	r2, r3
   147a2:	4b7d      	ldr	r3, [pc, #500]	; (14998 <SX1276OnDio0Irq+0x36c>)
   147a4:	21c0      	movs	r1, #192	; 0xc0
   147a6:	5a5b      	ldrh	r3, [r3, r1]
   147a8:	b2db      	uxtb	r3, r3
   147aa:	1ad3      	subs	r3, r2, r3
   147ac:	b2db      	uxtb	r3, r3
   147ae:	0019      	movs	r1, r3
   147b0:	4b82      	ldr	r3, [pc, #520]	; (149bc <SX1276OnDio0Irq+0x390>)
   147b2:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   147b4:	4b78      	ldr	r3, [pc, #480]	; (14998 <SX1276OnDio0Irq+0x36c>)
   147b6:	22be      	movs	r2, #190	; 0xbe
   147b8:	5a99      	ldrh	r1, [r3, r2]
   147ba:	4b77      	ldr	r3, [pc, #476]	; (14998 <SX1276OnDio0Irq+0x36c>)
   147bc:	22c0      	movs	r2, #192	; 0xc0
   147be:	5299      	strh	r1, [r3, r2]
                TimerStop( &RxTimeoutTimer );
   147c0:	4b78      	ldr	r3, [pc, #480]	; (149a4 <SX1276OnDio0Irq+0x378>)
   147c2:	0018      	movs	r0, r3
   147c4:	4b78      	ldr	r3, [pc, #480]	; (149a8 <SX1276OnDio0Irq+0x37c>)
   147c6:	4798      	blx	r3
                if( SX1276.Settings.Fsk.RxContinuous == false )
   147c8:	4b73      	ldr	r3, [pc, #460]	; (14998 <SX1276OnDio0Irq+0x36c>)
   147ca:	22aa      	movs	r2, #170	; 0xaa
   147cc:	5c9b      	ldrb	r3, [r3, r2]
   147ce:	2201      	movs	r2, #1
   147d0:	4053      	eors	r3, r2
   147d2:	b2db      	uxtb	r3, r3
   147d4:	2b00      	cmp	r3, #0
   147d6:	d008      	beq.n	147ea <SX1276OnDio0Irq+0x1be>
                    SX1276.Settings.State = RF_IDLE;
   147d8:	4b6f      	ldr	r3, [pc, #444]	; (14998 <SX1276OnDio0Irq+0x36c>)
   147da:	2288      	movs	r2, #136	; 0x88
   147dc:	2100      	movs	r1, #0
   147de:	5499      	strb	r1, [r3, r2]
                    TimerStop( &RxTimeoutSyncWord );
   147e0:	4b72      	ldr	r3, [pc, #456]	; (149ac <SX1276OnDio0Irq+0x380>)
   147e2:	0018      	movs	r0, r3
   147e4:	4b70      	ldr	r3, [pc, #448]	; (149a8 <SX1276OnDio0Irq+0x37c>)
   147e6:	4798      	blx	r3
   147e8:	e00f      	b.n	1480a <SX1276OnDio0Irq+0x1de>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   147ea:	200d      	movs	r0, #13
   147ec:	4b6b      	ldr	r3, [pc, #428]	; (1499c <SX1276OnDio0Irq+0x370>)
   147ee:	4798      	blx	r3
   147f0:	0003      	movs	r3, r0
   147f2:	001a      	movs	r2, r3
   147f4:	2340      	movs	r3, #64	; 0x40
   147f6:	4313      	orrs	r3, r2
   147f8:	b2db      	uxtb	r3, r3
   147fa:	0019      	movs	r1, r3
   147fc:	200d      	movs	r0, #13
   147fe:	4b68      	ldr	r3, [pc, #416]	; (149a0 <SX1276OnDio0Irq+0x374>)
   14800:	4798      	blx	r3
                    TimerStart( &RxTimeoutSyncWord );
   14802:	4b6a      	ldr	r3, [pc, #424]	; (149ac <SX1276OnDio0Irq+0x380>)
   14804:	0018      	movs	r0, r3
   14806:	4b6a      	ldr	r3, [pc, #424]	; (149b0 <SX1276OnDio0Irq+0x384>)
   14808:	4798      	blx	r3
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1480a:	4b6a      	ldr	r3, [pc, #424]	; (149b4 <SX1276OnDio0Irq+0x388>)
   1480c:	681b      	ldr	r3, [r3, #0]
   1480e:	2b00      	cmp	r3, #0
   14810:	d011      	beq.n	14836 <SX1276OnDio0Irq+0x20a>
   14812:	4b68      	ldr	r3, [pc, #416]	; (149b4 <SX1276OnDio0Irq+0x388>)
   14814:	681b      	ldr	r3, [r3, #0]
   14816:	689b      	ldr	r3, [r3, #8]
   14818:	2b00      	cmp	r3, #0
   1481a:	d00c      	beq.n	14836 <SX1276OnDio0Irq+0x20a>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   1481c:	4b65      	ldr	r3, [pc, #404]	; (149b4 <SX1276OnDio0Irq+0x388>)
   1481e:	681b      	ldr	r3, [r3, #0]
   14820:	689c      	ldr	r4, [r3, #8]
   14822:	4b5d      	ldr	r3, [pc, #372]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14824:	22be      	movs	r2, #190	; 0xbe
   14826:	5a99      	ldrh	r1, [r3, r2]
   14828:	4b5b      	ldr	r3, [pc, #364]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1482a:	22b6      	movs	r2, #182	; 0xb6
   1482c:	569b      	ldrsb	r3, [r3, r2]
   1482e:	b21a      	sxth	r2, r3
   14830:	4863      	ldr	r0, [pc, #396]	; (149c0 <SX1276OnDio0Irq+0x394>)
   14832:	2300      	movs	r3, #0
   14834:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   14836:	4b58      	ldr	r3, [pc, #352]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14838:	22b4      	movs	r2, #180	; 0xb4
   1483a:	2100      	movs	r1, #0
   1483c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   1483e:	4b56      	ldr	r3, [pc, #344]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14840:	22b5      	movs	r2, #181	; 0xb5
   14842:	2100      	movs	r1, #0
   14844:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
   14846:	4b54      	ldr	r3, [pc, #336]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14848:	22c0      	movs	r2, #192	; 0xc0
   1484a:	2100      	movs	r1, #0
   1484c:	5299      	strh	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.Size = 0;
   1484e:	4b52      	ldr	r3, [pc, #328]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14850:	22be      	movs	r2, #190	; 0xbe
   14852:	2100      	movs	r1, #0
   14854:	5299      	strh	r1, [r3, r2]
                break;
   14856:	e123      	b.n	14aa0 <SX1276OnDio0Irq+0x474>
                    int8_t snr = 0;
   14858:	1dfb      	adds	r3, r7, #7
   1485a:	2200      	movs	r2, #0
   1485c:	701a      	strb	r2, [r3, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   1485e:	2140      	movs	r1, #64	; 0x40
   14860:	2012      	movs	r0, #18
   14862:	4b4f      	ldr	r3, [pc, #316]	; (149a0 <SX1276OnDio0Irq+0x374>)
   14864:	4798      	blx	r3
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   14866:	2012      	movs	r0, #18
   14868:	4b4c      	ldr	r3, [pc, #304]	; (1499c <SX1276OnDio0Irq+0x370>)
   1486a:	4798      	blx	r3
   1486c:	0003      	movs	r3, r0
   1486e:	001a      	movs	r2, r3
   14870:	1cfb      	adds	r3, r7, #3
   14872:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   14874:	1cfb      	adds	r3, r7, #3
   14876:	781b      	ldrb	r3, [r3, #0]
   14878:	b2db      	uxtb	r3, r3
   1487a:	001a      	movs	r2, r3
   1487c:	2320      	movs	r3, #32
   1487e:	4013      	ands	r3, r2
   14880:	2b20      	cmp	r3, #32
   14882:	d123      	bne.n	148cc <SX1276OnDio0Irq+0x2a0>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   14884:	2120      	movs	r1, #32
   14886:	2012      	movs	r0, #18
   14888:	4b45      	ldr	r3, [pc, #276]	; (149a0 <SX1276OnDio0Irq+0x374>)
   1488a:	4798      	blx	r3
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1488c:	4b42      	ldr	r3, [pc, #264]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1488e:	22da      	movs	r2, #218	; 0xda
   14890:	5c9b      	ldrb	r3, [r3, r2]
   14892:	2201      	movs	r2, #1
   14894:	4053      	eors	r3, r2
   14896:	b2db      	uxtb	r3, r3
   14898:	2b00      	cmp	r3, #0
   1489a:	d003      	beq.n	148a4 <SX1276OnDio0Irq+0x278>
                            SX1276.Settings.State = RF_IDLE;
   1489c:	4b3e      	ldr	r3, [pc, #248]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1489e:	2288      	movs	r2, #136	; 0x88
   148a0:	2100      	movs	r1, #0
   148a2:	5499      	strb	r1, [r3, r2]
                        TimerStop( &RxTimeoutTimer );
   148a4:	4b3f      	ldr	r3, [pc, #252]	; (149a4 <SX1276OnDio0Irq+0x378>)
   148a6:	0018      	movs	r0, r3
   148a8:	4b3f      	ldr	r3, [pc, #252]	; (149a8 <SX1276OnDio0Irq+0x37c>)
   148aa:	4798      	blx	r3
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   148ac:	4b41      	ldr	r3, [pc, #260]	; (149b4 <SX1276OnDio0Irq+0x388>)
   148ae:	681b      	ldr	r3, [r3, #0]
   148b0:	2b00      	cmp	r3, #0
   148b2:	d100      	bne.n	148b6 <SX1276OnDio0Irq+0x28a>
   148b4:	e0f1      	b.n	14a9a <SX1276OnDio0Irq+0x46e>
   148b6:	4b3f      	ldr	r3, [pc, #252]	; (149b4 <SX1276OnDio0Irq+0x388>)
   148b8:	681b      	ldr	r3, [r3, #0]
   148ba:	691b      	ldr	r3, [r3, #16]
   148bc:	2b00      	cmp	r3, #0
   148be:	d100      	bne.n	148c2 <SX1276OnDio0Irq+0x296>
   148c0:	e0eb      	b.n	14a9a <SX1276OnDio0Irq+0x46e>
                            RadioEvents->RxError( );
   148c2:	4b3c      	ldr	r3, [pc, #240]	; (149b4 <SX1276OnDio0Irq+0x388>)
   148c4:	681b      	ldr	r3, [r3, #0]
   148c6:	691b      	ldr	r3, [r3, #16]
   148c8:	4798      	blx	r3
                        break;
   148ca:	e0e6      	b.n	14a9a <SX1276OnDio0Irq+0x46e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
   148cc:	2019      	movs	r0, #25
   148ce:	4b33      	ldr	r3, [pc, #204]	; (1499c <SX1276OnDio0Irq+0x370>)
   148d0:	4798      	blx	r3
   148d2:	0003      	movs	r3, r0
   148d4:	b259      	sxtb	r1, r3
   148d6:	4b30      	ldr	r3, [pc, #192]	; (14998 <SX1276OnDio0Irq+0x36c>)
   148d8:	22e4      	movs	r2, #228	; 0xe4
   148da:	5499      	strb	r1, [r3, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
   148dc:	4b2e      	ldr	r3, [pc, #184]	; (14998 <SX1276OnDio0Irq+0x36c>)
   148de:	22e4      	movs	r2, #228	; 0xe4
   148e0:	569b      	ldrsb	r3, [r3, r2]
   148e2:	2b00      	cmp	r3, #0
   148e4:	da10      	bge.n	14908 <SX1276OnDio0Irq+0x2dc>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
   148e6:	4b2c      	ldr	r3, [pc, #176]	; (14998 <SX1276OnDio0Irq+0x36c>)
   148e8:	22e4      	movs	r2, #228	; 0xe4
   148ea:	569b      	ldrsb	r3, [r3, r2]
   148ec:	425b      	negs	r3, r3
   148ee:	109b      	asrs	r3, r3, #2
   148f0:	b25a      	sxtb	r2, r3
   148f2:	1dfb      	adds	r3, r7, #7
   148f4:	213f      	movs	r1, #63	; 0x3f
   148f6:	400a      	ands	r2, r1
   148f8:	701a      	strb	r2, [r3, #0]
                        snr = -snr;
   148fa:	1dfb      	adds	r3, r7, #7
   148fc:	781b      	ldrb	r3, [r3, #0]
   148fe:	425b      	negs	r3, r3
   14900:	b2da      	uxtb	r2, r3
   14902:	1dfb      	adds	r3, r7, #7
   14904:	701a      	strb	r2, [r3, #0]
   14906:	e008      	b.n	1491a <SX1276OnDio0Irq+0x2ee>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
   14908:	4b23      	ldr	r3, [pc, #140]	; (14998 <SX1276OnDio0Irq+0x36c>)
   1490a:	22e4      	movs	r2, #228	; 0xe4
   1490c:	569b      	ldrsb	r3, [r3, r2]
   1490e:	109b      	asrs	r3, r3, #2
   14910:	b25a      	sxtb	r2, r3
   14912:	1dfb      	adds	r3, r7, #7
   14914:	213f      	movs	r1, #63	; 0x3f
   14916:	400a      	ands	r2, r1
   14918:	701a      	strb	r2, [r3, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1491a:	201a      	movs	r0, #26
   1491c:	4b1f      	ldr	r3, [pc, #124]	; (1499c <SX1276OnDio0Irq+0x370>)
   1491e:	4798      	blx	r3
   14920:	0003      	movs	r3, r0
   14922:	001a      	movs	r2, r3
   14924:	1d3b      	adds	r3, r7, #4
   14926:	801a      	strh	r2, [r3, #0]
                    if( snr < 0 )
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	2b7f      	cmp	r3, #127	; 0x7f
   1492e:	d94b      	bls.n	149c8 <SX1276OnDio0Irq+0x39c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   14930:	4b19      	ldr	r3, [pc, #100]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14932:	228c      	movs	r2, #140	; 0x8c
   14934:	589b      	ldr	r3, [r3, r2]
   14936:	4a23      	ldr	r2, [pc, #140]	; (149c4 <SX1276OnDio0Irq+0x398>)
   14938:	4293      	cmp	r3, r2
   1493a:	d916      	bls.n	1496a <SX1276OnDio0Irq+0x33e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1493c:	1d3b      	adds	r3, r7, #4
   1493e:	2200      	movs	r2, #0
   14940:	5e9b      	ldrsh	r3, [r3, r2]
   14942:	111b      	asrs	r3, r3, #4
   14944:	b21b      	sxth	r3, r3
   14946:	b29a      	uxth	r2, r3
   14948:	1d3b      	adds	r3, r7, #4
   1494a:	881b      	ldrh	r3, [r3, #0]
   1494c:	18d3      	adds	r3, r2, r3
   1494e:	b29a      	uxth	r2, r3
   14950:	1dfb      	adds	r3, r7, #7
   14952:	781b      	ldrb	r3, [r3, #0]
   14954:	b25b      	sxtb	r3, r3
   14956:	b29b      	uxth	r3, r3
   14958:	18d3      	adds	r3, r2, r3
   1495a:	b29b      	uxth	r3, r3
   1495c:	3b9d      	subs	r3, #157	; 0x9d
   1495e:	b29b      	uxth	r3, r3
   14960:	b219      	sxth	r1, r3
   14962:	4b0d      	ldr	r3, [pc, #52]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14964:	22e6      	movs	r2, #230	; 0xe6
   14966:	5299      	strh	r1, [r3, r2]
   14968:	e055      	b.n	14a16 <SX1276OnDio0Irq+0x3ea>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1496a:	1d3b      	adds	r3, r7, #4
   1496c:	2200      	movs	r2, #0
   1496e:	5e9b      	ldrsh	r3, [r3, r2]
   14970:	111b      	asrs	r3, r3, #4
   14972:	b21b      	sxth	r3, r3
   14974:	b29a      	uxth	r2, r3
   14976:	1d3b      	adds	r3, r7, #4
   14978:	881b      	ldrh	r3, [r3, #0]
   1497a:	18d3      	adds	r3, r2, r3
   1497c:	b29a      	uxth	r2, r3
   1497e:	1dfb      	adds	r3, r7, #7
   14980:	781b      	ldrb	r3, [r3, #0]
   14982:	b25b      	sxtb	r3, r3
   14984:	b29b      	uxth	r3, r3
   14986:	18d3      	adds	r3, r2, r3
   14988:	b29b      	uxth	r3, r3
   1498a:	3ba4      	subs	r3, #164	; 0xa4
   1498c:	b29b      	uxth	r3, r3
   1498e:	b219      	sxth	r1, r3
   14990:	4b01      	ldr	r3, [pc, #4]	; (14998 <SX1276OnDio0Irq+0x36c>)
   14992:	22e6      	movs	r2, #230	; 0xe6
   14994:	5299      	strh	r1, [r3, r2]
   14996:	e03e      	b.n	14a16 <SX1276OnDio0Irq+0x3ea>
   14998:	20001bf8 	.word	0x20001bf8
   1499c:	00014229 	.word	0x00014229
   149a0:	000141fd 	.word	0x000141fd
   149a4:	20001ce4 	.word	0x20001ce4
   149a8:	00016fe5 	.word	0x00016fe5
   149ac:	20001be4 	.word	0x20001be4
   149b0:	00016d8d 	.word	0x00016d8d
   149b4:	20001640 	.word	0x20001640
   149b8:	20001cb6 	.word	0x20001cb6
   149bc:	000143ad 	.word	0x000143ad
   149c0:	20001644 	.word	0x20001644
   149c4:	1f4add40 	.word	0x1f4add40
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   149c8:	4b48      	ldr	r3, [pc, #288]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   149ca:	228c      	movs	r2, #140	; 0x8c
   149cc:	589b      	ldr	r3, [r3, r2]
   149ce:	4a48      	ldr	r2, [pc, #288]	; (14af0 <SX1276OnDio0Irq+0x4c4>)
   149d0:	4293      	cmp	r3, r2
   149d2:	d910      	bls.n	149f6 <SX1276OnDio0Irq+0x3ca>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   149d4:	1d3b      	adds	r3, r7, #4
   149d6:	2200      	movs	r2, #0
   149d8:	5e9b      	ldrsh	r3, [r3, r2]
   149da:	111b      	asrs	r3, r3, #4
   149dc:	b21b      	sxth	r3, r3
   149de:	b29a      	uxth	r2, r3
   149e0:	1d3b      	adds	r3, r7, #4
   149e2:	881b      	ldrh	r3, [r3, #0]
   149e4:	18d3      	adds	r3, r2, r3
   149e6:	b29b      	uxth	r3, r3
   149e8:	3b9d      	subs	r3, #157	; 0x9d
   149ea:	b29b      	uxth	r3, r3
   149ec:	b219      	sxth	r1, r3
   149ee:	4b3f      	ldr	r3, [pc, #252]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   149f0:	22e6      	movs	r2, #230	; 0xe6
   149f2:	5299      	strh	r1, [r3, r2]
   149f4:	e00f      	b.n	14a16 <SX1276OnDio0Irq+0x3ea>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   149f6:	1d3b      	adds	r3, r7, #4
   149f8:	2200      	movs	r2, #0
   149fa:	5e9b      	ldrsh	r3, [r3, r2]
   149fc:	111b      	asrs	r3, r3, #4
   149fe:	b21b      	sxth	r3, r3
   14a00:	b29a      	uxth	r2, r3
   14a02:	1d3b      	adds	r3, r7, #4
   14a04:	881b      	ldrh	r3, [r3, #0]
   14a06:	18d3      	adds	r3, r2, r3
   14a08:	b29b      	uxth	r3, r3
   14a0a:	3ba4      	subs	r3, #164	; 0xa4
   14a0c:	b29b      	uxth	r3, r3
   14a0e:	b219      	sxth	r1, r3
   14a10:	4b36      	ldr	r3, [pc, #216]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a12:	22e6      	movs	r2, #230	; 0xe6
   14a14:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   14a16:	2013      	movs	r0, #19
   14a18:	4b36      	ldr	r3, [pc, #216]	; (14af4 <SX1276OnDio0Irq+0x4c8>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	0019      	movs	r1, r3
   14a20:	4b32      	ldr	r3, [pc, #200]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a22:	22e8      	movs	r2, #232	; 0xe8
   14a24:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   14a26:	2010      	movs	r0, #16
   14a28:	4b32      	ldr	r3, [pc, #200]	; (14af4 <SX1276OnDio0Irq+0x4c8>)
   14a2a:	4798      	blx	r3
   14a2c:	0003      	movs	r3, r0
   14a2e:	0019      	movs	r1, r3
   14a30:	200d      	movs	r0, #13
   14a32:	4b31      	ldr	r3, [pc, #196]	; (14af8 <SX1276OnDio0Irq+0x4cc>)
   14a34:	4798      	blx	r3
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
   14a36:	4b2d      	ldr	r3, [pc, #180]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a38:	22e8      	movs	r2, #232	; 0xe8
   14a3a:	5c9a      	ldrb	r2, [r3, r2]
   14a3c:	4b2f      	ldr	r3, [pc, #188]	; (14afc <SX1276OnDio0Irq+0x4d0>)
   14a3e:	0011      	movs	r1, r2
   14a40:	0018      	movs	r0, r3
   14a42:	4b2f      	ldr	r3, [pc, #188]	; (14b00 <SX1276OnDio0Irq+0x4d4>)
   14a44:	4798      	blx	r3
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   14a46:	4b29      	ldr	r3, [pc, #164]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a48:	22da      	movs	r2, #218	; 0xda
   14a4a:	5c9b      	ldrb	r3, [r3, r2]
   14a4c:	2201      	movs	r2, #1
   14a4e:	4053      	eors	r3, r2
   14a50:	b2db      	uxtb	r3, r3
   14a52:	2b00      	cmp	r3, #0
   14a54:	d003      	beq.n	14a5e <SX1276OnDio0Irq+0x432>
                        SX1276.Settings.State = RF_IDLE;
   14a56:	4b25      	ldr	r3, [pc, #148]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a58:	2288      	movs	r2, #136	; 0x88
   14a5a:	2100      	movs	r1, #0
   14a5c:	5499      	strb	r1, [r3, r2]
                    TimerStop( &RxTimeoutTimer );
   14a5e:	4b29      	ldr	r3, [pc, #164]	; (14b04 <SX1276OnDio0Irq+0x4d8>)
   14a60:	0018      	movs	r0, r3
   14a62:	4b29      	ldr	r3, [pc, #164]	; (14b08 <SX1276OnDio0Irq+0x4dc>)
   14a64:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   14a66:	4b29      	ldr	r3, [pc, #164]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14a68:	681b      	ldr	r3, [r3, #0]
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d017      	beq.n	14a9e <SX1276OnDio0Irq+0x472>
   14a6e:	4b27      	ldr	r3, [pc, #156]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14a70:	681b      	ldr	r3, [r3, #0]
   14a72:	689b      	ldr	r3, [r3, #8]
   14a74:	2b00      	cmp	r3, #0
   14a76:	d012      	beq.n	14a9e <SX1276OnDio0Irq+0x472>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   14a78:	4b24      	ldr	r3, [pc, #144]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14a7a:	681b      	ldr	r3, [r3, #0]
   14a7c:	689c      	ldr	r4, [r3, #8]
   14a7e:	4b1b      	ldr	r3, [pc, #108]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a80:	22e8      	movs	r2, #232	; 0xe8
   14a82:	5c9b      	ldrb	r3, [r3, r2]
   14a84:	b299      	uxth	r1, r3
   14a86:	4b19      	ldr	r3, [pc, #100]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a88:	22e6      	movs	r2, #230	; 0xe6
   14a8a:	5e9d      	ldrsh	r5, [r3, r2]
   14a8c:	4b17      	ldr	r3, [pc, #92]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14a8e:	22e4      	movs	r2, #228	; 0xe4
   14a90:	569b      	ldrsb	r3, [r3, r2]
   14a92:	481a      	ldr	r0, [pc, #104]	; (14afc <SX1276OnDio0Irq+0x4d0>)
   14a94:	002a      	movs	r2, r5
   14a96:	47a0      	blx	r4
                break;
   14a98:	e001      	b.n	14a9e <SX1276OnDio0Irq+0x472>
                        break;
   14a9a:	46c0      	nop			; (mov r8, r8)
   14a9c:	e021      	b.n	14ae2 <SX1276OnDio0Irq+0x4b6>
                break;
   14a9e:	46c0      	nop			; (mov r8, r8)
            break;
   14aa0:	e01f      	b.n	14ae2 <SX1276OnDio0Irq+0x4b6>
            TimerStop( &TxTimeoutTimer );
   14aa2:	4b1b      	ldr	r3, [pc, #108]	; (14b10 <SX1276OnDio0Irq+0x4e4>)
   14aa4:	0018      	movs	r0, r3
   14aa6:	4b18      	ldr	r3, [pc, #96]	; (14b08 <SX1276OnDio0Irq+0x4dc>)
   14aa8:	4798      	blx	r3
            switch( SX1276.Settings.Modem )
   14aaa:	4b10      	ldr	r3, [pc, #64]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14aac:	2289      	movs	r2, #137	; 0x89
   14aae:	5c9b      	ldrb	r3, [r3, r2]
   14ab0:	2b01      	cmp	r3, #1
   14ab2:	d103      	bne.n	14abc <SX1276OnDio0Irq+0x490>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   14ab4:	2108      	movs	r1, #8
   14ab6:	2012      	movs	r0, #18
   14ab8:	4b0f      	ldr	r3, [pc, #60]	; (14af8 <SX1276OnDio0Irq+0x4cc>)
   14aba:	4798      	blx	r3
                SX1276.Settings.State = RF_IDLE;
   14abc:	4b0b      	ldr	r3, [pc, #44]	; (14aec <SX1276OnDio0Irq+0x4c0>)
   14abe:	2288      	movs	r2, #136	; 0x88
   14ac0:	2100      	movs	r1, #0
   14ac2:	5499      	strb	r1, [r3, r2]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   14ac4:	4b11      	ldr	r3, [pc, #68]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14ac6:	681b      	ldr	r3, [r3, #0]
   14ac8:	2b00      	cmp	r3, #0
   14aca:	d008      	beq.n	14ade <SX1276OnDio0Irq+0x4b2>
   14acc:	4b0f      	ldr	r3, [pc, #60]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14ace:	681b      	ldr	r3, [r3, #0]
   14ad0:	681b      	ldr	r3, [r3, #0]
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	d003      	beq.n	14ade <SX1276OnDio0Irq+0x4b2>
                    RadioEvents->TxDone( );
   14ad6:	4b0d      	ldr	r3, [pc, #52]	; (14b0c <SX1276OnDio0Irq+0x4e0>)
   14ad8:	681b      	ldr	r3, [r3, #0]
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	4798      	blx	r3
                break;
   14ade:	46c0      	nop			; (mov r8, r8)
            break;
   14ae0:	46c0      	nop			; (mov r8, r8)
    }
}
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	46bd      	mov	sp, r7
   14ae6:	b002      	add	sp, #8
   14ae8:	bdb0      	pop	{r4, r5, r7, pc}
   14aea:	46c0      	nop			; (mov r8, r8)
   14aec:	20001bf8 	.word	0x20001bf8
   14af0:	1f4add40 	.word	0x1f4add40
   14af4:	00014229 	.word	0x00014229
   14af8:	000141fd 	.word	0x000141fd
   14afc:	20001644 	.word	0x20001644
   14b00:	000143ad 	.word	0x000143ad
   14b04:	20001ce4 	.word	0x20001ce4
   14b08:	00016fe5 	.word	0x00016fe5
   14b0c:	20001640 	.word	0x20001640
   14b10:	20001bd0 	.word	0x20001bd0

00014b14 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
   14b14:	b580      	push	{r7, lr}
   14b16:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
   14b18:	4b6c      	ldr	r3, [pc, #432]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b1a:	2288      	movs	r2, #136	; 0x88
   14b1c:	5c9b      	ldrb	r3, [r3, r2]
   14b1e:	2b01      	cmp	r3, #1
   14b20:	d003      	beq.n	14b2a <SX1276OnDio1Irq+0x16>
   14b22:	2b02      	cmp	r3, #2
   14b24:	d100      	bne.n	14b28 <SX1276OnDio1Irq+0x14>
   14b26:	e083      	b.n	14c30 <SX1276OnDio1Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
   14b28:	e0cc      	b.n	14cc4 <SX1276OnDio1Irq+0x1b0>
            switch( SX1276.Settings.Modem )
   14b2a:	4b68      	ldr	r3, [pc, #416]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b2c:	2289      	movs	r2, #137	; 0x89
   14b2e:	5c9b      	ldrb	r3, [r3, r2]
   14b30:	2b00      	cmp	r3, #0
   14b32:	d002      	beq.n	14b3a <SX1276OnDio1Irq+0x26>
   14b34:	2b01      	cmp	r3, #1
   14b36:	d060      	beq.n	14bfa <SX1276OnDio1Irq+0xe6>
                break;
   14b38:	e079      	b.n	14c2e <SX1276OnDio1Irq+0x11a>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   14b3a:	4b64      	ldr	r3, [pc, #400]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b3c:	22be      	movs	r2, #190	; 0xbe
   14b3e:	5a9b      	ldrh	r3, [r3, r2]
   14b40:	2b00      	cmp	r3, #0
   14b42:	d11a      	bne.n	14b7a <SX1276OnDio1Irq+0x66>
   14b44:	4b61      	ldr	r3, [pc, #388]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b46:	22c0      	movs	r2, #192	; 0xc0
   14b48:	5a9b      	ldrh	r3, [r3, r2]
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d115      	bne.n	14b7a <SX1276OnDio1Irq+0x66>
                    if( SX1276.Settings.Fsk.FixLen == false )
   14b4e:	4b5f      	ldr	r3, [pc, #380]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b50:	22a6      	movs	r2, #166	; 0xa6
   14b52:	5c9b      	ldrb	r3, [r3, r2]
   14b54:	2201      	movs	r2, #1
   14b56:	4053      	eors	r3, r2
   14b58:	b2db      	uxtb	r3, r3
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d005      	beq.n	14b6a <SX1276OnDio1Irq+0x56>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   14b5e:	4b5c      	ldr	r3, [pc, #368]	; (14cd0 <SX1276OnDio1Irq+0x1bc>)
   14b60:	2101      	movs	r1, #1
   14b62:	0018      	movs	r0, r3
   14b64:	4b5b      	ldr	r3, [pc, #364]	; (14cd4 <SX1276OnDio1Irq+0x1c0>)
   14b66:	4798      	blx	r3
   14b68:	e007      	b.n	14b7a <SX1276OnDio1Irq+0x66>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   14b6a:	2032      	movs	r0, #50	; 0x32
   14b6c:	4b5a      	ldr	r3, [pc, #360]	; (14cd8 <SX1276OnDio1Irq+0x1c4>)
   14b6e:	4798      	blx	r3
   14b70:	0003      	movs	r3, r0
   14b72:	b299      	uxth	r1, r3
   14b74:	4b55      	ldr	r3, [pc, #340]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b76:	22be      	movs	r2, #190	; 0xbe
   14b78:	5299      	strh	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
   14b7a:	4b54      	ldr	r3, [pc, #336]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b7c:	22be      	movs	r2, #190	; 0xbe
   14b7e:	5a9b      	ldrh	r3, [r3, r2]
   14b80:	0019      	movs	r1, r3
   14b82:	4b52      	ldr	r3, [pc, #328]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b84:	22c0      	movs	r2, #192	; 0xc0
   14b86:	5a9b      	ldrh	r3, [r3, r2]
   14b88:	1acb      	subs	r3, r1, r3
   14b8a:	4a50      	ldr	r2, [pc, #320]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b8c:	21c2      	movs	r1, #194	; 0xc2
   14b8e:	5c52      	ldrb	r2, [r2, r1]
   14b90:	4293      	cmp	r3, r2
   14b92:	dd18      	ble.n	14bc6 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
   14b94:	4b4d      	ldr	r3, [pc, #308]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14b96:	22c0      	movs	r2, #192	; 0xc0
   14b98:	5a9b      	ldrh	r3, [r3, r2]
   14b9a:	001a      	movs	r2, r3
   14b9c:	4b4f      	ldr	r3, [pc, #316]	; (14cdc <SX1276OnDio1Irq+0x1c8>)
   14b9e:	18d0      	adds	r0, r2, r3
   14ba0:	4b4a      	ldr	r3, [pc, #296]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14ba2:	22c2      	movs	r2, #194	; 0xc2
   14ba4:	5c9b      	ldrb	r3, [r3, r2]
   14ba6:	0019      	movs	r1, r3
   14ba8:	4b4a      	ldr	r3, [pc, #296]	; (14cd4 <SX1276OnDio1Irq+0x1c0>)
   14baa:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
   14bac:	4b47      	ldr	r3, [pc, #284]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bae:	22c0      	movs	r2, #192	; 0xc0
   14bb0:	5a9a      	ldrh	r2, [r3, r2]
   14bb2:	4b46      	ldr	r3, [pc, #280]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bb4:	21c2      	movs	r1, #194	; 0xc2
   14bb6:	5c5b      	ldrb	r3, [r3, r1]
   14bb8:	b29b      	uxth	r3, r3
   14bba:	18d3      	adds	r3, r2, r3
   14bbc:	b299      	uxth	r1, r3
   14bbe:	4b43      	ldr	r3, [pc, #268]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bc0:	22c0      	movs	r2, #192	; 0xc0
   14bc2:	5299      	strh	r1, [r3, r2]
                break;
   14bc4:	e033      	b.n	14c2e <SX1276OnDio1Irq+0x11a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   14bc6:	4b41      	ldr	r3, [pc, #260]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bc8:	22c0      	movs	r2, #192	; 0xc0
   14bca:	5a9b      	ldrh	r3, [r3, r2]
   14bcc:	001a      	movs	r2, r3
   14bce:	4b43      	ldr	r3, [pc, #268]	; (14cdc <SX1276OnDio1Irq+0x1c8>)
   14bd0:	18d0      	adds	r0, r2, r3
   14bd2:	4b3e      	ldr	r3, [pc, #248]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bd4:	22be      	movs	r2, #190	; 0xbe
   14bd6:	5a9b      	ldrh	r3, [r3, r2]
   14bd8:	b2da      	uxtb	r2, r3
   14bda:	4b3c      	ldr	r3, [pc, #240]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bdc:	21c0      	movs	r1, #192	; 0xc0
   14bde:	5a5b      	ldrh	r3, [r3, r1]
   14be0:	b2db      	uxtb	r3, r3
   14be2:	1ad3      	subs	r3, r2, r3
   14be4:	b2db      	uxtb	r3, r3
   14be6:	0019      	movs	r1, r3
   14be8:	4b3a      	ldr	r3, [pc, #232]	; (14cd4 <SX1276OnDio1Irq+0x1c0>)
   14bea:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   14bec:	4b37      	ldr	r3, [pc, #220]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bee:	22be      	movs	r2, #190	; 0xbe
   14bf0:	5a99      	ldrh	r1, [r3, r2]
   14bf2:	4b36      	ldr	r3, [pc, #216]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14bf4:	22c0      	movs	r2, #192	; 0xc0
   14bf6:	5299      	strh	r1, [r3, r2]
                break;
   14bf8:	e019      	b.n	14c2e <SX1276OnDio1Irq+0x11a>
                TimerStop( &RxTimeoutTimer );
   14bfa:	4b39      	ldr	r3, [pc, #228]	; (14ce0 <SX1276OnDio1Irq+0x1cc>)
   14bfc:	0018      	movs	r0, r3
   14bfe:	4b39      	ldr	r3, [pc, #228]	; (14ce4 <SX1276OnDio1Irq+0x1d0>)
   14c00:	4798      	blx	r3
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   14c02:	2180      	movs	r1, #128	; 0x80
   14c04:	2012      	movs	r0, #18
   14c06:	4b38      	ldr	r3, [pc, #224]	; (14ce8 <SX1276OnDio1Irq+0x1d4>)
   14c08:	4798      	blx	r3
                SX1276.Settings.State = RF_IDLE;
   14c0a:	4b30      	ldr	r3, [pc, #192]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c0c:	2288      	movs	r2, #136	; 0x88
   14c0e:	2100      	movs	r1, #0
   14c10:	5499      	strb	r1, [r3, r2]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   14c12:	4b36      	ldr	r3, [pc, #216]	; (14cec <SX1276OnDio1Irq+0x1d8>)
   14c14:	681b      	ldr	r3, [r3, #0]
   14c16:	2b00      	cmp	r3, #0
   14c18:	d008      	beq.n	14c2c <SX1276OnDio1Irq+0x118>
   14c1a:	4b34      	ldr	r3, [pc, #208]	; (14cec <SX1276OnDio1Irq+0x1d8>)
   14c1c:	681b      	ldr	r3, [r3, #0]
   14c1e:	68db      	ldr	r3, [r3, #12]
   14c20:	2b00      	cmp	r3, #0
   14c22:	d003      	beq.n	14c2c <SX1276OnDio1Irq+0x118>
                    RadioEvents->RxTimeout( );
   14c24:	4b31      	ldr	r3, [pc, #196]	; (14cec <SX1276OnDio1Irq+0x1d8>)
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	68db      	ldr	r3, [r3, #12]
   14c2a:	4798      	blx	r3
                break;
   14c2c:	46c0      	nop			; (mov r8, r8)
            break;
   14c2e:	e049      	b.n	14cc4 <SX1276OnDio1Irq+0x1b0>
            switch( SX1276.Settings.Modem )
   14c30:	4b26      	ldr	r3, [pc, #152]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c32:	2289      	movs	r2, #137	; 0x89
   14c34:	5c9b      	ldrb	r3, [r3, r2]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d002      	beq.n	14c40 <SX1276OnDio1Irq+0x12c>
   14c3a:	2b01      	cmp	r3, #1
   14c3c:	d040      	beq.n	14cc0 <SX1276OnDio1Irq+0x1ac>
                break;
   14c3e:	e040      	b.n	14cc2 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   14c40:	4b22      	ldr	r3, [pc, #136]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c42:	22be      	movs	r2, #190	; 0xbe
   14c44:	5a9b      	ldrh	r3, [r3, r2]
   14c46:	0019      	movs	r1, r3
   14c48:	4b20      	ldr	r3, [pc, #128]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c4a:	22c0      	movs	r2, #192	; 0xc0
   14c4c:	5a9b      	ldrh	r3, [r3, r2]
   14c4e:	1acb      	subs	r3, r1, r3
   14c50:	4a1e      	ldr	r2, [pc, #120]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c52:	21c3      	movs	r1, #195	; 0xc3
   14c54:	5c52      	ldrb	r2, [r2, r1]
   14c56:	4293      	cmp	r3, r2
   14c58:	dd18      	ble.n	14c8c <SX1276OnDio1Irq+0x178>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   14c5a:	4b1c      	ldr	r3, [pc, #112]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c5c:	22c0      	movs	r2, #192	; 0xc0
   14c5e:	5a9b      	ldrh	r3, [r3, r2]
   14c60:	001a      	movs	r2, r3
   14c62:	4b1e      	ldr	r3, [pc, #120]	; (14cdc <SX1276OnDio1Irq+0x1c8>)
   14c64:	18d0      	adds	r0, r2, r3
   14c66:	4b19      	ldr	r3, [pc, #100]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c68:	22c3      	movs	r2, #195	; 0xc3
   14c6a:	5c9b      	ldrb	r3, [r3, r2]
   14c6c:	0019      	movs	r1, r3
   14c6e:	4b20      	ldr	r3, [pc, #128]	; (14cf0 <SX1276OnDio1Irq+0x1dc>)
   14c70:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   14c72:	4b16      	ldr	r3, [pc, #88]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c74:	22c0      	movs	r2, #192	; 0xc0
   14c76:	5a9a      	ldrh	r2, [r3, r2]
   14c78:	4b14      	ldr	r3, [pc, #80]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c7a:	21c3      	movs	r1, #195	; 0xc3
   14c7c:	5c5b      	ldrb	r3, [r3, r1]
   14c7e:	b29b      	uxth	r3, r3
   14c80:	18d3      	adds	r3, r2, r3
   14c82:	b299      	uxth	r1, r3
   14c84:	4b11      	ldr	r3, [pc, #68]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c86:	22c0      	movs	r2, #192	; 0xc0
   14c88:	5299      	strh	r1, [r3, r2]
                break;
   14c8a:	e01a      	b.n	14cc2 <SX1276OnDio1Irq+0x1ae>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   14c8c:	4b0f      	ldr	r3, [pc, #60]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c8e:	22c0      	movs	r2, #192	; 0xc0
   14c90:	5a9b      	ldrh	r3, [r3, r2]
   14c92:	001a      	movs	r2, r3
   14c94:	4b11      	ldr	r3, [pc, #68]	; (14cdc <SX1276OnDio1Irq+0x1c8>)
   14c96:	18d0      	adds	r0, r2, r3
   14c98:	4b0c      	ldr	r3, [pc, #48]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14c9a:	22be      	movs	r2, #190	; 0xbe
   14c9c:	5a9b      	ldrh	r3, [r3, r2]
   14c9e:	b2da      	uxtb	r2, r3
   14ca0:	4b0a      	ldr	r3, [pc, #40]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14ca2:	21c0      	movs	r1, #192	; 0xc0
   14ca4:	5a5b      	ldrh	r3, [r3, r1]
   14ca6:	b2db      	uxtb	r3, r3
   14ca8:	1ad3      	subs	r3, r2, r3
   14caa:	b2db      	uxtb	r3, r3
   14cac:	0019      	movs	r1, r3
   14cae:	4b10      	ldr	r3, [pc, #64]	; (14cf0 <SX1276OnDio1Irq+0x1dc>)
   14cb0:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   14cb2:	4b06      	ldr	r3, [pc, #24]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14cb4:	22be      	movs	r2, #190	; 0xbe
   14cb6:	5a99      	ldrh	r1, [r3, r2]
   14cb8:	4b04      	ldr	r3, [pc, #16]	; (14ccc <SX1276OnDio1Irq+0x1b8>)
   14cba:	22c0      	movs	r2, #192	; 0xc0
   14cbc:	5299      	strh	r1, [r3, r2]
                break;
   14cbe:	e000      	b.n	14cc2 <SX1276OnDio1Irq+0x1ae>
                break;
   14cc0:	46c0      	nop			; (mov r8, r8)
            break;
   14cc2:	46c0      	nop			; (mov r8, r8)
    }
}
   14cc4:	46c0      	nop			; (mov r8, r8)
   14cc6:	46bd      	mov	sp, r7
   14cc8:	bd80      	pop	{r7, pc}
   14cca:	46c0      	nop			; (mov r8, r8)
   14ccc:	20001bf8 	.word	0x20001bf8
   14cd0:	20001cb6 	.word	0x20001cb6
   14cd4:	000143ad 	.word	0x000143ad
   14cd8:	00014229 	.word	0x00014229
   14cdc:	20001644 	.word	0x20001644
   14ce0:	20001ce4 	.word	0x20001ce4
   14ce4:	00016fe5 	.word	0x00016fe5
   14ce8:	000141fd 	.word	0x000141fd
   14cec:	20001640 	.word	0x20001640
   14cf0:	00014385 	.word	0x00014385

00014cf4 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
   14cf4:	b5b0      	push	{r4, r5, r7, lr}
   14cf6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
   14cf8:	4b5f      	ldr	r3, [pc, #380]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14cfa:	2288      	movs	r2, #136	; 0x88
   14cfc:	5c9b      	ldrb	r3, [r3, r2]
   14cfe:	2b01      	cmp	r3, #1
   14d00:	d003      	beq.n	14d0a <SX1276OnDio2Irq+0x16>
   14d02:	2b02      	cmp	r3, #2
   14d04:	d100      	bne.n	14d08 <SX1276OnDio2Irq+0x14>
   14d06:	e087      	b.n	14e18 <SX1276OnDio2Irq+0x124>
            default:
                break;
            }
            break;
        default:
            break;
   14d08:	e0b2      	b.n	14e70 <SX1276OnDio2Irq+0x17c>
            switch( SX1276.Settings.Modem )
   14d0a:	4b5b      	ldr	r3, [pc, #364]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d0c:	2289      	movs	r2, #137	; 0x89
   14d0e:	5c9b      	ldrb	r3, [r3, r2]
   14d10:	2b00      	cmp	r3, #0
   14d12:	d002      	beq.n	14d1a <SX1276OnDio2Irq+0x26>
   14d14:	2b01      	cmp	r3, #1
   14d16:	d05b      	beq.n	14dd0 <SX1276OnDio2Irq+0xdc>
                break;
   14d18:	e07d      	b.n	14e16 <SX1276OnDio2Irq+0x122>
                if( SX1276.DIO4.port == NULL )
   14d1a:	4b57      	ldr	r3, [pc, #348]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14d1e:	2b00      	cmp	r3, #0
   14d20:	d103      	bne.n	14d2a <SX1276OnDio2Irq+0x36>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   14d22:	4b55      	ldr	r3, [pc, #340]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d24:	22b4      	movs	r2, #180	; 0xb4
   14d26:	2101      	movs	r1, #1
   14d28:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
   14d2a:	4b53      	ldr	r3, [pc, #332]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d2c:	22b4      	movs	r2, #180	; 0xb4
   14d2e:	5c9b      	ldrb	r3, [r3, r2]
   14d30:	2b01      	cmp	r3, #1
   14d32:	d16d      	bne.n	14e10 <SX1276OnDio2Irq+0x11c>
   14d34:	4b50      	ldr	r3, [pc, #320]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d36:	22b5      	movs	r2, #181	; 0xb5
   14d38:	5c9b      	ldrb	r3, [r3, r2]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d168      	bne.n	14e10 <SX1276OnDio2Irq+0x11c>
                    TimerStop( &RxTimeoutSyncWord );
   14d3e:	4b4f      	ldr	r3, [pc, #316]	; (14e7c <SX1276OnDio2Irq+0x188>)
   14d40:	0018      	movs	r0, r3
   14d42:	4b4f      	ldr	r3, [pc, #316]	; (14e80 <SX1276OnDio2Irq+0x18c>)
   14d44:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   14d46:	4b4c      	ldr	r3, [pc, #304]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d48:	22b5      	movs	r2, #181	; 0xb5
   14d4a:	2101      	movs	r1, #1
   14d4c:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   14d4e:	2011      	movs	r0, #17
   14d50:	4b4c      	ldr	r3, [pc, #304]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14d52:	4798      	blx	r3
   14d54:	0003      	movs	r3, r0
   14d56:	085b      	lsrs	r3, r3, #1
   14d58:	b2db      	uxtb	r3, r3
   14d5a:	425b      	negs	r3, r3
   14d5c:	b2db      	uxtb	r3, r3
   14d5e:	b259      	sxtb	r1, r3
   14d60:	4b45      	ldr	r3, [pc, #276]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14d62:	22b6      	movs	r2, #182	; 0xb6
   14d64:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   14d66:	201b      	movs	r0, #27
   14d68:	4b46      	ldr	r3, [pc, #280]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14d6a:	4798      	blx	r3
   14d6c:	0003      	movs	r3, r0
   14d6e:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
   14d70:	201c      	movs	r0, #28
   14d72:	4b44      	ldr	r3, [pc, #272]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14d74:	4798      	blx	r3
   14d76:	0003      	movs	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   14d78:	0022      	movs	r2, r4
   14d7a:	431a      	orrs	r2, r3
   14d7c:	4b42      	ldr	r3, [pc, #264]	; (14e88 <SX1276OnDio2Irq+0x194>)
   14d7e:	0010      	movs	r0, r2
   14d80:	4798      	blx	r3
   14d82:	000a      	movs	r2, r1
   14d84:	0001      	movs	r1, r0
   14d86:	4b41      	ldr	r3, [pc, #260]	; (14e8c <SX1276OnDio2Irq+0x198>)
   14d88:	0008      	movs	r0, r1
   14d8a:	0011      	movs	r1, r2
   14d8c:	4798      	blx	r3
   14d8e:	0002      	movs	r2, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
   14d90:	4b3d      	ldr	r3, [pc, #244]	; (14e88 <SX1276OnDio2Irq+0x194>)
   14d92:	0010      	movs	r0, r2
   14d94:	4798      	blx	r3
   14d96:	4c3e      	ldr	r4, [pc, #248]	; (14e90 <SX1276OnDio2Irq+0x19c>)
   14d98:	2200      	movs	r2, #0
   14d9a:	4b3e      	ldr	r3, [pc, #248]	; (14e94 <SX1276OnDio2Irq+0x1a0>)
   14d9c:	47a0      	blx	r4
   14d9e:	0003      	movs	r3, r0
   14da0:	000c      	movs	r4, r1
   14da2:	0019      	movs	r1, r3
   14da4:	0022      	movs	r2, r4
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   14da6:	4b39      	ldr	r3, [pc, #228]	; (14e8c <SX1276OnDio2Irq+0x198>)
   14da8:	0008      	movs	r0, r1
   14daa:	0011      	movs	r1, r2
   14dac:	4798      	blx	r3
   14dae:	0001      	movs	r1, r0
   14db0:	4b31      	ldr	r3, [pc, #196]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14db2:	22b8      	movs	r2, #184	; 0xb8
   14db4:	5099      	str	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   14db6:	200c      	movs	r0, #12
   14db8:	4b32      	ldr	r3, [pc, #200]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14dba:	4798      	blx	r3
   14dbc:	0003      	movs	r3, r0
   14dbe:	095b      	lsrs	r3, r3, #5
   14dc0:	b2db      	uxtb	r3, r3
   14dc2:	2207      	movs	r2, #7
   14dc4:	4013      	ands	r3, r2
   14dc6:	b2d9      	uxtb	r1, r3
   14dc8:	4b2b      	ldr	r3, [pc, #172]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14dca:	22bc      	movs	r2, #188	; 0xbc
   14dcc:	5499      	strb	r1, [r3, r2]
                break;
   14dce:	e01f      	b.n	14e10 <SX1276OnDio2Irq+0x11c>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   14dd0:	4b29      	ldr	r3, [pc, #164]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14dd2:	22d7      	movs	r2, #215	; 0xd7
   14dd4:	5c9b      	ldrb	r3, [r3, r2]
   14dd6:	2b00      	cmp	r3, #0
   14dd8:	d01c      	beq.n	14e14 <SX1276OnDio2Irq+0x120>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   14dda:	2102      	movs	r1, #2
   14ddc:	2012      	movs	r0, #18
   14dde:	4b2e      	ldr	r3, [pc, #184]	; (14e98 <SX1276OnDio2Irq+0x1a4>)
   14de0:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   14de2:	4b2e      	ldr	r3, [pc, #184]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14de4:	681b      	ldr	r3, [r3, #0]
   14de6:	2b00      	cmp	r3, #0
   14de8:	d014      	beq.n	14e14 <SX1276OnDio2Irq+0x120>
   14dea:	4b2c      	ldr	r3, [pc, #176]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	695b      	ldr	r3, [r3, #20]
   14df0:	2b00      	cmp	r3, #0
   14df2:	d00f      	beq.n	14e14 <SX1276OnDio2Irq+0x120>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   14df4:	4b29      	ldr	r3, [pc, #164]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14df6:	681b      	ldr	r3, [r3, #0]
   14df8:	695c      	ldr	r4, [r3, #20]
   14dfa:	201c      	movs	r0, #28
   14dfc:	4b21      	ldr	r3, [pc, #132]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14dfe:	4798      	blx	r3
   14e00:	0003      	movs	r3, r0
   14e02:	001a      	movs	r2, r3
   14e04:	233f      	movs	r3, #63	; 0x3f
   14e06:	4013      	ands	r3, r2
   14e08:	b2db      	uxtb	r3, r3
   14e0a:	0018      	movs	r0, r3
   14e0c:	47a0      	blx	r4
                break;
   14e0e:	e001      	b.n	14e14 <SX1276OnDio2Irq+0x120>
                break;
   14e10:	46c0      	nop			; (mov r8, r8)
   14e12:	e02d      	b.n	14e70 <SX1276OnDio2Irq+0x17c>
                break;
   14e14:	46c0      	nop			; (mov r8, r8)
            break;
   14e16:	e02b      	b.n	14e70 <SX1276OnDio2Irq+0x17c>
            switch( SX1276.Settings.Modem )
   14e18:	4b17      	ldr	r3, [pc, #92]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14e1a:	2289      	movs	r2, #137	; 0x89
   14e1c:	5c9b      	ldrb	r3, [r3, r2]
   14e1e:	2b00      	cmp	r3, #0
   14e20:	d022      	beq.n	14e68 <SX1276OnDio2Irq+0x174>
   14e22:	2b01      	cmp	r3, #1
   14e24:	d000      	beq.n	14e28 <SX1276OnDio2Irq+0x134>
                break;
   14e26:	e022      	b.n	14e6e <SX1276OnDio2Irq+0x17a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   14e28:	4b13      	ldr	r3, [pc, #76]	; (14e78 <SX1276OnDio2Irq+0x184>)
   14e2a:	22d7      	movs	r2, #215	; 0xd7
   14e2c:	5c9b      	ldrb	r3, [r3, r2]
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d01c      	beq.n	14e6c <SX1276OnDio2Irq+0x178>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   14e32:	2102      	movs	r1, #2
   14e34:	2012      	movs	r0, #18
   14e36:	4b18      	ldr	r3, [pc, #96]	; (14e98 <SX1276OnDio2Irq+0x1a4>)
   14e38:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   14e3a:	4b18      	ldr	r3, [pc, #96]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14e3c:	681b      	ldr	r3, [r3, #0]
   14e3e:	2b00      	cmp	r3, #0
   14e40:	d014      	beq.n	14e6c <SX1276OnDio2Irq+0x178>
   14e42:	4b16      	ldr	r3, [pc, #88]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14e44:	681b      	ldr	r3, [r3, #0]
   14e46:	695b      	ldr	r3, [r3, #20]
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d00f      	beq.n	14e6c <SX1276OnDio2Irq+0x178>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   14e4c:	4b13      	ldr	r3, [pc, #76]	; (14e9c <SX1276OnDio2Irq+0x1a8>)
   14e4e:	681b      	ldr	r3, [r3, #0]
   14e50:	695c      	ldr	r4, [r3, #20]
   14e52:	201c      	movs	r0, #28
   14e54:	4b0b      	ldr	r3, [pc, #44]	; (14e84 <SX1276OnDio2Irq+0x190>)
   14e56:	4798      	blx	r3
   14e58:	0003      	movs	r3, r0
   14e5a:	001a      	movs	r2, r3
   14e5c:	233f      	movs	r3, #63	; 0x3f
   14e5e:	4013      	ands	r3, r2
   14e60:	b2db      	uxtb	r3, r3
   14e62:	0018      	movs	r0, r3
   14e64:	47a0      	blx	r4
                break;
   14e66:	e001      	b.n	14e6c <SX1276OnDio2Irq+0x178>
                break;
   14e68:	46c0      	nop			; (mov r8, r8)
   14e6a:	e000      	b.n	14e6e <SX1276OnDio2Irq+0x17a>
                break;
   14e6c:	46c0      	nop			; (mov r8, r8)
            break;
   14e6e:	46c0      	nop			; (mov r8, r8)
    }
}
   14e70:	46c0      	nop			; (mov r8, r8)
   14e72:	46bd      	mov	sp, r7
   14e74:	bdb0      	pop	{r4, r5, r7, pc}
   14e76:	46c0      	nop			; (mov r8, r8)
   14e78:	20001bf8 	.word	0x20001bf8
   14e7c:	20001be4 	.word	0x20001be4
   14e80:	00016fe5 	.word	0x00016fe5
   14e84:	00014229 	.word	0x00014229
   14e88:	00019999 	.word	0x00019999
   14e8c:	00019931 	.word	0x00019931
   14e90:	00018e05 	.word	0x00018e05
   14e94:	404e8480 	.word	0x404e8480
   14e98:	000141fd 	.word	0x000141fd
   14e9c:	20001640 	.word	0x20001640

00014ea0 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
   14ea0:	b580      	push	{r7, lr}
   14ea2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
   14ea4:	4b1e      	ldr	r3, [pc, #120]	; (14f20 <SX1276OnDio3Irq+0x80>)
   14ea6:	2289      	movs	r2, #137	; 0x89
   14ea8:	5c9b      	ldrb	r3, [r3, r2]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d031      	beq.n	14f12 <SX1276OnDio3Irq+0x72>
   14eae:	2b01      	cmp	r3, #1
   14eb0:	d000      	beq.n	14eb4 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
   14eb2:	e031      	b.n	14f18 <SX1276OnDio3Irq+0x78>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   14eb4:	2012      	movs	r0, #18
   14eb6:	4b1b      	ldr	r3, [pc, #108]	; (14f24 <SX1276OnDio3Irq+0x84>)
   14eb8:	4798      	blx	r3
   14eba:	0003      	movs	r3, r0
   14ebc:	001a      	movs	r2, r3
   14ebe:	2301      	movs	r3, #1
   14ec0:	4013      	ands	r3, r2
   14ec2:	2b01      	cmp	r3, #1
   14ec4:	d112      	bne.n	14eec <SX1276OnDio3Irq+0x4c>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   14ec6:	2105      	movs	r1, #5
   14ec8:	2012      	movs	r0, #18
   14eca:	4b17      	ldr	r3, [pc, #92]	; (14f28 <SX1276OnDio3Irq+0x88>)
   14ecc:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   14ece:	4b17      	ldr	r3, [pc, #92]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14ed0:	681b      	ldr	r3, [r3, #0]
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d01f      	beq.n	14f16 <SX1276OnDio3Irq+0x76>
   14ed6:	4b15      	ldr	r3, [pc, #84]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14ed8:	681b      	ldr	r3, [r3, #0]
   14eda:	699b      	ldr	r3, [r3, #24]
   14edc:	2b00      	cmp	r3, #0
   14ede:	d01a      	beq.n	14f16 <SX1276OnDio3Irq+0x76>
                RadioEvents->CadDone( true );
   14ee0:	4b12      	ldr	r3, [pc, #72]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14ee2:	681b      	ldr	r3, [r3, #0]
   14ee4:	699b      	ldr	r3, [r3, #24]
   14ee6:	2001      	movs	r0, #1
   14ee8:	4798      	blx	r3
        break;
   14eea:	e014      	b.n	14f16 <SX1276OnDio3Irq+0x76>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   14eec:	2104      	movs	r1, #4
   14eee:	2012      	movs	r0, #18
   14ef0:	4b0d      	ldr	r3, [pc, #52]	; (14f28 <SX1276OnDio3Irq+0x88>)
   14ef2:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   14ef4:	4b0d      	ldr	r3, [pc, #52]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14ef6:	681b      	ldr	r3, [r3, #0]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d00c      	beq.n	14f16 <SX1276OnDio3Irq+0x76>
   14efc:	4b0b      	ldr	r3, [pc, #44]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14efe:	681b      	ldr	r3, [r3, #0]
   14f00:	699b      	ldr	r3, [r3, #24]
   14f02:	2b00      	cmp	r3, #0
   14f04:	d007      	beq.n	14f16 <SX1276OnDio3Irq+0x76>
                RadioEvents->CadDone( false );
   14f06:	4b09      	ldr	r3, [pc, #36]	; (14f2c <SX1276OnDio3Irq+0x8c>)
   14f08:	681b      	ldr	r3, [r3, #0]
   14f0a:	699b      	ldr	r3, [r3, #24]
   14f0c:	2000      	movs	r0, #0
   14f0e:	4798      	blx	r3
        break;
   14f10:	e001      	b.n	14f16 <SX1276OnDio3Irq+0x76>
        break;
   14f12:	46c0      	nop			; (mov r8, r8)
   14f14:	e000      	b.n	14f18 <SX1276OnDio3Irq+0x78>
        break;
   14f16:	46c0      	nop			; (mov r8, r8)
    }
}
   14f18:	46c0      	nop			; (mov r8, r8)
   14f1a:	46bd      	mov	sp, r7
   14f1c:	bd80      	pop	{r7, pc}
   14f1e:	46c0      	nop			; (mov r8, r8)
   14f20:	20001bf8 	.word	0x20001bf8
   14f24:	00014229 	.word	0x00014229
   14f28:	000141fd 	.word	0x000141fd
   14f2c:	20001640 	.word	0x20001640

00014f30 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
   14f30:	b580      	push	{r7, lr}
   14f32:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
   14f34:	4b0b      	ldr	r3, [pc, #44]	; (14f64 <SX1276OnDio4Irq+0x34>)
   14f36:	2289      	movs	r2, #137	; 0x89
   14f38:	5c9b      	ldrb	r3, [r3, r2]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d002      	beq.n	14f44 <SX1276OnDio4Irq+0x14>
   14f3e:	2b01      	cmp	r3, #1
   14f40:	d00a      	beq.n	14f58 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
   14f42:	e00c      	b.n	14f5e <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   14f44:	4b07      	ldr	r3, [pc, #28]	; (14f64 <SX1276OnDio4Irq+0x34>)
   14f46:	22b4      	movs	r2, #180	; 0xb4
   14f48:	5c9b      	ldrb	r3, [r3, r2]
   14f4a:	2b00      	cmp	r3, #0
   14f4c:	d106      	bne.n	14f5c <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   14f4e:	4b05      	ldr	r3, [pc, #20]	; (14f64 <SX1276OnDio4Irq+0x34>)
   14f50:	22b4      	movs	r2, #180	; 0xb4
   14f52:	2101      	movs	r1, #1
   14f54:	5499      	strb	r1, [r3, r2]
        break;
   14f56:	e001      	b.n	14f5c <SX1276OnDio4Irq+0x2c>
        break;
   14f58:	46c0      	nop			; (mov r8, r8)
   14f5a:	e000      	b.n	14f5e <SX1276OnDio4Irq+0x2e>
        break;
   14f5c:	46c0      	nop			; (mov r8, r8)
    }
}
   14f5e:	46c0      	nop			; (mov r8, r8)
   14f60:	46bd      	mov	sp, r7
   14f62:	bd80      	pop	{r7, pc}
   14f64:	20001bf8 	.word	0x20001bf8

00014f68 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
   14f68:	b580      	push	{r7, lr}
   14f6a:	b082      	sub	sp, #8
   14f6c:	af00      	add	r7, sp, #0
   14f6e:	6078      	str	r0, [r7, #4]
   14f70:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
   14f72:	683b      	ldr	r3, [r7, #0]
   14f74:	781a      	ldrb	r2, [r3, #0]
   14f76:	687b      	ldr	r3, [r7, #4]
   14f78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
   14f7a:	687b      	ldr	r3, [r7, #4]
   14f7c:	3301      	adds	r3, #1
   14f7e:	683a      	ldr	r2, [r7, #0]
   14f80:	7852      	ldrb	r2, [r2, #1]
   14f82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	3302      	adds	r3, #2
   14f88:	683a      	ldr	r2, [r7, #0]
   14f8a:	7892      	ldrb	r2, [r2, #2]
   14f8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
   14f8e:	687b      	ldr	r3, [r7, #4]
   14f90:	3303      	adds	r3, #3
   14f92:	683a      	ldr	r2, [r7, #0]
   14f94:	78d2      	ldrb	r2, [r2, #3]
   14f96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
   14f98:	687b      	ldr	r3, [r7, #4]
   14f9a:	3304      	adds	r3, #4
   14f9c:	683a      	ldr	r2, [r7, #0]
   14f9e:	7912      	ldrb	r2, [r2, #4]
   14fa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
   14fa2:	687b      	ldr	r3, [r7, #4]
   14fa4:	3305      	adds	r3, #5
   14fa6:	683a      	ldr	r2, [r7, #0]
   14fa8:	7952      	ldrb	r2, [r2, #5]
   14faa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
   14fac:	687b      	ldr	r3, [r7, #4]
   14fae:	3306      	adds	r3, #6
   14fb0:	683a      	ldr	r2, [r7, #0]
   14fb2:	7992      	ldrb	r2, [r2, #6]
   14fb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
   14fb6:	687b      	ldr	r3, [r7, #4]
   14fb8:	3307      	adds	r3, #7
   14fba:	683a      	ldr	r2, [r7, #0]
   14fbc:	79d2      	ldrb	r2, [r2, #7]
   14fbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
   14fc0:	687b      	ldr	r3, [r7, #4]
   14fc2:	3308      	adds	r3, #8
   14fc4:	683a      	ldr	r2, [r7, #0]
   14fc6:	7a12      	ldrb	r2, [r2, #8]
   14fc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
   14fca:	687b      	ldr	r3, [r7, #4]
   14fcc:	3309      	adds	r3, #9
   14fce:	683a      	ldr	r2, [r7, #0]
   14fd0:	7a52      	ldrb	r2, [r2, #9]
   14fd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
   14fd4:	687b      	ldr	r3, [r7, #4]
   14fd6:	330a      	adds	r3, #10
   14fd8:	683a      	ldr	r2, [r7, #0]
   14fda:	7a92      	ldrb	r2, [r2, #10]
   14fdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
   14fde:	687b      	ldr	r3, [r7, #4]
   14fe0:	330b      	adds	r3, #11
   14fe2:	683a      	ldr	r2, [r7, #0]
   14fe4:	7ad2      	ldrb	r2, [r2, #11]
   14fe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
   14fe8:	687b      	ldr	r3, [r7, #4]
   14fea:	330c      	adds	r3, #12
   14fec:	683a      	ldr	r2, [r7, #0]
   14fee:	7b12      	ldrb	r2, [r2, #12]
   14ff0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
   14ff2:	687b      	ldr	r3, [r7, #4]
   14ff4:	330d      	adds	r3, #13
   14ff6:	683a      	ldr	r2, [r7, #0]
   14ff8:	7b52      	ldrb	r2, [r2, #13]
   14ffa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
   14ffc:	687b      	ldr	r3, [r7, #4]
   14ffe:	330e      	adds	r3, #14
   15000:	683a      	ldr	r2, [r7, #0]
   15002:	7b92      	ldrb	r2, [r2, #14]
   15004:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
   15006:	687b      	ldr	r3, [r7, #4]
   15008:	330f      	adds	r3, #15
   1500a:	683a      	ldr	r2, [r7, #0]
   1500c:	7bd2      	ldrb	r2, [r2, #15]
   1500e:	701a      	strb	r2, [r3, #0]
#endif
}
   15010:	46c0      	nop			; (mov r8, r8)
   15012:	46bd      	mov	sp, r7
   15014:	b002      	add	sp, #8
   15016:	bd80      	pop	{r7, pc}

00015018 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
   15018:	b580      	push	{r7, lr}
   1501a:	b084      	sub	sp, #16
   1501c:	af00      	add	r7, sp, #0
   1501e:	60f8      	str	r0, [r7, #12]
   15020:	60b9      	str	r1, [r7, #8]
   15022:	1dfb      	adds	r3, r7, #7
   15024:	701a      	strb	r2, [r3, #0]
    while( nn-- )
   15026:	e007      	b.n	15038 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
   15028:	68fb      	ldr	r3, [r7, #12]
   1502a:	1c5a      	adds	r2, r3, #1
   1502c:	60fa      	str	r2, [r7, #12]
   1502e:	68ba      	ldr	r2, [r7, #8]
   15030:	1c51      	adds	r1, r2, #1
   15032:	60b9      	str	r1, [r7, #8]
   15034:	7812      	ldrb	r2, [r2, #0]
   15036:	701a      	strb	r2, [r3, #0]
    while( nn-- )
   15038:	1dfb      	adds	r3, r7, #7
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	1dfa      	adds	r2, r7, #7
   1503e:	1e59      	subs	r1, r3, #1
   15040:	7011      	strb	r1, [r2, #0]
   15042:	2b00      	cmp	r3, #0
   15044:	d1f0      	bne.n	15028 <copy_block_nn+0x10>
}
   15046:	46c0      	nop			; (mov r8, r8)
   15048:	46bd      	mov	sp, r7
   1504a:	b004      	add	sp, #16
   1504c:	bd80      	pop	{r7, pc}

0001504e <xor_block>:

static void xor_block( void *d, const void *s )
{
   1504e:	b580      	push	{r7, lr}
   15050:	b082      	sub	sp, #8
   15052:	af00      	add	r7, sp, #0
   15054:	6078      	str	r0, [r7, #4]
   15056:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
   15058:	687b      	ldr	r3, [r7, #4]
   1505a:	781a      	ldrb	r2, [r3, #0]
   1505c:	683b      	ldr	r3, [r7, #0]
   1505e:	781b      	ldrb	r3, [r3, #0]
   15060:	4053      	eors	r3, r2
   15062:	b2da      	uxtb	r2, r3
   15064:	687b      	ldr	r3, [r7, #4]
   15066:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
   15068:	687b      	ldr	r3, [r7, #4]
   1506a:	3301      	adds	r3, #1
   1506c:	687a      	ldr	r2, [r7, #4]
   1506e:	3201      	adds	r2, #1
   15070:	7811      	ldrb	r1, [r2, #0]
   15072:	683a      	ldr	r2, [r7, #0]
   15074:	3201      	adds	r2, #1
   15076:	7812      	ldrb	r2, [r2, #0]
   15078:	404a      	eors	r2, r1
   1507a:	b2d2      	uxtb	r2, r2
   1507c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	3302      	adds	r3, #2
   15082:	687a      	ldr	r2, [r7, #4]
   15084:	3202      	adds	r2, #2
   15086:	7811      	ldrb	r1, [r2, #0]
   15088:	683a      	ldr	r2, [r7, #0]
   1508a:	3202      	adds	r2, #2
   1508c:	7812      	ldrb	r2, [r2, #0]
   1508e:	404a      	eors	r2, r1
   15090:	b2d2      	uxtb	r2, r2
   15092:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
   15094:	687b      	ldr	r3, [r7, #4]
   15096:	3303      	adds	r3, #3
   15098:	687a      	ldr	r2, [r7, #4]
   1509a:	3203      	adds	r2, #3
   1509c:	7811      	ldrb	r1, [r2, #0]
   1509e:	683a      	ldr	r2, [r7, #0]
   150a0:	3203      	adds	r2, #3
   150a2:	7812      	ldrb	r2, [r2, #0]
   150a4:	404a      	eors	r2, r1
   150a6:	b2d2      	uxtb	r2, r2
   150a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
   150aa:	687b      	ldr	r3, [r7, #4]
   150ac:	3304      	adds	r3, #4
   150ae:	687a      	ldr	r2, [r7, #4]
   150b0:	3204      	adds	r2, #4
   150b2:	7811      	ldrb	r1, [r2, #0]
   150b4:	683a      	ldr	r2, [r7, #0]
   150b6:	3204      	adds	r2, #4
   150b8:	7812      	ldrb	r2, [r2, #0]
   150ba:	404a      	eors	r2, r1
   150bc:	b2d2      	uxtb	r2, r2
   150be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
   150c0:	687b      	ldr	r3, [r7, #4]
   150c2:	3305      	adds	r3, #5
   150c4:	687a      	ldr	r2, [r7, #4]
   150c6:	3205      	adds	r2, #5
   150c8:	7811      	ldrb	r1, [r2, #0]
   150ca:	683a      	ldr	r2, [r7, #0]
   150cc:	3205      	adds	r2, #5
   150ce:	7812      	ldrb	r2, [r2, #0]
   150d0:	404a      	eors	r2, r1
   150d2:	b2d2      	uxtb	r2, r2
   150d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
   150d6:	687b      	ldr	r3, [r7, #4]
   150d8:	3306      	adds	r3, #6
   150da:	687a      	ldr	r2, [r7, #4]
   150dc:	3206      	adds	r2, #6
   150de:	7811      	ldrb	r1, [r2, #0]
   150e0:	683a      	ldr	r2, [r7, #0]
   150e2:	3206      	adds	r2, #6
   150e4:	7812      	ldrb	r2, [r2, #0]
   150e6:	404a      	eors	r2, r1
   150e8:	b2d2      	uxtb	r2, r2
   150ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
   150ec:	687b      	ldr	r3, [r7, #4]
   150ee:	3307      	adds	r3, #7
   150f0:	687a      	ldr	r2, [r7, #4]
   150f2:	3207      	adds	r2, #7
   150f4:	7811      	ldrb	r1, [r2, #0]
   150f6:	683a      	ldr	r2, [r7, #0]
   150f8:	3207      	adds	r2, #7
   150fa:	7812      	ldrb	r2, [r2, #0]
   150fc:	404a      	eors	r2, r1
   150fe:	b2d2      	uxtb	r2, r2
   15100:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
   15102:	687b      	ldr	r3, [r7, #4]
   15104:	3308      	adds	r3, #8
   15106:	687a      	ldr	r2, [r7, #4]
   15108:	3208      	adds	r2, #8
   1510a:	7811      	ldrb	r1, [r2, #0]
   1510c:	683a      	ldr	r2, [r7, #0]
   1510e:	3208      	adds	r2, #8
   15110:	7812      	ldrb	r2, [r2, #0]
   15112:	404a      	eors	r2, r1
   15114:	b2d2      	uxtb	r2, r2
   15116:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
   15118:	687b      	ldr	r3, [r7, #4]
   1511a:	3309      	adds	r3, #9
   1511c:	687a      	ldr	r2, [r7, #4]
   1511e:	3209      	adds	r2, #9
   15120:	7811      	ldrb	r1, [r2, #0]
   15122:	683a      	ldr	r2, [r7, #0]
   15124:	3209      	adds	r2, #9
   15126:	7812      	ldrb	r2, [r2, #0]
   15128:	404a      	eors	r2, r1
   1512a:	b2d2      	uxtb	r2, r2
   1512c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
   1512e:	687b      	ldr	r3, [r7, #4]
   15130:	330a      	adds	r3, #10
   15132:	687a      	ldr	r2, [r7, #4]
   15134:	320a      	adds	r2, #10
   15136:	7811      	ldrb	r1, [r2, #0]
   15138:	683a      	ldr	r2, [r7, #0]
   1513a:	320a      	adds	r2, #10
   1513c:	7812      	ldrb	r2, [r2, #0]
   1513e:	404a      	eors	r2, r1
   15140:	b2d2      	uxtb	r2, r2
   15142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	330b      	adds	r3, #11
   15148:	687a      	ldr	r2, [r7, #4]
   1514a:	320b      	adds	r2, #11
   1514c:	7811      	ldrb	r1, [r2, #0]
   1514e:	683a      	ldr	r2, [r7, #0]
   15150:	320b      	adds	r2, #11
   15152:	7812      	ldrb	r2, [r2, #0]
   15154:	404a      	eors	r2, r1
   15156:	b2d2      	uxtb	r2, r2
   15158:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
   1515a:	687b      	ldr	r3, [r7, #4]
   1515c:	330c      	adds	r3, #12
   1515e:	687a      	ldr	r2, [r7, #4]
   15160:	320c      	adds	r2, #12
   15162:	7811      	ldrb	r1, [r2, #0]
   15164:	683a      	ldr	r2, [r7, #0]
   15166:	320c      	adds	r2, #12
   15168:	7812      	ldrb	r2, [r2, #0]
   1516a:	404a      	eors	r2, r1
   1516c:	b2d2      	uxtb	r2, r2
   1516e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
   15170:	687b      	ldr	r3, [r7, #4]
   15172:	330d      	adds	r3, #13
   15174:	687a      	ldr	r2, [r7, #4]
   15176:	320d      	adds	r2, #13
   15178:	7811      	ldrb	r1, [r2, #0]
   1517a:	683a      	ldr	r2, [r7, #0]
   1517c:	320d      	adds	r2, #13
   1517e:	7812      	ldrb	r2, [r2, #0]
   15180:	404a      	eors	r2, r1
   15182:	b2d2      	uxtb	r2, r2
   15184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	330e      	adds	r3, #14
   1518a:	687a      	ldr	r2, [r7, #4]
   1518c:	320e      	adds	r2, #14
   1518e:	7811      	ldrb	r1, [r2, #0]
   15190:	683a      	ldr	r2, [r7, #0]
   15192:	320e      	adds	r2, #14
   15194:	7812      	ldrb	r2, [r2, #0]
   15196:	404a      	eors	r2, r1
   15198:	b2d2      	uxtb	r2, r2
   1519a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
   1519c:	687b      	ldr	r3, [r7, #4]
   1519e:	330f      	adds	r3, #15
   151a0:	687a      	ldr	r2, [r7, #4]
   151a2:	320f      	adds	r2, #15
   151a4:	7811      	ldrb	r1, [r2, #0]
   151a6:	683a      	ldr	r2, [r7, #0]
   151a8:	320f      	adds	r2, #15
   151aa:	7812      	ldrb	r2, [r2, #0]
   151ac:	404a      	eors	r2, r1
   151ae:	b2d2      	uxtb	r2, r2
   151b0:	701a      	strb	r2, [r3, #0]
#endif
}
   151b2:	46c0      	nop			; (mov r8, r8)
   151b4:	46bd      	mov	sp, r7
   151b6:	b002      	add	sp, #8
   151b8:	bd80      	pop	{r7, pc}

000151ba <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
   151ba:	b580      	push	{r7, lr}
   151bc:	b084      	sub	sp, #16
   151be:	af00      	add	r7, sp, #0
   151c0:	60f8      	str	r0, [r7, #12]
   151c2:	60b9      	str	r1, [r7, #8]
   151c4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
   151c6:	68bb      	ldr	r3, [r7, #8]
   151c8:	781a      	ldrb	r2, [r3, #0]
   151ca:	687b      	ldr	r3, [r7, #4]
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	4053      	eors	r3, r2
   151d0:	b2da      	uxtb	r2, r3
   151d2:	68fb      	ldr	r3, [r7, #12]
   151d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
   151d6:	68fb      	ldr	r3, [r7, #12]
   151d8:	3301      	adds	r3, #1
   151da:	68ba      	ldr	r2, [r7, #8]
   151dc:	3201      	adds	r2, #1
   151de:	7811      	ldrb	r1, [r2, #0]
   151e0:	687a      	ldr	r2, [r7, #4]
   151e2:	3201      	adds	r2, #1
   151e4:	7812      	ldrb	r2, [r2, #0]
   151e6:	404a      	eors	r2, r1
   151e8:	b2d2      	uxtb	r2, r2
   151ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
   151ec:	68fb      	ldr	r3, [r7, #12]
   151ee:	3302      	adds	r3, #2
   151f0:	68ba      	ldr	r2, [r7, #8]
   151f2:	3202      	adds	r2, #2
   151f4:	7811      	ldrb	r1, [r2, #0]
   151f6:	687a      	ldr	r2, [r7, #4]
   151f8:	3202      	adds	r2, #2
   151fa:	7812      	ldrb	r2, [r2, #0]
   151fc:	404a      	eors	r2, r1
   151fe:	b2d2      	uxtb	r2, r2
   15200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
   15202:	68fb      	ldr	r3, [r7, #12]
   15204:	3303      	adds	r3, #3
   15206:	68ba      	ldr	r2, [r7, #8]
   15208:	3203      	adds	r2, #3
   1520a:	7811      	ldrb	r1, [r2, #0]
   1520c:	687a      	ldr	r2, [r7, #4]
   1520e:	3203      	adds	r2, #3
   15210:	7812      	ldrb	r2, [r2, #0]
   15212:	404a      	eors	r2, r1
   15214:	b2d2      	uxtb	r2, r2
   15216:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
   15218:	68fb      	ldr	r3, [r7, #12]
   1521a:	3304      	adds	r3, #4
   1521c:	68ba      	ldr	r2, [r7, #8]
   1521e:	3204      	adds	r2, #4
   15220:	7811      	ldrb	r1, [r2, #0]
   15222:	687a      	ldr	r2, [r7, #4]
   15224:	3204      	adds	r2, #4
   15226:	7812      	ldrb	r2, [r2, #0]
   15228:	404a      	eors	r2, r1
   1522a:	b2d2      	uxtb	r2, r2
   1522c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
   1522e:	68fb      	ldr	r3, [r7, #12]
   15230:	3305      	adds	r3, #5
   15232:	68ba      	ldr	r2, [r7, #8]
   15234:	3205      	adds	r2, #5
   15236:	7811      	ldrb	r1, [r2, #0]
   15238:	687a      	ldr	r2, [r7, #4]
   1523a:	3205      	adds	r2, #5
   1523c:	7812      	ldrb	r2, [r2, #0]
   1523e:	404a      	eors	r2, r1
   15240:	b2d2      	uxtb	r2, r2
   15242:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
   15244:	68fb      	ldr	r3, [r7, #12]
   15246:	3306      	adds	r3, #6
   15248:	68ba      	ldr	r2, [r7, #8]
   1524a:	3206      	adds	r2, #6
   1524c:	7811      	ldrb	r1, [r2, #0]
   1524e:	687a      	ldr	r2, [r7, #4]
   15250:	3206      	adds	r2, #6
   15252:	7812      	ldrb	r2, [r2, #0]
   15254:	404a      	eors	r2, r1
   15256:	b2d2      	uxtb	r2, r2
   15258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
   1525a:	68fb      	ldr	r3, [r7, #12]
   1525c:	3307      	adds	r3, #7
   1525e:	68ba      	ldr	r2, [r7, #8]
   15260:	3207      	adds	r2, #7
   15262:	7811      	ldrb	r1, [r2, #0]
   15264:	687a      	ldr	r2, [r7, #4]
   15266:	3207      	adds	r2, #7
   15268:	7812      	ldrb	r2, [r2, #0]
   1526a:	404a      	eors	r2, r1
   1526c:	b2d2      	uxtb	r2, r2
   1526e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
   15270:	68fb      	ldr	r3, [r7, #12]
   15272:	3308      	adds	r3, #8
   15274:	68ba      	ldr	r2, [r7, #8]
   15276:	3208      	adds	r2, #8
   15278:	7811      	ldrb	r1, [r2, #0]
   1527a:	687a      	ldr	r2, [r7, #4]
   1527c:	3208      	adds	r2, #8
   1527e:	7812      	ldrb	r2, [r2, #0]
   15280:	404a      	eors	r2, r1
   15282:	b2d2      	uxtb	r2, r2
   15284:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
   15286:	68fb      	ldr	r3, [r7, #12]
   15288:	3309      	adds	r3, #9
   1528a:	68ba      	ldr	r2, [r7, #8]
   1528c:	3209      	adds	r2, #9
   1528e:	7811      	ldrb	r1, [r2, #0]
   15290:	687a      	ldr	r2, [r7, #4]
   15292:	3209      	adds	r2, #9
   15294:	7812      	ldrb	r2, [r2, #0]
   15296:	404a      	eors	r2, r1
   15298:	b2d2      	uxtb	r2, r2
   1529a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
   1529c:	68fb      	ldr	r3, [r7, #12]
   1529e:	330a      	adds	r3, #10
   152a0:	68ba      	ldr	r2, [r7, #8]
   152a2:	320a      	adds	r2, #10
   152a4:	7811      	ldrb	r1, [r2, #0]
   152a6:	687a      	ldr	r2, [r7, #4]
   152a8:	320a      	adds	r2, #10
   152aa:	7812      	ldrb	r2, [r2, #0]
   152ac:	404a      	eors	r2, r1
   152ae:	b2d2      	uxtb	r2, r2
   152b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
   152b2:	68fb      	ldr	r3, [r7, #12]
   152b4:	330b      	adds	r3, #11
   152b6:	68ba      	ldr	r2, [r7, #8]
   152b8:	320b      	adds	r2, #11
   152ba:	7811      	ldrb	r1, [r2, #0]
   152bc:	687a      	ldr	r2, [r7, #4]
   152be:	320b      	adds	r2, #11
   152c0:	7812      	ldrb	r2, [r2, #0]
   152c2:	404a      	eors	r2, r1
   152c4:	b2d2      	uxtb	r2, r2
   152c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
   152c8:	68fb      	ldr	r3, [r7, #12]
   152ca:	330c      	adds	r3, #12
   152cc:	68ba      	ldr	r2, [r7, #8]
   152ce:	320c      	adds	r2, #12
   152d0:	7811      	ldrb	r1, [r2, #0]
   152d2:	687a      	ldr	r2, [r7, #4]
   152d4:	320c      	adds	r2, #12
   152d6:	7812      	ldrb	r2, [r2, #0]
   152d8:	404a      	eors	r2, r1
   152da:	b2d2      	uxtb	r2, r2
   152dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
   152de:	68fb      	ldr	r3, [r7, #12]
   152e0:	330d      	adds	r3, #13
   152e2:	68ba      	ldr	r2, [r7, #8]
   152e4:	320d      	adds	r2, #13
   152e6:	7811      	ldrb	r1, [r2, #0]
   152e8:	687a      	ldr	r2, [r7, #4]
   152ea:	320d      	adds	r2, #13
   152ec:	7812      	ldrb	r2, [r2, #0]
   152ee:	404a      	eors	r2, r1
   152f0:	b2d2      	uxtb	r2, r2
   152f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
   152f4:	68fb      	ldr	r3, [r7, #12]
   152f6:	330e      	adds	r3, #14
   152f8:	68ba      	ldr	r2, [r7, #8]
   152fa:	320e      	adds	r2, #14
   152fc:	7811      	ldrb	r1, [r2, #0]
   152fe:	687a      	ldr	r2, [r7, #4]
   15300:	320e      	adds	r2, #14
   15302:	7812      	ldrb	r2, [r2, #0]
   15304:	404a      	eors	r2, r1
   15306:	b2d2      	uxtb	r2, r2
   15308:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
   1530a:	68fb      	ldr	r3, [r7, #12]
   1530c:	330f      	adds	r3, #15
   1530e:	68ba      	ldr	r2, [r7, #8]
   15310:	320f      	adds	r2, #15
   15312:	7811      	ldrb	r1, [r2, #0]
   15314:	687a      	ldr	r2, [r7, #4]
   15316:	320f      	adds	r2, #15
   15318:	7812      	ldrb	r2, [r2, #0]
   1531a:	404a      	eors	r2, r1
   1531c:	b2d2      	uxtb	r2, r2
   1531e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
   15320:	46c0      	nop			; (mov r8, r8)
   15322:	46bd      	mov	sp, r7
   15324:	b004      	add	sp, #16
   15326:	bd80      	pop	{r7, pc}

00015328 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
   15328:	b580      	push	{r7, lr}
   1532a:	b082      	sub	sp, #8
   1532c:	af00      	add	r7, sp, #0
   1532e:	6078      	str	r0, [r7, #4]
   15330:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
   15332:	683a      	ldr	r2, [r7, #0]
   15334:	687b      	ldr	r3, [r7, #4]
   15336:	0011      	movs	r1, r2
   15338:	0018      	movs	r0, r3
   1533a:	4b03      	ldr	r3, [pc, #12]	; (15348 <add_round_key+0x20>)
   1533c:	4798      	blx	r3
}
   1533e:	46c0      	nop			; (mov r8, r8)
   15340:	46bd      	mov	sp, r7
   15342:	b002      	add	sp, #8
   15344:	bd80      	pop	{r7, pc}
   15346:	46c0      	nop			; (mov r8, r8)
   15348:	0001504f 	.word	0x0001504f

0001534c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
   1534c:	b580      	push	{r7, lr}
   1534e:	b084      	sub	sp, #16
   15350:	af00      	add	r7, sp, #0
   15352:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   15354:	687b      	ldr	r3, [r7, #4]
   15356:	781b      	ldrb	r3, [r3, #0]
   15358:	001a      	movs	r2, r3
   1535a:	4b4f      	ldr	r3, [pc, #316]	; (15498 <shift_sub_rows+0x14c>)
   1535c:	5c9a      	ldrb	r2, [r3, r2]
   1535e:	687b      	ldr	r3, [r7, #4]
   15360:	701a      	strb	r2, [r3, #0]
   15362:	687b      	ldr	r3, [r7, #4]
   15364:	3304      	adds	r3, #4
   15366:	687a      	ldr	r2, [r7, #4]
   15368:	3204      	adds	r2, #4
   1536a:	7812      	ldrb	r2, [r2, #0]
   1536c:	0011      	movs	r1, r2
   1536e:	4a4a      	ldr	r2, [pc, #296]	; (15498 <shift_sub_rows+0x14c>)
   15370:	5c52      	ldrb	r2, [r2, r1]
   15372:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   15374:	687b      	ldr	r3, [r7, #4]
   15376:	3308      	adds	r3, #8
   15378:	687a      	ldr	r2, [r7, #4]
   1537a:	3208      	adds	r2, #8
   1537c:	7812      	ldrb	r2, [r2, #0]
   1537e:	0011      	movs	r1, r2
   15380:	4a45      	ldr	r2, [pc, #276]	; (15498 <shift_sub_rows+0x14c>)
   15382:	5c52      	ldrb	r2, [r2, r1]
   15384:	701a      	strb	r2, [r3, #0]
   15386:	687b      	ldr	r3, [r7, #4]
   15388:	330c      	adds	r3, #12
   1538a:	687a      	ldr	r2, [r7, #4]
   1538c:	320c      	adds	r2, #12
   1538e:	7812      	ldrb	r2, [r2, #0]
   15390:	0011      	movs	r1, r2
   15392:	4a41      	ldr	r2, [pc, #260]	; (15498 <shift_sub_rows+0x14c>)
   15394:	5c52      	ldrb	r2, [r2, r1]
   15396:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   15398:	230f      	movs	r3, #15
   1539a:	18fb      	adds	r3, r7, r3
   1539c:	687a      	ldr	r2, [r7, #4]
   1539e:	7852      	ldrb	r2, [r2, #1]
   153a0:	701a      	strb	r2, [r3, #0]
   153a2:	687b      	ldr	r3, [r7, #4]
   153a4:	3301      	adds	r3, #1
   153a6:	687a      	ldr	r2, [r7, #4]
   153a8:	3205      	adds	r2, #5
   153aa:	7812      	ldrb	r2, [r2, #0]
   153ac:	0011      	movs	r1, r2
   153ae:	4a3a      	ldr	r2, [pc, #232]	; (15498 <shift_sub_rows+0x14c>)
   153b0:	5c52      	ldrb	r2, [r2, r1]
   153b2:	701a      	strb	r2, [r3, #0]
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	3305      	adds	r3, #5
   153b8:	687a      	ldr	r2, [r7, #4]
   153ba:	3209      	adds	r2, #9
   153bc:	7812      	ldrb	r2, [r2, #0]
   153be:	0011      	movs	r1, r2
   153c0:	4a35      	ldr	r2, [pc, #212]	; (15498 <shift_sub_rows+0x14c>)
   153c2:	5c52      	ldrb	r2, [r2, r1]
   153c4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   153c6:	687b      	ldr	r3, [r7, #4]
   153c8:	3309      	adds	r3, #9
   153ca:	687a      	ldr	r2, [r7, #4]
   153cc:	320d      	adds	r2, #13
   153ce:	7812      	ldrb	r2, [r2, #0]
   153d0:	0011      	movs	r1, r2
   153d2:	4a31      	ldr	r2, [pc, #196]	; (15498 <shift_sub_rows+0x14c>)
   153d4:	5c52      	ldrb	r2, [r2, r1]
   153d6:	701a      	strb	r2, [r3, #0]
   153d8:	687b      	ldr	r3, [r7, #4]
   153da:	330d      	adds	r3, #13
   153dc:	220f      	movs	r2, #15
   153de:	18ba      	adds	r2, r7, r2
   153e0:	7812      	ldrb	r2, [r2, #0]
   153e2:	492d      	ldr	r1, [pc, #180]	; (15498 <shift_sub_rows+0x14c>)
   153e4:	5c8a      	ldrb	r2, [r1, r2]
   153e6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   153e8:	230f      	movs	r3, #15
   153ea:	18fb      	adds	r3, r7, r3
   153ec:	687a      	ldr	r2, [r7, #4]
   153ee:	7892      	ldrb	r2, [r2, #2]
   153f0:	701a      	strb	r2, [r3, #0]
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	3302      	adds	r3, #2
   153f6:	687a      	ldr	r2, [r7, #4]
   153f8:	320a      	adds	r2, #10
   153fa:	7812      	ldrb	r2, [r2, #0]
   153fc:	0011      	movs	r1, r2
   153fe:	4a26      	ldr	r2, [pc, #152]	; (15498 <shift_sub_rows+0x14c>)
   15400:	5c52      	ldrb	r2, [r2, r1]
   15402:	701a      	strb	r2, [r3, #0]
   15404:	687b      	ldr	r3, [r7, #4]
   15406:	330a      	adds	r3, #10
   15408:	220f      	movs	r2, #15
   1540a:	18ba      	adds	r2, r7, r2
   1540c:	7812      	ldrb	r2, [r2, #0]
   1540e:	4922      	ldr	r1, [pc, #136]	; (15498 <shift_sub_rows+0x14c>)
   15410:	5c8a      	ldrb	r2, [r1, r2]
   15412:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   15414:	230f      	movs	r3, #15
   15416:	18fb      	adds	r3, r7, r3
   15418:	687a      	ldr	r2, [r7, #4]
   1541a:	7992      	ldrb	r2, [r2, #6]
   1541c:	701a      	strb	r2, [r3, #0]
   1541e:	687b      	ldr	r3, [r7, #4]
   15420:	3306      	adds	r3, #6
   15422:	687a      	ldr	r2, [r7, #4]
   15424:	320e      	adds	r2, #14
   15426:	7812      	ldrb	r2, [r2, #0]
   15428:	0011      	movs	r1, r2
   1542a:	4a1b      	ldr	r2, [pc, #108]	; (15498 <shift_sub_rows+0x14c>)
   1542c:	5c52      	ldrb	r2, [r2, r1]
   1542e:	701a      	strb	r2, [r3, #0]
   15430:	687b      	ldr	r3, [r7, #4]
   15432:	330e      	adds	r3, #14
   15434:	220f      	movs	r2, #15
   15436:	18ba      	adds	r2, r7, r2
   15438:	7812      	ldrb	r2, [r2, #0]
   1543a:	4917      	ldr	r1, [pc, #92]	; (15498 <shift_sub_rows+0x14c>)
   1543c:	5c8a      	ldrb	r2, [r1, r2]
   1543e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   15440:	230f      	movs	r3, #15
   15442:	18fb      	adds	r3, r7, r3
   15444:	687a      	ldr	r2, [r7, #4]
   15446:	7bd2      	ldrb	r2, [r2, #15]
   15448:	701a      	strb	r2, [r3, #0]
   1544a:	687b      	ldr	r3, [r7, #4]
   1544c:	330f      	adds	r3, #15
   1544e:	687a      	ldr	r2, [r7, #4]
   15450:	320b      	adds	r2, #11
   15452:	7812      	ldrb	r2, [r2, #0]
   15454:	0011      	movs	r1, r2
   15456:	4a10      	ldr	r2, [pc, #64]	; (15498 <shift_sub_rows+0x14c>)
   15458:	5c52      	ldrb	r2, [r2, r1]
   1545a:	701a      	strb	r2, [r3, #0]
   1545c:	687b      	ldr	r3, [r7, #4]
   1545e:	330b      	adds	r3, #11
   15460:	687a      	ldr	r2, [r7, #4]
   15462:	3207      	adds	r2, #7
   15464:	7812      	ldrb	r2, [r2, #0]
   15466:	0011      	movs	r1, r2
   15468:	4a0b      	ldr	r2, [pc, #44]	; (15498 <shift_sub_rows+0x14c>)
   1546a:	5c52      	ldrb	r2, [r2, r1]
   1546c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1546e:	687b      	ldr	r3, [r7, #4]
   15470:	3307      	adds	r3, #7
   15472:	687a      	ldr	r2, [r7, #4]
   15474:	3203      	adds	r2, #3
   15476:	7812      	ldrb	r2, [r2, #0]
   15478:	0011      	movs	r1, r2
   1547a:	4a07      	ldr	r2, [pc, #28]	; (15498 <shift_sub_rows+0x14c>)
   1547c:	5c52      	ldrb	r2, [r2, r1]
   1547e:	701a      	strb	r2, [r3, #0]
   15480:	687b      	ldr	r3, [r7, #4]
   15482:	3303      	adds	r3, #3
   15484:	220f      	movs	r2, #15
   15486:	18ba      	adds	r2, r7, r2
   15488:	7812      	ldrb	r2, [r2, #0]
   1548a:	4903      	ldr	r1, [pc, #12]	; (15498 <shift_sub_rows+0x14c>)
   1548c:	5c8a      	ldrb	r2, [r1, r2]
   1548e:	701a      	strb	r2, [r3, #0]
}
   15490:	46c0      	nop			; (mov r8, r8)
   15492:	46bd      	mov	sp, r7
   15494:	b004      	add	sp, #16
   15496:	bd80      	pop	{r7, pc}
   15498:	0001f8f4 	.word	0x0001f8f4

0001549c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
   1549c:	b580      	push	{r7, lr}
   1549e:	b086      	sub	sp, #24
   154a0:	af00      	add	r7, sp, #0
   154a2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
   154a4:	687a      	ldr	r2, [r7, #4]
   154a6:	2308      	movs	r3, #8
   154a8:	18fb      	adds	r3, r7, r3
   154aa:	0011      	movs	r1, r2
   154ac:	0018      	movs	r0, r3
   154ae:	4bfe      	ldr	r3, [pc, #1016]	; (158a8 <mix_sub_columns+0x40c>)
   154b0:	4798      	blx	r3
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   154b2:	2308      	movs	r3, #8
   154b4:	18fb      	adds	r3, r7, r3
   154b6:	781b      	ldrb	r3, [r3, #0]
   154b8:	001a      	movs	r2, r3
   154ba:	4bfc      	ldr	r3, [pc, #1008]	; (158ac <mix_sub_columns+0x410>)
   154bc:	5c9a      	ldrb	r2, [r3, r2]
   154be:	2308      	movs	r3, #8
   154c0:	18fb      	adds	r3, r7, r3
   154c2:	795b      	ldrb	r3, [r3, #5]
   154c4:	0019      	movs	r1, r3
   154c6:	4bfa      	ldr	r3, [pc, #1000]	; (158b0 <mix_sub_columns+0x414>)
   154c8:	5c5b      	ldrb	r3, [r3, r1]
   154ca:	4053      	eors	r3, r2
   154cc:	b2da      	uxtb	r2, r3
   154ce:	2308      	movs	r3, #8
   154d0:	18fb      	adds	r3, r7, r3
   154d2:	7a9b      	ldrb	r3, [r3, #10]
   154d4:	0019      	movs	r1, r3
   154d6:	4bf7      	ldr	r3, [pc, #988]	; (158b4 <mix_sub_columns+0x418>)
   154d8:	5c5b      	ldrb	r3, [r3, r1]
   154da:	4053      	eors	r3, r2
   154dc:	b2da      	uxtb	r2, r3
   154de:	2308      	movs	r3, #8
   154e0:	18fb      	adds	r3, r7, r3
   154e2:	7bdb      	ldrb	r3, [r3, #15]
   154e4:	0019      	movs	r1, r3
   154e6:	4bf3      	ldr	r3, [pc, #972]	; (158b4 <mix_sub_columns+0x418>)
   154e8:	5c5b      	ldrb	r3, [r3, r1]
   154ea:	4053      	eors	r3, r2
   154ec:	b2da      	uxtb	r2, r3
   154ee:	687b      	ldr	r3, [r7, #4]
   154f0:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	3301      	adds	r3, #1
   154f6:	2208      	movs	r2, #8
   154f8:	18ba      	adds	r2, r7, r2
   154fa:	7812      	ldrb	r2, [r2, #0]
   154fc:	0011      	movs	r1, r2
   154fe:	4aed      	ldr	r2, [pc, #948]	; (158b4 <mix_sub_columns+0x418>)
   15500:	5c51      	ldrb	r1, [r2, r1]
   15502:	2208      	movs	r2, #8
   15504:	18ba      	adds	r2, r7, r2
   15506:	7952      	ldrb	r2, [r2, #5]
   15508:	0010      	movs	r0, r2
   1550a:	4ae8      	ldr	r2, [pc, #928]	; (158ac <mix_sub_columns+0x410>)
   1550c:	5c12      	ldrb	r2, [r2, r0]
   1550e:	404a      	eors	r2, r1
   15510:	b2d1      	uxtb	r1, r2
   15512:	2208      	movs	r2, #8
   15514:	18ba      	adds	r2, r7, r2
   15516:	7a92      	ldrb	r2, [r2, #10]
   15518:	0010      	movs	r0, r2
   1551a:	4ae5      	ldr	r2, [pc, #916]	; (158b0 <mix_sub_columns+0x414>)
   1551c:	5c12      	ldrb	r2, [r2, r0]
   1551e:	404a      	eors	r2, r1
   15520:	b2d1      	uxtb	r1, r2
   15522:	2208      	movs	r2, #8
   15524:	18ba      	adds	r2, r7, r2
   15526:	7bd2      	ldrb	r2, [r2, #15]
   15528:	0010      	movs	r0, r2
   1552a:	4ae2      	ldr	r2, [pc, #904]	; (158b4 <mix_sub_columns+0x418>)
   1552c:	5c12      	ldrb	r2, [r2, r0]
   1552e:	404a      	eors	r2, r1
   15530:	b2d2      	uxtb	r2, r2
   15532:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   15534:	687b      	ldr	r3, [r7, #4]
   15536:	3302      	adds	r3, #2
   15538:	2208      	movs	r2, #8
   1553a:	18ba      	adds	r2, r7, r2
   1553c:	7812      	ldrb	r2, [r2, #0]
   1553e:	0011      	movs	r1, r2
   15540:	4adc      	ldr	r2, [pc, #880]	; (158b4 <mix_sub_columns+0x418>)
   15542:	5c51      	ldrb	r1, [r2, r1]
   15544:	2208      	movs	r2, #8
   15546:	18ba      	adds	r2, r7, r2
   15548:	7952      	ldrb	r2, [r2, #5]
   1554a:	0010      	movs	r0, r2
   1554c:	4ad9      	ldr	r2, [pc, #868]	; (158b4 <mix_sub_columns+0x418>)
   1554e:	5c12      	ldrb	r2, [r2, r0]
   15550:	404a      	eors	r2, r1
   15552:	b2d1      	uxtb	r1, r2
   15554:	2208      	movs	r2, #8
   15556:	18ba      	adds	r2, r7, r2
   15558:	7a92      	ldrb	r2, [r2, #10]
   1555a:	0010      	movs	r0, r2
   1555c:	4ad3      	ldr	r2, [pc, #844]	; (158ac <mix_sub_columns+0x410>)
   1555e:	5c12      	ldrb	r2, [r2, r0]
   15560:	404a      	eors	r2, r1
   15562:	b2d1      	uxtb	r1, r2
   15564:	2208      	movs	r2, #8
   15566:	18ba      	adds	r2, r7, r2
   15568:	7bd2      	ldrb	r2, [r2, #15]
   1556a:	0010      	movs	r0, r2
   1556c:	4ad0      	ldr	r2, [pc, #832]	; (158b0 <mix_sub_columns+0x414>)
   1556e:	5c12      	ldrb	r2, [r2, r0]
   15570:	404a      	eors	r2, r1
   15572:	b2d2      	uxtb	r2, r2
   15574:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   15576:	687b      	ldr	r3, [r7, #4]
   15578:	3303      	adds	r3, #3
   1557a:	2208      	movs	r2, #8
   1557c:	18ba      	adds	r2, r7, r2
   1557e:	7812      	ldrb	r2, [r2, #0]
   15580:	0011      	movs	r1, r2
   15582:	4acb      	ldr	r2, [pc, #812]	; (158b0 <mix_sub_columns+0x414>)
   15584:	5c51      	ldrb	r1, [r2, r1]
   15586:	2208      	movs	r2, #8
   15588:	18ba      	adds	r2, r7, r2
   1558a:	7952      	ldrb	r2, [r2, #5]
   1558c:	0010      	movs	r0, r2
   1558e:	4ac9      	ldr	r2, [pc, #804]	; (158b4 <mix_sub_columns+0x418>)
   15590:	5c12      	ldrb	r2, [r2, r0]
   15592:	404a      	eors	r2, r1
   15594:	b2d1      	uxtb	r1, r2
   15596:	2208      	movs	r2, #8
   15598:	18ba      	adds	r2, r7, r2
   1559a:	7a92      	ldrb	r2, [r2, #10]
   1559c:	0010      	movs	r0, r2
   1559e:	4ac5      	ldr	r2, [pc, #788]	; (158b4 <mix_sub_columns+0x418>)
   155a0:	5c12      	ldrb	r2, [r2, r0]
   155a2:	404a      	eors	r2, r1
   155a4:	b2d1      	uxtb	r1, r2
   155a6:	2208      	movs	r2, #8
   155a8:	18ba      	adds	r2, r7, r2
   155aa:	7bd2      	ldrb	r2, [r2, #15]
   155ac:	0010      	movs	r0, r2
   155ae:	4abf      	ldr	r2, [pc, #764]	; (158ac <mix_sub_columns+0x410>)
   155b0:	5c12      	ldrb	r2, [r2, r0]
   155b2:	404a      	eors	r2, r1
   155b4:	b2d2      	uxtb	r2, r2
   155b6:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   155b8:	687b      	ldr	r3, [r7, #4]
   155ba:	3304      	adds	r3, #4
   155bc:	2208      	movs	r2, #8
   155be:	18ba      	adds	r2, r7, r2
   155c0:	7912      	ldrb	r2, [r2, #4]
   155c2:	0011      	movs	r1, r2
   155c4:	4ab9      	ldr	r2, [pc, #740]	; (158ac <mix_sub_columns+0x410>)
   155c6:	5c51      	ldrb	r1, [r2, r1]
   155c8:	2208      	movs	r2, #8
   155ca:	18ba      	adds	r2, r7, r2
   155cc:	7a52      	ldrb	r2, [r2, #9]
   155ce:	0010      	movs	r0, r2
   155d0:	4ab7      	ldr	r2, [pc, #732]	; (158b0 <mix_sub_columns+0x414>)
   155d2:	5c12      	ldrb	r2, [r2, r0]
   155d4:	404a      	eors	r2, r1
   155d6:	b2d1      	uxtb	r1, r2
   155d8:	2208      	movs	r2, #8
   155da:	18ba      	adds	r2, r7, r2
   155dc:	7b92      	ldrb	r2, [r2, #14]
   155de:	0010      	movs	r0, r2
   155e0:	4ab4      	ldr	r2, [pc, #720]	; (158b4 <mix_sub_columns+0x418>)
   155e2:	5c12      	ldrb	r2, [r2, r0]
   155e4:	404a      	eors	r2, r1
   155e6:	b2d1      	uxtb	r1, r2
   155e8:	2208      	movs	r2, #8
   155ea:	18ba      	adds	r2, r7, r2
   155ec:	78d2      	ldrb	r2, [r2, #3]
   155ee:	0010      	movs	r0, r2
   155f0:	4ab0      	ldr	r2, [pc, #704]	; (158b4 <mix_sub_columns+0x418>)
   155f2:	5c12      	ldrb	r2, [r2, r0]
   155f4:	404a      	eors	r2, r1
   155f6:	b2d2      	uxtb	r2, r2
   155f8:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
   155fa:	687b      	ldr	r3, [r7, #4]
   155fc:	3305      	adds	r3, #5
   155fe:	2208      	movs	r2, #8
   15600:	18ba      	adds	r2, r7, r2
   15602:	7912      	ldrb	r2, [r2, #4]
   15604:	0011      	movs	r1, r2
   15606:	4aab      	ldr	r2, [pc, #684]	; (158b4 <mix_sub_columns+0x418>)
   15608:	5c51      	ldrb	r1, [r2, r1]
   1560a:	2208      	movs	r2, #8
   1560c:	18ba      	adds	r2, r7, r2
   1560e:	7a52      	ldrb	r2, [r2, #9]
   15610:	0010      	movs	r0, r2
   15612:	4aa6      	ldr	r2, [pc, #664]	; (158ac <mix_sub_columns+0x410>)
   15614:	5c12      	ldrb	r2, [r2, r0]
   15616:	404a      	eors	r2, r1
   15618:	b2d1      	uxtb	r1, r2
   1561a:	2208      	movs	r2, #8
   1561c:	18ba      	adds	r2, r7, r2
   1561e:	7b92      	ldrb	r2, [r2, #14]
   15620:	0010      	movs	r0, r2
   15622:	4aa3      	ldr	r2, [pc, #652]	; (158b0 <mix_sub_columns+0x414>)
   15624:	5c12      	ldrb	r2, [r2, r0]
   15626:	404a      	eors	r2, r1
   15628:	b2d1      	uxtb	r1, r2
   1562a:	2208      	movs	r2, #8
   1562c:	18ba      	adds	r2, r7, r2
   1562e:	78d2      	ldrb	r2, [r2, #3]
   15630:	0010      	movs	r0, r2
   15632:	4aa0      	ldr	r2, [pc, #640]	; (158b4 <mix_sub_columns+0x418>)
   15634:	5c12      	ldrb	r2, [r2, r0]
   15636:	404a      	eors	r2, r1
   15638:	b2d2      	uxtb	r2, r2
   1563a:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
   1563c:	687b      	ldr	r3, [r7, #4]
   1563e:	3306      	adds	r3, #6
   15640:	2208      	movs	r2, #8
   15642:	18ba      	adds	r2, r7, r2
   15644:	7912      	ldrb	r2, [r2, #4]
   15646:	0011      	movs	r1, r2
   15648:	4a9a      	ldr	r2, [pc, #616]	; (158b4 <mix_sub_columns+0x418>)
   1564a:	5c51      	ldrb	r1, [r2, r1]
   1564c:	2208      	movs	r2, #8
   1564e:	18ba      	adds	r2, r7, r2
   15650:	7a52      	ldrb	r2, [r2, #9]
   15652:	0010      	movs	r0, r2
   15654:	4a97      	ldr	r2, [pc, #604]	; (158b4 <mix_sub_columns+0x418>)
   15656:	5c12      	ldrb	r2, [r2, r0]
   15658:	404a      	eors	r2, r1
   1565a:	b2d1      	uxtb	r1, r2
   1565c:	2208      	movs	r2, #8
   1565e:	18ba      	adds	r2, r7, r2
   15660:	7b92      	ldrb	r2, [r2, #14]
   15662:	0010      	movs	r0, r2
   15664:	4a91      	ldr	r2, [pc, #580]	; (158ac <mix_sub_columns+0x410>)
   15666:	5c12      	ldrb	r2, [r2, r0]
   15668:	404a      	eors	r2, r1
   1566a:	b2d1      	uxtb	r1, r2
   1566c:	2208      	movs	r2, #8
   1566e:	18ba      	adds	r2, r7, r2
   15670:	78d2      	ldrb	r2, [r2, #3]
   15672:	0010      	movs	r0, r2
   15674:	4a8e      	ldr	r2, [pc, #568]	; (158b0 <mix_sub_columns+0x414>)
   15676:	5c12      	ldrb	r2, [r2, r0]
   15678:	404a      	eors	r2, r1
   1567a:	b2d2      	uxtb	r2, r2
   1567c:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
   1567e:	687b      	ldr	r3, [r7, #4]
   15680:	3307      	adds	r3, #7
   15682:	2208      	movs	r2, #8
   15684:	18ba      	adds	r2, r7, r2
   15686:	7912      	ldrb	r2, [r2, #4]
   15688:	0011      	movs	r1, r2
   1568a:	4a89      	ldr	r2, [pc, #548]	; (158b0 <mix_sub_columns+0x414>)
   1568c:	5c51      	ldrb	r1, [r2, r1]
   1568e:	2208      	movs	r2, #8
   15690:	18ba      	adds	r2, r7, r2
   15692:	7a52      	ldrb	r2, [r2, #9]
   15694:	0010      	movs	r0, r2
   15696:	4a87      	ldr	r2, [pc, #540]	; (158b4 <mix_sub_columns+0x418>)
   15698:	5c12      	ldrb	r2, [r2, r0]
   1569a:	404a      	eors	r2, r1
   1569c:	b2d1      	uxtb	r1, r2
   1569e:	2208      	movs	r2, #8
   156a0:	18ba      	adds	r2, r7, r2
   156a2:	7b92      	ldrb	r2, [r2, #14]
   156a4:	0010      	movs	r0, r2
   156a6:	4a83      	ldr	r2, [pc, #524]	; (158b4 <mix_sub_columns+0x418>)
   156a8:	5c12      	ldrb	r2, [r2, r0]
   156aa:	404a      	eors	r2, r1
   156ac:	b2d1      	uxtb	r1, r2
   156ae:	2208      	movs	r2, #8
   156b0:	18ba      	adds	r2, r7, r2
   156b2:	78d2      	ldrb	r2, [r2, #3]
   156b4:	0010      	movs	r0, r2
   156b6:	4a7d      	ldr	r2, [pc, #500]	; (158ac <mix_sub_columns+0x410>)
   156b8:	5c12      	ldrb	r2, [r2, r0]
   156ba:	404a      	eors	r2, r1
   156bc:	b2d2      	uxtb	r2, r2
   156be:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   156c0:	687b      	ldr	r3, [r7, #4]
   156c2:	3308      	adds	r3, #8
   156c4:	2208      	movs	r2, #8
   156c6:	18ba      	adds	r2, r7, r2
   156c8:	7a12      	ldrb	r2, [r2, #8]
   156ca:	0011      	movs	r1, r2
   156cc:	4a77      	ldr	r2, [pc, #476]	; (158ac <mix_sub_columns+0x410>)
   156ce:	5c51      	ldrb	r1, [r2, r1]
   156d0:	2208      	movs	r2, #8
   156d2:	18ba      	adds	r2, r7, r2
   156d4:	7b52      	ldrb	r2, [r2, #13]
   156d6:	0010      	movs	r0, r2
   156d8:	4a75      	ldr	r2, [pc, #468]	; (158b0 <mix_sub_columns+0x414>)
   156da:	5c12      	ldrb	r2, [r2, r0]
   156dc:	404a      	eors	r2, r1
   156de:	b2d1      	uxtb	r1, r2
   156e0:	2208      	movs	r2, #8
   156e2:	18ba      	adds	r2, r7, r2
   156e4:	7892      	ldrb	r2, [r2, #2]
   156e6:	0010      	movs	r0, r2
   156e8:	4a72      	ldr	r2, [pc, #456]	; (158b4 <mix_sub_columns+0x418>)
   156ea:	5c12      	ldrb	r2, [r2, r0]
   156ec:	404a      	eors	r2, r1
   156ee:	b2d1      	uxtb	r1, r2
   156f0:	2208      	movs	r2, #8
   156f2:	18ba      	adds	r2, r7, r2
   156f4:	79d2      	ldrb	r2, [r2, #7]
   156f6:	0010      	movs	r0, r2
   156f8:	4a6e      	ldr	r2, [pc, #440]	; (158b4 <mix_sub_columns+0x418>)
   156fa:	5c12      	ldrb	r2, [r2, r0]
   156fc:	404a      	eors	r2, r1
   156fe:	b2d2      	uxtb	r2, r2
   15700:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
   15702:	687b      	ldr	r3, [r7, #4]
   15704:	3309      	adds	r3, #9
   15706:	2208      	movs	r2, #8
   15708:	18ba      	adds	r2, r7, r2
   1570a:	7a12      	ldrb	r2, [r2, #8]
   1570c:	0011      	movs	r1, r2
   1570e:	4a69      	ldr	r2, [pc, #420]	; (158b4 <mix_sub_columns+0x418>)
   15710:	5c51      	ldrb	r1, [r2, r1]
   15712:	2208      	movs	r2, #8
   15714:	18ba      	adds	r2, r7, r2
   15716:	7b52      	ldrb	r2, [r2, #13]
   15718:	0010      	movs	r0, r2
   1571a:	4a64      	ldr	r2, [pc, #400]	; (158ac <mix_sub_columns+0x410>)
   1571c:	5c12      	ldrb	r2, [r2, r0]
   1571e:	404a      	eors	r2, r1
   15720:	b2d1      	uxtb	r1, r2
   15722:	2208      	movs	r2, #8
   15724:	18ba      	adds	r2, r7, r2
   15726:	7892      	ldrb	r2, [r2, #2]
   15728:	0010      	movs	r0, r2
   1572a:	4a61      	ldr	r2, [pc, #388]	; (158b0 <mix_sub_columns+0x414>)
   1572c:	5c12      	ldrb	r2, [r2, r0]
   1572e:	404a      	eors	r2, r1
   15730:	b2d1      	uxtb	r1, r2
   15732:	2208      	movs	r2, #8
   15734:	18ba      	adds	r2, r7, r2
   15736:	79d2      	ldrb	r2, [r2, #7]
   15738:	0010      	movs	r0, r2
   1573a:	4a5e      	ldr	r2, [pc, #376]	; (158b4 <mix_sub_columns+0x418>)
   1573c:	5c12      	ldrb	r2, [r2, r0]
   1573e:	404a      	eors	r2, r1
   15740:	b2d2      	uxtb	r2, r2
   15742:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
   15744:	687b      	ldr	r3, [r7, #4]
   15746:	330a      	adds	r3, #10
   15748:	2208      	movs	r2, #8
   1574a:	18ba      	adds	r2, r7, r2
   1574c:	7a12      	ldrb	r2, [r2, #8]
   1574e:	0011      	movs	r1, r2
   15750:	4a58      	ldr	r2, [pc, #352]	; (158b4 <mix_sub_columns+0x418>)
   15752:	5c51      	ldrb	r1, [r2, r1]
   15754:	2208      	movs	r2, #8
   15756:	18ba      	adds	r2, r7, r2
   15758:	7b52      	ldrb	r2, [r2, #13]
   1575a:	0010      	movs	r0, r2
   1575c:	4a55      	ldr	r2, [pc, #340]	; (158b4 <mix_sub_columns+0x418>)
   1575e:	5c12      	ldrb	r2, [r2, r0]
   15760:	404a      	eors	r2, r1
   15762:	b2d1      	uxtb	r1, r2
   15764:	2208      	movs	r2, #8
   15766:	18ba      	adds	r2, r7, r2
   15768:	7892      	ldrb	r2, [r2, #2]
   1576a:	0010      	movs	r0, r2
   1576c:	4a4f      	ldr	r2, [pc, #316]	; (158ac <mix_sub_columns+0x410>)
   1576e:	5c12      	ldrb	r2, [r2, r0]
   15770:	404a      	eors	r2, r1
   15772:	b2d1      	uxtb	r1, r2
   15774:	2208      	movs	r2, #8
   15776:	18ba      	adds	r2, r7, r2
   15778:	79d2      	ldrb	r2, [r2, #7]
   1577a:	0010      	movs	r0, r2
   1577c:	4a4c      	ldr	r2, [pc, #304]	; (158b0 <mix_sub_columns+0x414>)
   1577e:	5c12      	ldrb	r2, [r2, r0]
   15780:	404a      	eors	r2, r1
   15782:	b2d2      	uxtb	r2, r2
   15784:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   15786:	687b      	ldr	r3, [r7, #4]
   15788:	330b      	adds	r3, #11
   1578a:	2208      	movs	r2, #8
   1578c:	18ba      	adds	r2, r7, r2
   1578e:	7a12      	ldrb	r2, [r2, #8]
   15790:	0011      	movs	r1, r2
   15792:	4a47      	ldr	r2, [pc, #284]	; (158b0 <mix_sub_columns+0x414>)
   15794:	5c51      	ldrb	r1, [r2, r1]
   15796:	2208      	movs	r2, #8
   15798:	18ba      	adds	r2, r7, r2
   1579a:	7b52      	ldrb	r2, [r2, #13]
   1579c:	0010      	movs	r0, r2
   1579e:	4a45      	ldr	r2, [pc, #276]	; (158b4 <mix_sub_columns+0x418>)
   157a0:	5c12      	ldrb	r2, [r2, r0]
   157a2:	404a      	eors	r2, r1
   157a4:	b2d1      	uxtb	r1, r2
   157a6:	2208      	movs	r2, #8
   157a8:	18ba      	adds	r2, r7, r2
   157aa:	7892      	ldrb	r2, [r2, #2]
   157ac:	0010      	movs	r0, r2
   157ae:	4a41      	ldr	r2, [pc, #260]	; (158b4 <mix_sub_columns+0x418>)
   157b0:	5c12      	ldrb	r2, [r2, r0]
   157b2:	404a      	eors	r2, r1
   157b4:	b2d1      	uxtb	r1, r2
   157b6:	2208      	movs	r2, #8
   157b8:	18ba      	adds	r2, r7, r2
   157ba:	79d2      	ldrb	r2, [r2, #7]
   157bc:	0010      	movs	r0, r2
   157be:	4a3b      	ldr	r2, [pc, #236]	; (158ac <mix_sub_columns+0x410>)
   157c0:	5c12      	ldrb	r2, [r2, r0]
   157c2:	404a      	eors	r2, r1
   157c4:	b2d2      	uxtb	r2, r2
   157c6:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   157c8:	687b      	ldr	r3, [r7, #4]
   157ca:	330c      	adds	r3, #12
   157cc:	2208      	movs	r2, #8
   157ce:	18ba      	adds	r2, r7, r2
   157d0:	7b12      	ldrb	r2, [r2, #12]
   157d2:	0011      	movs	r1, r2
   157d4:	4a35      	ldr	r2, [pc, #212]	; (158ac <mix_sub_columns+0x410>)
   157d6:	5c51      	ldrb	r1, [r2, r1]
   157d8:	2208      	movs	r2, #8
   157da:	18ba      	adds	r2, r7, r2
   157dc:	7852      	ldrb	r2, [r2, #1]
   157de:	0010      	movs	r0, r2
   157e0:	4a33      	ldr	r2, [pc, #204]	; (158b0 <mix_sub_columns+0x414>)
   157e2:	5c12      	ldrb	r2, [r2, r0]
   157e4:	404a      	eors	r2, r1
   157e6:	b2d1      	uxtb	r1, r2
   157e8:	2208      	movs	r2, #8
   157ea:	18ba      	adds	r2, r7, r2
   157ec:	7992      	ldrb	r2, [r2, #6]
   157ee:	0010      	movs	r0, r2
   157f0:	4a30      	ldr	r2, [pc, #192]	; (158b4 <mix_sub_columns+0x418>)
   157f2:	5c12      	ldrb	r2, [r2, r0]
   157f4:	404a      	eors	r2, r1
   157f6:	b2d1      	uxtb	r1, r2
   157f8:	2208      	movs	r2, #8
   157fa:	18ba      	adds	r2, r7, r2
   157fc:	7ad2      	ldrb	r2, [r2, #11]
   157fe:	0010      	movs	r0, r2
   15800:	4a2c      	ldr	r2, [pc, #176]	; (158b4 <mix_sub_columns+0x418>)
   15802:	5c12      	ldrb	r2, [r2, r0]
   15804:	404a      	eors	r2, r1
   15806:	b2d2      	uxtb	r2, r2
   15808:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
   1580a:	687b      	ldr	r3, [r7, #4]
   1580c:	330d      	adds	r3, #13
   1580e:	2208      	movs	r2, #8
   15810:	18ba      	adds	r2, r7, r2
   15812:	7b12      	ldrb	r2, [r2, #12]
   15814:	0011      	movs	r1, r2
   15816:	4a27      	ldr	r2, [pc, #156]	; (158b4 <mix_sub_columns+0x418>)
   15818:	5c51      	ldrb	r1, [r2, r1]
   1581a:	2208      	movs	r2, #8
   1581c:	18ba      	adds	r2, r7, r2
   1581e:	7852      	ldrb	r2, [r2, #1]
   15820:	0010      	movs	r0, r2
   15822:	4a22      	ldr	r2, [pc, #136]	; (158ac <mix_sub_columns+0x410>)
   15824:	5c12      	ldrb	r2, [r2, r0]
   15826:	404a      	eors	r2, r1
   15828:	b2d1      	uxtb	r1, r2
   1582a:	2208      	movs	r2, #8
   1582c:	18ba      	adds	r2, r7, r2
   1582e:	7992      	ldrb	r2, [r2, #6]
   15830:	0010      	movs	r0, r2
   15832:	4a1f      	ldr	r2, [pc, #124]	; (158b0 <mix_sub_columns+0x414>)
   15834:	5c12      	ldrb	r2, [r2, r0]
   15836:	404a      	eors	r2, r1
   15838:	b2d1      	uxtb	r1, r2
   1583a:	2208      	movs	r2, #8
   1583c:	18ba      	adds	r2, r7, r2
   1583e:	7ad2      	ldrb	r2, [r2, #11]
   15840:	0010      	movs	r0, r2
   15842:	4a1c      	ldr	r2, [pc, #112]	; (158b4 <mix_sub_columns+0x418>)
   15844:	5c12      	ldrb	r2, [r2, r0]
   15846:	404a      	eors	r2, r1
   15848:	b2d2      	uxtb	r2, r2
   1584a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
   1584c:	687b      	ldr	r3, [r7, #4]
   1584e:	330e      	adds	r3, #14
   15850:	2208      	movs	r2, #8
   15852:	18ba      	adds	r2, r7, r2
   15854:	7b12      	ldrb	r2, [r2, #12]
   15856:	0011      	movs	r1, r2
   15858:	4a16      	ldr	r2, [pc, #88]	; (158b4 <mix_sub_columns+0x418>)
   1585a:	5c51      	ldrb	r1, [r2, r1]
   1585c:	2208      	movs	r2, #8
   1585e:	18ba      	adds	r2, r7, r2
   15860:	7852      	ldrb	r2, [r2, #1]
   15862:	0010      	movs	r0, r2
   15864:	4a13      	ldr	r2, [pc, #76]	; (158b4 <mix_sub_columns+0x418>)
   15866:	5c12      	ldrb	r2, [r2, r0]
   15868:	404a      	eors	r2, r1
   1586a:	b2d1      	uxtb	r1, r2
   1586c:	2208      	movs	r2, #8
   1586e:	18ba      	adds	r2, r7, r2
   15870:	7992      	ldrb	r2, [r2, #6]
   15872:	0010      	movs	r0, r2
   15874:	4a0d      	ldr	r2, [pc, #52]	; (158ac <mix_sub_columns+0x410>)
   15876:	5c12      	ldrb	r2, [r2, r0]
   15878:	404a      	eors	r2, r1
   1587a:	b2d1      	uxtb	r1, r2
   1587c:	2208      	movs	r2, #8
   1587e:	18ba      	adds	r2, r7, r2
   15880:	7ad2      	ldrb	r2, [r2, #11]
   15882:	0010      	movs	r0, r2
   15884:	4a0a      	ldr	r2, [pc, #40]	; (158b0 <mix_sub_columns+0x414>)
   15886:	5c12      	ldrb	r2, [r2, r0]
   15888:	404a      	eors	r2, r1
   1588a:	b2d2      	uxtb	r2, r2
   1588c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
   1588e:	687b      	ldr	r3, [r7, #4]
   15890:	330f      	adds	r3, #15
   15892:	2208      	movs	r2, #8
   15894:	18ba      	adds	r2, r7, r2
   15896:	7b12      	ldrb	r2, [r2, #12]
   15898:	0011      	movs	r1, r2
   1589a:	4a05      	ldr	r2, [pc, #20]	; (158b0 <mix_sub_columns+0x414>)
   1589c:	5c51      	ldrb	r1, [r2, r1]
   1589e:	2208      	movs	r2, #8
   158a0:	18ba      	adds	r2, r7, r2
   158a2:	7852      	ldrb	r2, [r2, #1]
   158a4:	0010      	movs	r0, r2
   158a6:	e007      	b.n	158b8 <mix_sub_columns+0x41c>
   158a8:	00014f69 	.word	0x00014f69
   158ac:	0001f9f4 	.word	0x0001f9f4
   158b0:	0001faf4 	.word	0x0001faf4
   158b4:	0001f8f4 	.word	0x0001f8f4
   158b8:	4a0c      	ldr	r2, [pc, #48]	; (158ec <mix_sub_columns+0x450>)
   158ba:	5c12      	ldrb	r2, [r2, r0]
   158bc:	404a      	eors	r2, r1
   158be:	b2d1      	uxtb	r1, r2
   158c0:	2208      	movs	r2, #8
   158c2:	18ba      	adds	r2, r7, r2
   158c4:	7992      	ldrb	r2, [r2, #6]
   158c6:	0010      	movs	r0, r2
   158c8:	4a08      	ldr	r2, [pc, #32]	; (158ec <mix_sub_columns+0x450>)
   158ca:	5c12      	ldrb	r2, [r2, r0]
   158cc:	404a      	eors	r2, r1
   158ce:	b2d1      	uxtb	r1, r2
   158d0:	2208      	movs	r2, #8
   158d2:	18ba      	adds	r2, r7, r2
   158d4:	7ad2      	ldrb	r2, [r2, #11]
   158d6:	0010      	movs	r0, r2
   158d8:	4a05      	ldr	r2, [pc, #20]	; (158f0 <mix_sub_columns+0x454>)
   158da:	5c12      	ldrb	r2, [r2, r0]
   158dc:	404a      	eors	r2, r1
   158de:	b2d2      	uxtb	r2, r2
   158e0:	701a      	strb	r2, [r3, #0]
  }
   158e2:	46c0      	nop			; (mov r8, r8)
   158e4:	46bd      	mov	sp, r7
   158e6:	b006      	add	sp, #24
   158e8:	bd80      	pop	{r7, pc}
   158ea:	46c0      	nop			; (mov r8, r8)
   158ec:	0001f8f4 	.word	0x0001f8f4
   158f0:	0001f9f4 	.word	0x0001f9f4

000158f4 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
   158f4:	b580      	push	{r7, lr}
   158f6:	b086      	sub	sp, #24
   158f8:	af00      	add	r7, sp, #0
   158fa:	60f8      	str	r0, [r7, #12]
   158fc:	607a      	str	r2, [r7, #4]
   158fe:	230b      	movs	r3, #11
   15900:	18fb      	adds	r3, r7, r3
   15902:	1c0a      	adds	r2, r1, #0
   15904:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
   15906:	230b      	movs	r3, #11
   15908:	18fb      	adds	r3, r7, r3
   1590a:	781b      	ldrb	r3, [r3, #0]
   1590c:	2b18      	cmp	r3, #24
   1590e:	d009      	beq.n	15924 <aes_set_key+0x30>
   15910:	2b20      	cmp	r3, #32
   15912:	d007      	beq.n	15924 <aes_set_key+0x30>
   15914:	2b10      	cmp	r3, #16
   15916:	d005      	beq.n	15924 <aes_set_key+0x30>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	22f0      	movs	r2, #240	; 0xf0
   1591c:	2100      	movs	r1, #0
   1591e:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
   15920:	23ff      	movs	r3, #255	; 0xff
   15922:	e12b      	b.n	15b7c <aes_set_key+0x288>
        break;
   15924:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
   15926:	6878      	ldr	r0, [r7, #4]
   15928:	230b      	movs	r3, #11
   1592a:	18fb      	adds	r3, r7, r3
   1592c:	781a      	ldrb	r2, [r3, #0]
   1592e:	68fb      	ldr	r3, [r7, #12]
   15930:	0019      	movs	r1, r3
   15932:	4b94      	ldr	r3, [pc, #592]	; (15b84 <aes_set_key+0x290>)
   15934:	4798      	blx	r3
    hi = (keylen + 28) << 2;
   15936:	230b      	movs	r3, #11
   15938:	18fb      	adds	r3, r7, r3
   1593a:	781b      	ldrb	r3, [r3, #0]
   1593c:	331c      	adds	r3, #28
   1593e:	b2da      	uxtb	r2, r3
   15940:	2311      	movs	r3, #17
   15942:	18fb      	adds	r3, r7, r3
   15944:	0092      	lsls	r2, r2, #2
   15946:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
   15948:	2311      	movs	r3, #17
   1594a:	18fb      	adds	r3, r7, r3
   1594c:	781b      	ldrb	r3, [r3, #0]
   1594e:	091b      	lsrs	r3, r3, #4
   15950:	b2db      	uxtb	r3, r3
   15952:	3b01      	subs	r3, #1
   15954:	b2d9      	uxtb	r1, r3
   15956:	687b      	ldr	r3, [r7, #4]
   15958:	22f0      	movs	r2, #240	; 0xf0
   1595a:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1595c:	2317      	movs	r3, #23
   1595e:	18fb      	adds	r3, r7, r3
   15960:	220b      	movs	r2, #11
   15962:	18ba      	adds	r2, r7, r2
   15964:	7812      	ldrb	r2, [r2, #0]
   15966:	701a      	strb	r2, [r3, #0]
   15968:	2316      	movs	r3, #22
   1596a:	18fb      	adds	r3, r7, r3
   1596c:	2201      	movs	r2, #1
   1596e:	701a      	strb	r2, [r3, #0]
   15970:	e0fa      	b.n	15b68 <aes_set_key+0x274>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
   15972:	2317      	movs	r3, #23
   15974:	18fb      	adds	r3, r7, r3
   15976:	781b      	ldrb	r3, [r3, #0]
   15978:	1f1a      	subs	r2, r3, #4
   1597a:	2315      	movs	r3, #21
   1597c:	18fb      	adds	r3, r7, r3
   1597e:	6879      	ldr	r1, [r7, #4]
   15980:	5c8a      	ldrb	r2, [r1, r2]
   15982:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
   15984:	2317      	movs	r3, #23
   15986:	18fb      	adds	r3, r7, r3
   15988:	781b      	ldrb	r3, [r3, #0]
   1598a:	1eda      	subs	r2, r3, #3
   1598c:	2314      	movs	r3, #20
   1598e:	18fb      	adds	r3, r7, r3
   15990:	6879      	ldr	r1, [r7, #4]
   15992:	5c8a      	ldrb	r2, [r1, r2]
   15994:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
   15996:	2317      	movs	r3, #23
   15998:	18fb      	adds	r3, r7, r3
   1599a:	781b      	ldrb	r3, [r3, #0]
   1599c:	1e9a      	subs	r2, r3, #2
   1599e:	2313      	movs	r3, #19
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	6879      	ldr	r1, [r7, #4]
   159a4:	5c8a      	ldrb	r2, [r1, r2]
   159a6:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
   159a8:	2317      	movs	r3, #23
   159aa:	18fb      	adds	r3, r7, r3
   159ac:	781b      	ldrb	r3, [r3, #0]
   159ae:	1e5a      	subs	r2, r3, #1
   159b0:	2312      	movs	r3, #18
   159b2:	18fb      	adds	r3, r7, r3
   159b4:	6879      	ldr	r1, [r7, #4]
   159b6:	5c8a      	ldrb	r2, [r1, r2]
   159b8:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
   159ba:	2317      	movs	r3, #23
   159bc:	18fa      	adds	r2, r7, r3
   159be:	230b      	movs	r3, #11
   159c0:	18fb      	adds	r3, r7, r3
   159c2:	7812      	ldrb	r2, [r2, #0]
   159c4:	7819      	ldrb	r1, [r3, #0]
   159c6:	4b70      	ldr	r3, [pc, #448]	; (15b88 <aes_set_key+0x294>)
   159c8:	0010      	movs	r0, r2
   159ca:	4798      	blx	r3
   159cc:	000b      	movs	r3, r1
   159ce:	b2db      	uxtb	r3, r3
   159d0:	2b00      	cmp	r3, #0
   159d2:	d144      	bne.n	15a5e <aes_set_key+0x16a>
        {
            tt = t0;
   159d4:	2310      	movs	r3, #16
   159d6:	18fb      	adds	r3, r7, r3
   159d8:	2215      	movs	r2, #21
   159da:	18ba      	adds	r2, r7, r2
   159dc:	7812      	ldrb	r2, [r2, #0]
   159de:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
   159e0:	2314      	movs	r3, #20
   159e2:	18fb      	adds	r3, r7, r3
   159e4:	781b      	ldrb	r3, [r3, #0]
   159e6:	4a69      	ldr	r2, [pc, #420]	; (15b8c <aes_set_key+0x298>)
   159e8:	5cd1      	ldrb	r1, [r2, r3]
   159ea:	2315      	movs	r3, #21
   159ec:	18fb      	adds	r3, r7, r3
   159ee:	2216      	movs	r2, #22
   159f0:	18ba      	adds	r2, r7, r2
   159f2:	7812      	ldrb	r2, [r2, #0]
   159f4:	404a      	eors	r2, r1
   159f6:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
   159f8:	2313      	movs	r3, #19
   159fa:	18fb      	adds	r3, r7, r3
   159fc:	781a      	ldrb	r2, [r3, #0]
   159fe:	2314      	movs	r3, #20
   15a00:	18fb      	adds	r3, r7, r3
   15a02:	4962      	ldr	r1, [pc, #392]	; (15b8c <aes_set_key+0x298>)
   15a04:	5c8a      	ldrb	r2, [r1, r2]
   15a06:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
   15a08:	2312      	movs	r3, #18
   15a0a:	18fb      	adds	r3, r7, r3
   15a0c:	781a      	ldrb	r2, [r3, #0]
   15a0e:	2313      	movs	r3, #19
   15a10:	18fb      	adds	r3, r7, r3
   15a12:	495e      	ldr	r1, [pc, #376]	; (15b8c <aes_set_key+0x298>)
   15a14:	5c8a      	ldrb	r2, [r1, r2]
   15a16:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
   15a18:	2310      	movs	r3, #16
   15a1a:	18fb      	adds	r3, r7, r3
   15a1c:	781a      	ldrb	r2, [r3, #0]
   15a1e:	2312      	movs	r3, #18
   15a20:	18fb      	adds	r3, r7, r3
   15a22:	495a      	ldr	r1, [pc, #360]	; (15b8c <aes_set_key+0x298>)
   15a24:	5c8a      	ldrb	r2, [r1, r2]
   15a26:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
   15a28:	2316      	movs	r3, #22
   15a2a:	18fb      	adds	r3, r7, r3
   15a2c:	781b      	ldrb	r3, [r3, #0]
   15a2e:	005b      	lsls	r3, r3, #1
   15a30:	b25a      	sxtb	r2, r3
   15a32:	2316      	movs	r3, #22
   15a34:	18fb      	adds	r3, r7, r3
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	09db      	lsrs	r3, r3, #7
   15a3a:	b2db      	uxtb	r3, r3
   15a3c:	1c19      	adds	r1, r3, #0
   15a3e:	1c0b      	adds	r3, r1, #0
   15a40:	18db      	adds	r3, r3, r3
   15a42:	185b      	adds	r3, r3, r1
   15a44:	1c19      	adds	r1, r3, #0
   15a46:	00c8      	lsls	r0, r1, #3
   15a48:	1c19      	adds	r1, r3, #0
   15a4a:	1c03      	adds	r3, r0, #0
   15a4c:	18cb      	adds	r3, r1, r3
   15a4e:	b2db      	uxtb	r3, r3
   15a50:	b25b      	sxtb	r3, r3
   15a52:	4053      	eors	r3, r2
   15a54:	b25a      	sxtb	r2, r3
   15a56:	2316      	movs	r3, #22
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	701a      	strb	r2, [r3, #0]
   15a5c:	e031      	b.n	15ac2 <aes_set_key+0x1ce>
        }
        else if( keylen > 24 && cc % keylen == 16 )
   15a5e:	230b      	movs	r3, #11
   15a60:	18fb      	adds	r3, r7, r3
   15a62:	781b      	ldrb	r3, [r3, #0]
   15a64:	2b18      	cmp	r3, #24
   15a66:	d92c      	bls.n	15ac2 <aes_set_key+0x1ce>
   15a68:	2317      	movs	r3, #23
   15a6a:	18fa      	adds	r2, r7, r3
   15a6c:	230b      	movs	r3, #11
   15a6e:	18fb      	adds	r3, r7, r3
   15a70:	7812      	ldrb	r2, [r2, #0]
   15a72:	7819      	ldrb	r1, [r3, #0]
   15a74:	4b44      	ldr	r3, [pc, #272]	; (15b88 <aes_set_key+0x294>)
   15a76:	0010      	movs	r0, r2
   15a78:	4798      	blx	r3
   15a7a:	000b      	movs	r3, r1
   15a7c:	b2db      	uxtb	r3, r3
   15a7e:	2b10      	cmp	r3, #16
   15a80:	d11f      	bne.n	15ac2 <aes_set_key+0x1ce>
        {
            t0 = s_box(t0);
   15a82:	2315      	movs	r3, #21
   15a84:	18fb      	adds	r3, r7, r3
   15a86:	781a      	ldrb	r2, [r3, #0]
   15a88:	2315      	movs	r3, #21
   15a8a:	18fb      	adds	r3, r7, r3
   15a8c:	493f      	ldr	r1, [pc, #252]	; (15b8c <aes_set_key+0x298>)
   15a8e:	5c8a      	ldrb	r2, [r1, r2]
   15a90:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
   15a92:	2314      	movs	r3, #20
   15a94:	18fb      	adds	r3, r7, r3
   15a96:	781a      	ldrb	r2, [r3, #0]
   15a98:	2314      	movs	r3, #20
   15a9a:	18fb      	adds	r3, r7, r3
   15a9c:	493b      	ldr	r1, [pc, #236]	; (15b8c <aes_set_key+0x298>)
   15a9e:	5c8a      	ldrb	r2, [r1, r2]
   15aa0:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
   15aa2:	2313      	movs	r3, #19
   15aa4:	18fb      	adds	r3, r7, r3
   15aa6:	781a      	ldrb	r2, [r3, #0]
   15aa8:	2313      	movs	r3, #19
   15aaa:	18fb      	adds	r3, r7, r3
   15aac:	4937      	ldr	r1, [pc, #220]	; (15b8c <aes_set_key+0x298>)
   15aae:	5c8a      	ldrb	r2, [r1, r2]
   15ab0:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
   15ab2:	2312      	movs	r3, #18
   15ab4:	18fb      	adds	r3, r7, r3
   15ab6:	781a      	ldrb	r2, [r3, #0]
   15ab8:	2312      	movs	r3, #18
   15aba:	18fb      	adds	r3, r7, r3
   15abc:	4933      	ldr	r1, [pc, #204]	; (15b8c <aes_set_key+0x298>)
   15abe:	5c8a      	ldrb	r2, [r1, r2]
   15ac0:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
   15ac2:	2310      	movs	r3, #16
   15ac4:	18fb      	adds	r3, r7, r3
   15ac6:	2217      	movs	r2, #23
   15ac8:	18b9      	adds	r1, r7, r2
   15aca:	220b      	movs	r2, #11
   15acc:	18ba      	adds	r2, r7, r2
   15ace:	7809      	ldrb	r1, [r1, #0]
   15ad0:	7812      	ldrb	r2, [r2, #0]
   15ad2:	1a8a      	subs	r2, r1, r2
   15ad4:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   15ad6:	2317      	movs	r3, #23
   15ad8:	18fb      	adds	r3, r7, r3
   15ada:	781b      	ldrb	r3, [r3, #0]
   15adc:	2210      	movs	r2, #16
   15ade:	18ba      	adds	r2, r7, r2
   15ae0:	7812      	ldrb	r2, [r2, #0]
   15ae2:	6879      	ldr	r1, [r7, #4]
   15ae4:	5c89      	ldrb	r1, [r1, r2]
   15ae6:	2215      	movs	r2, #21
   15ae8:	18ba      	adds	r2, r7, r2
   15aea:	7812      	ldrb	r2, [r2, #0]
   15aec:	404a      	eors	r2, r1
   15aee:	b2d1      	uxtb	r1, r2
   15af0:	687a      	ldr	r2, [r7, #4]
   15af2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   15af4:	2317      	movs	r3, #23
   15af6:	18fb      	adds	r3, r7, r3
   15af8:	781b      	ldrb	r3, [r3, #0]
   15afa:	3301      	adds	r3, #1
   15afc:	2210      	movs	r2, #16
   15afe:	18ba      	adds	r2, r7, r2
   15b00:	7812      	ldrb	r2, [r2, #0]
   15b02:	3201      	adds	r2, #1
   15b04:	6879      	ldr	r1, [r7, #4]
   15b06:	5c89      	ldrb	r1, [r1, r2]
   15b08:	2214      	movs	r2, #20
   15b0a:	18ba      	adds	r2, r7, r2
   15b0c:	7812      	ldrb	r2, [r2, #0]
   15b0e:	404a      	eors	r2, r1
   15b10:	b2d1      	uxtb	r1, r2
   15b12:	687a      	ldr	r2, [r7, #4]
   15b14:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   15b16:	2317      	movs	r3, #23
   15b18:	18fb      	adds	r3, r7, r3
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	3302      	adds	r3, #2
   15b1e:	2210      	movs	r2, #16
   15b20:	18ba      	adds	r2, r7, r2
   15b22:	7812      	ldrb	r2, [r2, #0]
   15b24:	3202      	adds	r2, #2
   15b26:	6879      	ldr	r1, [r7, #4]
   15b28:	5c89      	ldrb	r1, [r1, r2]
   15b2a:	2213      	movs	r2, #19
   15b2c:	18ba      	adds	r2, r7, r2
   15b2e:	7812      	ldrb	r2, [r2, #0]
   15b30:	404a      	eors	r2, r1
   15b32:	b2d1      	uxtb	r1, r2
   15b34:	687a      	ldr	r2, [r7, #4]
   15b36:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   15b38:	2317      	movs	r3, #23
   15b3a:	18fb      	adds	r3, r7, r3
   15b3c:	781b      	ldrb	r3, [r3, #0]
   15b3e:	3303      	adds	r3, #3
   15b40:	2210      	movs	r2, #16
   15b42:	18ba      	adds	r2, r7, r2
   15b44:	7812      	ldrb	r2, [r2, #0]
   15b46:	3203      	adds	r2, #3
   15b48:	6879      	ldr	r1, [r7, #4]
   15b4a:	5c89      	ldrb	r1, [r1, r2]
   15b4c:	2212      	movs	r2, #18
   15b4e:	18ba      	adds	r2, r7, r2
   15b50:	7812      	ldrb	r2, [r2, #0]
   15b52:	404a      	eors	r2, r1
   15b54:	b2d1      	uxtb	r1, r2
   15b56:	687a      	ldr	r2, [r7, #4]
   15b58:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   15b5a:	2317      	movs	r3, #23
   15b5c:	18fb      	adds	r3, r7, r3
   15b5e:	2217      	movs	r2, #23
   15b60:	18ba      	adds	r2, r7, r2
   15b62:	7812      	ldrb	r2, [r2, #0]
   15b64:	3204      	adds	r2, #4
   15b66:	701a      	strb	r2, [r3, #0]
   15b68:	2317      	movs	r3, #23
   15b6a:	18fa      	adds	r2, r7, r3
   15b6c:	2311      	movs	r3, #17
   15b6e:	18fb      	adds	r3, r7, r3
   15b70:	7812      	ldrb	r2, [r2, #0]
   15b72:	781b      	ldrb	r3, [r3, #0]
   15b74:	429a      	cmp	r2, r3
   15b76:	d200      	bcs.n	15b7a <aes_set_key+0x286>
   15b78:	e6fb      	b.n	15972 <aes_set_key+0x7e>
    }
    return 0;
   15b7a:	2300      	movs	r3, #0
}
   15b7c:	0018      	movs	r0, r3
   15b7e:	46bd      	mov	sp, r7
   15b80:	b006      	add	sp, #24
   15b82:	bd80      	pop	{r7, pc}
   15b84:	00015019 	.word	0x00015019
   15b88:	00017761 	.word	0x00017761
   15b8c:	0001f8f4 	.word	0x0001f8f4

00015b90 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
   15b90:	b580      	push	{r7, lr}
   15b92:	b08a      	sub	sp, #40	; 0x28
   15b94:	af00      	add	r7, sp, #0
   15b96:	60f8      	str	r0, [r7, #12]
   15b98:	60b9      	str	r1, [r7, #8]
   15b9a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
   15b9c:	687b      	ldr	r3, [r7, #4]
   15b9e:	22f0      	movs	r2, #240	; 0xf0
   15ba0:	5c9b      	ldrb	r3, [r3, r2]
   15ba2:	2b00      	cmp	r3, #0
   15ba4:	d03e      	beq.n	15c24 <aes_encrypt+0x94>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
   15ba6:	687a      	ldr	r2, [r7, #4]
   15ba8:	68f9      	ldr	r1, [r7, #12]
   15baa:	2314      	movs	r3, #20
   15bac:	18fb      	adds	r3, r7, r3
   15bae:	0018      	movs	r0, r3
   15bb0:	4b1f      	ldr	r3, [pc, #124]	; (15c30 <aes_encrypt+0xa0>)
   15bb2:	4798      	blx	r3

        for( r = 1 ; r < ctx->rnd ; ++r )
   15bb4:	2327      	movs	r3, #39	; 0x27
   15bb6:	18fb      	adds	r3, r7, r3
   15bb8:	2201      	movs	r2, #1
   15bba:	701a      	strb	r2, [r3, #0]
   15bbc:	e017      	b.n	15bee <aes_encrypt+0x5e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
   15bbe:	2314      	movs	r3, #20
   15bc0:	18fb      	adds	r3, r7, r3
   15bc2:	0018      	movs	r0, r3
   15bc4:	4b1b      	ldr	r3, [pc, #108]	; (15c34 <aes_encrypt+0xa4>)
   15bc6:	4798      	blx	r3
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	2227      	movs	r2, #39	; 0x27
   15bcc:	18ba      	adds	r2, r7, r2
   15bce:	7812      	ldrb	r2, [r2, #0]
   15bd0:	0112      	lsls	r2, r2, #4
   15bd2:	189a      	adds	r2, r3, r2
   15bd4:	2314      	movs	r3, #20
   15bd6:	18fb      	adds	r3, r7, r3
   15bd8:	0011      	movs	r1, r2
   15bda:	0018      	movs	r0, r3
   15bdc:	4b16      	ldr	r3, [pc, #88]	; (15c38 <aes_encrypt+0xa8>)
   15bde:	4798      	blx	r3
        for( r = 1 ; r < ctx->rnd ; ++r )
   15be0:	2327      	movs	r3, #39	; 0x27
   15be2:	18fb      	adds	r3, r7, r3
   15be4:	2227      	movs	r2, #39	; 0x27
   15be6:	18ba      	adds	r2, r7, r2
   15be8:	7812      	ldrb	r2, [r2, #0]
   15bea:	3201      	adds	r2, #1
   15bec:	701a      	strb	r2, [r3, #0]
   15bee:	687b      	ldr	r3, [r7, #4]
   15bf0:	22f0      	movs	r2, #240	; 0xf0
   15bf2:	5c9b      	ldrb	r3, [r3, r2]
   15bf4:	2227      	movs	r2, #39	; 0x27
   15bf6:	18ba      	adds	r2, r7, r2
   15bf8:	7812      	ldrb	r2, [r2, #0]
   15bfa:	429a      	cmp	r2, r3
   15bfc:	d3df      	bcc.n	15bbe <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
   15bfe:	2314      	movs	r3, #20
   15c00:	18fb      	adds	r3, r7, r3
   15c02:	0018      	movs	r0, r3
   15c04:	4b0d      	ldr	r3, [pc, #52]	; (15c3c <aes_encrypt+0xac>)
   15c06:	4798      	blx	r3
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   15c08:	687b      	ldr	r3, [r7, #4]
   15c0a:	2227      	movs	r2, #39	; 0x27
   15c0c:	18ba      	adds	r2, r7, r2
   15c0e:	7812      	ldrb	r2, [r2, #0]
   15c10:	0112      	lsls	r2, r2, #4
   15c12:	189a      	adds	r2, r3, r2
   15c14:	2314      	movs	r3, #20
   15c16:	18f9      	adds	r1, r7, r3
   15c18:	68bb      	ldr	r3, [r7, #8]
   15c1a:	0018      	movs	r0, r3
   15c1c:	4b04      	ldr	r3, [pc, #16]	; (15c30 <aes_encrypt+0xa0>)
   15c1e:	4798      	blx	r3
    }
    else
        return ( uint8_t )-1;
    return 0;
   15c20:	2300      	movs	r3, #0
   15c22:	e000      	b.n	15c26 <aes_encrypt+0x96>
        return ( uint8_t )-1;
   15c24:	23ff      	movs	r3, #255	; 0xff
}
   15c26:	0018      	movs	r0, r3
   15c28:	46bd      	mov	sp, r7
   15c2a:	b00a      	add	sp, #40	; 0x28
   15c2c:	bd80      	pop	{r7, pc}
   15c2e:	46c0      	nop			; (mov r8, r8)
   15c30:	000151bb 	.word	0x000151bb
   15c34:	0001549d 	.word	0x0001549d
   15c38:	00015329 	.word	0x00015329
   15c3c:	0001534d 	.word	0x0001534d

00015c40 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
   15c40:	b580      	push	{r7, lr}
   15c42:	b082      	sub	sp, #8
   15c44:	af00      	add	r7, sp, #0
   15c46:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
   15c48:	687b      	ldr	r3, [r7, #4]
   15c4a:	33f1      	adds	r3, #241	; 0xf1
   15c4c:	2210      	movs	r2, #16
   15c4e:	2100      	movs	r1, #0
   15c50:	0018      	movs	r0, r3
   15c52:	4b08      	ldr	r3, [pc, #32]	; (15c74 <AES_CMAC_Init+0x34>)
   15c54:	4798      	blx	r3
            ctx->M_n = 0;
   15c56:	687a      	ldr	r2, [r7, #4]
   15c58:	238a      	movs	r3, #138	; 0x8a
   15c5a:	005b      	lsls	r3, r3, #1
   15c5c:	2100      	movs	r1, #0
   15c5e:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
   15c60:	687b      	ldr	r3, [r7, #4]
   15c62:	22f0      	movs	r2, #240	; 0xf0
   15c64:	2100      	movs	r1, #0
   15c66:	0018      	movs	r0, r3
   15c68:	4b02      	ldr	r3, [pc, #8]	; (15c74 <AES_CMAC_Init+0x34>)
   15c6a:	4798      	blx	r3
}
   15c6c:	46c0      	nop			; (mov r8, r8)
   15c6e:	46bd      	mov	sp, r7
   15c70:	b002      	add	sp, #8
   15c72:	bd80      	pop	{r7, pc}
   15c74:	000043b1 	.word	0x000043b1

00015c78 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
   15c78:	b580      	push	{r7, lr}
   15c7a:	b082      	sub	sp, #8
   15c7c:	af00      	add	r7, sp, #0
   15c7e:	6078      	str	r0, [r7, #4]
   15c80:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
   15c82:	687a      	ldr	r2, [r7, #4]
   15c84:	683b      	ldr	r3, [r7, #0]
   15c86:	2110      	movs	r1, #16
   15c88:	0018      	movs	r0, r3
   15c8a:	4b03      	ldr	r3, [pc, #12]	; (15c98 <AES_CMAC_SetKey+0x20>)
   15c8c:	4798      	blx	r3
}
   15c8e:	46c0      	nop			; (mov r8, r8)
   15c90:	46bd      	mov	sp, r7
   15c92:	b002      	add	sp, #8
   15c94:	bd80      	pop	{r7, pc}
   15c96:	46c0      	nop			; (mov r8, r8)
   15c98:	000158f5 	.word	0x000158f5

00015c9c <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
   15c9c:	b580      	push	{r7, lr}
   15c9e:	b08c      	sub	sp, #48	; 0x30
   15ca0:	af00      	add	r7, sp, #0
   15ca2:	60f8      	str	r0, [r7, #12]
   15ca4:	60b9      	str	r1, [r7, #8]
   15ca6:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
   15ca8:	68fa      	ldr	r2, [r7, #12]
   15caa:	238a      	movs	r3, #138	; 0x8a
   15cac:	005b      	lsls	r3, r3, #1
   15cae:	58d3      	ldr	r3, [r2, r3]
   15cb0:	2b00      	cmp	r3, #0
   15cb2:	d100      	bne.n	15cb6 <AES_CMAC_Update+0x1a>
   15cb4:	e09a      	b.n	15dec <AES_CMAC_Update+0x150>
                  mlen = MIN(16 - ctx->M_n, len);
   15cb6:	68fa      	ldr	r2, [r7, #12]
   15cb8:	238a      	movs	r3, #138	; 0x8a
   15cba:	005b      	lsls	r3, r3, #1
   15cbc:	58d3      	ldr	r3, [r2, r3]
   15cbe:	2210      	movs	r2, #16
   15cc0:	1ad3      	subs	r3, r2, r3
   15cc2:	687a      	ldr	r2, [r7, #4]
   15cc4:	4293      	cmp	r3, r2
   15cc6:	d900      	bls.n	15cca <AES_CMAC_Update+0x2e>
   15cc8:	0013      	movs	r3, r2
   15cca:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
   15ccc:	68fb      	ldr	r3, [r7, #12]
   15cce:	1c9a      	adds	r2, r3, #2
   15cd0:	32ff      	adds	r2, #255	; 0xff
   15cd2:	68f9      	ldr	r1, [r7, #12]
   15cd4:	238a      	movs	r3, #138	; 0x8a
   15cd6:	005b      	lsls	r3, r3, #1
   15cd8:	58cb      	ldr	r3, [r1, r3]
   15cda:	18d3      	adds	r3, r2, r3
   15cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15cde:	b292      	uxth	r2, r2
   15ce0:	68b9      	ldr	r1, [r7, #8]
   15ce2:	0018      	movs	r0, r3
   15ce4:	4b4c      	ldr	r3, [pc, #304]	; (15e18 <AES_CMAC_Update+0x17c>)
   15ce6:	4798      	blx	r3
                    ctx->M_n += mlen;
   15ce8:	68fa      	ldr	r2, [r7, #12]
   15cea:	238a      	movs	r3, #138	; 0x8a
   15cec:	005b      	lsls	r3, r3, #1
   15cee:	58d2      	ldr	r2, [r2, r3]
   15cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15cf2:	18d1      	adds	r1, r2, r3
   15cf4:	68fa      	ldr	r2, [r7, #12]
   15cf6:	238a      	movs	r3, #138	; 0x8a
   15cf8:	005b      	lsls	r3, r3, #1
   15cfa:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
   15cfc:	68fa      	ldr	r2, [r7, #12]
   15cfe:	238a      	movs	r3, #138	; 0x8a
   15d00:	005b      	lsls	r3, r3, #1
   15d02:	58d3      	ldr	r3, [r2, r3]
   15d04:	2b0f      	cmp	r3, #15
   15d06:	d800      	bhi.n	15d0a <AES_CMAC_Update+0x6e>
   15d08:	e082      	b.n	15e10 <AES_CMAC_Update+0x174>
   15d0a:	687a      	ldr	r2, [r7, #4]
   15d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d0e:	429a      	cmp	r2, r3
   15d10:	d100      	bne.n	15d14 <AES_CMAC_Update+0x78>
   15d12:	e07d      	b.n	15e10 <AES_CMAC_Update+0x174>
                            return;
                   XOR(ctx->M_last, ctx->X);
   15d14:	2300      	movs	r3, #0
   15d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   15d18:	e018      	b.n	15d4c <AES_CMAC_Update+0xb0>
   15d1a:	68fa      	ldr	r2, [r7, #12]
   15d1c:	21f1      	movs	r1, #241	; 0xf1
   15d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d20:	18d3      	adds	r3, r2, r3
   15d22:	185b      	adds	r3, r3, r1
   15d24:	781a      	ldrb	r2, [r3, #0]
   15d26:	68f8      	ldr	r0, [r7, #12]
   15d28:	2302      	movs	r3, #2
   15d2a:	33ff      	adds	r3, #255	; 0xff
   15d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15d2e:	1841      	adds	r1, r0, r1
   15d30:	18cb      	adds	r3, r1, r3
   15d32:	781b      	ldrb	r3, [r3, #0]
   15d34:	4053      	eors	r3, r2
   15d36:	b2d8      	uxtb	r0, r3
   15d38:	68fa      	ldr	r2, [r7, #12]
   15d3a:	21f1      	movs	r1, #241	; 0xf1
   15d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d3e:	18d3      	adds	r3, r2, r3
   15d40:	185b      	adds	r3, r3, r1
   15d42:	1c02      	adds	r2, r0, #0
   15d44:	701a      	strb	r2, [r3, #0]
   15d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d48:	3301      	adds	r3, #1
   15d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   15d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d4e:	2b0f      	cmp	r3, #15
   15d50:	dde3      	ble.n	15d1a <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
   15d52:	68fb      	ldr	r3, [r7, #12]
   15d54:	33f1      	adds	r3, #241	; 0xf1
   15d56:	0018      	movs	r0, r3
   15d58:	68fb      	ldr	r3, [r7, #12]
   15d5a:	33f1      	adds	r3, #241	; 0xf1
   15d5c:	68fa      	ldr	r2, [r7, #12]
   15d5e:	0019      	movs	r1, r3
   15d60:	4b2e      	ldr	r3, [pc, #184]	; (15e1c <AES_CMAC_Update+0x180>)
   15d62:	4798      	blx	r3
                    data += mlen;
   15d64:	68ba      	ldr	r2, [r7, #8]
   15d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d68:	18d3      	adds	r3, r2, r3
   15d6a:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
   15d6c:	687a      	ldr	r2, [r7, #4]
   15d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d70:	1ad3      	subs	r3, r2, r3
   15d72:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
   15d74:	e03a      	b.n	15dec <AES_CMAC_Update+0x150>

                    XOR(data, ctx->X);
   15d76:	2300      	movs	r3, #0
   15d78:	62bb      	str	r3, [r7, #40]	; 0x28
   15d7a:	e015      	b.n	15da8 <AES_CMAC_Update+0x10c>
   15d7c:	68fa      	ldr	r2, [r7, #12]
   15d7e:	21f1      	movs	r1, #241	; 0xf1
   15d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15d82:	18d3      	adds	r3, r2, r3
   15d84:	185b      	adds	r3, r3, r1
   15d86:	781a      	ldrb	r2, [r3, #0]
   15d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15d8a:	68b9      	ldr	r1, [r7, #8]
   15d8c:	18cb      	adds	r3, r1, r3
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	4053      	eors	r3, r2
   15d92:	b2d8      	uxtb	r0, r3
   15d94:	68fa      	ldr	r2, [r7, #12]
   15d96:	21f1      	movs	r1, #241	; 0xf1
   15d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15d9a:	18d3      	adds	r3, r2, r3
   15d9c:	185b      	adds	r3, r3, r1
   15d9e:	1c02      	adds	r2, r0, #0
   15da0:	701a      	strb	r2, [r3, #0]
   15da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15da4:	3301      	adds	r3, #1
   15da6:	62bb      	str	r3, [r7, #40]	; 0x28
   15da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15daa:	2b0f      	cmp	r3, #15
   15dac:	dde6      	ble.n	15d7c <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
   15dae:	68fb      	ldr	r3, [r7, #12]
   15db0:	33f1      	adds	r3, #241	; 0xf1
   15db2:	0019      	movs	r1, r3
   15db4:	2314      	movs	r3, #20
   15db6:	18fb      	adds	r3, r7, r3
   15db8:	2210      	movs	r2, #16
   15dba:	0018      	movs	r0, r3
   15dbc:	4b16      	ldr	r3, [pc, #88]	; (15e18 <AES_CMAC_Update+0x17c>)
   15dbe:	4798      	blx	r3
            aes_encrypt( in, in, &ctx->rijndael);
   15dc0:	68fa      	ldr	r2, [r7, #12]
   15dc2:	2314      	movs	r3, #20
   15dc4:	18f9      	adds	r1, r7, r3
   15dc6:	2314      	movs	r3, #20
   15dc8:	18fb      	adds	r3, r7, r3
   15dca:	0018      	movs	r0, r3
   15dcc:	4b13      	ldr	r3, [pc, #76]	; (15e1c <AES_CMAC_Update+0x180>)
   15dce:	4798      	blx	r3
                    memcpy1(&ctx->X[0], in, 16);
   15dd0:	68fb      	ldr	r3, [r7, #12]
   15dd2:	33f1      	adds	r3, #241	; 0xf1
   15dd4:	2214      	movs	r2, #20
   15dd6:	18b9      	adds	r1, r7, r2
   15dd8:	2210      	movs	r2, #16
   15dda:	0018      	movs	r0, r3
   15ddc:	4b0e      	ldr	r3, [pc, #56]	; (15e18 <AES_CMAC_Update+0x17c>)
   15dde:	4798      	blx	r3

                    data += 16;
   15de0:	68bb      	ldr	r3, [r7, #8]
   15de2:	3310      	adds	r3, #16
   15de4:	60bb      	str	r3, [r7, #8]
                    len -= 16;
   15de6:	687b      	ldr	r3, [r7, #4]
   15de8:	3b10      	subs	r3, #16
   15dea:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
   15dec:	687b      	ldr	r3, [r7, #4]
   15dee:	2b10      	cmp	r3, #16
   15df0:	d8c1      	bhi.n	15d76 <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
   15df2:	68fb      	ldr	r3, [r7, #12]
   15df4:	3302      	adds	r3, #2
   15df6:	33ff      	adds	r3, #255	; 0xff
   15df8:	687a      	ldr	r2, [r7, #4]
   15dfa:	b292      	uxth	r2, r2
   15dfc:	68b9      	ldr	r1, [r7, #8]
   15dfe:	0018      	movs	r0, r3
   15e00:	4b05      	ldr	r3, [pc, #20]	; (15e18 <AES_CMAC_Update+0x17c>)
   15e02:	4798      	blx	r3
            ctx->M_n = len;
   15e04:	68fa      	ldr	r2, [r7, #12]
   15e06:	238a      	movs	r3, #138	; 0x8a
   15e08:	005b      	lsls	r3, r3, #1
   15e0a:	6879      	ldr	r1, [r7, #4]
   15e0c:	50d1      	str	r1, [r2, r3]
   15e0e:	e000      	b.n	15e12 <AES_CMAC_Update+0x176>
                            return;
   15e10:	46c0      	nop			; (mov r8, r8)
}
   15e12:	46bd      	mov	sp, r7
   15e14:	b00c      	add	sp, #48	; 0x30
   15e16:	bd80      	pop	{r7, pc}
   15e18:	00004339 	.word	0x00004339
   15e1c:	00015b91 	.word	0x00015b91

00015e20 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
   15e20:	b580      	push	{r7, lr}
   15e22:	b092      	sub	sp, #72	; 0x48
   15e24:	af00      	add	r7, sp, #0
   15e26:	6078      	str	r0, [r7, #4]
   15e28:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
   15e2a:	231c      	movs	r3, #28
   15e2c:	18fb      	adds	r3, r7, r3
   15e2e:	2210      	movs	r2, #16
   15e30:	2100      	movs	r1, #0
   15e32:	0018      	movs	r0, r3
   15e34:	4bba      	ldr	r3, [pc, #744]	; (16120 <AES_CMAC_Final+0x300>)
   15e36:	4798      	blx	r3

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
   15e38:	683a      	ldr	r2, [r7, #0]
   15e3a:	231c      	movs	r3, #28
   15e3c:	18f9      	adds	r1, r7, r3
   15e3e:	231c      	movs	r3, #28
   15e40:	18fb      	adds	r3, r7, r3
   15e42:	0018      	movs	r0, r3
   15e44:	4bb7      	ldr	r3, [pc, #732]	; (16124 <AES_CMAC_Final+0x304>)
   15e46:	4798      	blx	r3

            if (K[0] & 0x80) {
   15e48:	231c      	movs	r3, #28
   15e4a:	18fb      	adds	r3, r7, r3
   15e4c:	781b      	ldrb	r3, [r3, #0]
   15e4e:	b25b      	sxtb	r3, r3
   15e50:	2b00      	cmp	r3, #0
   15e52:	da33      	bge.n	15ebc <AES_CMAC_Final+0x9c>
                    LSHIFT(K, K);
   15e54:	2300      	movs	r3, #0
   15e56:	647b      	str	r3, [r7, #68]	; 0x44
   15e58:	e01a      	b.n	15e90 <AES_CMAC_Final+0x70>
   15e5a:	231c      	movs	r3, #28
   15e5c:	18fa      	adds	r2, r7, r3
   15e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e60:	18d3      	adds	r3, r2, r3
   15e62:	781b      	ldrb	r3, [r3, #0]
   15e64:	005b      	lsls	r3, r3, #1
   15e66:	b25a      	sxtb	r2, r3
   15e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e6a:	3301      	adds	r3, #1
   15e6c:	211c      	movs	r1, #28
   15e6e:	1879      	adds	r1, r7, r1
   15e70:	5ccb      	ldrb	r3, [r1, r3]
   15e72:	09db      	lsrs	r3, r3, #7
   15e74:	b2db      	uxtb	r3, r3
   15e76:	b25b      	sxtb	r3, r3
   15e78:	4313      	orrs	r3, r2
   15e7a:	b25b      	sxtb	r3, r3
   15e7c:	b2d9      	uxtb	r1, r3
   15e7e:	231c      	movs	r3, #28
   15e80:	18fa      	adds	r2, r7, r3
   15e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e84:	18d3      	adds	r3, r2, r3
   15e86:	1c0a      	adds	r2, r1, #0
   15e88:	701a      	strb	r2, [r3, #0]
   15e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e8c:	3301      	adds	r3, #1
   15e8e:	647b      	str	r3, [r7, #68]	; 0x44
   15e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e92:	2b0e      	cmp	r3, #14
   15e94:	dde1      	ble.n	15e5a <AES_CMAC_Final+0x3a>
   15e96:	231c      	movs	r3, #28
   15e98:	18fb      	adds	r3, r7, r3
   15e9a:	7bdb      	ldrb	r3, [r3, #15]
   15e9c:	18db      	adds	r3, r3, r3
   15e9e:	b2da      	uxtb	r2, r3
   15ea0:	231c      	movs	r3, #28
   15ea2:	18fb      	adds	r3, r7, r3
   15ea4:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
   15ea6:	231c      	movs	r3, #28
   15ea8:	18fb      	adds	r3, r7, r3
   15eaa:	7bdb      	ldrb	r3, [r3, #15]
   15eac:	2279      	movs	r2, #121	; 0x79
   15eae:	4252      	negs	r2, r2
   15eb0:	4053      	eors	r3, r2
   15eb2:	b2da      	uxtb	r2, r3
   15eb4:	231c      	movs	r3, #28
   15eb6:	18fb      	adds	r3, r7, r3
   15eb8:	73da      	strb	r2, [r3, #15]
   15eba:	e028      	b.n	15f0e <AES_CMAC_Final+0xee>
            } else
                    LSHIFT(K, K);
   15ebc:	2300      	movs	r3, #0
   15ebe:	643b      	str	r3, [r7, #64]	; 0x40
   15ec0:	e01a      	b.n	15ef8 <AES_CMAC_Final+0xd8>
   15ec2:	231c      	movs	r3, #28
   15ec4:	18fa      	adds	r2, r7, r3
   15ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ec8:	18d3      	adds	r3, r2, r3
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	005b      	lsls	r3, r3, #1
   15ece:	b25a      	sxtb	r2, r3
   15ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ed2:	3301      	adds	r3, #1
   15ed4:	211c      	movs	r1, #28
   15ed6:	1879      	adds	r1, r7, r1
   15ed8:	5ccb      	ldrb	r3, [r1, r3]
   15eda:	09db      	lsrs	r3, r3, #7
   15edc:	b2db      	uxtb	r3, r3
   15ede:	b25b      	sxtb	r3, r3
   15ee0:	4313      	orrs	r3, r2
   15ee2:	b25b      	sxtb	r3, r3
   15ee4:	b2d9      	uxtb	r1, r3
   15ee6:	231c      	movs	r3, #28
   15ee8:	18fa      	adds	r2, r7, r3
   15eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15eec:	18d3      	adds	r3, r2, r3
   15eee:	1c0a      	adds	r2, r1, #0
   15ef0:	701a      	strb	r2, [r3, #0]
   15ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ef4:	3301      	adds	r3, #1
   15ef6:	643b      	str	r3, [r7, #64]	; 0x40
   15ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15efa:	2b0e      	cmp	r3, #14
   15efc:	dde1      	ble.n	15ec2 <AES_CMAC_Final+0xa2>
   15efe:	231c      	movs	r3, #28
   15f00:	18fb      	adds	r3, r7, r3
   15f02:	7bdb      	ldrb	r3, [r3, #15]
   15f04:	18db      	adds	r3, r3, r3
   15f06:	b2da      	uxtb	r2, r3
   15f08:	231c      	movs	r3, #28
   15f0a:	18fb      	adds	r3, r7, r3
   15f0c:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
   15f0e:	683a      	ldr	r2, [r7, #0]
   15f10:	238a      	movs	r3, #138	; 0x8a
   15f12:	005b      	lsls	r3, r3, #1
   15f14:	58d3      	ldr	r3, [r2, r3]
   15f16:	2b10      	cmp	r3, #16
   15f18:	d11f      	bne.n	15f5a <AES_CMAC_Final+0x13a>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
   15f1a:	2300      	movs	r3, #0
   15f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   15f1e:	e018      	b.n	15f52 <AES_CMAC_Final+0x132>
   15f20:	6839      	ldr	r1, [r7, #0]
   15f22:	2302      	movs	r3, #2
   15f24:	33ff      	adds	r3, #255	; 0xff
   15f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15f28:	188a      	adds	r2, r1, r2
   15f2a:	18d3      	adds	r3, r2, r3
   15f2c:	781a      	ldrb	r2, [r3, #0]
   15f2e:	231c      	movs	r3, #28
   15f30:	18f9      	adds	r1, r7, r3
   15f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f34:	18cb      	adds	r3, r1, r3
   15f36:	781b      	ldrb	r3, [r3, #0]
   15f38:	4053      	eors	r3, r2
   15f3a:	b2d8      	uxtb	r0, r3
   15f3c:	6839      	ldr	r1, [r7, #0]
   15f3e:	2302      	movs	r3, #2
   15f40:	33ff      	adds	r3, #255	; 0xff
   15f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15f44:	188a      	adds	r2, r1, r2
   15f46:	18d3      	adds	r3, r2, r3
   15f48:	1c02      	adds	r2, r0, #0
   15f4a:	701a      	strb	r2, [r3, #0]
   15f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f4e:	3301      	adds	r3, #1
   15f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   15f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f54:	2b0f      	cmp	r3, #15
   15f56:	dde3      	ble.n	15f20 <AES_CMAC_Final+0x100>
   15f58:	e0a7      	b.n	160aa <AES_CMAC_Final+0x28a>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
   15f5a:	231c      	movs	r3, #28
   15f5c:	18fb      	adds	r3, r7, r3
   15f5e:	781b      	ldrb	r3, [r3, #0]
   15f60:	b25b      	sxtb	r3, r3
   15f62:	2b00      	cmp	r3, #0
   15f64:	da33      	bge.n	15fce <AES_CMAC_Final+0x1ae>
                          LSHIFT(K, K);
   15f66:	2300      	movs	r3, #0
   15f68:	63bb      	str	r3, [r7, #56]	; 0x38
   15f6a:	e01a      	b.n	15fa2 <AES_CMAC_Final+0x182>
   15f6c:	231c      	movs	r3, #28
   15f6e:	18fa      	adds	r2, r7, r3
   15f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f72:	18d3      	adds	r3, r2, r3
   15f74:	781b      	ldrb	r3, [r3, #0]
   15f76:	005b      	lsls	r3, r3, #1
   15f78:	b25a      	sxtb	r2, r3
   15f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f7c:	3301      	adds	r3, #1
   15f7e:	211c      	movs	r1, #28
   15f80:	1879      	adds	r1, r7, r1
   15f82:	5ccb      	ldrb	r3, [r1, r3]
   15f84:	09db      	lsrs	r3, r3, #7
   15f86:	b2db      	uxtb	r3, r3
   15f88:	b25b      	sxtb	r3, r3
   15f8a:	4313      	orrs	r3, r2
   15f8c:	b25b      	sxtb	r3, r3
   15f8e:	b2d9      	uxtb	r1, r3
   15f90:	231c      	movs	r3, #28
   15f92:	18fa      	adds	r2, r7, r3
   15f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f96:	18d3      	adds	r3, r2, r3
   15f98:	1c0a      	adds	r2, r1, #0
   15f9a:	701a      	strb	r2, [r3, #0]
   15f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f9e:	3301      	adds	r3, #1
   15fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   15fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fa4:	2b0e      	cmp	r3, #14
   15fa6:	dde1      	ble.n	15f6c <AES_CMAC_Final+0x14c>
   15fa8:	231c      	movs	r3, #28
   15faa:	18fb      	adds	r3, r7, r3
   15fac:	7bdb      	ldrb	r3, [r3, #15]
   15fae:	18db      	adds	r3, r3, r3
   15fb0:	b2da      	uxtb	r2, r3
   15fb2:	231c      	movs	r3, #28
   15fb4:	18fb      	adds	r3, r7, r3
   15fb6:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
   15fb8:	231c      	movs	r3, #28
   15fba:	18fb      	adds	r3, r7, r3
   15fbc:	7bdb      	ldrb	r3, [r3, #15]
   15fbe:	2279      	movs	r2, #121	; 0x79
   15fc0:	4252      	negs	r2, r2
   15fc2:	4053      	eors	r3, r2
   15fc4:	b2da      	uxtb	r2, r3
   15fc6:	231c      	movs	r3, #28
   15fc8:	18fb      	adds	r3, r7, r3
   15fca:	73da      	strb	r2, [r3, #15]
   15fcc:	e028      	b.n	16020 <AES_CMAC_Final+0x200>
                  } else
                           LSHIFT(K, K);
   15fce:	2300      	movs	r3, #0
   15fd0:	637b      	str	r3, [r7, #52]	; 0x34
   15fd2:	e01a      	b.n	1600a <AES_CMAC_Final+0x1ea>
   15fd4:	231c      	movs	r3, #28
   15fd6:	18fa      	adds	r2, r7, r3
   15fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15fda:	18d3      	adds	r3, r2, r3
   15fdc:	781b      	ldrb	r3, [r3, #0]
   15fde:	005b      	lsls	r3, r3, #1
   15fe0:	b25a      	sxtb	r2, r3
   15fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15fe4:	3301      	adds	r3, #1
   15fe6:	211c      	movs	r1, #28
   15fe8:	1879      	adds	r1, r7, r1
   15fea:	5ccb      	ldrb	r3, [r1, r3]
   15fec:	09db      	lsrs	r3, r3, #7
   15fee:	b2db      	uxtb	r3, r3
   15ff0:	b25b      	sxtb	r3, r3
   15ff2:	4313      	orrs	r3, r2
   15ff4:	b25b      	sxtb	r3, r3
   15ff6:	b2d9      	uxtb	r1, r3
   15ff8:	231c      	movs	r3, #28
   15ffa:	18fa      	adds	r2, r7, r3
   15ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ffe:	18d3      	adds	r3, r2, r3
   16000:	1c0a      	adds	r2, r1, #0
   16002:	701a      	strb	r2, [r3, #0]
   16004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16006:	3301      	adds	r3, #1
   16008:	637b      	str	r3, [r7, #52]	; 0x34
   1600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1600c:	2b0e      	cmp	r3, #14
   1600e:	dde1      	ble.n	15fd4 <AES_CMAC_Final+0x1b4>
   16010:	231c      	movs	r3, #28
   16012:	18fb      	adds	r3, r7, r3
   16014:	7bdb      	ldrb	r3, [r3, #15]
   16016:	18db      	adds	r3, r3, r3
   16018:	b2da      	uxtb	r2, r3
   1601a:	231c      	movs	r3, #28
   1601c:	18fb      	adds	r3, r7, r3
   1601e:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
   16020:	683a      	ldr	r2, [r7, #0]
   16022:	238a      	movs	r3, #138	; 0x8a
   16024:	005b      	lsls	r3, r3, #1
   16026:	58d2      	ldr	r2, [r2, r3]
   16028:	6839      	ldr	r1, [r7, #0]
   1602a:	2302      	movs	r3, #2
   1602c:	33ff      	adds	r3, #255	; 0xff
   1602e:	188a      	adds	r2, r1, r2
   16030:	18d3      	adds	r3, r2, r3
   16032:	2280      	movs	r2, #128	; 0x80
   16034:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
   16036:	e00a      	b.n	1604e <AES_CMAC_Final+0x22e>
                         ctx->M_last[ctx->M_n] = 0;
   16038:	683a      	ldr	r2, [r7, #0]
   1603a:	238a      	movs	r3, #138	; 0x8a
   1603c:	005b      	lsls	r3, r3, #1
   1603e:	58d2      	ldr	r2, [r2, r3]
   16040:	6839      	ldr	r1, [r7, #0]
   16042:	2302      	movs	r3, #2
   16044:	33ff      	adds	r3, #255	; 0xff
   16046:	188a      	adds	r2, r1, r2
   16048:	18d3      	adds	r3, r2, r3
   1604a:	2200      	movs	r2, #0
   1604c:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
   1604e:	683a      	ldr	r2, [r7, #0]
   16050:	238a      	movs	r3, #138	; 0x8a
   16052:	005b      	lsls	r3, r3, #1
   16054:	58d3      	ldr	r3, [r2, r3]
   16056:	1c59      	adds	r1, r3, #1
   16058:	683a      	ldr	r2, [r7, #0]
   1605a:	238a      	movs	r3, #138	; 0x8a
   1605c:	005b      	lsls	r3, r3, #1
   1605e:	50d1      	str	r1, [r2, r3]
   16060:	683a      	ldr	r2, [r7, #0]
   16062:	238a      	movs	r3, #138	; 0x8a
   16064:	005b      	lsls	r3, r3, #1
   16066:	58d3      	ldr	r3, [r2, r3]
   16068:	2b0f      	cmp	r3, #15
   1606a:	d9e5      	bls.n	16038 <AES_CMAC_Final+0x218>
   
                  XOR(K, ctx->M_last);
   1606c:	2300      	movs	r3, #0
   1606e:	633b      	str	r3, [r7, #48]	; 0x30
   16070:	e018      	b.n	160a4 <AES_CMAC_Final+0x284>
   16072:	6839      	ldr	r1, [r7, #0]
   16074:	2302      	movs	r3, #2
   16076:	33ff      	adds	r3, #255	; 0xff
   16078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1607a:	188a      	adds	r2, r1, r2
   1607c:	18d3      	adds	r3, r2, r3
   1607e:	781a      	ldrb	r2, [r3, #0]
   16080:	231c      	movs	r3, #28
   16082:	18f9      	adds	r1, r7, r3
   16084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16086:	18cb      	adds	r3, r1, r3
   16088:	781b      	ldrb	r3, [r3, #0]
   1608a:	4053      	eors	r3, r2
   1608c:	b2d8      	uxtb	r0, r3
   1608e:	6839      	ldr	r1, [r7, #0]
   16090:	2302      	movs	r3, #2
   16092:	33ff      	adds	r3, #255	; 0xff
   16094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16096:	188a      	adds	r2, r1, r2
   16098:	18d3      	adds	r3, r2, r3
   1609a:	1c02      	adds	r2, r0, #0
   1609c:	701a      	strb	r2, [r3, #0]
   1609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   160a0:	3301      	adds	r3, #1
   160a2:	633b      	str	r3, [r7, #48]	; 0x30
   160a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   160a6:	2b0f      	cmp	r3, #15
   160a8:	dde3      	ble.n	16072 <AES_CMAC_Final+0x252>


           }
           XOR(ctx->M_last, ctx->X);
   160aa:	2300      	movs	r3, #0
   160ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   160ae:	e018      	b.n	160e2 <AES_CMAC_Final+0x2c2>
   160b0:	683a      	ldr	r2, [r7, #0]
   160b2:	21f1      	movs	r1, #241	; 0xf1
   160b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160b6:	18d3      	adds	r3, r2, r3
   160b8:	185b      	adds	r3, r3, r1
   160ba:	781a      	ldrb	r2, [r3, #0]
   160bc:	6838      	ldr	r0, [r7, #0]
   160be:	2302      	movs	r3, #2
   160c0:	33ff      	adds	r3, #255	; 0xff
   160c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   160c4:	1841      	adds	r1, r0, r1
   160c6:	18cb      	adds	r3, r1, r3
   160c8:	781b      	ldrb	r3, [r3, #0]
   160ca:	4053      	eors	r3, r2
   160cc:	b2d8      	uxtb	r0, r3
   160ce:	683a      	ldr	r2, [r7, #0]
   160d0:	21f1      	movs	r1, #241	; 0xf1
   160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160d4:	18d3      	adds	r3, r2, r3
   160d6:	185b      	adds	r3, r3, r1
   160d8:	1c02      	adds	r2, r0, #0
   160da:	701a      	strb	r2, [r3, #0]
   160dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160de:	3301      	adds	r3, #1
   160e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   160e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160e4:	2b0f      	cmp	r3, #15
   160e6:	dde3      	ble.n	160b0 <AES_CMAC_Final+0x290>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
   160e8:	683b      	ldr	r3, [r7, #0]
   160ea:	33f1      	adds	r3, #241	; 0xf1
   160ec:	0019      	movs	r1, r3
   160ee:	230c      	movs	r3, #12
   160f0:	18fb      	adds	r3, r7, r3
   160f2:	2210      	movs	r2, #16
   160f4:	0018      	movs	r0, r3
   160f6:	4b0c      	ldr	r3, [pc, #48]	; (16128 <AES_CMAC_Final+0x308>)
   160f8:	4798      	blx	r3
       aes_encrypt(in, digest, &ctx->rijndael);
   160fa:	683a      	ldr	r2, [r7, #0]
   160fc:	6879      	ldr	r1, [r7, #4]
   160fe:	230c      	movs	r3, #12
   16100:	18fb      	adds	r3, r7, r3
   16102:	0018      	movs	r0, r3
   16104:	4b07      	ldr	r3, [pc, #28]	; (16124 <AES_CMAC_Final+0x304>)
   16106:	4798      	blx	r3
           memset1(K, 0, sizeof K);
   16108:	231c      	movs	r3, #28
   1610a:	18fb      	adds	r3, r7, r3
   1610c:	2210      	movs	r2, #16
   1610e:	2100      	movs	r1, #0
   16110:	0018      	movs	r0, r3
   16112:	4b03      	ldr	r3, [pc, #12]	; (16120 <AES_CMAC_Final+0x300>)
   16114:	4798      	blx	r3

}
   16116:	46c0      	nop			; (mov r8, r8)
   16118:	46bd      	mov	sp, r7
   1611a:	b012      	add	sp, #72	; 0x48
   1611c:	bd80      	pop	{r7, pc}
   1611e:	46c0      	nop			; (mov r8, r8)
   16120:	000043b1 	.word	0x000043b1
   16124:	00015b91 	.word	0x00015b91
   16128:	00004339 	.word	0x00004339

0001612c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
   1612c:	b580      	push	{r7, lr}
   1612e:	b084      	sub	sp, #16
   16130:	af00      	add	r7, sp, #0
   16132:	0002      	movs	r2, r0
   16134:	6039      	str	r1, [r7, #0]
   16136:	1dfb      	adds	r3, r7, #7
   16138:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   1613a:	230f      	movs	r3, #15
   1613c:	18fb      	adds	r3, r7, r3
   1613e:	2200      	movs	r2, #0
   16140:	701a      	strb	r2, [r3, #0]
   16142:	e026      	b.n	16192 <GetKeyByID+0x66>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
   16144:	230f      	movs	r3, #15
   16146:	18fb      	adds	r3, r7, r3
   16148:	781a      	ldrb	r2, [r3, #0]
   1614a:	4817      	ldr	r0, [pc, #92]	; (161a8 <GetKeyByID+0x7c>)
   1614c:	2383      	movs	r3, #131	; 0x83
   1614e:	0099      	lsls	r1, r3, #2
   16150:	0013      	movs	r3, r2
   16152:	011b      	lsls	r3, r3, #4
   16154:	189b      	adds	r3, r3, r2
   16156:	18c3      	adds	r3, r0, r3
   16158:	185b      	adds	r3, r3, r1
   1615a:	781b      	ldrb	r3, [r3, #0]
   1615c:	1dfa      	adds	r2, r7, #7
   1615e:	7812      	ldrb	r2, [r2, #0]
   16160:	429a      	cmp	r2, r3
   16162:	d10f      	bne.n	16184 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
   16164:	230f      	movs	r3, #15
   16166:	18fb      	adds	r3, r7, r3
   16168:	781a      	ldrb	r2, [r3, #0]
   1616a:	0013      	movs	r3, r2
   1616c:	011b      	lsls	r3, r3, #4
   1616e:	189b      	adds	r3, r3, r2
   16170:	2282      	movs	r2, #130	; 0x82
   16172:	0092      	lsls	r2, r2, #2
   16174:	189a      	adds	r2, r3, r2
   16176:	4b0c      	ldr	r3, [pc, #48]	; (161a8 <GetKeyByID+0x7c>)
   16178:	18d3      	adds	r3, r2, r3
   1617a:	1d1a      	adds	r2, r3, #4
   1617c:	683b      	ldr	r3, [r7, #0]
   1617e:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
   16180:	2300      	movs	r3, #0
   16182:	e00c      	b.n	1619e <GetKeyByID+0x72>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   16184:	230f      	movs	r3, #15
   16186:	18fb      	adds	r3, r7, r3
   16188:	781a      	ldrb	r2, [r3, #0]
   1618a:	230f      	movs	r3, #15
   1618c:	18fb      	adds	r3, r7, r3
   1618e:	3201      	adds	r2, #1
   16190:	701a      	strb	r2, [r3, #0]
   16192:	230f      	movs	r3, #15
   16194:	18fb      	adds	r3, r7, r3
   16196:	781b      	ldrb	r3, [r3, #0]
   16198:	2b15      	cmp	r3, #21
   1619a:	d9d3      	bls.n	16144 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   1619c:	2303      	movs	r3, #3
}
   1619e:	0018      	movs	r0, r3
   161a0:	46bd      	mov	sp, r7
   161a2:	b004      	add	sp, #16
   161a4:	bd80      	pop	{r7, pc}
   161a6:	46c0      	nop			; (mov r8, r8)
   161a8:	20001744 	.word	0x20001744

000161ac <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
   161ac:	b590      	push	{r4, r7, lr}
   161ae:	b08b      	sub	sp, #44	; 0x2c
   161b0:	af00      	add	r7, sp, #0
   161b2:	60f8      	str	r0, [r7, #12]
   161b4:	0008      	movs	r0, r1
   161b6:	0011      	movs	r1, r2
   161b8:	607b      	str	r3, [r7, #4]
   161ba:	230a      	movs	r3, #10
   161bc:	18fb      	adds	r3, r7, r3
   161be:	1c02      	adds	r2, r0, #0
   161c0:	801a      	strh	r2, [r3, #0]
   161c2:	2309      	movs	r3, #9
   161c4:	18fb      	adds	r3, r7, r3
   161c6:	1c0a      	adds	r2, r1, #0
   161c8:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
   161ca:	68fb      	ldr	r3, [r7, #12]
   161cc:	2b00      	cmp	r3, #0
   161ce:	d002      	beq.n	161d6 <ComputeCmac+0x2a>
   161d0:	687b      	ldr	r3, [r7, #4]
   161d2:	2b00      	cmp	r3, #0
   161d4:	d101      	bne.n	161da <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   161d6:	2302      	movs	r3, #2
   161d8:	e042      	b.n	16260 <ComputeCmac+0xb4>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
   161da:	4b23      	ldr	r3, [pc, #140]	; (16268 <ComputeCmac+0xbc>)
   161dc:	0018      	movs	r0, r3
   161de:	4b23      	ldr	r3, [pc, #140]	; (1626c <ComputeCmac+0xc0>)
   161e0:	4798      	blx	r3

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
   161e2:	2327      	movs	r3, #39	; 0x27
   161e4:	18fc      	adds	r4, r7, r3
   161e6:	2310      	movs	r3, #16
   161e8:	18fa      	adds	r2, r7, r3
   161ea:	2309      	movs	r3, #9
   161ec:	18fb      	adds	r3, r7, r3
   161ee:	781b      	ldrb	r3, [r3, #0]
   161f0:	0011      	movs	r1, r2
   161f2:	0018      	movs	r0, r3
   161f4:	4b1e      	ldr	r3, [pc, #120]	; (16270 <ComputeCmac+0xc4>)
   161f6:	4798      	blx	r3
   161f8:	0003      	movs	r3, r0
   161fa:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
   161fc:	2327      	movs	r3, #39	; 0x27
   161fe:	18fb      	adds	r3, r7, r3
   16200:	781b      	ldrb	r3, [r3, #0]
   16202:	2b00      	cmp	r3, #0
   16204:	d129      	bne.n	1625a <ComputeCmac+0xae>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
   16206:	693b      	ldr	r3, [r7, #16]
   16208:	1c5a      	adds	r2, r3, #1
   1620a:	4b17      	ldr	r3, [pc, #92]	; (16268 <ComputeCmac+0xbc>)
   1620c:	0011      	movs	r1, r2
   1620e:	0018      	movs	r0, r3
   16210:	4b18      	ldr	r3, [pc, #96]	; (16274 <ComputeCmac+0xc8>)
   16212:	4798      	blx	r3

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
   16214:	230a      	movs	r3, #10
   16216:	18fb      	adds	r3, r7, r3
   16218:	881a      	ldrh	r2, [r3, #0]
   1621a:	68f9      	ldr	r1, [r7, #12]
   1621c:	4b12      	ldr	r3, [pc, #72]	; (16268 <ComputeCmac+0xbc>)
   1621e:	0018      	movs	r0, r3
   16220:	4b15      	ldr	r3, [pc, #84]	; (16278 <ComputeCmac+0xcc>)
   16222:	4798      	blx	r3

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
   16224:	4a10      	ldr	r2, [pc, #64]	; (16268 <ComputeCmac+0xbc>)
   16226:	2314      	movs	r3, #20
   16228:	18fb      	adds	r3, r7, r3
   1622a:	0011      	movs	r1, r2
   1622c:	0018      	movs	r0, r3
   1622e:	4b13      	ldr	r3, [pc, #76]	; (1627c <ComputeCmac+0xd0>)
   16230:	4798      	blx	r3

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
   16232:	2314      	movs	r3, #20
   16234:	18fb      	adds	r3, r7, r3
   16236:	78db      	ldrb	r3, [r3, #3]
   16238:	061a      	lsls	r2, r3, #24
   1623a:	2314      	movs	r3, #20
   1623c:	18fb      	adds	r3, r7, r3
   1623e:	789b      	ldrb	r3, [r3, #2]
   16240:	041b      	lsls	r3, r3, #16
   16242:	431a      	orrs	r2, r3
   16244:	2314      	movs	r3, #20
   16246:	18fb      	adds	r3, r7, r3
   16248:	785b      	ldrb	r3, [r3, #1]
   1624a:	021b      	lsls	r3, r3, #8
   1624c:	4313      	orrs	r3, r2
   1624e:	2214      	movs	r2, #20
   16250:	18ba      	adds	r2, r7, r2
   16252:	7812      	ldrb	r2, [r2, #0]
   16254:	431a      	orrs	r2, r3
   16256:	687b      	ldr	r3, [r7, #4]
   16258:	601a      	str	r2, [r3, #0]
    }

    return retval;
   1625a:	2327      	movs	r3, #39	; 0x27
   1625c:	18fb      	adds	r3, r7, r3
   1625e:	781b      	ldrb	r3, [r3, #0]
}
   16260:	0018      	movs	r0, r3
   16262:	46bd      	mov	sp, r7
   16264:	b00b      	add	sp, #44	; 0x2c
   16266:	bd90      	pop	{r4, r7, pc}
   16268:	20001838 	.word	0x20001838
   1626c:	00015c41 	.word	0x00015c41
   16270:	0001612d 	.word	0x0001612d
   16274:	00015c79 	.word	0x00015c79
   16278:	00015c9d 	.word	0x00015c9d
   1627c:	00015e21 	.word	0x00015e21

00016280 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
   16280:	b580      	push	{r7, lr}
   16282:	af00      	add	r7, sp, #0
    return;
   16284:	46c0      	nop			; (mov r8, r8)
}
   16286:	46bd      	mov	sp, r7
   16288:	bd80      	pop	{r7, pc}
	...

0001628c <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
   1628c:	b580      	push	{r7, lr}
   1628e:	b084      	sub	sp, #16
   16290:	af00      	add	r7, sp, #0
   16292:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
   16294:	230f      	movs	r3, #15
   16296:	18fb      	adds	r3, r7, r3
   16298:	2200      	movs	r2, #0
   1629a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
   1629c:	230f      	movs	r3, #15
   1629e:	18fb      	adds	r3, r7, r3
   162a0:	781b      	ldrb	r3, [r3, #0]
   162a2:	220f      	movs	r2, #15
   162a4:	18ba      	adds	r2, r7, r2
   162a6:	1c59      	adds	r1, r3, #1
   162a8:	7011      	strb	r1, [r2, #0]
   162aa:	0018      	movs	r0, r3
   162ac:	49c9      	ldr	r1, [pc, #804]	; (165d4 <SecureElementInit+0x348>)
   162ae:	2383      	movs	r3, #131	; 0x83
   162b0:	009a      	lsls	r2, r3, #2
   162b2:	0003      	movs	r3, r0
   162b4:	011b      	lsls	r3, r3, #4
   162b6:	181b      	adds	r3, r3, r0
   162b8:	18cb      	adds	r3, r1, r3
   162ba:	189b      	adds	r3, r3, r2
   162bc:	2200      	movs	r2, #0
   162be:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
   162c0:	230f      	movs	r3, #15
   162c2:	18fb      	adds	r3, r7, r3
   162c4:	781b      	ldrb	r3, [r3, #0]
   162c6:	220f      	movs	r2, #15
   162c8:	18ba      	adds	r2, r7, r2
   162ca:	1c59      	adds	r1, r3, #1
   162cc:	7011      	strb	r1, [r2, #0]
   162ce:	0018      	movs	r0, r3
   162d0:	49c0      	ldr	r1, [pc, #768]	; (165d4 <SecureElementInit+0x348>)
   162d2:	2383      	movs	r3, #131	; 0x83
   162d4:	009a      	lsls	r2, r3, #2
   162d6:	0003      	movs	r3, r0
   162d8:	011b      	lsls	r3, r3, #4
   162da:	181b      	adds	r3, r3, r0
   162dc:	18cb      	adds	r3, r1, r3
   162de:	189b      	adds	r3, r3, r2
   162e0:	2201      	movs	r2, #1
   162e2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
   162e4:	230f      	movs	r3, #15
   162e6:	18fb      	adds	r3, r7, r3
   162e8:	781b      	ldrb	r3, [r3, #0]
   162ea:	220f      	movs	r2, #15
   162ec:	18ba      	adds	r2, r7, r2
   162ee:	1c59      	adds	r1, r3, #1
   162f0:	7011      	strb	r1, [r2, #0]
   162f2:	0018      	movs	r0, r3
   162f4:	49b7      	ldr	r1, [pc, #732]	; (165d4 <SecureElementInit+0x348>)
   162f6:	2383      	movs	r3, #131	; 0x83
   162f8:	009a      	lsls	r2, r3, #2
   162fa:	0003      	movs	r3, r0
   162fc:	011b      	lsls	r3, r3, #4
   162fe:	181b      	adds	r3, r3, r0
   16300:	18cb      	adds	r3, r1, r3
   16302:	189b      	adds	r3, r3, r2
   16304:	2202      	movs	r2, #2
   16306:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
   16308:	230f      	movs	r3, #15
   1630a:	18fb      	adds	r3, r7, r3
   1630c:	781b      	ldrb	r3, [r3, #0]
   1630e:	220f      	movs	r2, #15
   16310:	18ba      	adds	r2, r7, r2
   16312:	1c59      	adds	r1, r3, #1
   16314:	7011      	strb	r1, [r2, #0]
   16316:	0018      	movs	r0, r3
   16318:	49ae      	ldr	r1, [pc, #696]	; (165d4 <SecureElementInit+0x348>)
   1631a:	2383      	movs	r3, #131	; 0x83
   1631c:	009a      	lsls	r2, r3, #2
   1631e:	0003      	movs	r3, r0
   16320:	011b      	lsls	r3, r3, #4
   16322:	181b      	adds	r3, r3, r0
   16324:	18cb      	adds	r3, r1, r3
   16326:	189b      	adds	r3, r3, r2
   16328:	2203      	movs	r2, #3
   1632a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
   1632c:	230f      	movs	r3, #15
   1632e:	18fb      	adds	r3, r7, r3
   16330:	781b      	ldrb	r3, [r3, #0]
   16332:	220f      	movs	r2, #15
   16334:	18ba      	adds	r2, r7, r2
   16336:	1c59      	adds	r1, r3, #1
   16338:	7011      	strb	r1, [r2, #0]
   1633a:	0018      	movs	r0, r3
   1633c:	49a5      	ldr	r1, [pc, #660]	; (165d4 <SecureElementInit+0x348>)
   1633e:	2383      	movs	r3, #131	; 0x83
   16340:	009a      	lsls	r2, r3, #2
   16342:	0003      	movs	r3, r0
   16344:	011b      	lsls	r3, r3, #4
   16346:	181b      	adds	r3, r3, r0
   16348:	18cb      	adds	r3, r1, r3
   1634a:	189b      	adds	r3, r3, r2
   1634c:	2204      	movs	r2, #4
   1634e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
   16350:	230f      	movs	r3, #15
   16352:	18fb      	adds	r3, r7, r3
   16354:	781b      	ldrb	r3, [r3, #0]
   16356:	220f      	movs	r2, #15
   16358:	18ba      	adds	r2, r7, r2
   1635a:	1c59      	adds	r1, r3, #1
   1635c:	7011      	strb	r1, [r2, #0]
   1635e:	0018      	movs	r0, r3
   16360:	499c      	ldr	r1, [pc, #624]	; (165d4 <SecureElementInit+0x348>)
   16362:	2383      	movs	r3, #131	; 0x83
   16364:	009a      	lsls	r2, r3, #2
   16366:	0003      	movs	r3, r0
   16368:	011b      	lsls	r3, r3, #4
   1636a:	181b      	adds	r3, r3, r0
   1636c:	18cb      	adds	r3, r1, r3
   1636e:	189b      	adds	r3, r3, r2
   16370:	2205      	movs	r2, #5
   16372:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
   16374:	230f      	movs	r3, #15
   16376:	18fb      	adds	r3, r7, r3
   16378:	781b      	ldrb	r3, [r3, #0]
   1637a:	220f      	movs	r2, #15
   1637c:	18ba      	adds	r2, r7, r2
   1637e:	1c59      	adds	r1, r3, #1
   16380:	7011      	strb	r1, [r2, #0]
   16382:	0018      	movs	r0, r3
   16384:	4993      	ldr	r1, [pc, #588]	; (165d4 <SecureElementInit+0x348>)
   16386:	2383      	movs	r3, #131	; 0x83
   16388:	009a      	lsls	r2, r3, #2
   1638a:	0003      	movs	r3, r0
   1638c:	011b      	lsls	r3, r3, #4
   1638e:	181b      	adds	r3, r3, r0
   16390:	18cb      	adds	r3, r1, r3
   16392:	189b      	adds	r3, r3, r2
   16394:	2206      	movs	r2, #6
   16396:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
   16398:	230f      	movs	r3, #15
   1639a:	18fb      	adds	r3, r7, r3
   1639c:	781b      	ldrb	r3, [r3, #0]
   1639e:	220f      	movs	r2, #15
   163a0:	18ba      	adds	r2, r7, r2
   163a2:	1c59      	adds	r1, r3, #1
   163a4:	7011      	strb	r1, [r2, #0]
   163a6:	0018      	movs	r0, r3
   163a8:	498a      	ldr	r1, [pc, #552]	; (165d4 <SecureElementInit+0x348>)
   163aa:	2383      	movs	r3, #131	; 0x83
   163ac:	009a      	lsls	r2, r3, #2
   163ae:	0003      	movs	r3, r0
   163b0:	011b      	lsls	r3, r3, #4
   163b2:	181b      	adds	r3, r3, r0
   163b4:	18cb      	adds	r3, r1, r3
   163b6:	189b      	adds	r3, r3, r2
   163b8:	2207      	movs	r2, #7
   163ba:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
   163bc:	230f      	movs	r3, #15
   163be:	18fb      	adds	r3, r7, r3
   163c0:	781b      	ldrb	r3, [r3, #0]
   163c2:	220f      	movs	r2, #15
   163c4:	18ba      	adds	r2, r7, r2
   163c6:	1c59      	adds	r1, r3, #1
   163c8:	7011      	strb	r1, [r2, #0]
   163ca:	0018      	movs	r0, r3
   163cc:	4981      	ldr	r1, [pc, #516]	; (165d4 <SecureElementInit+0x348>)
   163ce:	2383      	movs	r3, #131	; 0x83
   163d0:	009a      	lsls	r2, r3, #2
   163d2:	0003      	movs	r3, r0
   163d4:	011b      	lsls	r3, r3, #4
   163d6:	181b      	adds	r3, r3, r0
   163d8:	18cb      	adds	r3, r1, r3
   163da:	189b      	adds	r3, r3, r2
   163dc:	227f      	movs	r2, #127	; 0x7f
   163de:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
   163e0:	230f      	movs	r3, #15
   163e2:	18fb      	adds	r3, r7, r3
   163e4:	781b      	ldrb	r3, [r3, #0]
   163e6:	220f      	movs	r2, #15
   163e8:	18ba      	adds	r2, r7, r2
   163ea:	1c59      	adds	r1, r3, #1
   163ec:	7011      	strb	r1, [r2, #0]
   163ee:	0018      	movs	r0, r3
   163f0:	4978      	ldr	r1, [pc, #480]	; (165d4 <SecureElementInit+0x348>)
   163f2:	2383      	movs	r3, #131	; 0x83
   163f4:	009a      	lsls	r2, r3, #2
   163f6:	0003      	movs	r3, r0
   163f8:	011b      	lsls	r3, r3, #4
   163fa:	181b      	adds	r3, r3, r0
   163fc:	18cb      	adds	r3, r1, r3
   163fe:	189b      	adds	r3, r3, r2
   16400:	2280      	movs	r2, #128	; 0x80
   16402:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
   16404:	230f      	movs	r3, #15
   16406:	18fb      	adds	r3, r7, r3
   16408:	781b      	ldrb	r3, [r3, #0]
   1640a:	220f      	movs	r2, #15
   1640c:	18ba      	adds	r2, r7, r2
   1640e:	1c59      	adds	r1, r3, #1
   16410:	7011      	strb	r1, [r2, #0]
   16412:	0018      	movs	r0, r3
   16414:	496f      	ldr	r1, [pc, #444]	; (165d4 <SecureElementInit+0x348>)
   16416:	2383      	movs	r3, #131	; 0x83
   16418:	009a      	lsls	r2, r3, #2
   1641a:	0003      	movs	r3, r0
   1641c:	011b      	lsls	r3, r3, #4
   1641e:	181b      	adds	r3, r3, r0
   16420:	18cb      	adds	r3, r1, r3
   16422:	189b      	adds	r3, r3, r2
   16424:	2281      	movs	r2, #129	; 0x81
   16426:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
   16428:	230f      	movs	r3, #15
   1642a:	18fb      	adds	r3, r7, r3
   1642c:	781b      	ldrb	r3, [r3, #0]
   1642e:	220f      	movs	r2, #15
   16430:	18ba      	adds	r2, r7, r2
   16432:	1c59      	adds	r1, r3, #1
   16434:	7011      	strb	r1, [r2, #0]
   16436:	0018      	movs	r0, r3
   16438:	4966      	ldr	r1, [pc, #408]	; (165d4 <SecureElementInit+0x348>)
   1643a:	2383      	movs	r3, #131	; 0x83
   1643c:	009a      	lsls	r2, r3, #2
   1643e:	0003      	movs	r3, r0
   16440:	011b      	lsls	r3, r3, #4
   16442:	181b      	adds	r3, r3, r0
   16444:	18cb      	adds	r3, r1, r3
   16446:	189b      	adds	r3, r3, r2
   16448:	2282      	movs	r2, #130	; 0x82
   1644a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
   1644c:	230f      	movs	r3, #15
   1644e:	18fb      	adds	r3, r7, r3
   16450:	781b      	ldrb	r3, [r3, #0]
   16452:	220f      	movs	r2, #15
   16454:	18ba      	adds	r2, r7, r2
   16456:	1c59      	adds	r1, r3, #1
   16458:	7011      	strb	r1, [r2, #0]
   1645a:	0018      	movs	r0, r3
   1645c:	495d      	ldr	r1, [pc, #372]	; (165d4 <SecureElementInit+0x348>)
   1645e:	2383      	movs	r3, #131	; 0x83
   16460:	009a      	lsls	r2, r3, #2
   16462:	0003      	movs	r3, r0
   16464:	011b      	lsls	r3, r3, #4
   16466:	181b      	adds	r3, r3, r0
   16468:	18cb      	adds	r3, r1, r3
   1646a:	189b      	adds	r3, r3, r2
   1646c:	2283      	movs	r2, #131	; 0x83
   1646e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
   16470:	230f      	movs	r3, #15
   16472:	18fb      	adds	r3, r7, r3
   16474:	781b      	ldrb	r3, [r3, #0]
   16476:	220f      	movs	r2, #15
   16478:	18ba      	adds	r2, r7, r2
   1647a:	1c59      	adds	r1, r3, #1
   1647c:	7011      	strb	r1, [r2, #0]
   1647e:	0018      	movs	r0, r3
   16480:	4954      	ldr	r1, [pc, #336]	; (165d4 <SecureElementInit+0x348>)
   16482:	2383      	movs	r3, #131	; 0x83
   16484:	009a      	lsls	r2, r3, #2
   16486:	0003      	movs	r3, r0
   16488:	011b      	lsls	r3, r3, #4
   1648a:	181b      	adds	r3, r3, r0
   1648c:	18cb      	adds	r3, r1, r3
   1648e:	189b      	adds	r3, r3, r2
   16490:	2284      	movs	r2, #132	; 0x84
   16492:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
   16494:	230f      	movs	r3, #15
   16496:	18fb      	adds	r3, r7, r3
   16498:	781b      	ldrb	r3, [r3, #0]
   1649a:	220f      	movs	r2, #15
   1649c:	18ba      	adds	r2, r7, r2
   1649e:	1c59      	adds	r1, r3, #1
   164a0:	7011      	strb	r1, [r2, #0]
   164a2:	0018      	movs	r0, r3
   164a4:	494b      	ldr	r1, [pc, #300]	; (165d4 <SecureElementInit+0x348>)
   164a6:	2383      	movs	r3, #131	; 0x83
   164a8:	009a      	lsls	r2, r3, #2
   164aa:	0003      	movs	r3, r0
   164ac:	011b      	lsls	r3, r3, #4
   164ae:	181b      	adds	r3, r3, r0
   164b0:	18cb      	adds	r3, r1, r3
   164b2:	189b      	adds	r3, r3, r2
   164b4:	2285      	movs	r2, #133	; 0x85
   164b6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
   164b8:	230f      	movs	r3, #15
   164ba:	18fb      	adds	r3, r7, r3
   164bc:	781b      	ldrb	r3, [r3, #0]
   164be:	220f      	movs	r2, #15
   164c0:	18ba      	adds	r2, r7, r2
   164c2:	1c59      	adds	r1, r3, #1
   164c4:	7011      	strb	r1, [r2, #0]
   164c6:	0018      	movs	r0, r3
   164c8:	4942      	ldr	r1, [pc, #264]	; (165d4 <SecureElementInit+0x348>)
   164ca:	2383      	movs	r3, #131	; 0x83
   164cc:	009a      	lsls	r2, r3, #2
   164ce:	0003      	movs	r3, r0
   164d0:	011b      	lsls	r3, r3, #4
   164d2:	181b      	adds	r3, r3, r0
   164d4:	18cb      	adds	r3, r1, r3
   164d6:	189b      	adds	r3, r3, r2
   164d8:	2286      	movs	r2, #134	; 0x86
   164da:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
   164dc:	230f      	movs	r3, #15
   164de:	18fb      	adds	r3, r7, r3
   164e0:	781b      	ldrb	r3, [r3, #0]
   164e2:	220f      	movs	r2, #15
   164e4:	18ba      	adds	r2, r7, r2
   164e6:	1c59      	adds	r1, r3, #1
   164e8:	7011      	strb	r1, [r2, #0]
   164ea:	0018      	movs	r0, r3
   164ec:	4939      	ldr	r1, [pc, #228]	; (165d4 <SecureElementInit+0x348>)
   164ee:	2383      	movs	r3, #131	; 0x83
   164f0:	009a      	lsls	r2, r3, #2
   164f2:	0003      	movs	r3, r0
   164f4:	011b      	lsls	r3, r3, #4
   164f6:	181b      	adds	r3, r3, r0
   164f8:	18cb      	adds	r3, r1, r3
   164fa:	189b      	adds	r3, r3, r2
   164fc:	2287      	movs	r2, #135	; 0x87
   164fe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
   16500:	230f      	movs	r3, #15
   16502:	18fb      	adds	r3, r7, r3
   16504:	781b      	ldrb	r3, [r3, #0]
   16506:	220f      	movs	r2, #15
   16508:	18ba      	adds	r2, r7, r2
   1650a:	1c59      	adds	r1, r3, #1
   1650c:	7011      	strb	r1, [r2, #0]
   1650e:	0018      	movs	r0, r3
   16510:	4930      	ldr	r1, [pc, #192]	; (165d4 <SecureElementInit+0x348>)
   16512:	2383      	movs	r3, #131	; 0x83
   16514:	009a      	lsls	r2, r3, #2
   16516:	0003      	movs	r3, r0
   16518:	011b      	lsls	r3, r3, #4
   1651a:	181b      	adds	r3, r3, r0
   1651c:	18cb      	adds	r3, r1, r3
   1651e:	189b      	adds	r3, r3, r2
   16520:	2288      	movs	r2, #136	; 0x88
   16522:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
   16524:	230f      	movs	r3, #15
   16526:	18fb      	adds	r3, r7, r3
   16528:	781b      	ldrb	r3, [r3, #0]
   1652a:	220f      	movs	r2, #15
   1652c:	18ba      	adds	r2, r7, r2
   1652e:	1c59      	adds	r1, r3, #1
   16530:	7011      	strb	r1, [r2, #0]
   16532:	0018      	movs	r0, r3
   16534:	4927      	ldr	r1, [pc, #156]	; (165d4 <SecureElementInit+0x348>)
   16536:	2383      	movs	r3, #131	; 0x83
   16538:	009a      	lsls	r2, r3, #2
   1653a:	0003      	movs	r3, r0
   1653c:	011b      	lsls	r3, r3, #4
   1653e:	181b      	adds	r3, r3, r0
   16540:	18cb      	adds	r3, r1, r3
   16542:	189b      	adds	r3, r3, r2
   16544:	2289      	movs	r2, #137	; 0x89
   16546:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
   16548:	230f      	movs	r3, #15
   1654a:	18fb      	adds	r3, r7, r3
   1654c:	781b      	ldrb	r3, [r3, #0]
   1654e:	220f      	movs	r2, #15
   16550:	18ba      	adds	r2, r7, r2
   16552:	1c59      	adds	r1, r3, #1
   16554:	7011      	strb	r1, [r2, #0]
   16556:	0018      	movs	r0, r3
   16558:	491e      	ldr	r1, [pc, #120]	; (165d4 <SecureElementInit+0x348>)
   1655a:	2383      	movs	r3, #131	; 0x83
   1655c:	009a      	lsls	r2, r3, #2
   1655e:	0003      	movs	r3, r0
   16560:	011b      	lsls	r3, r3, #4
   16562:	181b      	adds	r3, r3, r0
   16564:	18cb      	adds	r3, r1, r3
   16566:	189b      	adds	r3, r3, r2
   16568:	228a      	movs	r2, #138	; 0x8a
   1656a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
   1656c:	230f      	movs	r3, #15
   1656e:	18fb      	adds	r3, r7, r3
   16570:	781b      	ldrb	r3, [r3, #0]
   16572:	220f      	movs	r2, #15
   16574:	18ba      	adds	r2, r7, r2
   16576:	1c59      	adds	r1, r3, #1
   16578:	7011      	strb	r1, [r2, #0]
   1657a:	0018      	movs	r0, r3
   1657c:	4915      	ldr	r1, [pc, #84]	; (165d4 <SecureElementInit+0x348>)
   1657e:	2383      	movs	r3, #131	; 0x83
   16580:	009a      	lsls	r2, r3, #2
   16582:	0003      	movs	r3, r0
   16584:	011b      	lsls	r3, r3, #4
   16586:	181b      	adds	r3, r3, r0
   16588:	18cb      	adds	r3, r1, r3
   1658a:	189b      	adds	r3, r3, r2
   1658c:	228b      	movs	r2, #139	; 0x8b
   1658e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
   16590:	230f      	movs	r3, #15
   16592:	18fb      	adds	r3, r7, r3
   16594:	781b      	ldrb	r3, [r3, #0]
   16596:	220f      	movs	r2, #15
   16598:	18ba      	adds	r2, r7, r2
   1659a:	1c59      	adds	r1, r3, #1
   1659c:	7011      	strb	r1, [r2, #0]
   1659e:	0018      	movs	r0, r3
   165a0:	490c      	ldr	r1, [pc, #48]	; (165d4 <SecureElementInit+0x348>)
   165a2:	2383      	movs	r3, #131	; 0x83
   165a4:	009a      	lsls	r2, r3, #2
   165a6:	0003      	movs	r3, r0
   165a8:	011b      	lsls	r3, r3, #4
   165aa:	181b      	adds	r3, r3, r0
   165ac:	18cb      	adds	r3, r1, r3
   165ae:	189b      	adds	r3, r3, r2
   165b0:	228c      	movs	r2, #140	; 0x8c
   165b2:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
   165b4:	687b      	ldr	r3, [r7, #4]
   165b6:	2b00      	cmp	r3, #0
   165b8:	d003      	beq.n	165c2 <SecureElementInit+0x336>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
   165ba:	4b07      	ldr	r3, [pc, #28]	; (165d8 <SecureElementInit+0x34c>)
   165bc:	687a      	ldr	r2, [r7, #4]
   165be:	601a      	str	r2, [r3, #0]
   165c0:	e002      	b.n	165c8 <SecureElementInit+0x33c>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
   165c2:	4b05      	ldr	r3, [pc, #20]	; (165d8 <SecureElementInit+0x34c>)
   165c4:	4a05      	ldr	r2, [pc, #20]	; (165dc <SecureElementInit+0x350>)
   165c6:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
   165c8:	2300      	movs	r3, #0
}
   165ca:	0018      	movs	r0, r3
   165cc:	46bd      	mov	sp, r7
   165ce:	b004      	add	sp, #16
   165d0:	bd80      	pop	{r7, pc}
   165d2:	46c0      	nop			; (mov r8, r8)
   165d4:	20001744 	.word	0x20001744
   165d8:	20001ac8 	.word	0x20001ac8
   165dc:	00016281 	.word	0x00016281

000165e0 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
   165e0:	b580      	push	{r7, lr}
   165e2:	b082      	sub	sp, #8
   165e4:	af00      	add	r7, sp, #0
   165e6:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
   165e8:	687b      	ldr	r3, [r7, #4]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d008      	beq.n	16600 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
   165ee:	23e1      	movs	r3, #225	; 0xe1
   165f0:	009a      	lsls	r2, r3, #2
   165f2:	6879      	ldr	r1, [r7, #4]
   165f4:	4b05      	ldr	r3, [pc, #20]	; (1660c <SecureElementRestoreNvmCtx+0x2c>)
   165f6:	0018      	movs	r0, r3
   165f8:	4b05      	ldr	r3, [pc, #20]	; (16610 <SecureElementRestoreNvmCtx+0x30>)
   165fa:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
   165fc:	2300      	movs	r3, #0
   165fe:	e000      	b.n	16602 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
   16600:	2302      	movs	r3, #2
    }
}
   16602:	0018      	movs	r0, r3
   16604:	46bd      	mov	sp, r7
   16606:	b002      	add	sp, #8
   16608:	bd80      	pop	{r7, pc}
   1660a:	46c0      	nop			; (mov r8, r8)
   1660c:	20001744 	.word	0x20001744
   16610:	00004339 	.word	0x00004339

00016614 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
   16614:	b580      	push	{r7, lr}
   16616:	b082      	sub	sp, #8
   16618:	af00      	add	r7, sp, #0
   1661a:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	22e1      	movs	r2, #225	; 0xe1
   16620:	0092      	lsls	r2, r2, #2
   16622:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
   16624:	4b02      	ldr	r3, [pc, #8]	; (16630 <SecureElementGetNvmCtx+0x1c>)
}
   16626:	0018      	movs	r0, r3
   16628:	46bd      	mov	sp, r7
   1662a:	b002      	add	sp, #8
   1662c:	bd80      	pop	{r7, pc}
   1662e:	46c0      	nop			; (mov r8, r8)
   16630:	20001744 	.word	0x20001744

00016634 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
   16634:	b5b0      	push	{r4, r5, r7, lr}
   16636:	b088      	sub	sp, #32
   16638:	af00      	add	r7, sp, #0
   1663a:	0002      	movs	r2, r0
   1663c:	6039      	str	r1, [r7, #0]
   1663e:	1dfb      	adds	r3, r7, #7
   16640:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
   16642:	683b      	ldr	r3, [r7, #0]
   16644:	2b00      	cmp	r3, #0
   16646:	d101      	bne.n	1664c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   16648:	2302      	movs	r3, #2
   1664a:	e066      	b.n	1671a <SecureElementSetKey+0xe6>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   1664c:	231e      	movs	r3, #30
   1664e:	18fb      	adds	r3, r7, r3
   16650:	2206      	movs	r2, #6
   16652:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   16654:	231f      	movs	r3, #31
   16656:	18fb      	adds	r3, r7, r3
   16658:	2200      	movs	r2, #0
   1665a:	701a      	strb	r2, [r3, #0]
   1665c:	e057      	b.n	1670e <SecureElementSetKey+0xda>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
   1665e:	231f      	movs	r3, #31
   16660:	18fb      	adds	r3, r7, r3
   16662:	781a      	ldrb	r2, [r3, #0]
   16664:	482f      	ldr	r0, [pc, #188]	; (16724 <SecureElementSetKey+0xf0>)
   16666:	2383      	movs	r3, #131	; 0x83
   16668:	0099      	lsls	r1, r3, #2
   1666a:	0013      	movs	r3, r2
   1666c:	011b      	lsls	r3, r3, #4
   1666e:	189b      	adds	r3, r3, r2
   16670:	18c3      	adds	r3, r0, r3
   16672:	185b      	adds	r3, r3, r1
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	1dfa      	adds	r2, r7, #7
   16678:	7812      	ldrb	r2, [r2, #0]
   1667a:	429a      	cmp	r2, r3
   1667c:	d140      	bne.n	16700 <SecureElementSetKey+0xcc>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
   1667e:	231f      	movs	r3, #31
   16680:	18fb      	adds	r3, r7, r3
   16682:	781a      	ldrb	r2, [r3, #0]
   16684:	4827      	ldr	r0, [pc, #156]	; (16724 <SecureElementSetKey+0xf0>)
   16686:	2383      	movs	r3, #131	; 0x83
   16688:	0099      	lsls	r1, r3, #2
   1668a:	0013      	movs	r3, r2
   1668c:	011b      	lsls	r3, r3, #4
   1668e:	189b      	adds	r3, r3, r2
   16690:	18c3      	adds	r3, r0, r3
   16692:	185b      	adds	r3, r3, r1
   16694:	781b      	ldrb	r3, [r3, #0]
   16696:	b25b      	sxtb	r3, r3
   16698:	2b00      	cmp	r3, #0
   1669a:	da1b      	bge.n	166d4 <SecureElementSetKey+0xa0>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
   1669c:	230c      	movs	r3, #12
   1669e:	18fb      	adds	r3, r7, r3
   166a0:	0018      	movs	r0, r3
   166a2:	2310      	movs	r3, #16
   166a4:	001a      	movs	r2, r3
   166a6:	2100      	movs	r1, #0
   166a8:	4b1f      	ldr	r3, [pc, #124]	; (16728 <SecureElementSetKey+0xf4>)
   166aa:	4798      	blx	r3

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   166ac:	231e      	movs	r3, #30
   166ae:	18fc      	adds	r4, r7, r3
   166b0:	230c      	movs	r3, #12
   166b2:	18fb      	adds	r3, r7, r3
   166b4:	6838      	ldr	r0, [r7, #0]
   166b6:	227f      	movs	r2, #127	; 0x7f
   166b8:	2110      	movs	r1, #16
   166ba:	4d1c      	ldr	r5, [pc, #112]	; (1672c <SecureElementSetKey+0xf8>)
   166bc:	47a8      	blx	r5
   166be:	0003      	movs	r3, r0
   166c0:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
   166c2:	231e      	movs	r3, #30
   166c4:	18fb      	adds	r3, r7, r3
   166c6:	781b      	ldrb	r3, [r3, #0]
   166c8:	2b00      	cmp	r3, #0
   166ca:	d019      	beq.n	16700 <SecureElementSetKey+0xcc>
                {
                    return retval;
   166cc:	231e      	movs	r3, #30
   166ce:	18fb      	adds	r3, r7, r3
   166d0:	781b      	ldrb	r3, [r3, #0]
   166d2:	e022      	b.n	1671a <SecureElementSetKey+0xe6>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
   166d4:	231f      	movs	r3, #31
   166d6:	18fb      	adds	r3, r7, r3
   166d8:	781a      	ldrb	r2, [r3, #0]
   166da:	0013      	movs	r3, r2
   166dc:	011b      	lsls	r3, r3, #4
   166de:	189b      	adds	r3, r3, r2
   166e0:	2282      	movs	r2, #130	; 0x82
   166e2:	0092      	lsls	r2, r2, #2
   166e4:	189a      	adds	r2, r3, r2
   166e6:	4b0f      	ldr	r3, [pc, #60]	; (16724 <SecureElementSetKey+0xf0>)
   166e8:	18d3      	adds	r3, r2, r3
   166ea:	3305      	adds	r3, #5
   166ec:	6839      	ldr	r1, [r7, #0]
   166ee:	2210      	movs	r2, #16
   166f0:	0018      	movs	r0, r3
   166f2:	4b0f      	ldr	r3, [pc, #60]	; (16730 <SecureElementSetKey+0xfc>)
   166f4:	4798      	blx	r3
                SeNvmCtxChanged( );
   166f6:	4b0f      	ldr	r3, [pc, #60]	; (16734 <SecureElementSetKey+0x100>)
   166f8:	681b      	ldr	r3, [r3, #0]
   166fa:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
   166fc:	2300      	movs	r3, #0
   166fe:	e00c      	b.n	1671a <SecureElementSetKey+0xe6>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   16700:	231f      	movs	r3, #31
   16702:	18fb      	adds	r3, r7, r3
   16704:	781a      	ldrb	r2, [r3, #0]
   16706:	231f      	movs	r3, #31
   16708:	18fb      	adds	r3, r7, r3
   1670a:	3201      	adds	r2, #1
   1670c:	701a      	strb	r2, [r3, #0]
   1670e:	231f      	movs	r3, #31
   16710:	18fb      	adds	r3, r7, r3
   16712:	781b      	ldrb	r3, [r3, #0]
   16714:	2b15      	cmp	r3, #21
   16716:	d9a2      	bls.n	1665e <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   16718:	2303      	movs	r3, #3
}
   1671a:	0018      	movs	r0, r3
   1671c:	46bd      	mov	sp, r7
   1671e:	b008      	add	sp, #32
   16720:	bdb0      	pop	{r4, r5, r7, pc}
   16722:	46c0      	nop			; (mov r8, r8)
   16724:	20001744 	.word	0x20001744
   16728:	00019be9 	.word	0x00019be9
   1672c:	00016811 	.word	0x00016811
   16730:	00004339 	.word	0x00004339
   16734:	20001ac8 	.word	0x20001ac8

00016738 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
   16738:	b590      	push	{r4, r7, lr}
   1673a:	b085      	sub	sp, #20
   1673c:	af00      	add	r7, sp, #0
   1673e:	60f8      	str	r0, [r7, #12]
   16740:	0008      	movs	r0, r1
   16742:	0011      	movs	r1, r2
   16744:	607b      	str	r3, [r7, #4]
   16746:	230a      	movs	r3, #10
   16748:	18fb      	adds	r3, r7, r3
   1674a:	1c02      	adds	r2, r0, #0
   1674c:	801a      	strh	r2, [r3, #0]
   1674e:	2309      	movs	r3, #9
   16750:	18fb      	adds	r3, r7, r3
   16752:	1c0a      	adds	r2, r1, #0
   16754:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
   16756:	2309      	movs	r3, #9
   16758:	18fb      	adds	r3, r7, r3
   1675a:	781b      	ldrb	r3, [r3, #0]
   1675c:	2b7e      	cmp	r3, #126	; 0x7e
   1675e:	d901      	bls.n	16764 <SecureElementComputeAesCmac+0x2c>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   16760:	2303      	movs	r3, #3
   16762:	e00b      	b.n	1677c <SecureElementComputeAesCmac+0x44>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
   16764:	687c      	ldr	r4, [r7, #4]
   16766:	2309      	movs	r3, #9
   16768:	18fb      	adds	r3, r7, r3
   1676a:	781a      	ldrb	r2, [r3, #0]
   1676c:	230a      	movs	r3, #10
   1676e:	18fb      	adds	r3, r7, r3
   16770:	8819      	ldrh	r1, [r3, #0]
   16772:	68f8      	ldr	r0, [r7, #12]
   16774:	0023      	movs	r3, r4
   16776:	4c03      	ldr	r4, [pc, #12]	; (16784 <SecureElementComputeAesCmac+0x4c>)
   16778:	47a0      	blx	r4
   1677a:	0003      	movs	r3, r0
}
   1677c:	0018      	movs	r0, r3
   1677e:	46bd      	mov	sp, r7
   16780:	b005      	add	sp, #20
   16782:	bd90      	pop	{r4, r7, pc}
   16784:	000161ad 	.word	0x000161ad

00016788 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
   16788:	b5b0      	push	{r4, r5, r7, lr}
   1678a:	b086      	sub	sp, #24
   1678c:	af00      	add	r7, sp, #0
   1678e:	60f8      	str	r0, [r7, #12]
   16790:	0008      	movs	r0, r1
   16792:	607a      	str	r2, [r7, #4]
   16794:	0019      	movs	r1, r3
   16796:	230a      	movs	r3, #10
   16798:	18fb      	adds	r3, r7, r3
   1679a:	1c02      	adds	r2, r0, #0
   1679c:	801a      	strh	r2, [r3, #0]
   1679e:	2309      	movs	r3, #9
   167a0:	18fb      	adds	r3, r7, r3
   167a2:	1c0a      	adds	r2, r1, #0
   167a4:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
   167a6:	68fb      	ldr	r3, [r7, #12]
   167a8:	2b00      	cmp	r3, #0
   167aa:	d101      	bne.n	167b0 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   167ac:	2302      	movs	r3, #2
   167ae:	e029      	b.n	16804 <SecureElementVerifyAesCmac+0x7c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   167b0:	2317      	movs	r3, #23
   167b2:	18fb      	adds	r3, r7, r3
   167b4:	2206      	movs	r2, #6
   167b6:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
   167b8:	2300      	movs	r3, #0
   167ba:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
   167bc:	2317      	movs	r3, #23
   167be:	18fc      	adds	r4, r7, r3
   167c0:	2310      	movs	r3, #16
   167c2:	18fd      	adds	r5, r7, r3
   167c4:	2309      	movs	r3, #9
   167c6:	18fb      	adds	r3, r7, r3
   167c8:	781a      	ldrb	r2, [r3, #0]
   167ca:	230a      	movs	r3, #10
   167cc:	18fb      	adds	r3, r7, r3
   167ce:	8819      	ldrh	r1, [r3, #0]
   167d0:	68f8      	ldr	r0, [r7, #12]
   167d2:	002b      	movs	r3, r5
   167d4:	4d0d      	ldr	r5, [pc, #52]	; (1680c <SecureElementVerifyAesCmac+0x84>)
   167d6:	47a8      	blx	r5
   167d8:	0003      	movs	r3, r0
   167da:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   167dc:	2317      	movs	r3, #23
   167de:	18fb      	adds	r3, r7, r3
   167e0:	781b      	ldrb	r3, [r3, #0]
   167e2:	2b00      	cmp	r3, #0
   167e4:	d003      	beq.n	167ee <SecureElementVerifyAesCmac+0x66>
    {
        return retval;
   167e6:	2317      	movs	r3, #23
   167e8:	18fb      	adds	r3, r7, r3
   167ea:	781b      	ldrb	r3, [r3, #0]
   167ec:	e00a      	b.n	16804 <SecureElementVerifyAesCmac+0x7c>
    }

    if( expectedCmac != compCmac )
   167ee:	693b      	ldr	r3, [r7, #16]
   167f0:	687a      	ldr	r2, [r7, #4]
   167f2:	429a      	cmp	r2, r3
   167f4:	d003      	beq.n	167fe <SecureElementVerifyAesCmac+0x76>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
   167f6:	2317      	movs	r3, #23
   167f8:	18fb      	adds	r3, r7, r3
   167fa:	2201      	movs	r2, #1
   167fc:	701a      	strb	r2, [r3, #0]
    }

    return retval;
   167fe:	2317      	movs	r3, #23
   16800:	18fb      	adds	r3, r7, r3
   16802:	781b      	ldrb	r3, [r3, #0]
}
   16804:	0018      	movs	r0, r3
   16806:	46bd      	mov	sp, r7
   16808:	b006      	add	sp, #24
   1680a:	bdb0      	pop	{r4, r5, r7, pc}
   1680c:	000161ad 	.word	0x000161ad

00016810 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
   16810:	b590      	push	{r4, r7, lr}
   16812:	b087      	sub	sp, #28
   16814:	af00      	add	r7, sp, #0
   16816:	60f8      	str	r0, [r7, #12]
   16818:	0008      	movs	r0, r1
   1681a:	0011      	movs	r1, r2
   1681c:	607b      	str	r3, [r7, #4]
   1681e:	230a      	movs	r3, #10
   16820:	18fb      	adds	r3, r7, r3
   16822:	1c02      	adds	r2, r0, #0
   16824:	801a      	strh	r2, [r3, #0]
   16826:	2309      	movs	r3, #9
   16828:	18fb      	adds	r3, r7, r3
   1682a:	1c0a      	adds	r2, r1, #0
   1682c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
   1682e:	68fb      	ldr	r3, [r7, #12]
   16830:	2b00      	cmp	r3, #0
   16832:	d002      	beq.n	1683a <SecureElementAesEncrypt+0x2a>
   16834:	687b      	ldr	r3, [r7, #4]
   16836:	2b00      	cmp	r3, #0
   16838:	d101      	bne.n	1683e <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   1683a:	2302      	movs	r3, #2
   1683c:	e051      	b.n	168e2 <SecureElementAesEncrypt+0xd2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
   1683e:	230a      	movs	r3, #10
   16840:	18fb      	adds	r3, r7, r3
   16842:	881b      	ldrh	r3, [r3, #0]
   16844:	220f      	movs	r2, #15
   16846:	4013      	ands	r3, r2
   16848:	b29b      	uxth	r3, r3
   1684a:	2b00      	cmp	r3, #0
   1684c:	d001      	beq.n	16852 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   1684e:	2305      	movs	r3, #5
   16850:	e047      	b.n	168e2 <SecureElementAesEncrypt+0xd2>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
   16852:	4b26      	ldr	r3, [pc, #152]	; (168ec <SecureElementAesEncrypt+0xdc>)
   16854:	22f0      	movs	r2, #240	; 0xf0
   16856:	2100      	movs	r1, #0
   16858:	0018      	movs	r0, r3
   1685a:	4b25      	ldr	r3, [pc, #148]	; (168f0 <SecureElementAesEncrypt+0xe0>)
   1685c:	4798      	blx	r3

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
   1685e:	2316      	movs	r3, #22
   16860:	18fc      	adds	r4, r7, r3
   16862:	2310      	movs	r3, #16
   16864:	18fa      	adds	r2, r7, r3
   16866:	2309      	movs	r3, #9
   16868:	18fb      	adds	r3, r7, r3
   1686a:	781b      	ldrb	r3, [r3, #0]
   1686c:	0011      	movs	r1, r2
   1686e:	0018      	movs	r0, r3
   16870:	4b20      	ldr	r3, [pc, #128]	; (168f4 <SecureElementAesEncrypt+0xe4>)
   16872:	4798      	blx	r3
   16874:	0003      	movs	r3, r0
   16876:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
   16878:	2316      	movs	r3, #22
   1687a:	18fb      	adds	r3, r7, r3
   1687c:	781b      	ldrb	r3, [r3, #0]
   1687e:	2b00      	cmp	r3, #0
   16880:	d12c      	bne.n	168dc <SecureElementAesEncrypt+0xcc>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
   16882:	693b      	ldr	r3, [r7, #16]
   16884:	3301      	adds	r3, #1
   16886:	4a19      	ldr	r2, [pc, #100]	; (168ec <SecureElementAesEncrypt+0xdc>)
   16888:	2110      	movs	r1, #16
   1688a:	0018      	movs	r0, r3
   1688c:	4b1a      	ldr	r3, [pc, #104]	; (168f8 <SecureElementAesEncrypt+0xe8>)
   1688e:	4798      	blx	r3

        uint8_t block = 0;
   16890:	2317      	movs	r3, #23
   16892:	18fb      	adds	r3, r7, r3
   16894:	2200      	movs	r2, #0
   16896:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
   16898:	e01b      	b.n	168d2 <SecureElementAesEncrypt+0xc2>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
   1689a:	2317      	movs	r3, #23
   1689c:	18fb      	adds	r3, r7, r3
   1689e:	781b      	ldrb	r3, [r3, #0]
   168a0:	68fa      	ldr	r2, [r7, #12]
   168a2:	18d0      	adds	r0, r2, r3
   168a4:	2317      	movs	r3, #23
   168a6:	18fb      	adds	r3, r7, r3
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	687a      	ldr	r2, [r7, #4]
   168ac:	18d3      	adds	r3, r2, r3
   168ae:	4a0f      	ldr	r2, [pc, #60]	; (168ec <SecureElementAesEncrypt+0xdc>)
   168b0:	0019      	movs	r1, r3
   168b2:	4b12      	ldr	r3, [pc, #72]	; (168fc <SecureElementAesEncrypt+0xec>)
   168b4:	4798      	blx	r3
            block = block + 16;
   168b6:	2317      	movs	r3, #23
   168b8:	18fb      	adds	r3, r7, r3
   168ba:	2217      	movs	r2, #23
   168bc:	18ba      	adds	r2, r7, r2
   168be:	7812      	ldrb	r2, [r2, #0]
   168c0:	3210      	adds	r2, #16
   168c2:	701a      	strb	r2, [r3, #0]
            size = size - 16;
   168c4:	230a      	movs	r3, #10
   168c6:	18fb      	adds	r3, r7, r3
   168c8:	220a      	movs	r2, #10
   168ca:	18ba      	adds	r2, r7, r2
   168cc:	8812      	ldrh	r2, [r2, #0]
   168ce:	3a10      	subs	r2, #16
   168d0:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
   168d2:	230a      	movs	r3, #10
   168d4:	18fb      	adds	r3, r7, r3
   168d6:	881b      	ldrh	r3, [r3, #0]
   168d8:	2b00      	cmp	r3, #0
   168da:	d1de      	bne.n	1689a <SecureElementAesEncrypt+0x8a>
        }
    }
    return retval;
   168dc:	2316      	movs	r3, #22
   168de:	18fb      	adds	r3, r7, r3
   168e0:	781b      	ldrb	r3, [r3, #0]
}
   168e2:	0018      	movs	r0, r3
   168e4:	46bd      	mov	sp, r7
   168e6:	b007      	add	sp, #28
   168e8:	bd90      	pop	{r4, r7, pc}
   168ea:	46c0      	nop			; (mov r8, r8)
   168ec:	20001744 	.word	0x20001744
   168f0:	000043b1 	.word	0x000043b1
   168f4:	0001612d 	.word	0x0001612d
   168f8:	000158f5 	.word	0x000158f5
   168fc:	00015b91 	.word	0x00015b91

00016900 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
   16900:	b5b0      	push	{r4, r5, r7, lr}
   16902:	b08a      	sub	sp, #40	; 0x28
   16904:	af00      	add	r7, sp, #0
   16906:	60f8      	str	r0, [r7, #12]
   16908:	60b9      	str	r1, [r7, #8]
   1690a:	0019      	movs	r1, r3
   1690c:	1dfb      	adds	r3, r7, #7
   1690e:	701a      	strb	r2, [r3, #0]
   16910:	1dbb      	adds	r3, r7, #6
   16912:	1c0a      	adds	r2, r1, #0
   16914:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
   16916:	68bb      	ldr	r3, [r7, #8]
   16918:	2b00      	cmp	r3, #0
   1691a:	d101      	bne.n	16920 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   1691c:	2302      	movs	r3, #2
   1691e:	e06a      	b.n	169f6 <SecureElementDeriveAndStoreKey+0xf6>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   16920:	2327      	movs	r3, #39	; 0x27
   16922:	18fb      	adds	r3, r7, r3
   16924:	2206      	movs	r2, #6
   16926:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
   16928:	2314      	movs	r3, #20
   1692a:	18fb      	adds	r3, r7, r3
   1692c:	0018      	movs	r0, r3
   1692e:	2310      	movs	r3, #16
   16930:	001a      	movs	r2, r3
   16932:	2100      	movs	r1, #0
   16934:	4b32      	ldr	r3, [pc, #200]	; (16a00 <SecureElementDeriveAndStoreKey+0x100>)
   16936:	4798      	blx	r3

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
   16938:	1dbb      	adds	r3, r7, #6
   1693a:	781b      	ldrb	r3, [r3, #0]
   1693c:	2b7f      	cmp	r3, #127	; 0x7f
   1693e:	d10e      	bne.n	1695e <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
   16940:	1dfb      	adds	r3, r7, #7
   16942:	781b      	ldrb	r3, [r3, #0]
   16944:	2b00      	cmp	r3, #0
   16946:	d104      	bne.n	16952 <SecureElementDeriveAndStoreKey+0x52>
   16948:	230c      	movs	r3, #12
   1694a:	18fb      	adds	r3, r7, r3
   1694c:	789b      	ldrb	r3, [r3, #2]
   1694e:	2b00      	cmp	r3, #0
   16950:	d003      	beq.n	1695a <SecureElementDeriveAndStoreKey+0x5a>
   16952:	1dfb      	adds	r3, r7, #7
   16954:	781b      	ldrb	r3, [r3, #0]
   16956:	2b01      	cmp	r3, #1
   16958:	d101      	bne.n	1695e <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   1695a:	2303      	movs	r3, #3
   1695c:	e04b      	b.n	169f6 <SecureElementDeriveAndStoreKey+0xf6>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
   1695e:	68bb      	ldr	r3, [r7, #8]
   16960:	781a      	ldrb	r2, [r3, #0]
   16962:	2324      	movs	r3, #36	; 0x24
   16964:	18fb      	adds	r3, r7, r3
   16966:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
   16968:	68bb      	ldr	r3, [r7, #8]
   1696a:	3301      	adds	r3, #1
   1696c:	781b      	ldrb	r3, [r3, #0]
   1696e:	021b      	lsls	r3, r3, #8
   16970:	b21a      	sxth	r2, r3
   16972:	2324      	movs	r3, #36	; 0x24
   16974:	18fb      	adds	r3, r7, r3
   16976:	2100      	movs	r1, #0
   16978:	5e5b      	ldrsh	r3, [r3, r1]
   1697a:	4313      	orrs	r3, r2
   1697c:	b21a      	sxth	r2, r3
   1697e:	2324      	movs	r3, #36	; 0x24
   16980:	18fb      	adds	r3, r7, r3
   16982:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
   16984:	1dbb      	adds	r3, r7, #6
   16986:	781b      	ldrb	r3, [r3, #0]
   16988:	2b7f      	cmp	r3, #127	; 0x7f
   1698a:	d108      	bne.n	1699e <SecureElementDeriveAndStoreKey+0x9e>
   1698c:	2324      	movs	r3, #36	; 0x24
   1698e:	18fb      	adds	r3, r7, r3
   16990:	881b      	ldrh	r3, [r3, #0]
   16992:	2b0f      	cmp	r3, #15
   16994:	d803      	bhi.n	1699e <SecureElementDeriveAndStoreKey+0x9e>
    {
        return retval;
   16996:	2327      	movs	r3, #39	; 0x27
   16998:	18fb      	adds	r3, r7, r3
   1699a:	781b      	ldrb	r3, [r3, #0]
   1699c:	e02b      	b.n	169f6 <SecureElementDeriveAndStoreKey+0xf6>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
   1699e:	2327      	movs	r3, #39	; 0x27
   169a0:	18fc      	adds	r4, r7, r3
   169a2:	2314      	movs	r3, #20
   169a4:	18f9      	adds	r1, r7, r3
   169a6:	1dfb      	adds	r3, r7, #7
   169a8:	781a      	ldrb	r2, [r3, #0]
   169aa:	68b8      	ldr	r0, [r7, #8]
   169ac:	000b      	movs	r3, r1
   169ae:	2110      	movs	r1, #16
   169b0:	4d14      	ldr	r5, [pc, #80]	; (16a04 <SecureElementDeriveAndStoreKey+0x104>)
   169b2:	47a8      	blx	r5
   169b4:	0003      	movs	r3, r0
   169b6:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   169b8:	2327      	movs	r3, #39	; 0x27
   169ba:	18fb      	adds	r3, r7, r3
   169bc:	781b      	ldrb	r3, [r3, #0]
   169be:	2b00      	cmp	r3, #0
   169c0:	d003      	beq.n	169ca <SecureElementDeriveAndStoreKey+0xca>
    {
        return retval;
   169c2:	2327      	movs	r3, #39	; 0x27
   169c4:	18fb      	adds	r3, r7, r3
   169c6:	781b      	ldrb	r3, [r3, #0]
   169c8:	e015      	b.n	169f6 <SecureElementDeriveAndStoreKey+0xf6>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
   169ca:	2327      	movs	r3, #39	; 0x27
   169cc:	18fc      	adds	r4, r7, r3
   169ce:	2314      	movs	r3, #20
   169d0:	18fa      	adds	r2, r7, r3
   169d2:	1dbb      	adds	r3, r7, #6
   169d4:	781b      	ldrb	r3, [r3, #0]
   169d6:	0011      	movs	r1, r2
   169d8:	0018      	movs	r0, r3
   169da:	4b0b      	ldr	r3, [pc, #44]	; (16a08 <SecureElementDeriveAndStoreKey+0x108>)
   169dc:	4798      	blx	r3
   169de:	0003      	movs	r3, r0
   169e0:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   169e2:	2327      	movs	r3, #39	; 0x27
   169e4:	18fb      	adds	r3, r7, r3
   169e6:	781b      	ldrb	r3, [r3, #0]
   169e8:	2b00      	cmp	r3, #0
   169ea:	d003      	beq.n	169f4 <SecureElementDeriveAndStoreKey+0xf4>
    {
        return retval;
   169ec:	2327      	movs	r3, #39	; 0x27
   169ee:	18fb      	adds	r3, r7, r3
   169f0:	781b      	ldrb	r3, [r3, #0]
   169f2:	e000      	b.n	169f6 <SecureElementDeriveAndStoreKey+0xf6>
    }

    return SECURE_ELEMENT_SUCCESS;
   169f4:	2300      	movs	r3, #0
}
   169f6:	0018      	movs	r0, r3
   169f8:	46bd      	mov	sp, r7
   169fa:	b00a      	add	sp, #40	; 0x28
   169fc:	bdb0      	pop	{r4, r5, r7, pc}
   169fe:	46c0      	nop			; (mov r8, r8)
   16a00:	00019be9 	.word	0x00019be9
   16a04:	00016811 	.word	0x00016811
   16a08:	00016635 	.word	0x00016635

00016a0c <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
   16a0c:	b580      	push	{r7, lr}
   16a0e:	b082      	sub	sp, #8
   16a10:	af00      	add	r7, sp, #0
   16a12:	6078      	str	r0, [r7, #4]
    DelayMsMcu( ms );
   16a14:	687b      	ldr	r3, [r7, #4]
   16a16:	0018      	movs	r0, r3
   16a18:	4b02      	ldr	r3, [pc, #8]	; (16a24 <DelayMs+0x18>)
   16a1a:	4798      	blx	r3
}
   16a1c:	46c0      	nop			; (mov r8, r8)
   16a1e:	46bd      	mov	sp, r7
   16a20:	b002      	add	sp, #8
   16a22:	bd80      	pop	{r7, pc}
   16a24:	00001585 	.word	0x00001585

00016a28 <GpioInit>:
 * \author    Gregory Cristian ( Semtech )
 */
#include "gpio-board.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
   16a28:	b590      	push	{r4, r7, lr}
   16a2a:	b085      	sub	sp, #20
   16a2c:	af02      	add	r7, sp, #8
   16a2e:	6078      	str	r0, [r7, #4]
   16a30:	000c      	movs	r4, r1
   16a32:	0010      	movs	r0, r2
   16a34:	0019      	movs	r1, r3
   16a36:	1cfb      	adds	r3, r7, #3
   16a38:	1c22      	adds	r2, r4, #0
   16a3a:	701a      	strb	r2, [r3, #0]
   16a3c:	1cbb      	adds	r3, r7, #2
   16a3e:	1c02      	adds	r2, r0, #0
   16a40:	701a      	strb	r2, [r3, #0]
   16a42:	1c7b      	adds	r3, r7, #1
   16a44:	1c0a      	adds	r2, r1, #0
   16a46:	701a      	strb	r2, [r3, #0]
    GpioMcuInit( obj, pin, mode, config, type, value );
   16a48:	1c7b      	adds	r3, r7, #1
   16a4a:	781c      	ldrb	r4, [r3, #0]
   16a4c:	1cbb      	adds	r3, r7, #2
   16a4e:	781a      	ldrb	r2, [r3, #0]
   16a50:	1cfb      	adds	r3, r7, #3
   16a52:	2100      	movs	r1, #0
   16a54:	5659      	ldrsb	r1, [r3, r1]
   16a56:	6878      	ldr	r0, [r7, #4]
   16a58:	69fb      	ldr	r3, [r7, #28]
   16a5a:	9301      	str	r3, [sp, #4]
   16a5c:	2318      	movs	r3, #24
   16a5e:	18fb      	adds	r3, r7, r3
   16a60:	781b      	ldrb	r3, [r3, #0]
   16a62:	9300      	str	r3, [sp, #0]
   16a64:	0023      	movs	r3, r4
   16a66:	4c03      	ldr	r4, [pc, #12]	; (16a74 <GpioInit+0x4c>)
   16a68:	47a0      	blx	r4
}
   16a6a:	46c0      	nop			; (mov r8, r8)
   16a6c:	46bd      	mov	sp, r7
   16a6e:	b003      	add	sp, #12
   16a70:	bd90      	pop	{r4, r7, pc}
   16a72:	46c0      	nop			; (mov r8, r8)
   16a74:	00001a45 	.word	0x00001a45

00016a78 <GpioWrite>:
{
    GpioMcuRemoveInterrupt( obj );
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
   16a78:	b580      	push	{r7, lr}
   16a7a:	b082      	sub	sp, #8
   16a7c:	af00      	add	r7, sp, #0
   16a7e:	6078      	str	r0, [r7, #4]
   16a80:	6039      	str	r1, [r7, #0]
    GpioMcuWrite( obj, value );
   16a82:	683a      	ldr	r2, [r7, #0]
   16a84:	687b      	ldr	r3, [r7, #4]
   16a86:	0011      	movs	r1, r2
   16a88:	0018      	movs	r0, r3
   16a8a:	4b03      	ldr	r3, [pc, #12]	; (16a98 <GpioWrite+0x20>)
   16a8c:	4798      	blx	r3
}
   16a8e:	46c0      	nop			; (mov r8, r8)
   16a90:	46bd      	mov	sp, r7
   16a92:	b002      	add	sp, #8
   16a94:	bd80      	pop	{r7, pc}
   16a96:	46c0      	nop			; (mov r8, r8)
   16a98:	00001ae1 	.word	0x00001ae1

00016a9c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
   16a9c:	b082      	sub	sp, #8
   16a9e:	b580      	push	{r7, lr}
   16aa0:	b086      	sub	sp, #24
   16aa2:	af00      	add	r7, sp, #0
   16aa4:	60f8      	str	r0, [r7, #12]
   16aa6:	1d38      	adds	r0, r7, #4
   16aa8:	6001      	str	r1, [r0, #0]
   16aaa:	6042      	str	r2, [r0, #4]
   16aac:	2204      	movs	r2, #4
   16aae:	2120      	movs	r1, #32
   16ab0:	468c      	mov	ip, r1
   16ab2:	44bc      	add	ip, r7
   16ab4:	4462      	add	r2, ip
   16ab6:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
   16ab8:	2310      	movs	r3, #16
   16aba:	18fb      	adds	r3, r7, r3
   16abc:	2200      	movs	r2, #0
   16abe:	601a      	str	r2, [r3, #0]
   16ac0:	2310      	movs	r3, #16
   16ac2:	18fb      	adds	r3, r7, r3
   16ac4:	2200      	movs	r2, #0
   16ac6:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
   16ac8:	1d3b      	adds	r3, r7, #4
   16aca:	681a      	ldr	r2, [r3, #0]
   16acc:	2304      	movs	r3, #4
   16ace:	2120      	movs	r1, #32
   16ad0:	468c      	mov	ip, r1
   16ad2:	44bc      	add	ip, r7
   16ad4:	4463      	add	r3, ip
   16ad6:	681b      	ldr	r3, [r3, #0]
   16ad8:	18d2      	adds	r2, r2, r3
   16ada:	2310      	movs	r3, #16
   16adc:	18fb      	adds	r3, r7, r3
   16ade:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   16ae0:	1d3b      	adds	r3, r7, #4
   16ae2:	2204      	movs	r2, #4
   16ae4:	5e9b      	ldrsh	r3, [r3, r2]
   16ae6:	b29a      	uxth	r2, r3
   16ae8:	2304      	movs	r3, #4
   16aea:	2120      	movs	r1, #32
   16aec:	468c      	mov	ip, r1
   16aee:	44bc      	add	ip, r7
   16af0:	4463      	add	r3, ip
   16af2:	2104      	movs	r1, #4
   16af4:	5e5b      	ldrsh	r3, [r3, r1]
   16af6:	b29b      	uxth	r3, r3
   16af8:	18d3      	adds	r3, r2, r3
   16afa:	b29b      	uxth	r3, r3
   16afc:	b21a      	sxth	r2, r3
   16afe:	2310      	movs	r3, #16
   16b00:	18fb      	adds	r3, r7, r3
   16b02:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
   16b04:	2310      	movs	r3, #16
   16b06:	18fb      	adds	r3, r7, r3
   16b08:	2204      	movs	r2, #4
   16b0a:	5e9b      	ldrsh	r3, [r3, r2]
   16b0c:	4a11      	ldr	r2, [pc, #68]	; (16b54 <SysTimeAdd+0xb8>)
   16b0e:	4293      	cmp	r3, r2
   16b10:	dd13      	ble.n	16b3a <SysTimeAdd+0x9e>
    {
        c.Seconds++;
   16b12:	2310      	movs	r3, #16
   16b14:	18fb      	adds	r3, r7, r3
   16b16:	681b      	ldr	r3, [r3, #0]
   16b18:	1c5a      	adds	r2, r3, #1
   16b1a:	2310      	movs	r3, #16
   16b1c:	18fb      	adds	r3, r7, r3
   16b1e:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
   16b20:	2310      	movs	r3, #16
   16b22:	18fb      	adds	r3, r7, r3
   16b24:	2204      	movs	r2, #4
   16b26:	5e9b      	ldrsh	r3, [r3, r2]
   16b28:	b29b      	uxth	r3, r3
   16b2a:	4a0b      	ldr	r2, [pc, #44]	; (16b58 <SysTimeAdd+0xbc>)
   16b2c:	4694      	mov	ip, r2
   16b2e:	4463      	add	r3, ip
   16b30:	b29b      	uxth	r3, r3
   16b32:	b21a      	sxth	r2, r3
   16b34:	2310      	movs	r3, #16
   16b36:	18fb      	adds	r3, r7, r3
   16b38:	809a      	strh	r2, [r3, #4]
    }
    return c;
   16b3a:	68fb      	ldr	r3, [r7, #12]
   16b3c:	2210      	movs	r2, #16
   16b3e:	18ba      	adds	r2, r7, r2
   16b40:	ca03      	ldmia	r2!, {r0, r1}
   16b42:	c303      	stmia	r3!, {r0, r1}
}
   16b44:	68f8      	ldr	r0, [r7, #12]
   16b46:	46bd      	mov	sp, r7
   16b48:	b006      	add	sp, #24
   16b4a:	bc80      	pop	{r7}
   16b4c:	bc08      	pop	{r3}
   16b4e:	b002      	add	sp, #8
   16b50:	4718      	bx	r3
   16b52:	46c0      	nop			; (mov r8, r8)
   16b54:	000003e7 	.word	0x000003e7
   16b58:	fffffc18 	.word	0xfffffc18

00016b5c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
   16b5c:	b082      	sub	sp, #8
   16b5e:	b580      	push	{r7, lr}
   16b60:	b086      	sub	sp, #24
   16b62:	af00      	add	r7, sp, #0
   16b64:	60f8      	str	r0, [r7, #12]
   16b66:	1d38      	adds	r0, r7, #4
   16b68:	6001      	str	r1, [r0, #0]
   16b6a:	6042      	str	r2, [r0, #4]
   16b6c:	2204      	movs	r2, #4
   16b6e:	2120      	movs	r1, #32
   16b70:	468c      	mov	ip, r1
   16b72:	44bc      	add	ip, r7
   16b74:	4462      	add	r2, ip
   16b76:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
   16b78:	2310      	movs	r3, #16
   16b7a:	18fb      	adds	r3, r7, r3
   16b7c:	2200      	movs	r2, #0
   16b7e:	601a      	str	r2, [r3, #0]
   16b80:	2310      	movs	r3, #16
   16b82:	18fb      	adds	r3, r7, r3
   16b84:	2200      	movs	r2, #0
   16b86:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
   16b88:	1d3b      	adds	r3, r7, #4
   16b8a:	681a      	ldr	r2, [r3, #0]
   16b8c:	2304      	movs	r3, #4
   16b8e:	2120      	movs	r1, #32
   16b90:	468c      	mov	ip, r1
   16b92:	44bc      	add	ip, r7
   16b94:	4463      	add	r3, ip
   16b96:	681b      	ldr	r3, [r3, #0]
   16b98:	1ad2      	subs	r2, r2, r3
   16b9a:	2310      	movs	r3, #16
   16b9c:	18fb      	adds	r3, r7, r3
   16b9e:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   16ba0:	1d3b      	adds	r3, r7, #4
   16ba2:	2204      	movs	r2, #4
   16ba4:	5e9b      	ldrsh	r3, [r3, r2]
   16ba6:	b29a      	uxth	r2, r3
   16ba8:	2304      	movs	r3, #4
   16baa:	2120      	movs	r1, #32
   16bac:	468c      	mov	ip, r1
   16bae:	44bc      	add	ip, r7
   16bb0:	4463      	add	r3, ip
   16bb2:	2104      	movs	r1, #4
   16bb4:	5e5b      	ldrsh	r3, [r3, r1]
   16bb6:	b29b      	uxth	r3, r3
   16bb8:	1ad3      	subs	r3, r2, r3
   16bba:	b29b      	uxth	r3, r3
   16bbc:	b21a      	sxth	r2, r3
   16bbe:	2310      	movs	r3, #16
   16bc0:	18fb      	adds	r3, r7, r3
   16bc2:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
   16bc4:	2310      	movs	r3, #16
   16bc6:	18fb      	adds	r3, r7, r3
   16bc8:	2204      	movs	r2, #4
   16bca:	5e9b      	ldrsh	r3, [r3, r2]
   16bcc:	2b00      	cmp	r3, #0
   16bce:	da14      	bge.n	16bfa <SysTimeSub+0x9e>
    {
        c.Seconds--;
   16bd0:	2310      	movs	r3, #16
   16bd2:	18fb      	adds	r3, r7, r3
   16bd4:	681b      	ldr	r3, [r3, #0]
   16bd6:	1e5a      	subs	r2, r3, #1
   16bd8:	2310      	movs	r3, #16
   16bda:	18fb      	adds	r3, r7, r3
   16bdc:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
   16bde:	2310      	movs	r3, #16
   16be0:	18fb      	adds	r3, r7, r3
   16be2:	2204      	movs	r2, #4
   16be4:	5e9b      	ldrsh	r3, [r3, r2]
   16be6:	b29b      	uxth	r3, r3
   16be8:	22fa      	movs	r2, #250	; 0xfa
   16bea:	0092      	lsls	r2, r2, #2
   16bec:	4694      	mov	ip, r2
   16bee:	4463      	add	r3, ip
   16bf0:	b29b      	uxth	r3, r3
   16bf2:	b21a      	sxth	r2, r3
   16bf4:	2310      	movs	r3, #16
   16bf6:	18fb      	adds	r3, r7, r3
   16bf8:	809a      	strh	r2, [r3, #4]
    }
    return c;
   16bfa:	68fb      	ldr	r3, [r7, #12]
   16bfc:	2210      	movs	r2, #16
   16bfe:	18ba      	adds	r2, r7, r2
   16c00:	ca03      	ldmia	r2!, {r0, r1}
   16c02:	c303      	stmia	r3!, {r0, r1}
}
   16c04:	68f8      	ldr	r0, [r7, #12]
   16c06:	46bd      	mov	sp, r7
   16c08:	b006      	add	sp, #24
   16c0a:	bc80      	pop	{r7}
   16c0c:	bc08      	pop	{r3}
   16c0e:	b002      	add	sp, #8
   16c10:	4718      	bx	r3
	...

00016c14 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
   16c14:	b590      	push	{r4, r7, lr}
   16c16:	b089      	sub	sp, #36	; 0x24
   16c18:	af02      	add	r7, sp, #8
   16c1a:	003b      	movs	r3, r7
   16c1c:	6018      	str	r0, [r3, #0]
   16c1e:	6059      	str	r1, [r3, #4]
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   16c20:	2308      	movs	r3, #8
   16c22:	18fb      	adds	r3, r7, r3
   16c24:	2200      	movs	r2, #0
   16c26:	601a      	str	r2, [r3, #0]
   16c28:	2308      	movs	r3, #8
   16c2a:	18fb      	adds	r3, r7, r3
   16c2c:	2200      	movs	r2, #0
   16c2e:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   16c30:	2308      	movs	r3, #8
   16c32:	18fb      	adds	r3, r7, r3
   16c34:	3304      	adds	r3, #4
   16c36:	0018      	movs	r0, r3
   16c38:	4b11      	ldr	r3, [pc, #68]	; (16c80 <SysTimeSet+0x6c>)
   16c3a:	4798      	blx	r3
   16c3c:	0002      	movs	r2, r0
   16c3e:	2308      	movs	r3, #8
   16c40:	18fb      	adds	r3, r7, r3
   16c42:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );
   16c44:	2310      	movs	r3, #16
   16c46:	18fc      	adds	r4, r7, r3
   16c48:	2308      	movs	r3, #8
   16c4a:	18fb      	adds	r3, r7, r3
   16c4c:	003a      	movs	r2, r7
   16c4e:	4669      	mov	r1, sp
   16c50:	6858      	ldr	r0, [r3, #4]
   16c52:	6008      	str	r0, [r1, #0]
   16c54:	681b      	ldr	r3, [r3, #0]
   16c56:	6811      	ldr	r1, [r2, #0]
   16c58:	6852      	ldr	r2, [r2, #4]
   16c5a:	0020      	movs	r0, r4
   16c5c:	4c09      	ldr	r4, [pc, #36]	; (16c84 <SysTimeSet+0x70>)
   16c5e:	47a0      	blx	r4

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
   16c60:	2310      	movs	r3, #16
   16c62:	18fb      	adds	r3, r7, r3
   16c64:	681a      	ldr	r2, [r3, #0]
   16c66:	2310      	movs	r3, #16
   16c68:	18fb      	adds	r3, r7, r3
   16c6a:	2104      	movs	r1, #4
   16c6c:	5e5b      	ldrsh	r3, [r3, r1]
   16c6e:	0019      	movs	r1, r3
   16c70:	0010      	movs	r0, r2
   16c72:	4b05      	ldr	r3, [pc, #20]	; (16c88 <SysTimeSet+0x74>)
   16c74:	4798      	blx	r3
}
   16c76:	46c0      	nop			; (mov r8, r8)
   16c78:	46bd      	mov	sp, r7
   16c7a:	b007      	add	sp, #28
   16c7c:	bd90      	pop	{r4, r7, pc}
   16c7e:	46c0      	nop			; (mov r8, r8)
   16c80:	000045c1 	.word	0x000045c1
   16c84:	00016b5d 	.word	0x00016b5d
   16c88:	00004605 	.word	0x00004605

00016c8c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
   16c8c:	b590      	push	{r4, r7, lr}
   16c8e:	b08b      	sub	sp, #44	; 0x2c
   16c90:	af02      	add	r7, sp, #8
   16c92:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   16c94:	2318      	movs	r3, #24
   16c96:	18fb      	adds	r3, r7, r3
   16c98:	2200      	movs	r2, #0
   16c9a:	601a      	str	r2, [r3, #0]
   16c9c:	2318      	movs	r3, #24
   16c9e:	18fb      	adds	r3, r7, r3
   16ca0:	2200      	movs	r2, #0
   16ca2:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
   16ca4:	2310      	movs	r3, #16
   16ca6:	18fb      	adds	r3, r7, r3
   16ca8:	2200      	movs	r2, #0
   16caa:	601a      	str	r2, [r3, #0]
   16cac:	2310      	movs	r3, #16
   16cae:	18fb      	adds	r3, r7, r3
   16cb0:	2200      	movs	r2, #0
   16cb2:	809a      	strh	r2, [r3, #4]
    SysTime_t deltaTime;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   16cb4:	2318      	movs	r3, #24
   16cb6:	18fb      	adds	r3, r7, r3
   16cb8:	3304      	adds	r3, #4
   16cba:	0018      	movs	r0, r3
   16cbc:	4b13      	ldr	r3, [pc, #76]	; (16d0c <SysTimeGet+0x80>)
   16cbe:	4798      	blx	r3
   16cc0:	0002      	movs	r2, r0
   16cc2:	2318      	movs	r3, #24
   16cc4:	18fb      	adds	r3, r7, r3
   16cc6:	601a      	str	r2, [r3, #0]

    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
   16cc8:	2308      	movs	r3, #8
   16cca:	18fb      	adds	r3, r7, r3
   16ccc:	1d1a      	adds	r2, r3, #4
   16cce:	2308      	movs	r3, #8
   16cd0:	18fb      	adds	r3, r7, r3
   16cd2:	0011      	movs	r1, r2
   16cd4:	0018      	movs	r0, r3
   16cd6:	4b0e      	ldr	r3, [pc, #56]	; (16d10 <SysTimeGet+0x84>)
   16cd8:	4798      	blx	r3

    sysTime = SysTimeAdd( deltaTime, calendarTime );
   16cda:	2310      	movs	r3, #16
   16cdc:	18fc      	adds	r4, r7, r3
   16cde:	2318      	movs	r3, #24
   16ce0:	18fb      	adds	r3, r7, r3
   16ce2:	2208      	movs	r2, #8
   16ce4:	18ba      	adds	r2, r7, r2
   16ce6:	4669      	mov	r1, sp
   16ce8:	6858      	ldr	r0, [r3, #4]
   16cea:	6008      	str	r0, [r1, #0]
   16cec:	681b      	ldr	r3, [r3, #0]
   16cee:	6811      	ldr	r1, [r2, #0]
   16cf0:	6852      	ldr	r2, [r2, #4]
   16cf2:	0020      	movs	r0, r4
   16cf4:	4c07      	ldr	r4, [pc, #28]	; (16d14 <SysTimeGet+0x88>)
   16cf6:	47a0      	blx	r4

    return sysTime;
   16cf8:	687b      	ldr	r3, [r7, #4]
   16cfa:	2210      	movs	r2, #16
   16cfc:	18ba      	adds	r2, r7, r2
   16cfe:	ca03      	ldmia	r2!, {r0, r1}
   16d00:	c303      	stmia	r3!, {r0, r1}
}
   16d02:	6878      	ldr	r0, [r7, #4]
   16d04:	46bd      	mov	sp, r7
   16d06:	b009      	add	sp, #36	; 0x24
   16d08:	bd90      	pop	{r4, r7, pc}
   16d0a:	46c0      	nop			; (mov r8, r8)
   16d0c:	000045c1 	.word	0x000045c1
   16d10:	00004645 	.word	0x00004645
   16d14:	00016a9d 	.word	0x00016a9d

00016d18 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
   16d18:	b580      	push	{r7, lr}
   16d1a:	b084      	sub	sp, #16
   16d1c:	af00      	add	r7, sp, #0
   16d1e:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   16d20:	2308      	movs	r3, #8
   16d22:	18fb      	adds	r3, r7, r3
   16d24:	2200      	movs	r2, #0
   16d26:	601a      	str	r2, [r3, #0]
   16d28:	2308      	movs	r3, #8
   16d2a:	18fb      	adds	r3, r7, r3
   16d2c:	2200      	movs	r2, #0
   16d2e:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   16d30:	2308      	movs	r3, #8
   16d32:	18fb      	adds	r3, r7, r3
   16d34:	3304      	adds	r3, #4
   16d36:	0018      	movs	r0, r3
   16d38:	4b07      	ldr	r3, [pc, #28]	; (16d58 <SysTimeGetMcuTime+0x40>)
   16d3a:	4798      	blx	r3
   16d3c:	0002      	movs	r2, r0
   16d3e:	2308      	movs	r3, #8
   16d40:	18fb      	adds	r3, r7, r3
   16d42:	601a      	str	r2, [r3, #0]

    return calendarTime;
   16d44:	687b      	ldr	r3, [r7, #4]
   16d46:	2208      	movs	r2, #8
   16d48:	18ba      	adds	r2, r7, r2
   16d4a:	ca03      	ldmia	r2!, {r0, r1}
   16d4c:	c303      	stmia	r3!, {r0, r1}
}
   16d4e:	6878      	ldr	r0, [r7, #4]
   16d50:	46bd      	mov	sp, r7
   16d52:	b004      	add	sp, #16
   16d54:	bd80      	pop	{r7, pc}
   16d56:	46c0      	nop			; (mov r8, r8)
   16d58:	000045c1 	.word	0x000045c1

00016d5c <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b082      	sub	sp, #8
   16d60:	af00      	add	r7, sp, #0
   16d62:	6078      	str	r0, [r7, #4]
   16d64:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
   16d66:	687b      	ldr	r3, [r7, #4]
   16d68:	2200      	movs	r2, #0
   16d6a:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
   16d6c:	687b      	ldr	r3, [r7, #4]
   16d6e:	2200      	movs	r2, #0
   16d70:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
   16d72:	687b      	ldr	r3, [r7, #4]
   16d74:	2200      	movs	r2, #0
   16d76:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
   16d78:	687b      	ldr	r3, [r7, #4]
   16d7a:	683a      	ldr	r2, [r7, #0]
   16d7c:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
   16d7e:	687b      	ldr	r3, [r7, #4]
   16d80:	2200      	movs	r2, #0
   16d82:	611a      	str	r2, [r3, #16]
}
   16d84:	46c0      	nop			; (mov r8, r8)
   16d86:	46bd      	mov	sp, r7
   16d88:	b002      	add	sp, #8
   16d8a:	bd80      	pop	{r7, pc}

00016d8c <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
   16d8c:	b580      	push	{r7, lr}
   16d8e:	b084      	sub	sp, #16
   16d90:	af00      	add	r7, sp, #0
   16d92:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
   16d94:	2300      	movs	r3, #0
   16d96:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
   16d98:	2308      	movs	r3, #8
   16d9a:	18fb      	adds	r3, r7, r3
   16d9c:	0018      	movs	r0, r3
   16d9e:	4b22      	ldr	r3, [pc, #136]	; (16e28 <TimerStart+0x9c>)
   16da0:	4798      	blx	r3

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   16da2:	687b      	ldr	r3, [r7, #4]
   16da4:	2b00      	cmp	r3, #0
   16da6:	d005      	beq.n	16db4 <TimerStart+0x28>
   16da8:	687b      	ldr	r3, [r7, #4]
   16daa:	0018      	movs	r0, r3
   16dac:	4b1f      	ldr	r3, [pc, #124]	; (16e2c <TimerStart+0xa0>)
   16dae:	4798      	blx	r3
   16db0:	1e03      	subs	r3, r0, #0
   16db2:	d005      	beq.n	16dc0 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
   16db4:	2308      	movs	r3, #8
   16db6:	18fb      	adds	r3, r7, r3
   16db8:	0018      	movs	r0, r3
   16dba:	4b1d      	ldr	r3, [pc, #116]	; (16e30 <TimerStart+0xa4>)
   16dbc:	4798      	blx	r3
   16dbe:	e030      	b.n	16e22 <TimerStart+0x96>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
   16dc0:	687b      	ldr	r3, [r7, #4]
   16dc2:	685a      	ldr	r2, [r3, #4]
   16dc4:	687b      	ldr	r3, [r7, #4]
   16dc6:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
   16dc8:	687b      	ldr	r3, [r7, #4]
   16dca:	2200      	movs	r2, #0
   16dcc:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
   16dce:	4b19      	ldr	r3, [pc, #100]	; (16e34 <TimerStart+0xa8>)
   16dd0:	681b      	ldr	r3, [r3, #0]
   16dd2:	2b00      	cmp	r3, #0
   16dd4:	d106      	bne.n	16de4 <TimerStart+0x58>
    {
        RtcSetTimerContext( );
   16dd6:	4b18      	ldr	r3, [pc, #96]	; (16e38 <TimerStart+0xac>)
   16dd8:	4798      	blx	r3
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
   16dda:	687b      	ldr	r3, [r7, #4]
   16ddc:	0018      	movs	r0, r3
   16dde:	4b17      	ldr	r3, [pc, #92]	; (16e3c <TimerStart+0xb0>)
   16de0:	4798      	blx	r3
   16de2:	e019      	b.n	16e18 <TimerStart+0x8c>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
   16de4:	4b16      	ldr	r3, [pc, #88]	; (16e40 <TimerStart+0xb4>)
   16de6:	4798      	blx	r3
   16de8:	0003      	movs	r3, r0
   16dea:	60fb      	str	r3, [r7, #12]
        obj->Timestamp += elapsedTime;
   16dec:	687b      	ldr	r3, [r7, #4]
   16dee:	681a      	ldr	r2, [r3, #0]
   16df0:	68fb      	ldr	r3, [r7, #12]
   16df2:	18d2      	adds	r2, r2, r3
   16df4:	687b      	ldr	r3, [r7, #4]
   16df6:	601a      	str	r2, [r3, #0]
      
        if( obj->Timestamp < TimerListHead->Timestamp )
   16df8:	687b      	ldr	r3, [r7, #4]
   16dfa:	681a      	ldr	r2, [r3, #0]
   16dfc:	4b0d      	ldr	r3, [pc, #52]	; (16e34 <TimerStart+0xa8>)
   16dfe:	681b      	ldr	r3, [r3, #0]
   16e00:	681b      	ldr	r3, [r3, #0]
   16e02:	429a      	cmp	r2, r3
   16e04:	d204      	bcs.n	16e10 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
   16e06:	687b      	ldr	r3, [r7, #4]
   16e08:	0018      	movs	r0, r3
   16e0a:	4b0c      	ldr	r3, [pc, #48]	; (16e3c <TimerStart+0xb0>)
   16e0c:	4798      	blx	r3
   16e0e:	e003      	b.n	16e18 <TimerStart+0x8c>
        }
        else
        {
            TimerInsertTimer( obj );
   16e10:	687b      	ldr	r3, [r7, #4]
   16e12:	0018      	movs	r0, r3
   16e14:	4b0b      	ldr	r3, [pc, #44]	; (16e44 <TimerStart+0xb8>)
   16e16:	4798      	blx	r3
        }
    }
    CRITICAL_SECTION_END( );
   16e18:	2308      	movs	r3, #8
   16e1a:	18fb      	adds	r3, r7, r3
   16e1c:	0018      	movs	r0, r3
   16e1e:	4b04      	ldr	r3, [pc, #16]	; (16e30 <TimerStart+0xa4>)
   16e20:	4798      	blx	r3
}
   16e22:	46bd      	mov	sp, r7
   16e24:	b004      	add	sp, #16
   16e26:	bd80      	pop	{r7, pc}
   16e28:	000013b9 	.word	0x000013b9
   16e2c:	000170e1 	.word	0x000170e1
   16e30:	000013d7 	.word	0x000013d7
   16e34:	20001acc 	.word	0x20001acc
   16e38:	00004449 	.word	0x00004449
   16e3c:	00016ea5 	.word	0x00016ea5
   16e40:	000045a1 	.word	0x000045a1
   16e44:	00016e49 	.word	0x00016e49

00016e48 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
   16e48:	b580      	push	{r7, lr}
   16e4a:	b084      	sub	sp, #16
   16e4c:	af00      	add	r7, sp, #0
   16e4e:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   16e50:	4b13      	ldr	r3, [pc, #76]	; (16ea0 <TimerInsertTimer+0x58>)
   16e52:	681b      	ldr	r3, [r3, #0]
   16e54:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
   16e56:	4b12      	ldr	r3, [pc, #72]	; (16ea0 <TimerInsertTimer+0x58>)
   16e58:	681b      	ldr	r3, [r3, #0]
   16e5a:	691b      	ldr	r3, [r3, #16]
   16e5c:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
   16e5e:	e012      	b.n	16e86 <TimerInsertTimer+0x3e>
    {  
        if( obj->Timestamp > next->Timestamp )
   16e60:	687b      	ldr	r3, [r7, #4]
   16e62:	681a      	ldr	r2, [r3, #0]
   16e64:	68bb      	ldr	r3, [r7, #8]
   16e66:	681b      	ldr	r3, [r3, #0]
   16e68:	429a      	cmp	r2, r3
   16e6a:	d905      	bls.n	16e78 <TimerInsertTimer+0x30>
        {
            cur = next;
   16e6c:	68bb      	ldr	r3, [r7, #8]
   16e6e:	60fb      	str	r3, [r7, #12]
            next = next->Next;
   16e70:	68bb      	ldr	r3, [r7, #8]
   16e72:	691b      	ldr	r3, [r3, #16]
   16e74:	60bb      	str	r3, [r7, #8]
   16e76:	e006      	b.n	16e86 <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
   16e78:	68fb      	ldr	r3, [r7, #12]
   16e7a:	687a      	ldr	r2, [r7, #4]
   16e7c:	611a      	str	r2, [r3, #16]
            obj->Next = next;
   16e7e:	687b      	ldr	r3, [r7, #4]
   16e80:	68ba      	ldr	r2, [r7, #8]
   16e82:	611a      	str	r2, [r3, #16]
            return;
   16e84:	e009      	b.n	16e9a <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
   16e86:	68fb      	ldr	r3, [r7, #12]
   16e88:	691b      	ldr	r3, [r3, #16]
   16e8a:	2b00      	cmp	r3, #0
   16e8c:	d1e8      	bne.n	16e60 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
   16e8e:	68fb      	ldr	r3, [r7, #12]
   16e90:	687a      	ldr	r2, [r7, #4]
   16e92:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
   16e94:	687b      	ldr	r3, [r7, #4]
   16e96:	2200      	movs	r2, #0
   16e98:	611a      	str	r2, [r3, #16]
}
   16e9a:	46bd      	mov	sp, r7
   16e9c:	b004      	add	sp, #16
   16e9e:	bd80      	pop	{r7, pc}
   16ea0:	20001acc 	.word	0x20001acc

00016ea4 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
   16ea4:	b580      	push	{r7, lr}
   16ea6:	b084      	sub	sp, #16
   16ea8:	af00      	add	r7, sp, #0
   16eaa:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   16eac:	4b0b      	ldr	r3, [pc, #44]	; (16edc <TimerInsertNewHeadTimer+0x38>)
   16eae:	681b      	ldr	r3, [r3, #0]
   16eb0:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
   16eb2:	68fb      	ldr	r3, [r7, #12]
   16eb4:	2b00      	cmp	r3, #0
   16eb6:	d002      	beq.n	16ebe <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsRunning = false;
   16eb8:	68fb      	ldr	r3, [r7, #12]
   16eba:	2200      	movs	r2, #0
   16ebc:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
   16ebe:	687b      	ldr	r3, [r7, #4]
   16ec0:	68fa      	ldr	r2, [r7, #12]
   16ec2:	611a      	str	r2, [r3, #16]
    TimerListHead = obj;
   16ec4:	4b05      	ldr	r3, [pc, #20]	; (16edc <TimerInsertNewHeadTimer+0x38>)
   16ec6:	687a      	ldr	r2, [r7, #4]
   16ec8:	601a      	str	r2, [r3, #0]
    TimerSetTimeout( TimerListHead );
   16eca:	4b04      	ldr	r3, [pc, #16]	; (16edc <TimerInsertNewHeadTimer+0x38>)
   16ecc:	681b      	ldr	r3, [r3, #0]
   16ece:	0018      	movs	r0, r3
   16ed0:	4b03      	ldr	r3, [pc, #12]	; (16ee0 <TimerInsertNewHeadTimer+0x3c>)
   16ed2:	4798      	blx	r3
}
   16ed4:	46c0      	nop			; (mov r8, r8)
   16ed6:	46bd      	mov	sp, r7
   16ed8:	b004      	add	sp, #16
   16eda:	bd80      	pop	{r7, pc}
   16edc:	20001acc 	.word	0x20001acc
   16ee0:	000171d9 	.word	0x000171d9

00016ee4 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
   16ee4:	b590      	push	{r4, r7, lr}
   16ee6:	b087      	sub	sp, #28
   16ee8:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
   16eea:	4b39      	ldr	r3, [pc, #228]	; (16fd0 <TimerIrqHandler+0xec>)
   16eec:	4798      	blx	r3
   16eee:	0003      	movs	r3, r0
   16ef0:	613b      	str	r3, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
   16ef2:	4b38      	ldr	r3, [pc, #224]	; (16fd4 <TimerIrqHandler+0xf0>)
   16ef4:	4798      	blx	r3
   16ef6:	0003      	movs	r3, r0
   16ef8:	60fb      	str	r3, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
   16efa:	68fa      	ldr	r2, [r7, #12]
   16efc:	693b      	ldr	r3, [r7, #16]
   16efe:	1ad3      	subs	r3, r2, r3
   16f00:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
   16f02:	4b35      	ldr	r3, [pc, #212]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f04:	681b      	ldr	r3, [r3, #0]
   16f06:	2b00      	cmp	r3, #0
   16f08:	d01c      	beq.n	16f44 <TimerIrqHandler+0x60>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   16f0a:	4b33      	ldr	r3, [pc, #204]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	617b      	str	r3, [r7, #20]
   16f10:	e014      	b.n	16f3c <TimerIrqHandler+0x58>
        {
            next = cur->Next;
   16f12:	697b      	ldr	r3, [r7, #20]
   16f14:	691b      	ldr	r3, [r3, #16]
   16f16:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
   16f18:	687b      	ldr	r3, [r7, #4]
   16f1a:	681a      	ldr	r2, [r3, #0]
   16f1c:	68bb      	ldr	r3, [r7, #8]
   16f1e:	429a      	cmp	r2, r3
   16f20:	d906      	bls.n	16f30 <TimerIrqHandler+0x4c>
            {
                next->Timestamp -= deltaContext;
   16f22:	687b      	ldr	r3, [r7, #4]
   16f24:	681a      	ldr	r2, [r3, #0]
   16f26:	68bb      	ldr	r3, [r7, #8]
   16f28:	1ad2      	subs	r2, r2, r3
   16f2a:	687b      	ldr	r3, [r7, #4]
   16f2c:	601a      	str	r2, [r3, #0]
   16f2e:	e002      	b.n	16f36 <TimerIrqHandler+0x52>
            }
            else
            {
                next->Timestamp = 0;
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	2200      	movs	r2, #0
   16f34:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   16f36:	697b      	ldr	r3, [r7, #20]
   16f38:	691b      	ldr	r3, [r3, #16]
   16f3a:	617b      	str	r3, [r7, #20]
   16f3c:	697b      	ldr	r3, [r7, #20]
   16f3e:	691b      	ldr	r3, [r3, #16]
   16f40:	2b00      	cmp	r3, #0
   16f42:	d1e6      	bne.n	16f12 <TimerIrqHandler+0x2e>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
   16f44:	4b24      	ldr	r3, [pc, #144]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f46:	681b      	ldr	r3, [r3, #0]
   16f48:	2b00      	cmp	r3, #0
   16f4a:	d020      	beq.n	16f8e <TimerIrqHandler+0xaa>
    {
        cur = TimerListHead;
   16f4c:	4b22      	ldr	r3, [pc, #136]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f4e:	681b      	ldr	r3, [r3, #0]
   16f50:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
   16f52:	4b21      	ldr	r3, [pc, #132]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f54:	681b      	ldr	r3, [r3, #0]
   16f56:	691a      	ldr	r2, [r3, #16]
   16f58:	4b1f      	ldr	r3, [pc, #124]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f5a:	601a      	str	r2, [r3, #0]
        ExecuteCallBack( cur->Callback );
   16f5c:	697b      	ldr	r3, [r7, #20]
   16f5e:	68db      	ldr	r3, [r3, #12]
   16f60:	2b00      	cmp	r3, #0
   16f62:	d100      	bne.n	16f66 <TimerIrqHandler+0x82>
   16f64:	e7fe      	b.n	16f64 <TimerIrqHandler+0x80>
   16f66:	697b      	ldr	r3, [r7, #20]
   16f68:	68db      	ldr	r3, [r3, #12]
   16f6a:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   16f6c:	e00f      	b.n	16f8e <TimerIrqHandler+0xaa>
    {
        cur = TimerListHead;
   16f6e:	4b1a      	ldr	r3, [pc, #104]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f70:	681b      	ldr	r3, [r3, #0]
   16f72:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
   16f74:	4b18      	ldr	r3, [pc, #96]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f76:	681b      	ldr	r3, [r3, #0]
   16f78:	691a      	ldr	r2, [r3, #16]
   16f7a:	4b17      	ldr	r3, [pc, #92]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f7c:	601a      	str	r2, [r3, #0]
        ExecuteCallBack( cur->Callback );
   16f7e:	697b      	ldr	r3, [r7, #20]
   16f80:	68db      	ldr	r3, [r3, #12]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d100      	bne.n	16f88 <TimerIrqHandler+0xa4>
   16f86:	e7fe      	b.n	16f86 <TimerIrqHandler+0xa2>
   16f88:	697b      	ldr	r3, [r7, #20]
   16f8a:	68db      	ldr	r3, [r3, #12]
   16f8c:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   16f8e:	4b12      	ldr	r3, [pc, #72]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f90:	681b      	ldr	r3, [r3, #0]
   16f92:	2b00      	cmp	r3, #0
   16f94:	d007      	beq.n	16fa6 <TimerIrqHandler+0xc2>
   16f96:	4b10      	ldr	r3, [pc, #64]	; (16fd8 <TimerIrqHandler+0xf4>)
   16f98:	681b      	ldr	r3, [r3, #0]
   16f9a:	681c      	ldr	r4, [r3, #0]
   16f9c:	4b0f      	ldr	r3, [pc, #60]	; (16fdc <TimerIrqHandler+0xf8>)
   16f9e:	4798      	blx	r3
   16fa0:	0003      	movs	r3, r0
   16fa2:	429c      	cmp	r4, r3
   16fa4:	d3e3      	bcc.n	16f6e <TimerIrqHandler+0x8a>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == false ) )
   16fa6:	4b0c      	ldr	r3, [pc, #48]	; (16fd8 <TimerIrqHandler+0xf4>)
   16fa8:	681b      	ldr	r3, [r3, #0]
   16faa:	2b00      	cmp	r3, #0
   16fac:	d00c      	beq.n	16fc8 <TimerIrqHandler+0xe4>
   16fae:	4b0a      	ldr	r3, [pc, #40]	; (16fd8 <TimerIrqHandler+0xf4>)
   16fb0:	681b      	ldr	r3, [r3, #0]
   16fb2:	7a1b      	ldrb	r3, [r3, #8]
   16fb4:	2201      	movs	r2, #1
   16fb6:	4053      	eors	r3, r2
   16fb8:	b2db      	uxtb	r3, r3
   16fba:	2b00      	cmp	r3, #0
   16fbc:	d004      	beq.n	16fc8 <TimerIrqHandler+0xe4>
    {
        TimerSetTimeout( TimerListHead );
   16fbe:	4b06      	ldr	r3, [pc, #24]	; (16fd8 <TimerIrqHandler+0xf4>)
   16fc0:	681b      	ldr	r3, [r3, #0]
   16fc2:	0018      	movs	r0, r3
   16fc4:	4b06      	ldr	r3, [pc, #24]	; (16fe0 <TimerIrqHandler+0xfc>)
   16fc6:	4798      	blx	r3
    }
}
   16fc8:	46c0      	nop			; (mov r8, r8)
   16fca:	46bd      	mov	sp, r7
   16fcc:	b007      	add	sp, #28
   16fce:	bd90      	pop	{r4, r7, pc}
   16fd0:	00004469 	.word	0x00004469
   16fd4:	00004449 	.word	0x00004449
   16fd8:	20001acc 	.word	0x20001acc
   16fdc:	000045a1 	.word	0x000045a1
   16fe0:	000171d9 	.word	0x000171d9

00016fe4 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
   16fe4:	b580      	push	{r7, lr}
   16fe6:	b086      	sub	sp, #24
   16fe8:	af00      	add	r7, sp, #0
   16fea:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
   16fec:	230c      	movs	r3, #12
   16fee:	18fb      	adds	r3, r7, r3
   16ff0:	0018      	movs	r0, r3
   16ff2:	4b36      	ldr	r3, [pc, #216]	; (170cc <TimerStop+0xe8>)
   16ff4:	4798      	blx	r3

    TimerEvent_t* prev = TimerListHead;
   16ff6:	4b36      	ldr	r3, [pc, #216]	; (170d0 <TimerStop+0xec>)
   16ff8:	681b      	ldr	r3, [r3, #0]
   16ffa:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
   16ffc:	4b34      	ldr	r3, [pc, #208]	; (170d0 <TimerStop+0xec>)
   16ffe:	681b      	ldr	r3, [r3, #0]
   17000:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist 
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   17002:	4b33      	ldr	r3, [pc, #204]	; (170d0 <TimerStop+0xec>)
   17004:	681b      	ldr	r3, [r3, #0]
   17006:	2b00      	cmp	r3, #0
   17008:	d002      	beq.n	17010 <TimerStop+0x2c>
   1700a:	687b      	ldr	r3, [r7, #4]
   1700c:	2b00      	cmp	r3, #0
   1700e:	d105      	bne.n	1701c <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
   17010:	230c      	movs	r3, #12
   17012:	18fb      	adds	r3, r7, r3
   17014:	0018      	movs	r0, r3
   17016:	4b2f      	ldr	r3, [pc, #188]	; (170d4 <TimerStop+0xf0>)
   17018:	4798      	blx	r3
   1701a:	e054      	b.n	170c6 <TimerStop+0xe2>
        return;
    }

    if( TimerListHead == obj ) // Stop the Head
   1701c:	4b2c      	ldr	r3, [pc, #176]	; (170d0 <TimerStop+0xec>)
   1701e:	681a      	ldr	r2, [r3, #0]
   17020:	687b      	ldr	r3, [r7, #4]
   17022:	429a      	cmp	r2, r3
   17024:	d147      	bne.n	170b6 <TimerStop+0xd2>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running 
   17026:	4b2a      	ldr	r3, [pc, #168]	; (170d0 <TimerStop+0xec>)
   17028:	681b      	ldr	r3, [r3, #0]
   1702a:	7a1b      	ldrb	r3, [r3, #8]
   1702c:	2b00      	cmp	r3, #0
   1702e:	d019      	beq.n	17064 <TimerStop+0x80>
        {
            TimerListHead->IsRunning = false;
   17030:	4b27      	ldr	r3, [pc, #156]	; (170d0 <TimerStop+0xec>)
   17032:	681b      	ldr	r3, [r3, #0]
   17034:	2200      	movs	r2, #0
   17036:	721a      	strb	r2, [r3, #8]
            if( TimerListHead->Next != NULL )
   17038:	4b25      	ldr	r3, [pc, #148]	; (170d0 <TimerStop+0xec>)
   1703a:	681b      	ldr	r3, [r3, #0]
   1703c:	691b      	ldr	r3, [r3, #16]
   1703e:	2b00      	cmp	r3, #0
   17040:	d00a      	beq.n	17058 <TimerStop+0x74>
            {
                TimerListHead = TimerListHead->Next;
   17042:	4b23      	ldr	r3, [pc, #140]	; (170d0 <TimerStop+0xec>)
   17044:	681b      	ldr	r3, [r3, #0]
   17046:	691a      	ldr	r2, [r3, #16]
   17048:	4b21      	ldr	r3, [pc, #132]	; (170d0 <TimerStop+0xec>)
   1704a:	601a      	str	r2, [r3, #0]
                TimerSetTimeout( TimerListHead );
   1704c:	4b20      	ldr	r3, [pc, #128]	; (170d0 <TimerStop+0xec>)
   1704e:	681b      	ldr	r3, [r3, #0]
   17050:	0018      	movs	r0, r3
   17052:	4b21      	ldr	r3, [pc, #132]	; (170d8 <TimerStop+0xf4>)
   17054:	4798      	blx	r3
   17056:	e031      	b.n	170bc <TimerStop+0xd8>
            }
            else
            {
                RtcStopAlarm( );
   17058:	4b20      	ldr	r3, [pc, #128]	; (170dc <TimerStop+0xf8>)
   1705a:	4798      	blx	r3
                TimerListHead = NULL;
   1705c:	4b1c      	ldr	r3, [pc, #112]	; (170d0 <TimerStop+0xec>)
   1705e:	2200      	movs	r2, #0
   17060:	601a      	str	r2, [r3, #0]
   17062:	e02b      	b.n	170bc <TimerStop+0xd8>
            }
        }
        else // Stop the head before it is started
        {   
            if( TimerListHead->Next != NULL )
   17064:	4b1a      	ldr	r3, [pc, #104]	; (170d0 <TimerStop+0xec>)
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	691b      	ldr	r3, [r3, #16]
   1706a:	2b00      	cmp	r3, #0
   1706c:	d005      	beq.n	1707a <TimerStop+0x96>
            {
                TimerListHead = TimerListHead->Next;
   1706e:	4b18      	ldr	r3, [pc, #96]	; (170d0 <TimerStop+0xec>)
   17070:	681b      	ldr	r3, [r3, #0]
   17072:	691a      	ldr	r2, [r3, #16]
   17074:	4b16      	ldr	r3, [pc, #88]	; (170d0 <TimerStop+0xec>)
   17076:	601a      	str	r2, [r3, #0]
   17078:	e020      	b.n	170bc <TimerStop+0xd8>
            }
            else
            {
                TimerListHead = NULL;
   1707a:	4b15      	ldr	r3, [pc, #84]	; (170d0 <TimerStop+0xec>)
   1707c:	2200      	movs	r2, #0
   1707e:	601a      	str	r2, [r3, #0]
   17080:	e01c      	b.n	170bc <TimerStop+0xd8>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
   17082:	693a      	ldr	r2, [r7, #16]
   17084:	687b      	ldr	r3, [r7, #4]
   17086:	429a      	cmp	r2, r3
   17088:	d110      	bne.n	170ac <TimerStop+0xc8>
            {
                if( cur->Next != NULL )
   1708a:	693b      	ldr	r3, [r7, #16]
   1708c:	691b      	ldr	r3, [r3, #16]
   1708e:	2b00      	cmp	r3, #0
   17090:	d006      	beq.n	170a0 <TimerStop+0xbc>
                {
                    cur = cur->Next;
   17092:	693b      	ldr	r3, [r7, #16]
   17094:	691b      	ldr	r3, [r3, #16]
   17096:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
   17098:	697b      	ldr	r3, [r7, #20]
   1709a:	693a      	ldr	r2, [r7, #16]
   1709c:	611a      	str	r2, [r3, #16]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
   1709e:	e00d      	b.n	170bc <TimerStop+0xd8>
                    cur = NULL;
   170a0:	2300      	movs	r3, #0
   170a2:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
   170a4:	697b      	ldr	r3, [r7, #20]
   170a6:	693a      	ldr	r2, [r7, #16]
   170a8:	611a      	str	r2, [r3, #16]
                break;
   170aa:	e007      	b.n	170bc <TimerStop+0xd8>
            }
            else
            {
                prev = cur;
   170ac:	693b      	ldr	r3, [r7, #16]
   170ae:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
   170b0:	693b      	ldr	r3, [r7, #16]
   170b2:	691b      	ldr	r3, [r3, #16]
   170b4:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
   170b6:	693b      	ldr	r3, [r7, #16]
   170b8:	2b00      	cmp	r3, #0
   170ba:	d1e2      	bne.n	17082 <TimerStop+0x9e>
            }
        }
    }
    CRITICAL_SECTION_END( );
   170bc:	230c      	movs	r3, #12
   170be:	18fb      	adds	r3, r7, r3
   170c0:	0018      	movs	r0, r3
   170c2:	4b04      	ldr	r3, [pc, #16]	; (170d4 <TimerStop+0xf0>)
   170c4:	4798      	blx	r3
}
   170c6:	46bd      	mov	sp, r7
   170c8:	b006      	add	sp, #24
   170ca:	bd80      	pop	{r7, pc}
   170cc:	000013b9 	.word	0x000013b9
   170d0:	20001acc 	.word	0x20001acc
   170d4:	000013d7 	.word	0x000013d7
   170d8:	000171d9 	.word	0x000171d9
   170dc:	000044e9 	.word	0x000044e9

000170e0 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
   170e0:	b580      	push	{r7, lr}
   170e2:	b084      	sub	sp, #16
   170e4:	af00      	add	r7, sp, #0
   170e6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   170e8:	4b0a      	ldr	r3, [pc, #40]	; (17114 <TimerExists+0x34>)
   170ea:	681b      	ldr	r3, [r3, #0]
   170ec:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
   170ee:	e008      	b.n	17102 <TimerExists+0x22>
    {
        if( cur == obj )
   170f0:	68fa      	ldr	r2, [r7, #12]
   170f2:	687b      	ldr	r3, [r7, #4]
   170f4:	429a      	cmp	r2, r3
   170f6:	d101      	bne.n	170fc <TimerExists+0x1c>
        {
            return true;
   170f8:	2301      	movs	r3, #1
   170fa:	e006      	b.n	1710a <TimerExists+0x2a>
        }
        cur = cur->Next;
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	691b      	ldr	r3, [r3, #16]
   17100:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
   17102:	68fb      	ldr	r3, [r7, #12]
   17104:	2b00      	cmp	r3, #0
   17106:	d1f3      	bne.n	170f0 <TimerExists+0x10>
    }
    return false;
   17108:	2300      	movs	r3, #0
}
   1710a:	0018      	movs	r0, r3
   1710c:	46bd      	mov	sp, r7
   1710e:	b004      	add	sp, #16
   17110:	bd80      	pop	{r7, pc}
   17112:	46c0      	nop			; (mov r8, r8)
   17114:	20001acc 	.word	0x20001acc

00017118 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
   17118:	b580      	push	{r7, lr}
   1711a:	b084      	sub	sp, #16
   1711c:	af00      	add	r7, sp, #0
   1711e:	6078      	str	r0, [r7, #4]
   17120:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
   17122:	2300      	movs	r3, #0
   17124:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
   17126:	683b      	ldr	r3, [r7, #0]
   17128:	0018      	movs	r0, r3
   1712a:	4b0e      	ldr	r3, [pc, #56]	; (17164 <TimerSetValue+0x4c>)
   1712c:	4798      	blx	r3
   1712e:	0003      	movs	r3, r0
   17130:	60fb      	str	r3, [r7, #12]

    TimerStop( obj );
   17132:	687b      	ldr	r3, [r7, #4]
   17134:	0018      	movs	r0, r3
   17136:	4b0c      	ldr	r3, [pc, #48]	; (17168 <TimerSetValue+0x50>)
   17138:	4798      	blx	r3

    minValue = RtcGetMinimumTimeout( );
   1713a:	4b0c      	ldr	r3, [pc, #48]	; (1716c <TimerSetValue+0x54>)
   1713c:	4798      	blx	r3
   1713e:	0003      	movs	r3, r0
   17140:	60bb      	str	r3, [r7, #8]

    if( ticks < minValue )
   17142:	68fa      	ldr	r2, [r7, #12]
   17144:	68bb      	ldr	r3, [r7, #8]
   17146:	429a      	cmp	r2, r3
   17148:	d201      	bcs.n	1714e <TimerSetValue+0x36>
    {
        ticks = minValue;
   1714a:	68bb      	ldr	r3, [r7, #8]
   1714c:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	68fa      	ldr	r2, [r7, #12]
   17152:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
   17154:	687b      	ldr	r3, [r7, #4]
   17156:	68fa      	ldr	r2, [r7, #12]
   17158:	605a      	str	r2, [r3, #4]
}
   1715a:	46c0      	nop			; (mov r8, r8)
   1715c:	46bd      	mov	sp, r7
   1715e:	b004      	add	sp, #16
   17160:	bd80      	pop	{r7, pc}
   17162:	46c0      	nop			; (mov r8, r8)
   17164:	00004489 	.word	0x00004489
   17168:	00016fe5 	.word	0x00016fe5
   1716c:	0000447d 	.word	0x0000447d

00017170 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
   17170:	b580      	push	{r7, lr}
   17172:	b082      	sub	sp, #8
   17174:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
   17176:	4b06      	ldr	r3, [pc, #24]	; (17190 <TimerGetCurrentTime+0x20>)
   17178:	4798      	blx	r3
   1717a:	0003      	movs	r3, r0
   1717c:	607b      	str	r3, [r7, #4]
    return  RtcTick2Ms( now );
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	0018      	movs	r0, r3
   17182:	4b04      	ldr	r3, [pc, #16]	; (17194 <TimerGetCurrentTime+0x24>)
   17184:	4798      	blx	r3
   17186:	0003      	movs	r3, r0
}
   17188:	0018      	movs	r0, r3
   1718a:	46bd      	mov	sp, r7
   1718c:	b002      	add	sp, #8
   1718e:	bd80      	pop	{r7, pc}
   17190:	0000458d 	.word	0x0000458d
   17194:	0000449b 	.word	0x0000449b

00017198 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
   17198:	b580      	push	{r7, lr}
   1719a:	b084      	sub	sp, #16
   1719c:	af00      	add	r7, sp, #0
   1719e:	6078      	str	r0, [r7, #4]
    uint32_t nowInTicks = RtcGetTimerValue( );
   171a0:	4b0a      	ldr	r3, [pc, #40]	; (171cc <TimerGetElapsedTime+0x34>)
   171a2:	4798      	blx	r3
   171a4:	0003      	movs	r3, r0
   171a6:	60fb      	str	r3, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
   171a8:	687b      	ldr	r3, [r7, #4]
   171aa:	0018      	movs	r0, r3
   171ac:	4b08      	ldr	r3, [pc, #32]	; (171d0 <TimerGetElapsedTime+0x38>)
   171ae:	4798      	blx	r3
   171b0:	0003      	movs	r3, r0
   171b2:	60bb      	str	r3, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
   171b4:	68fa      	ldr	r2, [r7, #12]
   171b6:	68bb      	ldr	r3, [r7, #8]
   171b8:	1ad3      	subs	r3, r2, r3
   171ba:	0018      	movs	r0, r3
   171bc:	4b05      	ldr	r3, [pc, #20]	; (171d4 <TimerGetElapsedTime+0x3c>)
   171be:	4798      	blx	r3
   171c0:	0003      	movs	r3, r0
}
   171c2:	0018      	movs	r0, r3
   171c4:	46bd      	mov	sp, r7
   171c6:	b004      	add	sp, #16
   171c8:	bd80      	pop	{r7, pc}
   171ca:	46c0      	nop			; (mov r8, r8)
   171cc:	0000458d 	.word	0x0000458d
   171d0:	00004489 	.word	0x00004489
   171d4:	0000449b 	.word	0x0000449b

000171d8 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
   171d8:	b590      	push	{r4, r7, lr}
   171da:	b085      	sub	sp, #20
   171dc:	af00      	add	r7, sp, #0
   171de:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
   171e0:	4b0f      	ldr	r3, [pc, #60]	; (17220 <TimerSetTimeout+0x48>)
   171e2:	4798      	blx	r3
   171e4:	0003      	movs	r3, r0
   171e6:	60fb      	str	r3, [r7, #12]
    obj->IsRunning = true; 
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	2201      	movs	r2, #1
   171ec:	721a      	strb	r2, [r3, #8]

    //in case deadline too soon
    if(obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks) )
   171ee:	687b      	ldr	r3, [r7, #4]
   171f0:	681c      	ldr	r4, [r3, #0]
   171f2:	4b0c      	ldr	r3, [pc, #48]	; (17224 <TimerSetTimeout+0x4c>)
   171f4:	4798      	blx	r3
   171f6:	0002      	movs	r2, r0
   171f8:	68fb      	ldr	r3, [r7, #12]
   171fa:	18d3      	adds	r3, r2, r3
   171fc:	429c      	cmp	r4, r3
   171fe:	d206      	bcs.n	1720e <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   17200:	4b08      	ldr	r3, [pc, #32]	; (17224 <TimerSetTimeout+0x4c>)
   17202:	4798      	blx	r3
   17204:	0002      	movs	r2, r0
   17206:	68fb      	ldr	r3, [r7, #12]
   17208:	18d2      	adds	r2, r2, r3
   1720a:	687b      	ldr	r3, [r7, #4]
   1720c:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	681b      	ldr	r3, [r3, #0]
   17212:	0018      	movs	r0, r3
   17214:	4b04      	ldr	r3, [pc, #16]	; (17228 <TimerSetTimeout+0x50>)
   17216:	4798      	blx	r3
}
   17218:	46c0      	nop			; (mov r8, r8)
   1721a:	46bd      	mov	sp, r7
   1721c:	b005      	add	sp, #20
   1721e:	bd90      	pop	{r4, r7, pc}
   17220:	0000447d 	.word	0x0000447d
   17224:	000045a1 	.word	0x000045a1
   17228:	000044cd 	.word	0x000044cd

0001722c <TimerProcess>:
{
    return RtcTempCompensation( period, temperature );
}

void TimerProcess( void )
{
   1722c:	b580      	push	{r7, lr}
   1722e:	af00      	add	r7, sp, #0
    RtcProcess( );
   17230:	4b02      	ldr	r3, [pc, #8]	; (1723c <TimerProcess+0x10>)
   17232:	4798      	blx	r3
}
   17234:	46c0      	nop			; (mov r8, r8)
   17236:	46bd      	mov	sp, r7
   17238:	bd80      	pop	{r7, pc}
   1723a:	46c0      	nop			; (mov r8, r8)
   1723c:	00004689 	.word	0x00004689

00017240 <UartInit>:
 */
#include "uart-board.h"
#include "uart.h"

void UartInit( Uart_t *obj, UartId_t uartId, PinNames tx, PinNames rx )
{
   17240:	b590      	push	{r4, r7, lr}
   17242:	b083      	sub	sp, #12
   17244:	af00      	add	r7, sp, #0
   17246:	6078      	str	r0, [r7, #4]
   17248:	000c      	movs	r4, r1
   1724a:	0010      	movs	r0, r2
   1724c:	0019      	movs	r1, r3
   1724e:	1cfb      	adds	r3, r7, #3
   17250:	1c22      	adds	r2, r4, #0
   17252:	701a      	strb	r2, [r3, #0]
   17254:	1cbb      	adds	r3, r7, #2
   17256:	1c02      	adds	r2, r0, #0
   17258:	701a      	strb	r2, [r3, #0]
   1725a:	1c7b      	adds	r3, r7, #1
   1725c:	1c0a      	adds	r2, r1, #0
   1725e:	701a      	strb	r2, [r3, #0]
    if( obj->IsInitialized == false )
   17260:	687b      	ldr	r3, [r7, #4]
   17262:	785b      	ldrb	r3, [r3, #1]
   17264:	2201      	movs	r2, #1
   17266:	4053      	eors	r3, r2
   17268:	b2db      	uxtb	r3, r3
   1726a:	2b00      	cmp	r3, #0
   1726c:	d00e      	beq.n	1728c <UartInit+0x4c>
    {
        obj->IsInitialized = true;
   1726e:	687b      	ldr	r3, [r7, #4]
   17270:	2201      	movs	r2, #1
   17272:	705a      	strb	r2, [r3, #1]
        UartMcuInit( obj, uartId, tx, rx );
   17274:	1c7b      	adds	r3, r7, #1
   17276:	2400      	movs	r4, #0
   17278:	571c      	ldrsb	r4, [r3, r4]
   1727a:	1cbb      	adds	r3, r7, #2
   1727c:	2200      	movs	r2, #0
   1727e:	569a      	ldrsb	r2, [r3, r2]
   17280:	1cfb      	adds	r3, r7, #3
   17282:	7819      	ldrb	r1, [r3, #0]
   17284:	6878      	ldr	r0, [r7, #4]
   17286:	0023      	movs	r3, r4
   17288:	4c02      	ldr	r4, [pc, #8]	; (17294 <UartInit+0x54>)
   1728a:	47a0      	blx	r4
    }
}
   1728c:	46c0      	nop			; (mov r8, r8)
   1728e:	46bd      	mov	sp, r7
   17290:	b003      	add	sp, #12
   17292:	bd90      	pop	{r4, r7, pc}
   17294:	00005b39 	.word	0x00005b39

00017298 <UartConfig>:

void UartConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
   17298:	b590      	push	{r4, r7, lr}
   1729a:	b089      	sub	sp, #36	; 0x24
   1729c:	af04      	add	r7, sp, #16
   1729e:	60f8      	str	r0, [r7, #12]
   172a0:	0008      	movs	r0, r1
   172a2:	607a      	str	r2, [r7, #4]
   172a4:	0019      	movs	r1, r3
   172a6:	230b      	movs	r3, #11
   172a8:	18fb      	adds	r3, r7, r3
   172aa:	1c02      	adds	r2, r0, #0
   172ac:	701a      	strb	r2, [r3, #0]
   172ae:	230a      	movs	r3, #10
   172b0:	18fb      	adds	r3, r7, r3
   172b2:	1c0a      	adds	r2, r1, #0
   172b4:	701a      	strb	r2, [r3, #0]
    UartMcuConfig( obj, mode, baudrate, wordLength, stopBits, parity, flowCtrl );
   172b6:	230a      	movs	r3, #10
   172b8:	18fb      	adds	r3, r7, r3
   172ba:	781c      	ldrb	r4, [r3, #0]
   172bc:	687a      	ldr	r2, [r7, #4]
   172be:	230b      	movs	r3, #11
   172c0:	18fb      	adds	r3, r7, r3
   172c2:	7819      	ldrb	r1, [r3, #0]
   172c4:	68f8      	ldr	r0, [r7, #12]
   172c6:	2328      	movs	r3, #40	; 0x28
   172c8:	18fb      	adds	r3, r7, r3
   172ca:	781b      	ldrb	r3, [r3, #0]
   172cc:	9302      	str	r3, [sp, #8]
   172ce:	2324      	movs	r3, #36	; 0x24
   172d0:	18fb      	adds	r3, r7, r3
   172d2:	781b      	ldrb	r3, [r3, #0]
   172d4:	9301      	str	r3, [sp, #4]
   172d6:	2320      	movs	r3, #32
   172d8:	18fb      	adds	r3, r7, r3
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	9300      	str	r3, [sp, #0]
   172de:	0023      	movs	r3, r4
   172e0:	4c02      	ldr	r4, [pc, #8]	; (172ec <UartConfig+0x54>)
   172e2:	47a0      	blx	r4
}
   172e4:	46c0      	nop			; (mov r8, r8)
   172e6:	46bd      	mov	sp, r7
   172e8:	b005      	add	sp, #20
   172ea:	bd90      	pop	{r4, r7, pc}
   172ec:	00005be9 	.word	0x00005be9

000172f0 <UartPutBuffer>:
{
    return UartMcuGetChar( obj, data );
}

uint8_t UartPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
   172f0:	b580      	push	{r7, lr}
   172f2:	b084      	sub	sp, #16
   172f4:	af00      	add	r7, sp, #0
   172f6:	60f8      	str	r0, [r7, #12]
   172f8:	60b9      	str	r1, [r7, #8]
   172fa:	1dbb      	adds	r3, r7, #6
   172fc:	801a      	strh	r2, [r3, #0]
    return UartMcuPutBuffer( obj, buffer, size );
   172fe:	1dbb      	adds	r3, r7, #6
   17300:	881a      	ldrh	r2, [r3, #0]
   17302:	68b9      	ldr	r1, [r7, #8]
   17304:	68fb      	ldr	r3, [r7, #12]
   17306:	0018      	movs	r0, r3
   17308:	4b03      	ldr	r3, [pc, #12]	; (17318 <UartPutBuffer+0x28>)
   1730a:	4798      	blx	r3
   1730c:	0003      	movs	r3, r0
}
   1730e:	0018      	movs	r0, r3
   17310:	46bd      	mov	sp, r7
   17312:	b004      	add	sp, #16
   17314:	bd80      	pop	{r7, pc}
   17316:	46c0      	nop			; (mov r8, r8)
   17318:	00005c25 	.word	0x00005c25

0001731c <UartGetBuffer>:

uint8_t UartGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
   1731c:	b590      	push	{r4, r7, lr}
   1731e:	b085      	sub	sp, #20
   17320:	af00      	add	r7, sp, #0
   17322:	60f8      	str	r0, [r7, #12]
   17324:	60b9      	str	r1, [r7, #8]
   17326:	603b      	str	r3, [r7, #0]
   17328:	1dbb      	adds	r3, r7, #6
   1732a:	801a      	strh	r2, [r3, #0]
    return UartMcuGetBuffer( obj, buffer, size, nbReadBytes );
   1732c:	683c      	ldr	r4, [r7, #0]
   1732e:	1dbb      	adds	r3, r7, #6
   17330:	881a      	ldrh	r2, [r3, #0]
   17332:	68b9      	ldr	r1, [r7, #8]
   17334:	68f8      	ldr	r0, [r7, #12]
   17336:	0023      	movs	r3, r4
   17338:	4c03      	ldr	r4, [pc, #12]	; (17348 <UartGetBuffer+0x2c>)
   1733a:	47a0      	blx	r4
   1733c:	0003      	movs	r3, r0
}
   1733e:	0018      	movs	r0, r3
   17340:	46bd      	mov	sp, r7
   17342:	b005      	add	sp, #20
   17344:	bd90      	pop	{r4, r7, pc}
   17346:	46c0      	nop			; (mov r8, r8)
   17348:	00005c5d 	.word	0x00005c5d

0001734c <ceil>:
   1734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1734e:	4657      	mov	r7, sl
   17350:	464e      	mov	r6, r9
   17352:	4645      	mov	r5, r8
   17354:	46de      	mov	lr, fp
   17356:	004b      	lsls	r3, r1, #1
   17358:	4a41      	ldr	r2, [pc, #260]	; (17460 <ceil+0x114>)
   1735a:	0d5b      	lsrs	r3, r3, #21
   1735c:	b5e0      	push	{r5, r6, r7, lr}
   1735e:	189f      	adds	r7, r3, r2
   17360:	0005      	movs	r5, r0
   17362:	000c      	movs	r4, r1
   17364:	4680      	mov	r8, r0
   17366:	000e      	movs	r6, r1
   17368:	4689      	mov	r9, r1
   1736a:	4682      	mov	sl, r0
   1736c:	2f13      	cmp	r7, #19
   1736e:	dc26      	bgt.n	173be <ceil+0x72>
   17370:	2f00      	cmp	r7, #0
   17372:	db56      	blt.n	17422 <ceil+0xd6>
   17374:	4b3b      	ldr	r3, [pc, #236]	; (17464 <ceil+0x118>)
   17376:	413b      	asrs	r3, r7
   17378:	4698      	mov	r8, r3
   1737a:	000b      	movs	r3, r1
   1737c:	4642      	mov	r2, r8
   1737e:	4013      	ands	r3, r2
   17380:	4303      	orrs	r3, r0
   17382:	d016      	beq.n	173b2 <ceil+0x66>
   17384:	4a38      	ldr	r2, [pc, #224]	; (17468 <ceil+0x11c>)
   17386:	4b39      	ldr	r3, [pc, #228]	; (1746c <ceil+0x120>)
   17388:	f000 fdf8 	bl	17f7c <__aeabi_dadd>
   1738c:	2200      	movs	r2, #0
   1738e:	2300      	movs	r3, #0
   17390:	f000 fb00 	bl	17994 <__aeabi_dcmpgt>
   17394:	2800      	cmp	r0, #0
   17396:	d00a      	beq.n	173ae <ceil+0x62>
   17398:	2c00      	cmp	r4, #0
   1739a:	dd03      	ble.n	173a4 <ceil+0x58>
   1739c:	2380      	movs	r3, #128	; 0x80
   1739e:	035b      	lsls	r3, r3, #13
   173a0:	413b      	asrs	r3, r7
   173a2:	4499      	add	r9, r3
   173a4:	4643      	mov	r3, r8
   173a6:	464e      	mov	r6, r9
   173a8:	439e      	bics	r6, r3
   173aa:	2300      	movs	r3, #0
   173ac:	469a      	mov	sl, r3
   173ae:	4650      	mov	r0, sl
   173b0:	0031      	movs	r1, r6
   173b2:	bc3c      	pop	{r2, r3, r4, r5}
   173b4:	4690      	mov	r8, r2
   173b6:	4699      	mov	r9, r3
   173b8:	46a2      	mov	sl, r4
   173ba:	46ab      	mov	fp, r5
   173bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173be:	2f33      	cmp	r7, #51	; 0x33
   173c0:	dd08      	ble.n	173d4 <ceil+0x88>
   173c2:	2380      	movs	r3, #128	; 0x80
   173c4:	00db      	lsls	r3, r3, #3
   173c6:	429f      	cmp	r7, r3
   173c8:	d1f3      	bne.n	173b2 <ceil+0x66>
   173ca:	0002      	movs	r2, r0
   173cc:	000b      	movs	r3, r1
   173ce:	f000 fdd5 	bl	17f7c <__aeabi_dadd>
   173d2:	e7ee      	b.n	173b2 <ceil+0x66>
   173d4:	4a26      	ldr	r2, [pc, #152]	; (17470 <ceil+0x124>)
   173d6:	4694      	mov	ip, r2
   173d8:	2201      	movs	r2, #1
   173da:	4463      	add	r3, ip
   173dc:	4252      	negs	r2, r2
   173de:	40da      	lsrs	r2, r3
   173e0:	4693      	mov	fp, r2
   173e2:	4202      	tst	r2, r0
   173e4:	d0e5      	beq.n	173b2 <ceil+0x66>
   173e6:	4a20      	ldr	r2, [pc, #128]	; (17468 <ceil+0x11c>)
   173e8:	4b20      	ldr	r3, [pc, #128]	; (1746c <ceil+0x120>)
   173ea:	f000 fdc7 	bl	17f7c <__aeabi_dadd>
   173ee:	2200      	movs	r2, #0
   173f0:	2300      	movs	r3, #0
   173f2:	f000 facf 	bl	17994 <__aeabi_dcmpgt>
   173f6:	2800      	cmp	r0, #0
   173f8:	d0d9      	beq.n	173ae <ceil+0x62>
   173fa:	2c00      	cmp	r4, #0
   173fc:	dd28      	ble.n	17450 <ceil+0x104>
   173fe:	2f14      	cmp	r7, #20
   17400:	d023      	beq.n	1744a <ceil+0xfe>
   17402:	2334      	movs	r3, #52	; 0x34
   17404:	1bdb      	subs	r3, r3, r7
   17406:	2701      	movs	r7, #1
   17408:	409f      	lsls	r7, r3
   1740a:	197f      	adds	r7, r7, r5
   1740c:	42af      	cmp	r7, r5
   1740e:	419b      	sbcs	r3, r3
   17410:	425b      	negs	r3, r3
   17412:	4499      	add	r9, r3
   17414:	465b      	mov	r3, fp
   17416:	439f      	bics	r7, r3
   17418:	464e      	mov	r6, r9
   1741a:	46ba      	mov	sl, r7
   1741c:	0031      	movs	r1, r6
   1741e:	4650      	mov	r0, sl
   17420:	e7c7      	b.n	173b2 <ceil+0x66>
   17422:	4a11      	ldr	r2, [pc, #68]	; (17468 <ceil+0x11c>)
   17424:	4b11      	ldr	r3, [pc, #68]	; (1746c <ceil+0x120>)
   17426:	f000 fda9 	bl	17f7c <__aeabi_dadd>
   1742a:	2200      	movs	r2, #0
   1742c:	2300      	movs	r3, #0
   1742e:	f000 fab1 	bl	17994 <__aeabi_dcmpgt>
   17432:	2800      	cmp	r0, #0
   17434:	d0bb      	beq.n	173ae <ceil+0x62>
   17436:	2c00      	cmp	r4, #0
   17438:	db0c      	blt.n	17454 <ceil+0x108>
   1743a:	2300      	movs	r3, #0
   1743c:	432c      	orrs	r4, r5
   1743e:	469a      	mov	sl, r3
   17440:	2600      	movs	r6, #0
   17442:	2c00      	cmp	r4, #0
   17444:	d0b3      	beq.n	173ae <ceil+0x62>
   17446:	4e0b      	ldr	r6, [pc, #44]	; (17474 <ceil+0x128>)
   17448:	e7b1      	b.n	173ae <ceil+0x62>
   1744a:	2301      	movs	r3, #1
   1744c:	469c      	mov	ip, r3
   1744e:	44e1      	add	r9, ip
   17450:	4647      	mov	r7, r8
   17452:	e7df      	b.n	17414 <ceil+0xc8>
   17454:	2300      	movs	r3, #0
   17456:	2680      	movs	r6, #128	; 0x80
   17458:	469a      	mov	sl, r3
   1745a:	0636      	lsls	r6, r6, #24
   1745c:	e7a7      	b.n	173ae <ceil+0x62>
   1745e:	46c0      	nop			; (mov r8, r8)
   17460:	fffffc01 	.word	0xfffffc01
   17464:	000fffff 	.word	0x000fffff
   17468:	8800759c 	.word	0x8800759c
   1746c:	7e37e43c 	.word	0x7e37e43c
   17470:	fffffbed 	.word	0xfffffbed
   17474:	3ff00000 	.word	0x3ff00000

00017478 <floor>:
   17478:	4a45      	ldr	r2, [pc, #276]	; (17590 <floor+0x118>)
   1747a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1747c:	4657      	mov	r7, sl
   1747e:	4692      	mov	sl, r2
   17480:	004b      	lsls	r3, r1, #1
   17482:	0d5b      	lsrs	r3, r3, #21
   17484:	449a      	add	sl, r3
   17486:	464e      	mov	r6, r9
   17488:	4645      	mov	r5, r8
   1748a:	46de      	mov	lr, fp
   1748c:	4652      	mov	r2, sl
   1748e:	b5e0      	push	{r5, r6, r7, lr}
   17490:	000c      	movs	r4, r1
   17492:	0005      	movs	r5, r0
   17494:	000e      	movs	r6, r1
   17496:	4689      	mov	r9, r1
   17498:	0007      	movs	r7, r0
   1749a:	2a13      	cmp	r2, #19
   1749c:	dc22      	bgt.n	174e4 <floor+0x6c>
   1749e:	2a00      	cmp	r2, #0
   174a0:	db47      	blt.n	17532 <floor+0xba>
   174a2:	4652      	mov	r2, sl
   174a4:	4b3b      	ldr	r3, [pc, #236]	; (17594 <floor+0x11c>)
   174a6:	4113      	asrs	r3, r2
   174a8:	4698      	mov	r8, r3
   174aa:	000b      	movs	r3, r1
   174ac:	4642      	mov	r2, r8
   174ae:	4013      	ands	r3, r2
   174b0:	4303      	orrs	r3, r0
   174b2:	d011      	beq.n	174d8 <floor+0x60>
   174b4:	4a38      	ldr	r2, [pc, #224]	; (17598 <floor+0x120>)
   174b6:	4b39      	ldr	r3, [pc, #228]	; (1759c <floor+0x124>)
   174b8:	f000 fd60 	bl	17f7c <__aeabi_dadd>
   174bc:	2200      	movs	r2, #0
   174be:	2300      	movs	r3, #0
   174c0:	f000 fa68 	bl	17994 <__aeabi_dcmpgt>
   174c4:	2800      	cmp	r0, #0
   174c6:	d005      	beq.n	174d4 <floor+0x5c>
   174c8:	2c00      	cmp	r4, #0
   174ca:	db41      	blt.n	17550 <floor+0xd8>
   174cc:	464e      	mov	r6, r9
   174ce:	4643      	mov	r3, r8
   174d0:	2700      	movs	r7, #0
   174d2:	439e      	bics	r6, r3
   174d4:	0038      	movs	r0, r7
   174d6:	0031      	movs	r1, r6
   174d8:	bc3c      	pop	{r2, r3, r4, r5}
   174da:	4690      	mov	r8, r2
   174dc:	4699      	mov	r9, r3
   174de:	46a2      	mov	sl, r4
   174e0:	46ab      	mov	fp, r5
   174e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   174e4:	4652      	mov	r2, sl
   174e6:	2a33      	cmp	r2, #51	; 0x33
   174e8:	dd08      	ble.n	174fc <floor+0x84>
   174ea:	2380      	movs	r3, #128	; 0x80
   174ec:	00db      	lsls	r3, r3, #3
   174ee:	459a      	cmp	sl, r3
   174f0:	d1f2      	bne.n	174d8 <floor+0x60>
   174f2:	0002      	movs	r2, r0
   174f4:	000b      	movs	r3, r1
   174f6:	f000 fd41 	bl	17f7c <__aeabi_dadd>
   174fa:	e7ed      	b.n	174d8 <floor+0x60>
   174fc:	4a28      	ldr	r2, [pc, #160]	; (175a0 <floor+0x128>)
   174fe:	4694      	mov	ip, r2
   17500:	2201      	movs	r2, #1
   17502:	4463      	add	r3, ip
   17504:	4252      	negs	r2, r2
   17506:	40da      	lsrs	r2, r3
   17508:	4693      	mov	fp, r2
   1750a:	4202      	tst	r2, r0
   1750c:	d0e4      	beq.n	174d8 <floor+0x60>
   1750e:	4a22      	ldr	r2, [pc, #136]	; (17598 <floor+0x120>)
   17510:	4b22      	ldr	r3, [pc, #136]	; (1759c <floor+0x124>)
   17512:	f000 fd33 	bl	17f7c <__aeabi_dadd>
   17516:	2200      	movs	r2, #0
   17518:	2300      	movs	r3, #0
   1751a:	f000 fa3b 	bl	17994 <__aeabi_dcmpgt>
   1751e:	2800      	cmp	r0, #0
   17520:	d0d8      	beq.n	174d4 <floor+0x5c>
   17522:	2c00      	cmp	r4, #0
   17524:	db1a      	blt.n	1755c <floor+0xe4>
   17526:	465b      	mov	r3, fp
   17528:	464e      	mov	r6, r9
   1752a:	439f      	bics	r7, r3
   1752c:	0038      	movs	r0, r7
   1752e:	0031      	movs	r1, r6
   17530:	e7d2      	b.n	174d8 <floor+0x60>
   17532:	4a19      	ldr	r2, [pc, #100]	; (17598 <floor+0x120>)
   17534:	4b19      	ldr	r3, [pc, #100]	; (1759c <floor+0x124>)
   17536:	f000 fd21 	bl	17f7c <__aeabi_dadd>
   1753a:	2200      	movs	r2, #0
   1753c:	2300      	movs	r3, #0
   1753e:	f000 fa29 	bl	17994 <__aeabi_dcmpgt>
   17542:	2800      	cmp	r0, #0
   17544:	d0c6      	beq.n	174d4 <floor+0x5c>
   17546:	2c00      	cmp	r4, #0
   17548:	db16      	blt.n	17578 <floor+0x100>
   1754a:	2700      	movs	r7, #0
   1754c:	2600      	movs	r6, #0
   1754e:	e7c1      	b.n	174d4 <floor+0x5c>
   17550:	2380      	movs	r3, #128	; 0x80
   17552:	4652      	mov	r2, sl
   17554:	035b      	lsls	r3, r3, #13
   17556:	4113      	asrs	r3, r2
   17558:	4499      	add	r9, r3
   1755a:	e7b7      	b.n	174cc <floor+0x54>
   1755c:	4653      	mov	r3, sl
   1755e:	2b14      	cmp	r3, #20
   17560:	d012      	beq.n	17588 <floor+0x110>
   17562:	2334      	movs	r3, #52	; 0x34
   17564:	4652      	mov	r2, sl
   17566:	2701      	movs	r7, #1
   17568:	1a9b      	subs	r3, r3, r2
   1756a:	409f      	lsls	r7, r3
   1756c:	197f      	adds	r7, r7, r5
   1756e:	42af      	cmp	r7, r5
   17570:	419b      	sbcs	r3, r3
   17572:	425b      	negs	r3, r3
   17574:	4499      	add	r9, r3
   17576:	e7d6      	b.n	17526 <floor+0xae>
   17578:	0064      	lsls	r4, r4, #1
   1757a:	0864      	lsrs	r4, r4, #1
   1757c:	4325      	orrs	r5, r4
   1757e:	2700      	movs	r7, #0
   17580:	2d00      	cmp	r5, #0
   17582:	d0a7      	beq.n	174d4 <floor+0x5c>
   17584:	4e07      	ldr	r6, [pc, #28]	; (175a4 <floor+0x12c>)
   17586:	e7a5      	b.n	174d4 <floor+0x5c>
   17588:	3b13      	subs	r3, #19
   1758a:	469c      	mov	ip, r3
   1758c:	44e1      	add	r9, ip
   1758e:	e7ca      	b.n	17526 <floor+0xae>
   17590:	fffffc01 	.word	0xfffffc01
   17594:	000fffff 	.word	0x000fffff
   17598:	8800759c 	.word	0x8800759c
   1759c:	7e37e43c 	.word	0x7e37e43c
   175a0:	fffffbed 	.word	0xfffffbed
   175a4:	bff00000 	.word	0xbff00000

000175a8 <round>:
   175a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175aa:	4a26      	ldr	r2, [pc, #152]	; (17644 <round+0x9c>)
   175ac:	004b      	lsls	r3, r1, #1
   175ae:	0d5b      	lsrs	r3, r3, #21
   175b0:	189a      	adds	r2, r3, r2
   175b2:	0007      	movs	r7, r0
   175b4:	000c      	movs	r4, r1
   175b6:	2a13      	cmp	r2, #19
   175b8:	dc10      	bgt.n	175dc <round+0x34>
   175ba:	2a00      	cmp	r2, #0
   175bc:	db39      	blt.n	17632 <round+0x8a>
   175be:	4b22      	ldr	r3, [pc, #136]	; (17648 <round+0xa0>)
   175c0:	4113      	asrs	r3, r2
   175c2:	420b      	tst	r3, r1
   175c4:	d030      	beq.n	17628 <round+0x80>
   175c6:	2480      	movs	r4, #128	; 0x80
   175c8:	0324      	lsls	r4, r4, #12
   175ca:	4114      	asrs	r4, r2
   175cc:	2000      	movs	r0, #0
   175ce:	1864      	adds	r4, r4, r1
   175d0:	439c      	bics	r4, r3
   175d2:	0006      	movs	r6, r0
   175d4:	0025      	movs	r5, r4
   175d6:	0030      	movs	r0, r6
   175d8:	0029      	movs	r1, r5
   175da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175dc:	2a33      	cmp	r2, #51	; 0x33
   175de:	dd0c      	ble.n	175fa <round+0x52>
   175e0:	2380      	movs	r3, #128	; 0x80
   175e2:	0006      	movs	r6, r0
   175e4:	00db      	lsls	r3, r3, #3
   175e6:	000d      	movs	r5, r1
   175e8:	429a      	cmp	r2, r3
   175ea:	d1f4      	bne.n	175d6 <round+0x2e>
   175ec:	0002      	movs	r2, r0
   175ee:	000b      	movs	r3, r1
   175f0:	f000 fcc4 	bl	17f7c <__aeabi_dadd>
   175f4:	0006      	movs	r6, r0
   175f6:	000d      	movs	r5, r1
   175f8:	e7ed      	b.n	175d6 <round+0x2e>
   175fa:	4d14      	ldr	r5, [pc, #80]	; (1764c <round+0xa4>)
   175fc:	0006      	movs	r6, r0
   175fe:	46ac      	mov	ip, r5
   17600:	2501      	movs	r5, #1
   17602:	4463      	add	r3, ip
   17604:	426d      	negs	r5, r5
   17606:	40dd      	lsrs	r5, r3
   17608:	46ac      	mov	ip, r5
   1760a:	4663      	mov	r3, ip
   1760c:	000d      	movs	r5, r1
   1760e:	4203      	tst	r3, r0
   17610:	d0e1      	beq.n	175d6 <round+0x2e>
   17612:	2333      	movs	r3, #51	; 0x33
   17614:	1a9a      	subs	r2, r3, r2
   17616:	3b32      	subs	r3, #50	; 0x32
   17618:	4093      	lsls	r3, r2
   1761a:	1818      	adds	r0, r3, r0
   1761c:	4287      	cmp	r7, r0
   1761e:	d900      	bls.n	17622 <round+0x7a>
   17620:	1c4c      	adds	r4, r1, #1
   17622:	4663      	mov	r3, ip
   17624:	4398      	bics	r0, r3
   17626:	e7d4      	b.n	175d2 <round+0x2a>
   17628:	0006      	movs	r6, r0
   1762a:	000d      	movs	r5, r1
   1762c:	2800      	cmp	r0, #0
   1762e:	d1ca      	bne.n	175c6 <round+0x1e>
   17630:	e7d1      	b.n	175d6 <round+0x2e>
   17632:	0fc9      	lsrs	r1, r1, #31
   17634:	07cc      	lsls	r4, r1, #31
   17636:	2000      	movs	r0, #0
   17638:	1c53      	adds	r3, r2, #1
   1763a:	d1ca      	bne.n	175d2 <round+0x2a>
   1763c:	4b04      	ldr	r3, [pc, #16]	; (17650 <round+0xa8>)
   1763e:	431c      	orrs	r4, r3
   17640:	e7c7      	b.n	175d2 <round+0x2a>
   17642:	46c0      	nop			; (mov r8, r8)
   17644:	fffffc01 	.word	0xfffffc01
   17648:	000fffff 	.word	0x000fffff
   1764c:	fffffbed 	.word	0xfffffbed
   17650:	3ff00000 	.word	0x3ff00000

00017654 <__udivsi3>:
   17654:	2200      	movs	r2, #0
   17656:	0843      	lsrs	r3, r0, #1
   17658:	428b      	cmp	r3, r1
   1765a:	d374      	bcc.n	17746 <__udivsi3+0xf2>
   1765c:	0903      	lsrs	r3, r0, #4
   1765e:	428b      	cmp	r3, r1
   17660:	d35f      	bcc.n	17722 <__udivsi3+0xce>
   17662:	0a03      	lsrs	r3, r0, #8
   17664:	428b      	cmp	r3, r1
   17666:	d344      	bcc.n	176f2 <__udivsi3+0x9e>
   17668:	0b03      	lsrs	r3, r0, #12
   1766a:	428b      	cmp	r3, r1
   1766c:	d328      	bcc.n	176c0 <__udivsi3+0x6c>
   1766e:	0c03      	lsrs	r3, r0, #16
   17670:	428b      	cmp	r3, r1
   17672:	d30d      	bcc.n	17690 <__udivsi3+0x3c>
   17674:	22ff      	movs	r2, #255	; 0xff
   17676:	0209      	lsls	r1, r1, #8
   17678:	ba12      	rev	r2, r2
   1767a:	0c03      	lsrs	r3, r0, #16
   1767c:	428b      	cmp	r3, r1
   1767e:	d302      	bcc.n	17686 <__udivsi3+0x32>
   17680:	1212      	asrs	r2, r2, #8
   17682:	0209      	lsls	r1, r1, #8
   17684:	d065      	beq.n	17752 <__udivsi3+0xfe>
   17686:	0b03      	lsrs	r3, r0, #12
   17688:	428b      	cmp	r3, r1
   1768a:	d319      	bcc.n	176c0 <__udivsi3+0x6c>
   1768c:	e000      	b.n	17690 <__udivsi3+0x3c>
   1768e:	0a09      	lsrs	r1, r1, #8
   17690:	0bc3      	lsrs	r3, r0, #15
   17692:	428b      	cmp	r3, r1
   17694:	d301      	bcc.n	1769a <__udivsi3+0x46>
   17696:	03cb      	lsls	r3, r1, #15
   17698:	1ac0      	subs	r0, r0, r3
   1769a:	4152      	adcs	r2, r2
   1769c:	0b83      	lsrs	r3, r0, #14
   1769e:	428b      	cmp	r3, r1
   176a0:	d301      	bcc.n	176a6 <__udivsi3+0x52>
   176a2:	038b      	lsls	r3, r1, #14
   176a4:	1ac0      	subs	r0, r0, r3
   176a6:	4152      	adcs	r2, r2
   176a8:	0b43      	lsrs	r3, r0, #13
   176aa:	428b      	cmp	r3, r1
   176ac:	d301      	bcc.n	176b2 <__udivsi3+0x5e>
   176ae:	034b      	lsls	r3, r1, #13
   176b0:	1ac0      	subs	r0, r0, r3
   176b2:	4152      	adcs	r2, r2
   176b4:	0b03      	lsrs	r3, r0, #12
   176b6:	428b      	cmp	r3, r1
   176b8:	d301      	bcc.n	176be <__udivsi3+0x6a>
   176ba:	030b      	lsls	r3, r1, #12
   176bc:	1ac0      	subs	r0, r0, r3
   176be:	4152      	adcs	r2, r2
   176c0:	0ac3      	lsrs	r3, r0, #11
   176c2:	428b      	cmp	r3, r1
   176c4:	d301      	bcc.n	176ca <__udivsi3+0x76>
   176c6:	02cb      	lsls	r3, r1, #11
   176c8:	1ac0      	subs	r0, r0, r3
   176ca:	4152      	adcs	r2, r2
   176cc:	0a83      	lsrs	r3, r0, #10
   176ce:	428b      	cmp	r3, r1
   176d0:	d301      	bcc.n	176d6 <__udivsi3+0x82>
   176d2:	028b      	lsls	r3, r1, #10
   176d4:	1ac0      	subs	r0, r0, r3
   176d6:	4152      	adcs	r2, r2
   176d8:	0a43      	lsrs	r3, r0, #9
   176da:	428b      	cmp	r3, r1
   176dc:	d301      	bcc.n	176e2 <__udivsi3+0x8e>
   176de:	024b      	lsls	r3, r1, #9
   176e0:	1ac0      	subs	r0, r0, r3
   176e2:	4152      	adcs	r2, r2
   176e4:	0a03      	lsrs	r3, r0, #8
   176e6:	428b      	cmp	r3, r1
   176e8:	d301      	bcc.n	176ee <__udivsi3+0x9a>
   176ea:	020b      	lsls	r3, r1, #8
   176ec:	1ac0      	subs	r0, r0, r3
   176ee:	4152      	adcs	r2, r2
   176f0:	d2cd      	bcs.n	1768e <__udivsi3+0x3a>
   176f2:	09c3      	lsrs	r3, r0, #7
   176f4:	428b      	cmp	r3, r1
   176f6:	d301      	bcc.n	176fc <__udivsi3+0xa8>
   176f8:	01cb      	lsls	r3, r1, #7
   176fa:	1ac0      	subs	r0, r0, r3
   176fc:	4152      	adcs	r2, r2
   176fe:	0983      	lsrs	r3, r0, #6
   17700:	428b      	cmp	r3, r1
   17702:	d301      	bcc.n	17708 <__udivsi3+0xb4>
   17704:	018b      	lsls	r3, r1, #6
   17706:	1ac0      	subs	r0, r0, r3
   17708:	4152      	adcs	r2, r2
   1770a:	0943      	lsrs	r3, r0, #5
   1770c:	428b      	cmp	r3, r1
   1770e:	d301      	bcc.n	17714 <__udivsi3+0xc0>
   17710:	014b      	lsls	r3, r1, #5
   17712:	1ac0      	subs	r0, r0, r3
   17714:	4152      	adcs	r2, r2
   17716:	0903      	lsrs	r3, r0, #4
   17718:	428b      	cmp	r3, r1
   1771a:	d301      	bcc.n	17720 <__udivsi3+0xcc>
   1771c:	010b      	lsls	r3, r1, #4
   1771e:	1ac0      	subs	r0, r0, r3
   17720:	4152      	adcs	r2, r2
   17722:	08c3      	lsrs	r3, r0, #3
   17724:	428b      	cmp	r3, r1
   17726:	d301      	bcc.n	1772c <__udivsi3+0xd8>
   17728:	00cb      	lsls	r3, r1, #3
   1772a:	1ac0      	subs	r0, r0, r3
   1772c:	4152      	adcs	r2, r2
   1772e:	0883      	lsrs	r3, r0, #2
   17730:	428b      	cmp	r3, r1
   17732:	d301      	bcc.n	17738 <__udivsi3+0xe4>
   17734:	008b      	lsls	r3, r1, #2
   17736:	1ac0      	subs	r0, r0, r3
   17738:	4152      	adcs	r2, r2
   1773a:	0843      	lsrs	r3, r0, #1
   1773c:	428b      	cmp	r3, r1
   1773e:	d301      	bcc.n	17744 <__udivsi3+0xf0>
   17740:	004b      	lsls	r3, r1, #1
   17742:	1ac0      	subs	r0, r0, r3
   17744:	4152      	adcs	r2, r2
   17746:	1a41      	subs	r1, r0, r1
   17748:	d200      	bcs.n	1774c <__udivsi3+0xf8>
   1774a:	4601      	mov	r1, r0
   1774c:	4152      	adcs	r2, r2
   1774e:	4610      	mov	r0, r2
   17750:	4770      	bx	lr
   17752:	e7ff      	b.n	17754 <__udivsi3+0x100>
   17754:	b501      	push	{r0, lr}
   17756:	2000      	movs	r0, #0
   17758:	f000 f8f0 	bl	1793c <__aeabi_idiv0>
   1775c:	bd02      	pop	{r1, pc}
   1775e:	46c0      	nop			; (mov r8, r8)

00017760 <__aeabi_uidivmod>:
   17760:	2900      	cmp	r1, #0
   17762:	d0f7      	beq.n	17754 <__udivsi3+0x100>
   17764:	e776      	b.n	17654 <__udivsi3>
   17766:	4770      	bx	lr

00017768 <__divsi3>:
   17768:	4603      	mov	r3, r0
   1776a:	430b      	orrs	r3, r1
   1776c:	d47f      	bmi.n	1786e <__divsi3+0x106>
   1776e:	2200      	movs	r2, #0
   17770:	0843      	lsrs	r3, r0, #1
   17772:	428b      	cmp	r3, r1
   17774:	d374      	bcc.n	17860 <__divsi3+0xf8>
   17776:	0903      	lsrs	r3, r0, #4
   17778:	428b      	cmp	r3, r1
   1777a:	d35f      	bcc.n	1783c <__divsi3+0xd4>
   1777c:	0a03      	lsrs	r3, r0, #8
   1777e:	428b      	cmp	r3, r1
   17780:	d344      	bcc.n	1780c <__divsi3+0xa4>
   17782:	0b03      	lsrs	r3, r0, #12
   17784:	428b      	cmp	r3, r1
   17786:	d328      	bcc.n	177da <__divsi3+0x72>
   17788:	0c03      	lsrs	r3, r0, #16
   1778a:	428b      	cmp	r3, r1
   1778c:	d30d      	bcc.n	177aa <__divsi3+0x42>
   1778e:	22ff      	movs	r2, #255	; 0xff
   17790:	0209      	lsls	r1, r1, #8
   17792:	ba12      	rev	r2, r2
   17794:	0c03      	lsrs	r3, r0, #16
   17796:	428b      	cmp	r3, r1
   17798:	d302      	bcc.n	177a0 <__divsi3+0x38>
   1779a:	1212      	asrs	r2, r2, #8
   1779c:	0209      	lsls	r1, r1, #8
   1779e:	d065      	beq.n	1786c <__divsi3+0x104>
   177a0:	0b03      	lsrs	r3, r0, #12
   177a2:	428b      	cmp	r3, r1
   177a4:	d319      	bcc.n	177da <__divsi3+0x72>
   177a6:	e000      	b.n	177aa <__divsi3+0x42>
   177a8:	0a09      	lsrs	r1, r1, #8
   177aa:	0bc3      	lsrs	r3, r0, #15
   177ac:	428b      	cmp	r3, r1
   177ae:	d301      	bcc.n	177b4 <__divsi3+0x4c>
   177b0:	03cb      	lsls	r3, r1, #15
   177b2:	1ac0      	subs	r0, r0, r3
   177b4:	4152      	adcs	r2, r2
   177b6:	0b83      	lsrs	r3, r0, #14
   177b8:	428b      	cmp	r3, r1
   177ba:	d301      	bcc.n	177c0 <__divsi3+0x58>
   177bc:	038b      	lsls	r3, r1, #14
   177be:	1ac0      	subs	r0, r0, r3
   177c0:	4152      	adcs	r2, r2
   177c2:	0b43      	lsrs	r3, r0, #13
   177c4:	428b      	cmp	r3, r1
   177c6:	d301      	bcc.n	177cc <__divsi3+0x64>
   177c8:	034b      	lsls	r3, r1, #13
   177ca:	1ac0      	subs	r0, r0, r3
   177cc:	4152      	adcs	r2, r2
   177ce:	0b03      	lsrs	r3, r0, #12
   177d0:	428b      	cmp	r3, r1
   177d2:	d301      	bcc.n	177d8 <__divsi3+0x70>
   177d4:	030b      	lsls	r3, r1, #12
   177d6:	1ac0      	subs	r0, r0, r3
   177d8:	4152      	adcs	r2, r2
   177da:	0ac3      	lsrs	r3, r0, #11
   177dc:	428b      	cmp	r3, r1
   177de:	d301      	bcc.n	177e4 <__divsi3+0x7c>
   177e0:	02cb      	lsls	r3, r1, #11
   177e2:	1ac0      	subs	r0, r0, r3
   177e4:	4152      	adcs	r2, r2
   177e6:	0a83      	lsrs	r3, r0, #10
   177e8:	428b      	cmp	r3, r1
   177ea:	d301      	bcc.n	177f0 <__divsi3+0x88>
   177ec:	028b      	lsls	r3, r1, #10
   177ee:	1ac0      	subs	r0, r0, r3
   177f0:	4152      	adcs	r2, r2
   177f2:	0a43      	lsrs	r3, r0, #9
   177f4:	428b      	cmp	r3, r1
   177f6:	d301      	bcc.n	177fc <__divsi3+0x94>
   177f8:	024b      	lsls	r3, r1, #9
   177fa:	1ac0      	subs	r0, r0, r3
   177fc:	4152      	adcs	r2, r2
   177fe:	0a03      	lsrs	r3, r0, #8
   17800:	428b      	cmp	r3, r1
   17802:	d301      	bcc.n	17808 <__divsi3+0xa0>
   17804:	020b      	lsls	r3, r1, #8
   17806:	1ac0      	subs	r0, r0, r3
   17808:	4152      	adcs	r2, r2
   1780a:	d2cd      	bcs.n	177a8 <__divsi3+0x40>
   1780c:	09c3      	lsrs	r3, r0, #7
   1780e:	428b      	cmp	r3, r1
   17810:	d301      	bcc.n	17816 <__divsi3+0xae>
   17812:	01cb      	lsls	r3, r1, #7
   17814:	1ac0      	subs	r0, r0, r3
   17816:	4152      	adcs	r2, r2
   17818:	0983      	lsrs	r3, r0, #6
   1781a:	428b      	cmp	r3, r1
   1781c:	d301      	bcc.n	17822 <__divsi3+0xba>
   1781e:	018b      	lsls	r3, r1, #6
   17820:	1ac0      	subs	r0, r0, r3
   17822:	4152      	adcs	r2, r2
   17824:	0943      	lsrs	r3, r0, #5
   17826:	428b      	cmp	r3, r1
   17828:	d301      	bcc.n	1782e <__divsi3+0xc6>
   1782a:	014b      	lsls	r3, r1, #5
   1782c:	1ac0      	subs	r0, r0, r3
   1782e:	4152      	adcs	r2, r2
   17830:	0903      	lsrs	r3, r0, #4
   17832:	428b      	cmp	r3, r1
   17834:	d301      	bcc.n	1783a <__divsi3+0xd2>
   17836:	010b      	lsls	r3, r1, #4
   17838:	1ac0      	subs	r0, r0, r3
   1783a:	4152      	adcs	r2, r2
   1783c:	08c3      	lsrs	r3, r0, #3
   1783e:	428b      	cmp	r3, r1
   17840:	d301      	bcc.n	17846 <__divsi3+0xde>
   17842:	00cb      	lsls	r3, r1, #3
   17844:	1ac0      	subs	r0, r0, r3
   17846:	4152      	adcs	r2, r2
   17848:	0883      	lsrs	r3, r0, #2
   1784a:	428b      	cmp	r3, r1
   1784c:	d301      	bcc.n	17852 <__divsi3+0xea>
   1784e:	008b      	lsls	r3, r1, #2
   17850:	1ac0      	subs	r0, r0, r3
   17852:	4152      	adcs	r2, r2
   17854:	0843      	lsrs	r3, r0, #1
   17856:	428b      	cmp	r3, r1
   17858:	d301      	bcc.n	1785e <__divsi3+0xf6>
   1785a:	004b      	lsls	r3, r1, #1
   1785c:	1ac0      	subs	r0, r0, r3
   1785e:	4152      	adcs	r2, r2
   17860:	1a41      	subs	r1, r0, r1
   17862:	d200      	bcs.n	17866 <__divsi3+0xfe>
   17864:	4601      	mov	r1, r0
   17866:	4152      	adcs	r2, r2
   17868:	4610      	mov	r0, r2
   1786a:	4770      	bx	lr
   1786c:	e05d      	b.n	1792a <__divsi3+0x1c2>
   1786e:	0fca      	lsrs	r2, r1, #31
   17870:	d000      	beq.n	17874 <__divsi3+0x10c>
   17872:	4249      	negs	r1, r1
   17874:	1003      	asrs	r3, r0, #32
   17876:	d300      	bcc.n	1787a <__divsi3+0x112>
   17878:	4240      	negs	r0, r0
   1787a:	4053      	eors	r3, r2
   1787c:	2200      	movs	r2, #0
   1787e:	469c      	mov	ip, r3
   17880:	0903      	lsrs	r3, r0, #4
   17882:	428b      	cmp	r3, r1
   17884:	d32d      	bcc.n	178e2 <__divsi3+0x17a>
   17886:	0a03      	lsrs	r3, r0, #8
   17888:	428b      	cmp	r3, r1
   1788a:	d312      	bcc.n	178b2 <__divsi3+0x14a>
   1788c:	22fc      	movs	r2, #252	; 0xfc
   1788e:	0189      	lsls	r1, r1, #6
   17890:	ba12      	rev	r2, r2
   17892:	0a03      	lsrs	r3, r0, #8
   17894:	428b      	cmp	r3, r1
   17896:	d30c      	bcc.n	178b2 <__divsi3+0x14a>
   17898:	0189      	lsls	r1, r1, #6
   1789a:	1192      	asrs	r2, r2, #6
   1789c:	428b      	cmp	r3, r1
   1789e:	d308      	bcc.n	178b2 <__divsi3+0x14a>
   178a0:	0189      	lsls	r1, r1, #6
   178a2:	1192      	asrs	r2, r2, #6
   178a4:	428b      	cmp	r3, r1
   178a6:	d304      	bcc.n	178b2 <__divsi3+0x14a>
   178a8:	0189      	lsls	r1, r1, #6
   178aa:	d03a      	beq.n	17922 <__divsi3+0x1ba>
   178ac:	1192      	asrs	r2, r2, #6
   178ae:	e000      	b.n	178b2 <__divsi3+0x14a>
   178b0:	0989      	lsrs	r1, r1, #6
   178b2:	09c3      	lsrs	r3, r0, #7
   178b4:	428b      	cmp	r3, r1
   178b6:	d301      	bcc.n	178bc <__divsi3+0x154>
   178b8:	01cb      	lsls	r3, r1, #7
   178ba:	1ac0      	subs	r0, r0, r3
   178bc:	4152      	adcs	r2, r2
   178be:	0983      	lsrs	r3, r0, #6
   178c0:	428b      	cmp	r3, r1
   178c2:	d301      	bcc.n	178c8 <__divsi3+0x160>
   178c4:	018b      	lsls	r3, r1, #6
   178c6:	1ac0      	subs	r0, r0, r3
   178c8:	4152      	adcs	r2, r2
   178ca:	0943      	lsrs	r3, r0, #5
   178cc:	428b      	cmp	r3, r1
   178ce:	d301      	bcc.n	178d4 <__divsi3+0x16c>
   178d0:	014b      	lsls	r3, r1, #5
   178d2:	1ac0      	subs	r0, r0, r3
   178d4:	4152      	adcs	r2, r2
   178d6:	0903      	lsrs	r3, r0, #4
   178d8:	428b      	cmp	r3, r1
   178da:	d301      	bcc.n	178e0 <__divsi3+0x178>
   178dc:	010b      	lsls	r3, r1, #4
   178de:	1ac0      	subs	r0, r0, r3
   178e0:	4152      	adcs	r2, r2
   178e2:	08c3      	lsrs	r3, r0, #3
   178e4:	428b      	cmp	r3, r1
   178e6:	d301      	bcc.n	178ec <__divsi3+0x184>
   178e8:	00cb      	lsls	r3, r1, #3
   178ea:	1ac0      	subs	r0, r0, r3
   178ec:	4152      	adcs	r2, r2
   178ee:	0883      	lsrs	r3, r0, #2
   178f0:	428b      	cmp	r3, r1
   178f2:	d301      	bcc.n	178f8 <__divsi3+0x190>
   178f4:	008b      	lsls	r3, r1, #2
   178f6:	1ac0      	subs	r0, r0, r3
   178f8:	4152      	adcs	r2, r2
   178fa:	d2d9      	bcs.n	178b0 <__divsi3+0x148>
   178fc:	0843      	lsrs	r3, r0, #1
   178fe:	428b      	cmp	r3, r1
   17900:	d301      	bcc.n	17906 <__divsi3+0x19e>
   17902:	004b      	lsls	r3, r1, #1
   17904:	1ac0      	subs	r0, r0, r3
   17906:	4152      	adcs	r2, r2
   17908:	1a41      	subs	r1, r0, r1
   1790a:	d200      	bcs.n	1790e <__divsi3+0x1a6>
   1790c:	4601      	mov	r1, r0
   1790e:	4663      	mov	r3, ip
   17910:	4152      	adcs	r2, r2
   17912:	105b      	asrs	r3, r3, #1
   17914:	4610      	mov	r0, r2
   17916:	d301      	bcc.n	1791c <__divsi3+0x1b4>
   17918:	4240      	negs	r0, r0
   1791a:	2b00      	cmp	r3, #0
   1791c:	d500      	bpl.n	17920 <__divsi3+0x1b8>
   1791e:	4249      	negs	r1, r1
   17920:	4770      	bx	lr
   17922:	4663      	mov	r3, ip
   17924:	105b      	asrs	r3, r3, #1
   17926:	d300      	bcc.n	1792a <__divsi3+0x1c2>
   17928:	4240      	negs	r0, r0
   1792a:	b501      	push	{r0, lr}
   1792c:	2000      	movs	r0, #0
   1792e:	f000 f805 	bl	1793c <__aeabi_idiv0>
   17932:	bd02      	pop	{r1, pc}

00017934 <__aeabi_idivmod>:
   17934:	2900      	cmp	r1, #0
   17936:	d0f8      	beq.n	1792a <__divsi3+0x1c2>
   17938:	e716      	b.n	17768 <__divsi3>
   1793a:	4770      	bx	lr

0001793c <__aeabi_idiv0>:
   1793c:	4770      	bx	lr
   1793e:	46c0      	nop			; (mov r8, r8)

00017940 <__aeabi_cdrcmple>:
   17940:	4684      	mov	ip, r0
   17942:	1c10      	adds	r0, r2, #0
   17944:	4662      	mov	r2, ip
   17946:	468c      	mov	ip, r1
   17948:	1c19      	adds	r1, r3, #0
   1794a:	4663      	mov	r3, ip
   1794c:	e000      	b.n	17950 <__aeabi_cdcmpeq>
   1794e:	46c0      	nop			; (mov r8, r8)

00017950 <__aeabi_cdcmpeq>:
   17950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   17952:	f001 f9f5 	bl	18d40 <__ledf2>
   17956:	2800      	cmp	r0, #0
   17958:	d401      	bmi.n	1795e <__aeabi_cdcmpeq+0xe>
   1795a:	2100      	movs	r1, #0
   1795c:	42c8      	cmn	r0, r1
   1795e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00017960 <__aeabi_dcmpeq>:
   17960:	b510      	push	{r4, lr}
   17962:	f001 f94f 	bl	18c04 <__eqdf2>
   17966:	4240      	negs	r0, r0
   17968:	3001      	adds	r0, #1
   1796a:	bd10      	pop	{r4, pc}

0001796c <__aeabi_dcmplt>:
   1796c:	b510      	push	{r4, lr}
   1796e:	f001 f9e7 	bl	18d40 <__ledf2>
   17972:	2800      	cmp	r0, #0
   17974:	db01      	blt.n	1797a <__aeabi_dcmplt+0xe>
   17976:	2000      	movs	r0, #0
   17978:	bd10      	pop	{r4, pc}
   1797a:	2001      	movs	r0, #1
   1797c:	bd10      	pop	{r4, pc}
   1797e:	46c0      	nop			; (mov r8, r8)

00017980 <__aeabi_dcmple>:
   17980:	b510      	push	{r4, lr}
   17982:	f001 f9dd 	bl	18d40 <__ledf2>
   17986:	2800      	cmp	r0, #0
   17988:	dd01      	ble.n	1798e <__aeabi_dcmple+0xe>
   1798a:	2000      	movs	r0, #0
   1798c:	bd10      	pop	{r4, pc}
   1798e:	2001      	movs	r0, #1
   17990:	bd10      	pop	{r4, pc}
   17992:	46c0      	nop			; (mov r8, r8)

00017994 <__aeabi_dcmpgt>:
   17994:	b510      	push	{r4, lr}
   17996:	f001 f96f 	bl	18c78 <__gedf2>
   1799a:	2800      	cmp	r0, #0
   1799c:	dc01      	bgt.n	179a2 <__aeabi_dcmpgt+0xe>
   1799e:	2000      	movs	r0, #0
   179a0:	bd10      	pop	{r4, pc}
   179a2:	2001      	movs	r0, #1
   179a4:	bd10      	pop	{r4, pc}
   179a6:	46c0      	nop			; (mov r8, r8)

000179a8 <__aeabi_dcmpge>:
   179a8:	b510      	push	{r4, lr}
   179aa:	f001 f965 	bl	18c78 <__gedf2>
   179ae:	2800      	cmp	r0, #0
   179b0:	da01      	bge.n	179b6 <__aeabi_dcmpge+0xe>
   179b2:	2000      	movs	r0, #0
   179b4:	bd10      	pop	{r4, pc}
   179b6:	2001      	movs	r0, #1
   179b8:	bd10      	pop	{r4, pc}
   179ba:	46c0      	nop			; (mov r8, r8)

000179bc <__aeabi_uldivmod>:
   179bc:	2b00      	cmp	r3, #0
   179be:	d111      	bne.n	179e4 <__aeabi_uldivmod+0x28>
   179c0:	2a00      	cmp	r2, #0
   179c2:	d10f      	bne.n	179e4 <__aeabi_uldivmod+0x28>
   179c4:	2900      	cmp	r1, #0
   179c6:	d100      	bne.n	179ca <__aeabi_uldivmod+0xe>
   179c8:	2800      	cmp	r0, #0
   179ca:	d002      	beq.n	179d2 <__aeabi_uldivmod+0x16>
   179cc:	2100      	movs	r1, #0
   179ce:	43c9      	mvns	r1, r1
   179d0:	1c08      	adds	r0, r1, #0
   179d2:	b407      	push	{r0, r1, r2}
   179d4:	4802      	ldr	r0, [pc, #8]	; (179e0 <__aeabi_uldivmod+0x24>)
   179d6:	a102      	add	r1, pc, #8	; (adr r1, 179e0 <__aeabi_uldivmod+0x24>)
   179d8:	1840      	adds	r0, r0, r1
   179da:	9002      	str	r0, [sp, #8]
   179dc:	bd03      	pop	{r0, r1, pc}
   179de:	46c0      	nop			; (mov r8, r8)
   179e0:	ffffff5d 	.word	0xffffff5d
   179e4:	b403      	push	{r0, r1}
   179e6:	4668      	mov	r0, sp
   179e8:	b501      	push	{r0, lr}
   179ea:	9802      	ldr	r0, [sp, #8]
   179ec:	f000 f824 	bl	17a38 <__udivmoddi4>
   179f0:	9b01      	ldr	r3, [sp, #4]
   179f2:	469e      	mov	lr, r3
   179f4:	b002      	add	sp, #8
   179f6:	bc0c      	pop	{r2, r3}
   179f8:	4770      	bx	lr
   179fa:	46c0      	nop			; (mov r8, r8)

000179fc <__aeabi_d2uiz>:
   179fc:	b570      	push	{r4, r5, r6, lr}
   179fe:	2200      	movs	r2, #0
   17a00:	4b0c      	ldr	r3, [pc, #48]	; (17a34 <__aeabi_d2uiz+0x38>)
   17a02:	0004      	movs	r4, r0
   17a04:	000d      	movs	r5, r1
   17a06:	f7ff ffcf 	bl	179a8 <__aeabi_dcmpge>
   17a0a:	2800      	cmp	r0, #0
   17a0c:	d104      	bne.n	17a18 <__aeabi_d2uiz+0x1c>
   17a0e:	0020      	movs	r0, r4
   17a10:	0029      	movs	r1, r5
   17a12:	f001 ff8d 	bl	19930 <__aeabi_d2iz>
   17a16:	bd70      	pop	{r4, r5, r6, pc}
   17a18:	4b06      	ldr	r3, [pc, #24]	; (17a34 <__aeabi_d2uiz+0x38>)
   17a1a:	2200      	movs	r2, #0
   17a1c:	0020      	movs	r0, r4
   17a1e:	0029      	movs	r1, r5
   17a20:	f001 fc70 	bl	19304 <__aeabi_dsub>
   17a24:	f001 ff84 	bl	19930 <__aeabi_d2iz>
   17a28:	2380      	movs	r3, #128	; 0x80
   17a2a:	061b      	lsls	r3, r3, #24
   17a2c:	469c      	mov	ip, r3
   17a2e:	4460      	add	r0, ip
   17a30:	e7f1      	b.n	17a16 <__aeabi_d2uiz+0x1a>
   17a32:	46c0      	nop			; (mov r8, r8)
   17a34:	41e00000 	.word	0x41e00000

00017a38 <__udivmoddi4>:
   17a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a3a:	4657      	mov	r7, sl
   17a3c:	464e      	mov	r6, r9
   17a3e:	4645      	mov	r5, r8
   17a40:	46de      	mov	lr, fp
   17a42:	b5e0      	push	{r5, r6, r7, lr}
   17a44:	0004      	movs	r4, r0
   17a46:	b083      	sub	sp, #12
   17a48:	000d      	movs	r5, r1
   17a4a:	4692      	mov	sl, r2
   17a4c:	4699      	mov	r9, r3
   17a4e:	428b      	cmp	r3, r1
   17a50:	d82f      	bhi.n	17ab2 <__udivmoddi4+0x7a>
   17a52:	d02c      	beq.n	17aae <__udivmoddi4+0x76>
   17a54:	4649      	mov	r1, r9
   17a56:	4650      	mov	r0, sl
   17a58:	f002 f888 	bl	19b6c <__clzdi2>
   17a5c:	0029      	movs	r1, r5
   17a5e:	0006      	movs	r6, r0
   17a60:	0020      	movs	r0, r4
   17a62:	f002 f883 	bl	19b6c <__clzdi2>
   17a66:	1a33      	subs	r3, r6, r0
   17a68:	4698      	mov	r8, r3
   17a6a:	3b20      	subs	r3, #32
   17a6c:	469b      	mov	fp, r3
   17a6e:	d500      	bpl.n	17a72 <__udivmoddi4+0x3a>
   17a70:	e074      	b.n	17b5c <__udivmoddi4+0x124>
   17a72:	4653      	mov	r3, sl
   17a74:	465a      	mov	r2, fp
   17a76:	4093      	lsls	r3, r2
   17a78:	001f      	movs	r7, r3
   17a7a:	4653      	mov	r3, sl
   17a7c:	4642      	mov	r2, r8
   17a7e:	4093      	lsls	r3, r2
   17a80:	001e      	movs	r6, r3
   17a82:	42af      	cmp	r7, r5
   17a84:	d829      	bhi.n	17ada <__udivmoddi4+0xa2>
   17a86:	d026      	beq.n	17ad6 <__udivmoddi4+0x9e>
   17a88:	465b      	mov	r3, fp
   17a8a:	1ba4      	subs	r4, r4, r6
   17a8c:	41bd      	sbcs	r5, r7
   17a8e:	2b00      	cmp	r3, #0
   17a90:	da00      	bge.n	17a94 <__udivmoddi4+0x5c>
   17a92:	e079      	b.n	17b88 <__udivmoddi4+0x150>
   17a94:	2200      	movs	r2, #0
   17a96:	2300      	movs	r3, #0
   17a98:	9200      	str	r2, [sp, #0]
   17a9a:	9301      	str	r3, [sp, #4]
   17a9c:	2301      	movs	r3, #1
   17a9e:	465a      	mov	r2, fp
   17aa0:	4093      	lsls	r3, r2
   17aa2:	9301      	str	r3, [sp, #4]
   17aa4:	2301      	movs	r3, #1
   17aa6:	4642      	mov	r2, r8
   17aa8:	4093      	lsls	r3, r2
   17aaa:	9300      	str	r3, [sp, #0]
   17aac:	e019      	b.n	17ae2 <__udivmoddi4+0xaa>
   17aae:	4282      	cmp	r2, r0
   17ab0:	d9d0      	bls.n	17a54 <__udivmoddi4+0x1c>
   17ab2:	2200      	movs	r2, #0
   17ab4:	2300      	movs	r3, #0
   17ab6:	9200      	str	r2, [sp, #0]
   17ab8:	9301      	str	r3, [sp, #4]
   17aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17abc:	2b00      	cmp	r3, #0
   17abe:	d001      	beq.n	17ac4 <__udivmoddi4+0x8c>
   17ac0:	601c      	str	r4, [r3, #0]
   17ac2:	605d      	str	r5, [r3, #4]
   17ac4:	9800      	ldr	r0, [sp, #0]
   17ac6:	9901      	ldr	r1, [sp, #4]
   17ac8:	b003      	add	sp, #12
   17aca:	bc3c      	pop	{r2, r3, r4, r5}
   17acc:	4690      	mov	r8, r2
   17ace:	4699      	mov	r9, r3
   17ad0:	46a2      	mov	sl, r4
   17ad2:	46ab      	mov	fp, r5
   17ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ad6:	42a3      	cmp	r3, r4
   17ad8:	d9d6      	bls.n	17a88 <__udivmoddi4+0x50>
   17ada:	2200      	movs	r2, #0
   17adc:	2300      	movs	r3, #0
   17ade:	9200      	str	r2, [sp, #0]
   17ae0:	9301      	str	r3, [sp, #4]
   17ae2:	4643      	mov	r3, r8
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	d0e8      	beq.n	17aba <__udivmoddi4+0x82>
   17ae8:	07fb      	lsls	r3, r7, #31
   17aea:	0872      	lsrs	r2, r6, #1
   17aec:	431a      	orrs	r2, r3
   17aee:	4646      	mov	r6, r8
   17af0:	087b      	lsrs	r3, r7, #1
   17af2:	e00e      	b.n	17b12 <__udivmoddi4+0xda>
   17af4:	42ab      	cmp	r3, r5
   17af6:	d101      	bne.n	17afc <__udivmoddi4+0xc4>
   17af8:	42a2      	cmp	r2, r4
   17afa:	d80c      	bhi.n	17b16 <__udivmoddi4+0xde>
   17afc:	1aa4      	subs	r4, r4, r2
   17afe:	419d      	sbcs	r5, r3
   17b00:	2001      	movs	r0, #1
   17b02:	1924      	adds	r4, r4, r4
   17b04:	416d      	adcs	r5, r5
   17b06:	2100      	movs	r1, #0
   17b08:	3e01      	subs	r6, #1
   17b0a:	1824      	adds	r4, r4, r0
   17b0c:	414d      	adcs	r5, r1
   17b0e:	2e00      	cmp	r6, #0
   17b10:	d006      	beq.n	17b20 <__udivmoddi4+0xe8>
   17b12:	42ab      	cmp	r3, r5
   17b14:	d9ee      	bls.n	17af4 <__udivmoddi4+0xbc>
   17b16:	3e01      	subs	r6, #1
   17b18:	1924      	adds	r4, r4, r4
   17b1a:	416d      	adcs	r5, r5
   17b1c:	2e00      	cmp	r6, #0
   17b1e:	d1f8      	bne.n	17b12 <__udivmoddi4+0xda>
   17b20:	465b      	mov	r3, fp
   17b22:	9800      	ldr	r0, [sp, #0]
   17b24:	9901      	ldr	r1, [sp, #4]
   17b26:	1900      	adds	r0, r0, r4
   17b28:	4169      	adcs	r1, r5
   17b2a:	2b00      	cmp	r3, #0
   17b2c:	db22      	blt.n	17b74 <__udivmoddi4+0x13c>
   17b2e:	002b      	movs	r3, r5
   17b30:	465a      	mov	r2, fp
   17b32:	40d3      	lsrs	r3, r2
   17b34:	002a      	movs	r2, r5
   17b36:	4644      	mov	r4, r8
   17b38:	40e2      	lsrs	r2, r4
   17b3a:	001c      	movs	r4, r3
   17b3c:	465b      	mov	r3, fp
   17b3e:	0015      	movs	r5, r2
   17b40:	2b00      	cmp	r3, #0
   17b42:	db2c      	blt.n	17b9e <__udivmoddi4+0x166>
   17b44:	0026      	movs	r6, r4
   17b46:	409e      	lsls	r6, r3
   17b48:	0033      	movs	r3, r6
   17b4a:	0026      	movs	r6, r4
   17b4c:	4647      	mov	r7, r8
   17b4e:	40be      	lsls	r6, r7
   17b50:	0032      	movs	r2, r6
   17b52:	1a80      	subs	r0, r0, r2
   17b54:	4199      	sbcs	r1, r3
   17b56:	9000      	str	r0, [sp, #0]
   17b58:	9101      	str	r1, [sp, #4]
   17b5a:	e7ae      	b.n	17aba <__udivmoddi4+0x82>
   17b5c:	4642      	mov	r2, r8
   17b5e:	2320      	movs	r3, #32
   17b60:	1a9b      	subs	r3, r3, r2
   17b62:	4652      	mov	r2, sl
   17b64:	40da      	lsrs	r2, r3
   17b66:	4641      	mov	r1, r8
   17b68:	0013      	movs	r3, r2
   17b6a:	464a      	mov	r2, r9
   17b6c:	408a      	lsls	r2, r1
   17b6e:	0017      	movs	r7, r2
   17b70:	431f      	orrs	r7, r3
   17b72:	e782      	b.n	17a7a <__udivmoddi4+0x42>
   17b74:	4642      	mov	r2, r8
   17b76:	2320      	movs	r3, #32
   17b78:	1a9b      	subs	r3, r3, r2
   17b7a:	002a      	movs	r2, r5
   17b7c:	4646      	mov	r6, r8
   17b7e:	409a      	lsls	r2, r3
   17b80:	0023      	movs	r3, r4
   17b82:	40f3      	lsrs	r3, r6
   17b84:	4313      	orrs	r3, r2
   17b86:	e7d5      	b.n	17b34 <__udivmoddi4+0xfc>
   17b88:	4642      	mov	r2, r8
   17b8a:	2320      	movs	r3, #32
   17b8c:	2100      	movs	r1, #0
   17b8e:	1a9b      	subs	r3, r3, r2
   17b90:	2200      	movs	r2, #0
   17b92:	9100      	str	r1, [sp, #0]
   17b94:	9201      	str	r2, [sp, #4]
   17b96:	2201      	movs	r2, #1
   17b98:	40da      	lsrs	r2, r3
   17b9a:	9201      	str	r2, [sp, #4]
   17b9c:	e782      	b.n	17aa4 <__udivmoddi4+0x6c>
   17b9e:	4642      	mov	r2, r8
   17ba0:	2320      	movs	r3, #32
   17ba2:	0026      	movs	r6, r4
   17ba4:	1a9b      	subs	r3, r3, r2
   17ba6:	40de      	lsrs	r6, r3
   17ba8:	002f      	movs	r7, r5
   17baa:	46b4      	mov	ip, r6
   17bac:	4097      	lsls	r7, r2
   17bae:	4666      	mov	r6, ip
   17bb0:	003b      	movs	r3, r7
   17bb2:	4333      	orrs	r3, r6
   17bb4:	e7c9      	b.n	17b4a <__udivmoddi4+0x112>
   17bb6:	46c0      	nop			; (mov r8, r8)

00017bb8 <__aeabi_fsub>:
   17bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bba:	464f      	mov	r7, r9
   17bbc:	46d6      	mov	lr, sl
   17bbe:	4646      	mov	r6, r8
   17bc0:	0044      	lsls	r4, r0, #1
   17bc2:	b5c0      	push	{r6, r7, lr}
   17bc4:	0fc2      	lsrs	r2, r0, #31
   17bc6:	0247      	lsls	r7, r0, #9
   17bc8:	0248      	lsls	r0, r1, #9
   17bca:	0a40      	lsrs	r0, r0, #9
   17bcc:	4684      	mov	ip, r0
   17bce:	4666      	mov	r6, ip
   17bd0:	0a7b      	lsrs	r3, r7, #9
   17bd2:	0048      	lsls	r0, r1, #1
   17bd4:	0fc9      	lsrs	r1, r1, #31
   17bd6:	469a      	mov	sl, r3
   17bd8:	0e24      	lsrs	r4, r4, #24
   17bda:	0015      	movs	r5, r2
   17bdc:	00db      	lsls	r3, r3, #3
   17bde:	0e00      	lsrs	r0, r0, #24
   17be0:	4689      	mov	r9, r1
   17be2:	00f6      	lsls	r6, r6, #3
   17be4:	28ff      	cmp	r0, #255	; 0xff
   17be6:	d100      	bne.n	17bea <__aeabi_fsub+0x32>
   17be8:	e08f      	b.n	17d0a <__aeabi_fsub+0x152>
   17bea:	2101      	movs	r1, #1
   17bec:	464f      	mov	r7, r9
   17bee:	404f      	eors	r7, r1
   17bf0:	0039      	movs	r1, r7
   17bf2:	4291      	cmp	r1, r2
   17bf4:	d066      	beq.n	17cc4 <__aeabi_fsub+0x10c>
   17bf6:	1a22      	subs	r2, r4, r0
   17bf8:	2a00      	cmp	r2, #0
   17bfa:	dc00      	bgt.n	17bfe <__aeabi_fsub+0x46>
   17bfc:	e09d      	b.n	17d3a <__aeabi_fsub+0x182>
   17bfe:	2800      	cmp	r0, #0
   17c00:	d13d      	bne.n	17c7e <__aeabi_fsub+0xc6>
   17c02:	2e00      	cmp	r6, #0
   17c04:	d100      	bne.n	17c08 <__aeabi_fsub+0x50>
   17c06:	e08b      	b.n	17d20 <__aeabi_fsub+0x168>
   17c08:	1e51      	subs	r1, r2, #1
   17c0a:	2900      	cmp	r1, #0
   17c0c:	d000      	beq.n	17c10 <__aeabi_fsub+0x58>
   17c0e:	e0b5      	b.n	17d7c <__aeabi_fsub+0x1c4>
   17c10:	2401      	movs	r4, #1
   17c12:	1b9b      	subs	r3, r3, r6
   17c14:	015a      	lsls	r2, r3, #5
   17c16:	d544      	bpl.n	17ca2 <__aeabi_fsub+0xea>
   17c18:	019b      	lsls	r3, r3, #6
   17c1a:	099f      	lsrs	r7, r3, #6
   17c1c:	0038      	movs	r0, r7
   17c1e:	f001 ff87 	bl	19b30 <__clzsi2>
   17c22:	3805      	subs	r0, #5
   17c24:	4087      	lsls	r7, r0
   17c26:	4284      	cmp	r4, r0
   17c28:	dd00      	ble.n	17c2c <__aeabi_fsub+0x74>
   17c2a:	e096      	b.n	17d5a <__aeabi_fsub+0x1a2>
   17c2c:	1b04      	subs	r4, r0, r4
   17c2e:	003a      	movs	r2, r7
   17c30:	2020      	movs	r0, #32
   17c32:	3401      	adds	r4, #1
   17c34:	40e2      	lsrs	r2, r4
   17c36:	1b04      	subs	r4, r0, r4
   17c38:	40a7      	lsls	r7, r4
   17c3a:	003b      	movs	r3, r7
   17c3c:	1e5f      	subs	r7, r3, #1
   17c3e:	41bb      	sbcs	r3, r7
   17c40:	2400      	movs	r4, #0
   17c42:	4313      	orrs	r3, r2
   17c44:	075a      	lsls	r2, r3, #29
   17c46:	d004      	beq.n	17c52 <__aeabi_fsub+0x9a>
   17c48:	220f      	movs	r2, #15
   17c4a:	401a      	ands	r2, r3
   17c4c:	2a04      	cmp	r2, #4
   17c4e:	d000      	beq.n	17c52 <__aeabi_fsub+0x9a>
   17c50:	3304      	adds	r3, #4
   17c52:	015a      	lsls	r2, r3, #5
   17c54:	d527      	bpl.n	17ca6 <__aeabi_fsub+0xee>
   17c56:	3401      	adds	r4, #1
   17c58:	2cff      	cmp	r4, #255	; 0xff
   17c5a:	d100      	bne.n	17c5e <__aeabi_fsub+0xa6>
   17c5c:	e079      	b.n	17d52 <__aeabi_fsub+0x19a>
   17c5e:	2201      	movs	r2, #1
   17c60:	019b      	lsls	r3, r3, #6
   17c62:	0a5b      	lsrs	r3, r3, #9
   17c64:	b2e4      	uxtb	r4, r4
   17c66:	402a      	ands	r2, r5
   17c68:	025b      	lsls	r3, r3, #9
   17c6a:	05e4      	lsls	r4, r4, #23
   17c6c:	0a58      	lsrs	r0, r3, #9
   17c6e:	07d2      	lsls	r2, r2, #31
   17c70:	4320      	orrs	r0, r4
   17c72:	4310      	orrs	r0, r2
   17c74:	bc1c      	pop	{r2, r3, r4}
   17c76:	4690      	mov	r8, r2
   17c78:	4699      	mov	r9, r3
   17c7a:	46a2      	mov	sl, r4
   17c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c7e:	2cff      	cmp	r4, #255	; 0xff
   17c80:	d0e0      	beq.n	17c44 <__aeabi_fsub+0x8c>
   17c82:	2180      	movs	r1, #128	; 0x80
   17c84:	04c9      	lsls	r1, r1, #19
   17c86:	430e      	orrs	r6, r1
   17c88:	2a1b      	cmp	r2, #27
   17c8a:	dc7b      	bgt.n	17d84 <__aeabi_fsub+0x1cc>
   17c8c:	0031      	movs	r1, r6
   17c8e:	2020      	movs	r0, #32
   17c90:	40d1      	lsrs	r1, r2
   17c92:	1a82      	subs	r2, r0, r2
   17c94:	4096      	lsls	r6, r2
   17c96:	1e72      	subs	r2, r6, #1
   17c98:	4196      	sbcs	r6, r2
   17c9a:	430e      	orrs	r6, r1
   17c9c:	1b9b      	subs	r3, r3, r6
   17c9e:	015a      	lsls	r2, r3, #5
   17ca0:	d4ba      	bmi.n	17c18 <__aeabi_fsub+0x60>
   17ca2:	075a      	lsls	r2, r3, #29
   17ca4:	d1d0      	bne.n	17c48 <__aeabi_fsub+0x90>
   17ca6:	2201      	movs	r2, #1
   17ca8:	08df      	lsrs	r7, r3, #3
   17caa:	402a      	ands	r2, r5
   17cac:	2cff      	cmp	r4, #255	; 0xff
   17cae:	d133      	bne.n	17d18 <__aeabi_fsub+0x160>
   17cb0:	2f00      	cmp	r7, #0
   17cb2:	d100      	bne.n	17cb6 <__aeabi_fsub+0xfe>
   17cb4:	e0a8      	b.n	17e08 <__aeabi_fsub+0x250>
   17cb6:	2380      	movs	r3, #128	; 0x80
   17cb8:	03db      	lsls	r3, r3, #15
   17cba:	433b      	orrs	r3, r7
   17cbc:	025b      	lsls	r3, r3, #9
   17cbe:	0a5b      	lsrs	r3, r3, #9
   17cc0:	24ff      	movs	r4, #255	; 0xff
   17cc2:	e7d1      	b.n	17c68 <__aeabi_fsub+0xb0>
   17cc4:	1a21      	subs	r1, r4, r0
   17cc6:	2900      	cmp	r1, #0
   17cc8:	dd4c      	ble.n	17d64 <__aeabi_fsub+0x1ac>
   17cca:	2800      	cmp	r0, #0
   17ccc:	d02a      	beq.n	17d24 <__aeabi_fsub+0x16c>
   17cce:	2cff      	cmp	r4, #255	; 0xff
   17cd0:	d0b8      	beq.n	17c44 <__aeabi_fsub+0x8c>
   17cd2:	2080      	movs	r0, #128	; 0x80
   17cd4:	04c0      	lsls	r0, r0, #19
   17cd6:	4306      	orrs	r6, r0
   17cd8:	291b      	cmp	r1, #27
   17cda:	dd00      	ble.n	17cde <__aeabi_fsub+0x126>
   17cdc:	e0af      	b.n	17e3e <__aeabi_fsub+0x286>
   17cde:	0030      	movs	r0, r6
   17ce0:	2720      	movs	r7, #32
   17ce2:	40c8      	lsrs	r0, r1
   17ce4:	1a79      	subs	r1, r7, r1
   17ce6:	408e      	lsls	r6, r1
   17ce8:	1e71      	subs	r1, r6, #1
   17cea:	418e      	sbcs	r6, r1
   17cec:	4306      	orrs	r6, r0
   17cee:	199b      	adds	r3, r3, r6
   17cf0:	0159      	lsls	r1, r3, #5
   17cf2:	d5d6      	bpl.n	17ca2 <__aeabi_fsub+0xea>
   17cf4:	3401      	adds	r4, #1
   17cf6:	2cff      	cmp	r4, #255	; 0xff
   17cf8:	d100      	bne.n	17cfc <__aeabi_fsub+0x144>
   17cfa:	e085      	b.n	17e08 <__aeabi_fsub+0x250>
   17cfc:	2201      	movs	r2, #1
   17cfe:	497a      	ldr	r1, [pc, #488]	; (17ee8 <__aeabi_fsub+0x330>)
   17d00:	401a      	ands	r2, r3
   17d02:	085b      	lsrs	r3, r3, #1
   17d04:	400b      	ands	r3, r1
   17d06:	4313      	orrs	r3, r2
   17d08:	e79c      	b.n	17c44 <__aeabi_fsub+0x8c>
   17d0a:	2e00      	cmp	r6, #0
   17d0c:	d000      	beq.n	17d10 <__aeabi_fsub+0x158>
   17d0e:	e770      	b.n	17bf2 <__aeabi_fsub+0x3a>
   17d10:	e76b      	b.n	17bea <__aeabi_fsub+0x32>
   17d12:	1e3b      	subs	r3, r7, #0
   17d14:	d1c5      	bne.n	17ca2 <__aeabi_fsub+0xea>
   17d16:	2200      	movs	r2, #0
   17d18:	027b      	lsls	r3, r7, #9
   17d1a:	0a5b      	lsrs	r3, r3, #9
   17d1c:	b2e4      	uxtb	r4, r4
   17d1e:	e7a3      	b.n	17c68 <__aeabi_fsub+0xb0>
   17d20:	0014      	movs	r4, r2
   17d22:	e78f      	b.n	17c44 <__aeabi_fsub+0x8c>
   17d24:	2e00      	cmp	r6, #0
   17d26:	d04d      	beq.n	17dc4 <__aeabi_fsub+0x20c>
   17d28:	1e48      	subs	r0, r1, #1
   17d2a:	2800      	cmp	r0, #0
   17d2c:	d157      	bne.n	17dde <__aeabi_fsub+0x226>
   17d2e:	199b      	adds	r3, r3, r6
   17d30:	2401      	movs	r4, #1
   17d32:	015a      	lsls	r2, r3, #5
   17d34:	d5b5      	bpl.n	17ca2 <__aeabi_fsub+0xea>
   17d36:	2402      	movs	r4, #2
   17d38:	e7e0      	b.n	17cfc <__aeabi_fsub+0x144>
   17d3a:	2a00      	cmp	r2, #0
   17d3c:	d125      	bne.n	17d8a <__aeabi_fsub+0x1d2>
   17d3e:	1c62      	adds	r2, r4, #1
   17d40:	b2d2      	uxtb	r2, r2
   17d42:	2a01      	cmp	r2, #1
   17d44:	dd72      	ble.n	17e2c <__aeabi_fsub+0x274>
   17d46:	1b9f      	subs	r7, r3, r6
   17d48:	017a      	lsls	r2, r7, #5
   17d4a:	d535      	bpl.n	17db8 <__aeabi_fsub+0x200>
   17d4c:	1af7      	subs	r7, r6, r3
   17d4e:	000d      	movs	r5, r1
   17d50:	e764      	b.n	17c1c <__aeabi_fsub+0x64>
   17d52:	2201      	movs	r2, #1
   17d54:	2300      	movs	r3, #0
   17d56:	402a      	ands	r2, r5
   17d58:	e786      	b.n	17c68 <__aeabi_fsub+0xb0>
   17d5a:	003b      	movs	r3, r7
   17d5c:	4a63      	ldr	r2, [pc, #396]	; (17eec <__aeabi_fsub+0x334>)
   17d5e:	1a24      	subs	r4, r4, r0
   17d60:	4013      	ands	r3, r2
   17d62:	e76f      	b.n	17c44 <__aeabi_fsub+0x8c>
   17d64:	2900      	cmp	r1, #0
   17d66:	d16c      	bne.n	17e42 <__aeabi_fsub+0x28a>
   17d68:	1c61      	adds	r1, r4, #1
   17d6a:	b2c8      	uxtb	r0, r1
   17d6c:	2801      	cmp	r0, #1
   17d6e:	dd4e      	ble.n	17e0e <__aeabi_fsub+0x256>
   17d70:	29ff      	cmp	r1, #255	; 0xff
   17d72:	d049      	beq.n	17e08 <__aeabi_fsub+0x250>
   17d74:	199b      	adds	r3, r3, r6
   17d76:	085b      	lsrs	r3, r3, #1
   17d78:	000c      	movs	r4, r1
   17d7a:	e763      	b.n	17c44 <__aeabi_fsub+0x8c>
   17d7c:	2aff      	cmp	r2, #255	; 0xff
   17d7e:	d041      	beq.n	17e04 <__aeabi_fsub+0x24c>
   17d80:	000a      	movs	r2, r1
   17d82:	e781      	b.n	17c88 <__aeabi_fsub+0xd0>
   17d84:	2601      	movs	r6, #1
   17d86:	1b9b      	subs	r3, r3, r6
   17d88:	e789      	b.n	17c9e <__aeabi_fsub+0xe6>
   17d8a:	2c00      	cmp	r4, #0
   17d8c:	d01c      	beq.n	17dc8 <__aeabi_fsub+0x210>
   17d8e:	28ff      	cmp	r0, #255	; 0xff
   17d90:	d021      	beq.n	17dd6 <__aeabi_fsub+0x21e>
   17d92:	2480      	movs	r4, #128	; 0x80
   17d94:	04e4      	lsls	r4, r4, #19
   17d96:	4252      	negs	r2, r2
   17d98:	4323      	orrs	r3, r4
   17d9a:	2a1b      	cmp	r2, #27
   17d9c:	dd00      	ble.n	17da0 <__aeabi_fsub+0x1e8>
   17d9e:	e096      	b.n	17ece <__aeabi_fsub+0x316>
   17da0:	001c      	movs	r4, r3
   17da2:	2520      	movs	r5, #32
   17da4:	40d4      	lsrs	r4, r2
   17da6:	1aaa      	subs	r2, r5, r2
   17da8:	4093      	lsls	r3, r2
   17daa:	1e5a      	subs	r2, r3, #1
   17dac:	4193      	sbcs	r3, r2
   17dae:	4323      	orrs	r3, r4
   17db0:	1af3      	subs	r3, r6, r3
   17db2:	0004      	movs	r4, r0
   17db4:	000d      	movs	r5, r1
   17db6:	e72d      	b.n	17c14 <__aeabi_fsub+0x5c>
   17db8:	2f00      	cmp	r7, #0
   17dba:	d000      	beq.n	17dbe <__aeabi_fsub+0x206>
   17dbc:	e72e      	b.n	17c1c <__aeabi_fsub+0x64>
   17dbe:	2200      	movs	r2, #0
   17dc0:	2400      	movs	r4, #0
   17dc2:	e7a9      	b.n	17d18 <__aeabi_fsub+0x160>
   17dc4:	000c      	movs	r4, r1
   17dc6:	e73d      	b.n	17c44 <__aeabi_fsub+0x8c>
   17dc8:	2b00      	cmp	r3, #0
   17dca:	d058      	beq.n	17e7e <__aeabi_fsub+0x2c6>
   17dcc:	43d2      	mvns	r2, r2
   17dce:	2a00      	cmp	r2, #0
   17dd0:	d0ee      	beq.n	17db0 <__aeabi_fsub+0x1f8>
   17dd2:	28ff      	cmp	r0, #255	; 0xff
   17dd4:	d1e1      	bne.n	17d9a <__aeabi_fsub+0x1e2>
   17dd6:	0033      	movs	r3, r6
   17dd8:	24ff      	movs	r4, #255	; 0xff
   17dda:	000d      	movs	r5, r1
   17ddc:	e732      	b.n	17c44 <__aeabi_fsub+0x8c>
   17dde:	29ff      	cmp	r1, #255	; 0xff
   17de0:	d010      	beq.n	17e04 <__aeabi_fsub+0x24c>
   17de2:	0001      	movs	r1, r0
   17de4:	e778      	b.n	17cd8 <__aeabi_fsub+0x120>
   17de6:	2b00      	cmp	r3, #0
   17de8:	d06e      	beq.n	17ec8 <__aeabi_fsub+0x310>
   17dea:	24ff      	movs	r4, #255	; 0xff
   17dec:	2e00      	cmp	r6, #0
   17dee:	d100      	bne.n	17df2 <__aeabi_fsub+0x23a>
   17df0:	e728      	b.n	17c44 <__aeabi_fsub+0x8c>
   17df2:	2280      	movs	r2, #128	; 0x80
   17df4:	4651      	mov	r1, sl
   17df6:	03d2      	lsls	r2, r2, #15
   17df8:	4211      	tst	r1, r2
   17dfa:	d003      	beq.n	17e04 <__aeabi_fsub+0x24c>
   17dfc:	4661      	mov	r1, ip
   17dfe:	4211      	tst	r1, r2
   17e00:	d100      	bne.n	17e04 <__aeabi_fsub+0x24c>
   17e02:	0033      	movs	r3, r6
   17e04:	24ff      	movs	r4, #255	; 0xff
   17e06:	e71d      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e08:	24ff      	movs	r4, #255	; 0xff
   17e0a:	2300      	movs	r3, #0
   17e0c:	e72c      	b.n	17c68 <__aeabi_fsub+0xb0>
   17e0e:	2c00      	cmp	r4, #0
   17e10:	d1e9      	bne.n	17de6 <__aeabi_fsub+0x22e>
   17e12:	2b00      	cmp	r3, #0
   17e14:	d063      	beq.n	17ede <__aeabi_fsub+0x326>
   17e16:	2e00      	cmp	r6, #0
   17e18:	d100      	bne.n	17e1c <__aeabi_fsub+0x264>
   17e1a:	e713      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e1c:	199b      	adds	r3, r3, r6
   17e1e:	015a      	lsls	r2, r3, #5
   17e20:	d400      	bmi.n	17e24 <__aeabi_fsub+0x26c>
   17e22:	e73e      	b.n	17ca2 <__aeabi_fsub+0xea>
   17e24:	4a31      	ldr	r2, [pc, #196]	; (17eec <__aeabi_fsub+0x334>)
   17e26:	000c      	movs	r4, r1
   17e28:	4013      	ands	r3, r2
   17e2a:	e70b      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e2c:	2c00      	cmp	r4, #0
   17e2e:	d11e      	bne.n	17e6e <__aeabi_fsub+0x2b6>
   17e30:	2b00      	cmp	r3, #0
   17e32:	d12f      	bne.n	17e94 <__aeabi_fsub+0x2dc>
   17e34:	2e00      	cmp	r6, #0
   17e36:	d04f      	beq.n	17ed8 <__aeabi_fsub+0x320>
   17e38:	0033      	movs	r3, r6
   17e3a:	000d      	movs	r5, r1
   17e3c:	e702      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e3e:	2601      	movs	r6, #1
   17e40:	e755      	b.n	17cee <__aeabi_fsub+0x136>
   17e42:	2c00      	cmp	r4, #0
   17e44:	d11f      	bne.n	17e86 <__aeabi_fsub+0x2ce>
   17e46:	2b00      	cmp	r3, #0
   17e48:	d043      	beq.n	17ed2 <__aeabi_fsub+0x31a>
   17e4a:	43c9      	mvns	r1, r1
   17e4c:	2900      	cmp	r1, #0
   17e4e:	d00b      	beq.n	17e68 <__aeabi_fsub+0x2b0>
   17e50:	28ff      	cmp	r0, #255	; 0xff
   17e52:	d039      	beq.n	17ec8 <__aeabi_fsub+0x310>
   17e54:	291b      	cmp	r1, #27
   17e56:	dc44      	bgt.n	17ee2 <__aeabi_fsub+0x32a>
   17e58:	001c      	movs	r4, r3
   17e5a:	2720      	movs	r7, #32
   17e5c:	40cc      	lsrs	r4, r1
   17e5e:	1a79      	subs	r1, r7, r1
   17e60:	408b      	lsls	r3, r1
   17e62:	1e59      	subs	r1, r3, #1
   17e64:	418b      	sbcs	r3, r1
   17e66:	4323      	orrs	r3, r4
   17e68:	199b      	adds	r3, r3, r6
   17e6a:	0004      	movs	r4, r0
   17e6c:	e740      	b.n	17cf0 <__aeabi_fsub+0x138>
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d11a      	bne.n	17ea8 <__aeabi_fsub+0x2f0>
   17e72:	2e00      	cmp	r6, #0
   17e74:	d124      	bne.n	17ec0 <__aeabi_fsub+0x308>
   17e76:	2780      	movs	r7, #128	; 0x80
   17e78:	2200      	movs	r2, #0
   17e7a:	03ff      	lsls	r7, r7, #15
   17e7c:	e71b      	b.n	17cb6 <__aeabi_fsub+0xfe>
   17e7e:	0033      	movs	r3, r6
   17e80:	0004      	movs	r4, r0
   17e82:	000d      	movs	r5, r1
   17e84:	e6de      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e86:	28ff      	cmp	r0, #255	; 0xff
   17e88:	d01e      	beq.n	17ec8 <__aeabi_fsub+0x310>
   17e8a:	2480      	movs	r4, #128	; 0x80
   17e8c:	04e4      	lsls	r4, r4, #19
   17e8e:	4249      	negs	r1, r1
   17e90:	4323      	orrs	r3, r4
   17e92:	e7df      	b.n	17e54 <__aeabi_fsub+0x29c>
   17e94:	2e00      	cmp	r6, #0
   17e96:	d100      	bne.n	17e9a <__aeabi_fsub+0x2e2>
   17e98:	e6d4      	b.n	17c44 <__aeabi_fsub+0x8c>
   17e9a:	1b9f      	subs	r7, r3, r6
   17e9c:	017a      	lsls	r2, r7, #5
   17e9e:	d400      	bmi.n	17ea2 <__aeabi_fsub+0x2ea>
   17ea0:	e737      	b.n	17d12 <__aeabi_fsub+0x15a>
   17ea2:	1af3      	subs	r3, r6, r3
   17ea4:	000d      	movs	r5, r1
   17ea6:	e6cd      	b.n	17c44 <__aeabi_fsub+0x8c>
   17ea8:	24ff      	movs	r4, #255	; 0xff
   17eaa:	2e00      	cmp	r6, #0
   17eac:	d100      	bne.n	17eb0 <__aeabi_fsub+0x2f8>
   17eae:	e6c9      	b.n	17c44 <__aeabi_fsub+0x8c>
   17eb0:	2280      	movs	r2, #128	; 0x80
   17eb2:	4650      	mov	r0, sl
   17eb4:	03d2      	lsls	r2, r2, #15
   17eb6:	4210      	tst	r0, r2
   17eb8:	d0a4      	beq.n	17e04 <__aeabi_fsub+0x24c>
   17eba:	4660      	mov	r0, ip
   17ebc:	4210      	tst	r0, r2
   17ebe:	d1a1      	bne.n	17e04 <__aeabi_fsub+0x24c>
   17ec0:	0033      	movs	r3, r6
   17ec2:	000d      	movs	r5, r1
   17ec4:	24ff      	movs	r4, #255	; 0xff
   17ec6:	e6bd      	b.n	17c44 <__aeabi_fsub+0x8c>
   17ec8:	0033      	movs	r3, r6
   17eca:	24ff      	movs	r4, #255	; 0xff
   17ecc:	e6ba      	b.n	17c44 <__aeabi_fsub+0x8c>
   17ece:	2301      	movs	r3, #1
   17ed0:	e76e      	b.n	17db0 <__aeabi_fsub+0x1f8>
   17ed2:	0033      	movs	r3, r6
   17ed4:	0004      	movs	r4, r0
   17ed6:	e6b5      	b.n	17c44 <__aeabi_fsub+0x8c>
   17ed8:	2700      	movs	r7, #0
   17eda:	2200      	movs	r2, #0
   17edc:	e71c      	b.n	17d18 <__aeabi_fsub+0x160>
   17ede:	0033      	movs	r3, r6
   17ee0:	e6b0      	b.n	17c44 <__aeabi_fsub+0x8c>
   17ee2:	2301      	movs	r3, #1
   17ee4:	e7c0      	b.n	17e68 <__aeabi_fsub+0x2b0>
   17ee6:	46c0      	nop			; (mov r8, r8)
   17ee8:	7dffffff 	.word	0x7dffffff
   17eec:	fbffffff 	.word	0xfbffffff

00017ef0 <__aeabi_ui2f>:
   17ef0:	b510      	push	{r4, lr}
   17ef2:	1e04      	subs	r4, r0, #0
   17ef4:	d027      	beq.n	17f46 <__aeabi_ui2f+0x56>
   17ef6:	f001 fe1b 	bl	19b30 <__clzsi2>
   17efa:	239e      	movs	r3, #158	; 0x9e
   17efc:	1a1b      	subs	r3, r3, r0
   17efe:	2b96      	cmp	r3, #150	; 0x96
   17f00:	dc0a      	bgt.n	17f18 <__aeabi_ui2f+0x28>
   17f02:	2296      	movs	r2, #150	; 0x96
   17f04:	1ad2      	subs	r2, r2, r3
   17f06:	4094      	lsls	r4, r2
   17f08:	0264      	lsls	r4, r4, #9
   17f0a:	0a64      	lsrs	r4, r4, #9
   17f0c:	b2db      	uxtb	r3, r3
   17f0e:	0264      	lsls	r4, r4, #9
   17f10:	05db      	lsls	r3, r3, #23
   17f12:	0a60      	lsrs	r0, r4, #9
   17f14:	4318      	orrs	r0, r3
   17f16:	bd10      	pop	{r4, pc}
   17f18:	2b99      	cmp	r3, #153	; 0x99
   17f1a:	dc17      	bgt.n	17f4c <__aeabi_ui2f+0x5c>
   17f1c:	2299      	movs	r2, #153	; 0x99
   17f1e:	1ad2      	subs	r2, r2, r3
   17f20:	2a00      	cmp	r2, #0
   17f22:	dd27      	ble.n	17f74 <__aeabi_ui2f+0x84>
   17f24:	4094      	lsls	r4, r2
   17f26:	0022      	movs	r2, r4
   17f28:	4c13      	ldr	r4, [pc, #76]	; (17f78 <__aeabi_ui2f+0x88>)
   17f2a:	4014      	ands	r4, r2
   17f2c:	0751      	lsls	r1, r2, #29
   17f2e:	d004      	beq.n	17f3a <__aeabi_ui2f+0x4a>
   17f30:	210f      	movs	r1, #15
   17f32:	400a      	ands	r2, r1
   17f34:	2a04      	cmp	r2, #4
   17f36:	d000      	beq.n	17f3a <__aeabi_ui2f+0x4a>
   17f38:	3404      	adds	r4, #4
   17f3a:	0162      	lsls	r2, r4, #5
   17f3c:	d412      	bmi.n	17f64 <__aeabi_ui2f+0x74>
   17f3e:	01a4      	lsls	r4, r4, #6
   17f40:	0a64      	lsrs	r4, r4, #9
   17f42:	b2db      	uxtb	r3, r3
   17f44:	e7e3      	b.n	17f0e <__aeabi_ui2f+0x1e>
   17f46:	2300      	movs	r3, #0
   17f48:	2400      	movs	r4, #0
   17f4a:	e7e0      	b.n	17f0e <__aeabi_ui2f+0x1e>
   17f4c:	22b9      	movs	r2, #185	; 0xb9
   17f4e:	0021      	movs	r1, r4
   17f50:	1ad2      	subs	r2, r2, r3
   17f52:	4091      	lsls	r1, r2
   17f54:	000a      	movs	r2, r1
   17f56:	1e51      	subs	r1, r2, #1
   17f58:	418a      	sbcs	r2, r1
   17f5a:	2105      	movs	r1, #5
   17f5c:	1a09      	subs	r1, r1, r0
   17f5e:	40cc      	lsrs	r4, r1
   17f60:	4314      	orrs	r4, r2
   17f62:	e7db      	b.n	17f1c <__aeabi_ui2f+0x2c>
   17f64:	4b04      	ldr	r3, [pc, #16]	; (17f78 <__aeabi_ui2f+0x88>)
   17f66:	401c      	ands	r4, r3
   17f68:	239f      	movs	r3, #159	; 0x9f
   17f6a:	01a4      	lsls	r4, r4, #6
   17f6c:	1a1b      	subs	r3, r3, r0
   17f6e:	0a64      	lsrs	r4, r4, #9
   17f70:	b2db      	uxtb	r3, r3
   17f72:	e7cc      	b.n	17f0e <__aeabi_ui2f+0x1e>
   17f74:	0022      	movs	r2, r4
   17f76:	e7d7      	b.n	17f28 <__aeabi_ui2f+0x38>
   17f78:	fbffffff 	.word	0xfbffffff

00017f7c <__aeabi_dadd>:
   17f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f7e:	4645      	mov	r5, r8
   17f80:	46de      	mov	lr, fp
   17f82:	4657      	mov	r7, sl
   17f84:	464e      	mov	r6, r9
   17f86:	030c      	lsls	r4, r1, #12
   17f88:	b5e0      	push	{r5, r6, r7, lr}
   17f8a:	004e      	lsls	r6, r1, #1
   17f8c:	0fc9      	lsrs	r1, r1, #31
   17f8e:	4688      	mov	r8, r1
   17f90:	000d      	movs	r5, r1
   17f92:	0a61      	lsrs	r1, r4, #9
   17f94:	0f44      	lsrs	r4, r0, #29
   17f96:	430c      	orrs	r4, r1
   17f98:	00c7      	lsls	r7, r0, #3
   17f9a:	0319      	lsls	r1, r3, #12
   17f9c:	0058      	lsls	r0, r3, #1
   17f9e:	0fdb      	lsrs	r3, r3, #31
   17fa0:	469b      	mov	fp, r3
   17fa2:	0a4b      	lsrs	r3, r1, #9
   17fa4:	0f51      	lsrs	r1, r2, #29
   17fa6:	430b      	orrs	r3, r1
   17fa8:	0d76      	lsrs	r6, r6, #21
   17faa:	0d40      	lsrs	r0, r0, #21
   17fac:	0019      	movs	r1, r3
   17fae:	00d2      	lsls	r2, r2, #3
   17fb0:	45d8      	cmp	r8, fp
   17fb2:	d100      	bne.n	17fb6 <__aeabi_dadd+0x3a>
   17fb4:	e0ae      	b.n	18114 <__aeabi_dadd+0x198>
   17fb6:	1a35      	subs	r5, r6, r0
   17fb8:	2d00      	cmp	r5, #0
   17fba:	dc00      	bgt.n	17fbe <__aeabi_dadd+0x42>
   17fbc:	e0f6      	b.n	181ac <__aeabi_dadd+0x230>
   17fbe:	2800      	cmp	r0, #0
   17fc0:	d10f      	bne.n	17fe2 <__aeabi_dadd+0x66>
   17fc2:	4313      	orrs	r3, r2
   17fc4:	d100      	bne.n	17fc8 <__aeabi_dadd+0x4c>
   17fc6:	e0db      	b.n	18180 <__aeabi_dadd+0x204>
   17fc8:	1e6b      	subs	r3, r5, #1
   17fca:	2b00      	cmp	r3, #0
   17fcc:	d000      	beq.n	17fd0 <__aeabi_dadd+0x54>
   17fce:	e137      	b.n	18240 <__aeabi_dadd+0x2c4>
   17fd0:	1aba      	subs	r2, r7, r2
   17fd2:	4297      	cmp	r7, r2
   17fd4:	41bf      	sbcs	r7, r7
   17fd6:	1a64      	subs	r4, r4, r1
   17fd8:	427f      	negs	r7, r7
   17fda:	1be4      	subs	r4, r4, r7
   17fdc:	2601      	movs	r6, #1
   17fde:	0017      	movs	r7, r2
   17fe0:	e024      	b.n	1802c <__aeabi_dadd+0xb0>
   17fe2:	4bc6      	ldr	r3, [pc, #792]	; (182fc <__aeabi_dadd+0x380>)
   17fe4:	429e      	cmp	r6, r3
   17fe6:	d04d      	beq.n	18084 <__aeabi_dadd+0x108>
   17fe8:	2380      	movs	r3, #128	; 0x80
   17fea:	041b      	lsls	r3, r3, #16
   17fec:	4319      	orrs	r1, r3
   17fee:	2d38      	cmp	r5, #56	; 0x38
   17ff0:	dd00      	ble.n	17ff4 <__aeabi_dadd+0x78>
   17ff2:	e107      	b.n	18204 <__aeabi_dadd+0x288>
   17ff4:	2d1f      	cmp	r5, #31
   17ff6:	dd00      	ble.n	17ffa <__aeabi_dadd+0x7e>
   17ff8:	e138      	b.n	1826c <__aeabi_dadd+0x2f0>
   17ffa:	2020      	movs	r0, #32
   17ffc:	1b43      	subs	r3, r0, r5
   17ffe:	469a      	mov	sl, r3
   18000:	000b      	movs	r3, r1
   18002:	4650      	mov	r0, sl
   18004:	4083      	lsls	r3, r0
   18006:	4699      	mov	r9, r3
   18008:	0013      	movs	r3, r2
   1800a:	4648      	mov	r0, r9
   1800c:	40eb      	lsrs	r3, r5
   1800e:	4318      	orrs	r0, r3
   18010:	0003      	movs	r3, r0
   18012:	4650      	mov	r0, sl
   18014:	4082      	lsls	r2, r0
   18016:	1e50      	subs	r0, r2, #1
   18018:	4182      	sbcs	r2, r0
   1801a:	40e9      	lsrs	r1, r5
   1801c:	431a      	orrs	r2, r3
   1801e:	1aba      	subs	r2, r7, r2
   18020:	1a61      	subs	r1, r4, r1
   18022:	4297      	cmp	r7, r2
   18024:	41a4      	sbcs	r4, r4
   18026:	0017      	movs	r7, r2
   18028:	4264      	negs	r4, r4
   1802a:	1b0c      	subs	r4, r1, r4
   1802c:	0223      	lsls	r3, r4, #8
   1802e:	d562      	bpl.n	180f6 <__aeabi_dadd+0x17a>
   18030:	0264      	lsls	r4, r4, #9
   18032:	0a65      	lsrs	r5, r4, #9
   18034:	2d00      	cmp	r5, #0
   18036:	d100      	bne.n	1803a <__aeabi_dadd+0xbe>
   18038:	e0df      	b.n	181fa <__aeabi_dadd+0x27e>
   1803a:	0028      	movs	r0, r5
   1803c:	f001 fd78 	bl	19b30 <__clzsi2>
   18040:	0003      	movs	r3, r0
   18042:	3b08      	subs	r3, #8
   18044:	2b1f      	cmp	r3, #31
   18046:	dd00      	ble.n	1804a <__aeabi_dadd+0xce>
   18048:	e0d2      	b.n	181f0 <__aeabi_dadd+0x274>
   1804a:	2220      	movs	r2, #32
   1804c:	003c      	movs	r4, r7
   1804e:	1ad2      	subs	r2, r2, r3
   18050:	409d      	lsls	r5, r3
   18052:	40d4      	lsrs	r4, r2
   18054:	409f      	lsls	r7, r3
   18056:	4325      	orrs	r5, r4
   18058:	429e      	cmp	r6, r3
   1805a:	dd00      	ble.n	1805e <__aeabi_dadd+0xe2>
   1805c:	e0c4      	b.n	181e8 <__aeabi_dadd+0x26c>
   1805e:	1b9e      	subs	r6, r3, r6
   18060:	1c73      	adds	r3, r6, #1
   18062:	2b1f      	cmp	r3, #31
   18064:	dd00      	ble.n	18068 <__aeabi_dadd+0xec>
   18066:	e0f1      	b.n	1824c <__aeabi_dadd+0x2d0>
   18068:	2220      	movs	r2, #32
   1806a:	0038      	movs	r0, r7
   1806c:	0029      	movs	r1, r5
   1806e:	1ad2      	subs	r2, r2, r3
   18070:	40d8      	lsrs	r0, r3
   18072:	4091      	lsls	r1, r2
   18074:	4097      	lsls	r7, r2
   18076:	002c      	movs	r4, r5
   18078:	4301      	orrs	r1, r0
   1807a:	1e78      	subs	r0, r7, #1
   1807c:	4187      	sbcs	r7, r0
   1807e:	40dc      	lsrs	r4, r3
   18080:	2600      	movs	r6, #0
   18082:	430f      	orrs	r7, r1
   18084:	077b      	lsls	r3, r7, #29
   18086:	d009      	beq.n	1809c <__aeabi_dadd+0x120>
   18088:	230f      	movs	r3, #15
   1808a:	403b      	ands	r3, r7
   1808c:	2b04      	cmp	r3, #4
   1808e:	d005      	beq.n	1809c <__aeabi_dadd+0x120>
   18090:	1d3b      	adds	r3, r7, #4
   18092:	42bb      	cmp	r3, r7
   18094:	41bf      	sbcs	r7, r7
   18096:	427f      	negs	r7, r7
   18098:	19e4      	adds	r4, r4, r7
   1809a:	001f      	movs	r7, r3
   1809c:	0223      	lsls	r3, r4, #8
   1809e:	d52c      	bpl.n	180fa <__aeabi_dadd+0x17e>
   180a0:	4b96      	ldr	r3, [pc, #600]	; (182fc <__aeabi_dadd+0x380>)
   180a2:	3601      	adds	r6, #1
   180a4:	429e      	cmp	r6, r3
   180a6:	d100      	bne.n	180aa <__aeabi_dadd+0x12e>
   180a8:	e09a      	b.n	181e0 <__aeabi_dadd+0x264>
   180aa:	4645      	mov	r5, r8
   180ac:	4b94      	ldr	r3, [pc, #592]	; (18300 <__aeabi_dadd+0x384>)
   180ae:	08ff      	lsrs	r7, r7, #3
   180b0:	401c      	ands	r4, r3
   180b2:	0760      	lsls	r0, r4, #29
   180b4:	0576      	lsls	r6, r6, #21
   180b6:	0264      	lsls	r4, r4, #9
   180b8:	4307      	orrs	r7, r0
   180ba:	0b24      	lsrs	r4, r4, #12
   180bc:	0d76      	lsrs	r6, r6, #21
   180be:	2100      	movs	r1, #0
   180c0:	0324      	lsls	r4, r4, #12
   180c2:	0b23      	lsrs	r3, r4, #12
   180c4:	0d0c      	lsrs	r4, r1, #20
   180c6:	4a8f      	ldr	r2, [pc, #572]	; (18304 <__aeabi_dadd+0x388>)
   180c8:	0524      	lsls	r4, r4, #20
   180ca:	431c      	orrs	r4, r3
   180cc:	4014      	ands	r4, r2
   180ce:	0533      	lsls	r3, r6, #20
   180d0:	4323      	orrs	r3, r4
   180d2:	005b      	lsls	r3, r3, #1
   180d4:	07ed      	lsls	r5, r5, #31
   180d6:	085b      	lsrs	r3, r3, #1
   180d8:	432b      	orrs	r3, r5
   180da:	0038      	movs	r0, r7
   180dc:	0019      	movs	r1, r3
   180de:	bc3c      	pop	{r2, r3, r4, r5}
   180e0:	4690      	mov	r8, r2
   180e2:	4699      	mov	r9, r3
   180e4:	46a2      	mov	sl, r4
   180e6:	46ab      	mov	fp, r5
   180e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180ea:	4664      	mov	r4, ip
   180ec:	4304      	orrs	r4, r0
   180ee:	d100      	bne.n	180f2 <__aeabi_dadd+0x176>
   180f0:	e211      	b.n	18516 <__aeabi_dadd+0x59a>
   180f2:	0004      	movs	r4, r0
   180f4:	4667      	mov	r7, ip
   180f6:	077b      	lsls	r3, r7, #29
   180f8:	d1c6      	bne.n	18088 <__aeabi_dadd+0x10c>
   180fa:	4645      	mov	r5, r8
   180fc:	0760      	lsls	r0, r4, #29
   180fe:	08ff      	lsrs	r7, r7, #3
   18100:	4307      	orrs	r7, r0
   18102:	08e4      	lsrs	r4, r4, #3
   18104:	4b7d      	ldr	r3, [pc, #500]	; (182fc <__aeabi_dadd+0x380>)
   18106:	429e      	cmp	r6, r3
   18108:	d030      	beq.n	1816c <__aeabi_dadd+0x1f0>
   1810a:	0324      	lsls	r4, r4, #12
   1810c:	0576      	lsls	r6, r6, #21
   1810e:	0b24      	lsrs	r4, r4, #12
   18110:	0d76      	lsrs	r6, r6, #21
   18112:	e7d4      	b.n	180be <__aeabi_dadd+0x142>
   18114:	1a33      	subs	r3, r6, r0
   18116:	469a      	mov	sl, r3
   18118:	2b00      	cmp	r3, #0
   1811a:	dd78      	ble.n	1820e <__aeabi_dadd+0x292>
   1811c:	2800      	cmp	r0, #0
   1811e:	d031      	beq.n	18184 <__aeabi_dadd+0x208>
   18120:	4876      	ldr	r0, [pc, #472]	; (182fc <__aeabi_dadd+0x380>)
   18122:	4286      	cmp	r6, r0
   18124:	d0ae      	beq.n	18084 <__aeabi_dadd+0x108>
   18126:	2080      	movs	r0, #128	; 0x80
   18128:	0400      	lsls	r0, r0, #16
   1812a:	4301      	orrs	r1, r0
   1812c:	4653      	mov	r3, sl
   1812e:	2b38      	cmp	r3, #56	; 0x38
   18130:	dc00      	bgt.n	18134 <__aeabi_dadd+0x1b8>
   18132:	e0e9      	b.n	18308 <__aeabi_dadd+0x38c>
   18134:	430a      	orrs	r2, r1
   18136:	1e51      	subs	r1, r2, #1
   18138:	418a      	sbcs	r2, r1
   1813a:	2100      	movs	r1, #0
   1813c:	19d2      	adds	r2, r2, r7
   1813e:	42ba      	cmp	r2, r7
   18140:	41bf      	sbcs	r7, r7
   18142:	1909      	adds	r1, r1, r4
   18144:	427c      	negs	r4, r7
   18146:	0017      	movs	r7, r2
   18148:	190c      	adds	r4, r1, r4
   1814a:	0223      	lsls	r3, r4, #8
   1814c:	d5d3      	bpl.n	180f6 <__aeabi_dadd+0x17a>
   1814e:	4b6b      	ldr	r3, [pc, #428]	; (182fc <__aeabi_dadd+0x380>)
   18150:	3601      	adds	r6, #1
   18152:	429e      	cmp	r6, r3
   18154:	d100      	bne.n	18158 <__aeabi_dadd+0x1dc>
   18156:	e13a      	b.n	183ce <__aeabi_dadd+0x452>
   18158:	2001      	movs	r0, #1
   1815a:	4b69      	ldr	r3, [pc, #420]	; (18300 <__aeabi_dadd+0x384>)
   1815c:	401c      	ands	r4, r3
   1815e:	087b      	lsrs	r3, r7, #1
   18160:	4007      	ands	r7, r0
   18162:	431f      	orrs	r7, r3
   18164:	07e0      	lsls	r0, r4, #31
   18166:	4307      	orrs	r7, r0
   18168:	0864      	lsrs	r4, r4, #1
   1816a:	e78b      	b.n	18084 <__aeabi_dadd+0x108>
   1816c:	0023      	movs	r3, r4
   1816e:	433b      	orrs	r3, r7
   18170:	d100      	bne.n	18174 <__aeabi_dadd+0x1f8>
   18172:	e1cb      	b.n	1850c <__aeabi_dadd+0x590>
   18174:	2280      	movs	r2, #128	; 0x80
   18176:	0312      	lsls	r2, r2, #12
   18178:	4314      	orrs	r4, r2
   1817a:	0324      	lsls	r4, r4, #12
   1817c:	0b24      	lsrs	r4, r4, #12
   1817e:	e79e      	b.n	180be <__aeabi_dadd+0x142>
   18180:	002e      	movs	r6, r5
   18182:	e77f      	b.n	18084 <__aeabi_dadd+0x108>
   18184:	0008      	movs	r0, r1
   18186:	4310      	orrs	r0, r2
   18188:	d100      	bne.n	1818c <__aeabi_dadd+0x210>
   1818a:	e0b4      	b.n	182f6 <__aeabi_dadd+0x37a>
   1818c:	1e58      	subs	r0, r3, #1
   1818e:	2800      	cmp	r0, #0
   18190:	d000      	beq.n	18194 <__aeabi_dadd+0x218>
   18192:	e0de      	b.n	18352 <__aeabi_dadd+0x3d6>
   18194:	18ba      	adds	r2, r7, r2
   18196:	42ba      	cmp	r2, r7
   18198:	419b      	sbcs	r3, r3
   1819a:	1864      	adds	r4, r4, r1
   1819c:	425b      	negs	r3, r3
   1819e:	18e4      	adds	r4, r4, r3
   181a0:	0017      	movs	r7, r2
   181a2:	2601      	movs	r6, #1
   181a4:	0223      	lsls	r3, r4, #8
   181a6:	d5a6      	bpl.n	180f6 <__aeabi_dadd+0x17a>
   181a8:	2602      	movs	r6, #2
   181aa:	e7d5      	b.n	18158 <__aeabi_dadd+0x1dc>
   181ac:	2d00      	cmp	r5, #0
   181ae:	d16e      	bne.n	1828e <__aeabi_dadd+0x312>
   181b0:	1c70      	adds	r0, r6, #1
   181b2:	0540      	lsls	r0, r0, #21
   181b4:	0d40      	lsrs	r0, r0, #21
   181b6:	2801      	cmp	r0, #1
   181b8:	dc00      	bgt.n	181bc <__aeabi_dadd+0x240>
   181ba:	e0f9      	b.n	183b0 <__aeabi_dadd+0x434>
   181bc:	1ab8      	subs	r0, r7, r2
   181be:	4684      	mov	ip, r0
   181c0:	4287      	cmp	r7, r0
   181c2:	4180      	sbcs	r0, r0
   181c4:	1ae5      	subs	r5, r4, r3
   181c6:	4240      	negs	r0, r0
   181c8:	1a2d      	subs	r5, r5, r0
   181ca:	0228      	lsls	r0, r5, #8
   181cc:	d400      	bmi.n	181d0 <__aeabi_dadd+0x254>
   181ce:	e089      	b.n	182e4 <__aeabi_dadd+0x368>
   181d0:	1bd7      	subs	r7, r2, r7
   181d2:	42ba      	cmp	r2, r7
   181d4:	4192      	sbcs	r2, r2
   181d6:	1b1c      	subs	r4, r3, r4
   181d8:	4252      	negs	r2, r2
   181da:	1aa5      	subs	r5, r4, r2
   181dc:	46d8      	mov	r8, fp
   181de:	e729      	b.n	18034 <__aeabi_dadd+0xb8>
   181e0:	4645      	mov	r5, r8
   181e2:	2400      	movs	r4, #0
   181e4:	2700      	movs	r7, #0
   181e6:	e76a      	b.n	180be <__aeabi_dadd+0x142>
   181e8:	4c45      	ldr	r4, [pc, #276]	; (18300 <__aeabi_dadd+0x384>)
   181ea:	1af6      	subs	r6, r6, r3
   181ec:	402c      	ands	r4, r5
   181ee:	e749      	b.n	18084 <__aeabi_dadd+0x108>
   181f0:	003d      	movs	r5, r7
   181f2:	3828      	subs	r0, #40	; 0x28
   181f4:	4085      	lsls	r5, r0
   181f6:	2700      	movs	r7, #0
   181f8:	e72e      	b.n	18058 <__aeabi_dadd+0xdc>
   181fa:	0038      	movs	r0, r7
   181fc:	f001 fc98 	bl	19b30 <__clzsi2>
   18200:	3020      	adds	r0, #32
   18202:	e71d      	b.n	18040 <__aeabi_dadd+0xc4>
   18204:	430a      	orrs	r2, r1
   18206:	1e51      	subs	r1, r2, #1
   18208:	418a      	sbcs	r2, r1
   1820a:	2100      	movs	r1, #0
   1820c:	e707      	b.n	1801e <__aeabi_dadd+0xa2>
   1820e:	2b00      	cmp	r3, #0
   18210:	d000      	beq.n	18214 <__aeabi_dadd+0x298>
   18212:	e0f3      	b.n	183fc <__aeabi_dadd+0x480>
   18214:	1c70      	adds	r0, r6, #1
   18216:	0543      	lsls	r3, r0, #21
   18218:	0d5b      	lsrs	r3, r3, #21
   1821a:	2b01      	cmp	r3, #1
   1821c:	dc00      	bgt.n	18220 <__aeabi_dadd+0x2a4>
   1821e:	e0ad      	b.n	1837c <__aeabi_dadd+0x400>
   18220:	4b36      	ldr	r3, [pc, #216]	; (182fc <__aeabi_dadd+0x380>)
   18222:	4298      	cmp	r0, r3
   18224:	d100      	bne.n	18228 <__aeabi_dadd+0x2ac>
   18226:	e0d1      	b.n	183cc <__aeabi_dadd+0x450>
   18228:	18ba      	adds	r2, r7, r2
   1822a:	42ba      	cmp	r2, r7
   1822c:	41bf      	sbcs	r7, r7
   1822e:	1864      	adds	r4, r4, r1
   18230:	427f      	negs	r7, r7
   18232:	19e4      	adds	r4, r4, r7
   18234:	07e7      	lsls	r7, r4, #31
   18236:	0852      	lsrs	r2, r2, #1
   18238:	4317      	orrs	r7, r2
   1823a:	0864      	lsrs	r4, r4, #1
   1823c:	0006      	movs	r6, r0
   1823e:	e721      	b.n	18084 <__aeabi_dadd+0x108>
   18240:	482e      	ldr	r0, [pc, #184]	; (182fc <__aeabi_dadd+0x380>)
   18242:	4285      	cmp	r5, r0
   18244:	d100      	bne.n	18248 <__aeabi_dadd+0x2cc>
   18246:	e093      	b.n	18370 <__aeabi_dadd+0x3f4>
   18248:	001d      	movs	r5, r3
   1824a:	e6d0      	b.n	17fee <__aeabi_dadd+0x72>
   1824c:	0029      	movs	r1, r5
   1824e:	3e1f      	subs	r6, #31
   18250:	40f1      	lsrs	r1, r6
   18252:	2b20      	cmp	r3, #32
   18254:	d100      	bne.n	18258 <__aeabi_dadd+0x2dc>
   18256:	e08d      	b.n	18374 <__aeabi_dadd+0x3f8>
   18258:	2240      	movs	r2, #64	; 0x40
   1825a:	1ad3      	subs	r3, r2, r3
   1825c:	409d      	lsls	r5, r3
   1825e:	432f      	orrs	r7, r5
   18260:	1e7d      	subs	r5, r7, #1
   18262:	41af      	sbcs	r7, r5
   18264:	2400      	movs	r4, #0
   18266:	430f      	orrs	r7, r1
   18268:	2600      	movs	r6, #0
   1826a:	e744      	b.n	180f6 <__aeabi_dadd+0x17a>
   1826c:	002b      	movs	r3, r5
   1826e:	0008      	movs	r0, r1
   18270:	3b20      	subs	r3, #32
   18272:	40d8      	lsrs	r0, r3
   18274:	0003      	movs	r3, r0
   18276:	2d20      	cmp	r5, #32
   18278:	d100      	bne.n	1827c <__aeabi_dadd+0x300>
   1827a:	e07d      	b.n	18378 <__aeabi_dadd+0x3fc>
   1827c:	2040      	movs	r0, #64	; 0x40
   1827e:	1b45      	subs	r5, r0, r5
   18280:	40a9      	lsls	r1, r5
   18282:	430a      	orrs	r2, r1
   18284:	1e51      	subs	r1, r2, #1
   18286:	418a      	sbcs	r2, r1
   18288:	2100      	movs	r1, #0
   1828a:	431a      	orrs	r2, r3
   1828c:	e6c7      	b.n	1801e <__aeabi_dadd+0xa2>
   1828e:	2e00      	cmp	r6, #0
   18290:	d050      	beq.n	18334 <__aeabi_dadd+0x3b8>
   18292:	4e1a      	ldr	r6, [pc, #104]	; (182fc <__aeabi_dadd+0x380>)
   18294:	42b0      	cmp	r0, r6
   18296:	d057      	beq.n	18348 <__aeabi_dadd+0x3cc>
   18298:	2680      	movs	r6, #128	; 0x80
   1829a:	426b      	negs	r3, r5
   1829c:	4699      	mov	r9, r3
   1829e:	0436      	lsls	r6, r6, #16
   182a0:	4334      	orrs	r4, r6
   182a2:	464b      	mov	r3, r9
   182a4:	2b38      	cmp	r3, #56	; 0x38
   182a6:	dd00      	ble.n	182aa <__aeabi_dadd+0x32e>
   182a8:	e0d6      	b.n	18458 <__aeabi_dadd+0x4dc>
   182aa:	2b1f      	cmp	r3, #31
   182ac:	dd00      	ble.n	182b0 <__aeabi_dadd+0x334>
   182ae:	e135      	b.n	1851c <__aeabi_dadd+0x5a0>
   182b0:	2620      	movs	r6, #32
   182b2:	1af5      	subs	r5, r6, r3
   182b4:	0026      	movs	r6, r4
   182b6:	40ae      	lsls	r6, r5
   182b8:	46b2      	mov	sl, r6
   182ba:	003e      	movs	r6, r7
   182bc:	40de      	lsrs	r6, r3
   182be:	46ac      	mov	ip, r5
   182c0:	0035      	movs	r5, r6
   182c2:	4656      	mov	r6, sl
   182c4:	432e      	orrs	r6, r5
   182c6:	4665      	mov	r5, ip
   182c8:	40af      	lsls	r7, r5
   182ca:	1e7d      	subs	r5, r7, #1
   182cc:	41af      	sbcs	r7, r5
   182ce:	40dc      	lsrs	r4, r3
   182d0:	4337      	orrs	r7, r6
   182d2:	1bd7      	subs	r7, r2, r7
   182d4:	42ba      	cmp	r2, r7
   182d6:	4192      	sbcs	r2, r2
   182d8:	1b0c      	subs	r4, r1, r4
   182da:	4252      	negs	r2, r2
   182dc:	1aa4      	subs	r4, r4, r2
   182de:	0006      	movs	r6, r0
   182e0:	46d8      	mov	r8, fp
   182e2:	e6a3      	b.n	1802c <__aeabi_dadd+0xb0>
   182e4:	4664      	mov	r4, ip
   182e6:	4667      	mov	r7, ip
   182e8:	432c      	orrs	r4, r5
   182ea:	d000      	beq.n	182ee <__aeabi_dadd+0x372>
   182ec:	e6a2      	b.n	18034 <__aeabi_dadd+0xb8>
   182ee:	2500      	movs	r5, #0
   182f0:	2600      	movs	r6, #0
   182f2:	2700      	movs	r7, #0
   182f4:	e706      	b.n	18104 <__aeabi_dadd+0x188>
   182f6:	001e      	movs	r6, r3
   182f8:	e6c4      	b.n	18084 <__aeabi_dadd+0x108>
   182fa:	46c0      	nop			; (mov r8, r8)
   182fc:	000007ff 	.word	0x000007ff
   18300:	ff7fffff 	.word	0xff7fffff
   18304:	800fffff 	.word	0x800fffff
   18308:	2b1f      	cmp	r3, #31
   1830a:	dc63      	bgt.n	183d4 <__aeabi_dadd+0x458>
   1830c:	2020      	movs	r0, #32
   1830e:	1ac3      	subs	r3, r0, r3
   18310:	0008      	movs	r0, r1
   18312:	4098      	lsls	r0, r3
   18314:	469c      	mov	ip, r3
   18316:	4683      	mov	fp, r0
   18318:	4653      	mov	r3, sl
   1831a:	0010      	movs	r0, r2
   1831c:	40d8      	lsrs	r0, r3
   1831e:	0003      	movs	r3, r0
   18320:	4658      	mov	r0, fp
   18322:	4318      	orrs	r0, r3
   18324:	4663      	mov	r3, ip
   18326:	409a      	lsls	r2, r3
   18328:	1e53      	subs	r3, r2, #1
   1832a:	419a      	sbcs	r2, r3
   1832c:	4653      	mov	r3, sl
   1832e:	4302      	orrs	r2, r0
   18330:	40d9      	lsrs	r1, r3
   18332:	e703      	b.n	1813c <__aeabi_dadd+0x1c0>
   18334:	0026      	movs	r6, r4
   18336:	433e      	orrs	r6, r7
   18338:	d006      	beq.n	18348 <__aeabi_dadd+0x3cc>
   1833a:	43eb      	mvns	r3, r5
   1833c:	4699      	mov	r9, r3
   1833e:	2b00      	cmp	r3, #0
   18340:	d0c7      	beq.n	182d2 <__aeabi_dadd+0x356>
   18342:	4e94      	ldr	r6, [pc, #592]	; (18594 <__aeabi_dadd+0x618>)
   18344:	42b0      	cmp	r0, r6
   18346:	d1ac      	bne.n	182a2 <__aeabi_dadd+0x326>
   18348:	000c      	movs	r4, r1
   1834a:	0017      	movs	r7, r2
   1834c:	0006      	movs	r6, r0
   1834e:	46d8      	mov	r8, fp
   18350:	e698      	b.n	18084 <__aeabi_dadd+0x108>
   18352:	4b90      	ldr	r3, [pc, #576]	; (18594 <__aeabi_dadd+0x618>)
   18354:	459a      	cmp	sl, r3
   18356:	d00b      	beq.n	18370 <__aeabi_dadd+0x3f4>
   18358:	4682      	mov	sl, r0
   1835a:	e6e7      	b.n	1812c <__aeabi_dadd+0x1b0>
   1835c:	2800      	cmp	r0, #0
   1835e:	d000      	beq.n	18362 <__aeabi_dadd+0x3e6>
   18360:	e09e      	b.n	184a0 <__aeabi_dadd+0x524>
   18362:	0018      	movs	r0, r3
   18364:	4310      	orrs	r0, r2
   18366:	d100      	bne.n	1836a <__aeabi_dadd+0x3ee>
   18368:	e0e9      	b.n	1853e <__aeabi_dadd+0x5c2>
   1836a:	001c      	movs	r4, r3
   1836c:	0017      	movs	r7, r2
   1836e:	46d8      	mov	r8, fp
   18370:	4e88      	ldr	r6, [pc, #544]	; (18594 <__aeabi_dadd+0x618>)
   18372:	e687      	b.n	18084 <__aeabi_dadd+0x108>
   18374:	2500      	movs	r5, #0
   18376:	e772      	b.n	1825e <__aeabi_dadd+0x2e2>
   18378:	2100      	movs	r1, #0
   1837a:	e782      	b.n	18282 <__aeabi_dadd+0x306>
   1837c:	0023      	movs	r3, r4
   1837e:	433b      	orrs	r3, r7
   18380:	2e00      	cmp	r6, #0
   18382:	d000      	beq.n	18386 <__aeabi_dadd+0x40a>
   18384:	e0ab      	b.n	184de <__aeabi_dadd+0x562>
   18386:	2b00      	cmp	r3, #0
   18388:	d100      	bne.n	1838c <__aeabi_dadd+0x410>
   1838a:	e0e7      	b.n	1855c <__aeabi_dadd+0x5e0>
   1838c:	000b      	movs	r3, r1
   1838e:	4313      	orrs	r3, r2
   18390:	d100      	bne.n	18394 <__aeabi_dadd+0x418>
   18392:	e677      	b.n	18084 <__aeabi_dadd+0x108>
   18394:	18ba      	adds	r2, r7, r2
   18396:	42ba      	cmp	r2, r7
   18398:	41bf      	sbcs	r7, r7
   1839a:	1864      	adds	r4, r4, r1
   1839c:	427f      	negs	r7, r7
   1839e:	19e4      	adds	r4, r4, r7
   183a0:	0223      	lsls	r3, r4, #8
   183a2:	d400      	bmi.n	183a6 <__aeabi_dadd+0x42a>
   183a4:	e0f2      	b.n	1858c <__aeabi_dadd+0x610>
   183a6:	4b7c      	ldr	r3, [pc, #496]	; (18598 <__aeabi_dadd+0x61c>)
   183a8:	0017      	movs	r7, r2
   183aa:	401c      	ands	r4, r3
   183ac:	0006      	movs	r6, r0
   183ae:	e669      	b.n	18084 <__aeabi_dadd+0x108>
   183b0:	0020      	movs	r0, r4
   183b2:	4338      	orrs	r0, r7
   183b4:	2e00      	cmp	r6, #0
   183b6:	d1d1      	bne.n	1835c <__aeabi_dadd+0x3e0>
   183b8:	2800      	cmp	r0, #0
   183ba:	d15b      	bne.n	18474 <__aeabi_dadd+0x4f8>
   183bc:	001c      	movs	r4, r3
   183be:	4314      	orrs	r4, r2
   183c0:	d100      	bne.n	183c4 <__aeabi_dadd+0x448>
   183c2:	e0a8      	b.n	18516 <__aeabi_dadd+0x59a>
   183c4:	001c      	movs	r4, r3
   183c6:	0017      	movs	r7, r2
   183c8:	46d8      	mov	r8, fp
   183ca:	e65b      	b.n	18084 <__aeabi_dadd+0x108>
   183cc:	0006      	movs	r6, r0
   183ce:	2400      	movs	r4, #0
   183d0:	2700      	movs	r7, #0
   183d2:	e697      	b.n	18104 <__aeabi_dadd+0x188>
   183d4:	4650      	mov	r0, sl
   183d6:	000b      	movs	r3, r1
   183d8:	3820      	subs	r0, #32
   183da:	40c3      	lsrs	r3, r0
   183dc:	4699      	mov	r9, r3
   183de:	4653      	mov	r3, sl
   183e0:	2b20      	cmp	r3, #32
   183e2:	d100      	bne.n	183e6 <__aeabi_dadd+0x46a>
   183e4:	e095      	b.n	18512 <__aeabi_dadd+0x596>
   183e6:	2340      	movs	r3, #64	; 0x40
   183e8:	4650      	mov	r0, sl
   183ea:	1a1b      	subs	r3, r3, r0
   183ec:	4099      	lsls	r1, r3
   183ee:	430a      	orrs	r2, r1
   183f0:	1e51      	subs	r1, r2, #1
   183f2:	418a      	sbcs	r2, r1
   183f4:	464b      	mov	r3, r9
   183f6:	2100      	movs	r1, #0
   183f8:	431a      	orrs	r2, r3
   183fa:	e69f      	b.n	1813c <__aeabi_dadd+0x1c0>
   183fc:	2e00      	cmp	r6, #0
   183fe:	d130      	bne.n	18462 <__aeabi_dadd+0x4e6>
   18400:	0026      	movs	r6, r4
   18402:	433e      	orrs	r6, r7
   18404:	d067      	beq.n	184d6 <__aeabi_dadd+0x55a>
   18406:	43db      	mvns	r3, r3
   18408:	469a      	mov	sl, r3
   1840a:	2b00      	cmp	r3, #0
   1840c:	d01c      	beq.n	18448 <__aeabi_dadd+0x4cc>
   1840e:	4e61      	ldr	r6, [pc, #388]	; (18594 <__aeabi_dadd+0x618>)
   18410:	42b0      	cmp	r0, r6
   18412:	d060      	beq.n	184d6 <__aeabi_dadd+0x55a>
   18414:	4653      	mov	r3, sl
   18416:	2b38      	cmp	r3, #56	; 0x38
   18418:	dd00      	ble.n	1841c <__aeabi_dadd+0x4a0>
   1841a:	e096      	b.n	1854a <__aeabi_dadd+0x5ce>
   1841c:	2b1f      	cmp	r3, #31
   1841e:	dd00      	ble.n	18422 <__aeabi_dadd+0x4a6>
   18420:	e09f      	b.n	18562 <__aeabi_dadd+0x5e6>
   18422:	2620      	movs	r6, #32
   18424:	1af3      	subs	r3, r6, r3
   18426:	0026      	movs	r6, r4
   18428:	409e      	lsls	r6, r3
   1842a:	469c      	mov	ip, r3
   1842c:	46b3      	mov	fp, r6
   1842e:	4653      	mov	r3, sl
   18430:	003e      	movs	r6, r7
   18432:	40de      	lsrs	r6, r3
   18434:	0033      	movs	r3, r6
   18436:	465e      	mov	r6, fp
   18438:	431e      	orrs	r6, r3
   1843a:	4663      	mov	r3, ip
   1843c:	409f      	lsls	r7, r3
   1843e:	1e7b      	subs	r3, r7, #1
   18440:	419f      	sbcs	r7, r3
   18442:	4653      	mov	r3, sl
   18444:	40dc      	lsrs	r4, r3
   18446:	4337      	orrs	r7, r6
   18448:	18bf      	adds	r7, r7, r2
   1844a:	4297      	cmp	r7, r2
   1844c:	4192      	sbcs	r2, r2
   1844e:	1864      	adds	r4, r4, r1
   18450:	4252      	negs	r2, r2
   18452:	18a4      	adds	r4, r4, r2
   18454:	0006      	movs	r6, r0
   18456:	e678      	b.n	1814a <__aeabi_dadd+0x1ce>
   18458:	4327      	orrs	r7, r4
   1845a:	1e7c      	subs	r4, r7, #1
   1845c:	41a7      	sbcs	r7, r4
   1845e:	2400      	movs	r4, #0
   18460:	e737      	b.n	182d2 <__aeabi_dadd+0x356>
   18462:	4e4c      	ldr	r6, [pc, #304]	; (18594 <__aeabi_dadd+0x618>)
   18464:	42b0      	cmp	r0, r6
   18466:	d036      	beq.n	184d6 <__aeabi_dadd+0x55a>
   18468:	2680      	movs	r6, #128	; 0x80
   1846a:	425b      	negs	r3, r3
   1846c:	0436      	lsls	r6, r6, #16
   1846e:	469a      	mov	sl, r3
   18470:	4334      	orrs	r4, r6
   18472:	e7cf      	b.n	18414 <__aeabi_dadd+0x498>
   18474:	0018      	movs	r0, r3
   18476:	4310      	orrs	r0, r2
   18478:	d100      	bne.n	1847c <__aeabi_dadd+0x500>
   1847a:	e603      	b.n	18084 <__aeabi_dadd+0x108>
   1847c:	1ab8      	subs	r0, r7, r2
   1847e:	4684      	mov	ip, r0
   18480:	4567      	cmp	r7, ip
   18482:	41ad      	sbcs	r5, r5
   18484:	1ae0      	subs	r0, r4, r3
   18486:	426d      	negs	r5, r5
   18488:	1b40      	subs	r0, r0, r5
   1848a:	0205      	lsls	r5, r0, #8
   1848c:	d400      	bmi.n	18490 <__aeabi_dadd+0x514>
   1848e:	e62c      	b.n	180ea <__aeabi_dadd+0x16e>
   18490:	1bd7      	subs	r7, r2, r7
   18492:	42ba      	cmp	r2, r7
   18494:	4192      	sbcs	r2, r2
   18496:	1b1c      	subs	r4, r3, r4
   18498:	4252      	negs	r2, r2
   1849a:	1aa4      	subs	r4, r4, r2
   1849c:	46d8      	mov	r8, fp
   1849e:	e5f1      	b.n	18084 <__aeabi_dadd+0x108>
   184a0:	0018      	movs	r0, r3
   184a2:	4310      	orrs	r0, r2
   184a4:	d100      	bne.n	184a8 <__aeabi_dadd+0x52c>
   184a6:	e763      	b.n	18370 <__aeabi_dadd+0x3f4>
   184a8:	08f8      	lsrs	r0, r7, #3
   184aa:	0767      	lsls	r7, r4, #29
   184ac:	4307      	orrs	r7, r0
   184ae:	2080      	movs	r0, #128	; 0x80
   184b0:	08e4      	lsrs	r4, r4, #3
   184b2:	0300      	lsls	r0, r0, #12
   184b4:	4204      	tst	r4, r0
   184b6:	d008      	beq.n	184ca <__aeabi_dadd+0x54e>
   184b8:	08dd      	lsrs	r5, r3, #3
   184ba:	4205      	tst	r5, r0
   184bc:	d105      	bne.n	184ca <__aeabi_dadd+0x54e>
   184be:	08d2      	lsrs	r2, r2, #3
   184c0:	0759      	lsls	r1, r3, #29
   184c2:	4311      	orrs	r1, r2
   184c4:	000f      	movs	r7, r1
   184c6:	002c      	movs	r4, r5
   184c8:	46d8      	mov	r8, fp
   184ca:	0f7b      	lsrs	r3, r7, #29
   184cc:	00e4      	lsls	r4, r4, #3
   184ce:	431c      	orrs	r4, r3
   184d0:	00ff      	lsls	r7, r7, #3
   184d2:	4e30      	ldr	r6, [pc, #192]	; (18594 <__aeabi_dadd+0x618>)
   184d4:	e5d6      	b.n	18084 <__aeabi_dadd+0x108>
   184d6:	000c      	movs	r4, r1
   184d8:	0017      	movs	r7, r2
   184da:	0006      	movs	r6, r0
   184dc:	e5d2      	b.n	18084 <__aeabi_dadd+0x108>
   184de:	2b00      	cmp	r3, #0
   184e0:	d038      	beq.n	18554 <__aeabi_dadd+0x5d8>
   184e2:	000b      	movs	r3, r1
   184e4:	4313      	orrs	r3, r2
   184e6:	d100      	bne.n	184ea <__aeabi_dadd+0x56e>
   184e8:	e742      	b.n	18370 <__aeabi_dadd+0x3f4>
   184ea:	08f8      	lsrs	r0, r7, #3
   184ec:	0767      	lsls	r7, r4, #29
   184ee:	4307      	orrs	r7, r0
   184f0:	2080      	movs	r0, #128	; 0x80
   184f2:	08e4      	lsrs	r4, r4, #3
   184f4:	0300      	lsls	r0, r0, #12
   184f6:	4204      	tst	r4, r0
   184f8:	d0e7      	beq.n	184ca <__aeabi_dadd+0x54e>
   184fa:	08cb      	lsrs	r3, r1, #3
   184fc:	4203      	tst	r3, r0
   184fe:	d1e4      	bne.n	184ca <__aeabi_dadd+0x54e>
   18500:	08d2      	lsrs	r2, r2, #3
   18502:	0749      	lsls	r1, r1, #29
   18504:	4311      	orrs	r1, r2
   18506:	000f      	movs	r7, r1
   18508:	001c      	movs	r4, r3
   1850a:	e7de      	b.n	184ca <__aeabi_dadd+0x54e>
   1850c:	2700      	movs	r7, #0
   1850e:	2400      	movs	r4, #0
   18510:	e5d5      	b.n	180be <__aeabi_dadd+0x142>
   18512:	2100      	movs	r1, #0
   18514:	e76b      	b.n	183ee <__aeabi_dadd+0x472>
   18516:	2500      	movs	r5, #0
   18518:	2700      	movs	r7, #0
   1851a:	e5f3      	b.n	18104 <__aeabi_dadd+0x188>
   1851c:	464e      	mov	r6, r9
   1851e:	0025      	movs	r5, r4
   18520:	3e20      	subs	r6, #32
   18522:	40f5      	lsrs	r5, r6
   18524:	464b      	mov	r3, r9
   18526:	002e      	movs	r6, r5
   18528:	2b20      	cmp	r3, #32
   1852a:	d02d      	beq.n	18588 <__aeabi_dadd+0x60c>
   1852c:	2540      	movs	r5, #64	; 0x40
   1852e:	1aed      	subs	r5, r5, r3
   18530:	40ac      	lsls	r4, r5
   18532:	4327      	orrs	r7, r4
   18534:	1e7c      	subs	r4, r7, #1
   18536:	41a7      	sbcs	r7, r4
   18538:	2400      	movs	r4, #0
   1853a:	4337      	orrs	r7, r6
   1853c:	e6c9      	b.n	182d2 <__aeabi_dadd+0x356>
   1853e:	2480      	movs	r4, #128	; 0x80
   18540:	2500      	movs	r5, #0
   18542:	0324      	lsls	r4, r4, #12
   18544:	4e13      	ldr	r6, [pc, #76]	; (18594 <__aeabi_dadd+0x618>)
   18546:	2700      	movs	r7, #0
   18548:	e5dc      	b.n	18104 <__aeabi_dadd+0x188>
   1854a:	4327      	orrs	r7, r4
   1854c:	1e7c      	subs	r4, r7, #1
   1854e:	41a7      	sbcs	r7, r4
   18550:	2400      	movs	r4, #0
   18552:	e779      	b.n	18448 <__aeabi_dadd+0x4cc>
   18554:	000c      	movs	r4, r1
   18556:	0017      	movs	r7, r2
   18558:	4e0e      	ldr	r6, [pc, #56]	; (18594 <__aeabi_dadd+0x618>)
   1855a:	e593      	b.n	18084 <__aeabi_dadd+0x108>
   1855c:	000c      	movs	r4, r1
   1855e:	0017      	movs	r7, r2
   18560:	e590      	b.n	18084 <__aeabi_dadd+0x108>
   18562:	4656      	mov	r6, sl
   18564:	0023      	movs	r3, r4
   18566:	3e20      	subs	r6, #32
   18568:	40f3      	lsrs	r3, r6
   1856a:	4699      	mov	r9, r3
   1856c:	4653      	mov	r3, sl
   1856e:	2b20      	cmp	r3, #32
   18570:	d00e      	beq.n	18590 <__aeabi_dadd+0x614>
   18572:	2340      	movs	r3, #64	; 0x40
   18574:	4656      	mov	r6, sl
   18576:	1b9b      	subs	r3, r3, r6
   18578:	409c      	lsls	r4, r3
   1857a:	4327      	orrs	r7, r4
   1857c:	1e7c      	subs	r4, r7, #1
   1857e:	41a7      	sbcs	r7, r4
   18580:	464b      	mov	r3, r9
   18582:	2400      	movs	r4, #0
   18584:	431f      	orrs	r7, r3
   18586:	e75f      	b.n	18448 <__aeabi_dadd+0x4cc>
   18588:	2400      	movs	r4, #0
   1858a:	e7d2      	b.n	18532 <__aeabi_dadd+0x5b6>
   1858c:	0017      	movs	r7, r2
   1858e:	e5b2      	b.n	180f6 <__aeabi_dadd+0x17a>
   18590:	2400      	movs	r4, #0
   18592:	e7f2      	b.n	1857a <__aeabi_dadd+0x5fe>
   18594:	000007ff 	.word	0x000007ff
   18598:	ff7fffff 	.word	0xff7fffff

0001859c <__aeabi_ddiv>:
   1859c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1859e:	4657      	mov	r7, sl
   185a0:	4645      	mov	r5, r8
   185a2:	46de      	mov	lr, fp
   185a4:	464e      	mov	r6, r9
   185a6:	b5e0      	push	{r5, r6, r7, lr}
   185a8:	004c      	lsls	r4, r1, #1
   185aa:	030e      	lsls	r6, r1, #12
   185ac:	b087      	sub	sp, #28
   185ae:	4683      	mov	fp, r0
   185b0:	4692      	mov	sl, r2
   185b2:	001d      	movs	r5, r3
   185b4:	4680      	mov	r8, r0
   185b6:	0b36      	lsrs	r6, r6, #12
   185b8:	0d64      	lsrs	r4, r4, #21
   185ba:	0fcf      	lsrs	r7, r1, #31
   185bc:	2c00      	cmp	r4, #0
   185be:	d04f      	beq.n	18660 <__aeabi_ddiv+0xc4>
   185c0:	4b6f      	ldr	r3, [pc, #444]	; (18780 <__aeabi_ddiv+0x1e4>)
   185c2:	429c      	cmp	r4, r3
   185c4:	d035      	beq.n	18632 <__aeabi_ddiv+0x96>
   185c6:	2380      	movs	r3, #128	; 0x80
   185c8:	0f42      	lsrs	r2, r0, #29
   185ca:	041b      	lsls	r3, r3, #16
   185cc:	00f6      	lsls	r6, r6, #3
   185ce:	4313      	orrs	r3, r2
   185d0:	4333      	orrs	r3, r6
   185d2:	4699      	mov	r9, r3
   185d4:	00c3      	lsls	r3, r0, #3
   185d6:	4698      	mov	r8, r3
   185d8:	4b6a      	ldr	r3, [pc, #424]	; (18784 <__aeabi_ddiv+0x1e8>)
   185da:	2600      	movs	r6, #0
   185dc:	469c      	mov	ip, r3
   185de:	2300      	movs	r3, #0
   185e0:	4464      	add	r4, ip
   185e2:	9303      	str	r3, [sp, #12]
   185e4:	032b      	lsls	r3, r5, #12
   185e6:	0b1b      	lsrs	r3, r3, #12
   185e8:	469b      	mov	fp, r3
   185ea:	006b      	lsls	r3, r5, #1
   185ec:	0fed      	lsrs	r5, r5, #31
   185ee:	4650      	mov	r0, sl
   185f0:	0d5b      	lsrs	r3, r3, #21
   185f2:	9501      	str	r5, [sp, #4]
   185f4:	d05e      	beq.n	186b4 <__aeabi_ddiv+0x118>
   185f6:	4a62      	ldr	r2, [pc, #392]	; (18780 <__aeabi_ddiv+0x1e4>)
   185f8:	4293      	cmp	r3, r2
   185fa:	d053      	beq.n	186a4 <__aeabi_ddiv+0x108>
   185fc:	465a      	mov	r2, fp
   185fe:	00d1      	lsls	r1, r2, #3
   18600:	2280      	movs	r2, #128	; 0x80
   18602:	0f40      	lsrs	r0, r0, #29
   18604:	0412      	lsls	r2, r2, #16
   18606:	4302      	orrs	r2, r0
   18608:	430a      	orrs	r2, r1
   1860a:	4693      	mov	fp, r2
   1860c:	4652      	mov	r2, sl
   1860e:	00d1      	lsls	r1, r2, #3
   18610:	4a5c      	ldr	r2, [pc, #368]	; (18784 <__aeabi_ddiv+0x1e8>)
   18612:	4694      	mov	ip, r2
   18614:	2200      	movs	r2, #0
   18616:	4463      	add	r3, ip
   18618:	0038      	movs	r0, r7
   1861a:	4068      	eors	r0, r5
   1861c:	4684      	mov	ip, r0
   1861e:	9002      	str	r0, [sp, #8]
   18620:	1ae4      	subs	r4, r4, r3
   18622:	4316      	orrs	r6, r2
   18624:	2e0f      	cmp	r6, #15
   18626:	d900      	bls.n	1862a <__aeabi_ddiv+0x8e>
   18628:	e0b4      	b.n	18794 <__aeabi_ddiv+0x1f8>
   1862a:	4b57      	ldr	r3, [pc, #348]	; (18788 <__aeabi_ddiv+0x1ec>)
   1862c:	00b6      	lsls	r6, r6, #2
   1862e:	599b      	ldr	r3, [r3, r6]
   18630:	469f      	mov	pc, r3
   18632:	0003      	movs	r3, r0
   18634:	4333      	orrs	r3, r6
   18636:	4699      	mov	r9, r3
   18638:	d16c      	bne.n	18714 <__aeabi_ddiv+0x178>
   1863a:	2300      	movs	r3, #0
   1863c:	4698      	mov	r8, r3
   1863e:	3302      	adds	r3, #2
   18640:	2608      	movs	r6, #8
   18642:	9303      	str	r3, [sp, #12]
   18644:	e7ce      	b.n	185e4 <__aeabi_ddiv+0x48>
   18646:	46cb      	mov	fp, r9
   18648:	4641      	mov	r1, r8
   1864a:	9a03      	ldr	r2, [sp, #12]
   1864c:	9701      	str	r7, [sp, #4]
   1864e:	2a02      	cmp	r2, #2
   18650:	d165      	bne.n	1871e <__aeabi_ddiv+0x182>
   18652:	9b01      	ldr	r3, [sp, #4]
   18654:	4c4a      	ldr	r4, [pc, #296]	; (18780 <__aeabi_ddiv+0x1e4>)
   18656:	469c      	mov	ip, r3
   18658:	2300      	movs	r3, #0
   1865a:	2200      	movs	r2, #0
   1865c:	4698      	mov	r8, r3
   1865e:	e06b      	b.n	18738 <__aeabi_ddiv+0x19c>
   18660:	0003      	movs	r3, r0
   18662:	4333      	orrs	r3, r6
   18664:	4699      	mov	r9, r3
   18666:	d04e      	beq.n	18706 <__aeabi_ddiv+0x16a>
   18668:	2e00      	cmp	r6, #0
   1866a:	d100      	bne.n	1866e <__aeabi_ddiv+0xd2>
   1866c:	e1bc      	b.n	189e8 <__aeabi_ddiv+0x44c>
   1866e:	0030      	movs	r0, r6
   18670:	f001 fa5e 	bl	19b30 <__clzsi2>
   18674:	0003      	movs	r3, r0
   18676:	3b0b      	subs	r3, #11
   18678:	2b1c      	cmp	r3, #28
   1867a:	dd00      	ble.n	1867e <__aeabi_ddiv+0xe2>
   1867c:	e1ac      	b.n	189d8 <__aeabi_ddiv+0x43c>
   1867e:	221d      	movs	r2, #29
   18680:	1ad3      	subs	r3, r2, r3
   18682:	465a      	mov	r2, fp
   18684:	0001      	movs	r1, r0
   18686:	40da      	lsrs	r2, r3
   18688:	3908      	subs	r1, #8
   1868a:	408e      	lsls	r6, r1
   1868c:	0013      	movs	r3, r2
   1868e:	4333      	orrs	r3, r6
   18690:	4699      	mov	r9, r3
   18692:	465b      	mov	r3, fp
   18694:	408b      	lsls	r3, r1
   18696:	4698      	mov	r8, r3
   18698:	2300      	movs	r3, #0
   1869a:	4c3c      	ldr	r4, [pc, #240]	; (1878c <__aeabi_ddiv+0x1f0>)
   1869c:	2600      	movs	r6, #0
   1869e:	1a24      	subs	r4, r4, r0
   186a0:	9303      	str	r3, [sp, #12]
   186a2:	e79f      	b.n	185e4 <__aeabi_ddiv+0x48>
   186a4:	4651      	mov	r1, sl
   186a6:	465a      	mov	r2, fp
   186a8:	4311      	orrs	r1, r2
   186aa:	d129      	bne.n	18700 <__aeabi_ddiv+0x164>
   186ac:	2200      	movs	r2, #0
   186ae:	4693      	mov	fp, r2
   186b0:	3202      	adds	r2, #2
   186b2:	e7b1      	b.n	18618 <__aeabi_ddiv+0x7c>
   186b4:	4659      	mov	r1, fp
   186b6:	4301      	orrs	r1, r0
   186b8:	d01e      	beq.n	186f8 <__aeabi_ddiv+0x15c>
   186ba:	465b      	mov	r3, fp
   186bc:	2b00      	cmp	r3, #0
   186be:	d100      	bne.n	186c2 <__aeabi_ddiv+0x126>
   186c0:	e19e      	b.n	18a00 <__aeabi_ddiv+0x464>
   186c2:	4658      	mov	r0, fp
   186c4:	f001 fa34 	bl	19b30 <__clzsi2>
   186c8:	0003      	movs	r3, r0
   186ca:	3b0b      	subs	r3, #11
   186cc:	2b1c      	cmp	r3, #28
   186ce:	dd00      	ble.n	186d2 <__aeabi_ddiv+0x136>
   186d0:	e18f      	b.n	189f2 <__aeabi_ddiv+0x456>
   186d2:	0002      	movs	r2, r0
   186d4:	4659      	mov	r1, fp
   186d6:	3a08      	subs	r2, #8
   186d8:	4091      	lsls	r1, r2
   186da:	468b      	mov	fp, r1
   186dc:	211d      	movs	r1, #29
   186de:	1acb      	subs	r3, r1, r3
   186e0:	4651      	mov	r1, sl
   186e2:	40d9      	lsrs	r1, r3
   186e4:	000b      	movs	r3, r1
   186e6:	4659      	mov	r1, fp
   186e8:	430b      	orrs	r3, r1
   186ea:	4651      	mov	r1, sl
   186ec:	469b      	mov	fp, r3
   186ee:	4091      	lsls	r1, r2
   186f0:	4b26      	ldr	r3, [pc, #152]	; (1878c <__aeabi_ddiv+0x1f0>)
   186f2:	2200      	movs	r2, #0
   186f4:	1a1b      	subs	r3, r3, r0
   186f6:	e78f      	b.n	18618 <__aeabi_ddiv+0x7c>
   186f8:	2300      	movs	r3, #0
   186fa:	2201      	movs	r2, #1
   186fc:	469b      	mov	fp, r3
   186fe:	e78b      	b.n	18618 <__aeabi_ddiv+0x7c>
   18700:	4651      	mov	r1, sl
   18702:	2203      	movs	r2, #3
   18704:	e788      	b.n	18618 <__aeabi_ddiv+0x7c>
   18706:	2300      	movs	r3, #0
   18708:	4698      	mov	r8, r3
   1870a:	3301      	adds	r3, #1
   1870c:	2604      	movs	r6, #4
   1870e:	2400      	movs	r4, #0
   18710:	9303      	str	r3, [sp, #12]
   18712:	e767      	b.n	185e4 <__aeabi_ddiv+0x48>
   18714:	2303      	movs	r3, #3
   18716:	46b1      	mov	r9, r6
   18718:	9303      	str	r3, [sp, #12]
   1871a:	260c      	movs	r6, #12
   1871c:	e762      	b.n	185e4 <__aeabi_ddiv+0x48>
   1871e:	2a03      	cmp	r2, #3
   18720:	d100      	bne.n	18724 <__aeabi_ddiv+0x188>
   18722:	e25c      	b.n	18bde <__aeabi_ddiv+0x642>
   18724:	9b01      	ldr	r3, [sp, #4]
   18726:	2a01      	cmp	r2, #1
   18728:	d000      	beq.n	1872c <__aeabi_ddiv+0x190>
   1872a:	e1e4      	b.n	18af6 <__aeabi_ddiv+0x55a>
   1872c:	4013      	ands	r3, r2
   1872e:	469c      	mov	ip, r3
   18730:	2300      	movs	r3, #0
   18732:	2400      	movs	r4, #0
   18734:	2200      	movs	r2, #0
   18736:	4698      	mov	r8, r3
   18738:	2100      	movs	r1, #0
   1873a:	0312      	lsls	r2, r2, #12
   1873c:	0b13      	lsrs	r3, r2, #12
   1873e:	0d0a      	lsrs	r2, r1, #20
   18740:	0512      	lsls	r2, r2, #20
   18742:	431a      	orrs	r2, r3
   18744:	0523      	lsls	r3, r4, #20
   18746:	4c12      	ldr	r4, [pc, #72]	; (18790 <__aeabi_ddiv+0x1f4>)
   18748:	4640      	mov	r0, r8
   1874a:	4022      	ands	r2, r4
   1874c:	4313      	orrs	r3, r2
   1874e:	4662      	mov	r2, ip
   18750:	005b      	lsls	r3, r3, #1
   18752:	07d2      	lsls	r2, r2, #31
   18754:	085b      	lsrs	r3, r3, #1
   18756:	4313      	orrs	r3, r2
   18758:	0019      	movs	r1, r3
   1875a:	b007      	add	sp, #28
   1875c:	bc3c      	pop	{r2, r3, r4, r5}
   1875e:	4690      	mov	r8, r2
   18760:	4699      	mov	r9, r3
   18762:	46a2      	mov	sl, r4
   18764:	46ab      	mov	fp, r5
   18766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18768:	2300      	movs	r3, #0
   1876a:	2280      	movs	r2, #128	; 0x80
   1876c:	469c      	mov	ip, r3
   1876e:	0312      	lsls	r2, r2, #12
   18770:	4698      	mov	r8, r3
   18772:	4c03      	ldr	r4, [pc, #12]	; (18780 <__aeabi_ddiv+0x1e4>)
   18774:	e7e0      	b.n	18738 <__aeabi_ddiv+0x19c>
   18776:	2300      	movs	r3, #0
   18778:	4c01      	ldr	r4, [pc, #4]	; (18780 <__aeabi_ddiv+0x1e4>)
   1877a:	2200      	movs	r2, #0
   1877c:	4698      	mov	r8, r3
   1877e:	e7db      	b.n	18738 <__aeabi_ddiv+0x19c>
   18780:	000007ff 	.word	0x000007ff
   18784:	fffffc01 	.word	0xfffffc01
   18788:	0001fbf4 	.word	0x0001fbf4
   1878c:	fffffc0d 	.word	0xfffffc0d
   18790:	800fffff 	.word	0x800fffff
   18794:	45d9      	cmp	r9, fp
   18796:	d900      	bls.n	1879a <__aeabi_ddiv+0x1fe>
   18798:	e139      	b.n	18a0e <__aeabi_ddiv+0x472>
   1879a:	d100      	bne.n	1879e <__aeabi_ddiv+0x202>
   1879c:	e134      	b.n	18a08 <__aeabi_ddiv+0x46c>
   1879e:	2300      	movs	r3, #0
   187a0:	4646      	mov	r6, r8
   187a2:	464d      	mov	r5, r9
   187a4:	469a      	mov	sl, r3
   187a6:	3c01      	subs	r4, #1
   187a8:	465b      	mov	r3, fp
   187aa:	0e0a      	lsrs	r2, r1, #24
   187ac:	021b      	lsls	r3, r3, #8
   187ae:	431a      	orrs	r2, r3
   187b0:	020b      	lsls	r3, r1, #8
   187b2:	0c17      	lsrs	r7, r2, #16
   187b4:	9303      	str	r3, [sp, #12]
   187b6:	0413      	lsls	r3, r2, #16
   187b8:	0c1b      	lsrs	r3, r3, #16
   187ba:	0039      	movs	r1, r7
   187bc:	0028      	movs	r0, r5
   187be:	4690      	mov	r8, r2
   187c0:	9301      	str	r3, [sp, #4]
   187c2:	f7fe ff47 	bl	17654 <__udivsi3>
   187c6:	0002      	movs	r2, r0
   187c8:	9b01      	ldr	r3, [sp, #4]
   187ca:	4683      	mov	fp, r0
   187cc:	435a      	muls	r2, r3
   187ce:	0028      	movs	r0, r5
   187d0:	0039      	movs	r1, r7
   187d2:	4691      	mov	r9, r2
   187d4:	f7fe ffc4 	bl	17760 <__aeabi_uidivmod>
   187d8:	0c35      	lsrs	r5, r6, #16
   187da:	0409      	lsls	r1, r1, #16
   187dc:	430d      	orrs	r5, r1
   187de:	45a9      	cmp	r9, r5
   187e0:	d90d      	bls.n	187fe <__aeabi_ddiv+0x262>
   187e2:	465b      	mov	r3, fp
   187e4:	4445      	add	r5, r8
   187e6:	3b01      	subs	r3, #1
   187e8:	45a8      	cmp	r8, r5
   187ea:	d900      	bls.n	187ee <__aeabi_ddiv+0x252>
   187ec:	e13a      	b.n	18a64 <__aeabi_ddiv+0x4c8>
   187ee:	45a9      	cmp	r9, r5
   187f0:	d800      	bhi.n	187f4 <__aeabi_ddiv+0x258>
   187f2:	e137      	b.n	18a64 <__aeabi_ddiv+0x4c8>
   187f4:	2302      	movs	r3, #2
   187f6:	425b      	negs	r3, r3
   187f8:	469c      	mov	ip, r3
   187fa:	4445      	add	r5, r8
   187fc:	44e3      	add	fp, ip
   187fe:	464b      	mov	r3, r9
   18800:	1aeb      	subs	r3, r5, r3
   18802:	0039      	movs	r1, r7
   18804:	0018      	movs	r0, r3
   18806:	9304      	str	r3, [sp, #16]
   18808:	f7fe ff24 	bl	17654 <__udivsi3>
   1880c:	9b01      	ldr	r3, [sp, #4]
   1880e:	0005      	movs	r5, r0
   18810:	4343      	muls	r3, r0
   18812:	0039      	movs	r1, r7
   18814:	9804      	ldr	r0, [sp, #16]
   18816:	4699      	mov	r9, r3
   18818:	f7fe ffa2 	bl	17760 <__aeabi_uidivmod>
   1881c:	0433      	lsls	r3, r6, #16
   1881e:	0409      	lsls	r1, r1, #16
   18820:	0c1b      	lsrs	r3, r3, #16
   18822:	430b      	orrs	r3, r1
   18824:	4599      	cmp	r9, r3
   18826:	d909      	bls.n	1883c <__aeabi_ddiv+0x2a0>
   18828:	4443      	add	r3, r8
   1882a:	1e6a      	subs	r2, r5, #1
   1882c:	4598      	cmp	r8, r3
   1882e:	d900      	bls.n	18832 <__aeabi_ddiv+0x296>
   18830:	e11a      	b.n	18a68 <__aeabi_ddiv+0x4cc>
   18832:	4599      	cmp	r9, r3
   18834:	d800      	bhi.n	18838 <__aeabi_ddiv+0x29c>
   18836:	e117      	b.n	18a68 <__aeabi_ddiv+0x4cc>
   18838:	3d02      	subs	r5, #2
   1883a:	4443      	add	r3, r8
   1883c:	464a      	mov	r2, r9
   1883e:	1a9b      	subs	r3, r3, r2
   18840:	465a      	mov	r2, fp
   18842:	0412      	lsls	r2, r2, #16
   18844:	432a      	orrs	r2, r5
   18846:	9903      	ldr	r1, [sp, #12]
   18848:	4693      	mov	fp, r2
   1884a:	0c10      	lsrs	r0, r2, #16
   1884c:	0c0a      	lsrs	r2, r1, #16
   1884e:	4691      	mov	r9, r2
   18850:	0409      	lsls	r1, r1, #16
   18852:	465a      	mov	r2, fp
   18854:	0c09      	lsrs	r1, r1, #16
   18856:	464e      	mov	r6, r9
   18858:	000d      	movs	r5, r1
   1885a:	0412      	lsls	r2, r2, #16
   1885c:	0c12      	lsrs	r2, r2, #16
   1885e:	4345      	muls	r5, r0
   18860:	9105      	str	r1, [sp, #20]
   18862:	4351      	muls	r1, r2
   18864:	4372      	muls	r2, r6
   18866:	4370      	muls	r0, r6
   18868:	1952      	adds	r2, r2, r5
   1886a:	0c0e      	lsrs	r6, r1, #16
   1886c:	18b2      	adds	r2, r6, r2
   1886e:	4295      	cmp	r5, r2
   18870:	d903      	bls.n	1887a <__aeabi_ddiv+0x2de>
   18872:	2580      	movs	r5, #128	; 0x80
   18874:	026d      	lsls	r5, r5, #9
   18876:	46ac      	mov	ip, r5
   18878:	4460      	add	r0, ip
   1887a:	0c15      	lsrs	r5, r2, #16
   1887c:	0409      	lsls	r1, r1, #16
   1887e:	0412      	lsls	r2, r2, #16
   18880:	0c09      	lsrs	r1, r1, #16
   18882:	1828      	adds	r0, r5, r0
   18884:	1852      	adds	r2, r2, r1
   18886:	4283      	cmp	r3, r0
   18888:	d200      	bcs.n	1888c <__aeabi_ddiv+0x2f0>
   1888a:	e0ce      	b.n	18a2a <__aeabi_ddiv+0x48e>
   1888c:	d100      	bne.n	18890 <__aeabi_ddiv+0x2f4>
   1888e:	e0c8      	b.n	18a22 <__aeabi_ddiv+0x486>
   18890:	1a1d      	subs	r5, r3, r0
   18892:	4653      	mov	r3, sl
   18894:	1a9e      	subs	r6, r3, r2
   18896:	45b2      	cmp	sl, r6
   18898:	4192      	sbcs	r2, r2
   1889a:	4252      	negs	r2, r2
   1889c:	1aab      	subs	r3, r5, r2
   1889e:	469a      	mov	sl, r3
   188a0:	4598      	cmp	r8, r3
   188a2:	d100      	bne.n	188a6 <__aeabi_ddiv+0x30a>
   188a4:	e117      	b.n	18ad6 <__aeabi_ddiv+0x53a>
   188a6:	0039      	movs	r1, r7
   188a8:	0018      	movs	r0, r3
   188aa:	f7fe fed3 	bl	17654 <__udivsi3>
   188ae:	9b01      	ldr	r3, [sp, #4]
   188b0:	0005      	movs	r5, r0
   188b2:	4343      	muls	r3, r0
   188b4:	0039      	movs	r1, r7
   188b6:	4650      	mov	r0, sl
   188b8:	9304      	str	r3, [sp, #16]
   188ba:	f7fe ff51 	bl	17760 <__aeabi_uidivmod>
   188be:	9804      	ldr	r0, [sp, #16]
   188c0:	040b      	lsls	r3, r1, #16
   188c2:	0c31      	lsrs	r1, r6, #16
   188c4:	4319      	orrs	r1, r3
   188c6:	4288      	cmp	r0, r1
   188c8:	d909      	bls.n	188de <__aeabi_ddiv+0x342>
   188ca:	4441      	add	r1, r8
   188cc:	1e6b      	subs	r3, r5, #1
   188ce:	4588      	cmp	r8, r1
   188d0:	d900      	bls.n	188d4 <__aeabi_ddiv+0x338>
   188d2:	e107      	b.n	18ae4 <__aeabi_ddiv+0x548>
   188d4:	4288      	cmp	r0, r1
   188d6:	d800      	bhi.n	188da <__aeabi_ddiv+0x33e>
   188d8:	e104      	b.n	18ae4 <__aeabi_ddiv+0x548>
   188da:	3d02      	subs	r5, #2
   188dc:	4441      	add	r1, r8
   188de:	9b04      	ldr	r3, [sp, #16]
   188e0:	1acb      	subs	r3, r1, r3
   188e2:	0018      	movs	r0, r3
   188e4:	0039      	movs	r1, r7
   188e6:	9304      	str	r3, [sp, #16]
   188e8:	f7fe feb4 	bl	17654 <__udivsi3>
   188ec:	9b01      	ldr	r3, [sp, #4]
   188ee:	4682      	mov	sl, r0
   188f0:	4343      	muls	r3, r0
   188f2:	0039      	movs	r1, r7
   188f4:	9804      	ldr	r0, [sp, #16]
   188f6:	9301      	str	r3, [sp, #4]
   188f8:	f7fe ff32 	bl	17760 <__aeabi_uidivmod>
   188fc:	9801      	ldr	r0, [sp, #4]
   188fe:	040b      	lsls	r3, r1, #16
   18900:	0431      	lsls	r1, r6, #16
   18902:	0c09      	lsrs	r1, r1, #16
   18904:	4319      	orrs	r1, r3
   18906:	4288      	cmp	r0, r1
   18908:	d90d      	bls.n	18926 <__aeabi_ddiv+0x38a>
   1890a:	4653      	mov	r3, sl
   1890c:	4441      	add	r1, r8
   1890e:	3b01      	subs	r3, #1
   18910:	4588      	cmp	r8, r1
   18912:	d900      	bls.n	18916 <__aeabi_ddiv+0x37a>
   18914:	e0e8      	b.n	18ae8 <__aeabi_ddiv+0x54c>
   18916:	4288      	cmp	r0, r1
   18918:	d800      	bhi.n	1891c <__aeabi_ddiv+0x380>
   1891a:	e0e5      	b.n	18ae8 <__aeabi_ddiv+0x54c>
   1891c:	2302      	movs	r3, #2
   1891e:	425b      	negs	r3, r3
   18920:	469c      	mov	ip, r3
   18922:	4441      	add	r1, r8
   18924:	44e2      	add	sl, ip
   18926:	9b01      	ldr	r3, [sp, #4]
   18928:	042d      	lsls	r5, r5, #16
   1892a:	1ace      	subs	r6, r1, r3
   1892c:	4651      	mov	r1, sl
   1892e:	4329      	orrs	r1, r5
   18930:	9d05      	ldr	r5, [sp, #20]
   18932:	464f      	mov	r7, r9
   18934:	002a      	movs	r2, r5
   18936:	040b      	lsls	r3, r1, #16
   18938:	0c08      	lsrs	r0, r1, #16
   1893a:	0c1b      	lsrs	r3, r3, #16
   1893c:	435a      	muls	r2, r3
   1893e:	4345      	muls	r5, r0
   18940:	437b      	muls	r3, r7
   18942:	4378      	muls	r0, r7
   18944:	195b      	adds	r3, r3, r5
   18946:	0c17      	lsrs	r7, r2, #16
   18948:	18fb      	adds	r3, r7, r3
   1894a:	429d      	cmp	r5, r3
   1894c:	d903      	bls.n	18956 <__aeabi_ddiv+0x3ba>
   1894e:	2580      	movs	r5, #128	; 0x80
   18950:	026d      	lsls	r5, r5, #9
   18952:	46ac      	mov	ip, r5
   18954:	4460      	add	r0, ip
   18956:	0c1d      	lsrs	r5, r3, #16
   18958:	0412      	lsls	r2, r2, #16
   1895a:	041b      	lsls	r3, r3, #16
   1895c:	0c12      	lsrs	r2, r2, #16
   1895e:	1828      	adds	r0, r5, r0
   18960:	189b      	adds	r3, r3, r2
   18962:	4286      	cmp	r6, r0
   18964:	d200      	bcs.n	18968 <__aeabi_ddiv+0x3cc>
   18966:	e093      	b.n	18a90 <__aeabi_ddiv+0x4f4>
   18968:	d100      	bne.n	1896c <__aeabi_ddiv+0x3d0>
   1896a:	e08e      	b.n	18a8a <__aeabi_ddiv+0x4ee>
   1896c:	2301      	movs	r3, #1
   1896e:	4319      	orrs	r1, r3
   18970:	4ba0      	ldr	r3, [pc, #640]	; (18bf4 <__aeabi_ddiv+0x658>)
   18972:	18e3      	adds	r3, r4, r3
   18974:	2b00      	cmp	r3, #0
   18976:	dc00      	bgt.n	1897a <__aeabi_ddiv+0x3de>
   18978:	e099      	b.n	18aae <__aeabi_ddiv+0x512>
   1897a:	074a      	lsls	r2, r1, #29
   1897c:	d000      	beq.n	18980 <__aeabi_ddiv+0x3e4>
   1897e:	e09e      	b.n	18abe <__aeabi_ddiv+0x522>
   18980:	465a      	mov	r2, fp
   18982:	01d2      	lsls	r2, r2, #7
   18984:	d506      	bpl.n	18994 <__aeabi_ddiv+0x3f8>
   18986:	465a      	mov	r2, fp
   18988:	4b9b      	ldr	r3, [pc, #620]	; (18bf8 <__aeabi_ddiv+0x65c>)
   1898a:	401a      	ands	r2, r3
   1898c:	2380      	movs	r3, #128	; 0x80
   1898e:	4693      	mov	fp, r2
   18990:	00db      	lsls	r3, r3, #3
   18992:	18e3      	adds	r3, r4, r3
   18994:	4a99      	ldr	r2, [pc, #612]	; (18bfc <__aeabi_ddiv+0x660>)
   18996:	4293      	cmp	r3, r2
   18998:	dd68      	ble.n	18a6c <__aeabi_ddiv+0x4d0>
   1899a:	2301      	movs	r3, #1
   1899c:	9a02      	ldr	r2, [sp, #8]
   1899e:	4c98      	ldr	r4, [pc, #608]	; (18c00 <__aeabi_ddiv+0x664>)
   189a0:	401a      	ands	r2, r3
   189a2:	2300      	movs	r3, #0
   189a4:	4694      	mov	ip, r2
   189a6:	4698      	mov	r8, r3
   189a8:	2200      	movs	r2, #0
   189aa:	e6c5      	b.n	18738 <__aeabi_ddiv+0x19c>
   189ac:	2280      	movs	r2, #128	; 0x80
   189ae:	464b      	mov	r3, r9
   189b0:	0312      	lsls	r2, r2, #12
   189b2:	4213      	tst	r3, r2
   189b4:	d00a      	beq.n	189cc <__aeabi_ddiv+0x430>
   189b6:	465b      	mov	r3, fp
   189b8:	4213      	tst	r3, r2
   189ba:	d106      	bne.n	189ca <__aeabi_ddiv+0x42e>
   189bc:	431a      	orrs	r2, r3
   189be:	0312      	lsls	r2, r2, #12
   189c0:	0b12      	lsrs	r2, r2, #12
   189c2:	46ac      	mov	ip, r5
   189c4:	4688      	mov	r8, r1
   189c6:	4c8e      	ldr	r4, [pc, #568]	; (18c00 <__aeabi_ddiv+0x664>)
   189c8:	e6b6      	b.n	18738 <__aeabi_ddiv+0x19c>
   189ca:	464b      	mov	r3, r9
   189cc:	431a      	orrs	r2, r3
   189ce:	0312      	lsls	r2, r2, #12
   189d0:	0b12      	lsrs	r2, r2, #12
   189d2:	46bc      	mov	ip, r7
   189d4:	4c8a      	ldr	r4, [pc, #552]	; (18c00 <__aeabi_ddiv+0x664>)
   189d6:	e6af      	b.n	18738 <__aeabi_ddiv+0x19c>
   189d8:	0003      	movs	r3, r0
   189da:	465a      	mov	r2, fp
   189dc:	3b28      	subs	r3, #40	; 0x28
   189de:	409a      	lsls	r2, r3
   189e0:	2300      	movs	r3, #0
   189e2:	4691      	mov	r9, r2
   189e4:	4698      	mov	r8, r3
   189e6:	e657      	b.n	18698 <__aeabi_ddiv+0xfc>
   189e8:	4658      	mov	r0, fp
   189ea:	f001 f8a1 	bl	19b30 <__clzsi2>
   189ee:	3020      	adds	r0, #32
   189f0:	e640      	b.n	18674 <__aeabi_ddiv+0xd8>
   189f2:	0003      	movs	r3, r0
   189f4:	4652      	mov	r2, sl
   189f6:	3b28      	subs	r3, #40	; 0x28
   189f8:	409a      	lsls	r2, r3
   189fa:	2100      	movs	r1, #0
   189fc:	4693      	mov	fp, r2
   189fe:	e677      	b.n	186f0 <__aeabi_ddiv+0x154>
   18a00:	f001 f896 	bl	19b30 <__clzsi2>
   18a04:	3020      	adds	r0, #32
   18a06:	e65f      	b.n	186c8 <__aeabi_ddiv+0x12c>
   18a08:	4588      	cmp	r8, r1
   18a0a:	d200      	bcs.n	18a0e <__aeabi_ddiv+0x472>
   18a0c:	e6c7      	b.n	1879e <__aeabi_ddiv+0x202>
   18a0e:	464b      	mov	r3, r9
   18a10:	07de      	lsls	r6, r3, #31
   18a12:	085d      	lsrs	r5, r3, #1
   18a14:	4643      	mov	r3, r8
   18a16:	085b      	lsrs	r3, r3, #1
   18a18:	431e      	orrs	r6, r3
   18a1a:	4643      	mov	r3, r8
   18a1c:	07db      	lsls	r3, r3, #31
   18a1e:	469a      	mov	sl, r3
   18a20:	e6c2      	b.n	187a8 <__aeabi_ddiv+0x20c>
   18a22:	2500      	movs	r5, #0
   18a24:	4592      	cmp	sl, r2
   18a26:	d300      	bcc.n	18a2a <__aeabi_ddiv+0x48e>
   18a28:	e733      	b.n	18892 <__aeabi_ddiv+0x2f6>
   18a2a:	9e03      	ldr	r6, [sp, #12]
   18a2c:	4659      	mov	r1, fp
   18a2e:	46b4      	mov	ip, r6
   18a30:	44e2      	add	sl, ip
   18a32:	45b2      	cmp	sl, r6
   18a34:	41ad      	sbcs	r5, r5
   18a36:	426d      	negs	r5, r5
   18a38:	4445      	add	r5, r8
   18a3a:	18eb      	adds	r3, r5, r3
   18a3c:	3901      	subs	r1, #1
   18a3e:	4598      	cmp	r8, r3
   18a40:	d207      	bcs.n	18a52 <__aeabi_ddiv+0x4b6>
   18a42:	4298      	cmp	r0, r3
   18a44:	d900      	bls.n	18a48 <__aeabi_ddiv+0x4ac>
   18a46:	e07f      	b.n	18b48 <__aeabi_ddiv+0x5ac>
   18a48:	d100      	bne.n	18a4c <__aeabi_ddiv+0x4b0>
   18a4a:	e0bc      	b.n	18bc6 <__aeabi_ddiv+0x62a>
   18a4c:	1a1d      	subs	r5, r3, r0
   18a4e:	468b      	mov	fp, r1
   18a50:	e71f      	b.n	18892 <__aeabi_ddiv+0x2f6>
   18a52:	4598      	cmp	r8, r3
   18a54:	d1fa      	bne.n	18a4c <__aeabi_ddiv+0x4b0>
   18a56:	9d03      	ldr	r5, [sp, #12]
   18a58:	4555      	cmp	r5, sl
   18a5a:	d9f2      	bls.n	18a42 <__aeabi_ddiv+0x4a6>
   18a5c:	4643      	mov	r3, r8
   18a5e:	468b      	mov	fp, r1
   18a60:	1a1d      	subs	r5, r3, r0
   18a62:	e716      	b.n	18892 <__aeabi_ddiv+0x2f6>
   18a64:	469b      	mov	fp, r3
   18a66:	e6ca      	b.n	187fe <__aeabi_ddiv+0x262>
   18a68:	0015      	movs	r5, r2
   18a6a:	e6e7      	b.n	1883c <__aeabi_ddiv+0x2a0>
   18a6c:	465a      	mov	r2, fp
   18a6e:	08c9      	lsrs	r1, r1, #3
   18a70:	0752      	lsls	r2, r2, #29
   18a72:	430a      	orrs	r2, r1
   18a74:	055b      	lsls	r3, r3, #21
   18a76:	4690      	mov	r8, r2
   18a78:	0d5c      	lsrs	r4, r3, #21
   18a7a:	465a      	mov	r2, fp
   18a7c:	2301      	movs	r3, #1
   18a7e:	9902      	ldr	r1, [sp, #8]
   18a80:	0252      	lsls	r2, r2, #9
   18a82:	4019      	ands	r1, r3
   18a84:	0b12      	lsrs	r2, r2, #12
   18a86:	468c      	mov	ip, r1
   18a88:	e656      	b.n	18738 <__aeabi_ddiv+0x19c>
   18a8a:	2b00      	cmp	r3, #0
   18a8c:	d100      	bne.n	18a90 <__aeabi_ddiv+0x4f4>
   18a8e:	e76f      	b.n	18970 <__aeabi_ddiv+0x3d4>
   18a90:	4446      	add	r6, r8
   18a92:	1e4a      	subs	r2, r1, #1
   18a94:	45b0      	cmp	r8, r6
   18a96:	d929      	bls.n	18aec <__aeabi_ddiv+0x550>
   18a98:	0011      	movs	r1, r2
   18a9a:	4286      	cmp	r6, r0
   18a9c:	d000      	beq.n	18aa0 <__aeabi_ddiv+0x504>
   18a9e:	e765      	b.n	1896c <__aeabi_ddiv+0x3d0>
   18aa0:	9a03      	ldr	r2, [sp, #12]
   18aa2:	4293      	cmp	r3, r2
   18aa4:	d000      	beq.n	18aa8 <__aeabi_ddiv+0x50c>
   18aa6:	e761      	b.n	1896c <__aeabi_ddiv+0x3d0>
   18aa8:	e762      	b.n	18970 <__aeabi_ddiv+0x3d4>
   18aaa:	2101      	movs	r1, #1
   18aac:	4249      	negs	r1, r1
   18aae:	2001      	movs	r0, #1
   18ab0:	1ac2      	subs	r2, r0, r3
   18ab2:	2a38      	cmp	r2, #56	; 0x38
   18ab4:	dd21      	ble.n	18afa <__aeabi_ddiv+0x55e>
   18ab6:	9b02      	ldr	r3, [sp, #8]
   18ab8:	4003      	ands	r3, r0
   18aba:	469c      	mov	ip, r3
   18abc:	e638      	b.n	18730 <__aeabi_ddiv+0x194>
   18abe:	220f      	movs	r2, #15
   18ac0:	400a      	ands	r2, r1
   18ac2:	2a04      	cmp	r2, #4
   18ac4:	d100      	bne.n	18ac8 <__aeabi_ddiv+0x52c>
   18ac6:	e75b      	b.n	18980 <__aeabi_ddiv+0x3e4>
   18ac8:	000a      	movs	r2, r1
   18aca:	1d11      	adds	r1, r2, #4
   18acc:	4291      	cmp	r1, r2
   18ace:	4192      	sbcs	r2, r2
   18ad0:	4252      	negs	r2, r2
   18ad2:	4493      	add	fp, r2
   18ad4:	e754      	b.n	18980 <__aeabi_ddiv+0x3e4>
   18ad6:	4b47      	ldr	r3, [pc, #284]	; (18bf4 <__aeabi_ddiv+0x658>)
   18ad8:	18e3      	adds	r3, r4, r3
   18ada:	2b00      	cmp	r3, #0
   18adc:	dde5      	ble.n	18aaa <__aeabi_ddiv+0x50e>
   18ade:	2201      	movs	r2, #1
   18ae0:	4252      	negs	r2, r2
   18ae2:	e7f2      	b.n	18aca <__aeabi_ddiv+0x52e>
   18ae4:	001d      	movs	r5, r3
   18ae6:	e6fa      	b.n	188de <__aeabi_ddiv+0x342>
   18ae8:	469a      	mov	sl, r3
   18aea:	e71c      	b.n	18926 <__aeabi_ddiv+0x38a>
   18aec:	42b0      	cmp	r0, r6
   18aee:	d839      	bhi.n	18b64 <__aeabi_ddiv+0x5c8>
   18af0:	d06e      	beq.n	18bd0 <__aeabi_ddiv+0x634>
   18af2:	0011      	movs	r1, r2
   18af4:	e73a      	b.n	1896c <__aeabi_ddiv+0x3d0>
   18af6:	9302      	str	r3, [sp, #8]
   18af8:	e73a      	b.n	18970 <__aeabi_ddiv+0x3d4>
   18afa:	2a1f      	cmp	r2, #31
   18afc:	dc3c      	bgt.n	18b78 <__aeabi_ddiv+0x5dc>
   18afe:	2320      	movs	r3, #32
   18b00:	1a9b      	subs	r3, r3, r2
   18b02:	000c      	movs	r4, r1
   18b04:	4658      	mov	r0, fp
   18b06:	4099      	lsls	r1, r3
   18b08:	4098      	lsls	r0, r3
   18b0a:	1e4b      	subs	r3, r1, #1
   18b0c:	4199      	sbcs	r1, r3
   18b0e:	465b      	mov	r3, fp
   18b10:	40d4      	lsrs	r4, r2
   18b12:	40d3      	lsrs	r3, r2
   18b14:	4320      	orrs	r0, r4
   18b16:	4308      	orrs	r0, r1
   18b18:	001a      	movs	r2, r3
   18b1a:	0743      	lsls	r3, r0, #29
   18b1c:	d009      	beq.n	18b32 <__aeabi_ddiv+0x596>
   18b1e:	230f      	movs	r3, #15
   18b20:	4003      	ands	r3, r0
   18b22:	2b04      	cmp	r3, #4
   18b24:	d005      	beq.n	18b32 <__aeabi_ddiv+0x596>
   18b26:	0001      	movs	r1, r0
   18b28:	1d08      	adds	r0, r1, #4
   18b2a:	4288      	cmp	r0, r1
   18b2c:	419b      	sbcs	r3, r3
   18b2e:	425b      	negs	r3, r3
   18b30:	18d2      	adds	r2, r2, r3
   18b32:	0213      	lsls	r3, r2, #8
   18b34:	d53a      	bpl.n	18bac <__aeabi_ddiv+0x610>
   18b36:	2301      	movs	r3, #1
   18b38:	9a02      	ldr	r2, [sp, #8]
   18b3a:	2401      	movs	r4, #1
   18b3c:	401a      	ands	r2, r3
   18b3e:	2300      	movs	r3, #0
   18b40:	4694      	mov	ip, r2
   18b42:	4698      	mov	r8, r3
   18b44:	2200      	movs	r2, #0
   18b46:	e5f7      	b.n	18738 <__aeabi_ddiv+0x19c>
   18b48:	2102      	movs	r1, #2
   18b4a:	4249      	negs	r1, r1
   18b4c:	468c      	mov	ip, r1
   18b4e:	9d03      	ldr	r5, [sp, #12]
   18b50:	44e3      	add	fp, ip
   18b52:	46ac      	mov	ip, r5
   18b54:	44e2      	add	sl, ip
   18b56:	45aa      	cmp	sl, r5
   18b58:	41ad      	sbcs	r5, r5
   18b5a:	426d      	negs	r5, r5
   18b5c:	4445      	add	r5, r8
   18b5e:	18ed      	adds	r5, r5, r3
   18b60:	1a2d      	subs	r5, r5, r0
   18b62:	e696      	b.n	18892 <__aeabi_ddiv+0x2f6>
   18b64:	1e8a      	subs	r2, r1, #2
   18b66:	9903      	ldr	r1, [sp, #12]
   18b68:	004d      	lsls	r5, r1, #1
   18b6a:	428d      	cmp	r5, r1
   18b6c:	4189      	sbcs	r1, r1
   18b6e:	4249      	negs	r1, r1
   18b70:	4441      	add	r1, r8
   18b72:	1876      	adds	r6, r6, r1
   18b74:	9503      	str	r5, [sp, #12]
   18b76:	e78f      	b.n	18a98 <__aeabi_ddiv+0x4fc>
   18b78:	201f      	movs	r0, #31
   18b7a:	4240      	negs	r0, r0
   18b7c:	1ac3      	subs	r3, r0, r3
   18b7e:	4658      	mov	r0, fp
   18b80:	40d8      	lsrs	r0, r3
   18b82:	0003      	movs	r3, r0
   18b84:	2a20      	cmp	r2, #32
   18b86:	d028      	beq.n	18bda <__aeabi_ddiv+0x63e>
   18b88:	2040      	movs	r0, #64	; 0x40
   18b8a:	465d      	mov	r5, fp
   18b8c:	1a82      	subs	r2, r0, r2
   18b8e:	4095      	lsls	r5, r2
   18b90:	4329      	orrs	r1, r5
   18b92:	1e4a      	subs	r2, r1, #1
   18b94:	4191      	sbcs	r1, r2
   18b96:	4319      	orrs	r1, r3
   18b98:	2307      	movs	r3, #7
   18b9a:	2200      	movs	r2, #0
   18b9c:	400b      	ands	r3, r1
   18b9e:	d009      	beq.n	18bb4 <__aeabi_ddiv+0x618>
   18ba0:	230f      	movs	r3, #15
   18ba2:	2200      	movs	r2, #0
   18ba4:	400b      	ands	r3, r1
   18ba6:	0008      	movs	r0, r1
   18ba8:	2b04      	cmp	r3, #4
   18baa:	d1bd      	bne.n	18b28 <__aeabi_ddiv+0x58c>
   18bac:	0001      	movs	r1, r0
   18bae:	0753      	lsls	r3, r2, #29
   18bb0:	0252      	lsls	r2, r2, #9
   18bb2:	0b12      	lsrs	r2, r2, #12
   18bb4:	08c9      	lsrs	r1, r1, #3
   18bb6:	4319      	orrs	r1, r3
   18bb8:	2301      	movs	r3, #1
   18bba:	4688      	mov	r8, r1
   18bbc:	9902      	ldr	r1, [sp, #8]
   18bbe:	2400      	movs	r4, #0
   18bc0:	4019      	ands	r1, r3
   18bc2:	468c      	mov	ip, r1
   18bc4:	e5b8      	b.n	18738 <__aeabi_ddiv+0x19c>
   18bc6:	4552      	cmp	r2, sl
   18bc8:	d8be      	bhi.n	18b48 <__aeabi_ddiv+0x5ac>
   18bca:	468b      	mov	fp, r1
   18bcc:	2500      	movs	r5, #0
   18bce:	e660      	b.n	18892 <__aeabi_ddiv+0x2f6>
   18bd0:	9d03      	ldr	r5, [sp, #12]
   18bd2:	429d      	cmp	r5, r3
   18bd4:	d3c6      	bcc.n	18b64 <__aeabi_ddiv+0x5c8>
   18bd6:	0011      	movs	r1, r2
   18bd8:	e762      	b.n	18aa0 <__aeabi_ddiv+0x504>
   18bda:	2500      	movs	r5, #0
   18bdc:	e7d8      	b.n	18b90 <__aeabi_ddiv+0x5f4>
   18bde:	2280      	movs	r2, #128	; 0x80
   18be0:	465b      	mov	r3, fp
   18be2:	0312      	lsls	r2, r2, #12
   18be4:	431a      	orrs	r2, r3
   18be6:	9b01      	ldr	r3, [sp, #4]
   18be8:	0312      	lsls	r2, r2, #12
   18bea:	0b12      	lsrs	r2, r2, #12
   18bec:	469c      	mov	ip, r3
   18bee:	4688      	mov	r8, r1
   18bf0:	4c03      	ldr	r4, [pc, #12]	; (18c00 <__aeabi_ddiv+0x664>)
   18bf2:	e5a1      	b.n	18738 <__aeabi_ddiv+0x19c>
   18bf4:	000003ff 	.word	0x000003ff
   18bf8:	feffffff 	.word	0xfeffffff
   18bfc:	000007fe 	.word	0x000007fe
   18c00:	000007ff 	.word	0x000007ff

00018c04 <__eqdf2>:
   18c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c06:	464f      	mov	r7, r9
   18c08:	4646      	mov	r6, r8
   18c0a:	46d6      	mov	lr, sl
   18c0c:	005c      	lsls	r4, r3, #1
   18c0e:	b5c0      	push	{r6, r7, lr}
   18c10:	031f      	lsls	r7, r3, #12
   18c12:	0fdb      	lsrs	r3, r3, #31
   18c14:	469a      	mov	sl, r3
   18c16:	4b17      	ldr	r3, [pc, #92]	; (18c74 <__eqdf2+0x70>)
   18c18:	030e      	lsls	r6, r1, #12
   18c1a:	004d      	lsls	r5, r1, #1
   18c1c:	4684      	mov	ip, r0
   18c1e:	4680      	mov	r8, r0
   18c20:	0b36      	lsrs	r6, r6, #12
   18c22:	0d6d      	lsrs	r5, r5, #21
   18c24:	0fc9      	lsrs	r1, r1, #31
   18c26:	4691      	mov	r9, r2
   18c28:	0b3f      	lsrs	r7, r7, #12
   18c2a:	0d64      	lsrs	r4, r4, #21
   18c2c:	2001      	movs	r0, #1
   18c2e:	429d      	cmp	r5, r3
   18c30:	d008      	beq.n	18c44 <__eqdf2+0x40>
   18c32:	429c      	cmp	r4, r3
   18c34:	d001      	beq.n	18c3a <__eqdf2+0x36>
   18c36:	42a5      	cmp	r5, r4
   18c38:	d00b      	beq.n	18c52 <__eqdf2+0x4e>
   18c3a:	bc1c      	pop	{r2, r3, r4}
   18c3c:	4690      	mov	r8, r2
   18c3e:	4699      	mov	r9, r3
   18c40:	46a2      	mov	sl, r4
   18c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c44:	4663      	mov	r3, ip
   18c46:	4333      	orrs	r3, r6
   18c48:	d1f7      	bne.n	18c3a <__eqdf2+0x36>
   18c4a:	42ac      	cmp	r4, r5
   18c4c:	d1f5      	bne.n	18c3a <__eqdf2+0x36>
   18c4e:	433a      	orrs	r2, r7
   18c50:	d1f3      	bne.n	18c3a <__eqdf2+0x36>
   18c52:	2001      	movs	r0, #1
   18c54:	42be      	cmp	r6, r7
   18c56:	d1f0      	bne.n	18c3a <__eqdf2+0x36>
   18c58:	45c8      	cmp	r8, r9
   18c5a:	d1ee      	bne.n	18c3a <__eqdf2+0x36>
   18c5c:	4551      	cmp	r1, sl
   18c5e:	d007      	beq.n	18c70 <__eqdf2+0x6c>
   18c60:	2d00      	cmp	r5, #0
   18c62:	d1ea      	bne.n	18c3a <__eqdf2+0x36>
   18c64:	4663      	mov	r3, ip
   18c66:	431e      	orrs	r6, r3
   18c68:	0030      	movs	r0, r6
   18c6a:	1e46      	subs	r6, r0, #1
   18c6c:	41b0      	sbcs	r0, r6
   18c6e:	e7e4      	b.n	18c3a <__eqdf2+0x36>
   18c70:	2000      	movs	r0, #0
   18c72:	e7e2      	b.n	18c3a <__eqdf2+0x36>
   18c74:	000007ff 	.word	0x000007ff

00018c78 <__gedf2>:
   18c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c7a:	4645      	mov	r5, r8
   18c7c:	46de      	mov	lr, fp
   18c7e:	4657      	mov	r7, sl
   18c80:	464e      	mov	r6, r9
   18c82:	b5e0      	push	{r5, r6, r7, lr}
   18c84:	031f      	lsls	r7, r3, #12
   18c86:	0b3d      	lsrs	r5, r7, #12
   18c88:	4f2c      	ldr	r7, [pc, #176]	; (18d3c <__gedf2+0xc4>)
   18c8a:	030e      	lsls	r6, r1, #12
   18c8c:	004c      	lsls	r4, r1, #1
   18c8e:	46ab      	mov	fp, r5
   18c90:	005d      	lsls	r5, r3, #1
   18c92:	4684      	mov	ip, r0
   18c94:	0b36      	lsrs	r6, r6, #12
   18c96:	0d64      	lsrs	r4, r4, #21
   18c98:	0fc9      	lsrs	r1, r1, #31
   18c9a:	4690      	mov	r8, r2
   18c9c:	0d6d      	lsrs	r5, r5, #21
   18c9e:	0fdb      	lsrs	r3, r3, #31
   18ca0:	42bc      	cmp	r4, r7
   18ca2:	d02a      	beq.n	18cfa <__gedf2+0x82>
   18ca4:	4f25      	ldr	r7, [pc, #148]	; (18d3c <__gedf2+0xc4>)
   18ca6:	42bd      	cmp	r5, r7
   18ca8:	d02d      	beq.n	18d06 <__gedf2+0x8e>
   18caa:	2c00      	cmp	r4, #0
   18cac:	d10f      	bne.n	18cce <__gedf2+0x56>
   18cae:	4330      	orrs	r0, r6
   18cb0:	0007      	movs	r7, r0
   18cb2:	4681      	mov	r9, r0
   18cb4:	4278      	negs	r0, r7
   18cb6:	4178      	adcs	r0, r7
   18cb8:	b2c0      	uxtb	r0, r0
   18cba:	2d00      	cmp	r5, #0
   18cbc:	d117      	bne.n	18cee <__gedf2+0x76>
   18cbe:	465f      	mov	r7, fp
   18cc0:	433a      	orrs	r2, r7
   18cc2:	d114      	bne.n	18cee <__gedf2+0x76>
   18cc4:	464b      	mov	r3, r9
   18cc6:	2000      	movs	r0, #0
   18cc8:	2b00      	cmp	r3, #0
   18cca:	d00a      	beq.n	18ce2 <__gedf2+0x6a>
   18ccc:	e006      	b.n	18cdc <__gedf2+0x64>
   18cce:	2d00      	cmp	r5, #0
   18cd0:	d102      	bne.n	18cd8 <__gedf2+0x60>
   18cd2:	4658      	mov	r0, fp
   18cd4:	4302      	orrs	r2, r0
   18cd6:	d001      	beq.n	18cdc <__gedf2+0x64>
   18cd8:	4299      	cmp	r1, r3
   18cda:	d018      	beq.n	18d0e <__gedf2+0x96>
   18cdc:	4248      	negs	r0, r1
   18cde:	2101      	movs	r1, #1
   18ce0:	4308      	orrs	r0, r1
   18ce2:	bc3c      	pop	{r2, r3, r4, r5}
   18ce4:	4690      	mov	r8, r2
   18ce6:	4699      	mov	r9, r3
   18ce8:	46a2      	mov	sl, r4
   18cea:	46ab      	mov	fp, r5
   18cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cee:	2800      	cmp	r0, #0
   18cf0:	d0f2      	beq.n	18cd8 <__gedf2+0x60>
   18cf2:	2001      	movs	r0, #1
   18cf4:	3b01      	subs	r3, #1
   18cf6:	4318      	orrs	r0, r3
   18cf8:	e7f3      	b.n	18ce2 <__gedf2+0x6a>
   18cfa:	0037      	movs	r7, r6
   18cfc:	4307      	orrs	r7, r0
   18cfe:	d0d1      	beq.n	18ca4 <__gedf2+0x2c>
   18d00:	2002      	movs	r0, #2
   18d02:	4240      	negs	r0, r0
   18d04:	e7ed      	b.n	18ce2 <__gedf2+0x6a>
   18d06:	465f      	mov	r7, fp
   18d08:	4317      	orrs	r7, r2
   18d0a:	d0ce      	beq.n	18caa <__gedf2+0x32>
   18d0c:	e7f8      	b.n	18d00 <__gedf2+0x88>
   18d0e:	42ac      	cmp	r4, r5
   18d10:	dce4      	bgt.n	18cdc <__gedf2+0x64>
   18d12:	da03      	bge.n	18d1c <__gedf2+0xa4>
   18d14:	1e48      	subs	r0, r1, #1
   18d16:	2101      	movs	r1, #1
   18d18:	4308      	orrs	r0, r1
   18d1a:	e7e2      	b.n	18ce2 <__gedf2+0x6a>
   18d1c:	455e      	cmp	r6, fp
   18d1e:	d8dd      	bhi.n	18cdc <__gedf2+0x64>
   18d20:	d006      	beq.n	18d30 <__gedf2+0xb8>
   18d22:	2000      	movs	r0, #0
   18d24:	455e      	cmp	r6, fp
   18d26:	d2dc      	bcs.n	18ce2 <__gedf2+0x6a>
   18d28:	2301      	movs	r3, #1
   18d2a:	1e48      	subs	r0, r1, #1
   18d2c:	4318      	orrs	r0, r3
   18d2e:	e7d8      	b.n	18ce2 <__gedf2+0x6a>
   18d30:	45c4      	cmp	ip, r8
   18d32:	d8d3      	bhi.n	18cdc <__gedf2+0x64>
   18d34:	2000      	movs	r0, #0
   18d36:	45c4      	cmp	ip, r8
   18d38:	d3f6      	bcc.n	18d28 <__gedf2+0xb0>
   18d3a:	e7d2      	b.n	18ce2 <__gedf2+0x6a>
   18d3c:	000007ff 	.word	0x000007ff

00018d40 <__ledf2>:
   18d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d42:	464e      	mov	r6, r9
   18d44:	4645      	mov	r5, r8
   18d46:	46de      	mov	lr, fp
   18d48:	4657      	mov	r7, sl
   18d4a:	005c      	lsls	r4, r3, #1
   18d4c:	b5e0      	push	{r5, r6, r7, lr}
   18d4e:	031f      	lsls	r7, r3, #12
   18d50:	0fdb      	lsrs	r3, r3, #31
   18d52:	4699      	mov	r9, r3
   18d54:	4b2a      	ldr	r3, [pc, #168]	; (18e00 <__ledf2+0xc0>)
   18d56:	030e      	lsls	r6, r1, #12
   18d58:	004d      	lsls	r5, r1, #1
   18d5a:	0fc9      	lsrs	r1, r1, #31
   18d5c:	4684      	mov	ip, r0
   18d5e:	0b36      	lsrs	r6, r6, #12
   18d60:	0d6d      	lsrs	r5, r5, #21
   18d62:	468b      	mov	fp, r1
   18d64:	4690      	mov	r8, r2
   18d66:	0b3f      	lsrs	r7, r7, #12
   18d68:	0d64      	lsrs	r4, r4, #21
   18d6a:	429d      	cmp	r5, r3
   18d6c:	d020      	beq.n	18db0 <__ledf2+0x70>
   18d6e:	4b24      	ldr	r3, [pc, #144]	; (18e00 <__ledf2+0xc0>)
   18d70:	429c      	cmp	r4, r3
   18d72:	d022      	beq.n	18dba <__ledf2+0x7a>
   18d74:	2d00      	cmp	r5, #0
   18d76:	d112      	bne.n	18d9e <__ledf2+0x5e>
   18d78:	4330      	orrs	r0, r6
   18d7a:	4243      	negs	r3, r0
   18d7c:	4143      	adcs	r3, r0
   18d7e:	b2db      	uxtb	r3, r3
   18d80:	2c00      	cmp	r4, #0
   18d82:	d01f      	beq.n	18dc4 <__ledf2+0x84>
   18d84:	2b00      	cmp	r3, #0
   18d86:	d00c      	beq.n	18da2 <__ledf2+0x62>
   18d88:	464b      	mov	r3, r9
   18d8a:	2001      	movs	r0, #1
   18d8c:	3b01      	subs	r3, #1
   18d8e:	4303      	orrs	r3, r0
   18d90:	0018      	movs	r0, r3
   18d92:	bc3c      	pop	{r2, r3, r4, r5}
   18d94:	4690      	mov	r8, r2
   18d96:	4699      	mov	r9, r3
   18d98:	46a2      	mov	sl, r4
   18d9a:	46ab      	mov	fp, r5
   18d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d9e:	2c00      	cmp	r4, #0
   18da0:	d016      	beq.n	18dd0 <__ledf2+0x90>
   18da2:	45cb      	cmp	fp, r9
   18da4:	d017      	beq.n	18dd6 <__ledf2+0x96>
   18da6:	465b      	mov	r3, fp
   18da8:	4259      	negs	r1, r3
   18daa:	2301      	movs	r3, #1
   18dac:	430b      	orrs	r3, r1
   18dae:	e7ef      	b.n	18d90 <__ledf2+0x50>
   18db0:	0031      	movs	r1, r6
   18db2:	2302      	movs	r3, #2
   18db4:	4301      	orrs	r1, r0
   18db6:	d1eb      	bne.n	18d90 <__ledf2+0x50>
   18db8:	e7d9      	b.n	18d6e <__ledf2+0x2e>
   18dba:	0039      	movs	r1, r7
   18dbc:	2302      	movs	r3, #2
   18dbe:	4311      	orrs	r1, r2
   18dc0:	d1e6      	bne.n	18d90 <__ledf2+0x50>
   18dc2:	e7d7      	b.n	18d74 <__ledf2+0x34>
   18dc4:	433a      	orrs	r2, r7
   18dc6:	d1dd      	bne.n	18d84 <__ledf2+0x44>
   18dc8:	2300      	movs	r3, #0
   18dca:	2800      	cmp	r0, #0
   18dcc:	d0e0      	beq.n	18d90 <__ledf2+0x50>
   18dce:	e7ea      	b.n	18da6 <__ledf2+0x66>
   18dd0:	433a      	orrs	r2, r7
   18dd2:	d1e6      	bne.n	18da2 <__ledf2+0x62>
   18dd4:	e7e7      	b.n	18da6 <__ledf2+0x66>
   18dd6:	42a5      	cmp	r5, r4
   18dd8:	dce5      	bgt.n	18da6 <__ledf2+0x66>
   18dda:	db05      	blt.n	18de8 <__ledf2+0xa8>
   18ddc:	42be      	cmp	r6, r7
   18dde:	d8e2      	bhi.n	18da6 <__ledf2+0x66>
   18de0:	d007      	beq.n	18df2 <__ledf2+0xb2>
   18de2:	2300      	movs	r3, #0
   18de4:	42be      	cmp	r6, r7
   18de6:	d2d3      	bcs.n	18d90 <__ledf2+0x50>
   18de8:	4659      	mov	r1, fp
   18dea:	2301      	movs	r3, #1
   18dec:	3901      	subs	r1, #1
   18dee:	430b      	orrs	r3, r1
   18df0:	e7ce      	b.n	18d90 <__ledf2+0x50>
   18df2:	45c4      	cmp	ip, r8
   18df4:	d8d7      	bhi.n	18da6 <__ledf2+0x66>
   18df6:	2300      	movs	r3, #0
   18df8:	45c4      	cmp	ip, r8
   18dfa:	d3f5      	bcc.n	18de8 <__ledf2+0xa8>
   18dfc:	e7c8      	b.n	18d90 <__ledf2+0x50>
   18dfe:	46c0      	nop			; (mov r8, r8)
   18e00:	000007ff 	.word	0x000007ff

00018e04 <__aeabi_dmul>:
   18e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e06:	4657      	mov	r7, sl
   18e08:	4645      	mov	r5, r8
   18e0a:	46de      	mov	lr, fp
   18e0c:	464e      	mov	r6, r9
   18e0e:	b5e0      	push	{r5, r6, r7, lr}
   18e10:	030c      	lsls	r4, r1, #12
   18e12:	4698      	mov	r8, r3
   18e14:	004e      	lsls	r6, r1, #1
   18e16:	0b23      	lsrs	r3, r4, #12
   18e18:	b087      	sub	sp, #28
   18e1a:	0007      	movs	r7, r0
   18e1c:	4692      	mov	sl, r2
   18e1e:	469b      	mov	fp, r3
   18e20:	0d76      	lsrs	r6, r6, #21
   18e22:	0fcd      	lsrs	r5, r1, #31
   18e24:	2e00      	cmp	r6, #0
   18e26:	d06b      	beq.n	18f00 <__aeabi_dmul+0xfc>
   18e28:	4b6d      	ldr	r3, [pc, #436]	; (18fe0 <__aeabi_dmul+0x1dc>)
   18e2a:	429e      	cmp	r6, r3
   18e2c:	d035      	beq.n	18e9a <__aeabi_dmul+0x96>
   18e2e:	2480      	movs	r4, #128	; 0x80
   18e30:	465b      	mov	r3, fp
   18e32:	0f42      	lsrs	r2, r0, #29
   18e34:	0424      	lsls	r4, r4, #16
   18e36:	00db      	lsls	r3, r3, #3
   18e38:	4314      	orrs	r4, r2
   18e3a:	431c      	orrs	r4, r3
   18e3c:	00c3      	lsls	r3, r0, #3
   18e3e:	4699      	mov	r9, r3
   18e40:	4b68      	ldr	r3, [pc, #416]	; (18fe4 <__aeabi_dmul+0x1e0>)
   18e42:	46a3      	mov	fp, r4
   18e44:	469c      	mov	ip, r3
   18e46:	2300      	movs	r3, #0
   18e48:	2700      	movs	r7, #0
   18e4a:	4466      	add	r6, ip
   18e4c:	9302      	str	r3, [sp, #8]
   18e4e:	4643      	mov	r3, r8
   18e50:	031c      	lsls	r4, r3, #12
   18e52:	005a      	lsls	r2, r3, #1
   18e54:	0fdb      	lsrs	r3, r3, #31
   18e56:	4650      	mov	r0, sl
   18e58:	0b24      	lsrs	r4, r4, #12
   18e5a:	0d52      	lsrs	r2, r2, #21
   18e5c:	4698      	mov	r8, r3
   18e5e:	d100      	bne.n	18e62 <__aeabi_dmul+0x5e>
   18e60:	e076      	b.n	18f50 <__aeabi_dmul+0x14c>
   18e62:	4b5f      	ldr	r3, [pc, #380]	; (18fe0 <__aeabi_dmul+0x1dc>)
   18e64:	429a      	cmp	r2, r3
   18e66:	d06d      	beq.n	18f44 <__aeabi_dmul+0x140>
   18e68:	2380      	movs	r3, #128	; 0x80
   18e6a:	0f41      	lsrs	r1, r0, #29
   18e6c:	041b      	lsls	r3, r3, #16
   18e6e:	430b      	orrs	r3, r1
   18e70:	495c      	ldr	r1, [pc, #368]	; (18fe4 <__aeabi_dmul+0x1e0>)
   18e72:	00e4      	lsls	r4, r4, #3
   18e74:	468c      	mov	ip, r1
   18e76:	431c      	orrs	r4, r3
   18e78:	00c3      	lsls	r3, r0, #3
   18e7a:	2000      	movs	r0, #0
   18e7c:	4462      	add	r2, ip
   18e7e:	4641      	mov	r1, r8
   18e80:	18b6      	adds	r6, r6, r2
   18e82:	4069      	eors	r1, r5
   18e84:	1c72      	adds	r2, r6, #1
   18e86:	9101      	str	r1, [sp, #4]
   18e88:	4694      	mov	ip, r2
   18e8a:	4307      	orrs	r7, r0
   18e8c:	2f0f      	cmp	r7, #15
   18e8e:	d900      	bls.n	18e92 <__aeabi_dmul+0x8e>
   18e90:	e0b0      	b.n	18ff4 <__aeabi_dmul+0x1f0>
   18e92:	4a55      	ldr	r2, [pc, #340]	; (18fe8 <__aeabi_dmul+0x1e4>)
   18e94:	00bf      	lsls	r7, r7, #2
   18e96:	59d2      	ldr	r2, [r2, r7]
   18e98:	4697      	mov	pc, r2
   18e9a:	465b      	mov	r3, fp
   18e9c:	4303      	orrs	r3, r0
   18e9e:	4699      	mov	r9, r3
   18ea0:	d000      	beq.n	18ea4 <__aeabi_dmul+0xa0>
   18ea2:	e087      	b.n	18fb4 <__aeabi_dmul+0x1b0>
   18ea4:	2300      	movs	r3, #0
   18ea6:	469b      	mov	fp, r3
   18ea8:	3302      	adds	r3, #2
   18eaa:	2708      	movs	r7, #8
   18eac:	9302      	str	r3, [sp, #8]
   18eae:	e7ce      	b.n	18e4e <__aeabi_dmul+0x4a>
   18eb0:	4642      	mov	r2, r8
   18eb2:	9201      	str	r2, [sp, #4]
   18eb4:	2802      	cmp	r0, #2
   18eb6:	d067      	beq.n	18f88 <__aeabi_dmul+0x184>
   18eb8:	2803      	cmp	r0, #3
   18eba:	d100      	bne.n	18ebe <__aeabi_dmul+0xba>
   18ebc:	e20e      	b.n	192dc <__aeabi_dmul+0x4d8>
   18ebe:	2801      	cmp	r0, #1
   18ec0:	d000      	beq.n	18ec4 <__aeabi_dmul+0xc0>
   18ec2:	e162      	b.n	1918a <__aeabi_dmul+0x386>
   18ec4:	2300      	movs	r3, #0
   18ec6:	2400      	movs	r4, #0
   18ec8:	2200      	movs	r2, #0
   18eca:	4699      	mov	r9, r3
   18ecc:	9901      	ldr	r1, [sp, #4]
   18ece:	4001      	ands	r1, r0
   18ed0:	b2cd      	uxtb	r5, r1
   18ed2:	2100      	movs	r1, #0
   18ed4:	0312      	lsls	r2, r2, #12
   18ed6:	0d0b      	lsrs	r3, r1, #20
   18ed8:	0b12      	lsrs	r2, r2, #12
   18eda:	051b      	lsls	r3, r3, #20
   18edc:	4313      	orrs	r3, r2
   18ede:	4a43      	ldr	r2, [pc, #268]	; (18fec <__aeabi_dmul+0x1e8>)
   18ee0:	0524      	lsls	r4, r4, #20
   18ee2:	4013      	ands	r3, r2
   18ee4:	431c      	orrs	r4, r3
   18ee6:	0064      	lsls	r4, r4, #1
   18ee8:	07ed      	lsls	r5, r5, #31
   18eea:	0864      	lsrs	r4, r4, #1
   18eec:	432c      	orrs	r4, r5
   18eee:	4648      	mov	r0, r9
   18ef0:	0021      	movs	r1, r4
   18ef2:	b007      	add	sp, #28
   18ef4:	bc3c      	pop	{r2, r3, r4, r5}
   18ef6:	4690      	mov	r8, r2
   18ef8:	4699      	mov	r9, r3
   18efa:	46a2      	mov	sl, r4
   18efc:	46ab      	mov	fp, r5
   18efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f00:	4303      	orrs	r3, r0
   18f02:	4699      	mov	r9, r3
   18f04:	d04f      	beq.n	18fa6 <__aeabi_dmul+0x1a2>
   18f06:	465b      	mov	r3, fp
   18f08:	2b00      	cmp	r3, #0
   18f0a:	d100      	bne.n	18f0e <__aeabi_dmul+0x10a>
   18f0c:	e189      	b.n	19222 <__aeabi_dmul+0x41e>
   18f0e:	4658      	mov	r0, fp
   18f10:	f000 fe0e 	bl	19b30 <__clzsi2>
   18f14:	0003      	movs	r3, r0
   18f16:	3b0b      	subs	r3, #11
   18f18:	2b1c      	cmp	r3, #28
   18f1a:	dd00      	ble.n	18f1e <__aeabi_dmul+0x11a>
   18f1c:	e17a      	b.n	19214 <__aeabi_dmul+0x410>
   18f1e:	221d      	movs	r2, #29
   18f20:	1ad3      	subs	r3, r2, r3
   18f22:	003a      	movs	r2, r7
   18f24:	0001      	movs	r1, r0
   18f26:	465c      	mov	r4, fp
   18f28:	40da      	lsrs	r2, r3
   18f2a:	3908      	subs	r1, #8
   18f2c:	408c      	lsls	r4, r1
   18f2e:	0013      	movs	r3, r2
   18f30:	408f      	lsls	r7, r1
   18f32:	4323      	orrs	r3, r4
   18f34:	469b      	mov	fp, r3
   18f36:	46b9      	mov	r9, r7
   18f38:	2300      	movs	r3, #0
   18f3a:	4e2d      	ldr	r6, [pc, #180]	; (18ff0 <__aeabi_dmul+0x1ec>)
   18f3c:	2700      	movs	r7, #0
   18f3e:	1a36      	subs	r6, r6, r0
   18f40:	9302      	str	r3, [sp, #8]
   18f42:	e784      	b.n	18e4e <__aeabi_dmul+0x4a>
   18f44:	4653      	mov	r3, sl
   18f46:	4323      	orrs	r3, r4
   18f48:	d12a      	bne.n	18fa0 <__aeabi_dmul+0x19c>
   18f4a:	2400      	movs	r4, #0
   18f4c:	2002      	movs	r0, #2
   18f4e:	e796      	b.n	18e7e <__aeabi_dmul+0x7a>
   18f50:	4653      	mov	r3, sl
   18f52:	4323      	orrs	r3, r4
   18f54:	d020      	beq.n	18f98 <__aeabi_dmul+0x194>
   18f56:	2c00      	cmp	r4, #0
   18f58:	d100      	bne.n	18f5c <__aeabi_dmul+0x158>
   18f5a:	e157      	b.n	1920c <__aeabi_dmul+0x408>
   18f5c:	0020      	movs	r0, r4
   18f5e:	f000 fde7 	bl	19b30 <__clzsi2>
   18f62:	0003      	movs	r3, r0
   18f64:	3b0b      	subs	r3, #11
   18f66:	2b1c      	cmp	r3, #28
   18f68:	dd00      	ble.n	18f6c <__aeabi_dmul+0x168>
   18f6a:	e149      	b.n	19200 <__aeabi_dmul+0x3fc>
   18f6c:	211d      	movs	r1, #29
   18f6e:	1acb      	subs	r3, r1, r3
   18f70:	4651      	mov	r1, sl
   18f72:	0002      	movs	r2, r0
   18f74:	40d9      	lsrs	r1, r3
   18f76:	4653      	mov	r3, sl
   18f78:	3a08      	subs	r2, #8
   18f7a:	4094      	lsls	r4, r2
   18f7c:	4093      	lsls	r3, r2
   18f7e:	430c      	orrs	r4, r1
   18f80:	4a1b      	ldr	r2, [pc, #108]	; (18ff0 <__aeabi_dmul+0x1ec>)
   18f82:	1a12      	subs	r2, r2, r0
   18f84:	2000      	movs	r0, #0
   18f86:	e77a      	b.n	18e7e <__aeabi_dmul+0x7a>
   18f88:	2501      	movs	r5, #1
   18f8a:	9b01      	ldr	r3, [sp, #4]
   18f8c:	4c14      	ldr	r4, [pc, #80]	; (18fe0 <__aeabi_dmul+0x1dc>)
   18f8e:	401d      	ands	r5, r3
   18f90:	2300      	movs	r3, #0
   18f92:	2200      	movs	r2, #0
   18f94:	4699      	mov	r9, r3
   18f96:	e79c      	b.n	18ed2 <__aeabi_dmul+0xce>
   18f98:	2400      	movs	r4, #0
   18f9a:	2200      	movs	r2, #0
   18f9c:	2001      	movs	r0, #1
   18f9e:	e76e      	b.n	18e7e <__aeabi_dmul+0x7a>
   18fa0:	4653      	mov	r3, sl
   18fa2:	2003      	movs	r0, #3
   18fa4:	e76b      	b.n	18e7e <__aeabi_dmul+0x7a>
   18fa6:	2300      	movs	r3, #0
   18fa8:	469b      	mov	fp, r3
   18faa:	3301      	adds	r3, #1
   18fac:	2704      	movs	r7, #4
   18fae:	2600      	movs	r6, #0
   18fb0:	9302      	str	r3, [sp, #8]
   18fb2:	e74c      	b.n	18e4e <__aeabi_dmul+0x4a>
   18fb4:	2303      	movs	r3, #3
   18fb6:	4681      	mov	r9, r0
   18fb8:	270c      	movs	r7, #12
   18fba:	9302      	str	r3, [sp, #8]
   18fbc:	e747      	b.n	18e4e <__aeabi_dmul+0x4a>
   18fbe:	2280      	movs	r2, #128	; 0x80
   18fc0:	2300      	movs	r3, #0
   18fc2:	2500      	movs	r5, #0
   18fc4:	0312      	lsls	r2, r2, #12
   18fc6:	4699      	mov	r9, r3
   18fc8:	4c05      	ldr	r4, [pc, #20]	; (18fe0 <__aeabi_dmul+0x1dc>)
   18fca:	e782      	b.n	18ed2 <__aeabi_dmul+0xce>
   18fcc:	465c      	mov	r4, fp
   18fce:	464b      	mov	r3, r9
   18fd0:	9802      	ldr	r0, [sp, #8]
   18fd2:	e76f      	b.n	18eb4 <__aeabi_dmul+0xb0>
   18fd4:	465c      	mov	r4, fp
   18fd6:	464b      	mov	r3, r9
   18fd8:	9501      	str	r5, [sp, #4]
   18fda:	9802      	ldr	r0, [sp, #8]
   18fdc:	e76a      	b.n	18eb4 <__aeabi_dmul+0xb0>
   18fde:	46c0      	nop			; (mov r8, r8)
   18fe0:	000007ff 	.word	0x000007ff
   18fe4:	fffffc01 	.word	0xfffffc01
   18fe8:	0001fc34 	.word	0x0001fc34
   18fec:	800fffff 	.word	0x800fffff
   18ff0:	fffffc0d 	.word	0xfffffc0d
   18ff4:	464a      	mov	r2, r9
   18ff6:	4649      	mov	r1, r9
   18ff8:	0c17      	lsrs	r7, r2, #16
   18ffa:	0c1a      	lsrs	r2, r3, #16
   18ffc:	041b      	lsls	r3, r3, #16
   18ffe:	0c1b      	lsrs	r3, r3, #16
   19000:	0408      	lsls	r0, r1, #16
   19002:	0019      	movs	r1, r3
   19004:	0c00      	lsrs	r0, r0, #16
   19006:	4341      	muls	r1, r0
   19008:	0015      	movs	r5, r2
   1900a:	4688      	mov	r8, r1
   1900c:	0019      	movs	r1, r3
   1900e:	437d      	muls	r5, r7
   19010:	4379      	muls	r1, r7
   19012:	9503      	str	r5, [sp, #12]
   19014:	4689      	mov	r9, r1
   19016:	0029      	movs	r1, r5
   19018:	0015      	movs	r5, r2
   1901a:	4345      	muls	r5, r0
   1901c:	444d      	add	r5, r9
   1901e:	9502      	str	r5, [sp, #8]
   19020:	4645      	mov	r5, r8
   19022:	0c2d      	lsrs	r5, r5, #16
   19024:	46aa      	mov	sl, r5
   19026:	9d02      	ldr	r5, [sp, #8]
   19028:	4455      	add	r5, sl
   1902a:	45a9      	cmp	r9, r5
   1902c:	d906      	bls.n	1903c <__aeabi_dmul+0x238>
   1902e:	468a      	mov	sl, r1
   19030:	2180      	movs	r1, #128	; 0x80
   19032:	0249      	lsls	r1, r1, #9
   19034:	4689      	mov	r9, r1
   19036:	44ca      	add	sl, r9
   19038:	4651      	mov	r1, sl
   1903a:	9103      	str	r1, [sp, #12]
   1903c:	0c29      	lsrs	r1, r5, #16
   1903e:	9104      	str	r1, [sp, #16]
   19040:	4641      	mov	r1, r8
   19042:	0409      	lsls	r1, r1, #16
   19044:	042d      	lsls	r5, r5, #16
   19046:	0c09      	lsrs	r1, r1, #16
   19048:	4688      	mov	r8, r1
   1904a:	0029      	movs	r1, r5
   1904c:	0c25      	lsrs	r5, r4, #16
   1904e:	0424      	lsls	r4, r4, #16
   19050:	4441      	add	r1, r8
   19052:	0c24      	lsrs	r4, r4, #16
   19054:	9105      	str	r1, [sp, #20]
   19056:	0021      	movs	r1, r4
   19058:	4341      	muls	r1, r0
   1905a:	4688      	mov	r8, r1
   1905c:	0021      	movs	r1, r4
   1905e:	4379      	muls	r1, r7
   19060:	468a      	mov	sl, r1
   19062:	4368      	muls	r0, r5
   19064:	4641      	mov	r1, r8
   19066:	4450      	add	r0, sl
   19068:	4681      	mov	r9, r0
   1906a:	0c08      	lsrs	r0, r1, #16
   1906c:	4448      	add	r0, r9
   1906e:	436f      	muls	r7, r5
   19070:	4582      	cmp	sl, r0
   19072:	d903      	bls.n	1907c <__aeabi_dmul+0x278>
   19074:	2180      	movs	r1, #128	; 0x80
   19076:	0249      	lsls	r1, r1, #9
   19078:	4689      	mov	r9, r1
   1907a:	444f      	add	r7, r9
   1907c:	0c01      	lsrs	r1, r0, #16
   1907e:	4689      	mov	r9, r1
   19080:	0039      	movs	r1, r7
   19082:	4449      	add	r1, r9
   19084:	9102      	str	r1, [sp, #8]
   19086:	4641      	mov	r1, r8
   19088:	040f      	lsls	r7, r1, #16
   1908a:	9904      	ldr	r1, [sp, #16]
   1908c:	0c3f      	lsrs	r7, r7, #16
   1908e:	4688      	mov	r8, r1
   19090:	0400      	lsls	r0, r0, #16
   19092:	19c0      	adds	r0, r0, r7
   19094:	4480      	add	r8, r0
   19096:	4641      	mov	r1, r8
   19098:	9104      	str	r1, [sp, #16]
   1909a:	4659      	mov	r1, fp
   1909c:	0c0f      	lsrs	r7, r1, #16
   1909e:	0409      	lsls	r1, r1, #16
   190a0:	0c09      	lsrs	r1, r1, #16
   190a2:	4688      	mov	r8, r1
   190a4:	4359      	muls	r1, r3
   190a6:	468a      	mov	sl, r1
   190a8:	0039      	movs	r1, r7
   190aa:	4351      	muls	r1, r2
   190ac:	4689      	mov	r9, r1
   190ae:	4641      	mov	r1, r8
   190b0:	434a      	muls	r2, r1
   190b2:	4651      	mov	r1, sl
   190b4:	0c09      	lsrs	r1, r1, #16
   190b6:	468b      	mov	fp, r1
   190b8:	437b      	muls	r3, r7
   190ba:	18d2      	adds	r2, r2, r3
   190bc:	445a      	add	r2, fp
   190be:	4293      	cmp	r3, r2
   190c0:	d903      	bls.n	190ca <__aeabi_dmul+0x2c6>
   190c2:	2380      	movs	r3, #128	; 0x80
   190c4:	025b      	lsls	r3, r3, #9
   190c6:	469b      	mov	fp, r3
   190c8:	44d9      	add	r9, fp
   190ca:	4651      	mov	r1, sl
   190cc:	0409      	lsls	r1, r1, #16
   190ce:	0c09      	lsrs	r1, r1, #16
   190d0:	468a      	mov	sl, r1
   190d2:	4641      	mov	r1, r8
   190d4:	4361      	muls	r1, r4
   190d6:	437c      	muls	r4, r7
   190d8:	0c13      	lsrs	r3, r2, #16
   190da:	0412      	lsls	r2, r2, #16
   190dc:	444b      	add	r3, r9
   190de:	4452      	add	r2, sl
   190e0:	46a1      	mov	r9, r4
   190e2:	468a      	mov	sl, r1
   190e4:	003c      	movs	r4, r7
   190e6:	4641      	mov	r1, r8
   190e8:	436c      	muls	r4, r5
   190ea:	434d      	muls	r5, r1
   190ec:	4651      	mov	r1, sl
   190ee:	444d      	add	r5, r9
   190f0:	0c0f      	lsrs	r7, r1, #16
   190f2:	197d      	adds	r5, r7, r5
   190f4:	45a9      	cmp	r9, r5
   190f6:	d903      	bls.n	19100 <__aeabi_dmul+0x2fc>
   190f8:	2180      	movs	r1, #128	; 0x80
   190fa:	0249      	lsls	r1, r1, #9
   190fc:	4688      	mov	r8, r1
   190fe:	4444      	add	r4, r8
   19100:	9f04      	ldr	r7, [sp, #16]
   19102:	9903      	ldr	r1, [sp, #12]
   19104:	46b8      	mov	r8, r7
   19106:	4441      	add	r1, r8
   19108:	468b      	mov	fp, r1
   1910a:	4583      	cmp	fp, r0
   1910c:	4180      	sbcs	r0, r0
   1910e:	4241      	negs	r1, r0
   19110:	4688      	mov	r8, r1
   19112:	4651      	mov	r1, sl
   19114:	0408      	lsls	r0, r1, #16
   19116:	042f      	lsls	r7, r5, #16
   19118:	0c00      	lsrs	r0, r0, #16
   1911a:	183f      	adds	r7, r7, r0
   1911c:	4658      	mov	r0, fp
   1911e:	9902      	ldr	r1, [sp, #8]
   19120:	1810      	adds	r0, r2, r0
   19122:	4689      	mov	r9, r1
   19124:	4290      	cmp	r0, r2
   19126:	4192      	sbcs	r2, r2
   19128:	444f      	add	r7, r9
   1912a:	46ba      	mov	sl, r7
   1912c:	4252      	negs	r2, r2
   1912e:	4699      	mov	r9, r3
   19130:	4693      	mov	fp, r2
   19132:	44c2      	add	sl, r8
   19134:	44d1      	add	r9, sl
   19136:	44cb      	add	fp, r9
   19138:	428f      	cmp	r7, r1
   1913a:	41bf      	sbcs	r7, r7
   1913c:	45c2      	cmp	sl, r8
   1913e:	4189      	sbcs	r1, r1
   19140:	4599      	cmp	r9, r3
   19142:	419b      	sbcs	r3, r3
   19144:	4593      	cmp	fp, r2
   19146:	4192      	sbcs	r2, r2
   19148:	427f      	negs	r7, r7
   1914a:	4249      	negs	r1, r1
   1914c:	0c2d      	lsrs	r5, r5, #16
   1914e:	4252      	negs	r2, r2
   19150:	430f      	orrs	r7, r1
   19152:	425b      	negs	r3, r3
   19154:	4313      	orrs	r3, r2
   19156:	197f      	adds	r7, r7, r5
   19158:	18ff      	adds	r7, r7, r3
   1915a:	465b      	mov	r3, fp
   1915c:	193c      	adds	r4, r7, r4
   1915e:	0ddb      	lsrs	r3, r3, #23
   19160:	9a05      	ldr	r2, [sp, #20]
   19162:	0264      	lsls	r4, r4, #9
   19164:	431c      	orrs	r4, r3
   19166:	0243      	lsls	r3, r0, #9
   19168:	4313      	orrs	r3, r2
   1916a:	1e5d      	subs	r5, r3, #1
   1916c:	41ab      	sbcs	r3, r5
   1916e:	465a      	mov	r2, fp
   19170:	0dc0      	lsrs	r0, r0, #23
   19172:	4303      	orrs	r3, r0
   19174:	0252      	lsls	r2, r2, #9
   19176:	4313      	orrs	r3, r2
   19178:	01e2      	lsls	r2, r4, #7
   1917a:	d556      	bpl.n	1922a <__aeabi_dmul+0x426>
   1917c:	2001      	movs	r0, #1
   1917e:	085a      	lsrs	r2, r3, #1
   19180:	4003      	ands	r3, r0
   19182:	4313      	orrs	r3, r2
   19184:	07e2      	lsls	r2, r4, #31
   19186:	4313      	orrs	r3, r2
   19188:	0864      	lsrs	r4, r4, #1
   1918a:	485a      	ldr	r0, [pc, #360]	; (192f4 <__aeabi_dmul+0x4f0>)
   1918c:	4460      	add	r0, ip
   1918e:	2800      	cmp	r0, #0
   19190:	dd4d      	ble.n	1922e <__aeabi_dmul+0x42a>
   19192:	075a      	lsls	r2, r3, #29
   19194:	d009      	beq.n	191aa <__aeabi_dmul+0x3a6>
   19196:	220f      	movs	r2, #15
   19198:	401a      	ands	r2, r3
   1919a:	2a04      	cmp	r2, #4
   1919c:	d005      	beq.n	191aa <__aeabi_dmul+0x3a6>
   1919e:	1d1a      	adds	r2, r3, #4
   191a0:	429a      	cmp	r2, r3
   191a2:	419b      	sbcs	r3, r3
   191a4:	425b      	negs	r3, r3
   191a6:	18e4      	adds	r4, r4, r3
   191a8:	0013      	movs	r3, r2
   191aa:	01e2      	lsls	r2, r4, #7
   191ac:	d504      	bpl.n	191b8 <__aeabi_dmul+0x3b4>
   191ae:	2080      	movs	r0, #128	; 0x80
   191b0:	4a51      	ldr	r2, [pc, #324]	; (192f8 <__aeabi_dmul+0x4f4>)
   191b2:	00c0      	lsls	r0, r0, #3
   191b4:	4014      	ands	r4, r2
   191b6:	4460      	add	r0, ip
   191b8:	4a50      	ldr	r2, [pc, #320]	; (192fc <__aeabi_dmul+0x4f8>)
   191ba:	4290      	cmp	r0, r2
   191bc:	dd00      	ble.n	191c0 <__aeabi_dmul+0x3bc>
   191be:	e6e3      	b.n	18f88 <__aeabi_dmul+0x184>
   191c0:	2501      	movs	r5, #1
   191c2:	08db      	lsrs	r3, r3, #3
   191c4:	0762      	lsls	r2, r4, #29
   191c6:	431a      	orrs	r2, r3
   191c8:	0264      	lsls	r4, r4, #9
   191ca:	9b01      	ldr	r3, [sp, #4]
   191cc:	4691      	mov	r9, r2
   191ce:	0b22      	lsrs	r2, r4, #12
   191d0:	0544      	lsls	r4, r0, #21
   191d2:	0d64      	lsrs	r4, r4, #21
   191d4:	401d      	ands	r5, r3
   191d6:	e67c      	b.n	18ed2 <__aeabi_dmul+0xce>
   191d8:	2280      	movs	r2, #128	; 0x80
   191da:	4659      	mov	r1, fp
   191dc:	0312      	lsls	r2, r2, #12
   191de:	4211      	tst	r1, r2
   191e0:	d008      	beq.n	191f4 <__aeabi_dmul+0x3f0>
   191e2:	4214      	tst	r4, r2
   191e4:	d106      	bne.n	191f4 <__aeabi_dmul+0x3f0>
   191e6:	4322      	orrs	r2, r4
   191e8:	0312      	lsls	r2, r2, #12
   191ea:	0b12      	lsrs	r2, r2, #12
   191ec:	4645      	mov	r5, r8
   191ee:	4699      	mov	r9, r3
   191f0:	4c43      	ldr	r4, [pc, #268]	; (19300 <__aeabi_dmul+0x4fc>)
   191f2:	e66e      	b.n	18ed2 <__aeabi_dmul+0xce>
   191f4:	465b      	mov	r3, fp
   191f6:	431a      	orrs	r2, r3
   191f8:	0312      	lsls	r2, r2, #12
   191fa:	0b12      	lsrs	r2, r2, #12
   191fc:	4c40      	ldr	r4, [pc, #256]	; (19300 <__aeabi_dmul+0x4fc>)
   191fe:	e668      	b.n	18ed2 <__aeabi_dmul+0xce>
   19200:	0003      	movs	r3, r0
   19202:	4654      	mov	r4, sl
   19204:	3b28      	subs	r3, #40	; 0x28
   19206:	409c      	lsls	r4, r3
   19208:	2300      	movs	r3, #0
   1920a:	e6b9      	b.n	18f80 <__aeabi_dmul+0x17c>
   1920c:	f000 fc90 	bl	19b30 <__clzsi2>
   19210:	3020      	adds	r0, #32
   19212:	e6a6      	b.n	18f62 <__aeabi_dmul+0x15e>
   19214:	0003      	movs	r3, r0
   19216:	3b28      	subs	r3, #40	; 0x28
   19218:	409f      	lsls	r7, r3
   1921a:	2300      	movs	r3, #0
   1921c:	46bb      	mov	fp, r7
   1921e:	4699      	mov	r9, r3
   19220:	e68a      	b.n	18f38 <__aeabi_dmul+0x134>
   19222:	f000 fc85 	bl	19b30 <__clzsi2>
   19226:	3020      	adds	r0, #32
   19228:	e674      	b.n	18f14 <__aeabi_dmul+0x110>
   1922a:	46b4      	mov	ip, r6
   1922c:	e7ad      	b.n	1918a <__aeabi_dmul+0x386>
   1922e:	2501      	movs	r5, #1
   19230:	1a2a      	subs	r2, r5, r0
   19232:	2a38      	cmp	r2, #56	; 0x38
   19234:	dd06      	ble.n	19244 <__aeabi_dmul+0x440>
   19236:	9b01      	ldr	r3, [sp, #4]
   19238:	2400      	movs	r4, #0
   1923a:	401d      	ands	r5, r3
   1923c:	2300      	movs	r3, #0
   1923e:	2200      	movs	r2, #0
   19240:	4699      	mov	r9, r3
   19242:	e646      	b.n	18ed2 <__aeabi_dmul+0xce>
   19244:	2a1f      	cmp	r2, #31
   19246:	dc21      	bgt.n	1928c <__aeabi_dmul+0x488>
   19248:	2520      	movs	r5, #32
   1924a:	0020      	movs	r0, r4
   1924c:	1aad      	subs	r5, r5, r2
   1924e:	001e      	movs	r6, r3
   19250:	40ab      	lsls	r3, r5
   19252:	40a8      	lsls	r0, r5
   19254:	40d6      	lsrs	r6, r2
   19256:	1e5d      	subs	r5, r3, #1
   19258:	41ab      	sbcs	r3, r5
   1925a:	4330      	orrs	r0, r6
   1925c:	4318      	orrs	r0, r3
   1925e:	40d4      	lsrs	r4, r2
   19260:	0743      	lsls	r3, r0, #29
   19262:	d009      	beq.n	19278 <__aeabi_dmul+0x474>
   19264:	230f      	movs	r3, #15
   19266:	4003      	ands	r3, r0
   19268:	2b04      	cmp	r3, #4
   1926a:	d005      	beq.n	19278 <__aeabi_dmul+0x474>
   1926c:	0003      	movs	r3, r0
   1926e:	1d18      	adds	r0, r3, #4
   19270:	4298      	cmp	r0, r3
   19272:	419b      	sbcs	r3, r3
   19274:	425b      	negs	r3, r3
   19276:	18e4      	adds	r4, r4, r3
   19278:	0223      	lsls	r3, r4, #8
   1927a:	d521      	bpl.n	192c0 <__aeabi_dmul+0x4bc>
   1927c:	2501      	movs	r5, #1
   1927e:	9b01      	ldr	r3, [sp, #4]
   19280:	2401      	movs	r4, #1
   19282:	401d      	ands	r5, r3
   19284:	2300      	movs	r3, #0
   19286:	2200      	movs	r2, #0
   19288:	4699      	mov	r9, r3
   1928a:	e622      	b.n	18ed2 <__aeabi_dmul+0xce>
   1928c:	251f      	movs	r5, #31
   1928e:	0021      	movs	r1, r4
   19290:	426d      	negs	r5, r5
   19292:	1a28      	subs	r0, r5, r0
   19294:	40c1      	lsrs	r1, r0
   19296:	0008      	movs	r0, r1
   19298:	2a20      	cmp	r2, #32
   1929a:	d01d      	beq.n	192d8 <__aeabi_dmul+0x4d4>
   1929c:	355f      	adds	r5, #95	; 0x5f
   1929e:	1aaa      	subs	r2, r5, r2
   192a0:	4094      	lsls	r4, r2
   192a2:	4323      	orrs	r3, r4
   192a4:	1e5c      	subs	r4, r3, #1
   192a6:	41a3      	sbcs	r3, r4
   192a8:	2507      	movs	r5, #7
   192aa:	4303      	orrs	r3, r0
   192ac:	401d      	ands	r5, r3
   192ae:	2200      	movs	r2, #0
   192b0:	2d00      	cmp	r5, #0
   192b2:	d009      	beq.n	192c8 <__aeabi_dmul+0x4c4>
   192b4:	220f      	movs	r2, #15
   192b6:	2400      	movs	r4, #0
   192b8:	401a      	ands	r2, r3
   192ba:	0018      	movs	r0, r3
   192bc:	2a04      	cmp	r2, #4
   192be:	d1d6      	bne.n	1926e <__aeabi_dmul+0x46a>
   192c0:	0003      	movs	r3, r0
   192c2:	0765      	lsls	r5, r4, #29
   192c4:	0264      	lsls	r4, r4, #9
   192c6:	0b22      	lsrs	r2, r4, #12
   192c8:	08db      	lsrs	r3, r3, #3
   192ca:	432b      	orrs	r3, r5
   192cc:	2501      	movs	r5, #1
   192ce:	4699      	mov	r9, r3
   192d0:	9b01      	ldr	r3, [sp, #4]
   192d2:	2400      	movs	r4, #0
   192d4:	401d      	ands	r5, r3
   192d6:	e5fc      	b.n	18ed2 <__aeabi_dmul+0xce>
   192d8:	2400      	movs	r4, #0
   192da:	e7e2      	b.n	192a2 <__aeabi_dmul+0x49e>
   192dc:	2280      	movs	r2, #128	; 0x80
   192de:	2501      	movs	r5, #1
   192e0:	0312      	lsls	r2, r2, #12
   192e2:	4322      	orrs	r2, r4
   192e4:	9901      	ldr	r1, [sp, #4]
   192e6:	0312      	lsls	r2, r2, #12
   192e8:	0b12      	lsrs	r2, r2, #12
   192ea:	400d      	ands	r5, r1
   192ec:	4699      	mov	r9, r3
   192ee:	4c04      	ldr	r4, [pc, #16]	; (19300 <__aeabi_dmul+0x4fc>)
   192f0:	e5ef      	b.n	18ed2 <__aeabi_dmul+0xce>
   192f2:	46c0      	nop			; (mov r8, r8)
   192f4:	000003ff 	.word	0x000003ff
   192f8:	feffffff 	.word	0xfeffffff
   192fc:	000007fe 	.word	0x000007fe
   19300:	000007ff 	.word	0x000007ff

00019304 <__aeabi_dsub>:
   19304:	b5f0      	push	{r4, r5, r6, r7, lr}
   19306:	4646      	mov	r6, r8
   19308:	46d6      	mov	lr, sl
   1930a:	464f      	mov	r7, r9
   1930c:	030c      	lsls	r4, r1, #12
   1930e:	b5c0      	push	{r6, r7, lr}
   19310:	0fcd      	lsrs	r5, r1, #31
   19312:	004e      	lsls	r6, r1, #1
   19314:	0a61      	lsrs	r1, r4, #9
   19316:	0f44      	lsrs	r4, r0, #29
   19318:	430c      	orrs	r4, r1
   1931a:	00c1      	lsls	r1, r0, #3
   1931c:	0058      	lsls	r0, r3, #1
   1931e:	0d40      	lsrs	r0, r0, #21
   19320:	4684      	mov	ip, r0
   19322:	468a      	mov	sl, r1
   19324:	000f      	movs	r7, r1
   19326:	0319      	lsls	r1, r3, #12
   19328:	0f50      	lsrs	r0, r2, #29
   1932a:	0a49      	lsrs	r1, r1, #9
   1932c:	4301      	orrs	r1, r0
   1932e:	48c6      	ldr	r0, [pc, #792]	; (19648 <__aeabi_dsub+0x344>)
   19330:	0d76      	lsrs	r6, r6, #21
   19332:	46a8      	mov	r8, r5
   19334:	0fdb      	lsrs	r3, r3, #31
   19336:	00d2      	lsls	r2, r2, #3
   19338:	4584      	cmp	ip, r0
   1933a:	d100      	bne.n	1933e <__aeabi_dsub+0x3a>
   1933c:	e0d8      	b.n	194f0 <__aeabi_dsub+0x1ec>
   1933e:	2001      	movs	r0, #1
   19340:	4043      	eors	r3, r0
   19342:	42ab      	cmp	r3, r5
   19344:	d100      	bne.n	19348 <__aeabi_dsub+0x44>
   19346:	e0a6      	b.n	19496 <__aeabi_dsub+0x192>
   19348:	4660      	mov	r0, ip
   1934a:	1a35      	subs	r5, r6, r0
   1934c:	2d00      	cmp	r5, #0
   1934e:	dc00      	bgt.n	19352 <__aeabi_dsub+0x4e>
   19350:	e105      	b.n	1955e <__aeabi_dsub+0x25a>
   19352:	2800      	cmp	r0, #0
   19354:	d110      	bne.n	19378 <__aeabi_dsub+0x74>
   19356:	000b      	movs	r3, r1
   19358:	4313      	orrs	r3, r2
   1935a:	d100      	bne.n	1935e <__aeabi_dsub+0x5a>
   1935c:	e0d7      	b.n	1950e <__aeabi_dsub+0x20a>
   1935e:	1e6b      	subs	r3, r5, #1
   19360:	2b00      	cmp	r3, #0
   19362:	d000      	beq.n	19366 <__aeabi_dsub+0x62>
   19364:	e14b      	b.n	195fe <__aeabi_dsub+0x2fa>
   19366:	4653      	mov	r3, sl
   19368:	1a9f      	subs	r7, r3, r2
   1936a:	45ba      	cmp	sl, r7
   1936c:	4180      	sbcs	r0, r0
   1936e:	1a64      	subs	r4, r4, r1
   19370:	4240      	negs	r0, r0
   19372:	1a24      	subs	r4, r4, r0
   19374:	2601      	movs	r6, #1
   19376:	e01e      	b.n	193b6 <__aeabi_dsub+0xb2>
   19378:	4bb3      	ldr	r3, [pc, #716]	; (19648 <__aeabi_dsub+0x344>)
   1937a:	429e      	cmp	r6, r3
   1937c:	d048      	beq.n	19410 <__aeabi_dsub+0x10c>
   1937e:	2380      	movs	r3, #128	; 0x80
   19380:	041b      	lsls	r3, r3, #16
   19382:	4319      	orrs	r1, r3
   19384:	2d38      	cmp	r5, #56	; 0x38
   19386:	dd00      	ble.n	1938a <__aeabi_dsub+0x86>
   19388:	e119      	b.n	195be <__aeabi_dsub+0x2ba>
   1938a:	2d1f      	cmp	r5, #31
   1938c:	dd00      	ble.n	19390 <__aeabi_dsub+0x8c>
   1938e:	e14c      	b.n	1962a <__aeabi_dsub+0x326>
   19390:	2320      	movs	r3, #32
   19392:	000f      	movs	r7, r1
   19394:	1b5b      	subs	r3, r3, r5
   19396:	0010      	movs	r0, r2
   19398:	409a      	lsls	r2, r3
   1939a:	409f      	lsls	r7, r3
   1939c:	40e8      	lsrs	r0, r5
   1939e:	1e53      	subs	r3, r2, #1
   193a0:	419a      	sbcs	r2, r3
   193a2:	40e9      	lsrs	r1, r5
   193a4:	4307      	orrs	r7, r0
   193a6:	4317      	orrs	r7, r2
   193a8:	4653      	mov	r3, sl
   193aa:	1bdf      	subs	r7, r3, r7
   193ac:	1a61      	subs	r1, r4, r1
   193ae:	45ba      	cmp	sl, r7
   193b0:	41a4      	sbcs	r4, r4
   193b2:	4264      	negs	r4, r4
   193b4:	1b0c      	subs	r4, r1, r4
   193b6:	0223      	lsls	r3, r4, #8
   193b8:	d400      	bmi.n	193bc <__aeabi_dsub+0xb8>
   193ba:	e0c5      	b.n	19548 <__aeabi_dsub+0x244>
   193bc:	0264      	lsls	r4, r4, #9
   193be:	0a65      	lsrs	r5, r4, #9
   193c0:	2d00      	cmp	r5, #0
   193c2:	d100      	bne.n	193c6 <__aeabi_dsub+0xc2>
   193c4:	e0f6      	b.n	195b4 <__aeabi_dsub+0x2b0>
   193c6:	0028      	movs	r0, r5
   193c8:	f000 fbb2 	bl	19b30 <__clzsi2>
   193cc:	0003      	movs	r3, r0
   193ce:	3b08      	subs	r3, #8
   193d0:	2b1f      	cmp	r3, #31
   193d2:	dd00      	ble.n	193d6 <__aeabi_dsub+0xd2>
   193d4:	e0e9      	b.n	195aa <__aeabi_dsub+0x2a6>
   193d6:	2220      	movs	r2, #32
   193d8:	003c      	movs	r4, r7
   193da:	1ad2      	subs	r2, r2, r3
   193dc:	409d      	lsls	r5, r3
   193de:	40d4      	lsrs	r4, r2
   193e0:	409f      	lsls	r7, r3
   193e2:	4325      	orrs	r5, r4
   193e4:	429e      	cmp	r6, r3
   193e6:	dd00      	ble.n	193ea <__aeabi_dsub+0xe6>
   193e8:	e0db      	b.n	195a2 <__aeabi_dsub+0x29e>
   193ea:	1b9e      	subs	r6, r3, r6
   193ec:	1c73      	adds	r3, r6, #1
   193ee:	2b1f      	cmp	r3, #31
   193f0:	dd00      	ble.n	193f4 <__aeabi_dsub+0xf0>
   193f2:	e10a      	b.n	1960a <__aeabi_dsub+0x306>
   193f4:	2220      	movs	r2, #32
   193f6:	0038      	movs	r0, r7
   193f8:	1ad2      	subs	r2, r2, r3
   193fa:	0029      	movs	r1, r5
   193fc:	4097      	lsls	r7, r2
   193fe:	002c      	movs	r4, r5
   19400:	4091      	lsls	r1, r2
   19402:	40d8      	lsrs	r0, r3
   19404:	1e7a      	subs	r2, r7, #1
   19406:	4197      	sbcs	r7, r2
   19408:	40dc      	lsrs	r4, r3
   1940a:	2600      	movs	r6, #0
   1940c:	4301      	orrs	r1, r0
   1940e:	430f      	orrs	r7, r1
   19410:	077b      	lsls	r3, r7, #29
   19412:	d009      	beq.n	19428 <__aeabi_dsub+0x124>
   19414:	230f      	movs	r3, #15
   19416:	403b      	ands	r3, r7
   19418:	2b04      	cmp	r3, #4
   1941a:	d005      	beq.n	19428 <__aeabi_dsub+0x124>
   1941c:	1d3b      	adds	r3, r7, #4
   1941e:	42bb      	cmp	r3, r7
   19420:	41bf      	sbcs	r7, r7
   19422:	427f      	negs	r7, r7
   19424:	19e4      	adds	r4, r4, r7
   19426:	001f      	movs	r7, r3
   19428:	0223      	lsls	r3, r4, #8
   1942a:	d525      	bpl.n	19478 <__aeabi_dsub+0x174>
   1942c:	4b86      	ldr	r3, [pc, #536]	; (19648 <__aeabi_dsub+0x344>)
   1942e:	3601      	adds	r6, #1
   19430:	429e      	cmp	r6, r3
   19432:	d100      	bne.n	19436 <__aeabi_dsub+0x132>
   19434:	e0af      	b.n	19596 <__aeabi_dsub+0x292>
   19436:	4b85      	ldr	r3, [pc, #532]	; (1964c <__aeabi_dsub+0x348>)
   19438:	2501      	movs	r5, #1
   1943a:	401c      	ands	r4, r3
   1943c:	4643      	mov	r3, r8
   1943e:	0762      	lsls	r2, r4, #29
   19440:	08ff      	lsrs	r7, r7, #3
   19442:	0264      	lsls	r4, r4, #9
   19444:	0576      	lsls	r6, r6, #21
   19446:	4317      	orrs	r7, r2
   19448:	0b24      	lsrs	r4, r4, #12
   1944a:	0d76      	lsrs	r6, r6, #21
   1944c:	401d      	ands	r5, r3
   1944e:	2100      	movs	r1, #0
   19450:	0324      	lsls	r4, r4, #12
   19452:	0b23      	lsrs	r3, r4, #12
   19454:	0d0c      	lsrs	r4, r1, #20
   19456:	4a7e      	ldr	r2, [pc, #504]	; (19650 <__aeabi_dsub+0x34c>)
   19458:	0524      	lsls	r4, r4, #20
   1945a:	431c      	orrs	r4, r3
   1945c:	4014      	ands	r4, r2
   1945e:	0533      	lsls	r3, r6, #20
   19460:	4323      	orrs	r3, r4
   19462:	005b      	lsls	r3, r3, #1
   19464:	07ed      	lsls	r5, r5, #31
   19466:	085b      	lsrs	r3, r3, #1
   19468:	432b      	orrs	r3, r5
   1946a:	0038      	movs	r0, r7
   1946c:	0019      	movs	r1, r3
   1946e:	bc1c      	pop	{r2, r3, r4}
   19470:	4690      	mov	r8, r2
   19472:	4699      	mov	r9, r3
   19474:	46a2      	mov	sl, r4
   19476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19478:	2501      	movs	r5, #1
   1947a:	4643      	mov	r3, r8
   1947c:	0762      	lsls	r2, r4, #29
   1947e:	08ff      	lsrs	r7, r7, #3
   19480:	4317      	orrs	r7, r2
   19482:	08e4      	lsrs	r4, r4, #3
   19484:	401d      	ands	r5, r3
   19486:	4b70      	ldr	r3, [pc, #448]	; (19648 <__aeabi_dsub+0x344>)
   19488:	429e      	cmp	r6, r3
   1948a:	d036      	beq.n	194fa <__aeabi_dsub+0x1f6>
   1948c:	0324      	lsls	r4, r4, #12
   1948e:	0576      	lsls	r6, r6, #21
   19490:	0b24      	lsrs	r4, r4, #12
   19492:	0d76      	lsrs	r6, r6, #21
   19494:	e7db      	b.n	1944e <__aeabi_dsub+0x14a>
   19496:	4663      	mov	r3, ip
   19498:	1af3      	subs	r3, r6, r3
   1949a:	2b00      	cmp	r3, #0
   1949c:	dc00      	bgt.n	194a0 <__aeabi_dsub+0x19c>
   1949e:	e094      	b.n	195ca <__aeabi_dsub+0x2c6>
   194a0:	4660      	mov	r0, ip
   194a2:	2800      	cmp	r0, #0
   194a4:	d035      	beq.n	19512 <__aeabi_dsub+0x20e>
   194a6:	4868      	ldr	r0, [pc, #416]	; (19648 <__aeabi_dsub+0x344>)
   194a8:	4286      	cmp	r6, r0
   194aa:	d0b1      	beq.n	19410 <__aeabi_dsub+0x10c>
   194ac:	2780      	movs	r7, #128	; 0x80
   194ae:	043f      	lsls	r7, r7, #16
   194b0:	4339      	orrs	r1, r7
   194b2:	2b38      	cmp	r3, #56	; 0x38
   194b4:	dc00      	bgt.n	194b8 <__aeabi_dsub+0x1b4>
   194b6:	e0fd      	b.n	196b4 <__aeabi_dsub+0x3b0>
   194b8:	430a      	orrs	r2, r1
   194ba:	0017      	movs	r7, r2
   194bc:	2100      	movs	r1, #0
   194be:	1e7a      	subs	r2, r7, #1
   194c0:	4197      	sbcs	r7, r2
   194c2:	4457      	add	r7, sl
   194c4:	4557      	cmp	r7, sl
   194c6:	4180      	sbcs	r0, r0
   194c8:	1909      	adds	r1, r1, r4
   194ca:	4244      	negs	r4, r0
   194cc:	190c      	adds	r4, r1, r4
   194ce:	0223      	lsls	r3, r4, #8
   194d0:	d53a      	bpl.n	19548 <__aeabi_dsub+0x244>
   194d2:	4b5d      	ldr	r3, [pc, #372]	; (19648 <__aeabi_dsub+0x344>)
   194d4:	3601      	adds	r6, #1
   194d6:	429e      	cmp	r6, r3
   194d8:	d100      	bne.n	194dc <__aeabi_dsub+0x1d8>
   194da:	e14b      	b.n	19774 <__aeabi_dsub+0x470>
   194dc:	2201      	movs	r2, #1
   194de:	4b5b      	ldr	r3, [pc, #364]	; (1964c <__aeabi_dsub+0x348>)
   194e0:	401c      	ands	r4, r3
   194e2:	087b      	lsrs	r3, r7, #1
   194e4:	4017      	ands	r7, r2
   194e6:	431f      	orrs	r7, r3
   194e8:	07e2      	lsls	r2, r4, #31
   194ea:	4317      	orrs	r7, r2
   194ec:	0864      	lsrs	r4, r4, #1
   194ee:	e78f      	b.n	19410 <__aeabi_dsub+0x10c>
   194f0:	0008      	movs	r0, r1
   194f2:	4310      	orrs	r0, r2
   194f4:	d000      	beq.n	194f8 <__aeabi_dsub+0x1f4>
   194f6:	e724      	b.n	19342 <__aeabi_dsub+0x3e>
   194f8:	e721      	b.n	1933e <__aeabi_dsub+0x3a>
   194fa:	0023      	movs	r3, r4
   194fc:	433b      	orrs	r3, r7
   194fe:	d100      	bne.n	19502 <__aeabi_dsub+0x1fe>
   19500:	e1b9      	b.n	19876 <__aeabi_dsub+0x572>
   19502:	2280      	movs	r2, #128	; 0x80
   19504:	0312      	lsls	r2, r2, #12
   19506:	4314      	orrs	r4, r2
   19508:	0324      	lsls	r4, r4, #12
   1950a:	0b24      	lsrs	r4, r4, #12
   1950c:	e79f      	b.n	1944e <__aeabi_dsub+0x14a>
   1950e:	002e      	movs	r6, r5
   19510:	e77e      	b.n	19410 <__aeabi_dsub+0x10c>
   19512:	0008      	movs	r0, r1
   19514:	4310      	orrs	r0, r2
   19516:	d100      	bne.n	1951a <__aeabi_dsub+0x216>
   19518:	e0ca      	b.n	196b0 <__aeabi_dsub+0x3ac>
   1951a:	1e58      	subs	r0, r3, #1
   1951c:	4684      	mov	ip, r0
   1951e:	2800      	cmp	r0, #0
   19520:	d000      	beq.n	19524 <__aeabi_dsub+0x220>
   19522:	e0e7      	b.n	196f4 <__aeabi_dsub+0x3f0>
   19524:	4452      	add	r2, sl
   19526:	4552      	cmp	r2, sl
   19528:	4180      	sbcs	r0, r0
   1952a:	1864      	adds	r4, r4, r1
   1952c:	4240      	negs	r0, r0
   1952e:	1824      	adds	r4, r4, r0
   19530:	0017      	movs	r7, r2
   19532:	2601      	movs	r6, #1
   19534:	0223      	lsls	r3, r4, #8
   19536:	d507      	bpl.n	19548 <__aeabi_dsub+0x244>
   19538:	2602      	movs	r6, #2
   1953a:	e7cf      	b.n	194dc <__aeabi_dsub+0x1d8>
   1953c:	4664      	mov	r4, ip
   1953e:	432c      	orrs	r4, r5
   19540:	d100      	bne.n	19544 <__aeabi_dsub+0x240>
   19542:	e1b3      	b.n	198ac <__aeabi_dsub+0x5a8>
   19544:	002c      	movs	r4, r5
   19546:	4667      	mov	r7, ip
   19548:	077b      	lsls	r3, r7, #29
   1954a:	d000      	beq.n	1954e <__aeabi_dsub+0x24a>
   1954c:	e762      	b.n	19414 <__aeabi_dsub+0x110>
   1954e:	0763      	lsls	r3, r4, #29
   19550:	08ff      	lsrs	r7, r7, #3
   19552:	431f      	orrs	r7, r3
   19554:	2501      	movs	r5, #1
   19556:	4643      	mov	r3, r8
   19558:	08e4      	lsrs	r4, r4, #3
   1955a:	401d      	ands	r5, r3
   1955c:	e793      	b.n	19486 <__aeabi_dsub+0x182>
   1955e:	2d00      	cmp	r5, #0
   19560:	d178      	bne.n	19654 <__aeabi_dsub+0x350>
   19562:	1c75      	adds	r5, r6, #1
   19564:	056d      	lsls	r5, r5, #21
   19566:	0d6d      	lsrs	r5, r5, #21
   19568:	2d01      	cmp	r5, #1
   1956a:	dc00      	bgt.n	1956e <__aeabi_dsub+0x26a>
   1956c:	e0f2      	b.n	19754 <__aeabi_dsub+0x450>
   1956e:	4650      	mov	r0, sl
   19570:	1a80      	subs	r0, r0, r2
   19572:	4582      	cmp	sl, r0
   19574:	41bf      	sbcs	r7, r7
   19576:	1a65      	subs	r5, r4, r1
   19578:	427f      	negs	r7, r7
   1957a:	1bed      	subs	r5, r5, r7
   1957c:	4684      	mov	ip, r0
   1957e:	0228      	lsls	r0, r5, #8
   19580:	d400      	bmi.n	19584 <__aeabi_dsub+0x280>
   19582:	e08c      	b.n	1969e <__aeabi_dsub+0x39a>
   19584:	4650      	mov	r0, sl
   19586:	1a17      	subs	r7, r2, r0
   19588:	42ba      	cmp	r2, r7
   1958a:	4192      	sbcs	r2, r2
   1958c:	1b0c      	subs	r4, r1, r4
   1958e:	4255      	negs	r5, r2
   19590:	1b65      	subs	r5, r4, r5
   19592:	4698      	mov	r8, r3
   19594:	e714      	b.n	193c0 <__aeabi_dsub+0xbc>
   19596:	2501      	movs	r5, #1
   19598:	4643      	mov	r3, r8
   1959a:	2400      	movs	r4, #0
   1959c:	401d      	ands	r5, r3
   1959e:	2700      	movs	r7, #0
   195a0:	e755      	b.n	1944e <__aeabi_dsub+0x14a>
   195a2:	4c2a      	ldr	r4, [pc, #168]	; (1964c <__aeabi_dsub+0x348>)
   195a4:	1af6      	subs	r6, r6, r3
   195a6:	402c      	ands	r4, r5
   195a8:	e732      	b.n	19410 <__aeabi_dsub+0x10c>
   195aa:	003d      	movs	r5, r7
   195ac:	3828      	subs	r0, #40	; 0x28
   195ae:	4085      	lsls	r5, r0
   195b0:	2700      	movs	r7, #0
   195b2:	e717      	b.n	193e4 <__aeabi_dsub+0xe0>
   195b4:	0038      	movs	r0, r7
   195b6:	f000 fabb 	bl	19b30 <__clzsi2>
   195ba:	3020      	adds	r0, #32
   195bc:	e706      	b.n	193cc <__aeabi_dsub+0xc8>
   195be:	430a      	orrs	r2, r1
   195c0:	0017      	movs	r7, r2
   195c2:	2100      	movs	r1, #0
   195c4:	1e7a      	subs	r2, r7, #1
   195c6:	4197      	sbcs	r7, r2
   195c8:	e6ee      	b.n	193a8 <__aeabi_dsub+0xa4>
   195ca:	2b00      	cmp	r3, #0
   195cc:	d000      	beq.n	195d0 <__aeabi_dsub+0x2cc>
   195ce:	e0e5      	b.n	1979c <__aeabi_dsub+0x498>
   195d0:	1c73      	adds	r3, r6, #1
   195d2:	469c      	mov	ip, r3
   195d4:	055b      	lsls	r3, r3, #21
   195d6:	0d5b      	lsrs	r3, r3, #21
   195d8:	2b01      	cmp	r3, #1
   195da:	dc00      	bgt.n	195de <__aeabi_dsub+0x2da>
   195dc:	e09f      	b.n	1971e <__aeabi_dsub+0x41a>
   195de:	4b1a      	ldr	r3, [pc, #104]	; (19648 <__aeabi_dsub+0x344>)
   195e0:	459c      	cmp	ip, r3
   195e2:	d100      	bne.n	195e6 <__aeabi_dsub+0x2e2>
   195e4:	e0c5      	b.n	19772 <__aeabi_dsub+0x46e>
   195e6:	4452      	add	r2, sl
   195e8:	4552      	cmp	r2, sl
   195ea:	4180      	sbcs	r0, r0
   195ec:	1864      	adds	r4, r4, r1
   195ee:	4240      	negs	r0, r0
   195f0:	1824      	adds	r4, r4, r0
   195f2:	07e7      	lsls	r7, r4, #31
   195f4:	0852      	lsrs	r2, r2, #1
   195f6:	4317      	orrs	r7, r2
   195f8:	0864      	lsrs	r4, r4, #1
   195fa:	4666      	mov	r6, ip
   195fc:	e708      	b.n	19410 <__aeabi_dsub+0x10c>
   195fe:	4812      	ldr	r0, [pc, #72]	; (19648 <__aeabi_dsub+0x344>)
   19600:	4285      	cmp	r5, r0
   19602:	d100      	bne.n	19606 <__aeabi_dsub+0x302>
   19604:	e085      	b.n	19712 <__aeabi_dsub+0x40e>
   19606:	001d      	movs	r5, r3
   19608:	e6bc      	b.n	19384 <__aeabi_dsub+0x80>
   1960a:	0029      	movs	r1, r5
   1960c:	3e1f      	subs	r6, #31
   1960e:	40f1      	lsrs	r1, r6
   19610:	2b20      	cmp	r3, #32
   19612:	d100      	bne.n	19616 <__aeabi_dsub+0x312>
   19614:	e07f      	b.n	19716 <__aeabi_dsub+0x412>
   19616:	2240      	movs	r2, #64	; 0x40
   19618:	1ad3      	subs	r3, r2, r3
   1961a:	409d      	lsls	r5, r3
   1961c:	432f      	orrs	r7, r5
   1961e:	1e7d      	subs	r5, r7, #1
   19620:	41af      	sbcs	r7, r5
   19622:	2400      	movs	r4, #0
   19624:	430f      	orrs	r7, r1
   19626:	2600      	movs	r6, #0
   19628:	e78e      	b.n	19548 <__aeabi_dsub+0x244>
   1962a:	002b      	movs	r3, r5
   1962c:	000f      	movs	r7, r1
   1962e:	3b20      	subs	r3, #32
   19630:	40df      	lsrs	r7, r3
   19632:	2d20      	cmp	r5, #32
   19634:	d071      	beq.n	1971a <__aeabi_dsub+0x416>
   19636:	2340      	movs	r3, #64	; 0x40
   19638:	1b5d      	subs	r5, r3, r5
   1963a:	40a9      	lsls	r1, r5
   1963c:	430a      	orrs	r2, r1
   1963e:	1e51      	subs	r1, r2, #1
   19640:	418a      	sbcs	r2, r1
   19642:	2100      	movs	r1, #0
   19644:	4317      	orrs	r7, r2
   19646:	e6af      	b.n	193a8 <__aeabi_dsub+0xa4>
   19648:	000007ff 	.word	0x000007ff
   1964c:	ff7fffff 	.word	0xff7fffff
   19650:	800fffff 	.word	0x800fffff
   19654:	2e00      	cmp	r6, #0
   19656:	d03e      	beq.n	196d6 <__aeabi_dsub+0x3d2>
   19658:	4eb3      	ldr	r6, [pc, #716]	; (19928 <__aeabi_dsub+0x624>)
   1965a:	45b4      	cmp	ip, r6
   1965c:	d045      	beq.n	196ea <__aeabi_dsub+0x3e6>
   1965e:	2680      	movs	r6, #128	; 0x80
   19660:	0436      	lsls	r6, r6, #16
   19662:	426d      	negs	r5, r5
   19664:	4334      	orrs	r4, r6
   19666:	2d38      	cmp	r5, #56	; 0x38
   19668:	dd00      	ble.n	1966c <__aeabi_dsub+0x368>
   1966a:	e0a8      	b.n	197be <__aeabi_dsub+0x4ba>
   1966c:	2d1f      	cmp	r5, #31
   1966e:	dd00      	ble.n	19672 <__aeabi_dsub+0x36e>
   19670:	e11f      	b.n	198b2 <__aeabi_dsub+0x5ae>
   19672:	2620      	movs	r6, #32
   19674:	0027      	movs	r7, r4
   19676:	4650      	mov	r0, sl
   19678:	1b76      	subs	r6, r6, r5
   1967a:	40b7      	lsls	r7, r6
   1967c:	40e8      	lsrs	r0, r5
   1967e:	4307      	orrs	r7, r0
   19680:	4650      	mov	r0, sl
   19682:	40b0      	lsls	r0, r6
   19684:	1e46      	subs	r6, r0, #1
   19686:	41b0      	sbcs	r0, r6
   19688:	40ec      	lsrs	r4, r5
   1968a:	4338      	orrs	r0, r7
   1968c:	1a17      	subs	r7, r2, r0
   1968e:	42ba      	cmp	r2, r7
   19690:	4192      	sbcs	r2, r2
   19692:	1b0c      	subs	r4, r1, r4
   19694:	4252      	negs	r2, r2
   19696:	1aa4      	subs	r4, r4, r2
   19698:	4666      	mov	r6, ip
   1969a:	4698      	mov	r8, r3
   1969c:	e68b      	b.n	193b6 <__aeabi_dsub+0xb2>
   1969e:	4664      	mov	r4, ip
   196a0:	4667      	mov	r7, ip
   196a2:	432c      	orrs	r4, r5
   196a4:	d000      	beq.n	196a8 <__aeabi_dsub+0x3a4>
   196a6:	e68b      	b.n	193c0 <__aeabi_dsub+0xbc>
   196a8:	2500      	movs	r5, #0
   196aa:	2600      	movs	r6, #0
   196ac:	2700      	movs	r7, #0
   196ae:	e6ea      	b.n	19486 <__aeabi_dsub+0x182>
   196b0:	001e      	movs	r6, r3
   196b2:	e6ad      	b.n	19410 <__aeabi_dsub+0x10c>
   196b4:	2b1f      	cmp	r3, #31
   196b6:	dc60      	bgt.n	1977a <__aeabi_dsub+0x476>
   196b8:	2720      	movs	r7, #32
   196ba:	1af8      	subs	r0, r7, r3
   196bc:	000f      	movs	r7, r1
   196be:	4684      	mov	ip, r0
   196c0:	4087      	lsls	r7, r0
   196c2:	0010      	movs	r0, r2
   196c4:	40d8      	lsrs	r0, r3
   196c6:	4307      	orrs	r7, r0
   196c8:	4660      	mov	r0, ip
   196ca:	4082      	lsls	r2, r0
   196cc:	1e50      	subs	r0, r2, #1
   196ce:	4182      	sbcs	r2, r0
   196d0:	40d9      	lsrs	r1, r3
   196d2:	4317      	orrs	r7, r2
   196d4:	e6f5      	b.n	194c2 <__aeabi_dsub+0x1be>
   196d6:	0026      	movs	r6, r4
   196d8:	4650      	mov	r0, sl
   196da:	4306      	orrs	r6, r0
   196dc:	d005      	beq.n	196ea <__aeabi_dsub+0x3e6>
   196de:	43ed      	mvns	r5, r5
   196e0:	2d00      	cmp	r5, #0
   196e2:	d0d3      	beq.n	1968c <__aeabi_dsub+0x388>
   196e4:	4e90      	ldr	r6, [pc, #576]	; (19928 <__aeabi_dsub+0x624>)
   196e6:	45b4      	cmp	ip, r6
   196e8:	d1bd      	bne.n	19666 <__aeabi_dsub+0x362>
   196ea:	000c      	movs	r4, r1
   196ec:	0017      	movs	r7, r2
   196ee:	4666      	mov	r6, ip
   196f0:	4698      	mov	r8, r3
   196f2:	e68d      	b.n	19410 <__aeabi_dsub+0x10c>
   196f4:	488c      	ldr	r0, [pc, #560]	; (19928 <__aeabi_dsub+0x624>)
   196f6:	4283      	cmp	r3, r0
   196f8:	d00b      	beq.n	19712 <__aeabi_dsub+0x40e>
   196fa:	4663      	mov	r3, ip
   196fc:	e6d9      	b.n	194b2 <__aeabi_dsub+0x1ae>
   196fe:	2d00      	cmp	r5, #0
   19700:	d000      	beq.n	19704 <__aeabi_dsub+0x400>
   19702:	e096      	b.n	19832 <__aeabi_dsub+0x52e>
   19704:	0008      	movs	r0, r1
   19706:	4310      	orrs	r0, r2
   19708:	d100      	bne.n	1970c <__aeabi_dsub+0x408>
   1970a:	e0e2      	b.n	198d2 <__aeabi_dsub+0x5ce>
   1970c:	000c      	movs	r4, r1
   1970e:	0017      	movs	r7, r2
   19710:	4698      	mov	r8, r3
   19712:	4e85      	ldr	r6, [pc, #532]	; (19928 <__aeabi_dsub+0x624>)
   19714:	e67c      	b.n	19410 <__aeabi_dsub+0x10c>
   19716:	2500      	movs	r5, #0
   19718:	e780      	b.n	1961c <__aeabi_dsub+0x318>
   1971a:	2100      	movs	r1, #0
   1971c:	e78e      	b.n	1963c <__aeabi_dsub+0x338>
   1971e:	0023      	movs	r3, r4
   19720:	4650      	mov	r0, sl
   19722:	4303      	orrs	r3, r0
   19724:	2e00      	cmp	r6, #0
   19726:	d000      	beq.n	1972a <__aeabi_dsub+0x426>
   19728:	e0a8      	b.n	1987c <__aeabi_dsub+0x578>
   1972a:	2b00      	cmp	r3, #0
   1972c:	d100      	bne.n	19730 <__aeabi_dsub+0x42c>
   1972e:	e0de      	b.n	198ee <__aeabi_dsub+0x5ea>
   19730:	000b      	movs	r3, r1
   19732:	4313      	orrs	r3, r2
   19734:	d100      	bne.n	19738 <__aeabi_dsub+0x434>
   19736:	e66b      	b.n	19410 <__aeabi_dsub+0x10c>
   19738:	4452      	add	r2, sl
   1973a:	4552      	cmp	r2, sl
   1973c:	4180      	sbcs	r0, r0
   1973e:	1864      	adds	r4, r4, r1
   19740:	4240      	negs	r0, r0
   19742:	1824      	adds	r4, r4, r0
   19744:	0017      	movs	r7, r2
   19746:	0223      	lsls	r3, r4, #8
   19748:	d400      	bmi.n	1974c <__aeabi_dsub+0x448>
   1974a:	e6fd      	b.n	19548 <__aeabi_dsub+0x244>
   1974c:	4b77      	ldr	r3, [pc, #476]	; (1992c <__aeabi_dsub+0x628>)
   1974e:	4666      	mov	r6, ip
   19750:	401c      	ands	r4, r3
   19752:	e65d      	b.n	19410 <__aeabi_dsub+0x10c>
   19754:	0025      	movs	r5, r4
   19756:	4650      	mov	r0, sl
   19758:	4305      	orrs	r5, r0
   1975a:	2e00      	cmp	r6, #0
   1975c:	d1cf      	bne.n	196fe <__aeabi_dsub+0x3fa>
   1975e:	2d00      	cmp	r5, #0
   19760:	d14f      	bne.n	19802 <__aeabi_dsub+0x4fe>
   19762:	000c      	movs	r4, r1
   19764:	4314      	orrs	r4, r2
   19766:	d100      	bne.n	1976a <__aeabi_dsub+0x466>
   19768:	e0a0      	b.n	198ac <__aeabi_dsub+0x5a8>
   1976a:	000c      	movs	r4, r1
   1976c:	0017      	movs	r7, r2
   1976e:	4698      	mov	r8, r3
   19770:	e64e      	b.n	19410 <__aeabi_dsub+0x10c>
   19772:	4666      	mov	r6, ip
   19774:	2400      	movs	r4, #0
   19776:	2700      	movs	r7, #0
   19778:	e685      	b.n	19486 <__aeabi_dsub+0x182>
   1977a:	001f      	movs	r7, r3
   1977c:	0008      	movs	r0, r1
   1977e:	3f20      	subs	r7, #32
   19780:	40f8      	lsrs	r0, r7
   19782:	0007      	movs	r7, r0
   19784:	2b20      	cmp	r3, #32
   19786:	d100      	bne.n	1978a <__aeabi_dsub+0x486>
   19788:	e08e      	b.n	198a8 <__aeabi_dsub+0x5a4>
   1978a:	2040      	movs	r0, #64	; 0x40
   1978c:	1ac3      	subs	r3, r0, r3
   1978e:	4099      	lsls	r1, r3
   19790:	430a      	orrs	r2, r1
   19792:	1e51      	subs	r1, r2, #1
   19794:	418a      	sbcs	r2, r1
   19796:	2100      	movs	r1, #0
   19798:	4317      	orrs	r7, r2
   1979a:	e692      	b.n	194c2 <__aeabi_dsub+0x1be>
   1979c:	2e00      	cmp	r6, #0
   1979e:	d114      	bne.n	197ca <__aeabi_dsub+0x4c6>
   197a0:	0026      	movs	r6, r4
   197a2:	4650      	mov	r0, sl
   197a4:	4306      	orrs	r6, r0
   197a6:	d062      	beq.n	1986e <__aeabi_dsub+0x56a>
   197a8:	43db      	mvns	r3, r3
   197aa:	2b00      	cmp	r3, #0
   197ac:	d15c      	bne.n	19868 <__aeabi_dsub+0x564>
   197ae:	1887      	adds	r7, r0, r2
   197b0:	4297      	cmp	r7, r2
   197b2:	4192      	sbcs	r2, r2
   197b4:	1864      	adds	r4, r4, r1
   197b6:	4252      	negs	r2, r2
   197b8:	18a4      	adds	r4, r4, r2
   197ba:	4666      	mov	r6, ip
   197bc:	e687      	b.n	194ce <__aeabi_dsub+0x1ca>
   197be:	4650      	mov	r0, sl
   197c0:	4320      	orrs	r0, r4
   197c2:	1e44      	subs	r4, r0, #1
   197c4:	41a0      	sbcs	r0, r4
   197c6:	2400      	movs	r4, #0
   197c8:	e760      	b.n	1968c <__aeabi_dsub+0x388>
   197ca:	4e57      	ldr	r6, [pc, #348]	; (19928 <__aeabi_dsub+0x624>)
   197cc:	45b4      	cmp	ip, r6
   197ce:	d04e      	beq.n	1986e <__aeabi_dsub+0x56a>
   197d0:	2680      	movs	r6, #128	; 0x80
   197d2:	0436      	lsls	r6, r6, #16
   197d4:	425b      	negs	r3, r3
   197d6:	4334      	orrs	r4, r6
   197d8:	2b38      	cmp	r3, #56	; 0x38
   197da:	dd00      	ble.n	197de <__aeabi_dsub+0x4da>
   197dc:	e07f      	b.n	198de <__aeabi_dsub+0x5da>
   197de:	2b1f      	cmp	r3, #31
   197e0:	dd00      	ble.n	197e4 <__aeabi_dsub+0x4e0>
   197e2:	e08b      	b.n	198fc <__aeabi_dsub+0x5f8>
   197e4:	2620      	movs	r6, #32
   197e6:	0027      	movs	r7, r4
   197e8:	4650      	mov	r0, sl
   197ea:	1af6      	subs	r6, r6, r3
   197ec:	40b7      	lsls	r7, r6
   197ee:	40d8      	lsrs	r0, r3
   197f0:	4307      	orrs	r7, r0
   197f2:	4650      	mov	r0, sl
   197f4:	40b0      	lsls	r0, r6
   197f6:	1e46      	subs	r6, r0, #1
   197f8:	41b0      	sbcs	r0, r6
   197fa:	4307      	orrs	r7, r0
   197fc:	40dc      	lsrs	r4, r3
   197fe:	18bf      	adds	r7, r7, r2
   19800:	e7d6      	b.n	197b0 <__aeabi_dsub+0x4ac>
   19802:	000d      	movs	r5, r1
   19804:	4315      	orrs	r5, r2
   19806:	d100      	bne.n	1980a <__aeabi_dsub+0x506>
   19808:	e602      	b.n	19410 <__aeabi_dsub+0x10c>
   1980a:	4650      	mov	r0, sl
   1980c:	1a80      	subs	r0, r0, r2
   1980e:	4582      	cmp	sl, r0
   19810:	41bf      	sbcs	r7, r7
   19812:	1a65      	subs	r5, r4, r1
   19814:	427f      	negs	r7, r7
   19816:	1bed      	subs	r5, r5, r7
   19818:	4684      	mov	ip, r0
   1981a:	0228      	lsls	r0, r5, #8
   1981c:	d400      	bmi.n	19820 <__aeabi_dsub+0x51c>
   1981e:	e68d      	b.n	1953c <__aeabi_dsub+0x238>
   19820:	4650      	mov	r0, sl
   19822:	1a17      	subs	r7, r2, r0
   19824:	42ba      	cmp	r2, r7
   19826:	4192      	sbcs	r2, r2
   19828:	1b0c      	subs	r4, r1, r4
   1982a:	4252      	negs	r2, r2
   1982c:	1aa4      	subs	r4, r4, r2
   1982e:	4698      	mov	r8, r3
   19830:	e5ee      	b.n	19410 <__aeabi_dsub+0x10c>
   19832:	000d      	movs	r5, r1
   19834:	4315      	orrs	r5, r2
   19836:	d100      	bne.n	1983a <__aeabi_dsub+0x536>
   19838:	e76b      	b.n	19712 <__aeabi_dsub+0x40e>
   1983a:	4650      	mov	r0, sl
   1983c:	0767      	lsls	r7, r4, #29
   1983e:	08c0      	lsrs	r0, r0, #3
   19840:	4307      	orrs	r7, r0
   19842:	2080      	movs	r0, #128	; 0x80
   19844:	08e4      	lsrs	r4, r4, #3
   19846:	0300      	lsls	r0, r0, #12
   19848:	4204      	tst	r4, r0
   1984a:	d007      	beq.n	1985c <__aeabi_dsub+0x558>
   1984c:	08cd      	lsrs	r5, r1, #3
   1984e:	4205      	tst	r5, r0
   19850:	d104      	bne.n	1985c <__aeabi_dsub+0x558>
   19852:	002c      	movs	r4, r5
   19854:	4698      	mov	r8, r3
   19856:	08d7      	lsrs	r7, r2, #3
   19858:	0749      	lsls	r1, r1, #29
   1985a:	430f      	orrs	r7, r1
   1985c:	0f7b      	lsrs	r3, r7, #29
   1985e:	00e4      	lsls	r4, r4, #3
   19860:	431c      	orrs	r4, r3
   19862:	00ff      	lsls	r7, r7, #3
   19864:	4e30      	ldr	r6, [pc, #192]	; (19928 <__aeabi_dsub+0x624>)
   19866:	e5d3      	b.n	19410 <__aeabi_dsub+0x10c>
   19868:	4e2f      	ldr	r6, [pc, #188]	; (19928 <__aeabi_dsub+0x624>)
   1986a:	45b4      	cmp	ip, r6
   1986c:	d1b4      	bne.n	197d8 <__aeabi_dsub+0x4d4>
   1986e:	000c      	movs	r4, r1
   19870:	0017      	movs	r7, r2
   19872:	4666      	mov	r6, ip
   19874:	e5cc      	b.n	19410 <__aeabi_dsub+0x10c>
   19876:	2700      	movs	r7, #0
   19878:	2400      	movs	r4, #0
   1987a:	e5e8      	b.n	1944e <__aeabi_dsub+0x14a>
   1987c:	2b00      	cmp	r3, #0
   1987e:	d039      	beq.n	198f4 <__aeabi_dsub+0x5f0>
   19880:	000b      	movs	r3, r1
   19882:	4313      	orrs	r3, r2
   19884:	d100      	bne.n	19888 <__aeabi_dsub+0x584>
   19886:	e744      	b.n	19712 <__aeabi_dsub+0x40e>
   19888:	08c0      	lsrs	r0, r0, #3
   1988a:	0767      	lsls	r7, r4, #29
   1988c:	4307      	orrs	r7, r0
   1988e:	2080      	movs	r0, #128	; 0x80
   19890:	08e4      	lsrs	r4, r4, #3
   19892:	0300      	lsls	r0, r0, #12
   19894:	4204      	tst	r4, r0
   19896:	d0e1      	beq.n	1985c <__aeabi_dsub+0x558>
   19898:	08cb      	lsrs	r3, r1, #3
   1989a:	4203      	tst	r3, r0
   1989c:	d1de      	bne.n	1985c <__aeabi_dsub+0x558>
   1989e:	08d7      	lsrs	r7, r2, #3
   198a0:	0749      	lsls	r1, r1, #29
   198a2:	430f      	orrs	r7, r1
   198a4:	001c      	movs	r4, r3
   198a6:	e7d9      	b.n	1985c <__aeabi_dsub+0x558>
   198a8:	2100      	movs	r1, #0
   198aa:	e771      	b.n	19790 <__aeabi_dsub+0x48c>
   198ac:	2500      	movs	r5, #0
   198ae:	2700      	movs	r7, #0
   198b0:	e5e9      	b.n	19486 <__aeabi_dsub+0x182>
   198b2:	002e      	movs	r6, r5
   198b4:	0027      	movs	r7, r4
   198b6:	3e20      	subs	r6, #32
   198b8:	40f7      	lsrs	r7, r6
   198ba:	2d20      	cmp	r5, #32
   198bc:	d02f      	beq.n	1991e <__aeabi_dsub+0x61a>
   198be:	2640      	movs	r6, #64	; 0x40
   198c0:	1b75      	subs	r5, r6, r5
   198c2:	40ac      	lsls	r4, r5
   198c4:	4650      	mov	r0, sl
   198c6:	4320      	orrs	r0, r4
   198c8:	1e44      	subs	r4, r0, #1
   198ca:	41a0      	sbcs	r0, r4
   198cc:	2400      	movs	r4, #0
   198ce:	4338      	orrs	r0, r7
   198d0:	e6dc      	b.n	1968c <__aeabi_dsub+0x388>
   198d2:	2480      	movs	r4, #128	; 0x80
   198d4:	2500      	movs	r5, #0
   198d6:	0324      	lsls	r4, r4, #12
   198d8:	4e13      	ldr	r6, [pc, #76]	; (19928 <__aeabi_dsub+0x624>)
   198da:	2700      	movs	r7, #0
   198dc:	e5d3      	b.n	19486 <__aeabi_dsub+0x182>
   198de:	4650      	mov	r0, sl
   198e0:	4320      	orrs	r0, r4
   198e2:	0007      	movs	r7, r0
   198e4:	1e78      	subs	r0, r7, #1
   198e6:	4187      	sbcs	r7, r0
   198e8:	2400      	movs	r4, #0
   198ea:	18bf      	adds	r7, r7, r2
   198ec:	e760      	b.n	197b0 <__aeabi_dsub+0x4ac>
   198ee:	000c      	movs	r4, r1
   198f0:	0017      	movs	r7, r2
   198f2:	e58d      	b.n	19410 <__aeabi_dsub+0x10c>
   198f4:	000c      	movs	r4, r1
   198f6:	0017      	movs	r7, r2
   198f8:	4e0b      	ldr	r6, [pc, #44]	; (19928 <__aeabi_dsub+0x624>)
   198fa:	e589      	b.n	19410 <__aeabi_dsub+0x10c>
   198fc:	001e      	movs	r6, r3
   198fe:	0027      	movs	r7, r4
   19900:	3e20      	subs	r6, #32
   19902:	40f7      	lsrs	r7, r6
   19904:	2b20      	cmp	r3, #32
   19906:	d00c      	beq.n	19922 <__aeabi_dsub+0x61e>
   19908:	2640      	movs	r6, #64	; 0x40
   1990a:	1af3      	subs	r3, r6, r3
   1990c:	409c      	lsls	r4, r3
   1990e:	4650      	mov	r0, sl
   19910:	4320      	orrs	r0, r4
   19912:	1e44      	subs	r4, r0, #1
   19914:	41a0      	sbcs	r0, r4
   19916:	4307      	orrs	r7, r0
   19918:	2400      	movs	r4, #0
   1991a:	18bf      	adds	r7, r7, r2
   1991c:	e748      	b.n	197b0 <__aeabi_dsub+0x4ac>
   1991e:	2400      	movs	r4, #0
   19920:	e7d0      	b.n	198c4 <__aeabi_dsub+0x5c0>
   19922:	2400      	movs	r4, #0
   19924:	e7f3      	b.n	1990e <__aeabi_dsub+0x60a>
   19926:	46c0      	nop			; (mov r8, r8)
   19928:	000007ff 	.word	0x000007ff
   1992c:	ff7fffff 	.word	0xff7fffff

00019930 <__aeabi_d2iz>:
   19930:	b530      	push	{r4, r5, lr}
   19932:	4d13      	ldr	r5, [pc, #76]	; (19980 <__aeabi_d2iz+0x50>)
   19934:	030a      	lsls	r2, r1, #12
   19936:	004b      	lsls	r3, r1, #1
   19938:	0b12      	lsrs	r2, r2, #12
   1993a:	0d5b      	lsrs	r3, r3, #21
   1993c:	0fc9      	lsrs	r1, r1, #31
   1993e:	2400      	movs	r4, #0
   19940:	42ab      	cmp	r3, r5
   19942:	dd10      	ble.n	19966 <__aeabi_d2iz+0x36>
   19944:	4c0f      	ldr	r4, [pc, #60]	; (19984 <__aeabi_d2iz+0x54>)
   19946:	42a3      	cmp	r3, r4
   19948:	dc0f      	bgt.n	1996a <__aeabi_d2iz+0x3a>
   1994a:	2480      	movs	r4, #128	; 0x80
   1994c:	4d0e      	ldr	r5, [pc, #56]	; (19988 <__aeabi_d2iz+0x58>)
   1994e:	0364      	lsls	r4, r4, #13
   19950:	4322      	orrs	r2, r4
   19952:	1aed      	subs	r5, r5, r3
   19954:	2d1f      	cmp	r5, #31
   19956:	dd0b      	ble.n	19970 <__aeabi_d2iz+0x40>
   19958:	480c      	ldr	r0, [pc, #48]	; (1998c <__aeabi_d2iz+0x5c>)
   1995a:	1ac3      	subs	r3, r0, r3
   1995c:	40da      	lsrs	r2, r3
   1995e:	4254      	negs	r4, r2
   19960:	2900      	cmp	r1, #0
   19962:	d100      	bne.n	19966 <__aeabi_d2iz+0x36>
   19964:	0014      	movs	r4, r2
   19966:	0020      	movs	r0, r4
   19968:	bd30      	pop	{r4, r5, pc}
   1996a:	4b09      	ldr	r3, [pc, #36]	; (19990 <__aeabi_d2iz+0x60>)
   1996c:	18cc      	adds	r4, r1, r3
   1996e:	e7fa      	b.n	19966 <__aeabi_d2iz+0x36>
   19970:	4c08      	ldr	r4, [pc, #32]	; (19994 <__aeabi_d2iz+0x64>)
   19972:	40e8      	lsrs	r0, r5
   19974:	46a4      	mov	ip, r4
   19976:	4463      	add	r3, ip
   19978:	409a      	lsls	r2, r3
   1997a:	4302      	orrs	r2, r0
   1997c:	e7ef      	b.n	1995e <__aeabi_d2iz+0x2e>
   1997e:	46c0      	nop			; (mov r8, r8)
   19980:	000003fe 	.word	0x000003fe
   19984:	0000041d 	.word	0x0000041d
   19988:	00000433 	.word	0x00000433
   1998c:	00000413 	.word	0x00000413
   19990:	7fffffff 	.word	0x7fffffff
   19994:	fffffbed 	.word	0xfffffbed

00019998 <__aeabi_i2d>:
   19998:	b570      	push	{r4, r5, r6, lr}
   1999a:	2800      	cmp	r0, #0
   1999c:	d030      	beq.n	19a00 <__aeabi_i2d+0x68>
   1999e:	17c3      	asrs	r3, r0, #31
   199a0:	18c4      	adds	r4, r0, r3
   199a2:	405c      	eors	r4, r3
   199a4:	0fc5      	lsrs	r5, r0, #31
   199a6:	0020      	movs	r0, r4
   199a8:	f000 f8c2 	bl	19b30 <__clzsi2>
   199ac:	4b17      	ldr	r3, [pc, #92]	; (19a0c <__aeabi_i2d+0x74>)
   199ae:	4a18      	ldr	r2, [pc, #96]	; (19a10 <__aeabi_i2d+0x78>)
   199b0:	1a1b      	subs	r3, r3, r0
   199b2:	1ad2      	subs	r2, r2, r3
   199b4:	2a1f      	cmp	r2, #31
   199b6:	dd18      	ble.n	199ea <__aeabi_i2d+0x52>
   199b8:	4a16      	ldr	r2, [pc, #88]	; (19a14 <__aeabi_i2d+0x7c>)
   199ba:	1ad2      	subs	r2, r2, r3
   199bc:	4094      	lsls	r4, r2
   199be:	2200      	movs	r2, #0
   199c0:	0324      	lsls	r4, r4, #12
   199c2:	055b      	lsls	r3, r3, #21
   199c4:	0b24      	lsrs	r4, r4, #12
   199c6:	0d5b      	lsrs	r3, r3, #21
   199c8:	2100      	movs	r1, #0
   199ca:	0010      	movs	r0, r2
   199cc:	0324      	lsls	r4, r4, #12
   199ce:	0d0a      	lsrs	r2, r1, #20
   199d0:	0b24      	lsrs	r4, r4, #12
   199d2:	0512      	lsls	r2, r2, #20
   199d4:	4322      	orrs	r2, r4
   199d6:	4c10      	ldr	r4, [pc, #64]	; (19a18 <__aeabi_i2d+0x80>)
   199d8:	051b      	lsls	r3, r3, #20
   199da:	4022      	ands	r2, r4
   199dc:	4313      	orrs	r3, r2
   199de:	005b      	lsls	r3, r3, #1
   199e0:	07ed      	lsls	r5, r5, #31
   199e2:	085b      	lsrs	r3, r3, #1
   199e4:	432b      	orrs	r3, r5
   199e6:	0019      	movs	r1, r3
   199e8:	bd70      	pop	{r4, r5, r6, pc}
   199ea:	0021      	movs	r1, r4
   199ec:	4091      	lsls	r1, r2
   199ee:	000a      	movs	r2, r1
   199f0:	210b      	movs	r1, #11
   199f2:	1a08      	subs	r0, r1, r0
   199f4:	40c4      	lsrs	r4, r0
   199f6:	055b      	lsls	r3, r3, #21
   199f8:	0324      	lsls	r4, r4, #12
   199fa:	0b24      	lsrs	r4, r4, #12
   199fc:	0d5b      	lsrs	r3, r3, #21
   199fe:	e7e3      	b.n	199c8 <__aeabi_i2d+0x30>
   19a00:	2500      	movs	r5, #0
   19a02:	2300      	movs	r3, #0
   19a04:	2400      	movs	r4, #0
   19a06:	2200      	movs	r2, #0
   19a08:	e7de      	b.n	199c8 <__aeabi_i2d+0x30>
   19a0a:	46c0      	nop			; (mov r8, r8)
   19a0c:	0000041e 	.word	0x0000041e
   19a10:	00000433 	.word	0x00000433
   19a14:	00000413 	.word	0x00000413
   19a18:	800fffff 	.word	0x800fffff

00019a1c <__aeabi_ui2d>:
   19a1c:	b510      	push	{r4, lr}
   19a1e:	1e04      	subs	r4, r0, #0
   19a20:	d028      	beq.n	19a74 <__aeabi_ui2d+0x58>
   19a22:	f000 f885 	bl	19b30 <__clzsi2>
   19a26:	4b15      	ldr	r3, [pc, #84]	; (19a7c <__aeabi_ui2d+0x60>)
   19a28:	4a15      	ldr	r2, [pc, #84]	; (19a80 <__aeabi_ui2d+0x64>)
   19a2a:	1a1b      	subs	r3, r3, r0
   19a2c:	1ad2      	subs	r2, r2, r3
   19a2e:	2a1f      	cmp	r2, #31
   19a30:	dd15      	ble.n	19a5e <__aeabi_ui2d+0x42>
   19a32:	4a14      	ldr	r2, [pc, #80]	; (19a84 <__aeabi_ui2d+0x68>)
   19a34:	1ad2      	subs	r2, r2, r3
   19a36:	4094      	lsls	r4, r2
   19a38:	2200      	movs	r2, #0
   19a3a:	0324      	lsls	r4, r4, #12
   19a3c:	055b      	lsls	r3, r3, #21
   19a3e:	0b24      	lsrs	r4, r4, #12
   19a40:	0d5b      	lsrs	r3, r3, #21
   19a42:	2100      	movs	r1, #0
   19a44:	0010      	movs	r0, r2
   19a46:	0324      	lsls	r4, r4, #12
   19a48:	0d0a      	lsrs	r2, r1, #20
   19a4a:	0b24      	lsrs	r4, r4, #12
   19a4c:	0512      	lsls	r2, r2, #20
   19a4e:	4322      	orrs	r2, r4
   19a50:	4c0d      	ldr	r4, [pc, #52]	; (19a88 <__aeabi_ui2d+0x6c>)
   19a52:	051b      	lsls	r3, r3, #20
   19a54:	4022      	ands	r2, r4
   19a56:	4313      	orrs	r3, r2
   19a58:	005b      	lsls	r3, r3, #1
   19a5a:	0859      	lsrs	r1, r3, #1
   19a5c:	bd10      	pop	{r4, pc}
   19a5e:	0021      	movs	r1, r4
   19a60:	4091      	lsls	r1, r2
   19a62:	000a      	movs	r2, r1
   19a64:	210b      	movs	r1, #11
   19a66:	1a08      	subs	r0, r1, r0
   19a68:	40c4      	lsrs	r4, r0
   19a6a:	055b      	lsls	r3, r3, #21
   19a6c:	0324      	lsls	r4, r4, #12
   19a6e:	0b24      	lsrs	r4, r4, #12
   19a70:	0d5b      	lsrs	r3, r3, #21
   19a72:	e7e6      	b.n	19a42 <__aeabi_ui2d+0x26>
   19a74:	2300      	movs	r3, #0
   19a76:	2400      	movs	r4, #0
   19a78:	2200      	movs	r2, #0
   19a7a:	e7e2      	b.n	19a42 <__aeabi_ui2d+0x26>
   19a7c:	0000041e 	.word	0x0000041e
   19a80:	00000433 	.word	0x00000433
   19a84:	00000413 	.word	0x00000413
   19a88:	800fffff 	.word	0x800fffff

00019a8c <__aeabi_f2d>:
   19a8c:	0041      	lsls	r1, r0, #1
   19a8e:	0e09      	lsrs	r1, r1, #24
   19a90:	1c4b      	adds	r3, r1, #1
   19a92:	b570      	push	{r4, r5, r6, lr}
   19a94:	b2db      	uxtb	r3, r3
   19a96:	0246      	lsls	r6, r0, #9
   19a98:	0a75      	lsrs	r5, r6, #9
   19a9a:	0fc4      	lsrs	r4, r0, #31
   19a9c:	2b01      	cmp	r3, #1
   19a9e:	dd14      	ble.n	19aca <__aeabi_f2d+0x3e>
   19aa0:	23e0      	movs	r3, #224	; 0xe0
   19aa2:	009b      	lsls	r3, r3, #2
   19aa4:	076d      	lsls	r5, r5, #29
   19aa6:	0b36      	lsrs	r6, r6, #12
   19aa8:	18cb      	adds	r3, r1, r3
   19aaa:	2100      	movs	r1, #0
   19aac:	0d0a      	lsrs	r2, r1, #20
   19aae:	0028      	movs	r0, r5
   19ab0:	0512      	lsls	r2, r2, #20
   19ab2:	4d1c      	ldr	r5, [pc, #112]	; (19b24 <__aeabi_f2d+0x98>)
   19ab4:	4332      	orrs	r2, r6
   19ab6:	055b      	lsls	r3, r3, #21
   19ab8:	402a      	ands	r2, r5
   19aba:	085b      	lsrs	r3, r3, #1
   19abc:	4313      	orrs	r3, r2
   19abe:	005b      	lsls	r3, r3, #1
   19ac0:	07e4      	lsls	r4, r4, #31
   19ac2:	085b      	lsrs	r3, r3, #1
   19ac4:	4323      	orrs	r3, r4
   19ac6:	0019      	movs	r1, r3
   19ac8:	bd70      	pop	{r4, r5, r6, pc}
   19aca:	2900      	cmp	r1, #0
   19acc:	d114      	bne.n	19af8 <__aeabi_f2d+0x6c>
   19ace:	2d00      	cmp	r5, #0
   19ad0:	d01e      	beq.n	19b10 <__aeabi_f2d+0x84>
   19ad2:	0028      	movs	r0, r5
   19ad4:	f000 f82c 	bl	19b30 <__clzsi2>
   19ad8:	280a      	cmp	r0, #10
   19ada:	dc1c      	bgt.n	19b16 <__aeabi_f2d+0x8a>
   19adc:	230b      	movs	r3, #11
   19ade:	002a      	movs	r2, r5
   19ae0:	1a1b      	subs	r3, r3, r0
   19ae2:	40da      	lsrs	r2, r3
   19ae4:	0003      	movs	r3, r0
   19ae6:	3315      	adds	r3, #21
   19ae8:	409d      	lsls	r5, r3
   19aea:	4b0f      	ldr	r3, [pc, #60]	; (19b28 <__aeabi_f2d+0x9c>)
   19aec:	0312      	lsls	r2, r2, #12
   19aee:	1a1b      	subs	r3, r3, r0
   19af0:	055b      	lsls	r3, r3, #21
   19af2:	0b16      	lsrs	r6, r2, #12
   19af4:	0d5b      	lsrs	r3, r3, #21
   19af6:	e7d8      	b.n	19aaa <__aeabi_f2d+0x1e>
   19af8:	2d00      	cmp	r5, #0
   19afa:	d006      	beq.n	19b0a <__aeabi_f2d+0x7e>
   19afc:	0b32      	lsrs	r2, r6, #12
   19afe:	2680      	movs	r6, #128	; 0x80
   19b00:	0336      	lsls	r6, r6, #12
   19b02:	076d      	lsls	r5, r5, #29
   19b04:	4316      	orrs	r6, r2
   19b06:	4b09      	ldr	r3, [pc, #36]	; (19b2c <__aeabi_f2d+0xa0>)
   19b08:	e7cf      	b.n	19aaa <__aeabi_f2d+0x1e>
   19b0a:	4b08      	ldr	r3, [pc, #32]	; (19b2c <__aeabi_f2d+0xa0>)
   19b0c:	2600      	movs	r6, #0
   19b0e:	e7cc      	b.n	19aaa <__aeabi_f2d+0x1e>
   19b10:	2300      	movs	r3, #0
   19b12:	2600      	movs	r6, #0
   19b14:	e7c9      	b.n	19aaa <__aeabi_f2d+0x1e>
   19b16:	0003      	movs	r3, r0
   19b18:	002a      	movs	r2, r5
   19b1a:	3b0b      	subs	r3, #11
   19b1c:	409a      	lsls	r2, r3
   19b1e:	2500      	movs	r5, #0
   19b20:	e7e3      	b.n	19aea <__aeabi_f2d+0x5e>
   19b22:	46c0      	nop			; (mov r8, r8)
   19b24:	800fffff 	.word	0x800fffff
   19b28:	00000389 	.word	0x00000389
   19b2c:	000007ff 	.word	0x000007ff

00019b30 <__clzsi2>:
   19b30:	211c      	movs	r1, #28
   19b32:	2301      	movs	r3, #1
   19b34:	041b      	lsls	r3, r3, #16
   19b36:	4298      	cmp	r0, r3
   19b38:	d301      	bcc.n	19b3e <__clzsi2+0xe>
   19b3a:	0c00      	lsrs	r0, r0, #16
   19b3c:	3910      	subs	r1, #16
   19b3e:	0a1b      	lsrs	r3, r3, #8
   19b40:	4298      	cmp	r0, r3
   19b42:	d301      	bcc.n	19b48 <__clzsi2+0x18>
   19b44:	0a00      	lsrs	r0, r0, #8
   19b46:	3908      	subs	r1, #8
   19b48:	091b      	lsrs	r3, r3, #4
   19b4a:	4298      	cmp	r0, r3
   19b4c:	d301      	bcc.n	19b52 <__clzsi2+0x22>
   19b4e:	0900      	lsrs	r0, r0, #4
   19b50:	3904      	subs	r1, #4
   19b52:	a202      	add	r2, pc, #8	; (adr r2, 19b5c <__clzsi2+0x2c>)
   19b54:	5c10      	ldrb	r0, [r2, r0]
   19b56:	1840      	adds	r0, r0, r1
   19b58:	4770      	bx	lr
   19b5a:	46c0      	nop			; (mov r8, r8)
   19b5c:	02020304 	.word	0x02020304
   19b60:	01010101 	.word	0x01010101
	...

00019b6c <__clzdi2>:
   19b6c:	b510      	push	{r4, lr}
   19b6e:	2900      	cmp	r1, #0
   19b70:	d103      	bne.n	19b7a <__clzdi2+0xe>
   19b72:	f7ff ffdd 	bl	19b30 <__clzsi2>
   19b76:	3020      	adds	r0, #32
   19b78:	e002      	b.n	19b80 <__clzdi2+0x14>
   19b7a:	1c08      	adds	r0, r1, #0
   19b7c:	f7ff ffd8 	bl	19b30 <__clzsi2>
   19b80:	bd10      	pop	{r4, pc}
   19b82:	46c0      	nop			; (mov r8, r8)

00019b84 <ffs>:
   19b84:	b510      	push	{r4, lr}
   19b86:	2200      	movs	r2, #0
   19b88:	2800      	cmp	r0, #0
   19b8a:	d007      	beq.n	19b9c <ffs+0x18>
   19b8c:	2300      	movs	r3, #0
   19b8e:	2401      	movs	r4, #1
   19b90:	0001      	movs	r1, r0
   19b92:	4119      	asrs	r1, r3
   19b94:	1c5a      	adds	r2, r3, #1
   19b96:	0013      	movs	r3, r2
   19b98:	420c      	tst	r4, r1
   19b9a:	d0f9      	beq.n	19b90 <ffs+0xc>
   19b9c:	0010      	movs	r0, r2
   19b9e:	bd10      	pop	{r4, pc}

00019ba0 <__libc_init_array>:
   19ba0:	b570      	push	{r4, r5, r6, lr}
   19ba2:	4e0d      	ldr	r6, [pc, #52]	; (19bd8 <__libc_init_array+0x38>)
   19ba4:	4d0d      	ldr	r5, [pc, #52]	; (19bdc <__libc_init_array+0x3c>)
   19ba6:	2400      	movs	r4, #0
   19ba8:	1bad      	subs	r5, r5, r6
   19baa:	10ad      	asrs	r5, r5, #2
   19bac:	d005      	beq.n	19bba <__libc_init_array+0x1a>
   19bae:	00a3      	lsls	r3, r4, #2
   19bb0:	58f3      	ldr	r3, [r6, r3]
   19bb2:	3401      	adds	r4, #1
   19bb4:	4798      	blx	r3
   19bb6:	42a5      	cmp	r5, r4
   19bb8:	d1f9      	bne.n	19bae <__libc_init_array+0xe>
   19bba:	f006 fa55 	bl	20068 <_init>
   19bbe:	4e08      	ldr	r6, [pc, #32]	; (19be0 <__libc_init_array+0x40>)
   19bc0:	4d08      	ldr	r5, [pc, #32]	; (19be4 <__libc_init_array+0x44>)
   19bc2:	2400      	movs	r4, #0
   19bc4:	1bad      	subs	r5, r5, r6
   19bc6:	10ad      	asrs	r5, r5, #2
   19bc8:	d005      	beq.n	19bd6 <__libc_init_array+0x36>
   19bca:	00a3      	lsls	r3, r4, #2
   19bcc:	58f3      	ldr	r3, [r6, r3]
   19bce:	3401      	adds	r4, #1
   19bd0:	4798      	blx	r3
   19bd2:	42a5      	cmp	r5, r4
   19bd4:	d1f9      	bne.n	19bca <__libc_init_array+0x2a>
   19bd6:	bd70      	pop	{r4, r5, r6, pc}
   19bd8:	00020074 	.word	0x00020074
   19bdc:	00020074 	.word	0x00020074
   19be0:	00020074 	.word	0x00020074
   19be4:	0002007c 	.word	0x0002007c

00019be8 <memset>:
   19be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bea:	0783      	lsls	r3, r0, #30
   19bec:	d043      	beq.n	19c76 <memset+0x8e>
   19bee:	1e54      	subs	r4, r2, #1
   19bf0:	2a00      	cmp	r2, #0
   19bf2:	d03f      	beq.n	19c74 <memset+0x8c>
   19bf4:	b2ce      	uxtb	r6, r1
   19bf6:	0002      	movs	r2, r0
   19bf8:	2503      	movs	r5, #3
   19bfa:	e002      	b.n	19c02 <memset+0x1a>
   19bfc:	001a      	movs	r2, r3
   19bfe:	3c01      	subs	r4, #1
   19c00:	d338      	bcc.n	19c74 <memset+0x8c>
   19c02:	1c53      	adds	r3, r2, #1
   19c04:	7016      	strb	r6, [r2, #0]
   19c06:	422b      	tst	r3, r5
   19c08:	d1f8      	bne.n	19bfc <memset+0x14>
   19c0a:	2c03      	cmp	r4, #3
   19c0c:	d92a      	bls.n	19c64 <memset+0x7c>
   19c0e:	22ff      	movs	r2, #255	; 0xff
   19c10:	400a      	ands	r2, r1
   19c12:	0215      	lsls	r5, r2, #8
   19c14:	4315      	orrs	r5, r2
   19c16:	042a      	lsls	r2, r5, #16
   19c18:	4315      	orrs	r5, r2
   19c1a:	2c0f      	cmp	r4, #15
   19c1c:	d914      	bls.n	19c48 <memset+0x60>
   19c1e:	0027      	movs	r7, r4
   19c20:	001a      	movs	r2, r3
   19c22:	3f10      	subs	r7, #16
   19c24:	093e      	lsrs	r6, r7, #4
   19c26:	3601      	adds	r6, #1
   19c28:	0136      	lsls	r6, r6, #4
   19c2a:	199e      	adds	r6, r3, r6
   19c2c:	6015      	str	r5, [r2, #0]
   19c2e:	6055      	str	r5, [r2, #4]
   19c30:	6095      	str	r5, [r2, #8]
   19c32:	60d5      	str	r5, [r2, #12]
   19c34:	3210      	adds	r2, #16
   19c36:	4296      	cmp	r6, r2
   19c38:	d1f8      	bne.n	19c2c <memset+0x44>
   19c3a:	220f      	movs	r2, #15
   19c3c:	4397      	bics	r7, r2
   19c3e:	3710      	adds	r7, #16
   19c40:	19db      	adds	r3, r3, r7
   19c42:	4014      	ands	r4, r2
   19c44:	2c03      	cmp	r4, #3
   19c46:	d90d      	bls.n	19c64 <memset+0x7c>
   19c48:	001a      	movs	r2, r3
   19c4a:	1f27      	subs	r7, r4, #4
   19c4c:	08be      	lsrs	r6, r7, #2
   19c4e:	3601      	adds	r6, #1
   19c50:	00b6      	lsls	r6, r6, #2
   19c52:	199e      	adds	r6, r3, r6
   19c54:	c220      	stmia	r2!, {r5}
   19c56:	42b2      	cmp	r2, r6
   19c58:	d1fc      	bne.n	19c54 <memset+0x6c>
   19c5a:	2203      	movs	r2, #3
   19c5c:	4397      	bics	r7, r2
   19c5e:	3704      	adds	r7, #4
   19c60:	19db      	adds	r3, r3, r7
   19c62:	4014      	ands	r4, r2
   19c64:	2c00      	cmp	r4, #0
   19c66:	d005      	beq.n	19c74 <memset+0x8c>
   19c68:	b2c9      	uxtb	r1, r1
   19c6a:	191c      	adds	r4, r3, r4
   19c6c:	7019      	strb	r1, [r3, #0]
   19c6e:	3301      	adds	r3, #1
   19c70:	429c      	cmp	r4, r3
   19c72:	d1fb      	bne.n	19c6c <memset+0x84>
   19c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c76:	0014      	movs	r4, r2
   19c78:	0003      	movs	r3, r0
   19c7a:	e7c6      	b.n	19c0a <memset+0x22>

00019c7c <printf>:
   19c7c:	b40f      	push	{r0, r1, r2, r3}
   19c7e:	b500      	push	{lr}
   19c80:	4906      	ldr	r1, [pc, #24]	; (19c9c <printf+0x20>)
   19c82:	b083      	sub	sp, #12
   19c84:	ab04      	add	r3, sp, #16
   19c86:	6808      	ldr	r0, [r1, #0]
   19c88:	cb04      	ldmia	r3!, {r2}
   19c8a:	6881      	ldr	r1, [r0, #8]
   19c8c:	9301      	str	r3, [sp, #4]
   19c8e:	f000 f893 	bl	19db8 <_vfprintf_r>
   19c92:	b003      	add	sp, #12
   19c94:	bc08      	pop	{r3}
   19c96:	b004      	add	sp, #16
   19c98:	4718      	bx	r3
   19c9a:	46c0      	nop			; (mov r8, r8)
   19c9c:	20000118 	.word	0x20000118

00019ca0 <_puts_r>:
   19ca0:	b530      	push	{r4, r5, lr}
   19ca2:	0004      	movs	r4, r0
   19ca4:	b089      	sub	sp, #36	; 0x24
   19ca6:	0008      	movs	r0, r1
   19ca8:	000d      	movs	r5, r1
   19caa:	f000 f853 	bl	19d54 <strlen>
   19cae:	ab04      	add	r3, sp, #16
   19cb0:	4a21      	ldr	r2, [pc, #132]	; (19d38 <_puts_r+0x98>)
   19cb2:	9301      	str	r3, [sp, #4]
   19cb4:	2302      	movs	r3, #2
   19cb6:	9206      	str	r2, [sp, #24]
   19cb8:	2201      	movs	r2, #1
   19cba:	9302      	str	r3, [sp, #8]
   19cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19cbe:	9005      	str	r0, [sp, #20]
   19cc0:	3001      	adds	r0, #1
   19cc2:	9504      	str	r5, [sp, #16]
   19cc4:	9207      	str	r2, [sp, #28]
   19cc6:	9003      	str	r0, [sp, #12]
   19cc8:	68a5      	ldr	r5, [r4, #8]
   19cca:	2b00      	cmp	r3, #0
   19ccc:	d02f      	beq.n	19d2e <_puts_r+0x8e>
   19cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19cd0:	07db      	lsls	r3, r3, #31
   19cd2:	d424      	bmi.n	19d1e <_puts_r+0x7e>
   19cd4:	230c      	movs	r3, #12
   19cd6:	5eea      	ldrsh	r2, [r5, r3]
   19cd8:	b291      	uxth	r1, r2
   19cda:	058b      	lsls	r3, r1, #22
   19cdc:	d51c      	bpl.n	19d18 <_puts_r+0x78>
   19cde:	2380      	movs	r3, #128	; 0x80
   19ce0:	019b      	lsls	r3, r3, #6
   19ce2:	4219      	tst	r1, r3
   19ce4:	d105      	bne.n	19cf2 <_puts_r+0x52>
   19ce6:	4313      	orrs	r3, r2
   19ce8:	81ab      	strh	r3, [r5, #12]
   19cea:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   19cec:	4b13      	ldr	r3, [pc, #76]	; (19d3c <_puts_r+0x9c>)
   19cee:	4013      	ands	r3, r2
   19cf0:	666b      	str	r3, [r5, #100]	; 0x64
   19cf2:	0020      	movs	r0, r4
   19cf4:	aa01      	add	r2, sp, #4
   19cf6:	0029      	movs	r1, r5
   19cf8:	f002 ff84 	bl	1cc04 <__sfvwrite_r>
   19cfc:	1e44      	subs	r4, r0, #1
   19cfe:	41a0      	sbcs	r0, r4
   19d00:	4244      	negs	r4, r0
   19d02:	200a      	movs	r0, #10
   19d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19d06:	4304      	orrs	r4, r0
   19d08:	07db      	lsls	r3, r3, #31
   19d0a:	d402      	bmi.n	19d12 <_puts_r+0x72>
   19d0c:	89ab      	ldrh	r3, [r5, #12]
   19d0e:	059b      	lsls	r3, r3, #22
   19d10:	d509      	bpl.n	19d26 <_puts_r+0x86>
   19d12:	0020      	movs	r0, r4
   19d14:	b009      	add	sp, #36	; 0x24
   19d16:	bd30      	pop	{r4, r5, pc}
   19d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19d1a:	f003 f93d 	bl	1cf98 <__retarget_lock_acquire_recursive>
   19d1e:	230c      	movs	r3, #12
   19d20:	5eea      	ldrsh	r2, [r5, r3]
   19d22:	b291      	uxth	r1, r2
   19d24:	e7db      	b.n	19cde <_puts_r+0x3e>
   19d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19d28:	f003 f938 	bl	1cf9c <__retarget_lock_release_recursive>
   19d2c:	e7f1      	b.n	19d12 <_puts_r+0x72>
   19d2e:	0020      	movs	r0, r4
   19d30:	f002 fde0 	bl	1c8f4 <__sinit>
   19d34:	e7cb      	b.n	19cce <_puts_r+0x2e>
   19d36:	46c0      	nop			; (mov r8, r8)
   19d38:	0001fc78 	.word	0x0001fc78
   19d3c:	ffffdfff 	.word	0xffffdfff

00019d40 <puts>:
   19d40:	b510      	push	{r4, lr}
   19d42:	4b03      	ldr	r3, [pc, #12]	; (19d50 <puts+0x10>)
   19d44:	0001      	movs	r1, r0
   19d46:	6818      	ldr	r0, [r3, #0]
   19d48:	f7ff ffaa 	bl	19ca0 <_puts_r>
   19d4c:	bd10      	pop	{r4, pc}
   19d4e:	46c0      	nop			; (mov r8, r8)
   19d50:	20000118 	.word	0x20000118

00019d54 <strlen>:
   19d54:	b510      	push	{r4, lr}
   19d56:	0783      	lsls	r3, r0, #30
   19d58:	d025      	beq.n	19da6 <strlen+0x52>
   19d5a:	7803      	ldrb	r3, [r0, #0]
   19d5c:	2b00      	cmp	r3, #0
   19d5e:	d024      	beq.n	19daa <strlen+0x56>
   19d60:	0003      	movs	r3, r0
   19d62:	2103      	movs	r1, #3
   19d64:	e002      	b.n	19d6c <strlen+0x18>
   19d66:	781a      	ldrb	r2, [r3, #0]
   19d68:	2a00      	cmp	r2, #0
   19d6a:	d01a      	beq.n	19da2 <strlen+0x4e>
   19d6c:	3301      	adds	r3, #1
   19d6e:	420b      	tst	r3, r1
   19d70:	d1f9      	bne.n	19d66 <strlen+0x12>
   19d72:	6819      	ldr	r1, [r3, #0]
   19d74:	4a0e      	ldr	r2, [pc, #56]	; (19db0 <strlen+0x5c>)
   19d76:	4c0f      	ldr	r4, [pc, #60]	; (19db4 <strlen+0x60>)
   19d78:	188a      	adds	r2, r1, r2
   19d7a:	438a      	bics	r2, r1
   19d7c:	4222      	tst	r2, r4
   19d7e:	d106      	bne.n	19d8e <strlen+0x3a>
   19d80:	3304      	adds	r3, #4
   19d82:	6819      	ldr	r1, [r3, #0]
   19d84:	4a0a      	ldr	r2, [pc, #40]	; (19db0 <strlen+0x5c>)
   19d86:	188a      	adds	r2, r1, r2
   19d88:	438a      	bics	r2, r1
   19d8a:	4222      	tst	r2, r4
   19d8c:	d0f8      	beq.n	19d80 <strlen+0x2c>
   19d8e:	001a      	movs	r2, r3
   19d90:	781b      	ldrb	r3, [r3, #0]
   19d92:	2b00      	cmp	r3, #0
   19d94:	d003      	beq.n	19d9e <strlen+0x4a>
   19d96:	3201      	adds	r2, #1
   19d98:	7811      	ldrb	r1, [r2, #0]
   19d9a:	2900      	cmp	r1, #0
   19d9c:	d1fb      	bne.n	19d96 <strlen+0x42>
   19d9e:	1a10      	subs	r0, r2, r0
   19da0:	bd10      	pop	{r4, pc}
   19da2:	1a18      	subs	r0, r3, r0
   19da4:	e7fc      	b.n	19da0 <strlen+0x4c>
   19da6:	0003      	movs	r3, r0
   19da8:	e7e3      	b.n	19d72 <strlen+0x1e>
   19daa:	2000      	movs	r0, #0
   19dac:	e7f8      	b.n	19da0 <strlen+0x4c>
   19dae:	46c0      	nop			; (mov r8, r8)
   19db0:	fefefeff 	.word	0xfefefeff
   19db4:	80808080 	.word	0x80808080

00019db8 <_vfprintf_r>:
   19db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dba:	46de      	mov	lr, fp
   19dbc:	464e      	mov	r6, r9
   19dbe:	4645      	mov	r5, r8
   19dc0:	4657      	mov	r7, sl
   19dc2:	b5e0      	push	{r5, r6, r7, lr}
   19dc4:	b0c3      	sub	sp, #268	; 0x10c
   19dc6:	4689      	mov	r9, r1
   19dc8:	0014      	movs	r4, r2
   19dca:	001d      	movs	r5, r3
   19dcc:	930f      	str	r3, [sp, #60]	; 0x3c
   19dce:	0006      	movs	r6, r0
   19dd0:	9006      	str	r0, [sp, #24]
   19dd2:	f003 f8cf 	bl	1cf74 <_localeconv_r>
   19dd6:	6803      	ldr	r3, [r0, #0]
   19dd8:	0018      	movs	r0, r3
   19dda:	9318      	str	r3, [sp, #96]	; 0x60
   19ddc:	f7ff ffba 	bl	19d54 <strlen>
   19de0:	9017      	str	r0, [sp, #92]	; 0x5c
   19de2:	2e00      	cmp	r6, #0
   19de4:	d004      	beq.n	19df0 <_vfprintf_r+0x38>
   19de6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   19de8:	9307      	str	r3, [sp, #28]
   19dea:	2b00      	cmp	r3, #0
   19dec:	d100      	bne.n	19df0 <_vfprintf_r+0x38>
   19dee:	e0a7      	b.n	19f40 <_vfprintf_r+0x188>
   19df0:	464b      	mov	r3, r9
   19df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   19df4:	07db      	lsls	r3, r3, #31
   19df6:	d478      	bmi.n	19eea <_vfprintf_r+0x132>
   19df8:	464b      	mov	r3, r9
   19dfa:	210c      	movs	r1, #12
   19dfc:	5e59      	ldrsh	r1, [r3, r1]
   19dfe:	b28b      	uxth	r3, r1
   19e00:	059a      	lsls	r2, r3, #22
   19e02:	d56e      	bpl.n	19ee2 <_vfprintf_r+0x12a>
   19e04:	2280      	movs	r2, #128	; 0x80
   19e06:	0192      	lsls	r2, r2, #6
   19e08:	4213      	tst	r3, r2
   19e0a:	d109      	bne.n	19e20 <_vfprintf_r+0x68>
   19e0c:	430a      	orrs	r2, r1
   19e0e:	464b      	mov	r3, r9
   19e10:	4649      	mov	r1, r9
   19e12:	819a      	strh	r2, [r3, #12]
   19e14:	6e49      	ldr	r1, [r1, #100]	; 0x64
   19e16:	4bcc      	ldr	r3, [pc, #816]	; (1a148 <_vfprintf_r+0x390>)
   19e18:	400b      	ands	r3, r1
   19e1a:	4649      	mov	r1, r9
   19e1c:	664b      	str	r3, [r1, #100]	; 0x64
   19e1e:	b293      	uxth	r3, r2
   19e20:	071a      	lsls	r2, r3, #28
   19e22:	d567      	bpl.n	19ef4 <_vfprintf_r+0x13c>
   19e24:	464a      	mov	r2, r9
   19e26:	6912      	ldr	r2, [r2, #16]
   19e28:	2a00      	cmp	r2, #0
   19e2a:	d063      	beq.n	19ef4 <_vfprintf_r+0x13c>
   19e2c:	221a      	movs	r2, #26
   19e2e:	401a      	ands	r2, r3
   19e30:	2a0a      	cmp	r2, #10
   19e32:	d100      	bne.n	19e36 <_vfprintf_r+0x7e>
   19e34:	e088      	b.n	19f48 <_vfprintf_r+0x190>
   19e36:	ab32      	add	r3, sp, #200	; 0xc8
   19e38:	9325      	str	r3, [sp, #148]	; 0x94
   19e3a:	2300      	movs	r3, #0
   19e3c:	46cb      	mov	fp, r9
   19e3e:	af25      	add	r7, sp, #148	; 0x94
   19e40:	60bb      	str	r3, [r7, #8]
   19e42:	607b      	str	r3, [r7, #4]
   19e44:	9407      	str	r4, [sp, #28]
   19e46:	9314      	str	r3, [sp, #80]	; 0x50
   19e48:	9316      	str	r3, [sp, #88]	; 0x58
   19e4a:	9315      	str	r3, [sp, #84]	; 0x54
   19e4c:	ae32      	add	r6, sp, #200	; 0xc8
   19e4e:	9319      	str	r3, [sp, #100]	; 0x64
   19e50:	931a      	str	r3, [sp, #104]	; 0x68
   19e52:	930a      	str	r3, [sp, #40]	; 0x28
   19e54:	9c07      	ldr	r4, [sp, #28]
   19e56:	7823      	ldrb	r3, [r4, #0]
   19e58:	2b00      	cmp	r3, #0
   19e5a:	d101      	bne.n	19e60 <_vfprintf_r+0xa8>
   19e5c:	f000 fd9e 	bl	1a99c <_vfprintf_r+0xbe4>
   19e60:	2b25      	cmp	r3, #37	; 0x25
   19e62:	d103      	bne.n	19e6c <_vfprintf_r+0xb4>
   19e64:	f000 fd9a 	bl	1a99c <_vfprintf_r+0xbe4>
   19e68:	2b25      	cmp	r3, #37	; 0x25
   19e6a:	d003      	beq.n	19e74 <_vfprintf_r+0xbc>
   19e6c:	3401      	adds	r4, #1
   19e6e:	7823      	ldrb	r3, [r4, #0]
   19e70:	2b00      	cmp	r3, #0
   19e72:	d1f9      	bne.n	19e68 <_vfprintf_r+0xb0>
   19e74:	9b07      	ldr	r3, [sp, #28]
   19e76:	1ae5      	subs	r5, r4, r3
   19e78:	d010      	beq.n	19e9c <_vfprintf_r+0xe4>
   19e7a:	9b07      	ldr	r3, [sp, #28]
   19e7c:	6075      	str	r5, [r6, #4]
   19e7e:	6033      	str	r3, [r6, #0]
   19e80:	68bb      	ldr	r3, [r7, #8]
   19e82:	195b      	adds	r3, r3, r5
   19e84:	60bb      	str	r3, [r7, #8]
   19e86:	687b      	ldr	r3, [r7, #4]
   19e88:	3301      	adds	r3, #1
   19e8a:	607b      	str	r3, [r7, #4]
   19e8c:	2b07      	cmp	r3, #7
   19e8e:	dc4c      	bgt.n	19f2a <_vfprintf_r+0x172>
   19e90:	3608      	adds	r6, #8
   19e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e94:	469c      	mov	ip, r3
   19e96:	44ac      	add	ip, r5
   19e98:	4663      	mov	r3, ip
   19e9a:	930a      	str	r3, [sp, #40]	; 0x28
   19e9c:	7823      	ldrb	r3, [r4, #0]
   19e9e:	2b00      	cmp	r3, #0
   19ea0:	d101      	bne.n	19ea6 <_vfprintf_r+0xee>
   19ea2:	f000 fc99 	bl	1a7d8 <_vfprintf_r+0xa20>
   19ea6:	1c63      	adds	r3, r4, #1
   19ea8:	9307      	str	r3, [sp, #28]
   19eaa:	2300      	movs	r3, #0
   19eac:	aa16      	add	r2, sp, #88	; 0x58
   19eae:	77d3      	strb	r3, [r2, #31]
   19eb0:	2201      	movs	r2, #1
   19eb2:	4252      	negs	r2, r2
   19eb4:	4692      	mov	sl, r2
   19eb6:	2200      	movs	r2, #0
   19eb8:	920b      	str	r2, [sp, #44]	; 0x2c
   19eba:	3220      	adds	r2, #32
   19ebc:	4691      	mov	r9, r2
   19ebe:	3220      	adds	r2, #32
   19ec0:	7863      	ldrb	r3, [r4, #1]
   19ec2:	2100      	movs	r1, #0
   19ec4:	2000      	movs	r0, #0
   19ec6:	2400      	movs	r4, #0
   19ec8:	4694      	mov	ip, r2
   19eca:	9a07      	ldr	r2, [sp, #28]
   19ecc:	3201      	adds	r2, #1
   19ece:	9207      	str	r2, [sp, #28]
   19ed0:	001a      	movs	r2, r3
   19ed2:	3a20      	subs	r2, #32
   19ed4:	2a58      	cmp	r2, #88	; 0x58
   19ed6:	d900      	bls.n	19eda <_vfprintf_r+0x122>
   19ed8:	e2e7      	b.n	1a4aa <_vfprintf_r+0x6f2>
   19eda:	4d9c      	ldr	r5, [pc, #624]	; (1a14c <_vfprintf_r+0x394>)
   19edc:	0092      	lsls	r2, r2, #2
   19ede:	58aa      	ldr	r2, [r5, r2]
   19ee0:	4697      	mov	pc, r2
   19ee2:	464b      	mov	r3, r9
   19ee4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   19ee6:	f003 f857 	bl	1cf98 <__retarget_lock_acquire_recursive>
   19eea:	464b      	mov	r3, r9
   19eec:	210c      	movs	r1, #12
   19eee:	5e59      	ldrsh	r1, [r3, r1]
   19ef0:	b28b      	uxth	r3, r1
   19ef2:	e787      	b.n	19e04 <_vfprintf_r+0x4c>
   19ef4:	4649      	mov	r1, r9
   19ef6:	9806      	ldr	r0, [sp, #24]
   19ef8:	f001 fb0e 	bl	1b518 <__swsetup_r>
   19efc:	464b      	mov	r3, r9
   19efe:	2800      	cmp	r0, #0
   19f00:	d03a      	beq.n	19f78 <_vfprintf_r+0x1c0>
   19f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   19f04:	07db      	lsls	r3, r3, #31
   19f06:	d405      	bmi.n	19f14 <_vfprintf_r+0x15c>
   19f08:	464b      	mov	r3, r9
   19f0a:	899b      	ldrh	r3, [r3, #12]
   19f0c:	059b      	lsls	r3, r3, #22
   19f0e:	d401      	bmi.n	19f14 <_vfprintf_r+0x15c>
   19f10:	f000 ffcf 	bl	1aeb2 <_vfprintf_r+0x10fa>
   19f14:	2301      	movs	r3, #1
   19f16:	425b      	negs	r3, r3
   19f18:	930a      	str	r3, [sp, #40]	; 0x28
   19f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   19f1c:	b043      	add	sp, #268	; 0x10c
   19f1e:	bc3c      	pop	{r2, r3, r4, r5}
   19f20:	4690      	mov	r8, r2
   19f22:	4699      	mov	r9, r3
   19f24:	46a2      	mov	sl, r4
   19f26:	46ab      	mov	fp, r5
   19f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f2a:	003a      	movs	r2, r7
   19f2c:	4659      	mov	r1, fp
   19f2e:	9806      	ldr	r0, [sp, #24]
   19f30:	f004 fa02 	bl	1e338 <__sprint_r>
   19f34:	2800      	cmp	r0, #0
   19f36:	d001      	beq.n	19f3c <_vfprintf_r+0x184>
   19f38:	f000 fcce 	bl	1a8d8 <_vfprintf_r+0xb20>
   19f3c:	ae32      	add	r6, sp, #200	; 0xc8
   19f3e:	e7a8      	b.n	19e92 <_vfprintf_r+0xda>
   19f40:	9806      	ldr	r0, [sp, #24]
   19f42:	f002 fcd7 	bl	1c8f4 <__sinit>
   19f46:	e753      	b.n	19df0 <_vfprintf_r+0x38>
   19f48:	464a      	mov	r2, r9
   19f4a:	210e      	movs	r1, #14
   19f4c:	5e52      	ldrsh	r2, [r2, r1]
   19f4e:	2a00      	cmp	r2, #0
   19f50:	da00      	bge.n	19f54 <_vfprintf_r+0x19c>
   19f52:	e770      	b.n	19e36 <_vfprintf_r+0x7e>
   19f54:	464a      	mov	r2, r9
   19f56:	6e52      	ldr	r2, [r2, #100]	; 0x64
   19f58:	07d2      	lsls	r2, r2, #31
   19f5a:	d405      	bmi.n	19f68 <_vfprintf_r+0x1b0>
   19f5c:	059b      	lsls	r3, r3, #22
   19f5e:	d403      	bmi.n	19f68 <_vfprintf_r+0x1b0>
   19f60:	464b      	mov	r3, r9
   19f62:	6d98      	ldr	r0, [r3, #88]	; 0x58
   19f64:	f003 f81a 	bl	1cf9c <__retarget_lock_release_recursive>
   19f68:	002b      	movs	r3, r5
   19f6a:	0022      	movs	r2, r4
   19f6c:	4649      	mov	r1, r9
   19f6e:	9806      	ldr	r0, [sp, #24]
   19f70:	f001 fa8e 	bl	1b490 <__sbprintf>
   19f74:	900a      	str	r0, [sp, #40]	; 0x28
   19f76:	e7d0      	b.n	19f1a <_vfprintf_r+0x162>
   19f78:	899b      	ldrh	r3, [r3, #12]
   19f7a:	e757      	b.n	19e2c <_vfprintf_r+0x74>
   19f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19f7e:	920f      	str	r2, [sp, #60]	; 0x3c
   19f80:	425b      	negs	r3, r3
   19f82:	930b      	str	r3, [sp, #44]	; 0x2c
   19f84:	2304      	movs	r3, #4
   19f86:	431c      	orrs	r4, r3
   19f88:	9b07      	ldr	r3, [sp, #28]
   19f8a:	781b      	ldrb	r3, [r3, #0]
   19f8c:	e79d      	b.n	19eca <_vfprintf_r+0x112>
   19f8e:	9b07      	ldr	r3, [sp, #28]
   19f90:	2101      	movs	r1, #1
   19f92:	781b      	ldrb	r3, [r3, #0]
   19f94:	202b      	movs	r0, #43	; 0x2b
   19f96:	e798      	b.n	19eca <_vfprintf_r+0x112>
   19f98:	9b07      	ldr	r3, [sp, #28]
   19f9a:	1c5a      	adds	r2, r3, #1
   19f9c:	781b      	ldrb	r3, [r3, #0]
   19f9e:	4690      	mov	r8, r2
   19fa0:	2b2a      	cmp	r3, #42	; 0x2a
   19fa2:	d101      	bne.n	19fa8 <_vfprintf_r+0x1f0>
   19fa4:	f001 fa38 	bl	1b418 <_vfprintf_r+0x1660>
   19fa8:	001a      	movs	r2, r3
   19faa:	2500      	movs	r5, #0
   19fac:	3a30      	subs	r2, #48	; 0x30
   19fae:	46aa      	mov	sl, r5
   19fb0:	2a09      	cmp	r2, #9
   19fb2:	d901      	bls.n	19fb8 <_vfprintf_r+0x200>
   19fb4:	f001 f96d 	bl	1b292 <_vfprintf_r+0x14da>
   19fb8:	0025      	movs	r5, r4
   19fba:	4643      	mov	r3, r8
   19fbc:	4654      	mov	r4, sl
   19fbe:	4688      	mov	r8, r1
   19fc0:	4682      	mov	sl, r0
   19fc2:	00a1      	lsls	r1, r4, #2
   19fc4:	190c      	adds	r4, r1, r4
   19fc6:	7818      	ldrb	r0, [r3, #0]
   19fc8:	0064      	lsls	r4, r4, #1
   19fca:	18a4      	adds	r4, r4, r2
   19fcc:	0002      	movs	r2, r0
   19fce:	1c59      	adds	r1, r3, #1
   19fd0:	3a30      	subs	r2, #48	; 0x30
   19fd2:	000b      	movs	r3, r1
   19fd4:	2a09      	cmp	r2, #9
   19fd6:	d9f4      	bls.n	19fc2 <_vfprintf_r+0x20a>
   19fd8:	9107      	str	r1, [sp, #28]
   19fda:	0003      	movs	r3, r0
   19fdc:	4641      	mov	r1, r8
   19fde:	4650      	mov	r0, sl
   19fe0:	46a2      	mov	sl, r4
   19fe2:	002c      	movs	r4, r5
   19fe4:	e774      	b.n	19ed0 <_vfprintf_r+0x118>
   19fe6:	9312      	str	r3, [sp, #72]	; 0x48
   19fe8:	2900      	cmp	r1, #0
   19fea:	d001      	beq.n	19ff0 <_vfprintf_r+0x238>
   19fec:	f001 fa2e 	bl	1b44c <_vfprintf_r+0x1694>
   19ff0:	4b57      	ldr	r3, [pc, #348]	; (1a150 <_vfprintf_r+0x398>)
   19ff2:	9319      	str	r3, [sp, #100]	; 0x64
   19ff4:	06a3      	lsls	r3, r4, #26
   19ff6:	d501      	bpl.n	19ffc <_vfprintf_r+0x244>
   19ff8:	f000 fe9a 	bl	1ad30 <_vfprintf_r+0xf78>
   19ffc:	06e3      	lsls	r3, r4, #27
   19ffe:	d501      	bpl.n	1a004 <_vfprintf_r+0x24c>
   1a000:	f000 fd9a 	bl	1ab38 <_vfprintf_r+0xd80>
   1a004:	0663      	lsls	r3, r4, #25
   1a006:	d401      	bmi.n	1a00c <_vfprintf_r+0x254>
   1a008:	f000 fd96 	bl	1ab38 <_vfprintf_r+0xd80>
   1a00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a00e:	881a      	ldrh	r2, [r3, #0]
   1a010:	920c      	str	r2, [sp, #48]	; 0x30
   1a012:	2200      	movs	r2, #0
   1a014:	3304      	adds	r3, #4
   1a016:	920d      	str	r2, [sp, #52]	; 0x34
   1a018:	930f      	str	r3, [sp, #60]	; 0x3c
   1a01a:	07e3      	lsls	r3, r4, #31
   1a01c:	d401      	bmi.n	1a022 <_vfprintf_r+0x26a>
   1a01e:	f000 fd76 	bl	1ab0e <_vfprintf_r+0xd56>
   1a022:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a026:	000b      	movs	r3, r1
   1a028:	4313      	orrs	r3, r2
   1a02a:	001a      	movs	r2, r3
   1a02c:	2302      	movs	r3, #2
   1a02e:	2a00      	cmp	r2, #0
   1a030:	d008      	beq.n	1a044 <_vfprintf_r+0x28c>
   1a032:	2030      	movs	r0, #48	; 0x30
   1a034:	a91e      	add	r1, sp, #120	; 0x78
   1a036:	7008      	strb	r0, [r1, #0]
   1a038:	2548      	movs	r5, #72	; 0x48
   1a03a:	4668      	mov	r0, sp
   1a03c:	1940      	adds	r0, r0, r5
   1a03e:	7800      	ldrb	r0, [r0, #0]
   1a040:	431c      	orrs	r4, r3
   1a042:	7048      	strb	r0, [r1, #1]
   1a044:	2100      	movs	r1, #0
   1a046:	4688      	mov	r8, r1
   1a048:	a816      	add	r0, sp, #88	; 0x58
   1a04a:	77c1      	strb	r1, [r0, #31]
   1a04c:	4651      	mov	r1, sl
   1a04e:	3101      	adds	r1, #1
   1a050:	d100      	bne.n	1a054 <_vfprintf_r+0x29c>
   1a052:	e0e6      	b.n	1a222 <_vfprintf_r+0x46a>
   1a054:	2180      	movs	r1, #128	; 0x80
   1a056:	0020      	movs	r0, r4
   1a058:	4388      	bics	r0, r1
   1a05a:	9009      	str	r0, [sp, #36]	; 0x24
   1a05c:	2a00      	cmp	r2, #0
   1a05e:	d000      	beq.n	1a062 <_vfprintf_r+0x2aa>
   1a060:	e0e3      	b.n	1a22a <_vfprintf_r+0x472>
   1a062:	4652      	mov	r2, sl
   1a064:	2a00      	cmp	r2, #0
   1a066:	d001      	beq.n	1a06c <_vfprintf_r+0x2b4>
   1a068:	f000 fc38 	bl	1a8dc <_vfprintf_r+0xb24>
   1a06c:	2b00      	cmp	r3, #0
   1a06e:	d001      	beq.n	1a074 <_vfprintf_r+0x2bc>
   1a070:	f000 fd0c 	bl	1aa8c <_vfprintf_r+0xcd4>
   1a074:	2001      	movs	r0, #1
   1a076:	ab32      	add	r3, sp, #200	; 0xc8
   1a078:	4020      	ands	r0, r4
   1a07a:	900e      	str	r0, [sp, #56]	; 0x38
   1a07c:	9311      	str	r3, [sp, #68]	; 0x44
   1a07e:	d008      	beq.n	1a092 <_vfprintf_r+0x2da>
   1a080:	2327      	movs	r3, #39	; 0x27
   1a082:	2130      	movs	r1, #48	; 0x30
   1a084:	aa28      	add	r2, sp, #160	; 0xa0
   1a086:	54d1      	strb	r1, [r2, r3]
   1a088:	aa16      	add	r2, sp, #88	; 0x58
   1a08a:	4694      	mov	ip, r2
   1a08c:	3348      	adds	r3, #72	; 0x48
   1a08e:	4463      	add	r3, ip
   1a090:	9311      	str	r3, [sp, #68]	; 0x44
   1a092:	4653      	mov	r3, sl
   1a094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a096:	9308      	str	r3, [sp, #32]
   1a098:	4592      	cmp	sl, r2
   1a09a:	da00      	bge.n	1a09e <_vfprintf_r+0x2e6>
   1a09c:	9208      	str	r2, [sp, #32]
   1a09e:	2300      	movs	r3, #0
   1a0a0:	9313      	str	r3, [sp, #76]	; 0x4c
   1a0a2:	4643      	mov	r3, r8
   1a0a4:	2b00      	cmp	r3, #0
   1a0a6:	d002      	beq.n	1a0ae <_vfprintf_r+0x2f6>
   1a0a8:	9b08      	ldr	r3, [sp, #32]
   1a0aa:	3301      	adds	r3, #1
   1a0ac:	9308      	str	r3, [sp, #32]
   1a0ae:	2302      	movs	r3, #2
   1a0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a0b2:	401a      	ands	r2, r3
   1a0b4:	4691      	mov	r9, r2
   1a0b6:	d002      	beq.n	1a0be <_vfprintf_r+0x306>
   1a0b8:	9b08      	ldr	r3, [sp, #32]
   1a0ba:	3302      	adds	r3, #2
   1a0bc:	9308      	str	r3, [sp, #32]
   1a0be:	2384      	movs	r3, #132	; 0x84
   1a0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a0c2:	401a      	ands	r2, r3
   1a0c4:	9210      	str	r2, [sp, #64]	; 0x40
   1a0c6:	d000      	beq.n	1a0ca <_vfprintf_r+0x312>
   1a0c8:	e207      	b.n	1a4da <_vfprintf_r+0x722>
   1a0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a0cc:	9a08      	ldr	r2, [sp, #32]
   1a0ce:	1a9c      	subs	r4, r3, r2
   1a0d0:	2c00      	cmp	r4, #0
   1a0d2:	dc00      	bgt.n	1a0d6 <_vfprintf_r+0x31e>
   1a0d4:	e201      	b.n	1a4da <_vfprintf_r+0x722>
   1a0d6:	491f      	ldr	r1, [pc, #124]	; (1a154 <_vfprintf_r+0x39c>)
   1a0d8:	68ba      	ldr	r2, [r7, #8]
   1a0da:	687b      	ldr	r3, [r7, #4]
   1a0dc:	4688      	mov	r8, r1
   1a0de:	2c10      	cmp	r4, #16
   1a0e0:	dd21      	ble.n	1a126 <_vfprintf_r+0x36e>
   1a0e2:	0031      	movs	r1, r6
   1a0e4:	2510      	movs	r5, #16
   1a0e6:	465e      	mov	r6, fp
   1a0e8:	e003      	b.n	1a0f2 <_vfprintf_r+0x33a>
   1a0ea:	3c10      	subs	r4, #16
   1a0ec:	3108      	adds	r1, #8
   1a0ee:	2c10      	cmp	r4, #16
   1a0f0:	dd17      	ble.n	1a122 <_vfprintf_r+0x36a>
   1a0f2:	4640      	mov	r0, r8
   1a0f4:	3210      	adds	r2, #16
   1a0f6:	3301      	adds	r3, #1
   1a0f8:	6008      	str	r0, [r1, #0]
   1a0fa:	604d      	str	r5, [r1, #4]
   1a0fc:	60ba      	str	r2, [r7, #8]
   1a0fe:	607b      	str	r3, [r7, #4]
   1a100:	2b07      	cmp	r3, #7
   1a102:	ddf2      	ble.n	1a0ea <_vfprintf_r+0x332>
   1a104:	003a      	movs	r2, r7
   1a106:	0031      	movs	r1, r6
   1a108:	9806      	ldr	r0, [sp, #24]
   1a10a:	f004 f915 	bl	1e338 <__sprint_r>
   1a10e:	2800      	cmp	r0, #0
   1a110:	d001      	beq.n	1a116 <_vfprintf_r+0x35e>
   1a112:	f000 fccf 	bl	1aab4 <_vfprintf_r+0xcfc>
   1a116:	3c10      	subs	r4, #16
   1a118:	68ba      	ldr	r2, [r7, #8]
   1a11a:	687b      	ldr	r3, [r7, #4]
   1a11c:	a932      	add	r1, sp, #200	; 0xc8
   1a11e:	2c10      	cmp	r4, #16
   1a120:	dce7      	bgt.n	1a0f2 <_vfprintf_r+0x33a>
   1a122:	46b3      	mov	fp, r6
   1a124:	000e      	movs	r6, r1
   1a126:	4641      	mov	r1, r8
   1a128:	6074      	str	r4, [r6, #4]
   1a12a:	3301      	adds	r3, #1
   1a12c:	18a4      	adds	r4, r4, r2
   1a12e:	6031      	str	r1, [r6, #0]
   1a130:	60bc      	str	r4, [r7, #8]
   1a132:	607b      	str	r3, [r7, #4]
   1a134:	2b07      	cmp	r3, #7
   1a136:	dd01      	ble.n	1a13c <_vfprintf_r+0x384>
   1a138:	f000 fcae 	bl	1aa98 <_vfprintf_r+0xce0>
   1a13c:	ab16      	add	r3, sp, #88	; 0x58
   1a13e:	7fdb      	ldrb	r3, [r3, #31]
   1a140:	3608      	adds	r6, #8
   1a142:	4698      	mov	r8, r3
   1a144:	e1ca      	b.n	1a4dc <_vfprintf_r+0x724>
   1a146:	46c0      	nop			; (mov r8, r8)
   1a148:	ffffdfff 	.word	0xffffdfff
   1a14c:	0001fc7c 	.word	0x0001fc7c
   1a150:	0001fe04 	.word	0x0001fe04
   1a154:	0001fe24 	.word	0x0001fe24
   1a158:	2200      	movs	r2, #0
   1a15a:	9d07      	ldr	r5, [sp, #28]
   1a15c:	3b30      	subs	r3, #48	; 0x30
   1a15e:	46a8      	mov	r8, r5
   1a160:	920b      	str	r2, [sp, #44]	; 0x2c
   1a162:	001a      	movs	r2, r3
   1a164:	9408      	str	r4, [sp, #32]
   1a166:	002c      	movs	r4, r5
   1a168:	4655      	mov	r5, sl
   1a16a:	4682      	mov	sl, r0
   1a16c:	4640      	mov	r0, r8
   1a16e:	4688      	mov	r8, r1
   1a170:	0011      	movs	r1, r2
   1a172:	2200      	movs	r2, #0
   1a174:	0093      	lsls	r3, r2, #2
   1a176:	189a      	adds	r2, r3, r2
   1a178:	7803      	ldrb	r3, [r0, #0]
   1a17a:	0052      	lsls	r2, r2, #1
   1a17c:	188a      	adds	r2, r1, r2
   1a17e:	0019      	movs	r1, r3
   1a180:	3401      	adds	r4, #1
   1a182:	3930      	subs	r1, #48	; 0x30
   1a184:	0020      	movs	r0, r4
   1a186:	2909      	cmp	r1, #9
   1a188:	d9f4      	bls.n	1a174 <_vfprintf_r+0x3bc>
   1a18a:	9407      	str	r4, [sp, #28]
   1a18c:	4650      	mov	r0, sl
   1a18e:	9c08      	ldr	r4, [sp, #32]
   1a190:	920b      	str	r2, [sp, #44]	; 0x2c
   1a192:	4641      	mov	r1, r8
   1a194:	46aa      	mov	sl, r5
   1a196:	e69b      	b.n	19ed0 <_vfprintf_r+0x118>
   1a198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a19a:	9312      	str	r3, [sp, #72]	; 0x48
   1a19c:	6813      	ldr	r3, [r2, #0]
   1a19e:	2120      	movs	r1, #32
   1a1a0:	9308      	str	r3, [sp, #32]
   1a1a2:	466b      	mov	r3, sp
   1a1a4:	185b      	adds	r3, r3, r1
   1a1a6:	781b      	ldrb	r3, [r3, #0]
   1a1a8:	ad28      	add	r5, sp, #160	; 0xa0
   1a1aa:	702b      	strb	r3, [r5, #0]
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	a916      	add	r1, sp, #88	; 0x58
   1a1b0:	77cb      	strb	r3, [r1, #31]
   1a1b2:	0013      	movs	r3, r2
   1a1b4:	3304      	adds	r3, #4
   1a1b6:	930f      	str	r3, [sp, #60]	; 0x3c
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	9409      	str	r4, [sp, #36]	; 0x24
   1a1bc:	4698      	mov	r8, r3
   1a1be:	3301      	adds	r3, #1
   1a1c0:	9308      	str	r3, [sp, #32]
   1a1c2:	930e      	str	r3, [sp, #56]	; 0x38
   1a1c4:	2300      	movs	r3, #0
   1a1c6:	9511      	str	r5, [sp, #68]	; 0x44
   1a1c8:	469a      	mov	sl, r3
   1a1ca:	9313      	str	r3, [sp, #76]	; 0x4c
   1a1cc:	e76f      	b.n	1a0ae <_vfprintf_r+0x2f6>
   1a1ce:	9312      	str	r3, [sp, #72]	; 0x48
   1a1d0:	2900      	cmp	r1, #0
   1a1d2:	d001      	beq.n	1a1d8 <_vfprintf_r+0x420>
   1a1d4:	f001 f94d 	bl	1b472 <_vfprintf_r+0x16ba>
   1a1d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a1da:	06a3      	lsls	r3, r4, #26
   1a1dc:	d501      	bpl.n	1a1e2 <_vfprintf_r+0x42a>
   1a1de:	f000 fd5a 	bl	1ac96 <_vfprintf_r+0xede>
   1a1e2:	06e3      	lsls	r3, r4, #27
   1a1e4:	d501      	bpl.n	1a1ea <_vfprintf_r+0x432>
   1a1e6:	f000 fcab 	bl	1ab40 <_vfprintf_r+0xd88>
   1a1ea:	0663      	lsls	r3, r4, #25
   1a1ec:	d401      	bmi.n	1a1f2 <_vfprintf_r+0x43a>
   1a1ee:	f000 fca7 	bl	1ab40 <_vfprintf_r+0xd88>
   1a1f2:	2100      	movs	r1, #0
   1a1f4:	5e53      	ldrsh	r3, [r2, r1]
   1a1f6:	930c      	str	r3, [sp, #48]	; 0x30
   1a1f8:	3204      	adds	r2, #4
   1a1fa:	17db      	asrs	r3, r3, #31
   1a1fc:	930d      	str	r3, [sp, #52]	; 0x34
   1a1fe:	920f      	str	r2, [sp, #60]	; 0x3c
   1a200:	2b00      	cmp	r3, #0
   1a202:	da01      	bge.n	1a208 <_vfprintf_r+0x450>
   1a204:	f000 fdb2 	bl	1ad6c <_vfprintf_r+0xfb4>
   1a208:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a20a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a20c:	0008      	movs	r0, r1
   1a20e:	4651      	mov	r1, sl
   1a210:	ab16      	add	r3, sp, #88	; 0x58
   1a212:	7fdb      	ldrb	r3, [r3, #31]
   1a214:	4310      	orrs	r0, r2
   1a216:	4698      	mov	r8, r3
   1a218:	0002      	movs	r2, r0
   1a21a:	2301      	movs	r3, #1
   1a21c:	3101      	adds	r1, #1
   1a21e:	d000      	beq.n	1a222 <_vfprintf_r+0x46a>
   1a220:	e718      	b.n	1a054 <_vfprintf_r+0x29c>
   1a222:	2a00      	cmp	r2, #0
   1a224:	d100      	bne.n	1a228 <_vfprintf_r+0x470>
   1a226:	e35a      	b.n	1a8de <_vfprintf_r+0xb26>
   1a228:	9409      	str	r4, [sp, #36]	; 0x24
   1a22a:	2b01      	cmp	r3, #1
   1a22c:	d101      	bne.n	1a232 <_vfprintf_r+0x47a>
   1a22e:	f000 fc06 	bl	1aa3e <_vfprintf_r+0xc86>
   1a232:	2b02      	cmp	r3, #2
   1a234:	d000      	beq.n	1a238 <_vfprintf_r+0x480>
   1a236:	e380      	b.n	1a93a <_vfprintf_r+0xb82>
   1a238:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1a23a:	200f      	movs	r0, #15
   1a23c:	46a1      	mov	r9, r4
   1a23e:	46b4      	mov	ip, r6
   1a240:	ab32      	add	r3, sp, #200	; 0xc8
   1a242:	0019      	movs	r1, r3
   1a244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a248:	0004      	movs	r4, r0
   1a24a:	464d      	mov	r5, r9
   1a24c:	4014      	ands	r4, r2
   1a24e:	5d2c      	ldrb	r4, [r5, r4]
   1a250:	071e      	lsls	r6, r3, #28
   1a252:	0915      	lsrs	r5, r2, #4
   1a254:	3901      	subs	r1, #1
   1a256:	432e      	orrs	r6, r5
   1a258:	700c      	strb	r4, [r1, #0]
   1a25a:	091c      	lsrs	r4, r3, #4
   1a25c:	0023      	movs	r3, r4
   1a25e:	0034      	movs	r4, r6
   1a260:	0032      	movs	r2, r6
   1a262:	431c      	orrs	r4, r3
   1a264:	d1f0      	bne.n	1a248 <_vfprintf_r+0x490>
   1a266:	920c      	str	r2, [sp, #48]	; 0x30
   1a268:	930d      	str	r3, [sp, #52]	; 0x34
   1a26a:	ab32      	add	r3, sp, #200	; 0xc8
   1a26c:	1a5b      	subs	r3, r3, r1
   1a26e:	9111      	str	r1, [sp, #68]	; 0x44
   1a270:	4666      	mov	r6, ip
   1a272:	930e      	str	r3, [sp, #56]	; 0x38
   1a274:	e70d      	b.n	1a092 <_vfprintf_r+0x2da>
   1a276:	4663      	mov	r3, ip
   1a278:	431c      	orrs	r4, r3
   1a27a:	9b07      	ldr	r3, [sp, #28]
   1a27c:	781b      	ldrb	r3, [r3, #0]
   1a27e:	e624      	b.n	19eca <_vfprintf_r+0x112>
   1a280:	9b07      	ldr	r3, [sp, #28]
   1a282:	781b      	ldrb	r3, [r3, #0]
   1a284:	2b6c      	cmp	r3, #108	; 0x6c
   1a286:	d101      	bne.n	1a28c <_vfprintf_r+0x4d4>
   1a288:	f000 fe8c 	bl	1afa4 <_vfprintf_r+0x11ec>
   1a28c:	2210      	movs	r2, #16
   1a28e:	4314      	orrs	r4, r2
   1a290:	e61b      	b.n	19eca <_vfprintf_r+0x112>
   1a292:	2900      	cmp	r1, #0
   1a294:	d001      	beq.n	1a29a <_vfprintf_r+0x4e2>
   1a296:	f001 f8d5 	bl	1b444 <_vfprintf_r+0x168c>
   1a29a:	06a3      	lsls	r3, r4, #26
   1a29c:	d501      	bpl.n	1a2a2 <_vfprintf_r+0x4ea>
   1a29e:	f000 fe76 	bl	1af8e <_vfprintf_r+0x11d6>
   1a2a2:	06e3      	lsls	r3, r4, #27
   1a2a4:	d500      	bpl.n	1a2a8 <_vfprintf_r+0x4f0>
   1a2a6:	e110      	b.n	1a4ca <_vfprintf_r+0x712>
   1a2a8:	0663      	lsls	r3, r4, #25
   1a2aa:	d400      	bmi.n	1a2ae <_vfprintf_r+0x4f6>
   1a2ac:	e10d      	b.n	1a4ca <_vfprintf_r+0x712>
   1a2ae:	4669      	mov	r1, sp
   1a2b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a2b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1a2b4:	681a      	ldr	r2, [r3, #0]
   1a2b6:	3304      	adds	r3, #4
   1a2b8:	9208      	str	r2, [sp, #32]
   1a2ba:	8011      	strh	r1, [r2, #0]
   1a2bc:	930f      	str	r3, [sp, #60]	; 0x3c
   1a2be:	e5c9      	b.n	19e54 <_vfprintf_r+0x9c>
   1a2c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a2c2:	2230      	movs	r2, #48	; 0x30
   1a2c4:	680b      	ldr	r3, [r1, #0]
   1a2c6:	930c      	str	r3, [sp, #48]	; 0x30
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	930d      	str	r3, [sp, #52]	; 0x34
   1a2cc:	3302      	adds	r3, #2
   1a2ce:	431c      	orrs	r4, r3
   1a2d0:	ab1e      	add	r3, sp, #120	; 0x78
   1a2d2:	701a      	strb	r2, [r3, #0]
   1a2d4:	3248      	adds	r2, #72	; 0x48
   1a2d6:	705a      	strb	r2, [r3, #1]
   1a2d8:	000b      	movs	r3, r1
   1a2da:	3304      	adds	r3, #4
   1a2dc:	930f      	str	r3, [sp, #60]	; 0x3c
   1a2de:	4bc1      	ldr	r3, [pc, #772]	; (1a5e4 <_vfprintf_r+0x82c>)
   1a2e0:	9212      	str	r2, [sp, #72]	; 0x48
   1a2e2:	9319      	str	r3, [sp, #100]	; 0x64
   1a2e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a2e6:	2302      	movs	r3, #2
   1a2e8:	e6ac      	b.n	1a044 <_vfprintf_r+0x28c>
   1a2ea:	464b      	mov	r3, r9
   1a2ec:	431c      	orrs	r4, r3
   1a2ee:	9b07      	ldr	r3, [sp, #28]
   1a2f0:	781b      	ldrb	r3, [r3, #0]
   1a2f2:	e5ea      	b.n	19eca <_vfprintf_r+0x112>
   1a2f4:	9312      	str	r3, [sp, #72]	; 0x48
   1a2f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a2f8:	a916      	add	r1, sp, #88	; 0x58
   1a2fa:	1d1d      	adds	r5, r3, #4
   1a2fc:	681b      	ldr	r3, [r3, #0]
   1a2fe:	001a      	movs	r2, r3
   1a300:	9311      	str	r3, [sp, #68]	; 0x44
   1a302:	2300      	movs	r3, #0
   1a304:	77cb      	strb	r3, [r1, #31]
   1a306:	2a00      	cmp	r2, #0
   1a308:	d101      	bne.n	1a30e <_vfprintf_r+0x556>
   1a30a:	f000 ff01 	bl	1b110 <_vfprintf_r+0x1358>
   1a30e:	4653      	mov	r3, sl
   1a310:	3301      	adds	r3, #1
   1a312:	d101      	bne.n	1a318 <_vfprintf_r+0x560>
   1a314:	f000 fe64 	bl	1afe0 <_vfprintf_r+0x1228>
   1a318:	4652      	mov	r2, sl
   1a31a:	2100      	movs	r1, #0
   1a31c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1a31e:	f003 f981 	bl	1d624 <memchr>
   1a322:	2800      	cmp	r0, #0
   1a324:	d101      	bne.n	1a32a <_vfprintf_r+0x572>
   1a326:	f000 ff78 	bl	1b21a <_vfprintf_r+0x1462>
   1a32a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a32c:	1ac3      	subs	r3, r0, r3
   1a32e:	001a      	movs	r2, r3
   1a330:	930e      	str	r3, [sp, #56]	; 0x38
   1a332:	43db      	mvns	r3, r3
   1a334:	17db      	asrs	r3, r3, #31
   1a336:	401a      	ands	r2, r3
   1a338:	ab16      	add	r3, sp, #88	; 0x58
   1a33a:	7fdb      	ldrb	r3, [r3, #31]
   1a33c:	9208      	str	r2, [sp, #32]
   1a33e:	4698      	mov	r8, r3
   1a340:	2300      	movs	r3, #0
   1a342:	950f      	str	r5, [sp, #60]	; 0x3c
   1a344:	9409      	str	r4, [sp, #36]	; 0x24
   1a346:	469a      	mov	sl, r3
   1a348:	9313      	str	r3, [sp, #76]	; 0x4c
   1a34a:	e6aa      	b.n	1a0a2 <_vfprintf_r+0x2ea>
   1a34c:	2308      	movs	r3, #8
   1a34e:	431c      	orrs	r4, r3
   1a350:	9b07      	ldr	r3, [sp, #28]
   1a352:	781b      	ldrb	r3, [r3, #0]
   1a354:	e5b9      	b.n	19eca <_vfprintf_r+0x112>
   1a356:	9312      	str	r3, [sp, #72]	; 0x48
   1a358:	2310      	movs	r3, #16
   1a35a:	431c      	orrs	r4, r3
   1a35c:	06a3      	lsls	r3, r4, #26
   1a35e:	d501      	bpl.n	1a364 <_vfprintf_r+0x5ac>
   1a360:	f000 fca7 	bl	1acb2 <_vfprintf_r+0xefa>
   1a364:	06e3      	lsls	r3, r4, #27
   1a366:	d500      	bpl.n	1a36a <_vfprintf_r+0x5b2>
   1a368:	e3ee      	b.n	1ab48 <_vfprintf_r+0xd90>
   1a36a:	0663      	lsls	r3, r4, #25
   1a36c:	d400      	bmi.n	1a370 <_vfprintf_r+0x5b8>
   1a36e:	e3eb      	b.n	1ab48 <_vfprintf_r+0xd90>
   1a370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a372:	881a      	ldrh	r2, [r3, #0]
   1a374:	920c      	str	r2, [sp, #48]	; 0x30
   1a376:	2200      	movs	r2, #0
   1a378:	3304      	adds	r3, #4
   1a37a:	920d      	str	r2, [sp, #52]	; 0x34
   1a37c:	930f      	str	r3, [sp, #60]	; 0x3c
   1a37e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a380:	2300      	movs	r3, #0
   1a382:	e65f      	b.n	1a044 <_vfprintf_r+0x28c>
   1a384:	9312      	str	r3, [sp, #72]	; 0x48
   1a386:	2310      	movs	r3, #16
   1a388:	431c      	orrs	r4, r3
   1a38a:	06a3      	lsls	r3, r4, #26
   1a38c:	d501      	bpl.n	1a392 <_vfprintf_r+0x5da>
   1a38e:	f000 fcba 	bl	1ad06 <_vfprintf_r+0xf4e>
   1a392:	06e3      	lsls	r3, r4, #27
   1a394:	d500      	bpl.n	1a398 <_vfprintf_r+0x5e0>
   1a396:	e3da      	b.n	1ab4e <_vfprintf_r+0xd96>
   1a398:	0663      	lsls	r3, r4, #25
   1a39a:	d400      	bmi.n	1a39e <_vfprintf_r+0x5e6>
   1a39c:	e3d7      	b.n	1ab4e <_vfprintf_r+0xd96>
   1a39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a3a0:	881a      	ldrh	r2, [r3, #0]
   1a3a2:	920c      	str	r2, [sp, #48]	; 0x30
   1a3a4:	2200      	movs	r2, #0
   1a3a6:	3304      	adds	r3, #4
   1a3a8:	920d      	str	r2, [sp, #52]	; 0x34
   1a3aa:	930f      	str	r3, [sp, #60]	; 0x3c
   1a3ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a3ae:	2301      	movs	r3, #1
   1a3b0:	e648      	b.n	1a044 <_vfprintf_r+0x28c>
   1a3b2:	9312      	str	r3, [sp, #72]	; 0x48
   1a3b4:	2900      	cmp	r1, #0
   1a3b6:	d001      	beq.n	1a3bc <_vfprintf_r+0x604>
   1a3b8:	f001 f857 	bl	1b46a <_vfprintf_r+0x16b2>
   1a3bc:	4b8a      	ldr	r3, [pc, #552]	; (1a5e8 <_vfprintf_r+0x830>)
   1a3be:	9319      	str	r3, [sp, #100]	; 0x64
   1a3c0:	e618      	b.n	19ff4 <_vfprintf_r+0x23c>
   1a3c2:	2301      	movs	r3, #1
   1a3c4:	431c      	orrs	r4, r3
   1a3c6:	9b07      	ldr	r3, [sp, #28]
   1a3c8:	781b      	ldrb	r3, [r3, #0]
   1a3ca:	e57e      	b.n	19eca <_vfprintf_r+0x112>
   1a3cc:	2380      	movs	r3, #128	; 0x80
   1a3ce:	431c      	orrs	r4, r3
   1a3d0:	9b07      	ldr	r3, [sp, #28]
   1a3d2:	781b      	ldrb	r3, [r3, #0]
   1a3d4:	e579      	b.n	19eca <_vfprintf_r+0x112>
   1a3d6:	9b07      	ldr	r3, [sp, #28]
   1a3d8:	781b      	ldrb	r3, [r3, #0]
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	d000      	beq.n	1a3e0 <_vfprintf_r+0x628>
   1a3de:	e574      	b.n	19eca <_vfprintf_r+0x112>
   1a3e0:	2101      	movs	r1, #1
   1a3e2:	3020      	adds	r0, #32
   1a3e4:	e571      	b.n	19eca <_vfprintf_r+0x112>
   1a3e6:	9312      	str	r3, [sp, #72]	; 0x48
   1a3e8:	2900      	cmp	r1, #0
   1a3ea:	d001      	beq.n	1a3f0 <_vfprintf_r+0x638>
   1a3ec:	f001 f839 	bl	1b462 <_vfprintf_r+0x16aa>
   1a3f0:	2207      	movs	r2, #7
   1a3f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a3f4:	3307      	adds	r3, #7
   1a3f6:	4393      	bics	r3, r2
   1a3f8:	3201      	adds	r2, #1
   1a3fa:	4694      	mov	ip, r2
   1a3fc:	449c      	add	ip, r3
   1a3fe:	4662      	mov	r2, ip
   1a400:	920f      	str	r2, [sp, #60]	; 0x3c
   1a402:	681a      	ldr	r2, [r3, #0]
   1a404:	9216      	str	r2, [sp, #88]	; 0x58
   1a406:	685b      	ldr	r3, [r3, #4]
   1a408:	2201      	movs	r2, #1
   1a40a:	9315      	str	r3, [sp, #84]	; 0x54
   1a40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a40e:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1a410:	005b      	lsls	r3, r3, #1
   1a412:	085b      	lsrs	r3, r3, #1
   1a414:	4698      	mov	r8, r3
   1a416:	4252      	negs	r2, r2
   1a418:	4b74      	ldr	r3, [pc, #464]	; (1a5ec <_vfprintf_r+0x834>)
   1a41a:	0028      	movs	r0, r5
   1a41c:	4641      	mov	r1, r8
   1a41e:	f004 fa25 	bl	1e86c <__aeabi_dcmpun>
   1a422:	2800      	cmp	r0, #0
   1a424:	d001      	beq.n	1a42a <_vfprintf_r+0x672>
   1a426:	f000 fcb4 	bl	1ad92 <_vfprintf_r+0xfda>
   1a42a:	2201      	movs	r2, #1
   1a42c:	4b6f      	ldr	r3, [pc, #444]	; (1a5ec <_vfprintf_r+0x834>)
   1a42e:	4252      	negs	r2, r2
   1a430:	0028      	movs	r0, r5
   1a432:	4641      	mov	r1, r8
   1a434:	f7fd faa4 	bl	17980 <__aeabi_dcmple>
   1a438:	2800      	cmp	r0, #0
   1a43a:	d001      	beq.n	1a440 <_vfprintf_r+0x688>
   1a43c:	f000 fca9 	bl	1ad92 <_vfprintf_r+0xfda>
   1a440:	2200      	movs	r2, #0
   1a442:	2300      	movs	r3, #0
   1a444:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a446:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a448:	f7fd fa90 	bl	1796c <__aeabi_dcmplt>
   1a44c:	2800      	cmp	r0, #0
   1a44e:	d001      	beq.n	1a454 <_vfprintf_r+0x69c>
   1a450:	f000 fd55 	bl	1aefe <_vfprintf_r+0x1146>
   1a454:	ab16      	add	r3, sp, #88	; 0x58
   1a456:	7fdb      	ldrb	r3, [r3, #31]
   1a458:	4698      	mov	r8, r3
   1a45a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a45c:	2b47      	cmp	r3, #71	; 0x47
   1a45e:	dd01      	ble.n	1a464 <_vfprintf_r+0x6ac>
   1a460:	f000 fdb4 	bl	1afcc <_vfprintf_r+0x1214>
   1a464:	4b62      	ldr	r3, [pc, #392]	; (1a5f0 <_vfprintf_r+0x838>)
   1a466:	9311      	str	r3, [sp, #68]	; 0x44
   1a468:	2380      	movs	r3, #128	; 0x80
   1a46a:	439c      	bics	r4, r3
   1a46c:	3b7d      	subs	r3, #125	; 0x7d
   1a46e:	9308      	str	r3, [sp, #32]
   1a470:	930e      	str	r3, [sp, #56]	; 0x38
   1a472:	2300      	movs	r3, #0
   1a474:	9409      	str	r4, [sp, #36]	; 0x24
   1a476:	469a      	mov	sl, r3
   1a478:	9313      	str	r3, [sp, #76]	; 0x4c
   1a47a:	e612      	b.n	1a0a2 <_vfprintf_r+0x2ea>
   1a47c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a47e:	1d1a      	adds	r2, r3, #4
   1a480:	681b      	ldr	r3, [r3, #0]
   1a482:	930b      	str	r3, [sp, #44]	; 0x2c
   1a484:	2b00      	cmp	r3, #0
   1a486:	da00      	bge.n	1a48a <_vfprintf_r+0x6d2>
   1a488:	e578      	b.n	19f7c <_vfprintf_r+0x1c4>
   1a48a:	9b07      	ldr	r3, [sp, #28]
   1a48c:	920f      	str	r2, [sp, #60]	; 0x3c
   1a48e:	781b      	ldrb	r3, [r3, #0]
   1a490:	e51b      	b.n	19eca <_vfprintf_r+0x112>
   1a492:	9312      	str	r3, [sp, #72]	; 0x48
   1a494:	2900      	cmp	r1, #0
   1a496:	d001      	beq.n	1a49c <_vfprintf_r+0x6e4>
   1a498:	f000 ffcc 	bl	1b434 <_vfprintf_r+0x167c>
   1a49c:	2310      	movs	r3, #16
   1a49e:	431c      	orrs	r4, r3
   1a4a0:	e69a      	b.n	1a1d8 <_vfprintf_r+0x420>
   1a4a2:	9312      	str	r3, [sp, #72]	; 0x48
   1a4a4:	e771      	b.n	1a38a <_vfprintf_r+0x5d2>
   1a4a6:	9312      	str	r3, [sp, #72]	; 0x48
   1a4a8:	e758      	b.n	1a35c <_vfprintf_r+0x5a4>
   1a4aa:	9312      	str	r3, [sp, #72]	; 0x48
   1a4ac:	2900      	cmp	r1, #0
   1a4ae:	d001      	beq.n	1a4b4 <_vfprintf_r+0x6fc>
   1a4b0:	f000 ffd3 	bl	1b45a <_vfprintf_r+0x16a2>
   1a4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a4b6:	2b00      	cmp	r3, #0
   1a4b8:	d100      	bne.n	1a4bc <_vfprintf_r+0x704>
   1a4ba:	e18d      	b.n	1a7d8 <_vfprintf_r+0xa20>
   1a4bc:	ad28      	add	r5, sp, #160	; 0xa0
   1a4be:	702b      	strb	r3, [r5, #0]
   1a4c0:	2300      	movs	r3, #0
   1a4c2:	aa16      	add	r2, sp, #88	; 0x58
   1a4c4:	77d3      	strb	r3, [r2, #31]
   1a4c6:	9409      	str	r4, [sp, #36]	; 0x24
   1a4c8:	e678      	b.n	1a1bc <_vfprintf_r+0x404>
   1a4ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a4cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a4ce:	6813      	ldr	r3, [r2, #0]
   1a4d0:	6019      	str	r1, [r3, #0]
   1a4d2:	0013      	movs	r3, r2
   1a4d4:	3304      	adds	r3, #4
   1a4d6:	930f      	str	r3, [sp, #60]	; 0x3c
   1a4d8:	e4bc      	b.n	19e54 <_vfprintf_r+0x9c>
   1a4da:	68bc      	ldr	r4, [r7, #8]
   1a4dc:	4643      	mov	r3, r8
   1a4de:	2b00      	cmp	r3, #0
   1a4e0:	d00f      	beq.n	1a502 <_vfprintf_r+0x74a>
   1a4e2:	aa16      	add	r2, sp, #88	; 0x58
   1a4e4:	231f      	movs	r3, #31
   1a4e6:	4694      	mov	ip, r2
   1a4e8:	4463      	add	r3, ip
   1a4ea:	6033      	str	r3, [r6, #0]
   1a4ec:	2301      	movs	r3, #1
   1a4ee:	6073      	str	r3, [r6, #4]
   1a4f0:	687b      	ldr	r3, [r7, #4]
   1a4f2:	3401      	adds	r4, #1
   1a4f4:	3301      	adds	r3, #1
   1a4f6:	60bc      	str	r4, [r7, #8]
   1a4f8:	607b      	str	r3, [r7, #4]
   1a4fa:	2b07      	cmp	r3, #7
   1a4fc:	dd00      	ble.n	1a500 <_vfprintf_r+0x748>
   1a4fe:	e203      	b.n	1a908 <_vfprintf_r+0xb50>
   1a500:	3608      	adds	r6, #8
   1a502:	464b      	mov	r3, r9
   1a504:	2b00      	cmp	r3, #0
   1a506:	d00c      	beq.n	1a522 <_vfprintf_r+0x76a>
   1a508:	ab1e      	add	r3, sp, #120	; 0x78
   1a50a:	6033      	str	r3, [r6, #0]
   1a50c:	2302      	movs	r3, #2
   1a50e:	6073      	str	r3, [r6, #4]
   1a510:	687b      	ldr	r3, [r7, #4]
   1a512:	3402      	adds	r4, #2
   1a514:	3301      	adds	r3, #1
   1a516:	60bc      	str	r4, [r7, #8]
   1a518:	607b      	str	r3, [r7, #4]
   1a51a:	2b07      	cmp	r3, #7
   1a51c:	dd00      	ble.n	1a520 <_vfprintf_r+0x768>
   1a51e:	e1fd      	b.n	1a91c <_vfprintf_r+0xb64>
   1a520:	3608      	adds	r6, #8
   1a522:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a524:	2b80      	cmp	r3, #128	; 0x80
   1a526:	d100      	bne.n	1a52a <_vfprintf_r+0x772>
   1a528:	e173      	b.n	1a812 <_vfprintf_r+0xa5a>
   1a52a:	4653      	mov	r3, sl
   1a52c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a52e:	1a9d      	subs	r5, r3, r2
   1a530:	2d00      	cmp	r5, #0
   1a532:	dd32      	ble.n	1a59a <_vfprintf_r+0x7e2>
   1a534:	4a2f      	ldr	r2, [pc, #188]	; (1a5f4 <_vfprintf_r+0x83c>)
   1a536:	687b      	ldr	r3, [r7, #4]
   1a538:	4691      	mov	r9, r2
   1a53a:	2d10      	cmp	r5, #16
   1a53c:	dd22      	ble.n	1a584 <_vfprintf_r+0x7cc>
   1a53e:	2210      	movs	r2, #16
   1a540:	4692      	mov	sl, r2
   1a542:	0022      	movs	r2, r4
   1a544:	465c      	mov	r4, fp
   1a546:	e003      	b.n	1a550 <_vfprintf_r+0x798>
   1a548:	3d10      	subs	r5, #16
   1a54a:	3608      	adds	r6, #8
   1a54c:	2d10      	cmp	r5, #16
   1a54e:	dd17      	ble.n	1a580 <_vfprintf_r+0x7c8>
   1a550:	4649      	mov	r1, r9
   1a552:	6031      	str	r1, [r6, #0]
   1a554:	4651      	mov	r1, sl
   1a556:	3210      	adds	r2, #16
   1a558:	3301      	adds	r3, #1
   1a55a:	6071      	str	r1, [r6, #4]
   1a55c:	60ba      	str	r2, [r7, #8]
   1a55e:	607b      	str	r3, [r7, #4]
   1a560:	2b07      	cmp	r3, #7
   1a562:	ddf1      	ble.n	1a548 <_vfprintf_r+0x790>
   1a564:	003a      	movs	r2, r7
   1a566:	0021      	movs	r1, r4
   1a568:	9806      	ldr	r0, [sp, #24]
   1a56a:	f003 fee5 	bl	1e338 <__sprint_r>
   1a56e:	2800      	cmp	r0, #0
   1a570:	d000      	beq.n	1a574 <_vfprintf_r+0x7bc>
   1a572:	e18a      	b.n	1a88a <_vfprintf_r+0xad2>
   1a574:	3d10      	subs	r5, #16
   1a576:	68ba      	ldr	r2, [r7, #8]
   1a578:	687b      	ldr	r3, [r7, #4]
   1a57a:	ae32      	add	r6, sp, #200	; 0xc8
   1a57c:	2d10      	cmp	r5, #16
   1a57e:	dce7      	bgt.n	1a550 <_vfprintf_r+0x798>
   1a580:	46a3      	mov	fp, r4
   1a582:	0014      	movs	r4, r2
   1a584:	464a      	mov	r2, r9
   1a586:	1964      	adds	r4, r4, r5
   1a588:	3301      	adds	r3, #1
   1a58a:	6032      	str	r2, [r6, #0]
   1a58c:	6075      	str	r5, [r6, #4]
   1a58e:	60bc      	str	r4, [r7, #8]
   1a590:	607b      	str	r3, [r7, #4]
   1a592:	2b07      	cmp	r3, #7
   1a594:	dd00      	ble.n	1a598 <_vfprintf_r+0x7e0>
   1a596:	e1ad      	b.n	1a8f4 <_vfprintf_r+0xb3c>
   1a598:	3608      	adds	r6, #8
   1a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a59c:	05db      	lsls	r3, r3, #23
   1a59e:	d500      	bpl.n	1a5a2 <_vfprintf_r+0x7ea>
   1a5a0:	e0be      	b.n	1a720 <_vfprintf_r+0x968>
   1a5a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a5a4:	6033      	str	r3, [r6, #0]
   1a5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a5a8:	469c      	mov	ip, r3
   1a5aa:	6073      	str	r3, [r6, #4]
   1a5ac:	687b      	ldr	r3, [r7, #4]
   1a5ae:	4464      	add	r4, ip
   1a5b0:	3301      	adds	r3, #1
   1a5b2:	60bc      	str	r4, [r7, #8]
   1a5b4:	607b      	str	r3, [r7, #4]
   1a5b6:	2b07      	cmp	r3, #7
   1a5b8:	dd00      	ble.n	1a5bc <_vfprintf_r+0x804>
   1a5ba:	e0a6      	b.n	1a70a <_vfprintf_r+0x952>
   1a5bc:	3608      	adds	r6, #8
   1a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a5c0:	075b      	lsls	r3, r3, #29
   1a5c2:	d54a      	bpl.n	1a65a <_vfprintf_r+0x8a2>
   1a5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a5c6:	9a08      	ldr	r2, [sp, #32]
   1a5c8:	1a9d      	subs	r5, r3, r2
   1a5ca:	2d00      	cmp	r5, #0
   1a5cc:	dd45      	ble.n	1a65a <_vfprintf_r+0x8a2>
   1a5ce:	4a0a      	ldr	r2, [pc, #40]	; (1a5f8 <_vfprintf_r+0x840>)
   1a5d0:	687b      	ldr	r3, [r7, #4]
   1a5d2:	4690      	mov	r8, r2
   1a5d4:	2d10      	cmp	r5, #16
   1a5d6:	dd2f      	ble.n	1a638 <_vfprintf_r+0x880>
   1a5d8:	2210      	movs	r2, #16
   1a5da:	4691      	mov	r9, r2
   1a5dc:	0022      	movs	r2, r4
   1a5de:	465c      	mov	r4, fp
   1a5e0:	e010      	b.n	1a604 <_vfprintf_r+0x84c>
   1a5e2:	46c0      	nop			; (mov r8, r8)
   1a5e4:	0001fe04 	.word	0x0001fe04
   1a5e8:	0001fdf0 	.word	0x0001fdf0
   1a5ec:	7fefffff 	.word	0x7fefffff
   1a5f0:	0001fde0 	.word	0x0001fde0
   1a5f4:	0001fe34 	.word	0x0001fe34
   1a5f8:	0001fe24 	.word	0x0001fe24
   1a5fc:	3d10      	subs	r5, #16
   1a5fe:	3608      	adds	r6, #8
   1a600:	2d10      	cmp	r5, #16
   1a602:	dd17      	ble.n	1a634 <_vfprintf_r+0x87c>
   1a604:	49d1      	ldr	r1, [pc, #836]	; (1a94c <_vfprintf_r+0xb94>)
   1a606:	3210      	adds	r2, #16
   1a608:	6031      	str	r1, [r6, #0]
   1a60a:	4649      	mov	r1, r9
   1a60c:	3301      	adds	r3, #1
   1a60e:	6071      	str	r1, [r6, #4]
   1a610:	60ba      	str	r2, [r7, #8]
   1a612:	607b      	str	r3, [r7, #4]
   1a614:	2b07      	cmp	r3, #7
   1a616:	ddf1      	ble.n	1a5fc <_vfprintf_r+0x844>
   1a618:	003a      	movs	r2, r7
   1a61a:	0021      	movs	r1, r4
   1a61c:	9806      	ldr	r0, [sp, #24]
   1a61e:	f003 fe8b 	bl	1e338 <__sprint_r>
   1a622:	2800      	cmp	r0, #0
   1a624:	d000      	beq.n	1a628 <_vfprintf_r+0x870>
   1a626:	e130      	b.n	1a88a <_vfprintf_r+0xad2>
   1a628:	3d10      	subs	r5, #16
   1a62a:	68ba      	ldr	r2, [r7, #8]
   1a62c:	687b      	ldr	r3, [r7, #4]
   1a62e:	ae32      	add	r6, sp, #200	; 0xc8
   1a630:	2d10      	cmp	r5, #16
   1a632:	dce7      	bgt.n	1a604 <_vfprintf_r+0x84c>
   1a634:	46a3      	mov	fp, r4
   1a636:	0014      	movs	r4, r2
   1a638:	4642      	mov	r2, r8
   1a63a:	1964      	adds	r4, r4, r5
   1a63c:	3301      	adds	r3, #1
   1a63e:	c624      	stmia	r6!, {r2, r5}
   1a640:	60bc      	str	r4, [r7, #8]
   1a642:	607b      	str	r3, [r7, #4]
   1a644:	2b07      	cmp	r3, #7
   1a646:	dd08      	ble.n	1a65a <_vfprintf_r+0x8a2>
   1a648:	003a      	movs	r2, r7
   1a64a:	4659      	mov	r1, fp
   1a64c:	9806      	ldr	r0, [sp, #24]
   1a64e:	f003 fe73 	bl	1e338 <__sprint_r>
   1a652:	2800      	cmp	r0, #0
   1a654:	d000      	beq.n	1a658 <_vfprintf_r+0x8a0>
   1a656:	e13f      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1a658:	68bc      	ldr	r4, [r7, #8]
   1a65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a65c:	9908      	ldr	r1, [sp, #32]
   1a65e:	428b      	cmp	r3, r1
   1a660:	da00      	bge.n	1a664 <_vfprintf_r+0x8ac>
   1a662:	000b      	movs	r3, r1
   1a664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a666:	4694      	mov	ip, r2
   1a668:	449c      	add	ip, r3
   1a66a:	4663      	mov	r3, ip
   1a66c:	930a      	str	r3, [sp, #40]	; 0x28
   1a66e:	2c00      	cmp	r4, #0
   1a670:	d000      	beq.n	1a674 <_vfprintf_r+0x8bc>
   1a672:	e129      	b.n	1a8c8 <_vfprintf_r+0xb10>
   1a674:	2300      	movs	r3, #0
   1a676:	ae32      	add	r6, sp, #200	; 0xc8
   1a678:	607b      	str	r3, [r7, #4]
   1a67a:	f7ff fbeb 	bl	19e54 <_vfprintf_r+0x9c>
   1a67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a680:	2b01      	cmp	r3, #1
   1a682:	dc00      	bgt.n	1a686 <_vfprintf_r+0x8ce>
   1a684:	e103      	b.n	1a88e <_vfprintf_r+0xad6>
   1a686:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a688:	3401      	adds	r4, #1
   1a68a:	6033      	str	r3, [r6, #0]
   1a68c:	2301      	movs	r3, #1
   1a68e:	6073      	str	r3, [r6, #4]
   1a690:	687b      	ldr	r3, [r7, #4]
   1a692:	60bc      	str	r4, [r7, #8]
   1a694:	3301      	adds	r3, #1
   1a696:	607b      	str	r3, [r7, #4]
   1a698:	2b07      	cmp	r3, #7
   1a69a:	dd00      	ble.n	1a69e <_vfprintf_r+0x8e6>
   1a69c:	e2ef      	b.n	1ac7e <_vfprintf_r+0xec6>
   1a69e:	3608      	adds	r6, #8
   1a6a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1a6a2:	3301      	adds	r3, #1
   1a6a4:	6032      	str	r2, [r6, #0]
   1a6a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a6a8:	4698      	mov	r8, r3
   1a6aa:	4694      	mov	ip, r2
   1a6ac:	4464      	add	r4, ip
   1a6ae:	6072      	str	r2, [r6, #4]
   1a6b0:	60bc      	str	r4, [r7, #8]
   1a6b2:	607b      	str	r3, [r7, #4]
   1a6b4:	2b07      	cmp	r3, #7
   1a6b6:	dd00      	ble.n	1a6ba <_vfprintf_r+0x902>
   1a6b8:	e318      	b.n	1acec <_vfprintf_r+0xf34>
   1a6ba:	3608      	adds	r6, #8
   1a6bc:	2200      	movs	r2, #0
   1a6be:	2300      	movs	r3, #0
   1a6c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a6c2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a6c4:	f7fd f94c 	bl	17960 <__aeabi_dcmpeq>
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	d000      	beq.n	1a6ce <_vfprintf_r+0x916>
   1a6cc:	e1f4      	b.n	1aab8 <_vfprintf_r+0xd00>
   1a6ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1a6d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a6d2:	3501      	adds	r5, #1
   1a6d4:	3b01      	subs	r3, #1
   1a6d6:	6035      	str	r5, [r6, #0]
   1a6d8:	6073      	str	r3, [r6, #4]
   1a6da:	18e4      	adds	r4, r4, r3
   1a6dc:	2301      	movs	r3, #1
   1a6de:	469c      	mov	ip, r3
   1a6e0:	44e0      	add	r8, ip
   1a6e2:	4643      	mov	r3, r8
   1a6e4:	60bc      	str	r4, [r7, #8]
   1a6e6:	607b      	str	r3, [r7, #4]
   1a6e8:	2b07      	cmp	r3, #7
   1a6ea:	dd00      	ble.n	1a6ee <_vfprintf_r+0x936>
   1a6ec:	e0e0      	b.n	1a8b0 <_vfprintf_r+0xaf8>
   1a6ee:	3608      	adds	r6, #8
   1a6f0:	ab21      	add	r3, sp, #132	; 0x84
   1a6f2:	6033      	str	r3, [r6, #0]
   1a6f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a6f6:	469c      	mov	ip, r3
   1a6f8:	6073      	str	r3, [r6, #4]
   1a6fa:	4643      	mov	r3, r8
   1a6fc:	4464      	add	r4, ip
   1a6fe:	3301      	adds	r3, #1
   1a700:	60bc      	str	r4, [r7, #8]
   1a702:	607b      	str	r3, [r7, #4]
   1a704:	2b07      	cmp	r3, #7
   1a706:	dc00      	bgt.n	1a70a <_vfprintf_r+0x952>
   1a708:	e758      	b.n	1a5bc <_vfprintf_r+0x804>
   1a70a:	003a      	movs	r2, r7
   1a70c:	4659      	mov	r1, fp
   1a70e:	9806      	ldr	r0, [sp, #24]
   1a710:	f003 fe12 	bl	1e338 <__sprint_r>
   1a714:	2800      	cmp	r0, #0
   1a716:	d000      	beq.n	1a71a <_vfprintf_r+0x962>
   1a718:	e0de      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1a71a:	68bc      	ldr	r4, [r7, #8]
   1a71c:	ae32      	add	r6, sp, #200	; 0xc8
   1a71e:	e74e      	b.n	1a5be <_vfprintf_r+0x806>
   1a720:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a722:	2b65      	cmp	r3, #101	; 0x65
   1a724:	ddab      	ble.n	1a67e <_vfprintf_r+0x8c6>
   1a726:	2200      	movs	r2, #0
   1a728:	2300      	movs	r3, #0
   1a72a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a72c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a72e:	f7fd f917 	bl	17960 <__aeabi_dcmpeq>
   1a732:	2800      	cmp	r0, #0
   1a734:	d100      	bne.n	1a738 <_vfprintf_r+0x980>
   1a736:	e134      	b.n	1a9a2 <_vfprintf_r+0xbea>
   1a738:	4b85      	ldr	r3, [pc, #532]	; (1a950 <_vfprintf_r+0xb98>)
   1a73a:	3401      	adds	r4, #1
   1a73c:	6033      	str	r3, [r6, #0]
   1a73e:	2301      	movs	r3, #1
   1a740:	6073      	str	r3, [r6, #4]
   1a742:	687b      	ldr	r3, [r7, #4]
   1a744:	60bc      	str	r4, [r7, #8]
   1a746:	3301      	adds	r3, #1
   1a748:	607b      	str	r3, [r7, #4]
   1a74a:	2b07      	cmp	r3, #7
   1a74c:	dd00      	ble.n	1a750 <_vfprintf_r+0x998>
   1a74e:	e3dc      	b.n	1af0a <_vfprintf_r+0x1152>
   1a750:	3608      	adds	r6, #8
   1a752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1a754:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a756:	4293      	cmp	r3, r2
   1a758:	db03      	blt.n	1a762 <_vfprintf_r+0x9aa>
   1a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a75c:	07db      	lsls	r3, r3, #31
   1a75e:	d400      	bmi.n	1a762 <_vfprintf_r+0x9aa>
   1a760:	e3b7      	b.n	1aed2 <_vfprintf_r+0x111a>
   1a762:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1a764:	68ba      	ldr	r2, [r7, #8]
   1a766:	6033      	str	r3, [r6, #0]
   1a768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a76a:	469c      	mov	ip, r3
   1a76c:	6073      	str	r3, [r6, #4]
   1a76e:	687b      	ldr	r3, [r7, #4]
   1a770:	4462      	add	r2, ip
   1a772:	3301      	adds	r3, #1
   1a774:	0014      	movs	r4, r2
   1a776:	60ba      	str	r2, [r7, #8]
   1a778:	607b      	str	r3, [r7, #4]
   1a77a:	2b07      	cmp	r3, #7
   1a77c:	dd01      	ble.n	1a782 <_vfprintf_r+0x9ca>
   1a77e:	f000 fc19 	bl	1afb4 <_vfprintf_r+0x11fc>
   1a782:	3608      	adds	r6, #8
   1a784:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a786:	1e5d      	subs	r5, r3, #1
   1a788:	2d00      	cmp	r5, #0
   1a78a:	dc00      	bgt.n	1a78e <_vfprintf_r+0x9d6>
   1a78c:	e717      	b.n	1a5be <_vfprintf_r+0x806>
   1a78e:	4a71      	ldr	r2, [pc, #452]	; (1a954 <_vfprintf_r+0xb9c>)
   1a790:	687b      	ldr	r3, [r7, #4]
   1a792:	4691      	mov	r9, r2
   1a794:	2d10      	cmp	r5, #16
   1a796:	dc00      	bgt.n	1a79a <_vfprintf_r+0x9e2>
   1a798:	e1c3      	b.n	1ab22 <_vfprintf_r+0xd6a>
   1a79a:	2210      	movs	r2, #16
   1a79c:	4690      	mov	r8, r2
   1a79e:	0022      	movs	r2, r4
   1a7a0:	464c      	mov	r4, r9
   1a7a2:	46d9      	mov	r9, fp
   1a7a4:	e004      	b.n	1a7b0 <_vfprintf_r+0x9f8>
   1a7a6:	3608      	adds	r6, #8
   1a7a8:	3d10      	subs	r5, #16
   1a7aa:	2d10      	cmp	r5, #16
   1a7ac:	dc00      	bgt.n	1a7b0 <_vfprintf_r+0x9f8>
   1a7ae:	e37c      	b.n	1aeaa <_vfprintf_r+0x10f2>
   1a7b0:	4641      	mov	r1, r8
   1a7b2:	3210      	adds	r2, #16
   1a7b4:	3301      	adds	r3, #1
   1a7b6:	6034      	str	r4, [r6, #0]
   1a7b8:	6071      	str	r1, [r6, #4]
   1a7ba:	60ba      	str	r2, [r7, #8]
   1a7bc:	607b      	str	r3, [r7, #4]
   1a7be:	2b07      	cmp	r3, #7
   1a7c0:	ddf1      	ble.n	1a7a6 <_vfprintf_r+0x9ee>
   1a7c2:	003a      	movs	r2, r7
   1a7c4:	4649      	mov	r1, r9
   1a7c6:	9806      	ldr	r0, [sp, #24]
   1a7c8:	f003 fdb6 	bl	1e338 <__sprint_r>
   1a7cc:	2800      	cmp	r0, #0
   1a7ce:	d10b      	bne.n	1a7e8 <_vfprintf_r+0xa30>
   1a7d0:	68ba      	ldr	r2, [r7, #8]
   1a7d2:	687b      	ldr	r3, [r7, #4]
   1a7d4:	ae32      	add	r6, sp, #200	; 0xc8
   1a7d6:	e7e7      	b.n	1a7a8 <_vfprintf_r+0x9f0>
   1a7d8:	68bb      	ldr	r3, [r7, #8]
   1a7da:	46d9      	mov	r9, fp
   1a7dc:	2b00      	cmp	r3, #0
   1a7de:	d001      	beq.n	1a7e4 <_vfprintf_r+0xa2c>
   1a7e0:	f000 fd4c 	bl	1b27c <_vfprintf_r+0x14c4>
   1a7e4:	2300      	movs	r3, #0
   1a7e6:	607b      	str	r3, [r7, #4]
   1a7e8:	464b      	mov	r3, r9
   1a7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a7ec:	07db      	lsls	r3, r3, #31
   1a7ee:	d40d      	bmi.n	1a80c <_vfprintf_r+0xa54>
   1a7f0:	464b      	mov	r3, r9
   1a7f2:	899b      	ldrh	r3, [r3, #12]
   1a7f4:	059a      	lsls	r2, r3, #22
   1a7f6:	d505      	bpl.n	1a804 <_vfprintf_r+0xa4c>
   1a7f8:	065b      	lsls	r3, r3, #25
   1a7fa:	d401      	bmi.n	1a800 <_vfprintf_r+0xa48>
   1a7fc:	f7ff fb8d 	bl	19f1a <_vfprintf_r+0x162>
   1a800:	f7ff fb88 	bl	19f14 <_vfprintf_r+0x15c>
   1a804:	464b      	mov	r3, r9
   1a806:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a808:	f002 fbc8 	bl	1cf9c <__retarget_lock_release_recursive>
   1a80c:	464b      	mov	r3, r9
   1a80e:	899b      	ldrh	r3, [r3, #12]
   1a810:	e7f2      	b.n	1a7f8 <_vfprintf_r+0xa40>
   1a812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a814:	9a08      	ldr	r2, [sp, #32]
   1a816:	1a9d      	subs	r5, r3, r2
   1a818:	2d00      	cmp	r5, #0
   1a81a:	dc00      	bgt.n	1a81e <_vfprintf_r+0xa66>
   1a81c:	e685      	b.n	1a52a <_vfprintf_r+0x772>
   1a81e:	4a4d      	ldr	r2, [pc, #308]	; (1a954 <_vfprintf_r+0xb9c>)
   1a820:	687b      	ldr	r3, [r7, #4]
   1a822:	4691      	mov	r9, r2
   1a824:	2d10      	cmp	r5, #16
   1a826:	dd24      	ble.n	1a872 <_vfprintf_r+0xaba>
   1a828:	2210      	movs	r2, #16
   1a82a:	0021      	movs	r1, r4
   1a82c:	4690      	mov	r8, r2
   1a82e:	465c      	mov	r4, fp
   1a830:	0032      	movs	r2, r6
   1a832:	464e      	mov	r6, r9
   1a834:	e003      	b.n	1a83e <_vfprintf_r+0xa86>
   1a836:	3d10      	subs	r5, #16
   1a838:	3208      	adds	r2, #8
   1a83a:	2d10      	cmp	r5, #16
   1a83c:	dd15      	ble.n	1a86a <_vfprintf_r+0xab2>
   1a83e:	4640      	mov	r0, r8
   1a840:	3110      	adds	r1, #16
   1a842:	3301      	adds	r3, #1
   1a844:	6016      	str	r6, [r2, #0]
   1a846:	6050      	str	r0, [r2, #4]
   1a848:	60b9      	str	r1, [r7, #8]
   1a84a:	607b      	str	r3, [r7, #4]
   1a84c:	2b07      	cmp	r3, #7
   1a84e:	ddf2      	ble.n	1a836 <_vfprintf_r+0xa7e>
   1a850:	003a      	movs	r2, r7
   1a852:	0021      	movs	r1, r4
   1a854:	9806      	ldr	r0, [sp, #24]
   1a856:	f003 fd6f 	bl	1e338 <__sprint_r>
   1a85a:	2800      	cmp	r0, #0
   1a85c:	d115      	bne.n	1a88a <_vfprintf_r+0xad2>
   1a85e:	3d10      	subs	r5, #16
   1a860:	68b9      	ldr	r1, [r7, #8]
   1a862:	687b      	ldr	r3, [r7, #4]
   1a864:	aa32      	add	r2, sp, #200	; 0xc8
   1a866:	2d10      	cmp	r5, #16
   1a868:	dce9      	bgt.n	1a83e <_vfprintf_r+0xa86>
   1a86a:	46a3      	mov	fp, r4
   1a86c:	46b1      	mov	r9, r6
   1a86e:	000c      	movs	r4, r1
   1a870:	0016      	movs	r6, r2
   1a872:	464a      	mov	r2, r9
   1a874:	1964      	adds	r4, r4, r5
   1a876:	3301      	adds	r3, #1
   1a878:	6032      	str	r2, [r6, #0]
   1a87a:	6075      	str	r5, [r6, #4]
   1a87c:	60bc      	str	r4, [r7, #8]
   1a87e:	607b      	str	r3, [r7, #4]
   1a880:	2b07      	cmp	r3, #7
   1a882:	dd00      	ble.n	1a886 <_vfprintf_r+0xace>
   1a884:	e263      	b.n	1ad4e <_vfprintf_r+0xf96>
   1a886:	3608      	adds	r6, #8
   1a888:	e64f      	b.n	1a52a <_vfprintf_r+0x772>
   1a88a:	46a1      	mov	r9, r4
   1a88c:	e7ac      	b.n	1a7e8 <_vfprintf_r+0xa30>
   1a88e:	2301      	movs	r3, #1
   1a890:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a892:	4213      	tst	r3, r2
   1a894:	d000      	beq.n	1a898 <_vfprintf_r+0xae0>
   1a896:	e6f6      	b.n	1a686 <_vfprintf_r+0x8ce>
   1a898:	6073      	str	r3, [r6, #4]
   1a89a:	687b      	ldr	r3, [r7, #4]
   1a89c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a89e:	3301      	adds	r3, #1
   1a8a0:	3401      	adds	r4, #1
   1a8a2:	6032      	str	r2, [r6, #0]
   1a8a4:	60bc      	str	r4, [r7, #8]
   1a8a6:	4698      	mov	r8, r3
   1a8a8:	607b      	str	r3, [r7, #4]
   1a8aa:	2b07      	cmp	r3, #7
   1a8ac:	dc00      	bgt.n	1a8b0 <_vfprintf_r+0xaf8>
   1a8ae:	e71e      	b.n	1a6ee <_vfprintf_r+0x936>
   1a8b0:	003a      	movs	r2, r7
   1a8b2:	4659      	mov	r1, fp
   1a8b4:	9806      	ldr	r0, [sp, #24]
   1a8b6:	f003 fd3f 	bl	1e338 <__sprint_r>
   1a8ba:	2800      	cmp	r0, #0
   1a8bc:	d10c      	bne.n	1a8d8 <_vfprintf_r+0xb20>
   1a8be:	687b      	ldr	r3, [r7, #4]
   1a8c0:	68bc      	ldr	r4, [r7, #8]
   1a8c2:	4698      	mov	r8, r3
   1a8c4:	ae32      	add	r6, sp, #200	; 0xc8
   1a8c6:	e713      	b.n	1a6f0 <_vfprintf_r+0x938>
   1a8c8:	003a      	movs	r2, r7
   1a8ca:	4659      	mov	r1, fp
   1a8cc:	9806      	ldr	r0, [sp, #24]
   1a8ce:	f003 fd33 	bl	1e338 <__sprint_r>
   1a8d2:	2800      	cmp	r0, #0
   1a8d4:	d100      	bne.n	1a8d8 <_vfprintf_r+0xb20>
   1a8d6:	e6cd      	b.n	1a674 <_vfprintf_r+0x8bc>
   1a8d8:	46d9      	mov	r9, fp
   1a8da:	e785      	b.n	1a7e8 <_vfprintf_r+0xa30>
   1a8dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1a8de:	2b01      	cmp	r3, #1
   1a8e0:	d100      	bne.n	1a8e4 <_vfprintf_r+0xb2c>
   1a8e2:	e148      	b.n	1ab76 <_vfprintf_r+0xdbe>
   1a8e4:	2b02      	cmp	r3, #2
   1a8e6:	d123      	bne.n	1a930 <_vfprintf_r+0xb78>
   1a8e8:	9409      	str	r4, [sp, #36]	; 0x24
   1a8ea:	2300      	movs	r3, #0
   1a8ec:	2400      	movs	r4, #0
   1a8ee:	930c      	str	r3, [sp, #48]	; 0x30
   1a8f0:	940d      	str	r4, [sp, #52]	; 0x34
   1a8f2:	e4a1      	b.n	1a238 <_vfprintf_r+0x480>
   1a8f4:	003a      	movs	r2, r7
   1a8f6:	4659      	mov	r1, fp
   1a8f8:	9806      	ldr	r0, [sp, #24]
   1a8fa:	f003 fd1d 	bl	1e338 <__sprint_r>
   1a8fe:	2800      	cmp	r0, #0
   1a900:	d1ea      	bne.n	1a8d8 <_vfprintf_r+0xb20>
   1a902:	68bc      	ldr	r4, [r7, #8]
   1a904:	ae32      	add	r6, sp, #200	; 0xc8
   1a906:	e648      	b.n	1a59a <_vfprintf_r+0x7e2>
   1a908:	003a      	movs	r2, r7
   1a90a:	4659      	mov	r1, fp
   1a90c:	9806      	ldr	r0, [sp, #24]
   1a90e:	f003 fd13 	bl	1e338 <__sprint_r>
   1a912:	2800      	cmp	r0, #0
   1a914:	d1e0      	bne.n	1a8d8 <_vfprintf_r+0xb20>
   1a916:	68bc      	ldr	r4, [r7, #8]
   1a918:	ae32      	add	r6, sp, #200	; 0xc8
   1a91a:	e5f2      	b.n	1a502 <_vfprintf_r+0x74a>
   1a91c:	003a      	movs	r2, r7
   1a91e:	4659      	mov	r1, fp
   1a920:	9806      	ldr	r0, [sp, #24]
   1a922:	f003 fd09 	bl	1e338 <__sprint_r>
   1a926:	2800      	cmp	r0, #0
   1a928:	d1d6      	bne.n	1a8d8 <_vfprintf_r+0xb20>
   1a92a:	68bc      	ldr	r4, [r7, #8]
   1a92c:	ae32      	add	r6, sp, #200	; 0xc8
   1a92e:	e5f8      	b.n	1a522 <_vfprintf_r+0x76a>
   1a930:	9409      	str	r4, [sp, #36]	; 0x24
   1a932:	2300      	movs	r3, #0
   1a934:	2400      	movs	r4, #0
   1a936:	930c      	str	r3, [sp, #48]	; 0x30
   1a938:	940d      	str	r4, [sp, #52]	; 0x34
   1a93a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a93c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a93e:	4653      	mov	r3, sl
   1a940:	aa32      	add	r2, sp, #200	; 0xc8
   1a942:	4691      	mov	r9, r2
   1a944:	9308      	str	r3, [sp, #32]
   1a946:	46b2      	mov	sl, r6
   1a948:	e007      	b.n	1a95a <_vfprintf_r+0xba2>
   1a94a:	46c0      	nop			; (mov r8, r8)
   1a94c:	0001fe24 	.word	0x0001fe24
   1a950:	0001fe20 	.word	0x0001fe20
   1a954:	0001fe34 	.word	0x0001fe34
   1a958:	46a1      	mov	r9, r4
   1a95a:	074a      	lsls	r2, r1, #29
   1a95c:	4694      	mov	ip, r2
   1a95e:	464b      	mov	r3, r9
   1a960:	4665      	mov	r5, ip
   1a962:	1e5c      	subs	r4, r3, #1
   1a964:	08c6      	lsrs	r6, r0, #3
   1a966:	2307      	movs	r3, #7
   1a968:	08ca      	lsrs	r2, r1, #3
   1a96a:	4335      	orrs	r5, r6
   1a96c:	0011      	movs	r1, r2
   1a96e:	002a      	movs	r2, r5
   1a970:	4003      	ands	r3, r0
   1a972:	3330      	adds	r3, #48	; 0x30
   1a974:	7023      	strb	r3, [r4, #0]
   1a976:	0028      	movs	r0, r5
   1a978:	430a      	orrs	r2, r1
   1a97a:	d1ed      	bne.n	1a958 <_vfprintf_r+0xba0>
   1a97c:	900c      	str	r0, [sp, #48]	; 0x30
   1a97e:	910d      	str	r1, [sp, #52]	; 0x34
   1a980:	9908      	ldr	r1, [sp, #32]
   1a982:	4656      	mov	r6, sl
   1a984:	468a      	mov	sl, r1
   1a986:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a988:	464a      	mov	r2, r9
   1a98a:	9411      	str	r4, [sp, #68]	; 0x44
   1a98c:	07c9      	lsls	r1, r1, #31
   1a98e:	d500      	bpl.n	1a992 <_vfprintf_r+0xbda>
   1a990:	e0e0      	b.n	1ab54 <_vfprintf_r+0xd9c>
   1a992:	ab32      	add	r3, sp, #200	; 0xc8
   1a994:	1b1b      	subs	r3, r3, r4
   1a996:	930e      	str	r3, [sp, #56]	; 0x38
   1a998:	f7ff fb7b 	bl	1a092 <_vfprintf_r+0x2da>
   1a99c:	9c07      	ldr	r4, [sp, #28]
   1a99e:	f7ff fa7d 	bl	19e9c <_vfprintf_r+0xe4>
   1a9a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1a9a4:	2800      	cmp	r0, #0
   1a9a6:	dc00      	bgt.n	1a9aa <_vfprintf_r+0xbf2>
   1a9a8:	e2b9      	b.n	1af1e <_vfprintf_r+0x1166>
   1a9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a9ac:	9914      	ldr	r1, [sp, #80]	; 0x50
   1a9ae:	0013      	movs	r3, r2
   1a9b0:	4690      	mov	r8, r2
   1a9b2:	428b      	cmp	r3, r1
   1a9b4:	dd00      	ble.n	1a9b8 <_vfprintf_r+0xc00>
   1a9b6:	4688      	mov	r8, r1
   1a9b8:	4643      	mov	r3, r8
   1a9ba:	2b00      	cmp	r3, #0
   1a9bc:	dd0c      	ble.n	1a9d8 <_vfprintf_r+0xc20>
   1a9be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a9c0:	4444      	add	r4, r8
   1a9c2:	6033      	str	r3, [r6, #0]
   1a9c4:	4643      	mov	r3, r8
   1a9c6:	6073      	str	r3, [r6, #4]
   1a9c8:	687b      	ldr	r3, [r7, #4]
   1a9ca:	60bc      	str	r4, [r7, #8]
   1a9cc:	3301      	adds	r3, #1
   1a9ce:	607b      	str	r3, [r7, #4]
   1a9d0:	2b07      	cmp	r3, #7
   1a9d2:	dd00      	ble.n	1a9d6 <_vfprintf_r+0xc1e>
   1a9d4:	e389      	b.n	1b0ea <_vfprintf_r+0x1332>
   1a9d6:	3608      	adds	r6, #8
   1a9d8:	4643      	mov	r3, r8
   1a9da:	43db      	mvns	r3, r3
   1a9dc:	4642      	mov	r2, r8
   1a9de:	17db      	asrs	r3, r3, #31
   1a9e0:	4013      	ands	r3, r2
   1a9e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a9e4:	1ad3      	subs	r3, r2, r3
   1a9e6:	4698      	mov	r8, r3
   1a9e8:	2b00      	cmp	r3, #0
   1a9ea:	dc00      	bgt.n	1a9ee <_vfprintf_r+0xc36>
   1a9ec:	e0eb      	b.n	1abc6 <_vfprintf_r+0xe0e>
   1a9ee:	2b10      	cmp	r3, #16
   1a9f0:	dc01      	bgt.n	1a9f6 <_vfprintf_r+0xc3e>
   1a9f2:	f000 fcd9 	bl	1b3a8 <_vfprintf_r+0x15f0>
   1a9f6:	4adc      	ldr	r2, [pc, #880]	; (1ad68 <_vfprintf_r+0xfb0>)
   1a9f8:	687b      	ldr	r3, [r7, #4]
   1a9fa:	4691      	mov	r9, r2
   1a9fc:	2210      	movs	r2, #16
   1a9fe:	464d      	mov	r5, r9
   1aa00:	4692      	mov	sl, r2
   1aa02:	0022      	movs	r2, r4
   1aa04:	4644      	mov	r4, r8
   1aa06:	46d8      	mov	r8, fp
   1aa08:	e004      	b.n	1aa14 <_vfprintf_r+0xc5c>
   1aa0a:	3608      	adds	r6, #8
   1aa0c:	3c10      	subs	r4, #16
   1aa0e:	2c10      	cmp	r4, #16
   1aa10:	dc00      	bgt.n	1aa14 <_vfprintf_r+0xc5c>
   1aa12:	e0bf      	b.n	1ab94 <_vfprintf_r+0xddc>
   1aa14:	4651      	mov	r1, sl
   1aa16:	3210      	adds	r2, #16
   1aa18:	3301      	adds	r3, #1
   1aa1a:	6035      	str	r5, [r6, #0]
   1aa1c:	6071      	str	r1, [r6, #4]
   1aa1e:	60ba      	str	r2, [r7, #8]
   1aa20:	607b      	str	r3, [r7, #4]
   1aa22:	2b07      	cmp	r3, #7
   1aa24:	ddf1      	ble.n	1aa0a <_vfprintf_r+0xc52>
   1aa26:	003a      	movs	r2, r7
   1aa28:	4641      	mov	r1, r8
   1aa2a:	9806      	ldr	r0, [sp, #24]
   1aa2c:	f003 fc84 	bl	1e338 <__sprint_r>
   1aa30:	2800      	cmp	r0, #0
   1aa32:	d000      	beq.n	1aa36 <_vfprintf_r+0xc7e>
   1aa34:	e3b6      	b.n	1b1a4 <_vfprintf_r+0x13ec>
   1aa36:	68ba      	ldr	r2, [r7, #8]
   1aa38:	687b      	ldr	r3, [r7, #4]
   1aa3a:	ae32      	add	r6, sp, #200	; 0xc8
   1aa3c:	e7e6      	b.n	1aa0c <_vfprintf_r+0xc54>
   1aa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aa40:	2b00      	cmp	r3, #0
   1aa42:	d100      	bne.n	1aa46 <_vfprintf_r+0xc8e>
   1aa44:	e092      	b.n	1ab6c <_vfprintf_r+0xdb4>
   1aa46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1aa48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1aa4a:	ab32      	add	r3, sp, #200	; 0xc8
   1aa4c:	46b1      	mov	r9, r6
   1aa4e:	001e      	movs	r6, r3
   1aa50:	0020      	movs	r0, r4
   1aa52:	0029      	movs	r1, r5
   1aa54:	220a      	movs	r2, #10
   1aa56:	2300      	movs	r3, #0
   1aa58:	f7fc ffb0 	bl	179bc <__aeabi_uldivmod>
   1aa5c:	3e01      	subs	r6, #1
   1aa5e:	3230      	adds	r2, #48	; 0x30
   1aa60:	7032      	strb	r2, [r6, #0]
   1aa62:	2300      	movs	r3, #0
   1aa64:	0020      	movs	r0, r4
   1aa66:	0029      	movs	r1, r5
   1aa68:	220a      	movs	r2, #10
   1aa6a:	f7fc ffa7 	bl	179bc <__aeabi_uldivmod>
   1aa6e:	0003      	movs	r3, r0
   1aa70:	0004      	movs	r4, r0
   1aa72:	000d      	movs	r5, r1
   1aa74:	430b      	orrs	r3, r1
   1aa76:	d1eb      	bne.n	1aa50 <_vfprintf_r+0xc98>
   1aa78:	0032      	movs	r2, r6
   1aa7a:	ab32      	add	r3, sp, #200	; 0xc8
   1aa7c:	1a9b      	subs	r3, r3, r2
   1aa7e:	9611      	str	r6, [sp, #68]	; 0x44
   1aa80:	940c      	str	r4, [sp, #48]	; 0x30
   1aa82:	950d      	str	r5, [sp, #52]	; 0x34
   1aa84:	464e      	mov	r6, r9
   1aa86:	930e      	str	r3, [sp, #56]	; 0x38
   1aa88:	f7ff fb03 	bl	1a092 <_vfprintf_r+0x2da>
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	930e      	str	r3, [sp, #56]	; 0x38
   1aa90:	ab32      	add	r3, sp, #200	; 0xc8
   1aa92:	9311      	str	r3, [sp, #68]	; 0x44
   1aa94:	f7ff fafd 	bl	1a092 <_vfprintf_r+0x2da>
   1aa98:	003a      	movs	r2, r7
   1aa9a:	4659      	mov	r1, fp
   1aa9c:	9806      	ldr	r0, [sp, #24]
   1aa9e:	f003 fc4b 	bl	1e338 <__sprint_r>
   1aaa2:	2800      	cmp	r0, #0
   1aaa4:	d000      	beq.n	1aaa8 <_vfprintf_r+0xcf0>
   1aaa6:	e717      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1aaa8:	ab16      	add	r3, sp, #88	; 0x58
   1aaaa:	7fdb      	ldrb	r3, [r3, #31]
   1aaac:	68bc      	ldr	r4, [r7, #8]
   1aaae:	4698      	mov	r8, r3
   1aab0:	ae32      	add	r6, sp, #200	; 0xc8
   1aab2:	e513      	b.n	1a4dc <_vfprintf_r+0x724>
   1aab4:	46b1      	mov	r9, r6
   1aab6:	e697      	b.n	1a7e8 <_vfprintf_r+0xa30>
   1aab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1aaba:	1e5d      	subs	r5, r3, #1
   1aabc:	2d00      	cmp	r5, #0
   1aabe:	dc00      	bgt.n	1aac2 <_vfprintf_r+0xd0a>
   1aac0:	e616      	b.n	1a6f0 <_vfprintf_r+0x938>
   1aac2:	4ba9      	ldr	r3, [pc, #676]	; (1ad68 <_vfprintf_r+0xfb0>)
   1aac4:	4699      	mov	r9, r3
   1aac6:	2d10      	cmp	r5, #16
   1aac8:	dc00      	bgt.n	1aacc <_vfprintf_r+0xd14>
   1aaca:	e10a      	b.n	1ace2 <_vfprintf_r+0xf2a>
   1aacc:	2310      	movs	r3, #16
   1aace:	0022      	movs	r2, r4
   1aad0:	469a      	mov	sl, r3
   1aad2:	465c      	mov	r4, fp
   1aad4:	4643      	mov	r3, r8
   1aad6:	e004      	b.n	1aae2 <_vfprintf_r+0xd2a>
   1aad8:	3608      	adds	r6, #8
   1aada:	3d10      	subs	r5, #16
   1aadc:	2d10      	cmp	r5, #16
   1aade:	dc00      	bgt.n	1aae2 <_vfprintf_r+0xd2a>
   1aae0:	e0fc      	b.n	1acdc <_vfprintf_r+0xf24>
   1aae2:	4649      	mov	r1, r9
   1aae4:	6031      	str	r1, [r6, #0]
   1aae6:	4651      	mov	r1, sl
   1aae8:	3210      	adds	r2, #16
   1aaea:	3301      	adds	r3, #1
   1aaec:	6071      	str	r1, [r6, #4]
   1aaee:	60ba      	str	r2, [r7, #8]
   1aaf0:	607b      	str	r3, [r7, #4]
   1aaf2:	2b07      	cmp	r3, #7
   1aaf4:	ddf0      	ble.n	1aad8 <_vfprintf_r+0xd20>
   1aaf6:	003a      	movs	r2, r7
   1aaf8:	0021      	movs	r1, r4
   1aafa:	9806      	ldr	r0, [sp, #24]
   1aafc:	f003 fc1c 	bl	1e338 <__sprint_r>
   1ab00:	2800      	cmp	r0, #0
   1ab02:	d000      	beq.n	1ab06 <_vfprintf_r+0xd4e>
   1ab04:	e6c1      	b.n	1a88a <_vfprintf_r+0xad2>
   1ab06:	68ba      	ldr	r2, [r7, #8]
   1ab08:	687b      	ldr	r3, [r7, #4]
   1ab0a:	ae32      	add	r6, sp, #200	; 0xc8
   1ab0c:	e7e5      	b.n	1aada <_vfprintf_r+0xd22>
   1ab0e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ab10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ab12:	0008      	movs	r0, r1
   1ab14:	4310      	orrs	r0, r2
   1ab16:	2302      	movs	r3, #2
   1ab18:	0002      	movs	r2, r0
   1ab1a:	f7ff fa93 	bl	1a044 <_vfprintf_r+0x28c>
   1ab1e:	46a3      	mov	fp, r4
   1ab20:	0014      	movs	r4, r2
   1ab22:	464a      	mov	r2, r9
   1ab24:	1964      	adds	r4, r4, r5
   1ab26:	3301      	adds	r3, #1
   1ab28:	6032      	str	r2, [r6, #0]
   1ab2a:	6075      	str	r5, [r6, #4]
   1ab2c:	60bc      	str	r4, [r7, #8]
   1ab2e:	607b      	str	r3, [r7, #4]
   1ab30:	2b07      	cmp	r3, #7
   1ab32:	dc00      	bgt.n	1ab36 <_vfprintf_r+0xd7e>
   1ab34:	e542      	b.n	1a5bc <_vfprintf_r+0x804>
   1ab36:	e5e8      	b.n	1a70a <_vfprintf_r+0x952>
   1ab38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab3a:	681a      	ldr	r2, [r3, #0]
   1ab3c:	f7ff fa68 	bl	1a010 <_vfprintf_r+0x258>
   1ab40:	6813      	ldr	r3, [r2, #0]
   1ab42:	9308      	str	r3, [sp, #32]
   1ab44:	f7ff fb57 	bl	1a1f6 <_vfprintf_r+0x43e>
   1ab48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab4a:	681a      	ldr	r2, [r3, #0]
   1ab4c:	e412      	b.n	1a374 <_vfprintf_r+0x5bc>
   1ab4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab50:	681a      	ldr	r2, [r3, #0]
   1ab52:	e426      	b.n	1a3a2 <_vfprintf_r+0x5ea>
   1ab54:	2b30      	cmp	r3, #48	; 0x30
   1ab56:	d100      	bne.n	1ab5a <_vfprintf_r+0xda2>
   1ab58:	e23c      	b.n	1afd4 <_vfprintf_r+0x121c>
   1ab5a:	2330      	movs	r3, #48	; 0x30
   1ab5c:	3a02      	subs	r2, #2
   1ab5e:	7013      	strb	r3, [r2, #0]
   1ab60:	ab32      	add	r3, sp, #200	; 0xc8
   1ab62:	1a9b      	subs	r3, r3, r2
   1ab64:	930e      	str	r3, [sp, #56]	; 0x38
   1ab66:	9211      	str	r2, [sp, #68]	; 0x44
   1ab68:	f7ff fa93 	bl	1a092 <_vfprintf_r+0x2da>
   1ab6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ab6e:	2b09      	cmp	r3, #9
   1ab70:	d900      	bls.n	1ab74 <_vfprintf_r+0xdbc>
   1ab72:	e768      	b.n	1aa46 <_vfprintf_r+0xc8e>
   1ab74:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1ab76:	2227      	movs	r2, #39	; 0x27
   1ab78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ab7a:	a928      	add	r1, sp, #160	; 0xa0
   1ab7c:	3330      	adds	r3, #48	; 0x30
   1ab7e:	548b      	strb	r3, [r1, r2]
   1ab80:	2301      	movs	r3, #1
   1ab82:	aa16      	add	r2, sp, #88	; 0x58
   1ab84:	4694      	mov	ip, r2
   1ab86:	930e      	str	r3, [sp, #56]	; 0x38
   1ab88:	336e      	adds	r3, #110	; 0x6e
   1ab8a:	4463      	add	r3, ip
   1ab8c:	9409      	str	r4, [sp, #36]	; 0x24
   1ab8e:	9311      	str	r3, [sp, #68]	; 0x44
   1ab90:	f7ff fa7f 	bl	1a092 <_vfprintf_r+0x2da>
   1ab94:	46c3      	mov	fp, r8
   1ab96:	46a9      	mov	r9, r5
   1ab98:	46a0      	mov	r8, r4
   1ab9a:	0014      	movs	r4, r2
   1ab9c:	464a      	mov	r2, r9
   1ab9e:	6032      	str	r2, [r6, #0]
   1aba0:	4642      	mov	r2, r8
   1aba2:	4444      	add	r4, r8
   1aba4:	3301      	adds	r3, #1
   1aba6:	6072      	str	r2, [r6, #4]
   1aba8:	60bc      	str	r4, [r7, #8]
   1abaa:	607b      	str	r3, [r7, #4]
   1abac:	2b07      	cmp	r3, #7
   1abae:	dc00      	bgt.n	1abb2 <_vfprintf_r+0xdfa>
   1abb0:	e18d      	b.n	1aece <_vfprintf_r+0x1116>
   1abb2:	003a      	movs	r2, r7
   1abb4:	4659      	mov	r1, fp
   1abb6:	9806      	ldr	r0, [sp, #24]
   1abb8:	f003 fbbe 	bl	1e338 <__sprint_r>
   1abbc:	2800      	cmp	r0, #0
   1abbe:	d000      	beq.n	1abc2 <_vfprintf_r+0xe0a>
   1abc0:	e68a      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1abc2:	68bc      	ldr	r4, [r7, #8]
   1abc4:	ae32      	add	r6, sp, #200	; 0xc8
   1abc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1abc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1abca:	4293      	cmp	r3, r2
   1abcc:	db00      	blt.n	1abd0 <_vfprintf_r+0xe18>
   1abce:	e179      	b.n	1aec4 <_vfprintf_r+0x110c>
   1abd0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1abd2:	6032      	str	r2, [r6, #0]
   1abd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1abd6:	4694      	mov	ip, r2
   1abd8:	6072      	str	r2, [r6, #4]
   1abda:	687a      	ldr	r2, [r7, #4]
   1abdc:	4464      	add	r4, ip
   1abde:	3201      	adds	r2, #1
   1abe0:	60bc      	str	r4, [r7, #8]
   1abe2:	607a      	str	r2, [r7, #4]
   1abe4:	2a07      	cmp	r2, #7
   1abe6:	dd00      	ble.n	1abea <_vfprintf_r+0xe32>
   1abe8:	e176      	b.n	1aed8 <_vfprintf_r+0x1120>
   1abea:	3608      	adds	r6, #8
   1abec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1abee:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1abf0:	1ad3      	subs	r3, r2, r3
   1abf2:	1a52      	subs	r2, r2, r1
   1abf4:	4690      	mov	r8, r2
   1abf6:	429a      	cmp	r2, r3
   1abf8:	dd00      	ble.n	1abfc <_vfprintf_r+0xe44>
   1abfa:	4698      	mov	r8, r3
   1abfc:	4642      	mov	r2, r8
   1abfe:	2a00      	cmp	r2, #0
   1ac00:	dd0f      	ble.n	1ac22 <_vfprintf_r+0xe6a>
   1ac02:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1ac04:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ac06:	468c      	mov	ip, r1
   1ac08:	4462      	add	r2, ip
   1ac0a:	6032      	str	r2, [r6, #0]
   1ac0c:	4642      	mov	r2, r8
   1ac0e:	6072      	str	r2, [r6, #4]
   1ac10:	687a      	ldr	r2, [r7, #4]
   1ac12:	4444      	add	r4, r8
   1ac14:	3201      	adds	r2, #1
   1ac16:	60bc      	str	r4, [r7, #8]
   1ac18:	607a      	str	r2, [r7, #4]
   1ac1a:	2a07      	cmp	r2, #7
   1ac1c:	dd00      	ble.n	1ac20 <_vfprintf_r+0xe68>
   1ac1e:	e289      	b.n	1b134 <_vfprintf_r+0x137c>
   1ac20:	3608      	adds	r6, #8
   1ac22:	4642      	mov	r2, r8
   1ac24:	43d5      	mvns	r5, r2
   1ac26:	17ed      	asrs	r5, r5, #31
   1ac28:	4015      	ands	r5, r2
   1ac2a:	1b5d      	subs	r5, r3, r5
   1ac2c:	2d00      	cmp	r5, #0
   1ac2e:	dc00      	bgt.n	1ac32 <_vfprintf_r+0xe7a>
   1ac30:	e4c5      	b.n	1a5be <_vfprintf_r+0x806>
   1ac32:	4a4d      	ldr	r2, [pc, #308]	; (1ad68 <_vfprintf_r+0xfb0>)
   1ac34:	687b      	ldr	r3, [r7, #4]
   1ac36:	4691      	mov	r9, r2
   1ac38:	2d10      	cmp	r5, #16
   1ac3a:	dc00      	bgt.n	1ac3e <_vfprintf_r+0xe86>
   1ac3c:	e771      	b.n	1ab22 <_vfprintf_r+0xd6a>
   1ac3e:	2210      	movs	r2, #16
   1ac40:	4690      	mov	r8, r2
   1ac42:	0022      	movs	r2, r4
   1ac44:	465c      	mov	r4, fp
   1ac46:	e004      	b.n	1ac52 <_vfprintf_r+0xe9a>
   1ac48:	3608      	adds	r6, #8
   1ac4a:	3d10      	subs	r5, #16
   1ac4c:	2d10      	cmp	r5, #16
   1ac4e:	dc00      	bgt.n	1ac52 <_vfprintf_r+0xe9a>
   1ac50:	e765      	b.n	1ab1e <_vfprintf_r+0xd66>
   1ac52:	4649      	mov	r1, r9
   1ac54:	6031      	str	r1, [r6, #0]
   1ac56:	4641      	mov	r1, r8
   1ac58:	3210      	adds	r2, #16
   1ac5a:	3301      	adds	r3, #1
   1ac5c:	6071      	str	r1, [r6, #4]
   1ac5e:	60ba      	str	r2, [r7, #8]
   1ac60:	607b      	str	r3, [r7, #4]
   1ac62:	2b07      	cmp	r3, #7
   1ac64:	ddf0      	ble.n	1ac48 <_vfprintf_r+0xe90>
   1ac66:	003a      	movs	r2, r7
   1ac68:	0021      	movs	r1, r4
   1ac6a:	9806      	ldr	r0, [sp, #24]
   1ac6c:	f003 fb64 	bl	1e338 <__sprint_r>
   1ac70:	2800      	cmp	r0, #0
   1ac72:	d000      	beq.n	1ac76 <_vfprintf_r+0xebe>
   1ac74:	e609      	b.n	1a88a <_vfprintf_r+0xad2>
   1ac76:	68ba      	ldr	r2, [r7, #8]
   1ac78:	687b      	ldr	r3, [r7, #4]
   1ac7a:	ae32      	add	r6, sp, #200	; 0xc8
   1ac7c:	e7e5      	b.n	1ac4a <_vfprintf_r+0xe92>
   1ac7e:	003a      	movs	r2, r7
   1ac80:	4659      	mov	r1, fp
   1ac82:	9806      	ldr	r0, [sp, #24]
   1ac84:	f003 fb58 	bl	1e338 <__sprint_r>
   1ac88:	2800      	cmp	r0, #0
   1ac8a:	d000      	beq.n	1ac8e <_vfprintf_r+0xed6>
   1ac8c:	e624      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1ac8e:	68bc      	ldr	r4, [r7, #8]
   1ac90:	687b      	ldr	r3, [r7, #4]
   1ac92:	ae32      	add	r6, sp, #200	; 0xc8
   1ac94:	e504      	b.n	1a6a0 <_vfprintf_r+0x8e8>
   1ac96:	2307      	movs	r3, #7
   1ac98:	3207      	adds	r2, #7
   1ac9a:	439a      	bics	r2, r3
   1ac9c:	3301      	adds	r3, #1
   1ac9e:	469c      	mov	ip, r3
   1aca0:	4494      	add	ip, r2
   1aca2:	4663      	mov	r3, ip
   1aca4:	930f      	str	r3, [sp, #60]	; 0x3c
   1aca6:	6853      	ldr	r3, [r2, #4]
   1aca8:	6812      	ldr	r2, [r2, #0]
   1acaa:	930d      	str	r3, [sp, #52]	; 0x34
   1acac:	920c      	str	r2, [sp, #48]	; 0x30
   1acae:	f7ff faa7 	bl	1a200 <_vfprintf_r+0x448>
   1acb2:	2207      	movs	r2, #7
   1acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1acb6:	3307      	adds	r3, #7
   1acb8:	4393      	bics	r3, r2
   1acba:	3201      	adds	r2, #1
   1acbc:	4694      	mov	ip, r2
   1acbe:	449c      	add	ip, r3
   1acc0:	4662      	mov	r2, ip
   1acc2:	920f      	str	r2, [sp, #60]	; 0x3c
   1acc4:	681a      	ldr	r2, [r3, #0]
   1acc6:	685b      	ldr	r3, [r3, #4]
   1acc8:	0011      	movs	r1, r2
   1acca:	001a      	movs	r2, r3
   1accc:	0008      	movs	r0, r1
   1acce:	4310      	orrs	r0, r2
   1acd0:	910c      	str	r1, [sp, #48]	; 0x30
   1acd2:	920d      	str	r2, [sp, #52]	; 0x34
   1acd4:	2300      	movs	r3, #0
   1acd6:	0002      	movs	r2, r0
   1acd8:	f7ff f9b4 	bl	1a044 <_vfprintf_r+0x28c>
   1acdc:	46a3      	mov	fp, r4
   1acde:	4698      	mov	r8, r3
   1ace0:	0014      	movs	r4, r2
   1ace2:	464b      	mov	r3, r9
   1ace4:	6075      	str	r5, [r6, #4]
   1ace6:	6033      	str	r3, [r6, #0]
   1ace8:	1964      	adds	r4, r4, r5
   1acea:	e4f7      	b.n	1a6dc <_vfprintf_r+0x924>
   1acec:	003a      	movs	r2, r7
   1acee:	4659      	mov	r1, fp
   1acf0:	9806      	ldr	r0, [sp, #24]
   1acf2:	f003 fb21 	bl	1e338 <__sprint_r>
   1acf6:	2800      	cmp	r0, #0
   1acf8:	d000      	beq.n	1acfc <_vfprintf_r+0xf44>
   1acfa:	e5ed      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1acfc:	687b      	ldr	r3, [r7, #4]
   1acfe:	68bc      	ldr	r4, [r7, #8]
   1ad00:	4698      	mov	r8, r3
   1ad02:	ae32      	add	r6, sp, #200	; 0xc8
   1ad04:	e4da      	b.n	1a6bc <_vfprintf_r+0x904>
   1ad06:	2207      	movs	r2, #7
   1ad08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad0a:	3307      	adds	r3, #7
   1ad0c:	4393      	bics	r3, r2
   1ad0e:	3201      	adds	r2, #1
   1ad10:	4694      	mov	ip, r2
   1ad12:	449c      	add	ip, r3
   1ad14:	4662      	mov	r2, ip
   1ad16:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad18:	681a      	ldr	r2, [r3, #0]
   1ad1a:	685b      	ldr	r3, [r3, #4]
   1ad1c:	0011      	movs	r1, r2
   1ad1e:	001a      	movs	r2, r3
   1ad20:	0008      	movs	r0, r1
   1ad22:	4310      	orrs	r0, r2
   1ad24:	910c      	str	r1, [sp, #48]	; 0x30
   1ad26:	920d      	str	r2, [sp, #52]	; 0x34
   1ad28:	2301      	movs	r3, #1
   1ad2a:	0002      	movs	r2, r0
   1ad2c:	f7ff f98a 	bl	1a044 <_vfprintf_r+0x28c>
   1ad30:	2207      	movs	r2, #7
   1ad32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad34:	3307      	adds	r3, #7
   1ad36:	4393      	bics	r3, r2
   1ad38:	3201      	adds	r2, #1
   1ad3a:	4694      	mov	ip, r2
   1ad3c:	449c      	add	ip, r3
   1ad3e:	4662      	mov	r2, ip
   1ad40:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad42:	681a      	ldr	r2, [r3, #0]
   1ad44:	685b      	ldr	r3, [r3, #4]
   1ad46:	920c      	str	r2, [sp, #48]	; 0x30
   1ad48:	930d      	str	r3, [sp, #52]	; 0x34
   1ad4a:	f7ff f966 	bl	1a01a <_vfprintf_r+0x262>
   1ad4e:	003a      	movs	r2, r7
   1ad50:	4659      	mov	r1, fp
   1ad52:	9806      	ldr	r0, [sp, #24]
   1ad54:	f003 faf0 	bl	1e338 <__sprint_r>
   1ad58:	2800      	cmp	r0, #0
   1ad5a:	d000      	beq.n	1ad5e <_vfprintf_r+0xfa6>
   1ad5c:	e5bc      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1ad5e:	68bc      	ldr	r4, [r7, #8]
   1ad60:	ae32      	add	r6, sp, #200	; 0xc8
   1ad62:	f7ff fbe2 	bl	1a52a <_vfprintf_r+0x772>
   1ad66:	46c0      	nop			; (mov r8, r8)
   1ad68:	0001fe34 	.word	0x0001fe34
   1ad6c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1ad6e:	990d      	ldr	r1, [sp, #52]	; 0x34
   1ad70:	2300      	movs	r3, #0
   1ad72:	4242      	negs	r2, r0
   1ad74:	418b      	sbcs	r3, r1
   1ad76:	0011      	movs	r1, r2
   1ad78:	001a      	movs	r2, r3
   1ad7a:	232d      	movs	r3, #45	; 0x2d
   1ad7c:	a816      	add	r0, sp, #88	; 0x58
   1ad7e:	77c3      	strb	r3, [r0, #31]
   1ad80:	0008      	movs	r0, r1
   1ad82:	4310      	orrs	r0, r2
   1ad84:	910c      	str	r1, [sp, #48]	; 0x30
   1ad86:	920d      	str	r2, [sp, #52]	; 0x34
   1ad88:	4698      	mov	r8, r3
   1ad8a:	0002      	movs	r2, r0
   1ad8c:	3b2c      	subs	r3, #44	; 0x2c
   1ad8e:	f7ff f95d 	bl	1a04c <_vfprintf_r+0x294>
   1ad92:	9916      	ldr	r1, [sp, #88]	; 0x58
   1ad94:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1ad96:	000a      	movs	r2, r1
   1ad98:	0008      	movs	r0, r1
   1ad9a:	002b      	movs	r3, r5
   1ad9c:	0029      	movs	r1, r5
   1ad9e:	f003 fd65 	bl	1e86c <__aeabi_dcmpun>
   1ada2:	2800      	cmp	r0, #0
   1ada4:	d000      	beq.n	1ada8 <_vfprintf_r+0xff0>
   1ada6:	e2c6      	b.n	1b336 <_vfprintf_r+0x157e>
   1ada8:	4653      	mov	r3, sl
   1adaa:	3301      	adds	r3, #1
   1adac:	d100      	bne.n	1adb0 <_vfprintf_r+0xff8>
   1adae:	e09f      	b.n	1aef0 <_vfprintf_r+0x1138>
   1adb0:	2320      	movs	r3, #32
   1adb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1adb4:	439a      	bics	r2, r3
   1adb6:	920e      	str	r2, [sp, #56]	; 0x38
   1adb8:	2a47      	cmp	r2, #71	; 0x47
   1adba:	d100      	bne.n	1adbe <_vfprintf_r+0x1006>
   1adbc:	e1a1      	b.n	1b102 <_vfprintf_r+0x134a>
   1adbe:	2380      	movs	r3, #128	; 0x80
   1adc0:	005b      	lsls	r3, r3, #1
   1adc2:	4323      	orrs	r3, r4
   1adc4:	9309      	str	r3, [sp, #36]	; 0x24
   1adc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1adc8:	2b00      	cmp	r3, #0
   1adca:	da00      	bge.n	1adce <_vfprintf_r+0x1016>
   1adcc:	e1ed      	b.n	1b1aa <_vfprintf_r+0x13f2>
   1adce:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1add0:	9308      	str	r3, [sp, #32]
   1add2:	2300      	movs	r3, #0
   1add4:	4691      	mov	r9, r2
   1add6:	9310      	str	r3, [sp, #64]	; 0x40
   1add8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1adda:	2b66      	cmp	r3, #102	; 0x66
   1addc:	d100      	bne.n	1ade0 <_vfprintf_r+0x1028>
   1adde:	e1b8      	b.n	1b152 <_vfprintf_r+0x139a>
   1ade0:	2b46      	cmp	r3, #70	; 0x46
   1ade2:	d100      	bne.n	1ade6 <_vfprintf_r+0x102e>
   1ade4:	e237      	b.n	1b256 <_vfprintf_r+0x149e>
   1ade6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ade8:	9806      	ldr	r0, [sp, #24]
   1adea:	3a45      	subs	r2, #69	; 0x45
   1adec:	0013      	movs	r3, r2
   1adee:	4259      	negs	r1, r3
   1adf0:	4159      	adcs	r1, r3
   1adf2:	ab20      	add	r3, sp, #128	; 0x80
   1adf4:	000d      	movs	r5, r1
   1adf6:	9303      	str	r3, [sp, #12]
   1adf8:	ab1f      	add	r3, sp, #124	; 0x7c
   1adfa:	9302      	str	r3, [sp, #8]
   1adfc:	2302      	movs	r3, #2
   1adfe:	aa23      	add	r2, sp, #140	; 0x8c
   1ae00:	4455      	add	r5, sl
   1ae02:	921b      	str	r2, [sp, #108]	; 0x6c
   1ae04:	9204      	str	r2, [sp, #16]
   1ae06:	9300      	str	r3, [sp, #0]
   1ae08:	9501      	str	r5, [sp, #4]
   1ae0a:	9b08      	ldr	r3, [sp, #32]
   1ae0c:	464a      	mov	r2, r9
   1ae0e:	f000 fcab 	bl	1b768 <_dtoa_r>
   1ae12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ae14:	9011      	str	r0, [sp, #68]	; 0x44
   1ae16:	2b67      	cmp	r3, #103	; 0x67
   1ae18:	d000      	beq.n	1ae1c <_vfprintf_r+0x1064>
   1ae1a:	e20b      	b.n	1b234 <_vfprintf_r+0x147c>
   1ae1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ae1e:	4698      	mov	r8, r3
   1ae20:	44a8      	add	r8, r5
   1ae22:	07e3      	lsls	r3, r4, #31
   1ae24:	d400      	bmi.n	1ae28 <_vfprintf_r+0x1070>
   1ae26:	e277      	b.n	1b318 <_vfprintf_r+0x1560>
   1ae28:	2300      	movs	r3, #0
   1ae2a:	2200      	movs	r2, #0
   1ae2c:	4648      	mov	r0, r9
   1ae2e:	9908      	ldr	r1, [sp, #32]
   1ae30:	f7fc fd96 	bl	17960 <__aeabi_dcmpeq>
   1ae34:	4643      	mov	r3, r8
   1ae36:	2800      	cmp	r0, #0
   1ae38:	d10a      	bne.n	1ae50 <_vfprintf_r+0x1098>
   1ae3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ae3c:	4543      	cmp	r3, r8
   1ae3e:	d207      	bcs.n	1ae50 <_vfprintf_r+0x1098>
   1ae40:	2130      	movs	r1, #48	; 0x30
   1ae42:	4640      	mov	r0, r8
   1ae44:	1c5a      	adds	r2, r3, #1
   1ae46:	9223      	str	r2, [sp, #140]	; 0x8c
   1ae48:	7019      	strb	r1, [r3, #0]
   1ae4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ae4c:	4298      	cmp	r0, r3
   1ae4e:	d8f9      	bhi.n	1ae44 <_vfprintf_r+0x108c>
   1ae50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ae52:	1a9b      	subs	r3, r3, r2
   1ae54:	9314      	str	r3, [sp, #80]	; 0x50
   1ae56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae58:	2b47      	cmp	r3, #71	; 0x47
   1ae5a:	d100      	bne.n	1ae5e <_vfprintf_r+0x10a6>
   1ae5c:	e0d0      	b.n	1b000 <_vfprintf_r+0x1248>
   1ae5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ae60:	2b65      	cmp	r3, #101	; 0x65
   1ae62:	dc00      	bgt.n	1ae66 <_vfprintf_r+0x10ae>
   1ae64:	e2d5      	b.n	1b412 <_vfprintf_r+0x165a>
   1ae66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ae68:	2b66      	cmp	r3, #102	; 0x66
   1ae6a:	d100      	bne.n	1ae6e <_vfprintf_r+0x10b6>
   1ae6c:	e1c6      	b.n	1b1fc <_vfprintf_r+0x1444>
   1ae6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ae70:	9313      	str	r3, [sp, #76]	; 0x4c
   1ae72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ae74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ae76:	0019      	movs	r1, r3
   1ae78:	4291      	cmp	r1, r2
   1ae7a:	dd00      	ble.n	1ae7e <_vfprintf_r+0x10c6>
   1ae7c:	e1a0      	b.n	1b1c0 <_vfprintf_r+0x1408>
   1ae7e:	07e3      	lsls	r3, r4, #31
   1ae80:	d500      	bpl.n	1ae84 <_vfprintf_r+0x10cc>
   1ae82:	e242      	b.n	1b30a <_vfprintf_r+0x1552>
   1ae84:	43d3      	mvns	r3, r2
   1ae86:	17db      	asrs	r3, r3, #31
   1ae88:	0011      	movs	r1, r2
   1ae8a:	401a      	ands	r2, r3
   1ae8c:	2367      	movs	r3, #103	; 0x67
   1ae8e:	9208      	str	r2, [sp, #32]
   1ae90:	910e      	str	r1, [sp, #56]	; 0x38
   1ae92:	9312      	str	r3, [sp, #72]	; 0x48
   1ae94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ae96:	2b00      	cmp	r3, #0
   1ae98:	d000      	beq.n	1ae9c <_vfprintf_r+0x10e4>
   1ae9a:	e0a9      	b.n	1aff0 <_vfprintf_r+0x1238>
   1ae9c:	ab16      	add	r3, sp, #88	; 0x58
   1ae9e:	7fdb      	ldrb	r3, [r3, #31]
   1aea0:	4698      	mov	r8, r3
   1aea2:	2300      	movs	r3, #0
   1aea4:	469a      	mov	sl, r3
   1aea6:	f7ff f8fc 	bl	1a0a2 <_vfprintf_r+0x2ea>
   1aeaa:	46cb      	mov	fp, r9
   1aeac:	46a1      	mov	r9, r4
   1aeae:	0014      	movs	r4, r2
   1aeb0:	e637      	b.n	1ab22 <_vfprintf_r+0xd6a>
   1aeb2:	464b      	mov	r3, r9
   1aeb4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1aeb6:	f002 f871 	bl	1cf9c <__retarget_lock_release_recursive>
   1aeba:	2301      	movs	r3, #1
   1aebc:	425b      	negs	r3, r3
   1aebe:	930a      	str	r3, [sp, #40]	; 0x28
   1aec0:	f7ff f82b 	bl	19f1a <_vfprintf_r+0x162>
   1aec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1aec6:	07d2      	lsls	r2, r2, #31
   1aec8:	d400      	bmi.n	1aecc <_vfprintf_r+0x1114>
   1aeca:	e68f      	b.n	1abec <_vfprintf_r+0xe34>
   1aecc:	e680      	b.n	1abd0 <_vfprintf_r+0xe18>
   1aece:	3608      	adds	r6, #8
   1aed0:	e679      	b.n	1abc6 <_vfprintf_r+0xe0e>
   1aed2:	68bc      	ldr	r4, [r7, #8]
   1aed4:	f7ff fb73 	bl	1a5be <_vfprintf_r+0x806>
   1aed8:	003a      	movs	r2, r7
   1aeda:	4659      	mov	r1, fp
   1aedc:	9806      	ldr	r0, [sp, #24]
   1aede:	f003 fa2b 	bl	1e338 <__sprint_r>
   1aee2:	2800      	cmp	r0, #0
   1aee4:	d000      	beq.n	1aee8 <_vfprintf_r+0x1130>
   1aee6:	e4f7      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1aee8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1aeea:	68bc      	ldr	r4, [r7, #8]
   1aeec:	ae32      	add	r6, sp, #200	; 0xc8
   1aeee:	e67d      	b.n	1abec <_vfprintf_r+0xe34>
   1aef0:	2320      	movs	r3, #32
   1aef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1aef4:	439a      	bics	r2, r3
   1aef6:	3b1a      	subs	r3, #26
   1aef8:	920e      	str	r2, [sp, #56]	; 0x38
   1aefa:	469a      	mov	sl, r3
   1aefc:	e75f      	b.n	1adbe <_vfprintf_r+0x1006>
   1aefe:	232d      	movs	r3, #45	; 0x2d
   1af00:	aa16      	add	r2, sp, #88	; 0x58
   1af02:	77d3      	strb	r3, [r2, #31]
   1af04:	4698      	mov	r8, r3
   1af06:	f7ff faa8 	bl	1a45a <_vfprintf_r+0x6a2>
   1af0a:	003a      	movs	r2, r7
   1af0c:	4659      	mov	r1, fp
   1af0e:	9806      	ldr	r0, [sp, #24]
   1af10:	f003 fa12 	bl	1e338 <__sprint_r>
   1af14:	2800      	cmp	r0, #0
   1af16:	d000      	beq.n	1af1a <_vfprintf_r+0x1162>
   1af18:	e4de      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1af1a:	ae32      	add	r6, sp, #200	; 0xc8
   1af1c:	e419      	b.n	1a752 <_vfprintf_r+0x99a>
   1af1e:	4be3      	ldr	r3, [pc, #908]	; (1b2ac <_vfprintf_r+0x14f4>)
   1af20:	3401      	adds	r4, #1
   1af22:	6033      	str	r3, [r6, #0]
   1af24:	2301      	movs	r3, #1
   1af26:	6073      	str	r3, [r6, #4]
   1af28:	687b      	ldr	r3, [r7, #4]
   1af2a:	60bc      	str	r4, [r7, #8]
   1af2c:	3301      	adds	r3, #1
   1af2e:	607b      	str	r3, [r7, #4]
   1af30:	2b07      	cmp	r3, #7
   1af32:	dd00      	ble.n	1af36 <_vfprintf_r+0x117e>
   1af34:	e155      	b.n	1b1e2 <_vfprintf_r+0x142a>
   1af36:	3608      	adds	r6, #8
   1af38:	2800      	cmp	r0, #0
   1af3a:	d107      	bne.n	1af4c <_vfprintf_r+0x1194>
   1af3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af3e:	2b00      	cmp	r3, #0
   1af40:	d104      	bne.n	1af4c <_vfprintf_r+0x1194>
   1af42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1af44:	07db      	lsls	r3, r3, #31
   1af46:	d401      	bmi.n	1af4c <_vfprintf_r+0x1194>
   1af48:	f7ff fb39 	bl	1a5be <_vfprintf_r+0x806>
   1af4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1af4e:	6033      	str	r3, [r6, #0]
   1af50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1af52:	1919      	adds	r1, r3, r4
   1af54:	6073      	str	r3, [r6, #4]
   1af56:	687b      	ldr	r3, [r7, #4]
   1af58:	60b9      	str	r1, [r7, #8]
   1af5a:	3301      	adds	r3, #1
   1af5c:	607b      	str	r3, [r7, #4]
   1af5e:	2b07      	cmp	r3, #7
   1af60:	dd00      	ble.n	1af64 <_vfprintf_r+0x11ac>
   1af62:	e1c4      	b.n	1b2ee <_vfprintf_r+0x1536>
   1af64:	0032      	movs	r2, r6
   1af66:	3208      	adds	r2, #8
   1af68:	2800      	cmp	r0, #0
   1af6a:	da00      	bge.n	1af6e <_vfprintf_r+0x11b6>
   1af6c:	e195      	b.n	1b29a <_vfprintf_r+0x14e2>
   1af6e:	9811      	ldr	r0, [sp, #68]	; 0x44
   1af70:	3301      	adds	r3, #1
   1af72:	6010      	str	r0, [r2, #0]
   1af74:	9814      	ldr	r0, [sp, #80]	; 0x50
   1af76:	607b      	str	r3, [r7, #4]
   1af78:	1844      	adds	r4, r0, r1
   1af7a:	6050      	str	r0, [r2, #4]
   1af7c:	60bc      	str	r4, [r7, #8]
   1af7e:	2b07      	cmp	r3, #7
   1af80:	dd01      	ble.n	1af86 <_vfprintf_r+0x11ce>
   1af82:	f7ff fbc2 	bl	1a70a <_vfprintf_r+0x952>
   1af86:	3208      	adds	r2, #8
   1af88:	0016      	movs	r6, r2
   1af8a:	f7ff fb18 	bl	1a5be <_vfprintf_r+0x806>
   1af8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1af90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af92:	680b      	ldr	r3, [r1, #0]
   1af94:	601a      	str	r2, [r3, #0]
   1af96:	17d2      	asrs	r2, r2, #31
   1af98:	605a      	str	r2, [r3, #4]
   1af9a:	000b      	movs	r3, r1
   1af9c:	3304      	adds	r3, #4
   1af9e:	930f      	str	r3, [sp, #60]	; 0x3c
   1afa0:	f7fe ff58 	bl	19e54 <_vfprintf_r+0x9c>
   1afa4:	464b      	mov	r3, r9
   1afa6:	9a07      	ldr	r2, [sp, #28]
   1afa8:	431c      	orrs	r4, r3
   1afaa:	3201      	adds	r2, #1
   1afac:	7813      	ldrb	r3, [r2, #0]
   1afae:	9207      	str	r2, [sp, #28]
   1afb0:	f7fe ff8b 	bl	19eca <_vfprintf_r+0x112>
   1afb4:	003a      	movs	r2, r7
   1afb6:	4659      	mov	r1, fp
   1afb8:	9806      	ldr	r0, [sp, #24]
   1afba:	f003 f9bd 	bl	1e338 <__sprint_r>
   1afbe:	2800      	cmp	r0, #0
   1afc0:	d000      	beq.n	1afc4 <_vfprintf_r+0x120c>
   1afc2:	e489      	b.n	1a8d8 <_vfprintf_r+0xb20>
   1afc4:	68bc      	ldr	r4, [r7, #8]
   1afc6:	ae32      	add	r6, sp, #200	; 0xc8
   1afc8:	f7ff fbdc 	bl	1a784 <_vfprintf_r+0x9cc>
   1afcc:	4bb8      	ldr	r3, [pc, #736]	; (1b2b0 <_vfprintf_r+0x14f8>)
   1afce:	9311      	str	r3, [sp, #68]	; 0x44
   1afd0:	f7ff fa4a 	bl	1a468 <_vfprintf_r+0x6b0>
   1afd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1afd6:	ab32      	add	r3, sp, #200	; 0xc8
   1afd8:	1a9b      	subs	r3, r3, r2
   1afda:	930e      	str	r3, [sp, #56]	; 0x38
   1afdc:	f7ff f859 	bl	1a092 <_vfprintf_r+0x2da>
   1afe0:	9811      	ldr	r0, [sp, #68]	; 0x44
   1afe2:	f7fe feb7 	bl	19d54 <strlen>
   1afe6:	0002      	movs	r2, r0
   1afe8:	900e      	str	r0, [sp, #56]	; 0x38
   1afea:	0003      	movs	r3, r0
   1afec:	f7ff f9a1 	bl	1a332 <_vfprintf_r+0x57a>
   1aff0:	232d      	movs	r3, #45	; 0x2d
   1aff2:	aa16      	add	r2, sp, #88	; 0x58
   1aff4:	77d3      	strb	r3, [r2, #31]
   1aff6:	4698      	mov	r8, r3
   1aff8:	2300      	movs	r3, #0
   1affa:	469a      	mov	sl, r3
   1affc:	f7ff f854 	bl	1a0a8 <_vfprintf_r+0x2f0>
   1b000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b002:	9313      	str	r3, [sp, #76]	; 0x4c
   1b004:	1cda      	adds	r2, r3, #3
   1b006:	db02      	blt.n	1b00e <_vfprintf_r+0x1256>
   1b008:	459a      	cmp	sl, r3
   1b00a:	db00      	blt.n	1b00e <_vfprintf_r+0x1256>
   1b00c:	e731      	b.n	1ae72 <_vfprintf_r+0x10ba>
   1b00e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b010:	3b02      	subs	r3, #2
   1b012:	9312      	str	r3, [sp, #72]	; 0x48
   1b014:	222c      	movs	r2, #44	; 0x2c
   1b016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b018:	2148      	movs	r1, #72	; 0x48
   1b01a:	1e5d      	subs	r5, r3, #1
   1b01c:	ab16      	add	r3, sp, #88	; 0x58
   1b01e:	189b      	adds	r3, r3, r2
   1b020:	466a      	mov	r2, sp
   1b022:	1852      	adds	r2, r2, r1
   1b024:	7812      	ldrb	r2, [r2, #0]
   1b026:	951f      	str	r5, [sp, #124]	; 0x7c
   1b028:	701a      	strb	r2, [r3, #0]
   1b02a:	2d00      	cmp	r5, #0
   1b02c:	da00      	bge.n	1b030 <_vfprintf_r+0x1278>
   1b02e:	e1cb      	b.n	1b3c8 <_vfprintf_r+0x1610>
   1b030:	212d      	movs	r1, #45	; 0x2d
   1b032:	232b      	movs	r3, #43	; 0x2b
   1b034:	aa16      	add	r2, sp, #88	; 0x58
   1b036:	1852      	adds	r2, r2, r1
   1b038:	7013      	strb	r3, [r2, #0]
   1b03a:	2d09      	cmp	r5, #9
   1b03c:	dc00      	bgt.n	1b040 <_vfprintf_r+0x1288>
   1b03e:	e16d      	b.n	1b31c <_vfprintf_r+0x1564>
   1b040:	aa16      	add	r2, sp, #88	; 0x58
   1b042:	233b      	movs	r3, #59	; 0x3b
   1b044:	4694      	mov	ip, r2
   1b046:	4463      	add	r3, ip
   1b048:	469a      	mov	sl, r3
   1b04a:	46b1      	mov	r9, r6
   1b04c:	46a0      	mov	r8, r4
   1b04e:	4656      	mov	r6, sl
   1b050:	e000      	b.n	1b054 <_vfprintf_r+0x129c>
   1b052:	0026      	movs	r6, r4
   1b054:	0028      	movs	r0, r5
   1b056:	210a      	movs	r1, #10
   1b058:	f7fc fc6c 	bl	17934 <__aeabi_idivmod>
   1b05c:	1e74      	subs	r4, r6, #1
   1b05e:	3130      	adds	r1, #48	; 0x30
   1b060:	7021      	strb	r1, [r4, #0]
   1b062:	0028      	movs	r0, r5
   1b064:	210a      	movs	r1, #10
   1b066:	f7fc fb7f 	bl	17768 <__divsi3>
   1b06a:	0005      	movs	r5, r0
   1b06c:	2809      	cmp	r0, #9
   1b06e:	dcf0      	bgt.n	1b052 <_vfprintf_r+0x129a>
   1b070:	0023      	movs	r3, r4
   1b072:	4644      	mov	r4, r8
   1b074:	46b0      	mov	r8, r6
   1b076:	464e      	mov	r6, r9
   1b078:	4699      	mov	r9, r3
   1b07a:	0003      	movs	r3, r0
   1b07c:	3330      	adds	r3, #48	; 0x30
   1b07e:	b2d8      	uxtb	r0, r3
   1b080:	4643      	mov	r3, r8
   1b082:	3b02      	subs	r3, #2
   1b084:	7018      	strb	r0, [r3, #0]
   1b086:	459a      	cmp	sl, r3
   1b088:	d800      	bhi.n	1b08c <_vfprintf_r+0x12d4>
   1b08a:	e1f6      	b.n	1b47a <_vfprintf_r+0x16c2>
   1b08c:	4642      	mov	r2, r8
   1b08e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b090:	4645      	mov	r5, r8
   1b092:	1a99      	subs	r1, r3, r2
   1b094:	2301      	movs	r3, #1
   1b096:	3107      	adds	r1, #7
   1b098:	425b      	negs	r3, r3
   1b09a:	e001      	b.n	1b0a0 <_vfprintf_r+0x12e8>
   1b09c:	5ce8      	ldrb	r0, [r5, r3]
   1b09e:	3301      	adds	r3, #1
   1b0a0:	aa21      	add	r2, sp, #132	; 0x84
   1b0a2:	18d2      	adds	r2, r2, r3
   1b0a4:	70d0      	strb	r0, [r2, #3]
   1b0a6:	428b      	cmp	r3, r1
   1b0a8:	d1f8      	bne.n	1b09c <_vfprintf_r+0x12e4>
   1b0aa:	a916      	add	r1, sp, #88	; 0x58
   1b0ac:	468c      	mov	ip, r1
   1b0ae:	222e      	movs	r2, #46	; 0x2e
   1b0b0:	464b      	mov	r3, r9
   1b0b2:	4462      	add	r2, ip
   1b0b4:	4694      	mov	ip, r2
   1b0b6:	1afb      	subs	r3, r7, r3
   1b0b8:	4463      	add	r3, ip
   1b0ba:	aa21      	add	r2, sp, #132	; 0x84
   1b0bc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b0be:	1a9b      	subs	r3, r3, r2
   1b0c0:	469c      	mov	ip, r3
   1b0c2:	000a      	movs	r2, r1
   1b0c4:	4462      	add	r2, ip
   1b0c6:	931a      	str	r3, [sp, #104]	; 0x68
   1b0c8:	920e      	str	r2, [sp, #56]	; 0x38
   1b0ca:	2901      	cmp	r1, #1
   1b0cc:	dc00      	bgt.n	1b0d0 <_vfprintf_r+0x1318>
   1b0ce:	e170      	b.n	1b3b2 <_vfprintf_r+0x15fa>
   1b0d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b0d4:	4694      	mov	ip, r2
   1b0d6:	4463      	add	r3, ip
   1b0d8:	001a      	movs	r2, r3
   1b0da:	930e      	str	r3, [sp, #56]	; 0x38
   1b0dc:	43db      	mvns	r3, r3
   1b0de:	17db      	asrs	r3, r3, #31
   1b0e0:	401a      	ands	r2, r3
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	9208      	str	r2, [sp, #32]
   1b0e6:	9313      	str	r3, [sp, #76]	; 0x4c
   1b0e8:	e6d4      	b.n	1ae94 <_vfprintf_r+0x10dc>
   1b0ea:	003a      	movs	r2, r7
   1b0ec:	4659      	mov	r1, fp
   1b0ee:	9806      	ldr	r0, [sp, #24]
   1b0f0:	f003 f922 	bl	1e338 <__sprint_r>
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	d001      	beq.n	1b0fc <_vfprintf_r+0x1344>
   1b0f8:	f7ff fbee 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b0fc:	68bc      	ldr	r4, [r7, #8]
   1b0fe:	ae32      	add	r6, sp, #200	; 0xc8
   1b100:	e46a      	b.n	1a9d8 <_vfprintf_r+0xc20>
   1b102:	4653      	mov	r3, sl
   1b104:	2b00      	cmp	r3, #0
   1b106:	d000      	beq.n	1b10a <_vfprintf_r+0x1352>
   1b108:	e659      	b.n	1adbe <_vfprintf_r+0x1006>
   1b10a:	3301      	adds	r3, #1
   1b10c:	469a      	mov	sl, r3
   1b10e:	e656      	b.n	1adbe <_vfprintf_r+0x1006>
   1b110:	4653      	mov	r3, sl
   1b112:	9308      	str	r3, [sp, #32]
   1b114:	2b06      	cmp	r3, #6
   1b116:	d901      	bls.n	1b11c <_vfprintf_r+0x1364>
   1b118:	2306      	movs	r3, #6
   1b11a:	9308      	str	r3, [sp, #32]
   1b11c:	9b08      	ldr	r3, [sp, #32]
   1b11e:	950f      	str	r5, [sp, #60]	; 0x3c
   1b120:	930e      	str	r3, [sp, #56]	; 0x38
   1b122:	2300      	movs	r3, #0
   1b124:	4698      	mov	r8, r3
   1b126:	469a      	mov	sl, r3
   1b128:	9313      	str	r3, [sp, #76]	; 0x4c
   1b12a:	4b62      	ldr	r3, [pc, #392]	; (1b2b4 <_vfprintf_r+0x14fc>)
   1b12c:	9409      	str	r4, [sp, #36]	; 0x24
   1b12e:	9311      	str	r3, [sp, #68]	; 0x44
   1b130:	f7fe ffbd 	bl	1a0ae <_vfprintf_r+0x2f6>
   1b134:	003a      	movs	r2, r7
   1b136:	4659      	mov	r1, fp
   1b138:	9806      	ldr	r0, [sp, #24]
   1b13a:	f003 f8fd 	bl	1e338 <__sprint_r>
   1b13e:	2800      	cmp	r0, #0
   1b140:	d001      	beq.n	1b146 <_vfprintf_r+0x138e>
   1b142:	f7ff fbc9 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b146:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b148:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b14a:	68bc      	ldr	r4, [r7, #8]
   1b14c:	1a9b      	subs	r3, r3, r2
   1b14e:	ae32      	add	r6, sp, #200	; 0xc8
   1b150:	e567      	b.n	1ac22 <_vfprintf_r+0xe6a>
   1b152:	ab23      	add	r3, sp, #140	; 0x8c
   1b154:	931b      	str	r3, [sp, #108]	; 0x6c
   1b156:	9304      	str	r3, [sp, #16]
   1b158:	ab20      	add	r3, sp, #128	; 0x80
   1b15a:	9303      	str	r3, [sp, #12]
   1b15c:	ab1f      	add	r3, sp, #124	; 0x7c
   1b15e:	9302      	str	r3, [sp, #8]
   1b160:	4653      	mov	r3, sl
   1b162:	9301      	str	r3, [sp, #4]
   1b164:	2303      	movs	r3, #3
   1b166:	464a      	mov	r2, r9
   1b168:	9300      	str	r3, [sp, #0]
   1b16a:	9806      	ldr	r0, [sp, #24]
   1b16c:	9b08      	ldr	r3, [sp, #32]
   1b16e:	f000 fafb 	bl	1b768 <_dtoa_r>
   1b172:	0003      	movs	r3, r0
   1b174:	4453      	add	r3, sl
   1b176:	4698      	mov	r8, r3
   1b178:	4655      	mov	r5, sl
   1b17a:	9011      	str	r0, [sp, #68]	; 0x44
   1b17c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b17e:	781b      	ldrb	r3, [r3, #0]
   1b180:	2b30      	cmp	r3, #48	; 0x30
   1b182:	d002      	beq.n	1b18a <_vfprintf_r+0x13d2>
   1b184:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b186:	4498      	add	r8, r3
   1b188:	e64e      	b.n	1ae28 <_vfprintf_r+0x1070>
   1b18a:	2200      	movs	r2, #0
   1b18c:	2300      	movs	r3, #0
   1b18e:	4648      	mov	r0, r9
   1b190:	9908      	ldr	r1, [sp, #32]
   1b192:	f7fc fbe5 	bl	17960 <__aeabi_dcmpeq>
   1b196:	2800      	cmp	r0, #0
   1b198:	d1f4      	bne.n	1b184 <_vfprintf_r+0x13cc>
   1b19a:	2301      	movs	r3, #1
   1b19c:	1b5b      	subs	r3, r3, r5
   1b19e:	931f      	str	r3, [sp, #124]	; 0x7c
   1b1a0:	4498      	add	r8, r3
   1b1a2:	e641      	b.n	1ae28 <_vfprintf_r+0x1070>
   1b1a4:	46c1      	mov	r9, r8
   1b1a6:	f7ff fb1f 	bl	1a7e8 <_vfprintf_r+0xa30>
   1b1aa:	2280      	movs	r2, #128	; 0x80
   1b1ac:	0612      	lsls	r2, r2, #24
   1b1ae:	4694      	mov	ip, r2
   1b1b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b1b2:	4699      	mov	r9, r3
   1b1b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b1b6:	4463      	add	r3, ip
   1b1b8:	9308      	str	r3, [sp, #32]
   1b1ba:	232d      	movs	r3, #45	; 0x2d
   1b1bc:	9310      	str	r3, [sp, #64]	; 0x40
   1b1be:	e60b      	b.n	1add8 <_vfprintf_r+0x1020>
   1b1c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b1c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b1c4:	4694      	mov	ip, r2
   1b1c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b1c8:	4463      	add	r3, ip
   1b1ca:	930e      	str	r3, [sp, #56]	; 0x38
   1b1cc:	2a00      	cmp	r2, #0
   1b1ce:	dc00      	bgt.n	1b1d2 <_vfprintf_r+0x141a>
   1b1d0:	e0e3      	b.n	1b39a <_vfprintf_r+0x15e2>
   1b1d2:	001a      	movs	r2, r3
   1b1d4:	43db      	mvns	r3, r3
   1b1d6:	17db      	asrs	r3, r3, #31
   1b1d8:	401a      	ands	r2, r3
   1b1da:	2367      	movs	r3, #103	; 0x67
   1b1dc:	9208      	str	r2, [sp, #32]
   1b1de:	9312      	str	r3, [sp, #72]	; 0x48
   1b1e0:	e658      	b.n	1ae94 <_vfprintf_r+0x10dc>
   1b1e2:	003a      	movs	r2, r7
   1b1e4:	4659      	mov	r1, fp
   1b1e6:	9806      	ldr	r0, [sp, #24]
   1b1e8:	f003 f8a6 	bl	1e338 <__sprint_r>
   1b1ec:	2800      	cmp	r0, #0
   1b1ee:	d001      	beq.n	1b1f4 <_vfprintf_r+0x143c>
   1b1f0:	f7ff fb72 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b1f4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b1f6:	68bc      	ldr	r4, [r7, #8]
   1b1f8:	ae32      	add	r6, sp, #200	; 0xc8
   1b1fa:	e69d      	b.n	1af38 <_vfprintf_r+0x1180>
   1b1fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b1fe:	9313      	str	r3, [sp, #76]	; 0x4c
   1b200:	2b00      	cmp	r3, #0
   1b202:	dc00      	bgt.n	1b206 <_vfprintf_r+0x144e>
   1b204:	e0f2      	b.n	1b3ec <_vfprintf_r+0x1634>
   1b206:	4652      	mov	r2, sl
   1b208:	2a00      	cmp	r2, #0
   1b20a:	d000      	beq.n	1b20e <_vfprintf_r+0x1456>
   1b20c:	e0a0      	b.n	1b350 <_vfprintf_r+0x1598>
   1b20e:	07e2      	lsls	r2, r4, #31
   1b210:	d500      	bpl.n	1b214 <_vfprintf_r+0x145c>
   1b212:	e09d      	b.n	1b350 <_vfprintf_r+0x1598>
   1b214:	9308      	str	r3, [sp, #32]
   1b216:	930e      	str	r3, [sp, #56]	; 0x38
   1b218:	e63c      	b.n	1ae94 <_vfprintf_r+0x10dc>
   1b21a:	ab16      	add	r3, sp, #88	; 0x58
   1b21c:	7fdb      	ldrb	r3, [r3, #31]
   1b21e:	950f      	str	r5, [sp, #60]	; 0x3c
   1b220:	4698      	mov	r8, r3
   1b222:	4653      	mov	r3, sl
   1b224:	9308      	str	r3, [sp, #32]
   1b226:	930e      	str	r3, [sp, #56]	; 0x38
   1b228:	2300      	movs	r3, #0
   1b22a:	9409      	str	r4, [sp, #36]	; 0x24
   1b22c:	469a      	mov	sl, r3
   1b22e:	9313      	str	r3, [sp, #76]	; 0x4c
   1b230:	f7fe ff37 	bl	1a0a2 <_vfprintf_r+0x2ea>
   1b234:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b236:	4698      	mov	r8, r3
   1b238:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b23a:	44a8      	add	r8, r5
   1b23c:	2b47      	cmp	r3, #71	; 0x47
   1b23e:	d000      	beq.n	1b242 <_vfprintf_r+0x148a>
   1b240:	e5f2      	b.n	1ae28 <_vfprintf_r+0x1070>
   1b242:	07e3      	lsls	r3, r4, #31
   1b244:	d400      	bmi.n	1b248 <_vfprintf_r+0x1490>
   1b246:	e0dc      	b.n	1b402 <_vfprintf_r+0x164a>
   1b248:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b24a:	4698      	mov	r8, r3
   1b24c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b24e:	44a8      	add	r8, r5
   1b250:	2b46      	cmp	r3, #70	; 0x46
   1b252:	d093      	beq.n	1b17c <_vfprintf_r+0x13c4>
   1b254:	e5e8      	b.n	1ae28 <_vfprintf_r+0x1070>
   1b256:	ab23      	add	r3, sp, #140	; 0x8c
   1b258:	931b      	str	r3, [sp, #108]	; 0x6c
   1b25a:	9304      	str	r3, [sp, #16]
   1b25c:	ab20      	add	r3, sp, #128	; 0x80
   1b25e:	9303      	str	r3, [sp, #12]
   1b260:	ab1f      	add	r3, sp, #124	; 0x7c
   1b262:	9302      	str	r3, [sp, #8]
   1b264:	4653      	mov	r3, sl
   1b266:	9301      	str	r3, [sp, #4]
   1b268:	2303      	movs	r3, #3
   1b26a:	464a      	mov	r2, r9
   1b26c:	9300      	str	r3, [sp, #0]
   1b26e:	9806      	ldr	r0, [sp, #24]
   1b270:	9b08      	ldr	r3, [sp, #32]
   1b272:	f000 fa79 	bl	1b768 <_dtoa_r>
   1b276:	4655      	mov	r5, sl
   1b278:	9011      	str	r0, [sp, #68]	; 0x44
   1b27a:	e7e5      	b.n	1b248 <_vfprintf_r+0x1490>
   1b27c:	003a      	movs	r2, r7
   1b27e:	4659      	mov	r1, fp
   1b280:	9806      	ldr	r0, [sp, #24]
   1b282:	f003 f859 	bl	1e338 <__sprint_r>
   1b286:	2800      	cmp	r0, #0
   1b288:	d101      	bne.n	1b28e <_vfprintf_r+0x14d6>
   1b28a:	f7ff faab 	bl	1a7e4 <_vfprintf_r+0xa2c>
   1b28e:	f7ff faab 	bl	1a7e8 <_vfprintf_r+0xa30>
   1b292:	4642      	mov	r2, r8
   1b294:	9207      	str	r2, [sp, #28]
   1b296:	f7fe fe1b 	bl	19ed0 <_vfprintf_r+0x118>
   1b29a:	4244      	negs	r4, r0
   1b29c:	3010      	adds	r0, #16
   1b29e:	db00      	blt.n	1b2a2 <_vfprintf_r+0x14ea>
   1b2a0:	e0d8      	b.n	1b454 <_vfprintf_r+0x169c>
   1b2a2:	4805      	ldr	r0, [pc, #20]	; (1b2b8 <_vfprintf_r+0x1500>)
   1b2a4:	2610      	movs	r6, #16
   1b2a6:	0005      	movs	r5, r0
   1b2a8:	e00c      	b.n	1b2c4 <_vfprintf_r+0x150c>
   1b2aa:	46c0      	nop			; (mov r8, r8)
   1b2ac:	0001fe20 	.word	0x0001fe20
   1b2b0:	0001fde4 	.word	0x0001fde4
   1b2b4:	0001fe18 	.word	0x0001fe18
   1b2b8:	0001fe34 	.word	0x0001fe34
   1b2bc:	3208      	adds	r2, #8
   1b2be:	3c10      	subs	r4, #16
   1b2c0:	2c10      	cmp	r4, #16
   1b2c2:	dd51      	ble.n	1b368 <_vfprintf_r+0x15b0>
   1b2c4:	3110      	adds	r1, #16
   1b2c6:	3301      	adds	r3, #1
   1b2c8:	6015      	str	r5, [r2, #0]
   1b2ca:	6056      	str	r6, [r2, #4]
   1b2cc:	60b9      	str	r1, [r7, #8]
   1b2ce:	607b      	str	r3, [r7, #4]
   1b2d0:	2b07      	cmp	r3, #7
   1b2d2:	ddf3      	ble.n	1b2bc <_vfprintf_r+0x1504>
   1b2d4:	003a      	movs	r2, r7
   1b2d6:	4659      	mov	r1, fp
   1b2d8:	9806      	ldr	r0, [sp, #24]
   1b2da:	f003 f82d 	bl	1e338 <__sprint_r>
   1b2de:	2800      	cmp	r0, #0
   1b2e0:	d001      	beq.n	1b2e6 <_vfprintf_r+0x152e>
   1b2e2:	f7ff faf9 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b2e6:	68b9      	ldr	r1, [r7, #8]
   1b2e8:	687b      	ldr	r3, [r7, #4]
   1b2ea:	aa32      	add	r2, sp, #200	; 0xc8
   1b2ec:	e7e7      	b.n	1b2be <_vfprintf_r+0x1506>
   1b2ee:	003a      	movs	r2, r7
   1b2f0:	4659      	mov	r1, fp
   1b2f2:	9806      	ldr	r0, [sp, #24]
   1b2f4:	f003 f820 	bl	1e338 <__sprint_r>
   1b2f8:	2800      	cmp	r0, #0
   1b2fa:	d001      	beq.n	1b300 <_vfprintf_r+0x1548>
   1b2fc:	f7ff faec 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b300:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b302:	68b9      	ldr	r1, [r7, #8]
   1b304:	687b      	ldr	r3, [r7, #4]
   1b306:	aa32      	add	r2, sp, #200	; 0xc8
   1b308:	e62e      	b.n	1af68 <_vfprintf_r+0x11b0>
   1b30a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b30c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b30e:	4694      	mov	ip, r2
   1b310:	4463      	add	r3, ip
   1b312:	001a      	movs	r2, r3
   1b314:	930e      	str	r3, [sp, #56]	; 0x38
   1b316:	e75d      	b.n	1b1d4 <_vfprintf_r+0x141c>
   1b318:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b31a:	e599      	b.n	1ae50 <_vfprintf_r+0x1098>
   1b31c:	212e      	movs	r1, #46	; 0x2e
   1b31e:	2330      	movs	r3, #48	; 0x30
   1b320:	aa16      	add	r2, sp, #88	; 0x58
   1b322:	1852      	adds	r2, r2, r1
   1b324:	7013      	strb	r3, [r2, #0]
   1b326:	002b      	movs	r3, r5
   1b328:	aa16      	add	r2, sp, #88	; 0x58
   1b32a:	3101      	adds	r1, #1
   1b32c:	3330      	adds	r3, #48	; 0x30
   1b32e:	1852      	adds	r2, r2, r1
   1b330:	7013      	strb	r3, [r2, #0]
   1b332:	ab22      	add	r3, sp, #136	; 0x88
   1b334:	e6c1      	b.n	1b0ba <_vfprintf_r+0x1302>
   1b336:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b338:	2b00      	cmp	r3, #0
   1b33a:	db52      	blt.n	1b3e2 <_vfprintf_r+0x162a>
   1b33c:	ab16      	add	r3, sp, #88	; 0x58
   1b33e:	7fdb      	ldrb	r3, [r3, #31]
   1b340:	4698      	mov	r8, r3
   1b342:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b344:	2b47      	cmp	r3, #71	; 0x47
   1b346:	dc48      	bgt.n	1b3da <_vfprintf_r+0x1622>
   1b348:	4b4e      	ldr	r3, [pc, #312]	; (1b484 <_vfprintf_r+0x16cc>)
   1b34a:	9311      	str	r3, [sp, #68]	; 0x44
   1b34c:	f7ff f88c 	bl	1a468 <_vfprintf_r+0x6b0>
   1b350:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b354:	4694      	mov	ip, r2
   1b356:	4463      	add	r3, ip
   1b358:	4453      	add	r3, sl
   1b35a:	001a      	movs	r2, r3
   1b35c:	930e      	str	r3, [sp, #56]	; 0x38
   1b35e:	43db      	mvns	r3, r3
   1b360:	17db      	asrs	r3, r3, #31
   1b362:	401a      	ands	r2, r3
   1b364:	9208      	str	r2, [sp, #32]
   1b366:	e595      	b.n	1ae94 <_vfprintf_r+0x10dc>
   1b368:	46a9      	mov	r9, r5
   1b36a:	4648      	mov	r0, r9
   1b36c:	1909      	adds	r1, r1, r4
   1b36e:	3301      	adds	r3, #1
   1b370:	6010      	str	r0, [r2, #0]
   1b372:	6054      	str	r4, [r2, #4]
   1b374:	60b9      	str	r1, [r7, #8]
   1b376:	3208      	adds	r2, #8
   1b378:	607b      	str	r3, [r7, #4]
   1b37a:	2b07      	cmp	r3, #7
   1b37c:	dc00      	bgt.n	1b380 <_vfprintf_r+0x15c8>
   1b37e:	e5f6      	b.n	1af6e <_vfprintf_r+0x11b6>
   1b380:	003a      	movs	r2, r7
   1b382:	4659      	mov	r1, fp
   1b384:	9806      	ldr	r0, [sp, #24]
   1b386:	f002 ffd7 	bl	1e338 <__sprint_r>
   1b38a:	2800      	cmp	r0, #0
   1b38c:	d001      	beq.n	1b392 <_vfprintf_r+0x15da>
   1b38e:	f7ff faa3 	bl	1a8d8 <_vfprintf_r+0xb20>
   1b392:	68b9      	ldr	r1, [r7, #8]
   1b394:	687b      	ldr	r3, [r7, #4]
   1b396:	aa32      	add	r2, sp, #200	; 0xc8
   1b398:	e5e9      	b.n	1af6e <_vfprintf_r+0x11b6>
   1b39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b39c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b39e:	1a98      	subs	r0, r3, r2
   1b3a0:	1c43      	adds	r3, r0, #1
   1b3a2:	001a      	movs	r2, r3
   1b3a4:	930e      	str	r3, [sp, #56]	; 0x38
   1b3a6:	e715      	b.n	1b1d4 <_vfprintf_r+0x141c>
   1b3a8:	4a37      	ldr	r2, [pc, #220]	; (1b488 <_vfprintf_r+0x16d0>)
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	4691      	mov	r9, r2
   1b3ae:	f7ff fbf5 	bl	1ab9c <_vfprintf_r+0xde4>
   1b3b2:	2301      	movs	r3, #1
   1b3b4:	4023      	ands	r3, r4
   1b3b6:	9313      	str	r3, [sp, #76]	; 0x4c
   1b3b8:	d000      	beq.n	1b3bc <_vfprintf_r+0x1604>
   1b3ba:	e689      	b.n	1b0d0 <_vfprintf_r+0x1318>
   1b3bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b3be:	43d3      	mvns	r3, r2
   1b3c0:	17db      	asrs	r3, r3, #31
   1b3c2:	401a      	ands	r2, r3
   1b3c4:	9208      	str	r2, [sp, #32]
   1b3c6:	e565      	b.n	1ae94 <_vfprintf_r+0x10dc>
   1b3c8:	2301      	movs	r3, #1
   1b3ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b3cc:	391b      	subs	r1, #27
   1b3ce:	1a9d      	subs	r5, r3, r2
   1b3d0:	aa16      	add	r2, sp, #88	; 0x58
   1b3d2:	332c      	adds	r3, #44	; 0x2c
   1b3d4:	1852      	adds	r2, r2, r1
   1b3d6:	7013      	strb	r3, [r2, #0]
   1b3d8:	e62f      	b.n	1b03a <_vfprintf_r+0x1282>
   1b3da:	4b2c      	ldr	r3, [pc, #176]	; (1b48c <_vfprintf_r+0x16d4>)
   1b3dc:	9311      	str	r3, [sp, #68]	; 0x44
   1b3de:	f7ff f843 	bl	1a468 <_vfprintf_r+0x6b0>
   1b3e2:	232d      	movs	r3, #45	; 0x2d
   1b3e4:	aa16      	add	r2, sp, #88	; 0x58
   1b3e6:	77d3      	strb	r3, [r2, #31]
   1b3e8:	4698      	mov	r8, r3
   1b3ea:	e7aa      	b.n	1b342 <_vfprintf_r+0x158a>
   1b3ec:	4653      	mov	r3, sl
   1b3ee:	2b00      	cmp	r3, #0
   1b3f0:	d101      	bne.n	1b3f6 <_vfprintf_r+0x163e>
   1b3f2:	07e3      	lsls	r3, r4, #31
   1b3f4:	d503      	bpl.n	1b3fe <_vfprintf_r+0x1646>
   1b3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b3f8:	1c58      	adds	r0, r3, #1
   1b3fa:	0003      	movs	r3, r0
   1b3fc:	e7ac      	b.n	1b358 <_vfprintf_r+0x15a0>
   1b3fe:	2301      	movs	r3, #1
   1b400:	e708      	b.n	1b214 <_vfprintf_r+0x145c>
   1b402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b404:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b406:	1a9b      	subs	r3, r3, r2
   1b408:	9314      	str	r3, [sp, #80]	; 0x50
   1b40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b40c:	2b47      	cmp	r3, #71	; 0x47
   1b40e:	d100      	bne.n	1b412 <_vfprintf_r+0x165a>
   1b410:	e5f6      	b.n	1b000 <_vfprintf_r+0x1248>
   1b412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b414:	9313      	str	r3, [sp, #76]	; 0x4c
   1b416:	e5fd      	b.n	1b014 <_vfprintf_r+0x125c>
   1b418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b41a:	1d1d      	adds	r5, r3, #4
   1b41c:	681b      	ldr	r3, [r3, #0]
   1b41e:	46a8      	mov	r8, r5
   1b420:	469a      	mov	sl, r3
   1b422:	2b00      	cmp	r3, #0
   1b424:	db0a      	blt.n	1b43c <_vfprintf_r+0x1684>
   1b426:	4645      	mov	r5, r8
   1b428:	9b07      	ldr	r3, [sp, #28]
   1b42a:	950f      	str	r5, [sp, #60]	; 0x3c
   1b42c:	785b      	ldrb	r3, [r3, #1]
   1b42e:	9207      	str	r2, [sp, #28]
   1b430:	f7fe fd4b 	bl	19eca <_vfprintf_r+0x112>
   1b434:	ab16      	add	r3, sp, #88	; 0x58
   1b436:	77d8      	strb	r0, [r3, #31]
   1b438:	f7ff f830 	bl	1a49c <_vfprintf_r+0x6e4>
   1b43c:	2301      	movs	r3, #1
   1b43e:	425b      	negs	r3, r3
   1b440:	469a      	mov	sl, r3
   1b442:	e7f0      	b.n	1b426 <_vfprintf_r+0x166e>
   1b444:	ab16      	add	r3, sp, #88	; 0x58
   1b446:	77d8      	strb	r0, [r3, #31]
   1b448:	f7fe ff27 	bl	1a29a <_vfprintf_r+0x4e2>
   1b44c:	ab16      	add	r3, sp, #88	; 0x58
   1b44e:	77d8      	strb	r0, [r3, #31]
   1b450:	f7fe fdce 	bl	19ff0 <_vfprintf_r+0x238>
   1b454:	480c      	ldr	r0, [pc, #48]	; (1b488 <_vfprintf_r+0x16d0>)
   1b456:	4681      	mov	r9, r0
   1b458:	e787      	b.n	1b36a <_vfprintf_r+0x15b2>
   1b45a:	ab16      	add	r3, sp, #88	; 0x58
   1b45c:	77d8      	strb	r0, [r3, #31]
   1b45e:	f7ff f829 	bl	1a4b4 <_vfprintf_r+0x6fc>
   1b462:	ab16      	add	r3, sp, #88	; 0x58
   1b464:	77d8      	strb	r0, [r3, #31]
   1b466:	f7fe ffc3 	bl	1a3f0 <_vfprintf_r+0x638>
   1b46a:	ab16      	add	r3, sp, #88	; 0x58
   1b46c:	77d8      	strb	r0, [r3, #31]
   1b46e:	f7fe ffa5 	bl	1a3bc <_vfprintf_r+0x604>
   1b472:	ab16      	add	r3, sp, #88	; 0x58
   1b474:	77d8      	strb	r0, [r3, #31]
   1b476:	f7fe feaf 	bl	1a1d8 <_vfprintf_r+0x420>
   1b47a:	aa16      	add	r2, sp, #88	; 0x58
   1b47c:	232e      	movs	r3, #46	; 0x2e
   1b47e:	4694      	mov	ip, r2
   1b480:	4463      	add	r3, ip
   1b482:	e61a      	b.n	1b0ba <_vfprintf_r+0x1302>
   1b484:	0001fde8 	.word	0x0001fde8
   1b488:	0001fe34 	.word	0x0001fe34
   1b48c:	0001fdec 	.word	0x0001fdec

0001b490 <__sbprintf>:
   1b490:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b492:	0015      	movs	r5, r2
   1b494:	2202      	movs	r2, #2
   1b496:	4c1e      	ldr	r4, [pc, #120]	; (1b510 <__sbprintf+0x80>)
   1b498:	001f      	movs	r7, r3
   1b49a:	898b      	ldrh	r3, [r1, #12]
   1b49c:	44a5      	add	sp, r4
   1b49e:	4393      	bics	r3, r2
   1b4a0:	466a      	mov	r2, sp
   1b4a2:	8193      	strh	r3, [r2, #12]
   1b4a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b4a6:	0006      	movs	r6, r0
   1b4a8:	9319      	str	r3, [sp, #100]	; 0x64
   1b4aa:	89cb      	ldrh	r3, [r1, #14]
   1b4ac:	a816      	add	r0, sp, #88	; 0x58
   1b4ae:	81d3      	strh	r3, [r2, #14]
   1b4b0:	69cb      	ldr	r3, [r1, #28]
   1b4b2:	000c      	movs	r4, r1
   1b4b4:	9307      	str	r3, [sp, #28]
   1b4b6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1b4b8:	9309      	str	r3, [sp, #36]	; 0x24
   1b4ba:	ab1a      	add	r3, sp, #104	; 0x68
   1b4bc:	9300      	str	r3, [sp, #0]
   1b4be:	9304      	str	r3, [sp, #16]
   1b4c0:	2380      	movs	r3, #128	; 0x80
   1b4c2:	00db      	lsls	r3, r3, #3
   1b4c4:	9302      	str	r3, [sp, #8]
   1b4c6:	9305      	str	r3, [sp, #20]
   1b4c8:	2300      	movs	r3, #0
   1b4ca:	9306      	str	r3, [sp, #24]
   1b4cc:	f001 fd60 	bl	1cf90 <__retarget_lock_init_recursive>
   1b4d0:	002a      	movs	r2, r5
   1b4d2:	003b      	movs	r3, r7
   1b4d4:	4669      	mov	r1, sp
   1b4d6:	0030      	movs	r0, r6
   1b4d8:	f7fe fc6e 	bl	19db8 <_vfprintf_r>
   1b4dc:	1e05      	subs	r5, r0, #0
   1b4de:	db05      	blt.n	1b4ec <__sbprintf+0x5c>
   1b4e0:	4669      	mov	r1, sp
   1b4e2:	0030      	movs	r0, r6
   1b4e4:	f001 f9ac 	bl	1c840 <_fflush_r>
   1b4e8:	2800      	cmp	r0, #0
   1b4ea:	d10e      	bne.n	1b50a <__sbprintf+0x7a>
   1b4ec:	466b      	mov	r3, sp
   1b4ee:	899b      	ldrh	r3, [r3, #12]
   1b4f0:	065b      	lsls	r3, r3, #25
   1b4f2:	d503      	bpl.n	1b4fc <__sbprintf+0x6c>
   1b4f4:	2240      	movs	r2, #64	; 0x40
   1b4f6:	89a3      	ldrh	r3, [r4, #12]
   1b4f8:	4313      	orrs	r3, r2
   1b4fa:	81a3      	strh	r3, [r4, #12]
   1b4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b4fe:	f001 fd49 	bl	1cf94 <__retarget_lock_close_recursive>
   1b502:	0028      	movs	r0, r5
   1b504:	4b03      	ldr	r3, [pc, #12]	; (1b514 <__sbprintf+0x84>)
   1b506:	449d      	add	sp, r3
   1b508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b50a:	2501      	movs	r5, #1
   1b50c:	426d      	negs	r5, r5
   1b50e:	e7ed      	b.n	1b4ec <__sbprintf+0x5c>
   1b510:	fffffb94 	.word	0xfffffb94
   1b514:	0000046c 	.word	0x0000046c

0001b518 <__swsetup_r>:
   1b518:	4b33      	ldr	r3, [pc, #204]	; (1b5e8 <__swsetup_r+0xd0>)
   1b51a:	b570      	push	{r4, r5, r6, lr}
   1b51c:	0005      	movs	r5, r0
   1b51e:	6818      	ldr	r0, [r3, #0]
   1b520:	000c      	movs	r4, r1
   1b522:	2800      	cmp	r0, #0
   1b524:	d002      	beq.n	1b52c <__swsetup_r+0x14>
   1b526:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b528:	2b00      	cmp	r3, #0
   1b52a:	d03c      	beq.n	1b5a6 <__swsetup_r+0x8e>
   1b52c:	230c      	movs	r3, #12
   1b52e:	5ee2      	ldrsh	r2, [r4, r3]
   1b530:	b293      	uxth	r3, r2
   1b532:	0719      	lsls	r1, r3, #28
   1b534:	d50d      	bpl.n	1b552 <__swsetup_r+0x3a>
   1b536:	6921      	ldr	r1, [r4, #16]
   1b538:	2900      	cmp	r1, #0
   1b53a:	d015      	beq.n	1b568 <__swsetup_r+0x50>
   1b53c:	07da      	lsls	r2, r3, #31
   1b53e:	d521      	bpl.n	1b584 <__swsetup_r+0x6c>
   1b540:	2300      	movs	r3, #0
   1b542:	60a3      	str	r3, [r4, #8]
   1b544:	6963      	ldr	r3, [r4, #20]
   1b546:	2000      	movs	r0, #0
   1b548:	425b      	negs	r3, r3
   1b54a:	61a3      	str	r3, [r4, #24]
   1b54c:	2900      	cmp	r1, #0
   1b54e:	d021      	beq.n	1b594 <__swsetup_r+0x7c>
   1b550:	bd70      	pop	{r4, r5, r6, pc}
   1b552:	06d9      	lsls	r1, r3, #27
   1b554:	d53f      	bpl.n	1b5d6 <__swsetup_r+0xbe>
   1b556:	075b      	lsls	r3, r3, #29
   1b558:	d428      	bmi.n	1b5ac <__swsetup_r+0x94>
   1b55a:	6921      	ldr	r1, [r4, #16]
   1b55c:	2308      	movs	r3, #8
   1b55e:	4313      	orrs	r3, r2
   1b560:	81a3      	strh	r3, [r4, #12]
   1b562:	b29b      	uxth	r3, r3
   1b564:	2900      	cmp	r1, #0
   1b566:	d1e9      	bne.n	1b53c <__swsetup_r+0x24>
   1b568:	22a0      	movs	r2, #160	; 0xa0
   1b56a:	2080      	movs	r0, #128	; 0x80
   1b56c:	0092      	lsls	r2, r2, #2
   1b56e:	0080      	lsls	r0, r0, #2
   1b570:	401a      	ands	r2, r3
   1b572:	4282      	cmp	r2, r0
   1b574:	d0e2      	beq.n	1b53c <__swsetup_r+0x24>
   1b576:	0021      	movs	r1, r4
   1b578:	0028      	movs	r0, r5
   1b57a:	f001 fd41 	bl	1d000 <__smakebuf_r>
   1b57e:	89a3      	ldrh	r3, [r4, #12]
   1b580:	6921      	ldr	r1, [r4, #16]
   1b582:	e7db      	b.n	1b53c <__swsetup_r+0x24>
   1b584:	2200      	movs	r2, #0
   1b586:	079b      	lsls	r3, r3, #30
   1b588:	d400      	bmi.n	1b58c <__swsetup_r+0x74>
   1b58a:	6962      	ldr	r2, [r4, #20]
   1b58c:	60a2      	str	r2, [r4, #8]
   1b58e:	2000      	movs	r0, #0
   1b590:	2900      	cmp	r1, #0
   1b592:	d1dd      	bne.n	1b550 <__swsetup_r+0x38>
   1b594:	220c      	movs	r2, #12
   1b596:	5ea3      	ldrsh	r3, [r4, r2]
   1b598:	061a      	lsls	r2, r3, #24
   1b59a:	d5d9      	bpl.n	1b550 <__swsetup_r+0x38>
   1b59c:	2240      	movs	r2, #64	; 0x40
   1b59e:	4313      	orrs	r3, r2
   1b5a0:	81a3      	strh	r3, [r4, #12]
   1b5a2:	3801      	subs	r0, #1
   1b5a4:	e7d4      	b.n	1b550 <__swsetup_r+0x38>
   1b5a6:	f001 f9a5 	bl	1c8f4 <__sinit>
   1b5aa:	e7bf      	b.n	1b52c <__swsetup_r+0x14>
   1b5ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1b5ae:	2900      	cmp	r1, #0
   1b5b0:	d00a      	beq.n	1b5c8 <__swsetup_r+0xb0>
   1b5b2:	0023      	movs	r3, r4
   1b5b4:	3340      	adds	r3, #64	; 0x40
   1b5b6:	4299      	cmp	r1, r3
   1b5b8:	d004      	beq.n	1b5c4 <__swsetup_r+0xac>
   1b5ba:	0028      	movs	r0, r5
   1b5bc:	f001 fa44 	bl	1ca48 <_free_r>
   1b5c0:	230c      	movs	r3, #12
   1b5c2:	5ee2      	ldrsh	r2, [r4, r3]
   1b5c4:	2300      	movs	r3, #0
   1b5c6:	6323      	str	r3, [r4, #48]	; 0x30
   1b5c8:	2324      	movs	r3, #36	; 0x24
   1b5ca:	439a      	bics	r2, r3
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	6921      	ldr	r1, [r4, #16]
   1b5d0:	6063      	str	r3, [r4, #4]
   1b5d2:	6021      	str	r1, [r4, #0]
   1b5d4:	e7c2      	b.n	1b55c <__swsetup_r+0x44>
   1b5d6:	2309      	movs	r3, #9
   1b5d8:	602b      	str	r3, [r5, #0]
   1b5da:	2340      	movs	r3, #64	; 0x40
   1b5dc:	2001      	movs	r0, #1
   1b5de:	431a      	orrs	r2, r3
   1b5e0:	81a2      	strh	r2, [r4, #12]
   1b5e2:	4240      	negs	r0, r0
   1b5e4:	e7b4      	b.n	1b550 <__swsetup_r+0x38>
   1b5e6:	46c0      	nop			; (mov r8, r8)
   1b5e8:	20000118 	.word	0x20000118

0001b5ec <register_fini>:
   1b5ec:	4b03      	ldr	r3, [pc, #12]	; (1b5fc <register_fini+0x10>)
   1b5ee:	b510      	push	{r4, lr}
   1b5f0:	2b00      	cmp	r3, #0
   1b5f2:	d002      	beq.n	1b5fa <register_fini+0xe>
   1b5f4:	4802      	ldr	r0, [pc, #8]	; (1b600 <register_fini+0x14>)
   1b5f6:	f000 f805 	bl	1b604 <atexit>
   1b5fa:	bd10      	pop	{r4, pc}
   1b5fc:	00000000 	.word	0x00000000
   1b600:	0001c975 	.word	0x0001c975

0001b604 <atexit>:
   1b604:	b510      	push	{r4, lr}
   1b606:	0001      	movs	r1, r0
   1b608:	2300      	movs	r3, #0
   1b60a:	2200      	movs	r2, #0
   1b60c:	2000      	movs	r0, #0
   1b60e:	f002 febf 	bl	1e390 <__register_exitproc>
   1b612:	bd10      	pop	{r4, pc}

0001b614 <quorem>:
   1b614:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b616:	4645      	mov	r5, r8
   1b618:	4680      	mov	r8, r0
   1b61a:	46de      	mov	lr, fp
   1b61c:	4657      	mov	r7, sl
   1b61e:	464e      	mov	r6, r9
   1b620:	4642      	mov	r2, r8
   1b622:	b5e0      	push	{r5, r6, r7, lr}
   1b624:	690c      	ldr	r4, [r1, #16]
   1b626:	6912      	ldr	r2, [r2, #16]
   1b628:	b085      	sub	sp, #20
   1b62a:	000b      	movs	r3, r1
   1b62c:	9102      	str	r1, [sp, #8]
   1b62e:	2000      	movs	r0, #0
   1b630:	4294      	cmp	r4, r2
   1b632:	dd00      	ble.n	1b636 <quorem+0x22>
   1b634:	e090      	b.n	1b758 <quorem+0x144>
   1b636:	2214      	movs	r2, #20
   1b638:	4694      	mov	ip, r2
   1b63a:	4463      	add	r3, ip
   1b63c:	4699      	mov	r9, r3
   1b63e:	464a      	mov	r2, r9
   1b640:	3c01      	subs	r4, #1
   1b642:	00a3      	lsls	r3, r4, #2
   1b644:	18d6      	adds	r6, r2, r3
   1b646:	2214      	movs	r2, #20
   1b648:	4442      	add	r2, r8
   1b64a:	4693      	mov	fp, r2
   1b64c:	449b      	add	fp, r3
   1b64e:	6833      	ldr	r3, [r6, #0]
   1b650:	0015      	movs	r5, r2
   1b652:	1c59      	adds	r1, r3, #1
   1b654:	465b      	mov	r3, fp
   1b656:	6818      	ldr	r0, [r3, #0]
   1b658:	9201      	str	r2, [sp, #4]
   1b65a:	f7fb fffb 	bl	17654 <__udivsi3>
   1b65e:	1e03      	subs	r3, r0, #0
   1b660:	9000      	str	r0, [sp, #0]
   1b662:	d042      	beq.n	1b6ea <quorem+0xd6>
   1b664:	0029      	movs	r1, r5
   1b666:	2700      	movs	r7, #0
   1b668:	464d      	mov	r5, r9
   1b66a:	2000      	movs	r0, #0
   1b66c:	46b1      	mov	r9, r6
   1b66e:	46a2      	mov	sl, r4
   1b670:	003e      	movs	r6, r7
   1b672:	0004      	movs	r4, r0
   1b674:	469c      	mov	ip, r3
   1b676:	002f      	movs	r7, r5
   1b678:	0008      	movs	r0, r1
   1b67a:	9503      	str	r5, [sp, #12]
   1b67c:	4663      	mov	r3, ip
   1b67e:	cf04      	ldmia	r7!, {r2}
   1b680:	0415      	lsls	r5, r2, #16
   1b682:	0c2d      	lsrs	r5, r5, #16
   1b684:	435d      	muls	r5, r3
   1b686:	0c12      	lsrs	r2, r2, #16
   1b688:	435a      	muls	r2, r3
   1b68a:	19ad      	adds	r5, r5, r6
   1b68c:	0c2b      	lsrs	r3, r5, #16
   1b68e:	18d2      	adds	r2, r2, r3
   1b690:	6803      	ldr	r3, [r0, #0]
   1b692:	042d      	lsls	r5, r5, #16
   1b694:	0419      	lsls	r1, r3, #16
   1b696:	0c09      	lsrs	r1, r1, #16
   1b698:	1909      	adds	r1, r1, r4
   1b69a:	0c16      	lsrs	r6, r2, #16
   1b69c:	0c2d      	lsrs	r5, r5, #16
   1b69e:	0412      	lsls	r2, r2, #16
   1b6a0:	1b49      	subs	r1, r1, r5
   1b6a2:	0c12      	lsrs	r2, r2, #16
   1b6a4:	0c1b      	lsrs	r3, r3, #16
   1b6a6:	1a9b      	subs	r3, r3, r2
   1b6a8:	140a      	asrs	r2, r1, #16
   1b6aa:	189b      	adds	r3, r3, r2
   1b6ac:	0409      	lsls	r1, r1, #16
   1b6ae:	141c      	asrs	r4, r3, #16
   1b6b0:	0c09      	lsrs	r1, r1, #16
   1b6b2:	041b      	lsls	r3, r3, #16
   1b6b4:	4319      	orrs	r1, r3
   1b6b6:	c002      	stmia	r0!, {r1}
   1b6b8:	45b9      	cmp	r9, r7
   1b6ba:	d2df      	bcs.n	1b67c <quorem+0x68>
   1b6bc:	9b03      	ldr	r3, [sp, #12]
   1b6be:	464e      	mov	r6, r9
   1b6c0:	4699      	mov	r9, r3
   1b6c2:	465b      	mov	r3, fp
   1b6c4:	681b      	ldr	r3, [r3, #0]
   1b6c6:	4654      	mov	r4, sl
   1b6c8:	2b00      	cmp	r3, #0
   1b6ca:	d10e      	bne.n	1b6ea <quorem+0xd6>
   1b6cc:	465b      	mov	r3, fp
   1b6ce:	9a01      	ldr	r2, [sp, #4]
   1b6d0:	3b04      	subs	r3, #4
   1b6d2:	429a      	cmp	r2, r3
   1b6d4:	d304      	bcc.n	1b6e0 <quorem+0xcc>
   1b6d6:	e006      	b.n	1b6e6 <quorem+0xd2>
   1b6d8:	3b04      	subs	r3, #4
   1b6da:	3c01      	subs	r4, #1
   1b6dc:	429a      	cmp	r2, r3
   1b6de:	d202      	bcs.n	1b6e6 <quorem+0xd2>
   1b6e0:	6819      	ldr	r1, [r3, #0]
   1b6e2:	2900      	cmp	r1, #0
   1b6e4:	d0f8      	beq.n	1b6d8 <quorem+0xc4>
   1b6e6:	4643      	mov	r3, r8
   1b6e8:	611c      	str	r4, [r3, #16]
   1b6ea:	9902      	ldr	r1, [sp, #8]
   1b6ec:	4640      	mov	r0, r8
   1b6ee:	f002 faaf 	bl	1dc50 <__mcmp>
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	db2f      	blt.n	1b756 <quorem+0x142>
   1b6f6:	464f      	mov	r7, r9
   1b6f8:	2000      	movs	r0, #0
   1b6fa:	9b00      	ldr	r3, [sp, #0]
   1b6fc:	9d01      	ldr	r5, [sp, #4]
   1b6fe:	3301      	adds	r3, #1
   1b700:	9300      	str	r3, [sp, #0]
   1b702:	682b      	ldr	r3, [r5, #0]
   1b704:	cf02      	ldmia	r7!, {r1}
   1b706:	041a      	lsls	r2, r3, #16
   1b708:	0c12      	lsrs	r2, r2, #16
   1b70a:	1810      	adds	r0, r2, r0
   1b70c:	040a      	lsls	r2, r1, #16
   1b70e:	0c12      	lsrs	r2, r2, #16
   1b710:	1a82      	subs	r2, r0, r2
   1b712:	0c09      	lsrs	r1, r1, #16
   1b714:	0c1b      	lsrs	r3, r3, #16
   1b716:	1a5b      	subs	r3, r3, r1
   1b718:	1411      	asrs	r1, r2, #16
   1b71a:	185b      	adds	r3, r3, r1
   1b71c:	0412      	lsls	r2, r2, #16
   1b71e:	1418      	asrs	r0, r3, #16
   1b720:	0c12      	lsrs	r2, r2, #16
   1b722:	041b      	lsls	r3, r3, #16
   1b724:	4313      	orrs	r3, r2
   1b726:	c508      	stmia	r5!, {r3}
   1b728:	42be      	cmp	r6, r7
   1b72a:	d2ea      	bcs.n	1b702 <quorem+0xee>
   1b72c:	9901      	ldr	r1, [sp, #4]
   1b72e:	00a3      	lsls	r3, r4, #2
   1b730:	468c      	mov	ip, r1
   1b732:	4463      	add	r3, ip
   1b734:	681a      	ldr	r2, [r3, #0]
   1b736:	2a00      	cmp	r2, #0
   1b738:	d10d      	bne.n	1b756 <quorem+0x142>
   1b73a:	3b04      	subs	r3, #4
   1b73c:	000a      	movs	r2, r1
   1b73e:	4299      	cmp	r1, r3
   1b740:	d304      	bcc.n	1b74c <quorem+0x138>
   1b742:	e006      	b.n	1b752 <quorem+0x13e>
   1b744:	3b04      	subs	r3, #4
   1b746:	3c01      	subs	r4, #1
   1b748:	429a      	cmp	r2, r3
   1b74a:	d202      	bcs.n	1b752 <quorem+0x13e>
   1b74c:	6819      	ldr	r1, [r3, #0]
   1b74e:	2900      	cmp	r1, #0
   1b750:	d0f8      	beq.n	1b744 <quorem+0x130>
   1b752:	4643      	mov	r3, r8
   1b754:	611c      	str	r4, [r3, #16]
   1b756:	9800      	ldr	r0, [sp, #0]
   1b758:	b005      	add	sp, #20
   1b75a:	bc3c      	pop	{r2, r3, r4, r5}
   1b75c:	4690      	mov	r8, r2
   1b75e:	4699      	mov	r9, r3
   1b760:	46a2      	mov	sl, r4
   1b762:	46ab      	mov	fp, r5
   1b764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b766:	46c0      	nop			; (mov r8, r8)

0001b768 <_dtoa_r>:
   1b768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b76a:	4657      	mov	r7, sl
   1b76c:	464e      	mov	r6, r9
   1b76e:	4645      	mov	r5, r8
   1b770:	46de      	mov	lr, fp
   1b772:	b5e0      	push	{r5, r6, r7, lr}
   1b774:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1b776:	b099      	sub	sp, #100	; 0x64
   1b778:	4682      	mov	sl, r0
   1b77a:	001d      	movs	r5, r3
   1b77c:	0016      	movs	r6, r2
   1b77e:	001f      	movs	r7, r3
   1b780:	2900      	cmp	r1, #0
   1b782:	d009      	beq.n	1b798 <_dtoa_r+0x30>
   1b784:	2301      	movs	r3, #1
   1b786:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b788:	4093      	lsls	r3, r2
   1b78a:	604a      	str	r2, [r1, #4]
   1b78c:	608b      	str	r3, [r1, #8]
   1b78e:	f002 f853 	bl	1d838 <_Bfree>
   1b792:	2300      	movs	r3, #0
   1b794:	4652      	mov	r2, sl
   1b796:	6413      	str	r3, [r2, #64]	; 0x40
   1b798:	46b8      	mov	r8, r7
   1b79a:	2f00      	cmp	r7, #0
   1b79c:	db37      	blt.n	1b80e <_dtoa_r+0xa6>
   1b79e:	2300      	movs	r3, #0
   1b7a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1b7a2:	6013      	str	r3, [r2, #0]
   1b7a4:	4642      	mov	r2, r8
   1b7a6:	4bd6      	ldr	r3, [pc, #856]	; (1bb00 <_dtoa_r+0x398>)
   1b7a8:	401a      	ands	r2, r3
   1b7aa:	429a      	cmp	r2, r3
   1b7ac:	d018      	beq.n	1b7e0 <_dtoa_r+0x78>
   1b7ae:	2200      	movs	r2, #0
   1b7b0:	2300      	movs	r3, #0
   1b7b2:	0030      	movs	r0, r6
   1b7b4:	0039      	movs	r1, r7
   1b7b6:	f7fc f8d3 	bl	17960 <__aeabi_dcmpeq>
   1b7ba:	2800      	cmp	r0, #0
   1b7bc:	d02f      	beq.n	1b81e <_dtoa_r+0xb6>
   1b7be:	2301      	movs	r3, #1
   1b7c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1b7c2:	6013      	str	r3, [r2, #0]
   1b7c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b7c6:	2b00      	cmp	r3, #0
   1b7c8:	d100      	bne.n	1b7cc <_dtoa_r+0x64>
   1b7ca:	e22a      	b.n	1bc22 <_dtoa_r+0x4ba>
   1b7cc:	48cd      	ldr	r0, [pc, #820]	; (1bb04 <_dtoa_r+0x39c>)
   1b7ce:	6018      	str	r0, [r3, #0]
   1b7d0:	3801      	subs	r0, #1
   1b7d2:	b019      	add	sp, #100	; 0x64
   1b7d4:	bc3c      	pop	{r2, r3, r4, r5}
   1b7d6:	4690      	mov	r8, r2
   1b7d8:	4699      	mov	r9, r3
   1b7da:	46a2      	mov	sl, r4
   1b7dc:	46ab      	mov	fp, r5
   1b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7e0:	4bc9      	ldr	r3, [pc, #804]	; (1bb08 <_dtoa_r+0x3a0>)
   1b7e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1b7e4:	6013      	str	r3, [r2, #0]
   1b7e6:	2e00      	cmp	r6, #0
   1b7e8:	d10b      	bne.n	1b802 <_dtoa_r+0x9a>
   1b7ea:	4643      	mov	r3, r8
   1b7ec:	0318      	lsls	r0, r3, #12
   1b7ee:	d108      	bne.n	1b802 <_dtoa_r+0x9a>
   1b7f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b7f2:	48c6      	ldr	r0, [pc, #792]	; (1bb0c <_dtoa_r+0x3a4>)
   1b7f4:	2b00      	cmp	r3, #0
   1b7f6:	d0ec      	beq.n	1b7d2 <_dtoa_r+0x6a>
   1b7f8:	0003      	movs	r3, r0
   1b7fa:	3308      	adds	r3, #8
   1b7fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1b7fe:	6013      	str	r3, [r2, #0]
   1b800:	e7e7      	b.n	1b7d2 <_dtoa_r+0x6a>
   1b802:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b804:	48c2      	ldr	r0, [pc, #776]	; (1bb10 <_dtoa_r+0x3a8>)
   1b806:	2b00      	cmp	r3, #0
   1b808:	d0e3      	beq.n	1b7d2 <_dtoa_r+0x6a>
   1b80a:	1cc3      	adds	r3, r0, #3
   1b80c:	e7f6      	b.n	1b7fc <_dtoa_r+0x94>
   1b80e:	2301      	movs	r3, #1
   1b810:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1b812:	0068      	lsls	r0, r5, #1
   1b814:	6013      	str	r3, [r2, #0]
   1b816:	0843      	lsrs	r3, r0, #1
   1b818:	4698      	mov	r8, r3
   1b81a:	001f      	movs	r7, r3
   1b81c:	e7c2      	b.n	1b7a4 <_dtoa_r+0x3c>
   1b81e:	ab16      	add	r3, sp, #88	; 0x58
   1b820:	9301      	str	r3, [sp, #4]
   1b822:	ab17      	add	r3, sp, #92	; 0x5c
   1b824:	9300      	str	r3, [sp, #0]
   1b826:	0032      	movs	r2, r6
   1b828:	003b      	movs	r3, r7
   1b82a:	4650      	mov	r0, sl
   1b82c:	f002 fac6 	bl	1ddbc <__d2b>
   1b830:	4643      	mov	r3, r8
   1b832:	4683      	mov	fp, r0
   1b834:	0d1a      	lsrs	r2, r3, #20
   1b836:	d100      	bne.n	1b83a <_dtoa_r+0xd2>
   1b838:	e1d6      	b.n	1bbe8 <_dtoa_r+0x480>
   1b83a:	033b      	lsls	r3, r7, #12
   1b83c:	4cb5      	ldr	r4, [pc, #724]	; (1bb14 <_dtoa_r+0x3ac>)
   1b83e:	0b1b      	lsrs	r3, r3, #12
   1b840:	431c      	orrs	r4, r3
   1b842:	4bb5      	ldr	r3, [pc, #724]	; (1bb18 <_dtoa_r+0x3b0>)
   1b844:	0030      	movs	r0, r6
   1b846:	4698      	mov	r8, r3
   1b848:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b84a:	0021      	movs	r1, r4
   1b84c:	4699      	mov	r9, r3
   1b84e:	2300      	movs	r3, #0
   1b850:	4490      	add	r8, r2
   1b852:	930f      	str	r3, [sp, #60]	; 0x3c
   1b854:	2200      	movs	r2, #0
   1b856:	4bb1      	ldr	r3, [pc, #708]	; (1bb1c <_dtoa_r+0x3b4>)
   1b858:	f7fd fd54 	bl	19304 <__aeabi_dsub>
   1b85c:	4ab0      	ldr	r2, [pc, #704]	; (1bb20 <_dtoa_r+0x3b8>)
   1b85e:	4bb1      	ldr	r3, [pc, #708]	; (1bb24 <_dtoa_r+0x3bc>)
   1b860:	f7fd fad0 	bl	18e04 <__aeabi_dmul>
   1b864:	4ab0      	ldr	r2, [pc, #704]	; (1bb28 <_dtoa_r+0x3c0>)
   1b866:	4bb1      	ldr	r3, [pc, #708]	; (1bb2c <_dtoa_r+0x3c4>)
   1b868:	f7fc fb88 	bl	17f7c <__aeabi_dadd>
   1b86c:	0004      	movs	r4, r0
   1b86e:	4640      	mov	r0, r8
   1b870:	000d      	movs	r5, r1
   1b872:	f7fe f891 	bl	19998 <__aeabi_i2d>
   1b876:	4aae      	ldr	r2, [pc, #696]	; (1bb30 <_dtoa_r+0x3c8>)
   1b878:	4bae      	ldr	r3, [pc, #696]	; (1bb34 <_dtoa_r+0x3cc>)
   1b87a:	f7fd fac3 	bl	18e04 <__aeabi_dmul>
   1b87e:	0002      	movs	r2, r0
   1b880:	000b      	movs	r3, r1
   1b882:	0020      	movs	r0, r4
   1b884:	0029      	movs	r1, r5
   1b886:	f7fc fb79 	bl	17f7c <__aeabi_dadd>
   1b88a:	0004      	movs	r4, r0
   1b88c:	000d      	movs	r5, r1
   1b88e:	f7fe f84f 	bl	19930 <__aeabi_d2iz>
   1b892:	2200      	movs	r2, #0
   1b894:	9003      	str	r0, [sp, #12]
   1b896:	2300      	movs	r3, #0
   1b898:	0020      	movs	r0, r4
   1b89a:	0029      	movs	r1, r5
   1b89c:	f7fc f866 	bl	1796c <__aeabi_dcmplt>
   1b8a0:	2800      	cmp	r0, #0
   1b8a2:	d000      	beq.n	1b8a6 <_dtoa_r+0x13e>
   1b8a4:	e2b1      	b.n	1be0a <_dtoa_r+0x6a2>
   1b8a6:	2301      	movs	r3, #1
   1b8a8:	9c03      	ldr	r4, [sp, #12]
   1b8aa:	930c      	str	r3, [sp, #48]	; 0x30
   1b8ac:	2c16      	cmp	r4, #22
   1b8ae:	d810      	bhi.n	1b8d2 <_dtoa_r+0x16a>
   1b8b0:	49a1      	ldr	r1, [pc, #644]	; (1bb38 <_dtoa_r+0x3d0>)
   1b8b2:	00e3      	lsls	r3, r4, #3
   1b8b4:	18c9      	adds	r1, r1, r3
   1b8b6:	0032      	movs	r2, r6
   1b8b8:	6808      	ldr	r0, [r1, #0]
   1b8ba:	6849      	ldr	r1, [r1, #4]
   1b8bc:	003b      	movs	r3, r7
   1b8be:	f7fc f869 	bl	17994 <__aeabi_dcmpgt>
   1b8c2:	2800      	cmp	r0, #0
   1b8c4:	d100      	bne.n	1b8c8 <_dtoa_r+0x160>
   1b8c6:	e31d      	b.n	1bf04 <_dtoa_r+0x79c>
   1b8c8:	0023      	movs	r3, r4
   1b8ca:	3b01      	subs	r3, #1
   1b8cc:	9303      	str	r3, [sp, #12]
   1b8ce:	2300      	movs	r3, #0
   1b8d0:	930c      	str	r3, [sp, #48]	; 0x30
   1b8d2:	464b      	mov	r3, r9
   1b8d4:	4642      	mov	r2, r8
   1b8d6:	1a9a      	subs	r2, r3, r2
   1b8d8:	2300      	movs	r3, #0
   1b8da:	9306      	str	r3, [sp, #24]
   1b8dc:	0013      	movs	r3, r2
   1b8de:	3b01      	subs	r3, #1
   1b8e0:	9304      	str	r3, [sp, #16]
   1b8e2:	d500      	bpl.n	1b8e6 <_dtoa_r+0x17e>
   1b8e4:	e2a1      	b.n	1be2a <_dtoa_r+0x6c2>
   1b8e6:	9b03      	ldr	r3, [sp, #12]
   1b8e8:	2b00      	cmp	r3, #0
   1b8ea:	da00      	bge.n	1b8ee <_dtoa_r+0x186>
   1b8ec:	e284      	b.n	1bdf8 <_dtoa_r+0x690>
   1b8ee:	469c      	mov	ip, r3
   1b8f0:	930d      	str	r3, [sp, #52]	; 0x34
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	9a04      	ldr	r2, [sp, #16]
   1b8f6:	4699      	mov	r9, r3
   1b8f8:	0011      	movs	r1, r2
   1b8fa:	4461      	add	r1, ip
   1b8fc:	9104      	str	r1, [sp, #16]
   1b8fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b900:	2b09      	cmp	r3, #9
   1b902:	d900      	bls.n	1b906 <_dtoa_r+0x19e>
   1b904:	e18f      	b.n	1bc26 <_dtoa_r+0x4be>
   1b906:	2401      	movs	r4, #1
   1b908:	2b05      	cmp	r3, #5
   1b90a:	dd02      	ble.n	1b912 <_dtoa_r+0x1aa>
   1b90c:	2400      	movs	r4, #0
   1b90e:	3b04      	subs	r3, #4
   1b910:	9322      	str	r3, [sp, #136]	; 0x88
   1b912:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b914:	2b03      	cmp	r3, #3
   1b916:	d101      	bne.n	1b91c <_dtoa_r+0x1b4>
   1b918:	f000 fcce 	bl	1c2b8 <_dtoa_r+0xb50>
   1b91c:	dc01      	bgt.n	1b922 <_dtoa_r+0x1ba>
   1b91e:	f000 fc92 	bl	1c246 <_dtoa_r+0xade>
   1b922:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b924:	2b04      	cmp	r3, #4
   1b926:	d101      	bne.n	1b92c <_dtoa_r+0x1c4>
   1b928:	f000 fc40 	bl	1c1ac <_dtoa_r+0xa44>
   1b92c:	2301      	movs	r3, #1
   1b92e:	930b      	str	r3, [sp, #44]	; 0x2c
   1b930:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b932:	2b05      	cmp	r3, #5
   1b934:	d001      	beq.n	1b93a <_dtoa_r+0x1d2>
   1b936:	f000 fc8b 	bl	1c250 <_dtoa_r+0xae8>
   1b93a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1b93c:	9b03      	ldr	r3, [sp, #12]
   1b93e:	4694      	mov	ip, r2
   1b940:	4463      	add	r3, ip
   1b942:	930e      	str	r3, [sp, #56]	; 0x38
   1b944:	3301      	adds	r3, #1
   1b946:	9307      	str	r3, [sp, #28]
   1b948:	1e1d      	subs	r5, r3, #0
   1b94a:	dc01      	bgt.n	1b950 <_dtoa_r+0x1e8>
   1b94c:	f000 fd49 	bl	1c3e2 <_dtoa_r+0xc7a>
   1b950:	9b07      	ldr	r3, [sp, #28]
   1b952:	4698      	mov	r8, r3
   1b954:	2300      	movs	r3, #0
   1b956:	4652      	mov	r2, sl
   1b958:	2100      	movs	r1, #0
   1b95a:	6453      	str	r3, [r2, #68]	; 0x44
   1b95c:	2d17      	cmp	r5, #23
   1b95e:	d90a      	bls.n	1b976 <_dtoa_r+0x20e>
   1b960:	2201      	movs	r2, #1
   1b962:	3304      	adds	r3, #4
   1b964:	005b      	lsls	r3, r3, #1
   1b966:	0018      	movs	r0, r3
   1b968:	3014      	adds	r0, #20
   1b96a:	0011      	movs	r1, r2
   1b96c:	3201      	adds	r2, #1
   1b96e:	4285      	cmp	r5, r0
   1b970:	d2f8      	bcs.n	1b964 <_dtoa_r+0x1fc>
   1b972:	4653      	mov	r3, sl
   1b974:	6459      	str	r1, [r3, #68]	; 0x44
   1b976:	4650      	mov	r0, sl
   1b978:	f001 ff36 	bl	1d7e8 <_Balloc>
   1b97c:	4653      	mov	r3, sl
   1b97e:	6418      	str	r0, [r3, #64]	; 0x40
   1b980:	4643      	mov	r3, r8
   1b982:	900a      	str	r0, [sp, #40]	; 0x28
   1b984:	2b0e      	cmp	r3, #14
   1b986:	d900      	bls.n	1b98a <_dtoa_r+0x222>
   1b988:	e161      	b.n	1bc4e <_dtoa_r+0x4e6>
   1b98a:	2c00      	cmp	r4, #0
   1b98c:	d100      	bne.n	1b990 <_dtoa_r+0x228>
   1b98e:	e15e      	b.n	1bc4e <_dtoa_r+0x4e6>
   1b990:	9610      	str	r6, [sp, #64]	; 0x40
   1b992:	9711      	str	r7, [sp, #68]	; 0x44
   1b994:	9e03      	ldr	r6, [sp, #12]
   1b996:	2e00      	cmp	r6, #0
   1b998:	dc01      	bgt.n	1b99e <_dtoa_r+0x236>
   1b99a:	f000 fd25 	bl	1c3e8 <_dtoa_r+0xc80>
   1b99e:	0032      	movs	r2, r6
   1b9a0:	210f      	movs	r1, #15
   1b9a2:	4b65      	ldr	r3, [pc, #404]	; (1bb38 <_dtoa_r+0x3d0>)
   1b9a4:	400a      	ands	r2, r1
   1b9a6:	00d2      	lsls	r2, r2, #3
   1b9a8:	189b      	adds	r3, r3, r2
   1b9aa:	1136      	asrs	r6, r6, #4
   1b9ac:	681c      	ldr	r4, [r3, #0]
   1b9ae:	685d      	ldr	r5, [r3, #4]
   1b9b0:	06f3      	lsls	r3, r6, #27
   1b9b2:	d401      	bmi.n	1b9b8 <_dtoa_r+0x250>
   1b9b4:	f000 fcca 	bl	1c34c <_dtoa_r+0xbe4>
   1b9b8:	4b60      	ldr	r3, [pc, #384]	; (1bb3c <_dtoa_r+0x3d4>)
   1b9ba:	400e      	ands	r6, r1
   1b9bc:	6a1a      	ldr	r2, [r3, #32]
   1b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b9c0:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b9c2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1b9c4:	f7fc fdea 	bl	1859c <__aeabi_ddiv>
   1b9c8:	2303      	movs	r3, #3
   1b9ca:	4698      	mov	r8, r3
   1b9cc:	9008      	str	r0, [sp, #32]
   1b9ce:	9109      	str	r1, [sp, #36]	; 0x24
   1b9d0:	2e00      	cmp	r6, #0
   1b9d2:	d011      	beq.n	1b9f8 <_dtoa_r+0x290>
   1b9d4:	4f59      	ldr	r7, [pc, #356]	; (1bb3c <_dtoa_r+0x3d4>)
   1b9d6:	2301      	movs	r3, #1
   1b9d8:	4233      	tst	r3, r6
   1b9da:	d009      	beq.n	1b9f0 <_dtoa_r+0x288>
   1b9dc:	469c      	mov	ip, r3
   1b9de:	683a      	ldr	r2, [r7, #0]
   1b9e0:	687b      	ldr	r3, [r7, #4]
   1b9e2:	0020      	movs	r0, r4
   1b9e4:	0029      	movs	r1, r5
   1b9e6:	44e0      	add	r8, ip
   1b9e8:	f7fd fa0c 	bl	18e04 <__aeabi_dmul>
   1b9ec:	0004      	movs	r4, r0
   1b9ee:	000d      	movs	r5, r1
   1b9f0:	1076      	asrs	r6, r6, #1
   1b9f2:	3708      	adds	r7, #8
   1b9f4:	2e00      	cmp	r6, #0
   1b9f6:	d1ee      	bne.n	1b9d6 <_dtoa_r+0x26e>
   1b9f8:	0022      	movs	r2, r4
   1b9fa:	9808      	ldr	r0, [sp, #32]
   1b9fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b9fe:	002b      	movs	r3, r5
   1ba00:	f7fc fdcc 	bl	1859c <__aeabi_ddiv>
   1ba04:	0006      	movs	r6, r0
   1ba06:	000f      	movs	r7, r1
   1ba08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d009      	beq.n	1ba22 <_dtoa_r+0x2ba>
   1ba0e:	2200      	movs	r2, #0
   1ba10:	4b40      	ldr	r3, [pc, #256]	; (1bb14 <_dtoa_r+0x3ac>)
   1ba12:	0030      	movs	r0, r6
   1ba14:	0039      	movs	r1, r7
   1ba16:	f7fb ffa9 	bl	1796c <__aeabi_dcmplt>
   1ba1a:	2800      	cmp	r0, #0
   1ba1c:	d001      	beq.n	1ba22 <_dtoa_r+0x2ba>
   1ba1e:	f000 fdc2 	bl	1c5a6 <_dtoa_r+0xe3e>
   1ba22:	4640      	mov	r0, r8
   1ba24:	f7fd ffb8 	bl	19998 <__aeabi_i2d>
   1ba28:	0032      	movs	r2, r6
   1ba2a:	003b      	movs	r3, r7
   1ba2c:	f7fd f9ea 	bl	18e04 <__aeabi_dmul>
   1ba30:	2200      	movs	r2, #0
   1ba32:	4b43      	ldr	r3, [pc, #268]	; (1bb40 <_dtoa_r+0x3d8>)
   1ba34:	f7fc faa2 	bl	17f7c <__aeabi_dadd>
   1ba38:	4a42      	ldr	r2, [pc, #264]	; (1bb44 <_dtoa_r+0x3dc>)
   1ba3a:	000b      	movs	r3, r1
   1ba3c:	4694      	mov	ip, r2
   1ba3e:	4463      	add	r3, ip
   1ba40:	9008      	str	r0, [sp, #32]
   1ba42:	9109      	str	r1, [sp, #36]	; 0x24
   1ba44:	9309      	str	r3, [sp, #36]	; 0x24
   1ba46:	9b07      	ldr	r3, [sp, #28]
   1ba48:	2b00      	cmp	r3, #0
   1ba4a:	d101      	bne.n	1ba50 <_dtoa_r+0x2e8>
   1ba4c:	f000 fc50 	bl	1c2f0 <_dtoa_r+0xb88>
   1ba50:	9b03      	ldr	r3, [sp, #12]
   1ba52:	9313      	str	r3, [sp, #76]	; 0x4c
   1ba54:	9b07      	ldr	r3, [sp, #28]
   1ba56:	9312      	str	r3, [sp, #72]	; 0x48
   1ba58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	d101      	bne.n	1ba62 <_dtoa_r+0x2fa>
   1ba5e:	f000 fd1d 	bl	1c49c <_dtoa_r+0xd34>
   1ba62:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ba64:	2000      	movs	r0, #0
   1ba66:	1e5a      	subs	r2, r3, #1
   1ba68:	4b33      	ldr	r3, [pc, #204]	; (1bb38 <_dtoa_r+0x3d0>)
   1ba6a:	00d2      	lsls	r2, r2, #3
   1ba6c:	189b      	adds	r3, r3, r2
   1ba6e:	681a      	ldr	r2, [r3, #0]
   1ba70:	685b      	ldr	r3, [r3, #4]
   1ba72:	4935      	ldr	r1, [pc, #212]	; (1bb48 <_dtoa_r+0x3e0>)
   1ba74:	f7fc fd92 	bl	1859c <__aeabi_ddiv>
   1ba78:	9a08      	ldr	r2, [sp, #32]
   1ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba7c:	f7fd fc42 	bl	19304 <__aeabi_dsub>
   1ba80:	9008      	str	r0, [sp, #32]
   1ba82:	9109      	str	r1, [sp, #36]	; 0x24
   1ba84:	0039      	movs	r1, r7
   1ba86:	0030      	movs	r0, r6
   1ba88:	f7fd ff52 	bl	19930 <__aeabi_d2iz>
   1ba8c:	0004      	movs	r4, r0
   1ba8e:	f7fd ff83 	bl	19998 <__aeabi_i2d>
   1ba92:	0002      	movs	r2, r0
   1ba94:	000b      	movs	r3, r1
   1ba96:	0030      	movs	r0, r6
   1ba98:	0039      	movs	r1, r7
   1ba9a:	f7fd fc33 	bl	19304 <__aeabi_dsub>
   1ba9e:	0005      	movs	r5, r0
   1baa0:	000e      	movs	r6, r1
   1baa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1baa4:	3430      	adds	r4, #48	; 0x30
   1baa6:	1c51      	adds	r1, r2, #1
   1baa8:	b2e7      	uxtb	r7, r4
   1baaa:	9114      	str	r1, [sp, #80]	; 0x50
   1baac:	7017      	strb	r7, [r2, #0]
   1baae:	0033      	movs	r3, r6
   1bab0:	9808      	ldr	r0, [sp, #32]
   1bab2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bab4:	002a      	movs	r2, r5
   1bab6:	f7fb ff6d 	bl	17994 <__aeabi_dcmpgt>
   1baba:	2800      	cmp	r0, #0
   1babc:	d001      	beq.n	1bac2 <_dtoa_r+0x35a>
   1babe:	f000 fdfe 	bl	1c6be <_dtoa_r+0xf56>
   1bac2:	002a      	movs	r2, r5
   1bac4:	0033      	movs	r3, r6
   1bac6:	2000      	movs	r0, #0
   1bac8:	4912      	ldr	r1, [pc, #72]	; (1bb14 <_dtoa_r+0x3ac>)
   1baca:	f7fd fc1b 	bl	19304 <__aeabi_dsub>
   1bace:	0002      	movs	r2, r0
   1bad0:	000b      	movs	r3, r1
   1bad2:	9808      	ldr	r0, [sp, #32]
   1bad4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bad6:	f7fb ff5d 	bl	17994 <__aeabi_dcmpgt>
   1bada:	2800      	cmp	r0, #0
   1badc:	d001      	beq.n	1bae2 <_dtoa_r+0x37a>
   1bade:	f000 fde7 	bl	1c6b0 <_dtoa_r+0xf48>
   1bae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bae4:	2b01      	cmp	r3, #1
   1bae6:	d101      	bne.n	1baec <_dtoa_r+0x384>
   1bae8:	f000 fc78 	bl	1c3dc <_dtoa_r+0xc74>
   1baec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1baee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1baf0:	4694      	mov	ip, r2
   1baf2:	4463      	add	r3, ip
   1baf4:	4698      	mov	r8, r3
   1baf6:	464b      	mov	r3, r9
   1baf8:	9312      	str	r3, [sp, #72]	; 0x48
   1bafa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bafc:	4699      	mov	r9, r3
   1bafe:	e038      	b.n	1bb72 <_dtoa_r+0x40a>
   1bb00:	7ff00000 	.word	0x7ff00000
   1bb04:	0001fe21 	.word	0x0001fe21
   1bb08:	0000270f 	.word	0x0000270f
   1bb0c:	0001fe44 	.word	0x0001fe44
   1bb10:	0001fe50 	.word	0x0001fe50
   1bb14:	3ff00000 	.word	0x3ff00000
   1bb18:	fffffc01 	.word	0xfffffc01
   1bb1c:	3ff80000 	.word	0x3ff80000
   1bb20:	636f4361 	.word	0x636f4361
   1bb24:	3fd287a7 	.word	0x3fd287a7
   1bb28:	8b60c8b3 	.word	0x8b60c8b3
   1bb2c:	3fc68a28 	.word	0x3fc68a28
   1bb30:	509f79fb 	.word	0x509f79fb
   1bb34:	3fd34413 	.word	0x3fd34413
   1bb38:	0001fe90 	.word	0x0001fe90
   1bb3c:	0001fe68 	.word	0x0001fe68
   1bb40:	401c0000 	.word	0x401c0000
   1bb44:	fcc00000 	.word	0xfcc00000
   1bb48:	3fe00000 	.word	0x3fe00000
   1bb4c:	002a      	movs	r2, r5
   1bb4e:	0033      	movs	r3, r6
   1bb50:	2000      	movs	r0, #0
   1bb52:	49b9      	ldr	r1, [pc, #740]	; (1be38 <_dtoa_r+0x6d0>)
   1bb54:	f7fd fbd6 	bl	19304 <__aeabi_dsub>
   1bb58:	9a08      	ldr	r2, [sp, #32]
   1bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb5c:	f7fb ff06 	bl	1796c <__aeabi_dcmplt>
   1bb60:	2800      	cmp	r0, #0
   1bb62:	d001      	beq.n	1bb68 <_dtoa_r+0x400>
   1bb64:	f000 fd74 	bl	1c650 <_dtoa_r+0xee8>
   1bb68:	46a1      	mov	r9, r4
   1bb6a:	4544      	cmp	r4, r8
   1bb6c:	d101      	bne.n	1bb72 <_dtoa_r+0x40a>
   1bb6e:	f000 fc33 	bl	1c3d8 <_dtoa_r+0xc70>
   1bb72:	9808      	ldr	r0, [sp, #32]
   1bb74:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bb76:	2200      	movs	r2, #0
   1bb78:	4bb0      	ldr	r3, [pc, #704]	; (1be3c <_dtoa_r+0x6d4>)
   1bb7a:	f7fd f943 	bl	18e04 <__aeabi_dmul>
   1bb7e:	2200      	movs	r2, #0
   1bb80:	4bae      	ldr	r3, [pc, #696]	; (1be3c <_dtoa_r+0x6d4>)
   1bb82:	9008      	str	r0, [sp, #32]
   1bb84:	9109      	str	r1, [sp, #36]	; 0x24
   1bb86:	0028      	movs	r0, r5
   1bb88:	0031      	movs	r1, r6
   1bb8a:	f7fd f93b 	bl	18e04 <__aeabi_dmul>
   1bb8e:	000d      	movs	r5, r1
   1bb90:	0004      	movs	r4, r0
   1bb92:	f7fd fecd 	bl	19930 <__aeabi_d2iz>
   1bb96:	0007      	movs	r7, r0
   1bb98:	f7fd fefe 	bl	19998 <__aeabi_i2d>
   1bb9c:	0002      	movs	r2, r0
   1bb9e:	000b      	movs	r3, r1
   1bba0:	0020      	movs	r0, r4
   1bba2:	0029      	movs	r1, r5
   1bba4:	f7fd fbae 	bl	19304 <__aeabi_dsub>
   1bba8:	464b      	mov	r3, r9
   1bbaa:	3730      	adds	r7, #48	; 0x30
   1bbac:	b2ff      	uxtb	r7, r7
   1bbae:	1c5c      	adds	r4, r3, #1
   1bbb0:	701f      	strb	r7, [r3, #0]
   1bbb2:	9a08      	ldr	r2, [sp, #32]
   1bbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bbb6:	0005      	movs	r5, r0
   1bbb8:	000e      	movs	r6, r1
   1bbba:	f7fb fed7 	bl	1796c <__aeabi_dcmplt>
   1bbbe:	2800      	cmp	r0, #0
   1bbc0:	d0c4      	beq.n	1bb4c <_dtoa_r+0x3e4>
   1bbc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bbc4:	9303      	str	r3, [sp, #12]
   1bbc6:	4659      	mov	r1, fp
   1bbc8:	4650      	mov	r0, sl
   1bbca:	f001 fe35 	bl	1d838 <_Bfree>
   1bbce:	2300      	movs	r3, #0
   1bbd0:	7023      	strb	r3, [r4, #0]
   1bbd2:	9b03      	ldr	r3, [sp, #12]
   1bbd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bbd6:	3301      	adds	r3, #1
   1bbd8:	6013      	str	r3, [r2, #0]
   1bbda:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bbdc:	2b00      	cmp	r3, #0
   1bbde:	d100      	bne.n	1bbe2 <_dtoa_r+0x47a>
   1bbe0:	e3a8      	b.n	1c334 <_dtoa_r+0xbcc>
   1bbe2:	601c      	str	r4, [r3, #0]
   1bbe4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bbe6:	e5f4      	b.n	1b7d2 <_dtoa_r+0x6a>
   1bbe8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1bbea:	4699      	mov	r9, r3
   1bbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bbee:	444b      	add	r3, r9
   1bbf0:	001c      	movs	r4, r3
   1bbf2:	4b93      	ldr	r3, [pc, #588]	; (1be40 <_dtoa_r+0x6d8>)
   1bbf4:	18e3      	adds	r3, r4, r3
   1bbf6:	2b20      	cmp	r3, #32
   1bbf8:	dc00      	bgt.n	1bbfc <_dtoa_r+0x494>
   1bbfa:	e17e      	b.n	1befa <_dtoa_r+0x792>
   1bbfc:	0031      	movs	r1, r6
   1bbfe:	4a91      	ldr	r2, [pc, #580]	; (1be44 <_dtoa_r+0x6dc>)
   1bc00:	4640      	mov	r0, r8
   1bc02:	18a2      	adds	r2, r4, r2
   1bc04:	40d1      	lsrs	r1, r2
   1bc06:	000a      	movs	r2, r1
   1bc08:	2140      	movs	r1, #64	; 0x40
   1bc0a:	1acb      	subs	r3, r1, r3
   1bc0c:	4098      	lsls	r0, r3
   1bc0e:	4310      	orrs	r0, r2
   1bc10:	f7fd ff04 	bl	19a1c <__aeabi_ui2d>
   1bc14:	1e63      	subs	r3, r4, #1
   1bc16:	4698      	mov	r8, r3
   1bc18:	2301      	movs	r3, #1
   1bc1a:	4d8b      	ldr	r5, [pc, #556]	; (1be48 <_dtoa_r+0x6e0>)
   1bc1c:	930f      	str	r3, [sp, #60]	; 0x3c
   1bc1e:	1949      	adds	r1, r1, r5
   1bc20:	e618      	b.n	1b854 <_dtoa_r+0xec>
   1bc22:	488a      	ldr	r0, [pc, #552]	; (1be4c <_dtoa_r+0x6e4>)
   1bc24:	e5d5      	b.n	1b7d2 <_dtoa_r+0x6a>
   1bc26:	2300      	movs	r3, #0
   1bc28:	4652      	mov	r2, sl
   1bc2a:	2100      	movs	r1, #0
   1bc2c:	6453      	str	r3, [r2, #68]	; 0x44
   1bc2e:	4650      	mov	r0, sl
   1bc30:	f001 fdda 	bl	1d7e8 <_Balloc>
   1bc34:	4653      	mov	r3, sl
   1bc36:	6418      	str	r0, [r3, #64]	; 0x40
   1bc38:	2301      	movs	r3, #1
   1bc3a:	425b      	negs	r3, r3
   1bc3c:	9307      	str	r3, [sp, #28]
   1bc3e:	930e      	str	r3, [sp, #56]	; 0x38
   1bc40:	3302      	adds	r3, #2
   1bc42:	2200      	movs	r2, #0
   1bc44:	930b      	str	r3, [sp, #44]	; 0x2c
   1bc46:	2300      	movs	r3, #0
   1bc48:	900a      	str	r0, [sp, #40]	; 0x28
   1bc4a:	9223      	str	r2, [sp, #140]	; 0x8c
   1bc4c:	9322      	str	r3, [sp, #136]	; 0x88
   1bc4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bc50:	2b00      	cmp	r3, #0
   1bc52:	da00      	bge.n	1bc56 <_dtoa_r+0x4ee>
   1bc54:	e0ab      	b.n	1bdae <_dtoa_r+0x646>
   1bc56:	9a03      	ldr	r2, [sp, #12]
   1bc58:	2a0e      	cmp	r2, #14
   1bc5a:	dd00      	ble.n	1bc5e <_dtoa_r+0x4f6>
   1bc5c:	e0a7      	b.n	1bdae <_dtoa_r+0x646>
   1bc5e:	4b7c      	ldr	r3, [pc, #496]	; (1be50 <_dtoa_r+0x6e8>)
   1bc60:	00d2      	lsls	r2, r2, #3
   1bc62:	189b      	adds	r3, r3, r2
   1bc64:	685c      	ldr	r4, [r3, #4]
   1bc66:	681b      	ldr	r3, [r3, #0]
   1bc68:	9304      	str	r3, [sp, #16]
   1bc6a:	9405      	str	r4, [sp, #20]
   1bc6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc6e:	2b00      	cmp	r3, #0
   1bc70:	da00      	bge.n	1bc74 <_dtoa_r+0x50c>
   1bc72:	e2a7      	b.n	1c1c4 <_dtoa_r+0xa5c>
   1bc74:	9c04      	ldr	r4, [sp, #16]
   1bc76:	9d05      	ldr	r5, [sp, #20]
   1bc78:	0030      	movs	r0, r6
   1bc7a:	0022      	movs	r2, r4
   1bc7c:	002b      	movs	r3, r5
   1bc7e:	0039      	movs	r1, r7
   1bc80:	f7fc fc8c 	bl	1859c <__aeabi_ddiv>
   1bc84:	f7fd fe54 	bl	19930 <__aeabi_d2iz>
   1bc88:	4680      	mov	r8, r0
   1bc8a:	f7fd fe85 	bl	19998 <__aeabi_i2d>
   1bc8e:	0022      	movs	r2, r4
   1bc90:	002b      	movs	r3, r5
   1bc92:	f7fd f8b7 	bl	18e04 <__aeabi_dmul>
   1bc96:	0002      	movs	r2, r0
   1bc98:	000b      	movs	r3, r1
   1bc9a:	0030      	movs	r0, r6
   1bc9c:	0039      	movs	r1, r7
   1bc9e:	f7fd fb31 	bl	19304 <__aeabi_dsub>
   1bca2:	4643      	mov	r3, r8
   1bca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bca6:	3330      	adds	r3, #48	; 0x30
   1bca8:	7013      	strb	r3, [r2, #0]
   1bcaa:	9b07      	ldr	r3, [sp, #28]
   1bcac:	0006      	movs	r6, r0
   1bcae:	000f      	movs	r7, r1
   1bcb0:	1c54      	adds	r4, r2, #1
   1bcb2:	2b01      	cmp	r3, #1
   1bcb4:	d04e      	beq.n	1bd54 <_dtoa_r+0x5ec>
   1bcb6:	2200      	movs	r2, #0
   1bcb8:	4b60      	ldr	r3, [pc, #384]	; (1be3c <_dtoa_r+0x6d4>)
   1bcba:	f7fd f8a3 	bl	18e04 <__aeabi_dmul>
   1bcbe:	2200      	movs	r2, #0
   1bcc0:	2300      	movs	r3, #0
   1bcc2:	0006      	movs	r6, r0
   1bcc4:	000f      	movs	r7, r1
   1bcc6:	f7fb fe4b 	bl	17960 <__aeabi_dcmpeq>
   1bcca:	2800      	cmp	r0, #0
   1bccc:	d000      	beq.n	1bcd0 <_dtoa_r+0x568>
   1bcce:	e77a      	b.n	1bbc6 <_dtoa_r+0x45e>
   1bcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcd2:	9a07      	ldr	r2, [sp, #28]
   1bcd4:	1c9d      	adds	r5, r3, #2
   1bcd6:	469c      	mov	ip, r3
   1bcd8:	465b      	mov	r3, fp
   1bcda:	9306      	str	r3, [sp, #24]
   1bcdc:	4653      	mov	r3, sl
   1bcde:	4462      	add	r2, ip
   1bce0:	46aa      	mov	sl, r5
   1bce2:	9c04      	ldr	r4, [sp, #16]
   1bce4:	9d05      	ldr	r5, [sp, #20]
   1bce6:	4691      	mov	r9, r2
   1bce8:	9307      	str	r3, [sp, #28]
   1bcea:	e00f      	b.n	1bd0c <_dtoa_r+0x5a4>
   1bcec:	2200      	movs	r2, #0
   1bcee:	4b53      	ldr	r3, [pc, #332]	; (1be3c <_dtoa_r+0x6d4>)
   1bcf0:	f7fd f888 	bl	18e04 <__aeabi_dmul>
   1bcf4:	2301      	movs	r3, #1
   1bcf6:	469c      	mov	ip, r3
   1bcf8:	2200      	movs	r2, #0
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	0006      	movs	r6, r0
   1bcfe:	000f      	movs	r7, r1
   1bd00:	44e2      	add	sl, ip
   1bd02:	f7fb fe2d 	bl	17960 <__aeabi_dcmpeq>
   1bd06:	2800      	cmp	r0, #0
   1bd08:	d000      	beq.n	1bd0c <_dtoa_r+0x5a4>
   1bd0a:	e2d9      	b.n	1c2c0 <_dtoa_r+0xb58>
   1bd0c:	0022      	movs	r2, r4
   1bd0e:	002b      	movs	r3, r5
   1bd10:	0030      	movs	r0, r6
   1bd12:	0039      	movs	r1, r7
   1bd14:	f7fc fc42 	bl	1859c <__aeabi_ddiv>
   1bd18:	f7fd fe0a 	bl	19930 <__aeabi_d2iz>
   1bd1c:	4680      	mov	r8, r0
   1bd1e:	f7fd fe3b 	bl	19998 <__aeabi_i2d>
   1bd22:	0022      	movs	r2, r4
   1bd24:	002b      	movs	r3, r5
   1bd26:	f7fd f86d 	bl	18e04 <__aeabi_dmul>
   1bd2a:	0002      	movs	r2, r0
   1bd2c:	000b      	movs	r3, r1
   1bd2e:	0030      	movs	r0, r6
   1bd30:	0039      	movs	r1, r7
   1bd32:	f7fd fae7 	bl	19304 <__aeabi_dsub>
   1bd36:	4653      	mov	r3, sl
   1bd38:	4642      	mov	r2, r8
   1bd3a:	3b01      	subs	r3, #1
   1bd3c:	3230      	adds	r2, #48	; 0x30
   1bd3e:	0006      	movs	r6, r0
   1bd40:	000f      	movs	r7, r1
   1bd42:	46d3      	mov	fp, sl
   1bd44:	701a      	strb	r2, [r3, #0]
   1bd46:	45d1      	cmp	r9, sl
   1bd48:	d1d0      	bne.n	1bcec <_dtoa_r+0x584>
   1bd4a:	9b06      	ldr	r3, [sp, #24]
   1bd4c:	4654      	mov	r4, sl
   1bd4e:	469b      	mov	fp, r3
   1bd50:	9b07      	ldr	r3, [sp, #28]
   1bd52:	469a      	mov	sl, r3
   1bd54:	0032      	movs	r2, r6
   1bd56:	003b      	movs	r3, r7
   1bd58:	0030      	movs	r0, r6
   1bd5a:	0039      	movs	r1, r7
   1bd5c:	f7fc f90e 	bl	17f7c <__aeabi_dadd>
   1bd60:	0006      	movs	r6, r0
   1bd62:	000f      	movs	r7, r1
   1bd64:	0002      	movs	r2, r0
   1bd66:	000b      	movs	r3, r1
   1bd68:	9804      	ldr	r0, [sp, #16]
   1bd6a:	9905      	ldr	r1, [sp, #20]
   1bd6c:	f7fb fdfe 	bl	1796c <__aeabi_dcmplt>
   1bd70:	2800      	cmp	r0, #0
   1bd72:	d10c      	bne.n	1bd8e <_dtoa_r+0x626>
   1bd74:	9804      	ldr	r0, [sp, #16]
   1bd76:	9905      	ldr	r1, [sp, #20]
   1bd78:	0032      	movs	r2, r6
   1bd7a:	003b      	movs	r3, r7
   1bd7c:	f7fb fdf0 	bl	17960 <__aeabi_dcmpeq>
   1bd80:	2800      	cmp	r0, #0
   1bd82:	d100      	bne.n	1bd86 <_dtoa_r+0x61e>
   1bd84:	e71f      	b.n	1bbc6 <_dtoa_r+0x45e>
   1bd86:	4643      	mov	r3, r8
   1bd88:	07db      	lsls	r3, r3, #31
   1bd8a:	d400      	bmi.n	1bd8e <_dtoa_r+0x626>
   1bd8c:	e71b      	b.n	1bbc6 <_dtoa_r+0x45e>
   1bd8e:	1e65      	subs	r5, r4, #1
   1bd90:	782f      	ldrb	r7, [r5, #0]
   1bd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bd94:	e006      	b.n	1bda4 <_dtoa_r+0x63c>
   1bd96:	429d      	cmp	r5, r3
   1bd98:	d100      	bne.n	1bd9c <_dtoa_r+0x634>
   1bd9a:	e351      	b.n	1c440 <_dtoa_r+0xcd8>
   1bd9c:	3c02      	subs	r4, #2
   1bd9e:	7827      	ldrb	r7, [r4, #0]
   1bda0:	002c      	movs	r4, r5
   1bda2:	3d01      	subs	r5, #1
   1bda4:	2f39      	cmp	r7, #57	; 0x39
   1bda6:	d0f6      	beq.n	1bd96 <_dtoa_r+0x62e>
   1bda8:	3701      	adds	r7, #1
   1bdaa:	702f      	strb	r7, [r5, #0]
   1bdac:	e70b      	b.n	1bbc6 <_dtoa_r+0x45e>
   1bdae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1bdb0:	2a00      	cmp	r2, #0
   1bdb2:	d04f      	beq.n	1be54 <_dtoa_r+0x6ec>
   1bdb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1bdb6:	2a01      	cmp	r2, #1
   1bdb8:	dc00      	bgt.n	1bdbc <_dtoa_r+0x654>
   1bdba:	e22c      	b.n	1c216 <_dtoa_r+0xaae>
   1bdbc:	9b07      	ldr	r3, [sp, #28]
   1bdbe:	1e5c      	subs	r4, r3, #1
   1bdc0:	464b      	mov	r3, r9
   1bdc2:	45a1      	cmp	r9, r4
   1bdc4:	da00      	bge.n	1bdc8 <_dtoa_r+0x660>
   1bdc6:	e2b8      	b.n	1c33a <_dtoa_r+0xbd2>
   1bdc8:	1b1c      	subs	r4, r3, r4
   1bdca:	9b07      	ldr	r3, [sp, #28]
   1bdcc:	2b00      	cmp	r3, #0
   1bdce:	da00      	bge.n	1bdd2 <_dtoa_r+0x66a>
   1bdd0:	e3d4      	b.n	1c57c <_dtoa_r+0xe14>
   1bdd2:	9b06      	ldr	r3, [sp, #24]
   1bdd4:	9308      	str	r3, [sp, #32]
   1bdd6:	9b07      	ldr	r3, [sp, #28]
   1bdd8:	9a06      	ldr	r2, [sp, #24]
   1bdda:	2101      	movs	r1, #1
   1bddc:	4694      	mov	ip, r2
   1bdde:	449c      	add	ip, r3
   1bde0:	4662      	mov	r2, ip
   1bde2:	9206      	str	r2, [sp, #24]
   1bde4:	9a04      	ldr	r2, [sp, #16]
   1bde6:	4650      	mov	r0, sl
   1bde8:	4694      	mov	ip, r2
   1bdea:	449c      	add	ip, r3
   1bdec:	4663      	mov	r3, ip
   1bdee:	9304      	str	r3, [sp, #16]
   1bdf0:	f001 fdba 	bl	1d968 <__i2b>
   1bdf4:	4680      	mov	r8, r0
   1bdf6:	e032      	b.n	1be5e <_dtoa_r+0x6f6>
   1bdf8:	9a06      	ldr	r2, [sp, #24]
   1bdfa:	9b03      	ldr	r3, [sp, #12]
   1bdfc:	1ad2      	subs	r2, r2, r3
   1bdfe:	425b      	negs	r3, r3
   1be00:	4699      	mov	r9, r3
   1be02:	2300      	movs	r3, #0
   1be04:	9206      	str	r2, [sp, #24]
   1be06:	930d      	str	r3, [sp, #52]	; 0x34
   1be08:	e579      	b.n	1b8fe <_dtoa_r+0x196>
   1be0a:	9803      	ldr	r0, [sp, #12]
   1be0c:	f7fd fdc4 	bl	19998 <__aeabi_i2d>
   1be10:	000b      	movs	r3, r1
   1be12:	0002      	movs	r2, r0
   1be14:	0029      	movs	r1, r5
   1be16:	0020      	movs	r0, r4
   1be18:	f7fb fda2 	bl	17960 <__aeabi_dcmpeq>
   1be1c:	0002      	movs	r2, r0
   1be1e:	4250      	negs	r0, r2
   1be20:	4150      	adcs	r0, r2
   1be22:	9b03      	ldr	r3, [sp, #12]
   1be24:	1a1b      	subs	r3, r3, r0
   1be26:	9303      	str	r3, [sp, #12]
   1be28:	e53d      	b.n	1b8a6 <_dtoa_r+0x13e>
   1be2a:	2301      	movs	r3, #1
   1be2c:	1a9b      	subs	r3, r3, r2
   1be2e:	9306      	str	r3, [sp, #24]
   1be30:	2300      	movs	r3, #0
   1be32:	9304      	str	r3, [sp, #16]
   1be34:	e557      	b.n	1b8e6 <_dtoa_r+0x17e>
   1be36:	46c0      	nop			; (mov r8, r8)
   1be38:	3ff00000 	.word	0x3ff00000
   1be3c:	40240000 	.word	0x40240000
   1be40:	00000432 	.word	0x00000432
   1be44:	00000412 	.word	0x00000412
   1be48:	fe100000 	.word	0xfe100000
   1be4c:	0001fe20 	.word	0x0001fe20
   1be50:	0001fe90 	.word	0x0001fe90
   1be54:	9b06      	ldr	r3, [sp, #24]
   1be56:	464c      	mov	r4, r9
   1be58:	9308      	str	r3, [sp, #32]
   1be5a:	2300      	movs	r3, #0
   1be5c:	4698      	mov	r8, r3
   1be5e:	9908      	ldr	r1, [sp, #32]
   1be60:	1e0b      	subs	r3, r1, #0
   1be62:	dd0e      	ble.n	1be82 <_dtoa_r+0x71a>
   1be64:	9a04      	ldr	r2, [sp, #16]
   1be66:	2a00      	cmp	r2, #0
   1be68:	dd0b      	ble.n	1be82 <_dtoa_r+0x71a>
   1be6a:	4293      	cmp	r3, r2
   1be6c:	dd00      	ble.n	1be70 <_dtoa_r+0x708>
   1be6e:	e187      	b.n	1c180 <_dtoa_r+0xa18>
   1be70:	9a06      	ldr	r2, [sp, #24]
   1be72:	1ad2      	subs	r2, r2, r3
   1be74:	9206      	str	r2, [sp, #24]
   1be76:	9a08      	ldr	r2, [sp, #32]
   1be78:	1ad2      	subs	r2, r2, r3
   1be7a:	9208      	str	r2, [sp, #32]
   1be7c:	9a04      	ldr	r2, [sp, #16]
   1be7e:	1ad3      	subs	r3, r2, r3
   1be80:	9304      	str	r3, [sp, #16]
   1be82:	464b      	mov	r3, r9
   1be84:	2b00      	cmp	r3, #0
   1be86:	d01a      	beq.n	1bebe <_dtoa_r+0x756>
   1be88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1be8a:	2b00      	cmp	r3, #0
   1be8c:	d100      	bne.n	1be90 <_dtoa_r+0x728>
   1be8e:	e1bb      	b.n	1c208 <_dtoa_r+0xaa0>
   1be90:	2c00      	cmp	r4, #0
   1be92:	dd10      	ble.n	1beb6 <_dtoa_r+0x74e>
   1be94:	4641      	mov	r1, r8
   1be96:	0022      	movs	r2, r4
   1be98:	4650      	mov	r0, sl
   1be9a:	f001 fe19 	bl	1dad0 <__pow5mult>
   1be9e:	465a      	mov	r2, fp
   1bea0:	0001      	movs	r1, r0
   1bea2:	4680      	mov	r8, r0
   1bea4:	4650      	mov	r0, sl
   1bea6:	f001 fd69 	bl	1d97c <__multiply>
   1beaa:	0005      	movs	r5, r0
   1beac:	4659      	mov	r1, fp
   1beae:	4650      	mov	r0, sl
   1beb0:	f001 fcc2 	bl	1d838 <_Bfree>
   1beb4:	46ab      	mov	fp, r5
   1beb6:	464b      	mov	r3, r9
   1beb8:	1b1a      	subs	r2, r3, r4
   1beba:	d000      	beq.n	1bebe <_dtoa_r+0x756>
   1bebc:	e1a5      	b.n	1c20a <_dtoa_r+0xaa2>
   1bebe:	2101      	movs	r1, #1
   1bec0:	4650      	mov	r0, sl
   1bec2:	f001 fd51 	bl	1d968 <__i2b>
   1bec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bec8:	4681      	mov	r9, r0
   1beca:	2b00      	cmp	r3, #0
   1becc:	dd1d      	ble.n	1bf0a <_dtoa_r+0x7a2>
   1bece:	001a      	movs	r2, r3
   1bed0:	0001      	movs	r1, r0
   1bed2:	4650      	mov	r0, sl
   1bed4:	f001 fdfc 	bl	1dad0 <__pow5mult>
   1bed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1beda:	4681      	mov	r9, r0
   1bedc:	2b01      	cmp	r3, #1
   1bede:	dc00      	bgt.n	1bee2 <_dtoa_r+0x77a>
   1bee0:	e150      	b.n	1c184 <_dtoa_r+0xa1c>
   1bee2:	2400      	movs	r4, #0
   1bee4:	464b      	mov	r3, r9
   1bee6:	691b      	ldr	r3, [r3, #16]
   1bee8:	3303      	adds	r3, #3
   1beea:	009b      	lsls	r3, r3, #2
   1beec:	444b      	add	r3, r9
   1beee:	6858      	ldr	r0, [r3, #4]
   1bef0:	f001 fcf2 	bl	1d8d8 <__hi0bits>
   1bef4:	2320      	movs	r3, #32
   1bef6:	1a1b      	subs	r3, r3, r0
   1bef8:	e010      	b.n	1bf1c <_dtoa_r+0x7b4>
   1befa:	2220      	movs	r2, #32
   1befc:	0030      	movs	r0, r6
   1befe:	1ad3      	subs	r3, r2, r3
   1bf00:	4098      	lsls	r0, r3
   1bf02:	e685      	b.n	1bc10 <_dtoa_r+0x4a8>
   1bf04:	2300      	movs	r3, #0
   1bf06:	930c      	str	r3, [sp, #48]	; 0x30
   1bf08:	e4e3      	b.n	1b8d2 <_dtoa_r+0x16a>
   1bf0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1bf0c:	2400      	movs	r4, #0
   1bf0e:	2b01      	cmp	r3, #1
   1bf10:	dc00      	bgt.n	1bf14 <_dtoa_r+0x7ac>
   1bf12:	e18b      	b.n	1c22c <_dtoa_r+0xac4>
   1bf14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bf16:	2301      	movs	r3, #1
   1bf18:	2a00      	cmp	r2, #0
   1bf1a:	d1e3      	bne.n	1bee4 <_dtoa_r+0x77c>
   1bf1c:	9904      	ldr	r1, [sp, #16]
   1bf1e:	201f      	movs	r0, #31
   1bf20:	468c      	mov	ip, r1
   1bf22:	4463      	add	r3, ip
   1bf24:	4018      	ands	r0, r3
   1bf26:	d100      	bne.n	1bf2a <_dtoa_r+0x7c2>
   1bf28:	e0ae      	b.n	1c088 <_dtoa_r+0x920>
   1bf2a:	2320      	movs	r3, #32
   1bf2c:	1a1b      	subs	r3, r3, r0
   1bf2e:	2b04      	cmp	r3, #4
   1bf30:	dc00      	bgt.n	1bf34 <_dtoa_r+0x7cc>
   1bf32:	e3cc      	b.n	1c6ce <_dtoa_r+0xf66>
   1bf34:	231c      	movs	r3, #28
   1bf36:	1a18      	subs	r0, r3, r0
   1bf38:	9b06      	ldr	r3, [sp, #24]
   1bf3a:	469c      	mov	ip, r3
   1bf3c:	4484      	add	ip, r0
   1bf3e:	4663      	mov	r3, ip
   1bf40:	9306      	str	r3, [sp, #24]
   1bf42:	9b08      	ldr	r3, [sp, #32]
   1bf44:	469c      	mov	ip, r3
   1bf46:	4484      	add	ip, r0
   1bf48:	4663      	mov	r3, ip
   1bf4a:	468c      	mov	ip, r1
   1bf4c:	4484      	add	ip, r0
   1bf4e:	9308      	str	r3, [sp, #32]
   1bf50:	4663      	mov	r3, ip
   1bf52:	9304      	str	r3, [sp, #16]
   1bf54:	9b06      	ldr	r3, [sp, #24]
   1bf56:	2b00      	cmp	r3, #0
   1bf58:	dd05      	ble.n	1bf66 <_dtoa_r+0x7fe>
   1bf5a:	4659      	mov	r1, fp
   1bf5c:	001a      	movs	r2, r3
   1bf5e:	4650      	mov	r0, sl
   1bf60:	f001 fe16 	bl	1db90 <__lshift>
   1bf64:	4683      	mov	fp, r0
   1bf66:	9b04      	ldr	r3, [sp, #16]
   1bf68:	2b00      	cmp	r3, #0
   1bf6a:	dd05      	ble.n	1bf78 <_dtoa_r+0x810>
   1bf6c:	4649      	mov	r1, r9
   1bf6e:	001a      	movs	r2, r3
   1bf70:	4650      	mov	r0, sl
   1bf72:	f001 fe0d 	bl	1db90 <__lshift>
   1bf76:	4681      	mov	r9, r0
   1bf78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf7a:	2b00      	cmp	r3, #0
   1bf7c:	d000      	beq.n	1bf80 <_dtoa_r+0x818>
   1bf7e:	e094      	b.n	1c0aa <_dtoa_r+0x942>
   1bf80:	9b07      	ldr	r3, [sp, #28]
   1bf82:	2b00      	cmp	r3, #0
   1bf84:	dc00      	bgt.n	1bf88 <_dtoa_r+0x820>
   1bf86:	e175      	b.n	1c274 <_dtoa_r+0xb0c>
   1bf88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d100      	bne.n	1bf90 <_dtoa_r+0x828>
   1bf8e:	e0a6      	b.n	1c0de <_dtoa_r+0x976>
   1bf90:	9b08      	ldr	r3, [sp, #32]
   1bf92:	2b00      	cmp	r3, #0
   1bf94:	dd05      	ble.n	1bfa2 <_dtoa_r+0x83a>
   1bf96:	4641      	mov	r1, r8
   1bf98:	001a      	movs	r2, r3
   1bf9a:	4650      	mov	r0, sl
   1bf9c:	f001 fdf8 	bl	1db90 <__lshift>
   1bfa0:	4680      	mov	r8, r0
   1bfa2:	4643      	mov	r3, r8
   1bfa4:	930c      	str	r3, [sp, #48]	; 0x30
   1bfa6:	2c00      	cmp	r4, #0
   1bfa8:	d000      	beq.n	1bfac <_dtoa_r+0x844>
   1bfaa:	e250      	b.n	1c44e <_dtoa_r+0xce6>
   1bfac:	9c07      	ldr	r4, [sp, #28]
   1bfae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bfb0:	3c01      	subs	r4, #1
   1bfb2:	0023      	movs	r3, r4
   1bfb4:	4694      	mov	ip, r2
   1bfb6:	4463      	add	r3, ip
   1bfb8:	9308      	str	r3, [sp, #32]
   1bfba:	2301      	movs	r3, #1
   1bfbc:	4033      	ands	r3, r6
   1bfbe:	9307      	str	r3, [sp, #28]
   1bfc0:	464b      	mov	r3, r9
   1bfc2:	9306      	str	r3, [sp, #24]
   1bfc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bfc6:	4657      	mov	r7, sl
   1bfc8:	4645      	mov	r5, r8
   1bfca:	465e      	mov	r6, fp
   1bfcc:	4692      	mov	sl, r2
   1bfce:	4698      	mov	r8, r3
   1bfd0:	9b06      	ldr	r3, [sp, #24]
   1bfd2:	0030      	movs	r0, r6
   1bfd4:	0019      	movs	r1, r3
   1bfd6:	4699      	mov	r9, r3
   1bfd8:	f7ff fb1c 	bl	1b614 <quorem>
   1bfdc:	0003      	movs	r3, r0
   1bfde:	900b      	str	r0, [sp, #44]	; 0x2c
   1bfe0:	3330      	adds	r3, #48	; 0x30
   1bfe2:	0029      	movs	r1, r5
   1bfe4:	0030      	movs	r0, r6
   1bfe6:	9304      	str	r3, [sp, #16]
   1bfe8:	f001 fe32 	bl	1dc50 <__mcmp>
   1bfec:	4649      	mov	r1, r9
   1bfee:	0004      	movs	r4, r0
   1bff0:	4642      	mov	r2, r8
   1bff2:	0038      	movs	r0, r7
   1bff4:	f001 fe46 	bl	1dc84 <__mdiff>
   1bff8:	68c3      	ldr	r3, [r0, #12]
   1bffa:	4681      	mov	r9, r0
   1bffc:	2b00      	cmp	r3, #0
   1bffe:	d000      	beq.n	1c002 <_dtoa_r+0x89a>
   1c000:	e11e      	b.n	1c240 <_dtoa_r+0xad8>
   1c002:	0001      	movs	r1, r0
   1c004:	0030      	movs	r0, r6
   1c006:	f001 fe23 	bl	1dc50 <__mcmp>
   1c00a:	4683      	mov	fp, r0
   1c00c:	4649      	mov	r1, r9
   1c00e:	0038      	movs	r0, r7
   1c010:	f001 fc12 	bl	1d838 <_Bfree>
   1c014:	465b      	mov	r3, fp
   1c016:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c018:	4313      	orrs	r3, r2
   1c01a:	d103      	bne.n	1c024 <_dtoa_r+0x8bc>
   1c01c:	9b07      	ldr	r3, [sp, #28]
   1c01e:	2b00      	cmp	r3, #0
   1c020:	d100      	bne.n	1c024 <_dtoa_r+0x8bc>
   1c022:	e306      	b.n	1c632 <_dtoa_r+0xeca>
   1c024:	2c00      	cmp	r4, #0
   1c026:	da00      	bge.n	1c02a <_dtoa_r+0x8c2>
   1c028:	e1a8      	b.n	1c37c <_dtoa_r+0xc14>
   1c02a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c02c:	431c      	orrs	r4, r3
   1c02e:	d103      	bne.n	1c038 <_dtoa_r+0x8d0>
   1c030:	9b07      	ldr	r3, [sp, #28]
   1c032:	2b00      	cmp	r3, #0
   1c034:	d100      	bne.n	1c038 <_dtoa_r+0x8d0>
   1c036:	e1a1      	b.n	1c37c <_dtoa_r+0xc14>
   1c038:	465b      	mov	r3, fp
   1c03a:	2b00      	cmp	r3, #0
   1c03c:	dd00      	ble.n	1c040 <_dtoa_r+0x8d8>
   1c03e:	e282      	b.n	1c546 <_dtoa_r+0xdde>
   1c040:	4669      	mov	r1, sp
   1c042:	4652      	mov	r2, sl
   1c044:	4653      	mov	r3, sl
   1c046:	7c09      	ldrb	r1, [r1, #16]
   1c048:	1c5c      	adds	r4, r3, #1
   1c04a:	7011      	strb	r1, [r2, #0]
   1c04c:	9a08      	ldr	r2, [sp, #32]
   1c04e:	4552      	cmp	r2, sl
   1c050:	d100      	bne.n	1c054 <_dtoa_r+0x8ec>
   1c052:	e28a      	b.n	1c56a <_dtoa_r+0xe02>
   1c054:	0031      	movs	r1, r6
   1c056:	2300      	movs	r3, #0
   1c058:	220a      	movs	r2, #10
   1c05a:	0038      	movs	r0, r7
   1c05c:	f001 fbf6 	bl	1d84c <__multadd>
   1c060:	2300      	movs	r3, #0
   1c062:	0006      	movs	r6, r0
   1c064:	220a      	movs	r2, #10
   1c066:	0029      	movs	r1, r5
   1c068:	0038      	movs	r0, r7
   1c06a:	4545      	cmp	r5, r8
   1c06c:	d100      	bne.n	1c070 <_dtoa_r+0x908>
   1c06e:	e0e1      	b.n	1c234 <_dtoa_r+0xacc>
   1c070:	f001 fbec 	bl	1d84c <__multadd>
   1c074:	4641      	mov	r1, r8
   1c076:	0005      	movs	r5, r0
   1c078:	2300      	movs	r3, #0
   1c07a:	220a      	movs	r2, #10
   1c07c:	0038      	movs	r0, r7
   1c07e:	f001 fbe5 	bl	1d84c <__multadd>
   1c082:	46a2      	mov	sl, r4
   1c084:	4680      	mov	r8, r0
   1c086:	e7a3      	b.n	1bfd0 <_dtoa_r+0x868>
   1c088:	201c      	movs	r0, #28
   1c08a:	9b06      	ldr	r3, [sp, #24]
   1c08c:	469c      	mov	ip, r3
   1c08e:	4484      	add	ip, r0
   1c090:	4663      	mov	r3, ip
   1c092:	9306      	str	r3, [sp, #24]
   1c094:	9b08      	ldr	r3, [sp, #32]
   1c096:	469c      	mov	ip, r3
   1c098:	4484      	add	ip, r0
   1c09a:	4663      	mov	r3, ip
   1c09c:	9308      	str	r3, [sp, #32]
   1c09e:	9b04      	ldr	r3, [sp, #16]
   1c0a0:	469c      	mov	ip, r3
   1c0a2:	4484      	add	ip, r0
   1c0a4:	4663      	mov	r3, ip
   1c0a6:	9304      	str	r3, [sp, #16]
   1c0a8:	e754      	b.n	1bf54 <_dtoa_r+0x7ec>
   1c0aa:	4649      	mov	r1, r9
   1c0ac:	4658      	mov	r0, fp
   1c0ae:	f001 fdcf 	bl	1dc50 <__mcmp>
   1c0b2:	2800      	cmp	r0, #0
   1c0b4:	db00      	blt.n	1c0b8 <_dtoa_r+0x950>
   1c0b6:	e763      	b.n	1bf80 <_dtoa_r+0x818>
   1c0b8:	9b03      	ldr	r3, [sp, #12]
   1c0ba:	4659      	mov	r1, fp
   1c0bc:	3b01      	subs	r3, #1
   1c0be:	9303      	str	r3, [sp, #12]
   1c0c0:	220a      	movs	r2, #10
   1c0c2:	2300      	movs	r3, #0
   1c0c4:	4650      	mov	r0, sl
   1c0c6:	f001 fbc1 	bl	1d84c <__multadd>
   1c0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c0cc:	4683      	mov	fp, r0
   1c0ce:	2b00      	cmp	r3, #0
   1c0d0:	d000      	beq.n	1c0d4 <_dtoa_r+0x96c>
   1c0d2:	e2ca      	b.n	1c66a <_dtoa_r+0xf02>
   1c0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c0d6:	2b00      	cmp	r3, #0
   1c0d8:	dc00      	bgt.n	1c0dc <_dtoa_r+0x974>
   1c0da:	e2d8      	b.n	1c68e <_dtoa_r+0xf26>
   1c0dc:	9307      	str	r3, [sp, #28]
   1c0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c0e0:	465d      	mov	r5, fp
   1c0e2:	2400      	movs	r4, #0
   1c0e4:	9f07      	ldr	r7, [sp, #28]
   1c0e6:	469b      	mov	fp, r3
   1c0e8:	e006      	b.n	1c0f8 <_dtoa_r+0x990>
   1c0ea:	0029      	movs	r1, r5
   1c0ec:	2300      	movs	r3, #0
   1c0ee:	220a      	movs	r2, #10
   1c0f0:	4650      	mov	r0, sl
   1c0f2:	f001 fbab 	bl	1d84c <__multadd>
   1c0f6:	0005      	movs	r5, r0
   1c0f8:	4649      	mov	r1, r9
   1c0fa:	0028      	movs	r0, r5
   1c0fc:	f7ff fa8a 	bl	1b614 <quorem>
   1c100:	465b      	mov	r3, fp
   1c102:	3030      	adds	r0, #48	; 0x30
   1c104:	5518      	strb	r0, [r3, r4]
   1c106:	3401      	adds	r4, #1
   1c108:	42bc      	cmp	r4, r7
   1c10a:	dbee      	blt.n	1c0ea <_dtoa_r+0x982>
   1c10c:	46ab      	mov	fp, r5
   1c10e:	0006      	movs	r6, r0
   1c110:	9c07      	ldr	r4, [sp, #28]
   1c112:	2c00      	cmp	r4, #0
   1c114:	dc00      	bgt.n	1c118 <_dtoa_r+0x9b0>
   1c116:	e237      	b.n	1c588 <_dtoa_r+0xe20>
   1c118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c11a:	2700      	movs	r7, #0
   1c11c:	469c      	mov	ip, r3
   1c11e:	4464      	add	r4, ip
   1c120:	4659      	mov	r1, fp
   1c122:	2201      	movs	r2, #1
   1c124:	4650      	mov	r0, sl
   1c126:	f001 fd33 	bl	1db90 <__lshift>
   1c12a:	4649      	mov	r1, r9
   1c12c:	4683      	mov	fp, r0
   1c12e:	f001 fd8f 	bl	1dc50 <__mcmp>
   1c132:	2800      	cmp	r0, #0
   1c134:	dc00      	bgt.n	1c138 <_dtoa_r+0x9d0>
   1c136:	e144      	b.n	1c3c2 <_dtoa_r+0xc5a>
   1c138:	1e65      	subs	r5, r4, #1
   1c13a:	782b      	ldrb	r3, [r5, #0]
   1c13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c13e:	e006      	b.n	1c14e <_dtoa_r+0x9e6>
   1c140:	4295      	cmp	r5, r2
   1c142:	d100      	bne.n	1c146 <_dtoa_r+0x9de>
   1c144:	e0b1      	b.n	1c2aa <_dtoa_r+0xb42>
   1c146:	3c02      	subs	r4, #2
   1c148:	7823      	ldrb	r3, [r4, #0]
   1c14a:	002c      	movs	r4, r5
   1c14c:	3d01      	subs	r5, #1
   1c14e:	2b39      	cmp	r3, #57	; 0x39
   1c150:	d0f6      	beq.n	1c140 <_dtoa_r+0x9d8>
   1c152:	3301      	adds	r3, #1
   1c154:	702b      	strb	r3, [r5, #0]
   1c156:	4649      	mov	r1, r9
   1c158:	4650      	mov	r0, sl
   1c15a:	f001 fb6d 	bl	1d838 <_Bfree>
   1c15e:	4643      	mov	r3, r8
   1c160:	2b00      	cmp	r3, #0
   1c162:	d100      	bne.n	1c166 <_dtoa_r+0x9fe>
   1c164:	e52f      	b.n	1bbc6 <_dtoa_r+0x45e>
   1c166:	2f00      	cmp	r7, #0
   1c168:	d005      	beq.n	1c176 <_dtoa_r+0xa0e>
   1c16a:	4547      	cmp	r7, r8
   1c16c:	d003      	beq.n	1c176 <_dtoa_r+0xa0e>
   1c16e:	0039      	movs	r1, r7
   1c170:	4650      	mov	r0, sl
   1c172:	f001 fb61 	bl	1d838 <_Bfree>
   1c176:	4641      	mov	r1, r8
   1c178:	4650      	mov	r0, sl
   1c17a:	f001 fb5d 	bl	1d838 <_Bfree>
   1c17e:	e522      	b.n	1bbc6 <_dtoa_r+0x45e>
   1c180:	0013      	movs	r3, r2
   1c182:	e675      	b.n	1be70 <_dtoa_r+0x708>
   1c184:	2e00      	cmp	r6, #0
   1c186:	d000      	beq.n	1c18a <_dtoa_r+0xa22>
   1c188:	e6ab      	b.n	1bee2 <_dtoa_r+0x77a>
   1c18a:	033b      	lsls	r3, r7, #12
   1c18c:	2400      	movs	r4, #0
   1c18e:	2b00      	cmp	r3, #0
   1c190:	d000      	beq.n	1c194 <_dtoa_r+0xa2c>
   1c192:	e6bf      	b.n	1bf14 <_dtoa_r+0x7ac>
   1c194:	4bba      	ldr	r3, [pc, #744]	; (1c480 <_dtoa_r+0xd18>)
   1c196:	423b      	tst	r3, r7
   1c198:	d100      	bne.n	1c19c <_dtoa_r+0xa34>
   1c19a:	e6bb      	b.n	1bf14 <_dtoa_r+0x7ac>
   1c19c:	9b06      	ldr	r3, [sp, #24]
   1c19e:	3401      	adds	r4, #1
   1c1a0:	3301      	adds	r3, #1
   1c1a2:	9306      	str	r3, [sp, #24]
   1c1a4:	9b04      	ldr	r3, [sp, #16]
   1c1a6:	3301      	adds	r3, #1
   1c1a8:	9304      	str	r3, [sp, #16]
   1c1aa:	e6b3      	b.n	1bf14 <_dtoa_r+0x7ac>
   1c1ac:	2301      	movs	r3, #1
   1c1ae:	930b      	str	r3, [sp, #44]	; 0x2c
   1c1b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	dc00      	bgt.n	1c1b8 <_dtoa_r+0xa50>
   1c1b6:	e0d1      	b.n	1c35c <_dtoa_r+0xbf4>
   1c1b8:	001d      	movs	r5, r3
   1c1ba:	4698      	mov	r8, r3
   1c1bc:	930e      	str	r3, [sp, #56]	; 0x38
   1c1be:	9307      	str	r3, [sp, #28]
   1c1c0:	f7ff fbc8 	bl	1b954 <_dtoa_r+0x1ec>
   1c1c4:	9b07      	ldr	r3, [sp, #28]
   1c1c6:	2b00      	cmp	r3, #0
   1c1c8:	dd00      	ble.n	1c1cc <_dtoa_r+0xa64>
   1c1ca:	e553      	b.n	1bc74 <_dtoa_r+0x50c>
   1c1cc:	d000      	beq.n	1c1d0 <_dtoa_r+0xa68>
   1c1ce:	e0ad      	b.n	1c32c <_dtoa_r+0xbc4>
   1c1d0:	9804      	ldr	r0, [sp, #16]
   1c1d2:	9905      	ldr	r1, [sp, #20]
   1c1d4:	2200      	movs	r2, #0
   1c1d6:	4bab      	ldr	r3, [pc, #684]	; (1c484 <_dtoa_r+0xd1c>)
   1c1d8:	f7fc fe14 	bl	18e04 <__aeabi_dmul>
   1c1dc:	003b      	movs	r3, r7
   1c1de:	0032      	movs	r2, r6
   1c1e0:	f7fb fbe2 	bl	179a8 <__aeabi_dcmpge>
   1c1e4:	2300      	movs	r3, #0
   1c1e6:	4699      	mov	r9, r3
   1c1e8:	4698      	mov	r8, r3
   1c1ea:	2800      	cmp	r0, #0
   1c1ec:	d055      	beq.n	1c29a <_dtoa_r+0xb32>
   1c1ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c1f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c1f2:	43db      	mvns	r3, r3
   1c1f4:	9303      	str	r3, [sp, #12]
   1c1f6:	4649      	mov	r1, r9
   1c1f8:	4650      	mov	r0, sl
   1c1fa:	f001 fb1d 	bl	1d838 <_Bfree>
   1c1fe:	4643      	mov	r3, r8
   1c200:	2b00      	cmp	r3, #0
   1c202:	d100      	bne.n	1c206 <_dtoa_r+0xa9e>
   1c204:	e4df      	b.n	1bbc6 <_dtoa_r+0x45e>
   1c206:	e7b6      	b.n	1c176 <_dtoa_r+0xa0e>
   1c208:	464a      	mov	r2, r9
   1c20a:	4659      	mov	r1, fp
   1c20c:	4650      	mov	r0, sl
   1c20e:	f001 fc5f 	bl	1dad0 <__pow5mult>
   1c212:	4683      	mov	fp, r0
   1c214:	e653      	b.n	1bebe <_dtoa_r+0x756>
   1c216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c218:	2a00      	cmp	r2, #0
   1c21a:	d100      	bne.n	1c21e <_dtoa_r+0xab6>
   1c21c:	e1b6      	b.n	1c58c <_dtoa_r+0xe24>
   1c21e:	4a9a      	ldr	r2, [pc, #616]	; (1c488 <_dtoa_r+0xd20>)
   1c220:	464c      	mov	r4, r9
   1c222:	4694      	mov	ip, r2
   1c224:	9a06      	ldr	r2, [sp, #24]
   1c226:	4463      	add	r3, ip
   1c228:	9208      	str	r2, [sp, #32]
   1c22a:	e5d5      	b.n	1bdd8 <_dtoa_r+0x670>
   1c22c:	2e00      	cmp	r6, #0
   1c22e:	d000      	beq.n	1c232 <_dtoa_r+0xaca>
   1c230:	e670      	b.n	1bf14 <_dtoa_r+0x7ac>
   1c232:	e7aa      	b.n	1c18a <_dtoa_r+0xa22>
   1c234:	f001 fb0a 	bl	1d84c <__multadd>
   1c238:	46a2      	mov	sl, r4
   1c23a:	0005      	movs	r5, r0
   1c23c:	4680      	mov	r8, r0
   1c23e:	e6c7      	b.n	1bfd0 <_dtoa_r+0x868>
   1c240:	2301      	movs	r3, #1
   1c242:	469b      	mov	fp, r3
   1c244:	e6e2      	b.n	1c00c <_dtoa_r+0x8a4>
   1c246:	2300      	movs	r3, #0
   1c248:	930b      	str	r3, [sp, #44]	; 0x2c
   1c24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c24c:	2b02      	cmp	r3, #2
   1c24e:	d0af      	beq.n	1c1b0 <_dtoa_r+0xa48>
   1c250:	2400      	movs	r4, #0
   1c252:	4653      	mov	r3, sl
   1c254:	0021      	movs	r1, r4
   1c256:	645c      	str	r4, [r3, #68]	; 0x44
   1c258:	4650      	mov	r0, sl
   1c25a:	f001 fac5 	bl	1d7e8 <_Balloc>
   1c25e:	4653      	mov	r3, sl
   1c260:	6418      	str	r0, [r3, #64]	; 0x40
   1c262:	2301      	movs	r3, #1
   1c264:	425b      	negs	r3, r3
   1c266:	9307      	str	r3, [sp, #28]
   1c268:	930e      	str	r3, [sp, #56]	; 0x38
   1c26a:	3302      	adds	r3, #2
   1c26c:	900a      	str	r0, [sp, #40]	; 0x28
   1c26e:	9423      	str	r4, [sp, #140]	; 0x8c
   1c270:	930b      	str	r3, [sp, #44]	; 0x2c
   1c272:	e4ec      	b.n	1bc4e <_dtoa_r+0x4e6>
   1c274:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c276:	2b02      	cmp	r3, #2
   1c278:	dc00      	bgt.n	1c27c <_dtoa_r+0xb14>
   1c27a:	e685      	b.n	1bf88 <_dtoa_r+0x820>
   1c27c:	9b07      	ldr	r3, [sp, #28]
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d1b5      	bne.n	1c1ee <_dtoa_r+0xa86>
   1c282:	4649      	mov	r1, r9
   1c284:	2205      	movs	r2, #5
   1c286:	4650      	mov	r0, sl
   1c288:	f001 fae0 	bl	1d84c <__multadd>
   1c28c:	4681      	mov	r9, r0
   1c28e:	0001      	movs	r1, r0
   1c290:	4658      	mov	r0, fp
   1c292:	f001 fcdd 	bl	1dc50 <__mcmp>
   1c296:	2800      	cmp	r0, #0
   1c298:	dda9      	ble.n	1c1ee <_dtoa_r+0xa86>
   1c29a:	2331      	movs	r3, #49	; 0x31
   1c29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c29e:	7013      	strb	r3, [r2, #0]
   1c2a0:	9b03      	ldr	r3, [sp, #12]
   1c2a2:	1c54      	adds	r4, r2, #1
   1c2a4:	3301      	adds	r3, #1
   1c2a6:	9303      	str	r3, [sp, #12]
   1c2a8:	e7a5      	b.n	1c1f6 <_dtoa_r+0xa8e>
   1c2aa:	9b03      	ldr	r3, [sp, #12]
   1c2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c2ae:	3301      	adds	r3, #1
   1c2b0:	9303      	str	r3, [sp, #12]
   1c2b2:	2331      	movs	r3, #49	; 0x31
   1c2b4:	7013      	strb	r3, [r2, #0]
   1c2b6:	e74e      	b.n	1c156 <_dtoa_r+0x9ee>
   1c2b8:	2300      	movs	r3, #0
   1c2ba:	930b      	str	r3, [sp, #44]	; 0x2c
   1c2bc:	f7ff fb3d 	bl	1b93a <_dtoa_r+0x1d2>
   1c2c0:	9b06      	ldr	r3, [sp, #24]
   1c2c2:	465c      	mov	r4, fp
   1c2c4:	469b      	mov	fp, r3
   1c2c6:	9b07      	ldr	r3, [sp, #28]
   1c2c8:	469a      	mov	sl, r3
   1c2ca:	e47c      	b.n	1bbc6 <_dtoa_r+0x45e>
   1c2cc:	4640      	mov	r0, r8
   1c2ce:	f7fd fb63 	bl	19998 <__aeabi_i2d>
   1c2d2:	0032      	movs	r2, r6
   1c2d4:	003b      	movs	r3, r7
   1c2d6:	f7fc fd95 	bl	18e04 <__aeabi_dmul>
   1c2da:	2200      	movs	r2, #0
   1c2dc:	4b6b      	ldr	r3, [pc, #428]	; (1c48c <_dtoa_r+0xd24>)
   1c2de:	f7fb fe4d 	bl	17f7c <__aeabi_dadd>
   1c2e2:	4a6b      	ldr	r2, [pc, #428]	; (1c490 <_dtoa_r+0xd28>)
   1c2e4:	000b      	movs	r3, r1
   1c2e6:	4694      	mov	ip, r2
   1c2e8:	4463      	add	r3, ip
   1c2ea:	9008      	str	r0, [sp, #32]
   1c2ec:	9109      	str	r1, [sp, #36]	; 0x24
   1c2ee:	9309      	str	r3, [sp, #36]	; 0x24
   1c2f0:	2200      	movs	r2, #0
   1c2f2:	4b64      	ldr	r3, [pc, #400]	; (1c484 <_dtoa_r+0xd1c>)
   1c2f4:	0030      	movs	r0, r6
   1c2f6:	0039      	movs	r1, r7
   1c2f8:	f7fd f804 	bl	19304 <__aeabi_dsub>
   1c2fc:	9e08      	ldr	r6, [sp, #32]
   1c2fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1c300:	0032      	movs	r2, r6
   1c302:	003b      	movs	r3, r7
   1c304:	0004      	movs	r4, r0
   1c306:	000d      	movs	r5, r1
   1c308:	f7fb fb44 	bl	17994 <__aeabi_dcmpgt>
   1c30c:	2800      	cmp	r0, #0
   1c30e:	d000      	beq.n	1c312 <_dtoa_r+0xbaa>
   1c310:	e0b2      	b.n	1c478 <_dtoa_r+0xd10>
   1c312:	2080      	movs	r0, #128	; 0x80
   1c314:	0600      	lsls	r0, r0, #24
   1c316:	4684      	mov	ip, r0
   1c318:	0039      	movs	r1, r7
   1c31a:	4461      	add	r1, ip
   1c31c:	000b      	movs	r3, r1
   1c31e:	0032      	movs	r2, r6
   1c320:	0020      	movs	r0, r4
   1c322:	0029      	movs	r1, r5
   1c324:	f7fb fb22 	bl	1796c <__aeabi_dcmplt>
   1c328:	2800      	cmp	r0, #0
   1c32a:	d057      	beq.n	1c3dc <_dtoa_r+0xc74>
   1c32c:	2300      	movs	r3, #0
   1c32e:	4699      	mov	r9, r3
   1c330:	4698      	mov	r8, r3
   1c332:	e75c      	b.n	1c1ee <_dtoa_r+0xa86>
   1c334:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c336:	f7ff fa4c 	bl	1b7d2 <_dtoa_r+0x6a>
   1c33a:	1ae2      	subs	r2, r4, r3
   1c33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c33e:	46a1      	mov	r9, r4
   1c340:	469c      	mov	ip, r3
   1c342:	4494      	add	ip, r2
   1c344:	4663      	mov	r3, ip
   1c346:	2400      	movs	r4, #0
   1c348:	930d      	str	r3, [sp, #52]	; 0x34
   1c34a:	e53e      	b.n	1bdca <_dtoa_r+0x662>
   1c34c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c350:	9208      	str	r2, [sp, #32]
   1c352:	9309      	str	r3, [sp, #36]	; 0x24
   1c354:	2302      	movs	r3, #2
   1c356:	4698      	mov	r8, r3
   1c358:	f7ff fb3a 	bl	1b9d0 <_dtoa_r+0x268>
   1c35c:	2300      	movs	r3, #0
   1c35e:	4652      	mov	r2, sl
   1c360:	2100      	movs	r1, #0
   1c362:	6453      	str	r3, [r2, #68]	; 0x44
   1c364:	4650      	mov	r0, sl
   1c366:	f001 fa3f 	bl	1d7e8 <_Balloc>
   1c36a:	4653      	mov	r3, sl
   1c36c:	6418      	str	r0, [r3, #64]	; 0x40
   1c36e:	2301      	movs	r3, #1
   1c370:	900a      	str	r0, [sp, #40]	; 0x28
   1c372:	9307      	str	r3, [sp, #28]
   1c374:	9323      	str	r3, [sp, #140]	; 0x8c
   1c376:	930e      	str	r3, [sp, #56]	; 0x38
   1c378:	f7ff fb07 	bl	1b98a <_dtoa_r+0x222>
   1c37c:	4643      	mov	r3, r8
   1c37e:	930c      	str	r3, [sp, #48]	; 0x30
   1c380:	465b      	mov	r3, fp
   1c382:	9a06      	ldr	r2, [sp, #24]
   1c384:	46a8      	mov	r8, r5
   1c386:	46b3      	mov	fp, r6
   1c388:	4655      	mov	r5, sl
   1c38a:	9e04      	ldr	r6, [sp, #16]
   1c38c:	4691      	mov	r9, r2
   1c38e:	46ba      	mov	sl, r7
   1c390:	2b00      	cmp	r3, #0
   1c392:	dd10      	ble.n	1c3b6 <_dtoa_r+0xc4e>
   1c394:	4659      	mov	r1, fp
   1c396:	2201      	movs	r2, #1
   1c398:	0038      	movs	r0, r7
   1c39a:	f001 fbf9 	bl	1db90 <__lshift>
   1c39e:	4649      	mov	r1, r9
   1c3a0:	4683      	mov	fp, r0
   1c3a2:	f001 fc55 	bl	1dc50 <__mcmp>
   1c3a6:	2800      	cmp	r0, #0
   1c3a8:	dc00      	bgt.n	1c3ac <_dtoa_r+0xc44>
   1c3aa:	e157      	b.n	1c65c <_dtoa_r+0xef4>
   1c3ac:	2e39      	cmp	r6, #57	; 0x39
   1c3ae:	d100      	bne.n	1c3b2 <_dtoa_r+0xc4a>
   1c3b0:	e122      	b.n	1c5f8 <_dtoa_r+0xe90>
   1c3b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1c3b4:	3631      	adds	r6, #49	; 0x31
   1c3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c3b8:	4647      	mov	r7, r8
   1c3ba:	1c6c      	adds	r4, r5, #1
   1c3bc:	702e      	strb	r6, [r5, #0]
   1c3be:	4698      	mov	r8, r3
   1c3c0:	e6c9      	b.n	1c156 <_dtoa_r+0x9ee>
   1c3c2:	2800      	cmp	r0, #0
   1c3c4:	d103      	bne.n	1c3ce <_dtoa_r+0xc66>
   1c3c6:	07f3      	lsls	r3, r6, #31
   1c3c8:	d501      	bpl.n	1c3ce <_dtoa_r+0xc66>
   1c3ca:	e6b5      	b.n	1c138 <_dtoa_r+0x9d0>
   1c3cc:	001c      	movs	r4, r3
   1c3ce:	1e63      	subs	r3, r4, #1
   1c3d0:	781a      	ldrb	r2, [r3, #0]
   1c3d2:	2a30      	cmp	r2, #48	; 0x30
   1c3d4:	d0fa      	beq.n	1c3cc <_dtoa_r+0xc64>
   1c3d6:	e6be      	b.n	1c156 <_dtoa_r+0x9ee>
   1c3d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c3da:	4699      	mov	r9, r3
   1c3dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1c3de:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1c3e0:	e435      	b.n	1bc4e <_dtoa_r+0x4e6>
   1c3e2:	2501      	movs	r5, #1
   1c3e4:	f7ff fab4 	bl	1b950 <_dtoa_r+0x1e8>
   1c3e8:	9b03      	ldr	r3, [sp, #12]
   1c3ea:	2b00      	cmp	r3, #0
   1c3ec:	d100      	bne.n	1c3f0 <_dtoa_r+0xc88>
   1c3ee:	e0d4      	b.n	1c59a <_dtoa_r+0xe32>
   1c3f0:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c3f2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c3f4:	425c      	negs	r4, r3
   1c3f6:	230f      	movs	r3, #15
   1c3f8:	4a26      	ldr	r2, [pc, #152]	; (1c494 <_dtoa_r+0xd2c>)
   1c3fa:	4023      	ands	r3, r4
   1c3fc:	00db      	lsls	r3, r3, #3
   1c3fe:	18d3      	adds	r3, r2, r3
   1c400:	681a      	ldr	r2, [r3, #0]
   1c402:	685b      	ldr	r3, [r3, #4]
   1c404:	f7fc fcfe 	bl	18e04 <__aeabi_dmul>
   1c408:	1124      	asrs	r4, r4, #4
   1c40a:	0006      	movs	r6, r0
   1c40c:	000f      	movs	r7, r1
   1c40e:	2c00      	cmp	r4, #0
   1c410:	d100      	bne.n	1c414 <_dtoa_r+0xcac>
   1c412:	e149      	b.n	1c6a8 <_dtoa_r+0xf40>
   1c414:	2302      	movs	r3, #2
   1c416:	4698      	mov	r8, r3
   1c418:	4d1f      	ldr	r5, [pc, #124]	; (1c498 <_dtoa_r+0xd30>)
   1c41a:	2301      	movs	r3, #1
   1c41c:	4223      	tst	r3, r4
   1c41e:	d009      	beq.n	1c434 <_dtoa_r+0xccc>
   1c420:	469c      	mov	ip, r3
   1c422:	682a      	ldr	r2, [r5, #0]
   1c424:	686b      	ldr	r3, [r5, #4]
   1c426:	0030      	movs	r0, r6
   1c428:	0039      	movs	r1, r7
   1c42a:	44e0      	add	r8, ip
   1c42c:	f7fc fcea 	bl	18e04 <__aeabi_dmul>
   1c430:	0006      	movs	r6, r0
   1c432:	000f      	movs	r7, r1
   1c434:	1064      	asrs	r4, r4, #1
   1c436:	3508      	adds	r5, #8
   1c438:	2c00      	cmp	r4, #0
   1c43a:	d1ee      	bne.n	1c41a <_dtoa_r+0xcb2>
   1c43c:	f7ff fae4 	bl	1ba08 <_dtoa_r+0x2a0>
   1c440:	9b03      	ldr	r3, [sp, #12]
   1c442:	2730      	movs	r7, #48	; 0x30
   1c444:	3301      	adds	r3, #1
   1c446:	9303      	str	r3, [sp, #12]
   1c448:	2330      	movs	r3, #48	; 0x30
   1c44a:	702b      	strb	r3, [r5, #0]
   1c44c:	e4ac      	b.n	1bda8 <_dtoa_r+0x640>
   1c44e:	6859      	ldr	r1, [r3, #4]
   1c450:	4650      	mov	r0, sl
   1c452:	f001 f9c9 	bl	1d7e8 <_Balloc>
   1c456:	4643      	mov	r3, r8
   1c458:	4641      	mov	r1, r8
   1c45a:	0004      	movs	r4, r0
   1c45c:	691b      	ldr	r3, [r3, #16]
   1c45e:	310c      	adds	r1, #12
   1c460:	1c9a      	adds	r2, r3, #2
   1c462:	0092      	lsls	r2, r2, #2
   1c464:	300c      	adds	r0, #12
   1c466:	f001 f91d 	bl	1d6a4 <memcpy>
   1c46a:	2201      	movs	r2, #1
   1c46c:	0021      	movs	r1, r4
   1c46e:	4650      	mov	r0, sl
   1c470:	f001 fb8e 	bl	1db90 <__lshift>
   1c474:	900c      	str	r0, [sp, #48]	; 0x30
   1c476:	e599      	b.n	1bfac <_dtoa_r+0x844>
   1c478:	2300      	movs	r3, #0
   1c47a:	4699      	mov	r9, r3
   1c47c:	4698      	mov	r8, r3
   1c47e:	e70c      	b.n	1c29a <_dtoa_r+0xb32>
   1c480:	7ff00000 	.word	0x7ff00000
   1c484:	40140000 	.word	0x40140000
   1c488:	00000433 	.word	0x00000433
   1c48c:	401c0000 	.word	0x401c0000
   1c490:	fcc00000 	.word	0xfcc00000
   1c494:	0001fe90 	.word	0x0001fe90
   1c498:	0001fe68 	.word	0x0001fe68
   1c49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c49e:	498f      	ldr	r1, [pc, #572]	; (1c6dc <_dtoa_r+0xf74>)
   1c4a0:	3b01      	subs	r3, #1
   1c4a2:	00db      	lsls	r3, r3, #3
   1c4a4:	18c9      	adds	r1, r1, r3
   1c4a6:	6808      	ldr	r0, [r1, #0]
   1c4a8:	6849      	ldr	r1, [r1, #4]
   1c4aa:	9a08      	ldr	r2, [sp, #32]
   1c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c4ae:	f7fc fca9 	bl	18e04 <__aeabi_dmul>
   1c4b2:	9014      	str	r0, [sp, #80]	; 0x50
   1c4b4:	9115      	str	r1, [sp, #84]	; 0x54
   1c4b6:	0039      	movs	r1, r7
   1c4b8:	0030      	movs	r0, r6
   1c4ba:	f7fd fa39 	bl	19930 <__aeabi_d2iz>
   1c4be:	0005      	movs	r5, r0
   1c4c0:	f7fd fa6a 	bl	19998 <__aeabi_i2d>
   1c4c4:	0002      	movs	r2, r0
   1c4c6:	000b      	movs	r3, r1
   1c4c8:	0030      	movs	r0, r6
   1c4ca:	0039      	movs	r1, r7
   1c4cc:	f7fc ff1a 	bl	19304 <__aeabi_dsub>
   1c4d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c4d2:	9008      	str	r0, [sp, #32]
   1c4d4:	9109      	str	r1, [sp, #36]	; 0x24
   1c4d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c4d8:	001a      	movs	r2, r3
   1c4da:	468c      	mov	ip, r1
   1c4dc:	3530      	adds	r5, #48	; 0x30
   1c4de:	4462      	add	r2, ip
   1c4e0:	1c4c      	adds	r4, r1, #1
   1c4e2:	700d      	strb	r5, [r1, #0]
   1c4e4:	4690      	mov	r8, r2
   1c4e6:	2b01      	cmp	r3, #1
   1c4e8:	d01b      	beq.n	1c522 <_dtoa_r+0xdba>
   1c4ea:	9808      	ldr	r0, [sp, #32]
   1c4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c4ee:	0025      	movs	r5, r4
   1c4f0:	2200      	movs	r2, #0
   1c4f2:	4b7b      	ldr	r3, [pc, #492]	; (1c6e0 <_dtoa_r+0xf78>)
   1c4f4:	f7fc fc86 	bl	18e04 <__aeabi_dmul>
   1c4f8:	000f      	movs	r7, r1
   1c4fa:	0006      	movs	r6, r0
   1c4fc:	f7fd fa18 	bl	19930 <__aeabi_d2iz>
   1c500:	0004      	movs	r4, r0
   1c502:	f7fd fa49 	bl	19998 <__aeabi_i2d>
   1c506:	3430      	adds	r4, #48	; 0x30
   1c508:	0002      	movs	r2, r0
   1c50a:	000b      	movs	r3, r1
   1c50c:	0030      	movs	r0, r6
   1c50e:	0039      	movs	r1, r7
   1c510:	f7fc fef8 	bl	19304 <__aeabi_dsub>
   1c514:	702c      	strb	r4, [r5, #0]
   1c516:	3501      	adds	r5, #1
   1c518:	45a8      	cmp	r8, r5
   1c51a:	d1e9      	bne.n	1c4f0 <_dtoa_r+0xd88>
   1c51c:	4644      	mov	r4, r8
   1c51e:	9008      	str	r0, [sp, #32]
   1c520:	9109      	str	r1, [sp, #36]	; 0x24
   1c522:	9814      	ldr	r0, [sp, #80]	; 0x50
   1c524:	9915      	ldr	r1, [sp, #84]	; 0x54
   1c526:	2200      	movs	r2, #0
   1c528:	4b6e      	ldr	r3, [pc, #440]	; (1c6e4 <_dtoa_r+0xf7c>)
   1c52a:	f7fb fd27 	bl	17f7c <__aeabi_dadd>
   1c52e:	9a08      	ldr	r2, [sp, #32]
   1c530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c532:	f7fb fa1b 	bl	1796c <__aeabi_dcmplt>
   1c536:	2800      	cmp	r0, #0
   1c538:	d067      	beq.n	1c60a <_dtoa_r+0xea2>
   1c53a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c53c:	1e65      	subs	r5, r4, #1
   1c53e:	9303      	str	r3, [sp, #12]
   1c540:	782f      	ldrb	r7, [r5, #0]
   1c542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c544:	e42e      	b.n	1bda4 <_dtoa_r+0x63c>
   1c546:	4643      	mov	r3, r8
   1c548:	46b3      	mov	fp, r6
   1c54a:	930c      	str	r3, [sp, #48]	; 0x30
   1c54c:	9e04      	ldr	r6, [sp, #16]
   1c54e:	9b06      	ldr	r3, [sp, #24]
   1c550:	46a8      	mov	r8, r5
   1c552:	4699      	mov	r9, r3
   1c554:	4655      	mov	r5, sl
   1c556:	46ba      	mov	sl, r7
   1c558:	2e39      	cmp	r6, #57	; 0x39
   1c55a:	d04d      	beq.n	1c5f8 <_dtoa_r+0xe90>
   1c55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c55e:	3601      	adds	r6, #1
   1c560:	4647      	mov	r7, r8
   1c562:	1c6c      	adds	r4, r5, #1
   1c564:	702e      	strb	r6, [r5, #0]
   1c566:	4698      	mov	r8, r3
   1c568:	e5f5      	b.n	1c156 <_dtoa_r+0x9ee>
   1c56a:	4642      	mov	r2, r8
   1c56c:	9b06      	ldr	r3, [sp, #24]
   1c56e:	46b3      	mov	fp, r6
   1c570:	46ba      	mov	sl, r7
   1c572:	9e04      	ldr	r6, [sp, #16]
   1c574:	4699      	mov	r9, r3
   1c576:	002f      	movs	r7, r5
   1c578:	4690      	mov	r8, r2
   1c57a:	e5d1      	b.n	1c120 <_dtoa_r+0x9b8>
   1c57c:	9b06      	ldr	r3, [sp, #24]
   1c57e:	9a07      	ldr	r2, [sp, #28]
   1c580:	1a9b      	subs	r3, r3, r2
   1c582:	9308      	str	r3, [sp, #32]
   1c584:	2300      	movs	r3, #0
   1c586:	e427      	b.n	1bdd8 <_dtoa_r+0x670>
   1c588:	2401      	movs	r4, #1
   1c58a:	e5c5      	b.n	1c118 <_dtoa_r+0x9b0>
   1c58c:	2336      	movs	r3, #54	; 0x36
   1c58e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1c590:	464c      	mov	r4, r9
   1c592:	1a9b      	subs	r3, r3, r2
   1c594:	9a06      	ldr	r2, [sp, #24]
   1c596:	9208      	str	r2, [sp, #32]
   1c598:	e41e      	b.n	1bdd8 <_dtoa_r+0x670>
   1c59a:	2302      	movs	r3, #2
   1c59c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1c59e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1c5a0:	4698      	mov	r8, r3
   1c5a2:	f7ff fa31 	bl	1ba08 <_dtoa_r+0x2a0>
   1c5a6:	9b07      	ldr	r3, [sp, #28]
   1c5a8:	2b00      	cmp	r3, #0
   1c5aa:	d100      	bne.n	1c5ae <_dtoa_r+0xe46>
   1c5ac:	e68e      	b.n	1c2cc <_dtoa_r+0xb64>
   1c5ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1c5b0:	2c00      	cmp	r4, #0
   1c5b2:	dc00      	bgt.n	1c5b6 <_dtoa_r+0xe4e>
   1c5b4:	e712      	b.n	1c3dc <_dtoa_r+0xc74>
   1c5b6:	9b03      	ldr	r3, [sp, #12]
   1c5b8:	2200      	movs	r2, #0
   1c5ba:	3b01      	subs	r3, #1
   1c5bc:	9313      	str	r3, [sp, #76]	; 0x4c
   1c5be:	0030      	movs	r0, r6
   1c5c0:	4b47      	ldr	r3, [pc, #284]	; (1c6e0 <_dtoa_r+0xf78>)
   1c5c2:	0039      	movs	r1, r7
   1c5c4:	f7fc fc1e 	bl	18e04 <__aeabi_dmul>
   1c5c8:	0006      	movs	r6, r0
   1c5ca:	4640      	mov	r0, r8
   1c5cc:	000f      	movs	r7, r1
   1c5ce:	3001      	adds	r0, #1
   1c5d0:	f7fd f9e2 	bl	19998 <__aeabi_i2d>
   1c5d4:	0032      	movs	r2, r6
   1c5d6:	003b      	movs	r3, r7
   1c5d8:	f7fc fc14 	bl	18e04 <__aeabi_dmul>
   1c5dc:	2200      	movs	r2, #0
   1c5de:	4b42      	ldr	r3, [pc, #264]	; (1c6e8 <_dtoa_r+0xf80>)
   1c5e0:	f7fb fccc 	bl	17f7c <__aeabi_dadd>
   1c5e4:	4a41      	ldr	r2, [pc, #260]	; (1c6ec <_dtoa_r+0xf84>)
   1c5e6:	000b      	movs	r3, r1
   1c5e8:	4694      	mov	ip, r2
   1c5ea:	4463      	add	r3, ip
   1c5ec:	9008      	str	r0, [sp, #32]
   1c5ee:	9109      	str	r1, [sp, #36]	; 0x24
   1c5f0:	9412      	str	r4, [sp, #72]	; 0x48
   1c5f2:	9309      	str	r3, [sp, #36]	; 0x24
   1c5f4:	f7ff fa30 	bl	1ba58 <_dtoa_r+0x2f0>
   1c5f8:	2339      	movs	r3, #57	; 0x39
   1c5fa:	702b      	strb	r3, [r5, #0]
   1c5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c5fe:	4647      	mov	r7, r8
   1c600:	1c6c      	adds	r4, r5, #1
   1c602:	4698      	mov	r8, r3
   1c604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c606:	2339      	movs	r3, #57	; 0x39
   1c608:	e5a1      	b.n	1c14e <_dtoa_r+0x9e6>
   1c60a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c60c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1c60e:	2000      	movs	r0, #0
   1c610:	4934      	ldr	r1, [pc, #208]	; (1c6e4 <_dtoa_r+0xf7c>)
   1c612:	f7fc fe77 	bl	19304 <__aeabi_dsub>
   1c616:	9a08      	ldr	r2, [sp, #32]
   1c618:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c61a:	f7fb f9bb 	bl	17994 <__aeabi_dcmpgt>
   1c61e:	2800      	cmp	r0, #0
   1c620:	d101      	bne.n	1c626 <_dtoa_r+0xebe>
   1c622:	e6db      	b.n	1c3dc <_dtoa_r+0xc74>
   1c624:	001c      	movs	r4, r3
   1c626:	1e63      	subs	r3, r4, #1
   1c628:	781a      	ldrb	r2, [r3, #0]
   1c62a:	2a30      	cmp	r2, #48	; 0x30
   1c62c:	d0fa      	beq.n	1c624 <_dtoa_r+0xebc>
   1c62e:	f7ff fac8 	bl	1bbc2 <_dtoa_r+0x45a>
   1c632:	4643      	mov	r3, r8
   1c634:	46b3      	mov	fp, r6
   1c636:	930c      	str	r3, [sp, #48]	; 0x30
   1c638:	9e04      	ldr	r6, [sp, #16]
   1c63a:	9b06      	ldr	r3, [sp, #24]
   1c63c:	46a8      	mov	r8, r5
   1c63e:	4699      	mov	r9, r3
   1c640:	4655      	mov	r5, sl
   1c642:	46ba      	mov	sl, r7
   1c644:	2e39      	cmp	r6, #57	; 0x39
   1c646:	d0d7      	beq.n	1c5f8 <_dtoa_r+0xe90>
   1c648:	2c00      	cmp	r4, #0
   1c64a:	dd00      	ble.n	1c64e <_dtoa_r+0xee6>
   1c64c:	e6b1      	b.n	1c3b2 <_dtoa_r+0xc4a>
   1c64e:	e6b2      	b.n	1c3b6 <_dtoa_r+0xc4e>
   1c650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1c652:	464d      	mov	r5, r9
   1c654:	9203      	str	r2, [sp, #12]
   1c656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c658:	f7ff fba4 	bl	1bda4 <_dtoa_r+0x63c>
   1c65c:	2800      	cmp	r0, #0
   1c65e:	d000      	beq.n	1c662 <_dtoa_r+0xefa>
   1c660:	e6a9      	b.n	1c3b6 <_dtoa_r+0xc4e>
   1c662:	07f3      	lsls	r3, r6, #31
   1c664:	d400      	bmi.n	1c668 <_dtoa_r+0xf00>
   1c666:	e6a6      	b.n	1c3b6 <_dtoa_r+0xc4e>
   1c668:	e6a0      	b.n	1c3ac <_dtoa_r+0xc44>
   1c66a:	2300      	movs	r3, #0
   1c66c:	4641      	mov	r1, r8
   1c66e:	220a      	movs	r2, #10
   1c670:	4650      	mov	r0, sl
   1c672:	f001 f8eb 	bl	1d84c <__multadd>
   1c676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c678:	4680      	mov	r8, r0
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	dd01      	ble.n	1c682 <_dtoa_r+0xf1a>
   1c67e:	9307      	str	r3, [sp, #28]
   1c680:	e486      	b.n	1bf90 <_dtoa_r+0x828>
   1c682:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c684:	2b02      	cmp	r3, #2
   1c686:	dc1f      	bgt.n	1c6c8 <_dtoa_r+0xf60>
   1c688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c68a:	9307      	str	r3, [sp, #28]
   1c68c:	e480      	b.n	1bf90 <_dtoa_r+0x828>
   1c68e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c690:	2b02      	cmp	r3, #2
   1c692:	dc19      	bgt.n	1c6c8 <_dtoa_r+0xf60>
   1c694:	4649      	mov	r1, r9
   1c696:	f7fe ffbd 	bl	1b614 <quorem>
   1c69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c69c:	3030      	adds	r0, #48	; 0x30
   1c69e:	7018      	strb	r0, [r3, #0]
   1c6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c6a2:	0006      	movs	r6, r0
   1c6a4:	9307      	str	r3, [sp, #28]
   1c6a6:	e533      	b.n	1c110 <_dtoa_r+0x9a8>
   1c6a8:	2302      	movs	r3, #2
   1c6aa:	4698      	mov	r8, r3
   1c6ac:	f7ff f9ac 	bl	1ba08 <_dtoa_r+0x2a0>
   1c6b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c6b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c6b4:	9303      	str	r3, [sp, #12]
   1c6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c6b8:	001d      	movs	r5, r3
   1c6ba:	f7ff fb73 	bl	1bda4 <_dtoa_r+0x63c>
   1c6be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c6c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c6c2:	9303      	str	r3, [sp, #12]
   1c6c4:	f7ff fa7f 	bl	1bbc6 <_dtoa_r+0x45e>
   1c6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c6ca:	9307      	str	r3, [sp, #28]
   1c6cc:	e5d6      	b.n	1c27c <_dtoa_r+0xb14>
   1c6ce:	2b04      	cmp	r3, #4
   1c6d0:	d100      	bne.n	1c6d4 <_dtoa_r+0xf6c>
   1c6d2:	e43f      	b.n	1bf54 <_dtoa_r+0x7ec>
   1c6d4:	233c      	movs	r3, #60	; 0x3c
   1c6d6:	1a18      	subs	r0, r3, r0
   1c6d8:	e4d7      	b.n	1c08a <_dtoa_r+0x922>
   1c6da:	46c0      	nop			; (mov r8, r8)
   1c6dc:	0001fe90 	.word	0x0001fe90
   1c6e0:	40240000 	.word	0x40240000
   1c6e4:	3fe00000 	.word	0x3fe00000
   1c6e8:	401c0000 	.word	0x401c0000
   1c6ec:	fcc00000 	.word	0xfcc00000

0001c6f0 <__sflush_r>:
   1c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6f2:	46c6      	mov	lr, r8
   1c6f4:	b500      	push	{lr}
   1c6f6:	230c      	movs	r3, #12
   1c6f8:	5eca      	ldrsh	r2, [r1, r3]
   1c6fa:	4680      	mov	r8, r0
   1c6fc:	b293      	uxth	r3, r2
   1c6fe:	000c      	movs	r4, r1
   1c700:	0719      	lsls	r1, r3, #28
   1c702:	d440      	bmi.n	1c786 <__sflush_r+0x96>
   1c704:	2380      	movs	r3, #128	; 0x80
   1c706:	011b      	lsls	r3, r3, #4
   1c708:	4313      	orrs	r3, r2
   1c70a:	6862      	ldr	r2, [r4, #4]
   1c70c:	81a3      	strh	r3, [r4, #12]
   1c70e:	2a00      	cmp	r2, #0
   1c710:	dc00      	bgt.n	1c714 <__sflush_r+0x24>
   1c712:	e070      	b.n	1c7f6 <__sflush_r+0x106>
   1c714:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1c716:	2e00      	cmp	r6, #0
   1c718:	d031      	beq.n	1c77e <__sflush_r+0x8e>
   1c71a:	4642      	mov	r2, r8
   1c71c:	4641      	mov	r1, r8
   1c71e:	6815      	ldr	r5, [r2, #0]
   1c720:	2200      	movs	r2, #0
   1c722:	b29b      	uxth	r3, r3
   1c724:	600a      	str	r2, [r1, #0]
   1c726:	04da      	lsls	r2, r3, #19
   1c728:	d400      	bmi.n	1c72c <__sflush_r+0x3c>
   1c72a:	e069      	b.n	1c800 <__sflush_r+0x110>
   1c72c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1c72e:	075b      	lsls	r3, r3, #29
   1c730:	d506      	bpl.n	1c740 <__sflush_r+0x50>
   1c732:	6863      	ldr	r3, [r4, #4]
   1c734:	1ad2      	subs	r2, r2, r3
   1c736:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c738:	2b00      	cmp	r3, #0
   1c73a:	d001      	beq.n	1c740 <__sflush_r+0x50>
   1c73c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c73e:	1ad2      	subs	r2, r2, r3
   1c740:	2300      	movs	r3, #0
   1c742:	69e1      	ldr	r1, [r4, #28]
   1c744:	4640      	mov	r0, r8
   1c746:	47b0      	blx	r6
   1c748:	1c43      	adds	r3, r0, #1
   1c74a:	d03d      	beq.n	1c7c8 <__sflush_r+0xd8>
   1c74c:	89a3      	ldrh	r3, [r4, #12]
   1c74e:	4a3a      	ldr	r2, [pc, #232]	; (1c838 <__sflush_r+0x148>)
   1c750:	4013      	ands	r3, r2
   1c752:	2200      	movs	r2, #0
   1c754:	6062      	str	r2, [r4, #4]
   1c756:	6922      	ldr	r2, [r4, #16]
   1c758:	b21b      	sxth	r3, r3
   1c75a:	81a3      	strh	r3, [r4, #12]
   1c75c:	6022      	str	r2, [r4, #0]
   1c75e:	04db      	lsls	r3, r3, #19
   1c760:	d447      	bmi.n	1c7f2 <__sflush_r+0x102>
   1c762:	4643      	mov	r3, r8
   1c764:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c766:	601d      	str	r5, [r3, #0]
   1c768:	2900      	cmp	r1, #0
   1c76a:	d008      	beq.n	1c77e <__sflush_r+0x8e>
   1c76c:	0023      	movs	r3, r4
   1c76e:	3340      	adds	r3, #64	; 0x40
   1c770:	4299      	cmp	r1, r3
   1c772:	d002      	beq.n	1c77a <__sflush_r+0x8a>
   1c774:	4640      	mov	r0, r8
   1c776:	f000 f967 	bl	1ca48 <_free_r>
   1c77a:	2300      	movs	r3, #0
   1c77c:	6323      	str	r3, [r4, #48]	; 0x30
   1c77e:	2000      	movs	r0, #0
   1c780:	bc04      	pop	{r2}
   1c782:	4690      	mov	r8, r2
   1c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c786:	6926      	ldr	r6, [r4, #16]
   1c788:	2e00      	cmp	r6, #0
   1c78a:	d0f8      	beq.n	1c77e <__sflush_r+0x8e>
   1c78c:	6822      	ldr	r2, [r4, #0]
   1c78e:	6026      	str	r6, [r4, #0]
   1c790:	1b95      	subs	r5, r2, r6
   1c792:	2200      	movs	r2, #0
   1c794:	079b      	lsls	r3, r3, #30
   1c796:	d100      	bne.n	1c79a <__sflush_r+0xaa>
   1c798:	6962      	ldr	r2, [r4, #20]
   1c79a:	60a2      	str	r2, [r4, #8]
   1c79c:	2d00      	cmp	r5, #0
   1c79e:	dc04      	bgt.n	1c7aa <__sflush_r+0xba>
   1c7a0:	e7ed      	b.n	1c77e <__sflush_r+0x8e>
   1c7a2:	1836      	adds	r6, r6, r0
   1c7a4:	1a2d      	subs	r5, r5, r0
   1c7a6:	2d00      	cmp	r5, #0
   1c7a8:	dde9      	ble.n	1c77e <__sflush_r+0x8e>
   1c7aa:	002b      	movs	r3, r5
   1c7ac:	0032      	movs	r2, r6
   1c7ae:	69e1      	ldr	r1, [r4, #28]
   1c7b0:	4640      	mov	r0, r8
   1c7b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1c7b4:	47b8      	blx	r7
   1c7b6:	2800      	cmp	r0, #0
   1c7b8:	dcf3      	bgt.n	1c7a2 <__sflush_r+0xb2>
   1c7ba:	2240      	movs	r2, #64	; 0x40
   1c7bc:	2001      	movs	r0, #1
   1c7be:	89a3      	ldrh	r3, [r4, #12]
   1c7c0:	4240      	negs	r0, r0
   1c7c2:	4313      	orrs	r3, r2
   1c7c4:	81a3      	strh	r3, [r4, #12]
   1c7c6:	e7db      	b.n	1c780 <__sflush_r+0x90>
   1c7c8:	4643      	mov	r3, r8
   1c7ca:	6819      	ldr	r1, [r3, #0]
   1c7cc:	291d      	cmp	r1, #29
   1c7ce:	d8f4      	bhi.n	1c7ba <__sflush_r+0xca>
   1c7d0:	4b1a      	ldr	r3, [pc, #104]	; (1c83c <__sflush_r+0x14c>)
   1c7d2:	2201      	movs	r2, #1
   1c7d4:	40cb      	lsrs	r3, r1
   1c7d6:	439a      	bics	r2, r3
   1c7d8:	d1ef      	bne.n	1c7ba <__sflush_r+0xca>
   1c7da:	89a3      	ldrh	r3, [r4, #12]
   1c7dc:	4e16      	ldr	r6, [pc, #88]	; (1c838 <__sflush_r+0x148>)
   1c7de:	6062      	str	r2, [r4, #4]
   1c7e0:	4033      	ands	r3, r6
   1c7e2:	6922      	ldr	r2, [r4, #16]
   1c7e4:	b21b      	sxth	r3, r3
   1c7e6:	81a3      	strh	r3, [r4, #12]
   1c7e8:	6022      	str	r2, [r4, #0]
   1c7ea:	04db      	lsls	r3, r3, #19
   1c7ec:	d5b9      	bpl.n	1c762 <__sflush_r+0x72>
   1c7ee:	2900      	cmp	r1, #0
   1c7f0:	d1b7      	bne.n	1c762 <__sflush_r+0x72>
   1c7f2:	6520      	str	r0, [r4, #80]	; 0x50
   1c7f4:	e7b5      	b.n	1c762 <__sflush_r+0x72>
   1c7f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1c7f8:	2a00      	cmp	r2, #0
   1c7fa:	dd00      	ble.n	1c7fe <__sflush_r+0x10e>
   1c7fc:	e78a      	b.n	1c714 <__sflush_r+0x24>
   1c7fe:	e7be      	b.n	1c77e <__sflush_r+0x8e>
   1c800:	2200      	movs	r2, #0
   1c802:	2301      	movs	r3, #1
   1c804:	69e1      	ldr	r1, [r4, #28]
   1c806:	4640      	mov	r0, r8
   1c808:	47b0      	blx	r6
   1c80a:	0002      	movs	r2, r0
   1c80c:	1c43      	adds	r3, r0, #1
   1c80e:	d002      	beq.n	1c816 <__sflush_r+0x126>
   1c810:	89a3      	ldrh	r3, [r4, #12]
   1c812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1c814:	e78b      	b.n	1c72e <__sflush_r+0x3e>
   1c816:	4643      	mov	r3, r8
   1c818:	681b      	ldr	r3, [r3, #0]
   1c81a:	2b00      	cmp	r3, #0
   1c81c:	d0f8      	beq.n	1c810 <__sflush_r+0x120>
   1c81e:	2b1d      	cmp	r3, #29
   1c820:	d001      	beq.n	1c826 <__sflush_r+0x136>
   1c822:	2b16      	cmp	r3, #22
   1c824:	d103      	bne.n	1c82e <__sflush_r+0x13e>
   1c826:	4643      	mov	r3, r8
   1c828:	2000      	movs	r0, #0
   1c82a:	601d      	str	r5, [r3, #0]
   1c82c:	e7a8      	b.n	1c780 <__sflush_r+0x90>
   1c82e:	2140      	movs	r1, #64	; 0x40
   1c830:	89a3      	ldrh	r3, [r4, #12]
   1c832:	430b      	orrs	r3, r1
   1c834:	81a3      	strh	r3, [r4, #12]
   1c836:	e7a3      	b.n	1c780 <__sflush_r+0x90>
   1c838:	fffff7ff 	.word	0xfffff7ff
   1c83c:	20400001 	.word	0x20400001

0001c840 <_fflush_r>:
   1c840:	b570      	push	{r4, r5, r6, lr}
   1c842:	0005      	movs	r5, r0
   1c844:	000c      	movs	r4, r1
   1c846:	2800      	cmp	r0, #0
   1c848:	d002      	beq.n	1c850 <_fflush_r+0x10>
   1c84a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c84c:	2b00      	cmp	r3, #0
   1c84e:	d016      	beq.n	1c87e <_fflush_r+0x3e>
   1c850:	220c      	movs	r2, #12
   1c852:	5ea3      	ldrsh	r3, [r4, r2]
   1c854:	2600      	movs	r6, #0
   1c856:	2b00      	cmp	r3, #0
   1c858:	d00f      	beq.n	1c87a <_fflush_r+0x3a>
   1c85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1c85c:	07d2      	lsls	r2, r2, #31
   1c85e:	d401      	bmi.n	1c864 <_fflush_r+0x24>
   1c860:	059b      	lsls	r3, r3, #22
   1c862:	d513      	bpl.n	1c88c <_fflush_r+0x4c>
   1c864:	0021      	movs	r1, r4
   1c866:	0028      	movs	r0, r5
   1c868:	f7ff ff42 	bl	1c6f0 <__sflush_r>
   1c86c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c86e:	0006      	movs	r6, r0
   1c870:	07db      	lsls	r3, r3, #31
   1c872:	d402      	bmi.n	1c87a <_fflush_r+0x3a>
   1c874:	89a3      	ldrh	r3, [r4, #12]
   1c876:	059b      	lsls	r3, r3, #22
   1c878:	d504      	bpl.n	1c884 <_fflush_r+0x44>
   1c87a:	0030      	movs	r0, r6
   1c87c:	bd70      	pop	{r4, r5, r6, pc}
   1c87e:	f000 f839 	bl	1c8f4 <__sinit>
   1c882:	e7e5      	b.n	1c850 <_fflush_r+0x10>
   1c884:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c886:	f000 fb89 	bl	1cf9c <__retarget_lock_release_recursive>
   1c88a:	e7f6      	b.n	1c87a <_fflush_r+0x3a>
   1c88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c88e:	f000 fb83 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1c892:	e7e7      	b.n	1c864 <_fflush_r+0x24>

0001c894 <_cleanup_r>:
   1c894:	b510      	push	{r4, lr}
   1c896:	4902      	ldr	r1, [pc, #8]	; (1c8a0 <_cleanup_r+0xc>)
   1c898:	f000 fb36 	bl	1cf08 <_fwalk_reent>
   1c89c:	bd10      	pop	{r4, pc}
   1c89e:	46c0      	nop			; (mov r8, r8)
   1c8a0:	0001e501 	.word	0x0001e501

0001c8a4 <std.isra.0>:
   1c8a4:	2300      	movs	r3, #0
   1c8a6:	b510      	push	{r4, lr}
   1c8a8:	0004      	movs	r4, r0
   1c8aa:	6003      	str	r3, [r0, #0]
   1c8ac:	6043      	str	r3, [r0, #4]
   1c8ae:	6083      	str	r3, [r0, #8]
   1c8b0:	8181      	strh	r1, [r0, #12]
   1c8b2:	6643      	str	r3, [r0, #100]	; 0x64
   1c8b4:	81c2      	strh	r2, [r0, #14]
   1c8b6:	6103      	str	r3, [r0, #16]
   1c8b8:	6143      	str	r3, [r0, #20]
   1c8ba:	6183      	str	r3, [r0, #24]
   1c8bc:	2208      	movs	r2, #8
   1c8be:	2100      	movs	r1, #0
   1c8c0:	305c      	adds	r0, #92	; 0x5c
   1c8c2:	f7fd f991 	bl	19be8 <memset>
   1c8c6:	0020      	movs	r0, r4
   1c8c8:	4b06      	ldr	r3, [pc, #24]	; (1c8e4 <std.isra.0+0x40>)
   1c8ca:	61e4      	str	r4, [r4, #28]
   1c8cc:	6223      	str	r3, [r4, #32]
   1c8ce:	4b06      	ldr	r3, [pc, #24]	; (1c8e8 <std.isra.0+0x44>)
   1c8d0:	3058      	adds	r0, #88	; 0x58
   1c8d2:	6263      	str	r3, [r4, #36]	; 0x24
   1c8d4:	4b05      	ldr	r3, [pc, #20]	; (1c8ec <std.isra.0+0x48>)
   1c8d6:	62a3      	str	r3, [r4, #40]	; 0x28
   1c8d8:	4b05      	ldr	r3, [pc, #20]	; (1c8f0 <std.isra.0+0x4c>)
   1c8da:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c8dc:	f000 fb58 	bl	1cf90 <__retarget_lock_init_recursive>
   1c8e0:	bd10      	pop	{r4, pc}
   1c8e2:	46c0      	nop			; (mov r8, r8)
   1c8e4:	0001e219 	.word	0x0001e219
   1c8e8:	0001e241 	.word	0x0001e241
   1c8ec:	0001e27d 	.word	0x0001e27d
   1c8f0:	0001e2a9 	.word	0x0001e2a9

0001c8f4 <__sinit>:
   1c8f4:	b570      	push	{r4, r5, r6, lr}
   1c8f6:	0004      	movs	r4, r0
   1c8f8:	4d14      	ldr	r5, [pc, #80]	; (1c94c <__sinit+0x58>)
   1c8fa:	0028      	movs	r0, r5
   1c8fc:	f000 fb4c 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1c900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c902:	2b00      	cmp	r3, #0
   1c904:	d11d      	bne.n	1c942 <__sinit+0x4e>
   1c906:	4a12      	ldr	r2, [pc, #72]	; (1c950 <__sinit+0x5c>)
   1c908:	2104      	movs	r1, #4
   1c90a:	63e2      	str	r2, [r4, #60]	; 0x3c
   1c90c:	22b8      	movs	r2, #184	; 0xb8
   1c90e:	0092      	lsls	r2, r2, #2
   1c910:	50a3      	str	r3, [r4, r2]
   1c912:	23b9      	movs	r3, #185	; 0xb9
   1c914:	2203      	movs	r2, #3
   1c916:	009b      	lsls	r3, r3, #2
   1c918:	50e2      	str	r2, [r4, r3]
   1c91a:	3308      	adds	r3, #8
   1c91c:	18e2      	adds	r2, r4, r3
   1c91e:	3b04      	subs	r3, #4
   1c920:	50e2      	str	r2, [r4, r3]
   1c922:	6860      	ldr	r0, [r4, #4]
   1c924:	2200      	movs	r2, #0
   1c926:	f7ff ffbd 	bl	1c8a4 <std.isra.0>
   1c92a:	2201      	movs	r2, #1
   1c92c:	2109      	movs	r1, #9
   1c92e:	68a0      	ldr	r0, [r4, #8]
   1c930:	f7ff ffb8 	bl	1c8a4 <std.isra.0>
   1c934:	2202      	movs	r2, #2
   1c936:	2112      	movs	r1, #18
   1c938:	68e0      	ldr	r0, [r4, #12]
   1c93a:	f7ff ffb3 	bl	1c8a4 <std.isra.0>
   1c93e:	2301      	movs	r3, #1
   1c940:	63a3      	str	r3, [r4, #56]	; 0x38
   1c942:	0028      	movs	r0, r5
   1c944:	f000 fb2a 	bl	1cf9c <__retarget_lock_release_recursive>
   1c948:	bd70      	pop	{r4, r5, r6, pc}
   1c94a:	46c0      	nop			; (mov r8, r8)
   1c94c:	20001d04 	.word	0x20001d04
   1c950:	0001c895 	.word	0x0001c895

0001c954 <__sfp_lock_acquire>:
   1c954:	b510      	push	{r4, lr}
   1c956:	4802      	ldr	r0, [pc, #8]	; (1c960 <__sfp_lock_acquire+0xc>)
   1c958:	f000 fb1e 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1c95c:	bd10      	pop	{r4, pc}
   1c95e:	46c0      	nop			; (mov r8, r8)
   1c960:	20001d18 	.word	0x20001d18

0001c964 <__sfp_lock_release>:
   1c964:	b510      	push	{r4, lr}
   1c966:	4802      	ldr	r0, [pc, #8]	; (1c970 <__sfp_lock_release+0xc>)
   1c968:	f000 fb18 	bl	1cf9c <__retarget_lock_release_recursive>
   1c96c:	bd10      	pop	{r4, pc}
   1c96e:	46c0      	nop			; (mov r8, r8)
   1c970:	20001d18 	.word	0x20001d18

0001c974 <__libc_fini_array>:
   1c974:	b570      	push	{r4, r5, r6, lr}
   1c976:	4b09      	ldr	r3, [pc, #36]	; (1c99c <__libc_fini_array+0x28>)
   1c978:	4c09      	ldr	r4, [pc, #36]	; (1c9a0 <__libc_fini_array+0x2c>)
   1c97a:	1ae4      	subs	r4, r4, r3
   1c97c:	10a4      	asrs	r4, r4, #2
   1c97e:	d009      	beq.n	1c994 <__libc_fini_array+0x20>
   1c980:	4a08      	ldr	r2, [pc, #32]	; (1c9a4 <__libc_fini_array+0x30>)
   1c982:	18a5      	adds	r5, r4, r2
   1c984:	00ad      	lsls	r5, r5, #2
   1c986:	18ed      	adds	r5, r5, r3
   1c988:	682b      	ldr	r3, [r5, #0]
   1c98a:	3c01      	subs	r4, #1
   1c98c:	4798      	blx	r3
   1c98e:	3d04      	subs	r5, #4
   1c990:	2c00      	cmp	r4, #0
   1c992:	d1f9      	bne.n	1c988 <__libc_fini_array+0x14>
   1c994:	f003 fb72 	bl	2007c <_fini>
   1c998:	bd70      	pop	{r4, r5, r6, pc}
   1c99a:	46c0      	nop			; (mov r8, r8)
   1c99c:	00020088 	.word	0x00020088
   1c9a0:	0002008c 	.word	0x0002008c
   1c9a4:	3fffffff 	.word	0x3fffffff

0001c9a8 <_malloc_trim_r>:
   1c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9aa:	000c      	movs	r4, r1
   1c9ac:	0006      	movs	r6, r0
   1c9ae:	f000 ff0b 	bl	1d7c8 <__malloc_lock>
   1c9b2:	4f20      	ldr	r7, [pc, #128]	; (1ca34 <_malloc_trim_r+0x8c>)
   1c9b4:	68bb      	ldr	r3, [r7, #8]
   1c9b6:	685d      	ldr	r5, [r3, #4]
   1c9b8:	2303      	movs	r3, #3
   1c9ba:	439d      	bics	r5, r3
   1c9bc:	4b1e      	ldr	r3, [pc, #120]	; (1ca38 <_malloc_trim_r+0x90>)
   1c9be:	1b2c      	subs	r4, r5, r4
   1c9c0:	469c      	mov	ip, r3
   1c9c2:	4464      	add	r4, ip
   1c9c4:	0b24      	lsrs	r4, r4, #12
   1c9c6:	4b1d      	ldr	r3, [pc, #116]	; (1ca3c <_malloc_trim_r+0x94>)
   1c9c8:	3c01      	subs	r4, #1
   1c9ca:	0324      	lsls	r4, r4, #12
   1c9cc:	429c      	cmp	r4, r3
   1c9ce:	dd07      	ble.n	1c9e0 <_malloc_trim_r+0x38>
   1c9d0:	2100      	movs	r1, #0
   1c9d2:	0030      	movs	r0, r6
   1c9d4:	f001 fc0e 	bl	1e1f4 <_sbrk_r>
   1c9d8:	68bb      	ldr	r3, [r7, #8]
   1c9da:	195b      	adds	r3, r3, r5
   1c9dc:	4298      	cmp	r0, r3
   1c9de:	d004      	beq.n	1c9ea <_malloc_trim_r+0x42>
   1c9e0:	0030      	movs	r0, r6
   1c9e2:	f000 fef9 	bl	1d7d8 <__malloc_unlock>
   1c9e6:	2000      	movs	r0, #0
   1c9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9ea:	4261      	negs	r1, r4
   1c9ec:	0030      	movs	r0, r6
   1c9ee:	f001 fc01 	bl	1e1f4 <_sbrk_r>
   1c9f2:	1c43      	adds	r3, r0, #1
   1c9f4:	d00d      	beq.n	1ca12 <_malloc_trim_r+0x6a>
   1c9f6:	2201      	movs	r2, #1
   1c9f8:	68bb      	ldr	r3, [r7, #8]
   1c9fa:	1b2d      	subs	r5, r5, r4
   1c9fc:	4315      	orrs	r5, r2
   1c9fe:	605d      	str	r5, [r3, #4]
   1ca00:	4b0f      	ldr	r3, [pc, #60]	; (1ca40 <_malloc_trim_r+0x98>)
   1ca02:	0030      	movs	r0, r6
   1ca04:	681a      	ldr	r2, [r3, #0]
   1ca06:	1b14      	subs	r4, r2, r4
   1ca08:	601c      	str	r4, [r3, #0]
   1ca0a:	f000 fee5 	bl	1d7d8 <__malloc_unlock>
   1ca0e:	2001      	movs	r0, #1
   1ca10:	e7ea      	b.n	1c9e8 <_malloc_trim_r+0x40>
   1ca12:	2100      	movs	r1, #0
   1ca14:	0030      	movs	r0, r6
   1ca16:	f001 fbed 	bl	1e1f4 <_sbrk_r>
   1ca1a:	68ba      	ldr	r2, [r7, #8]
   1ca1c:	1a83      	subs	r3, r0, r2
   1ca1e:	2b0f      	cmp	r3, #15
   1ca20:	ddde      	ble.n	1c9e0 <_malloc_trim_r+0x38>
   1ca22:	4908      	ldr	r1, [pc, #32]	; (1ca44 <_malloc_trim_r+0x9c>)
   1ca24:	6809      	ldr	r1, [r1, #0]
   1ca26:	1a40      	subs	r0, r0, r1
   1ca28:	4905      	ldr	r1, [pc, #20]	; (1ca40 <_malloc_trim_r+0x98>)
   1ca2a:	6008      	str	r0, [r1, #0]
   1ca2c:	2101      	movs	r1, #1
   1ca2e:	430b      	orrs	r3, r1
   1ca30:	6053      	str	r3, [r2, #4]
   1ca32:	e7d5      	b.n	1c9e0 <_malloc_trim_r+0x38>
   1ca34:	200006b8 	.word	0x200006b8
   1ca38:	00000fef 	.word	0x00000fef
   1ca3c:	00000fff 	.word	0x00000fff
   1ca40:	20001ad0 	.word	0x20001ad0
   1ca44:	20000ac0 	.word	0x20000ac0

0001ca48 <_free_r>:
   1ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca4a:	0004      	movs	r4, r0
   1ca4c:	1e0d      	subs	r5, r1, #0
   1ca4e:	d03c      	beq.n	1caca <_free_r+0x82>
   1ca50:	f000 feba 	bl	1d7c8 <__malloc_lock>
   1ca54:	0029      	movs	r1, r5
   1ca56:	3908      	subs	r1, #8
   1ca58:	6848      	ldr	r0, [r1, #4]
   1ca5a:	2301      	movs	r3, #1
   1ca5c:	0005      	movs	r5, r0
   1ca5e:	2603      	movs	r6, #3
   1ca60:	439d      	bics	r5, r3
   1ca62:	194a      	adds	r2, r1, r5
   1ca64:	469c      	mov	ip, r3
   1ca66:	4f61      	ldr	r7, [pc, #388]	; (1cbec <_free_r+0x1a4>)
   1ca68:	6853      	ldr	r3, [r2, #4]
   1ca6a:	43b3      	bics	r3, r6
   1ca6c:	68be      	ldr	r6, [r7, #8]
   1ca6e:	42b2      	cmp	r2, r6
   1ca70:	d056      	beq.n	1cb20 <_free_r+0xd8>
   1ca72:	4666      	mov	r6, ip
   1ca74:	6053      	str	r3, [r2, #4]
   1ca76:	4206      	tst	r6, r0
   1ca78:	d10a      	bne.n	1ca90 <_free_r+0x48>
   1ca7a:	003e      	movs	r6, r7
   1ca7c:	6808      	ldr	r0, [r1, #0]
   1ca7e:	3608      	adds	r6, #8
   1ca80:	1a09      	subs	r1, r1, r0
   1ca82:	182d      	adds	r5, r5, r0
   1ca84:	6888      	ldr	r0, [r1, #8]
   1ca86:	42b0      	cmp	r0, r6
   1ca88:	d065      	beq.n	1cb56 <_free_r+0x10e>
   1ca8a:	68ce      	ldr	r6, [r1, #12]
   1ca8c:	60c6      	str	r6, [r0, #12]
   1ca8e:	60b0      	str	r0, [r6, #8]
   1ca90:	2001      	movs	r0, #1
   1ca92:	18d6      	adds	r6, r2, r3
   1ca94:	6876      	ldr	r6, [r6, #4]
   1ca96:	4206      	tst	r6, r0
   1ca98:	d033      	beq.n	1cb02 <_free_r+0xba>
   1ca9a:	4b55      	ldr	r3, [pc, #340]	; (1cbf0 <_free_r+0x1a8>)
   1ca9c:	4328      	orrs	r0, r5
   1ca9e:	6048      	str	r0, [r1, #4]
   1caa0:	514d      	str	r5, [r1, r5]
   1caa2:	429d      	cmp	r5, r3
   1caa4:	d812      	bhi.n	1cacc <_free_r+0x84>
   1caa6:	08ed      	lsrs	r5, r5, #3
   1caa8:	3bff      	subs	r3, #255	; 0xff
   1caaa:	10aa      	asrs	r2, r5, #2
   1caac:	3bff      	subs	r3, #255	; 0xff
   1caae:	4093      	lsls	r3, r2
   1cab0:	687a      	ldr	r2, [r7, #4]
   1cab2:	00ed      	lsls	r5, r5, #3
   1cab4:	4313      	orrs	r3, r2
   1cab6:	607b      	str	r3, [r7, #4]
   1cab8:	19ef      	adds	r7, r5, r7
   1caba:	68bb      	ldr	r3, [r7, #8]
   1cabc:	60cf      	str	r7, [r1, #12]
   1cabe:	608b      	str	r3, [r1, #8]
   1cac0:	60b9      	str	r1, [r7, #8]
   1cac2:	60d9      	str	r1, [r3, #12]
   1cac4:	0020      	movs	r0, r4
   1cac6:	f000 fe87 	bl	1d7d8 <__malloc_unlock>
   1caca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cacc:	0a68      	lsrs	r0, r5, #9
   1cace:	2804      	cmp	r0, #4
   1cad0:	d850      	bhi.n	1cb74 <_free_r+0x12c>
   1cad2:	09a8      	lsrs	r0, r5, #6
   1cad4:	0002      	movs	r2, r0
   1cad6:	3039      	adds	r0, #57	; 0x39
   1cad8:	3238      	adds	r2, #56	; 0x38
   1cada:	00c0      	lsls	r0, r0, #3
   1cadc:	1838      	adds	r0, r7, r0
   1cade:	3808      	subs	r0, #8
   1cae0:	6883      	ldr	r3, [r0, #8]
   1cae2:	2603      	movs	r6, #3
   1cae4:	4298      	cmp	r0, r3
   1cae6:	d04c      	beq.n	1cb82 <_free_r+0x13a>
   1cae8:	685a      	ldr	r2, [r3, #4]
   1caea:	43b2      	bics	r2, r6
   1caec:	4295      	cmp	r5, r2
   1caee:	d230      	bcs.n	1cb52 <_free_r+0x10a>
   1caf0:	689b      	ldr	r3, [r3, #8]
   1caf2:	4298      	cmp	r0, r3
   1caf4:	d1f8      	bne.n	1cae8 <_free_r+0xa0>
   1caf6:	68c3      	ldr	r3, [r0, #12]
   1caf8:	60cb      	str	r3, [r1, #12]
   1cafa:	6088      	str	r0, [r1, #8]
   1cafc:	6099      	str	r1, [r3, #8]
   1cafe:	60c1      	str	r1, [r0, #12]
   1cb00:	e7e0      	b.n	1cac4 <_free_r+0x7c>
   1cb02:	18ed      	adds	r5, r5, r3
   1cb04:	4e3b      	ldr	r6, [pc, #236]	; (1cbf4 <_free_r+0x1ac>)
   1cb06:	6893      	ldr	r3, [r2, #8]
   1cb08:	42b3      	cmp	r3, r6
   1cb0a:	d042      	beq.n	1cb92 <_free_r+0x14a>
   1cb0c:	68d2      	ldr	r2, [r2, #12]
   1cb0e:	4328      	orrs	r0, r5
   1cb10:	60da      	str	r2, [r3, #12]
   1cb12:	6093      	str	r3, [r2, #8]
   1cb14:	4b36      	ldr	r3, [pc, #216]	; (1cbf0 <_free_r+0x1a8>)
   1cb16:	6048      	str	r0, [r1, #4]
   1cb18:	514d      	str	r5, [r1, r5]
   1cb1a:	429d      	cmp	r5, r3
   1cb1c:	d8d6      	bhi.n	1cacc <_free_r+0x84>
   1cb1e:	e7c2      	b.n	1caa6 <_free_r+0x5e>
   1cb20:	4662      	mov	r2, ip
   1cb22:	18eb      	adds	r3, r5, r3
   1cb24:	4202      	tst	r2, r0
   1cb26:	d106      	bne.n	1cb36 <_free_r+0xee>
   1cb28:	680a      	ldr	r2, [r1, #0]
   1cb2a:	1a89      	subs	r1, r1, r2
   1cb2c:	6888      	ldr	r0, [r1, #8]
   1cb2e:	189b      	adds	r3, r3, r2
   1cb30:	68ca      	ldr	r2, [r1, #12]
   1cb32:	60c2      	str	r2, [r0, #12]
   1cb34:	6090      	str	r0, [r2, #8]
   1cb36:	2201      	movs	r2, #1
   1cb38:	431a      	orrs	r2, r3
   1cb3a:	604a      	str	r2, [r1, #4]
   1cb3c:	4a2e      	ldr	r2, [pc, #184]	; (1cbf8 <_free_r+0x1b0>)
   1cb3e:	60b9      	str	r1, [r7, #8]
   1cb40:	6812      	ldr	r2, [r2, #0]
   1cb42:	4293      	cmp	r3, r2
   1cb44:	d3be      	bcc.n	1cac4 <_free_r+0x7c>
   1cb46:	4b2d      	ldr	r3, [pc, #180]	; (1cbfc <_free_r+0x1b4>)
   1cb48:	0020      	movs	r0, r4
   1cb4a:	6819      	ldr	r1, [r3, #0]
   1cb4c:	f7ff ff2c 	bl	1c9a8 <_malloc_trim_r>
   1cb50:	e7b8      	b.n	1cac4 <_free_r+0x7c>
   1cb52:	0018      	movs	r0, r3
   1cb54:	e7cf      	b.n	1caf6 <_free_r+0xae>
   1cb56:	4666      	mov	r6, ip
   1cb58:	18d0      	adds	r0, r2, r3
   1cb5a:	6840      	ldr	r0, [r0, #4]
   1cb5c:	4230      	tst	r0, r6
   1cb5e:	d13f      	bne.n	1cbe0 <_free_r+0x198>
   1cb60:	6890      	ldr	r0, [r2, #8]
   1cb62:	195d      	adds	r5, r3, r5
   1cb64:	68d3      	ldr	r3, [r2, #12]
   1cb66:	60c3      	str	r3, [r0, #12]
   1cb68:	6098      	str	r0, [r3, #8]
   1cb6a:	4663      	mov	r3, ip
   1cb6c:	432b      	orrs	r3, r5
   1cb6e:	604b      	str	r3, [r1, #4]
   1cb70:	514d      	str	r5, [r1, r5]
   1cb72:	e7a7      	b.n	1cac4 <_free_r+0x7c>
   1cb74:	2814      	cmp	r0, #20
   1cb76:	d814      	bhi.n	1cba2 <_free_r+0x15a>
   1cb78:	0002      	movs	r2, r0
   1cb7a:	305c      	adds	r0, #92	; 0x5c
   1cb7c:	325b      	adds	r2, #91	; 0x5b
   1cb7e:	00c0      	lsls	r0, r0, #3
   1cb80:	e7ac      	b.n	1cadc <_free_r+0x94>
   1cb82:	2301      	movs	r3, #1
   1cb84:	1092      	asrs	r2, r2, #2
   1cb86:	4093      	lsls	r3, r2
   1cb88:	687a      	ldr	r2, [r7, #4]
   1cb8a:	4313      	orrs	r3, r2
   1cb8c:	607b      	str	r3, [r7, #4]
   1cb8e:	0003      	movs	r3, r0
   1cb90:	e7b2      	b.n	1caf8 <_free_r+0xb0>
   1cb92:	4328      	orrs	r0, r5
   1cb94:	60d9      	str	r1, [r3, #12]
   1cb96:	6099      	str	r1, [r3, #8]
   1cb98:	60cb      	str	r3, [r1, #12]
   1cb9a:	608b      	str	r3, [r1, #8]
   1cb9c:	6048      	str	r0, [r1, #4]
   1cb9e:	514d      	str	r5, [r1, r5]
   1cba0:	e790      	b.n	1cac4 <_free_r+0x7c>
   1cba2:	2854      	cmp	r0, #84	; 0x54
   1cba4:	d805      	bhi.n	1cbb2 <_free_r+0x16a>
   1cba6:	0b28      	lsrs	r0, r5, #12
   1cba8:	0002      	movs	r2, r0
   1cbaa:	306f      	adds	r0, #111	; 0x6f
   1cbac:	326e      	adds	r2, #110	; 0x6e
   1cbae:	00c0      	lsls	r0, r0, #3
   1cbb0:	e794      	b.n	1cadc <_free_r+0x94>
   1cbb2:	22aa      	movs	r2, #170	; 0xaa
   1cbb4:	0052      	lsls	r2, r2, #1
   1cbb6:	4290      	cmp	r0, r2
   1cbb8:	d805      	bhi.n	1cbc6 <_free_r+0x17e>
   1cbba:	0be8      	lsrs	r0, r5, #15
   1cbbc:	0002      	movs	r2, r0
   1cbbe:	3078      	adds	r0, #120	; 0x78
   1cbc0:	3277      	adds	r2, #119	; 0x77
   1cbc2:	00c0      	lsls	r0, r0, #3
   1cbc4:	e78a      	b.n	1cadc <_free_r+0x94>
   1cbc6:	4a0e      	ldr	r2, [pc, #56]	; (1cc00 <_free_r+0x1b8>)
   1cbc8:	4290      	cmp	r0, r2
   1cbca:	d805      	bhi.n	1cbd8 <_free_r+0x190>
   1cbcc:	0ca8      	lsrs	r0, r5, #18
   1cbce:	0002      	movs	r2, r0
   1cbd0:	307d      	adds	r0, #125	; 0x7d
   1cbd2:	327c      	adds	r2, #124	; 0x7c
   1cbd4:	00c0      	lsls	r0, r0, #3
   1cbd6:	e781      	b.n	1cadc <_free_r+0x94>
   1cbd8:	20fe      	movs	r0, #254	; 0xfe
   1cbda:	227e      	movs	r2, #126	; 0x7e
   1cbdc:	0080      	lsls	r0, r0, #2
   1cbde:	e77d      	b.n	1cadc <_free_r+0x94>
   1cbe0:	4663      	mov	r3, ip
   1cbe2:	432b      	orrs	r3, r5
   1cbe4:	604b      	str	r3, [r1, #4]
   1cbe6:	6015      	str	r5, [r2, #0]
   1cbe8:	e76c      	b.n	1cac4 <_free_r+0x7c>
   1cbea:	46c0      	nop			; (mov r8, r8)
   1cbec:	200006b8 	.word	0x200006b8
   1cbf0:	000001ff 	.word	0x000001ff
   1cbf4:	200006c0 	.word	0x200006c0
   1cbf8:	20000ac4 	.word	0x20000ac4
   1cbfc:	20001b00 	.word	0x20001b00
   1cc00:	00000554 	.word	0x00000554

0001cc04 <__sfvwrite_r>:
   1cc04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc06:	464e      	mov	r6, r9
   1cc08:	46de      	mov	lr, fp
   1cc0a:	4657      	mov	r7, sl
   1cc0c:	4645      	mov	r5, r8
   1cc0e:	b5e0      	push	{r5, r6, r7, lr}
   1cc10:	6893      	ldr	r3, [r2, #8]
   1cc12:	b083      	sub	sp, #12
   1cc14:	9000      	str	r0, [sp, #0]
   1cc16:	000c      	movs	r4, r1
   1cc18:	0016      	movs	r6, r2
   1cc1a:	2b00      	cmp	r3, #0
   1cc1c:	d025      	beq.n	1cc6a <__sfvwrite_r+0x66>
   1cc1e:	898b      	ldrh	r3, [r1, #12]
   1cc20:	071a      	lsls	r2, r3, #28
   1cc22:	d52a      	bpl.n	1cc7a <__sfvwrite_r+0x76>
   1cc24:	690a      	ldr	r2, [r1, #16]
   1cc26:	2a00      	cmp	r2, #0
   1cc28:	d027      	beq.n	1cc7a <__sfvwrite_r+0x76>
   1cc2a:	6832      	ldr	r2, [r6, #0]
   1cc2c:	4693      	mov	fp, r2
   1cc2e:	079a      	lsls	r2, r3, #30
   1cc30:	d52f      	bpl.n	1cc92 <__sfvwrite_r+0x8e>
   1cc32:	4bb2      	ldr	r3, [pc, #712]	; (1cefc <__sfvwrite_r+0x2f8>)
   1cc34:	2700      	movs	r7, #0
   1cc36:	2500      	movs	r5, #0
   1cc38:	4698      	mov	r8, r3
   1cc3a:	46b1      	mov	r9, r6
   1cc3c:	2d00      	cmp	r5, #0
   1cc3e:	d100      	bne.n	1cc42 <__sfvwrite_r+0x3e>
   1cc40:	e072      	b.n	1cd28 <__sfvwrite_r+0x124>
   1cc42:	002b      	movs	r3, r5
   1cc44:	4545      	cmp	r5, r8
   1cc46:	d900      	bls.n	1cc4a <__sfvwrite_r+0x46>
   1cc48:	4bac      	ldr	r3, [pc, #688]	; (1cefc <__sfvwrite_r+0x2f8>)
   1cc4a:	003a      	movs	r2, r7
   1cc4c:	69e1      	ldr	r1, [r4, #28]
   1cc4e:	9800      	ldr	r0, [sp, #0]
   1cc50:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1cc52:	47b0      	blx	r6
   1cc54:	2800      	cmp	r0, #0
   1cc56:	dc00      	bgt.n	1cc5a <__sfvwrite_r+0x56>
   1cc58:	e073      	b.n	1cd42 <__sfvwrite_r+0x13e>
   1cc5a:	464b      	mov	r3, r9
   1cc5c:	689b      	ldr	r3, [r3, #8]
   1cc5e:	183f      	adds	r7, r7, r0
   1cc60:	1a2d      	subs	r5, r5, r0
   1cc62:	1a18      	subs	r0, r3, r0
   1cc64:	464b      	mov	r3, r9
   1cc66:	6098      	str	r0, [r3, #8]
   1cc68:	d1e8      	bne.n	1cc3c <__sfvwrite_r+0x38>
   1cc6a:	2000      	movs	r0, #0
   1cc6c:	b003      	add	sp, #12
   1cc6e:	bc3c      	pop	{r2, r3, r4, r5}
   1cc70:	4690      	mov	r8, r2
   1cc72:	4699      	mov	r9, r3
   1cc74:	46a2      	mov	sl, r4
   1cc76:	46ab      	mov	fp, r5
   1cc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc7a:	0021      	movs	r1, r4
   1cc7c:	9800      	ldr	r0, [sp, #0]
   1cc7e:	f7fe fc4b 	bl	1b518 <__swsetup_r>
   1cc82:	2800      	cmp	r0, #0
   1cc84:	d000      	beq.n	1cc88 <__sfvwrite_r+0x84>
   1cc86:	e130      	b.n	1ceea <__sfvwrite_r+0x2e6>
   1cc88:	6832      	ldr	r2, [r6, #0]
   1cc8a:	89a3      	ldrh	r3, [r4, #12]
   1cc8c:	4693      	mov	fp, r2
   1cc8e:	079a      	lsls	r2, r3, #30
   1cc90:	d4cf      	bmi.n	1cc32 <__sfvwrite_r+0x2e>
   1cc92:	07da      	lsls	r2, r3, #31
   1cc94:	d55d      	bpl.n	1cd52 <__sfvwrite_r+0x14e>
   1cc96:	2300      	movs	r3, #0
   1cc98:	2000      	movs	r0, #0
   1cc9a:	469a      	mov	sl, r3
   1cc9c:	2700      	movs	r7, #0
   1cc9e:	001d      	movs	r5, r3
   1cca0:	46b1      	mov	r9, r6
   1cca2:	e029      	b.n	1ccf8 <__sfvwrite_r+0xf4>
   1cca4:	2800      	cmp	r0, #0
   1cca6:	d033      	beq.n	1cd10 <__sfvwrite_r+0x10c>
   1cca8:	46a8      	mov	r8, r5
   1ccaa:	42bd      	cmp	r5, r7
   1ccac:	d900      	bls.n	1ccb0 <__sfvwrite_r+0xac>
   1ccae:	46b8      	mov	r8, r7
   1ccb0:	6820      	ldr	r0, [r4, #0]
   1ccb2:	6922      	ldr	r2, [r4, #16]
   1ccb4:	4646      	mov	r6, r8
   1ccb6:	6963      	ldr	r3, [r4, #20]
   1ccb8:	4290      	cmp	r0, r2
   1ccba:	d907      	bls.n	1cccc <__sfvwrite_r+0xc8>
   1ccbc:	68a2      	ldr	r2, [r4, #8]
   1ccbe:	4694      	mov	ip, r2
   1ccc0:	449c      	add	ip, r3
   1ccc2:	4662      	mov	r2, ip
   1ccc4:	9201      	str	r2, [sp, #4]
   1ccc6:	45e0      	cmp	r8, ip
   1ccc8:	dd00      	ble.n	1cccc <__sfvwrite_r+0xc8>
   1ccca:	e0e9      	b.n	1cea0 <__sfvwrite_r+0x29c>
   1cccc:	4598      	cmp	r8, r3
   1ccce:	da00      	bge.n	1ccd2 <__sfvwrite_r+0xce>
   1ccd0:	e08f      	b.n	1cdf2 <__sfvwrite_r+0x1ee>
   1ccd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1ccd4:	4652      	mov	r2, sl
   1ccd6:	69e1      	ldr	r1, [r4, #28]
   1ccd8:	9800      	ldr	r0, [sp, #0]
   1ccda:	47b0      	blx	r6
   1ccdc:	1e06      	subs	r6, r0, #0
   1ccde:	dd30      	ble.n	1cd42 <__sfvwrite_r+0x13e>
   1cce0:	1bad      	subs	r5, r5, r6
   1cce2:	2001      	movs	r0, #1
   1cce4:	2d00      	cmp	r5, #0
   1cce6:	d026      	beq.n	1cd36 <__sfvwrite_r+0x132>
   1cce8:	464b      	mov	r3, r9
   1ccea:	689b      	ldr	r3, [r3, #8]
   1ccec:	44b2      	add	sl, r6
   1ccee:	1bbf      	subs	r7, r7, r6
   1ccf0:	1b9e      	subs	r6, r3, r6
   1ccf2:	464b      	mov	r3, r9
   1ccf4:	609e      	str	r6, [r3, #8]
   1ccf6:	d0b8      	beq.n	1cc6a <__sfvwrite_r+0x66>
   1ccf8:	2f00      	cmp	r7, #0
   1ccfa:	d1d3      	bne.n	1cca4 <__sfvwrite_r+0xa0>
   1ccfc:	465b      	mov	r3, fp
   1ccfe:	681b      	ldr	r3, [r3, #0]
   1cd00:	469a      	mov	sl, r3
   1cd02:	465b      	mov	r3, fp
   1cd04:	685f      	ldr	r7, [r3, #4]
   1cd06:	2308      	movs	r3, #8
   1cd08:	469c      	mov	ip, r3
   1cd0a:	44e3      	add	fp, ip
   1cd0c:	2f00      	cmp	r7, #0
   1cd0e:	d0f5      	beq.n	1ccfc <__sfvwrite_r+0xf8>
   1cd10:	003a      	movs	r2, r7
   1cd12:	210a      	movs	r1, #10
   1cd14:	4650      	mov	r0, sl
   1cd16:	f000 fc85 	bl	1d624 <memchr>
   1cd1a:	2800      	cmp	r0, #0
   1cd1c:	d100      	bne.n	1cd20 <__sfvwrite_r+0x11c>
   1cd1e:	e0e2      	b.n	1cee6 <__sfvwrite_r+0x2e2>
   1cd20:	4653      	mov	r3, sl
   1cd22:	3001      	adds	r0, #1
   1cd24:	1ac5      	subs	r5, r0, r3
   1cd26:	e7bf      	b.n	1cca8 <__sfvwrite_r+0xa4>
   1cd28:	465b      	mov	r3, fp
   1cd2a:	681f      	ldr	r7, [r3, #0]
   1cd2c:	685d      	ldr	r5, [r3, #4]
   1cd2e:	2308      	movs	r3, #8
   1cd30:	469c      	mov	ip, r3
   1cd32:	44e3      	add	fp, ip
   1cd34:	e782      	b.n	1cc3c <__sfvwrite_r+0x38>
   1cd36:	0021      	movs	r1, r4
   1cd38:	9800      	ldr	r0, [sp, #0]
   1cd3a:	f7ff fd81 	bl	1c840 <_fflush_r>
   1cd3e:	2800      	cmp	r0, #0
   1cd40:	d0d2      	beq.n	1cce8 <__sfvwrite_r+0xe4>
   1cd42:	220c      	movs	r2, #12
   1cd44:	5ea3      	ldrsh	r3, [r4, r2]
   1cd46:	2240      	movs	r2, #64	; 0x40
   1cd48:	2001      	movs	r0, #1
   1cd4a:	4313      	orrs	r3, r2
   1cd4c:	81a3      	strh	r3, [r4, #12]
   1cd4e:	4240      	negs	r0, r0
   1cd50:	e78c      	b.n	1cc6c <__sfvwrite_r+0x68>
   1cd52:	2200      	movs	r2, #0
   1cd54:	4691      	mov	r9, r2
   1cd56:	464d      	mov	r5, r9
   1cd58:	2d00      	cmp	r5, #0
   1cd5a:	d023      	beq.n	1cda4 <__sfvwrite_r+0x1a0>
   1cd5c:	68a2      	ldr	r2, [r4, #8]
   1cd5e:	4690      	mov	r8, r2
   1cd60:	2280      	movs	r2, #128	; 0x80
   1cd62:	0092      	lsls	r2, r2, #2
   1cd64:	4213      	tst	r3, r2
   1cd66:	d026      	beq.n	1cdb6 <__sfvwrite_r+0x1b2>
   1cd68:	46c2      	mov	sl, r8
   1cd6a:	4545      	cmp	r5, r8
   1cd6c:	d34d      	bcc.n	1ce0a <__sfvwrite_r+0x206>
   1cd6e:	2290      	movs	r2, #144	; 0x90
   1cd70:	00d2      	lsls	r2, r2, #3
   1cd72:	4213      	tst	r3, r2
   1cd74:	d14e      	bne.n	1ce14 <__sfvwrite_r+0x210>
   1cd76:	002f      	movs	r7, r5
   1cd78:	6820      	ldr	r0, [r4, #0]
   1cd7a:	4652      	mov	r2, sl
   1cd7c:	4649      	mov	r1, r9
   1cd7e:	f000 fcd3 	bl	1d728 <memmove>
   1cd82:	4642      	mov	r2, r8
   1cd84:	68a3      	ldr	r3, [r4, #8]
   1cd86:	1a98      	subs	r0, r3, r2
   1cd88:	6823      	ldr	r3, [r4, #0]
   1cd8a:	60a0      	str	r0, [r4, #8]
   1cd8c:	4453      	add	r3, sl
   1cd8e:	6023      	str	r3, [r4, #0]
   1cd90:	68b3      	ldr	r3, [r6, #8]
   1cd92:	44b9      	add	r9, r7
   1cd94:	1bed      	subs	r5, r5, r7
   1cd96:	1bdf      	subs	r7, r3, r7
   1cd98:	60b7      	str	r7, [r6, #8]
   1cd9a:	d100      	bne.n	1cd9e <__sfvwrite_r+0x19a>
   1cd9c:	e765      	b.n	1cc6a <__sfvwrite_r+0x66>
   1cd9e:	89a3      	ldrh	r3, [r4, #12]
   1cda0:	2d00      	cmp	r5, #0
   1cda2:	d1db      	bne.n	1cd5c <__sfvwrite_r+0x158>
   1cda4:	465a      	mov	r2, fp
   1cda6:	6812      	ldr	r2, [r2, #0]
   1cda8:	4691      	mov	r9, r2
   1cdaa:	465a      	mov	r2, fp
   1cdac:	6855      	ldr	r5, [r2, #4]
   1cdae:	2208      	movs	r2, #8
   1cdb0:	4694      	mov	ip, r2
   1cdb2:	44e3      	add	fp, ip
   1cdb4:	e7d0      	b.n	1cd58 <__sfvwrite_r+0x154>
   1cdb6:	6820      	ldr	r0, [r4, #0]
   1cdb8:	6923      	ldr	r3, [r4, #16]
   1cdba:	4298      	cmp	r0, r3
   1cdbc:	d802      	bhi.n	1cdc4 <__sfvwrite_r+0x1c0>
   1cdbe:	6967      	ldr	r7, [r4, #20]
   1cdc0:	42bd      	cmp	r5, r7
   1cdc2:	d259      	bcs.n	1ce78 <__sfvwrite_r+0x274>
   1cdc4:	4647      	mov	r7, r8
   1cdc6:	42af      	cmp	r7, r5
   1cdc8:	d900      	bls.n	1cdcc <__sfvwrite_r+0x1c8>
   1cdca:	002f      	movs	r7, r5
   1cdcc:	003a      	movs	r2, r7
   1cdce:	4649      	mov	r1, r9
   1cdd0:	f000 fcaa 	bl	1d728 <memmove>
   1cdd4:	68a3      	ldr	r3, [r4, #8]
   1cdd6:	6822      	ldr	r2, [r4, #0]
   1cdd8:	1bdb      	subs	r3, r3, r7
   1cdda:	19d2      	adds	r2, r2, r7
   1cddc:	60a3      	str	r3, [r4, #8]
   1cdde:	6022      	str	r2, [r4, #0]
   1cde0:	2b00      	cmp	r3, #0
   1cde2:	d1d5      	bne.n	1cd90 <__sfvwrite_r+0x18c>
   1cde4:	0021      	movs	r1, r4
   1cde6:	9800      	ldr	r0, [sp, #0]
   1cde8:	f7ff fd2a 	bl	1c840 <_fflush_r>
   1cdec:	2800      	cmp	r0, #0
   1cdee:	d0cf      	beq.n	1cd90 <__sfvwrite_r+0x18c>
   1cdf0:	e7a7      	b.n	1cd42 <__sfvwrite_r+0x13e>
   1cdf2:	4642      	mov	r2, r8
   1cdf4:	4651      	mov	r1, sl
   1cdf6:	f000 fc97 	bl	1d728 <memmove>
   1cdfa:	4642      	mov	r2, r8
   1cdfc:	68a3      	ldr	r3, [r4, #8]
   1cdfe:	1a9b      	subs	r3, r3, r2
   1ce00:	60a3      	str	r3, [r4, #8]
   1ce02:	6823      	ldr	r3, [r4, #0]
   1ce04:	4443      	add	r3, r8
   1ce06:	6023      	str	r3, [r4, #0]
   1ce08:	e76a      	b.n	1cce0 <__sfvwrite_r+0xdc>
   1ce0a:	46a8      	mov	r8, r5
   1ce0c:	6820      	ldr	r0, [r4, #0]
   1ce0e:	002f      	movs	r7, r5
   1ce10:	46aa      	mov	sl, r5
   1ce12:	e7b2      	b.n	1cd7a <__sfvwrite_r+0x176>
   1ce14:	6921      	ldr	r1, [r4, #16]
   1ce16:	6822      	ldr	r2, [r4, #0]
   1ce18:	1a52      	subs	r2, r2, r1
   1ce1a:	4692      	mov	sl, r2
   1ce1c:	6962      	ldr	r2, [r4, #20]
   1ce1e:	0057      	lsls	r7, r2, #1
   1ce20:	18bf      	adds	r7, r7, r2
   1ce22:	0ffa      	lsrs	r2, r7, #31
   1ce24:	19d7      	adds	r7, r2, r7
   1ce26:	4652      	mov	r2, sl
   1ce28:	1c50      	adds	r0, r2, #1
   1ce2a:	107f      	asrs	r7, r7, #1
   1ce2c:	1940      	adds	r0, r0, r5
   1ce2e:	003a      	movs	r2, r7
   1ce30:	42b8      	cmp	r0, r7
   1ce32:	d901      	bls.n	1ce38 <__sfvwrite_r+0x234>
   1ce34:	0007      	movs	r7, r0
   1ce36:	0002      	movs	r2, r0
   1ce38:	055b      	lsls	r3, r3, #21
   1ce3a:	d542      	bpl.n	1cec2 <__sfvwrite_r+0x2be>
   1ce3c:	0011      	movs	r1, r2
   1ce3e:	9800      	ldr	r0, [sp, #0]
   1ce40:	f000 f926 	bl	1d090 <_malloc_r>
   1ce44:	4680      	mov	r8, r0
   1ce46:	1e03      	subs	r3, r0, #0
   1ce48:	d052      	beq.n	1cef0 <__sfvwrite_r+0x2ec>
   1ce4a:	4652      	mov	r2, sl
   1ce4c:	6921      	ldr	r1, [r4, #16]
   1ce4e:	f000 fc29 	bl	1d6a4 <memcpy>
   1ce52:	89a3      	ldrh	r3, [r4, #12]
   1ce54:	4a2a      	ldr	r2, [pc, #168]	; (1cf00 <__sfvwrite_r+0x2fc>)
   1ce56:	4013      	ands	r3, r2
   1ce58:	2280      	movs	r2, #128	; 0x80
   1ce5a:	4313      	orrs	r3, r2
   1ce5c:	81a3      	strh	r3, [r4, #12]
   1ce5e:	4643      	mov	r3, r8
   1ce60:	4640      	mov	r0, r8
   1ce62:	6123      	str	r3, [r4, #16]
   1ce64:	4653      	mov	r3, sl
   1ce66:	4450      	add	r0, sl
   1ce68:	6167      	str	r7, [r4, #20]
   1ce6a:	1aff      	subs	r7, r7, r3
   1ce6c:	60a7      	str	r7, [r4, #8]
   1ce6e:	6020      	str	r0, [r4, #0]
   1ce70:	46a8      	mov	r8, r5
   1ce72:	002f      	movs	r7, r5
   1ce74:	46aa      	mov	sl, r5
   1ce76:	e780      	b.n	1cd7a <__sfvwrite_r+0x176>
   1ce78:	4b22      	ldr	r3, [pc, #136]	; (1cf04 <__sfvwrite_r+0x300>)
   1ce7a:	0028      	movs	r0, r5
   1ce7c:	429d      	cmp	r5, r3
   1ce7e:	d900      	bls.n	1ce82 <__sfvwrite_r+0x27e>
   1ce80:	0018      	movs	r0, r3
   1ce82:	0039      	movs	r1, r7
   1ce84:	f7fa fc70 	bl	17768 <__divsi3>
   1ce88:	003b      	movs	r3, r7
   1ce8a:	464a      	mov	r2, r9
   1ce8c:	4343      	muls	r3, r0
   1ce8e:	69e1      	ldr	r1, [r4, #28]
   1ce90:	9800      	ldr	r0, [sp, #0]
   1ce92:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1ce94:	47b8      	blx	r7
   1ce96:	2800      	cmp	r0, #0
   1ce98:	dc00      	bgt.n	1ce9c <__sfvwrite_r+0x298>
   1ce9a:	e752      	b.n	1cd42 <__sfvwrite_r+0x13e>
   1ce9c:	0007      	movs	r7, r0
   1ce9e:	e777      	b.n	1cd90 <__sfvwrite_r+0x18c>
   1cea0:	4666      	mov	r6, ip
   1cea2:	4651      	mov	r1, sl
   1cea4:	f000 fc40 	bl	1d728 <memmove>
   1cea8:	46b4      	mov	ip, r6
   1ceaa:	6823      	ldr	r3, [r4, #0]
   1ceac:	0021      	movs	r1, r4
   1ceae:	4463      	add	r3, ip
   1ceb0:	6023      	str	r3, [r4, #0]
   1ceb2:	9800      	ldr	r0, [sp, #0]
   1ceb4:	f7ff fcc4 	bl	1c840 <_fflush_r>
   1ceb8:	2800      	cmp	r0, #0
   1ceba:	d000      	beq.n	1cebe <__sfvwrite_r+0x2ba>
   1cebc:	e741      	b.n	1cd42 <__sfvwrite_r+0x13e>
   1cebe:	9e01      	ldr	r6, [sp, #4]
   1cec0:	e70e      	b.n	1cce0 <__sfvwrite_r+0xdc>
   1cec2:	9800      	ldr	r0, [sp, #0]
   1cec4:	f000 ffd8 	bl	1de78 <_realloc_r>
   1cec8:	4680      	mov	r8, r0
   1ceca:	2800      	cmp	r0, #0
   1cecc:	d1c7      	bne.n	1ce5e <__sfvwrite_r+0x25a>
   1cece:	9d00      	ldr	r5, [sp, #0]
   1ced0:	6921      	ldr	r1, [r4, #16]
   1ced2:	0028      	movs	r0, r5
   1ced4:	f7ff fdb8 	bl	1ca48 <_free_r>
   1ced8:	2280      	movs	r2, #128	; 0x80
   1ceda:	89a3      	ldrh	r3, [r4, #12]
   1cedc:	4393      	bics	r3, r2
   1cede:	3a74      	subs	r2, #116	; 0x74
   1cee0:	b21b      	sxth	r3, r3
   1cee2:	602a      	str	r2, [r5, #0]
   1cee4:	e72f      	b.n	1cd46 <__sfvwrite_r+0x142>
   1cee6:	1c7d      	adds	r5, r7, #1
   1cee8:	e6de      	b.n	1cca8 <__sfvwrite_r+0xa4>
   1ceea:	2001      	movs	r0, #1
   1ceec:	4240      	negs	r0, r0
   1ceee:	e6bd      	b.n	1cc6c <__sfvwrite_r+0x68>
   1cef0:	9a00      	ldr	r2, [sp, #0]
   1cef2:	330c      	adds	r3, #12
   1cef4:	6013      	str	r3, [r2, #0]
   1cef6:	220c      	movs	r2, #12
   1cef8:	5ea3      	ldrsh	r3, [r4, r2]
   1cefa:	e724      	b.n	1cd46 <__sfvwrite_r+0x142>
   1cefc:	7ffffc00 	.word	0x7ffffc00
   1cf00:	fffffb7f 	.word	0xfffffb7f
   1cf04:	7fffffff 	.word	0x7fffffff

0001cf08 <_fwalk_reent>:
   1cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf0a:	4647      	mov	r7, r8
   1cf0c:	46ce      	mov	lr, r9
   1cf0e:	b580      	push	{r7, lr}
   1cf10:	27b8      	movs	r7, #184	; 0xb8
   1cf12:	4680      	mov	r8, r0
   1cf14:	00bf      	lsls	r7, r7, #2
   1cf16:	4447      	add	r7, r8
   1cf18:	4689      	mov	r9, r1
   1cf1a:	2600      	movs	r6, #0
   1cf1c:	2f00      	cmp	r7, #0
   1cf1e:	d014      	beq.n	1cf4a <_fwalk_reent+0x42>
   1cf20:	687b      	ldr	r3, [r7, #4]
   1cf22:	68bc      	ldr	r4, [r7, #8]
   1cf24:	1e5d      	subs	r5, r3, #1
   1cf26:	d40d      	bmi.n	1cf44 <_fwalk_reent+0x3c>
   1cf28:	89a3      	ldrh	r3, [r4, #12]
   1cf2a:	2b01      	cmp	r3, #1
   1cf2c:	d907      	bls.n	1cf3e <_fwalk_reent+0x36>
   1cf2e:	220e      	movs	r2, #14
   1cf30:	5ea3      	ldrsh	r3, [r4, r2]
   1cf32:	3301      	adds	r3, #1
   1cf34:	d003      	beq.n	1cf3e <_fwalk_reent+0x36>
   1cf36:	0021      	movs	r1, r4
   1cf38:	4640      	mov	r0, r8
   1cf3a:	47c8      	blx	r9
   1cf3c:	4306      	orrs	r6, r0
   1cf3e:	3468      	adds	r4, #104	; 0x68
   1cf40:	3d01      	subs	r5, #1
   1cf42:	d2f1      	bcs.n	1cf28 <_fwalk_reent+0x20>
   1cf44:	683f      	ldr	r7, [r7, #0]
   1cf46:	2f00      	cmp	r7, #0
   1cf48:	d1ea      	bne.n	1cf20 <_fwalk_reent+0x18>
   1cf4a:	0030      	movs	r0, r6
   1cf4c:	bc0c      	pop	{r2, r3}
   1cf4e:	4690      	mov	r8, r2
   1cf50:	4699      	mov	r9, r3
   1cf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cf54 <__locale_mb_cur_max>:
   1cf54:	4b05      	ldr	r3, [pc, #20]	; (1cf6c <__locale_mb_cur_max+0x18>)
   1cf56:	681b      	ldr	r3, [r3, #0]
   1cf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1cf5a:	2b00      	cmp	r3, #0
   1cf5c:	d003      	beq.n	1cf66 <__locale_mb_cur_max+0x12>
   1cf5e:	2294      	movs	r2, #148	; 0x94
   1cf60:	0052      	lsls	r2, r2, #1
   1cf62:	5c98      	ldrb	r0, [r3, r2]
   1cf64:	4770      	bx	lr
   1cf66:	4b02      	ldr	r3, [pc, #8]	; (1cf70 <__locale_mb_cur_max+0x1c>)
   1cf68:	e7f9      	b.n	1cf5e <__locale_mb_cur_max+0xa>
   1cf6a:	46c0      	nop			; (mov r8, r8)
   1cf6c:	20000118 	.word	0x20000118
   1cf70:	2000054c 	.word	0x2000054c

0001cf74 <_localeconv_r>:
   1cf74:	4b04      	ldr	r3, [pc, #16]	; (1cf88 <_localeconv_r+0x14>)
   1cf76:	681b      	ldr	r3, [r3, #0]
   1cf78:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1cf7a:	2800      	cmp	r0, #0
   1cf7c:	d001      	beq.n	1cf82 <_localeconv_r+0xe>
   1cf7e:	30f0      	adds	r0, #240	; 0xf0
   1cf80:	4770      	bx	lr
   1cf82:	4802      	ldr	r0, [pc, #8]	; (1cf8c <_localeconv_r+0x18>)
   1cf84:	e7fb      	b.n	1cf7e <_localeconv_r+0xa>
   1cf86:	46c0      	nop			; (mov r8, r8)
   1cf88:	20000118 	.word	0x20000118
   1cf8c:	2000054c 	.word	0x2000054c

0001cf90 <__retarget_lock_init_recursive>:
   1cf90:	4770      	bx	lr
   1cf92:	46c0      	nop			; (mov r8, r8)

0001cf94 <__retarget_lock_close_recursive>:
   1cf94:	4770      	bx	lr
   1cf96:	46c0      	nop			; (mov r8, r8)

0001cf98 <__retarget_lock_acquire_recursive>:
   1cf98:	4770      	bx	lr
   1cf9a:	46c0      	nop			; (mov r8, r8)

0001cf9c <__retarget_lock_release_recursive>:
   1cf9c:	4770      	bx	lr
   1cf9e:	46c0      	nop			; (mov r8, r8)

0001cfa0 <__swhatbuf_r>:
   1cfa0:	b570      	push	{r4, r5, r6, lr}
   1cfa2:	000c      	movs	r4, r1
   1cfa4:	001e      	movs	r6, r3
   1cfa6:	230e      	movs	r3, #14
   1cfa8:	5ec9      	ldrsh	r1, [r1, r3]
   1cfaa:	b090      	sub	sp, #64	; 0x40
   1cfac:	0015      	movs	r5, r2
   1cfae:	2900      	cmp	r1, #0
   1cfb0:	db15      	blt.n	1cfde <__swhatbuf_r+0x3e>
   1cfb2:	aa01      	add	r2, sp, #4
   1cfb4:	f001 fb84 	bl	1e6c0 <_fstat_r>
   1cfb8:	2800      	cmp	r0, #0
   1cfba:	db10      	blt.n	1cfde <__swhatbuf_r+0x3e>
   1cfbc:	22f0      	movs	r2, #240	; 0xf0
   1cfbe:	9b02      	ldr	r3, [sp, #8]
   1cfc0:	0212      	lsls	r2, r2, #8
   1cfc2:	4013      	ands	r3, r2
   1cfc4:	4a0d      	ldr	r2, [pc, #52]	; (1cffc <__swhatbuf_r+0x5c>)
   1cfc6:	2080      	movs	r0, #128	; 0x80
   1cfc8:	4694      	mov	ip, r2
   1cfca:	4463      	add	r3, ip
   1cfcc:	425a      	negs	r2, r3
   1cfce:	4153      	adcs	r3, r2
   1cfd0:	6033      	str	r3, [r6, #0]
   1cfd2:	2380      	movs	r3, #128	; 0x80
   1cfd4:	00db      	lsls	r3, r3, #3
   1cfd6:	602b      	str	r3, [r5, #0]
   1cfd8:	0100      	lsls	r0, r0, #4
   1cfda:	b010      	add	sp, #64	; 0x40
   1cfdc:	bd70      	pop	{r4, r5, r6, pc}
   1cfde:	2300      	movs	r3, #0
   1cfe0:	6033      	str	r3, [r6, #0]
   1cfe2:	89a3      	ldrh	r3, [r4, #12]
   1cfe4:	061b      	lsls	r3, r3, #24
   1cfe6:	d503      	bpl.n	1cff0 <__swhatbuf_r+0x50>
   1cfe8:	2340      	movs	r3, #64	; 0x40
   1cfea:	2000      	movs	r0, #0
   1cfec:	602b      	str	r3, [r5, #0]
   1cfee:	e7f4      	b.n	1cfda <__swhatbuf_r+0x3a>
   1cff0:	2380      	movs	r3, #128	; 0x80
   1cff2:	00db      	lsls	r3, r3, #3
   1cff4:	602b      	str	r3, [r5, #0]
   1cff6:	2000      	movs	r0, #0
   1cff8:	e7ef      	b.n	1cfda <__swhatbuf_r+0x3a>
   1cffa:	46c0      	nop			; (mov r8, r8)
   1cffc:	ffffe000 	.word	0xffffe000

0001d000 <__smakebuf_r>:
   1d000:	b570      	push	{r4, r5, r6, lr}
   1d002:	898b      	ldrh	r3, [r1, #12]
   1d004:	b082      	sub	sp, #8
   1d006:	0006      	movs	r6, r0
   1d008:	000c      	movs	r4, r1
   1d00a:	079b      	lsls	r3, r3, #30
   1d00c:	d507      	bpl.n	1d01e <__smakebuf_r+0x1e>
   1d00e:	0023      	movs	r3, r4
   1d010:	3343      	adds	r3, #67	; 0x43
   1d012:	6023      	str	r3, [r4, #0]
   1d014:	6123      	str	r3, [r4, #16]
   1d016:	2301      	movs	r3, #1
   1d018:	6163      	str	r3, [r4, #20]
   1d01a:	b002      	add	sp, #8
   1d01c:	bd70      	pop	{r4, r5, r6, pc}
   1d01e:	ab01      	add	r3, sp, #4
   1d020:	466a      	mov	r2, sp
   1d022:	f7ff ffbd 	bl	1cfa0 <__swhatbuf_r>
   1d026:	9900      	ldr	r1, [sp, #0]
   1d028:	0005      	movs	r5, r0
   1d02a:	0030      	movs	r0, r6
   1d02c:	f000 f830 	bl	1d090 <_malloc_r>
   1d030:	2800      	cmp	r0, #0
   1d032:	d01e      	beq.n	1d072 <__smakebuf_r+0x72>
   1d034:	2280      	movs	r2, #128	; 0x80
   1d036:	4b15      	ldr	r3, [pc, #84]	; (1d08c <__smakebuf_r+0x8c>)
   1d038:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d03a:	89a3      	ldrh	r3, [r4, #12]
   1d03c:	6020      	str	r0, [r4, #0]
   1d03e:	4313      	orrs	r3, r2
   1d040:	9a00      	ldr	r2, [sp, #0]
   1d042:	b21b      	sxth	r3, r3
   1d044:	6162      	str	r2, [r4, #20]
   1d046:	9a01      	ldr	r2, [sp, #4]
   1d048:	81a3      	strh	r3, [r4, #12]
   1d04a:	6120      	str	r0, [r4, #16]
   1d04c:	2a00      	cmp	r2, #0
   1d04e:	d102      	bne.n	1d056 <__smakebuf_r+0x56>
   1d050:	432b      	orrs	r3, r5
   1d052:	81a3      	strh	r3, [r4, #12]
   1d054:	e7e1      	b.n	1d01a <__smakebuf_r+0x1a>
   1d056:	230e      	movs	r3, #14
   1d058:	5ee1      	ldrsh	r1, [r4, r3]
   1d05a:	0030      	movs	r0, r6
   1d05c:	f001 fb44 	bl	1e6e8 <_isatty_r>
   1d060:	2800      	cmp	r0, #0
   1d062:	d010      	beq.n	1d086 <__smakebuf_r+0x86>
   1d064:	2203      	movs	r2, #3
   1d066:	89a3      	ldrh	r3, [r4, #12]
   1d068:	4393      	bics	r3, r2
   1d06a:	2201      	movs	r2, #1
   1d06c:	4313      	orrs	r3, r2
   1d06e:	b21b      	sxth	r3, r3
   1d070:	e7ee      	b.n	1d050 <__smakebuf_r+0x50>
   1d072:	220c      	movs	r2, #12
   1d074:	5ea3      	ldrsh	r3, [r4, r2]
   1d076:	059a      	lsls	r2, r3, #22
   1d078:	d4cf      	bmi.n	1d01a <__smakebuf_r+0x1a>
   1d07a:	2203      	movs	r2, #3
   1d07c:	4393      	bics	r3, r2
   1d07e:	2202      	movs	r2, #2
   1d080:	4313      	orrs	r3, r2
   1d082:	81a3      	strh	r3, [r4, #12]
   1d084:	e7c3      	b.n	1d00e <__smakebuf_r+0xe>
   1d086:	220c      	movs	r2, #12
   1d088:	5ea3      	ldrsh	r3, [r4, r2]
   1d08a:	e7e1      	b.n	1d050 <__smakebuf_r+0x50>
   1d08c:	0001c895 	.word	0x0001c895

0001d090 <_malloc_r>:
   1d090:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d092:	4657      	mov	r7, sl
   1d094:	4645      	mov	r5, r8
   1d096:	46de      	mov	lr, fp
   1d098:	464e      	mov	r6, r9
   1d09a:	b5e0      	push	{r5, r6, r7, lr}
   1d09c:	000d      	movs	r5, r1
   1d09e:	350b      	adds	r5, #11
   1d0a0:	b083      	sub	sp, #12
   1d0a2:	0007      	movs	r7, r0
   1d0a4:	2d16      	cmp	r5, #22
   1d0a6:	d800      	bhi.n	1d0aa <_malloc_r+0x1a>
   1d0a8:	e09f      	b.n	1d1ea <_malloc_r+0x15a>
   1d0aa:	2307      	movs	r3, #7
   1d0ac:	439d      	bics	r5, r3
   1d0ae:	d500      	bpl.n	1d0b2 <_malloc_r+0x22>
   1d0b0:	e0c4      	b.n	1d23c <_malloc_r+0x1ac>
   1d0b2:	42a9      	cmp	r1, r5
   1d0b4:	d900      	bls.n	1d0b8 <_malloc_r+0x28>
   1d0b6:	e0c1      	b.n	1d23c <_malloc_r+0x1ac>
   1d0b8:	f000 fb86 	bl	1d7c8 <__malloc_lock>
   1d0bc:	23f8      	movs	r3, #248	; 0xf8
   1d0be:	33ff      	adds	r3, #255	; 0xff
   1d0c0:	429d      	cmp	r5, r3
   1d0c2:	d800      	bhi.n	1d0c6 <_malloc_r+0x36>
   1d0c4:	e28f      	b.n	1d5e6 <_malloc_r+0x556>
   1d0c6:	0a68      	lsrs	r0, r5, #9
   1d0c8:	d100      	bne.n	1d0cc <_malloc_r+0x3c>
   1d0ca:	e0bb      	b.n	1d244 <_malloc_r+0x1b4>
   1d0cc:	2804      	cmp	r0, #4
   1d0ce:	d900      	bls.n	1d0d2 <_malloc_r+0x42>
   1d0d0:	e162      	b.n	1d398 <_malloc_r+0x308>
   1d0d2:	2338      	movs	r3, #56	; 0x38
   1d0d4:	4698      	mov	r8, r3
   1d0d6:	09a8      	lsrs	r0, r5, #6
   1d0d8:	4480      	add	r8, r0
   1d0da:	3039      	adds	r0, #57	; 0x39
   1d0dc:	00c1      	lsls	r1, r0, #3
   1d0de:	4ed2      	ldr	r6, [pc, #840]	; (1d428 <_malloc_r+0x398>)
   1d0e0:	1871      	adds	r1, r6, r1
   1d0e2:	3908      	subs	r1, #8
   1d0e4:	68cc      	ldr	r4, [r1, #12]
   1d0e6:	42a1      	cmp	r1, r4
   1d0e8:	d019      	beq.n	1d11e <_malloc_r+0x8e>
   1d0ea:	2303      	movs	r3, #3
   1d0ec:	6862      	ldr	r2, [r4, #4]
   1d0ee:	439a      	bics	r2, r3
   1d0f0:	0013      	movs	r3, r2
   1d0f2:	1b52      	subs	r2, r2, r5
   1d0f4:	2a0f      	cmp	r2, #15
   1d0f6:	dd00      	ble.n	1d0fa <_malloc_r+0x6a>
   1d0f8:	e0aa      	b.n	1d250 <_malloc_r+0x1c0>
   1d0fa:	2a00      	cmp	r2, #0
   1d0fc:	db00      	blt.n	1d100 <_malloc_r+0x70>
   1d0fe:	e088      	b.n	1d212 <_malloc_r+0x182>
   1d100:	2303      	movs	r3, #3
   1d102:	469c      	mov	ip, r3
   1d104:	e008      	b.n	1d118 <_malloc_r+0x88>
   1d106:	4662      	mov	r2, ip
   1d108:	6863      	ldr	r3, [r4, #4]
   1d10a:	4393      	bics	r3, r2
   1d10c:	1b5a      	subs	r2, r3, r5
   1d10e:	2a0f      	cmp	r2, #15
   1d110:	dd00      	ble.n	1d114 <_malloc_r+0x84>
   1d112:	e09d      	b.n	1d250 <_malloc_r+0x1c0>
   1d114:	2a00      	cmp	r2, #0
   1d116:	da7c      	bge.n	1d212 <_malloc_r+0x182>
   1d118:	68e4      	ldr	r4, [r4, #12]
   1d11a:	42a1      	cmp	r1, r4
   1d11c:	d1f3      	bne.n	1d106 <_malloc_r+0x76>
   1d11e:	0032      	movs	r2, r6
   1d120:	6934      	ldr	r4, [r6, #16]
   1d122:	3208      	adds	r2, #8
   1d124:	4294      	cmp	r4, r2
   1d126:	d100      	bne.n	1d12a <_malloc_r+0x9a>
   1d128:	e190      	b.n	1d44c <_malloc_r+0x3bc>
   1d12a:	2303      	movs	r3, #3
   1d12c:	6861      	ldr	r1, [r4, #4]
   1d12e:	4399      	bics	r1, r3
   1d130:	4689      	mov	r9, r1
   1d132:	1b49      	subs	r1, r1, r5
   1d134:	290f      	cmp	r1, #15
   1d136:	dd00      	ble.n	1d13a <_malloc_r+0xaa>
   1d138:	e162      	b.n	1d400 <_malloc_r+0x370>
   1d13a:	6172      	str	r2, [r6, #20]
   1d13c:	6132      	str	r2, [r6, #16]
   1d13e:	2900      	cmp	r1, #0
   1d140:	db00      	blt.n	1d144 <_malloc_r+0xb4>
   1d142:	e087      	b.n	1d254 <_malloc_r+0x1c4>
   1d144:	4ab9      	ldr	r2, [pc, #740]	; (1d42c <_malloc_r+0x39c>)
   1d146:	464b      	mov	r3, r9
   1d148:	4591      	cmp	r9, r2
   1d14a:	d900      	bls.n	1d14e <_malloc_r+0xbe>
   1d14c:	e130      	b.n	1d3b0 <_malloc_r+0x320>
   1d14e:	08db      	lsrs	r3, r3, #3
   1d150:	3aff      	subs	r2, #255	; 0xff
   1d152:	1099      	asrs	r1, r3, #2
   1d154:	3aff      	subs	r2, #255	; 0xff
   1d156:	408a      	lsls	r2, r1
   1d158:	00db      	lsls	r3, r3, #3
   1d15a:	6871      	ldr	r1, [r6, #4]
   1d15c:	199b      	adds	r3, r3, r6
   1d15e:	430a      	orrs	r2, r1
   1d160:	6899      	ldr	r1, [r3, #8]
   1d162:	6072      	str	r2, [r6, #4]
   1d164:	60e3      	str	r3, [r4, #12]
   1d166:	60a1      	str	r1, [r4, #8]
   1d168:	609c      	str	r4, [r3, #8]
   1d16a:	0013      	movs	r3, r2
   1d16c:	60cc      	str	r4, [r1, #12]
   1d16e:	2101      	movs	r1, #1
   1d170:	1082      	asrs	r2, r0, #2
   1d172:	4091      	lsls	r1, r2
   1d174:	4299      	cmp	r1, r3
   1d176:	d86f      	bhi.n	1d258 <_malloc_r+0x1c8>
   1d178:	420b      	tst	r3, r1
   1d17a:	d105      	bne.n	1d188 <_malloc_r+0xf8>
   1d17c:	2203      	movs	r2, #3
   1d17e:	4390      	bics	r0, r2
   1d180:	0049      	lsls	r1, r1, #1
   1d182:	3004      	adds	r0, #4
   1d184:	420b      	tst	r3, r1
   1d186:	d0fb      	beq.n	1d180 <_malloc_r+0xf0>
   1d188:	2303      	movs	r3, #3
   1d18a:	4698      	mov	r8, r3
   1d18c:	00c3      	lsls	r3, r0, #3
   1d18e:	4699      	mov	r9, r3
   1d190:	44b1      	add	r9, r6
   1d192:	46cc      	mov	ip, r9
   1d194:	4682      	mov	sl, r0
   1d196:	4663      	mov	r3, ip
   1d198:	68dc      	ldr	r4, [r3, #12]
   1d19a:	45a4      	cmp	ip, r4
   1d19c:	d107      	bne.n	1d1ae <_malloc_r+0x11e>
   1d19e:	e157      	b.n	1d450 <_malloc_r+0x3c0>
   1d1a0:	2a00      	cmp	r2, #0
   1d1a2:	db00      	blt.n	1d1a6 <_malloc_r+0x116>
   1d1a4:	e166      	b.n	1d474 <_malloc_r+0x3e4>
   1d1a6:	68e4      	ldr	r4, [r4, #12]
   1d1a8:	45a4      	cmp	ip, r4
   1d1aa:	d100      	bne.n	1d1ae <_malloc_r+0x11e>
   1d1ac:	e150      	b.n	1d450 <_malloc_r+0x3c0>
   1d1ae:	4642      	mov	r2, r8
   1d1b0:	6863      	ldr	r3, [r4, #4]
   1d1b2:	4393      	bics	r3, r2
   1d1b4:	1b5a      	subs	r2, r3, r5
   1d1b6:	2a0f      	cmp	r2, #15
   1d1b8:	ddf2      	ble.n	1d1a0 <_malloc_r+0x110>
   1d1ba:	2001      	movs	r0, #1
   1d1bc:	4680      	mov	r8, r0
   1d1be:	1961      	adds	r1, r4, r5
   1d1c0:	4305      	orrs	r5, r0
   1d1c2:	6065      	str	r5, [r4, #4]
   1d1c4:	68a0      	ldr	r0, [r4, #8]
   1d1c6:	68e5      	ldr	r5, [r4, #12]
   1d1c8:	3608      	adds	r6, #8
   1d1ca:	60c5      	str	r5, [r0, #12]
   1d1cc:	60a8      	str	r0, [r5, #8]
   1d1ce:	4640      	mov	r0, r8
   1d1d0:	60f1      	str	r1, [r6, #12]
   1d1d2:	60b1      	str	r1, [r6, #8]
   1d1d4:	4310      	orrs	r0, r2
   1d1d6:	6048      	str	r0, [r1, #4]
   1d1d8:	60ce      	str	r6, [r1, #12]
   1d1da:	608e      	str	r6, [r1, #8]
   1d1dc:	0038      	movs	r0, r7
   1d1de:	50e2      	str	r2, [r4, r3]
   1d1e0:	f000 fafa 	bl	1d7d8 <__malloc_unlock>
   1d1e4:	0020      	movs	r0, r4
   1d1e6:	3008      	adds	r0, #8
   1d1e8:	e021      	b.n	1d22e <_malloc_r+0x19e>
   1d1ea:	2910      	cmp	r1, #16
   1d1ec:	d826      	bhi.n	1d23c <_malloc_r+0x1ac>
   1d1ee:	0038      	movs	r0, r7
   1d1f0:	f000 faea 	bl	1d7c8 <__malloc_lock>
   1d1f4:	2510      	movs	r5, #16
   1d1f6:	2318      	movs	r3, #24
   1d1f8:	2002      	movs	r0, #2
   1d1fa:	4e8b      	ldr	r6, [pc, #556]	; (1d428 <_malloc_r+0x398>)
   1d1fc:	18f3      	adds	r3, r6, r3
   1d1fe:	001a      	movs	r2, r3
   1d200:	685c      	ldr	r4, [r3, #4]
   1d202:	3a08      	subs	r2, #8
   1d204:	4294      	cmp	r4, r2
   1d206:	d100      	bne.n	1d20a <_malloc_r+0x17a>
   1d208:	e12e      	b.n	1d468 <_malloc_r+0x3d8>
   1d20a:	2303      	movs	r3, #3
   1d20c:	6862      	ldr	r2, [r4, #4]
   1d20e:	439a      	bics	r2, r3
   1d210:	0013      	movs	r3, r2
   1d212:	68e2      	ldr	r2, [r4, #12]
   1d214:	68a1      	ldr	r1, [r4, #8]
   1d216:	60ca      	str	r2, [r1, #12]
   1d218:	6091      	str	r1, [r2, #8]
   1d21a:	2201      	movs	r2, #1
   1d21c:	18e3      	adds	r3, r4, r3
   1d21e:	6859      	ldr	r1, [r3, #4]
   1d220:	0038      	movs	r0, r7
   1d222:	430a      	orrs	r2, r1
   1d224:	605a      	str	r2, [r3, #4]
   1d226:	f000 fad7 	bl	1d7d8 <__malloc_unlock>
   1d22a:	0020      	movs	r0, r4
   1d22c:	3008      	adds	r0, #8
   1d22e:	b003      	add	sp, #12
   1d230:	bc3c      	pop	{r2, r3, r4, r5}
   1d232:	4690      	mov	r8, r2
   1d234:	4699      	mov	r9, r3
   1d236:	46a2      	mov	sl, r4
   1d238:	46ab      	mov	fp, r5
   1d23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d23c:	230c      	movs	r3, #12
   1d23e:	2000      	movs	r0, #0
   1d240:	603b      	str	r3, [r7, #0]
   1d242:	e7f4      	b.n	1d22e <_malloc_r+0x19e>
   1d244:	2180      	movs	r1, #128	; 0x80
   1d246:	233f      	movs	r3, #63	; 0x3f
   1d248:	2040      	movs	r0, #64	; 0x40
   1d24a:	0089      	lsls	r1, r1, #2
   1d24c:	4698      	mov	r8, r3
   1d24e:	e746      	b.n	1d0de <_malloc_r+0x4e>
   1d250:	4640      	mov	r0, r8
   1d252:	e764      	b.n	1d11e <_malloc_r+0x8e>
   1d254:	464b      	mov	r3, r9
   1d256:	e7e0      	b.n	1d21a <_malloc_r+0x18a>
   1d258:	2303      	movs	r3, #3
   1d25a:	68b4      	ldr	r4, [r6, #8]
   1d25c:	6862      	ldr	r2, [r4, #4]
   1d25e:	439a      	bics	r2, r3
   1d260:	4690      	mov	r8, r2
   1d262:	42aa      	cmp	r2, r5
   1d264:	d303      	bcc.n	1d26e <_malloc_r+0x1de>
   1d266:	1b53      	subs	r3, r2, r5
   1d268:	2b0f      	cmp	r3, #15
   1d26a:	dd00      	ble.n	1d26e <_malloc_r+0x1de>
   1d26c:	e086      	b.n	1d37c <_malloc_r+0x2ec>
   1d26e:	0023      	movs	r3, r4
   1d270:	4443      	add	r3, r8
   1d272:	4a6f      	ldr	r2, [pc, #444]	; (1d430 <_malloc_r+0x3a0>)
   1d274:	9301      	str	r3, [sp, #4]
   1d276:	4b6f      	ldr	r3, [pc, #444]	; (1d434 <_malloc_r+0x3a4>)
   1d278:	4693      	mov	fp, r2
   1d27a:	681b      	ldr	r3, [r3, #0]
   1d27c:	6812      	ldr	r2, [r2, #0]
   1d27e:	18eb      	adds	r3, r5, r3
   1d280:	3201      	adds	r2, #1
   1d282:	d100      	bne.n	1d286 <_malloc_r+0x1f6>
   1d284:	e168      	b.n	1d558 <_malloc_r+0x4c8>
   1d286:	4a6c      	ldr	r2, [pc, #432]	; (1d438 <_malloc_r+0x3a8>)
   1d288:	4694      	mov	ip, r2
   1d28a:	4463      	add	r3, ip
   1d28c:	0b1b      	lsrs	r3, r3, #12
   1d28e:	031b      	lsls	r3, r3, #12
   1d290:	9300      	str	r3, [sp, #0]
   1d292:	9900      	ldr	r1, [sp, #0]
   1d294:	0038      	movs	r0, r7
   1d296:	f000 ffad 	bl	1e1f4 <_sbrk_r>
   1d29a:	0003      	movs	r3, r0
   1d29c:	4681      	mov	r9, r0
   1d29e:	3301      	adds	r3, #1
   1d2a0:	d061      	beq.n	1d366 <_malloc_r+0x2d6>
   1d2a2:	9b01      	ldr	r3, [sp, #4]
   1d2a4:	4283      	cmp	r3, r0
   1d2a6:	d900      	bls.n	1d2aa <_malloc_r+0x21a>
   1d2a8:	e0ff      	b.n	1d4aa <_malloc_r+0x41a>
   1d2aa:	4b64      	ldr	r3, [pc, #400]	; (1d43c <_malloc_r+0x3ac>)
   1d2ac:	9a00      	ldr	r2, [sp, #0]
   1d2ae:	469a      	mov	sl, r3
   1d2b0:	681b      	ldr	r3, [r3, #0]
   1d2b2:	469c      	mov	ip, r3
   1d2b4:	4653      	mov	r3, sl
   1d2b6:	4462      	add	r2, ip
   1d2b8:	601a      	str	r2, [r3, #0]
   1d2ba:	9b01      	ldr	r3, [sp, #4]
   1d2bc:	0011      	movs	r1, r2
   1d2be:	4283      	cmp	r3, r0
   1d2c0:	d100      	bne.n	1d2c4 <_malloc_r+0x234>
   1d2c2:	e155      	b.n	1d570 <_malloc_r+0x4e0>
   1d2c4:	465b      	mov	r3, fp
   1d2c6:	681b      	ldr	r3, [r3, #0]
   1d2c8:	3301      	adds	r3, #1
   1d2ca:	d100      	bne.n	1d2ce <_malloc_r+0x23e>
   1d2cc:	e16c      	b.n	1d5a8 <_malloc_r+0x518>
   1d2ce:	464b      	mov	r3, r9
   1d2d0:	9a01      	ldr	r2, [sp, #4]
   1d2d2:	1a9b      	subs	r3, r3, r2
   1d2d4:	1859      	adds	r1, r3, r1
   1d2d6:	4653      	mov	r3, sl
   1d2d8:	6019      	str	r1, [r3, #0]
   1d2da:	2307      	movs	r3, #7
   1d2dc:	464a      	mov	r2, r9
   1d2de:	4013      	ands	r3, r2
   1d2e0:	d100      	bne.n	1d2e4 <_malloc_r+0x254>
   1d2e2:	e124      	b.n	1d52e <_malloc_r+0x49e>
   1d2e4:	2108      	movs	r1, #8
   1d2e6:	4689      	mov	r9, r1
   1d2e8:	4955      	ldr	r1, [pc, #340]	; (1d440 <_malloc_r+0x3b0>)
   1d2ea:	1ad2      	subs	r2, r2, r3
   1d2ec:	4491      	add	r9, r2
   1d2ee:	1acb      	subs	r3, r1, r3
   1d2f0:	9a00      	ldr	r2, [sp, #0]
   1d2f2:	0038      	movs	r0, r7
   1d2f4:	444a      	add	r2, r9
   1d2f6:	0511      	lsls	r1, r2, #20
   1d2f8:	0d09      	lsrs	r1, r1, #20
   1d2fa:	1a5b      	subs	r3, r3, r1
   1d2fc:	0019      	movs	r1, r3
   1d2fe:	469b      	mov	fp, r3
   1d300:	f000 ff78 	bl	1e1f4 <_sbrk_r>
   1d304:	1c43      	adds	r3, r0, #1
   1d306:	d100      	bne.n	1d30a <_malloc_r+0x27a>
   1d308:	e142      	b.n	1d590 <_malloc_r+0x500>
   1d30a:	464b      	mov	r3, r9
   1d30c:	1ac0      	subs	r0, r0, r3
   1d30e:	2301      	movs	r3, #1
   1d310:	4458      	add	r0, fp
   1d312:	4318      	orrs	r0, r3
   1d314:	4653      	mov	r3, sl
   1d316:	681b      	ldr	r3, [r3, #0]
   1d318:	445b      	add	r3, fp
   1d31a:	0019      	movs	r1, r3
   1d31c:	4653      	mov	r3, sl
   1d31e:	6019      	str	r1, [r3, #0]
   1d320:	464b      	mov	r3, r9
   1d322:	60b3      	str	r3, [r6, #8]
   1d324:	6058      	str	r0, [r3, #4]
   1d326:	42b4      	cmp	r4, r6
   1d328:	d013      	beq.n	1d352 <_malloc_r+0x2c2>
   1d32a:	4643      	mov	r3, r8
   1d32c:	2b0f      	cmp	r3, #15
   1d32e:	d800      	bhi.n	1d332 <_malloc_r+0x2a2>
   1d330:	e0e8      	b.n	1d504 <_malloc_r+0x474>
   1d332:	4643      	mov	r3, r8
   1d334:	2207      	movs	r2, #7
   1d336:	6860      	ldr	r0, [r4, #4]
   1d338:	3b0c      	subs	r3, #12
   1d33a:	4393      	bics	r3, r2
   1d33c:	3a06      	subs	r2, #6
   1d33e:	4002      	ands	r2, r0
   1d340:	2005      	movs	r0, #5
   1d342:	431a      	orrs	r2, r3
   1d344:	6062      	str	r2, [r4, #4]
   1d346:	18e2      	adds	r2, r4, r3
   1d348:	6050      	str	r0, [r2, #4]
   1d34a:	6090      	str	r0, [r2, #8]
   1d34c:	2b0f      	cmp	r3, #15
   1d34e:	d900      	bls.n	1d352 <_malloc_r+0x2c2>
   1d350:	e122      	b.n	1d598 <_malloc_r+0x508>
   1d352:	4b3c      	ldr	r3, [pc, #240]	; (1d444 <_malloc_r+0x3b4>)
   1d354:	681a      	ldr	r2, [r3, #0]
   1d356:	4291      	cmp	r1, r2
   1d358:	d900      	bls.n	1d35c <_malloc_r+0x2cc>
   1d35a:	6019      	str	r1, [r3, #0]
   1d35c:	4b3a      	ldr	r3, [pc, #232]	; (1d448 <_malloc_r+0x3b8>)
   1d35e:	681a      	ldr	r2, [r3, #0]
   1d360:	4291      	cmp	r1, r2
   1d362:	d900      	bls.n	1d366 <_malloc_r+0x2d6>
   1d364:	6019      	str	r1, [r3, #0]
   1d366:	2303      	movs	r3, #3
   1d368:	68b4      	ldr	r4, [r6, #8]
   1d36a:	6862      	ldr	r2, [r4, #4]
   1d36c:	439a      	bics	r2, r3
   1d36e:	1b53      	subs	r3, r2, r5
   1d370:	4295      	cmp	r5, r2
   1d372:	d900      	bls.n	1d376 <_malloc_r+0x2e6>
   1d374:	e0c9      	b.n	1d50a <_malloc_r+0x47a>
   1d376:	2b0f      	cmp	r3, #15
   1d378:	dc00      	bgt.n	1d37c <_malloc_r+0x2ec>
   1d37a:	e0c6      	b.n	1d50a <_malloc_r+0x47a>
   1d37c:	2201      	movs	r2, #1
   1d37e:	0029      	movs	r1, r5
   1d380:	4313      	orrs	r3, r2
   1d382:	4311      	orrs	r1, r2
   1d384:	1965      	adds	r5, r4, r5
   1d386:	6061      	str	r1, [r4, #4]
   1d388:	0038      	movs	r0, r7
   1d38a:	60b5      	str	r5, [r6, #8]
   1d38c:	606b      	str	r3, [r5, #4]
   1d38e:	f000 fa23 	bl	1d7d8 <__malloc_unlock>
   1d392:	0020      	movs	r0, r4
   1d394:	3008      	adds	r0, #8
   1d396:	e74a      	b.n	1d22e <_malloc_r+0x19e>
   1d398:	2814      	cmp	r0, #20
   1d39a:	d97a      	bls.n	1d492 <_malloc_r+0x402>
   1d39c:	2854      	cmp	r0, #84	; 0x54
   1d39e:	d900      	bls.n	1d3a2 <_malloc_r+0x312>
   1d3a0:	e0ba      	b.n	1d518 <_malloc_r+0x488>
   1d3a2:	236e      	movs	r3, #110	; 0x6e
   1d3a4:	4698      	mov	r8, r3
   1d3a6:	0b28      	lsrs	r0, r5, #12
   1d3a8:	4480      	add	r8, r0
   1d3aa:	306f      	adds	r0, #111	; 0x6f
   1d3ac:	00c1      	lsls	r1, r0, #3
   1d3ae:	e696      	b.n	1d0de <_malloc_r+0x4e>
   1d3b0:	0a5a      	lsrs	r2, r3, #9
   1d3b2:	2a04      	cmp	r2, #4
   1d3b4:	d973      	bls.n	1d49e <_malloc_r+0x40e>
   1d3b6:	2a14      	cmp	r2, #20
   1d3b8:	d900      	bls.n	1d3bc <_malloc_r+0x32c>
   1d3ba:	e0d0      	b.n	1d55e <_malloc_r+0x4ce>
   1d3bc:	0011      	movs	r1, r2
   1d3be:	325c      	adds	r2, #92	; 0x5c
   1d3c0:	315b      	adds	r1, #91	; 0x5b
   1d3c2:	00d2      	lsls	r2, r2, #3
   1d3c4:	2308      	movs	r3, #8
   1d3c6:	425b      	negs	r3, r3
   1d3c8:	469c      	mov	ip, r3
   1d3ca:	18b2      	adds	r2, r6, r2
   1d3cc:	4494      	add	ip, r2
   1d3ce:	4663      	mov	r3, ip
   1d3d0:	689a      	ldr	r2, [r3, #8]
   1d3d2:	2303      	movs	r3, #3
   1d3d4:	4698      	mov	r8, r3
   1d3d6:	4594      	cmp	ip, r2
   1d3d8:	d100      	bne.n	1d3dc <_malloc_r+0x34c>
   1d3da:	e0ab      	b.n	1d534 <_malloc_r+0x4a4>
   1d3dc:	4643      	mov	r3, r8
   1d3de:	6851      	ldr	r1, [r2, #4]
   1d3e0:	4399      	bics	r1, r3
   1d3e2:	4589      	cmp	r9, r1
   1d3e4:	d300      	bcc.n	1d3e8 <_malloc_r+0x358>
   1d3e6:	e095      	b.n	1d514 <_malloc_r+0x484>
   1d3e8:	6892      	ldr	r2, [r2, #8]
   1d3ea:	4594      	cmp	ip, r2
   1d3ec:	d1f6      	bne.n	1d3dc <_malloc_r+0x34c>
   1d3ee:	4663      	mov	r3, ip
   1d3f0:	68da      	ldr	r2, [r3, #12]
   1d3f2:	6873      	ldr	r3, [r6, #4]
   1d3f4:	4661      	mov	r1, ip
   1d3f6:	60e2      	str	r2, [r4, #12]
   1d3f8:	60a1      	str	r1, [r4, #8]
   1d3fa:	6094      	str	r4, [r2, #8]
   1d3fc:	60cc      	str	r4, [r1, #12]
   1d3fe:	e6b6      	b.n	1d16e <_malloc_r+0xde>
   1d400:	2301      	movs	r3, #1
   1d402:	1960      	adds	r0, r4, r5
   1d404:	431d      	orrs	r5, r3
   1d406:	6065      	str	r5, [r4, #4]
   1d408:	6170      	str	r0, [r6, #20]
   1d40a:	6130      	str	r0, [r6, #16]
   1d40c:	60c2      	str	r2, [r0, #12]
   1d40e:	6082      	str	r2, [r0, #8]
   1d410:	001a      	movs	r2, r3
   1d412:	464b      	mov	r3, r9
   1d414:	430a      	orrs	r2, r1
   1d416:	6042      	str	r2, [r0, #4]
   1d418:	0038      	movs	r0, r7
   1d41a:	50e1      	str	r1, [r4, r3]
   1d41c:	f000 f9dc 	bl	1d7d8 <__malloc_unlock>
   1d420:	0020      	movs	r0, r4
   1d422:	3008      	adds	r0, #8
   1d424:	e703      	b.n	1d22e <_malloc_r+0x19e>
   1d426:	46c0      	nop			; (mov r8, r8)
   1d428:	200006b8 	.word	0x200006b8
   1d42c:	000001ff 	.word	0x000001ff
   1d430:	20000ac0 	.word	0x20000ac0
   1d434:	20001b00 	.word	0x20001b00
   1d438:	0000100f 	.word	0x0000100f
   1d43c:	20001ad0 	.word	0x20001ad0
   1d440:	00001008 	.word	0x00001008
   1d444:	20001af8 	.word	0x20001af8
   1d448:	20001afc 	.word	0x20001afc
   1d44c:	6873      	ldr	r3, [r6, #4]
   1d44e:	e68e      	b.n	1d16e <_malloc_r+0xde>
   1d450:	2308      	movs	r3, #8
   1d452:	469b      	mov	fp, r3
   1d454:	3b07      	subs	r3, #7
   1d456:	44dc      	add	ip, fp
   1d458:	469b      	mov	fp, r3
   1d45a:	44da      	add	sl, fp
   1d45c:	4643      	mov	r3, r8
   1d45e:	4652      	mov	r2, sl
   1d460:	4213      	tst	r3, r2
   1d462:	d000      	beq.n	1d466 <_malloc_r+0x3d6>
   1d464:	e697      	b.n	1d196 <_malloc_r+0x106>
   1d466:	e037      	b.n	1d4d8 <_malloc_r+0x448>
   1d468:	68dc      	ldr	r4, [r3, #12]
   1d46a:	3002      	adds	r0, #2
   1d46c:	42a3      	cmp	r3, r4
   1d46e:	d100      	bne.n	1d472 <_malloc_r+0x3e2>
   1d470:	e655      	b.n	1d11e <_malloc_r+0x8e>
   1d472:	e6ca      	b.n	1d20a <_malloc_r+0x17a>
   1d474:	2201      	movs	r2, #1
   1d476:	18e3      	adds	r3, r4, r3
   1d478:	6859      	ldr	r1, [r3, #4]
   1d47a:	0038      	movs	r0, r7
   1d47c:	430a      	orrs	r2, r1
   1d47e:	605a      	str	r2, [r3, #4]
   1d480:	68e3      	ldr	r3, [r4, #12]
   1d482:	68a2      	ldr	r2, [r4, #8]
   1d484:	60d3      	str	r3, [r2, #12]
   1d486:	609a      	str	r2, [r3, #8]
   1d488:	f000 f9a6 	bl	1d7d8 <__malloc_unlock>
   1d48c:	0020      	movs	r0, r4
   1d48e:	3008      	adds	r0, #8
   1d490:	e6cd      	b.n	1d22e <_malloc_r+0x19e>
   1d492:	235b      	movs	r3, #91	; 0x5b
   1d494:	4698      	mov	r8, r3
   1d496:	4480      	add	r8, r0
   1d498:	305c      	adds	r0, #92	; 0x5c
   1d49a:	00c1      	lsls	r1, r0, #3
   1d49c:	e61f      	b.n	1d0de <_malloc_r+0x4e>
   1d49e:	099a      	lsrs	r2, r3, #6
   1d4a0:	0011      	movs	r1, r2
   1d4a2:	3239      	adds	r2, #57	; 0x39
   1d4a4:	3138      	adds	r1, #56	; 0x38
   1d4a6:	00d2      	lsls	r2, r2, #3
   1d4a8:	e78c      	b.n	1d3c4 <_malloc_r+0x334>
   1d4aa:	42b4      	cmp	r4, r6
   1d4ac:	d000      	beq.n	1d4b0 <_malloc_r+0x420>
   1d4ae:	e75a      	b.n	1d366 <_malloc_r+0x2d6>
   1d4b0:	4b4f      	ldr	r3, [pc, #316]	; (1d5f0 <_malloc_r+0x560>)
   1d4b2:	9a00      	ldr	r2, [sp, #0]
   1d4b4:	469a      	mov	sl, r3
   1d4b6:	681b      	ldr	r3, [r3, #0]
   1d4b8:	469c      	mov	ip, r3
   1d4ba:	4653      	mov	r3, sl
   1d4bc:	4462      	add	r2, ip
   1d4be:	0011      	movs	r1, r2
   1d4c0:	601a      	str	r2, [r3, #0]
   1d4c2:	e6ff      	b.n	1d2c4 <_malloc_r+0x234>
   1d4c4:	2308      	movs	r3, #8
   1d4c6:	425b      	negs	r3, r3
   1d4c8:	469c      	mov	ip, r3
   1d4ca:	44e1      	add	r9, ip
   1d4cc:	464b      	mov	r3, r9
   1d4ce:	689b      	ldr	r3, [r3, #8]
   1d4d0:	3801      	subs	r0, #1
   1d4d2:	4599      	cmp	r9, r3
   1d4d4:	d000      	beq.n	1d4d8 <_malloc_r+0x448>
   1d4d6:	e084      	b.n	1d5e2 <_malloc_r+0x552>
   1d4d8:	4643      	mov	r3, r8
   1d4da:	4203      	tst	r3, r0
   1d4dc:	d1f2      	bne.n	1d4c4 <_malloc_r+0x434>
   1d4de:	6873      	ldr	r3, [r6, #4]
   1d4e0:	438b      	bics	r3, r1
   1d4e2:	6073      	str	r3, [r6, #4]
   1d4e4:	0049      	lsls	r1, r1, #1
   1d4e6:	4299      	cmp	r1, r3
   1d4e8:	d900      	bls.n	1d4ec <_malloc_r+0x45c>
   1d4ea:	e6b5      	b.n	1d258 <_malloc_r+0x1c8>
   1d4ec:	2900      	cmp	r1, #0
   1d4ee:	d100      	bne.n	1d4f2 <_malloc_r+0x462>
   1d4f0:	e6b2      	b.n	1d258 <_malloc_r+0x1c8>
   1d4f2:	4650      	mov	r0, sl
   1d4f4:	420b      	tst	r3, r1
   1d4f6:	d000      	beq.n	1d4fa <_malloc_r+0x46a>
   1d4f8:	e648      	b.n	1d18c <_malloc_r+0xfc>
   1d4fa:	0049      	lsls	r1, r1, #1
   1d4fc:	3004      	adds	r0, #4
   1d4fe:	420b      	tst	r3, r1
   1d500:	d0fb      	beq.n	1d4fa <_malloc_r+0x46a>
   1d502:	e643      	b.n	1d18c <_malloc_r+0xfc>
   1d504:	2301      	movs	r3, #1
   1d506:	464a      	mov	r2, r9
   1d508:	6053      	str	r3, [r2, #4]
   1d50a:	0038      	movs	r0, r7
   1d50c:	f000 f964 	bl	1d7d8 <__malloc_unlock>
   1d510:	2000      	movs	r0, #0
   1d512:	e68c      	b.n	1d22e <_malloc_r+0x19e>
   1d514:	4694      	mov	ip, r2
   1d516:	e76a      	b.n	1d3ee <_malloc_r+0x35e>
   1d518:	23aa      	movs	r3, #170	; 0xaa
   1d51a:	005b      	lsls	r3, r3, #1
   1d51c:	4298      	cmp	r0, r3
   1d51e:	d811      	bhi.n	1d544 <_malloc_r+0x4b4>
   1d520:	3bdd      	subs	r3, #221	; 0xdd
   1d522:	4698      	mov	r8, r3
   1d524:	0be8      	lsrs	r0, r5, #15
   1d526:	4480      	add	r8, r0
   1d528:	3078      	adds	r0, #120	; 0x78
   1d52a:	00c1      	lsls	r1, r0, #3
   1d52c:	e5d7      	b.n	1d0de <_malloc_r+0x4e>
   1d52e:	2380      	movs	r3, #128	; 0x80
   1d530:	015b      	lsls	r3, r3, #5
   1d532:	e6dd      	b.n	1d2f0 <_malloc_r+0x260>
   1d534:	1089      	asrs	r1, r1, #2
   1d536:	3b02      	subs	r3, #2
   1d538:	408b      	lsls	r3, r1
   1d53a:	6872      	ldr	r2, [r6, #4]
   1d53c:	4313      	orrs	r3, r2
   1d53e:	6073      	str	r3, [r6, #4]
   1d540:	4662      	mov	r2, ip
   1d542:	e757      	b.n	1d3f4 <_malloc_r+0x364>
   1d544:	4b2b      	ldr	r3, [pc, #172]	; (1d5f4 <_malloc_r+0x564>)
   1d546:	4298      	cmp	r0, r3
   1d548:	d81c      	bhi.n	1d584 <_malloc_r+0x4f4>
   1d54a:	237c      	movs	r3, #124	; 0x7c
   1d54c:	4698      	mov	r8, r3
   1d54e:	0ca8      	lsrs	r0, r5, #18
   1d550:	4480      	add	r8, r0
   1d552:	307d      	adds	r0, #125	; 0x7d
   1d554:	00c1      	lsls	r1, r0, #3
   1d556:	e5c2      	b.n	1d0de <_malloc_r+0x4e>
   1d558:	3310      	adds	r3, #16
   1d55a:	9300      	str	r3, [sp, #0]
   1d55c:	e699      	b.n	1d292 <_malloc_r+0x202>
   1d55e:	2a54      	cmp	r2, #84	; 0x54
   1d560:	d826      	bhi.n	1d5b0 <_malloc_r+0x520>
   1d562:	464b      	mov	r3, r9
   1d564:	0b1a      	lsrs	r2, r3, #12
   1d566:	0011      	movs	r1, r2
   1d568:	326f      	adds	r2, #111	; 0x6f
   1d56a:	316e      	adds	r1, #110	; 0x6e
   1d56c:	00d2      	lsls	r2, r2, #3
   1d56e:	e729      	b.n	1d3c4 <_malloc_r+0x334>
   1d570:	051b      	lsls	r3, r3, #20
   1d572:	d000      	beq.n	1d576 <_malloc_r+0x4e6>
   1d574:	e6a6      	b.n	1d2c4 <_malloc_r+0x234>
   1d576:	2001      	movs	r0, #1
   1d578:	9b00      	ldr	r3, [sp, #0]
   1d57a:	68b2      	ldr	r2, [r6, #8]
   1d57c:	4443      	add	r3, r8
   1d57e:	4303      	orrs	r3, r0
   1d580:	6053      	str	r3, [r2, #4]
   1d582:	e6e6      	b.n	1d352 <_malloc_r+0x2c2>
   1d584:	21fe      	movs	r1, #254	; 0xfe
   1d586:	237e      	movs	r3, #126	; 0x7e
   1d588:	207f      	movs	r0, #127	; 0x7f
   1d58a:	0089      	lsls	r1, r1, #2
   1d58c:	4698      	mov	r8, r3
   1d58e:	e5a6      	b.n	1d0de <_malloc_r+0x4e>
   1d590:	2300      	movs	r3, #0
   1d592:	2001      	movs	r0, #1
   1d594:	469b      	mov	fp, r3
   1d596:	e6bd      	b.n	1d314 <_malloc_r+0x284>
   1d598:	0021      	movs	r1, r4
   1d59a:	0038      	movs	r0, r7
   1d59c:	3108      	adds	r1, #8
   1d59e:	f7ff fa53 	bl	1ca48 <_free_r>
   1d5a2:	4653      	mov	r3, sl
   1d5a4:	6819      	ldr	r1, [r3, #0]
   1d5a6:	e6d4      	b.n	1d352 <_malloc_r+0x2c2>
   1d5a8:	465b      	mov	r3, fp
   1d5aa:	464a      	mov	r2, r9
   1d5ac:	601a      	str	r2, [r3, #0]
   1d5ae:	e694      	b.n	1d2da <_malloc_r+0x24a>
   1d5b0:	21aa      	movs	r1, #170	; 0xaa
   1d5b2:	0049      	lsls	r1, r1, #1
   1d5b4:	428a      	cmp	r2, r1
   1d5b6:	d806      	bhi.n	1d5c6 <_malloc_r+0x536>
   1d5b8:	464b      	mov	r3, r9
   1d5ba:	0bda      	lsrs	r2, r3, #15
   1d5bc:	0011      	movs	r1, r2
   1d5be:	3278      	adds	r2, #120	; 0x78
   1d5c0:	3177      	adds	r1, #119	; 0x77
   1d5c2:	00d2      	lsls	r2, r2, #3
   1d5c4:	e6fe      	b.n	1d3c4 <_malloc_r+0x334>
   1d5c6:	490b      	ldr	r1, [pc, #44]	; (1d5f4 <_malloc_r+0x564>)
   1d5c8:	428a      	cmp	r2, r1
   1d5ca:	d806      	bhi.n	1d5da <_malloc_r+0x54a>
   1d5cc:	464b      	mov	r3, r9
   1d5ce:	0c9a      	lsrs	r2, r3, #18
   1d5d0:	0011      	movs	r1, r2
   1d5d2:	327d      	adds	r2, #125	; 0x7d
   1d5d4:	317c      	adds	r1, #124	; 0x7c
   1d5d6:	00d2      	lsls	r2, r2, #3
   1d5d8:	e6f4      	b.n	1d3c4 <_malloc_r+0x334>
   1d5da:	22fe      	movs	r2, #254	; 0xfe
   1d5dc:	217e      	movs	r1, #126	; 0x7e
   1d5de:	0092      	lsls	r2, r2, #2
   1d5e0:	e6f0      	b.n	1d3c4 <_malloc_r+0x334>
   1d5e2:	6873      	ldr	r3, [r6, #4]
   1d5e4:	e77e      	b.n	1d4e4 <_malloc_r+0x454>
   1d5e6:	002b      	movs	r3, r5
   1d5e8:	08e8      	lsrs	r0, r5, #3
   1d5ea:	3308      	adds	r3, #8
   1d5ec:	e605      	b.n	1d1fa <_malloc_r+0x16a>
   1d5ee:	46c0      	nop			; (mov r8, r8)
   1d5f0:	20001ad0 	.word	0x20001ad0
   1d5f4:	00000554 	.word	0x00000554

0001d5f8 <__ascii_mbtowc>:
   1d5f8:	b082      	sub	sp, #8
   1d5fa:	2900      	cmp	r1, #0
   1d5fc:	d00a      	beq.n	1d614 <__ascii_mbtowc+0x1c>
   1d5fe:	2a00      	cmp	r2, #0
   1d600:	d00b      	beq.n	1d61a <__ascii_mbtowc+0x22>
   1d602:	2b00      	cmp	r3, #0
   1d604:	d00b      	beq.n	1d61e <__ascii_mbtowc+0x26>
   1d606:	7813      	ldrb	r3, [r2, #0]
   1d608:	600b      	str	r3, [r1, #0]
   1d60a:	7810      	ldrb	r0, [r2, #0]
   1d60c:	1e43      	subs	r3, r0, #1
   1d60e:	4198      	sbcs	r0, r3
   1d610:	b002      	add	sp, #8
   1d612:	4770      	bx	lr
   1d614:	a901      	add	r1, sp, #4
   1d616:	2a00      	cmp	r2, #0
   1d618:	d1f3      	bne.n	1d602 <__ascii_mbtowc+0xa>
   1d61a:	2000      	movs	r0, #0
   1d61c:	e7f8      	b.n	1d610 <__ascii_mbtowc+0x18>
   1d61e:	2002      	movs	r0, #2
   1d620:	4240      	negs	r0, r0
   1d622:	e7f5      	b.n	1d610 <__ascii_mbtowc+0x18>

0001d624 <memchr>:
   1d624:	b570      	push	{r4, r5, r6, lr}
   1d626:	b2cd      	uxtb	r5, r1
   1d628:	0783      	lsls	r3, r0, #30
   1d62a:	d034      	beq.n	1d696 <memchr+0x72>
   1d62c:	1e54      	subs	r4, r2, #1
   1d62e:	2a00      	cmp	r2, #0
   1d630:	d01b      	beq.n	1d66a <memchr+0x46>
   1d632:	7803      	ldrb	r3, [r0, #0]
   1d634:	42ab      	cmp	r3, r5
   1d636:	d019      	beq.n	1d66c <memchr+0x48>
   1d638:	2203      	movs	r2, #3
   1d63a:	e004      	b.n	1d646 <memchr+0x22>
   1d63c:	3c01      	subs	r4, #1
   1d63e:	d314      	bcc.n	1d66a <memchr+0x46>
   1d640:	7803      	ldrb	r3, [r0, #0]
   1d642:	42ab      	cmp	r3, r5
   1d644:	d012      	beq.n	1d66c <memchr+0x48>
   1d646:	3001      	adds	r0, #1
   1d648:	4210      	tst	r0, r2
   1d64a:	d1f7      	bne.n	1d63c <memchr+0x18>
   1d64c:	2c03      	cmp	r4, #3
   1d64e:	d80e      	bhi.n	1d66e <memchr+0x4a>
   1d650:	2c00      	cmp	r4, #0
   1d652:	d00a      	beq.n	1d66a <memchr+0x46>
   1d654:	7803      	ldrb	r3, [r0, #0]
   1d656:	42ab      	cmp	r3, r5
   1d658:	d008      	beq.n	1d66c <memchr+0x48>
   1d65a:	1904      	adds	r4, r0, r4
   1d65c:	e002      	b.n	1d664 <memchr+0x40>
   1d65e:	7803      	ldrb	r3, [r0, #0]
   1d660:	42ab      	cmp	r3, r5
   1d662:	d003      	beq.n	1d66c <memchr+0x48>
   1d664:	3001      	adds	r0, #1
   1d666:	4284      	cmp	r4, r0
   1d668:	d1f9      	bne.n	1d65e <memchr+0x3a>
   1d66a:	2000      	movs	r0, #0
   1d66c:	bd70      	pop	{r4, r5, r6, pc}
   1d66e:	22ff      	movs	r2, #255	; 0xff
   1d670:	060b      	lsls	r3, r1, #24
   1d672:	0c1b      	lsrs	r3, r3, #16
   1d674:	4011      	ands	r1, r2
   1d676:	4319      	orrs	r1, r3
   1d678:	040b      	lsls	r3, r1, #16
   1d67a:	4e08      	ldr	r6, [pc, #32]	; (1d69c <memchr+0x78>)
   1d67c:	4319      	orrs	r1, r3
   1d67e:	6803      	ldr	r3, [r0, #0]
   1d680:	4a07      	ldr	r2, [pc, #28]	; (1d6a0 <memchr+0x7c>)
   1d682:	404b      	eors	r3, r1
   1d684:	189a      	adds	r2, r3, r2
   1d686:	439a      	bics	r2, r3
   1d688:	4232      	tst	r2, r6
   1d68a:	d1e3      	bne.n	1d654 <memchr+0x30>
   1d68c:	3c04      	subs	r4, #4
   1d68e:	3004      	adds	r0, #4
   1d690:	2c03      	cmp	r4, #3
   1d692:	d8f4      	bhi.n	1d67e <memchr+0x5a>
   1d694:	e7dc      	b.n	1d650 <memchr+0x2c>
   1d696:	0014      	movs	r4, r2
   1d698:	e7d8      	b.n	1d64c <memchr+0x28>
   1d69a:	46c0      	nop			; (mov r8, r8)
   1d69c:	80808080 	.word	0x80808080
   1d6a0:	fefefeff 	.word	0xfefefeff

0001d6a4 <memcpy>:
   1d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6a6:	0005      	movs	r5, r0
   1d6a8:	2a0f      	cmp	r2, #15
   1d6aa:	d92f      	bls.n	1d70c <memcpy+0x68>
   1d6ac:	000b      	movs	r3, r1
   1d6ae:	4303      	orrs	r3, r0
   1d6b0:	079b      	lsls	r3, r3, #30
   1d6b2:	d134      	bne.n	1d71e <memcpy+0x7a>
   1d6b4:	0016      	movs	r6, r2
   1d6b6:	000c      	movs	r4, r1
   1d6b8:	0003      	movs	r3, r0
   1d6ba:	3e10      	subs	r6, #16
   1d6bc:	0935      	lsrs	r5, r6, #4
   1d6be:	3501      	adds	r5, #1
   1d6c0:	012d      	lsls	r5, r5, #4
   1d6c2:	1945      	adds	r5, r0, r5
   1d6c4:	6827      	ldr	r7, [r4, #0]
   1d6c6:	601f      	str	r7, [r3, #0]
   1d6c8:	6867      	ldr	r7, [r4, #4]
   1d6ca:	605f      	str	r7, [r3, #4]
   1d6cc:	68a7      	ldr	r7, [r4, #8]
   1d6ce:	609f      	str	r7, [r3, #8]
   1d6d0:	68e7      	ldr	r7, [r4, #12]
   1d6d2:	3410      	adds	r4, #16
   1d6d4:	60df      	str	r7, [r3, #12]
   1d6d6:	3310      	adds	r3, #16
   1d6d8:	429d      	cmp	r5, r3
   1d6da:	d1f3      	bne.n	1d6c4 <memcpy+0x20>
   1d6dc:	230f      	movs	r3, #15
   1d6de:	439e      	bics	r6, r3
   1d6e0:	3610      	adds	r6, #16
   1d6e2:	1985      	adds	r5, r0, r6
   1d6e4:	1989      	adds	r1, r1, r6
   1d6e6:	4013      	ands	r3, r2
   1d6e8:	2b03      	cmp	r3, #3
   1d6ea:	d91a      	bls.n	1d722 <memcpy+0x7e>
   1d6ec:	1f1e      	subs	r6, r3, #4
   1d6ee:	2300      	movs	r3, #0
   1d6f0:	08b4      	lsrs	r4, r6, #2
   1d6f2:	3401      	adds	r4, #1
   1d6f4:	00a4      	lsls	r4, r4, #2
   1d6f6:	58cf      	ldr	r7, [r1, r3]
   1d6f8:	50ef      	str	r7, [r5, r3]
   1d6fa:	3304      	adds	r3, #4
   1d6fc:	42a3      	cmp	r3, r4
   1d6fe:	d1fa      	bne.n	1d6f6 <memcpy+0x52>
   1d700:	2403      	movs	r4, #3
   1d702:	43a6      	bics	r6, r4
   1d704:	1d33      	adds	r3, r6, #4
   1d706:	4022      	ands	r2, r4
   1d708:	18c9      	adds	r1, r1, r3
   1d70a:	18ed      	adds	r5, r5, r3
   1d70c:	2a00      	cmp	r2, #0
   1d70e:	d005      	beq.n	1d71c <memcpy+0x78>
   1d710:	2300      	movs	r3, #0
   1d712:	5ccc      	ldrb	r4, [r1, r3]
   1d714:	54ec      	strb	r4, [r5, r3]
   1d716:	3301      	adds	r3, #1
   1d718:	4293      	cmp	r3, r2
   1d71a:	d1fa      	bne.n	1d712 <memcpy+0x6e>
   1d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d71e:	0005      	movs	r5, r0
   1d720:	e7f6      	b.n	1d710 <memcpy+0x6c>
   1d722:	001a      	movs	r2, r3
   1d724:	e7f2      	b.n	1d70c <memcpy+0x68>
   1d726:	46c0      	nop			; (mov r8, r8)

0001d728 <memmove>:
   1d728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d72a:	4288      	cmp	r0, r1
   1d72c:	d90a      	bls.n	1d744 <memmove+0x1c>
   1d72e:	188b      	adds	r3, r1, r2
   1d730:	4298      	cmp	r0, r3
   1d732:	d207      	bcs.n	1d744 <memmove+0x1c>
   1d734:	1e53      	subs	r3, r2, #1
   1d736:	2a00      	cmp	r2, #0
   1d738:	d003      	beq.n	1d742 <memmove+0x1a>
   1d73a:	5cca      	ldrb	r2, [r1, r3]
   1d73c:	54c2      	strb	r2, [r0, r3]
   1d73e:	3b01      	subs	r3, #1
   1d740:	d2fb      	bcs.n	1d73a <memmove+0x12>
   1d742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d744:	0005      	movs	r5, r0
   1d746:	2a0f      	cmp	r2, #15
   1d748:	d808      	bhi.n	1d75c <memmove+0x34>
   1d74a:	2a00      	cmp	r2, #0
   1d74c:	d0f9      	beq.n	1d742 <memmove+0x1a>
   1d74e:	2300      	movs	r3, #0
   1d750:	5ccc      	ldrb	r4, [r1, r3]
   1d752:	54ec      	strb	r4, [r5, r3]
   1d754:	3301      	adds	r3, #1
   1d756:	4293      	cmp	r3, r2
   1d758:	d1fa      	bne.n	1d750 <memmove+0x28>
   1d75a:	e7f2      	b.n	1d742 <memmove+0x1a>
   1d75c:	000b      	movs	r3, r1
   1d75e:	4303      	orrs	r3, r0
   1d760:	079b      	lsls	r3, r3, #30
   1d762:	d12d      	bne.n	1d7c0 <memmove+0x98>
   1d764:	0015      	movs	r5, r2
   1d766:	000c      	movs	r4, r1
   1d768:	0003      	movs	r3, r0
   1d76a:	3d10      	subs	r5, #16
   1d76c:	092f      	lsrs	r7, r5, #4
   1d76e:	3701      	adds	r7, #1
   1d770:	013f      	lsls	r7, r7, #4
   1d772:	19c7      	adds	r7, r0, r7
   1d774:	6826      	ldr	r6, [r4, #0]
   1d776:	601e      	str	r6, [r3, #0]
   1d778:	6866      	ldr	r6, [r4, #4]
   1d77a:	605e      	str	r6, [r3, #4]
   1d77c:	68a6      	ldr	r6, [r4, #8]
   1d77e:	609e      	str	r6, [r3, #8]
   1d780:	68e6      	ldr	r6, [r4, #12]
   1d782:	3410      	adds	r4, #16
   1d784:	60de      	str	r6, [r3, #12]
   1d786:	3310      	adds	r3, #16
   1d788:	429f      	cmp	r7, r3
   1d78a:	d1f3      	bne.n	1d774 <memmove+0x4c>
   1d78c:	240f      	movs	r4, #15
   1d78e:	43a5      	bics	r5, r4
   1d790:	3510      	adds	r5, #16
   1d792:	1949      	adds	r1, r1, r5
   1d794:	4014      	ands	r4, r2
   1d796:	1945      	adds	r5, r0, r5
   1d798:	2c03      	cmp	r4, #3
   1d79a:	d913      	bls.n	1d7c4 <memmove+0x9c>
   1d79c:	2300      	movs	r3, #0
   1d79e:	1f27      	subs	r7, r4, #4
   1d7a0:	08be      	lsrs	r6, r7, #2
   1d7a2:	3601      	adds	r6, #1
   1d7a4:	00b6      	lsls	r6, r6, #2
   1d7a6:	58cc      	ldr	r4, [r1, r3]
   1d7a8:	50ec      	str	r4, [r5, r3]
   1d7aa:	3304      	adds	r3, #4
   1d7ac:	42b3      	cmp	r3, r6
   1d7ae:	d1fa      	bne.n	1d7a6 <memmove+0x7e>
   1d7b0:	2603      	movs	r6, #3
   1d7b2:	43b7      	bics	r7, r6
   1d7b4:	1d3c      	adds	r4, r7, #4
   1d7b6:	1909      	adds	r1, r1, r4
   1d7b8:	192d      	adds	r5, r5, r4
   1d7ba:	4032      	ands	r2, r6
   1d7bc:	d1c7      	bne.n	1d74e <memmove+0x26>
   1d7be:	e7c0      	b.n	1d742 <memmove+0x1a>
   1d7c0:	0005      	movs	r5, r0
   1d7c2:	e7c4      	b.n	1d74e <memmove+0x26>
   1d7c4:	0022      	movs	r2, r4
   1d7c6:	e7c0      	b.n	1d74a <memmove+0x22>

0001d7c8 <__malloc_lock>:
   1d7c8:	b510      	push	{r4, lr}
   1d7ca:	4802      	ldr	r0, [pc, #8]	; (1d7d4 <__malloc_lock+0xc>)
   1d7cc:	f7ff fbe4 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1d7d0:	bd10      	pop	{r4, pc}
   1d7d2:	46c0      	nop			; (mov r8, r8)
   1d7d4:	20001d08 	.word	0x20001d08

0001d7d8 <__malloc_unlock>:
   1d7d8:	b510      	push	{r4, lr}
   1d7da:	4802      	ldr	r0, [pc, #8]	; (1d7e4 <__malloc_unlock+0xc>)
   1d7dc:	f7ff fbde 	bl	1cf9c <__retarget_lock_release_recursive>
   1d7e0:	bd10      	pop	{r4, pc}
   1d7e2:	46c0      	nop			; (mov r8, r8)
   1d7e4:	20001d08 	.word	0x20001d08

0001d7e8 <_Balloc>:
   1d7e8:	b570      	push	{r4, r5, r6, lr}
   1d7ea:	0004      	movs	r4, r0
   1d7ec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d7ee:	000d      	movs	r5, r1
   1d7f0:	2800      	cmp	r0, #0
   1d7f2:	d00a      	beq.n	1d80a <_Balloc+0x22>
   1d7f4:	00ab      	lsls	r3, r5, #2
   1d7f6:	18c3      	adds	r3, r0, r3
   1d7f8:	6818      	ldr	r0, [r3, #0]
   1d7fa:	2800      	cmp	r0, #0
   1d7fc:	d00f      	beq.n	1d81e <_Balloc+0x36>
   1d7fe:	6802      	ldr	r2, [r0, #0]
   1d800:	601a      	str	r2, [r3, #0]
   1d802:	2300      	movs	r3, #0
   1d804:	6103      	str	r3, [r0, #16]
   1d806:	60c3      	str	r3, [r0, #12]
   1d808:	bd70      	pop	{r4, r5, r6, pc}
   1d80a:	2221      	movs	r2, #33	; 0x21
   1d80c:	2104      	movs	r1, #4
   1d80e:	0020      	movs	r0, r4
   1d810:	f000 fe38 	bl	1e484 <_calloc_r>
   1d814:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d816:	2800      	cmp	r0, #0
   1d818:	d1ec      	bne.n	1d7f4 <_Balloc+0xc>
   1d81a:	2000      	movs	r0, #0
   1d81c:	e7f4      	b.n	1d808 <_Balloc+0x20>
   1d81e:	2601      	movs	r6, #1
   1d820:	40ae      	lsls	r6, r5
   1d822:	1d72      	adds	r2, r6, #5
   1d824:	0092      	lsls	r2, r2, #2
   1d826:	2101      	movs	r1, #1
   1d828:	0020      	movs	r0, r4
   1d82a:	f000 fe2b 	bl	1e484 <_calloc_r>
   1d82e:	2800      	cmp	r0, #0
   1d830:	d0f3      	beq.n	1d81a <_Balloc+0x32>
   1d832:	6045      	str	r5, [r0, #4]
   1d834:	6086      	str	r6, [r0, #8]
   1d836:	e7e4      	b.n	1d802 <_Balloc+0x1a>

0001d838 <_Bfree>:
   1d838:	2900      	cmp	r1, #0
   1d83a:	d006      	beq.n	1d84a <_Bfree+0x12>
   1d83c:	684b      	ldr	r3, [r1, #4]
   1d83e:	009a      	lsls	r2, r3, #2
   1d840:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d842:	189b      	adds	r3, r3, r2
   1d844:	681a      	ldr	r2, [r3, #0]
   1d846:	600a      	str	r2, [r1, #0]
   1d848:	6019      	str	r1, [r3, #0]
   1d84a:	4770      	bx	lr

0001d84c <__multadd>:
   1d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d84e:	46ce      	mov	lr, r9
   1d850:	4647      	mov	r7, r8
   1d852:	4681      	mov	r9, r0
   1d854:	0008      	movs	r0, r1
   1d856:	b580      	push	{r7, lr}
   1d858:	000d      	movs	r5, r1
   1d85a:	690c      	ldr	r4, [r1, #16]
   1d85c:	001f      	movs	r7, r3
   1d85e:	2100      	movs	r1, #0
   1d860:	3014      	adds	r0, #20
   1d862:	6803      	ldr	r3, [r0, #0]
   1d864:	3101      	adds	r1, #1
   1d866:	041e      	lsls	r6, r3, #16
   1d868:	0c36      	lsrs	r6, r6, #16
   1d86a:	4356      	muls	r6, r2
   1d86c:	0c1b      	lsrs	r3, r3, #16
   1d86e:	4353      	muls	r3, r2
   1d870:	19f6      	adds	r6, r6, r7
   1d872:	0c37      	lsrs	r7, r6, #16
   1d874:	19db      	adds	r3, r3, r7
   1d876:	0436      	lsls	r6, r6, #16
   1d878:	0c1f      	lsrs	r7, r3, #16
   1d87a:	0c36      	lsrs	r6, r6, #16
   1d87c:	041b      	lsls	r3, r3, #16
   1d87e:	199b      	adds	r3, r3, r6
   1d880:	c008      	stmia	r0!, {r3}
   1d882:	428c      	cmp	r4, r1
   1d884:	dced      	bgt.n	1d862 <__multadd+0x16>
   1d886:	2f00      	cmp	r7, #0
   1d888:	d008      	beq.n	1d89c <__multadd+0x50>
   1d88a:	68ab      	ldr	r3, [r5, #8]
   1d88c:	429c      	cmp	r4, r3
   1d88e:	da0a      	bge.n	1d8a6 <__multadd+0x5a>
   1d890:	1d23      	adds	r3, r4, #4
   1d892:	009b      	lsls	r3, r3, #2
   1d894:	18eb      	adds	r3, r5, r3
   1d896:	3401      	adds	r4, #1
   1d898:	605f      	str	r7, [r3, #4]
   1d89a:	612c      	str	r4, [r5, #16]
   1d89c:	0028      	movs	r0, r5
   1d89e:	bc0c      	pop	{r2, r3}
   1d8a0:	4690      	mov	r8, r2
   1d8a2:	4699      	mov	r9, r3
   1d8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d8a6:	686b      	ldr	r3, [r5, #4]
   1d8a8:	4648      	mov	r0, r9
   1d8aa:	1c59      	adds	r1, r3, #1
   1d8ac:	f7ff ff9c 	bl	1d7e8 <_Balloc>
   1d8b0:	0029      	movs	r1, r5
   1d8b2:	692b      	ldr	r3, [r5, #16]
   1d8b4:	4680      	mov	r8, r0
   1d8b6:	1c9a      	adds	r2, r3, #2
   1d8b8:	0092      	lsls	r2, r2, #2
   1d8ba:	310c      	adds	r1, #12
   1d8bc:	300c      	adds	r0, #12
   1d8be:	f7ff fef1 	bl	1d6a4 <memcpy>
   1d8c2:	686b      	ldr	r3, [r5, #4]
   1d8c4:	009a      	lsls	r2, r3, #2
   1d8c6:	464b      	mov	r3, r9
   1d8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d8ca:	189b      	adds	r3, r3, r2
   1d8cc:	681a      	ldr	r2, [r3, #0]
   1d8ce:	602a      	str	r2, [r5, #0]
   1d8d0:	601d      	str	r5, [r3, #0]
   1d8d2:	4645      	mov	r5, r8
   1d8d4:	e7dc      	b.n	1d890 <__multadd+0x44>
   1d8d6:	46c0      	nop			; (mov r8, r8)

0001d8d8 <__hi0bits>:
   1d8d8:	0003      	movs	r3, r0
   1d8da:	0c02      	lsrs	r2, r0, #16
   1d8dc:	2000      	movs	r0, #0
   1d8de:	2a00      	cmp	r2, #0
   1d8e0:	d101      	bne.n	1d8e6 <__hi0bits+0xe>
   1d8e2:	041b      	lsls	r3, r3, #16
   1d8e4:	3010      	adds	r0, #16
   1d8e6:	0e1a      	lsrs	r2, r3, #24
   1d8e8:	d101      	bne.n	1d8ee <__hi0bits+0x16>
   1d8ea:	3008      	adds	r0, #8
   1d8ec:	021b      	lsls	r3, r3, #8
   1d8ee:	0f1a      	lsrs	r2, r3, #28
   1d8f0:	d101      	bne.n	1d8f6 <__hi0bits+0x1e>
   1d8f2:	3004      	adds	r0, #4
   1d8f4:	011b      	lsls	r3, r3, #4
   1d8f6:	0f9a      	lsrs	r2, r3, #30
   1d8f8:	d101      	bne.n	1d8fe <__hi0bits+0x26>
   1d8fa:	3002      	adds	r0, #2
   1d8fc:	009b      	lsls	r3, r3, #2
   1d8fe:	2b00      	cmp	r3, #0
   1d900:	db03      	blt.n	1d90a <__hi0bits+0x32>
   1d902:	3001      	adds	r0, #1
   1d904:	005b      	lsls	r3, r3, #1
   1d906:	d400      	bmi.n	1d90a <__hi0bits+0x32>
   1d908:	2020      	movs	r0, #32
   1d90a:	4770      	bx	lr

0001d90c <__lo0bits>:
   1d90c:	6803      	ldr	r3, [r0, #0]
   1d90e:	075a      	lsls	r2, r3, #29
   1d910:	d009      	beq.n	1d926 <__lo0bits+0x1a>
   1d912:	2200      	movs	r2, #0
   1d914:	07d9      	lsls	r1, r3, #31
   1d916:	d404      	bmi.n	1d922 <__lo0bits+0x16>
   1d918:	079a      	lsls	r2, r3, #30
   1d91a:	d420      	bmi.n	1d95e <__lo0bits+0x52>
   1d91c:	2202      	movs	r2, #2
   1d91e:	089b      	lsrs	r3, r3, #2
   1d920:	6003      	str	r3, [r0, #0]
   1d922:	0010      	movs	r0, r2
   1d924:	4770      	bx	lr
   1d926:	0419      	lsls	r1, r3, #16
   1d928:	2200      	movs	r2, #0
   1d92a:	2900      	cmp	r1, #0
   1d92c:	d101      	bne.n	1d932 <__lo0bits+0x26>
   1d92e:	0c1b      	lsrs	r3, r3, #16
   1d930:	3210      	adds	r2, #16
   1d932:	21ff      	movs	r1, #255	; 0xff
   1d934:	4219      	tst	r1, r3
   1d936:	d101      	bne.n	1d93c <__lo0bits+0x30>
   1d938:	3208      	adds	r2, #8
   1d93a:	0a1b      	lsrs	r3, r3, #8
   1d93c:	0719      	lsls	r1, r3, #28
   1d93e:	d101      	bne.n	1d944 <__lo0bits+0x38>
   1d940:	3204      	adds	r2, #4
   1d942:	091b      	lsrs	r3, r3, #4
   1d944:	0799      	lsls	r1, r3, #30
   1d946:	d101      	bne.n	1d94c <__lo0bits+0x40>
   1d948:	3202      	adds	r2, #2
   1d94a:	089b      	lsrs	r3, r3, #2
   1d94c:	07d9      	lsls	r1, r3, #31
   1d94e:	d404      	bmi.n	1d95a <__lo0bits+0x4e>
   1d950:	085b      	lsrs	r3, r3, #1
   1d952:	d101      	bne.n	1d958 <__lo0bits+0x4c>
   1d954:	2220      	movs	r2, #32
   1d956:	e7e4      	b.n	1d922 <__lo0bits+0x16>
   1d958:	3201      	adds	r2, #1
   1d95a:	6003      	str	r3, [r0, #0]
   1d95c:	e7e1      	b.n	1d922 <__lo0bits+0x16>
   1d95e:	085b      	lsrs	r3, r3, #1
   1d960:	6003      	str	r3, [r0, #0]
   1d962:	2201      	movs	r2, #1
   1d964:	e7dd      	b.n	1d922 <__lo0bits+0x16>
   1d966:	46c0      	nop			; (mov r8, r8)

0001d968 <__i2b>:
   1d968:	b510      	push	{r4, lr}
   1d96a:	000c      	movs	r4, r1
   1d96c:	2101      	movs	r1, #1
   1d96e:	f7ff ff3b 	bl	1d7e8 <_Balloc>
   1d972:	2301      	movs	r3, #1
   1d974:	6144      	str	r4, [r0, #20]
   1d976:	6103      	str	r3, [r0, #16]
   1d978:	bd10      	pop	{r4, pc}
   1d97a:	46c0      	nop			; (mov r8, r8)

0001d97c <__multiply>:
   1d97c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d97e:	4657      	mov	r7, sl
   1d980:	464e      	mov	r6, r9
   1d982:	4645      	mov	r5, r8
   1d984:	46de      	mov	lr, fp
   1d986:	b5e0      	push	{r5, r6, r7, lr}
   1d988:	6914      	ldr	r4, [r2, #16]
   1d98a:	690e      	ldr	r6, [r1, #16]
   1d98c:	b085      	sub	sp, #20
   1d98e:	000f      	movs	r7, r1
   1d990:	0015      	movs	r5, r2
   1d992:	42a6      	cmp	r6, r4
   1d994:	da04      	bge.n	1d9a0 <__multiply+0x24>
   1d996:	0033      	movs	r3, r6
   1d998:	0017      	movs	r7, r2
   1d99a:	0026      	movs	r6, r4
   1d99c:	000d      	movs	r5, r1
   1d99e:	001c      	movs	r4, r3
   1d9a0:	1933      	adds	r3, r6, r4
   1d9a2:	4698      	mov	r8, r3
   1d9a4:	68bb      	ldr	r3, [r7, #8]
   1d9a6:	6879      	ldr	r1, [r7, #4]
   1d9a8:	4598      	cmp	r8, r3
   1d9aa:	dd00      	ble.n	1d9ae <__multiply+0x32>
   1d9ac:	3101      	adds	r1, #1
   1d9ae:	f7ff ff1b 	bl	1d7e8 <_Balloc>
   1d9b2:	2214      	movs	r2, #20
   1d9b4:	0003      	movs	r3, r0
   1d9b6:	4694      	mov	ip, r2
   1d9b8:	4463      	add	r3, ip
   1d9ba:	469b      	mov	fp, r3
   1d9bc:	4643      	mov	r3, r8
   1d9be:	009b      	lsls	r3, r3, #2
   1d9c0:	445b      	add	r3, fp
   1d9c2:	0019      	movs	r1, r3
   1d9c4:	9302      	str	r3, [sp, #8]
   1d9c6:	9003      	str	r0, [sp, #12]
   1d9c8:	465b      	mov	r3, fp
   1d9ca:	2200      	movs	r2, #0
   1d9cc:	458b      	cmp	fp, r1
   1d9ce:	d203      	bcs.n	1d9d8 <__multiply+0x5c>
   1d9d0:	9902      	ldr	r1, [sp, #8]
   1d9d2:	c304      	stmia	r3!, {r2}
   1d9d4:	4299      	cmp	r1, r3
   1d9d6:	d8fc      	bhi.n	1d9d2 <__multiply+0x56>
   1d9d8:	2314      	movs	r3, #20
   1d9da:	00a4      	lsls	r4, r4, #2
   1d9dc:	469a      	mov	sl, r3
   1d9de:	3714      	adds	r7, #20
   1d9e0:	0023      	movs	r3, r4
   1d9e2:	46bc      	mov	ip, r7
   1d9e4:	44aa      	add	sl, r5
   1d9e6:	00b6      	lsls	r6, r6, #2
   1d9e8:	4453      	add	r3, sl
   1d9ea:	9700      	str	r7, [sp, #0]
   1d9ec:	44b4      	add	ip, r6
   1d9ee:	9301      	str	r3, [sp, #4]
   1d9f0:	459a      	cmp	sl, r3
   1d9f2:	d24f      	bcs.n	1da94 <__multiply+0x118>
   1d9f4:	4653      	mov	r3, sl
   1d9f6:	681b      	ldr	r3, [r3, #0]
   1d9f8:	041e      	lsls	r6, r3, #16
   1d9fa:	0c36      	lsrs	r6, r6, #16
   1d9fc:	d020      	beq.n	1da40 <__multiply+0xc4>
   1d9fe:	465c      	mov	r4, fp
   1da00:	2700      	movs	r7, #0
   1da02:	9d00      	ldr	r5, [sp, #0]
   1da04:	0021      	movs	r1, r4
   1da06:	cc08      	ldmia	r4!, {r3}
   1da08:	cd04      	ldmia	r5!, {r2}
   1da0a:	4699      	mov	r9, r3
   1da0c:	4648      	mov	r0, r9
   1da0e:	0413      	lsls	r3, r2, #16
   1da10:	0c1b      	lsrs	r3, r3, #16
   1da12:	4373      	muls	r3, r6
   1da14:	0400      	lsls	r0, r0, #16
   1da16:	0c00      	lsrs	r0, r0, #16
   1da18:	181b      	adds	r3, r3, r0
   1da1a:	19d8      	adds	r0, r3, r7
   1da1c:	0c13      	lsrs	r3, r2, #16
   1da1e:	464a      	mov	r2, r9
   1da20:	4373      	muls	r3, r6
   1da22:	0c12      	lsrs	r2, r2, #16
   1da24:	189b      	adds	r3, r3, r2
   1da26:	0c02      	lsrs	r2, r0, #16
   1da28:	189b      	adds	r3, r3, r2
   1da2a:	0402      	lsls	r2, r0, #16
   1da2c:	0c1f      	lsrs	r7, r3, #16
   1da2e:	0c12      	lsrs	r2, r2, #16
   1da30:	041b      	lsls	r3, r3, #16
   1da32:	4313      	orrs	r3, r2
   1da34:	600b      	str	r3, [r1, #0]
   1da36:	45ac      	cmp	ip, r5
   1da38:	d8e4      	bhi.n	1da04 <__multiply+0x88>
   1da3a:	4653      	mov	r3, sl
   1da3c:	6027      	str	r7, [r4, #0]
   1da3e:	681b      	ldr	r3, [r3, #0]
   1da40:	0c1e      	lsrs	r6, r3, #16
   1da42:	d020      	beq.n	1da86 <__multiply+0x10a>
   1da44:	465b      	mov	r3, fp
   1da46:	2100      	movs	r1, #0
   1da48:	681b      	ldr	r3, [r3, #0]
   1da4a:	465c      	mov	r4, fp
   1da4c:	0018      	movs	r0, r3
   1da4e:	000f      	movs	r7, r1
   1da50:	4662      	mov	r2, ip
   1da52:	9d00      	ldr	r5, [sp, #0]
   1da54:	8829      	ldrh	r1, [r5, #0]
   1da56:	0c00      	lsrs	r0, r0, #16
   1da58:	4371      	muls	r1, r6
   1da5a:	1809      	adds	r1, r1, r0
   1da5c:	19c9      	adds	r1, r1, r7
   1da5e:	041b      	lsls	r3, r3, #16
   1da60:	0408      	lsls	r0, r1, #16
   1da62:	0c1b      	lsrs	r3, r3, #16
   1da64:	4303      	orrs	r3, r0
   1da66:	6023      	str	r3, [r4, #0]
   1da68:	cd08      	ldmia	r5!, {r3}
   1da6a:	6860      	ldr	r0, [r4, #4]
   1da6c:	0c1b      	lsrs	r3, r3, #16
   1da6e:	4373      	muls	r3, r6
   1da70:	0407      	lsls	r7, r0, #16
   1da72:	0c3f      	lsrs	r7, r7, #16
   1da74:	19db      	adds	r3, r3, r7
   1da76:	0c09      	lsrs	r1, r1, #16
   1da78:	185b      	adds	r3, r3, r1
   1da7a:	0c1f      	lsrs	r7, r3, #16
   1da7c:	3404      	adds	r4, #4
   1da7e:	42aa      	cmp	r2, r5
   1da80:	d8e8      	bhi.n	1da54 <__multiply+0xd8>
   1da82:	4694      	mov	ip, r2
   1da84:	6023      	str	r3, [r4, #0]
   1da86:	2304      	movs	r3, #4
   1da88:	4699      	mov	r9, r3
   1da8a:	9b01      	ldr	r3, [sp, #4]
   1da8c:	44ca      	add	sl, r9
   1da8e:	44cb      	add	fp, r9
   1da90:	4553      	cmp	r3, sl
   1da92:	d8af      	bhi.n	1d9f4 <__multiply+0x78>
   1da94:	4643      	mov	r3, r8
   1da96:	2b00      	cmp	r3, #0
   1da98:	dd0e      	ble.n	1dab8 <__multiply+0x13c>
   1da9a:	9b02      	ldr	r3, [sp, #8]
   1da9c:	3b04      	subs	r3, #4
   1da9e:	681a      	ldr	r2, [r3, #0]
   1daa0:	2a00      	cmp	r2, #0
   1daa2:	d109      	bne.n	1dab8 <__multiply+0x13c>
   1daa4:	4642      	mov	r2, r8
   1daa6:	e003      	b.n	1dab0 <__multiply+0x134>
   1daa8:	3b04      	subs	r3, #4
   1daaa:	6819      	ldr	r1, [r3, #0]
   1daac:	2900      	cmp	r1, #0
   1daae:	d102      	bne.n	1dab6 <__multiply+0x13a>
   1dab0:	3a01      	subs	r2, #1
   1dab2:	2a00      	cmp	r2, #0
   1dab4:	d1f8      	bne.n	1daa8 <__multiply+0x12c>
   1dab6:	4690      	mov	r8, r2
   1dab8:	9b03      	ldr	r3, [sp, #12]
   1daba:	4642      	mov	r2, r8
   1dabc:	0018      	movs	r0, r3
   1dabe:	611a      	str	r2, [r3, #16]
   1dac0:	b005      	add	sp, #20
   1dac2:	bc3c      	pop	{r2, r3, r4, r5}
   1dac4:	4690      	mov	r8, r2
   1dac6:	4699      	mov	r9, r3
   1dac8:	46a2      	mov	sl, r4
   1daca:	46ab      	mov	fp, r5
   1dacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dace:	46c0      	nop			; (mov r8, r8)

0001dad0 <__pow5mult>:
   1dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dad2:	4647      	mov	r7, r8
   1dad4:	46ce      	mov	lr, r9
   1dad6:	2303      	movs	r3, #3
   1dad8:	b580      	push	{r7, lr}
   1dada:	4680      	mov	r8, r0
   1dadc:	000f      	movs	r7, r1
   1dade:	0014      	movs	r4, r2
   1dae0:	4013      	ands	r3, r2
   1dae2:	d13a      	bne.n	1db5a <__pow5mult+0x8a>
   1dae4:	10a4      	asrs	r4, r4, #2
   1dae6:	003e      	movs	r6, r7
   1dae8:	2c00      	cmp	r4, #0
   1daea:	d025      	beq.n	1db38 <__pow5mult+0x68>
   1daec:	4643      	mov	r3, r8
   1daee:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1daf0:	2d00      	cmp	r5, #0
   1daf2:	d03b      	beq.n	1db6c <__pow5mult+0x9c>
   1daf4:	003e      	movs	r6, r7
   1daf6:	2300      	movs	r3, #0
   1daf8:	2701      	movs	r7, #1
   1dafa:	4699      	mov	r9, r3
   1dafc:	4227      	tst	r7, r4
   1dafe:	d107      	bne.n	1db10 <__pow5mult+0x40>
   1db00:	1064      	asrs	r4, r4, #1
   1db02:	d019      	beq.n	1db38 <__pow5mult+0x68>
   1db04:	6828      	ldr	r0, [r5, #0]
   1db06:	2800      	cmp	r0, #0
   1db08:	d01b      	beq.n	1db42 <__pow5mult+0x72>
   1db0a:	0005      	movs	r5, r0
   1db0c:	4227      	tst	r7, r4
   1db0e:	d0f7      	beq.n	1db00 <__pow5mult+0x30>
   1db10:	002a      	movs	r2, r5
   1db12:	0031      	movs	r1, r6
   1db14:	4640      	mov	r0, r8
   1db16:	f7ff ff31 	bl	1d97c <__multiply>
   1db1a:	2e00      	cmp	r6, #0
   1db1c:	d01b      	beq.n	1db56 <__pow5mult+0x86>
   1db1e:	4642      	mov	r2, r8
   1db20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1db22:	6873      	ldr	r3, [r6, #4]
   1db24:	4694      	mov	ip, r2
   1db26:	009b      	lsls	r3, r3, #2
   1db28:	4463      	add	r3, ip
   1db2a:	681a      	ldr	r2, [r3, #0]
   1db2c:	1064      	asrs	r4, r4, #1
   1db2e:	6032      	str	r2, [r6, #0]
   1db30:	601e      	str	r6, [r3, #0]
   1db32:	0006      	movs	r6, r0
   1db34:	2c00      	cmp	r4, #0
   1db36:	d1e5      	bne.n	1db04 <__pow5mult+0x34>
   1db38:	0030      	movs	r0, r6
   1db3a:	bc0c      	pop	{r2, r3}
   1db3c:	4690      	mov	r8, r2
   1db3e:	4699      	mov	r9, r3
   1db40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1db42:	002a      	movs	r2, r5
   1db44:	0029      	movs	r1, r5
   1db46:	4640      	mov	r0, r8
   1db48:	f7ff ff18 	bl	1d97c <__multiply>
   1db4c:	464b      	mov	r3, r9
   1db4e:	6028      	str	r0, [r5, #0]
   1db50:	6003      	str	r3, [r0, #0]
   1db52:	0005      	movs	r5, r0
   1db54:	e7da      	b.n	1db0c <__pow5mult+0x3c>
   1db56:	0006      	movs	r6, r0
   1db58:	e7d2      	b.n	1db00 <__pow5mult+0x30>
   1db5a:	4a0b      	ldr	r2, [pc, #44]	; (1db88 <__pow5mult+0xb8>)
   1db5c:	3b01      	subs	r3, #1
   1db5e:	009b      	lsls	r3, r3, #2
   1db60:	589a      	ldr	r2, [r3, r2]
   1db62:	2300      	movs	r3, #0
   1db64:	f7ff fe72 	bl	1d84c <__multadd>
   1db68:	0007      	movs	r7, r0
   1db6a:	e7bb      	b.n	1dae4 <__pow5mult+0x14>
   1db6c:	2101      	movs	r1, #1
   1db6e:	4640      	mov	r0, r8
   1db70:	f7ff fe3a 	bl	1d7e8 <_Balloc>
   1db74:	4b05      	ldr	r3, [pc, #20]	; (1db8c <__pow5mult+0xbc>)
   1db76:	0005      	movs	r5, r0
   1db78:	6143      	str	r3, [r0, #20]
   1db7a:	2301      	movs	r3, #1
   1db7c:	6103      	str	r3, [r0, #16]
   1db7e:	4643      	mov	r3, r8
   1db80:	6498      	str	r0, [r3, #72]	; 0x48
   1db82:	2300      	movs	r3, #0
   1db84:	6003      	str	r3, [r0, #0]
   1db86:	e7b5      	b.n	1daf4 <__pow5mult+0x24>
   1db88:	0001ff58 	.word	0x0001ff58
   1db8c:	00000271 	.word	0x00000271

0001db90 <__lshift>:
   1db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db92:	464e      	mov	r6, r9
   1db94:	4645      	mov	r5, r8
   1db96:	46de      	mov	lr, fp
   1db98:	4657      	mov	r7, sl
   1db9a:	b5e0      	push	{r5, r6, r7, lr}
   1db9c:	000e      	movs	r6, r1
   1db9e:	6933      	ldr	r3, [r6, #16]
   1dba0:	1154      	asrs	r4, r2, #5
   1dba2:	4698      	mov	r8, r3
   1dba4:	44a0      	add	r8, r4
   1dba6:	4643      	mov	r3, r8
   1dba8:	1c5d      	adds	r5, r3, #1
   1dbaa:	68b3      	ldr	r3, [r6, #8]
   1dbac:	4683      	mov	fp, r0
   1dbae:	4691      	mov	r9, r2
   1dbb0:	6849      	ldr	r1, [r1, #4]
   1dbb2:	429d      	cmp	r5, r3
   1dbb4:	dd03      	ble.n	1dbbe <__lshift+0x2e>
   1dbb6:	3101      	adds	r1, #1
   1dbb8:	005b      	lsls	r3, r3, #1
   1dbba:	429d      	cmp	r5, r3
   1dbbc:	dcfb      	bgt.n	1dbb6 <__lshift+0x26>
   1dbbe:	4658      	mov	r0, fp
   1dbc0:	f7ff fe12 	bl	1d7e8 <_Balloc>
   1dbc4:	0003      	movs	r3, r0
   1dbc6:	4684      	mov	ip, r0
   1dbc8:	3314      	adds	r3, #20
   1dbca:	2c00      	cmp	r4, #0
   1dbcc:	dd06      	ble.n	1dbdc <__lshift+0x4c>
   1dbce:	2100      	movs	r1, #0
   1dbd0:	00a4      	lsls	r4, r4, #2
   1dbd2:	001a      	movs	r2, r3
   1dbd4:	191b      	adds	r3, r3, r4
   1dbd6:	c202      	stmia	r2!, {r1}
   1dbd8:	4293      	cmp	r3, r2
   1dbda:	d1fc      	bne.n	1dbd6 <__lshift+0x46>
   1dbdc:	6932      	ldr	r2, [r6, #16]
   1dbde:	4648      	mov	r0, r9
   1dbe0:	0097      	lsls	r7, r2, #2
   1dbe2:	0031      	movs	r1, r6
   1dbe4:	221f      	movs	r2, #31
   1dbe6:	3114      	adds	r1, #20
   1dbe8:	4010      	ands	r0, r2
   1dbea:	19cf      	adds	r7, r1, r7
   1dbec:	4681      	mov	r9, r0
   1dbee:	2800      	cmp	r0, #0
   1dbf0:	d025      	beq.n	1dc3e <__lshift+0xae>
   1dbf2:	2220      	movs	r2, #32
   1dbf4:	1a12      	subs	r2, r2, r0
   1dbf6:	4692      	mov	sl, r2
   1dbf8:	2200      	movs	r2, #0
   1dbfa:	4648      	mov	r0, r9
   1dbfc:	680c      	ldr	r4, [r1, #0]
   1dbfe:	4084      	lsls	r4, r0
   1dc00:	4650      	mov	r0, sl
   1dc02:	4314      	orrs	r4, r2
   1dc04:	601c      	str	r4, [r3, #0]
   1dc06:	c904      	ldmia	r1!, {r2}
   1dc08:	3304      	adds	r3, #4
   1dc0a:	40c2      	lsrs	r2, r0
   1dc0c:	428f      	cmp	r7, r1
   1dc0e:	d8f4      	bhi.n	1dbfa <__lshift+0x6a>
   1dc10:	601a      	str	r2, [r3, #0]
   1dc12:	2a00      	cmp	r2, #0
   1dc14:	d001      	beq.n	1dc1a <__lshift+0x8a>
   1dc16:	4645      	mov	r5, r8
   1dc18:	3502      	adds	r5, #2
   1dc1a:	4663      	mov	r3, ip
   1dc1c:	3d01      	subs	r5, #1
   1dc1e:	611d      	str	r5, [r3, #16]
   1dc20:	6873      	ldr	r3, [r6, #4]
   1dc22:	4660      	mov	r0, ip
   1dc24:	009a      	lsls	r2, r3, #2
   1dc26:	465b      	mov	r3, fp
   1dc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dc2a:	189b      	adds	r3, r3, r2
   1dc2c:	681a      	ldr	r2, [r3, #0]
   1dc2e:	6032      	str	r2, [r6, #0]
   1dc30:	601e      	str	r6, [r3, #0]
   1dc32:	bc3c      	pop	{r2, r3, r4, r5}
   1dc34:	4690      	mov	r8, r2
   1dc36:	4699      	mov	r9, r3
   1dc38:	46a2      	mov	sl, r4
   1dc3a:	46ab      	mov	fp, r5
   1dc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dc3e:	c904      	ldmia	r1!, {r2}
   1dc40:	c304      	stmia	r3!, {r2}
   1dc42:	428f      	cmp	r7, r1
   1dc44:	d9e9      	bls.n	1dc1a <__lshift+0x8a>
   1dc46:	c904      	ldmia	r1!, {r2}
   1dc48:	c304      	stmia	r3!, {r2}
   1dc4a:	428f      	cmp	r7, r1
   1dc4c:	d8f7      	bhi.n	1dc3e <__lshift+0xae>
   1dc4e:	e7e4      	b.n	1dc1a <__lshift+0x8a>

0001dc50 <__mcmp>:
   1dc50:	690a      	ldr	r2, [r1, #16]
   1dc52:	6903      	ldr	r3, [r0, #16]
   1dc54:	b530      	push	{r4, r5, lr}
   1dc56:	0005      	movs	r5, r0
   1dc58:	1a98      	subs	r0, r3, r2
   1dc5a:	d111      	bne.n	1dc80 <__mcmp+0x30>
   1dc5c:	0092      	lsls	r2, r2, #2
   1dc5e:	3514      	adds	r5, #20
   1dc60:	3114      	adds	r1, #20
   1dc62:	18ab      	adds	r3, r5, r2
   1dc64:	1889      	adds	r1, r1, r2
   1dc66:	e001      	b.n	1dc6c <__mcmp+0x1c>
   1dc68:	429d      	cmp	r5, r3
   1dc6a:	d209      	bcs.n	1dc80 <__mcmp+0x30>
   1dc6c:	3b04      	subs	r3, #4
   1dc6e:	3904      	subs	r1, #4
   1dc70:	681c      	ldr	r4, [r3, #0]
   1dc72:	680a      	ldr	r2, [r1, #0]
   1dc74:	4294      	cmp	r4, r2
   1dc76:	d0f7      	beq.n	1dc68 <__mcmp+0x18>
   1dc78:	4294      	cmp	r4, r2
   1dc7a:	4180      	sbcs	r0, r0
   1dc7c:	2201      	movs	r2, #1
   1dc7e:	4310      	orrs	r0, r2
   1dc80:	bd30      	pop	{r4, r5, pc}
   1dc82:	46c0      	nop			; (mov r8, r8)

0001dc84 <__mdiff>:
   1dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc86:	4645      	mov	r5, r8
   1dc88:	46de      	mov	lr, fp
   1dc8a:	4657      	mov	r7, sl
   1dc8c:	464e      	mov	r6, r9
   1dc8e:	0014      	movs	r4, r2
   1dc90:	690b      	ldr	r3, [r1, #16]
   1dc92:	6912      	ldr	r2, [r2, #16]
   1dc94:	b5e0      	push	{r5, r6, r7, lr}
   1dc96:	4688      	mov	r8, r1
   1dc98:	1a9d      	subs	r5, r3, r2
   1dc9a:	d11a      	bne.n	1dcd2 <__mdiff+0x4e>
   1dc9c:	000f      	movs	r7, r1
   1dc9e:	2114      	movs	r1, #20
   1dca0:	468c      	mov	ip, r1
   1dca2:	0092      	lsls	r2, r2, #2
   1dca4:	3714      	adds	r7, #20
   1dca6:	44a4      	add	ip, r4
   1dca8:	18bb      	adds	r3, r7, r2
   1dcaa:	4462      	add	r2, ip
   1dcac:	e002      	b.n	1dcb4 <__mdiff+0x30>
   1dcae:	429f      	cmp	r7, r3
   1dcb0:	d300      	bcc.n	1dcb4 <__mdiff+0x30>
   1dcb2:	e070      	b.n	1dd96 <__mdiff+0x112>
   1dcb4:	3b04      	subs	r3, #4
   1dcb6:	3a04      	subs	r2, #4
   1dcb8:	681e      	ldr	r6, [r3, #0]
   1dcba:	6811      	ldr	r1, [r2, #0]
   1dcbc:	428e      	cmp	r6, r1
   1dcbe:	d0f6      	beq.n	1dcae <__mdiff+0x2a>
   1dcc0:	d300      	bcc.n	1dcc4 <__mdiff+0x40>
   1dcc2:	e071      	b.n	1dda8 <__mdiff+0x124>
   1dcc4:	4643      	mov	r3, r8
   1dcc6:	003e      	movs	r6, r7
   1dcc8:	46a0      	mov	r8, r4
   1dcca:	4667      	mov	r7, ip
   1dccc:	001c      	movs	r4, r3
   1dcce:	2501      	movs	r5, #1
   1dcd0:	e006      	b.n	1dce0 <__mdiff+0x5c>
   1dcd2:	2d00      	cmp	r5, #0
   1dcd4:	db6a      	blt.n	1ddac <__mdiff+0x128>
   1dcd6:	4647      	mov	r7, r8
   1dcd8:	0026      	movs	r6, r4
   1dcda:	2500      	movs	r5, #0
   1dcdc:	3714      	adds	r7, #20
   1dcde:	3614      	adds	r6, #20
   1dce0:	4643      	mov	r3, r8
   1dce2:	6859      	ldr	r1, [r3, #4]
   1dce4:	f7ff fd80 	bl	1d7e8 <_Balloc>
   1dce8:	4643      	mov	r3, r8
   1dcea:	4681      	mov	r9, r0
   1dcec:	60c5      	str	r5, [r0, #12]
   1dcee:	6918      	ldr	r0, [r3, #16]
   1dcf0:	464d      	mov	r5, r9
   1dcf2:	0083      	lsls	r3, r0, #2
   1dcf4:	469c      	mov	ip, r3
   1dcf6:	6923      	ldr	r3, [r4, #16]
   1dcf8:	44bc      	add	ip, r7
   1dcfa:	009b      	lsls	r3, r3, #2
   1dcfc:	4698      	mov	r8, r3
   1dcfe:	2300      	movs	r3, #0
   1dd00:	44b0      	add	r8, r6
   1dd02:	3514      	adds	r5, #20
   1dd04:	469a      	mov	sl, r3
   1dd06:	e000      	b.n	1dd0a <__mdiff+0x86>
   1dd08:	0027      	movs	r7, r4
   1dd0a:	ce04      	ldmia	r6!, {r2}
   1dd0c:	003c      	movs	r4, r7
   1dd0e:	4693      	mov	fp, r2
   1dd10:	4659      	mov	r1, fp
   1dd12:	cc08      	ldmia	r4!, {r3}
   1dd14:	0409      	lsls	r1, r1, #16
   1dd16:	041a      	lsls	r2, r3, #16
   1dd18:	0c12      	lsrs	r2, r2, #16
   1dd1a:	4452      	add	r2, sl
   1dd1c:	0c09      	lsrs	r1, r1, #16
   1dd1e:	1a52      	subs	r2, r2, r1
   1dd20:	0c19      	lsrs	r1, r3, #16
   1dd22:	465b      	mov	r3, fp
   1dd24:	0c1b      	lsrs	r3, r3, #16
   1dd26:	1acb      	subs	r3, r1, r3
   1dd28:	1411      	asrs	r1, r2, #16
   1dd2a:	185b      	adds	r3, r3, r1
   1dd2c:	0412      	lsls	r2, r2, #16
   1dd2e:	1419      	asrs	r1, r3, #16
   1dd30:	0c12      	lsrs	r2, r2, #16
   1dd32:	041b      	lsls	r3, r3, #16
   1dd34:	468a      	mov	sl, r1
   1dd36:	4313      	orrs	r3, r2
   1dd38:	1d29      	adds	r1, r5, #4
   1dd3a:	602b      	str	r3, [r5, #0]
   1dd3c:	000d      	movs	r5, r1
   1dd3e:	45b0      	cmp	r8, r6
   1dd40:	d8e2      	bhi.n	1dd08 <__mdiff+0x84>
   1dd42:	45a4      	cmp	ip, r4
   1dd44:	d916      	bls.n	1dd74 <__mdiff+0xf0>
   1dd46:	cc08      	ldmia	r4!, {r3}
   1dd48:	041a      	lsls	r2, r3, #16
   1dd4a:	0c12      	lsrs	r2, r2, #16
   1dd4c:	4452      	add	r2, sl
   1dd4e:	1416      	asrs	r6, r2, #16
   1dd50:	0c1b      	lsrs	r3, r3, #16
   1dd52:	199b      	adds	r3, r3, r6
   1dd54:	0412      	lsls	r2, r2, #16
   1dd56:	141e      	asrs	r6, r3, #16
   1dd58:	0c12      	lsrs	r2, r2, #16
   1dd5a:	041b      	lsls	r3, r3, #16
   1dd5c:	4313      	orrs	r3, r2
   1dd5e:	46b2      	mov	sl, r6
   1dd60:	c508      	stmia	r5!, {r3}
   1dd62:	45a4      	cmp	ip, r4
   1dd64:	d8ef      	bhi.n	1dd46 <__mdiff+0xc2>
   1dd66:	4662      	mov	r2, ip
   1dd68:	2403      	movs	r4, #3
   1dd6a:	1bd2      	subs	r2, r2, r7
   1dd6c:	3a05      	subs	r2, #5
   1dd6e:	43a2      	bics	r2, r4
   1dd70:	3204      	adds	r2, #4
   1dd72:	1889      	adds	r1, r1, r2
   1dd74:	3904      	subs	r1, #4
   1dd76:	2b00      	cmp	r3, #0
   1dd78:	d104      	bne.n	1dd84 <__mdiff+0x100>
   1dd7a:	3904      	subs	r1, #4
   1dd7c:	680b      	ldr	r3, [r1, #0]
   1dd7e:	3801      	subs	r0, #1
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	d0fa      	beq.n	1dd7a <__mdiff+0xf6>
   1dd84:	464b      	mov	r3, r9
   1dd86:	6118      	str	r0, [r3, #16]
   1dd88:	4648      	mov	r0, r9
   1dd8a:	bc3c      	pop	{r2, r3, r4, r5}
   1dd8c:	4690      	mov	r8, r2
   1dd8e:	4699      	mov	r9, r3
   1dd90:	46a2      	mov	sl, r4
   1dd92:	46ab      	mov	fp, r5
   1dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd96:	2100      	movs	r1, #0
   1dd98:	f7ff fd26 	bl	1d7e8 <_Balloc>
   1dd9c:	2301      	movs	r3, #1
   1dd9e:	6103      	str	r3, [r0, #16]
   1dda0:	2300      	movs	r3, #0
   1dda2:	4681      	mov	r9, r0
   1dda4:	6143      	str	r3, [r0, #20]
   1dda6:	e7ef      	b.n	1dd88 <__mdiff+0x104>
   1dda8:	4666      	mov	r6, ip
   1ddaa:	e799      	b.n	1dce0 <__mdiff+0x5c>
   1ddac:	0027      	movs	r7, r4
   1ddae:	000e      	movs	r6, r1
   1ddb0:	46a0      	mov	r8, r4
   1ddb2:	3714      	adds	r7, #20
   1ddb4:	3614      	adds	r6, #20
   1ddb6:	000c      	movs	r4, r1
   1ddb8:	2501      	movs	r5, #1
   1ddba:	e791      	b.n	1dce0 <__mdiff+0x5c>

0001ddbc <__d2b>:
   1ddbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ddbe:	2101      	movs	r1, #1
   1ddc0:	001c      	movs	r4, r3
   1ddc2:	b083      	sub	sp, #12
   1ddc4:	9e08      	ldr	r6, [sp, #32]
   1ddc6:	0015      	movs	r5, r2
   1ddc8:	f7ff fd0e 	bl	1d7e8 <_Balloc>
   1ddcc:	0323      	lsls	r3, r4, #12
   1ddce:	0064      	lsls	r4, r4, #1
   1ddd0:	0007      	movs	r7, r0
   1ddd2:	0b1b      	lsrs	r3, r3, #12
   1ddd4:	0d64      	lsrs	r4, r4, #21
   1ddd6:	d002      	beq.n	1ddde <__d2b+0x22>
   1ddd8:	2280      	movs	r2, #128	; 0x80
   1ddda:	0352      	lsls	r2, r2, #13
   1dddc:	4313      	orrs	r3, r2
   1ddde:	9301      	str	r3, [sp, #4]
   1dde0:	2d00      	cmp	r5, #0
   1dde2:	d019      	beq.n	1de18 <__d2b+0x5c>
   1dde4:	4668      	mov	r0, sp
   1dde6:	9500      	str	r5, [sp, #0]
   1dde8:	f7ff fd90 	bl	1d90c <__lo0bits>
   1ddec:	2800      	cmp	r0, #0
   1ddee:	d130      	bne.n	1de52 <__d2b+0x96>
   1ddf0:	9b00      	ldr	r3, [sp, #0]
   1ddf2:	617b      	str	r3, [r7, #20]
   1ddf4:	9b01      	ldr	r3, [sp, #4]
   1ddf6:	61bb      	str	r3, [r7, #24]
   1ddf8:	1e5a      	subs	r2, r3, #1
   1ddfa:	4193      	sbcs	r3, r2
   1ddfc:	1c5d      	adds	r5, r3, #1
   1ddfe:	613d      	str	r5, [r7, #16]
   1de00:	2c00      	cmp	r4, #0
   1de02:	d014      	beq.n	1de2e <__d2b+0x72>
   1de04:	4b19      	ldr	r3, [pc, #100]	; (1de6c <__d2b+0xb0>)
   1de06:	469c      	mov	ip, r3
   1de08:	2335      	movs	r3, #53	; 0x35
   1de0a:	4464      	add	r4, ip
   1de0c:	1824      	adds	r4, r4, r0
   1de0e:	1a18      	subs	r0, r3, r0
   1de10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1de12:	6034      	str	r4, [r6, #0]
   1de14:	6018      	str	r0, [r3, #0]
   1de16:	e019      	b.n	1de4c <__d2b+0x90>
   1de18:	a801      	add	r0, sp, #4
   1de1a:	f7ff fd77 	bl	1d90c <__lo0bits>
   1de1e:	9b01      	ldr	r3, [sp, #4]
   1de20:	3020      	adds	r0, #32
   1de22:	617b      	str	r3, [r7, #20]
   1de24:	2301      	movs	r3, #1
   1de26:	2501      	movs	r5, #1
   1de28:	613b      	str	r3, [r7, #16]
   1de2a:	2c00      	cmp	r4, #0
   1de2c:	d1ea      	bne.n	1de04 <__d2b+0x48>
   1de2e:	4b10      	ldr	r3, [pc, #64]	; (1de70 <__d2b+0xb4>)
   1de30:	469c      	mov	ip, r3
   1de32:	4b10      	ldr	r3, [pc, #64]	; (1de74 <__d2b+0xb8>)
   1de34:	4460      	add	r0, ip
   1de36:	18eb      	adds	r3, r5, r3
   1de38:	009b      	lsls	r3, r3, #2
   1de3a:	18fb      	adds	r3, r7, r3
   1de3c:	6030      	str	r0, [r6, #0]
   1de3e:	6958      	ldr	r0, [r3, #20]
   1de40:	f7ff fd4a 	bl	1d8d8 <__hi0bits>
   1de44:	016b      	lsls	r3, r5, #5
   1de46:	1a18      	subs	r0, r3, r0
   1de48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1de4a:	6018      	str	r0, [r3, #0]
   1de4c:	0038      	movs	r0, r7
   1de4e:	b003      	add	sp, #12
   1de50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de52:	9b01      	ldr	r3, [sp, #4]
   1de54:	2220      	movs	r2, #32
   1de56:	0019      	movs	r1, r3
   1de58:	1a12      	subs	r2, r2, r0
   1de5a:	4091      	lsls	r1, r2
   1de5c:	000a      	movs	r2, r1
   1de5e:	40c3      	lsrs	r3, r0
   1de60:	9900      	ldr	r1, [sp, #0]
   1de62:	9301      	str	r3, [sp, #4]
   1de64:	430a      	orrs	r2, r1
   1de66:	617a      	str	r2, [r7, #20]
   1de68:	e7c5      	b.n	1ddf6 <__d2b+0x3a>
   1de6a:	46c0      	nop			; (mov r8, r8)
   1de6c:	fffffbcd 	.word	0xfffffbcd
   1de70:	fffffbce 	.word	0xfffffbce
   1de74:	3fffffff 	.word	0x3fffffff

0001de78 <_realloc_r>:
   1de78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de7a:	464e      	mov	r6, r9
   1de7c:	4645      	mov	r5, r8
   1de7e:	46de      	mov	lr, fp
   1de80:	4657      	mov	r7, sl
   1de82:	b5e0      	push	{r5, r6, r7, lr}
   1de84:	b085      	sub	sp, #20
   1de86:	9001      	str	r0, [sp, #4]
   1de88:	000e      	movs	r6, r1
   1de8a:	0015      	movs	r5, r2
   1de8c:	2900      	cmp	r1, #0
   1de8e:	d100      	bne.n	1de92 <_realloc_r+0x1a>
   1de90:	e09e      	b.n	1dfd0 <_realloc_r+0x158>
   1de92:	0037      	movs	r7, r6
   1de94:	9801      	ldr	r0, [sp, #4]
   1de96:	3f08      	subs	r7, #8
   1de98:	f7ff fc96 	bl	1d7c8 <__malloc_lock>
   1de9c:	687a      	ldr	r2, [r7, #4]
   1de9e:	2303      	movs	r3, #3
   1dea0:	0014      	movs	r4, r2
   1dea2:	439c      	bics	r4, r3
   1dea4:	002b      	movs	r3, r5
   1dea6:	330b      	adds	r3, #11
   1dea8:	46b9      	mov	r9, r7
   1deaa:	2b16      	cmp	r3, #22
   1deac:	d847      	bhi.n	1df3e <_realloc_r+0xc6>
   1deae:	2110      	movs	r1, #16
   1deb0:	2310      	movs	r3, #16
   1deb2:	4688      	mov	r8, r1
   1deb4:	4545      	cmp	r5, r8
   1deb6:	d846      	bhi.n	1df46 <_realloc_r+0xce>
   1deb8:	429c      	cmp	r4, r3
   1deba:	da49      	bge.n	1df50 <_realloc_r+0xd8>
   1debc:	49cc      	ldr	r1, [pc, #816]	; (1e1f0 <_realloc_r+0x378>)
   1debe:	1938      	adds	r0, r7, r4
   1dec0:	468b      	mov	fp, r1
   1dec2:	6889      	ldr	r1, [r1, #8]
   1dec4:	9002      	str	r0, [sp, #8]
   1dec6:	4288      	cmp	r0, r1
   1dec8:	d100      	bne.n	1decc <_realloc_r+0x54>
   1deca:	e0c2      	b.n	1e052 <_realloc_r+0x1da>
   1decc:	2101      	movs	r1, #1
   1dece:	468a      	mov	sl, r1
   1ded0:	6840      	ldr	r0, [r0, #4]
   1ded2:	0001      	movs	r1, r0
   1ded4:	9003      	str	r0, [sp, #12]
   1ded6:	4650      	mov	r0, sl
   1ded8:	4381      	bics	r1, r0
   1deda:	468c      	mov	ip, r1
   1dedc:	9902      	ldr	r1, [sp, #8]
   1dede:	468b      	mov	fp, r1
   1dee0:	44dc      	add	ip, fp
   1dee2:	4661      	mov	r1, ip
   1dee4:	6849      	ldr	r1, [r1, #4]
   1dee6:	4201      	tst	r1, r0
   1dee8:	d04d      	beq.n	1df86 <_realloc_r+0x10e>
   1deea:	4210      	tst	r0, r2
   1deec:	d100      	bne.n	1def0 <_realloc_r+0x78>
   1deee:	e0a2      	b.n	1e036 <_realloc_r+0x1be>
   1def0:	0029      	movs	r1, r5
   1def2:	9801      	ldr	r0, [sp, #4]
   1def4:	f7ff f8cc 	bl	1d090 <_malloc_r>
   1def8:	1e05      	subs	r5, r0, #0
   1defa:	d039      	beq.n	1df70 <_realloc_r+0xf8>
   1defc:	2301      	movs	r3, #1
   1defe:	0002      	movs	r2, r0
   1df00:	6879      	ldr	r1, [r7, #4]
   1df02:	3a08      	subs	r2, #8
   1df04:	4399      	bics	r1, r3
   1df06:	187f      	adds	r7, r7, r1
   1df08:	42ba      	cmp	r2, r7
   1df0a:	d100      	bne.n	1df0e <_realloc_r+0x96>
   1df0c:	e12e      	b.n	1e16c <_realloc_r+0x2f4>
   1df0e:	1f22      	subs	r2, r4, #4
   1df10:	2a24      	cmp	r2, #36	; 0x24
   1df12:	d900      	bls.n	1df16 <_realloc_r+0x9e>
   1df14:	e114      	b.n	1e140 <_realloc_r+0x2c8>
   1df16:	2a13      	cmp	r2, #19
   1df18:	d900      	bls.n	1df1c <_realloc_r+0xa4>
   1df1a:	e0e8      	b.n	1e0ee <_realloc_r+0x276>
   1df1c:	0003      	movs	r3, r0
   1df1e:	0032      	movs	r2, r6
   1df20:	6811      	ldr	r1, [r2, #0]
   1df22:	6019      	str	r1, [r3, #0]
   1df24:	6851      	ldr	r1, [r2, #4]
   1df26:	6059      	str	r1, [r3, #4]
   1df28:	6892      	ldr	r2, [r2, #8]
   1df2a:	609a      	str	r2, [r3, #8]
   1df2c:	9c01      	ldr	r4, [sp, #4]
   1df2e:	0031      	movs	r1, r6
   1df30:	0020      	movs	r0, r4
   1df32:	f7fe fd89 	bl	1ca48 <_free_r>
   1df36:	0020      	movs	r0, r4
   1df38:	f7ff fc4e 	bl	1d7d8 <__malloc_unlock>
   1df3c:	e01b      	b.n	1df76 <_realloc_r+0xfe>
   1df3e:	2107      	movs	r1, #7
   1df40:	438b      	bics	r3, r1
   1df42:	4698      	mov	r8, r3
   1df44:	d5b6      	bpl.n	1deb4 <_realloc_r+0x3c>
   1df46:	230c      	movs	r3, #12
   1df48:	9a01      	ldr	r2, [sp, #4]
   1df4a:	2500      	movs	r5, #0
   1df4c:	6013      	str	r3, [r2, #0]
   1df4e:	e012      	b.n	1df76 <_realloc_r+0xfe>
   1df50:	0035      	movs	r5, r6
   1df52:	4643      	mov	r3, r8
   1df54:	1ae3      	subs	r3, r4, r3
   1df56:	2b0f      	cmp	r3, #15
   1df58:	d825      	bhi.n	1dfa6 <_realloc_r+0x12e>
   1df5a:	464b      	mov	r3, r9
   1df5c:	2201      	movs	r2, #1
   1df5e:	4649      	mov	r1, r9
   1df60:	685b      	ldr	r3, [r3, #4]
   1df62:	4013      	ands	r3, r2
   1df64:	4323      	orrs	r3, r4
   1df66:	604b      	str	r3, [r1, #4]
   1df68:	444c      	add	r4, r9
   1df6a:	6863      	ldr	r3, [r4, #4]
   1df6c:	431a      	orrs	r2, r3
   1df6e:	6062      	str	r2, [r4, #4]
   1df70:	9801      	ldr	r0, [sp, #4]
   1df72:	f7ff fc31 	bl	1d7d8 <__malloc_unlock>
   1df76:	0028      	movs	r0, r5
   1df78:	b005      	add	sp, #20
   1df7a:	bc3c      	pop	{r2, r3, r4, r5}
   1df7c:	4690      	mov	r8, r2
   1df7e:	4699      	mov	r9, r3
   1df80:	46a2      	mov	sl, r4
   1df82:	46ab      	mov	fp, r5
   1df84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df86:	2103      	movs	r1, #3
   1df88:	9803      	ldr	r0, [sp, #12]
   1df8a:	468c      	mov	ip, r1
   1df8c:	4388      	bics	r0, r1
   1df8e:	1821      	adds	r1, r4, r0
   1df90:	468b      	mov	fp, r1
   1df92:	4299      	cmp	r1, r3
   1df94:	db21      	blt.n	1dfda <_realloc_r+0x162>
   1df96:	9a02      	ldr	r2, [sp, #8]
   1df98:	0035      	movs	r5, r6
   1df9a:	68d3      	ldr	r3, [r2, #12]
   1df9c:	6892      	ldr	r2, [r2, #8]
   1df9e:	465c      	mov	r4, fp
   1dfa0:	60d3      	str	r3, [r2, #12]
   1dfa2:	609a      	str	r2, [r3, #8]
   1dfa4:	e7d5      	b.n	1df52 <_realloc_r+0xda>
   1dfa6:	464a      	mov	r2, r9
   1dfa8:	2001      	movs	r0, #1
   1dfaa:	4646      	mov	r6, r8
   1dfac:	6852      	ldr	r2, [r2, #4]
   1dfae:	4649      	mov	r1, r9
   1dfb0:	4002      	ands	r2, r0
   1dfb2:	4332      	orrs	r2, r6
   1dfb4:	464e      	mov	r6, r9
   1dfb6:	4441      	add	r1, r8
   1dfb8:	4303      	orrs	r3, r0
   1dfba:	6072      	str	r2, [r6, #4]
   1dfbc:	444c      	add	r4, r9
   1dfbe:	604b      	str	r3, [r1, #4]
   1dfc0:	6863      	ldr	r3, [r4, #4]
   1dfc2:	3108      	adds	r1, #8
   1dfc4:	4318      	orrs	r0, r3
   1dfc6:	6060      	str	r0, [r4, #4]
   1dfc8:	9801      	ldr	r0, [sp, #4]
   1dfca:	f7fe fd3d 	bl	1ca48 <_free_r>
   1dfce:	e7cf      	b.n	1df70 <_realloc_r+0xf8>
   1dfd0:	0011      	movs	r1, r2
   1dfd2:	f7ff f85d 	bl	1d090 <_malloc_r>
   1dfd6:	0005      	movs	r5, r0
   1dfd8:	e7cd      	b.n	1df76 <_realloc_r+0xfe>
   1dfda:	4651      	mov	r1, sl
   1dfdc:	4211      	tst	r1, r2
   1dfde:	d000      	beq.n	1dfe2 <_realloc_r+0x16a>
   1dfe0:	e786      	b.n	1def0 <_realloc_r+0x78>
   1dfe2:	4661      	mov	r1, ip
   1dfe4:	683a      	ldr	r2, [r7, #0]
   1dfe6:	1aba      	subs	r2, r7, r2
   1dfe8:	4692      	mov	sl, r2
   1dfea:	6852      	ldr	r2, [r2, #4]
   1dfec:	438a      	bics	r2, r1
   1dfee:	1880      	adds	r0, r0, r2
   1dff0:	4683      	mov	fp, r0
   1dff2:	44a3      	add	fp, r4
   1dff4:	459b      	cmp	fp, r3
   1dff6:	db26      	blt.n	1e046 <_realloc_r+0x1ce>
   1dff8:	9a02      	ldr	r2, [sp, #8]
   1dffa:	68d3      	ldr	r3, [r2, #12]
   1dffc:	6892      	ldr	r2, [r2, #8]
   1dffe:	60d3      	str	r3, [r2, #12]
   1e000:	609a      	str	r2, [r3, #8]
   1e002:	4653      	mov	r3, sl
   1e004:	4652      	mov	r2, sl
   1e006:	4655      	mov	r5, sl
   1e008:	6892      	ldr	r2, [r2, #8]
   1e00a:	68db      	ldr	r3, [r3, #12]
   1e00c:	3508      	adds	r5, #8
   1e00e:	60d3      	str	r3, [r2, #12]
   1e010:	609a      	str	r2, [r3, #8]
   1e012:	1f22      	subs	r2, r4, #4
   1e014:	2a24      	cmp	r2, #36	; 0x24
   1e016:	d900      	bls.n	1e01a <_realloc_r+0x1a2>
   1e018:	e096      	b.n	1e148 <_realloc_r+0x2d0>
   1e01a:	2a13      	cmp	r2, #19
   1e01c:	d972      	bls.n	1e104 <_realloc_r+0x28c>
   1e01e:	4653      	mov	r3, sl
   1e020:	6831      	ldr	r1, [r6, #0]
   1e022:	6099      	str	r1, [r3, #8]
   1e024:	6871      	ldr	r1, [r6, #4]
   1e026:	60d9      	str	r1, [r3, #12]
   1e028:	2a1b      	cmp	r2, #27
   1e02a:	d900      	bls.n	1e02e <_realloc_r+0x1b6>
   1e02c:	e0a4      	b.n	1e178 <_realloc_r+0x300>
   1e02e:	0032      	movs	r2, r6
   1e030:	3310      	adds	r3, #16
   1e032:	3208      	adds	r2, #8
   1e034:	e068      	b.n	1e108 <_realloc_r+0x290>
   1e036:	683a      	ldr	r2, [r7, #0]
   1e038:	1aba      	subs	r2, r7, r2
   1e03a:	4692      	mov	sl, r2
   1e03c:	4651      	mov	r1, sl
   1e03e:	2203      	movs	r2, #3
   1e040:	6849      	ldr	r1, [r1, #4]
   1e042:	4391      	bics	r1, r2
   1e044:	000a      	movs	r2, r1
   1e046:	4693      	mov	fp, r2
   1e048:	44a3      	add	fp, r4
   1e04a:	459b      	cmp	fp, r3
   1e04c:	da00      	bge.n	1e050 <_realloc_r+0x1d8>
   1e04e:	e74f      	b.n	1def0 <_realloc_r+0x78>
   1e050:	e7d7      	b.n	1e002 <_realloc_r+0x18a>
   1e052:	2003      	movs	r0, #3
   1e054:	9902      	ldr	r1, [sp, #8]
   1e056:	4684      	mov	ip, r0
   1e058:	6849      	ldr	r1, [r1, #4]
   1e05a:	4381      	bics	r1, r0
   1e05c:	4640      	mov	r0, r8
   1e05e:	1909      	adds	r1, r1, r4
   1e060:	3010      	adds	r0, #16
   1e062:	9002      	str	r0, [sp, #8]
   1e064:	4281      	cmp	r1, r0
   1e066:	da58      	bge.n	1e11a <_realloc_r+0x2a2>
   1e068:	07d2      	lsls	r2, r2, #31
   1e06a:	d500      	bpl.n	1e06e <_realloc_r+0x1f6>
   1e06c:	e740      	b.n	1def0 <_realloc_r+0x78>
   1e06e:	4660      	mov	r0, ip
   1e070:	683a      	ldr	r2, [r7, #0]
   1e072:	1aba      	subs	r2, r7, r2
   1e074:	4692      	mov	sl, r2
   1e076:	6852      	ldr	r2, [r2, #4]
   1e078:	4382      	bics	r2, r0
   1e07a:	9802      	ldr	r0, [sp, #8]
   1e07c:	1851      	adds	r1, r2, r1
   1e07e:	9103      	str	r1, [sp, #12]
   1e080:	4288      	cmp	r0, r1
   1e082:	dce0      	bgt.n	1e046 <_realloc_r+0x1ce>
   1e084:	4653      	mov	r3, sl
   1e086:	4652      	mov	r2, sl
   1e088:	4655      	mov	r5, sl
   1e08a:	6892      	ldr	r2, [r2, #8]
   1e08c:	68db      	ldr	r3, [r3, #12]
   1e08e:	3508      	adds	r5, #8
   1e090:	60d3      	str	r3, [r2, #12]
   1e092:	609a      	str	r2, [r3, #8]
   1e094:	1f22      	subs	r2, r4, #4
   1e096:	2a24      	cmp	r2, #36	; 0x24
   1e098:	d900      	bls.n	1e09c <_realloc_r+0x224>
   1e09a:	e08e      	b.n	1e1ba <_realloc_r+0x342>
   1e09c:	2a13      	cmp	r2, #19
   1e09e:	d800      	bhi.n	1e0a2 <_realloc_r+0x22a>
   1e0a0:	e088      	b.n	1e1b4 <_realloc_r+0x33c>
   1e0a2:	4653      	mov	r3, sl
   1e0a4:	6831      	ldr	r1, [r6, #0]
   1e0a6:	6099      	str	r1, [r3, #8]
   1e0a8:	6871      	ldr	r1, [r6, #4]
   1e0aa:	60d9      	str	r1, [r3, #12]
   1e0ac:	2a1b      	cmp	r2, #27
   1e0ae:	d900      	bls.n	1e0b2 <_realloc_r+0x23a>
   1e0b0:	e088      	b.n	1e1c4 <_realloc_r+0x34c>
   1e0b2:	0032      	movs	r2, r6
   1e0b4:	3310      	adds	r3, #16
   1e0b6:	3208      	adds	r2, #8
   1e0b8:	6811      	ldr	r1, [r2, #0]
   1e0ba:	6019      	str	r1, [r3, #0]
   1e0bc:	6851      	ldr	r1, [r2, #4]
   1e0be:	6059      	str	r1, [r3, #4]
   1e0c0:	6892      	ldr	r2, [r2, #8]
   1e0c2:	609a      	str	r2, [r3, #8]
   1e0c4:	4651      	mov	r1, sl
   1e0c6:	465b      	mov	r3, fp
   1e0c8:	4642      	mov	r2, r8
   1e0ca:	4441      	add	r1, r8
   1e0cc:	6099      	str	r1, [r3, #8]
   1e0ce:	9b03      	ldr	r3, [sp, #12]
   1e0d0:	9801      	ldr	r0, [sp, #4]
   1e0d2:	1a9a      	subs	r2, r3, r2
   1e0d4:	2301      	movs	r3, #1
   1e0d6:	431a      	orrs	r2, r3
   1e0d8:	604a      	str	r2, [r1, #4]
   1e0da:	4652      	mov	r2, sl
   1e0dc:	6852      	ldr	r2, [r2, #4]
   1e0de:	4013      	ands	r3, r2
   1e0e0:	4642      	mov	r2, r8
   1e0e2:	4313      	orrs	r3, r2
   1e0e4:	4652      	mov	r2, sl
   1e0e6:	6053      	str	r3, [r2, #4]
   1e0e8:	f7ff fb76 	bl	1d7d8 <__malloc_unlock>
   1e0ec:	e743      	b.n	1df76 <_realloc_r+0xfe>
   1e0ee:	6833      	ldr	r3, [r6, #0]
   1e0f0:	6003      	str	r3, [r0, #0]
   1e0f2:	6873      	ldr	r3, [r6, #4]
   1e0f4:	6043      	str	r3, [r0, #4]
   1e0f6:	2a1b      	cmp	r2, #27
   1e0f8:	d82d      	bhi.n	1e156 <_realloc_r+0x2de>
   1e0fa:	0003      	movs	r3, r0
   1e0fc:	0032      	movs	r2, r6
   1e0fe:	3308      	adds	r3, #8
   1e100:	3208      	adds	r2, #8
   1e102:	e70d      	b.n	1df20 <_realloc_r+0xa8>
   1e104:	002b      	movs	r3, r5
   1e106:	0032      	movs	r2, r6
   1e108:	6811      	ldr	r1, [r2, #0]
   1e10a:	465c      	mov	r4, fp
   1e10c:	6019      	str	r1, [r3, #0]
   1e10e:	6851      	ldr	r1, [r2, #4]
   1e110:	46d1      	mov	r9, sl
   1e112:	6059      	str	r1, [r3, #4]
   1e114:	6892      	ldr	r2, [r2, #8]
   1e116:	609a      	str	r2, [r3, #8]
   1e118:	e71b      	b.n	1df52 <_realloc_r+0xda>
   1e11a:	4643      	mov	r3, r8
   1e11c:	18fa      	adds	r2, r7, r3
   1e11e:	465b      	mov	r3, fp
   1e120:	609a      	str	r2, [r3, #8]
   1e122:	4643      	mov	r3, r8
   1e124:	1ac9      	subs	r1, r1, r3
   1e126:	2301      	movs	r3, #1
   1e128:	4319      	orrs	r1, r3
   1e12a:	6051      	str	r1, [r2, #4]
   1e12c:	687a      	ldr	r2, [r7, #4]
   1e12e:	9801      	ldr	r0, [sp, #4]
   1e130:	4013      	ands	r3, r2
   1e132:	4642      	mov	r2, r8
   1e134:	4313      	orrs	r3, r2
   1e136:	607b      	str	r3, [r7, #4]
   1e138:	f7ff fb4e 	bl	1d7d8 <__malloc_unlock>
   1e13c:	0035      	movs	r5, r6
   1e13e:	e71a      	b.n	1df76 <_realloc_r+0xfe>
   1e140:	0031      	movs	r1, r6
   1e142:	f7ff faf1 	bl	1d728 <memmove>
   1e146:	e6f1      	b.n	1df2c <_realloc_r+0xb4>
   1e148:	0031      	movs	r1, r6
   1e14a:	0028      	movs	r0, r5
   1e14c:	f7ff faec 	bl	1d728 <memmove>
   1e150:	465c      	mov	r4, fp
   1e152:	46d1      	mov	r9, sl
   1e154:	e6fd      	b.n	1df52 <_realloc_r+0xda>
   1e156:	68b3      	ldr	r3, [r6, #8]
   1e158:	6083      	str	r3, [r0, #8]
   1e15a:	68f3      	ldr	r3, [r6, #12]
   1e15c:	60c3      	str	r3, [r0, #12]
   1e15e:	2a24      	cmp	r2, #36	; 0x24
   1e160:	d015      	beq.n	1e18e <_realloc_r+0x316>
   1e162:	0003      	movs	r3, r0
   1e164:	0032      	movs	r2, r6
   1e166:	3310      	adds	r3, #16
   1e168:	3210      	adds	r2, #16
   1e16a:	e6d9      	b.n	1df20 <_realloc_r+0xa8>
   1e16c:	6853      	ldr	r3, [r2, #4]
   1e16e:	2203      	movs	r2, #3
   1e170:	4393      	bics	r3, r2
   1e172:	18e4      	adds	r4, r4, r3
   1e174:	0035      	movs	r5, r6
   1e176:	e6ec      	b.n	1df52 <_realloc_r+0xda>
   1e178:	4653      	mov	r3, sl
   1e17a:	68b1      	ldr	r1, [r6, #8]
   1e17c:	6119      	str	r1, [r3, #16]
   1e17e:	68f1      	ldr	r1, [r6, #12]
   1e180:	6159      	str	r1, [r3, #20]
   1e182:	2a24      	cmp	r2, #36	; 0x24
   1e184:	d00c      	beq.n	1e1a0 <_realloc_r+0x328>
   1e186:	0032      	movs	r2, r6
   1e188:	3318      	adds	r3, #24
   1e18a:	3210      	adds	r2, #16
   1e18c:	e7bc      	b.n	1e108 <_realloc_r+0x290>
   1e18e:	6933      	ldr	r3, [r6, #16]
   1e190:	0032      	movs	r2, r6
   1e192:	6103      	str	r3, [r0, #16]
   1e194:	0003      	movs	r3, r0
   1e196:	6971      	ldr	r1, [r6, #20]
   1e198:	3318      	adds	r3, #24
   1e19a:	3218      	adds	r2, #24
   1e19c:	6141      	str	r1, [r0, #20]
   1e19e:	e6bf      	b.n	1df20 <_realloc_r+0xa8>
   1e1a0:	4653      	mov	r3, sl
   1e1a2:	6932      	ldr	r2, [r6, #16]
   1e1a4:	4651      	mov	r1, sl
   1e1a6:	619a      	str	r2, [r3, #24]
   1e1a8:	0032      	movs	r2, r6
   1e1aa:	6970      	ldr	r0, [r6, #20]
   1e1ac:	3320      	adds	r3, #32
   1e1ae:	3218      	adds	r2, #24
   1e1b0:	61c8      	str	r0, [r1, #28]
   1e1b2:	e7a9      	b.n	1e108 <_realloc_r+0x290>
   1e1b4:	002b      	movs	r3, r5
   1e1b6:	0032      	movs	r2, r6
   1e1b8:	e77e      	b.n	1e0b8 <_realloc_r+0x240>
   1e1ba:	0031      	movs	r1, r6
   1e1bc:	0028      	movs	r0, r5
   1e1be:	f7ff fab3 	bl	1d728 <memmove>
   1e1c2:	e77f      	b.n	1e0c4 <_realloc_r+0x24c>
   1e1c4:	4653      	mov	r3, sl
   1e1c6:	68b1      	ldr	r1, [r6, #8]
   1e1c8:	6119      	str	r1, [r3, #16]
   1e1ca:	68f1      	ldr	r1, [r6, #12]
   1e1cc:	6159      	str	r1, [r3, #20]
   1e1ce:	2a24      	cmp	r2, #36	; 0x24
   1e1d0:	d003      	beq.n	1e1da <_realloc_r+0x362>
   1e1d2:	0032      	movs	r2, r6
   1e1d4:	3318      	adds	r3, #24
   1e1d6:	3210      	adds	r2, #16
   1e1d8:	e76e      	b.n	1e0b8 <_realloc_r+0x240>
   1e1da:	4653      	mov	r3, sl
   1e1dc:	6932      	ldr	r2, [r6, #16]
   1e1de:	4651      	mov	r1, sl
   1e1e0:	619a      	str	r2, [r3, #24]
   1e1e2:	0032      	movs	r2, r6
   1e1e4:	6970      	ldr	r0, [r6, #20]
   1e1e6:	3320      	adds	r3, #32
   1e1e8:	3218      	adds	r2, #24
   1e1ea:	61c8      	str	r0, [r1, #28]
   1e1ec:	e764      	b.n	1e0b8 <_realloc_r+0x240>
   1e1ee:	46c0      	nop			; (mov r8, r8)
   1e1f0:	200006b8 	.word	0x200006b8

0001e1f4 <_sbrk_r>:
   1e1f4:	2300      	movs	r3, #0
   1e1f6:	b570      	push	{r4, r5, r6, lr}
   1e1f8:	4c06      	ldr	r4, [pc, #24]	; (1e214 <_sbrk_r+0x20>)
   1e1fa:	0005      	movs	r5, r0
   1e1fc:	0008      	movs	r0, r1
   1e1fe:	6023      	str	r3, [r4, #0]
   1e200:	f7e4 f8d0 	bl	23a4 <_sbrk>
   1e204:	1c43      	adds	r3, r0, #1
   1e206:	d000      	beq.n	1e20a <_sbrk_r+0x16>
   1e208:	bd70      	pop	{r4, r5, r6, pc}
   1e20a:	6823      	ldr	r3, [r4, #0]
   1e20c:	2b00      	cmp	r3, #0
   1e20e:	d0fb      	beq.n	1e208 <_sbrk_r+0x14>
   1e210:	602b      	str	r3, [r5, #0]
   1e212:	e7f9      	b.n	1e208 <_sbrk_r+0x14>
   1e214:	20001d1c 	.word	0x20001d1c

0001e218 <__sread>:
   1e218:	b570      	push	{r4, r5, r6, lr}
   1e21a:	000c      	movs	r4, r1
   1e21c:	250e      	movs	r5, #14
   1e21e:	5f49      	ldrsh	r1, [r1, r5]
   1e220:	f000 fa88 	bl	1e734 <_read_r>
   1e224:	2800      	cmp	r0, #0
   1e226:	db03      	blt.n	1e230 <__sread+0x18>
   1e228:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e22a:	181b      	adds	r3, r3, r0
   1e22c:	6523      	str	r3, [r4, #80]	; 0x50
   1e22e:	bd70      	pop	{r4, r5, r6, pc}
   1e230:	89a3      	ldrh	r3, [r4, #12]
   1e232:	4a02      	ldr	r2, [pc, #8]	; (1e23c <__sread+0x24>)
   1e234:	4013      	ands	r3, r2
   1e236:	81a3      	strh	r3, [r4, #12]
   1e238:	e7f9      	b.n	1e22e <__sread+0x16>
   1e23a:	46c0      	nop			; (mov r8, r8)
   1e23c:	ffffefff 	.word	0xffffefff

0001e240 <__swrite>:
   1e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e242:	0016      	movs	r6, r2
   1e244:	001f      	movs	r7, r3
   1e246:	220c      	movs	r2, #12
   1e248:	5e8b      	ldrsh	r3, [r1, r2]
   1e24a:	0005      	movs	r5, r0
   1e24c:	000c      	movs	r4, r1
   1e24e:	05da      	lsls	r2, r3, #23
   1e250:	d507      	bpl.n	1e262 <__swrite+0x22>
   1e252:	230e      	movs	r3, #14
   1e254:	5ec9      	ldrsh	r1, [r1, r3]
   1e256:	2200      	movs	r2, #0
   1e258:	2302      	movs	r3, #2
   1e25a:	f000 fa57 	bl	1e70c <_lseek_r>
   1e25e:	220c      	movs	r2, #12
   1e260:	5ea3      	ldrsh	r3, [r4, r2]
   1e262:	4a05      	ldr	r2, [pc, #20]	; (1e278 <__swrite+0x38>)
   1e264:	0028      	movs	r0, r5
   1e266:	4013      	ands	r3, r2
   1e268:	81a3      	strh	r3, [r4, #12]
   1e26a:	0032      	movs	r2, r6
   1e26c:	230e      	movs	r3, #14
   1e26e:	5ee1      	ldrsh	r1, [r4, r3]
   1e270:	003b      	movs	r3, r7
   1e272:	f000 f879 	bl	1e368 <_write_r>
   1e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e278:	ffffefff 	.word	0xffffefff

0001e27c <__sseek>:
   1e27c:	b570      	push	{r4, r5, r6, lr}
   1e27e:	000c      	movs	r4, r1
   1e280:	250e      	movs	r5, #14
   1e282:	5f49      	ldrsh	r1, [r1, r5]
   1e284:	f000 fa42 	bl	1e70c <_lseek_r>
   1e288:	1c43      	adds	r3, r0, #1
   1e28a:	d006      	beq.n	1e29a <__sseek+0x1e>
   1e28c:	2380      	movs	r3, #128	; 0x80
   1e28e:	89a2      	ldrh	r2, [r4, #12]
   1e290:	015b      	lsls	r3, r3, #5
   1e292:	4313      	orrs	r3, r2
   1e294:	81a3      	strh	r3, [r4, #12]
   1e296:	6520      	str	r0, [r4, #80]	; 0x50
   1e298:	bd70      	pop	{r4, r5, r6, pc}
   1e29a:	89a3      	ldrh	r3, [r4, #12]
   1e29c:	4a01      	ldr	r2, [pc, #4]	; (1e2a4 <__sseek+0x28>)
   1e29e:	4013      	ands	r3, r2
   1e2a0:	81a3      	strh	r3, [r4, #12]
   1e2a2:	e7f9      	b.n	1e298 <__sseek+0x1c>
   1e2a4:	ffffefff 	.word	0xffffefff

0001e2a8 <__sclose>:
   1e2a8:	b510      	push	{r4, lr}
   1e2aa:	230e      	movs	r3, #14
   1e2ac:	5ec9      	ldrsh	r1, [r1, r3]
   1e2ae:	f000 f915 	bl	1e4dc <_close_r>
   1e2b2:	bd10      	pop	{r4, pc}

0001e2b4 <__sprint_r.part.0>:
   1e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2b6:	464e      	mov	r6, r9
   1e2b8:	4645      	mov	r5, r8
   1e2ba:	46de      	mov	lr, fp
   1e2bc:	4657      	mov	r7, sl
   1e2be:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e2c0:	b5e0      	push	{r5, r6, r7, lr}
   1e2c2:	4680      	mov	r8, r0
   1e2c4:	000e      	movs	r6, r1
   1e2c6:	4691      	mov	r9, r2
   1e2c8:	049b      	lsls	r3, r3, #18
   1e2ca:	d531      	bpl.n	1e330 <__sprint_r.part.0+0x7c>
   1e2cc:	6813      	ldr	r3, [r2, #0]
   1e2ce:	469a      	mov	sl, r3
   1e2d0:	6893      	ldr	r3, [r2, #8]
   1e2d2:	2b00      	cmp	r3, #0
   1e2d4:	d02a      	beq.n	1e32c <__sprint_r.part.0+0x78>
   1e2d6:	4652      	mov	r2, sl
   1e2d8:	6852      	ldr	r2, [r2, #4]
   1e2da:	2500      	movs	r5, #0
   1e2dc:	4693      	mov	fp, r2
   1e2de:	0897      	lsrs	r7, r2, #2
   1e2e0:	4652      	mov	r2, sl
   1e2e2:	6814      	ldr	r4, [r2, #0]
   1e2e4:	d104      	bne.n	1e2f0 <__sprint_r.part.0+0x3c>
   1e2e6:	e016      	b.n	1e316 <__sprint_r.part.0+0x62>
   1e2e8:	3501      	adds	r5, #1
   1e2ea:	3404      	adds	r4, #4
   1e2ec:	42af      	cmp	r7, r5
   1e2ee:	d010      	beq.n	1e312 <__sprint_r.part.0+0x5e>
   1e2f0:	0032      	movs	r2, r6
   1e2f2:	6821      	ldr	r1, [r4, #0]
   1e2f4:	4640      	mov	r0, r8
   1e2f6:	f000 f9b5 	bl	1e664 <_fputwc_r>
   1e2fa:	1c43      	adds	r3, r0, #1
   1e2fc:	d1f4      	bne.n	1e2e8 <__sprint_r.part.0+0x34>
   1e2fe:	464a      	mov	r2, r9
   1e300:	2300      	movs	r3, #0
   1e302:	6093      	str	r3, [r2, #8]
   1e304:	6053      	str	r3, [r2, #4]
   1e306:	bc3c      	pop	{r2, r3, r4, r5}
   1e308:	4690      	mov	r8, r2
   1e30a:	4699      	mov	r9, r3
   1e30c:	46a2      	mov	sl, r4
   1e30e:	46ab      	mov	fp, r5
   1e310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e312:	464b      	mov	r3, r9
   1e314:	689b      	ldr	r3, [r3, #8]
   1e316:	465a      	mov	r2, fp
   1e318:	2103      	movs	r1, #3
   1e31a:	438a      	bics	r2, r1
   1e31c:	1a9b      	subs	r3, r3, r2
   1e31e:	464a      	mov	r2, r9
   1e320:	6093      	str	r3, [r2, #8]
   1e322:	2208      	movs	r2, #8
   1e324:	4694      	mov	ip, r2
   1e326:	44e2      	add	sl, ip
   1e328:	2b00      	cmp	r3, #0
   1e32a:	d1d4      	bne.n	1e2d6 <__sprint_r.part.0+0x22>
   1e32c:	2000      	movs	r0, #0
   1e32e:	e7e6      	b.n	1e2fe <__sprint_r.part.0+0x4a>
   1e330:	f7fe fc68 	bl	1cc04 <__sfvwrite_r>
   1e334:	e7e3      	b.n	1e2fe <__sprint_r.part.0+0x4a>
   1e336:	46c0      	nop			; (mov r8, r8)

0001e338 <__sprint_r>:
   1e338:	6893      	ldr	r3, [r2, #8]
   1e33a:	b510      	push	{r4, lr}
   1e33c:	2b00      	cmp	r3, #0
   1e33e:	d002      	beq.n	1e346 <__sprint_r+0xe>
   1e340:	f7ff ffb8 	bl	1e2b4 <__sprint_r.part.0>
   1e344:	bd10      	pop	{r4, pc}
   1e346:	6053      	str	r3, [r2, #4]
   1e348:	2000      	movs	r0, #0
   1e34a:	e7fb      	b.n	1e344 <__sprint_r+0xc>

0001e34c <__ascii_wctomb>:
   1e34c:	2900      	cmp	r1, #0
   1e34e:	d004      	beq.n	1e35a <__ascii_wctomb+0xe>
   1e350:	2aff      	cmp	r2, #255	; 0xff
   1e352:	d804      	bhi.n	1e35e <__ascii_wctomb+0x12>
   1e354:	2001      	movs	r0, #1
   1e356:	700a      	strb	r2, [r1, #0]
   1e358:	4770      	bx	lr
   1e35a:	2000      	movs	r0, #0
   1e35c:	e7fc      	b.n	1e358 <__ascii_wctomb+0xc>
   1e35e:	238a      	movs	r3, #138	; 0x8a
   1e360:	6003      	str	r3, [r0, #0]
   1e362:	2001      	movs	r0, #1
   1e364:	4240      	negs	r0, r0
   1e366:	e7f7      	b.n	1e358 <__ascii_wctomb+0xc>

0001e368 <_write_r>:
   1e368:	b570      	push	{r4, r5, r6, lr}
   1e36a:	0005      	movs	r5, r0
   1e36c:	0008      	movs	r0, r1
   1e36e:	0011      	movs	r1, r2
   1e370:	2200      	movs	r2, #0
   1e372:	4c06      	ldr	r4, [pc, #24]	; (1e38c <_write_r+0x24>)
   1e374:	6022      	str	r2, [r4, #0]
   1e376:	001a      	movs	r2, r3
   1e378:	f7e3 f8c2 	bl	1500 <_write>
   1e37c:	1c43      	adds	r3, r0, #1
   1e37e:	d000      	beq.n	1e382 <_write_r+0x1a>
   1e380:	bd70      	pop	{r4, r5, r6, pc}
   1e382:	6823      	ldr	r3, [r4, #0]
   1e384:	2b00      	cmp	r3, #0
   1e386:	d0fb      	beq.n	1e380 <_write_r+0x18>
   1e388:	602b      	str	r3, [r5, #0]
   1e38a:	e7f9      	b.n	1e380 <_write_r+0x18>
   1e38c:	20001d1c 	.word	0x20001d1c

0001e390 <__register_exitproc>:
   1e390:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e392:	464e      	mov	r6, r9
   1e394:	4645      	mov	r5, r8
   1e396:	46de      	mov	lr, fp
   1e398:	4657      	mov	r7, sl
   1e39a:	b5e0      	push	{r5, r6, r7, lr}
   1e39c:	4d36      	ldr	r5, [pc, #216]	; (1e478 <__register_exitproc+0xe8>)
   1e39e:	b083      	sub	sp, #12
   1e3a0:	0006      	movs	r6, r0
   1e3a2:	6828      	ldr	r0, [r5, #0]
   1e3a4:	4698      	mov	r8, r3
   1e3a6:	000f      	movs	r7, r1
   1e3a8:	4691      	mov	r9, r2
   1e3aa:	f7fe fdf5 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1e3ae:	4b33      	ldr	r3, [pc, #204]	; (1e47c <__register_exitproc+0xec>)
   1e3b0:	681c      	ldr	r4, [r3, #0]
   1e3b2:	23a4      	movs	r3, #164	; 0xa4
   1e3b4:	005b      	lsls	r3, r3, #1
   1e3b6:	58e0      	ldr	r0, [r4, r3]
   1e3b8:	2800      	cmp	r0, #0
   1e3ba:	d052      	beq.n	1e462 <__register_exitproc+0xd2>
   1e3bc:	6843      	ldr	r3, [r0, #4]
   1e3be:	2b1f      	cmp	r3, #31
   1e3c0:	dc13      	bgt.n	1e3ea <__register_exitproc+0x5a>
   1e3c2:	1c5a      	adds	r2, r3, #1
   1e3c4:	9201      	str	r2, [sp, #4]
   1e3c6:	2e00      	cmp	r6, #0
   1e3c8:	d128      	bne.n	1e41c <__register_exitproc+0x8c>
   1e3ca:	9a01      	ldr	r2, [sp, #4]
   1e3cc:	3302      	adds	r3, #2
   1e3ce:	009b      	lsls	r3, r3, #2
   1e3d0:	6042      	str	r2, [r0, #4]
   1e3d2:	501f      	str	r7, [r3, r0]
   1e3d4:	6828      	ldr	r0, [r5, #0]
   1e3d6:	f7fe fde1 	bl	1cf9c <__retarget_lock_release_recursive>
   1e3da:	2000      	movs	r0, #0
   1e3dc:	b003      	add	sp, #12
   1e3de:	bc3c      	pop	{r2, r3, r4, r5}
   1e3e0:	4690      	mov	r8, r2
   1e3e2:	4699      	mov	r9, r3
   1e3e4:	46a2      	mov	sl, r4
   1e3e6:	46ab      	mov	fp, r5
   1e3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3ea:	4b25      	ldr	r3, [pc, #148]	; (1e480 <__register_exitproc+0xf0>)
   1e3ec:	2b00      	cmp	r3, #0
   1e3ee:	d03d      	beq.n	1e46c <__register_exitproc+0xdc>
   1e3f0:	20c8      	movs	r0, #200	; 0xc8
   1e3f2:	0040      	lsls	r0, r0, #1
   1e3f4:	e000      	b.n	1e3f8 <__register_exitproc+0x68>
   1e3f6:	bf00      	nop
   1e3f8:	2800      	cmp	r0, #0
   1e3fa:	d037      	beq.n	1e46c <__register_exitproc+0xdc>
   1e3fc:	22a4      	movs	r2, #164	; 0xa4
   1e3fe:	2300      	movs	r3, #0
   1e400:	0052      	lsls	r2, r2, #1
   1e402:	58a1      	ldr	r1, [r4, r2]
   1e404:	6043      	str	r3, [r0, #4]
   1e406:	6001      	str	r1, [r0, #0]
   1e408:	50a0      	str	r0, [r4, r2]
   1e40a:	3240      	adds	r2, #64	; 0x40
   1e40c:	5083      	str	r3, [r0, r2]
   1e40e:	3204      	adds	r2, #4
   1e410:	5083      	str	r3, [r0, r2]
   1e412:	3301      	adds	r3, #1
   1e414:	9301      	str	r3, [sp, #4]
   1e416:	2300      	movs	r3, #0
   1e418:	2e00      	cmp	r6, #0
   1e41a:	d0d6      	beq.n	1e3ca <__register_exitproc+0x3a>
   1e41c:	009a      	lsls	r2, r3, #2
   1e41e:	4692      	mov	sl, r2
   1e420:	4482      	add	sl, r0
   1e422:	464a      	mov	r2, r9
   1e424:	2188      	movs	r1, #136	; 0x88
   1e426:	4654      	mov	r4, sl
   1e428:	5062      	str	r2, [r4, r1]
   1e42a:	22c4      	movs	r2, #196	; 0xc4
   1e42c:	0052      	lsls	r2, r2, #1
   1e42e:	4691      	mov	r9, r2
   1e430:	4481      	add	r9, r0
   1e432:	464a      	mov	r2, r9
   1e434:	3987      	subs	r1, #135	; 0x87
   1e436:	4099      	lsls	r1, r3
   1e438:	6812      	ldr	r2, [r2, #0]
   1e43a:	468b      	mov	fp, r1
   1e43c:	430a      	orrs	r2, r1
   1e43e:	4694      	mov	ip, r2
   1e440:	464a      	mov	r2, r9
   1e442:	4661      	mov	r1, ip
   1e444:	6011      	str	r1, [r2, #0]
   1e446:	2284      	movs	r2, #132	; 0x84
   1e448:	4641      	mov	r1, r8
   1e44a:	0052      	lsls	r2, r2, #1
   1e44c:	50a1      	str	r1, [r4, r2]
   1e44e:	2e02      	cmp	r6, #2
   1e450:	d1bb      	bne.n	1e3ca <__register_exitproc+0x3a>
   1e452:	0002      	movs	r2, r0
   1e454:	465c      	mov	r4, fp
   1e456:	328d      	adds	r2, #141	; 0x8d
   1e458:	32ff      	adds	r2, #255	; 0xff
   1e45a:	6811      	ldr	r1, [r2, #0]
   1e45c:	430c      	orrs	r4, r1
   1e45e:	6014      	str	r4, [r2, #0]
   1e460:	e7b3      	b.n	1e3ca <__register_exitproc+0x3a>
   1e462:	0020      	movs	r0, r4
   1e464:	304d      	adds	r0, #77	; 0x4d
   1e466:	30ff      	adds	r0, #255	; 0xff
   1e468:	50e0      	str	r0, [r4, r3]
   1e46a:	e7a7      	b.n	1e3bc <__register_exitproc+0x2c>
   1e46c:	6828      	ldr	r0, [r5, #0]
   1e46e:	f7fe fd95 	bl	1cf9c <__retarget_lock_release_recursive>
   1e472:	2001      	movs	r0, #1
   1e474:	4240      	negs	r0, r0
   1e476:	e7b1      	b.n	1e3dc <__register_exitproc+0x4c>
   1e478:	20000548 	.word	0x20000548
   1e47c:	0001fc74 	.word	0x0001fc74
   1e480:	00000000 	.word	0x00000000

0001e484 <_calloc_r>:
   1e484:	b510      	push	{r4, lr}
   1e486:	4351      	muls	r1, r2
   1e488:	f7fe fe02 	bl	1d090 <_malloc_r>
   1e48c:	1e04      	subs	r4, r0, #0
   1e48e:	d01c      	beq.n	1e4ca <_calloc_r+0x46>
   1e490:	0003      	movs	r3, r0
   1e492:	3b08      	subs	r3, #8
   1e494:	685a      	ldr	r2, [r3, #4]
   1e496:	2303      	movs	r3, #3
   1e498:	439a      	bics	r2, r3
   1e49a:	3a04      	subs	r2, #4
   1e49c:	2a24      	cmp	r2, #36	; 0x24
   1e49e:	d816      	bhi.n	1e4ce <_calloc_r+0x4a>
   1e4a0:	0003      	movs	r3, r0
   1e4a2:	2a13      	cmp	r2, #19
   1e4a4:	d90d      	bls.n	1e4c2 <_calloc_r+0x3e>
   1e4a6:	2100      	movs	r1, #0
   1e4a8:	3308      	adds	r3, #8
   1e4aa:	6001      	str	r1, [r0, #0]
   1e4ac:	6041      	str	r1, [r0, #4]
   1e4ae:	2a1b      	cmp	r2, #27
   1e4b0:	d907      	bls.n	1e4c2 <_calloc_r+0x3e>
   1e4b2:	6081      	str	r1, [r0, #8]
   1e4b4:	60c1      	str	r1, [r0, #12]
   1e4b6:	2a24      	cmp	r2, #36	; 0x24
   1e4b8:	d10d      	bne.n	1e4d6 <_calloc_r+0x52>
   1e4ba:	0003      	movs	r3, r0
   1e4bc:	6101      	str	r1, [r0, #16]
   1e4be:	3318      	adds	r3, #24
   1e4c0:	6141      	str	r1, [r0, #20]
   1e4c2:	2200      	movs	r2, #0
   1e4c4:	601a      	str	r2, [r3, #0]
   1e4c6:	605a      	str	r2, [r3, #4]
   1e4c8:	609a      	str	r2, [r3, #8]
   1e4ca:	0020      	movs	r0, r4
   1e4cc:	bd10      	pop	{r4, pc}
   1e4ce:	2100      	movs	r1, #0
   1e4d0:	f7fb fb8a 	bl	19be8 <memset>
   1e4d4:	e7f9      	b.n	1e4ca <_calloc_r+0x46>
   1e4d6:	0003      	movs	r3, r0
   1e4d8:	3310      	adds	r3, #16
   1e4da:	e7f2      	b.n	1e4c2 <_calloc_r+0x3e>

0001e4dc <_close_r>:
   1e4dc:	2300      	movs	r3, #0
   1e4de:	b570      	push	{r4, r5, r6, lr}
   1e4e0:	4c06      	ldr	r4, [pc, #24]	; (1e4fc <_close_r+0x20>)
   1e4e2:	0005      	movs	r5, r0
   1e4e4:	0008      	movs	r0, r1
   1e4e6:	6023      	str	r3, [r4, #0]
   1e4e8:	f7e3 ff7a 	bl	23e0 <_close>
   1e4ec:	1c43      	adds	r3, r0, #1
   1e4ee:	d000      	beq.n	1e4f2 <_close_r+0x16>
   1e4f0:	bd70      	pop	{r4, r5, r6, pc}
   1e4f2:	6823      	ldr	r3, [r4, #0]
   1e4f4:	2b00      	cmp	r3, #0
   1e4f6:	d0fb      	beq.n	1e4f0 <_close_r+0x14>
   1e4f8:	602b      	str	r3, [r5, #0]
   1e4fa:	e7f9      	b.n	1e4f0 <_close_r+0x14>
   1e4fc:	20001d1c 	.word	0x20001d1c

0001e500 <_fclose_r>:
   1e500:	b570      	push	{r4, r5, r6, lr}
   1e502:	0005      	movs	r5, r0
   1e504:	1e0c      	subs	r4, r1, #0
   1e506:	d040      	beq.n	1e58a <_fclose_r+0x8a>
   1e508:	2800      	cmp	r0, #0
   1e50a:	d002      	beq.n	1e512 <_fclose_r+0x12>
   1e50c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e50e:	2b00      	cmp	r3, #0
   1e510:	d03e      	beq.n	1e590 <_fclose_r+0x90>
   1e512:	2601      	movs	r6, #1
   1e514:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e516:	4233      	tst	r3, r6
   1e518:	d133      	bne.n	1e582 <_fclose_r+0x82>
   1e51a:	89a3      	ldrh	r3, [r4, #12]
   1e51c:	059b      	lsls	r3, r3, #22
   1e51e:	d543      	bpl.n	1e5a8 <_fclose_r+0xa8>
   1e520:	0021      	movs	r1, r4
   1e522:	0028      	movs	r0, r5
   1e524:	f7fe f8e4 	bl	1c6f0 <__sflush_r>
   1e528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e52a:	0006      	movs	r6, r0
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	d004      	beq.n	1e53a <_fclose_r+0x3a>
   1e530:	69e1      	ldr	r1, [r4, #28]
   1e532:	0028      	movs	r0, r5
   1e534:	4798      	blx	r3
   1e536:	2800      	cmp	r0, #0
   1e538:	db44      	blt.n	1e5c4 <_fclose_r+0xc4>
   1e53a:	89a3      	ldrh	r3, [r4, #12]
   1e53c:	061b      	lsls	r3, r3, #24
   1e53e:	d42a      	bmi.n	1e596 <_fclose_r+0x96>
   1e540:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e542:	2900      	cmp	r1, #0
   1e544:	d008      	beq.n	1e558 <_fclose_r+0x58>
   1e546:	0023      	movs	r3, r4
   1e548:	3340      	adds	r3, #64	; 0x40
   1e54a:	4299      	cmp	r1, r3
   1e54c:	d002      	beq.n	1e554 <_fclose_r+0x54>
   1e54e:	0028      	movs	r0, r5
   1e550:	f7fe fa7a 	bl	1ca48 <_free_r>
   1e554:	2300      	movs	r3, #0
   1e556:	6323      	str	r3, [r4, #48]	; 0x30
   1e558:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e55a:	2900      	cmp	r1, #0
   1e55c:	d004      	beq.n	1e568 <_fclose_r+0x68>
   1e55e:	0028      	movs	r0, r5
   1e560:	f7fe fa72 	bl	1ca48 <_free_r>
   1e564:	2300      	movs	r3, #0
   1e566:	6463      	str	r3, [r4, #68]	; 0x44
   1e568:	f7fe f9f4 	bl	1c954 <__sfp_lock_acquire>
   1e56c:	2300      	movs	r3, #0
   1e56e:	81a3      	strh	r3, [r4, #12]
   1e570:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e572:	07db      	lsls	r3, r3, #31
   1e574:	d514      	bpl.n	1e5a0 <_fclose_r+0xa0>
   1e576:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e578:	f7fe fd0c 	bl	1cf94 <__retarget_lock_close_recursive>
   1e57c:	f7fe f9f2 	bl	1c964 <__sfp_lock_release>
   1e580:	e004      	b.n	1e58c <_fclose_r+0x8c>
   1e582:	220c      	movs	r2, #12
   1e584:	5ea3      	ldrsh	r3, [r4, r2]
   1e586:	2b00      	cmp	r3, #0
   1e588:	d1ca      	bne.n	1e520 <_fclose_r+0x20>
   1e58a:	2600      	movs	r6, #0
   1e58c:	0030      	movs	r0, r6
   1e58e:	bd70      	pop	{r4, r5, r6, pc}
   1e590:	f7fe f9b0 	bl	1c8f4 <__sinit>
   1e594:	e7bd      	b.n	1e512 <_fclose_r+0x12>
   1e596:	6921      	ldr	r1, [r4, #16]
   1e598:	0028      	movs	r0, r5
   1e59a:	f7fe fa55 	bl	1ca48 <_free_r>
   1e59e:	e7cf      	b.n	1e540 <_fclose_r+0x40>
   1e5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e5a2:	f7fe fcfb 	bl	1cf9c <__retarget_lock_release_recursive>
   1e5a6:	e7e6      	b.n	1e576 <_fclose_r+0x76>
   1e5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e5aa:	f7fe fcf5 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1e5ae:	220c      	movs	r2, #12
   1e5b0:	5ea3      	ldrsh	r3, [r4, r2]
   1e5b2:	2b00      	cmp	r3, #0
   1e5b4:	d1b4      	bne.n	1e520 <_fclose_r+0x20>
   1e5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e5b8:	401e      	ands	r6, r3
   1e5ba:	d1e6      	bne.n	1e58a <_fclose_r+0x8a>
   1e5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e5be:	f7fe fced 	bl	1cf9c <__retarget_lock_release_recursive>
   1e5c2:	e7e3      	b.n	1e58c <_fclose_r+0x8c>
   1e5c4:	2601      	movs	r6, #1
   1e5c6:	4276      	negs	r6, r6
   1e5c8:	e7b7      	b.n	1e53a <_fclose_r+0x3a>
   1e5ca:	46c0      	nop			; (mov r8, r8)

0001e5cc <__fputwc>:
   1e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5ce:	46ce      	mov	lr, r9
   1e5d0:	4647      	mov	r7, r8
   1e5d2:	b580      	push	{r7, lr}
   1e5d4:	b085      	sub	sp, #20
   1e5d6:	4680      	mov	r8, r0
   1e5d8:	4689      	mov	r9, r1
   1e5da:	0014      	movs	r4, r2
   1e5dc:	f7fe fcba 	bl	1cf54 <__locale_mb_cur_max>
   1e5e0:	2801      	cmp	r0, #1
   1e5e2:	d031      	beq.n	1e648 <__fputwc+0x7c>
   1e5e4:	0023      	movs	r3, r4
   1e5e6:	af03      	add	r7, sp, #12
   1e5e8:	335c      	adds	r3, #92	; 0x5c
   1e5ea:	464a      	mov	r2, r9
   1e5ec:	0039      	movs	r1, r7
   1e5ee:	4640      	mov	r0, r8
   1e5f0:	f000 f912 	bl	1e818 <_wcrtomb_r>
   1e5f4:	0006      	movs	r6, r0
   1e5f6:	1c43      	adds	r3, r0, #1
   1e5f8:	d021      	beq.n	1e63e <__fputwc+0x72>
   1e5fa:	2800      	cmp	r0, #0
   1e5fc:	d030      	beq.n	1e660 <__fputwc+0x94>
   1e5fe:	7839      	ldrb	r1, [r7, #0]
   1e600:	2500      	movs	r5, #0
   1e602:	e007      	b.n	1e614 <__fputwc+0x48>
   1e604:	6823      	ldr	r3, [r4, #0]
   1e606:	1c5a      	adds	r2, r3, #1
   1e608:	6022      	str	r2, [r4, #0]
   1e60a:	7019      	strb	r1, [r3, #0]
   1e60c:	3501      	adds	r5, #1
   1e60e:	42b5      	cmp	r5, r6
   1e610:	d226      	bcs.n	1e660 <__fputwc+0x94>
   1e612:	5d79      	ldrb	r1, [r7, r5]
   1e614:	68a3      	ldr	r3, [r4, #8]
   1e616:	3b01      	subs	r3, #1
   1e618:	60a3      	str	r3, [r4, #8]
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	daf2      	bge.n	1e604 <__fputwc+0x38>
   1e61e:	69a2      	ldr	r2, [r4, #24]
   1e620:	4293      	cmp	r3, r2
   1e622:	db01      	blt.n	1e628 <__fputwc+0x5c>
   1e624:	290a      	cmp	r1, #10
   1e626:	d1ed      	bne.n	1e604 <__fputwc+0x38>
   1e628:	0022      	movs	r2, r4
   1e62a:	4640      	mov	r0, r8
   1e62c:	f000 f896 	bl	1e75c <__swbuf_r>
   1e630:	1c43      	adds	r3, r0, #1
   1e632:	d1eb      	bne.n	1e60c <__fputwc+0x40>
   1e634:	b005      	add	sp, #20
   1e636:	bc0c      	pop	{r2, r3}
   1e638:	4690      	mov	r8, r2
   1e63a:	4699      	mov	r9, r3
   1e63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e63e:	2240      	movs	r2, #64	; 0x40
   1e640:	89a3      	ldrh	r3, [r4, #12]
   1e642:	4313      	orrs	r3, r2
   1e644:	81a3      	strh	r3, [r4, #12]
   1e646:	e7f5      	b.n	1e634 <__fputwc+0x68>
   1e648:	464b      	mov	r3, r9
   1e64a:	3b01      	subs	r3, #1
   1e64c:	2bfe      	cmp	r3, #254	; 0xfe
   1e64e:	d8c9      	bhi.n	1e5e4 <__fputwc+0x18>
   1e650:	466a      	mov	r2, sp
   1e652:	464b      	mov	r3, r9
   1e654:	71d3      	strb	r3, [r2, #7]
   1e656:	79d1      	ldrb	r1, [r2, #7]
   1e658:	af03      	add	r7, sp, #12
   1e65a:	7039      	strb	r1, [r7, #0]
   1e65c:	2601      	movs	r6, #1
   1e65e:	e7cf      	b.n	1e600 <__fputwc+0x34>
   1e660:	4648      	mov	r0, r9
   1e662:	e7e7      	b.n	1e634 <__fputwc+0x68>

0001e664 <_fputwc_r>:
   1e664:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e666:	b570      	push	{r4, r5, r6, lr}
   1e668:	0005      	movs	r5, r0
   1e66a:	000e      	movs	r6, r1
   1e66c:	0014      	movs	r4, r2
   1e66e:	07db      	lsls	r3, r3, #31
   1e670:	d41e      	bmi.n	1e6b0 <_fputwc_r+0x4c>
   1e672:	230c      	movs	r3, #12
   1e674:	5ed2      	ldrsh	r2, [r2, r3]
   1e676:	b291      	uxth	r1, r2
   1e678:	058b      	lsls	r3, r1, #22
   1e67a:	d516      	bpl.n	1e6aa <_fputwc_r+0x46>
   1e67c:	2380      	movs	r3, #128	; 0x80
   1e67e:	019b      	lsls	r3, r3, #6
   1e680:	4219      	tst	r1, r3
   1e682:	d104      	bne.n	1e68e <_fputwc_r+0x2a>
   1e684:	431a      	orrs	r2, r3
   1e686:	81a2      	strh	r2, [r4, #12]
   1e688:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e68a:	4313      	orrs	r3, r2
   1e68c:	6663      	str	r3, [r4, #100]	; 0x64
   1e68e:	0028      	movs	r0, r5
   1e690:	0022      	movs	r2, r4
   1e692:	0031      	movs	r1, r6
   1e694:	f7ff ff9a 	bl	1e5cc <__fputwc>
   1e698:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e69a:	0005      	movs	r5, r0
   1e69c:	07db      	lsls	r3, r3, #31
   1e69e:	d402      	bmi.n	1e6a6 <_fputwc_r+0x42>
   1e6a0:	89a3      	ldrh	r3, [r4, #12]
   1e6a2:	059b      	lsls	r3, r3, #22
   1e6a4:	d508      	bpl.n	1e6b8 <_fputwc_r+0x54>
   1e6a6:	0028      	movs	r0, r5
   1e6a8:	bd70      	pop	{r4, r5, r6, pc}
   1e6aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6ac:	f7fe fc74 	bl	1cf98 <__retarget_lock_acquire_recursive>
   1e6b0:	230c      	movs	r3, #12
   1e6b2:	5ee2      	ldrsh	r2, [r4, r3]
   1e6b4:	b291      	uxth	r1, r2
   1e6b6:	e7e1      	b.n	1e67c <_fputwc_r+0x18>
   1e6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6ba:	f7fe fc6f 	bl	1cf9c <__retarget_lock_release_recursive>
   1e6be:	e7f2      	b.n	1e6a6 <_fputwc_r+0x42>

0001e6c0 <_fstat_r>:
   1e6c0:	2300      	movs	r3, #0
   1e6c2:	b570      	push	{r4, r5, r6, lr}
   1e6c4:	4c07      	ldr	r4, [pc, #28]	; (1e6e4 <_fstat_r+0x24>)
   1e6c6:	0005      	movs	r5, r0
   1e6c8:	0008      	movs	r0, r1
   1e6ca:	0011      	movs	r1, r2
   1e6cc:	6023      	str	r3, [r4, #0]
   1e6ce:	f7e3 fe91 	bl	23f4 <_fstat>
   1e6d2:	1c43      	adds	r3, r0, #1
   1e6d4:	d000      	beq.n	1e6d8 <_fstat_r+0x18>
   1e6d6:	bd70      	pop	{r4, r5, r6, pc}
   1e6d8:	6823      	ldr	r3, [r4, #0]
   1e6da:	2b00      	cmp	r3, #0
   1e6dc:	d0fb      	beq.n	1e6d6 <_fstat_r+0x16>
   1e6de:	602b      	str	r3, [r5, #0]
   1e6e0:	e7f9      	b.n	1e6d6 <_fstat_r+0x16>
   1e6e2:	46c0      	nop			; (mov r8, r8)
   1e6e4:	20001d1c 	.word	0x20001d1c

0001e6e8 <_isatty_r>:
   1e6e8:	2300      	movs	r3, #0
   1e6ea:	b570      	push	{r4, r5, r6, lr}
   1e6ec:	4c06      	ldr	r4, [pc, #24]	; (1e708 <_isatty_r+0x20>)
   1e6ee:	0005      	movs	r5, r0
   1e6f0:	0008      	movs	r0, r1
   1e6f2:	6023      	str	r3, [r4, #0]
   1e6f4:	f7e3 fe8c 	bl	2410 <_isatty>
   1e6f8:	1c43      	adds	r3, r0, #1
   1e6fa:	d000      	beq.n	1e6fe <_isatty_r+0x16>
   1e6fc:	bd70      	pop	{r4, r5, r6, pc}
   1e6fe:	6823      	ldr	r3, [r4, #0]
   1e700:	2b00      	cmp	r3, #0
   1e702:	d0fb      	beq.n	1e6fc <_isatty_r+0x14>
   1e704:	602b      	str	r3, [r5, #0]
   1e706:	e7f9      	b.n	1e6fc <_isatty_r+0x14>
   1e708:	20001d1c 	.word	0x20001d1c

0001e70c <_lseek_r>:
   1e70c:	b570      	push	{r4, r5, r6, lr}
   1e70e:	0005      	movs	r5, r0
   1e710:	0008      	movs	r0, r1
   1e712:	0011      	movs	r1, r2
   1e714:	2200      	movs	r2, #0
   1e716:	4c06      	ldr	r4, [pc, #24]	; (1e730 <_lseek_r+0x24>)
   1e718:	6022      	str	r2, [r4, #0]
   1e71a:	001a      	movs	r2, r3
   1e71c:	f7e3 fe81 	bl	2422 <_lseek>
   1e720:	1c43      	adds	r3, r0, #1
   1e722:	d000      	beq.n	1e726 <_lseek_r+0x1a>
   1e724:	bd70      	pop	{r4, r5, r6, pc}
   1e726:	6823      	ldr	r3, [r4, #0]
   1e728:	2b00      	cmp	r3, #0
   1e72a:	d0fb      	beq.n	1e724 <_lseek_r+0x18>
   1e72c:	602b      	str	r3, [r5, #0]
   1e72e:	e7f9      	b.n	1e724 <_lseek_r+0x18>
   1e730:	20001d1c 	.word	0x20001d1c

0001e734 <_read_r>:
   1e734:	b570      	push	{r4, r5, r6, lr}
   1e736:	0005      	movs	r5, r0
   1e738:	0008      	movs	r0, r1
   1e73a:	0011      	movs	r1, r2
   1e73c:	2200      	movs	r2, #0
   1e73e:	4c06      	ldr	r4, [pc, #24]	; (1e758 <_read_r+0x24>)
   1e740:	6022      	str	r2, [r4, #0]
   1e742:	001a      	movs	r2, r3
   1e744:	f7e2 fef6 	bl	1534 <_read>
   1e748:	1c43      	adds	r3, r0, #1
   1e74a:	d000      	beq.n	1e74e <_read_r+0x1a>
   1e74c:	bd70      	pop	{r4, r5, r6, pc}
   1e74e:	6823      	ldr	r3, [r4, #0]
   1e750:	2b00      	cmp	r3, #0
   1e752:	d0fb      	beq.n	1e74c <_read_r+0x18>
   1e754:	602b      	str	r3, [r5, #0]
   1e756:	e7f9      	b.n	1e74c <_read_r+0x18>
   1e758:	20001d1c 	.word	0x20001d1c

0001e75c <__swbuf_r>:
   1e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e75e:	0006      	movs	r6, r0
   1e760:	000d      	movs	r5, r1
   1e762:	0014      	movs	r4, r2
   1e764:	2800      	cmp	r0, #0
   1e766:	d002      	beq.n	1e76e <__swbuf_r+0x12>
   1e768:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e76a:	2b00      	cmp	r3, #0
   1e76c:	d04e      	beq.n	1e80c <__swbuf_r+0xb0>
   1e76e:	69a3      	ldr	r3, [r4, #24]
   1e770:	60a3      	str	r3, [r4, #8]
   1e772:	230c      	movs	r3, #12
   1e774:	5ee0      	ldrsh	r0, [r4, r3]
   1e776:	b281      	uxth	r1, r0
   1e778:	070b      	lsls	r3, r1, #28
   1e77a:	d53c      	bpl.n	1e7f6 <__swbuf_r+0x9a>
   1e77c:	6923      	ldr	r3, [r4, #16]
   1e77e:	2b00      	cmp	r3, #0
   1e780:	d039      	beq.n	1e7f6 <__swbuf_r+0x9a>
   1e782:	22ff      	movs	r2, #255	; 0xff
   1e784:	b2ef      	uxtb	r7, r5
   1e786:	4015      	ands	r5, r2
   1e788:	2280      	movs	r2, #128	; 0x80
   1e78a:	0192      	lsls	r2, r2, #6
   1e78c:	4211      	tst	r1, r2
   1e78e:	d015      	beq.n	1e7bc <__swbuf_r+0x60>
   1e790:	6822      	ldr	r2, [r4, #0]
   1e792:	6961      	ldr	r1, [r4, #20]
   1e794:	1ad3      	subs	r3, r2, r3
   1e796:	428b      	cmp	r3, r1
   1e798:	da1b      	bge.n	1e7d2 <__swbuf_r+0x76>
   1e79a:	3301      	adds	r3, #1
   1e79c:	68a1      	ldr	r1, [r4, #8]
   1e79e:	3901      	subs	r1, #1
   1e7a0:	60a1      	str	r1, [r4, #8]
   1e7a2:	1c51      	adds	r1, r2, #1
   1e7a4:	6021      	str	r1, [r4, #0]
   1e7a6:	7017      	strb	r7, [r2, #0]
   1e7a8:	6962      	ldr	r2, [r4, #20]
   1e7aa:	429a      	cmp	r2, r3
   1e7ac:	d01a      	beq.n	1e7e4 <__swbuf_r+0x88>
   1e7ae:	89a3      	ldrh	r3, [r4, #12]
   1e7b0:	07db      	lsls	r3, r3, #31
   1e7b2:	d501      	bpl.n	1e7b8 <__swbuf_r+0x5c>
   1e7b4:	2d0a      	cmp	r5, #10
   1e7b6:	d015      	beq.n	1e7e4 <__swbuf_r+0x88>
   1e7b8:	0028      	movs	r0, r5
   1e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e7bc:	4302      	orrs	r2, r0
   1e7be:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1e7c0:	81a2      	strh	r2, [r4, #12]
   1e7c2:	4a14      	ldr	r2, [pc, #80]	; (1e814 <__swbuf_r+0xb8>)
   1e7c4:	400a      	ands	r2, r1
   1e7c6:	6662      	str	r2, [r4, #100]	; 0x64
   1e7c8:	6961      	ldr	r1, [r4, #20]
   1e7ca:	6822      	ldr	r2, [r4, #0]
   1e7cc:	1ad3      	subs	r3, r2, r3
   1e7ce:	428b      	cmp	r3, r1
   1e7d0:	dbe3      	blt.n	1e79a <__swbuf_r+0x3e>
   1e7d2:	0021      	movs	r1, r4
   1e7d4:	0030      	movs	r0, r6
   1e7d6:	f7fe f833 	bl	1c840 <_fflush_r>
   1e7da:	2800      	cmp	r0, #0
   1e7dc:	d108      	bne.n	1e7f0 <__swbuf_r+0x94>
   1e7de:	6822      	ldr	r2, [r4, #0]
   1e7e0:	2301      	movs	r3, #1
   1e7e2:	e7db      	b.n	1e79c <__swbuf_r+0x40>
   1e7e4:	0021      	movs	r1, r4
   1e7e6:	0030      	movs	r0, r6
   1e7e8:	f7fe f82a 	bl	1c840 <_fflush_r>
   1e7ec:	2800      	cmp	r0, #0
   1e7ee:	d0e3      	beq.n	1e7b8 <__swbuf_r+0x5c>
   1e7f0:	2501      	movs	r5, #1
   1e7f2:	426d      	negs	r5, r5
   1e7f4:	e7e0      	b.n	1e7b8 <__swbuf_r+0x5c>
   1e7f6:	0021      	movs	r1, r4
   1e7f8:	0030      	movs	r0, r6
   1e7fa:	f7fc fe8d 	bl	1b518 <__swsetup_r>
   1e7fe:	2800      	cmp	r0, #0
   1e800:	d1f6      	bne.n	1e7f0 <__swbuf_r+0x94>
   1e802:	230c      	movs	r3, #12
   1e804:	5ee0      	ldrsh	r0, [r4, r3]
   1e806:	6923      	ldr	r3, [r4, #16]
   1e808:	b281      	uxth	r1, r0
   1e80a:	e7ba      	b.n	1e782 <__swbuf_r+0x26>
   1e80c:	f7fe f872 	bl	1c8f4 <__sinit>
   1e810:	e7ad      	b.n	1e76e <__swbuf_r+0x12>
   1e812:	46c0      	nop			; (mov r8, r8)
   1e814:	ffffdfff 	.word	0xffffdfff

0001e818 <_wcrtomb_r>:
   1e818:	b570      	push	{r4, r5, r6, lr}
   1e81a:	001d      	movs	r5, r3
   1e81c:	4b11      	ldr	r3, [pc, #68]	; (1e864 <_wcrtomb_r+0x4c>)
   1e81e:	b084      	sub	sp, #16
   1e820:	681b      	ldr	r3, [r3, #0]
   1e822:	0004      	movs	r4, r0
   1e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e826:	2900      	cmp	r1, #0
   1e828:	d00e      	beq.n	1e848 <_wcrtomb_r+0x30>
   1e82a:	2b00      	cmp	r3, #0
   1e82c:	d016      	beq.n	1e85c <_wcrtomb_r+0x44>
   1e82e:	20e0      	movs	r0, #224	; 0xe0
   1e830:	581e      	ldr	r6, [r3, r0]
   1e832:	002b      	movs	r3, r5
   1e834:	0020      	movs	r0, r4
   1e836:	47b0      	blx	r6
   1e838:	1c43      	adds	r3, r0, #1
   1e83a:	d103      	bne.n	1e844 <_wcrtomb_r+0x2c>
   1e83c:	2300      	movs	r3, #0
   1e83e:	602b      	str	r3, [r5, #0]
   1e840:	338a      	adds	r3, #138	; 0x8a
   1e842:	6023      	str	r3, [r4, #0]
   1e844:	b004      	add	sp, #16
   1e846:	bd70      	pop	{r4, r5, r6, pc}
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d009      	beq.n	1e860 <_wcrtomb_r+0x48>
   1e84c:	22e0      	movs	r2, #224	; 0xe0
   1e84e:	a901      	add	r1, sp, #4
   1e850:	589e      	ldr	r6, [r3, r2]
   1e852:	0020      	movs	r0, r4
   1e854:	002b      	movs	r3, r5
   1e856:	2200      	movs	r2, #0
   1e858:	47b0      	blx	r6
   1e85a:	e7ed      	b.n	1e838 <_wcrtomb_r+0x20>
   1e85c:	4b02      	ldr	r3, [pc, #8]	; (1e868 <_wcrtomb_r+0x50>)
   1e85e:	e7e6      	b.n	1e82e <_wcrtomb_r+0x16>
   1e860:	4b01      	ldr	r3, [pc, #4]	; (1e868 <_wcrtomb_r+0x50>)
   1e862:	e7f3      	b.n	1e84c <_wcrtomb_r+0x34>
   1e864:	20000118 	.word	0x20000118
   1e868:	2000054c 	.word	0x2000054c

0001e86c <__aeabi_dcmpun>:
   1e86c:	b570      	push	{r4, r5, r6, lr}
   1e86e:	4e0e      	ldr	r6, [pc, #56]	; (1e8a8 <__aeabi_dcmpun+0x3c>)
   1e870:	030d      	lsls	r5, r1, #12
   1e872:	031c      	lsls	r4, r3, #12
   1e874:	0049      	lsls	r1, r1, #1
   1e876:	005b      	lsls	r3, r3, #1
   1e878:	0b2d      	lsrs	r5, r5, #12
   1e87a:	0d49      	lsrs	r1, r1, #21
   1e87c:	0b24      	lsrs	r4, r4, #12
   1e87e:	0d5b      	lsrs	r3, r3, #21
   1e880:	42b1      	cmp	r1, r6
   1e882:	d004      	beq.n	1e88e <__aeabi_dcmpun+0x22>
   1e884:	4908      	ldr	r1, [pc, #32]	; (1e8a8 <__aeabi_dcmpun+0x3c>)
   1e886:	2000      	movs	r0, #0
   1e888:	428b      	cmp	r3, r1
   1e88a:	d008      	beq.n	1e89e <__aeabi_dcmpun+0x32>
   1e88c:	bd70      	pop	{r4, r5, r6, pc}
   1e88e:	4305      	orrs	r5, r0
   1e890:	2001      	movs	r0, #1
   1e892:	2d00      	cmp	r5, #0
   1e894:	d1fa      	bne.n	1e88c <__aeabi_dcmpun+0x20>
   1e896:	4904      	ldr	r1, [pc, #16]	; (1e8a8 <__aeabi_dcmpun+0x3c>)
   1e898:	2000      	movs	r0, #0
   1e89a:	428b      	cmp	r3, r1
   1e89c:	d1f6      	bne.n	1e88c <__aeabi_dcmpun+0x20>
   1e89e:	4314      	orrs	r4, r2
   1e8a0:	0020      	movs	r0, r4
   1e8a2:	1e44      	subs	r4, r0, #1
   1e8a4:	41a0      	sbcs	r0, r4
   1e8a6:	e7f1      	b.n	1e88c <__aeabi_dcmpun+0x20>
   1e8a8:	000007ff 	.word	0x000007ff

0001e8ac <LoRaMacMaxEirpTable>:
   1e8ac:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1e8bc:	00004b4f 79737542 00000000 76726553     OK..Busy....Serv
   1e8cc:	20656369 6e6b6e75 006e776f 61726150     ice unknown.Para
   1e8dc:	6574656d 6e692072 696c6176 00000064     meter invalid...
   1e8ec:	71657246 636e6575 6e692079 696c6176     Frequency invali
   1e8fc:	00000064 61746144 65746172 766e6920     d...Datarate inv
   1e90c:	64696c61 00000000 71657246 636e6575     alid....Frequenc
   1e91c:	726f2079 74616420 74617261 6e692065     y or datarate in
   1e92c:	696c6176 00000064 6e206f4e 6f777465     valid...No netwo
   1e93c:	6a206b72 656e696f 00000064 676e654c     rk joined...Leng
   1e94c:	65206874 726f7272 00000000 69676552     th error....Regi
   1e95c:	6e206e6f 7320746f 6f707075 64657472     on not supported
   1e96c:	00000000 70696b53 20646570 20505041     ....Skipped APP 
   1e97c:	61746164 00000000 79747544 6379632d     data....Duty-cyc
   1e98c:	7220656c 72747365 65746369 00000064     le restricted...
   1e99c:	63206f4e 6e6e6168 66206c65 646e756f     No channel found
   1e9ac:	00000000 66206f4e 20656572 6e616863     ....No free chan
   1e9bc:	206c656e 6e756f66 00000064 79737542     nel found...Busy
   1e9cc:	61656220 206e6f63 65736572 64657672      beacon reserved
   1e9dc:	6d697420 00000065 79737542 6e697020      time...Busy pin
   1e9ec:	6c732d67 7720746f 6f646e69 69742077     g-slot window ti
   1e9fc:	0000656d 79737542 6c707520 206b6e69     me..Busy uplink 
   1ea0c:	6c6c6f63 6f697369 0000006e 70797243     collision...Cryp
   1ea1c:	65206f74 726f7272 00000000 746e4346     to error....FCnt
   1ea2c:	6e616820 72656c64 72726520 0000726f      handler error..
   1ea3c:	2043414d 6d6d6f63 20646e61 6f727265     MAC command erro
   1ea4c:	00000072 73616c43 65204273 726f7272     r...ClassB error
   1ea5c:	00000000 666e6f43 206d7269 75657571     ....Confirm queu
   1ea6c:	72652065 00726f72 6e6b6e55 206e776f     e error.Unknown 
   1ea7c:	6f727265 00000072 6f727245 00000072     error...Error...
   1ea8c:	74207854 6f656d69 00007475 31207852     Tx timeout..Rx 1
   1ea9c:	6d697420 74756f65 00000000 32207852      timeout....Rx 2
   1eaac:	6d697420 74756f65 00000000 20317852      timeout....Rx1 
   1eabc:	6f727265 00000072 20327852 6f727265     error...Rx2 erro
   1eacc:	00000072 6e696f4a 69616620 0064656c     r...Join failed.
   1eadc:	6e776f44 6b6e696c 70657220 65746165     Downlink repeate
   1eaec:	00000064 44207854 61702052 616f6c79     d...Tx DR payloa
   1eafc:	69732064 6520657a 726f7272 00000000     d size error....
   1eb0c:	6e776f44 6b6e696c 6f6f7420 6e616d20     Downlink too man
   1eb1c:	72662079 73656d61 736f6c20 00000073     y frames loss...
   1eb2c:	72646441 20737365 6c696166 00000000     Address fail....
   1eb3c:	2043494d 6c696166 00000000 746c754d     MIC fail....Mult
   1eb4c:	73616369 61662074 00006c69 63616542     icast fail..Beac
   1eb5c:	6c206e6f 656b636f 00000064 63616542     on locked...Beac
   1eb6c:	6c206e6f 0074736f 63616542 6e206e6f     on lost.Beacon n
   1eb7c:	6620746f 646e756f 00000000 0000000d     ot found........
   1eb8c:	58323025 00000020 23230a0d 23232323     %02X .....######
   1eb9c:	3d3d3d20 4d203d3d 2d454d4c 75716552      ===== MLME-Requ
   1ebac:	20747365 4c4d202d 4a5f454d 204e494f     est - MLME_JOIN 
   1ebbc:	3d3d3d3d 23232320 0d232323 00000000     ==== ######.....
   1ebcc:	54415453 20205355 20202020 7325203a     STATUS      : %s
   1ebdc:	00000a0d 23232323 3d202323 3d3d3d3d     ....###### =====
   1ebec:	494f4a20 474e494e 3d3d3d20 2323203d      JOINING ==== ##
   1ebfc:	23232323 0000000d 23230a0d 23232323     ####......######
   1ec0c:	3d3d3d20 4d203d3d 2d535043 75716552      ===== MCPS-Requ
   1ec1c:	20747365 3d3d3d3d 23232320 0d232323     est ==== ######.
   1ec2c:	00000000 23230a0d 23232323 3d3d3d20     ......###### ===
   1ec3c:	4d203d3d 2d535043 666e6f43 206d7269     == MCPS-Confirm 
   1ec4c:	3d3d3d3d 23232320 0d232323 00000000     ==== ######.....
   1ec5c:	23230a0d 23232323 3d3d3d20 55203d3d     ..###### ===== U
   1ec6c:	4e494c50 5246204b 20454d41 20756c25     PLINK FRAME %lu 
   1ec7c:	3d3d3d3d 23232320 0d232323 0000000a     ==== ######.....
   1ec8c:	53414c43 20202053 20202020 6325203a     CLASS       : %c
   1ec9c:	00000a0d 50205854 2054524f 20202020     ....TX PORT     
   1ecac:	6425203a 00000a0d 44205854 20415441     : %d....TX DATA 
   1ecbc:	20202020 0000203a 004b4341 4b43414e         : ..ACK.NACK
   1eccc:	00000000 464e4f43 454d5249 202d2044     ....CONFIRMED - 
   1ecdc:	0a0d7325 00000000 4f434e55 5249464e     %s......UNCONFIR
   1ecec:	0d44454d 00000000 41544144 54415220     MED.....DATA RAT
   1ecfc:	20202045 5244203a 0d64255f 0000000a     E   : DR_%d.....
   1ed0c:	204c2f55 51455246 20202020 6c25203a     U/L FREQ    : %l
   1ed1c:	000a0d75 50205854 5245574f 20202020     u...TX POWER    
   1ed2c:	6425203a 00000a0d 4e414843 204c454e     : %d....CHANNEL 
   1ed3c:	4b53414d 0000203a 58343025 00000020     MASK: ..%04X ...
   1ed4c:	00434241 23230a0d 23232323 3d3d3d20     ABC...###### ===
   1ed5c:	4d203d3d 2d535043 69646e49 69746163     == MCPS-Indicati
   1ed6c:	3d206e6f 203d3d3d 23232323 000d2323     on ==== ######..
   1ed7c:	23230a0d 23232323 3d3d3d20 4d203d3d     ..###### ===== M
   1ed8c:	2d454d4c 75716552 20747365 4c4d202d     LME-Request - ML
   1ed9c:	4c5f454d 5f4b4e49 43454843 3d3d204b     ME_LINK_CHECK ==
   1edac:	23203d3d 23232323 00000d23 23230a0d     == ######.....##
   1edbc:	23232323 3d3d3d20 4d203d3d 2d454d4c     #### ===== MLME-
   1edcc:	75716552 20747365 4c4d202d 545f454d     Request - MLME_T
   1eddc:	20574358 3d3d3d3d 23232320 0d232323     XCW ==== ######.
   1edec:	00000000 23230a0d 23232323 3d3d3d20     ......###### ===
   1edfc:	4d203d3d 2d454d4c 75716552 20747365     == MLME-Request 
   1ee0c:	4c4d202d 545f454d 31574358 3d3d3d20     - MLME_TXCW1 ===
   1ee1c:	2323203d 23232323 0000000d 23230a0d     = ######......##
   1ee2c:	23232323 3d3d3d20 44203d3d 4c4e574f     #### ===== DOWNL
   1ee3c:	204b4e49 4d415246 6c252045 3d3d2075     INK FRAME %lu ==
   1ee4c:	23203d3d 23232323 000a0d23 57205852     == ######...RX W
   1ee5c:	4f444e49 20202057 7325203a 00000a0d     INDOW   : %s....
   1ee6c:	50205852 2054524f 20202020 6425203a     RX PORT     : %d
   1ee7c:	00000a0d 44205852 20415441 20202020     ....RX DATA     
   1ee8c:	000d203a 52205852 20495353 20202020     : ..RX RSSI     
   1ee9c:	6425203a 00000a0d 53205852 2020524e     : %d....RX SNR  
   1eeac:	20202020 6c25203a 000a0d64 00000031         : %ld...1...
   1eebc:	00000032 00000043 676e6950 6f6c532d     2...C...Ping-Slo
   1eecc:	00000074 746c754d 73616369 69502074     t...Multicast Pi
   1eedc:	532d676e 00746f6c 0001eeb8 0001eebc     ng-Slot.........
   1eeec:	0001eec0 0001eec4 0001eed0 000008c0     ................
   1eefc:	00000902 0000090a 00000918 00000926     ............&...
   1ef0c:	00000984 000009be 00000a04 23230a0d     ..............##
   1ef1c:	23232323 3d3d3d20 4d203d3d 2d454d4c     #### ===== MLME-
   1ef2c:	666e6f43 206d7269 3d3d3d3d 23232320     Confirm ==== ###
   1ef3c:	0d232323 00000000 23232323 3d202323     ###.....###### =
   1ef4c:	3d3d3d3d 494f4a20 2044454e 3d3d3d3d     ==== JOINED ====
   1ef5c:	23232320 0d232323 00000000 544f0a0d      ######.......OT
   1ef6c:	0a0d4141 0000000d 41766544 20726464     AA......DevAddr 
   1ef7c:	20202020 3025203a 0d586c38 0000000a         : %08lX.....
   1ef8c:	00000d0a 23230a0d 23232323 3d3d3d20     ......###### ===
   1ef9c:	4d203d3d 2d454d4c 69646e49 69746163     == MLME-Indicati
   1efac:	3d206e6f 203d3d3d 23232323 000d2323     on ==== ######..
   1efbc:	72617453 70612074 00000d70 23232323     Start app...####
   1efcc:	3d202323 3d3d3d3d 616c4320 20437373     ## ===== ClassC 
   1efdc:	6f6d6564 70706120 6163696c 6e6f6974     demo application
   1efec:	2e317620 43522e30 3d3d2031 23203d3d      v1.0.RC1 ==== #
   1effc:	23232323 0d0a0d23 00000000 23230a0d     #####.........##
   1f00c:	23232323 3d3d3d20 43203d3d 20535854     #### ===== CTXS 
   1f01c:	54534552 4445524f 3d3d3d20 2323203d     RESTORED ==== ##
   1f02c:	23232323 000d0a0d 45766544 20206975     ####....DevEui  
   1f03c:	20202020 3025203a 00005832 3230252d         : %02X..-%02
   1f04c:	00000058 45707041 20206975 20202020     X...AppEui      
   1f05c:	3025203a 00005832 4b707041 20207965     : %02X..AppKey  
   1f06c:	20202020 3025203a 00005832 32302520         : %02X.. %02
   1f07c:	00000058 23230a0d 23232323 3d3d3d20     X.....###### ===
   1f08c:	43203d3d 20535854 524f5453 3d204445     == CTXS STORED =
   1f09c:	203d3d3d 23232323 000d2323 33d3e608     === ######.....3
   1f0ac:	00000003 00000ef6 00000f8c 000010b8     ................
   1f0bc:	00001178 0000119e 000012cc 622f2e2e     x............./b
   1f0cc:	6472616f 75636d2f 6d61732f 2f31326c     oard/mcu/saml21/
   1f0dc:	2f6c7068 74726f70 6c70682f 6970675f     hpl/port/hpl_gpi
   1f0ec:	61625f6f 682e6573 00000000 622f2e2e     o_base.h....../b
   1f0fc:	6472616f 75636d2f 6d61732f 2f31326c     oard/mcu/saml21/
   1f10c:	2f6c6168 2f637273 5f6c6168 632e6f69     hal/src/hal_io.c
   1f11c:	00000000 622f2e2e 6472616f 75636d2f     ....../board/mcu
   1f12c:	6d61732f 2f31326c 2f6c6168 2f637273     /saml21/hal/src/
   1f13c:	5f6c6168 5f697073 79735f6d 632e636e     hal_spi_m_sync.c
   1f14c:	00000000 622f2e2e 6472616f 75636d2f     ....../board/mcu
   1f15c:	6d61732f 2f31326c 2f6c6168 2f637273     /saml21/hal/src/
   1f16c:	5f6c6168 72617375 79735f74 632e636e     hal_usart_sync.c
   1f17c:	00000000 622f2e2e 6472616f 75636d2f     ....../board/mcu
   1f18c:	6d61732f 2f31326c 2f6c7068 65726f63     /saml21/hpl/core
   1f19c:	6c70682f 726f635f 306d5f65 73756c70     /hpl_core_m0plus
   1f1ac:	7361625f 00632e65 000024ea 000024c8     _base.c..$...$..
   1f1bc:	000024a6 00002484 00002462 000025d6     .$...$..b$...%..
   1f1cc:	000025b4 000025a0 00002582 0000256a     .%...%...%..j%..

0001f1dc <_map>:
   1f1dc:	00000004 00000014 00000005 00000015     ................
   1f1ec:	0000000c 0000002c 0000000d 0000002d     ....,.......-...
   1f1fc:	0000000e 0000002e 0000000f 0000002f     ............/...
   1f20c:	622f2e2e 6472616f 75636d2f 6d61732f     ../board/mcu/sam
   1f21c:	2f31326c 2f6c7068 2f636965 5f6c7068     l21/hpl/eic/hpl_
   1f22c:	2e636965 00000063 622f2e2e 6472616f     eic.c...../board
   1f23c:	75636d2f 6d61732f 2f31326c 2f6c7068     /mcu/saml21/hpl/
   1f24c:	63726573 682f6d6f 735f6c70 6f637265     sercom/hpl_serco
   1f25c:	00632e6d                                m.c.

0001f260 <sercomspi_regs>:
   1f260:	0001000c 00020000 00000000 01ff0003     ................
   1f270:	00000005 622f2e2e 6472616f 75636d2f     ....../board/mcu
   1f280:	6d61732f 2f31326c 2f6c7068 74726f70     /saml21/hpl/port
   1f290:	6c70682f 6970675f 61625f6f 682e6573     /hpl_gpio_base.h
   1f2a0:	00000000                                ....

0001f2a4 <Radio>:
   1f2a4:	000127e5 000128e9 00014135 000128fd     .'...(..5A...(..
   1f2b4:	00012979 00012a49 00012c35 00013131     y)..I*..5,..11..
   1f2c4:	00005879 0001350d 00013871 00013a19     yX...5..q8...:..
   1f2d4:	00013a55 00013a91 00013ef5 00013f55     U:...:...>..U?..
   1f2e4:	00014031 000141fd 00014229 00014259     1@...A..)B..YB..
   1f2f4:	000142ed 000143d5 00014441 0001448d     .B...C..AD...D..
	...

0001f310 <LoRaMacMaxEirpTable>:
   1f310:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1f320:	00008a08 00007a98 00007ae8 00007b3c     .....z...z..<{..
   1f330:	00007cd0 00007d64 00007eae 00007f1e     .|..d}...~......
   1f340:	00008024 000080c8 00008258 0000820a     $.......X.......
   1f350:	00008332 0000860a 000083ae 00008504     2...............
   1f360:	00008778 0000879e 0000887a 00008968     x.......z...h...
   1f370:	00008a08 00008a08 00008a08 00008a08     ................
   1f380:	00008a08 00008a08 00008a08 00008a08     ................
   1f390:	00008a08 00008a08 00008a08 00008a08     ................
   1f3a0:	000085de 0000ac66 0000ac76 0000ac88     ....f...v.......
   1f3b0:	0000ac98 0000aca6 0000aeb4 0000aeb4     ................
   1f3c0:	0000aeb4 0000aeb4 0000aeb4 0000aeb4     ................
   1f3d0:	0000aeb4 0000aeb4 0000aeb4 0000aeb4     ................
   1f3e0:	0000aeb4 0000aeb4 0000aeb4 0000aeb4     ................
   1f3f0:	0000aeb4 0000aeb4 0000aeb4 0000aeb4     ................
   1f400:	0000aeb4 0000aeb4 0000aeb4 0000acb4     ................
   1f410:	0000acc4 0000acd6 0000ad08 0000ad1c     ................
   1f420:	0000ad60 0000ad2e 0000ad92 0000ada2     `...............
   1f430:	0000adb2 0000adc2 0000add2 0000ade2     ................
   1f440:	0000adf2 0000ae02 0000ae22 0000ae12     ........".......
   1f450:	0000ae32 0000ae42 0000ae52 0000ae70     2...B...R...p...
   1f460:	0000ae64 0000aeb4 0000ae7e 0000ae90     d.......~.......
   1f470:	0000aea2 0000af32 0000af48 0000af70     ....2...H...p...
   1f480:	0000af82 0000af92 0000afa2 0000afd0     ................
   1f490:	0000affe 0000b02c 0000b05a 0000b088     ....,...Z.......
   1f4a0:	0000b0b6 0000b0e4 0000b112 0000b140     ............@...
   1f4b0:	0000b16a 0000b194 0000b1bc 0000b1e4     j...............
   1f4c0:	0000b20c 0000b234 0000b270 0000b298     ....4...p.......
   1f4d0:	0000b2c0 0000b2e8 0000b310 0000b338     ............8...
   1f4e0:	0000b35a 0000b7d4 0000b36c 0000b420     Z.......l... ...
   1f4f0:	0000b4b2 0000b472 0000b4f2 0000b51c     ....r...........
   1f500:	0000b52c 0000b53c 0000b54c 0000b55c     ,...<...L...\...
   1f510:	0000b56c 0000b5d0 0000b664 0000b624     l.......d...$...
   1f520:	0000b6a6 0000b6c0 0000b6da 0000b6ec     ................
   1f530:	0000b6fa 0000b720 0000b756 0000b796     .... ...V.......
   1f540:	0000b90e 0000b9f8 0000ba20 0000ba48     ........ ...H...
   1f550:	0000ba9e 0000bae2 0000bcf8 0000bcf8     ................
   1f560:	0000bcf8 0000bb2e 0000bcf8 0000bc98     ................
   1f570:	0000bb84 0000bc00                       ........

0001f578 <LoRaMacMaxEirpTable>:
   1f578:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001f588 <CIDsStickyAnsCmds>:
   1f588:	0008050a 0000ca5e 0000ca5a 0000ca5e     ....^...Z...^...
   1f598:	0000ca5e 0000ca5e 0000ca5a 0000ca5e     ^...^...Z...^...
   1f5a8:	0000ca5e 0000ca5a 0000ca5e 0000ca5a     ^...Z...^...Z...
   1f5b8:	0000ca5a 0000ca5e 0000ca5e 0000ca5e     Z...^...^...^...
   1f5c8:	0000ca5e 0000ca5e 0000ca5e 0000ca5e     ^...^...^...^...
   1f5d8:	0000ca5e 0000ca5e 0000ca5e 0000ca5e     ^...^...^...^...
   1f5e8:	0000ca5e 0000ca5e 0000ca5e 0000ca5e     ^...^...^...^...
   1f5f8:	0000ca5e 0000ca5e 0000ca5e 0000ca5e     ^...^...^...^...
   1f608:	0000ca5e 0000ca5a 0000e0c4 0000e0c8     ^...Z...........
   1f618:	0000e0de 0000e0f4 0000e10a 0000e114     ................
   1f628:	0000e11e 0000e128 0000e1c2 0000e17c     ....(.......|...
   1f638:	0000e186 0000e190 0000e19a 0000e1a4     ................
   1f648:	0000e1ae 0000e1b8 0000f0a2 0000f0b0     ................
   1f658:	0000f0be 0000f0cc 0000f05c 0000f18c     ........\.......
   1f668:	0000f190 0000f198 0000f1a0 0000f1a8     ................
   1f678:	0000f1b0 0000f1b8 0000f1c0              ............

0001f684 <LoRaMacMaxEirpTable>:
   1f684:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001f694 <DataratesEU868>:
   1f694:	090a0b0c 32070708                       .......2

0001f69c <BandwidthsEU868>:
   1f69c:	0001e848 0001e848 0001e848 0001e848     H...H...H...H...
   1f6ac:	0001e848 0001e848 0003d090 00000000     H...H...........

0001f6bc <MaxPayloadOfDatarateEU868>:
   1f6bc:	73333333 f2f2f2f2                       333s....

0001f6c4 <MaxPayloadOfDatarateRepeaterEU868>:
   1f6c4:	73333333 dededede 00011314 0001131e     333s............
   1f6d4:	000114ac 000114ac 000114ac 00011328     ............(...
   1f6e4:	000114ac 0001134c 000114ac 00011356     ....L.......V...
   1f6f4:	00011360 0001136a 00011374 0001138a     `...j...t.......
   1f704:	000113a0 000113aa 000113b4 000113c0     ................
   1f714:	000113cc 000113d6 000113e0 000113ec     ................
   1f724:	0001140e 00011418 00011422 0001142c     ........"...,...
   1f734:	00011436 00011440 0001144a 00011454     6...@...J...T...
   1f744:	00011454 0001145e 0001146a 00011332     T...^...j...2...
   1f754:	000114ac 000114ac 000114ac 000114ac     ................
   1f764:	000114ac 000114ac 000114ac 000114ac     ................
   1f774:	000114ac 000114ac 000114ac 000114ac     ................
   1f784:	000114ac 00011474 0001147e 00011498     ....t...~.......
   1f794:	000114ac 000114ac 000114a2 33be27a0     .............'.3
   1f7a4:	00000000 00000150 33c134e0 00000000     ....P....4.3....
   1f7b4:	00000150 33c44220 00000000 00000150     P... B.3....P...
   1f7c4:	000116a2 000116bc 000116d6 0001170e     ................
   1f7d4:	000116f0 000116f0 0001170e 0001170e     ................
   1f7e4:	0001170e 0001170e 0001170a              ............

0001f7f0 <RadioRegsInit>:
   1f7f0:	00230c00 0e001e0d 011a00d2 00aa1f00     ..#.............
   1f800:	27000724 c1280012 00942900 3000c12a     $..'..(..)..*..0
   1f810:	8f3500d8 00023b00 41000040 40230130     ..5..;..@..A0.#@

0001f820 <FskBandwidths>:
   1f820:	00000a28 00000017 00000c1c 0000000f     (...............
   1f830:	00000f3c 00000007 00001450 00000016     <.......P.......
   1f840:	0000189c 0000000e 00001e78 00000006     ........x.......
   1f850:	000028a0 00000015 000030d4 0000000d     .(.......0......
   1f860:	00003cf0 00000005 00005140 00000014     .<......@Q......
   1f870:	000061a8 0000000c 00007a44 00000004     .a......Dz......
   1f880:	0000a2e4 00000013 0000c350 0000000b     ........P.......
   1f890:	0000f424 00000003 00014585 00000012     $........E......
   1f8a0:	000186a0 0000000a 0001e848 00000002     ........H.......
   1f8b0:	00028b2c 00000011 00030d40 00000009     ,.......@.......
   1f8c0:	0003d090 00000001 000493e0 00000000     ................
   1f8d0:	00013bca 00013be6 00013c02 00013c1e     .;...;...<...<..
   1f8e0:	00013c3a 00013c56 00013c72 00013c7c     :<..V<..r<..|<..
   1f8f0:	00013c86                                .<..

0001f8f4 <sbox>:
   1f8f4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   1f904:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   1f914:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   1f924:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   1f934:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   1f944:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   1f954:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   1f964:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   1f974:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   1f984:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   1f994:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   1f9a4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   1f9b4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   1f9c4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   1f9d4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   1f9e4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0001f9f4 <gfm2_sbox>:
   1f9f4:	f6eef8c6 91ded6ff 56ce0260 ec4db5e7     ........`..V..M.
   1fa04:	fa891f8f fb8eb2ef 455fb341 9be45323     ........A._E#S..
   1fa14:	4c3de175 83f57e6c f9d15168 2a62abe2     u.=Ll~..hQ....b*
   1fa24:	9d469508 2f0a3730 df1b240e ea7f4ecd     ..F.07./.$...N..
   1fa34:	34581d12 5bb4dc36 7db776a4 135edd52     ..X46..[.v.}R.^.
   1fa44:	c100b9a6 b679e340 72678dd4 85b09894     ....@.y...gr....
   1fa54:	ed4fc5bb 11669a86 fe04e98a 4b2578a0     ..O...f......x%K
   1fa64:	05805da2 f170213f 42af7763 bffde520     .]..?!p.cw.B ...
   1fa74:	c3261881 2e8835be 7afc5593 e632bac8     ..&..5...U.z..2.
   1fa84:	a39e19c0 0b3b5444 286bc78c ad16bca7     ....DT;...k(....
   1fa94:	147464db b8480c92 c443bd9f f2d33139     .dt...H...C.91..
   1faa4:	da6e8bd5 499cb101 cff3acd8 1047f4ca     ..n....I......G.
   1fab4:	5c4af06f 97735738 3ee8a1cb 0f0d6196     o.J\8Ws....>.a..
   1fac4:	cc717ce0 1cf70690 69ae6ac2 273a9917     .|q......j.i..:'
   1fad4:	222bebd9 3307a9d2 c9153c2d a550aa87     ..+"...3-<....P.
   1fae4:	1a095903 d084d765 1e5a2982 2c6da87b     .Y..e....)Z.{.m,

0001faf4 <gfm3_sbox>:
   1faf4:	8d9984a5 54b1bd0d 7da90350 9ae66219     .......TP..}.b..
   1fb04:	87409d45 0bc9eb15 eafd67ec 5b96f7bf     E.@......g.....[
   1fb14:	6aae1cc2 4f02415a 0834f45c 3f537393     ...jZA.O\.4..sS?
   1fb24:	5e65520c b50fa128 3d9b3609 9fcd6926     .Re^(....6.=&i..
   1fb34:	2e749e1b fbeeb22d ce614df6 97713e7b     ..t.-....Ma.{>q.
   1fb44:	2c0068f5 edc81f60 4bd946be 4ae8d4de     .h.,`....F.K...J
   1fb54:	16e52a6b 9455d7c5 810610cf e3ba44f0     k*....U......D..
   1fb64:	8ac0fef3 0448bcad 6375c1df 6d0e1a30     ......H...uc0..m
   1fb74:	2f35144c 39cca2e1 4782f257 952be7ac     L.5/...9W..G..+.
   1fb84:	7fd198a0 83ab7e66 3cd329ca 761de279     ....f~...).<y..v
   1fb94:	1e4e563b e46c0adb a6ef6e5d 8b37a4a8     ;VN...l.]n....7.
   1fba4:	b7594332 e0d2648c 2507fab4 18e98eaf     2CY..d.....%....
   1fbb4:	726f88d5 51c7f124 219c7c23 8586dcdd     ..or$..Q#|.!....
   1fbc4:	aac44290 120105d8 d0f95fa3 b9275891     .B......._...X'.
   1fbd4:	33b31338 a78970bb 209222b6 7a78ff49     8..3.p...". I.xz
   1fbe4:	1780f88f b8c631da 1177b0c3 3ad6fccb     .....1....w....:
   1fbf4:	00018794 00018776 00018730 0001864e     ....v...0...N...
   1fc04:	00018730 00018768 00018730 0001864e     0...h...0...N...
   1fc14:	00018776 00018776 00018768 0001864e     v...v...h...N...
   1fc24:	00018646 00018646 00018646 000189ac     F...F...F.......
   1fc34:	00018ff4 00018eb4 00018eb4 00018eb0     ................
   1fc44:	00018fcc 00018fcc 00018fbe 00018eb0     ................
   1fc54:	00018fcc 00018fbe 00018fcc 00018eb0     ................
   1fc64:	00018fd4 00018fd4 00018fd4 000191d8     ................

0001fc74 <_global_impure_ptr>:
   1fc74:	20000120 0000000a 0001a3d6 0001a4aa      .. ............
   1fc84:	0001a4aa 0001a3c2 0001a4aa 0001a4aa     ................
   1fc94:	0001a4aa 0001a4aa 0001a4aa 0001a4aa     ................
   1fca4:	0001a47c 00019f8e 0001a4aa 00019f84     |...............
   1fcb4:	00019f98 0001a4aa 0001a3cc 0001a158     ............X...
   1fcc4:	0001a158 0001a158 0001a158 0001a158     X...X...X...X...
   1fcd4:	0001a158 0001a158 0001a158 0001a158     X...X...X...X...
   1fce4:	0001a4aa 0001a4aa 0001a4aa 0001a4aa     ................
   1fcf4:	0001a4aa 0001a4aa 0001a4aa 0001a4aa     ................
   1fd04:	0001a4aa 0001a4aa 0001a492 0001a3e6     ................
   1fd14:	0001a4aa 0001a3e6 0001a4aa 0001a4aa     ................
   1fd24:	0001a4aa 0001a4aa 0001a34c 0001a4aa     ........L.......
   1fd34:	0001a4aa 0001a356 0001a4aa 0001a4aa     ....V...........
   1fd44:	0001a4aa 0001a4aa 0001a4aa 0001a384     ................
   1fd54:	0001a4aa 0001a4aa 0001a3b2 0001a4aa     ................
   1fd64:	0001a4aa 0001a4aa 0001a4aa 0001a4aa     ................
   1fd74:	0001a4aa 0001a4aa 0001a4aa 0001a4aa     ................
   1fd84:	0001a4aa 0001a198 0001a1ce 0001a3e6     ................
   1fd94:	0001a3e6 0001a3e6 0001a276 0001a1ce     ........v.......
   1fda4:	0001a4aa 0001a4aa 0001a280 0001a4aa     ................
   1fdb4:	0001a292 0001a4a6 0001a2c0 0001a2ea     ................
   1fdc4:	0001a4aa 0001a2f4 0001a4aa 0001a4a2     ................
   1fdd4:	0001a4aa 0001a4aa 00019fe6 00464e49     ............INF.
   1fde4:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   1fdf4:	37363534 42413938 46454443 00000000     456789ABCDEF....
   1fe04:	33323130 37363534 62613938 66656463     0123456789abcdef
   1fe14:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

0001fe24 <blanks.7238>:
   1fe24:	20202020 20202020 20202020 20202020                     

0001fe34 <zeroes.7239>:
   1fe34:	30303030 30303030 30303030 30303030     0000000000000000
   1fe44:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   1fe54:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   1fe64:	00000000                                ....

0001fe68 <__mprec_bigtens>:
   1fe68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1fe78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1fe88:	7f73bf3c 75154fdd                       <.s..O.u

0001fe90 <__mprec_tens>:
   1fe90:	00000000 3ff00000 00000000 40240000     .......?......$@
   1fea0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1feb0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1fec0:	00000000 412e8480 00000000 416312d0     .......A......cA
   1fed0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1fee0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1fef0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1ff00:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1ff10:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1ff20:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1ff30:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1ff40:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1ff50:	79d99db4 44ea7843                       ...yCx.D

0001ff58 <p05.6055>:
   1ff58:	00000005 00000019 0000007d              ........}...

0001ff64 <_ctype_>:
   1ff64:	20202000 20202020 28282020 20282828     .         ((((( 
   1ff74:	20202020 20202020 20202020 20202020                     
   1ff84:	10108820 10101010 10101010 10101010      ...............
   1ff94:	04040410 04040404 10040404 10101010     ................
   1ffa4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1ffb4:	01010101 01010101 01010101 10101010     ................
   1ffc4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1ffd4:	02020202 02020202 02020202 10101010     ................
   1ffe4:	00000020 00000000 00000000 00000000      ...............
	...

00020068 <_init>:
   20068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2006a:	46c0      	nop			; (mov r8, r8)
   2006c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2006e:	bc08      	pop	{r3}
   20070:	469e      	mov	lr, r3
   20072:	4770      	bx	lr

00020074 <__init_array_start>:
   20074:	0001b5ed 	.word	0x0001b5ed

00020078 <__frame_dummy_init_array_entry>:
   20078:	000000dd                                ....

0002007c <_fini>:
   2007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2007e:	46c0      	nop			; (mov r8, r8)
   20080:	bcf8      	pop	{r3, r4, r5, r6, r7}
   20082:	bc08      	pop	{r3}
   20084:	469e      	mov	lr, r3
   20086:	4770      	bx	lr

00020088 <__fini_array_start>:
   20088:	000000b5 	.word	0x000000b5
