
LoRaMac-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014e0c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00014e0c  00014e0c  00024e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae4  20000000  00014e14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030ae4  2**0
                  CONTENTS
  4 .bss          00001248  20000ae4  000158f8  00030ae4  2**2
                  ALLOC
  5 .stack        00002004  20001d2c  00016b40  00030ae4  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030ae4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030b0c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004f5d2  00000000  00000000  00030b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000848c  00000000  00000000  00080137  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c4fc  00000000  00000000  000885c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001890  00000000  00000000  000a4abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002230  00000000  00000000  000a634f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023f4a  00000000  00000000  000a857f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001db5e  00000000  00000000  000cc4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a53be  00000000  00000000  000ea027  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000052ec  00000000  00000000  0018f3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 3d 00 20 3d 27 00 00 39 27 00 00 39 27 00 00     0=. ='..9'..9'..
	...
      2c:	39 27 00 00 00 00 00 00 00 00 00 00 39 27 00 00     9'..........9'..
      3c:	39 27 00 00 39 27 00 00 39 27 00 00 f1 1d 00 00     9'..9'..9'......
      4c:	71 17 00 00 39 27 00 00 39 27 00 00 39 27 00 00     q...9'..9'..9'..
      5c:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      6c:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      7c:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      8c:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      9c:	39 27 00 00 39 27 00 00 39 27 00 00 39 27 00 00     9'..9'..9'..9'..
      ac:	39 27 00 00 00 00 00 00                             9'......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000ae4 	.word	0x20000ae4
      d4:	00000000 	.word	0x00000000
      d8:	00014e14 	.word	0x00014e14

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000ae8 	.word	0x20000ae8
     108:	00014e14 	.word	0x00014e14
     10c:	00014e14 	.word	0x00014e14
     110:	00000000 	.word	0x00000000

00000114 <OnMacProcessNotify>:
    }
}

void OnMacProcessNotify( void )
{
    IsMacProcessPending = 1;
     114:	2201      	movs	r2, #1
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <OnMacProcessNotify+0x8>)
     118:	701a      	strb	r2, [r3, #0]
}
     11a:	4770      	bx	lr
     11c:	20000b00 	.word	0x20000b00

00000120 <OnLed2TimerEvent>:
{
     120:	b510      	push	{r4, lr}
    TimerStop( &Led2Timer );
     122:	4804      	ldr	r0, [pc, #16]	; (134 <OnLed2TimerEvent+0x14>)
     124:	3004      	adds	r0, #4
     126:	4b04      	ldr	r3, [pc, #16]	; (138 <OnLed2TimerEvent+0x18>)
     128:	4798      	blx	r3
    GpioWrite( &Led1, 0 );
     12a:	2100      	movs	r1, #0
     12c:	4803      	ldr	r0, [pc, #12]	; (13c <OnLed2TimerEvent+0x1c>)
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <OnLed2TimerEvent+0x20>)
     130:	4798      	blx	r3
}
     132:	bd10      	pop	{r4, pc}
     134:	20000b00 	.word	0x20000b00
     138:	0000c1a5 	.word	0x0000c1a5
     13c:	20001b80 	.word	0x20001b80
     140:	0000be91 	.word	0x0000be91

00000144 <OnLed1TimerEvent>:
{
     144:	b510      	push	{r4, lr}
    TimerStop( &Led1Timer );
     146:	4804      	ldr	r0, [pc, #16]	; (158 <OnLed1TimerEvent+0x14>)
     148:	3018      	adds	r0, #24
     14a:	4b04      	ldr	r3, [pc, #16]	; (15c <OnLed1TimerEvent+0x18>)
     14c:	4798      	blx	r3
    GpioWrite( &Led1, 0 );
     14e:	2100      	movs	r1, #0
     150:	4803      	ldr	r0, [pc, #12]	; (160 <OnLed1TimerEvent+0x1c>)
     152:	4b04      	ldr	r3, [pc, #16]	; (164 <OnLed1TimerEvent+0x20>)
     154:	4798      	blx	r3
}
     156:	bd10      	pop	{r4, pc}
     158:	20000b00 	.word	0x20000b00
     15c:	0000c1a5 	.word	0x0000c1a5
     160:	20001b80 	.word	0x20001b80
     164:	0000be91 	.word	0x0000be91

00000168 <JoinNetwork>:
{
     168:	b510      	push	{r4, lr}
     16a:	b084      	sub	sp, #16
    mlmeReq.Type = MLME_JOIN;
     16c:	2200      	movs	r2, #0
     16e:	466b      	mov	r3, sp
     170:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.DevEui = DevEui;
     172:	4b12      	ldr	r3, [pc, #72]	; (1bc <JoinNetwork+0x54>)
     174:	0019      	movs	r1, r3
     176:	312c      	adds	r1, #44	; 0x2c
     178:	9101      	str	r1, [sp, #4]
    mlmeReq.Req.Join.JoinEui = JoinEui;
     17a:	3334      	adds	r3, #52	; 0x34
     17c:	9302      	str	r3, [sp, #8]
    mlmeReq.Req.Join.Datarate = LORAWAN_DEFAULT_DATARATE;
     17e:	466b      	mov	r3, sp
     180:	731a      	strb	r2, [r3, #12]
    status = LoRaMacMlmeRequest( &mlmeReq );
     182:	4668      	mov	r0, sp
     184:	4b0e      	ldr	r3, [pc, #56]	; (1c0 <JoinNetwork+0x58>)
     186:	4798      	blx	r3
     188:	0004      	movs	r4, r0
    printf( "\r\n###### ===== MLME-Request - MLME_JOIN ==== ######\r\n" );
     18a:	480e      	ldr	r0, [pc, #56]	; (1c4 <JoinNetwork+0x5c>)
     18c:	4b0e      	ldr	r3, [pc, #56]	; (1c8 <JoinNetwork+0x60>)
     18e:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     190:	00a2      	lsls	r2, r4, #2
     192:	4b0e      	ldr	r3, [pc, #56]	; (1cc <JoinNetwork+0x64>)
     194:	58d1      	ldr	r1, [r2, r3]
     196:	480e      	ldr	r0, [pc, #56]	; (1d0 <JoinNetwork+0x68>)
     198:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <JoinNetwork+0x6c>)
     19a:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
     19c:	2c00      	cmp	r4, #0
     19e:	d005      	beq.n	1ac <JoinNetwork+0x44>
        DeviceState = DEVICE_STATE_CYCLE;
     1a0:	2104      	movs	r1, #4
     1a2:	233c      	movs	r3, #60	; 0x3c
     1a4:	4a05      	ldr	r2, [pc, #20]	; (1bc <JoinNetwork+0x54>)
     1a6:	54d1      	strb	r1, [r2, r3]
}
     1a8:	b004      	add	sp, #16
     1aa:	bd10      	pop	{r4, pc}
        printf( "###### ===== JOINING ==== ######\r\n" );
     1ac:	480a      	ldr	r0, [pc, #40]	; (1d8 <JoinNetwork+0x70>)
     1ae:	4b06      	ldr	r3, [pc, #24]	; (1c8 <JoinNetwork+0x60>)
     1b0:	4798      	blx	r3
        DeviceState = DEVICE_STATE_SLEEP;
     1b2:	2105      	movs	r1, #5
     1b4:	233c      	movs	r3, #60	; 0x3c
     1b6:	4a01      	ldr	r2, [pc, #4]	; (1bc <JoinNetwork+0x54>)
     1b8:	54d1      	strb	r1, [r2, r3]
     1ba:	e7f5      	b.n	1a8 <JoinNetwork+0x40>
     1bc:	20000b00 	.word	0x20000b00
     1c0:	00006389 	.word	0x00006389
     1c4:	00013738 	.word	0x00013738
     1c8:	0000ed01 	.word	0x0000ed01
     1cc:	20000000 	.word	0x20000000
     1d0:	00013770 	.word	0x00013770
     1d4:	0000ec6d 	.word	0x0000ec6d
     1d8:	00013784 	.word	0x00013784

000001dc <OnTxNextPacketTimerEvent>:
{
     1dc:	b500      	push	{lr}
     1de:	b087      	sub	sp, #28
    TimerStop( &TxNextPacketTimer );
     1e0:	480e      	ldr	r0, [pc, #56]	; (21c <OnTxNextPacketTimerEvent+0x40>)
     1e2:	3040      	adds	r0, #64	; 0x40
     1e4:	4b0e      	ldr	r3, [pc, #56]	; (220 <OnTxNextPacketTimerEvent+0x44>)
     1e6:	4798      	blx	r3
    mibReq.Type = MIB_NETWORK_ACTIVATION;
     1e8:	2301      	movs	r3, #1
     1ea:	466a      	mov	r2, sp
     1ec:	7013      	strb	r3, [r2, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
     1ee:	4668      	mov	r0, sp
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <OnTxNextPacketTimerEvent+0x48>)
     1f2:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
     1f4:	2800      	cmp	r0, #0
     1f6:	d10b      	bne.n	210 <OnTxNextPacketTimerEvent+0x34>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
     1f8:	466b      	mov	r3, sp
     1fa:	791b      	ldrb	r3, [r3, #4]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d009      	beq.n	214 <OnTxNextPacketTimerEvent+0x38>
            DeviceState = DEVICE_STATE_SEND;
     200:	2103      	movs	r1, #3
     202:	233c      	movs	r3, #60	; 0x3c
     204:	4a05      	ldr	r2, [pc, #20]	; (21c <OnTxNextPacketTimerEvent+0x40>)
     206:	54d1      	strb	r1, [r2, r3]
            NextTx = true;
     208:	3902      	subs	r1, #2
     20a:	3320      	adds	r3, #32
     20c:	4a06      	ldr	r2, [pc, #24]	; (228 <OnTxNextPacketTimerEvent+0x4c>)
     20e:	54d1      	strb	r1, [r2, r3]
}
     210:	b007      	add	sp, #28
     212:	bd00      	pop	{pc}
            JoinNetwork( );
     214:	4b05      	ldr	r3, [pc, #20]	; (22c <OnTxNextPacketTimerEvent+0x50>)
     216:	4798      	blx	r3
     218:	e7fa      	b.n	210 <OnTxNextPacketTimerEvent+0x34>
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	20000b00 	.word	0x20000b00
     220:	0000c1a5 	.word	0x0000c1a5
     224:	00005955 	.word	0x00005955
     228:	20000000 	.word	0x20000000
     22c:	00000169 	.word	0x00000169

00000230 <MlmeIndication>:
{
     230:	b510      	push	{r4, lr}
     232:	0004      	movs	r4, r0
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
     234:	7843      	ldrb	r3, [r0, #1]
     236:	2b0e      	cmp	r3, #14
     238:	d00a      	beq.n	250 <MlmeIndication+0x20>
        printf( "\r\n###### ===== MLME-Indication ==== ######\r\n" );
     23a:	4809      	ldr	r0, [pc, #36]	; (260 <MlmeIndication+0x30>)
     23c:	4b09      	ldr	r3, [pc, #36]	; (264 <MlmeIndication+0x34>)
     23e:	4798      	blx	r3
        printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeIndication->Status] );
     240:	7862      	ldrb	r2, [r4, #1]
     242:	0092      	lsls	r2, r2, #2
     244:	4b08      	ldr	r3, [pc, #32]	; (268 <MlmeIndication+0x38>)
     246:	189b      	adds	r3, r3, r2
     248:	6e19      	ldr	r1, [r3, #96]	; 0x60
     24a:	4808      	ldr	r0, [pc, #32]	; (26c <MlmeIndication+0x3c>)
     24c:	4b08      	ldr	r3, [pc, #32]	; (270 <MlmeIndication+0x40>)
     24e:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
     250:	7823      	ldrb	r3, [r4, #0]
     252:	2b06      	cmp	r3, #6
     254:	d000      	beq.n	258 <MlmeIndication+0x28>
}
     256:	bd10      	pop	{r4, pc}
            OnTxNextPacketTimerEvent( );
     258:	4b06      	ldr	r3, [pc, #24]	; (274 <MlmeIndication+0x44>)
     25a:	4798      	blx	r3
}
     25c:	e7fb      	b.n	256 <MlmeIndication+0x26>
     25e:	46c0      	nop			; (mov r8, r8)
     260:	000137a8 	.word	0x000137a8
     264:	0000ed01 	.word	0x0000ed01
     268:	20000000 	.word	0x20000000
     26c:	00013770 	.word	0x00013770
     270:	0000ec6d 	.word	0x0000ec6d
     274:	000001dd 	.word	0x000001dd

00000278 <MlmeConfirm>:
{
     278:	b570      	push	{r4, r5, r6, lr}
     27a:	b088      	sub	sp, #32
     27c:	0004      	movs	r4, r0
    printf( "\r\n###### ===== MLME-Confirm ==== ######\r\n" );
     27e:	4825      	ldr	r0, [pc, #148]	; (314 <MlmeConfirm+0x9c>)
     280:	4b25      	ldr	r3, [pc, #148]	; (318 <MlmeConfirm+0xa0>)
     282:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
     284:	7862      	ldrb	r2, [r4, #1]
     286:	0092      	lsls	r2, r2, #2
     288:	4b24      	ldr	r3, [pc, #144]	; (31c <MlmeConfirm+0xa4>)
     28a:	189b      	adds	r3, r3, r2
     28c:	6e19      	ldr	r1, [r3, #96]	; 0x60
     28e:	4824      	ldr	r0, [pc, #144]	; (320 <MlmeConfirm+0xa8>)
     290:	4b24      	ldr	r3, [pc, #144]	; (324 <MlmeConfirm+0xac>)
     292:	4798      	blx	r3
    if( mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     294:	7862      	ldrb	r2, [r4, #1]
    switch( mlmeConfirm->MlmeRequest )
     296:	7823      	ldrb	r3, [r4, #0]
     298:	2b00      	cmp	r3, #0
     29a:	d003      	beq.n	2a4 <MlmeConfirm+0x2c>
     29c:	2b03      	cmp	r3, #3
     29e:	d02a      	beq.n	2f6 <MlmeConfirm+0x7e>
}
     2a0:	b008      	add	sp, #32
     2a2:	bd70      	pop	{r4, r5, r6, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
     2a4:	2a00      	cmp	r2, #0
     2a6:	d123      	bne.n	2f0 <MlmeConfirm+0x78>
                printf( "###### ===== JOINED ==== ######\r\n" );
     2a8:	481f      	ldr	r0, [pc, #124]	; (328 <MlmeConfirm+0xb0>)
     2aa:	4c1b      	ldr	r4, [pc, #108]	; (318 <MlmeConfirm+0xa0>)
     2ac:	47a0      	blx	r4
                printf( "\r\nOTAA\r\n\r\n" );
     2ae:	481f      	ldr	r0, [pc, #124]	; (32c <MlmeConfirm+0xb4>)
     2b0:	47a0      	blx	r4
                mibGet.Type = MIB_DEV_ADDR;
     2b2:	2304      	movs	r3, #4
     2b4:	aa02      	add	r2, sp, #8
     2b6:	7013      	strb	r3, [r2, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
     2b8:	0010      	movs	r0, r2
     2ba:	4e1d      	ldr	r6, [pc, #116]	; (330 <MlmeConfirm+0xb8>)
     2bc:	47b0      	blx	r6
                printf( "DevAddr     : %08lX\r\n", mibGet.Param.DevAddr );
     2be:	9b03      	ldr	r3, [sp, #12]
     2c0:	9301      	str	r3, [sp, #4]
     2c2:	0019      	movs	r1, r3
     2c4:	481b      	ldr	r0, [pc, #108]	; (334 <MlmeConfirm+0xbc>)
     2c6:	4d17      	ldr	r5, [pc, #92]	; (324 <MlmeConfirm+0xac>)
     2c8:	47a8      	blx	r5
                printf( "\n\r\n" );
     2ca:	481b      	ldr	r0, [pc, #108]	; (338 <MlmeConfirm+0xc0>)
     2cc:	47a0      	blx	r4
                mibGet.Type = MIB_CHANNELS_DATARATE;
     2ce:	2328      	movs	r3, #40	; 0x28
     2d0:	aa02      	add	r2, sp, #8
     2d2:	7013      	strb	r3, [r2, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
     2d4:	0010      	movs	r0, r2
     2d6:	47b0      	blx	r6
                printf( "DATA RATE   : DR_%d\r\n", mibGet.Param.ChannelsDatarate );
     2d8:	ab02      	add	r3, sp, #8
     2da:	2104      	movs	r1, #4
     2dc:	5659      	ldrsb	r1, [r3, r1]
     2de:	4817      	ldr	r0, [pc, #92]	; (33c <MlmeConfirm+0xc4>)
     2e0:	47a8      	blx	r5
                printf( "\r\n" );
     2e2:	4817      	ldr	r0, [pc, #92]	; (340 <MlmeConfirm+0xc8>)
     2e4:	47a0      	blx	r4
                DeviceState = DEVICE_STATE_SEND;
     2e6:	2103      	movs	r1, #3
     2e8:	233c      	movs	r3, #60	; 0x3c
     2ea:	4a16      	ldr	r2, [pc, #88]	; (344 <MlmeConfirm+0xcc>)
     2ec:	54d1      	strb	r1, [r2, r3]
     2ee:	e7d7      	b.n	2a0 <MlmeConfirm+0x28>
                JoinNetwork( );
     2f0:	4b15      	ldr	r3, [pc, #84]	; (348 <MlmeConfirm+0xd0>)
     2f2:	4798      	blx	r3
     2f4:	e7d4      	b.n	2a0 <MlmeConfirm+0x28>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
     2f6:	2a00      	cmp	r2, #0
     2f8:	d1d2      	bne.n	2a0 <MlmeConfirm+0x28>
                if( ComplianceTest.Running == true )
     2fa:	4b14      	ldr	r3, [pc, #80]	; (34c <MlmeConfirm+0xd4>)
     2fc:	781b      	ldrb	r3, [r3, #0]
     2fe:	2b00      	cmp	r3, #0
     300:	d0ce      	beq.n	2a0 <MlmeConfirm+0x28>
                    ComplianceTest.LinkCheck = true;
     302:	4b12      	ldr	r3, [pc, #72]	; (34c <MlmeConfirm+0xd4>)
     304:	3201      	adds	r2, #1
     306:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
     308:	7a22      	ldrb	r2, [r4, #8]
     30a:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
     30c:	7a62      	ldrb	r2, [r4, #9]
     30e:	741a      	strb	r2, [r3, #16]
}
     310:	e7c6      	b.n	2a0 <MlmeConfirm+0x28>
     312:	46c0      	nop			; (mov r8, r8)
     314:	000137d4 	.word	0x000137d4
     318:	0000ed01 	.word	0x0000ed01
     31c:	20000000 	.word	0x20000000
     320:	00013770 	.word	0x00013770
     324:	0000ec6d 	.word	0x0000ec6d
     328:	00013800 	.word	0x00013800
     32c:	00013824 	.word	0x00013824
     330:	00005955 	.word	0x00005955
     334:	00013830 	.word	0x00013830
     338:	00013848 	.word	0x00013848
     33c:	0001384c 	.word	0x0001384c
     340:	0001382c 	.word	0x0001382c
     344:	20000b00 	.word	0x20000b00
     348:	00000169 	.word	0x00000169
     34c:	20001b34 	.word	0x20001b34

00000350 <PrintHexBuffer>:
{
     350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for( uint8_t i = 0; i < size; i++ )
     352:	2900      	cmp	r1, #0
     354:	d016      	beq.n	384 <PrintHexBuffer+0x34>
     356:	3901      	subs	r1, #1
     358:	b2ce      	uxtb	r6, r1
     35a:	1986      	adds	r6, r0, r6
     35c:	0004      	movs	r4, r0
        printf( "%02X ", buffer[i] );
     35e:	4d0b      	ldr	r5, [pc, #44]	; (38c <PrintHexBuffer+0x3c>)
        if( ( ( i + 1 ) % 16 ) == 0 )
     360:	2701      	movs	r7, #1
     362:	1a3f      	subs	r7, r7, r0
     364:	e000      	b.n	368 <PrintHexBuffer+0x18>
     366:	3401      	adds	r4, #1
        printf( "%02X ", buffer[i] );
     368:	7821      	ldrb	r1, [r4, #0]
     36a:	4809      	ldr	r0, [pc, #36]	; (390 <PrintHexBuffer+0x40>)
     36c:	47a8      	blx	r5
        if( ( ( i + 1 ) % 16 ) == 0 )
     36e:	193a      	adds	r2, r7, r4
     370:	230f      	movs	r3, #15
     372:	4013      	ands	r3, r2
    for( uint8_t i = 0; i < size; i++ )
     374:	42b4      	cmp	r4, r6
     376:	d005      	beq.n	384 <PrintHexBuffer+0x34>
        if( newline != 0 )
     378:	2b00      	cmp	r3, #0
     37a:	d1f4      	bne.n	366 <PrintHexBuffer+0x16>
            printf( "\r\n" );
     37c:	4805      	ldr	r0, [pc, #20]	; (394 <PrintHexBuffer+0x44>)
     37e:	4b06      	ldr	r3, [pc, #24]	; (398 <PrintHexBuffer+0x48>)
     380:	4798      	blx	r3
     382:	e7f0      	b.n	366 <PrintHexBuffer+0x16>
    printf( "\r\n" );
     384:	4803      	ldr	r0, [pc, #12]	; (394 <PrintHexBuffer+0x44>)
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <PrintHexBuffer+0x48>)
     388:	4798      	blx	r3
}
     38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     38c:	0000ec6d 	.word	0x0000ec6d
     390:	00013864 	.word	0x00013864
     394:	0001382c 	.word	0x0001382c
     398:	0000ed01 	.word	0x0000ed01

0000039c <McpsIndication>:
{
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	b08d      	sub	sp, #52	; 0x34
     3a0:	0004      	movs	r4, r0
    printf( "\r\n###### ===== MCPS-Indication ==== ######\r\n" );
     3a2:	48b3      	ldr	r0, [pc, #716]	; (670 <McpsIndication+0x2d4>)
     3a4:	4bb3      	ldr	r3, [pc, #716]	; (674 <McpsIndication+0x2d8>)
     3a6:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );
     3a8:	7862      	ldrb	r2, [r4, #1]
     3aa:	0092      	lsls	r2, r2, #2
     3ac:	4bb2      	ldr	r3, [pc, #712]	; (678 <McpsIndication+0x2dc>)
     3ae:	189b      	adds	r3, r3, r2
     3b0:	6e19      	ldr	r1, [r3, #96]	; 0x60
     3b2:	48b2      	ldr	r0, [pc, #712]	; (67c <McpsIndication+0x2e0>)
     3b4:	4bb2      	ldr	r3, [pc, #712]	; (680 <McpsIndication+0x2e4>)
     3b6:	4798      	blx	r3
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     3b8:	7863      	ldrb	r3, [r4, #1]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d000      	beq.n	3c0 <McpsIndication+0x24>
     3be:	e083      	b.n	4c8 <McpsIndication+0x12c>
    if( mcpsIndication->FramePending == true )
     3c0:	7963      	ldrb	r3, [r4, #5]
     3c2:	2b01      	cmp	r3, #1
     3c4:	d044      	beq.n	450 <McpsIndication+0xb4>
    if( ComplianceTest.Running == true )
     3c6:	4baf      	ldr	r3, [pc, #700]	; (684 <McpsIndication+0x2e8>)
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	2b00      	cmp	r3, #0
     3cc:	d003      	beq.n	3d6 <McpsIndication+0x3a>
        ComplianceTest.DownLinkCounter++;
     3ce:	49ad      	ldr	r1, [pc, #692]	; (684 <McpsIndication+0x2e8>)
     3d0:	898a      	ldrh	r2, [r1, #12]
     3d2:	3201      	adds	r2, #1
     3d4:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->RxData == true )
     3d6:	7b62      	ldrb	r2, [r4, #13]
     3d8:	2a00      	cmp	r2, #0
     3da:	d03f      	beq.n	45c <McpsIndication+0xc0>
        switch( mcpsIndication->Port )
     3dc:	78e2      	ldrb	r2, [r4, #3]
     3de:	2a00      	cmp	r2, #0
     3e0:	d03c      	beq.n	45c <McpsIndication+0xc0>
     3e2:	b2d1      	uxtb	r1, r2
     3e4:	2902      	cmp	r1, #2
     3e6:	d936      	bls.n	456 <McpsIndication+0xba>
     3e8:	29e0      	cmp	r1, #224	; 0xe0
     3ea:	d137      	bne.n	45c <McpsIndication+0xc0>
            if( ComplianceTest.Running == false )
     3ec:	2b00      	cmp	r3, #0
     3ee:	d000      	beq.n	3f2 <McpsIndication+0x56>
     3f0:	e074      	b.n	4dc <McpsIndication+0x140>
                if( ( mcpsIndication->BufferSize == 4 ) &&
     3f2:	7b23      	ldrb	r3, [r4, #12]
     3f4:	2b04      	cmp	r3, #4
     3f6:	d131      	bne.n	45c <McpsIndication+0xc0>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
     3f8:	68a3      	ldr	r3, [r4, #8]
                if( ( mcpsIndication->BufferSize == 4 ) &&
     3fa:	781a      	ldrb	r2, [r3, #0]
     3fc:	2a01      	cmp	r2, #1
     3fe:	d12d      	bne.n	45c <McpsIndication+0xc0>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
     400:	785a      	ldrb	r2, [r3, #1]
     402:	2a01      	cmp	r2, #1
     404:	d12a      	bne.n	45c <McpsIndication+0xc0>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
     406:	789a      	ldrb	r2, [r3, #2]
     408:	2a01      	cmp	r2, #1
     40a:	d127      	bne.n	45c <McpsIndication+0xc0>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
     40c:	78db      	ldrb	r3, [r3, #3]
     40e:	2b01      	cmp	r3, #1
     410:	d124      	bne.n	45c <McpsIndication+0xc0>
                    IsTxConfirmed = false;
     412:	2500      	movs	r5, #0
     414:	3354      	adds	r3, #84	; 0x54
     416:	4a9c      	ldr	r2, [pc, #624]	; (688 <McpsIndication+0x2ec>)
     418:	54d5      	strb	r5, [r2, r3]
                    AppPort = 224;
     41a:	4b9c      	ldr	r3, [pc, #624]	; (68c <McpsIndication+0x2f0>)
     41c:	21e0      	movs	r1, #224	; 0xe0
     41e:	2224      	movs	r2, #36	; 0x24
     420:	5499      	strb	r1, [r3, r2]
                    AppDataSizeBackup = AppDataSize;
     422:	3202      	adds	r2, #2
     424:	5c98      	ldrb	r0, [r3, r2]
     426:	39bb      	subs	r1, #187	; 0xbb
     428:	5458      	strb	r0, [r3, r1]
                    AppDataSize = 2;
     42a:	3923      	subs	r1, #35	; 0x23
     42c:	5499      	strb	r1, [r3, r2]
                    ComplianceTest.DownLinkCounter = 0;
     42e:	4b95      	ldr	r3, [pc, #596]	; (684 <McpsIndication+0x2e8>)
     430:	819d      	strh	r5, [r3, #12]
                    ComplianceTest.LinkCheck = false;
     432:	739d      	strb	r5, [r3, #14]
                    ComplianceTest.DemodMargin = 0;
     434:	73dd      	strb	r5, [r3, #15]
                    ComplianceTest.NbGateways = 0;
     436:	741d      	strb	r5, [r3, #16]
                    ComplianceTest.Running = true;
     438:	3a25      	subs	r2, #37	; 0x25
     43a:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
     43c:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
     43e:	a801      	add	r0, sp, #4
     440:	7001      	strb	r1, [r0, #0]
                    mibReq.Param.AdrEnable = true;
     442:	7102      	strb	r2, [r0, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     444:	4b92      	ldr	r3, [pc, #584]	; (690 <McpsIndication+0x2f4>)
     446:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( false );
     448:	0028      	movs	r0, r5
     44a:	4b92      	ldr	r3, [pc, #584]	; (694 <McpsIndication+0x2f8>)
     44c:	4798      	blx	r3
     44e:	e005      	b.n	45c <McpsIndication+0xc0>
        OnTxNextPacketTimerEvent( );
     450:	4b91      	ldr	r3, [pc, #580]	; (698 <McpsIndication+0x2fc>)
     452:	4798      	blx	r3
     454:	e7b7      	b.n	3c6 <McpsIndication+0x2a>
            if( mcpsIndication->BufferSize == 1 )
     456:	7b23      	ldrb	r3, [r4, #12]
     458:	2b01      	cmp	r3, #1
     45a:	d037      	beq.n	4cc <McpsIndication+0x130>
    GpioWrite( &Led1, 1 );
     45c:	2101      	movs	r1, #1
     45e:	488f      	ldr	r0, [pc, #572]	; (69c <McpsIndication+0x300>)
     460:	4b8f      	ldr	r3, [pc, #572]	; (6a0 <McpsIndication+0x304>)
     462:	4798      	blx	r3
    TimerStart( &Led2Timer );
     464:	4888      	ldr	r0, [pc, #544]	; (688 <McpsIndication+0x2ec>)
     466:	3004      	adds	r0, #4
     468:	4b8e      	ldr	r3, [pc, #568]	; (6a4 <McpsIndication+0x308>)
     46a:	4798      	blx	r3
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
     46c:	a907      	add	r1, sp, #28
     46e:	4b8e      	ldr	r3, [pc, #568]	; (6a8 <McpsIndication+0x30c>)
     470:	000a      	movs	r2, r1
     472:	cb23      	ldmia	r3!, {r0, r1, r5}
     474:	c223      	stmia	r2!, {r0, r1, r5}
     476:	cb03      	ldmia	r3!, {r0, r1}
     478:	c203      	stmia	r2!, {r0, r1}
    if( mcpsIndication->Snr & 0x80 ) // The SNR sign bit is 1
     47a:	7c23      	ldrb	r3, [r4, #16]
     47c:	b25a      	sxtb	r2, r3
        snr = ( mcpsIndication->Snr & 0xFF ) >> 2;
     47e:	089f      	lsrs	r7, r3, #2
    if( mcpsIndication->Snr & 0x80 ) // The SNR sign bit is 1
     480:	2a00      	cmp	r2, #0
     482:	da00      	bge.n	486 <McpsIndication+0xea>
     484:	e0e7      	b.n	656 <McpsIndication+0x2ba>
    printf( "\r\n###### ===== DOWNLINK FRAME %lu ==== ######\r\n", mcpsIndication->DownLinkCounter );
     486:	6961      	ldr	r1, [r4, #20]
     488:	4888      	ldr	r0, [pc, #544]	; (6ac <McpsIndication+0x310>)
     48a:	4d7d      	ldr	r5, [pc, #500]	; (680 <McpsIndication+0x2e4>)
     48c:	47a8      	blx	r5
    printf( "RX WINDOW   : %s\r\n", slotStrings[mcpsIndication->RxSlot] );
     48e:	7c63      	ldrb	r3, [r4, #17]
     490:	009b      	lsls	r3, r3, #2
     492:	aa07      	add	r2, sp, #28
     494:	5899      	ldr	r1, [r3, r2]
     496:	4886      	ldr	r0, [pc, #536]	; (6b0 <McpsIndication+0x314>)
     498:	47a8      	blx	r5
    printf( "RX PORT     : %d\r\n", mcpsIndication->Port );
     49a:	78e1      	ldrb	r1, [r4, #3]
     49c:	4885      	ldr	r0, [pc, #532]	; (6b4 <McpsIndication+0x318>)
     49e:	47a8      	blx	r5
    if( mcpsIndication->BufferSize != 0 )
     4a0:	7b23      	ldrb	r3, [r4, #12]
     4a2:	2b00      	cmp	r3, #0
     4a4:	d000      	beq.n	4a8 <McpsIndication+0x10c>
     4a6:	e0db      	b.n	660 <McpsIndication+0x2c4>
    printf( "\r\n" );
     4a8:	4883      	ldr	r0, [pc, #524]	; (6b8 <McpsIndication+0x31c>)
     4aa:	4e72      	ldr	r6, [pc, #456]	; (674 <McpsIndication+0x2d8>)
     4ac:	47b0      	blx	r6
    printf( "DATA RATE   : DR_%d\r\n", mcpsIndication->RxDatarate );
     4ae:	7921      	ldrb	r1, [r4, #4]
     4b0:	4882      	ldr	r0, [pc, #520]	; (6bc <McpsIndication+0x320>)
     4b2:	4d73      	ldr	r5, [pc, #460]	; (680 <McpsIndication+0x2e4>)
     4b4:	47a8      	blx	r5
    printf( "RX RSSI     : %d\r\n", mcpsIndication->Rssi );
     4b6:	230e      	movs	r3, #14
     4b8:	5ee1      	ldrsh	r1, [r4, r3]
     4ba:	4881      	ldr	r0, [pc, #516]	; (6c0 <McpsIndication+0x324>)
     4bc:	47a8      	blx	r5
    printf( "RX SNR      : %ld\r\n", snr );
     4be:	0039      	movs	r1, r7
     4c0:	4880      	ldr	r0, [pc, #512]	; (6c4 <McpsIndication+0x328>)
     4c2:	47a8      	blx	r5
    printf( "\r\n" );
     4c4:	487c      	ldr	r0, [pc, #496]	; (6b8 <McpsIndication+0x31c>)
     4c6:	47b0      	blx	r6
}
     4c8:	b00d      	add	sp, #52	; 0x34
     4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                AppLedStateOn = mcpsIndication->Buffer[0] & 0x01;
     4cc:	68a3      	ldr	r3, [r4, #8]
     4ce:	781a      	ldrb	r2, [r3, #0]
     4d0:	2301      	movs	r3, #1
     4d2:	4013      	ands	r3, r2
     4d4:	2254      	movs	r2, #84	; 0x54
     4d6:	496c      	ldr	r1, [pc, #432]	; (688 <McpsIndication+0x2ec>)
     4d8:	548b      	strb	r3, [r1, r2]
     4da:	e7bf      	b.n	45c <McpsIndication+0xc0>
                ComplianceTest.State = mcpsIndication->Buffer[0];
     4dc:	68a2      	ldr	r2, [r4, #8]
     4de:	7813      	ldrb	r3, [r2, #0]
     4e0:	4968      	ldr	r1, [pc, #416]	; (684 <McpsIndication+0x2e8>)
     4e2:	704b      	strb	r3, [r1, #1]
                switch( ComplianceTest.State )
     4e4:	2b07      	cmp	r3, #7
     4e6:	d8b9      	bhi.n	45c <McpsIndication+0xc0>
     4e8:	009b      	lsls	r3, r3, #2
     4ea:	4977      	ldr	r1, [pc, #476]	; (6c8 <McpsIndication+0x32c>)
     4ec:	58cb      	ldr	r3, [r1, r3]
     4ee:	469f      	mov	pc, r3
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
     4f0:	2100      	movs	r1, #0
     4f2:	2355      	movs	r3, #85	; 0x55
     4f4:	4a64      	ldr	r2, [pc, #400]	; (688 <McpsIndication+0x2ec>)
     4f6:	54d1      	strb	r1, [r2, r3]
                    AppPort = LORAWAN_APP_PORT;
     4f8:	4b64      	ldr	r3, [pc, #400]	; (68c <McpsIndication+0x2f0>)
     4fa:	2202      	movs	r2, #2
     4fc:	2024      	movs	r0, #36	; 0x24
     4fe:	541a      	strb	r2, [r3, r0]
                    AppDataSize = AppDataSizeBackup;
     500:	3001      	adds	r0, #1
     502:	5c1d      	ldrb	r5, [r3, r0]
     504:	3001      	adds	r0, #1
     506:	541d      	strb	r5, [r3, r0]
                    ComplianceTest.DownLinkCounter = 0;
     508:	4b5e      	ldr	r3, [pc, #376]	; (684 <McpsIndication+0x2e8>)
     50a:	8199      	strh	r1, [r3, #12]
                    ComplianceTest.Running = false;
     50c:	7019      	strb	r1, [r3, #0]
                    mibReq.Type = MIB_ADR;
     50e:	a801      	add	r0, sp, #4
     510:	7002      	strb	r2, [r0, #0]
                    mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     512:	2301      	movs	r3, #1
     514:	7103      	strb	r3, [r0, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     516:	4b5e      	ldr	r3, [pc, #376]	; (690 <McpsIndication+0x2f4>)
     518:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     51a:	2001      	movs	r0, #1
     51c:	4b5d      	ldr	r3, [pc, #372]	; (694 <McpsIndication+0x2f8>)
     51e:	4798      	blx	r3
                    break;
     520:	e79c      	b.n	45c <McpsIndication+0xc0>
                    AppDataSize = 2;
     522:	2102      	movs	r1, #2
     524:	2326      	movs	r3, #38	; 0x26
     526:	4a59      	ldr	r2, [pc, #356]	; (68c <McpsIndication+0x2f0>)
     528:	54d1      	strb	r1, [r2, r3]
                    break;
     52a:	e797      	b.n	45c <McpsIndication+0xc0>
                    IsTxConfirmed = true;
     52c:	2301      	movs	r3, #1
     52e:	2255      	movs	r2, #85	; 0x55
     530:	4955      	ldr	r1, [pc, #340]	; (688 <McpsIndication+0x2ec>)
     532:	548b      	strb	r3, [r1, r2]
                    ComplianceTest.State = 1;
     534:	4a53      	ldr	r2, [pc, #332]	; (684 <McpsIndication+0x2e8>)
     536:	7053      	strb	r3, [r2, #1]
                    break;
     538:	e790      	b.n	45c <McpsIndication+0xc0>
                    IsTxConfirmed = false;
     53a:	2100      	movs	r1, #0
     53c:	2355      	movs	r3, #85	; 0x55
     53e:	4a52      	ldr	r2, [pc, #328]	; (688 <McpsIndication+0x2ec>)
     540:	54d1      	strb	r1, [r2, r3]
                    ComplianceTest.State = 1;
     542:	2201      	movs	r2, #1
     544:	4b4f      	ldr	r3, [pc, #316]	; (684 <McpsIndication+0x2e8>)
     546:	705a      	strb	r2, [r3, #1]
                    break;
     548:	e788      	b.n	45c <McpsIndication+0xc0>
                    AppDataSize = mcpsIndication->BufferSize;
     54a:	7b23      	ldrb	r3, [r4, #12]
     54c:	2226      	movs	r2, #38	; 0x26
     54e:	494f      	ldr	r1, [pc, #316]	; (68c <McpsIndication+0x2f0>)
     550:	548b      	strb	r3, [r1, r2]
                    AppDataBuffer[0] = 4;
     552:	2004      	movs	r0, #4
     554:	3232      	adds	r2, #50	; 0x32
     556:	494c      	ldr	r1, [pc, #304]	; (688 <McpsIndication+0x2ec>)
     558:	5488      	strb	r0, [r1, r2]
     55a:	1c18      	adds	r0, r3, #0
     55c:	2bf2      	cmp	r3, #242	; 0xf2
     55e:	d901      	bls.n	564 <McpsIndication+0x1c8>
     560:	4b5a      	ldr	r3, [pc, #360]	; (6cc <McpsIndication+0x330>)
     562:	7818      	ldrb	r0, [r3, #0]
     564:	b2c0      	uxtb	r0, r0
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
     566:	2301      	movs	r3, #1
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
     568:	4e47      	ldr	r6, [pc, #284]	; (688 <McpsIndication+0x2ec>)
     56a:	2558      	movs	r5, #88	; 0x58
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
     56c:	e006      	b.n	57c <McpsIndication+0x1e0>
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
     56e:	18f1      	adds	r1, r6, r3
     570:	68a2      	ldr	r2, [r4, #8]
     572:	5cd2      	ldrb	r2, [r2, r3]
     574:	3201      	adds	r2, #1
     576:	554a      	strb	r2, [r1, r5]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
     578:	3301      	adds	r3, #1
     57a:	b2db      	uxtb	r3, r3
     57c:	4298      	cmp	r0, r3
     57e:	dcf6      	bgt.n	56e <McpsIndication+0x1d2>
     580:	e76c      	b.n	45c <McpsIndication+0xc0>
                        mlmeReq.Type = MLME_LINK_CHECK;
     582:	a801      	add	r0, sp, #4
     584:	2303      	movs	r3, #3
     586:	7003      	strb	r3, [r0, #0]
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     588:	4b51      	ldr	r3, [pc, #324]	; (6d0 <McpsIndication+0x334>)
     58a:	4798      	blx	r3
     58c:	0005      	movs	r5, r0
                        printf( "\r\n###### ===== MLME-Request - MLME_LINK_CHECK ==== ######\r\n" );
     58e:	4851      	ldr	r0, [pc, #324]	; (6d4 <McpsIndication+0x338>)
     590:	4b38      	ldr	r3, [pc, #224]	; (674 <McpsIndication+0x2d8>)
     592:	4798      	blx	r3
                        printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     594:	00ad      	lsls	r5, r5, #2
     596:	4b38      	ldr	r3, [pc, #224]	; (678 <McpsIndication+0x2dc>)
     598:	58e9      	ldr	r1, [r5, r3]
     59a:	4838      	ldr	r0, [pc, #224]	; (67c <McpsIndication+0x2e0>)
     59c:	4b38      	ldr	r3, [pc, #224]	; (680 <McpsIndication+0x2e4>)
     59e:	4798      	blx	r3
                    break;
     5a0:	e75c      	b.n	45c <McpsIndication+0xc0>
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
     5a2:	2100      	movs	r1, #0
     5a4:	2355      	movs	r3, #85	; 0x55
     5a6:	4a38      	ldr	r2, [pc, #224]	; (688 <McpsIndication+0x2ec>)
     5a8:	54d1      	strb	r1, [r2, r3]
                        AppPort = LORAWAN_APP_PORT;
     5aa:	4b38      	ldr	r3, [pc, #224]	; (68c <McpsIndication+0x2f0>)
     5ac:	2202      	movs	r2, #2
     5ae:	2024      	movs	r0, #36	; 0x24
     5b0:	541a      	strb	r2, [r3, r0]
                        AppDataSize = AppDataSizeBackup;
     5b2:	3001      	adds	r0, #1
     5b4:	5c1d      	ldrb	r5, [r3, r0]
     5b6:	3001      	adds	r0, #1
     5b8:	541d      	strb	r5, [r3, r0]
                        ComplianceTest.DownLinkCounter = 0;
     5ba:	4b32      	ldr	r3, [pc, #200]	; (684 <McpsIndication+0x2e8>)
     5bc:	8199      	strh	r1, [r3, #12]
                        ComplianceTest.Running = false;
     5be:	7019      	strb	r1, [r3, #0]
                        mibReq.Type = MIB_ADR;
     5c0:	a801      	add	r0, sp, #4
     5c2:	7002      	strb	r2, [r0, #0]
                        mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     5c4:	2301      	movs	r3, #1
     5c6:	7103      	strb	r3, [r0, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
     5c8:	4b31      	ldr	r3, [pc, #196]	; (690 <McpsIndication+0x2f4>)
     5ca:	4798      	blx	r3
                        LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     5cc:	2001      	movs	r0, #1
     5ce:	4b31      	ldr	r3, [pc, #196]	; (694 <McpsIndication+0x2f8>)
     5d0:	4798      	blx	r3
                        JoinNetwork( );
     5d2:	4b41      	ldr	r3, [pc, #260]	; (6d8 <McpsIndication+0x33c>)
     5d4:	4798      	blx	r3
                    break;
     5d6:	e741      	b.n	45c <McpsIndication+0xc0>
                        if( mcpsIndication->BufferSize == 3 )
     5d8:	7b23      	ldrb	r3, [r4, #12]
     5da:	2b03      	cmp	r3, #3
     5dc:	d005      	beq.n	5ea <McpsIndication+0x24e>
                        else if( mcpsIndication->BufferSize == 7 )
     5de:	2b07      	cmp	r3, #7
     5e0:	d018      	beq.n	614 <McpsIndication+0x278>
                        ComplianceTest.State = 1;
     5e2:	2201      	movs	r2, #1
     5e4:	4b27      	ldr	r3, [pc, #156]	; (684 <McpsIndication+0x2e8>)
     5e6:	705a      	strb	r2, [r3, #1]
                    break;
     5e8:	e738      	b.n	45c <McpsIndication+0xc0>
                            mlmeReq.Type = MLME_TXCW;
     5ea:	a801      	add	r0, sp, #4
     5ec:	3301      	adds	r3, #1
     5ee:	7003      	strb	r3, [r0, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
     5f0:	7851      	ldrb	r1, [r2, #1]
     5f2:	0209      	lsls	r1, r1, #8
     5f4:	7893      	ldrb	r3, [r2, #2]
     5f6:	430b      	orrs	r3, r1
     5f8:	8083      	strh	r3, [r0, #4]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     5fa:	4b35      	ldr	r3, [pc, #212]	; (6d0 <McpsIndication+0x334>)
     5fc:	4798      	blx	r3
     5fe:	0005      	movs	r5, r0
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW ==== ######\r\n" );
     600:	4836      	ldr	r0, [pc, #216]	; (6dc <McpsIndication+0x340>)
     602:	4b1c      	ldr	r3, [pc, #112]	; (674 <McpsIndication+0x2d8>)
     604:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     606:	00ad      	lsls	r5, r5, #2
     608:	4b1b      	ldr	r3, [pc, #108]	; (678 <McpsIndication+0x2dc>)
     60a:	58e9      	ldr	r1, [r5, r3]
     60c:	481b      	ldr	r0, [pc, #108]	; (67c <McpsIndication+0x2e0>)
     60e:	4b1c      	ldr	r3, [pc, #112]	; (680 <McpsIndication+0x2e4>)
     610:	4798      	blx	r3
     612:	e7e6      	b.n	5e2 <McpsIndication+0x246>
                            mlmeReq.Type = MLME_TXCW_1;
     614:	a801      	add	r0, sp, #4
     616:	3b02      	subs	r3, #2
     618:	7003      	strb	r3, [r0, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
     61a:	7851      	ldrb	r1, [r2, #1]
     61c:	0209      	lsls	r1, r1, #8
     61e:	7893      	ldrb	r3, [r2, #2]
     620:	430b      	orrs	r3, r1
     622:	8083      	strh	r3, [r0, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
     624:	78d3      	ldrb	r3, [r2, #3]
     626:	041b      	lsls	r3, r3, #16
     628:	7911      	ldrb	r1, [r2, #4]
     62a:	0209      	lsls	r1, r1, #8
     62c:	430b      	orrs	r3, r1
     62e:	7951      	ldrb	r1, [r2, #5]
     630:	430b      	orrs	r3, r1
     632:	2164      	movs	r1, #100	; 0x64
     634:	434b      	muls	r3, r1
     636:	6083      	str	r3, [r0, #8]
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
     638:	7993      	ldrb	r3, [r2, #6]
     63a:	7303      	strb	r3, [r0, #12]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
     63c:	4b24      	ldr	r3, [pc, #144]	; (6d0 <McpsIndication+0x334>)
     63e:	4798      	blx	r3
     640:	0005      	movs	r5, r0
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW1 ==== ######\r\n" );
     642:	4827      	ldr	r0, [pc, #156]	; (6e0 <McpsIndication+0x344>)
     644:	4b0b      	ldr	r3, [pc, #44]	; (674 <McpsIndication+0x2d8>)
     646:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     648:	00ad      	lsls	r5, r5, #2
     64a:	4b0b      	ldr	r3, [pc, #44]	; (678 <McpsIndication+0x2dc>)
     64c:	58e9      	ldr	r1, [r5, r3]
     64e:	480b      	ldr	r0, [pc, #44]	; (67c <McpsIndication+0x2e0>)
     650:	4b0b      	ldr	r3, [pc, #44]	; (680 <McpsIndication+0x2e4>)
     652:	4798      	blx	r3
     654:	e7c5      	b.n	5e2 <McpsIndication+0x246>
        snr = ( ( ~mcpsIndication->Snr + 1 ) & 0xFF ) >> 2;
     656:	425b      	negs	r3, r3
     658:	061b      	lsls	r3, r3, #24
     65a:	0e9b      	lsrs	r3, r3, #26
        snr = -snr;
     65c:	425f      	negs	r7, r3
     65e:	e712      	b.n	486 <McpsIndication+0xea>
        printf( "RX DATA     : \r\n" );
     660:	4820      	ldr	r0, [pc, #128]	; (6e4 <McpsIndication+0x348>)
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <McpsIndication+0x2d8>)
     664:	4798      	blx	r3
        PrintHexBuffer( mcpsIndication->Buffer, mcpsIndication->BufferSize );
     666:	7b21      	ldrb	r1, [r4, #12]
     668:	68a0      	ldr	r0, [r4, #8]
     66a:	4b1f      	ldr	r3, [pc, #124]	; (6e8 <McpsIndication+0x34c>)
     66c:	4798      	blx	r3
     66e:	e71b      	b.n	4a8 <McpsIndication+0x10c>
     670:	0001386c 	.word	0x0001386c
     674:	0000ed01 	.word	0x0000ed01
     678:	20000000 	.word	0x20000000
     67c:	00013770 	.word	0x00013770
     680:	0000ec6d 	.word	0x0000ec6d
     684:	20001b34 	.word	0x20001b34
     688:	20000b00 	.word	0x20000b00
     68c:	20000080 	.word	0x20000080
     690:	00005bc9 	.word	0x00005bc9
     694:	00006849 	.word	0x00006849
     698:	000001dd 	.word	0x000001dd
     69c:	20001b80 	.word	0x20001b80
     6a0:	0000be91 	.word	0x0000be91
     6a4:	0000c04d 	.word	0x0000c04d
     6a8:	0001371c 	.word	0x0001371c
     6ac:	00013944 	.word	0x00013944
     6b0:	00013974 	.word	0x00013974
     6b4:	00013988 	.word	0x00013988
     6b8:	0001382c 	.word	0x0001382c
     6bc:	0001384c 	.word	0x0001384c
     6c0:	000139ac 	.word	0x000139ac
     6c4:	000139c0 	.word	0x000139c0
     6c8:	000136e4 	.word	0x000136e4
     6cc:	000136e0 	.word	0x000136e0
     6d0:	00006389 	.word	0x00006389
     6d4:	00013898 	.word	0x00013898
     6d8:	00000169 	.word	0x00000169
     6dc:	000138d4 	.word	0x000138d4
     6e0:	0001390c 	.word	0x0001390c
     6e4:	0001399c 	.word	0x0001399c
     6e8:	00000351 	.word	0x00000351

000006ec <McpsConfirm>:
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	b08d      	sub	sp, #52	; 0x34
     6f0:	0004      	movs	r4, r0
    printf( "\r\n###### ===== MCPS-Confirm ==== ######\r\n" );
     6f2:	4843      	ldr	r0, [pc, #268]	; (800 <McpsConfirm+0x114>)
     6f4:	4b43      	ldr	r3, [pc, #268]	; (804 <McpsConfirm+0x118>)
     6f6:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] );
     6f8:	7862      	ldrb	r2, [r4, #1]
     6fa:	0092      	lsls	r2, r2, #2
     6fc:	4b42      	ldr	r3, [pc, #264]	; (808 <McpsConfirm+0x11c>)
     6fe:	189b      	adds	r3, r3, r2
     700:	6e19      	ldr	r1, [r3, #96]	; 0x60
     702:	4842      	ldr	r0, [pc, #264]	; (80c <McpsConfirm+0x120>)
     704:	4b42      	ldr	r3, [pc, #264]	; (810 <McpsConfirm+0x124>)
     706:	4798      	blx	r3
    if( mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     708:	7863      	ldrb	r3, [r4, #1]
     70a:	2b00      	cmp	r3, #0
     70c:	d03c      	beq.n	788 <McpsConfirm+0x9c>
    mibReq.Type = MIB_DEVICE_CLASS;
     70e:	2300      	movs	r3, #0
     710:	466a      	mov	r2, sp
     712:	7013      	strb	r3, [r2, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
     714:	4668      	mov	r0, sp
     716:	4b3f      	ldr	r3, [pc, #252]	; (814 <McpsConfirm+0x128>)
     718:	4798      	blx	r3
    printf( "\r\n###### ===== UPLINK FRAME %lu ==== ######\r\n", mcpsConfirm->UpLinkCounter );
     71a:	68e1      	ldr	r1, [r4, #12]
     71c:	483e      	ldr	r0, [pc, #248]	; (818 <McpsConfirm+0x12c>)
     71e:	4e3c      	ldr	r6, [pc, #240]	; (810 <McpsConfirm+0x124>)
     720:	47b0      	blx	r6
    printf( "\r\n" );
     722:	4f3e      	ldr	r7, [pc, #248]	; (81c <McpsConfirm+0x130>)
     724:	0038      	movs	r0, r7
     726:	4d37      	ldr	r5, [pc, #220]	; (804 <McpsConfirm+0x118>)
     728:	47a8      	blx	r5
    printf( "CLASS       : %c\r\n", "ABC"[mibReq.Param.Class] );
     72a:	466b      	mov	r3, sp
     72c:	791b      	ldrb	r3, [r3, #4]
     72e:	4a3c      	ldr	r2, [pc, #240]	; (820 <McpsConfirm+0x134>)
     730:	5cd1      	ldrb	r1, [r2, r3]
     732:	483c      	ldr	r0, [pc, #240]	; (824 <McpsConfirm+0x138>)
     734:	47b0      	blx	r6
    printf( "\r\n" );
     736:	0038      	movs	r0, r7
     738:	47a8      	blx	r5
    printf( "TX PORT     : %d\r\n", AppData.Port );
     73a:	4d3b      	ldr	r5, [pc, #236]	; (828 <McpsConfirm+0x13c>)
     73c:	354c      	adds	r5, #76	; 0x4c
     73e:	7869      	ldrb	r1, [r5, #1]
     740:	483a      	ldr	r0, [pc, #232]	; (82c <McpsConfirm+0x140>)
     742:	47b0      	blx	r6
    if( AppData.BufferSize != 0 )
     744:	78ab      	ldrb	r3, [r5, #2]
     746:	2b00      	cmp	r3, #0
     748:	d127      	bne.n	79a <McpsConfirm+0xae>
    printf( "\r\n" );
     74a:	4834      	ldr	r0, [pc, #208]	; (81c <McpsConfirm+0x130>)
     74c:	4b2d      	ldr	r3, [pc, #180]	; (804 <McpsConfirm+0x118>)
     74e:	4798      	blx	r3
    printf( "DATA RATE   : DR_%d\r\n", mcpsConfirm->Datarate );
     750:	78a1      	ldrb	r1, [r4, #2]
     752:	4837      	ldr	r0, [pc, #220]	; (830 <McpsConfirm+0x144>)
     754:	4b2e      	ldr	r3, [pc, #184]	; (810 <McpsConfirm+0x124>)
     756:	4798      	blx	r3
    mibGet.Type  = MIB_CHANNELS;
     758:	a806      	add	r0, sp, #24
     75a:	231c      	movs	r3, #28
     75c:	7003      	strb	r3, [r0, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
     75e:	4b2d      	ldr	r3, [pc, #180]	; (814 <McpsConfirm+0x128>)
     760:	4798      	blx	r3
     762:	2800      	cmp	r0, #0
     764:	d036      	beq.n	7d4 <McpsConfirm+0xe8>
    printf( "TX POWER    : %d\r\n", mcpsConfirm->TxPower );
     766:	2103      	movs	r1, #3
     768:	5661      	ldrsb	r1, [r4, r1]
     76a:	4832      	ldr	r0, [pc, #200]	; (834 <McpsConfirm+0x148>)
     76c:	4b28      	ldr	r3, [pc, #160]	; (810 <McpsConfirm+0x124>)
     76e:	4798      	blx	r3
    mibGet.Type  = MIB_CHANNELS_MASK;
     770:	a806      	add	r0, sp, #24
     772:	231f      	movs	r3, #31
     774:	7003      	strb	r3, [r0, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
     776:	4b27      	ldr	r3, [pc, #156]	; (814 <McpsConfirm+0x128>)
     778:	4798      	blx	r3
     77a:	2800      	cmp	r0, #0
     77c:	d034      	beq.n	7e8 <McpsConfirm+0xfc>
    printf( "\r\n" );
     77e:	4827      	ldr	r0, [pc, #156]	; (81c <McpsConfirm+0x130>)
     780:	4b20      	ldr	r3, [pc, #128]	; (804 <McpsConfirm+0x118>)
     782:	4798      	blx	r3
}
     784:	b00d      	add	sp, #52	; 0x34
     786:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GpioWrite( &Led1, 0 );
     788:	2100      	movs	r1, #0
     78a:	482b      	ldr	r0, [pc, #172]	; (838 <McpsConfirm+0x14c>)
     78c:	4b2b      	ldr	r3, [pc, #172]	; (83c <McpsConfirm+0x150>)
     78e:	4798      	blx	r3
        TimerStart( &Led1Timer );
     790:	482b      	ldr	r0, [pc, #172]	; (840 <McpsConfirm+0x154>)
     792:	3018      	adds	r0, #24
     794:	4b2b      	ldr	r3, [pc, #172]	; (844 <McpsConfirm+0x158>)
     796:	4798      	blx	r3
     798:	e7b9      	b.n	70e <McpsConfirm+0x22>
        printf( "TX DATA     : " );
     79a:	482b      	ldr	r0, [pc, #172]	; (848 <McpsConfirm+0x15c>)
     79c:	4b1c      	ldr	r3, [pc, #112]	; (810 <McpsConfirm+0x124>)
     79e:	4798      	blx	r3
        if( AppData.MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
     7a0:	234c      	movs	r3, #76	; 0x4c
     7a2:	4a21      	ldr	r2, [pc, #132]	; (828 <McpsConfirm+0x13c>)
     7a4:	5cd3      	ldrb	r3, [r2, r3]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d00a      	beq.n	7c0 <McpsConfirm+0xd4>
            printf( "UNCONFIRMED\r\n" );
     7aa:	4828      	ldr	r0, [pc, #160]	; (84c <McpsConfirm+0x160>)
     7ac:	4b15      	ldr	r3, [pc, #84]	; (804 <McpsConfirm+0x118>)
     7ae:	4798      	blx	r3
        PrintHexBuffer( AppData.Buffer, AppData.BufferSize );
     7b0:	4b1d      	ldr	r3, [pc, #116]	; (828 <McpsConfirm+0x13c>)
     7b2:	001a      	movs	r2, r3
     7b4:	324c      	adds	r2, #76	; 0x4c
     7b6:	7891      	ldrb	r1, [r2, #2]
     7b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
     7ba:	4b25      	ldr	r3, [pc, #148]	; (850 <McpsConfirm+0x164>)
     7bc:	4798      	blx	r3
     7be:	e7c4      	b.n	74a <McpsConfirm+0x5e>
            printf( "CONFIRMED - %s\r\n", ( mcpsConfirm->AckReceived != 0 ) ? "ACK" : "NACK" );
     7c0:	7923      	ldrb	r3, [r4, #4]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d104      	bne.n	7d0 <McpsConfirm+0xe4>
     7c6:	4923      	ldr	r1, [pc, #140]	; (854 <McpsConfirm+0x168>)
     7c8:	4823      	ldr	r0, [pc, #140]	; (858 <McpsConfirm+0x16c>)
     7ca:	4b11      	ldr	r3, [pc, #68]	; (810 <McpsConfirm+0x124>)
     7cc:	4798      	blx	r3
     7ce:	e7ef      	b.n	7b0 <McpsConfirm+0xc4>
     7d0:	4922      	ldr	r1, [pc, #136]	; (85c <McpsConfirm+0x170>)
     7d2:	e7f9      	b.n	7c8 <McpsConfirm+0xdc>
        printf( "U/L FREQ    : %lu\r\n", mibGet.Param.ChannelList[mcpsConfirm->Channel].Frequency );
     7d4:	6922      	ldr	r2, [r4, #16]
     7d6:	0053      	lsls	r3, r2, #1
     7d8:	189b      	adds	r3, r3, r2
     7da:	009b      	lsls	r3, r3, #2
     7dc:	9a07      	ldr	r2, [sp, #28]
     7de:	5899      	ldr	r1, [r3, r2]
     7e0:	481f      	ldr	r0, [pc, #124]	; (860 <McpsConfirm+0x174>)
     7e2:	4b0b      	ldr	r3, [pc, #44]	; (810 <McpsConfirm+0x124>)
     7e4:	4798      	blx	r3
     7e6:	e7be      	b.n	766 <McpsConfirm+0x7a>
        printf("CHANNEL MASK: ");
     7e8:	481e      	ldr	r0, [pc, #120]	; (864 <McpsConfirm+0x178>)
     7ea:	4c09      	ldr	r4, [pc, #36]	; (810 <McpsConfirm+0x124>)
     7ec:	47a0      	blx	r4
            printf("%04X ", mibGet.Param.ChannelsMask[i] );
     7ee:	9b07      	ldr	r3, [sp, #28]
     7f0:	8819      	ldrh	r1, [r3, #0]
     7f2:	481d      	ldr	r0, [pc, #116]	; (868 <McpsConfirm+0x17c>)
     7f4:	47a0      	blx	r4
        printf("\r\n");
     7f6:	4809      	ldr	r0, [pc, #36]	; (81c <McpsConfirm+0x130>)
     7f8:	4b02      	ldr	r3, [pc, #8]	; (804 <McpsConfirm+0x118>)
     7fa:	4798      	blx	r3
     7fc:	e7bf      	b.n	77e <McpsConfirm+0x92>
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	000139e0 	.word	0x000139e0
     804:	0000ed01 	.word	0x0000ed01
     808:	20000000 	.word	0x20000000
     80c:	00013770 	.word	0x00013770
     810:	0000ec6d 	.word	0x0000ec6d
     814:	00005955 	.word	0x00005955
     818:	00013a0c 	.word	0x00013a0c
     81c:	0001382c 	.word	0x0001382c
     820:	00013ad8 	.word	0x00013ad8
     824:	00013a3c 	.word	0x00013a3c
     828:	20000c00 	.word	0x20000c00
     82c:	00013a50 	.word	0x00013a50
     830:	0001384c 	.word	0x0001384c
     834:	00013aac 	.word	0x00013aac
     838:	20001b80 	.word	0x20001b80
     83c:	0000be91 	.word	0x0000be91
     840:	20000b00 	.word	0x20000b00
     844:	0000c04d 	.word	0x0000c04d
     848:	00013a64 	.word	0x00013a64
     84c:	00013a88 	.word	0x00013a88
     850:	00000351 	.word	0x00000351
     854:	000139d8 	.word	0x000139d8
     858:	00013a74 	.word	0x00013a74
     85c:	000139d4 	.word	0x000139d4
     860:	00013a98 	.word	0x00013a98
     864:	00013ac0 	.word	0x00013ac0
     868:	00013ad0 	.word	0x00013ad0

0000086c <main>:

/**
 * Main application entry point.
 */
int main( void )
{
     86c:	b5f0      	push	{r4, r5, r6, r7, lr}
     86e:	46de      	mov	lr, fp
     870:	4657      	mov	r7, sl
     872:	464e      	mov	r6, r9
     874:	4645      	mov	r5, r8
     876:	b5e0      	push	{r5, r6, r7, lr}
     878:	b097      	sub	sp, #92	; 0x5c
    LoRaMacPrimitives_t macPrimitives;
    LoRaMacCallback_t macCallbacks;
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    BoardInitMcu( );
     87a:	4bd1      	ldr	r3, [pc, #836]	; (bc0 <main+0x354>)
     87c:	4798      	blx	r3
    BoardInitPeriph( );
     87e:	4bd1      	ldr	r3, [pc, #836]	; (bc4 <main+0x358>)
     880:	4798      	blx	r3

    macPrimitives.MacMcpsConfirm = McpsConfirm;
     882:	4bd1      	ldr	r3, [pc, #836]	; (bc8 <main+0x35c>)
     884:	9312      	str	r3, [sp, #72]	; 0x48
    macPrimitives.MacMcpsIndication = McpsIndication;
     886:	4bd1      	ldr	r3, [pc, #836]	; (bcc <main+0x360>)
     888:	9313      	str	r3, [sp, #76]	; 0x4c
    macPrimitives.MacMlmeConfirm = MlmeConfirm;
     88a:	4bd1      	ldr	r3, [pc, #836]	; (bd0 <main+0x364>)
     88c:	9314      	str	r3, [sp, #80]	; 0x50
    macPrimitives.MacMlmeIndication = MlmeIndication;
     88e:	4bd1      	ldr	r3, [pc, #836]	; (bd4 <main+0x368>)
     890:	9315      	str	r3, [sp, #84]	; 0x54
    macCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
     892:	4bd1      	ldr	r3, [pc, #836]	; (bd8 <main+0x36c>)
     894:	930e      	str	r3, [sp, #56]	; 0x38
    macCallbacks.GetTemperatureLevel = NULL;
     896:	2400      	movs	r4, #0
     898:	940f      	str	r4, [sp, #60]	; 0x3c
    macCallbacks.NvmContextChange = NvmCtxMgmtEvent;
     89a:	4bd0      	ldr	r3, [pc, #832]	; (bdc <main+0x370>)
     89c:	9310      	str	r3, [sp, #64]	; 0x40
    macCallbacks.MacProcessNotify = OnMacProcessNotify;
     89e:	4bd0      	ldr	r3, [pc, #832]	; (be0 <main+0x374>)
     8a0:	9311      	str	r3, [sp, #68]	; 0x44

    LoRaMacInitialization( &macPrimitives, &macCallbacks, ACTIVE_REGION );
     8a2:	2205      	movs	r2, #5
     8a4:	a90e      	add	r1, sp, #56	; 0x38
     8a6:	a812      	add	r0, sp, #72	; 0x48
     8a8:	4bce      	ldr	r3, [pc, #824]	; (be4 <main+0x378>)
     8aa:	4798      	blx	r3

    DeviceState = DEVICE_STATE_RESTORE;
     8ac:	233c      	movs	r3, #60	; 0x3c
     8ae:	4ace      	ldr	r2, [pc, #824]	; (be8 <main+0x37c>)
     8b0:	54d4      	strb	r4, [r2, r3]

    printf( "###### ===== ClassC demo application v1.0.RC1 ==== ######\r\n\r\n" );
     8b2:	48ce      	ldr	r0, [pc, #824]	; (bec <main+0x380>)
     8b4:	4bce      	ldr	r3, [pc, #824]	; (bf0 <main+0x384>)
     8b6:	4798      	blx	r3

    while( 1 )
    {
        // Tick the RTC to execute callback in context of the main loop (in stead of the IRQ)
        TimerProcess( );
     8b8:	4bce      	ldr	r3, [pc, #824]	; (bf4 <main+0x388>)
     8ba:	469a      	mov	sl, r3
        // Process Radio IRQ
        if( Radio.IrqProcess != NULL )
     8bc:	4ece      	ldr	r6, [pc, #824]	; (bf8 <main+0x38c>)
                    // Schedule next packet transmission
                    TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
                }

                // Schedule next packet transmission
                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
     8be:	4bca      	ldr	r3, [pc, #808]	; (be8 <main+0x37c>)
     8c0:	3340      	adds	r3, #64	; 0x40
     8c2:	9300      	str	r3, [sp, #0]
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
     8c4:	4bcd      	ldr	r3, [pc, #820]	; (bfc <main+0x390>)
     8c6:	4698      	mov	r8, r3
    AppData.Port = mcpsReq.Req.Unconfirmed.fPort;
     8c8:	234c      	movs	r3, #76	; 0x4c
     8ca:	4443      	add	r3, r8
     8cc:	9301      	str	r3, [sp, #4]
     8ce:	e00a      	b.n	8e6 <main+0x7a>
                if( NvmCtxMgmtRestore( ) == NVMCTXMGMT_STATUS_SUCCESS )
     8d0:	4bcb      	ldr	r3, [pc, #812]	; (c00 <main+0x394>)
     8d2:	4798      	blx	r3
     8d4:	2800      	cmp	r0, #0
     8d6:	d117      	bne.n	908 <main+0x9c>
                    printf( "\r\n###### ===== CTXS RESTORED ==== ######\r\n\r\n" );
     8d8:	48ca      	ldr	r0, [pc, #808]	; (c04 <main+0x398>)
     8da:	4bc5      	ldr	r3, [pc, #788]	; (bf0 <main+0x384>)
     8dc:	4798      	blx	r3
                DeviceState = DEVICE_STATE_START;
     8de:	2101      	movs	r1, #1
     8e0:	233c      	movs	r3, #60	; 0x3c
     8e2:	4ac1      	ldr	r2, [pc, #772]	; (be8 <main+0x37c>)
     8e4:	54d1      	strb	r1, [r2, r3]
        TimerProcess( );
     8e6:	47d0      	blx	sl
        if( Radio.IrqProcess != NULL )
     8e8:	6e33      	ldr	r3, [r6, #96]	; 0x60
     8ea:	2b00      	cmp	r3, #0
     8ec:	d000      	beq.n	8f0 <main+0x84>
            Radio.IrqProcess( );
     8ee:	4798      	blx	r3
        LoRaMacProcess( );
     8f0:	4bc5      	ldr	r3, [pc, #788]	; (c08 <main+0x39c>)
     8f2:	4798      	blx	r3
        switch( DeviceState )
     8f4:	4abc      	ldr	r2, [pc, #752]	; (be8 <main+0x37c>)
     8f6:	233c      	movs	r3, #60	; 0x3c
     8f8:	5cd1      	ldrb	r1, [r2, r3]
     8fa:	2905      	cmp	r1, #5
     8fc:	d900      	bls.n	900 <main+0x94>
     8fe:	e293      	b.n	e28 <main+0x5bc>
     900:	008b      	lsls	r3, r1, #2
     902:	4ac2      	ldr	r2, [pc, #776]	; (c0c <main+0x3a0>)
     904:	58d3      	ldr	r3, [r2, r3]
     906:	469f      	mov	pc, r3
                    mibReq.Type = MIB_APP_KEY;
     908:	ac08      	add	r4, sp, #32
     90a:	2305      	movs	r3, #5
     90c:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.AppKey = AppKey;
     90e:	4dc0      	ldr	r5, [pc, #768]	; (c10 <main+0x3a4>)
     910:	002b      	movs	r3, r5
     912:	3328      	adds	r3, #40	; 0x28
     914:	9309      	str	r3, [sp, #36]	; 0x24
                    LoRaMacMibSetRequestConfirm( &mibReq );
     916:	0020      	movs	r0, r4
     918:	4fbe      	ldr	r7, [pc, #760]	; (c14 <main+0x3a8>)
     91a:	47b8      	blx	r7
                    mibReq.Type = MIB_NWK_KEY;
     91c:	2306      	movs	r3, #6
     91e:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.NwkKey = NwkKey;
     920:	3538      	adds	r5, #56	; 0x38
     922:	6065      	str	r5, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     924:	0020      	movs	r0, r4
     926:	47b8      	blx	r7
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
     928:	232c      	movs	r3, #44	; 0x2c
     92a:	4aaf      	ldr	r2, [pc, #700]	; (be8 <main+0x37c>)
     92c:	5cd3      	ldrb	r3, [r2, r3]
     92e:	2b00      	cmp	r3, #0
     930:	d126      	bne.n	980 <main+0x114>
     932:	0013      	movs	r3, r2
     934:	332c      	adds	r3, #44	; 0x2c
     936:	785b      	ldrb	r3, [r3, #1]
     938:	2b00      	cmp	r3, #0
     93a:	d121      	bne.n	980 <main+0x114>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     93c:	0013      	movs	r3, r2
     93e:	332c      	adds	r3, #44	; 0x2c
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
     940:	789b      	ldrb	r3, [r3, #2]
     942:	2b00      	cmp	r3, #0
     944:	d11c      	bne.n	980 <main+0x114>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     946:	0013      	movs	r3, r2
     948:	332c      	adds	r3, #44	; 0x2c
     94a:	78db      	ldrb	r3, [r3, #3]
     94c:	2b00      	cmp	r3, #0
     94e:	d117      	bne.n	980 <main+0x114>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     950:	0013      	movs	r3, r2
     952:	332c      	adds	r3, #44	; 0x2c
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
     954:	791b      	ldrb	r3, [r3, #4]
     956:	2b00      	cmp	r3, #0
     958:	d112      	bne.n	980 <main+0x114>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     95a:	0013      	movs	r3, r2
     95c:	332c      	adds	r3, #44	; 0x2c
     95e:	795b      	ldrb	r3, [r3, #5]
     960:	2b00      	cmp	r3, #0
     962:	d10d      	bne.n	980 <main+0x114>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
     964:	0013      	movs	r3, r2
     966:	332c      	adds	r3, #44	; 0x2c
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
     968:	799b      	ldrb	r3, [r3, #6]
     96a:	2b00      	cmp	r3, #0
     96c:	d108      	bne.n	980 <main+0x114>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
     96e:	0013      	movs	r3, r2
     970:	332c      	adds	r3, #44	; 0x2c
     972:	79db      	ldrb	r3, [r3, #7]
     974:	2b00      	cmp	r3, #0
     976:	d103      	bne.n	980 <main+0x114>
                        BoardGetUniqueId( DevEui );
     978:	0010      	movs	r0, r2
     97a:	302c      	adds	r0, #44	; 0x2c
     97c:	4ba6      	ldr	r3, [pc, #664]	; (c18 <main+0x3ac>)
     97e:	4798      	blx	r3
                    if( DevAddr == 0 )
     980:	4b9e      	ldr	r3, [pc, #632]	; (bfc <main+0x390>)
     982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     984:	2b00      	cmp	r3, #0
     986:	d02c      	beq.n	9e2 <main+0x176>
                    mibReq.Type = MIB_NET_ID;
     988:	ac08      	add	r4, sp, #32
     98a:	2303      	movs	r3, #3
     98c:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
     98e:	2300      	movs	r3, #0
     990:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     992:	0020      	movs	r0, r4
     994:	4d9f      	ldr	r5, [pc, #636]	; (c14 <main+0x3a8>)
     996:	47a8      	blx	r5
                    mibReq.Type = MIB_DEV_ADDR;
     998:	2304      	movs	r3, #4
     99a:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.DevAddr = DevAddr;
     99c:	4b97      	ldr	r3, [pc, #604]	; (bfc <main+0x390>)
     99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     9a0:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     9a2:	0020      	movs	r0, r4
     9a4:	47a8      	blx	r5
                    mibReq.Type = MIB_F_NWK_S_INT_KEY;
     9a6:	2309      	movs	r3, #9
     9a8:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
     9aa:	4f99      	ldr	r7, [pc, #612]	; (c10 <main+0x3a4>)
     9ac:	003b      	movs	r3, r7
     9ae:	3348      	adds	r3, #72	; 0x48
     9b0:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     9b2:	0020      	movs	r0, r4
     9b4:	47a8      	blx	r5
                    mibReq.Type = MIB_S_NWK_S_INT_KEY;
     9b6:	230a      	movs	r3, #10
     9b8:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
     9ba:	003b      	movs	r3, r7
     9bc:	3358      	adds	r3, #88	; 0x58
     9be:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     9c0:	0020      	movs	r0, r4
     9c2:	47a8      	blx	r5
                    mibReq.Type = MIB_NWK_S_ENC_KEY;
     9c4:	230b      	movs	r3, #11
     9c6:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.NwkSEncKey = NwkSEncKey;
     9c8:	003b      	movs	r3, r7
     9ca:	3368      	adds	r3, #104	; 0x68
     9cc:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     9ce:	0020      	movs	r0, r4
     9d0:	47a8      	blx	r5
                    mibReq.Type = MIB_APP_S_KEY;
     9d2:	230c      	movs	r3, #12
     9d4:	7023      	strb	r3, [r4, #0]
                    mibReq.Param.AppSKey = AppSKey;
     9d6:	003b      	movs	r3, r7
     9d8:	3378      	adds	r3, #120	; 0x78
     9da:	6063      	str	r3, [r4, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
     9dc:	0020      	movs	r0, r4
     9de:	47a8      	blx	r5
     9e0:	e77d      	b.n	8de <main+0x72>
                        srand1( BoardGetRandomSeed( ) );
     9e2:	4b8e      	ldr	r3, [pc, #568]	; (c1c <main+0x3b0>)
     9e4:	4798      	blx	r3
     9e6:	4b8e      	ldr	r3, [pc, #568]	; (c20 <main+0x3b4>)
     9e8:	4798      	blx	r3
                        DevAddr = randr( 0, 0x01FFFFFF );
     9ea:	498e      	ldr	r1, [pc, #568]	; (c24 <main+0x3b8>)
     9ec:	2000      	movs	r0, #0
     9ee:	4b8e      	ldr	r3, [pc, #568]	; (c28 <main+0x3bc>)
     9f0:	4798      	blx	r3
     9f2:	4b82      	ldr	r3, [pc, #520]	; (bfc <main+0x390>)
     9f4:	6558      	str	r0, [r3, #84]	; 0x54
     9f6:	e7c7      	b.n	988 <main+0x11c>
                TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
     9f8:	4c7b      	ldr	r4, [pc, #492]	; (be8 <main+0x37c>)
     9fa:	0020      	movs	r0, r4
     9fc:	3040      	adds	r0, #64	; 0x40
     9fe:	498b      	ldr	r1, [pc, #556]	; (c2c <main+0x3c0>)
     a00:	4f8b      	ldr	r7, [pc, #556]	; (c30 <main+0x3c4>)
     a02:	47b8      	blx	r7
                TimerInit( &Led1Timer, OnLed1TimerEvent );
     a04:	0025      	movs	r5, r4
     a06:	3518      	adds	r5, #24
     a08:	498a      	ldr	r1, [pc, #552]	; (c34 <main+0x3c8>)
     a0a:	0028      	movs	r0, r5
     a0c:	47b8      	blx	r7
                TimerSetValue( &Led1Timer, 25 );
     a0e:	2119      	movs	r1, #25
     a10:	0028      	movs	r0, r5
     a12:	4d89      	ldr	r5, [pc, #548]	; (c38 <main+0x3cc>)
     a14:	47a8      	blx	r5
                TimerInit( &Led2Timer, OnLed2TimerEvent );
     a16:	3404      	adds	r4, #4
     a18:	4988      	ldr	r1, [pc, #544]	; (c3c <main+0x3d0>)
     a1a:	0020      	movs	r0, r4
     a1c:	47b8      	blx	r7
                TimerSetValue( &Led2Timer, 25 );
     a1e:	2119      	movs	r1, #25
     a20:	0020      	movs	r0, r4
     a22:	47a8      	blx	r5
                mibReq.Type = MIB_PUBLIC_NETWORK;
     a24:	ac08      	add	r4, sp, #32
     a26:	231a      	movs	r3, #26
     a28:	7023      	strb	r3, [r4, #0]
                mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
     a2a:	2701      	movs	r7, #1
     a2c:	7127      	strb	r7, [r4, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     a2e:	0020      	movs	r0, r4
     a30:	4b78      	ldr	r3, [pc, #480]	; (c14 <main+0x3a8>)
     a32:	4699      	mov	r9, r3
     a34:	4798      	blx	r3
                mibReq.Type = MIB_ADR;
     a36:	2302      	movs	r3, #2
     a38:	469b      	mov	fp, r3
     a3a:	7023      	strb	r3, [r4, #0]
                mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
     a3c:	7127      	strb	r7, [r4, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     a3e:	0020      	movs	r0, r4
     a40:	47c8      	blx	r9
                LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
     a42:	2001      	movs	r0, #1
     a44:	4b7e      	ldr	r3, [pc, #504]	; (c40 <main+0x3d4>)
     a46:	4798      	blx	r3
                mibReq.Type = MIB_RX2_DEFAULT_CHANNEL;
     a48:	231e      	movs	r3, #30
     a4a:	7023      	strb	r3, [r4, #0]
                mibReq.Param.Rx2DefaultChannel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
     a4c:	4d7d      	ldr	r5, [pc, #500]	; (c44 <main+0x3d8>)
     a4e:	ab09      	add	r3, sp, #36	; 0x24
     a50:	002a      	movs	r2, r5
     a52:	3214      	adds	r2, #20
     a54:	ca03      	ldmia	r2!, {r0, r1}
     a56:	c303      	stmia	r3!, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
     a58:	0020      	movs	r0, r4
     a5a:	47c8      	blx	r9
                mibReq.Type = MIB_RX2_CHANNEL;
     a5c:	231d      	movs	r3, #29
     a5e:	7023      	strb	r3, [r4, #0]
                mibReq.Param.Rx2Channel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
     a60:	ab09      	add	r3, sp, #36	; 0x24
     a62:	3514      	adds	r5, #20
     a64:	cd06      	ldmia	r5!, {r1, r2}
     a66:	c306      	stmia	r3!, {r1, r2}
                LoRaMacMibSetRequestConfirm( &mibReq );
     a68:	0020      	movs	r0, r4
     a6a:	47c8      	blx	r9
                mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
     a6c:	232b      	movs	r3, #43	; 0x2b
     a6e:	7023      	strb	r3, [r4, #0]
                mibReq.Param.SystemMaxRxError = 20;
     a70:	3b17      	subs	r3, #23
     a72:	6063      	str	r3, [r4, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     a74:	0020      	movs	r0, r4
     a76:	47c8      	blx	r9
                mibReq.Type = MIB_DEVICE_CLASS;
     a78:	2300      	movs	r3, #0
     a7a:	7023      	strb	r3, [r4, #0]
                mibReq.Param.Class = CLASS_C;
     a7c:	465b      	mov	r3, fp
     a7e:	7123      	strb	r3, [r4, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     a80:	0020      	movs	r0, r4
     a82:	47c8      	blx	r9
                LoRaMacStart( );
     a84:	4b70      	ldr	r3, [pc, #448]	; (c48 <main+0x3dc>)
     a86:	4798      	blx	r3
                mibReq.Type = MIB_NETWORK_ACTIVATION;
     a88:	7027      	strb	r7, [r4, #0]
                status = LoRaMacMibGetRequestConfirm( &mibReq );
     a8a:	0020      	movs	r0, r4
     a8c:	4b6f      	ldr	r3, [pc, #444]	; (c4c <main+0x3e0>)
     a8e:	4798      	blx	r3
                if( status == LORAMAC_STATUS_OK )
     a90:	2800      	cmp	r0, #0
     a92:	d000      	beq.n	a96 <main+0x22a>
     a94:	e727      	b.n	8e6 <main+0x7a>
                    if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
     a96:	ab08      	add	r3, sp, #32
     a98:	791b      	ldrb	r3, [r3, #4]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d104      	bne.n	aa8 <main+0x23c>
                        DeviceState = DEVICE_STATE_JOIN;
     a9e:	2102      	movs	r1, #2
     aa0:	333c      	adds	r3, #60	; 0x3c
     aa2:	4a51      	ldr	r2, [pc, #324]	; (be8 <main+0x37c>)
     aa4:	54d1      	strb	r1, [r2, r3]
     aa6:	e71e      	b.n	8e6 <main+0x7a>
                        DeviceState = DEVICE_STATE_SEND;
     aa8:	2103      	movs	r1, #3
     aaa:	233c      	movs	r3, #60	; 0x3c
     aac:	4a4e      	ldr	r2, [pc, #312]	; (be8 <main+0x37c>)
     aae:	54d1      	strb	r1, [r2, r3]
                        NextTx = true;
     ab0:	3902      	subs	r1, #2
     ab2:	3320      	adds	r3, #32
     ab4:	4a66      	ldr	r2, [pc, #408]	; (c50 <main+0x3e4>)
     ab6:	54d1      	strb	r1, [r2, r3]
     ab8:	e715      	b.n	8e6 <main+0x7a>
                printf( "DevEui      : %02X", DevEui[0] );
     aba:	232c      	movs	r3, #44	; 0x2c
     abc:	4a4a      	ldr	r2, [pc, #296]	; (be8 <main+0x37c>)
     abe:	5cd1      	ldrb	r1, [r2, r3]
     ac0:	4864      	ldr	r0, [pc, #400]	; (c54 <main+0x3e8>)
     ac2:	4b65      	ldr	r3, [pc, #404]	; (c58 <main+0x3ec>)
     ac4:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
     ac6:	2501      	movs	r5, #1
                    printf( "-%02X", DevEui[i] );
     ac8:	4c47      	ldr	r4, [pc, #284]	; (be8 <main+0x37c>)
     aca:	342c      	adds	r4, #44	; 0x2c
     acc:	4f62      	ldr	r7, [pc, #392]	; (c58 <main+0x3ec>)
     ace:	5d29      	ldrb	r1, [r5, r4]
     ad0:	4862      	ldr	r0, [pc, #392]	; (c5c <main+0x3f0>)
     ad2:	47b8      	blx	r7
                for( int i = 1; i < 8; i++ )
     ad4:	3501      	adds	r5, #1
     ad6:	2d08      	cmp	r5, #8
     ad8:	d1f9      	bne.n	ace <main+0x262>
                printf( "\r\n" );
     ada:	4861      	ldr	r0, [pc, #388]	; (c60 <main+0x3f4>)
     adc:	4b44      	ldr	r3, [pc, #272]	; (bf0 <main+0x384>)
     ade:	4798      	blx	r3
                printf( "AppEui      : %02X", JoinEui[0] );
     ae0:	2334      	movs	r3, #52	; 0x34
     ae2:	4a41      	ldr	r2, [pc, #260]	; (be8 <main+0x37c>)
     ae4:	5cd1      	ldrb	r1, [r2, r3]
     ae6:	485f      	ldr	r0, [pc, #380]	; (c64 <main+0x3f8>)
     ae8:	4b5b      	ldr	r3, [pc, #364]	; (c58 <main+0x3ec>)
     aea:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
     aec:	3d07      	subs	r5, #7
                    printf( "-%02X", JoinEui[i] );
     aee:	4c3e      	ldr	r4, [pc, #248]	; (be8 <main+0x37c>)
     af0:	3434      	adds	r4, #52	; 0x34
     af2:	4f59      	ldr	r7, [pc, #356]	; (c58 <main+0x3ec>)
     af4:	5d29      	ldrb	r1, [r5, r4]
     af6:	4859      	ldr	r0, [pc, #356]	; (c5c <main+0x3f0>)
     af8:	47b8      	blx	r7
                for( int i = 1; i < 8; i++ )
     afa:	3501      	adds	r5, #1
     afc:	2d08      	cmp	r5, #8
     afe:	d1f9      	bne.n	af4 <main+0x288>
                printf( "\r\n" );
     b00:	4857      	ldr	r0, [pc, #348]	; (c60 <main+0x3f4>)
     b02:	4b3b      	ldr	r3, [pc, #236]	; (bf0 <main+0x384>)
     b04:	4798      	blx	r3
                printf( "AppKey      : %02X", NwkKey[0] );
     b06:	2338      	movs	r3, #56	; 0x38
     b08:	4a41      	ldr	r2, [pc, #260]	; (c10 <main+0x3a4>)
     b0a:	5cd1      	ldrb	r1, [r2, r3]
     b0c:	4856      	ldr	r0, [pc, #344]	; (c68 <main+0x3fc>)
     b0e:	4b52      	ldr	r3, [pc, #328]	; (c58 <main+0x3ec>)
     b10:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
     b12:	3d07      	subs	r5, #7
                    printf( " %02X", NwkKey[i] );
     b14:	4c3e      	ldr	r4, [pc, #248]	; (c10 <main+0x3a4>)
     b16:	3438      	adds	r4, #56	; 0x38
     b18:	4f4f      	ldr	r7, [pc, #316]	; (c58 <main+0x3ec>)
     b1a:	5d29      	ldrb	r1, [r5, r4]
     b1c:	4853      	ldr	r0, [pc, #332]	; (c6c <main+0x400>)
     b1e:	47b8      	blx	r7
                for( int i = 1; i < 16; i++ )
     b20:	3501      	adds	r5, #1
     b22:	2d10      	cmp	r5, #16
     b24:	d1f9      	bne.n	b1a <main+0x2ae>
                printf( "\n\r\n" );
     b26:	4852      	ldr	r0, [pc, #328]	; (c70 <main+0x404>)
     b28:	4c31      	ldr	r4, [pc, #196]	; (bf0 <main+0x384>)
     b2a:	47a0      	blx	r4
                printf( "###### ===== JOINED ==== ######\r\n" );
     b2c:	4851      	ldr	r0, [pc, #324]	; (c74 <main+0x408>)
     b2e:	47a0      	blx	r4
                printf( "\r\nABP\r\n\r\n" );
     b30:	4851      	ldr	r0, [pc, #324]	; (c78 <main+0x40c>)
     b32:	47a0      	blx	r4
                printf( "DevAddr     : %08lX\r\n", DevAddr );
     b34:	4b31      	ldr	r3, [pc, #196]	; (bfc <main+0x390>)
     b36:	6d59      	ldr	r1, [r3, #84]	; 0x54
     b38:	4850      	ldr	r0, [pc, #320]	; (c7c <main+0x410>)
     b3a:	4c47      	ldr	r4, [pc, #284]	; (c58 <main+0x3ec>)
     b3c:	47a0      	blx	r4
                printf( "NwkSKey     : %02X", FNwkSIntKey[0] );
     b3e:	2348      	movs	r3, #72	; 0x48
     b40:	4a33      	ldr	r2, [pc, #204]	; (c10 <main+0x3a4>)
     b42:	5cd1      	ldrb	r1, [r2, r3]
     b44:	484e      	ldr	r0, [pc, #312]	; (c80 <main+0x414>)
     b46:	47a0      	blx	r4
                for( int i = 1; i < 16; i++ )
     b48:	3d0f      	subs	r5, #15
                    printf( " %02X", FNwkSIntKey[i] );
     b4a:	4c31      	ldr	r4, [pc, #196]	; (c10 <main+0x3a4>)
     b4c:	3448      	adds	r4, #72	; 0x48
     b4e:	4f42      	ldr	r7, [pc, #264]	; (c58 <main+0x3ec>)
     b50:	5d29      	ldrb	r1, [r5, r4]
     b52:	4846      	ldr	r0, [pc, #280]	; (c6c <main+0x400>)
     b54:	47b8      	blx	r7
                for( int i = 1; i < 16; i++ )
     b56:	3501      	adds	r5, #1
     b58:	2d10      	cmp	r5, #16
     b5a:	d1f9      	bne.n	b50 <main+0x2e4>
                printf( "\r\n" );
     b5c:	4840      	ldr	r0, [pc, #256]	; (c60 <main+0x3f4>)
     b5e:	4b24      	ldr	r3, [pc, #144]	; (bf0 <main+0x384>)
     b60:	4798      	blx	r3
                printf( "AppSKey     : %02X", AppSKey[0] );
     b62:	2378      	movs	r3, #120	; 0x78
     b64:	4a2a      	ldr	r2, [pc, #168]	; (c10 <main+0x3a4>)
     b66:	5cd1      	ldrb	r1, [r2, r3]
     b68:	4846      	ldr	r0, [pc, #280]	; (c84 <main+0x418>)
     b6a:	4b3b      	ldr	r3, [pc, #236]	; (c58 <main+0x3ec>)
     b6c:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
     b6e:	3d0f      	subs	r5, #15
                    printf( " %02X", AppSKey[i] );
     b70:	4f27      	ldr	r7, [pc, #156]	; (c10 <main+0x3a4>)
     b72:	3778      	adds	r7, #120	; 0x78
     b74:	4c38      	ldr	r4, [pc, #224]	; (c58 <main+0x3ec>)
     b76:	5de9      	ldrb	r1, [r5, r7]
     b78:	483c      	ldr	r0, [pc, #240]	; (c6c <main+0x400>)
     b7a:	47a0      	blx	r4
                for( int i = 1; i < 16; i++ )
     b7c:	3501      	adds	r5, #1
     b7e:	2d10      	cmp	r5, #16
     b80:	d1f9      	bne.n	b76 <main+0x30a>
                printf( "\n\r\n" );
     b82:	483b      	ldr	r0, [pc, #236]	; (c70 <main+0x404>)
     b84:	4b1a      	ldr	r3, [pc, #104]	; (bf0 <main+0x384>)
     b86:	4798      	blx	r3
                mibReq.Type = MIB_ABP_LORAWAN_VERSION;
     b88:	ac08      	add	r4, sp, #32
     b8a:	2330      	movs	r3, #48	; 0x30
     b8c:	7023      	strb	r3, [r4, #0]
                mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
     b8e:	4b3e      	ldr	r3, [pc, #248]	; (c88 <main+0x41c>)
     b90:	9309      	str	r3, [sp, #36]	; 0x24
                LoRaMacMibSetRequestConfirm( &mibReq );
     b92:	0020      	movs	r0, r4
     b94:	4d1f      	ldr	r5, [pc, #124]	; (c14 <main+0x3a8>)
     b96:	47a8      	blx	r5
                mibReq.Type = MIB_NETWORK_ACTIVATION;
     b98:	2301      	movs	r3, #1
     b9a:	7023      	strb	r3, [r4, #0]
                mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
     b9c:	7123      	strb	r3, [r4, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
     b9e:	0020      	movs	r0, r4
     ba0:	47a8      	blx	r5
                DeviceState = DEVICE_STATE_SEND;
     ba2:	2103      	movs	r1, #3
     ba4:	233c      	movs	r3, #60	; 0x3c
     ba6:	4a10      	ldr	r2, [pc, #64]	; (be8 <main+0x37c>)
     ba8:	54d1      	strb	r1, [r2, r3]
                break;
     baa:	e69c      	b.n	8e6 <main+0x7a>
                if( NextTx == true )
     bac:	235c      	movs	r3, #92	; 0x5c
     bae:	4a28      	ldr	r2, [pc, #160]	; (c50 <main+0x3e4>)
     bb0:	5cd3      	ldrb	r3, [r2, r3]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d16a      	bne.n	c8c <main+0x420>
                DeviceState = DEVICE_STATE_CYCLE;
     bb6:	2104      	movs	r1, #4
     bb8:	233c      	movs	r3, #60	; 0x3c
     bba:	4a0b      	ldr	r2, [pc, #44]	; (be8 <main+0x37c>)
     bbc:	54d1      	strb	r1, [r2, r3]
                break;
     bbe:	e692      	b.n	8e6 <main+0x7a>
     bc0:	00000ec5 	.word	0x00000ec5
     bc4:	00000ea5 	.word	0x00000ea5
     bc8:	000006ed 	.word	0x000006ed
     bcc:	0000039d 	.word	0x0000039d
     bd0:	00000279 	.word	0x00000279
     bd4:	00000231 	.word	0x00000231
     bd8:	00000f63 	.word	0x00000f63
     bdc:	00000e89 	.word	0x00000e89
     be0:	00000115 	.word	0x00000115
     be4:	0000536d 	.word	0x0000536d
     be8:	20000b00 	.word	0x20000b00
     bec:	00013adc 	.word	0x00013adc
     bf0:	0000ed01 	.word	0x0000ed01
     bf4:	0000c2a5 	.word	0x0000c2a5
     bf8:	0001407c 	.word	0x0001407c
     bfc:	20000c00 	.word	0x20000c00
     c00:	00000e8f 	.word	0x00000e8f
     c04:	00013b1c 	.word	0x00013b1c
     c08:	00004525 	.word	0x00004525
     c0c:	00013704 	.word	0x00013704
     c10:	20000080 	.word	0x20000080
     c14:	00005bc9 	.word	0x00005bc9
     c18:	00000f61 	.word	0x00000f61
     c1c:	00000f5d 	.word	0x00000f5d
     c20:	00001e65 	.word	0x00001e65
     c24:	01ffffff 	.word	0x01ffffff
     c28:	00001e71 	.word	0x00001e71
     c2c:	000001dd 	.word	0x000001dd
     c30:	0000c03d 	.word	0x0000c03d
     c34:	00000145 	.word	0x00000145
     c38:	0000c23d 	.word	0x0000c23d
     c3c:	00000121 	.word	0x00000121
     c40:	00006849 	.word	0x00006849
     c44:	0001371c 	.word	0x0001371c
     c48:	00005879 	.word	0x00005879
     c4c:	00005955 	.word	0x00005955
     c50:	20000000 	.word	0x20000000
     c54:	00013b48 	.word	0x00013b48
     c58:	0000ec6d 	.word	0x0000ec6d
     c5c:	00013b5c 	.word	0x00013b5c
     c60:	0001382c 	.word	0x0001382c
     c64:	00013b64 	.word	0x00013b64
     c68:	00013b78 	.word	0x00013b78
     c6c:	00013b8c 	.word	0x00013b8c
     c70:	00013848 	.word	0x00013848
     c74:	00013800 	.word	0x00013800
     c78:	00013b94 	.word	0x00013b94
     c7c:	00013830 	.word	0x00013830
     c80:	00013ba0 	.word	0x00013ba0
     c84:	00013bb4 	.word	0x00013bb4
     c88:	01010000 	.word	0x01010000
                    PrepareTxFrame( AppPort );
     c8c:	2324      	movs	r3, #36	; 0x24
    switch( port )
     c8e:	4a69      	ldr	r2, [pc, #420]	; (e34 <main+0x5c8>)
     c90:	5cd3      	ldrb	r3, [r2, r3]
     c92:	2b02      	cmp	r3, #2
     c94:	d031      	beq.n	cfa <main+0x48e>
     c96:	b2db      	uxtb	r3, r3
     c98:	2be0      	cmp	r3, #224	; 0xe0
     c9a:	d03a      	beq.n	d12 <main+0x4a6>
    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
     c9c:	2326      	movs	r3, #38	; 0x26
     c9e:	4a65      	ldr	r2, [pc, #404]	; (e34 <main+0x5c8>)
     ca0:	5cd0      	ldrb	r0, [r2, r3]
     ca2:	a903      	add	r1, sp, #12
     ca4:	4b64      	ldr	r3, [pc, #400]	; (e38 <main+0x5cc>)
     ca6:	4798      	blx	r3
     ca8:	2800      	cmp	r0, #0
     caa:	d060      	beq.n	d6e <main+0x502>
        mcpsReq.Type = MCPS_UNCONFIRMED;
     cac:	ab04      	add	r3, sp, #16
     cae:	2200      	movs	r2, #0
     cb0:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
     cb2:	9206      	str	r2, [sp, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
     cb4:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     cb6:	739a      	strb	r2, [r3, #14]
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
     cb8:	a804      	add	r0, sp, #16
     cba:	7803      	ldrb	r3, [r0, #0]
     cbc:	3b01      	subs	r3, #1
     cbe:	4259      	negs	r1, r3
     cc0:	4159      	adcs	r1, r3
     cc2:	224c      	movs	r2, #76	; 0x4c
     cc4:	4643      	mov	r3, r8
     cc6:	5499      	strb	r1, [r3, r2]
    AppData.Port = mcpsReq.Req.Unconfirmed.fPort;
     cc8:	7903      	ldrb	r3, [r0, #4]
     cca:	9a01      	ldr	r2, [sp, #4]
     ccc:	7053      	strb	r3, [r2, #1]
    AppData.Buffer = mcpsReq.Req.Unconfirmed.fBuffer;
     cce:	4643      	mov	r3, r8
     cd0:	6881      	ldr	r1, [r0, #8]
     cd2:	6519      	str	r1, [r3, #80]	; 0x50
    AppData.BufferSize = mcpsReq.Req.Unconfirmed.fBufferSize;
     cd4:	8983      	ldrh	r3, [r0, #12]
     cd6:	7093      	strb	r3, [r2, #2]
    status = LoRaMacMcpsRequest( &mcpsReq );
     cd8:	4b58      	ldr	r3, [pc, #352]	; (e3c <main+0x5d0>)
     cda:	4798      	blx	r3
     cdc:	0004      	movs	r4, r0
    printf( "\r\n###### ===== MCPS-Request ==== ######\r\n" );
     cde:	4858      	ldr	r0, [pc, #352]	; (e40 <main+0x5d4>)
     ce0:	4b58      	ldr	r3, [pc, #352]	; (e44 <main+0x5d8>)
     ce2:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
     ce4:	4d58      	ldr	r5, [pc, #352]	; (e48 <main+0x5dc>)
     ce6:	00a3      	lsls	r3, r4, #2
     ce8:	5959      	ldr	r1, [r3, r5]
     cea:	4858      	ldr	r0, [pc, #352]	; (e4c <main+0x5e0>)
     cec:	4b58      	ldr	r3, [pc, #352]	; (e50 <main+0x5e4>)
     cee:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
     cf0:	1e63      	subs	r3, r4, #1
     cf2:	419c      	sbcs	r4, r3
     cf4:	235c      	movs	r3, #92	; 0x5c
     cf6:	54ec      	strb	r4, [r5, r3]
     cf8:	e75d      	b.n	bb6 <main+0x34a>
            AppDataSizeBackup = AppDataSize = 1;
     cfa:	4b4e      	ldr	r3, [pc, #312]	; (e34 <main+0x5c8>)
     cfc:	2201      	movs	r2, #1
     cfe:	2126      	movs	r1, #38	; 0x26
     d00:	545a      	strb	r2, [r3, r1]
     d02:	3901      	subs	r1, #1
     d04:	545a      	strb	r2, [r3, r1]
            AppDataBuffer[0] = AppLedStateOn;
     d06:	4b53      	ldr	r3, [pc, #332]	; (e54 <main+0x5e8>)
     d08:	3253      	adds	r2, #83	; 0x53
     d0a:	5c99      	ldrb	r1, [r3, r2]
     d0c:	3204      	adds	r2, #4
     d0e:	5499      	strb	r1, [r3, r2]
     d10:	e7c4      	b.n	c9c <main+0x430>
        if( ComplianceTest.LinkCheck == true )
     d12:	4b51      	ldr	r3, [pc, #324]	; (e58 <main+0x5ec>)
     d14:	7b9b      	ldrb	r3, [r3, #14]
     d16:	2b00      	cmp	r3, #0
     d18:	d109      	bne.n	d2e <main+0x4c2>
            switch( ComplianceTest.State )
     d1a:	4b4f      	ldr	r3, [pc, #316]	; (e58 <main+0x5ec>)
     d1c:	785b      	ldrb	r3, [r3, #1]
     d1e:	2b01      	cmp	r3, #1
     d20:	d018      	beq.n	d54 <main+0x4e8>
     d22:	2b04      	cmp	r3, #4
     d24:	d1ba      	bne.n	c9c <main+0x430>
                ComplianceTest.State = 1;
     d26:	2201      	movs	r2, #1
     d28:	4b4b      	ldr	r3, [pc, #300]	; (e58 <main+0x5ec>)
     d2a:	705a      	strb	r2, [r3, #1]
     d2c:	e7b6      	b.n	c9c <main+0x430>
            ComplianceTest.LinkCheck = false;
     d2e:	4a4a      	ldr	r2, [pc, #296]	; (e58 <main+0x5ec>)
     d30:	2300      	movs	r3, #0
     d32:	7393      	strb	r3, [r2, #14]
            AppDataSize = 3;
     d34:	2003      	movs	r0, #3
     d36:	3326      	adds	r3, #38	; 0x26
     d38:	493e      	ldr	r1, [pc, #248]	; (e34 <main+0x5c8>)
     d3a:	54c8      	strb	r0, [r1, r3]
            AppDataBuffer[0] = 5;
     d3c:	4b45      	ldr	r3, [pc, #276]	; (e54 <main+0x5e8>)
     d3e:	3002      	adds	r0, #2
     d40:	2158      	movs	r1, #88	; 0x58
     d42:	5458      	strb	r0, [r3, r1]
            AppDataBuffer[1] = ComplianceTest.DemodMargin;
     d44:	3358      	adds	r3, #88	; 0x58
     d46:	7bd1      	ldrb	r1, [r2, #15]
     d48:	7059      	strb	r1, [r3, #1]
            AppDataBuffer[2] = ComplianceTest.NbGateways;
     d4a:	7c11      	ldrb	r1, [r2, #16]
     d4c:	7099      	strb	r1, [r3, #2]
            ComplianceTest.State = 1;
     d4e:	2301      	movs	r3, #1
     d50:	7053      	strb	r3, [r2, #1]
     d52:	e7a3      	b.n	c9c <main+0x430>
                AppDataSize = 2;
     d54:	2102      	movs	r1, #2
     d56:	2326      	movs	r3, #38	; 0x26
     d58:	4a36      	ldr	r2, [pc, #216]	; (e34 <main+0x5c8>)
     d5a:	54d1      	strb	r1, [r2, r3]
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
     d5c:	4b3e      	ldr	r3, [pc, #248]	; (e58 <main+0x5ec>)
     d5e:	899a      	ldrh	r2, [r3, #12]
     d60:	4b3c      	ldr	r3, [pc, #240]	; (e54 <main+0x5e8>)
     d62:	0a10      	lsrs	r0, r2, #8
     d64:	3156      	adds	r1, #86	; 0x56
     d66:	5458      	strb	r0, [r3, r1]
                AppDataBuffer[1] = ComplianceTest.DownLinkCounter;
     d68:	3358      	adds	r3, #88	; 0x58
     d6a:	705a      	strb	r2, [r3, #1]
     d6c:	e796      	b.n	c9c <main+0x430>
        if( IsTxConfirmed == false )
     d6e:	2355      	movs	r3, #85	; 0x55
     d70:	4a38      	ldr	r2, [pc, #224]	; (e54 <main+0x5e8>)
     d72:	5cd3      	ldrb	r3, [r2, r3]
     d74:	2b00      	cmp	r3, #0
     d76:	d10e      	bne.n	d96 <main+0x52a>
            mcpsReq.Type = MCPS_UNCONFIRMED;
     d78:	ab04      	add	r3, sp, #16
     d7a:	2100      	movs	r1, #0
     d7c:	7019      	strb	r1, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
     d7e:	482d      	ldr	r0, [pc, #180]	; (e34 <main+0x5c8>)
     d80:	2224      	movs	r2, #36	; 0x24
     d82:	5c82      	ldrb	r2, [r0, r2]
     d84:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBuffer = AppDataBuffer;
     d86:	4a33      	ldr	r2, [pc, #204]	; (e54 <main+0x5e8>)
     d88:	3258      	adds	r2, #88	; 0x58
     d8a:	9206      	str	r2, [sp, #24]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
     d8c:	2226      	movs	r2, #38	; 0x26
     d8e:	5c82      	ldrb	r2, [r0, r2]
     d90:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     d92:	7399      	strb	r1, [r3, #14]
     d94:	e790      	b.n	cb8 <main+0x44c>
            mcpsReq.Type = MCPS_CONFIRMED;
     d96:	ab04      	add	r3, sp, #16
     d98:	2201      	movs	r2, #1
     d9a:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppPort;
     d9c:	4925      	ldr	r1, [pc, #148]	; (e34 <main+0x5c8>)
     d9e:	3223      	adds	r2, #35	; 0x23
     da0:	5c8a      	ldrb	r2, [r1, r2]
     da2:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBuffer = AppDataBuffer;
     da4:	4a2b      	ldr	r2, [pc, #172]	; (e54 <main+0x5e8>)
     da6:	3258      	adds	r2, #88	; 0x58
     da8:	9206      	str	r2, [sp, #24]
            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
     daa:	2226      	movs	r2, #38	; 0x26
     dac:	5c8a      	ldrb	r2, [r1, r2]
     dae:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
     db0:	2200      	movs	r2, #0
     db2:	739a      	strb	r2, [r3, #14]
     db4:	e780      	b.n	cb8 <main+0x44c>
                DeviceState = DEVICE_STATE_SLEEP;
     db6:	2105      	movs	r1, #5
     db8:	233c      	movs	r3, #60	; 0x3c
     dba:	4a26      	ldr	r2, [pc, #152]	; (e54 <main+0x5e8>)
     dbc:	54d1      	strb	r1, [r2, r3]
                if( ComplianceTest.Running == true )
     dbe:	4b26      	ldr	r3, [pc, #152]	; (e58 <main+0x5ec>)
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d00c      	beq.n	de0 <main+0x574>
                    TxDutyCycleTime = 5000; // 5000 ms
     dc6:	4a25      	ldr	r2, [pc, #148]	; (e5c <main+0x5f0>)
     dc8:	4b25      	ldr	r3, [pc, #148]	; (e60 <main+0x5f4>)
     dca:	659a      	str	r2, [r3, #88]	; 0x58
                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
     dcc:	4b24      	ldr	r3, [pc, #144]	; (e60 <main+0x5f4>)
     dce:	6d99      	ldr	r1, [r3, #88]	; 0x58
     dd0:	9c00      	ldr	r4, [sp, #0]
     dd2:	0020      	movs	r0, r4
     dd4:	4b23      	ldr	r3, [pc, #140]	; (e64 <main+0x5f8>)
     dd6:	4798      	blx	r3
                TimerStart( &TxNextPacketTimer );
     dd8:	0020      	movs	r0, r4
     dda:	4b23      	ldr	r3, [pc, #140]	; (e68 <main+0x5fc>)
     ddc:	4798      	blx	r3
                break;
     dde:	e582      	b.n	8e6 <main+0x7a>
                    TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
     de0:	21fa      	movs	r1, #250	; 0xfa
     de2:	0089      	lsls	r1, r1, #2
     de4:	4821      	ldr	r0, [pc, #132]	; (e6c <main+0x600>)
     de6:	4b22      	ldr	r3, [pc, #136]	; (e70 <main+0x604>)
     de8:	4798      	blx	r3
     dea:	4b1c      	ldr	r3, [pc, #112]	; (e5c <main+0x5f0>)
     dec:	469c      	mov	ip, r3
     dee:	4460      	add	r0, ip
     df0:	4b1b      	ldr	r3, [pc, #108]	; (e60 <main+0x5f4>)
     df2:	6598      	str	r0, [r3, #88]	; 0x58
     df4:	e7ea      	b.n	dcc <main+0x560>
            }
            case DEVICE_STATE_SLEEP:
            {
                if( NvmCtxMgmtStore( ) == NVMCTXMGMT_STATUS_SUCCESS )
     df6:	4b1f      	ldr	r3, [pc, #124]	; (e74 <main+0x608>)
     df8:	4798      	blx	r3
     dfa:	2800      	cmp	r0, #0
     dfc:	d00c      	beq.n	e18 <main+0x5ac>
                {
                    printf( "\r\n###### ===== CTXS STORED ==== ######\r\n" );
                }

                CRITICAL_SECTION_BEGIN( );
     dfe:	a804      	add	r0, sp, #16
     e00:	4b1d      	ldr	r3, [pc, #116]	; (e78 <main+0x60c>)
     e02:	4798      	blx	r3
                if( IsMacProcessPending == 1 )
     e04:	4b13      	ldr	r3, [pc, #76]	; (e54 <main+0x5e8>)
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	2b01      	cmp	r3, #1
     e0a:	d009      	beq.n	e20 <main+0x5b4>
                    IsMacProcessPending = 0;
                }
                else
                {
                    // The MCU wakes up through events
                    BoardLowPowerHandler( );
     e0c:	4b1b      	ldr	r3, [pc, #108]	; (e7c <main+0x610>)
     e0e:	4798      	blx	r3
                }
                CRITICAL_SECTION_END( );
     e10:	a804      	add	r0, sp, #16
     e12:	4b1b      	ldr	r3, [pc, #108]	; (e80 <main+0x614>)
     e14:	4798      	blx	r3
     e16:	e566      	b.n	8e6 <main+0x7a>
                    printf( "\r\n###### ===== CTXS STORED ==== ######\r\n" );
     e18:	481a      	ldr	r0, [pc, #104]	; (e84 <main+0x618>)
     e1a:	4b0a      	ldr	r3, [pc, #40]	; (e44 <main+0x5d8>)
     e1c:	4798      	blx	r3
     e1e:	e7ee      	b.n	dfe <main+0x592>
                    IsMacProcessPending = 0;
     e20:	2200      	movs	r2, #0
     e22:	4b0c      	ldr	r3, [pc, #48]	; (e54 <main+0x5e8>)
     e24:	701a      	strb	r2, [r3, #0]
     e26:	e7f3      	b.n	e10 <main+0x5a4>
                break;
            }
            default:
            {
                DeviceState = DEVICE_STATE_START;
     e28:	2101      	movs	r1, #1
     e2a:	233c      	movs	r3, #60	; 0x3c
     e2c:	4a09      	ldr	r2, [pc, #36]	; (e54 <main+0x5e8>)
     e2e:	54d1      	strb	r1, [r2, r3]
                break;
     e30:	e559      	b.n	8e6 <main+0x7a>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	20000080 	.word	0x20000080
     e38:	0000588d 	.word	0x0000588d
     e3c:	000066ad 	.word	0x000066ad
     e40:	00013bc8 	.word	0x00013bc8
     e44:	0000ed01 	.word	0x0000ed01
     e48:	20000000 	.word	0x20000000
     e4c:	00013770 	.word	0x00013770
     e50:	0000ec6d 	.word	0x0000ec6d
     e54:	20000b00 	.word	0x20000b00
     e58:	20001b34 	.word	0x20001b34
     e5c:	00001388 	.word	0x00001388
     e60:	20000c00 	.word	0x20000c00
     e64:	0000c23d 	.word	0x0000c23d
     e68:	0000c04d 	.word	0x0000c04d
     e6c:	fffffc18 	.word	0xfffffc18
     e70:	00001e71 	.word	0x00001e71
     e74:	00000e8b 	.word	0x00000e8b
     e78:	00000e93 	.word	0x00000e93
     e7c:	00000f67 	.word	0x00000f67
     e80:	00000e9d 	.word	0x00000e9d
     e84:	00013bf4 	.word	0x00013bf4

00000e88 <NvmCtxMgmtEvent>:
        {
            break;
        }
    }
#endif
}
     e88:	4770      	bx	lr

00000e8a <NvmCtxMgmtStore>:

    return NVMCTXMGMT_STATUS_SUCCESS;
#else
    return NVMCTXMGMT_STATUS_FAIL;
#endif
}
     e8a:	2001      	movs	r0, #1
     e8c:	4770      	bx	lr

00000e8e <NvmCtxMgmtRestore>:

    return status;
#else
    return NVMCTXMGMT_STATUS_FAIL;
#endif
}
     e8e:	2001      	movs	r0, #1
     e90:	4770      	bx	lr

00000e92 <BoardCriticalSectionBegin>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e92:	f3ef 8310 	mrs	r3, PRIMASK
 */
static bool McuInitialized = false;

void BoardCriticalSectionBegin( uint32_t *mask )
{
    *mask = __get_PRIMASK( );
     e96:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e98:	b672      	cpsid	i
    __disable_irq( );
}
     e9a:	4770      	bx	lr

00000e9c <BoardCriticalSectionEnd>:

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e9c:	6803      	ldr	r3, [r0, #0]
     e9e:	f383 8810 	msr	PRIMASK, r3

void BoardCriticalSectionEnd( uint32_t *mask )
{
    __set_PRIMASK( *mask );
}
     ea2:	4770      	bx	lr

00000ea4 <BoardInitPeriph>:

void BoardInitPeriph( void )
{
     ea4:	b510      	push	{r4, lr}
     ea6:	b082      	sub	sp, #8
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
     ea8:	2300      	movs	r3, #0
     eaa:	9301      	str	r3, [sp, #4]
     eac:	9300      	str	r3, [sp, #0]
     eae:	2201      	movs	r2, #1
     eb0:	212a      	movs	r1, #42	; 0x2a
     eb2:	4802      	ldr	r0, [pc, #8]	; (ebc <BoardInitPeriph+0x18>)
     eb4:	4c02      	ldr	r4, [pc, #8]	; (ec0 <BoardInitPeriph+0x1c>)
     eb6:	47a0      	blx	r4
}
     eb8:	b002      	add	sp, #8
     eba:	bd10      	pop	{r4, pc}
     ebc:	20001b80 	.word	0x20001b80
     ec0:	0000be75 	.word	0x0000be75

00000ec4 <BoardInitMcu>:

void BoardInitMcu( void )
{
     ec4:	b530      	push	{r4, r5, lr}
     ec6:	b085      	sub	sp, #20
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     ec8:	4b18      	ldr	r3, [pc, #96]	; (f2c <BoardInitMcu+0x68>)
     eca:	4798      	blx	r3
    init_mcu( );
    delay_init( SysTick );
     ecc:	4818      	ldr	r0, [pc, #96]	; (f30 <BoardInitMcu+0x6c>)
     ece:	4b19      	ldr	r3, [pc, #100]	; (f34 <BoardInitMcu+0x70>)
     ed0:	4798      	blx	r3
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     ed2:	2140      	movs	r1, #64	; 0x40
     ed4:	238c      	movs	r3, #140	; 0x8c
     ed6:	4a18      	ldr	r2, [pc, #96]	; (f38 <BoardInitMcu+0x74>)
     ed8:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     eda:	4a18      	ldr	r2, [pc, #96]	; (f3c <BoardInitMcu+0x78>)
     edc:	6951      	ldr	r1, [r2, #20]
     ede:	3375      	adds	r3, #117	; 0x75
     ee0:	33ff      	adds	r3, #255	; 0xff
     ee2:	430b      	orrs	r3, r1
     ee4:	6153      	str	r3, [r2, #20]

    hri_gclk_write_PCHCTRL_reg( GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    hri_mclk_set_APBAMASK_EIC_bit( MCLK );

    RtcInit( );
     ee6:	4b16      	ldr	r3, [pc, #88]	; (f40 <BoardInitMcu+0x7c>)
     ee8:	4798      	blx	r3

    UartInit( &Uart1, UART_1, UART_TX, UART_RX );
     eea:	4c16      	ldr	r4, [pc, #88]	; (f44 <BoardInitMcu+0x80>)
     eec:	2317      	movs	r3, #23
     eee:	2216      	movs	r2, #22
     ef0:	2100      	movs	r1, #0
     ef2:	0020      	movs	r0, r4
     ef4:	4d14      	ldr	r5, [pc, #80]	; (f48 <BoardInitMcu+0x84>)
     ef6:	47a8      	blx	r5
    UartConfig( &Uart1, RX_TX, 921600, UART_8_BIT, UART_1_STOP_BIT, NO_PARITY, NO_FLOW_CTRL );
     ef8:	2300      	movs	r3, #0
     efa:	9302      	str	r3, [sp, #8]
     efc:	9301      	str	r3, [sp, #4]
     efe:	9300      	str	r3, [sp, #0]
     f00:	22e1      	movs	r2, #225	; 0xe1
     f02:	0312      	lsls	r2, r2, #12
     f04:	2102      	movs	r1, #2
     f06:	0020      	movs	r0, r4
     f08:	4c10      	ldr	r4, [pc, #64]	; (f4c <BoardInitMcu+0x88>)
     f0a:	47a0      	blx	r4

    SpiInit( &SX1276.Spi, SPI_1, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
     f0c:	2301      	movs	r3, #1
     f0e:	425b      	negs	r3, r3
     f10:	9301      	str	r3, [sp, #4]
     f12:	3338      	adds	r3, #56	; 0x38
     f14:	9300      	str	r3, [sp, #0]
     f16:	3b07      	subs	r3, #7
     f18:	2236      	movs	r2, #54	; 0x36
     f1a:	2100      	movs	r1, #0
     f1c:	480c      	ldr	r0, [pc, #48]	; (f50 <BoardInitMcu+0x8c>)
     f1e:	4c0d      	ldr	r4, [pc, #52]	; (f54 <BoardInitMcu+0x90>)
     f20:	47a0      	blx	r4
    SX1276IoInit( );
     f22:	4b0d      	ldr	r3, [pc, #52]	; (f58 <BoardInitMcu+0x94>)
     f24:	4798      	blx	r3

    McuInitialized = true;
}
     f26:	b005      	add	sp, #20
     f28:	bd30      	pop	{r4, r5, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00001629 	.word	0x00001629
     f30:	e000e010 	.word	0xe000e010
     f34:	00001159 	.word	0x00001159
     f38:	40001800 	.word	0x40001800
     f3c:	40000400 	.word	0x40000400
     f40:	00001f11 	.word	0x00001f11
     f44:	20001b48 	.word	0x20001b48
     f48:	0000c2b1 	.word	0x0000c2b1
     f4c:	0000c2c9 	.word	0x0000c2c9
     f50:	20001c7c 	.word	0x20001c7c
     f54:	000020e1 	.word	0x000020e1
     f58:	0000237d 	.word	0x0000237d

00000f5c <BoardGetRandomSeed>:
}

uint32_t BoardGetRandomSeed( void )
{
    return 0;
}
     f5c:	2000      	movs	r0, #0
     f5e:	4770      	bx	lr

00000f60 <BoardGetUniqueId>:

void BoardGetUniqueId( uint8_t *id )
{
    // We don't have an ID, so use the one from Commissioning.h
}
     f60:	4770      	bx	lr

00000f62 <BoardGetBatteryLevel>:

uint8_t BoardGetBatteryLevel( void )
{
    return 0; //  Battery level [0: node is connected to an external power source ...
}
     f62:	2000      	movs	r0, #0
     f64:	4770      	bx	lr

00000f66 <BoardLowPowerHandler>:
  __ASM volatile ("cpsid i" : : : "memory");
     f66:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
     f68:	b662      	cpsie	i
     */

    // Call low power handling function.

    __enable_irq( );
}
     f6a:	4770      	bx	lr

00000f6c <_write>:

/*
 * Function to be used by stdout for printf etc
 */
int _write( int fd, const void *buf, size_t count )
{
     f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6e:	b083      	sub	sp, #12
     f70:	000e      	movs	r6, r1
     f72:	9201      	str	r2, [sp, #4]
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )count ) != 0 ){ };
     f74:	466b      	mov	r3, sp
     f76:	889d      	ldrh	r5, [r3, #4]
     f78:	4c05      	ldr	r4, [pc, #20]	; (f90 <_write+0x24>)
     f7a:	4f06      	ldr	r7, [pc, #24]	; (f94 <_write+0x28>)
     f7c:	002a      	movs	r2, r5
     f7e:	0031      	movs	r1, r6
     f80:	0020      	movs	r0, r4
     f82:	47b8      	blx	r7
     f84:	2800      	cmp	r0, #0
     f86:	d1f9      	bne.n	f7c <_write+0x10>
    return count;
}
     f88:	9801      	ldr	r0, [sp, #4]
     f8a:	b003      	add	sp, #12
     f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	20001b48 	.word	0x20001b48
     f94:	0000c2ed 	.word	0x0000c2ed

00000f98 <_read>:

/*
 * Function to be used by stdin for scanf etc
 */
int _read( int fd, const void *buf, size_t count )
{
     f98:	b5f0      	push	{r4, r5, r6, r7, lr}
     f9a:	b083      	sub	sp, #12
     f9c:	000c      	movs	r4, r1
     f9e:	0016      	movs	r6, r2
    size_t bytesRead = 0;
     fa0:	2300      	movs	r3, #0
     fa2:	9301      	str	r3, [sp, #4]
    while( UartGetBuffer( &Uart1, ( uint8_t* )buf, count, ( uint16_t* )&bytesRead ) != 0 ){ };
     fa4:	4d0a      	ldr	r5, [pc, #40]	; (fd0 <_read+0x38>)
     fa6:	4f0b      	ldr	r7, [pc, #44]	; (fd4 <_read+0x3c>)
     fa8:	b2b2      	uxth	r2, r6
     faa:	ab01      	add	r3, sp, #4
     fac:	0021      	movs	r1, r4
     fae:	0028      	movs	r0, r5
     fb0:	47b8      	blx	r7
     fb2:	2800      	cmp	r0, #0
     fb4:	d1f8      	bne.n	fa8 <_read+0x10>
    // Echo back the character
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )bytesRead ) != 0 ){ };
     fb6:	4d06      	ldr	r5, [pc, #24]	; (fd0 <_read+0x38>)
     fb8:	4e07      	ldr	r6, [pc, #28]	; (fd8 <_read+0x40>)
     fba:	466b      	mov	r3, sp
     fbc:	889a      	ldrh	r2, [r3, #4]
     fbe:	0021      	movs	r1, r4
     fc0:	0028      	movs	r0, r5
     fc2:	47b0      	blx	r6
     fc4:	2800      	cmp	r0, #0
     fc6:	d1f8      	bne.n	fba <_read+0x22>
    return bytesRead;
}
     fc8:	9801      	ldr	r0, [sp, #4]
     fca:	b003      	add	sp, #12
     fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	20001b48 	.word	0x20001b48
     fd4:	0000c2f9 	.word	0x0000c2f9
     fd8:	0000c2ed 	.word	0x0000c2ed

00000fdc <DelayMsMcu>:
 */
#include <hal_delay.h>
#include "delay-board.h"

void DelayMsMcu( uint32_t ms )
{
     fdc:	b510      	push	{r4, lr}
    delay_ms( ms );
     fde:	b280      	uxth	r0, r0
     fe0:	4b01      	ldr	r3, [pc, #4]	; (fe8 <DelayMsMcu+0xc>)
     fe2:	4798      	blx	r3
}
     fe4:	bd10      	pop	{r4, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	0000116d 	.word	0x0000116d

00000fec <GpioMcuWrite>:
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{

    if( obj == NULL )
     fec:	2800      	cmp	r0, #0
     fee:	d012      	beq.n	1016 <GpioMcuWrite+0x2a>
    {
        //assert_param( FAIL );
        while( 1 );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
     ff0:	2200      	movs	r2, #0
     ff2:	5682      	ldrsb	r2, [r0, r2]
     ff4:	1c53      	adds	r3, r2, #1
     ff6:	d00d      	beq.n	1014 <GpioMcuWrite+0x28>
    {
        return;
    }
    gpio_set_pin_level( obj->pin, value );
     ff8:	b2d2      	uxtb	r2, r2
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     ffa:	0953      	lsrs	r3, r2, #5
     ffc:	201f      	movs	r0, #31
     ffe:	4010      	ands	r0, r2
    1000:	2201      	movs	r2, #1
    1002:	4082      	lsls	r2, r0
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    1004:	2900      	cmp	r1, #0
    1006:	d107      	bne.n	1018 <GpioMcuWrite+0x2c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1008:	01db      	lsls	r3, r3, #7
    100a:	21c0      	movs	r1, #192	; 0xc0
    100c:	05c9      	lsls	r1, r1, #23
    100e:	468c      	mov	ip, r1
    1010:	4463      	add	r3, ip
    1012:	615a      	str	r2, [r3, #20]
}
    1014:	4770      	bx	lr
    1016:	e7fe      	b.n	1016 <GpioMcuWrite+0x2a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1018:	01db      	lsls	r3, r3, #7
    101a:	21c0      	movs	r1, #192	; 0xc0
    101c:	05c9      	lsls	r1, r1, #23
    101e:	468c      	mov	ip, r1
    1020:	4463      	add	r3, ip
    1022:	619a      	str	r2, [r3, #24]
    1024:	e7f6      	b.n	1014 <GpioMcuWrite+0x28>
	...

00001028 <GpioMcuInit>:
{
    1028:	b570      	push	{r4, r5, r6, lr}
    102a:	ab04      	add	r3, sp, #16
    102c:	781c      	ldrb	r4, [r3, #0]
    obj->pin = pin;
    102e:	7001      	strb	r1, [r0, #0]
    if( pin == NC )
    1030:	1c4b      	adds	r3, r1, #1
    1032:	d06f      	beq.n	1114 <GpioMcuInit+0xec>
    if( mode == PIN_INPUT )
    1034:	2a00      	cmp	r2, #0
    1036:	d152      	bne.n	10de <GpioMcuInit+0xb6>
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_IN );
    1038:	b2c9      	uxtb	r1, r1
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    103a:	231f      	movs	r3, #31
    103c:	001d      	movs	r5, r3
    103e:	400d      	ands	r5, r1
    1040:	3201      	adds	r2, #1
    1042:	40aa      	lsls	r2, r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1044:	0949      	lsrs	r1, r1, #5
    1046:	01c9      	lsls	r1, r1, #7
    1048:	25c0      	movs	r5, #192	; 0xc0
    104a:	05ed      	lsls	r5, r5, #23
    104c:	194d      	adds	r5, r1, r5
    104e:	606a      	str	r2, [r5, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1050:	0416      	lsls	r6, r2, #16
    1052:	0c36      	lsrs	r6, r6, #16
    1054:	4d32      	ldr	r5, [pc, #200]	; (1120 <GpioMcuInit+0xf8>)
    1056:	4335      	orrs	r5, r6

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1058:	4e32      	ldr	r6, [pc, #200]	; (1124 <GpioMcuInit+0xfc>)
    105a:	46b4      	mov	ip, r6
    105c:	4461      	add	r1, ip
    105e:	628d      	str	r5, [r1, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    1060:	0c12      	lsrs	r2, r2, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1062:	4d31      	ldr	r5, [pc, #196]	; (1128 <GpioMcuInit+0x100>)
    1064:	432a      	orrs	r2, r5
    1066:	628a      	str	r2, [r1, #40]	; 0x28
        gpio_set_pin_pull_mode( obj->pin, type ); // the pull up/down need to be set after the direction for correct working
    1068:	7801      	ldrb	r1, [r0, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    106a:	094a      	lsrs	r2, r1, #5
    106c:	400b      	ands	r3, r1
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
	switch (pull_mode) {
    106e:	2c01      	cmp	r4, #1
    1070:	d013      	beq.n	109a <GpioMcuInit+0x72>
    1072:	2c00      	cmp	r4, #0
    1074:	d007      	beq.n	1086 <GpioMcuInit+0x5e>
    1076:	2c02      	cmp	r4, #2
    1078:	d020      	beq.n	10bc <GpioMcuInit+0x94>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    107a:	2291      	movs	r2, #145	; 0x91
    107c:	492b      	ldr	r1, [pc, #172]	; (112c <GpioMcuInit+0x104>)
    107e:	2000      	movs	r0, #0
    1080:	4b2b      	ldr	r3, [pc, #172]	; (1130 <GpioMcuInit+0x108>)
    1082:	4798      	blx	r3
    1084:	e046      	b.n	1114 <GpioMcuInit+0xec>
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1086:	01d2      	lsls	r2, r2, #7
    1088:	189b      	adds	r3, r3, r2
    108a:	4a2a      	ldr	r2, [pc, #168]	; (1134 <GpioMcuInit+0x10c>)
    108c:	4694      	mov	ip, r2
    108e:	4463      	add	r3, ip
    1090:	781a      	ldrb	r2, [r3, #0]
    1092:	2104      	movs	r1, #4
    1094:	438a      	bics	r2, r1
    1096:	701a      	strb	r2, [r3, #0]
    1098:	e03c      	b.n	1114 <GpioMcuInit+0xec>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    109a:	2101      	movs	r1, #1
    109c:	4099      	lsls	r1, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    109e:	01d2      	lsls	r2, r2, #7
    10a0:	20c0      	movs	r0, #192	; 0xc0
    10a2:	05c0      	lsls	r0, r0, #23
    10a4:	1810      	adds	r0, r2, r0
    10a6:	6041      	str	r1, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    10a8:	189b      	adds	r3, r3, r2
    10aa:	4a22      	ldr	r2, [pc, #136]	; (1134 <GpioMcuInit+0x10c>)
    10ac:	4694      	mov	ip, r2
    10ae:	4463      	add	r3, ip
    10b0:	781a      	ldrb	r2, [r3, #0]
    10b2:	2404      	movs	r4, #4
    10b4:	4322      	orrs	r2, r4
    10b6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10b8:	6181      	str	r1, [r0, #24]
    10ba:	e02b      	b.n	1114 <GpioMcuInit+0xec>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    10bc:	2101      	movs	r1, #1
    10be:	4099      	lsls	r1, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10c0:	01d2      	lsls	r2, r2, #7
    10c2:	20c0      	movs	r0, #192	; 0xc0
    10c4:	05c0      	lsls	r0, r0, #23
    10c6:	1810      	adds	r0, r2, r0
    10c8:	6041      	str	r1, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    10ca:	189b      	adds	r3, r3, r2
    10cc:	4a19      	ldr	r2, [pc, #100]	; (1134 <GpioMcuInit+0x10c>)
    10ce:	4694      	mov	ip, r2
    10d0:	4463      	add	r3, ip
    10d2:	781a      	ldrb	r2, [r3, #0]
    10d4:	2404      	movs	r4, #4
    10d6:	4322      	orrs	r2, r4
    10d8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10da:	6141      	str	r1, [r0, #20]
    10dc:	e01a      	b.n	1114 <GpioMcuInit+0xec>
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_OUT );
    10de:	b2c9      	uxtb	r1, r1
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    10e0:	241f      	movs	r4, #31
    10e2:	400c      	ands	r4, r1
    10e4:	2301      	movs	r3, #1
    10e6:	40a3      	lsls	r3, r4
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10e8:	0949      	lsrs	r1, r1, #5
    10ea:	01c9      	lsls	r1, r1, #7
    10ec:	24c0      	movs	r4, #192	; 0xc0
    10ee:	05e4      	lsls	r4, r4, #23
    10f0:	190c      	adds	r4, r1, r4
    10f2:	60a3      	str	r3, [r4, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10f4:	041d      	lsls	r5, r3, #16
    10f6:	0c2d      	lsrs	r5, r5, #16
    10f8:	2480      	movs	r4, #128	; 0x80
    10fa:	05e4      	lsls	r4, r4, #23
    10fc:	432c      	orrs	r4, r5
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10fe:	4d09      	ldr	r5, [pc, #36]	; (1124 <GpioMcuInit+0xfc>)
    1100:	46ac      	mov	ip, r5
    1102:	4461      	add	r1, ip
    1104:	628c      	str	r4, [r1, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1106:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1108:	24c0      	movs	r4, #192	; 0xc0
    110a:	0624      	lsls	r4, r4, #24
    110c:	4323      	orrs	r3, r4
    110e:	628b      	str	r3, [r1, #40]	; 0x28
    if( mode == PIN_OUTPUT )
    1110:	2a01      	cmp	r2, #1
    1112:	d000      	beq.n	1116 <GpioMcuInit+0xee>
}
    1114:	bd70      	pop	{r4, r5, r6, pc}
        GpioMcuWrite( obj, value );
    1116:	9905      	ldr	r1, [sp, #20]
    1118:	4b07      	ldr	r3, [pc, #28]	; (1138 <GpioMcuInit+0x110>)
    111a:	4798      	blx	r3
    111c:	e7fa      	b.n	1114 <GpioMcuInit+0xec>
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	40020000 	.word	0x40020000
    1124:	40002800 	.word	0x40002800
    1128:	c0020000 	.word	0xc0020000
    112c:	00013f14 	.word	0x00013f14
    1130:	000015dd 	.word	0x000015dd
    1134:	40002840 	.word	0x40002840
    1138:	00000fed 	.word	0x00000fed

0000113c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    113c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1140:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1142:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1144:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1148:	4770      	bx	lr

0000114a <atomic_leave_critical>:
    114a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    114e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1150:	f383 8810 	msr	PRIMASK, r3
}
    1154:	4770      	bx	lr
	...

00001158 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1158:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    115a:	4b02      	ldr	r3, [pc, #8]	; (1164 <delay_init+0xc>)
    115c:	6018      	str	r0, [r3, #0]
    115e:	4b02      	ldr	r3, [pc, #8]	; (1168 <delay_init+0x10>)
    1160:	4798      	blx	r3
}
    1162:	bd10      	pop	{r4, pc}
    1164:	20000c5c 	.word	0x20000c5c
    1168:	00001cbd 	.word	0x00001cbd

0000116c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    116c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    116e:	4b04      	ldr	r3, [pc, #16]	; (1180 <delay_ms+0x14>)
    1170:	681c      	ldr	r4, [r3, #0]
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <delay_ms+0x18>)
    1174:	4798      	blx	r3
    1176:	0001      	movs	r1, r0
    1178:	0020      	movs	r0, r4
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <delay_ms+0x1c>)
    117c:	4798      	blx	r3
}
    117e:	bd10      	pop	{r4, pc}
    1180:	20000c5c 	.word	0x20000c5c
    1184:	00001621 	.word	0x00001621
    1188:	00001cd1 	.word	0x00001cd1

0000118c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    118e:	2606      	movs	r6, #6
    1190:	2500      	movs	r5, #0
    1192:	23ff      	movs	r3, #255	; 0xff
    1194:	469c      	mov	ip, r3

	while (upper >= lower) {
		middle = (upper + lower) >> 1;

		if (ext_irqs[middle].pin == pin) {
    1196:	4f0e      	ldr	r7, [pc, #56]	; (11d0 <process_ext_irq+0x44>)
    1198:	e00a      	b.n	11b0 <process_ext_irq+0x24>
			if (ext_irqs[middle].cb) {
    119a:	00db      	lsls	r3, r3, #3
    119c:	4c0c      	ldr	r4, [pc, #48]	; (11d0 <process_ext_irq+0x44>)
    119e:	591b      	ldr	r3, [r3, r4]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d00f      	beq.n	11c4 <process_ext_irq+0x38>
				ext_irqs[middle].cb();
    11a4:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    11a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			upper = middle - 1;
    11a8:	3901      	subs	r1, #1
    11aa:	b2ce      	uxtb	r6, r1
	while (upper >= lower) {
    11ac:	42ae      	cmp	r6, r5
    11ae:	d3fa      	bcc.n	11a6 <process_ext_irq+0x1a>
		middle = (upper + lower) >> 1;
    11b0:	1973      	adds	r3, r6, r5
    11b2:	105b      	asrs	r3, r3, #1
    11b4:	b2d9      	uxtb	r1, r3
    11b6:	4662      	mov	r2, ip
    11b8:	4013      	ands	r3, r2
		if (ext_irqs[middle].pin == pin) {
    11ba:	00da      	lsls	r2, r3, #3
    11bc:	18ba      	adds	r2, r7, r2
    11be:	6852      	ldr	r2, [r2, #4]
    11c0:	4282      	cmp	r2, r0
    11c2:	d0ea      	beq.n	119a <process_ext_irq+0xe>
		if (ext_irqs[middle].pin < pin) {
    11c4:	4282      	cmp	r2, r0
    11c6:	d2ef      	bcs.n	11a8 <process_ext_irq+0x1c>
			lower = middle + 1;
    11c8:	3101      	adds	r1, #1
    11ca:	b2cd      	uxtb	r5, r1
    11cc:	e7ee      	b.n	11ac <process_ext_irq+0x20>
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	20000c60 	.word	0x20000c60

000011d4 <ext_irq_init>:
{
    11d4:	b510      	push	{r4, lr}
    11d6:	4b07      	ldr	r3, [pc, #28]	; (11f4 <ext_irq_init+0x20>)
    11d8:	0018      	movs	r0, r3
    11da:	3030      	adds	r0, #48	; 0x30
		ext_irqs[i].pin = 0xFFFFFFFF;
    11dc:	2101      	movs	r1, #1
    11de:	4249      	negs	r1, r1
		ext_irqs[i].cb  = NULL;
    11e0:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
    11e2:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    11e4:	601a      	str	r2, [r3, #0]
    11e6:	3308      	adds	r3, #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    11e8:	4283      	cmp	r3, r0
    11ea:	d1fa      	bne.n	11e2 <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
    11ec:	4802      	ldr	r0, [pc, #8]	; (11f8 <ext_irq_init+0x24>)
    11ee:	4b03      	ldr	r3, [pc, #12]	; (11fc <ext_irq_init+0x28>)
    11f0:	4798      	blx	r3
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	20000c60 	.word	0x20000c60
    11f8:	0000118d 	.word	0x0000118d
    11fc:	00001669 	.word	0x00001669

00001200 <ext_irq_register>:
{
    1200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1202:	46de      	mov	lr, fp
    1204:	4657      	mov	r7, sl
    1206:	464e      	mov	r6, r9
    1208:	4645      	mov	r5, r8
    120a:	b5e0      	push	{r5, r6, r7, lr}
		if (ext_irqs[i].pin == pin) {
    120c:	4b32      	ldr	r3, [pc, #200]	; (12d8 <ext_irq_register+0xd8>)
    120e:	685b      	ldr	r3, [r3, #4]
    1210:	4298      	cmp	r0, r3
    1212:	d01d      	beq.n	1250 <ext_irq_register+0x50>
    1214:	4a30      	ldr	r2, [pc, #192]	; (12d8 <ext_irq_register+0xd8>)
    1216:	2301      	movs	r3, #1
    1218:	001c      	movs	r4, r3
    121a:	68d5      	ldr	r5, [r2, #12]
    121c:	4285      	cmp	r5, r0
    121e:	d018      	beq.n	1252 <ext_irq_register+0x52>
    1220:	3301      	adds	r3, #1
    1222:	3208      	adds	r2, #8
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1224:	2b06      	cmp	r3, #6
    1226:	d1f7      	bne.n	1218 <ext_irq_register+0x18>
	if (NULL == cb) {
    1228:	2900      	cmp	r1, #0
    122a:	d04d      	beq.n	12c8 <ext_irq_register+0xc8>
			if (NULL == ext_irqs[i].cb) {
    122c:	4b2a      	ldr	r3, [pc, #168]	; (12d8 <ext_irq_register+0xd8>)
    122e:	681a      	ldr	r2, [r3, #0]
    1230:	2301      	movs	r3, #1
    1232:	2a00      	cmp	r2, #0
    1234:	d04b      	beq.n	12ce <ext_irq_register+0xce>
    1236:	4c28      	ldr	r4, [pc, #160]	; (12d8 <ext_irq_register+0xd8>)
    1238:	b2de      	uxtb	r6, r3
    123a:	001d      	movs	r5, r3
    123c:	00da      	lsls	r2, r3, #3
    123e:	5912      	ldr	r2, [r2, r4]
    1240:	2a00      	cmp	r2, #0
    1242:	d00f      	beq.n	1264 <ext_irq_register+0x64>
    1244:	3301      	adds	r3, #1
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1246:	2b06      	cmp	r3, #6
    1248:	d1f6      	bne.n	1238 <ext_irq_register+0x38>
		return ERR_INVALID_ARG;
    124a:	200d      	movs	r0, #13
    124c:	4240      	negs	r0, r0
    124e:	e035      	b.n	12bc <ext_irq_register+0xbc>
		if (ext_irqs[i].pin == pin) {
    1250:	2400      	movs	r4, #0
			ext_irqs[i].cb = cb;
    1252:	00e4      	lsls	r4, r4, #3
    1254:	4b20      	ldr	r3, [pc, #128]	; (12d8 <ext_irq_register+0xd8>)
    1256:	50e1      	str	r1, [r4, r3]
	if (NULL == cb) {
    1258:	2900      	cmp	r1, #0
    125a:	d12c      	bne.n	12b6 <ext_irq_register+0xb6>
		return _ext_irq_enable(pin, false);
    125c:	2100      	movs	r1, #0
    125e:	4b1f      	ldr	r3, [pc, #124]	; (12dc <ext_irq_register+0xdc>)
    1260:	4798      	blx	r3
    1262:	e02b      	b.n	12bc <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    1264:	4b1c      	ldr	r3, [pc, #112]	; (12d8 <ext_irq_register+0xd8>)
    1266:	00ed      	lsls	r5, r5, #3
    1268:	50e9      	str	r1, [r5, r3]
				ext_irqs[i].pin = pin;
    126a:	195d      	adds	r5, r3, r5
    126c:	6068      	str	r0, [r5, #4]
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    126e:	2e05      	cmp	r6, #5
    1270:	d821      	bhi.n	12b6 <ext_irq_register+0xb6>
				ext_irqs[i] = tmp;
    1272:	4d19      	ldr	r5, [pc, #100]	; (12d8 <ext_irq_register+0xd8>)
    1274:	00f7      	lsls	r7, r6, #3
    1276:	46ba      	mov	sl, r7
    1278:	44aa      	add	sl, r5
    127a:	002b      	movs	r3, r5
    127c:	3530      	adds	r5, #48	; 0x30
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    127e:	46bb      	mov	fp, r7
    1280:	4654      	mov	r4, sl
				ext_irqs[j] = ext_irqs[i];
    1282:	4699      	mov	r9, r3
    1284:	e002      	b.n	128c <ext_irq_register+0x8c>
    1286:	3308      	adds	r3, #8
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1288:	429d      	cmp	r5, r3
    128a:	d014      	beq.n	12b6 <ext_irq_register+0xb6>
    128c:	001a      	movs	r2, r3
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    128e:	6859      	ldr	r1, [r3, #4]
    1290:	6866      	ldr	r6, [r4, #4]
    1292:	428e      	cmp	r6, r1
    1294:	d2f7      	bcs.n	1286 <ext_irq_register+0x86>
    1296:	3101      	adds	r1, #1
    1298:	d0f5      	beq.n	1286 <ext_irq_register+0x86>
				struct ext_irq tmp = ext_irqs[j];
    129a:	6819      	ldr	r1, [r3, #0]
    129c:	4688      	mov	r8, r1
    129e:	6859      	ldr	r1, [r3, #4]
    12a0:	468c      	mov	ip, r1
				ext_irqs[j] = ext_irqs[i];
    12a2:	4649      	mov	r1, r9
    12a4:	4459      	add	r1, fp
    12a6:	c9c0      	ldmia	r1!, {r6, r7}
    12a8:	c2c0      	stmia	r2!, {r6, r7}
				ext_irqs[i] = tmp;
    12aa:	4642      	mov	r2, r8
    12ac:	4651      	mov	r1, sl
    12ae:	600a      	str	r2, [r1, #0]
    12b0:	4662      	mov	r2, ip
    12b2:	604a      	str	r2, [r1, #4]
    12b4:	e7e7      	b.n	1286 <ext_irq_register+0x86>
	return _ext_irq_enable(pin, true);
    12b6:	2101      	movs	r1, #1
    12b8:	4b08      	ldr	r3, [pc, #32]	; (12dc <ext_irq_register+0xdc>)
    12ba:	4798      	blx	r3
}
    12bc:	bc3c      	pop	{r2, r3, r4, r5}
    12be:	4690      	mov	r8, r2
    12c0:	4699      	mov	r9, r3
    12c2:	46a2      	mov	sl, r4
    12c4:	46ab      	mov	fp, r5
    12c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    12c8:	200d      	movs	r0, #13
    12ca:	4240      	negs	r0, r0
    12cc:	e7f6      	b.n	12bc <ext_irq_register+0xbc>
				ext_irqs[i].cb  = cb;
    12ce:	4b02      	ldr	r3, [pc, #8]	; (12d8 <ext_irq_register+0xd8>)
    12d0:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
    12d2:	6058      	str	r0, [r3, #4]
    12d4:	2600      	movs	r6, #0
    12d6:	e7cc      	b.n	1272 <ext_irq_register+0x72>
    12d8:	20000c60 	.word	0x20000c60
    12dc:	00001709 	.word	0x00001709

000012e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    12e0:	b570      	push	{r4, r5, r6, lr}
    12e2:	0006      	movs	r6, r0
    12e4:	000c      	movs	r4, r1
    12e6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    12e8:	2800      	cmp	r0, #0
    12ea:	d00d      	beq.n	1308 <io_write+0x28>
    12ec:	0008      	movs	r0, r1
    12ee:	1e43      	subs	r3, r0, #1
    12f0:	4198      	sbcs	r0, r3
    12f2:	b2c0      	uxtb	r0, r0
    12f4:	223e      	movs	r2, #62	; 0x3e
    12f6:	4905      	ldr	r1, [pc, #20]	; (130c <io_write+0x2c>)
    12f8:	4b05      	ldr	r3, [pc, #20]	; (1310 <io_write+0x30>)
    12fa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    12fc:	6833      	ldr	r3, [r6, #0]
    12fe:	002a      	movs	r2, r5
    1300:	0021      	movs	r1, r4
    1302:	0030      	movs	r0, r6
    1304:	4798      	blx	r3
}
    1306:	bd70      	pop	{r4, r5, r6, pc}
    1308:	2000      	movs	r0, #0
    130a:	e7f3      	b.n	12f4 <io_write+0x14>
    130c:	00013f44 	.word	0x00013f44
    1310:	000015dd 	.word	0x000015dd

00001314 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	0006      	movs	r6, r0
    1318:	000c      	movs	r4, r1
    131a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    131c:	2800      	cmp	r0, #0
    131e:	d00d      	beq.n	133c <io_read+0x28>
    1320:	0008      	movs	r0, r1
    1322:	1e43      	subs	r3, r0, #1
    1324:	4198      	sbcs	r0, r3
    1326:	b2c0      	uxtb	r0, r0
    1328:	2247      	movs	r2, #71	; 0x47
    132a:	4905      	ldr	r1, [pc, #20]	; (1340 <io_read+0x2c>)
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <io_read+0x30>)
    132e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1330:	6873      	ldr	r3, [r6, #4]
    1332:	002a      	movs	r2, r5
    1334:	0021      	movs	r1, r4
    1336:	0030      	movs	r0, r6
    1338:	4798      	blx	r3
}
    133a:	bd70      	pop	{r4, r5, r6, pc}
    133c:	2000      	movs	r0, #0
    133e:	e7f3      	b.n	1328 <io_read+0x14>
    1340:	00013f44 	.word	0x00013f44
    1344:	000015dd 	.word	0x000015dd

00001348 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1348:	b570      	push	{r4, r5, r6, lr}
    134a:	0004      	movs	r4, r0
    134c:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
    134e:	2800      	cmp	r0, #0
    1350:	d016      	beq.n	1380 <spi_m_sync_init+0x38>
    1352:	0008      	movs	r0, r1
    1354:	1e43      	subs	r3, r0, #1
    1356:	4198      	sbcs	r0, r3
    1358:	b2c0      	uxtb	r0, r0
    135a:	2242      	movs	r2, #66	; 0x42
    135c:	4909      	ldr	r1, [pc, #36]	; (1384 <spi_m_sync_init+0x3c>)
    135e:	4b0a      	ldr	r3, [pc, #40]	; (1388 <spi_m_sync_init+0x40>)
    1360:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    1362:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    1364:	0029      	movs	r1, r5
    1366:	0020      	movs	r0, r4
    1368:	4b08      	ldr	r3, [pc, #32]	; (138c <spi_m_sync_init+0x44>)
    136a:	4798      	blx	r3
	if (rc < 0) {
    136c:	2800      	cmp	r0, #0
    136e:	db06      	blt.n	137e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1370:	4b07      	ldr	r3, [pc, #28]	; (1390 <spi_m_sync_init+0x48>)
    1372:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
    1374:	4b07      	ldr	r3, [pc, #28]	; (1394 <spi_m_sync_init+0x4c>)
    1376:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
    1378:	4b07      	ldr	r3, [pc, #28]	; (1398 <spi_m_sync_init+0x50>)
    137a:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
    137c:	2000      	movs	r0, #0
}
    137e:	bd70      	pop	{r4, r5, r6, pc}
    1380:	2000      	movs	r0, #0
    1382:	e7ea      	b.n	135a <spi_m_sync_init+0x12>
    1384:	00013f6c 	.word	0x00013f6c
    1388:	000015dd 	.word	0x000015dd
    138c:	00001a55 	.word	0x00001a55
    1390:	ffff8000 	.word	0xffff8000
    1394:	00001421 	.word	0x00001421
    1398:	000013e5 	.word	0x000013e5

0000139c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    139c:	b530      	push	{r4, r5, lr}
    139e:	b087      	sub	sp, #28
    13a0:	0004      	movs	r4, r0
    13a2:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    13a4:	2800      	cmp	r0, #0
    13a6:	d014      	beq.n	13d2 <spi_m_sync_transfer+0x36>
    13a8:	0008      	movs	r0, r1
    13aa:	1e43      	subs	r3, r0, #1
    13ac:	4198      	sbcs	r0, r3
    13ae:	b2c0      	uxtb	r0, r0
    13b0:	22bd      	movs	r2, #189	; 0xbd
    13b2:	4909      	ldr	r1, [pc, #36]	; (13d8 <spi_m_sync_transfer+0x3c>)
    13b4:	4b09      	ldr	r3, [pc, #36]	; (13dc <spi_m_sync_transfer+0x40>)
    13b6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    13b8:	682b      	ldr	r3, [r5, #0]
    13ba:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    13bc:	686b      	ldr	r3, [r5, #4]
    13be:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    13c0:	68ab      	ldr	r3, [r5, #8]
    13c2:	9301      	str	r3, [sp, #4]
    13c4:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
    13c6:	a903      	add	r1, sp, #12
    13c8:	0020      	movs	r0, r4
    13ca:	4b05      	ldr	r3, [pc, #20]	; (13e0 <spi_m_sync_transfer+0x44>)
    13cc:	4798      	blx	r3
}
    13ce:	b007      	add	sp, #28
    13d0:	bd30      	pop	{r4, r5, pc}
    13d2:	2000      	movs	r0, #0
    13d4:	e7ec      	b.n	13b0 <spi_m_sync_transfer+0x14>
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00013f6c 	.word	0x00013f6c
    13dc:	000015dd 	.word	0x000015dd
    13e0:	00001bad 	.word	0x00001bad

000013e4 <_spi_m_sync_io_write>:
{
    13e4:	b570      	push	{r4, r5, r6, lr}
    13e6:	b084      	sub	sp, #16
    13e8:	0004      	movs	r4, r0
    13ea:	000e      	movs	r6, r1
    13ec:	0015      	movs	r5, r2
	ASSERT(io);
    13ee:	1e43      	subs	r3, r0, #1
    13f0:	4198      	sbcs	r0, r3
    13f2:	b2c0      	uxtb	r0, r0
    13f4:	22ad      	movs	r2, #173	; 0xad
    13f6:	4907      	ldr	r1, [pc, #28]	; (1414 <_spi_m_sync_io_write+0x30>)
    13f8:	4b07      	ldr	r3, [pc, #28]	; (1418 <_spi_m_sync_io_write+0x34>)
    13fa:	4798      	blx	r3
	xfer.rxbuf = 0;
    13fc:	2300      	movs	r3, #0
    13fe:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1400:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1402:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1404:	0020      	movs	r0, r4
    1406:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
    1408:	a901      	add	r1, sp, #4
    140a:	4b04      	ldr	r3, [pc, #16]	; (141c <_spi_m_sync_io_write+0x38>)
    140c:	4798      	blx	r3
}
    140e:	b004      	add	sp, #16
    1410:	bd70      	pop	{r4, r5, r6, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	00013f6c 	.word	0x00013f6c
    1418:	000015dd 	.word	0x000015dd
    141c:	0000139d 	.word	0x0000139d

00001420 <_spi_m_sync_io_read>:
{
    1420:	b570      	push	{r4, r5, r6, lr}
    1422:	b084      	sub	sp, #16
    1424:	0004      	movs	r4, r0
    1426:	000e      	movs	r6, r1
    1428:	0015      	movs	r5, r2
	ASSERT(io);
    142a:	1e43      	subs	r3, r0, #1
    142c:	4198      	sbcs	r0, r3
    142e:	b2c0      	uxtb	r0, r0
    1430:	2291      	movs	r2, #145	; 0x91
    1432:	4907      	ldr	r1, [pc, #28]	; (1450 <_spi_m_sync_io_read+0x30>)
    1434:	4b07      	ldr	r3, [pc, #28]	; (1454 <_spi_m_sync_io_read+0x34>)
    1436:	4798      	blx	r3
	xfer.rxbuf = buf;
    1438:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    143a:	2300      	movs	r3, #0
    143c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    143e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1440:	0020      	movs	r0, r4
    1442:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
    1444:	a901      	add	r1, sp, #4
    1446:	4b04      	ldr	r3, [pc, #16]	; (1458 <_spi_m_sync_io_read+0x38>)
    1448:	4798      	blx	r3
}
    144a:	b004      	add	sp, #16
    144c:	bd70      	pop	{r4, r5, r6, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	00013f6c 	.word	0x00013f6c
    1454:	000015dd 	.word	0x000015dd
    1458:	0000139d 	.word	0x0000139d

0000145c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    145e:	46ce      	mov	lr, r9
    1460:	4647      	mov	r7, r8
    1462:	b580      	push	{r7, lr}
    1464:	0004      	movs	r4, r0
    1466:	000f      	movs	r7, r1
    1468:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    146a:	2800      	cmp	r0, #0
    146c:	d021      	beq.n	14b2 <usart_sync_write+0x56>
    146e:	2900      	cmp	r1, #0
    1470:	d021      	beq.n	14b6 <usart_sync_write+0x5a>
    1472:	0010      	movs	r0, r2
    1474:	1e43      	subs	r3, r0, #1
    1476:	4198      	sbcs	r0, r3
    1478:	22fb      	movs	r2, #251	; 0xfb
    147a:	4910      	ldr	r1, [pc, #64]	; (14bc <usart_sync_write+0x60>)
    147c:	4b10      	ldr	r3, [pc, #64]	; (14c0 <usart_sync_write+0x64>)
    147e:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
    1480:	3408      	adds	r4, #8
    1482:	4d10      	ldr	r5, [pc, #64]	; (14c4 <usart_sync_write+0x68>)
    1484:	0020      	movs	r0, r4
    1486:	47a8      	blx	r5
    1488:	2800      	cmp	r0, #0
    148a:	d0fb      	beq.n	1484 <usart_sync_write+0x28>
    148c:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    148e:	4b0e      	ldr	r3, [pc, #56]	; (14c8 <usart_sync_write+0x6c>)
    1490:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device))
    1492:	4d0c      	ldr	r5, [pc, #48]	; (14c4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1494:	5db9      	ldrb	r1, [r7, r6]
    1496:	0020      	movs	r0, r4
    1498:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
    149a:	0020      	movs	r0, r4
    149c:	47a8      	blx	r5
    149e:	2800      	cmp	r0, #0
    14a0:	d0fb      	beq.n	149a <usart_sync_write+0x3e>
			;
	} while (++offset < length);
    14a2:	3601      	adds	r6, #1
    14a4:	4546      	cmp	r6, r8
    14a6:	d3f5      	bcc.n	1494 <usart_sync_write+0x38>

	return (int32_t)offset;
}
    14a8:	0030      	movs	r0, r6
    14aa:	bc0c      	pop	{r2, r3}
    14ac:	4690      	mov	r8, r2
    14ae:	4699      	mov	r9, r3
    14b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    14b2:	2000      	movs	r0, #0
    14b4:	e7e0      	b.n	1478 <usart_sync_write+0x1c>
    14b6:	2000      	movs	r0, #0
    14b8:	e7de      	b.n	1478 <usart_sync_write+0x1c>
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	00013f9c 	.word	0x00013f9c
    14c0:	000015dd 	.word	0x000015dd
    14c4:	00001a41 	.word	0x00001a41
    14c8:	00001a31 	.word	0x00001a31

000014cc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	46ce      	mov	lr, r9
    14d0:	4647      	mov	r7, r8
    14d2:	b580      	push	{r7, lr}
    14d4:	0004      	movs	r4, r0
    14d6:	000f      	movs	r7, r1
    14d8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    14da:	2800      	cmp	r0, #0
    14dc:	d01d      	beq.n	151a <usart_sync_read+0x4e>
    14de:	2900      	cmp	r1, #0
    14e0:	d01d      	beq.n	151e <usart_sync_read+0x52>
    14e2:	0010      	movs	r0, r2
    14e4:	1e43      	subs	r3, r0, #1
    14e6:	4198      	sbcs	r0, r3
    14e8:	2216      	movs	r2, #22
    14ea:	32ff      	adds	r2, #255	; 0xff
    14ec:	490d      	ldr	r1, [pc, #52]	; (1524 <usart_sync_read+0x58>)
    14ee:	4b0e      	ldr	r3, [pc, #56]	; (1528 <usart_sync_read+0x5c>)
    14f0:	4798      	blx	r3
	uint32_t                      offset = 0;
    14f2:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    14f4:	3408      	adds	r4, #8
    14f6:	4d0d      	ldr	r5, [pc, #52]	; (152c <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    14f8:	4b0d      	ldr	r3, [pc, #52]	; (1530 <usart_sync_read+0x64>)
    14fa:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    14fc:	0020      	movs	r0, r4
    14fe:	47a8      	blx	r5
    1500:	2800      	cmp	r0, #0
    1502:	d0fb      	beq.n	14fc <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1504:	0020      	movs	r0, r4
    1506:	47c8      	blx	r9
    1508:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    150a:	3601      	adds	r6, #1
    150c:	4546      	cmp	r6, r8
    150e:	d3f5      	bcc.n	14fc <usart_sync_read+0x30>

	return (int32_t)offset;
}
    1510:	0030      	movs	r0, r6
    1512:	bc0c      	pop	{r2, r3}
    1514:	4690      	mov	r8, r2
    1516:	4699      	mov	r9, r3
    1518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    151a:	2000      	movs	r0, #0
    151c:	e7e4      	b.n	14e8 <usart_sync_read+0x1c>
    151e:	2000      	movs	r0, #0
    1520:	e7e2      	b.n	14e8 <usart_sync_read+0x1c>
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	00013f9c 	.word	0x00013f9c
    1528:	000015dd 	.word	0x000015dd
    152c:	00001a4b 	.word	0x00001a4b
    1530:	00001a39 	.word	0x00001a39

00001534 <usart_sync_init>:
{
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	0005      	movs	r5, r0
    1538:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    153a:	2800      	cmp	r0, #0
    153c:	d013      	beq.n	1566 <usart_sync_init+0x32>
    153e:	0008      	movs	r0, r1
    1540:	1e43      	subs	r3, r0, #1
    1542:	4198      	sbcs	r0, r3
    1544:	b2c0      	uxtb	r0, r0
    1546:	223e      	movs	r2, #62	; 0x3e
    1548:	4908      	ldr	r1, [pc, #32]	; (156c <usart_sync_init+0x38>)
    154a:	4b09      	ldr	r3, [pc, #36]	; (1570 <usart_sync_init+0x3c>)
    154c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    154e:	0028      	movs	r0, r5
    1550:	3008      	adds	r0, #8
    1552:	0021      	movs	r1, r4
    1554:	4b07      	ldr	r3, [pc, #28]	; (1574 <usart_sync_init+0x40>)
    1556:	4798      	blx	r3
	if (init_status) {
    1558:	2800      	cmp	r0, #0
    155a:	d103      	bne.n	1564 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    155c:	4b06      	ldr	r3, [pc, #24]	; (1578 <usart_sync_init+0x44>)
    155e:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <usart_sync_init+0x48>)
    1562:	602b      	str	r3, [r5, #0]
}
    1564:	bd70      	pop	{r4, r5, r6, pc}
    1566:	2000      	movs	r0, #0
    1568:	e7ed      	b.n	1546 <usart_sync_init+0x12>
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	00013f9c 	.word	0x00013f9c
    1570:	000015dd 	.word	0x000015dd
    1574:	000019e1 	.word	0x000019e1
    1578:	000014cd 	.word	0x000014cd
    157c:	0000145d 	.word	0x0000145d

00001580 <usart_sync_enable>:
{
    1580:	b510      	push	{r4, lr}
    1582:	0004      	movs	r4, r0
	ASSERT(descr);
    1584:	1e43      	subs	r3, r0, #1
    1586:	4198      	sbcs	r0, r3
    1588:	b2c0      	uxtb	r0, r0
    158a:	225d      	movs	r2, #93	; 0x5d
    158c:	4904      	ldr	r1, [pc, #16]	; (15a0 <usart_sync_enable+0x20>)
    158e:	4b05      	ldr	r3, [pc, #20]	; (15a4 <usart_sync_enable+0x24>)
    1590:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1592:	0020      	movs	r0, r4
    1594:	3008      	adds	r0, #8
    1596:	4b04      	ldr	r3, [pc, #16]	; (15a8 <usart_sync_enable+0x28>)
    1598:	4798      	blx	r3
}
    159a:	2000      	movs	r0, #0
    159c:	bd10      	pop	{r4, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	00013f9c 	.word	0x00013f9c
    15a4:	000015dd 	.word	0x000015dd
    15a8:	00001a0d 	.word	0x00001a0d

000015ac <usart_sync_set_baud_rate>:
{
    15ac:	b570      	push	{r4, r5, r6, lr}
    15ae:	0004      	movs	r4, r0
    15b0:	000d      	movs	r5, r1
	ASSERT(descr);
    15b2:	1e43      	subs	r3, r0, #1
    15b4:	4198      	sbcs	r0, r3
    15b6:	b2c0      	uxtb	r0, r0
    15b8:	228a      	movs	r2, #138	; 0x8a
    15ba:	4905      	ldr	r1, [pc, #20]	; (15d0 <usart_sync_set_baud_rate+0x24>)
    15bc:	4b05      	ldr	r3, [pc, #20]	; (15d4 <usart_sync_set_baud_rate+0x28>)
    15be:	4798      	blx	r3
	_usart_sync_set_baud_rate(&descr->device, baud_rate);
    15c0:	0020      	movs	r0, r4
    15c2:	3008      	adds	r0, #8
    15c4:	0029      	movs	r1, r5
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <usart_sync_set_baud_rate+0x2c>)
    15c8:	4798      	blx	r3
}
    15ca:	2000      	movs	r0, #0
    15cc:	bd70      	pop	{r4, r5, r6, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00013f9c 	.word	0x00013f9c
    15d4:	000015dd 	.word	0x000015dd
    15d8:	00001a21 	.word	0x00001a21

000015dc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    15dc:	2800      	cmp	r0, #0
    15de:	d100      	bne.n	15e2 <assert+0x6>
		__asm("BKPT #0");
    15e0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    15e2:	4770      	bx	lr

000015e4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    15e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    15e6:	4a06      	ldr	r2, [pc, #24]	; (1600 <_sbrk+0x1c>)
    15e8:	6812      	ldr	r2, [r2, #0]
    15ea:	2a00      	cmp	r2, #0
    15ec:	d004      	beq.n	15f8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    15ee:	4a04      	ldr	r2, [pc, #16]	; (1600 <_sbrk+0x1c>)
    15f0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    15f2:	18c3      	adds	r3, r0, r3
    15f4:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    15f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    15f8:	4902      	ldr	r1, [pc, #8]	; (1604 <_sbrk+0x20>)
    15fa:	4a01      	ldr	r2, [pc, #4]	; (1600 <_sbrk+0x1c>)
    15fc:	6011      	str	r1, [r2, #0]
    15fe:	e7f6      	b.n	15ee <_sbrk+0xa>
    1600:	20000c90 	.word	0x20000c90
    1604:	20003d30 	.word	0x20003d30

00001608 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1608:	2001      	movs	r0, #1
    160a:	4240      	negs	r0, r0
    160c:	4770      	bx	lr

0000160e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    160e:	2380      	movs	r3, #128	; 0x80
    1610:	019b      	lsls	r3, r3, #6
    1612:	604b      	str	r3, [r1, #4]

	return 0;
}
    1614:	2000      	movs	r0, #0
    1616:	4770      	bx	lr

00001618 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    1618:	2001      	movs	r0, #1
    161a:	4770      	bx	lr

0000161c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    161c:	2000      	movs	r0, #0
    161e:	4770      	bx	lr

00001620 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    1620:	23fa      	movs	r3, #250	; 0xfa
    1622:	019b      	lsls	r3, r3, #6
    1624:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1626:	4770      	bx	lr

00001628 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1628:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    162a:	4b08      	ldr	r3, [pc, #32]	; (164c <_init_chip+0x24>)
    162c:	685a      	ldr	r2, [r3, #4]
    162e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    1630:	2002      	movs	r0, #2
    1632:	4b07      	ldr	r3, [pc, #28]	; (1650 <_init_chip+0x28>)
    1634:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1636:	4b07      	ldr	r3, [pc, #28]	; (1654 <_init_chip+0x2c>)
    1638:	4798      	blx	r3
	_oscctrl_init_sources();
    163a:	4b07      	ldr	r3, [pc, #28]	; (1658 <_init_chip+0x30>)
    163c:	4798      	blx	r3
	_mclk_init();
    163e:	4b07      	ldr	r3, [pc, #28]	; (165c <_init_chip+0x34>)
    1640:	4798      	blx	r3
	_gclk_init_generators();
    1642:	4b07      	ldr	r3, [pc, #28]	; (1660 <_init_chip+0x38>)
    1644:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <_init_chip+0x3c>)
    1648:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    164a:	bd10      	pop	{r4, pc}
    164c:	41004000 	.word	0x41004000
    1650:	000018d3 	.word	0x000018d3
    1654:	00001895 	.word	0x00001895
    1658:	000018b1 	.word	0x000018b1
    165c:	00001881 	.word	0x00001881
    1660:	00001855 	.word	0x00001855
    1664:	000018d1 	.word	0x000018d1

00001668 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1668:	4923      	ldr	r1, [pc, #140]	; (16f8 <_ext_irq_init+0x90>)
    166a:	2201      	movs	r2, #1
    166c:	684b      	ldr	r3, [r1, #4]
    166e:	421a      	tst	r2, r3
    1670:	d1fc      	bne.n	166c <_ext_irq_init+0x4>
    1672:	4921      	ldr	r1, [pc, #132]	; (16f8 <_ext_irq_init+0x90>)
    1674:	2203      	movs	r2, #3
    1676:	684b      	ldr	r3, [r1, #4]
    1678:	421a      	tst	r2, r3
    167a:	d1fc      	bne.n	1676 <_ext_irq_init+0xe>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    167c:	4b1e      	ldr	r3, [pc, #120]	; (16f8 <_ext_irq_init+0x90>)
    167e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1680:	079b      	lsls	r3, r3, #30
    1682:	d436      	bmi.n	16f2 <_ext_irq_init+0x8a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1684:	491c      	ldr	r1, [pc, #112]	; (16f8 <_ext_irq_init+0x90>)
    1686:	2201      	movs	r2, #1
    1688:	684b      	ldr	r3, [r1, #4]
    168a:	421a      	tst	r2, r3
    168c:	d1fc      	bne.n	1688 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    168e:	4a1a      	ldr	r2, [pc, #104]	; (16f8 <_ext_irq_init+0x90>)
    1690:	7813      	ldrb	r3, [r2, #0]
    1692:	2101      	movs	r1, #1
    1694:	430b      	orrs	r3, r1
    1696:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1698:	0011      	movs	r1, r2
    169a:	2201      	movs	r2, #1
    169c:	684b      	ldr	r3, [r1, #4]
    169e:	421a      	tst	r2, r3
    16a0:	d1fc      	bne.n	169c <_ext_irq_init+0x34>
    16a2:	4915      	ldr	r1, [pc, #84]	; (16f8 <_ext_irq_init+0x90>)
    16a4:	2203      	movs	r2, #3
    16a6:	684b      	ldr	r3, [r1, #4]
    16a8:	421a      	tst	r2, r3
    16aa:	d1fc      	bne.n	16a6 <_ext_irq_init+0x3e>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    16ac:	4b12      	ldr	r3, [pc, #72]	; (16f8 <_ext_irq_init+0x90>)
    16ae:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    16b0:	2110      	movs	r1, #16
    16b2:	438a      	bics	r2, r1
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    16b4:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    16b6:	2200      	movs	r2, #0
    16b8:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    16ba:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    16bc:	2288      	movs	r2, #136	; 0x88
    16be:	0352      	lsls	r2, r2, #13
    16c0:	61da      	str	r2, [r3, #28]
    16c2:	4a0e      	ldr	r2, [pc, #56]	; (16fc <_ext_irq_init+0x94>)
    16c4:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16c6:	0019      	movs	r1, r3
    16c8:	2203      	movs	r2, #3
    16ca:	684b      	ldr	r3, [r1, #4]
    16cc:	421a      	tst	r2, r3
    16ce:	d1fc      	bne.n	16ca <_ext_irq_init+0x62>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    16d0:	4a09      	ldr	r2, [pc, #36]	; (16f8 <_ext_irq_init+0x90>)
    16d2:	7813      	ldrb	r3, [r2, #0]
    16d4:	2102      	movs	r1, #2
    16d6:	430b      	orrs	r3, r1
    16d8:	7013      	strb	r3, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16da:	4b09      	ldr	r3, [pc, #36]	; (1700 <_ext_irq_init+0x98>)
    16dc:	2208      	movs	r2, #8
    16de:	317e      	adds	r1, #126	; 0x7e
    16e0:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    16e2:	3101      	adds	r1, #1
    16e4:	31ff      	adds	r1, #255	; 0xff
    16e6:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16e8:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    16ea:	4b06      	ldr	r3, [pc, #24]	; (1704 <_ext_irq_init+0x9c>)
    16ec:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
    16ee:	2000      	movs	r0, #0
}
    16f0:	4770      	bx	lr
		return ERR_DENIED;
    16f2:	2011      	movs	r0, #17
    16f4:	4240      	negs	r0, r0
    16f6:	e7fb      	b.n	16f0 <_ext_irq_init+0x88>
    16f8:	40002400 	.word	0x40002400
    16fc:	11110000 	.word	0x11110000
    1700:	e000e100 	.word	0xe000e100
    1704:	20000c94 	.word	0x20000c94

00001708 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1708:	2814      	cmp	r0, #20
    170a:	d015      	beq.n	1738 <_ext_irq_enable+0x30>
    170c:	2815      	cmp	r0, #21
    170e:	d00b      	beq.n	1728 <_ext_irq_enable+0x20>
    1710:	282c      	cmp	r0, #44	; 0x2c
    1712:	d00b      	beq.n	172c <_ext_irq_enable+0x24>
    1714:	282d      	cmp	r0, #45	; 0x2d
    1716:	d00b      	beq.n	1730 <_ext_irq_enable+0x28>
    1718:	282e      	cmp	r0, #46	; 0x2e
    171a:	d00b      	beq.n	1734 <_ext_irq_enable+0x2c>
    171c:	2305      	movs	r3, #5
    171e:	282f      	cmp	r0, #47	; 0x2f
    1720:	d00b      	beq.n	173a <_ext_irq_enable+0x32>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
    1722:	2001      	movs	r0, #1
    1724:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1726:	4770      	bx	lr
		if (_map[i].pin == pin) {
    1728:	2301      	movs	r3, #1
    172a:	e006      	b.n	173a <_ext_irq_enable+0x32>
    172c:	2302      	movs	r3, #2
    172e:	e004      	b.n	173a <_ext_irq_enable+0x32>
    1730:	2303      	movs	r3, #3
    1732:	e002      	b.n	173a <_ext_irq_enable+0x32>
    1734:	2304      	movs	r3, #4
    1736:	e000      	b.n	173a <_ext_irq_enable+0x32>
    1738:	2300      	movs	r3, #0
			extint = _map[i].extint;
    173a:	00db      	lsls	r3, r3, #3
    173c:	4a0a      	ldr	r2, [pc, #40]	; (1768 <_ext_irq_enable+0x60>)
    173e:	5c9a      	ldrb	r2, [r3, r2]
	if (INVALID_EXTINT_NUMBER == extint) {
    1740:	2aff      	cmp	r2, #255	; 0xff
    1742:	d00e      	beq.n	1762 <_ext_irq_enable+0x5a>
	if (enable) {
    1744:	2900      	cmp	r1, #0
    1746:	d106      	bne.n	1756 <_ext_irq_enable+0x4e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1748:	2301      	movs	r3, #1
    174a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    174c:	4a07      	ldr	r2, [pc, #28]	; (176c <_ext_irq_enable+0x64>)
    174e:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1750:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1752:	2000      	movs	r0, #0
    1754:	e7e7      	b.n	1726 <_ext_irq_enable+0x1e>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1756:	2301      	movs	r3, #1
    1758:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    175a:	4a04      	ldr	r2, [pc, #16]	; (176c <_ext_irq_enable+0x64>)
    175c:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    175e:	2000      	movs	r0, #0
    1760:	e7e1      	b.n	1726 <_ext_irq_enable+0x1e>
		return -1;
    1762:	2001      	movs	r0, #1
    1764:	4240      	negs	r0, r0
    1766:	e7de      	b.n	1726 <_ext_irq_enable+0x1e>
    1768:	00013fcc 	.word	0x00013fcc
    176c:	40002400 	.word	0x40002400

00001770 <EIC_Handler>:

/**
* \brief EIC interrupt handler
*/
void EIC_Handler(void)
{
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	46d6      	mov	lr, sl
    1774:	464f      	mov	r7, r9
    1776:	4646      	mov	r6, r8
    1778:	b5c0      	push	{r6, r7, lr}
    177a:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    177c:	4b2f      	ldr	r3, [pc, #188]	; (183c <EIC_Handler+0xcc>)
    177e:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1780:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1782:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1784:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    1786:	4b2e      	ldr	r3, [pc, #184]	; (1840 <EIC_Handler+0xd0>)
    1788:	6818      	ldr	r0, [r3, #0]
    178a:	1e43      	subs	r3, r0, #1
    178c:	4198      	sbcs	r0, r3
    178e:	b2c0      	uxtb	r0, r0
    1790:	22f0      	movs	r2, #240	; 0xf0
    1792:	492c      	ldr	r1, [pc, #176]	; (1844 <EIC_Handler+0xd4>)
    1794:	4b2c      	ldr	r3, [pc, #176]	; (1848 <EIC_Handler+0xd8>)
    1796:	4798      	blx	r3
	while (flags) {
    1798:	9b01      	ldr	r3, [sp, #4]
    179a:	2b00      	cmp	r3, #0
    179c:	d048      	beq.n	1830 <EIC_Handler+0xc0>
    179e:	2301      	movs	r3, #1
    17a0:	425b      	negs	r3, r3
    17a2:	469a      	mov	sl, r3
		pos = ffs(flags) - 1;
    17a4:	4b29      	ldr	r3, [pc, #164]	; (184c <EIC_Handler+0xdc>)
    17a6:	4698      	mov	r8, r3
					pin = _map[middle].pin;
    17a8:	4b29      	ldr	r3, [pc, #164]	; (1850 <EIC_Handler+0xe0>)
    17aa:	4699      	mov	r9, r3
				if (_map[middle].extint == pos) {
    17ac:	001d      	movs	r5, r3
    17ae:	e038      	b.n	1822 <EIC_Handler+0xb2>
    17b0:	2303      	movs	r3, #3
					pin = _map[middle].pin;
    17b2:	00db      	lsls	r3, r3, #3
    17b4:	444b      	add	r3, r9
    17b6:	685b      	ldr	r3, [r3, #4]
    17b8:	469a      	mov	sl, r3
			if (INVALID_PIN_NUMBER != pin) {
    17ba:	4653      	mov	r3, sl
    17bc:	3301      	adds	r3, #1
    17be:	d003      	beq.n	17c8 <EIC_Handler+0x58>
				callback(pin);
    17c0:	4b1f      	ldr	r3, [pc, #124]	; (1840 <EIC_Handler+0xd0>)
    17c2:	681b      	ldr	r3, [r3, #0]
    17c4:	4650      	mov	r0, sl
    17c6:	4798      	blx	r3
			flags &= ~(1ul << pos);
    17c8:	9b01      	ldr	r3, [sp, #4]
    17ca:	2201      	movs	r2, #1
    17cc:	40a2      	lsls	r2, r4
    17ce:	4393      	bics	r3, r2
    17d0:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    17d2:	9801      	ldr	r0, [sp, #4]
    17d4:	4b1d      	ldr	r3, [pc, #116]	; (184c <EIC_Handler+0xdc>)
    17d6:	4798      	blx	r3
    17d8:	3801      	subs	r0, #1
    17da:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    17dc:	1c63      	adds	r3, r4, #1
    17de:	d018      	beq.n	1812 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
    17e0:	2c0d      	cmp	r4, #13
    17e2:	d0e5      	beq.n	17b0 <EIC_Handler+0x40>
    17e4:	270d      	movs	r7, #13
    17e6:	2203      	movs	r2, #3
    17e8:	2600      	movs	r6, #0
    17ea:	2106      	movs	r1, #6
    17ec:	20ff      	movs	r0, #255	; 0xff
    17ee:	e00b      	b.n	1808 <EIC_Handler+0x98>
					upper = middle - 1;
    17f0:	3a01      	subs	r2, #1
    17f2:	b2d1      	uxtb	r1, r2
			while (upper >= lower) {
    17f4:	428e      	cmp	r6, r1
    17f6:	d8e0      	bhi.n	17ba <EIC_Handler+0x4a>
				middle = (upper + lower) >> 1;
    17f8:	198b      	adds	r3, r1, r6
    17fa:	105b      	asrs	r3, r3, #1
    17fc:	b2da      	uxtb	r2, r3
    17fe:	4003      	ands	r3, r0
				if (_map[middle].extint == pos) {
    1800:	00df      	lsls	r7, r3, #3
    1802:	5d7f      	ldrb	r7, [r7, r5]
    1804:	42a7      	cmp	r7, r4
    1806:	d0d4      	beq.n	17b2 <EIC_Handler+0x42>
				if (_map[middle].extint < pos) {
    1808:	42bc      	cmp	r4, r7
    180a:	ddf1      	ble.n	17f0 <EIC_Handler+0x80>
					lower = middle + 1;
    180c:	3201      	adds	r2, #1
    180e:	b2d6      	uxtb	r6, r2
    1810:	e7f0      	b.n	17f4 <EIC_Handler+0x84>
	return ((Eic *)hw)->INTFLAG.reg;
    1812:	4b0a      	ldr	r3, [pc, #40]	; (183c <EIC_Handler+0xcc>)
    1814:	695a      	ldr	r2, [r3, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1816:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1818:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    181a:	615a      	str	r2, [r3, #20]
	while (flags) {
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	2b00      	cmp	r3, #0
    1820:	d006      	beq.n	1830 <EIC_Handler+0xc0>
		pos = ffs(flags) - 1;
    1822:	9801      	ldr	r0, [sp, #4]
    1824:	47c0      	blx	r8
    1826:	3801      	subs	r0, #1
    1828:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    182a:	1c63      	adds	r3, r4, #1
    182c:	d1d8      	bne.n	17e0 <EIC_Handler+0x70>
    182e:	e7f0      	b.n	1812 <EIC_Handler+0xa2>
	_ext_irq_handler();
}
    1830:	b002      	add	sp, #8
    1832:	bc1c      	pop	{r2, r3, r4}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	46a2      	mov	sl, r4
    183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    183c:	40002400 	.word	0x40002400
    1840:	20000c94 	.word	0x20000c94
    1844:	00013ffc 	.word	0x00013ffc
    1848:	000015dd 	.word	0x000015dd
    184c:	0000c9b5 	.word	0x0000c9b5
    1850:	00013fcc 	.word	0x00013fcc

00001854 <_gclk_init_generators>:
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1854:	4b06      	ldr	r3, [pc, #24]	; (1870 <_gclk_init_generators+0x1c>)
    1856:	4a07      	ldr	r2, [pc, #28]	; (1874 <_gclk_init_generators+0x20>)
    1858:	621a      	str	r2, [r3, #32]
    185a:	625a      	str	r2, [r3, #36]	; 0x24
    185c:	4906      	ldr	r1, [pc, #24]	; (1878 <_gclk_init_generators+0x24>)
    185e:	6299      	str	r1, [r3, #40]	; 0x28
    1860:	4906      	ldr	r1, [pc, #24]	; (187c <_gclk_init_generators+0x28>)
    1862:	62d9      	str	r1, [r3, #44]	; 0x2c
    1864:	631a      	str	r2, [r3, #48]	; 0x30
    1866:	635a      	str	r2, [r3, #52]	; 0x34
    1868:	639a      	str	r2, [r3, #56]	; 0x38
    186a:	63da      	str	r2, [r3, #60]	; 0x3c
	                               | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos)
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SOURCE);
#endif
}
    186c:	4770      	bx	lr
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	40001800 	.word	0x40001800
    1874:	00010106 	.word	0x00010106
    1878:	00011106 	.word	0x00011106
    187c:	00010103 	.word	0x00010103

00001880 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    1880:	4b03      	ldr	r3, [pc, #12]	; (1890 <_mclk_init+0x10>)
    1882:	2208      	movs	r2, #8
    1884:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
    1886:	3a04      	subs	r2, #4
    1888:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
    188a:	3a03      	subs	r2, #3
    188c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    188e:	4770      	bx	lr
    1890:	40000400 	.word	0x40000400

00001894 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1894:	2256      	movs	r2, #86	; 0x56
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <_osc32kctrl_init_sources+0x18>)
    1898:	615a      	str	r2, [r3, #20]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    189a:	0019      	movs	r1, r3
    189c:	3a55      	subs	r2, #85	; 0x55
    189e:	68cb      	ldr	r3, [r1, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    18a0:	421a      	tst	r2, r3
    18a2:	d0fc      	beq.n	189e <_osc32kctrl_init_sources+0xa>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    18a4:	2204      	movs	r2, #4
    18a6:	4b01      	ldr	r3, [pc, #4]	; (18ac <_osc32kctrl_init_sources+0x18>)
    18a8:	611a      	str	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    18aa:	4770      	bx	lr
    18ac:	40001000 	.word	0x40001000

000018b0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    18b0:	228e      	movs	r2, #142	; 0x8e
    18b2:	4b06      	ldr	r3, [pc, #24]	; (18cc <_oscctrl_init_sources+0x1c>)
    18b4:	751a      	strb	r2, [r3, #20]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    18b6:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    18b8:	3a7e      	subs	r2, #126	; 0x7e
    18ba:	68cb      	ldr	r3, [r1, #12]
    18bc:	421a      	tst	r2, r3
    18be:	d0fc      	beq.n	18ba <_oscctrl_init_sources+0xa>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    18c0:	4a02      	ldr	r2, [pc, #8]	; (18cc <_oscctrl_init_sources+0x1c>)
    18c2:	7d13      	ldrb	r3, [r2, #20]
    18c4:	2180      	movs	r1, #128	; 0x80
    18c6:	430b      	orrs	r3, r1
    18c8:	7513      	strb	r3, [r2, #20]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    18ca:	4770      	bx	lr
    18cc:	40000c00 	.word	0x40000c00

000018d0 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    18d0:	4770      	bx	lr

000018d2 <_set_performance_level>:
	return ((Pm *)hw)->INTFLAG.reg;
}

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
	((Pm *)hw)->INTFLAG.reg = mask;
    18d2:	2380      	movs	r3, #128	; 0x80
    18d4:	05db      	lsls	r3, r3, #23
    18d6:	22ff      	movs	r2, #255	; 0xff
    18d8:	719a      	strb	r2, [r3, #6]
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    18da:	789b      	ldrb	r3, [r3, #2]
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	hri_pm_clear_INTFLAG_reg(PM, 0xFF);
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    18dc:	3afc      	subs	r2, #252	; 0xfc
    18de:	4013      	ands	r3, r2
    18e0:	4298      	cmp	r0, r3
    18e2:	d006      	beq.n	18f2 <_set_performance_level+0x20>

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    18e4:	2180      	movs	r1, #128	; 0x80
    18e6:	05c9      	lsls	r1, r1, #23
    18e8:	788b      	ldrb	r3, [r1, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    18ea:	4393      	bics	r3, r2
	tmp |= PM_PLCFG_PLSEL(data);
    18ec:	4010      	ands	r0, r2
    18ee:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    18f0:	7088      	strb	r0, [r1, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    18f2:	2280      	movs	r2, #128	; 0x80
    18f4:	05d2      	lsls	r2, r2, #23
    18f6:	7993      	ldrb	r3, [r2, #6]
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
	}
	while (!hri_pm_read_INTFLAG_reg(PM))
    18f8:	2b00      	cmp	r3, #0
    18fa:	d0fc      	beq.n	18f6 <_set_performance_level+0x24>
		;
}
    18fc:	4770      	bx	lr
	...

00001900 <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    1900:	b570      	push	{r4, r5, r6, lr}
    1902:	b082      	sub	sp, #8
    1904:	0004      	movs	r4, r0
    1906:	000d      	movs	r5, r1
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1908:	2203      	movs	r2, #3
    190a:	69e3      	ldr	r3, [r4, #28]
    190c:	421a      	tst	r2, r3
    190e:	d1fc      	bne.n	190a <_usart_set_baud_rate+0xa>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1910:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
    1912:	07b6      	lsls	r6, r6, #30
    1914:	0ff6      	lsrs	r6, r6, #31
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1916:	2203      	movs	r2, #3
    1918:	69e3      	ldr	r3, [r4, #28]
    191a:	421a      	tst	r2, r3
    191c:	d1fc      	bne.n	1918 <_usart_set_baud_rate+0x18>

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    191e:	6823      	ldr	r3, [r4, #0]
    1920:	2202      	movs	r2, #2
    1922:	4393      	bics	r3, r2
    1924:	6023      	str	r3, [r4, #0]
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);

	CRITICAL_SECTION_ENTER()
    1926:	a801      	add	r0, sp, #4
    1928:	4b0b      	ldr	r3, [pc, #44]	; (1958 <_usart_set_baud_rate+0x58>)
    192a:	4798      	blx	r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    192c:	2202      	movs	r2, #2
    192e:	69e3      	ldr	r3, [r4, #28]
    1930:	421a      	tst	r2, r3
    1932:	d1fc      	bne.n	192e <_usart_set_baud_rate+0x2e>
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    1934:	b2ad      	uxth	r5, r5
	((Sercom *)hw)->USART.BAUD.reg = data;
    1936:	81a5      	strh	r5, [r4, #12]
	CRITICAL_SECTION_LEAVE()
    1938:	a801      	add	r0, sp, #4
    193a:	4b08      	ldr	r3, [pc, #32]	; (195c <_usart_set_baud_rate+0x5c>)
    193c:	4798      	blx	r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    193e:	2203      	movs	r2, #3
    1940:	69e3      	ldr	r3, [r4, #28]
    1942:	421a      	tst	r2, r3
    1944:	d1fc      	bne.n	1940 <_usart_set_baud_rate+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1946:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    1948:	2202      	movs	r2, #2
    194a:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    194c:	0076      	lsls	r6, r6, #1
    194e:	431e      	orrs	r6, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    1950:	6026      	str	r6, [r4, #0]

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
}
    1952:	b002      	add	sp, #8
    1954:	bd70      	pop	{r4, r5, r6, pc}
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	0000113d 	.word	0x0000113d
    195c:	0000114b 	.word	0x0000114b

00001960 <_usart_init>:
{
    1960:	b510      	push	{r4, lr}
    1962:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1964:	4b19      	ldr	r3, [pc, #100]	; (19cc <_usart_init+0x6c>)
    1966:	4298      	cmp	r0, r3
    1968:	d003      	beq.n	1972 <_usart_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    196a:	0383      	lsls	r3, r0, #14
		if (_usarts[i].number == sercom_offset) {
    196c:	0e1b      	lsrs	r3, r3, #24
    196e:	2b03      	cmp	r3, #3
    1970:	d005      	beq.n	197e <_usart_init+0x1e>
	ASSERT(false);
    1972:	2291      	movs	r2, #145	; 0x91
    1974:	0092      	lsls	r2, r2, #2
    1976:	4916      	ldr	r1, [pc, #88]	; (19d0 <_usart_init+0x70>)
    1978:	2000      	movs	r0, #0
    197a:	4b16      	ldr	r3, [pc, #88]	; (19d4 <_usart_init+0x74>)
    197c:	4798      	blx	r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    197e:	2201      	movs	r2, #1
    1980:	69e3      	ldr	r3, [r4, #28]
    1982:	421a      	tst	r2, r3
    1984:	d1fc      	bne.n	1980 <_usart_init+0x20>
    1986:	2203      	movs	r2, #3
    1988:	69e3      	ldr	r3, [r4, #28]
    198a:	421a      	tst	r2, r3
    198c:	d1fc      	bne.n	1988 <_usart_init+0x28>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    198e:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1990:	079b      	lsls	r3, r3, #30
    1992:	d417      	bmi.n	19c4 <_usart_init+0x64>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1994:	2201      	movs	r2, #1
    1996:	69e3      	ldr	r3, [r4, #28]
    1998:	421a      	tst	r2, r3
    199a:	d1fc      	bne.n	1996 <_usart_init+0x36>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    199c:	6823      	ldr	r3, [r4, #0]
    199e:	2201      	movs	r2, #1
    19a0:	4313      	orrs	r3, r2
    19a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    19a4:	69e3      	ldr	r3, [r4, #28]
    19a6:	421a      	tst	r2, r3
    19a8:	d1fc      	bne.n	19a4 <_usart_init+0x44>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    19aa:	4b0b      	ldr	r3, [pc, #44]	; (19d8 <_usart_init+0x78>)
    19ac:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    19ae:	23c0      	movs	r3, #192	; 0xc0
    19b0:	029b      	lsls	r3, r3, #10
    19b2:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
    19b4:	4b09      	ldr	r3, [pc, #36]	; (19dc <_usart_init+0x7c>)
    19b6:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    19b8:	2300      	movs	r3, #0
    19ba:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    19bc:	2230      	movs	r2, #48	; 0x30
    19be:	54a3      	strb	r3, [r4, r2]
	return ERR_NONE;
    19c0:	2000      	movs	r0, #0
}
    19c2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    19c4:	2011      	movs	r0, #17
    19c6:	4240      	negs	r0, r0
    19c8:	e7fb      	b.n	19c2 <_usart_init+0x62>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	43000400 	.word	0x43000400
    19d0:	00014050 	.word	0x00014050
    19d4:	000015dd 	.word	0x000015dd
    19d8:	40100004 	.word	0x40100004
    19dc:	fffffd8a 	.word	0xfffffd8a

000019e0 <_usart_sync_init>:
{
    19e0:	b570      	push	{r4, r5, r6, lr}
    19e2:	0005      	movs	r5, r0
    19e4:	000c      	movs	r4, r1
	ASSERT(device);
    19e6:	1e43      	subs	r3, r0, #1
    19e8:	4198      	sbcs	r0, r3
    19ea:	b2c0      	uxtb	r0, r0
    19ec:	22bf      	movs	r2, #191	; 0xbf
    19ee:	4904      	ldr	r1, [pc, #16]	; (1a00 <_usart_sync_init+0x20>)
    19f0:	4b04      	ldr	r3, [pc, #16]	; (1a04 <_usart_sync_init+0x24>)
    19f2:	4798      	blx	r3
	device->hw = hw;
    19f4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    19f6:	0020      	movs	r0, r4
    19f8:	4b03      	ldr	r3, [pc, #12]	; (1a08 <_usart_sync_init+0x28>)
    19fa:	4798      	blx	r3
}
    19fc:	bd70      	pop	{r4, r5, r6, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00014050 	.word	0x00014050
    1a04:	000015dd 	.word	0x000015dd
    1a08:	00001961 	.word	0x00001961

00001a0c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1a0c:	6802      	ldr	r2, [r0, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a0e:	2103      	movs	r1, #3
    1a10:	69d3      	ldr	r3, [r2, #28]
    1a12:	4219      	tst	r1, r3
    1a14:	d1fc      	bne.n	1a10 <_usart_sync_enable+0x4>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a16:	6813      	ldr	r3, [r2, #0]
    1a18:	2102      	movs	r1, #2
    1a1a:	430b      	orrs	r3, r1
    1a1c:	6013      	str	r3, [r2, #0]
}
    1a1e:	4770      	bx	lr

00001a20 <_usart_sync_set_baud_rate>:
{
    1a20:	b510      	push	{r4, lr}
	_usart_set_baud_rate(device->hw, baud_rate);
    1a22:	6800      	ldr	r0, [r0, #0]
    1a24:	4b01      	ldr	r3, [pc, #4]	; (1a2c <_usart_sync_set_baud_rate+0xc>)
    1a26:	4798      	blx	r3
}
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	00001901 	.word	0x00001901

00001a30 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1a30:	6803      	ldr	r3, [r0, #0]
    1a32:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1a34:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1a36:	4770      	bx	lr

00001a38 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1a38:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1a3a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1a3c:	b2c0      	uxtb	r0, r0
}
    1a3e:	4770      	bx	lr

00001a40 <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1a40:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1a42:	7e18      	ldrb	r0, [r3, #24]
    1a44:	2301      	movs	r3, #1
    1a46:	4018      	ands	r0, r3
}
    1a48:	4770      	bx	lr

00001a4a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1a4a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1a4c:	7e18      	ldrb	r0, [r3, #24]
    1a4e:	0740      	lsls	r0, r0, #29
    1a50:	0fc0      	lsrs	r0, r0, #31
}
    1a52:	4770      	bx	lr

00001a54 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1a54:	b570      	push	{r4, r5, r6, lr}
    1a56:	0006      	movs	r6, r0
    1a58:	000c      	movs	r4, r1
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1a5a:	4b4a      	ldr	r3, [pc, #296]	; (1b84 <_spi_m_sync_init+0x130>)
    1a5c:	4299      	cmp	r1, r3
    1a5e:	d00c      	beq.n	1a7a <_spi_m_sync_init+0x26>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1a60:	038b      	lsls	r3, r1, #14
		if (sercomspi_regs[i].n == n) {
    1a62:	0e1b      	lsrs	r3, r3, #24
    1a64:	2b05      	cmp	r3, #5
    1a66:	d008      	beq.n	1a7a <_spi_m_sync_init+0x26>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1a68:	2800      	cmp	r0, #0
    1a6a:	d100      	bne.n	1a6e <_spi_m_sync_init+0x1a>
    1a6c:	e079      	b.n	1b62 <_spi_m_sync_init+0x10e>
    1a6e:	2900      	cmp	r1, #0
    1a70:	d000      	beq.n	1a74 <_spi_m_sync_init+0x20>
    1a72:	e07e      	b.n	1b72 <_spi_m_sync_init+0x11e>
	return NULL;
    1a74:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    1a76:	2000      	movs	r0, #0
    1a78:	e006      	b.n	1a88 <_spi_m_sync_init+0x34>
    1a7a:	2e00      	cmp	r6, #0
    1a7c:	d04d      	beq.n	1b1a <_spi_m_sync_init+0xc6>
    1a7e:	2c00      	cmp	r4, #0
    1a80:	d048      	beq.n	1b14 <_spi_m_sync_init+0xc0>
			return &sercomspi_regs[i];
    1a82:	4d41      	ldr	r5, [pc, #260]	; (1b88 <_spi_m_sync_init+0x134>)
    1a84:	3518      	adds	r5, #24
	ASSERT(dev && hw);
    1a86:	2001      	movs	r0, #1
    1a88:	4a40      	ldr	r2, [pc, #256]	; (1b8c <_spi_m_sync_init+0x138>)
    1a8a:	4941      	ldr	r1, [pc, #260]	; (1b90 <_spi_m_sync_init+0x13c>)
    1a8c:	4b41      	ldr	r3, [pc, #260]	; (1b94 <_spi_m_sync_init+0x140>)
    1a8e:	4798      	blx	r3

	if (regs == NULL) {
    1a90:	2d00      	cmp	r5, #0
    1a92:	d060      	beq.n	1b56 <_spi_m_sync_init+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a94:	2201      	movs	r2, #1
    1a96:	69e3      	ldr	r3, [r4, #28]
    1a98:	421a      	tst	r2, r3
    1a9a:	d1fc      	bne.n	1a96 <_spi_m_sync_init+0x42>
    1a9c:	2203      	movs	r2, #3
    1a9e:	69e3      	ldr	r3, [r4, #28]
    1aa0:	421a      	tst	r2, r3
    1aa2:	d1fc      	bne.n	1a9e <_spi_m_sync_init+0x4a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1aa4:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1aa6:	079b      	lsls	r3, r3, #30
    1aa8:	d458      	bmi.n	1b5c <_spi_m_sync_init+0x108>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aaa:	2201      	movs	r2, #1
    1aac:	69e3      	ldr	r3, [r4, #28]
    1aae:	421a      	tst	r2, r3
    1ab0:	d1fc      	bne.n	1aac <_spi_m_sync_init+0x58>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1ab2:	6823      	ldr	r3, [r4, #0]
    1ab4:	2201      	movs	r2, #1
    1ab6:	4313      	orrs	r3, r2
    1ab8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aba:	69e3      	ldr	r3, [r4, #28]
    1abc:	421a      	tst	r2, r3
    1abe:	d1fc      	bne.n	1aba <_spi_m_sync_init+0x66>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
    1ac0:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1ac2:	231c      	movs	r3, #28
    1ac4:	682a      	ldr	r2, [r5, #0]
    1ac6:	4013      	ands	r3, r2
    1ac8:	2b08      	cmp	r3, #8
    1aca:	d029      	beq.n	1b20 <_spi_m_sync_init+0xcc>
	ASSERT(hw && regs);
    1acc:	0020      	movs	r0, r4
    1ace:	1e43      	subs	r3, r0, #1
    1ad0:	4198      	sbcs	r0, r3
    1ad2:	b2c0      	uxtb	r0, r0
    1ad4:	228e      	movs	r2, #142	; 0x8e
    1ad6:	0112      	lsls	r2, r2, #4
    1ad8:	492d      	ldr	r1, [pc, #180]	; (1b90 <_spi_m_sync_init+0x13c>)
    1ada:	4b2e      	ldr	r3, [pc, #184]	; (1b94 <_spi_m_sync_init+0x140>)
    1adc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
    1ade:	4b2e      	ldr	r3, [pc, #184]	; (1b98 <_spi_m_sync_init+0x144>)
    1ae0:	682a      	ldr	r2, [r5, #0]
    1ae2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ae4:	6023      	str	r3, [r4, #0]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1ae6:	4a2d      	ldr	r2, [pc, #180]	; (1b9c <_spi_m_sync_init+0x148>)
    1ae8:	686b      	ldr	r3, [r5, #4]
    1aea:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	029b      	lsls	r3, r3, #10
    1af0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1af2:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1af4:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1af6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1af8:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1afa:	2330      	movs	r3, #48	; 0x30
    1afc:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1afe:	2307      	movs	r3, #7
    1b00:	686a      	ldr	r2, [r5, #4]
    1b02:	4013      	ands	r3, r2
    1b04:	1e5a      	subs	r2, r3, #1
    1b06:	4193      	sbcs	r3, r2
    1b08:	3301      	adds	r3, #1
    1b0a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1b0c:	89eb      	ldrh	r3, [r5, #14]
    1b0e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1b10:	2000      	movs	r0, #0
}
    1b12:	bd70      	pop	{r4, r5, r6, pc}
			return &sercomspi_regs[i];
    1b14:	4d1c      	ldr	r5, [pc, #112]	; (1b88 <_spi_m_sync_init+0x134>)
    1b16:	3518      	adds	r5, #24
    1b18:	e7ad      	b.n	1a76 <_spi_m_sync_init+0x22>
    1b1a:	4d1b      	ldr	r5, [pc, #108]	; (1b88 <_spi_m_sync_init+0x134>)
    1b1c:	3518      	adds	r5, #24
    1b1e:	e7aa      	b.n	1a76 <_spi_m_sync_init+0x22>
	ASSERT(hw && regs);
    1b20:	0020      	movs	r0, r4
    1b22:	1e43      	subs	r3, r0, #1
    1b24:	4198      	sbcs	r0, r3
    1b26:	b2c0      	uxtb	r0, r0
    1b28:	4a1d      	ldr	r2, [pc, #116]	; (1ba0 <_spi_m_sync_init+0x14c>)
    1b2a:	4919      	ldr	r1, [pc, #100]	; (1b90 <_spi_m_sync_init+0x13c>)
    1b2c:	4b19      	ldr	r3, [pc, #100]	; (1b94 <_spi_m_sync_init+0x140>)
    1b2e:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
    1b30:	4b19      	ldr	r3, [pc, #100]	; (1b98 <_spi_m_sync_init+0x144>)
    1b32:	682a      	ldr	r2, [r5, #0]
    1b34:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b36:	6023      	str	r3, [r4, #0]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1b38:	4a1a      	ldr	r2, [pc, #104]	; (1ba4 <_spi_m_sync_init+0x150>)
    1b3a:	686b      	ldr	r3, [r5, #4]
    1b3c:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(hw,
    1b3e:	4b1a      	ldr	r3, [pc, #104]	; (1ba8 <_spi_m_sync_init+0x154>)
    1b40:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1b42:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1b44:	68ab      	ldr	r3, [r5, #8]
    1b46:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1b48:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b4a:	2330      	movs	r3, #48	; 0x30
    1b4c:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b4e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1b50:	2b00      	cmp	r3, #0
    1b52:	d1fc      	bne.n	1b4e <_spi_m_sync_init+0xfa>
    1b54:	e7d3      	b.n	1afe <_spi_m_sync_init+0xaa>
		return ERR_INVALID_ARG;
    1b56:	200d      	movs	r0, #13
    1b58:	4240      	negs	r0, r0
    1b5a:	e7da      	b.n	1b12 <_spi_m_sync_init+0xbe>
		return ERR_DENIED;
    1b5c:	2011      	movs	r0, #17
    1b5e:	4240      	negs	r0, r0
    1b60:	e7d7      	b.n	1b12 <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    1b62:	4a0a      	ldr	r2, [pc, #40]	; (1b8c <_spi_m_sync_init+0x138>)
    1b64:	490a      	ldr	r1, [pc, #40]	; (1b90 <_spi_m_sync_init+0x13c>)
    1b66:	2000      	movs	r0, #0
    1b68:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <_spi_m_sync_init+0x140>)
    1b6a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1b6c:	200d      	movs	r0, #13
    1b6e:	4240      	negs	r0, r0
    1b70:	e7cf      	b.n	1b12 <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    1b72:	4a06      	ldr	r2, [pc, #24]	; (1b8c <_spi_m_sync_init+0x138>)
    1b74:	4906      	ldr	r1, [pc, #24]	; (1b90 <_spi_m_sync_init+0x13c>)
    1b76:	2001      	movs	r0, #1
    1b78:	4b06      	ldr	r3, [pc, #24]	; (1b94 <_spi_m_sync_init+0x140>)
    1b7a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1b7c:	200d      	movs	r0, #13
    1b7e:	4240      	negs	r0, r0
    1b80:	e7c7      	b.n	1b12 <_spi_m_sync_init+0xbe>
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	43000400 	.word	0x43000400
    1b88:	00014024 	.word	0x00014024
    1b8c:	00000916 	.word	0x00000916
    1b90:	00014050 	.word	0x00014050
    1b94:	000015dd 	.word	0x000015dd
    1b98:	fffffefc 	.word	0xfffffefc
    1b9c:	fffd1dbf 	.word	0xfffd1dbf
    1ba0:	000008f4 	.word	0x000008f4
    1ba4:	fffdddbf 	.word	0xfffdddbf
    1ba8:	00020240 	.word	0x00020240

00001bac <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bae:	46de      	mov	lr, fp
    1bb0:	4657      	mov	r7, sl
    1bb2:	464e      	mov	r6, r9
    1bb4:	4645      	mov	r5, r8
    1bb6:	b5e0      	push	{r5, r6, r7, lr}
    1bb8:	b083      	sub	sp, #12
    1bba:	4681      	mov	r9, r0
    1bbc:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    1bbe:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1bc0:	680b      	ldr	r3, [r1, #0]
    1bc2:	4698      	mov	r8, r3
    1bc4:	684d      	ldr	r5, [r1, #4]
    1bc6:	7903      	ldrb	r3, [r0, #4]
    1bc8:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    1bca:	2800      	cmp	r0, #0
    1bcc:	d015      	beq.n	1bfa <_spi_m_sync_trans+0x4e>
    1bce:	0020      	movs	r0, r4
    1bd0:	1e43      	subs	r3, r0, #1
    1bd2:	4198      	sbcs	r0, r3
    1bd4:	b2c0      	uxtb	r0, r0
    1bd6:	4a36      	ldr	r2, [pc, #216]	; (1cb0 <_spi_m_sync_trans+0x104>)
    1bd8:	4936      	ldr	r1, [pc, #216]	; (1cb4 <_spi_m_sync_trans+0x108>)
    1bda:	4b37      	ldr	r3, [pc, #220]	; (1cb8 <_spi_m_sync_trans+0x10c>)
    1bdc:	4798      	blx	r3
    1bde:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1be0:	075b      	lsls	r3, r3, #29
    1be2:	d13f      	bne.n	1c64 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1be4:	2303      	movs	r3, #3
    1be6:	69e0      	ldr	r0, [r4, #28]
    1be8:	4018      	ands	r0, r3
    1bea:	d1fc      	bne.n	1be6 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1bec:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1bee:	079b      	lsls	r3, r3, #30
    1bf0:	d53b      	bpl.n	1c6a <_spi_m_sync_trans+0xbe>
    1bf2:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1bf4:	2301      	movs	r3, #1
    1bf6:	469c      	mov	ip, r3
    1bf8:	e009      	b.n	1c0e <_spi_m_sync_trans+0x62>
    1bfa:	2000      	movs	r0, #0
    1bfc:	e7eb      	b.n	1bd6 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    1bfe:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1c00:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1c02:	b25b      	sxtb	r3, r3
    1c04:	2b00      	cmp	r3, #0
    1c06:	db16      	blt.n	1c36 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1c08:	68b3      	ldr	r3, [r6, #8]
    1c0a:	4283      	cmp	r3, r0
    1c0c:	d927      	bls.n	1c5e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1c0e:	7e23      	ldrb	r3, [r4, #24]
    1c10:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1c12:	2104      	movs	r1, #4
    1c14:	4219      	tst	r1, r3
    1c16:	d02b      	beq.n	1c70 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1c18:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1c1a:	2d00      	cmp	r5, #0
    1c1c:	d0f0      	beq.n	1c00 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    1c1e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1c20:	9901      	ldr	r1, [sp, #4]
    1c22:	2901      	cmp	r1, #1
    1c24:	d9eb      	bls.n	1bfe <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1c26:	0a3f      	lsrs	r7, r7, #8
    1c28:	706f      	strb	r7, [r5, #1]
    1c2a:	3502      	adds	r5, #2
    1c2c:	e7e8      	b.n	1c00 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1c2e:	2101      	movs	r1, #1
    1c30:	468b      	mov	fp, r1
    1c32:	44d8      	add	r8, fp
    1c34:	e037      	b.n	1ca6 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1c36:	2301      	movs	r3, #1
    1c38:	425b      	negs	r3, r3
    1c3a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1c3c:	3381      	adds	r3, #129	; 0x81
    1c3e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1c40:	2013      	movs	r0, #19
    1c42:	4240      	negs	r0, r0
	tmp &= mask;
    1c44:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1c46:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1c48:	4213      	tst	r3, r2
    1c4a:	d0fc      	beq.n	1c46 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1c4c:	2303      	movs	r3, #3
    1c4e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1c50:	b003      	add	sp, #12
    1c52:	bc3c      	pop	{r2, r3, r4, r5}
    1c54:	4690      	mov	r8, r2
    1c56:	4699      	mov	r9, r3
    1c58:	46a2      	mov	sl, r4
    1c5a:	46ab      	mov	fp, r5
    1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1c5e:	4293      	cmp	r3, r2
    1c60:	d8d5      	bhi.n	1c0e <_spi_m_sync_trans+0x62>
    1c62:	e7ef      	b.n	1c44 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1c64:	2004      	movs	r0, #4
    1c66:	4240      	negs	r0, r0
    1c68:	e7f2      	b.n	1c50 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1c6a:	2014      	movs	r0, #20
    1c6c:	4240      	negs	r0, r0
    1c6e:	e7ef      	b.n	1c50 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1c70:	4290      	cmp	r0, r2
    1c72:	d8c6      	bhi.n	1c02 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1c74:	4667      	mov	r7, ip
    1c76:	421f      	tst	r7, r3
    1c78:	d0c3      	beq.n	1c02 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1c7a:	464f      	mov	r7, r9
    1c7c:	88ff      	ldrh	r7, [r7, #6]
    1c7e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    1c80:	4647      	mov	r7, r8
    1c82:	2f00      	cmp	r7, #0
    1c84:	d00f      	beq.n	1ca6 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1c86:	783f      	ldrb	r7, [r7, #0]
    1c88:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    1c8a:	9901      	ldr	r1, [sp, #4]
    1c8c:	2901      	cmp	r1, #1
    1c8e:	d9ce      	bls.n	1c2e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    1c90:	4647      	mov	r7, r8
    1c92:	787f      	ldrb	r7, [r7, #1]
    1c94:	023f      	lsls	r7, r7, #8
    1c96:	46bb      	mov	fp, r7
    1c98:	4657      	mov	r7, sl
    1c9a:	4659      	mov	r1, fp
    1c9c:	430f      	orrs	r7, r1
    1c9e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    1ca0:	2102      	movs	r1, #2
    1ca2:	468b      	mov	fp, r1
    1ca4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    1ca6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1ca8:	4657      	mov	r7, sl
    1caa:	62a7      	str	r7, [r4, #40]	; 0x28
    1cac:	e7a9      	b.n	1c02 <_spi_m_sync_trans+0x56>
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	00000a72 	.word	0x00000a72
    1cb4:	00014050 	.word	0x00014050
    1cb8:	000015dd 	.word	0x000015dd

00001cbc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1cbc:	4b02      	ldr	r3, [pc, #8]	; (1cc8 <_delay_init+0xc>)
    1cbe:	4a03      	ldr	r2, [pc, #12]	; (1ccc <_delay_init+0x10>)
    1cc0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1cc2:	2205      	movs	r2, #5
    1cc4:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    1cc6:	4770      	bx	lr
    1cc8:	e000e010 	.word	0xe000e010
    1ccc:	00ffffff 	.word	0x00ffffff

00001cd0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1cd0:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1cd2:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1cd4:	1e5e      	subs	r6, r3, #1
    1cd6:	b2f6      	uxtb	r6, r6
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d013      	beq.n	1d04 <_delay_cycles+0x34>
    1cdc:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1cde:	4a0e      	ldr	r2, [pc, #56]	; (1d18 <_delay_cycles+0x48>)
    1ce0:	4d0e      	ldr	r5, [pc, #56]	; (1d1c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ce2:	2080      	movs	r0, #128	; 0x80
    1ce4:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1ce6:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1ce8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1cea:	6813      	ldr	r3, [r2, #0]
    1cec:	4203      	tst	r3, r0
    1cee:	d0fc      	beq.n	1cea <_delay_cycles+0x1a>
	while (n--) {
    1cf0:	3c01      	subs	r4, #1
    1cf2:	b2e4      	uxtb	r4, r4
    1cf4:	2cff      	cmp	r4, #255	; 0xff
    1cf6:	d1f6      	bne.n	1ce6 <_delay_cycles+0x16>
    1cf8:	0633      	lsls	r3, r6, #24
    1cfa:	1af6      	subs	r6, r6, r3
    1cfc:	4b08      	ldr	r3, [pc, #32]	; (1d20 <_delay_cycles+0x50>)
    1cfe:	469c      	mov	ip, r3
    1d00:	4461      	add	r1, ip
    1d02:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1d04:	4b04      	ldr	r3, [pc, #16]	; (1d18 <_delay_cycles+0x48>)
    1d06:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1d08:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1d0a:	0019      	movs	r1, r3
    1d0c:	2280      	movs	r2, #128	; 0x80
    1d0e:	0252      	lsls	r2, r2, #9
    1d10:	680b      	ldr	r3, [r1, #0]
    1d12:	4213      	tst	r3, r2
    1d14:	d0fc      	beq.n	1d10 <_delay_cycles+0x40>
		;
}
    1d16:	bd70      	pop	{r4, r5, r6, pc}
    1d18:	e000e010 	.word	0xe000e010
    1d1c:	00ffffff 	.word	0x00ffffff
    1d20:	ff000001 	.word	0xff000001

00001d24 <HwTimerInit>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1d24:	4a15      	ldr	r2, [pc, #84]	; (1d7c <HwTimerInit+0x58>)
    1d26:	6951      	ldr	r1, [r2, #20]
    1d28:	2380      	movs	r3, #128	; 0x80
    1d2a:	005b      	lsls	r3, r3, #1
    1d2c:	430b      	orrs	r3, r1
    1d2e:	6153      	str	r3, [r2, #20]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d30:	2201      	movs	r2, #1
    1d32:	4b13      	ldr	r3, [pc, #76]	; (1d80 <HwTimerInit+0x5c>)
    1d34:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d36:	0019      	movs	r1, r3
    1d38:	690b      	ldr	r3, [r1, #16]
    1d3a:	421a      	tst	r2, r3
    1d3c:	d1fc      	bne.n	1d38 <HwTimerInit+0x14>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1d3e:	4b10      	ldr	r3, [pc, #64]	; (1d80 <HwTimerInit+0x5c>)
    1d40:	4a10      	ldr	r2, [pc, #64]	; (1d84 <HwTimerInit+0x60>)
    1d42:	801a      	strh	r2, [r3, #0]
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	0052      	lsls	r2, r2, #1
    1d48:	605a      	str	r2, [r3, #4]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1d4a:	2101      	movs	r1, #1
    1d4c:	4249      	negs	r1, r1
    1d4e:	6219      	str	r1, [r3, #32]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1d50:	815a      	strh	r2, [r3, #10]
    1d52:	3105      	adds	r1, #5
    1d54:	4a0c      	ldr	r2, [pc, #48]	; (1d88 <HwTimerInit+0x64>)
    1d56:	6011      	str	r1, [r2, #0]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1d58:	2200      	movs	r2, #0
    1d5a:	619a      	str	r2, [r3, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d5c:	0019      	movs	r1, r3
    1d5e:	3208      	adds	r2, #8
    1d60:	690b      	ldr	r3, [r1, #16]
    1d62:	421a      	tst	r2, r3
    1d64:	d1fc      	bne.n	1d60 <HwTimerInit+0x3c>
    1d66:	4906      	ldr	r1, [pc, #24]	; (1d80 <HwTimerInit+0x5c>)
    1d68:	4a08      	ldr	r2, [pc, #32]	; (1d8c <HwTimerInit+0x68>)
    1d6a:	690b      	ldr	r3, [r1, #16]
    1d6c:	4213      	tst	r3, r2
    1d6e:	d1fc      	bne.n	1d6a <HwTimerInit+0x46>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1d70:	4a03      	ldr	r2, [pc, #12]	; (1d80 <HwTimerInit+0x5c>)
    1d72:	8813      	ldrh	r3, [r2, #0]
    1d74:	2102      	movs	r1, #2
    1d76:	430b      	orrs	r3, r1
    1d78:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(RTC_IRQn);
    hri_rtcmode0_write_COUNT_reg(RTC, 0);
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    hri_rtcmode0_set_CTRLA_ENABLE_bit(RTC);
}
    1d7a:	4770      	bx	lr
    1d7c:	40000400 	.word	0x40000400
    1d80:	40002000 	.word	0x40002000
    1d84:	ffff8000 	.word	0xffff8000
    1d88:	e000e100 	.word	0xe000e100
    1d8c:	00008003 	.word	0x00008003

00001d90 <HwTimerAlarmSetCallback>:
* expires.
* \param callback Callback to be registered
*/
void HwTimerAlarmSetCallback(HwTimerCallback_t callback)
{
    HwTimerAlarmCallback = callback;
    1d90:	4b01      	ldr	r3, [pc, #4]	; (1d98 <HwTimerAlarmSetCallback+0x8>)
    1d92:	6018      	str	r0, [r3, #0]
}
    1d94:	4770      	bx	lr
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	20000c98 	.word	0x20000c98

00001d9c <HwTimerOverflowSetCallback>:
* overflows.
* \param callback Callback to be registered
*/
void HwTimerOverflowSetCallback(HwTimerCallback_t callback)
{
    HwTimerOverflowCallback = callback;
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <HwTimerOverflowSetCallback+0x8>)
    1d9e:	6058      	str	r0, [r3, #4]
}
    1da0:	4770      	bx	lr
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	20000c98 	.word	0x20000c98

00001da8 <HwTimerLoadAbsoluteTicks>:
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1da8:	4b09      	ldr	r3, [pc, #36]	; (1dd0 <HwTimerLoadAbsoluteTicks+0x28>)
    1daa:	6218      	str	r0, [r3, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dac:	0019      	movs	r1, r3
    1dae:	4a09      	ldr	r2, [pc, #36]	; (1dd4 <HwTimerLoadAbsoluteTicks+0x2c>)
    1db0:	690b      	ldr	r3, [r1, #16]
    1db2:	4213      	tst	r3, r2
    1db4:	d1fc      	bne.n	1db0 <HwTimerLoadAbsoluteTicks+0x8>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    1db6:	4b06      	ldr	r3, [pc, #24]	; (1dd0 <HwTimerLoadAbsoluteTicks+0x28>)
    1db8:	699b      	ldr	r3, [r3, #24]
    hri_rtcmode0_write_COMP_reg(RTC, 0, ticks);
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_MASK);
    uint32_t current = hri_rtcmode0_read_COUNT_reg(RTC);
    RTC_CRITICAL_SECTION_LEAVE();

    if((ticks - current - 1) >= (COMPARE_COUNT_MAX_VALUE >> 1)) {
    1dba:	1ac3      	subs	r3, r0, r3
    1dbc:	1e59      	subs	r1, r3, #1
    1dbe:	4a06      	ldr	r2, [pc, #24]	; (1dd8 <HwTimerLoadAbsoluteTicks+0x30>)
        // if difference is more than half of max assume timer has passed
        return false;
    1dc0:	2000      	movs	r0, #0
    if((ticks - current - 1) >= (COMPARE_COUNT_MAX_VALUE >> 1)) {
    1dc2:	4291      	cmp	r1, r2
    1dc4:	d803      	bhi.n	1dce <HwTimerLoadAbsoluteTicks+0x26>
    }
    if((ticks - current) < 10) {
    1dc6:	3009      	adds	r0, #9
    1dc8:	4298      	cmp	r0, r3
    1dca:	4180      	sbcs	r0, r0
    1dcc:	4240      	negs	r0, r0
        // if too close the matching interrupt does not trigger, so handle same as passed
        return false;
    }
    return true;
}
    1dce:	4770      	bx	lr
    1dd0:	40002000 	.word	0x40002000
    1dd4:	0000802f 	.word	0x0000802f
    1dd8:	7ffffffe 	.word	0x7ffffffe

00001ddc <HwTimerGetTime>:
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1ddc:	4903      	ldr	r1, [pc, #12]	; (1dec <HwTimerGetTime+0x10>)
    1dde:	2208      	movs	r2, #8
    1de0:	690b      	ldr	r3, [r1, #16]
    1de2:	421a      	tst	r2, r3
    1de4:	d1fc      	bne.n	1de0 <HwTimerGetTime+0x4>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    1de6:	4b01      	ldr	r3, [pc, #4]	; (1dec <HwTimerGetTime+0x10>)
    1de8:	6998      	ldr	r0, [r3, #24]
*/
uint32_t HwTimerGetTime(void)
{
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    return hri_rtcmode0_read_COUNT_reg(RTC);
}
    1dea:	4770      	bx	lr
    1dec:	40002000 	.word	0x40002000

00001df0 <RTC_Handler>:

/**
* \brief Rtc interrupt handler
*/
void RTC_Handler(void)
{
    1df0:	b510      	push	{r4, lr}
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1df2:	4b0d      	ldr	r3, [pc, #52]	; (1e28 <RTC_Handler+0x38>)
    1df4:	899b      	ldrh	r3, [r3, #12]
    1df6:	b29b      	uxth	r3, r3
    /* Read and mask interrupt flag register */
    uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(RTC);

    if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1df8:	05da      	lsls	r2, r3, #23
    1dfa:	d509      	bpl.n	1e10 <RTC_Handler+0x20>
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1dfc:	2280      	movs	r2, #128	; 0x80
    1dfe:	0052      	lsls	r2, r2, #1
    1e00:	4b09      	ldr	r3, [pc, #36]	; (1e28 <RTC_Handler+0x38>)
    1e02:	819a      	strh	r2, [r3, #12]
#if defined( USE_HWTMR_DEBUG )
        GpioWrite( &DbgHwTmrPin, 0 );
#endif
        hri_rtcmode0_clear_interrupt_CMP0_bit(RTC);
        if (HwTimerAlarmCallback != NULL) {
    1e04:	4b09      	ldr	r3, [pc, #36]	; (1e2c <RTC_Handler+0x3c>)
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d000      	beq.n	1e0e <RTC_Handler+0x1e>
            HwTimerAlarmCallback();
    1e0c:	4798      	blx	r3
        if (HwTimerOverflowCallback != NULL) {
            HwTimerOverflowCallback();
        }
    }

}
    1e0e:	bd10      	pop	{r4, pc}
    else if ( flag & RTC_MODE0_INTFLAG_OVF) {
    1e10:	b21b      	sxth	r3, r3
    1e12:	2b00      	cmp	r3, #0
    1e14:	dafb      	bge.n	1e0e <RTC_Handler+0x1e>
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    1e16:	4a06      	ldr	r2, [pc, #24]	; (1e30 <RTC_Handler+0x40>)
    1e18:	4b03      	ldr	r3, [pc, #12]	; (1e28 <RTC_Handler+0x38>)
    1e1a:	819a      	strh	r2, [r3, #12]
        if (HwTimerOverflowCallback != NULL) {
    1e1c:	4b03      	ldr	r3, [pc, #12]	; (1e2c <RTC_Handler+0x3c>)
    1e1e:	685b      	ldr	r3, [r3, #4]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d0f4      	beq.n	1e0e <RTC_Handler+0x1e>
            HwTimerOverflowCallback();
    1e24:	4798      	blx	r3
}
    1e26:	e7f2      	b.n	1e0e <RTC_Handler+0x1e>
    1e28:	40002000 	.word	0x40002000
    1e2c:	20000c98 	.word	0x20000c98
    1e30:	ffff8000 	.word	0xffff8000

00001e34 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
    1e34:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
    1e36:	4b06      	ldr	r3, [pc, #24]	; (1e50 <rand1+0x1c>)
    1e38:	4806      	ldr	r0, [pc, #24]	; (1e54 <rand1+0x20>)
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	4350      	muls	r0, r2
    1e3e:	4a06      	ldr	r2, [pc, #24]	; (1e58 <rand1+0x24>)
    1e40:	4694      	mov	ip, r2
    1e42:	4460      	add	r0, ip
    1e44:	6018      	str	r0, [r3, #0]
    1e46:	4905      	ldr	r1, [pc, #20]	; (1e5c <rand1+0x28>)
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <rand1+0x2c>)
    1e4a:	4798      	blx	r3
}
    1e4c:	0008      	movs	r0, r1
    1e4e:	bd10      	pop	{r4, pc}
    1e50:	20000108 	.word	0x20000108
    1e54:	41c64e6d 	.word	0x41c64e6d
    1e58:	00003039 	.word	0x00003039
    1e5c:	7fffffff 	.word	0x7fffffff
    1e60:	0000c719 	.word	0x0000c719

00001e64 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
    1e64:	4b01      	ldr	r3, [pc, #4]	; (1e6c <srand1+0x8>)
    1e66:	6018      	str	r0, [r3, #0]
}
    1e68:	4770      	bx	lr
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	20000108 	.word	0x20000108

00001e70 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
    1e70:	b570      	push	{r4, r5, r6, lr}
    1e72:	0005      	movs	r5, r0
    1e74:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
    1e76:	4b04      	ldr	r3, [pc, #16]	; (1e88 <randr+0x18>)
    1e78:	4798      	blx	r3
    1e7a:	1b61      	subs	r1, r4, r5
    1e7c:	3101      	adds	r1, #1
    1e7e:	4b03      	ldr	r3, [pc, #12]	; (1e8c <randr+0x1c>)
    1e80:	4798      	blx	r3
    1e82:	1948      	adds	r0, r1, r5
}
    1e84:	bd70      	pop	{r4, r5, r6, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00001e35 	.word	0x00001e35
    1e8c:	0000c8ed 	.word	0x0000c8ed

00001e90 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    1e90:	b510      	push	{r4, lr}
    while( size-- )
    1e92:	1e54      	subs	r4, r2, #1
    1e94:	b2a4      	uxth	r4, r4
    1e96:	2a00      	cmp	r2, #0
    1e98:	d006      	beq.n	1ea8 <memcpy1+0x18>
    1e9a:	3401      	adds	r4, #1
    1e9c:	2300      	movs	r3, #0
    {
        *dst++ = *src++;
    1e9e:	5cca      	ldrb	r2, [r1, r3]
    1ea0:	54c2      	strb	r2, [r0, r3]
    1ea2:	3301      	adds	r3, #1
    while( size-- )
    1ea4:	42a3      	cmp	r3, r4
    1ea6:	d1fa      	bne.n	1e9e <memcpy1+0xe>
    }
}
    1ea8:	bd10      	pop	{r4, pc}

00001eaa <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    1eaa:	1e53      	subs	r3, r2, #1
    1eac:	18c0      	adds	r0, r0, r3
    while( size-- )
    1eae:	b29b      	uxth	r3, r3
    1eb0:	2a00      	cmp	r2, #0
    1eb2:	d007      	beq.n	1ec4 <memcpyr+0x1a>
    1eb4:	43da      	mvns	r2, r3
    1eb6:	1882      	adds	r2, r0, r2
    {
        *dst-- = *src++;
    1eb8:	3801      	subs	r0, #1
    1eba:	780b      	ldrb	r3, [r1, #0]
    1ebc:	7043      	strb	r3, [r0, #1]
    1ebe:	3101      	adds	r1, #1
    while( size-- )
    1ec0:	4290      	cmp	r0, r2
    1ec2:	d1f9      	bne.n	1eb8 <memcpyr+0xe>
    }
}
    1ec4:	4770      	bx	lr

00001ec6 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    1ec6:	b510      	push	{r4, lr}
    while( size-- )
    1ec8:	1e54      	subs	r4, r2, #1
    1eca:	b2a4      	uxth	r4, r4
    1ecc:	2a00      	cmp	r2, #0
    1ece:	d006      	beq.n	1ede <memset1+0x18>
    1ed0:	0003      	movs	r3, r0
    1ed2:	3401      	adds	r4, #1
    1ed4:	1900      	adds	r0, r0, r4
    {
        *dst++ = value;
    1ed6:	7019      	strb	r1, [r3, #0]
    1ed8:	3301      	adds	r3, #1
    while( size-- )
    1eda:	4283      	cmp	r3, r0
    1edc:	d1fb      	bne.n	1ed6 <memset1+0x10>
    }
}
    1ede:	bd10      	pop	{r4, pc}

00001ee0 <RtcOverflowIrq>:
}

static void RtcOverflowIrq( void )
{
    //RtcTimerContext.Time += ( uint64_t )( 1 << 32 );
}
    1ee0:	4770      	bx	lr
	...

00001ee4 <RtcAlarmIrq>:
{
    1ee4:	b510      	push	{r4, lr}
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    1ee6:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <RtcAlarmIrq+0x10>)
    1ee8:	2200      	movs	r2, #0
    1eea:	609a      	str	r2, [r3, #8]
    RtcTimeoutPendingInterrupt = false;
    1eec:	731a      	strb	r2, [r3, #12]
    TimerIrqHandler( );
    1eee:	4b02      	ldr	r3, [pc, #8]	; (1ef8 <RtcAlarmIrq+0x14>)
    1ef0:	4798      	blx	r3
}
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	20000ca0 	.word	0x20000ca0
    1ef8:	0000c105 	.word	0x0000c105

00001efc <RtcSetTimerContext>:
{
    1efc:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )HwTimerGetTime( );
    1efe:	4b02      	ldr	r3, [pc, #8]	; (1f08 <RtcSetTimerContext+0xc>)
    1f00:	4798      	blx	r3
    1f02:	4b02      	ldr	r3, [pc, #8]	; (1f0c <RtcSetTimerContext+0x10>)
    1f04:	6018      	str	r0, [r3, #0]
}
    1f06:	bd10      	pop	{r4, pc}
    1f08:	00001ddd 	.word	0x00001ddd
    1f0c:	20000ca0 	.word	0x20000ca0

00001f10 <RtcInit>:
{
    1f10:	b510      	push	{r4, lr}
    if( RtcInitialized == false )
    1f12:	4b0a      	ldr	r3, [pc, #40]	; (1f3c <RtcInit+0x2c>)
    1f14:	7b5b      	ldrb	r3, [r3, #13]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d000      	beq.n	1f1c <RtcInit+0xc>
}
    1f1a:	bd10      	pop	{r4, pc}
        HwTimerInit( );
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <RtcInit+0x30>)
    1f1e:	4798      	blx	r3
        HwTimerAlarmSetCallback( RtcAlarmIrq );
    1f20:	4808      	ldr	r0, [pc, #32]	; (1f44 <RtcInit+0x34>)
    1f22:	4b09      	ldr	r3, [pc, #36]	; (1f48 <RtcInit+0x38>)
    1f24:	4798      	blx	r3
        HwTimerOverflowSetCallback( RtcOverflowIrq );
    1f26:	4809      	ldr	r0, [pc, #36]	; (1f4c <RtcInit+0x3c>)
    1f28:	4b09      	ldr	r3, [pc, #36]	; (1f50 <RtcInit+0x40>)
    1f2a:	4798      	blx	r3
        RtcTimerContext.AlarmState = ALARM_STOPPED;
    1f2c:	4c03      	ldr	r4, [pc, #12]	; (1f3c <RtcInit+0x2c>)
    1f2e:	2300      	movs	r3, #0
    1f30:	60a3      	str	r3, [r4, #8]
        RtcSetTimerContext( );
    1f32:	4b08      	ldr	r3, [pc, #32]	; (1f54 <RtcInit+0x44>)
    1f34:	4798      	blx	r3
        RtcInitialized = true;
    1f36:	2301      	movs	r3, #1
    1f38:	7363      	strb	r3, [r4, #13]
}
    1f3a:	e7ee      	b.n	1f1a <RtcInit+0xa>
    1f3c:	20000ca0 	.word	0x20000ca0
    1f40:	00001d25 	.word	0x00001d25
    1f44:	00001ee5 	.word	0x00001ee5
    1f48:	00001d91 	.word	0x00001d91
    1f4c:	00001ee1 	.word	0x00001ee1
    1f50:	00001d9d 	.word	0x00001d9d
    1f54:	00001efd 	.word	0x00001efd

00001f58 <RtcGetTimerContext>:
    return RtcTimerContext.Time;
    1f58:	4b01      	ldr	r3, [pc, #4]	; (1f60 <RtcGetTimerContext+0x8>)
    1f5a:	6818      	ldr	r0, [r3, #0]
}
    1f5c:	4770      	bx	lr
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	20000ca0 	.word	0x20000ca0

00001f64 <RtcGetMinimumTimeout>:
}
    1f64:	2003      	movs	r0, #3
    1f66:	4770      	bx	lr

00001f68 <RtcMs2Tick>:
}
    1f68:	4770      	bx	lr

00001f6a <RtcTick2Ms>:
    tick = tick & 0x3FF;
    1f6a:	0583      	lsls	r3, r0, #22
    1f6c:	0d9b      	lsrs	r3, r3, #22
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> 10 ) );
    1f6e:	22fa      	movs	r2, #250	; 0xfa
    1f70:	0092      	lsls	r2, r2, #2
    1f72:	4353      	muls	r3, r2
    1f74:	0a9b      	lsrs	r3, r3, #10
    uint32_t seconds = tick >> 10;
    1f76:	0a80      	lsrs	r0, r0, #10
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> 10 ) );
    1f78:	4350      	muls	r0, r2
    1f7a:	1818      	adds	r0, r3, r0
}
    1f7c:	4770      	bx	lr
	...

00001f80 <RtcStopAlarm>:
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    1f80:	2200      	movs	r2, #0
    1f82:	4b01      	ldr	r3, [pc, #4]	; (1f88 <RtcStopAlarm+0x8>)
    1f84:	609a      	str	r2, [r3, #8]
}
    1f86:	4770      	bx	lr
    1f88:	20000ca0 	.word	0x20000ca0

00001f8c <RtcStartAlarm>:
{
    1f8c:	b510      	push	{r4, lr}
    1f8e:	b082      	sub	sp, #8
    1f90:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
    1f92:	a801      	add	r0, sp, #4
    1f94:	4b0e      	ldr	r3, [pc, #56]	; (1fd0 <RtcStartAlarm+0x44>)
    1f96:	4798      	blx	r3
    RtcTimerContext.Delay = timeout;
    1f98:	4b0e      	ldr	r3, [pc, #56]	; (1fd4 <RtcStartAlarm+0x48>)
    1f9a:	605c      	str	r4, [r3, #4]
    RtcTimeoutPendingInterrupt = true;
    1f9c:	2201      	movs	r2, #1
    1f9e:	731a      	strb	r2, [r3, #12]
    RtcTimeoutPendingPolling = false;
    1fa0:	2100      	movs	r1, #0
    1fa2:	7399      	strb	r1, [r3, #14]
    RtcTimerContext.AlarmState = ALARM_RUNNING;
    1fa4:	609a      	str	r2, [r3, #8]
    if( HwTimerLoadAbsoluteTicks( RtcTimerContext.Time + RtcTimerContext.Delay ) == false )
    1fa6:	6818      	ldr	r0, [r3, #0]
    1fa8:	1820      	adds	r0, r4, r0
    1faa:	4b0b      	ldr	r3, [pc, #44]	; (1fd8 <RtcStartAlarm+0x4c>)
    1fac:	4798      	blx	r3
    1fae:	2800      	cmp	r0, #0
    1fb0:	d108      	bne.n	1fc4 <RtcStartAlarm+0x38>
        if( RtcTimeoutPendingInterrupt == true )
    1fb2:	4b08      	ldr	r3, [pc, #32]	; (1fd4 <RtcStartAlarm+0x48>)
    1fb4:	7b1b      	ldrb	r3, [r3, #12]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d004      	beq.n	1fc4 <RtcStartAlarm+0x38>
            RtcTimeoutPendingPolling = true;
    1fba:	4b06      	ldr	r3, [pc, #24]	; (1fd4 <RtcStartAlarm+0x48>)
    1fbc:	2201      	movs	r2, #1
    1fbe:	739a      	strb	r2, [r3, #14]
            RtcTimeoutPendingInterrupt = false;
    1fc0:	2200      	movs	r2, #0
    1fc2:	731a      	strb	r2, [r3, #12]
    CRITICAL_SECTION_END( );
    1fc4:	a801      	add	r0, sp, #4
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <RtcStartAlarm+0x50>)
    1fc8:	4798      	blx	r3
}
    1fca:	b002      	add	sp, #8
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	00000e93 	.word	0x00000e93
    1fd4:	20000ca0 	.word	0x20000ca0
    1fd8:	00001da9 	.word	0x00001da9
    1fdc:	00000e9d 	.word	0x00000e9d

00001fe0 <RtcSetAlarm>:
{
    1fe0:	b510      	push	{r4, lr}
    RtcStartAlarm( timeout );
    1fe2:	4b01      	ldr	r3, [pc, #4]	; (1fe8 <RtcSetAlarm+0x8>)
    1fe4:	4798      	blx	r3
}
    1fe6:	bd10      	pop	{r4, pc}
    1fe8:	00001f8d 	.word	0x00001f8d

00001fec <RtcGetTimerValue>:
{
    1fec:	b510      	push	{r4, lr}
    return ( uint32_t )HwTimerGetTime( );
    1fee:	4b01      	ldr	r3, [pc, #4]	; (1ff4 <RtcGetTimerValue+0x8>)
    1ff0:	4798      	blx	r3
}
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	00001ddd 	.word	0x00001ddd

00001ff8 <RtcGetTimerElapsedTime>:
{
    1ff8:	b510      	push	{r4, lr}
    return ( uint32_t)( HwTimerGetTime( ) - RtcTimerContext.Time );
    1ffa:	4b03      	ldr	r3, [pc, #12]	; (2008 <STACK_SIZE+0x8>)
    1ffc:	4798      	blx	r3
    1ffe:	4b03      	ldr	r3, [pc, #12]	; (200c <STACK_SIZE+0xc>)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	1ac0      	subs	r0, r0, r3
}
    2004:	bd10      	pop	{r4, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	00001ddd 	.word	0x00001ddd
    200c:	20000ca0 	.word	0x20000ca0

00002010 <RtcGetCalendarTime>:
{
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	0005      	movs	r5, r0
    uint32_t calendarValue = HwTimerGetTime( );
    2014:	4b04      	ldr	r3, [pc, #16]	; (2028 <RtcGetCalendarTime+0x18>)
    2016:	4798      	blx	r3
    2018:	0004      	movs	r4, r0
    ticks =  ( uint32_t )calendarValue & 0x3FF;
    201a:	0580      	lsls	r0, r0, #22
    201c:	0d80      	lsrs	r0, r0, #22
    *milliseconds = RtcTick2Ms( ticks );
    201e:	4b03      	ldr	r3, [pc, #12]	; (202c <RtcGetCalendarTime+0x1c>)
    2020:	4798      	blx	r3
    2022:	8028      	strh	r0, [r5, #0]
    uint32_t seconds = ( uint32_t )calendarValue >> 10;
    2024:	0aa0      	lsrs	r0, r4, #10
}
    2026:	bd70      	pop	{r4, r5, r6, pc}
    2028:	00001ddd 	.word	0x00001ddd
    202c:	00001f6b 	.word	0x00001f6b

00002030 <RtcBkupWrite>:
{
    2030:	b530      	push	{r4, r5, lr}
    2032:	b083      	sub	sp, #12
    2034:	0005      	movs	r5, r0
    2036:	000c      	movs	r4, r1
    CRITICAL_SECTION_BEGIN( );
    2038:	a801      	add	r0, sp, #4
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <RtcBkupWrite+0x20>)
    203c:	4798      	blx	r3
    RtcBkupRegisters[0] = data0;
    203e:	4b05      	ldr	r3, [pc, #20]	; (2054 <RtcBkupWrite+0x24>)
    2040:	611d      	str	r5, [r3, #16]
    RtcBkupRegisters[1] = data1;
    2042:	615c      	str	r4, [r3, #20]
    CRITICAL_SECTION_END( );
    2044:	a801      	add	r0, sp, #4
    2046:	4b04      	ldr	r3, [pc, #16]	; (2058 <RtcBkupWrite+0x28>)
    2048:	4798      	blx	r3
}
    204a:	b003      	add	sp, #12
    204c:	bd30      	pop	{r4, r5, pc}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	00000e93 	.word	0x00000e93
    2054:	20000ca0 	.word	0x20000ca0
    2058:	00000e9d 	.word	0x00000e9d

0000205c <RtcBkupRead>:
{
    205c:	b530      	push	{r4, r5, lr}
    205e:	b083      	sub	sp, #12
    2060:	0005      	movs	r5, r0
    2062:	000c      	movs	r4, r1
    CRITICAL_SECTION_BEGIN( );
    2064:	a801      	add	r0, sp, #4
    2066:	4b06      	ldr	r3, [pc, #24]	; (2080 <RtcBkupRead+0x24>)
    2068:	4798      	blx	r3
    *data0 = RtcBkupRegisters[0];
    206a:	4b06      	ldr	r3, [pc, #24]	; (2084 <RtcBkupRead+0x28>)
    206c:	691a      	ldr	r2, [r3, #16]
    206e:	602a      	str	r2, [r5, #0]
    *data1 = RtcBkupRegisters[1];
    2070:	695b      	ldr	r3, [r3, #20]
    2072:	6023      	str	r3, [r4, #0]
    CRITICAL_SECTION_END( );
    2074:	a801      	add	r0, sp, #4
    2076:	4b04      	ldr	r3, [pc, #16]	; (2088 <RtcBkupRead+0x2c>)
    2078:	4798      	blx	r3
}
    207a:	b003      	add	sp, #12
    207c:	bd30      	pop	{r4, r5, pc}
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	00000e93 	.word	0x00000e93
    2084:	20000ca0 	.word	0x20000ca0
    2088:	00000e9d 	.word	0x00000e9d

0000208c <RtcProcess>:
{
    208c:	b500      	push	{lr}
    208e:	b083      	sub	sp, #12
    CRITICAL_SECTION_BEGIN( );
    2090:	a801      	add	r0, sp, #4
    2092:	4b0e      	ldr	r3, [pc, #56]	; (20cc <RtcProcess+0x40>)
    2094:	4798      	blx	r3
    if( (  RtcTimerContext.AlarmState == ALARM_RUNNING ) && ( RtcTimeoutPendingPolling == true ) )
    2096:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <RtcProcess+0x44>)
    2098:	689b      	ldr	r3, [r3, #8]
    209a:	2b01      	cmp	r3, #1
    209c:	d004      	beq.n	20a8 <RtcProcess+0x1c>
    CRITICAL_SECTION_END( );
    209e:	a801      	add	r0, sp, #4
    20a0:	4b0c      	ldr	r3, [pc, #48]	; (20d4 <RtcProcess+0x48>)
    20a2:	4798      	blx	r3
}
    20a4:	b003      	add	sp, #12
    20a6:	bd00      	pop	{pc}
    if( (  RtcTimerContext.AlarmState == ALARM_RUNNING ) && ( RtcTimeoutPendingPolling == true ) )
    20a8:	4b09      	ldr	r3, [pc, #36]	; (20d0 <RtcProcess+0x44>)
    20aa:	7b9b      	ldrb	r3, [r3, #14]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d0f6      	beq.n	209e <RtcProcess+0x12>
        if( RtcGetTimerElapsedTime( ) >= RtcTimerContext.Delay )
    20b0:	4b09      	ldr	r3, [pc, #36]	; (20d8 <RtcProcess+0x4c>)
    20b2:	4798      	blx	r3
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <RtcProcess+0x44>)
    20b6:	685b      	ldr	r3, [r3, #4]
    20b8:	4298      	cmp	r0, r3
    20ba:	d3f0      	bcc.n	209e <RtcProcess+0x12>
            RtcTimerContext.AlarmState = ALARM_STOPPED;
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <RtcProcess+0x44>)
    20be:	2200      	movs	r2, #0
    20c0:	609a      	str	r2, [r3, #8]
            RtcTimeoutPendingPolling = false;
    20c2:	739a      	strb	r2, [r3, #14]
            TimerIrqHandler( );
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <RtcProcess+0x50>)
    20c6:	4798      	blx	r3
    20c8:	e7e9      	b.n	209e <RtcProcess+0x12>
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	00000e93 	.word	0x00000e93
    20d0:	20000ca0 	.word	0x20000ca0
    20d4:	00000e9d 	.word	0x00000e9d
    20d8:	00001ff9 	.word	0x00001ff9
    20dc:	0000c105 	.word	0x0000c105

000020e0 <SpiInit>:
#include "spi-board.h"

struct spi_m_sync_descriptor Spi0;

void SpiInit( Spi_t *obj, SpiId_t spiId, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
    20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e2:	46ce      	mov	lr, r9
    20e4:	4647      	mov	r7, r8
    20e6:	b580      	push	{r7, lr}
    20e8:	b083      	sub	sp, #12
    20ea:	9201      	str	r2, [sp, #4]
    20ec:	001d      	movs	r5, r3
    20ee:	ab0a      	add	r3, sp, #40	; 0x28
    20f0:	2600      	movs	r6, #0
    20f2:	579e      	ldrsb	r6, [r3, r6]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    20f4:	4b8a      	ldr	r3, [pc, #552]	; (2320 <SpiInit+0x240>)
    20f6:	2240      	movs	r2, #64	; 0x40
    20f8:	21e0      	movs	r1, #224	; 0xe0
    20fa:	505a      	str	r2, [r3, r1]
    20fc:	3904      	subs	r1, #4
    20fe:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2100:	4a88      	ldr	r2, [pc, #544]	; (2324 <SpiInit+0x244>)
    2102:	6a13      	ldr	r3, [r2, #32]
    2104:	39da      	subs	r1, #218	; 0xda
    2106:	430b      	orrs	r3, r1
    2108:	6213      	str	r3, [r2, #32]
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );

    hri_mclk_set_APBDMASK_SERCOM5_bit( MCLK );

    spi_m_sync_init( &Spi0, SERCOM5 );
    210a:	4987      	ldr	r1, [pc, #540]	; (2328 <SpiInit+0x248>)
    210c:	4887      	ldr	r0, [pc, #540]	; (232c <SpiInit+0x24c>)
    210e:	4b88      	ldr	r3, [pc, #544]	; (2330 <SpiInit+0x250>)
    2110:	4798      	blx	r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2112:	4985      	ldr	r1, [pc, #532]	; (2328 <SpiInit+0x248>)
    2114:	2201      	movs	r2, #1
    2116:	69cb      	ldr	r3, [r1, #28]
    2118:	421a      	tst	r2, r3
    211a:	d1fc      	bne.n	2116 <SpiInit+0x36>
    211c:	4982      	ldr	r1, [pc, #520]	; (2328 <SpiInit+0x248>)
    211e:	2201      	movs	r2, #1
    2120:	69cb      	ldr	r3, [r1, #28]
    2122:	421a      	tst	r2, r3
    2124:	d1fc      	bne.n	2120 <SpiInit+0x40>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2126:	4a80      	ldr	r2, [pc, #512]	; (2328 <SpiInit+0x248>)
    2128:	6813      	ldr	r3, [r2, #0]
    212a:	2101      	movs	r1, #1
    212c:	430b      	orrs	r3, r1
    212e:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2130:	0011      	movs	r1, r2
    2132:	2201      	movs	r2, #1
    2134:	69cb      	ldr	r3, [r1, #28]
    2136:	421a      	tst	r2, r3
    2138:	d1fc      	bne.n	2134 <SpiInit+0x54>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    213a:	4b7b      	ldr	r3, [pc, #492]	; (2328 <SpiInit+0x248>)
    213c:	4a7d      	ldr	r2, [pc, #500]	; (2334 <SpiInit+0x254>)
    213e:	601a      	str	r2, [r3, #0]
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	0292      	lsls	r2, r2, #10
    2144:	605a      	str	r2, [r3, #4]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2146:	2207      	movs	r2, #7
    2148:	731a      	strb	r2, [r3, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    214a:	2100      	movs	r1, #0
    214c:	3229      	adds	r2, #41	; 0x29
    214e:	5499      	strb	r1, [r3, r2]
    hri_sercomspi_write_CTRLB_reg( SERCOM5, SERCOM_SPI_CTRLB_RXEN );
    hri_sercomspi_write_BAUD_reg( SERCOM5, ( ( float )CONF_GCLK_SERCOM5_CORE_FREQUENCY / ( float )( 2 * 1000000 ) ) - 1 );
    hri_sercomspi_write_DBGCTRL_reg( SERCOM5, 0 );

    // Set pin direction to input. MISO
    gpio_set_pin_direction( miso, GPIO_DIRECTION_IN );
    2150:	b2e9      	uxtb	r1, r5
    2152:	3a11      	subs	r2, #17
    2154:	400a      	ands	r2, r1
    2156:	2301      	movs	r3, #1
    2158:	4699      	mov	r9, r3
    215a:	001f      	movs	r7, r3
    215c:	4097      	lsls	r7, r2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    215e:	094b      	lsrs	r3, r1, #5
    2160:	01db      	lsls	r3, r3, #7
    2162:	24c0      	movs	r4, #192	; 0xc0
    2164:	05e4      	lsls	r4, r4, #23
    2166:	46a4      	mov	ip, r4
    2168:	449c      	add	ip, r3
    216a:	4664      	mov	r4, ip
    216c:	6067      	str	r7, [r4, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    216e:	043c      	lsls	r4, r7, #16
    2170:	0c24      	lsrs	r4, r4, #16
    2172:	46a0      	mov	r8, r4
    2174:	4c70      	ldr	r4, [pc, #448]	; (2338 <SpiInit+0x258>)
    2176:	46a4      	mov	ip, r4
    2178:	4644      	mov	r4, r8
    217a:	4660      	mov	r0, ip
    217c:	4304      	orrs	r4, r0
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    217e:	486f      	ldr	r0, [pc, #444]	; (233c <SpiInit+0x25c>)
    2180:	4680      	mov	r8, r0
    2182:	4443      	add	r3, r8
    2184:	629c      	str	r4, [r3, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    2186:	0c3f      	lsrs	r7, r7, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2188:	486d      	ldr	r0, [pc, #436]	; (2340 <SpiInit+0x260>)
    218a:	4307      	orrs	r7, r0
    218c:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    218e:	189b      	adds	r3, r3, r2
    2190:	3340      	adds	r3, #64	; 0x40
    2192:	781f      	ldrb	r7, [r3, #0]
    2194:	2004      	movs	r0, #4
    2196:	4387      	bics	r7, r0
    2198:	701f      	strb	r7, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    219a:	04ed      	lsls	r5, r5, #19
    219c:	0e2d      	lsrs	r5, r5, #24
    219e:	01eb      	lsls	r3, r5, #7
    21a0:	18d3      	adds	r3, r2, r3
    21a2:	4868      	ldr	r0, [pc, #416]	; (2344 <SpiInit+0x264>)
    21a4:	4684      	mov	ip, r0
    21a6:	4463      	add	r3, ip
    21a8:	781f      	ldrb	r7, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    21aa:	4648      	mov	r0, r9
    21ac:	4387      	bics	r7, r0
    21ae:	0038      	movs	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    21b0:	2701      	movs	r7, #1
    21b2:	4338      	orrs	r0, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21b4:	7018      	strb	r0, [r3, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    21b6:	07cb      	lsls	r3, r1, #31
    21b8:	d500      	bpl.n	21bc <SpiInit+0xdc>
    21ba:	e08a      	b.n	22d2 <SpiInit+0x1f2>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    21bc:	0852      	lsrs	r2, r2, #1
    21be:	01ed      	lsls	r5, r5, #7
    21c0:	1952      	adds	r2, r2, r5
    21c2:	4b61      	ldr	r3, [pc, #388]	; (2348 <SpiInit+0x268>)
    21c4:	469c      	mov	ip, r3
    21c6:	4462      	add	r2, ip
    21c8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    21ca:	210f      	movs	r1, #15
    21cc:	438b      	bics	r3, r1
	tmp |= PORT_PMUX_PMUXE(data);
    21ce:	390d      	subs	r1, #13
    21d0:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21d2:	7013      	strb	r3, [r2, #0]
    gpio_set_pin_pull_mode( miso, GPIO_PULL_OFF );
    gpio_set_pin_function( miso, PINMUX_PB16C_SERCOM5_PAD0 );

    // Set pin direction to output. MOSI
    gpio_set_pin_direction( mosi, GPIO_DIRECTION_OUT );
    21d4:	466b      	mov	r3, sp
    21d6:	7918      	ldrb	r0, [r3, #4]
    21d8:	231f      	movs	r3, #31
    21da:	4003      	ands	r3, r0
    21dc:	2501      	movs	r5, #1
    21de:	0029      	movs	r1, r5
    21e0:	4099      	lsls	r1, r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    21e2:	0942      	lsrs	r2, r0, #5
    21e4:	01d2      	lsls	r2, r2, #7
    21e6:	24c0      	movs	r4, #192	; 0xc0
    21e8:	05e4      	lsls	r4, r4, #23
    21ea:	46a4      	mov	ip, r4
    21ec:	4494      	add	ip, r2
    21ee:	4664      	mov	r4, ip
    21f0:	60a1      	str	r1, [r4, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    21f2:	040f      	lsls	r7, r1, #16
    21f4:	0c3c      	lsrs	r4, r7, #16
    21f6:	2780      	movs	r7, #128	; 0x80
    21f8:	05ff      	lsls	r7, r7, #23
    21fa:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    21fc:	4c4f      	ldr	r4, [pc, #316]	; (233c <SpiInit+0x25c>)
    21fe:	46a0      	mov	r8, r4
    2200:	4442      	add	r2, r8
    2202:	6297      	str	r7, [r2, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2204:	0c0c      	lsrs	r4, r1, #16
		hri_port_write_WRCONFIG_reg(
    2206:	27c0      	movs	r7, #192	; 0xc0
    2208:	063f      	lsls	r7, r7, #24
    220a:	4327      	orrs	r7, r4
    220c:	6297      	str	r7, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    220e:	4662      	mov	r2, ip
    2210:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2212:	9a01      	ldr	r2, [sp, #4]
    2214:	04d4      	lsls	r4, r2, #19
    2216:	0e24      	lsrs	r4, r4, #24
    2218:	01e2      	lsls	r2, r4, #7
    221a:	189a      	adds	r2, r3, r2
    221c:	4949      	ldr	r1, [pc, #292]	; (2344 <SpiInit+0x264>)
    221e:	468c      	mov	ip, r1
    2220:	4462      	add	r2, ip
    2222:	7811      	ldrb	r1, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2224:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2226:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2228:	7011      	strb	r1, [r2, #0]
		if (pin & 1) {
    222a:	07c2      	lsls	r2, r0, #31
    222c:	d45e      	bmi.n	22ec <SpiInit+0x20c>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    222e:	085b      	lsrs	r3, r3, #1
    2230:	01e4      	lsls	r4, r4, #7
    2232:	191b      	adds	r3, r3, r4
    2234:	4a44      	ldr	r2, [pc, #272]	; (2348 <SpiInit+0x268>)
    2236:	4694      	mov	ip, r2
    2238:	4463      	add	r3, ip
    223a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    223c:	210f      	movs	r1, #15
    223e:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
    2240:	390c      	subs	r1, #12
    2242:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2244:	701a      	strb	r2, [r3, #0]
    gpio_set_pin_level( mosi, false );
    gpio_set_pin_function( mosi, PINMUX_PB22D_SERCOM5_PAD2 );

    // Set pin direction to output. CLK
    gpio_set_pin_direction( sclk, GPIO_DIRECTION_OUT );
    2246:	b2f0      	uxtb	r0, r6
    2248:	231f      	movs	r3, #31
    224a:	4003      	ands	r3, r0
    224c:	2401      	movs	r4, #1
    224e:	0021      	movs	r1, r4
    2250:	4099      	lsls	r1, r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2252:	0942      	lsrs	r2, r0, #5
    2254:	01d2      	lsls	r2, r2, #7
    2256:	25c0      	movs	r5, #192	; 0xc0
    2258:	05ed      	lsls	r5, r5, #23
    225a:	46ac      	mov	ip, r5
    225c:	4494      	add	ip, r2
    225e:	4665      	mov	r5, ip
    2260:	60a9      	str	r1, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2262:	040f      	lsls	r7, r1, #16
    2264:	0c3f      	lsrs	r7, r7, #16
    2266:	2580      	movs	r5, #128	; 0x80
    2268:	05ed      	lsls	r5, r5, #23
    226a:	433d      	orrs	r5, r7
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    226c:	4f33      	ldr	r7, [pc, #204]	; (233c <SpiInit+0x25c>)
    226e:	46b8      	mov	r8, r7
    2270:	4442      	add	r2, r8
    2272:	6295      	str	r5, [r2, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2274:	0c0f      	lsrs	r7, r1, #16
		hri_port_write_WRCONFIG_reg(
    2276:	25c0      	movs	r5, #192	; 0xc0
    2278:	062d      	lsls	r5, r5, #24
    227a:	433d      	orrs	r5, r7
    227c:	6295      	str	r5, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    227e:	4662      	mov	r2, ip
    2280:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2282:	04f6      	lsls	r6, r6, #19
    2284:	0e36      	lsrs	r6, r6, #24
    2286:	01f2      	lsls	r2, r6, #7
    2288:	189a      	adds	r2, r3, r2
    228a:	492e      	ldr	r1, [pc, #184]	; (2344 <SpiInit+0x264>)
    228c:	468c      	mov	ip, r1
    228e:	4462      	add	r2, ip
    2290:	7811      	ldrb	r1, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2292:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2294:	4321      	orrs	r1, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2296:	7011      	strb	r1, [r2, #0]
		if (pin & 1) {
    2298:	07c2      	lsls	r2, r0, #31
    229a:	d434      	bmi.n	2306 <SpiInit+0x226>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    229c:	085b      	lsrs	r3, r3, #1
    229e:	01f6      	lsls	r6, r6, #7
    22a0:	199e      	adds	r6, r3, r6
    22a2:	4b29      	ldr	r3, [pc, #164]	; (2348 <SpiInit+0x268>)
    22a4:	469c      	mov	ip, r3
    22a6:	4466      	add	r6, ip
    22a8:	7833      	ldrb	r3, [r6, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22aa:	220f      	movs	r2, #15
    22ac:	4393      	bics	r3, r2
	tmp |= PORT_PMUX_PMUXE(data);
    22ae:	3a0c      	subs	r2, #12
    22b0:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22b2:	7033      	strb	r3, [r6, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    22b4:	491c      	ldr	r1, [pc, #112]	; (2328 <SpiInit+0x248>)
    22b6:	2203      	movs	r2, #3
    22b8:	69cb      	ldr	r3, [r1, #28]
    22ba:	421a      	tst	r2, r3
    22bc:	d1fc      	bne.n	22b8 <SpiInit+0x1d8>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22be:	4a1a      	ldr	r2, [pc, #104]	; (2328 <SpiInit+0x248>)
    22c0:	6813      	ldr	r3, [r2, #0]
    22c2:	2102      	movs	r1, #2
    22c4:	430b      	orrs	r3, r1
    22c6:	6013      	str	r3, [r2, #0]
    gpio_set_pin_level( sclk,  false );
    gpio_set_pin_function( sclk, PINMUX_PB23D_SERCOM5_PAD3 );

    hri_sercomspi_set_CTRLA_ENABLE_bit( SERCOM5 );
}
    22c8:	b003      	add	sp, #12
    22ca:	bc0c      	pop	{r2, r3}
    22cc:	4690      	mov	r8, r2
    22ce:	4699      	mov	r9, r3
    22d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22d2:	0852      	lsrs	r2, r2, #1
    22d4:	01ed      	lsls	r5, r5, #7
    22d6:	1955      	adds	r5, r2, r5
    22d8:	4b1b      	ldr	r3, [pc, #108]	; (2348 <SpiInit+0x268>)
    22da:	469c      	mov	ip, r3
    22dc:	4465      	add	r5, ip
    22de:	782b      	ldrb	r3, [r5, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    22e0:	220f      	movs	r2, #15
    22e2:	4013      	ands	r3, r2
	tmp |= PORT_PMUX_PMUXO(data);
    22e4:	3211      	adds	r2, #17
    22e6:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22e8:	702b      	strb	r3, [r5, #0]
    22ea:	e773      	b.n	21d4 <SpiInit+0xf4>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22ec:	085b      	lsrs	r3, r3, #1
    22ee:	01e4      	lsls	r4, r4, #7
    22f0:	191b      	adds	r3, r3, r4
    22f2:	4a15      	ldr	r2, [pc, #84]	; (2348 <SpiInit+0x268>)
    22f4:	4694      	mov	ip, r2
    22f6:	4463      	add	r3, ip
    22f8:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    22fa:	210f      	movs	r1, #15
    22fc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    22fe:	3121      	adds	r1, #33	; 0x21
    2300:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2302:	701a      	strb	r2, [r3, #0]
    2304:	e79f      	b.n	2246 <SpiInit+0x166>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2306:	085b      	lsrs	r3, r3, #1
    2308:	01f6      	lsls	r6, r6, #7
    230a:	199e      	adds	r6, r3, r6
    230c:	4b0e      	ldr	r3, [pc, #56]	; (2348 <SpiInit+0x268>)
    230e:	469c      	mov	ip, r3
    2310:	4466      	add	r6, ip
    2312:	7833      	ldrb	r3, [r6, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2314:	220f      	movs	r2, #15
    2316:	4013      	ands	r3, r2
	tmp |= PORT_PMUX_PMUXO(data);
    2318:	3221      	adds	r2, #33	; 0x21
    231a:	4313      	orrs	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    231c:	7033      	strb	r3, [r6, #0]
    231e:	e7c9      	b.n	22b4 <SpiInit+0x1d4>
    2320:	40001800 	.word	0x40001800
    2324:	40000400 	.word	0x40000400
    2328:	43000400 	.word	0x43000400
    232c:	20001b8c 	.word	0x20001b8c
    2330:	00001349 	.word	0x00001349
    2334:	0001000c 	.word	0x0001000c
    2338:	40020000 	.word	0x40020000
    233c:	40002800 	.word	0x40002800
    2340:	c0020000 	.word	0xc0020000
    2344:	40002840 	.word	0x40002840
    2348:	40002830 	.word	0x40002830

0000234c <SpiInOut>:
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    234c:	4809      	ldr	r0, [pc, #36]	; (2374 <SpiInOut+0x28>)
}

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
    // Wait for bus idle (ready to write)
    while( ( SERCOM_SPI_INTFLAG_DRE & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    234e:	2201      	movs	r2, #1
    2350:	7e03      	ldrb	r3, [r0, #24]
    2352:	4213      	tst	r3, r2
    2354:	d0fc      	beq.n	2350 <SpiInOut+0x4>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2356:	4b07      	ldr	r3, [pc, #28]	; (2374 <SpiInOut+0x28>)
    2358:	2201      	movs	r2, #1
    235a:	761a      	strb	r2, [r3, #24]
	((Sercom *)hw)->SPI.DATA.reg = data;
    235c:	6299      	str	r1, [r3, #40]	; 0x28
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    235e:	0019      	movs	r1, r3

    // Write byte
    hri_sercomspi_write_DATA_reg( SERCOM5, outData );

    // Wait for ready to read
    while( ( SERCOM_SPI_INTFLAG_RXC & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    2360:	3203      	adds	r2, #3
    2362:	7e0b      	ldrb	r3, [r1, #24]
    2364:	4213      	tst	r3, r2
    2366:	d0fc      	beq.n	2362 <SpiInOut+0x16>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2368:	4b02      	ldr	r3, [pc, #8]	; (2374 <SpiInOut+0x28>)
    236a:	2204      	movs	r2, #4
    236c:	761a      	strb	r2, [r3, #24]
	return ((Sercom *)hw)->SPI.DATA.reg;
    236e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    hri_sercomspi_clear_INTFLAG_reg( SERCOM5, SERCOM_SPI_INTFLAG_RXC );

    // Read byte
    outData = ( uint16_t )hri_sercomspi_read_DATA_reg( SERCOM5 );

    return outData;
    2370:	b280      	uxth	r0, r0
}
    2372:	4770      	bx	lr
    2374:	43000400 	.word	0x43000400

00002378 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
    2378:	2001      	movs	r0, #1
    237a:	4770      	bx	lr

0000237c <SX1276IoInit>:
{
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
    237e:	46de      	mov	lr, fp
    2380:	4657      	mov	r7, sl
    2382:	464e      	mov	r6, r9
    2384:	4645      	mov	r5, r8
    2386:	b5e0      	push	{r5, r6, r7, lr}
    2388:	b083      	sub	sp, #12
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
    238a:	4e4d      	ldr	r6, [pc, #308]	; (24c0 <SX1276IoInit+0x144>)
    238c:	2701      	movs	r7, #1
    238e:	9701      	str	r7, [sp, #4]
    2390:	9700      	str	r7, [sp, #0]
    2392:	2300      	movs	r3, #0
    2394:	2201      	movs	r2, #1
    2396:	2111      	movs	r1, #17
    2398:	0030      	movs	r0, r6
    239a:	4c4a      	ldr	r4, [pc, #296]	; (24c4 <SX1276IoInit+0x148>)
    239c:	46a0      	mov	r8, r4
    239e:	47a0      	blx	r4
    ext_irq_init( );
    23a0:	4b49      	ldr	r3, [pc, #292]	; (24c8 <SX1276IoInit+0x14c>)
    23a2:	4798      	blx	r3
    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    23a4:	0030      	movs	r0, r6
    23a6:	3870      	subs	r0, #112	; 0x70
    23a8:	2500      	movs	r5, #0
    23aa:	9501      	str	r5, [sp, #4]
    23ac:	9500      	str	r5, [sp, #0]
    23ae:	2300      	movs	r3, #0
    23b0:	2200      	movs	r2, #0
    23b2:	2114      	movs	r1, #20
    23b4:	47a0      	blx	r4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23b6:	4c45      	ldr	r4, [pc, #276]	; (24cc <SX1276IoInit+0x150>)
    23b8:	2254      	movs	r2, #84	; 0x54
    23ba:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23bc:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23be:	2101      	movs	r1, #1
    23c0:	4689      	mov	r9, r1
    23c2:	4649      	mov	r1, r9
    23c4:	430b      	orrs	r3, r1
    23c6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23c8:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23ca:	233a      	movs	r3, #58	; 0x3a
    23cc:	469a      	mov	sl, r3
    23ce:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    23d0:	3a45      	subs	r2, #69	; 0x45
    23d2:	4693      	mov	fp, r2
    23d4:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    23d6:	4652      	mov	r2, sl
    23d8:	54a3      	strb	r3, [r4, r2]
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    23da:	0030      	movs	r0, r6
    23dc:	3864      	subs	r0, #100	; 0x64
    23de:	9501      	str	r5, [sp, #4]
    23e0:	9500      	str	r5, [sp, #0]
    23e2:	2300      	movs	r3, #0
    23e4:	2200      	movs	r2, #0
    23e6:	2115      	movs	r1, #21
    23e8:	47c0      	blx	r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23ea:	2255      	movs	r2, #85	; 0x55
    23ec:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23ee:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23f0:	4649      	mov	r1, r9
    23f2:	430b      	orrs	r3, r1
    23f4:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23f6:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23f8:	4653      	mov	r3, sl
    23fa:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    23fc:	3a46      	subs	r2, #70	; 0x46
    23fe:	4013      	ands	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2400:	4652      	mov	r2, sl
    2402:	54a3      	strb	r3, [r4, r2]
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    2404:	0030      	movs	r0, r6
    2406:	3858      	subs	r0, #88	; 0x58
    2408:	9501      	str	r5, [sp, #4]
    240a:	9500      	str	r5, [sp, #0]
    240c:	2300      	movs	r3, #0
    240e:	2200      	movs	r2, #0
    2410:	212c      	movs	r1, #44	; 0x2c
    2412:	47c0      	blx	r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2414:	22cc      	movs	r2, #204	; 0xcc
    2416:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2418:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    241a:	4649      	mov	r1, r9
    241c:	430b      	orrs	r3, r1
    241e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2420:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2422:	23b6      	movs	r3, #182	; 0xb6
    2424:	469a      	mov	sl, r3
    2426:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2428:	465a      	mov	r2, fp
    242a:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    242c:	4652      	mov	r2, sl
    242e:	54a3      	strb	r3, [r4, r2]
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    2430:	0030      	movs	r0, r6
    2432:	384c      	subs	r0, #76	; 0x4c
    2434:	9501      	str	r5, [sp, #4]
    2436:	9500      	str	r5, [sp, #0]
    2438:	2300      	movs	r3, #0
    243a:	2200      	movs	r2, #0
    243c:	212d      	movs	r1, #45	; 0x2d
    243e:	47c0      	blx	r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2440:	22cd      	movs	r2, #205	; 0xcd
    2442:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2444:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2446:	4649      	mov	r1, r9
    2448:	430b      	orrs	r3, r1
    244a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    244c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    244e:	4653      	mov	r3, sl
    2450:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2452:	3abe      	subs	r2, #190	; 0xbe
    2454:	4013      	ands	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2456:	4652      	mov	r2, sl
    2458:	54a3      	strb	r3, [r4, r2]
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    245a:	0030      	movs	r0, r6
    245c:	3840      	subs	r0, #64	; 0x40
    245e:	9501      	str	r5, [sp, #4]
    2460:	9500      	str	r5, [sp, #0]
    2462:	2300      	movs	r3, #0
    2464:	2200      	movs	r2, #0
    2466:	212e      	movs	r1, #46	; 0x2e
    2468:	47c0      	blx	r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    246a:	22ce      	movs	r2, #206	; 0xce
    246c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    246e:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2470:	4649      	mov	r1, r9
    2472:	430b      	orrs	r3, r1
    2474:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2476:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2478:	23b7      	movs	r3, #183	; 0xb7
    247a:	469a      	mov	sl, r3
    247c:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    247e:	465a      	mov	r2, fp
    2480:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2482:	4652      	mov	r2, sl
    2484:	54a3      	strb	r3, [r4, r2]
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    2486:	0030      	movs	r0, r6
    2488:	3834      	subs	r0, #52	; 0x34
    248a:	9501      	str	r5, [sp, #4]
    248c:	9500      	str	r5, [sp, #0]
    248e:	2300      	movs	r3, #0
    2490:	2200      	movs	r2, #0
    2492:	212f      	movs	r1, #47	; 0x2f
    2494:	47c0      	blx	r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2496:	22cf      	movs	r2, #207	; 0xcf
    2498:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    249a:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    249c:	4649      	mov	r1, r9
    249e:	430b      	orrs	r3, r1
    24a0:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24a2:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24a4:	4653      	mov	r3, sl
    24a6:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    24a8:	3ac0      	subs	r2, #192	; 0xc0
    24aa:	4013      	ands	r3, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24ac:	4652      	mov	r2, sl
    24ae:	54a3      	strb	r3, [r4, r2]
}
    24b0:	b003      	add	sp, #12
    24b2:	bc3c      	pop	{r2, r3, r4, r5}
    24b4:	4690      	mov	r8, r2
    24b6:	4699      	mov	r9, r3
    24b8:	46a2      	mov	sl, r4
    24ba:	46ab      	mov	fp, r5
    24bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	20001ca4 	.word	0x20001ca4
    24c4:	0000be75 	.word	0x0000be75
    24c8:	000011d5 	.word	0x000011d5
    24cc:	40002800 	.word	0x40002800

000024d0 <SX1276IoIrqInit>:
{
    24d0:	b570      	push	{r4, r5, r6, lr}
    24d2:	0005      	movs	r5, r0
    ext_irq_register( RADIO_DIO_0, irqHandlers[0] );
    24d4:	6801      	ldr	r1, [r0, #0]
    24d6:	2014      	movs	r0, #20
    24d8:	4c08      	ldr	r4, [pc, #32]	; (24fc <SX1276IoIrqInit+0x2c>)
    24da:	47a0      	blx	r4
    ext_irq_register( RADIO_DIO_1, irqHandlers[1] );
    24dc:	6869      	ldr	r1, [r5, #4]
    24de:	2015      	movs	r0, #21
    24e0:	47a0      	blx	r4
    ext_irq_register( RADIO_DIO_2, irqHandlers[2] );
    24e2:	68a9      	ldr	r1, [r5, #8]
    24e4:	202c      	movs	r0, #44	; 0x2c
    24e6:	47a0      	blx	r4
    ext_irq_register( RADIO_DIO_3, irqHandlers[3] );
    24e8:	68e9      	ldr	r1, [r5, #12]
    24ea:	202d      	movs	r0, #45	; 0x2d
    24ec:	47a0      	blx	r4
    ext_irq_register( RADIO_DIO_4, irqHandlers[4] );
    24ee:	6929      	ldr	r1, [r5, #16]
    24f0:	202e      	movs	r0, #46	; 0x2e
    24f2:	47a0      	blx	r4
    ext_irq_register( RADIO_DIO_5, irqHandlers[5] );
    24f4:	6969      	ldr	r1, [r5, #20]
    24f6:	202f      	movs	r0, #47	; 0x2f
    24f8:	47a0      	blx	r4
}
    24fa:	bd70      	pop	{r4, r5, r6, pc}
    24fc:	00001201 	.word	0x00001201

00002500 <SX1276GetBoardTcxoWakeupTime>:
}
    2500:	2000      	movs	r0, #0
    2502:	4770      	bx	lr

00002504 <SX1276Reset>:
{
    2504:	b5f0      	push	{r4, r5, r6, r7, lr}
    2506:	b083      	sub	sp, #12
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    2508:	4f0c      	ldr	r7, [pc, #48]	; (253c <SX1276Reset+0x38>)
    250a:	2400      	movs	r4, #0
    250c:	9401      	str	r4, [sp, #4]
    250e:	9400      	str	r4, [sp, #0]
    2510:	2300      	movs	r3, #0
    2512:	2201      	movs	r2, #1
    2514:	210a      	movs	r1, #10
    2516:	0038      	movs	r0, r7
    2518:	4e09      	ldr	r6, [pc, #36]	; (2540 <SX1276Reset+0x3c>)
    251a:	47b0      	blx	r6
    DelayMs( 1 );
    251c:	2001      	movs	r0, #1
    251e:	4d09      	ldr	r5, [pc, #36]	; (2544 <SX1276Reset+0x40>)
    2520:	47a8      	blx	r5
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    2522:	2301      	movs	r3, #1
    2524:	9301      	str	r3, [sp, #4]
    2526:	9400      	str	r4, [sp, #0]
    2528:	2300      	movs	r3, #0
    252a:	2200      	movs	r2, #0
    252c:	210a      	movs	r1, #10
    252e:	0038      	movs	r0, r7
    2530:	47b0      	blx	r6
    DelayMs( 6 );
    2532:	2006      	movs	r0, #6
    2534:	47a8      	blx	r5
}
    2536:	b003      	add	sp, #12
    2538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	20001c28 	.word	0x20001c28
    2540:	0000be75 	.word	0x0000be75
    2544:	0000be69 	.word	0x0000be69

00002548 <SX1276SetRfTxPower>:
{
    2548:	b570      	push	{r4, r5, r6, lr}
    254a:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
    254c:	2009      	movs	r0, #9
    254e:	4c21      	ldr	r4, [pc, #132]	; (25d4 <SX1276SetRfTxPower+0x8c>)
    2550:	47a0      	blx	r4
    2552:	0006      	movs	r6, r0
    paDac = SX1276Read( REG_PADAC );
    2554:	204d      	movs	r0, #77	; 0x4d
    2556:	47a0      	blx	r4
        if( power > 17 )
    2558:	2d11      	cmp	r5, #17
    255a:	dd1e      	ble.n	259a <SX1276SetRfTxPower+0x52>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
    255c:	2407      	movs	r4, #7
    255e:	4304      	orrs	r4, r0
    2560:	b2e4      	uxtb	r4, r4
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
    2562:	b270      	sxtb	r0, r6
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
    2564:	43e3      	mvns	r3, r4
    2566:	075b      	lsls	r3, r3, #29
    2568:	d01d      	beq.n	25a6 <SX1276SetRfTxPower+0x5e>
    256a:	1c2b      	adds	r3, r5, #0
    256c:	2d01      	cmp	r5, #1
    256e:	dd2e      	ble.n	25ce <SX1276SetRfTxPower+0x86>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
    2570:	1c1a      	adds	r2, r3, #0
    2572:	b25b      	sxtb	r3, r3
    2574:	2b11      	cmp	r3, #17
    2576:	dd00      	ble.n	257a <SX1276SetRfTxPower+0x32>
    2578:	2211      	movs	r2, #17
    257a:	3a02      	subs	r2, #2
    257c:	210f      	movs	r1, #15
    257e:	400a      	ands	r2, r1
    2580:	398f      	subs	r1, #143	; 0x8f
    2582:	4311      	orrs	r1, r2
    2584:	2670      	movs	r6, #112	; 0x70
    2586:	4006      	ands	r6, r0
    2588:	4331      	orrs	r1, r6
    258a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
    258c:	2009      	movs	r0, #9
    258e:	4d12      	ldr	r5, [pc, #72]	; (25d8 <SX1276SetRfTxPower+0x90>)
    2590:	47a8      	blx	r5
    SX1276Write( REG_PADAC, paDac );
    2592:	0021      	movs	r1, r4
    2594:	204d      	movs	r0, #77	; 0x4d
    2596:	47a8      	blx	r5
}
    2598:	bd70      	pop	{r4, r5, r6, pc}
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
    259a:	2307      	movs	r3, #7
    259c:	4398      	bics	r0, r3
    259e:	2404      	movs	r4, #4
    25a0:	4304      	orrs	r4, r0
    25a2:	b2e4      	uxtb	r4, r4
    25a4:	e7dd      	b.n	2562 <SX1276SetRfTxPower+0x1a>
    25a6:	1c2b      	adds	r3, r5, #0
    25a8:	2d04      	cmp	r5, #4
    25aa:	dc00      	bgt.n	25ae <SX1276SetRfTxPower+0x66>
    25ac:	2305      	movs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
    25ae:	1c19      	adds	r1, r3, #0
    25b0:	b25b      	sxtb	r3, r3
    25b2:	2b14      	cmp	r3, #20
    25b4:	dd00      	ble.n	25b8 <SX1276SetRfTxPower+0x70>
    25b6:	2114      	movs	r1, #20
    25b8:	3905      	subs	r1, #5
    25ba:	230f      	movs	r3, #15
    25bc:	400b      	ands	r3, r1
    25be:	2180      	movs	r1, #128	; 0x80
    25c0:	4249      	negs	r1, r1
    25c2:	4319      	orrs	r1, r3
    25c4:	2670      	movs	r6, #112	; 0x70
    25c6:	4006      	ands	r6, r0
    25c8:	4331      	orrs	r1, r6
    25ca:	b2c9      	uxtb	r1, r1
    25cc:	e7de      	b.n	258c <SX1276SetRfTxPower+0x44>
    25ce:	2302      	movs	r3, #2
    25d0:	e7ce      	b.n	2570 <SX1276SetRfTxPower+0x28>
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	000099dd 	.word	0x000099dd
    25d8:	0000991d 	.word	0x0000991d

000025dc <SX1276SetAntSwLowPower>:
    if( RadioIsActive != status )
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <SX1276SetAntSwLowPower+0x10>)
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	4283      	cmp	r3, r0
    25e2:	d001      	beq.n	25e8 <SX1276SetAntSwLowPower+0xc>
        RadioIsActive = status;
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <SX1276SetAntSwLowPower+0x10>)
    25e6:	7018      	strb	r0, [r3, #0]
}
    25e8:	4770      	bx	lr
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000cb8 	.word	0x20000cb8

000025f0 <SX1276SetAntSw>:
}
    25f0:	4770      	bx	lr
	...

000025f4 <UartMcuInit>:
#include "uart-board.h"

struct usart_sync_descriptor Usart0;

void UartMcuInit( Uart_t *obj, uint8_t uartId, PinNames tx, PinNames rx )
{
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	0015      	movs	r5, r2
    25f8:	001c      	movs	r4, r3
    obj->UartId = uartId;
    25fa:	7001      	strb	r1, [r0, #0]
    25fc:	4b33      	ldr	r3, [pc, #204]	; (26cc <UartMcuInit+0xd8>)
    25fe:	2240      	movs	r2, #64	; 0x40
    2600:	21d4      	movs	r1, #212	; 0xd4
    2602:	505a      	str	r2, [r3, r1]
    2604:	3910      	subs	r1, #16
    2606:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
    2608:	4a31      	ldr	r2, [pc, #196]	; (26d0 <UartMcuInit+0xdc>)
    260a:	69d3      	ldr	r3, [r2, #28]
    260c:	39bc      	subs	r1, #188	; 0xbc
    260e:	430b      	orrs	r3, r1
    2610:	61d3      	str	r3, [r2, #28]
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    hri_mclk_set_APBCMASK_SERCOM3_bit( MCLK );

    // USART initialization
    usart_sync_init( &Usart0, SERCOM3, ( void * )NULL );
    2612:	2200      	movs	r2, #0
    2614:	492f      	ldr	r1, [pc, #188]	; (26d4 <UartMcuInit+0xe0>)
    2616:	4830      	ldr	r0, [pc, #192]	; (26d8 <UartMcuInit+0xe4>)
    2618:	4b30      	ldr	r3, [pc, #192]	; (26dc <UartMcuInit+0xe8>)
    261a:	4798      	blx	r3
	uint8_t pin  = GPIO_PIN(gpio);
    261c:	b2ee      	uxtb	r6, r5
    261e:	231f      	movs	r3, #31
    2620:	4033      	ands	r3, r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2622:	04ea      	lsls	r2, r5, #19
    2624:	0e12      	lsrs	r2, r2, #24
    2626:	01d1      	lsls	r1, r2, #7
    2628:	1859      	adds	r1, r3, r1
    262a:	482d      	ldr	r0, [pc, #180]	; (26e0 <UartMcuInit+0xec>)
    262c:	4684      	mov	ip, r0
    262e:	4461      	add	r1, ip
    2630:	7808      	ldrb	r0, [r1, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2632:	2501      	movs	r5, #1
    2634:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2636:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2638:	7008      	strb	r0, [r1, #0]
		if (pin & 1) {
    263a:	07f1      	lsls	r1, r6, #31
    263c:	d42c      	bmi.n	2698 <UartMcuInit+0xa4>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    263e:	085b      	lsrs	r3, r3, #1
    2640:	01d2      	lsls	r2, r2, #7
    2642:	189b      	adds	r3, r3, r2
    2644:	4a27      	ldr	r2, [pc, #156]	; (26e4 <UartMcuInit+0xf0>)
    2646:	4694      	mov	ip, r2
    2648:	4463      	add	r3, ip
    264a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    264c:	210f      	movs	r1, #15
    264e:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
    2650:	390d      	subs	r1, #13
    2652:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2654:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    2656:	b2e0      	uxtb	r0, r4
    2658:	221f      	movs	r2, #31
    265a:	4002      	ands	r2, r0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    265c:	04e4      	lsls	r4, r4, #19
    265e:	0e24      	lsrs	r4, r4, #24
    2660:	01e3      	lsls	r3, r4, #7
    2662:	18d3      	adds	r3, r2, r3
    2664:	491e      	ldr	r1, [pc, #120]	; (26e0 <UartMcuInit+0xec>)
    2666:	468c      	mov	ip, r1
    2668:	4463      	add	r3, ip
    266a:	7819      	ldrb	r1, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    266c:	2501      	movs	r5, #1
    266e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2670:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2672:	7019      	strb	r1, [r3, #0]
		if (pin & 1) {
    2674:	07c3      	lsls	r3, r0, #31
    2676:	d41c      	bmi.n	26b2 <UartMcuInit+0xbe>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2678:	0852      	lsrs	r2, r2, #1
    267a:	01e4      	lsls	r4, r4, #7
    267c:	1912      	adds	r2, r2, r4
    267e:	4b19      	ldr	r3, [pc, #100]	; (26e4 <UartMcuInit+0xf0>)
    2680:	469c      	mov	ip, r3
    2682:	4462      	add	r2, ip
    2684:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2686:	210f      	movs	r1, #15
    2688:	438b      	bics	r3, r1
	tmp |= PORT_PMUX_PMUXE(data);
    268a:	390d      	subs	r1, #13
    268c:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    268e:	7013      	strb	r3, [r2, #0]

    // UASRT GPIO initialization
    gpio_set_pin_function( tx, PINMUX_PA22C_SERCOM3_PAD0 );
    gpio_set_pin_function( rx, PINMUX_PA23C_SERCOM3_PAD1 );

    usart_sync_enable( &Usart0 );
    2690:	4811      	ldr	r0, [pc, #68]	; (26d8 <UartMcuInit+0xe4>)
    2692:	4b15      	ldr	r3, [pc, #84]	; (26e8 <UartMcuInit+0xf4>)
    2694:	4798      	blx	r3
}
    2696:	bd70      	pop	{r4, r5, r6, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2698:	085b      	lsrs	r3, r3, #1
    269a:	01d2      	lsls	r2, r2, #7
    269c:	189b      	adds	r3, r3, r2
    269e:	4a11      	ldr	r2, [pc, #68]	; (26e4 <UartMcuInit+0xf0>)
    26a0:	4694      	mov	ip, r2
    26a2:	4463      	add	r3, ip
    26a4:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    26a6:	210f      	movs	r1, #15
    26a8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    26aa:	3111      	adds	r1, #17
    26ac:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    26ae:	701a      	strb	r2, [r3, #0]
    26b0:	e7d1      	b.n	2656 <UartMcuInit+0x62>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    26b2:	0852      	lsrs	r2, r2, #1
    26b4:	01e4      	lsls	r4, r4, #7
    26b6:	1912      	adds	r2, r2, r4
    26b8:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <UartMcuInit+0xf0>)
    26ba:	469c      	mov	ip, r3
    26bc:	4462      	add	r2, ip
    26be:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    26c0:	210f      	movs	r1, #15
    26c2:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    26c4:	3111      	adds	r1, #17
    26c6:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    26c8:	7013      	strb	r3, [r2, #0]
    26ca:	e7e1      	b.n	2690 <UartMcuInit+0x9c>
    26cc:	40001800 	.word	0x40001800
    26d0:	40000400 	.word	0x40000400
    26d4:	42000c00 	.word	0x42000c00
    26d8:	20001ba0 	.word	0x20001ba0
    26dc:	00001535 	.word	0x00001535
    26e0:	40002840 	.word	0x40002840
    26e4:	40002830 	.word	0x40002830
    26e8:	00001581 	.word	0x00001581

000026ec <UartMcuConfig>:

void UartMcuConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
    26ec:	b510      	push	{r4, lr}
    usart_sync_set_baud_rate( &Usart0, baudrate );
    26ee:	0011      	movs	r1, r2
    26f0:	4801      	ldr	r0, [pc, #4]	; (26f8 <UartMcuConfig+0xc>)
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <UartMcuConfig+0x10>)
    26f4:	4798      	blx	r3
}
    26f6:	bd10      	pop	{r4, pc}
    26f8:	20001ba0 	.word	0x20001ba0
    26fc:	000015ad 	.word	0x000015ad

00002700 <UartMcuPutBuffer>:
        return 1; // Busy
    }
}

uint8_t UartMcuPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
    2700:	b510      	push	{r4, lr}
    if( io_write( &Usart0.io, buffer, size ) == 0 )
    2702:	4803      	ldr	r0, [pc, #12]	; (2710 <UartMcuPutBuffer+0x10>)
    2704:	4b03      	ldr	r3, [pc, #12]	; (2714 <UartMcuPutBuffer+0x14>)
    2706:	4798      	blx	r3
    2708:	4243      	negs	r3, r0
    270a:	4158      	adcs	r0, r3
    270c:	b2c0      	uxtb	r0, r0
    {
        return 1; //Error
    }
    return 0; // OK
}
    270e:	bd10      	pop	{r4, pc}
    2710:	20001ba0 	.word	0x20001ba0
    2714:	000012e1 	.word	0x000012e1

00002718 <UartMcuGetBuffer>:

uint8_t UartMcuGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
    2718:	b510      	push	{r4, lr}
    271a:	001c      	movs	r4, r3
    *nbReadBytes = io_read( &Usart0.io, buffer, size );
    271c:	4804      	ldr	r0, [pc, #16]	; (2730 <UartMcuGetBuffer+0x18>)
    271e:	4b05      	ldr	r3, [pc, #20]	; (2734 <UartMcuGetBuffer+0x1c>)
    2720:	4798      	blx	r3
    2722:	b280      	uxth	r0, r0
    2724:	8020      	strh	r0, [r4, #0]
    if( *nbReadBytes == 0 )
    2726:	4243      	negs	r3, r0
    2728:	4158      	adcs	r0, r3
    272a:	b2c0      	uxtb	r0, r0
    {
        return 1; // Empty
    }
    return 0; // OK
}
    272c:	bd10      	pop	{r4, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	20001ba0 	.word	0x20001ba0
    2734:	00001315 	.word	0x00001315

00002738 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2738:	e7fe      	b.n	2738 <Dummy_Handler>
	...

0000273c <Reset_Handler>:
{
    273c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    273e:	4a1a      	ldr	r2, [pc, #104]	; (27a8 <Reset_Handler+0x6c>)
    2740:	4b1a      	ldr	r3, [pc, #104]	; (27ac <Reset_Handler+0x70>)
    2742:	429a      	cmp	r2, r3
    2744:	d011      	beq.n	276a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2746:	001a      	movs	r2, r3
    2748:	4b19      	ldr	r3, [pc, #100]	; (27b0 <Reset_Handler+0x74>)
    274a:	429a      	cmp	r2, r3
    274c:	d20d      	bcs.n	276a <Reset_Handler+0x2e>
    274e:	4a19      	ldr	r2, [pc, #100]	; (27b4 <Reset_Handler+0x78>)
    2750:	3303      	adds	r3, #3
    2752:	1a9b      	subs	r3, r3, r2
    2754:	089b      	lsrs	r3, r3, #2
    2756:	3301      	adds	r3, #1
    2758:	009b      	lsls	r3, r3, #2
    275a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    275c:	4813      	ldr	r0, [pc, #76]	; (27ac <Reset_Handler+0x70>)
    275e:	4912      	ldr	r1, [pc, #72]	; (27a8 <Reset_Handler+0x6c>)
    2760:	588c      	ldr	r4, [r1, r2]
    2762:	5084      	str	r4, [r0, r2]
    2764:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2766:	429a      	cmp	r2, r3
    2768:	d1fa      	bne.n	2760 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    276a:	4a13      	ldr	r2, [pc, #76]	; (27b8 <Reset_Handler+0x7c>)
    276c:	4b13      	ldr	r3, [pc, #76]	; (27bc <Reset_Handler+0x80>)
    276e:	429a      	cmp	r2, r3
    2770:	d20a      	bcs.n	2788 <Reset_Handler+0x4c>
    2772:	43d3      	mvns	r3, r2
    2774:	4911      	ldr	r1, [pc, #68]	; (27bc <Reset_Handler+0x80>)
    2776:	185b      	adds	r3, r3, r1
    2778:	2103      	movs	r1, #3
    277a:	438b      	bics	r3, r1
    277c:	3304      	adds	r3, #4
    277e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2780:	2100      	movs	r1, #0
    2782:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2784:	4293      	cmp	r3, r2
    2786:	d1fc      	bne.n	2782 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2788:	4a0d      	ldr	r2, [pc, #52]	; (27c0 <Reset_Handler+0x84>)
    278a:	21ff      	movs	r1, #255	; 0xff
    278c:	4b0d      	ldr	r3, [pc, #52]	; (27c4 <Reset_Handler+0x88>)
    278e:	438b      	bics	r3, r1
    2790:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2792:	4a0d      	ldr	r2, [pc, #52]	; (27c8 <Reset_Handler+0x8c>)
    2794:	6853      	ldr	r3, [r2, #4]
    2796:	397f      	subs	r1, #127	; 0x7f
    2798:	430b      	orrs	r3, r1
    279a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    279c:	4b0b      	ldr	r3, [pc, #44]	; (27cc <Reset_Handler+0x90>)
    279e:	4798      	blx	r3
        main();
    27a0:	4b0b      	ldr	r3, [pc, #44]	; (27d0 <Reset_Handler+0x94>)
    27a2:	4798      	blx	r3
    27a4:	e7fe      	b.n	27a4 <Reset_Handler+0x68>
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	00014e14 	.word	0x00014e14
    27ac:	20000000 	.word	0x20000000
    27b0:	20000ae4 	.word	0x20000ae4
    27b4:	20000004 	.word	0x20000004
    27b8:	20000ae4 	.word	0x20000ae4
    27bc:	20001d2c 	.word	0x20001d2c
    27c0:	e000ed00 	.word	0xe000ed00
    27c4:	00000000 	.word	0x00000000
    27c8:	41004000 	.word	0x41004000
    27cc:	0000eb91 	.word	0x0000eb91
    27d0:	0000086d 	.word	0x0000086d

000027d4 <OnRadioTxTimeout>:
        MacCtx.MacCallbacks->MacProcessNotify( );
    }
}

static void OnRadioTxTimeout( void )
{
    27d4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
    27d6:	4b07      	ldr	r3, [pc, #28]	; (27f4 <OnRadioTxTimeout+0x20>)
    27d8:	781a      	ldrb	r2, [r3, #0]
    27da:	2104      	movs	r1, #4
    27dc:	430a      	orrs	r2, r1
    27de:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    27e0:	22da      	movs	r2, #218	; 0xda
    27e2:	0092      	lsls	r2, r2, #2
    27e4:	589b      	ldr	r3, [r3, r2]
    27e6:	2b00      	cmp	r3, #0
    27e8:	d003      	beq.n	27f2 <OnRadioTxTimeout+0x1e>
    27ea:	68db      	ldr	r3, [r3, #12]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d000      	beq.n	27f2 <OnRadioTxTimeout+0x1e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    27f0:	4798      	blx	r3
    }
}
    27f2:	bd10      	pop	{r4, pc}
    27f4:	20000cbc 	.word	0x20000cbc

000027f8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    27f8:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
    27fa:	4b07      	ldr	r3, [pc, #28]	; (2818 <OnRadioRxError+0x20>)
    27fc:	781a      	ldrb	r2, [r3, #0]
    27fe:	2102      	movs	r1, #2
    2800:	430a      	orrs	r2, r1
    2802:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    2804:	22da      	movs	r2, #218	; 0xda
    2806:	0092      	lsls	r2, r2, #2
    2808:	589b      	ldr	r3, [r3, r2]
    280a:	2b00      	cmp	r3, #0
    280c:	d003      	beq.n	2816 <OnRadioRxError+0x1e>
    280e:	68db      	ldr	r3, [r3, #12]
    2810:	2b00      	cmp	r3, #0
    2812:	d000      	beq.n	2816 <OnRadioRxError+0x1e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    2814:	4798      	blx	r3
    }
}
    2816:	bd10      	pop	{r4, pc}
    2818:	20000cbc 	.word	0x20000cbc

0000281c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    281c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
    281e:	4b07      	ldr	r3, [pc, #28]	; (283c <OnRadioRxTimeout+0x20>)
    2820:	781a      	ldrb	r2, [r3, #0]
    2822:	2101      	movs	r1, #1
    2824:	430a      	orrs	r2, r1
    2826:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    2828:	22da      	movs	r2, #218	; 0xda
    282a:	0092      	lsls	r2, r2, #2
    282c:	589b      	ldr	r3, [r3, r2]
    282e:	2b00      	cmp	r3, #0
    2830:	d003      	beq.n	283a <OnRadioRxTimeout+0x1e>
    2832:	68db      	ldr	r3, [r3, #12]
    2834:	2b00      	cmp	r3, #0
    2836:	d000      	beq.n	283a <OnRadioRxTimeout+0x1e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    2838:	4798      	blx	r3
    }
}
    283a:	bd10      	pop	{r4, pc}
    283c:	20000cbc 	.word	0x20000cbc

00002840 <RxWindowSetup>:
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
}

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
    2840:	b510      	push	{r4, lr}
    if( rxContinuous == false )
    2842:	2800      	cmp	r0, #0
    2844:	d004      	beq.n	2850 <RxWindowSetup+0x10>
    {
        Radio.Rx( maxRxWindow );
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    2846:	4b05      	ldr	r3, [pc, #20]	; (285c <RxWindowSetup+0x1c>)
    2848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    284a:	2000      	movs	r0, #0
    284c:	4798      	blx	r3
    }
}
    284e:	bd10      	pop	{r4, pc}
        Radio.Rx( maxRxWindow );
    2850:	4b02      	ldr	r3, [pc, #8]	; (285c <RxWindowSetup+0x1c>)
    2852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2854:	0008      	movs	r0, r1
    2856:	4798      	blx	r3
    2858:	e7f9      	b.n	284e <RxWindowSetup+0xe>
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	0001407c 	.word	0x0001407c

00002860 <CallNvmCtxCallback>:

    return true;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    2860:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
    2862:	23da      	movs	r3, #218	; 0xda
    2864:	009b      	lsls	r3, r3, #2
    2866:	4a04      	ldr	r2, [pc, #16]	; (2878 <CallNvmCtxCallback+0x18>)
    2868:	58d3      	ldr	r3, [r2, r3]
    286a:	2b00      	cmp	r3, #0
    286c:	d003      	beq.n	2876 <CallNvmCtxCallback+0x16>
    286e:	689b      	ldr	r3, [r3, #8]
    2870:	2b00      	cmp	r3, #0
    2872:	d000      	beq.n	2876 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
    2874:	4798      	blx	r3
    }
}
    2876:	bd10      	pop	{r4, pc}
    2878:	20000cbc 	.word	0x20000cbc

0000287c <EventCryptoNvmCtxChanged>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
}

static void EventCryptoNvmCtxChanged( void )
{
    287c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
    287e:	2002      	movs	r0, #2
    2880:	4b01      	ldr	r3, [pc, #4]	; (2888 <EventCryptoNvmCtxChanged+0xc>)
    2882:	4798      	blx	r3
}
    2884:	bd10      	pop	{r4, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	00002861 	.word	0x00002861

0000288c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
    288c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
    288e:	2003      	movs	r0, #3
    2890:	4b01      	ldr	r3, [pc, #4]	; (2898 <EventSecureElementNvmCtxChanged+0xc>)
    2892:	4798      	blx	r3
}
    2894:	bd10      	pop	{r4, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	00002861 	.word	0x00002861

0000289c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
    289c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
    289e:	2004      	movs	r0, #4
    28a0:	4b01      	ldr	r3, [pc, #4]	; (28a8 <EventCommandsNvmCtxChanged+0xc>)
    28a2:	4798      	blx	r3
}
    28a4:	bd10      	pop	{r4, pc}
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	00002861 	.word	0x00002861

000028ac <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
    28ac:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
    28ae:	2005      	movs	r0, #5
    28b0:	4b01      	ldr	r3, [pc, #4]	; (28b8 <EventClassBNvmCtxChanged+0xc>)
    28b2:	4798      	blx	r3
}
    28b4:	bd10      	pop	{r4, pc}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	00002861 	.word	0x00002861

000028bc <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
    28bc:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
    28be:	2006      	movs	r0, #6
    28c0:	4b01      	ldr	r3, [pc, #4]	; (28c8 <EventConfirmQueueNvmCtxChanged+0xc>)
    28c2:	4798      	blx	r3
}
    28c4:	bd10      	pop	{r4, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	00002861 	.word	0x00002861

000028cc <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
    28cc:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
    28ce:	2007      	movs	r0, #7
    28d0:	4b01      	ldr	r3, [pc, #4]	; (28d8 <EventFCntHandlerNvmCtxChanged+0xc>)
    28d2:	4798      	blx	r3
}
    28d4:	bd10      	pop	{r4, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	00002861 	.word	0x00002861

000028dc <GetMaxAppPayloadWithoutFOptsLength>:
{
    28dc:	b500      	push	{lr}
    28de:	b083      	sub	sp, #12
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    28e0:	2399      	movs	r3, #153	; 0x99
    28e2:	00db      	lsls	r3, r3, #3
    28e4:	4a0c      	ldr	r2, [pc, #48]	; (2918 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
    28e6:	58d3      	ldr	r3, [r2, r3]
    28e8:	aa01      	add	r2, sp, #4
    28ea:	2180      	movs	r1, #128	; 0x80
    28ec:	0049      	lsls	r1, r1, #1
    28ee:	5c59      	ldrb	r1, [r3, r1]
    28f0:	7091      	strb	r1, [r2, #2]
    getPhy.Datarate = datarate;
    28f2:	7050      	strb	r0, [r2, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    28f4:	210c      	movs	r1, #12
    28f6:	7011      	strb	r1, [r2, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
    28f8:	2216      	movs	r2, #22
    28fa:	32ff      	adds	r2, #255	; 0xff
    28fc:	5c9a      	ldrb	r2, [r3, r2]
    28fe:	2a00      	cmp	r2, #0
    2900:	d002      	beq.n	2908 <GetMaxAppPayloadWithoutFOptsLength+0x2c>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    2902:	3101      	adds	r1, #1
    2904:	aa01      	add	r2, sp, #4
    2906:	7011      	strb	r1, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    2908:	7818      	ldrb	r0, [r3, #0]
    290a:	a901      	add	r1, sp, #4
    290c:	4b03      	ldr	r3, [pc, #12]	; (291c <GetMaxAppPayloadWithoutFOptsLength+0x40>)
    290e:	4798      	blx	r3
    return phyParam.Value;
    2910:	b2c0      	uxtb	r0, r0
}
    2912:	b003      	add	sp, #12
    2914:	bd00      	pop	{pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	20000cbc 	.word	0x20000cbc
    291c:	00008445 	.word	0x00008445

00002920 <OnAckTimeoutTimerEvent>:
{
    2920:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
    2922:	4c10      	ldr	r4, [pc, #64]	; (2964 <OnAckTimeoutTimerEvent+0x44>)
    2924:	23fd      	movs	r3, #253	; 0xfd
    2926:	009b      	lsls	r3, r3, #2
    2928:	18e0      	adds	r0, r4, r3
    292a:	4b0f      	ldr	r3, [pc, #60]	; (2968 <OnAckTimeoutTimerEvent+0x48>)
    292c:	4798      	blx	r3
    if( MacCtx.NvmCtx->NodeAckRequested == true )
    292e:	2399      	movs	r3, #153	; 0x99
    2930:	00db      	lsls	r3, r3, #3
    2932:	58e3      	ldr	r3, [r4, r3]
    2934:	4a0d      	ldr	r2, [pc, #52]	; (296c <OnAckTimeoutTimerEvent+0x4c>)
    2936:	5c9a      	ldrb	r2, [r3, r2]
    2938:	2a00      	cmp	r2, #0
    293a:	d002      	beq.n	2942 <OnAckTimeoutTimerEvent+0x22>
        MacCtx.NvmCtx->AckTimeoutRetry = true;
    293c:	2101      	movs	r1, #1
    293e:	4a0c      	ldr	r2, [pc, #48]	; (2970 <OnAckTimeoutTimerEvent+0x50>)
    2940:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    2942:	2399      	movs	r3, #153	; 0x99
    2944:	00db      	lsls	r3, r3, #3
    2946:	4a07      	ldr	r2, [pc, #28]	; (2964 <OnAckTimeoutTimerEvent+0x44>)
    2948:	58d2      	ldr	r2, [r2, r3]
    294a:	23c8      	movs	r3, #200	; 0xc8
    294c:	5cd3      	ldrb	r3, [r2, r3]
    294e:	2b02      	cmp	r3, #2
    2950:	d000      	beq.n	2954 <OnAckTimeoutTimerEvent+0x34>
}
    2952:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
    2954:	4903      	ldr	r1, [pc, #12]	; (2964 <OnAckTimeoutTimerEvent+0x44>)
    2956:	4a07      	ldr	r2, [pc, #28]	; (2974 <OnAckTimeoutTimerEvent+0x54>)
    2958:	5c8b      	ldrb	r3, [r1, r2]
    295a:	2010      	movs	r0, #16
    295c:	4303      	orrs	r3, r0
    295e:	548b      	strb	r3, [r1, r2]
}
    2960:	e7f7      	b.n	2952 <OnAckTimeoutTimerEvent+0x32>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	20000cbc 	.word	0x20000cbc
    2968:	0000c1a5 	.word	0x0000c1a5
    296c:	00000217 	.word	0x00000217
    2970:	00000216 	.word	0x00000216
    2974:	00000469 	.word	0x00000469

00002978 <PrepareRxDoneAbort>:
{
    2978:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
    297a:	4b0d      	ldr	r3, [pc, #52]	; (29b0 <PrepareRxDoneAbort+0x38>)
    297c:	21d8      	movs	r1, #216	; 0xd8
    297e:	0089      	lsls	r1, r1, #2
    2980:	2280      	movs	r2, #128	; 0x80
    2982:	5858      	ldr	r0, [r3, r1]
    2984:	4302      	orrs	r2, r0
    2986:	505a      	str	r2, [r3, r1]
    if( MacCtx.NvmCtx->NodeAckRequested )
    2988:	2299      	movs	r2, #153	; 0x99
    298a:	00d2      	lsls	r2, r2, #3
    298c:	589a      	ldr	r2, [r3, r2]
    298e:	4b09      	ldr	r3, [pc, #36]	; (29b4 <PrepareRxDoneAbort+0x3c>)
    2990:	5cd3      	ldrb	r3, [r2, r3]
    2992:	2b00      	cmp	r3, #0
    2994:	d108      	bne.n	29a8 <PrepareRxDoneAbort+0x30>
    MacCtx.MacFlags.Bits.McpsInd = 1;
    2996:	4906      	ldr	r1, [pc, #24]	; (29b0 <PrepareRxDoneAbort+0x38>)
    2998:	4a07      	ldr	r2, [pc, #28]	; (29b8 <PrepareRxDoneAbort+0x40>)
    299a:	5c8b      	ldrb	r3, [r1, r2]
    299c:	2002      	movs	r0, #2
    299e:	4303      	orrs	r3, r0
    MacCtx.MacFlags.Bits.MacDone = 1;
    29a0:	2010      	movs	r0, #16
    29a2:	4303      	orrs	r3, r0
    29a4:	548b      	strb	r3, [r1, r2]
}
    29a6:	bd10      	pop	{r4, pc}
        OnAckTimeoutTimerEvent( );
    29a8:	4b04      	ldr	r3, [pc, #16]	; (29bc <PrepareRxDoneAbort+0x44>)
    29aa:	4798      	blx	r3
    29ac:	e7f3      	b.n	2996 <PrepareRxDoneAbort+0x1e>
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20000cbc 	.word	0x20000cbc
    29b4:	00000217 	.word	0x00000217
    29b8:	00000469 	.word	0x00000469
    29bc:	00002921 	.word	0x00002921

000029c0 <StopRetransmission>:
{
    29c0:	b510      	push	{r4, lr}
    29c2:	b082      	sub	sp, #8
    uint32_t fCntUp = 0;
    29c4:	2300      	movs	r3, #0
    29c6:	9301      	str	r3, [sp, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    29c8:	a801      	add	r0, sp, #4
    29ca:	4b36      	ldr	r3, [pc, #216]	; (2aa4 <StopRetransmission+0xe4>)
    29cc:	4798      	blx	r3
        return false;
    29ce:	2300      	movs	r3, #0
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    29d0:	2800      	cmp	r0, #0
    29d2:	d002      	beq.n	29da <StopRetransmission+0x1a>
}
    29d4:	0018      	movs	r0, r3
    29d6:	b002      	add	sp, #8
    29d8:	bd10      	pop	{r4, pc}
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
    29da:	9801      	ldr	r0, [sp, #4]
    29dc:	4b32      	ldr	r3, [pc, #200]	; (2aa8 <StopRetransmission+0xe8>)
    29de:	4798      	blx	r3
        return false;
    29e0:	2300      	movs	r3, #0
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
    29e2:	2800      	cmp	r0, #0
    29e4:	d1f6      	bne.n	29d4 <StopRetransmission+0x14>
    if( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 )
    29e6:	2399      	movs	r3, #153	; 0x99
    29e8:	00db      	lsls	r3, r3, #3
    29ea:	4a30      	ldr	r2, [pc, #192]	; (2aac <StopRetransmission+0xec>)
    29ec:	58d3      	ldr	r3, [r2, r3]
    29ee:	4a30      	ldr	r2, [pc, #192]	; (2ab0 <StopRetransmission+0xf0>)
    29f0:	5a9a      	ldrh	r2, [r3, r2]
    29f2:	2a00      	cmp	r2, #0
    29f4:	d004      	beq.n	2a00 <StopRetransmission+0x40>
        MacCtx.NvmCtx->Rejoin0UplinksCounter++;
    29f6:	2189      	movs	r1, #137	; 0x89
    29f8:	0089      	lsls	r1, r1, #2
    29fa:	5a5a      	ldrh	r2, [r3, r1]
    29fc:	3201      	adds	r2, #1
    29fe:	525a      	strh	r2, [r3, r1]
    if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    2a00:	2399      	movs	r3, #153	; 0x99
    2a02:	00db      	lsls	r3, r3, #3
    2a04:	4a29      	ldr	r2, [pc, #164]	; (2aac <StopRetransmission+0xec>)
    2a06:	58d2      	ldr	r2, [r2, r3]
    2a08:	4b2a      	ldr	r3, [pc, #168]	; (2ab4 <StopRetransmission+0xf4>)
    2a0a:	5cd3      	ldrb	r3, [r2, r3]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d125      	bne.n	2a5c <StopRetransmission+0x9c>
    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
    2a10:	4b29      	ldr	r3, [pc, #164]	; (2ab8 <StopRetransmission+0xf8>)
    2a12:	4a26      	ldr	r2, [pc, #152]	; (2aac <StopRetransmission+0xec>)
    2a14:	5cd3      	ldrb	r3, [r2, r3]
    2a16:	079b      	lsls	r3, r3, #30
    2a18:	d40a      	bmi.n	2a30 <StopRetransmission+0x70>
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
    2a1a:	2399      	movs	r3, #153	; 0x99
    2a1c:	00db      	lsls	r3, r3, #3
    2a1e:	58d3      	ldr	r3, [r2, r3]
    2a20:	22ca      	movs	r2, #202	; 0xca
    2a22:	5c9a      	ldrb	r2, [r3, r2]
    2a24:	2a00      	cmp	r2, #0
    2a26:	d003      	beq.n	2a30 <StopRetransmission+0x70>
            MacCtx.NvmCtx->AdrAckCounter++;
    2a28:	21cc      	movs	r1, #204	; 0xcc
    2a2a:	585a      	ldr	r2, [r3, r1]
    2a2c:	3201      	adds	r2, #1
    2a2e:	505a      	str	r2, [r3, r1]
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    2a30:	4b1e      	ldr	r3, [pc, #120]	; (2aac <StopRetransmission+0xec>)
    2a32:	2199      	movs	r1, #153	; 0x99
    2a34:	00c9      	lsls	r1, r1, #3
    2a36:	2200      	movs	r2, #0
    2a38:	2088      	movs	r0, #136	; 0x88
    2a3a:	0040      	lsls	r0, r0, #1
    2a3c:	585c      	ldr	r4, [r3, r1]
    2a3e:	5422      	strb	r2, [r4, r0]
    MacCtx.NvmCtx->NodeAckRequested = false;
    2a40:	481e      	ldr	r0, [pc, #120]	; (2abc <StopRetransmission+0xfc>)
    2a42:	585c      	ldr	r4, [r3, r1]
    2a44:	5422      	strb	r2, [r4, r0]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    2a46:	5858      	ldr	r0, [r3, r1]
    2a48:	491d      	ldr	r1, [pc, #116]	; (2ac0 <StopRetransmission+0x100>)
    2a4a:	5442      	strb	r2, [r0, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    2a4c:	314b      	adds	r1, #75	; 0x4b
    2a4e:	31ff      	adds	r1, #255	; 0xff
    2a50:	3202      	adds	r2, #2
    2a52:	5858      	ldr	r0, [r3, r1]
    2a54:	4390      	bics	r0, r2
    2a56:	5058      	str	r0, [r3, r1]
    return true;
    2a58:	2301      	movs	r3, #1
    2a5a:	e7bb      	b.n	29d4 <StopRetransmission+0x14>
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
    2a5c:	4669      	mov	r1, sp
    2a5e:	200b      	movs	r0, #11
    2a60:	4b18      	ldr	r3, [pc, #96]	; (2ac4 <StopRetransmission+0x104>)
    2a62:	4798      	blx	r3
    2a64:	2800      	cmp	r0, #0
    2a66:	d1d3      	bne.n	2a10 <StopRetransmission+0x50>
            MacCtx.NvmCtx->RekeyIndUplinksCounter++;
    2a68:	4810      	ldr	r0, [pc, #64]	; (2aac <StopRetransmission+0xec>)
    2a6a:	2199      	movs	r1, #153	; 0x99
    2a6c:	00c9      	lsls	r1, r1, #3
    2a6e:	5844      	ldr	r4, [r0, r1]
    2a70:	4b15      	ldr	r3, [pc, #84]	; (2ac8 <StopRetransmission+0x108>)
    2a72:	5ae2      	ldrh	r2, [r4, r3]
    2a74:	3201      	adds	r2, #1
    2a76:	52e2      	strh	r2, [r4, r3]
            if( MacCtx.NvmCtx->RekeyIndUplinksCounter == MacCtx.NvmCtx->AdrAckLimit )
    2a78:	5842      	ldr	r2, [r0, r1]
    2a7a:	5ad1      	ldrh	r1, [r2, r3]
    2a7c:	3b6b      	subs	r3, #107	; 0x6b
    2a7e:	3bff      	subs	r3, #255	; 0xff
    2a80:	5ad3      	ldrh	r3, [r2, r3]
    2a82:	4299      	cmp	r1, r3
    2a84:	d1c4      	bne.n	2a10 <StopRetransmission+0x50>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    2a86:	2100      	movs	r1, #0
    2a88:	2388      	movs	r3, #136	; 0x88
    2a8a:	009b      	lsls	r3, r3, #2
    2a8c:	54d1      	strb	r1, [r2, r3]
                MacCtx.MacFlags.Bits.MlmeInd = 1;
    2a8e:	0003      	movs	r3, r0
    2a90:	4909      	ldr	r1, [pc, #36]	; (2ab8 <StopRetransmission+0xf8>)
    2a92:	5c42      	ldrb	r2, [r0, r1]
    2a94:	2008      	movs	r0, #8
    2a96:	4302      	orrs	r2, r0
    2a98:	545a      	strb	r2, [r3, r1]
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
    2a9a:	210f      	movs	r1, #15
    2a9c:	228a      	movs	r2, #138	; 0x8a
    2a9e:	00d2      	lsls	r2, r2, #3
    2aa0:	5499      	strb	r1, [r3, r2]
    2aa2:	e7b5      	b.n	2a10 <StopRetransmission+0x50>
    2aa4:	00007fd1 	.word	0x00007fd1
    2aa8:	00007fe9 	.word	0x00007fe9
    2aac:	20000cbc 	.word	0x20000cbc
    2ab0:	00000222 	.word	0x00000222
    2ab4:	0000021e 	.word	0x0000021e
    2ab8:	00000469 	.word	0x00000469
    2abc:	00000217 	.word	0x00000217
    2ac0:	00000216 	.word	0x00000216
    2ac4:	00006c69 	.word	0x00006c69
    2ac8:	0000023a 	.word	0x0000023a

00002acc <OnRxWindow2TimerEvent>:
{
    2acc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RxWindowTimer2 );
    2ace:	4c26      	ldr	r4, [pc, #152]	; (2b68 <OnRxWindow2TimerEvent+0x9c>)
    2ad0:	23ec      	movs	r3, #236	; 0xec
    2ad2:	009b      	lsls	r3, r3, #2
    2ad4:	18e0      	adds	r0, r4, r3
    2ad6:	4b25      	ldr	r3, [pc, #148]	; (2b6c <OnRxWindow2TimerEvent+0xa0>)
    2ad8:	4798      	blx	r3
    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
    2ada:	2399      	movs	r3, #153	; 0x99
    2adc:	00db      	lsls	r3, r3, #3
    2ade:	58e3      	ldr	r3, [r4, r3]
    2ae0:	2214      	movs	r2, #20
    2ae2:	32ff      	adds	r2, #255	; 0xff
    2ae4:	5c99      	ldrb	r1, [r3, r2]
    2ae6:	22f8      	movs	r2, #248	; 0xf8
    2ae8:	0092      	lsls	r2, r2, #2
    2aea:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
    2aec:	22f8      	movs	r2, #248	; 0xf8
    2aee:	5899      	ldr	r1, [r3, r2]
    2af0:	22f9      	movs	r2, #249	; 0xf9
    2af2:	0092      	lsls	r2, r2, #2
    2af4:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    2af6:	2202      	movs	r2, #2
    2af8:	32ff      	adds	r2, #255	; 0xff
    2afa:	5c99      	ldrb	r1, [r3, r2]
    2afc:	22fc      	movs	r2, #252	; 0xfc
    2afe:	0092      	lsls	r2, r2, #2
    2b00:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    2b02:	2216      	movs	r2, #22
    2b04:	32ff      	adds	r2, #255	; 0xff
    2b06:	5c99      	ldrb	r1, [r3, r2]
    2b08:	4a19      	ldr	r2, [pc, #100]	; (2b70 <OnRxWindow2TimerEvent+0xa4>)
    2b0a:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    2b0c:	2101      	movs	r1, #1
    2b0e:	4a19      	ldr	r2, [pc, #100]	; (2b74 <OnRxWindow2TimerEvent+0xa8>)
    2b10:	54a1      	strb	r1, [r4, r2]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    2b12:	22c8      	movs	r2, #200	; 0xc8
    2b14:	5c9a      	ldrb	r2, [r3, r2]
    2b16:	2a02      	cmp	r2, #2
    2b18:	d011      	beq.n	2b3e <OnRxWindow2TimerEvent+0x72>
        MacCtx.RxWindow2Config.RxContinuous = false;
    2b1a:	2000      	movs	r0, #0
    2b1c:	4a16      	ldr	r2, [pc, #88]	; (2b78 <OnRxWindow2TimerEvent+0xac>)
    2b1e:	4912      	ldr	r1, [pc, #72]	; (2b68 <OnRxWindow2TimerEvent+0x9c>)
    2b20:	5488      	strb	r0, [r1, r2]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
    2b22:	4911      	ldr	r1, [pc, #68]	; (2b68 <OnRxWindow2TimerEvent+0x9c>)
    2b24:	2282      	movs	r2, #130	; 0x82
    2b26:	00d2      	lsls	r2, r2, #3
    2b28:	188a      	adds	r2, r1, r2
    2b2a:	20f8      	movs	r0, #248	; 0xf8
    2b2c:	0080      	lsls	r0, r0, #2
    2b2e:	4684      	mov	ip, r0
    2b30:	4461      	add	r1, ip
    2b32:	7818      	ldrb	r0, [r3, #0]
    2b34:	4b11      	ldr	r3, [pc, #68]	; (2b7c <OnRxWindow2TimerEvent+0xb0>)
    2b36:	4798      	blx	r3
    2b38:	2800      	cmp	r0, #0
    2b3a:	d105      	bne.n	2b48 <OnRxWindow2TimerEvent+0x7c>
}
    2b3c:	bd10      	pop	{r4, pc}
        MacCtx.RxWindow2Config.RxContinuous = true;
    2b3e:	2001      	movs	r0, #1
    2b40:	4a0d      	ldr	r2, [pc, #52]	; (2b78 <OnRxWindow2TimerEvent+0xac>)
    2b42:	4909      	ldr	r1, [pc, #36]	; (2b68 <OnRxWindow2TimerEvent+0x9c>)
    2b44:	5488      	strb	r0, [r1, r2]
    2b46:	e7ec      	b.n	2b22 <OnRxWindow2TimerEvent+0x56>
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    2b48:	4c07      	ldr	r4, [pc, #28]	; (2b68 <OnRxWindow2TimerEvent+0x9c>)
    2b4a:	2399      	movs	r3, #153	; 0x99
    2b4c:	00db      	lsls	r3, r3, #3
    2b4e:	58e2      	ldr	r2, [r4, r3]
    2b50:	23e0      	movs	r3, #224	; 0xe0
    2b52:	58d1      	ldr	r1, [r2, r3]
    2b54:	4b08      	ldr	r3, [pc, #32]	; (2b78 <OnRxWindow2TimerEvent+0xac>)
    2b56:	5ce0      	ldrb	r0, [r4, r3]
    2b58:	4b09      	ldr	r3, [pc, #36]	; (2b80 <OnRxWindow2TimerEvent+0xb4>)
    2b5a:	4798      	blx	r3
        MacCtx.RxSlot = RX_SLOT_WIN_2;
    2b5c:	2201      	movs	r2, #1
    2b5e:	238d      	movs	r3, #141	; 0x8d
    2b60:	00db      	lsls	r3, r3, #3
    2b62:	54e2      	strb	r2, [r4, r3]
}
    2b64:	e7ea      	b.n	2b3c <OnRxWindow2TimerEvent+0x70>
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	20000cbc 	.word	0x20000cbc
    2b6c:	0000c1a5 	.word	0x0000c1a5
    2b70:	000003f1 	.word	0x000003f1
    2b74:	000003f3 	.word	0x000003f3
    2b78:	000003f2 	.word	0x000003f2
    2b7c:	00008509 	.word	0x00008509
    2b80:	00002841 	.word	0x00002841

00002b84 <OpenContinuousRx2Window>:
{
    2b84:	b510      	push	{r4, lr}
    OnRxWindow2TimerEvent( );
    2b86:	4b04      	ldr	r3, [pc, #16]	; (2b98 <OpenContinuousRx2Window+0x14>)
    2b88:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    2b8a:	2102      	movs	r1, #2
    2b8c:	238d      	movs	r3, #141	; 0x8d
    2b8e:	00db      	lsls	r3, r3, #3
    2b90:	4a02      	ldr	r2, [pc, #8]	; (2b9c <OpenContinuousRx2Window+0x18>)
    2b92:	54d1      	strb	r1, [r2, r3]
}
    2b94:	bd10      	pop	{r4, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	00002acd 	.word	0x00002acd
    2b9c:	20000cbc 	.word	0x20000cbc

00002ba0 <HandleRadioRxErrorTimeout>:
{
    2ba0:	b570      	push	{r4, r5, r6, lr}
    2ba2:	0005      	movs	r5, r0
    2ba4:	000e      	movs	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    2ba6:	2399      	movs	r3, #153	; 0x99
    2ba8:	00db      	lsls	r3, r3, #3
    2baa:	4a4b      	ldr	r2, [pc, #300]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2bac:	58d2      	ldr	r2, [r2, r3]
    2bae:	23c8      	movs	r3, #200	; 0xc8
    2bb0:	5cd3      	ldrb	r3, [r2, r3]
    2bb2:	2b02      	cmp	r3, #2
    2bb4:	d002      	beq.n	2bbc <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
    2bb6:	4b49      	ldr	r3, [pc, #292]	; (2cdc <HandleRadioRxErrorTimeout+0x13c>)
    2bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bba:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
    2bbc:	4b48      	ldr	r3, [pc, #288]	; (2ce0 <HandleRadioRxErrorTimeout+0x140>)
    2bbe:	4798      	blx	r3
    2bc0:	1e04      	subs	r4, r0, #0
    2bc2:	d139      	bne.n	2c38 <HandleRadioRxErrorTimeout+0x98>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    2bc4:	2399      	movs	r3, #153	; 0x99
    2bc6:	00db      	lsls	r3, r3, #3
    2bc8:	4a43      	ldr	r2, [pc, #268]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2bca:	58d2      	ldr	r2, [r2, r3]
    2bcc:	23c8      	movs	r3, #200	; 0xc8
    2bce:	5cd3      	ldrb	r3, [r2, r3]
    2bd0:	2b01      	cmp	r3, #1
    2bd2:	d047      	beq.n	2c64 <HandleRadioRxErrorTimeout+0xc4>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    2bd4:	238d      	movs	r3, #141	; 0x8d
    2bd6:	00db      	lsls	r3, r3, #3
    2bd8:	4a3f      	ldr	r2, [pc, #252]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2bda:	5cd3      	ldrb	r3, [r2, r3]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d15b      	bne.n	2c98 <HandleRadioRxErrorTimeout+0xf8>
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    2be0:	2399      	movs	r3, #153	; 0x99
    2be2:	00db      	lsls	r3, r3, #3
    2be4:	58d2      	ldr	r2, [r2, r3]
    2be6:	4b3f      	ldr	r3, [pc, #252]	; (2ce4 <HandleRadioRxErrorTimeout+0x144>)
    2be8:	5cd3      	ldrb	r3, [r2, r3]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d002      	beq.n	2bf4 <HandleRadioRxErrorTimeout+0x54>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
    2bee:	4b3e      	ldr	r3, [pc, #248]	; (2ce8 <HandleRadioRxErrorTimeout+0x148>)
    2bf0:	4a39      	ldr	r2, [pc, #228]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2bf2:	54d5      	strb	r5, [r2, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
    2bf4:	0028      	movs	r0, r5
    2bf6:	4b3d      	ldr	r3, [pc, #244]	; (2cec <HandleRadioRxErrorTimeout+0x14c>)
    2bf8:	4798      	blx	r3
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    2bfa:	2399      	movs	r3, #153	; 0x99
    2bfc:	00db      	lsls	r3, r3, #3
    2bfe:	4a36      	ldr	r2, [pc, #216]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c00:	58d2      	ldr	r2, [r2, r3]
    2c02:	23c8      	movs	r3, #200	; 0xc8
    2c04:	5cd3      	ldrb	r3, [r2, r3]
    2c06:	2b02      	cmp	r3, #2
    2c08:	d063      	beq.n	2cd2 <HandleRadioRxErrorTimeout+0x132>
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
    2c0a:	4c33      	ldr	r4, [pc, #204]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c0c:	23d1      	movs	r3, #209	; 0xd1
    2c0e:	009b      	lsls	r3, r3, #2
    2c10:	58e0      	ldr	r0, [r4, r3]
    2c12:	4b37      	ldr	r3, [pc, #220]	; (2cf0 <HandleRadioRxErrorTimeout+0x150>)
    2c14:	4798      	blx	r3
    2c16:	23f2      	movs	r3, #242	; 0xf2
    2c18:	009b      	lsls	r3, r3, #2
    2c1a:	58e3      	ldr	r3, [r4, r3]
    2c1c:	4298      	cmp	r0, r3
    2c1e:	d318      	bcc.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
                    TimerStop( &MacCtx.RxWindowTimer2 );
    2c20:	4c2d      	ldr	r4, [pc, #180]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c22:	23ec      	movs	r3, #236	; 0xec
    2c24:	009b      	lsls	r3, r3, #2
    2c26:	18e0      	adds	r0, r4, r3
    2c28:	4b32      	ldr	r3, [pc, #200]	; (2cf4 <HandleRadioRxErrorTimeout+0x154>)
    2c2a:	4798      	blx	r3
                    MacCtx.MacFlags.Bits.MacDone = 1;
    2c2c:	4a32      	ldr	r2, [pc, #200]	; (2cf8 <HandleRadioRxErrorTimeout+0x158>)
    2c2e:	5ca3      	ldrb	r3, [r4, r2]
    2c30:	2110      	movs	r1, #16
    2c32:	430b      	orrs	r3, r1
    2c34:	54a3      	strb	r3, [r4, r2]
    2c36:	e00c      	b.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
    2c38:	2002      	movs	r0, #2
    2c3a:	4b30      	ldr	r3, [pc, #192]	; (2cfc <HandleRadioRxErrorTimeout+0x15c>)
    2c3c:	4798      	blx	r3
        LoRaMacClassBBeaconTimerEvent( );
    2c3e:	4b30      	ldr	r3, [pc, #192]	; (2d00 <HandleRadioRxErrorTimeout+0x160>)
    2c40:	4798      	blx	r3
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    2c42:	2399      	movs	r3, #153	; 0x99
    2c44:	00db      	lsls	r3, r3, #3
    2c46:	4a24      	ldr	r2, [pc, #144]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c48:	58d2      	ldr	r2, [r2, r3]
    2c4a:	23c8      	movs	r3, #200	; 0xc8
    2c4c:	5cd3      	ldrb	r3, [r2, r3]
    2c4e:	2b01      	cmp	r3, #1
    2c50:	d008      	beq.n	2c64 <HandleRadioRxErrorTimeout+0xc4>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    2c52:	2399      	movs	r3, #153	; 0x99
    2c54:	00db      	lsls	r3, r3, #3
    2c56:	4a20      	ldr	r2, [pc, #128]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c58:	58d2      	ldr	r2, [r2, r3]
    2c5a:	23c8      	movs	r3, #200	; 0xc8
    2c5c:	5cd3      	ldrb	r3, [r2, r3]
    2c5e:	2b02      	cmp	r3, #2
    2c60:	d037      	beq.n	2cd2 <HandleRadioRxErrorTimeout+0x132>
}
    2c62:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
    2c64:	4b27      	ldr	r3, [pc, #156]	; (2d04 <HandleRadioRxErrorTimeout+0x164>)
    2c66:	4798      	blx	r3
    2c68:	2800      	cmp	r0, #0
    2c6a:	d106      	bne.n	2c7a <HandleRadioRxErrorTimeout+0xda>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
    2c6c:	4b26      	ldr	r3, [pc, #152]	; (2d08 <HandleRadioRxErrorTimeout+0x168>)
    2c6e:	4798      	blx	r3
    2c70:	2800      	cmp	r0, #0
    2c72:	d10b      	bne.n	2c8c <HandleRadioRxErrorTimeout+0xec>
    if( classBRx == false )
    2c74:	2c00      	cmp	r4, #0
    2c76:	d1ec      	bne.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
    2c78:	e7ac      	b.n	2bd4 <HandleRadioRxErrorTimeout+0x34>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    2c7a:	2000      	movs	r0, #0
    2c7c:	4b23      	ldr	r3, [pc, #140]	; (2d0c <HandleRadioRxErrorTimeout+0x16c>)
    2c7e:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( );
    2c80:	4b23      	ldr	r3, [pc, #140]	; (2d10 <HandleRadioRxErrorTimeout+0x170>)
    2c82:	4798      	blx	r3
        if( LoRaMacClassBIsMulticastExpected( ) == true )
    2c84:	4b20      	ldr	r3, [pc, #128]	; (2d08 <HandleRadioRxErrorTimeout+0x168>)
    2c86:	4798      	blx	r3
    2c88:	2800      	cmp	r0, #0
    2c8a:	d0e2      	beq.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    2c8c:	2000      	movs	r0, #0
    2c8e:	4b21      	ldr	r3, [pc, #132]	; (2d14 <HandleRadioRxErrorTimeout+0x174>)
    2c90:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( );
    2c92:	4b21      	ldr	r3, [pc, #132]	; (2d18 <HandleRadioRxErrorTimeout+0x178>)
    2c94:	4798      	blx	r3
    2c96:	e7dc      	b.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    2c98:	2399      	movs	r3, #153	; 0x99
    2c9a:	00db      	lsls	r3, r3, #3
    2c9c:	4a0e      	ldr	r2, [pc, #56]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2c9e:	58d2      	ldr	r2, [r2, r3]
    2ca0:	4b10      	ldr	r3, [pc, #64]	; (2ce4 <HandleRadioRxErrorTimeout+0x144>)
    2ca2:	5cd3      	ldrb	r3, [r2, r3]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d002      	beq.n	2cae <HandleRadioRxErrorTimeout+0x10e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
    2ca8:	4b0f      	ldr	r3, [pc, #60]	; (2ce8 <HandleRadioRxErrorTimeout+0x148>)
    2caa:	4a0b      	ldr	r2, [pc, #44]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2cac:	54d6      	strb	r6, [r2, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
    2cae:	0030      	movs	r0, r6
    2cb0:	4b0e      	ldr	r3, [pc, #56]	; (2cec <HandleRadioRxErrorTimeout+0x14c>)
    2cb2:	4798      	blx	r3
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    2cb4:	2399      	movs	r3, #153	; 0x99
    2cb6:	00db      	lsls	r3, r3, #3
    2cb8:	4a07      	ldr	r2, [pc, #28]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2cba:	58d2      	ldr	r2, [r2, r3]
    2cbc:	23c8      	movs	r3, #200	; 0xc8
    2cbe:	5cd3      	ldrb	r3, [r2, r3]
    2cc0:	2b02      	cmp	r3, #2
    2cc2:	d006      	beq.n	2cd2 <HandleRadioRxErrorTimeout+0x132>
                MacCtx.MacFlags.Bits.MacDone = 1;
    2cc4:	4904      	ldr	r1, [pc, #16]	; (2cd8 <HandleRadioRxErrorTimeout+0x138>)
    2cc6:	4a0c      	ldr	r2, [pc, #48]	; (2cf8 <HandleRadioRxErrorTimeout+0x158>)
    2cc8:	5c8b      	ldrb	r3, [r1, r2]
    2cca:	2010      	movs	r0, #16
    2ccc:	4303      	orrs	r3, r0
    2cce:	548b      	strb	r3, [r1, r2]
    2cd0:	e7bf      	b.n	2c52 <HandleRadioRxErrorTimeout+0xb2>
        OpenContinuousRx2Window( );
    2cd2:	4b12      	ldr	r3, [pc, #72]	; (2d1c <HandleRadioRxErrorTimeout+0x17c>)
    2cd4:	4798      	blx	r3
}
    2cd6:	e7c4      	b.n	2c62 <HandleRadioRxErrorTimeout+0xc2>
    2cd8:	20000cbc 	.word	0x20000cbc
    2cdc:	0001407c 	.word	0x0001407c
    2ce0:	00006a47 	.word	0x00006a47
    2ce4:	00000217 	.word	0x00000217
    2ce8:	00000429 	.word	0x00000429
    2cec:	00006f79 	.word	0x00006f79
    2cf0:	0000c281 	.word	0x0000c281
    2cf4:	0000c1a5 	.word	0x0000c1a5
    2cf8:	00000469 	.word	0x00000469
    2cfc:	00006a33 	.word	0x00006a33
    2d00:	00006a3d 	.word	0x00006a3d
    2d04:	00006a4b 	.word	0x00006a4b
    2d08:	00006a4f 	.word	0x00006a4f
    2d0c:	00006a35 	.word	0x00006a35
    2d10:	00006a3f 	.word	0x00006a3f
    2d14:	00006a37 	.word	0x00006a37
    2d18:	00006a41 	.word	0x00006a41
    2d1c:	00002b85 	.word	0x00002b85

00002d20 <OnRxWindow1TimerEvent>:
{
    2d20:	b570      	push	{r4, r5, r6, lr}
    TimerStop( &MacCtx.RxWindowTimer1 );
    2d22:	4c20      	ldr	r4, [pc, #128]	; (2da4 <OnRxWindow1TimerEvent+0x84>)
    2d24:	23e7      	movs	r3, #231	; 0xe7
    2d26:	009b      	lsls	r3, r3, #2
    2d28:	18e0      	adds	r0, r4, r3
    2d2a:	4b1f      	ldr	r3, [pc, #124]	; (2da8 <OnRxWindow1TimerEvent+0x88>)
    2d2c:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_1;
    2d2e:	2200      	movs	r2, #0
    2d30:	238d      	movs	r3, #141	; 0x8d
    2d32:	00db      	lsls	r3, r3, #3
    2d34:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
    2d36:	3360      	adds	r3, #96	; 0x60
    2d38:	58e3      	ldr	r3, [r4, r3]
    2d3a:	2114      	movs	r1, #20
    2d3c:	31ff      	adds	r1, #255	; 0xff
    2d3e:	5c58      	ldrb	r0, [r3, r1]
    2d40:	21f3      	movs	r1, #243	; 0xf3
    2d42:	0089      	lsls	r1, r1, #2
    2d44:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
    2d46:	21f5      	movs	r1, #245	; 0xf5
    2d48:	5c58      	ldrb	r0, [r3, r1]
    2d4a:	4918      	ldr	r1, [pc, #96]	; (2dac <OnRxWindow1TimerEvent+0x8c>)
    2d4c:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    2d4e:	2102      	movs	r1, #2
    2d50:	31ff      	adds	r1, #255	; 0xff
    2d52:	5c58      	ldrb	r0, [r3, r1]
    2d54:	21f7      	movs	r1, #247	; 0xf7
    2d56:	0089      	lsls	r1, r1, #2
    2d58:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    2d5a:	2116      	movs	r1, #22
    2d5c:	31ff      	adds	r1, #255	; 0xff
    2d5e:	5c58      	ldrb	r0, [r3, r1]
    2d60:	4913      	ldr	r1, [pc, #76]	; (2db0 <OnRxWindow1TimerEvent+0x90>)
    2d62:	5460      	strb	r0, [r4, r1]
    MacCtx.RxWindow1Config.RxContinuous = false;
    2d64:	4913      	ldr	r1, [pc, #76]	; (2db4 <OnRxWindow1TimerEvent+0x94>)
    2d66:	5462      	strb	r2, [r4, r1]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
    2d68:	4913      	ldr	r1, [pc, #76]	; (2db8 <OnRxWindow1TimerEvent+0x98>)
    2d6a:	5462      	strb	r2, [r4, r1]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    2d6c:	32c8      	adds	r2, #200	; 0xc8
    2d6e:	5c9b      	ldrb	r3, [r3, r2]
    2d70:	2b02      	cmp	r3, #2
    2d72:	d013      	beq.n	2d9c <OnRxWindow1TimerEvent+0x7c>
    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    2d74:	4c0b      	ldr	r4, [pc, #44]	; (2da4 <OnRxWindow1TimerEvent+0x84>)
    2d76:	2382      	movs	r3, #130	; 0x82
    2d78:	00db      	lsls	r3, r3, #3
    2d7a:	18e2      	adds	r2, r4, r3
    2d7c:	3b44      	subs	r3, #68	; 0x44
    2d7e:	18e1      	adds	r1, r4, r3
    2d80:	2599      	movs	r5, #153	; 0x99
    2d82:	00ed      	lsls	r5, r5, #3
    2d84:	5963      	ldr	r3, [r4, r5]
    2d86:	7818      	ldrb	r0, [r3, #0]
    2d88:	4b0c      	ldr	r3, [pc, #48]	; (2dbc <OnRxWindow1TimerEvent+0x9c>)
    2d8a:	4798      	blx	r3
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    2d8c:	5962      	ldr	r2, [r4, r5]
    2d8e:	23e0      	movs	r3, #224	; 0xe0
    2d90:	58d1      	ldr	r1, [r2, r3]
    2d92:	4b08      	ldr	r3, [pc, #32]	; (2db4 <OnRxWindow1TimerEvent+0x94>)
    2d94:	5ce0      	ldrb	r0, [r4, r3]
    2d96:	4b0a      	ldr	r3, [pc, #40]	; (2dc0 <OnRxWindow1TimerEvent+0xa0>)
    2d98:	4798      	blx	r3
}
    2d9a:	bd70      	pop	{r4, r5, r6, pc}
        Radio.Standby( );
    2d9c:	4b09      	ldr	r3, [pc, #36]	; (2dc4 <OnRxWindow1TimerEvent+0xa4>)
    2d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2da0:	4798      	blx	r3
    2da2:	e7e7      	b.n	2d74 <OnRxWindow1TimerEvent+0x54>
    2da4:	20000cbc 	.word	0x20000cbc
    2da8:	0000c1a5 	.word	0x0000c1a5
    2dac:	000003cf 	.word	0x000003cf
    2db0:	000003dd 	.word	0x000003dd
    2db4:	000003de 	.word	0x000003de
    2db8:	000003df 	.word	0x000003df
    2dbc:	00008509 	.word	0x00008509
    2dc0:	00002841 	.word	0x00002841
    2dc4:	0001407c 	.word	0x0001407c

00002dc8 <ResetMacParameters>:
{
    2dc8:	b570      	push	{r4, r5, r6, lr}
    2dca:	b082      	sub	sp, #8
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    2dcc:	4d2d      	ldr	r5, [pc, #180]	; (2e84 <ResetMacParameters+0xbc>)
    2dce:	2499      	movs	r4, #153	; 0x99
    2dd0:	00e4      	lsls	r4, r4, #3
    2dd2:	2600      	movs	r6, #0
    2dd4:	2388      	movs	r3, #136	; 0x88
    2dd6:	009b      	lsls	r3, r3, #2
    2dd8:	592a      	ldr	r2, [r5, r4]
    2dda:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->AdrAckCounter = 0;
    2ddc:	3b55      	subs	r3, #85	; 0x55
    2dde:	3bff      	subs	r3, #255	; 0xff
    2de0:	592a      	ldr	r2, [r5, r4]
    2de2:	50d6      	str	r6, [r2, r3]
    LoRaMacResetFCnts( );
    2de4:	4b28      	ldr	r3, [pc, #160]	; (2e88 <ResetMacParameters+0xc0>)
    2de6:	4798      	blx	r3
    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    2de8:	2388      	movs	r3, #136	; 0x88
    2dea:	005b      	lsls	r3, r3, #1
    2dec:	592a      	ldr	r2, [r5, r4]
    2dee:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    2df0:	4b26      	ldr	r3, [pc, #152]	; (2e8c <ResetMacParameters+0xc4>)
    2df2:	592a      	ldr	r2, [r5, r4]
    2df4:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->MaxDCycle = 0;
    2df6:	2312      	movs	r3, #18
    2df8:	33ff      	adds	r3, #255	; 0xff
    2dfa:	592a      	ldr	r2, [r5, r4]
    2dfc:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
    2dfe:	2201      	movs	r2, #1
    2e00:	4b23      	ldr	r3, [pc, #140]	; (2e90 <ResetMacParameters+0xc8>)
    2e02:	5929      	ldr	r1, [r5, r4]
    2e04:	52ca      	strh	r2, [r1, r3]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    2e06:	592b      	ldr	r3, [r5, r4]
    2e08:	7919      	ldrb	r1, [r3, #4]
    2e0a:	32d3      	adds	r2, #211	; 0xd3
    2e0c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    2e0e:	592b      	ldr	r3, [r5, r4]
    2e10:	7959      	ldrb	r1, [r3, #5]
    2e12:	3201      	adds	r2, #1
    2e14:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
    2e16:	592b      	ldr	r3, [r5, r4]
    2e18:	3ab0      	subs	r2, #176	; 0xb0
    2e1a:	5c99      	ldrb	r1, [r3, r2]
    2e1c:	32d0      	adds	r2, #208	; 0xd0
    2e1e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    2e20:	592b      	ldr	r3, [r5, r4]
    2e22:	001a      	movs	r2, r3
    2e24:	32f8      	adds	r2, #248	; 0xf8
    2e26:	3328      	adds	r3, #40	; 0x28
    2e28:	cb03      	ldmia	r3!, {r0, r1}
    2e2a:	c203      	stmia	r2!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
    2e2c:	592b      	ldr	r3, [r5, r4]
    2e2e:	2230      	movs	r2, #48	; 0x30
    2e30:	5c99      	ldrb	r1, [r3, r2]
    2e32:	32d0      	adds	r2, #208	; 0xd0
    2e34:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
    2e36:	592b      	ldr	r3, [r5, r4]
    2e38:	3acf      	subs	r2, #207	; 0xcf
    2e3a:	5c99      	ldrb	r1, [r3, r2]
    2e3c:	2202      	movs	r2, #2
    2e3e:	32ff      	adds	r2, #255	; 0xff
    2e40:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
    2e42:	592b      	ldr	r3, [r5, r4]
    2e44:	3203      	adds	r2, #3
    2e46:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2e48:	5099      	str	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    2e4a:	592b      	ldr	r3, [r5, r4]
    2e4c:	3204      	adds	r2, #4
    2e4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    2e50:	5099      	str	r1, [r3, r2]
    MacCtx.NvmCtx->NodeAckRequested = false;
    2e52:	4b10      	ldr	r3, [pc, #64]	; (2e94 <ResetMacParameters+0xcc>)
    2e54:	592a      	ldr	r2, [r5, r4]
    2e56:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->SrvAckRequested = false;
    2e58:	3301      	adds	r3, #1
    2e5a:	592a      	ldr	r2, [r5, r4]
    2e5c:	54d6      	strb	r6, [r2, r3]
    params.Type = INIT_TYPE_APP_DEFAULTS;
    2e5e:	2302      	movs	r3, #2
    2e60:	466a      	mov	r2, sp
    2e62:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = NULL;
    2e64:	9600      	str	r6, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    2e66:	592b      	ldr	r3, [r5, r4]
    2e68:	7818      	ldrb	r0, [r3, #0]
    2e6a:	4669      	mov	r1, sp
    2e6c:	4b0a      	ldr	r3, [pc, #40]	; (2e98 <ResetMacParameters+0xd0>)
    2e6e:	4798      	blx	r3
    MacCtx.NvmCtx->Channel = 0;
    2e70:	2214      	movs	r2, #20
    2e72:	32ff      	adds	r2, #255	; 0xff
    2e74:	592b      	ldr	r3, [r5, r4]
    2e76:	549e      	strb	r6, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    2e78:	592b      	ldr	r3, [r5, r4]
    2e7a:	5c99      	ldrb	r1, [r3, r2]
    2e7c:	3201      	adds	r2, #1
    2e7e:	5499      	strb	r1, [r3, r2]
}
    2e80:	b002      	add	sp, #8
    2e82:	bd70      	pop	{r4, r5, r6, pc}
    2e84:	20000cbc 	.word	0x20000cbc
    2e88:	00008001 	.word	0x00008001
    2e8c:	00000216 	.word	0x00000216
    2e90:	0000021a 	.word	0x0000021a
    2e94:	00000217 	.word	0x00000217
    2e98:	00008479 	.word	0x00008479

00002e9c <OnRadioRxDone>:
{
    2e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e9e:	0007      	movs	r7, r0
    2ea0:	000e      	movs	r6, r1
    2ea2:	0015      	movs	r5, r2
    2ea4:	001c      	movs	r4, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
    2ea6:	4b0b      	ldr	r3, [pc, #44]	; (2ed4 <OnRadioRxDone+0x38>)
    2ea8:	4798      	blx	r3
    2eaa:	4b0b      	ldr	r3, [pc, #44]	; (2ed8 <OnRadioRxDone+0x3c>)
    2eac:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
    2eae:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
    2eb0:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
    2eb2:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
    2eb4:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
    2eb6:	4b09      	ldr	r3, [pc, #36]	; (2edc <OnRadioRxDone+0x40>)
    2eb8:	781a      	ldrb	r2, [r3, #0]
    2eba:	2108      	movs	r1, #8
    2ebc:	430a      	orrs	r2, r1
    2ebe:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    2ec0:	22da      	movs	r2, #218	; 0xda
    2ec2:	0092      	lsls	r2, r2, #2
    2ec4:	589b      	ldr	r3, [r3, r2]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d003      	beq.n	2ed2 <OnRadioRxDone+0x36>
    2eca:	68db      	ldr	r3, [r3, #12]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d000      	beq.n	2ed2 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
    2ed0:	4798      	blx	r3
}
    2ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed4:	0000c26d 	.word	0x0000c26d
    2ed8:	20001bb0 	.word	0x20001bb0
    2edc:	20000cbc 	.word	0x20000cbc

00002ee0 <OnRadioTxDone>:
{
    2ee0:	b530      	push	{r4, r5, lr}
    2ee2:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
    2ee4:	4b0e      	ldr	r3, [pc, #56]	; (2f20 <OnRadioTxDone+0x40>)
    2ee6:	4798      	blx	r3
    2ee8:	4b0e      	ldr	r3, [pc, #56]	; (2f24 <OnRadioTxDone+0x44>)
    2eea:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
    2eec:	4d0e      	ldr	r5, [pc, #56]	; (2f28 <OnRadioTxDone+0x48>)
    2eee:	466c      	mov	r4, sp
    2ef0:	4668      	mov	r0, sp
    2ef2:	4b0e      	ldr	r3, [pc, #56]	; (2f2c <OnRadioTxDone+0x4c>)
    2ef4:	4798      	blx	r3
    2ef6:	23d6      	movs	r3, #214	; 0xd6
    2ef8:	009b      	lsls	r3, r3, #2
    2efa:	18eb      	adds	r3, r5, r3
    2efc:	cc06      	ldmia	r4!, {r1, r2}
    2efe:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
    2f00:	782b      	ldrb	r3, [r5, #0]
    2f02:	2210      	movs	r2, #16
    2f04:	4313      	orrs	r3, r2
    2f06:	702b      	strb	r3, [r5, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    2f08:	23da      	movs	r3, #218	; 0xda
    2f0a:	009b      	lsls	r3, r3, #2
    2f0c:	58eb      	ldr	r3, [r5, r3]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d003      	beq.n	2f1a <OnRadioTxDone+0x3a>
    2f12:	68db      	ldr	r3, [r3, #12]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d000      	beq.n	2f1a <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
    2f18:	4798      	blx	r3
}
    2f1a:	b003      	add	sp, #12
    2f1c:	bd30      	pop	{r4, r5, pc}
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	0000c26d 	.word	0x0000c26d
    2f24:	20001bac 	.word	0x20001bac
    2f28:	20000cbc 	.word	0x20000cbc
    2f2c:	0000bf59 	.word	0x0000bf59

00002f30 <PrepareFrame>:
{
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	b085      	sub	sp, #20
    2f34:	0007      	movs	r7, r0
    2f36:	9100      	str	r1, [sp, #0]
    2f38:	9201      	str	r2, [sp, #4]
    2f3a:	001e      	movs	r6, r3
    2f3c:	ab0a      	add	r3, sp, #40	; 0x28
    2f3e:	881d      	ldrh	r5, [r3, #0]
    MacCtx.PktBufferLen = 0;
    2f40:	4a71      	ldr	r2, [pc, #452]	; (3108 <PrepareFrame+0x1d8>)
    2f42:	2300      	movs	r3, #0
    2f44:	8193      	strh	r3, [r2, #12]
    MacCtx.NvmCtx->NodeAckRequested = false;
    2f46:	2199      	movs	r1, #153	; 0x99
    2f48:	00c9      	lsls	r1, r1, #3
    2f4a:	5851      	ldr	r1, [r2, r1]
    2f4c:	4a6f      	ldr	r2, [pc, #444]	; (310c <PrepareFrame+0x1dc>)
    2f4e:	2000      	movs	r0, #0
    2f50:	5488      	strb	r0, [r1, r2]
    uint32_t fCntUp = 0;
    2f52:	9303      	str	r3, [sp, #12]
    size_t macCmdsSize = 0;
    2f54:	9302      	str	r3, [sp, #8]
        fBufferSize = 0;
    2f56:	0033      	movs	r3, r6
    2f58:	1e5a      	subs	r2, r3, #1
    2f5a:	4193      	sbcs	r3, r2
    2f5c:	425b      	negs	r3, r3
    2f5e:	401d      	ands	r5, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
    2f60:	4c69      	ldr	r4, [pc, #420]	; (3108 <PrepareFrame+0x1d8>)
    2f62:	0020      	movs	r0, r4
    2f64:	3045      	adds	r0, #69	; 0x45
    2f66:	30ff      	adds	r0, #255	; 0xff
    2f68:	002a      	movs	r2, r5
    2f6a:	0031      	movs	r1, r6
    2f6c:	4b68      	ldr	r3, [pc, #416]	; (3110 <PrepareFrame+0x1e0>)
    2f6e:	4798      	blx	r3
    MacCtx.AppDataSize = fBufferSize;
    2f70:	b2ea      	uxtb	r2, r5
    2f72:	4b68      	ldr	r3, [pc, #416]	; (3114 <PrepareFrame+0x1e4>)
    2f74:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
    2f76:	783b      	ldrb	r3, [r7, #0]
    2f78:	73a3      	strb	r3, [r4, #14]
    switch( macHdr->Bits.MType )
    2f7a:	783b      	ldrb	r3, [r7, #0]
    2f7c:	095b      	lsrs	r3, r3, #5
    2f7e:	b2d9      	uxtb	r1, r3
    2f80:	2904      	cmp	r1, #4
    2f82:	d006      	beq.n	2f92 <PrepareFrame+0x62>
    2f84:	2907      	cmp	r1, #7
    2f86:	d100      	bne.n	2f8a <PrepareFrame+0x5a>
    2f88:	e0a8      	b.n	30dc <PrepareFrame+0x1ac>
    2f8a:	2902      	cmp	r1, #2
    2f8c:	d008      	beq.n	2fa0 <PrepareFrame+0x70>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
    2f8e:	2302      	movs	r3, #2
    2f90:	e036      	b.n	3000 <PrepareFrame+0xd0>
            MacCtx.NvmCtx->NodeAckRequested = true;
    2f92:	2399      	movs	r3, #153	; 0x99
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	4a5c      	ldr	r2, [pc, #368]	; (3108 <PrepareFrame+0x1d8>)
    2f98:	58d2      	ldr	r2, [r2, r3]
    2f9a:	2101      	movs	r1, #1
    2f9c:	4b5b      	ldr	r3, [pc, #364]	; (310c <PrepareFrame+0x1dc>)
    2f9e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
    2fa0:	4b59      	ldr	r3, [pc, #356]	; (3108 <PrepareFrame+0x1d8>)
    2fa2:	2104      	movs	r1, #4
    2fa4:	2288      	movs	r2, #136	; 0x88
    2fa6:	0052      	lsls	r2, r2, #1
    2fa8:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
    2faa:	0019      	movs	r1, r3
    2fac:	310e      	adds	r1, #14
    2fae:	3204      	adds	r2, #4
    2fb0:	5099      	str	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    2fb2:	21ff      	movs	r1, #255	; 0xff
    2fb4:	3204      	adds	r2, #4
    2fb6:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
    2fb8:	7839      	ldrb	r1, [r7, #0]
    2fba:	221a      	movs	r2, #26
    2fbc:	32ff      	adds	r2, #255	; 0xff
    2fbe:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
    2fc0:	321b      	adds	r2, #27
    2fc2:	4669      	mov	r1, sp
    2fc4:	7909      	ldrb	r1, [r1, #4]
    2fc6:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
    2fc8:	2299      	movs	r2, #153	; 0x99
    2fca:	00d2      	lsls	r2, r2, #3
    2fcc:	589a      	ldr	r2, [r3, r2]
    2fce:	6c51      	ldr	r1, [r2, #68]	; 0x44
    2fd0:	228e      	movs	r2, #142	; 0x8e
    2fd2:	0052      	lsls	r2, r2, #1
    2fd4:	5099      	str	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    2fd6:	9a00      	ldr	r2, [sp, #0]
    2fd8:	7811      	ldrb	r1, [r2, #0]
    2fda:	2290      	movs	r2, #144	; 0x90
    2fdc:	0052      	lsls	r2, r2, #1
    2fde:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
    2fe0:	4a4c      	ldr	r2, [pc, #304]	; (3114 <PrepareFrame+0x1e4>)
    2fe2:	5c99      	ldrb	r1, [r3, r2]
    2fe4:	3a08      	subs	r2, #8
    2fe6:	3aff      	subs	r2, #255	; 0xff
    2fe8:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
    2fea:	0019      	movs	r1, r3
    2fec:	3145      	adds	r1, #69	; 0x45
    2fee:	31ff      	adds	r1, #255	; 0xff
    2ff0:	3a04      	subs	r2, #4
    2ff2:	5099      	str	r1, [r3, r2]
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    2ff4:	a803      	add	r0, sp, #12
    2ff6:	4b48      	ldr	r3, [pc, #288]	; (3118 <PrepareFrame+0x1e8>)
    2ff8:	4798      	blx	r3
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    2ffa:	2312      	movs	r3, #18
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    2ffc:	2800      	cmp	r0, #0
    2ffe:	d002      	beq.n	3006 <PrepareFrame+0xd6>
}
    3000:	0018      	movs	r0, r3
    3002:	b005      	add	sp, #20
    3004:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
    3006:	9a03      	ldr	r2, [sp, #12]
    3008:	4b3f      	ldr	r3, [pc, #252]	; (3108 <PrepareFrame+0x1d8>)
    300a:	2191      	movs	r1, #145	; 0x91
    300c:	0049      	lsls	r1, r1, #1
    300e:	525a      	strh	r2, [r3, r1]
            MacCtx.McpsConfirm.NbTrans = 0;
    3010:	2100      	movs	r1, #0
    3012:	4842      	ldr	r0, [pc, #264]	; (311c <PrepareFrame+0x1ec>)
    3014:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.AckReceived = false;
    3016:	4842      	ldr	r0, [pc, #264]	; (3120 <PrepareFrame+0x1f0>)
    3018:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
    301a:	4942      	ldr	r1, [pc, #264]	; (3124 <PrepareFrame+0x1f4>)
    301c:	505a      	str	r2, [r3, r1]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    301e:	a802      	add	r0, sp, #8
    3020:	4b41      	ldr	r3, [pc, #260]	; (3128 <PrepareFrame+0x1f8>)
    3022:	4798      	blx	r3
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    3024:	2313      	movs	r3, #19
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    3026:	2800      	cmp	r0, #0
    3028:	d1ea      	bne.n	3000 <PrepareFrame+0xd0>
    return LORAMAC_STATUS_OK;
    302a:	2300      	movs	r3, #0
            if( macCmdsSize > 0 )
    302c:	9a02      	ldr	r2, [sp, #8]
    302e:	2a00      	cmp	r2, #0
    3030:	d0e6      	beq.n	3000 <PrepareFrame+0xd0>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
    3032:	4d35      	ldr	r5, [pc, #212]	; (3108 <PrepareFrame+0x1d8>)
    3034:	2399      	movs	r3, #153	; 0x99
    3036:	00db      	lsls	r3, r3, #3
    3038:	58ea      	ldr	r2, [r5, r3]
    303a:	23d5      	movs	r3, #213	; 0xd5
    303c:	56d0      	ldrsb	r0, [r2, r3]
    303e:	4b3b      	ldr	r3, [pc, #236]	; (312c <PrepareFrame+0x1fc>)
    3040:	4798      	blx	r3
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
    3042:	4b34      	ldr	r3, [pc, #208]	; (3114 <PrepareFrame+0x1e4>)
    3044:	5ceb      	ldrb	r3, [r5, r3]
    3046:	2b00      	cmp	r3, #0
    3048:	d028      	beq.n	309c <PrepareFrame+0x16c>
    304a:	9b02      	ldr	r3, [sp, #8]
    304c:	2b0f      	cmp	r3, #15
    304e:	d90d      	bls.n	306c <PrepareFrame+0x13c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    3050:	2399      	movs	r3, #153	; 0x99
    3052:	00db      	lsls	r3, r3, #3
    3054:	4a2c      	ldr	r2, [pc, #176]	; (3108 <PrepareFrame+0x1d8>)
    3056:	58d2      	ldr	r2, [r2, r3]
    3058:	3217      	adds	r2, #23
    305a:	32ff      	adds	r2, #255	; 0xff
    305c:	a902      	add	r1, sp, #8
    305e:	4b34      	ldr	r3, [pc, #208]	; (3130 <PrepareFrame+0x200>)
    3060:	4798      	blx	r3
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    3062:	2313      	movs	r3, #19
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    3064:	2800      	cmp	r0, #0
    3066:	d1cb      	bne.n	3000 <PrepareFrame+0xd0>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
    3068:	3b09      	subs	r3, #9
    306a:	e7c9      	b.n	3000 <PrepareFrame+0xd0>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
    306c:	4a26      	ldr	r2, [pc, #152]	; (3108 <PrepareFrame+0x1d8>)
    306e:	3225      	adds	r2, #37	; 0x25
    3070:	32ff      	adds	r2, #255	; 0xff
    3072:	a902      	add	r1, sp, #8
    3074:	200f      	movs	r0, #15
    3076:	4b2e      	ldr	r3, [pc, #184]	; (3130 <PrepareFrame+0x200>)
    3078:	4798      	blx	r3
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    307a:	2313      	movs	r3, #19
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
    307c:	2800      	cmp	r0, #0
    307e:	d1bf      	bne.n	3000 <PrepareFrame+0xd0>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
    3080:	210f      	movs	r1, #15
    3082:	9a02      	ldr	r2, [sp, #8]
    3084:	400a      	ands	r2, r1
    3086:	9800      	ldr	r0, [sp, #0]
    3088:	7803      	ldrb	r3, [r0, #0]
    308a:	438b      	bics	r3, r1
    308c:	4313      	orrs	r3, r2
    308e:	7003      	strb	r3, [r0, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    3090:	2290      	movs	r2, #144	; 0x90
    3092:	0052      	lsls	r2, r2, #1
    3094:	491c      	ldr	r1, [pc, #112]	; (3108 <PrepareFrame+0x1d8>)
    3096:	548b      	strb	r3, [r1, r2]
    return LORAMAC_STATUS_OK;
    3098:	2300      	movs	r3, #0
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    309a:	e7b1      	b.n	3000 <PrepareFrame+0xd0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    309c:	2399      	movs	r3, #153	; 0x99
    309e:	00db      	lsls	r3, r3, #3
    30a0:	4a19      	ldr	r2, [pc, #100]	; (3108 <PrepareFrame+0x1d8>)
    30a2:	58d2      	ldr	r2, [r2, r3]
    30a4:	3217      	adds	r2, #23
    30a6:	32ff      	adds	r2, #255	; 0xff
    30a8:	a902      	add	r1, sp, #8
    30aa:	4b21      	ldr	r3, [pc, #132]	; (3130 <PrepareFrame+0x200>)
    30ac:	4798      	blx	r3
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    30ae:	2313      	movs	r3, #19
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    30b0:	2800      	cmp	r0, #0
    30b2:	d1a5      	bne.n	3000 <PrepareFrame+0xd0>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
    30b4:	4b14      	ldr	r3, [pc, #80]	; (3108 <PrepareFrame+0x1d8>)
    30b6:	2100      	movs	r1, #0
    30b8:	229a      	movs	r2, #154	; 0x9a
    30ba:	0052      	lsls	r2, r2, #1
    30bc:	5499      	strb	r1, [r3, r2]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
    30be:	2299      	movs	r2, #153	; 0x99
    30c0:	00d2      	lsls	r2, r2, #3
    30c2:	589a      	ldr	r2, [r3, r2]
    30c4:	3217      	adds	r2, #23
    30c6:	32ff      	adds	r2, #255	; 0xff
    30c8:	3139      	adds	r1, #57	; 0x39
    30ca:	31ff      	adds	r1, #255	; 0xff
    30cc:	505a      	str	r2, [r3, r1]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
    30ce:	229e      	movs	r2, #158	; 0x9e
    30d0:	0052      	lsls	r2, r2, #1
    30d2:	a902      	add	r1, sp, #8
    30d4:	7809      	ldrb	r1, [r1, #0]
    30d6:	5499      	strb	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
    30d8:	2300      	movs	r3, #0
    30da:	e791      	b.n	3000 <PrepareFrame+0xd0>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
    30dc:	2e00      	cmp	r6, #0
    30de:	d011      	beq.n	3104 <PrepareFrame+0x1d4>
    return LORAMAC_STATUS_OK;
    30e0:	2300      	movs	r3, #0
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
    30e2:	2a00      	cmp	r2, #0
    30e4:	d100      	bne.n	30e8 <PrepareFrame+0x1b8>
    30e6:	e78b      	b.n	3000 <PrepareFrame+0xd0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
    30e8:	22ff      	movs	r2, #255	; 0xff
    30ea:	402a      	ands	r2, r5
    30ec:	4c06      	ldr	r4, [pc, #24]	; (3108 <PrepareFrame+0x1d8>)
    30ee:	0020      	movs	r0, r4
    30f0:	300f      	adds	r0, #15
    30f2:	0031      	movs	r1, r6
    30f4:	4b06      	ldr	r3, [pc, #24]	; (3110 <PrepareFrame+0x1e0>)
    30f6:	4798      	blx	r3
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
    30f8:	4b06      	ldr	r3, [pc, #24]	; (3114 <PrepareFrame+0x1e4>)
    30fa:	5ce3      	ldrb	r3, [r4, r3]
    30fc:	3301      	adds	r3, #1
    30fe:	81a3      	strh	r3, [r4, #12]
    return LORAMAC_STATUS_OK;
    3100:	2300      	movs	r3, #0
    3102:	e77d      	b.n	3000 <PrepareFrame+0xd0>
    3104:	2300      	movs	r3, #0
    3106:	e77b      	b.n	3000 <PrepareFrame+0xd0>
    3108:	20000cbc 	.word	0x20000cbc
    310c:	00000217 	.word	0x00000217
    3110:	00001e91 	.word	0x00001e91
    3114:	00000243 	.word	0x00000243
    3118:	00007fd1 	.word	0x00007fd1
    311c:	0000042d 	.word	0x0000042d
    3120:	0000042c 	.word	0x0000042c
    3124:	00000434 	.word	0x00000434
    3128:	00006d0d 	.word	0x00006d0d
    312c:	000028dd 	.word	0x000028dd
    3130:	00006d25 	.word	0x00006d25

00003134 <SendFrameOnChannel>:
{
    3134:	b5f0      	push	{r4, r5, r6, r7, lr}
    3136:	46ce      	mov	lr, r9
    3138:	4647      	mov	r7, r8
    313a:	b580      	push	{r7, lr}
    313c:	b087      	sub	sp, #28
    313e:	0005      	movs	r5, r0
    int8_t txPower = 0;
    3140:	2200      	movs	r2, #0
    3142:	466b      	mov	r3, sp
    3144:	71da      	strb	r2, [r3, #7]
    txConfig.Channel = channel;
    3146:	ab02      	add	r3, sp, #8
    3148:	7018      	strb	r0, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    314a:	493c      	ldr	r1, [pc, #240]	; (323c <SendFrameOnChannel+0x108>)
    314c:	2299      	movs	r2, #153	; 0x99
    314e:	00d2      	lsls	r2, r2, #3
    3150:	588a      	ldr	r2, [r1, r2]
    3152:	20d5      	movs	r0, #213	; 0xd5
    3154:	5c10      	ldrb	r0, [r2, r0]
    3156:	7058      	strb	r0, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    3158:	20d4      	movs	r0, #212	; 0xd4
    315a:	5c10      	ldrb	r0, [r2, r0]
    315c:	7098      	strb	r0, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    315e:	2082      	movs	r0, #130	; 0x82
    3160:	0040      	lsls	r0, r0, #1
    3162:	5810      	ldr	r0, [r2, r0]
    3164:	9003      	str	r0, [sp, #12]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    3166:	2084      	movs	r0, #132	; 0x84
    3168:	0040      	lsls	r0, r0, #1
    316a:	5812      	ldr	r2, [r2, r0]
    316c:	9204      	str	r2, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
    316e:	898a      	ldrh	r2, [r1, #12]
    3170:	819a      	strh	r2, [r3, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
    3172:	4b33      	ldr	r3, [pc, #204]	; (3240 <SendFrameOnChannel+0x10c>)
    3174:	4798      	blx	r3
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
    3176:	230e      	movs	r3, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
    3178:	2800      	cmp	r0, #0
    317a:	d005      	beq.n	3188 <SendFrameOnChannel+0x54>
}
    317c:	0018      	movs	r0, r3
    317e:	b007      	add	sp, #28
    3180:	bc0c      	pop	{r2, r3}
    3182:	4690      	mov	r8, r2
    3184:	4699      	mov	r9, r3
    3186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    3188:	2399      	movs	r3, #153	; 0x99
    318a:	00db      	lsls	r3, r3, #3
    318c:	4a2b      	ldr	r2, [pc, #172]	; (323c <SendFrameOnChannel+0x108>)
    318e:	58d2      	ldr	r2, [r2, r3]
    3190:	23c8      	movs	r3, #200	; 0xc8
    3192:	5cd3      	ldrb	r3, [r2, r3]
    3194:	2b01      	cmp	r3, #1
    3196:	d043      	beq.n	3220 <SendFrameOnChannel+0xec>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
    3198:	4c28      	ldr	r4, [pc, #160]	; (323c <SendFrameOnChannel+0x108>)
    319a:	2381      	movs	r3, #129	; 0x81
    319c:	00db      	lsls	r3, r3, #3
    319e:	18e3      	adds	r3, r4, r3
    31a0:	466a      	mov	r2, sp
    31a2:	1dd6      	adds	r6, r2, #7
    31a4:	2299      	movs	r2, #153	; 0x99
    31a6:	00d2      	lsls	r2, r2, #3
    31a8:	4691      	mov	r9, r2
    31aa:	58a2      	ldr	r2, [r4, r2]
    31ac:	7810      	ldrb	r0, [r2, #0]
    31ae:	0032      	movs	r2, r6
    31b0:	a902      	add	r1, sp, #8
    31b2:	4f24      	ldr	r7, [pc, #144]	; (3244 <SendFrameOnChannel+0x110>)
    31b4:	47b8      	blx	r7
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
    31b6:	2001      	movs	r0, #1
    31b8:	4b23      	ldr	r3, [pc, #140]	; (3248 <SendFrameOnChannel+0x114>)
    31ba:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    31bc:	2201      	movs	r2, #1
    31be:	4b23      	ldr	r3, [pc, #140]	; (324c <SendFrameOnChannel+0x118>)
    31c0:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    31c2:	464b      	mov	r3, r9
    31c4:	58e2      	ldr	r2, [r4, r3]
    31c6:	23d5      	movs	r3, #213	; 0xd5
    31c8:	5cd2      	ldrb	r2, [r2, r3]
    31ca:	4b21      	ldr	r3, [pc, #132]	; (3250 <SendFrameOnChannel+0x11c>)
    31cc:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
    31ce:	7832      	ldrb	r2, [r6, #0]
    31d0:	4b20      	ldr	r3, [pc, #128]	; (3254 <SendFrameOnChannel+0x120>)
    31d2:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
    31d4:	330d      	adds	r3, #13
    31d6:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    31d8:	3b30      	subs	r3, #48	; 0x30
    31da:	58e3      	ldr	r3, [r4, r3]
    31dc:	2286      	movs	r2, #134	; 0x86
    31de:	00d2      	lsls	r2, r2, #3
    31e0:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    31e2:	3210      	adds	r2, #16
    31e4:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
    31e6:	4b1c      	ldr	r3, [pc, #112]	; (3258 <SendFrameOnChannel+0x124>)
    31e8:	4798      	blx	r3
    31ea:	2800      	cmp	r0, #0
    31ec:	d008      	beq.n	3200 <SendFrameOnChannel+0xcc>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
    31ee:	2381      	movs	r3, #129	; 0x81
    31f0:	00db      	lsls	r3, r3, #3
    31f2:	4a12      	ldr	r2, [pc, #72]	; (323c <SendFrameOnChannel+0x108>)
    31f4:	58d0      	ldr	r0, [r2, r3]
    31f6:	4b19      	ldr	r3, [pc, #100]	; (325c <SendFrameOnChannel+0x128>)
    31f8:	4798      	blx	r3
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
    31fa:	2310      	movs	r3, #16
        if( collisionTime > 0 )
    31fc:	2800      	cmp	r0, #0
    31fe:	d1bd      	bne.n	317c <SendFrameOnChannel+0x48>
    LoRaMacClassBHaltBeaconing( );
    3200:	4b17      	ldr	r3, [pc, #92]	; (3260 <SendFrameOnChannel+0x12c>)
    3202:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    3204:	480d      	ldr	r0, [pc, #52]	; (323c <SendFrameOnChannel+0x108>)
    3206:	22d8      	movs	r2, #216	; 0xd8
    3208:	0092      	lsls	r2, r2, #2
    320a:	2302      	movs	r3, #2
    320c:	5881      	ldr	r1, [r0, r2]
    320e:	430b      	orrs	r3, r1
    3210:	5083      	str	r3, [r0, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
    3212:	7b01      	ldrb	r1, [r0, #12]
    3214:	300e      	adds	r0, #14
    3216:	4b13      	ldr	r3, [pc, #76]	; (3264 <SendFrameOnChannel+0x130>)
    3218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    321a:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
    321c:	2300      	movs	r3, #0
    321e:	e7ad      	b.n	317c <SendFrameOnChannel+0x48>
        if( LoRaMacClassBIsPingExpected( ) == true )
    3220:	4b11      	ldr	r3, [pc, #68]	; (3268 <SendFrameOnChannel+0x134>)
    3222:	4798      	blx	r3
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    3224:	230f      	movs	r3, #15
        if( LoRaMacClassBIsPingExpected( ) == true )
    3226:	2800      	cmp	r0, #0
    3228:	d1a8      	bne.n	317c <SendFrameOnChannel+0x48>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    322a:	4b10      	ldr	r3, [pc, #64]	; (326c <SendFrameOnChannel+0x138>)
    322c:	4798      	blx	r3
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    322e:	230f      	movs	r3, #15
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    3230:	2800      	cmp	r0, #0
    3232:	d1a3      	bne.n	317c <SendFrameOnChannel+0x48>
            LoRaMacClassBStopRxSlots( );
    3234:	4b0e      	ldr	r3, [pc, #56]	; (3270 <SendFrameOnChannel+0x13c>)
    3236:	4798      	blx	r3
    3238:	e7ae      	b.n	3198 <SendFrameOnChannel+0x64>
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	20000cbc 	.word	0x20000cbc
    3240:	00006a47 	.word	0x00006a47
    3244:	00008525 	.word	0x00008525
    3248:	00006f79 	.word	0x00006f79
    324c:	00000429 	.word	0x00000429
    3250:	0000042a 	.word	0x0000042a
    3254:	0000042b 	.word	0x0000042b
    3258:	00006a53 	.word	0x00006a53
    325c:	00006a77 	.word	0x00006a77
    3260:	00006a59 	.word	0x00006a59
    3264:	0001407c 	.word	0x0001407c
    3268:	00006a4b 	.word	0x00006a4b
    326c:	00006a4f 	.word	0x00006a4f
    3270:	00006a7b 	.word	0x00006a7b

00003274 <ScheduleTx>:
{
    3274:	b5f0      	push	{r4, r5, r6, r7, lr}
    3276:	46ce      	mov	lr, r9
    3278:	4647      	mov	r7, r8
    327a:	b580      	push	{r7, lr}
    327c:	b093      	sub	sp, #76	; 0x4c
    327e:	9003      	str	r0, [sp, #12]
    TimerTime_t dutyCycleTimeOff = 0;
    3280:	2300      	movs	r3, #0
    3282:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t macCmdsSize = 0;
    3284:	930b      	str	r3, [sp, #44]	; 0x2c
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
    3286:	2399      	movs	r3, #153	; 0x99
    3288:	00db      	lsls	r3, r3, #3
    328a:	4aba      	ldr	r2, [pc, #744]	; (3574 <ScheduleTx+0x300>)
    328c:	58d3      	ldr	r3, [r2, r3]
    328e:	228a      	movs	r2, #138	; 0x8a
    3290:	0052      	lsls	r2, r2, #1
    3292:	5c9a      	ldrb	r2, [r3, r2]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    3294:	2188      	movs	r1, #136	; 0x88
    3296:	0089      	lsls	r1, r1, #2
    3298:	5c59      	ldrb	r1, [r3, r1]
    329a:	2900      	cmp	r1, #0
    329c:	d064      	beq.n	3368 <ScheduleTx+0xf4>
        calcBackOff.Joined = true;
    329e:	2001      	movs	r0, #1
    32a0:	a907      	add	r1, sp, #28
    32a2:	7008      	strb	r0, [r1, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    32a4:	ae07      	add	r6, sp, #28
    32a6:	2189      	movs	r1, #137	; 0x89
    32a8:	0049      	lsls	r1, r1, #1
    32aa:	4688      	mov	r8, r1
    32ac:	5c5b      	ldrb	r3, [r3, r1]
    32ae:	70b3      	strb	r3, [r6, #2]
    calcBackOff.Channel = channel;
    32b0:	70f2      	strb	r2, [r6, #3]
    calcBackOff.ElapsedTime = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.InitializationTime );
    32b2:	a810      	add	r0, sp, #64	; 0x40
    32b4:	4bb0      	ldr	r3, [pc, #704]	; (3578 <ScheduleTx+0x304>)
    32b6:	4798      	blx	r3
    32b8:	af04      	add	r7, sp, #16
    32ba:	4cae      	ldr	r4, [pc, #696]	; (3574 <ScheduleTx+0x300>)
    32bc:	23d5      	movs	r3, #213	; 0xd5
    32be:	009b      	lsls	r3, r3, #2
    32c0:	18e3      	adds	r3, r4, r3
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	9300      	str	r3, [sp, #0]
    32c6:	23d4      	movs	r3, #212	; 0xd4
    32c8:	009b      	lsls	r3, r3, #2
    32ca:	58e3      	ldr	r3, [r4, r3]
    32cc:	9910      	ldr	r1, [sp, #64]	; 0x40
    32ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
    32d0:	0038      	movs	r0, r7
    32d2:	4daa      	ldr	r5, [pc, #680]	; (357c <ScheduleTx+0x308>)
    32d4:	47a8      	blx	r5
    32d6:	ab08      	add	r3, sp, #32
    32d8:	cf06      	ldmia	r7!, {r1, r2}
    32da:	c306      	stmia	r3!, {r1, r2}
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
    32dc:	2781      	movs	r7, #129	; 0x81
    32de:	00ff      	lsls	r7, r7, #3
    32e0:	59e3      	ldr	r3, [r4, r7]
    32e2:	60f3      	str	r3, [r6, #12]
    calcBackOff.LastTxIsJoinRequest = MacCtx.LastTxIsJoinRequest;
    32e4:	23d3      	movs	r3, #211	; 0xd3
    32e6:	009b      	lsls	r3, r3, #2
    32e8:	5ce3      	ldrb	r3, [r4, r3]
    32ea:	7073      	strb	r3, [r6, #1]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
    32ec:	2399      	movs	r3, #153	; 0x99
    32ee:	00db      	lsls	r3, r3, #3
    32f0:	4699      	mov	r9, r3
    32f2:	58e3      	ldr	r3, [r4, r3]
    32f4:	7818      	ldrb	r0, [r3, #0]
    32f6:	0031      	movs	r1, r6
    32f8:	4ba1      	ldr	r3, [pc, #644]	; (3580 <ScheduleTx+0x30c>)
    32fa:	4798      	blx	r3
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
    32fc:	464b      	mov	r3, r9
    32fe:	58e3      	ldr	r3, [r4, r3]
    3300:	4aa0      	ldr	r2, [pc, #640]	; (3584 <ScheduleTx+0x310>)
    3302:	5a99      	ldrh	r1, [r3, r2]
    3304:	3901      	subs	r1, #1
    3306:	59e2      	ldr	r2, [r4, r7]
    3308:	434a      	muls	r2, r1
    330a:	21d2      	movs	r1, #210	; 0xd2
    330c:	0089      	lsls	r1, r1, #2
    330e:	5062      	str	r2, [r4, r1]
    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
    3310:	a90c      	add	r1, sp, #48	; 0x30
    3312:	920c      	str	r2, [sp, #48]	; 0x30
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    3314:	22d5      	movs	r2, #213	; 0xd5
    3316:	5c9a      	ldrb	r2, [r3, r2]
    3318:	720a      	strb	r2, [r1, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    331a:	4642      	mov	r2, r8
    331c:	5c9a      	ldrb	r2, [r3, r2]
    331e:	728a      	strb	r2, [r1, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    3320:	2288      	movs	r2, #136	; 0x88
    3322:	0092      	lsls	r2, r2, #2
    3324:	5c9a      	ldrb	r2, [r3, r2]
    3326:	2a00      	cmp	r2, #0
    3328:	d122      	bne.n	3370 <ScheduleTx+0xfc>
        nextChan.Joined = false;
    332a:	2100      	movs	r1, #0
    332c:	aa0c      	add	r2, sp, #48	; 0x30
    332e:	7251      	strb	r1, [r2, #9]
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
    3330:	4990      	ldr	r1, [pc, #576]	; (3574 <ScheduleTx+0x300>)
    3332:	22d1      	movs	r2, #209	; 0xd1
    3334:	0092      	lsls	r2, r2, #2
    3336:	588a      	ldr	r2, [r1, r2]
    3338:	9202      	str	r2, [sp, #8]
    333a:	920d      	str	r2, [sp, #52]	; 0x34
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
    333c:	001a      	movs	r2, r3
    333e:	3214      	adds	r2, #20
    3340:	32ff      	adds	r2, #255	; 0xff
    3342:	7818      	ldrb	r0, [r3, #0]
    3344:	23d2      	movs	r3, #210	; 0xd2
    3346:	009b      	lsls	r3, r3, #2
    3348:	469c      	mov	ip, r3
    334a:	4461      	add	r1, ip
    334c:	9100      	str	r1, [sp, #0]
    334e:	ab0f      	add	r3, sp, #60	; 0x3c
    3350:	a90c      	add	r1, sp, #48	; 0x30
    3352:	4c8d      	ldr	r4, [pc, #564]	; (3588 <ScheduleTx+0x314>)
    3354:	47a0      	blx	r4
    if( status != LORAMAC_STATUS_OK )
    3356:	2800      	cmp	r0, #0
    3358:	d028      	beq.n	33ac <ScheduleTx+0x138>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
    335a:	280b      	cmp	r0, #11
    335c:	d00c      	beq.n	3378 <ScheduleTx+0x104>
}
    335e:	b013      	add	sp, #76	; 0x4c
    3360:	bc0c      	pop	{r2, r3}
    3362:	4690      	mov	r8, r2
    3364:	4699      	mov	r9, r3
    3366:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcBackOff.Joined = false;
    3368:	2000      	movs	r0, #0
    336a:	a907      	add	r1, sp, #28
    336c:	7008      	strb	r0, [r1, #0]
    336e:	e799      	b.n	32a4 <ScheduleTx+0x30>
        nextChan.Joined = true;
    3370:	2101      	movs	r1, #1
    3372:	aa0c      	add	r2, sp, #48	; 0x30
    3374:	7251      	strb	r1, [r2, #9]
    3376:	e7db      	b.n	3330 <ScheduleTx+0xbc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
    3378:	9b03      	ldr	r3, [sp, #12]
    337a:	2b00      	cmp	r3, #0
    337c:	d0ef      	beq.n	335e <ScheduleTx+0xea>
            if( dutyCycleTimeOff != 0 )
    337e:	990f      	ldr	r1, [sp, #60]	; 0x3c
            return LORAMAC_STATUS_OK;
    3380:	2000      	movs	r0, #0
            if( dutyCycleTimeOff != 0 )
    3382:	2900      	cmp	r1, #0
    3384:	d0eb      	beq.n	335e <ScheduleTx+0xea>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
    3386:	4c7b      	ldr	r4, [pc, #492]	; (3574 <ScheduleTx+0x300>)
    3388:	22d8      	movs	r2, #216	; 0xd8
    338a:	0092      	lsls	r2, r2, #2
    338c:	2320      	movs	r3, #32
    338e:	58a0      	ldr	r0, [r4, r2]
    3390:	4303      	orrs	r3, r0
    3392:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
    3394:	23e2      	movs	r3, #226	; 0xe2
    3396:	009b      	lsls	r3, r3, #2
    3398:	469c      	mov	ip, r3
    339a:	4464      	add	r4, ip
    339c:	0020      	movs	r0, r4
    339e:	4b7b      	ldr	r3, [pc, #492]	; (358c <ScheduleTx+0x318>)
    33a0:	4798      	blx	r3
                TimerStart( &MacCtx.TxDelayedTimer );
    33a2:	0020      	movs	r0, r4
    33a4:	4b7a      	ldr	r3, [pc, #488]	; (3590 <ScheduleTx+0x31c>)
    33a6:	4798      	blx	r3
            return LORAMAC_STATUS_OK;
    33a8:	2000      	movs	r0, #0
    33aa:	e7d8      	b.n	335e <ScheduleTx+0xea>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    33ac:	4c71      	ldr	r4, [pc, #452]	; (3574 <ScheduleTx+0x300>)
    33ae:	2599      	movs	r5, #153	; 0x99
    33b0:	00ed      	lsls	r5, r5, #3
    33b2:	5961      	ldr	r1, [r4, r5]
    33b4:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
    33b6:	23f5      	movs	r3, #245	; 0xf5
    33b8:	56cb      	ldrsb	r3, [r1, r3]
    33ba:	22d5      	movs	r2, #213	; 0xd5
    33bc:	568a      	ldrsb	r2, [r1, r2]
    33be:	2002      	movs	r0, #2
    33c0:	30ff      	adds	r0, #255	; 0xff
    33c2:	5c09      	ldrb	r1, [r1, r0]
    33c4:	0030      	movs	r0, r6
    33c6:	4f73      	ldr	r7, [pc, #460]	; (3594 <ScheduleTx+0x320>)
    33c8:	47b8      	blx	r7
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    33ca:	5962      	ldr	r2, [r4, r5]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    33cc:	23d8      	movs	r3, #216	; 0xd8
    33ce:	4698      	mov	r8, r3
    33d0:	58d3      	ldr	r3, [r2, r3]
    33d2:	27dc      	movs	r7, #220	; 0xdc
    33d4:	5dd2      	ldrb	r2, [r2, r7]
    33d6:	b241      	sxtb	r1, r0
    33d8:	20f3      	movs	r0, #243	; 0xf3
    33da:	0080      	lsls	r0, r0, #2
    33dc:	1820      	adds	r0, r4, r0
    33de:	9000      	str	r0, [sp, #0]
    33e0:	0030      	movs	r0, r6
    33e2:	4e6d      	ldr	r6, [pc, #436]	; (3598 <ScheduleTx+0x324>)
    33e4:	47b0      	blx	r6
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    33e6:	5960      	ldr	r0, [r4, r5]
    33e8:	4643      	mov	r3, r8
    33ea:	58c3      	ldr	r3, [r0, r3]
    33ec:	5dc2      	ldrb	r2, [r0, r7]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    33ee:	21fc      	movs	r1, #252	; 0xfc
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    33f0:	5641      	ldrsb	r1, [r0, r1]
    33f2:	7800      	ldrb	r0, [r0, #0]
    33f4:	27f8      	movs	r7, #248	; 0xf8
    33f6:	00bf      	lsls	r7, r7, #2
    33f8:	19e7      	adds	r7, r4, r7
    33fa:	9700      	str	r7, [sp, #0]
    33fc:	47b0      	blx	r6
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    33fe:	5962      	ldr	r2, [r4, r5]
    3400:	2388      	movs	r3, #136	; 0x88
    3402:	009b      	lsls	r3, r3, #2
    3404:	5cd3      	ldrb	r3, [r2, r3]
    3406:	2b00      	cmp	r3, #0
    3408:	d12a      	bne.n	3460 <ScheduleTx+0x1ec>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    340a:	4b5a      	ldr	r3, [pc, #360]	; (3574 <ScheduleTx+0x300>)
    340c:	21ec      	movs	r1, #236	; 0xec
    340e:	5851      	ldr	r1, [r2, r1]
    3410:	20f6      	movs	r0, #246	; 0xf6
    3412:	0080      	lsls	r0, r0, #2
    3414:	5818      	ldr	r0, [r3, r0]
    3416:	1809      	adds	r1, r1, r0
    3418:	20f1      	movs	r0, #241	; 0xf1
    341a:	0080      	lsls	r0, r0, #2
    341c:	5019      	str	r1, [r3, r0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    341e:	21f0      	movs	r1, #240	; 0xf0
    3420:	5852      	ldr	r2, [r2, r1]
    3422:	21fb      	movs	r1, #251	; 0xfb
    3424:	0089      	lsls	r1, r1, #2
    3426:	5859      	ldr	r1, [r3, r1]
    3428:	1852      	adds	r2, r2, r1
    342a:	21f2      	movs	r1, #242	; 0xf2
    342c:	0089      	lsls	r1, r1, #2
    342e:	505a      	str	r2, [r3, r1]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
    3430:	4b50      	ldr	r3, [pc, #320]	; (3574 <ScheduleTx+0x300>)
    3432:	2299      	movs	r2, #153	; 0x99
    3434:	00d2      	lsls	r2, r2, #3
    3436:	589a      	ldr	r2, [r3, r2]
    3438:	21d5      	movs	r1, #213	; 0xd5
    343a:	5654      	ldrsb	r4, [r2, r1]
    343c:	2014      	movs	r0, #20
    343e:	30ff      	adds	r0, #255	; 0xff
    3440:	5c15      	ldrb	r5, [r2, r0]
    uint32_t fCntUp = 0;
    3442:	2200      	movs	r2, #0
    3444:	9207      	str	r2, [sp, #28]
    switch( MacCtx.TxMsg.Type )
    3446:	3211      	adds	r2, #17
    3448:	32ff      	adds	r2, #255	; 0xff
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b01      	cmp	r3, #1
    344e:	d056      	beq.n	34fe <ScheduleTx+0x28a>
    3450:	2b00      	cmp	r3, #0
    3452:	d03b      	beq.n	34cc <ScheduleTx+0x258>
    3454:	2b02      	cmp	r3, #2
    3456:	d062      	beq.n	351e <ScheduleTx+0x2aa>
    3458:	2b04      	cmp	r3, #4
    345a:	d070      	beq.n	353e <ScheduleTx+0x2ca>
            return LORAMAC_STATUS_PARAMETER_INVALID;
    345c:	2003      	movs	r0, #3
    345e:	e77e      	b.n	335e <ScheduleTx+0xea>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    3460:	a80b      	add	r0, sp, #44	; 0x2c
    3462:	4b4e      	ldr	r3, [pc, #312]	; (359c <ScheduleTx+0x328>)
    3464:	4798      	blx	r3
    3466:	0003      	movs	r3, r0
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    3468:	2013      	movs	r0, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    346a:	2b00      	cmp	r3, #0
    346c:	d000      	beq.n	3470 <ScheduleTx+0x1fc>
    346e:	e776      	b.n	335e <ScheduleTx+0xea>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
    3470:	4b40      	ldr	r3, [pc, #256]	; (3574 <ScheduleTx+0x300>)
    3472:	4a4b      	ldr	r2, [pc, #300]	; (35a0 <ScheduleTx+0x32c>)
    3474:	5c9c      	ldrb	r4, [r3, r2]
    3476:	aa02      	add	r2, sp, #8
    3478:	2124      	movs	r1, #36	; 0x24
    347a:	1852      	adds	r2, r2, r1
    347c:	7815      	ldrb	r5, [r2, #0]
    347e:	2299      	movs	r2, #153	; 0x99
    3480:	00d2      	lsls	r2, r2, #3
    3482:	589a      	ldr	r2, [r3, r2]
    3484:	23d5      	movs	r3, #213	; 0xd5
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
    3486:	56d0      	ldrsb	r0, [r2, r3]
    3488:	4b46      	ldr	r3, [pc, #280]	; (35a4 <ScheduleTx+0x330>)
    348a:	4798      	blx	r3
    payloadSize = ( lenN + fOptsLen );
    348c:	1964      	adds	r4, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
    348e:	b282      	uxth	r2, r0
            return LORAMAC_STATUS_LENGTH_ERROR;
    3490:	2008      	movs	r0, #8
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
    3492:	42a2      	cmp	r2, r4
    3494:	d200      	bcs.n	3498 <ScheduleTx+0x224>
    3496:	e762      	b.n	335e <ScheduleTx+0xea>
    3498:	2cff      	cmp	r4, #255	; 0xff
    349a:	d900      	bls.n	349e <ScheduleTx+0x22a>
    349c:	e75f      	b.n	335e <ScheduleTx+0xea>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    349e:	4b35      	ldr	r3, [pc, #212]	; (3574 <ScheduleTx+0x300>)
    34a0:	2299      	movs	r2, #153	; 0x99
    34a2:	00d2      	lsls	r2, r2, #3
    34a4:	5899      	ldr	r1, [r3, r2]
    34a6:	22e4      	movs	r2, #228	; 0xe4
    34a8:	588a      	ldr	r2, [r1, r2]
    34aa:	20f6      	movs	r0, #246	; 0xf6
    34ac:	0080      	lsls	r0, r0, #2
    34ae:	5818      	ldr	r0, [r3, r0]
    34b0:	1812      	adds	r2, r2, r0
    34b2:	20f1      	movs	r0, #241	; 0xf1
    34b4:	0080      	lsls	r0, r0, #2
    34b6:	501a      	str	r2, [r3, r0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    34b8:	22e8      	movs	r2, #232	; 0xe8
    34ba:	588a      	ldr	r2, [r1, r2]
    34bc:	21fb      	movs	r1, #251	; 0xfb
    34be:	0089      	lsls	r1, r1, #2
    34c0:	5859      	ldr	r1, [r3, r1]
    34c2:	1852      	adds	r2, r2, r1
    34c4:	21f2      	movs	r1, #242	; 0xf2
    34c6:	0089      	lsls	r1, r1, #2
    34c8:	505a      	str	r2, [r3, r1]
    34ca:	e7b1      	b.n	3430 <ScheduleTx+0x1bc>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
    34cc:	4829      	ldr	r0, [pc, #164]	; (3574 <ScheduleTx+0x300>)
    34ce:	3015      	adds	r0, #21
    34d0:	30ff      	adds	r0, #255	; 0xff
    34d2:	4b35      	ldr	r3, [pc, #212]	; (35a8 <ScheduleTx+0x334>)
    34d4:	4798      	blx	r3
    34d6:	0003      	movs	r3, r0
                return LORAMAC_STATUS_CRYPTO_ERROR;
    34d8:	2011      	movs	r0, #17
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    34da:	2b00      	cmp	r3, #0
    34dc:	d000      	beq.n	34e0 <ScheduleTx+0x26c>
    34de:	e73e      	b.n	335e <ScheduleTx+0xea>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
    34e0:	4b24      	ldr	r3, [pc, #144]	; (3574 <ScheduleTx+0x300>)
    34e2:	228c      	movs	r2, #140	; 0x8c
    34e4:	0052      	lsls	r2, r2, #1
    34e6:	5c9a      	ldrb	r2, [r3, r2]
    34e8:	819a      	strh	r2, [r3, #12]
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
    34ea:	2399      	movs	r3, #153	; 0x99
    34ec:	00db      	lsls	r3, r3, #3
    34ee:	4a21      	ldr	r2, [pc, #132]	; (3574 <ScheduleTx+0x300>)
    34f0:	58d2      	ldr	r2, [r2, r3]
    34f2:	2314      	movs	r3, #20
    34f4:	33ff      	adds	r3, #255	; 0xff
    34f6:	5cd0      	ldrb	r0, [r2, r3]
    34f8:	4b2c      	ldr	r3, [pc, #176]	; (35ac <ScheduleTx+0x338>)
    34fa:	4798      	blx	r3
    34fc:	e72f      	b.n	335e <ScheduleTx+0xea>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
    34fe:	481d      	ldr	r0, [pc, #116]	; (3574 <ScheduleTx+0x300>)
    3500:	3015      	adds	r0, #21
    3502:	30ff      	adds	r0, #255	; 0xff
    3504:	4b2a      	ldr	r3, [pc, #168]	; (35b0 <ScheduleTx+0x33c>)
    3506:	4798      	blx	r3
    3508:	0003      	movs	r3, r0
                return LORAMAC_STATUS_CRYPTO_ERROR;
    350a:	2011      	movs	r0, #17
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    350c:	2b00      	cmp	r3, #0
    350e:	d000      	beq.n	3512 <ScheduleTx+0x29e>
    3510:	e725      	b.n	335e <ScheduleTx+0xea>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
    3512:	4b18      	ldr	r3, [pc, #96]	; (3574 <ScheduleTx+0x300>)
    3514:	228c      	movs	r2, #140	; 0x8c
    3516:	0052      	lsls	r2, r2, #1
    3518:	5c9a      	ldrb	r2, [r3, r2]
    351a:	819a      	strh	r2, [r3, #12]
    351c:	e7e5      	b.n	34ea <ScheduleTx+0x276>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
    351e:	4815      	ldr	r0, [pc, #84]	; (3574 <ScheduleTx+0x300>)
    3520:	3015      	adds	r0, #21
    3522:	30ff      	adds	r0, #255	; 0xff
    3524:	4b23      	ldr	r3, [pc, #140]	; (35b4 <ScheduleTx+0x340>)
    3526:	4798      	blx	r3
    3528:	0003      	movs	r3, r0
                return LORAMAC_STATUS_CRYPTO_ERROR;
    352a:	2011      	movs	r0, #17
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    352c:	2b00      	cmp	r3, #0
    352e:	d000      	beq.n	3532 <ScheduleTx+0x2be>
    3530:	e715      	b.n	335e <ScheduleTx+0xea>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
    3532:	4b10      	ldr	r3, [pc, #64]	; (3574 <ScheduleTx+0x300>)
    3534:	228c      	movs	r2, #140	; 0x8c
    3536:	0052      	lsls	r2, r2, #1
    3538:	5c9a      	ldrb	r2, [r3, r2]
    353a:	819a      	strh	r2, [r3, #12]
    353c:	e7d5      	b.n	34ea <ScheduleTx+0x276>
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    353e:	a807      	add	r0, sp, #28
    3540:	4b1d      	ldr	r3, [pc, #116]	; (35b8 <ScheduleTx+0x344>)
    3542:	4798      	blx	r3
    3544:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    3546:	2012      	movs	r0, #18
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    3548:	2b00      	cmp	r3, #0
    354a:	d000      	beq.n	354e <ScheduleTx+0x2da>
    354c:	e707      	b.n	335e <ScheduleTx+0xea>
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
    354e:	4b09      	ldr	r3, [pc, #36]	; (3574 <ScheduleTx+0x300>)
    3550:	3315      	adds	r3, #21
    3552:	33ff      	adds	r3, #255	; 0xff
    3554:	b2e1      	uxtb	r1, r4
    3556:	002a      	movs	r2, r5
    3558:	9807      	ldr	r0, [sp, #28]
    355a:	4c18      	ldr	r4, [pc, #96]	; (35bc <ScheduleTx+0x348>)
    355c:	47a0      	blx	r4
    355e:	0003      	movs	r3, r0
                return LORAMAC_STATUS_CRYPTO_ERROR;
    3560:	2011      	movs	r0, #17
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    3562:	2b00      	cmp	r3, #0
    3564:	d000      	beq.n	3568 <ScheduleTx+0x2f4>
    3566:	e6fa      	b.n	335e <ScheduleTx+0xea>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
    3568:	4b02      	ldr	r3, [pc, #8]	; (3574 <ScheduleTx+0x300>)
    356a:	228c      	movs	r2, #140	; 0x8c
    356c:	0052      	lsls	r2, r2, #1
    356e:	5c9a      	ldrb	r2, [r3, r2]
    3570:	819a      	strh	r2, [r3, #12]
    3572:	e7ba      	b.n	34ea <ScheduleTx+0x276>
    3574:	20000cbc 	.word	0x20000cbc
    3578:	0000bfb9 	.word	0x0000bfb9
    357c:	0000bed9 	.word	0x0000bed9
    3580:	000085e1 	.word	0x000085e1
    3584:	0000021a 	.word	0x0000021a
    3588:	000085f5 	.word	0x000085f5
    358c:	0000c23d 	.word	0x0000c23d
    3590:	0000c04d 	.word	0x0000c04d
    3594:	00008629 	.word	0x00008629
    3598:	000084ed 	.word	0x000084ed
    359c:	00006d0d 	.word	0x00006d0d
    35a0:	00000243 	.word	0x00000243
    35a4:	000028dd 	.word	0x000028dd
    35a8:	000077a5 	.word	0x000077a5
    35ac:	00003135 	.word	0x00003135
    35b0:	00007825 	.word	0x00007825
    35b4:	00007895 	.word	0x00007895
    35b8:	00007fd1 	.word	0x00007fd1
    35bc:	00007b1d 	.word	0x00007b1d

000035c0 <OnTxDelayedTimerEvent>:
{
    35c0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
    35c2:	4c14      	ldr	r4, [pc, #80]	; (3614 <OnTxDelayedTimerEvent+0x54>)
    35c4:	23e2      	movs	r3, #226	; 0xe2
    35c6:	009b      	lsls	r3, r3, #2
    35c8:	18e0      	adds	r0, r4, r3
    35ca:	4b13      	ldr	r3, [pc, #76]	; (3618 <OnTxDelayedTimerEvent+0x58>)
    35cc:	4798      	blx	r3
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
    35ce:	22d8      	movs	r2, #216	; 0xd8
    35d0:	0092      	lsls	r2, r2, #2
    35d2:	2320      	movs	r3, #32
    35d4:	58a1      	ldr	r1, [r4, r2]
    35d6:	4399      	bics	r1, r3
    35d8:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
    35da:	2001      	movs	r0, #1
    35dc:	4b0f      	ldr	r3, [pc, #60]	; (361c <OnTxDelayedTimerEvent+0x5c>)
    35de:	4798      	blx	r3
    35e0:	2800      	cmp	r0, #0
    35e2:	d016      	beq.n	3612 <OnTxDelayedTimerEvent+0x52>
    35e4:	280b      	cmp	r0, #11
    35e6:	d014      	beq.n	3612 <OnTxDelayedTimerEvent+0x52>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    35e8:	4b0a      	ldr	r3, [pc, #40]	; (3614 <OnTxDelayedTimerEvent+0x54>)
    35ea:	2299      	movs	r2, #153	; 0x99
    35ec:	00d2      	lsls	r2, r2, #3
    35ee:	589a      	ldr	r2, [r3, r2]
    35f0:	21d5      	movs	r1, #213	; 0xd5
    35f2:	5c50      	ldrb	r0, [r2, r1]
    35f4:	490a      	ldr	r1, [pc, #40]	; (3620 <OnTxDelayedTimerEvent+0x60>)
    35f6:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    35f8:	2188      	movs	r1, #136	; 0x88
    35fa:	0049      	lsls	r1, r1, #1
    35fc:	5c51      	ldrb	r1, [r2, r1]
    35fe:	4a09      	ldr	r2, [pc, #36]	; (3624 <OnTxDelayedTimerEvent+0x64>)
    3600:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
    3602:	2109      	movs	r1, #9
    3604:	4a08      	ldr	r2, [pc, #32]	; (3628 <OnTxDelayedTimerEvent+0x68>)
    3606:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
    3608:	2009      	movs	r0, #9
    360a:	4b08      	ldr	r3, [pc, #32]	; (362c <OnTxDelayedTimerEvent+0x6c>)
    360c:	4798      	blx	r3
            StopRetransmission( );
    360e:	4b08      	ldr	r3, [pc, #32]	; (3630 <OnTxDelayedTimerEvent+0x70>)
    3610:	4798      	blx	r3
}
    3612:	bd10      	pop	{r4, pc}
    3614:	20000cbc 	.word	0x20000cbc
    3618:	0000c1a5 	.word	0x0000c1a5
    361c:	00003275 	.word	0x00003275
    3620:	0000042a 	.word	0x0000042a
    3624:	0000042d 	.word	0x0000042d
    3628:	00000429 	.word	0x00000429
    362c:	00006f79 	.word	0x00006f79
    3630:	000029c1 	.word	0x000029c1

00003634 <Send>:
{
    3634:	b5f0      	push	{r4, r5, r6, r7, lr}
    3636:	46c6      	mov	lr, r8
    3638:	b500      	push	{lr}
    363a:	b08e      	sub	sp, #56	; 0x38
    363c:	9003      	str	r0, [sp, #12]
    363e:	9104      	str	r1, [sp, #16]
    3640:	9205      	str	r2, [sp, #20]
    3642:	001f      	movs	r7, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    3644:	2399      	movs	r3, #153	; 0x99
    3646:	00db      	lsls	r3, r3, #3
    3648:	4a4e      	ldr	r2, [pc, #312]	; (3784 <Send+0x150>)
    364a:	58d1      	ldr	r1, [r2, r3]
    364c:	23d5      	movs	r3, #213	; 0xd5
    364e:	56ce      	ldrsb	r6, [r1, r3]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    3650:	3b01      	subs	r3, #1
    3652:	56cd      	ldrsb	r5, [r1, r3]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    3654:	3b08      	subs	r3, #8
    3656:	58cb      	ldr	r3, [r1, r3]
    3658:	930c      	str	r3, [sp, #48]	; 0x30
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    365a:	2388      	movs	r3, #136	; 0x88
    365c:	009b      	lsls	r3, r3, #2
    365e:	5ccb      	ldrb	r3, [r1, r3]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
    3660:	2407      	movs	r4, #7
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    3662:	2b00      	cmp	r3, #0
    3664:	d104      	bne.n	3670 <Send+0x3c>
}
    3666:	0020      	movs	r0, r4
    3668:	b00e      	add	sp, #56	; 0x38
    366a:	bc04      	pop	{r2}
    366c:	4690      	mov	r8, r2
    366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
    3670:	2312      	movs	r3, #18
    3672:	33ff      	adds	r3, #255	; 0xff
    3674:	5ccb      	ldrb	r3, [r1, r3]
    3676:	2b00      	cmp	r3, #0
    3678:	d103      	bne.n	3682 <Send+0x4e>
        MacCtx.AggregatedTimeOff = 0;
    367a:	2000      	movs	r0, #0
    367c:	23d2      	movs	r3, #210	; 0xd2
    367e:	009b      	lsls	r3, r3, #2
    3680:	50d0      	str	r0, [r2, r3]
    fCtrl.Value = 0;
    3682:	ab0d      	add	r3, sp, #52	; 0x34
    fCtrl.Bits.FOptsLen      = 0;
    3684:	2200      	movs	r2, #0
    3686:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
    3688:	32ca      	adds	r2, #202	; 0xca
    368a:	5c8c      	ldrb	r4, [r1, r2]
    368c:	01e2      	lsls	r2, r4, #7
    368e:	4690      	mov	r8, r2
    3690:	781a      	ldrb	r2, [r3, #0]
    3692:	4694      	mov	ip, r2
    3694:	227f      	movs	r2, #127	; 0x7f
    3696:	4660      	mov	r0, ip
    3698:	4002      	ands	r2, r0
    369a:	4640      	mov	r0, r8
    369c:	4302      	orrs	r2, r0
    369e:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    36a0:	23c8      	movs	r3, #200	; 0xc8
    36a2:	5ccb      	ldrb	r3, [r1, r3]
    36a4:	2b01      	cmp	r3, #1
    36a6:	d04e      	beq.n	3746 <Send+0x112>
        fCtrl.Bits.FPending      = 0;
    36a8:	ab0d      	add	r3, sp, #52	; 0x34
    36aa:	781a      	ldrb	r2, [r3, #0]
    36ac:	2010      	movs	r0, #16
    36ae:	4382      	bics	r2, r0
    36b0:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
    36b2:	2386      	movs	r3, #134	; 0x86
    36b4:	009b      	lsls	r3, r3, #2
    36b6:	5ccb      	ldrb	r3, [r1, r3]
    36b8:	2b00      	cmp	r3, #0
    36ba:	d004      	beq.n	36c6 <Send+0x92>
        fCtrl.Bits.Ack = 1;
    36bc:	ab0d      	add	r3, sp, #52	; 0x34
    36be:	781a      	ldrb	r2, [r3, #0]
    36c0:	2020      	movs	r0, #32
    36c2:	4302      	orrs	r2, r0
    36c4:	701a      	strb	r2, [r3, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
    36c6:	a807      	add	r0, sp, #28
    36c8:	2387      	movs	r3, #135	; 0x87
    36ca:	009b      	lsls	r3, r3, #2
    36cc:	58cb      	ldr	r3, [r1, r3]
    36ce:	9307      	str	r3, [sp, #28]
    adrNext.UpdateChanMask = true;
    36d0:	2301      	movs	r3, #1
    36d2:	7103      	strb	r3, [r0, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
    36d4:	7144      	strb	r4, [r0, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    36d6:	33cb      	adds	r3, #203	; 0xcb
    36d8:	58cb      	ldr	r3, [r1, r3]
    36da:	6083      	str	r3, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    36dc:	23d0      	movs	r3, #208	; 0xd0
    36de:	5acb      	ldrh	r3, [r1, r3]
    36e0:	8183      	strh	r3, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    36e2:	23d2      	movs	r3, #210	; 0xd2
    36e4:	5acb      	ldrh	r3, [r1, r3]
    36e6:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    36e8:	23d5      	movs	r3, #213	; 0xd5
    36ea:	5ccb      	ldrb	r3, [r1, r3]
    36ec:	7403      	strb	r3, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    36ee:	23d4      	movs	r3, #212	; 0xd4
    36f0:	5ccb      	ldrb	r3, [r1, r3]
    36f2:	7443      	strb	r3, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    36f4:	2380      	movs	r3, #128	; 0x80
    36f6:	005b      	lsls	r3, r3, #1
    36f8:	5ccb      	ldrb	r3, [r1, r3]
    36fa:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    36fc:	780b      	ldrb	r3, [r1, #0]
    36fe:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
    3700:	000a      	movs	r2, r1
    3702:	32d4      	adds	r2, #212	; 0xd4
    3704:	31d5      	adds	r1, #213	; 0xd5
    3706:	ab0c      	add	r3, sp, #48	; 0x30
    3708:	4c1f      	ldr	r4, [pc, #124]	; (3788 <Send+0x154>)
    370a:	47a0      	blx	r4
    370c:	a90d      	add	r1, sp, #52	; 0x34
    370e:	2301      	movs	r3, #1
    3710:	4003      	ands	r3, r0
    3712:	019b      	lsls	r3, r3, #6
    3714:	7808      	ldrb	r0, [r1, #0]
    3716:	2240      	movs	r2, #64	; 0x40
    3718:	4390      	bics	r0, r2
    371a:	4318      	orrs	r0, r3
    371c:	7008      	strb	r0, [r1, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
    371e:	9700      	str	r7, [sp, #0]
    3720:	9b05      	ldr	r3, [sp, #20]
    3722:	9a04      	ldr	r2, [sp, #16]
    3724:	9803      	ldr	r0, [sp, #12]
    3726:	4c19      	ldr	r4, [pc, #100]	; (378c <Send+0x158>)
    3728:	47a0      	blx	r4
    372a:	1e04      	subs	r4, r0, #0
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
    372c:	d011      	beq.n	3752 <Send+0x11e>
    372e:	280a      	cmp	r0, #10
    3730:	d00f      	beq.n	3752 <Send+0x11e>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
    3732:	4a14      	ldr	r2, [pc, #80]	; (3784 <Send+0x150>)
    3734:	2399      	movs	r3, #153	; 0x99
    3736:	00db      	lsls	r3, r3, #3
    3738:	21d5      	movs	r1, #213	; 0xd5
    373a:	58d0      	ldr	r0, [r2, r3]
    373c:	5446      	strb	r6, [r0, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
    373e:	58d2      	ldr	r2, [r2, r3]
    3740:	23d4      	movs	r3, #212	; 0xd4
    3742:	54d5      	strb	r5, [r2, r3]
    3744:	e78f      	b.n	3666 <Send+0x32>
        fCtrl.Bits.FPending      = 1;
    3746:	ab0d      	add	r3, sp, #52	; 0x34
    3748:	b2d2      	uxtb	r2, r2
    374a:	2010      	movs	r0, #16
    374c:	4302      	orrs	r2, r0
    374e:	701a      	strb	r2, [r3, #0]
    3750:	e7af      	b.n	36b2 <Send+0x7e>
        status = ScheduleTx( false );
    3752:	2000      	movs	r0, #0
    3754:	4b0e      	ldr	r3, [pc, #56]	; (3790 <Send+0x15c>)
    3756:	4798      	blx	r3
    3758:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
    375a:	d1ea      	bne.n	3732 <Send+0xfe>
        MacCtx.NvmCtx->SrvAckRequested = false;
    375c:	4a09      	ldr	r2, [pc, #36]	; (3784 <Send+0x150>)
    375e:	2399      	movs	r3, #153	; 0x99
    3760:	00db      	lsls	r3, r3, #3
    3762:	2000      	movs	r0, #0
    3764:	2186      	movs	r1, #134	; 0x86
    3766:	0089      	lsls	r1, r1, #2
    3768:	58d5      	ldr	r5, [r2, r3]
    376a:	5468      	strb	r0, [r5, r1]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
    376c:	58d2      	ldr	r2, [r2, r3]
    376e:	23cc      	movs	r3, #204	; 0xcc
    3770:	990c      	ldr	r1, [sp, #48]	; 0x30
    3772:	50d1      	str	r1, [r2, r3]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
    3774:	4b07      	ldr	r3, [pc, #28]	; (3794 <Send+0x160>)
    3776:	4798      	blx	r3
    3778:	2800      	cmp	r0, #0
    377a:	d100      	bne.n	377e <Send+0x14a>
    377c:	e773      	b.n	3666 <Send+0x32>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    377e:	2413      	movs	r4, #19
    3780:	e771      	b.n	3666 <Send+0x32>
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	20000cbc 	.word	0x20000cbc
    3788:	00006881 	.word	0x00006881
    378c:	00002f31 	.word	0x00002f31
    3790:	00003275 	.word	0x00003275
    3794:	00006c95 	.word	0x00006c95

00003798 <SendReJoinReq>:
{
    3798:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
    379a:	2801      	cmp	r0, #1
    379c:	d007      	beq.n	37ae <SendReJoinReq+0x16>
    379e:	2800      	cmp	r0, #0
    37a0:	d038      	beq.n	3814 <SendReJoinReq+0x7c>
    37a2:	2802      	cmp	r0, #2
    37a4:	d036      	beq.n	3814 <SendReJoinReq+0x7c>
    37a6:	28ff      	cmp	r0, #255	; 0xff
    37a8:	d07e      	beq.n	38a8 <SendReJoinReq+0x110>
    bool allowDelayedTx = true;
    37aa:	2001      	movs	r0, #1
    37ac:	e09a      	b.n	38e4 <SendReJoinReq+0x14c>
            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    37ae:	4c4f      	ldr	r4, [pc, #316]	; (38ec <SendReJoinReq+0x154>)
    37b0:	2399      	movs	r3, #153	; 0x99
    37b2:	00db      	lsls	r3, r3, #3
    37b4:	58e1      	ldr	r1, [r4, r3]
    37b6:	2301      	movs	r3, #1
    37b8:	228e      	movs	r2, #142	; 0x8e
    37ba:	0092      	lsls	r2, r2, #2
    37bc:	548b      	strb	r3, [r1, r2]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
    37be:	3a29      	subs	r2, #41	; 0x29
    37c0:	3aff      	subs	r2, #255	; 0xff
    37c2:	54a3      	strb	r3, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
    37c4:	0021      	movs	r1, r4
    37c6:	310e      	adds	r1, #14
    37c8:	3204      	adds	r2, #4
    37ca:	50a1      	str	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    37cc:	21ff      	movs	r1, #255	; 0xff
    37ce:	3204      	adds	r2, #4
    37d0:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin1.MHDR.Value = macHdr.Value;
    37d2:	221a      	movs	r2, #26
    37d4:	32ff      	adds	r2, #255	; 0xff
    37d6:	3940      	subs	r1, #64	; 0x40
    37d8:	39ff      	subs	r1, #255	; 0xff
    37da:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
    37dc:	3201      	adds	r2, #1
    37de:	54a3      	strb	r3, [r4, r2]
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    37e0:	0020      	movs	r0, r4
    37e2:	301c      	adds	r0, #28
    37e4:	30ff      	adds	r0, #255	; 0xff
    37e6:	3a13      	subs	r2, #19
    37e8:	3aff      	subs	r2, #255	; 0xff
    37ea:	68a1      	ldr	r1, [r4, #8]
    37ec:	4d40      	ldr	r5, [pc, #256]	; (38f0 <SendReJoinReq+0x158>)
    37ee:	47a8      	blx	r5
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    37f0:	0020      	movs	r0, r4
    37f2:	3024      	adds	r0, #36	; 0x24
    37f4:	30ff      	adds	r0, #255	; 0xff
    37f6:	2208      	movs	r2, #8
    37f8:	6861      	ldr	r1, [r4, #4]
    37fa:	47a8      	blx	r5
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
    37fc:	0021      	movs	r1, r4
    37fe:	312d      	adds	r1, #45	; 0x2d
    3800:	31ff      	adds	r1, #255	; 0xff
    3802:	2009      	movs	r0, #9
    3804:	4b3b      	ldr	r3, [pc, #236]	; (38f4 <SendReJoinReq+0x15c>)
    3806:	4798      	blx	r3
    3808:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    380a:	2012      	movs	r0, #18
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
    380c:	2b00      	cmp	r3, #0
    380e:	d16b      	bne.n	38e8 <SendReJoinReq+0x150>
    bool allowDelayedTx = true;
    3810:	3811      	subs	r0, #17
    3812:	e067      	b.n	38e4 <SendReJoinReq+0x14c>
            if( joinReqType == REJOIN_REQ_0 )
    3814:	2800      	cmp	r0, #0
    3816:	d141      	bne.n	389c <SendReJoinReq+0x104>
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 0;
    3818:	2100      	movs	r1, #0
    381a:	238d      	movs	r3, #141	; 0x8d
    381c:	005b      	lsls	r3, r3, #1
    381e:	4a33      	ldr	r2, [pc, #204]	; (38ec <SendReJoinReq+0x154>)
    3820:	54d1      	strb	r1, [r2, r3]
            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    3822:	4c32      	ldr	r4, [pc, #200]	; (38ec <SendReJoinReq+0x154>)
    3824:	2399      	movs	r3, #153	; 0x99
    3826:	00db      	lsls	r3, r3, #3
    3828:	2101      	movs	r1, #1
    382a:	228e      	movs	r2, #142	; 0x8e
    382c:	0092      	lsls	r2, r2, #2
    382e:	58e0      	ldr	r0, [r4, r3]
    3830:	5481      	strb	r1, [r0, r2]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
    3832:	3101      	adds	r1, #1
    3834:	3a29      	subs	r2, #41	; 0x29
    3836:	3aff      	subs	r2, #255	; 0xff
    3838:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
    383a:	0021      	movs	r1, r4
    383c:	310e      	adds	r1, #14
    383e:	3204      	adds	r2, #4
    3840:	50a1      	str	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    3842:	21ff      	movs	r1, #255	; 0xff
    3844:	3204      	adds	r2, #4
    3846:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin0or2.MHDR.Value = macHdr.Value;
    3848:	221a      	movs	r2, #26
    384a:	32ff      	adds	r2, #255	; 0xff
    384c:	3940      	subs	r1, #64	; 0x40
    384e:	39ff      	subs	r1, #255	; 0xff
    3850:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = MacCtx.NvmCtx->NetID & 0xFF;
    3852:	58e3      	ldr	r3, [r4, r3]
    3854:	221c      	movs	r2, #28
    3856:	32ff      	adds	r2, #255	; 0xff
    3858:	3180      	adds	r1, #128	; 0x80
    385a:	1859      	adds	r1, r3, r1
    385c:	7809      	ldrb	r1, [r1, #0]
    385e:	54a1      	strb	r1, [r4, r2]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( MacCtx.NvmCtx->NetID >> 8 ) & 0xFF;
    3860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3862:	0a12      	lsrs	r2, r2, #8
    3864:	218e      	movs	r1, #142	; 0x8e
    3866:	0049      	lsls	r1, r1, #1
    3868:	5462      	strb	r2, [r4, r1]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( MacCtx.NvmCtx->NetID >> 16 ) & 0xFF;
    386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    386c:	0c1b      	lsrs	r3, r3, #16
    386e:	221e      	movs	r2, #30
    3870:	32ff      	adds	r2, #255	; 0xff
    3872:	54a3      	strb	r3, [r4, r2]
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    3874:	0020      	movs	r0, r4
    3876:	301f      	adds	r0, #31
    3878:	30ff      	adds	r0, #255	; 0xff
    387a:	3a16      	subs	r2, #22
    387c:	3aff      	subs	r2, #255	; 0xff
    387e:	6861      	ldr	r1, [r4, #4]
    3880:	4b1b      	ldr	r3, [pc, #108]	; (38f0 <SendReJoinReq+0x158>)
    3882:	4798      	blx	r3
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
    3884:	0021      	movs	r1, r4
    3886:	3127      	adds	r1, #39	; 0x27
    3888:	31ff      	adds	r1, #255	; 0xff
    388a:	2008      	movs	r0, #8
    388c:	4b19      	ldr	r3, [pc, #100]	; (38f4 <SendReJoinReq+0x15c>)
    388e:	4798      	blx	r3
    3890:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    3892:	2012      	movs	r0, #18
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
    3894:	2b00      	cmp	r3, #0
    3896:	d127      	bne.n	38e8 <SendReJoinReq+0x150>
    bool allowDelayedTx = true;
    3898:	3811      	subs	r0, #17
    389a:	e023      	b.n	38e4 <SendReJoinReq+0x14c>
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 2;
    389c:	2102      	movs	r1, #2
    389e:	238d      	movs	r3, #141	; 0x8d
    38a0:	005b      	lsls	r3, r3, #1
    38a2:	4a12      	ldr	r2, [pc, #72]	; (38ec <SendReJoinReq+0x154>)
    38a4:	54d1      	strb	r1, [r2, r3]
    38a6:	e7bc      	b.n	3822 <SendReJoinReq+0x8a>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
    38a8:	4c10      	ldr	r4, [pc, #64]	; (38ec <SendReJoinReq+0x154>)
    38aa:	2200      	movs	r2, #0
    38ac:	2388      	movs	r3, #136	; 0x88
    38ae:	005b      	lsls	r3, r3, #1
    38b0:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
    38b2:	0022      	movs	r2, r4
    38b4:	320e      	adds	r2, #14
    38b6:	3304      	adds	r3, #4
    38b8:	50e2      	str	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    38ba:	22ff      	movs	r2, #255	; 0xff
    38bc:	3304      	adds	r3, #4
    38be:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
    38c0:	231a      	movs	r3, #26
    38c2:	33ff      	adds	r3, #255	; 0xff
    38c4:	2200      	movs	r2, #0
    38c6:	54e2      	strb	r2, [r4, r3]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    38c8:	0020      	movs	r0, r4
    38ca:	301b      	adds	r0, #27
    38cc:	30ff      	adds	r0, #255	; 0xff
    38ce:	3208      	adds	r2, #8
    38d0:	68a1      	ldr	r1, [r4, #8]
    38d2:	4d07      	ldr	r5, [pc, #28]	; (38f0 <SendReJoinReq+0x158>)
    38d4:	47a8      	blx	r5
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    38d6:	6861      	ldr	r1, [r4, #4]
    38d8:	0020      	movs	r0, r4
    38da:	3023      	adds	r0, #35	; 0x23
    38dc:	30ff      	adds	r0, #255	; 0xff
    38de:	2208      	movs	r2, #8
    38e0:	47a8      	blx	r5
            allowDelayedTx = false;
    38e2:	2000      	movs	r0, #0
    status = ScheduleTx( allowDelayedTx );
    38e4:	4b04      	ldr	r3, [pc, #16]	; (38f8 <SendReJoinReq+0x160>)
    38e6:	4798      	blx	r3
}
    38e8:	bd70      	pop	{r4, r5, r6, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	20000cbc 	.word	0x20000cbc
    38f0:	00001e91 	.word	0x00001e91
    38f4:	00008041 	.word	0x00008041
    38f8:	00003275 	.word	0x00003275

000038fc <ProcessMacCommands>:
{
    38fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38fe:	46de      	mov	lr, fp
    3900:	4657      	mov	r7, sl
    3902:	464e      	mov	r6, r9
    3904:	4645      	mov	r5, r8
    3906:	b5e0      	push	{r5, r6, r7, lr}
    3908:	b093      	sub	sp, #76	; 0x4c
    390a:	0006      	movs	r6, r0
    390c:	000f      	movs	r7, r1
    390e:	9204      	str	r2, [sp, #16]
    uint8_t status = 0;
    3910:	2100      	movs	r1, #0
    3912:	222f      	movs	r2, #47	; 0x2f
    3914:	a804      	add	r0, sp, #16
    3916:	4684      	mov	ip, r0
    3918:	4462      	add	r2, ip
    391a:	7011      	strb	r1, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    391c:	aa0f      	add	r2, sp, #60	; 0x3c
    391e:	7011      	strb	r1, [r2, #0]
    3920:	7051      	strb	r1, [r2, #1]
    bool adrBlockFound = false;
    3922:	468b      	mov	fp, r1
                    frequency *= 100;
    3924:	2264      	movs	r2, #100	; 0x64
    3926:	4690      	mov	r8, r2
                macCmdPayload[1] = snr & 0x3F;
    3928:	3a25      	subs	r2, #37	; 0x25
    392a:	4013      	ands	r3, r2
    392c:	9305      	str	r3, [sp, #20]
    while( macIndex < commandsSize )
    392e:	9b04      	ldr	r3, [sp, #16]
    3930:	429f      	cmp	r7, r3
    3932:	d306      	bcc.n	3942 <ProcessMacCommands+0x46>
}
    3934:	b013      	add	sp, #76	; 0x4c
    3936:	bc3c      	pop	{r2, r3, r4, r5}
    3938:	4690      	mov	r8, r2
    393a:	4699      	mov	r9, r3
    393c:	46a2      	mov	sl, r4
    393e:	46ab      	mov	fp, r5
    3940:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
    3942:	1c7c      	adds	r4, r7, #1
    3944:	b2e4      	uxtb	r4, r4
    3946:	5df3      	ldrb	r3, [r6, r7]
    3948:	3b01      	subs	r3, #1
    394a:	b2da      	uxtb	r2, r3
    394c:	2a1f      	cmp	r2, #31
    394e:	d8f1      	bhi.n	3934 <ProcessMacCommands+0x38>
    3950:	b2db      	uxtb	r3, r3
    3952:	009b      	lsls	r3, r3, #2
    3954:	4ae8      	ldr	r2, [pc, #928]	; (3cf8 <ProcessMacCommands+0x3fc>)
    3956:	58d3      	ldr	r3, [r2, r3]
    3958:	469f      	mov	pc, r3
                uint8_t serverMinorVersion = payload[macIndex++];
    395a:	3702      	adds	r7, #2
    395c:	b2ff      	uxtb	r7, r7
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    395e:	2399      	movs	r3, #153	; 0x99
    3960:	00db      	lsls	r3, r3, #3
    3962:	4ae6      	ldr	r2, [pc, #920]	; (3cfc <ProcessMacCommands+0x400>)
    3964:	58d1      	ldr	r1, [r2, r3]
    3966:	5d32      	ldrb	r2, [r6, r4]
    3968:	4be5      	ldr	r3, [pc, #916]	; (3d00 <ProcessMacCommands+0x404>)
    396a:	5ccb      	ldrb	r3, [r1, r3]
                uint8_t serverMinorVersion = payload[macIndex++];
    396c:	003c      	movs	r4, r7
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    396e:	429a      	cmp	r2, r3
    3970:	d106      	bne.n	3980 <ProcessMacCommands+0x84>
                    LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd);
    3972:	a90e      	add	r1, sp, #56	; 0x38
    3974:	2001      	movs	r0, #1
    3976:	4be3      	ldr	r3, [pc, #908]	; (3d04 <ProcessMacCommands+0x408>)
    3978:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    397a:	980e      	ldr	r0, [sp, #56]	; 0x38
    397c:	4be2      	ldr	r3, [pc, #904]	; (3d08 <ProcessMacCommands+0x40c>)
    397e:	4798      	blx	r3
                uint8_t serverMinorVersion = payload[macIndex++];
    3980:	0027      	movs	r7, r4
    3982:	e7d4      	b.n	392e <ProcessMacCommands+0x32>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
    3984:	2003      	movs	r0, #3
    3986:	4be1      	ldr	r3, [pc, #900]	; (3d0c <ProcessMacCommands+0x410>)
    3988:	4798      	blx	r3
    398a:	2800      	cmp	r0, #0
    398c:	d0f8      	beq.n	3980 <ProcessMacCommands+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
    398e:	2103      	movs	r1, #3
    3990:	2000      	movs	r0, #0
    3992:	4bdf      	ldr	r3, [pc, #892]	; (3d10 <ProcessMacCommands+0x414>)
    3994:	4798      	blx	r3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
    3996:	5d31      	ldrb	r1, [r6, r4]
    3998:	4bd8      	ldr	r3, [pc, #864]	; (3cfc <ProcessMacCommands+0x400>)
    399a:	4ade      	ldr	r2, [pc, #888]	; (3d14 <ProcessMacCommands+0x418>)
    399c:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
    399e:	1cfc      	adds	r4, r7, #3
    39a0:	b2e4      	uxtb	r4, r4
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
    39a2:	3702      	adds	r7, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
    39a4:	b2ff      	uxtb	r7, r7
    39a6:	5df1      	ldrb	r1, [r6, r7]
    39a8:	4adb      	ldr	r2, [pc, #876]	; (3d18 <ProcessMacCommands+0x41c>)
    39aa:	5499      	strb	r1, [r3, r2]
    39ac:	e7e8      	b.n	3980 <ProcessMacCommands+0x84>
                int8_t linkAdrDatarate = DR_0;
    39ae:	2300      	movs	r3, #0
    39b0:	220a      	movs	r2, #10
    39b2:	a904      	add	r1, sp, #16
    39b4:	468c      	mov	ip, r1
    39b6:	4462      	add	r2, ip
    39b8:	7013      	strb	r3, [r2, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
    39ba:	220b      	movs	r2, #11
    39bc:	4462      	add	r2, ip
    39be:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbRep = 0;
    39c0:	aa07      	add	r2, sp, #28
    39c2:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbBytesParsed = 0;
    39c4:	aa08      	add	r2, sp, #32
    39c6:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
    39c8:	465b      	mov	r3, fp
    39ca:	2b00      	cmp	r3, #0
    39cc:	d155      	bne.n	3a7a <ProcessMacCommands+0x17e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
    39ce:	a90a      	add	r1, sp, #40	; 0x28
    39d0:	1e63      	subs	r3, r4, #1
    39d2:	18f3      	adds	r3, r6, r3
    39d4:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
    39d6:	9b04      	ldr	r3, [sp, #16]
    39d8:	3301      	adds	r3, #1
    39da:	1b1c      	subs	r4, r3, r4
    39dc:	720c      	strb	r4, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    39de:	2399      	movs	r3, #153	; 0x99
    39e0:	00db      	lsls	r3, r3, #3
    39e2:	4ac6      	ldr	r2, [pc, #792]	; (3cfc <ProcessMacCommands+0x400>)
    39e4:	58d3      	ldr	r3, [r2, r3]
    39e6:	22ca      	movs	r2, #202	; 0xca
    39e8:	5c9a      	ldrb	r2, [r3, r2]
    39ea:	728a      	strb	r2, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    39ec:	2280      	movs	r2, #128	; 0x80
    39ee:	0052      	lsls	r2, r2, #1
    39f0:	5c9a      	ldrb	r2, [r3, r2]
    39f2:	724a      	strb	r2, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    39f4:	22d5      	movs	r2, #213	; 0xd5
    39f6:	5c9a      	ldrb	r2, [r3, r2]
    39f8:	72ca      	strb	r2, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    39fa:	22d4      	movs	r2, #212	; 0xd4
    39fc:	5c9a      	ldrb	r2, [r3, r2]
    39fe:	730a      	strb	r2, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    3a00:	22f4      	movs	r2, #244	; 0xf4
    3a02:	5c9a      	ldrb	r2, [r3, r2]
    3a04:	734a      	strb	r2, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
    3a06:	2287      	movs	r2, #135	; 0x87
    3a08:	0092      	lsls	r2, r2, #2
    3a0a:	589a      	ldr	r2, [r3, r2]
    3a0c:	920a      	str	r2, [sp, #40]	; 0x28
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
    3a0e:	7818      	ldrb	r0, [r3, #0]
    3a10:	ab08      	add	r3, sp, #32
    3a12:	9301      	str	r3, [sp, #4]
    3a14:	ab07      	add	r3, sp, #28
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	230b      	movs	r3, #11
    3a1a:	4463      	add	r3, ip
    3a1c:	220a      	movs	r2, #10
    3a1e:	4462      	add	r2, ip
    3a20:	4cbe      	ldr	r4, [pc, #760]	; (3d1c <ProcessMacCommands+0x420>)
    3a22:	47a0      	blx	r4
    3a24:	232f      	movs	r3, #47	; 0x2f
    3a26:	aa04      	add	r2, sp, #16
    3a28:	4694      	mov	ip, r2
    3a2a:	4463      	add	r3, ip
    3a2c:	7018      	strb	r0, [r3, #0]
                    if( ( status & 0x07 ) == 0x07 )
    3a2e:	43c0      	mvns	r0, r0
    3a30:	0743      	lsls	r3, r0, #29
    3a32:	d113      	bne.n	3a5c <ProcessMacCommands+0x160>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
    3a34:	4ab1      	ldr	r2, [pc, #708]	; (3cfc <ProcessMacCommands+0x400>)
    3a36:	2399      	movs	r3, #153	; 0x99
    3a38:	00db      	lsls	r3, r3, #3
    3a3a:	210a      	movs	r1, #10
    3a3c:	4461      	add	r1, ip
    3a3e:	7808      	ldrb	r0, [r1, #0]
    3a40:	21d5      	movs	r1, #213	; 0xd5
    3a42:	58d4      	ldr	r4, [r2, r3]
    3a44:	5460      	strb	r0, [r4, r1]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
    3a46:	39ca      	subs	r1, #202	; 0xca
    3a48:	4461      	add	r1, ip
    3a4a:	7808      	ldrb	r0, [r1, #0]
    3a4c:	21d4      	movs	r1, #212	; 0xd4
    3a4e:	58d4      	ldr	r4, [r2, r3]
    3a50:	5460      	strb	r0, [r4, r1]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
    3a52:	58d2      	ldr	r2, [r2, r3]
    3a54:	ab07      	add	r3, sp, #28
    3a56:	7819      	ldrb	r1, [r3, #0]
    3a58:	23f4      	movs	r3, #244	; 0xf4
    3a5a:	54d1      	strb	r1, [r2, r3]
{
    3a5c:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    3a5e:	ab08      	add	r3, sp, #32
    3a60:	469b      	mov	fp, r3
    3a62:	4baf      	ldr	r3, [pc, #700]	; (3d20 <ProcessMacCommands+0x424>)
    3a64:	469a      	mov	sl, r3
    3a66:	465b      	mov	r3, fp
    3a68:	781c      	ldrb	r4, [r3, #0]
    3a6a:	2105      	movs	r1, #5
    3a6c:	0020      	movs	r0, r4
    3a6e:	47d0      	blx	sl
    3a70:	b2c0      	uxtb	r0, r0
    3a72:	4285      	cmp	r5, r0
    3a74:	d304      	bcc.n	3a80 <ProcessMacCommands+0x184>
                    macIndex += linkAdrNbBytesParsed - 1;
    3a76:	193f      	adds	r7, r7, r4
    3a78:	b2fc      	uxtb	r4, r7
    3a7a:	2301      	movs	r3, #1
    3a7c:	469b      	mov	fp, r3
    3a7e:	e77f      	b.n	3980 <ProcessMacCommands+0x84>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
    3a80:	2201      	movs	r2, #1
    3a82:	212f      	movs	r1, #47	; 0x2f
    3a84:	ab04      	add	r3, sp, #16
    3a86:	469c      	mov	ip, r3
    3a88:	4461      	add	r1, ip
    3a8a:	2003      	movs	r0, #3
    3a8c:	4ba5      	ldr	r3, [pc, #660]	; (3d24 <ProcessMacCommands+0x428>)
    3a8e:	4798      	blx	r3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    3a90:	3501      	adds	r5, #1
    3a92:	b2ed      	uxtb	r5, r5
    3a94:	e7e7      	b.n	3a66 <ProcessMacCommands+0x16a>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
    3a96:	4899      	ldr	r0, [pc, #612]	; (3cfc <ProcessMacCommands+0x400>)
    3a98:	2299      	movs	r2, #153	; 0x99
    3a9a:	00d2      	lsls	r2, r2, #3
    3a9c:	3702      	adds	r7, #2
    3a9e:	b2ff      	uxtb	r7, r7
    3aa0:	5d33      	ldrb	r3, [r6, r4]
    3aa2:	210f      	movs	r1, #15
    3aa4:	400b      	ands	r3, r1
    3aa6:	2112      	movs	r1, #18
    3aa8:	31ff      	adds	r1, #255	; 0xff
    3aaa:	5884      	ldr	r4, [r0, r2]
    3aac:	5463      	strb	r3, [r4, r1]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
    3aae:	5882      	ldr	r2, [r0, r2]
    3ab0:	5c51      	ldrb	r1, [r2, r1]
    3ab2:	2301      	movs	r3, #1
    3ab4:	408b      	lsls	r3, r1
    3ab6:	499c      	ldr	r1, [pc, #624]	; (3d28 <ProcessMacCommands+0x42c>)
    3ab8:	5253      	strh	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
    3aba:	2200      	movs	r2, #0
    3abc:	a90f      	add	r1, sp, #60	; 0x3c
    3abe:	2004      	movs	r0, #4
    3ac0:	4b98      	ldr	r3, [pc, #608]	; (3d24 <ProcessMacCommands+0x428>)
    3ac2:	4798      	blx	r3
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
    3ac4:	003c      	movs	r4, r7
                break;
    3ac6:	e75b      	b.n	3980 <ProcessMacCommands+0x84>
                status = 0x07;
    3ac8:	252f      	movs	r5, #47	; 0x2f
    3aca:	ab04      	add	r3, sp, #16
    3acc:	469c      	mov	ip, r3
    3ace:	4465      	add	r5, ip
    3ad0:	2307      	movs	r3, #7
    3ad2:	4699      	mov	r9, r3
    3ad4:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
    3ad6:	5d33      	ldrb	r3, [r6, r4]
    3ad8:	a90a      	add	r1, sp, #40	; 0x28
    3ada:	091a      	lsrs	r2, r3, #4
    3adc:	4648      	mov	r0, r9
    3ade:	4002      	ands	r2, r0
    3ae0:	704a      	strb	r2, [r1, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
    3ae2:	220f      	movs	r2, #15
    3ae4:	4013      	ands	r3, r2
    3ae6:	700b      	strb	r3, [r1, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3ae8:	1d7c      	adds	r4, r7, #5
    3aea:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
    3aec:	1cfb      	adds	r3, r7, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    3aee:	b2db      	uxtb	r3, r3
    3af0:	5cf3      	ldrb	r3, [r6, r3]
    3af2:	021b      	lsls	r3, r3, #8
    3af4:	1d3a      	adds	r2, r7, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3af6:	b2d2      	uxtb	r2, r2
    3af8:	5cb2      	ldrb	r2, [r6, r2]
    3afa:	0412      	lsls	r2, r2, #16
    3afc:	4313      	orrs	r3, r2
                macIndex++;
    3afe:	3702      	adds	r7, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
    3b00:	b2ff      	uxtb	r7, r7
    3b02:	5df2      	ldrb	r2, [r6, r7]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3b04:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
    3b06:	4642      	mov	r2, r8
    3b08:	4353      	muls	r3, r2
    3b0a:	604b      	str	r3, [r1, #4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
    3b0c:	2399      	movs	r3, #153	; 0x99
    3b0e:	00db      	lsls	r3, r3, #3
    3b10:	4a7a      	ldr	r2, [pc, #488]	; (3cfc <ProcessMacCommands+0x400>)
    3b12:	58d3      	ldr	r3, [r2, r3]
    3b14:	7818      	ldrb	r0, [r3, #0]
    3b16:	4b85      	ldr	r3, [pc, #532]	; (3d2c <ProcessMacCommands+0x430>)
    3b18:	4798      	blx	r3
    3b1a:	7028      	strb	r0, [r5, #0]
                if( ( status & 0x07 ) == 0x07 )
    3b1c:	464b      	mov	r3, r9
    3b1e:	4003      	ands	r3, r0
    3b20:	454b      	cmp	r3, r9
    3b22:	d112      	bne.n	3b4a <ProcessMacCommands+0x24e>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
    3b24:	4975      	ldr	r1, [pc, #468]	; (3cfc <ProcessMacCommands+0x400>)
    3b26:	2299      	movs	r2, #153	; 0x99
    3b28:	00d2      	lsls	r2, r2, #3
    3b2a:	ab0a      	add	r3, sp, #40	; 0x28
    3b2c:	9303      	str	r3, [sp, #12]
    3b2e:	781f      	ldrb	r7, [r3, #0]
    3b30:	25fc      	movs	r5, #252	; 0xfc
    3b32:	588b      	ldr	r3, [r1, r2]
    3b34:	555f      	strb	r7, [r3, r5]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
    3b36:	3d04      	subs	r5, #4
    3b38:	588b      	ldr	r3, [r1, r2]
    3b3a:	9f03      	ldr	r7, [sp, #12]
    3b3c:	687f      	ldr	r7, [r7, #4]
    3b3e:	515f      	str	r7, [r3, r5]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
    3b40:	588a      	ldr	r2, [r1, r2]
    3b42:	9b03      	ldr	r3, [sp, #12]
    3b44:	7859      	ldrb	r1, [r3, #1]
    3b46:	23f5      	movs	r3, #245	; 0xf5
    3b48:	54d1      	strb	r1, [r2, r3]
                macCmdPayload[0] = status;
    3b4a:	a90f      	add	r1, sp, #60	; 0x3c
    3b4c:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
    3b4e:	2201      	movs	r2, #1
    3b50:	2005      	movs	r0, #5
    3b52:	4b74      	ldr	r3, [pc, #464]	; (3d24 <ProcessMacCommands+0x428>)
    3b54:	4798      	blx	r3
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    3b56:	4b69      	ldr	r3, [pc, #420]	; (3cfc <ProcessMacCommands+0x400>)
    3b58:	2106      	movs	r1, #6
    3b5a:	228a      	movs	r2, #138	; 0x8a
    3b5c:	00d2      	lsls	r2, r2, #3
    3b5e:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    3b60:	4973      	ldr	r1, [pc, #460]	; (3d30 <ProcessMacCommands+0x434>)
    3b62:	5c58      	ldrb	r0, [r3, r1]
    3b64:	2208      	movs	r2, #8
    3b66:	4302      	orrs	r2, r0
    3b68:	545a      	strb	r2, [r3, r1]
    3b6a:	e709      	b.n	3980 <ProcessMacCommands+0x84>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
    3b6c:	23da      	movs	r3, #218	; 0xda
    3b6e:	009b      	lsls	r3, r3, #2
    3b70:	4a62      	ldr	r2, [pc, #392]	; (3cfc <ProcessMacCommands+0x400>)
    3b72:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
    3b74:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
    3b76:	2b00      	cmp	r3, #0
    3b78:	d003      	beq.n	3b82 <ProcessMacCommands+0x286>
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d000      	beq.n	3b82 <ProcessMacCommands+0x286>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
    3b80:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
    3b82:	a90f      	add	r1, sp, #60	; 0x3c
    3b84:	7008      	strb	r0, [r1, #0]
                macCmdPayload[1] = snr & 0x3F;
    3b86:	466b      	mov	r3, sp
    3b88:	7d1b      	ldrb	r3, [r3, #20]
    3b8a:	704b      	strb	r3, [r1, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
    3b8c:	2202      	movs	r2, #2
    3b8e:	2006      	movs	r0, #6
    3b90:	4b64      	ldr	r3, [pc, #400]	; (3d24 <ProcessMacCommands+0x428>)
    3b92:	4798      	blx	r3
                break;
    3b94:	e6f4      	b.n	3980 <ProcessMacCommands+0x84>
                status = 0x03;
    3b96:	252f      	movs	r5, #47	; 0x2f
    3b98:	ab04      	add	r3, sp, #16
    3b9a:	469c      	mov	ip, r3
    3b9c:	4465      	add	r5, ip
    3b9e:	2303      	movs	r3, #3
    3ba0:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
    3ba2:	a908      	add	r1, sp, #32
    3ba4:	5d33      	ldrb	r3, [r6, r4]
    3ba6:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
    3ba8:	aa0a      	add	r2, sp, #40	; 0x28
    3baa:	9208      	str	r2, [sp, #32]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
    3bac:	1cfb      	adds	r3, r7, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	5cf3      	ldrb	r3, [r6, r3]
    3bb2:	021b      	lsls	r3, r3, #8
    3bb4:	1d38      	adds	r0, r7, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3bb6:	b2c0      	uxtb	r0, r0
    3bb8:	5c30      	ldrb	r0, [r6, r0]
    3bba:	0400      	lsls	r0, r0, #16
    3bbc:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
    3bbe:	1cb8      	adds	r0, r7, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
    3bc0:	b2c0      	uxtb	r0, r0
    3bc2:	5c30      	ldrb	r0, [r6, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3bc4:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
    3bc6:	4640      	mov	r0, r8
    3bc8:	4343      	muls	r3, r0
    3bca:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.Rx1Frequency = 0;
    3bcc:	2300      	movs	r3, #0
    3bce:	930b      	str	r3, [sp, #44]	; 0x2c
                chParam.DrRange.Value = payload[macIndex++];
    3bd0:	1dbc      	adds	r4, r7, #6
    3bd2:	b2e4      	uxtb	r4, r4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3bd4:	3705      	adds	r7, #5
                chParam.DrRange.Value = payload[macIndex++];
    3bd6:	b2ff      	uxtb	r7, r7
    3bd8:	5df3      	ldrb	r3, [r6, r7]
    3bda:	7213      	strb	r3, [r2, #8]
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
    3bdc:	2399      	movs	r3, #153	; 0x99
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	4a46      	ldr	r2, [pc, #280]	; (3cfc <ProcessMacCommands+0x400>)
    3be2:	58d3      	ldr	r3, [r2, r3]
    3be4:	7818      	ldrb	r0, [r3, #0]
    3be6:	4b53      	ldr	r3, [pc, #332]	; (3d34 <ProcessMacCommands+0x438>)
    3be8:	4798      	blx	r3
    3bea:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
    3bec:	a90f      	add	r1, sp, #60	; 0x3c
    3bee:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
    3bf0:	2201      	movs	r2, #1
    3bf2:	2007      	movs	r0, #7
    3bf4:	4b4b      	ldr	r3, [pc, #300]	; (3d24 <ProcessMacCommands+0x428>)
    3bf6:	4798      	blx	r3
    3bf8:	e6c2      	b.n	3980 <ProcessMacCommands+0x84>
                uint8_t delay = payload[macIndex++] & 0x0F;
    3bfa:	3702      	adds	r7, #2
    3bfc:	b2ff      	uxtb	r7, r7
    3bfe:	5d33      	ldrb	r3, [r6, r4]
    3c00:	220f      	movs	r2, #15
    3c02:	4013      	ands	r3, r2
                if( delay == 0 )
    3c04:	d100      	bne.n	3c08 <ProcessMacCommands+0x30c>
                    delay++;
    3c06:	3301      	adds	r3, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
    3c08:	4c3c      	ldr	r4, [pc, #240]	; (3cfc <ProcessMacCommands+0x400>)
    3c0a:	2099      	movs	r0, #153	; 0x99
    3c0c:	00c0      	lsls	r0, r0, #3
    3c0e:	21e4      	movs	r1, #228	; 0xe4
    3c10:	22fa      	movs	r2, #250	; 0xfa
    3c12:	0092      	lsls	r2, r2, #2
    3c14:	4353      	muls	r3, r2
    3c16:	5822      	ldr	r2, [r4, r0]
    3c18:	5053      	str	r3, [r2, r1]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    3c1a:	5822      	ldr	r2, [r4, r0]
    3c1c:	5853      	ldr	r3, [r2, r1]
    3c1e:	21fa      	movs	r1, #250	; 0xfa
    3c20:	0089      	lsls	r1, r1, #2
    3c22:	468c      	mov	ip, r1
    3c24:	4463      	add	r3, ip
    3c26:	21e8      	movs	r1, #232	; 0xe8
    3c28:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
    3c2a:	2200      	movs	r2, #0
    3c2c:	a90f      	add	r1, sp, #60	; 0x3c
    3c2e:	2008      	movs	r0, #8
    3c30:	4b3c      	ldr	r3, [pc, #240]	; (3d24 <ProcessMacCommands+0x428>)
    3c32:	4798      	blx	r3
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    3c34:	2206      	movs	r2, #6
    3c36:	238a      	movs	r3, #138	; 0x8a
    3c38:	00db      	lsls	r3, r3, #3
    3c3a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    3c3c:	4a3c      	ldr	r2, [pc, #240]	; (3d30 <ProcessMacCommands+0x434>)
    3c3e:	5ca1      	ldrb	r1, [r4, r2]
    3c40:	2308      	movs	r3, #8
    3c42:	430b      	orrs	r3, r1
    3c44:	54a3      	strb	r3, [r4, r2]
                uint8_t delay = payload[macIndex++] & 0x0F;
    3c46:	003c      	movs	r4, r7
    3c48:	e69a      	b.n	3980 <ProcessMacCommands+0x84>
                uint8_t eirpDwellTime = payload[macIndex++];
    3c4a:	3702      	adds	r7, #2
    3c4c:	b2fb      	uxtb	r3, r7
    3c4e:	4699      	mov	r9, r3
    3c50:	5d33      	ldrb	r3, [r6, r4]
                txParamSetupReq.UplinkDwellTime = 0;
    3c52:	2100      	movs	r1, #0
    3c54:	aa07      	add	r2, sp, #28
    3c56:	7011      	strb	r1, [r2, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
    3c58:	069a      	lsls	r2, r3, #26
    3c5a:	d449      	bmi.n	3cf0 <ProcessMacCommands+0x3f4>
                txParamSetupReq.DownlinkDwellTime = 0;
    3c5c:	aa07      	add	r2, sp, #28
    3c5e:	7051      	strb	r1, [r2, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
    3c60:	06da      	lsls	r2, r3, #27
    3c62:	d502      	bpl.n	3c6a <ProcessMacCommands+0x36e>
                    txParamSetupReq.UplinkDwellTime = 1;
    3c64:	2101      	movs	r1, #1
    3c66:	aa07      	add	r2, sp, #28
    3c68:	7011      	strb	r1, [r2, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
    3c6a:	a907      	add	r1, sp, #28
    3c6c:	220f      	movs	r2, #15
    3c6e:	4013      	ands	r3, r2
    3c70:	708b      	strb	r3, [r1, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
    3c72:	2399      	movs	r3, #153	; 0x99
    3c74:	00db      	lsls	r3, r3, #3
    3c76:	4a21      	ldr	r2, [pc, #132]	; (3cfc <ProcessMacCommands+0x400>)
    3c78:	58d3      	ldr	r3, [r2, r3]
    3c7a:	7818      	ldrb	r0, [r3, #0]
    3c7c:	4b2e      	ldr	r3, [pc, #184]	; (3d38 <ProcessMacCommands+0x43c>)
    3c7e:	4798      	blx	r3
    3c80:	1c43      	adds	r3, r0, #1
    3c82:	d033      	beq.n	3cec <ProcessMacCommands+0x3f0>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
    3c84:	4d1d      	ldr	r5, [pc, #116]	; (3cfc <ProcessMacCommands+0x400>)
    3c86:	2499      	movs	r4, #153	; 0x99
    3c88:	00e4      	lsls	r4, r4, #3
    3c8a:	ab07      	add	r3, sp, #28
    3c8c:	2780      	movs	r7, #128	; 0x80
    3c8e:	007f      	lsls	r7, r7, #1
    3c90:	781a      	ldrb	r2, [r3, #0]
    3c92:	5929      	ldr	r1, [r5, r4]
    3c94:	55ca      	strb	r2, [r1, r7]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
    3c96:	7859      	ldrb	r1, [r3, #1]
    3c98:	2202      	movs	r2, #2
    3c9a:	32ff      	adds	r2, #255	; 0xff
    3c9c:	5928      	ldr	r0, [r5, r4]
    3c9e:	5481      	strb	r1, [r0, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
    3ca0:	592a      	ldr	r2, [r5, r4]
    3ca2:	4692      	mov	sl, r2
    3ca4:	789b      	ldrb	r3, [r3, #2]
    3ca6:	4a25      	ldr	r2, [pc, #148]	; (3d3c <ProcessMacCommands+0x440>)
    3ca8:	5cd0      	ldrb	r0, [r2, r3]
    3caa:	4b25      	ldr	r3, [pc, #148]	; (3d40 <ProcessMacCommands+0x444>)
    3cac:	4798      	blx	r3
    3cae:	2382      	movs	r3, #130	; 0x82
    3cb0:	005b      	lsls	r3, r3, #1
    3cb2:	4652      	mov	r2, sl
    3cb4:	50d0      	str	r0, [r2, r3]
                    getPhy.Attribute = PHY_MIN_TX_DR;
    3cb6:	a908      	add	r1, sp, #32
    3cb8:	3b04      	subs	r3, #4
    3cba:	3bff      	subs	r3, #255	; 0xff
    3cbc:	700b      	strb	r3, [r1, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    3cbe:	592b      	ldr	r3, [r5, r4]
    3cc0:	5dda      	ldrb	r2, [r3, r7]
    3cc2:	708a      	strb	r2, [r1, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    3cc4:	7818      	ldrb	r0, [r3, #0]
    3cc6:	4b1f      	ldr	r3, [pc, #124]	; (3d44 <ProcessMacCommands+0x448>)
    3cc8:	4798      	blx	r3
    3cca:	900a      	str	r0, [sp, #40]	; 0x28
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
    3ccc:	592b      	ldr	r3, [r5, r4]
    3cce:	22d5      	movs	r2, #213	; 0xd5
    3cd0:	5c99      	ldrb	r1, [r3, r2]
    3cd2:	1c02      	adds	r2, r0, #0
    3cd4:	b240      	sxtb	r0, r0
    3cd6:	b24c      	sxtb	r4, r1
    3cd8:	42a0      	cmp	r0, r4
    3cda:	da00      	bge.n	3cde <ProcessMacCommands+0x3e2>
    3cdc:	1c0a      	adds	r2, r1, #0
    3cde:	21d5      	movs	r1, #213	; 0xd5
    3ce0:	545a      	strb	r2, [r3, r1]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
    3ce2:	2200      	movs	r2, #0
    3ce4:	a90f      	add	r1, sp, #60	; 0x3c
    3ce6:	2009      	movs	r0, #9
    3ce8:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <ProcessMacCommands+0x428>)
    3cea:	4798      	blx	r3
                uint8_t eirpDwellTime = payload[macIndex++];
    3cec:	464c      	mov	r4, r9
    3cee:	e647      	b.n	3980 <ProcessMacCommands+0x84>
                    txParamSetupReq.DownlinkDwellTime = 1;
    3cf0:	2101      	movs	r1, #1
    3cf2:	aa07      	add	r2, sp, #28
    3cf4:	7051      	strb	r1, [r2, #1]
    3cf6:	e7b3      	b.n	3c60 <ProcessMacCommands+0x364>
    3cf8:	000140e8 	.word	0x000140e8
    3cfc:	20000cbc 	.word	0x20000cbc
    3d00:	0000021e 	.word	0x0000021e
    3d04:	00006c69 	.word	0x00006c69
    3d08:	00006be1 	.word	0x00006be1
    3d0c:	00006fc1 	.word	0x00006fc1
    3d10:	00006edd 	.word	0x00006edd
    3d14:	00000444 	.word	0x00000444
    3d18:	00000445 	.word	0x00000445
    3d1c:	00008541 	.word	0x00008541
    3d20:	0000c60d 	.word	0x0000c60d
    3d24:	00006b59 	.word	0x00006b59
    3d28:	0000021a 	.word	0x0000021a
    3d2c:	00008569 	.word	0x00008569
    3d30:	00000469 	.word	0x00000469
    3d34:	00008581 	.word	0x00008581
    3d38:	00008599 	.word	0x00008599
    3d3c:	0001433c 	.word	0x0001433c
    3d40:	0000cebd 	.word	0x0000cebd
    3d44:	00008445 	.word	0x00008445
                uint8_t serverMinorVersion = payload[macIndex++];
    3d48:	3702      	adds	r7, #2
    3d4a:	b2ff      	uxtb	r7, r7
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    3d4c:	2399      	movs	r3, #153	; 0x99
    3d4e:	00db      	lsls	r3, r3, #3
    3d50:	4acb      	ldr	r2, [pc, #812]	; (4080 <ProcessMacCommands+0x784>)
    3d52:	58d1      	ldr	r1, [r2, r3]
    3d54:	5d32      	ldrb	r2, [r6, r4]
    3d56:	4bcb      	ldr	r3, [pc, #812]	; (4084 <ProcessMacCommands+0x788>)
    3d58:	5ccb      	ldrb	r3, [r1, r3]
                uint8_t serverMinorVersion = payload[macIndex++];
    3d5a:	003c      	movs	r4, r7
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    3d5c:	429a      	cmp	r2, r3
    3d5e:	d000      	beq.n	3d62 <ProcessMacCommands+0x466>
    3d60:	e60e      	b.n	3980 <ProcessMacCommands+0x84>
                    LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd);
    3d62:	a90e      	add	r1, sp, #56	; 0x38
    3d64:	200b      	movs	r0, #11
    3d66:	4bc8      	ldr	r3, [pc, #800]	; (4088 <ProcessMacCommands+0x78c>)
    3d68:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    3d6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    3d6c:	4bc7      	ldr	r3, [pc, #796]	; (408c <ProcessMacCommands+0x790>)
    3d6e:	4798      	blx	r3
    3d70:	e606      	b.n	3980 <ProcessMacCommands+0x84>
                status = 0x03;
    3d72:	252f      	movs	r5, #47	; 0x2f
    3d74:	ab04      	add	r3, sp, #16
    3d76:	469c      	mov	ip, r3
    3d78:	4465      	add	r5, ip
    3d7a:	2303      	movs	r3, #3
    3d7c:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
    3d7e:	a90a      	add	r1, sp, #40	; 0x28
    3d80:	5d33      	ldrb	r3, [r6, r4]
    3d82:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3d84:	1d7c      	adds	r4, r7, #5
    3d86:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
    3d88:	1cfb      	adds	r3, r7, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    3d8a:	b2db      	uxtb	r3, r3
    3d8c:	5cf3      	ldrb	r3, [r6, r3]
    3d8e:	021b      	lsls	r3, r3, #8
    3d90:	1d3a      	adds	r2, r7, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3d92:	b2d2      	uxtb	r2, r2
    3d94:	5cb2      	ldrb	r2, [r6, r2]
    3d96:	0412      	lsls	r2, r2, #16
    3d98:	4313      	orrs	r3, r2
                dlChannelReq.ChannelId = payload[macIndex++];
    3d9a:	3702      	adds	r7, #2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
    3d9c:	b2ff      	uxtb	r7, r7
    3d9e:	5df2      	ldrb	r2, [r6, r7]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    3da0:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
    3da2:	4642      	mov	r2, r8
    3da4:	4353      	muls	r3, r2
    3da6:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
    3da8:	4fb5      	ldr	r7, [pc, #724]	; (4080 <ProcessMacCommands+0x784>)
    3daa:	2399      	movs	r3, #153	; 0x99
    3dac:	00db      	lsls	r3, r3, #3
    3dae:	58fb      	ldr	r3, [r7, r3]
    3db0:	7818      	ldrb	r0, [r3, #0]
    3db2:	4bb7      	ldr	r3, [pc, #732]	; (4090 <ProcessMacCommands+0x794>)
    3db4:	4798      	blx	r3
    3db6:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
    3db8:	a90f      	add	r1, sp, #60	; 0x3c
    3dba:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
    3dbc:	2201      	movs	r2, #1
    3dbe:	200a      	movs	r0, #10
    3dc0:	4bb4      	ldr	r3, [pc, #720]	; (4094 <ProcessMacCommands+0x798>)
    3dc2:	4798      	blx	r3
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    3dc4:	2206      	movs	r2, #6
    3dc6:	238a      	movs	r3, #138	; 0x8a
    3dc8:	00db      	lsls	r3, r3, #3
    3dca:	54fa      	strb	r2, [r7, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    3dcc:	4ab2      	ldr	r2, [pc, #712]	; (4098 <ProcessMacCommands+0x79c>)
    3dce:	5cb9      	ldrb	r1, [r7, r2]
    3dd0:	2308      	movs	r3, #8
    3dd2:	430b      	orrs	r3, r1
    3dd4:	54bb      	strb	r3, [r7, r2]
    3dd6:	e5d3      	b.n	3980 <ProcessMacCommands+0x84>
                uint8_t delayExp = 0x0F & payload[macIndex];
    3dd8:	5d32      	ldrb	r2, [r6, r4]
                macIndex++;
    3dda:	3702      	adds	r7, #2
    3ddc:	b2fc      	uxtb	r4, r7
                MacCtx.NvmCtx->AdrAckDelay = 0x01 << delayExp;
    3dde:	4da8      	ldr	r5, [pc, #672]	; (4080 <ProcessMacCommands+0x784>)
    3de0:	2099      	movs	r0, #153	; 0x99
    3de2:	00c0      	lsls	r0, r0, #3
    3de4:	210f      	movs	r1, #15
    3de6:	4011      	ands	r1, r2
    3de8:	2301      	movs	r3, #1
    3dea:	469c      	mov	ip, r3
    3dec:	001f      	movs	r7, r3
    3dee:	408f      	lsls	r7, r1
    3df0:	21d2      	movs	r1, #210	; 0xd2
    3df2:	582b      	ldr	r3, [r5, r0]
    3df4:	525f      	strh	r7, [r3, r1]
                MacCtx.NvmCtx->AdrAckLimit = 0x01 << limitExp;
    3df6:	5829      	ldr	r1, [r5, r0]
    3df8:	0912      	lsrs	r2, r2, #4
    3dfa:	4663      	mov	r3, ip
    3dfc:	4093      	lsls	r3, r2
    3dfe:	22d0      	movs	r2, #208	; 0xd0
    3e00:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
    3e02:	2200      	movs	r2, #0
    3e04:	a90f      	add	r1, sp, #60	; 0x3c
    3e06:	200c      	movs	r0, #12
    3e08:	4ba2      	ldr	r3, [pc, #648]	; (4094 <ProcessMacCommands+0x798>)
    3e0a:	4798      	blx	r3
                break;
    3e0c:	e5b8      	b.n	3980 <ProcessMacCommands+0x84>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
    3e0e:	5d35      	ldrb	r5, [r6, r4]
                MacCtx.NvmCtx->ForceRejoinMaxRetries = 0x07 & payload[macIndex];
    3e10:	489b      	ldr	r0, [pc, #620]	; (4080 <ProcessMacCommands+0x784>)
    3e12:	2199      	movs	r1, #153	; 0x99
    3e14:	00c9      	lsls	r1, r1, #3
    3e16:	2307      	movs	r3, #7
    3e18:	4699      	mov	r9, r3
    3e1a:	001a      	movs	r2, r3
    3e1c:	402a      	ands	r2, r5
    3e1e:	4b9f      	ldr	r3, [pc, #636]	; (409c <ProcessMacCommands+0x7a0>)
    3e20:	5844      	ldr	r4, [r0, r1]
    3e22:	54e2      	strb	r2, [r4, r3]
                macIndex++;
    3e24:	1cbb      	adds	r3, r7, #2
                MacCtx.NvmCtx->ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
    3e26:	b2db      	uxtb	r3, r3
    3e28:	469c      	mov	ip, r3
    3e2a:	44b4      	add	ip, r6
    3e2c:	4663      	mov	r3, ip
    3e2e:	781a      	ldrb	r2, [r3, #0]
    3e30:	0912      	lsrs	r2, r2, #4
    3e32:	464c      	mov	r4, r9
    3e34:	4022      	ands	r2, r4
    3e36:	248a      	movs	r4, #138	; 0x8a
    3e38:	00a4      	lsls	r4, r4, #2
    3e3a:	5843      	ldr	r3, [r0, r1]
    3e3c:	551a      	strb	r2, [r3, r4]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = 0x0F & payload[macIndex];
    3e3e:	5841      	ldr	r1, [r0, r1]
    3e40:	4663      	mov	r3, ip
    3e42:	781b      	ldrb	r3, [r3, #0]
    3e44:	220f      	movs	r2, #15
    3e46:	4013      	ands	r3, r2
    3e48:	32c6      	adds	r2, #198	; 0xc6
    3e4a:	548b      	strb	r3, [r1, r2]
                macIndex ++;
    3e4c:	3703      	adds	r7, #3
    3e4e:	b2fc      	uxtb	r4, r7
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
    3e50:	2120      	movs	r1, #32
    3e52:	2000      	movs	r0, #0
    3e54:	4b92      	ldr	r3, [pc, #584]	; (40a0 <ProcessMacCommands+0x7a4>)
    3e56:	4798      	blx	r3
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
    3e58:	08ed      	lsrs	r5, r5, #3
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
    3e5a:	464b      	mov	r3, r9
    3e5c:	401d      	ands	r5, r3
    3e5e:	3319      	adds	r3, #25
    3e60:	40ab      	lsls	r3, r5
    3e62:	1818      	adds	r0, r3, r0
}

static bool ConvertRejoinCycleTime( uint32_t rejoinCycleTime, uint32_t* timeInMiliSec )
{
    // Our timer implementation do not allow longer times than 4294967295 ms
    if( rejoinCycleTime > 4294967 )
    3e64:	4b8f      	ldr	r3, [pc, #572]	; (40a4 <ProcessMacCommands+0x7a8>)
                uint32_t forceRejoinReqCycleTime = 0;
    3e66:	2100      	movs	r1, #0
    if( rejoinCycleTime > 4294967 )
    3e68:	4298      	cmp	r0, r3
    3e6a:	d902      	bls.n	3e72 <ProcessMacCommands+0x576>
    {
        *timeInMiliSec = rejoinCycleTime * 1000;
    3e6c:	21fa      	movs	r1, #250	; 0xfa
    3e6e:	0089      	lsls	r1, r1, #2
    3e70:	4341      	muls	r1, r0
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
    3e72:	4d83      	ldr	r5, [pc, #524]	; (4080 <ProcessMacCommands+0x784>)
    3e74:	2395      	movs	r3, #149	; 0x95
    3e76:	00db      	lsls	r3, r3, #3
    3e78:	18e8      	adds	r0, r5, r3
    3e7a:	4b8b      	ldr	r3, [pc, #556]	; (40a8 <ProcessMacCommands+0x7ac>)
    3e7c:	4798      	blx	r3
                if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    3e7e:	2399      	movs	r3, #153	; 0x99
    3e80:	00db      	lsls	r3, r3, #3
    3e82:	58ea      	ldr	r2, [r5, r3]
    3e84:	238a      	movs	r3, #138	; 0x8a
    3e86:	009b      	lsls	r3, r3, #2
    3e88:	5cd3      	ldrb	r3, [r2, r3]
    3e8a:	2b01      	cmp	r3, #1
    3e8c:	d80a      	bhi.n	3ea4 <ProcessMacCommands+0x5a8>
                    SendReJoinReq( REJOIN_REQ_0 );
    3e8e:	2000      	movs	r0, #0
    3e90:	4b86      	ldr	r3, [pc, #536]	; (40ac <ProcessMacCommands+0x7b0>)
    3e92:	4798      	blx	r3
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
    3e94:	487a      	ldr	r0, [pc, #488]	; (4080 <ProcessMacCommands+0x784>)
    3e96:	2395      	movs	r3, #149	; 0x95
    3e98:	00db      	lsls	r3, r3, #3
    3e9a:	469c      	mov	ip, r3
    3e9c:	4460      	add	r0, ip
    3e9e:	4b84      	ldr	r3, [pc, #528]	; (40b0 <ProcessMacCommands+0x7b4>)
    3ea0:	4798      	blx	r3
    3ea2:	e56d      	b.n	3980 <ProcessMacCommands+0x84>
                    SendReJoinReq( REJOIN_REQ_2 );
    3ea4:	2002      	movs	r0, #2
    3ea6:	4b81      	ldr	r3, [pc, #516]	; (40ac <ProcessMacCommands+0x7b0>)
    3ea8:	4798      	blx	r3
    3eaa:	e7f3      	b.n	3e94 <ProcessMacCommands+0x598>
                uint8_t maxCountN = 0x0F & payload[macIndex];
    3eac:	5d33      	ldrb	r3, [r6, r4]
                macIndex ++;
    3eae:	3702      	adds	r7, #2
    3eb0:	b2fc      	uxtb	r4, r7
                MacCtx.NvmCtx->Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
    3eb2:	4873      	ldr	r0, [pc, #460]	; (4080 <ProcessMacCommands+0x784>)
    3eb4:	2199      	movs	r1, #153	; 0x99
    3eb6:	00c9      	lsls	r1, r1, #3
    3eb8:	228b      	movs	r2, #139	; 0x8b
    3eba:	0092      	lsls	r2, r2, #2
    3ebc:	4694      	mov	ip, r2
    3ebe:	091d      	lsrs	r5, r3, #4
    3ec0:	350a      	adds	r5, #10
    3ec2:	2201      	movs	r2, #1
    3ec4:	4691      	mov	r9, r2
    3ec6:	0017      	movs	r7, r2
    3ec8:	40af      	lsls	r7, r5
    3eca:	003d      	movs	r5, r7
    3ecc:	5847      	ldr	r7, [r0, r1]
    3ece:	4662      	mov	r2, ip
    3ed0:	50bd      	str	r5, [r7, r2]
                MacCtx.NvmCtx->Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
    3ed2:	250f      	movs	r5, #15
    3ed4:	402b      	ands	r3, r5
    3ed6:	3304      	adds	r3, #4
    3ed8:	464a      	mov	r2, r9
    3eda:	409a      	lsls	r2, r3
    3edc:	4b75      	ldr	r3, [pc, #468]	; (40b4 <ProcessMacCommands+0x7b8>)
    3ede:	5845      	ldr	r5, [r0, r1]
    3ee0:	52ea      	strh	r2, [r5, r3]
                if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    3ee2:	5843      	ldr	r3, [r0, r1]
    3ee4:	4662      	mov	r2, ip
    3ee6:	5899      	ldr	r1, [r3, r2]
    if( rejoinCycleTime > 4294967 )
    3ee8:	4b6e      	ldr	r3, [pc, #440]	; (40a4 <ProcessMacCommands+0x7a8>)
                uint8_t timeOK = 0;
    3eea:	2200      	movs	r2, #0
    if( rejoinCycleTime > 4294967 )
    3eec:	4299      	cmp	r1, r3
    3eee:	d915      	bls.n	3f1c <ProcessMacCommands+0x620>
        *timeInMiliSec = rejoinCycleTime * 1000;
    3ef0:	0007      	movs	r7, r0
    3ef2:	4d71      	ldr	r5, [pc, #452]	; (40b8 <ProcessMacCommands+0x7bc>)
    3ef4:	23fa      	movs	r3, #250	; 0xfa
    3ef6:	009b      	lsls	r3, r3, #2
    3ef8:	434b      	muls	r3, r1
    3efa:	5143      	str	r3, [r0, r5]
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
    3efc:	4b6f      	ldr	r3, [pc, #444]	; (40bc <ProcessMacCommands+0x7c0>)
    3efe:	469c      	mov	ip, r3
    3f00:	4484      	add	ip, r0
    3f02:	4663      	mov	r3, ip
    3f04:	9303      	str	r3, [sp, #12]
    3f06:	4660      	mov	r0, ip
    3f08:	4b6d      	ldr	r3, [pc, #436]	; (40c0 <ProcessMacCommands+0x7c4>)
    3f0a:	4798      	blx	r3
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    3f0c:	5979      	ldr	r1, [r7, r5]
    3f0e:	9803      	ldr	r0, [sp, #12]
    3f10:	4b65      	ldr	r3, [pc, #404]	; (40a8 <ProcessMacCommands+0x7ac>)
    3f12:	4798      	blx	r3
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
    3f14:	9803      	ldr	r0, [sp, #12]
    3f16:	4b66      	ldr	r3, [pc, #408]	; (40b0 <ProcessMacCommands+0x7b4>)
    3f18:	4798      	blx	r3
                    timeOK = 0x01;
    3f1a:	464a      	mov	r2, r9
                macCmdPayload[0] = timeOK;
    3f1c:	a90f      	add	r1, sp, #60	; 0x3c
    3f1e:	700a      	strb	r2, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
    3f20:	2201      	movs	r2, #1
    3f22:	200f      	movs	r0, #15
    3f24:	4b5b      	ldr	r3, [pc, #364]	; (4094 <ProcessMacCommands+0x798>)
    3f26:	4798      	blx	r3
                break;
    3f28:	e52a      	b.n	3980 <ProcessMacCommands+0x84>
                macIndex++;
    3f2a:	3702      	adds	r7, #2
    3f2c:	b2fc      	uxtb	r4, r7
                LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd );
    3f2e:	a90e      	add	r1, sp, #56	; 0x38
    3f30:	2020      	movs	r0, #32
    3f32:	4b55      	ldr	r3, [pc, #340]	; (4088 <ProcessMacCommands+0x78c>)
    3f34:	4798      	blx	r3
                LoRaMacCommandsRemoveCmd( macCmd );
    3f36:	980e      	ldr	r0, [sp, #56]	; 0x38
    3f38:	4b54      	ldr	r3, [pc, #336]	; (408c <ProcessMacCommands+0x790>)
    3f3a:	4798      	blx	r3
                break;
    3f3c:	e520      	b.n	3980 <ProcessMacCommands+0x84>
                SysTime_t sysTime = { 0 };
    3f3e:	ab08      	add	r3, sp, #32
    3f40:	4699      	mov	r9, r3
    3f42:	2208      	movs	r2, #8
    3f44:	2100      	movs	r1, #0
    3f46:	0018      	movs	r0, r3
    3f48:	4b5e      	ldr	r3, [pc, #376]	; (40c4 <ProcessMacCommands+0x7c8>)
    3f4a:	4798      	blx	r3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
    3f4c:	1cbb      	adds	r3, r7, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
    3f4e:	b2db      	uxtb	r3, r3
    3f50:	5cf5      	ldrb	r5, [r6, r3]
    3f52:	022d      	lsls	r5, r5, #8
    3f54:	1cfb      	adds	r3, r7, #3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
    3f56:	b2db      	uxtb	r3, r3
    3f58:	5cf3      	ldrb	r3, [r6, r3]
    3f5a:	041b      	lsls	r3, r3, #16
    3f5c:	431d      	orrs	r5, r3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
    3f5e:	5d33      	ldrb	r3, [r6, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
    3f60:	431d      	orrs	r5, r3
    3f62:	1d3b      	adds	r3, r7, #4
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
    3f64:	b2db      	uxtb	r3, r3
    3f66:	5cf3      	ldrb	r3, [r6, r3]
    3f68:	061b      	lsls	r3, r3, #24
    3f6a:	431d      	orrs	r5, r3
                gpsEpochTime.SubSeconds = payload[macIndex++];
    3f6c:	1dbc      	adds	r4, r7, #6
    3f6e:	b2e4      	uxtb	r4, r4
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
    3f70:	3705      	adds	r7, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
    3f72:	b2ff      	uxtb	r7, r7
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
    3f74:	5df2      	ldrb	r2, [r6, r7]
    3f76:	23fa      	movs	r3, #250	; 0xfa
    3f78:	009b      	lsls	r3, r3, #2
    3f7a:	4353      	muls	r3, r2
    3f7c:	121b      	asrs	r3, r3, #8
    3f7e:	464a      	mov	r2, r9
    3f80:	8093      	strh	r3, [r2, #4]
                sysTimeCurrent = SysTimeGet( );
    3f82:	a80a      	add	r0, sp, #40	; 0x28
    3f84:	4b50      	ldr	r3, [pc, #320]	; (40c8 <ProcessMacCommands+0x7cc>)
    3f86:	4798      	blx	r3
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
    3f88:	4b50      	ldr	r3, [pc, #320]	; (40cc <ProcessMacCommands+0x7d0>)
    3f8a:	469c      	mov	ip, r3
    3f8c:	4465      	add	r5, ip
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
    3f8e:	0029      	movs	r1, r5
    3f90:	9508      	str	r5, [sp, #32]
    3f92:	4b3b      	ldr	r3, [pc, #236]	; (4080 <ProcessMacCommands+0x784>)
    3f94:	22d7      	movs	r2, #215	; 0xd7
    3f96:	0092      	lsls	r2, r2, #2
    3f98:	189a      	adds	r2, r3, r2
    3f9a:	6812      	ldr	r2, [r2, #0]
    3f9c:	9200      	str	r2, [sp, #0]
    3f9e:	22d6      	movs	r2, #214	; 0xd6
    3fa0:	0092      	lsls	r2, r2, #2
    3fa2:	589b      	ldr	r3, [r3, r2]
    3fa4:	464a      	mov	r2, r9
    3fa6:	6852      	ldr	r2, [r2, #4]
    3fa8:	a810      	add	r0, sp, #64	; 0x40
    3faa:	4d49      	ldr	r5, [pc, #292]	; (40d0 <ProcessMacCommands+0x7d4>)
    3fac:	47a8      	blx	r5
    3fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fb0:	9300      	str	r3, [sp, #0]
    3fb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3fb8:	4648      	mov	r0, r9
    3fba:	4d46      	ldr	r5, [pc, #280]	; (40d4 <ProcessMacCommands+0x7d8>)
    3fbc:	47a8      	blx	r5
                SysTimeSet( sysTime );
    3fbe:	9808      	ldr	r0, [sp, #32]
    3fc0:	464b      	mov	r3, r9
    3fc2:	6859      	ldr	r1, [r3, #4]
    3fc4:	4b44      	ldr	r3, [pc, #272]	; (40d8 <ProcessMacCommands+0x7dc>)
    3fc6:	4798      	blx	r3
                LoRaMacClassBDeviceTimeAns( );
    3fc8:	4b44      	ldr	r3, [pc, #272]	; (40dc <ProcessMacCommands+0x7e0>)
    3fca:	4798      	blx	r3
    3fcc:	e4d8      	b.n	3980 <ProcessMacCommands+0x84>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
    3fce:	238d      	movs	r3, #141	; 0x8d
    3fd0:	00db      	lsls	r3, r3, #3
    3fd2:	4a2b      	ldr	r2, [pc, #172]	; (4080 <ProcessMacCommands+0x784>)
    3fd4:	5cd3      	ldrb	r3, [r2, r3]
    3fd6:	3b03      	subs	r3, #3
    3fd8:	2b01      	cmp	r3, #1
    3fda:	d800      	bhi.n	3fde <ProcessMacCommands+0x6e2>
    3fdc:	e4d0      	b.n	3980 <ProcessMacCommands+0x84>
                    LoRaMacClassBPingSlotInfoAns( );
    3fde:	4b40      	ldr	r3, [pc, #256]	; (40e0 <ProcessMacCommands+0x7e4>)
    3fe0:	4798      	blx	r3
    3fe2:	e4cd      	b.n	3980 <ProcessMacCommands+0x84>
                frequency = ( uint32_t )payload[macIndex++];
    3fe4:	5d32      	ldrb	r2, [r6, r4]
    3fe6:	1cbb      	adds	r3, r7, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	5cf1      	ldrb	r1, [r6, r3]
    3fec:	0209      	lsls	r1, r1, #8
    3fee:	1cfb      	adds	r3, r7, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
    3ff0:	b2db      	uxtb	r3, r3
    3ff2:	5cf3      	ldrb	r3, [r6, r3]
    3ff4:	041b      	lsls	r3, r3, #16
    3ff6:	4319      	orrs	r1, r3
    3ff8:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
    3ffa:	1d7c      	adds	r4, r7, #5
    3ffc:	b2e4      	uxtb	r4, r4
                frequency *= 100;
    3ffe:	4643      	mov	r3, r8
    4000:	4359      	muls	r1, r3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
    4002:	3704      	adds	r7, #4
                datarate = payload[macIndex++] & 0x0F;
    4004:	b2ff      	uxtb	r7, r7
    4006:	5df0      	ldrb	r0, [r6, r7]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
    4008:	230f      	movs	r3, #15
    400a:	4018      	ands	r0, r3
    400c:	4b35      	ldr	r3, [pc, #212]	; (40e4 <ProcessMacCommands+0x7e8>)
    400e:	4798      	blx	r3
                macCmdPayload[0] = status;
    4010:	a90f      	add	r1, sp, #60	; 0x3c
    4012:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
    4014:	2201      	movs	r2, #1
    4016:	2011      	movs	r0, #17
    4018:	4b1e      	ldr	r3, [pc, #120]	; (4094 <ProcessMacCommands+0x798>)
    401a:	4798      	blx	r3
                break;
    401c:	e4b0      	b.n	3980 <ProcessMacCommands+0x84>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
    401e:	1cbb      	adds	r3, r7, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
    4020:	b2db      	uxtb	r3, r3
    4022:	5cf3      	ldrb	r3, [r6, r3]
    4024:	021b      	lsls	r3, r3, #8
    4026:	5d30      	ldrb	r0, [r6, r4]
    4028:	4318      	orrs	r0, r3
                beaconTimingChannel = payload[macIndex++];
    402a:	1d3c      	adds	r4, r7, #4
    402c:	b2e4      	uxtb	r4, r4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
    402e:	3703      	adds	r7, #3
                beaconTimingChannel = payload[macIndex++];
    4030:	b2ff      	uxtb	r7, r7
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
    4032:	5df1      	ldrb	r1, [r6, r7]
    4034:	4b2c      	ldr	r3, [pc, #176]	; (40e8 <ProcessMacCommands+0x7ec>)
    4036:	681a      	ldr	r2, [r3, #0]
    4038:	4b2c      	ldr	r3, [pc, #176]	; (40ec <ProcessMacCommands+0x7f0>)
    403a:	4798      	blx	r3
                break;
    403c:	e4a0      	b.n	3980 <ProcessMacCommands+0x84>
                    frequency = ( uint32_t )payload[macIndex++];
    403e:	5d32      	ldrb	r2, [r6, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
    4040:	1d3c      	adds	r4, r7, #4
    4042:	b2e4      	uxtb	r4, r4
                    frequency = ( uint32_t )payload[macIndex++];
    4044:	1cbb      	adds	r3, r7, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
    4046:	b2db      	uxtb	r3, r3
    4048:	5cf0      	ldrb	r0, [r6, r3]
    404a:	0200      	lsls	r0, r0, #8
    404c:	3703      	adds	r7, #3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
    404e:	b2ff      	uxtb	r7, r7
    4050:	5df3      	ldrb	r3, [r6, r7]
    4052:	041b      	lsls	r3, r3, #16
    4054:	4318      	orrs	r0, r3
    4056:	4310      	orrs	r0, r2
                    frequency *= 100;
    4058:	4643      	mov	r3, r8
    405a:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
    405c:	4b24      	ldr	r3, [pc, #144]	; (40f0 <ProcessMacCommands+0x7f4>)
    405e:	4798      	blx	r3
    4060:	2800      	cmp	r0, #0
    4062:	d008      	beq.n	4076 <ProcessMacCommands+0x77a>
                        macCmdPayload[0] = 1;
    4064:	2201      	movs	r2, #1
    4066:	ab0f      	add	r3, sp, #60	; 0x3c
    4068:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
    406a:	2201      	movs	r2, #1
    406c:	a90f      	add	r1, sp, #60	; 0x3c
    406e:	2013      	movs	r0, #19
    4070:	4b08      	ldr	r3, [pc, #32]	; (4094 <ProcessMacCommands+0x798>)
    4072:	4798      	blx	r3
                break;
    4074:	e484      	b.n	3980 <ProcessMacCommands+0x84>
                        macCmdPayload[0] = 0;
    4076:	2200      	movs	r2, #0
    4078:	ab0f      	add	r3, sp, #60	; 0x3c
    407a:	701a      	strb	r2, [r3, #0]
    407c:	e7f5      	b.n	406a <ProcessMacCommands+0x76e>
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	20000cbc 	.word	0x20000cbc
    4084:	0000021e 	.word	0x0000021e
    4088:	00006c69 	.word	0x00006c69
    408c:	00006be1 	.word	0x00006be1
    4090:	000085b1 	.word	0x000085b1
    4094:	00006b59 	.word	0x00006b59
    4098:	00000469 	.word	0x00000469
    409c:	00000226 	.word	0x00000226
    40a0:	00001e71 	.word	0x00001e71
    40a4:	00418937 	.word	0x00418937
    40a8:	0000c23d 	.word	0x0000c23d
    40ac:	00003799 	.word	0x00003799
    40b0:	0000c04d 	.word	0x0000c04d
    40b4:	00000222 	.word	0x00000222
    40b8:	000004bc 	.word	0x000004bc
    40bc:	0000046c 	.word	0x0000046c
    40c0:	0000c1a5 	.word	0x0000c1a5
    40c4:	0000ebd9 	.word	0x0000ebd9
    40c8:	0000bf59 	.word	0x0000bf59
    40cc:	12d53d80 	.word	0x12d53d80
    40d0:	0000bed9 	.word	0x0000bed9
    40d4:	0000be9d 	.word	0x0000be9d
    40d8:	0000bf0d 	.word	0x0000bf0d
    40dc:	00006a71 	.word	0x00006a71
    40e0:	00006a69 	.word	0x00006a69
    40e4:	00006a6b 	.word	0x00006a6b
    40e8:	20001bb0 	.word	0x20001bb0
    40ec:	00006a6f 	.word	0x00006a6f
    40f0:	00006a73 	.word	0x00006a73

000040f4 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void )
{
    40f4:	b510      	push	{r4, lr}
    if( MacCtx.NvmCtx->ForceRejoinRetriesCounter == MacCtx.NvmCtx->ForceRejoinMaxRetries )
    40f6:	2399      	movs	r3, #153	; 0x99
    40f8:	00db      	lsls	r3, r3, #3
    40fa:	4a15      	ldr	r2, [pc, #84]	; (4150 <OnForceRejoinReqCycleTimerEvent+0x5c>)
    40fc:	58d3      	ldr	r3, [r2, r3]
    40fe:	4a15      	ldr	r2, [pc, #84]	; (4154 <OnForceRejoinReqCycleTimerEvent+0x60>)
    4100:	5c9a      	ldrb	r2, [r3, r2]
    4102:	4915      	ldr	r1, [pc, #84]	; (4158 <OnForceRejoinReqCycleTimerEvent+0x64>)
    4104:	5c5b      	ldrb	r3, [r3, r1]
    4106:	429a      	cmp	r2, r3
    4108:	d011      	beq.n	412e <OnForceRejoinReqCycleTimerEvent+0x3a>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
        MacCtx.NvmCtx->ForceRejoinRetriesCounter = 0;
    }

    MacCtx.NvmCtx->ForceRejoinRetriesCounter ++;
    410a:	4911      	ldr	r1, [pc, #68]	; (4150 <OnForceRejoinReqCycleTimerEvent+0x5c>)
    410c:	2299      	movs	r2, #153	; 0x99
    410e:	00d2      	lsls	r2, r2, #3
    4110:	588c      	ldr	r4, [r1, r2]
    4112:	4810      	ldr	r0, [pc, #64]	; (4154 <OnForceRejoinReqCycleTimerEvent+0x60>)
    4114:	5c23      	ldrb	r3, [r4, r0]
    4116:	3301      	adds	r3, #1
    4118:	5423      	strb	r3, [r4, r0]

    if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    411a:	588a      	ldr	r2, [r1, r2]
    411c:	238a      	movs	r3, #138	; 0x8a
    411e:	009b      	lsls	r3, r3, #2
    4120:	5cd3      	ldrb	r3, [r2, r3]
    4122:	2b01      	cmp	r3, #1
    4124:	d910      	bls.n	4148 <OnForceRejoinReqCycleTimerEvent+0x54>
    {
        SendReJoinReq( REJOIN_REQ_0 );
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    4126:	2002      	movs	r0, #2
    4128:	4b0c      	ldr	r3, [pc, #48]	; (415c <OnForceRejoinReqCycleTimerEvent+0x68>)
    412a:	4798      	blx	r3
    }
}
    412c:	bd10      	pop	{r4, pc}
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    412e:	4c08      	ldr	r4, [pc, #32]	; (4150 <OnForceRejoinReqCycleTimerEvent+0x5c>)
    4130:	2395      	movs	r3, #149	; 0x95
    4132:	00db      	lsls	r3, r3, #3
    4134:	18e0      	adds	r0, r4, r3
    4136:	4b0a      	ldr	r3, [pc, #40]	; (4160 <OnForceRejoinReqCycleTimerEvent+0x6c>)
    4138:	4798      	blx	r3
        MacCtx.NvmCtx->ForceRejoinRetriesCounter = 0;
    413a:	2399      	movs	r3, #153	; 0x99
    413c:	00db      	lsls	r3, r3, #3
    413e:	58e2      	ldr	r2, [r4, r3]
    4140:	2100      	movs	r1, #0
    4142:	4b04      	ldr	r3, [pc, #16]	; (4154 <OnForceRejoinReqCycleTimerEvent+0x60>)
    4144:	54d1      	strb	r1, [r2, r3]
    4146:	e7e0      	b.n	410a <OnForceRejoinReqCycleTimerEvent+0x16>
        SendReJoinReq( REJOIN_REQ_0 );
    4148:	2000      	movs	r0, #0
    414a:	4b04      	ldr	r3, [pc, #16]	; (415c <OnForceRejoinReqCycleTimerEvent+0x68>)
    414c:	4798      	blx	r3
    414e:	e7ed      	b.n	412c <OnForceRejoinReqCycleTimerEvent+0x38>
    4150:	20000cbc 	.word	0x20000cbc
    4154:	00000227 	.word	0x00000227
    4158:	00000226 	.word	0x00000226
    415c:	00003799 	.word	0x00003799
    4160:	0000c1a5 	.word	0x0000c1a5

00004164 <OnRejoin2CycleTimerEvent>:
{
    4164:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
    4166:	4c12      	ldr	r4, [pc, #72]	; (41b0 <OnRejoin2CycleTimerEvent+0x4c>)
    4168:	4b12      	ldr	r3, [pc, #72]	; (41b4 <OnRejoin2CycleTimerEvent+0x50>)
    416a:	18e0      	adds	r0, r4, r3
    416c:	4b12      	ldr	r3, [pc, #72]	; (41b8 <OnRejoin2CycleTimerEvent+0x54>)
    416e:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
    4170:	2399      	movs	r3, #153	; 0x99
    4172:	00db      	lsls	r3, r3, #3
    4174:	58e2      	ldr	r2, [r4, r3]
    4176:	238d      	movs	r3, #141	; 0x8d
    4178:	009b      	lsls	r3, r3, #2
    417a:	58d3      	ldr	r3, [r2, r3]
    if( rejoinCycleTime > 4294967 )
    417c:	4a0f      	ldr	r2, [pc, #60]	; (41bc <OnRejoin2CycleTimerEvent+0x58>)
    417e:	4293      	cmp	r3, r2
    4180:	d905      	bls.n	418e <OnRejoin2CycleTimerEvent+0x2a>
        *timeInMiliSec = rejoinCycleTime * 1000;
    4182:	22fa      	movs	r2, #250	; 0xfa
    4184:	0092      	lsls	r2, r2, #2
    4186:	4353      	muls	r3, r2
    4188:	4a0d      	ldr	r2, [pc, #52]	; (41c0 <OnRejoin2CycleTimerEvent+0x5c>)
    418a:	4909      	ldr	r1, [pc, #36]	; (41b0 <OnRejoin2CycleTimerEvent+0x4c>)
    418c:	508b      	str	r3, [r1, r2]
    SendReJoinReq( REJOIN_REQ_2 );
    418e:	2002      	movs	r0, #2
    4190:	4b0c      	ldr	r3, [pc, #48]	; (41c4 <OnRejoin2CycleTimerEvent+0x60>)
    4192:	4798      	blx	r3
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    4194:	4c06      	ldr	r4, [pc, #24]	; (41b0 <OnRejoin2CycleTimerEvent+0x4c>)
    4196:	4b0a      	ldr	r3, [pc, #40]	; (41c0 <OnRejoin2CycleTimerEvent+0x5c>)
    4198:	58e1      	ldr	r1, [r4, r3]
    419a:	4b06      	ldr	r3, [pc, #24]	; (41b4 <OnRejoin2CycleTimerEvent+0x50>)
    419c:	469c      	mov	ip, r3
    419e:	4464      	add	r4, ip
    41a0:	0020      	movs	r0, r4
    41a2:	4b09      	ldr	r3, [pc, #36]	; (41c8 <OnRejoin2CycleTimerEvent+0x64>)
    41a4:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin2CycleTimer );
    41a6:	0020      	movs	r0, r4
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <OnRejoin2CycleTimerEvent+0x68>)
    41aa:	4798      	blx	r3
}
    41ac:	bd10      	pop	{r4, pc}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	20000cbc 	.word	0x20000cbc
    41b4:	00000494 	.word	0x00000494
    41b8:	0000c1a5 	.word	0x0000c1a5
    41bc:	00418937 	.word	0x00418937
    41c0:	000004c4 	.word	0x000004c4
    41c4:	00003799 	.word	0x00003799
    41c8:	0000c23d 	.word	0x0000c23d
    41cc:	0000c04d 	.word	0x0000c04d

000041d0 <OnRejoin1CycleTimerEvent>:
{
    41d0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
    41d2:	4c13      	ldr	r4, [pc, #76]	; (4220 <OnRejoin1CycleTimerEvent+0x50>)
    41d4:	2390      	movs	r3, #144	; 0x90
    41d6:	00db      	lsls	r3, r3, #3
    41d8:	18e0      	adds	r0, r4, r3
    41da:	4b12      	ldr	r3, [pc, #72]	; (4224 <OnRejoin1CycleTimerEvent+0x54>)
    41dc:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
    41de:	2399      	movs	r3, #153	; 0x99
    41e0:	00db      	lsls	r3, r3, #3
    41e2:	58e2      	ldr	r2, [r4, r3]
    41e4:	238c      	movs	r3, #140	; 0x8c
    41e6:	009b      	lsls	r3, r3, #2
    41e8:	58d3      	ldr	r3, [r2, r3]
    if( rejoinCycleTime > 4294967 )
    41ea:	4a0f      	ldr	r2, [pc, #60]	; (4228 <OnRejoin1CycleTimerEvent+0x58>)
    41ec:	4293      	cmp	r3, r2
    41ee:	d905      	bls.n	41fc <OnRejoin1CycleTimerEvent+0x2c>
        *timeInMiliSec = rejoinCycleTime * 1000;
    41f0:	22fa      	movs	r2, #250	; 0xfa
    41f2:	0092      	lsls	r2, r2, #2
    41f4:	4353      	muls	r3, r2
    41f6:	32d8      	adds	r2, #216	; 0xd8
    41f8:	4909      	ldr	r1, [pc, #36]	; (4220 <OnRejoin1CycleTimerEvent+0x50>)
    41fa:	508b      	str	r3, [r1, r2]
    SendReJoinReq( REJOIN_REQ_1 );
    41fc:	2001      	movs	r0, #1
    41fe:	4b0b      	ldr	r3, [pc, #44]	; (422c <OnRejoin1CycleTimerEvent+0x5c>)
    4200:	4798      	blx	r3
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    4202:	4c07      	ldr	r4, [pc, #28]	; (4220 <OnRejoin1CycleTimerEvent+0x50>)
    4204:	2398      	movs	r3, #152	; 0x98
    4206:	00db      	lsls	r3, r3, #3
    4208:	58e1      	ldr	r1, [r4, r3]
    420a:	3b40      	subs	r3, #64	; 0x40
    420c:	469c      	mov	ip, r3
    420e:	4464      	add	r4, ip
    4210:	0020      	movs	r0, r4
    4212:	4b07      	ldr	r3, [pc, #28]	; (4230 <OnRejoin1CycleTimerEvent+0x60>)
    4214:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin1CycleTimer );
    4216:	0020      	movs	r0, r4
    4218:	4b06      	ldr	r3, [pc, #24]	; (4234 <OnRejoin1CycleTimerEvent+0x64>)
    421a:	4798      	blx	r3
}
    421c:	bd10      	pop	{r4, pc}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	20000cbc 	.word	0x20000cbc
    4224:	0000c1a5 	.word	0x0000c1a5
    4228:	00418937 	.word	0x00418937
    422c:	00003799 	.word	0x00003799
    4230:	0000c23d 	.word	0x0000c23d
    4234:	0000c04d 	.word	0x0000c04d

00004238 <OnRejoin0CycleTimerEvent>:
{
    4238:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
    423a:	4c12      	ldr	r4, [pc, #72]	; (4284 <OnRejoin0CycleTimerEvent+0x4c>)
    423c:	4b12      	ldr	r3, [pc, #72]	; (4288 <OnRejoin0CycleTimerEvent+0x50>)
    423e:	18e0      	adds	r0, r4, r3
    4240:	4b12      	ldr	r3, [pc, #72]	; (428c <OnRejoin0CycleTimerEvent+0x54>)
    4242:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
    4244:	2399      	movs	r3, #153	; 0x99
    4246:	00db      	lsls	r3, r3, #3
    4248:	58e2      	ldr	r2, [r4, r3]
    424a:	238b      	movs	r3, #139	; 0x8b
    424c:	009b      	lsls	r3, r3, #2
    424e:	58d3      	ldr	r3, [r2, r3]
    if( rejoinCycleTime > 4294967 )
    4250:	4a0f      	ldr	r2, [pc, #60]	; (4290 <OnRejoin0CycleTimerEvent+0x58>)
    4252:	4293      	cmp	r3, r2
    4254:	d905      	bls.n	4262 <OnRejoin0CycleTimerEvent+0x2a>
        *timeInMiliSec = rejoinCycleTime * 1000;
    4256:	22fa      	movs	r2, #250	; 0xfa
    4258:	0092      	lsls	r2, r2, #2
    425a:	4353      	muls	r3, r2
    425c:	4a0d      	ldr	r2, [pc, #52]	; (4294 <OnRejoin0CycleTimerEvent+0x5c>)
    425e:	4909      	ldr	r1, [pc, #36]	; (4284 <OnRejoin0CycleTimerEvent+0x4c>)
    4260:	508b      	str	r3, [r1, r2]
    SendReJoinReq( REJOIN_REQ_0 );
    4262:	2000      	movs	r0, #0
    4264:	4b0c      	ldr	r3, [pc, #48]	; (4298 <OnRejoin0CycleTimerEvent+0x60>)
    4266:	4798      	blx	r3
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    4268:	4c06      	ldr	r4, [pc, #24]	; (4284 <OnRejoin0CycleTimerEvent+0x4c>)
    426a:	4b0a      	ldr	r3, [pc, #40]	; (4294 <OnRejoin0CycleTimerEvent+0x5c>)
    426c:	58e1      	ldr	r1, [r4, r3]
    426e:	4b06      	ldr	r3, [pc, #24]	; (4288 <OnRejoin0CycleTimerEvent+0x50>)
    4270:	469c      	mov	ip, r3
    4272:	4464      	add	r4, ip
    4274:	0020      	movs	r0, r4
    4276:	4b09      	ldr	r3, [pc, #36]	; (429c <OnRejoin0CycleTimerEvent+0x64>)
    4278:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin0CycleTimer );
    427a:	0020      	movs	r0, r4
    427c:	4b08      	ldr	r3, [pc, #32]	; (42a0 <OnRejoin0CycleTimerEvent+0x68>)
    427e:	4798      	blx	r3
}
    4280:	bd10      	pop	{r4, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	20000cbc 	.word	0x20000cbc
    4288:	0000046c 	.word	0x0000046c
    428c:	0000c1a5 	.word	0x0000c1a5
    4290:	00418937 	.word	0x00418937
    4294:	000004bc 	.word	0x000004bc
    4298:	00003799 	.word	0x00003799
    429c:	0000c23d 	.word	0x0000c23d
    42a0:	0000c04d 	.word	0x0000c04d

000042a4 <SetTxContinuousWave>:
{
    42a4:	b510      	push	{r4, lr}
    42a6:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.NvmCtx->Channel;
    42a8:	4c12      	ldr	r4, [pc, #72]	; (42f4 <SetTxContinuousWave+0x50>)
    42aa:	2399      	movs	r3, #153	; 0x99
    42ac:	00db      	lsls	r3, r3, #3
    42ae:	58e3      	ldr	r3, [r4, r3]
    42b0:	2214      	movs	r2, #20
    42b2:	32ff      	adds	r2, #255	; 0xff
    42b4:	5c9a      	ldrb	r2, [r3, r2]
    42b6:	a902      	add	r1, sp, #8
    42b8:	700a      	strb	r2, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    42ba:	22d5      	movs	r2, #213	; 0xd5
    42bc:	5c9a      	ldrb	r2, [r3, r2]
    42be:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    42c0:	22d4      	movs	r2, #212	; 0xd4
    42c2:	5c9a      	ldrb	r2, [r3, r2]
    42c4:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    42c6:	2282      	movs	r2, #130	; 0x82
    42c8:	0052      	lsls	r2, r2, #1
    42ca:	589a      	ldr	r2, [r3, r2]
    42cc:	9203      	str	r2, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    42ce:	2284      	movs	r2, #132	; 0x84
    42d0:	0052      	lsls	r2, r2, #1
    42d2:	589a      	ldr	r2, [r3, r2]
    42d4:	9201      	str	r2, [sp, #4]
    42d6:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
    42d8:	8188      	strh	r0, [r1, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
    42da:	7818      	ldrb	r0, [r3, #0]
    42dc:	4b06      	ldr	r3, [pc, #24]	; (42f8 <SetTxContinuousWave+0x54>)
    42de:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    42e0:	22d8      	movs	r2, #216	; 0xd8
    42e2:	0092      	lsls	r2, r2, #2
    42e4:	2302      	movs	r3, #2
    42e6:	58a1      	ldr	r1, [r4, r2]
    42e8:	430b      	orrs	r3, r1
    42ea:	50a3      	str	r3, [r4, r2]
}
    42ec:	2000      	movs	r0, #0
    42ee:	b006      	add	sp, #24
    42f0:	bd10      	pop	{r4, pc}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	20000cbc 	.word	0x20000cbc
    42f8:	00008615 	.word	0x00008615

000042fc <SetTxContinuousWave1>:
{
    42fc:	b510      	push	{r4, lr}
    42fe:	0004      	movs	r4, r0
    4300:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
    4302:	b251      	sxtb	r1, r2
    4304:	4b06      	ldr	r3, [pc, #24]	; (4320 <SetTxContinuousWave1+0x24>)
    4306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4308:	0022      	movs	r2, r4
    430a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    430c:	4905      	ldr	r1, [pc, #20]	; (4324 <SetTxContinuousWave1+0x28>)
    430e:	22d8      	movs	r2, #216	; 0xd8
    4310:	0092      	lsls	r2, r2, #2
    4312:	2302      	movs	r3, #2
    4314:	5888      	ldr	r0, [r1, r2]
    4316:	4303      	orrs	r3, r0
    4318:	508b      	str	r3, [r1, r2]
}
    431a:	2000      	movs	r0, #0
    431c:	bd10      	pop	{r4, pc}
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	0001407c 	.word	0x0001407c
    4324:	20000cbc 	.word	0x20000cbc

00004328 <GetCtxs>:
{
    4328:	b510      	push	{r4, lr}
    432a:	b082      	sub	sp, #8
    Contexts.MacNvmCtx = &NvmMacCtx;
    432c:	4c1a      	ldr	r4, [pc, #104]	; (4398 <GetCtxs+0x70>)
    432e:	4b1b      	ldr	r3, [pc, #108]	; (439c <GetCtxs+0x74>)
    4330:	334c      	adds	r3, #76	; 0x4c
    4332:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
    4334:	2390      	movs	r3, #144	; 0x90
    4336:	009b      	lsls	r3, r3, #2
    4338:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
    433a:	0020      	movs	r0, r4
    433c:	3014      	adds	r0, #20
    433e:	4b18      	ldr	r3, [pc, #96]	; (43a0 <GetCtxs+0x78>)
    4340:	4798      	blx	r3
    4342:	6120      	str	r0, [r4, #16]
    GetNvmCtxParams_t params ={ 0 };
    4344:	2300      	movs	r3, #0
    4346:	9301      	str	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
    4348:	2399      	movs	r3, #153	; 0x99
    434a:	00db      	lsls	r3, r3, #3
    434c:	4a15      	ldr	r2, [pc, #84]	; (43a4 <GetCtxs+0x7c>)
    434e:	58d3      	ldr	r3, [r2, r3]
    4350:	7818      	ldrb	r0, [r3, #0]
    4352:	a901      	add	r1, sp, #4
    4354:	4b14      	ldr	r3, [pc, #80]	; (43a8 <GetCtxs+0x80>)
    4356:	4798      	blx	r3
    4358:	60a0      	str	r0, [r4, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
    435a:	9b01      	ldr	r3, [sp, #4]
    435c:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
    435e:	0020      	movs	r0, r4
    4360:	301c      	adds	r0, #28
    4362:	4b12      	ldr	r3, [pc, #72]	; (43ac <GetCtxs+0x84>)
    4364:	4798      	blx	r3
    4366:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
    4368:	0020      	movs	r0, r4
    436a:	3024      	adds	r0, #36	; 0x24
    436c:	4b10      	ldr	r3, [pc, #64]	; (43b0 <GetCtxs+0x88>)
    436e:	4798      	blx	r3
    4370:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
    4372:	0020      	movs	r0, r4
    4374:	302c      	adds	r0, #44	; 0x2c
    4376:	4b0f      	ldr	r3, [pc, #60]	; (43b4 <GetCtxs+0x8c>)
    4378:	4798      	blx	r3
    437a:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
    437c:	0020      	movs	r0, r4
    437e:	3034      	adds	r0, #52	; 0x34
    4380:	4b0d      	ldr	r3, [pc, #52]	; (43b8 <GetCtxs+0x90>)
    4382:	4798      	blx	r3
    4384:	6320      	str	r0, [r4, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
    4386:	0020      	movs	r0, r4
    4388:	303c      	adds	r0, #60	; 0x3c
    438a:	4b0c      	ldr	r3, [pc, #48]	; (43bc <GetCtxs+0x94>)
    438c:	4798      	blx	r3
    438e:	63a0      	str	r0, [r4, #56]	; 0x38
}
    4390:	0020      	movs	r0, r4
    4392:	b002      	add	sp, #8
    4394:	bd10      	pop	{r4, pc}
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	20001bc0 	.word	0x20001bc0
    439c:	2000113c 	.word	0x2000113c
    43a0:	0000777d 	.word	0x0000777d
    43a4:	20000cbc 	.word	0x20000cbc
    43a8:	0000848d 	.word	0x0000848d
    43ac:	0000bc7d 	.word	0x0000bc7d
    43b0:	00006b49 	.word	0x00006b49
    43b4:	00006a2b 	.word	0x00006a2b
    43b8:	00006e2d 	.word	0x00006e2d
    43bc:	00007e79 	.word	0x00007e79

000043c0 <RestoreCtxs>:
{
    43c0:	b530      	push	{r4, r5, lr}
    43c2:	b085      	sub	sp, #20
    43c4:	0004      	movs	r4, r0
    MacCommand_t* macCmd = NULL;
    43c6:	2300      	movs	r3, #0
    43c8:	9303      	str	r3, [sp, #12]
    uint8_t cmdPayload = 0;
    43ca:	220b      	movs	r2, #11
    43cc:	446a      	add	r2, sp
    43ce:	7013      	strb	r3, [r2, #0]
    if( MacCtx.MacState != LORAMAC_STOPPED )
    43d0:	23d8      	movs	r3, #216	; 0xd8
    43d2:	009b      	lsls	r3, r3, #2
    43d4:	4a30      	ldr	r2, [pc, #192]	; (4498 <RestoreCtxs+0xd8>)
    43d6:	58d3      	ldr	r3, [r2, r3]
        return LORAMAC_STATUS_BUSY;
    43d8:	2501      	movs	r5, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
    43da:	2b01      	cmp	r3, #1
    43dc:	d002      	beq.n	43e4 <RestoreCtxs+0x24>
}
    43de:	0028      	movs	r0, r5
    43e0:	b005      	add	sp, #20
    43e2:	bd30      	pop	{r4, r5, pc}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    43e4:	2500      	movs	r5, #0
    if( contexts == NULL )
    43e6:	2800      	cmp	r0, #0
    43e8:	d03a      	beq.n	4460 <RestoreCtxs+0xa0>
    if( contexts->MacNvmCtx != NULL )
    43ea:	6821      	ldr	r1, [r4, #0]
    43ec:	2900      	cmp	r1, #0
    43ee:	d039      	beq.n	4464 <RestoreCtxs+0xa4>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
    43f0:	88a2      	ldrh	r2, [r4, #4]
    43f2:	482a      	ldr	r0, [pc, #168]	; (449c <RestoreCtxs+0xdc>)
    43f4:	304c      	adds	r0, #76	; 0x4c
    43f6:	4b2a      	ldr	r3, [pc, #168]	; (44a0 <RestoreCtxs+0xe0>)
    43f8:	4798      	blx	r3
    params.Type = INIT_TYPE_RESTORE_CTX;
    43fa:	2303      	movs	r3, #3
    43fc:	466a      	mov	r2, sp
    43fe:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
    4400:	68a3      	ldr	r3, [r4, #8]
    4402:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    4404:	2399      	movs	r3, #153	; 0x99
    4406:	00db      	lsls	r3, r3, #3
    4408:	4a23      	ldr	r2, [pc, #140]	; (4498 <RestoreCtxs+0xd8>)
    440a:	58d3      	ldr	r3, [r2, r3]
    440c:	7818      	ldrb	r0, [r3, #0]
    440e:	4669      	mov	r1, sp
    4410:	4b24      	ldr	r3, [pc, #144]	; (44a4 <RestoreCtxs+0xe4>)
    4412:	4798      	blx	r3
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
    4414:	69a0      	ldr	r0, [r4, #24]
    4416:	4b24      	ldr	r3, [pc, #144]	; (44a8 <RestoreCtxs+0xe8>)
    4418:	4798      	blx	r3
    441a:	2800      	cmp	r0, #0
    441c:	d000      	beq.n	4420 <RestoreCtxs+0x60>
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    441e:	2511      	movs	r5, #17
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
    4420:	6920      	ldr	r0, [r4, #16]
    4422:	4b22      	ldr	r3, [pc, #136]	; (44ac <RestoreCtxs+0xec>)
    4424:	4798      	blx	r3
    4426:	2800      	cmp	r0, #0
    4428:	d000      	beq.n	442c <RestoreCtxs+0x6c>
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    442a:	2511      	movs	r5, #17
    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    442c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    442e:	4b20      	ldr	r3, [pc, #128]	; (44b0 <RestoreCtxs+0xf0>)
    4430:	4798      	blx	r3
    4432:	2800      	cmp	r0, #0
    4434:	d000      	beq.n	4438 <RestoreCtxs+0x78>
        status = LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    4436:	2512      	movs	r5, #18
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
    4438:	6a20      	ldr	r0, [r4, #32]
    443a:	4b1e      	ldr	r3, [pc, #120]	; (44b4 <RestoreCtxs+0xf4>)
    443c:	4798      	blx	r3
    443e:	2800      	cmp	r0, #0
    4440:	d000      	beq.n	4444 <RestoreCtxs+0x84>
        status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    4442:	2513      	movs	r5, #19
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
    4444:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4446:	4b1c      	ldr	r3, [pc, #112]	; (44b8 <RestoreCtxs+0xf8>)
    4448:	4798      	blx	r3
    444a:	2800      	cmp	r0, #0
    444c:	d100      	bne.n	4450 <RestoreCtxs+0x90>
        status = LORAMAC_STATUS_CLASS_B_ERROR;
    444e:	2514      	movs	r5, #20
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
    4450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4452:	4b1a      	ldr	r3, [pc, #104]	; (44bc <RestoreCtxs+0xfc>)
    4454:	4798      	blx	r3
    4456:	2800      	cmp	r0, #0
    4458:	d006      	beq.n	4468 <RestoreCtxs+0xa8>
    if( status != LORAMAC_STATUS_OK)
    445a:	2d00      	cmp	r5, #0
    445c:	d0bf      	beq.n	43de <RestoreCtxs+0x1e>
    445e:	e004      	b.n	446a <RestoreCtxs+0xaa>
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    4460:	3503      	adds	r5, #3
    4462:	e7c2      	b.n	43ea <RestoreCtxs+0x2a>
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    4464:	2503      	movs	r5, #3
    4466:	e7c8      	b.n	43fa <RestoreCtxs+0x3a>
        status = LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
    4468:	2515      	movs	r5, #21
        if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd ) != LORAMAC_COMMANDS_SUCCESS )
    446a:	a903      	add	r1, sp, #12
    446c:	2001      	movs	r0, #1
    446e:	4b14      	ldr	r3, [pc, #80]	; (44c0 <RestoreCtxs+0x100>)
    4470:	4798      	blx	r3
    4472:	2800      	cmp	r0, #0
    4474:	d0b3      	beq.n	43de <RestoreCtxs+0x1e>
            cmdPayload = 0x0F & MacCtx.NvmCtx->Version.Fields.Minor;
    4476:	210b      	movs	r1, #11
    4478:	4469      	add	r1, sp
    447a:	2399      	movs	r3, #153	; 0x99
    447c:	00db      	lsls	r3, r3, #3
    447e:	4a06      	ldr	r2, [pc, #24]	; (4498 <RestoreCtxs+0xd8>)
    4480:	58d2      	ldr	r2, [r2, r3]
    4482:	4b10      	ldr	r3, [pc, #64]	; (44c4 <RestoreCtxs+0x104>)
    4484:	5cd2      	ldrb	r2, [r2, r3]
    4486:	230f      	movs	r3, #15
    4488:	4013      	ands	r3, r2
    448a:	700b      	strb	r3, [r1, #0]
            LoRaMacCommandsAddCmd( MOTE_MAC_RESET_IND, &cmdPayload, 1 );
    448c:	2201      	movs	r2, #1
    448e:	2001      	movs	r0, #1
    4490:	4b0d      	ldr	r3, [pc, #52]	; (44c8 <RestoreCtxs+0x108>)
    4492:	4798      	blx	r3
    4494:	e7a3      	b.n	43de <RestoreCtxs+0x1e>
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	20000cbc 	.word	0x20000cbc
    449c:	2000113c 	.word	0x2000113c
    44a0:	00001e91 	.word	0x00001e91
    44a4:	00008479 	.word	0x00008479
    44a8:	0000bc59 	.word	0x0000bc59
    44ac:	00007759 	.word	0x00007759
    44b0:	00007e55 	.word	0x00007e55
    44b4:	00006b25 	.word	0x00006b25
    44b8:	00006a27 	.word	0x00006a27
    44bc:	00006e09 	.word	0x00006e09
    44c0:	00006c69 	.word	0x00006c69
    44c4:	0000021e 	.word	0x0000021e
    44c8:	00006b59 	.word	0x00006b59

000044cc <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
    44cc:	2800      	cmp	r0, #0
    44ce:	d023      	beq.n	4518 <DetermineFrameType+0x4c>
    44d0:	2900      	cmp	r1, #0
    44d2:	d024      	beq.n	451e <DetermineFrameType+0x52>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
    44d4:	7b03      	ldrb	r3, [r0, #12]
    44d6:	071b      	lsls	r3, r3, #28
    44d8:	d003      	beq.n	44e2 <DetermineFrameType+0x16>
    44da:	2320      	movs	r3, #32
    44dc:	5cc3      	ldrb	r3, [r0, r3]
    44de:	2b00      	cmp	r3, #0
    44e0:	d10f      	bne.n	4502 <DetermineFrameType+0x36>
    else if( macMsg->FRMPayloadSize == 0 )
    44e2:	2328      	movs	r3, #40	; 0x28
    44e4:	5cc3      	ldrb	r3, [r0, r3]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d00e      	beq.n	4508 <DetermineFrameType+0x3c>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
    44ea:	7b02      	ldrb	r2, [r0, #12]
        return LORAMAC_STATUS_ERROR;
    44ec:	2316      	movs	r3, #22
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
    44ee:	0712      	lsls	r2, r2, #28
    44f0:	d113      	bne.n	451a <DetermineFrameType+0x4e>
    44f2:	330a      	adds	r3, #10
    44f4:	5cc3      	ldrb	r3, [r0, r3]
    44f6:	2b00      	cmp	r3, #0
    44f8:	d00a      	beq.n	4510 <DetermineFrameType+0x44>
        *fType = FRAME_TYPE_D;
    44fa:	2303      	movs	r3, #3
    44fc:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
    44fe:	2300      	movs	r3, #0
        *fType = FRAME_TYPE_D;
    4500:	e00b      	b.n	451a <DetermineFrameType+0x4e>
        *fType = FRAME_TYPE_A;
    4502:	2300      	movs	r3, #0
    4504:	700b      	strb	r3, [r1, #0]
    4506:	e008      	b.n	451a <DetermineFrameType+0x4e>
        *fType = FRAME_TYPE_B;
    4508:	3301      	adds	r3, #1
    450a:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
    450c:	2300      	movs	r3, #0
    450e:	e004      	b.n	451a <DetermineFrameType+0x4e>
        *fType = FRAME_TYPE_C;
    4510:	3302      	adds	r3, #2
    4512:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
    4514:	2300      	movs	r3, #0
        *fType = FRAME_TYPE_C;
    4516:	e000      	b.n	451a <DetermineFrameType+0x4e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    4518:	2303      	movs	r3, #3
}
    451a:	0018      	movs	r0, r3
    451c:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
    451e:	2303      	movs	r3, #3
    4520:	e7fb      	b.n	451a <DetermineFrameType+0x4e>
	...

00004524 <LoRaMacProcess>:
{
    4524:	b5f0      	push	{r4, r5, r6, r7, lr}
    4526:	46d6      	mov	lr, sl
    4528:	464f      	mov	r7, r9
    452a:	4646      	mov	r6, r8
    452c:	b5c0      	push	{r6, r7, lr}
    452e:	b0a4      	sub	sp, #144	; 0x90
    CRITICAL_SECTION_BEGIN( );
    4530:	a808      	add	r0, sp, #32
    4532:	4bcc      	ldr	r3, [pc, #816]	; (4864 <LoRaMacProcess+0x340>)
    4534:	4798      	blx	r3
    events = LoRaMacRadioEvents;
    4536:	4bcc      	ldr	r3, [pc, #816]	; (4868 <LoRaMacProcess+0x344>)
    4538:	681c      	ldr	r4, [r3, #0]
    LoRaMacRadioEvents.Value = 0;
    453a:	2200      	movs	r2, #0
    453c:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
    453e:	a808      	add	r0, sp, #32
    4540:	4bca      	ldr	r3, [pc, #808]	; (486c <LoRaMacProcess+0x348>)
    4542:	4798      	blx	r3
    if( events.Value != 0 )
    4544:	2c00      	cmp	r4, #0
    4546:	d013      	beq.n	4570 <LoRaMacProcess+0x4c>
        if( events.Events.TxDone == 1 )
    4548:	b2e5      	uxtb	r5, r4
    454a:	06eb      	lsls	r3, r5, #27
    454c:	d500      	bpl.n	4550 <LoRaMacProcess+0x2c>
    454e:	e0a1      	b.n	4694 <LoRaMacProcess+0x170>
        if( events.Events.RxDone == 1 )
    4550:	072b      	lsls	r3, r5, #28
    4552:	d500      	bpl.n	4556 <LoRaMacProcess+0x32>
    4554:	e13c      	b.n	47d0 <LoRaMacProcess+0x2ac>
        if( events.Events.TxTimeout == 1 )
    4556:	b2e4      	uxtb	r4, r4
    4558:	0763      	lsls	r3, r4, #29
    455a:	d501      	bpl.n	4560 <LoRaMacProcess+0x3c>
    455c:	f000 fd44 	bl	4fe8 <LoRaMacProcess+0xac4>
        if( events.Events.RxError == 1 )
    4560:	07a3      	lsls	r3, r4, #30
    4562:	d501      	bpl.n	4568 <LoRaMacProcess+0x44>
    4564:	f000 fd5c 	bl	5020 <LoRaMacProcess+0xafc>
        if( events.Events.RxTimeout == 1 )
    4568:	07e3      	lsls	r3, r4, #31
    456a:	d501      	bpl.n	4570 <LoRaMacProcess+0x4c>
    456c:	f000 fd5e 	bl	502c <LoRaMacProcess+0xb08>
    LoRaMacClassBProcess( );
    4570:	4bbf      	ldr	r3, [pc, #764]	; (4870 <LoRaMacProcess+0x34c>)
    4572:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
    4574:	4bbf      	ldr	r3, [pc, #764]	; (4874 <LoRaMacProcess+0x350>)
    4576:	4abc      	ldr	r2, [pc, #752]	; (4868 <LoRaMacProcess+0x344>)
    4578:	5cd3      	ldrb	r3, [r2, r3]
    457a:	06da      	lsls	r2, r3, #27
    457c:	d53c      	bpl.n	45f8 <LoRaMacProcess+0xd4>
        if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
    457e:	22d8      	movs	r2, #216	; 0xd8
    4580:	0092      	lsls	r2, r2, #2
    4582:	49b9      	ldr	r1, [pc, #740]	; (4868 <LoRaMacProcess+0x344>)
    4584:	588a      	ldr	r2, [r1, r2]
    4586:	0611      	lsls	r1, r2, #24
    4588:	d505      	bpl.n	4596 <LoRaMacProcess+0x72>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    458a:	2182      	movs	r1, #130	; 0x82
    458c:	438a      	bics	r2, r1
    458e:	21d8      	movs	r1, #216	; 0xd8
    4590:	0089      	lsls	r1, r1, #2
    4592:	48b5      	ldr	r0, [pc, #724]	; (4868 <LoRaMacProcess+0x344>)
    4594:	5042      	str	r2, [r0, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
    4596:	2205      	movs	r2, #5
        if( IsRequestPending( ) > 0 )
    4598:	421a      	tst	r2, r3
    459a:	d001      	beq.n	45a0 <LoRaMacProcess+0x7c>
    459c:	f000 fd4c 	bl	5038 <LoRaMacProcess+0xb14>
            if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
    45a0:	4bb4      	ldr	r3, [pc, #720]	; (4874 <LoRaMacProcess+0x350>)
    45a2:	4ab1      	ldr	r2, [pc, #708]	; (4868 <LoRaMacProcess+0x344>)
    45a4:	5cd3      	ldrb	r3, [r2, r3]
    45a6:	075b      	lsls	r3, r3, #29
    45a8:	d501      	bpl.n	45ae <LoRaMacProcess+0x8a>
    45aa:	f000 fea8 	bl	52fe <LoRaMacProcess+0xdda>
            if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    45ae:	4bb1      	ldr	r3, [pc, #708]	; (4874 <LoRaMacProcess+0x350>)
    45b0:	4aad      	ldr	r2, [pc, #692]	; (4868 <LoRaMacProcess+0x344>)
    45b2:	5cd3      	ldrb	r3, [r2, r3]
    45b4:	07da      	lsls	r2, r3, #31
    45b6:	d401      	bmi.n	45bc <LoRaMacProcess+0x98>
    45b8:	f000 fe8d 	bl	52d6 <LoRaMacProcess+0xdb2>
                if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
    45bc:	2285      	movs	r2, #133	; 0x85
    45be:	00d2      	lsls	r2, r2, #3
    45c0:	49a9      	ldr	r1, [pc, #676]	; (4868 <LoRaMacProcess+0x344>)
    45c2:	5c8a      	ldrb	r2, [r1, r2]
    45c4:	2a00      	cmp	r2, #0
    45c6:	d101      	bne.n	45cc <LoRaMacProcess+0xa8>
    45c8:	f000 fddf 	bl	518a <LoRaMacProcess+0xc66>
    45cc:	2a03      	cmp	r2, #3
    45ce:	d101      	bne.n	45d4 <LoRaMacProcess+0xb0>
    45d0:	f000 fddb 	bl	518a <LoRaMacProcess+0xc66>
                else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
    45d4:	2a01      	cmp	r2, #1
    45d6:	d101      	bne.n	45dc <LoRaMacProcess+0xb8>
    45d8:	f000 fe14 	bl	5204 <LoRaMacProcess+0xce0>
                    MacCtx.MacFlags.Bits.MacDone = 0;
    45dc:	4ba2      	ldr	r3, [pc, #648]	; (4868 <LoRaMacProcess+0x344>)
    45de:	49a5      	ldr	r1, [pc, #660]	; (4874 <LoRaMacProcess+0x350>)
    45e0:	5c5a      	ldrb	r2, [r3, r1]
    45e2:	2010      	movs	r0, #16
    45e4:	4382      	bics	r2, r0
    45e6:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->AckTimeoutRetry = false;
    45e8:	2299      	movs	r2, #153	; 0x99
    45ea:	00d2      	lsls	r2, r2, #3
    45ec:	589a      	ldr	r2, [r3, r2]
    45ee:	2100      	movs	r1, #0
    45f0:	4ba1      	ldr	r3, [pc, #644]	; (4878 <LoRaMacProcess+0x354>)
    45f2:	54d1      	strb	r1, [r2, r3]
                    OnTxDelayedTimerEvent( );
    45f4:	4ba1      	ldr	r3, [pc, #644]	; (487c <LoRaMacProcess+0x358>)
    45f6:	4798      	blx	r3
    if( MacCtx.MacState == LORAMAC_IDLE )
    45f8:	23d8      	movs	r3, #216	; 0xd8
    45fa:	009b      	lsls	r3, r3, #2
    45fc:	4a9a      	ldr	r2, [pc, #616]	; (4868 <LoRaMacProcess+0x344>)
    45fe:	58d3      	ldr	r3, [r2, r3]
    4600:	2b00      	cmp	r3, #0
    4602:	d126      	bne.n	4652 <LoRaMacProcess+0x12e>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    4604:	4b9b      	ldr	r3, [pc, #620]	; (4874 <LoRaMacProcess+0x350>)
    4606:	5cd3      	ldrb	r3, [r2, r3]
    4608:	07db      	lsls	r3, r3, #31
    460a:	d501      	bpl.n	4610 <LoRaMacProcess+0xec>
    460c:	f000 fda3 	bl	5156 <LoRaMacProcess+0xc32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    4610:	4b98      	ldr	r3, [pc, #608]	; (4874 <LoRaMacProcess+0x350>)
    4612:	4a95      	ldr	r2, [pc, #596]	; (4868 <LoRaMacProcess+0x344>)
    4614:	5cd3      	ldrb	r3, [r2, r3]
    4616:	075b      	lsls	r3, r3, #29
    4618:	d501      	bpl.n	461e <LoRaMacProcess+0xfa>
    461a:	f000 fe0e 	bl	523a <LoRaMacProcess+0xd16>
        if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
    461e:	4b95      	ldr	r3, [pc, #596]	; (4874 <LoRaMacProcess+0x350>)
    4620:	4a91      	ldr	r2, [pc, #580]	; (4868 <LoRaMacProcess+0x344>)
    4622:	5cd3      	ldrb	r3, [r2, r3]
    4624:	071b      	lsls	r3, r3, #28
    4626:	d501      	bpl.n	462c <LoRaMacProcess+0x108>
    4628:	f000 fe20 	bl	526c <LoRaMacProcess+0xd48>
        bool isStickyMacCommandPending = false;
    462c:	ac18      	add	r4, sp, #96	; 0x60
    462e:	2300      	movs	r3, #0
    4630:	7023      	strb	r3, [r4, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
    4632:	0020      	movs	r0, r4
    4634:	4b92      	ldr	r3, [pc, #584]	; (4880 <LoRaMacProcess+0x35c>)
    4636:	4798      	blx	r3
        if( isStickyMacCommandPending == true )
    4638:	7823      	ldrb	r3, [r4, #0]
    463a:	2b00      	cmp	r3, #0
    463c:	d001      	beq.n	4642 <LoRaMacProcess+0x11e>
    463e:	f000 fe24 	bl	528a <LoRaMacProcess+0xd66>
        MacCtx.MacFlags.Bits.MacDone = 0;
    4642:	4989      	ldr	r1, [pc, #548]	; (4868 <LoRaMacProcess+0x344>)
    4644:	4a8b      	ldr	r2, [pc, #556]	; (4874 <LoRaMacProcess+0x350>)
    4646:	5c8b      	ldrb	r3, [r1, r2]
    4648:	2010      	movs	r0, #16
    464a:	4383      	bics	r3, r0
    464c:	548b      	strb	r3, [r1, r2]
        LoRaMacClassBResumeBeaconing( );
    464e:	4b8d      	ldr	r3, [pc, #564]	; (4884 <LoRaMacProcess+0x360>)
    4650:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    4652:	4b88      	ldr	r3, [pc, #544]	; (4874 <LoRaMacProcess+0x350>)
    4654:	4a84      	ldr	r2, [pc, #528]	; (4868 <LoRaMacProcess+0x344>)
    4656:	5cd3      	ldrb	r3, [r2, r3]
    4658:	079b      	lsls	r3, r3, #30
    465a:	d515      	bpl.n	4688 <LoRaMacProcess+0x164>
        MacCtx.MacFlags.Bits.McpsInd = 0;
    465c:	0013      	movs	r3, r2
    465e:	4985      	ldr	r1, [pc, #532]	; (4874 <LoRaMacProcess+0x350>)
    4660:	5c52      	ldrb	r2, [r2, r1]
    4662:	2002      	movs	r0, #2
    4664:	4382      	bics	r2, r0
    4666:	545a      	strb	r2, [r3, r1]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    4668:	2299      	movs	r2, #153	; 0x99
    466a:	00d2      	lsls	r2, r2, #3
    466c:	589a      	ldr	r2, [r3, r2]
    466e:	23c8      	movs	r3, #200	; 0xc8
    4670:	5cd3      	ldrb	r3, [r2, r3]
    4672:	2b02      	cmp	r3, #2
    4674:	d101      	bne.n	467a <LoRaMacProcess+0x156>
    4676:	f000 fe1f 	bl	52b8 <LoRaMacProcess+0xd94>
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
    467a:	4b7b      	ldr	r3, [pc, #492]	; (4868 <LoRaMacProcess+0x344>)
    467c:	4a82      	ldr	r2, [pc, #520]	; (4888 <LoRaMacProcess+0x364>)
    467e:	1898      	adds	r0, r3, r2
    4680:	3aa8      	subs	r2, #168	; 0xa8
    4682:	589b      	ldr	r3, [r3, r2]
    4684:	685b      	ldr	r3, [r3, #4]
    4686:	4798      	blx	r3
}
    4688:	b024      	add	sp, #144	; 0x90
    468a:	bc1c      	pop	{r2, r3, r4}
    468c:	4690      	mov	r8, r2
    468e:	4699      	mov	r9, r3
    4690:	46a2      	mov	sl, r4
    4692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    4694:	2399      	movs	r3, #153	; 0x99
    4696:	00db      	lsls	r3, r3, #3
    4698:	4a73      	ldr	r2, [pc, #460]	; (4868 <LoRaMacProcess+0x344>)
    469a:	58d2      	ldr	r2, [r2, r3]
    469c:	23c8      	movs	r3, #200	; 0xc8
    469e:	5cd3      	ldrb	r3, [r2, r3]
    46a0:	2b02      	cmp	r3, #2
    46a2:	d04f      	beq.n	4744 <LoRaMacProcess+0x220>
        Radio.Sleep( );
    46a4:	4b79      	ldr	r3, [pc, #484]	; (488c <LoRaMacProcess+0x368>)
    46a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46a8:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
    46aa:	4e6f      	ldr	r6, [pc, #444]	; (4868 <LoRaMacProcess+0x344>)
    46ac:	23f1      	movs	r3, #241	; 0xf1
    46ae:	009b      	lsls	r3, r3, #2
    46b0:	58f1      	ldr	r1, [r6, r3]
    46b2:	3b28      	subs	r3, #40	; 0x28
    46b4:	18f7      	adds	r7, r6, r3
    46b6:	0038      	movs	r0, r7
    46b8:	4b75      	ldr	r3, [pc, #468]	; (4890 <LoRaMacProcess+0x36c>)
    46ba:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    46bc:	0038      	movs	r0, r7
    46be:	4b75      	ldr	r3, [pc, #468]	; (4894 <LoRaMacProcess+0x370>)
    46c0:	4798      	blx	r3
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    46c2:	2399      	movs	r3, #153	; 0x99
    46c4:	00db      	lsls	r3, r3, #3
    46c6:	58f3      	ldr	r3, [r6, r3]
    46c8:	22c8      	movs	r2, #200	; 0xc8
    46ca:	5c9a      	ldrb	r2, [r3, r2]
    46cc:	2a02      	cmp	r2, #2
    46ce:	d016      	beq.n	46fe <LoRaMacProcess+0x1da>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
    46d0:	4e65      	ldr	r6, [pc, #404]	; (4868 <LoRaMacProcess+0x344>)
    46d2:	23f2      	movs	r3, #242	; 0xf2
    46d4:	009b      	lsls	r3, r3, #2
    46d6:	58f1      	ldr	r1, [r6, r3]
    46d8:	3b18      	subs	r3, #24
    46da:	18f7      	adds	r7, r6, r3
    46dc:	0038      	movs	r0, r7
    46de:	4b6c      	ldr	r3, [pc, #432]	; (4890 <LoRaMacProcess+0x36c>)
    46e0:	4798      	blx	r3
        TimerStart( &MacCtx.RxWindowTimer2 );
    46e2:	0038      	movs	r0, r7
    46e4:	4b6b      	ldr	r3, [pc, #428]	; (4894 <LoRaMacProcess+0x370>)
    46e6:	4798      	blx	r3
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
    46e8:	2399      	movs	r3, #153	; 0x99
    46ea:	00db      	lsls	r3, r3, #3
    46ec:	58f3      	ldr	r3, [r6, r3]
    46ee:	22c8      	movs	r2, #200	; 0xc8
    46f0:	5c9a      	ldrb	r2, [r3, r2]
    46f2:	2a02      	cmp	r2, #2
    46f4:	d003      	beq.n	46fe <LoRaMacProcess+0x1da>
    46f6:	4a68      	ldr	r2, [pc, #416]	; (4898 <LoRaMacProcess+0x374>)
    46f8:	5c9a      	ldrb	r2, [r3, r2]
    46fa:	2a00      	cmp	r2, #0
    46fc:	d014      	beq.n	4728 <LoRaMacProcess+0x204>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
    46fe:	a90c      	add	r1, sp, #48	; 0x30
    4700:	2215      	movs	r2, #21
    4702:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    4704:	7818      	ldrb	r0, [r3, #0]
    4706:	4b65      	ldr	r3, [pc, #404]	; (489c <LoRaMacProcess+0x378>)
    4708:	4798      	blx	r3
    470a:	900e      	str	r0, [sp, #56]	; 0x38
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
    470c:	4e56      	ldr	r6, [pc, #344]	; (4868 <LoRaMacProcess+0x344>)
    470e:	23f2      	movs	r3, #242	; 0xf2
    4710:	009b      	lsls	r3, r3, #2
    4712:	58f1      	ldr	r1, [r6, r3]
    4714:	1809      	adds	r1, r1, r0
    4716:	332c      	adds	r3, #44	; 0x2c
    4718:	469c      	mov	ip, r3
    471a:	4466      	add	r6, ip
    471c:	0030      	movs	r0, r6
    471e:	4b5c      	ldr	r3, [pc, #368]	; (4890 <LoRaMacProcess+0x36c>)
    4720:	4798      	blx	r3
        TimerStart( &MacCtx.AckTimeoutTimer );
    4722:	0030      	movs	r0, r6
    4724:	4b5b      	ldr	r3, [pc, #364]	; (4894 <LoRaMacProcess+0x370>)
    4726:	4798      	blx	r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( MacCtx.MlmeConfirm.MlmeRequest == MLME_JOIN ) )
    4728:	4b52      	ldr	r3, [pc, #328]	; (4874 <LoRaMacProcess+0x350>)
    472a:	4a4f      	ldr	r2, [pc, #316]	; (4868 <LoRaMacProcess+0x344>)
    472c:	5cd3      	ldrb	r3, [r2, r3]
    472e:	075b      	lsls	r3, r3, #29
    4730:	d50b      	bpl.n	474a <LoRaMacProcess+0x226>
    4732:	4b5b      	ldr	r3, [pc, #364]	; (48a0 <LoRaMacProcess+0x37c>)
    4734:	5cd3      	ldrb	r3, [r2, r3]
    4736:	2b00      	cmp	r3, #0
    4738:	d107      	bne.n	474a <LoRaMacProcess+0x226>
        MacCtx.LastTxIsJoinRequest = true;
    473a:	2101      	movs	r1, #1
    473c:	23d3      	movs	r3, #211	; 0xd3
    473e:	009b      	lsls	r3, r3, #2
    4740:	54d1      	strb	r1, [r2, r3]
    4742:	e007      	b.n	4754 <LoRaMacProcess+0x230>
        OpenContinuousRx2Window( );
    4744:	4b57      	ldr	r3, [pc, #348]	; (48a4 <LoRaMacProcess+0x380>)
    4746:	4798      	blx	r3
    4748:	e7af      	b.n	46aa <LoRaMacProcess+0x186>
        MacCtx.LastTxIsJoinRequest = false;
    474a:	2100      	movs	r1, #0
    474c:	23d3      	movs	r3, #211	; 0xd3
    474e:	009b      	lsls	r3, r3, #2
    4750:	4a45      	ldr	r2, [pc, #276]	; (4868 <LoRaMacProcess+0x344>)
    4752:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    4754:	4944      	ldr	r1, [pc, #272]	; (4868 <LoRaMacProcess+0x344>)
    4756:	2399      	movs	r3, #153	; 0x99
    4758:	00db      	lsls	r3, r3, #3
    475a:	58c8      	ldr	r0, [r1, r3]
    475c:	2214      	movs	r2, #20
    475e:	32ff      	adds	r2, #255	; 0xff
    4760:	5c87      	ldrb	r7, [r0, r2]
    4762:	268a      	movs	r6, #138	; 0x8a
    4764:	0076      	lsls	r6, r6, #1
    4766:	5587      	strb	r7, [r0, r6]
    txDone.Channel = MacCtx.NvmCtx->Channel;
    4768:	58cb      	ldr	r3, [r1, r3]
    476a:	5c99      	ldrb	r1, [r3, r2]
    476c:	aa18      	add	r2, sp, #96	; 0x60
    476e:	7011      	strb	r1, [r2, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    4770:	2288      	movs	r2, #136	; 0x88
    4772:	0092      	lsls	r2, r2, #2
    4774:	5c9a      	ldrb	r2, [r3, r2]
    4776:	2a00      	cmp	r2, #0
    4778:	d126      	bne.n	47c8 <LoRaMacProcess+0x2a4>
        txDone.Joined  = false;
    477a:	2100      	movs	r1, #0
    477c:	aa18      	add	r2, sp, #96	; 0x60
    477e:	7051      	strb	r1, [r2, #1]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
    4780:	4e49      	ldr	r6, [pc, #292]	; (48a8 <LoRaMacProcess+0x384>)
    4782:	6832      	ldr	r2, [r6, #0]
    4784:	9219      	str	r2, [sp, #100]	; 0x64
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
    4786:	7818      	ldrb	r0, [r3, #0]
    4788:	a918      	add	r1, sp, #96	; 0x60
    478a:	4b48      	ldr	r3, [pc, #288]	; (48ac <LoRaMacProcess+0x388>)
    478c:	4798      	blx	r3
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
    478e:	4b36      	ldr	r3, [pc, #216]	; (4868 <LoRaMacProcess+0x344>)
    4790:	6831      	ldr	r1, [r6, #0]
    4792:	22d1      	movs	r2, #209	; 0xd1
    4794:	0092      	lsls	r2, r2, #2
    4796:	5099      	str	r1, [r3, r2]
    if( MacCtx.NvmCtx->NodeAckRequested == false )
    4798:	3285      	adds	r2, #133	; 0x85
    479a:	32ff      	adds	r2, #255	; 0xff
    479c:	589a      	ldr	r2, [r3, r2]
    479e:	4b3e      	ldr	r3, [pc, #248]	; (4898 <LoRaMacProcess+0x374>)
    47a0:	5cd3      	ldrb	r3, [r2, r3]
    47a2:	2b00      	cmp	r3, #0
    47a4:	d103      	bne.n	47ae <LoRaMacProcess+0x28a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    47a6:	2000      	movs	r0, #0
    47a8:	4b41      	ldr	r3, [pc, #260]	; (48b0 <LoRaMacProcess+0x38c>)
    47aa:	492f      	ldr	r1, [pc, #188]	; (4868 <LoRaMacProcess+0x344>)
    47ac:	54c8      	strb	r0, [r1, r3]
    MacCtx.NvmCtx->ChannelsNbTransCounter++;
    47ae:	2388      	movs	r3, #136	; 0x88
    47b0:	005b      	lsls	r3, r3, #1
    47b2:	5cd1      	ldrb	r1, [r2, r3]
    47b4:	3101      	adds	r1, #1
    47b6:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    47b8:	4a2b      	ldr	r2, [pc, #172]	; (4868 <LoRaMacProcess+0x344>)
    47ba:	2199      	movs	r1, #153	; 0x99
    47bc:	00c9      	lsls	r1, r1, #3
    47be:	5851      	ldr	r1, [r2, r1]
    47c0:	5cc9      	ldrb	r1, [r1, r3]
    47c2:	4b3c      	ldr	r3, [pc, #240]	; (48b4 <LoRaMacProcess+0x390>)
    47c4:	54d1      	strb	r1, [r2, r3]
    47c6:	e6c3      	b.n	4550 <LoRaMacProcess+0x2c>
        txDone.Joined  = true;
    47c8:	2101      	movs	r1, #1
    47ca:	aa18      	add	r2, sp, #96	; 0x60
    47cc:	7051      	strb	r1, [r2, #1]
    47ce:	e7d7      	b.n	4780 <LoRaMacProcess+0x25c>
    uint8_t *payload = RxDoneParams.Payload;
    47d0:	4b39      	ldr	r3, [pc, #228]	; (48b8 <LoRaMacProcess+0x394>)
    47d2:	685f      	ldr	r7, [r3, #4]
    uint16_t size = RxDoneParams.Size;
    47d4:	891a      	ldrh	r2, [r3, #8]
    47d6:	4690      	mov	r8, r2
    int16_t rssi = RxDoneParams.Rssi;
    47d8:	210a      	movs	r1, #10
    47da:	5e5a      	ldrsh	r2, [r3, r1]
    47dc:	4691      	mov	r9, r2
    int8_t snr = RxDoneParams.Snr;
    47de:	260c      	movs	r6, #12
    47e0:	579e      	ldrsb	r6, [r3, r6]
    uint32_t downLinkCounter = 0;
    47e2:	2200      	movs	r2, #0
    47e4:	920b      	str	r2, [sp, #44]	; 0x2c
    uint32_t address = MacCtx.NvmCtx->DevAddr;
    47e6:	4d20      	ldr	r5, [pc, #128]	; (4868 <LoRaMacProcess+0x344>)
    47e8:	2399      	movs	r3, #153	; 0x99
    47ea:	00db      	lsls	r3, r3, #3
    47ec:	58eb      	ldr	r3, [r5, r3]
    47ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47f0:	469a      	mov	sl, r3
    uint8_t macCmdPayload[2] = { 0 };
    47f2:	ab07      	add	r3, sp, #28
    47f4:	801a      	strh	r2, [r3, #0]
    MacCtx.McpsConfirm.AckReceived = false;
    47f6:	2300      	movs	r3, #0
    47f8:	4930      	ldr	r1, [pc, #192]	; (48bc <LoRaMacProcess+0x398>)
    47fa:	2000      	movs	r0, #0
    47fc:	5468      	strb	r0, [r5, r1]
    MacCtx.McpsIndication.Rssi = rssi;
    47fe:	4930      	ldr	r1, [pc, #192]	; (48c0 <LoRaMacProcess+0x39c>)
    4800:	4648      	mov	r0, r9
    4802:	5268      	strh	r0, [r5, r1]
    MacCtx.McpsIndication.Snr = snr;
    4804:	b2f6      	uxtb	r6, r6
    4806:	492f      	ldr	r1, [pc, #188]	; (48c4 <LoRaMacProcess+0x3a0>)
    4808:	546e      	strb	r6, [r5, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
    480a:	314c      	adds	r1, #76	; 0x4c
    480c:	5c68      	ldrb	r0, [r5, r1]
    480e:	492e      	ldr	r1, [pc, #184]	; (48c8 <LoRaMacProcess+0x3a4>)
    4810:	5468      	strb	r0, [r5, r1]
    MacCtx.McpsIndication.Port = 0;
    4812:	492e      	ldr	r1, [pc, #184]	; (48cc <LoRaMacProcess+0x3a8>)
    4814:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.Multicast = 0;
    4816:	492e      	ldr	r1, [pc, #184]	; (48d0 <LoRaMacProcess+0x3ac>)
    4818:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.FramePending = 0;
    481a:	492e      	ldr	r1, [pc, #184]	; (48d4 <LoRaMacProcess+0x3b0>)
    481c:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.Buffer = NULL;
    481e:	492e      	ldr	r1, [pc, #184]	; (48d8 <LoRaMacProcess+0x3b4>)
    4820:	506a      	str	r2, [r5, r1]
    MacCtx.McpsIndication.BufferSize = 0;
    4822:	3104      	adds	r1, #4
    4824:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.RxData = false;
    4826:	492d      	ldr	r1, [pc, #180]	; (48dc <LoRaMacProcess+0x3b8>)
    4828:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.AckReceived = false;
    482a:	492d      	ldr	r1, [pc, #180]	; (48e0 <LoRaMacProcess+0x3bc>)
    482c:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.DownLinkCounter = 0;
    482e:	3102      	adds	r1, #2
    4830:	506a      	str	r2, [r5, r1]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    4832:	4915      	ldr	r1, [pc, #84]	; (4888 <LoRaMacProcess+0x364>)
    4834:	546b      	strb	r3, [r5, r1]
    MacCtx.McpsIndication.DevAddress = 0;
    4836:	4b2b      	ldr	r3, [pc, #172]	; (48e4 <LoRaMacProcess+0x3c0>)
    4838:	50ea      	str	r2, [r5, r3]
    Radio.Sleep( );
    483a:	4b14      	ldr	r3, [pc, #80]	; (488c <LoRaMacProcess+0x368>)
    483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    483e:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
    4840:	23ec      	movs	r3, #236	; 0xec
    4842:	009b      	lsls	r3, r3, #2
    4844:	18e8      	adds	r0, r5, r3
    4846:	4b28      	ldr	r3, [pc, #160]	; (48e8 <LoRaMacProcess+0x3c4>)
    4848:	4798      	blx	r3
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
    484a:	4641      	mov	r1, r8
    484c:	0038      	movs	r0, r7
    484e:	4b27      	ldr	r3, [pc, #156]	; (48ec <LoRaMacProcess+0x3c8>)
    4850:	4798      	blx	r3
    4852:	2800      	cmp	r0, #0
    4854:	d04e      	beq.n	48f4 <LoRaMacProcess+0x3d0>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
    4856:	4b04      	ldr	r3, [pc, #16]	; (4868 <LoRaMacProcess+0x344>)
    4858:	4a25      	ldr	r2, [pc, #148]	; (48f0 <LoRaMacProcess+0x3cc>)
    485a:	4649      	mov	r1, r9
    485c:	5299      	strh	r1, [r3, r2]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
    485e:	3202      	adds	r2, #2
    4860:	549e      	strb	r6, [r3, r2]
    4862:	e678      	b.n	4556 <LoRaMacProcess+0x32>
    4864:	00000e93 	.word	0x00000e93
    4868:	20000cbc 	.word	0x20000cbc
    486c:	00000e9d 	.word	0x00000e9d
    4870:	00006a7d 	.word	0x00006a7d
    4874:	00000469 	.word	0x00000469
    4878:	00000216 	.word	0x00000216
    487c:	000035c1 	.word	0x000035c1
    4880:	00006d99 	.word	0x00006d99
    4884:	00006a5b 	.word	0x00006a5b
    4888:	0000040c 	.word	0x0000040c
    488c:	0001407c 	.word	0x0001407c
    4890:	0000c23d 	.word	0x0000c23d
    4894:	0000c04d 	.word	0x0000c04d
    4898:	00000217 	.word	0x00000217
    489c:	00008445 	.word	0x00008445
    48a0:	0000043c 	.word	0x0000043c
    48a4:	00002b85 	.word	0x00002b85
    48a8:	20001bac 	.word	0x20001bac
    48ac:	00008465 	.word	0x00008465
    48b0:	00000429 	.word	0x00000429
    48b4:	0000042d 	.word	0x0000042d
    48b8:	20001bb0 	.word	0x20001bb0
    48bc:	0000042c 	.word	0x0000042c
    48c0:	0000041a 	.word	0x0000041a
    48c4:	0000041c 	.word	0x0000041c
    48c8:	0000041d 	.word	0x0000041d
    48cc:	0000040f 	.word	0x0000040f
    48d0:	0000040e 	.word	0x0000040e
    48d4:	00000411 	.word	0x00000411
    48d8:	00000414 	.word	0x00000414
    48dc:	00000419 	.word	0x00000419
    48e0:	0000041e 	.word	0x0000041e
    48e4:	00000424 	.word	0x00000424
    48e8:	0000c1a5 	.word	0x0000c1a5
    48ec:	00006a43 	.word	0x00006a43
    48f0:	0000045e 	.word	0x0000045e
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    48f4:	2399      	movs	r3, #153	; 0x99
    48f6:	00db      	lsls	r3, r3, #3
    48f8:	4ad3      	ldr	r2, [pc, #844]	; (4c48 <LoRaMacProcess+0x724>)
    48fa:	58d2      	ldr	r2, [r2, r3]
    48fc:	23c8      	movs	r3, #200	; 0xc8
    48fe:	5cd3      	ldrb	r3, [r2, r3]
    4900:	2b01      	cmp	r3, #1
    4902:	d046      	beq.n	4992 <LoRaMacProcess+0x46e>
    macHdr.Value = payload[pktHeaderLen++];
    4904:	783d      	ldrb	r5, [r7, #0]
    if( macHdr.Bits.Major != 0 )
    4906:	07ab      	lsls	r3, r5, #30
    4908:	d15f      	bne.n	49ca <LoRaMacProcess+0x4a6>
    switch( macHdr.Bits.MType )
    490a:	096b      	lsrs	r3, r5, #5
    490c:	b2da      	uxtb	r2, r3
    490e:	2a03      	cmp	r2, #3
    4910:	d100      	bne.n	4914 <LoRaMacProcess+0x3f0>
    4912:	e130      	b.n	4b76 <LoRaMacProcess+0x652>
    4914:	d960      	bls.n	49d8 <LoRaMacProcess+0x4b4>
    4916:	b2da      	uxtb	r2, r3
    4918:	2a05      	cmp	r2, #5
    491a:	d100      	bne.n	491e <LoRaMacProcess+0x3fa>
    491c:	e127      	b.n	4b6e <LoRaMacProcess+0x64a>
    491e:	2a07      	cmp	r2, #7
    4920:	d000      	beq.n	4924 <LoRaMacProcess+0x400>
    4922:	e34e      	b.n	4fc2 <LoRaMacProcess+0xa9e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
    4924:	1c79      	adds	r1, r7, #1
    4926:	4dc8      	ldr	r5, [pc, #800]	; (4c48 <LoRaMacProcess+0x724>)
    4928:	2391      	movs	r3, #145	; 0x91
    492a:	009b      	lsls	r3, r3, #2
    492c:	18ee      	adds	r6, r5, r3
    492e:	4642      	mov	r2, r8
    4930:	0030      	movs	r0, r6
    4932:	4bc6      	ldr	r3, [pc, #792]	; (4c4c <LoRaMacProcess+0x728>)
    4934:	4798      	blx	r3
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
    4936:	2203      	movs	r2, #3
    4938:	4bc5      	ldr	r3, [pc, #788]	; (4c50 <LoRaMacProcess+0x72c>)
    493a:	54ea      	strb	r2, [r5, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    493c:	2200      	movs	r2, #0
    493e:	4bc5      	ldr	r3, [pc, #788]	; (4c54 <LoRaMacProcess+0x730>)
    4940:	54ea      	strb	r2, [r5, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
    4942:	4bc5      	ldr	r3, [pc, #788]	; (4c58 <LoRaMacProcess+0x734>)
    4944:	50ee      	str	r6, [r5, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
    4946:	4643      	mov	r3, r8
    4948:	3b01      	subs	r3, #1
    494a:	2283      	movs	r2, #131	; 0x83
    494c:	00d2      	lsls	r2, r2, #3
    494e:	54ab      	strb	r3, [r5, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
    4950:	4ac2      	ldr	r2, [pc, #776]	; (4c5c <LoRaMacProcess+0x738>)
    4952:	5cab      	ldrb	r3, [r5, r2]
    4954:	2102      	movs	r1, #2
    4956:	430b      	orrs	r3, r1
    4958:	54ab      	strb	r3, [r5, r2]
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
    495a:	2399      	movs	r3, #153	; 0x99
    495c:	00db      	lsls	r3, r3, #3
    495e:	4aba      	ldr	r2, [pc, #744]	; (4c48 <LoRaMacProcess+0x724>)
    4960:	58d3      	ldr	r3, [r2, r3]
    4962:	4abf      	ldr	r2, [pc, #764]	; (4c60 <LoRaMacProcess+0x73c>)
    if( nodeAckRequested == false )
    4964:	5c9a      	ldrb	r2, [r3, r2]
    4966:	2a00      	cmp	r2, #0
    4968:	d000      	beq.n	496c <LoRaMacProcess+0x448>
    496a:	e334      	b.n	4fd6 <LoRaMacProcess+0xab2>
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
    496c:	32c8      	adds	r2, #200	; 0xc8
        if( devClass == CLASS_C )
    496e:	5c9b      	ldrb	r3, [r3, r2]
    4970:	2b02      	cmp	r3, #2
    4972:	d100      	bne.n	4976 <LoRaMacProcess+0x452>
    4974:	e32c      	b.n	4fd0 <LoRaMacProcess+0xaac>
    if( MacCtx.AckTimeoutTimer.IsRunning == false )
    4976:	23ff      	movs	r3, #255	; 0xff
    4978:	009b      	lsls	r3, r3, #2
    497a:	4ab3      	ldr	r2, [pc, #716]	; (4c48 <LoRaMacProcess+0x724>)
    497c:	5cd3      	ldrb	r3, [r2, r3]
    497e:	2b00      	cmp	r3, #0
    4980:	d000      	beq.n	4984 <LoRaMacProcess+0x460>
    4982:	e5e8      	b.n	4556 <LoRaMacProcess+0x32>
        MacCtx.MacFlags.Bits.MacDone = 1;
    4984:	0011      	movs	r1, r2
    4986:	4ab5      	ldr	r2, [pc, #724]	; (4c5c <LoRaMacProcess+0x738>)
    4988:	5c8b      	ldrb	r3, [r1, r2]
    498a:	2010      	movs	r0, #16
    498c:	4303      	orrs	r3, r0
    498e:	548b      	strb	r3, [r1, r2]
    4990:	e5e1      	b.n	4556 <LoRaMacProcess+0x32>
        if( LoRaMacClassBIsPingExpected( ) == true )
    4992:	4bb4      	ldr	r3, [pc, #720]	; (4c64 <LoRaMacProcess+0x740>)
    4994:	4798      	blx	r3
    4996:	2800      	cmp	r0, #0
    4998:	d009      	beq.n	49ae <LoRaMacProcess+0x48a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    499a:	2000      	movs	r0, #0
    499c:	4bb2      	ldr	r3, [pc, #712]	; (4c68 <LoRaMacProcess+0x744>)
    499e:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( );
    49a0:	4bb2      	ldr	r3, [pc, #712]	; (4c6c <LoRaMacProcess+0x748>)
    49a2:	4798      	blx	r3
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
    49a4:	2103      	movs	r1, #3
    49a6:	4bb2      	ldr	r3, [pc, #712]	; (4c70 <LoRaMacProcess+0x74c>)
    49a8:	4aa7      	ldr	r2, [pc, #668]	; (4c48 <LoRaMacProcess+0x724>)
    49aa:	54d1      	strb	r1, [r2, r3]
    49ac:	e7aa      	b.n	4904 <LoRaMacProcess+0x3e0>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    49ae:	4bb1      	ldr	r3, [pc, #708]	; (4c74 <LoRaMacProcess+0x750>)
    49b0:	4798      	blx	r3
    49b2:	2800      	cmp	r0, #0
    49b4:	d0a6      	beq.n	4904 <LoRaMacProcess+0x3e0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    49b6:	2000      	movs	r0, #0
    49b8:	4baf      	ldr	r3, [pc, #700]	; (4c78 <LoRaMacProcess+0x754>)
    49ba:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( );
    49bc:	4baf      	ldr	r3, [pc, #700]	; (4c7c <LoRaMacProcess+0x758>)
    49be:	4798      	blx	r3
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
    49c0:	2104      	movs	r1, #4
    49c2:	4bab      	ldr	r3, [pc, #684]	; (4c70 <LoRaMacProcess+0x74c>)
    49c4:	4aa0      	ldr	r2, [pc, #640]	; (4c48 <LoRaMacProcess+0x724>)
    49c6:	54d1      	strb	r1, [r2, r3]
    49c8:	e79c      	b.n	4904 <LoRaMacProcess+0x3e0>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    49ca:	2101      	movs	r1, #1
    49cc:	4ba1      	ldr	r3, [pc, #644]	; (4c54 <LoRaMacProcess+0x730>)
    49ce:	4a9e      	ldr	r2, [pc, #632]	; (4c48 <LoRaMacProcess+0x724>)
    49d0:	54d1      	strb	r1, [r2, r3]
        PrepareRxDoneAbort( );
    49d2:	4bab      	ldr	r3, [pc, #684]	; (4c80 <LoRaMacProcess+0x75c>)
    49d4:	4798      	blx	r3
    49d6:	e5be      	b.n	4556 <LoRaMacProcess+0x32>
    switch( macHdr.Bits.MType )
    49d8:	2a01      	cmp	r2, #1
    49da:	d000      	beq.n	49de <LoRaMacProcess+0x4ba>
    49dc:	e2f1      	b.n	4fc2 <LoRaMacProcess+0xa9e>
            macMsgJoinAccept.Buffer = payload;
    49de:	970e      	str	r7, [sp, #56]	; 0x38
            macMsgJoinAccept.BufSize = size;
    49e0:	4643      	mov	r3, r8
    49e2:	466a      	mov	r2, sp
    49e4:	7513      	strb	r3, [r2, #20]
    49e6:	7d15      	ldrb	r5, [r2, #20]
    49e8:	ab0e      	add	r3, sp, #56	; 0x38
    49ea:	711d      	strb	r5, [r3, #4]
            if( ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) && ( MacCtx.NvmCtx->IsRejoinRequestPending == false ) )
    49ec:	2399      	movs	r3, #153	; 0x99
    49ee:	00db      	lsls	r3, r3, #3
    49f0:	4a95      	ldr	r2, [pc, #596]	; (4c48 <LoRaMacProcess+0x724>)
    49f2:	58d3      	ldr	r3, [r2, r3]
    49f4:	2288      	movs	r2, #136	; 0x88
    49f6:	0092      	lsls	r2, r2, #2
    49f8:	5c9a      	ldrb	r2, [r3, r2]
    49fa:	2a00      	cmp	r2, #0
    49fc:	d005      	beq.n	4a0a <LoRaMacProcess+0x4e6>
    49fe:	228e      	movs	r2, #142	; 0x8e
    4a00:	0092      	lsls	r2, r2, #2
    4a02:	5c9b      	ldrb	r3, [r3, r2]
    4a04:	2b00      	cmp	r3, #0
    4a06:	d100      	bne.n	4a0a <LoRaMacProcess+0x4e6>
    4a08:	e084      	b.n	4b14 <LoRaMacProcess+0x5f0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
    4a0a:	4b8f      	ldr	r3, [pc, #572]	; (4c48 <LoRaMacProcess+0x724>)
    4a0c:	6899      	ldr	r1, [r3, #8]
    4a0e:	aa0e      	add	r2, sp, #56	; 0x38
    4a10:	20ff      	movs	r0, #255	; 0xff
    4a12:	4b9c      	ldr	r3, [pc, #624]	; (4c84 <LoRaMacProcess+0x760>)
    4a14:	4798      	blx	r3
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
    4a16:	2800      	cmp	r0, #0
    4a18:	d000      	beq.n	4a1c <LoRaMacProcess+0x4f8>
    4a1a:	e09d      	b.n	4b58 <LoRaMacProcess+0x634>
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
    4a1c:	4a8a      	ldr	r2, [pc, #552]	; (4c48 <LoRaMacProcess+0x724>)
    4a1e:	2399      	movs	r3, #153	; 0x99
    4a20:	00db      	lsls	r3, r3, #3
    4a22:	58d0      	ldr	r0, [r2, r3]
    4a24:	a90e      	add	r1, sp, #56	; 0x38
    4a26:	7a4e      	ldrb	r6, [r1, #9]
    4a28:	6406      	str	r6, [r0, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
    4a2a:	58d6      	ldr	r6, [r2, r3]
    4a2c:	7a88      	ldrb	r0, [r1, #10]
    4a2e:	0200      	lsls	r0, r0, #8
    4a30:	6c37      	ldr	r7, [r6, #64]	; 0x40
    4a32:	4338      	orrs	r0, r7
    4a34:	6430      	str	r0, [r6, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
    4a36:	58d6      	ldr	r6, [r2, r3]
    4a38:	7ac8      	ldrb	r0, [r1, #11]
    4a3a:	0400      	lsls	r0, r0, #16
    4a3c:	6c37      	ldr	r7, [r6, #64]	; 0x40
    4a3e:	4338      	orrs	r0, r7
    4a40:	6430      	str	r0, [r6, #64]	; 0x40
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
    4a42:	58d0      	ldr	r0, [r2, r3]
    4a44:	9e11      	ldr	r6, [sp, #68]	; 0x44
    4a46:	6446      	str	r6, [r0, #68]	; 0x44
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
    4a48:	7c08      	ldrb	r0, [r1, #16]
    4a4a:	0640      	lsls	r0, r0, #25
    4a4c:	0f40      	lsrs	r0, r0, #29
    4a4e:	26f5      	movs	r6, #245	; 0xf5
    4a50:	58d7      	ldr	r7, [r2, r3]
    4a52:	55b8      	strb	r0, [r7, r6]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
    4a54:	7c08      	ldrb	r0, [r1, #16]
    4a56:	0700      	lsls	r0, r0, #28
    4a58:	0f00      	lsrs	r0, r0, #28
    4a5a:	3607      	adds	r6, #7
    4a5c:	58d7      	ldr	r7, [r2, r3]
    4a5e:	55b8      	strb	r0, [r7, r6]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
    4a60:	20e4      	movs	r0, #228	; 0xe4
    4a62:	7c49      	ldrb	r1, [r1, #17]
    4a64:	58d6      	ldr	r6, [r2, r3]
    4a66:	5031      	str	r1, [r6, r0]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
    4a68:	58d3      	ldr	r3, [r2, r3]
    4a6a:	581a      	ldr	r2, [r3, r0]
    4a6c:	2a00      	cmp	r2, #0
    4a6e:	d102      	bne.n	4a76 <LoRaMacProcess+0x552>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
    4a70:	2101      	movs	r1, #1
    4a72:	32e4      	adds	r2, #228	; 0xe4
    4a74:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
    4a76:	4874      	ldr	r0, [pc, #464]	; (4c48 <LoRaMacProcess+0x724>)
    4a78:	2199      	movs	r1, #153	; 0x99
    4a7a:	00c9      	lsls	r1, r1, #3
    4a7c:	5846      	ldr	r6, [r0, r1]
    4a7e:	23e4      	movs	r3, #228	; 0xe4
    4a80:	22fa      	movs	r2, #250	; 0xfa
    4a82:	0092      	lsls	r2, r2, #2
    4a84:	58f7      	ldr	r7, [r6, r3]
    4a86:	437a      	muls	r2, r7
    4a88:	50f2      	str	r2, [r6, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    4a8a:	5842      	ldr	r2, [r0, r1]
    4a8c:	58d3      	ldr	r3, [r2, r3]
    4a8e:	39e0      	subs	r1, #224	; 0xe0
    4a90:	468c      	mov	ip, r1
    4a92:	4463      	add	r3, ip
    4a94:	21e8      	movs	r1, #232	; 0xe8
    4a96:	5053      	str	r3, [r2, r1]
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
    4a98:	ab0e      	add	r3, sp, #56	; 0x38
    4a9a:	7c1b      	ldrb	r3, [r3, #16]
    4a9c:	2b7f      	cmp	r3, #127	; 0x7f
    4a9e:	d840      	bhi.n	4b22 <LoRaMacProcess+0x5fe>
                    MacCtx.NvmCtx->Version.Fields.Minor = 0;
    4aa0:	2399      	movs	r3, #153	; 0x99
    4aa2:	00db      	lsls	r3, r3, #3
    4aa4:	58c2      	ldr	r2, [r0, r3]
    4aa6:	2100      	movs	r1, #0
    4aa8:	4b77      	ldr	r3, [pc, #476]	; (4c88 <LoRaMacProcess+0x764>)
    4aaa:	54d1      	strb	r1, [r2, r3]
                applyCFList.Payload = macMsgJoinAccept.CFList;
    4aac:	a90c      	add	r1, sp, #48	; 0x30
    4aae:	2342      	movs	r3, #66	; 0x42
    4ab0:	aa02      	add	r2, sp, #8
    4ab2:	4694      	mov	ip, r2
    4ab4:	4463      	add	r3, ip
    4ab6:	930c      	str	r3, [sp, #48]	; 0x30
                applyCFList.Size = size - 17;
    4ab8:	3d11      	subs	r5, #17
    4aba:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
    4abc:	4e62      	ldr	r6, [pc, #392]	; (4c48 <LoRaMacProcess+0x724>)
    4abe:	2599      	movs	r5, #153	; 0x99
    4ac0:	00ed      	lsls	r5, r5, #3
    4ac2:	5973      	ldr	r3, [r6, r5]
    4ac4:	7818      	ldrb	r0, [r3, #0]
    4ac6:	4b71      	ldr	r3, [pc, #452]	; (4c8c <LoRaMacProcess+0x768>)
    4ac8:	4798      	blx	r3
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
    4aca:	2202      	movs	r2, #2
    4acc:	2388      	movs	r3, #136	; 0x88
    4ace:	009b      	lsls	r3, r3, #2
    4ad0:	5971      	ldr	r1, [r6, r5]
    4ad2:	54ca      	strb	r2, [r1, r3]
                if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    4ad4:	5973      	ldr	r3, [r6, r5]
    4ad6:	4a6c      	ldr	r2, [pc, #432]	; (4c88 <LoRaMacProcess+0x764>)
    4ad8:	5c9a      	ldrb	r2, [r3, r2]
    4ada:	2a00      	cmp	r2, #0
    4adc:	d129      	bne.n	4b32 <LoRaMacProcess+0x60e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    4ade:	2000      	movs	r0, #0
    4ae0:	4b6b      	ldr	r3, [pc, #428]	; (4c90 <LoRaMacProcess+0x76c>)
    4ae2:	4798      	blx	r3
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d132      	bne.n	4b4e <LoRaMacProcess+0x62a>
                if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    4ae8:	2399      	movs	r3, #153	; 0x99
    4aea:	00db      	lsls	r3, r3, #3
    4aec:	4a56      	ldr	r2, [pc, #344]	; (4c48 <LoRaMacProcess+0x724>)
    4aee:	58d3      	ldr	r3, [r2, r3]
    4af0:	228e      	movs	r2, #142	; 0x8e
    4af2:	0092      	lsls	r2, r2, #2
    4af4:	5c9a      	ldrb	r2, [r3, r2]
    4af6:	2a00      	cmp	r2, #0
    4af8:	d100      	bne.n	4afc <LoRaMacProcess+0x5d8>
    4afa:	e72e      	b.n	495a <LoRaMacProcess+0x436>
                    MacCtx.NvmCtx->IsRejoinRequestPending = false;
    4afc:	2100      	movs	r1, #0
    4afe:	228e      	movs	r2, #142	; 0x8e
    4b00:	0092      	lsls	r2, r2, #2
    4b02:	5499      	strb	r1, [r3, r2]
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    4b04:	4850      	ldr	r0, [pc, #320]	; (4c48 <LoRaMacProcess+0x724>)
    4b06:	2395      	movs	r3, #149	; 0x95
    4b08:	00db      	lsls	r3, r3, #3
    4b0a:	469c      	mov	ip, r3
    4b0c:	4460      	add	r0, ip
    4b0e:	4b61      	ldr	r3, [pc, #388]	; (4c94 <LoRaMacProcess+0x770>)
    4b10:	4798      	blx	r3
    4b12:	e722      	b.n	495a <LoRaMacProcess+0x436>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4b14:	2101      	movs	r1, #1
    4b16:	4b4f      	ldr	r3, [pc, #316]	; (4c54 <LoRaMacProcess+0x730>)
    4b18:	4a4b      	ldr	r2, [pc, #300]	; (4c48 <LoRaMacProcess+0x724>)
    4b1a:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4b1c:	4b58      	ldr	r3, [pc, #352]	; (4c80 <LoRaMacProcess+0x75c>)
    4b1e:	4798      	blx	r3
    4b20:	e519      	b.n	4556 <LoRaMacProcess+0x32>
                    MacCtx.NvmCtx->Version.Fields.Minor = 1;
    4b22:	2399      	movs	r3, #153	; 0x99
    4b24:	00db      	lsls	r3, r3, #3
    4b26:	4a48      	ldr	r2, [pc, #288]	; (4c48 <LoRaMacProcess+0x724>)
    4b28:	58d2      	ldr	r2, [r2, r3]
    4b2a:	2101      	movs	r1, #1
    4b2c:	4b56      	ldr	r3, [pc, #344]	; (4c88 <LoRaMacProcess+0x764>)
    4b2e:	54d1      	strb	r1, [r2, r3]
    4b30:	e7bc      	b.n	4aac <LoRaMacProcess+0x588>
                    MacCtx.NvmCtx->RekeyIndUplinksCounter = 0;
    4b32:	2100      	movs	r1, #0
    4b34:	4a58      	ldr	r2, [pc, #352]	; (4c98 <LoRaMacProcess+0x774>)
    4b36:	5299      	strh	r1, [r3, r2]
                    macCmdPayload[0] = MacCtx.NvmCtx->Version.Fields.Minor;
    4b38:	a907      	add	r1, sp, #28
    4b3a:	4a43      	ldr	r2, [pc, #268]	; (4c48 <LoRaMacProcess+0x724>)
    4b3c:	5952      	ldr	r2, [r2, r5]
    4b3e:	4b52      	ldr	r3, [pc, #328]	; (4c88 <LoRaMacProcess+0x764>)
    4b40:	5cd3      	ldrb	r3, [r2, r3]
    4b42:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
    4b44:	2201      	movs	r2, #1
    4b46:	200b      	movs	r0, #11
    4b48:	4b54      	ldr	r3, [pc, #336]	; (4c9c <LoRaMacProcess+0x778>)
    4b4a:	4798      	blx	r3
    4b4c:	e7c7      	b.n	4ade <LoRaMacProcess+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
    4b4e:	2100      	movs	r1, #0
    4b50:	2000      	movs	r0, #0
    4b52:	4b53      	ldr	r3, [pc, #332]	; (4ca0 <LoRaMacProcess+0x77c>)
    4b54:	4798      	blx	r3
    4b56:	e7c7      	b.n	4ae8 <LoRaMacProcess+0x5c4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    4b58:	2000      	movs	r0, #0
    4b5a:	4b4d      	ldr	r3, [pc, #308]	; (4c90 <LoRaMacProcess+0x76c>)
    4b5c:	4798      	blx	r3
    4b5e:	2800      	cmp	r0, #0
    4b60:	d100      	bne.n	4b64 <LoRaMacProcess+0x640>
    4b62:	e6fa      	b.n	495a <LoRaMacProcess+0x436>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
    4b64:	2100      	movs	r1, #0
    4b66:	2007      	movs	r0, #7
    4b68:	4b4d      	ldr	r3, [pc, #308]	; (4ca0 <LoRaMacProcess+0x77c>)
    4b6a:	4798      	blx	r3
    4b6c:	e6f5      	b.n	495a <LoRaMacProcess+0x436>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    4b6e:	2101      	movs	r1, #1
    4b70:	4b37      	ldr	r3, [pc, #220]	; (4c50 <LoRaMacProcess+0x72c>)
    4b72:	4a35      	ldr	r2, [pc, #212]	; (4c48 <LoRaMacProcess+0x724>)
    4b74:	54d1      	strb	r1, [r2, r3]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    4b76:	4934      	ldr	r1, [pc, #208]	; (4c48 <LoRaMacProcess+0x724>)
    4b78:	2399      	movs	r3, #153	; 0x99
    4b7a:	00db      	lsls	r3, r3, #3
    4b7c:	58cb      	ldr	r3, [r1, r3]
    4b7e:	aa09      	add	r2, sp, #36	; 0x24
    4b80:	2002      	movs	r0, #2
    4b82:	30ff      	adds	r0, #255	; 0xff
    4b84:	5c18      	ldrb	r0, [r3, r0]
    4b86:	7090      	strb	r0, [r2, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
    4b88:	2082      	movs	r0, #130	; 0x82
    4b8a:	00c0      	lsls	r0, r0, #3
    4b8c:	5c09      	ldrb	r1, [r1, r0]
    4b8e:	7051      	strb	r1, [r2, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
    4b90:	210c      	movs	r1, #12
    4b92:	7011      	strb	r1, [r2, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
    4b94:	2216      	movs	r2, #22
    4b96:	32ff      	adds	r2, #255	; 0xff
    4b98:	5c9a      	ldrb	r2, [r3, r2]
    4b9a:	2a00      	cmp	r2, #0
    4b9c:	d002      	beq.n	4ba4 <LoRaMacProcess+0x680>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    4b9e:	3101      	adds	r1, #1
    4ba0:	aa09      	add	r2, sp, #36	; 0x24
    4ba2:	7011      	strb	r1, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    4ba4:	7818      	ldrb	r0, [r3, #0]
    4ba6:	a909      	add	r1, sp, #36	; 0x24
    4ba8:	4b3e      	ldr	r3, [pc, #248]	; (4ca4 <LoRaMacProcess+0x780>)
    4baa:	4798      	blx	r3
    4bac:	900a      	str	r0, [sp, #40]	; 0x28
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
    4bae:	4642      	mov	r2, r8
    4bb0:	3a0d      	subs	r2, #13
    4bb2:	1c13      	adds	r3, r2, #0
    4bb4:	0412      	lsls	r2, r2, #16
    4bb6:	d40c      	bmi.n	4bd2 <LoRaMacProcess+0x6ae>
    4bb8:	b21b      	sxth	r3, r3
    4bba:	aa02      	add	r2, sp, #8
    4bbc:	2120      	movs	r1, #32
    4bbe:	5e52      	ldrsh	r2, [r2, r1]
    4bc0:	4293      	cmp	r3, r2
    4bc2:	dd08      	ble.n	4bd6 <LoRaMacProcess+0x6b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4bc4:	2101      	movs	r1, #1
    4bc6:	4b23      	ldr	r3, [pc, #140]	; (4c54 <LoRaMacProcess+0x730>)
    4bc8:	4a1f      	ldr	r2, [pc, #124]	; (4c48 <LoRaMacProcess+0x724>)
    4bca:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4bcc:	4b2c      	ldr	r3, [pc, #176]	; (4c80 <LoRaMacProcess+0x75c>)
    4bce:	4798      	blx	r3
    4bd0:	e4c1      	b.n	4556 <LoRaMacProcess+0x32>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
    4bd2:	2300      	movs	r3, #0
    4bd4:	e7f0      	b.n	4bb8 <LoRaMacProcess+0x694>
            macMsgData.Buffer = payload;
    4bd6:	a818      	add	r0, sp, #96	; 0x60
    4bd8:	9718      	str	r7, [sp, #96]	; 0x60
            macMsgData.BufSize = size;
    4bda:	4643      	mov	r3, r8
    4bdc:	7103      	strb	r3, [r0, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
    4bde:	4b1a      	ldr	r3, [pc, #104]	; (4c48 <LoRaMacProcess+0x724>)
    4be0:	2291      	movs	r2, #145	; 0x91
    4be2:	0092      	lsls	r2, r2, #2
    4be4:	4694      	mov	ip, r2
    4be6:	4463      	add	r3, ip
    4be8:	6243      	str	r3, [r0, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
    4bea:	3a46      	subs	r2, #70	; 0x46
    4bec:	3aff      	subs	r2, #255	; 0xff
    4bee:	2328      	movs	r3, #40	; 0x28
    4bf0:	54c2      	strb	r2, [r0, r3]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
    4bf2:	4b2d      	ldr	r3, [pc, #180]	; (4ca8 <LoRaMacProcess+0x784>)
    4bf4:	4798      	blx	r3
    4bf6:	2800      	cmp	r0, #0
    4bf8:	d006      	beq.n	4c08 <LoRaMacProcess+0x6e4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4bfa:	2101      	movs	r1, #1
    4bfc:	4b15      	ldr	r3, [pc, #84]	; (4c54 <LoRaMacProcess+0x730>)
    4bfe:	4a12      	ldr	r2, [pc, #72]	; (4c48 <LoRaMacProcess+0x724>)
    4c00:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4c02:	4b1f      	ldr	r3, [pc, #124]	; (4c80 <LoRaMacProcess+0x75c>)
    4c04:	4798      	blx	r3
    4c06:	e4a6      	b.n	4556 <LoRaMacProcess+0x32>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
    4c08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4c0a:	9305      	str	r3, [sp, #20]
    4c0c:	4b27      	ldr	r3, [pc, #156]	; (4cac <LoRaMacProcess+0x788>)
    4c0e:	4a0e      	ldr	r2, [pc, #56]	; (4c48 <LoRaMacProcess+0x724>)
    4c10:	9905      	ldr	r1, [sp, #20]
    4c12:	50d1      	str	r1, [r2, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
    4c14:	a90e      	add	r1, sp, #56	; 0x38
    4c16:	a818      	add	r0, sp, #96	; 0x60
    4c18:	4b25      	ldr	r3, [pc, #148]	; (4cb0 <LoRaMacProcess+0x78c>)
    4c1a:	4798      	blx	r3
    4c1c:	2800      	cmp	r0, #0
    4c1e:	d10b      	bne.n	4c38 <LoRaMacProcess+0x714>
            downLinkCounter = 0;
    4c20:	2300      	movs	r3, #0
    4c22:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    4c24:	2399      	movs	r3, #153	; 0x99
    4c26:	00db      	lsls	r3, r3, #3
    4c28:	4a07      	ldr	r2, [pc, #28]	; (4c48 <LoRaMacProcess+0x724>)
    4c2a:	58d3      	ldr	r3, [r2, r3]
    4c2c:	469c      	mov	ip, r3
    4c2e:	981a      	ldr	r0, [sp, #104]	; 0x68
    4c30:	001a      	movs	r2, r3
    4c32:	324c      	adds	r2, #76	; 0x4c
    4c34:	2300      	movs	r3, #0
    4c36:	e041      	b.n	4cbc <LoRaMacProcess+0x798>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4c38:	2101      	movs	r1, #1
    4c3a:	4b06      	ldr	r3, [pc, #24]	; (4c54 <LoRaMacProcess+0x730>)
    4c3c:	4a02      	ldr	r2, [pc, #8]	; (4c48 <LoRaMacProcess+0x724>)
    4c3e:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4c40:	4b0f      	ldr	r3, [pc, #60]	; (4c80 <LoRaMacProcess+0x75c>)
    4c42:	4798      	blx	r3
    4c44:	e487      	b.n	4556 <LoRaMacProcess+0x32>
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	20000cbc 	.word	0x20000cbc
    4c4c:	00001e91 	.word	0x00001e91
    4c50:	0000040c 	.word	0x0000040c
    4c54:	0000040d 	.word	0x0000040d
    4c58:	00000414 	.word	0x00000414
    4c5c:	00000469 	.word	0x00000469
    4c60:	00000217 	.word	0x00000217
    4c64:	00006a4b 	.word	0x00006a4b
    4c68:	00006a35 	.word	0x00006a35
    4c6c:	00006a3f 	.word	0x00006a3f
    4c70:	0000041d 	.word	0x0000041d
    4c74:	00006a4f 	.word	0x00006a4f
    4c78:	00006a37 	.word	0x00006a37
    4c7c:	00006a41 	.word	0x00006a41
    4c80:	00002979 	.word	0x00002979
    4c84:	000078fd 	.word	0x000078fd
    4c88:	0000021e 	.word	0x0000021e
    4c8c:	000084c1 	.word	0x000084c1
    4c90:	00006fc1 	.word	0x00006fc1
    4c94:	0000c1a5 	.word	0x0000c1a5
    4c98:	0000023a 	.word	0x0000023a
    4c9c:	00006b59 	.word	0x00006b59
    4ca0:	00006edd 	.word	0x00006edd
    4ca4:	00008445 	.word	0x00008445
    4ca8:	00008135 	.word	0x00008135
    4cac:	00000424 	.word	0x00000424
    4cb0:	000044cd 	.word	0x000044cd
    4cb4:	3301      	adds	r3, #1
    4cb6:	3220      	adds	r2, #32
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    4cb8:	2b04      	cmp	r3, #4
    4cba:	d013      	beq.n	4ce4 <LoRaMacProcess+0x7c0>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    4cbc:	9305      	str	r3, [sp, #20]
    4cbe:	6811      	ldr	r1, [r2, #0]
    4cc0:	4281      	cmp	r1, r0
    4cc2:	d1f7      	bne.n	4cb4 <LoRaMacProcess+0x790>
    4cc4:	7a17      	ldrb	r7, [r2, #8]
    4cc6:	2f00      	cmp	r7, #0
    4cc8:	d0f4      	beq.n	4cb4 <LoRaMacProcess+0x790>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
    4cca:	0158      	lsls	r0, r3, #5
    4ccc:	4460      	add	r0, ip
    4cce:	0003      	movs	r3, r0
    4cd0:	3348      	adds	r3, #72	; 0x48
    4cd2:	781b      	ldrb	r3, [r3, #0]
    4cd4:	9305      	str	r3, [sp, #20]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
    4cd6:	6d03      	ldr	r3, [r0, #80]	; 0x50
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    4cdc:	468a      	mov	sl, r1
                    multicast = 1;
    4cde:	2301      	movs	r3, #1
    4ce0:	4699      	mov	r9, r3
    4ce2:	e002      	b.n	4cea <LoRaMacProcess+0x7c6>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
    4ce4:	9305      	str	r3, [sp, #20]
            multicast = 0;
    4ce6:	2300      	movs	r3, #0
    4ce8:	4699      	mov	r9, r3
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
    4cea:	a909      	add	r1, sp, #36	; 0x24
    4cec:	2314      	movs	r3, #20
    4cee:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    4cf0:	4663      	mov	r3, ip
    4cf2:	7818      	ldrb	r0, [r3, #0]
    4cf4:	4bda      	ldr	r3, [pc, #872]	; (5060 <LoRaMacProcess+0xb3c>)
    4cf6:	4798      	blx	r3
    4cf8:	900a      	str	r0, [sp, #40]	; 0x28
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
    4cfa:	2399      	movs	r3, #153	; 0x99
    4cfc:	00db      	lsls	r3, r3, #3
    4cfe:	4ad9      	ldr	r2, [pc, #868]	; (5064 <LoRaMacProcess+0xb40>)
    4d00:	58d2      	ldr	r2, [r2, r3]
    4d02:	2387      	movs	r3, #135	; 0x87
    4d04:	009b      	lsls	r3, r3, #2
    4d06:	58d3      	ldr	r3, [r2, r3]
    4d08:	aa0e      	add	r2, sp, #56	; 0x38
    4d0a:	7811      	ldrb	r1, [r2, #0]
    4d0c:	aa0b      	add	r2, sp, #44	; 0x2c
    4d0e:	9202      	str	r2, [sp, #8]
    4d10:	2213      	movs	r2, #19
    4d12:	af02      	add	r7, sp, #8
    4d14:	46bc      	mov	ip, r7
    4d16:	4462      	add	r2, ip
    4d18:	9201      	str	r2, [sp, #4]
    4d1a:	b280      	uxth	r0, r0
    4d1c:	9000      	str	r0, [sp, #0]
    4d1e:	aa18      	add	r2, sp, #96	; 0x60
    4d20:	9805      	ldr	r0, [sp, #20]
    4d22:	4fd1      	ldr	r7, [pc, #836]	; (5068 <LoRaMacProcess+0xb44>)
    4d24:	47b8      	blx	r7
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
    4d26:	2800      	cmp	r0, #0
    4d28:	d02e      	beq.n	4d88 <LoRaMacProcess+0x864>
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
    4d2a:	2801      	cmp	r0, #1
    4d2c:	d00e      	beq.n	4d4c <LoRaMacProcess+0x828>
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
    4d2e:	2802      	cmp	r0, #2
    4d30:	d025      	beq.n	4d7e <LoRaMacProcess+0x85a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4d32:	2101      	movs	r1, #1
    4d34:	4bcd      	ldr	r3, [pc, #820]	; (506c <LoRaMacProcess+0xb48>)
    4d36:	4acb      	ldr	r2, [pc, #812]	; (5064 <LoRaMacProcess+0xb40>)
    4d38:	54d1      	strb	r1, [r2, r3]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    4d3a:	2384      	movs	r3, #132	; 0x84
    4d3c:	00db      	lsls	r3, r3, #3
    4d3e:	4ac9      	ldr	r2, [pc, #804]	; (5064 <LoRaMacProcess+0xb40>)
    4d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4d42:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4d44:	4bca      	ldr	r3, [pc, #808]	; (5070 <LoRaMacProcess+0xb4c>)
    4d46:	4798      	blx	r3
    4d48:	f7ff fc05 	bl	4556 <LoRaMacProcess+0x32>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
    4d4c:	4bc5      	ldr	r3, [pc, #788]	; (5064 <LoRaMacProcess+0xb40>)
    4d4e:	2108      	movs	r1, #8
    4d50:	4ac6      	ldr	r2, [pc, #792]	; (506c <LoRaMacProcess+0xb48>)
    4d52:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
    4d54:	32bb      	adds	r2, #187	; 0xbb
    4d56:	589b      	ldr	r3, [r3, r2]
    4d58:	4ac6      	ldr	r2, [pc, #792]	; (5074 <LoRaMacProcess+0xb50>)
    4d5a:	5c9a      	ldrb	r2, [r3, r2]
    4d5c:	2a00      	cmp	r2, #0
    4d5e:	d1ec      	bne.n	4d3a <LoRaMacProcess+0x816>
    4d60:	321f      	adds	r2, #31
    4d62:	4395      	bics	r5, r2
    4d64:	2da0      	cmp	r5, #160	; 0xa0
    4d66:	d1e8      	bne.n	4d3a <LoRaMacProcess+0x816>
    4d68:	228f      	movs	r2, #143	; 0x8f
    4d6a:	0092      	lsls	r2, r2, #2
    4d6c:	589a      	ldr	r2, [r3, r2]
    4d6e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    4d70:	428a      	cmp	r2, r1
    4d72:	d1e2      	bne.n	4d3a <LoRaMacProcess+0x816>
                        MacCtx.NvmCtx->SrvAckRequested = true;
    4d74:	2101      	movs	r1, #1
    4d76:	2286      	movs	r2, #134	; 0x86
    4d78:	0092      	lsls	r2, r2, #2
    4d7a:	5499      	strb	r1, [r3, r2]
    4d7c:	e7dd      	b.n	4d3a <LoRaMacProcess+0x816>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
    4d7e:	210a      	movs	r1, #10
    4d80:	4bba      	ldr	r3, [pc, #744]	; (506c <LoRaMacProcess+0xb48>)
    4d82:	4ab8      	ldr	r2, [pc, #736]	; (5064 <LoRaMacProcess+0xb40>)
    4d84:	54d1      	strb	r1, [r2, r3]
    4d86:	e7d8      	b.n	4d3a <LoRaMacProcess+0x816>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
    4d88:	2313      	movs	r3, #19
    4d8a:	aa02      	add	r2, sp, #8
    4d8c:	4694      	mov	ip, r2
    4d8e:	4463      	add	r3, ip
    4d90:	781a      	ldrb	r2, [r3, #0]
    4d92:	ab18      	add	r3, sp, #96	; 0x60
    4d94:	9300      	str	r3, [sp, #0]
    4d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d98:	4651      	mov	r1, sl
    4d9a:	9805      	ldr	r0, [sp, #20]
    4d9c:	4fb6      	ldr	r7, [pc, #728]	; (5078 <LoRaMacProcess+0xb54>)
    4d9e:	47b8      	blx	r7
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
    4da0:	2800      	cmp	r0, #0
    4da2:	d017      	beq.n	4dd4 <LoRaMacProcess+0x8b0>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
    4da4:	2802      	cmp	r0, #2
    4da6:	d10d      	bne.n	4dc4 <LoRaMacProcess+0x8a0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
    4da8:	4bae      	ldr	r3, [pc, #696]	; (5064 <LoRaMacProcess+0xb40>)
    4daa:	210b      	movs	r1, #11
    4dac:	4aaf      	ldr	r2, [pc, #700]	; (506c <LoRaMacProcess+0xb48>)
    4dae:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
    4db0:	4ab2      	ldr	r2, [pc, #712]	; (507c <LoRaMacProcess+0xb58>)
    4db2:	5c9b      	ldrb	r3, [r3, r2]
    4db4:	2b02      	cmp	r3, #2
    4db6:	d101      	bne.n	4dbc <LoRaMacProcess+0x898>
    4db8:	f7ff fbcd 	bl	4556 <LoRaMacProcess+0x32>
                        PrepareRxDoneAbort( );
    4dbc:	4bac      	ldr	r3, [pc, #688]	; (5070 <LoRaMacProcess+0xb4c>)
    4dbe:	4798      	blx	r3
    4dc0:	f7ff fbc9 	bl	4556 <LoRaMacProcess+0x32>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
    4dc4:	210c      	movs	r1, #12
    4dc6:	4ba9      	ldr	r3, [pc, #676]	; (506c <LoRaMacProcess+0xb48>)
    4dc8:	4aa6      	ldr	r2, [pc, #664]	; (5064 <LoRaMacProcess+0xb40>)
    4dca:	54d1      	strb	r1, [r2, r3]
                    PrepareRxDoneAbort( );
    4dcc:	4ba8      	ldr	r3, [pc, #672]	; (5070 <LoRaMacProcess+0xb4c>)
    4dce:	4798      	blx	r3
    4dd0:	f7ff fbc1 	bl	4556 <LoRaMacProcess+0x32>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    4dd4:	4ba3      	ldr	r3, [pc, #652]	; (5064 <LoRaMacProcess+0xb40>)
    4dd6:	2100      	movs	r1, #0
    4dd8:	4aa4      	ldr	r2, [pc, #656]	; (506c <LoRaMacProcess+0xb48>)
    4dda:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
    4ddc:	4aa8      	ldr	r2, [pc, #672]	; (5080 <LoRaMacProcess+0xb5c>)
    4dde:	4648      	mov	r0, r9
    4de0:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
    4de2:	aa18      	add	r2, sp, #96	; 0x60
    4de4:	7b12      	ldrb	r2, [r2, #12]
    4de6:	06d0      	lsls	r0, r2, #27
    4de8:	0fc0      	lsrs	r0, r0, #31
    4dea:	4fa6      	ldr	r7, [pc, #664]	; (5084 <LoRaMacProcess+0xb60>)
    4dec:	55d8      	strb	r0, [r3, r7]
            MacCtx.McpsIndication.Buffer = NULL;
    4dee:	48a6      	ldr	r0, [pc, #664]	; (5088 <LoRaMacProcess+0xb64>)
    4df0:	5019      	str	r1, [r3, r0]
            MacCtx.McpsIndication.BufferSize = 0;
    4df2:	3004      	adds	r0, #4
    4df4:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    4df6:	3008      	adds	r0, #8
    4df8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4dfa:	501f      	str	r7, [r3, r0]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    4dfc:	0692      	lsls	r2, r2, #26
    4dfe:	0fd2      	lsrs	r2, r2, #31
    4e00:	48a2      	ldr	r0, [pc, #648]	; (508c <LoRaMacProcess+0xb68>)
    4e02:	541a      	strb	r2, [r3, r0]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    4e04:	48a2      	ldr	r0, [pc, #648]	; (5090 <LoRaMacProcess+0xb6c>)
    4e06:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    4e08:	48a2      	ldr	r0, [pc, #648]	; (5094 <LoRaMacProcess+0xb70>)
    4e0a:	541a      	strb	r2, [r3, r0]
            MacCtx.NvmCtx->AdrAckCounter = 0;
    4e0c:	2299      	movs	r2, #153	; 0x99
    4e0e:	00d2      	lsls	r2, r2, #3
    4e10:	589a      	ldr	r2, [r3, r2]
    4e12:	23cc      	movs	r3, #204	; 0xcc
    4e14:	50d1      	str	r1, [r2, r3]
            if( multicast == 1 )
    4e16:	464b      	mov	r3, r9
    4e18:	2b01      	cmp	r3, #1
    4e1a:	d01f      	beq.n	4e5c <LoRaMacProcess+0x938>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
    4e1c:	231f      	movs	r3, #31
    4e1e:	439d      	bics	r5, r3
    4e20:	2da0      	cmp	r5, #160	; 0xa0
    4e22:	d020      	beq.n	4e66 <LoRaMacProcess+0x942>
                    MacCtx.NvmCtx->SrvAckRequested = false;
    4e24:	4b8f      	ldr	r3, [pc, #572]	; (5064 <LoRaMacProcess+0xb40>)
    4e26:	2299      	movs	r2, #153	; 0x99
    4e28:	00d2      	lsls	r2, r2, #3
    4e2a:	5898      	ldr	r0, [r3, r2]
    4e2c:	2200      	movs	r2, #0
    4e2e:	2186      	movs	r1, #134	; 0x86
    4e30:	0089      	lsls	r1, r1, #2
    4e32:	5442      	strb	r2, [r0, r1]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    4e34:	4998      	ldr	r1, [pc, #608]	; (5098 <LoRaMacProcess+0xb74>)
    4e36:	545a      	strb	r2, [r3, r1]
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
    4e38:	2313      	movs	r3, #19
    4e3a:	aa02      	add	r2, sp, #8
    4e3c:	4694      	mov	ip, r2
    4e3e:	4463      	add	r3, ip
    4e40:	7818      	ldrb	r0, [r3, #0]
    4e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4e44:	4b95      	ldr	r3, [pc, #596]	; (509c <LoRaMacProcess+0xb78>)
    4e46:	4798      	blx	r3
    4e48:	2800      	cmp	r0, #0
    4e4a:	d022      	beq.n	4e92 <LoRaMacProcess+0x96e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4e4c:	2101      	movs	r1, #1
    4e4e:	4b87      	ldr	r3, [pc, #540]	; (506c <LoRaMacProcess+0xb48>)
    4e50:	4a84      	ldr	r2, [pc, #528]	; (5064 <LoRaMacProcess+0xb40>)
    4e52:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
    4e54:	4b86      	ldr	r3, [pc, #536]	; (5070 <LoRaMacProcess+0xb4c>)
    4e56:	4798      	blx	r3
    4e58:	f7ff fb7d 	bl	4556 <LoRaMacProcess+0x32>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
    4e5c:	3102      	adds	r1, #2
    4e5e:	4b8e      	ldr	r3, [pc, #568]	; (5098 <LoRaMacProcess+0xb74>)
    4e60:	4a80      	ldr	r2, [pc, #512]	; (5064 <LoRaMacProcess+0xb40>)
    4e62:	54d1      	strb	r1, [r2, r3]
    4e64:	e7e8      	b.n	4e38 <LoRaMacProcess+0x914>
                    MacCtx.NvmCtx->SrvAckRequested = true;
    4e66:	4a7f      	ldr	r2, [pc, #508]	; (5064 <LoRaMacProcess+0xb40>)
    4e68:	2399      	movs	r3, #153	; 0x99
    4e6a:	00db      	lsls	r3, r3, #3
    4e6c:	2001      	movs	r0, #1
    4e6e:	2186      	movs	r1, #134	; 0x86
    4e70:	0089      	lsls	r1, r1, #2
    4e72:	58d5      	ldr	r5, [r2, r3]
    4e74:	5468      	strb	r0, [r5, r1]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
    4e76:	58d3      	ldr	r3, [r2, r3]
    4e78:	4a7e      	ldr	r2, [pc, #504]	; (5074 <LoRaMacProcess+0xb50>)
    4e7a:	5c9a      	ldrb	r2, [r3, r2]
    4e7c:	2a00      	cmp	r2, #0
    4e7e:	d103      	bne.n	4e88 <LoRaMacProcess+0x964>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
    4e80:	228f      	movs	r2, #143	; 0x8f
    4e82:	0092      	lsls	r2, r2, #2
    4e84:	9923      	ldr	r1, [sp, #140]	; 0x8c
    4e86:	5099      	str	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    4e88:	2101      	movs	r1, #1
    4e8a:	4b83      	ldr	r3, [pc, #524]	; (5098 <LoRaMacProcess+0xb74>)
    4e8c:	4a75      	ldr	r2, [pc, #468]	; (5064 <LoRaMacProcess+0xb40>)
    4e8e:	54d1      	strb	r1, [r2, r3]
    4e90:	e7d2      	b.n	4e38 <LoRaMacProcess+0x914>
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
    4e92:	4b74      	ldr	r3, [pc, #464]	; (5064 <LoRaMacProcess+0xb40>)
    4e94:	4a79      	ldr	r2, [pc, #484]	; (507c <LoRaMacProcess+0xb58>)
    4e96:	5c99      	ldrb	r1, [r3, r2]
    4e98:	320b      	adds	r2, #11
    4e9a:	5c9a      	ldrb	r2, [r3, r2]
    4e9c:	ab18      	add	r3, sp, #96	; 0x60
    4e9e:	7b1b      	ldrb	r3, [r3, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
    4ea0:	2901      	cmp	r1, #1
    4ea2:	d910      	bls.n	4ec6 <LoRaMacProcess+0x9a2>
            switch( fType )
    4ea4:	ab0e      	add	r3, sp, #56	; 0x38
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	2b01      	cmp	r3, #1
    4eaa:	d042      	beq.n	4f32 <LoRaMacProcess+0xa0e>
    4eac:	2b00      	cmp	r3, #0
    4eae:	d014      	beq.n	4eda <LoRaMacProcess+0x9b6>
    4eb0:	2b02      	cmp	r3, #2
    4eb2:	d050      	beq.n	4f56 <LoRaMacProcess+0xa32>
    4eb4:	2b03      	cmp	r3, #3
    4eb6:	d05f      	beq.n	4f78 <LoRaMacProcess+0xa54>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4eb8:	2101      	movs	r1, #1
    4eba:	4b6c      	ldr	r3, [pc, #432]	; (506c <LoRaMacProcess+0xb48>)
    4ebc:	4a69      	ldr	r2, [pc, #420]	; (5064 <LoRaMacProcess+0xb40>)
    4ebe:	54d1      	strb	r1, [r2, r3]
                    PrepareRxDoneAbort( );
    4ec0:	4b6b      	ldr	r3, [pc, #428]	; (5070 <LoRaMacProcess+0xb4c>)
    4ec2:	4798      	blx	r3
    4ec4:	e025      	b.n	4f12 <LoRaMacProcess+0x9ee>
        if( request == MCPS_CONFIRMED )
    4ec6:	2a01      	cmp	r2, #1
    4ec8:	d002      	beq.n	4ed0 <LoRaMacProcess+0x9ac>
            LoRaMacCommandsRemoveStickyAnsCmds( );
    4eca:	4b75      	ldr	r3, [pc, #468]	; (50a0 <LoRaMacProcess+0xb7c>)
    4ecc:	4798      	blx	r3
    4ece:	e7e9      	b.n	4ea4 <LoRaMacProcess+0x980>
            if( fCtrl.Bits.Ack == 1 )
    4ed0:	069b      	lsls	r3, r3, #26
    4ed2:	d5e7      	bpl.n	4ea4 <LoRaMacProcess+0x980>
                LoRaMacCommandsRemoveStickyAnsCmds( );
    4ed4:	4b72      	ldr	r3, [pc, #456]	; (50a0 <LoRaMacProcess+0xb7c>)
    4ed6:	4798      	blx	r3
    4ed8:	e7e4      	b.n	4ea4 <LoRaMacProcess+0x980>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    4eda:	af18      	add	r7, sp, #96	; 0x60
    4edc:	7b3a      	ldrb	r2, [r7, #12]
    4ede:	0712      	lsls	r2, r2, #28
    4ee0:	0f12      	lsrs	r2, r2, #28
    4ee2:	4d60      	ldr	r5, [pc, #384]	; (5064 <LoRaMacProcess+0xb40>)
    4ee4:	4b65      	ldr	r3, [pc, #404]	; (507c <LoRaMacProcess+0xb58>)
    4ee6:	5ceb      	ldrb	r3, [r5, r3]
    4ee8:	9300      	str	r3, [sp, #0]
    4eea:	0033      	movs	r3, r6
    4eec:	2100      	movs	r1, #0
    4eee:	a81c      	add	r0, sp, #112	; 0x70
    4ef0:	4e6c      	ldr	r6, [pc, #432]	; (50a4 <LoRaMacProcess+0xb80>)
    4ef2:	47b0      	blx	r6
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    4ef4:	2320      	movs	r3, #32
    4ef6:	5cfa      	ldrb	r2, [r7, r3]
    4ef8:	4b6b      	ldr	r3, [pc, #428]	; (50a8 <LoRaMacProcess+0xb84>)
    4efa:	54ea      	strb	r2, [r5, r3]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    4efc:	4b62      	ldr	r3, [pc, #392]	; (5088 <LoRaMacProcess+0xb64>)
    4efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4f00:	50ea      	str	r2, [r5, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    4f02:	2328      	movs	r3, #40	; 0x28
    4f04:	5cfa      	ldrb	r2, [r7, r3]
    4f06:	2383      	movs	r3, #131	; 0x83
    4f08:	00db      	lsls	r3, r3, #3
    4f0a:	54ea      	strb	r2, [r5, r3]
                    MacCtx.McpsIndication.RxData = true;
    4f0c:	2201      	movs	r2, #1
    4f0e:	4b67      	ldr	r3, [pc, #412]	; (50ac <LoRaMacProcess+0xb88>)
    4f10:	54ea      	strb	r2, [r5, r3]
            if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    4f12:	2399      	movs	r3, #153	; 0x99
    4f14:	00db      	lsls	r3, r3, #3
    4f16:	4a53      	ldr	r2, [pc, #332]	; (5064 <LoRaMacProcess+0xb40>)
    4f18:	58d3      	ldr	r3, [r2, r3]
    4f1a:	228e      	movs	r2, #142	; 0x8e
    4f1c:	0092      	lsls	r2, r2, #2
    4f1e:	5c9a      	ldrb	r2, [r3, r2]
    4f20:	2a00      	cmp	r2, #0
    4f22:	d13b      	bne.n	4f9c <LoRaMacProcess+0xa78>
            MacCtx.MacFlags.Bits.McpsInd = 1;
    4f24:	494f      	ldr	r1, [pc, #316]	; (5064 <LoRaMacProcess+0xb40>)
    4f26:	4a62      	ldr	r2, [pc, #392]	; (50b0 <LoRaMacProcess+0xb8c>)
    4f28:	5c88      	ldrb	r0, [r1, r2]
    4f2a:	2302      	movs	r3, #2
    4f2c:	4303      	orrs	r3, r0
    4f2e:	548b      	strb	r3, [r1, r2]
    4f30:	e513      	b.n	495a <LoRaMacProcess+0x436>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    4f32:	ad18      	add	r5, sp, #96	; 0x60
    4f34:	7b2a      	ldrb	r2, [r5, #12]
    4f36:	0712      	lsls	r2, r2, #28
    4f38:	0f12      	lsrs	r2, r2, #28
    4f3a:	4f4a      	ldr	r7, [pc, #296]	; (5064 <LoRaMacProcess+0xb40>)
    4f3c:	4b4f      	ldr	r3, [pc, #316]	; (507c <LoRaMacProcess+0xb58>)
    4f3e:	5cfb      	ldrb	r3, [r7, r3]
    4f40:	9300      	str	r3, [sp, #0]
    4f42:	0033      	movs	r3, r6
    4f44:	2100      	movs	r1, #0
    4f46:	a81c      	add	r0, sp, #112	; 0x70
    4f48:	4e56      	ldr	r6, [pc, #344]	; (50a4 <LoRaMacProcess+0xb80>)
    4f4a:	47b0      	blx	r6
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    4f4c:	2320      	movs	r3, #32
    4f4e:	5cea      	ldrb	r2, [r5, r3]
    4f50:	4b55      	ldr	r3, [pc, #340]	; (50a8 <LoRaMacProcess+0xb84>)
    4f52:	54fa      	strb	r2, [r7, r3]
    4f54:	e7dd      	b.n	4f12 <LoRaMacProcess+0x9ee>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
    4f56:	ad18      	add	r5, sp, #96	; 0x60
    4f58:	2328      	movs	r3, #40	; 0x28
    4f5a:	5cea      	ldrb	r2, [r5, r3]
    4f5c:	4f41      	ldr	r7, [pc, #260]	; (5064 <LoRaMacProcess+0xb40>)
    4f5e:	4b47      	ldr	r3, [pc, #284]	; (507c <LoRaMacProcess+0xb58>)
    4f60:	5cfb      	ldrb	r3, [r7, r3]
    4f62:	9300      	str	r3, [sp, #0]
    4f64:	0033      	movs	r3, r6
    4f66:	2100      	movs	r1, #0
    4f68:	9821      	ldr	r0, [sp, #132]	; 0x84
    4f6a:	4e4e      	ldr	r6, [pc, #312]	; (50a4 <LoRaMacProcess+0xb80>)
    4f6c:	47b0      	blx	r6
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    4f6e:	2320      	movs	r3, #32
    4f70:	5cea      	ldrb	r2, [r5, r3]
    4f72:	4b4d      	ldr	r3, [pc, #308]	; (50a8 <LoRaMacProcess+0xb84>)
    4f74:	54fa      	strb	r2, [r7, r3]
    4f76:	e7cc      	b.n	4f12 <LoRaMacProcess+0x9ee>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    4f78:	4b3a      	ldr	r3, [pc, #232]	; (5064 <LoRaMacProcess+0xb40>)
    4f7a:	aa18      	add	r2, sp, #96	; 0x60
    4f7c:	2120      	movs	r1, #32
    4f7e:	5c50      	ldrb	r0, [r2, r1]
    4f80:	4949      	ldr	r1, [pc, #292]	; (50a8 <LoRaMacProcess+0xb84>)
    4f82:	5458      	strb	r0, [r3, r1]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    4f84:	4940      	ldr	r1, [pc, #256]	; (5088 <LoRaMacProcess+0xb64>)
    4f86:	9821      	ldr	r0, [sp, #132]	; 0x84
    4f88:	5058      	str	r0, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    4f8a:	2128      	movs	r1, #40	; 0x28
    4f8c:	5c51      	ldrb	r1, [r2, r1]
    4f8e:	2283      	movs	r2, #131	; 0x83
    4f90:	00d2      	lsls	r2, r2, #3
    4f92:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
    4f94:	2101      	movs	r1, #1
    4f96:	4a45      	ldr	r2, [pc, #276]	; (50ac <LoRaMacProcess+0xb88>)
    4f98:	5499      	strb	r1, [r3, r2]
    4f9a:	e7ba      	b.n	4f12 <LoRaMacProcess+0x9ee>
                MacCtx.NvmCtx->IsRejoinRequestPending = false;
    4f9c:	2100      	movs	r1, #0
    4f9e:	228e      	movs	r2, #142	; 0x8e
    4fa0:	0092      	lsls	r2, r2, #2
    4fa2:	5499      	strb	r1, [r3, r2]
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    4fa4:	4d2f      	ldr	r5, [pc, #188]	; (5064 <LoRaMacProcess+0xb40>)
    4fa6:	2395      	movs	r3, #149	; 0x95
    4fa8:	00db      	lsls	r3, r3, #3
    4faa:	18e8      	adds	r0, r5, r3
    4fac:	4b41      	ldr	r3, [pc, #260]	; (50b4 <LoRaMacProcess+0xb90>)
    4fae:	4798      	blx	r3
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    4fb0:	4b3f      	ldr	r3, [pc, #252]	; (50b0 <LoRaMacProcess+0xb8c>)
    4fb2:	5ceb      	ldrb	r3, [r5, r3]
    4fb4:	075b      	lsls	r3, r3, #29
    4fb6:	d5b5      	bpl.n	4f24 <LoRaMacProcess+0xa00>
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    4fb8:	2100      	movs	r1, #0
    4fba:	4b3f      	ldr	r3, [pc, #252]	; (50b8 <LoRaMacProcess+0xb94>)
    4fbc:	4a29      	ldr	r2, [pc, #164]	; (5064 <LoRaMacProcess+0xb40>)
    4fbe:	54d1      	strb	r1, [r2, r3]
    4fc0:	e7b0      	b.n	4f24 <LoRaMacProcess+0xa00>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    4fc2:	2101      	movs	r1, #1
    4fc4:	4b29      	ldr	r3, [pc, #164]	; (506c <LoRaMacProcess+0xb48>)
    4fc6:	4a27      	ldr	r2, [pc, #156]	; (5064 <LoRaMacProcess+0xb40>)
    4fc8:	54d1      	strb	r1, [r2, r3]
            PrepareRxDoneAbort( );
    4fca:	4b29      	ldr	r3, [pc, #164]	; (5070 <LoRaMacProcess+0xb4c>)
    4fcc:	4798      	blx	r3
    4fce:	e4c4      	b.n	495a <LoRaMacProcess+0x436>
            OnAckTimeoutTimerEvent( );
    4fd0:	4b3a      	ldr	r3, [pc, #232]	; (50bc <LoRaMacProcess+0xb98>)
    4fd2:	4798      	blx	r3
    4fd4:	e4cf      	b.n	4976 <LoRaMacProcess+0x452>
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
    4fd6:	4b2f      	ldr	r3, [pc, #188]	; (5094 <LoRaMacProcess+0xb70>)
        if( ackReceived == 1 )
    4fd8:	4a22      	ldr	r2, [pc, #136]	; (5064 <LoRaMacProcess+0xb40>)
    4fda:	5cd3      	ldrb	r3, [r2, r3]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d100      	bne.n	4fe2 <LoRaMacProcess+0xabe>
    4fe0:	e4c9      	b.n	4976 <LoRaMacProcess+0x452>
            OnAckTimeoutTimerEvent( );
    4fe2:	4b36      	ldr	r3, [pc, #216]	; (50bc <LoRaMacProcess+0xb98>)
    4fe4:	4798      	blx	r3
    4fe6:	e4c6      	b.n	4976 <LoRaMacProcess+0x452>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    4fe8:	2399      	movs	r3, #153	; 0x99
    4fea:	00db      	lsls	r3, r3, #3
    4fec:	4a1d      	ldr	r2, [pc, #116]	; (5064 <LoRaMacProcess+0xb40>)
    4fee:	58d2      	ldr	r2, [r2, r3]
    4ff0:	23c8      	movs	r3, #200	; 0xc8
    4ff2:	5cd3      	ldrb	r3, [r2, r3]
    4ff4:	2b02      	cmp	r3, #2
    4ff6:	d010      	beq.n	501a <LoRaMacProcess+0xaf6>
        Radio.Sleep( );
    4ff8:	4b31      	ldr	r3, [pc, #196]	; (50c0 <LoRaMacProcess+0xb9c>)
    4ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ffc:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
    4ffe:	4d19      	ldr	r5, [pc, #100]	; (5064 <LoRaMacProcess+0xb40>)
    5000:	2202      	movs	r2, #2
    5002:	4b23      	ldr	r3, [pc, #140]	; (5090 <LoRaMacProcess+0xb6c>)
    5004:	54ea      	strb	r2, [r5, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
    5006:	2002      	movs	r0, #2
    5008:	4b2e      	ldr	r3, [pc, #184]	; (50c4 <LoRaMacProcess+0xba0>)
    500a:	4798      	blx	r3
    MacCtx.MacFlags.Bits.MacDone = 1;
    500c:	4a28      	ldr	r2, [pc, #160]	; (50b0 <LoRaMacProcess+0xb8c>)
    500e:	5cab      	ldrb	r3, [r5, r2]
    5010:	2110      	movs	r1, #16
    5012:	430b      	orrs	r3, r1
    5014:	54ab      	strb	r3, [r5, r2]
    5016:	f7ff faa3 	bl	4560 <LoRaMacProcess+0x3c>
        OpenContinuousRx2Window( );
    501a:	4b2b      	ldr	r3, [pc, #172]	; (50c8 <LoRaMacProcess+0xba4>)
    501c:	4798      	blx	r3
    501e:	e7ee      	b.n	4ffe <LoRaMacProcess+0xada>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
    5020:	2106      	movs	r1, #6
    5022:	2005      	movs	r0, #5
    5024:	4b29      	ldr	r3, [pc, #164]	; (50cc <LoRaMacProcess+0xba8>)
    5026:	4798      	blx	r3
    5028:	f7ff fa9e 	bl	4568 <LoRaMacProcess+0x44>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
    502c:	2104      	movs	r1, #4
    502e:	2003      	movs	r0, #3
    5030:	4b26      	ldr	r3, [pc, #152]	; (50cc <LoRaMacProcess+0xba8>)
    5032:	4798      	blx	r3
    5034:	f7ff fa9c 	bl	4570 <LoRaMacProcess+0x4c>
            MacCtx.MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
    5038:	4b25      	ldr	r3, [pc, #148]	; (50d0 <LoRaMacProcess+0xbac>)
    503a:	4798      	blx	r3
    503c:	4b09      	ldr	r3, [pc, #36]	; (5064 <LoRaMacProcess+0xb40>)
    503e:	4a1e      	ldr	r2, [pc, #120]	; (50b8 <LoRaMacProcess+0xb94>)
    5040:	5498      	strb	r0, [r3, r2]
            if( ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
    5042:	4a13      	ldr	r2, [pc, #76]	; (5090 <LoRaMacProcess+0xb6c>)
    5044:	5c9b      	ldrb	r3, [r3, r2]
    5046:	2b02      	cmp	r3, #2
    5048:	d046      	beq.n	50d8 <LoRaMacProcess+0xbb4>
    504a:	2802      	cmp	r0, #2
    504c:	d044      	beq.n	50d8 <LoRaMacProcess+0xbb4>
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    504e:	200b      	movs	r0, #11
    5050:	4b20      	ldr	r3, [pc, #128]	; (50d4 <LoRaMacProcess+0xbb0>)
    5052:	4798      	blx	r3
    5054:	2800      	cmp	r0, #0
    5056:	d101      	bne.n	505c <LoRaMacProcess+0xb38>
    5058:	f7ff faa2 	bl	45a0 <LoRaMacProcess+0x7c>
    bool noTx = false;
    505c:	2000      	movs	r0, #0
    505e:	e056      	b.n	510e <LoRaMacProcess+0xbea>
    5060:	00008445 	.word	0x00008445
    5064:	20000cbc 	.word	0x20000cbc
    5068:	00007e89 	.word	0x00007e89
    506c:	0000040d 	.word	0x0000040d
    5070:	00002979 	.word	0x00002979
    5074:	0000021e 	.word	0x0000021e
    5078:	00007c71 	.word	0x00007c71
    507c:	0000041d 	.word	0x0000041d
    5080:	0000040e 	.word	0x0000040e
    5084:	00000411 	.word	0x00000411
    5088:	00000414 	.word	0x00000414
    508c:	0000041e 	.word	0x0000041e
    5090:	00000429 	.word	0x00000429
    5094:	0000042c 	.word	0x0000042c
    5098:	0000040c 	.word	0x0000040c
    509c:	00007f7d 	.word	0x00007f7d
    50a0:	00006ccd 	.word	0x00006ccd
    50a4:	000038fd 	.word	0x000038fd
    50a8:	0000040f 	.word	0x0000040f
    50ac:	00000419 	.word	0x00000419
    50b0:	00000469 	.word	0x00000469
    50b4:	0000c1a5 	.word	0x0000c1a5
    50b8:	0000043d 	.word	0x0000043d
    50bc:	00002921 	.word	0x00002921
    50c0:	0001407c 	.word	0x0001407c
    50c4:	00006f79 	.word	0x00006f79
    50c8:	00002b85 	.word	0x00002b85
    50cc:	00002ba1 	.word	0x00002ba1
    50d0:	00006fb5 	.word	0x00006fb5
    50d4:	00006fc1 	.word	0x00006fc1
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    50d8:	4b94      	ldr	r3, [pc, #592]	; (532c <LoRaMacProcess+0xe08>)
    50da:	21d8      	movs	r1, #216	; 0xd8
    50dc:	0089      	lsls	r1, r1, #2
    50de:	2202      	movs	r2, #2
    50e0:	5858      	ldr	r0, [r3, r1]
    50e2:	4390      	bics	r0, r2
    50e4:	5058      	str	r0, [r3, r1]
                MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    50e6:	2299      	movs	r2, #153	; 0x99
    50e8:	00d2      	lsls	r2, r2, #3
    50ea:	5899      	ldr	r1, [r3, r2]
    50ec:	2288      	movs	r2, #136	; 0x88
    50ee:	0052      	lsls	r2, r2, #1
    50f0:	5c89      	ldrb	r1, [r1, r2]
    50f2:	4a8f      	ldr	r2, [pc, #572]	; (5330 <LoRaMacProcess+0xe0c>)
    50f4:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsConfirm.AckReceived = false;
    50f6:	2200      	movs	r2, #0
    50f8:	498e      	ldr	r1, [pc, #568]	; (5334 <LoRaMacProcess+0xe10>)
    50fa:	545a      	strb	r2, [r3, r1]
                MacCtx.McpsConfirm.TxTimeOnAir = 0;
    50fc:	3104      	adds	r1, #4
    50fe:	505a      	str	r2, [r3, r1]
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    5100:	200b      	movs	r0, #11
    5102:	4b8d      	ldr	r3, [pc, #564]	; (5338 <LoRaMacProcess+0xe14>)
    5104:	4798      	blx	r3
    5106:	2800      	cmp	r0, #0
    5108:	d101      	bne.n	510e <LoRaMacProcess+0xbea>
    510a:	f7ff fa75 	bl	45f8 <LoRaMacProcess+0xd4>
                ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
    510e:	4b8b      	ldr	r3, [pc, #556]	; (533c <LoRaMacProcess+0xe18>)
    5110:	4a86      	ldr	r2, [pc, #536]	; (532c <LoRaMacProcess+0xe08>)
    5112:	5cd3      	ldrb	r3, [r2, r3]
            if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    5114:	07da      	lsls	r2, r3, #31
    5116:	d413      	bmi.n	5140 <LoRaMacProcess+0xc1c>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    5118:	075b      	lsls	r3, r3, #29
    511a:	d400      	bmi.n	511e <LoRaMacProcess+0xbfa>
    511c:	e0d8      	b.n	52d0 <LoRaMacProcess+0xdac>
                    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    511e:	4983      	ldr	r1, [pc, #524]	; (532c <LoRaMacProcess+0xe08>)
    5120:	22d8      	movs	r2, #216	; 0xd8
    5122:	0092      	lsls	r2, r2, #2
    5124:	2302      	movs	r3, #2
    5126:	5888      	ldr	r0, [r1, r2]
    5128:	4398      	bics	r0, r3
    512a:	5088      	str	r0, [r1, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
    512c:	23d8      	movs	r3, #216	; 0xd8
    512e:	009b      	lsls	r3, r3, #2
    5130:	4a7e      	ldr	r2, [pc, #504]	; (532c <LoRaMacProcess+0xe08>)
    5132:	58d3      	ldr	r3, [r2, r3]
    5134:	2b00      	cmp	r3, #0
    5136:	d001      	beq.n	513c <LoRaMacProcess+0xc18>
    5138:	f7ff fa8b 	bl	4652 <LoRaMacProcess+0x12e>
    513c:	f7ff fa68 	bl	4610 <LoRaMacProcess+0xec>
        if( noTx == false )
    5140:	2800      	cmp	r0, #0
    5142:	d100      	bne.n	5146 <LoRaMacProcess+0xc22>
    5144:	e0d6      	b.n	52f4 <LoRaMacProcess+0xdd0>
    if( MacCtx.MacState == LORAMAC_IDLE )
    5146:	23d8      	movs	r3, #216	; 0xd8
    5148:	009b      	lsls	r3, r3, #2
    514a:	4a78      	ldr	r2, [pc, #480]	; (532c <LoRaMacProcess+0xe08>)
    514c:	58d3      	ldr	r3, [r2, r3]
    514e:	2b00      	cmp	r3, #0
    5150:	d001      	beq.n	5156 <LoRaMacProcess+0xc32>
    5152:	f7ff fa7e 	bl	4652 <LoRaMacProcess+0x12e>
            MacCtx.MacFlags.Bits.McpsReq = 0;
    5156:	4b75      	ldr	r3, [pc, #468]	; (532c <LoRaMacProcess+0xe08>)
    5158:	4978      	ldr	r1, [pc, #480]	; (533c <LoRaMacProcess+0xe18>)
    515a:	5c5a      	ldrb	r2, [r3, r1]
    515c:	2001      	movs	r0, #1
    515e:	4382      	bics	r2, r0
    5160:	545a      	strb	r2, [r3, r1]
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
    5162:	2285      	movs	r2, #133	; 0x85
    5164:	00d2      	lsls	r2, r2, #3
    5166:	1898      	adds	r0, r3, r2
    5168:	3ac4      	subs	r2, #196	; 0xc4
    516a:	589b      	ldr	r3, [r3, r2]
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	4798      	blx	r3
    5170:	f7ff fa4e 	bl	4610 <LoRaMacProcess+0xec>
                    LoRaMacResetFCnts( );
    5174:	4b72      	ldr	r3, [pc, #456]	; (5340 <LoRaMacProcess+0xe1c>)
    5176:	4798      	blx	r3
                    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    5178:	2399      	movs	r3, #153	; 0x99
    517a:	00db      	lsls	r3, r3, #3
    517c:	4a6b      	ldr	r2, [pc, #428]	; (532c <LoRaMacProcess+0xe08>)
    517e:	58d2      	ldr	r2, [r2, r3]
    5180:	2100      	movs	r1, #0
    5182:	2388      	movs	r3, #136	; 0x88
    5184:	005b      	lsls	r3, r3, #1
    5186:	54d1      	strb	r1, [r2, r3]
    5188:	e0c6      	b.n	5318 <LoRaMacProcess+0xdf4>
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    518a:	2299      	movs	r2, #153	; 0x99
    518c:	00d2      	lsls	r2, r2, #3
    518e:	4967      	ldr	r1, [pc, #412]	; (532c <LoRaMacProcess+0xe08>)
    5190:	588a      	ldr	r2, [r1, r2]
    5192:	2188      	movs	r1, #136	; 0x88
    5194:	0049      	lsls	r1, r1, #1
    5196:	5c50      	ldrb	r0, [r2, r1]
    5198:	391c      	subs	r1, #28
    519a:	5c51      	ldrb	r1, [r2, r1]
    519c:	4288      	cmp	r0, r1
    519e:	d20f      	bcs.n	51c0 <LoRaMacProcess+0xc9c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    51a0:	079b      	lsls	r3, r3, #30
    51a2:	d401      	bmi.n	51a8 <LoRaMacProcess+0xc84>
    51a4:	f7ff fa1a 	bl	45dc <LoRaMacProcess+0xb8>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
    51a8:	23c8      	movs	r3, #200	; 0xc8
    51aa:	5cd3      	ldrb	r3, [r2, r3]
    51ac:	2b00      	cmp	r3, #0
    51ae:	d007      	beq.n	51c0 <LoRaMacProcess+0xc9c>
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    51b0:	238d      	movs	r3, #141	; 0x8d
    51b2:	00db      	lsls	r3, r3, #3
    51b4:	4a5d      	ldr	r2, [pc, #372]	; (532c <LoRaMacProcess+0xe08>)
    51b6:	5cd3      	ldrb	r3, [r2, r3]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d001      	beq.n	51c0 <LoRaMacProcess+0xc9c>
    51bc:	f7ff fa0e 	bl	45dc <LoRaMacProcess+0xb8>
                    StopRetransmission( );
    51c0:	4b60      	ldr	r3, [pc, #384]	; (5344 <LoRaMacProcess+0xe20>)
    51c2:	4798      	blx	r3
    if( ( MacCtx.NvmCtx->Rejoin0UplinksLimit == MacCtx.NvmCtx->Rejoin0UplinksCounter ) && ( MacCtx.NvmCtx->Version.Fields.Minor == 1 ) && ( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 ) )
    51c4:	2399      	movs	r3, #153	; 0x99
    51c6:	00db      	lsls	r3, r3, #3
    51c8:	4a58      	ldr	r2, [pc, #352]	; (532c <LoRaMacProcess+0xe08>)
    51ca:	58d3      	ldr	r3, [r2, r3]
    51cc:	4a5e      	ldr	r2, [pc, #376]	; (5348 <LoRaMacProcess+0xe24>)
    51ce:	5a9a      	ldrh	r2, [r3, r2]
    51d0:	2189      	movs	r1, #137	; 0x89
    51d2:	0089      	lsls	r1, r1, #2
    51d4:	5a59      	ldrh	r1, [r3, r1]
    51d6:	4291      	cmp	r1, r2
    51d8:	d001      	beq.n	51de <LoRaMacProcess+0xcba>
    51da:	f7ff fa0d 	bl	45f8 <LoRaMacProcess+0xd4>
    51de:	495b      	ldr	r1, [pc, #364]	; (534c <LoRaMacProcess+0xe28>)
    51e0:	5c59      	ldrb	r1, [r3, r1]
    51e2:	2901      	cmp	r1, #1
    51e4:	d001      	beq.n	51ea <LoRaMacProcess+0xcc6>
    51e6:	f7ff fa07 	bl	45f8 <LoRaMacProcess+0xd4>
    51ea:	2a00      	cmp	r2, #0
    51ec:	d101      	bne.n	51f2 <LoRaMacProcess+0xcce>
    51ee:	f7ff fa03 	bl	45f8 <LoRaMacProcess+0xd4>
        MacCtx.NvmCtx->Rejoin0UplinksCounter = 0;
    51f2:	2100      	movs	r1, #0
    51f4:	2289      	movs	r2, #137	; 0x89
    51f6:	0092      	lsls	r2, r2, #2
    51f8:	5299      	strh	r1, [r3, r2]
                        SendReJoinReq( REJOIN_REQ_0 );
    51fa:	2000      	movs	r0, #0
    51fc:	4b54      	ldr	r3, [pc, #336]	; (5350 <LoRaMacProcess+0xe2c>)
    51fe:	4798      	blx	r3
    5200:	f7ff f9fa 	bl	45f8 <LoRaMacProcess+0xd4>
                    if( MacCtx.NvmCtx->AckTimeoutRetry == true )
    5204:	2299      	movs	r2, #153	; 0x99
    5206:	00d2      	lsls	r2, r2, #3
    5208:	4948      	ldr	r1, [pc, #288]	; (532c <LoRaMacProcess+0xe08>)
    520a:	588a      	ldr	r2, [r1, r2]
    520c:	4951      	ldr	r1, [pc, #324]	; (5354 <LoRaMacProcess+0xe30>)
    520e:	5c51      	ldrb	r1, [r2, r1]
    5210:	2900      	cmp	r1, #0
    5212:	d098      	beq.n	5146 <LoRaMacProcess+0xc22>
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    5214:	2188      	movs	r1, #136	; 0x88
    5216:	0049      	lsls	r1, r1, #1
    5218:	5c51      	ldrb	r1, [r2, r1]
    521a:	20f4      	movs	r0, #244	; 0xf4
    521c:	5c12      	ldrb	r2, [r2, r0]
    521e:	4291      	cmp	r1, r2
    5220:	d2ce      	bcs.n	51c0 <LoRaMacProcess+0xc9c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    5222:	079b      	lsls	r3, r3, #30
    5224:	d401      	bmi.n	522a <LoRaMacProcess+0xd06>
    5226:	f7ff f9d9 	bl	45dc <LoRaMacProcess+0xb8>
        if( MacCtx.McpsConfirm.AckReceived == true )
    522a:	4b42      	ldr	r3, [pc, #264]	; (5334 <LoRaMacProcess+0xe10>)
    522c:	4a3f      	ldr	r2, [pc, #252]	; (532c <LoRaMacProcess+0xe08>)
    522e:	5cd3      	ldrb	r3, [r2, r3]
    5230:	2b00      	cmp	r3, #0
    5232:	d101      	bne.n	5238 <LoRaMacProcess+0xd14>
    5234:	f7ff f9d2 	bl	45dc <LoRaMacProcess+0xb8>
    5238:	e7c2      	b.n	51c0 <LoRaMacProcess+0xc9c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    523a:	0010      	movs	r0, r2
    523c:	4a3f      	ldr	r2, [pc, #252]	; (533c <LoRaMacProcess+0xe18>)
    523e:	5c83      	ldrb	r3, [r0, r2]
    5240:	2104      	movs	r1, #4
    5242:	438b      	bics	r3, r1
    5244:	5483      	strb	r3, [r0, r2]
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
    5246:	4b44      	ldr	r3, [pc, #272]	; (5358 <LoRaMacProcess+0xe34>)
    5248:	469c      	mov	ip, r3
    524a:	4460      	add	r0, ip
    524c:	4b43      	ldr	r3, [pc, #268]	; (535c <LoRaMacProcess+0xe38>)
    524e:	4798      	blx	r3
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
    5250:	4b43      	ldr	r3, [pc, #268]	; (5360 <LoRaMacProcess+0xe3c>)
    5252:	4798      	blx	r3
    5254:	2800      	cmp	r0, #0
    5256:	d101      	bne.n	525c <LoRaMacProcess+0xd38>
    5258:	f7ff f9e1 	bl	461e <LoRaMacProcess+0xfa>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
    525c:	4933      	ldr	r1, [pc, #204]	; (532c <LoRaMacProcess+0xe08>)
    525e:	4a37      	ldr	r2, [pc, #220]	; (533c <LoRaMacProcess+0xe18>)
    5260:	5c8b      	ldrb	r3, [r1, r2]
    5262:	2004      	movs	r0, #4
    5264:	4303      	orrs	r3, r0
    5266:	548b      	strb	r3, [r1, r2]
    5268:	f7ff f9d9 	bl	461e <LoRaMacProcess+0xfa>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    526c:	0014      	movs	r4, r2
    526e:	238a      	movs	r3, #138	; 0x8a
    5270:	00db      	lsls	r3, r3, #3
    5272:	18d0      	adds	r0, r2, r3
    5274:	3bec      	subs	r3, #236	; 0xec
    5276:	58d3      	ldr	r3, [r2, r3]
    5278:	68db      	ldr	r3, [r3, #12]
    527a:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
    527c:	4a2f      	ldr	r2, [pc, #188]	; (533c <LoRaMacProcess+0xe18>)
    527e:	5ca3      	ldrb	r3, [r4, r2]
    5280:	2108      	movs	r1, #8
    5282:	438b      	bics	r3, r1
    5284:	54a3      	strb	r3, [r4, r2]
    5286:	f7ff f9d1 	bl	462c <LoRaMacProcess+0x108>
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    528a:	4c28      	ldr	r4, [pc, #160]	; (532c <LoRaMacProcess+0xe08>)
    528c:	2206      	movs	r2, #6
    528e:	238a      	movs	r3, #138	; 0x8a
    5290:	00db      	lsls	r3, r3, #3
    5292:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    5294:	4d29      	ldr	r5, [pc, #164]	; (533c <LoRaMacProcess+0xe18>)
    5296:	5d63      	ldrb	r3, [r4, r5]
    5298:	2208      	movs	r2, #8
    529a:	4313      	orrs	r3, r2
    529c:	5563      	strb	r3, [r4, r5]
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    529e:	238a      	movs	r3, #138	; 0x8a
    52a0:	00db      	lsls	r3, r3, #3
    52a2:	18e0      	adds	r0, r4, r3
    52a4:	3bec      	subs	r3, #236	; 0xec
    52a6:	58e3      	ldr	r3, [r4, r3]
    52a8:	68db      	ldr	r3, [r3, #12]
    52aa:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeInd = 0;
    52ac:	5d63      	ldrb	r3, [r4, r5]
    52ae:	2208      	movs	r2, #8
    52b0:	4393      	bics	r3, r2
    52b2:	5563      	strb	r3, [r4, r5]
    52b4:	f7ff f9c5 	bl	4642 <LoRaMacProcess+0x11e>
            if( MacCtx.MacState == LORAMAC_IDLE )
    52b8:	23d8      	movs	r3, #216	; 0xd8
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	4a1b      	ldr	r2, [pc, #108]	; (532c <LoRaMacProcess+0xe08>)
    52be:	58d3      	ldr	r3, [r2, r3]
    52c0:	2b00      	cmp	r3, #0
    52c2:	d001      	beq.n	52c8 <LoRaMacProcess+0xda4>
    52c4:	f7ff f9d9 	bl	467a <LoRaMacProcess+0x156>
                OpenContinuousRx2Window( );
    52c8:	4b26      	ldr	r3, [pc, #152]	; (5364 <LoRaMacProcess+0xe40>)
    52ca:	4798      	blx	r3
    52cc:	f7ff f9d5 	bl	467a <LoRaMacProcess+0x156>
        if( noTx == false )
    52d0:	2800      	cmp	r0, #0
    52d2:	d000      	beq.n	52d6 <LoRaMacProcess+0xdb2>
    52d4:	e72a      	b.n	512c <LoRaMacProcess+0xc08>
    if( MacCtx.MacState == LORAMAC_IDLE )
    52d6:	23d8      	movs	r3, #216	; 0xd8
    52d8:	009b      	lsls	r3, r3, #2
    52da:	4a14      	ldr	r2, [pc, #80]	; (532c <LoRaMacProcess+0xe08>)
    52dc:	58d3      	ldr	r3, [r2, r3]
    52de:	2b00      	cmp	r3, #0
    52e0:	d101      	bne.n	52e6 <LoRaMacProcess+0xdc2>
    52e2:	f7ff f995 	bl	4610 <LoRaMacProcess+0xec>
    52e6:	f7ff f9b4 	bl	4652 <LoRaMacProcess+0x12e>
            if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    52ea:	4b14      	ldr	r3, [pc, #80]	; (533c <LoRaMacProcess+0xe18>)
    52ec:	4a0f      	ldr	r2, [pc, #60]	; (532c <LoRaMacProcess+0xe08>)
    52ee:	5cd3      	ldrb	r3, [r2, r3]
    52f0:	f7ff f964 	bl	45bc <LoRaMacProcess+0x98>
            if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
    52f4:	4b11      	ldr	r3, [pc, #68]	; (533c <LoRaMacProcess+0xe18>)
    52f6:	4a0d      	ldr	r2, [pc, #52]	; (532c <LoRaMacProcess+0xe08>)
    52f8:	5cd3      	ldrb	r3, [r2, r3]
    52fa:	075b      	lsls	r3, r3, #29
    52fc:	d5f5      	bpl.n	52ea <LoRaMacProcess+0xdc6>
    52fe:	2000      	movs	r0, #0
    5300:	4b0d      	ldr	r3, [pc, #52]	; (5338 <LoRaMacProcess+0xe14>)
    5302:	4798      	blx	r3
    5304:	2800      	cmp	r0, #0
    5306:	d101      	bne.n	530c <LoRaMacProcess+0xde8>
    5308:	f7ff f951 	bl	45ae <LoRaMacProcess+0x8a>
                if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
    530c:	2000      	movs	r0, #0
    530e:	4b16      	ldr	r3, [pc, #88]	; (5368 <LoRaMacProcess+0xe44>)
    5310:	4798      	blx	r3
    5312:	2800      	cmp	r0, #0
    5314:	d100      	bne.n	5318 <LoRaMacProcess+0xdf4>
    5316:	e72d      	b.n	5174 <LoRaMacProcess+0xc50>
                MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    5318:	4904      	ldr	r1, [pc, #16]	; (532c <LoRaMacProcess+0xe08>)
    531a:	22d8      	movs	r2, #216	; 0xd8
    531c:	0092      	lsls	r2, r2, #2
    531e:	2302      	movs	r3, #2
    5320:	5888      	ldr	r0, [r1, r2]
    5322:	4398      	bics	r0, r3
    5324:	5088      	str	r0, [r1, r2]
    5326:	f7ff f942 	bl	45ae <LoRaMacProcess+0x8a>
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	20000cbc 	.word	0x20000cbc
    5330:	0000042d 	.word	0x0000042d
    5334:	0000042c 	.word	0x0000042c
    5338:	00006fc1 	.word	0x00006fc1
    533c:	00000469 	.word	0x00000469
    5340:	00008001 	.word	0x00008001
    5344:	000029c1 	.word	0x000029c1
    5348:	00000222 	.word	0x00000222
    534c:	0000021e 	.word	0x0000021e
    5350:	00003799 	.word	0x00003799
    5354:	00000216 	.word	0x00000216
    5358:	0000043c 	.word	0x0000043c
    535c:	00007005 	.word	0x00007005
    5360:	00007085 	.word	0x00007085
    5364:	00002b85 	.word	0x00002b85
    5368:	00006f25 	.word	0x00006f25

0000536c <LoRaMacInitialization>:
{
    536c:	b5f0      	push	{r4, r5, r6, r7, lr}
    536e:	46de      	mov	lr, fp
    5370:	4657      	mov	r7, sl
    5372:	464e      	mov	r6, r9
    5374:	4645      	mov	r5, r8
    5376:	b5e0      	push	{r5, r6, r7, lr}
    5378:	b093      	sub	sp, #76	; 0x4c
    537a:	0004      	movs	r4, r0
    537c:	000d      	movs	r5, r1
    537e:	9201      	str	r2, [sp, #4]
    if( ( primitives == NULL ) ||
    5380:	2800      	cmp	r0, #0
    5382:	d100      	bne.n	5386 <LoRaMacInitialization+0x1a>
    5384:	e267      	b.n	5856 <LoRaMacInitialization+0x4ea>
    5386:	2900      	cmp	r1, #0
    5388:	d100      	bne.n	538c <LoRaMacInitialization+0x20>
    538a:	e26c      	b.n	5866 <LoRaMacInitialization+0x4fa>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
    538c:	6803      	ldr	r3, [r0, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d100      	bne.n	5394 <LoRaMacInitialization+0x28>
    5392:	e26a      	b.n	586a <LoRaMacInitialization+0x4fe>
    5394:	6843      	ldr	r3, [r0, #4]
    5396:	2b00      	cmp	r3, #0
    5398:	d100      	bne.n	539c <LoRaMacInitialization+0x30>
    539a:	e268      	b.n	586e <LoRaMacInitialization+0x502>
        ( primitives->MacMcpsIndication == NULL ) ||
    539c:	6883      	ldr	r3, [r0, #8]
    539e:	2b00      	cmp	r3, #0
    53a0:	d100      	bne.n	53a4 <LoRaMacInitialization+0x38>
    53a2:	e266      	b.n	5872 <LoRaMacInitialization+0x506>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    53a4:	2003      	movs	r0, #3
        ( primitives->MacMlmeConfirm == NULL ) ||
    53a6:	68e3      	ldr	r3, [r4, #12]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d100      	bne.n	53ae <LoRaMacInitialization+0x42>
    53ac:	e254      	b.n	5858 <LoRaMacInitialization+0x4ec>
    if( RegionIsActive( region ) == false )
    53ae:	0010      	movs	r0, r2
    53b0:	4bfb      	ldr	r3, [pc, #1004]	; (57a0 <LoRaMacInitialization+0x434>)
    53b2:	4798      	blx	r3
    53b4:	0003      	movs	r3, r0
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    53b6:	2009      	movs	r0, #9
    if( RegionIsActive( region ) == false )
    53b8:	2b00      	cmp	r3, #0
    53ba:	d100      	bne.n	53be <LoRaMacInitialization+0x52>
    53bc:	e24c      	b.n	5858 <LoRaMacInitialization+0x4ec>
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
    53be:	49f9      	ldr	r1, [pc, #996]	; (57a4 <LoRaMacInitialization+0x438>)
    53c0:	0020      	movs	r0, r4
    53c2:	4bf9      	ldr	r3, [pc, #996]	; (57a8 <LoRaMacInitialization+0x43c>)
    53c4:	4798      	blx	r3
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
    53c6:	4bf9      	ldr	r3, [pc, #996]	; (57ac <LoRaMacInitialization+0x440>)
    53c8:	4698      	mov	r8, r3
    53ca:	234c      	movs	r3, #76	; 0x4c
    53cc:	4443      	add	r3, r8
    53ce:	469a      	mov	sl, r3
    53d0:	2290      	movs	r2, #144	; 0x90
    53d2:	0092      	lsls	r2, r2, #2
    53d4:	2100      	movs	r1, #0
    53d6:	0018      	movs	r0, r3
    53d8:	4bf5      	ldr	r3, [pc, #980]	; (57b0 <LoRaMacInitialization+0x444>)
    53da:	469b      	mov	fp, r3
    53dc:	4798      	blx	r3
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
    53de:	2699      	movs	r6, #153	; 0x99
    53e0:	00f6      	lsls	r6, r6, #3
    53e2:	4ff4      	ldr	r7, [pc, #976]	; (57b4 <LoRaMacInitialization+0x448>)
    53e4:	1d38      	adds	r0, r7, #4
    53e6:	0032      	movs	r2, r6
    53e8:	2100      	movs	r1, #0
    53ea:	47d8      	blx	fp
    MacCtx.NvmCtx = &NvmMacCtx;
    53ec:	4653      	mov	r3, sl
    53ee:	51bb      	str	r3, [r7, r6]
    MacCtx.NvmCtx->Region = region;
    53f0:	234c      	movs	r3, #76	; 0x4c
    53f2:	4642      	mov	r2, r8
    53f4:	9801      	ldr	r0, [sp, #4]
    53f6:	54d0      	strb	r0, [r2, r3]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
    53f8:	4643      	mov	r3, r8
    53fa:	3315      	adds	r3, #21
    53fc:	33ff      	adds	r3, #255	; 0xff
    53fe:	2200      	movs	r2, #0
    5400:	4692      	mov	sl, r2
    5402:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
    5404:	334d      	adds	r3, #77	; 0x4d
    5406:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
    5408:	239a      	movs	r3, #154	; 0x9a
    540a:	009b      	lsls	r3, r3, #2
    540c:	4443      	add	r3, r8
    540e:	701a      	strb	r2, [r3, #0]
    5410:	4be9      	ldr	r3, [pc, #932]	; (57b8 <LoRaMacInitialization+0x44c>)
    5412:	4443      	add	r3, r8
    5414:	701a      	strb	r2, [r3, #0]
    5416:	4be9      	ldr	r3, [pc, #932]	; (57bc <LoRaMacInitialization+0x450>)
    5418:	4443      	add	r3, r8
    541a:	2201      	movs	r2, #1
    541c:	4693      	mov	fp, r2
    541e:	701a      	strb	r2, [r3, #0]
    5420:	4be7      	ldr	r3, [pc, #924]	; (57c0 <LoRaMacInitialization+0x454>)
    5422:	4443      	add	r3, r8
    5424:	701a      	strb	r2, [r3, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
    5426:	230e      	movs	r3, #14
    5428:	aa02      	add	r2, sp, #8
    542a:	213c      	movs	r1, #60	; 0x3c
    542c:	1852      	adds	r2, r2, r1
    542e:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5430:	a911      	add	r1, sp, #68	; 0x44
    5432:	4be4      	ldr	r3, [pc, #912]	; (57c4 <LoRaMacInitialization+0x458>)
    5434:	4699      	mov	r9, r3
    5436:	4798      	blx	r3
    5438:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
    543a:	1e43      	subs	r3, r0, #1
    543c:	4198      	sbcs	r0, r3
    543e:	2389      	movs	r3, #137	; 0x89
    5440:	005b      	lsls	r3, r3, #1
    5442:	59ba      	ldr	r2, [r7, r6]
    5444:	54d0      	strb	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_TX_POWER;
    5446:	3b0a      	subs	r3, #10
    5448:	3bff      	subs	r3, #255	; 0xff
    544a:	aa02      	add	r2, sp, #8
    544c:	213c      	movs	r1, #60	; 0x3c
    544e:	1852      	adds	r2, r2, r1
    5450:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5452:	59bb      	ldr	r3, [r7, r6]
    5454:	7818      	ldrb	r0, [r3, #0]
    5456:	a911      	add	r1, sp, #68	; 0x44
    5458:	47c8      	blx	r9
    545a:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
    545c:	59bb      	ldr	r3, [r7, r6]
    545e:	7118      	strb	r0, [r3, #4]
    getPhy.Attribute = PHY_DEF_TX_DR;
    5460:	2305      	movs	r3, #5
    5462:	aa02      	add	r2, sp, #8
    5464:	213c      	movs	r1, #60	; 0x3c
    5466:	1852      	adds	r2, r2, r1
    5468:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    546a:	59bb      	ldr	r3, [r7, r6]
    546c:	7818      	ldrb	r0, [r3, #0]
    546e:	a911      	add	r1, sp, #68	; 0x44
    5470:	47c8      	blx	r9
    5472:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
    5474:	59bb      	ldr	r3, [r7, r6]
    5476:	7158      	strb	r0, [r3, #5]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
    5478:	230f      	movs	r3, #15
    547a:	aa02      	add	r2, sp, #8
    547c:	213c      	movs	r1, #60	; 0x3c
    547e:	1852      	adds	r2, r2, r1
    5480:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5482:	59bb      	ldr	r3, [r7, r6]
    5484:	7818      	ldrb	r0, [r3, #0]
    5486:	a911      	add	r1, sp, #68	; 0x44
    5488:	47c8      	blx	r9
    548a:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
    548c:	59bb      	ldr	r3, [r7, r6]
    548e:	6118      	str	r0, [r3, #16]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    5490:	2310      	movs	r3, #16
    5492:	aa02      	add	r2, sp, #8
    5494:	213c      	movs	r1, #60	; 0x3c
    5496:	1852      	adds	r2, r2, r1
    5498:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    549a:	59bb      	ldr	r3, [r7, r6]
    549c:	7818      	ldrb	r0, [r3, #0]
    549e:	a911      	add	r1, sp, #68	; 0x44
    54a0:	47c8      	blx	r9
    54a2:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
    54a4:	59bb      	ldr	r3, [r7, r6]
    54a6:	6158      	str	r0, [r3, #20]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    54a8:	2311      	movs	r3, #17
    54aa:	aa02      	add	r2, sp, #8
    54ac:	213c      	movs	r1, #60	; 0x3c
    54ae:	1852      	adds	r2, r2, r1
    54b0:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    54b2:	59bb      	ldr	r3, [r7, r6]
    54b4:	7818      	ldrb	r0, [r3, #0]
    54b6:	a911      	add	r1, sp, #68	; 0x44
    54b8:	47c8      	blx	r9
    54ba:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
    54bc:	59bb      	ldr	r3, [r7, r6]
    54be:	6198      	str	r0, [r3, #24]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    54c0:	2312      	movs	r3, #18
    54c2:	aa02      	add	r2, sp, #8
    54c4:	213c      	movs	r1, #60	; 0x3c
    54c6:	1852      	adds	r2, r2, r1
    54c8:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    54ca:	59bb      	ldr	r3, [r7, r6]
    54cc:	7818      	ldrb	r0, [r3, #0]
    54ce:	a911      	add	r1, sp, #68	; 0x44
    54d0:	47c8      	blx	r9
    54d2:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
    54d4:	59bb      	ldr	r3, [r7, r6]
    54d6:	61d8      	str	r0, [r3, #28]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    54d8:	2313      	movs	r3, #19
    54da:	aa02      	add	r2, sp, #8
    54dc:	213c      	movs	r1, #60	; 0x3c
    54de:	1852      	adds	r2, r2, r1
    54e0:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    54e2:	59bb      	ldr	r3, [r7, r6]
    54e4:	7818      	ldrb	r0, [r3, #0]
    54e6:	a911      	add	r1, sp, #68	; 0x44
    54e8:	47c8      	blx	r9
    54ea:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
    54ec:	59bb      	ldr	r3, [r7, r6]
    54ee:	6218      	str	r0, [r3, #32]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    54f0:	2316      	movs	r3, #22
    54f2:	aa02      	add	r2, sp, #8
    54f4:	213c      	movs	r1, #60	; 0x3c
    54f6:	1852      	adds	r2, r2, r1
    54f8:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    54fa:	59bb      	ldr	r3, [r7, r6]
    54fc:	7818      	ldrb	r0, [r3, #0]
    54fe:	a911      	add	r1, sp, #68	; 0x44
    5500:	47c8      	blx	r9
    5502:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
    5504:	2325      	movs	r3, #37	; 0x25
    5506:	59ba      	ldr	r2, [r7, r6]
    5508:	54d0      	strb	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    550a:	3b0e      	subs	r3, #14
    550c:	aa02      	add	r2, sp, #8
    550e:	213c      	movs	r1, #60	; 0x3c
    5510:	1852      	adds	r2, r2, r1
    5512:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5514:	59bb      	ldr	r3, [r7, r6]
    5516:	7818      	ldrb	r0, [r3, #0]
    5518:	a911      	add	r1, sp, #68	; 0x44
    551a:	47c8      	blx	r9
    551c:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    551e:	59bb      	ldr	r3, [r7, r6]
    5520:	6298      	str	r0, [r3, #40]	; 0x28
    getPhy.Attribute = PHY_DEF_RX2_DR;
    5522:	2318      	movs	r3, #24
    5524:	aa02      	add	r2, sp, #8
    5526:	213c      	movs	r1, #60	; 0x3c
    5528:	1852      	adds	r2, r2, r1
    552a:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    552c:	59bb      	ldr	r3, [r7, r6]
    552e:	7818      	ldrb	r0, [r3, #0]
    5530:	a911      	add	r1, sp, #68	; 0x44
    5532:	47c8      	blx	r9
    5534:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
    5536:	232c      	movs	r3, #44	; 0x2c
    5538:	59ba      	ldr	r2, [r7, r6]
    553a:	54d0      	strb	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
    553c:	3b0f      	subs	r3, #15
    553e:	aa02      	add	r2, sp, #8
    5540:	213c      	movs	r1, #60	; 0x3c
    5542:	1852      	adds	r2, r2, r1
    5544:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5546:	59bb      	ldr	r3, [r7, r6]
    5548:	7818      	ldrb	r0, [r3, #0]
    554a:	a911      	add	r1, sp, #68	; 0x44
    554c:	47c8      	blx	r9
    554e:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
    5550:	2330      	movs	r3, #48	; 0x30
    5552:	59ba      	ldr	r2, [r7, r6]
    5554:	54d0      	strb	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    5556:	3b12      	subs	r3, #18
    5558:	aa02      	add	r2, sp, #8
    555a:	213c      	movs	r1, #60	; 0x3c
    555c:	1852      	adds	r2, r2, r1
    555e:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5560:	59bb      	ldr	r3, [r7, r6]
    5562:	7818      	ldrb	r0, [r3, #0]
    5564:	a911      	add	r1, sp, #68	; 0x44
    5566:	47c8      	blx	r9
    5568:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
    556a:	2331      	movs	r3, #49	; 0x31
    556c:	59ba      	ldr	r2, [r7, r6]
    556e:	54d0      	strb	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    5570:	3b12      	subs	r3, #18
    5572:	aa02      	add	r2, sp, #8
    5574:	213c      	movs	r1, #60	; 0x3c
    5576:	1852      	adds	r2, r2, r1
    5578:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    557a:	59bb      	ldr	r3, [r7, r6]
    557c:	7818      	ldrb	r0, [r3, #0]
    557e:	a911      	add	r1, sp, #68	; 0x44
    5580:	47c8      	blx	r9
    5582:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
    5584:	59bb      	ldr	r3, [r7, r6]
    5586:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5588:	635a      	str	r2, [r3, #52]	; 0x34
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    558a:	2320      	movs	r3, #32
    558c:	aa02      	add	r2, sp, #8
    558e:	213c      	movs	r1, #60	; 0x3c
    5590:	1852      	adds	r2, r2, r1
    5592:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5594:	59bb      	ldr	r3, [r7, r6]
    5596:	7818      	ldrb	r0, [r3, #0]
    5598:	a911      	add	r1, sp, #68	; 0x44
    559a:	47c8      	blx	r9
    559c:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
    559e:	59bb      	ldr	r3, [r7, r6]
    55a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    55a2:	639a      	str	r2, [r3, #56]	; 0x38
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    55a4:	230a      	movs	r3, #10
    55a6:	4698      	mov	r8, r3
    55a8:	ab02      	add	r3, sp, #8
    55aa:	223c      	movs	r2, #60	; 0x3c
    55ac:	189b      	adds	r3, r3, r2
    55ae:	4642      	mov	r2, r8
    55b0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    55b2:	59bb      	ldr	r3, [r7, r6]
    55b4:	7818      	ldrb	r0, [r3, #0]
    55b6:	a911      	add	r1, sp, #68	; 0x44
    55b8:	47c8      	blx	r9
    55ba:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
    55bc:	23d0      	movs	r3, #208	; 0xd0
    55be:	59ba      	ldr	r2, [r7, r6]
    55c0:	52d0      	strh	r0, [r2, r3]
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
    55c2:	3bc5      	subs	r3, #197	; 0xc5
    55c4:	aa02      	add	r2, sp, #8
    55c6:	213c      	movs	r1, #60	; 0x3c
    55c8:	1852      	adds	r2, r2, r1
    55ca:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    55cc:	59bb      	ldr	r3, [r7, r6]
    55ce:	7818      	ldrb	r0, [r3, #0]
    55d0:	a911      	add	r1, sp, #68	; 0x44
    55d2:	47c8      	blx	r9
    55d4:	9010      	str	r0, [sp, #64]	; 0x40
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
    55d6:	23d2      	movs	r3, #210	; 0xd2
    55d8:	59ba      	ldr	r2, [r7, r6]
    55da:	52d0      	strh	r0, [r2, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
    55dc:	2224      	movs	r2, #36	; 0x24
    55de:	59bb      	ldr	r3, [r7, r6]
    55e0:	4659      	mov	r1, fp
    55e2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    55e4:	59bb      	ldr	r3, [r7, r6]
    55e6:	4641      	mov	r1, r8
    55e8:	6099      	str	r1, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
    55ea:	2306      	movs	r3, #6
    55ec:	59b9      	ldr	r1, [r7, r6]
    55ee:	730b      	strb	r3, [r1, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    55f0:	59bb      	ldr	r3, [r7, r6]
    55f2:	21d8      	movs	r1, #216	; 0xd8
    55f4:	6898      	ldr	r0, [r3, #8]
    55f6:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    55f8:	59bb      	ldr	r3, [r7, r6]
    55fa:	7b18      	ldrb	r0, [r3, #12]
    55fc:	3104      	adds	r1, #4
    55fe:	5458      	strb	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
    5600:	59bb      	ldr	r3, [r7, r6]
    5602:	3104      	adds	r1, #4
    5604:	6918      	ldr	r0, [r3, #16]
    5606:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
    5608:	59bb      	ldr	r3, [r7, r6]
    560a:	3104      	adds	r1, #4
    560c:	6958      	ldr	r0, [r3, #20]
    560e:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
    5610:	59bb      	ldr	r3, [r7, r6]
    5612:	3104      	adds	r1, #4
    5614:	6998      	ldr	r0, [r3, #24]
    5616:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    5618:	59bb      	ldr	r3, [r7, r6]
    561a:	3104      	adds	r1, #4
    561c:	69d8      	ldr	r0, [r3, #28]
    561e:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    5620:	59bb      	ldr	r3, [r7, r6]
    5622:	3104      	adds	r1, #4
    5624:	6a18      	ldr	r0, [r3, #32]
    5626:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
    5628:	59bb      	ldr	r3, [r7, r6]
    562a:	5c99      	ldrb	r1, [r3, r2]
    562c:	32d0      	adds	r2, #208	; 0xd0
    562e:	5499      	strb	r1, [r3, r2]
    ResetMacParameters( );
    5630:	4b65      	ldr	r3, [pc, #404]	; (57c8 <LoRaMacInitialization+0x45c>)
    5632:	4798      	blx	r3
    MacCtx.NvmCtx->PublicNetwork = true;
    5634:	23c9      	movs	r3, #201	; 0xc9
    5636:	59ba      	ldr	r2, [r7, r6]
    5638:	4659      	mov	r1, fp
    563a:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacPrimitives = primitives;
    563c:	23d9      	movs	r3, #217	; 0xd9
    563e:	009b      	lsls	r3, r3, #2
    5640:	50fc      	str	r4, [r7, r3]
    MacCtx.MacCallbacks = callbacks;
    5642:	3304      	adds	r3, #4
    5644:	50fd      	str	r5, [r7, r3]
    MacCtx.MacFlags.Value = 0;
    5646:	4b61      	ldr	r3, [pc, #388]	; (57cc <LoRaMacInitialization+0x460>)
    5648:	4652      	mov	r2, sl
    564a:	54fa      	strb	r2, [r7, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
    564c:	3b0a      	subs	r3, #10
    564e:	3bff      	subs	r3, #255	; 0xff
    5650:	465a      	mov	r2, fp
    5652:	50fa      	str	r2, [r7, r3]
    MacCtx.AggregatedLastTxDoneTime = 0;
    5654:	3b1c      	subs	r3, #28
    5656:	4652      	mov	r2, sl
    5658:	50fa      	str	r2, [r7, r3]
    MacCtx.AggregatedTimeOff = 0;
    565a:	3304      	adds	r3, #4
    565c:	50fa      	str	r2, [r7, r3]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
    565e:	3340      	adds	r3, #64	; 0x40
    5660:	18f8      	adds	r0, r7, r3
    5662:	495b      	ldr	r1, [pc, #364]	; (57d0 <LoRaMacInitialization+0x464>)
    5664:	4c5b      	ldr	r4, [pc, #364]	; (57d4 <LoRaMacInitialization+0x468>)
    5666:	47a0      	blx	r4
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
    5668:	23e7      	movs	r3, #231	; 0xe7
    566a:	009b      	lsls	r3, r3, #2
    566c:	18f8      	adds	r0, r7, r3
    566e:	495a      	ldr	r1, [pc, #360]	; (57d8 <LoRaMacInitialization+0x46c>)
    5670:	47a0      	blx	r4
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
    5672:	23ec      	movs	r3, #236	; 0xec
    5674:	009b      	lsls	r3, r3, #2
    5676:	18f8      	adds	r0, r7, r3
    5678:	4958      	ldr	r1, [pc, #352]	; (57dc <LoRaMacInitialization+0x470>)
    567a:	47a0      	blx	r4
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
    567c:	23fd      	movs	r3, #253	; 0xfd
    567e:	009b      	lsls	r3, r3, #2
    5680:	18f8      	adds	r0, r7, r3
    5682:	4957      	ldr	r1, [pc, #348]	; (57e0 <LoRaMacInitialization+0x474>)
    5684:	47a0      	blx	r4
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
    5686:	4b57      	ldr	r3, [pc, #348]	; (57e4 <LoRaMacInitialization+0x478>)
    5688:	18f8      	adds	r0, r7, r3
    568a:	4957      	ldr	r1, [pc, #348]	; (57e8 <LoRaMacInitialization+0x47c>)
    568c:	47a0      	blx	r4
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    568e:	2390      	movs	r3, #144	; 0x90
    5690:	00db      	lsls	r3, r3, #3
    5692:	18f8      	adds	r0, r7, r3
    5694:	4955      	ldr	r1, [pc, #340]	; (57ec <LoRaMacInitialization+0x480>)
    5696:	47a0      	blx	r4
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
    5698:	4b55      	ldr	r3, [pc, #340]	; (57f0 <LoRaMacInitialization+0x484>)
    569a:	18f8      	adds	r0, r7, r3
    569c:	4955      	ldr	r1, [pc, #340]	; (57f4 <LoRaMacInitialization+0x488>)
    569e:	47a0      	blx	r4
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
    56a0:	2395      	movs	r3, #149	; 0x95
    56a2:	00db      	lsls	r3, r3, #3
    56a4:	18f8      	adds	r0, r7, r3
    56a6:	4954      	ldr	r1, [pc, #336]	; (57f8 <LoRaMacInitialization+0x48c>)
    56a8:	47a0      	blx	r4
    MacCtx.InitializationTime = SysTimeGetMcuTime( );
    56aa:	ac02      	add	r4, sp, #8
    56ac:	0020      	movs	r0, r4
    56ae:	4b53      	ldr	r3, [pc, #332]	; (57fc <LoRaMacInitialization+0x490>)
    56b0:	4798      	blx	r3
    56b2:	23d4      	movs	r3, #212	; 0xd4
    56b4:	009b      	lsls	r3, r3, #2
    56b6:	18fb      	adds	r3, r7, r3
    56b8:	cc06      	ldmia	r4!, {r1, r2}
    56ba:	c306      	stmia	r3!, {r1, r2}
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
    56bc:	4a50      	ldr	r2, [pc, #320]	; (5800 <LoRaMacInitialization+0x494>)
    56be:	23db      	movs	r3, #219	; 0xdb
    56c0:	009b      	lsls	r3, r3, #2
    56c2:	50fa      	str	r2, [r7, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
    56c4:	4a4f      	ldr	r2, [pc, #316]	; (5804 <LoRaMacInitialization+0x498>)
    56c6:	3308      	adds	r3, #8
    56c8:	50fa      	str	r2, [r7, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
    56ca:	4a4f      	ldr	r2, [pc, #316]	; (5808 <LoRaMacInitialization+0x49c>)
    56cc:	3308      	adds	r3, #8
    56ce:	50fa      	str	r2, [r7, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    56d0:	4a4e      	ldr	r2, [pc, #312]	; (580c <LoRaMacInitialization+0x4a0>)
    56d2:	3b0c      	subs	r3, #12
    56d4:	50fa      	str	r2, [r7, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    56d6:	4a4e      	ldr	r2, [pc, #312]	; (5810 <LoRaMacInitialization+0x4a4>)
    56d8:	3308      	adds	r3, #8
    56da:	50fa      	str	r2, [r7, r3]
    Radio.Init( &MacCtx.RadioEvents );
    56dc:	3b0c      	subs	r3, #12
    56de:	18f8      	adds	r0, r7, r3
    56e0:	4b4c      	ldr	r3, [pc, #304]	; (5814 <LoRaMacInitialization+0x4a8>)
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	4798      	blx	r3
    params.Type = INIT_TYPE_INIT;
    56e6:	a904      	add	r1, sp, #16
    56e8:	4653      	mov	r3, sl
    56ea:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = NULL;
    56ec:	4653      	mov	r3, sl
    56ee:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    56f0:	59bb      	ldr	r3, [r7, r6]
    56f2:	7818      	ldrb	r0, [r3, #0]
    56f4:	4b48      	ldr	r3, [pc, #288]	; (5818 <LoRaMacInitialization+0x4ac>)
    56f6:	4798      	blx	r3
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
    56f8:	4848      	ldr	r0, [pc, #288]	; (581c <LoRaMacInitialization+0x4b0>)
    56fa:	4b49      	ldr	r3, [pc, #292]	; (5820 <LoRaMacInitialization+0x4b4>)
    56fc:	4798      	blx	r3
    56fe:	0003      	movs	r3, r0
        return LORAMAC_STATUS_CRYPTO_ERROR;
    5700:	2011      	movs	r0, #17
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
    5702:	2b00      	cmp	r3, #0
    5704:	d000      	beq.n	5708 <LoRaMacInitialization+0x39c>
    5706:	e0a7      	b.n	5858 <LoRaMacInitialization+0x4ec>
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
    5708:	4846      	ldr	r0, [pc, #280]	; (5824 <LoRaMacInitialization+0x4b8>)
    570a:	4b47      	ldr	r3, [pc, #284]	; (5828 <LoRaMacInitialization+0x4bc>)
    570c:	4798      	blx	r3
    570e:	0003      	movs	r3, r0
        return LORAMAC_STATUS_CRYPTO_ERROR;
    5710:	2011      	movs	r0, #17
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
    5712:	2b00      	cmp	r3, #0
    5714:	d000      	beq.n	5718 <LoRaMacInitialization+0x3ac>
    5716:	e09f      	b.n	5858 <LoRaMacInitialization+0x4ec>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
    5718:	4844      	ldr	r0, [pc, #272]	; (582c <LoRaMacInitialization+0x4c0>)
    571a:	4b45      	ldr	r3, [pc, #276]	; (5830 <LoRaMacInitialization+0x4c4>)
    571c:	4798      	blx	r3
    571e:	0003      	movs	r3, r0
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    5720:	2013      	movs	r0, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
    5722:	4553      	cmp	r3, sl
    5724:	d000      	beq.n	5728 <LoRaMacInitialization+0x3bc>
    5726:	e097      	b.n	5858 <LoRaMacInitialization+0x4ec>
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    5728:	4842      	ldr	r0, [pc, #264]	; (5834 <LoRaMacInitialization+0x4c8>)
    572a:	4b43      	ldr	r3, [pc, #268]	; (5838 <LoRaMacInitialization+0x4cc>)
    572c:	4798      	blx	r3
    572e:	0003      	movs	r3, r0
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    5730:	2012      	movs	r0, #18
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    5732:	4553      	cmp	r3, sl
    5734:	d000      	beq.n	5738 <LoRaMacInitialization+0x3cc>
    5736:	e08f      	b.n	5858 <LoRaMacInitialization+0x4ec>
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
    5738:	4c1e      	ldr	r4, [pc, #120]	; (57b4 <LoRaMacInitialization+0x448>)
    573a:	59a0      	ldr	r0, [r4, r6]
    573c:	3048      	adds	r0, #72	; 0x48
    573e:	4b3f      	ldr	r3, [pc, #252]	; (583c <LoRaMacInitialization+0x4d0>)
    5740:	4798      	blx	r3
    srand1( Radio.Random( ) );
    5742:	4f34      	ldr	r7, [pc, #208]	; (5814 <LoRaMacInitialization+0x4a8>)
    5744:	697b      	ldr	r3, [r7, #20]
    5746:	4798      	blx	r3
    5748:	4b3d      	ldr	r3, [pc, #244]	; (5840 <LoRaMacInitialization+0x4d4>)
    574a:	4798      	blx	r3
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    574c:	23c9      	movs	r3, #201	; 0xc9
    574e:	59a2      	ldr	r2, [r4, r6]
    5750:	5cd0      	ldrb	r0, [r2, r3]
    5752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5754:	4798      	blx	r3
    Radio.Sleep( );
    5756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5758:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
    575a:	686b      	ldr	r3, [r5, #4]
    575c:	930e      	str	r3, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
    575e:	68eb      	ldr	r3, [r5, #12]
    5760:	9301      	str	r3, [sp, #4]
    5762:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
    5764:	238a      	movs	r3, #138	; 0x8a
    5766:	00db      	lsls	r3, r3, #3
    5768:	18e3      	adds	r3, r4, r3
    576a:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
    576c:	4b35      	ldr	r3, [pc, #212]	; (5844 <LoRaMacInitialization+0x4d8>)
    576e:	18e3      	adds	r3, r4, r3
    5770:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
    5772:	4b35      	ldr	r3, [pc, #212]	; (5848 <LoRaMacInitialization+0x4dc>)
    5774:	18e3      	adds	r3, r4, r3
    5776:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
    5778:	4b14      	ldr	r3, [pc, #80]	; (57cc <LoRaMacInitialization+0x460>)
    577a:	18e3      	adds	r3, r4, r3
    577c:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
    577e:	59a3      	ldr	r3, [r4, r6]
    5780:	001a      	movs	r2, r3
    5782:	3244      	adds	r2, #68	; 0x44
    5784:	920a      	str	r2, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
    5786:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
    5788:	3290      	adds	r2, #144	; 0x90
    578a:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
    578c:	3348      	adds	r3, #72	; 0x48
    578e:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
    5790:	4a2e      	ldr	r2, [pc, #184]	; (584c <LoRaMacInitialization+0x4e0>)
    5792:	a90e      	add	r1, sp, #56	; 0x38
    5794:	a806      	add	r0, sp, #24
    5796:	4b2e      	ldr	r3, [pc, #184]	; (5850 <LoRaMacInitialization+0x4e4>)
    5798:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
    579a:	4650      	mov	r0, sl
    579c:	e05a      	b.n	5854 <LoRaMacInitialization+0x4e8>
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	0000843d 	.word	0x0000843d
    57a4:	000028bd 	.word	0x000028bd
    57a8:	00006dd5 	.word	0x00006dd5
    57ac:	2000113c 	.word	0x2000113c
    57b0:	00001ec7 	.word	0x00001ec7
    57b4:	20000cbc 	.word	0x20000cbc
    57b8:	00000269 	.word	0x00000269
    57bc:	0000026a 	.word	0x0000026a
    57c0:	0000026b 	.word	0x0000026b
    57c4:	00008445 	.word	0x00008445
    57c8:	00002dc9 	.word	0x00002dc9
    57cc:	00000469 	.word	0x00000469
    57d0:	000035c1 	.word	0x000035c1
    57d4:	0000c03d 	.word	0x0000c03d
    57d8:	00002d21 	.word	0x00002d21
    57dc:	00002acd 	.word	0x00002acd
    57e0:	00002921 	.word	0x00002921
    57e4:	0000046c 	.word	0x0000046c
    57e8:	00004239 	.word	0x00004239
    57ec:	000041d1 	.word	0x000041d1
    57f0:	00000494 	.word	0x00000494
    57f4:	00004165 	.word	0x00004165
    57f8:	000040f5 	.word	0x000040f5
    57fc:	0000bfb9 	.word	0x0000bfb9
    5800:	00002ee1 	.word	0x00002ee1
    5804:	00002e9d 	.word	0x00002e9d
    5808:	000027f9 	.word	0x000027f9
    580c:	000027d5 	.word	0x000027d5
    5810:	0000281d 	.word	0x0000281d
    5814:	0001407c 	.word	0x0001407c
    5818:	00008479 	.word	0x00008479
    581c:	0000288d 	.word	0x0000288d
    5820:	0000bb71 	.word	0x0000bb71
    5824:	0000287d 	.word	0x0000287d
    5828:	000076e5 	.word	0x000076e5
    582c:	0000289d 	.word	0x0000289d
    5830:	00006b01 	.word	0x00006b01
    5834:	000028cd 	.word	0x000028cd
    5838:	00008029 	.word	0x00008029
    583c:	00008071 	.word	0x00008071
    5840:	00001e65 	.word	0x00001e65
    5844:	0000040c 	.word	0x0000040c
    5848:	0000043c 	.word	0x0000043c
    584c:	000028ad 	.word	0x000028ad
    5850:	00006a25 	.word	0x00006a25
    5854:	e000      	b.n	5858 <LoRaMacInitialization+0x4ec>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    5856:	2003      	movs	r0, #3
}
    5858:	b013      	add	sp, #76	; 0x4c
    585a:	bc3c      	pop	{r2, r3, r4, r5}
    585c:	4690      	mov	r8, r2
    585e:	4699      	mov	r9, r3
    5860:	46a2      	mov	sl, r4
    5862:	46ab      	mov	fp, r5
    5864:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
    5866:	2003      	movs	r0, #3
    5868:	e7f6      	b.n	5858 <LoRaMacInitialization+0x4ec>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    586a:	2003      	movs	r0, #3
    586c:	e7f4      	b.n	5858 <LoRaMacInitialization+0x4ec>
    586e:	2003      	movs	r0, #3
    5870:	e7f2      	b.n	5858 <LoRaMacInitialization+0x4ec>
    5872:	2003      	movs	r0, #3
    5874:	e7f0      	b.n	5858 <LoRaMacInitialization+0x4ec>
    5876:	46c0      	nop			; (mov r8, r8)

00005878 <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
    5878:	2100      	movs	r1, #0
    587a:	23d8      	movs	r3, #216	; 0xd8
    587c:	009b      	lsls	r3, r3, #2
    587e:	4a02      	ldr	r2, [pc, #8]	; (5888 <LoRaMacStart+0x10>)
    5880:	50d1      	str	r1, [r2, r3]
}
    5882:	2000      	movs	r0, #0
    5884:	4770      	bx	lr
    5886:	46c0      	nop			; (mov r8, r8)
    5888:	20000cbc 	.word	0x20000cbc

0000588c <LoRaMacQueryTxPossible>:
{
    588c:	b5f0      	push	{r4, r5, r6, r7, lr}
    588e:	b089      	sub	sp, #36	; 0x24
    5890:	0004      	movs	r4, r0
    5892:	000d      	movs	r5, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    5894:	2399      	movs	r3, #153	; 0x99
    5896:	00db      	lsls	r3, r3, #3
    5898:	4a2a      	ldr	r2, [pc, #168]	; (5944 <LoRaMacQueryTxPossible+0xb8>)
    589a:	58d3      	ldr	r3, [r2, r3]
    589c:	22cc      	movs	r2, #204	; 0xcc
    589e:	5899      	ldr	r1, [r3, r2]
    58a0:	9102      	str	r1, [sp, #8]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    58a2:	7958      	ldrb	r0, [r3, #5]
    58a4:	466a      	mov	r2, sp
    58a6:	71d0      	strb	r0, [r2, #7]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    58a8:	7918      	ldrb	r0, [r3, #4]
    58aa:	466a      	mov	r2, sp
    58ac:	7190      	strb	r0, [r2, #6]
    size_t macCmdsSize = 0;
    58ae:	2200      	movs	r2, #0
    58b0:	9200      	str	r2, [sp, #0]
        return LORAMAC_STATUS_PARAMETER_INVALID;
    58b2:	3203      	adds	r2, #3
    if( txInfo == NULL )
    58b4:	2d00      	cmp	r5, #0
    58b6:	d02f      	beq.n	5918 <LoRaMacQueryTxPossible+0x8c>
    adrNext.Version = MacCtx.NvmCtx->Version;
    58b8:	a803      	add	r0, sp, #12
    58ba:	2287      	movs	r2, #135	; 0x87
    58bc:	0092      	lsls	r2, r2, #2
    58be:	589a      	ldr	r2, [r3, r2]
    58c0:	9203      	str	r2, [sp, #12]
    adrNext.UpdateChanMask = false;
    58c2:	2200      	movs	r2, #0
    58c4:	7102      	strb	r2, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    58c6:	32ca      	adds	r2, #202	; 0xca
    58c8:	5c9a      	ldrb	r2, [r3, r2]
    58ca:	7142      	strb	r2, [r0, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    58cc:	6081      	str	r1, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    58ce:	22d0      	movs	r2, #208	; 0xd0
    58d0:	5a9a      	ldrh	r2, [r3, r2]
    58d2:	8182      	strh	r2, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    58d4:	22d2      	movs	r2, #210	; 0xd2
    58d6:	5a9a      	ldrh	r2, [r3, r2]
    58d8:	81c2      	strh	r2, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    58da:	22d5      	movs	r2, #213	; 0xd5
    58dc:	5c9a      	ldrb	r2, [r3, r2]
    58de:	7402      	strb	r2, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    58e0:	22d4      	movs	r2, #212	; 0xd4
    58e2:	5c9a      	ldrb	r2, [r3, r2]
    58e4:	7442      	strb	r2, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    58e6:	2280      	movs	r2, #128	; 0x80
    58e8:	0052      	lsls	r2, r2, #1
    58ea:	5c9a      	ldrb	r2, [r3, r2]
    58ec:	7482      	strb	r2, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    58ee:	781b      	ldrb	r3, [r3, #0]
    58f0:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
    58f2:	466b      	mov	r3, sp
    58f4:	1dde      	adds	r6, r3, #7
    58f6:	ab02      	add	r3, sp, #8
    58f8:	466a      	mov	r2, sp
    58fa:	3206      	adds	r2, #6
    58fc:	0031      	movs	r1, r6
    58fe:	4f12      	ldr	r7, [pc, #72]	; (5948 <LoRaMacQueryTxPossible+0xbc>)
    5900:	47b8      	blx	r7
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
    5902:	2000      	movs	r0, #0
    5904:	5630      	ldrsb	r0, [r6, r0]
    5906:	4b11      	ldr	r3, [pc, #68]	; (594c <LoRaMacQueryTxPossible+0xc0>)
    5908:	4798      	blx	r3
    590a:	7068      	strb	r0, [r5, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    590c:	4668      	mov	r0, sp
    590e:	4b10      	ldr	r3, [pc, #64]	; (5950 <LoRaMacQueryTxPossible+0xc4>)
    5910:	4798      	blx	r3
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    5912:	2213      	movs	r2, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    5914:	2800      	cmp	r0, #0
    5916:	d002      	beq.n	591e <LoRaMacQueryTxPossible+0x92>
}
    5918:	0010      	movs	r0, r2
    591a:	b009      	add	sp, #36	; 0x24
    591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
    591e:	9a00      	ldr	r2, [sp, #0]
    5920:	2a0f      	cmp	r2, #15
    5922:	d903      	bls.n	592c <LoRaMacQueryTxPossible+0xa0>
        txInfo->MaxPossibleApplicationDataSize = 0;
    5924:	2300      	movs	r3, #0
    5926:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
    5928:	2208      	movs	r2, #8
    592a:	e7f5      	b.n	5918 <LoRaMacQueryTxPossible+0x8c>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
    592c:	7869      	ldrb	r1, [r5, #1]
    592e:	000b      	movs	r3, r1
    5930:	428a      	cmp	r2, r1
    5932:	d8f7      	bhi.n	5924 <LoRaMacQueryTxPossible+0x98>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
    5934:	1a89      	subs	r1, r1, r2
    5936:	7029      	strb	r1, [r5, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
    5938:	18a2      	adds	r2, r4, r2
           return LORAMAC_STATUS_LENGTH_ERROR;
    593a:	4293      	cmp	r3, r2
    593c:	4192      	sbcs	r2, r2
    593e:	4252      	negs	r2, r2
    5940:	00d2      	lsls	r2, r2, #3
    5942:	e7e9      	b.n	5918 <LoRaMacQueryTxPossible+0x8c>
    5944:	20000cbc 	.word	0x20000cbc
    5948:	00006881 	.word	0x00006881
    594c:	000028dd 	.word	0x000028dd
    5950:	00006d0d 	.word	0x00006d0d

00005954 <LoRaMacMibGetRequestConfirm>:
{
    5954:	b510      	push	{r4, lr}
    5956:	b082      	sub	sp, #8
    5958:	1e04      	subs	r4, r0, #0
    if( mibGet == NULL )
    595a:	d100      	bne.n	595e <LoRaMacMibGetRequestConfirm+0xa>
    595c:	e126      	b.n	5bac <LoRaMacMibGetRequestConfirm+0x258>
    switch( mibGet->Type )
    595e:	7803      	ldrb	r3, [r0, #0]
    5960:	2b33      	cmp	r3, #51	; 0x33
    5962:	d900      	bls.n	5966 <LoRaMacMibGetRequestConfirm+0x12>
    5964:	e11e      	b.n	5ba4 <LoRaMacMibGetRequestConfirm+0x250>
    5966:	009b      	lsls	r3, r3, #2
    5968:	4a92      	ldr	r2, [pc, #584]	; (5bb4 <LoRaMacMibGetRequestConfirm+0x260>)
    596a:	58d3      	ldr	r3, [r2, r3]
    596c:	469f      	mov	pc, r3
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
    596e:	2399      	movs	r3, #153	; 0x99
    5970:	00db      	lsls	r3, r3, #3
    5972:	4a91      	ldr	r2, [pc, #580]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5974:	58d2      	ldr	r2, [r2, r3]
    5976:	23c8      	movs	r3, #200	; 0xc8
    5978:	5cd3      	ldrb	r3, [r2, r3]
    597a:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    597c:	2000      	movs	r0, #0
            break;
    597e:	e116      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
    5980:	2399      	movs	r3, #153	; 0x99
    5982:	00db      	lsls	r3, r3, #3
    5984:	4a8c      	ldr	r2, [pc, #560]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5986:	58d2      	ldr	r2, [r2, r3]
    5988:	2388      	movs	r3, #136	; 0x88
    598a:	009b      	lsls	r3, r3, #2
    598c:	5cd3      	ldrb	r3, [r2, r3]
    598e:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5990:	2000      	movs	r0, #0
            break;
    5992:	e10c      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
    5994:	2399      	movs	r3, #153	; 0x99
    5996:	00db      	lsls	r3, r3, #3
    5998:	4a87      	ldr	r2, [pc, #540]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    599a:	58d2      	ldr	r2, [r2, r3]
    599c:	23ca      	movs	r3, #202	; 0xca
    599e:	5cd3      	ldrb	r3, [r2, r3]
    59a0:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    59a2:	2000      	movs	r0, #0
            break;
    59a4:	e103      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
    59a6:	2399      	movs	r3, #153	; 0x99
    59a8:	00db      	lsls	r3, r3, #3
    59aa:	4a83      	ldr	r2, [pc, #524]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    59ac:	58d3      	ldr	r3, [r2, r3]
    59ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    59b0:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    59b2:	2000      	movs	r0, #0
            break;
    59b4:	e0fb      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
    59b6:	2399      	movs	r3, #153	; 0x99
    59b8:	00db      	lsls	r3, r3, #3
    59ba:	4a7f      	ldr	r2, [pc, #508]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    59bc:	58d3      	ldr	r3, [r2, r3]
    59be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    59c0:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    59c2:	2000      	movs	r0, #0
            break;
    59c4:	e0f3      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
    59c6:	2399      	movs	r3, #153	; 0x99
    59c8:	00db      	lsls	r3, r3, #3
    59ca:	4a7b      	ldr	r2, [pc, #492]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    59cc:	58d2      	ldr	r2, [r2, r3]
    59ce:	23c9      	movs	r3, #201	; 0xc9
    59d0:	5cd3      	ldrb	r3, [r2, r3]
    59d2:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    59d4:	2000      	movs	r0, #0
            break;
    59d6:	e0ea      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    59d8:	2399      	movs	r3, #153	; 0x99
    59da:	00db      	lsls	r3, r3, #3
    59dc:	4a76      	ldr	r2, [pc, #472]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    59de:	58d2      	ldr	r2, [r2, r3]
    59e0:	2316      	movs	r3, #22
    59e2:	33ff      	adds	r3, #255	; 0xff
    59e4:	5cd3      	ldrb	r3, [r2, r3]
    59e6:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    59e8:	2000      	movs	r0, #0
            break;
    59ea:	e0e0      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            getPhy.Attribute = PHY_CHANNELS;
    59ec:	a901      	add	r1, sp, #4
    59ee:	231c      	movs	r3, #28
    59f0:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    59f2:	2399      	movs	r3, #153	; 0x99
    59f4:	00db      	lsls	r3, r3, #3
    59f6:	4a70      	ldr	r2, [pc, #448]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    59f8:	58d3      	ldr	r3, [r2, r3]
    59fa:	7818      	ldrb	r0, [r3, #0]
    59fc:	4b6f      	ldr	r3, [pc, #444]	; (5bbc <LoRaMacMibGetRequestConfirm+0x268>)
    59fe:	4798      	blx	r3
            mibGet->Param.ChannelList = phyParam.Channels;
    5a00:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a02:	2000      	movs	r0, #0
            break;
    5a04:	e0d3      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
    5a06:	2399      	movs	r3, #153	; 0x99
    5a08:	00db      	lsls	r3, r3, #3
    5a0a:	4a6b      	ldr	r2, [pc, #428]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a0c:	58d3      	ldr	r3, [r2, r3]
    5a0e:	3404      	adds	r4, #4
    5a10:	33f8      	adds	r3, #248	; 0xf8
    5a12:	cb06      	ldmia	r3!, {r1, r2}
    5a14:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a16:	2000      	movs	r0, #0
            break;
    5a18:	e0c9      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    5a1a:	2399      	movs	r3, #153	; 0x99
    5a1c:	00db      	lsls	r3, r3, #3
    5a1e:	4a66      	ldr	r2, [pc, #408]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a20:	58d3      	ldr	r3, [r2, r3]
    5a22:	3404      	adds	r4, #4
    5a24:	3328      	adds	r3, #40	; 0x28
    5a26:	cb06      	ldmia	r3!, {r1, r2}
    5a28:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a2a:	2000      	movs	r0, #0
            break;
    5a2c:	e0bf      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
    5a2e:	a901      	add	r1, sp, #4
    5a30:	231a      	movs	r3, #26
    5a32:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5a34:	2399      	movs	r3, #153	; 0x99
    5a36:	00db      	lsls	r3, r3, #3
    5a38:	4a5f      	ldr	r2, [pc, #380]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a3a:	58d3      	ldr	r3, [r2, r3]
    5a3c:	7818      	ldrb	r0, [r3, #0]
    5a3e:	4b5f      	ldr	r3, [pc, #380]	; (5bbc <LoRaMacMibGetRequestConfirm+0x268>)
    5a40:	4798      	blx	r3
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
    5a42:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a44:	2000      	movs	r0, #0
            break;
    5a46:	e0b2      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            getPhy.Attribute = PHY_CHANNELS_MASK;
    5a48:	a901      	add	r1, sp, #4
    5a4a:	2319      	movs	r3, #25
    5a4c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5a4e:	2399      	movs	r3, #153	; 0x99
    5a50:	00db      	lsls	r3, r3, #3
    5a52:	4a59      	ldr	r2, [pc, #356]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a54:	58d3      	ldr	r3, [r2, r3]
    5a56:	7818      	ldrb	r0, [r3, #0]
    5a58:	4b58      	ldr	r3, [pc, #352]	; (5bbc <LoRaMacMibGetRequestConfirm+0x268>)
    5a5a:	4798      	blx	r3
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
    5a5c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a5e:	2000      	movs	r0, #0
            break;
    5a60:	e0a5      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    5a62:	2399      	movs	r3, #153	; 0x99
    5a64:	00db      	lsls	r3, r3, #3
    5a66:	4a54      	ldr	r2, [pc, #336]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a68:	58d2      	ldr	r2, [r2, r3]
    5a6a:	23f4      	movs	r3, #244	; 0xf4
    5a6c:	5cd3      	ldrb	r3, [r2, r3]
    5a6e:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a70:	2000      	movs	r0, #0
            break;
    5a72:	e09c      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
    5a74:	2399      	movs	r3, #153	; 0x99
    5a76:	00db      	lsls	r3, r3, #3
    5a78:	4a4f      	ldr	r2, [pc, #316]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a7a:	58d2      	ldr	r2, [r2, r3]
    5a7c:	23e0      	movs	r3, #224	; 0xe0
    5a7e:	58d3      	ldr	r3, [r2, r3]
    5a80:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a82:	2000      	movs	r0, #0
            break;
    5a84:	e093      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
    5a86:	2399      	movs	r3, #153	; 0x99
    5a88:	00db      	lsls	r3, r3, #3
    5a8a:	4a4b      	ldr	r2, [pc, #300]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a8c:	58d2      	ldr	r2, [r2, r3]
    5a8e:	23e4      	movs	r3, #228	; 0xe4
    5a90:	58d3      	ldr	r3, [r2, r3]
    5a92:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5a94:	2000      	movs	r0, #0
            break;
    5a96:	e08a      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
    5a98:	2399      	movs	r3, #153	; 0x99
    5a9a:	00db      	lsls	r3, r3, #3
    5a9c:	4a46      	ldr	r2, [pc, #280]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5a9e:	58d2      	ldr	r2, [r2, r3]
    5aa0:	23e8      	movs	r3, #232	; 0xe8
    5aa2:	58d3      	ldr	r3, [r2, r3]
    5aa4:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5aa6:	2000      	movs	r0, #0
            break;
    5aa8:	e081      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
    5aaa:	2399      	movs	r3, #153	; 0x99
    5aac:	00db      	lsls	r3, r3, #3
    5aae:	4a42      	ldr	r2, [pc, #264]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5ab0:	58d2      	ldr	r2, [r2, r3]
    5ab2:	23ec      	movs	r3, #236	; 0xec
    5ab4:	58d3      	ldr	r3, [r2, r3]
    5ab6:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5ab8:	2000      	movs	r0, #0
            break;
    5aba:	e078      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
    5abc:	2399      	movs	r3, #153	; 0x99
    5abe:	00db      	lsls	r3, r3, #3
    5ac0:	4a3d      	ldr	r2, [pc, #244]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5ac2:	58d2      	ldr	r2, [r2, r3]
    5ac4:	23f0      	movs	r3, #240	; 0xf0
    5ac6:	58d3      	ldr	r3, [r2, r3]
    5ac8:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5aca:	2000      	movs	r0, #0
            break;
    5acc:	e06f      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    5ace:	2399      	movs	r3, #153	; 0x99
    5ad0:	00db      	lsls	r3, r3, #3
    5ad2:	4a39      	ldr	r2, [pc, #228]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5ad4:	58d3      	ldr	r3, [r2, r3]
    5ad6:	795b      	ldrb	r3, [r3, #5]
    5ad8:	b25b      	sxtb	r3, r3
    5ada:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5adc:	2000      	movs	r0, #0
            break;
    5ade:	e066      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    5ae0:	2399      	movs	r3, #153	; 0x99
    5ae2:	00db      	lsls	r3, r3, #3
    5ae4:	4a34      	ldr	r2, [pc, #208]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5ae6:	58d2      	ldr	r2, [r2, r3]
    5ae8:	23d5      	movs	r3, #213	; 0xd5
    5aea:	56d3      	ldrsb	r3, [r2, r3]
    5aec:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5aee:	2000      	movs	r0, #0
            break;
    5af0:	e05d      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    5af2:	2399      	movs	r3, #153	; 0x99
    5af4:	00db      	lsls	r3, r3, #3
    5af6:	4a30      	ldr	r2, [pc, #192]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5af8:	58d3      	ldr	r3, [r2, r3]
    5afa:	791b      	ldrb	r3, [r3, #4]
    5afc:	b25b      	sxtb	r3, r3
    5afe:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b00:	2000      	movs	r0, #0
            break;
    5b02:	e054      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    5b04:	2399      	movs	r3, #153	; 0x99
    5b06:	00db      	lsls	r3, r3, #3
    5b08:	4a2b      	ldr	r2, [pc, #172]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b0a:	58d2      	ldr	r2, [r2, r3]
    5b0c:	23d4      	movs	r3, #212	; 0xd4
    5b0e:	56d3      	ldrsb	r3, [r2, r3]
    5b10:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b12:	2000      	movs	r0, #0
            break;
    5b14:	e04b      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
    5b16:	2399      	movs	r3, #153	; 0x99
    5b18:	00db      	lsls	r3, r3, #3
    5b1a:	4a27      	ldr	r2, [pc, #156]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b1c:	58d2      	ldr	r2, [r2, r3]
    5b1e:	23d8      	movs	r3, #216	; 0xd8
    5b20:	58d3      	ldr	r3, [r2, r3]
    5b22:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b24:	2000      	movs	r0, #0
            break;
    5b26:	e042      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
    5b28:	2399      	movs	r3, #153	; 0x99
    5b2a:	00db      	lsls	r3, r3, #3
    5b2c:	4a22      	ldr	r2, [pc, #136]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b2e:	58d2      	ldr	r2, [r2, r3]
    5b30:	23dc      	movs	r3, #220	; 0xdc
    5b32:	5cd3      	ldrb	r3, [r2, r3]
    5b34:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b36:	2000      	movs	r0, #0
            break;
    5b38:	e039      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    5b3a:	2399      	movs	r3, #153	; 0x99
    5b3c:	00db      	lsls	r3, r3, #3
    5b3e:	4a1e      	ldr	r2, [pc, #120]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b40:	58d2      	ldr	r2, [r2, r3]
    5b42:	2384      	movs	r3, #132	; 0x84
    5b44:	005b      	lsls	r3, r3, #1
    5b46:	58d3      	ldr	r3, [r2, r3]
    5b48:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b4a:	2000      	movs	r0, #0
            break;
    5b4c:	e02f      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Contexts = GetCtxs( );
    5b4e:	4b1c      	ldr	r3, [pc, #112]	; (5bc0 <LoRaMacMibGetRequestConfirm+0x26c>)
    5b50:	4798      	blx	r3
    5b52:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b54:	2000      	movs	r0, #0
            break;
    5b56:	e02a      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    5b58:	2399      	movs	r3, #153	; 0x99
    5b5a:	00db      	lsls	r3, r3, #3
    5b5c:	4a16      	ldr	r2, [pc, #88]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b5e:	58d3      	ldr	r3, [r2, r3]
    5b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5b62:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b64:	2000      	movs	r0, #0
            break;
    5b66:	e022      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Rejoin0CycleInSec = MacCtx.NvmCtx->Rejoin0CycleInSec;
    5b68:	2399      	movs	r3, #153	; 0x99
    5b6a:	00db      	lsls	r3, r3, #3
    5b6c:	4a12      	ldr	r2, [pc, #72]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b6e:	58d2      	ldr	r2, [r2, r3]
    5b70:	238b      	movs	r3, #139	; 0x8b
    5b72:	009b      	lsls	r3, r3, #2
    5b74:	58d3      	ldr	r3, [r2, r3]
    5b76:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b78:	2000      	movs	r0, #0
            break;
    5b7a:	e018      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Rejoin1CycleInSec = MacCtx.NvmCtx->Rejoin1CycleInSec;
    5b7c:	2399      	movs	r3, #153	; 0x99
    5b7e:	00db      	lsls	r3, r3, #3
    5b80:	4a0d      	ldr	r2, [pc, #52]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b82:	58d2      	ldr	r2, [r2, r3]
    5b84:	238c      	movs	r3, #140	; 0x8c
    5b86:	009b      	lsls	r3, r3, #2
    5b88:	58d3      	ldr	r3, [r2, r3]
    5b8a:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5b8c:	2000      	movs	r0, #0
            break;
    5b8e:	e00e      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            mibGet->Param.Rejoin2CycleInSec = MacCtx.NvmCtx->Rejoin2CycleInSec;
    5b90:	2399      	movs	r3, #153	; 0x99
    5b92:	00db      	lsls	r3, r3, #3
    5b94:	4a08      	ldr	r2, [pc, #32]	; (5bb8 <LoRaMacMibGetRequestConfirm+0x264>)
    5b96:	58d2      	ldr	r2, [r2, r3]
    5b98:	238d      	movs	r3, #141	; 0x8d
    5b9a:	009b      	lsls	r3, r3, #2
    5b9c:	58d3      	ldr	r3, [r2, r3]
    5b9e:	6043      	str	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5ba0:	2000      	movs	r0, #0
            break;
    5ba2:	e004      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
    5ba4:	0020      	movs	r0, r4
    5ba6:	4b07      	ldr	r3, [pc, #28]	; (5bc4 <LoRaMacMibGetRequestConfirm+0x270>)
    5ba8:	4798      	blx	r3
            break;
    5baa:	e000      	b.n	5bae <LoRaMacMibGetRequestConfirm+0x25a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    5bac:	2003      	movs	r0, #3
}
    5bae:	b002      	add	sp, #8
    5bb0:	bd10      	pop	{r4, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	00014168 	.word	0x00014168
    5bb8:	20000cbc 	.word	0x20000cbc
    5bbc:	00008445 	.word	0x00008445
    5bc0:	00004329 	.word	0x00004329
    5bc4:	00006a61 	.word	0x00006a61

00005bc8 <LoRaMacMibSetRequestConfirm>:
{
    5bc8:	b570      	push	{r4, r5, r6, lr}
    5bca:	b086      	sub	sp, #24
    5bcc:	1e04      	subs	r4, r0, #0
    if( mibSet == NULL )
    5bce:	d100      	bne.n	5bd2 <LoRaMacMibSetRequestConfirm+0xa>
    5bd0:	e3ca      	b.n	6368 <LoRaMacMibSetRequestConfirm+0x7a0>
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
    5bd2:	23d8      	movs	r3, #216	; 0xd8
    5bd4:	009b      	lsls	r3, r3, #2
    5bd6:	4abf      	ldr	r2, [pc, #764]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5bd8:	58d3      	ldr	r3, [r2, r3]
        return LORAMAC_STATUS_BUSY;
    5bda:	2501      	movs	r5, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
    5bdc:	079b      	lsls	r3, r3, #30
    5bde:	d500      	bpl.n	5be2 <LoRaMacMibSetRequestConfirm+0x1a>
    5be0:	e08f      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    switch( mibSet->Type )
    5be2:	7803      	ldrb	r3, [r0, #0]
    5be4:	2b32      	cmp	r3, #50	; 0x32
    5be6:	d900      	bls.n	5bea <LoRaMacMibSetRequestConfirm+0x22>
    5be8:	e38b      	b.n	6302 <LoRaMacMibSetRequestConfirm+0x73a>
    5bea:	009b      	lsls	r3, r3, #2
    5bec:	4aba      	ldr	r2, [pc, #744]	; (5ed8 <LoRaMacMibSetRequestConfirm+0x310>)
    5bee:	58d3      	ldr	r3, [r2, r3]
    5bf0:	469f      	mov	pc, r3
            status = SwitchClass( mibSet->Param.Class );
    5bf2:	7904      	ldrb	r4, [r0, #4]
    switch( MacCtx.NvmCtx->DeviceClass )
    5bf4:	2399      	movs	r3, #153	; 0x99
    5bf6:	00db      	lsls	r3, r3, #3
    5bf8:	4ab6      	ldr	r2, [pc, #728]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5bfa:	58d2      	ldr	r2, [r2, r3]
    5bfc:	23c8      	movs	r3, #200	; 0xc8
    5bfe:	5cd3      	ldrb	r3, [r2, r3]
    5c00:	2b01      	cmp	r3, #1
    5c02:	d040      	beq.n	5c86 <LoRaMacMibSetRequestConfirm+0xbe>
    5c04:	2b00      	cmp	r3, #0
    5c06:	d003      	beq.n	5c10 <LoRaMacMibSetRequestConfirm+0x48>
    5c08:	2b02      	cmp	r3, #2
    5c0a:	d048      	beq.n	5c9e <LoRaMacMibSetRequestConfirm+0xd6>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    5c0c:	2503      	movs	r5, #3
    5c0e:	e073      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( deviceClass == CLASS_B )
    5c10:	2c01      	cmp	r4, #1
    5c12:	d02b      	beq.n	5c6c <LoRaMacMibSetRequestConfirm+0xa4>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    5c14:	2503      	movs	r5, #3
            if( deviceClass == CLASS_C )
    5c16:	2c02      	cmp	r4, #2
    5c18:	d16e      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    5c1a:	2102      	movs	r1, #2
    5c1c:	23c8      	movs	r3, #200	; 0xc8
    5c1e:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->NodeAckRequested = false;
    5c20:	4cac      	ldr	r4, [pc, #688]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5c22:	2599      	movs	r5, #153	; 0x99
    5c24:	00ed      	lsls	r5, r5, #3
    5c26:	2200      	movs	r2, #0
    5c28:	4bac      	ldr	r3, [pc, #688]	; (5edc <LoRaMacMibSetRequestConfirm+0x314>)
    5c2a:	5961      	ldr	r1, [r4, r5]
    5c2c:	54ca      	strb	r2, [r1, r3]
                Radio.Sleep( );
    5c2e:	4bac      	ldr	r3, [pc, #688]	; (5ee0 <LoRaMacMibSetRequestConfirm+0x318>)
    5c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c32:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    5c34:	5963      	ldr	r3, [r4, r5]
    5c36:	22dc      	movs	r2, #220	; 0xdc
    5c38:	5c9a      	ldrb	r2, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    5c3a:	21fc      	movs	r1, #252	; 0xfc
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    5c3c:	5659      	ldrsb	r1, [r3, r1]
    5c3e:	7818      	ldrb	r0, [r3, #0]
    5c40:	26f8      	movs	r6, #248	; 0xf8
    5c42:	00b6      	lsls	r6, r6, #2
    5c44:	19a6      	adds	r6, r4, r6
    5c46:	9600      	str	r6, [sp, #0]
    5c48:	26d8      	movs	r6, #216	; 0xd8
    5c4a:	599b      	ldr	r3, [r3, r6]
    5c4c:	4ea5      	ldr	r6, [pc, #660]	; (5ee4 <LoRaMacMibSetRequestConfirm+0x31c>)
    5c4e:	47b0      	blx	r6
                OpenContinuousRx2Window( );
    5c50:	4ba5      	ldr	r3, [pc, #660]	; (5ee8 <LoRaMacMibSetRequestConfirm+0x320>)
    5c52:	4798      	blx	r3
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    5c54:	5961      	ldr	r1, [r4, r5]
    5c56:	4ba5      	ldr	r3, [pc, #660]	; (5eec <LoRaMacMibSetRequestConfirm+0x324>)
    5c58:	5ccb      	ldrb	r3, [r1, r3]
                status = LORAMAC_STATUS_OK;
    5c5a:	2500      	movs	r5, #0
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    5c5c:	2b01      	cmp	r3, #1
    5c5e:	d14b      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    5c60:	31c8      	adds	r1, #200	; 0xc8
    5c62:	2201      	movs	r2, #1
    5c64:	2020      	movs	r0, #32
    5c66:	4ba2      	ldr	r3, [pc, #648]	; (5ef0 <LoRaMacMibSetRequestConfirm+0x328>)
    5c68:	4798      	blx	r3
    5c6a:	e045      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LoRaMacClassBSwitchClass( deviceClass );
    5c6c:	2001      	movs	r0, #1
    5c6e:	4ba1      	ldr	r3, [pc, #644]	; (5ef4 <LoRaMacMibSetRequestConfirm+0x32c>)
    5c70:	4798      	blx	r3
    5c72:	1e05      	subs	r5, r0, #0
                if( status == LORAMAC_STATUS_OK )
    5c74:	d140      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
    5c76:	2399      	movs	r3, #153	; 0x99
    5c78:	00db      	lsls	r3, r3, #3
    5c7a:	4a96      	ldr	r2, [pc, #600]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5c7c:	58d2      	ldr	r2, [r2, r3]
    5c7e:	2101      	movs	r1, #1
    5c80:	23c8      	movs	r3, #200	; 0xc8
    5c82:	54d1      	strb	r1, [r2, r3]
    5c84:	e038      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            status = LoRaMacClassBSwitchClass( deviceClass );
    5c86:	0020      	movs	r0, r4
    5c88:	4b9a      	ldr	r3, [pc, #616]	; (5ef4 <LoRaMacMibSetRequestConfirm+0x32c>)
    5c8a:	4798      	blx	r3
    5c8c:	1e05      	subs	r5, r0, #0
            if( status == LORAMAC_STATUS_OK )
    5c8e:	d133      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    5c90:	2399      	movs	r3, #153	; 0x99
    5c92:	00db      	lsls	r3, r3, #3
    5c94:	4a8f      	ldr	r2, [pc, #572]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5c96:	58d2      	ldr	r2, [r2, r3]
    5c98:	23c8      	movs	r3, #200	; 0xc8
    5c9a:	54d4      	strb	r4, [r2, r3]
    5c9c:	e02c      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    5c9e:	2503      	movs	r5, #3
            if( deviceClass == CLASS_A )
    5ca0:	2c00      	cmp	r4, #0
    5ca2:	d129      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    5ca4:	2100      	movs	r1, #0
    5ca6:	23c8      	movs	r3, #200	; 0xc8
    5ca8:	54d1      	strb	r1, [r2, r3]
                Radio.Sleep( );
    5caa:	4b8d      	ldr	r3, [pc, #564]	; (5ee0 <LoRaMacMibSetRequestConfirm+0x318>)
    5cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5cae:	4798      	blx	r3
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    5cb0:	2399      	movs	r3, #153	; 0x99
    5cb2:	00db      	lsls	r3, r3, #3
    5cb4:	4a87      	ldr	r2, [pc, #540]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5cb6:	58d1      	ldr	r1, [r2, r3]
    5cb8:	4b8c      	ldr	r3, [pc, #560]	; (5eec <LoRaMacMibSetRequestConfirm+0x324>)
    5cba:	5ccb      	ldrb	r3, [r1, r3]
                status = LORAMAC_STATUS_OK;
    5cbc:	2500      	movs	r5, #0
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    5cbe:	2b01      	cmp	r3, #1
    5cc0:	d11a      	bne.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    5cc2:	31c8      	adds	r1, #200	; 0xc8
    5cc4:	2201      	movs	r2, #1
    5cc6:	2020      	movs	r0, #32
    5cc8:	4b89      	ldr	r3, [pc, #548]	; (5ef0 <LoRaMacMibSetRequestConfirm+0x328>)
    5cca:	4798      	blx	r3
    5ccc:	e014      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
    5cce:	7903      	ldrb	r3, [r0, #4]
    5cd0:	2b02      	cmp	r3, #2
    5cd2:	d100      	bne.n	5cd6 <LoRaMacMibSetRequestConfirm+0x10e>
    5cd4:	e31a      	b.n	630c <LoRaMacMibSetRequestConfirm+0x744>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
    5cd6:	2299      	movs	r2, #153	; 0x99
    5cd8:	00d2      	lsls	r2, r2, #3
    5cda:	497e      	ldr	r1, [pc, #504]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5cdc:	5889      	ldr	r1, [r1, r2]
    5cde:	2288      	movs	r2, #136	; 0x88
    5ce0:	0092      	lsls	r2, r2, #2
    5ce2:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5ce4:	2500      	movs	r5, #0
    5ce6:	e007      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
    5ce8:	2399      	movs	r3, #153	; 0x99
    5cea:	00db      	lsls	r3, r3, #3
    5cec:	4a79      	ldr	r2, [pc, #484]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5cee:	58d2      	ldr	r2, [r2, r3]
    5cf0:	7901      	ldrb	r1, [r0, #4]
    5cf2:	23ca      	movs	r3, #202	; 0xca
    5cf4:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5cf6:	2500      	movs	r5, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
    5cf8:	2001      	movs	r0, #1
    5cfa:	4c7f      	ldr	r4, [pc, #508]	; (5ef8 <LoRaMacMibSetRequestConfirm+0x330>)
    5cfc:	47a0      	blx	r4
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
    5cfe:	2000      	movs	r0, #0
    5d00:	47a0      	blx	r4
}
    5d02:	0028      	movs	r0, r5
    5d04:	b006      	add	sp, #24
    5d06:	bd70      	pop	{r4, r5, r6, pc}
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
    5d08:	2399      	movs	r3, #153	; 0x99
    5d0a:	00db      	lsls	r3, r3, #3
    5d0c:	4a71      	ldr	r2, [pc, #452]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5d0e:	58d3      	ldr	r3, [r2, r3]
    5d10:	6842      	ldr	r2, [r0, #4]
    5d12:	641a      	str	r2, [r3, #64]	; 0x40
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d14:	2500      	movs	r5, #0
            break;
    5d16:	e7ef      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
    5d18:	2399      	movs	r3, #153	; 0x99
    5d1a:	00db      	lsls	r3, r3, #3
    5d1c:	4a6d      	ldr	r2, [pc, #436]	; (5ed4 <LoRaMacMibSetRequestConfirm+0x30c>)
    5d1e:	58d3      	ldr	r3, [r2, r3]
    5d20:	6842      	ldr	r2, [r0, #4]
    5d22:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d24:	2500      	movs	r5, #0
            break;
    5d26:	e7e7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.AppKey != NULL )
    5d28:	6841      	ldr	r1, [r0, #4]
    5d2a:	2900      	cmp	r1, #0
    5d2c:	d100      	bne.n	5d30 <LoRaMacMibSetRequestConfirm+0x168>
    5d2e:	e2ef      	b.n	6310 <LoRaMacMibSetRequestConfirm+0x748>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
    5d30:	2000      	movs	r0, #0
    5d32:	4b72      	ldr	r3, [pc, #456]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5d34:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5d36:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
    5d38:	2800      	cmp	r0, #0
    5d3a:	d1e2      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d3c:	2500      	movs	r5, #0
    5d3e:	e7db      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.NwkKey != NULL )
    5d40:	6841      	ldr	r1, [r0, #4]
    5d42:	2900      	cmp	r1, #0
    5d44:	d100      	bne.n	5d48 <LoRaMacMibSetRequestConfirm+0x180>
    5d46:	e2e5      	b.n	6314 <LoRaMacMibSetRequestConfirm+0x74c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
    5d48:	2001      	movs	r0, #1
    5d4a:	4b6c      	ldr	r3, [pc, #432]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5d4c:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5d4e:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
    5d50:	2800      	cmp	r0, #0
    5d52:	d1d6      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d54:	2500      	movs	r5, #0
    5d56:	e7cf      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.JSIntKey != NULL )
    5d58:	6841      	ldr	r1, [r0, #4]
    5d5a:	2900      	cmp	r1, #0
    5d5c:	d100      	bne.n	5d60 <LoRaMacMibSetRequestConfirm+0x198>
    5d5e:	e2db      	b.n	6318 <LoRaMacMibSetRequestConfirm+0x750>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
    5d60:	2002      	movs	r0, #2
    5d62:	4b66      	ldr	r3, [pc, #408]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5d64:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5d66:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
    5d68:	2800      	cmp	r0, #0
    5d6a:	d1ca      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d6c:	2500      	movs	r5, #0
    5d6e:	e7c3      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.JSEncKey != NULL )
    5d70:	6841      	ldr	r1, [r0, #4]
    5d72:	2900      	cmp	r1, #0
    5d74:	d100      	bne.n	5d78 <LoRaMacMibSetRequestConfirm+0x1b0>
    5d76:	e2d1      	b.n	631c <LoRaMacMibSetRequestConfirm+0x754>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
    5d78:	2003      	movs	r0, #3
    5d7a:	4b60      	ldr	r3, [pc, #384]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5d7c:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5d7e:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
    5d80:	2800      	cmp	r0, #0
    5d82:	d1be      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d84:	2500      	movs	r5, #0
    5d86:	e7b7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.FNwkSIntKey != NULL )
    5d88:	6841      	ldr	r1, [r0, #4]
    5d8a:	2900      	cmp	r1, #0
    5d8c:	d100      	bne.n	5d90 <LoRaMacMibSetRequestConfirm+0x1c8>
    5d8e:	e2c7      	b.n	6320 <LoRaMacMibSetRequestConfirm+0x758>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
    5d90:	2004      	movs	r0, #4
    5d92:	4b5a      	ldr	r3, [pc, #360]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5d94:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5d96:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
    5d98:	2800      	cmp	r0, #0
    5d9a:	d1b2      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5d9c:	2500      	movs	r5, #0
    5d9e:	e7ab      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.SNwkSIntKey != NULL )
    5da0:	6841      	ldr	r1, [r0, #4]
    5da2:	2900      	cmp	r1, #0
    5da4:	d100      	bne.n	5da8 <LoRaMacMibSetRequestConfirm+0x1e0>
    5da6:	e2bd      	b.n	6324 <LoRaMacMibSetRequestConfirm+0x75c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
    5da8:	2005      	movs	r0, #5
    5daa:	4b54      	ldr	r3, [pc, #336]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5dac:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5dae:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
    5db0:	2800      	cmp	r0, #0
    5db2:	d1a6      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5db4:	2500      	movs	r5, #0
    5db6:	e79f      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.NwkSEncKey != NULL )
    5db8:	6841      	ldr	r1, [r0, #4]
    5dba:	2900      	cmp	r1, #0
    5dbc:	d100      	bne.n	5dc0 <LoRaMacMibSetRequestConfirm+0x1f8>
    5dbe:	e2b3      	b.n	6328 <LoRaMacMibSetRequestConfirm+0x760>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
    5dc0:	2006      	movs	r0, #6
    5dc2:	4b4e      	ldr	r3, [pc, #312]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5dc4:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5dc6:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
    5dc8:	2800      	cmp	r0, #0
    5dca:	d19a      	bne.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5dcc:	2500      	movs	r5, #0
    5dce:	e793      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.AppSKey != NULL )
    5dd0:	6841      	ldr	r1, [r0, #4]
    5dd2:	2900      	cmp	r1, #0
    5dd4:	d100      	bne.n	5dd8 <LoRaMacMibSetRequestConfirm+0x210>
    5dd6:	e2a9      	b.n	632c <LoRaMacMibSetRequestConfirm+0x764>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
    5dd8:	2007      	movs	r0, #7
    5dda:	4b48      	ldr	r3, [pc, #288]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5ddc:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5dde:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
    5de0:	2800      	cmp	r0, #0
    5de2:	d000      	beq.n	5de6 <LoRaMacMibSetRequestConfirm+0x21e>
    5de4:	e78d      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5de6:	2500      	movs	r5, #0
    5de8:	e786      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McKEKey != NULL )
    5dea:	6841      	ldr	r1, [r0, #4]
    5dec:	2900      	cmp	r1, #0
    5dee:	d100      	bne.n	5df2 <LoRaMacMibSetRequestConfirm+0x22a>
    5df0:	e29e      	b.n	6330 <LoRaMacMibSetRequestConfirm+0x768>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
    5df2:	207f      	movs	r0, #127	; 0x7f
    5df4:	4b41      	ldr	r3, [pc, #260]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5df6:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5df8:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d000      	beq.n	5e00 <LoRaMacMibSetRequestConfirm+0x238>
    5dfe:	e780      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e00:	2500      	movs	r5, #0
    5e02:	e779      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McKey0 != NULL )
    5e04:	6841      	ldr	r1, [r0, #4]
    5e06:	2900      	cmp	r1, #0
    5e08:	d100      	bne.n	5e0c <LoRaMacMibSetRequestConfirm+0x244>
    5e0a:	e293      	b.n	6334 <LoRaMacMibSetRequestConfirm+0x76c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
    5e0c:	2080      	movs	r0, #128	; 0x80
    5e0e:	4b3b      	ldr	r3, [pc, #236]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e10:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e12:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
    5e14:	2800      	cmp	r0, #0
    5e16:	d000      	beq.n	5e1a <LoRaMacMibSetRequestConfirm+0x252>
    5e18:	e773      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e1a:	2500      	movs	r5, #0
    5e1c:	e76c      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McAppSKey0 != NULL )
    5e1e:	6841      	ldr	r1, [r0, #4]
    5e20:	2900      	cmp	r1, #0
    5e22:	d100      	bne.n	5e26 <LoRaMacMibSetRequestConfirm+0x25e>
    5e24:	e288      	b.n	6338 <LoRaMacMibSetRequestConfirm+0x770>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
    5e26:	2081      	movs	r0, #129	; 0x81
    5e28:	4b34      	ldr	r3, [pc, #208]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e2a:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e2c:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
    5e2e:	2800      	cmp	r0, #0
    5e30:	d000      	beq.n	5e34 <LoRaMacMibSetRequestConfirm+0x26c>
    5e32:	e766      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e34:	2500      	movs	r5, #0
    5e36:	e75f      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McNwkSKey0 != NULL )
    5e38:	6841      	ldr	r1, [r0, #4]
    5e3a:	2900      	cmp	r1, #0
    5e3c:	d100      	bne.n	5e40 <LoRaMacMibSetRequestConfirm+0x278>
    5e3e:	e27d      	b.n	633c <LoRaMacMibSetRequestConfirm+0x774>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
    5e40:	2082      	movs	r0, #130	; 0x82
    5e42:	4b2e      	ldr	r3, [pc, #184]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e44:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e46:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
    5e48:	2800      	cmp	r0, #0
    5e4a:	d000      	beq.n	5e4e <LoRaMacMibSetRequestConfirm+0x286>
    5e4c:	e759      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e4e:	2500      	movs	r5, #0
    5e50:	e752      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McKey1 != NULL )
    5e52:	6841      	ldr	r1, [r0, #4]
    5e54:	2900      	cmp	r1, #0
    5e56:	d100      	bne.n	5e5a <LoRaMacMibSetRequestConfirm+0x292>
    5e58:	e272      	b.n	6340 <LoRaMacMibSetRequestConfirm+0x778>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
    5e5a:	2083      	movs	r0, #131	; 0x83
    5e5c:	4b27      	ldr	r3, [pc, #156]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e5e:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e60:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
    5e62:	2800      	cmp	r0, #0
    5e64:	d000      	beq.n	5e68 <LoRaMacMibSetRequestConfirm+0x2a0>
    5e66:	e74c      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e68:	2500      	movs	r5, #0
    5e6a:	e745      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McAppSKey1 != NULL )
    5e6c:	6841      	ldr	r1, [r0, #4]
    5e6e:	2900      	cmp	r1, #0
    5e70:	d100      	bne.n	5e74 <LoRaMacMibSetRequestConfirm+0x2ac>
    5e72:	e267      	b.n	6344 <LoRaMacMibSetRequestConfirm+0x77c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
    5e74:	2084      	movs	r0, #132	; 0x84
    5e76:	4b21      	ldr	r3, [pc, #132]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e78:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e7a:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
    5e7c:	2800      	cmp	r0, #0
    5e7e:	d000      	beq.n	5e82 <LoRaMacMibSetRequestConfirm+0x2ba>
    5e80:	e73f      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e82:	2500      	movs	r5, #0
    5e84:	e738      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McNwkSKey1 != NULL )
    5e86:	6841      	ldr	r1, [r0, #4]
    5e88:	2900      	cmp	r1, #0
    5e8a:	d100      	bne.n	5e8e <LoRaMacMibSetRequestConfirm+0x2c6>
    5e8c:	e25c      	b.n	6348 <LoRaMacMibSetRequestConfirm+0x780>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
    5e8e:	2085      	movs	r0, #133	; 0x85
    5e90:	4b1a      	ldr	r3, [pc, #104]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5e92:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5e94:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
    5e96:	2800      	cmp	r0, #0
    5e98:	d000      	beq.n	5e9c <LoRaMacMibSetRequestConfirm+0x2d4>
    5e9a:	e732      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5e9c:	2500      	movs	r5, #0
    5e9e:	e72b      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McKey2 != NULL )
    5ea0:	6841      	ldr	r1, [r0, #4]
    5ea2:	2900      	cmp	r1, #0
    5ea4:	d100      	bne.n	5ea8 <LoRaMacMibSetRequestConfirm+0x2e0>
    5ea6:	e251      	b.n	634c <LoRaMacMibSetRequestConfirm+0x784>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
    5ea8:	2086      	movs	r0, #134	; 0x86
    5eaa:	4b14      	ldr	r3, [pc, #80]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5eac:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5eae:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d000      	beq.n	5eb6 <LoRaMacMibSetRequestConfirm+0x2ee>
    5eb4:	e725      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5eb6:	2500      	movs	r5, #0
    5eb8:	e71e      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McAppSKey2 != NULL )
    5eba:	6841      	ldr	r1, [r0, #4]
    5ebc:	2900      	cmp	r1, #0
    5ebe:	d100      	bne.n	5ec2 <LoRaMacMibSetRequestConfirm+0x2fa>
    5ec0:	e246      	b.n	6350 <LoRaMacMibSetRequestConfirm+0x788>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
    5ec2:	2087      	movs	r0, #135	; 0x87
    5ec4:	4b0d      	ldr	r3, [pc, #52]	; (5efc <LoRaMacMibSetRequestConfirm+0x334>)
    5ec6:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5ec8:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
    5eca:	2800      	cmp	r0, #0
    5ecc:	d000      	beq.n	5ed0 <LoRaMacMibSetRequestConfirm+0x308>
    5ece:	e718      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5ed0:	2500      	movs	r5, #0
    5ed2:	e711      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
    5ed4:	20000cbc 	.word	0x20000cbc
    5ed8:	00014238 	.word	0x00014238
    5edc:	00000217 	.word	0x00000217
    5ee0:	0001407c 	.word	0x0001407c
    5ee4:	000084ed 	.word	0x000084ed
    5ee8:	00002b85 	.word	0x00002b85
    5eec:	0000021e 	.word	0x0000021e
    5ef0:	00006b59 	.word	0x00006b59
    5ef4:	00006a5d 	.word	0x00006a5d
    5ef8:	00002861 	.word	0x00002861
    5efc:	0000778d 	.word	0x0000778d
            if( mibSet->Param.McNwkSKey2 != NULL )
    5f00:	6841      	ldr	r1, [r0, #4]
    5f02:	2900      	cmp	r1, #0
    5f04:	d100      	bne.n	5f08 <LoRaMacMibSetRequestConfirm+0x340>
    5f06:	e225      	b.n	6354 <LoRaMacMibSetRequestConfirm+0x78c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
    5f08:	2088      	movs	r0, #136	; 0x88
    5f0a:	4bd7      	ldr	r3, [pc, #860]	; (6268 <LoRaMacMibSetRequestConfirm+0x6a0>)
    5f0c:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5f0e:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
    5f10:	2800      	cmp	r0, #0
    5f12:	d000      	beq.n	5f16 <LoRaMacMibSetRequestConfirm+0x34e>
    5f14:	e6f5      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f16:	2500      	movs	r5, #0
    5f18:	e6ee      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McKey3 != NULL )
    5f1a:	6841      	ldr	r1, [r0, #4]
    5f1c:	2900      	cmp	r1, #0
    5f1e:	d100      	bne.n	5f22 <LoRaMacMibSetRequestConfirm+0x35a>
    5f20:	e21a      	b.n	6358 <LoRaMacMibSetRequestConfirm+0x790>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
    5f22:	2089      	movs	r0, #137	; 0x89
    5f24:	4bd0      	ldr	r3, [pc, #832]	; (6268 <LoRaMacMibSetRequestConfirm+0x6a0>)
    5f26:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5f28:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
    5f2a:	2800      	cmp	r0, #0
    5f2c:	d000      	beq.n	5f30 <LoRaMacMibSetRequestConfirm+0x368>
    5f2e:	e6e8      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f30:	2500      	movs	r5, #0
    5f32:	e6e1      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McAppSKey3 != NULL )
    5f34:	6841      	ldr	r1, [r0, #4]
    5f36:	2900      	cmp	r1, #0
    5f38:	d100      	bne.n	5f3c <LoRaMacMibSetRequestConfirm+0x374>
    5f3a:	e20f      	b.n	635c <LoRaMacMibSetRequestConfirm+0x794>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
    5f3c:	208a      	movs	r0, #138	; 0x8a
    5f3e:	4bca      	ldr	r3, [pc, #808]	; (6268 <LoRaMacMibSetRequestConfirm+0x6a0>)
    5f40:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5f42:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
    5f44:	2800      	cmp	r0, #0
    5f46:	d000      	beq.n	5f4a <LoRaMacMibSetRequestConfirm+0x382>
    5f48:	e6db      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f4a:	2500      	movs	r5, #0
    5f4c:	e6d4      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.McNwkSKey3 != NULL )
    5f4e:	6841      	ldr	r1, [r0, #4]
    5f50:	2900      	cmp	r1, #0
    5f52:	d100      	bne.n	5f56 <LoRaMacMibSetRequestConfirm+0x38e>
    5f54:	e204      	b.n	6360 <LoRaMacMibSetRequestConfirm+0x798>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
    5f56:	208b      	movs	r0, #139	; 0x8b
    5f58:	4bc3      	ldr	r3, [pc, #780]	; (6268 <LoRaMacMibSetRequestConfirm+0x6a0>)
    5f5a:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    5f5c:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
    5f5e:	2800      	cmp	r0, #0
    5f60:	d000      	beq.n	5f64 <LoRaMacMibSetRequestConfirm+0x39c>
    5f62:	e6ce      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f64:	2500      	movs	r5, #0
    5f66:	e6c7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
    5f68:	49c0      	ldr	r1, [pc, #768]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    5f6a:	2299      	movs	r2, #153	; 0x99
    5f6c:	00d2      	lsls	r2, r2, #3
    5f6e:	7900      	ldrb	r0, [r0, #4]
    5f70:	23c9      	movs	r3, #201	; 0xc9
    5f72:	588c      	ldr	r4, [r1, r2]
    5f74:	54e0      	strb	r0, [r4, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    5f76:	588a      	ldr	r2, [r1, r2]
    5f78:	5cd0      	ldrb	r0, [r2, r3]
    5f7a:	4bbd      	ldr	r3, [pc, #756]	; (6270 <LoRaMacMibSetRequestConfirm+0x6a8>)
    5f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5f7e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f80:	2500      	movs	r5, #0
            break;
    5f82:	e6b9      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
    5f84:	2399      	movs	r3, #153	; 0x99
    5f86:	00db      	lsls	r3, r3, #3
    5f88:	4ab8      	ldr	r2, [pc, #736]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    5f8a:	58d2      	ldr	r2, [r2, r3]
    5f8c:	7901      	ldrb	r1, [r0, #4]
    5f8e:	2316      	movs	r3, #22
    5f90:	33ff      	adds	r3, #255	; 0xff
    5f92:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5f94:	2500      	movs	r5, #0
            break;
    5f96:	e6af      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    5f98:	a903      	add	r1, sp, #12
    5f9a:	7a03      	ldrb	r3, [r0, #8]
    5f9c:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    5f9e:	2399      	movs	r3, #153	; 0x99
    5fa0:	00db      	lsls	r3, r3, #3
    5fa2:	4ab2      	ldr	r2, [pc, #712]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    5fa4:	58d3      	ldr	r3, [r2, r3]
    5fa6:	2202      	movs	r2, #2
    5fa8:	32ff      	adds	r2, #255	; 0xff
    5faa:	5c9a      	ldrb	r2, [r3, r2]
    5fac:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    5fae:	7818      	ldrb	r0, [r3, #0]
    5fb0:	2206      	movs	r2, #6
    5fb2:	4bb0      	ldr	r3, [pc, #704]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    5fb4:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    5fb6:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    5fb8:	2800      	cmp	r0, #0
    5fba:	d100      	bne.n	5fbe <LoRaMacMibSetRequestConfirm+0x3f6>
    5fbc:	e69c      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
    5fbe:	49ab      	ldr	r1, [pc, #684]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    5fc0:	2299      	movs	r2, #153	; 0x99
    5fc2:	00d2      	lsls	r2, r2, #3
    5fc4:	588b      	ldr	r3, [r1, r2]
    5fc6:	33f8      	adds	r3, #248	; 0xf8
    5fc8:	3404      	adds	r4, #4
    5fca:	cc21      	ldmia	r4!, {r0, r5}
    5fcc:	c321      	stmia	r3!, {r0, r5}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
    5fce:	588b      	ldr	r3, [r1, r2]
    5fd0:	22c8      	movs	r2, #200	; 0xc8
    5fd2:	5c9a      	ldrb	r2, [r3, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    5fd4:	2500      	movs	r5, #0
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
    5fd6:	2a02      	cmp	r2, #2
    5fd8:	d000      	beq.n	5fdc <LoRaMacMibSetRequestConfirm+0x414>
    5fda:	e68d      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
    5fdc:	2288      	movs	r2, #136	; 0x88
    5fde:	0092      	lsls	r2, r2, #2
    5fe0:	5c9b      	ldrb	r3, [r3, r2]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d100      	bne.n	5fe8 <LoRaMacMibSetRequestConfirm+0x420>
    5fe6:	e687      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                    Radio.Sleep( );
    5fe8:	4ba1      	ldr	r3, [pc, #644]	; (6270 <LoRaMacMibSetRequestConfirm+0x6a8>)
    5fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5fec:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    5fee:	4c9f      	ldr	r4, [pc, #636]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    5ff0:	2399      	movs	r3, #153	; 0x99
    5ff2:	00db      	lsls	r3, r3, #3
    5ff4:	58e3      	ldr	r3, [r4, r3]
    5ff6:	22dc      	movs	r2, #220	; 0xdc
    5ff8:	5c9a      	ldrb	r2, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    5ffa:	21fc      	movs	r1, #252	; 0xfc
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    5ffc:	5659      	ldrsb	r1, [r3, r1]
    5ffe:	7818      	ldrb	r0, [r3, #0]
    6000:	25f8      	movs	r5, #248	; 0xf8
    6002:	00ad      	lsls	r5, r5, #2
    6004:	46ac      	mov	ip, r5
    6006:	4464      	add	r4, ip
    6008:	9400      	str	r4, [sp, #0]
    600a:	24d8      	movs	r4, #216	; 0xd8
    600c:	591b      	ldr	r3, [r3, r4]
    600e:	4c9a      	ldr	r4, [pc, #616]	; (6278 <LoRaMacMibSetRequestConfirm+0x6b0>)
    6010:	47a0      	blx	r4
                    OpenContinuousRx2Window( );
    6012:	4b9a      	ldr	r3, [pc, #616]	; (627c <LoRaMacMibSetRequestConfirm+0x6b4>)
    6014:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6016:	2500      	movs	r5, #0
    6018:	e66e      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    601a:	a903      	add	r1, sp, #12
    601c:	7a03      	ldrb	r3, [r0, #8]
    601e:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    6020:	2399      	movs	r3, #153	; 0x99
    6022:	00db      	lsls	r3, r3, #3
    6024:	4a91      	ldr	r2, [pc, #580]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6026:	58d3      	ldr	r3, [r2, r3]
    6028:	2202      	movs	r2, #2
    602a:	32ff      	adds	r2, #255	; 0xff
    602c:	5c9a      	ldrb	r2, [r3, r2]
    602e:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    6030:	7818      	ldrb	r0, [r3, #0]
    6032:	2206      	movs	r2, #6
    6034:	4b8f      	ldr	r3, [pc, #572]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    6036:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6038:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    603a:	2800      	cmp	r0, #0
    603c:	d100      	bne.n	6040 <LoRaMacMibSetRequestConfirm+0x478>
    603e:	e65b      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
    6040:	2399      	movs	r3, #153	; 0x99
    6042:	00db      	lsls	r3, r3, #3
    6044:	4a89      	ldr	r2, [pc, #548]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6046:	58d3      	ldr	r3, [r2, r3]
    6048:	3328      	adds	r3, #40	; 0x28
    604a:	3404      	adds	r4, #4
    604c:	cc06      	ldmia	r4!, {r1, r2}
    604e:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6050:	2500      	movs	r5, #0
    6052:	e651      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    6054:	a904      	add	r1, sp, #16
    6056:	6843      	ldr	r3, [r0, #4]
    6058:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
    605a:	2301      	movs	r3, #1
    605c:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    605e:	2399      	movs	r3, #153	; 0x99
    6060:	00db      	lsls	r3, r3, #3
    6062:	4a82      	ldr	r2, [pc, #520]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6064:	58d3      	ldr	r3, [r2, r3]
    6066:	7818      	ldrb	r0, [r3, #0]
    6068:	4b85      	ldr	r3, [pc, #532]	; (6280 <LoRaMacMibSetRequestConfirm+0x6b8>)
    606a:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    606c:	2500      	movs	r5, #0
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    606e:	2800      	cmp	r0, #0
    6070:	d000      	beq.n	6074 <LoRaMacMibSetRequestConfirm+0x4ac>
    6072:	e641      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6074:	3503      	adds	r5, #3
    6076:	e63f      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    6078:	a904      	add	r1, sp, #16
    607a:	6843      	ldr	r3, [r0, #4]
    607c:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
    607e:	2300      	movs	r3, #0
    6080:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    6082:	2399      	movs	r3, #153	; 0x99
    6084:	00db      	lsls	r3, r3, #3
    6086:	4a79      	ldr	r2, [pc, #484]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6088:	58d3      	ldr	r3, [r2, r3]
    608a:	7818      	ldrb	r0, [r3, #0]
    608c:	4b7c      	ldr	r3, [pc, #496]	; (6280 <LoRaMacMibSetRequestConfirm+0x6b8>)
    608e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6090:	2500      	movs	r5, #0
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    6092:	2800      	cmp	r0, #0
    6094:	d000      	beq.n	6098 <LoRaMacMibSetRequestConfirm+0x4d0>
    6096:	e62f      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6098:	3503      	adds	r5, #3
    609a:	e62d      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    609c:	7903      	ldrb	r3, [r0, #4]
    609e:	1e5a      	subs	r2, r3, #1
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    60a0:	2503      	movs	r5, #3
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    60a2:	2a0e      	cmp	r2, #14
    60a4:	d900      	bls.n	60a8 <LoRaMacMibSetRequestConfirm+0x4e0>
    60a6:	e627      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
    60a8:	2299      	movs	r2, #153	; 0x99
    60aa:	00d2      	lsls	r2, r2, #3
    60ac:	496f      	ldr	r1, [pc, #444]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    60ae:	5889      	ldr	r1, [r1, r2]
    60b0:	22f4      	movs	r2, #244	; 0xf4
    60b2:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    60b4:	2500      	movs	r5, #0
    60b6:	e61f      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
    60b8:	2399      	movs	r3, #153	; 0x99
    60ba:	00db      	lsls	r3, r3, #3
    60bc:	4a6b      	ldr	r2, [pc, #428]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    60be:	58d2      	ldr	r2, [r2, r3]
    60c0:	6841      	ldr	r1, [r0, #4]
    60c2:	23e0      	movs	r3, #224	; 0xe0
    60c4:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    60c6:	2500      	movs	r5, #0
            break;
    60c8:	e616      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
    60ca:	2399      	movs	r3, #153	; 0x99
    60cc:	00db      	lsls	r3, r3, #3
    60ce:	4a67      	ldr	r2, [pc, #412]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    60d0:	58d2      	ldr	r2, [r2, r3]
    60d2:	6841      	ldr	r1, [r0, #4]
    60d4:	23e4      	movs	r3, #228	; 0xe4
    60d6:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    60d8:	2500      	movs	r5, #0
            break;
    60da:	e60d      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
    60dc:	2399      	movs	r3, #153	; 0x99
    60de:	00db      	lsls	r3, r3, #3
    60e0:	4a62      	ldr	r2, [pc, #392]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    60e2:	58d2      	ldr	r2, [r2, r3]
    60e4:	6841      	ldr	r1, [r0, #4]
    60e6:	23e8      	movs	r3, #232	; 0xe8
    60e8:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    60ea:	2500      	movs	r5, #0
            break;
    60ec:	e604      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
    60ee:	2399      	movs	r3, #153	; 0x99
    60f0:	00db      	lsls	r3, r3, #3
    60f2:	4a5e      	ldr	r2, [pc, #376]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    60f4:	58d2      	ldr	r2, [r2, r3]
    60f6:	6841      	ldr	r1, [r0, #4]
    60f8:	23ec      	movs	r3, #236	; 0xec
    60fa:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    60fc:	2500      	movs	r5, #0
            break;
    60fe:	e5fb      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
    6100:	2399      	movs	r3, #153	; 0x99
    6102:	00db      	lsls	r3, r3, #3
    6104:	4a59      	ldr	r2, [pc, #356]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6106:	58d2      	ldr	r2, [r2, r3]
    6108:	6841      	ldr	r1, [r0, #4]
    610a:	23f0      	movs	r3, #240	; 0xf0
    610c:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    610e:	2500      	movs	r5, #0
            break;
    6110:	e5f2      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
    6112:	a903      	add	r1, sp, #12
    6114:	7903      	ldrb	r3, [r0, #4]
    6116:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
    6118:	2399      	movs	r3, #153	; 0x99
    611a:	00db      	lsls	r3, r3, #3
    611c:	4a53      	ldr	r2, [pc, #332]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    611e:	58d3      	ldr	r3, [r2, r3]
    6120:	7818      	ldrb	r0, [r3, #0]
    6122:	2205      	movs	r2, #5
    6124:	4b53      	ldr	r3, [pc, #332]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    6126:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6128:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
    612a:	2800      	cmp	r0, #0
    612c:	d100      	bne.n	6130 <LoRaMacMibSetRequestConfirm+0x568>
    612e:	e5e3      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
    6130:	2399      	movs	r3, #153	; 0x99
    6132:	00db      	lsls	r3, r3, #3
    6134:	4a4d      	ldr	r2, [pc, #308]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6136:	58d3      	ldr	r3, [r2, r3]
    6138:	aa03      	add	r2, sp, #12
    613a:	7812      	ldrb	r2, [r2, #0]
    613c:	715a      	strb	r2, [r3, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    613e:	2500      	movs	r5, #0
    6140:	e5da      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
    6142:	a903      	add	r1, sp, #12
    6144:	7903      	ldrb	r3, [r0, #4]
    6146:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    6148:	2399      	movs	r3, #153	; 0x99
    614a:	00db      	lsls	r3, r3, #3
    614c:	4a47      	ldr	r2, [pc, #284]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    614e:	58d3      	ldr	r3, [r2, r3]
    6150:	2280      	movs	r2, #128	; 0x80
    6152:	0052      	lsls	r2, r2, #1
    6154:	5c9a      	ldrb	r2, [r3, r2]
    6156:	708a      	strb	r2, [r1, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    6158:	7818      	ldrb	r0, [r3, #0]
    615a:	2204      	movs	r2, #4
    615c:	4b45      	ldr	r3, [pc, #276]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    615e:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6160:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    6162:	2800      	cmp	r0, #0
    6164:	d100      	bne.n	6168 <LoRaMacMibSetRequestConfirm+0x5a0>
    6166:	e5c7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    6168:	2399      	movs	r3, #153	; 0x99
    616a:	00db      	lsls	r3, r3, #3
    616c:	4a3f      	ldr	r2, [pc, #252]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    616e:	58d2      	ldr	r2, [r2, r3]
    6170:	ab03      	add	r3, sp, #12
    6172:	7819      	ldrb	r1, [r3, #0]
    6174:	23d5      	movs	r3, #213	; 0xd5
    6176:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6178:	2500      	movs	r5, #0
    617a:	e5bd      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
    617c:	a903      	add	r1, sp, #12
    617e:	7903      	ldrb	r3, [r0, #4]
    6180:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
    6182:	2399      	movs	r3, #153	; 0x99
    6184:	00db      	lsls	r3, r3, #3
    6186:	4a39      	ldr	r2, [pc, #228]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6188:	58d3      	ldr	r3, [r2, r3]
    618a:	7818      	ldrb	r0, [r3, #0]
    618c:	2209      	movs	r2, #9
    618e:	4b39      	ldr	r3, [pc, #228]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    6190:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6192:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
    6194:	2800      	cmp	r0, #0
    6196:	d100      	bne.n	619a <LoRaMacMibSetRequestConfirm+0x5d2>
    6198:	e5ae      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
    619a:	2399      	movs	r3, #153	; 0x99
    619c:	00db      	lsls	r3, r3, #3
    619e:	4a33      	ldr	r2, [pc, #204]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    61a0:	58d3      	ldr	r3, [r2, r3]
    61a2:	aa03      	add	r2, sp, #12
    61a4:	7812      	ldrb	r2, [r2, #0]
    61a6:	711a      	strb	r2, [r3, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    61a8:	2500      	movs	r5, #0
    61aa:	e5a5      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
    61ac:	a903      	add	r1, sp, #12
    61ae:	7903      	ldrb	r3, [r0, #4]
    61b0:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
    61b2:	2399      	movs	r3, #153	; 0x99
    61b4:	00db      	lsls	r3, r3, #3
    61b6:	4a2d      	ldr	r2, [pc, #180]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    61b8:	58d3      	ldr	r3, [r2, r3]
    61ba:	7818      	ldrb	r0, [r3, #0]
    61bc:	2208      	movs	r2, #8
    61be:	4b2d      	ldr	r3, [pc, #180]	; (6274 <LoRaMacMibSetRequestConfirm+0x6ac>)
    61c0:	4798      	blx	r3
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    61c2:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
    61c4:	2800      	cmp	r0, #0
    61c6:	d100      	bne.n	61ca <LoRaMacMibSetRequestConfirm+0x602>
    61c8:	e596      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
    61ca:	2399      	movs	r3, #153	; 0x99
    61cc:	00db      	lsls	r3, r3, #3
    61ce:	4a27      	ldr	r2, [pc, #156]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    61d0:	58d2      	ldr	r2, [r2, r3]
    61d2:	ab03      	add	r3, sp, #12
    61d4:	7819      	ldrb	r1, [r3, #0]
    61d6:	23d4      	movs	r3, #212	; 0xd4
    61d8:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    61da:	2500      	movs	r5, #0
    61dc:	e58c      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
    61de:	2399      	movs	r3, #153	; 0x99
    61e0:	00db      	lsls	r3, r3, #3
    61e2:	4a22      	ldr	r2, [pc, #136]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    61e4:	58d3      	ldr	r3, [r2, r3]
    61e6:	6842      	ldr	r2, [r0, #4]
    61e8:	609a      	str	r2, [r3, #8]
    61ea:	21d8      	movs	r1, #216	; 0xd8
    61ec:	505a      	str	r2, [r3, r1]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    61ee:	2500      	movs	r5, #0
            break;
    61f0:	e582      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
    61f2:	2399      	movs	r3, #153	; 0x99
    61f4:	00db      	lsls	r3, r3, #3
    61f6:	4a1d      	ldr	r2, [pc, #116]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    61f8:	58d3      	ldr	r3, [r2, r3]
    61fa:	7902      	ldrb	r2, [r0, #4]
    61fc:	731a      	strb	r2, [r3, #12]
    61fe:	21dc      	movs	r1, #220	; 0xdc
    6200:	545a      	strb	r2, [r3, r1]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6202:	2500      	movs	r5, #0
            break;
    6204:	e578      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
    6206:	2399      	movs	r3, #153	; 0x99
    6208:	00db      	lsls	r3, r3, #3
    620a:	4a18      	ldr	r2, [pc, #96]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    620c:	58d2      	ldr	r2, [r2, r3]
    620e:	6841      	ldr	r1, [r0, #4]
    6210:	2384      	movs	r3, #132	; 0x84
    6212:	005b      	lsls	r3, r3, #1
    6214:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6216:	2500      	movs	r5, #0
            break;
    6218:	e56e      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
    621a:	2399      	movs	r3, #153	; 0x99
    621c:	00db      	lsls	r3, r3, #3
    621e:	4a13      	ldr	r2, [pc, #76]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    6220:	58d3      	ldr	r3, [r2, r3]
    6222:	6842      	ldr	r2, [r0, #4]
    6224:	639a      	str	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6226:	2500      	movs	r5, #0
            break;
    6228:	e566      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.Contexts != 0 )
    622a:	6840      	ldr	r0, [r0, #4]
    622c:	2800      	cmp	r0, #0
    622e:	d100      	bne.n	6232 <LoRaMacMibSetRequestConfirm+0x66a>
    6230:	e098      	b.n	6364 <LoRaMacMibSetRequestConfirm+0x79c>
                status = RestoreCtxs( mibSet->Param.Contexts );
    6232:	4b14      	ldr	r3, [pc, #80]	; (6284 <LoRaMacMibSetRequestConfirm+0x6bc>)
    6234:	4798      	blx	r3
    6236:	0005      	movs	r5, r0
    6238:	e55e      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
    623a:	7983      	ldrb	r3, [r0, #6]
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    623c:	2503      	movs	r5, #3
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
    623e:	2b01      	cmp	r3, #1
    6240:	d900      	bls.n	6244 <LoRaMacMibSetRequestConfirm+0x67c>
    6242:	e559      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
    6244:	2399      	movs	r3, #153	; 0x99
    6246:	00db      	lsls	r3, r3, #3
    6248:	4a08      	ldr	r2, [pc, #32]	; (626c <LoRaMacMibSetRequestConfirm+0x6a4>)
    624a:	58d2      	ldr	r2, [r2, r3]
    624c:	2387      	movs	r3, #135	; 0x87
    624e:	009b      	lsls	r3, r3, #2
    6250:	6841      	ldr	r1, [r0, #4]
    6252:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
    6254:	6840      	ldr	r0, [r0, #4]
    6256:	4b0c      	ldr	r3, [pc, #48]	; (6288 <LoRaMacMibSetRequestConfirm+0x6c0>)
    6258:	4798      	blx	r3
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    625a:	350e      	adds	r5, #14
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
    625c:	2800      	cmp	r0, #0
    625e:	d000      	beq.n	6262 <LoRaMacMibSetRequestConfirm+0x69a>
    6260:	e54f      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    6262:	2500      	movs	r5, #0
    6264:	e548      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	0000778d 	.word	0x0000778d
    626c:	20000cbc 	.word	0x20000cbc
    6270:	0001407c 	.word	0x0001407c
    6274:	000084a5 	.word	0x000084a5
    6278:	000084ed 	.word	0x000084ed
    627c:	00002b85 	.word	0x00002b85
    6280:	000084d5 	.word	0x000084d5
    6284:	000043c1 	.word	0x000043c1
    6288:	0000774d 	.word	0x0000774d
            if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    628c:	2399      	movs	r3, #153	; 0x99
    628e:	00db      	lsls	r3, r3, #3
    6290:	4a36      	ldr	r2, [pc, #216]	; (636c <LoRaMacMibSetRequestConfirm+0x7a4>)
    6292:	58d2      	ldr	r2, [r2, r3]
    6294:	238b      	movs	r3, #139	; 0x8b
    6296:	009b      	lsls	r3, r3, #2
    6298:	58d3      	ldr	r3, [r2, r3]
    if( rejoinCycleTime > 4294967 )
    629a:	4a35      	ldr	r2, [pc, #212]	; (6370 <LoRaMacMibSetRequestConfirm+0x7a8>)
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    629c:	2503      	movs	r5, #3
    if( rejoinCycleTime > 4294967 )
    629e:	4293      	cmp	r3, r2
    62a0:	d800      	bhi.n	62a4 <LoRaMacMibSetRequestConfirm+0x6dc>
    62a2:	e529      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
        *timeInMiliSec = rejoinCycleTime * 1000;
    62a4:	21fa      	movs	r1, #250	; 0xfa
    62a6:	0089      	lsls	r1, r1, #2
    62a8:	4359      	muls	r1, r3
    62aa:	4c30      	ldr	r4, [pc, #192]	; (636c <LoRaMacMibSetRequestConfirm+0x7a4>)
    62ac:	4b31      	ldr	r3, [pc, #196]	; (6374 <LoRaMacMibSetRequestConfirm+0x7ac>)
    62ae:	50e1      	str	r1, [r4, r3]
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    62b0:	4b31      	ldr	r3, [pc, #196]	; (6378 <LoRaMacMibSetRequestConfirm+0x7b0>)
    62b2:	469c      	mov	ip, r3
    62b4:	4464      	add	r4, ip
    62b6:	0020      	movs	r0, r4
    62b8:	4b30      	ldr	r3, [pc, #192]	; (637c <LoRaMacMibSetRequestConfirm+0x7b4>)
    62ba:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin0CycleTimer );
    62bc:	0020      	movs	r0, r4
    62be:	4b30      	ldr	r3, [pc, #192]	; (6380 <LoRaMacMibSetRequestConfirm+0x7b8>)
    62c0:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    62c2:	2500      	movs	r5, #0
    62c4:	e518      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
           if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
    62c6:	2399      	movs	r3, #153	; 0x99
    62c8:	00db      	lsls	r3, r3, #3
    62ca:	4a28      	ldr	r2, [pc, #160]	; (636c <LoRaMacMibSetRequestConfirm+0x7a4>)
    62cc:	58d2      	ldr	r2, [r2, r3]
    62ce:	238c      	movs	r3, #140	; 0x8c
    62d0:	009b      	lsls	r3, r3, #2
    62d2:	58d3      	ldr	r3, [r2, r3]
    if( rejoinCycleTime > 4294967 )
    62d4:	4a26      	ldr	r2, [pc, #152]	; (6370 <LoRaMacMibSetRequestConfirm+0x7a8>)
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    62d6:	2503      	movs	r5, #3
    if( rejoinCycleTime > 4294967 )
    62d8:	4293      	cmp	r3, r2
    62da:	d800      	bhi.n	62de <LoRaMacMibSetRequestConfirm+0x716>
    62dc:	e50c      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
        *timeInMiliSec = rejoinCycleTime * 1000;
    62de:	21fa      	movs	r1, #250	; 0xfa
    62e0:	0089      	lsls	r1, r1, #2
    62e2:	4359      	muls	r1, r3
    62e4:	4c21      	ldr	r4, [pc, #132]	; (636c <LoRaMacMibSetRequestConfirm+0x7a4>)
    62e6:	2398      	movs	r3, #152	; 0x98
    62e8:	00db      	lsls	r3, r3, #3
    62ea:	50e1      	str	r1, [r4, r3]
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    62ec:	3b40      	subs	r3, #64	; 0x40
    62ee:	469c      	mov	ip, r3
    62f0:	4464      	add	r4, ip
    62f2:	0020      	movs	r0, r4
    62f4:	4b21      	ldr	r3, [pc, #132]	; (637c <LoRaMacMibSetRequestConfirm+0x7b4>)
    62f6:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin1CycleTimer );
    62f8:	0020      	movs	r0, r4
    62fa:	4b21      	ldr	r3, [pc, #132]	; (6380 <LoRaMacMibSetRequestConfirm+0x7b8>)
    62fc:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    62fe:	2500      	movs	r5, #0
    6300:	e4fa      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
    6302:	0020      	movs	r0, r4
    6304:	4b1f      	ldr	r3, [pc, #124]	; (6384 <LoRaMacMibSetRequestConfirm+0x7bc>)
    6306:	4798      	blx	r3
    6308:	0005      	movs	r5, r0
            break;
    630a:	e4f5      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    630c:	2503      	movs	r5, #3
    630e:	e4f3      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6310:	2503      	movs	r5, #3
    6312:	e4f1      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6314:	2503      	movs	r5, #3
    6316:	e4ef      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6318:	2503      	movs	r5, #3
    631a:	e4ed      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    631c:	2503      	movs	r5, #3
    631e:	e4eb      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6320:	2503      	movs	r5, #3
    6322:	e4e9      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6324:	2503      	movs	r5, #3
    6326:	e4e7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6328:	2503      	movs	r5, #3
    632a:	e4e5      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    632c:	2503      	movs	r5, #3
    632e:	e4e3      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6330:	2503      	movs	r5, #3
    6332:	e4e1      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6334:	2503      	movs	r5, #3
    6336:	e4df      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6338:	2503      	movs	r5, #3
    633a:	e4dd      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    633c:	2503      	movs	r5, #3
    633e:	e4db      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6340:	2503      	movs	r5, #3
    6342:	e4d9      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6344:	2503      	movs	r5, #3
    6346:	e4d7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6348:	2503      	movs	r5, #3
    634a:	e4d5      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    634c:	2503      	movs	r5, #3
    634e:	e4d3      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6350:	2503      	movs	r5, #3
    6352:	e4d1      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6354:	2503      	movs	r5, #3
    6356:	e4cf      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6358:	2503      	movs	r5, #3
    635a:	e4cd      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    635c:	2503      	movs	r5, #3
    635e:	e4cb      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6360:	2503      	movs	r5, #3
    6362:	e4c9      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    6364:	2503      	movs	r5, #3
    6366:	e4c7      	b.n	5cf8 <LoRaMacMibSetRequestConfirm+0x130>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    6368:	2503      	movs	r5, #3
    636a:	e4ca      	b.n	5d02 <LoRaMacMibSetRequestConfirm+0x13a>
    636c:	20000cbc 	.word	0x20000cbc
    6370:	00418937 	.word	0x00418937
    6374:	000004bc 	.word	0x000004bc
    6378:	0000046c 	.word	0x0000046c
    637c:	0000c23d 	.word	0x0000c23d
    6380:	0000c04d 	.word	0x0000c04d
    6384:	00006a65 	.word	0x00006a65

00006388 <LoRaMacMlmeRequest>:
{
    6388:	b5f0      	push	{r4, r5, r6, r7, lr}
    638a:	46c6      	mov	lr, r8
    638c:	b500      	push	{lr}
    638e:	b082      	sub	sp, #8
    6390:	0005      	movs	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    6392:	2300      	movs	r3, #0
    6394:	466a      	mov	r2, sp
    6396:	7013      	strb	r3, [r2, #0]
    6398:	7053      	strb	r3, [r2, #1]
    if( mlmeRequest == NULL )
    639a:	2800      	cmp	r0, #0
    639c:	d100      	bne.n	63a0 <LoRaMacMlmeRequest+0x18>
    639e:	e152      	b.n	6646 <LoRaMacMlmeRequest+0x2be>
    if( MacCtx.MacState != LORAMAC_IDLE )
    63a0:	23d8      	movs	r3, #216	; 0xd8
    63a2:	009b      	lsls	r3, r3, #2
    63a4:	4aab      	ldr	r2, [pc, #684]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    63a6:	58d3      	ldr	r3, [r2, r3]
        return LORAMAC_STATUS_BUSY;
    63a8:	2401      	movs	r4, #1
    if( MacCtx.MacState != LORAMAC_IDLE )
    63aa:	2b00      	cmp	r3, #0
    63ac:	d004      	beq.n	63b8 <LoRaMacMlmeRequest+0x30>
}
    63ae:	0020      	movs	r0, r4
    63b0:	b002      	add	sp, #8
    63b2:	bc04      	pop	{r2}
    63b4:	4690      	mov	r8, r2
    63b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
    63b8:	4ba7      	ldr	r3, [pc, #668]	; (6658 <LoRaMacMlmeRequest+0x2d0>)
    63ba:	4798      	blx	r3
    63bc:	2800      	cmp	r0, #0
    63be:	d1f6      	bne.n	63ae <LoRaMacMlmeRequest+0x26>
    memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
    63c0:	4ca4      	ldr	r4, [pc, #656]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    63c2:	4ba6      	ldr	r3, [pc, #664]	; (665c <LoRaMacMlmeRequest+0x2d4>)
    63c4:	18e0      	adds	r0, r4, r3
    63c6:	2214      	movs	r2, #20
    63c8:	2100      	movs	r1, #0
    63ca:	4ba5      	ldr	r3, [pc, #660]	; (6660 <LoRaMacMlmeRequest+0x2d8>)
    63cc:	4798      	blx	r3
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    63ce:	2201      	movs	r2, #1
    63d0:	4ba4      	ldr	r3, [pc, #656]	; (6664 <LoRaMacMlmeRequest+0x2dc>)
    63d2:	54e2      	strb	r2, [r4, r3]
    switch( mlmeRequest->Type )
    63d4:	782b      	ldrb	r3, [r5, #0]
    63d6:	2b0d      	cmp	r3, #13
    63d8:	d900      	bls.n	63dc <LoRaMacMlmeRequest+0x54>
    63da:	e132      	b.n	6642 <LoRaMacMlmeRequest+0x2ba>
    63dc:	009b      	lsls	r3, r3, #2
    63de:	4aa2      	ldr	r2, [pc, #648]	; (6668 <LoRaMacMlmeRequest+0x2e0>)
    63e0:	58d3      	ldr	r3, [r2, r3]
    63e2:	469f      	mov	pc, r3
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
    63e4:	23d8      	movs	r3, #216	; 0xd8
    63e6:	009b      	lsls	r3, r3, #2
    63e8:	4a9a      	ldr	r2, [pc, #616]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    63ea:	58d3      	ldr	r3, [r2, r3]
                return LORAMAC_STATUS_BUSY;
    63ec:	2401      	movs	r4, #1
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
    63ee:	069b      	lsls	r3, r3, #26
    63f0:	d4dd      	bmi.n	63ae <LoRaMacMlmeRequest+0x26>
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    63f2:	686b      	ldr	r3, [r5, #4]
    63f4:	2b00      	cmp	r3, #0
    63f6:	d100      	bne.n	63fa <LoRaMacMlmeRequest+0x72>
    63f8:	e127      	b.n	664a <LoRaMacMlmeRequest+0x2c2>
                return LORAMAC_STATUS_PARAMETER_INVALID;
    63fa:	3402      	adds	r4, #2
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    63fc:	68ab      	ldr	r3, [r5, #8]
    63fe:	2b00      	cmp	r3, #0
    6400:	d0d5      	beq.n	63ae <LoRaMacMlmeRequest+0x26>
            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    6402:	0014      	movs	r4, r2
    6404:	2399      	movs	r3, #153	; 0x99
    6406:	00db      	lsls	r3, r3, #3
    6408:	4698      	mov	r8, r3
    640a:	2700      	movs	r7, #0
    640c:	2388      	movs	r3, #136	; 0x88
    640e:	009b      	lsls	r3, r3, #2
    6410:	4642      	mov	r2, r8
    6412:	58a2      	ldr	r2, [r4, r2]
    6414:	54d7      	strb	r7, [r2, r3]
            ResetMacParameters( );
    6416:	4b95      	ldr	r3, [pc, #596]	; (666c <LoRaMacMlmeRequest+0x2e4>)
    6418:	4798      	blx	r3
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    641a:	4a95      	ldr	r2, [pc, #596]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    641c:	5ca3      	ldrb	r3, [r4, r2]
    641e:	2104      	movs	r1, #4
    6420:	430b      	orrs	r3, r1
    6422:	54a3      	strb	r3, [r4, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    6424:	782a      	ldrb	r2, [r5, #0]
    6426:	4b8d      	ldr	r3, [pc, #564]	; (665c <LoRaMacMlmeRequest+0x2d4>)
    6428:	54e2      	strb	r2, [r4, r3]
            queueElement.Request = mlmeRequest->Type;
    642a:	ae01      	add	r6, sp, #4
    642c:	782b      	ldrb	r3, [r5, #0]
    642e:	7033      	strb	r3, [r6, #0]
            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
    6430:	686b      	ldr	r3, [r5, #4]
    6432:	6063      	str	r3, [r4, #4]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
    6434:	68ab      	ldr	r3, [r5, #8]
    6436:	60a3      	str	r3, [r4, #8]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
    6438:	4643      	mov	r3, r8
    643a:	58e4      	ldr	r4, [r4, r3]
    643c:	210c      	movs	r1, #12
    643e:	5669      	ldrsb	r1, [r5, r1]
    6440:	7820      	ldrb	r0, [r4, #0]
    6442:	4b8c      	ldr	r3, [pc, #560]	; (6674 <LoRaMacMlmeRequest+0x2ec>)
    6444:	4798      	blx	r3
    6446:	23d5      	movs	r3, #213	; 0xd5
    6448:	54e0      	strb	r0, [r4, r3]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
    644a:	3bce      	subs	r3, #206	; 0xce
    644c:	7073      	strb	r3, [r6, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    644e:	70f7      	strb	r7, [r6, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    6450:	0030      	movs	r0, r6
    6452:	4b89      	ldr	r3, [pc, #548]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6454:	4798      	blx	r3
            status = SendReJoinReq( JOIN_REQ );
    6456:	20ff      	movs	r0, #255	; 0xff
    6458:	4b88      	ldr	r3, [pc, #544]	; (667c <LoRaMacMlmeRequest+0x2f4>)
    645a:	4798      	blx	r3
    645c:	1e04      	subs	r4, r0, #0
            if( status != LORAMAC_STATUS_OK )
    645e:	d103      	bne.n	6468 <LoRaMacMlmeRequest+0xe0>
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
    6460:	2001      	movs	r0, #1
    6462:	4b87      	ldr	r3, [pc, #540]	; (6680 <LoRaMacMlmeRequest+0x2f8>)
    6464:	4798      	blx	r3
    6466:	e017      	b.n	6498 <LoRaMacMlmeRequest+0x110>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate );
    6468:	4643      	mov	r3, r8
    646a:	4a7a      	ldr	r2, [pc, #488]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    646c:	58d6      	ldr	r6, [r2, r3]
    646e:	210c      	movs	r1, #12
    6470:	5669      	ldrsb	r1, [r5, r1]
    6472:	7830      	ldrb	r0, [r6, #0]
    6474:	4b7f      	ldr	r3, [pc, #508]	; (6674 <LoRaMacMlmeRequest+0x2ec>)
    6476:	4798      	blx	r3
    6478:	23d5      	movs	r3, #213	; 0xd5
    647a:	54f0      	strb	r0, [r6, r3]
    647c:	e7f0      	b.n	6460 <LoRaMacMlmeRequest+0xd8>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    647e:	4b75      	ldr	r3, [pc, #468]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    6480:	497b      	ldr	r1, [pc, #492]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    6482:	5c5a      	ldrb	r2, [r3, r1]
    6484:	2004      	movs	r0, #4
    6486:	4302      	orrs	r2, r0
    6488:	545a      	strb	r2, [r3, r1]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    648a:	7829      	ldrb	r1, [r5, #0]
    648c:	4a73      	ldr	r2, [pc, #460]	; (665c <LoRaMacMlmeRequest+0x2d4>)
    648e:	5499      	strb	r1, [r3, r2]
            status = SendReJoinReq( REJOIN_REQ_0 );
    6490:	2000      	movs	r0, #0
    6492:	4b7a      	ldr	r3, [pc, #488]	; (667c <LoRaMacMlmeRequest+0x2f4>)
    6494:	4798      	blx	r3
    6496:	0004      	movs	r4, r0
    if( status != LORAMAC_STATUS_OK )
    6498:	2c00      	cmp	r4, #0
    649a:	d000      	beq.n	649e <LoRaMacMlmeRequest+0x116>
    649c:	e0b7      	b.n	660e <LoRaMacMlmeRequest+0x286>
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
    649e:	2000      	movs	r0, #0
    64a0:	4b77      	ldr	r3, [pc, #476]	; (6680 <LoRaMacMlmeRequest+0x2f8>)
    64a2:	4798      	blx	r3
    64a4:	e783      	b.n	63ae <LoRaMacMlmeRequest+0x26>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    64a6:	4b6b      	ldr	r3, [pc, #428]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    64a8:	4971      	ldr	r1, [pc, #452]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    64aa:	5c5a      	ldrb	r2, [r3, r1]
    64ac:	2004      	movs	r0, #4
    64ae:	4302      	orrs	r2, r0
    64b0:	545a      	strb	r2, [r3, r1]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    64b2:	7829      	ldrb	r1, [r5, #0]
    64b4:	4a69      	ldr	r2, [pc, #420]	; (665c <LoRaMacMlmeRequest+0x2d4>)
    64b6:	5499      	strb	r1, [r3, r2]
            status = SendReJoinReq( REJOIN_REQ_1 );
    64b8:	2001      	movs	r0, #1
    64ba:	4b70      	ldr	r3, [pc, #448]	; (667c <LoRaMacMlmeRequest+0x2f4>)
    64bc:	4798      	blx	r3
    64be:	0004      	movs	r4, r0
            break;
    64c0:	e7ea      	b.n	6498 <LoRaMacMlmeRequest+0x110>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    64c2:	4964      	ldr	r1, [pc, #400]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    64c4:	4a6a      	ldr	r2, [pc, #424]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    64c6:	5c8b      	ldrb	r3, [r1, r2]
    64c8:	2004      	movs	r0, #4
    64ca:	4303      	orrs	r3, r0
    64cc:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    64ce:	a801      	add	r0, sp, #4
    64d0:	782b      	ldrb	r3, [r5, #0]
    64d2:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    64d4:	2301      	movs	r3, #1
    64d6:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    64d8:	2300      	movs	r3, #0
    64da:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    64dc:	4b66      	ldr	r3, [pc, #408]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    64de:	4798      	blx	r3
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    64e0:	2200      	movs	r2, #0
    64e2:	4669      	mov	r1, sp
    64e4:	2002      	movs	r0, #2
    64e6:	4b67      	ldr	r3, [pc, #412]	; (6684 <LoRaMacMlmeRequest+0x2fc>)
    64e8:	4798      	blx	r3
    64ea:	2800      	cmp	r0, #0
    64ec:	d000      	beq.n	64f0 <LoRaMacMlmeRequest+0x168>
    64ee:	e0ae      	b.n	664e <LoRaMacMlmeRequest+0x2c6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    64f0:	2400      	movs	r4, #0
    64f2:	e7d4      	b.n	649e <LoRaMacMlmeRequest+0x116>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    64f4:	4957      	ldr	r1, [pc, #348]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    64f6:	4a5e      	ldr	r2, [pc, #376]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    64f8:	5c8b      	ldrb	r3, [r1, r2]
    64fa:	2004      	movs	r0, #4
    64fc:	4303      	orrs	r3, r0
    64fe:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    6500:	a801      	add	r0, sp, #4
    6502:	782b      	ldrb	r3, [r5, #0]
    6504:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6506:	2301      	movs	r3, #1
    6508:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    650a:	2300      	movs	r3, #0
    650c:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    650e:	4b5a      	ldr	r3, [pc, #360]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6510:	4798      	blx	r3
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
    6512:	88a8      	ldrh	r0, [r5, #4]
    6514:	4b5c      	ldr	r3, [pc, #368]	; (6688 <LoRaMacMlmeRequest+0x300>)
    6516:	4798      	blx	r3
    6518:	0004      	movs	r4, r0
            break;
    651a:	e7bd      	b.n	6498 <LoRaMacMlmeRequest+0x110>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    651c:	494d      	ldr	r1, [pc, #308]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    651e:	4a54      	ldr	r2, [pc, #336]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    6520:	5c8b      	ldrb	r3, [r1, r2]
    6522:	2004      	movs	r0, #4
    6524:	4303      	orrs	r3, r0
    6526:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    6528:	a801      	add	r0, sp, #4
    652a:	782b      	ldrb	r3, [r5, #0]
    652c:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    652e:	2301      	movs	r3, #1
    6530:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    6532:	2300      	movs	r3, #0
    6534:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    6536:	4b50      	ldr	r3, [pc, #320]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6538:	4798      	blx	r3
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
    653a:	7b2a      	ldrb	r2, [r5, #12]
    653c:	68a9      	ldr	r1, [r5, #8]
    653e:	88a8      	ldrh	r0, [r5, #4]
    6540:	4b52      	ldr	r3, [pc, #328]	; (668c <LoRaMacMlmeRequest+0x304>)
    6542:	4798      	blx	r3
    6544:	0004      	movs	r4, r0
            break;
    6546:	e7a7      	b.n	6498 <LoRaMacMlmeRequest+0x110>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    6548:	4942      	ldr	r1, [pc, #264]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    654a:	4a49      	ldr	r2, [pc, #292]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    654c:	5c8b      	ldrb	r3, [r1, r2]
    654e:	2004      	movs	r0, #4
    6550:	4303      	orrs	r3, r0
    6552:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    6554:	a801      	add	r0, sp, #4
    6556:	782b      	ldrb	r3, [r5, #0]
    6558:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    655a:	2301      	movs	r3, #1
    655c:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    655e:	2300      	movs	r3, #0
    6560:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    6562:	4b45      	ldr	r3, [pc, #276]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6564:	4798      	blx	r3
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    6566:	2200      	movs	r2, #0
    6568:	4669      	mov	r1, sp
    656a:	200d      	movs	r0, #13
    656c:	4b45      	ldr	r3, [pc, #276]	; (6684 <LoRaMacMlmeRequest+0x2fc>)
    656e:	4798      	blx	r3
    6570:	2800      	cmp	r0, #0
    6572:	d0bd      	beq.n	64f0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    6574:	2413      	movs	r4, #19
    6576:	e04a      	b.n	660e <LoRaMacMlmeRequest+0x286>
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
    6578:	792c      	ldrb	r4, [r5, #4]
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    657a:	4936      	ldr	r1, [pc, #216]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    657c:	4a3c      	ldr	r2, [pc, #240]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    657e:	5c8b      	ldrb	r3, [r1, r2]
    6580:	2004      	movs	r0, #4
    6582:	4303      	orrs	r3, r0
    6584:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    6586:	a801      	add	r0, sp, #4
    6588:	782b      	ldrb	r3, [r5, #0]
    658a:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    658c:	2301      	movs	r3, #1
    658e:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    6590:	2300      	movs	r3, #0
    6592:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    6594:	4b38      	ldr	r3, [pc, #224]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6596:	4798      	blx	r3
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
    6598:	7928      	ldrb	r0, [r5, #4]
    659a:	0740      	lsls	r0, r0, #29
    659c:	0f40      	lsrs	r0, r0, #29
    659e:	4b3c      	ldr	r3, [pc, #240]	; (6690 <LoRaMacMlmeRequest+0x308>)
    65a0:	4798      	blx	r3
            macCmdPayload[0] = value;
    65a2:	466b      	mov	r3, sp
    65a4:	701c      	strb	r4, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
    65a6:	2201      	movs	r2, #1
    65a8:	4669      	mov	r1, sp
    65aa:	2010      	movs	r0, #16
    65ac:	4b35      	ldr	r3, [pc, #212]	; (6684 <LoRaMacMlmeRequest+0x2fc>)
    65ae:	4798      	blx	r3
    65b0:	2800      	cmp	r0, #0
    65b2:	d09d      	beq.n	64f0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    65b4:	2413      	movs	r4, #19
    65b6:	e02a      	b.n	660e <LoRaMacMlmeRequest+0x286>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    65b8:	4926      	ldr	r1, [pc, #152]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    65ba:	4a2d      	ldr	r2, [pc, #180]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    65bc:	5c8b      	ldrb	r3, [r1, r2]
    65be:	2004      	movs	r0, #4
    65c0:	4303      	orrs	r3, r0
    65c2:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    65c4:	a801      	add	r0, sp, #4
    65c6:	782b      	ldrb	r3, [r5, #0]
    65c8:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    65ca:	2301      	movs	r3, #1
    65cc:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = false;
    65ce:	2300      	movs	r3, #0
    65d0:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    65d2:	4b29      	ldr	r3, [pc, #164]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    65d4:	4798      	blx	r3
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    65d6:	2200      	movs	r2, #0
    65d8:	4669      	mov	r1, sp
    65da:	2012      	movs	r0, #18
    65dc:	4b29      	ldr	r3, [pc, #164]	; (6684 <LoRaMacMlmeRequest+0x2fc>)
    65de:	4798      	blx	r3
    65e0:	2800      	cmp	r0, #0
    65e2:	d085      	beq.n	64f0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    65e4:	2413      	movs	r4, #19
    65e6:	e012      	b.n	660e <LoRaMacMlmeRequest+0x286>
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    65e8:	491a      	ldr	r1, [pc, #104]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    65ea:	4a21      	ldr	r2, [pc, #132]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    65ec:	5c8b      	ldrb	r3, [r1, r2]
    65ee:	2004      	movs	r0, #4
    65f0:	4303      	orrs	r3, r0
    65f2:	548b      	strb	r3, [r1, r2]
            queueElement.Request = mlmeRequest->Type;
    65f4:	a801      	add	r0, sp, #4
    65f6:	782b      	ldrb	r3, [r5, #0]
    65f8:	7003      	strb	r3, [r0, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    65fa:	2301      	movs	r3, #1
    65fc:	7043      	strb	r3, [r0, #1]
            queueElement.RestrictCommonReadyToHandle = true;
    65fe:	70c3      	strb	r3, [r0, #3]
            LoRaMacConfirmQueueAdd( &queueElement );
    6600:	4b1d      	ldr	r3, [pc, #116]	; (6678 <LoRaMacMlmeRequest+0x2f0>)
    6602:	4798      	blx	r3
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
    6604:	4b23      	ldr	r3, [pc, #140]	; (6694 <LoRaMacMlmeRequest+0x30c>)
    6606:	4798      	blx	r3
                status = LORAMAC_STATUS_BUSY;
    6608:	2401      	movs	r4, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
    660a:	2800      	cmp	r0, #0
    660c:	d014      	beq.n	6638 <LoRaMacMlmeRequest+0x2b0>
        MacCtx.NvmCtx->NodeAckRequested = false;
    660e:	2399      	movs	r3, #153	; 0x99
    6610:	00db      	lsls	r3, r3, #3
    6612:	4a10      	ldr	r2, [pc, #64]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    6614:	58d2      	ldr	r2, [r2, r3]
    6616:	2100      	movs	r1, #0
    6618:	4b1f      	ldr	r3, [pc, #124]	; (6698 <LoRaMacMlmeRequest+0x310>)
    661a:	54d1      	strb	r1, [r2, r3]
        LoRaMacConfirmQueueRemoveLast( );
    661c:	4b1f      	ldr	r3, [pc, #124]	; (669c <LoRaMacMlmeRequest+0x314>)
    661e:	4798      	blx	r3
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
    6620:	4b1f      	ldr	r3, [pc, #124]	; (66a0 <LoRaMacMlmeRequest+0x318>)
    6622:	4798      	blx	r3
    6624:	2800      	cmp	r0, #0
    6626:	d000      	beq.n	662a <LoRaMacMlmeRequest+0x2a2>
    6628:	e739      	b.n	649e <LoRaMacMlmeRequest+0x116>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    662a:	490a      	ldr	r1, [pc, #40]	; (6654 <LoRaMacMlmeRequest+0x2cc>)
    662c:	4a10      	ldr	r2, [pc, #64]	; (6670 <LoRaMacMlmeRequest+0x2e8>)
    662e:	5c8b      	ldrb	r3, [r1, r2]
    6630:	3004      	adds	r0, #4
    6632:	4383      	bics	r3, r0
    6634:	548b      	strb	r3, [r1, r2]
    6636:	e732      	b.n	649e <LoRaMacMlmeRequest+0x116>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
    6638:	4b1a      	ldr	r3, [pc, #104]	; (66a4 <LoRaMacMlmeRequest+0x31c>)
    663a:	4798      	blx	r3
                LoRaMacClassBBeaconTimerEvent( );
    663c:	4b1a      	ldr	r3, [pc, #104]	; (66a8 <LoRaMacMlmeRequest+0x320>)
    663e:	4798      	blx	r3
    6640:	e756      	b.n	64f0 <LoRaMacMlmeRequest+0x168>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    6642:	2402      	movs	r4, #2
    6644:	e728      	b.n	6498 <LoRaMacMlmeRequest+0x110>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    6646:	2403      	movs	r4, #3
    6648:	e6b1      	b.n	63ae <LoRaMacMlmeRequest+0x26>
                return LORAMAC_STATUS_PARAMETER_INVALID;
    664a:	2403      	movs	r4, #3
    664c:	e6af      	b.n	63ae <LoRaMacMlmeRequest+0x26>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    664e:	2413      	movs	r4, #19
    6650:	e7dd      	b.n	660e <LoRaMacMlmeRequest+0x286>
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	20000cbc 	.word	0x20000cbc
    6658:	00007091 	.word	0x00007091
    665c:	0000043c 	.word	0x0000043c
    6660:	00001ec7 	.word	0x00001ec7
    6664:	0000043d 	.word	0x0000043d
    6668:	00014304 	.word	0x00014304
    666c:	00002dc9 	.word	0x00002dc9
    6670:	00000469 	.word	0x00000469
    6674:	000085c9 	.word	0x000085c9
    6678:	00006e3d 	.word	0x00006e3d
    667c:	00003799 	.word	0x00003799
    6680:	00002861 	.word	0x00002861
    6684:	00006b59 	.word	0x00006b59
    6688:	000042a5 	.word	0x000042a5
    668c:	000042fd 	.word	0x000042fd
    6690:	00006a57 	.word	0x00006a57
    6694:	00006a39 	.word	0x00006a39
    6698:	00000217 	.word	0x00000217
    669c:	00006e81 	.word	0x00006e81
    66a0:	00007085 	.word	0x00007085
    66a4:	00006a33 	.word	0x00006a33
    66a8:	00006a3d 	.word	0x00006a3d

000066ac <LoRaMacMcpsRequest>:
{
    66ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ae:	46d6      	mov	lr, sl
    66b0:	464f      	mov	r7, r9
    66b2:	4646      	mov	r6, r8
    66b4:	b5c0      	push	{r6, r7, lr}
    66b6:	b084      	sub	sp, #16
    66b8:	1e04      	subs	r4, r0, #0
    if( mcpsRequest == NULL )
    66ba:	d100      	bne.n	66be <LoRaMacMcpsRequest+0x12>
    66bc:	e0af      	b.n	681e <LoRaMacMcpsRequest+0x172>
    if( MacCtx.MacState != LORAMAC_IDLE )
    66be:	23d8      	movs	r3, #216	; 0xd8
    66c0:	009b      	lsls	r3, r3, #2
    66c2:	4a58      	ldr	r2, [pc, #352]	; (6824 <LoRaMacMcpsRequest+0x178>)
    66c4:	58d3      	ldr	r3, [r2, r3]
        return LORAMAC_STATUS_BUSY;
    66c6:	2501      	movs	r5, #1
    if( MacCtx.MacState != LORAMAC_IDLE )
    66c8:	2b00      	cmp	r3, #0
    66ca:	d006      	beq.n	66da <LoRaMacMcpsRequest+0x2e>
}
    66cc:	0028      	movs	r0, r5
    66ce:	b004      	add	sp, #16
    66d0:	bc1c      	pop	{r2, r3, r4}
    66d2:	4690      	mov	r8, r2
    66d4:	4699      	mov	r9, r3
    66d6:	46a2      	mov	sl, r4
    66d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    macHdr.Value = 0;
    66da:	2200      	movs	r2, #0
    66dc:	ab01      	add	r3, sp, #4
    66de:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
    66e0:	4d50      	ldr	r5, [pc, #320]	; (6824 <LoRaMacMcpsRequest+0x178>)
    66e2:	2385      	movs	r3, #133	; 0x85
    66e4:	00db      	lsls	r3, r3, #3
    66e6:	18e8      	adds	r0, r5, r3
    66e8:	3214      	adds	r2, #20
    66ea:	2100      	movs	r1, #0
    66ec:	4b4e      	ldr	r3, [pc, #312]	; (6828 <LoRaMacMcpsRequest+0x17c>)
    66ee:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    66f0:	2201      	movs	r2, #1
    66f2:	4b4e      	ldr	r3, [pc, #312]	; (682c <LoRaMacMcpsRequest+0x180>)
    66f4:	54ea      	strb	r2, [r5, r3]
    switch( mcpsRequest->Type )
    66f6:	7823      	ldrb	r3, [r4, #0]
    66f8:	2b01      	cmp	r3, #1
    66fa:	d069      	beq.n	67d0 <LoRaMacMcpsRequest+0x124>
    66fc:	2b00      	cmp	r3, #0
    66fe:	d014      	beq.n	672a <LoRaMacMcpsRequest+0x7e>
    6700:	2b03      	cmp	r3, #3
    6702:	d075      	beq.n	67f0 <LoRaMacMcpsRequest+0x144>
    getPhy.Attribute = PHY_MIN_TX_DR;
    6704:	a903      	add	r1, sp, #12
    6706:	2301      	movs	r3, #1
    6708:	700b      	strb	r3, [r1, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    670a:	2399      	movs	r3, #153	; 0x99
    670c:	00db      	lsls	r3, r3, #3
    670e:	4a45      	ldr	r2, [pc, #276]	; (6824 <LoRaMacMcpsRequest+0x178>)
    6710:	58d3      	ldr	r3, [r2, r3]
    6712:	2280      	movs	r2, #128	; 0x80
    6714:	0052      	lsls	r2, r2, #1
    6716:	5c9a      	ldrb	r2, [r3, r2]
    6718:	708a      	strb	r2, [r1, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    671a:	7818      	ldrb	r0, [r3, #0]
    671c:	4b44      	ldr	r3, [pc, #272]	; (6830 <LoRaMacMcpsRequest+0x184>)
    671e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    6720:	2502      	movs	r5, #2
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
    6722:	2000      	movs	r0, #0
    6724:	4b43      	ldr	r3, [pc, #268]	; (6834 <LoRaMacMcpsRequest+0x188>)
    6726:	4798      	blx	r3
    6728:	e7d0      	b.n	66cc <LoRaMacMcpsRequest+0x20>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
    672a:	aa01      	add	r2, sp, #4
    672c:	7811      	ldrb	r1, [r2, #0]
    672e:	231f      	movs	r3, #31
    6730:	400b      	ands	r3, r1
    6732:	2140      	movs	r1, #64	; 0x40
    6734:	430b      	orrs	r3, r1
    6736:	7013      	strb	r3, [r2, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
    6738:	7927      	ldrb	r7, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
    673a:	68a3      	ldr	r3, [r4, #8]
    673c:	4698      	mov	r8, r3
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
    673e:	89a3      	ldrh	r3, [r4, #12]
    6740:	4699      	mov	r9, r3
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
    6742:	230e      	movs	r3, #14
    6744:	56e3      	ldrsb	r3, [r4, r3]
    6746:	469a      	mov	sl, r3
    getPhy.Attribute = PHY_MIN_TX_DR;
    6748:	a903      	add	r1, sp, #12
    674a:	2301      	movs	r3, #1
    674c:	700b      	strb	r3, [r1, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    674e:	4e35      	ldr	r6, [pc, #212]	; (6824 <LoRaMacMcpsRequest+0x178>)
    6750:	2599      	movs	r5, #153	; 0x99
    6752:	00ed      	lsls	r5, r5, #3
    6754:	5973      	ldr	r3, [r6, r5]
    6756:	2280      	movs	r2, #128	; 0x80
    6758:	0052      	lsls	r2, r2, #1
    675a:	5c9a      	ldrb	r2, [r3, r2]
    675c:	708a      	strb	r2, [r1, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    675e:	7818      	ldrb	r0, [r3, #0]
    6760:	4b33      	ldr	r3, [pc, #204]	; (6830 <LoRaMacMcpsRequest+0x184>)
    6762:	4798      	blx	r3
    6764:	9002      	str	r0, [sp, #8]
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
    6766:	5973      	ldr	r3, [r6, r5]
    6768:	22ca      	movs	r2, #202	; 0xca
    676a:	5c9a      	ldrb	r2, [r3, r2]
    676c:	2a00      	cmp	r2, #0
    676e:	d11c      	bne.n	67aa <LoRaMacMcpsRequest+0xfe>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
    6770:	466a      	mov	r2, sp
    6772:	7a11      	ldrb	r1, [r2, #8]
    6774:	7a12      	ldrb	r2, [r2, #8]
    6776:	b252      	sxtb	r2, r2
    6778:	4552      	cmp	r2, sl
    677a:	da00      	bge.n	677e <LoRaMacMcpsRequest+0xd2>
    677c:	4651      	mov	r1, sl
            verify.DatarateParams.Datarate = datarate;
    677e:	466a      	mov	r2, sp
    6780:	7011      	strb	r1, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    6782:	2280      	movs	r2, #128	; 0x80
    6784:	0052      	lsls	r2, r2, #1
    6786:	5c9a      	ldrb	r2, [r3, r2]
    6788:	4669      	mov	r1, sp
    678a:	708a      	strb	r2, [r1, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    678c:	7818      	ldrb	r0, [r3, #0]
    678e:	2204      	movs	r2, #4
    6790:	4b29      	ldr	r3, [pc, #164]	; (6838 <LoRaMacMcpsRequest+0x18c>)
    6792:	4798      	blx	r3
                return LORAMAC_STATUS_PARAMETER_INVALID;
    6794:	2503      	movs	r5, #3
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    6796:	2800      	cmp	r0, #0
    6798:	d098      	beq.n	66cc <LoRaMacMcpsRequest+0x20>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    679a:	2399      	movs	r3, #153	; 0x99
    679c:	00db      	lsls	r3, r3, #3
    679e:	4a21      	ldr	r2, [pc, #132]	; (6824 <LoRaMacMcpsRequest+0x178>)
    67a0:	58d2      	ldr	r2, [r2, r3]
    67a2:	466b      	mov	r3, sp
    67a4:	7819      	ldrb	r1, [r3, #0]
    67a6:	23d5      	movs	r3, #213	; 0xd5
    67a8:	54d1      	strb	r1, [r2, r3]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
    67aa:	464b      	mov	r3, r9
    67ac:	4642      	mov	r2, r8
    67ae:	0039      	movs	r1, r7
    67b0:	a801      	add	r0, sp, #4
    67b2:	4d22      	ldr	r5, [pc, #136]	; (683c <LoRaMacMcpsRequest+0x190>)
    67b4:	47a8      	blx	r5
    67b6:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
    67b8:	d129      	bne.n	680e <LoRaMacMcpsRequest+0x162>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
    67ba:	7821      	ldrb	r1, [r4, #0]
    67bc:	4b19      	ldr	r3, [pc, #100]	; (6824 <LoRaMacMcpsRequest+0x178>)
    67be:	2285      	movs	r2, #133	; 0x85
    67c0:	00d2      	lsls	r2, r2, #3
    67c2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
    67c4:	491e      	ldr	r1, [pc, #120]	; (6840 <LoRaMacMcpsRequest+0x194>)
    67c6:	5c5a      	ldrb	r2, [r3, r1]
    67c8:	2001      	movs	r0, #1
    67ca:	4302      	orrs	r2, r0
    67cc:	545a      	strb	r2, [r3, r1]
    67ce:	e7a8      	b.n	6722 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
    67d0:	a901      	add	r1, sp, #4
    67d2:	780a      	ldrb	r2, [r1, #0]
    67d4:	231f      	movs	r3, #31
    67d6:	401a      	ands	r2, r3
    67d8:	3b9f      	subs	r3, #159	; 0x9f
    67da:	4313      	orrs	r3, r2
    67dc:	700b      	strb	r3, [r1, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
    67de:	7927      	ldrb	r7, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
    67e0:	68a3      	ldr	r3, [r4, #8]
    67e2:	4698      	mov	r8, r3
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
    67e4:	89a3      	ldrh	r3, [r4, #12]
    67e6:	4699      	mov	r9, r3
            datarate = mcpsRequest->Req.Confirmed.Datarate;
    67e8:	230e      	movs	r3, #14
    67ea:	56e3      	ldrsb	r3, [r4, r3]
    67ec:	469a      	mov	sl, r3
            break;
    67ee:	e7ab      	b.n	6748 <LoRaMacMcpsRequest+0x9c>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
    67f0:	aa01      	add	r2, sp, #4
    67f2:	7811      	ldrb	r1, [r2, #0]
    67f4:	2320      	movs	r3, #32
    67f6:	425b      	negs	r3, r3
    67f8:	430b      	orrs	r3, r1
    67fa:	7013      	strb	r3, [r2, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
    67fc:	6863      	ldr	r3, [r4, #4]
    67fe:	4698      	mov	r8, r3
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
    6800:	8923      	ldrh	r3, [r4, #8]
    6802:	4699      	mov	r9, r3
            datarate = mcpsRequest->Req.Proprietary.Datarate;
    6804:	230a      	movs	r3, #10
    6806:	56e3      	ldrsb	r3, [r4, r3]
    6808:	469a      	mov	sl, r3
    uint8_t fPort = 0;
    680a:	2700      	movs	r7, #0
            break;
    680c:	e79c      	b.n	6748 <LoRaMacMcpsRequest+0x9c>
            MacCtx.NvmCtx->NodeAckRequested = false;
    680e:	2399      	movs	r3, #153	; 0x99
    6810:	00db      	lsls	r3, r3, #3
    6812:	4a04      	ldr	r2, [pc, #16]	; (6824 <LoRaMacMcpsRequest+0x178>)
    6814:	58d2      	ldr	r2, [r2, r3]
    6816:	2100      	movs	r1, #0
    6818:	4b0a      	ldr	r3, [pc, #40]	; (6844 <LoRaMacMcpsRequest+0x198>)
    681a:	54d1      	strb	r1, [r2, r3]
    681c:	e781      	b.n	6722 <LoRaMacMcpsRequest+0x76>
        return LORAMAC_STATUS_PARAMETER_INVALID;
    681e:	2503      	movs	r5, #3
    6820:	e754      	b.n	66cc <LoRaMacMcpsRequest+0x20>
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	20000cbc 	.word	0x20000cbc
    6828:	00001ec7 	.word	0x00001ec7
    682c:	00000429 	.word	0x00000429
    6830:	00008445 	.word	0x00008445
    6834:	00002861 	.word	0x00002861
    6838:	000084a5 	.word	0x000084a5
    683c:	00003635 	.word	0x00003635
    6840:	00000469 	.word	0x00000469
    6844:	00000217 	.word	0x00000217

00006848 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
    6848:	b510      	push	{r4, lr}
    684a:	b082      	sub	sp, #8
    684c:	0004      	movs	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
    684e:	a901      	add	r1, sp, #4
    6850:	7008      	strb	r0, [r1, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
    6852:	2399      	movs	r3, #153	; 0x99
    6854:	00db      	lsls	r3, r3, #3
    6856:	4a08      	ldr	r2, [pc, #32]	; (6878 <LoRaMacTestSetDutyCycleOn+0x30>)
    6858:	58d3      	ldr	r3, [r2, r3]
    685a:	7818      	ldrb	r0, [r3, #0]
    685c:	220e      	movs	r2, #14
    685e:	4b07      	ldr	r3, [pc, #28]	; (687c <LoRaMacTestSetDutyCycleOn+0x34>)
    6860:	4798      	blx	r3
    6862:	2800      	cmp	r0, #0
    6864:	d006      	beq.n	6874 <LoRaMacTestSetDutyCycleOn+0x2c>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
    6866:	2399      	movs	r3, #153	; 0x99
    6868:	00db      	lsls	r3, r3, #3
    686a:	4a03      	ldr	r2, [pc, #12]	; (6878 <LoRaMacTestSetDutyCycleOn+0x30>)
    686c:	58d2      	ldr	r2, [r2, r3]
    686e:	2389      	movs	r3, #137	; 0x89
    6870:	005b      	lsls	r3, r3, #1
    6872:	54d4      	strb	r4, [r2, r3]
    }
}
    6874:	b002      	add	sp, #8
    6876:	bd10      	pop	{r4, pc}
    6878:	20000cbc 	.word	0x20000cbc
    687c:	000084a5 	.word	0x000084a5

00006880 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    6880:	b5f0      	push	{r4, r5, r6, r7, lr}
    6882:	46de      	mov	lr, fp
    6884:	4657      	mov	r7, sl
    6886:	464e      	mov	r6, r9
    6888:	4645      	mov	r5, r8
    688a:	b5e0      	push	{r5, r6, r7, lr}
    688c:	b085      	sub	sp, #20
    688e:	0004      	movs	r4, r0
    6890:	4689      	mov	r9, r1
    6892:	4690      	mov	r8, r2
    6894:	001f      	movs	r7, r3
    if( adrNext->Version.Fields.Minor == 0 )
    6896:	7883      	ldrb	r3, [r0, #2]
    6898:	2b00      	cmp	r3, #0
    689a:	d016      	beq.n	68ca <LoRaMacAdrCalcNext+0x4a>
    int8_t datarate = adrNext->Datarate;
    689c:	2610      	movs	r6, #16
    689e:	5786      	ldrsb	r6, [r0, r6]
    int8_t txPower = adrNext->TxPower;
    68a0:	2311      	movs	r3, #17
    68a2:	56c3      	ldrsb	r3, [r0, r3]
    68a4:	469b      	mov	fp, r3
    *adrAckCounter = adrNext->AdrAckCounter;
    68a6:	6883      	ldr	r3, [r0, #8]
    68a8:	603b      	str	r3, [r7, #0]
    if( adrNext->AdrEnabled == true )
    68aa:	7945      	ldrb	r5, [r0, #5]
    68ac:	2d00      	cmp	r5, #0
    68ae:	d163      	bne.n	6978 <LoRaMacAdrCalcNext+0xf8>
    *drOut = datarate;
    68b0:	464b      	mov	r3, r9
    68b2:	701e      	strb	r6, [r3, #0]
    *txPowOut = txPower;
    68b4:	4643      	mov	r3, r8
    68b6:	465a      	mov	r2, fp
    68b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        return CalcNextV11X( adrNext, drOut, txPowOut, adrAckCounter );
    }
}
    68ba:	0028      	movs	r0, r5
    68bc:	b005      	add	sp, #20
    68be:	bc3c      	pop	{r2, r3, r4, r5}
    68c0:	4690      	mov	r8, r2
    68c2:	4699      	mov	r9, r3
    68c4:	46a2      	mov	sl, r4
    68c6:	46ab      	mov	fp, r5
    68c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int8_t datarate = adrNext->Datarate;
    68ca:	2610      	movs	r6, #16
    68cc:	5786      	ldrsb	r6, [r0, r6]
    int8_t txPower = adrNext->TxPower;
    68ce:	2311      	movs	r3, #17
    68d0:	56c3      	ldrsb	r3, [r0, r3]
    68d2:	469b      	mov	fp, r3
    *adrAckCounter = adrNext->AdrAckCounter;
    68d4:	6883      	ldr	r3, [r0, #8]
    68d6:	603b      	str	r3, [r7, #0]
    if( adrNext->AdrEnabled == true )
    68d8:	7945      	ldrb	r5, [r0, #5]
    68da:	2d00      	cmp	r5, #0
    68dc:	d105      	bne.n	68ea <LoRaMacAdrCalcNext+0x6a>
    *drOut = datarate;
    68de:	464b      	mov	r3, r9
    68e0:	701e      	strb	r6, [r3, #0]
    *txPowOut = txPower;
    68e2:	4643      	mov	r3, r8
    68e4:	465a      	mov	r2, fp
    68e6:	701a      	strb	r2, [r3, #0]
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    68e8:	e7e7      	b.n	68ba <LoRaMacAdrCalcNext+0x3a>
        getPhy.Attribute = PHY_MIN_TX_DR;
    68ea:	a901      	add	r1, sp, #4
    68ec:	2301      	movs	r3, #1
    68ee:	700b      	strb	r3, [r1, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    68f0:	7c83      	ldrb	r3, [r0, #18]
    68f2:	708b      	strb	r3, [r1, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    68f4:	7cc0      	ldrb	r0, [r0, #19]
    68f6:	4b48      	ldr	r3, [pc, #288]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    68f8:	4798      	blx	r3
    68fa:	9000      	str	r0, [sp, #0]
        minTxDatarate = phyParam.Value;
    68fc:	b243      	sxtb	r3, r0
    68fe:	469a      	mov	sl, r3
        datarate = MAX( datarate, minTxDatarate );
    6900:	1c33      	adds	r3, r6, #0
    6902:	4556      	cmp	r6, sl
    6904:	da00      	bge.n	6908 <LoRaMacAdrCalcNext+0x88>
    6906:	4653      	mov	r3, sl
    6908:	b25e      	sxtb	r6, r3
        if( datarate == minTxDatarate )
    690a:	45b2      	cmp	sl, r6
    690c:	d026      	beq.n	695c <LoRaMacAdrCalcNext+0xdc>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
    690e:	89a3      	ldrh	r3, [r4, #12]
    6910:	68a2      	ldr	r2, [r4, #8]
    6912:	429a      	cmp	r2, r3
    6914:	d226      	bcs.n	6964 <LoRaMacAdrCalcNext+0xe4>
                adrAckReq = false;
    6916:	2500      	movs	r5, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    6918:	68a0      	ldr	r0, [r4, #8]
    691a:	89e1      	ldrh	r1, [r4, #14]
    691c:	89a3      	ldrh	r3, [r4, #12]
    691e:	185b      	adds	r3, r3, r1
    6920:	4298      	cmp	r0, r3
    6922:	d3dc      	bcc.n	68de <LoRaMacAdrCalcNext+0x5e>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    6924:	4b3d      	ldr	r3, [pc, #244]	; (6a1c <LoRaMacAdrCalcNext+0x19c>)
    6926:	4798      	blx	r3
    6928:	2901      	cmp	r1, #1
    692a:	d1d8      	bne.n	68de <LoRaMacAdrCalcNext+0x5e>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    692c:	a901      	add	r1, sp, #4
    692e:	2321      	movs	r3, #33	; 0x21
    6930:	700b      	strb	r3, [r1, #0]
                    getPhy.Datarate = datarate;
    6932:	704e      	strb	r6, [r1, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    6934:	7ca3      	ldrb	r3, [r4, #18]
    6936:	708b      	strb	r3, [r1, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    6938:	7ce0      	ldrb	r0, [r4, #19]
    693a:	4b37      	ldr	r3, [pc, #220]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    693c:	4798      	blx	r3
    693e:	9000      	str	r0, [sp, #0]
                    datarate = phyParam.Value;
    6940:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
    6942:	45b2      	cmp	sl, r6
    6944:	d1cb      	bne.n	68de <LoRaMacAdrCalcNext+0x5e>
                        if( adrNext->UpdateChanMask == true )
    6946:	7925      	ldrb	r5, [r4, #4]
    6948:	2d00      	cmp	r5, #0
    694a:	d0c8      	beq.n	68de <LoRaMacAdrCalcNext+0x5e>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    694c:	a902      	add	r1, sp, #8
    694e:	2301      	movs	r3, #1
    6950:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    6952:	7ce0      	ldrb	r0, [r4, #19]
    6954:	4b32      	ldr	r3, [pc, #200]	; (6a20 <LoRaMacAdrCalcNext+0x1a0>)
    6956:	4798      	blx	r3
                        adrAckReq = false;
    6958:	2500      	movs	r5, #0
    695a:	e7c0      	b.n	68de <LoRaMacAdrCalcNext+0x5e>
            *adrAckCounter = 0;
    695c:	2300      	movs	r3, #0
    695e:	603b      	str	r3, [r7, #0]
            adrAckReq = false;
    6960:	2500      	movs	r5, #0
    6962:	e7bc      	b.n	68de <LoRaMacAdrCalcNext+0x5e>
                getPhy.Attribute = PHY_MAX_TX_POWER;
    6964:	a901      	add	r1, sp, #4
    6966:	2307      	movs	r3, #7
    6968:	700b      	strb	r3, [r1, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    696a:	7ce0      	ldrb	r0, [r4, #19]
    696c:	4b2a      	ldr	r3, [pc, #168]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    696e:	4798      	blx	r3
    6970:	9000      	str	r0, [sp, #0]
                txPower = phyParam.Value;
    6972:	b243      	sxtb	r3, r0
    6974:	469b      	mov	fp, r3
    6976:	e7cf      	b.n	6918 <LoRaMacAdrCalcNext+0x98>
        getPhy.Attribute = PHY_MIN_TX_DR;
    6978:	2301      	movs	r3, #1
    697a:	466a      	mov	r2, sp
    697c:	7013      	strb	r3, [r2, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    697e:	7c83      	ldrb	r3, [r0, #18]
    6980:	7093      	strb	r3, [r2, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    6982:	7cc0      	ldrb	r0, [r0, #19]
    6984:	4669      	mov	r1, sp
    6986:	4b24      	ldr	r3, [pc, #144]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    6988:	4798      	blx	r3
    698a:	9001      	str	r0, [sp, #4]
        minTxDatarate = phyParam.Value;
    698c:	b243      	sxtb	r3, r0
    698e:	469a      	mov	sl, r3
        datarate = MAX( datarate, minTxDatarate );
    6990:	1c33      	adds	r3, r6, #0
    6992:	4556      	cmp	r6, sl
    6994:	da00      	bge.n	6998 <LoRaMacAdrCalcNext+0x118>
    6996:	4653      	mov	r3, sl
    6998:	b25e      	sxtb	r6, r3
        if( datarate == minTxDatarate )
    699a:	45b2      	cmp	sl, r6
    699c:	d022      	beq.n	69e4 <LoRaMacAdrCalcNext+0x164>
            if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
    699e:	89a3      	ldrh	r3, [r4, #12]
    69a0:	2500      	movs	r5, #0
    69a2:	68a2      	ldr	r2, [r4, #8]
    69a4:	429a      	cmp	r2, r3
    69a6:	416d      	adcs	r5, r5
    69a8:	b2ed      	uxtb	r5, r5
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    69aa:	68a0      	ldr	r0, [r4, #8]
    69ac:	89e1      	ldrh	r1, [r4, #14]
    69ae:	89a3      	ldrh	r3, [r4, #12]
    69b0:	185b      	adds	r3, r3, r1
    69b2:	4298      	cmp	r0, r3
    69b4:	d200      	bcs.n	69b8 <LoRaMacAdrCalcNext+0x138>
    69b6:	e77b      	b.n	68b0 <LoRaMacAdrCalcNext+0x30>
            if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + adrNext->AdrAckDelay + adrNext->AdrAckDelay ) )
    69b8:	18cb      	adds	r3, r1, r3
    69ba:	4298      	cmp	r0, r3
    69bc:	d321      	bcc.n	6a02 <LoRaMacAdrCalcNext+0x182>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    69be:	4b17      	ldr	r3, [pc, #92]	; (6a1c <LoRaMacAdrCalcNext+0x19c>)
    69c0:	4798      	blx	r3
    69c2:	2901      	cmp	r1, #1
    69c4:	d000      	beq.n	69c8 <LoRaMacAdrCalcNext+0x148>
    69c6:	e773      	b.n	68b0 <LoRaMacAdrCalcNext+0x30>
                    if( datarate == minTxDatarate )
    69c8:	45b2      	cmp	sl, r6
    69ca:	d00f      	beq.n	69ec <LoRaMacAdrCalcNext+0x16c>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    69cc:	2321      	movs	r3, #33	; 0x21
    69ce:	466a      	mov	r2, sp
    69d0:	7013      	strb	r3, [r2, #0]
                    getPhy.Datarate = datarate;
    69d2:	7056      	strb	r6, [r2, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    69d4:	7ca3      	ldrb	r3, [r4, #18]
    69d6:	7093      	strb	r3, [r2, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    69d8:	7ce0      	ldrb	r0, [r4, #19]
    69da:	4669      	mov	r1, sp
    69dc:	4b0e      	ldr	r3, [pc, #56]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    69de:	4798      	blx	r3
                    datarate = phyParam.Value;
    69e0:	b246      	sxtb	r6, r0
    69e2:	e765      	b.n	68b0 <LoRaMacAdrCalcNext+0x30>
            *adrAckCounter = 0;
    69e4:	2300      	movs	r3, #0
    69e6:	603b      	str	r3, [r7, #0]
            adrAckReq = false;
    69e8:	2500      	movs	r5, #0
    69ea:	e7de      	b.n	69aa <LoRaMacAdrCalcNext+0x12a>
                        if( adrNext->UpdateChanMask == true )
    69ec:	7925      	ldrb	r5, [r4, #4]
    69ee:	2d00      	cmp	r5, #0
    69f0:	d0ec      	beq.n	69cc <LoRaMacAdrCalcNext+0x14c>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    69f2:	a902      	add	r1, sp, #8
    69f4:	2301      	movs	r3, #1
    69f6:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    69f8:	7ce0      	ldrb	r0, [r4, #19]
    69fa:	4b09      	ldr	r3, [pc, #36]	; (6a20 <LoRaMacAdrCalcNext+0x1a0>)
    69fc:	4798      	blx	r3
                        adrAckReq = false;
    69fe:	2500      	movs	r5, #0
    6a00:	e7e4      	b.n	69cc <LoRaMacAdrCalcNext+0x14c>
                getPhy.Attribute = PHY_MAX_TX_POWER;
    6a02:	2307      	movs	r3, #7
    6a04:	466a      	mov	r2, sp
    6a06:	7013      	strb	r3, [r2, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    6a08:	7ce0      	ldrb	r0, [r4, #19]
    6a0a:	4669      	mov	r1, sp
    6a0c:	4b02      	ldr	r3, [pc, #8]	; (6a18 <LoRaMacAdrCalcNext+0x198>)
    6a0e:	4798      	blx	r3
                txPower = phyParam.Value;
    6a10:	b243      	sxtb	r3, r0
    6a12:	469b      	mov	fp, r3
    6a14:	e74c      	b.n	68b0 <LoRaMacAdrCalcNext+0x30>
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	00008445 	.word	0x00008445
    6a1c:	0000c719 	.word	0x0000c719
    6a20:	00008479 	.word	0x00008479

00006a24 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a24:	4770      	bx	lr

00006a26 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a26:	2001      	movs	r0, #1
    6a28:	4770      	bx	lr

00006a2a <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
    6a2a:	2300      	movs	r3, #0
    6a2c:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a2e:	2000      	movs	r0, #0
    6a30:	4770      	bx	lr

00006a32 <LoRaMacClassBSetBeaconState>:
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
    6a32:	4770      	bx	lr

00006a34 <LoRaMacClassBSetPingSlotState>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a34:	4770      	bx	lr

00006a36 <LoRaMacClassBSetMulticastSlotState>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a36:	4770      	bx	lr

00006a38 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a38:	2000      	movs	r0, #0
    6a3a:	4770      	bx	lr

00006a3c <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a3c:	4770      	bx	lr

00006a3e <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a3e:	4770      	bx	lr

00006a40 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a40:	4770      	bx	lr

00006a42 <LoRaMacClassBRxBeacon>:

    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a42:	2000      	movs	r0, #0
    6a44:	4770      	bx	lr

00006a46 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a46:	2000      	movs	r0, #0
    6a48:	4770      	bx	lr

00006a4a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a4a:	2000      	movs	r0, #0
    6a4c:	4770      	bx	lr

00006a4e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a4e:	2000      	movs	r0, #0
    6a50:	4770      	bx	lr

00006a52 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a52:	2000      	movs	r0, #0
    6a54:	4770      	bx	lr

00006a56 <LoRaMacClassBSetPingSlotInfo>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a56:	4770      	bx	lr

00006a58 <LoRaMacClassBHaltBeaconing>:
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a58:	4770      	bx	lr

00006a5a <LoRaMacClassBResumeBeaconing>:

        LoRaMacClassBBeaconTimerEvent( );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a5a:	4770      	bx	lr

00006a5c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a5c:	2002      	movs	r0, #2
    6a5e:	4770      	bx	lr

00006a60 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a60:	2002      	movs	r0, #2
    6a62:	4770      	bx	lr

00006a64 <LoRaMacMibClassBSetRequestConfirm>:
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a64:	2002      	movs	r0, #2
    6a66:	4770      	bx	lr

00006a68 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a68:	4770      	bx	lr

00006a6a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a6a:	2000      	movs	r0, #0
    6a6c:	4770      	bx	lr

00006a6e <LoRaMacClassBBeaconTimingAns>:
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a6e:	4770      	bx	lr

00006a70 <LoRaMacClassBDeviceTimeAns>:
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a70:	4770      	bx	lr

00006a72 <LoRaMacClassBBeaconFreqReq>:
    NvmContextChange( );
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a72:	2000      	movs	r0, #0
    6a74:	4770      	bx	lr

00006a76 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
    6a76:	2000      	movs	r0, #0
    6a78:	4770      	bx	lr

00006a7a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
    6a7a:	4770      	bx	lr

00006a7c <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    6a7c:	4770      	bx	lr
	...

00006a80 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    6a80:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
    6a82:	4b03      	ldr	r3, [pc, #12]	; (6a90 <NvmCtxCallback+0x10>)
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	2b00      	cmp	r3, #0
    6a88:	d000      	beq.n	6a8c <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
    6a8a:	4798      	blx	r3
    }
}
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	200013c8 	.word	0x200013c8

00006a94 <isSlotFree>:
        if( mem[size] != 0x00 )
    6a94:	7803      	ldrb	r3, [r0, #0]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d109      	bne.n	6aae <isSlotFree+0x1a>
    6a9a:	1c43      	adds	r3, r0, #1
    6a9c:	3010      	adds	r0, #16
    6a9e:	781a      	ldrb	r2, [r3, #0]
    6aa0:	2a00      	cmp	r2, #0
    6aa2:	d106      	bne.n	6ab2 <isSlotFree+0x1e>
    6aa4:	3301      	adds	r3, #1
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
    6aa6:	4283      	cmp	r3, r0
    6aa8:	d1f9      	bne.n	6a9e <isSlotFree+0xa>
    return true;
    6aaa:	2001      	movs	r0, #1
}
    6aac:	4770      	bx	lr
            return false;
    6aae:	2000      	movs	r0, #0
    6ab0:	e7fc      	b.n	6aac <isSlotFree+0x18>
    6ab2:	2000      	movs	r0, #0
    6ab4:	e7fa      	b.n	6aac <isSlotFree+0x18>
	...

00006ab8 <mallocNewMacCommandSlot>:
{
    6ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aba:	4d08      	ldr	r5, [pc, #32]	; (6adc <mallocNewMacCommandSlot+0x24>)
    6abc:	002c      	movs	r4, r5
    6abe:	340c      	adds	r4, #12
    6ac0:	35fc      	adds	r5, #252	; 0xfc
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
    6ac2:	4f07      	ldr	r7, [pc, #28]	; (6ae0 <mallocNewMacCommandSlot+0x28>)
    6ac4:	0026      	movs	r6, r4
    6ac6:	0020      	movs	r0, r4
    6ac8:	47b8      	blx	r7
    6aca:	2800      	cmp	r0, #0
    6acc:	d103      	bne.n	6ad6 <mallocNewMacCommandSlot+0x1e>
    6ace:	3410      	adds	r4, #16
        if( itr == NUM_OF_MAC_COMMANDS )
    6ad0:	42ac      	cmp	r4, r5
    6ad2:	d1f7      	bne.n	6ac4 <mallocNewMacCommandSlot+0xc>
            return 0;
    6ad4:	2600      	movs	r6, #0
}
    6ad6:	0030      	movs	r0, r6
    6ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ada:	46c0      	nop			; (mov r8, r8)
    6adc:	200013c8 	.word	0x200013c8
    6ae0:	00006a95 	.word	0x00006a95

00006ae4 <freeMacCommandSlot>:
{
    6ae4:	b510      	push	{r4, lr}
    if( slot == 0 )
    6ae6:	2800      	cmp	r0, #0
    6ae8:	d005      	beq.n	6af6 <freeMacCommandSlot+0x12>
    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
    6aea:	2210      	movs	r2, #16
    6aec:	2100      	movs	r1, #0
    6aee:	4b03      	ldr	r3, [pc, #12]	; (6afc <freeMacCommandSlot+0x18>)
    6af0:	4798      	blx	r3
    return true;
    6af2:	2001      	movs	r0, #1
}
    6af4:	bd10      	pop	{r4, pc}
        return false;
    6af6:	2000      	movs	r0, #0
    6af8:	e7fc      	b.n	6af4 <freeMacCommandSlot+0x10>
    6afa:	46c0      	nop			; (mov r8, r8)
    6afc:	00001ec7 	.word	0x00001ec7

00006b00 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
    6b00:	b570      	push	{r4, r5, r6, lr}
    6b02:	0005      	movs	r5, r0

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
    6b04:	4c05      	ldr	r4, [pc, #20]	; (6b1c <LoRaMacCommandsInit+0x1c>)
    6b06:	1d20      	adds	r0, r4, #4
    6b08:	22fc      	movs	r2, #252	; 0xfc
    6b0a:	2100      	movs	r1, #0
    6b0c:	4b04      	ldr	r3, [pc, #16]	; (6b20 <LoRaMacCommandsInit+0x20>)
    6b0e:	4798      	blx	r3
    list->First = 0;
    6b10:	2300      	movs	r3, #0
    6b12:	6063      	str	r3, [r4, #4]
    list->Last = 0;
    6b14:	60a3      	str	r3, [r4, #8]

    linkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
    6b16:	6025      	str	r5, [r4, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
    6b18:	2000      	movs	r0, #0
    6b1a:	bd70      	pop	{r4, r5, r6, pc}
    6b1c:	200013c8 	.word	0x200013c8
    6b20:	00001ec7 	.word	0x00001ec7

00006b24 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
    6b24:	b510      	push	{r4, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
    6b26:	2800      	cmp	r0, #0
    6b28:	d007      	beq.n	6b3a <LoRaMacCommandsRestoreNvmCtx+0x16>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
    6b2a:	22fc      	movs	r2, #252	; 0xfc
    6b2c:	0001      	movs	r1, r0
    6b2e:	4804      	ldr	r0, [pc, #16]	; (6b40 <LoRaMacCommandsRestoreNvmCtx+0x1c>)
    6b30:	3004      	adds	r0, #4
    6b32:	4b04      	ldr	r3, [pc, #16]	; (6b44 <LoRaMacCommandsRestoreNvmCtx+0x20>)
    6b34:	4798      	blx	r3
        return LORAMAC_COMMANDS_SUCCESS;
    6b36:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
    6b38:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
    6b3a:	2001      	movs	r0, #1
    6b3c:	e7fc      	b.n	6b38 <LoRaMacCommandsRestoreNvmCtx+0x14>
    6b3e:	46c0      	nop			; (mov r8, r8)
    6b40:	200013c8 	.word	0x200013c8
    6b44:	00001e91 	.word	0x00001e91

00006b48 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
    6b48:	23fc      	movs	r3, #252	; 0xfc
    6b4a:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
    6b4c:	4801      	ldr	r0, [pc, #4]	; (6b54 <LoRaMacCommandsGetNvmCtx+0xc>)
}
    6b4e:	3004      	adds	r0, #4
    6b50:	4770      	bx	lr
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	200013c8 	.word	0x200013c8

00006b58 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
    6b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b5a:	0005      	movs	r5, r0
    6b5c:	000f      	movs	r7, r1
    6b5e:	0016      	movs	r6, r2
    if( payload == 0 )
    6b60:	2900      	cmp	r1, #0
    6b62:	d030      	beq.n	6bc6 <LoRaMacCommandsAddCmd+0x6e>
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
    6b64:	4b19      	ldr	r3, [pc, #100]	; (6bcc <LoRaMacCommandsAddCmd+0x74>)
    6b66:	4798      	blx	r3
    6b68:	0004      	movs	r4, r0

    if( newCmd == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    6b6a:	2002      	movs	r0, #2
    if( newCmd == 0 )
    6b6c:	2c00      	cmp	r4, #0
    6b6e:	d02b      	beq.n	6bc8 <LoRaMacCommandsAddCmd+0x70>
    if( list->First == 0 )
    6b70:	4b17      	ldr	r3, [pc, #92]	; (6bd0 <LoRaMacCommandsAddCmd+0x78>)
    6b72:	685b      	ldr	r3, [r3, #4]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d015      	beq.n	6ba4 <LoRaMacCommandsAddCmd+0x4c>
    if( list->Last )
    6b78:	4b15      	ldr	r3, [pc, #84]	; (6bd0 <LoRaMacCommandsAddCmd+0x78>)
    6b7a:	689b      	ldr	r3, [r3, #8]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d000      	beq.n	6b82 <LoRaMacCommandsAddCmd+0x2a>
        list->Last->Next = element;
    6b80:	601c      	str	r4, [r3, #0]
    element->Next = 0;
    6b82:	2300      	movs	r3, #0
    6b84:	6023      	str	r3, [r4, #0]
    list->Last = element;
    6b86:	4b12      	ldr	r3, [pc, #72]	; (6bd0 <LoRaMacCommandsAddCmd+0x78>)
    6b88:	609c      	str	r4, [r3, #8]
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    6b8a:	7125      	strb	r5, [r4, #4]
    newCmd->PayloadSize = payloadSize;
    6b8c:	60a6      	str	r6, [r4, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
    6b8e:	b2b2      	uxth	r2, r6
    6b90:	1d60      	adds	r0, r4, #5
    6b92:	0039      	movs	r1, r7
    6b94:	4b0f      	ldr	r3, [pc, #60]	; (6bd4 <LoRaMacCommandsAddCmd+0x7c>)
    6b96:	4798      	blx	r3
    switch( cid )
    6b98:	2d20      	cmp	r5, #32
    6b9a:	d806      	bhi.n	6baa <LoRaMacCommandsAddCmd+0x52>
    6b9c:	00ad      	lsls	r5, r5, #2
    6b9e:	4b0e      	ldr	r3, [pc, #56]	; (6bd8 <LoRaMacCommandsAddCmd+0x80>)
    6ba0:	595b      	ldr	r3, [r3, r5]
    6ba2:	469f      	mov	pc, r3
        list->First = element;
    6ba4:	4b0a      	ldr	r3, [pc, #40]	; (6bd0 <LoRaMacCommandsAddCmd+0x78>)
    6ba6:	605c      	str	r4, [r3, #4]
    6ba8:	e7e6      	b.n	6b78 <LoRaMacCommandsAddCmd+0x20>
            return false;
    6baa:	2300      	movs	r3, #0
    newCmd->IsSticky = IsSticky( cid );
    6bac:	7323      	strb	r3, [r4, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
    6bae:	4908      	ldr	r1, [pc, #32]	; (6bd0 <LoRaMacCommandsAddCmd+0x78>)
    6bb0:	22fc      	movs	r2, #252	; 0xfc
    6bb2:	588b      	ldr	r3, [r1, r2]
    6bb4:	3301      	adds	r3, #1
    6bb6:	199e      	adds	r6, r3, r6
    6bb8:	508e      	str	r6, [r1, r2]

    NvmCtxCallback( );
    6bba:	4b08      	ldr	r3, [pc, #32]	; (6bdc <LoRaMacCommandsAddCmd+0x84>)
    6bbc:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    6bbe:	2000      	movs	r0, #0
    6bc0:	e002      	b.n	6bc8 <LoRaMacCommandsAddCmd+0x70>
            return true;
    6bc2:	2301      	movs	r3, #1
    6bc4:	e7f2      	b.n	6bac <LoRaMacCommandsAddCmd+0x54>
        return LORAMAC_COMMANDS_ERROR_NPE;
    6bc6:	2001      	movs	r0, #1
}
    6bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bca:	46c0      	nop			; (mov r8, r8)
    6bcc:	00006ab9 	.word	0x00006ab9
    6bd0:	200013c8 	.word	0x200013c8
    6bd4:	00001e91 	.word	0x00001e91
    6bd8:	0001434c 	.word	0x0001434c
    6bdc:	00006a81 	.word	0x00006a81

00006be0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    6be0:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    6be2:	2800      	cmp	r0, #0
    6be4:	d015      	beq.n	6c12 <LoRaMacCommandsRemoveCmd+0x32>
    curElement = list->First;
    6be6:	4b1d      	ldr	r3, [pc, #116]	; (6c5c <LoRaMacCommandsRemoveCmd+0x7c>)
    6be8:	685a      	ldr	r2, [r3, #4]
    if( element != curElement)
    6bea:	4290      	cmp	r0, r2
    6bec:	d013      	beq.n	6c16 <LoRaMacCommandsRemoveCmd+0x36>
        while(curElement && (curElement->Next != element))
    6bee:	2a00      	cmp	r2, #0
    6bf0:	d01b      	beq.n	6c2a <LoRaMacCommandsRemoveCmd+0x4a>
    6bf2:	6813      	ldr	r3, [r2, #0]
    6bf4:	4298      	cmp	r0, r3
    6bf6:	d006      	beq.n	6c06 <LoRaMacCommandsRemoveCmd+0x26>
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d017      	beq.n	6c2c <LoRaMacCommandsRemoveCmd+0x4c>
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	4290      	cmp	r0, r2
    6c00:	d014      	beq.n	6c2c <LoRaMacCommandsRemoveCmd+0x4c>
    6c02:	0013      	movs	r3, r2
    6c04:	e7f8      	b.n	6bf8 <LoRaMacCommandsRemoveCmd+0x18>
    6c06:	0013      	movs	r3, r2
    6c08:	e010      	b.n	6c2c <LoRaMacCommandsRemoveCmd+0x4c>
    if( freeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
    6c0a:	4b15      	ldr	r3, [pc, #84]	; (6c60 <LoRaMacCommandsRemoveCmd+0x80>)
    6c0c:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    6c0e:	2300      	movs	r3, #0
    6c10:	e022      	b.n	6c58 <LoRaMacCommandsRemoveCmd+0x78>
        return LORAMAC_COMMANDS_ERROR_NPE;
    6c12:	2301      	movs	r3, #1
    6c14:	e020      	b.n	6c58 <LoRaMacCommandsRemoveCmd+0x78>
        list->First = element->Next;
    6c16:	4b11      	ldr	r3, [pc, #68]	; (6c5c <LoRaMacCommandsRemoveCmd+0x7c>)
    6c18:	6802      	ldr	r2, [r0, #0]
    6c1a:	605a      	str	r2, [r3, #4]
    if( list->Last == element )
    6c1c:	689b      	ldr	r3, [r3, #8]
    6c1e:	4298      	cmp	r0, r3
    6c20:	d10c      	bne.n	6c3c <LoRaMacCommandsRemoveCmd+0x5c>
        curElement = NULL;
    6c22:	2300      	movs	r3, #0
        list->Last = PrevElement;
    6c24:	4a0d      	ldr	r2, [pc, #52]	; (6c5c <LoRaMacCommandsRemoveCmd+0x7c>)
    6c26:	6093      	str	r3, [r2, #8]
    6c28:	e004      	b.n	6c34 <LoRaMacCommandsRemoveCmd+0x54>
        while(curElement && (curElement->Next != element))
    6c2a:	0013      	movs	r3, r2
    if( list->Last == element )
    6c2c:	4a0b      	ldr	r2, [pc, #44]	; (6c5c <LoRaMacCommandsRemoveCmd+0x7c>)
    6c2e:	6892      	ldr	r2, [r2, #8]
    6c30:	4290      	cmp	r0, r2
    6c32:	d0f7      	beq.n	6c24 <LoRaMacCommandsRemoveCmd+0x44>
    if( PrevElement )
    6c34:	2b00      	cmp	r3, #0
    6c36:	d001      	beq.n	6c3c <LoRaMacCommandsRemoveCmd+0x5c>
        PrevElement->Next = element->Next;
    6c38:	6802      	ldr	r2, [r0, #0]
    6c3a:	601a      	str	r2, [r3, #0]
    element->Next = 0;
    6c3c:	2300      	movs	r3, #0
    6c3e:	6003      	str	r3, [r0, #0]
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
    6c40:	4906      	ldr	r1, [pc, #24]	; (6c5c <LoRaMacCommandsRemoveCmd+0x7c>)
    6c42:	22fc      	movs	r2, #252	; 0xfc
    6c44:	588b      	ldr	r3, [r1, r2]
    6c46:	3b01      	subs	r3, #1
    6c48:	6884      	ldr	r4, [r0, #8]
    6c4a:	1b1b      	subs	r3, r3, r4
    6c4c:	508b      	str	r3, [r1, r2]
    if( freeMacCommandSlot( macCmd ) == false )
    6c4e:	4b05      	ldr	r3, [pc, #20]	; (6c64 <LoRaMacCommandsRemoveCmd+0x84>)
    6c50:	4798      	blx	r3
        return LORAMAC_COMMANDS_ERROR;
    6c52:	2305      	movs	r3, #5
    if( freeMacCommandSlot( macCmd ) == false )
    6c54:	2800      	cmp	r0, #0
    6c56:	d1d8      	bne.n	6c0a <LoRaMacCommandsRemoveCmd+0x2a>
}
    6c58:	0018      	movs	r0, r3
    6c5a:	bd10      	pop	{r4, pc}
    6c5c:	200013c8 	.word	0x200013c8
    6c60:	00006a81 	.word	0x00006a81
    6c64:	00006ae5 	.word	0x00006ae5

00006c68 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    6c68:	4b09      	ldr	r3, [pc, #36]	; (6c90 <LoRaMacCommandsGetCmd+0x28>)
    6c6a:	685b      	ldr	r3, [r3, #4]

    // Loop through all elements until we find the element with the given CID
    while(curElement && ( curElement->CID != cid ) )
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d00b      	beq.n	6c88 <LoRaMacCommandsGetCmd+0x20>
    6c70:	791a      	ldrb	r2, [r3, #4]
    6c72:	4282      	cmp	r2, r0
    6c74:	d005      	beq.n	6c82 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
    6c76:	681b      	ldr	r3, [r3, #0]
    while(curElement && ( curElement->CID != cid ) )
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d007      	beq.n	6c8c <LoRaMacCommandsGetCmd+0x24>
    6c7c:	791a      	ldrb	r2, [r3, #4]
    6c7e:	4282      	cmp	r2, r0
    6c80:	d1f9      	bne.n	6c76 <LoRaMacCommandsGetCmd+0xe>
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    *macCmd = curElement;
    6c82:	600b      	str	r3, [r1, #0]

    return LORAMAC_COMMANDS_SUCCESS;
    6c84:	2000      	movs	r0, #0
}
    6c86:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    6c88:	2003      	movs	r0, #3
    6c8a:	e7fc      	b.n	6c86 <LoRaMacCommandsGetCmd+0x1e>
    6c8c:	2003      	movs	r0, #3
    6c8e:	e7fa      	b.n	6c86 <LoRaMacCommandsGetCmd+0x1e>
    6c90:	200013c8 	.word	0x200013c8

00006c94 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
    6c94:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    6c96:	4b0a      	ldr	r3, [pc, #40]	; (6cc0 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
    6c98:	6858      	ldr	r0, [r3, #4]

    // Loop through all elements
    while( curElement )
    6c9a:	2800      	cmp	r0, #0
    6c9c:	d00b      	beq.n	6cb6 <LoRaMacCommandsRemoveNoneStickyCmds+0x22>
    {
        if( curElement->IsSticky == false )
        {
            nexElement = curElement->Next;
            LoRaMacCommandsRemoveCmd( curElement );
    6c9e:	4d09      	ldr	r5, [pc, #36]	; (6cc4 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>)
    6ca0:	e004      	b.n	6cac <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            nexElement = curElement->Next;
    6ca2:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
    6ca4:	47a8      	blx	r5
            curElement = nexElement;
    6ca6:	0020      	movs	r0, r4
    while( curElement )
    6ca8:	2800      	cmp	r0, #0
    6caa:	d004      	beq.n	6cb6 <LoRaMacCommandsRemoveNoneStickyCmds+0x22>
        if( curElement->IsSticky == false )
    6cac:	7b03      	ldrb	r3, [r0, #12]
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d0f7      	beq.n	6ca2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
        else
        {
            curElement = curElement->Next;
    6cb2:	6800      	ldr	r0, [r0, #0]
    6cb4:	e7f8      	b.n	6ca8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
        }
    }

    NvmCtxCallback( );
    6cb6:	4b04      	ldr	r3, [pc, #16]	; (6cc8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>)
    6cb8:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
}
    6cba:	2000      	movs	r0, #0
    6cbc:	bd70      	pop	{r4, r5, r6, pc}
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	200013c8 	.word	0x200013c8
    6cc4:	00006be1 	.word	0x00006be1
    6cc8:	00006a81 	.word	0x00006a81

00006ccc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
    6ccc:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    6cce:	4b0c      	ldr	r3, [pc, #48]	; (6d00 <LoRaMacCommandsRemoveStickyAnsCmds+0x34>)
    6cd0:	6858      	ldr	r0, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d010      	beq.n	6cf8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
        nexElement = curElement->Next;
        if( curElement->IsSticky == true )
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
    6cd6:	2502      	movs	r5, #2
    6cd8:	e003      	b.n	6ce2 <LoRaMacCommandsRemoveStickyAnsCmds+0x16>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
    6cda:	4b0a      	ldr	r3, [pc, #40]	; (6d04 <LoRaMacCommandsRemoveStickyAnsCmds+0x38>)
    6cdc:	4798      	blx	r3
    6cde:	1e20      	subs	r0, r4, #0
    while( curElement != NULL )
    6ce0:	d00a      	beq.n	6cf8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
        nexElement = curElement->Next;
    6ce2:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == true )
    6ce4:	7b03      	ldrb	r3, [r0, #12]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d0f9      	beq.n	6cde <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
                if( curElement->CID == CIDsStickyAnsCmds[i] )
    6cea:	7903      	ldrb	r3, [r0, #4]
    6cec:	2b05      	cmp	r3, #5
    6cee:	d0f4      	beq.n	6cda <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    6cf0:	43ab      	bics	r3, r5
    6cf2:	2b08      	cmp	r3, #8
    6cf4:	d1f3      	bne.n	6cde <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
    6cf6:	e7f0      	b.n	6cda <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
            }
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
    6cf8:	4b03      	ldr	r3, [pc, #12]	; (6d08 <LoRaMacCommandsRemoveStickyAnsCmds+0x3c>)
    6cfa:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
}
    6cfc:	2000      	movs	r0, #0
    6cfe:	bd70      	pop	{r4, r5, r6, pc}
    6d00:	200013c8 	.word	0x200013c8
    6d04:	00006be1 	.word	0x00006be1
    6d08:	00006a81 	.word	0x00006a81

00006d0c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
    6d0c:	2800      	cmp	r0, #0
    6d0e:	d005      	beq.n	6d1c <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
    6d10:	23fc      	movs	r3, #252	; 0xfc
    6d12:	4a03      	ldr	r2, [pc, #12]	; (6d20 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
    6d14:	58d3      	ldr	r3, [r2, r3]
    6d16:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
    6d18:	2000      	movs	r0, #0

}
    6d1a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
    6d1c:	2001      	movs	r0, #1
    6d1e:	e7fc      	b.n	6d1a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    6d20:	200013c8 	.word	0x200013c8

00006d24 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
    6d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d26:	46c6      	mov	lr, r8
    6d28:	b500      	push	{lr}
    6d2a:	0007      	movs	r7, r0
    6d2c:	1e16      	subs	r6, r2, #0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    6d2e:	d028      	beq.n	6d82 <LoRaMacCommandsSerializeCmds+0x5e>
    6d30:	2900      	cmp	r1, #0
    6d32:	d028      	beq.n	6d86 <LoRaMacCommandsSerializeCmds+0x62>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    6d34:	4b16      	ldr	r3, [pc, #88]	; (6d90 <LoRaMacCommandsSerializeCmds+0x6c>)
    6d36:	685d      	ldr	r5, [r3, #4]
    uint8_t itr = 0;

    // Loop through all elements
    while( curElement )
    6d38:	2d00      	cmp	r5, #0
    6d3a:	d026      	beq.n	6d8a <LoRaMacCommandsSerializeCmds+0x66>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
    6d3c:	68ab      	ldr	r3, [r5, #8]
    6d3e:	1c5a      	adds	r2, r3, #1
    6d40:	2000      	movs	r0, #0
    6d42:	2300      	movs	r3, #0
    6d44:	4297      	cmp	r7, r2
    6d46:	d319      	bcc.n	6d7c <LoRaMacCommandsSerializeCmds+0x58>
        {
            buffer[itr++] = curElement->CID;
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
    6d48:	4a12      	ldr	r2, [pc, #72]	; (6d94 <LoRaMacCommandsSerializeCmds+0x70>)
    6d4a:	4690      	mov	r8, r2
            buffer[itr++] = curElement->CID;
    6d4c:	3301      	adds	r3, #1
    6d4e:	b2dc      	uxtb	r4, r3
    6d50:	792b      	ldrb	r3, [r5, #4]
    6d52:	5433      	strb	r3, [r6, r0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
    6d54:	892a      	ldrh	r2, [r5, #8]
    6d56:	1d69      	adds	r1, r5, #5
    6d58:	1930      	adds	r0, r6, r4
    6d5a:	47c0      	blx	r8
            itr = itr + curElement->PayloadSize;
    6d5c:	68ab      	ldr	r3, [r5, #8]
    6d5e:	469c      	mov	ip, r3
    6d60:	4464      	add	r4, ip
    6d62:	b2e3      	uxtb	r3, r4
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
    6d64:	682d      	ldr	r5, [r5, #0]
    while( curElement )
    6d66:	2d00      	cmp	r5, #0
    6d68:	d007      	beq.n	6d7a <LoRaMacCommandsSerializeCmds+0x56>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
    6d6a:	0018      	movs	r0, r3
    6d6c:	1af9      	subs	r1, r7, r3
    6d6e:	68aa      	ldr	r2, [r5, #8]
    6d70:	3201      	adds	r2, #1
    6d72:	4291      	cmp	r1, r2
    6d74:	d2ea      	bcs.n	6d4c <LoRaMacCommandsSerializeCmds+0x28>
    }

    return LORAMAC_COMMANDS_SUCCESS;
    6d76:	2000      	movs	r0, #0
    6d78:	e000      	b.n	6d7c <LoRaMacCommandsSerializeCmds+0x58>
    6d7a:	2000      	movs	r0, #0
}
    6d7c:	bc04      	pop	{r2}
    6d7e:	4690      	mov	r8, r2
    6d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
    6d82:	2001      	movs	r0, #1
    6d84:	e7fa      	b.n	6d7c <LoRaMacCommandsSerializeCmds+0x58>
    6d86:	2001      	movs	r0, #1
    6d88:	e7f8      	b.n	6d7c <LoRaMacCommandsSerializeCmds+0x58>
    return LORAMAC_COMMANDS_SUCCESS;
    6d8a:	2000      	movs	r0, #0
    6d8c:	e7f6      	b.n	6d7c <LoRaMacCommandsSerializeCmds+0x58>
    6d8e:	46c0      	nop			; (mov r8, r8)
    6d90:	200013c8 	.word	0x200013c8
    6d94:	00001e91 	.word	0x00001e91

00006d98 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
    6d98:	2800      	cmp	r0, #0
    6d9a:	d014      	beq.n	6dc6 <LoRaMacCommandsStickyCmdsPending+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    6d9c:	4b0c      	ldr	r3, [pc, #48]	; (6dd0 <LoRaMacCommandsStickyCmdsPending+0x38>)
    6d9e:	685b      	ldr	r3, [r3, #4]

    *cmdsPending = false;
    6da0:	2200      	movs	r2, #0
    6da2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement )
    6da4:	2b00      	cmp	r3, #0
    6da6:	d010      	beq.n	6dca <LoRaMacCommandsStickyCmdsPending+0x32>
    {
        if( curElement->IsSticky == true )
    6da8:	7b1a      	ldrb	r2, [r3, #12]
    6daa:	2a00      	cmp	r2, #0
    6dac:	d105      	bne.n	6dba <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
    6dae:	681b      	ldr	r3, [r3, #0]
    while( curElement )
    6db0:	2b00      	cmp	r3, #0
    6db2:	d006      	beq.n	6dc2 <LoRaMacCommandsStickyCmdsPending+0x2a>
        if( curElement->IsSticky == true )
    6db4:	7b1a      	ldrb	r2, [r3, #12]
    6db6:	2a00      	cmp	r2, #0
    6db8:	d0f9      	beq.n	6dae <LoRaMacCommandsStickyCmdsPending+0x16>
            *cmdsPending = true;
    6dba:	2301      	movs	r3, #1
    6dbc:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
    6dbe:	2000      	movs	r0, #0
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
    6dc0:	4770      	bx	lr
    return LORAMAC_COMMANDS_SUCCESS;
    6dc2:	2000      	movs	r0, #0
    6dc4:	e7fc      	b.n	6dc0 <LoRaMacCommandsStickyCmdsPending+0x28>
        return LORAMAC_COMMANDS_ERROR_NPE;
    6dc6:	2001      	movs	r0, #1
    6dc8:	e7fa      	b.n	6dc0 <LoRaMacCommandsStickyCmdsPending+0x28>
    return LORAMAC_COMMANDS_SUCCESS;
    6dca:	2000      	movs	r0, #0
    6dcc:	e7f8      	b.n	6dc0 <LoRaMacCommandsStickyCmdsPending+0x28>
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	200013c8 	.word	0x200013c8

00006dd4 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
    6dd4:	b570      	push	{r4, r5, r6, lr}
    6dd6:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
    6dd8:	4c09      	ldr	r4, [pc, #36]	; (6e00 <LoRaMacConfirmQueueInit+0x2c>)
    6dda:	6020      	str	r0, [r4, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
    6ddc:	0020      	movs	r0, r4
    6dde:	3014      	adds	r0, #20
    6de0:	6120      	str	r0, [r4, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
    6de2:	2200      	movs	r2, #0
    6de4:	2328      	movs	r3, #40	; 0x28
    6de6:	54e2      	strb	r2, [r4, r3]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6de8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6dea:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
    6dec:	3214      	adds	r2, #20
    6dee:	21ff      	movs	r1, #255	; 0xff
    6df0:	4b04      	ldr	r3, [pc, #16]	; (6e04 <LoRaMacConfirmQueueInit+0x30>)
    6df2:	4798      	blx	r3

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
    6df4:	2301      	movs	r3, #1
    6df6:	6922      	ldr	r2, [r4, #16]
    6df8:	7553      	strb	r3, [r2, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
    6dfa:	60e5      	str	r5, [r4, #12]
}
    6dfc:	bd70      	pop	{r4, r5, r6, pc}
    6dfe:	46c0      	nop			; (mov r8, r8)
    6e00:	200014c8 	.word	0x200014c8
    6e04:	00001ec7 	.word	0x00001ec7

00006e08 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
    6e08:	b510      	push	{r4, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
    6e0a:	2800      	cmp	r0, #0
    6e0c:	d007      	beq.n	6e1e <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
    6e0e:	2216      	movs	r2, #22
    6e10:	0001      	movs	r1, r0
    6e12:	4804      	ldr	r0, [pc, #16]	; (6e24 <LoRaMacConfirmQueueRestoreNvmCtx+0x1c>)
    6e14:	3014      	adds	r0, #20
    6e16:	4b04      	ldr	r3, [pc, #16]	; (6e28 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>)
    6e18:	4798      	blx	r3
        return true;
    6e1a:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
    6e1c:	bd10      	pop	{r4, pc}
        return false;
    6e1e:	2000      	movs	r0, #0
    6e20:	e7fc      	b.n	6e1c <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	200014c8 	.word	0x200014c8
    6e28:	00001e91 	.word	0x00001e91

00006e2c <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    6e2c:	2316      	movs	r3, #22
    6e2e:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
    6e30:	4801      	ldr	r0, [pc, #4]	; (6e38 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
    6e32:	3014      	adds	r0, #20
    6e34:	4770      	bx	lr
    6e36:	46c0      	nop			; (mov r8, r8)
    6e38:	200014c8 	.word	0x200014c8

00006e3c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    6e3c:	4b0f      	ldr	r3, [pc, #60]	; (6e7c <LoRaMacConfirmQueueAdd+0x40>)
    6e3e:	691a      	ldr	r2, [r3, #16]
    6e40:	7d11      	ldrb	r1, [r2, #20]
    {
        // Protect the buffer against overwrites
        return false;
    6e42:	2300      	movs	r3, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    6e44:	2904      	cmp	r1, #4
    6e46:	d814      	bhi.n	6e72 <LoRaMacConfirmQueueAdd+0x36>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
    6e48:	4b0c      	ldr	r3, [pc, #48]	; (6e7c <LoRaMacConfirmQueueAdd+0x40>)
    6e4a:	689b      	ldr	r3, [r3, #8]
    6e4c:	7801      	ldrb	r1, [r0, #0]
    6e4e:	7019      	strb	r1, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    6e50:	7841      	ldrb	r1, [r0, #1]
    6e52:	7059      	strb	r1, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    6e54:	78c1      	ldrb	r1, [r0, #3]
    6e56:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    6e58:	2100      	movs	r1, #0
    6e5a:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
    6e5c:	7d11      	ldrb	r1, [r2, #20]
    6e5e:	3101      	adds	r1, #1
    6e60:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6e62:	0011      	movs	r1, r2
    6e64:	3110      	adds	r1, #16
        bufferPointer++;
    6e66:	1d18      	adds	r0, r3, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6e68:	428b      	cmp	r3, r1
    6e6a:	d004      	beq.n	6e76 <LoRaMacConfirmQueueAdd+0x3a>
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    6e6c:	4b03      	ldr	r3, [pc, #12]	; (6e7c <LoRaMacConfirmQueueAdd+0x40>)
    6e6e:	6098      	str	r0, [r3, #8]

    return true;
    6e70:	2301      	movs	r3, #1
}
    6e72:	0018      	movs	r0, r3
    6e74:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6e76:	0010      	movs	r0, r2
    6e78:	e7f8      	b.n	6e6c <LoRaMacConfirmQueueAdd+0x30>
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	200014c8 	.word	0x200014c8

00006e80 <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    6e80:	4b09      	ldr	r3, [pc, #36]	; (6ea8 <LoRaMacConfirmQueueRemoveLast+0x28>)
    6e82:	691a      	ldr	r2, [r3, #16]
    6e84:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
    6e86:	2000      	movs	r0, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d009      	beq.n	6ea0 <LoRaMacConfirmQueueRemoveLast+0x20>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    6e8c:	3b01      	subs	r3, #1
    6e8e:	7513      	strb	r3, [r2, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferEnd = DecreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    6e90:	4b05      	ldr	r3, [pc, #20]	; (6ea8 <LoRaMacConfirmQueueRemoveLast+0x28>)
    6e92:	689b      	ldr	r3, [r3, #8]
        bufferPointer--;
    6e94:	1f19      	subs	r1, r3, #4
    if( bufferPointer == ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue )
    6e96:	4293      	cmp	r3, r2
    6e98:	d003      	beq.n	6ea2 <LoRaMacConfirmQueueRemoveLast+0x22>
    ConfirmQueueCtx.BufferEnd = DecreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    6e9a:	4b03      	ldr	r3, [pc, #12]	; (6ea8 <LoRaMacConfirmQueueRemoveLast+0x28>)
    6e9c:	6099      	str	r1, [r3, #8]

    return true;
    6e9e:	2001      	movs	r0, #1
}
    6ea0:	4770      	bx	lr
        bufferPointer = &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
    6ea2:	3210      	adds	r2, #16
    6ea4:	0011      	movs	r1, r2
    6ea6:	e7f8      	b.n	6e9a <LoRaMacConfirmQueueRemoveLast+0x1a>
    6ea8:	200014c8 	.word	0x200014c8

00006eac <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    6eac:	4b0a      	ldr	r3, [pc, #40]	; (6ed8 <LoRaMacConfirmQueueRemoveFirst+0x2c>)
    6eae:	691a      	ldr	r2, [r3, #16]
    6eb0:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
    6eb2:	2000      	movs	r0, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d00b      	beq.n	6ed0 <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    6eb8:	3b01      	subs	r3, #1
    6eba:	7513      	strb	r3, [r2, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
    6ebc:	4b06      	ldr	r3, [pc, #24]	; (6ed8 <LoRaMacConfirmQueueRemoveFirst+0x2c>)
    6ebe:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6ec0:	0013      	movs	r3, r2
    6ec2:	3310      	adds	r3, #16
        bufferPointer++;
    6ec4:	1d08      	adds	r0, r1, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6ec6:	4299      	cmp	r1, r3
    6ec8:	d003      	beq.n	6ed2 <LoRaMacConfirmQueueRemoveFirst+0x26>
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
    6eca:	4b03      	ldr	r3, [pc, #12]	; (6ed8 <LoRaMacConfirmQueueRemoveFirst+0x2c>)
    6ecc:	6058      	str	r0, [r3, #4]

    return true;
    6ece:	2001      	movs	r0, #1
}
    6ed0:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6ed2:	0010      	movs	r0, r2
    6ed4:	e7f9      	b.n	6eca <LoRaMacConfirmQueueRemoveFirst+0x1e>
    6ed6:	46c0      	nop			; (mov r8, r8)
    6ed8:	200014c8 	.word	0x200014c8

00006edc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    6edc:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    6ede:	4b10      	ldr	r3, [pc, #64]	; (6f20 <LoRaMacConfirmQueueSetStatus+0x44>)
    6ee0:	691e      	ldr	r6, [r3, #16]
    6ee2:	7d33      	ldrb	r3, [r6, #20]
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d100      	bne.n	6eea <LoRaMacConfirmQueueSetStatus+0xe>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
    6ee8:	bd70      	pop	{r4, r5, r6, pc}
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    6eea:	4a0d      	ldr	r2, [pc, #52]	; (6f20 <LoRaMacConfirmQueueSetStatus+0x44>)
    6eec:	6853      	ldr	r3, [r2, #4]
    6eee:	6894      	ldr	r4, [r2, #8]
    while( element != bufferEnd )
    6ef0:	42a3      	cmp	r3, r4
    6ef2:	d0f9      	beq.n	6ee8 <LoRaMacConfirmQueueSetStatus+0xc>
        if( element->Request == request )
    6ef4:	781a      	ldrb	r2, [r3, #0]
    6ef6:	428a      	cmp	r2, r1
    6ef8:	d00c      	beq.n	6f14 <LoRaMacConfirmQueueSetStatus+0x38>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6efa:	0035      	movs	r5, r6
    6efc:	3510      	adds	r5, #16
    6efe:	e005      	b.n	6f0c <LoRaMacConfirmQueueSetStatus+0x30>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6f00:	0033      	movs	r3, r6
    while( element != bufferEnd )
    6f02:	429c      	cmp	r4, r3
    6f04:	d0f0      	beq.n	6ee8 <LoRaMacConfirmQueueSetStatus+0xc>
        if( element->Request == request )
    6f06:	781a      	ldrb	r2, [r3, #0]
    6f08:	428a      	cmp	r2, r1
    6f0a:	d003      	beq.n	6f14 <LoRaMacConfirmQueueSetStatus+0x38>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6f0c:	42ab      	cmp	r3, r5
    6f0e:	d0f7      	beq.n	6f00 <LoRaMacConfirmQueueSetStatus+0x24>
        bufferPointer++;
    6f10:	3304      	adds	r3, #4
    6f12:	e7f6      	b.n	6f02 <LoRaMacConfirmQueueSetStatus+0x26>
        if( element != NULL )
    6f14:	2b00      	cmp	r3, #0
    6f16:	d0e7      	beq.n	6ee8 <LoRaMacConfirmQueueSetStatus+0xc>
            element->Status = status;
    6f18:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
    6f1a:	2201      	movs	r2, #1
    6f1c:	709a      	strb	r2, [r3, #2]
}
    6f1e:	e7e3      	b.n	6ee8 <LoRaMacConfirmQueueSetStatus+0xc>
    6f20:	200014c8 	.word	0x200014c8

00006f24 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
    6f24:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    6f26:	4b13      	ldr	r3, [pc, #76]	; (6f74 <LoRaMacConfirmQueueGetStatus+0x50>)
    6f28:	691d      	ldr	r5, [r3, #16]
    6f2a:	7d2b      	ldrb	r3, [r5, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
    6f2c:	2201      	movs	r2, #1
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    6f2e:	2b00      	cmp	r3, #0
    6f30:	d101      	bne.n	6f36 <LoRaMacConfirmQueueGetStatus+0x12>
}
    6f32:	0010      	movs	r0, r2
    6f34:	bd30      	pop	{r4, r5, pc}
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    6f36:	4a0f      	ldr	r2, [pc, #60]	; (6f74 <LoRaMacConfirmQueueGetStatus+0x50>)
    6f38:	6853      	ldr	r3, [r2, #4]
    6f3a:	6891      	ldr	r1, [r2, #8]
    while( element != bufferEnd )
    6f3c:	428b      	cmp	r3, r1
    6f3e:	d016      	beq.n	6f6e <LoRaMacConfirmQueueGetStatus+0x4a>
        if( element->Request == request )
    6f40:	781a      	ldrb	r2, [r3, #0]
    6f42:	4282      	cmp	r2, r0
    6f44:	d00e      	beq.n	6f64 <LoRaMacConfirmQueueGetStatus+0x40>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6f46:	002c      	movs	r4, r5
    6f48:	3410      	adds	r4, #16
    6f4a:	e005      	b.n	6f58 <LoRaMacConfirmQueueGetStatus+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6f4c:	002b      	movs	r3, r5
    while( element != bufferEnd )
    6f4e:	4299      	cmp	r1, r3
    6f50:	d006      	beq.n	6f60 <LoRaMacConfirmQueueGetStatus+0x3c>
        if( element->Request == request )
    6f52:	781a      	ldrb	r2, [r3, #0]
    6f54:	4282      	cmp	r2, r0
    6f56:	d005      	beq.n	6f64 <LoRaMacConfirmQueueGetStatus+0x40>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6f58:	42a3      	cmp	r3, r4
    6f5a:	d0f7      	beq.n	6f4c <LoRaMacConfirmQueueGetStatus+0x28>
        bufferPointer++;
    6f5c:	3304      	adds	r3, #4
    6f5e:	e7f6      	b.n	6f4e <LoRaMacConfirmQueueGetStatus+0x2a>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
    6f60:	2201      	movs	r2, #1
    6f62:	e7e6      	b.n	6f32 <LoRaMacConfirmQueueGetStatus+0xe>
    6f64:	2201      	movs	r2, #1
        if( element != NULL )
    6f66:	2b00      	cmp	r3, #0
    6f68:	d0e3      	beq.n	6f32 <LoRaMacConfirmQueueGetStatus+0xe>
            return element->Status;
    6f6a:	785a      	ldrb	r2, [r3, #1]
    6f6c:	e7e1      	b.n	6f32 <LoRaMacConfirmQueueGetStatus+0xe>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
    6f6e:	2201      	movs	r2, #1
    6f70:	e7df      	b.n	6f32 <LoRaMacConfirmQueueGetStatus+0xe>
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	200014c8 	.word	0x200014c8

00006f78 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    6f78:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
    6f7a:	4a0d      	ldr	r2, [pc, #52]	; (6fb0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
    6f7c:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
    6f7e:	6915      	ldr	r5, [r2, #16]
    6f80:	7568      	strb	r0, [r5, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    6f82:	7d2a      	ldrb	r2, [r5, #20]
    6f84:	2a00      	cmp	r2, #0
    6f86:	d012      	beq.n	6fae <LoRaMacConfirmQueueSetStatusCmn+0x36>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    6f88:	4a09      	ldr	r2, [pc, #36]	; (6fb0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
    6f8a:	6894      	ldr	r4, [r2, #8]
                element->ReadyToHandle = true;
    6f8c:	2601      	movs	r6, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6f8e:	0029      	movs	r1, r5
    6f90:	3110      	adds	r1, #16
    6f92:	e004      	b.n	6f9e <LoRaMacConfirmQueueSetStatusCmn+0x26>
    6f94:	428b      	cmp	r3, r1
    6f96:	d008      	beq.n	6faa <LoRaMacConfirmQueueSetStatusCmn+0x32>
        bufferPointer++;
    6f98:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
    6f9a:	429c      	cmp	r4, r3
    6f9c:	d007      	beq.n	6fae <LoRaMacConfirmQueueSetStatusCmn+0x36>
            element->Status = status;
    6f9e:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
    6fa0:	78da      	ldrb	r2, [r3, #3]
    6fa2:	2a00      	cmp	r2, #0
    6fa4:	d1f6      	bne.n	6f94 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
                element->ReadyToHandle = true;
    6fa6:	709e      	strb	r6, [r3, #2]
    6fa8:	e7f4      	b.n	6f94 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6faa:	002b      	movs	r3, r5
    6fac:	e7f5      	b.n	6f9a <LoRaMacConfirmQueueSetStatusCmn+0x22>
    }
}
    6fae:	bd70      	pop	{r4, r5, r6, pc}
    6fb0:	200014c8 	.word	0x200014c8

00006fb4 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
    6fb4:	4b01      	ldr	r3, [pc, #4]	; (6fbc <LoRaMacConfirmQueueGetStatusCmn+0x8>)
    6fb6:	691b      	ldr	r3, [r3, #16]
    6fb8:	7d58      	ldrb	r0, [r3, #21]
}
    6fba:	4770      	bx	lr
    6fbc:	200014c8 	.word	0x200014c8

00006fc0 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    6fc0:	b530      	push	{r4, r5, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
    6fc2:	4a0f      	ldr	r2, [pc, #60]	; (7000 <LoRaMacConfirmQueueIsCmdActive+0x40>)
    6fc4:	6853      	ldr	r3, [r2, #4]
    6fc6:	6891      	ldr	r1, [r2, #8]
    while( element != bufferEnd )
    6fc8:	428b      	cmp	r3, r1
    6fca:	d016      	beq.n	6ffa <LoRaMacConfirmQueueIsCmdActive+0x3a>
        if( element->Request == request )
    6fcc:	781a      	ldrb	r2, [r3, #0]
    6fce:	4282      	cmp	r2, r0
    6fd0:	d00f      	beq.n	6ff2 <LoRaMacConfirmQueueIsCmdActive+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6fd2:	4a0b      	ldr	r2, [pc, #44]	; (7000 <LoRaMacConfirmQueueIsCmdActive+0x40>)
    6fd4:	6915      	ldr	r5, [r2, #16]
    6fd6:	002c      	movs	r4, r5
    6fd8:	3410      	adds	r4, #16
    6fda:	e005      	b.n	6fe8 <LoRaMacConfirmQueueIsCmdActive+0x28>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    6fdc:	002b      	movs	r3, r5
    while( element != bufferEnd )
    6fde:	428b      	cmp	r3, r1
    6fe0:	d006      	beq.n	6ff0 <LoRaMacConfirmQueueIsCmdActive+0x30>
        if( element->Request == request )
    6fe2:	781a      	ldrb	r2, [r3, #0]
    6fe4:	4282      	cmp	r2, r0
    6fe6:	d004      	beq.n	6ff2 <LoRaMacConfirmQueueIsCmdActive+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    6fe8:	429c      	cmp	r4, r3
    6fea:	d0f7      	beq.n	6fdc <LoRaMacConfirmQueueIsCmdActive+0x1c>
        bufferPointer++;
    6fec:	3304      	adds	r3, #4
    6fee:	e7f6      	b.n	6fde <LoRaMacConfirmQueueIsCmdActive+0x1e>
    return NULL;
    6ff0:	2300      	movs	r3, #0
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
    6ff2:	1e58      	subs	r0, r3, #1
    6ff4:	4183      	sbcs	r3, r0
    6ff6:	b2d8      	uxtb	r0, r3
    {
        return true;
    }
    return false;
}
    6ff8:	bd30      	pop	{r4, r5, pc}
    return NULL;
    6ffa:	2300      	movs	r3, #0
    6ffc:	e7f9      	b.n	6ff2 <LoRaMacConfirmQueueIsCmdActive+0x32>
    6ffe:	46c0      	nop			; (mov r8, r8)
    7000:	200014c8 	.word	0x200014c8

00007004 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
    7004:	b5f0      	push	{r4, r5, r6, r7, lr}
    7006:	46d6      	mov	lr, sl
    7008:	464f      	mov	r7, r9
    700a:	4646      	mov	r6, r8
    700c:	b5c0      	push	{r6, r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	0006      	movs	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    7012:	4b19      	ldr	r3, [pc, #100]	; (7078 <LoRaMacConfirmQueueHandleCb+0x74>)
    7014:	691b      	ldr	r3, [r3, #16]
    7016:	7d1f      	ldrb	r7, [r3, #20]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
    7018:	2f00      	cmp	r7, #0
    701a:	d026      	beq.n	706a <LoRaMacConfirmQueueHandleCb+0x66>
    701c:	2400      	movs	r4, #0
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
    701e:	4b16      	ldr	r3, [pc, #88]	; (7078 <LoRaMacConfirmQueueHandleCb+0x74>)
    7020:	4698      	mov	r8, r3
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
    7022:	4b16      	ldr	r3, [pc, #88]	; (707c <LoRaMacConfirmQueueHandleCb+0x78>)
    7024:	469a      	mov	sl, r3

        if( readyToHandle == false )
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
    7026:	4b16      	ldr	r3, [pc, #88]	; (7080 <LoRaMacConfirmQueueHandleCb+0x7c>)
    7028:	4699      	mov	r9, r3
    702a:	e00a      	b.n	7042 <LoRaMacConfirmQueueHandleCb+0x3e>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
    702c:	4b12      	ldr	r3, [pc, #72]	; (7078 <LoRaMacConfirmQueueHandleCb+0x74>)
    702e:	681b      	ldr	r3, [r3, #0]
    7030:	689b      	ldr	r3, [r3, #8]
    7032:	0030      	movs	r0, r6
    7034:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
    7036:	4b11      	ldr	r3, [pc, #68]	; (707c <LoRaMacConfirmQueueHandleCb+0x78>)
    7038:	4798      	blx	r3
    for( uint8_t i = 0; i < nbElements; i++ )
    703a:	3401      	adds	r4, #1
    703c:	b2e4      	uxtb	r4, r4
    703e:	42a7      	cmp	r7, r4
    7040:	d013      	beq.n	706a <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
    7042:	4643      	mov	r3, r8
    7044:	685b      	ldr	r3, [r3, #4]
    7046:	781a      	ldrb	r2, [r3, #0]
    7048:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
    704a:	785a      	ldrb	r2, [r3, #1]
    704c:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
    704e:	789a      	ldrb	r2, [r3, #2]
    7050:	2a00      	cmp	r2, #0
    7052:	d1eb      	bne.n	702c <LoRaMacConfirmQueueHandleCb+0x28>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
    7054:	781a      	ldrb	r2, [r3, #0]
    7056:	ad01      	add	r5, sp, #4
    7058:	702a      	strb	r2, [r5, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
    705a:	785a      	ldrb	r2, [r3, #1]
    705c:	706a      	strb	r2, [r5, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
    705e:	78db      	ldrb	r3, [r3, #3]
    7060:	70eb      	strb	r3, [r5, #3]
        LoRaMacConfirmQueueRemoveFirst( );
    7062:	47d0      	blx	sl
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
    7064:	0028      	movs	r0, r5
    7066:	47c8      	blx	r9
    7068:	e7e7      	b.n	703a <LoRaMacConfirmQueueHandleCb+0x36>
        }
    }
}
    706a:	b002      	add	sp, #8
    706c:	bc1c      	pop	{r2, r3, r4}
    706e:	4690      	mov	r8, r2
    7070:	4699      	mov	r9, r3
    7072:	46a2      	mov	sl, r4
    7074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7076:	46c0      	nop			; (mov r8, r8)
    7078:	200014c8 	.word	0x200014c8
    707c:	00006ead 	.word	0x00006ead
    7080:	00006e3d 	.word	0x00006e3d

00007084 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    7084:	4b01      	ldr	r3, [pc, #4]	; (708c <LoRaMacConfirmQueueGetCnt+0x8>)
    7086:	691b      	ldr	r3, [r3, #16]
    7088:	7d18      	ldrb	r0, [r3, #20]
}
    708a:	4770      	bx	lr
    708c:	200014c8 	.word	0x200014c8

00007090 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    7090:	4b03      	ldr	r3, [pc, #12]	; (70a0 <LoRaMacConfirmQueueIsFull+0x10>)
    7092:	691b      	ldr	r3, [r3, #16]
    7094:	7d1b      	ldrb	r3, [r3, #20]
    7096:	2004      	movs	r0, #4
    7098:	4298      	cmp	r0, r3
    709a:	4180      	sbcs	r0, r0
    709c:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
    709e:	4770      	bx	lr
    70a0:	200014c8 	.word	0x200014c8

000070a4 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
    70a4:	4770      	bx	lr
	...

000070a8 <DeriveLifeTimeSessionKey>:
{
    70a8:	b530      	push	{r4, r5, lr}
    70aa:	b085      	sub	sp, #20
    70ac:	0004      	movs	r4, r0
    70ae:	1e0d      	subs	r5, r1, #0
    if( devEUI == 0 )
    70b0:	d026      	beq.n	7100 <DeriveLifeTimeSessionKey+0x58>
    uint8_t compBase[16] = { 0 };
    70b2:	2210      	movs	r2, #16
    70b4:	2100      	movs	r1, #0
    70b6:	4668      	mov	r0, sp
    70b8:	4b12      	ldr	r3, [pc, #72]	; (7104 <DeriveLifeTimeSessionKey+0x5c>)
    70ba:	4798      	blx	r3
    switch( keyID )
    70bc:	2c02      	cmp	r4, #2
    70be:	d003      	beq.n	70c8 <DeriveLifeTimeSessionKey+0x20>
    70c0:	2c03      	cmp	r4, #3
    70c2:	d019      	beq.n	70f8 <DeriveLifeTimeSessionKey+0x50>
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    70c4:	2008      	movs	r0, #8
    70c6:	e015      	b.n	70f4 <DeriveLifeTimeSessionKey+0x4c>
            compBase[0] = 0x06;
    70c8:	2306      	movs	r3, #6
    70ca:	466a      	mov	r2, sp
    70cc:	7013      	strb	r3, [r2, #0]
    memcpyr( compBase + 1, devEUI, 8 );
    70ce:	2208      	movs	r2, #8
    70d0:	0029      	movs	r1, r5
    70d2:	466b      	mov	r3, sp
    70d4:	1c58      	adds	r0, r3, #1
    70d6:	4b0c      	ldr	r3, [pc, #48]	; (7108 <DeriveLifeTimeSessionKey+0x60>)
    70d8:	4798      	blx	r3
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    70da:	4b0c      	ldr	r3, [pc, #48]	; (710c <DeriveLifeTimeSessionKey+0x64>)
    70dc:	6818      	ldr	r0, [r3, #0]
    70de:	0023      	movs	r3, r4
    70e0:	2201      	movs	r2, #1
    70e2:	4669      	mov	r1, sp
    70e4:	4c0a      	ldr	r4, [pc, #40]	; (7110 <DeriveLifeTimeSessionKey+0x68>)
    70e6:	47a0      	blx	r4
    70e8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    70ea:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
    70ec:	1e5a      	subs	r2, r3, #1
    70ee:	4193      	sbcs	r3, r2
    70f0:	425b      	negs	r3, r3
    70f2:	4018      	ands	r0, r3
}
    70f4:	b005      	add	sp, #20
    70f6:	bd30      	pop	{r4, r5, pc}
            compBase[0] = 0x05;
    70f8:	2305      	movs	r3, #5
    70fa:	466a      	mov	r2, sp
    70fc:	7013      	strb	r3, [r2, #0]
            break;
    70fe:	e7e6      	b.n	70ce <DeriveLifeTimeSessionKey+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
    7100:	2007      	movs	r0, #7
    7102:	e7f7      	b.n	70f4 <DeriveLifeTimeSessionKey+0x4c>
    7104:	0000ebd9 	.word	0x0000ebd9
    7108:	00001eab 	.word	0x00001eab
    710c:	200014f4 	.word	0x200014f4
    7110:	0000bdf1 	.word	0x0000bdf1

00007114 <DeriveSessionKey11x>:
{
    7114:	b5f0      	push	{r4, r5, r6, r7, lr}
    7116:	b087      	sub	sp, #28
    7118:	0004      	movs	r4, r0
    711a:	000f      	movs	r7, r1
    711c:	0015      	movs	r5, r2
    711e:	001e      	movs	r6, r3
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
    7120:	2900      	cmp	r1, #0
    7122:	d045      	beq.n	71b0 <DeriveSessionKey11x+0x9c>
    7124:	2a00      	cmp	r2, #0
    7126:	d045      	beq.n	71b4 <DeriveSessionKey11x+0xa0>
    7128:	2b00      	cmp	r3, #0
    712a:	d045      	beq.n	71b8 <DeriveSessionKey11x+0xa4>
    uint8_t compBase[16] = { 0 };
    712c:	2210      	movs	r2, #16
    712e:	2100      	movs	r1, #0
    7130:	a802      	add	r0, sp, #8
    7132:	4b23      	ldr	r3, [pc, #140]	; (71c0 <DeriveSessionKey11x+0xac>)
    7134:	4798      	blx	r3
    switch( keyID )
    7136:	2c05      	cmp	r4, #5
    7138:	d02e      	beq.n	7198 <DeriveSessionKey11x+0x84>
    713a:	d909      	bls.n	7150 <DeriveSessionKey11x+0x3c>
    713c:	2c06      	cmp	r4, #6
    713e:	d031      	beq.n	71a4 <DeriveSessionKey11x+0x90>
    7140:	2c07      	cmp	r4, #7
    7142:	d13b      	bne.n	71bc <DeriveSessionKey11x+0xa8>
            compBase[0] = 0x02;
    7144:	2302      	movs	r3, #2
    7146:	aa02      	add	r2, sp, #8
    7148:	7013      	strb	r3, [r2, #0]
            rootKeyId = APP_KEY;
    714a:	2300      	movs	r3, #0
    714c:	9301      	str	r3, [sp, #4]
            break;
    714e:	e005      	b.n	715c <DeriveSessionKey11x+0x48>
    switch( keyID )
    7150:	2c04      	cmp	r4, #4
    7152:	d133      	bne.n	71bc <DeriveSessionKey11x+0xa8>
            compBase[0] = 0x01;
    7154:	2301      	movs	r3, #1
    7156:	aa02      	add	r2, sp, #8
    7158:	7013      	strb	r3, [r2, #0]
    KeyIdentifier_t rootKeyId = NWK_KEY;
    715a:	9301      	str	r3, [sp, #4]
    memcpy1( compBase + 1, joinNonce, 3 );
    715c:	2203      	movs	r2, #3
    715e:	0039      	movs	r1, r7
    7160:	ab02      	add	r3, sp, #8
    7162:	1c58      	adds	r0, r3, #1
    7164:	4f17      	ldr	r7, [pc, #92]	; (71c4 <DeriveSessionKey11x+0xb0>)
    7166:	47b8      	blx	r7
    memcpyr( compBase + 4, joinEUI, 8 );
    7168:	2208      	movs	r2, #8
    716a:	0029      	movs	r1, r5
    716c:	a803      	add	r0, sp, #12
    716e:	4b16      	ldr	r3, [pc, #88]	; (71c8 <DeriveSessionKey11x+0xb4>)
    7170:	4798      	blx	r3
    memcpy1( compBase + 12, devNonce, 2 );
    7172:	2202      	movs	r2, #2
    7174:	0031      	movs	r1, r6
    7176:	a805      	add	r0, sp, #20
    7178:	47b8      	blx	r7
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
    717a:	4b14      	ldr	r3, [pc, #80]	; (71cc <DeriveSessionKey11x+0xb8>)
    717c:	6818      	ldr	r0, [r3, #0]
    717e:	0023      	movs	r3, r4
    7180:	9a01      	ldr	r2, [sp, #4]
    7182:	a902      	add	r1, sp, #8
    7184:	4c12      	ldr	r4, [pc, #72]	; (71d0 <DeriveSessionKey11x+0xbc>)
    7186:	47a0      	blx	r4
    7188:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    718a:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
    718c:	1e5a      	subs	r2, r3, #1
    718e:	4193      	sbcs	r3, r2
    7190:	425b      	negs	r3, r3
    7192:	4018      	ands	r0, r3
}
    7194:	b007      	add	sp, #28
    7196:	bdf0      	pop	{r4, r5, r6, r7, pc}
            compBase[0] = 0x03;
    7198:	2303      	movs	r3, #3
    719a:	aa02      	add	r2, sp, #8
    719c:	7013      	strb	r3, [r2, #0]
    KeyIdentifier_t rootKeyId = NWK_KEY;
    719e:	3b02      	subs	r3, #2
    71a0:	9301      	str	r3, [sp, #4]
            break;
    71a2:	e7db      	b.n	715c <DeriveSessionKey11x+0x48>
            compBase[0] = 0x04;
    71a4:	2304      	movs	r3, #4
    71a6:	aa02      	add	r2, sp, #8
    71a8:	7013      	strb	r3, [r2, #0]
    KeyIdentifier_t rootKeyId = NWK_KEY;
    71aa:	3b03      	subs	r3, #3
    71ac:	9301      	str	r3, [sp, #4]
            break;
    71ae:	e7d5      	b.n	715c <DeriveSessionKey11x+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
    71b0:	2007      	movs	r0, #7
    71b2:	e7ef      	b.n	7194 <DeriveSessionKey11x+0x80>
    71b4:	2007      	movs	r0, #7
    71b6:	e7ed      	b.n	7194 <DeriveSessionKey11x+0x80>
    71b8:	2007      	movs	r0, #7
    71ba:	e7eb      	b.n	7194 <DeriveSessionKey11x+0x80>
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    71bc:	2008      	movs	r0, #8
    71be:	e7e9      	b.n	7194 <DeriveSessionKey11x+0x80>
    71c0:	0000ebd9 	.word	0x0000ebd9
    71c4:	00001e91 	.word	0x00001e91
    71c8:	00001eab 	.word	0x00001eab
    71cc:	200014f4 	.word	0x200014f4
    71d0:	0000bdf1 	.word	0x0000bdf1

000071d4 <DeriveSessionKey10x>:
{
    71d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    71d6:	b085      	sub	sp, #20
    71d8:	0005      	movs	r5, r0
    71da:	000c      	movs	r4, r1
    71dc:	0016      	movs	r6, r2
    71de:	001f      	movs	r7, r3
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
    71e0:	2900      	cmp	r1, #0
    71e2:	d033      	beq.n	724c <DeriveSessionKey10x+0x78>
    71e4:	2a00      	cmp	r2, #0
    71e6:	d033      	beq.n	7250 <DeriveSessionKey10x+0x7c>
    71e8:	2b00      	cmp	r3, #0
    71ea:	d033      	beq.n	7254 <DeriveSessionKey10x+0x80>
    uint8_t compBase[16] = { 0 };
    71ec:	2210      	movs	r2, #16
    71ee:	2100      	movs	r1, #0
    71f0:	4668      	mov	r0, sp
    71f2:	4b1a      	ldr	r3, [pc, #104]	; (725c <DeriveSessionKey10x+0x88>)
    71f4:	4798      	blx	r3
    switch( keyID )
    71f6:	2d04      	cmp	r5, #4
    71f8:	d32e      	bcc.n	7258 <DeriveSessionKey10x+0x84>
    71fa:	2d06      	cmp	r5, #6
    71fc:	d905      	bls.n	720a <DeriveSessionKey10x+0x36>
    71fe:	2d07      	cmp	r5, #7
    7200:	d12a      	bne.n	7258 <DeriveSessionKey10x+0x84>
            compBase[0] = 0x02;
    7202:	2302      	movs	r3, #2
    7204:	466a      	mov	r2, sp
    7206:	7013      	strb	r3, [r2, #0]
            break;
    7208:	e002      	b.n	7210 <DeriveSessionKey10x+0x3c>
            compBase[0] = 0x01;
    720a:	2301      	movs	r3, #1
    720c:	466a      	mov	r2, sp
    720e:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
    7210:	2203      	movs	r2, #3
    7212:	0021      	movs	r1, r4
    7214:	466b      	mov	r3, sp
    7216:	1c58      	adds	r0, r3, #1
    7218:	4c11      	ldr	r4, [pc, #68]	; (7260 <DeriveSessionKey10x+0x8c>)
    721a:	47a0      	blx	r4
    memcpy1( compBase + 4, netID, 3 );
    721c:	2203      	movs	r2, #3
    721e:	0031      	movs	r1, r6
    7220:	a801      	add	r0, sp, #4
    7222:	47a0      	blx	r4
    memcpy1( compBase + 7, devNonce, 2 );
    7224:	2202      	movs	r2, #2
    7226:	0039      	movs	r1, r7
    7228:	466b      	mov	r3, sp
    722a:	1dd8      	adds	r0, r3, #7
    722c:	47a0      	blx	r4
    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    722e:	4b0d      	ldr	r3, [pc, #52]	; (7264 <DeriveSessionKey10x+0x90>)
    7230:	6818      	ldr	r0, [r3, #0]
    7232:	002b      	movs	r3, r5
    7234:	2201      	movs	r2, #1
    7236:	4669      	mov	r1, sp
    7238:	4c0b      	ldr	r4, [pc, #44]	; (7268 <DeriveSessionKey10x+0x94>)
    723a:	47a0      	blx	r4
    723c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    723e:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
    7240:	1e5a      	subs	r2, r3, #1
    7242:	4193      	sbcs	r3, r2
    7244:	425b      	negs	r3, r3
    7246:	4018      	ands	r0, r3
}
    7248:	b005      	add	sp, #20
    724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
    724c:	2007      	movs	r0, #7
    724e:	e7fb      	b.n	7248 <DeriveSessionKey10x+0x74>
    7250:	2007      	movs	r0, #7
    7252:	e7f9      	b.n	7248 <DeriveSessionKey10x+0x74>
    7254:	2007      	movs	r0, #7
    7256:	e7f7      	b.n	7248 <DeriveSessionKey10x+0x74>
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    7258:	2008      	movs	r0, #8
    725a:	e7f5      	b.n	7248 <DeriveSessionKey10x+0x74>
    725c:	0000ebd9 	.word	0x0000ebd9
    7260:	00001e91 	.word	0x00001e91
    7264:	200014f4 	.word	0x200014f4
    7268:	0000bdf1 	.word	0x0000bdf1

0000726c <ComputeCmacB1>:
{
    726c:	b5f0      	push	{r4, r5, r6, r7, lr}
    726e:	b0c7      	sub	sp, #284	; 0x11c
    7270:	0007      	movs	r7, r0
    7272:	000c      	movs	r4, r1
    7274:	9200      	str	r2, [sp, #0]
    7276:	9301      	str	r3, [sp, #4]
    7278:	ab4c      	add	r3, sp, #304	; 0x130
    727a:	781e      	ldrb	r6, [r3, #0]
    727c:	ab4d      	add	r3, sp, #308	; 0x134
    727e:	781d      	ldrb	r5, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    7280:	2800      	cmp	r0, #0
    7282:	d05a      	beq.n	733a <ComputeCmacB1+0xce>
    7284:	9b50      	ldr	r3, [sp, #320]	; 0x140
    7286:	2b00      	cmp	r3, #0
    7288:	d059      	beq.n	733e <ComputeCmacB1+0xd2>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    728a:	2380      	movs	r3, #128	; 0x80
    728c:	005b      	lsls	r3, r3, #1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    728e:	200b      	movs	r0, #11
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    7290:	4299      	cmp	r1, r3
    7292:	d901      	bls.n	7298 <ComputeCmacB1+0x2c>
}
    7294:	b047      	add	sp, #284	; 0x11c
    7296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    7298:	2288      	movs	r2, #136	; 0x88
    729a:	0052      	lsls	r2, r2, #1
    729c:	2100      	movs	r1, #0
    729e:	a802      	add	r0, sp, #8
    72a0:	4b28      	ldr	r3, [pc, #160]	; (7344 <ComputeCmacB1+0xd8>)
    72a2:	4798      	blx	r3
    b1[0] = 0x49;
    72a4:	2349      	movs	r3, #73	; 0x49
    72a6:	aa02      	add	r2, sp, #8
    72a8:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d03f      	beq.n	7330 <ComputeCmacB1+0xc4>
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
    72b0:	4b25      	ldr	r3, [pc, #148]	; (7348 <ComputeCmacB1+0xdc>)
    72b2:	689b      	ldr	r3, [r3, #8]
    72b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    72b6:	681b      	ldr	r3, [r3, #0]
        b1[1] = confFCnt & 0xFF;
    72b8:	7053      	strb	r3, [r2, #1]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
    72ba:	0a1b      	lsrs	r3, r3, #8
    72bc:	7093      	strb	r3, [r2, #2]
    b1[3] = txDr;
    72be:	ab02      	add	r3, sp, #8
    72c0:	70de      	strb	r6, [r3, #3]
    b1[4] = txCh;
    72c2:	711d      	strb	r5, [r3, #4]
    b1[5] = UPLINK;  // dir = Uplink
    72c4:	2200      	movs	r2, #0
    72c6:	715a      	strb	r2, [r3, #5]
    b1[6] = devAddr & 0xFF;
    72c8:	2098      	movs	r0, #152	; 0x98
    72ca:	0040      	lsls	r0, r0, #1
    72cc:	1819      	adds	r1, r3, r0
    72ce:	7809      	ldrb	r1, [r1, #0]
    72d0:	7199      	strb	r1, [r3, #6]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
    72d2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    72d4:	0a1b      	lsrs	r3, r3, #8
    72d6:	a902      	add	r1, sp, #8
    72d8:	71cb      	strb	r3, [r1, #7]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
    72da:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    72dc:	0c1b      	lsrs	r3, r3, #16
    72de:	720b      	strb	r3, [r1, #8]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
    72e0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    72e2:	0e1b      	lsrs	r3, r3, #24
    72e4:	724b      	strb	r3, [r1, #9]
    b1[10] = fCntUp & 0xFF;
    72e6:	000b      	movs	r3, r1
    72e8:	3004      	adds	r0, #4
    72ea:	1809      	adds	r1, r1, r0
    72ec:	7809      	ldrb	r1, [r1, #0]
    72ee:	7299      	strb	r1, [r3, #10]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
    72f0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    72f2:	0a1b      	lsrs	r3, r3, #8
    72f4:	a902      	add	r1, sp, #8
    72f6:	72cb      	strb	r3, [r1, #11]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
    72f8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    72fa:	0c1b      	lsrs	r3, r3, #16
    72fc:	730b      	strb	r3, [r1, #12]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
    72fe:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    7300:	0e1b      	lsrs	r3, r3, #24
    7302:	734b      	strb	r3, [r1, #13]
    b1[14] = 0x00;
    7304:	738a      	strb	r2, [r1, #14]
    b1[15] = msgLen & 0xFF;
    7306:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    7308:	0022      	movs	r2, r4
    730a:	0039      	movs	r1, r7
    730c:	a806      	add	r0, sp, #24
    730e:	4b0f      	ldr	r3, [pc, #60]	; (734c <ComputeCmacB1+0xe0>)
    7310:	4798      	blx	r3
    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    7312:	0021      	movs	r1, r4
    7314:	3110      	adds	r1, #16
    7316:	b289      	uxth	r1, r1
    7318:	9b50      	ldr	r3, [sp, #320]	; 0x140
    731a:	9a00      	ldr	r2, [sp, #0]
    731c:	a802      	add	r0, sp, #8
    731e:	4c0c      	ldr	r4, [pc, #48]	; (7350 <ComputeCmacB1+0xe4>)
    7320:	47a0      	blx	r4
    7322:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7324:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
    7326:	1e5a      	subs	r2, r3, #1
    7328:	4193      	sbcs	r3, r2
    732a:	425b      	negs	r3, r3
    732c:	4018      	ands	r0, r3
    732e:	e7b1      	b.n	7294 <ComputeCmacB1+0x28>
        b1[1] = 0x00;
    7330:	2300      	movs	r3, #0
    7332:	aa02      	add	r2, sp, #8
    7334:	7053      	strb	r3, [r2, #1]
        b1[2] = 0x00;
    7336:	7093      	strb	r3, [r2, #2]
    7338:	e7c1      	b.n	72be <ComputeCmacB1+0x52>
        return LORAMAC_CRYPTO_ERROR_NPE;
    733a:	2007      	movs	r0, #7
    733c:	e7aa      	b.n	7294 <ComputeCmacB1+0x28>
    733e:	2007      	movs	r0, #7
    7340:	e7a8      	b.n	7294 <ComputeCmacB1+0x28>
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	00001ec7 	.word	0x00001ec7
    7348:	200014f4 	.word	0x200014f4
    734c:	00001e91 	.word	0x00001e91
    7350:	0000bc8d 	.word	0x0000bc8d

00007354 <ComputeCmacB0>:
{
    7354:	b5f0      	push	{r4, r5, r6, r7, lr}
    7356:	b0c7      	sub	sp, #284	; 0x11c
    7358:	0007      	movs	r7, r0
    735a:	000c      	movs	r4, r1
    735c:	9201      	str	r2, [sp, #4]
    735e:	001e      	movs	r6, r3
    7360:	ab4c      	add	r3, sp, #304	; 0x130
    7362:	781d      	ldrb	r5, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    7364:	2800      	cmp	r0, #0
    7366:	d05f      	beq.n	7428 <ComputeCmacB0+0xd4>
    7368:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    736a:	2b00      	cmp	r3, #0
    736c:	d05e      	beq.n	742c <ComputeCmacB0+0xd8>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    736e:	2380      	movs	r3, #128	; 0x80
    7370:	005b      	lsls	r3, r3, #1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    7372:	200b      	movs	r0, #11
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    7374:	4299      	cmp	r1, r3
    7376:	d901      	bls.n	737c <ComputeCmacB0+0x28>
}
    7378:	b047      	add	sp, #284	; 0x11c
    737a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    737c:	2288      	movs	r2, #136	; 0x88
    737e:	0052      	lsls	r2, r2, #1
    7380:	2100      	movs	r1, #0
    7382:	a802      	add	r0, sp, #8
    7384:	4b2a      	ldr	r3, [pc, #168]	; (7430 <ComputeCmacB0+0xdc>)
    7386:	4798      	blx	r3
    b0[0] = 0x49;
    7388:	2349      	movs	r3, #73	; 0x49
    738a:	aa02      	add	r2, sp, #8
    738c:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
    738e:	2e00      	cmp	r6, #0
    7390:	d045      	beq.n	741e <ComputeCmacB0+0xca>
        if( dir == UPLINK )
    7392:	2d00      	cmp	r5, #0
    7394:	d13f      	bne.n	7416 <ComputeCmacB0+0xc2>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
    7396:	4b27      	ldr	r3, [pc, #156]	; (7434 <ComputeCmacB0+0xe0>)
    7398:	689b      	ldr	r3, [r3, #8]
    739a:	8a9b      	ldrh	r3, [r3, #20]
        b0[1] = confFCnt & 0xFF;
    739c:	aa02      	add	r2, sp, #8
    739e:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    73a0:	0a1b      	lsrs	r3, r3, #8
    73a2:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
    73a4:	2200      	movs	r2, #0
    73a6:	ab02      	add	r3, sp, #8
    73a8:	70da      	strb	r2, [r3, #3]
    b0[4] = 0x00;
    73aa:	711a      	strb	r2, [r3, #4]
    b0[5] = dir;
    73ac:	715d      	strb	r5, [r3, #5]
    b0[6] = devAddr & 0xFF;
    73ae:	2096      	movs	r0, #150	; 0x96
    73b0:	0040      	lsls	r0, r0, #1
    73b2:	1819      	adds	r1, r3, r0
    73b4:	7809      	ldrb	r1, [r1, #0]
    73b6:	7199      	strb	r1, [r3, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
    73b8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    73ba:	0a1b      	lsrs	r3, r3, #8
    73bc:	a902      	add	r1, sp, #8
    73be:	71cb      	strb	r3, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
    73c0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    73c2:	0c1b      	lsrs	r3, r3, #16
    73c4:	720b      	strb	r3, [r1, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
    73c6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    73c8:	0e1b      	lsrs	r3, r3, #24
    73ca:	724b      	strb	r3, [r1, #9]
    b0[10] = fCnt & 0xFF;
    73cc:	000b      	movs	r3, r1
    73ce:	3004      	adds	r0, #4
    73d0:	1809      	adds	r1, r1, r0
    73d2:	7809      	ldrb	r1, [r1, #0]
    73d4:	7299      	strb	r1, [r3, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
    73d6:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    73d8:	0a1b      	lsrs	r3, r3, #8
    73da:	a902      	add	r1, sp, #8
    73dc:	72cb      	strb	r3, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
    73de:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    73e0:	0c1b      	lsrs	r3, r3, #16
    73e2:	730b      	strb	r3, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
    73e4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    73e6:	0e1b      	lsrs	r3, r3, #24
    73e8:	734b      	strb	r3, [r1, #13]
    b0[14] = 0x00;
    73ea:	738a      	strb	r2, [r1, #14]
    b0[15] = msgLen & 0xFF;
    73ec:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    73ee:	0022      	movs	r2, r4
    73f0:	0039      	movs	r1, r7
    73f2:	a806      	add	r0, sp, #24
    73f4:	4b10      	ldr	r3, [pc, #64]	; (7438 <ComputeCmacB0+0xe4>)
    73f6:	4798      	blx	r3
    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    73f8:	0021      	movs	r1, r4
    73fa:	3110      	adds	r1, #16
    73fc:	b289      	uxth	r1, r1
    73fe:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    7400:	9a01      	ldr	r2, [sp, #4]
    7402:	a802      	add	r0, sp, #8
    7404:	4c0d      	ldr	r4, [pc, #52]	; (743c <ComputeCmacB0+0xe8>)
    7406:	47a0      	blx	r4
    7408:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    740a:	200c      	movs	r0, #12
    return LORAMAC_CRYPTO_SUCCESS;
    740c:	1e5a      	subs	r2, r3, #1
    740e:	4193      	sbcs	r3, r2
    7410:	425b      	negs	r3, r3
    7412:	4018      	ands	r0, r3
    7414:	e7b0      	b.n	7378 <ComputeCmacB0+0x24>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
    7416:	4b07      	ldr	r3, [pc, #28]	; (7434 <ComputeCmacB0+0xe0>)
    7418:	689b      	ldr	r3, [r3, #8]
    741a:	891b      	ldrh	r3, [r3, #8]
    741c:	e7be      	b.n	739c <ComputeCmacB0+0x48>
        b0[1] = 0x00;
    741e:	2300      	movs	r3, #0
    7420:	aa02      	add	r2, sp, #8
    7422:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
    7424:	7093      	strb	r3, [r2, #2]
    7426:	e7bd      	b.n	73a4 <ComputeCmacB0+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
    7428:	2007      	movs	r0, #7
    742a:	e7a5      	b.n	7378 <ComputeCmacB0+0x24>
    742c:	2007      	movs	r0, #7
    742e:	e7a3      	b.n	7378 <ComputeCmacB0+0x24>
    7430:	00001ec7 	.word	0x00001ec7
    7434:	200014f4 	.word	0x200014f4
    7438:	00001e91 	.word	0x00001e91
    743c:	0000bc8d 	.word	0x0000bc8d

00007440 <PayloadEncrypt>:
{
    7440:	b5f0      	push	{r4, r5, r6, r7, lr}
    7442:	46d6      	mov	lr, sl
    7444:	464f      	mov	r7, r9
    7446:	b580      	push	{r7, lr}
    7448:	b08b      	sub	sp, #44	; 0x2c
    744a:	4681      	mov	r9, r0
    744c:	000f      	movs	r7, r1
    744e:	9201      	str	r2, [sp, #4]
    7450:	001d      	movs	r5, r3
    7452:	ab12      	add	r3, sp, #72	; 0x48
    7454:	781e      	ldrb	r6, [r3, #0]
    if( buffer == 0 )
    7456:	2800      	cmp	r0, #0
    7458:	d065      	beq.n	7526 <PayloadEncrypt+0xe6>
    uint8_t sBlock[16] = { 0 };
    745a:	2210      	movs	r2, #16
    745c:	2100      	movs	r1, #0
    745e:	a806      	add	r0, sp, #24
    7460:	4c35      	ldr	r4, [pc, #212]	; (7538 <PayloadEncrypt+0xf8>)
    7462:	47a0      	blx	r4
    uint8_t aBlock[16] = { 0 };
    7464:	2210      	movs	r2, #16
    7466:	2100      	movs	r1, #0
    7468:	a802      	add	r0, sp, #8
    746a:	47a0      	blx	r4
    aBlock[0] = 0x01;
    746c:	2301      	movs	r3, #1
    746e:	aa02      	add	r2, sp, #8
    7470:	7013      	strb	r3, [r2, #0]
    aBlock[5] = dir;
    7472:	7156      	strb	r6, [r2, #5]
    aBlock[6] = address & 0xFF;
    7474:	7195      	strb	r5, [r2, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    7476:	0a2b      	lsrs	r3, r5, #8
    7478:	71d3      	strb	r3, [r2, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    747a:	0c2b      	lsrs	r3, r5, #16
    747c:	7213      	strb	r3, [r2, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    747e:	0e2d      	lsrs	r5, r5, #24
    7480:	0013      	movs	r3, r2
    7482:	7255      	strb	r5, [r2, #9]
    aBlock[10] = frameCounter & 0xFF;
    7484:	2144      	movs	r1, #68	; 0x44
    7486:	1852      	adds	r2, r2, r1
    7488:	7812      	ldrb	r2, [r2, #0]
    748a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    748c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    748e:	0a1b      	lsrs	r3, r3, #8
    7490:	aa02      	add	r2, sp, #8
    7492:	72d3      	strb	r3, [r2, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    7494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7496:	0c1b      	lsrs	r3, r3, #16
    7498:	7313      	strb	r3, [r2, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    749a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    749c:	0e1c      	lsrs	r4, r3, #24
    749e:	7354      	strb	r4, [r2, #13]
    while( size >= 16 )
    74a0:	2f0f      	cmp	r7, #15
    74a2:	d921      	bls.n	74e8 <PayloadEncrypt+0xa8>
    74a4:	2501      	movs	r5, #1
    74a6:	2600      	movs	r6, #0
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    74a8:	ac06      	add	r4, sp, #24
    74aa:	4b24      	ldr	r3, [pc, #144]	; (753c <PayloadEncrypt+0xfc>)
    74ac:	469a      	mov	sl, r3
    74ae:	e005      	b.n	74bc <PayloadEncrypt+0x7c>
        size -= 16;
    74b0:	3f10      	subs	r7, #16
    74b2:	b2bf      	uxth	r7, r7
        bufferIndex += 16;
    74b4:	3610      	adds	r6, #16
    74b6:	b2f6      	uxtb	r6, r6
    while( size >= 16 )
    74b8:	2f0f      	cmp	r7, #15
    74ba:	d917      	bls.n	74ec <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
    74bc:	ab02      	add	r3, sp, #8
    74be:	73dd      	strb	r5, [r3, #15]
        ctr++;
    74c0:	3501      	adds	r5, #1
    74c2:	b2ad      	uxth	r5, r5
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    74c4:	0023      	movs	r3, r4
    74c6:	9a01      	ldr	r2, [sp, #4]
    74c8:	2110      	movs	r1, #16
    74ca:	a802      	add	r0, sp, #8
    74cc:	47d0      	blx	sl
    74ce:	2800      	cmp	r0, #0
    74d0:	d12b      	bne.n	752a <PayloadEncrypt+0xea>
    74d2:	2300      	movs	r3, #0
    74d4:	464a      	mov	r2, r9
    74d6:	1991      	adds	r1, r2, r6
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    74d8:	5cca      	ldrb	r2, [r1, r3]
    74da:	5d18      	ldrb	r0, [r3, r4]
    74dc:	4042      	eors	r2, r0
    74de:	54ca      	strb	r2, [r1, r3]
    74e0:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < 16; i++ )
    74e2:	2b10      	cmp	r3, #16
    74e4:	d1f8      	bne.n	74d8 <PayloadEncrypt+0x98>
    74e6:	e7e3      	b.n	74b0 <PayloadEncrypt+0x70>
    uint16_t ctr = 1;
    74e8:	2501      	movs	r5, #1
    uint8_t bufferIndex = 0;
    74ea:	2600      	movs	r6, #0
    return LORAMAC_CRYPTO_SUCCESS;
    74ec:	2000      	movs	r0, #0
    if( size > 0 )
    74ee:	2f00      	cmp	r7, #0
    74f0:	d01c      	beq.n	752c <PayloadEncrypt+0xec>
        aBlock[15] = ctr & 0xFF;
    74f2:	ab02      	add	r3, sp, #8
    74f4:	73dd      	strb	r5, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    74f6:	ab06      	add	r3, sp, #24
    74f8:	9a01      	ldr	r2, [sp, #4]
    74fa:	2110      	movs	r1, #16
    74fc:	a802      	add	r0, sp, #8
    74fe:	4c0f      	ldr	r4, [pc, #60]	; (753c <PayloadEncrypt+0xfc>)
    7500:	47a0      	blx	r4
    7502:	0003      	movs	r3, r0
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7504:	200c      	movs	r0, #12
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    7506:	2b00      	cmp	r3, #0
    7508:	d110      	bne.n	752c <PayloadEncrypt+0xec>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    750a:	a906      	add	r1, sp, #24
    750c:	18f2      	adds	r2, r6, r3
    750e:	444a      	add	r2, r9
    7510:	7810      	ldrb	r0, [r2, #0]
    7512:	5ccc      	ldrb	r4, [r1, r3]
    7514:	4060      	eors	r0, r4
    7516:	7010      	strb	r0, [r2, #0]
        for( uint8_t i = 0; i < size; i++ )
    7518:	3301      	adds	r3, #1
    751a:	b2db      	uxtb	r3, r3
    751c:	b29a      	uxth	r2, r3
    751e:	42ba      	cmp	r2, r7
    7520:	d3f4      	bcc.n	750c <PayloadEncrypt+0xcc>
    return LORAMAC_CRYPTO_SUCCESS;
    7522:	2000      	movs	r0, #0
    7524:	e002      	b.n	752c <PayloadEncrypt+0xec>
        return LORAMAC_CRYPTO_ERROR_NPE;
    7526:	2007      	movs	r0, #7
    7528:	e000      	b.n	752c <PayloadEncrypt+0xec>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    752a:	200c      	movs	r0, #12
}
    752c:	b00b      	add	sp, #44	; 0x2c
    752e:	bc0c      	pop	{r2, r3}
    7530:	4691      	mov	r9, r2
    7532:	469a      	mov	sl, r3
    7534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7536:	46c0      	nop			; (mov r8, r8)
    7538:	0000ebd9 	.word	0x0000ebd9
    753c:	0000bcd5 	.word	0x0000bcd5

00007540 <FOptsEncrypt>:
{
    7540:	b5f0      	push	{r4, r5, r6, r7, lr}
    7542:	b08b      	sub	sp, #44	; 0x2c
    7544:	0006      	movs	r6, r0
    7546:	000d      	movs	r5, r1
    7548:	9201      	str	r2, [sp, #4]
    754a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if( buffer == 0 )
    754c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    754e:	2b00      	cmp	r3, #0
    7550:	d039      	beq.n	75c6 <FOptsEncrypt+0x86>
    uint8_t sBlock[16] = { 0 };
    7552:	2210      	movs	r2, #16
    7554:	2100      	movs	r1, #0
    7556:	a806      	add	r0, sp, #24
    7558:	4f1c      	ldr	r7, [pc, #112]	; (75cc <FOptsEncrypt+0x8c>)
    755a:	47b8      	blx	r7
    uint8_t aBlock[16] = { 0 };
    755c:	2210      	movs	r2, #16
    755e:	2100      	movs	r1, #0
    7560:	a802      	add	r0, sp, #8
    7562:	47b8      	blx	r7
    aBlock[0] = 0x01;
    7564:	2301      	movs	r3, #1
    7566:	a902      	add	r1, sp, #8
    7568:	700b      	strb	r3, [r1, #0]
    aBlock[5] = dir;
    756a:	466a      	mov	r2, sp
    756c:	7912      	ldrb	r2, [r2, #4]
    756e:	714a      	strb	r2, [r1, #5]
    aBlock[6] = address & 0xFF;
    7570:	718d      	strb	r5, [r1, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    7572:	0a2b      	lsrs	r3, r5, #8
    7574:	71cb      	strb	r3, [r1, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    7576:	0c2b      	lsrs	r3, r5, #16
    7578:	720b      	strb	r3, [r1, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    757a:	0e2d      	lsrs	r5, r5, #24
    757c:	724d      	strb	r5, [r1, #9]
    aBlock[10] = frameCounter & 0xFF;
    757e:	728c      	strb	r4, [r1, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    7580:	0a23      	lsrs	r3, r4, #8
    7582:	72cb      	strb	r3, [r1, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    7584:	0c23      	lsrs	r3, r4, #16
    7586:	730b      	strb	r3, [r1, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    7588:	0e24      	lsrs	r4, r4, #24
    758a:	734c      	strb	r4, [r1, #13]
    return LORAMAC_CRYPTO_SUCCESS;
    758c:	2000      	movs	r0, #0
    if( size > 0 )
    758e:	2e00      	cmp	r6, #0
    7590:	d101      	bne.n	7596 <FOptsEncrypt+0x56>
}
    7592:	b00b      	add	sp, #44	; 0x2c
    7594:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
    7596:	ab06      	add	r3, sp, #24
    7598:	2206      	movs	r2, #6
    759a:	2110      	movs	r1, #16
    759c:	a802      	add	r0, sp, #8
    759e:	4c0c      	ldr	r4, [pc, #48]	; (75d0 <FOptsEncrypt+0x90>)
    75a0:	47a0      	blx	r4
    75a2:	0003      	movs	r3, r0
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    75a4:	200c      	movs	r0, #12
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
    75a6:	2b00      	cmp	r3, #0
    75a8:	d1f3      	bne.n	7592 <FOptsEncrypt+0x52>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    75aa:	a806      	add	r0, sp, #24
    75ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
    75ae:	18d1      	adds	r1, r2, r3
    75b0:	780a      	ldrb	r2, [r1, #0]
    75b2:	5cc4      	ldrb	r4, [r0, r3]
    75b4:	4062      	eors	r2, r4
    75b6:	700a      	strb	r2, [r1, #0]
        for( uint8_t i = 0; i < size; i++ )
    75b8:	3301      	adds	r3, #1
    75ba:	b2db      	uxtb	r3, r3
    75bc:	b29a      	uxth	r2, r3
    75be:	4296      	cmp	r6, r2
    75c0:	d8f4      	bhi.n	75ac <FOptsEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
    75c2:	2000      	movs	r0, #0
    75c4:	e7e5      	b.n	7592 <FOptsEncrypt+0x52>
        return LORAMAC_CRYPTO_ERROR_NPE;
    75c6:	2007      	movs	r0, #7
    75c8:	e7e3      	b.n	7592 <FOptsEncrypt+0x52>
    75ca:	46c0      	nop			; (mov r8, r8)
    75cc:	0000ebd9 	.word	0x0000ebd9
    75d0:	0000bcd5 	.word	0x0000bcd5

000075d4 <VerifyCmacB0>:
{
    75d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    75d6:	b0c7      	sub	sp, #284	; 0x11c
    75d8:	0007      	movs	r7, r0
    75da:	000c      	movs	r4, r1
    75dc:	9201      	str	r2, [sp, #4]
    75de:	001e      	movs	r6, r3
    75e0:	ab4c      	add	r3, sp, #304	; 0x130
    75e2:	781d      	ldrb	r5, [r3, #0]
    if( msg == 0 )
    75e4:	2800      	cmp	r0, #0
    75e6:	d05d      	beq.n	76a4 <VerifyCmacB0+0xd0>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    75e8:	2380      	movs	r3, #128	; 0x80
    75ea:	005b      	lsls	r3, r3, #1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    75ec:	200b      	movs	r0, #11
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    75ee:	4299      	cmp	r1, r3
    75f0:	d901      	bls.n	75f6 <VerifyCmacB0+0x22>
}
    75f2:	b047      	add	sp, #284	; 0x11c
    75f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    75f6:	2288      	movs	r2, #136	; 0x88
    75f8:	0052      	lsls	r2, r2, #1
    75fa:	2100      	movs	r1, #0
    75fc:	a802      	add	r0, sp, #8
    75fe:	4b2b      	ldr	r3, [pc, #172]	; (76ac <VerifyCmacB0+0xd8>)
    7600:	4798      	blx	r3
    b0[0] = 0x49;
    7602:	2349      	movs	r3, #73	; 0x49
    7604:	aa02      	add	r2, sp, #8
    7606:	7013      	strb	r3, [r2, #0]
    if( isAck == true )
    7608:	2e00      	cmp	r6, #0
    760a:	d046      	beq.n	769a <VerifyCmacB0+0xc6>
        if( dir == UPLINK )
    760c:	2d00      	cmp	r5, #0
    760e:	d140      	bne.n	7692 <VerifyCmacB0+0xbe>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
    7610:	4b27      	ldr	r3, [pc, #156]	; (76b0 <VerifyCmacB0+0xdc>)
    7612:	689b      	ldr	r3, [r3, #8]
    7614:	8a9b      	ldrh	r3, [r3, #20]
        b0[1] = confFCnt & 0xFF;
    7616:	aa02      	add	r2, sp, #8
    7618:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    761a:	0a1b      	lsrs	r3, r3, #8
    761c:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
    761e:	2200      	movs	r2, #0
    7620:	ab02      	add	r3, sp, #8
    7622:	70da      	strb	r2, [r3, #3]
    b0[4] = 0x00;
    7624:	711a      	strb	r2, [r3, #4]
    b0[5] = dir;
    7626:	715d      	strb	r5, [r3, #5]
    b0[6] = devAddr & 0xFF;
    7628:	2096      	movs	r0, #150	; 0x96
    762a:	0040      	lsls	r0, r0, #1
    762c:	1819      	adds	r1, r3, r0
    762e:	7809      	ldrb	r1, [r1, #0]
    7630:	7199      	strb	r1, [r3, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
    7632:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    7634:	0a1b      	lsrs	r3, r3, #8
    7636:	a902      	add	r1, sp, #8
    7638:	71cb      	strb	r3, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
    763a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    763c:	0c1b      	lsrs	r3, r3, #16
    763e:	720b      	strb	r3, [r1, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
    7640:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    7642:	0e1b      	lsrs	r3, r3, #24
    7644:	724b      	strb	r3, [r1, #9]
    b0[10] = fCnt & 0xFF;
    7646:	000b      	movs	r3, r1
    7648:	3004      	adds	r0, #4
    764a:	1809      	adds	r1, r1, r0
    764c:	7809      	ldrb	r1, [r1, #0]
    764e:	7299      	strb	r1, [r3, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
    7650:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    7652:	0a1b      	lsrs	r3, r3, #8
    7654:	a902      	add	r1, sp, #8
    7656:	72cb      	strb	r3, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
    7658:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    765a:	0c1b      	lsrs	r3, r3, #16
    765c:	730b      	strb	r3, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
    765e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    7660:	0e1b      	lsrs	r3, r3, #24
    7662:	734b      	strb	r3, [r1, #13]
    b0[14] = 0x00;
    7664:	738a      	strb	r2, [r1, #14]
    b0[15] = msgLen & 0xFF;
    7666:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    7668:	0022      	movs	r2, r4
    766a:	0039      	movs	r1, r7
    766c:	a806      	add	r0, sp, #24
    766e:	4b11      	ldr	r3, [pc, #68]	; (76b4 <VerifyCmacB0+0xe0>)
    7670:	4798      	blx	r3
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
    7672:	0021      	movs	r1, r4
    7674:	3110      	adds	r1, #16
    7676:	b289      	uxth	r1, r1
    7678:	9b01      	ldr	r3, [sp, #4]
    767a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    767c:	a802      	add	r0, sp, #8
    767e:	4c0e      	ldr	r4, [pc, #56]	; (76b8 <VerifyCmacB0+0xe4>)
    7680:	47a0      	blx	r4
    7682:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_SUCCESS;
    7684:	2000      	movs	r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
    7686:	2b00      	cmp	r3, #0
    7688:	d0b3      	beq.n	75f2 <VerifyCmacB0+0x1e>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
    768a:	2b01      	cmp	r3, #1
    768c:	d00c      	beq.n	76a8 <VerifyCmacB0+0xd4>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    768e:	300c      	adds	r0, #12
    7690:	e7af      	b.n	75f2 <VerifyCmacB0+0x1e>
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
    7692:	4b07      	ldr	r3, [pc, #28]	; (76b0 <VerifyCmacB0+0xdc>)
    7694:	689b      	ldr	r3, [r3, #8]
    7696:	891b      	ldrh	r3, [r3, #8]
    7698:	e7bd      	b.n	7616 <VerifyCmacB0+0x42>
        b0[1] = 0x00;
    769a:	2300      	movs	r3, #0
    769c:	aa02      	add	r2, sp, #8
    769e:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
    76a0:	7093      	strb	r3, [r2, #2]
    76a2:	e7bc      	b.n	761e <VerifyCmacB0+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
    76a4:	2007      	movs	r0, #7
    76a6:	e7a4      	b.n	75f2 <VerifyCmacB0+0x1e>
        return LORAMAC_CRYPTO_FAIL_MIC;
    76a8:	2001      	movs	r0, #1
    76aa:	e7a2      	b.n	75f2 <VerifyCmacB0+0x1e>
    76ac:	00001ec7 	.word	0x00001ec7
    76b0:	200014f4 	.word	0x200014f4
    76b4:	00001e91 	.word	0x00001e91
    76b8:	0000bca5 	.word	0x0000bca5

000076bc <ResetFCnts>:
{
    76bc:	b510      	push	{r4, lr}
    CryptoCtx.NvmCtx->FCntUp = 0;
    76be:	4908      	ldr	r1, [pc, #32]	; (76e0 <ResetFCnts+0x24>)
    76c0:	688b      	ldr	r3, [r1, #8]
    76c2:	2200      	movs	r2, #0
    76c4:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    76c6:	688b      	ldr	r3, [r1, #8]
    76c8:	3a01      	subs	r2, #1
    76ca:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    76cc:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    76ce:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    76d0:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    76d2:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    76d4:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    76d6:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.EventCryptoNvmCtxChanged( );
    76d8:	68cb      	ldr	r3, [r1, #12]
    76da:	4798      	blx	r3
}
    76dc:	bd10      	pop	{r4, pc}
    76de:	46c0      	nop			; (mov r8, r8)
    76e0:	200014f4 	.word	0x200014f4

000076e4 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
    76e4:	b510      	push	{r4, lr}
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
    76e6:	4b15      	ldr	r3, [pc, #84]	; (773c <LoRaMacCryptoInit+0x58>)
    76e8:	2201      	movs	r2, #1
    76ea:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
    76ec:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
    76ee:	2200      	movs	r2, #0
    76f0:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
    76f2:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
    76f4:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
    76f6:	001a      	movs	r2, r3
    76f8:	3210      	adds	r2, #16
    76fa:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
    76fc:	2800      	cmp	r0, #0
    76fe:	d018      	beq.n	7732 <LoRaMacCryptoInit+0x4e>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
    7700:	60d8      	str	r0, [r3, #12]
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
    7702:	4c0e      	ldr	r4, [pc, #56]	; (773c <LoRaMacCryptoInit+0x58>)
    7704:	0020      	movs	r0, r4
    7706:	3010      	adds	r0, #16
    7708:	2230      	movs	r2, #48	; 0x30
    770a:	2100      	movs	r1, #0
    770c:	4b0c      	ldr	r3, [pc, #48]	; (7740 <LoRaMacCryptoInit+0x5c>)
    770e:	4798      	blx	r3

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
    7710:	2300      	movs	r3, #0
    7712:	80a3      	strh	r3, [r4, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    7714:	68a2      	ldr	r2, [r4, #8]
    7716:	6093      	str	r3, [r2, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    7718:	68a3      	ldr	r3, [r4, #8]
    771a:	2201      	movs	r2, #1
    771c:	4252      	negs	r2, r2
    771e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    7720:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    7722:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    7724:	001a      	movs	r2, r3
    7726:	3214      	adds	r2, #20
    7728:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
    772a:	4b06      	ldr	r3, [pc, #24]	; (7744 <LoRaMacCryptoInit+0x60>)
    772c:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
}
    772e:	2000      	movs	r0, #0
    7730:	bd10      	pop	{r4, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    7732:	4a05      	ldr	r2, [pc, #20]	; (7748 <LoRaMacCryptoInit+0x64>)
    7734:	4b01      	ldr	r3, [pc, #4]	; (773c <LoRaMacCryptoInit+0x58>)
    7736:	60da      	str	r2, [r3, #12]
    7738:	e7e3      	b.n	7702 <LoRaMacCryptoInit+0x1e>
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	200014f4 	.word	0x200014f4
    7740:	00001ec7 	.word	0x00001ec7
    7744:	000076bd 	.word	0x000076bd
    7748:	000070a5 	.word	0x000070a5

0000774c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoCtx.LrWanVersion = version;
    774c:	4b01      	ldr	r3, [pc, #4]	; (7754 <LoRaMacCryptoSetLrWanVersion+0x8>)
    774e:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
    7750:	2000      	movs	r0, #0
    7752:	4770      	bx	lr
    7754:	200014f4 	.word	0x200014f4

00007758 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
    7758:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
        return LORAMAC_CRYPTO_SUCCESS;
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    775a:	2307      	movs	r3, #7
    if( cryptoNvmCtx != 0 )
    775c:	2800      	cmp	r0, #0
    775e:	d006      	beq.n	776e <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
    7760:	2230      	movs	r2, #48	; 0x30
    7762:	0001      	movs	r1, r0
    7764:	4803      	ldr	r0, [pc, #12]	; (7774 <LoRaMacCryptoRestoreNvmCtx+0x1c>)
    7766:	3010      	adds	r0, #16
    7768:	4b03      	ldr	r3, [pc, #12]	; (7778 <LoRaMacCryptoRestoreNvmCtx+0x20>)
    776a:	4798      	blx	r3
        return LORAMAC_CRYPTO_SUCCESS;
    776c:	2300      	movs	r3, #0
    }
}
    776e:	0018      	movs	r0, r3
    7770:	bd10      	pop	{r4, pc}
    7772:	46c0      	nop			; (mov r8, r8)
    7774:	200014f4 	.word	0x200014f4
    7778:	00001e91 	.word	0x00001e91

0000777c <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
    777c:	2330      	movs	r3, #48	; 0x30
    777e:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
    7780:	4801      	ldr	r0, [pc, #4]	; (7788 <LoRaMacCryptoGetNvmCtx+0xc>)
}
    7782:	3010      	adds	r0, #16
    7784:	4770      	bx	lr
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	200014f4 	.word	0x200014f4

0000778c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
    778c:	b510      	push	{r4, lr}
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
    778e:	4b04      	ldr	r3, [pc, #16]	; (77a0 <LoRaMacCryptoSetKey+0x14>)
    7790:	4798      	blx	r3
    7792:	0003      	movs	r3, r0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7794:	200c      	movs	r0, #12
    }
    return LORAMAC_CRYPTO_SUCCESS;
    7796:	1e5a      	subs	r2, r3, #1
    7798:	4193      	sbcs	r3, r2
    779a:	425b      	negs	r3, r3
    779c:	4018      	ands	r0, r3
}
    779e:	bd10      	pop	{r4, pc}
    77a0:	0000bd65 	.word	0x0000bd65

000077a4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    77a4:	b570      	push	{r4, r5, r6, lr}
    77a6:	0005      	movs	r5, r0
    if( macMsg == 0 )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    77a8:	2407      	movs	r4, #7
    if( macMsg == 0 )
    77aa:	2800      	cmp	r0, #0
    77ac:	d011      	beq.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Add device nonce
    CryptoCtx.NvmCtx->DevNonce++;
    77ae:	4c19      	ldr	r4, [pc, #100]	; (7814 <LoRaMacCryptoPrepareJoinRequest+0x70>)
    77b0:	68a2      	ldr	r2, [r4, #8]
    77b2:	8813      	ldrh	r3, [r2, #0]
    77b4:	3301      	adds	r3, #1
    77b6:	8013      	strh	r3, [r2, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    77b8:	68e3      	ldr	r3, [r4, #12]
    77ba:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
    77bc:	68a3      	ldr	r3, [r4, #8]
    77be:	881b      	ldrh	r3, [r3, #0]
    77c0:	82eb      	strh	r3, [r5, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
    77c2:	002e      	movs	r6, r5
    77c4:	360e      	adds	r6, #14
    77c6:	0031      	movs	r1, r6
    77c8:	2002      	movs	r0, #2
    77ca:	4b13      	ldr	r3, [pc, #76]	; (7818 <LoRaMacCryptoPrepareJoinRequest+0x74>)
    77cc:	4798      	blx	r3
    77ce:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    77d0:	d001      	beq.n	77d6 <LoRaMacCryptoPrepareJoinRequest+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
    77d2:	0020      	movs	r0, r4
    77d4:	bd70      	pop	{r4, r5, r6, pc}
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
    77d6:	0031      	movs	r1, r6
    77d8:	2003      	movs	r0, #3
    77da:	4b0f      	ldr	r3, [pc, #60]	; (7818 <LoRaMacCryptoPrepareJoinRequest+0x74>)
    77dc:	4798      	blx	r3
    77de:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    77e0:	d1f7      	bne.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    77e2:	0028      	movs	r0, r5
    77e4:	4b0d      	ldr	r3, [pc, #52]	; (781c <LoRaMacCryptoPrepareJoinRequest+0x78>)
    77e6:	4798      	blx	r3
    77e8:	2800      	cmp	r0, #0
    77ea:	d001      	beq.n	77f0 <LoRaMacCryptoPrepareJoinRequest+0x4c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    77ec:	240e      	movs	r4, #14
    77ee:	e7f0      	b.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
    retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
    77f0:	002b      	movs	r3, r5
    77f2:	3318      	adds	r3, #24
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    77f4:	2201      	movs	r2, #1
    77f6:	2113      	movs	r1, #19
    77f8:	6828      	ldr	r0, [r5, #0]
    77fa:	4e09      	ldr	r6, [pc, #36]	; (7820 <LoRaMacCryptoPrepareJoinRequest+0x7c>)
    77fc:	47b0      	blx	r6
    77fe:	2800      	cmp	r0, #0
    7800:	d001      	beq.n	7806 <LoRaMacCryptoPrepareJoinRequest+0x62>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7802:	340c      	adds	r4, #12
    7804:	e7e5      	b.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7806:	0028      	movs	r0, r5
    7808:	4b04      	ldr	r3, [pc, #16]	; (781c <LoRaMacCryptoPrepareJoinRequest+0x78>)
    780a:	4798      	blx	r3
    780c:	2800      	cmp	r0, #0
    780e:	d0e0      	beq.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    7810:	240e      	movs	r4, #14
    7812:	e7de      	b.n	77d2 <LoRaMacCryptoPrepareJoinRequest+0x2e>
    7814:	200014f4 	.word	0x200014f4
    7818:	000070a9 	.word	0x000070a9
    781c:	000081f9 	.word	0x000081f9
    7820:	0000bc8d 	.word	0x0000bc8d

00007824 <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    7824:	b570      	push	{r4, r5, r6, lr}
    7826:	1e04      	subs	r4, r0, #0
    if( macMsg == 0 )
    7828:	d029      	beq.n	787e <LoRaMacCryptoPrepareReJoinType1+0x5a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount1 overflow
    if( CryptoCtx.NvmCtx->RJcount1 == 65535 )
    782a:	4b16      	ldr	r3, [pc, #88]	; (7884 <LoRaMacCryptoPrepareReJoinType1+0x60>)
    782c:	689b      	ldr	r3, [r3, #8]
    782e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    7830:	4b15      	ldr	r3, [pc, #84]	; (7888 <LoRaMacCryptoPrepareReJoinType1+0x64>)
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    7832:	200f      	movs	r0, #15
    if( CryptoCtx.NvmCtx->RJcount1 == 65535 )
    7834:	429a      	cmp	r2, r3
    7836:	d100      	bne.n	783a <LoRaMacCryptoPrepareReJoinType1+0x16>
    // Increment RJcount1
    CryptoCtx.NvmCtx->RJcount1++;
    CryptoCtx.EventCryptoNvmCtxChanged( );

    return LORAMAC_CRYPTO_SUCCESS;
}
    7838:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    783a:	0020      	movs	r0, r4
    783c:	4b13      	ldr	r3, [pc, #76]	; (788c <LoRaMacCryptoPrepareReJoinType1+0x68>)
    783e:	4798      	blx	r3
    7840:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    7842:	200e      	movs	r0, #14
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7844:	2b00      	cmp	r3, #0
    7846:	d1f7      	bne.n	7838 <LoRaMacCryptoPrepareReJoinType1+0x14>
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC );
    7848:	0023      	movs	r3, r4
    784a:	331c      	adds	r3, #28
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    784c:	2202      	movs	r2, #2
    784e:	2114      	movs	r1, #20
    7850:	6820      	ldr	r0, [r4, #0]
    7852:	4d0f      	ldr	r5, [pc, #60]	; (7890 <LoRaMacCryptoPrepareReJoinType1+0x6c>)
    7854:	47a8      	blx	r5
    7856:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7858:	200c      	movs	r0, #12
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    785a:	2b00      	cmp	r3, #0
    785c:	d1ec      	bne.n	7838 <LoRaMacCryptoPrepareReJoinType1+0x14>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    785e:	0020      	movs	r0, r4
    7860:	4b0a      	ldr	r3, [pc, #40]	; (788c <LoRaMacCryptoPrepareReJoinType1+0x68>)
    7862:	4798      	blx	r3
    7864:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    7866:	200e      	movs	r0, #14
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7868:	2b00      	cmp	r3, #0
    786a:	d1e5      	bne.n	7838 <LoRaMacCryptoPrepareReJoinType1+0x14>
    CryptoCtx.NvmCtx->RJcount1++;
    786c:	4a05      	ldr	r2, [pc, #20]	; (7884 <LoRaMacCryptoPrepareReJoinType1+0x60>)
    786e:	6891      	ldr	r1, [r2, #8]
    7870:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
    7872:	3301      	adds	r3, #1
    7874:	850b      	strh	r3, [r1, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
    7876:	68d3      	ldr	r3, [r2, #12]
    7878:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
    787a:	2000      	movs	r0, #0
    787c:	e7dc      	b.n	7838 <LoRaMacCryptoPrepareReJoinType1+0x14>
        return LORAMAC_CRYPTO_ERROR_NPE;
    787e:	2007      	movs	r0, #7
    7880:	e7da      	b.n	7838 <LoRaMacCryptoPrepareReJoinType1+0x14>
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	200014f4 	.word	0x200014f4
    7888:	0000ffff 	.word	0x0000ffff
    788c:	00008269 	.word	0x00008269
    7890:	0000bc8d 	.word	0x0000bc8d

00007894 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    7894:	b570      	push	{r4, r5, r6, lr}
    7896:	1e04      	subs	r4, r0, #0
    if( macMsg == 0 )
    7898:	d025      	beq.n	78e6 <LoRaMacCryptoPrepareReJoinType0or2+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount0 overflow
    if( CryptoCtx.RJcount0 == 65535 )
    789a:	4b14      	ldr	r3, [pc, #80]	; (78ec <LoRaMacCryptoPrepareReJoinType0or2+0x58>)
    789c:	889a      	ldrh	r2, [r3, #4]
    789e:	4b14      	ldr	r3, [pc, #80]	; (78f0 <LoRaMacCryptoPrepareReJoinType0or2+0x5c>)
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    78a0:	2004      	movs	r0, #4
    if( CryptoCtx.RJcount0 == 65535 )
    78a2:	429a      	cmp	r2, r3
    78a4:	d100      	bne.n	78a8 <LoRaMacCryptoPrepareReJoinType0or2+0x14>

    // Increment RJcount0
    CryptoCtx.RJcount0++;

    return LORAMAC_CRYPTO_SUCCESS;
}
    78a6:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    78a8:	0020      	movs	r0, r4
    78aa:	4b12      	ldr	r3, [pc, #72]	; (78f4 <LoRaMacCryptoPrepareReJoinType0or2+0x60>)
    78ac:	4798      	blx	r3
    78ae:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    78b0:	200e      	movs	r0, #14
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    78b2:	2b00      	cmp	r3, #0
    78b4:	d1f7      	bne.n	78a6 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC );
    78b6:	0023      	movs	r3, r4
    78b8:	3314      	adds	r3, #20
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    78ba:	2205      	movs	r2, #5
    78bc:	210f      	movs	r1, #15
    78be:	6820      	ldr	r0, [r4, #0]
    78c0:	4d0d      	ldr	r5, [pc, #52]	; (78f8 <LoRaMacCryptoPrepareReJoinType0or2+0x64>)
    78c2:	47a8      	blx	r5
    78c4:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    78c6:	200c      	movs	r0, #12
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    78c8:	2b00      	cmp	r3, #0
    78ca:	d1ec      	bne.n	78a6 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    78cc:	0020      	movs	r0, r4
    78ce:	4b09      	ldr	r3, [pc, #36]	; (78f4 <LoRaMacCryptoPrepareReJoinType0or2+0x60>)
    78d0:	4798      	blx	r3
    78d2:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    78d4:	200e      	movs	r0, #14
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    78d6:	2b00      	cmp	r3, #0
    78d8:	d1e5      	bne.n	78a6 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    CryptoCtx.RJcount0++;
    78da:	4a04      	ldr	r2, [pc, #16]	; (78ec <LoRaMacCryptoPrepareReJoinType0or2+0x58>)
    78dc:	8893      	ldrh	r3, [r2, #4]
    78de:	3301      	adds	r3, #1
    78e0:	8093      	strh	r3, [r2, #4]
    return LORAMAC_CRYPTO_SUCCESS;
    78e2:	2000      	movs	r0, #0
    78e4:	e7df      	b.n	78a6 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
    78e6:	2007      	movs	r0, #7
    78e8:	e7dd      	b.n	78a6 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    78ea:	46c0      	nop			; (mov r8, r8)
    78ec:	200014f4 	.word	0x200014f4
    78f0:	0000ffff 	.word	0x0000ffff
    78f4:	000082dd 	.word	0x000082dd
    78f8:	0000bc8d 	.word	0x0000bc8d

000078fc <LoRaMacCryptoHandleJoinAccept>:

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
    78fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    78fe:	46d6      	mov	lr, sl
    7900:	464f      	mov	r7, r9
    7902:	4646      	mov	r6, r8
    7904:	b5c0      	push	{r6, r7, lr}
    7906:	b0c6      	sub	sp, #280	; 0x118
    7908:	0007      	movs	r7, r0
    790a:	000d      	movs	r5, r1
    790c:	1e14      	subs	r4, r2, #0
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
    790e:	d100      	bne.n	7912 <LoRaMacCryptoHandleJoinAccept+0x16>
    7910:	e0ed      	b.n	7aee <LoRaMacCryptoHandleJoinAccept+0x1f2>
    7912:	2900      	cmp	r1, #0
    7914:	d100      	bne.n	7918 <LoRaMacCryptoHandleJoinAccept+0x1c>
    7916:	e0ec      	b.n	7af2 <LoRaMacCryptoHandleJoinAccept+0x1f6>

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
    7918:	4b77      	ldr	r3, [pc, #476]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    791a:	689b      	ldr	r3, [r3, #8]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
    791c:	28ff      	cmp	r0, #255	; 0xff
    791e:	d00a      	beq.n	7936 <LoRaMacCryptoHandleJoinAccept+0x3a>
    else
    {
        encryptionKeyID = J_S_ENC_KEY;

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
    7920:	2202      	movs	r2, #2
    7922:	0001      	movs	r1, r0
    7924:	4391      	bics	r1, r2
    7926:	d00b      	beq.n	7940 <LoRaMacCryptoHandleJoinAccept+0x44>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
    7928:	2228      	movs	r2, #40	; 0x28
    792a:	4690      	mov	r8, r2
    792c:	4498      	add	r8, r3
    uint8_t micComputationOffset = 0;
    792e:	2600      	movs	r6, #0
        encryptionKeyID = J_S_ENC_KEY;
    7930:	2303      	movs	r3, #3
    7932:	9301      	str	r3, [sp, #4]
    7934:	e00a      	b.n	794c <LoRaMacCryptoHandleJoinAccept+0x50>
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
    7936:	4698      	mov	r8, r3
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
    7938:	260c      	movs	r6, #12
        encryptionKeyID = NWK_KEY;
    793a:	2301      	movs	r3, #1
    793c:	9301      	str	r3, [sp, #4]
    793e:	e005      	b.n	794c <LoRaMacCryptoHandleJoinAccept+0x50>
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
    7940:	4b6d      	ldr	r3, [pc, #436]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7942:	3304      	adds	r3, #4
    7944:	4698      	mov	r8, r3
    uint8_t micComputationOffset = 0;
    7946:	2600      	movs	r6, #0
        encryptionKeyID = J_S_ENC_KEY;
    7948:	2303      	movs	r3, #3
    794a:	9301      	str	r3, [sp, #4]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
    794c:	b2b3      	uxth	r3, r6
    794e:	4699      	mov	r9, r3
    7950:	7922      	ldrb	r2, [r4, #4]
    7952:	444a      	add	r2, r9
    7954:	2100      	movs	r1, #0
    7956:	a803      	add	r0, sp, #12
    7958:	4b68      	ldr	r3, [pc, #416]	; (7afc <LoRaMacCryptoHandleJoinAccept+0x200>)
    795a:	4798      	blx	r3

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
    795c:	ab03      	add	r3, sp, #12
    795e:	469a      	mov	sl, r3
    7960:	44b2      	add	sl, r6
    7962:	7921      	ldrb	r1, [r4, #4]
    7964:	3901      	subs	r1, #1
    7966:	b289      	uxth	r1, r1
    7968:	6823      	ldr	r3, [r4, #0]
    796a:	1c58      	adds	r0, r3, #1
    796c:	4653      	mov	r3, sl
    796e:	9a01      	ldr	r2, [sp, #4]
    7970:	4e63      	ldr	r6, [pc, #396]	; (7b00 <LoRaMacCryptoHandleJoinAccept+0x204>)
    7972:	47b0      	blx	r6
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7974:	230c      	movs	r3, #12
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
    7976:	2800      	cmp	r0, #0
    7978:	d006      	beq.n	7988 <LoRaMacCryptoHandleJoinAccept+0x8c>
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.EventCryptoNvmCtxChanged( );

    return LORAMAC_CRYPTO_SUCCESS;
}
    797a:	0018      	movs	r0, r3
    797c:	b046      	add	sp, #280	; 0x118
    797e:	bc1c      	pop	{r2, r3, r4}
    7980:	4690      	mov	r8, r2
    7982:	4699      	mov	r9, r3
    7984:	46a2      	mov	sl, r4
    7986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
    7988:	7922      	ldrb	r2, [r4, #4]
    798a:	3a01      	subs	r2, #1
    798c:	b292      	uxth	r2, r2
    798e:	6823      	ldr	r3, [r4, #0]
    7990:	1c58      	adds	r0, r3, #1
    7992:	4651      	mov	r1, sl
    7994:	4b5b      	ldr	r3, [pc, #364]	; (7b04 <LoRaMacCryptoHandleJoinAccept+0x208>)
    7996:	4798      	blx	r3
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
    7998:	0020      	movs	r0, r4
    799a:	4b5b      	ldr	r3, [pc, #364]	; (7b08 <LoRaMacCryptoHandleJoinAccept+0x20c>)
    799c:	4798      	blx	r3
        return LORAMAC_CRYPTO_ERROR_PARSER;
    799e:	230d      	movs	r3, #13
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
    79a0:	2800      	cmp	r0, #0
    79a2:	d1ea      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
    79a4:	7c23      	ldrb	r3, [r4, #16]
    79a6:	2b7f      	cmp	r3, #127	; 0x7f
    79a8:	d846      	bhi.n	7a38 <LoRaMacCryptoHandleJoinAccept+0x13c>
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
    79aa:	2200      	movs	r2, #0
    79ac:	4b52      	ldr	r3, [pc, #328]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    79ae:	709a      	strb	r2, [r3, #2]
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    79b0:	7921      	ldrb	r1, [r4, #4]
    79b2:	3904      	subs	r1, #4
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    79b4:	b289      	uxth	r1, r1
    79b6:	2301      	movs	r3, #1
    79b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    79ba:	6820      	ldr	r0, [r4, #0]
    79bc:	4e53      	ldr	r6, [pc, #332]	; (7b0c <LoRaMacCryptoHandleJoinAccept+0x210>)
    79be:	47b0      	blx	r6
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    79c0:	230c      	movs	r3, #12
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    79c2:	2800      	cmp	r0, #0
    79c4:	d1d9      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    79c6:	4b4c      	ldr	r3, [pc, #304]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    79c8:	789b      	ldrb	r3, [r3, #2]
    79ca:	2b01      	cmp	r3, #1
    79cc:	d06a      	beq.n	7aa4 <LoRaMacCryptoHandleJoinAccept+0x1a8>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    79ce:	1da5      	adds	r5, r4, #6
    79d0:	3409      	adds	r4, #9
    79d2:	4b49      	ldr	r3, [pc, #292]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    79d4:	689b      	ldr	r3, [r3, #8]
    79d6:	0022      	movs	r2, r4
    79d8:	0029      	movs	r1, r5
    79da:	2007      	movs	r0, #7
    79dc:	4e4c      	ldr	r6, [pc, #304]	; (7b10 <LoRaMacCryptoHandleJoinAccept+0x214>)
    79de:	47b0      	blx	r6
    79e0:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    79e2:	d1ca      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    79e4:	4b44      	ldr	r3, [pc, #272]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    79e6:	689b      	ldr	r3, [r3, #8]
    79e8:	0022      	movs	r2, r4
    79ea:	0029      	movs	r1, r5
    79ec:	2006      	movs	r0, #6
    79ee:	4e48      	ldr	r6, [pc, #288]	; (7b10 <LoRaMacCryptoHandleJoinAccept+0x214>)
    79f0:	47b0      	blx	r6
    79f2:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    79f4:	d1c1      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    79f6:	4b40      	ldr	r3, [pc, #256]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    79f8:	689b      	ldr	r3, [r3, #8]
    79fa:	0022      	movs	r2, r4
    79fc:	0029      	movs	r1, r5
    79fe:	2004      	movs	r0, #4
    7a00:	4e43      	ldr	r6, [pc, #268]	; (7b10 <LoRaMacCryptoHandleJoinAccept+0x214>)
    7a02:	47b0      	blx	r6
    7a04:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7a06:	d1b8      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    7a08:	4b3b      	ldr	r3, [pc, #236]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7a0a:	689b      	ldr	r3, [r3, #8]
    7a0c:	0022      	movs	r2, r4
    7a0e:	0029      	movs	r1, r5
    7a10:	2005      	movs	r0, #5
    7a12:	4c3f      	ldr	r4, [pc, #252]	; (7b10 <LoRaMacCryptoHandleJoinAccept+0x214>)
    7a14:	47a0      	blx	r4
    7a16:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7a18:	d1af      	bne.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
    CryptoCtx.RJcount0 = 0;
    7a1a:	4b37      	ldr	r3, [pc, #220]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7a1c:	2400      	movs	r4, #0
    7a1e:	809c      	strh	r4, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    7a20:	689a      	ldr	r2, [r3, #8]
    7a22:	6094      	str	r4, [r2, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    7a24:	689a      	ldr	r2, [r3, #8]
    7a26:	2101      	movs	r1, #1
    7a28:	4249      	negs	r1, r1
    7a2a:	6151      	str	r1, [r2, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    7a2c:	60d1      	str	r1, [r2, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    7a2e:	6111      	str	r1, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    7a30:	68db      	ldr	r3, [r3, #12]
    7a32:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
    7a34:	0023      	movs	r3, r4
    7a36:	e7a0      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
    7a38:	4b2f      	ldr	r3, [pc, #188]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7a3a:	469a      	mov	sl, r3
    7a3c:	2301      	movs	r3, #1
    7a3e:	4652      	mov	r2, sl
    7a40:	7093      	strb	r3, [r2, #2]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
    7a42:	ae03      	add	r6, sp, #12
    7a44:	7037      	strb	r7, [r6, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    7a46:	2208      	movs	r2, #8
    7a48:	0029      	movs	r1, r5
    7a4a:	ab02      	add	r3, sp, #8
    7a4c:	1d58      	adds	r0, r3, #5
    7a4e:	4b31      	ldr	r3, [pc, #196]	; (7b14 <LoRaMacCryptoHandleJoinAccept+0x218>)
    7a50:	4798      	blx	r3
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
    7a52:	4653      	mov	r3, sl
    7a54:	689b      	ldr	r3, [r3, #8]
    7a56:	881a      	ldrh	r2, [r3, #0]
    7a58:	7272      	strb	r2, [r6, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
    7a5a:	881b      	ldrh	r3, [r3, #0]
    7a5c:	0a1b      	lsrs	r3, r3, #8
    7a5e:	72b3      	strb	r3, [r6, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
    7a60:	7963      	ldrb	r3, [r4, #5]
    7a62:	72f3      	strb	r3, [r6, #11]
        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    7a64:	7921      	ldrb	r1, [r4, #4]
    7a66:	3905      	subs	r1, #5
    7a68:	4449      	add	r1, r9
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    7a6a:	b289      	uxth	r1, r1
    7a6c:	2302      	movs	r3, #2
    7a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7a70:	a803      	add	r0, sp, #12
    7a72:	4e26      	ldr	r6, [pc, #152]	; (7b0c <LoRaMacCryptoHandleJoinAccept+0x210>)
    7a74:	47b0      	blx	r6
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    7a76:	230c      	movs	r3, #12
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    7a78:	2800      	cmp	r0, #0
    7a7a:	d000      	beq.n	7a7e <LoRaMacCryptoHandleJoinAccept+0x182>
    7a7c:	e77d      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
    7a7e:	79a1      	ldrb	r1, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
    7a80:	79e3      	ldrb	r3, [r4, #7]
    7a82:	021b      	lsls	r3, r3, #8
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
    7a84:	7a22      	ldrb	r2, [r4, #8]
    7a86:	0412      	lsls	r2, r2, #16
    7a88:	4313      	orrs	r3, r2
    7a8a:	430b      	orrs	r3, r1
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
    7a8c:	4a1a      	ldr	r2, [pc, #104]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7a8e:	6892      	ldr	r2, [r2, #8]
    7a90:	6851      	ldr	r1, [r2, #4]
    7a92:	428b      	cmp	r3, r1
    7a94:	d801      	bhi.n	7a9a <LoRaMacCryptoHandleJoinAccept+0x19e>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    7a96:	2303      	movs	r3, #3
    7a98:	e76f      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
    7a9a:	6053      	str	r3, [r2, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
    7a9c:	4b16      	ldr	r3, [pc, #88]	; (7af8 <LoRaMacCryptoHandleJoinAccept+0x1fc>)
    7a9e:	68db      	ldr	r3, [r3, #12]
    7aa0:	4798      	blx	r3
    7aa2:	e790      	b.n	79c6 <LoRaMacCryptoHandleJoinAccept+0xca>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    7aa4:	3406      	adds	r4, #6
    7aa6:	4643      	mov	r3, r8
    7aa8:	002a      	movs	r2, r5
    7aaa:	0021      	movs	r1, r4
    7aac:	2004      	movs	r0, #4
    7aae:	4e1a      	ldr	r6, [pc, #104]	; (7b18 <LoRaMacCryptoHandleJoinAccept+0x21c>)
    7ab0:	47b0      	blx	r6
    7ab2:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7ab4:	d000      	beq.n	7ab8 <LoRaMacCryptoHandleJoinAccept+0x1bc>
    7ab6:	e760      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    7ab8:	4643      	mov	r3, r8
    7aba:	002a      	movs	r2, r5
    7abc:	0021      	movs	r1, r4
    7abe:	2005      	movs	r0, #5
    7ac0:	4e15      	ldr	r6, [pc, #84]	; (7b18 <LoRaMacCryptoHandleJoinAccept+0x21c>)
    7ac2:	47b0      	blx	r6
    7ac4:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7ac6:	d000      	beq.n	7aca <LoRaMacCryptoHandleJoinAccept+0x1ce>
    7ac8:	e757      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    7aca:	4643      	mov	r3, r8
    7acc:	002a      	movs	r2, r5
    7ace:	0021      	movs	r1, r4
    7ad0:	2006      	movs	r0, #6
    7ad2:	4e11      	ldr	r6, [pc, #68]	; (7b18 <LoRaMacCryptoHandleJoinAccept+0x21c>)
    7ad4:	47b0      	blx	r6
    7ad6:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7ad8:	d000      	beq.n	7adc <LoRaMacCryptoHandleJoinAccept+0x1e0>
    7ada:	e74e      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    7adc:	4643      	mov	r3, r8
    7ade:	002a      	movs	r2, r5
    7ae0:	0021      	movs	r1, r4
    7ae2:	2007      	movs	r0, #7
    7ae4:	4c0c      	ldr	r4, [pc, #48]	; (7b18 <LoRaMacCryptoHandleJoinAccept+0x21c>)
    7ae6:	47a0      	blx	r4
    7ae8:	1e03      	subs	r3, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7aea:	d096      	beq.n	7a1a <LoRaMacCryptoHandleJoinAccept+0x11e>
    7aec:	e745      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
        return LORAMAC_CRYPTO_ERROR_NPE;
    7aee:	2307      	movs	r3, #7
    7af0:	e743      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
    7af2:	2307      	movs	r3, #7
    7af4:	e741      	b.n	797a <LoRaMacCryptoHandleJoinAccept+0x7e>
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	200014f4 	.word	0x200014f4
    7afc:	00001ec7 	.word	0x00001ec7
    7b00:	0000bcd5 	.word	0x0000bcd5
    7b04:	00001e91 	.word	0x00001e91
    7b08:	00008095 	.word	0x00008095
    7b0c:	0000bca5 	.word	0x0000bca5
    7b10:	000071d5 	.word	0x000071d5
    7b14:	00001eab 	.word	0x00001eab
    7b18:	00007115 	.word	0x00007115

00007b1c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    7b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b1e:	46c6      	mov	lr, r8
    7b20:	b500      	push	{lr}
    7b22:	b08a      	sub	sp, #40	; 0x28
    7b24:	0007      	movs	r7, r0
    7b26:	9107      	str	r1, [sp, #28]
    7b28:	0016      	movs	r6, r2
    7b2a:	1e1c      	subs	r4, r3, #0
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
    7b2c:	d100      	bne.n	7b30 <LoRaMacCryptoSecureMessage+0x14>
    7b2e:	e090      	b.n	7c52 <LoRaMacCryptoSecureMessage+0x136>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
    7b30:	4b49      	ldr	r3, [pc, #292]	; (7c58 <LoRaMacCryptoSecureMessage+0x13c>)
    7b32:	689b      	ldr	r3, [r3, #8]
    7b34:	689b      	ldr	r3, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    7b36:	2005      	movs	r0, #5
    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
    7b38:	42bb      	cmp	r3, r7
    7b3a:	d903      	bls.n	7b44 <LoRaMacCryptoSecureMessage+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
    7b3c:	b00a      	add	sp, #40	; 0x28
    7b3e:	bc04      	pop	{r2}
    7b40:	4690      	mov	r8, r2
    7b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( macMsg->FPort == 0 )
    7b44:	2220      	movs	r2, #32
    7b46:	5ca2      	ldrb	r2, [r4, r2]
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    7b48:	1e51      	subs	r1, r2, #1
    7b4a:	418a      	sbcs	r2, r1
    7b4c:	3206      	adds	r2, #6
    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
    7b4e:	42bb      	cmp	r3, r7
    7b50:	d20e      	bcs.n	7b70 <LoRaMacCryptoSecureMessage+0x54>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
    7b52:	2328      	movs	r3, #40	; 0x28
    7b54:	5ce1      	ldrb	r1, [r4, r3]
    7b56:	9701      	str	r7, [sp, #4]
    7b58:	2300      	movs	r3, #0
    7b5a:	9300      	str	r3, [sp, #0]
    7b5c:	68a3      	ldr	r3, [r4, #8]
    7b5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b60:	4d3e      	ldr	r5, [pc, #248]	; (7c5c <LoRaMacCryptoSecureMessage+0x140>)
    7b62:	47a8      	blx	r5
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7b64:	2800      	cmp	r0, #0
    7b66:	d1e9      	bne.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    7b68:	4b3b      	ldr	r3, [pc, #236]	; (7c58 <LoRaMacCryptoSecureMessage+0x13c>)
    7b6a:	789b      	ldrb	r3, [r3, #2]
    7b6c:	2b01      	cmp	r3, #1
    7b6e:	d02b      	beq.n	7bc8 <LoRaMacCryptoSecureMessage+0xac>
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
    7b70:	4b39      	ldr	r3, [pc, #228]	; (7c58 <LoRaMacCryptoSecureMessage+0x13c>)
    7b72:	689a      	ldr	r2, [r3, #8]
    7b74:	6097      	str	r7, [r2, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    7b76:	68db      	ldr	r3, [r3, #12]
    7b78:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7b7a:	0020      	movs	r0, r4
    7b7c:	4b38      	ldr	r3, [pc, #224]	; (7c60 <LoRaMacCryptoSecureMessage+0x144>)
    7b7e:	4798      	blx	r3
    7b80:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    7b82:	200e      	movs	r0, #14
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7b84:	2b00      	cmp	r3, #0
    7b86:	d1d9      	bne.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    7b88:	4b33      	ldr	r3, [pc, #204]	; (7c58 <LoRaMacCryptoSecureMessage+0x13c>)
    7b8a:	789b      	ldrb	r3, [r3, #2]
    7b8c:	2b01      	cmp	r3, #1
    7b8e:	d02a      	beq.n	7be6 <LoRaMacCryptoSecureMessage+0xca>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
    7b90:	7921      	ldrb	r1, [r4, #4]
    7b92:	3904      	subs	r1, #4
    7b94:	b289      	uxth	r1, r1
    7b96:	0023      	movs	r3, r4
    7b98:	332c      	adds	r3, #44	; 0x2c
    7b9a:	9303      	str	r3, [sp, #12]
    7b9c:	89e3      	ldrh	r3, [r4, #14]
    7b9e:	9302      	str	r3, [sp, #8]
    7ba0:	68a3      	ldr	r3, [r4, #8]
    7ba2:	9301      	str	r3, [sp, #4]
    7ba4:	2300      	movs	r3, #0
    7ba6:	9300      	str	r3, [sp, #0]
    7ba8:	2206      	movs	r2, #6
    7baa:	6820      	ldr	r0, [r4, #0]
    7bac:	4d2d      	ldr	r5, [pc, #180]	; (7c64 <LoRaMacCryptoSecureMessage+0x148>)
    7bae:	47a8      	blx	r5
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7bb0:	2800      	cmp	r0, #0
    7bb2:	d1c3      	bne.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    7bb4:	0020      	movs	r0, r4
    7bb6:	4b2a      	ldr	r3, [pc, #168]	; (7c60 <LoRaMacCryptoSecureMessage+0x144>)
    7bb8:	4798      	blx	r3
    7bba:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    7bbc:	200e      	movs	r0, #14
    return LORAMAC_CRYPTO_SUCCESS;
    7bbe:	1e5a      	subs	r2, r3, #1
    7bc0:	4193      	sbcs	r3, r2
    7bc2:	425b      	negs	r3, r3
    7bc4:	4018      	ands	r0, r3
    7bc6:	e7b9      	b.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
    7bc8:	7b20      	ldrb	r0, [r4, #12]
    7bca:	0700      	lsls	r0, r0, #28
    7bcc:	0f00      	lsrs	r0, r0, #28
    7bce:	0023      	movs	r3, r4
    7bd0:	3310      	adds	r3, #16
    7bd2:	9301      	str	r3, [sp, #4]
    7bd4:	9700      	str	r7, [sp, #0]
    7bd6:	2300      	movs	r3, #0
    7bd8:	2200      	movs	r2, #0
    7bda:	68a1      	ldr	r1, [r4, #8]
    7bdc:	4d22      	ldr	r5, [pc, #136]	; (7c68 <LoRaMacCryptoSecureMessage+0x14c>)
    7bde:	47a8      	blx	r5
            if( retval != LORAMAC_CRYPTO_SUCCESS )
    7be0:	2800      	cmp	r0, #0
    7be2:	d0c5      	beq.n	7b70 <LoRaMacCryptoSecureMessage+0x54>
    7be4:	e7aa      	b.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
        uint32_t cmacS = 0;
    7be6:	2300      	movs	r3, #0
    7be8:	9308      	str	r3, [sp, #32]
        uint32_t cmacF = 0;
    7bea:	9309      	str	r3, [sp, #36]	; 0x24
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
    7bec:	7b23      	ldrb	r3, [r4, #12]
    7bee:	069b      	lsls	r3, r3, #26
    7bf0:	0fdb      	lsrs	r3, r3, #31
    7bf2:	7921      	ldrb	r1, [r4, #4]
    7bf4:	3904      	subs	r1, #4
    7bf6:	b289      	uxth	r1, r1
    7bf8:	aa08      	add	r2, sp, #32
    7bfa:	9204      	str	r2, [sp, #16]
    7bfc:	89e2      	ldrh	r2, [r4, #14]
    7bfe:	9203      	str	r2, [sp, #12]
    7c00:	68a2      	ldr	r2, [r4, #8]
    7c02:	9202      	str	r2, [sp, #8]
    7c04:	9601      	str	r6, [sp, #4]
    7c06:	9a07      	ldr	r2, [sp, #28]
    7c08:	9200      	str	r2, [sp, #0]
    7c0a:	2205      	movs	r2, #5
    7c0c:	6820      	ldr	r0, [r4, #0]
    7c0e:	4d17      	ldr	r5, [pc, #92]	; (7c6c <LoRaMacCryptoSecureMessage+0x150>)
    7c10:	47a8      	blx	r5
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7c12:	2800      	cmp	r0, #0
    7c14:	d000      	beq.n	7c18 <LoRaMacCryptoSecureMessage+0xfc>
    7c16:	e791      	b.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
    7c18:	7b23      	ldrb	r3, [r4, #12]
    7c1a:	069b      	lsls	r3, r3, #26
    7c1c:	0fdb      	lsrs	r3, r3, #31
    7c1e:	7921      	ldrb	r1, [r4, #4]
    7c20:	3904      	subs	r1, #4
    7c22:	b289      	uxth	r1, r1
    7c24:	aa09      	add	r2, sp, #36	; 0x24
    7c26:	9203      	str	r2, [sp, #12]
    7c28:	89e2      	ldrh	r2, [r4, #14]
    7c2a:	9202      	str	r2, [sp, #8]
    7c2c:	68a2      	ldr	r2, [r4, #8]
    7c2e:	9201      	str	r2, [sp, #4]
    7c30:	2200      	movs	r2, #0
    7c32:	9200      	str	r2, [sp, #0]
    7c34:	3204      	adds	r2, #4
    7c36:	6820      	ldr	r0, [r4, #0]
    7c38:	4d0a      	ldr	r5, [pc, #40]	; (7c64 <LoRaMacCryptoSecureMessage+0x148>)
    7c3a:	47a8      	blx	r5
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d000      	beq.n	7c42 <LoRaMacCryptoSecureMessage+0x126>
    7c40:	e77c      	b.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
    7c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c44:	041b      	lsls	r3, r3, #16
    7c46:	9a08      	ldr	r2, [sp, #32]
    7c48:	0412      	lsls	r2, r2, #16
    7c4a:	0c12      	lsrs	r2, r2, #16
    7c4c:	4313      	orrs	r3, r2
    7c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7c50:	e7b0      	b.n	7bb4 <LoRaMacCryptoSecureMessage+0x98>
        return LORAMAC_CRYPTO_ERROR_NPE;
    7c52:	2007      	movs	r0, #7
    7c54:	e772      	b.n	7b3c <LoRaMacCryptoSecureMessage+0x20>
    7c56:	46c0      	nop			; (mov r8, r8)
    7c58:	200014f4 	.word	0x200014f4
    7c5c:	00007441 	.word	0x00007441
    7c60:	00008351 	.word	0x00008351
    7c64:	00007355 	.word	0x00007355
    7c68:	00007541 	.word	0x00007541
    7c6c:	0000726d 	.word	0x0000726d

00007c70 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
    7c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c72:	46c6      	mov	lr, r8
    7c74:	b500      	push	{lr}
    7c76:	b086      	sub	sp, #24
    7c78:	0005      	movs	r5, r0
    7c7a:	9104      	str	r1, [sp, #16]
    7c7c:	0016      	movs	r6, r2
    7c7e:	001c      	movs	r4, r3
    if( macMsg == 0 )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    7c80:	2707      	movs	r7, #7
    if( macMsg == 0 )
    7c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c84:	2b00      	cmp	r3, #0
    7c86:	d014      	beq.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
    switch( fCntID )
    7c88:	2a07      	cmp	r2, #7
    7c8a:	d835      	bhi.n	7cf8 <LoRaMacCryptoUnsecureMessage+0x88>
    7c8c:	0093      	lsls	r3, r2, #2
    7c8e:	4a64      	ldr	r2, [pc, #400]	; (7e20 <LoRaMacCryptoUnsecureMessage+0x1b0>)
    7c90:	58d3      	ldr	r3, [r2, r3]
    7c92:	469f      	mov	pc, r3
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
    7c94:	4b63      	ldr	r3, [pc, #396]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7c96:	689a      	ldr	r2, [r3, #8]
    7c98:	68d3      	ldr	r3, [r2, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
    7c9a:	0011      	movs	r1, r2
    7c9c:	310c      	adds	r1, #12
    7c9e:	62d1      	str	r1, [r2, #44]	; 0x2c
    if( ( currentDown > lastDown ) ||
    7ca0:	429c      	cmp	r4, r3
    7ca2:	d82b      	bhi.n	7cfc <LoRaMacCryptoUnsecureMessage+0x8c>
    7ca4:	3301      	adds	r3, #1
    7ca6:	425a      	negs	r2, r3
    7ca8:	4153      	adcs	r3, r2
    7caa:	b2db      	uxtb	r3, r3
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    7cac:	2705      	movs	r7, #5
    if( CheckFCntDown( fCntID, fCntDown ) == false )
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d124      	bne.n	7cfc <LoRaMacCryptoUnsecureMessage+0x8c>
    }

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
    7cb2:	0038      	movs	r0, r7
    7cb4:	b006      	add	sp, #24
    7cb6:	bc04      	pop	{r2}
    7cb8:	4690      	mov	r8, r2
    7cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
    7cbc:	4b59      	ldr	r3, [pc, #356]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7cbe:	689a      	ldr	r2, [r3, #8]
    7cc0:	6913      	ldr	r3, [r2, #16]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
    7cc2:	0011      	movs	r1, r2
    7cc4:	3110      	adds	r1, #16
    7cc6:	62d1      	str	r1, [r2, #44]	; 0x2c
    7cc8:	e7ea      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            lastDown = CryptoCtx.NvmCtx->FCntDown;
    7cca:	4b56      	ldr	r3, [pc, #344]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7ccc:	689a      	ldr	r2, [r3, #8]
    7cce:	6953      	ldr	r3, [r2, #20]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    7cd0:	0011      	movs	r1, r2
    7cd2:	3114      	adds	r1, #20
    7cd4:	62d1      	str	r1, [r2, #44]	; 0x2c
    7cd6:	e7e3      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
    7cd8:	4b52      	ldr	r3, [pc, #328]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7cda:	689b      	ldr	r3, [r3, #8]
    7cdc:	699b      	ldr	r3, [r3, #24]
    7cde:	e7df      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
    7ce0:	4b50      	ldr	r3, [pc, #320]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7ce2:	689b      	ldr	r3, [r3, #8]
    7ce4:	69db      	ldr	r3, [r3, #28]
    7ce6:	e7db      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
    7ce8:	4b4e      	ldr	r3, [pc, #312]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7cea:	689b      	ldr	r3, [r3, #8]
    7cec:	6a1b      	ldr	r3, [r3, #32]
    7cee:	e7d7      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
    7cf0:	4b4c      	ldr	r3, [pc, #304]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7cf2:	689b      	ldr	r3, [r3, #8]
    7cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7cf6:	e7d3      	b.n	7ca0 <LoRaMacCryptoUnsecureMessage+0x30>
            return false;
    7cf8:	2300      	movs	r3, #0
    7cfa:	e7d7      	b.n	7cac <LoRaMacCryptoUnsecureMessage+0x3c>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
    7cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
    7cfe:	4b4a      	ldr	r3, [pc, #296]	; (7e28 <LoRaMacCryptoUnsecureMessage+0x1b8>)
    7d00:	4798      	blx	r3
        return LORAMAC_CRYPTO_ERROR_PARSER;
    7d02:	270d      	movs	r7, #13
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
    7d04:	2800      	cmp	r0, #0
    7d06:	d1d4      	bne.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
        if( KeyAddrList[i].AddrID == addrID )
    7d08:	4b48      	ldr	r3, [pc, #288]	; (7e2c <LoRaMacCryptoUnsecureMessage+0x1bc>)
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	42ab      	cmp	r3, r5
    7d0e:	d00b      	beq.n	7d28 <LoRaMacCryptoUnsecureMessage+0xb8>
    7d10:	2301      	movs	r3, #1
    7d12:	4846      	ldr	r0, [pc, #280]	; (7e2c <LoRaMacCryptoUnsecureMessage+0x1bc>)
    7d14:	0019      	movs	r1, r3
    7d16:	009a      	lsls	r2, r3, #2
    7d18:	5c12      	ldrb	r2, [r2, r0]
    7d1a:	42aa      	cmp	r2, r5
    7d1c:	d005      	beq.n	7d2a <LoRaMacCryptoUnsecureMessage+0xba>
    7d1e:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
    7d20:	2b05      	cmp	r3, #5
    7d22:	d1f7      	bne.n	7d14 <LoRaMacCryptoUnsecureMessage+0xa4>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
    7d24:	2709      	movs	r7, #9
    7d26:	e7c4      	b.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
        if( KeyAddrList[i].AddrID == addrID )
    7d28:	2100      	movs	r1, #0
    if( address != macMsg->FHDR.DevAddr )
    7d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d2c:	689d      	ldr	r5, [r3, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    7d2e:	2702      	movs	r7, #2
    if( address != macMsg->FHDR.DevAddr )
    7d30:	9b04      	ldr	r3, [sp, #16]
    7d32:	429d      	cmp	r5, r3
    7d34:	d1bd      	bne.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
    7d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d38:	7b1b      	ldrb	r3, [r3, #12]
    7d3a:	069b      	lsls	r3, r3, #26
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
    7d3c:	4a39      	ldr	r2, [pc, #228]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7d3e:	7892      	ldrb	r2, [r2, #2]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
    7d40:	0fdb      	lsrs	r3, r3, #31
        isAck = false;
    7d42:	1e50      	subs	r0, r2, #1
    7d44:	4182      	sbcs	r2, r0
    7d46:	4252      	negs	r2, r2
    7d48:	4013      	ands	r3, r2
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
    7d4a:	0089      	lsls	r1, r1, #2
    7d4c:	4a37      	ldr	r2, [pc, #220]	; (7e2c <LoRaMacCryptoUnsecureMessage+0x1bc>)
    7d4e:	1851      	adds	r1, r2, r1
    7d50:	784a      	ldrb	r2, [r1, #1]
    7d52:	4690      	mov	r8, r2
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
    7d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d56:	7911      	ldrb	r1, [r2, #4]
    7d58:	3904      	subs	r1, #4
    7d5a:	b289      	uxth	r1, r1
    7d5c:	6812      	ldr	r2, [r2, #0]
    7d5e:	9204      	str	r2, [sp, #16]
    7d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    7d64:	9205      	str	r2, [sp, #20]
    7d66:	9203      	str	r2, [sp, #12]
    7d68:	9402      	str	r4, [sp, #8]
    7d6a:	9501      	str	r5, [sp, #4]
    7d6c:	2201      	movs	r2, #1
    7d6e:	9200      	str	r2, [sp, #0]
    7d70:	3204      	adds	r2, #4
    7d72:	9804      	ldr	r0, [sp, #16]
    7d74:	4f2e      	ldr	r7, [pc, #184]	; (7e30 <LoRaMacCryptoUnsecureMessage+0x1c0>)
    7d76:	47b8      	blx	r7
    7d78:	1e07      	subs	r7, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    7d7a:	d19a      	bne.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
    if( macMsg->FPort == 0 )
    7d7c:	2320      	movs	r3, #32
    7d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d80:	5cd3      	ldrb	r3, [r2, r3]
    7d82:	2b00      	cmp	r3, #0
    7d84:	d101      	bne.n	7d8a <LoRaMacCryptoUnsecureMessage+0x11a>
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    7d86:	3306      	adds	r3, #6
    7d88:	4698      	mov	r8, r3
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
    7d8a:	2328      	movs	r3, #40	; 0x28
    7d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d8e:	5cd1      	ldrb	r1, [r2, r3]
    7d90:	9401      	str	r4, [sp, #4]
    7d92:	3b27      	subs	r3, #39	; 0x27
    7d94:	9300      	str	r3, [sp, #0]
    7d96:	002b      	movs	r3, r5
    7d98:	4642      	mov	r2, r8
    7d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    7d9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7d9e:	4f25      	ldr	r7, [pc, #148]	; (7e34 <LoRaMacCryptoUnsecureMessage+0x1c4>)
    7da0:	47b8      	blx	r7
    7da2:	1e07      	subs	r7, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    7da4:	d000      	beq.n	7da8 <LoRaMacCryptoUnsecureMessage+0x138>
    7da6:	e784      	b.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    7da8:	4b1e      	ldr	r3, [pc, #120]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7daa:	789b      	ldrb	r3, [r3, #2]
    7dac:	2b01      	cmp	r3, #1
    7dae:	d008      	beq.n	7dc2 <LoRaMacCryptoUnsecureMessage+0x152>
    switch( fCntID )
    7db0:	1e73      	subs	r3, r6, #1
    7db2:	b2da      	uxtb	r2, r3
    7db4:	2a06      	cmp	r2, #6
    7db6:	d817      	bhi.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
    7db8:	b2db      	uxtb	r3, r3
    7dba:	009b      	lsls	r3, r3, #2
    7dbc:	4a1e      	ldr	r2, [pc, #120]	; (7e38 <LoRaMacCryptoUnsecureMessage+0x1c8>)
    7dbe:	58d3      	ldr	r3, [r2, r3]
    7dc0:	469f      	mov	pc, r3
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
    7dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7dc4:	7b18      	ldrb	r0, [r3, #12]
    7dc6:	0700      	lsls	r0, r0, #28
    7dc8:	0f00      	lsrs	r0, r0, #28
    7dca:	3310      	adds	r3, #16
    7dcc:	9301      	str	r3, [sp, #4]
    7dce:	9400      	str	r4, [sp, #0]
    7dd0:	0033      	movs	r3, r6
    7dd2:	2201      	movs	r2, #1
    7dd4:	0029      	movs	r1, r5
    7dd6:	4d19      	ldr	r5, [pc, #100]	; (7e3c <LoRaMacCryptoUnsecureMessage+0x1cc>)
    7dd8:	47a8      	blx	r5
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    7dda:	2800      	cmp	r0, #0
    7ddc:	d0e8      	beq.n	7db0 <LoRaMacCryptoUnsecureMessage+0x140>
            return retval;
    7dde:	0007      	movs	r7, r0
    7de0:	e767      	b.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
    7de2:	4b10      	ldr	r3, [pc, #64]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7de4:	689b      	ldr	r3, [r3, #8]
    7de6:	60dc      	str	r4, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    7de8:	4b0e      	ldr	r3, [pc, #56]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7dea:	68db      	ldr	r3, [r3, #12]
    7dec:	4798      	blx	r3
    7dee:	e760      	b.n	7cb2 <LoRaMacCryptoUnsecureMessage+0x42>
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
    7df0:	4b0c      	ldr	r3, [pc, #48]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7df2:	689b      	ldr	r3, [r3, #8]
    7df4:	611c      	str	r4, [r3, #16]
    7df6:	e7f7      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
            CryptoCtx.NvmCtx->FCntDown = currentDown;
    7df8:	4b0a      	ldr	r3, [pc, #40]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7dfa:	689b      	ldr	r3, [r3, #8]
    7dfc:	615c      	str	r4, [r3, #20]
    7dfe:	e7f3      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
    7e00:	4b08      	ldr	r3, [pc, #32]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7e02:	689b      	ldr	r3, [r3, #8]
    7e04:	619c      	str	r4, [r3, #24]
    7e06:	e7ef      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
    7e08:	4b06      	ldr	r3, [pc, #24]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7e0a:	689b      	ldr	r3, [r3, #8]
    7e0c:	61dc      	str	r4, [r3, #28]
    7e0e:	e7eb      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
    7e10:	4b04      	ldr	r3, [pc, #16]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7e12:	689b      	ldr	r3, [r3, #8]
    7e14:	621c      	str	r4, [r3, #32]
    7e16:	e7e7      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
    7e18:	4b02      	ldr	r3, [pc, #8]	; (7e24 <LoRaMacCryptoUnsecureMessage+0x1b4>)
    7e1a:	689b      	ldr	r3, [r3, #8]
    7e1c:	625c      	str	r4, [r3, #36]	; 0x24
    7e1e:	e7e3      	b.n	7de8 <LoRaMacCryptoUnsecureMessage+0x178>
    7e20:	000143d4 	.word	0x000143d4
    7e24:	200014f4 	.word	0x200014f4
    7e28:	00008135 	.word	0x00008135
    7e2c:	2000010c 	.word	0x2000010c
    7e30:	000075d5 	.word	0x000075d5
    7e34:	00007441 	.word	0x00007441
    7e38:	000143f4 	.word	0x000143f4
    7e3c:	00007541 	.word	0x00007541

00007e40 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
    7e40:	b510      	push	{r4, lr}
    if( FCntHandlerNvmCtxChanged != NULL )
    7e42:	4b03      	ldr	r3, [pc, #12]	; (7e50 <NvmCtxChanged+0x10>)
    7e44:	681b      	ldr	r3, [r3, #0]
    7e46:	2b00      	cmp	r3, #0
    7e48:	d000      	beq.n	7e4c <NvmCtxChanged+0xc>
    {
        FCntHandlerNvmCtxChanged( );
    7e4a:	4798      	blx	r3
    }
}
    7e4c:	bd10      	pop	{r4, pc}
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	20001534 	.word	0x20001534

00007e54 <LoRaMacFCntHandlerRestoreNvmCtx>:

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
    7e54:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
        return LORAMAC_FCNT_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    7e56:	2304      	movs	r3, #4
    if( fCntHandlerNvmCtx != NULL )
    7e58:	2800      	cmp	r0, #0
    7e5a:	d006      	beq.n	7e6a <LoRaMacFCntHandlerRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
    7e5c:	2224      	movs	r2, #36	; 0x24
    7e5e:	0001      	movs	r1, r0
    7e60:	4803      	ldr	r0, [pc, #12]	; (7e70 <LoRaMacFCntHandlerRestoreNvmCtx+0x1c>)
    7e62:	3004      	adds	r0, #4
    7e64:	4b03      	ldr	r3, [pc, #12]	; (7e74 <LoRaMacFCntHandlerRestoreNvmCtx+0x20>)
    7e66:	4798      	blx	r3
        return LORAMAC_FCNT_HANDLER_SUCCESS;
    7e68:	2300      	movs	r3, #0
    }
}
    7e6a:	0018      	movs	r0, r3
    7e6c:	bd10      	pop	{r4, pc}
    7e6e:	46c0      	nop			; (mov r8, r8)
    7e70:	20001534 	.word	0x20001534
    7e74:	00001e91 	.word	0x00001e91

00007e78 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
    7e78:	2324      	movs	r3, #36	; 0x24
    7e7a:	6003      	str	r3, [r0, #0]
    return &FCntHandlerNvmCtx;
    7e7c:	4801      	ldr	r0, [pc, #4]	; (7e84 <LoRaMacFCntHandlerGetNvmCtx+0xc>)
}
    7e7e:	3004      	adds	r0, #4
    7e80:	4770      	bx	lr
    7e82:	46c0      	nop			; (mov r8, r8)
    7e84:	20001534 	.word	0x20001534

00007e88 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
    7e88:	b530      	push	{r4, r5, lr}
    7e8a:	ac03      	add	r4, sp, #12
    7e8c:	8824      	ldrh	r4, [r4, #0]
    uint32_t previousDown = 0;
    int32_t fCntDiff = 0;

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
    7e8e:	2a00      	cmp	r2, #0
    7e90:	d067      	beq.n	7f62 <LoRaMacGetFCntDown+0xda>
    7e92:	9d04      	ldr	r5, [sp, #16]
    7e94:	2d00      	cmp	r5, #0
    7e96:	d066      	beq.n	7f66 <LoRaMacGetFCntDown+0xde>
    7e98:	9d05      	ldr	r5, [sp, #20]
    7e9a:	2d00      	cmp	r5, #0
    7e9c:	d065      	beq.n	7f6a <LoRaMacGetFCntDown+0xe2>
    7e9e:	021b      	lsls	r3, r3, #8
    7ea0:	0e1b      	lsrs	r3, r3, #24
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
    7ea2:	2804      	cmp	r0, #4
    7ea4:	d863      	bhi.n	7f6e <LoRaMacGetFCntDown+0xe6>
    7ea6:	0080      	lsls	r0, r0, #2
    7ea8:	4d32      	ldr	r5, [pc, #200]	; (7f74 <LoRaMacGetFCntDown+0xec>)
    7eaa:	5828      	ldr	r0, [r5, r0]
    7eac:	4687      	mov	pc, r0
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
    7eae:	2b01      	cmp	r3, #1
    7eb0:	d005      	beq.n	7ebe <LoRaMacGetFCntDown+0x36>
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
                }
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
    7eb2:	2103      	movs	r1, #3
    7eb4:	9804      	ldr	r0, [sp, #16]
    7eb6:	7001      	strb	r1, [r0, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
    7eb8:	492f      	ldr	r1, [pc, #188]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7eba:	690d      	ldr	r5, [r1, #16]
    7ebc:	e014      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
    7ebe:	2900      	cmp	r1, #0
    7ec0:	d007      	beq.n	7ed2 <LoRaMacGetFCntDown+0x4a>
    7ec2:	2903      	cmp	r1, #3
    7ec4:	d005      	beq.n	7ed2 <LoRaMacGetFCntDown+0x4a>
                    *fCntID = N_FCNT_DOWN;
    7ec6:	2101      	movs	r1, #1
    7ec8:	9804      	ldr	r0, [sp, #16]
    7eca:	7001      	strb	r1, [r0, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
    7ecc:	492a      	ldr	r1, [pc, #168]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7ece:	688d      	ldr	r5, [r1, #8]
    7ed0:	e00a      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
                    *fCntID = A_FCNT_DOWN;
    7ed2:	2102      	movs	r1, #2
    7ed4:	9804      	ldr	r0, [sp, #16]
    7ed6:	7001      	strb	r1, [r0, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
    7ed8:	4927      	ldr	r1, [pc, #156]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7eda:	68cd      	ldr	r5, [r1, #12]
    7edc:	e004      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
            }
            break;
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
    7ede:	2104      	movs	r1, #4
    7ee0:	9804      	ldr	r0, [sp, #16]
    7ee2:	7001      	strb	r1, [r0, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
    7ee4:	4924      	ldr	r1, [pc, #144]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7ee6:	694d      	ldr	r5, [r1, #20]
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
    7ee8:	1c69      	adds	r1, r5, #1
    7eea:	d026      	beq.n	7f3a <LoRaMacGetFCntDown+0xb2>
         *currentDown = macMsg->FHDR.FCnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
    7eec:	89d1      	ldrh	r1, [r2, #14]
    7eee:	042a      	lsls	r2, r5, #16
    7ef0:	0c12      	lsrs	r2, r2, #16
    7ef2:	1a8a      	subs	r2, r1, r2

        if( fCntDiff > 0 )
    7ef4:	2a00      	cmp	r2, #0
    7ef6:	dd24      	ble.n	7f42 <LoRaMacGetFCntDown+0xba>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
    7ef8:	1952      	adds	r2, r2, r5
    7efa:	9905      	ldr	r1, [sp, #20]
    7efc:	600a      	str	r2, [r1, #0]
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    7efe:	2000      	movs	r0, #0
    if( lrWanVersion.Fields.Minor == 0 )
    7f00:	2b00      	cmp	r3, #0
    7f02:	d12f      	bne.n	7f64 <LoRaMacGetFCntDown+0xdc>
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
    7f04:	9b05      	ldr	r3, [sp, #20]
    7f06:	681b      	ldr	r3, [r3, #0]
    7f08:	1b5d      	subs	r5, r3, r5
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
    7f0a:	17e8      	asrs	r0, r5, #31
    7f0c:	0fe3      	lsrs	r3, r4, #31
    7f0e:	42a5      	cmp	r5, r4
    7f10:	4158      	adcs	r0, r3
    7f12:	0040      	lsls	r0, r0, #1
    7f14:	e026      	b.n	7f64 <LoRaMacGetFCntDown+0xdc>
            *fCntID = MC_FCNT_DOWN_1;
    7f16:	2105      	movs	r1, #5
    7f18:	9804      	ldr	r0, [sp, #16]
    7f1a:	7001      	strb	r1, [r0, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
    7f1c:	4916      	ldr	r1, [pc, #88]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7f1e:	698d      	ldr	r5, [r1, #24]
            break;
    7f20:	e7e2      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
            *fCntID = MC_FCNT_DOWN_2;
    7f22:	2106      	movs	r1, #6
    7f24:	9804      	ldr	r0, [sp, #16]
    7f26:	7001      	strb	r1, [r0, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    7f28:	4913      	ldr	r1, [pc, #76]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7f2a:	6a0d      	ldr	r5, [r1, #32]
            break;
    7f2c:	e7dc      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
            *fCntID = MC_FCNT_DOWN_3;
    7f2e:	2107      	movs	r1, #7
    7f30:	9804      	ldr	r0, [sp, #16]
    7f32:	7001      	strb	r1, [r0, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    7f34:	4910      	ldr	r1, [pc, #64]	; (7f78 <LoRaMacGetFCntDown+0xf0>)
    7f36:	6a0d      	ldr	r5, [r1, #32]
            break;
    7f38:	e7d6      	b.n	7ee8 <LoRaMacGetFCntDown+0x60>
         *currentDown = macMsg->FHDR.FCnt;
    7f3a:	89d2      	ldrh	r2, [r2, #14]
    7f3c:	9905      	ldr	r1, [sp, #20]
    7f3e:	600a      	str	r2, [r1, #0]
    7f40:	e7dd      	b.n	7efe <LoRaMacGetFCntDown+0x76>
        else if( fCntDiff == 0 )
    7f42:	2a00      	cmp	r2, #0
    7f44:	d009      	beq.n	7f5a <LoRaMacGetFCntDown+0xd2>
            *currentDown = previousDown + fCntDiff + ( 0x10000 + ( previousDown & 0xFFFF0000 ) );
    7f46:	0c29      	lsrs	r1, r5, #16
    7f48:	0409      	lsls	r1, r1, #16
    7f4a:	2080      	movs	r0, #128	; 0x80
    7f4c:	0240      	lsls	r0, r0, #9
    7f4e:	1828      	adds	r0, r5, r0
    7f50:	1809      	adds	r1, r1, r0
    7f52:	188a      	adds	r2, r1, r2
    7f54:	9905      	ldr	r1, [sp, #20]
    7f56:	600a      	str	r2, [r1, #0]
    7f58:	e7d1      	b.n	7efe <LoRaMacGetFCntDown+0x76>
            *currentDown = previousDown;
    7f5a:	9b05      	ldr	r3, [sp, #20]
    7f5c:	601d      	str	r5, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
    7f5e:	2001      	movs	r0, #1
    7f60:	e000      	b.n	7f64 <LoRaMacGetFCntDown+0xdc>
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    7f62:	2004      	movs	r0, #4
}
    7f64:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    7f66:	2004      	movs	r0, #4
    7f68:	e7fc      	b.n	7f64 <LoRaMacGetFCntDown+0xdc>
    7f6a:	2004      	movs	r0, #4
    7f6c:	e7fa      	b.n	7f64 <LoRaMacGetFCntDown+0xdc>
            return LORAMAC_FCNT_HANDLER_ERROR;
    7f6e:	2005      	movs	r0, #5
    7f70:	e7f8      	b.n	7f64 <LoRaMacGetFCntDown+0xdc>
    7f72:	46c0      	nop			; (mov r8, r8)
    7f74:	00014410 	.word	0x00014410
    7f78:	20001534 	.word	0x20001534

00007f7c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    7f7c:	b510      	push	{r4, lr}
    switch( fCntID )
    7f7e:	2807      	cmp	r0, #7
    7f80:	d803      	bhi.n	7f8a <LoRaMacSetFCntDown+0xe>
    7f82:	0080      	lsls	r0, r0, #2
    7f84:	4b0f      	ldr	r3, [pc, #60]	; (7fc4 <LoRaMacSetFCntDown+0x48>)
    7f86:	581b      	ldr	r3, [r3, r0]
    7f88:	469f      	mov	pc, r3
            break;
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
            break;
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    7f8a:	2005      	movs	r0, #5
    7f8c:	e004      	b.n	7f98 <LoRaMacSetFCntDown+0x1c>
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
    7f8e:	4b0e      	ldr	r3, [pc, #56]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7f90:	6099      	str	r1, [r3, #8]
    }

    NvmCtxChanged( );
    7f92:	4b0e      	ldr	r3, [pc, #56]	; (7fcc <LoRaMacSetFCntDown+0x50>)
    7f94:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    7f96:	2000      	movs	r0, #0
}
    7f98:	bd10      	pop	{r4, pc}
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
    7f9a:	4b0b      	ldr	r3, [pc, #44]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7f9c:	60d9      	str	r1, [r3, #12]
            break;
    7f9e:	e7f8      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
    7fa0:	4b09      	ldr	r3, [pc, #36]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7fa2:	6119      	str	r1, [r3, #16]
            break;
    7fa4:	e7f5      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
    7fa6:	4b08      	ldr	r3, [pc, #32]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7fa8:	6159      	str	r1, [r3, #20]
            break;
    7faa:	e7f2      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
    7fac:	4b06      	ldr	r3, [pc, #24]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7fae:	6199      	str	r1, [r3, #24]
            break;
    7fb0:	e7ef      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
    7fb2:	4b05      	ldr	r3, [pc, #20]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7fb4:	61d9      	str	r1, [r3, #28]
            break;
    7fb6:	e7ec      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
    7fb8:	4b03      	ldr	r3, [pc, #12]	; (7fc8 <LoRaMacSetFCntDown+0x4c>)
    7fba:	6219      	str	r1, [r3, #32]
            break;
    7fbc:	e7e9      	b.n	7f92 <LoRaMacSetFCntDown+0x16>
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
    7fbe:	2003      	movs	r0, #3
    7fc0:	e7ea      	b.n	7f98 <LoRaMacSetFCntDown+0x1c>
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	00014424 	.word	0x00014424
    7fc8:	20001534 	.word	0x20001534
    7fcc:	00007e41 	.word	0x00007e41

00007fd0 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
    7fd0:	2800      	cmp	r0, #0
    7fd2:	d005      	beq.n	7fe0 <LoRaMacGetFCntUp+0x10>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
    7fd4:	4b03      	ldr	r3, [pc, #12]	; (7fe4 <LoRaMacGetFCntUp+0x14>)
    7fd6:	685b      	ldr	r3, [r3, #4]
    7fd8:	3301      	adds	r3, #1
    7fda:	6003      	str	r3, [r0, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    7fdc:	2000      	movs	r0, #0
}
    7fde:	4770      	bx	lr
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    7fe0:	2004      	movs	r0, #4
    7fe2:	e7fc      	b.n	7fde <LoRaMacGetFCntUp+0xe>
    7fe4:	20001534 	.word	0x20001534

00007fe8 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
    7fe8:	b510      	push	{r4, lr}
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
    7fea:	4b03      	ldr	r3, [pc, #12]	; (7ff8 <LoRaMacSetFCntUp+0x10>)
    7fec:	6058      	str	r0, [r3, #4]

    NvmCtxChanged( );
    7fee:	4b03      	ldr	r3, [pc, #12]	; (7ffc <LoRaMacSetFCntUp+0x14>)
    7ff0:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}
    7ff2:	2000      	movs	r0, #0
    7ff4:	bd10      	pop	{r4, pc}
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	20001534 	.word	0x20001534
    7ffc:	00007e41 	.word	0x00007e41

00008000 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
    8000:	b510      	push	{r4, lr}

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
    8002:	4b07      	ldr	r3, [pc, #28]	; (8020 <LoRaMacResetFCnts+0x20>)
    8004:	2200      	movs	r2, #0
    8006:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
    8008:	3a01      	subs	r2, #1
    800a:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
    800c:	60da      	str	r2, [r3, #12]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
    800e:	611a      	str	r2, [r3, #16]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    8010:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    8012:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    8014:	61da      	str	r2, [r3, #28]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    8016:	621a      	str	r2, [r3, #32]

    NvmCtxChanged( );
    8018:	4b02      	ldr	r3, [pc, #8]	; (8024 <LoRaMacResetFCnts+0x24>)
    801a:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
}
    801c:	2000      	movs	r0, #0
    801e:	bd10      	pop	{r4, pc}
    8020:	20001534 	.word	0x20001534
    8024:	00007e41 	.word	0x00007e41

00008028 <LoRaMacFCntHandlerInit>:
{
    8028:	b510      	push	{r4, lr}
    802a:	0004      	movs	r4, r0
    LoRaMacResetFCnts( );
    802c:	4b02      	ldr	r3, [pc, #8]	; (8038 <LoRaMacFCntHandlerInit+0x10>)
    802e:	4798      	blx	r3
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
    8030:	4b02      	ldr	r3, [pc, #8]	; (803c <LoRaMacFCntHandlerInit+0x14>)
    8032:	601c      	str	r4, [r3, #0]
}
    8034:	2000      	movs	r0, #0
    8036:	bd10      	pop	{r4, pc}
    8038:	00008001 	.word	0x00008001
    803c:	20001534 	.word	0x20001534

00008040 <LoRaMacGetRJcount>:

LoRaMacFCntHandlerStatus_t LoRaMacGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
    if( rJcount == 0 )
    8040:	2900      	cmp	r1, #0
    8042:	d011      	beq.n	8068 <LoRaMacGetRJcount+0x28>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    }

    switch( fCntID )
    8044:	2808      	cmp	r0, #8
    8046:	d003      	beq.n	8050 <LoRaMacGetRJcount+0x10>
    8048:	2809      	cmp	r0, #9
    804a:	d007      	beq.n	805c <LoRaMacGetRJcount+0x1c>
        {
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount1 + 1;
            break;
        }
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    804c:	2005      	movs	r0, #5
    804e:	e00c      	b.n	806a <LoRaMacGetRJcount+0x2a>
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount0 + 1;
    8050:	4b06      	ldr	r3, [pc, #24]	; (806c <LoRaMacGetRJcount+0x2c>)
    8052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    8054:	3301      	adds	r3, #1
    8056:	800b      	strh	r3, [r1, #0]
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    8058:	2000      	movs	r0, #0
            break;
    805a:	e006      	b.n	806a <LoRaMacGetRJcount+0x2a>
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount1 + 1;
    805c:	4b03      	ldr	r3, [pc, #12]	; (806c <LoRaMacGetRJcount+0x2c>)
    805e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    8060:	3301      	adds	r3, #1
    8062:	800b      	strh	r3, [r1, #0]
    return LORAMAC_FCNT_HANDLER_SUCCESS;
    8064:	2000      	movs	r0, #0
            break;
    8066:	e000      	b.n	806a <LoRaMacGetRJcount+0x2a>
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    8068:	2004      	movs	r0, #4
}
    806a:	4770      	bx	lr
    806c:	20001534 	.word	0x20001534

00008070 <LoRaMacFCntHandlerSetMulticastReference>:
    return LORAMAC_FCNT_HANDLER_SUCCESS;
}

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
    8070:	2800      	cmp	r0, #0
    8072:	d00b      	beq.n	808c <LoRaMacFCntHandlerSetMulticastReference+0x1c>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
    8074:	4b06      	ldr	r3, [pc, #24]	; (8090 <LoRaMacFCntHandlerSetMulticastReference+0x20>)
    8076:	001a      	movs	r2, r3
    8078:	3214      	adds	r2, #20
    807a:	6082      	str	r2, [r0, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
    807c:	3204      	adds	r2, #4
    807e:	6282      	str	r2, [r0, #40]	; 0x28
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
    8080:	3204      	adds	r2, #4
    8082:	6482      	str	r2, [r0, #72]	; 0x48
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
    8084:	3320      	adds	r3, #32
    8086:	6683      	str	r3, [r0, #104]	; 0x68

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    8088:	2000      	movs	r0, #0
}
    808a:	4770      	bx	lr
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    808c:	2004      	movs	r0, #4
    808e:	e7fc      	b.n	808a <LoRaMacFCntHandlerSetMulticastReference+0x1a>
    8090:	20001534 	.word	0x20001534

00008094 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    8094:	b570      	push	{r4, r5, r6, lr}
    8096:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    8098:	d047      	beq.n	812a <LoRaMacParserJoinAccept+0x96>
    809a:	6801      	ldr	r1, [r0, #0]
    {
        return LORAMAC_PARSER_ERROR_NPE;
    809c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    809e:	2900      	cmp	r1, #0
    80a0:	d044      	beq.n	812c <LoRaMacParserJoinAccept+0x98>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    80a2:	780b      	ldrb	r3, [r1, #0]
    80a4:	7163      	strb	r3, [r4, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
    80a6:	3101      	adds	r1, #1
    80a8:	1da0      	adds	r0, r4, #6
    80aa:	2203      	movs	r2, #3
    80ac:	4d20      	ldr	r5, [pc, #128]	; (8130 <LoRaMacParserJoinAccept+0x9c>)
    80ae:	47a8      	blx	r5
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
    80b0:	6823      	ldr	r3, [r4, #0]
    80b2:	1d19      	adds	r1, r3, #4
    80b4:	2203      	movs	r2, #3
    80b6:	0020      	movs	r0, r4
    80b8:	3009      	adds	r0, #9
    80ba:	47a8      	blx	r5
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
    80bc:	6821      	ldr	r1, [r4, #0]
    80be:	79ca      	ldrb	r2, [r1, #7]
    80c0:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    80c2:	7a0b      	ldrb	r3, [r1, #8]
    80c4:	021b      	lsls	r3, r3, #8
    80c6:	431a      	orrs	r2, r3
    80c8:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    80ca:	7a4b      	ldrb	r3, [r1, #9]
    80cc:	041b      	lsls	r3, r3, #16
    80ce:	4313      	orrs	r3, r2
    80d0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    80d2:	7a8a      	ldrb	r2, [r1, #10]
    80d4:	0612      	lsls	r2, r2, #24
    80d6:	4313      	orrs	r3, r2
    80d8:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
    80da:	7acb      	ldrb	r3, [r1, #11]
    80dc:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
    80de:	7b0b      	ldrb	r3, [r1, #12]
    80e0:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
    80e2:	7923      	ldrb	r3, [r4, #4]
    80e4:	2b21      	cmp	r3, #33	; 0x21
    80e6:	d018      	beq.n	811a <LoRaMacParserJoinAccept+0x86>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    80e8:	3b11      	subs	r3, #17
    {
        return LORAMAC_PARSER_FAIL;
    80ea:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    80ec:	2b00      	cmp	r3, #0
    80ee:	dc1d      	bgt.n	812c <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
    80f0:	220d      	movs	r2, #13
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
    80f2:	6820      	ldr	r0, [r4, #0]
    80f4:	5c81      	ldrb	r1, [r0, r2]
    80f6:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    80f8:	1c53      	adds	r3, r2, #1
    80fa:	5cc3      	ldrb	r3, [r0, r3]
    80fc:	021b      	lsls	r3, r3, #8
    80fe:	4319      	orrs	r1, r3
    8100:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    8102:	1c93      	adds	r3, r2, #2
    8104:	5cc3      	ldrb	r3, [r0, r3]
    8106:	041b      	lsls	r3, r3, #16
    8108:	430b      	orrs	r3, r1
    810a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    810c:	3203      	adds	r2, #3
    810e:	5c82      	ldrb	r2, [r0, r2]
    8110:	0612      	lsls	r2, r2, #24
    8112:	4313      	orrs	r3, r2
    8114:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
    8116:	2000      	movs	r0, #0
    8118:	e008      	b.n	812c <LoRaMacParserJoinAccept+0x98>
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
    811a:	310d      	adds	r1, #13
    811c:	2210      	movs	r2, #16
    811e:	0020      	movs	r0, r4
    8120:	3012      	adds	r0, #18
    8122:	4b03      	ldr	r3, [pc, #12]	; (8130 <LoRaMacParserJoinAccept+0x9c>)
    8124:	4798      	blx	r3
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
    8126:	221d      	movs	r2, #29
    8128:	e7e3      	b.n	80f2 <LoRaMacParserJoinAccept+0x5e>
        return LORAMAC_PARSER_ERROR_NPE;
    812a:	2002      	movs	r0, #2
}
    812c:	bd70      	pop	{r4, r5, r6, pc}
    812e:	46c0      	nop			; (mov r8, r8)
    8130:	00001e91 	.word	0x00001e91

00008134 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    8134:	b570      	push	{r4, r5, r6, lr}
    8136:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    8138:	d058      	beq.n	81ec <LoRaMacParserData+0xb8>
    813a:	6801      	ldr	r1, [r0, #0]
    813c:	2900      	cmp	r1, #0
    813e:	d057      	beq.n	81f0 <LoRaMacParserData+0xbc>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    8140:	780b      	ldrb	r3, [r1, #0]
    8142:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
    8144:	784a      	ldrb	r2, [r1, #1]
    8146:	6082      	str	r2, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    8148:	788b      	ldrb	r3, [r1, #2]
    814a:	021b      	lsls	r3, r3, #8
    814c:	431a      	orrs	r2, r3
    814e:	6082      	str	r2, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    8150:	78cb      	ldrb	r3, [r1, #3]
    8152:	041b      	lsls	r3, r3, #16
    8154:	4313      	orrs	r3, r2
    8156:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    8158:	790a      	ldrb	r2, [r1, #4]
    815a:	0612      	lsls	r2, r2, #24
    815c:	4313      	orrs	r3, r2
    815e:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
    8160:	794b      	ldrb	r3, [r1, #5]
    8162:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    8164:	798b      	ldrb	r3, [r1, #6]
    8166:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
    8168:	79ca      	ldrb	r2, [r1, #7]
    816a:	0212      	lsls	r2, r2, #8
    816c:	4313      	orrs	r3, r2
    816e:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    8170:	7b02      	ldrb	r2, [r0, #12]
    8172:	0712      	lsls	r2, r2, #28
    8174:	0f12      	lsrs	r2, r2, #28
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
    8176:	b292      	uxth	r2, r2
    8178:	3108      	adds	r1, #8
    817a:	3010      	adds	r0, #16
    817c:	4b1d      	ldr	r3, [pc, #116]	; (81f4 <LoRaMacParserData+0xc0>)
    817e:	4798      	blx	r3
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    8180:	7b23      	ldrb	r3, [r4, #12]
    8182:	071b      	lsls	r3, r3, #28
    8184:	0f1b      	lsrs	r3, r3, #28
    8186:	0018      	movs	r0, r3
    8188:	3008      	adds	r0, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
    818a:	2200      	movs	r2, #0
    818c:	2120      	movs	r1, #32
    818e:	5462      	strb	r2, [r4, r1]
    macMsg->FRMPayloadSize = 0;
    8190:	3108      	adds	r1, #8
    8192:	5462      	strb	r2, [r4, r1]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
    8194:	7922      	ldrb	r2, [r4, #4]
    8196:	1a11      	subs	r1, r2, r0
    8198:	3904      	subs	r1, #4
    819a:	2900      	cmp	r1, #0
    819c:	dd0e      	ble.n	81bc <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
    819e:	6821      	ldr	r1, [r4, #0]
    81a0:	3309      	adds	r3, #9
    81a2:	5c0d      	ldrb	r5, [r1, r0]
    81a4:	2020      	movs	r0, #32
    81a6:	5425      	strb	r5, [r4, r0]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
    81a8:	3a04      	subs	r2, #4
    81aa:	1ad2      	subs	r2, r2, r3
    81ac:	b2d2      	uxtb	r2, r2
    81ae:	3008      	adds	r0, #8
    81b0:	5422      	strb	r2, [r4, r0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
    81b2:	b292      	uxth	r2, r2
    81b4:	18c9      	adds	r1, r1, r3
    81b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    81b8:	4b0e      	ldr	r3, [pc, #56]	; (81f4 <LoRaMacParserData+0xc0>)
    81ba:	4798      	blx	r3
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    81bc:	7923      	ldrb	r3, [r4, #4]
    81be:	6822      	ldr	r2, [r4, #0]
    81c0:	4694      	mov	ip, r2
    81c2:	4463      	add	r3, ip
    81c4:	1f1a      	subs	r2, r3, #4
    81c6:	7811      	ldrb	r1, [r2, #0]
    81c8:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    81ca:	1eda      	subs	r2, r3, #3
    81cc:	7812      	ldrb	r2, [r2, #0]
    81ce:	0212      	lsls	r2, r2, #8
    81d0:	4311      	orrs	r1, r2
    81d2:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    81d4:	1e9a      	subs	r2, r3, #2
    81d6:	7812      	ldrb	r2, [r2, #0]
    81d8:	0412      	lsls	r2, r2, #16
    81da:	430a      	orrs	r2, r1
    81dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
    81de:	3b01      	subs	r3, #1
    81e0:	781b      	ldrb	r3, [r3, #0]
    81e2:	061b      	lsls	r3, r3, #24
    81e4:	431a      	orrs	r2, r3
    81e6:	62e2      	str	r2, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
    81e8:	2000      	movs	r0, #0
    81ea:	e000      	b.n	81ee <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    81ec:	2002      	movs	r0, #2
}
    81ee:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_PARSER_ERROR_NPE;
    81f0:	2002      	movs	r0, #2
    81f2:	e7fc      	b.n	81ee <LoRaMacParserData+0xba>
    81f4:	00001e91 	.word	0x00001e91

000081f8 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    81f8:	b570      	push	{r4, r5, r6, lr}
    81fa:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    81fc:	d02d      	beq.n	825a <LoRaMacSerializerJoinRequest+0x62>
    81fe:	6803      	ldr	r3, [r0, #0]
    8200:	2b00      	cmp	r3, #0
    8202:	d02c      	beq.n	825e <LoRaMacSerializerJoinRequest+0x66>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
    8204:	7902      	ldrb	r2, [r0, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    8206:	2002      	movs	r0, #2
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
    8208:	2a16      	cmp	r2, #22
    820a:	d800      	bhi.n	820e <LoRaMacSerializerJoinRequest+0x16>
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
}
    820c:	bd70      	pop	{r4, r5, r6, pc}
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    820e:	7962      	ldrb	r2, [r4, #5]
    8210:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    8212:	1da1      	adds	r1, r4, #6
    8214:	6823      	ldr	r3, [r4, #0]
    8216:	1c58      	adds	r0, r3, #1
    8218:	2208      	movs	r2, #8
    821a:	4d12      	ldr	r5, [pc, #72]	; (8264 <LoRaMacSerializerJoinRequest+0x6c>)
    821c:	47a8      	blx	r5
    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    821e:	0021      	movs	r1, r4
    8220:	310e      	adds	r1, #14
    8222:	6820      	ldr	r0, [r4, #0]
    8224:	3009      	adds	r0, #9
    8226:	2208      	movs	r2, #8
    8228:	47a8      	blx	r5
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
    822a:	8ae3      	ldrh	r3, [r4, #22]
    822c:	6822      	ldr	r2, [r4, #0]
    822e:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
    8230:	8ae3      	ldrh	r3, [r4, #22]
    8232:	0a1b      	lsrs	r3, r3, #8
    8234:	6822      	ldr	r2, [r4, #0]
    8236:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    8238:	6823      	ldr	r3, [r4, #0]
    823a:	7e22      	ldrb	r2, [r4, #24]
    823c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    823e:	69a3      	ldr	r3, [r4, #24]
    8240:	0a1b      	lsrs	r3, r3, #8
    8242:	6822      	ldr	r2, [r4, #0]
    8244:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    8246:	8b63      	ldrh	r3, [r4, #26]
    8248:	6822      	ldr	r2, [r4, #0]
    824a:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    824c:	7ee3      	ldrb	r3, [r4, #27]
    824e:	6822      	ldr	r2, [r4, #0]
    8250:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
    8252:	2317      	movs	r3, #23
    8254:	7123      	strb	r3, [r4, #4]
    return LORAMAC_SERIALIZER_SUCCESS;
    8256:	2000      	movs	r0, #0
    8258:	e7d8      	b.n	820c <LoRaMacSerializerJoinRequest+0x14>
        return LORAMAC_SERIALIZER_ERROR_NPE;
    825a:	2001      	movs	r0, #1
    825c:	e7d6      	b.n	820c <LoRaMacSerializerJoinRequest+0x14>
    825e:	2001      	movs	r0, #1
    8260:	e7d4      	b.n	820c <LoRaMacSerializerJoinRequest+0x14>
    8262:	46c0      	nop			; (mov r8, r8)
    8264:	00001eab 	.word	0x00001eab

00008268 <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    826c:	d030      	beq.n	82d0 <LoRaMacSerializerReJoinType1+0x68>
    826e:	6803      	ldr	r3, [r0, #0]
    8270:	2b00      	cmp	r3, #0
    8272:	d02f      	beq.n	82d4 <LoRaMacSerializerReJoinType1+0x6c>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
    8274:	7902      	ldrb	r2, [r0, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    8276:	2002      	movs	r0, #2
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
    8278:	2a17      	cmp	r2, #23
    827a:	d800      	bhi.n	827e <LoRaMacSerializerReJoinType1+0x16>
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
}
    827c:	bd70      	pop	{r4, r5, r6, pc}
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    827e:	7962      	ldrb	r2, [r4, #5]
    8280:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    8282:	79a3      	ldrb	r3, [r4, #6]
    8284:	6822      	ldr	r2, [r4, #0]
    8286:	7053      	strb	r3, [r2, #1]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    8288:	1de1      	adds	r1, r4, #7
    828a:	6823      	ldr	r3, [r4, #0]
    828c:	1c98      	adds	r0, r3, #2
    828e:	2208      	movs	r2, #8
    8290:	4d11      	ldr	r5, [pc, #68]	; (82d8 <LoRaMacSerializerReJoinType1+0x70>)
    8292:	47a8      	blx	r5
    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    8294:	0021      	movs	r1, r4
    8296:	310f      	adds	r1, #15
    8298:	6820      	ldr	r0, [r4, #0]
    829a:	300a      	adds	r0, #10
    829c:	2208      	movs	r2, #8
    829e:	47a8      	blx	r5
    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
    82a0:	8b23      	ldrh	r3, [r4, #24]
    82a2:	6822      	ldr	r2, [r4, #0]
    82a4:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
    82a6:	8b23      	ldrh	r3, [r4, #24]
    82a8:	0a1b      	lsrs	r3, r3, #8
    82aa:	6822      	ldr	r2, [r4, #0]
    82ac:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    82ae:	6823      	ldr	r3, [r4, #0]
    82b0:	7f22      	ldrb	r2, [r4, #28]
    82b2:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    82b4:	69e3      	ldr	r3, [r4, #28]
    82b6:	0a1b      	lsrs	r3, r3, #8
    82b8:	6822      	ldr	r2, [r4, #0]
    82ba:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    82bc:	8be3      	ldrh	r3, [r4, #30]
    82be:	6822      	ldr	r2, [r4, #0]
    82c0:	7593      	strb	r3, [r2, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    82c2:	7fe3      	ldrb	r3, [r4, #31]
    82c4:	6822      	ldr	r2, [r4, #0]
    82c6:	75d3      	strb	r3, [r2, #23]
    macMsg->BufSize = bufItr;
    82c8:	2318      	movs	r3, #24
    82ca:	7123      	strb	r3, [r4, #4]
    return LORAMAC_SERIALIZER_SUCCESS;
    82cc:	2000      	movs	r0, #0
    82ce:	e7d5      	b.n	827c <LoRaMacSerializerReJoinType1+0x14>
        return LORAMAC_SERIALIZER_ERROR_NPE;
    82d0:	2001      	movs	r0, #1
    82d2:	e7d3      	b.n	827c <LoRaMacSerializerReJoinType1+0x14>
    82d4:	2001      	movs	r0, #1
    82d6:	e7d1      	b.n	827c <LoRaMacSerializerReJoinType1+0x14>
    82d8:	00001eab 	.word	0x00001eab

000082dc <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    82dc:	b570      	push	{r4, r5, r6, lr}
    82de:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    82e0:	d030      	beq.n	8344 <LoRaMacSerializerReJoinType0or2+0x68>
    82e2:	6803      	ldr	r3, [r0, #0]
    82e4:	2b00      	cmp	r3, #0
    82e6:	d02f      	beq.n	8348 <LoRaMacSerializerReJoinType0or2+0x6c>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
    82e8:	7902      	ldrb	r2, [r0, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    82ea:	2002      	movs	r0, #2
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
    82ec:	2a12      	cmp	r2, #18
    82ee:	d800      	bhi.n	82f2 <LoRaMacSerializerReJoinType0or2+0x16>
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
}
    82f0:	bd70      	pop	{r4, r5, r6, pc}
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    82f2:	7962      	ldrb	r2, [r4, #5]
    82f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    82f6:	79a3      	ldrb	r3, [r4, #6]
    82f8:	6822      	ldr	r2, [r4, #0]
    82fa:	7053      	strb	r3, [r2, #1]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
    82fc:	1de1      	adds	r1, r4, #7
    82fe:	6823      	ldr	r3, [r4, #0]
    8300:	1c98      	adds	r0, r3, #2
    8302:	2203      	movs	r2, #3
    8304:	4d11      	ldr	r5, [pc, #68]	; (834c <LoRaMacSerializerReJoinType0or2+0x70>)
    8306:	47a8      	blx	r5
    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    8308:	0021      	movs	r1, r4
    830a:	310a      	adds	r1, #10
    830c:	6823      	ldr	r3, [r4, #0]
    830e:	1d58      	adds	r0, r3, #5
    8310:	2208      	movs	r2, #8
    8312:	47a8      	blx	r5
    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
    8314:	8a63      	ldrh	r3, [r4, #18]
    8316:	6822      	ldr	r2, [r4, #0]
    8318:	7353      	strb	r3, [r2, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
    831a:	8a63      	ldrh	r3, [r4, #18]
    831c:	0a1b      	lsrs	r3, r3, #8
    831e:	6822      	ldr	r2, [r4, #0]
    8320:	7393      	strb	r3, [r2, #14]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    8322:	6823      	ldr	r3, [r4, #0]
    8324:	7d22      	ldrb	r2, [r4, #20]
    8326:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    8328:	6963      	ldr	r3, [r4, #20]
    832a:	0a1b      	lsrs	r3, r3, #8
    832c:	6822      	ldr	r2, [r4, #0]
    832e:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    8330:	8ae3      	ldrh	r3, [r4, #22]
    8332:	6822      	ldr	r2, [r4, #0]
    8334:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    8336:	7de3      	ldrb	r3, [r4, #23]
    8338:	6822      	ldr	r2, [r4, #0]
    833a:	7493      	strb	r3, [r2, #18]
    macMsg->BufSize = bufItr;
    833c:	2313      	movs	r3, #19
    833e:	7123      	strb	r3, [r4, #4]
    return LORAMAC_SERIALIZER_SUCCESS;
    8340:	2000      	movs	r0, #0
    8342:	e7d5      	b.n	82f0 <LoRaMacSerializerReJoinType0or2+0x14>
        return LORAMAC_SERIALIZER_ERROR_NPE;
    8344:	2001      	movs	r0, #1
    8346:	e7d3      	b.n	82f0 <LoRaMacSerializerReJoinType0or2+0x14>
    8348:	2001      	movs	r0, #1
    834a:	e7d1      	b.n	82f0 <LoRaMacSerializerReJoinType0or2+0x14>
    834c:	00001eab 	.word	0x00001eab

00008350 <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    8350:	b570      	push	{r4, r5, r6, lr}
    8352:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    8354:	d100      	bne.n	8358 <LoRaMacSerializerData+0x8>
    8356:	e06a      	b.n	842e <LoRaMacSerializerData+0xde>
    8358:	6801      	ldr	r1, [r0, #0]
    835a:	2900      	cmp	r1, #0
    835c:	d100      	bne.n	8360 <LoRaMacSerializerData+0x10>
    835e:	e068      	b.n	8432 <LoRaMacSerializerData+0xe2>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
    8360:	2328      	movs	r3, #40	; 0x28
    8362:	5cc3      	ldrb	r3, [r0, r3]
    8364:	2b00      	cmp	r3, #0
    8366:	d104      	bne.n	8372 <LoRaMacSerializerData+0x22>
    {
        if( macMsg->BufSize < computedBufSize )
    8368:	7903      	ldrb	r3, [r0, #4]
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    836a:	2002      	movs	r0, #2
        if( macMsg->BufSize < computedBufSize )
    836c:	2b07      	cmp	r3, #7
    836e:	d809      	bhi.n	8384 <LoRaMacSerializerData+0x34>
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
}
    8370:	bd70      	pop	{r4, r5, r6, pc}
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
    8372:	7905      	ldrb	r5, [r0, #4]
    8374:	7b02      	ldrb	r2, [r0, #12]
    8376:	0712      	lsls	r2, r2, #28
    8378:	0f12      	lsrs	r2, r2, #28
    837a:	189b      	adds	r3, r3, r2
    837c:	3309      	adds	r3, #9
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    837e:	2002      	movs	r0, #2
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
    8380:	429d      	cmp	r5, r3
    8382:	dbf5      	blt.n	8370 <LoRaMacSerializerData+0x20>
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    8384:	7963      	ldrb	r3, [r4, #5]
    8386:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
    8388:	6823      	ldr	r3, [r4, #0]
    838a:	7a22      	ldrb	r2, [r4, #8]
    838c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
    838e:	68a3      	ldr	r3, [r4, #8]
    8390:	0a1b      	lsrs	r3, r3, #8
    8392:	6822      	ldr	r2, [r4, #0]
    8394:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
    8396:	8963      	ldrh	r3, [r4, #10]
    8398:	6822      	ldr	r2, [r4, #0]
    839a:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
    839c:	7ae3      	ldrb	r3, [r4, #11]
    839e:	6822      	ldr	r2, [r4, #0]
    83a0:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
    83a2:	7b23      	ldrb	r3, [r4, #12]
    83a4:	6822      	ldr	r2, [r4, #0]
    83a6:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    83a8:	89e3      	ldrh	r3, [r4, #14]
    83aa:	6822      	ldr	r2, [r4, #0]
    83ac:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
    83ae:	89e3      	ldrh	r3, [r4, #14]
    83b0:	0a1b      	lsrs	r3, r3, #8
    83b2:	6822      	ldr	r2, [r4, #0]
    83b4:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
    83b6:	7b22      	ldrb	r2, [r4, #12]
    83b8:	0712      	lsls	r2, r2, #28
    83ba:	0f12      	lsrs	r2, r2, #28
    83bc:	0021      	movs	r1, r4
    83be:	3110      	adds	r1, #16
    83c0:	6820      	ldr	r0, [r4, #0]
    83c2:	3008      	adds	r0, #8
    83c4:	4b1c      	ldr	r3, [pc, #112]	; (8438 <LoRaMacSerializerData+0xe8>)
    83c6:	4798      	blx	r3
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    83c8:	7b23      	ldrb	r3, [r4, #12]
    83ca:	071b      	lsls	r3, r3, #28
    83cc:	0f1b      	lsrs	r3, r3, #28
    83ce:	001d      	movs	r5, r3
    83d0:	3508      	adds	r5, #8
    if( macMsg->FRMPayloadSize > 0 )
    83d2:	2228      	movs	r2, #40	; 0x28
    83d4:	5ca2      	ldrb	r2, [r4, r2]
    83d6:	2a00      	cmp	r2, #0
    83d8:	d005      	beq.n	83e6 <LoRaMacSerializerData+0x96>
        macMsg->Buffer[bufItr++] = macMsg->FPort;
    83da:	2220      	movs	r2, #32
    83dc:	5ca2      	ldrb	r2, [r4, r2]
    83de:	6821      	ldr	r1, [r4, #0]
    83e0:	554a      	strb	r2, [r1, r5]
    83e2:	3309      	adds	r3, #9
    83e4:	001d      	movs	r5, r3
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
    83e6:	2628      	movs	r6, #40	; 0x28
    83e8:	5da2      	ldrb	r2, [r4, r6]
    83ea:	6823      	ldr	r3, [r4, #0]
    83ec:	1958      	adds	r0, r3, r5
    83ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83f0:	4b11      	ldr	r3, [pc, #68]	; (8438 <LoRaMacSerializerData+0xe8>)
    83f2:	4798      	blx	r3
    bufItr = bufItr + macMsg->FRMPayloadSize;
    83f4:	5da3      	ldrb	r3, [r4, r6]
    83f6:	18eb      	adds	r3, r5, r3
    83f8:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    83fa:	6822      	ldr	r2, [r4, #0]
    83fc:	212c      	movs	r1, #44	; 0x2c
    83fe:	1861      	adds	r1, r4, r1
    8400:	7809      	ldrb	r1, [r1, #0]
    8402:	54d1      	strb	r1, [r2, r3]
    8404:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    8406:	b292      	uxth	r2, r2
    8408:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    840a:	0a09      	lsrs	r1, r1, #8
    840c:	6820      	ldr	r0, [r4, #0]
    840e:	5481      	strb	r1, [r0, r2]
    8410:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    8412:	b292      	uxth	r2, r2
    8414:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    8416:	6820      	ldr	r0, [r4, #0]
    8418:	5481      	strb	r1, [r0, r2]
    841a:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    841c:	b292      	uxth	r2, r2
    841e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8420:	0e09      	lsrs	r1, r1, #24
    8422:	6820      	ldr	r0, [r4, #0]
    8424:	5481      	strb	r1, [r0, r2]
    8426:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
    8428:	7123      	strb	r3, [r4, #4]
    return LORAMAC_SERIALIZER_SUCCESS;
    842a:	2000      	movs	r0, #0
    842c:	e7a0      	b.n	8370 <LoRaMacSerializerData+0x20>
        return LORAMAC_SERIALIZER_ERROR_NPE;
    842e:	2001      	movs	r0, #1
    8430:	e79e      	b.n	8370 <LoRaMacSerializerData+0x20>
    8432:	2001      	movs	r0, #1
    8434:	e79c      	b.n	8370 <LoRaMacSerializerData+0x20>
    8436:	46c0      	nop			; (mov r8, r8)
    8438:	00001e91 	.word	0x00001e91

0000843c <RegionIsActive>:
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
    843c:	3805      	subs	r0, #5
    843e:	4243      	negs	r3, r0
    8440:	4158      	adcs	r0, r3
        }
    }
}
    8442:	4770      	bx	lr

00008444 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    8444:	b500      	push	{lr}
    8446:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
    switch( region )
    8448:	2805      	cmp	r0, #5
    844a:	d004      	beq.n	8456 <RegionGetPhyParam+0x12>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
    844c:	2300      	movs	r3, #0
    844e:	9301      	str	r3, [sp, #4]
        }
    }
}
    8450:	9801      	ldr	r0, [sp, #4]
    8452:	b003      	add	sp, #12
    8454:	bd00      	pop	{pc}
        EU868_GET_PHY_PARAM( );
    8456:	0008      	movs	r0, r1
    8458:	4b01      	ldr	r3, [pc, #4]	; (8460 <RegionGetPhyParam+0x1c>)
    845a:	4798      	blx	r3
    845c:	9001      	str	r0, [sp, #4]
    845e:	e7f7      	b.n	8450 <RegionGetPhyParam+0xc>
    8460:	00008c71 	.word	0x00008c71

00008464 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    8464:	b510      	push	{r4, lr}
    switch( region )
    8466:	2805      	cmp	r0, #5
    8468:	d000      	beq.n	846c <RegionSetBandTxDone+0x8>
        default:
        {
            return;
        }
    }
}
    846a:	bd10      	pop	{r4, pc}
        EU868_SET_BAND_TX_DONE( );
    846c:	0008      	movs	r0, r1
    846e:	4b01      	ldr	r3, [pc, #4]	; (8474 <RegionSetBandTxDone+0x10>)
    8470:	4798      	blx	r3
    8472:	e7fa      	b.n	846a <RegionSetBandTxDone+0x6>
    8474:	00008d8d 	.word	0x00008d8d

00008478 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    8478:	b510      	push	{r4, lr}
    switch( region )
    847a:	2805      	cmp	r0, #5
    847c:	d000      	beq.n	8480 <RegionInitDefaults+0x8>
        default:
        {
            break;
        }
    }
}
    847e:	bd10      	pop	{r4, pc}
        EU868_INIT_DEFAULTS( );
    8480:	0008      	movs	r0, r1
    8482:	4b01      	ldr	r3, [pc, #4]	; (8488 <RegionInitDefaults+0x10>)
    8484:	4798      	blx	r3
}
    8486:	e7fa      	b.n	847e <RegionInitDefaults+0x6>
    8488:	00008db5 	.word	0x00008db5

0000848c <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    848c:	b510      	push	{r4, lr}
    switch( region )
    848e:	2805      	cmp	r0, #5
    8490:	d103      	bne.n	849a <RegionGetNvmCtx+0xe>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
    8492:	0008      	movs	r0, r1
    8494:	4b02      	ldr	r3, [pc, #8]	; (84a0 <RegionGetNvmCtx+0x14>)
    8496:	4798      	blx	r3
        default:
        {
           return 0;
        }
    }
}
    8498:	bd10      	pop	{r4, pc}
           return 0;
    849a:	2000      	movs	r0, #0
    849c:	e7fc      	b.n	8498 <RegionGetNvmCtx+0xc>
    849e:	46c0      	nop			; (mov r8, r8)
    84a0:	00008e85 	.word	0x00008e85

000084a4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    84a4:	b510      	push	{r4, lr}
    84a6:	000b      	movs	r3, r1
    switch( region )
    84a8:	2805      	cmp	r0, #5
    84aa:	d001      	beq.n	84b0 <RegionVerify+0xc>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
    84ac:	2000      	movs	r0, #0
        }
    }
}
    84ae:	bd10      	pop	{r4, pc}
        EU868_VERIFY( );
    84b0:	0011      	movs	r1, r2
    84b2:	0018      	movs	r0, r3
    84b4:	4b01      	ldr	r3, [pc, #4]	; (84bc <RegionVerify+0x18>)
    84b6:	4798      	blx	r3
    84b8:	e7f9      	b.n	84ae <RegionVerify+0xa>
    84ba:	46c0      	nop			; (mov r8, r8)
    84bc:	00008e95 	.word	0x00008e95

000084c0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    84c0:	b510      	push	{r4, lr}
    switch( region )
    84c2:	2805      	cmp	r0, #5
    84c4:	d000      	beq.n	84c8 <RegionApplyCFList+0x8>
        default:
        {
            break;
        }
    }
}
    84c6:	bd10      	pop	{r4, pc}
        EU868_APPLY_CF_LIST( );
    84c8:	0008      	movs	r0, r1
    84ca:	4b01      	ldr	r3, [pc, #4]	; (84d0 <RegionApplyCFList+0x10>)
    84cc:	4798      	blx	r3
}
    84ce:	e7fa      	b.n	84c6 <RegionApplyCFList+0x6>
    84d0:	00009719 	.word	0x00009719

000084d4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    84d4:	b510      	push	{r4, lr}
    switch( region )
    84d6:	2805      	cmp	r0, #5
    84d8:	d001      	beq.n	84de <RegionChanMaskSet+0xa>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
    84da:	2000      	movs	r0, #0
        }
    }
}
    84dc:	bd10      	pop	{r4, pc}
        EU868_CHAN_MASK_SET( );
    84de:	0008      	movs	r0, r1
    84e0:	4b01      	ldr	r3, [pc, #4]	; (84e8 <RegionChanMaskSet+0x14>)
    84e2:	4798      	blx	r3
    84e4:	e7fa      	b.n	84dc <RegionChanMaskSet+0x8>
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	00008f09 	.word	0x00008f09

000084ec <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    84ec:	b510      	push	{r4, lr}
    84ee:	000c      	movs	r4, r1
    84f0:	0011      	movs	r1, r2
    84f2:	001a      	movs	r2, r3
    switch( region )
    84f4:	2805      	cmp	r0, #5
    84f6:	d000      	beq.n	84fa <RegionComputeRxWindowParameters+0xe>
        default:
        {
            break;
        }
    }
}
    84f8:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
    84fa:	9b02      	ldr	r3, [sp, #8]
    84fc:	0020      	movs	r0, r4
    84fe:	4c01      	ldr	r4, [pc, #4]	; (8504 <RegionComputeRxWindowParameters+0x18>)
    8500:	47a0      	blx	r4
}
    8502:	e7f9      	b.n	84f8 <RegionComputeRxWindowParameters+0xc>
    8504:	00008f45 	.word	0x00008f45

00008508 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    8508:	b510      	push	{r4, lr}
    850a:	000b      	movs	r3, r1
    switch( region )
    850c:	2805      	cmp	r0, #5
    850e:	d001      	beq.n	8514 <RegionRxConfig+0xc>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
    8510:	2000      	movs	r0, #0
        }
    }
}
    8512:	bd10      	pop	{r4, pc}
        EU868_RX_CONFIG( );
    8514:	0011      	movs	r1, r2
    8516:	0018      	movs	r0, r3
    8518:	4b01      	ldr	r3, [pc, #4]	; (8520 <RegionRxConfig+0x18>)
    851a:	4798      	blx	r3
    851c:	e7f9      	b.n	8512 <RegionRxConfig+0xa>
    851e:	46c0      	nop			; (mov r8, r8)
    8520:	00008fdd 	.word	0x00008fdd

00008524 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    8524:	b510      	push	{r4, lr}
    8526:	000c      	movs	r4, r1
    8528:	0011      	movs	r1, r2
    switch( region )
    852a:	2805      	cmp	r0, #5
    852c:	d001      	beq.n	8532 <RegionTxConfig+0xe>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
    852e:	2000      	movs	r0, #0
        }
    }
}
    8530:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
    8532:	001a      	movs	r2, r3
    8534:	0020      	movs	r0, r4
    8536:	4b01      	ldr	r3, [pc, #4]	; (853c <RegionTxConfig+0x18>)
    8538:	4798      	blx	r3
    853a:	e7f9      	b.n	8530 <RegionTxConfig+0xc>
    853c:	000090d5 	.word	0x000090d5

00008540 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    8540:	b510      	push	{r4, lr}
    8542:	b082      	sub	sp, #8
    8544:	000c      	movs	r4, r1
    8546:	0011      	movs	r1, r2
    8548:	001a      	movs	r2, r3
    switch( region )
    854a:	2805      	cmp	r0, #5
    854c:	d002      	beq.n	8554 <RegionLinkAdrReq+0x14>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
    854e:	2000      	movs	r0, #0
        }
    }
}
    8550:	b002      	add	sp, #8
    8552:	bd10      	pop	{r4, pc}
        EU868_LINK_ADR_REQ( );
    8554:	9b05      	ldr	r3, [sp, #20]
    8556:	9300      	str	r3, [sp, #0]
    8558:	9b04      	ldr	r3, [sp, #16]
    855a:	0020      	movs	r0, r4
    855c:	4c01      	ldr	r4, [pc, #4]	; (8564 <RegionLinkAdrReq+0x24>)
    855e:	47a0      	blx	r4
    8560:	e7f6      	b.n	8550 <RegionLinkAdrReq+0x10>
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	00009201 	.word	0x00009201

00008568 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    8568:	b510      	push	{r4, lr}
    switch( region )
    856a:	2805      	cmp	r0, #5
    856c:	d001      	beq.n	8572 <RegionRxParamSetupReq+0xa>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
    856e:	2000      	movs	r0, #0
        }
    }
}
    8570:	bd10      	pop	{r4, pc}
        EU868_RX_PARAM_SETUP_REQ( );
    8572:	0008      	movs	r0, r1
    8574:	4b01      	ldr	r3, [pc, #4]	; (857c <RegionRxParamSetupReq+0x14>)
    8576:	4798      	blx	r3
    8578:	e7fa      	b.n	8570 <RegionRxParamSetupReq+0x8>
    857a:	46c0      	nop			; (mov r8, r8)
    857c:	00009379 	.word	0x00009379

00008580 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    8580:	b510      	push	{r4, lr}
    switch( region )
    8582:	2805      	cmp	r0, #5
    8584:	d001      	beq.n	858a <RegionNewChannelReq+0xa>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
    8586:	2000      	movs	r0, #0
        }
    }
}
    8588:	bd10      	pop	{r4, pc}
        EU868_NEW_CHANNEL_REQ( );
    858a:	0008      	movs	r0, r1
    858c:	4b01      	ldr	r3, [pc, #4]	; (8594 <RegionNewChannelReq+0x14>)
    858e:	4798      	blx	r3
    8590:	e7fa      	b.n	8588 <RegionNewChannelReq+0x8>
    8592:	46c0      	nop			; (mov r8, r8)
    8594:	000097a5 	.word	0x000097a5

00008598 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    8598:	b510      	push	{r4, lr}
    switch( region )
    859a:	2805      	cmp	r0, #5
    859c:	d001      	beq.n	85a2 <RegionTxParamSetupReq+0xa>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
    859e:	2000      	movs	r0, #0
        }
    }
}
    85a0:	bd10      	pop	{r4, pc}
        EU868_TX_PARAM_SETUP_REQ( );
    85a2:	0008      	movs	r0, r1
    85a4:	4b01      	ldr	r3, [pc, #4]	; (85ac <RegionTxParamSetupReq+0x14>)
    85a6:	4798      	blx	r3
    85a8:	e7fa      	b.n	85a0 <RegionTxParamSetupReq+0x8>
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	000093cd 	.word	0x000093cd

000085b0 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    85b0:	b510      	push	{r4, lr}
    switch( region )
    85b2:	2805      	cmp	r0, #5
    85b4:	d001      	beq.n	85ba <RegionDlChannelReq+0xa>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
    85b6:	2000      	movs	r0, #0
        }
    }
}
    85b8:	bd10      	pop	{r4, pc}
        EU868_DL_CHANNEL_REQ( );
    85ba:	0008      	movs	r0, r1
    85bc:	4b01      	ldr	r3, [pc, #4]	; (85c4 <RegionDlChannelReq+0x14>)
    85be:	4798      	blx	r3
    85c0:	e7fa      	b.n	85b8 <RegionDlChannelReq+0x8>
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	000093d5 	.word	0x000093d5

000085c8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr )
{
    85c8:	b510      	push	{r4, lr}
    switch( region )
    85ca:	2805      	cmp	r0, #5
    85cc:	d001      	beq.n	85d2 <RegionAlternateDr+0xa>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
    85ce:	2000      	movs	r0, #0
        }
    }
}
    85d0:	bd10      	pop	{r4, pc}
        EU868_ALTERNATE_DR( );
    85d2:	0008      	movs	r0, r1
    85d4:	4b01      	ldr	r3, [pc, #4]	; (85dc <RegionAlternateDr+0x14>)
    85d6:	4798      	blx	r3
    85d8:	e7fa      	b.n	85d0 <RegionAlternateDr+0x8>
    85da:	46c0      	nop			; (mov r8, r8)
    85dc:	00009439 	.word	0x00009439

000085e0 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    85e0:	b510      	push	{r4, lr}
    switch( region )
    85e2:	2805      	cmp	r0, #5
    85e4:	d000      	beq.n	85e8 <RegionCalcBackOff+0x8>
        default:
        {
            break;
        }
    }
}
    85e6:	bd10      	pop	{r4, pc}
        EU868_CALC_BACKOFF( );
    85e8:	0008      	movs	r0, r1
    85ea:	4b01      	ldr	r3, [pc, #4]	; (85f0 <RegionCalcBackOff+0x10>)
    85ec:	4798      	blx	r3
}
    85ee:	e7fa      	b.n	85e6 <RegionCalcBackOff+0x6>
    85f0:	0000943d 	.word	0x0000943d

000085f4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    85f4:	b510      	push	{r4, lr}
    85f6:	000c      	movs	r4, r1
    85f8:	0011      	movs	r1, r2
    85fa:	001a      	movs	r2, r3
    switch( region )
    85fc:	2805      	cmp	r0, #5
    85fe:	d001      	beq.n	8604 <RegionNextChannel+0x10>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    8600:	2009      	movs	r0, #9
        }
    }
}
    8602:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
    8604:	9b02      	ldr	r3, [sp, #8]
    8606:	0020      	movs	r0, r4
    8608:	4c01      	ldr	r4, [pc, #4]	; (8610 <RegionNextChannel+0x1c>)
    860a:	47a0      	blx	r4
    860c:	e7f9      	b.n	8602 <RegionNextChannel+0xe>
    860e:	46c0      	nop			; (mov r8, r8)
    8610:	0000947d 	.word	0x0000947d

00008614 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    8614:	b510      	push	{r4, lr}
    switch( region )
    8616:	2805      	cmp	r0, #5
    8618:	d000      	beq.n	861c <RegionSetContinuousWave+0x8>
        default:
        {
            break;
        }
    }
}
    861a:	bd10      	pop	{r4, pc}
        EU868_SET_CONTINUOUS_WAVE( );
    861c:	0008      	movs	r0, r1
    861e:	4b01      	ldr	r3, [pc, #4]	; (8624 <RegionSetContinuousWave+0x10>)
    8620:	4798      	blx	r3
}
    8622:	e7fa      	b.n	861a <RegionSetContinuousWave+0x6>
    8624:	00009805 	.word	0x00009805

00008628 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    8628:	b510      	push	{r4, lr}
    862a:	000c      	movs	r4, r1
    862c:	0011      	movs	r1, r2
    switch( region )
    862e:	2805      	cmp	r0, #5
    8630:	d001      	beq.n	8636 <RegionApplyDrOffset+0xe>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
    8632:	b2d0      	uxtb	r0, r2
        }
    }
}
    8634:	bd10      	pop	{r4, pc}
        EU868_APPLY_DR_OFFSET( );
    8636:	001a      	movs	r2, r3
    8638:	0020      	movs	r0, r4
    863a:	4b01      	ldr	r3, [pc, #4]	; (8640 <RegionApplyDrOffset+0x18>)
    863c:	4798      	blx	r3
    863e:	e7f9      	b.n	8634 <RegionApplyDrOffset+0xc>
    8640:	00009859 	.word	0x00009859

00008644 <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
    8644:	b5f0      	push	{r4, r5, r6, r7, lr}
    8646:	46d6      	mov	lr, sl
    8648:	464f      	mov	r7, r9
    864a:	4646      	mov	r6, r8
    864c:	b5c0      	push	{r6, r7, lr}
    864e:	4680      	mov	r8, r0
    8650:	468c      	mov	ip, r1
    8652:	a908      	add	r1, sp, #32
    8654:	2400      	movs	r4, #0
    8656:	570c      	ldrsb	r4, [r1, r4]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
    8658:	2100      	movs	r1, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
    865a:	429a      	cmp	r2, r3
    865c:	db20      	blt.n	86a0 <RegionCommonChanVerifyDr+0x5c>
    865e:	42a2      	cmp	r2, r4
    8660:	dc1e      	bgt.n	86a0 <RegionCommonChanVerifyDr+0x5c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
    8662:	2300      	movs	r3, #0
    8664:	4699      	mov	r9, r3
    8666:	2000      	movs	r0, #0
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
    8668:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
    866a:	210f      	movs	r1, #15
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
    866c:	4643      	mov	r3, r8
    866e:	2b00      	cmp	r3, #0
    8670:	d124      	bne.n	86bc <RegionCommonChanVerifyDr+0x78>
    return false;
    8672:	2100      	movs	r1, #0
    8674:	e014      	b.n	86a0 <RegionCommonChanVerifyDr+0x5c>
    8676:	3301      	adds	r3, #1
    8678:	350c      	adds	r5, #12
        for( uint8_t j = 0; j < 16; j++ )
    867a:	2b10      	cmp	r3, #16
    867c:	d016      	beq.n	86ac <RegionCommonChanVerifyDr+0x68>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
    867e:	0034      	movs	r4, r6
    8680:	411c      	asrs	r4, r3
    8682:	4227      	tst	r7, r4
    8684:	d0f7      	beq.n	8676 <RegionCommonChanVerifyDr+0x32>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
    8686:	7a2c      	ldrb	r4, [r5, #8]
    8688:	0724      	lsls	r4, r4, #28
    868a:	1724      	asrs	r4, r4, #28
    if( ( value >= min ) && ( value <= max ) )
    868c:	400c      	ands	r4, r1
    868e:	42a2      	cmp	r2, r4
    8690:	dbf1      	blt.n	8676 <RegionCommonChanVerifyDr+0x32>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
    8692:	2408      	movs	r4, #8
    8694:	572c      	ldrsb	r4, [r5, r4]
    8696:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
    8698:	400c      	ands	r4, r1
    869a:	42a2      	cmp	r2, r4
    869c:	dceb      	bgt.n	8676 <RegionCommonChanVerifyDr+0x32>
                    return true;
    869e:	2101      	movs	r1, #1
}
    86a0:	0008      	movs	r0, r1
    86a2:	bc1c      	pop	{r2, r3, r4}
    86a4:	4690      	mov	r8, r2
    86a6:	4699      	mov	r9, r3
    86a8:	46a2      	mov	sl, r4
    86aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
    86ac:	3010      	adds	r0, #16
    86ae:	b2c0      	uxtb	r0, r0
    86b0:	464b      	mov	r3, r9
    86b2:	3301      	adds	r3, #1
    86b4:	b2db      	uxtb	r3, r3
    86b6:	4699      	mov	r9, r3
    86b8:	4580      	cmp	r8, r0
    86ba:	d90b      	bls.n	86d4 <RegionCommonChanVerifyDr+0x90>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
    86bc:	464b      	mov	r3, r9
    86be:	005b      	lsls	r3, r3, #1
    86c0:	4664      	mov	r4, ip
    86c2:	5b1e      	ldrh	r6, [r3, r4]
    86c4:	0045      	lsls	r5, r0, #1
    86c6:	182d      	adds	r5, r5, r0
    86c8:	00ad      	lsls	r5, r5, #2
    86ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    86cc:	469a      	mov	sl, r3
    86ce:	4455      	add	r5, sl
    86d0:	2300      	movs	r3, #0
    86d2:	e7d4      	b.n	867e <RegionCommonChanVerifyDr+0x3a>
    return false;
    86d4:	2100      	movs	r1, #0
    86d6:	e7e3      	b.n	86a0 <RegionCommonChanVerifyDr+0x5c>

000086d8 <RegionCommonValueInRange>:
{
    86d8:	2300      	movs	r3, #0
    if( ( value >= min ) && ( value <= max ) )
    86da:	4288      	cmp	r0, r1
    86dc:	db04      	blt.n	86e8 <RegionCommonValueInRange+0x10>
    86de:	0fc3      	lsrs	r3, r0, #31
    86e0:	17d1      	asrs	r1, r2, #31
    86e2:	4282      	cmp	r2, r0
    86e4:	414b      	adcs	r3, r1
    86e6:	b2db      	uxtb	r3, r3
    {
        return 1;
    }
    return 0;
}
    86e8:	0018      	movs	r0, r3
    86ea:	4770      	bx	lr

000086ec <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    86ec:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
    86ee:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    86f0:	0915      	lsrs	r5, r2, #4
    {
        return false;
    86f2:	2400      	movs	r4, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    86f4:	42ab      	cmp	r3, r5
    86f6:	d80b      	bhi.n	8710 <RegionCommonChanDisable+0x24>
    86f8:	4291      	cmp	r1, r2
    86fa:	d209      	bcs.n	8710 <RegionCommonChanDisable+0x24>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
    86fc:	005b      	lsls	r3, r3, #1
    86fe:	18c3      	adds	r3, r0, r3
    8700:	220f      	movs	r2, #15
    8702:	400a      	ands	r2, r1
    8704:	2101      	movs	r1, #1
    8706:	4091      	lsls	r1, r2
    8708:	881a      	ldrh	r2, [r3, #0]
    870a:	438a      	bics	r2, r1
    870c:	801a      	strh	r2, [r3, #0]

    return true;
    870e:	3401      	adds	r4, #1
}
    8710:	0020      	movs	r0, r4
    8712:	bd30      	pop	{r4, r5, pc}

00008714 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    8714:	b5f0      	push	{r4, r5, r6, r7, lr}
    8716:	46c6      	mov	lr, r8
    8718:	b500      	push	{lr}
    871a:	1e03      	subs	r3, r0, #0
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
    871c:	d023      	beq.n	8766 <RegionCommonCountChannels+0x52>
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    871e:	4291      	cmp	r1, r2
    8720:	d226      	bcs.n	8770 <RegionCommonCountChannels+0x5c>
    8722:	0048      	lsls	r0, r1, #1
    8724:	1818      	adds	r0, r3, r0
    8726:	3a01      	subs	r2, #1
    8728:	1a52      	subs	r2, r2, r1
    872a:	b2d2      	uxtb	r2, r2
    872c:	3101      	adds	r1, #1
    872e:	1852      	adds	r2, r2, r1
    8730:	0052      	lsls	r2, r2, #1
    8732:	4698      	mov	r8, r3
    8734:	4490      	add	r8, r2
    8736:	2700      	movs	r7, #0
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
    8738:	2601      	movs	r6, #1
    873a:	e010      	b.n	875e <RegionCommonCountChannels+0x4a>
    873c:	3301      	adds	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
    873e:	2b10      	cmp	r3, #16
    8740:	d008      	beq.n	8754 <RegionCommonCountChannels+0x40>
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
    8742:	0032      	movs	r2, r6
    8744:	409a      	lsls	r2, r3
    8746:	0011      	movs	r1, r2
    8748:	4029      	ands	r1, r5
    874a:	428a      	cmp	r2, r1
    874c:	d1f6      	bne.n	873c <RegionCommonCountChannels+0x28>
            nbActiveBits++;
    874e:	3401      	adds	r4, #1
    8750:	b2e4      	uxtb	r4, r4
    8752:	e7f3      	b.n	873c <RegionCommonCountChannels+0x28>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    8754:	19e7      	adds	r7, r4, r7
    8756:	b2ff      	uxtb	r7, r7
    8758:	3002      	adds	r0, #2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
    875a:	4540      	cmp	r0, r8
    875c:	d004      	beq.n	8768 <RegionCommonCountChannels+0x54>
        nbChannels += CountChannels( channelsMask[i], 16 );
    875e:	8805      	ldrh	r5, [r0, #0]
    8760:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
    8762:	2400      	movs	r4, #0
    8764:	e7ed      	b.n	8742 <RegionCommonCountChannels+0x2e>
        return 0;
    8766:	2700      	movs	r7, #0
    }

    return nbChannels;
}
    8768:	0038      	movs	r0, r7
    876a:	bc04      	pop	{r2}
    876c:	4690      	mov	r8, r2
    876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = startIdx; i < stopIdx; i++ )
    8770:	2700      	movs	r7, #0
    8772:	e7f9      	b.n	8768 <RegionCommonCountChannels+0x54>

00008774 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    8774:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
    8776:	2800      	cmp	r0, #0
    8778:	d00d      	beq.n	8796 <RegionCommonChanMaskCopy+0x22>
    877a:	2900      	cmp	r1, #0
    877c:	d00b      	beq.n	8796 <RegionCommonChanMaskCopy+0x22>
    {
        for( uint8_t i = 0; i < len; i++ )
    877e:	2a00      	cmp	r2, #0
    8780:	d009      	beq.n	8796 <RegionCommonChanMaskCopy+0x22>
    8782:	3a01      	subs	r2, #1
    8784:	b2d4      	uxtb	r4, r2
    8786:	3401      	adds	r4, #1
    8788:	0064      	lsls	r4, r4, #1
    878a:	2300      	movs	r3, #0
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
    878c:	5aca      	ldrh	r2, [r1, r3]
    878e:	52c2      	strh	r2, [r0, r3]
    8790:	3302      	adds	r3, #2
        for( uint8_t i = 0; i < len; i++ )
    8792:	429c      	cmp	r4, r3
    8794:	d1fa      	bne.n	878c <RegionCommonChanMaskCopy+0x18>
        }
    }
}
    8796:	bd10      	pop	{r4, pc}

00008798 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    8798:	2800      	cmp	r0, #0
    879a:	d102      	bne.n	87a2 <RegionCommonSetBandTxDone+0xa>
    {
        band->LastTxDoneTime = lastTxDone;
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
    879c:	608a      	str	r2, [r1, #8]
        band->LastJoinTxDoneTime = lastTxDone;
    879e:	604a      	str	r2, [r1, #4]
    }
}
    87a0:	4770      	bx	lr
        band->LastTxDoneTime = lastTxDone;
    87a2:	608a      	str	r2, [r1, #8]
    87a4:	e7fc      	b.n	87a0 <RegionCommonSetBandTxDone+0x8>
	...

000087a8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
    87a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87aa:	46de      	mov	lr, fp
    87ac:	464f      	mov	r7, r9
    87ae:	4646      	mov	r6, r8
    87b0:	b5c0      	push	{r6, r7, lr}
    87b2:	4680      	mov	r8, r0
    87b4:	4689      	mov	r9, r1
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
    87b6:	2b00      	cmp	r3, #0
    87b8:	d055      	beq.n	8866 <RegionCommonUpdateBandTimeOff+0xbe>
    87ba:	1d14      	adds	r4, r2, #4
    87bc:	3b01      	subs	r3, #1
    87be:	b2db      	uxtb	r3, r3
    87c0:	011b      	lsls	r3, r3, #4
    87c2:	3314      	adds	r3, #20
    87c4:	18d5      	adds	r5, r2, r3
    87c6:	2701      	movs	r7, #1
    87c8:	427f      	negs	r7, r7
    87ca:	e013      	b.n	87f4 <RegionCommonUpdateBandTimeOff+0x4c>
    87cc:	46a3      	mov	fp, r4
    {
        if( joined == false )
        {
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
    87ce:	6820      	ldr	r0, [r4, #0]
    87d0:	4b29      	ldr	r3, [pc, #164]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    87d2:	4798      	blx	r3
    87d4:	0006      	movs	r6, r0
    87d6:	464b      	mov	r3, r9
    87d8:	2b00      	cmp	r3, #0
    87da:	d115      	bne.n	8808 <RegionCommonUpdateBandTimeOff+0x60>
    87dc:	2800      	cmp	r0, #0
    87de:	d11d      	bne.n	881c <RegionCommonUpdateBandTimeOff+0x74>
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
    87e0:	465b      	mov	r3, fp
    87e2:	689b      	ldr	r3, [r3, #8]
    87e4:	429e      	cmp	r6, r3
    87e6:	d31f      	bcc.n	8828 <RegionCommonUpdateBandTimeOff+0x80>
            {
                bands[i].TimeOff = 0;
    87e8:	2300      	movs	r3, #0
    87ea:	465a      	mov	r2, fp
    87ec:	6093      	str	r3, [r2, #8]
    87ee:	3410      	adds	r4, #16
    for( uint8_t i = 0; i < nbBands; i++ )
    87f0:	42a5      	cmp	r5, r4
    87f2:	d03a      	beq.n	886a <RegionCommonUpdateBandTimeOff+0xc2>
        if( joined == false )
    87f4:	4643      	mov	r3, r8
    87f6:	2b00      	cmp	r3, #0
    87f8:	d0e8      	beq.n	87cc <RegionCommonUpdateBandTimeOff+0x24>
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
            }
        }
        else
        {
            if( dutyCycle == true )
    87fa:	464b      	mov	r3, r9
    87fc:	2b00      	cmp	r3, #0
    87fe:	d11a      	bne.n	8836 <RegionCommonUpdateBandTimeOff+0x8e>
                }
            }
            else
            {
                nextTxDelay = 0;
                bands[i].TimeOff = 0;
    8800:	2300      	movs	r3, #0
    8802:	60a3      	str	r3, [r4, #8]
                nextTxDelay = 0;
    8804:	2700      	movs	r7, #0
    8806:	e7f2      	b.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
    8808:	6860      	ldr	r0, [r4, #4]
    880a:	4b1b      	ldr	r3, [pc, #108]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    880c:	4798      	blx	r3
    880e:	4286      	cmp	r6, r0
    8810:	d804      	bhi.n	881c <RegionCommonUpdateBandTimeOff+0x74>
    8812:	6860      	ldr	r0, [r4, #4]
    8814:	4b18      	ldr	r3, [pc, #96]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    8816:	4798      	blx	r3
    8818:	0006      	movs	r6, r0
    881a:	e7e1      	b.n	87e0 <RegionCommonUpdateBandTimeOff+0x38>
    881c:	465b      	mov	r3, fp
    881e:	6818      	ldr	r0, [r3, #0]
    8820:	4b15      	ldr	r3, [pc, #84]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    8822:	4798      	blx	r3
    8824:	0006      	movs	r6, r0
    8826:	e7db      	b.n	87e0 <RegionCommonUpdateBandTimeOff+0x38>
            if( bands[i].TimeOff != 0 )
    8828:	2b00      	cmp	r3, #0
    882a:	d0e0      	beq.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
    882c:	1b9e      	subs	r6, r3, r6
    882e:	42b7      	cmp	r7, r6
    8830:	d9dd      	bls.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
    8832:	0037      	movs	r7, r6
    8834:	e7db      	b.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
    8836:	68a6      	ldr	r6, [r4, #8]
    8838:	6860      	ldr	r0, [r4, #4]
    883a:	4b0f      	ldr	r3, [pc, #60]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    883c:	4798      	blx	r3
    883e:	4286      	cmp	r6, r0
    8840:	d802      	bhi.n	8848 <RegionCommonUpdateBandTimeOff+0xa0>
                    bands[i].TimeOff = 0;
    8842:	2300      	movs	r3, #0
    8844:	60a3      	str	r3, [r4, #8]
    8846:	e7d2      	b.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
                if( bands[i].TimeOff != 0 )
    8848:	68a6      	ldr	r6, [r4, #8]
    884a:	2e00      	cmp	r6, #0
    884c:	d0cf      	beq.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
    884e:	6860      	ldr	r0, [r4, #4]
    8850:	4b09      	ldr	r3, [pc, #36]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    8852:	4798      	blx	r3
    8854:	1a36      	subs	r6, r6, r0
    8856:	42be      	cmp	r6, r7
    8858:	d2c9      	bcs.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
    885a:	68a7      	ldr	r7, [r4, #8]
    885c:	6860      	ldr	r0, [r4, #4]
    885e:	4b06      	ldr	r3, [pc, #24]	; (8878 <RegionCommonUpdateBandTimeOff+0xd0>)
    8860:	4798      	blx	r3
    8862:	1a3f      	subs	r7, r7, r0
    8864:	e7c3      	b.n	87ee <RegionCommonUpdateBandTimeOff+0x46>
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
    8866:	2701      	movs	r7, #1
    8868:	427f      	negs	r7, r7
            }
        }
    }
    return nextTxDelay;
}
    886a:	0038      	movs	r0, r7
    886c:	bc1c      	pop	{r2, r3, r4}
    886e:	4690      	mov	r8, r2
    8870:	4699      	mov	r9, r3
    8872:	46a3      	mov	fp, r4
    8874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8876:	46c0      	nop			; (mov r8, r8)
    8878:	0000c281 	.word	0x0000c281

0000887c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    887c:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
    887e:	7802      	ldrb	r2, [r0, #0]
    uint8_t retIndex = 0;
    8880:	2300      	movs	r3, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
    8882:	2a03      	cmp	r2, #3
    8884:	d001      	beq.n	888a <RegionCommonParseLinkAdrReq+0xe>

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
    8886:	0018      	movs	r0, r3
    8888:	bd10      	pop	{r4, pc}
        linkAdrParams->Datarate = payload[1];
    888a:	7842      	ldrb	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
    888c:	330f      	adds	r3, #15
    888e:	001c      	movs	r4, r3
    8890:	4014      	ands	r4, r2
    8892:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
    8894:	0912      	lsrs	r2, r2, #4
    8896:	704a      	strb	r2, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
    8898:	7882      	ldrb	r2, [r0, #2]
    889a:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
    889c:	78c4      	ldrb	r4, [r0, #3]
    889e:	0224      	lsls	r4, r4, #8
    88a0:	4322      	orrs	r2, r4
    88a2:	808a      	strh	r2, [r1, #4]
        linkAdrParams->NbRep = payload[4];
    88a4:	7900      	ldrb	r0, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
    88a6:	0642      	lsls	r2, r0, #25
    88a8:	0f52      	lsrs	r2, r2, #29
    88aa:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
    88ac:	4003      	ands	r3, r0
    88ae:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
    88b0:	2305      	movs	r3, #5
    88b2:	e7e8      	b.n	8886 <RegionCommonParseLinkAdrReq+0xa>

000088b4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
    88b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    88b6:	46de      	mov	lr, fp
    88b8:	4657      	mov	r7, sl
    88ba:	464e      	mov	r6, r9
    88bc:	4645      	mov	r5, r8
    88be:	b5e0      	push	{r5, r6, r7, lr}
    88c0:	b087      	sub	sp, #28
    88c2:	0004      	movs	r4, r0
    88c4:	9104      	str	r1, [sp, #16]
    88c6:	9205      	str	r2, [sp, #20]
    88c8:	469a      	mov	sl, r3
    uint8_t status = verifyParams->Status;
    88ca:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
    88cc:	2306      	movs	r3, #6
    88ce:	56c3      	ldrsb	r3, [r0, r3]
    88d0:	4698      	mov	r8, r3
    int8_t txPower = verifyParams->TxPower;
    88d2:	2707      	movs	r7, #7
    88d4:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
    88d6:	7a06      	ldrb	r6, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
    88d8:	7943      	ldrb	r3, [r0, #5]
    88da:	2b00      	cmp	r3, #0
    88dc:	d01e      	beq.n	891c <RegionCommonLinkAdrReqVerifyParams+0x68>
    int8_t nbRepetitions = verifyParams->NbRep;
    88de:	b273      	sxtb	r3, r6
    88e0:	9303      	str	r3, [sp, #12]
        datarate = verifyParams->CurrentDatarate;
        txPower = verifyParams->CurrentTxPower;
        nbRepetitions = verifyParams->CurrentNbRep;
    }

    if( status != 0 )
    88e2:	2d00      	cmp	r5, #0
    88e4:	d04d      	beq.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( ( verifyParams->Version.Fields.Minor >= 1 ) && ( datarate == 0xF ) )
    88e6:	78a3      	ldrb	r3, [r4, #2]
    88e8:	4699      	mov	r9, r3
    88ea:	2b00      	cmp	r3, #0
    88ec:	d02f      	beq.n	894e <RegionCommonLinkAdrReqVerifyParams+0x9a>
    88ee:	4643      	mov	r3, r8
    88f0:	2b0f      	cmp	r3, #15
    88f2:	d01c      	beq.n	892e <RegionCommonLinkAdrReqVerifyParams+0x7a>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
    88f4:	2314      	movs	r3, #20
    88f6:	56e3      	ldrsb	r3, [r4, r3]
    88f8:	7b20      	ldrb	r0, [r4, #12]
    88fa:	69a2      	ldr	r2, [r4, #24]
    88fc:	9201      	str	r2, [sp, #4]
    88fe:	2215      	movs	r2, #21
    8900:	56a2      	ldrsb	r2, [r4, r2]
    8902:	9200      	str	r2, [sp, #0]
    8904:	4642      	mov	r2, r8
    8906:	6921      	ldr	r1, [r4, #16]
    8908:	4e2c      	ldr	r6, [pc, #176]	; (89bc <RegionCommonLinkAdrReqVerifyParams+0x108>)
    890a:	47b0      	blx	r6
    890c:	2800      	cmp	r0, #0
    890e:	d111      	bne.n	8934 <RegionCommonLinkAdrReqVerifyParams+0x80>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
    8910:	2302      	movs	r3, #2
    8912:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( (  verifyParams->Version.Fields.Minor >= 1 ) && ( txPower == 0xF ) )
    8914:	464b      	mov	r3, r9
    8916:	2b00      	cmp	r3, #0
    8918:	d00e      	beq.n	8938 <RegionCommonLinkAdrReqVerifyParams+0x84>
    891a:	e00b      	b.n	8934 <RegionCommonLinkAdrReqVerifyParams+0x80>
        datarate = verifyParams->CurrentDatarate;
    891c:	2309      	movs	r3, #9
    891e:	56c3      	ldrsb	r3, [r0, r3]
    8920:	4698      	mov	r8, r3
        txPower = verifyParams->CurrentTxPower;
    8922:	270a      	movs	r7, #10
    8924:	57c7      	ldrsb	r7, [r0, r7]
        nbRepetitions = verifyParams->CurrentNbRep;
    8926:	230b      	movs	r3, #11
    8928:	56c3      	ldrsb	r3, [r0, r3]
    892a:	9303      	str	r3, [sp, #12]
    892c:	e7d9      	b.n	88e2 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            datarate =  verifyParams->CurrentDatarate;
    892e:	2309      	movs	r3, #9
    8930:	56e3      	ldrsb	r3, [r4, r3]
    8932:	4698      	mov	r8, r3
        if( (  verifyParams->Version.Fields.Minor >= 1 ) && ( txPower == 0xF ) )
    8934:	2f0f      	cmp	r7, #15
    8936:	d019      	beq.n	896c <RegionCommonLinkAdrReqVerifyParams+0xb8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
    8938:	231d      	movs	r3, #29
    893a:	56e3      	ldrsb	r3, [r4, r3]
    893c:	221c      	movs	r2, #28
    893e:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
    8940:	429f      	cmp	r7, r3
    8942:	db2f      	blt.n	89a4 <RegionCommonLinkAdrReqVerifyParams+0xf0>
    8944:	4297      	cmp	r7, r2
    8946:	dd2e      	ble.n	89a6 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
    8948:	2304      	movs	r3, #4
    894a:	439d      	bics	r5, r3
    894c:	e02b      	b.n	89a6 <RegionCommonLinkAdrReqVerifyParams+0xf2>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
    894e:	2314      	movs	r3, #20
    8950:	56e3      	ldrsb	r3, [r4, r3]
    8952:	7b20      	ldrb	r0, [r4, #12]
    8954:	69a2      	ldr	r2, [r4, #24]
    8956:	9201      	str	r2, [sp, #4]
    8958:	2215      	movs	r2, #21
    895a:	56a2      	ldrsb	r2, [r4, r2]
    895c:	9200      	str	r2, [sp, #0]
    895e:	4642      	mov	r2, r8
    8960:	6921      	ldr	r1, [r4, #16]
    8962:	4e16      	ldr	r6, [pc, #88]	; (89bc <RegionCommonLinkAdrReqVerifyParams+0x108>)
    8964:	47b0      	blx	r6
    8966:	2800      	cmp	r0, #0
    8968:	d1e6      	bne.n	8938 <RegionCommonLinkAdrReqVerifyParams+0x84>
    896a:	e7d1      	b.n	8910 <RegionCommonLinkAdrReqVerifyParams+0x5c>
            txPower =  verifyParams->CurrentTxPower;
    896c:	270a      	movs	r7, #10
    896e:	57e7      	ldrsb	r7, [r4, r7]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
    8970:	2d07      	cmp	r5, #7
    8972:	d106      	bne.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
    8974:	2507      	movs	r5, #7
                nbRepetitions = 1;
            }
        }
        else
        {
            if( nbRepetitions == 0 )
    8976:	9b03      	ldr	r3, [sp, #12]
    8978:	2b00      	cmp	r3, #0
    897a:	d102      	bne.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
            {  // Keep the current NbTrans value unchanged.
                nbRepetitions = verifyParams->CurrentNbRep;
    897c:	230b      	movs	r3, #11
    897e:	56e3      	ldrsb	r3, [r4, r3]
    8980:	9303      	str	r3, [sp, #12]
            }
        }
    }

    // Apply changes
    *dr = datarate;
    8982:	9b04      	ldr	r3, [sp, #16]
    8984:	4642      	mov	r2, r8
    8986:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
    8988:	9b05      	ldr	r3, [sp, #20]
    898a:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
    898c:	4653      	mov	r3, sl
    898e:	466a      	mov	r2, sp
    8990:	7b12      	ldrb	r2, [r2, #12]
    8992:	701a      	strb	r2, [r3, #0]

    return status;
}
    8994:	0028      	movs	r0, r5
    8996:	b007      	add	sp, #28
    8998:	bc3c      	pop	{r2, r3, r4, r5}
    899a:	4690      	mov	r8, r2
    899c:	4699      	mov	r9, r3
    899e:	46a2      	mov	sl, r4
    89a0:	46ab      	mov	fp, r5
    89a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                txPower = verifyParams->MaxTxPower;
    89a4:	001f      	movs	r7, r3
    if( status == 0x07 )
    89a6:	2d07      	cmp	r5, #7
    89a8:	d1eb      	bne.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
        if( verifyParams->Version.Fields.Minor < 1 )
    89aa:	464b      	mov	r3, r9
    89ac:	2b00      	cmp	r3, #0
    89ae:	d1e1      	bne.n	8974 <RegionCommonLinkAdrReqVerifyParams+0xc0>
            if( nbRepetitions == 0 )
    89b0:	9b03      	ldr	r3, [sp, #12]
    89b2:	2b00      	cmp	r3, #0
    89b4:	d1e5      	bne.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
                nbRepetitions = 1;
    89b6:	3301      	adds	r3, #1
    89b8:	9303      	str	r3, [sp, #12]
    89ba:	e7e2      	b.n	8982 <RegionCommonLinkAdrReqVerifyParams+0xce>
    89bc:	00008645 	.word	0x00008645

000089c0 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    89c0:	b5d0      	push	{r4, r6, r7, lr}
    89c2:	000c      	movs	r4, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
    89c4:	2301      	movs	r3, #1
    89c6:	4083      	lsls	r3, r0
    89c8:	0018      	movs	r0, r3
    89ca:	4b09      	ldr	r3, [pc, #36]	; (89f0 <RegionCommonComputeSymbolTimeLoRa+0x30>)
    89cc:	4798      	blx	r3
    89ce:	0006      	movs	r6, r0
    89d0:	000f      	movs	r7, r1
    89d2:	0020      	movs	r0, r4
    89d4:	4b07      	ldr	r3, [pc, #28]	; (89f4 <RegionCommonComputeSymbolTimeLoRa+0x34>)
    89d6:	4798      	blx	r3
    89d8:	0002      	movs	r2, r0
    89da:	000b      	movs	r3, r1
    89dc:	0030      	movs	r0, r6
    89de:	0039      	movs	r1, r7
    89e0:	4c05      	ldr	r4, [pc, #20]	; (89f8 <RegionCommonComputeSymbolTimeLoRa+0x38>)
    89e2:	47a0      	blx	r4
    89e4:	2200      	movs	r2, #0
    89e6:	4b05      	ldr	r3, [pc, #20]	; (89fc <RegionCommonComputeSymbolTimeLoRa+0x3c>)
    89e8:	4c05      	ldr	r4, [pc, #20]	; (8a00 <RegionCommonComputeSymbolTimeLoRa+0x40>)
    89ea:	47a0      	blx	r4
}
    89ec:	bdd0      	pop	{r4, r6, r7, pc}
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	0000e965 	.word	0x0000e965
    89f4:	0000e9e9 	.word	0x0000e9e9
    89f8:	0000d569 	.word	0x0000d569
    89fc:	408f4000 	.word	0x408f4000
    8a00:	0000ddd1 	.word	0x0000ddd1

00008a04 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    8a04:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
    8a06:	4b04      	ldr	r3, [pc, #16]	; (8a18 <RegionCommonComputeSymbolTimeFsk+0x14>)
    8a08:	4798      	blx	r3
    8a0a:	0002      	movs	r2, r0
    8a0c:	000b      	movs	r3, r1
    8a0e:	2000      	movs	r0, #0
    8a10:	4902      	ldr	r1, [pc, #8]	; (8a1c <RegionCommonComputeSymbolTimeFsk+0x18>)
    8a12:	4c03      	ldr	r4, [pc, #12]	; (8a20 <RegionCommonComputeSymbolTimeFsk+0x1c>)
    8a14:	47a0      	blx	r4
}
    8a16:	bd10      	pop	{r4, pc}
    8a18:	0000e9e9 	.word	0x0000e9e9
    8a1c:	40200000 	.word	0x40200000
    8a20:	0000d569 	.word	0x0000d569

00008a24 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
    8a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a26:	b085      	sub	sp, #20
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	9101      	str	r1, [sp, #4]
    8a2c:	0015      	movs	r5, r2
    8a2e:	001c      	movs	r4, r3
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
    8a30:	1f10      	subs	r0, r2, #4
    8a32:	0040      	lsls	r0, r0, #1
    8a34:	4b23      	ldr	r3, [pc, #140]	; (8ac4 <RegionCommonComputeRxWindowParameters+0xa0>)
    8a36:	4798      	blx	r3
    8a38:	9a00      	ldr	r2, [sp, #0]
    8a3a:	9b01      	ldr	r3, [sp, #4]
    8a3c:	4e22      	ldr	r6, [pc, #136]	; (8ac8 <RegionCommonComputeRxWindowParameters+0xa4>)
    8a3e:	47b0      	blx	r6
    8a40:	0006      	movs	r6, r0
    8a42:	000f      	movs	r7, r1
    8a44:	0060      	lsls	r0, r4, #1
    8a46:	4b21      	ldr	r3, [pc, #132]	; (8acc <RegionCommonComputeRxWindowParameters+0xa8>)
    8a48:	4798      	blx	r3
    8a4a:	0002      	movs	r2, r0
    8a4c:	000b      	movs	r3, r1
    8a4e:	0030      	movs	r0, r6
    8a50:	0039      	movs	r1, r7
    8a52:	4e1f      	ldr	r6, [pc, #124]	; (8ad0 <RegionCommonComputeRxWindowParameters+0xac>)
    8a54:	47b0      	blx	r6
    8a56:	9a00      	ldr	r2, [sp, #0]
    8a58:	9b01      	ldr	r3, [sp, #4]
    8a5a:	4e1e      	ldr	r6, [pc, #120]	; (8ad4 <RegionCommonComputeRxWindowParameters+0xb0>)
    8a5c:	47b0      	blx	r6
    8a5e:	4b1e      	ldr	r3, [pc, #120]	; (8ad8 <RegionCommonComputeRxWindowParameters+0xb4>)
    8a60:	4798      	blx	r3
    8a62:	4b1e      	ldr	r3, [pc, #120]	; (8adc <RegionCommonComputeRxWindowParameters+0xb8>)
    8a64:	4798      	blx	r3
    8a66:	0004      	movs	r4, r0
    8a68:	42a8      	cmp	r0, r5
    8a6a:	d200      	bcs.n	8a6e <RegionCommonComputeRxWindowParameters+0x4a>
    8a6c:	002c      	movs	r4, r5
    8a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8a70:	601c      	str	r4, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
    8a72:	4f15      	ldr	r7, [pc, #84]	; (8ac8 <RegionCommonComputeRxWindowParameters+0xa4>)
    8a74:	2200      	movs	r2, #0
    8a76:	4b1a      	ldr	r3, [pc, #104]	; (8ae0 <RegionCommonComputeRxWindowParameters+0xbc>)
    8a78:	9800      	ldr	r0, [sp, #0]
    8a7a:	9901      	ldr	r1, [sp, #4]
    8a7c:	47b8      	blx	r7
    8a7e:	9002      	str	r0, [sp, #8]
    8a80:	9103      	str	r1, [sp, #12]
    8a82:	4e12      	ldr	r6, [pc, #72]	; (8acc <RegionCommonComputeRxWindowParameters+0xa8>)
    8a84:	0020      	movs	r0, r4
    8a86:	47b0      	blx	r6
    8a88:	9a00      	ldr	r2, [sp, #0]
    8a8a:	9b01      	ldr	r3, [sp, #4]
    8a8c:	47b8      	blx	r7
    8a8e:	2200      	movs	r2, #0
    8a90:	4b14      	ldr	r3, [pc, #80]	; (8ae4 <RegionCommonComputeRxWindowParameters+0xc0>)
    8a92:	47b8      	blx	r7
    8a94:	0002      	movs	r2, r0
    8a96:	000b      	movs	r3, r1
    8a98:	4c13      	ldr	r4, [pc, #76]	; (8ae8 <RegionCommonComputeRxWindowParameters+0xc4>)
    8a9a:	9802      	ldr	r0, [sp, #8]
    8a9c:	9903      	ldr	r1, [sp, #12]
    8a9e:	47a0      	blx	r4
    8aa0:	9000      	str	r0, [sp, #0]
    8aa2:	9101      	str	r1, [sp, #4]
    8aa4:	980a      	ldr	r0, [sp, #40]	; 0x28
    8aa6:	47b0      	blx	r6
    8aa8:	0002      	movs	r2, r0
    8aaa:	000b      	movs	r3, r1
    8aac:	9800      	ldr	r0, [sp, #0]
    8aae:	9901      	ldr	r1, [sp, #4]
    8ab0:	47a0      	blx	r4
    8ab2:	4b09      	ldr	r3, [pc, #36]	; (8ad8 <RegionCommonComputeRxWindowParameters+0xb4>)
    8ab4:	4798      	blx	r3
    8ab6:	4b0d      	ldr	r3, [pc, #52]	; (8aec <RegionCommonComputeRxWindowParameters+0xc8>)
    8ab8:	4798      	blx	r3
    8aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8abc:	6018      	str	r0, [r3, #0]
}
    8abe:	b005      	add	sp, #20
    8ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ac2:	46c0      	nop			; (mov r8, r8)
    8ac4:	0000e965 	.word	0x0000e965
    8ac8:	0000ddd1 	.word	0x0000ddd1
    8acc:	0000e9e9 	.word	0x0000e9e9
    8ad0:	0000cf49 	.word	0x0000cf49
    8ad4:	0000d569 	.word	0x0000d569
    8ad8:	0000c305 	.word	0x0000c305
    8adc:	0000c9c9 	.word	0x0000c9c9
    8ae0:	40100000 	.word	0x40100000
    8ae4:	3fe00000 	.word	0x3fe00000
    8ae8:	0000e2d1 	.word	0x0000e2d1
    8aec:	0000e8fd 	.word	0x0000e8fd

00008af0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    8af0:	b570      	push	{r4, r5, r6, lr}
    8af2:	1c0d      	adds	r5, r1, #0
    8af4:	1c14      	adds	r4, r2, #0
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
    8af6:	0040      	lsls	r0, r0, #1
    8af8:	4b07      	ldr	r3, [pc, #28]	; (8b18 <RegionCommonComputeTxPower+0x28>)
    8afa:	4798      	blx	r3
    8afc:	1c01      	adds	r1, r0, #0
    8afe:	4e07      	ldr	r6, [pc, #28]	; (8b1c <RegionCommonComputeTxPower+0x2c>)
    8b00:	1c28      	adds	r0, r5, #0
    8b02:	47b0      	blx	r6
    8b04:	1c21      	adds	r1, r4, #0
    8b06:	47b0      	blx	r6
    8b08:	4b05      	ldr	r3, [pc, #20]	; (8b20 <RegionCommonComputeTxPower+0x30>)
    8b0a:	4798      	blx	r3
    8b0c:	4b05      	ldr	r3, [pc, #20]	; (8b24 <RegionCommonComputeTxPower+0x34>)
    8b0e:	4798      	blx	r3
    8b10:	4b05      	ldr	r3, [pc, #20]	; (8b28 <RegionCommonComputeTxPower+0x38>)
    8b12:	4798      	blx	r3

    return phyTxPower;
    8b14:	b240      	sxtb	r0, r0
}
    8b16:	bd70      	pop	{r4, r5, r6, pc}
    8b18:	0000cebd 	.word	0x0000cebd
    8b1c:	0000cb85 	.word	0x0000cb85
    8b20:	0000ea59 	.word	0x0000ea59
    8b24:	0000c431 	.word	0x0000c431
    8b28:	0000e8fd 	.word	0x0000e8fd

00008b2c <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
    8b2c:	b530      	push	{r4, r5, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
    8b2e:	7ac2      	ldrb	r2, [r0, #11]
    8b30:	0053      	lsls	r3, r2, #1
    8b32:	189b      	adds	r3, r3, r2
    8b34:	009b      	lsls	r3, r3, #2
    8b36:	6802      	ldr	r2, [r0, #0]
    8b38:	4694      	mov	ip, r2
    8b3a:	4463      	add	r3, ip
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
    8b3c:	7a5a      	ldrb	r2, [r3, #9]
    8b3e:	0112      	lsls	r2, r2, #4
    8b40:	6843      	ldr	r3, [r0, #4]
    8b42:	189b      	adds	r3, r3, r2
    8b44:	881c      	ldrh	r4, [r3, #0]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
    8b46:	2100      	movs	r1, #0
    8b48:	60d9      	str	r1, [r3, #12]

    if( calcBackOffParams->Joined == false )
    8b4a:	7a41      	ldrb	r1, [r0, #9]
    8b4c:	2900      	cmp	r1, #0
    8b4e:	d123      	bne.n	8b98 <RegionCommonCalcBackOff+0x6c>
    8b50:	68c1      	ldr	r1, [r0, #12]
    if( elapsedTime.Seconds < 3600 )
    8b52:	4d19      	ldr	r5, [pc, #100]	; (8bb8 <RegionCommonCalcBackOff+0x8c>)
        dutyCycle = BACKOFF_DC_1_HOUR;
    8b54:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
    8b56:	42a9      	cmp	r1, r5
    8b58:	d903      	bls.n	8b62 <RegionCommonCalcBackOff+0x36>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
    8b5a:	4b18      	ldr	r3, [pc, #96]	; (8bbc <RegionCommonCalcBackOff+0x90>)
    8b5c:	4299      	cmp	r1, r3
    8b5e:	d90b      	bls.n	8b78 <RegionCommonCalcBackOff+0x4c>
        dutyCycle = BACKOFF_DC_24_HOURS;
    8b60:	4b17      	ldr	r3, [pc, #92]	; (8bc0 <RegionCommonCalcBackOff+0x94>)
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
    8b62:	7a81      	ldrb	r1, [r0, #10]
    8b64:	2900      	cmp	r1, #0
    8b66:	d10a      	bne.n	8b7e <RegionCommonCalcBackOff+0x52>
    8b68:	7a01      	ldrb	r1, [r0, #8]
    8b6a:	2900      	cmp	r1, #0
    8b6c:	d107      	bne.n	8b7e <RegionCommonCalcBackOff+0x52>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
    8b6e:	6843      	ldr	r3, [r0, #4]
    8b70:	189a      	adds	r2, r3, r2
    8b72:	2300      	movs	r3, #0
    8b74:	60d3      	str	r3, [r2, #12]
    8b76:	e00e      	b.n	8b96 <RegionCommonCalcBackOff+0x6a>
        dutyCycle = BACKOFF_DC_10_HOURS;
    8b78:	23fa      	movs	r3, #250	; 0xfa
    8b7a:	009b      	lsls	r3, r3, #2
    8b7c:	e7f1      	b.n	8b62 <RegionCommonCalcBackOff+0x36>
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
    8b7e:	6841      	ldr	r1, [r0, #4]
    8b80:	468c      	mov	ip, r1
    8b82:	4462      	add	r2, ip
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
    8b84:	1c21      	adds	r1, r4, #0
    8b86:	429c      	cmp	r4, r3
    8b88:	d200      	bcs.n	8b8c <RegionCommonCalcBackOff+0x60>
    8b8a:	1c19      	adds	r1, r3, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
    8b8c:	b289      	uxth	r1, r1
    8b8e:	3901      	subs	r1, #1
    8b90:	6943      	ldr	r3, [r0, #20]
    8b92:	4359      	muls	r1, r3
    8b94:	60d1      	str	r1, [r2, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
    8b96:	bd30      	pop	{r4, r5, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
    8b98:	7a83      	ldrb	r3, [r0, #10]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d104      	bne.n	8ba8 <RegionCommonCalcBackOff+0x7c>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
    8b9e:	6843      	ldr	r3, [r0, #4]
    8ba0:	189a      	adds	r2, r3, r2
    8ba2:	2300      	movs	r3, #0
    8ba4:	60d3      	str	r3, [r2, #12]
}
    8ba6:	e7f6      	b.n	8b96 <RegionCommonCalcBackOff+0x6a>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
    8ba8:	6843      	ldr	r3, [r0, #4]
    8baa:	469c      	mov	ip, r3
    8bac:	4462      	add	r2, ip
    8bae:	1e63      	subs	r3, r4, #1
    8bb0:	6941      	ldr	r1, [r0, #20]
    8bb2:	434b      	muls	r3, r1
    8bb4:	60d3      	str	r3, [r2, #12]
    8bb6:	e7ee      	b.n	8b96 <RegionCommonCalcBackOff+0x6a>
    8bb8:	00000e0f 	.word	0x00000e0f
    8bbc:	00009aaf 	.word	0x00009aaf
    8bc0:	00002710 	.word	0x00002710

00008bc4 <VerifyRfFreq>:

    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
    8bc4:	b570      	push	{r4, r5, r6, lr}
    8bc6:	0004      	movs	r4, r0
    8bc8:	000d      	movs	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
    8bca:	4b1c      	ldr	r3, [pc, #112]	; (8c3c <VerifyRfFreq+0x78>)
    8bcc:	6a1b      	ldr	r3, [r3, #32]
    8bce:	4798      	blx	r3
    8bd0:	2800      	cmp	r0, #0
    8bd2:	d023      	beq.n	8c1c <VerifyRfFreq+0x58>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
    8bd4:	4a1a      	ldr	r2, [pc, #104]	; (8c40 <VerifyRfFreq+0x7c>)
    8bd6:	4b1b      	ldr	r3, [pc, #108]	; (8c44 <VerifyRfFreq+0x80>)
    8bd8:	18e3      	adds	r3, r4, r3
    8bda:	4293      	cmp	r3, r2
    8bdc:	d91c      	bls.n	8c18 <VerifyRfFreq+0x54>
    {
        *band = 2;
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
    8bde:	4a1a      	ldr	r2, [pc, #104]	; (8c48 <VerifyRfFreq+0x84>)
    8be0:	4b1a      	ldr	r3, [pc, #104]	; (8c4c <VerifyRfFreq+0x88>)
    8be2:	18e3      	adds	r3, r4, r3
    8be4:	4293      	cmp	r3, r2
    8be6:	d91a      	bls.n	8c1e <VerifyRfFreq+0x5a>
    {
        *band = 0;
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
    8be8:	4a19      	ldr	r2, [pc, #100]	; (8c50 <VerifyRfFreq+0x8c>)
    8bea:	4b1a      	ldr	r3, [pc, #104]	; (8c54 <VerifyRfFreq+0x90>)
    8bec:	18e3      	adds	r3, r4, r3
    8bee:	4293      	cmp	r3, r2
    8bf0:	d918      	bls.n	8c24 <VerifyRfFreq+0x60>
    {
        *band = 1;
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
    8bf2:	4a19      	ldr	r2, [pc, #100]	; (8c58 <VerifyRfFreq+0x94>)
    8bf4:	4b19      	ldr	r3, [pc, #100]	; (8c5c <VerifyRfFreq+0x98>)
    8bf6:	18e3      	adds	r3, r4, r3
    8bf8:	4293      	cmp	r3, r2
    8bfa:	d916      	bls.n	8c2a <VerifyRfFreq+0x66>
    {
        *band = 2;
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
    8bfc:	4a18      	ldr	r2, [pc, #96]	; (8c60 <VerifyRfFreq+0x9c>)
    8bfe:	4b19      	ldr	r3, [pc, #100]	; (8c64 <VerifyRfFreq+0xa0>)
    8c00:	18e3      	adds	r3, r4, r3
    8c02:	4293      	cmp	r3, r2
    8c04:	d914      	bls.n	8c30 <VerifyRfFreq+0x6c>
    {
        *band = 3;
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
    8c06:	4b18      	ldr	r3, [pc, #96]	; (8c68 <VerifyRfFreq+0xa4>)
    8c08:	469c      	mov	ip, r3
    8c0a:	4464      	add	r4, ip
    8c0c:	4b17      	ldr	r3, [pc, #92]	; (8c6c <VerifyRfFreq+0xa8>)
    8c0e:	429c      	cmp	r4, r3
    8c10:	d811      	bhi.n	8c36 <VerifyRfFreq+0x72>
    {
        *band = 4;
    8c12:	2304      	movs	r3, #4
    8c14:	702b      	strb	r3, [r5, #0]
    8c16:	e001      	b.n	8c1c <VerifyRfFreq+0x58>
        *band = 2;
    8c18:	2302      	movs	r3, #2
    8c1a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
    8c1c:	bd70      	pop	{r4, r5, r6, pc}
        *band = 0;
    8c1e:	2300      	movs	r3, #0
    8c20:	702b      	strb	r3, [r5, #0]
    8c22:	e7fb      	b.n	8c1c <VerifyRfFreq+0x58>
        *band = 1;
    8c24:	2301      	movs	r3, #1
    8c26:	702b      	strb	r3, [r5, #0]
    8c28:	e7f8      	b.n	8c1c <VerifyRfFreq+0x58>
        *band = 2;
    8c2a:	2302      	movs	r3, #2
    8c2c:	702b      	strb	r3, [r5, #0]
    8c2e:	e7f5      	b.n	8c1c <VerifyRfFreq+0x58>
        *band = 3;
    8c30:	2303      	movs	r3, #3
    8c32:	702b      	strb	r3, [r5, #0]
    8c34:	e7f2      	b.n	8c1c <VerifyRfFreq+0x58>
        return false;
    8c36:	2000      	movs	r0, #0
    8c38:	e7f0      	b.n	8c1c <VerifyRfFreq+0x58>
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	0001407c 	.word	0x0001407c
    8c40:	001e847f 	.word	0x001e847f
    8c44:	cc8faa40 	.word	0xcc8faa40
    8c48:	002dc6c0 	.word	0x002dc6c0
    8c4c:	cc7125c0 	.word	0xcc7125c0
    8c50:	000927bf 	.word	0x000927bf
    8c54:	cc435eff 	.word	0xcc435eff
    8c58:	0007a120 	.word	0x0007a120
    8c5c:	cc38b0a0 	.word	0xcc38b0a0
    8c60:	0003d090 	.word	0x0003d090
    8c64:	cc2e0240 	.word	0xcc2e0240
    8c68:	cc296e60 	.word	0xcc296e60
    8c6c:	000493e0 	.word	0x000493e0

00008c70 <RegionEU868GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
    8c70:	b500      	push	{lr}
    8c72:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
    8c74:	2300      	movs	r3, #0
    8c76:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
    8c78:	7803      	ldrb	r3, [r0, #0]
    8c7a:	3b0a      	subs	r3, #10
    8c7c:	b2da      	uxtb	r2, r3
    8c7e:	2a2a      	cmp	r2, #42	; 0x2a
    8c80:	d80b      	bhi.n	8c9a <RegionEU868GetPhyParam+0x2a>
    8c82:	0093      	lsls	r3, r2, #2
    8c84:	4a37      	ldr	r2, [pc, #220]	; (8d64 <RegionEU868GetPhyParam+0xf4>)
    8c86:	58d3      	ldr	r3, [r2, r3]
    8c88:	469f      	mov	pc, r3
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
    8c8a:	2301      	movs	r3, #1
    8c8c:	56c3      	ldrsb	r3, [r0, r3]
    if( dr == minDr )
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d006      	beq.n	8ca0 <RegionEU868GetPhyParam+0x30>
        nextLowerDr = dr - 1;
    8c92:	3b01      	subs	r3, #1
    8c94:	b2db      	uxtb	r3, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
    8c96:	b25b      	sxtb	r3, r3
    8c98:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
    8c9a:	9800      	ldr	r0, [sp, #0]
    8c9c:	b003      	add	sp, #12
    8c9e:	bd00      	pop	{pc}
        nextLowerDr = minDr;
    8ca0:	2300      	movs	r3, #0
    8ca2:	e7f8      	b.n	8c96 <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_ADR_ACK_LIMIT;
    8ca4:	2340      	movs	r3, #64	; 0x40
    8ca6:	9300      	str	r3, [sp, #0]
            break;
    8ca8:	e7f7      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_ADR_ACK_DELAY;
    8caa:	2320      	movs	r3, #32
    8cac:	9300      	str	r3, [sp, #0]
            break;
    8cae:	e7f4      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
    8cb0:	2301      	movs	r3, #1
    8cb2:	56c3      	ldrsb	r3, [r0, r3]
    8cb4:	4a2c      	ldr	r2, [pc, #176]	; (8d68 <RegionEU868GetPhyParam+0xf8>)
    8cb6:	5cd3      	ldrb	r3, [r2, r3]
    8cb8:	9300      	str	r3, [sp, #0]
            break;
    8cba:	e7ee      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
    8cbc:	2201      	movs	r2, #1
    8cbe:	5682      	ldrsb	r2, [r0, r2]
    8cc0:	4b29      	ldr	r3, [pc, #164]	; (8d68 <RegionEU868GetPhyParam+0xf8>)
    8cc2:	189b      	adds	r3, r3, r2
    8cc4:	7a1b      	ldrb	r3, [r3, #8]
    8cc6:	9300      	str	r3, [sp, #0]
            break;
    8cc8:	e7e7      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
    8cca:	2301      	movs	r3, #1
    8ccc:	9300      	str	r3, [sp, #0]
            break;
    8cce:	e7e4      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
    8cd0:	4b26      	ldr	r3, [pc, #152]	; (8d6c <RegionEU868GetPhyParam+0xfc>)
    8cd2:	9300      	str	r3, [sp, #0]
            break;
    8cd4:	e7e1      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RECEIVE_DELAY1;
    8cd6:	23fa      	movs	r3, #250	; 0xfa
    8cd8:	009b      	lsls	r3, r3, #2
    8cda:	9300      	str	r3, [sp, #0]
            break;
    8cdc:	e7dd      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RECEIVE_DELAY2;
    8cde:	23fa      	movs	r3, #250	; 0xfa
    8ce0:	00db      	lsls	r3, r3, #3
    8ce2:	9300      	str	r3, [sp, #0]
            break;
    8ce4:	e7d9      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
    8ce6:	4b22      	ldr	r3, [pc, #136]	; (8d70 <RegionEU868GetPhyParam+0x100>)
    8ce8:	9300      	str	r3, [sp, #0]
            break;
    8cea:	e7d6      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
    8cec:	4b21      	ldr	r3, [pc, #132]	; (8d74 <RegionEU868GetPhyParam+0x104>)
    8cee:	9300      	str	r3, [sp, #0]
            break;
    8cf0:	e7d3      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_FCNT_GAP;
    8cf2:	2380      	movs	r3, #128	; 0x80
    8cf4:	01db      	lsls	r3, r3, #7
    8cf6:	9300      	str	r3, [sp, #0]
            break;
    8cf8:	e7cf      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
    8cfa:	21fa      	movs	r1, #250	; 0xfa
    8cfc:	0089      	lsls	r1, r1, #2
    8cfe:	481e      	ldr	r0, [pc, #120]	; (8d78 <RegionEU868GetPhyParam+0x108>)
    8d00:	4b1e      	ldr	r3, [pc, #120]	; (8d7c <RegionEU868GetPhyParam+0x10c>)
    8d02:	4798      	blx	r3
    8d04:	23fa      	movs	r3, #250	; 0xfa
    8d06:	00db      	lsls	r3, r3, #3
    8d08:	469c      	mov	ip, r3
    8d0a:	4460      	add	r0, ip
    8d0c:	9000      	str	r0, [sp, #0]
            break;
    8d0e:	e7c4      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_RX_WND_2_FREQ;
    8d10:	4b1b      	ldr	r3, [pc, #108]	; (8d80 <RegionEU868GetPhyParam+0x110>)
    8d12:	9300      	str	r3, [sp, #0]
            break;
    8d14:	e7c1      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
    8d16:	4b1b      	ldr	r3, [pc, #108]	; (8d84 <RegionEU868GetPhyParam+0x114>)
    8d18:	3311      	adds	r3, #17
    8d1a:	33ff      	adds	r3, #255	; 0xff
    8d1c:	9300      	str	r3, [sp, #0]
            break;
    8d1e:	e7bc      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
    8d20:	4b18      	ldr	r3, [pc, #96]	; (8d84 <RegionEU868GetPhyParam+0x114>)
    8d22:	3313      	adds	r3, #19
    8d24:	33ff      	adds	r3, #255	; 0xff
    8d26:	9300      	str	r3, [sp, #0]
            break;
    8d28:	e7b7      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
    8d2a:	2310      	movs	r3, #16
    8d2c:	9300      	str	r3, [sp, #0]
            break;
    8d2e:	e7b4      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Channels = NvmCtx.Channels;
    8d30:	4b14      	ldr	r3, [pc, #80]	; (8d84 <RegionEU868GetPhyParam+0x114>)
    8d32:	9300      	str	r3, [sp, #0]
            break;
    8d34:	e7b1      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
    8d36:	2383      	movs	r3, #131	; 0x83
    8d38:	05db      	lsls	r3, r3, #23
    8d3a:	9300      	str	r3, [sp, #0]
            break;
    8d3c:	e7ad      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
    8d3e:	4b12      	ldr	r3, [pc, #72]	; (8d88 <RegionEU868GetPhyParam+0x118>)
    8d40:	9300      	str	r3, [sp, #0]
            break;
    8d42:	e7aa      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
    8d44:	4b0e      	ldr	r3, [pc, #56]	; (8d80 <RegionEU868GetPhyParam+0x110>)
    8d46:	9300      	str	r3, [sp, #0]
            break;
    8d48:	e7a7      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
    8d4a:	2311      	movs	r3, #17
    8d4c:	466a      	mov	r2, sp
    8d4e:	7013      	strb	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
    8d50:	3b0f      	subs	r3, #15
    8d52:	7053      	strb	r3, [r2, #1]
            break;
    8d54:	e7a1      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
    8d56:	2303      	movs	r3, #3
    8d58:	9300      	str	r3, [sp, #0]
            break;
    8d5a:	e79e      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
    8d5c:	2303      	movs	r3, #3
    8d5e:	9300      	str	r3, [sp, #0]
            break;
    8d60:	e79b      	b.n	8c9a <RegionEU868GetPhyParam+0x2a>
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	00014444 	.word	0x00014444
    8d68:	00014544 	.word	0x00014544
    8d6c:	00000bb8 	.word	0x00000bb8
    8d70:	00001388 	.word	0x00001388
    8d74:	00001770 	.word	0x00001770
    8d78:	fffffc18 	.word	0xfffffc18
    8d7c:	00001e71 	.word	0x00001e71
    8d80:	33d3e608 	.word	0x33d3e608
    8d84:	2000155c 	.word	0x2000155c
    8d88:	4009999a 	.word	0x4009999a

00008d8c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    8d8c:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
    8d8e:	6842      	ldr	r2, [r0, #4]
    8d90:	4c06      	ldr	r4, [pc, #24]	; (8dac <RegionEU868SetBandTxDone+0x20>)
    8d92:	7801      	ldrb	r1, [r0, #0]
    8d94:	004b      	lsls	r3, r1, #1
    8d96:	185b      	adds	r3, r3, r1
    8d98:	009b      	lsls	r3, r3, #2
    8d9a:	18e3      	adds	r3, r4, r3
    8d9c:	7a59      	ldrb	r1, [r3, #9]
    8d9e:	310c      	adds	r1, #12
    8da0:	0109      	lsls	r1, r1, #4
    8da2:	1861      	adds	r1, r4, r1
    8da4:	7840      	ldrb	r0, [r0, #1]
    8da6:	4b02      	ldr	r3, [pc, #8]	; (8db0 <RegionEU868SetBandTxDone+0x24>)
    8da8:	4798      	blx	r3
}
    8daa:	bd10      	pop	{r4, pc}
    8dac:	2000155c 	.word	0x2000155c
    8db0:	00008799 	.word	0x00008799

00008db4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
    8db4:	b570      	push	{r4, r5, r6, lr}
    8db6:	b094      	sub	sp, #80	; 0x50
    8db8:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
    8dba:	2250      	movs	r2, #80	; 0x50
    8dbc:	2100      	movs	r1, #0
    8dbe:	4668      	mov	r0, sp
    8dc0:	4b2b      	ldr	r3, [pc, #172]	; (8e70 <RegionEU868InitDefaults+0xbc>)
    8dc2:	4798      	blx	r3
    8dc4:	2364      	movs	r3, #100	; 0x64
    8dc6:	466a      	mov	r2, sp
    8dc8:	8013      	strh	r3, [r2, #0]
    8dca:	8213      	strh	r3, [r2, #16]
    8dcc:	22fa      	movs	r2, #250	; 0xfa
    8dce:	0092      	lsls	r2, r2, #2
    8dd0:	4669      	mov	r1, sp
    8dd2:	840a      	strh	r2, [r1, #32]
    8dd4:	220a      	movs	r2, #10
    8dd6:	860a      	strh	r2, [r1, #48]	; 0x30
    8dd8:	3236      	adds	r2, #54	; 0x36
    8dda:	528b      	strh	r3, [r1, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
    8ddc:	7923      	ldrb	r3, [r4, #4]
    8dde:	2b01      	cmp	r3, #1
    8de0:	d032      	beq.n	8e48 <RegionEU868InitDefaults+0x94>
    8de2:	2b00      	cmp	r3, #0
    8de4:	d005      	beq.n	8df2 <RegionEU868InitDefaults+0x3e>
    8de6:	2b02      	cmp	r3, #2
    8de8:	d038      	beq.n	8e5c <RegionEU868InitDefaults+0xa8>
    8dea:	2b03      	cmp	r3, #3
    8dec:	d023      	beq.n	8e36 <RegionEU868InitDefaults+0x82>
        default:
        {
            break;
        }
    }
}
    8dee:	b014      	add	sp, #80	; 0x50
    8df0:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
    8df2:	4c20      	ldr	r4, [pc, #128]	; (8e74 <RegionEU868InitDefaults+0xc0>)
    8df4:	0020      	movs	r0, r4
    8df6:	30c0      	adds	r0, #192	; 0xc0
    8df8:	2250      	movs	r2, #80	; 0x50
    8dfa:	4669      	mov	r1, sp
    8dfc:	4b1e      	ldr	r3, [pc, #120]	; (8e78 <RegionEU868InitDefaults+0xc4>)
    8dfe:	4798      	blx	r3
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
    8e00:	4b1e      	ldr	r3, [pc, #120]	; (8e7c <RegionEU868InitDefaults+0xc8>)
    8e02:	001a      	movs	r2, r3
    8e04:	3210      	adds	r2, #16
    8e06:	0021      	movs	r1, r4
    8e08:	ca61      	ldmia	r2!, {r0, r5, r6}
    8e0a:	c161      	stmia	r1!, {r0, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
    8e0c:	001a      	movs	r2, r3
    8e0e:	321c      	adds	r2, #28
    8e10:	ca61      	ldmia	r2!, {r0, r5, r6}
    8e12:	c161      	stmia	r1!, {r0, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
    8e14:	0022      	movs	r2, r4
    8e16:	3218      	adds	r2, #24
    8e18:	3328      	adds	r3, #40	; 0x28
    8e1a:	cb23      	ldmia	r3!, {r0, r1, r5}
    8e1c:	c223      	stmia	r2!, {r0, r1, r5}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
    8e1e:	2207      	movs	r2, #7
    8e20:	2389      	movs	r3, #137	; 0x89
    8e22:	005b      	lsls	r3, r3, #1
    8e24:	52e2      	strh	r2, [r4, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
    8e26:	18e1      	adds	r1, r4, r3
    8e28:	0020      	movs	r0, r4
    8e2a:	3011      	adds	r0, #17
    8e2c:	30ff      	adds	r0, #255	; 0xff
    8e2e:	3a06      	subs	r2, #6
    8e30:	4b13      	ldr	r3, [pc, #76]	; (8e80 <RegionEU868InitDefaults+0xcc>)
    8e32:	4798      	blx	r3
            break;
    8e34:	e7db      	b.n	8dee <RegionEU868InitDefaults+0x3a>
            if( params->NvmCtx != 0 )
    8e36:	6821      	ldr	r1, [r4, #0]
    8e38:	2900      	cmp	r1, #0
    8e3a:	d0d8      	beq.n	8dee <RegionEU868InitDefaults+0x3a>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
    8e3c:	228a      	movs	r2, #138	; 0x8a
    8e3e:	0052      	lsls	r2, r2, #1
    8e40:	480c      	ldr	r0, [pc, #48]	; (8e74 <RegionEU868InitDefaults+0xc0>)
    8e42:	4b0d      	ldr	r3, [pc, #52]	; (8e78 <RegionEU868InitDefaults+0xc4>)
    8e44:	4798      	blx	r3
    8e46:	e7d2      	b.n	8dee <RegionEU868InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
    8e48:	4b0a      	ldr	r3, [pc, #40]	; (8e74 <RegionEU868InitDefaults+0xc0>)
    8e4a:	2188      	movs	r1, #136	; 0x88
    8e4c:	0049      	lsls	r1, r1, #1
    8e4e:	5a5a      	ldrh	r2, [r3, r1]
    8e50:	2089      	movs	r0, #137	; 0x89
    8e52:	0040      	lsls	r0, r0, #1
    8e54:	5a18      	ldrh	r0, [r3, r0]
    8e56:	4302      	orrs	r2, r0
    8e58:	525a      	strh	r2, [r3, r1]
            break;
    8e5a:	e7c8      	b.n	8dee <RegionEU868InitDefaults+0x3a>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
    8e5c:	4805      	ldr	r0, [pc, #20]	; (8e74 <RegionEU868InitDefaults+0xc0>)
    8e5e:	0001      	movs	r1, r0
    8e60:	3113      	adds	r1, #19
    8e62:	31ff      	adds	r1, #255	; 0xff
    8e64:	3011      	adds	r0, #17
    8e66:	30ff      	adds	r0, #255	; 0xff
    8e68:	2201      	movs	r2, #1
    8e6a:	4b05      	ldr	r3, [pc, #20]	; (8e80 <RegionEU868InitDefaults+0xcc>)
    8e6c:	4798      	blx	r3
}
    8e6e:	e7be      	b.n	8dee <RegionEU868InitDefaults+0x3a>
    8e70:	0000ebd9 	.word	0x0000ebd9
    8e74:	2000155c 	.word	0x2000155c
    8e78:	00001e91 	.word	0x00001e91
    8e7c:	00014544 	.word	0x00014544
    8e80:	00008775 	.word	0x00008775

00008e84 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
    8e84:	238a      	movs	r3, #138	; 0x8a
    8e86:	005b      	lsls	r3, r3, #1
    8e88:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
    8e8a:	4801      	ldr	r0, [pc, #4]	; (8e90 <RegionEU868GetNvmCtx+0xc>)
    8e8c:	4770      	bx	lr
    8e8e:	46c0      	nop			; (mov r8, r8)
    8e90:	2000155c 	.word	0x2000155c

00008e94 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    8e94:	b510      	push	{r4, lr}
    switch( phyAttribute )
    8e96:	3904      	subs	r1, #4
    8e98:	b2cb      	uxtb	r3, r1
    8e9a:	2b0a      	cmp	r3, #10
    8e9c:	d803      	bhi.n	8ea6 <RegionEU868Verify+0x12>
    8e9e:	0099      	lsls	r1, r3, #2
    8ea0:	4b17      	ldr	r3, [pc, #92]	; (8f00 <RegionEU868Verify+0x6c>)
    8ea2:	585b      	ldr	r3, [r3, r1]
    8ea4:	469f      	mov	pc, r3
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    8ea6:	2000      	movs	r0, #0
    8ea8:	e028      	b.n	8efc <RegionEU868Verify+0x68>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
    8eaa:	7800      	ldrb	r0, [r0, #0]
    8eac:	b240      	sxtb	r0, r0
    8eae:	2207      	movs	r2, #7
    8eb0:	2100      	movs	r1, #0
    8eb2:	4b14      	ldr	r3, [pc, #80]	; (8f04 <RegionEU868Verify+0x70>)
    8eb4:	4798      	blx	r3
    8eb6:	1e43      	subs	r3, r0, #1
    8eb8:	4198      	sbcs	r0, r3
    8eba:	b2c0      	uxtb	r0, r0
    8ebc:	e01e      	b.n	8efc <RegionEU868Verify+0x68>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
    8ebe:	7800      	ldrb	r0, [r0, #0]
    8ec0:	b240      	sxtb	r0, r0
    8ec2:	2205      	movs	r2, #5
    8ec4:	2100      	movs	r1, #0
    8ec6:	4b0f      	ldr	r3, [pc, #60]	; (8f04 <RegionEU868Verify+0x70>)
    8ec8:	4798      	blx	r3
    8eca:	1e43      	subs	r3, r0, #1
    8ecc:	4198      	sbcs	r0, r3
    8ece:	b2c0      	uxtb	r0, r0
    8ed0:	e014      	b.n	8efc <RegionEU868Verify+0x68>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
    8ed2:	7800      	ldrb	r0, [r0, #0]
    8ed4:	b240      	sxtb	r0, r0
    8ed6:	2207      	movs	r2, #7
    8ed8:	2100      	movs	r1, #0
    8eda:	4b0a      	ldr	r3, [pc, #40]	; (8f04 <RegionEU868Verify+0x70>)
    8edc:	4798      	blx	r3
    8ede:	1e43      	subs	r3, r0, #1
    8ee0:	4198      	sbcs	r0, r3
    8ee2:	b2c0      	uxtb	r0, r0
    8ee4:	e00a      	b.n	8efc <RegionEU868Verify+0x68>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
    8ee6:	7800      	ldrb	r0, [r0, #0]
    8ee8:	b240      	sxtb	r0, r0
    8eea:	2207      	movs	r2, #7
    8eec:	2100      	movs	r1, #0
    8eee:	4b05      	ldr	r3, [pc, #20]	; (8f04 <RegionEU868Verify+0x70>)
    8ef0:	4798      	blx	r3
    8ef2:	1e43      	subs	r3, r0, #1
    8ef4:	4198      	sbcs	r0, r3
    8ef6:	b2c0      	uxtb	r0, r0
    8ef8:	e000      	b.n	8efc <RegionEU868Verify+0x68>
            return EU868_DUTY_CYCLE_ENABLED;
    8efa:	2001      	movs	r0, #1
    }
}
    8efc:	bd10      	pop	{r4, pc}
    8efe:	46c0      	nop			; (mov r8, r8)
    8f00:	000144f0 	.word	0x000144f0
    8f04:	000086d9 	.word	0x000086d9

00008f08 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
    8f08:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
    8f0a:	7903      	ldrb	r3, [r0, #4]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d003      	beq.n	8f18 <RegionEU868ChanMaskSet+0x10>
    8f10:	2b01      	cmp	r3, #1
    8f12:	d00a      	beq.n	8f2a <RegionEU868ChanMaskSet+0x22>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        default:
            return false;
    8f14:	2000      	movs	r0, #0
    8f16:	e007      	b.n	8f28 <RegionEU868ChanMaskSet+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
    8f18:	6801      	ldr	r1, [r0, #0]
    8f1a:	2201      	movs	r2, #1
    8f1c:	4807      	ldr	r0, [pc, #28]	; (8f3c <RegionEU868ChanMaskSet+0x34>)
    8f1e:	3011      	adds	r0, #17
    8f20:	30ff      	adds	r0, #255	; 0xff
    8f22:	4b07      	ldr	r3, [pc, #28]	; (8f40 <RegionEU868ChanMaskSet+0x38>)
    8f24:	4798      	blx	r3
    }
    return true;
    8f26:	2001      	movs	r0, #1
}
    8f28:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
    8f2a:	6801      	ldr	r1, [r0, #0]
    8f2c:	2201      	movs	r2, #1
    8f2e:	4803      	ldr	r0, [pc, #12]	; (8f3c <RegionEU868ChanMaskSet+0x34>)
    8f30:	3013      	adds	r0, #19
    8f32:	30ff      	adds	r0, #255	; 0xff
    8f34:	4b02      	ldr	r3, [pc, #8]	; (8f40 <RegionEU868ChanMaskSet+0x38>)
    8f36:	4798      	blx	r3
    return true;
    8f38:	2001      	movs	r0, #1
            break;
    8f3a:	e7f5      	b.n	8f28 <RegionEU868ChanMaskSet+0x20>
    8f3c:	2000155c 	.word	0x2000155c
    8f40:	00008775 	.word	0x00008775

00008f44 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    8f44:	b570      	push	{r4, r5, r6, lr}
    8f46:	b086      	sub	sp, #24
    8f48:	000c      	movs	r4, r1
    8f4a:	0015      	movs	r5, r2
    8f4c:	001e      	movs	r6, r3
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
    8f4e:	1c03      	adds	r3, r0, #0
    8f50:	2807      	cmp	r0, #7
    8f52:	dd00      	ble.n	8f56 <RegionEU868ComputeRxWindowParameters+0x12>
    8f54:	2307      	movs	r3, #7
    8f56:	b25a      	sxtb	r2, r3
    8f58:	7073      	strb	r3, [r6, #1]
    switch( BandwidthsEU868[drIndex] )
    8f5a:	0091      	lsls	r1, r2, #2
    8f5c:	4b18      	ldr	r3, [pc, #96]	; (8fc0 <RegionEU868ComputeRxWindowParameters+0x7c>)
    8f5e:	58cb      	ldr	r3, [r1, r3]
    8f60:	4918      	ldr	r1, [pc, #96]	; (8fc4 <RegionEU868ComputeRxWindowParameters+0x80>)
    8f62:	428b      	cmp	r3, r1
    8f64:	d023      	beq.n	8fae <RegionEU868ComputeRxWindowParameters+0x6a>
            return 0;
    8f66:	4918      	ldr	r1, [pc, #96]	; (8fc8 <RegionEU868ComputeRxWindowParameters+0x84>)
    8f68:	468c      	mov	ip, r1
    8f6a:	4463      	add	r3, ip
    8f6c:	4259      	negs	r1, r3
    8f6e:	414b      	adcs	r3, r1
    8f70:	005b      	lsls	r3, r3, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
    8f72:	70b3      	strb	r3, [r6, #2]

    if( rxConfigParams->Datarate == DR_7 )
    8f74:	2a07      	cmp	r2, #7
    8f76:	d01c      	beq.n	8fb2 <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    8f78:	4b11      	ldr	r3, [pc, #68]	; (8fc0 <RegionEU868ComputeRxWindowParameters+0x7c>)
    8f7a:	0091      	lsls	r1, r2, #2
    8f7c:	58c9      	ldr	r1, [r1, r3]
    8f7e:	189a      	adds	r2, r3, r2
    8f80:	2320      	movs	r3, #32
    8f82:	5cd0      	ldrb	r0, [r2, r3]
    8f84:	4b11      	ldr	r3, [pc, #68]	; (8fcc <RegionEU868ComputeRxWindowParameters+0x88>)
    8f86:	4798      	blx	r3
    8f88:	9004      	str	r0, [sp, #16]
    8f8a:	9105      	str	r1, [sp, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
    8f8c:	4b10      	ldr	r3, [pc, #64]	; (8fd0 <RegionEU868ComputeRxWindowParameters+0x8c>)
    8f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8f90:	4798      	blx	r3
    8f92:	0033      	movs	r3, r6
    8f94:	330c      	adds	r3, #12
    8f96:	9302      	str	r3, [sp, #8]
    8f98:	3b04      	subs	r3, #4
    8f9a:	9301      	str	r3, [sp, #4]
    8f9c:	9000      	str	r0, [sp, #0]
    8f9e:	002b      	movs	r3, r5
    8fa0:	0022      	movs	r2, r4
    8fa2:	9804      	ldr	r0, [sp, #16]
    8fa4:	9905      	ldr	r1, [sp, #20]
    8fa6:	4c0b      	ldr	r4, [pc, #44]	; (8fd4 <RegionEU868ComputeRxWindowParameters+0x90>)
    8fa8:	47a0      	blx	r4
}
    8faa:	b006      	add	sp, #24
    8fac:	bd70      	pop	{r4, r5, r6, pc}
            return 1;
    8fae:	2301      	movs	r3, #1
    8fb0:	e7df      	b.n	8f72 <RegionEU868ComputeRxWindowParameters+0x2e>
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    8fb2:	2032      	movs	r0, #50	; 0x32
    8fb4:	4b08      	ldr	r3, [pc, #32]	; (8fd8 <RegionEU868ComputeRxWindowParameters+0x94>)
    8fb6:	4798      	blx	r3
    8fb8:	9004      	str	r0, [sp, #16]
    8fba:	9105      	str	r1, [sp, #20]
    8fbc:	e7e6      	b.n	8f8c <RegionEU868ComputeRxWindowParameters+0x48>
    8fbe:	46c0      	nop			; (mov r8, r8)
    8fc0:	0001451c 	.word	0x0001451c
    8fc4:	0003d090 	.word	0x0003d090
    8fc8:	fff85ee0 	.word	0xfff85ee0
    8fcc:	000089c1 	.word	0x000089c1
    8fd0:	0001407c 	.word	0x0001407c
    8fd4:	00008a25 	.word	0x00008a25
    8fd8:	00008a05 	.word	0x00008a05

00008fdc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
    8fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fde:	46c6      	mov	lr, r8
    8fe0:	b500      	push	{lr}
    8fe2:	b08a      	sub	sp, #40	; 0x28
    8fe4:	0004      	movs	r4, r0
    8fe6:	000d      	movs	r5, r1
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
    8fe8:	2601      	movs	r6, #1
    8fea:	5786      	ldrsb	r6, [r0, r6]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
    8fec:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
    8fee:	4b33      	ldr	r3, [pc, #204]	; (90bc <RegionEU868RxConfig+0xe0>)
    8ff0:	685b      	ldr	r3, [r3, #4]
    8ff2:	4798      	blx	r3
    {
        return false;
    8ff4:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d13c      	bne.n	9074 <RegionEU868RxConfig+0x98>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
    8ffa:	7ce3      	ldrb	r3, [r4, #19]
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d10a      	bne.n	9016 <RegionEU868RxConfig+0x3a>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
    9000:	7821      	ldrb	r1, [r4, #0]
    9002:	4a2f      	ldr	r2, [pc, #188]	; (90c0 <RegionEU868RxConfig+0xe4>)
    9004:	004b      	lsls	r3, r1, #1
    9006:	1858      	adds	r0, r3, r1
    9008:	0080      	lsls	r0, r0, #2
    900a:	5887      	ldr	r7, [r0, r2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
    900c:	1813      	adds	r3, r2, r0
    900e:	685b      	ldr	r3, [r3, #4]
    9010:	2b00      	cmp	r3, #0
    9012:	d000      	beq.n	9016 <RegionEU868RxConfig+0x3a>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
    9014:	001f      	movs	r7, r3
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
    9016:	4b2b      	ldr	r3, [pc, #172]	; (90c4 <RegionEU868RxConfig+0xe8>)
    9018:	199b      	adds	r3, r3, r6
    901a:	2220      	movs	r2, #32
    901c:	569b      	ldrsb	r3, [r3, r2]
    901e:	4698      	mov	r8, r3

    Radio.SetChannel( frequency );
    9020:	4b26      	ldr	r3, [pc, #152]	; (90bc <RegionEU868RxConfig+0xe0>)
    9022:	68db      	ldr	r3, [r3, #12]
    9024:	0038      	movs	r0, r7
    9026:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    9028:	2e07      	cmp	r6, #7
    902a:	d028      	beq.n	907e <RegionEU868RxConfig+0xa2>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
    902c:	78a1      	ldrb	r1, [r4, #2]
    902e:	7ca3      	ldrb	r3, [r4, #18]
    9030:	9309      	str	r3, [sp, #36]	; 0x24
    9032:	2301      	movs	r3, #1
    9034:	9308      	str	r3, [sp, #32]
    9036:	2300      	movs	r3, #0
    9038:	9307      	str	r3, [sp, #28]
    903a:	9306      	str	r3, [sp, #24]
    903c:	9305      	str	r3, [sp, #20]
    903e:	9304      	str	r3, [sp, #16]
    9040:	9303      	str	r3, [sp, #12]
    9042:	8922      	ldrh	r2, [r4, #8]
    9044:	9202      	str	r2, [sp, #8]
    9046:	2208      	movs	r2, #8
    9048:	9201      	str	r2, [sp, #4]
    904a:	9300      	str	r3, [sp, #0]
    904c:	4b1b      	ldr	r3, [pc, #108]	; (90bc <RegionEU868RxConfig+0xe0>)
    904e:	699f      	ldr	r7, [r3, #24]
    9050:	2301      	movs	r3, #1
    9052:	4642      	mov	r2, r8
    9054:	2001      	movs	r0, #1
    9056:	47b8      	blx	r7
        modem = MODEM_LORA;
    9058:	2001      	movs	r0, #1
    }

    if( rxConfig->RepeaterSupport == true )
    905a:	7c63      	ldrb	r3, [r4, #17]
    905c:	2b00      	cmp	r3, #0
    905e:	d02a      	beq.n	90b6 <RegionEU868RxConfig+0xda>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
    9060:	4b19      	ldr	r3, [pc, #100]	; (90c8 <RegionEU868RxConfig+0xec>)
    9062:	199b      	adds	r3, r3, r6
    9064:	7a19      	ldrb	r1, [r3, #8]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
    9066:	310d      	adds	r1, #13
    9068:	b2c9      	uxtb	r1, r1
    906a:	4b14      	ldr	r3, [pc, #80]	; (90bc <RegionEU868RxConfig+0xe0>)
    906c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    906e:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    9070:	702e      	strb	r6, [r5, #0]
    return true;
    9072:	2301      	movs	r3, #1
}
    9074:	0018      	movs	r0, r3
    9076:	b00a      	add	sp, #40	; 0x28
    9078:	bc04      	pop	{r2}
    907a:	4690      	mov	r8, r2
    907c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    907e:	22fa      	movs	r2, #250	; 0xfa
    9080:	0092      	lsls	r2, r2, #2
    9082:	4643      	mov	r3, r8
    9084:	435a      	muls	r2, r3
    9086:	7ca3      	ldrb	r3, [r4, #18]
    9088:	9309      	str	r3, [sp, #36]	; 0x24
    908a:	2300      	movs	r3, #0
    908c:	9308      	str	r3, [sp, #32]
    908e:	9307      	str	r3, [sp, #28]
    9090:	9306      	str	r3, [sp, #24]
    9092:	2101      	movs	r1, #1
    9094:	9105      	str	r1, [sp, #20]
    9096:	9304      	str	r3, [sp, #16]
    9098:	9303      	str	r3, [sp, #12]
    909a:	8923      	ldrh	r3, [r4, #8]
    909c:	9302      	str	r3, [sp, #8]
    909e:	2305      	movs	r3, #5
    90a0:	9301      	str	r3, [sp, #4]
    90a2:	4b0a      	ldr	r3, [pc, #40]	; (90cc <RegionEU868RxConfig+0xf0>)
    90a4:	9300      	str	r3, [sp, #0]
    90a6:	4b05      	ldr	r3, [pc, #20]	; (90bc <RegionEU868RxConfig+0xe0>)
    90a8:	699f      	ldr	r7, [r3, #24]
    90aa:	2300      	movs	r3, #0
    90ac:	4908      	ldr	r1, [pc, #32]	; (90d0 <RegionEU868RxConfig+0xf4>)
    90ae:	2000      	movs	r0, #0
    90b0:	47b8      	blx	r7
        modem = MODEM_FSK;
    90b2:	2000      	movs	r0, #0
    90b4:	e7d1      	b.n	905a <RegionEU868RxConfig+0x7e>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    90b6:	4b04      	ldr	r3, [pc, #16]	; (90c8 <RegionEU868RxConfig+0xec>)
    90b8:	5d99      	ldrb	r1, [r3, r6]
    90ba:	e7d4      	b.n	9066 <RegionEU868RxConfig+0x8a>
    90bc:	0001407c 	.word	0x0001407c
    90c0:	2000155c 	.word	0x2000155c
    90c4:	0001451c 	.word	0x0001451c
    90c8:	00014544 	.word	0x00014544
    90cc:	00014585 	.word	0x00014585
    90d0:	0000c350 	.word	0x0000c350

000090d4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    90d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90d6:	46ce      	mov	lr, r9
    90d8:	4647      	mov	r7, r8
    90da:	b580      	push	{r7, lr}
    90dc:	b08d      	sub	sp, #52	; 0x34
    90de:	0004      	movs	r4, r0
    90e0:	4688      	mov	r8, r1
    90e2:	0016      	movs	r6, r2
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    90e4:	2201      	movs	r2, #1
    90e6:	5682      	ldrsb	r2, [r0, r2]
    90e8:	4b3d      	ldr	r3, [pc, #244]	; (91e0 <RegionEU868TxConfig+0x10c>)
    90ea:	189b      	adds	r3, r3, r2
    90ec:	2120      	movs	r1, #32
    90ee:	565d      	ldrsb	r5, [r3, r1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
    90f0:	493c      	ldr	r1, [pc, #240]	; (91e4 <RegionEU868TxConfig+0x110>)
    90f2:	7800      	ldrb	r0, [r0, #0]
    90f4:	0043      	lsls	r3, r0, #1
    90f6:	181b      	adds	r3, r3, r0
    90f8:	009b      	lsls	r3, r3, #2
    90fa:	18cb      	adds	r3, r1, r3
    90fc:	7a5b      	ldrb	r3, [r3, #9]
    90fe:	330c      	adds	r3, #12
    9100:	011b      	lsls	r3, r3, #4
    9102:	18cb      	adds	r3, r1, r3
    txPowerResult =  MAX( txPower, maxBandTxPower );
    9104:	78a0      	ldrb	r0, [r4, #2]
    9106:	789b      	ldrb	r3, [r3, #2]
    9108:	1c19      	adds	r1, r3, #0
    910a:	b25b      	sxtb	r3, r3
    910c:	b247      	sxtb	r7, r0
    910e:	42bb      	cmp	r3, r7
    9110:	da00      	bge.n	9114 <RegionEU868TxConfig+0x40>
    9112:	1c01      	adds	r1, r0, #0
    9114:	b24f      	sxtb	r7, r1
    switch( BandwidthsEU868[drIndex] )
    9116:	0092      	lsls	r2, r2, #2
    9118:	4b31      	ldr	r3, [pc, #196]	; (91e0 <RegionEU868TxConfig+0x10c>)
    911a:	58d3      	ldr	r3, [r2, r3]
    911c:	4a32      	ldr	r2, [pc, #200]	; (91e8 <RegionEU868TxConfig+0x114>)
    911e:	4293      	cmp	r3, r2
    9120:	d041      	beq.n	91a6 <RegionEU868TxConfig+0xd2>
            return 0;
    9122:	4a32      	ldr	r2, [pc, #200]	; (91ec <RegionEU868TxConfig+0x118>)
    9124:	4694      	mov	ip, r2
    9126:	4463      	add	r3, ip
    9128:	4259      	negs	r1, r3
    912a:	4159      	adcs	r1, r3
    912c:	004b      	lsls	r3, r1, #1
    912e:	4699      	mov	r9, r3
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
    9130:	68a2      	ldr	r2, [r4, #8]
    9132:	6861      	ldr	r1, [r4, #4]
    9134:	0038      	movs	r0, r7
    9136:	4b2e      	ldr	r3, [pc, #184]	; (91f0 <RegionEU868TxConfig+0x11c>)
    9138:	4798      	blx	r3
    913a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
    913c:	7822      	ldrb	r2, [r4, #0]
    913e:	0053      	lsls	r3, r2, #1
    9140:	189b      	adds	r3, r3, r2
    9142:	009b      	lsls	r3, r3, #2
    9144:	4a27      	ldr	r2, [pc, #156]	; (91e4 <RegionEU868TxConfig+0x110>)
    9146:	5898      	ldr	r0, [r3, r2]
    9148:	4b2a      	ldr	r3, [pc, #168]	; (91f4 <RegionEU868TxConfig+0x120>)
    914a:	68db      	ldr	r3, [r3, #12]
    914c:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    914e:	2301      	movs	r3, #1
    9150:	56e3      	ldrsb	r3, [r4, r3]
    9152:	2b07      	cmp	r3, #7
    9154:	d02a      	beq.n	91ac <RegionEU868TxConfig+0xd8>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
    9156:	4b28      	ldr	r3, [pc, #160]	; (91f8 <RegionEU868TxConfig+0x124>)
    9158:	9308      	str	r3, [sp, #32]
    915a:	2300      	movs	r3, #0
    915c:	9307      	str	r3, [sp, #28]
    915e:	9306      	str	r3, [sp, #24]
    9160:	9305      	str	r3, [sp, #20]
    9162:	2201      	movs	r2, #1
    9164:	9204      	str	r2, [sp, #16]
    9166:	9303      	str	r3, [sp, #12]
    9168:	3308      	adds	r3, #8
    916a:	9302      	str	r3, [sp, #8]
    916c:	9201      	str	r2, [sp, #4]
    916e:	9500      	str	r5, [sp, #0]
    9170:	4b20      	ldr	r3, [pc, #128]	; (91f4 <RegionEU868TxConfig+0x120>)
    9172:	69dd      	ldr	r5, [r3, #28]
    9174:	464b      	mov	r3, r9
    9176:	2200      	movs	r2, #0
    9178:	990b      	ldr	r1, [sp, #44]	; 0x2c
    917a:	2001      	movs	r0, #1
    917c:	47a8      	blx	r5
        modem = MODEM_LORA;
    917e:	2301      	movs	r3, #1
    9180:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
    9182:	7b21      	ldrb	r1, [r4, #12]
    9184:	4d1b      	ldr	r5, [pc, #108]	; (91f4 <RegionEU868TxConfig+0x120>)
    9186:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9188:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    918a:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
    918c:	7b21      	ldrb	r1, [r4, #12]
    918e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9190:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9192:	4798      	blx	r3
    9194:	6030      	str	r0, [r6, #0]

    *txPower = txPowerLimited;
    9196:	4643      	mov	r3, r8
    9198:	701f      	strb	r7, [r3, #0]
    return true;
}
    919a:	2001      	movs	r0, #1
    919c:	b00d      	add	sp, #52	; 0x34
    919e:	bc0c      	pop	{r2, r3}
    91a0:	4690      	mov	r8, r2
    91a2:	4699      	mov	r9, r3
    91a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
    91a6:	2301      	movs	r3, #1
    91a8:	4699      	mov	r9, r3
    91aa:	e7c1      	b.n	9130 <RegionEU868TxConfig+0x5c>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
    91ac:	4b12      	ldr	r3, [pc, #72]	; (91f8 <RegionEU868TxConfig+0x124>)
    91ae:	9308      	str	r3, [sp, #32]
    91b0:	2300      	movs	r3, #0
    91b2:	9307      	str	r3, [sp, #28]
    91b4:	9306      	str	r3, [sp, #24]
    91b6:	9305      	str	r3, [sp, #20]
    91b8:	2201      	movs	r2, #1
    91ba:	9204      	str	r2, [sp, #16]
    91bc:	9303      	str	r3, [sp, #12]
    91be:	3204      	adds	r2, #4
    91c0:	9202      	str	r2, [sp, #8]
    91c2:	9301      	str	r3, [sp, #4]
    91c4:	23fa      	movs	r3, #250	; 0xfa
    91c6:	009b      	lsls	r3, r3, #2
    91c8:	436b      	muls	r3, r5
    91ca:	9300      	str	r3, [sp, #0]
    91cc:	4b09      	ldr	r3, [pc, #36]	; (91f4 <RegionEU868TxConfig+0x120>)
    91ce:	69dd      	ldr	r5, [r3, #28]
    91d0:	464b      	mov	r3, r9
    91d2:	4a0a      	ldr	r2, [pc, #40]	; (91fc <RegionEU868TxConfig+0x128>)
    91d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91d6:	2000      	movs	r0, #0
    91d8:	47a8      	blx	r5
        modem = MODEM_FSK;
    91da:	2300      	movs	r3, #0
    91dc:	930b      	str	r3, [sp, #44]	; 0x2c
    91de:	e7d0      	b.n	9182 <RegionEU868TxConfig+0xae>
    91e0:	0001451c 	.word	0x0001451c
    91e4:	2000155c 	.word	0x2000155c
    91e8:	0003d090 	.word	0x0003d090
    91ec:	fff85ee0 	.word	0xfff85ee0
    91f0:	00008af1 	.word	0x00008af1
    91f4:	0001407c 	.word	0x0001407c
    91f8:	00000bb8 	.word	0x00000bb8
    91fc:	000061a8 	.word	0x000061a8

00009200 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    9200:	b5f0      	push	{r4, r5, r6, r7, lr}
    9202:	46de      	mov	lr, fp
    9204:	4657      	mov	r7, sl
    9206:	464e      	mov	r6, r9
    9208:	4645      	mov	r5, r8
    920a:	b5e0      	push	{r5, r6, r7, lr}
    920c:	b091      	sub	sp, #68	; 0x44
    920e:	0006      	movs	r6, r0
    9210:	4689      	mov	r9, r1
    9212:	4693      	mov	fp, r2
    9214:	9303      	str	r3, [sp, #12]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
    9216:	2200      	movs	r2, #0
    9218:	2326      	movs	r3, #38	; 0x26
    921a:	a904      	add	r1, sp, #16
    921c:	468c      	mov	ip, r1
    921e:	4463      	add	r3, ip
    9220:	801a      	strh	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
    9222:	2400      	movs	r4, #0
    uint8_t status = 0x07;
    9224:	2307      	movs	r3, #7
    9226:	469a      	mov	sl, r3
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
    9228:	4b4f      	ldr	r3, [pc, #316]	; (9368 <RegionEU868LinkAdrReq+0x168>)
    922a:	4698      	mov	r8, r3
                        chMask |= 1 << i;
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
    922c:	2501      	movs	r5, #1
    922e:	9502      	str	r5, [sp, #8]
    9230:	4657      	mov	r7, sl
    while( bytesProcessed < linkAdrReq->PayloadSize )
    9232:	e003      	b.n	923c <RegionEU868LinkAdrReq+0x3c>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
    9234:	1e4b      	subs	r3, r1, #1
            status &= 0xFE; // Channel mask KO
    9236:	2706      	movs	r7, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
    9238:	2b04      	cmp	r3, #4
    923a:	d81f      	bhi.n	927c <RegionEU868LinkAdrReq+0x7c>
    while( bytesProcessed < linkAdrReq->PayloadSize )
    923c:	7a33      	ldrb	r3, [r6, #8]
    923e:	42a3      	cmp	r3, r4
    9240:	d941      	bls.n	92c6 <RegionEU868LinkAdrReq+0xc6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
    9242:	6873      	ldr	r3, [r6, #4]
    9244:	1918      	adds	r0, r3, r4
    9246:	a90e      	add	r1, sp, #56	; 0x38
    9248:	47c0      	blx	r8
        if( nextIndex == 0 )
    924a:	2800      	cmp	r0, #0
    924c:	d03b      	beq.n	92c6 <RegionEU868LinkAdrReq+0xc6>
        bytesProcessed += nextIndex;
    924e:	1824      	adds	r4, r4, r0
    9250:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
    9252:	ab0e      	add	r3, sp, #56	; 0x38
    9254:	8898      	ldrh	r0, [r3, #4]
    9256:	2226      	movs	r2, #38	; 0x26
    9258:	a904      	add	r1, sp, #16
    925a:	468c      	mov	ip, r1
    925c:	4462      	add	r2, ip
    925e:	8010      	strh	r0, [r2, #0]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
    9260:	78d9      	ldrb	r1, [r3, #3]
    9262:	2900      	cmp	r1, #0
    9264:	d1e6      	bne.n	9234 <RegionEU868LinkAdrReq+0x34>
            status &= 0xFE; // Channel mask KO
    9266:	2706      	movs	r7, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
    9268:	2800      	cmp	r0, #0
    926a:	d0e7      	beq.n	923c <RegionEU868LinkAdrReq+0x3c>
    926c:	4a3f      	ldr	r2, [pc, #252]	; (936c <RegionEU868LinkAdrReq+0x16c>)
{
    926e:	2300      	movs	r3, #0
    9270:	2700      	movs	r7, #0
    9272:	9701      	str	r7, [sp, #4]
    9274:	3707      	adds	r7, #7
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
    9276:	46a4      	mov	ip, r4
    9278:	000c      	movs	r4, r1
    927a:	e00f      	b.n	929c <RegionEU868LinkAdrReq+0x9c>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
    927c:	2906      	cmp	r1, #6
    927e:	d8dd      	bhi.n	923c <RegionEU868LinkAdrReq+0x3c>
    9280:	e7f4      	b.n	926c <RegionEU868LinkAdrReq+0x6c>
                    if( NvmCtx.Channels[i].Frequency != 0 )
    9282:	6811      	ldr	r1, [r2, #0]
    9284:	2900      	cmp	r1, #0
    9286:	d005      	beq.n	9294 <RegionEU868LinkAdrReq+0x94>
                        chMask |= 1 << i;
    9288:	0029      	movs	r1, r5
    928a:	4099      	lsls	r1, r3
    928c:	4308      	orrs	r0, r1
    928e:	b280      	uxth	r0, r0
    9290:	9902      	ldr	r1, [sp, #8]
    9292:	9101      	str	r1, [sp, #4]
    9294:	3301      	adds	r3, #1
    9296:	320c      	adds	r2, #12
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
    9298:	2b10      	cmp	r3, #16
    929a:	d00a      	beq.n	92b2 <RegionEU868LinkAdrReq+0xb2>
                if( linkAdrParams.ChMaskCtrl == 6 )
    929c:	2c06      	cmp	r4, #6
    929e:	d0f0      	beq.n	9282 <RegionEU868LinkAdrReq+0x82>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
    92a0:	0001      	movs	r1, r0
    92a2:	4119      	asrs	r1, r3
    92a4:	420d      	tst	r5, r1
    92a6:	d0f5      	beq.n	9294 <RegionEU868LinkAdrReq+0x94>
    92a8:	6811      	ldr	r1, [r2, #0]
    92aa:	2900      	cmp	r1, #0
    92ac:	d1f2      	bne.n	9294 <RegionEU868LinkAdrReq+0x94>
                        status &= 0xFE; // Channel mask KO
    92ae:	2706      	movs	r7, #6
    92b0:	e7f0      	b.n	9294 <RegionEU868LinkAdrReq+0x94>
    92b2:	4664      	mov	r4, ip
    92b4:	9b01      	ldr	r3, [sp, #4]
    92b6:	2b00      	cmp	r3, #0
    92b8:	d0c0      	beq.n	923c <RegionEU868LinkAdrReq+0x3c>
    92ba:	2326      	movs	r3, #38	; 0x26
    92bc:	aa04      	add	r2, sp, #16
    92be:	4694      	mov	ip, r2
    92c0:	4463      	add	r3, ip
    92c2:	8018      	strh	r0, [r3, #0]
    92c4:	e7ba      	b.n	923c <RegionEU868LinkAdrReq+0x3c>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    92c6:	a805      	add	r0, sp, #20
    92c8:	7107      	strb	r7, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
    92ca:	7ab3      	ldrb	r3, [r6, #10]
    92cc:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
    92ce:	ab0e      	add	r3, sp, #56	; 0x38
    92d0:	785a      	ldrb	r2, [r3, #1]
    92d2:	7182      	strb	r2, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
    92d4:	789a      	ldrb	r2, [r3, #2]
    92d6:	71c2      	strb	r2, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
    92d8:	781a      	ldrb	r2, [r3, #0]
    92da:	7202      	strb	r2, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
    92dc:	7af2      	ldrb	r2, [r6, #11]
    92de:	7242      	strb	r2, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
    92e0:	7b32      	ldrb	r2, [r6, #12]
    92e2:	7282      	strb	r2, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    92e4:	7b72      	ldrb	r2, [r6, #13]
    92e6:	72c2      	strb	r2, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
    92e8:	2210      	movs	r2, #16
    92ea:	7302      	strb	r2, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
    92ec:	3216      	adds	r2, #22
    92ee:	a904      	add	r1, sp, #16
    92f0:	468c      	mov	ip, r1
    92f2:	4462      	add	r2, ip
    92f4:	6102      	str	r2, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    92f6:	2200      	movs	r2, #0
    92f8:	7502      	strb	r2, [r0, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    92fa:	2107      	movs	r1, #7
    92fc:	7541      	strb	r1, [r0, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    92fe:	4d1b      	ldr	r5, [pc, #108]	; (936c <RegionEU868LinkAdrReq+0x16c>)
    9300:	6185      	str	r5, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    9302:	7701      	strb	r1, [r0, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    9304:	7742      	strb	r2, [r0, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
    9306:	6832      	ldr	r2, [r6, #0]
    9308:	9205      	str	r2, [sp, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    930a:	222a      	movs	r2, #42	; 0x2a
    930c:	4462      	add	r2, ip
    930e:	2129      	movs	r1, #41	; 0x29
    9310:	4461      	add	r1, ip
    9312:	4d17      	ldr	r5, [pc, #92]	; (9370 <RegionEU868LinkAdrReq+0x170>)
    9314:	47a8      	blx	r5
    9316:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
    9318:	2807      	cmp	r0, #7
    931a:	d013      	beq.n	9344 <RegionEU868LinkAdrReq+0x144>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
    931c:	ab0e      	add	r3, sp, #56	; 0x38
    931e:	785a      	ldrb	r2, [r3, #1]
    9320:	4649      	mov	r1, r9
    9322:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
    9324:	789a      	ldrb	r2, [r3, #2]
    9326:	4659      	mov	r1, fp
    9328:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	9a03      	ldr	r2, [sp, #12]
    932e:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
    9330:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9332:	701c      	strb	r4, [r3, #0]

    return status;
}
    9334:	0028      	movs	r0, r5
    9336:	b011      	add	sp, #68	; 0x44
    9338:	bc3c      	pop	{r2, r3, r4, r5}
    933a:	4690      	mov	r8, r2
    933c:	4699      	mov	r9, r3
    933e:	46a2      	mov	sl, r4
    9340:	46ab      	mov	fp, r5
    9342:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
    9344:	4e09      	ldr	r6, [pc, #36]	; (936c <RegionEU868LinkAdrReq+0x16c>)
    9346:	0030      	movs	r0, r6
    9348:	3011      	adds	r0, #17
    934a:	30ff      	adds	r0, #255	; 0xff
    934c:	2202      	movs	r2, #2
    934e:	2100      	movs	r1, #0
    9350:	4b08      	ldr	r3, [pc, #32]	; (9374 <RegionEU868LinkAdrReq+0x174>)
    9352:	4798      	blx	r3
        NvmCtx.ChannelsMask[0] = chMask;
    9354:	2326      	movs	r3, #38	; 0x26
    9356:	aa04      	add	r2, sp, #16
    9358:	4694      	mov	ip, r2
    935a:	4463      	add	r3, ip
    935c:	881a      	ldrh	r2, [r3, #0]
    935e:	2388      	movs	r3, #136	; 0x88
    9360:	005b      	lsls	r3, r3, #1
    9362:	52f2      	strh	r2, [r6, r3]
    9364:	e7da      	b.n	931c <RegionEU868LinkAdrReq+0x11c>
    9366:	46c0      	nop			; (mov r8, r8)
    9368:	0000887d 	.word	0x0000887d
    936c:	2000155c 	.word	0x2000155c
    9370:	000088b5 	.word	0x000088b5
    9374:	00001ec7 	.word	0x00001ec7

00009378 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
    9378:	b530      	push	{r4, r5, lr}
    937a:	b083      	sub	sp, #12
    937c:	0005      	movs	r5, r0
    uint8_t status = 0x07;
    uint8_t band = 0;
    937e:	466b      	mov	r3, sp
    9380:	1dd9      	adds	r1, r3, #7
    9382:	2300      	movs	r3, #0
    9384:	700b      	strb	r3, [r1, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
    9386:	6840      	ldr	r0, [r0, #4]
    9388:	4b0e      	ldr	r3, [pc, #56]	; (93c4 <RegionEU868RxParamSetupReq+0x4c>)
    938a:	4798      	blx	r3
    {
        status &= 0xFE; // Channel frequency KO
    938c:	0004      	movs	r4, r0
    938e:	1e60      	subs	r0, r4, #1
    9390:	4184      	sbcs	r4, r0
    9392:	3406      	adds	r4, #6
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
    9394:	2000      	movs	r0, #0
    9396:	5628      	ldrsb	r0, [r5, r0]
    9398:	2207      	movs	r2, #7
    939a:	2100      	movs	r1, #0
    939c:	4b0a      	ldr	r3, [pc, #40]	; (93c8 <RegionEU868RxParamSetupReq+0x50>)
    939e:	4798      	blx	r3
    93a0:	2800      	cmp	r0, #0
    93a2:	d101      	bne.n	93a8 <RegionEU868RxParamSetupReq+0x30>
    {
        status &= 0xFD; // Datarate KO
    93a4:	23fd      	movs	r3, #253	; 0xfd
    93a6:	401c      	ands	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
    93a8:	2001      	movs	r0, #1
    93aa:	5628      	ldrsb	r0, [r5, r0]
    93ac:	2205      	movs	r2, #5
    93ae:	2100      	movs	r1, #0
    93b0:	4b05      	ldr	r3, [pc, #20]	; (93c8 <RegionEU868RxParamSetupReq+0x50>)
    93b2:	4798      	blx	r3
    93b4:	2800      	cmp	r0, #0
    93b6:	d101      	bne.n	93bc <RegionEU868RxParamSetupReq+0x44>
    {
        status &= 0xFB; // Rx1DrOffset range KO
    93b8:	23fb      	movs	r3, #251	; 0xfb
    93ba:	401c      	ands	r4, r3
    }

    return status;
}
    93bc:	0020      	movs	r0, r4
    93be:	b003      	add	sp, #12
    93c0:	bd30      	pop	{r4, r5, pc}
    93c2:	46c0      	nop			; (mov r8, r8)
    93c4:	00008bc5 	.word	0x00008bc5
    93c8:	000086d9 	.word	0x000086d9

000093cc <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
}
    93cc:	2001      	movs	r0, #1
    93ce:	4240      	negs	r0, r0
    93d0:	4770      	bx	lr
	...

000093d4 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    93d4:	b510      	push	{r4, lr}
    93d6:	b082      	sub	sp, #8
    93d8:	0004      	movs	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
    93da:	466b      	mov	r3, sp
    93dc:	1dd9      	adds	r1, r3, #7
    93de:	2300      	movs	r3, #0
    93e0:	700b      	strb	r3, [r1, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
    93e2:	6840      	ldr	r0, [r0, #4]
    93e4:	4b12      	ldr	r3, [pc, #72]	; (9430 <RegionEU868DlChannelReq+0x5c>)
    93e6:	4798      	blx	r3
    93e8:	2800      	cmp	r0, #0
    93ea:	d114      	bne.n	9416 <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
    93ec:	7822      	ldrb	r2, [r4, #0]
    93ee:	0053      	lsls	r3, r2, #1
    93f0:	189b      	adds	r3, r3, r2
    93f2:	009b      	lsls	r3, r3, #2
    93f4:	4a0f      	ldr	r2, [pc, #60]	; (9434 <RegionEU868DlChannelReq+0x60>)
    93f6:	589b      	ldr	r3, [r3, r2]
    93f8:	2b00      	cmp	r3, #0
    93fa:	d001      	beq.n	9400 <RegionEU868DlChannelReq+0x2c>
        status &= 0xFE;
    93fc:	2002      	movs	r0, #2
    if( status == 0x03 )
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
    93fe:	e015      	b.n	942c <RegionEU868DlChannelReq+0x58>
        status &= 0xFE;
    9400:	2002      	movs	r0, #2
    9402:	e011      	b.n	9428 <RegionEU868DlChannelReq+0x54>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    9404:	6861      	ldr	r1, [r4, #4]
    9406:	0053      	lsls	r3, r2, #1
    9408:	189b      	adds	r3, r3, r2
    940a:	009b      	lsls	r3, r3, #2
    940c:	4a09      	ldr	r2, [pc, #36]	; (9434 <RegionEU868DlChannelReq+0x60>)
    940e:	18d3      	adds	r3, r2, r3
    9410:	6059      	str	r1, [r3, #4]
    9412:	2003      	movs	r0, #3
    9414:	e00a      	b.n	942c <RegionEU868DlChannelReq+0x58>
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
    9416:	7822      	ldrb	r2, [r4, #0]
    9418:	0053      	lsls	r3, r2, #1
    941a:	189b      	adds	r3, r3, r2
    941c:	009b      	lsls	r3, r3, #2
    941e:	4905      	ldr	r1, [pc, #20]	; (9434 <RegionEU868DlChannelReq+0x60>)
    9420:	585b      	ldr	r3, [r3, r1]
    uint8_t status = 0x03;
    9422:	2003      	movs	r0, #3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
    9424:	2b00      	cmp	r3, #0
    9426:	d1ed      	bne.n	9404 <RegionEU868DlChannelReq+0x30>
        status &= 0xFD;
    9428:	2302      	movs	r3, #2
    942a:	4398      	bics	r0, r3
}
    942c:	b002      	add	sp, #8
    942e:	bd10      	pop	{r4, pc}
    9430:	00008bc5 	.word	0x00008bc5
    9434:	2000155c 	.word	0x2000155c

00009438 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr )
{
    return currentDr;
}
    9438:	4770      	bx	lr
	...

0000943c <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
    943c:	b510      	push	{r4, lr}
    943e:	b088      	sub	sp, #32
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
    9440:	4b0c      	ldr	r3, [pc, #48]	; (9474 <RegionEU868CalcBackOff+0x38>)
    9442:	9302      	str	r3, [sp, #8]
    calcBackOffParams.Bands = NvmCtx.Bands;
    9444:	33c0      	adds	r3, #192	; 0xc0
    9446:	9303      	str	r3, [sp, #12]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
    9448:	7843      	ldrb	r3, [r0, #1]
    944a:	aa02      	add	r2, sp, #8
    944c:	7213      	strb	r3, [r2, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
    944e:	7803      	ldrb	r3, [r0, #0]
    9450:	7253      	strb	r3, [r2, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
    9452:	7883      	ldrb	r3, [r0, #2]
    9454:	7293      	strb	r3, [r2, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
    9456:	78c3      	ldrb	r3, [r0, #3]
    9458:	72d3      	strb	r3, [r2, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
    945a:	ab05      	add	r3, sp, #20
    945c:	1d02      	adds	r2, r0, #4
    945e:	ca12      	ldmia	r2!, {r1, r4}
    9460:	c312      	stmia	r3!, {r1, r4}
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
    9462:	68c3      	ldr	r3, [r0, #12]
    9464:	9301      	str	r3, [sp, #4]
    9466:	9307      	str	r3, [sp, #28]

    RegionCommonCalcBackOff( &calcBackOffParams );
    9468:	a802      	add	r0, sp, #8
    946a:	4b03      	ldr	r3, [pc, #12]	; (9478 <RegionEU868CalcBackOff+0x3c>)
    946c:	4798      	blx	r3
}
    946e:	b008      	add	sp, #32
    9470:	bd10      	pop	{r4, pc}
    9472:	46c0      	nop			; (mov r8, r8)
    9474:	2000155c 	.word	0x2000155c
    9478:	00008b2d 	.word	0x00008b2d

0000947c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    947c:	b5f0      	push	{r4, r5, r6, r7, lr}
    947e:	46de      	mov	lr, fp
    9480:	4657      	mov	r7, sl
    9482:	464e      	mov	r6, r9
    9484:	4645      	mov	r5, r8
    9486:	b5e0      	push	{r5, r6, r7, lr}
    9488:	b089      	sub	sp, #36	; 0x24
    948a:	0004      	movs	r4, r0
    948c:	9103      	str	r1, [sp, #12]
    948e:	4693      	mov	fp, r2
    9490:	001e      	movs	r6, r3
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    9492:	2210      	movs	r2, #16
    9494:	2100      	movs	r1, #0
    9496:	a804      	add	r0, sp, #16
    9498:	4b4b      	ldr	r3, [pc, #300]	; (95c8 <RegionEU868NextChannel+0x14c>)
    949a:	4798      	blx	r3
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
    949c:	2201      	movs	r2, #1
    949e:	2100      	movs	r1, #0
    94a0:	484a      	ldr	r0, [pc, #296]	; (95cc <RegionEU868NextChannel+0x150>)
    94a2:	3011      	adds	r0, #17
    94a4:	30ff      	adds	r0, #255	; 0xff
    94a6:	4b4a      	ldr	r3, [pc, #296]	; (95d0 <RegionEU868NextChannel+0x154>)
    94a8:	4798      	blx	r3
    94aa:	2800      	cmp	r0, #0
    94ac:	d106      	bne.n	94bc <RegionEU868NextChannel+0x40>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    94ae:	4947      	ldr	r1, [pc, #284]	; (95cc <RegionEU868NextChannel+0x150>)
    94b0:	2288      	movs	r2, #136	; 0x88
    94b2:	0052      	lsls	r2, r2, #1
    94b4:	5a8b      	ldrh	r3, [r1, r2]
    94b6:	2007      	movs	r0, #7
    94b8:	4303      	orrs	r3, r0
    94ba:	528b      	strh	r3, [r1, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
    94bc:	6825      	ldr	r5, [r4, #0]
    94be:	6860      	ldr	r0, [r4, #4]
    94c0:	4b44      	ldr	r3, [pc, #272]	; (95d4 <RegionEU868NextChannel+0x158>)
    94c2:	4798      	blx	r3
    94c4:	4285      	cmp	r5, r0
    94c6:	d84d      	bhi.n	9564 <RegionEU868NextChannel+0xe8>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
    94c8:	2300      	movs	r3, #0
    94ca:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
    94cc:	4d3f      	ldr	r5, [pc, #252]	; (95cc <RegionEU868NextChannel+0x150>)
    94ce:	002a      	movs	r2, r5
    94d0:	32c0      	adds	r2, #192	; 0xc0
    94d2:	7aa1      	ldrb	r1, [r4, #10]
    94d4:	7a60      	ldrb	r0, [r4, #9]
    94d6:	3305      	adds	r3, #5
    94d8:	4e3f      	ldr	r6, [pc, #252]	; (95d8 <RegionEU868NextChannel+0x15c>)
    94da:	47b0      	blx	r6
    94dc:	9002      	str	r0, [sp, #8]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
    94de:	7a63      	ldrb	r3, [r4, #9]
    94e0:	469a      	mov	sl, r3
    94e2:	2308      	movs	r3, #8
    94e4:	56e3      	ldrsb	r3, [r4, r3]
    94e6:	9301      	str	r3, [sp, #4]
    94e8:	2400      	movs	r4, #0
    94ea:	2300      	movs	r3, #0
    94ec:	4699      	mov	r9, r3
    94ee:	4698      	mov	r8, r3
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
    94f0:	4e36      	ldr	r6, [pc, #216]	; (95cc <RegionEU868NextChannel+0x150>)
    94f2:	e00a      	b.n	950a <RegionEU868NextChannel+0x8e>
                enabledChannels[nbEnabledChannels++] = i + j;
    94f4:	464b      	mov	r3, r9
    94f6:	3301      	adds	r3, #1
    94f8:	aa04      	add	r2, sp, #16
    94fa:	4649      	mov	r1, r9
    94fc:	5457      	strb	r7, [r2, r1]
    94fe:	b2db      	uxtb	r3, r3
    9500:	4699      	mov	r9, r3
    9502:	3401      	adds	r4, #1
    9504:	350c      	adds	r5, #12
        for( uint8_t j = 0; j < 16; j++ )
    9506:	2c10      	cmp	r4, #16
    9508:	d03d      	beq.n	9586 <RegionEU868NextChannel+0x10a>
    950a:	b2e7      	uxtb	r7, r4
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
    950c:	2388      	movs	r3, #136	; 0x88
    950e:	005b      	lsls	r3, r3, #1
    9510:	5af3      	ldrh	r3, [r6, r3]
    9512:	4123      	asrs	r3, r4
    9514:	07db      	lsls	r3, r3, #31
    9516:	d5f4      	bpl.n	9502 <RegionEU868NextChannel+0x86>
                if( channels[i + j].Frequency == 0 )
    9518:	9500      	str	r5, [sp, #0]
    951a:	682b      	ldr	r3, [r5, #0]
    951c:	2b00      	cmp	r3, #0
    951e:	d0f0      	beq.n	9502 <RegionEU868NextChannel+0x86>
                if( joined == false )
    9520:	4653      	mov	r3, sl
    9522:	2b00      	cmp	r3, #0
    9524:	d103      	bne.n	952e <RegionEU868NextChannel+0xb2>
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
    9526:	3307      	adds	r3, #7
    9528:	4123      	asrs	r3, r4
    952a:	07db      	lsls	r3, r3, #31
    952c:	d5e9      	bpl.n	9502 <RegionEU868NextChannel+0x86>
                                              channels[i + j].DrRange.Fields.Max ) == false )
    952e:	9b00      	ldr	r3, [sp, #0]
    9530:	7a19      	ldrb	r1, [r3, #8]
    9532:	b24a      	sxtb	r2, r1
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
    9534:	1112      	asrs	r2, r2, #4
    9536:	0709      	lsls	r1, r1, #28
    9538:	1709      	asrs	r1, r1, #28
    953a:	9801      	ldr	r0, [sp, #4]
    953c:	4b27      	ldr	r3, [pc, #156]	; (95dc <RegionEU868NextChannel+0x160>)
    953e:	469c      	mov	ip, r3
    9540:	47e0      	blx	ip
    9542:	2800      	cmp	r0, #0
    9544:	d0dd      	beq.n	9502 <RegionEU868NextChannel+0x86>
                if( bands[channels[i + j].Band].TimeOff > 0 )
    9546:	9b00      	ldr	r3, [sp, #0]
    9548:	7a5b      	ldrb	r3, [r3, #9]
    954a:	011b      	lsls	r3, r3, #4
    954c:	4a1f      	ldr	r2, [pc, #124]	; (95cc <RegionEU868NextChannel+0x150>)
    954e:	4694      	mov	ip, r2
    9550:	4463      	add	r3, ip
    9552:	33c0      	adds	r3, #192	; 0xc0
    9554:	68db      	ldr	r3, [r3, #12]
    9556:	2b00      	cmp	r3, #0
    9558:	d0cc      	beq.n	94f4 <RegionEU868NextChannel+0x78>
                    delayTransmission++;
    955a:	4643      	mov	r3, r8
    955c:	3301      	adds	r3, #1
    955e:	b2db      	uxtb	r3, r3
    9560:	4698      	mov	r8, r3
    9562:	e7ce      	b.n	9502 <RegionEU868NextChannel+0x86>
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
    9564:	6825      	ldr	r5, [r4, #0]
    9566:	6860      	ldr	r0, [r4, #4]
    9568:	4b1a      	ldr	r3, [pc, #104]	; (95d4 <RegionEU868NextChannel+0x158>)
    956a:	4798      	blx	r3
    956c:	1a2b      	subs	r3, r5, r0
    956e:	9302      	str	r3, [sp, #8]
    else
    {
        if( delayTx > 0 )
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
    9570:	465b      	mov	r3, fp
    9572:	9a02      	ldr	r2, [sp, #8]
    9574:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
    9576:	200b      	movs	r0, #11
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
    9578:	b009      	add	sp, #36	; 0x24
    957a:	bc3c      	pop	{r2, r3, r4, r5}
    957c:	4690      	mov	r8, r2
    957e:	4699      	mov	r9, r3
    9580:	46a2      	mov	sl, r4
    9582:	46ab      	mov	fp, r5
    9584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( nbEnabledChannels > 0 )
    9586:	464b      	mov	r3, r9
    9588:	2b00      	cmp	r3, #0
    958a:	d10e      	bne.n	95aa <RegionEU868NextChannel+0x12e>
        if( delayTx > 0 )
    958c:	4643      	mov	r3, r8
    958e:	2b00      	cmp	r3, #0
    9590:	d1ee      	bne.n	9570 <RegionEU868NextChannel+0xf4>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    9592:	490e      	ldr	r1, [pc, #56]	; (95cc <RegionEU868NextChannel+0x150>)
    9594:	2288      	movs	r2, #136	; 0x88
    9596:	0052      	lsls	r2, r2, #1
    9598:	5a8b      	ldrh	r3, [r1, r2]
    959a:	2007      	movs	r0, #7
    959c:	4303      	orrs	r3, r0
    959e:	528b      	strh	r3, [r1, r2]
        *time = 0;
    95a0:	2300      	movs	r3, #0
    95a2:	465a      	mov	r2, fp
    95a4:	6013      	str	r3, [r2, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    95a6:	200c      	movs	r0, #12
    95a8:	e7e6      	b.n	9578 <RegionEU868NextChannel+0xfc>
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    95aa:	4649      	mov	r1, r9
    95ac:	3901      	subs	r1, #1
    95ae:	2000      	movs	r0, #0
    95b0:	4b0b      	ldr	r3, [pc, #44]	; (95e0 <RegionEU868NextChannel+0x164>)
    95b2:	4798      	blx	r3
    95b4:	ab04      	add	r3, sp, #16
    95b6:	5c1b      	ldrb	r3, [r3, r0]
    95b8:	9a03      	ldr	r2, [sp, #12]
    95ba:	7013      	strb	r3, [r2, #0]
        *time = 0;
    95bc:	2300      	movs	r3, #0
    95be:	465a      	mov	r2, fp
    95c0:	6013      	str	r3, [r2, #0]
        return LORAMAC_STATUS_OK;
    95c2:	2000      	movs	r0, #0
    95c4:	e7d8      	b.n	9578 <RegionEU868NextChannel+0xfc>
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	0000ebd9 	.word	0x0000ebd9
    95cc:	2000155c 	.word	0x2000155c
    95d0:	00008715 	.word	0x00008715
    95d4:	0000c281 	.word	0x0000c281
    95d8:	000087a9 	.word	0x000087a9
    95dc:	000086d9 	.word	0x000086d9
    95e0:	00001e71 	.word	0x00001e71

000095e4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
    95e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95e6:	b083      	sub	sp, #12
    95e8:	0004      	movs	r4, r0
    uint8_t band = 0;
    95ea:	2200      	movs	r2, #0
    95ec:	466b      	mov	r3, sp
    95ee:	71da      	strb	r2, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
    95f0:	7905      	ldrb	r5, [r0, #4]

    if( id >= EU868_MAX_NB_CHANNELS )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    95f2:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
    95f4:	2d0f      	cmp	r5, #15
    95f6:	d901      	bls.n	95fc <RegionEU868ChannelAdd+0x18>

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = band;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
    95f8:	b003      	add	sp, #12
    95fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
    95fc:	6823      	ldr	r3, [r4, #0]
    95fe:	7a18      	ldrb	r0, [r3, #8]
    9600:	0700      	lsls	r0, r0, #28
    9602:	1700      	asrs	r0, r0, #28
    9604:	3207      	adds	r2, #7
    9606:	2100      	movs	r1, #0
    9608:	4e30      	ldr	r6, [pc, #192]	; (96cc <RegionEU868ChannelAdd+0xe8>)
    960a:	47b0      	blx	r6
    960c:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
    960e:	6823      	ldr	r3, [r4, #0]
    9610:	2008      	movs	r0, #8
    9612:	5618      	ldrsb	r0, [r3, r0]
    9614:	1100      	asrs	r0, r0, #4
    9616:	2207      	movs	r2, #7
    9618:	2100      	movs	r1, #0
    961a:	47b0      	blx	r6
        drInvalid = true;
    961c:	2601      	movs	r6, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
    961e:	2800      	cmp	r0, #0
    9620:	d002      	beq.n	9628 <RegionEU868ChannelAdd+0x44>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
    9622:	427e      	negs	r6, r7
    9624:	417e      	adcs	r6, r7
    9626:	b2f6      	uxtb	r6, r6
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
    9628:	6823      	ldr	r3, [r4, #0]
    962a:	7a18      	ldrb	r0, [r3, #8]
    962c:	0703      	lsls	r3, r0, #28
    962e:	171b      	asrs	r3, r3, #28
    9630:	b240      	sxtb	r0, r0
    9632:	1100      	asrs	r0, r0, #4
    9634:	4283      	cmp	r3, r0
    9636:	dd00      	ble.n	963a <RegionEU868ChannelAdd+0x56>
        drInvalid = true;
    9638:	2601      	movs	r6, #1
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    963a:	2d02      	cmp	r5, #2
    963c:	d821      	bhi.n	9682 <RegionEU868ChannelAdd+0x9e>
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
    963e:	2b00      	cmp	r3, #0
    9640:	dd00      	ble.n	9644 <RegionEU868ChannelAdd+0x60>
            drInvalid = true;
    9642:	2601      	movs	r6, #1
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
    9644:	2207      	movs	r2, #7
    9646:	2105      	movs	r1, #5
    9648:	4b20      	ldr	r3, [pc, #128]	; (96cc <RegionEU868ChannelAdd+0xe8>)
    964a:	4798      	blx	r3
    964c:	2800      	cmp	r0, #0
    964e:	d00d      	beq.n	966c <RegionEU868ChannelAdd+0x88>
        if( channelAdd->NewChannel->Frequency != NvmCtx.Channels[id].Frequency )
    9650:	6822      	ldr	r2, [r4, #0]
    9652:	006b      	lsls	r3, r5, #1
    9654:	195b      	adds	r3, r3, r5
    9656:	009b      	lsls	r3, r3, #2
    if( freqInvalid == false )
    9658:	6812      	ldr	r2, [r2, #0]
    965a:	491d      	ldr	r1, [pc, #116]	; (96d0 <RegionEU868ChannelAdd+0xec>)
    965c:	585b      	ldr	r3, [r3, r1]
    965e:	429a      	cmp	r2, r3
    9660:	d00f      	beq.n	9682 <RegionEU868ChannelAdd+0x9e>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    9662:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
    9664:	2e00      	cmp	r6, #0
    9666:	d0c7      	beq.n	95f8 <RegionEU868ChannelAdd+0x14>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    9668:	3002      	adds	r0, #2
    966a:	e7c5      	b.n	95f8 <RegionEU868ChannelAdd+0x14>
        if( channelAdd->NewChannel->Frequency != NvmCtx.Channels[id].Frequency )
    966c:	006b      	lsls	r3, r5, #1
    966e:	195b      	adds	r3, r3, r5
    9670:	009b      	lsls	r3, r3, #2
    9672:	6821      	ldr	r1, [r4, #0]
    if( freqInvalid == false )
    9674:	4a16      	ldr	r2, [pc, #88]	; (96d0 <RegionEU868ChannelAdd+0xec>)
    9676:	589a      	ldr	r2, [r3, r2]
    9678:	680b      	ldr	r3, [r1, #0]
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    967a:	2006      	movs	r0, #6
            drInvalid = true;
    967c:	2601      	movs	r6, #1
    if( freqInvalid == false )
    967e:	429a      	cmp	r2, r3
    9680:	d1ba      	bne.n	95f8 <RegionEU868ChannelAdd+0x14>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
    9682:	6823      	ldr	r3, [r4, #0]
    9684:	6818      	ldr	r0, [r3, #0]
    9686:	466b      	mov	r3, sp
    9688:	1dd9      	adds	r1, r3, #7
    968a:	4b12      	ldr	r3, [pc, #72]	; (96d4 <RegionEU868ChannelAdd+0xf0>)
    968c:	4798      	blx	r3
    968e:	2800      	cmp	r0, #0
    9690:	d0e7      	beq.n	9662 <RegionEU868ChannelAdd+0x7e>
        return LORAMAC_STATUS_DATARATE_INVALID;
    9692:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
    9694:	2e00      	cmp	r6, #0
    9696:	d1af      	bne.n	95f8 <RegionEU868ChannelAdd+0x14>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    9698:	6821      	ldr	r1, [r4, #0]
    969a:	4e0d      	ldr	r6, [pc, #52]	; (96d0 <RegionEU868ChannelAdd+0xec>)
    969c:	006c      	lsls	r4, r5, #1
    969e:	1960      	adds	r0, r4, r5
    96a0:	0080      	lsls	r0, r0, #2
    96a2:	1830      	adds	r0, r6, r0
    96a4:	220c      	movs	r2, #12
    96a6:	4b0c      	ldr	r3, [pc, #48]	; (96d8 <RegionEU868ChannelAdd+0xf4>)
    96a8:	4798      	blx	r3
    NvmCtx.Channels[id].Band = band;
    96aa:	1964      	adds	r4, r4, r5
    96ac:	00a4      	lsls	r4, r4, #2
    96ae:	1934      	adds	r4, r6, r4
    96b0:	466b      	mov	r3, sp
    96b2:	3307      	adds	r3, #7
    96b4:	781b      	ldrb	r3, [r3, #0]
    96b6:	7263      	strb	r3, [r4, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    96b8:	2188      	movs	r1, #136	; 0x88
    96ba:	0049      	lsls	r1, r1, #1
    96bc:	2201      	movs	r2, #1
    96be:	40aa      	lsls	r2, r5
    96c0:	5a73      	ldrh	r3, [r6, r1]
    96c2:	4313      	orrs	r3, r2
    96c4:	5273      	strh	r3, [r6, r1]
    return LORAMAC_STATUS_OK;
    96c6:	2000      	movs	r0, #0
    96c8:	e796      	b.n	95f8 <RegionEU868ChannelAdd+0x14>
    96ca:	46c0      	nop			; (mov r8, r8)
    96cc:	000086d9 	.word	0x000086d9
    96d0:	2000155c 	.word	0x2000155c
    96d4:	00008bc5 	.word	0x00008bc5
    96d8:	00001e91 	.word	0x00001e91

000096dc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
    96dc:	b570      	push	{r4, r5, r6, lr}
    uint8_t id = channelRemove->ChannelId;
    96de:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
    96e0:	2000      	movs	r0, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    96e2:	2c02      	cmp	r4, #2
    96e4:	d800      	bhi.n	96e8 <RegionEU868ChannelsRemove+0xc>

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
}
    96e6:	bd70      	pop	{r4, r5, r6, pc}
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
    96e8:	4d08      	ldr	r5, [pc, #32]	; (970c <RegionEU868ChannelsRemove+0x30>)
    96ea:	0060      	lsls	r0, r4, #1
    96ec:	1900      	adds	r0, r0, r4
    96ee:	0080      	lsls	r0, r0, #2
    96f0:	1828      	adds	r0, r5, r0
    96f2:	220c      	movs	r2, #12
    96f4:	2100      	movs	r1, #0
    96f6:	4b06      	ldr	r3, [pc, #24]	; (9710 <RegionEU868ChannelsRemove+0x34>)
    96f8:	4798      	blx	r3
    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
    96fa:	0028      	movs	r0, r5
    96fc:	3011      	adds	r0, #17
    96fe:	30ff      	adds	r0, #255	; 0xff
    9700:	2210      	movs	r2, #16
    9702:	0021      	movs	r1, r4
    9704:	4b03      	ldr	r3, [pc, #12]	; (9714 <RegionEU868ChannelsRemove+0x38>)
    9706:	4798      	blx	r3
    9708:	e7ed      	b.n	96e6 <RegionEU868ChannelsRemove+0xa>
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	2000155c 	.word	0x2000155c
    9710:	0000ebd9 	.word	0x0000ebd9
    9714:	000086ed 	.word	0x000086ed

00009718 <RegionEU868ApplyCFList>:
{
    9718:	b5f0      	push	{r4, r5, r6, r7, lr}
    971a:	46c6      	mov	lr, r8
    971c:	b500      	push	{lr}
    971e:	b086      	sub	sp, #24
    9720:	0006      	movs	r6, r0
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
    9722:	2250      	movs	r2, #80	; 0x50
    9724:	ab03      	add	r3, sp, #12
    9726:	721a      	strb	r2, [r3, #8]
    if( applyCFList->Size != 16 )
    9728:	7903      	ldrb	r3, [r0, #4]
    972a:	2b10      	cmp	r3, #16
    972c:	d003      	beq.n	9736 <RegionEU868ApplyCFList+0x1e>
}
    972e:	b006      	add	sp, #24
    9730:	bc04      	pop	{r2}
    9732:	4690      	mov	r8, r2
    9734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( applyCFList->Payload[15] != 0 )
    9736:	6803      	ldr	r3, [r0, #0]
    9738:	7bdb      	ldrb	r3, [r3, #15]
    973a:	2b00      	cmp	r3, #0
    973c:	d1f7      	bne.n	972e <RegionEU868ApplyCFList+0x16>
    973e:	2500      	movs	r5, #0
    9740:	2403      	movs	r4, #3
            RegionEU868ChannelsRemove( &channelRemove );
    9742:	4b16      	ldr	r3, [pc, #88]	; (979c <RegionEU868ApplyCFList+0x84>)
    9744:	4698      	mov	r8, r3
            RegionEU868ChannelAdd( &channelAdd );
    9746:	4f16      	ldr	r7, [pc, #88]	; (97a0 <RegionEU868ApplyCFList+0x88>)
    9748:	e01b      	b.n	9782 <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
    974a:	6832      	ldr	r2, [r6, #0]
    974c:	5d51      	ldrb	r1, [r2, r5]
    974e:	9103      	str	r1, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
    9750:	1952      	adds	r2, r2, r5
    9752:	7853      	ldrb	r3, [r2, #1]
    9754:	021b      	lsls	r3, r3, #8
    9756:	430b      	orrs	r3, r1
    9758:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
    975a:	7892      	ldrb	r2, [r2, #2]
    975c:	0412      	lsls	r2, r2, #16
    975e:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
    9760:	2264      	movs	r2, #100	; 0x64
    9762:	4353      	muls	r3, r2
    9764:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
    9766:	2200      	movs	r2, #0
    9768:	9204      	str	r2, [sp, #16]
        if( newChannel.Frequency != 0 )
    976a:	2b00      	cmp	r3, #0
    976c:	d010      	beq.n	9790 <RegionEU868ApplyCFList+0x78>
            channelAdd.NewChannel = &newChannel;
    976e:	a801      	add	r0, sp, #4
    9770:	ab03      	add	r3, sp, #12
    9772:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
    9774:	7104      	strb	r4, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
    9776:	47b8      	blx	r7
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
    9778:	3401      	adds	r4, #1
    977a:	b2e4      	uxtb	r4, r4
    977c:	3503      	adds	r5, #3
    977e:	2c10      	cmp	r4, #16
    9780:	d0d5      	beq.n	972e <RegionEU868ApplyCFList+0x16>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
    9782:	2c07      	cmp	r4, #7
    9784:	d9e1      	bls.n	974a <RegionEU868ApplyCFList+0x32>
            newChannel.Frequency = 0;
    9786:	aa03      	add	r2, sp, #12
    9788:	2300      	movs	r3, #0
    978a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
    978c:	7213      	strb	r3, [r2, #8]
            newChannel.Rx1Frequency = 0;
    978e:	9304      	str	r3, [sp, #16]
            channelRemove.ChannelId = chanIdx;
    9790:	466b      	mov	r3, sp
    9792:	701c      	strb	r4, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
    9794:	4668      	mov	r0, sp
    9796:	47c0      	blx	r8
    9798:	e7ee      	b.n	9778 <RegionEU868ApplyCFList+0x60>
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	000096dd 	.word	0x000096dd
    97a0:	000095e5 	.word	0x000095e5

000097a4 <RegionEU868NewChannelReq>:
{
    97a4:	b500      	push	{lr}
    97a6:	b085      	sub	sp, #20
    97a8:	0003      	movs	r3, r0
    if( newChannelReq->NewChannel->Frequency == 0 )
    97aa:	6802      	ldr	r2, [r0, #0]
    97ac:	6811      	ldr	r1, [r2, #0]
    97ae:	2900      	cmp	r1, #0
    97b0:	d10c      	bne.n	97cc <RegionEU868NewChannelReq+0x28>
        channelRemove.ChannelId = newChannelReq->ChannelId;
    97b2:	a801      	add	r0, sp, #4
    97b4:	791b      	ldrb	r3, [r3, #4]
    97b6:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
    97b8:	4b10      	ldr	r3, [pc, #64]	; (97fc <RegionEU868NewChannelReq+0x58>)
    97ba:	4798      	blx	r3
    97bc:	0003      	movs	r3, r0
    uint8_t status = 0x03;
    97be:	2003      	movs	r0, #3
            status &= 0xFC;
    97c0:	1e5a      	subs	r2, r3, #1
    97c2:	4193      	sbcs	r3, r2
    97c4:	425b      	negs	r3, r3
    97c6:	4018      	ands	r0, r3
}
    97c8:	b005      	add	sp, #20
    97ca:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
    97cc:	a802      	add	r0, sp, #8
    97ce:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
    97d0:	791b      	ldrb	r3, [r3, #4]
    97d2:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
    97d4:	4b0a      	ldr	r3, [pc, #40]	; (9800 <RegionEU868NewChannelReq+0x5c>)
    97d6:	4798      	blx	r3
    97d8:	0003      	movs	r3, r0
    97da:	2804      	cmp	r0, #4
    97dc:	d00c      	beq.n	97f8 <RegionEU868NewChannelReq+0x54>
    97de:	d906      	bls.n	97ee <RegionEU868NewChannelReq+0x4a>
                status &= 0xFD;
    97e0:	2001      	movs	r0, #1
        switch( RegionEU868ChannelAdd( &channelAdd ) )
    97e2:	2b05      	cmp	r3, #5
    97e4:	d0f0      	beq.n	97c8 <RegionEU868NewChannelReq+0x24>
                status &= 0xFC;
    97e6:	2000      	movs	r0, #0
        switch( RegionEU868ChannelAdd( &channelAdd ) )
    97e8:	2b06      	cmp	r3, #6
    97ea:	d0ed      	beq.n	97c8 <RegionEU868NewChannelReq+0x24>
    97ec:	e002      	b.n	97f4 <RegionEU868NewChannelReq+0x50>
    uint8_t status = 0x03;
    97ee:	2003      	movs	r0, #3
        switch( RegionEU868ChannelAdd( &channelAdd ) )
    97f0:	2b00      	cmp	r3, #0
    97f2:	d0e9      	beq.n	97c8 <RegionEU868NewChannelReq+0x24>
                status &= 0xFC;
    97f4:	2000      	movs	r0, #0
                break;
    97f6:	e7e7      	b.n	97c8 <RegionEU868NewChannelReq+0x24>
                status &= 0xFE;
    97f8:	2002      	movs	r0, #2
    97fa:	e7e5      	b.n	97c8 <RegionEU868NewChannelReq+0x24>
    97fc:	000096dd 	.word	0x000096dd
    9800:	000095e5 	.word	0x000095e5

00009804 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
    9804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9806:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    9808:	7806      	ldrb	r6, [r0, #0]
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
    980a:	4810      	ldr	r0, [pc, #64]	; (984c <RegionEU868SetContinuousWave+0x48>)
    980c:	0073      	lsls	r3, r6, #1
    980e:	199a      	adds	r2, r3, r6
    9810:	0092      	lsls	r2, r2, #2
    9812:	5815      	ldr	r5, [r2, r0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
    9814:	68a2      	ldr	r2, [r4, #8]
    9816:	6861      	ldr	r1, [r4, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    9818:	199b      	adds	r3, r3, r6
    981a:	009b      	lsls	r3, r3, #2
    981c:	18c3      	adds	r3, r0, r3
    981e:	7a5b      	ldrb	r3, [r3, #9]
    9820:	330c      	adds	r3, #12
    9822:	011b      	lsls	r3, r3, #4
    9824:	18c0      	adds	r0, r0, r3
    txPowerResult =  MAX( txPower, maxBandTxPower );
    9826:	78a6      	ldrb	r6, [r4, #2]
    9828:	7883      	ldrb	r3, [r0, #2]
    982a:	1c18      	adds	r0, r3, #0
    982c:	b25b      	sxtb	r3, r3
    982e:	b277      	sxtb	r7, r6
    9830:	42bb      	cmp	r3, r7
    9832:	da00      	bge.n	9836 <RegionEU868SetContinuousWave+0x32>
    9834:	1c30      	adds	r0, r6, #0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
    9836:	b240      	sxtb	r0, r0
    9838:	4b05      	ldr	r3, [pc, #20]	; (9850 <RegionEU868SetContinuousWave+0x4c>)
    983a:	4798      	blx	r3
    983c:	0001      	movs	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
    983e:	89a2      	ldrh	r2, [r4, #12]
    9840:	4b04      	ldr	r3, [pc, #16]	; (9854 <RegionEU868SetContinuousWave+0x50>)
    9842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9844:	0028      	movs	r0, r5
    9846:	4798      	blx	r3
}
    9848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	2000155c 	.word	0x2000155c
    9850:	00008af1 	.word	0x00008af1
    9854:	0001407c 	.word	0x0001407c

00009858 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
    9858:	1a8a      	subs	r2, r1, r2
    985a:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
    985c:	1c10      	adds	r0, r2, #0
    985e:	2a00      	cmp	r2, #0
    9860:	db01      	blt.n	9866 <RegionEU868ApplyDrOffset+0xe>
    9862:	b2c0      	uxtb	r0, r0
}
    9864:	4770      	bx	lr
    return datarate;
    9866:	2000      	movs	r0, #0
    9868:	e7fb      	b.n	9862 <RegionEU868ApplyDrOffset+0xa>
	...

0000986c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
    986c:	b510      	push	{r4, lr}
    986e:	4a09      	ldr	r2, [pc, #36]	; (9894 <GetFskBandwidthRegValue+0x28>)
    9870:	2300      	movs	r3, #0
    9872:	e003      	b.n	987c <GetFskBandwidthRegValue+0x10>
    9874:	3301      	adds	r3, #1
    9876:	3208      	adds	r2, #8
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    9878:	2b15      	cmp	r3, #21
    987a:	d00a      	beq.n	9892 <GetFskBandwidthRegValue+0x26>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
    987c:	6814      	ldr	r4, [r2, #0]
    987e:	4284      	cmp	r4, r0
    9880:	d8f8      	bhi.n	9874 <GetFskBandwidthRegValue+0x8>
    9882:	6894      	ldr	r4, [r2, #8]
    9884:	42a0      	cmp	r0, r4
    9886:	d2f5      	bcs.n	9874 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
    9888:	00d9      	lsls	r1, r3, #3
    988a:	4b02      	ldr	r3, [pc, #8]	; (9894 <GetFskBandwidthRegValue+0x28>)
    988c:	1859      	adds	r1, r3, r1
    988e:	7908      	ldrb	r0, [r1, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
    9890:	bd10      	pop	{r4, pc}
    9892:	e7fe      	b.n	9892 <GetFskBandwidthRegValue+0x26>
    9894:	000145cc 	.word	0x000145cc

00009898 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
    9898:	2389      	movs	r3, #137	; 0x89
    989a:	4a06      	ldr	r2, [pc, #24]	; (98b4 <SX1276OnDio4Irq+0x1c>)
    989c:	5cd3      	ldrb	r3, [r2, r3]
    989e:	2b00      	cmp	r3, #0
    98a0:	d106      	bne.n	98b0 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    98a2:	33b4      	adds	r3, #180	; 0xb4
    98a4:	5cd3      	ldrb	r3, [r2, r3]
    98a6:	2b00      	cmp	r3, #0
    98a8:	d102      	bne.n	98b0 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    98aa:	2101      	movs	r1, #1
    98ac:	33b4      	adds	r3, #180	; 0xb4
    98ae:	54d1      	strb	r1, [r2, r3]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    98b0:	4770      	bx	lr
    98b2:	46c0      	nop			; (mov r8, r8)
    98b4:	20001c28 	.word	0x20001c28

000098b8 <SX1276GetStatus>:
    return SX1276.Settings.State;
    98b8:	2388      	movs	r3, #136	; 0x88
    98ba:	4a01      	ldr	r2, [pc, #4]	; (98c0 <SX1276GetStatus+0x8>)
    98bc:	5cd0      	ldrb	r0, [r2, r3]
}
    98be:	4770      	bx	lr
    98c0:	20001c28 	.word	0x20001c28

000098c4 <SX1276WriteBuffer>:
{
    98c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98c6:	0007      	movs	r7, r0
    98c8:	000e      	movs	r6, r1
    98ca:	0015      	movs	r5, r2
    GpioWrite( &SX1276.Spi.Nss, 0 );
    98cc:	4c0f      	ldr	r4, [pc, #60]	; (990c <SX1276WriteBuffer+0x48>)
    98ce:	2100      	movs	r1, #0
    98d0:	0020      	movs	r0, r4
    98d2:	4b0f      	ldr	r3, [pc, #60]	; (9910 <SX1276WriteBuffer+0x4c>)
    98d4:	4798      	blx	r3
    SpiInOut( &SX1276.Spi, addr | 0x80 );
    98d6:	2180      	movs	r1, #128	; 0x80
    98d8:	4339      	orrs	r1, r7
    98da:	0020      	movs	r0, r4
    98dc:	3828      	subs	r0, #40	; 0x28
    98de:	4b0d      	ldr	r3, [pc, #52]	; (9914 <SX1276WriteBuffer+0x50>)
    98e0:	4798      	blx	r3
    for( i = 0; i < size; i++ )
    98e2:	2d00      	cmp	r5, #0
    98e4:	d00c      	beq.n	9900 <SX1276WriteBuffer+0x3c>
    98e6:	0034      	movs	r4, r6
    98e8:	3d01      	subs	r5, #1
    98ea:	b2ed      	uxtb	r5, r5
    98ec:	3501      	adds	r5, #1
    98ee:	1975      	adds	r5, r6, r5
        SpiInOut( &SX1276.Spi, buffer[i] );
    98f0:	4e09      	ldr	r6, [pc, #36]	; (9918 <SX1276WriteBuffer+0x54>)
    98f2:	4f08      	ldr	r7, [pc, #32]	; (9914 <SX1276WriteBuffer+0x50>)
    98f4:	7821      	ldrb	r1, [r4, #0]
    98f6:	0030      	movs	r0, r6
    98f8:	47b8      	blx	r7
    98fa:	3401      	adds	r4, #1
    for( i = 0; i < size; i++ )
    98fc:	42ac      	cmp	r4, r5
    98fe:	d1f9      	bne.n	98f4 <SX1276WriteBuffer+0x30>
    GpioWrite( &SX1276.Spi.Nss, 1 );
    9900:	2101      	movs	r1, #1
    9902:	4802      	ldr	r0, [pc, #8]	; (990c <SX1276WriteBuffer+0x48>)
    9904:	4b02      	ldr	r3, [pc, #8]	; (9910 <SX1276WriteBuffer+0x4c>)
    9906:	4798      	blx	r3
}
    9908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    990a:	46c0      	nop			; (mov r8, r8)
    990c:	20001ca4 	.word	0x20001ca4
    9910:	0000be91 	.word	0x0000be91
    9914:	0000234d 	.word	0x0000234d
    9918:	20001c7c 	.word	0x20001c7c

0000991c <SX1276Write>:
{
    991c:	b500      	push	{lr}
    991e:	b083      	sub	sp, #12
    9920:	466b      	mov	r3, sp
    9922:	71d9      	strb	r1, [r3, #7]
    9924:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
    9926:	2201      	movs	r2, #1
    9928:	0019      	movs	r1, r3
    992a:	4b02      	ldr	r3, [pc, #8]	; (9934 <SX1276Write+0x18>)
    992c:	4798      	blx	r3
}
    992e:	b003      	add	sp, #12
    9930:	bd00      	pop	{pc}
    9932:	46c0      	nop			; (mov r8, r8)
    9934:	000098c5 	.word	0x000098c5

00009938 <SX1276SetChannel>:
{
    9938:	b570      	push	{r4, r5, r6, lr}
    SX1276.Settings.Channel = freq;
    993a:	238c      	movs	r3, #140	; 0x8c
    993c:	4a0b      	ldr	r2, [pc, #44]	; (996c <SX1276SetChannel+0x34>)
    993e:	50d0      	str	r0, [r2, r3]
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
    9940:	4b0b      	ldr	r3, [pc, #44]	; (9970 <SX1276SetChannel+0x38>)
    9942:	4798      	blx	r3
    9944:	2200      	movs	r2, #0
    9946:	4b0b      	ldr	r3, [pc, #44]	; (9974 <SX1276SetChannel+0x3c>)
    9948:	4c0b      	ldr	r4, [pc, #44]	; (9978 <SX1276SetChannel+0x40>)
    994a:	47a0      	blx	r4
    994c:	4b0b      	ldr	r3, [pc, #44]	; (997c <SX1276SetChannel+0x44>)
    994e:	4798      	blx	r3
    9950:	0004      	movs	r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
    9952:	0c01      	lsrs	r1, r0, #16
    9954:	b2c9      	uxtb	r1, r1
    9956:	2006      	movs	r0, #6
    9958:	4d09      	ldr	r5, [pc, #36]	; (9980 <SX1276SetChannel+0x48>)
    995a:	47a8      	blx	r5
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
    995c:	0a21      	lsrs	r1, r4, #8
    995e:	b2c9      	uxtb	r1, r1
    9960:	2007      	movs	r0, #7
    9962:	47a8      	blx	r5
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    9964:	b2e1      	uxtb	r1, r4
    9966:	2008      	movs	r0, #8
    9968:	47a8      	blx	r5
}
    996a:	bd70      	pop	{r4, r5, r6, pc}
    996c:	20001c28 	.word	0x20001c28
    9970:	0000e9e9 	.word	0x0000e9e9
    9974:	404e8480 	.word	0x404e8480
    9978:	0000d569 	.word	0x0000d569
    997c:	0000c9c9 	.word	0x0000c9c9
    9980:	0000991d 	.word	0x0000991d

00009984 <SX1276ReadBuffer>:
{
    9984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9986:	0007      	movs	r7, r0
    9988:	000e      	movs	r6, r1
    998a:	0015      	movs	r5, r2
    GpioWrite( &SX1276.Spi.Nss, 0 );
    998c:	4c0f      	ldr	r4, [pc, #60]	; (99cc <SX1276ReadBuffer+0x48>)
    998e:	2100      	movs	r1, #0
    9990:	0020      	movs	r0, r4
    9992:	4b0f      	ldr	r3, [pc, #60]	; (99d0 <SX1276ReadBuffer+0x4c>)
    9994:	4798      	blx	r3
    SpiInOut( &SX1276.Spi, addr & 0x7F );
    9996:	217f      	movs	r1, #127	; 0x7f
    9998:	4039      	ands	r1, r7
    999a:	0020      	movs	r0, r4
    999c:	3828      	subs	r0, #40	; 0x28
    999e:	4b0d      	ldr	r3, [pc, #52]	; (99d4 <SX1276ReadBuffer+0x50>)
    99a0:	4798      	blx	r3
    for( i = 0; i < size; i++ )
    99a2:	2d00      	cmp	r5, #0
    99a4:	d00d      	beq.n	99c2 <SX1276ReadBuffer+0x3e>
    99a6:	0034      	movs	r4, r6
    99a8:	3d01      	subs	r5, #1
    99aa:	b2ed      	uxtb	r5, r5
    99ac:	3501      	adds	r5, #1
    99ae:	1975      	adds	r5, r6, r5
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
    99b0:	4e09      	ldr	r6, [pc, #36]	; (99d8 <SX1276ReadBuffer+0x54>)
    99b2:	4f08      	ldr	r7, [pc, #32]	; (99d4 <SX1276ReadBuffer+0x50>)
    99b4:	2100      	movs	r1, #0
    99b6:	0030      	movs	r0, r6
    99b8:	47b8      	blx	r7
    99ba:	7020      	strb	r0, [r4, #0]
    99bc:	3401      	adds	r4, #1
    for( i = 0; i < size; i++ )
    99be:	42ac      	cmp	r4, r5
    99c0:	d1f8      	bne.n	99b4 <SX1276ReadBuffer+0x30>
    GpioWrite( &SX1276.Spi.Nss, 1 );
    99c2:	2101      	movs	r1, #1
    99c4:	4801      	ldr	r0, [pc, #4]	; (99cc <SX1276ReadBuffer+0x48>)
    99c6:	4b02      	ldr	r3, [pc, #8]	; (99d0 <SX1276ReadBuffer+0x4c>)
    99c8:	4798      	blx	r3
}
    99ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99cc:	20001ca4 	.word	0x20001ca4
    99d0:	0000be91 	.word	0x0000be91
    99d4:	0000234d 	.word	0x0000234d
    99d8:	20001c7c 	.word	0x20001c7c

000099dc <SX1276Read>:
{
    99dc:	b510      	push	{r4, lr}
    99de:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
    99e0:	466b      	mov	r3, sp
    99e2:	1ddc      	adds	r4, r3, #7
    99e4:	2201      	movs	r2, #1
    99e6:	0021      	movs	r1, r4
    99e8:	4b02      	ldr	r3, [pc, #8]	; (99f4 <SX1276Read+0x18>)
    99ea:	4798      	blx	r3
    return data;
    99ec:	7820      	ldrb	r0, [r4, #0]
}
    99ee:	b002      	add	sp, #8
    99f0:	bd10      	pop	{r4, pc}
    99f2:	46c0      	nop			; (mov r8, r8)
    99f4:	00009985 	.word	0x00009985

000099f8 <RxChainCalibration>:
{
    99f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    99fa:	2009      	movs	r0, #9
    99fc:	4e20      	ldr	r6, [pc, #128]	; (9a80 <RxChainCalibration+0x88>)
    99fe:	47b0      	blx	r6
    9a00:	0005      	movs	r5, r0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    9a02:	2006      	movs	r0, #6
    9a04:	47b0      	blx	r6
    9a06:	0004      	movs	r4, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    9a08:	2007      	movs	r0, #7
    9a0a:	47b0      	blx	r6
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    9a0c:	0424      	lsls	r4, r4, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    9a0e:	0200      	lsls	r0, r0, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    9a10:	4304      	orrs	r4, r0
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    9a12:	2008      	movs	r0, #8
    9a14:	47b0      	blx	r6
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    9a16:	4320      	orrs	r0, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    9a18:	4b1a      	ldr	r3, [pc, #104]	; (9a84 <RxChainCalibration+0x8c>)
    9a1a:	4798      	blx	r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    9a1c:	2200      	movs	r2, #0
    9a1e:	4b1a      	ldr	r3, [pc, #104]	; (9a88 <RxChainCalibration+0x90>)
    9a20:	4c1a      	ldr	r4, [pc, #104]	; (9a8c <RxChainCalibration+0x94>)
    9a22:	47a0      	blx	r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    9a24:	4b1a      	ldr	r3, [pc, #104]	; (9a90 <RxChainCalibration+0x98>)
    9a26:	4798      	blx	r3
    9a28:	0004      	movs	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    9a2a:	2100      	movs	r1, #0
    9a2c:	2009      	movs	r0, #9
    9a2e:	4f19      	ldr	r7, [pc, #100]	; (9a94 <RxChainCalibration+0x9c>)
    9a30:	47b8      	blx	r7
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    9a32:	203b      	movs	r0, #59	; 0x3b
    9a34:	47b0      	blx	r6
    9a36:	2140      	movs	r1, #64	; 0x40
    9a38:	4301      	orrs	r1, r0
    9a3a:	b2c9      	uxtb	r1, r1
    9a3c:	203b      	movs	r0, #59	; 0x3b
    9a3e:	47b8      	blx	r7
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    9a40:	4f0f      	ldr	r7, [pc, #60]	; (9a80 <RxChainCalibration+0x88>)
    9a42:	2620      	movs	r6, #32
    9a44:	203b      	movs	r0, #59	; 0x3b
    9a46:	47b8      	blx	r7
    9a48:	4206      	tst	r6, r0
    9a4a:	d1fb      	bne.n	9a44 <RxChainCalibration+0x4c>
    SX1276SetChannel( 868000000 );
    9a4c:	4812      	ldr	r0, [pc, #72]	; (9a98 <RxChainCalibration+0xa0>)
    9a4e:	4b13      	ldr	r3, [pc, #76]	; (9a9c <RxChainCalibration+0xa4>)
    9a50:	4798      	blx	r3
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    9a52:	203b      	movs	r0, #59	; 0x3b
    9a54:	4b0a      	ldr	r3, [pc, #40]	; (9a80 <RxChainCalibration+0x88>)
    9a56:	4798      	blx	r3
    9a58:	2140      	movs	r1, #64	; 0x40
    9a5a:	4301      	orrs	r1, r0
    9a5c:	b2c9      	uxtb	r1, r1
    9a5e:	203b      	movs	r0, #59	; 0x3b
    9a60:	4b0c      	ldr	r3, [pc, #48]	; (9a94 <RxChainCalibration+0x9c>)
    9a62:	4798      	blx	r3
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    9a64:	4f06      	ldr	r7, [pc, #24]	; (9a80 <RxChainCalibration+0x88>)
    9a66:	2620      	movs	r6, #32
    9a68:	203b      	movs	r0, #59	; 0x3b
    9a6a:	47b8      	blx	r7
    9a6c:	4206      	tst	r6, r0
    9a6e:	d1fb      	bne.n	9a68 <RxChainCalibration+0x70>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    9a70:	0029      	movs	r1, r5
    9a72:	2009      	movs	r0, #9
    9a74:	4b07      	ldr	r3, [pc, #28]	; (9a94 <RxChainCalibration+0x9c>)
    9a76:	4798      	blx	r3
    SX1276SetChannel( initialFreq );
    9a78:	0020      	movs	r0, r4
    9a7a:	4b08      	ldr	r3, [pc, #32]	; (9a9c <RxChainCalibration+0xa4>)
    9a7c:	4798      	blx	r3
}
    9a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a80:	000099dd 	.word	0x000099dd
    9a84:	0000e9e9 	.word	0x0000e9e9
    9a88:	404e8480 	.word	0x404e8480
    9a8c:	0000ddd1 	.word	0x0000ddd1
    9a90:	0000c9c9 	.word	0x0000c9c9
    9a94:	0000991d 	.word	0x0000991d
    9a98:	33bca100 	.word	0x33bca100
    9a9c:	00009939 	.word	0x00009939

00009aa0 <SX1276GetTimeOnAir>:
{
    9aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aa2:	46d6      	mov	lr, sl
    9aa4:	b500      	push	{lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	000c      	movs	r4, r1
    switch( modem )
    9aaa:	2800      	cmp	r0, #0
    9aac:	d003      	beq.n	9ab6 <SX1276GetTimeOnAir+0x16>
    9aae:	2801      	cmp	r0, #1
    9ab0:	d060      	beq.n	9b74 <SX1276GetTimeOnAir+0xd4>
    uint32_t airTime = 0;
    9ab2:	2000      	movs	r0, #0
    return airTime;
    9ab4:	e050      	b.n	9b58 <SX1276GetTimeOnAir+0xb8>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    9ab6:	4d79      	ldr	r5, [pc, #484]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9ab8:	23a4      	movs	r3, #164	; 0xa4
    9aba:	5aee      	ldrh	r6, [r5, r3]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    9abc:	2027      	movs	r0, #39	; 0x27
    9abe:	4b78      	ldr	r3, [pc, #480]	; (9ca0 <SX1276GetTimeOnAir+0x200>)
    9ac0:	4798      	blx	r3
    9ac2:	23f8      	movs	r3, #248	; 0xf8
    9ac4:	4398      	bics	r0, r3
    9ac6:	3001      	adds	r0, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    9ac8:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    9aca:	4b76      	ldr	r3, [pc, #472]	; (9ca4 <SX1276GetTimeOnAir+0x204>)
    9acc:	4798      	blx	r3
    9ace:	0002      	movs	r2, r0
    9ad0:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    9ad2:	21a6      	movs	r1, #166	; 0xa6
    9ad4:	5c69      	ldrb	r1, [r5, r1]
    9ad6:	2900      	cmp	r1, #0
    9ad8:	d142      	bne.n	9b60 <SX1276GetTimeOnAir+0xc0>
    9ada:	2000      	movs	r0, #0
    9adc:	4972      	ldr	r1, [pc, #456]	; (9ca8 <SX1276GetTimeOnAir+0x208>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    9ade:	4d73      	ldr	r5, [pc, #460]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9ae0:	47a8      	blx	r5
    9ae2:	0006      	movs	r6, r0
    9ae4:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    9ae6:	2030      	movs	r0, #48	; 0x30
    9ae8:	4b6d      	ldr	r3, [pc, #436]	; (9ca0 <SX1276GetTimeOnAir+0x200>)
    9aea:	4798      	blx	r3
    9aec:	23f9      	movs	r3, #249	; 0xf9
    9aee:	4398      	bics	r0, r3
    9af0:	d139      	bne.n	9b66 <SX1276GetTimeOnAir+0xc6>
    9af2:	2000      	movs	r0, #0
    9af4:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    9af6:	4d6d      	ldr	r5, [pc, #436]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9af8:	0032      	movs	r2, r6
    9afa:	003b      	movs	r3, r7
    9afc:	47a8      	blx	r5
    9afe:	0006      	movs	r6, r0
    9b00:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    9b02:	0020      	movs	r0, r4
    9b04:	4b67      	ldr	r3, [pc, #412]	; (9ca4 <SX1276GetTimeOnAir+0x204>)
    9b06:	4798      	blx	r3
    9b08:	0002      	movs	r2, r0
    9b0a:	000b      	movs	r3, r1
    9b0c:	0030      	movs	r0, r6
    9b0e:	0039      	movs	r1, r7
    9b10:	47a8      	blx	r5
    9b12:	0002      	movs	r2, r0
    9b14:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    9b16:	21a8      	movs	r1, #168	; 0xa8
    9b18:	4860      	ldr	r0, [pc, #384]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9b1a:	5c41      	ldrb	r1, [r0, r1]
    9b1c:	2900      	cmp	r1, #0
    9b1e:	d125      	bne.n	9b6c <SX1276GetTimeOnAir+0xcc>
    9b20:	2000      	movs	r0, #0
    9b22:	2100      	movs	r1, #0
                                     pktLen +
    9b24:	4c61      	ldr	r4, [pc, #388]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9b26:	47a0      	blx	r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    9b28:	4c61      	ldr	r4, [pc, #388]	; (9cb0 <SX1276GetTimeOnAir+0x210>)
    9b2a:	2200      	movs	r2, #0
    9b2c:	4b61      	ldr	r3, [pc, #388]	; (9cb4 <SX1276GetTimeOnAir+0x214>)
    9b2e:	47a0      	blx	r4
    9b30:	0006      	movs	r6, r0
    9b32:	000f      	movs	r7, r1
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
    9b34:	23a0      	movs	r3, #160	; 0xa0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    9b36:	4a59      	ldr	r2, [pc, #356]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9b38:	58d0      	ldr	r0, [r2, r3]
    9b3a:	4b5f      	ldr	r3, [pc, #380]	; (9cb8 <SX1276GetTimeOnAir+0x218>)
    9b3c:	4798      	blx	r3
    9b3e:	0002      	movs	r2, r0
    9b40:	000b      	movs	r3, r1
    9b42:	0030      	movs	r0, r6
    9b44:	0039      	movs	r1, r7
    9b46:	4d5d      	ldr	r5, [pc, #372]	; (9cbc <SX1276GetTimeOnAir+0x21c>)
    9b48:	47a8      	blx	r5
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    9b4a:	2200      	movs	r2, #0
    9b4c:	4b5c      	ldr	r3, [pc, #368]	; (9cc0 <SX1276GetTimeOnAir+0x220>)
    9b4e:	47a0      	blx	r4
    9b50:	4b5c      	ldr	r3, [pc, #368]	; (9cc4 <SX1276GetTimeOnAir+0x224>)
    9b52:	4798      	blx	r3
    9b54:	4b5c      	ldr	r3, [pc, #368]	; (9cc8 <SX1276GetTimeOnAir+0x228>)
    9b56:	4798      	blx	r3
}
    9b58:	b004      	add	sp, #16
    9b5a:	bc04      	pop	{r2}
    9b5c:	4692      	mov	sl, r2
    9b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    9b60:	2000      	movs	r0, #0
    9b62:	2100      	movs	r1, #0
    9b64:	e7bb      	b.n	9ade <SX1276GetTimeOnAir+0x3e>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    9b66:	2000      	movs	r0, #0
    9b68:	494f      	ldr	r1, [pc, #316]	; (9ca8 <SX1276GetTimeOnAir+0x208>)
    9b6a:	e7c4      	b.n	9af6 <SX1276GetTimeOnAir+0x56>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    9b6c:	2000      	movs	r0, #0
    9b6e:	2180      	movs	r1, #128	; 0x80
    9b70:	05c9      	lsls	r1, r1, #23
    9b72:	e7d7      	b.n	9b24 <SX1276GetTimeOnAir+0x84>
            switch( SX1276.Settings.LoRa.Bandwidth )
    9b74:	23c8      	movs	r3, #200	; 0xc8
    9b76:	4a49      	ldr	r2, [pc, #292]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9b78:	58d3      	ldr	r3, [r2, r3]
    9b7a:	2b08      	cmp	r3, #8
    9b7c:	d100      	bne.n	9b80 <SX1276GetTimeOnAir+0xe0>
    9b7e:	e080      	b.n	9c82 <SX1276GetTimeOnAir+0x1e2>
    9b80:	2b09      	cmp	r3, #9
    9b82:	d100      	bne.n	9b86 <SX1276GetTimeOnAir+0xe6>
    9b84:	e082      	b.n	9c8c <SX1276GetTimeOnAir+0x1ec>
    9b86:	2b07      	cmp	r3, #7
    9b88:	d004      	beq.n	9b94 <SX1276GetTimeOnAir+0xf4>
            double bw = 0.0;
    9b8a:	2200      	movs	r2, #0
    9b8c:	2300      	movs	r3, #0
    9b8e:	9200      	str	r2, [sp, #0]
    9b90:	9301      	str	r3, [sp, #4]
    9b92:	e003      	b.n	9b9c <SX1276GetTimeOnAir+0xfc>
                bw = 125000;
    9b94:	2200      	movs	r2, #0
    9b96:	4b4d      	ldr	r3, [pc, #308]	; (9ccc <SX1276GetTimeOnAir+0x22c>)
    9b98:	9200      	str	r2, [sp, #0]
    9b9a:	9301      	str	r3, [sp, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
    9b9c:	4d3f      	ldr	r5, [pc, #252]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9b9e:	23cc      	movs	r3, #204	; 0xcc
    9ba0:	58ee      	ldr	r6, [r5, r3]
    9ba2:	2001      	movs	r0, #1
    9ba4:	40b0      	lsls	r0, r6
    9ba6:	4f3f      	ldr	r7, [pc, #252]	; (9ca4 <SX1276GetTimeOnAir+0x204>)
    9ba8:	47b8      	blx	r7
    9baa:	0002      	movs	r2, r0
    9bac:	000b      	movs	r3, r1
    9bae:	4943      	ldr	r1, [pc, #268]	; (9cbc <SX1276GetTimeOnAir+0x21c>)
    9bb0:	468a      	mov	sl, r1
    9bb2:	9800      	ldr	r0, [sp, #0]
    9bb4:	9901      	ldr	r1, [sp, #4]
    9bb6:	47d0      	blx	sl
    9bb8:	0002      	movs	r2, r0
    9bba:	000b      	movs	r3, r1
            double ts = 1 / rs;
    9bbc:	2000      	movs	r0, #0
    9bbe:	493a      	ldr	r1, [pc, #232]	; (9ca8 <SX1276GetTimeOnAir+0x208>)
    9bc0:	47d0      	blx	sl
    9bc2:	9000      	str	r0, [sp, #0]
    9bc4:	9101      	str	r1, [sp, #4]
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    9bc6:	23d2      	movs	r3, #210	; 0xd2
    9bc8:	5ae8      	ldrh	r0, [r5, r3]
    9bca:	47b8      	blx	r7
    9bcc:	2200      	movs	r2, #0
    9bce:	4b40      	ldr	r3, [pc, #256]	; (9cd0 <SX1276GetTimeOnAir+0x230>)
    9bd0:	4f36      	ldr	r7, [pc, #216]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9bd2:	47b8      	blx	r7
    9bd4:	9a00      	ldr	r2, [sp, #0]
    9bd6:	9b01      	ldr	r3, [sp, #4]
    9bd8:	4f35      	ldr	r7, [pc, #212]	; (9cb0 <SX1276GetTimeOnAir+0x210>)
    9bda:	47b8      	blx	r7
    9bdc:	9002      	str	r0, [sp, #8]
    9bde:	9103      	str	r1, [sp, #12]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    9be0:	00e0      	lsls	r0, r4, #3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    9be2:	23d6      	movs	r3, #214	; 0xd6
    9be4:	5cea      	ldrb	r2, [r5, r3]
    9be6:	0112      	lsls	r2, r2, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    9be8:	00b3      	lsls	r3, r6, #2
    9bea:	1ad3      	subs	r3, r2, r3
    9bec:	331c      	adds	r3, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    9bee:	22d4      	movs	r2, #212	; 0xd4
    9bf0:	5caa      	ldrb	r2, [r5, r2]
    9bf2:	2414      	movs	r4, #20
    9bf4:	1e51      	subs	r1, r2, #1
    9bf6:	418a      	sbcs	r2, r1
    9bf8:	4252      	negs	r2, r2
    9bfa:	4014      	ands	r4, r2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    9bfc:	18c0      	adds	r0, r0, r3
    9bfe:	1b00      	subs	r0, r0, r4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    9c00:	4b2d      	ldr	r3, [pc, #180]	; (9cb8 <SX1276GetTimeOnAir+0x218>)
    9c02:	4798      	blx	r3
    9c04:	0004      	movs	r4, r0
    9c06:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    9c08:	23d0      	movs	r3, #208	; 0xd0
    9c0a:	4a24      	ldr	r2, [pc, #144]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9c0c:	5cd0      	ldrb	r0, [r2, r3]
    9c0e:	4240      	negs	r0, r0
    9c10:	0fc0      	lsrs	r0, r0, #31
    9c12:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    9c14:	1a30      	subs	r0, r6, r0
    9c16:	0080      	lsls	r0, r0, #2
    9c18:	4b27      	ldr	r3, [pc, #156]	; (9cb8 <SX1276GetTimeOnAir+0x218>)
    9c1a:	4798      	blx	r3
    9c1c:	0002      	movs	r2, r0
    9c1e:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    9c20:	0020      	movs	r0, r4
    9c22:	0029      	movs	r1, r5
    9c24:	47d0      	blx	sl
    9c26:	4b2b      	ldr	r3, [pc, #172]	; (9cd4 <SX1276GetTimeOnAir+0x234>)
    9c28:	4798      	blx	r3
    9c2a:	0004      	movs	r4, r0
    9c2c:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
    9c2e:	23d1      	movs	r3, #209	; 0xd1
    9c30:	4a1a      	ldr	r2, [pc, #104]	; (9c9c <SX1276GetTimeOnAir+0x1fc>)
    9c32:	5cd0      	ldrb	r0, [r2, r3]
    9c34:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    9c36:	4b1b      	ldr	r3, [pc, #108]	; (9ca4 <SX1276GetTimeOnAir+0x204>)
    9c38:	4798      	blx	r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    9c3a:	0022      	movs	r2, r4
    9c3c:	002b      	movs	r3, r5
    9c3e:	47b8      	blx	r7
    9c40:	0006      	movs	r6, r0
    9c42:	000f      	movs	r7, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    9c44:	2200      	movs	r2, #0
    9c46:	2300      	movs	r3, #0
    9c48:	4c23      	ldr	r4, [pc, #140]	; (9cd8 <SX1276GetTimeOnAir+0x238>)
    9c4a:	47a0      	blx	r4
    9c4c:	2800      	cmp	r0, #0
    9c4e:	d022      	beq.n	9c96 <SX1276GetTimeOnAir+0x1f6>
    9c50:	2200      	movs	r2, #0
    9c52:	4b18      	ldr	r3, [pc, #96]	; (9cb4 <SX1276GetTimeOnAir+0x214>)
    9c54:	0030      	movs	r0, r6
    9c56:	0039      	movs	r1, r7
    9c58:	4c14      	ldr	r4, [pc, #80]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9c5a:	47a0      	blx	r4
            double tPayload = nPayload * ts;
    9c5c:	4d14      	ldr	r5, [pc, #80]	; (9cb0 <SX1276GetTimeOnAir+0x210>)
    9c5e:	9a00      	ldr	r2, [sp, #0]
    9c60:	9b01      	ldr	r3, [sp, #4]
    9c62:	47a8      	blx	r5
            double tOnAir = tPreamble + tPayload;
    9c64:	4c11      	ldr	r4, [pc, #68]	; (9cac <SX1276GetTimeOnAir+0x20c>)
    9c66:	9a02      	ldr	r2, [sp, #8]
    9c68:	9b03      	ldr	r3, [sp, #12]
    9c6a:	47a0      	blx	r4
            airTime = floor( tOnAir * 1000 + 0.999 );
    9c6c:	2200      	movs	r2, #0
    9c6e:	4b14      	ldr	r3, [pc, #80]	; (9cc0 <SX1276GetTimeOnAir+0x220>)
    9c70:	47a8      	blx	r5
    9c72:	4a1a      	ldr	r2, [pc, #104]	; (9cdc <SX1276GetTimeOnAir+0x23c>)
    9c74:	4b1a      	ldr	r3, [pc, #104]	; (9ce0 <SX1276GetTimeOnAir+0x240>)
    9c76:	47a0      	blx	r4
    9c78:	4b1a      	ldr	r3, [pc, #104]	; (9ce4 <SX1276GetTimeOnAir+0x244>)
    9c7a:	4798      	blx	r3
    9c7c:	4b12      	ldr	r3, [pc, #72]	; (9cc8 <SX1276GetTimeOnAir+0x228>)
    9c7e:	4798      	blx	r3
        break;
    9c80:	e76a      	b.n	9b58 <SX1276GetTimeOnAir+0xb8>
                bw = 250000;
    9c82:	2200      	movs	r2, #0
    9c84:	4b18      	ldr	r3, [pc, #96]	; (9ce8 <SX1276GetTimeOnAir+0x248>)
    9c86:	9200      	str	r2, [sp, #0]
    9c88:	9301      	str	r3, [sp, #4]
                break;
    9c8a:	e787      	b.n	9b9c <SX1276GetTimeOnAir+0xfc>
                bw = 500000;
    9c8c:	2200      	movs	r2, #0
    9c8e:	4b17      	ldr	r3, [pc, #92]	; (9cec <SX1276GetTimeOnAir+0x24c>)
    9c90:	9200      	str	r2, [sp, #0]
    9c92:	9301      	str	r3, [sp, #4]
                break;
    9c94:	e782      	b.n	9b9c <SX1276GetTimeOnAir+0xfc>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    9c96:	2000      	movs	r0, #0
    9c98:	4906      	ldr	r1, [pc, #24]	; (9cb4 <SX1276GetTimeOnAir+0x214>)
    9c9a:	e7df      	b.n	9c5c <SX1276GetTimeOnAir+0x1bc>
    9c9c:	20001c28 	.word	0x20001c28
    9ca0:	000099dd 	.word	0x000099dd
    9ca4:	0000e965 	.word	0x0000e965
    9ca8:	3ff00000 	.word	0x3ff00000
    9cac:	0000cf49 	.word	0x0000cf49
    9cb0:	0000ddd1 	.word	0x0000ddd1
    9cb4:	40200000 	.word	0x40200000
    9cb8:	0000e9e9 	.word	0x0000e9e9
    9cbc:	0000d569 	.word	0x0000d569
    9cc0:	408f4000 	.word	0x408f4000
    9cc4:	0000c561 	.word	0x0000c561
    9cc8:	0000c9c9 	.word	0x0000c9c9
    9ccc:	40fe8480 	.word	0x40fe8480
    9cd0:	40110000 	.word	0x40110000
    9cd4:	0000c305 	.word	0x0000c305
    9cd8:	0000c94d 	.word	0x0000c94d
    9cdc:	d916872b 	.word	0xd916872b
    9ce0:	3feff7ce 	.word	0x3feff7ce
    9ce4:	0000c431 	.word	0x0000c431
    9ce8:	410e8480 	.word	0x410e8480
    9cec:	411e8480 	.word	0x411e8480

00009cf0 <SX1276ReadRssi>:
{
    9cf0:	b510      	push	{r4, lr}
    switch( modem )
    9cf2:	2800      	cmp	r0, #0
    9cf4:	d004      	beq.n	9d00 <SX1276ReadRssi+0x10>
    9cf6:	2801      	cmp	r0, #1
    9cf8:	d00a      	beq.n	9d10 <SX1276ReadRssi+0x20>
        rssi = -1;
    9cfa:	2001      	movs	r0, #1
    9cfc:	4240      	negs	r0, r0
    9cfe:	e006      	b.n	9d0e <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    9d00:	2011      	movs	r0, #17
    9d02:	4b0c      	ldr	r3, [pc, #48]	; (9d34 <SX1276ReadRssi+0x44>)
    9d04:	4798      	blx	r3
    9d06:	0840      	lsrs	r0, r0, #1
    9d08:	b2c0      	uxtb	r0, r0
    9d0a:	4240      	negs	r0, r0
    9d0c:	b200      	sxth	r0, r0
}
    9d0e:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    9d10:	4b09      	ldr	r3, [pc, #36]	; (9d38 <SX1276ReadRssi+0x48>)
    9d12:	228c      	movs	r2, #140	; 0x8c
    9d14:	4909      	ldr	r1, [pc, #36]	; (9d3c <SX1276ReadRssi+0x4c>)
    9d16:	588a      	ldr	r2, [r1, r2]
    9d18:	429a      	cmp	r2, r3
    9d1a:	d805      	bhi.n	9d28 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    9d1c:	201b      	movs	r0, #27
    9d1e:	4b05      	ldr	r3, [pc, #20]	; (9d34 <SX1276ReadRssi+0x44>)
    9d20:	4798      	blx	r3
    9d22:	38a4      	subs	r0, #164	; 0xa4
    9d24:	b200      	sxth	r0, r0
    9d26:	e7f2      	b.n	9d0e <SX1276ReadRssi+0x1e>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    9d28:	201b      	movs	r0, #27
    9d2a:	4b02      	ldr	r3, [pc, #8]	; (9d34 <SX1276ReadRssi+0x44>)
    9d2c:	4798      	blx	r3
    9d2e:	389d      	subs	r0, #157	; 0x9d
    9d30:	b200      	sxth	r0, r0
    9d32:	e7ec      	b.n	9d0e <SX1276ReadRssi+0x1e>
    9d34:	000099dd 	.word	0x000099dd
    9d38:	1f4add40 	.word	0x1f4add40
    9d3c:	20001c28 	.word	0x20001c28

00009d40 <SX1276SetOpMode>:
{
    9d40:	b510      	push	{r4, lr}
    9d42:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
    9d44:	d011      	beq.n	9d6a <SX1276SetOpMode+0x2a>
        SX1276SetAntSwLowPower( false );
    9d46:	2000      	movs	r0, #0
    9d48:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <SX1276SetOpMode+0x34>)
    9d4a:	4798      	blx	r3
        SX1276SetAntSw( opMode );
    9d4c:	0020      	movs	r0, r4
    9d4e:	4b0a      	ldr	r3, [pc, #40]	; (9d78 <SX1276SetOpMode+0x38>)
    9d50:	4798      	blx	r3
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    9d52:	2001      	movs	r0, #1
    9d54:	4b09      	ldr	r3, [pc, #36]	; (9d7c <SX1276SetOpMode+0x3c>)
    9d56:	4798      	blx	r3
    9d58:	2307      	movs	r3, #7
    9d5a:	0001      	movs	r1, r0
    9d5c:	4399      	bics	r1, r3
    9d5e:	4321      	orrs	r1, r4
    9d60:	b2c9      	uxtb	r1, r1
    9d62:	2001      	movs	r0, #1
    9d64:	4b06      	ldr	r3, [pc, #24]	; (9d80 <SX1276SetOpMode+0x40>)
    9d66:	4798      	blx	r3
}
    9d68:	bd10      	pop	{r4, pc}
        SX1276SetAntSwLowPower( true );
    9d6a:	2001      	movs	r0, #1
    9d6c:	4b01      	ldr	r3, [pc, #4]	; (9d74 <SX1276SetOpMode+0x34>)
    9d6e:	4798      	blx	r3
    9d70:	e7ef      	b.n	9d52 <SX1276SetOpMode+0x12>
    9d72:	46c0      	nop			; (mov r8, r8)
    9d74:	000025dd 	.word	0x000025dd
    9d78:	000025f1 	.word	0x000025f1
    9d7c:	000099dd 	.word	0x000099dd
    9d80:	0000991d 	.word	0x0000991d

00009d84 <SX1276SetSleep>:
{
    9d84:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
    9d86:	4806      	ldr	r0, [pc, #24]	; (9da0 <SX1276SetSleep+0x1c>)
    9d88:	4c06      	ldr	r4, [pc, #24]	; (9da4 <SX1276SetSleep+0x20>)
    9d8a:	47a0      	blx	r4
    TimerStop( &TxTimeoutTimer );
    9d8c:	4806      	ldr	r0, [pc, #24]	; (9da8 <SX1276SetSleep+0x24>)
    9d8e:	47a0      	blx	r4
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    9d90:	2000      	movs	r0, #0
    9d92:	4b06      	ldr	r3, [pc, #24]	; (9dac <SX1276SetSleep+0x28>)
    9d94:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
    9d96:	2100      	movs	r1, #0
    9d98:	2388      	movs	r3, #136	; 0x88
    9d9a:	4a05      	ldr	r2, [pc, #20]	; (9db0 <SX1276SetSleep+0x2c>)
    9d9c:	54d1      	strb	r1, [r2, r3]
}
    9d9e:	bd10      	pop	{r4, pc}
    9da0:	20001d14 	.word	0x20001d14
    9da4:	0000c1a5 	.word	0x0000c1a5
    9da8:	20001c00 	.word	0x20001c00
    9dac:	00009d41 	.word	0x00009d41
    9db0:	20001c28 	.word	0x20001c28

00009db4 <SX1276SetStby>:
{
    9db4:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
    9db6:	4806      	ldr	r0, [pc, #24]	; (9dd0 <SX1276SetStby+0x1c>)
    9db8:	4c06      	ldr	r4, [pc, #24]	; (9dd4 <SX1276SetStby+0x20>)
    9dba:	47a0      	blx	r4
    TimerStop( &TxTimeoutTimer );
    9dbc:	4806      	ldr	r0, [pc, #24]	; (9dd8 <SX1276SetStby+0x24>)
    9dbe:	47a0      	blx	r4
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    9dc0:	2001      	movs	r0, #1
    9dc2:	4b06      	ldr	r3, [pc, #24]	; (9ddc <SX1276SetStby+0x28>)
    9dc4:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
    9dc6:	2100      	movs	r1, #0
    9dc8:	2388      	movs	r3, #136	; 0x88
    9dca:	4a05      	ldr	r2, [pc, #20]	; (9de0 <SX1276SetStby+0x2c>)
    9dcc:	54d1      	strb	r1, [r2, r3]
}
    9dce:	bd10      	pop	{r4, pc}
    9dd0:	20001d14 	.word	0x20001d14
    9dd4:	0000c1a5 	.word	0x0000c1a5
    9dd8:	20001c00 	.word	0x20001c00
    9ddc:	00009d41 	.word	0x00009d41
    9de0:	20001c28 	.word	0x20001c28

00009de4 <SX1276SetRx>:
{
    9de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9de6:	46c6      	mov	lr, r8
    9de8:	b500      	push	{lr}
    9dea:	0005      	movs	r5, r0
    switch( SX1276.Settings.Modem )
    9dec:	2389      	movs	r3, #137	; 0x89
    9dee:	4a99      	ldr	r2, [pc, #612]	; (a054 <SX1276SetRx+0x270>)
    9df0:	5cd3      	ldrb	r3, [r2, r3]
    9df2:	2b00      	cmp	r3, #0
    9df4:	d003      	beq.n	9dfe <SX1276SetRx+0x1a>
    9df6:	2b01      	cmp	r3, #1
    9df8:	d045      	beq.n	9e86 <SX1276SetRx+0xa2>
    bool rxContinuous = false;
    9dfa:	2600      	movs	r6, #0
    9dfc:	e027      	b.n	9e4e <SX1276SetRx+0x6a>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    9dfe:	4c95      	ldr	r4, [pc, #596]	; (a054 <SX1276SetRx+0x270>)
    9e00:	23aa      	movs	r3, #170	; 0xaa
    9e02:	5ce6      	ldrb	r6, [r4, r3]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    9e04:	2040      	movs	r0, #64	; 0x40
    9e06:	4f94      	ldr	r7, [pc, #592]	; (a058 <SX1276SetRx+0x274>)
    9e08:	47b8      	blx	r7
                                                                            RF_DIOMAPPING1_DIO0_00 |
    9e0a:	2103      	movs	r1, #3
    9e0c:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO1_00 |
    9e0e:	200c      	movs	r0, #12
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    9e10:	4301      	orrs	r1, r0
    9e12:	3034      	adds	r0, #52	; 0x34
    9e14:	4b91      	ldr	r3, [pc, #580]	; (a05c <SX1276SetRx+0x278>)
    9e16:	4698      	mov	r8, r3
    9e18:	4798      	blx	r3
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    9e1a:	2041      	movs	r0, #65	; 0x41
    9e1c:	47b8      	blx	r7
    9e1e:	213f      	movs	r1, #63	; 0x3f
    9e20:	4249      	negs	r1, r1
    9e22:	4301      	orrs	r1, r0
    9e24:	b2c9      	uxtb	r1, r1
    9e26:	2041      	movs	r0, #65	; 0x41
    9e28:	47c0      	blx	r8
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    9e2a:	2035      	movs	r0, #53	; 0x35
    9e2c:	47b8      	blx	r7
    9e2e:	233f      	movs	r3, #63	; 0x3f
    9e30:	4018      	ands	r0, r3
    9e32:	3383      	adds	r3, #131	; 0x83
    9e34:	54e0      	strb	r0, [r4, r3]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    9e36:	211e      	movs	r1, #30
    9e38:	200d      	movs	r0, #13
    9e3a:	47c0      	blx	r8
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    9e3c:	2300      	movs	r3, #0
    9e3e:	22b4      	movs	r2, #180	; 0xb4
    9e40:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
    9e42:	3201      	adds	r2, #1
    9e44:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9e46:	320b      	adds	r2, #11
    9e48:	52a3      	strh	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.Size = 0;
    9e4a:	3a02      	subs	r2, #2
    9e4c:	52a3      	strh	r3, [r4, r2]
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
    9e4e:	2280      	movs	r2, #128	; 0x80
    9e50:	0052      	lsls	r2, r2, #1
    9e52:	2100      	movs	r1, #0
    9e54:	4882      	ldr	r0, [pc, #520]	; (a060 <SX1276SetRx+0x27c>)
    9e56:	4b83      	ldr	r3, [pc, #524]	; (a064 <SX1276SetRx+0x280>)
    9e58:	4798      	blx	r3
    SX1276.Settings.State = RF_RX_RUNNING;
    9e5a:	2101      	movs	r1, #1
    9e5c:	2388      	movs	r3, #136	; 0x88
    9e5e:	4a7d      	ldr	r2, [pc, #500]	; (a054 <SX1276SetRx+0x270>)
    9e60:	54d1      	strb	r1, [r2, r3]
    if( timeout != 0 )
    9e62:	2d00      	cmp	r5, #0
    9e64:	d000      	beq.n	9e68 <SX1276SetRx+0x84>
    9e66:	e0d6      	b.n	a016 <SX1276SetRx+0x232>
    if( SX1276.Settings.Modem == MODEM_FSK )
    9e68:	2389      	movs	r3, #137	; 0x89
    9e6a:	4a7a      	ldr	r2, [pc, #488]	; (a054 <SX1276SetRx+0x270>)
    9e6c:	5cd3      	ldrb	r3, [r2, r3]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d100      	bne.n	9e74 <SX1276SetRx+0x90>
    9e72:	e0d9      	b.n	a028 <SX1276SetRx+0x244>
        if( rxContinuous == true )
    9e74:	2e00      	cmp	r6, #0
    9e76:	d000      	beq.n	9e7a <SX1276SetRx+0x96>
    9e78:	e0e7      	b.n	a04a <SX1276SetRx+0x266>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    9e7a:	2006      	movs	r0, #6
    9e7c:	4b7a      	ldr	r3, [pc, #488]	; (a068 <SX1276SetRx+0x284>)
    9e7e:	4798      	blx	r3
}
    9e80:	bc04      	pop	{r2}
    9e82:	4690      	mov	r8, r2
    9e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
    9e86:	23d9      	movs	r3, #217	; 0xd9
    9e88:	4a72      	ldr	r2, [pc, #456]	; (a054 <SX1276SetRx+0x270>)
    9e8a:	5cd3      	ldrb	r3, [r2, r3]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d025      	beq.n	9edc <SX1276SetRx+0xf8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    9e90:	2033      	movs	r0, #51	; 0x33
    9e92:	4b71      	ldr	r3, [pc, #452]	; (a058 <SX1276SetRx+0x274>)
    9e94:	4798      	blx	r3
    9e96:	2141      	movs	r1, #65	; 0x41
    9e98:	4301      	orrs	r1, r0
    9e9a:	b2c9      	uxtb	r1, r1
    9e9c:	2033      	movs	r0, #51	; 0x33
    9e9e:	4c6f      	ldr	r4, [pc, #444]	; (a05c <SX1276SetRx+0x278>)
    9ea0:	47a0      	blx	r4
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    9ea2:	2119      	movs	r1, #25
    9ea4:	203b      	movs	r0, #59	; 0x3b
    9ea6:	47a0      	blx	r4
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    9ea8:	23c8      	movs	r3, #200	; 0xc8
    9eaa:	4a6a      	ldr	r2, [pc, #424]	; (a054 <SX1276SetRx+0x270>)
    9eac:	58d3      	ldr	r3, [r2, r3]
    9eae:	2b08      	cmp	r3, #8
    9eb0:	d900      	bls.n	9eb4 <SX1276SetRx+0xd0>
    9eb2:	e080      	b.n	9fb6 <SX1276SetRx+0x1d2>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    9eb4:	2031      	movs	r0, #49	; 0x31
    9eb6:	4b68      	ldr	r3, [pc, #416]	; (a058 <SX1276SetRx+0x274>)
    9eb8:	4798      	blx	r3
    9eba:	217f      	movs	r1, #127	; 0x7f
    9ebc:	4001      	ands	r1, r0
    9ebe:	2031      	movs	r0, #49	; 0x31
    9ec0:	4c66      	ldr	r4, [pc, #408]	; (a05c <SX1276SetRx+0x278>)
    9ec2:	47a0      	blx	r4
                SX1276Write( REG_LR_TEST30, 0x00 );
    9ec4:	2100      	movs	r1, #0
    9ec6:	2030      	movs	r0, #48	; 0x30
    9ec8:	47a0      	blx	r4
                switch( SX1276.Settings.LoRa.Bandwidth )
    9eca:	4a62      	ldr	r2, [pc, #392]	; (a054 <SX1276SetRx+0x270>)
    9ecc:	23c8      	movs	r3, #200	; 0xc8
    9ece:	58d1      	ldr	r1, [r2, r3]
    9ed0:	2908      	cmp	r1, #8
    9ed2:	d87a      	bhi.n	9fca <SX1276SetRx+0x1e6>
    9ed4:	008b      	lsls	r3, r1, #2
    9ed6:	4a65      	ldr	r2, [pc, #404]	; (a06c <SX1276SetRx+0x288>)
    9ed8:	58d3      	ldr	r3, [r2, r3]
    9eda:	469f      	mov	pc, r3
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    9edc:	2033      	movs	r0, #51	; 0x33
    9ede:	4b5e      	ldr	r3, [pc, #376]	; (a058 <SX1276SetRx+0x274>)
    9ee0:	4798      	blx	r3
    9ee2:	2341      	movs	r3, #65	; 0x41
    9ee4:	0001      	movs	r1, r0
    9ee6:	4399      	bics	r1, r3
    9ee8:	2001      	movs	r0, #1
    9eea:	4301      	orrs	r1, r0
    9eec:	b2c9      	uxtb	r1, r1
    9eee:	2033      	movs	r0, #51	; 0x33
    9ef0:	4c5a      	ldr	r4, [pc, #360]	; (a05c <SX1276SetRx+0x278>)
    9ef2:	47a0      	blx	r4
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    9ef4:	211d      	movs	r1, #29
    9ef6:	203b      	movs	r0, #59	; 0x3b
    9ef8:	47a0      	blx	r4
    9efa:	e7d5      	b.n	9ea8 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_TEST2F, 0x48 );
    9efc:	2148      	movs	r1, #72	; 0x48
    9efe:	202f      	movs	r0, #47	; 0x2f
    9f00:	4b56      	ldr	r3, [pc, #344]	; (a05c <SX1276SetRx+0x278>)
    9f02:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    9f04:	238c      	movs	r3, #140	; 0x8c
    9f06:	4a53      	ldr	r2, [pc, #332]	; (a054 <SX1276SetRx+0x270>)
    9f08:	58d0      	ldr	r0, [r2, r3]
    9f0a:	4b59      	ldr	r3, [pc, #356]	; (a070 <SX1276SetRx+0x28c>)
    9f0c:	469c      	mov	ip, r3
    9f0e:	4460      	add	r0, ip
    9f10:	4b58      	ldr	r3, [pc, #352]	; (a074 <SX1276SetRx+0x290>)
    9f12:	4798      	blx	r3
                    break;
    9f14:	e059      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
    9f16:	2144      	movs	r1, #68	; 0x44
    9f18:	202f      	movs	r0, #47	; 0x2f
    9f1a:	4b50      	ldr	r3, [pc, #320]	; (a05c <SX1276SetRx+0x278>)
    9f1c:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    9f1e:	238c      	movs	r3, #140	; 0x8c
    9f20:	4a4c      	ldr	r2, [pc, #304]	; (a054 <SX1276SetRx+0x270>)
    9f22:	58d0      	ldr	r0, [r2, r3]
    9f24:	4b54      	ldr	r3, [pc, #336]	; (a078 <SX1276SetRx+0x294>)
    9f26:	469c      	mov	ip, r3
    9f28:	4460      	add	r0, ip
    9f2a:	4b52      	ldr	r3, [pc, #328]	; (a074 <SX1276SetRx+0x290>)
    9f2c:	4798      	blx	r3
                    break;
    9f2e:	e04c      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
    9f30:	2144      	movs	r1, #68	; 0x44
    9f32:	202f      	movs	r0, #47	; 0x2f
    9f34:	4b49      	ldr	r3, [pc, #292]	; (a05c <SX1276SetRx+0x278>)
    9f36:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    9f38:	238c      	movs	r3, #140	; 0x8c
    9f3a:	4a46      	ldr	r2, [pc, #280]	; (a054 <SX1276SetRx+0x270>)
    9f3c:	58d0      	ldr	r0, [r2, r3]
    9f3e:	4b4f      	ldr	r3, [pc, #316]	; (a07c <SX1276SetRx+0x298>)
    9f40:	469c      	mov	ip, r3
    9f42:	4460      	add	r0, ip
    9f44:	4b4b      	ldr	r3, [pc, #300]	; (a074 <SX1276SetRx+0x290>)
    9f46:	4798      	blx	r3
                    break;
    9f48:	e03f      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
    9f4a:	2144      	movs	r1, #68	; 0x44
    9f4c:	202f      	movs	r0, #47	; 0x2f
    9f4e:	4b43      	ldr	r3, [pc, #268]	; (a05c <SX1276SetRx+0x278>)
    9f50:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    9f52:	238c      	movs	r3, #140	; 0x8c
    9f54:	4a3f      	ldr	r2, [pc, #252]	; (a054 <SX1276SetRx+0x270>)
    9f56:	58d0      	ldr	r0, [r2, r3]
    9f58:	4b49      	ldr	r3, [pc, #292]	; (a080 <SX1276SetRx+0x29c>)
    9f5a:	469c      	mov	ip, r3
    9f5c:	4460      	add	r0, ip
    9f5e:	4b45      	ldr	r3, [pc, #276]	; (a074 <SX1276SetRx+0x290>)
    9f60:	4798      	blx	r3
                    break;
    9f62:	e032      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
    9f64:	2144      	movs	r1, #68	; 0x44
    9f66:	202f      	movs	r0, #47	; 0x2f
    9f68:	4b3c      	ldr	r3, [pc, #240]	; (a05c <SX1276SetRx+0x278>)
    9f6a:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    9f6c:	238c      	movs	r3, #140	; 0x8c
    9f6e:	4a39      	ldr	r2, [pc, #228]	; (a054 <SX1276SetRx+0x270>)
    9f70:	58d0      	ldr	r0, [r2, r3]
    9f72:	4b44      	ldr	r3, [pc, #272]	; (a084 <SX1276SetRx+0x2a0>)
    9f74:	469c      	mov	ip, r3
    9f76:	4460      	add	r0, ip
    9f78:	4b3e      	ldr	r3, [pc, #248]	; (a074 <SX1276SetRx+0x290>)
    9f7a:	4798      	blx	r3
                    break;
    9f7c:	e025      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
    9f7e:	2144      	movs	r1, #68	; 0x44
    9f80:	202f      	movs	r0, #47	; 0x2f
    9f82:	4b36      	ldr	r3, [pc, #216]	; (a05c <SX1276SetRx+0x278>)
    9f84:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    9f86:	238c      	movs	r3, #140	; 0x8c
    9f88:	4a32      	ldr	r2, [pc, #200]	; (a054 <SX1276SetRx+0x270>)
    9f8a:	58d0      	ldr	r0, [r2, r3]
    9f8c:	4b3e      	ldr	r3, [pc, #248]	; (a088 <SX1276SetRx+0x2a4>)
    9f8e:	469c      	mov	ip, r3
    9f90:	4460      	add	r0, ip
    9f92:	4b38      	ldr	r3, [pc, #224]	; (a074 <SX1276SetRx+0x290>)
    9f94:	4798      	blx	r3
                    break;
    9f96:	e018      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
    9f98:	2140      	movs	r1, #64	; 0x40
    9f9a:	202f      	movs	r0, #47	; 0x2f
    9f9c:	4b2f      	ldr	r3, [pc, #188]	; (a05c <SX1276SetRx+0x278>)
    9f9e:	4798      	blx	r3
                    break;
    9fa0:	e013      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
    9fa2:	2140      	movs	r1, #64	; 0x40
    9fa4:	202f      	movs	r0, #47	; 0x2f
    9fa6:	4b2d      	ldr	r3, [pc, #180]	; (a05c <SX1276SetRx+0x278>)
    9fa8:	4798      	blx	r3
                    break;
    9faa:	e00e      	b.n	9fca <SX1276SetRx+0x1e6>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
    9fac:	2140      	movs	r1, #64	; 0x40
    9fae:	202f      	movs	r0, #47	; 0x2f
    9fb0:	4b2a      	ldr	r3, [pc, #168]	; (a05c <SX1276SetRx+0x278>)
    9fb2:	4798      	blx	r3
                    break;
    9fb4:	e009      	b.n	9fca <SX1276SetRx+0x1e6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    9fb6:	2031      	movs	r0, #49	; 0x31
    9fb8:	4b27      	ldr	r3, [pc, #156]	; (a058 <SX1276SetRx+0x274>)
    9fba:	4798      	blx	r3
    9fbc:	2180      	movs	r1, #128	; 0x80
    9fbe:	4249      	negs	r1, r1
    9fc0:	4301      	orrs	r1, r0
    9fc2:	b2c9      	uxtb	r1, r1
    9fc4:	2031      	movs	r0, #49	; 0x31
    9fc6:	4b25      	ldr	r3, [pc, #148]	; (a05c <SX1276SetRx+0x278>)
    9fc8:	4798      	blx	r3
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    9fca:	4b22      	ldr	r3, [pc, #136]	; (a054 <SX1276SetRx+0x270>)
    9fcc:	22da      	movs	r2, #218	; 0xda
    9fce:	5c9e      	ldrb	r6, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9fd0:	3a03      	subs	r2, #3
    9fd2:	5c9b      	ldrb	r3, [r3, r2]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d012      	beq.n	9ffe <SX1276SetRx+0x21a>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    9fd8:	211d      	movs	r1, #29
    9fda:	2011      	movs	r0, #17
    9fdc:	4c1f      	ldr	r4, [pc, #124]	; (a05c <SX1276SetRx+0x278>)
    9fde:	47a0      	blx	r4
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    9fe0:	2040      	movs	r0, #64	; 0x40
    9fe2:	4b1d      	ldr	r3, [pc, #116]	; (a058 <SX1276SetRx+0x274>)
    9fe4:	4798      	blx	r3
    9fe6:	2133      	movs	r1, #51	; 0x33
    9fe8:	4001      	ands	r1, r0
    9fea:	2040      	movs	r0, #64	; 0x40
    9fec:	47a0      	blx	r4
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    9fee:	2100      	movs	r1, #0
    9ff0:	200f      	movs	r0, #15
    9ff2:	4c1a      	ldr	r4, [pc, #104]	; (a05c <SX1276SetRx+0x278>)
    9ff4:	47a0      	blx	r4
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    9ff6:	2100      	movs	r1, #0
    9ff8:	200d      	movs	r0, #13
    9ffa:	47a0      	blx	r4
        break;
    9ffc:	e727      	b.n	9e4e <SX1276SetRx+0x6a>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    9ffe:	211f      	movs	r1, #31
    a000:	2011      	movs	r0, #17
    a002:	4c16      	ldr	r4, [pc, #88]	; (a05c <SX1276SetRx+0x278>)
    a004:	47a0      	blx	r4
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    a006:	2040      	movs	r0, #64	; 0x40
    a008:	4b13      	ldr	r3, [pc, #76]	; (a058 <SX1276SetRx+0x274>)
    a00a:	4798      	blx	r3
    a00c:	213f      	movs	r1, #63	; 0x3f
    a00e:	4001      	ands	r1, r0
    a010:	2040      	movs	r0, #64	; 0x40
    a012:	47a0      	blx	r4
    a014:	e7eb      	b.n	9fee <SX1276SetRx+0x20a>
        TimerSetValue( &RxTimeoutTimer, timeout );
    a016:	4c1d      	ldr	r4, [pc, #116]	; (a08c <SX1276SetRx+0x2a8>)
    a018:	0029      	movs	r1, r5
    a01a:	0020      	movs	r0, r4
    a01c:	4b1c      	ldr	r3, [pc, #112]	; (a090 <SX1276SetRx+0x2ac>)
    a01e:	4798      	blx	r3
        TimerStart( &RxTimeoutTimer );
    a020:	0020      	movs	r0, r4
    a022:	4b1c      	ldr	r3, [pc, #112]	; (a094 <SX1276SetRx+0x2b0>)
    a024:	4798      	blx	r3
    a026:	e71f      	b.n	9e68 <SX1276SetRx+0x84>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    a028:	2005      	movs	r0, #5
    a02a:	4b0f      	ldr	r3, [pc, #60]	; (a068 <SX1276SetRx+0x284>)
    a02c:	4798      	blx	r3
        if( rxContinuous == false )
    a02e:	2e00      	cmp	r6, #0
    a030:	d000      	beq.n	a034 <SX1276SetRx+0x250>
    a032:	e725      	b.n	9e80 <SX1276SetRx+0x9c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    a034:	23b0      	movs	r3, #176	; 0xb0
    a036:	4a07      	ldr	r2, [pc, #28]	; (a054 <SX1276SetRx+0x270>)
    a038:	58d1      	ldr	r1, [r2, r3]
    a03a:	4c17      	ldr	r4, [pc, #92]	; (a098 <SX1276SetRx+0x2b4>)
    a03c:	0020      	movs	r0, r4
    a03e:	4b14      	ldr	r3, [pc, #80]	; (a090 <SX1276SetRx+0x2ac>)
    a040:	4798      	blx	r3
            TimerStart( &RxTimeoutSyncWord );
    a042:	0020      	movs	r0, r4
    a044:	4b13      	ldr	r3, [pc, #76]	; (a094 <SX1276SetRx+0x2b0>)
    a046:	4798      	blx	r3
    a048:	e71a      	b.n	9e80 <SX1276SetRx+0x9c>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    a04a:	2005      	movs	r0, #5
    a04c:	4b06      	ldr	r3, [pc, #24]	; (a068 <SX1276SetRx+0x284>)
    a04e:	4798      	blx	r3
    a050:	e716      	b.n	9e80 <SX1276SetRx+0x9c>
    a052:	46c0      	nop			; (mov r8, r8)
    a054:	20001c28 	.word	0x20001c28
    a058:	000099dd 	.word	0x000099dd
    a05c:	0000991d 	.word	0x0000991d
    a060:	20001670 	.word	0x20001670
    a064:	0000ebd9 	.word	0x0000ebd9
    a068:	00009d41 	.word	0x00009d41
    a06c:	00014578 	.word	0x00014578
    a070:	00001e82 	.word	0x00001e82
    a074:	00009939 	.word	0x00009939
    a078:	000028b4 	.word	0x000028b4
    a07c:	00003d04 	.word	0x00003d04
    a080:	0000515e 	.word	0x0000515e
    a084:	00007a12 	.word	0x00007a12
    a088:	0000a2c6 	.word	0x0000a2c6
    a08c:	20001d14 	.word	0x20001d14
    a090:	0000c23d 	.word	0x0000c23d
    a094:	0000c04d 	.word	0x0000c04d
    a098:	20001c14 	.word	0x20001c14

0000a09c <SX1276SetTx>:
{
    a09c:	b570      	push	{r4, r5, r6, lr}
    a09e:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
    a0a0:	4825      	ldr	r0, [pc, #148]	; (a138 <SX1276SetTx+0x9c>)
    a0a2:	4b26      	ldr	r3, [pc, #152]	; (a13c <SX1276SetTx+0xa0>)
    a0a4:	4798      	blx	r3
    switch( SX1276.Settings.Modem )
    a0a6:	2389      	movs	r3, #137	; 0x89
    a0a8:	4a25      	ldr	r2, [pc, #148]	; (a140 <SX1276SetTx+0xa4>)
    a0aa:	5cd3      	ldrb	r3, [r2, r3]
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d00c      	beq.n	a0ca <SX1276SetTx+0x2e>
    a0b0:	2b01      	cmp	r3, #1
    a0b2:	d022      	beq.n	a0fa <SX1276SetTx+0x5e>
    SX1276.Settings.State = RF_TX_RUNNING;
    a0b4:	2102      	movs	r1, #2
    a0b6:	2388      	movs	r3, #136	; 0x88
    a0b8:	4a21      	ldr	r2, [pc, #132]	; (a140 <SX1276SetTx+0xa4>)
    a0ba:	54d1      	strb	r1, [r2, r3]
    TimerStart( &TxTimeoutTimer );
    a0bc:	481e      	ldr	r0, [pc, #120]	; (a138 <SX1276SetTx+0x9c>)
    a0be:	4b21      	ldr	r3, [pc, #132]	; (a144 <SX1276SetTx+0xa8>)
    a0c0:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    a0c2:	2003      	movs	r0, #3
    a0c4:	4b20      	ldr	r3, [pc, #128]	; (a148 <SX1276SetTx+0xac>)
    a0c6:	4798      	blx	r3
}
    a0c8:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    a0ca:	2040      	movs	r0, #64	; 0x40
    a0cc:	4c1f      	ldr	r4, [pc, #124]	; (a14c <SX1276SetTx+0xb0>)
    a0ce:	47a0      	blx	r4
                                                                            RF_DIOMAPPING1_DIO1_MASK &
    a0d0:	2103      	movs	r1, #3
    a0d2:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
    a0d4:	2010      	movs	r0, #16
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    a0d6:	4301      	orrs	r1, r0
    a0d8:	3030      	adds	r0, #48	; 0x30
    a0da:	4d1d      	ldr	r5, [pc, #116]	; (a150 <SX1276SetTx+0xb4>)
    a0dc:	47a8      	blx	r5
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    a0de:	2041      	movs	r0, #65	; 0x41
    a0e0:	47a0      	blx	r4
    a0e2:	213e      	movs	r1, #62	; 0x3e
    a0e4:	4001      	ands	r1, r0
    a0e6:	2041      	movs	r0, #65	; 0x41
    a0e8:	47a8      	blx	r5
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    a0ea:	2035      	movs	r0, #53	; 0x35
    a0ec:	47a0      	blx	r4
    a0ee:	233f      	movs	r3, #63	; 0x3f
    a0f0:	4018      	ands	r0, r3
    a0f2:	3383      	adds	r3, #131	; 0x83
    a0f4:	4a12      	ldr	r2, [pc, #72]	; (a140 <SX1276SetTx+0xa4>)
    a0f6:	54d0      	strb	r0, [r2, r3]
        break;
    a0f8:	e7dc      	b.n	a0b4 <SX1276SetTx+0x18>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    a0fa:	23d7      	movs	r3, #215	; 0xd7
    a0fc:	4a10      	ldr	r2, [pc, #64]	; (a140 <SX1276SetTx+0xa4>)
    a0fe:	5cd3      	ldrb	r3, [r2, r3]
    a100:	2b00      	cmp	r3, #0
    a102:	d10c      	bne.n	a11e <SX1276SetTx+0x82>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    a104:	21f7      	movs	r1, #247	; 0xf7
    a106:	2011      	movs	r0, #17
    a108:	4c11      	ldr	r4, [pc, #68]	; (a150 <SX1276SetTx+0xb4>)
    a10a:	47a0      	blx	r4
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    a10c:	2040      	movs	r0, #64	; 0x40
    a10e:	4b0f      	ldr	r3, [pc, #60]	; (a14c <SX1276SetTx+0xb0>)
    a110:	4798      	blx	r3
    a112:	213f      	movs	r1, #63	; 0x3f
    a114:	4001      	ands	r1, r0
    a116:	2040      	movs	r0, #64	; 0x40
    a118:	4301      	orrs	r1, r0
    a11a:	47a0      	blx	r4
    a11c:	e7ca      	b.n	a0b4 <SX1276SetTx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    a11e:	21f5      	movs	r1, #245	; 0xf5
    a120:	2011      	movs	r0, #17
    a122:	4c0b      	ldr	r4, [pc, #44]	; (a150 <SX1276SetTx+0xb4>)
    a124:	47a0      	blx	r4
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    a126:	2040      	movs	r0, #64	; 0x40
    a128:	4b08      	ldr	r3, [pc, #32]	; (a14c <SX1276SetTx+0xb0>)
    a12a:	4798      	blx	r3
    a12c:	2133      	movs	r1, #51	; 0x33
    a12e:	4001      	ands	r1, r0
    a130:	2040      	movs	r0, #64	; 0x40
    a132:	4301      	orrs	r1, r0
    a134:	47a0      	blx	r4
    a136:	e7bd      	b.n	a0b4 <SX1276SetTx+0x18>
    a138:	20001c00 	.word	0x20001c00
    a13c:	0000c23d 	.word	0x0000c23d
    a140:	20001c28 	.word	0x20001c28
    a144:	0000c04d 	.word	0x0000c04d
    a148:	00009d41 	.word	0x00009d41
    a14c:	000099dd 	.word	0x000099dd
    a150:	0000991d 	.word	0x0000991d

0000a154 <SX1276StartCad>:
{
    a154:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    a156:	2389      	movs	r3, #137	; 0x89
    a158:	4a0b      	ldr	r2, [pc, #44]	; (a188 <SX1276StartCad+0x34>)
    a15a:	5cd3      	ldrb	r3, [r2, r3]
    a15c:	2b01      	cmp	r3, #1
    a15e:	d111      	bne.n	a184 <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    a160:	21fa      	movs	r1, #250	; 0xfa
    a162:	2011      	movs	r0, #17
    a164:	4d09      	ldr	r5, [pc, #36]	; (a18c <SX1276StartCad+0x38>)
    a166:	47a8      	blx	r5
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
    a168:	2040      	movs	r0, #64	; 0x40
    a16a:	4b09      	ldr	r3, [pc, #36]	; (a190 <SX1276StartCad+0x3c>)
    a16c:	4798      	blx	r3
    a16e:	2403      	movs	r4, #3
    a170:	43a0      	bics	r0, r4
    a172:	b2c1      	uxtb	r1, r0
    a174:	2040      	movs	r0, #64	; 0x40
    a176:	47a8      	blx	r5
            SX1276.Settings.State = RF_CAD;
    a178:	2388      	movs	r3, #136	; 0x88
    a17a:	4a03      	ldr	r2, [pc, #12]	; (a188 <SX1276StartCad+0x34>)
    a17c:	54d4      	strb	r4, [r2, r3]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
    a17e:	2007      	movs	r0, #7
    a180:	4b04      	ldr	r3, [pc, #16]	; (a194 <SX1276StartCad+0x40>)
    a182:	4798      	blx	r3
}
    a184:	bd70      	pop	{r4, r5, r6, pc}
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	20001c28 	.word	0x20001c28
    a18c:	0000991d 	.word	0x0000991d
    a190:	000099dd 	.word	0x000099dd
    a194:	00009d41 	.word	0x00009d41

0000a198 <SX1276SetModem>:
{
    a198:	b510      	push	{r4, lr}
    a19a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    a19c:	2001      	movs	r0, #1
    a19e:	4b1d      	ldr	r3, [pc, #116]	; (a214 <SX1276SetModem+0x7c>)
    a1a0:	4798      	blx	r3
    a1a2:	0603      	lsls	r3, r0, #24
    a1a4:	d41f      	bmi.n	a1e6 <SX1276SetModem+0x4e>
        SX1276.Settings.Modem = MODEM_FSK;
    a1a6:	2100      	movs	r1, #0
    a1a8:	2389      	movs	r3, #137	; 0x89
    a1aa:	4a1b      	ldr	r2, [pc, #108]	; (a218 <SX1276SetModem+0x80>)
    a1ac:	54d1      	strb	r1, [r2, r3]
    if( SX1276.Settings.Modem == modem )
    a1ae:	2389      	movs	r3, #137	; 0x89
    a1b0:	4a19      	ldr	r2, [pc, #100]	; (a218 <SX1276SetModem+0x80>)
    a1b2:	5cd3      	ldrb	r3, [r2, r3]
    a1b4:	42a3      	cmp	r3, r4
    a1b6:	d015      	beq.n	a1e4 <SX1276SetModem+0x4c>
    SX1276.Settings.Modem = modem;
    a1b8:	2389      	movs	r3, #137	; 0x89
    a1ba:	54d4      	strb	r4, [r2, r3]
    switch( SX1276.Settings.Modem )
    a1bc:	2c01      	cmp	r4, #1
    a1be:	d117      	bne.n	a1f0 <SX1276SetModem+0x58>
        SX1276SetSleep( );
    a1c0:	4b16      	ldr	r3, [pc, #88]	; (a21c <SX1276SetModem+0x84>)
    a1c2:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    a1c4:	2001      	movs	r0, #1
    a1c6:	4b13      	ldr	r3, [pc, #76]	; (a214 <SX1276SetModem+0x7c>)
    a1c8:	4798      	blx	r3
    a1ca:	2180      	movs	r1, #128	; 0x80
    a1cc:	4249      	negs	r1, r1
    a1ce:	4301      	orrs	r1, r0
    a1d0:	b2c9      	uxtb	r1, r1
    a1d2:	2001      	movs	r0, #1
    a1d4:	4c12      	ldr	r4, [pc, #72]	; (a220 <SX1276SetModem+0x88>)
    a1d6:	47a0      	blx	r4
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    a1d8:	2100      	movs	r1, #0
    a1da:	2040      	movs	r0, #64	; 0x40
    a1dc:	47a0      	blx	r4
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    a1de:	2100      	movs	r1, #0
    a1e0:	2041      	movs	r0, #65	; 0x41
    a1e2:	47a0      	blx	r4
}
    a1e4:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
    a1e6:	2101      	movs	r1, #1
    a1e8:	2389      	movs	r3, #137	; 0x89
    a1ea:	4a0b      	ldr	r2, [pc, #44]	; (a218 <SX1276SetModem+0x80>)
    a1ec:	54d1      	strb	r1, [r2, r3]
    a1ee:	e7de      	b.n	a1ae <SX1276SetModem+0x16>
        SX1276SetSleep( );
    a1f0:	4b0a      	ldr	r3, [pc, #40]	; (a21c <SX1276SetModem+0x84>)
    a1f2:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    a1f4:	2001      	movs	r0, #1
    a1f6:	4b07      	ldr	r3, [pc, #28]	; (a214 <SX1276SetModem+0x7c>)
    a1f8:	4798      	blx	r3
    a1fa:	217f      	movs	r1, #127	; 0x7f
    a1fc:	4001      	ands	r1, r0
    a1fe:	2001      	movs	r0, #1
    a200:	4c07      	ldr	r4, [pc, #28]	; (a220 <SX1276SetModem+0x88>)
    a202:	47a0      	blx	r4
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    a204:	2100      	movs	r1, #0
    a206:	2040      	movs	r0, #64	; 0x40
    a208:	47a0      	blx	r4
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    a20a:	2130      	movs	r1, #48	; 0x30
    a20c:	2041      	movs	r0, #65	; 0x41
    a20e:	47a0      	blx	r4
        break;
    a210:	e7e8      	b.n	a1e4 <SX1276SetModem+0x4c>
    a212:	46c0      	nop			; (mov r8, r8)
    a214:	000099dd 	.word	0x000099dd
    a218:	20001c28 	.word	0x20001c28
    a21c:	00009d85 	.word	0x00009d85
    a220:	0000991d 	.word	0x0000991d

0000a224 <SX1276Init>:
{
    a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    RadioEvents = events;
    a226:	4b16      	ldr	r3, [pc, #88]	; (a280 <SX1276Init+0x5c>)
    a228:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    a22a:	4d16      	ldr	r5, [pc, #88]	; (a284 <SX1276Init+0x60>)
    a22c:	0029      	movs	r1, r5
    a22e:	4816      	ldr	r0, [pc, #88]	; (a288 <SX1276Init+0x64>)
    a230:	4c16      	ldr	r4, [pc, #88]	; (a28c <SX1276Init+0x68>)
    a232:	47a0      	blx	r4
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    a234:	0029      	movs	r1, r5
    a236:	4816      	ldr	r0, [pc, #88]	; (a290 <SX1276Init+0x6c>)
    a238:	47a0      	blx	r4
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    a23a:	0029      	movs	r1, r5
    a23c:	4815      	ldr	r0, [pc, #84]	; (a294 <SX1276Init+0x70>)
    a23e:	47a0      	blx	r4
    SX1276Reset( );
    a240:	4b15      	ldr	r3, [pc, #84]	; (a298 <SX1276Init+0x74>)
    a242:	4798      	blx	r3
    RxChainCalibration( );
    a244:	4b15      	ldr	r3, [pc, #84]	; (a29c <SX1276Init+0x78>)
    a246:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    a248:	2000      	movs	r0, #0
    a24a:	4b15      	ldr	r3, [pc, #84]	; (a2a0 <SX1276Init+0x7c>)
    a24c:	4798      	blx	r3
    SX1276IoIrqInit( DioIrq );
    a24e:	4815      	ldr	r0, [pc, #84]	; (a2a4 <SX1276Init+0x80>)
    a250:	4b15      	ldr	r3, [pc, #84]	; (a2a8 <SX1276Init+0x84>)
    a252:	4798      	blx	r3
    a254:	4c15      	ldr	r4, [pc, #84]	; (a2ac <SX1276Init+0x88>)
    a256:	0027      	movs	r7, r4
    a258:	3730      	adds	r7, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
    a25a:	4e15      	ldr	r6, [pc, #84]	; (a2b0 <SX1276Init+0x8c>)
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    a25c:	4d15      	ldr	r5, [pc, #84]	; (a2b4 <SX1276Init+0x90>)
        SX1276SetModem( RadioRegsInit[i].Modem );
    a25e:	7820      	ldrb	r0, [r4, #0]
    a260:	47b0      	blx	r6
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    a262:	78a1      	ldrb	r1, [r4, #2]
    a264:	7860      	ldrb	r0, [r4, #1]
    a266:	47a8      	blx	r5
    a268:	3403      	adds	r4, #3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    a26a:	42bc      	cmp	r4, r7
    a26c:	d1f7      	bne.n	a25e <SX1276Init+0x3a>
    SX1276SetModem( MODEM_FSK );
    a26e:	2000      	movs	r0, #0
    a270:	4b0f      	ldr	r3, [pc, #60]	; (a2b0 <SX1276Init+0x8c>)
    a272:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
    a274:	2100      	movs	r1, #0
    a276:	2388      	movs	r3, #136	; 0x88
    a278:	4a0f      	ldr	r2, [pc, #60]	; (a2b8 <SX1276Init+0x94>)
    a27a:	54d1      	strb	r1, [r2, r3]
}
    a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	20001770 	.word	0x20001770
    a284:	0000b195 	.word	0x0000b195
    a288:	20001c00 	.word	0x20001c00
    a28c:	0000c03d 	.word	0x0000c03d
    a290:	20001d14 	.word	0x20001d14
    a294:	20001c14 	.word	0x20001c14
    a298:	00002505 	.word	0x00002505
    a29c:	000099f9 	.word	0x000099f9
    a2a0:	00009d41 	.word	0x00009d41
    a2a4:	20000120 	.word	0x20000120
    a2a8:	000024d1 	.word	0x000024d1
    a2ac:	0001459c 	.word	0x0001459c
    a2b0:	0000a199 	.word	0x0000a199
    a2b4:	0000991d 	.word	0x0000991d
    a2b8:	20001c28 	.word	0x20001c28

0000a2bc <SX1276IsChannelFree>:
{
    a2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2be:	b083      	sub	sp, #12
    a2c0:	9000      	str	r0, [sp, #0]
    a2c2:	000d      	movs	r5, r1
    a2c4:	0014      	movs	r4, r2
    a2c6:	001f      	movs	r7, r3
    SX1276SetModem( modem );
    a2c8:	4b0f      	ldr	r3, [pc, #60]	; (a308 <SX1276IsChannelFree+0x4c>)
    a2ca:	4798      	blx	r3
    SX1276SetChannel( freq );
    a2cc:	0028      	movs	r0, r5
    a2ce:	4b0f      	ldr	r3, [pc, #60]	; (a30c <SX1276IsChannelFree+0x50>)
    a2d0:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    a2d2:	2005      	movs	r0, #5
    a2d4:	4b0e      	ldr	r3, [pc, #56]	; (a310 <SX1276IsChannelFree+0x54>)
    a2d6:	4798      	blx	r3
    DelayMs( 1 );
    a2d8:	2001      	movs	r0, #1
    a2da:	4b0e      	ldr	r3, [pc, #56]	; (a314 <SX1276IsChannelFree+0x58>)
    a2dc:	4798      	blx	r3
    carrierSenseTime = TimerGetCurrentTime( );
    a2de:	4b0e      	ldr	r3, [pc, #56]	; (a318 <SX1276IsChannelFree+0x5c>)
    a2e0:	4798      	blx	r3
    a2e2:	9001      	str	r0, [sp, #4]
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
    a2e4:	4e0d      	ldr	r6, [pc, #52]	; (a31c <SX1276IsChannelFree+0x60>)
        rssi = SX1276ReadRssi( modem );
    a2e6:	4d0e      	ldr	r5, [pc, #56]	; (a320 <SX1276IsChannelFree+0x64>)
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
    a2e8:	9801      	ldr	r0, [sp, #4]
    a2ea:	47b0      	blx	r6
    a2ec:	42b8      	cmp	r0, r7
    a2ee:	d205      	bcs.n	a2fc <SX1276IsChannelFree+0x40>
        rssi = SX1276ReadRssi( modem );
    a2f0:	9800      	ldr	r0, [sp, #0]
    a2f2:	47a8      	blx	r5
        if( rssi > rssiThresh )
    a2f4:	42a0      	cmp	r0, r4
    a2f6:	ddf7      	ble.n	a2e8 <SX1276IsChannelFree+0x2c>
            status = false;
    a2f8:	2400      	movs	r4, #0
    a2fa:	e000      	b.n	a2fe <SX1276IsChannelFree+0x42>
    bool status = true;
    a2fc:	2401      	movs	r4, #1
    SX1276SetSleep( );
    a2fe:	4b09      	ldr	r3, [pc, #36]	; (a324 <SX1276IsChannelFree+0x68>)
    a300:	4798      	blx	r3
}
    a302:	0020      	movs	r0, r4
    a304:	b003      	add	sp, #12
    a306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a308:	0000a199 	.word	0x0000a199
    a30c:	00009939 	.word	0x00009939
    a310:	00009d41 	.word	0x00009d41
    a314:	0000be69 	.word	0x0000be69
    a318:	0000c26d 	.word	0x0000c26d
    a31c:	0000c281 	.word	0x0000c281
    a320:	00009cf1 	.word	0x00009cf1
    a324:	00009d85 	.word	0x00009d85

0000a328 <SX1276Random>:
{
    a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SX1276SetModem( MODEM_LORA );
    a32a:	2001      	movs	r0, #1
    a32c:	4b0d      	ldr	r3, [pc, #52]	; (a364 <SX1276Random+0x3c>)
    a32e:	4798      	blx	r3
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    a330:	21ff      	movs	r1, #255	; 0xff
    a332:	2011      	movs	r0, #17
    a334:	4b0c      	ldr	r3, [pc, #48]	; (a368 <SX1276Random+0x40>)
    a336:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
    a338:	2005      	movs	r0, #5
    a33a:	4b0c      	ldr	r3, [pc, #48]	; (a36c <SX1276Random+0x44>)
    a33c:	4798      	blx	r3
    a33e:	2400      	movs	r4, #0
    uint32_t rnd = 0;
    a340:	2500      	movs	r5, #0
        DelayMs( 1 );
    a342:	4f0b      	ldr	r7, [pc, #44]	; (a370 <SX1276Random+0x48>)
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    a344:	4e0b      	ldr	r6, [pc, #44]	; (a374 <SX1276Random+0x4c>)
        DelayMs( 1 );
    a346:	2001      	movs	r0, #1
    a348:	47b8      	blx	r7
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
    a34a:	202c      	movs	r0, #44	; 0x2c
    a34c:	47b0      	blx	r6
    a34e:	2301      	movs	r3, #1
    a350:	4018      	ands	r0, r3
    a352:	40a0      	lsls	r0, r4
    a354:	4305      	orrs	r5, r0
    a356:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
    a358:	2c20      	cmp	r4, #32
    a35a:	d1f4      	bne.n	a346 <SX1276Random+0x1e>
    SX1276SetSleep( );
    a35c:	4b06      	ldr	r3, [pc, #24]	; (a378 <SX1276Random+0x50>)
    a35e:	4798      	blx	r3
}
    a360:	0028      	movs	r0, r5
    a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a364:	0000a199 	.word	0x0000a199
    a368:	0000991d 	.word	0x0000991d
    a36c:	00009d41 	.word	0x00009d41
    a370:	0000be69 	.word	0x0000be69
    a374:	000099dd 	.word	0x000099dd
    a378:	00009d85 	.word	0x00009d85

0000a37c <SX1276SetRxConfig>:
{
    a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a37e:	46de      	mov	lr, fp
    a380:	4657      	mov	r7, sl
    a382:	464e      	mov	r6, r9
    a384:	4645      	mov	r5, r8
    a386:	b5e0      	push	{r5, r6, r7, lr}
    a388:	b089      	sub	sp, #36	; 0x24
    a38a:	0004      	movs	r4, r0
    a38c:	000d      	movs	r5, r1
    a38e:	9202      	str	r2, [sp, #8]
    a390:	9304      	str	r3, [sp, #16]
    a392:	ab12      	add	r3, sp, #72	; 0x48
    a394:	cb04      	ldmia	r3!, {r2}
    a396:	9206      	str	r2, [sp, #24]
    a398:	881e      	ldrh	r6, [r3, #0]
    a39a:	ab14      	add	r3, sp, #80	; 0x50
    a39c:	881b      	ldrh	r3, [r3, #0]
    a39e:	9301      	str	r3, [sp, #4]
    a3a0:	ab15      	add	r3, sp, #84	; 0x54
    a3a2:	781b      	ldrb	r3, [r3, #0]
    a3a4:	4699      	mov	r9, r3
    a3a6:	ab16      	add	r3, sp, #88	; 0x58
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	9300      	str	r3, [sp, #0]
    a3ac:	ab17      	add	r3, sp, #92	; 0x5c
    a3ae:	781f      	ldrb	r7, [r3, #0]
    a3b0:	ab18      	add	r3, sp, #96	; 0x60
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	9307      	str	r3, [sp, #28]
    a3b6:	ab19      	add	r3, sp, #100	; 0x64
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	469a      	mov	sl, r3
    a3bc:	ab1a      	add	r3, sp, #104	; 0x68
    a3be:	781b      	ldrb	r3, [r3, #0]
    a3c0:	4698      	mov	r8, r3
    a3c2:	ab1b      	add	r3, sp, #108	; 0x6c
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	469b      	mov	fp, r3
    SX1276SetModem( modem );
    a3c8:	4bb3      	ldr	r3, [pc, #716]	; (a698 <SX1276SetRxConfig+0x31c>)
    a3ca:	4798      	blx	r3
    switch( modem )
    a3cc:	2c00      	cmp	r4, #0
    a3ce:	d009      	beq.n	a3e4 <SX1276SetRxConfig+0x68>
    a3d0:	2c01      	cmp	r4, #1
    a3d2:	d100      	bne.n	a3d6 <SX1276SetRxConfig+0x5a>
    a3d4:	e08f      	b.n	a4f6 <SX1276SetRxConfig+0x17a>
}
    a3d6:	b009      	add	sp, #36	; 0x24
    a3d8:	bc3c      	pop	{r2, r3, r4, r5}
    a3da:	4690      	mov	r8, r2
    a3dc:	4699      	mov	r9, r3
    a3de:	46a2      	mov	sl, r4
    a3e0:	46ab      	mov	fp, r5
    a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    a3e4:	4cad      	ldr	r4, [pc, #692]	; (a69c <SX1276SetRxConfig+0x320>)
    a3e6:	2398      	movs	r3, #152	; 0x98
    a3e8:	50e5      	str	r5, [r4, r3]
            SX1276.Settings.Fsk.Datarate = datarate;
    a3ea:	3308      	adds	r3, #8
    a3ec:	9a02      	ldr	r2, [sp, #8]
    a3ee:	50e2      	str	r2, [r4, r3]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    a3f0:	3b04      	subs	r3, #4
    a3f2:	9906      	ldr	r1, [sp, #24]
    a3f4:	50e1      	str	r1, [r4, r3]
            SX1276.Settings.Fsk.FixLen = fixLen;
    a3f6:	330a      	adds	r3, #10
    a3f8:	4649      	mov	r1, r9
    a3fa:	54e1      	strb	r1, [r4, r3]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    a3fc:	3301      	adds	r3, #1
    a3fe:	4669      	mov	r1, sp
    a400:	7808      	ldrb	r0, [r1, #0]
    a402:	54e0      	strb	r0, [r4, r3]
            SX1276.Settings.Fsk.CrcOn = crcOn;
    a404:	3301      	adds	r3, #1
    a406:	54e7      	strb	r7, [r4, r3]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    a408:	3301      	adds	r3, #1
    a40a:	4640      	mov	r0, r8
    a40c:	54e0      	strb	r0, [r4, r3]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    a40e:	3301      	adds	r3, #1
    a410:	4658      	mov	r0, fp
    a412:	54e0      	strb	r0, [r4, r3]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    a414:	3b06      	subs	r3, #6
    a416:	52e6      	strh	r6, [r4, r3]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    a418:	0010      	movs	r0, r2
    a41a:	4ba1      	ldr	r3, [pc, #644]	; (a6a0 <SX1276SetRxConfig+0x324>)
    a41c:	4798      	blx	r3
    a41e:	0002      	movs	r2, r0
    a420:	000b      	movs	r3, r1
    a422:	48a0      	ldr	r0, [pc, #640]	; (a6a4 <SX1276SetRxConfig+0x328>)
    a424:	4682      	mov	sl, r0
    a426:	9202      	str	r2, [sp, #8]
    a428:	9303      	str	r3, [sp, #12]
    a42a:	2000      	movs	r0, #0
    a42c:	499e      	ldr	r1, [pc, #632]	; (a6a8 <SX1276SetRxConfig+0x32c>)
    a42e:	47d0      	blx	sl
    a430:	4b9e      	ldr	r3, [pc, #632]	; (a6ac <SX1276SetRxConfig+0x330>)
    a432:	4698      	mov	r8, r3
    a434:	2200      	movs	r2, #0
    a436:	4b9e      	ldr	r3, [pc, #632]	; (a6b0 <SX1276SetRxConfig+0x334>)
    a438:	47c0      	blx	r8
    a43a:	9004      	str	r0, [sp, #16]
    a43c:	9105      	str	r1, [sp, #20]
    a43e:	9801      	ldr	r0, [sp, #4]
    a440:	4b9c      	ldr	r3, [pc, #624]	; (a6b4 <SX1276SetRxConfig+0x338>)
    a442:	4798      	blx	r3
    a444:	0002      	movs	r2, r0
    a446:	000b      	movs	r3, r1
    a448:	9804      	ldr	r0, [sp, #16]
    a44a:	9905      	ldr	r1, [sp, #20]
    a44c:	47c0      	blx	r8
    a44e:	2200      	movs	r2, #0
    a450:	4b99      	ldr	r3, [pc, #612]	; (a6b8 <SX1276SetRxConfig+0x33c>)
    a452:	47c0      	blx	r8
    a454:	4b99      	ldr	r3, [pc, #612]	; (a6bc <SX1276SetRxConfig+0x340>)
    a456:	4698      	mov	r8, r3
    a458:	4798      	blx	r3
    a45a:	23b0      	movs	r3, #176	; 0xb0
    a45c:	50e0      	str	r0, [r4, r3]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    a45e:	9a02      	ldr	r2, [sp, #8]
    a460:	9b03      	ldr	r3, [sp, #12]
    a462:	2000      	movs	r0, #0
    a464:	4996      	ldr	r1, [pc, #600]	; (a6c0 <SX1276SetRxConfig+0x344>)
    a466:	47d0      	blx	sl
    a468:	47c0      	blx	r8
    a46a:	b283      	uxth	r3, r0
    a46c:	4698      	mov	r8, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    a46e:	0a19      	lsrs	r1, r3, #8
    a470:	2002      	movs	r0, #2
    a472:	4c94      	ldr	r4, [pc, #592]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a474:	47a0      	blx	r4
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    a476:	4643      	mov	r3, r8
    a478:	466a      	mov	r2, sp
    a47a:	7113      	strb	r3, [r2, #4]
    a47c:	7911      	ldrb	r1, [r2, #4]
    a47e:	2003      	movs	r0, #3
    a480:	47a0      	blx	r4
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    a482:	0028      	movs	r0, r5
    a484:	4d90      	ldr	r5, [pc, #576]	; (a6c8 <SX1276SetRxConfig+0x34c>)
    a486:	47a8      	blx	r5
    a488:	0001      	movs	r1, r0
    a48a:	2012      	movs	r0, #18
    a48c:	47a0      	blx	r4
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    a48e:	9806      	ldr	r0, [sp, #24]
    a490:	47a8      	blx	r5
    a492:	0001      	movs	r1, r0
    a494:	2013      	movs	r0, #19
    a496:	47a0      	blx	r4
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    a498:	0a31      	lsrs	r1, r6, #8
    a49a:	2025      	movs	r0, #37	; 0x25
    a49c:	47a0      	blx	r4
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    a49e:	b2f1      	uxtb	r1, r6
    a4a0:	2026      	movs	r0, #38	; 0x26
    a4a2:	47a0      	blx	r4
            if( fixLen == 1 )
    a4a4:	464b      	mov	r3, r9
    a4a6:	2b00      	cmp	r3, #0
    a4a8:	d019      	beq.n	a4de <SX1276SetRxConfig+0x162>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    a4aa:	9900      	ldr	r1, [sp, #0]
    a4ac:	2032      	movs	r0, #50	; 0x32
    a4ae:	4b85      	ldr	r3, [pc, #532]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a4b0:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    a4b2:	2030      	movs	r0, #48	; 0x30
    a4b4:	4b85      	ldr	r3, [pc, #532]	; (a6cc <SX1276SetRxConfig+0x350>)
    a4b6:	4798      	blx	r3
                           RF_PACKETCONFIG1_CRC_MASK &
    a4b8:	216f      	movs	r1, #111	; 0x6f
    a4ba:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    a4bc:	2300      	movs	r3, #0
    a4be:	4319      	orrs	r1, r3
                           ( crcOn << 4 ) );
    a4c0:	013f      	lsls	r7, r7, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    a4c2:	4339      	orrs	r1, r7
            SX1276Write( REG_PACKETCONFIG1,
    a4c4:	b2c9      	uxtb	r1, r1
    a4c6:	2030      	movs	r0, #48	; 0x30
    a4c8:	4c7e      	ldr	r4, [pc, #504]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a4ca:	47a0      	blx	r4
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    a4cc:	2031      	movs	r0, #49	; 0x31
    a4ce:	4b7f      	ldr	r3, [pc, #508]	; (a6cc <SX1276SetRxConfig+0x350>)
    a4d0:	4798      	blx	r3
    a4d2:	2140      	movs	r1, #64	; 0x40
    a4d4:	4301      	orrs	r1, r0
    a4d6:	b2c9      	uxtb	r1, r1
    a4d8:	2031      	movs	r0, #49	; 0x31
    a4da:	47a0      	blx	r4
        break;
    a4dc:	e77b      	b.n	a3d6 <SX1276SetRxConfig+0x5a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    a4de:	21ff      	movs	r1, #255	; 0xff
    a4e0:	2032      	movs	r0, #50	; 0x32
    a4e2:	4b78      	ldr	r3, [pc, #480]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a4e4:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    a4e6:	2030      	movs	r0, #48	; 0x30
    a4e8:	4b78      	ldr	r3, [pc, #480]	; (a6cc <SX1276SetRxConfig+0x350>)
    a4ea:	4798      	blx	r3
                           RF_PACKETCONFIG1_CRC_MASK &
    a4ec:	216f      	movs	r1, #111	; 0x6f
    a4ee:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    a4f0:	2380      	movs	r3, #128	; 0x80
    a4f2:	425b      	negs	r3, r3
    a4f4:	e7e3      	b.n	a4be <SX1276SetRxConfig+0x142>
            if( bandwidth > 2 )
    a4f6:	2d02      	cmp	r5, #2
    a4f8:	d900      	bls.n	a4fc <SX1276SetRxConfig+0x180>
    a4fa:	e7fe      	b.n	a4fa <SX1276SetRxConfig+0x17e>
            bandwidth += 7;
    a4fc:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    a4fe:	4b67      	ldr	r3, [pc, #412]	; (a69c <SX1276SetRxConfig+0x320>)
    a500:	22c8      	movs	r2, #200	; 0xc8
    a502:	509d      	str	r5, [r3, r2]
            SX1276.Settings.LoRa.Datarate = datarate;
    a504:	3204      	adds	r2, #4
    a506:	9902      	ldr	r1, [sp, #8]
    a508:	5099      	str	r1, [r3, r2]
            SX1276.Settings.LoRa.Coderate = coderate;
    a50a:	3205      	adds	r2, #5
    a50c:	4668      	mov	r0, sp
    a50e:	7c00      	ldrb	r0, [r0, #16]
    a510:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    a512:	3201      	adds	r2, #1
    a514:	529e      	strh	r6, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
    a516:	3202      	adds	r2, #2
    a518:	4648      	mov	r0, r9
    a51a:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    a51c:	3201      	adds	r2, #1
    a51e:	4668      	mov	r0, sp
    a520:	7800      	ldrb	r0, [r0, #0]
    a522:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
    a524:	3201      	adds	r2, #1
    a526:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    a528:	3201      	adds	r2, #1
    a52a:	4668      	mov	r0, sp
    a52c:	7f00      	ldrb	r0, [r0, #28]
    a52e:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    a530:	3201      	adds	r2, #1
    a532:	4650      	mov	r0, sl
    a534:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    a536:	3201      	adds	r2, #1
    a538:	4640      	mov	r0, r8
    a53a:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    a53c:	3201      	adds	r2, #1
    a53e:	4658      	mov	r0, fp
    a540:	5498      	strb	r0, [r3, r2]
    a542:	000c      	movs	r4, r1
    a544:	2906      	cmp	r1, #6
    a546:	d200      	bcs.n	a54a <SX1276SetRxConfig+0x1ce>
    a548:	2406      	movs	r4, #6
    a54a:	2c0c      	cmp	r4, #12
    a54c:	d900      	bls.n	a550 <SX1276SetRxConfig+0x1d4>
    a54e:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    a550:	2d07      	cmp	r5, #7
    a552:	d108      	bne.n	a566 <SX1276SetRxConfig+0x1ea>
    a554:	0023      	movs	r3, r4
    a556:	3b0b      	subs	r3, #11
    a558:	2b01      	cmp	r3, #1
    a55a:	d806      	bhi.n	a56a <SX1276SetRxConfig+0x1ee>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
    a55c:	2101      	movs	r1, #1
    a55e:	23d0      	movs	r3, #208	; 0xd0
    a560:	4a4e      	ldr	r2, [pc, #312]	; (a69c <SX1276SetRxConfig+0x320>)
    a562:	54d1      	strb	r1, [r2, r3]
    a564:	e005      	b.n	a572 <SX1276SetRxConfig+0x1f6>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    a566:	2d08      	cmp	r5, #8
    a568:	d057      	beq.n	a61a <SX1276SetRxConfig+0x29e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    a56a:	2100      	movs	r1, #0
    a56c:	23d0      	movs	r3, #208	; 0xd0
    a56e:	4a4b      	ldr	r2, [pc, #300]	; (a69c <SX1276SetRxConfig+0x320>)
    a570:	54d1      	strb	r1, [r2, r3]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    a572:	201d      	movs	r0, #29
    a574:	4b55      	ldr	r3, [pc, #340]	; (a6cc <SX1276SetRxConfig+0x350>)
    a576:	469b      	mov	fp, r3
    a578:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    a57a:	9b04      	ldr	r3, [sp, #16]
    a57c:	0059      	lsls	r1, r3, #1
    a57e:	464b      	mov	r3, r9
    a580:	4319      	orrs	r1, r3
    a582:	012b      	lsls	r3, r5, #4
    a584:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
    a586:	b2c9      	uxtb	r1, r1
    a588:	201d      	movs	r0, #29
    a58a:	4b4e      	ldr	r3, [pc, #312]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a58c:	4698      	mov	r8, r3
    a58e:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    a590:	201e      	movs	r0, #30
    a592:	47d8      	blx	fp
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    a594:	9b01      	ldr	r3, [sp, #4]
    a596:	0599      	lsls	r1, r3, #22
    a598:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
    a59a:	00bf      	lsls	r7, r7, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    a59c:	4339      	orrs	r1, r7
                           ( datarate << 4 ) | ( crcOn << 2 ) |
    a59e:	0123      	lsls	r3, r4, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
    a5a0:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    a5a2:	2308      	movs	r3, #8
    a5a4:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
    a5a6:	4301      	orrs	r1, r0
    a5a8:	b2c9      	uxtb	r1, r1
    a5aa:	201e      	movs	r0, #30
    a5ac:	47c0      	blx	r8
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    a5ae:	2026      	movs	r0, #38	; 0x26
    a5b0:	47d8      	blx	fp
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    a5b2:	23d0      	movs	r3, #208	; 0xd0
    a5b4:	4a39      	ldr	r2, [pc, #228]	; (a69c <SX1276SetRxConfig+0x320>)
    a5b6:	5cd1      	ldrb	r1, [r2, r3]
    a5b8:	00c9      	lsls	r1, r1, #3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    a5ba:	3bc8      	subs	r3, #200	; 0xc8
    a5bc:	4398      	bics	r0, r3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    a5be:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
    a5c0:	b2c9      	uxtb	r1, r1
    a5c2:	2026      	movs	r0, #38	; 0x26
    a5c4:	47c0      	blx	r8
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    a5c6:	466b      	mov	r3, sp
    a5c8:	7919      	ldrb	r1, [r3, #4]
    a5ca:	201f      	movs	r0, #31
    a5cc:	47c0      	blx	r8
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    a5ce:	0a31      	lsrs	r1, r6, #8
    a5d0:	2020      	movs	r0, #32
    a5d2:	47c0      	blx	r8
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    a5d4:	b2f1      	uxtb	r1, r6
    a5d6:	2021      	movs	r0, #33	; 0x21
    a5d8:	47c0      	blx	r8
            if( fixLen == 1 )
    a5da:	464b      	mov	r3, r9
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d11f      	bne.n	a620 <SX1276SetRxConfig+0x2a4>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    a5e0:	23d7      	movs	r3, #215	; 0xd7
    a5e2:	4a2e      	ldr	r2, [pc, #184]	; (a69c <SX1276SetRxConfig+0x320>)
    a5e4:	5cd3      	ldrb	r3, [r2, r3]
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d11f      	bne.n	a62a <SX1276SetRxConfig+0x2ae>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    a5ea:	2d09      	cmp	r5, #9
    a5ec:	d02d      	beq.n	a64a <SX1276SetRxConfig+0x2ce>
                SX1276Write( REG_LR_TEST36, 0x03 );
    a5ee:	2103      	movs	r1, #3
    a5f0:	2036      	movs	r0, #54	; 0x36
    a5f2:	4b34      	ldr	r3, [pc, #208]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a5f4:	4798      	blx	r3
            if( datarate == 6 )
    a5f6:	2c06      	cmp	r4, #6
    a5f8:	d03d      	beq.n	a676 <SX1276SetRxConfig+0x2fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    a5fa:	2031      	movs	r0, #49	; 0x31
    a5fc:	4b33      	ldr	r3, [pc, #204]	; (a6cc <SX1276SetRxConfig+0x350>)
    a5fe:	4798      	blx	r3
    a600:	2307      	movs	r3, #7
    a602:	0001      	movs	r1, r0
    a604:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    a606:	2303      	movs	r3, #3
    a608:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    a60a:	b2c9      	uxtb	r1, r1
    a60c:	2031      	movs	r0, #49	; 0x31
    a60e:	4c2d      	ldr	r4, [pc, #180]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a610:	47a0      	blx	r4
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    a612:	210a      	movs	r1, #10
    a614:	2037      	movs	r0, #55	; 0x37
    a616:	47a0      	blx	r4
}
    a618:	e6dd      	b.n	a3d6 <SX1276SetRxConfig+0x5a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    a61a:	2c0c      	cmp	r4, #12
    a61c:	d1a5      	bne.n	a56a <SX1276SetRxConfig+0x1ee>
    a61e:	e79d      	b.n	a55c <SX1276SetRxConfig+0x1e0>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    a620:	9900      	ldr	r1, [sp, #0]
    a622:	2022      	movs	r0, #34	; 0x22
    a624:	4b27      	ldr	r3, [pc, #156]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a626:	4798      	blx	r3
    a628:	e7da      	b.n	a5e0 <SX1276SetRxConfig+0x264>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    a62a:	2044      	movs	r0, #68	; 0x44
    a62c:	4b27      	ldr	r3, [pc, #156]	; (a6cc <SX1276SetRxConfig+0x350>)
    a62e:	4798      	blx	r3
    a630:	2180      	movs	r1, #128	; 0x80
    a632:	4249      	negs	r1, r1
    a634:	4301      	orrs	r1, r0
    a636:	b2c9      	uxtb	r1, r1
    a638:	2044      	movs	r0, #68	; 0x44
    a63a:	4e22      	ldr	r6, [pc, #136]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a63c:	47b0      	blx	r6
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    a63e:	23d8      	movs	r3, #216	; 0xd8
    a640:	4a16      	ldr	r2, [pc, #88]	; (a69c <SX1276SetRxConfig+0x320>)
    a642:	5cd1      	ldrb	r1, [r2, r3]
    a644:	2024      	movs	r0, #36	; 0x24
    a646:	47b0      	blx	r6
    a648:	e7cf      	b.n	a5ea <SX1276SetRxConfig+0x26e>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    a64a:	4b21      	ldr	r3, [pc, #132]	; (a6d0 <SX1276SetRxConfig+0x354>)
    a64c:	228c      	movs	r2, #140	; 0x8c
    a64e:	4913      	ldr	r1, [pc, #76]	; (a69c <SX1276SetRxConfig+0x320>)
    a650:	588a      	ldr	r2, [r1, r2]
    a652:	429a      	cmp	r2, r3
    a654:	d907      	bls.n	a666 <SX1276SetRxConfig+0x2ea>
                SX1276Write( REG_LR_TEST36, 0x02 );
    a656:	2102      	movs	r1, #2
    a658:	2036      	movs	r0, #54	; 0x36
    a65a:	4d1a      	ldr	r5, [pc, #104]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a65c:	47a8      	blx	r5
                SX1276Write( REG_LR_TEST3A, 0x64 );
    a65e:	2164      	movs	r1, #100	; 0x64
    a660:	203a      	movs	r0, #58	; 0x3a
    a662:	47a8      	blx	r5
    a664:	e7c7      	b.n	a5f6 <SX1276SetRxConfig+0x27a>
                SX1276Write( REG_LR_TEST36, 0x02 );
    a666:	2102      	movs	r1, #2
    a668:	2036      	movs	r0, #54	; 0x36
    a66a:	4d16      	ldr	r5, [pc, #88]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a66c:	47a8      	blx	r5
                SX1276Write( REG_LR_TEST3A, 0x7F );
    a66e:	217f      	movs	r1, #127	; 0x7f
    a670:	203a      	movs	r0, #58	; 0x3a
    a672:	47a8      	blx	r5
    a674:	e7bf      	b.n	a5f6 <SX1276SetRxConfig+0x27a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    a676:	2031      	movs	r0, #49	; 0x31
    a678:	4b14      	ldr	r3, [pc, #80]	; (a6cc <SX1276SetRxConfig+0x350>)
    a67a:	4798      	blx	r3
    a67c:	2307      	movs	r3, #7
    a67e:	0001      	movs	r1, r0
    a680:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    a682:	2305      	movs	r3, #5
    a684:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    a686:	b2c9      	uxtb	r1, r1
    a688:	2031      	movs	r0, #49	; 0x31
    a68a:	4c0e      	ldr	r4, [pc, #56]	; (a6c4 <SX1276SetRxConfig+0x348>)
    a68c:	47a0      	blx	r4
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    a68e:	210c      	movs	r1, #12
    a690:	2037      	movs	r0, #55	; 0x37
    a692:	47a0      	blx	r4
    a694:	e69f      	b.n	a3d6 <SX1276SetRxConfig+0x5a>
    a696:	46c0      	nop			; (mov r8, r8)
    a698:	0000a199 	.word	0x0000a199
    a69c:	20001c28 	.word	0x20001c28
    a6a0:	0000e9e9 	.word	0x0000e9e9
    a6a4:	0000d569 	.word	0x0000d569
    a6a8:	3ff00000 	.word	0x3ff00000
    a6ac:	0000ddd1 	.word	0x0000ddd1
    a6b0:	40200000 	.word	0x40200000
    a6b4:	0000e965 	.word	0x0000e965
    a6b8:	408f4000 	.word	0x408f4000
    a6bc:	0000c9c9 	.word	0x0000c9c9
    a6c0:	417e8480 	.word	0x417e8480
    a6c4:	0000991d 	.word	0x0000991d
    a6c8:	0000986d 	.word	0x0000986d
    a6cc:	000099dd 	.word	0x000099dd
    a6d0:	1f4add40 	.word	0x1f4add40

0000a6d4 <SX1276SetTxConfig>:
{
    a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6d6:	46de      	mov	lr, fp
    a6d8:	4657      	mov	r7, sl
    a6da:	464e      	mov	r6, r9
    a6dc:	4645      	mov	r5, r8
    a6de:	b5e0      	push	{r5, r6, r7, lr}
    a6e0:	b085      	sub	sp, #20
    a6e2:	9100      	str	r1, [sp, #0]
    a6e4:	9203      	str	r2, [sp, #12]
    a6e6:	001f      	movs	r7, r3
    a6e8:	ab0e      	add	r3, sp, #56	; 0x38
    a6ea:	cb04      	ldmia	r3!, {r2}
    a6ec:	9201      	str	r2, [sp, #4]
    a6ee:	781a      	ldrb	r2, [r3, #0]
    a6f0:	4693      	mov	fp, r2
    a6f2:	ab10      	add	r3, sp, #64	; 0x40
    a6f4:	881c      	ldrh	r4, [r3, #0]
    a6f6:	ab11      	add	r3, sp, #68	; 0x44
    a6f8:	781d      	ldrb	r5, [r3, #0]
    a6fa:	ab12      	add	r3, sp, #72	; 0x48
    a6fc:	781e      	ldrb	r6, [r3, #0]
    a6fe:	ab13      	add	r3, sp, #76	; 0x4c
    a700:	781a      	ldrb	r2, [r3, #0]
    a702:	4691      	mov	r9, r2
    a704:	ab14      	add	r3, sp, #80	; 0x50
    a706:	781a      	ldrb	r2, [r3, #0]
    a708:	4690      	mov	r8, r2
    a70a:	ab15      	add	r3, sp, #84	; 0x54
    a70c:	781a      	ldrb	r2, [r3, #0]
    a70e:	4692      	mov	sl, r2
    SX1276SetModem( modem );
    a710:	9002      	str	r0, [sp, #8]
    a712:	4b8c      	ldr	r3, [pc, #560]	; (a944 <SX1276SetTxConfig+0x270>)
    a714:	4798      	blx	r3
    SX1276SetRfTxPower( power );
    a716:	9800      	ldr	r0, [sp, #0]
    a718:	4b8b      	ldr	r3, [pc, #556]	; (a948 <SX1276SetTxConfig+0x274>)
    a71a:	4798      	blx	r3
    switch( modem )
    a71c:	9b02      	ldr	r3, [sp, #8]
    a71e:	2b00      	cmp	r3, #0
    a720:	d008      	beq.n	a734 <SX1276SetTxConfig+0x60>
    a722:	2b01      	cmp	r3, #1
    a724:	d069      	beq.n	a7fa <SX1276SetTxConfig+0x126>
}
    a726:	b005      	add	sp, #20
    a728:	bc3c      	pop	{r2, r3, r4, r5}
    a72a:	4690      	mov	r8, r2
    a72c:	4699      	mov	r9, r3
    a72e:	46a2      	mov	sl, r4
    a730:	46ab      	mov	fp, r5
    a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
    a734:	4b85      	ldr	r3, [pc, #532]	; (a94c <SX1276SetTxConfig+0x278>)
    a736:	2290      	movs	r2, #144	; 0x90
    a738:	4669      	mov	r1, sp
    a73a:	7809      	ldrb	r1, [r1, #0]
    a73c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.Fsk.Fdev = fdev;
    a73e:	3204      	adds	r2, #4
    a740:	9903      	ldr	r1, [sp, #12]
    a742:	5099      	str	r1, [r3, r2]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    a744:	3204      	adds	r2, #4
    a746:	509f      	str	r7, [r3, r2]
            SX1276.Settings.Fsk.Datarate = datarate;
    a748:	3208      	adds	r2, #8
    a74a:	9801      	ldr	r0, [sp, #4]
    a74c:	5098      	str	r0, [r3, r2]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    a74e:	3204      	adds	r2, #4
    a750:	529c      	strh	r4, [r3, r2]
            SX1276.Settings.Fsk.FixLen = fixLen;
    a752:	3202      	adds	r2, #2
    a754:	549d      	strb	r5, [r3, r2]
            SX1276.Settings.Fsk.CrcOn = crcOn;
    a756:	3202      	adds	r2, #2
    a758:	549e      	strb	r6, [r3, r2]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    a75a:	3201      	adds	r2, #1
    a75c:	4657      	mov	r7, sl
    a75e:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.Fsk.TxTimeout = timeout;
    a760:	3203      	adds	r2, #3
    a762:	9f16      	ldr	r7, [sp, #88]	; 0x58
    a764:	509f      	str	r7, [r3, r2]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    a766:	4b7a      	ldr	r3, [pc, #488]	; (a950 <SX1276SetTxConfig+0x27c>)
    a768:	469b      	mov	fp, r3
    a76a:	0008      	movs	r0, r1
    a76c:	4798      	blx	r3
    a76e:	4b79      	ldr	r3, [pc, #484]	; (a954 <SX1276SetTxConfig+0x280>)
    a770:	469a      	mov	sl, r3
    a772:	2200      	movs	r2, #0
    a774:	4b78      	ldr	r3, [pc, #480]	; (a958 <SX1276SetTxConfig+0x284>)
    a776:	47d0      	blx	sl
    a778:	4b78      	ldr	r3, [pc, #480]	; (a95c <SX1276SetTxConfig+0x288>)
    a77a:	4699      	mov	r9, r3
    a77c:	4798      	blx	r3
    a77e:	b283      	uxth	r3, r0
    a780:	4698      	mov	r8, r3
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
    a782:	0a19      	lsrs	r1, r3, #8
    a784:	2004      	movs	r0, #4
    a786:	4f76      	ldr	r7, [pc, #472]	; (a960 <SX1276SetTxConfig+0x28c>)
    a788:	47b8      	blx	r7
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
    a78a:	4643      	mov	r3, r8
    a78c:	466a      	mov	r2, sp
    a78e:	7013      	strb	r3, [r2, #0]
    a790:	7811      	ldrb	r1, [r2, #0]
    a792:	2005      	movs	r0, #5
    a794:	47b8      	blx	r7
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    a796:	9801      	ldr	r0, [sp, #4]
    a798:	47d8      	blx	fp
    a79a:	0002      	movs	r2, r0
    a79c:	000b      	movs	r3, r1
    a79e:	2000      	movs	r0, #0
    a7a0:	4970      	ldr	r1, [pc, #448]	; (a964 <SX1276SetTxConfig+0x290>)
    a7a2:	47d0      	blx	sl
    a7a4:	47c8      	blx	r9
    a7a6:	b283      	uxth	r3, r0
    a7a8:	4698      	mov	r8, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    a7aa:	0a19      	lsrs	r1, r3, #8
    a7ac:	2002      	movs	r0, #2
    a7ae:	47b8      	blx	r7
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    a7b0:	4643      	mov	r3, r8
    a7b2:	466a      	mov	r2, sp
    a7b4:	7013      	strb	r3, [r2, #0]
    a7b6:	7811      	ldrb	r1, [r2, #0]
    a7b8:	2003      	movs	r0, #3
    a7ba:	47b8      	blx	r7
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    a7bc:	0a21      	lsrs	r1, r4, #8
    a7be:	2025      	movs	r0, #37	; 0x25
    a7c0:	47b8      	blx	r7
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    a7c2:	b2e1      	uxtb	r1, r4
    a7c4:	2026      	movs	r0, #38	; 0x26
    a7c6:	47b8      	blx	r7
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    a7c8:	2030      	movs	r0, #48	; 0x30
    a7ca:	4b67      	ldr	r3, [pc, #412]	; (a968 <SX1276SetTxConfig+0x294>)
    a7cc:	4798      	blx	r3
                           RF_PACKETCONFIG1_CRC_MASK &
    a7ce:	216f      	movs	r1, #111	; 0x6f
    a7d0:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    a7d2:	2300      	movs	r3, #0
    a7d4:	2d00      	cmp	r5, #0
    a7d6:	d100      	bne.n	a7da <SX1276SetTxConfig+0x106>
    a7d8:	3b80      	subs	r3, #128	; 0x80
                           ( crcOn << 4 ) );
    a7da:	0136      	lsls	r6, r6, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    a7dc:	4331      	orrs	r1, r6
    a7de:	4319      	orrs	r1, r3
            SX1276Write( REG_PACKETCONFIG1,
    a7e0:	b2c9      	uxtb	r1, r1
    a7e2:	2030      	movs	r0, #48	; 0x30
    a7e4:	4c5e      	ldr	r4, [pc, #376]	; (a960 <SX1276SetTxConfig+0x28c>)
    a7e6:	47a0      	blx	r4
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    a7e8:	2031      	movs	r0, #49	; 0x31
    a7ea:	4b5f      	ldr	r3, [pc, #380]	; (a968 <SX1276SetTxConfig+0x294>)
    a7ec:	4798      	blx	r3
    a7ee:	2140      	movs	r1, #64	; 0x40
    a7f0:	4301      	orrs	r1, r0
    a7f2:	b2c9      	uxtb	r1, r1
    a7f4:	2031      	movs	r0, #49	; 0x31
    a7f6:	47a0      	blx	r4
        break;
    a7f8:	e795      	b.n	a726 <SX1276SetTxConfig+0x52>
            SX1276.Settings.LoRa.Power = power;
    a7fa:	23c4      	movs	r3, #196	; 0xc4
    a7fc:	4a53      	ldr	r2, [pc, #332]	; (a94c <SX1276SetTxConfig+0x278>)
    a7fe:	4669      	mov	r1, sp
    a800:	7809      	ldrb	r1, [r1, #0]
    a802:	54d1      	strb	r1, [r2, r3]
            if( bandwidth > 2 )
    a804:	2f02      	cmp	r7, #2
    a806:	d900      	bls.n	a80a <SX1276SetTxConfig+0x136>
    a808:	e7fe      	b.n	a808 <SX1276SetTxConfig+0x134>
            bandwidth += 7;
    a80a:	3707      	adds	r7, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    a80c:	4b4f      	ldr	r3, [pc, #316]	; (a94c <SX1276SetTxConfig+0x278>)
    a80e:	22c8      	movs	r2, #200	; 0xc8
    a810:	509f      	str	r7, [r3, r2]
            SX1276.Settings.LoRa.Datarate = datarate;
    a812:	3204      	adds	r2, #4
    a814:	9901      	ldr	r1, [sp, #4]
    a816:	5099      	str	r1, [r3, r2]
            SX1276.Settings.LoRa.Coderate = coderate;
    a818:	3205      	adds	r2, #5
    a81a:	4658      	mov	r0, fp
    a81c:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    a81e:	3201      	adds	r2, #1
    a820:	529c      	strh	r4, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
    a822:	3202      	adds	r2, #2
    a824:	549d      	strb	r5, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    a826:	3203      	adds	r2, #3
    a828:	4648      	mov	r0, r9
    a82a:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    a82c:	3201      	adds	r2, #1
    a82e:	4640      	mov	r0, r8
    a830:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
    a832:	3a02      	subs	r2, #2
    a834:	549e      	strb	r6, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    a836:	3203      	adds	r2, #3
    a838:	4650      	mov	r0, sl
    a83a:	5498      	strb	r0, [r3, r2]
            SX1276.Settings.LoRa.TxTimeout = timeout;
    a83c:	3203      	adds	r2, #3
    a83e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a840:	5098      	str	r0, [r3, r2]
    a842:	000b      	movs	r3, r1
    a844:	2906      	cmp	r1, #6
    a846:	d200      	bcs.n	a84a <SX1276SetTxConfig+0x176>
    a848:	2306      	movs	r3, #6
    a84a:	4698      	mov	r8, r3
    a84c:	2b0c      	cmp	r3, #12
    a84e:	d901      	bls.n	a854 <SX1276SetTxConfig+0x180>
    a850:	230c      	movs	r3, #12
    a852:	4698      	mov	r8, r3
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    a854:	2f07      	cmp	r7, #7
    a856:	d108      	bne.n	a86a <SX1276SetTxConfig+0x196>
    a858:	4643      	mov	r3, r8
    a85a:	3b0b      	subs	r3, #11
    a85c:	2b01      	cmp	r3, #1
    a85e:	d806      	bhi.n	a86e <SX1276SetTxConfig+0x19a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
    a860:	2101      	movs	r1, #1
    a862:	23d0      	movs	r3, #208	; 0xd0
    a864:	4a39      	ldr	r2, [pc, #228]	; (a94c <SX1276SetTxConfig+0x278>)
    a866:	54d1      	strb	r1, [r2, r3]
    a868:	e005      	b.n	a876 <SX1276SetTxConfig+0x1a2>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    a86a:	2f08      	cmp	r7, #8
    a86c:	d044      	beq.n	a8f8 <SX1276SetTxConfig+0x224>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    a86e:	2100      	movs	r1, #0
    a870:	23d0      	movs	r3, #208	; 0xd0
    a872:	4a36      	ldr	r2, [pc, #216]	; (a94c <SX1276SetTxConfig+0x278>)
    a874:	54d1      	strb	r1, [r2, r3]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    a876:	464b      	mov	r3, r9
    a878:	2b00      	cmp	r3, #0
    a87a:	d141      	bne.n	a900 <SX1276SetTxConfig+0x22c>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    a87c:	201d      	movs	r0, #29
    a87e:	4b3a      	ldr	r3, [pc, #232]	; (a968 <SX1276SetTxConfig+0x294>)
    a880:	4699      	mov	r9, r3
    a882:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    a884:	465b      	mov	r3, fp
    a886:	0059      	lsls	r1, r3, #1
    a888:	4329      	orrs	r1, r5
    a88a:	013f      	lsls	r7, r7, #4
    a88c:	4339      	orrs	r1, r7
            SX1276Write( REG_LR_MODEMCONFIG1,
    a88e:	b2c9      	uxtb	r1, r1
    a890:	201d      	movs	r0, #29
    a892:	4d33      	ldr	r5, [pc, #204]	; (a960 <SX1276SetTxConfig+0x28c>)
    a894:	47a8      	blx	r5
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    a896:	201e      	movs	r0, #30
    a898:	47c8      	blx	r9
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    a89a:	4643      	mov	r3, r8
    a89c:	0119      	lsls	r1, r3, #4
    a89e:	00b6      	lsls	r6, r6, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    a8a0:	4331      	orrs	r1, r6
                           RFLR_MODEMCONFIG2_SF_MASK &
    a8a2:	230b      	movs	r3, #11
    a8a4:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
    a8a6:	4301      	orrs	r1, r0
    a8a8:	b2c9      	uxtb	r1, r1
    a8aa:	201e      	movs	r0, #30
    a8ac:	47a8      	blx	r5
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    a8ae:	2026      	movs	r0, #38	; 0x26
    a8b0:	47c8      	blx	r9
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    a8b2:	23d0      	movs	r3, #208	; 0xd0
    a8b4:	4a25      	ldr	r2, [pc, #148]	; (a94c <SX1276SetTxConfig+0x278>)
    a8b6:	5cd1      	ldrb	r1, [r2, r3]
    a8b8:	00c9      	lsls	r1, r1, #3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    a8ba:	3bc8      	subs	r3, #200	; 0xc8
    a8bc:	4398      	bics	r0, r3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    a8be:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
    a8c0:	b2c9      	uxtb	r1, r1
    a8c2:	2026      	movs	r0, #38	; 0x26
    a8c4:	47a8      	blx	r5
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    a8c6:	0a21      	lsrs	r1, r4, #8
    a8c8:	2020      	movs	r0, #32
    a8ca:	47a8      	blx	r5
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    a8cc:	b2e1      	uxtb	r1, r4
    a8ce:	2021      	movs	r0, #33	; 0x21
    a8d0:	47a8      	blx	r5
            if( datarate == 6 )
    a8d2:	4643      	mov	r3, r8
    a8d4:	2b06      	cmp	r3, #6
    a8d6:	d024      	beq.n	a922 <SX1276SetTxConfig+0x24e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    a8d8:	2031      	movs	r0, #49	; 0x31
    a8da:	4b23      	ldr	r3, [pc, #140]	; (a968 <SX1276SetTxConfig+0x294>)
    a8dc:	4798      	blx	r3
    a8de:	2307      	movs	r3, #7
    a8e0:	0001      	movs	r1, r0
    a8e2:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    a8e4:	2303      	movs	r3, #3
    a8e6:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    a8e8:	b2c9      	uxtb	r1, r1
    a8ea:	2031      	movs	r0, #49	; 0x31
    a8ec:	4c1c      	ldr	r4, [pc, #112]	; (a960 <SX1276SetTxConfig+0x28c>)
    a8ee:	47a0      	blx	r4
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    a8f0:	210a      	movs	r1, #10
    a8f2:	2037      	movs	r0, #55	; 0x37
    a8f4:	47a0      	blx	r4
}
    a8f6:	e716      	b.n	a726 <SX1276SetTxConfig+0x52>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    a8f8:	4643      	mov	r3, r8
    a8fa:	2b0c      	cmp	r3, #12
    a8fc:	d1b7      	bne.n	a86e <SX1276SetTxConfig+0x19a>
    a8fe:	e7af      	b.n	a860 <SX1276SetTxConfig+0x18c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    a900:	2044      	movs	r0, #68	; 0x44
    a902:	4b19      	ldr	r3, [pc, #100]	; (a968 <SX1276SetTxConfig+0x294>)
    a904:	4798      	blx	r3
    a906:	2180      	movs	r1, #128	; 0x80
    a908:	4249      	negs	r1, r1
    a90a:	4301      	orrs	r1, r0
    a90c:	b2c9      	uxtb	r1, r1
    a90e:	2044      	movs	r0, #68	; 0x44
    a910:	4b13      	ldr	r3, [pc, #76]	; (a960 <SX1276SetTxConfig+0x28c>)
    a912:	4699      	mov	r9, r3
    a914:	4798      	blx	r3
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    a916:	23d8      	movs	r3, #216	; 0xd8
    a918:	4a0c      	ldr	r2, [pc, #48]	; (a94c <SX1276SetTxConfig+0x278>)
    a91a:	5cd1      	ldrb	r1, [r2, r3]
    a91c:	2024      	movs	r0, #36	; 0x24
    a91e:	47c8      	blx	r9
    a920:	e7ac      	b.n	a87c <SX1276SetTxConfig+0x1a8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    a922:	2031      	movs	r0, #49	; 0x31
    a924:	4b10      	ldr	r3, [pc, #64]	; (a968 <SX1276SetTxConfig+0x294>)
    a926:	4798      	blx	r3
    a928:	2307      	movs	r3, #7
    a92a:	0001      	movs	r1, r0
    a92c:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    a92e:	2305      	movs	r3, #5
    a930:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    a932:	b2c9      	uxtb	r1, r1
    a934:	2031      	movs	r0, #49	; 0x31
    a936:	4c0a      	ldr	r4, [pc, #40]	; (a960 <SX1276SetTxConfig+0x28c>)
    a938:	47a0      	blx	r4
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    a93a:	210c      	movs	r1, #12
    a93c:	2037      	movs	r0, #55	; 0x37
    a93e:	47a0      	blx	r4
    a940:	e6f1      	b.n	a726 <SX1276SetTxConfig+0x52>
    a942:	46c0      	nop			; (mov r8, r8)
    a944:	0000a199 	.word	0x0000a199
    a948:	00002549 	.word	0x00002549
    a94c:	20001c28 	.word	0x20001c28
    a950:	0000e9e9 	.word	0x0000e9e9
    a954:	0000d569 	.word	0x0000d569
    a958:	404e8480 	.word	0x404e8480
    a95c:	0000c9c9 	.word	0x0000c9c9
    a960:	0000991d 	.word	0x0000991d
    a964:	417e8480 	.word	0x417e8480
    a968:	000099dd 	.word	0x000099dd

0000a96c <SX1276SetTxContinuousWave>:
{
    a96c:	b530      	push	{r4, r5, lr}
    a96e:	b08b      	sub	sp, #44	; 0x2c
    a970:	000d      	movs	r5, r1
    uint32_t timeout = ( uint32_t )( time * 1000 );
    a972:	24fa      	movs	r4, #250	; 0xfa
    a974:	00a4      	lsls	r4, r4, #2
    a976:	4354      	muls	r4, r2
    SX1276SetChannel( freq );
    a978:	4b19      	ldr	r3, [pc, #100]	; (a9e0 <SX1276SetTxContinuousWave+0x74>)
    a97a:	4798      	blx	r3
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    a97c:	9408      	str	r4, [sp, #32]
    a97e:	2300      	movs	r3, #0
    a980:	9307      	str	r3, [sp, #28]
    a982:	9306      	str	r3, [sp, #24]
    a984:	9305      	str	r3, [sp, #20]
    a986:	9304      	str	r3, [sp, #16]
    a988:	9303      	str	r3, [sp, #12]
    a98a:	2205      	movs	r2, #5
    a98c:	9202      	str	r2, [sp, #8]
    a98e:	9301      	str	r3, [sp, #4]
    a990:	2396      	movs	r3, #150	; 0x96
    a992:	015b      	lsls	r3, r3, #5
    a994:	9300      	str	r3, [sp, #0]
    a996:	2300      	movs	r3, #0
    a998:	2200      	movs	r2, #0
    a99a:	0029      	movs	r1, r5
    a99c:	2000      	movs	r0, #0
    a99e:	4d11      	ldr	r5, [pc, #68]	; (a9e4 <SX1276SetTxContinuousWave+0x78>)
    a9a0:	47a8      	blx	r5
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    a9a2:	2031      	movs	r0, #49	; 0x31
    a9a4:	4b10      	ldr	r3, [pc, #64]	; (a9e8 <SX1276SetTxContinuousWave+0x7c>)
    a9a6:	4798      	blx	r3
    a9a8:	21bf      	movs	r1, #191	; 0xbf
    a9aa:	4001      	ands	r1, r0
    a9ac:	2031      	movs	r0, #49	; 0x31
    a9ae:	4d0f      	ldr	r5, [pc, #60]	; (a9ec <SX1276SetTxContinuousWave+0x80>)
    a9b0:	47a8      	blx	r5
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    a9b2:	21f0      	movs	r1, #240	; 0xf0
    a9b4:	2040      	movs	r0, #64	; 0x40
    a9b6:	47a8      	blx	r5
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    a9b8:	21a0      	movs	r1, #160	; 0xa0
    a9ba:	2041      	movs	r0, #65	; 0x41
    a9bc:	47a8      	blx	r5
    TimerSetValue( &TxTimeoutTimer, timeout );
    a9be:	4d0c      	ldr	r5, [pc, #48]	; (a9f0 <SX1276SetTxContinuousWave+0x84>)
    a9c0:	0021      	movs	r1, r4
    a9c2:	0028      	movs	r0, r5
    a9c4:	4b0b      	ldr	r3, [pc, #44]	; (a9f4 <SX1276SetTxContinuousWave+0x88>)
    a9c6:	4798      	blx	r3
    SX1276.Settings.State = RF_TX_RUNNING;
    a9c8:	2102      	movs	r1, #2
    a9ca:	2388      	movs	r3, #136	; 0x88
    a9cc:	4a0a      	ldr	r2, [pc, #40]	; (a9f8 <SX1276SetTxContinuousWave+0x8c>)
    a9ce:	54d1      	strb	r1, [r2, r3]
    TimerStart( &TxTimeoutTimer );
    a9d0:	0028      	movs	r0, r5
    a9d2:	4b0a      	ldr	r3, [pc, #40]	; (a9fc <SX1276SetTxContinuousWave+0x90>)
    a9d4:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    a9d6:	2003      	movs	r0, #3
    a9d8:	4b09      	ldr	r3, [pc, #36]	; (aa00 <SX1276SetTxContinuousWave+0x94>)
    a9da:	4798      	blx	r3
}
    a9dc:	b00b      	add	sp, #44	; 0x2c
    a9de:	bd30      	pop	{r4, r5, pc}
    a9e0:	00009939 	.word	0x00009939
    a9e4:	0000a6d5 	.word	0x0000a6d5
    a9e8:	000099dd 	.word	0x000099dd
    a9ec:	0000991d 	.word	0x0000991d
    a9f0:	20001c00 	.word	0x20001c00
    a9f4:	0000c23d 	.word	0x0000c23d
    a9f8:	20001c28 	.word	0x20001c28
    a9fc:	0000c04d 	.word	0x0000c04d
    aa00:	00009d41 	.word	0x00009d41

0000aa04 <SX1276OnDio2Irq>:
{
    aa04:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    aa06:	2388      	movs	r3, #136	; 0x88
    aa08:	4a39      	ldr	r2, [pc, #228]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa0a:	5cd3      	ldrb	r3, [r2, r3]
    aa0c:	2b01      	cmp	r3, #1
    aa0e:	d002      	beq.n	aa16 <SX1276OnDio2Irq+0x12>
    aa10:	2b02      	cmp	r3, #2
    aa12:	d051      	beq.n	aab8 <SX1276OnDio2Irq+0xb4>
}
    aa14:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    aa16:	2389      	movs	r3, #137	; 0x89
    aa18:	4a35      	ldr	r2, [pc, #212]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa1a:	5cd3      	ldrb	r3, [r2, r3]
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d018      	beq.n	aa52 <SX1276OnDio2Irq+0x4e>
    aa20:	2b01      	cmp	r3, #1
    aa22:	d1f7      	bne.n	aa14 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    aa24:	23d7      	movs	r3, #215	; 0xd7
    aa26:	4a32      	ldr	r2, [pc, #200]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa28:	5cd3      	ldrb	r3, [r2, r3]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d0f2      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    aa2e:	2102      	movs	r1, #2
    aa30:	2012      	movs	r0, #18
    aa32:	4b30      	ldr	r3, [pc, #192]	; (aaf4 <SX1276OnDio2Irq+0xf0>)
    aa34:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    aa36:	4b30      	ldr	r3, [pc, #192]	; (aaf8 <SX1276OnDio2Irq+0xf4>)
    aa38:	681b      	ldr	r3, [r3, #0]
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	d0ea      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
    aa3e:	695c      	ldr	r4, [r3, #20]
    aa40:	2c00      	cmp	r4, #0
    aa42:	d0e7      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    aa44:	201c      	movs	r0, #28
    aa46:	4b2d      	ldr	r3, [pc, #180]	; (aafc <SX1276OnDio2Irq+0xf8>)
    aa48:	4798      	blx	r3
    aa4a:	233f      	movs	r3, #63	; 0x3f
    aa4c:	4018      	ands	r0, r3
    aa4e:	47a0      	blx	r4
    aa50:	e7e0      	b.n	aa14 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
    aa52:	4b27      	ldr	r3, [pc, #156]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    aa56:	2b00      	cmp	r3, #0
    aa58:	d029      	beq.n	aaae <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
    aa5a:	23b4      	movs	r3, #180	; 0xb4
    aa5c:	4a24      	ldr	r2, [pc, #144]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa5e:	5ad3      	ldrh	r3, [r2, r3]
    aa60:	2b01      	cmp	r3, #1
    aa62:	d1d7      	bne.n	aa14 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
    aa64:	4826      	ldr	r0, [pc, #152]	; (ab00 <SX1276OnDio2Irq+0xfc>)
    aa66:	4b27      	ldr	r3, [pc, #156]	; (ab04 <SX1276OnDio2Irq+0x100>)
    aa68:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    aa6a:	4d21      	ldr	r5, [pc, #132]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aa6c:	2201      	movs	r2, #1
    aa6e:	23b5      	movs	r3, #181	; 0xb5
    aa70:	54ea      	strb	r2, [r5, r3]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    aa72:	2011      	movs	r0, #17
    aa74:	4e21      	ldr	r6, [pc, #132]	; (aafc <SX1276OnDio2Irq+0xf8>)
    aa76:	47b0      	blx	r6
    aa78:	0840      	lsrs	r0, r0, #1
    aa7a:	4240      	negs	r0, r0
    aa7c:	22b6      	movs	r2, #182	; 0xb6
    aa7e:	54a8      	strb	r0, [r5, r2]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    aa80:	201b      	movs	r0, #27
    aa82:	47b0      	blx	r6
    aa84:	0004      	movs	r4, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    aa86:	201c      	movs	r0, #28
    aa88:	47b0      	blx	r6
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    aa8a:	0224      	lsls	r4, r4, #8
    aa8c:	4320      	orrs	r0, r4
    aa8e:	4b1e      	ldr	r3, [pc, #120]	; (ab08 <SX1276OnDio2Irq+0x104>)
    aa90:	4798      	blx	r3
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    aa92:	2200      	movs	r2, #0
    aa94:	4b1d      	ldr	r3, [pc, #116]	; (ab0c <SX1276OnDio2Irq+0x108>)
    aa96:	4c1e      	ldr	r4, [pc, #120]	; (ab10 <SX1276OnDio2Irq+0x10c>)
    aa98:	47a0      	blx	r4
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    aa9a:	4b1e      	ldr	r3, [pc, #120]	; (ab14 <SX1276OnDio2Irq+0x110>)
    aa9c:	4798      	blx	r3
    aa9e:	23b8      	movs	r3, #184	; 0xb8
    aaa0:	50e8      	str	r0, [r5, r3]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    aaa2:	200c      	movs	r0, #12
    aaa4:	47b0      	blx	r6
    aaa6:	0940      	lsrs	r0, r0, #5
    aaa8:	23bc      	movs	r3, #188	; 0xbc
    aaaa:	54e8      	strb	r0, [r5, r3]
    aaac:	e7b2      	b.n	aa14 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    aaae:	2101      	movs	r1, #1
    aab0:	33b4      	adds	r3, #180	; 0xb4
    aab2:	4a0f      	ldr	r2, [pc, #60]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aab4:	54d1      	strb	r1, [r2, r3]
    aab6:	e7d0      	b.n	aa5a <SX1276OnDio2Irq+0x56>
            switch( SX1276.Settings.Modem )
    aab8:	2389      	movs	r3, #137	; 0x89
    aaba:	4a0d      	ldr	r2, [pc, #52]	; (aaf0 <SX1276OnDio2Irq+0xec>)
    aabc:	5cd3      	ldrb	r3, [r2, r3]
    aabe:	2b01      	cmp	r3, #1
    aac0:	d1a8      	bne.n	aa14 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    aac2:	33d6      	adds	r3, #214	; 0xd6
    aac4:	5cd3      	ldrb	r3, [r2, r3]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d0a4      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    aaca:	2102      	movs	r1, #2
    aacc:	2012      	movs	r0, #18
    aace:	4b09      	ldr	r3, [pc, #36]	; (aaf4 <SX1276OnDio2Irq+0xf0>)
    aad0:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    aad2:	4b09      	ldr	r3, [pc, #36]	; (aaf8 <SX1276OnDio2Irq+0xf4>)
    aad4:	681b      	ldr	r3, [r3, #0]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d09c      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
    aada:	695c      	ldr	r4, [r3, #20]
    aadc:	2c00      	cmp	r4, #0
    aade:	d099      	beq.n	aa14 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    aae0:	201c      	movs	r0, #28
    aae2:	4b06      	ldr	r3, [pc, #24]	; (aafc <SX1276OnDio2Irq+0xf8>)
    aae4:	4798      	blx	r3
    aae6:	233f      	movs	r3, #63	; 0x3f
    aae8:	4018      	ands	r0, r3
    aaea:	47a0      	blx	r4
}
    aaec:	e792      	b.n	aa14 <SX1276OnDio2Irq+0x10>
    aaee:	46c0      	nop			; (mov r8, r8)
    aaf0:	20001c28 	.word	0x20001c28
    aaf4:	0000991d 	.word	0x0000991d
    aaf8:	20001770 	.word	0x20001770
    aafc:	000099dd 	.word	0x000099dd
    ab00:	20001c14 	.word	0x20001c14
    ab04:	0000c1a5 	.word	0x0000c1a5
    ab08:	0000e965 	.word	0x0000e965
    ab0c:	404e8480 	.word	0x404e8480
    ab10:	0000ddd1 	.word	0x0000ddd1
    ab14:	0000e8fd 	.word	0x0000e8fd

0000ab18 <SX1276OnDio3Irq>:
{
    ab18:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
    ab1a:	2389      	movs	r3, #137	; 0x89
    ab1c:	4a12      	ldr	r2, [pc, #72]	; (ab68 <SX1276OnDio3Irq+0x50>)
    ab1e:	5cd3      	ldrb	r3, [r2, r3]
    ab20:	2b01      	cmp	r3, #1
    ab22:	d11f      	bne.n	ab64 <SX1276OnDio3Irq+0x4c>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    ab24:	2012      	movs	r0, #18
    ab26:	4b11      	ldr	r3, [pc, #68]	; (ab6c <SX1276OnDio3Irq+0x54>)
    ab28:	4798      	blx	r3
    ab2a:	07c3      	lsls	r3, r0, #31
    ab2c:	d50d      	bpl.n	ab4a <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    ab2e:	2105      	movs	r1, #5
    ab30:	2012      	movs	r0, #18
    ab32:	4b0f      	ldr	r3, [pc, #60]	; (ab70 <SX1276OnDio3Irq+0x58>)
    ab34:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    ab36:	4b0f      	ldr	r3, [pc, #60]	; (ab74 <SX1276OnDio3Irq+0x5c>)
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d012      	beq.n	ab64 <SX1276OnDio3Irq+0x4c>
    ab3e:	699b      	ldr	r3, [r3, #24]
    ab40:	2b00      	cmp	r3, #0
    ab42:	d00f      	beq.n	ab64 <SX1276OnDio3Irq+0x4c>
                RadioEvents->CadDone( true );
    ab44:	2001      	movs	r0, #1
    ab46:	4798      	blx	r3
    ab48:	e00c      	b.n	ab64 <SX1276OnDio3Irq+0x4c>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    ab4a:	2104      	movs	r1, #4
    ab4c:	2012      	movs	r0, #18
    ab4e:	4b08      	ldr	r3, [pc, #32]	; (ab70 <SX1276OnDio3Irq+0x58>)
    ab50:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    ab52:	4b08      	ldr	r3, [pc, #32]	; (ab74 <SX1276OnDio3Irq+0x5c>)
    ab54:	681b      	ldr	r3, [r3, #0]
    ab56:	2b00      	cmp	r3, #0
    ab58:	d004      	beq.n	ab64 <SX1276OnDio3Irq+0x4c>
    ab5a:	699b      	ldr	r3, [r3, #24]
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d001      	beq.n	ab64 <SX1276OnDio3Irq+0x4c>
                RadioEvents->CadDone( false );
    ab60:	2000      	movs	r0, #0
    ab62:	4798      	blx	r3
}
    ab64:	bd10      	pop	{r4, pc}
    ab66:	46c0      	nop			; (mov r8, r8)
    ab68:	20001c28 	.word	0x20001c28
    ab6c:	000099dd 	.word	0x000099dd
    ab70:	0000991d 	.word	0x0000991d
    ab74:	20001770 	.word	0x20001770

0000ab78 <SX1276WriteFifo>:
{
    ab78:	b510      	push	{r4, lr}
    ab7a:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
    ab7c:	0001      	movs	r1, r0
    ab7e:	2000      	movs	r0, #0
    ab80:	4b01      	ldr	r3, [pc, #4]	; (ab88 <SX1276WriteFifo+0x10>)
    ab82:	4798      	blx	r3
}
    ab84:	bd10      	pop	{r4, pc}
    ab86:	46c0      	nop			; (mov r8, r8)
    ab88:	000098c5 	.word	0x000098c5

0000ab8c <SX1276Send>:
{
    ab8c:	b570      	push	{r4, r5, r6, lr}
    ab8e:	b082      	sub	sp, #8
    ab90:	0004      	movs	r4, r0
    ab92:	466b      	mov	r3, sp
    ab94:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
    ab96:	2389      	movs	r3, #137	; 0x89
    ab98:	4a41      	ldr	r2, [pc, #260]	; (aca0 <SX1276Send+0x114>)
    ab9a:	5cd3      	ldrb	r3, [r2, r3]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d003      	beq.n	aba8 <SX1276Send+0x1c>
    aba0:	2b01      	cmp	r3, #1
    aba2:	d039      	beq.n	ac18 <SX1276Send+0x8c>
    uint32_t txTimeout = 0;
    aba4:	2000      	movs	r0, #0
    aba6:	e025      	b.n	abf4 <SX1276Send+0x68>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    aba8:	4b3d      	ldr	r3, [pc, #244]	; (aca0 <SX1276Send+0x114>)
    abaa:	2100      	movs	r1, #0
    abac:	22c0      	movs	r2, #192	; 0xc0
    abae:	5299      	strh	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.Size = size;
    abb0:	466a      	mov	r2, sp
    abb2:	79d1      	ldrb	r1, [r2, #7]
    abb4:	22be      	movs	r2, #190	; 0xbe
    abb6:	5299      	strh	r1, [r3, r2]
            if( SX1276.Settings.Fsk.FixLen == false )
    abb8:	3a18      	subs	r2, #24
    abba:	5c9b      	ldrb	r3, [r3, r2]
    abbc:	2b00      	cmp	r3, #0
    abbe:	d11d      	bne.n	abfc <SX1276Send+0x70>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
    abc0:	2101      	movs	r1, #1
    abc2:	466b      	mov	r3, sp
    abc4:	1dd8      	adds	r0, r3, #7
    abc6:	4b37      	ldr	r3, [pc, #220]	; (aca4 <SX1276Send+0x118>)
    abc8:	4798      	blx	r3
            if( ( size > 0 ) && ( size <= 64 ) )
    abca:	466b      	mov	r3, sp
    abcc:	79da      	ldrb	r2, [r3, #7]
    abce:	1e53      	subs	r3, r2, #1
    abd0:	2b3f      	cmp	r3, #63	; 0x3f
    abd2:	d817      	bhi.n	ac04 <SX1276Send+0x78>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    abd4:	23c3      	movs	r3, #195	; 0xc3
    abd6:	4932      	ldr	r1, [pc, #200]	; (aca0 <SX1276Send+0x114>)
    abd8:	54ca      	strb	r2, [r1, r3]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
    abda:	4d31      	ldr	r5, [pc, #196]	; (aca0 <SX1276Send+0x114>)
    abdc:	26c3      	movs	r6, #195	; 0xc3
    abde:	5da9      	ldrb	r1, [r5, r6]
    abe0:	0020      	movs	r0, r4
    abe2:	4b30      	ldr	r3, [pc, #192]	; (aca4 <SX1276Send+0x118>)
    abe4:	4798      	blx	r3
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    abe6:	22c0      	movs	r2, #192	; 0xc0
    abe8:	5dab      	ldrb	r3, [r5, r6]
    abea:	5aa9      	ldrh	r1, [r5, r2]
    abec:	185b      	adds	r3, r3, r1
    abee:	52ab      	strh	r3, [r5, r2]
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    abf0:	23ac      	movs	r3, #172	; 0xac
    abf2:	58e8      	ldr	r0, [r5, r3]
    SX1276SetTx( txTimeout );
    abf4:	4b2c      	ldr	r3, [pc, #176]	; (aca8 <SX1276Send+0x11c>)
    abf6:	4798      	blx	r3
}
    abf8:	b002      	add	sp, #8
    abfa:	bd70      	pop	{r4, r5, r6, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
    abfc:	2032      	movs	r0, #50	; 0x32
    abfe:	4b2b      	ldr	r3, [pc, #172]	; (acac <SX1276Send+0x120>)
    ac00:	4798      	blx	r3
    ac02:	e7e2      	b.n	abca <SX1276Send+0x3e>
                memcpy1( RxTxBuffer, buffer, size );
    ac04:	b292      	uxth	r2, r2
    ac06:	0021      	movs	r1, r4
    ac08:	4829      	ldr	r0, [pc, #164]	; (acb0 <SX1276Send+0x124>)
    ac0a:	4b2a      	ldr	r3, [pc, #168]	; (acb4 <SX1276Send+0x128>)
    ac0c:	4798      	blx	r3
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
    ac0e:	2120      	movs	r1, #32
    ac10:	23c3      	movs	r3, #195	; 0xc3
    ac12:	4a23      	ldr	r2, [pc, #140]	; (aca0 <SX1276Send+0x114>)
    ac14:	54d1      	strb	r1, [r2, r3]
    ac16:	e7e0      	b.n	abda <SX1276Send+0x4e>
            if( SX1276.Settings.LoRa.IqInverted == true )
    ac18:	23d9      	movs	r3, #217	; 0xd9
    ac1a:	4a21      	ldr	r2, [pc, #132]	; (aca0 <SX1276Send+0x114>)
    ac1c:	5cd3      	ldrb	r3, [r2, r3]
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d027      	beq.n	ac72 <SX1276Send+0xe6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    ac22:	2033      	movs	r0, #51	; 0x33
    ac24:	4b24      	ldr	r3, [pc, #144]	; (acb8 <SX1276Send+0x12c>)
    ac26:	4798      	blx	r3
    ac28:	21be      	movs	r1, #190	; 0xbe
    ac2a:	4001      	ands	r1, r0
    ac2c:	2033      	movs	r0, #51	; 0x33
    ac2e:	4d1f      	ldr	r5, [pc, #124]	; (acac <SX1276Send+0x120>)
    ac30:	47a8      	blx	r5
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    ac32:	2119      	movs	r1, #25
    ac34:	203b      	movs	r0, #59	; 0x3b
    ac36:	47a8      	blx	r5
            SX1276.Settings.LoRaPacketHandler.Size = size;
    ac38:	466b      	mov	r3, sp
    ac3a:	79d9      	ldrb	r1, [r3, #7]
    ac3c:	23e8      	movs	r3, #232	; 0xe8
    ac3e:	4a18      	ldr	r2, [pc, #96]	; (aca0 <SX1276Send+0x114>)
    ac40:	54d1      	strb	r1, [r2, r3]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    ac42:	2022      	movs	r0, #34	; 0x22
    ac44:	4d19      	ldr	r5, [pc, #100]	; (acac <SX1276Send+0x120>)
    ac46:	47a8      	blx	r5
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    ac48:	2100      	movs	r1, #0
    ac4a:	200e      	movs	r0, #14
    ac4c:	47a8      	blx	r5
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    ac4e:	2100      	movs	r1, #0
    ac50:	200d      	movs	r0, #13
    ac52:	47a8      	blx	r5
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    ac54:	2001      	movs	r0, #1
    ac56:	4b18      	ldr	r3, [pc, #96]	; (acb8 <SX1276Send+0x12c>)
    ac58:	4798      	blx	r3
    ac5a:	23f8      	movs	r3, #248	; 0xf8
    ac5c:	4398      	bics	r0, r3
    ac5e:	d018      	beq.n	ac92 <SX1276Send+0x106>
            SX1276WriteFifo( buffer, size );
    ac60:	466b      	mov	r3, sp
    ac62:	79d9      	ldrb	r1, [r3, #7]
    ac64:	0020      	movs	r0, r4
    ac66:	4b0f      	ldr	r3, [pc, #60]	; (aca4 <SX1276Send+0x118>)
    ac68:	4798      	blx	r3
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    ac6a:	23dc      	movs	r3, #220	; 0xdc
    ac6c:	4a0c      	ldr	r2, [pc, #48]	; (aca0 <SX1276Send+0x114>)
    ac6e:	58d0      	ldr	r0, [r2, r3]
        break;
    ac70:	e7c0      	b.n	abf4 <SX1276Send+0x68>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    ac72:	2033      	movs	r0, #51	; 0x33
    ac74:	4b10      	ldr	r3, [pc, #64]	; (acb8 <SX1276Send+0x12c>)
    ac76:	4798      	blx	r3
    ac78:	2341      	movs	r3, #65	; 0x41
    ac7a:	0001      	movs	r1, r0
    ac7c:	4399      	bics	r1, r3
    ac7e:	2001      	movs	r0, #1
    ac80:	4301      	orrs	r1, r0
    ac82:	b2c9      	uxtb	r1, r1
    ac84:	2033      	movs	r0, #51	; 0x33
    ac86:	4d09      	ldr	r5, [pc, #36]	; (acac <SX1276Send+0x120>)
    ac88:	47a8      	blx	r5
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    ac8a:	211d      	movs	r1, #29
    ac8c:	203b      	movs	r0, #59	; 0x3b
    ac8e:	47a8      	blx	r5
    ac90:	e7d2      	b.n	ac38 <SX1276Send+0xac>
                SX1276SetStby( );
    ac92:	4b0a      	ldr	r3, [pc, #40]	; (acbc <SX1276Send+0x130>)
    ac94:	4798      	blx	r3
                DelayMs( 1 );
    ac96:	2001      	movs	r0, #1
    ac98:	4b09      	ldr	r3, [pc, #36]	; (acc0 <SX1276Send+0x134>)
    ac9a:	4798      	blx	r3
    ac9c:	e7e0      	b.n	ac60 <SX1276Send+0xd4>
    ac9e:	46c0      	nop			; (mov r8, r8)
    aca0:	20001c28 	.word	0x20001c28
    aca4:	0000ab79 	.word	0x0000ab79
    aca8:	0000a09d 	.word	0x0000a09d
    acac:	0000991d 	.word	0x0000991d
    acb0:	20001670 	.word	0x20001670
    acb4:	00001e91 	.word	0x00001e91
    acb8:	000099dd 	.word	0x000099dd
    acbc:	00009db5 	.word	0x00009db5
    acc0:	0000be69 	.word	0x0000be69

0000acc4 <SX1276ReadFifo>:
{
    acc4:	b510      	push	{r4, lr}
    acc6:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    acc8:	0001      	movs	r1, r0
    acca:	2000      	movs	r0, #0
    accc:	4b01      	ldr	r3, [pc, #4]	; (acd4 <SX1276ReadFifo+0x10>)
    acce:	4798      	blx	r3
}
    acd0:	bd10      	pop	{r4, pc}
    acd2:	46c0      	nop			; (mov r8, r8)
    acd4:	00009985 	.word	0x00009985

0000acd8 <SX1276OnDio0Irq>:
{
    acd8:	b570      	push	{r4, r5, r6, lr}
    acda:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
    acdc:	2200      	movs	r2, #0
    acde:	466b      	mov	r3, sp
    ace0:	71da      	strb	r2, [r3, #7]
    switch( SX1276.Settings.State )
    ace2:	2388      	movs	r3, #136	; 0x88
    ace4:	4ab5      	ldr	r2, [pc, #724]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ace6:	5cd3      	ldrb	r3, [r2, r3]
    ace8:	2b01      	cmp	r3, #1
    acea:	d004      	beq.n	acf6 <SX1276OnDio0Irq+0x1e>
    acec:	2b02      	cmp	r3, #2
    acee:	d100      	bne.n	acf2 <SX1276OnDio0Irq+0x1a>
    acf0:	e148      	b.n	af84 <SX1276OnDio0Irq+0x2ac>
}
    acf2:	b002      	add	sp, #8
    acf4:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    acf6:	2389      	movs	r3, #137	; 0x89
    acf8:	4ab0      	ldr	r2, [pc, #704]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    acfa:	5cd3      	ldrb	r3, [r2, r3]
    acfc:	2b00      	cmp	r3, #0
    acfe:	d027      	beq.n	ad50 <SX1276OnDio0Irq+0x78>
    ad00:	2b01      	cmp	r3, #1
    ad02:	d1f6      	bne.n	acf2 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    ad04:	2140      	movs	r1, #64	; 0x40
    ad06:	2012      	movs	r0, #18
    ad08:	4bad      	ldr	r3, [pc, #692]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    ad0a:	4798      	blx	r3
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    ad0c:	2012      	movs	r0, #18
    ad0e:	4bad      	ldr	r3, [pc, #692]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    ad10:	4798      	blx	r3
    ad12:	466b      	mov	r3, sp
    ad14:	71d8      	strb	r0, [r3, #7]
    ad16:	3307      	adds	r3, #7
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	069b      	lsls	r3, r3, #26
    ad1c:	d400      	bmi.n	ad20 <SX1276OnDio0Irq+0x48>
    ad1e:	e0c2      	b.n	aea6 <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    ad20:	2120      	movs	r1, #32
    ad22:	2012      	movs	r0, #18
    ad24:	4ba6      	ldr	r3, [pc, #664]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    ad26:	4798      	blx	r3
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    ad28:	23da      	movs	r3, #218	; 0xda
    ad2a:	4aa4      	ldr	r2, [pc, #656]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ad2c:	5cd3      	ldrb	r3, [r2, r3]
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d102      	bne.n	ad38 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
    ad32:	2100      	movs	r1, #0
    ad34:	3388      	adds	r3, #136	; 0x88
    ad36:	54d1      	strb	r1, [r2, r3]
                        TimerStop( &RxTimeoutTimer );
    ad38:	48a3      	ldr	r0, [pc, #652]	; (afc8 <SX1276OnDio0Irq+0x2f0>)
    ad3a:	4ba4      	ldr	r3, [pc, #656]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    ad3c:	4798      	blx	r3
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    ad3e:	4ba4      	ldr	r3, [pc, #656]	; (afd0 <SX1276OnDio0Irq+0x2f8>)
    ad40:	681b      	ldr	r3, [r3, #0]
    ad42:	2b00      	cmp	r3, #0
    ad44:	d0d5      	beq.n	acf2 <SX1276OnDio0Irq+0x1a>
    ad46:	691b      	ldr	r3, [r3, #16]
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d0d2      	beq.n	acf2 <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
    ad4c:	4798      	blx	r3
    ad4e:	e7d0      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
    ad50:	23a8      	movs	r3, #168	; 0xa8
    ad52:	4a9a      	ldr	r2, [pc, #616]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ad54:	5cd3      	ldrb	r3, [r2, r3]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d11e      	bne.n	ad98 <SX1276OnDio0Irq+0xc0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    ad5a:	23be      	movs	r3, #190	; 0xbe
    ad5c:	4a97      	ldr	r2, [pc, #604]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ad5e:	5ad1      	ldrh	r1, [r2, r3]
    ad60:	2900      	cmp	r1, #0
    ad62:	d15f      	bne.n	ae24 <SX1276OnDio0Irq+0x14c>
    ad64:	3302      	adds	r3, #2
    ad66:	5ad3      	ldrh	r3, [r2, r3]
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d15b      	bne.n	ae24 <SX1276OnDio0Irq+0x14c>
                    if( SX1276.Settings.Fsk.FixLen == false )
    ad6c:	33a6      	adds	r3, #166	; 0xa6
    ad6e:	5cd3      	ldrb	r3, [r2, r3]
    ad70:	2b00      	cmp	r3, #0
    ad72:	d150      	bne.n	ae16 <SX1276OnDio0Irq+0x13e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
    ad74:	3101      	adds	r1, #1
    ad76:	4897      	ldr	r0, [pc, #604]	; (afd4 <SX1276OnDio0Irq+0x2fc>)
    ad78:	4b97      	ldr	r3, [pc, #604]	; (afd8 <SX1276OnDio0Irq+0x300>)
    ad7a:	4798      	blx	r3
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    ad7c:	4c8f      	ldr	r4, [pc, #572]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ad7e:	25c0      	movs	r5, #192	; 0xc0
    ad80:	5b63      	ldrh	r3, [r4, r5]
    ad82:	26be      	movs	r6, #190	; 0xbe
    ad84:	5ba1      	ldrh	r1, [r4, r6]
    ad86:	1ac9      	subs	r1, r1, r3
    ad88:	b2c9      	uxtb	r1, r1
    ad8a:	4894      	ldr	r0, [pc, #592]	; (afdc <SX1276OnDio0Irq+0x304>)
    ad8c:	18c0      	adds	r0, r0, r3
    ad8e:	4b92      	ldr	r3, [pc, #584]	; (afd8 <SX1276OnDio0Irq+0x300>)
    ad90:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    ad92:	5ba3      	ldrh	r3, [r4, r6]
    ad94:	5363      	strh	r3, [r4, r5]
    ad96:	e051      	b.n	ae3c <SX1276OnDio0Irq+0x164>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    ad98:	203f      	movs	r0, #63	; 0x3f
    ad9a:	4b8a      	ldr	r3, [pc, #552]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    ad9c:	4798      	blx	r3
    ad9e:	466b      	mov	r3, sp
    ada0:	71d8      	strb	r0, [r3, #7]
    ada2:	3307      	adds	r3, #7
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    ada4:	781b      	ldrb	r3, [r3, #0]
    ada6:	079b      	lsls	r3, r3, #30
    ada8:	d4d7      	bmi.n	ad5a <SX1276OnDio0Irq+0x82>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    adaa:	210b      	movs	r1, #11
    adac:	203e      	movs	r0, #62	; 0x3e
    adae:	4c84      	ldr	r4, [pc, #528]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    adb0:	47a0      	blx	r4
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    adb2:	2110      	movs	r1, #16
    adb4:	203f      	movs	r0, #63	; 0x3f
    adb6:	47a0      	blx	r4
                        TimerStop( &RxTimeoutTimer );
    adb8:	4883      	ldr	r0, [pc, #524]	; (afc8 <SX1276OnDio0Irq+0x2f0>)
    adba:	4b84      	ldr	r3, [pc, #528]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    adbc:	4798      	blx	r3
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    adbe:	23aa      	movs	r3, #170	; 0xaa
    adc0:	4a7e      	ldr	r2, [pc, #504]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    adc2:	5cd3      	ldrb	r3, [r2, r3]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d119      	bne.n	adfc <SX1276OnDio0Irq+0x124>
                            TimerStop( &RxTimeoutSyncWord );
    adc8:	4885      	ldr	r0, [pc, #532]	; (afe0 <SX1276OnDio0Irq+0x308>)
    adca:	4b80      	ldr	r3, [pc, #512]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    adcc:	4798      	blx	r3
                            SX1276.Settings.State = RF_IDLE;
    adce:	2100      	movs	r1, #0
    add0:	2388      	movs	r3, #136	; 0x88
    add2:	4a7a      	ldr	r2, [pc, #488]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    add4:	54d1      	strb	r1, [r2, r3]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    add6:	4b7e      	ldr	r3, [pc, #504]	; (afd0 <SX1276OnDio0Irq+0x2f8>)
    add8:	681b      	ldr	r3, [r3, #0]
    adda:	2b00      	cmp	r3, #0
    addc:	d003      	beq.n	ade6 <SX1276OnDio0Irq+0x10e>
    adde:	691b      	ldr	r3, [r3, #16]
    ade0:	2b00      	cmp	r3, #0
    ade2:	d000      	beq.n	ade6 <SX1276OnDio0Irq+0x10e>
                            RadioEvents->RxError( );
    ade4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    ade6:	4b75      	ldr	r3, [pc, #468]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ade8:	2200      	movs	r2, #0
    adea:	21b4      	movs	r1, #180	; 0xb4
    adec:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
    adee:	3101      	adds	r1, #1
    adf0:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    adf2:	310b      	adds	r1, #11
    adf4:	525a      	strh	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.Size = 0;
    adf6:	3902      	subs	r1, #2
    adf8:	525a      	strh	r2, [r3, r1]
                        break;
    adfa:	e77a      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    adfc:	200d      	movs	r0, #13
    adfe:	4b71      	ldr	r3, [pc, #452]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    ae00:	4798      	blx	r3
    ae02:	2140      	movs	r1, #64	; 0x40
    ae04:	4301      	orrs	r1, r0
    ae06:	b2c9      	uxtb	r1, r1
    ae08:	200d      	movs	r0, #13
    ae0a:	4b6d      	ldr	r3, [pc, #436]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    ae0c:	4798      	blx	r3
                            TimerStart( &RxTimeoutSyncWord );
    ae0e:	4874      	ldr	r0, [pc, #464]	; (afe0 <SX1276OnDio0Irq+0x308>)
    ae10:	4b74      	ldr	r3, [pc, #464]	; (afe4 <SX1276OnDio0Irq+0x30c>)
    ae12:	4798      	blx	r3
    ae14:	e7df      	b.n	add6 <SX1276OnDio0Irq+0xfe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    ae16:	2032      	movs	r0, #50	; 0x32
    ae18:	4b6a      	ldr	r3, [pc, #424]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    ae1a:	4798      	blx	r3
    ae1c:	23be      	movs	r3, #190	; 0xbe
    ae1e:	4a67      	ldr	r2, [pc, #412]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ae20:	52d0      	strh	r0, [r2, r3]
    ae22:	e7ab      	b.n	ad7c <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    ae24:	4c65      	ldr	r4, [pc, #404]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ae26:	25c0      	movs	r5, #192	; 0xc0
    ae28:	5b63      	ldrh	r3, [r4, r5]
    ae2a:	1ac9      	subs	r1, r1, r3
    ae2c:	b2c9      	uxtb	r1, r1
    ae2e:	486b      	ldr	r0, [pc, #428]	; (afdc <SX1276OnDio0Irq+0x304>)
    ae30:	18c0      	adds	r0, r0, r3
    ae32:	4b69      	ldr	r3, [pc, #420]	; (afd8 <SX1276OnDio0Irq+0x300>)
    ae34:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    ae36:	23be      	movs	r3, #190	; 0xbe
    ae38:	5ae3      	ldrh	r3, [r4, r3]
    ae3a:	5363      	strh	r3, [r4, r5]
                TimerStop( &RxTimeoutTimer );
    ae3c:	4862      	ldr	r0, [pc, #392]	; (afc8 <SX1276OnDio0Irq+0x2f0>)
    ae3e:	4b63      	ldr	r3, [pc, #396]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    ae40:	4798      	blx	r3
                if( SX1276.Settings.Fsk.RxContinuous == false )
    ae42:	23aa      	movs	r3, #170	; 0xaa
    ae44:	4a5d      	ldr	r2, [pc, #372]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ae46:	5cd3      	ldrb	r3, [r2, r3]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d11f      	bne.n	ae8c <SX1276OnDio0Irq+0x1b4>
                    SX1276.Settings.State = RF_IDLE;
    ae4c:	2100      	movs	r1, #0
    ae4e:	3388      	adds	r3, #136	; 0x88
    ae50:	54d1      	strb	r1, [r2, r3]
                    TimerStop( &RxTimeoutSyncWord );
    ae52:	4863      	ldr	r0, [pc, #396]	; (afe0 <SX1276OnDio0Irq+0x308>)
    ae54:	4b5d      	ldr	r3, [pc, #372]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    ae56:	4798      	blx	r3
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    ae58:	4b5d      	ldr	r3, [pc, #372]	; (afd0 <SX1276OnDio0Irq+0x2f8>)
    ae5a:	681b      	ldr	r3, [r3, #0]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d00a      	beq.n	ae76 <SX1276OnDio0Irq+0x19e>
    ae60:	689c      	ldr	r4, [r3, #8]
    ae62:	2c00      	cmp	r4, #0
    ae64:	d007      	beq.n	ae76 <SX1276OnDio0Irq+0x19e>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    ae66:	4b55      	ldr	r3, [pc, #340]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ae68:	22b6      	movs	r2, #182	; 0xb6
    ae6a:	569a      	ldrsb	r2, [r3, r2]
    ae6c:	21be      	movs	r1, #190	; 0xbe
    ae6e:	5a59      	ldrh	r1, [r3, r1]
    ae70:	2300      	movs	r3, #0
    ae72:	485a      	ldr	r0, [pc, #360]	; (afdc <SX1276OnDio0Irq+0x304>)
    ae74:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    ae76:	4b51      	ldr	r3, [pc, #324]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    ae78:	2200      	movs	r2, #0
    ae7a:	21b4      	movs	r1, #180	; 0xb4
    ae7c:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
    ae7e:	3101      	adds	r1, #1
    ae80:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
    ae82:	310b      	adds	r1, #11
    ae84:	525a      	strh	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.Size = 0;
    ae86:	3902      	subs	r1, #2
    ae88:	525a      	strh	r2, [r3, r1]
                break;
    ae8a:	e732      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    ae8c:	200d      	movs	r0, #13
    ae8e:	4b4d      	ldr	r3, [pc, #308]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    ae90:	4798      	blx	r3
    ae92:	2140      	movs	r1, #64	; 0x40
    ae94:	4301      	orrs	r1, r0
    ae96:	b2c9      	uxtb	r1, r1
    ae98:	200d      	movs	r0, #13
    ae9a:	4b49      	ldr	r3, [pc, #292]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    ae9c:	4798      	blx	r3
                    TimerStart( &RxTimeoutSyncWord );
    ae9e:	4850      	ldr	r0, [pc, #320]	; (afe0 <SX1276OnDio0Irq+0x308>)
    aea0:	4b50      	ldr	r3, [pc, #320]	; (afe4 <SX1276OnDio0Irq+0x30c>)
    aea2:	4798      	blx	r3
    aea4:	e7d8      	b.n	ae58 <SX1276OnDio0Irq+0x180>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
    aea6:	2019      	movs	r0, #25
    aea8:	4b46      	ldr	r3, [pc, #280]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    aeaa:	4798      	blx	r3
    aeac:	b240      	sxtb	r0, r0
    aeae:	23e4      	movs	r3, #228	; 0xe4
    aeb0:	4a42      	ldr	r2, [pc, #264]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    aeb2:	54d0      	strb	r0, [r2, r3]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
    aeb4:	2800      	cmp	r0, #0
    aeb6:	db3d      	blt.n	af34 <SX1276OnDio0Irq+0x25c>
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    aeb8:	201a      	movs	r0, #26
    aeba:	4b42      	ldr	r3, [pc, #264]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    aebc:	4798      	blx	r3
    aebe:	0005      	movs	r5, r0
    aec0:	b203      	sxth	r3, r0
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    aec2:	4a49      	ldr	r2, [pc, #292]	; (afe8 <SX1276OnDio0Irq+0x310>)
    aec4:	218c      	movs	r1, #140	; 0x8c
    aec6:	4c3d      	ldr	r4, [pc, #244]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    aec8:	5861      	ldr	r1, [r4, r1]
    aeca:	4291      	cmp	r1, r2
    aecc:	d952      	bls.n	af74 <SX1276OnDio0Irq+0x29c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    aece:	1118      	asrs	r0, r3, #4
    aed0:	3d9d      	subs	r5, #157	; 0x9d
    aed2:	1940      	adds	r0, r0, r5
    aed4:	23e6      	movs	r3, #230	; 0xe6
    aed6:	52e0      	strh	r0, [r4, r3]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    aed8:	2013      	movs	r0, #19
    aeda:	4d3a      	ldr	r5, [pc, #232]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    aedc:	47a8      	blx	r5
    aede:	4e37      	ldr	r6, [pc, #220]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    aee0:	24e8      	movs	r4, #232	; 0xe8
    aee2:	5530      	strb	r0, [r6, r4]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    aee4:	2010      	movs	r0, #16
    aee6:	47a8      	blx	r5
    aee8:	0001      	movs	r1, r0
    aeea:	200d      	movs	r0, #13
    aeec:	4b34      	ldr	r3, [pc, #208]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    aeee:	4798      	blx	r3
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
    aef0:	5d31      	ldrb	r1, [r6, r4]
    aef2:	483a      	ldr	r0, [pc, #232]	; (afdc <SX1276OnDio0Irq+0x304>)
    aef4:	4b38      	ldr	r3, [pc, #224]	; (afd8 <SX1276OnDio0Irq+0x300>)
    aef6:	4798      	blx	r3
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    aef8:	23da      	movs	r3, #218	; 0xda
    aefa:	5cf3      	ldrb	r3, [r6, r3]
    aefc:	2b00      	cmp	r3, #0
    aefe:	d103      	bne.n	af08 <SX1276OnDio0Irq+0x230>
                        SX1276.Settings.State = RF_IDLE;
    af00:	2100      	movs	r1, #0
    af02:	3388      	adds	r3, #136	; 0x88
    af04:	4a2d      	ldr	r2, [pc, #180]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af06:	54d1      	strb	r1, [r2, r3]
                    TimerStop( &RxTimeoutTimer );
    af08:	482f      	ldr	r0, [pc, #188]	; (afc8 <SX1276OnDio0Irq+0x2f0>)
    af0a:	4b30      	ldr	r3, [pc, #192]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    af0c:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    af0e:	4b30      	ldr	r3, [pc, #192]	; (afd0 <SX1276OnDio0Irq+0x2f8>)
    af10:	681b      	ldr	r3, [r3, #0]
    af12:	2b00      	cmp	r3, #0
    af14:	d100      	bne.n	af18 <SX1276OnDio0Irq+0x240>
    af16:	e6ec      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
    af18:	689c      	ldr	r4, [r3, #8]
    af1a:	2c00      	cmp	r4, #0
    af1c:	d100      	bne.n	af20 <SX1276OnDio0Irq+0x248>
    af1e:	e6e8      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    af20:	4926      	ldr	r1, [pc, #152]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af22:	23e4      	movs	r3, #228	; 0xe4
    af24:	56cb      	ldrsb	r3, [r1, r3]
    af26:	22e6      	movs	r2, #230	; 0xe6
    af28:	5e8a      	ldrsh	r2, [r1, r2]
    af2a:	20e8      	movs	r0, #232	; 0xe8
    af2c:	5c09      	ldrb	r1, [r1, r0]
    af2e:	482b      	ldr	r0, [pc, #172]	; (afdc <SX1276OnDio0Irq+0x304>)
    af30:	47a0      	blx	r4
    af32:	e6de      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
    af34:	4240      	negs	r0, r0
    af36:	0600      	lsls	r0, r0, #24
    af38:	0e80      	lsrs	r0, r0, #26
                        snr = -snr;
    af3a:	4244      	negs	r4, r0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    af3c:	201a      	movs	r0, #26
    af3e:	4b21      	ldr	r3, [pc, #132]	; (afc4 <SX1276OnDio0Irq+0x2ec>)
    af40:	4798      	blx	r3
    af42:	0005      	movs	r5, r0
    af44:	b203      	sxth	r3, r0
                    if( snr < 0 )
    af46:	2c00      	cmp	r4, #0
    af48:	dabb      	bge.n	aec2 <SX1276OnDio0Irq+0x1ea>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    af4a:	4a27      	ldr	r2, [pc, #156]	; (afe8 <SX1276OnDio0Irq+0x310>)
    af4c:	218c      	movs	r1, #140	; 0x8c
    af4e:	4d1b      	ldr	r5, [pc, #108]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af50:	5869      	ldr	r1, [r5, r1]
    af52:	4291      	cmp	r1, r2
    af54:	d906      	bls.n	af64 <SX1276OnDio0Irq+0x28c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    af56:	3c9d      	subs	r4, #157	; 0x9d
    af58:	1824      	adds	r4, r4, r0
    af5a:	1118      	asrs	r0, r3, #4
    af5c:	1820      	adds	r0, r4, r0
    af5e:	23e6      	movs	r3, #230	; 0xe6
    af60:	52e8      	strh	r0, [r5, r3]
    af62:	e7b9      	b.n	aed8 <SX1276OnDio0Irq+0x200>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    af64:	3ca4      	subs	r4, #164	; 0xa4
    af66:	1824      	adds	r4, r4, r0
    af68:	1118      	asrs	r0, r3, #4
    af6a:	1820      	adds	r0, r4, r0
    af6c:	23e6      	movs	r3, #230	; 0xe6
    af6e:	4a13      	ldr	r2, [pc, #76]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af70:	52d0      	strh	r0, [r2, r3]
    af72:	e7b1      	b.n	aed8 <SX1276OnDio0Irq+0x200>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    af74:	0028      	movs	r0, r5
    af76:	38a4      	subs	r0, #164	; 0xa4
    af78:	111b      	asrs	r3, r3, #4
    af7a:	18c0      	adds	r0, r0, r3
    af7c:	23e6      	movs	r3, #230	; 0xe6
    af7e:	4a0f      	ldr	r2, [pc, #60]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af80:	52d0      	strh	r0, [r2, r3]
    af82:	e7a9      	b.n	aed8 <SX1276OnDio0Irq+0x200>
            TimerStop( &TxTimeoutTimer );
    af84:	4819      	ldr	r0, [pc, #100]	; (afec <SX1276OnDio0Irq+0x314>)
    af86:	4b11      	ldr	r3, [pc, #68]	; (afcc <SX1276OnDio0Irq+0x2f4>)
    af88:	4798      	blx	r3
            switch( SX1276.Settings.Modem )
    af8a:	2389      	movs	r3, #137	; 0x89
    af8c:	4a0b      	ldr	r2, [pc, #44]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af8e:	5cd3      	ldrb	r3, [r2, r3]
    af90:	2b01      	cmp	r3, #1
    af92:	d00e      	beq.n	afb2 <SX1276OnDio0Irq+0x2da>
                SX1276.Settings.State = RF_IDLE;
    af94:	2100      	movs	r1, #0
    af96:	2388      	movs	r3, #136	; 0x88
    af98:	4a08      	ldr	r2, [pc, #32]	; (afbc <SX1276OnDio0Irq+0x2e4>)
    af9a:	54d1      	strb	r1, [r2, r3]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    af9c:	4b0c      	ldr	r3, [pc, #48]	; (afd0 <SX1276OnDio0Irq+0x2f8>)
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	2b00      	cmp	r3, #0
    afa2:	d100      	bne.n	afa6 <SX1276OnDio0Irq+0x2ce>
    afa4:	e6a5      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
    afa6:	681b      	ldr	r3, [r3, #0]
    afa8:	2b00      	cmp	r3, #0
    afaa:	d100      	bne.n	afae <SX1276OnDio0Irq+0x2d6>
    afac:	e6a1      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
    afae:	4798      	blx	r3
}
    afb0:	e69f      	b.n	acf2 <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    afb2:	2108      	movs	r1, #8
    afb4:	2012      	movs	r0, #18
    afb6:	4b02      	ldr	r3, [pc, #8]	; (afc0 <SX1276OnDio0Irq+0x2e8>)
    afb8:	4798      	blx	r3
    afba:	e7eb      	b.n	af94 <SX1276OnDio0Irq+0x2bc>
    afbc:	20001c28 	.word	0x20001c28
    afc0:	0000991d 	.word	0x0000991d
    afc4:	000099dd 	.word	0x000099dd
    afc8:	20001d14 	.word	0x20001d14
    afcc:	0000c1a5 	.word	0x0000c1a5
    afd0:	20001770 	.word	0x20001770
    afd4:	20001ce6 	.word	0x20001ce6
    afd8:	0000acc5 	.word	0x0000acc5
    afdc:	20001670 	.word	0x20001670
    afe0:	20001c14 	.word	0x20001c14
    afe4:	0000c04d 	.word	0x0000c04d
    afe8:	1f4add40 	.word	0x1f4add40
    afec:	20001c00 	.word	0x20001c00

0000aff0 <SX1276OnDio1Irq>:
{
    aff0:	b510      	push	{r4, lr}
    switch( SX1276.Settings.State )
    aff2:	2388      	movs	r3, #136	; 0x88
    aff4:	4a40      	ldr	r2, [pc, #256]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    aff6:	5cd3      	ldrb	r3, [r2, r3]
    aff8:	2b01      	cmp	r3, #1
    affa:	d002      	beq.n	b002 <SX1276OnDio1Irq+0x12>
    affc:	2b02      	cmp	r3, #2
    affe:	d055      	beq.n	b0ac <SX1276OnDio1Irq+0xbc>
}
    b000:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
    b002:	2389      	movs	r3, #137	; 0x89
    b004:	4a3c      	ldr	r2, [pc, #240]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b006:	5cd3      	ldrb	r3, [r2, r3]
    b008:	2b00      	cmp	r3, #0
    b00a:	d015      	beq.n	b038 <SX1276OnDio1Irq+0x48>
    b00c:	2b01      	cmp	r3, #1
    b00e:	d1f7      	bne.n	b000 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
    b010:	483a      	ldr	r0, [pc, #232]	; (b0fc <SX1276OnDio1Irq+0x10c>)
    b012:	4b3b      	ldr	r3, [pc, #236]	; (b100 <SX1276OnDio1Irq+0x110>)
    b014:	4798      	blx	r3
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    b016:	2180      	movs	r1, #128	; 0x80
    b018:	2012      	movs	r0, #18
    b01a:	4b3a      	ldr	r3, [pc, #232]	; (b104 <SX1276OnDio1Irq+0x114>)
    b01c:	4798      	blx	r3
                SX1276.Settings.State = RF_IDLE;
    b01e:	2100      	movs	r1, #0
    b020:	2388      	movs	r3, #136	; 0x88
    b022:	4a35      	ldr	r2, [pc, #212]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b024:	54d1      	strb	r1, [r2, r3]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    b026:	4b38      	ldr	r3, [pc, #224]	; (b108 <SX1276OnDio1Irq+0x118>)
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	2b00      	cmp	r3, #0
    b02c:	d0e8      	beq.n	b000 <SX1276OnDio1Irq+0x10>
    b02e:	68db      	ldr	r3, [r3, #12]
    b030:	2b00      	cmp	r3, #0
    b032:	d0e5      	beq.n	b000 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
    b034:	4798      	blx	r3
    b036:	e7e3      	b.n	b000 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    b038:	23be      	movs	r3, #190	; 0xbe
    b03a:	4a2f      	ldr	r2, [pc, #188]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b03c:	5ad3      	ldrh	r3, [r2, r3]
    b03e:	2b00      	cmp	r3, #0
    b040:	d10b      	bne.n	b05a <SX1276OnDio1Irq+0x6a>
    b042:	33c0      	adds	r3, #192	; 0xc0
    b044:	5ad3      	ldrh	r3, [r2, r3]
    b046:	2b00      	cmp	r3, #0
    b048:	d107      	bne.n	b05a <SX1276OnDio1Irq+0x6a>
                    if( SX1276.Settings.Fsk.FixLen == false )
    b04a:	33a6      	adds	r3, #166	; 0xa6
    b04c:	5cd3      	ldrb	r3, [r2, r3]
    b04e:	2b00      	cmp	r3, #0
    b050:	d119      	bne.n	b086 <SX1276OnDio1Irq+0x96>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
    b052:	2101      	movs	r1, #1
    b054:	482d      	ldr	r0, [pc, #180]	; (b10c <SX1276OnDio1Irq+0x11c>)
    b056:	4b2e      	ldr	r3, [pc, #184]	; (b110 <SX1276OnDio1Irq+0x120>)
    b058:	4798      	blx	r3
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
    b05a:	4a27      	ldr	r2, [pc, #156]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b05c:	23be      	movs	r3, #190	; 0xbe
    b05e:	5ad3      	ldrh	r3, [r2, r3]
    b060:	21c0      	movs	r1, #192	; 0xc0
    b062:	5a50      	ldrh	r0, [r2, r1]
    b064:	3102      	adds	r1, #2
    b066:	5c51      	ldrb	r1, [r2, r1]
    b068:	1a1a      	subs	r2, r3, r0
    b06a:	428a      	cmp	r2, r1
    b06c:	dd12      	ble.n	b094 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
    b06e:	4b29      	ldr	r3, [pc, #164]	; (b114 <SX1276OnDio1Irq+0x124>)
    b070:	1818      	adds	r0, r3, r0
    b072:	4b27      	ldr	r3, [pc, #156]	; (b110 <SX1276OnDio1Irq+0x120>)
    b074:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
    b076:	4b20      	ldr	r3, [pc, #128]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b078:	21c0      	movs	r1, #192	; 0xc0
    b07a:	22c2      	movs	r2, #194	; 0xc2
    b07c:	5c9a      	ldrb	r2, [r3, r2]
    b07e:	5a58      	ldrh	r0, [r3, r1]
    b080:	1812      	adds	r2, r2, r0
    b082:	525a      	strh	r2, [r3, r1]
    b084:	e7bc      	b.n	b000 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    b086:	2032      	movs	r0, #50	; 0x32
    b088:	4b23      	ldr	r3, [pc, #140]	; (b118 <SX1276OnDio1Irq+0x128>)
    b08a:	4798      	blx	r3
    b08c:	23be      	movs	r3, #190	; 0xbe
    b08e:	4a1a      	ldr	r2, [pc, #104]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b090:	52d0      	strh	r0, [r2, r3]
    b092:	e7e2      	b.n	b05a <SX1276OnDio1Irq+0x6a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    b094:	1a19      	subs	r1, r3, r0
    b096:	b2c9      	uxtb	r1, r1
    b098:	4b1e      	ldr	r3, [pc, #120]	; (b114 <SX1276OnDio1Irq+0x124>)
    b09a:	1818      	adds	r0, r3, r0
    b09c:	4b1c      	ldr	r3, [pc, #112]	; (b110 <SX1276OnDio1Irq+0x120>)
    b09e:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    b0a0:	4b15      	ldr	r3, [pc, #84]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b0a2:	22be      	movs	r2, #190	; 0xbe
    b0a4:	5a99      	ldrh	r1, [r3, r2]
    b0a6:	3202      	adds	r2, #2
    b0a8:	5299      	strh	r1, [r3, r2]
    b0aa:	e7a9      	b.n	b000 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
    b0ac:	2389      	movs	r3, #137	; 0x89
    b0ae:	4a12      	ldr	r2, [pc, #72]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b0b0:	5cd3      	ldrb	r3, [r2, r3]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d1a4      	bne.n	b000 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    b0b6:	33be      	adds	r3, #190	; 0xbe
    b0b8:	5ad3      	ldrh	r3, [r2, r3]
    b0ba:	21c0      	movs	r1, #192	; 0xc0
    b0bc:	5a50      	ldrh	r0, [r2, r1]
    b0be:	3103      	adds	r1, #3
    b0c0:	5c51      	ldrb	r1, [r2, r1]
    b0c2:	1a1a      	subs	r2, r3, r0
    b0c4:	428a      	cmp	r2, r1
    b0c6:	dc0b      	bgt.n	b0e0 <SX1276OnDio1Irq+0xf0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    b0c8:	1a19      	subs	r1, r3, r0
    b0ca:	b2c9      	uxtb	r1, r1
    b0cc:	4b11      	ldr	r3, [pc, #68]	; (b114 <SX1276OnDio1Irq+0x124>)
    b0ce:	1818      	adds	r0, r3, r0
    b0d0:	4b12      	ldr	r3, [pc, #72]	; (b11c <SX1276OnDio1Irq+0x12c>)
    b0d2:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    b0d4:	4b08      	ldr	r3, [pc, #32]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b0d6:	22be      	movs	r2, #190	; 0xbe
    b0d8:	5a99      	ldrh	r1, [r3, r2]
    b0da:	3202      	adds	r2, #2
    b0dc:	5299      	strh	r1, [r3, r2]
}
    b0de:	e78f      	b.n	b000 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
    b0e0:	4b0c      	ldr	r3, [pc, #48]	; (b114 <SX1276OnDio1Irq+0x124>)
    b0e2:	1818      	adds	r0, r3, r0
    b0e4:	4b0d      	ldr	r3, [pc, #52]	; (b11c <SX1276OnDio1Irq+0x12c>)
    b0e6:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    b0e8:	4b03      	ldr	r3, [pc, #12]	; (b0f8 <SX1276OnDio1Irq+0x108>)
    b0ea:	21c0      	movs	r1, #192	; 0xc0
    b0ec:	22c3      	movs	r2, #195	; 0xc3
    b0ee:	5c9a      	ldrb	r2, [r3, r2]
    b0f0:	5a58      	ldrh	r0, [r3, r1]
    b0f2:	1812      	adds	r2, r2, r0
    b0f4:	525a      	strh	r2, [r3, r1]
    b0f6:	e783      	b.n	b000 <SX1276OnDio1Irq+0x10>
    b0f8:	20001c28 	.word	0x20001c28
    b0fc:	20001d14 	.word	0x20001d14
    b100:	0000c1a5 	.word	0x0000c1a5
    b104:	0000991d 	.word	0x0000991d
    b108:	20001770 	.word	0x20001770
    b10c:	20001ce6 	.word	0x20001ce6
    b110:	0000acc5 	.word	0x0000acc5
    b114:	20001670 	.word	0x20001670
    b118:	000099dd 	.word	0x000099dd
    b11c:	0000ab79 	.word	0x0000ab79

0000b120 <SX1276SetMaxPayloadLength>:
{
    b120:	b570      	push	{r4, r5, r6, lr}
    b122:	0004      	movs	r4, r0
    b124:	000d      	movs	r5, r1
    SX1276SetModem( modem );
    b126:	4b0b      	ldr	r3, [pc, #44]	; (b154 <SX1276SetMaxPayloadLength+0x34>)
    b128:	4798      	blx	r3
    switch( modem )
    b12a:	2c00      	cmp	r4, #0
    b12c:	d002      	beq.n	b134 <SX1276SetMaxPayloadLength+0x14>
    b12e:	2c01      	cmp	r4, #1
    b130:	d00a      	beq.n	b148 <SX1276SetMaxPayloadLength+0x28>
}
    b132:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    b134:	23a6      	movs	r3, #166	; 0xa6
    b136:	4a08      	ldr	r2, [pc, #32]	; (b158 <SX1276SetMaxPayloadLength+0x38>)
    b138:	5cd3      	ldrb	r3, [r2, r3]
    b13a:	2b00      	cmp	r3, #0
    b13c:	d1f9      	bne.n	b132 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
    b13e:	0029      	movs	r1, r5
    b140:	2032      	movs	r0, #50	; 0x32
    b142:	4b06      	ldr	r3, [pc, #24]	; (b15c <SX1276SetMaxPayloadLength+0x3c>)
    b144:	4798      	blx	r3
    b146:	e7f4      	b.n	b132 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    b148:	0029      	movs	r1, r5
    b14a:	2023      	movs	r0, #35	; 0x23
    b14c:	4b03      	ldr	r3, [pc, #12]	; (b15c <SX1276SetMaxPayloadLength+0x3c>)
    b14e:	4798      	blx	r3
}
    b150:	e7ef      	b.n	b132 <SX1276SetMaxPayloadLength+0x12>
    b152:	46c0      	nop			; (mov r8, r8)
    b154:	0000a199 	.word	0x0000a199
    b158:	20001c28 	.word	0x20001c28
    b15c:	0000991d 	.word	0x0000991d

0000b160 <SX1276SetPublicNetwork>:
{
    b160:	b510      	push	{r4, lr}
    b162:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
    b164:	2001      	movs	r0, #1
    b166:	4b08      	ldr	r3, [pc, #32]	; (b188 <SX1276SetPublicNetwork+0x28>)
    b168:	4798      	blx	r3
    SX1276.Settings.LoRa.PublicNetwork = enable;
    b16a:	23e0      	movs	r3, #224	; 0xe0
    b16c:	4a07      	ldr	r2, [pc, #28]	; (b18c <SX1276SetPublicNetwork+0x2c>)
    b16e:	54d4      	strb	r4, [r2, r3]
    if( enable == true )
    b170:	2c00      	cmp	r4, #0
    b172:	d104      	bne.n	b17e <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    b174:	2112      	movs	r1, #18
    b176:	2039      	movs	r0, #57	; 0x39
    b178:	4b05      	ldr	r3, [pc, #20]	; (b190 <SX1276SetPublicNetwork+0x30>)
    b17a:	4798      	blx	r3
}
    b17c:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    b17e:	2134      	movs	r1, #52	; 0x34
    b180:	2039      	movs	r0, #57	; 0x39
    b182:	4b03      	ldr	r3, [pc, #12]	; (b190 <SX1276SetPublicNetwork+0x30>)
    b184:	4798      	blx	r3
    b186:	e7f9      	b.n	b17c <SX1276SetPublicNetwork+0x1c>
    b188:	0000a199 	.word	0x0000a199
    b18c:	20001c28 	.word	0x20001c28
    b190:	0000991d 	.word	0x0000991d

0000b194 <SX1276OnTimeoutIrq>:
{
    b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.State )
    b196:	2388      	movs	r3, #136	; 0x88
    b198:	4a32      	ldr	r2, [pc, #200]	; (b264 <SX1276OnTimeoutIrq+0xd0>)
    b19a:	5cd3      	ldrb	r3, [r2, r3]
    b19c:	2b01      	cmp	r3, #1
    b19e:	d002      	beq.n	b1a6 <SX1276OnTimeoutIrq+0x12>
    b1a0:	2b02      	cmp	r3, #2
    b1a2:	d037      	beq.n	b214 <SX1276OnTimeoutIrq+0x80>
}
    b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    b1a6:	2389      	movs	r3, #137	; 0x89
    b1a8:	4a2e      	ldr	r2, [pc, #184]	; (b264 <SX1276OnTimeoutIrq+0xd0>)
    b1aa:	5cd3      	ldrb	r3, [r2, r3]
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d008      	beq.n	b1c2 <SX1276OnTimeoutIrq+0x2e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    b1b0:	4b2d      	ldr	r3, [pc, #180]	; (b268 <SX1276OnTimeoutIrq+0xd4>)
    b1b2:	681b      	ldr	r3, [r3, #0]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d0f5      	beq.n	b1a4 <SX1276OnTimeoutIrq+0x10>
    b1b8:	68db      	ldr	r3, [r3, #12]
    b1ba:	2b00      	cmp	r3, #0
    b1bc:	d0f2      	beq.n	b1a4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
    b1be:	4798      	blx	r3
    b1c0:	e7f0      	b.n	b1a4 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    b1c2:	0014      	movs	r4, r2
    b1c4:	22b4      	movs	r2, #180	; 0xb4
    b1c6:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
    b1c8:	3201      	adds	r2, #1
    b1ca:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    b1cc:	320b      	adds	r2, #11
    b1ce:	52a3      	strh	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.Size = 0;
    b1d0:	3a02      	subs	r2, #2
    b1d2:	52a3      	strh	r3, [r4, r2]
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    b1d4:	210b      	movs	r1, #11
    b1d6:	203e      	movs	r0, #62	; 0x3e
    b1d8:	4d24      	ldr	r5, [pc, #144]	; (b26c <SX1276OnTimeoutIrq+0xd8>)
    b1da:	47a8      	blx	r5
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    b1dc:	2110      	movs	r1, #16
    b1de:	203f      	movs	r0, #63	; 0x3f
    b1e0:	47a8      	blx	r5
            if( SX1276.Settings.Fsk.RxContinuous == true )
    b1e2:	23aa      	movs	r3, #170	; 0xaa
    b1e4:	5ce3      	ldrb	r3, [r4, r3]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d00c      	beq.n	b204 <SX1276OnTimeoutIrq+0x70>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    b1ea:	200d      	movs	r0, #13
    b1ec:	4b20      	ldr	r3, [pc, #128]	; (b270 <SX1276OnTimeoutIrq+0xdc>)
    b1ee:	4798      	blx	r3
    b1f0:	2140      	movs	r1, #64	; 0x40
    b1f2:	4301      	orrs	r1, r0
    b1f4:	b2c9      	uxtb	r1, r1
    b1f6:	200d      	movs	r0, #13
    b1f8:	4b1c      	ldr	r3, [pc, #112]	; (b26c <SX1276OnTimeoutIrq+0xd8>)
    b1fa:	4798      	blx	r3
                TimerStart( &RxTimeoutSyncWord );
    b1fc:	481d      	ldr	r0, [pc, #116]	; (b274 <SX1276OnTimeoutIrq+0xe0>)
    b1fe:	4b1e      	ldr	r3, [pc, #120]	; (b278 <SX1276OnTimeoutIrq+0xe4>)
    b200:	4798      	blx	r3
    b202:	e7d5      	b.n	b1b0 <SX1276OnTimeoutIrq+0x1c>
                SX1276.Settings.State = RF_IDLE;
    b204:	2100      	movs	r1, #0
    b206:	2388      	movs	r3, #136	; 0x88
    b208:	4a16      	ldr	r2, [pc, #88]	; (b264 <SX1276OnTimeoutIrq+0xd0>)
    b20a:	54d1      	strb	r1, [r2, r3]
                TimerStop( &RxTimeoutSyncWord );
    b20c:	4819      	ldr	r0, [pc, #100]	; (b274 <SX1276OnTimeoutIrq+0xe0>)
    b20e:	4b1b      	ldr	r3, [pc, #108]	; (b27c <SX1276OnTimeoutIrq+0xe8>)
    b210:	4798      	blx	r3
    b212:	e7cd      	b.n	b1b0 <SX1276OnTimeoutIrq+0x1c>
        SX1276Reset( );
    b214:	4b1a      	ldr	r3, [pc, #104]	; (b280 <SX1276OnTimeoutIrq+0xec>)
    b216:	4798      	blx	r3
        RxChainCalibration( );
    b218:	4b1a      	ldr	r3, [pc, #104]	; (b284 <SX1276OnTimeoutIrq+0xf0>)
    b21a:	4798      	blx	r3
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    b21c:	2000      	movs	r0, #0
    b21e:	4b1a      	ldr	r3, [pc, #104]	; (b288 <SX1276OnTimeoutIrq+0xf4>)
    b220:	4798      	blx	r3
    b222:	4c1a      	ldr	r4, [pc, #104]	; (b28c <SX1276OnTimeoutIrq+0xf8>)
    b224:	0027      	movs	r7, r4
    b226:	3730      	adds	r7, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
    b228:	4e19      	ldr	r6, [pc, #100]	; (b290 <SX1276OnTimeoutIrq+0xfc>)
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    b22a:	4d10      	ldr	r5, [pc, #64]	; (b26c <SX1276OnTimeoutIrq+0xd8>)
            SX1276SetModem( RadioRegsInit[i].Modem );
    b22c:	7820      	ldrb	r0, [r4, #0]
    b22e:	47b0      	blx	r6
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    b230:	78a1      	ldrb	r1, [r4, #2]
    b232:	7860      	ldrb	r0, [r4, #1]
    b234:	47a8      	blx	r5
    b236:	3403      	adds	r4, #3
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    b238:	42bc      	cmp	r4, r7
    b23a:	d1f7      	bne.n	b22c <SX1276OnTimeoutIrq+0x98>
        SX1276SetModem( MODEM_FSK );
    b23c:	2000      	movs	r0, #0
    b23e:	4b14      	ldr	r3, [pc, #80]	; (b290 <SX1276OnTimeoutIrq+0xfc>)
    b240:	4798      	blx	r3
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    b242:	4c08      	ldr	r4, [pc, #32]	; (b264 <SX1276OnTimeoutIrq+0xd0>)
    b244:	23e0      	movs	r3, #224	; 0xe0
    b246:	5ce0      	ldrb	r0, [r4, r3]
    b248:	4b12      	ldr	r3, [pc, #72]	; (b294 <SX1276OnTimeoutIrq+0x100>)
    b24a:	4798      	blx	r3
        SX1276.Settings.State = RF_IDLE;
    b24c:	2200      	movs	r2, #0
    b24e:	2388      	movs	r3, #136	; 0x88
    b250:	54e2      	strb	r2, [r4, r3]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    b252:	4b05      	ldr	r3, [pc, #20]	; (b268 <SX1276OnTimeoutIrq+0xd4>)
    b254:	681b      	ldr	r3, [r3, #0]
    b256:	2b00      	cmp	r3, #0
    b258:	d0a4      	beq.n	b1a4 <SX1276OnTimeoutIrq+0x10>
    b25a:	685b      	ldr	r3, [r3, #4]
    b25c:	2b00      	cmp	r3, #0
    b25e:	d0a1      	beq.n	b1a4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
    b260:	4798      	blx	r3
}
    b262:	e79f      	b.n	b1a4 <SX1276OnTimeoutIrq+0x10>
    b264:	20001c28 	.word	0x20001c28
    b268:	20001770 	.word	0x20001770
    b26c:	0000991d 	.word	0x0000991d
    b270:	000099dd 	.word	0x000099dd
    b274:	20001c14 	.word	0x20001c14
    b278:	0000c04d 	.word	0x0000c04d
    b27c:	0000c1a5 	.word	0x0000c1a5
    b280:	00002505 	.word	0x00002505
    b284:	000099f9 	.word	0x000099f9
    b288:	00009d41 	.word	0x00009d41
    b28c:	0001459c 	.word	0x0001459c
    b290:	0000a199 	.word	0x0000a199
    b294:	0000b161 	.word	0x0000b161

0000b298 <SX1276GetWakeupTime>:
{
    b298:	b510      	push	{r4, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
    b29a:	4b02      	ldr	r3, [pc, #8]	; (b2a4 <SX1276GetWakeupTime+0xc>)
    b29c:	4798      	blx	r3
    b29e:	3001      	adds	r0, #1
}
    b2a0:	bd10      	pop	{r4, pc}
    b2a2:	46c0      	nop			; (mov r8, r8)
    b2a4:	00002501 	.word	0x00002501

0000b2a8 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
    b2a8:	7803      	ldrb	r3, [r0, #0]
    b2aa:	780a      	ldrb	r2, [r1, #0]
    b2ac:	4053      	eors	r3, r2
    b2ae:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
    b2b0:	7843      	ldrb	r3, [r0, #1]
    b2b2:	784a      	ldrb	r2, [r1, #1]
    b2b4:	4053      	eors	r3, r2
    b2b6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
    b2b8:	7883      	ldrb	r3, [r0, #2]
    b2ba:	788a      	ldrb	r2, [r1, #2]
    b2bc:	4053      	eors	r3, r2
    b2be:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
    b2c0:	78c3      	ldrb	r3, [r0, #3]
    b2c2:	78ca      	ldrb	r2, [r1, #3]
    b2c4:	4053      	eors	r3, r2
    b2c6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
    b2c8:	7903      	ldrb	r3, [r0, #4]
    b2ca:	790a      	ldrb	r2, [r1, #4]
    b2cc:	4053      	eors	r3, r2
    b2ce:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
    b2d0:	7943      	ldrb	r3, [r0, #5]
    b2d2:	794a      	ldrb	r2, [r1, #5]
    b2d4:	4053      	eors	r3, r2
    b2d6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
    b2d8:	7983      	ldrb	r3, [r0, #6]
    b2da:	798a      	ldrb	r2, [r1, #6]
    b2dc:	4053      	eors	r3, r2
    b2de:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
    b2e0:	79c3      	ldrb	r3, [r0, #7]
    b2e2:	79ca      	ldrb	r2, [r1, #7]
    b2e4:	4053      	eors	r3, r2
    b2e6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
    b2e8:	7a03      	ldrb	r3, [r0, #8]
    b2ea:	7a0a      	ldrb	r2, [r1, #8]
    b2ec:	4053      	eors	r3, r2
    b2ee:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
    b2f0:	7a43      	ldrb	r3, [r0, #9]
    b2f2:	7a4a      	ldrb	r2, [r1, #9]
    b2f4:	4053      	eors	r3, r2
    b2f6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
    b2f8:	7a83      	ldrb	r3, [r0, #10]
    b2fa:	7a8a      	ldrb	r2, [r1, #10]
    b2fc:	4053      	eors	r3, r2
    b2fe:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
    b300:	7ac3      	ldrb	r3, [r0, #11]
    b302:	7aca      	ldrb	r2, [r1, #11]
    b304:	4053      	eors	r3, r2
    b306:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
    b308:	7b03      	ldrb	r3, [r0, #12]
    b30a:	7b0a      	ldrb	r2, [r1, #12]
    b30c:	4053      	eors	r3, r2
    b30e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
    b310:	7b43      	ldrb	r3, [r0, #13]
    b312:	7b4a      	ldrb	r2, [r1, #13]
    b314:	4053      	eors	r3, r2
    b316:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
    b318:	7b83      	ldrb	r3, [r0, #14]
    b31a:	7b8a      	ldrb	r2, [r1, #14]
    b31c:	4053      	eors	r3, r2
    b31e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
    b320:	7bc3      	ldrb	r3, [r0, #15]
    b322:	7bca      	ldrb	r2, [r1, #15]
    b324:	4053      	eors	r3, r2
    b326:	73c3      	strb	r3, [r0, #15]
#endif
}
    b328:	4770      	bx	lr

0000b32a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
    b32a:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
    b32c:	780b      	ldrb	r3, [r1, #0]
    b32e:	7814      	ldrb	r4, [r2, #0]
    b330:	4063      	eors	r3, r4
    b332:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
    b334:	784b      	ldrb	r3, [r1, #1]
    b336:	7854      	ldrb	r4, [r2, #1]
    b338:	4063      	eors	r3, r4
    b33a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
    b33c:	788b      	ldrb	r3, [r1, #2]
    b33e:	7894      	ldrb	r4, [r2, #2]
    b340:	4063      	eors	r3, r4
    b342:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
    b344:	78cb      	ldrb	r3, [r1, #3]
    b346:	78d4      	ldrb	r4, [r2, #3]
    b348:	4063      	eors	r3, r4
    b34a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
    b34c:	790b      	ldrb	r3, [r1, #4]
    b34e:	7914      	ldrb	r4, [r2, #4]
    b350:	4063      	eors	r3, r4
    b352:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
    b354:	794b      	ldrb	r3, [r1, #5]
    b356:	7954      	ldrb	r4, [r2, #5]
    b358:	4063      	eors	r3, r4
    b35a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
    b35c:	798b      	ldrb	r3, [r1, #6]
    b35e:	7994      	ldrb	r4, [r2, #6]
    b360:	4063      	eors	r3, r4
    b362:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
    b364:	79cb      	ldrb	r3, [r1, #7]
    b366:	79d4      	ldrb	r4, [r2, #7]
    b368:	4063      	eors	r3, r4
    b36a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
    b36c:	7a0b      	ldrb	r3, [r1, #8]
    b36e:	7a14      	ldrb	r4, [r2, #8]
    b370:	4063      	eors	r3, r4
    b372:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
    b374:	7a4b      	ldrb	r3, [r1, #9]
    b376:	7a54      	ldrb	r4, [r2, #9]
    b378:	4063      	eors	r3, r4
    b37a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
    b37c:	7a8b      	ldrb	r3, [r1, #10]
    b37e:	7a94      	ldrb	r4, [r2, #10]
    b380:	4063      	eors	r3, r4
    b382:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
    b384:	7acb      	ldrb	r3, [r1, #11]
    b386:	7ad4      	ldrb	r4, [r2, #11]
    b388:	4063      	eors	r3, r4
    b38a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
    b38c:	7b0b      	ldrb	r3, [r1, #12]
    b38e:	7b14      	ldrb	r4, [r2, #12]
    b390:	4063      	eors	r3, r4
    b392:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
    b394:	7b4b      	ldrb	r3, [r1, #13]
    b396:	7b54      	ldrb	r4, [r2, #13]
    b398:	4063      	eors	r3, r4
    b39a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
    b39c:	7b8b      	ldrb	r3, [r1, #14]
    b39e:	7b94      	ldrb	r4, [r2, #14]
    b3a0:	4063      	eors	r3, r4
    b3a2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
    b3a4:	7bcb      	ldrb	r3, [r1, #15]
    b3a6:	7bd2      	ldrb	r2, [r2, #15]
    b3a8:	4053      	eors	r3, r2
    b3aa:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
    b3ac:	bd10      	pop	{r4, pc}
	...

0000b3b0 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3b2:	46de      	mov	lr, fp
    b3b4:	4657      	mov	r7, sl
    b3b6:	464e      	mov	r6, r9
    b3b8:	4645      	mov	r5, r8
    b3ba:	b5e0      	push	{r5, r6, r7, lr}
    b3bc:	b083      	sub	sp, #12
    b3be:	468b      	mov	fp, r1
    b3c0:	4692      	mov	sl, r2
    uint8_t cc, rc, hi;

    switch( keylen )
    b3c2:	2918      	cmp	r1, #24
    b3c4:	d00f      	beq.n	b3e6 <aes_set_key+0x36>
    b3c6:	2920      	cmp	r1, #32
    b3c8:	d00d      	beq.n	b3e6 <aes_set_key+0x36>
    b3ca:	2910      	cmp	r1, #16
    b3cc:	d00b      	beq.n	b3e6 <aes_set_key+0x36>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
    b3ce:	2200      	movs	r2, #0
    b3d0:	23f0      	movs	r3, #240	; 0xf0
    b3d2:	4651      	mov	r1, sl
    b3d4:	54ca      	strb	r2, [r1, r3]
        return ( uint8_t )-1;
    b3d6:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
    b3d8:	b003      	add	sp, #12
    b3da:	bc3c      	pop	{r2, r3, r4, r5}
    b3dc:	4690      	mov	r8, r2
    b3de:	4699      	mov	r9, r3
    b3e0:	46a2      	mov	sl, r4
    b3e2:	46ab      	mov	fp, r5
    b3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    block_copy_nn(ctx->ksch, key, keylen);
    b3e6:	4654      	mov	r4, sl
    while( nn-- )
    b3e8:	465b      	mov	r3, fp
    b3ea:	1e59      	subs	r1, r3, #1
    b3ec:	b2c9      	uxtb	r1, r1
    b3ee:	2b00      	cmp	r3, #0
    b3f0:	d075      	beq.n	b4de <aes_set_key+0x12e>
    b3f2:	3101      	adds	r1, #1
    b3f4:	2300      	movs	r3, #0
        *d++ = *s++;
    b3f6:	5cc2      	ldrb	r2, [r0, r3]
    b3f8:	54e2      	strb	r2, [r4, r3]
    b3fa:	3301      	adds	r3, #1
    while( nn-- )
    b3fc:	4299      	cmp	r1, r3
    b3fe:	d1fa      	bne.n	b3f6 <aes_set_key+0x46>
    hi = (keylen + 28) << 2;
    b400:	465b      	mov	r3, fp
    b402:	331c      	adds	r3, #28
    b404:	009b      	lsls	r3, r3, #2
    b406:	b2db      	uxtb	r3, r3
    b408:	0019      	movs	r1, r3
    b40a:	9301      	str	r3, [sp, #4]
    ctx->rnd = (hi >> 4) - 1;
    b40c:	091b      	lsrs	r3, r3, #4
    b40e:	3b01      	subs	r3, #1
    b410:	22f0      	movs	r2, #240	; 0xf0
    b412:	4650      	mov	r0, sl
    b414:	5483      	strb	r3, [r0, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
    b416:	458b      	cmp	fp, r1
    b418:	d25f      	bcs.n	b4da <aes_set_key+0x12a>
    hi = (keylen + 28) << 2;
    b41a:	465c      	mov	r4, fp
    b41c:	2301      	movs	r3, #1
    b41e:	4699      	mov	r9, r3
            t0 = s_box(t1) ^ rc;
    b420:	9400      	str	r4, [sp, #0]
    b422:	e01f      	b.n	b464 <aes_set_key+0xb4>
        else if( keylen > 24 && cc % keylen == 16 )
    b424:	9b00      	ldr	r3, [sp, #0]
    b426:	2b18      	cmp	r3, #24
    b428:	d901      	bls.n	b42e <aes_set_key+0x7e>
    b42a:	2910      	cmp	r1, #16
    b42c:	d047      	beq.n	b4be <aes_set_key+0x10e>
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
    b42e:	9b00      	ldr	r3, [sp, #0]
    b430:	1ae3      	subs	r3, r4, r3
    b432:	b2db      	uxtb	r3, r3
    b434:	4652      	mov	r2, sl
    b436:	5cd2      	ldrb	r2, [r2, r3]
    b438:	4659      	mov	r1, fp
    b43a:	4051      	eors	r1, r2
    b43c:	000a      	movs	r2, r1
    b43e:	4651      	mov	r1, sl
    b440:	554a      	strb	r2, [r1, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
    b442:	4455      	add	r5, sl
    b444:	4453      	add	r3, sl
    b446:	785a      	ldrb	r2, [r3, #1]
    b448:	4641      	mov	r1, r8
    b44a:	4051      	eors	r1, r2
    b44c:	7069      	strb	r1, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
    b44e:	789a      	ldrb	r2, [r3, #2]
    b450:	4057      	eors	r7, r2
    b452:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    b454:	78db      	ldrb	r3, [r3, #3]
    b456:	405e      	eors	r6, r3
    b458:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
    b45a:	3404      	adds	r4, #4
    b45c:	b2e4      	uxtb	r4, r4
    b45e:	9b01      	ldr	r3, [sp, #4]
    b460:	429c      	cmp	r4, r3
    b462:	d238      	bcs.n	b4d6 <aes_set_key+0x126>
        t0 = ctx->ksch[cc - 4];
    b464:	0025      	movs	r5, r4
    b466:	4653      	mov	r3, sl
    b468:	191b      	adds	r3, r3, r4
    b46a:	1f1a      	subs	r2, r3, #4
    b46c:	7812      	ldrb	r2, [r2, #0]
    b46e:	4693      	mov	fp, r2
        t1 = ctx->ksch[cc - 3];
    b470:	1eda      	subs	r2, r3, #3
    b472:	7812      	ldrb	r2, [r2, #0]
    b474:	4690      	mov	r8, r2
        t2 = ctx->ksch[cc - 2];
    b476:	1e9a      	subs	r2, r3, #2
    b478:	7817      	ldrb	r7, [r2, #0]
        t3 = ctx->ksch[cc - 1];
    b47a:	3b01      	subs	r3, #1
    b47c:	781e      	ldrb	r6, [r3, #0]
        if( cc % keylen == 0 )
    b47e:	9900      	ldr	r1, [sp, #0]
    b480:	0020      	movs	r0, r4
    b482:	4b1a      	ldr	r3, [pc, #104]	; (b4ec <aes_set_key+0x13c>)
    b484:	4798      	blx	r3
    b486:	b2c9      	uxtb	r1, r1
    b488:	2900      	cmp	r1, #0
    b48a:	d1cb      	bne.n	b424 <aes_set_key+0x74>
            t0 = s_box(t1) ^ rc;
    b48c:	4b18      	ldr	r3, [pc, #96]	; (b4f0 <aes_set_key+0x140>)
    b48e:	4642      	mov	r2, r8
    b490:	5c9a      	ldrb	r2, [r3, r2]
    b492:	464b      	mov	r3, r9
    b494:	405a      	eors	r2, r3
            t1 = s_box(t2);
    b496:	4b16      	ldr	r3, [pc, #88]	; (b4f0 <aes_set_key+0x140>)
    b498:	5ddb      	ldrb	r3, [r3, r7]
    b49a:	4698      	mov	r8, r3
            t2 = s_box(t3);
    b49c:	4b14      	ldr	r3, [pc, #80]	; (b4f0 <aes_set_key+0x140>)
    b49e:	5d9f      	ldrb	r7, [r3, r6]
            t3 = s_box(tt);
    b4a0:	4659      	mov	r1, fp
    b4a2:	5c5e      	ldrb	r6, [r3, r1]
            rc = f2(rc);
    b4a4:	464b      	mov	r3, r9
    b4a6:	09db      	lsrs	r3, r3, #7
    b4a8:	0059      	lsls	r1, r3, #1
    b4aa:	185b      	adds	r3, r3, r1
    b4ac:	00d9      	lsls	r1, r3, #3
    b4ae:	185b      	adds	r3, r3, r1
    b4b0:	4649      	mov	r1, r9
    b4b2:	0049      	lsls	r1, r1, #1
    b4b4:	404b      	eors	r3, r1
    b4b6:	b2db      	uxtb	r3, r3
    b4b8:	4699      	mov	r9, r3
            t0 = s_box(t1) ^ rc;
    b4ba:	4693      	mov	fp, r2
    b4bc:	e7b7      	b.n	b42e <aes_set_key+0x7e>
            t0 = s_box(t0);
    b4be:	4b0c      	ldr	r3, [pc, #48]	; (b4f0 <aes_set_key+0x140>)
    b4c0:	465a      	mov	r2, fp
    b4c2:	5c9b      	ldrb	r3, [r3, r2]
    b4c4:	469b      	mov	fp, r3
            t1 = s_box(t1);
    b4c6:	4b0a      	ldr	r3, [pc, #40]	; (b4f0 <aes_set_key+0x140>)
    b4c8:	4642      	mov	r2, r8
    b4ca:	5c9b      	ldrb	r3, [r3, r2]
    b4cc:	4698      	mov	r8, r3
            t2 = s_box(t2);
    b4ce:	4b08      	ldr	r3, [pc, #32]	; (b4f0 <aes_set_key+0x140>)
    b4d0:	5ddf      	ldrb	r7, [r3, r7]
            t3 = s_box(t3);
    b4d2:	5d9e      	ldrb	r6, [r3, r6]
    b4d4:	e7ab      	b.n	b42e <aes_set_key+0x7e>
    return 0;
    b4d6:	2000      	movs	r0, #0
    b4d8:	e77e      	b.n	b3d8 <aes_set_key+0x28>
    b4da:	2000      	movs	r0, #0
    b4dc:	e77c      	b.n	b3d8 <aes_set_key+0x28>
    ctx->rnd = (hi >> 4) - 1;
    b4de:	2206      	movs	r2, #6
    b4e0:	23f0      	movs	r3, #240	; 0xf0
    b4e2:	54e2      	strb	r2, [r4, r3]
    hi = (keylen + 28) << 2;
    b4e4:	3b80      	subs	r3, #128	; 0x80
    b4e6:	9301      	str	r3, [sp, #4]
    b4e8:	e797      	b.n	b41a <aes_set_key+0x6a>
    b4ea:	46c0      	nop			; (mov r8, r8)
    b4ec:	0000c719 	.word	0x0000c719
    b4f0:	0001467c 	.word	0x0001467c

0000b4f4 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
    b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4f6:	46de      	mov	lr, fp
    b4f8:	4657      	mov	r7, sl
    b4fa:	464e      	mov	r6, r9
    b4fc:	4645      	mov	r5, r8
    b4fe:	b5e0      	push	{r5, r6, r7, lr}
    b500:	b093      	sub	sp, #76	; 0x4c
    b502:	910d      	str	r1, [sp, #52]	; 0x34
    b504:	920b      	str	r2, [sp, #44]	; 0x2c
    if( ctx->rnd )
    b506:	23f0      	movs	r3, #240	; 0xf0
    b508:	5cd2      	ldrb	r2, [r2, r3]
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
    b50a:	330f      	adds	r3, #15
    if( ctx->rnd )
    b50c:	2a00      	cmp	r2, #0
    b50e:	d107      	bne.n	b520 <aes_encrypt+0x2c>
    return 0;
}
    b510:	0018      	movs	r0, r3
    b512:	b013      	add	sp, #76	; 0x4c
    b514:	bc3c      	pop	{r2, r3, r4, r5}
    b516:	4690      	mov	r8, r2
    b518:	4699      	mov	r9, r3
    b51a:	46a2      	mov	sl, r4
    b51c:	46ab      	mov	fp, r5
    b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        copy_and_key( s1, in, ctx->ksch );
    b520:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b522:	940c      	str	r4, [sp, #48]	; 0x30
    b524:	0022      	movs	r2, r4
    b526:	0001      	movs	r1, r0
    b528:	a80e      	add	r0, sp, #56	; 0x38
    b52a:	4ba0      	ldr	r3, [pc, #640]	; (b7ac <aes_encrypt+0x2b8>)
    b52c:	4798      	blx	r3
        for( r = 1 ; r < ctx->rnd ; ++r )
    b52e:	23f0      	movs	r3, #240	; 0xf0
    b530:	5ce3      	ldrb	r3, [r4, r3]
    b532:	2b01      	cmp	r3, #1
    b534:	d800      	bhi.n	b538 <aes_encrypt+0x44>
    b536:	e135      	b.n	b7a4 <aes_encrypt+0x2b0>
    b538:	2301      	movs	r3, #1
    b53a:	9303      	str	r3, [sp, #12]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
    b53c:	4b9c      	ldr	r3, [pc, #624]	; (b7b0 <aes_encrypt+0x2bc>)
    b53e:	4698      	mov	r8, r3
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
    b540:	ab0e      	add	r3, sp, #56	; 0x38
    b542:	785b      	ldrb	r3, [r3, #1]
    b544:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
    b546:	aa0e      	add	r2, sp, #56	; 0x38
    b548:	7892      	ldrb	r2, [r2, #2]
    b54a:	9205      	str	r2, [sp, #20]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
    b54c:	a90e      	add	r1, sp, #56	; 0x38
    b54e:	78c9      	ldrb	r1, [r1, #3]
    b550:	9102      	str	r1, [sp, #8]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
    b552:	a80e      	add	r0, sp, #56	; 0x38
    b554:	7900      	ldrb	r0, [r0, #4]
    b556:	9006      	str	r0, [sp, #24]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
    b558:	ae0e      	add	r6, sp, #56	; 0x38
    b55a:	79b0      	ldrb	r0, [r6, #6]
    b55c:	9007      	str	r0, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
    b55e:	79f4      	ldrb	r4, [r6, #7]
    b560:	9408      	str	r4, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
    b562:	7a31      	ldrb	r1, [r6, #8]
    b564:	9100      	str	r1, [sp, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
    b566:	7a70      	ldrb	r0, [r6, #9]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
    b568:	7af6      	ldrb	r6, [r6, #11]
    b56a:	46b2      	mov	sl, r6
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
    b56c:	ae0e      	add	r6, sp, #56	; 0x38
    b56e:	7b33      	ldrb	r3, [r6, #12]
    b570:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
    b572:	7b71      	ldrb	r1, [r6, #13]
    b574:	910a      	str	r1, [sp, #40]	; 0x28
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
    b576:	7bb3      	ldrb	r3, [r6, #14]
    b578:	9301      	str	r3, [sp, #4]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
    b57a:	7835      	ldrb	r5, [r6, #0]
    b57c:	7976      	ldrb	r6, [r6, #5]
    b57e:	46b1      	mov	r9, r6
    b580:	ae0e      	add	r6, sp, #56	; 0x38
    b582:	7ab6      	ldrb	r6, [r6, #10]
    b584:	46b4      	mov	ip, r6
    b586:	4646      	mov	r6, r8
    b588:	4663      	mov	r3, ip
    b58a:	5cf3      	ldrb	r3, [r6, r3]
    b58c:	001f      	movs	r7, r3
    b58e:	ab0e      	add	r3, sp, #56	; 0x38
    b590:	7bdc      	ldrb	r4, [r3, #15]
    b592:	5d33      	ldrb	r3, [r6, r4]
    b594:	4a87      	ldr	r2, [pc, #540]	; (b7b4 <aes_encrypt+0x2c0>)
    b596:	5d52      	ldrb	r2, [r2, r5]
    b598:	464e      	mov	r6, r9
    b59a:	4987      	ldr	r1, [pc, #540]	; (b7b8 <aes_encrypt+0x2c4>)
    b59c:	5d8e      	ldrb	r6, [r1, r6]
    b59e:	4072      	eors	r2, r6
    b5a0:	003e      	movs	r6, r7
    b5a2:	407a      	eors	r2, r7
    b5a4:	405a      	eors	r2, r3
    b5a6:	af0e      	add	r7, sp, #56	; 0x38
    b5a8:	703a      	strb	r2, [r7, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
    b5aa:	4647      	mov	r7, r8
    b5ac:	5d7a      	ldrb	r2, [r7, r5]
    b5ae:	4053      	eors	r3, r2
    b5b0:	464f      	mov	r7, r9
    b5b2:	4980      	ldr	r1, [pc, #512]	; (b7b4 <aes_encrypt+0x2c0>)
    b5b4:	5dcf      	ldrb	r7, [r1, r7]
    b5b6:	407b      	eors	r3, r7
    b5b8:	4667      	mov	r7, ip
    b5ba:	497f      	ldr	r1, [pc, #508]	; (b7b8 <aes_encrypt+0x2c4>)
    b5bc:	5dcf      	ldrb	r7, [r1, r7]
    b5be:	407b      	eors	r3, r7
    b5c0:	af0e      	add	r7, sp, #56	; 0x38
    b5c2:	707b      	strb	r3, [r7, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
    b5c4:	4647      	mov	r7, r8
    b5c6:	464b      	mov	r3, r9
    b5c8:	5cfb      	ldrb	r3, [r7, r3]
    b5ca:	405a      	eors	r2, r3
    b5cc:	4667      	mov	r7, ip
    b5ce:	4979      	ldr	r1, [pc, #484]	; (b7b4 <aes_encrypt+0x2c0>)
    b5d0:	5dcf      	ldrb	r7, [r1, r7]
    b5d2:	407a      	eors	r2, r7
    b5d4:	4f78      	ldr	r7, [pc, #480]	; (b7b8 <aes_encrypt+0x2c4>)
    b5d6:	5d3f      	ldrb	r7, [r7, r4]
    b5d8:	407a      	eors	r2, r7
    b5da:	af0e      	add	r7, sp, #56	; 0x38
    b5dc:	70ba      	strb	r2, [r7, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
    b5de:	4073      	eors	r3, r6
    b5e0:	4a75      	ldr	r2, [pc, #468]	; (b7b8 <aes_encrypt+0x2c4>)
    b5e2:	5d52      	ldrb	r2, [r2, r5]
    b5e4:	4053      	eors	r3, r2
    b5e6:	5d0a      	ldrb	r2, [r1, r4]
    b5e8:	4053      	eors	r3, r2
    b5ea:	70fb      	strb	r3, [r7, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
    b5ec:	4646      	mov	r6, r8
    b5ee:	9b01      	ldr	r3, [sp, #4]
    b5f0:	5cf4      	ldrb	r4, [r6, r3]
    b5f2:	9b02      	ldr	r3, [sp, #8]
    b5f4:	5cf3      	ldrb	r3, [r6, r3]
    b5f6:	9f06      	ldr	r7, [sp, #24]
    b5f8:	5dca      	ldrb	r2, [r1, r7]
    b5fa:	4d6f      	ldr	r5, [pc, #444]	; (b7b8 <aes_encrypt+0x2c4>)
    b5fc:	5c2d      	ldrb	r5, [r5, r0]
    b5fe:	406a      	eors	r2, r5
    b600:	4062      	eors	r2, r4
    b602:	405a      	eors	r2, r3
    b604:	ae0e      	add	r6, sp, #56	; 0x38
    b606:	7132      	strb	r2, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
    b608:	4646      	mov	r6, r8
    b60a:	5df2      	ldrb	r2, [r6, r7]
    b60c:	4053      	eors	r3, r2
    b60e:	5c0d      	ldrb	r5, [r1, r0]
    b610:	406b      	eors	r3, r5
    b612:	4d69      	ldr	r5, [pc, #420]	; (b7b8 <aes_encrypt+0x2c4>)
    b614:	9901      	ldr	r1, [sp, #4]
    b616:	5c6d      	ldrb	r5, [r5, r1]
    b618:	406b      	eors	r3, r5
    b61a:	ae0e      	add	r6, sp, #56	; 0x38
    b61c:	7173      	strb	r3, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
    b61e:	4646      	mov	r6, r8
    b620:	5c33      	ldrb	r3, [r6, r0]
    b622:	405a      	eors	r2, r3
    b624:	4863      	ldr	r0, [pc, #396]	; (b7b4 <aes_encrypt+0x2c0>)
    b626:	5c41      	ldrb	r1, [r0, r1]
    b628:	404a      	eors	r2, r1
    b62a:	9802      	ldr	r0, [sp, #8]
    b62c:	4d62      	ldr	r5, [pc, #392]	; (b7b8 <aes_encrypt+0x2c4>)
    b62e:	5c29      	ldrb	r1, [r5, r0]
    b630:	404a      	eors	r2, r1
    b632:	ae0e      	add	r6, sp, #56	; 0x38
    b634:	71b2      	strb	r2, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
    b636:	405c      	eors	r4, r3
    b638:	5deb      	ldrb	r3, [r5, r7]
    b63a:	405c      	eors	r4, r3
    b63c:	4b5d      	ldr	r3, [pc, #372]	; (b7b4 <aes_encrypt+0x2c0>)
    b63e:	5c1b      	ldrb	r3, [r3, r0]
    b640:	405c      	eors	r4, r3
    b642:	71f4      	strb	r4, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
    b644:	4646      	mov	r6, r8
    b646:	9d05      	ldr	r5, [sp, #20]
    b648:	5d71      	ldrb	r1, [r6, r5]
    b64a:	9c08      	ldr	r4, [sp, #32]
    b64c:	5d33      	ldrb	r3, [r6, r4]
    b64e:	9a00      	ldr	r2, [sp, #0]
    b650:	4858      	ldr	r0, [pc, #352]	; (b7b4 <aes_encrypt+0x2c0>)
    b652:	5c82      	ldrb	r2, [r0, r2]
    b654:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b656:	4e58      	ldr	r6, [pc, #352]	; (b7b8 <aes_encrypt+0x2c4>)
    b658:	5df0      	ldrb	r0, [r6, r7]
    b65a:	4042      	eors	r2, r0
    b65c:	404a      	eors	r2, r1
    b65e:	405a      	eors	r2, r3
    b660:	ae0e      	add	r6, sp, #56	; 0x38
    b662:	7232      	strb	r2, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
    b664:	4646      	mov	r6, r8
    b666:	9a00      	ldr	r2, [sp, #0]
    b668:	5cb2      	ldrb	r2, [r6, r2]
    b66a:	4053      	eors	r3, r2
    b66c:	4e51      	ldr	r6, [pc, #324]	; (b7b4 <aes_encrypt+0x2c0>)
    b66e:	5df0      	ldrb	r0, [r6, r7]
    b670:	4043      	eors	r3, r0
    b672:	4e51      	ldr	r6, [pc, #324]	; (b7b8 <aes_encrypt+0x2c4>)
    b674:	5d70      	ldrb	r0, [r6, r5]
    b676:	4043      	eors	r3, r0
    b678:	ae0e      	add	r6, sp, #56	; 0x38
    b67a:	7273      	strb	r3, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
    b67c:	4646      	mov	r6, r8
    b67e:	5df3      	ldrb	r3, [r6, r7]
    b680:	405a      	eors	r2, r3
    b682:	0028      	movs	r0, r5
    b684:	4d4b      	ldr	r5, [pc, #300]	; (b7b4 <aes_encrypt+0x2c0>)
    b686:	5c28      	ldrb	r0, [r5, r0]
    b688:	4042      	eors	r2, r0
    b68a:	484b      	ldr	r0, [pc, #300]	; (b7b8 <aes_encrypt+0x2c4>)
    b68c:	5d00      	ldrb	r0, [r0, r4]
    b68e:	4042      	eors	r2, r0
    b690:	ae0e      	add	r6, sp, #56	; 0x38
    b692:	72b2      	strb	r2, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
    b694:	4059      	eors	r1, r3
    b696:	9a00      	ldr	r2, [sp, #0]
    b698:	4b47      	ldr	r3, [pc, #284]	; (b7b8 <aes_encrypt+0x2c4>)
    b69a:	5c9b      	ldrb	r3, [r3, r2]
    b69c:	4059      	eors	r1, r3
    b69e:	5d2b      	ldrb	r3, [r5, r4]
    b6a0:	4059      	eors	r1, r3
    b6a2:	72f1      	strb	r1, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
    b6a4:	4641      	mov	r1, r8
    b6a6:	9d07      	ldr	r5, [sp, #28]
    b6a8:	5d4b      	ldrb	r3, [r1, r5]
    b6aa:	4650      	mov	r0, sl
    b6ac:	5c09      	ldrb	r1, [r1, r0]
    b6ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b6b0:	4840      	ldr	r0, [pc, #256]	; (b7b4 <aes_encrypt+0x2c0>)
    b6b2:	5d82      	ldrb	r2, [r0, r6]
    b6b4:	9c04      	ldr	r4, [sp, #16]
    b6b6:	4f40      	ldr	r7, [pc, #256]	; (b7b8 <aes_encrypt+0x2c4>)
    b6b8:	5d38      	ldrb	r0, [r7, r4]
    b6ba:	4042      	eors	r2, r0
    b6bc:	405a      	eors	r2, r3
    b6be:	404a      	eors	r2, r1
    b6c0:	a80e      	add	r0, sp, #56	; 0x38
    b6c2:	7302      	strb	r2, [r0, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
    b6c4:	4640      	mov	r0, r8
    b6c6:	5d82      	ldrb	r2, [r0, r6]
    b6c8:	4051      	eors	r1, r2
    b6ca:	0008      	movs	r0, r1
    b6cc:	4f39      	ldr	r7, [pc, #228]	; (b7b4 <aes_encrypt+0x2c0>)
    b6ce:	5d39      	ldrb	r1, [r7, r4]
    b6d0:	4041      	eors	r1, r0
    b6d2:	4f39      	ldr	r7, [pc, #228]	; (b7b8 <aes_encrypt+0x2c4>)
    b6d4:	5d78      	ldrb	r0, [r7, r5]
    b6d6:	4041      	eors	r1, r0
    b6d8:	a80e      	add	r0, sp, #56	; 0x38
    b6da:	7341      	strb	r1, [r0, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
    b6dc:	4640      	mov	r0, r8
    b6de:	5d01      	ldrb	r1, [r0, r4]
    b6e0:	404a      	eors	r2, r1
    b6e2:	4c34      	ldr	r4, [pc, #208]	; (b7b4 <aes_encrypt+0x2c0>)
    b6e4:	5d60      	ldrb	r0, [r4, r5]
    b6e6:	4042      	eors	r2, r0
    b6e8:	4650      	mov	r0, sl
    b6ea:	5c38      	ldrb	r0, [r7, r0]
    b6ec:	4042      	eors	r2, r0
    b6ee:	a80e      	add	r0, sp, #56	; 0x38
    b6f0:	7382      	strb	r2, [r0, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
    b6f2:	404b      	eors	r3, r1
    b6f4:	5dba      	ldrb	r2, [r7, r6]
    b6f6:	4053      	eors	r3, r2
    b6f8:	4652      	mov	r2, sl
    b6fa:	492e      	ldr	r1, [pc, #184]	; (b7b4 <aes_encrypt+0x2c0>)
    b6fc:	5c8a      	ldrb	r2, [r1, r2]
    b6fe:	4053      	eors	r3, r2
    b700:	73c3      	strb	r3, [r0, #15]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
    b702:	9c03      	ldr	r4, [sp, #12]
    b704:	0121      	lsls	r1, r4, #4
    b706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b708:	469c      	mov	ip, r3
    b70a:	4461      	add	r1, ip
    xor_block(d, k);
    b70c:	4b2b      	ldr	r3, [pc, #172]	; (b7bc <aes_encrypt+0x2c8>)
    b70e:	4798      	blx	r3
        for( r = 1 ; r < ctx->rnd ; ++r )
    b710:	0023      	movs	r3, r4
    b712:	3301      	adds	r3, #1
    b714:	b2db      	uxtb	r3, r3
    b716:	001a      	movs	r2, r3
    b718:	9303      	str	r3, [sp, #12]
    b71a:	23f0      	movs	r3, #240	; 0xf0
    b71c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b71e:	5ccb      	ldrb	r3, [r1, r3]
    b720:	4293      	cmp	r3, r2
    b722:	d900      	bls.n	b726 <aes_encrypt+0x232>
    b724:	e70c      	b.n	b540 <aes_encrypt+0x4c>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
    b726:	4b22      	ldr	r3, [pc, #136]	; (b7b0 <aes_encrypt+0x2bc>)
    b728:	aa0e      	add	r2, sp, #56	; 0x38
    b72a:	7812      	ldrb	r2, [r2, #0]
    b72c:	5c9a      	ldrb	r2, [r3, r2]
    b72e:	a90e      	add	r1, sp, #56	; 0x38
    b730:	700a      	strb	r2, [r1, #0]
    b732:	790a      	ldrb	r2, [r1, #4]
    b734:	5c9a      	ldrb	r2, [r3, r2]
    b736:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
    b738:	7a0a      	ldrb	r2, [r1, #8]
    b73a:	5c9a      	ldrb	r2, [r3, r2]
    b73c:	720a      	strb	r2, [r1, #8]
    b73e:	7b0a      	ldrb	r2, [r1, #12]
    b740:	5c9a      	ldrb	r2, [r3, r2]
    b742:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
    b744:	784a      	ldrb	r2, [r1, #1]
    b746:	7949      	ldrb	r1, [r1, #5]
    b748:	5c59      	ldrb	r1, [r3, r1]
    b74a:	a80e      	add	r0, sp, #56	; 0x38
    b74c:	7041      	strb	r1, [r0, #1]
    b74e:	7a41      	ldrb	r1, [r0, #9]
    b750:	5c59      	ldrb	r1, [r3, r1]
    b752:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
    b754:	7b41      	ldrb	r1, [r0, #13]
    b756:	5c59      	ldrb	r1, [r3, r1]
    b758:	7241      	strb	r1, [r0, #9]
    b75a:	5c9a      	ldrb	r2, [r3, r2]
    b75c:	7342      	strb	r2, [r0, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
    b75e:	7882      	ldrb	r2, [r0, #2]
    b760:	7a81      	ldrb	r1, [r0, #10]
    b762:	5c59      	ldrb	r1, [r3, r1]
    b764:	7081      	strb	r1, [r0, #2]
    b766:	5c9a      	ldrb	r2, [r3, r2]
    b768:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
    b76a:	7982      	ldrb	r2, [r0, #6]
    b76c:	7b81      	ldrb	r1, [r0, #14]
    b76e:	5c59      	ldrb	r1, [r3, r1]
    b770:	7181      	strb	r1, [r0, #6]
    b772:	5c9a      	ldrb	r2, [r3, r2]
    b774:	7382      	strb	r2, [r0, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
    b776:	7bc2      	ldrb	r2, [r0, #15]
    b778:	7ac1      	ldrb	r1, [r0, #11]
    b77a:	5c59      	ldrb	r1, [r3, r1]
    b77c:	73c1      	strb	r1, [r0, #15]
    b77e:	79c1      	ldrb	r1, [r0, #7]
    b780:	5c59      	ldrb	r1, [r3, r1]
    b782:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
    b784:	78c1      	ldrb	r1, [r0, #3]
    b786:	5c59      	ldrb	r1, [r3, r1]
    b788:	71c1      	strb	r1, [r0, #7]
    b78a:	5c9b      	ldrb	r3, [r3, r2]
    b78c:	70c3      	strb	r3, [r0, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    b78e:	9b03      	ldr	r3, [sp, #12]
    b790:	011a      	lsls	r2, r3, #4
    b792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b794:	469c      	mov	ip, r3
    b796:	4462      	add	r2, ip
    b798:	0001      	movs	r1, r0
    b79a:	980d      	ldr	r0, [sp, #52]	; 0x34
    b79c:	4b03      	ldr	r3, [pc, #12]	; (b7ac <aes_encrypt+0x2b8>)
    b79e:	4798      	blx	r3
    return 0;
    b7a0:	2300      	movs	r3, #0
    b7a2:	e6b5      	b.n	b510 <aes_encrypt+0x1c>
        for( r = 1 ; r < ctx->rnd ; ++r )
    b7a4:	2301      	movs	r3, #1
    b7a6:	9303      	str	r3, [sp, #12]
    b7a8:	e7bd      	b.n	b726 <aes_encrypt+0x232>
    b7aa:	46c0      	nop			; (mov r8, r8)
    b7ac:	0000b32b 	.word	0x0000b32b
    b7b0:	0001467c 	.word	0x0001467c
    b7b4:	0001477c 	.word	0x0001477c
    b7b8:	0001487c 	.word	0x0001487c
    b7bc:	0000b2a9 	.word	0x0000b2a9

0000b7c0 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
    b7c0:	b570      	push	{r4, r5, r6, lr}
    b7c2:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
    b7c4:	30f1      	adds	r0, #241	; 0xf1
    b7c6:	2210      	movs	r2, #16
    b7c8:	2100      	movs	r1, #0
    b7ca:	4d05      	ldr	r5, [pc, #20]	; (b7e0 <AES_CMAC_Init+0x20>)
    b7cc:	47a8      	blx	r5
            ctx->M_n = 0;
    b7ce:	2200      	movs	r2, #0
    b7d0:	238a      	movs	r3, #138	; 0x8a
    b7d2:	005b      	lsls	r3, r3, #1
    b7d4:	50e2      	str	r2, [r4, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
    b7d6:	32f0      	adds	r2, #240	; 0xf0
    b7d8:	2100      	movs	r1, #0
    b7da:	0020      	movs	r0, r4
    b7dc:	47a8      	blx	r5
}
    b7de:	bd70      	pop	{r4, r5, r6, pc}
    b7e0:	00001ec7 	.word	0x00001ec7

0000b7e4 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
    b7e4:	b510      	push	{r4, lr}
    b7e6:	0002      	movs	r2, r0
    b7e8:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
    b7ea:	2110      	movs	r1, #16
    b7ec:	4b01      	ldr	r3, [pc, #4]	; (b7f4 <AES_CMAC_SetKey+0x10>)
    b7ee:	4798      	blx	r3
}
    b7f0:	bd10      	pop	{r4, pc}
    b7f2:	46c0      	nop			; (mov r8, r8)
    b7f4:	0000b3b1 	.word	0x0000b3b1

0000b7f8 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
    b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7fa:	46de      	mov	lr, fp
    b7fc:	4657      	mov	r7, sl
    b7fe:	464e      	mov	r6, r9
    b800:	4645      	mov	r5, r8
    b802:	b5e0      	push	{r5, r6, r7, lr}
    b804:	b089      	sub	sp, #36	; 0x24
    b806:	0007      	movs	r7, r0
    b808:	468a      	mov	sl, r1
    b80a:	4693      	mov	fp, r2
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
    b80c:	238a      	movs	r3, #138	; 0x8a
    b80e:	005b      	lsls	r3, r3, #1
    b810:	58c0      	ldr	r0, [r0, r3]
    b812:	2800      	cmp	r0, #0
    b814:	d157      	bne.n	b8c6 <AES_CMAC_Update+0xce>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
                    data += mlen;
                    len -= mlen;
            }
            while (len > 16) {      /* not last block */
    b816:	465b      	mov	r3, fp
    b818:	2b10      	cmp	r3, #16
    b81a:	d940      	bls.n	b89e <AES_CMAC_Update+0xa6>
    b81c:	2311      	movs	r3, #17
    b81e:	425b      	negs	r3, r3
    b820:	445b      	add	r3, fp
    b822:	9302      	str	r3, [sp, #8]
    b824:	091b      	lsrs	r3, r3, #4
    b826:	9303      	str	r3, [sp, #12]
    b828:	3301      	adds	r3, #1
    b82a:	011b      	lsls	r3, r3, #4
    b82c:	4656      	mov	r6, sl
    b82e:	46b1      	mov	r9, r6
    b830:	4499      	add	r9, r3
    b832:	1cbc      	adds	r4, r7, #2
    b834:	34ff      	adds	r4, #255	; 0xff

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
    b836:	4b3a      	ldr	r3, [pc, #232]	; (b920 <AES_CMAC_Update+0x128>)
    b838:	4698      	mov	r8, r3
            aes_encrypt( in, in, &ctx->rijndael);
    b83a:	4d3a      	ldr	r5, [pc, #232]	; (b924 <AES_CMAC_Update+0x12c>)
    b83c:	003b      	movs	r3, r7
    b83e:	4657      	mov	r7, sl
    b840:	001e      	movs	r6, r3
    b842:	0031      	movs	r1, r6
    b844:	31f1      	adds	r1, #241	; 0xf1
    b846:	0038      	movs	r0, r7
                    XOR(data, ctx->X);
    b848:	780b      	ldrb	r3, [r1, #0]
    b84a:	7802      	ldrb	r2, [r0, #0]
    b84c:	4053      	eors	r3, r2
    b84e:	700b      	strb	r3, [r1, #0]
    b850:	3101      	adds	r1, #1
    b852:	3001      	adds	r0, #1
    b854:	42a1      	cmp	r1, r4
    b856:	d1f7      	bne.n	b848 <AES_CMAC_Update+0x50>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
    b858:	2210      	movs	r2, #16
    b85a:	23f1      	movs	r3, #241	; 0xf1
    b85c:	469c      	mov	ip, r3
    b85e:	44b4      	add	ip, r6
    b860:	4663      	mov	r3, ip
    b862:	9301      	str	r3, [sp, #4]
    b864:	4661      	mov	r1, ip
    b866:	a804      	add	r0, sp, #16
    b868:	47c0      	blx	r8
            aes_encrypt( in, in, &ctx->rijndael);
    b86a:	0032      	movs	r2, r6
    b86c:	a904      	add	r1, sp, #16
    b86e:	0008      	movs	r0, r1
    b870:	47a8      	blx	r5
                    memcpy1(&ctx->X[0], in, 16);
    b872:	2210      	movs	r2, #16
    b874:	a904      	add	r1, sp, #16
    b876:	9801      	ldr	r0, [sp, #4]
    b878:	47c0      	blx	r8

                    data += 16;
    b87a:	3710      	adds	r7, #16
            while (len > 16) {      /* not last block */
    b87c:	454f      	cmp	r7, r9
    b87e:	d1e0      	bne.n	b842 <AES_CMAC_Update+0x4a>
    b880:	0037      	movs	r7, r6
    b882:	230f      	movs	r3, #15
    b884:	9a02      	ldr	r2, [sp, #8]
    b886:	439a      	bics	r2, r3
    b888:	0013      	movs	r3, r2
    b88a:	3310      	adds	r3, #16
    b88c:	46d4      	mov	ip, sl
    b88e:	449c      	add	ip, r3
    b890:	46e2      	mov	sl, ip
    b892:	465a      	mov	r2, fp
    b894:	3a10      	subs	r2, #16
    b896:	9b03      	ldr	r3, [sp, #12]
    b898:	011b      	lsls	r3, r3, #4
    b89a:	1ad3      	subs	r3, r2, r3
    b89c:	469b      	mov	fp, r3
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
    b89e:	465b      	mov	r3, fp
    b8a0:	466a      	mov	r2, sp
    b8a2:	8093      	strh	r3, [r2, #4]
    b8a4:	8892      	ldrh	r2, [r2, #4]
    b8a6:	1cb8      	adds	r0, r7, #2
    b8a8:	30ff      	adds	r0, #255	; 0xff
    b8aa:	4651      	mov	r1, sl
    b8ac:	4b1c      	ldr	r3, [pc, #112]	; (b920 <AES_CMAC_Update+0x128>)
    b8ae:	4798      	blx	r3
            ctx->M_n = len;
    b8b0:	238a      	movs	r3, #138	; 0x8a
    b8b2:	005b      	lsls	r3, r3, #1
    b8b4:	465a      	mov	r2, fp
    b8b6:	50fa      	str	r2, [r7, r3]
}
    b8b8:	b009      	add	sp, #36	; 0x24
    b8ba:	bc3c      	pop	{r2, r3, r4, r5}
    b8bc:	4690      	mov	r8, r2
    b8be:	4699      	mov	r9, r3
    b8c0:	46a2      	mov	sl, r4
    b8c2:	46ab      	mov	fp, r5
    b8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  mlen = MIN(16 - ctx->M_n, len);
    b8c6:	2410      	movs	r4, #16
    b8c8:	1a24      	subs	r4, r4, r0
    b8ca:	4294      	cmp	r4, r2
    b8cc:	d900      	bls.n	b8d0 <AES_CMAC_Update+0xd8>
    b8ce:	0014      	movs	r4, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
    b8d0:	b2a2      	uxth	r2, r4
    b8d2:	1cbb      	adds	r3, r7, #2
    b8d4:	33ff      	adds	r3, #255	; 0xff
    b8d6:	1818      	adds	r0, r3, r0
    b8d8:	4651      	mov	r1, sl
    b8da:	4b11      	ldr	r3, [pc, #68]	; (b920 <AES_CMAC_Update+0x128>)
    b8dc:	4798      	blx	r3
                    ctx->M_n += mlen;
    b8de:	228a      	movs	r2, #138	; 0x8a
    b8e0:	0052      	lsls	r2, r2, #1
    b8e2:	58bb      	ldr	r3, [r7, r2]
    b8e4:	18e3      	adds	r3, r4, r3
    b8e6:	50bb      	str	r3, [r7, r2]
                    if (ctx->M_n < 16 || len == mlen)
    b8e8:	2b0f      	cmp	r3, #15
    b8ea:	d9e5      	bls.n	b8b8 <AES_CMAC_Update+0xc0>
    b8ec:	45a3      	cmp	fp, r4
    b8ee:	d0e3      	beq.n	b8b8 <AES_CMAC_Update+0xc0>
    b8f0:	003b      	movs	r3, r7
    b8f2:	33f1      	adds	r3, #241	; 0xf1
    b8f4:	1cb8      	adds	r0, r7, #2
    b8f6:	30ff      	adds	r0, #255	; 0xff
                   XOR(ctx->M_last, ctx->X);
    b8f8:	781a      	ldrb	r2, [r3, #0]
    b8fa:	7c19      	ldrb	r1, [r3, #16]
    b8fc:	404a      	eors	r2, r1
    b8fe:	701a      	strb	r2, [r3, #0]
    b900:	3301      	adds	r3, #1
    b902:	4283      	cmp	r3, r0
    b904:	d1f8      	bne.n	b8f8 <AES_CMAC_Update+0x100>
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
    b906:	003a      	movs	r2, r7
    b908:	0038      	movs	r0, r7
    b90a:	30f1      	adds	r0, #241	; 0xf1
    b90c:	0001      	movs	r1, r0
    b90e:	4b05      	ldr	r3, [pc, #20]	; (b924 <AES_CMAC_Update+0x12c>)
    b910:	4798      	blx	r3
                    data += mlen;
    b912:	46d4      	mov	ip, sl
    b914:	44a4      	add	ip, r4
    b916:	46e2      	mov	sl, ip
                    len -= mlen;
    b918:	465b      	mov	r3, fp
    b91a:	1b1b      	subs	r3, r3, r4
    b91c:	469b      	mov	fp, r3
    b91e:	e77a      	b.n	b816 <AES_CMAC_Update+0x1e>
    b920:	00001e91 	.word	0x00001e91
    b924:	0000b4f5 	.word	0x0000b4f5

0000b928 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
    b928:	b570      	push	{r4, r5, r6, lr}
    b92a:	b088      	sub	sp, #32
    b92c:	0004      	movs	r4, r0
    b92e:	000d      	movs	r5, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
    b930:	ae04      	add	r6, sp, #16
    b932:	2210      	movs	r2, #16
    b934:	2100      	movs	r1, #0
    b936:	0030      	movs	r0, r6
    b938:	4b55      	ldr	r3, [pc, #340]	; (ba90 <AES_CMAC_Final+0x168>)
    b93a:	4798      	blx	r3

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
    b93c:	002a      	movs	r2, r5
    b93e:	0031      	movs	r1, r6
    b940:	0030      	movs	r0, r6
    b942:	4b54      	ldr	r3, [pc, #336]	; (ba94 <AES_CMAC_Final+0x16c>)
    b944:	4798      	blx	r3

            if (K[0] & 0x80) {
    b946:	7833      	ldrb	r3, [r6, #0]
    b948:	2b7f      	cmp	r3, #127	; 0x7f
    b94a:	d900      	bls.n	b94e <AES_CMAC_Final+0x26>
    b94c:	e06b      	b.n	ba26 <AES_CMAC_Final+0xfe>
    b94e:	ab04      	add	r3, sp, #16
    b950:	201f      	movs	r0, #31
    b952:	4468      	add	r0, sp
                    LSHIFT(K, K);
                   K[15] ^= 0x87;
            } else
                    LSHIFT(K, K);
    b954:	781a      	ldrb	r2, [r3, #0]
    b956:	0052      	lsls	r2, r2, #1
    b958:	7859      	ldrb	r1, [r3, #1]
    b95a:	09c9      	lsrs	r1, r1, #7
    b95c:	430a      	orrs	r2, r1
    b95e:	701a      	strb	r2, [r3, #0]
    b960:	3301      	adds	r3, #1
    b962:	4283      	cmp	r3, r0
    b964:	d1f6      	bne.n	b954 <AES_CMAC_Final+0x2c>
    b966:	aa04      	add	r2, sp, #16
    b968:	7bd3      	ldrb	r3, [r2, #15]
    b96a:	005b      	lsls	r3, r3, #1
    b96c:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
    b96e:	238a      	movs	r3, #138	; 0x8a
    b970:	005b      	lsls	r3, r3, #1
    b972:	58eb      	ldr	r3, [r5, r3]
    b974:	2b10      	cmp	r3, #16
    b976:	d06a      	beq.n	ba4e <AES_CMAC_Final+0x126>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
    b978:	ab04      	add	r3, sp, #16
    b97a:	781b      	ldrb	r3, [r3, #0]
    b97c:	2b7f      	cmp	r3, #127	; 0x7f
    b97e:	d900      	bls.n	b982 <AES_CMAC_Final+0x5a>
    b980:	e072      	b.n	ba68 <AES_CMAC_Final+0x140>
    b982:	ab04      	add	r3, sp, #16
    b984:	201f      	movs	r0, #31
    b986:	4468      	add	r0, sp
                          LSHIFT(K, K);
                          K[15] ^= 0x87;
                  } else
                           LSHIFT(K, K);
    b988:	781a      	ldrb	r2, [r3, #0]
    b98a:	0052      	lsls	r2, r2, #1
    b98c:	7859      	ldrb	r1, [r3, #1]
    b98e:	09c9      	lsrs	r1, r1, #7
    b990:	430a      	orrs	r2, r1
    b992:	701a      	strb	r2, [r3, #0]
    b994:	3301      	adds	r3, #1
    b996:	4283      	cmp	r3, r0
    b998:	d1f6      	bne.n	b988 <AES_CMAC_Final+0x60>
    b99a:	aa04      	add	r2, sp, #16
    b99c:	7bd3      	ldrb	r3, [r2, #15]
    b99e:	005b      	lsls	r3, r3, #1
    b9a0:	73d3      	strb	r3, [r2, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
    b9a2:	218a      	movs	r1, #138	; 0x8a
    b9a4:	0049      	lsls	r1, r1, #1
    b9a6:	586b      	ldr	r3, [r5, r1]
    b9a8:	18ea      	adds	r2, r5, r3
    b9aa:	3202      	adds	r2, #2
    b9ac:	32ff      	adds	r2, #255	; 0xff
    b9ae:	2080      	movs	r0, #128	; 0x80
    b9b0:	7010      	strb	r0, [r2, #0]
                   while (++ctx->M_n < 16)
    b9b2:	3301      	adds	r3, #1
    b9b4:	506b      	str	r3, [r5, r1]
    b9b6:	2b0f      	cmp	r3, #15
    b9b8:	d80c      	bhi.n	b9d4 <AES_CMAC_Final+0xac>
    b9ba:	001a      	movs	r2, r3
                         ctx->M_last[ctx->M_n] = 0;
    b9bc:	2100      	movs	r1, #0
    b9be:	18eb      	adds	r3, r5, r3
    b9c0:	3302      	adds	r3, #2
    b9c2:	33ff      	adds	r3, #255	; 0xff
    b9c4:	7019      	strb	r1, [r3, #0]
                   while (++ctx->M_n < 16)
    b9c6:	1c53      	adds	r3, r2, #1
    b9c8:	001a      	movs	r2, r3
    b9ca:	2b0f      	cmp	r3, #15
    b9cc:	d9f7      	bls.n	b9be <AES_CMAC_Final+0x96>
    b9ce:	228a      	movs	r2, #138	; 0x8a
    b9d0:	0052      	lsls	r2, r2, #1
    b9d2:	50ab      	str	r3, [r5, r2]
    b9d4:	1caa      	adds	r2, r5, #2
    b9d6:	32ff      	adds	r2, #255	; 0xff
    b9d8:	2300      	movs	r3, #0
   
                  XOR(K, ctx->M_last);
    b9da:	ae04      	add	r6, sp, #16
    b9dc:	7811      	ldrb	r1, [r2, #0]
    b9de:	5d98      	ldrb	r0, [r3, r6]
    b9e0:	4041      	eors	r1, r0
    b9e2:	7011      	strb	r1, [r2, #0]
    b9e4:	3301      	adds	r3, #1
    b9e6:	3201      	adds	r2, #1
    b9e8:	2b10      	cmp	r3, #16
    b9ea:	d1f7      	bne.n	b9dc <AES_CMAC_Final+0xb4>
    b9ec:	002b      	movs	r3, r5
    b9ee:	33f1      	adds	r3, #241	; 0xf1
    b9f0:	1ca8      	adds	r0, r5, #2
    b9f2:	30ff      	adds	r0, #255	; 0xff


           }
           XOR(ctx->M_last, ctx->X);
    b9f4:	781a      	ldrb	r2, [r3, #0]
    b9f6:	7c19      	ldrb	r1, [r3, #16]
    b9f8:	404a      	eors	r2, r1
    b9fa:	701a      	strb	r2, [r3, #0]
    b9fc:	3301      	adds	r3, #1
    b9fe:	4298      	cmp	r0, r3
    ba00:	d1f8      	bne.n	b9f4 <AES_CMAC_Final+0xcc>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
    ba02:	0029      	movs	r1, r5
    ba04:	31f1      	adds	r1, #241	; 0xf1
    ba06:	2210      	movs	r2, #16
    ba08:	4668      	mov	r0, sp
    ba0a:	4b23      	ldr	r3, [pc, #140]	; (ba98 <AES_CMAC_Final+0x170>)
    ba0c:	4798      	blx	r3
       aes_encrypt(in, digest, &ctx->rijndael);
    ba0e:	002a      	movs	r2, r5
    ba10:	0021      	movs	r1, r4
    ba12:	4668      	mov	r0, sp
    ba14:	4b1f      	ldr	r3, [pc, #124]	; (ba94 <AES_CMAC_Final+0x16c>)
    ba16:	4798      	blx	r3
           memset1(K, 0, sizeof K);
    ba18:	2210      	movs	r2, #16
    ba1a:	2100      	movs	r1, #0
    ba1c:	a804      	add	r0, sp, #16
    ba1e:	4b1c      	ldr	r3, [pc, #112]	; (ba90 <AES_CMAC_Final+0x168>)
    ba20:	4798      	blx	r3

}
    ba22:	b008      	add	sp, #32
    ba24:	bd70      	pop	{r4, r5, r6, pc}
    ba26:	ab04      	add	r3, sp, #16
    ba28:	201f      	movs	r0, #31
    ba2a:	4468      	add	r0, sp
                    LSHIFT(K, K);
    ba2c:	781a      	ldrb	r2, [r3, #0]
    ba2e:	0052      	lsls	r2, r2, #1
    ba30:	7859      	ldrb	r1, [r3, #1]
    ba32:	09c9      	lsrs	r1, r1, #7
    ba34:	430a      	orrs	r2, r1
    ba36:	701a      	strb	r2, [r3, #0]
    ba38:	3301      	adds	r3, #1
    ba3a:	4283      	cmp	r3, r0
    ba3c:	d1f6      	bne.n	ba2c <AES_CMAC_Final+0x104>
                   K[15] ^= 0x87;
    ba3e:	a904      	add	r1, sp, #16
                    LSHIFT(K, K);
    ba40:	7bca      	ldrb	r2, [r1, #15]
    ba42:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
    ba44:	2379      	movs	r3, #121	; 0x79
    ba46:	425b      	negs	r3, r3
    ba48:	4053      	eors	r3, r2
    ba4a:	73cb      	strb	r3, [r1, #15]
    ba4c:	e78f      	b.n	b96e <AES_CMAC_Final+0x46>
    ba4e:	1caa      	adds	r2, r5, #2
    ba50:	32ff      	adds	r2, #255	; 0xff
            if (ctx->M_n == 16) {
    ba52:	2300      	movs	r3, #0
                    XOR(K, ctx->M_last);
    ba54:	ae04      	add	r6, sp, #16
    ba56:	7811      	ldrb	r1, [r2, #0]
    ba58:	5d98      	ldrb	r0, [r3, r6]
    ba5a:	4041      	eors	r1, r0
    ba5c:	7011      	strb	r1, [r2, #0]
    ba5e:	3301      	adds	r3, #1
    ba60:	3201      	adds	r2, #1
    ba62:	2b10      	cmp	r3, #16
    ba64:	d1f7      	bne.n	ba56 <AES_CMAC_Final+0x12e>
    ba66:	e7c1      	b.n	b9ec <AES_CMAC_Final+0xc4>
    ba68:	ab04      	add	r3, sp, #16
    ba6a:	201f      	movs	r0, #31
    ba6c:	4468      	add	r0, sp
                          LSHIFT(K, K);
    ba6e:	781a      	ldrb	r2, [r3, #0]
    ba70:	0052      	lsls	r2, r2, #1
    ba72:	7859      	ldrb	r1, [r3, #1]
    ba74:	09c9      	lsrs	r1, r1, #7
    ba76:	430a      	orrs	r2, r1
    ba78:	701a      	strb	r2, [r3, #0]
    ba7a:	3301      	adds	r3, #1
    ba7c:	4298      	cmp	r0, r3
    ba7e:	d1f6      	bne.n	ba6e <AES_CMAC_Final+0x146>
                          K[15] ^= 0x87;
    ba80:	a904      	add	r1, sp, #16
                          LSHIFT(K, K);
    ba82:	7bca      	ldrb	r2, [r1, #15]
    ba84:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
    ba86:	2379      	movs	r3, #121	; 0x79
    ba88:	425b      	negs	r3, r3
    ba8a:	4053      	eors	r3, r2
    ba8c:	73cb      	strb	r3, [r1, #15]
    ba8e:	e788      	b.n	b9a2 <AES_CMAC_Final+0x7a>
    ba90:	00001ec7 	.word	0x00001ec7
    ba94:	0000b4f5 	.word	0x0000b4f5
    ba98:	00001e91 	.word	0x00001e91

0000ba9c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
    ba9c:	4770      	bx	lr
	...

0000baa0 <GetKeyByID>:
{
    baa0:	b530      	push	{r4, r5, lr}
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
    baa2:	2383      	movs	r3, #131	; 0x83
    baa4:	009b      	lsls	r3, r3, #2
    baa6:	4a0f      	ldr	r2, [pc, #60]	; (bae4 <GetKeyByID+0x44>)
    baa8:	5cd3      	ldrb	r3, [r2, r3]
    baaa:	4283      	cmp	r3, r0
    baac:	d00d      	beq.n	baca <GetKeyByID+0x2a>
    baae:	4b0e      	ldr	r3, [pc, #56]	; (bae8 <GetKeyByID+0x48>)
    bab0:	469c      	mov	ip, r3
    bab2:	4462      	add	r2, ip
    bab4:	2301      	movs	r3, #1
    bab6:	001d      	movs	r5, r3
    bab8:	7814      	ldrb	r4, [r2, #0]
    baba:	4284      	cmp	r4, r0
    babc:	d006      	beq.n	bacc <GetKeyByID+0x2c>
    babe:	3301      	adds	r3, #1
    bac0:	3211      	adds	r2, #17
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    bac2:	2b16      	cmp	r3, #22
    bac4:	d1f7      	bne.n	bab6 <GetKeyByID+0x16>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    bac6:	2003      	movs	r0, #3
    bac8:	e00a      	b.n	bae0 <GetKeyByID+0x40>
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
    baca:	2500      	movs	r5, #0
            *keyItem = &( SeNvmCtx.KeyList[i] );
    bacc:	012b      	lsls	r3, r5, #4
    bace:	195d      	adds	r5, r3, r5
    bad0:	2383      	movs	r3, #131	; 0x83
    bad2:	009b      	lsls	r3, r3, #2
    bad4:	469c      	mov	ip, r3
    bad6:	4465      	add	r5, ip
    bad8:	4b02      	ldr	r3, [pc, #8]	; (bae4 <GetKeyByID+0x44>)
    bada:	195d      	adds	r5, r3, r5
    badc:	600d      	str	r5, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
    bade:	2000      	movs	r0, #0
}
    bae0:	bd30      	pop	{r4, r5, pc}
    bae2:	46c0      	nop			; (mov r8, r8)
    bae4:	20001774 	.word	0x20001774
    bae8:	0000021d 	.word	0x0000021d

0000baec <ComputeCmac>:
{
    baec:	b5f0      	push	{r4, r5, r6, r7, lr}
    baee:	b089      	sub	sp, #36	; 0x24
    baf0:	0005      	movs	r5, r0
    baf2:	9101      	str	r1, [sp, #4]
    baf4:	0016      	movs	r6, r2
    baf6:	001f      	movs	r7, r3
    if( buffer == NULL || cmac == NULL )
    baf8:	2800      	cmp	r0, #0
    bafa:	d029      	beq.n	bb50 <ComputeCmac+0x64>
        return SECURE_ELEMENT_ERROR_NPE;
    bafc:	2402      	movs	r4, #2
    if( buffer == NULL || cmac == NULL )
    bafe:	2b00      	cmp	r3, #0
    bb00:	d027      	beq.n	bb52 <ComputeCmac+0x66>
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
    bb02:	4815      	ldr	r0, [pc, #84]	; (bb58 <ComputeCmac+0x6c>)
    bb04:	30f4      	adds	r0, #244	; 0xf4
    bb06:	4b15      	ldr	r3, [pc, #84]	; (bb5c <ComputeCmac+0x70>)
    bb08:	4798      	blx	r3
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
    bb0a:	a903      	add	r1, sp, #12
    bb0c:	0030      	movs	r0, r6
    bb0e:	4b14      	ldr	r3, [pc, #80]	; (bb60 <ComputeCmac+0x74>)
    bb10:	4798      	blx	r3
    bb12:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
    bb14:	d11d      	bne.n	bb52 <ComputeCmac+0x66>
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
    bb16:	9b03      	ldr	r3, [sp, #12]
    bb18:	1c59      	adds	r1, r3, #1
    bb1a:	4e0f      	ldr	r6, [pc, #60]	; (bb58 <ComputeCmac+0x6c>)
    bb1c:	36f4      	adds	r6, #244	; 0xf4
    bb1e:	0030      	movs	r0, r6
    bb20:	4b10      	ldr	r3, [pc, #64]	; (bb64 <ComputeCmac+0x78>)
    bb22:	4798      	blx	r3
        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
    bb24:	9a01      	ldr	r2, [sp, #4]
    bb26:	0029      	movs	r1, r5
    bb28:	0030      	movs	r0, r6
    bb2a:	4b0f      	ldr	r3, [pc, #60]	; (bb68 <ComputeCmac+0x7c>)
    bb2c:	4798      	blx	r3
        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
    bb2e:	ad04      	add	r5, sp, #16
    bb30:	0031      	movs	r1, r6
    bb32:	0028      	movs	r0, r5
    bb34:	4b0d      	ldr	r3, [pc, #52]	; (bb6c <ComputeCmac+0x80>)
    bb36:	4798      	blx	r3
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
    bb38:	78eb      	ldrb	r3, [r5, #3]
    bb3a:	061b      	lsls	r3, r3, #24
    bb3c:	78aa      	ldrb	r2, [r5, #2]
    bb3e:	0412      	lsls	r2, r2, #16
    bb40:	4313      	orrs	r3, r2
    bb42:	782a      	ldrb	r2, [r5, #0]
    bb44:	4313      	orrs	r3, r2
    bb46:	786a      	ldrb	r2, [r5, #1]
    bb48:	0212      	lsls	r2, r2, #8
    bb4a:	4313      	orrs	r3, r2
    bb4c:	603b      	str	r3, [r7, #0]
    bb4e:	e000      	b.n	bb52 <ComputeCmac+0x66>
        return SECURE_ELEMENT_ERROR_NPE;
    bb50:	2402      	movs	r4, #2
}
    bb52:	0020      	movs	r0, r4
    bb54:	b009      	add	sp, #36	; 0x24
    bb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb58:	20001774 	.word	0x20001774
    bb5c:	0000b7c1 	.word	0x0000b7c1
    bb60:	0000baa1 	.word	0x0000baa1
    bb64:	0000b7e5 	.word	0x0000b7e5
    bb68:	0000b7f9 	.word	0x0000b7f9
    bb6c:	0000b929 	.word	0x0000b929

0000bb70 <SecureElementInit>:

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
    // Initialize with defaults
    uint8_t itr = 0;
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
    bb70:	4b26      	ldr	r3, [pc, #152]	; (bc0c <SecureElementInit+0x9c>)
    bb72:	2100      	movs	r1, #0
    bb74:	2283      	movs	r2, #131	; 0x83
    bb76:	0092      	lsls	r2, r2, #2
    bb78:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
    bb7a:	3101      	adds	r1, #1
    bb7c:	4a24      	ldr	r2, [pc, #144]	; (bc10 <SecureElementInit+0xa0>)
    bb7e:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
    bb80:	3101      	adds	r1, #1
    bb82:	4a24      	ldr	r2, [pc, #144]	; (bc14 <SecureElementInit+0xa4>)
    bb84:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
    bb86:	3101      	adds	r1, #1
    bb88:	4a23      	ldr	r2, [pc, #140]	; (bc18 <SecureElementInit+0xa8>)
    bb8a:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
    bb8c:	3101      	adds	r1, #1
    bb8e:	3211      	adds	r2, #17
    bb90:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
    bb92:	3101      	adds	r1, #1
    bb94:	4a21      	ldr	r2, [pc, #132]	; (bc1c <SecureElementInit+0xac>)
    bb96:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
    bb98:	3101      	adds	r1, #1
    bb9a:	4a21      	ldr	r2, [pc, #132]	; (bc20 <SecureElementInit+0xb0>)
    bb9c:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
    bb9e:	3101      	adds	r1, #1
    bba0:	4a20      	ldr	r2, [pc, #128]	; (bc24 <SecureElementInit+0xb4>)
    bba2:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
    bba4:	3178      	adds	r1, #120	; 0x78
    bba6:	3211      	adds	r2, #17
    bba8:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
    bbaa:	3101      	adds	r1, #1
    bbac:	4a1e      	ldr	r2, [pc, #120]	; (bc28 <SecureElementInit+0xb8>)
    bbae:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
    bbb0:	3101      	adds	r1, #1
    bbb2:	4a1e      	ldr	r2, [pc, #120]	; (bc2c <SecureElementInit+0xbc>)
    bbb4:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
    bbb6:	3101      	adds	r1, #1
    bbb8:	4a1d      	ldr	r2, [pc, #116]	; (bc30 <SecureElementInit+0xc0>)
    bbba:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
    bbbc:	3101      	adds	r1, #1
    bbbe:	3211      	adds	r2, #17
    bbc0:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
    bbc2:	3101      	adds	r1, #1
    bbc4:	4a1b      	ldr	r2, [pc, #108]	; (bc34 <SecureElementInit+0xc4>)
    bbc6:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
    bbc8:	3101      	adds	r1, #1
    bbca:	4a1b      	ldr	r2, [pc, #108]	; (bc38 <SecureElementInit+0xc8>)
    bbcc:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
    bbce:	3101      	adds	r1, #1
    bbd0:	4a1a      	ldr	r2, [pc, #104]	; (bc3c <SecureElementInit+0xcc>)
    bbd2:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
    bbd4:	3101      	adds	r1, #1
    bbd6:	3211      	adds	r2, #17
    bbd8:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
    bbda:	3101      	adds	r1, #1
    bbdc:	4a18      	ldr	r2, [pc, #96]	; (bc40 <SecureElementInit+0xd0>)
    bbde:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
    bbe0:	3101      	adds	r1, #1
    bbe2:	4a18      	ldr	r2, [pc, #96]	; (bc44 <SecureElementInit+0xd4>)
    bbe4:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
    bbe6:	3101      	adds	r1, #1
    bbe8:	4a17      	ldr	r2, [pc, #92]	; (bc48 <SecureElementInit+0xd8>)
    bbea:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
    bbec:	3101      	adds	r1, #1
    bbee:	3211      	adds	r2, #17
    bbf0:	5499      	strb	r1, [r3, r2]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
    bbf2:	3101      	adds	r1, #1
    bbf4:	4a15      	ldr	r2, [pc, #84]	; (bc4c <SecureElementInit+0xdc>)
    bbf6:	5499      	strb	r1, [r3, r2]

    // Assign callback
    if( seNvmCtxChanged != 0 )
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d003      	beq.n	bc04 <SecureElementInit+0x94>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
    bbfc:	4b14      	ldr	r3, [pc, #80]	; (bc50 <SecureElementInit+0xe0>)
    bbfe:	6058      	str	r0, [r3, #4]
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
    bc00:	2000      	movs	r0, #0
    bc02:	4770      	bx	lr
        SeNvmCtxChanged = DummyCB;
    bc04:	4a13      	ldr	r2, [pc, #76]	; (bc54 <SecureElementInit+0xe4>)
    bc06:	4b12      	ldr	r3, [pc, #72]	; (bc50 <SecureElementInit+0xe0>)
    bc08:	605a      	str	r2, [r3, #4]
    bc0a:	e7f9      	b.n	bc00 <SecureElementInit+0x90>
    bc0c:	20001774 	.word	0x20001774
    bc10:	0000021d 	.word	0x0000021d
    bc14:	0000022e 	.word	0x0000022e
    bc18:	0000023f 	.word	0x0000023f
    bc1c:	00000261 	.word	0x00000261
    bc20:	00000272 	.word	0x00000272
    bc24:	00000283 	.word	0x00000283
    bc28:	000002a5 	.word	0x000002a5
    bc2c:	000002b6 	.word	0x000002b6
    bc30:	000002c7 	.word	0x000002c7
    bc34:	000002e9 	.word	0x000002e9
    bc38:	000002fa 	.word	0x000002fa
    bc3c:	0000030b 	.word	0x0000030b
    bc40:	0000032d 	.word	0x0000032d
    bc44:	0000033e 	.word	0x0000033e
    bc48:	0000034f 	.word	0x0000034f
    bc4c:	00000371 	.word	0x00000371
    bc50:	20001af4 	.word	0x20001af4
    bc54:	0000ba9d 	.word	0x0000ba9d

0000bc58 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
    bc58:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
        return SECURE_ELEMENT_SUCCESS;
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    bc5a:	2302      	movs	r3, #2
    if( seNvmCtx != 0 )
    bc5c:	2800      	cmp	r0, #0
    bc5e:	d006      	beq.n	bc6e <SecureElementRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
    bc60:	22e1      	movs	r2, #225	; 0xe1
    bc62:	0092      	lsls	r2, r2, #2
    bc64:	0001      	movs	r1, r0
    bc66:	4803      	ldr	r0, [pc, #12]	; (bc74 <SecureElementRestoreNvmCtx+0x1c>)
    bc68:	4b03      	ldr	r3, [pc, #12]	; (bc78 <SecureElementRestoreNvmCtx+0x20>)
    bc6a:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
    bc6c:	2300      	movs	r3, #0
    }
}
    bc6e:	0018      	movs	r0, r3
    bc70:	bd10      	pop	{r4, pc}
    bc72:	46c0      	nop			; (mov r8, r8)
    bc74:	20001774 	.word	0x20001774
    bc78:	00001e91 	.word	0x00001e91

0000bc7c <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
    bc7c:	23e1      	movs	r3, #225	; 0xe1
    bc7e:	009b      	lsls	r3, r3, #2
    bc80:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
    bc82:	4801      	ldr	r0, [pc, #4]	; (bc88 <SecureElementGetNvmCtx+0xc>)
    bc84:	4770      	bx	lr
    bc86:	46c0      	nop			; (mov r8, r8)
    bc88:	20001774 	.word	0x20001774

0000bc8c <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
    bc8c:	b510      	push	{r4, lr}
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    bc8e:	2403      	movs	r4, #3
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
    bc90:	2a7e      	cmp	r2, #126	; 0x7e
    bc92:	d901      	bls.n	bc98 <SecureElementComputeAesCmac+0xc>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
}
    bc94:	0020      	movs	r0, r4
    bc96:	bd10      	pop	{r4, pc}
    return ComputeCmac( buffer, size, keyID, cmac );
    bc98:	4c01      	ldr	r4, [pc, #4]	; (bca0 <SecureElementComputeAesCmac+0x14>)
    bc9a:	47a0      	blx	r4
    bc9c:	0004      	movs	r4, r0
    bc9e:	e7f9      	b.n	bc94 <SecureElementComputeAesCmac+0x8>
    bca0:	0000baed 	.word	0x0000baed

0000bca4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
    bca4:	b530      	push	{r4, r5, lr}
    bca6:	b083      	sub	sp, #12
    bca8:	0014      	movs	r4, r2
    bcaa:	001a      	movs	r2, r3
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
    bcac:	2302      	movs	r3, #2
    if( buffer == NULL )
    bcae:	2800      	cmp	r0, #0
    bcb0:	d00b      	beq.n	bcca <SecureElementVerifyAesCmac+0x26>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
    bcb2:	2300      	movs	r3, #0
    bcb4:	9301      	str	r3, [sp, #4]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
    bcb6:	ab01      	add	r3, sp, #4
    bcb8:	4d05      	ldr	r5, [pc, #20]	; (bcd0 <SecureElementVerifyAesCmac+0x2c>)
    bcba:	47a8      	blx	r5
    bcbc:	1e03      	subs	r3, r0, #0
    if( retval != SECURE_ELEMENT_SUCCESS )
    bcbe:	d104      	bne.n	bcca <SecureElementVerifyAesCmac+0x26>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
    bcc0:	9b01      	ldr	r3, [sp, #4]
    bcc2:	1b1b      	subs	r3, r3, r4
    bcc4:	1e58      	subs	r0, r3, #1
    bcc6:	4183      	sbcs	r3, r0
        return SECURE_ELEMENT_ERROR_NPE;
    bcc8:	b2db      	uxtb	r3, r3
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
    bcca:	0018      	movs	r0, r3
    bccc:	b003      	add	sp, #12
    bcce:	bd30      	pop	{r4, r5, pc}
    bcd0:	0000baed 	.word	0x0000baed

0000bcd4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
    bcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcd6:	46c6      	mov	lr, r8
    bcd8:	b500      	push	{lr}
    bcda:	b084      	sub	sp, #16
    bcdc:	0007      	movs	r7, r0
    bcde:	000c      	movs	r4, r1
    bce0:	0016      	movs	r6, r2
    bce2:	001d      	movs	r5, r3
    if( buffer == NULL || encBuffer == NULL )
    bce4:	2800      	cmp	r0, #0
    bce6:	d02c      	beq.n	bd42 <SecureElementAesEncrypt+0x6e>
    bce8:	2b00      	cmp	r3, #0
    bcea:	d02d      	beq.n	bd48 <SecureElementAesEncrypt+0x74>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    bcec:	2305      	movs	r3, #5
    bcee:	9301      	str	r3, [sp, #4]
    if( ( size % 16 ) != 0 )
    bcf0:	070b      	lsls	r3, r1, #28
    bcf2:	d004      	beq.n	bcfe <SecureElementAesEncrypt+0x2a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
    bcf4:	9801      	ldr	r0, [sp, #4]
    bcf6:	b004      	add	sp, #16
    bcf8:	bc04      	pop	{r2}
    bcfa:	4690      	mov	r8, r2
    bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
    bcfe:	22f0      	movs	r2, #240	; 0xf0
    bd00:	2100      	movs	r1, #0
    bd02:	4813      	ldr	r0, [pc, #76]	; (bd50 <SecureElementAesEncrypt+0x7c>)
    bd04:	4b13      	ldr	r3, [pc, #76]	; (bd54 <SecureElementAesEncrypt+0x80>)
    bd06:	4798      	blx	r3
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
    bd08:	a903      	add	r1, sp, #12
    bd0a:	0030      	movs	r0, r6
    bd0c:	4b12      	ldr	r3, [pc, #72]	; (bd58 <SecureElementAesEncrypt+0x84>)
    bd0e:	4798      	blx	r3
    bd10:	9001      	str	r0, [sp, #4]
    if( retval == SECURE_ELEMENT_SUCCESS )
    bd12:	2800      	cmp	r0, #0
    bd14:	d1ee      	bne.n	bcf4 <SecureElementAesEncrypt+0x20>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
    bd16:	9b03      	ldr	r3, [sp, #12]
    bd18:	1c58      	adds	r0, r3, #1
    bd1a:	4a0d      	ldr	r2, [pc, #52]	; (bd50 <SecureElementAesEncrypt+0x7c>)
    bd1c:	2110      	movs	r1, #16
    bd1e:	4b0f      	ldr	r3, [pc, #60]	; (bd5c <SecureElementAesEncrypt+0x88>)
    bd20:	4798      	blx	r3
        while( size != 0 )
    bd22:	2c00      	cmp	r4, #0
    bd24:	d0e6      	beq.n	bcf4 <SecureElementAesEncrypt+0x20>
    bd26:	2600      	movs	r6, #0
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
    bd28:	4b0d      	ldr	r3, [pc, #52]	; (bd60 <SecureElementAesEncrypt+0x8c>)
    bd2a:	4698      	mov	r8, r3
    bd2c:	19a9      	adds	r1, r5, r6
    bd2e:	19b8      	adds	r0, r7, r6
    bd30:	4a07      	ldr	r2, [pc, #28]	; (bd50 <SecureElementAesEncrypt+0x7c>)
    bd32:	47c0      	blx	r8
            block = block + 16;
    bd34:	3610      	adds	r6, #16
    bd36:	b2f6      	uxtb	r6, r6
            size = size - 16;
    bd38:	3c10      	subs	r4, #16
    bd3a:	b2a4      	uxth	r4, r4
        while( size != 0 )
    bd3c:	2c00      	cmp	r4, #0
    bd3e:	d1f5      	bne.n	bd2c <SecureElementAesEncrypt+0x58>
    bd40:	e7d8      	b.n	bcf4 <SecureElementAesEncrypt+0x20>
        return SECURE_ELEMENT_ERROR_NPE;
    bd42:	2302      	movs	r3, #2
    bd44:	9301      	str	r3, [sp, #4]
    bd46:	e7d5      	b.n	bcf4 <SecureElementAesEncrypt+0x20>
    bd48:	2302      	movs	r3, #2
    bd4a:	9301      	str	r3, [sp, #4]
    bd4c:	e7d2      	b.n	bcf4 <SecureElementAesEncrypt+0x20>
    bd4e:	46c0      	nop			; (mov r8, r8)
    bd50:	20001774 	.word	0x20001774
    bd54:	00001ec7 	.word	0x00001ec7
    bd58:	0000baa1 	.word	0x0000baa1
    bd5c:	0000b3b1 	.word	0x0000b3b1
    bd60:	0000b4f5 	.word	0x0000b4f5

0000bd64 <SecureElementSetKey>:
{
    bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd66:	b087      	sub	sp, #28
    bd68:	0006      	movs	r6, r0
    bd6a:	9101      	str	r1, [sp, #4]
    if( key == NULL )
    bd6c:	2900      	cmp	r1, #0
    bd6e:	d031      	beq.n	bdd4 <SecureElementSetKey+0x70>
    bd70:	4c19      	ldr	r4, [pc, #100]	; (bdd8 <SecureElementSetKey+0x74>)
    bd72:	2383      	movs	r3, #131	; 0x83
    bd74:	009b      	lsls	r3, r3, #2
    bd76:	469c      	mov	ip, r3
    bd78:	4464      	add	r4, ip
    bd7a:	2500      	movs	r5, #0
    bd7c:	e013      	b.n	bda6 <SecureElementSetKey+0x42>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
    bd7e:	0128      	lsls	r0, r5, #4
    bd80:	1940      	adds	r0, r0, r5
    bd82:	4b16      	ldr	r3, [pc, #88]	; (bddc <SecureElementSetKey+0x78>)
    bd84:	469c      	mov	ip, r3
    bd86:	4460      	add	r0, ip
    bd88:	4b13      	ldr	r3, [pc, #76]	; (bdd8 <SecureElementSetKey+0x74>)
    bd8a:	1818      	adds	r0, r3, r0
    bd8c:	2210      	movs	r2, #16
    bd8e:	9901      	ldr	r1, [sp, #4]
    bd90:	4b13      	ldr	r3, [pc, #76]	; (bde0 <SecureElementSetKey+0x7c>)
    bd92:	4798      	blx	r3
                SeNvmCtxChanged( );
    bd94:	4b13      	ldr	r3, [pc, #76]	; (bde4 <SecureElementSetKey+0x80>)
    bd96:	685b      	ldr	r3, [r3, #4]
    bd98:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
    bd9a:	2000      	movs	r0, #0
    bd9c:	e018      	b.n	bdd0 <SecureElementSetKey+0x6c>
    bd9e:	3501      	adds	r5, #1
    bda0:	3411      	adds	r4, #17
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
    bda2:	2d16      	cmp	r5, #22
    bda4:	d013      	beq.n	bdce <SecureElementSetKey+0x6a>
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
    bda6:	7823      	ldrb	r3, [r4, #0]
    bda8:	42b3      	cmp	r3, r6
    bdaa:	d1f8      	bne.n	bd9e <SecureElementSetKey+0x3a>
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
    bdac:	b25b      	sxtb	r3, r3
    bdae:	2b00      	cmp	r3, #0
    bdb0:	dae5      	bge.n	bd7e <SecureElementSetKey+0x1a>
                uint8_t decryptedKey[16] = { 0 };
    bdb2:	2210      	movs	r2, #16
    bdb4:	2100      	movs	r1, #0
    bdb6:	a802      	add	r0, sp, #8
    bdb8:	4b0b      	ldr	r3, [pc, #44]	; (bde8 <SecureElementSetKey+0x84>)
    bdba:	4798      	blx	r3
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
    bdbc:	ab02      	add	r3, sp, #8
    bdbe:	227f      	movs	r2, #127	; 0x7f
    bdc0:	2110      	movs	r1, #16
    bdc2:	9801      	ldr	r0, [sp, #4]
    bdc4:	4f09      	ldr	r7, [pc, #36]	; (bdec <SecureElementSetKey+0x88>)
    bdc6:	47b8      	blx	r7
                if( retval != SECURE_ELEMENT_SUCCESS )
    bdc8:	2800      	cmp	r0, #0
    bdca:	d0e8      	beq.n	bd9e <SecureElementSetKey+0x3a>
    bdcc:	e000      	b.n	bdd0 <SecureElementSetKey+0x6c>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    bdce:	2003      	movs	r0, #3
}
    bdd0:	b007      	add	sp, #28
    bdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
    bdd4:	2002      	movs	r0, #2
    bdd6:	e7fb      	b.n	bdd0 <SecureElementSetKey+0x6c>
    bdd8:	20001774 	.word	0x20001774
    bddc:	0000020d 	.word	0x0000020d
    bde0:	00001e91 	.word	0x00001e91
    bde4:	20001af4 	.word	0x20001af4
    bde8:	0000ebd9 	.word	0x0000ebd9
    bdec:	0000bcd5 	.word	0x0000bcd5

0000bdf0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
    bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdf2:	b085      	sub	sp, #20
    bdf4:	0007      	movs	r7, r0
    bdf6:	000c      	movs	r4, r1
    bdf8:	0016      	movs	r6, r2
    bdfa:	001d      	movs	r5, r3
    if( input == NULL )
    bdfc:	2900      	cmp	r1, #0
    bdfe:	d02a      	beq.n	be56 <SecureElementDeriveAndStoreKey+0x66>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
    be00:	2210      	movs	r2, #16
    be02:	2100      	movs	r1, #0
    be04:	4668      	mov	r0, sp
    be06:	4b15      	ldr	r3, [pc, #84]	; (be5c <SecureElementDeriveAndStoreKey+0x6c>)
    be08:	4798      	blx	r3

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
    be0a:	2d7f      	cmp	r5, #127	; 0x7f
    be0c:	d00c      	beq.n	be28 <SecureElementDeriveAndStoreKey+0x38>
    {
        return retval;
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
    be0e:	466b      	mov	r3, sp
    be10:	0032      	movs	r2, r6
    be12:	2110      	movs	r1, #16
    be14:	0020      	movs	r0, r4
    be16:	4c12      	ldr	r4, [pc, #72]	; (be60 <SecureElementDeriveAndStoreKey+0x70>)
    be18:	47a0      	blx	r4
    if( retval != SECURE_ELEMENT_SUCCESS )
    be1a:	2800      	cmp	r0, #0
    be1c:	d11c      	bne.n	be58 <SecureElementDeriveAndStoreKey+0x68>
    {
        return retval;
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
    be1e:	4669      	mov	r1, sp
    be20:	0028      	movs	r0, r5
    be22:	4b10      	ldr	r3, [pc, #64]	; (be64 <SecureElementDeriveAndStoreKey+0x74>)
    be24:	4798      	blx	r3
    be26:	e017      	b.n	be58 <SecureElementDeriveAndStoreKey+0x68>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
    be28:	2e00      	cmp	r6, #0
    be2a:	d109      	bne.n	be40 <SecureElementDeriveAndStoreKey+0x50>
    be2c:	023f      	lsls	r7, r7, #8
    be2e:	0e3f      	lsrs	r7, r7, #24
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    be30:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
    be32:	2f00      	cmp	r7, #0
    be34:	d010      	beq.n	be58 <SecureElementDeriveAndStoreKey+0x68>
    nonce |= ( ( uint16_t ) input[1] << 8 );
    be36:	7862      	ldrb	r2, [r4, #1]
    be38:	0212      	lsls	r2, r2, #8
    be3a:	7823      	ldrb	r3, [r4, #0]
    be3c:	4313      	orrs	r3, r2
    be3e:	e006      	b.n	be4e <SecureElementDeriveAndStoreKey+0x5e>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    be40:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
    be42:	2e01      	cmp	r6, #1
    be44:	d008      	beq.n	be58 <SecureElementDeriveAndStoreKey+0x68>
    nonce |= ( ( uint16_t ) input[1] << 8 );
    be46:	7862      	ldrb	r2, [r4, #1]
    be48:	0212      	lsls	r2, r2, #8
    be4a:	7823      	ldrb	r3, [r4, #0]
    be4c:	4313      	orrs	r3, r2
        return retval;
    be4e:	2006      	movs	r0, #6
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
    be50:	2b0f      	cmp	r3, #15
    be52:	d901      	bls.n	be58 <SecureElementDeriveAndStoreKey+0x68>
    be54:	e7db      	b.n	be0e <SecureElementDeriveAndStoreKey+0x1e>
        return SECURE_ELEMENT_ERROR_NPE;
    be56:	2002      	movs	r0, #2
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
    be58:	b005      	add	sp, #20
    be5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be5c:	0000ebd9 	.word	0x0000ebd9
    be60:	0000bcd5 	.word	0x0000bcd5
    be64:	0000bd65 	.word	0x0000bd65

0000be68 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    be68:	b510      	push	{r4, lr}
    DelayMsMcu( ms );
    be6a:	4b01      	ldr	r3, [pc, #4]	; (be70 <DelayMs+0x8>)
    be6c:	4798      	blx	r3
}
    be6e:	bd10      	pop	{r4, pc}
    be70:	00000fdd 	.word	0x00000fdd

0000be74 <GpioInit>:
 * \author    Gregory Cristian ( Semtech )
 */
#include "gpio-board.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
    be74:	b530      	push	{r4, r5, lr}
    be76:	b083      	sub	sp, #12
    be78:	ac06      	add	r4, sp, #24
    be7a:	7824      	ldrb	r4, [r4, #0]
    GpioMcuInit( obj, pin, mode, config, type, value );
    be7c:	9d07      	ldr	r5, [sp, #28]
    be7e:	9501      	str	r5, [sp, #4]
    be80:	9400      	str	r4, [sp, #0]
    be82:	4c02      	ldr	r4, [pc, #8]	; (be8c <GpioInit+0x18>)
    be84:	47a0      	blx	r4
}
    be86:	b003      	add	sp, #12
    be88:	bd30      	pop	{r4, r5, pc}
    be8a:	46c0      	nop			; (mov r8, r8)
    be8c:	00001029 	.word	0x00001029

0000be90 <GpioWrite>:
{
    GpioMcuRemoveInterrupt( obj );
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
    be90:	b510      	push	{r4, lr}
    GpioMcuWrite( obj, value );
    be92:	4b01      	ldr	r3, [pc, #4]	; (be98 <GpioWrite+0x8>)
    be94:	4798      	blx	r3
}
    be96:	bd10      	pop	{r4, pc}
    be98:	00000fed 	.word	0x00000fed

0000be9c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
    be9c:	b082      	sub	sp, #8
    be9e:	b510      	push	{r4, lr}
    bea0:	b082      	sub	sp, #8
    bea2:	9305      	str	r3, [sp, #20]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    bea4:	18c9      	adds	r1, r1, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
    bea6:	ab05      	add	r3, sp, #20
    bea8:	889c      	ldrh	r4, [r3, #4]
    beaa:	18a2      	adds	r2, r4, r2
    beac:	b292      	uxth	r2, r2
    beae:	b213      	sxth	r3, r2
    if( c.SubSeconds >= 1000 )
    beb0:	4c07      	ldr	r4, [pc, #28]	; (bed0 <SysTimeAdd+0x34>)
    beb2:	42a3      	cmp	r3, r4
    beb4:	dd04      	ble.n	bec0 <SysTimeAdd+0x24>
    {
        c.Seconds++;
    beb6:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
    beb8:	4b06      	ldr	r3, [pc, #24]	; (bed4 <SysTimeAdd+0x38>)
    beba:	469c      	mov	ip, r3
    bebc:	4462      	add	r2, ip
    bebe:	b213      	sxth	r3, r2
    }
    return c;
    bec0:	6001      	str	r1, [r0, #0]
    bec2:	8083      	strh	r3, [r0, #4]
}
    bec4:	b002      	add	sp, #8
    bec6:	bc10      	pop	{r4}
    bec8:	bc08      	pop	{r3}
    beca:	b002      	add	sp, #8
    becc:	4718      	bx	r3
    bece:	46c0      	nop			; (mov r8, r8)
    bed0:	000003e7 	.word	0x000003e7
    bed4:	fffffc18 	.word	0xfffffc18

0000bed8 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
    bed8:	b082      	sub	sp, #8
    beda:	b510      	push	{r4, lr}
    bedc:	b082      	sub	sp, #8
    bede:	9305      	str	r3, [sp, #20]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    bee0:	1ac9      	subs	r1, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
    bee2:	ab05      	add	r3, sp, #20
    bee4:	889b      	ldrh	r3, [r3, #4]
    bee6:	1ad2      	subs	r2, r2, r3
    bee8:	b292      	uxth	r2, r2
    beea:	b213      	sxth	r3, r2
    if( c.SubSeconds < 0 )
    beec:	2b00      	cmp	r3, #0
    beee:	db06      	blt.n	befe <SysTimeSub+0x26>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
    }
    return c;
    bef0:	6001      	str	r1, [r0, #0]
    bef2:	8083      	strh	r3, [r0, #4]
}
    bef4:	b002      	add	sp, #8
    bef6:	bc10      	pop	{r4}
    bef8:	bc08      	pop	{r3}
    befa:	b002      	add	sp, #8
    befc:	4718      	bx	r3
        c.Seconds--;
    befe:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
    bf00:	23fa      	movs	r3, #250	; 0xfa
    bf02:	009b      	lsls	r3, r3, #2
    bf04:	469c      	mov	ip, r3
    bf06:	4462      	add	r2, ip
    bf08:	b213      	sxth	r3, r2
    bf0a:	e7f1      	b.n	bef0 <SysTimeSub+0x18>

0000bf0c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
    bf0c:	b510      	push	{r4, lr}
    bf0e:	b084      	sub	sp, #16
    bf10:	9000      	str	r0, [sp, #0]
    bf12:	9101      	str	r1, [sp, #4]
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
    bf14:	ac02      	add	r4, sp, #8
    bf16:	2300      	movs	r3, #0
    bf18:	9302      	str	r3, [sp, #8]
    bf1a:	80a3      	strh	r3, [r4, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
    bf1c:	a803      	add	r0, sp, #12
    bf1e:	4b0c      	ldr	r3, [pc, #48]	; (bf50 <SysTimeSet+0x44>)
    bf20:	4798      	blx	r3
    bf22:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
    bf24:	9b00      	ldr	r3, [sp, #0]
    bf26:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
    bf28:	466b      	mov	r3, sp
    bf2a:	889b      	ldrh	r3, [r3, #4]
    bf2c:	88a1      	ldrh	r1, [r4, #4]
    bf2e:	1a5b      	subs	r3, r3, r1
    bf30:	b29b      	uxth	r3, r3
    bf32:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
    bf34:	2900      	cmp	r1, #0
    bf36:	db03      	blt.n	bf40 <SysTimeSet+0x34>

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
    bf38:	4b06      	ldr	r3, [pc, #24]	; (bf54 <SysTimeSet+0x48>)
    bf3a:	4798      	blx	r3
}
    bf3c:	b004      	add	sp, #16
    bf3e:	bd10      	pop	{r4, pc}
        c.Seconds--;
    bf40:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
    bf42:	22fa      	movs	r2, #250	; 0xfa
    bf44:	0092      	lsls	r2, r2, #2
    bf46:	4694      	mov	ip, r2
    bf48:	4463      	add	r3, ip
    bf4a:	b219      	sxth	r1, r3
    bf4c:	e7f4      	b.n	bf38 <SysTimeSet+0x2c>
    bf4e:	46c0      	nop			; (mov r8, r8)
    bf50:	00002011 	.word	0x00002011
    bf54:	00002031 	.word	0x00002031

0000bf58 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
    bf58:	b530      	push	{r4, r5, lr}
    bf5a:	b085      	sub	sp, #20
    bf5c:	0004      	movs	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
    bf5e:	ad02      	add	r5, sp, #8
    bf60:	2300      	movs	r3, #0
    bf62:	9302      	str	r3, [sp, #8]
    bf64:	80ab      	strh	r3, [r5, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t deltaTime;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
    bf66:	a803      	add	r0, sp, #12
    bf68:	4b0f      	ldr	r3, [pc, #60]	; (bfa8 <SysTimeGet+0x50>)
    bf6a:	4798      	blx	r3
    bf6c:	9002      	str	r0, [sp, #8]

    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
    bf6e:	a901      	add	r1, sp, #4
    bf70:	4668      	mov	r0, sp
    bf72:	4b0e      	ldr	r3, [pc, #56]	; (bfac <SysTimeGet+0x54>)
    bf74:	4798      	blx	r3
    c.Seconds = a.Seconds + b.Seconds;
    bf76:	9b00      	ldr	r3, [sp, #0]
    bf78:	9902      	ldr	r1, [sp, #8]
    bf7a:	468c      	mov	ip, r1
    bf7c:	4463      	add	r3, ip
    bf7e:	001a      	movs	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
    bf80:	466b      	mov	r3, sp
    bf82:	889b      	ldrh	r3, [r3, #4]
    bf84:	88a9      	ldrh	r1, [r5, #4]
    bf86:	185b      	adds	r3, r3, r1
    bf88:	b29b      	uxth	r3, r3
    bf8a:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
    bf8c:	4808      	ldr	r0, [pc, #32]	; (bfb0 <SysTimeGet+0x58>)
    bf8e:	4281      	cmp	r1, r0
    bf90:	dd04      	ble.n	bf9c <SysTimeGet+0x44>
        c.Seconds++;
    bf92:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
    bf94:	4907      	ldr	r1, [pc, #28]	; (bfb4 <SysTimeGet+0x5c>)
    bf96:	468c      	mov	ip, r1
    bf98:	4463      	add	r3, ip
    bf9a:	b219      	sxth	r1, r3

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
    bf9c:	6022      	str	r2, [r4, #0]
    bf9e:	80a1      	strh	r1, [r4, #4]
}
    bfa0:	0020      	movs	r0, r4
    bfa2:	b005      	add	sp, #20
    bfa4:	bd30      	pop	{r4, r5, pc}
    bfa6:	46c0      	nop			; (mov r8, r8)
    bfa8:	00002011 	.word	0x00002011
    bfac:	0000205d 	.word	0x0000205d
    bfb0:	000003e7 	.word	0x000003e7
    bfb4:	fffffc18 	.word	0xfffffc18

0000bfb8 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
    bfb8:	b530      	push	{r4, r5, lr}
    bfba:	b083      	sub	sp, #12
    bfbc:	0005      	movs	r5, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
    bfbe:	466c      	mov	r4, sp
    bfc0:	2300      	movs	r3, #0
    bfc2:	9300      	str	r3, [sp, #0]
    bfc4:	80a3      	strh	r3, [r4, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
    bfc6:	a801      	add	r0, sp, #4
    bfc8:	4b04      	ldr	r3, [pc, #16]	; (bfdc <SysTimeGetMcuTime+0x24>)
    bfca:	4798      	blx	r3
    bfcc:	9000      	str	r0, [sp, #0]

    return calendarTime;
    bfce:	002b      	movs	r3, r5
    bfd0:	cc06      	ldmia	r4!, {r1, r2}
    bfd2:	c306      	stmia	r3!, {r1, r2}
}
    bfd4:	0028      	movs	r0, r5
    bfd6:	b003      	add	sp, #12
    bfd8:	bd30      	pop	{r4, r5, pc}
    bfda:	46c0      	nop			; (mov r8, r8)
    bfdc:	00002011 	.word	0x00002011

0000bfe0 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    bfe0:	b570      	push	{r4, r5, r6, lr}
    bfe2:	0004      	movs	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
    bfe4:	4b09      	ldr	r3, [pc, #36]	; (c00c <TimerSetTimeout+0x2c>)
    bfe6:	4798      	blx	r3
    bfe8:	0005      	movs	r5, r0
    obj->IsRunning = true; 
    bfea:	2301      	movs	r3, #1
    bfec:	7223      	strb	r3, [r4, #8]

    //in case deadline too soon
    if(obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks) )
    bfee:	6826      	ldr	r6, [r4, #0]
    bff0:	4b07      	ldr	r3, [pc, #28]	; (c010 <TimerSetTimeout+0x30>)
    bff2:	4798      	blx	r3
    bff4:	1828      	adds	r0, r5, r0
    bff6:	4286      	cmp	r6, r0
    bff8:	d303      	bcc.n	c002 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
    bffa:	6820      	ldr	r0, [r4, #0]
    bffc:	4b05      	ldr	r3, [pc, #20]	; (c014 <TimerSetTimeout+0x34>)
    bffe:	4798      	blx	r3
}
    c000:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    c002:	4b03      	ldr	r3, [pc, #12]	; (c010 <TimerSetTimeout+0x30>)
    c004:	4798      	blx	r3
    c006:	182d      	adds	r5, r5, r0
    c008:	6025      	str	r5, [r4, #0]
    c00a:	e7f6      	b.n	bffa <TimerSetTimeout+0x1a>
    c00c:	00001f65 	.word	0x00001f65
    c010:	00001ff9 	.word	0x00001ff9
    c014:	00001fe1 	.word	0x00001fe1

0000c018 <TimerInsertNewHeadTimer>:
{
    c018:	b510      	push	{r4, lr}
    TimerEvent_t* cur = TimerListHead;
    c01a:	4b06      	ldr	r3, [pc, #24]	; (c034 <TimerInsertNewHeadTimer+0x1c>)
    c01c:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
    c01e:	2b00      	cmp	r3, #0
    c020:	d001      	beq.n	c026 <TimerInsertNewHeadTimer+0xe>
        cur->IsRunning = false;
    c022:	2200      	movs	r2, #0
    c024:	721a      	strb	r2, [r3, #8]
    obj->Next = cur;
    c026:	6103      	str	r3, [r0, #16]
    TimerListHead = obj;
    c028:	4b02      	ldr	r3, [pc, #8]	; (c034 <TimerInsertNewHeadTimer+0x1c>)
    c02a:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
    c02c:	4b02      	ldr	r3, [pc, #8]	; (c038 <TimerInsertNewHeadTimer+0x20>)
    c02e:	4798      	blx	r3
}
    c030:	bd10      	pop	{r4, pc}
    c032:	46c0      	nop			; (mov r8, r8)
    c034:	20001afc 	.word	0x20001afc
    c038:	0000bfe1 	.word	0x0000bfe1

0000c03c <TimerInit>:
    obj->Timestamp = 0;
    c03c:	2300      	movs	r3, #0
    c03e:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
    c040:	6043      	str	r3, [r0, #4]
    obj->IsRunning = false;
    c042:	7203      	strb	r3, [r0, #8]
    obj->Callback = callback;
    c044:	60c1      	str	r1, [r0, #12]
    obj->Next = NULL;
    c046:	6103      	str	r3, [r0, #16]
}
    c048:	4770      	bx	lr
	...

0000c04c <TimerStart>:
{
    c04c:	b510      	push	{r4, lr}
    c04e:	b082      	sub	sp, #8
    c050:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
    c052:	a801      	add	r0, sp, #4
    c054:	4b25      	ldr	r3, [pc, #148]	; (c0ec <TimerStart+0xa0>)
    c056:	4798      	blx	r3
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    c058:	2c00      	cmp	r4, #0
    c05a:	d00a      	beq.n	c072 <TimerStart+0x26>
    TimerEvent_t* cur = TimerListHead;
    c05c:	4b24      	ldr	r3, [pc, #144]	; (c0f0 <TimerStart+0xa4>)
    c05e:	681b      	ldr	r3, [r3, #0]
    while( cur != NULL )
    c060:	2b00      	cmp	r3, #0
    c062:	d01c      	beq.n	c09e <TimerStart+0x52>
        if( cur == obj )
    c064:	429c      	cmp	r4, r3
    c066:	d004      	beq.n	c072 <TimerStart+0x26>
        cur = cur->Next;
    c068:	691b      	ldr	r3, [r3, #16]
    while( cur != NULL )
    c06a:	2b00      	cmp	r3, #0
    c06c:	d021      	beq.n	c0b2 <TimerStart+0x66>
        if( cur == obj )
    c06e:	429c      	cmp	r4, r3
    c070:	d1fa      	bne.n	c068 <TimerStart+0x1c>
        CRITICAL_SECTION_END( );
    c072:	a801      	add	r0, sp, #4
    c074:	4b1f      	ldr	r3, [pc, #124]	; (c0f4 <TimerStart+0xa8>)
    c076:	4798      	blx	r3
    c078:	e005      	b.n	c086 <TimerStart+0x3a>
            TimerInsertNewHeadTimer( obj );
    c07a:	0020      	movs	r0, r4
    c07c:	4b1e      	ldr	r3, [pc, #120]	; (c0f8 <TimerStart+0xac>)
    c07e:	4798      	blx	r3
    CRITICAL_SECTION_END( );
    c080:	a801      	add	r0, sp, #4
    c082:	4b1c      	ldr	r3, [pc, #112]	; (c0f4 <TimerStart+0xa8>)
    c084:	4798      	blx	r3
}
    c086:	b002      	add	sp, #8
    c088:	bd10      	pop	{r4, pc}
    TimerEvent_t* cur = TimerListHead;
    c08a:	000a      	movs	r2, r1
    cur->Next = obj;
    c08c:	6114      	str	r4, [r2, #16]
    obj->Next = NULL;
    c08e:	2300      	movs	r3, #0
    c090:	6123      	str	r3, [r4, #16]
    c092:	e7f5      	b.n	c080 <TimerStart+0x34>
    TimerEvent_t* next = TimerListHead->Next;
    c094:	0013      	movs	r3, r2
    TimerEvent_t* cur = TimerListHead;
    c096:	000a      	movs	r2, r1
            cur->Next = obj;
    c098:	6114      	str	r4, [r2, #16]
            obj->Next = next;
    c09a:	6123      	str	r3, [r4, #16]
    c09c:	e7f0      	b.n	c080 <TimerStart+0x34>
    obj->Timestamp = obj->ReloadValue;
    c09e:	6863      	ldr	r3, [r4, #4]
    c0a0:	6023      	str	r3, [r4, #0]
    obj->IsRunning = false;
    c0a2:	2300      	movs	r3, #0
    c0a4:	7223      	strb	r3, [r4, #8]
        RtcSetTimerContext( );
    c0a6:	4b15      	ldr	r3, [pc, #84]	; (c0fc <TimerStart+0xb0>)
    c0a8:	4798      	blx	r3
        TimerInsertNewHeadTimer( obj );
    c0aa:	0020      	movs	r0, r4
    c0ac:	4b12      	ldr	r3, [pc, #72]	; (c0f8 <TimerStart+0xac>)
    c0ae:	4798      	blx	r3
    c0b0:	e7e6      	b.n	c080 <TimerStart+0x34>
    obj->Timestamp = obj->ReloadValue;
    c0b2:	6863      	ldr	r3, [r4, #4]
    c0b4:	6023      	str	r3, [r4, #0]
    obj->IsRunning = false;
    c0b6:	2300      	movs	r3, #0
    c0b8:	7223      	strb	r3, [r4, #8]
        elapsedTime = RtcGetTimerElapsedTime( );
    c0ba:	4b11      	ldr	r3, [pc, #68]	; (c100 <TimerStart+0xb4>)
    c0bc:	4798      	blx	r3
        obj->Timestamp += elapsedTime;
    c0be:	6823      	ldr	r3, [r4, #0]
    c0c0:	469c      	mov	ip, r3
    c0c2:	4460      	add	r0, ip
    c0c4:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    c0c6:	4b0a      	ldr	r3, [pc, #40]	; (c0f0 <TimerStart+0xa4>)
    c0c8:	6819      	ldr	r1, [r3, #0]
    c0ca:	680b      	ldr	r3, [r1, #0]
    c0cc:	4298      	cmp	r0, r3
    c0ce:	d3d4      	bcc.n	c07a <TimerStart+0x2e>
    TimerEvent_t* next = TimerListHead->Next;
    c0d0:	690a      	ldr	r2, [r1, #16]
    while( cur->Next != NULL )
    c0d2:	2a00      	cmp	r2, #0
    c0d4:	d0d9      	beq.n	c08a <TimerStart+0x3e>
        if( obj->Timestamp > next->Timestamp )
    c0d6:	6813      	ldr	r3, [r2, #0]
    c0d8:	4298      	cmp	r0, r3
    c0da:	d9db      	bls.n	c094 <TimerStart+0x48>
            next = next->Next;
    c0dc:	6913      	ldr	r3, [r2, #16]
    while( cur->Next != NULL )
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d0d4      	beq.n	c08c <TimerStart+0x40>
        if( obj->Timestamp > next->Timestamp )
    c0e2:	6819      	ldr	r1, [r3, #0]
    c0e4:	4288      	cmp	r0, r1
    c0e6:	d9d7      	bls.n	c098 <TimerStart+0x4c>
            next = next->Next;
    c0e8:	001a      	movs	r2, r3
    c0ea:	e7f7      	b.n	c0dc <TimerStart+0x90>
    c0ec:	00000e93 	.word	0x00000e93
    c0f0:	20001afc 	.word	0x20001afc
    c0f4:	00000e9d 	.word	0x00000e9d
    c0f8:	0000c019 	.word	0x0000c019
    c0fc:	00001efd 	.word	0x00001efd
    c100:	00001ff9 	.word	0x00001ff9

0000c104 <TimerIrqHandler>:
{
    c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
    c106:	4b22      	ldr	r3, [pc, #136]	; (c190 <TimerIrqHandler+0x8c>)
    c108:	4798      	blx	r3
    c10a:	0004      	movs	r4, r0
    uint32_t now =  RtcSetTimerContext( );
    c10c:	4b21      	ldr	r3, [pc, #132]	; (c194 <TimerIrqHandler+0x90>)
    c10e:	4798      	blx	r3
    uint32_t deltaContext = now - old; // intentional wrap around
    c110:	1b00      	subs	r0, r0, r4
    if( TimerListHead != NULL )
    c112:	4b21      	ldr	r3, [pc, #132]	; (c198 <TimerIrqHandler+0x94>)
    c114:	681c      	ldr	r4, [r3, #0]
    c116:	2c00      	cmp	r4, #0
    c118:	d037      	beq.n	c18a <TimerIrqHandler+0x86>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    c11a:	6923      	ldr	r3, [r4, #16]
    c11c:	2b00      	cmp	r3, #0
    c11e:	d018      	beq.n	c152 <TimerIrqHandler+0x4e>
    c120:	0022      	movs	r2, r4
                next->Timestamp = 0;
    c122:	2500      	movs	r5, #0
    c124:	e004      	b.n	c130 <TimerIrqHandler+0x2c>
    c126:	601d      	str	r5, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    c128:	6912      	ldr	r2, [r2, #16]
    c12a:	6913      	ldr	r3, [r2, #16]
    c12c:	2b00      	cmp	r3, #0
    c12e:	d010      	beq.n	c152 <TimerIrqHandler+0x4e>
            if( next->Timestamp > deltaContext )
    c130:	6819      	ldr	r1, [r3, #0]
    c132:	4288      	cmp	r0, r1
    c134:	d2f7      	bcs.n	c126 <TimerIrqHandler+0x22>
                next->Timestamp -= deltaContext;
    c136:	1a09      	subs	r1, r1, r0
    c138:	6019      	str	r1, [r3, #0]
    c13a:	e7f5      	b.n	c128 <TimerIrqHandler+0x24>
    c13c:	e7fe      	b.n	c13c <TimerIrqHandler+0x38>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == false ) )
    c13e:	4b16      	ldr	r3, [pc, #88]	; (c198 <TimerIrqHandler+0x94>)
    c140:	6818      	ldr	r0, [r3, #0]
    c142:	2800      	cmp	r0, #0
    c144:	d021      	beq.n	c18a <TimerIrqHandler+0x86>
    c146:	7a03      	ldrb	r3, [r0, #8]
    c148:	2b00      	cmp	r3, #0
    c14a:	d11e      	bne.n	c18a <TimerIrqHandler+0x86>
        TimerSetTimeout( TimerListHead );
    c14c:	4b13      	ldr	r3, [pc, #76]	; (c19c <TimerIrqHandler+0x98>)
    c14e:	4798      	blx	r3
}
    c150:	e01b      	b.n	c18a <TimerIrqHandler+0x86>
        TimerListHead = TimerListHead->Next;
    c152:	4b11      	ldr	r3, [pc, #68]	; (c198 <TimerIrqHandler+0x94>)
    c154:	6922      	ldr	r2, [r4, #16]
    c156:	601a      	str	r2, [r3, #0]
        ExecuteCallBack( cur->Callback );
    c158:	68e3      	ldr	r3, [r4, #12]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d016      	beq.n	c18c <TimerIrqHandler+0x88>
    c15e:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    c160:	4b0d      	ldr	r3, [pc, #52]	; (c198 <TimerIrqHandler+0x94>)
    c162:	681b      	ldr	r3, [r3, #0]
    c164:	2b00      	cmp	r3, #0
    c166:	d010      	beq.n	c18a <TimerIrqHandler+0x86>
    c168:	4f0d      	ldr	r7, [pc, #52]	; (c1a0 <TimerIrqHandler+0x9c>)
        cur = TimerListHead;
    c16a:	4c0b      	ldr	r4, [pc, #44]	; (c198 <TimerIrqHandler+0x94>)
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    c16c:	0026      	movs	r6, r4
    c16e:	681d      	ldr	r5, [r3, #0]
    c170:	47b8      	blx	r7
    c172:	4285      	cmp	r5, r0
    c174:	d2e3      	bcs.n	c13e <TimerIrqHandler+0x3a>
        cur = TimerListHead;
    c176:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    c178:	691a      	ldr	r2, [r3, #16]
    c17a:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback );
    c17c:	68db      	ldr	r3, [r3, #12]
    c17e:	2b00      	cmp	r3, #0
    c180:	d0dc      	beq.n	c13c <TimerIrqHandler+0x38>
    c182:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    c184:	6833      	ldr	r3, [r6, #0]
    c186:	2b00      	cmp	r3, #0
    c188:	d1f1      	bne.n	c16e <TimerIrqHandler+0x6a>
}
    c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c18c:	e7fe      	b.n	c18c <TimerIrqHandler+0x88>
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	00001f59 	.word	0x00001f59
    c194:	00001efd 	.word	0x00001efd
    c198:	20001afc 	.word	0x20001afc
    c19c:	0000bfe1 	.word	0x0000bfe1
    c1a0:	00001ff9 	.word	0x00001ff9

0000c1a4 <TimerStop>:
{
    c1a4:	b510      	push	{r4, lr}
    c1a6:	b082      	sub	sp, #8
    c1a8:	0004      	movs	r4, r0
    CRITICAL_SECTION_BEGIN( );
    c1aa:	a801      	add	r0, sp, #4
    c1ac:	4b1e      	ldr	r3, [pc, #120]	; (c228 <TimerStop+0x84>)
    c1ae:	4798      	blx	r3
    TimerEvent_t* prev = TimerListHead;
    c1b0:	4b1e      	ldr	r3, [pc, #120]	; (c22c <TimerStop+0x88>)
    c1b2:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    c1b4:	2a00      	cmp	r2, #0
    c1b6:	d00a      	beq.n	c1ce <TimerStop+0x2a>
    c1b8:	2c00      	cmp	r4, #0
    c1ba:	d008      	beq.n	c1ce <TimerStop+0x2a>
    if( TimerListHead == obj ) // Stop the Head
    c1bc:	42a2      	cmp	r2, r4
    c1be:	d00a      	beq.n	c1d6 <TimerStop+0x32>
                cur = cur->Next;
    c1c0:	6913      	ldr	r3, [r2, #16]
        while( cur != NULL )
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	d028      	beq.n	c218 <TimerStop+0x74>
            if( cur == obj )
    c1c6:	429c      	cmp	r4, r3
    c1c8:	d022      	beq.n	c210 <TimerStop+0x6c>
                cur = cur->Next;
    c1ca:	001a      	movs	r2, r3
    c1cc:	e7f8      	b.n	c1c0 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
    c1ce:	a801      	add	r0, sp, #4
    c1d0:	4b17      	ldr	r3, [pc, #92]	; (c230 <TimerStop+0x8c>)
    c1d2:	4798      	blx	r3
    c1d4:	e023      	b.n	c21e <TimerStop+0x7a>
        if( TimerListHead->IsRunning == true ) // The head is already running 
    c1d6:	7a13      	ldrb	r3, [r2, #8]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d00f      	beq.n	c1fc <TimerStop+0x58>
            TimerListHead->IsRunning = false;
    c1dc:	2300      	movs	r3, #0
    c1de:	7213      	strb	r3, [r2, #8]
            if( TimerListHead->Next != NULL )
    c1e0:	6910      	ldr	r0, [r2, #16]
    c1e2:	2800      	cmp	r0, #0
    c1e4:	d004      	beq.n	c1f0 <TimerStop+0x4c>
                TimerListHead = TimerListHead->Next;
    c1e6:	4b11      	ldr	r3, [pc, #68]	; (c22c <TimerStop+0x88>)
    c1e8:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
    c1ea:	4b12      	ldr	r3, [pc, #72]	; (c234 <TimerStop+0x90>)
    c1ec:	4798      	blx	r3
    c1ee:	e013      	b.n	c218 <TimerStop+0x74>
                RtcStopAlarm( );
    c1f0:	4b11      	ldr	r3, [pc, #68]	; (c238 <TimerStop+0x94>)
    c1f2:	4798      	blx	r3
                TimerListHead = NULL;
    c1f4:	2200      	movs	r2, #0
    c1f6:	4b0d      	ldr	r3, [pc, #52]	; (c22c <TimerStop+0x88>)
    c1f8:	601a      	str	r2, [r3, #0]
    c1fa:	e00d      	b.n	c218 <TimerStop+0x74>
            if( TimerListHead->Next != NULL )
    c1fc:	6913      	ldr	r3, [r2, #16]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d002      	beq.n	c208 <TimerStop+0x64>
                TimerListHead = TimerListHead->Next;
    c202:	4a0a      	ldr	r2, [pc, #40]	; (c22c <TimerStop+0x88>)
    c204:	6013      	str	r3, [r2, #0]
    c206:	e007      	b.n	c218 <TimerStop+0x74>
                TimerListHead = NULL;
    c208:	2200      	movs	r2, #0
    c20a:	4b08      	ldr	r3, [pc, #32]	; (c22c <TimerStop+0x88>)
    c20c:	601a      	str	r2, [r3, #0]
    c20e:	e003      	b.n	c218 <TimerStop+0x74>
                if( cur->Next != NULL )
    c210:	6923      	ldr	r3, [r4, #16]
    c212:	2b00      	cmp	r3, #0
    c214:	d005      	beq.n	c222 <TimerStop+0x7e>
                    prev->Next = cur;
    c216:	6113      	str	r3, [r2, #16]
    CRITICAL_SECTION_END( );
    c218:	a801      	add	r0, sp, #4
    c21a:	4b05      	ldr	r3, [pc, #20]	; (c230 <TimerStop+0x8c>)
    c21c:	4798      	blx	r3
}
    c21e:	b002      	add	sp, #8
    c220:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
    c222:	2300      	movs	r3, #0
    c224:	6113      	str	r3, [r2, #16]
    c226:	e7f7      	b.n	c218 <TimerStop+0x74>
    c228:	00000e93 	.word	0x00000e93
    c22c:	20001afc 	.word	0x20001afc
    c230:	00000e9d 	.word	0x00000e9d
    c234:	0000bfe1 	.word	0x0000bfe1
    c238:	00001f81 	.word	0x00001f81

0000c23c <TimerSetValue>:
{
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	0005      	movs	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
    c240:	0008      	movs	r0, r1
    c242:	4b07      	ldr	r3, [pc, #28]	; (c260 <TimerSetValue+0x24>)
    c244:	4798      	blx	r3
    c246:	0004      	movs	r4, r0
    TimerStop( obj );
    c248:	0028      	movs	r0, r5
    c24a:	4b06      	ldr	r3, [pc, #24]	; (c264 <TimerSetValue+0x28>)
    c24c:	4798      	blx	r3
    minValue = RtcGetMinimumTimeout( );
    c24e:	4b06      	ldr	r3, [pc, #24]	; (c268 <TimerSetValue+0x2c>)
    c250:	4798      	blx	r3
    c252:	4284      	cmp	r4, r0
    c254:	d200      	bcs.n	c258 <TimerSetValue+0x1c>
    c256:	0004      	movs	r4, r0
    obj->Timestamp = ticks;
    c258:	602c      	str	r4, [r5, #0]
    obj->ReloadValue = ticks;
    c25a:	606c      	str	r4, [r5, #4]
}
    c25c:	bd70      	pop	{r4, r5, r6, pc}
    c25e:	46c0      	nop			; (mov r8, r8)
    c260:	00001f69 	.word	0x00001f69
    c264:	0000c1a5 	.word	0x0000c1a5
    c268:	00001f65 	.word	0x00001f65

0000c26c <TimerGetCurrentTime>:
{
    c26c:	b510      	push	{r4, lr}
    uint32_t now = RtcGetTimerValue( );
    c26e:	4b02      	ldr	r3, [pc, #8]	; (c278 <TimerGetCurrentTime+0xc>)
    c270:	4798      	blx	r3
    return  RtcTick2Ms( now );
    c272:	4b02      	ldr	r3, [pc, #8]	; (c27c <TimerGetCurrentTime+0x10>)
    c274:	4798      	blx	r3
}
    c276:	bd10      	pop	{r4, pc}
    c278:	00001fed 	.word	0x00001fed
    c27c:	00001f6b 	.word	0x00001f6b

0000c280 <TimerGetElapsedTime>:
{
    c280:	b570      	push	{r4, r5, r6, lr}
    c282:	0005      	movs	r5, r0
    uint32_t nowInTicks = RtcGetTimerValue( );
    c284:	4b04      	ldr	r3, [pc, #16]	; (c298 <TimerGetElapsedTime+0x18>)
    c286:	4798      	blx	r3
    c288:	0004      	movs	r4, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
    c28a:	0028      	movs	r0, r5
    c28c:	4b03      	ldr	r3, [pc, #12]	; (c29c <TimerGetElapsedTime+0x1c>)
    c28e:	4798      	blx	r3
    return RtcTick2Ms( nowInTicks - pastInTicks );
    c290:	1a20      	subs	r0, r4, r0
    c292:	4b03      	ldr	r3, [pc, #12]	; (c2a0 <TimerGetElapsedTime+0x20>)
    c294:	4798      	blx	r3
}
    c296:	bd70      	pop	{r4, r5, r6, pc}
    c298:	00001fed 	.word	0x00001fed
    c29c:	00001f69 	.word	0x00001f69
    c2a0:	00001f6b 	.word	0x00001f6b

0000c2a4 <TimerProcess>:
{
    return RtcTempCompensation( period, temperature );
}

void TimerProcess( void )
{
    c2a4:	b510      	push	{r4, lr}
    RtcProcess( );
    c2a6:	4b01      	ldr	r3, [pc, #4]	; (c2ac <TimerProcess+0x8>)
    c2a8:	4798      	blx	r3
}
    c2aa:	bd10      	pop	{r4, pc}
    c2ac:	0000208d 	.word	0x0000208d

0000c2b0 <UartInit>:
 */
#include "uart-board.h"
#include "uart.h"

void UartInit( Uart_t *obj, UartId_t uartId, PinNames tx, PinNames rx )
{
    c2b0:	b510      	push	{r4, lr}
    if( obj->IsInitialized == false )
    c2b2:	7844      	ldrb	r4, [r0, #1]
    c2b4:	2c00      	cmp	r4, #0
    c2b6:	d000      	beq.n	c2ba <UartInit+0xa>
    {
        obj->IsInitialized = true;
        UartMcuInit( obj, uartId, tx, rx );
    }
}
    c2b8:	bd10      	pop	{r4, pc}
        obj->IsInitialized = true;
    c2ba:	3401      	adds	r4, #1
    c2bc:	7044      	strb	r4, [r0, #1]
        UartMcuInit( obj, uartId, tx, rx );
    c2be:	4c01      	ldr	r4, [pc, #4]	; (c2c4 <UartInit+0x14>)
    c2c0:	47a0      	blx	r4
}
    c2c2:	e7f9      	b.n	c2b8 <UartInit+0x8>
    c2c4:	000025f5 	.word	0x000025f5

0000c2c8 <UartConfig>:

void UartConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
    c2c8:	b570      	push	{r4, r5, r6, lr}
    c2ca:	b084      	sub	sp, #16
    c2cc:	ac08      	add	r4, sp, #32
    c2ce:	7824      	ldrb	r4, [r4, #0]
    c2d0:	ad09      	add	r5, sp, #36	; 0x24
    c2d2:	782d      	ldrb	r5, [r5, #0]
    c2d4:	ae0a      	add	r6, sp, #40	; 0x28
    c2d6:	7836      	ldrb	r6, [r6, #0]
    UartMcuConfig( obj, mode, baudrate, wordLength, stopBits, parity, flowCtrl );
    c2d8:	9602      	str	r6, [sp, #8]
    c2da:	9501      	str	r5, [sp, #4]
    c2dc:	9400      	str	r4, [sp, #0]
    c2de:	4c02      	ldr	r4, [pc, #8]	; (c2e8 <UartConfig+0x20>)
    c2e0:	47a0      	blx	r4
}
    c2e2:	b004      	add	sp, #16
    c2e4:	bd70      	pop	{r4, r5, r6, pc}
    c2e6:	46c0      	nop			; (mov r8, r8)
    c2e8:	000026ed 	.word	0x000026ed

0000c2ec <UartPutBuffer>:
{
    return UartMcuGetChar( obj, data );
}

uint8_t UartPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
    c2ec:	b510      	push	{r4, lr}
    return UartMcuPutBuffer( obj, buffer, size );
    c2ee:	4b01      	ldr	r3, [pc, #4]	; (c2f4 <UartPutBuffer+0x8>)
    c2f0:	4798      	blx	r3
}
    c2f2:	bd10      	pop	{r4, pc}
    c2f4:	00002701 	.word	0x00002701

0000c2f8 <UartGetBuffer>:

uint8_t UartGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
    c2f8:	b510      	push	{r4, lr}
    return UartMcuGetBuffer( obj, buffer, size, nbReadBytes );
    c2fa:	4c01      	ldr	r4, [pc, #4]	; (c300 <UartGetBuffer+0x8>)
    c2fc:	47a0      	blx	r4
}
    c2fe:	bd10      	pop	{r4, pc}
    c300:	00002719 	.word	0x00002719

0000c304 <ceil>:
    c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c306:	4657      	mov	r7, sl
    c308:	464e      	mov	r6, r9
    c30a:	4645      	mov	r5, r8
    c30c:	46de      	mov	lr, fp
    c30e:	004b      	lsls	r3, r1, #1
    c310:	4a41      	ldr	r2, [pc, #260]	; (c418 <ceil+0x114>)
    c312:	0d5b      	lsrs	r3, r3, #21
    c314:	b5e0      	push	{r5, r6, r7, lr}
    c316:	189f      	adds	r7, r3, r2
    c318:	0005      	movs	r5, r0
    c31a:	000c      	movs	r4, r1
    c31c:	4680      	mov	r8, r0
    c31e:	000e      	movs	r6, r1
    c320:	4689      	mov	r9, r1
    c322:	4682      	mov	sl, r0
    c324:	2f13      	cmp	r7, #19
    c326:	dc26      	bgt.n	c376 <ceil+0x72>
    c328:	2f00      	cmp	r7, #0
    c32a:	db56      	blt.n	c3da <ceil+0xd6>
    c32c:	4b3b      	ldr	r3, [pc, #236]	; (c41c <ceil+0x118>)
    c32e:	413b      	asrs	r3, r7
    c330:	4698      	mov	r8, r3
    c332:	000b      	movs	r3, r1
    c334:	4642      	mov	r2, r8
    c336:	4013      	ands	r3, r2
    c338:	4303      	orrs	r3, r0
    c33a:	d016      	beq.n	c36a <ceil+0x66>
    c33c:	4a38      	ldr	r2, [pc, #224]	; (c420 <ceil+0x11c>)
    c33e:	4b39      	ldr	r3, [pc, #228]	; (c424 <ceil+0x120>)
    c340:	f000 fe02 	bl	cf48 <__aeabi_dadd>
    c344:	2200      	movs	r2, #0
    c346:	2300      	movs	r3, #0
    c348:	f000 fb00 	bl	c94c <__aeabi_dcmpgt>
    c34c:	2800      	cmp	r0, #0
    c34e:	d00a      	beq.n	c366 <ceil+0x62>
    c350:	2c00      	cmp	r4, #0
    c352:	dd03      	ble.n	c35c <ceil+0x58>
    c354:	2380      	movs	r3, #128	; 0x80
    c356:	035b      	lsls	r3, r3, #13
    c358:	413b      	asrs	r3, r7
    c35a:	4499      	add	r9, r3
    c35c:	4643      	mov	r3, r8
    c35e:	464e      	mov	r6, r9
    c360:	439e      	bics	r6, r3
    c362:	2300      	movs	r3, #0
    c364:	469a      	mov	sl, r3
    c366:	4650      	mov	r0, sl
    c368:	0031      	movs	r1, r6
    c36a:	bc3c      	pop	{r2, r3, r4, r5}
    c36c:	4690      	mov	r8, r2
    c36e:	4699      	mov	r9, r3
    c370:	46a2      	mov	sl, r4
    c372:	46ab      	mov	fp, r5
    c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c376:	2f33      	cmp	r7, #51	; 0x33
    c378:	dd08      	ble.n	c38c <ceil+0x88>
    c37a:	2380      	movs	r3, #128	; 0x80
    c37c:	00db      	lsls	r3, r3, #3
    c37e:	429f      	cmp	r7, r3
    c380:	d1f3      	bne.n	c36a <ceil+0x66>
    c382:	0002      	movs	r2, r0
    c384:	000b      	movs	r3, r1
    c386:	f000 fddf 	bl	cf48 <__aeabi_dadd>
    c38a:	e7ee      	b.n	c36a <ceil+0x66>
    c38c:	4a26      	ldr	r2, [pc, #152]	; (c428 <ceil+0x124>)
    c38e:	4694      	mov	ip, r2
    c390:	2201      	movs	r2, #1
    c392:	4463      	add	r3, ip
    c394:	4252      	negs	r2, r2
    c396:	40da      	lsrs	r2, r3
    c398:	4693      	mov	fp, r2
    c39a:	4202      	tst	r2, r0
    c39c:	d0e5      	beq.n	c36a <ceil+0x66>
    c39e:	4a20      	ldr	r2, [pc, #128]	; (c420 <ceil+0x11c>)
    c3a0:	4b20      	ldr	r3, [pc, #128]	; (c424 <ceil+0x120>)
    c3a2:	f000 fdd1 	bl	cf48 <__aeabi_dadd>
    c3a6:	2200      	movs	r2, #0
    c3a8:	2300      	movs	r3, #0
    c3aa:	f000 facf 	bl	c94c <__aeabi_dcmpgt>
    c3ae:	2800      	cmp	r0, #0
    c3b0:	d0d9      	beq.n	c366 <ceil+0x62>
    c3b2:	2c00      	cmp	r4, #0
    c3b4:	dd28      	ble.n	c408 <ceil+0x104>
    c3b6:	2f14      	cmp	r7, #20
    c3b8:	d023      	beq.n	c402 <ceil+0xfe>
    c3ba:	2334      	movs	r3, #52	; 0x34
    c3bc:	1bdb      	subs	r3, r3, r7
    c3be:	2701      	movs	r7, #1
    c3c0:	409f      	lsls	r7, r3
    c3c2:	197f      	adds	r7, r7, r5
    c3c4:	42af      	cmp	r7, r5
    c3c6:	419b      	sbcs	r3, r3
    c3c8:	425b      	negs	r3, r3
    c3ca:	4499      	add	r9, r3
    c3cc:	465b      	mov	r3, fp
    c3ce:	439f      	bics	r7, r3
    c3d0:	464e      	mov	r6, r9
    c3d2:	46ba      	mov	sl, r7
    c3d4:	0031      	movs	r1, r6
    c3d6:	4650      	mov	r0, sl
    c3d8:	e7c7      	b.n	c36a <ceil+0x66>
    c3da:	4a11      	ldr	r2, [pc, #68]	; (c420 <ceil+0x11c>)
    c3dc:	4b11      	ldr	r3, [pc, #68]	; (c424 <ceil+0x120>)
    c3de:	f000 fdb3 	bl	cf48 <__aeabi_dadd>
    c3e2:	2200      	movs	r2, #0
    c3e4:	2300      	movs	r3, #0
    c3e6:	f000 fab1 	bl	c94c <__aeabi_dcmpgt>
    c3ea:	2800      	cmp	r0, #0
    c3ec:	d0bb      	beq.n	c366 <ceil+0x62>
    c3ee:	2c00      	cmp	r4, #0
    c3f0:	db0c      	blt.n	c40c <ceil+0x108>
    c3f2:	2300      	movs	r3, #0
    c3f4:	432c      	orrs	r4, r5
    c3f6:	469a      	mov	sl, r3
    c3f8:	2600      	movs	r6, #0
    c3fa:	2c00      	cmp	r4, #0
    c3fc:	d0b3      	beq.n	c366 <ceil+0x62>
    c3fe:	4e0b      	ldr	r6, [pc, #44]	; (c42c <ceil+0x128>)
    c400:	e7b1      	b.n	c366 <ceil+0x62>
    c402:	2301      	movs	r3, #1
    c404:	469c      	mov	ip, r3
    c406:	44e1      	add	r9, ip
    c408:	4647      	mov	r7, r8
    c40a:	e7df      	b.n	c3cc <ceil+0xc8>
    c40c:	2300      	movs	r3, #0
    c40e:	2680      	movs	r6, #128	; 0x80
    c410:	469a      	mov	sl, r3
    c412:	0636      	lsls	r6, r6, #24
    c414:	e7a7      	b.n	c366 <ceil+0x62>
    c416:	46c0      	nop			; (mov r8, r8)
    c418:	fffffc01 	.word	0xfffffc01
    c41c:	000fffff 	.word	0x000fffff
    c420:	8800759c 	.word	0x8800759c
    c424:	7e37e43c 	.word	0x7e37e43c
    c428:	fffffbed 	.word	0xfffffbed
    c42c:	3ff00000 	.word	0x3ff00000

0000c430 <floor>:
    c430:	4a45      	ldr	r2, [pc, #276]	; (c548 <floor+0x118>)
    c432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c434:	4657      	mov	r7, sl
    c436:	4692      	mov	sl, r2
    c438:	004b      	lsls	r3, r1, #1
    c43a:	0d5b      	lsrs	r3, r3, #21
    c43c:	449a      	add	sl, r3
    c43e:	464e      	mov	r6, r9
    c440:	4645      	mov	r5, r8
    c442:	46de      	mov	lr, fp
    c444:	4652      	mov	r2, sl
    c446:	b5e0      	push	{r5, r6, r7, lr}
    c448:	000c      	movs	r4, r1
    c44a:	0005      	movs	r5, r0
    c44c:	000e      	movs	r6, r1
    c44e:	4689      	mov	r9, r1
    c450:	0007      	movs	r7, r0
    c452:	2a13      	cmp	r2, #19
    c454:	dc22      	bgt.n	c49c <floor+0x6c>
    c456:	2a00      	cmp	r2, #0
    c458:	db47      	blt.n	c4ea <floor+0xba>
    c45a:	4652      	mov	r2, sl
    c45c:	4b3b      	ldr	r3, [pc, #236]	; (c54c <floor+0x11c>)
    c45e:	4113      	asrs	r3, r2
    c460:	4698      	mov	r8, r3
    c462:	000b      	movs	r3, r1
    c464:	4642      	mov	r2, r8
    c466:	4013      	ands	r3, r2
    c468:	4303      	orrs	r3, r0
    c46a:	d011      	beq.n	c490 <floor+0x60>
    c46c:	4a38      	ldr	r2, [pc, #224]	; (c550 <floor+0x120>)
    c46e:	4b39      	ldr	r3, [pc, #228]	; (c554 <floor+0x124>)
    c470:	f000 fd6a 	bl	cf48 <__aeabi_dadd>
    c474:	2200      	movs	r2, #0
    c476:	2300      	movs	r3, #0
    c478:	f000 fa68 	bl	c94c <__aeabi_dcmpgt>
    c47c:	2800      	cmp	r0, #0
    c47e:	d005      	beq.n	c48c <floor+0x5c>
    c480:	2c00      	cmp	r4, #0
    c482:	db41      	blt.n	c508 <floor+0xd8>
    c484:	464e      	mov	r6, r9
    c486:	4643      	mov	r3, r8
    c488:	2700      	movs	r7, #0
    c48a:	439e      	bics	r6, r3
    c48c:	0038      	movs	r0, r7
    c48e:	0031      	movs	r1, r6
    c490:	bc3c      	pop	{r2, r3, r4, r5}
    c492:	4690      	mov	r8, r2
    c494:	4699      	mov	r9, r3
    c496:	46a2      	mov	sl, r4
    c498:	46ab      	mov	fp, r5
    c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c49c:	4652      	mov	r2, sl
    c49e:	2a33      	cmp	r2, #51	; 0x33
    c4a0:	dd08      	ble.n	c4b4 <floor+0x84>
    c4a2:	2380      	movs	r3, #128	; 0x80
    c4a4:	00db      	lsls	r3, r3, #3
    c4a6:	459a      	cmp	sl, r3
    c4a8:	d1f2      	bne.n	c490 <floor+0x60>
    c4aa:	0002      	movs	r2, r0
    c4ac:	000b      	movs	r3, r1
    c4ae:	f000 fd4b 	bl	cf48 <__aeabi_dadd>
    c4b2:	e7ed      	b.n	c490 <floor+0x60>
    c4b4:	4a28      	ldr	r2, [pc, #160]	; (c558 <floor+0x128>)
    c4b6:	4694      	mov	ip, r2
    c4b8:	2201      	movs	r2, #1
    c4ba:	4463      	add	r3, ip
    c4bc:	4252      	negs	r2, r2
    c4be:	40da      	lsrs	r2, r3
    c4c0:	4693      	mov	fp, r2
    c4c2:	4202      	tst	r2, r0
    c4c4:	d0e4      	beq.n	c490 <floor+0x60>
    c4c6:	4a22      	ldr	r2, [pc, #136]	; (c550 <floor+0x120>)
    c4c8:	4b22      	ldr	r3, [pc, #136]	; (c554 <floor+0x124>)
    c4ca:	f000 fd3d 	bl	cf48 <__aeabi_dadd>
    c4ce:	2200      	movs	r2, #0
    c4d0:	2300      	movs	r3, #0
    c4d2:	f000 fa3b 	bl	c94c <__aeabi_dcmpgt>
    c4d6:	2800      	cmp	r0, #0
    c4d8:	d0d8      	beq.n	c48c <floor+0x5c>
    c4da:	2c00      	cmp	r4, #0
    c4dc:	db1a      	blt.n	c514 <floor+0xe4>
    c4de:	465b      	mov	r3, fp
    c4e0:	464e      	mov	r6, r9
    c4e2:	439f      	bics	r7, r3
    c4e4:	0038      	movs	r0, r7
    c4e6:	0031      	movs	r1, r6
    c4e8:	e7d2      	b.n	c490 <floor+0x60>
    c4ea:	4a19      	ldr	r2, [pc, #100]	; (c550 <floor+0x120>)
    c4ec:	4b19      	ldr	r3, [pc, #100]	; (c554 <floor+0x124>)
    c4ee:	f000 fd2b 	bl	cf48 <__aeabi_dadd>
    c4f2:	2200      	movs	r2, #0
    c4f4:	2300      	movs	r3, #0
    c4f6:	f000 fa29 	bl	c94c <__aeabi_dcmpgt>
    c4fa:	2800      	cmp	r0, #0
    c4fc:	d0c6      	beq.n	c48c <floor+0x5c>
    c4fe:	2c00      	cmp	r4, #0
    c500:	db16      	blt.n	c530 <floor+0x100>
    c502:	2700      	movs	r7, #0
    c504:	2600      	movs	r6, #0
    c506:	e7c1      	b.n	c48c <floor+0x5c>
    c508:	2380      	movs	r3, #128	; 0x80
    c50a:	4652      	mov	r2, sl
    c50c:	035b      	lsls	r3, r3, #13
    c50e:	4113      	asrs	r3, r2
    c510:	4499      	add	r9, r3
    c512:	e7b7      	b.n	c484 <floor+0x54>
    c514:	4653      	mov	r3, sl
    c516:	2b14      	cmp	r3, #20
    c518:	d012      	beq.n	c540 <floor+0x110>
    c51a:	2334      	movs	r3, #52	; 0x34
    c51c:	4652      	mov	r2, sl
    c51e:	2701      	movs	r7, #1
    c520:	1a9b      	subs	r3, r3, r2
    c522:	409f      	lsls	r7, r3
    c524:	197f      	adds	r7, r7, r5
    c526:	42af      	cmp	r7, r5
    c528:	419b      	sbcs	r3, r3
    c52a:	425b      	negs	r3, r3
    c52c:	4499      	add	r9, r3
    c52e:	e7d6      	b.n	c4de <floor+0xae>
    c530:	0064      	lsls	r4, r4, #1
    c532:	0864      	lsrs	r4, r4, #1
    c534:	4325      	orrs	r5, r4
    c536:	2700      	movs	r7, #0
    c538:	2d00      	cmp	r5, #0
    c53a:	d0a7      	beq.n	c48c <floor+0x5c>
    c53c:	4e07      	ldr	r6, [pc, #28]	; (c55c <floor+0x12c>)
    c53e:	e7a5      	b.n	c48c <floor+0x5c>
    c540:	3b13      	subs	r3, #19
    c542:	469c      	mov	ip, r3
    c544:	44e1      	add	r9, ip
    c546:	e7ca      	b.n	c4de <floor+0xae>
    c548:	fffffc01 	.word	0xfffffc01
    c54c:	000fffff 	.word	0x000fffff
    c550:	8800759c 	.word	0x8800759c
    c554:	7e37e43c 	.word	0x7e37e43c
    c558:	fffffbed 	.word	0xfffffbed
    c55c:	bff00000 	.word	0xbff00000

0000c560 <round>:
    c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c562:	4a26      	ldr	r2, [pc, #152]	; (c5fc <round+0x9c>)
    c564:	004b      	lsls	r3, r1, #1
    c566:	0d5b      	lsrs	r3, r3, #21
    c568:	189a      	adds	r2, r3, r2
    c56a:	0007      	movs	r7, r0
    c56c:	000c      	movs	r4, r1
    c56e:	2a13      	cmp	r2, #19
    c570:	dc10      	bgt.n	c594 <round+0x34>
    c572:	2a00      	cmp	r2, #0
    c574:	db39      	blt.n	c5ea <round+0x8a>
    c576:	4b22      	ldr	r3, [pc, #136]	; (c600 <round+0xa0>)
    c578:	4113      	asrs	r3, r2
    c57a:	420b      	tst	r3, r1
    c57c:	d030      	beq.n	c5e0 <round+0x80>
    c57e:	2480      	movs	r4, #128	; 0x80
    c580:	0324      	lsls	r4, r4, #12
    c582:	4114      	asrs	r4, r2
    c584:	2000      	movs	r0, #0
    c586:	1864      	adds	r4, r4, r1
    c588:	439c      	bics	r4, r3
    c58a:	0006      	movs	r6, r0
    c58c:	0025      	movs	r5, r4
    c58e:	0030      	movs	r0, r6
    c590:	0029      	movs	r1, r5
    c592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c594:	2a33      	cmp	r2, #51	; 0x33
    c596:	dd0c      	ble.n	c5b2 <round+0x52>
    c598:	2380      	movs	r3, #128	; 0x80
    c59a:	0006      	movs	r6, r0
    c59c:	00db      	lsls	r3, r3, #3
    c59e:	000d      	movs	r5, r1
    c5a0:	429a      	cmp	r2, r3
    c5a2:	d1f4      	bne.n	c58e <round+0x2e>
    c5a4:	0002      	movs	r2, r0
    c5a6:	000b      	movs	r3, r1
    c5a8:	f000 fcce 	bl	cf48 <__aeabi_dadd>
    c5ac:	0006      	movs	r6, r0
    c5ae:	000d      	movs	r5, r1
    c5b0:	e7ed      	b.n	c58e <round+0x2e>
    c5b2:	4d14      	ldr	r5, [pc, #80]	; (c604 <round+0xa4>)
    c5b4:	0006      	movs	r6, r0
    c5b6:	46ac      	mov	ip, r5
    c5b8:	2501      	movs	r5, #1
    c5ba:	4463      	add	r3, ip
    c5bc:	426d      	negs	r5, r5
    c5be:	40dd      	lsrs	r5, r3
    c5c0:	46ac      	mov	ip, r5
    c5c2:	4663      	mov	r3, ip
    c5c4:	000d      	movs	r5, r1
    c5c6:	4203      	tst	r3, r0
    c5c8:	d0e1      	beq.n	c58e <round+0x2e>
    c5ca:	2333      	movs	r3, #51	; 0x33
    c5cc:	1a9a      	subs	r2, r3, r2
    c5ce:	3b32      	subs	r3, #50	; 0x32
    c5d0:	4093      	lsls	r3, r2
    c5d2:	1818      	adds	r0, r3, r0
    c5d4:	4287      	cmp	r7, r0
    c5d6:	d900      	bls.n	c5da <round+0x7a>
    c5d8:	1c4c      	adds	r4, r1, #1
    c5da:	4663      	mov	r3, ip
    c5dc:	4398      	bics	r0, r3
    c5de:	e7d4      	b.n	c58a <round+0x2a>
    c5e0:	0006      	movs	r6, r0
    c5e2:	000d      	movs	r5, r1
    c5e4:	2800      	cmp	r0, #0
    c5e6:	d1ca      	bne.n	c57e <round+0x1e>
    c5e8:	e7d1      	b.n	c58e <round+0x2e>
    c5ea:	0fc9      	lsrs	r1, r1, #31
    c5ec:	07cc      	lsls	r4, r1, #31
    c5ee:	2000      	movs	r0, #0
    c5f0:	1c53      	adds	r3, r2, #1
    c5f2:	d1ca      	bne.n	c58a <round+0x2a>
    c5f4:	4b04      	ldr	r3, [pc, #16]	; (c608 <round+0xa8>)
    c5f6:	431c      	orrs	r4, r3
    c5f8:	e7c7      	b.n	c58a <round+0x2a>
    c5fa:	46c0      	nop			; (mov r8, r8)
    c5fc:	fffffc01 	.word	0xfffffc01
    c600:	000fffff 	.word	0x000fffff
    c604:	fffffbed 	.word	0xfffffbed
    c608:	3ff00000 	.word	0x3ff00000

0000c60c <__udivsi3>:
    c60c:	2200      	movs	r2, #0
    c60e:	0843      	lsrs	r3, r0, #1
    c610:	428b      	cmp	r3, r1
    c612:	d374      	bcc.n	c6fe <__udivsi3+0xf2>
    c614:	0903      	lsrs	r3, r0, #4
    c616:	428b      	cmp	r3, r1
    c618:	d35f      	bcc.n	c6da <__udivsi3+0xce>
    c61a:	0a03      	lsrs	r3, r0, #8
    c61c:	428b      	cmp	r3, r1
    c61e:	d344      	bcc.n	c6aa <__udivsi3+0x9e>
    c620:	0b03      	lsrs	r3, r0, #12
    c622:	428b      	cmp	r3, r1
    c624:	d328      	bcc.n	c678 <__udivsi3+0x6c>
    c626:	0c03      	lsrs	r3, r0, #16
    c628:	428b      	cmp	r3, r1
    c62a:	d30d      	bcc.n	c648 <__udivsi3+0x3c>
    c62c:	22ff      	movs	r2, #255	; 0xff
    c62e:	0209      	lsls	r1, r1, #8
    c630:	ba12      	rev	r2, r2
    c632:	0c03      	lsrs	r3, r0, #16
    c634:	428b      	cmp	r3, r1
    c636:	d302      	bcc.n	c63e <__udivsi3+0x32>
    c638:	1212      	asrs	r2, r2, #8
    c63a:	0209      	lsls	r1, r1, #8
    c63c:	d065      	beq.n	c70a <__udivsi3+0xfe>
    c63e:	0b03      	lsrs	r3, r0, #12
    c640:	428b      	cmp	r3, r1
    c642:	d319      	bcc.n	c678 <__udivsi3+0x6c>
    c644:	e000      	b.n	c648 <__udivsi3+0x3c>
    c646:	0a09      	lsrs	r1, r1, #8
    c648:	0bc3      	lsrs	r3, r0, #15
    c64a:	428b      	cmp	r3, r1
    c64c:	d301      	bcc.n	c652 <__udivsi3+0x46>
    c64e:	03cb      	lsls	r3, r1, #15
    c650:	1ac0      	subs	r0, r0, r3
    c652:	4152      	adcs	r2, r2
    c654:	0b83      	lsrs	r3, r0, #14
    c656:	428b      	cmp	r3, r1
    c658:	d301      	bcc.n	c65e <__udivsi3+0x52>
    c65a:	038b      	lsls	r3, r1, #14
    c65c:	1ac0      	subs	r0, r0, r3
    c65e:	4152      	adcs	r2, r2
    c660:	0b43      	lsrs	r3, r0, #13
    c662:	428b      	cmp	r3, r1
    c664:	d301      	bcc.n	c66a <__udivsi3+0x5e>
    c666:	034b      	lsls	r3, r1, #13
    c668:	1ac0      	subs	r0, r0, r3
    c66a:	4152      	adcs	r2, r2
    c66c:	0b03      	lsrs	r3, r0, #12
    c66e:	428b      	cmp	r3, r1
    c670:	d301      	bcc.n	c676 <__udivsi3+0x6a>
    c672:	030b      	lsls	r3, r1, #12
    c674:	1ac0      	subs	r0, r0, r3
    c676:	4152      	adcs	r2, r2
    c678:	0ac3      	lsrs	r3, r0, #11
    c67a:	428b      	cmp	r3, r1
    c67c:	d301      	bcc.n	c682 <__udivsi3+0x76>
    c67e:	02cb      	lsls	r3, r1, #11
    c680:	1ac0      	subs	r0, r0, r3
    c682:	4152      	adcs	r2, r2
    c684:	0a83      	lsrs	r3, r0, #10
    c686:	428b      	cmp	r3, r1
    c688:	d301      	bcc.n	c68e <__udivsi3+0x82>
    c68a:	028b      	lsls	r3, r1, #10
    c68c:	1ac0      	subs	r0, r0, r3
    c68e:	4152      	adcs	r2, r2
    c690:	0a43      	lsrs	r3, r0, #9
    c692:	428b      	cmp	r3, r1
    c694:	d301      	bcc.n	c69a <__udivsi3+0x8e>
    c696:	024b      	lsls	r3, r1, #9
    c698:	1ac0      	subs	r0, r0, r3
    c69a:	4152      	adcs	r2, r2
    c69c:	0a03      	lsrs	r3, r0, #8
    c69e:	428b      	cmp	r3, r1
    c6a0:	d301      	bcc.n	c6a6 <__udivsi3+0x9a>
    c6a2:	020b      	lsls	r3, r1, #8
    c6a4:	1ac0      	subs	r0, r0, r3
    c6a6:	4152      	adcs	r2, r2
    c6a8:	d2cd      	bcs.n	c646 <__udivsi3+0x3a>
    c6aa:	09c3      	lsrs	r3, r0, #7
    c6ac:	428b      	cmp	r3, r1
    c6ae:	d301      	bcc.n	c6b4 <__udivsi3+0xa8>
    c6b0:	01cb      	lsls	r3, r1, #7
    c6b2:	1ac0      	subs	r0, r0, r3
    c6b4:	4152      	adcs	r2, r2
    c6b6:	0983      	lsrs	r3, r0, #6
    c6b8:	428b      	cmp	r3, r1
    c6ba:	d301      	bcc.n	c6c0 <__udivsi3+0xb4>
    c6bc:	018b      	lsls	r3, r1, #6
    c6be:	1ac0      	subs	r0, r0, r3
    c6c0:	4152      	adcs	r2, r2
    c6c2:	0943      	lsrs	r3, r0, #5
    c6c4:	428b      	cmp	r3, r1
    c6c6:	d301      	bcc.n	c6cc <__udivsi3+0xc0>
    c6c8:	014b      	lsls	r3, r1, #5
    c6ca:	1ac0      	subs	r0, r0, r3
    c6cc:	4152      	adcs	r2, r2
    c6ce:	0903      	lsrs	r3, r0, #4
    c6d0:	428b      	cmp	r3, r1
    c6d2:	d301      	bcc.n	c6d8 <__udivsi3+0xcc>
    c6d4:	010b      	lsls	r3, r1, #4
    c6d6:	1ac0      	subs	r0, r0, r3
    c6d8:	4152      	adcs	r2, r2
    c6da:	08c3      	lsrs	r3, r0, #3
    c6dc:	428b      	cmp	r3, r1
    c6de:	d301      	bcc.n	c6e4 <__udivsi3+0xd8>
    c6e0:	00cb      	lsls	r3, r1, #3
    c6e2:	1ac0      	subs	r0, r0, r3
    c6e4:	4152      	adcs	r2, r2
    c6e6:	0883      	lsrs	r3, r0, #2
    c6e8:	428b      	cmp	r3, r1
    c6ea:	d301      	bcc.n	c6f0 <__udivsi3+0xe4>
    c6ec:	008b      	lsls	r3, r1, #2
    c6ee:	1ac0      	subs	r0, r0, r3
    c6f0:	4152      	adcs	r2, r2
    c6f2:	0843      	lsrs	r3, r0, #1
    c6f4:	428b      	cmp	r3, r1
    c6f6:	d301      	bcc.n	c6fc <__udivsi3+0xf0>
    c6f8:	004b      	lsls	r3, r1, #1
    c6fa:	1ac0      	subs	r0, r0, r3
    c6fc:	4152      	adcs	r2, r2
    c6fe:	1a41      	subs	r1, r0, r1
    c700:	d200      	bcs.n	c704 <__udivsi3+0xf8>
    c702:	4601      	mov	r1, r0
    c704:	4152      	adcs	r2, r2
    c706:	4610      	mov	r0, r2
    c708:	4770      	bx	lr
    c70a:	e7ff      	b.n	c70c <__udivsi3+0x100>
    c70c:	b501      	push	{r0, lr}
    c70e:	2000      	movs	r0, #0
    c710:	f000 f8f0 	bl	c8f4 <__aeabi_idiv0>
    c714:	bd02      	pop	{r1, pc}
    c716:	46c0      	nop			; (mov r8, r8)

0000c718 <__aeabi_uidivmod>:
    c718:	2900      	cmp	r1, #0
    c71a:	d0f7      	beq.n	c70c <__udivsi3+0x100>
    c71c:	e776      	b.n	c60c <__udivsi3>
    c71e:	4770      	bx	lr

0000c720 <__divsi3>:
    c720:	4603      	mov	r3, r0
    c722:	430b      	orrs	r3, r1
    c724:	d47f      	bmi.n	c826 <__divsi3+0x106>
    c726:	2200      	movs	r2, #0
    c728:	0843      	lsrs	r3, r0, #1
    c72a:	428b      	cmp	r3, r1
    c72c:	d374      	bcc.n	c818 <__divsi3+0xf8>
    c72e:	0903      	lsrs	r3, r0, #4
    c730:	428b      	cmp	r3, r1
    c732:	d35f      	bcc.n	c7f4 <__divsi3+0xd4>
    c734:	0a03      	lsrs	r3, r0, #8
    c736:	428b      	cmp	r3, r1
    c738:	d344      	bcc.n	c7c4 <__divsi3+0xa4>
    c73a:	0b03      	lsrs	r3, r0, #12
    c73c:	428b      	cmp	r3, r1
    c73e:	d328      	bcc.n	c792 <__divsi3+0x72>
    c740:	0c03      	lsrs	r3, r0, #16
    c742:	428b      	cmp	r3, r1
    c744:	d30d      	bcc.n	c762 <__divsi3+0x42>
    c746:	22ff      	movs	r2, #255	; 0xff
    c748:	0209      	lsls	r1, r1, #8
    c74a:	ba12      	rev	r2, r2
    c74c:	0c03      	lsrs	r3, r0, #16
    c74e:	428b      	cmp	r3, r1
    c750:	d302      	bcc.n	c758 <__divsi3+0x38>
    c752:	1212      	asrs	r2, r2, #8
    c754:	0209      	lsls	r1, r1, #8
    c756:	d065      	beq.n	c824 <__divsi3+0x104>
    c758:	0b03      	lsrs	r3, r0, #12
    c75a:	428b      	cmp	r3, r1
    c75c:	d319      	bcc.n	c792 <__divsi3+0x72>
    c75e:	e000      	b.n	c762 <__divsi3+0x42>
    c760:	0a09      	lsrs	r1, r1, #8
    c762:	0bc3      	lsrs	r3, r0, #15
    c764:	428b      	cmp	r3, r1
    c766:	d301      	bcc.n	c76c <__divsi3+0x4c>
    c768:	03cb      	lsls	r3, r1, #15
    c76a:	1ac0      	subs	r0, r0, r3
    c76c:	4152      	adcs	r2, r2
    c76e:	0b83      	lsrs	r3, r0, #14
    c770:	428b      	cmp	r3, r1
    c772:	d301      	bcc.n	c778 <__divsi3+0x58>
    c774:	038b      	lsls	r3, r1, #14
    c776:	1ac0      	subs	r0, r0, r3
    c778:	4152      	adcs	r2, r2
    c77a:	0b43      	lsrs	r3, r0, #13
    c77c:	428b      	cmp	r3, r1
    c77e:	d301      	bcc.n	c784 <__divsi3+0x64>
    c780:	034b      	lsls	r3, r1, #13
    c782:	1ac0      	subs	r0, r0, r3
    c784:	4152      	adcs	r2, r2
    c786:	0b03      	lsrs	r3, r0, #12
    c788:	428b      	cmp	r3, r1
    c78a:	d301      	bcc.n	c790 <__divsi3+0x70>
    c78c:	030b      	lsls	r3, r1, #12
    c78e:	1ac0      	subs	r0, r0, r3
    c790:	4152      	adcs	r2, r2
    c792:	0ac3      	lsrs	r3, r0, #11
    c794:	428b      	cmp	r3, r1
    c796:	d301      	bcc.n	c79c <__divsi3+0x7c>
    c798:	02cb      	lsls	r3, r1, #11
    c79a:	1ac0      	subs	r0, r0, r3
    c79c:	4152      	adcs	r2, r2
    c79e:	0a83      	lsrs	r3, r0, #10
    c7a0:	428b      	cmp	r3, r1
    c7a2:	d301      	bcc.n	c7a8 <__divsi3+0x88>
    c7a4:	028b      	lsls	r3, r1, #10
    c7a6:	1ac0      	subs	r0, r0, r3
    c7a8:	4152      	adcs	r2, r2
    c7aa:	0a43      	lsrs	r3, r0, #9
    c7ac:	428b      	cmp	r3, r1
    c7ae:	d301      	bcc.n	c7b4 <__divsi3+0x94>
    c7b0:	024b      	lsls	r3, r1, #9
    c7b2:	1ac0      	subs	r0, r0, r3
    c7b4:	4152      	adcs	r2, r2
    c7b6:	0a03      	lsrs	r3, r0, #8
    c7b8:	428b      	cmp	r3, r1
    c7ba:	d301      	bcc.n	c7c0 <__divsi3+0xa0>
    c7bc:	020b      	lsls	r3, r1, #8
    c7be:	1ac0      	subs	r0, r0, r3
    c7c0:	4152      	adcs	r2, r2
    c7c2:	d2cd      	bcs.n	c760 <__divsi3+0x40>
    c7c4:	09c3      	lsrs	r3, r0, #7
    c7c6:	428b      	cmp	r3, r1
    c7c8:	d301      	bcc.n	c7ce <__divsi3+0xae>
    c7ca:	01cb      	lsls	r3, r1, #7
    c7cc:	1ac0      	subs	r0, r0, r3
    c7ce:	4152      	adcs	r2, r2
    c7d0:	0983      	lsrs	r3, r0, #6
    c7d2:	428b      	cmp	r3, r1
    c7d4:	d301      	bcc.n	c7da <__divsi3+0xba>
    c7d6:	018b      	lsls	r3, r1, #6
    c7d8:	1ac0      	subs	r0, r0, r3
    c7da:	4152      	adcs	r2, r2
    c7dc:	0943      	lsrs	r3, r0, #5
    c7de:	428b      	cmp	r3, r1
    c7e0:	d301      	bcc.n	c7e6 <__divsi3+0xc6>
    c7e2:	014b      	lsls	r3, r1, #5
    c7e4:	1ac0      	subs	r0, r0, r3
    c7e6:	4152      	adcs	r2, r2
    c7e8:	0903      	lsrs	r3, r0, #4
    c7ea:	428b      	cmp	r3, r1
    c7ec:	d301      	bcc.n	c7f2 <__divsi3+0xd2>
    c7ee:	010b      	lsls	r3, r1, #4
    c7f0:	1ac0      	subs	r0, r0, r3
    c7f2:	4152      	adcs	r2, r2
    c7f4:	08c3      	lsrs	r3, r0, #3
    c7f6:	428b      	cmp	r3, r1
    c7f8:	d301      	bcc.n	c7fe <__divsi3+0xde>
    c7fa:	00cb      	lsls	r3, r1, #3
    c7fc:	1ac0      	subs	r0, r0, r3
    c7fe:	4152      	adcs	r2, r2
    c800:	0883      	lsrs	r3, r0, #2
    c802:	428b      	cmp	r3, r1
    c804:	d301      	bcc.n	c80a <__divsi3+0xea>
    c806:	008b      	lsls	r3, r1, #2
    c808:	1ac0      	subs	r0, r0, r3
    c80a:	4152      	adcs	r2, r2
    c80c:	0843      	lsrs	r3, r0, #1
    c80e:	428b      	cmp	r3, r1
    c810:	d301      	bcc.n	c816 <__divsi3+0xf6>
    c812:	004b      	lsls	r3, r1, #1
    c814:	1ac0      	subs	r0, r0, r3
    c816:	4152      	adcs	r2, r2
    c818:	1a41      	subs	r1, r0, r1
    c81a:	d200      	bcs.n	c81e <__divsi3+0xfe>
    c81c:	4601      	mov	r1, r0
    c81e:	4152      	adcs	r2, r2
    c820:	4610      	mov	r0, r2
    c822:	4770      	bx	lr
    c824:	e05d      	b.n	c8e2 <__divsi3+0x1c2>
    c826:	0fca      	lsrs	r2, r1, #31
    c828:	d000      	beq.n	c82c <__divsi3+0x10c>
    c82a:	4249      	negs	r1, r1
    c82c:	1003      	asrs	r3, r0, #32
    c82e:	d300      	bcc.n	c832 <__divsi3+0x112>
    c830:	4240      	negs	r0, r0
    c832:	4053      	eors	r3, r2
    c834:	2200      	movs	r2, #0
    c836:	469c      	mov	ip, r3
    c838:	0903      	lsrs	r3, r0, #4
    c83a:	428b      	cmp	r3, r1
    c83c:	d32d      	bcc.n	c89a <__divsi3+0x17a>
    c83e:	0a03      	lsrs	r3, r0, #8
    c840:	428b      	cmp	r3, r1
    c842:	d312      	bcc.n	c86a <__divsi3+0x14a>
    c844:	22fc      	movs	r2, #252	; 0xfc
    c846:	0189      	lsls	r1, r1, #6
    c848:	ba12      	rev	r2, r2
    c84a:	0a03      	lsrs	r3, r0, #8
    c84c:	428b      	cmp	r3, r1
    c84e:	d30c      	bcc.n	c86a <__divsi3+0x14a>
    c850:	0189      	lsls	r1, r1, #6
    c852:	1192      	asrs	r2, r2, #6
    c854:	428b      	cmp	r3, r1
    c856:	d308      	bcc.n	c86a <__divsi3+0x14a>
    c858:	0189      	lsls	r1, r1, #6
    c85a:	1192      	asrs	r2, r2, #6
    c85c:	428b      	cmp	r3, r1
    c85e:	d304      	bcc.n	c86a <__divsi3+0x14a>
    c860:	0189      	lsls	r1, r1, #6
    c862:	d03a      	beq.n	c8da <__divsi3+0x1ba>
    c864:	1192      	asrs	r2, r2, #6
    c866:	e000      	b.n	c86a <__divsi3+0x14a>
    c868:	0989      	lsrs	r1, r1, #6
    c86a:	09c3      	lsrs	r3, r0, #7
    c86c:	428b      	cmp	r3, r1
    c86e:	d301      	bcc.n	c874 <__divsi3+0x154>
    c870:	01cb      	lsls	r3, r1, #7
    c872:	1ac0      	subs	r0, r0, r3
    c874:	4152      	adcs	r2, r2
    c876:	0983      	lsrs	r3, r0, #6
    c878:	428b      	cmp	r3, r1
    c87a:	d301      	bcc.n	c880 <__divsi3+0x160>
    c87c:	018b      	lsls	r3, r1, #6
    c87e:	1ac0      	subs	r0, r0, r3
    c880:	4152      	adcs	r2, r2
    c882:	0943      	lsrs	r3, r0, #5
    c884:	428b      	cmp	r3, r1
    c886:	d301      	bcc.n	c88c <__divsi3+0x16c>
    c888:	014b      	lsls	r3, r1, #5
    c88a:	1ac0      	subs	r0, r0, r3
    c88c:	4152      	adcs	r2, r2
    c88e:	0903      	lsrs	r3, r0, #4
    c890:	428b      	cmp	r3, r1
    c892:	d301      	bcc.n	c898 <__divsi3+0x178>
    c894:	010b      	lsls	r3, r1, #4
    c896:	1ac0      	subs	r0, r0, r3
    c898:	4152      	adcs	r2, r2
    c89a:	08c3      	lsrs	r3, r0, #3
    c89c:	428b      	cmp	r3, r1
    c89e:	d301      	bcc.n	c8a4 <__divsi3+0x184>
    c8a0:	00cb      	lsls	r3, r1, #3
    c8a2:	1ac0      	subs	r0, r0, r3
    c8a4:	4152      	adcs	r2, r2
    c8a6:	0883      	lsrs	r3, r0, #2
    c8a8:	428b      	cmp	r3, r1
    c8aa:	d301      	bcc.n	c8b0 <__divsi3+0x190>
    c8ac:	008b      	lsls	r3, r1, #2
    c8ae:	1ac0      	subs	r0, r0, r3
    c8b0:	4152      	adcs	r2, r2
    c8b2:	d2d9      	bcs.n	c868 <__divsi3+0x148>
    c8b4:	0843      	lsrs	r3, r0, #1
    c8b6:	428b      	cmp	r3, r1
    c8b8:	d301      	bcc.n	c8be <__divsi3+0x19e>
    c8ba:	004b      	lsls	r3, r1, #1
    c8bc:	1ac0      	subs	r0, r0, r3
    c8be:	4152      	adcs	r2, r2
    c8c0:	1a41      	subs	r1, r0, r1
    c8c2:	d200      	bcs.n	c8c6 <__divsi3+0x1a6>
    c8c4:	4601      	mov	r1, r0
    c8c6:	4663      	mov	r3, ip
    c8c8:	4152      	adcs	r2, r2
    c8ca:	105b      	asrs	r3, r3, #1
    c8cc:	4610      	mov	r0, r2
    c8ce:	d301      	bcc.n	c8d4 <__divsi3+0x1b4>
    c8d0:	4240      	negs	r0, r0
    c8d2:	2b00      	cmp	r3, #0
    c8d4:	d500      	bpl.n	c8d8 <__divsi3+0x1b8>
    c8d6:	4249      	negs	r1, r1
    c8d8:	4770      	bx	lr
    c8da:	4663      	mov	r3, ip
    c8dc:	105b      	asrs	r3, r3, #1
    c8de:	d300      	bcc.n	c8e2 <__divsi3+0x1c2>
    c8e0:	4240      	negs	r0, r0
    c8e2:	b501      	push	{r0, lr}
    c8e4:	2000      	movs	r0, #0
    c8e6:	f000 f805 	bl	c8f4 <__aeabi_idiv0>
    c8ea:	bd02      	pop	{r1, pc}

0000c8ec <__aeabi_idivmod>:
    c8ec:	2900      	cmp	r1, #0
    c8ee:	d0f8      	beq.n	c8e2 <__divsi3+0x1c2>
    c8f0:	e716      	b.n	c720 <__divsi3>
    c8f2:	4770      	bx	lr

0000c8f4 <__aeabi_idiv0>:
    c8f4:	4770      	bx	lr
    c8f6:	46c0      	nop			; (mov r8, r8)

0000c8f8 <__aeabi_cdrcmple>:
    c8f8:	4684      	mov	ip, r0
    c8fa:	1c10      	adds	r0, r2, #0
    c8fc:	4662      	mov	r2, ip
    c8fe:	468c      	mov	ip, r1
    c900:	1c19      	adds	r1, r3, #0
    c902:	4663      	mov	r3, ip
    c904:	e000      	b.n	c908 <__aeabi_cdcmpeq>
    c906:	46c0      	nop			; (mov r8, r8)

0000c908 <__aeabi_cdcmpeq>:
    c908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c90a:	f001 f9ff 	bl	dd0c <__ledf2>
    c90e:	2800      	cmp	r0, #0
    c910:	d401      	bmi.n	c916 <__aeabi_cdcmpeq+0xe>
    c912:	2100      	movs	r1, #0
    c914:	42c8      	cmn	r0, r1
    c916:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c918 <__aeabi_dcmpeq>:
    c918:	b510      	push	{r4, lr}
    c91a:	f001 f959 	bl	dbd0 <__eqdf2>
    c91e:	4240      	negs	r0, r0
    c920:	3001      	adds	r0, #1
    c922:	bd10      	pop	{r4, pc}

0000c924 <__aeabi_dcmplt>:
    c924:	b510      	push	{r4, lr}
    c926:	f001 f9f1 	bl	dd0c <__ledf2>
    c92a:	2800      	cmp	r0, #0
    c92c:	db01      	blt.n	c932 <__aeabi_dcmplt+0xe>
    c92e:	2000      	movs	r0, #0
    c930:	bd10      	pop	{r4, pc}
    c932:	2001      	movs	r0, #1
    c934:	bd10      	pop	{r4, pc}
    c936:	46c0      	nop			; (mov r8, r8)

0000c938 <__aeabi_dcmple>:
    c938:	b510      	push	{r4, lr}
    c93a:	f001 f9e7 	bl	dd0c <__ledf2>
    c93e:	2800      	cmp	r0, #0
    c940:	dd01      	ble.n	c946 <__aeabi_dcmple+0xe>
    c942:	2000      	movs	r0, #0
    c944:	bd10      	pop	{r4, pc}
    c946:	2001      	movs	r0, #1
    c948:	bd10      	pop	{r4, pc}
    c94a:	46c0      	nop			; (mov r8, r8)

0000c94c <__aeabi_dcmpgt>:
    c94c:	b510      	push	{r4, lr}
    c94e:	f001 f979 	bl	dc44 <__gedf2>
    c952:	2800      	cmp	r0, #0
    c954:	dc01      	bgt.n	c95a <__aeabi_dcmpgt+0xe>
    c956:	2000      	movs	r0, #0
    c958:	bd10      	pop	{r4, pc}
    c95a:	2001      	movs	r0, #1
    c95c:	bd10      	pop	{r4, pc}
    c95e:	46c0      	nop			; (mov r8, r8)

0000c960 <__aeabi_dcmpge>:
    c960:	b510      	push	{r4, lr}
    c962:	f001 f96f 	bl	dc44 <__gedf2>
    c966:	2800      	cmp	r0, #0
    c968:	da01      	bge.n	c96e <__aeabi_dcmpge+0xe>
    c96a:	2000      	movs	r0, #0
    c96c:	bd10      	pop	{r4, pc}
    c96e:	2001      	movs	r0, #1
    c970:	bd10      	pop	{r4, pc}
    c972:	46c0      	nop			; (mov r8, r8)

0000c974 <__aeabi_uldivmod>:
    c974:	2b00      	cmp	r3, #0
    c976:	d111      	bne.n	c99c <__aeabi_uldivmod+0x28>
    c978:	2a00      	cmp	r2, #0
    c97a:	d10f      	bne.n	c99c <__aeabi_uldivmod+0x28>
    c97c:	2900      	cmp	r1, #0
    c97e:	d100      	bne.n	c982 <__aeabi_uldivmod+0xe>
    c980:	2800      	cmp	r0, #0
    c982:	d002      	beq.n	c98a <__aeabi_uldivmod+0x16>
    c984:	2100      	movs	r1, #0
    c986:	43c9      	mvns	r1, r1
    c988:	1c08      	adds	r0, r1, #0
    c98a:	b407      	push	{r0, r1, r2}
    c98c:	4802      	ldr	r0, [pc, #8]	; (c998 <__aeabi_uldivmod+0x24>)
    c98e:	a102      	add	r1, pc, #8	; (adr r1, c998 <__aeabi_uldivmod+0x24>)
    c990:	1840      	adds	r0, r0, r1
    c992:	9002      	str	r0, [sp, #8]
    c994:	bd03      	pop	{r0, r1, pc}
    c996:	46c0      	nop			; (mov r8, r8)
    c998:	ffffff5d 	.word	0xffffff5d
    c99c:	b403      	push	{r0, r1}
    c99e:	4668      	mov	r0, sp
    c9a0:	b501      	push	{r0, lr}
    c9a2:	9802      	ldr	r0, [sp, #8]
    c9a4:	f000 f82e 	bl	ca04 <__udivmoddi4>
    c9a8:	9b01      	ldr	r3, [sp, #4]
    c9aa:	469e      	mov	lr, r3
    c9ac:	b002      	add	sp, #8
    c9ae:	bc0c      	pop	{r2, r3}
    c9b0:	4770      	bx	lr
    c9b2:	46c0      	nop			; (mov r8, r8)

0000c9b4 <__ffssi2>:
    c9b4:	b510      	push	{r4, lr}
    c9b6:	2300      	movs	r3, #0
    c9b8:	2800      	cmp	r0, #0
    c9ba:	d002      	beq.n	c9c2 <__ffssi2+0xe>
    c9bc:	f002 f8c8 	bl	eb50 <__ctzsi2>
    c9c0:	1c43      	adds	r3, r0, #1
    c9c2:	0018      	movs	r0, r3
    c9c4:	bd10      	pop	{r4, pc}
    c9c6:	46c0      	nop			; (mov r8, r8)

0000c9c8 <__aeabi_d2uiz>:
    c9c8:	b570      	push	{r4, r5, r6, lr}
    c9ca:	2200      	movs	r2, #0
    c9cc:	4b0c      	ldr	r3, [pc, #48]	; (ca00 <__aeabi_d2uiz+0x38>)
    c9ce:	0004      	movs	r4, r0
    c9d0:	000d      	movs	r5, r1
    c9d2:	f7ff ffc5 	bl	c960 <__aeabi_dcmpge>
    c9d6:	2800      	cmp	r0, #0
    c9d8:	d104      	bne.n	c9e4 <__aeabi_d2uiz+0x1c>
    c9da:	0020      	movs	r0, r4
    c9dc:	0029      	movs	r1, r5
    c9de:	f001 ff8d 	bl	e8fc <__aeabi_d2iz>
    c9e2:	bd70      	pop	{r4, r5, r6, pc}
    c9e4:	4b06      	ldr	r3, [pc, #24]	; (ca00 <__aeabi_d2uiz+0x38>)
    c9e6:	2200      	movs	r2, #0
    c9e8:	0020      	movs	r0, r4
    c9ea:	0029      	movs	r1, r5
    c9ec:	f001 fc70 	bl	e2d0 <__aeabi_dsub>
    c9f0:	f001 ff84 	bl	e8fc <__aeabi_d2iz>
    c9f4:	2380      	movs	r3, #128	; 0x80
    c9f6:	061b      	lsls	r3, r3, #24
    c9f8:	469c      	mov	ip, r3
    c9fa:	4460      	add	r0, ip
    c9fc:	e7f1      	b.n	c9e2 <__aeabi_d2uiz+0x1a>
    c9fe:	46c0      	nop			; (mov r8, r8)
    ca00:	41e00000 	.word	0x41e00000

0000ca04 <__udivmoddi4>:
    ca04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca06:	4657      	mov	r7, sl
    ca08:	464e      	mov	r6, r9
    ca0a:	4645      	mov	r5, r8
    ca0c:	46de      	mov	lr, fp
    ca0e:	b5e0      	push	{r5, r6, r7, lr}
    ca10:	0004      	movs	r4, r0
    ca12:	b083      	sub	sp, #12
    ca14:	000d      	movs	r5, r1
    ca16:	4692      	mov	sl, r2
    ca18:	4699      	mov	r9, r3
    ca1a:	428b      	cmp	r3, r1
    ca1c:	d82f      	bhi.n	ca7e <__udivmoddi4+0x7a>
    ca1e:	d02c      	beq.n	ca7a <__udivmoddi4+0x76>
    ca20:	4649      	mov	r1, r9
    ca22:	4650      	mov	r0, sl
    ca24:	f002 f888 	bl	eb38 <__clzdi2>
    ca28:	0029      	movs	r1, r5
    ca2a:	0006      	movs	r6, r0
    ca2c:	0020      	movs	r0, r4
    ca2e:	f002 f883 	bl	eb38 <__clzdi2>
    ca32:	1a33      	subs	r3, r6, r0
    ca34:	4698      	mov	r8, r3
    ca36:	3b20      	subs	r3, #32
    ca38:	469b      	mov	fp, r3
    ca3a:	d500      	bpl.n	ca3e <__udivmoddi4+0x3a>
    ca3c:	e074      	b.n	cb28 <__udivmoddi4+0x124>
    ca3e:	4653      	mov	r3, sl
    ca40:	465a      	mov	r2, fp
    ca42:	4093      	lsls	r3, r2
    ca44:	001f      	movs	r7, r3
    ca46:	4653      	mov	r3, sl
    ca48:	4642      	mov	r2, r8
    ca4a:	4093      	lsls	r3, r2
    ca4c:	001e      	movs	r6, r3
    ca4e:	42af      	cmp	r7, r5
    ca50:	d829      	bhi.n	caa6 <__udivmoddi4+0xa2>
    ca52:	d026      	beq.n	caa2 <__udivmoddi4+0x9e>
    ca54:	465b      	mov	r3, fp
    ca56:	1ba4      	subs	r4, r4, r6
    ca58:	41bd      	sbcs	r5, r7
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	da00      	bge.n	ca60 <__udivmoddi4+0x5c>
    ca5e:	e079      	b.n	cb54 <__udivmoddi4+0x150>
    ca60:	2200      	movs	r2, #0
    ca62:	2300      	movs	r3, #0
    ca64:	9200      	str	r2, [sp, #0]
    ca66:	9301      	str	r3, [sp, #4]
    ca68:	2301      	movs	r3, #1
    ca6a:	465a      	mov	r2, fp
    ca6c:	4093      	lsls	r3, r2
    ca6e:	9301      	str	r3, [sp, #4]
    ca70:	2301      	movs	r3, #1
    ca72:	4642      	mov	r2, r8
    ca74:	4093      	lsls	r3, r2
    ca76:	9300      	str	r3, [sp, #0]
    ca78:	e019      	b.n	caae <__udivmoddi4+0xaa>
    ca7a:	4282      	cmp	r2, r0
    ca7c:	d9d0      	bls.n	ca20 <__udivmoddi4+0x1c>
    ca7e:	2200      	movs	r2, #0
    ca80:	2300      	movs	r3, #0
    ca82:	9200      	str	r2, [sp, #0]
    ca84:	9301      	str	r3, [sp, #4]
    ca86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d001      	beq.n	ca90 <__udivmoddi4+0x8c>
    ca8c:	601c      	str	r4, [r3, #0]
    ca8e:	605d      	str	r5, [r3, #4]
    ca90:	9800      	ldr	r0, [sp, #0]
    ca92:	9901      	ldr	r1, [sp, #4]
    ca94:	b003      	add	sp, #12
    ca96:	bc3c      	pop	{r2, r3, r4, r5}
    ca98:	4690      	mov	r8, r2
    ca9a:	4699      	mov	r9, r3
    ca9c:	46a2      	mov	sl, r4
    ca9e:	46ab      	mov	fp, r5
    caa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caa2:	42a3      	cmp	r3, r4
    caa4:	d9d6      	bls.n	ca54 <__udivmoddi4+0x50>
    caa6:	2200      	movs	r2, #0
    caa8:	2300      	movs	r3, #0
    caaa:	9200      	str	r2, [sp, #0]
    caac:	9301      	str	r3, [sp, #4]
    caae:	4643      	mov	r3, r8
    cab0:	2b00      	cmp	r3, #0
    cab2:	d0e8      	beq.n	ca86 <__udivmoddi4+0x82>
    cab4:	07fb      	lsls	r3, r7, #31
    cab6:	0872      	lsrs	r2, r6, #1
    cab8:	431a      	orrs	r2, r3
    caba:	4646      	mov	r6, r8
    cabc:	087b      	lsrs	r3, r7, #1
    cabe:	e00e      	b.n	cade <__udivmoddi4+0xda>
    cac0:	42ab      	cmp	r3, r5
    cac2:	d101      	bne.n	cac8 <__udivmoddi4+0xc4>
    cac4:	42a2      	cmp	r2, r4
    cac6:	d80c      	bhi.n	cae2 <__udivmoddi4+0xde>
    cac8:	1aa4      	subs	r4, r4, r2
    caca:	419d      	sbcs	r5, r3
    cacc:	2001      	movs	r0, #1
    cace:	1924      	adds	r4, r4, r4
    cad0:	416d      	adcs	r5, r5
    cad2:	2100      	movs	r1, #0
    cad4:	3e01      	subs	r6, #1
    cad6:	1824      	adds	r4, r4, r0
    cad8:	414d      	adcs	r5, r1
    cada:	2e00      	cmp	r6, #0
    cadc:	d006      	beq.n	caec <__udivmoddi4+0xe8>
    cade:	42ab      	cmp	r3, r5
    cae0:	d9ee      	bls.n	cac0 <__udivmoddi4+0xbc>
    cae2:	3e01      	subs	r6, #1
    cae4:	1924      	adds	r4, r4, r4
    cae6:	416d      	adcs	r5, r5
    cae8:	2e00      	cmp	r6, #0
    caea:	d1f8      	bne.n	cade <__udivmoddi4+0xda>
    caec:	465b      	mov	r3, fp
    caee:	9800      	ldr	r0, [sp, #0]
    caf0:	9901      	ldr	r1, [sp, #4]
    caf2:	1900      	adds	r0, r0, r4
    caf4:	4169      	adcs	r1, r5
    caf6:	2b00      	cmp	r3, #0
    caf8:	db22      	blt.n	cb40 <__udivmoddi4+0x13c>
    cafa:	002b      	movs	r3, r5
    cafc:	465a      	mov	r2, fp
    cafe:	40d3      	lsrs	r3, r2
    cb00:	002a      	movs	r2, r5
    cb02:	4644      	mov	r4, r8
    cb04:	40e2      	lsrs	r2, r4
    cb06:	001c      	movs	r4, r3
    cb08:	465b      	mov	r3, fp
    cb0a:	0015      	movs	r5, r2
    cb0c:	2b00      	cmp	r3, #0
    cb0e:	db2c      	blt.n	cb6a <__udivmoddi4+0x166>
    cb10:	0026      	movs	r6, r4
    cb12:	409e      	lsls	r6, r3
    cb14:	0033      	movs	r3, r6
    cb16:	0026      	movs	r6, r4
    cb18:	4647      	mov	r7, r8
    cb1a:	40be      	lsls	r6, r7
    cb1c:	0032      	movs	r2, r6
    cb1e:	1a80      	subs	r0, r0, r2
    cb20:	4199      	sbcs	r1, r3
    cb22:	9000      	str	r0, [sp, #0]
    cb24:	9101      	str	r1, [sp, #4]
    cb26:	e7ae      	b.n	ca86 <__udivmoddi4+0x82>
    cb28:	4642      	mov	r2, r8
    cb2a:	2320      	movs	r3, #32
    cb2c:	1a9b      	subs	r3, r3, r2
    cb2e:	4652      	mov	r2, sl
    cb30:	40da      	lsrs	r2, r3
    cb32:	4641      	mov	r1, r8
    cb34:	0013      	movs	r3, r2
    cb36:	464a      	mov	r2, r9
    cb38:	408a      	lsls	r2, r1
    cb3a:	0017      	movs	r7, r2
    cb3c:	431f      	orrs	r7, r3
    cb3e:	e782      	b.n	ca46 <__udivmoddi4+0x42>
    cb40:	4642      	mov	r2, r8
    cb42:	2320      	movs	r3, #32
    cb44:	1a9b      	subs	r3, r3, r2
    cb46:	002a      	movs	r2, r5
    cb48:	4646      	mov	r6, r8
    cb4a:	409a      	lsls	r2, r3
    cb4c:	0023      	movs	r3, r4
    cb4e:	40f3      	lsrs	r3, r6
    cb50:	4313      	orrs	r3, r2
    cb52:	e7d5      	b.n	cb00 <__udivmoddi4+0xfc>
    cb54:	4642      	mov	r2, r8
    cb56:	2320      	movs	r3, #32
    cb58:	2100      	movs	r1, #0
    cb5a:	1a9b      	subs	r3, r3, r2
    cb5c:	2200      	movs	r2, #0
    cb5e:	9100      	str	r1, [sp, #0]
    cb60:	9201      	str	r2, [sp, #4]
    cb62:	2201      	movs	r2, #1
    cb64:	40da      	lsrs	r2, r3
    cb66:	9201      	str	r2, [sp, #4]
    cb68:	e782      	b.n	ca70 <__udivmoddi4+0x6c>
    cb6a:	4642      	mov	r2, r8
    cb6c:	2320      	movs	r3, #32
    cb6e:	0026      	movs	r6, r4
    cb70:	1a9b      	subs	r3, r3, r2
    cb72:	40de      	lsrs	r6, r3
    cb74:	002f      	movs	r7, r5
    cb76:	46b4      	mov	ip, r6
    cb78:	4097      	lsls	r7, r2
    cb7a:	4666      	mov	r6, ip
    cb7c:	003b      	movs	r3, r7
    cb7e:	4333      	orrs	r3, r6
    cb80:	e7c9      	b.n	cb16 <__udivmoddi4+0x112>
    cb82:	46c0      	nop			; (mov r8, r8)

0000cb84 <__aeabi_fsub>:
    cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb86:	464f      	mov	r7, r9
    cb88:	46d6      	mov	lr, sl
    cb8a:	4646      	mov	r6, r8
    cb8c:	0044      	lsls	r4, r0, #1
    cb8e:	b5c0      	push	{r6, r7, lr}
    cb90:	0fc2      	lsrs	r2, r0, #31
    cb92:	0247      	lsls	r7, r0, #9
    cb94:	0248      	lsls	r0, r1, #9
    cb96:	0a40      	lsrs	r0, r0, #9
    cb98:	4684      	mov	ip, r0
    cb9a:	4666      	mov	r6, ip
    cb9c:	0a7b      	lsrs	r3, r7, #9
    cb9e:	0048      	lsls	r0, r1, #1
    cba0:	0fc9      	lsrs	r1, r1, #31
    cba2:	469a      	mov	sl, r3
    cba4:	0e24      	lsrs	r4, r4, #24
    cba6:	0015      	movs	r5, r2
    cba8:	00db      	lsls	r3, r3, #3
    cbaa:	0e00      	lsrs	r0, r0, #24
    cbac:	4689      	mov	r9, r1
    cbae:	00f6      	lsls	r6, r6, #3
    cbb0:	28ff      	cmp	r0, #255	; 0xff
    cbb2:	d100      	bne.n	cbb6 <__aeabi_fsub+0x32>
    cbb4:	e08f      	b.n	ccd6 <__aeabi_fsub+0x152>
    cbb6:	2101      	movs	r1, #1
    cbb8:	464f      	mov	r7, r9
    cbba:	404f      	eors	r7, r1
    cbbc:	0039      	movs	r1, r7
    cbbe:	4291      	cmp	r1, r2
    cbc0:	d066      	beq.n	cc90 <__aeabi_fsub+0x10c>
    cbc2:	1a22      	subs	r2, r4, r0
    cbc4:	2a00      	cmp	r2, #0
    cbc6:	dc00      	bgt.n	cbca <__aeabi_fsub+0x46>
    cbc8:	e09d      	b.n	cd06 <__aeabi_fsub+0x182>
    cbca:	2800      	cmp	r0, #0
    cbcc:	d13d      	bne.n	cc4a <__aeabi_fsub+0xc6>
    cbce:	2e00      	cmp	r6, #0
    cbd0:	d100      	bne.n	cbd4 <__aeabi_fsub+0x50>
    cbd2:	e08b      	b.n	ccec <__aeabi_fsub+0x168>
    cbd4:	1e51      	subs	r1, r2, #1
    cbd6:	2900      	cmp	r1, #0
    cbd8:	d000      	beq.n	cbdc <__aeabi_fsub+0x58>
    cbda:	e0b5      	b.n	cd48 <__aeabi_fsub+0x1c4>
    cbdc:	2401      	movs	r4, #1
    cbde:	1b9b      	subs	r3, r3, r6
    cbe0:	015a      	lsls	r2, r3, #5
    cbe2:	d544      	bpl.n	cc6e <__aeabi_fsub+0xea>
    cbe4:	019b      	lsls	r3, r3, #6
    cbe6:	099f      	lsrs	r7, r3, #6
    cbe8:	0038      	movs	r0, r7
    cbea:	f001 ff87 	bl	eafc <__clzsi2>
    cbee:	3805      	subs	r0, #5
    cbf0:	4087      	lsls	r7, r0
    cbf2:	4284      	cmp	r4, r0
    cbf4:	dd00      	ble.n	cbf8 <__aeabi_fsub+0x74>
    cbf6:	e096      	b.n	cd26 <__aeabi_fsub+0x1a2>
    cbf8:	1b04      	subs	r4, r0, r4
    cbfa:	003a      	movs	r2, r7
    cbfc:	2020      	movs	r0, #32
    cbfe:	3401      	adds	r4, #1
    cc00:	40e2      	lsrs	r2, r4
    cc02:	1b04      	subs	r4, r0, r4
    cc04:	40a7      	lsls	r7, r4
    cc06:	003b      	movs	r3, r7
    cc08:	1e5f      	subs	r7, r3, #1
    cc0a:	41bb      	sbcs	r3, r7
    cc0c:	2400      	movs	r4, #0
    cc0e:	4313      	orrs	r3, r2
    cc10:	075a      	lsls	r2, r3, #29
    cc12:	d004      	beq.n	cc1e <__aeabi_fsub+0x9a>
    cc14:	220f      	movs	r2, #15
    cc16:	401a      	ands	r2, r3
    cc18:	2a04      	cmp	r2, #4
    cc1a:	d000      	beq.n	cc1e <__aeabi_fsub+0x9a>
    cc1c:	3304      	adds	r3, #4
    cc1e:	015a      	lsls	r2, r3, #5
    cc20:	d527      	bpl.n	cc72 <__aeabi_fsub+0xee>
    cc22:	3401      	adds	r4, #1
    cc24:	2cff      	cmp	r4, #255	; 0xff
    cc26:	d100      	bne.n	cc2a <__aeabi_fsub+0xa6>
    cc28:	e079      	b.n	cd1e <__aeabi_fsub+0x19a>
    cc2a:	2201      	movs	r2, #1
    cc2c:	019b      	lsls	r3, r3, #6
    cc2e:	0a5b      	lsrs	r3, r3, #9
    cc30:	b2e4      	uxtb	r4, r4
    cc32:	402a      	ands	r2, r5
    cc34:	025b      	lsls	r3, r3, #9
    cc36:	05e4      	lsls	r4, r4, #23
    cc38:	0a58      	lsrs	r0, r3, #9
    cc3a:	07d2      	lsls	r2, r2, #31
    cc3c:	4320      	orrs	r0, r4
    cc3e:	4310      	orrs	r0, r2
    cc40:	bc1c      	pop	{r2, r3, r4}
    cc42:	4690      	mov	r8, r2
    cc44:	4699      	mov	r9, r3
    cc46:	46a2      	mov	sl, r4
    cc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc4a:	2cff      	cmp	r4, #255	; 0xff
    cc4c:	d0e0      	beq.n	cc10 <__aeabi_fsub+0x8c>
    cc4e:	2180      	movs	r1, #128	; 0x80
    cc50:	04c9      	lsls	r1, r1, #19
    cc52:	430e      	orrs	r6, r1
    cc54:	2a1b      	cmp	r2, #27
    cc56:	dc7b      	bgt.n	cd50 <__aeabi_fsub+0x1cc>
    cc58:	0031      	movs	r1, r6
    cc5a:	2020      	movs	r0, #32
    cc5c:	40d1      	lsrs	r1, r2
    cc5e:	1a82      	subs	r2, r0, r2
    cc60:	4096      	lsls	r6, r2
    cc62:	1e72      	subs	r2, r6, #1
    cc64:	4196      	sbcs	r6, r2
    cc66:	430e      	orrs	r6, r1
    cc68:	1b9b      	subs	r3, r3, r6
    cc6a:	015a      	lsls	r2, r3, #5
    cc6c:	d4ba      	bmi.n	cbe4 <__aeabi_fsub+0x60>
    cc6e:	075a      	lsls	r2, r3, #29
    cc70:	d1d0      	bne.n	cc14 <__aeabi_fsub+0x90>
    cc72:	2201      	movs	r2, #1
    cc74:	08df      	lsrs	r7, r3, #3
    cc76:	402a      	ands	r2, r5
    cc78:	2cff      	cmp	r4, #255	; 0xff
    cc7a:	d133      	bne.n	cce4 <__aeabi_fsub+0x160>
    cc7c:	2f00      	cmp	r7, #0
    cc7e:	d100      	bne.n	cc82 <__aeabi_fsub+0xfe>
    cc80:	e0a8      	b.n	cdd4 <__aeabi_fsub+0x250>
    cc82:	2380      	movs	r3, #128	; 0x80
    cc84:	03db      	lsls	r3, r3, #15
    cc86:	433b      	orrs	r3, r7
    cc88:	025b      	lsls	r3, r3, #9
    cc8a:	0a5b      	lsrs	r3, r3, #9
    cc8c:	24ff      	movs	r4, #255	; 0xff
    cc8e:	e7d1      	b.n	cc34 <__aeabi_fsub+0xb0>
    cc90:	1a21      	subs	r1, r4, r0
    cc92:	2900      	cmp	r1, #0
    cc94:	dd4c      	ble.n	cd30 <__aeabi_fsub+0x1ac>
    cc96:	2800      	cmp	r0, #0
    cc98:	d02a      	beq.n	ccf0 <__aeabi_fsub+0x16c>
    cc9a:	2cff      	cmp	r4, #255	; 0xff
    cc9c:	d0b8      	beq.n	cc10 <__aeabi_fsub+0x8c>
    cc9e:	2080      	movs	r0, #128	; 0x80
    cca0:	04c0      	lsls	r0, r0, #19
    cca2:	4306      	orrs	r6, r0
    cca4:	291b      	cmp	r1, #27
    cca6:	dd00      	ble.n	ccaa <__aeabi_fsub+0x126>
    cca8:	e0af      	b.n	ce0a <__aeabi_fsub+0x286>
    ccaa:	0030      	movs	r0, r6
    ccac:	2720      	movs	r7, #32
    ccae:	40c8      	lsrs	r0, r1
    ccb0:	1a79      	subs	r1, r7, r1
    ccb2:	408e      	lsls	r6, r1
    ccb4:	1e71      	subs	r1, r6, #1
    ccb6:	418e      	sbcs	r6, r1
    ccb8:	4306      	orrs	r6, r0
    ccba:	199b      	adds	r3, r3, r6
    ccbc:	0159      	lsls	r1, r3, #5
    ccbe:	d5d6      	bpl.n	cc6e <__aeabi_fsub+0xea>
    ccc0:	3401      	adds	r4, #1
    ccc2:	2cff      	cmp	r4, #255	; 0xff
    ccc4:	d100      	bne.n	ccc8 <__aeabi_fsub+0x144>
    ccc6:	e085      	b.n	cdd4 <__aeabi_fsub+0x250>
    ccc8:	2201      	movs	r2, #1
    ccca:	497a      	ldr	r1, [pc, #488]	; (ceb4 <__aeabi_fsub+0x330>)
    cccc:	401a      	ands	r2, r3
    ccce:	085b      	lsrs	r3, r3, #1
    ccd0:	400b      	ands	r3, r1
    ccd2:	4313      	orrs	r3, r2
    ccd4:	e79c      	b.n	cc10 <__aeabi_fsub+0x8c>
    ccd6:	2e00      	cmp	r6, #0
    ccd8:	d000      	beq.n	ccdc <__aeabi_fsub+0x158>
    ccda:	e770      	b.n	cbbe <__aeabi_fsub+0x3a>
    ccdc:	e76b      	b.n	cbb6 <__aeabi_fsub+0x32>
    ccde:	1e3b      	subs	r3, r7, #0
    cce0:	d1c5      	bne.n	cc6e <__aeabi_fsub+0xea>
    cce2:	2200      	movs	r2, #0
    cce4:	027b      	lsls	r3, r7, #9
    cce6:	0a5b      	lsrs	r3, r3, #9
    cce8:	b2e4      	uxtb	r4, r4
    ccea:	e7a3      	b.n	cc34 <__aeabi_fsub+0xb0>
    ccec:	0014      	movs	r4, r2
    ccee:	e78f      	b.n	cc10 <__aeabi_fsub+0x8c>
    ccf0:	2e00      	cmp	r6, #0
    ccf2:	d04d      	beq.n	cd90 <__aeabi_fsub+0x20c>
    ccf4:	1e48      	subs	r0, r1, #1
    ccf6:	2800      	cmp	r0, #0
    ccf8:	d157      	bne.n	cdaa <__aeabi_fsub+0x226>
    ccfa:	199b      	adds	r3, r3, r6
    ccfc:	2401      	movs	r4, #1
    ccfe:	015a      	lsls	r2, r3, #5
    cd00:	d5b5      	bpl.n	cc6e <__aeabi_fsub+0xea>
    cd02:	2402      	movs	r4, #2
    cd04:	e7e0      	b.n	ccc8 <__aeabi_fsub+0x144>
    cd06:	2a00      	cmp	r2, #0
    cd08:	d125      	bne.n	cd56 <__aeabi_fsub+0x1d2>
    cd0a:	1c62      	adds	r2, r4, #1
    cd0c:	b2d2      	uxtb	r2, r2
    cd0e:	2a01      	cmp	r2, #1
    cd10:	dd72      	ble.n	cdf8 <__aeabi_fsub+0x274>
    cd12:	1b9f      	subs	r7, r3, r6
    cd14:	017a      	lsls	r2, r7, #5
    cd16:	d535      	bpl.n	cd84 <__aeabi_fsub+0x200>
    cd18:	1af7      	subs	r7, r6, r3
    cd1a:	000d      	movs	r5, r1
    cd1c:	e764      	b.n	cbe8 <__aeabi_fsub+0x64>
    cd1e:	2201      	movs	r2, #1
    cd20:	2300      	movs	r3, #0
    cd22:	402a      	ands	r2, r5
    cd24:	e786      	b.n	cc34 <__aeabi_fsub+0xb0>
    cd26:	003b      	movs	r3, r7
    cd28:	4a63      	ldr	r2, [pc, #396]	; (ceb8 <__aeabi_fsub+0x334>)
    cd2a:	1a24      	subs	r4, r4, r0
    cd2c:	4013      	ands	r3, r2
    cd2e:	e76f      	b.n	cc10 <__aeabi_fsub+0x8c>
    cd30:	2900      	cmp	r1, #0
    cd32:	d16c      	bne.n	ce0e <__aeabi_fsub+0x28a>
    cd34:	1c61      	adds	r1, r4, #1
    cd36:	b2c8      	uxtb	r0, r1
    cd38:	2801      	cmp	r0, #1
    cd3a:	dd4e      	ble.n	cdda <__aeabi_fsub+0x256>
    cd3c:	29ff      	cmp	r1, #255	; 0xff
    cd3e:	d049      	beq.n	cdd4 <__aeabi_fsub+0x250>
    cd40:	199b      	adds	r3, r3, r6
    cd42:	085b      	lsrs	r3, r3, #1
    cd44:	000c      	movs	r4, r1
    cd46:	e763      	b.n	cc10 <__aeabi_fsub+0x8c>
    cd48:	2aff      	cmp	r2, #255	; 0xff
    cd4a:	d041      	beq.n	cdd0 <__aeabi_fsub+0x24c>
    cd4c:	000a      	movs	r2, r1
    cd4e:	e781      	b.n	cc54 <__aeabi_fsub+0xd0>
    cd50:	2601      	movs	r6, #1
    cd52:	1b9b      	subs	r3, r3, r6
    cd54:	e789      	b.n	cc6a <__aeabi_fsub+0xe6>
    cd56:	2c00      	cmp	r4, #0
    cd58:	d01c      	beq.n	cd94 <__aeabi_fsub+0x210>
    cd5a:	28ff      	cmp	r0, #255	; 0xff
    cd5c:	d021      	beq.n	cda2 <__aeabi_fsub+0x21e>
    cd5e:	2480      	movs	r4, #128	; 0x80
    cd60:	04e4      	lsls	r4, r4, #19
    cd62:	4252      	negs	r2, r2
    cd64:	4323      	orrs	r3, r4
    cd66:	2a1b      	cmp	r2, #27
    cd68:	dd00      	ble.n	cd6c <__aeabi_fsub+0x1e8>
    cd6a:	e096      	b.n	ce9a <__aeabi_fsub+0x316>
    cd6c:	001c      	movs	r4, r3
    cd6e:	2520      	movs	r5, #32
    cd70:	40d4      	lsrs	r4, r2
    cd72:	1aaa      	subs	r2, r5, r2
    cd74:	4093      	lsls	r3, r2
    cd76:	1e5a      	subs	r2, r3, #1
    cd78:	4193      	sbcs	r3, r2
    cd7a:	4323      	orrs	r3, r4
    cd7c:	1af3      	subs	r3, r6, r3
    cd7e:	0004      	movs	r4, r0
    cd80:	000d      	movs	r5, r1
    cd82:	e72d      	b.n	cbe0 <__aeabi_fsub+0x5c>
    cd84:	2f00      	cmp	r7, #0
    cd86:	d000      	beq.n	cd8a <__aeabi_fsub+0x206>
    cd88:	e72e      	b.n	cbe8 <__aeabi_fsub+0x64>
    cd8a:	2200      	movs	r2, #0
    cd8c:	2400      	movs	r4, #0
    cd8e:	e7a9      	b.n	cce4 <__aeabi_fsub+0x160>
    cd90:	000c      	movs	r4, r1
    cd92:	e73d      	b.n	cc10 <__aeabi_fsub+0x8c>
    cd94:	2b00      	cmp	r3, #0
    cd96:	d058      	beq.n	ce4a <__aeabi_fsub+0x2c6>
    cd98:	43d2      	mvns	r2, r2
    cd9a:	2a00      	cmp	r2, #0
    cd9c:	d0ee      	beq.n	cd7c <__aeabi_fsub+0x1f8>
    cd9e:	28ff      	cmp	r0, #255	; 0xff
    cda0:	d1e1      	bne.n	cd66 <__aeabi_fsub+0x1e2>
    cda2:	0033      	movs	r3, r6
    cda4:	24ff      	movs	r4, #255	; 0xff
    cda6:	000d      	movs	r5, r1
    cda8:	e732      	b.n	cc10 <__aeabi_fsub+0x8c>
    cdaa:	29ff      	cmp	r1, #255	; 0xff
    cdac:	d010      	beq.n	cdd0 <__aeabi_fsub+0x24c>
    cdae:	0001      	movs	r1, r0
    cdb0:	e778      	b.n	cca4 <__aeabi_fsub+0x120>
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d06e      	beq.n	ce94 <__aeabi_fsub+0x310>
    cdb6:	24ff      	movs	r4, #255	; 0xff
    cdb8:	2e00      	cmp	r6, #0
    cdba:	d100      	bne.n	cdbe <__aeabi_fsub+0x23a>
    cdbc:	e728      	b.n	cc10 <__aeabi_fsub+0x8c>
    cdbe:	2280      	movs	r2, #128	; 0x80
    cdc0:	4651      	mov	r1, sl
    cdc2:	03d2      	lsls	r2, r2, #15
    cdc4:	4211      	tst	r1, r2
    cdc6:	d003      	beq.n	cdd0 <__aeabi_fsub+0x24c>
    cdc8:	4661      	mov	r1, ip
    cdca:	4211      	tst	r1, r2
    cdcc:	d100      	bne.n	cdd0 <__aeabi_fsub+0x24c>
    cdce:	0033      	movs	r3, r6
    cdd0:	24ff      	movs	r4, #255	; 0xff
    cdd2:	e71d      	b.n	cc10 <__aeabi_fsub+0x8c>
    cdd4:	24ff      	movs	r4, #255	; 0xff
    cdd6:	2300      	movs	r3, #0
    cdd8:	e72c      	b.n	cc34 <__aeabi_fsub+0xb0>
    cdda:	2c00      	cmp	r4, #0
    cddc:	d1e9      	bne.n	cdb2 <__aeabi_fsub+0x22e>
    cdde:	2b00      	cmp	r3, #0
    cde0:	d063      	beq.n	ceaa <__aeabi_fsub+0x326>
    cde2:	2e00      	cmp	r6, #0
    cde4:	d100      	bne.n	cde8 <__aeabi_fsub+0x264>
    cde6:	e713      	b.n	cc10 <__aeabi_fsub+0x8c>
    cde8:	199b      	adds	r3, r3, r6
    cdea:	015a      	lsls	r2, r3, #5
    cdec:	d400      	bmi.n	cdf0 <__aeabi_fsub+0x26c>
    cdee:	e73e      	b.n	cc6e <__aeabi_fsub+0xea>
    cdf0:	4a31      	ldr	r2, [pc, #196]	; (ceb8 <__aeabi_fsub+0x334>)
    cdf2:	000c      	movs	r4, r1
    cdf4:	4013      	ands	r3, r2
    cdf6:	e70b      	b.n	cc10 <__aeabi_fsub+0x8c>
    cdf8:	2c00      	cmp	r4, #0
    cdfa:	d11e      	bne.n	ce3a <__aeabi_fsub+0x2b6>
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d12f      	bne.n	ce60 <__aeabi_fsub+0x2dc>
    ce00:	2e00      	cmp	r6, #0
    ce02:	d04f      	beq.n	cea4 <__aeabi_fsub+0x320>
    ce04:	0033      	movs	r3, r6
    ce06:	000d      	movs	r5, r1
    ce08:	e702      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce0a:	2601      	movs	r6, #1
    ce0c:	e755      	b.n	ccba <__aeabi_fsub+0x136>
    ce0e:	2c00      	cmp	r4, #0
    ce10:	d11f      	bne.n	ce52 <__aeabi_fsub+0x2ce>
    ce12:	2b00      	cmp	r3, #0
    ce14:	d043      	beq.n	ce9e <__aeabi_fsub+0x31a>
    ce16:	43c9      	mvns	r1, r1
    ce18:	2900      	cmp	r1, #0
    ce1a:	d00b      	beq.n	ce34 <__aeabi_fsub+0x2b0>
    ce1c:	28ff      	cmp	r0, #255	; 0xff
    ce1e:	d039      	beq.n	ce94 <__aeabi_fsub+0x310>
    ce20:	291b      	cmp	r1, #27
    ce22:	dc44      	bgt.n	ceae <__aeabi_fsub+0x32a>
    ce24:	001c      	movs	r4, r3
    ce26:	2720      	movs	r7, #32
    ce28:	40cc      	lsrs	r4, r1
    ce2a:	1a79      	subs	r1, r7, r1
    ce2c:	408b      	lsls	r3, r1
    ce2e:	1e59      	subs	r1, r3, #1
    ce30:	418b      	sbcs	r3, r1
    ce32:	4323      	orrs	r3, r4
    ce34:	199b      	adds	r3, r3, r6
    ce36:	0004      	movs	r4, r0
    ce38:	e740      	b.n	ccbc <__aeabi_fsub+0x138>
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d11a      	bne.n	ce74 <__aeabi_fsub+0x2f0>
    ce3e:	2e00      	cmp	r6, #0
    ce40:	d124      	bne.n	ce8c <__aeabi_fsub+0x308>
    ce42:	2780      	movs	r7, #128	; 0x80
    ce44:	2200      	movs	r2, #0
    ce46:	03ff      	lsls	r7, r7, #15
    ce48:	e71b      	b.n	cc82 <__aeabi_fsub+0xfe>
    ce4a:	0033      	movs	r3, r6
    ce4c:	0004      	movs	r4, r0
    ce4e:	000d      	movs	r5, r1
    ce50:	e6de      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce52:	28ff      	cmp	r0, #255	; 0xff
    ce54:	d01e      	beq.n	ce94 <__aeabi_fsub+0x310>
    ce56:	2480      	movs	r4, #128	; 0x80
    ce58:	04e4      	lsls	r4, r4, #19
    ce5a:	4249      	negs	r1, r1
    ce5c:	4323      	orrs	r3, r4
    ce5e:	e7df      	b.n	ce20 <__aeabi_fsub+0x29c>
    ce60:	2e00      	cmp	r6, #0
    ce62:	d100      	bne.n	ce66 <__aeabi_fsub+0x2e2>
    ce64:	e6d4      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce66:	1b9f      	subs	r7, r3, r6
    ce68:	017a      	lsls	r2, r7, #5
    ce6a:	d400      	bmi.n	ce6e <__aeabi_fsub+0x2ea>
    ce6c:	e737      	b.n	ccde <__aeabi_fsub+0x15a>
    ce6e:	1af3      	subs	r3, r6, r3
    ce70:	000d      	movs	r5, r1
    ce72:	e6cd      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce74:	24ff      	movs	r4, #255	; 0xff
    ce76:	2e00      	cmp	r6, #0
    ce78:	d100      	bne.n	ce7c <__aeabi_fsub+0x2f8>
    ce7a:	e6c9      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce7c:	2280      	movs	r2, #128	; 0x80
    ce7e:	4650      	mov	r0, sl
    ce80:	03d2      	lsls	r2, r2, #15
    ce82:	4210      	tst	r0, r2
    ce84:	d0a4      	beq.n	cdd0 <__aeabi_fsub+0x24c>
    ce86:	4660      	mov	r0, ip
    ce88:	4210      	tst	r0, r2
    ce8a:	d1a1      	bne.n	cdd0 <__aeabi_fsub+0x24c>
    ce8c:	0033      	movs	r3, r6
    ce8e:	000d      	movs	r5, r1
    ce90:	24ff      	movs	r4, #255	; 0xff
    ce92:	e6bd      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce94:	0033      	movs	r3, r6
    ce96:	24ff      	movs	r4, #255	; 0xff
    ce98:	e6ba      	b.n	cc10 <__aeabi_fsub+0x8c>
    ce9a:	2301      	movs	r3, #1
    ce9c:	e76e      	b.n	cd7c <__aeabi_fsub+0x1f8>
    ce9e:	0033      	movs	r3, r6
    cea0:	0004      	movs	r4, r0
    cea2:	e6b5      	b.n	cc10 <__aeabi_fsub+0x8c>
    cea4:	2700      	movs	r7, #0
    cea6:	2200      	movs	r2, #0
    cea8:	e71c      	b.n	cce4 <__aeabi_fsub+0x160>
    ceaa:	0033      	movs	r3, r6
    ceac:	e6b0      	b.n	cc10 <__aeabi_fsub+0x8c>
    ceae:	2301      	movs	r3, #1
    ceb0:	e7c0      	b.n	ce34 <__aeabi_fsub+0x2b0>
    ceb2:	46c0      	nop			; (mov r8, r8)
    ceb4:	7dffffff 	.word	0x7dffffff
    ceb8:	fbffffff 	.word	0xfbffffff

0000cebc <__aeabi_ui2f>:
    cebc:	b510      	push	{r4, lr}
    cebe:	1e04      	subs	r4, r0, #0
    cec0:	d027      	beq.n	cf12 <__aeabi_ui2f+0x56>
    cec2:	f001 fe1b 	bl	eafc <__clzsi2>
    cec6:	239e      	movs	r3, #158	; 0x9e
    cec8:	1a1b      	subs	r3, r3, r0
    ceca:	2b96      	cmp	r3, #150	; 0x96
    cecc:	dc0a      	bgt.n	cee4 <__aeabi_ui2f+0x28>
    cece:	2296      	movs	r2, #150	; 0x96
    ced0:	1ad2      	subs	r2, r2, r3
    ced2:	4094      	lsls	r4, r2
    ced4:	0264      	lsls	r4, r4, #9
    ced6:	0a64      	lsrs	r4, r4, #9
    ced8:	b2db      	uxtb	r3, r3
    ceda:	0264      	lsls	r4, r4, #9
    cedc:	05db      	lsls	r3, r3, #23
    cede:	0a60      	lsrs	r0, r4, #9
    cee0:	4318      	orrs	r0, r3
    cee2:	bd10      	pop	{r4, pc}
    cee4:	2b99      	cmp	r3, #153	; 0x99
    cee6:	dc17      	bgt.n	cf18 <__aeabi_ui2f+0x5c>
    cee8:	2299      	movs	r2, #153	; 0x99
    ceea:	1ad2      	subs	r2, r2, r3
    ceec:	2a00      	cmp	r2, #0
    ceee:	dd27      	ble.n	cf40 <__aeabi_ui2f+0x84>
    cef0:	4094      	lsls	r4, r2
    cef2:	0022      	movs	r2, r4
    cef4:	4c13      	ldr	r4, [pc, #76]	; (cf44 <__aeabi_ui2f+0x88>)
    cef6:	4014      	ands	r4, r2
    cef8:	0751      	lsls	r1, r2, #29
    cefa:	d004      	beq.n	cf06 <__aeabi_ui2f+0x4a>
    cefc:	210f      	movs	r1, #15
    cefe:	400a      	ands	r2, r1
    cf00:	2a04      	cmp	r2, #4
    cf02:	d000      	beq.n	cf06 <__aeabi_ui2f+0x4a>
    cf04:	3404      	adds	r4, #4
    cf06:	0162      	lsls	r2, r4, #5
    cf08:	d412      	bmi.n	cf30 <__aeabi_ui2f+0x74>
    cf0a:	01a4      	lsls	r4, r4, #6
    cf0c:	0a64      	lsrs	r4, r4, #9
    cf0e:	b2db      	uxtb	r3, r3
    cf10:	e7e3      	b.n	ceda <__aeabi_ui2f+0x1e>
    cf12:	2300      	movs	r3, #0
    cf14:	2400      	movs	r4, #0
    cf16:	e7e0      	b.n	ceda <__aeabi_ui2f+0x1e>
    cf18:	22b9      	movs	r2, #185	; 0xb9
    cf1a:	0021      	movs	r1, r4
    cf1c:	1ad2      	subs	r2, r2, r3
    cf1e:	4091      	lsls	r1, r2
    cf20:	000a      	movs	r2, r1
    cf22:	1e51      	subs	r1, r2, #1
    cf24:	418a      	sbcs	r2, r1
    cf26:	2105      	movs	r1, #5
    cf28:	1a09      	subs	r1, r1, r0
    cf2a:	40cc      	lsrs	r4, r1
    cf2c:	4314      	orrs	r4, r2
    cf2e:	e7db      	b.n	cee8 <__aeabi_ui2f+0x2c>
    cf30:	4b04      	ldr	r3, [pc, #16]	; (cf44 <__aeabi_ui2f+0x88>)
    cf32:	401c      	ands	r4, r3
    cf34:	239f      	movs	r3, #159	; 0x9f
    cf36:	01a4      	lsls	r4, r4, #6
    cf38:	1a1b      	subs	r3, r3, r0
    cf3a:	0a64      	lsrs	r4, r4, #9
    cf3c:	b2db      	uxtb	r3, r3
    cf3e:	e7cc      	b.n	ceda <__aeabi_ui2f+0x1e>
    cf40:	0022      	movs	r2, r4
    cf42:	e7d7      	b.n	cef4 <__aeabi_ui2f+0x38>
    cf44:	fbffffff 	.word	0xfbffffff

0000cf48 <__aeabi_dadd>:
    cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf4a:	4645      	mov	r5, r8
    cf4c:	46de      	mov	lr, fp
    cf4e:	4657      	mov	r7, sl
    cf50:	464e      	mov	r6, r9
    cf52:	030c      	lsls	r4, r1, #12
    cf54:	b5e0      	push	{r5, r6, r7, lr}
    cf56:	004e      	lsls	r6, r1, #1
    cf58:	0fc9      	lsrs	r1, r1, #31
    cf5a:	4688      	mov	r8, r1
    cf5c:	000d      	movs	r5, r1
    cf5e:	0a61      	lsrs	r1, r4, #9
    cf60:	0f44      	lsrs	r4, r0, #29
    cf62:	430c      	orrs	r4, r1
    cf64:	00c7      	lsls	r7, r0, #3
    cf66:	0319      	lsls	r1, r3, #12
    cf68:	0058      	lsls	r0, r3, #1
    cf6a:	0fdb      	lsrs	r3, r3, #31
    cf6c:	469b      	mov	fp, r3
    cf6e:	0a4b      	lsrs	r3, r1, #9
    cf70:	0f51      	lsrs	r1, r2, #29
    cf72:	430b      	orrs	r3, r1
    cf74:	0d76      	lsrs	r6, r6, #21
    cf76:	0d40      	lsrs	r0, r0, #21
    cf78:	0019      	movs	r1, r3
    cf7a:	00d2      	lsls	r2, r2, #3
    cf7c:	45d8      	cmp	r8, fp
    cf7e:	d100      	bne.n	cf82 <__aeabi_dadd+0x3a>
    cf80:	e0ae      	b.n	d0e0 <__aeabi_dadd+0x198>
    cf82:	1a35      	subs	r5, r6, r0
    cf84:	2d00      	cmp	r5, #0
    cf86:	dc00      	bgt.n	cf8a <__aeabi_dadd+0x42>
    cf88:	e0f6      	b.n	d178 <__aeabi_dadd+0x230>
    cf8a:	2800      	cmp	r0, #0
    cf8c:	d10f      	bne.n	cfae <__aeabi_dadd+0x66>
    cf8e:	4313      	orrs	r3, r2
    cf90:	d100      	bne.n	cf94 <__aeabi_dadd+0x4c>
    cf92:	e0db      	b.n	d14c <__aeabi_dadd+0x204>
    cf94:	1e6b      	subs	r3, r5, #1
    cf96:	2b00      	cmp	r3, #0
    cf98:	d000      	beq.n	cf9c <__aeabi_dadd+0x54>
    cf9a:	e137      	b.n	d20c <__aeabi_dadd+0x2c4>
    cf9c:	1aba      	subs	r2, r7, r2
    cf9e:	4297      	cmp	r7, r2
    cfa0:	41bf      	sbcs	r7, r7
    cfa2:	1a64      	subs	r4, r4, r1
    cfa4:	427f      	negs	r7, r7
    cfa6:	1be4      	subs	r4, r4, r7
    cfa8:	2601      	movs	r6, #1
    cfaa:	0017      	movs	r7, r2
    cfac:	e024      	b.n	cff8 <__aeabi_dadd+0xb0>
    cfae:	4bc6      	ldr	r3, [pc, #792]	; (d2c8 <__aeabi_dadd+0x380>)
    cfb0:	429e      	cmp	r6, r3
    cfb2:	d04d      	beq.n	d050 <__aeabi_dadd+0x108>
    cfb4:	2380      	movs	r3, #128	; 0x80
    cfb6:	041b      	lsls	r3, r3, #16
    cfb8:	4319      	orrs	r1, r3
    cfba:	2d38      	cmp	r5, #56	; 0x38
    cfbc:	dd00      	ble.n	cfc0 <__aeabi_dadd+0x78>
    cfbe:	e107      	b.n	d1d0 <__aeabi_dadd+0x288>
    cfc0:	2d1f      	cmp	r5, #31
    cfc2:	dd00      	ble.n	cfc6 <__aeabi_dadd+0x7e>
    cfc4:	e138      	b.n	d238 <__aeabi_dadd+0x2f0>
    cfc6:	2020      	movs	r0, #32
    cfc8:	1b43      	subs	r3, r0, r5
    cfca:	469a      	mov	sl, r3
    cfcc:	000b      	movs	r3, r1
    cfce:	4650      	mov	r0, sl
    cfd0:	4083      	lsls	r3, r0
    cfd2:	4699      	mov	r9, r3
    cfd4:	0013      	movs	r3, r2
    cfd6:	4648      	mov	r0, r9
    cfd8:	40eb      	lsrs	r3, r5
    cfda:	4318      	orrs	r0, r3
    cfdc:	0003      	movs	r3, r0
    cfde:	4650      	mov	r0, sl
    cfe0:	4082      	lsls	r2, r0
    cfe2:	1e50      	subs	r0, r2, #1
    cfe4:	4182      	sbcs	r2, r0
    cfe6:	40e9      	lsrs	r1, r5
    cfe8:	431a      	orrs	r2, r3
    cfea:	1aba      	subs	r2, r7, r2
    cfec:	1a61      	subs	r1, r4, r1
    cfee:	4297      	cmp	r7, r2
    cff0:	41a4      	sbcs	r4, r4
    cff2:	0017      	movs	r7, r2
    cff4:	4264      	negs	r4, r4
    cff6:	1b0c      	subs	r4, r1, r4
    cff8:	0223      	lsls	r3, r4, #8
    cffa:	d562      	bpl.n	d0c2 <__aeabi_dadd+0x17a>
    cffc:	0264      	lsls	r4, r4, #9
    cffe:	0a65      	lsrs	r5, r4, #9
    d000:	2d00      	cmp	r5, #0
    d002:	d100      	bne.n	d006 <__aeabi_dadd+0xbe>
    d004:	e0df      	b.n	d1c6 <__aeabi_dadd+0x27e>
    d006:	0028      	movs	r0, r5
    d008:	f001 fd78 	bl	eafc <__clzsi2>
    d00c:	0003      	movs	r3, r0
    d00e:	3b08      	subs	r3, #8
    d010:	2b1f      	cmp	r3, #31
    d012:	dd00      	ble.n	d016 <__aeabi_dadd+0xce>
    d014:	e0d2      	b.n	d1bc <__aeabi_dadd+0x274>
    d016:	2220      	movs	r2, #32
    d018:	003c      	movs	r4, r7
    d01a:	1ad2      	subs	r2, r2, r3
    d01c:	409d      	lsls	r5, r3
    d01e:	40d4      	lsrs	r4, r2
    d020:	409f      	lsls	r7, r3
    d022:	4325      	orrs	r5, r4
    d024:	429e      	cmp	r6, r3
    d026:	dd00      	ble.n	d02a <__aeabi_dadd+0xe2>
    d028:	e0c4      	b.n	d1b4 <__aeabi_dadd+0x26c>
    d02a:	1b9e      	subs	r6, r3, r6
    d02c:	1c73      	adds	r3, r6, #1
    d02e:	2b1f      	cmp	r3, #31
    d030:	dd00      	ble.n	d034 <__aeabi_dadd+0xec>
    d032:	e0f1      	b.n	d218 <__aeabi_dadd+0x2d0>
    d034:	2220      	movs	r2, #32
    d036:	0038      	movs	r0, r7
    d038:	0029      	movs	r1, r5
    d03a:	1ad2      	subs	r2, r2, r3
    d03c:	40d8      	lsrs	r0, r3
    d03e:	4091      	lsls	r1, r2
    d040:	4097      	lsls	r7, r2
    d042:	002c      	movs	r4, r5
    d044:	4301      	orrs	r1, r0
    d046:	1e78      	subs	r0, r7, #1
    d048:	4187      	sbcs	r7, r0
    d04a:	40dc      	lsrs	r4, r3
    d04c:	2600      	movs	r6, #0
    d04e:	430f      	orrs	r7, r1
    d050:	077b      	lsls	r3, r7, #29
    d052:	d009      	beq.n	d068 <__aeabi_dadd+0x120>
    d054:	230f      	movs	r3, #15
    d056:	403b      	ands	r3, r7
    d058:	2b04      	cmp	r3, #4
    d05a:	d005      	beq.n	d068 <__aeabi_dadd+0x120>
    d05c:	1d3b      	adds	r3, r7, #4
    d05e:	42bb      	cmp	r3, r7
    d060:	41bf      	sbcs	r7, r7
    d062:	427f      	negs	r7, r7
    d064:	19e4      	adds	r4, r4, r7
    d066:	001f      	movs	r7, r3
    d068:	0223      	lsls	r3, r4, #8
    d06a:	d52c      	bpl.n	d0c6 <__aeabi_dadd+0x17e>
    d06c:	4b96      	ldr	r3, [pc, #600]	; (d2c8 <__aeabi_dadd+0x380>)
    d06e:	3601      	adds	r6, #1
    d070:	429e      	cmp	r6, r3
    d072:	d100      	bne.n	d076 <__aeabi_dadd+0x12e>
    d074:	e09a      	b.n	d1ac <__aeabi_dadd+0x264>
    d076:	4645      	mov	r5, r8
    d078:	4b94      	ldr	r3, [pc, #592]	; (d2cc <__aeabi_dadd+0x384>)
    d07a:	08ff      	lsrs	r7, r7, #3
    d07c:	401c      	ands	r4, r3
    d07e:	0760      	lsls	r0, r4, #29
    d080:	0576      	lsls	r6, r6, #21
    d082:	0264      	lsls	r4, r4, #9
    d084:	4307      	orrs	r7, r0
    d086:	0b24      	lsrs	r4, r4, #12
    d088:	0d76      	lsrs	r6, r6, #21
    d08a:	2100      	movs	r1, #0
    d08c:	0324      	lsls	r4, r4, #12
    d08e:	0b23      	lsrs	r3, r4, #12
    d090:	0d0c      	lsrs	r4, r1, #20
    d092:	4a8f      	ldr	r2, [pc, #572]	; (d2d0 <__aeabi_dadd+0x388>)
    d094:	0524      	lsls	r4, r4, #20
    d096:	431c      	orrs	r4, r3
    d098:	4014      	ands	r4, r2
    d09a:	0533      	lsls	r3, r6, #20
    d09c:	4323      	orrs	r3, r4
    d09e:	005b      	lsls	r3, r3, #1
    d0a0:	07ed      	lsls	r5, r5, #31
    d0a2:	085b      	lsrs	r3, r3, #1
    d0a4:	432b      	orrs	r3, r5
    d0a6:	0038      	movs	r0, r7
    d0a8:	0019      	movs	r1, r3
    d0aa:	bc3c      	pop	{r2, r3, r4, r5}
    d0ac:	4690      	mov	r8, r2
    d0ae:	4699      	mov	r9, r3
    d0b0:	46a2      	mov	sl, r4
    d0b2:	46ab      	mov	fp, r5
    d0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0b6:	4664      	mov	r4, ip
    d0b8:	4304      	orrs	r4, r0
    d0ba:	d100      	bne.n	d0be <__aeabi_dadd+0x176>
    d0bc:	e211      	b.n	d4e2 <__aeabi_dadd+0x59a>
    d0be:	0004      	movs	r4, r0
    d0c0:	4667      	mov	r7, ip
    d0c2:	077b      	lsls	r3, r7, #29
    d0c4:	d1c6      	bne.n	d054 <__aeabi_dadd+0x10c>
    d0c6:	4645      	mov	r5, r8
    d0c8:	0760      	lsls	r0, r4, #29
    d0ca:	08ff      	lsrs	r7, r7, #3
    d0cc:	4307      	orrs	r7, r0
    d0ce:	08e4      	lsrs	r4, r4, #3
    d0d0:	4b7d      	ldr	r3, [pc, #500]	; (d2c8 <__aeabi_dadd+0x380>)
    d0d2:	429e      	cmp	r6, r3
    d0d4:	d030      	beq.n	d138 <__aeabi_dadd+0x1f0>
    d0d6:	0324      	lsls	r4, r4, #12
    d0d8:	0576      	lsls	r6, r6, #21
    d0da:	0b24      	lsrs	r4, r4, #12
    d0dc:	0d76      	lsrs	r6, r6, #21
    d0de:	e7d4      	b.n	d08a <__aeabi_dadd+0x142>
    d0e0:	1a33      	subs	r3, r6, r0
    d0e2:	469a      	mov	sl, r3
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	dd78      	ble.n	d1da <__aeabi_dadd+0x292>
    d0e8:	2800      	cmp	r0, #0
    d0ea:	d031      	beq.n	d150 <__aeabi_dadd+0x208>
    d0ec:	4876      	ldr	r0, [pc, #472]	; (d2c8 <__aeabi_dadd+0x380>)
    d0ee:	4286      	cmp	r6, r0
    d0f0:	d0ae      	beq.n	d050 <__aeabi_dadd+0x108>
    d0f2:	2080      	movs	r0, #128	; 0x80
    d0f4:	0400      	lsls	r0, r0, #16
    d0f6:	4301      	orrs	r1, r0
    d0f8:	4653      	mov	r3, sl
    d0fa:	2b38      	cmp	r3, #56	; 0x38
    d0fc:	dc00      	bgt.n	d100 <__aeabi_dadd+0x1b8>
    d0fe:	e0e9      	b.n	d2d4 <__aeabi_dadd+0x38c>
    d100:	430a      	orrs	r2, r1
    d102:	1e51      	subs	r1, r2, #1
    d104:	418a      	sbcs	r2, r1
    d106:	2100      	movs	r1, #0
    d108:	19d2      	adds	r2, r2, r7
    d10a:	42ba      	cmp	r2, r7
    d10c:	41bf      	sbcs	r7, r7
    d10e:	1909      	adds	r1, r1, r4
    d110:	427c      	negs	r4, r7
    d112:	0017      	movs	r7, r2
    d114:	190c      	adds	r4, r1, r4
    d116:	0223      	lsls	r3, r4, #8
    d118:	d5d3      	bpl.n	d0c2 <__aeabi_dadd+0x17a>
    d11a:	4b6b      	ldr	r3, [pc, #428]	; (d2c8 <__aeabi_dadd+0x380>)
    d11c:	3601      	adds	r6, #1
    d11e:	429e      	cmp	r6, r3
    d120:	d100      	bne.n	d124 <__aeabi_dadd+0x1dc>
    d122:	e13a      	b.n	d39a <__aeabi_dadd+0x452>
    d124:	2001      	movs	r0, #1
    d126:	4b69      	ldr	r3, [pc, #420]	; (d2cc <__aeabi_dadd+0x384>)
    d128:	401c      	ands	r4, r3
    d12a:	087b      	lsrs	r3, r7, #1
    d12c:	4007      	ands	r7, r0
    d12e:	431f      	orrs	r7, r3
    d130:	07e0      	lsls	r0, r4, #31
    d132:	4307      	orrs	r7, r0
    d134:	0864      	lsrs	r4, r4, #1
    d136:	e78b      	b.n	d050 <__aeabi_dadd+0x108>
    d138:	0023      	movs	r3, r4
    d13a:	433b      	orrs	r3, r7
    d13c:	d100      	bne.n	d140 <__aeabi_dadd+0x1f8>
    d13e:	e1cb      	b.n	d4d8 <__aeabi_dadd+0x590>
    d140:	2280      	movs	r2, #128	; 0x80
    d142:	0312      	lsls	r2, r2, #12
    d144:	4314      	orrs	r4, r2
    d146:	0324      	lsls	r4, r4, #12
    d148:	0b24      	lsrs	r4, r4, #12
    d14a:	e79e      	b.n	d08a <__aeabi_dadd+0x142>
    d14c:	002e      	movs	r6, r5
    d14e:	e77f      	b.n	d050 <__aeabi_dadd+0x108>
    d150:	0008      	movs	r0, r1
    d152:	4310      	orrs	r0, r2
    d154:	d100      	bne.n	d158 <__aeabi_dadd+0x210>
    d156:	e0b4      	b.n	d2c2 <__aeabi_dadd+0x37a>
    d158:	1e58      	subs	r0, r3, #1
    d15a:	2800      	cmp	r0, #0
    d15c:	d000      	beq.n	d160 <__aeabi_dadd+0x218>
    d15e:	e0de      	b.n	d31e <__aeabi_dadd+0x3d6>
    d160:	18ba      	adds	r2, r7, r2
    d162:	42ba      	cmp	r2, r7
    d164:	419b      	sbcs	r3, r3
    d166:	1864      	adds	r4, r4, r1
    d168:	425b      	negs	r3, r3
    d16a:	18e4      	adds	r4, r4, r3
    d16c:	0017      	movs	r7, r2
    d16e:	2601      	movs	r6, #1
    d170:	0223      	lsls	r3, r4, #8
    d172:	d5a6      	bpl.n	d0c2 <__aeabi_dadd+0x17a>
    d174:	2602      	movs	r6, #2
    d176:	e7d5      	b.n	d124 <__aeabi_dadd+0x1dc>
    d178:	2d00      	cmp	r5, #0
    d17a:	d16e      	bne.n	d25a <__aeabi_dadd+0x312>
    d17c:	1c70      	adds	r0, r6, #1
    d17e:	0540      	lsls	r0, r0, #21
    d180:	0d40      	lsrs	r0, r0, #21
    d182:	2801      	cmp	r0, #1
    d184:	dc00      	bgt.n	d188 <__aeabi_dadd+0x240>
    d186:	e0f9      	b.n	d37c <__aeabi_dadd+0x434>
    d188:	1ab8      	subs	r0, r7, r2
    d18a:	4684      	mov	ip, r0
    d18c:	4287      	cmp	r7, r0
    d18e:	4180      	sbcs	r0, r0
    d190:	1ae5      	subs	r5, r4, r3
    d192:	4240      	negs	r0, r0
    d194:	1a2d      	subs	r5, r5, r0
    d196:	0228      	lsls	r0, r5, #8
    d198:	d400      	bmi.n	d19c <__aeabi_dadd+0x254>
    d19a:	e089      	b.n	d2b0 <__aeabi_dadd+0x368>
    d19c:	1bd7      	subs	r7, r2, r7
    d19e:	42ba      	cmp	r2, r7
    d1a0:	4192      	sbcs	r2, r2
    d1a2:	1b1c      	subs	r4, r3, r4
    d1a4:	4252      	negs	r2, r2
    d1a6:	1aa5      	subs	r5, r4, r2
    d1a8:	46d8      	mov	r8, fp
    d1aa:	e729      	b.n	d000 <__aeabi_dadd+0xb8>
    d1ac:	4645      	mov	r5, r8
    d1ae:	2400      	movs	r4, #0
    d1b0:	2700      	movs	r7, #0
    d1b2:	e76a      	b.n	d08a <__aeabi_dadd+0x142>
    d1b4:	4c45      	ldr	r4, [pc, #276]	; (d2cc <__aeabi_dadd+0x384>)
    d1b6:	1af6      	subs	r6, r6, r3
    d1b8:	402c      	ands	r4, r5
    d1ba:	e749      	b.n	d050 <__aeabi_dadd+0x108>
    d1bc:	003d      	movs	r5, r7
    d1be:	3828      	subs	r0, #40	; 0x28
    d1c0:	4085      	lsls	r5, r0
    d1c2:	2700      	movs	r7, #0
    d1c4:	e72e      	b.n	d024 <__aeabi_dadd+0xdc>
    d1c6:	0038      	movs	r0, r7
    d1c8:	f001 fc98 	bl	eafc <__clzsi2>
    d1cc:	3020      	adds	r0, #32
    d1ce:	e71d      	b.n	d00c <__aeabi_dadd+0xc4>
    d1d0:	430a      	orrs	r2, r1
    d1d2:	1e51      	subs	r1, r2, #1
    d1d4:	418a      	sbcs	r2, r1
    d1d6:	2100      	movs	r1, #0
    d1d8:	e707      	b.n	cfea <__aeabi_dadd+0xa2>
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d000      	beq.n	d1e0 <__aeabi_dadd+0x298>
    d1de:	e0f3      	b.n	d3c8 <__aeabi_dadd+0x480>
    d1e0:	1c70      	adds	r0, r6, #1
    d1e2:	0543      	lsls	r3, r0, #21
    d1e4:	0d5b      	lsrs	r3, r3, #21
    d1e6:	2b01      	cmp	r3, #1
    d1e8:	dc00      	bgt.n	d1ec <__aeabi_dadd+0x2a4>
    d1ea:	e0ad      	b.n	d348 <__aeabi_dadd+0x400>
    d1ec:	4b36      	ldr	r3, [pc, #216]	; (d2c8 <__aeabi_dadd+0x380>)
    d1ee:	4298      	cmp	r0, r3
    d1f0:	d100      	bne.n	d1f4 <__aeabi_dadd+0x2ac>
    d1f2:	e0d1      	b.n	d398 <__aeabi_dadd+0x450>
    d1f4:	18ba      	adds	r2, r7, r2
    d1f6:	42ba      	cmp	r2, r7
    d1f8:	41bf      	sbcs	r7, r7
    d1fa:	1864      	adds	r4, r4, r1
    d1fc:	427f      	negs	r7, r7
    d1fe:	19e4      	adds	r4, r4, r7
    d200:	07e7      	lsls	r7, r4, #31
    d202:	0852      	lsrs	r2, r2, #1
    d204:	4317      	orrs	r7, r2
    d206:	0864      	lsrs	r4, r4, #1
    d208:	0006      	movs	r6, r0
    d20a:	e721      	b.n	d050 <__aeabi_dadd+0x108>
    d20c:	482e      	ldr	r0, [pc, #184]	; (d2c8 <__aeabi_dadd+0x380>)
    d20e:	4285      	cmp	r5, r0
    d210:	d100      	bne.n	d214 <__aeabi_dadd+0x2cc>
    d212:	e093      	b.n	d33c <__aeabi_dadd+0x3f4>
    d214:	001d      	movs	r5, r3
    d216:	e6d0      	b.n	cfba <__aeabi_dadd+0x72>
    d218:	0029      	movs	r1, r5
    d21a:	3e1f      	subs	r6, #31
    d21c:	40f1      	lsrs	r1, r6
    d21e:	2b20      	cmp	r3, #32
    d220:	d100      	bne.n	d224 <__aeabi_dadd+0x2dc>
    d222:	e08d      	b.n	d340 <__aeabi_dadd+0x3f8>
    d224:	2240      	movs	r2, #64	; 0x40
    d226:	1ad3      	subs	r3, r2, r3
    d228:	409d      	lsls	r5, r3
    d22a:	432f      	orrs	r7, r5
    d22c:	1e7d      	subs	r5, r7, #1
    d22e:	41af      	sbcs	r7, r5
    d230:	2400      	movs	r4, #0
    d232:	430f      	orrs	r7, r1
    d234:	2600      	movs	r6, #0
    d236:	e744      	b.n	d0c2 <__aeabi_dadd+0x17a>
    d238:	002b      	movs	r3, r5
    d23a:	0008      	movs	r0, r1
    d23c:	3b20      	subs	r3, #32
    d23e:	40d8      	lsrs	r0, r3
    d240:	0003      	movs	r3, r0
    d242:	2d20      	cmp	r5, #32
    d244:	d100      	bne.n	d248 <__aeabi_dadd+0x300>
    d246:	e07d      	b.n	d344 <__aeabi_dadd+0x3fc>
    d248:	2040      	movs	r0, #64	; 0x40
    d24a:	1b45      	subs	r5, r0, r5
    d24c:	40a9      	lsls	r1, r5
    d24e:	430a      	orrs	r2, r1
    d250:	1e51      	subs	r1, r2, #1
    d252:	418a      	sbcs	r2, r1
    d254:	2100      	movs	r1, #0
    d256:	431a      	orrs	r2, r3
    d258:	e6c7      	b.n	cfea <__aeabi_dadd+0xa2>
    d25a:	2e00      	cmp	r6, #0
    d25c:	d050      	beq.n	d300 <__aeabi_dadd+0x3b8>
    d25e:	4e1a      	ldr	r6, [pc, #104]	; (d2c8 <__aeabi_dadd+0x380>)
    d260:	42b0      	cmp	r0, r6
    d262:	d057      	beq.n	d314 <__aeabi_dadd+0x3cc>
    d264:	2680      	movs	r6, #128	; 0x80
    d266:	426b      	negs	r3, r5
    d268:	4699      	mov	r9, r3
    d26a:	0436      	lsls	r6, r6, #16
    d26c:	4334      	orrs	r4, r6
    d26e:	464b      	mov	r3, r9
    d270:	2b38      	cmp	r3, #56	; 0x38
    d272:	dd00      	ble.n	d276 <__aeabi_dadd+0x32e>
    d274:	e0d6      	b.n	d424 <__aeabi_dadd+0x4dc>
    d276:	2b1f      	cmp	r3, #31
    d278:	dd00      	ble.n	d27c <__aeabi_dadd+0x334>
    d27a:	e135      	b.n	d4e8 <__aeabi_dadd+0x5a0>
    d27c:	2620      	movs	r6, #32
    d27e:	1af5      	subs	r5, r6, r3
    d280:	0026      	movs	r6, r4
    d282:	40ae      	lsls	r6, r5
    d284:	46b2      	mov	sl, r6
    d286:	003e      	movs	r6, r7
    d288:	40de      	lsrs	r6, r3
    d28a:	46ac      	mov	ip, r5
    d28c:	0035      	movs	r5, r6
    d28e:	4656      	mov	r6, sl
    d290:	432e      	orrs	r6, r5
    d292:	4665      	mov	r5, ip
    d294:	40af      	lsls	r7, r5
    d296:	1e7d      	subs	r5, r7, #1
    d298:	41af      	sbcs	r7, r5
    d29a:	40dc      	lsrs	r4, r3
    d29c:	4337      	orrs	r7, r6
    d29e:	1bd7      	subs	r7, r2, r7
    d2a0:	42ba      	cmp	r2, r7
    d2a2:	4192      	sbcs	r2, r2
    d2a4:	1b0c      	subs	r4, r1, r4
    d2a6:	4252      	negs	r2, r2
    d2a8:	1aa4      	subs	r4, r4, r2
    d2aa:	0006      	movs	r6, r0
    d2ac:	46d8      	mov	r8, fp
    d2ae:	e6a3      	b.n	cff8 <__aeabi_dadd+0xb0>
    d2b0:	4664      	mov	r4, ip
    d2b2:	4667      	mov	r7, ip
    d2b4:	432c      	orrs	r4, r5
    d2b6:	d000      	beq.n	d2ba <__aeabi_dadd+0x372>
    d2b8:	e6a2      	b.n	d000 <__aeabi_dadd+0xb8>
    d2ba:	2500      	movs	r5, #0
    d2bc:	2600      	movs	r6, #0
    d2be:	2700      	movs	r7, #0
    d2c0:	e706      	b.n	d0d0 <__aeabi_dadd+0x188>
    d2c2:	001e      	movs	r6, r3
    d2c4:	e6c4      	b.n	d050 <__aeabi_dadd+0x108>
    d2c6:	46c0      	nop			; (mov r8, r8)
    d2c8:	000007ff 	.word	0x000007ff
    d2cc:	ff7fffff 	.word	0xff7fffff
    d2d0:	800fffff 	.word	0x800fffff
    d2d4:	2b1f      	cmp	r3, #31
    d2d6:	dc63      	bgt.n	d3a0 <__aeabi_dadd+0x458>
    d2d8:	2020      	movs	r0, #32
    d2da:	1ac3      	subs	r3, r0, r3
    d2dc:	0008      	movs	r0, r1
    d2de:	4098      	lsls	r0, r3
    d2e0:	469c      	mov	ip, r3
    d2e2:	4683      	mov	fp, r0
    d2e4:	4653      	mov	r3, sl
    d2e6:	0010      	movs	r0, r2
    d2e8:	40d8      	lsrs	r0, r3
    d2ea:	0003      	movs	r3, r0
    d2ec:	4658      	mov	r0, fp
    d2ee:	4318      	orrs	r0, r3
    d2f0:	4663      	mov	r3, ip
    d2f2:	409a      	lsls	r2, r3
    d2f4:	1e53      	subs	r3, r2, #1
    d2f6:	419a      	sbcs	r2, r3
    d2f8:	4653      	mov	r3, sl
    d2fa:	4302      	orrs	r2, r0
    d2fc:	40d9      	lsrs	r1, r3
    d2fe:	e703      	b.n	d108 <__aeabi_dadd+0x1c0>
    d300:	0026      	movs	r6, r4
    d302:	433e      	orrs	r6, r7
    d304:	d006      	beq.n	d314 <__aeabi_dadd+0x3cc>
    d306:	43eb      	mvns	r3, r5
    d308:	4699      	mov	r9, r3
    d30a:	2b00      	cmp	r3, #0
    d30c:	d0c7      	beq.n	d29e <__aeabi_dadd+0x356>
    d30e:	4e94      	ldr	r6, [pc, #592]	; (d560 <__aeabi_dadd+0x618>)
    d310:	42b0      	cmp	r0, r6
    d312:	d1ac      	bne.n	d26e <__aeabi_dadd+0x326>
    d314:	000c      	movs	r4, r1
    d316:	0017      	movs	r7, r2
    d318:	0006      	movs	r6, r0
    d31a:	46d8      	mov	r8, fp
    d31c:	e698      	b.n	d050 <__aeabi_dadd+0x108>
    d31e:	4b90      	ldr	r3, [pc, #576]	; (d560 <__aeabi_dadd+0x618>)
    d320:	459a      	cmp	sl, r3
    d322:	d00b      	beq.n	d33c <__aeabi_dadd+0x3f4>
    d324:	4682      	mov	sl, r0
    d326:	e6e7      	b.n	d0f8 <__aeabi_dadd+0x1b0>
    d328:	2800      	cmp	r0, #0
    d32a:	d000      	beq.n	d32e <__aeabi_dadd+0x3e6>
    d32c:	e09e      	b.n	d46c <__aeabi_dadd+0x524>
    d32e:	0018      	movs	r0, r3
    d330:	4310      	orrs	r0, r2
    d332:	d100      	bne.n	d336 <__aeabi_dadd+0x3ee>
    d334:	e0e9      	b.n	d50a <__aeabi_dadd+0x5c2>
    d336:	001c      	movs	r4, r3
    d338:	0017      	movs	r7, r2
    d33a:	46d8      	mov	r8, fp
    d33c:	4e88      	ldr	r6, [pc, #544]	; (d560 <__aeabi_dadd+0x618>)
    d33e:	e687      	b.n	d050 <__aeabi_dadd+0x108>
    d340:	2500      	movs	r5, #0
    d342:	e772      	b.n	d22a <__aeabi_dadd+0x2e2>
    d344:	2100      	movs	r1, #0
    d346:	e782      	b.n	d24e <__aeabi_dadd+0x306>
    d348:	0023      	movs	r3, r4
    d34a:	433b      	orrs	r3, r7
    d34c:	2e00      	cmp	r6, #0
    d34e:	d000      	beq.n	d352 <__aeabi_dadd+0x40a>
    d350:	e0ab      	b.n	d4aa <__aeabi_dadd+0x562>
    d352:	2b00      	cmp	r3, #0
    d354:	d100      	bne.n	d358 <__aeabi_dadd+0x410>
    d356:	e0e7      	b.n	d528 <__aeabi_dadd+0x5e0>
    d358:	000b      	movs	r3, r1
    d35a:	4313      	orrs	r3, r2
    d35c:	d100      	bne.n	d360 <__aeabi_dadd+0x418>
    d35e:	e677      	b.n	d050 <__aeabi_dadd+0x108>
    d360:	18ba      	adds	r2, r7, r2
    d362:	42ba      	cmp	r2, r7
    d364:	41bf      	sbcs	r7, r7
    d366:	1864      	adds	r4, r4, r1
    d368:	427f      	negs	r7, r7
    d36a:	19e4      	adds	r4, r4, r7
    d36c:	0223      	lsls	r3, r4, #8
    d36e:	d400      	bmi.n	d372 <__aeabi_dadd+0x42a>
    d370:	e0f2      	b.n	d558 <__aeabi_dadd+0x610>
    d372:	4b7c      	ldr	r3, [pc, #496]	; (d564 <__aeabi_dadd+0x61c>)
    d374:	0017      	movs	r7, r2
    d376:	401c      	ands	r4, r3
    d378:	0006      	movs	r6, r0
    d37a:	e669      	b.n	d050 <__aeabi_dadd+0x108>
    d37c:	0020      	movs	r0, r4
    d37e:	4338      	orrs	r0, r7
    d380:	2e00      	cmp	r6, #0
    d382:	d1d1      	bne.n	d328 <__aeabi_dadd+0x3e0>
    d384:	2800      	cmp	r0, #0
    d386:	d15b      	bne.n	d440 <__aeabi_dadd+0x4f8>
    d388:	001c      	movs	r4, r3
    d38a:	4314      	orrs	r4, r2
    d38c:	d100      	bne.n	d390 <__aeabi_dadd+0x448>
    d38e:	e0a8      	b.n	d4e2 <__aeabi_dadd+0x59a>
    d390:	001c      	movs	r4, r3
    d392:	0017      	movs	r7, r2
    d394:	46d8      	mov	r8, fp
    d396:	e65b      	b.n	d050 <__aeabi_dadd+0x108>
    d398:	0006      	movs	r6, r0
    d39a:	2400      	movs	r4, #0
    d39c:	2700      	movs	r7, #0
    d39e:	e697      	b.n	d0d0 <__aeabi_dadd+0x188>
    d3a0:	4650      	mov	r0, sl
    d3a2:	000b      	movs	r3, r1
    d3a4:	3820      	subs	r0, #32
    d3a6:	40c3      	lsrs	r3, r0
    d3a8:	4699      	mov	r9, r3
    d3aa:	4653      	mov	r3, sl
    d3ac:	2b20      	cmp	r3, #32
    d3ae:	d100      	bne.n	d3b2 <__aeabi_dadd+0x46a>
    d3b0:	e095      	b.n	d4de <__aeabi_dadd+0x596>
    d3b2:	2340      	movs	r3, #64	; 0x40
    d3b4:	4650      	mov	r0, sl
    d3b6:	1a1b      	subs	r3, r3, r0
    d3b8:	4099      	lsls	r1, r3
    d3ba:	430a      	orrs	r2, r1
    d3bc:	1e51      	subs	r1, r2, #1
    d3be:	418a      	sbcs	r2, r1
    d3c0:	464b      	mov	r3, r9
    d3c2:	2100      	movs	r1, #0
    d3c4:	431a      	orrs	r2, r3
    d3c6:	e69f      	b.n	d108 <__aeabi_dadd+0x1c0>
    d3c8:	2e00      	cmp	r6, #0
    d3ca:	d130      	bne.n	d42e <__aeabi_dadd+0x4e6>
    d3cc:	0026      	movs	r6, r4
    d3ce:	433e      	orrs	r6, r7
    d3d0:	d067      	beq.n	d4a2 <__aeabi_dadd+0x55a>
    d3d2:	43db      	mvns	r3, r3
    d3d4:	469a      	mov	sl, r3
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	d01c      	beq.n	d414 <__aeabi_dadd+0x4cc>
    d3da:	4e61      	ldr	r6, [pc, #388]	; (d560 <__aeabi_dadd+0x618>)
    d3dc:	42b0      	cmp	r0, r6
    d3de:	d060      	beq.n	d4a2 <__aeabi_dadd+0x55a>
    d3e0:	4653      	mov	r3, sl
    d3e2:	2b38      	cmp	r3, #56	; 0x38
    d3e4:	dd00      	ble.n	d3e8 <__aeabi_dadd+0x4a0>
    d3e6:	e096      	b.n	d516 <__aeabi_dadd+0x5ce>
    d3e8:	2b1f      	cmp	r3, #31
    d3ea:	dd00      	ble.n	d3ee <__aeabi_dadd+0x4a6>
    d3ec:	e09f      	b.n	d52e <__aeabi_dadd+0x5e6>
    d3ee:	2620      	movs	r6, #32
    d3f0:	1af3      	subs	r3, r6, r3
    d3f2:	0026      	movs	r6, r4
    d3f4:	409e      	lsls	r6, r3
    d3f6:	469c      	mov	ip, r3
    d3f8:	46b3      	mov	fp, r6
    d3fa:	4653      	mov	r3, sl
    d3fc:	003e      	movs	r6, r7
    d3fe:	40de      	lsrs	r6, r3
    d400:	0033      	movs	r3, r6
    d402:	465e      	mov	r6, fp
    d404:	431e      	orrs	r6, r3
    d406:	4663      	mov	r3, ip
    d408:	409f      	lsls	r7, r3
    d40a:	1e7b      	subs	r3, r7, #1
    d40c:	419f      	sbcs	r7, r3
    d40e:	4653      	mov	r3, sl
    d410:	40dc      	lsrs	r4, r3
    d412:	4337      	orrs	r7, r6
    d414:	18bf      	adds	r7, r7, r2
    d416:	4297      	cmp	r7, r2
    d418:	4192      	sbcs	r2, r2
    d41a:	1864      	adds	r4, r4, r1
    d41c:	4252      	negs	r2, r2
    d41e:	18a4      	adds	r4, r4, r2
    d420:	0006      	movs	r6, r0
    d422:	e678      	b.n	d116 <__aeabi_dadd+0x1ce>
    d424:	4327      	orrs	r7, r4
    d426:	1e7c      	subs	r4, r7, #1
    d428:	41a7      	sbcs	r7, r4
    d42a:	2400      	movs	r4, #0
    d42c:	e737      	b.n	d29e <__aeabi_dadd+0x356>
    d42e:	4e4c      	ldr	r6, [pc, #304]	; (d560 <__aeabi_dadd+0x618>)
    d430:	42b0      	cmp	r0, r6
    d432:	d036      	beq.n	d4a2 <__aeabi_dadd+0x55a>
    d434:	2680      	movs	r6, #128	; 0x80
    d436:	425b      	negs	r3, r3
    d438:	0436      	lsls	r6, r6, #16
    d43a:	469a      	mov	sl, r3
    d43c:	4334      	orrs	r4, r6
    d43e:	e7cf      	b.n	d3e0 <__aeabi_dadd+0x498>
    d440:	0018      	movs	r0, r3
    d442:	4310      	orrs	r0, r2
    d444:	d100      	bne.n	d448 <__aeabi_dadd+0x500>
    d446:	e603      	b.n	d050 <__aeabi_dadd+0x108>
    d448:	1ab8      	subs	r0, r7, r2
    d44a:	4684      	mov	ip, r0
    d44c:	4567      	cmp	r7, ip
    d44e:	41ad      	sbcs	r5, r5
    d450:	1ae0      	subs	r0, r4, r3
    d452:	426d      	negs	r5, r5
    d454:	1b40      	subs	r0, r0, r5
    d456:	0205      	lsls	r5, r0, #8
    d458:	d400      	bmi.n	d45c <__aeabi_dadd+0x514>
    d45a:	e62c      	b.n	d0b6 <__aeabi_dadd+0x16e>
    d45c:	1bd7      	subs	r7, r2, r7
    d45e:	42ba      	cmp	r2, r7
    d460:	4192      	sbcs	r2, r2
    d462:	1b1c      	subs	r4, r3, r4
    d464:	4252      	negs	r2, r2
    d466:	1aa4      	subs	r4, r4, r2
    d468:	46d8      	mov	r8, fp
    d46a:	e5f1      	b.n	d050 <__aeabi_dadd+0x108>
    d46c:	0018      	movs	r0, r3
    d46e:	4310      	orrs	r0, r2
    d470:	d100      	bne.n	d474 <__aeabi_dadd+0x52c>
    d472:	e763      	b.n	d33c <__aeabi_dadd+0x3f4>
    d474:	08f8      	lsrs	r0, r7, #3
    d476:	0767      	lsls	r7, r4, #29
    d478:	4307      	orrs	r7, r0
    d47a:	2080      	movs	r0, #128	; 0x80
    d47c:	08e4      	lsrs	r4, r4, #3
    d47e:	0300      	lsls	r0, r0, #12
    d480:	4204      	tst	r4, r0
    d482:	d008      	beq.n	d496 <__aeabi_dadd+0x54e>
    d484:	08dd      	lsrs	r5, r3, #3
    d486:	4205      	tst	r5, r0
    d488:	d105      	bne.n	d496 <__aeabi_dadd+0x54e>
    d48a:	08d2      	lsrs	r2, r2, #3
    d48c:	0759      	lsls	r1, r3, #29
    d48e:	4311      	orrs	r1, r2
    d490:	000f      	movs	r7, r1
    d492:	002c      	movs	r4, r5
    d494:	46d8      	mov	r8, fp
    d496:	0f7b      	lsrs	r3, r7, #29
    d498:	00e4      	lsls	r4, r4, #3
    d49a:	431c      	orrs	r4, r3
    d49c:	00ff      	lsls	r7, r7, #3
    d49e:	4e30      	ldr	r6, [pc, #192]	; (d560 <__aeabi_dadd+0x618>)
    d4a0:	e5d6      	b.n	d050 <__aeabi_dadd+0x108>
    d4a2:	000c      	movs	r4, r1
    d4a4:	0017      	movs	r7, r2
    d4a6:	0006      	movs	r6, r0
    d4a8:	e5d2      	b.n	d050 <__aeabi_dadd+0x108>
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d038      	beq.n	d520 <__aeabi_dadd+0x5d8>
    d4ae:	000b      	movs	r3, r1
    d4b0:	4313      	orrs	r3, r2
    d4b2:	d100      	bne.n	d4b6 <__aeabi_dadd+0x56e>
    d4b4:	e742      	b.n	d33c <__aeabi_dadd+0x3f4>
    d4b6:	08f8      	lsrs	r0, r7, #3
    d4b8:	0767      	lsls	r7, r4, #29
    d4ba:	4307      	orrs	r7, r0
    d4bc:	2080      	movs	r0, #128	; 0x80
    d4be:	08e4      	lsrs	r4, r4, #3
    d4c0:	0300      	lsls	r0, r0, #12
    d4c2:	4204      	tst	r4, r0
    d4c4:	d0e7      	beq.n	d496 <__aeabi_dadd+0x54e>
    d4c6:	08cb      	lsrs	r3, r1, #3
    d4c8:	4203      	tst	r3, r0
    d4ca:	d1e4      	bne.n	d496 <__aeabi_dadd+0x54e>
    d4cc:	08d2      	lsrs	r2, r2, #3
    d4ce:	0749      	lsls	r1, r1, #29
    d4d0:	4311      	orrs	r1, r2
    d4d2:	000f      	movs	r7, r1
    d4d4:	001c      	movs	r4, r3
    d4d6:	e7de      	b.n	d496 <__aeabi_dadd+0x54e>
    d4d8:	2700      	movs	r7, #0
    d4da:	2400      	movs	r4, #0
    d4dc:	e5d5      	b.n	d08a <__aeabi_dadd+0x142>
    d4de:	2100      	movs	r1, #0
    d4e0:	e76b      	b.n	d3ba <__aeabi_dadd+0x472>
    d4e2:	2500      	movs	r5, #0
    d4e4:	2700      	movs	r7, #0
    d4e6:	e5f3      	b.n	d0d0 <__aeabi_dadd+0x188>
    d4e8:	464e      	mov	r6, r9
    d4ea:	0025      	movs	r5, r4
    d4ec:	3e20      	subs	r6, #32
    d4ee:	40f5      	lsrs	r5, r6
    d4f0:	464b      	mov	r3, r9
    d4f2:	002e      	movs	r6, r5
    d4f4:	2b20      	cmp	r3, #32
    d4f6:	d02d      	beq.n	d554 <__aeabi_dadd+0x60c>
    d4f8:	2540      	movs	r5, #64	; 0x40
    d4fa:	1aed      	subs	r5, r5, r3
    d4fc:	40ac      	lsls	r4, r5
    d4fe:	4327      	orrs	r7, r4
    d500:	1e7c      	subs	r4, r7, #1
    d502:	41a7      	sbcs	r7, r4
    d504:	2400      	movs	r4, #0
    d506:	4337      	orrs	r7, r6
    d508:	e6c9      	b.n	d29e <__aeabi_dadd+0x356>
    d50a:	2480      	movs	r4, #128	; 0x80
    d50c:	2500      	movs	r5, #0
    d50e:	0324      	lsls	r4, r4, #12
    d510:	4e13      	ldr	r6, [pc, #76]	; (d560 <__aeabi_dadd+0x618>)
    d512:	2700      	movs	r7, #0
    d514:	e5dc      	b.n	d0d0 <__aeabi_dadd+0x188>
    d516:	4327      	orrs	r7, r4
    d518:	1e7c      	subs	r4, r7, #1
    d51a:	41a7      	sbcs	r7, r4
    d51c:	2400      	movs	r4, #0
    d51e:	e779      	b.n	d414 <__aeabi_dadd+0x4cc>
    d520:	000c      	movs	r4, r1
    d522:	0017      	movs	r7, r2
    d524:	4e0e      	ldr	r6, [pc, #56]	; (d560 <__aeabi_dadd+0x618>)
    d526:	e593      	b.n	d050 <__aeabi_dadd+0x108>
    d528:	000c      	movs	r4, r1
    d52a:	0017      	movs	r7, r2
    d52c:	e590      	b.n	d050 <__aeabi_dadd+0x108>
    d52e:	4656      	mov	r6, sl
    d530:	0023      	movs	r3, r4
    d532:	3e20      	subs	r6, #32
    d534:	40f3      	lsrs	r3, r6
    d536:	4699      	mov	r9, r3
    d538:	4653      	mov	r3, sl
    d53a:	2b20      	cmp	r3, #32
    d53c:	d00e      	beq.n	d55c <__aeabi_dadd+0x614>
    d53e:	2340      	movs	r3, #64	; 0x40
    d540:	4656      	mov	r6, sl
    d542:	1b9b      	subs	r3, r3, r6
    d544:	409c      	lsls	r4, r3
    d546:	4327      	orrs	r7, r4
    d548:	1e7c      	subs	r4, r7, #1
    d54a:	41a7      	sbcs	r7, r4
    d54c:	464b      	mov	r3, r9
    d54e:	2400      	movs	r4, #0
    d550:	431f      	orrs	r7, r3
    d552:	e75f      	b.n	d414 <__aeabi_dadd+0x4cc>
    d554:	2400      	movs	r4, #0
    d556:	e7d2      	b.n	d4fe <__aeabi_dadd+0x5b6>
    d558:	0017      	movs	r7, r2
    d55a:	e5b2      	b.n	d0c2 <__aeabi_dadd+0x17a>
    d55c:	2400      	movs	r4, #0
    d55e:	e7f2      	b.n	d546 <__aeabi_dadd+0x5fe>
    d560:	000007ff 	.word	0x000007ff
    d564:	ff7fffff 	.word	0xff7fffff

0000d568 <__aeabi_ddiv>:
    d568:	b5f0      	push	{r4, r5, r6, r7, lr}
    d56a:	4657      	mov	r7, sl
    d56c:	4645      	mov	r5, r8
    d56e:	46de      	mov	lr, fp
    d570:	464e      	mov	r6, r9
    d572:	b5e0      	push	{r5, r6, r7, lr}
    d574:	004c      	lsls	r4, r1, #1
    d576:	030e      	lsls	r6, r1, #12
    d578:	b087      	sub	sp, #28
    d57a:	4683      	mov	fp, r0
    d57c:	4692      	mov	sl, r2
    d57e:	001d      	movs	r5, r3
    d580:	4680      	mov	r8, r0
    d582:	0b36      	lsrs	r6, r6, #12
    d584:	0d64      	lsrs	r4, r4, #21
    d586:	0fcf      	lsrs	r7, r1, #31
    d588:	2c00      	cmp	r4, #0
    d58a:	d04f      	beq.n	d62c <__aeabi_ddiv+0xc4>
    d58c:	4b6f      	ldr	r3, [pc, #444]	; (d74c <__aeabi_ddiv+0x1e4>)
    d58e:	429c      	cmp	r4, r3
    d590:	d035      	beq.n	d5fe <__aeabi_ddiv+0x96>
    d592:	2380      	movs	r3, #128	; 0x80
    d594:	0f42      	lsrs	r2, r0, #29
    d596:	041b      	lsls	r3, r3, #16
    d598:	00f6      	lsls	r6, r6, #3
    d59a:	4313      	orrs	r3, r2
    d59c:	4333      	orrs	r3, r6
    d59e:	4699      	mov	r9, r3
    d5a0:	00c3      	lsls	r3, r0, #3
    d5a2:	4698      	mov	r8, r3
    d5a4:	4b6a      	ldr	r3, [pc, #424]	; (d750 <__aeabi_ddiv+0x1e8>)
    d5a6:	2600      	movs	r6, #0
    d5a8:	469c      	mov	ip, r3
    d5aa:	2300      	movs	r3, #0
    d5ac:	4464      	add	r4, ip
    d5ae:	9303      	str	r3, [sp, #12]
    d5b0:	032b      	lsls	r3, r5, #12
    d5b2:	0b1b      	lsrs	r3, r3, #12
    d5b4:	469b      	mov	fp, r3
    d5b6:	006b      	lsls	r3, r5, #1
    d5b8:	0fed      	lsrs	r5, r5, #31
    d5ba:	4650      	mov	r0, sl
    d5bc:	0d5b      	lsrs	r3, r3, #21
    d5be:	9501      	str	r5, [sp, #4]
    d5c0:	d05e      	beq.n	d680 <__aeabi_ddiv+0x118>
    d5c2:	4a62      	ldr	r2, [pc, #392]	; (d74c <__aeabi_ddiv+0x1e4>)
    d5c4:	4293      	cmp	r3, r2
    d5c6:	d053      	beq.n	d670 <__aeabi_ddiv+0x108>
    d5c8:	465a      	mov	r2, fp
    d5ca:	00d1      	lsls	r1, r2, #3
    d5cc:	2280      	movs	r2, #128	; 0x80
    d5ce:	0f40      	lsrs	r0, r0, #29
    d5d0:	0412      	lsls	r2, r2, #16
    d5d2:	4302      	orrs	r2, r0
    d5d4:	430a      	orrs	r2, r1
    d5d6:	4693      	mov	fp, r2
    d5d8:	4652      	mov	r2, sl
    d5da:	00d1      	lsls	r1, r2, #3
    d5dc:	4a5c      	ldr	r2, [pc, #368]	; (d750 <__aeabi_ddiv+0x1e8>)
    d5de:	4694      	mov	ip, r2
    d5e0:	2200      	movs	r2, #0
    d5e2:	4463      	add	r3, ip
    d5e4:	0038      	movs	r0, r7
    d5e6:	4068      	eors	r0, r5
    d5e8:	4684      	mov	ip, r0
    d5ea:	9002      	str	r0, [sp, #8]
    d5ec:	1ae4      	subs	r4, r4, r3
    d5ee:	4316      	orrs	r6, r2
    d5f0:	2e0f      	cmp	r6, #15
    d5f2:	d900      	bls.n	d5f6 <__aeabi_ddiv+0x8e>
    d5f4:	e0b4      	b.n	d760 <__aeabi_ddiv+0x1f8>
    d5f6:	4b57      	ldr	r3, [pc, #348]	; (d754 <__aeabi_ddiv+0x1ec>)
    d5f8:	00b6      	lsls	r6, r6, #2
    d5fa:	599b      	ldr	r3, [r3, r6]
    d5fc:	469f      	mov	pc, r3
    d5fe:	0003      	movs	r3, r0
    d600:	4333      	orrs	r3, r6
    d602:	4699      	mov	r9, r3
    d604:	d16c      	bne.n	d6e0 <__aeabi_ddiv+0x178>
    d606:	2300      	movs	r3, #0
    d608:	4698      	mov	r8, r3
    d60a:	3302      	adds	r3, #2
    d60c:	2608      	movs	r6, #8
    d60e:	9303      	str	r3, [sp, #12]
    d610:	e7ce      	b.n	d5b0 <__aeabi_ddiv+0x48>
    d612:	46cb      	mov	fp, r9
    d614:	4641      	mov	r1, r8
    d616:	9a03      	ldr	r2, [sp, #12]
    d618:	9701      	str	r7, [sp, #4]
    d61a:	2a02      	cmp	r2, #2
    d61c:	d165      	bne.n	d6ea <__aeabi_ddiv+0x182>
    d61e:	9b01      	ldr	r3, [sp, #4]
    d620:	4c4a      	ldr	r4, [pc, #296]	; (d74c <__aeabi_ddiv+0x1e4>)
    d622:	469c      	mov	ip, r3
    d624:	2300      	movs	r3, #0
    d626:	2200      	movs	r2, #0
    d628:	4698      	mov	r8, r3
    d62a:	e06b      	b.n	d704 <__aeabi_ddiv+0x19c>
    d62c:	0003      	movs	r3, r0
    d62e:	4333      	orrs	r3, r6
    d630:	4699      	mov	r9, r3
    d632:	d04e      	beq.n	d6d2 <__aeabi_ddiv+0x16a>
    d634:	2e00      	cmp	r6, #0
    d636:	d100      	bne.n	d63a <__aeabi_ddiv+0xd2>
    d638:	e1bc      	b.n	d9b4 <__aeabi_ddiv+0x44c>
    d63a:	0030      	movs	r0, r6
    d63c:	f001 fa5e 	bl	eafc <__clzsi2>
    d640:	0003      	movs	r3, r0
    d642:	3b0b      	subs	r3, #11
    d644:	2b1c      	cmp	r3, #28
    d646:	dd00      	ble.n	d64a <__aeabi_ddiv+0xe2>
    d648:	e1ac      	b.n	d9a4 <__aeabi_ddiv+0x43c>
    d64a:	221d      	movs	r2, #29
    d64c:	1ad3      	subs	r3, r2, r3
    d64e:	465a      	mov	r2, fp
    d650:	0001      	movs	r1, r0
    d652:	40da      	lsrs	r2, r3
    d654:	3908      	subs	r1, #8
    d656:	408e      	lsls	r6, r1
    d658:	0013      	movs	r3, r2
    d65a:	4333      	orrs	r3, r6
    d65c:	4699      	mov	r9, r3
    d65e:	465b      	mov	r3, fp
    d660:	408b      	lsls	r3, r1
    d662:	4698      	mov	r8, r3
    d664:	2300      	movs	r3, #0
    d666:	4c3c      	ldr	r4, [pc, #240]	; (d758 <__aeabi_ddiv+0x1f0>)
    d668:	2600      	movs	r6, #0
    d66a:	1a24      	subs	r4, r4, r0
    d66c:	9303      	str	r3, [sp, #12]
    d66e:	e79f      	b.n	d5b0 <__aeabi_ddiv+0x48>
    d670:	4651      	mov	r1, sl
    d672:	465a      	mov	r2, fp
    d674:	4311      	orrs	r1, r2
    d676:	d129      	bne.n	d6cc <__aeabi_ddiv+0x164>
    d678:	2200      	movs	r2, #0
    d67a:	4693      	mov	fp, r2
    d67c:	3202      	adds	r2, #2
    d67e:	e7b1      	b.n	d5e4 <__aeabi_ddiv+0x7c>
    d680:	4659      	mov	r1, fp
    d682:	4301      	orrs	r1, r0
    d684:	d01e      	beq.n	d6c4 <__aeabi_ddiv+0x15c>
    d686:	465b      	mov	r3, fp
    d688:	2b00      	cmp	r3, #0
    d68a:	d100      	bne.n	d68e <__aeabi_ddiv+0x126>
    d68c:	e19e      	b.n	d9cc <__aeabi_ddiv+0x464>
    d68e:	4658      	mov	r0, fp
    d690:	f001 fa34 	bl	eafc <__clzsi2>
    d694:	0003      	movs	r3, r0
    d696:	3b0b      	subs	r3, #11
    d698:	2b1c      	cmp	r3, #28
    d69a:	dd00      	ble.n	d69e <__aeabi_ddiv+0x136>
    d69c:	e18f      	b.n	d9be <__aeabi_ddiv+0x456>
    d69e:	0002      	movs	r2, r0
    d6a0:	4659      	mov	r1, fp
    d6a2:	3a08      	subs	r2, #8
    d6a4:	4091      	lsls	r1, r2
    d6a6:	468b      	mov	fp, r1
    d6a8:	211d      	movs	r1, #29
    d6aa:	1acb      	subs	r3, r1, r3
    d6ac:	4651      	mov	r1, sl
    d6ae:	40d9      	lsrs	r1, r3
    d6b0:	000b      	movs	r3, r1
    d6b2:	4659      	mov	r1, fp
    d6b4:	430b      	orrs	r3, r1
    d6b6:	4651      	mov	r1, sl
    d6b8:	469b      	mov	fp, r3
    d6ba:	4091      	lsls	r1, r2
    d6bc:	4b26      	ldr	r3, [pc, #152]	; (d758 <__aeabi_ddiv+0x1f0>)
    d6be:	2200      	movs	r2, #0
    d6c0:	1a1b      	subs	r3, r3, r0
    d6c2:	e78f      	b.n	d5e4 <__aeabi_ddiv+0x7c>
    d6c4:	2300      	movs	r3, #0
    d6c6:	2201      	movs	r2, #1
    d6c8:	469b      	mov	fp, r3
    d6ca:	e78b      	b.n	d5e4 <__aeabi_ddiv+0x7c>
    d6cc:	4651      	mov	r1, sl
    d6ce:	2203      	movs	r2, #3
    d6d0:	e788      	b.n	d5e4 <__aeabi_ddiv+0x7c>
    d6d2:	2300      	movs	r3, #0
    d6d4:	4698      	mov	r8, r3
    d6d6:	3301      	adds	r3, #1
    d6d8:	2604      	movs	r6, #4
    d6da:	2400      	movs	r4, #0
    d6dc:	9303      	str	r3, [sp, #12]
    d6de:	e767      	b.n	d5b0 <__aeabi_ddiv+0x48>
    d6e0:	2303      	movs	r3, #3
    d6e2:	46b1      	mov	r9, r6
    d6e4:	9303      	str	r3, [sp, #12]
    d6e6:	260c      	movs	r6, #12
    d6e8:	e762      	b.n	d5b0 <__aeabi_ddiv+0x48>
    d6ea:	2a03      	cmp	r2, #3
    d6ec:	d100      	bne.n	d6f0 <__aeabi_ddiv+0x188>
    d6ee:	e25c      	b.n	dbaa <__aeabi_ddiv+0x642>
    d6f0:	9b01      	ldr	r3, [sp, #4]
    d6f2:	2a01      	cmp	r2, #1
    d6f4:	d000      	beq.n	d6f8 <__aeabi_ddiv+0x190>
    d6f6:	e1e4      	b.n	dac2 <__aeabi_ddiv+0x55a>
    d6f8:	4013      	ands	r3, r2
    d6fa:	469c      	mov	ip, r3
    d6fc:	2300      	movs	r3, #0
    d6fe:	2400      	movs	r4, #0
    d700:	2200      	movs	r2, #0
    d702:	4698      	mov	r8, r3
    d704:	2100      	movs	r1, #0
    d706:	0312      	lsls	r2, r2, #12
    d708:	0b13      	lsrs	r3, r2, #12
    d70a:	0d0a      	lsrs	r2, r1, #20
    d70c:	0512      	lsls	r2, r2, #20
    d70e:	431a      	orrs	r2, r3
    d710:	0523      	lsls	r3, r4, #20
    d712:	4c12      	ldr	r4, [pc, #72]	; (d75c <__aeabi_ddiv+0x1f4>)
    d714:	4640      	mov	r0, r8
    d716:	4022      	ands	r2, r4
    d718:	4313      	orrs	r3, r2
    d71a:	4662      	mov	r2, ip
    d71c:	005b      	lsls	r3, r3, #1
    d71e:	07d2      	lsls	r2, r2, #31
    d720:	085b      	lsrs	r3, r3, #1
    d722:	4313      	orrs	r3, r2
    d724:	0019      	movs	r1, r3
    d726:	b007      	add	sp, #28
    d728:	bc3c      	pop	{r2, r3, r4, r5}
    d72a:	4690      	mov	r8, r2
    d72c:	4699      	mov	r9, r3
    d72e:	46a2      	mov	sl, r4
    d730:	46ab      	mov	fp, r5
    d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d734:	2300      	movs	r3, #0
    d736:	2280      	movs	r2, #128	; 0x80
    d738:	469c      	mov	ip, r3
    d73a:	0312      	lsls	r2, r2, #12
    d73c:	4698      	mov	r8, r3
    d73e:	4c03      	ldr	r4, [pc, #12]	; (d74c <__aeabi_ddiv+0x1e4>)
    d740:	e7e0      	b.n	d704 <__aeabi_ddiv+0x19c>
    d742:	2300      	movs	r3, #0
    d744:	4c01      	ldr	r4, [pc, #4]	; (d74c <__aeabi_ddiv+0x1e4>)
    d746:	2200      	movs	r2, #0
    d748:	4698      	mov	r8, r3
    d74a:	e7db      	b.n	d704 <__aeabi_ddiv+0x19c>
    d74c:	000007ff 	.word	0x000007ff
    d750:	fffffc01 	.word	0xfffffc01
    d754:	0001497c 	.word	0x0001497c
    d758:	fffffc0d 	.word	0xfffffc0d
    d75c:	800fffff 	.word	0x800fffff
    d760:	45d9      	cmp	r9, fp
    d762:	d900      	bls.n	d766 <__aeabi_ddiv+0x1fe>
    d764:	e139      	b.n	d9da <__aeabi_ddiv+0x472>
    d766:	d100      	bne.n	d76a <__aeabi_ddiv+0x202>
    d768:	e134      	b.n	d9d4 <__aeabi_ddiv+0x46c>
    d76a:	2300      	movs	r3, #0
    d76c:	4646      	mov	r6, r8
    d76e:	464d      	mov	r5, r9
    d770:	469a      	mov	sl, r3
    d772:	3c01      	subs	r4, #1
    d774:	465b      	mov	r3, fp
    d776:	0e0a      	lsrs	r2, r1, #24
    d778:	021b      	lsls	r3, r3, #8
    d77a:	431a      	orrs	r2, r3
    d77c:	020b      	lsls	r3, r1, #8
    d77e:	0c17      	lsrs	r7, r2, #16
    d780:	9303      	str	r3, [sp, #12]
    d782:	0413      	lsls	r3, r2, #16
    d784:	0c1b      	lsrs	r3, r3, #16
    d786:	0039      	movs	r1, r7
    d788:	0028      	movs	r0, r5
    d78a:	4690      	mov	r8, r2
    d78c:	9301      	str	r3, [sp, #4]
    d78e:	f7fe ff3d 	bl	c60c <__udivsi3>
    d792:	0002      	movs	r2, r0
    d794:	9b01      	ldr	r3, [sp, #4]
    d796:	4683      	mov	fp, r0
    d798:	435a      	muls	r2, r3
    d79a:	0028      	movs	r0, r5
    d79c:	0039      	movs	r1, r7
    d79e:	4691      	mov	r9, r2
    d7a0:	f7fe ffba 	bl	c718 <__aeabi_uidivmod>
    d7a4:	0c35      	lsrs	r5, r6, #16
    d7a6:	0409      	lsls	r1, r1, #16
    d7a8:	430d      	orrs	r5, r1
    d7aa:	45a9      	cmp	r9, r5
    d7ac:	d90d      	bls.n	d7ca <__aeabi_ddiv+0x262>
    d7ae:	465b      	mov	r3, fp
    d7b0:	4445      	add	r5, r8
    d7b2:	3b01      	subs	r3, #1
    d7b4:	45a8      	cmp	r8, r5
    d7b6:	d900      	bls.n	d7ba <__aeabi_ddiv+0x252>
    d7b8:	e13a      	b.n	da30 <__aeabi_ddiv+0x4c8>
    d7ba:	45a9      	cmp	r9, r5
    d7bc:	d800      	bhi.n	d7c0 <__aeabi_ddiv+0x258>
    d7be:	e137      	b.n	da30 <__aeabi_ddiv+0x4c8>
    d7c0:	2302      	movs	r3, #2
    d7c2:	425b      	negs	r3, r3
    d7c4:	469c      	mov	ip, r3
    d7c6:	4445      	add	r5, r8
    d7c8:	44e3      	add	fp, ip
    d7ca:	464b      	mov	r3, r9
    d7cc:	1aeb      	subs	r3, r5, r3
    d7ce:	0039      	movs	r1, r7
    d7d0:	0018      	movs	r0, r3
    d7d2:	9304      	str	r3, [sp, #16]
    d7d4:	f7fe ff1a 	bl	c60c <__udivsi3>
    d7d8:	9b01      	ldr	r3, [sp, #4]
    d7da:	0005      	movs	r5, r0
    d7dc:	4343      	muls	r3, r0
    d7de:	0039      	movs	r1, r7
    d7e0:	9804      	ldr	r0, [sp, #16]
    d7e2:	4699      	mov	r9, r3
    d7e4:	f7fe ff98 	bl	c718 <__aeabi_uidivmod>
    d7e8:	0433      	lsls	r3, r6, #16
    d7ea:	0409      	lsls	r1, r1, #16
    d7ec:	0c1b      	lsrs	r3, r3, #16
    d7ee:	430b      	orrs	r3, r1
    d7f0:	4599      	cmp	r9, r3
    d7f2:	d909      	bls.n	d808 <__aeabi_ddiv+0x2a0>
    d7f4:	4443      	add	r3, r8
    d7f6:	1e6a      	subs	r2, r5, #1
    d7f8:	4598      	cmp	r8, r3
    d7fa:	d900      	bls.n	d7fe <__aeabi_ddiv+0x296>
    d7fc:	e11a      	b.n	da34 <__aeabi_ddiv+0x4cc>
    d7fe:	4599      	cmp	r9, r3
    d800:	d800      	bhi.n	d804 <__aeabi_ddiv+0x29c>
    d802:	e117      	b.n	da34 <__aeabi_ddiv+0x4cc>
    d804:	3d02      	subs	r5, #2
    d806:	4443      	add	r3, r8
    d808:	464a      	mov	r2, r9
    d80a:	1a9b      	subs	r3, r3, r2
    d80c:	465a      	mov	r2, fp
    d80e:	0412      	lsls	r2, r2, #16
    d810:	432a      	orrs	r2, r5
    d812:	9903      	ldr	r1, [sp, #12]
    d814:	4693      	mov	fp, r2
    d816:	0c10      	lsrs	r0, r2, #16
    d818:	0c0a      	lsrs	r2, r1, #16
    d81a:	4691      	mov	r9, r2
    d81c:	0409      	lsls	r1, r1, #16
    d81e:	465a      	mov	r2, fp
    d820:	0c09      	lsrs	r1, r1, #16
    d822:	464e      	mov	r6, r9
    d824:	000d      	movs	r5, r1
    d826:	0412      	lsls	r2, r2, #16
    d828:	0c12      	lsrs	r2, r2, #16
    d82a:	4345      	muls	r5, r0
    d82c:	9105      	str	r1, [sp, #20]
    d82e:	4351      	muls	r1, r2
    d830:	4372      	muls	r2, r6
    d832:	4370      	muls	r0, r6
    d834:	1952      	adds	r2, r2, r5
    d836:	0c0e      	lsrs	r6, r1, #16
    d838:	18b2      	adds	r2, r6, r2
    d83a:	4295      	cmp	r5, r2
    d83c:	d903      	bls.n	d846 <__aeabi_ddiv+0x2de>
    d83e:	2580      	movs	r5, #128	; 0x80
    d840:	026d      	lsls	r5, r5, #9
    d842:	46ac      	mov	ip, r5
    d844:	4460      	add	r0, ip
    d846:	0c15      	lsrs	r5, r2, #16
    d848:	0409      	lsls	r1, r1, #16
    d84a:	0412      	lsls	r2, r2, #16
    d84c:	0c09      	lsrs	r1, r1, #16
    d84e:	1828      	adds	r0, r5, r0
    d850:	1852      	adds	r2, r2, r1
    d852:	4283      	cmp	r3, r0
    d854:	d200      	bcs.n	d858 <__aeabi_ddiv+0x2f0>
    d856:	e0ce      	b.n	d9f6 <__aeabi_ddiv+0x48e>
    d858:	d100      	bne.n	d85c <__aeabi_ddiv+0x2f4>
    d85a:	e0c8      	b.n	d9ee <__aeabi_ddiv+0x486>
    d85c:	1a1d      	subs	r5, r3, r0
    d85e:	4653      	mov	r3, sl
    d860:	1a9e      	subs	r6, r3, r2
    d862:	45b2      	cmp	sl, r6
    d864:	4192      	sbcs	r2, r2
    d866:	4252      	negs	r2, r2
    d868:	1aab      	subs	r3, r5, r2
    d86a:	469a      	mov	sl, r3
    d86c:	4598      	cmp	r8, r3
    d86e:	d100      	bne.n	d872 <__aeabi_ddiv+0x30a>
    d870:	e117      	b.n	daa2 <__aeabi_ddiv+0x53a>
    d872:	0039      	movs	r1, r7
    d874:	0018      	movs	r0, r3
    d876:	f7fe fec9 	bl	c60c <__udivsi3>
    d87a:	9b01      	ldr	r3, [sp, #4]
    d87c:	0005      	movs	r5, r0
    d87e:	4343      	muls	r3, r0
    d880:	0039      	movs	r1, r7
    d882:	4650      	mov	r0, sl
    d884:	9304      	str	r3, [sp, #16]
    d886:	f7fe ff47 	bl	c718 <__aeabi_uidivmod>
    d88a:	9804      	ldr	r0, [sp, #16]
    d88c:	040b      	lsls	r3, r1, #16
    d88e:	0c31      	lsrs	r1, r6, #16
    d890:	4319      	orrs	r1, r3
    d892:	4288      	cmp	r0, r1
    d894:	d909      	bls.n	d8aa <__aeabi_ddiv+0x342>
    d896:	4441      	add	r1, r8
    d898:	1e6b      	subs	r3, r5, #1
    d89a:	4588      	cmp	r8, r1
    d89c:	d900      	bls.n	d8a0 <__aeabi_ddiv+0x338>
    d89e:	e107      	b.n	dab0 <__aeabi_ddiv+0x548>
    d8a0:	4288      	cmp	r0, r1
    d8a2:	d800      	bhi.n	d8a6 <__aeabi_ddiv+0x33e>
    d8a4:	e104      	b.n	dab0 <__aeabi_ddiv+0x548>
    d8a6:	3d02      	subs	r5, #2
    d8a8:	4441      	add	r1, r8
    d8aa:	9b04      	ldr	r3, [sp, #16]
    d8ac:	1acb      	subs	r3, r1, r3
    d8ae:	0018      	movs	r0, r3
    d8b0:	0039      	movs	r1, r7
    d8b2:	9304      	str	r3, [sp, #16]
    d8b4:	f7fe feaa 	bl	c60c <__udivsi3>
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	4682      	mov	sl, r0
    d8bc:	4343      	muls	r3, r0
    d8be:	0039      	movs	r1, r7
    d8c0:	9804      	ldr	r0, [sp, #16]
    d8c2:	9301      	str	r3, [sp, #4]
    d8c4:	f7fe ff28 	bl	c718 <__aeabi_uidivmod>
    d8c8:	9801      	ldr	r0, [sp, #4]
    d8ca:	040b      	lsls	r3, r1, #16
    d8cc:	0431      	lsls	r1, r6, #16
    d8ce:	0c09      	lsrs	r1, r1, #16
    d8d0:	4319      	orrs	r1, r3
    d8d2:	4288      	cmp	r0, r1
    d8d4:	d90d      	bls.n	d8f2 <__aeabi_ddiv+0x38a>
    d8d6:	4653      	mov	r3, sl
    d8d8:	4441      	add	r1, r8
    d8da:	3b01      	subs	r3, #1
    d8dc:	4588      	cmp	r8, r1
    d8de:	d900      	bls.n	d8e2 <__aeabi_ddiv+0x37a>
    d8e0:	e0e8      	b.n	dab4 <__aeabi_ddiv+0x54c>
    d8e2:	4288      	cmp	r0, r1
    d8e4:	d800      	bhi.n	d8e8 <__aeabi_ddiv+0x380>
    d8e6:	e0e5      	b.n	dab4 <__aeabi_ddiv+0x54c>
    d8e8:	2302      	movs	r3, #2
    d8ea:	425b      	negs	r3, r3
    d8ec:	469c      	mov	ip, r3
    d8ee:	4441      	add	r1, r8
    d8f0:	44e2      	add	sl, ip
    d8f2:	9b01      	ldr	r3, [sp, #4]
    d8f4:	042d      	lsls	r5, r5, #16
    d8f6:	1ace      	subs	r6, r1, r3
    d8f8:	4651      	mov	r1, sl
    d8fa:	4329      	orrs	r1, r5
    d8fc:	9d05      	ldr	r5, [sp, #20]
    d8fe:	464f      	mov	r7, r9
    d900:	002a      	movs	r2, r5
    d902:	040b      	lsls	r3, r1, #16
    d904:	0c08      	lsrs	r0, r1, #16
    d906:	0c1b      	lsrs	r3, r3, #16
    d908:	435a      	muls	r2, r3
    d90a:	4345      	muls	r5, r0
    d90c:	437b      	muls	r3, r7
    d90e:	4378      	muls	r0, r7
    d910:	195b      	adds	r3, r3, r5
    d912:	0c17      	lsrs	r7, r2, #16
    d914:	18fb      	adds	r3, r7, r3
    d916:	429d      	cmp	r5, r3
    d918:	d903      	bls.n	d922 <__aeabi_ddiv+0x3ba>
    d91a:	2580      	movs	r5, #128	; 0x80
    d91c:	026d      	lsls	r5, r5, #9
    d91e:	46ac      	mov	ip, r5
    d920:	4460      	add	r0, ip
    d922:	0c1d      	lsrs	r5, r3, #16
    d924:	0412      	lsls	r2, r2, #16
    d926:	041b      	lsls	r3, r3, #16
    d928:	0c12      	lsrs	r2, r2, #16
    d92a:	1828      	adds	r0, r5, r0
    d92c:	189b      	adds	r3, r3, r2
    d92e:	4286      	cmp	r6, r0
    d930:	d200      	bcs.n	d934 <__aeabi_ddiv+0x3cc>
    d932:	e093      	b.n	da5c <__aeabi_ddiv+0x4f4>
    d934:	d100      	bne.n	d938 <__aeabi_ddiv+0x3d0>
    d936:	e08e      	b.n	da56 <__aeabi_ddiv+0x4ee>
    d938:	2301      	movs	r3, #1
    d93a:	4319      	orrs	r1, r3
    d93c:	4ba0      	ldr	r3, [pc, #640]	; (dbc0 <__aeabi_ddiv+0x658>)
    d93e:	18e3      	adds	r3, r4, r3
    d940:	2b00      	cmp	r3, #0
    d942:	dc00      	bgt.n	d946 <__aeabi_ddiv+0x3de>
    d944:	e099      	b.n	da7a <__aeabi_ddiv+0x512>
    d946:	074a      	lsls	r2, r1, #29
    d948:	d000      	beq.n	d94c <__aeabi_ddiv+0x3e4>
    d94a:	e09e      	b.n	da8a <__aeabi_ddiv+0x522>
    d94c:	465a      	mov	r2, fp
    d94e:	01d2      	lsls	r2, r2, #7
    d950:	d506      	bpl.n	d960 <__aeabi_ddiv+0x3f8>
    d952:	465a      	mov	r2, fp
    d954:	4b9b      	ldr	r3, [pc, #620]	; (dbc4 <__aeabi_ddiv+0x65c>)
    d956:	401a      	ands	r2, r3
    d958:	2380      	movs	r3, #128	; 0x80
    d95a:	4693      	mov	fp, r2
    d95c:	00db      	lsls	r3, r3, #3
    d95e:	18e3      	adds	r3, r4, r3
    d960:	4a99      	ldr	r2, [pc, #612]	; (dbc8 <__aeabi_ddiv+0x660>)
    d962:	4293      	cmp	r3, r2
    d964:	dd68      	ble.n	da38 <__aeabi_ddiv+0x4d0>
    d966:	2301      	movs	r3, #1
    d968:	9a02      	ldr	r2, [sp, #8]
    d96a:	4c98      	ldr	r4, [pc, #608]	; (dbcc <__aeabi_ddiv+0x664>)
    d96c:	401a      	ands	r2, r3
    d96e:	2300      	movs	r3, #0
    d970:	4694      	mov	ip, r2
    d972:	4698      	mov	r8, r3
    d974:	2200      	movs	r2, #0
    d976:	e6c5      	b.n	d704 <__aeabi_ddiv+0x19c>
    d978:	2280      	movs	r2, #128	; 0x80
    d97a:	464b      	mov	r3, r9
    d97c:	0312      	lsls	r2, r2, #12
    d97e:	4213      	tst	r3, r2
    d980:	d00a      	beq.n	d998 <__aeabi_ddiv+0x430>
    d982:	465b      	mov	r3, fp
    d984:	4213      	tst	r3, r2
    d986:	d106      	bne.n	d996 <__aeabi_ddiv+0x42e>
    d988:	431a      	orrs	r2, r3
    d98a:	0312      	lsls	r2, r2, #12
    d98c:	0b12      	lsrs	r2, r2, #12
    d98e:	46ac      	mov	ip, r5
    d990:	4688      	mov	r8, r1
    d992:	4c8e      	ldr	r4, [pc, #568]	; (dbcc <__aeabi_ddiv+0x664>)
    d994:	e6b6      	b.n	d704 <__aeabi_ddiv+0x19c>
    d996:	464b      	mov	r3, r9
    d998:	431a      	orrs	r2, r3
    d99a:	0312      	lsls	r2, r2, #12
    d99c:	0b12      	lsrs	r2, r2, #12
    d99e:	46bc      	mov	ip, r7
    d9a0:	4c8a      	ldr	r4, [pc, #552]	; (dbcc <__aeabi_ddiv+0x664>)
    d9a2:	e6af      	b.n	d704 <__aeabi_ddiv+0x19c>
    d9a4:	0003      	movs	r3, r0
    d9a6:	465a      	mov	r2, fp
    d9a8:	3b28      	subs	r3, #40	; 0x28
    d9aa:	409a      	lsls	r2, r3
    d9ac:	2300      	movs	r3, #0
    d9ae:	4691      	mov	r9, r2
    d9b0:	4698      	mov	r8, r3
    d9b2:	e657      	b.n	d664 <__aeabi_ddiv+0xfc>
    d9b4:	4658      	mov	r0, fp
    d9b6:	f001 f8a1 	bl	eafc <__clzsi2>
    d9ba:	3020      	adds	r0, #32
    d9bc:	e640      	b.n	d640 <__aeabi_ddiv+0xd8>
    d9be:	0003      	movs	r3, r0
    d9c0:	4652      	mov	r2, sl
    d9c2:	3b28      	subs	r3, #40	; 0x28
    d9c4:	409a      	lsls	r2, r3
    d9c6:	2100      	movs	r1, #0
    d9c8:	4693      	mov	fp, r2
    d9ca:	e677      	b.n	d6bc <__aeabi_ddiv+0x154>
    d9cc:	f001 f896 	bl	eafc <__clzsi2>
    d9d0:	3020      	adds	r0, #32
    d9d2:	e65f      	b.n	d694 <__aeabi_ddiv+0x12c>
    d9d4:	4588      	cmp	r8, r1
    d9d6:	d200      	bcs.n	d9da <__aeabi_ddiv+0x472>
    d9d8:	e6c7      	b.n	d76a <__aeabi_ddiv+0x202>
    d9da:	464b      	mov	r3, r9
    d9dc:	07de      	lsls	r6, r3, #31
    d9de:	085d      	lsrs	r5, r3, #1
    d9e0:	4643      	mov	r3, r8
    d9e2:	085b      	lsrs	r3, r3, #1
    d9e4:	431e      	orrs	r6, r3
    d9e6:	4643      	mov	r3, r8
    d9e8:	07db      	lsls	r3, r3, #31
    d9ea:	469a      	mov	sl, r3
    d9ec:	e6c2      	b.n	d774 <__aeabi_ddiv+0x20c>
    d9ee:	2500      	movs	r5, #0
    d9f0:	4592      	cmp	sl, r2
    d9f2:	d300      	bcc.n	d9f6 <__aeabi_ddiv+0x48e>
    d9f4:	e733      	b.n	d85e <__aeabi_ddiv+0x2f6>
    d9f6:	9e03      	ldr	r6, [sp, #12]
    d9f8:	4659      	mov	r1, fp
    d9fa:	46b4      	mov	ip, r6
    d9fc:	44e2      	add	sl, ip
    d9fe:	45b2      	cmp	sl, r6
    da00:	41ad      	sbcs	r5, r5
    da02:	426d      	negs	r5, r5
    da04:	4445      	add	r5, r8
    da06:	18eb      	adds	r3, r5, r3
    da08:	3901      	subs	r1, #1
    da0a:	4598      	cmp	r8, r3
    da0c:	d207      	bcs.n	da1e <__aeabi_ddiv+0x4b6>
    da0e:	4298      	cmp	r0, r3
    da10:	d900      	bls.n	da14 <__aeabi_ddiv+0x4ac>
    da12:	e07f      	b.n	db14 <__aeabi_ddiv+0x5ac>
    da14:	d100      	bne.n	da18 <__aeabi_ddiv+0x4b0>
    da16:	e0bc      	b.n	db92 <__aeabi_ddiv+0x62a>
    da18:	1a1d      	subs	r5, r3, r0
    da1a:	468b      	mov	fp, r1
    da1c:	e71f      	b.n	d85e <__aeabi_ddiv+0x2f6>
    da1e:	4598      	cmp	r8, r3
    da20:	d1fa      	bne.n	da18 <__aeabi_ddiv+0x4b0>
    da22:	9d03      	ldr	r5, [sp, #12]
    da24:	4555      	cmp	r5, sl
    da26:	d9f2      	bls.n	da0e <__aeabi_ddiv+0x4a6>
    da28:	4643      	mov	r3, r8
    da2a:	468b      	mov	fp, r1
    da2c:	1a1d      	subs	r5, r3, r0
    da2e:	e716      	b.n	d85e <__aeabi_ddiv+0x2f6>
    da30:	469b      	mov	fp, r3
    da32:	e6ca      	b.n	d7ca <__aeabi_ddiv+0x262>
    da34:	0015      	movs	r5, r2
    da36:	e6e7      	b.n	d808 <__aeabi_ddiv+0x2a0>
    da38:	465a      	mov	r2, fp
    da3a:	08c9      	lsrs	r1, r1, #3
    da3c:	0752      	lsls	r2, r2, #29
    da3e:	430a      	orrs	r2, r1
    da40:	055b      	lsls	r3, r3, #21
    da42:	4690      	mov	r8, r2
    da44:	0d5c      	lsrs	r4, r3, #21
    da46:	465a      	mov	r2, fp
    da48:	2301      	movs	r3, #1
    da4a:	9902      	ldr	r1, [sp, #8]
    da4c:	0252      	lsls	r2, r2, #9
    da4e:	4019      	ands	r1, r3
    da50:	0b12      	lsrs	r2, r2, #12
    da52:	468c      	mov	ip, r1
    da54:	e656      	b.n	d704 <__aeabi_ddiv+0x19c>
    da56:	2b00      	cmp	r3, #0
    da58:	d100      	bne.n	da5c <__aeabi_ddiv+0x4f4>
    da5a:	e76f      	b.n	d93c <__aeabi_ddiv+0x3d4>
    da5c:	4446      	add	r6, r8
    da5e:	1e4a      	subs	r2, r1, #1
    da60:	45b0      	cmp	r8, r6
    da62:	d929      	bls.n	dab8 <__aeabi_ddiv+0x550>
    da64:	0011      	movs	r1, r2
    da66:	4286      	cmp	r6, r0
    da68:	d000      	beq.n	da6c <__aeabi_ddiv+0x504>
    da6a:	e765      	b.n	d938 <__aeabi_ddiv+0x3d0>
    da6c:	9a03      	ldr	r2, [sp, #12]
    da6e:	4293      	cmp	r3, r2
    da70:	d000      	beq.n	da74 <__aeabi_ddiv+0x50c>
    da72:	e761      	b.n	d938 <__aeabi_ddiv+0x3d0>
    da74:	e762      	b.n	d93c <__aeabi_ddiv+0x3d4>
    da76:	2101      	movs	r1, #1
    da78:	4249      	negs	r1, r1
    da7a:	2001      	movs	r0, #1
    da7c:	1ac2      	subs	r2, r0, r3
    da7e:	2a38      	cmp	r2, #56	; 0x38
    da80:	dd21      	ble.n	dac6 <__aeabi_ddiv+0x55e>
    da82:	9b02      	ldr	r3, [sp, #8]
    da84:	4003      	ands	r3, r0
    da86:	469c      	mov	ip, r3
    da88:	e638      	b.n	d6fc <__aeabi_ddiv+0x194>
    da8a:	220f      	movs	r2, #15
    da8c:	400a      	ands	r2, r1
    da8e:	2a04      	cmp	r2, #4
    da90:	d100      	bne.n	da94 <__aeabi_ddiv+0x52c>
    da92:	e75b      	b.n	d94c <__aeabi_ddiv+0x3e4>
    da94:	000a      	movs	r2, r1
    da96:	1d11      	adds	r1, r2, #4
    da98:	4291      	cmp	r1, r2
    da9a:	4192      	sbcs	r2, r2
    da9c:	4252      	negs	r2, r2
    da9e:	4493      	add	fp, r2
    daa0:	e754      	b.n	d94c <__aeabi_ddiv+0x3e4>
    daa2:	4b47      	ldr	r3, [pc, #284]	; (dbc0 <__aeabi_ddiv+0x658>)
    daa4:	18e3      	adds	r3, r4, r3
    daa6:	2b00      	cmp	r3, #0
    daa8:	dde5      	ble.n	da76 <__aeabi_ddiv+0x50e>
    daaa:	2201      	movs	r2, #1
    daac:	4252      	negs	r2, r2
    daae:	e7f2      	b.n	da96 <__aeabi_ddiv+0x52e>
    dab0:	001d      	movs	r5, r3
    dab2:	e6fa      	b.n	d8aa <__aeabi_ddiv+0x342>
    dab4:	469a      	mov	sl, r3
    dab6:	e71c      	b.n	d8f2 <__aeabi_ddiv+0x38a>
    dab8:	42b0      	cmp	r0, r6
    daba:	d839      	bhi.n	db30 <__aeabi_ddiv+0x5c8>
    dabc:	d06e      	beq.n	db9c <__aeabi_ddiv+0x634>
    dabe:	0011      	movs	r1, r2
    dac0:	e73a      	b.n	d938 <__aeabi_ddiv+0x3d0>
    dac2:	9302      	str	r3, [sp, #8]
    dac4:	e73a      	b.n	d93c <__aeabi_ddiv+0x3d4>
    dac6:	2a1f      	cmp	r2, #31
    dac8:	dc3c      	bgt.n	db44 <__aeabi_ddiv+0x5dc>
    daca:	2320      	movs	r3, #32
    dacc:	1a9b      	subs	r3, r3, r2
    dace:	000c      	movs	r4, r1
    dad0:	4658      	mov	r0, fp
    dad2:	4099      	lsls	r1, r3
    dad4:	4098      	lsls	r0, r3
    dad6:	1e4b      	subs	r3, r1, #1
    dad8:	4199      	sbcs	r1, r3
    dada:	465b      	mov	r3, fp
    dadc:	40d4      	lsrs	r4, r2
    dade:	40d3      	lsrs	r3, r2
    dae0:	4320      	orrs	r0, r4
    dae2:	4308      	orrs	r0, r1
    dae4:	001a      	movs	r2, r3
    dae6:	0743      	lsls	r3, r0, #29
    dae8:	d009      	beq.n	dafe <__aeabi_ddiv+0x596>
    daea:	230f      	movs	r3, #15
    daec:	4003      	ands	r3, r0
    daee:	2b04      	cmp	r3, #4
    daf0:	d005      	beq.n	dafe <__aeabi_ddiv+0x596>
    daf2:	0001      	movs	r1, r0
    daf4:	1d08      	adds	r0, r1, #4
    daf6:	4288      	cmp	r0, r1
    daf8:	419b      	sbcs	r3, r3
    dafa:	425b      	negs	r3, r3
    dafc:	18d2      	adds	r2, r2, r3
    dafe:	0213      	lsls	r3, r2, #8
    db00:	d53a      	bpl.n	db78 <__aeabi_ddiv+0x610>
    db02:	2301      	movs	r3, #1
    db04:	9a02      	ldr	r2, [sp, #8]
    db06:	2401      	movs	r4, #1
    db08:	401a      	ands	r2, r3
    db0a:	2300      	movs	r3, #0
    db0c:	4694      	mov	ip, r2
    db0e:	4698      	mov	r8, r3
    db10:	2200      	movs	r2, #0
    db12:	e5f7      	b.n	d704 <__aeabi_ddiv+0x19c>
    db14:	2102      	movs	r1, #2
    db16:	4249      	negs	r1, r1
    db18:	468c      	mov	ip, r1
    db1a:	9d03      	ldr	r5, [sp, #12]
    db1c:	44e3      	add	fp, ip
    db1e:	46ac      	mov	ip, r5
    db20:	44e2      	add	sl, ip
    db22:	45aa      	cmp	sl, r5
    db24:	41ad      	sbcs	r5, r5
    db26:	426d      	negs	r5, r5
    db28:	4445      	add	r5, r8
    db2a:	18ed      	adds	r5, r5, r3
    db2c:	1a2d      	subs	r5, r5, r0
    db2e:	e696      	b.n	d85e <__aeabi_ddiv+0x2f6>
    db30:	1e8a      	subs	r2, r1, #2
    db32:	9903      	ldr	r1, [sp, #12]
    db34:	004d      	lsls	r5, r1, #1
    db36:	428d      	cmp	r5, r1
    db38:	4189      	sbcs	r1, r1
    db3a:	4249      	negs	r1, r1
    db3c:	4441      	add	r1, r8
    db3e:	1876      	adds	r6, r6, r1
    db40:	9503      	str	r5, [sp, #12]
    db42:	e78f      	b.n	da64 <__aeabi_ddiv+0x4fc>
    db44:	201f      	movs	r0, #31
    db46:	4240      	negs	r0, r0
    db48:	1ac3      	subs	r3, r0, r3
    db4a:	4658      	mov	r0, fp
    db4c:	40d8      	lsrs	r0, r3
    db4e:	0003      	movs	r3, r0
    db50:	2a20      	cmp	r2, #32
    db52:	d028      	beq.n	dba6 <__aeabi_ddiv+0x63e>
    db54:	2040      	movs	r0, #64	; 0x40
    db56:	465d      	mov	r5, fp
    db58:	1a82      	subs	r2, r0, r2
    db5a:	4095      	lsls	r5, r2
    db5c:	4329      	orrs	r1, r5
    db5e:	1e4a      	subs	r2, r1, #1
    db60:	4191      	sbcs	r1, r2
    db62:	4319      	orrs	r1, r3
    db64:	2307      	movs	r3, #7
    db66:	2200      	movs	r2, #0
    db68:	400b      	ands	r3, r1
    db6a:	d009      	beq.n	db80 <__aeabi_ddiv+0x618>
    db6c:	230f      	movs	r3, #15
    db6e:	2200      	movs	r2, #0
    db70:	400b      	ands	r3, r1
    db72:	0008      	movs	r0, r1
    db74:	2b04      	cmp	r3, #4
    db76:	d1bd      	bne.n	daf4 <__aeabi_ddiv+0x58c>
    db78:	0001      	movs	r1, r0
    db7a:	0753      	lsls	r3, r2, #29
    db7c:	0252      	lsls	r2, r2, #9
    db7e:	0b12      	lsrs	r2, r2, #12
    db80:	08c9      	lsrs	r1, r1, #3
    db82:	4319      	orrs	r1, r3
    db84:	2301      	movs	r3, #1
    db86:	4688      	mov	r8, r1
    db88:	9902      	ldr	r1, [sp, #8]
    db8a:	2400      	movs	r4, #0
    db8c:	4019      	ands	r1, r3
    db8e:	468c      	mov	ip, r1
    db90:	e5b8      	b.n	d704 <__aeabi_ddiv+0x19c>
    db92:	4552      	cmp	r2, sl
    db94:	d8be      	bhi.n	db14 <__aeabi_ddiv+0x5ac>
    db96:	468b      	mov	fp, r1
    db98:	2500      	movs	r5, #0
    db9a:	e660      	b.n	d85e <__aeabi_ddiv+0x2f6>
    db9c:	9d03      	ldr	r5, [sp, #12]
    db9e:	429d      	cmp	r5, r3
    dba0:	d3c6      	bcc.n	db30 <__aeabi_ddiv+0x5c8>
    dba2:	0011      	movs	r1, r2
    dba4:	e762      	b.n	da6c <__aeabi_ddiv+0x504>
    dba6:	2500      	movs	r5, #0
    dba8:	e7d8      	b.n	db5c <__aeabi_ddiv+0x5f4>
    dbaa:	2280      	movs	r2, #128	; 0x80
    dbac:	465b      	mov	r3, fp
    dbae:	0312      	lsls	r2, r2, #12
    dbb0:	431a      	orrs	r2, r3
    dbb2:	9b01      	ldr	r3, [sp, #4]
    dbb4:	0312      	lsls	r2, r2, #12
    dbb6:	0b12      	lsrs	r2, r2, #12
    dbb8:	469c      	mov	ip, r3
    dbba:	4688      	mov	r8, r1
    dbbc:	4c03      	ldr	r4, [pc, #12]	; (dbcc <__aeabi_ddiv+0x664>)
    dbbe:	e5a1      	b.n	d704 <__aeabi_ddiv+0x19c>
    dbc0:	000003ff 	.word	0x000003ff
    dbc4:	feffffff 	.word	0xfeffffff
    dbc8:	000007fe 	.word	0x000007fe
    dbcc:	000007ff 	.word	0x000007ff

0000dbd0 <__eqdf2>:
    dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbd2:	464f      	mov	r7, r9
    dbd4:	4646      	mov	r6, r8
    dbd6:	46d6      	mov	lr, sl
    dbd8:	005c      	lsls	r4, r3, #1
    dbda:	b5c0      	push	{r6, r7, lr}
    dbdc:	031f      	lsls	r7, r3, #12
    dbde:	0fdb      	lsrs	r3, r3, #31
    dbe0:	469a      	mov	sl, r3
    dbe2:	4b17      	ldr	r3, [pc, #92]	; (dc40 <__eqdf2+0x70>)
    dbe4:	030e      	lsls	r6, r1, #12
    dbe6:	004d      	lsls	r5, r1, #1
    dbe8:	4684      	mov	ip, r0
    dbea:	4680      	mov	r8, r0
    dbec:	0b36      	lsrs	r6, r6, #12
    dbee:	0d6d      	lsrs	r5, r5, #21
    dbf0:	0fc9      	lsrs	r1, r1, #31
    dbf2:	4691      	mov	r9, r2
    dbf4:	0b3f      	lsrs	r7, r7, #12
    dbf6:	0d64      	lsrs	r4, r4, #21
    dbf8:	2001      	movs	r0, #1
    dbfa:	429d      	cmp	r5, r3
    dbfc:	d008      	beq.n	dc10 <__eqdf2+0x40>
    dbfe:	429c      	cmp	r4, r3
    dc00:	d001      	beq.n	dc06 <__eqdf2+0x36>
    dc02:	42a5      	cmp	r5, r4
    dc04:	d00b      	beq.n	dc1e <__eqdf2+0x4e>
    dc06:	bc1c      	pop	{r2, r3, r4}
    dc08:	4690      	mov	r8, r2
    dc0a:	4699      	mov	r9, r3
    dc0c:	46a2      	mov	sl, r4
    dc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc10:	4663      	mov	r3, ip
    dc12:	4333      	orrs	r3, r6
    dc14:	d1f7      	bne.n	dc06 <__eqdf2+0x36>
    dc16:	42ac      	cmp	r4, r5
    dc18:	d1f5      	bne.n	dc06 <__eqdf2+0x36>
    dc1a:	433a      	orrs	r2, r7
    dc1c:	d1f3      	bne.n	dc06 <__eqdf2+0x36>
    dc1e:	2001      	movs	r0, #1
    dc20:	42be      	cmp	r6, r7
    dc22:	d1f0      	bne.n	dc06 <__eqdf2+0x36>
    dc24:	45c8      	cmp	r8, r9
    dc26:	d1ee      	bne.n	dc06 <__eqdf2+0x36>
    dc28:	4551      	cmp	r1, sl
    dc2a:	d007      	beq.n	dc3c <__eqdf2+0x6c>
    dc2c:	2d00      	cmp	r5, #0
    dc2e:	d1ea      	bne.n	dc06 <__eqdf2+0x36>
    dc30:	4663      	mov	r3, ip
    dc32:	431e      	orrs	r6, r3
    dc34:	0030      	movs	r0, r6
    dc36:	1e46      	subs	r6, r0, #1
    dc38:	41b0      	sbcs	r0, r6
    dc3a:	e7e4      	b.n	dc06 <__eqdf2+0x36>
    dc3c:	2000      	movs	r0, #0
    dc3e:	e7e2      	b.n	dc06 <__eqdf2+0x36>
    dc40:	000007ff 	.word	0x000007ff

0000dc44 <__gedf2>:
    dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc46:	4645      	mov	r5, r8
    dc48:	46de      	mov	lr, fp
    dc4a:	4657      	mov	r7, sl
    dc4c:	464e      	mov	r6, r9
    dc4e:	b5e0      	push	{r5, r6, r7, lr}
    dc50:	031f      	lsls	r7, r3, #12
    dc52:	0b3d      	lsrs	r5, r7, #12
    dc54:	4f2c      	ldr	r7, [pc, #176]	; (dd08 <__gedf2+0xc4>)
    dc56:	030e      	lsls	r6, r1, #12
    dc58:	004c      	lsls	r4, r1, #1
    dc5a:	46ab      	mov	fp, r5
    dc5c:	005d      	lsls	r5, r3, #1
    dc5e:	4684      	mov	ip, r0
    dc60:	0b36      	lsrs	r6, r6, #12
    dc62:	0d64      	lsrs	r4, r4, #21
    dc64:	0fc9      	lsrs	r1, r1, #31
    dc66:	4690      	mov	r8, r2
    dc68:	0d6d      	lsrs	r5, r5, #21
    dc6a:	0fdb      	lsrs	r3, r3, #31
    dc6c:	42bc      	cmp	r4, r7
    dc6e:	d02a      	beq.n	dcc6 <__gedf2+0x82>
    dc70:	4f25      	ldr	r7, [pc, #148]	; (dd08 <__gedf2+0xc4>)
    dc72:	42bd      	cmp	r5, r7
    dc74:	d02d      	beq.n	dcd2 <__gedf2+0x8e>
    dc76:	2c00      	cmp	r4, #0
    dc78:	d10f      	bne.n	dc9a <__gedf2+0x56>
    dc7a:	4330      	orrs	r0, r6
    dc7c:	0007      	movs	r7, r0
    dc7e:	4681      	mov	r9, r0
    dc80:	4278      	negs	r0, r7
    dc82:	4178      	adcs	r0, r7
    dc84:	b2c0      	uxtb	r0, r0
    dc86:	2d00      	cmp	r5, #0
    dc88:	d117      	bne.n	dcba <__gedf2+0x76>
    dc8a:	465f      	mov	r7, fp
    dc8c:	433a      	orrs	r2, r7
    dc8e:	d114      	bne.n	dcba <__gedf2+0x76>
    dc90:	464b      	mov	r3, r9
    dc92:	2000      	movs	r0, #0
    dc94:	2b00      	cmp	r3, #0
    dc96:	d00a      	beq.n	dcae <__gedf2+0x6a>
    dc98:	e006      	b.n	dca8 <__gedf2+0x64>
    dc9a:	2d00      	cmp	r5, #0
    dc9c:	d102      	bne.n	dca4 <__gedf2+0x60>
    dc9e:	4658      	mov	r0, fp
    dca0:	4302      	orrs	r2, r0
    dca2:	d001      	beq.n	dca8 <__gedf2+0x64>
    dca4:	4299      	cmp	r1, r3
    dca6:	d018      	beq.n	dcda <__gedf2+0x96>
    dca8:	4248      	negs	r0, r1
    dcaa:	2101      	movs	r1, #1
    dcac:	4308      	orrs	r0, r1
    dcae:	bc3c      	pop	{r2, r3, r4, r5}
    dcb0:	4690      	mov	r8, r2
    dcb2:	4699      	mov	r9, r3
    dcb4:	46a2      	mov	sl, r4
    dcb6:	46ab      	mov	fp, r5
    dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcba:	2800      	cmp	r0, #0
    dcbc:	d0f2      	beq.n	dca4 <__gedf2+0x60>
    dcbe:	2001      	movs	r0, #1
    dcc0:	3b01      	subs	r3, #1
    dcc2:	4318      	orrs	r0, r3
    dcc4:	e7f3      	b.n	dcae <__gedf2+0x6a>
    dcc6:	0037      	movs	r7, r6
    dcc8:	4307      	orrs	r7, r0
    dcca:	d0d1      	beq.n	dc70 <__gedf2+0x2c>
    dccc:	2002      	movs	r0, #2
    dcce:	4240      	negs	r0, r0
    dcd0:	e7ed      	b.n	dcae <__gedf2+0x6a>
    dcd2:	465f      	mov	r7, fp
    dcd4:	4317      	orrs	r7, r2
    dcd6:	d0ce      	beq.n	dc76 <__gedf2+0x32>
    dcd8:	e7f8      	b.n	dccc <__gedf2+0x88>
    dcda:	42ac      	cmp	r4, r5
    dcdc:	dce4      	bgt.n	dca8 <__gedf2+0x64>
    dcde:	da03      	bge.n	dce8 <__gedf2+0xa4>
    dce0:	1e48      	subs	r0, r1, #1
    dce2:	2101      	movs	r1, #1
    dce4:	4308      	orrs	r0, r1
    dce6:	e7e2      	b.n	dcae <__gedf2+0x6a>
    dce8:	455e      	cmp	r6, fp
    dcea:	d8dd      	bhi.n	dca8 <__gedf2+0x64>
    dcec:	d006      	beq.n	dcfc <__gedf2+0xb8>
    dcee:	2000      	movs	r0, #0
    dcf0:	455e      	cmp	r6, fp
    dcf2:	d2dc      	bcs.n	dcae <__gedf2+0x6a>
    dcf4:	2301      	movs	r3, #1
    dcf6:	1e48      	subs	r0, r1, #1
    dcf8:	4318      	orrs	r0, r3
    dcfa:	e7d8      	b.n	dcae <__gedf2+0x6a>
    dcfc:	45c4      	cmp	ip, r8
    dcfe:	d8d3      	bhi.n	dca8 <__gedf2+0x64>
    dd00:	2000      	movs	r0, #0
    dd02:	45c4      	cmp	ip, r8
    dd04:	d3f6      	bcc.n	dcf4 <__gedf2+0xb0>
    dd06:	e7d2      	b.n	dcae <__gedf2+0x6a>
    dd08:	000007ff 	.word	0x000007ff

0000dd0c <__ledf2>:
    dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd0e:	464e      	mov	r6, r9
    dd10:	4645      	mov	r5, r8
    dd12:	46de      	mov	lr, fp
    dd14:	4657      	mov	r7, sl
    dd16:	005c      	lsls	r4, r3, #1
    dd18:	b5e0      	push	{r5, r6, r7, lr}
    dd1a:	031f      	lsls	r7, r3, #12
    dd1c:	0fdb      	lsrs	r3, r3, #31
    dd1e:	4699      	mov	r9, r3
    dd20:	4b2a      	ldr	r3, [pc, #168]	; (ddcc <__ledf2+0xc0>)
    dd22:	030e      	lsls	r6, r1, #12
    dd24:	004d      	lsls	r5, r1, #1
    dd26:	0fc9      	lsrs	r1, r1, #31
    dd28:	4684      	mov	ip, r0
    dd2a:	0b36      	lsrs	r6, r6, #12
    dd2c:	0d6d      	lsrs	r5, r5, #21
    dd2e:	468b      	mov	fp, r1
    dd30:	4690      	mov	r8, r2
    dd32:	0b3f      	lsrs	r7, r7, #12
    dd34:	0d64      	lsrs	r4, r4, #21
    dd36:	429d      	cmp	r5, r3
    dd38:	d020      	beq.n	dd7c <__ledf2+0x70>
    dd3a:	4b24      	ldr	r3, [pc, #144]	; (ddcc <__ledf2+0xc0>)
    dd3c:	429c      	cmp	r4, r3
    dd3e:	d022      	beq.n	dd86 <__ledf2+0x7a>
    dd40:	2d00      	cmp	r5, #0
    dd42:	d112      	bne.n	dd6a <__ledf2+0x5e>
    dd44:	4330      	orrs	r0, r6
    dd46:	4243      	negs	r3, r0
    dd48:	4143      	adcs	r3, r0
    dd4a:	b2db      	uxtb	r3, r3
    dd4c:	2c00      	cmp	r4, #0
    dd4e:	d01f      	beq.n	dd90 <__ledf2+0x84>
    dd50:	2b00      	cmp	r3, #0
    dd52:	d00c      	beq.n	dd6e <__ledf2+0x62>
    dd54:	464b      	mov	r3, r9
    dd56:	2001      	movs	r0, #1
    dd58:	3b01      	subs	r3, #1
    dd5a:	4303      	orrs	r3, r0
    dd5c:	0018      	movs	r0, r3
    dd5e:	bc3c      	pop	{r2, r3, r4, r5}
    dd60:	4690      	mov	r8, r2
    dd62:	4699      	mov	r9, r3
    dd64:	46a2      	mov	sl, r4
    dd66:	46ab      	mov	fp, r5
    dd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd6a:	2c00      	cmp	r4, #0
    dd6c:	d016      	beq.n	dd9c <__ledf2+0x90>
    dd6e:	45cb      	cmp	fp, r9
    dd70:	d017      	beq.n	dda2 <__ledf2+0x96>
    dd72:	465b      	mov	r3, fp
    dd74:	4259      	negs	r1, r3
    dd76:	2301      	movs	r3, #1
    dd78:	430b      	orrs	r3, r1
    dd7a:	e7ef      	b.n	dd5c <__ledf2+0x50>
    dd7c:	0031      	movs	r1, r6
    dd7e:	2302      	movs	r3, #2
    dd80:	4301      	orrs	r1, r0
    dd82:	d1eb      	bne.n	dd5c <__ledf2+0x50>
    dd84:	e7d9      	b.n	dd3a <__ledf2+0x2e>
    dd86:	0039      	movs	r1, r7
    dd88:	2302      	movs	r3, #2
    dd8a:	4311      	orrs	r1, r2
    dd8c:	d1e6      	bne.n	dd5c <__ledf2+0x50>
    dd8e:	e7d7      	b.n	dd40 <__ledf2+0x34>
    dd90:	433a      	orrs	r2, r7
    dd92:	d1dd      	bne.n	dd50 <__ledf2+0x44>
    dd94:	2300      	movs	r3, #0
    dd96:	2800      	cmp	r0, #0
    dd98:	d0e0      	beq.n	dd5c <__ledf2+0x50>
    dd9a:	e7ea      	b.n	dd72 <__ledf2+0x66>
    dd9c:	433a      	orrs	r2, r7
    dd9e:	d1e6      	bne.n	dd6e <__ledf2+0x62>
    dda0:	e7e7      	b.n	dd72 <__ledf2+0x66>
    dda2:	42a5      	cmp	r5, r4
    dda4:	dce5      	bgt.n	dd72 <__ledf2+0x66>
    dda6:	db05      	blt.n	ddb4 <__ledf2+0xa8>
    dda8:	42be      	cmp	r6, r7
    ddaa:	d8e2      	bhi.n	dd72 <__ledf2+0x66>
    ddac:	d007      	beq.n	ddbe <__ledf2+0xb2>
    ddae:	2300      	movs	r3, #0
    ddb0:	42be      	cmp	r6, r7
    ddb2:	d2d3      	bcs.n	dd5c <__ledf2+0x50>
    ddb4:	4659      	mov	r1, fp
    ddb6:	2301      	movs	r3, #1
    ddb8:	3901      	subs	r1, #1
    ddba:	430b      	orrs	r3, r1
    ddbc:	e7ce      	b.n	dd5c <__ledf2+0x50>
    ddbe:	45c4      	cmp	ip, r8
    ddc0:	d8d7      	bhi.n	dd72 <__ledf2+0x66>
    ddc2:	2300      	movs	r3, #0
    ddc4:	45c4      	cmp	ip, r8
    ddc6:	d3f5      	bcc.n	ddb4 <__ledf2+0xa8>
    ddc8:	e7c8      	b.n	dd5c <__ledf2+0x50>
    ddca:	46c0      	nop			; (mov r8, r8)
    ddcc:	000007ff 	.word	0x000007ff

0000ddd0 <__aeabi_dmul>:
    ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddd2:	4657      	mov	r7, sl
    ddd4:	4645      	mov	r5, r8
    ddd6:	46de      	mov	lr, fp
    ddd8:	464e      	mov	r6, r9
    ddda:	b5e0      	push	{r5, r6, r7, lr}
    dddc:	030c      	lsls	r4, r1, #12
    ddde:	4698      	mov	r8, r3
    dde0:	004e      	lsls	r6, r1, #1
    dde2:	0b23      	lsrs	r3, r4, #12
    dde4:	b087      	sub	sp, #28
    dde6:	0007      	movs	r7, r0
    dde8:	4692      	mov	sl, r2
    ddea:	469b      	mov	fp, r3
    ddec:	0d76      	lsrs	r6, r6, #21
    ddee:	0fcd      	lsrs	r5, r1, #31
    ddf0:	2e00      	cmp	r6, #0
    ddf2:	d06b      	beq.n	decc <__aeabi_dmul+0xfc>
    ddf4:	4b6d      	ldr	r3, [pc, #436]	; (dfac <__aeabi_dmul+0x1dc>)
    ddf6:	429e      	cmp	r6, r3
    ddf8:	d035      	beq.n	de66 <__aeabi_dmul+0x96>
    ddfa:	2480      	movs	r4, #128	; 0x80
    ddfc:	465b      	mov	r3, fp
    ddfe:	0f42      	lsrs	r2, r0, #29
    de00:	0424      	lsls	r4, r4, #16
    de02:	00db      	lsls	r3, r3, #3
    de04:	4314      	orrs	r4, r2
    de06:	431c      	orrs	r4, r3
    de08:	00c3      	lsls	r3, r0, #3
    de0a:	4699      	mov	r9, r3
    de0c:	4b68      	ldr	r3, [pc, #416]	; (dfb0 <__aeabi_dmul+0x1e0>)
    de0e:	46a3      	mov	fp, r4
    de10:	469c      	mov	ip, r3
    de12:	2300      	movs	r3, #0
    de14:	2700      	movs	r7, #0
    de16:	4466      	add	r6, ip
    de18:	9302      	str	r3, [sp, #8]
    de1a:	4643      	mov	r3, r8
    de1c:	031c      	lsls	r4, r3, #12
    de1e:	005a      	lsls	r2, r3, #1
    de20:	0fdb      	lsrs	r3, r3, #31
    de22:	4650      	mov	r0, sl
    de24:	0b24      	lsrs	r4, r4, #12
    de26:	0d52      	lsrs	r2, r2, #21
    de28:	4698      	mov	r8, r3
    de2a:	d100      	bne.n	de2e <__aeabi_dmul+0x5e>
    de2c:	e076      	b.n	df1c <__aeabi_dmul+0x14c>
    de2e:	4b5f      	ldr	r3, [pc, #380]	; (dfac <__aeabi_dmul+0x1dc>)
    de30:	429a      	cmp	r2, r3
    de32:	d06d      	beq.n	df10 <__aeabi_dmul+0x140>
    de34:	2380      	movs	r3, #128	; 0x80
    de36:	0f41      	lsrs	r1, r0, #29
    de38:	041b      	lsls	r3, r3, #16
    de3a:	430b      	orrs	r3, r1
    de3c:	495c      	ldr	r1, [pc, #368]	; (dfb0 <__aeabi_dmul+0x1e0>)
    de3e:	00e4      	lsls	r4, r4, #3
    de40:	468c      	mov	ip, r1
    de42:	431c      	orrs	r4, r3
    de44:	00c3      	lsls	r3, r0, #3
    de46:	2000      	movs	r0, #0
    de48:	4462      	add	r2, ip
    de4a:	4641      	mov	r1, r8
    de4c:	18b6      	adds	r6, r6, r2
    de4e:	4069      	eors	r1, r5
    de50:	1c72      	adds	r2, r6, #1
    de52:	9101      	str	r1, [sp, #4]
    de54:	4694      	mov	ip, r2
    de56:	4307      	orrs	r7, r0
    de58:	2f0f      	cmp	r7, #15
    de5a:	d900      	bls.n	de5e <__aeabi_dmul+0x8e>
    de5c:	e0b0      	b.n	dfc0 <__aeabi_dmul+0x1f0>
    de5e:	4a55      	ldr	r2, [pc, #340]	; (dfb4 <__aeabi_dmul+0x1e4>)
    de60:	00bf      	lsls	r7, r7, #2
    de62:	59d2      	ldr	r2, [r2, r7]
    de64:	4697      	mov	pc, r2
    de66:	465b      	mov	r3, fp
    de68:	4303      	orrs	r3, r0
    de6a:	4699      	mov	r9, r3
    de6c:	d000      	beq.n	de70 <__aeabi_dmul+0xa0>
    de6e:	e087      	b.n	df80 <__aeabi_dmul+0x1b0>
    de70:	2300      	movs	r3, #0
    de72:	469b      	mov	fp, r3
    de74:	3302      	adds	r3, #2
    de76:	2708      	movs	r7, #8
    de78:	9302      	str	r3, [sp, #8]
    de7a:	e7ce      	b.n	de1a <__aeabi_dmul+0x4a>
    de7c:	4642      	mov	r2, r8
    de7e:	9201      	str	r2, [sp, #4]
    de80:	2802      	cmp	r0, #2
    de82:	d067      	beq.n	df54 <__aeabi_dmul+0x184>
    de84:	2803      	cmp	r0, #3
    de86:	d100      	bne.n	de8a <__aeabi_dmul+0xba>
    de88:	e20e      	b.n	e2a8 <__aeabi_dmul+0x4d8>
    de8a:	2801      	cmp	r0, #1
    de8c:	d000      	beq.n	de90 <__aeabi_dmul+0xc0>
    de8e:	e162      	b.n	e156 <__aeabi_dmul+0x386>
    de90:	2300      	movs	r3, #0
    de92:	2400      	movs	r4, #0
    de94:	2200      	movs	r2, #0
    de96:	4699      	mov	r9, r3
    de98:	9901      	ldr	r1, [sp, #4]
    de9a:	4001      	ands	r1, r0
    de9c:	b2cd      	uxtb	r5, r1
    de9e:	2100      	movs	r1, #0
    dea0:	0312      	lsls	r2, r2, #12
    dea2:	0d0b      	lsrs	r3, r1, #20
    dea4:	0b12      	lsrs	r2, r2, #12
    dea6:	051b      	lsls	r3, r3, #20
    dea8:	4313      	orrs	r3, r2
    deaa:	4a43      	ldr	r2, [pc, #268]	; (dfb8 <__aeabi_dmul+0x1e8>)
    deac:	0524      	lsls	r4, r4, #20
    deae:	4013      	ands	r3, r2
    deb0:	431c      	orrs	r4, r3
    deb2:	0064      	lsls	r4, r4, #1
    deb4:	07ed      	lsls	r5, r5, #31
    deb6:	0864      	lsrs	r4, r4, #1
    deb8:	432c      	orrs	r4, r5
    deba:	4648      	mov	r0, r9
    debc:	0021      	movs	r1, r4
    debe:	b007      	add	sp, #28
    dec0:	bc3c      	pop	{r2, r3, r4, r5}
    dec2:	4690      	mov	r8, r2
    dec4:	4699      	mov	r9, r3
    dec6:	46a2      	mov	sl, r4
    dec8:	46ab      	mov	fp, r5
    deca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    decc:	4303      	orrs	r3, r0
    dece:	4699      	mov	r9, r3
    ded0:	d04f      	beq.n	df72 <__aeabi_dmul+0x1a2>
    ded2:	465b      	mov	r3, fp
    ded4:	2b00      	cmp	r3, #0
    ded6:	d100      	bne.n	deda <__aeabi_dmul+0x10a>
    ded8:	e189      	b.n	e1ee <__aeabi_dmul+0x41e>
    deda:	4658      	mov	r0, fp
    dedc:	f000 fe0e 	bl	eafc <__clzsi2>
    dee0:	0003      	movs	r3, r0
    dee2:	3b0b      	subs	r3, #11
    dee4:	2b1c      	cmp	r3, #28
    dee6:	dd00      	ble.n	deea <__aeabi_dmul+0x11a>
    dee8:	e17a      	b.n	e1e0 <__aeabi_dmul+0x410>
    deea:	221d      	movs	r2, #29
    deec:	1ad3      	subs	r3, r2, r3
    deee:	003a      	movs	r2, r7
    def0:	0001      	movs	r1, r0
    def2:	465c      	mov	r4, fp
    def4:	40da      	lsrs	r2, r3
    def6:	3908      	subs	r1, #8
    def8:	408c      	lsls	r4, r1
    defa:	0013      	movs	r3, r2
    defc:	408f      	lsls	r7, r1
    defe:	4323      	orrs	r3, r4
    df00:	469b      	mov	fp, r3
    df02:	46b9      	mov	r9, r7
    df04:	2300      	movs	r3, #0
    df06:	4e2d      	ldr	r6, [pc, #180]	; (dfbc <__aeabi_dmul+0x1ec>)
    df08:	2700      	movs	r7, #0
    df0a:	1a36      	subs	r6, r6, r0
    df0c:	9302      	str	r3, [sp, #8]
    df0e:	e784      	b.n	de1a <__aeabi_dmul+0x4a>
    df10:	4653      	mov	r3, sl
    df12:	4323      	orrs	r3, r4
    df14:	d12a      	bne.n	df6c <__aeabi_dmul+0x19c>
    df16:	2400      	movs	r4, #0
    df18:	2002      	movs	r0, #2
    df1a:	e796      	b.n	de4a <__aeabi_dmul+0x7a>
    df1c:	4653      	mov	r3, sl
    df1e:	4323      	orrs	r3, r4
    df20:	d020      	beq.n	df64 <__aeabi_dmul+0x194>
    df22:	2c00      	cmp	r4, #0
    df24:	d100      	bne.n	df28 <__aeabi_dmul+0x158>
    df26:	e157      	b.n	e1d8 <__aeabi_dmul+0x408>
    df28:	0020      	movs	r0, r4
    df2a:	f000 fde7 	bl	eafc <__clzsi2>
    df2e:	0003      	movs	r3, r0
    df30:	3b0b      	subs	r3, #11
    df32:	2b1c      	cmp	r3, #28
    df34:	dd00      	ble.n	df38 <__aeabi_dmul+0x168>
    df36:	e149      	b.n	e1cc <__aeabi_dmul+0x3fc>
    df38:	211d      	movs	r1, #29
    df3a:	1acb      	subs	r3, r1, r3
    df3c:	4651      	mov	r1, sl
    df3e:	0002      	movs	r2, r0
    df40:	40d9      	lsrs	r1, r3
    df42:	4653      	mov	r3, sl
    df44:	3a08      	subs	r2, #8
    df46:	4094      	lsls	r4, r2
    df48:	4093      	lsls	r3, r2
    df4a:	430c      	orrs	r4, r1
    df4c:	4a1b      	ldr	r2, [pc, #108]	; (dfbc <__aeabi_dmul+0x1ec>)
    df4e:	1a12      	subs	r2, r2, r0
    df50:	2000      	movs	r0, #0
    df52:	e77a      	b.n	de4a <__aeabi_dmul+0x7a>
    df54:	2501      	movs	r5, #1
    df56:	9b01      	ldr	r3, [sp, #4]
    df58:	4c14      	ldr	r4, [pc, #80]	; (dfac <__aeabi_dmul+0x1dc>)
    df5a:	401d      	ands	r5, r3
    df5c:	2300      	movs	r3, #0
    df5e:	2200      	movs	r2, #0
    df60:	4699      	mov	r9, r3
    df62:	e79c      	b.n	de9e <__aeabi_dmul+0xce>
    df64:	2400      	movs	r4, #0
    df66:	2200      	movs	r2, #0
    df68:	2001      	movs	r0, #1
    df6a:	e76e      	b.n	de4a <__aeabi_dmul+0x7a>
    df6c:	4653      	mov	r3, sl
    df6e:	2003      	movs	r0, #3
    df70:	e76b      	b.n	de4a <__aeabi_dmul+0x7a>
    df72:	2300      	movs	r3, #0
    df74:	469b      	mov	fp, r3
    df76:	3301      	adds	r3, #1
    df78:	2704      	movs	r7, #4
    df7a:	2600      	movs	r6, #0
    df7c:	9302      	str	r3, [sp, #8]
    df7e:	e74c      	b.n	de1a <__aeabi_dmul+0x4a>
    df80:	2303      	movs	r3, #3
    df82:	4681      	mov	r9, r0
    df84:	270c      	movs	r7, #12
    df86:	9302      	str	r3, [sp, #8]
    df88:	e747      	b.n	de1a <__aeabi_dmul+0x4a>
    df8a:	2280      	movs	r2, #128	; 0x80
    df8c:	2300      	movs	r3, #0
    df8e:	2500      	movs	r5, #0
    df90:	0312      	lsls	r2, r2, #12
    df92:	4699      	mov	r9, r3
    df94:	4c05      	ldr	r4, [pc, #20]	; (dfac <__aeabi_dmul+0x1dc>)
    df96:	e782      	b.n	de9e <__aeabi_dmul+0xce>
    df98:	465c      	mov	r4, fp
    df9a:	464b      	mov	r3, r9
    df9c:	9802      	ldr	r0, [sp, #8]
    df9e:	e76f      	b.n	de80 <__aeabi_dmul+0xb0>
    dfa0:	465c      	mov	r4, fp
    dfa2:	464b      	mov	r3, r9
    dfa4:	9501      	str	r5, [sp, #4]
    dfa6:	9802      	ldr	r0, [sp, #8]
    dfa8:	e76a      	b.n	de80 <__aeabi_dmul+0xb0>
    dfaa:	46c0      	nop			; (mov r8, r8)
    dfac:	000007ff 	.word	0x000007ff
    dfb0:	fffffc01 	.word	0xfffffc01
    dfb4:	000149bc 	.word	0x000149bc
    dfb8:	800fffff 	.word	0x800fffff
    dfbc:	fffffc0d 	.word	0xfffffc0d
    dfc0:	464a      	mov	r2, r9
    dfc2:	4649      	mov	r1, r9
    dfc4:	0c17      	lsrs	r7, r2, #16
    dfc6:	0c1a      	lsrs	r2, r3, #16
    dfc8:	041b      	lsls	r3, r3, #16
    dfca:	0c1b      	lsrs	r3, r3, #16
    dfcc:	0408      	lsls	r0, r1, #16
    dfce:	0019      	movs	r1, r3
    dfd0:	0c00      	lsrs	r0, r0, #16
    dfd2:	4341      	muls	r1, r0
    dfd4:	0015      	movs	r5, r2
    dfd6:	4688      	mov	r8, r1
    dfd8:	0019      	movs	r1, r3
    dfda:	437d      	muls	r5, r7
    dfdc:	4379      	muls	r1, r7
    dfde:	9503      	str	r5, [sp, #12]
    dfe0:	4689      	mov	r9, r1
    dfe2:	0029      	movs	r1, r5
    dfe4:	0015      	movs	r5, r2
    dfe6:	4345      	muls	r5, r0
    dfe8:	444d      	add	r5, r9
    dfea:	9502      	str	r5, [sp, #8]
    dfec:	4645      	mov	r5, r8
    dfee:	0c2d      	lsrs	r5, r5, #16
    dff0:	46aa      	mov	sl, r5
    dff2:	9d02      	ldr	r5, [sp, #8]
    dff4:	4455      	add	r5, sl
    dff6:	45a9      	cmp	r9, r5
    dff8:	d906      	bls.n	e008 <__aeabi_dmul+0x238>
    dffa:	468a      	mov	sl, r1
    dffc:	2180      	movs	r1, #128	; 0x80
    dffe:	0249      	lsls	r1, r1, #9
    e000:	4689      	mov	r9, r1
    e002:	44ca      	add	sl, r9
    e004:	4651      	mov	r1, sl
    e006:	9103      	str	r1, [sp, #12]
    e008:	0c29      	lsrs	r1, r5, #16
    e00a:	9104      	str	r1, [sp, #16]
    e00c:	4641      	mov	r1, r8
    e00e:	0409      	lsls	r1, r1, #16
    e010:	042d      	lsls	r5, r5, #16
    e012:	0c09      	lsrs	r1, r1, #16
    e014:	4688      	mov	r8, r1
    e016:	0029      	movs	r1, r5
    e018:	0c25      	lsrs	r5, r4, #16
    e01a:	0424      	lsls	r4, r4, #16
    e01c:	4441      	add	r1, r8
    e01e:	0c24      	lsrs	r4, r4, #16
    e020:	9105      	str	r1, [sp, #20]
    e022:	0021      	movs	r1, r4
    e024:	4341      	muls	r1, r0
    e026:	4688      	mov	r8, r1
    e028:	0021      	movs	r1, r4
    e02a:	4379      	muls	r1, r7
    e02c:	468a      	mov	sl, r1
    e02e:	4368      	muls	r0, r5
    e030:	4641      	mov	r1, r8
    e032:	4450      	add	r0, sl
    e034:	4681      	mov	r9, r0
    e036:	0c08      	lsrs	r0, r1, #16
    e038:	4448      	add	r0, r9
    e03a:	436f      	muls	r7, r5
    e03c:	4582      	cmp	sl, r0
    e03e:	d903      	bls.n	e048 <__aeabi_dmul+0x278>
    e040:	2180      	movs	r1, #128	; 0x80
    e042:	0249      	lsls	r1, r1, #9
    e044:	4689      	mov	r9, r1
    e046:	444f      	add	r7, r9
    e048:	0c01      	lsrs	r1, r0, #16
    e04a:	4689      	mov	r9, r1
    e04c:	0039      	movs	r1, r7
    e04e:	4449      	add	r1, r9
    e050:	9102      	str	r1, [sp, #8]
    e052:	4641      	mov	r1, r8
    e054:	040f      	lsls	r7, r1, #16
    e056:	9904      	ldr	r1, [sp, #16]
    e058:	0c3f      	lsrs	r7, r7, #16
    e05a:	4688      	mov	r8, r1
    e05c:	0400      	lsls	r0, r0, #16
    e05e:	19c0      	adds	r0, r0, r7
    e060:	4480      	add	r8, r0
    e062:	4641      	mov	r1, r8
    e064:	9104      	str	r1, [sp, #16]
    e066:	4659      	mov	r1, fp
    e068:	0c0f      	lsrs	r7, r1, #16
    e06a:	0409      	lsls	r1, r1, #16
    e06c:	0c09      	lsrs	r1, r1, #16
    e06e:	4688      	mov	r8, r1
    e070:	4359      	muls	r1, r3
    e072:	468a      	mov	sl, r1
    e074:	0039      	movs	r1, r7
    e076:	4351      	muls	r1, r2
    e078:	4689      	mov	r9, r1
    e07a:	4641      	mov	r1, r8
    e07c:	434a      	muls	r2, r1
    e07e:	4651      	mov	r1, sl
    e080:	0c09      	lsrs	r1, r1, #16
    e082:	468b      	mov	fp, r1
    e084:	437b      	muls	r3, r7
    e086:	18d2      	adds	r2, r2, r3
    e088:	445a      	add	r2, fp
    e08a:	4293      	cmp	r3, r2
    e08c:	d903      	bls.n	e096 <__aeabi_dmul+0x2c6>
    e08e:	2380      	movs	r3, #128	; 0x80
    e090:	025b      	lsls	r3, r3, #9
    e092:	469b      	mov	fp, r3
    e094:	44d9      	add	r9, fp
    e096:	4651      	mov	r1, sl
    e098:	0409      	lsls	r1, r1, #16
    e09a:	0c09      	lsrs	r1, r1, #16
    e09c:	468a      	mov	sl, r1
    e09e:	4641      	mov	r1, r8
    e0a0:	4361      	muls	r1, r4
    e0a2:	437c      	muls	r4, r7
    e0a4:	0c13      	lsrs	r3, r2, #16
    e0a6:	0412      	lsls	r2, r2, #16
    e0a8:	444b      	add	r3, r9
    e0aa:	4452      	add	r2, sl
    e0ac:	46a1      	mov	r9, r4
    e0ae:	468a      	mov	sl, r1
    e0b0:	003c      	movs	r4, r7
    e0b2:	4641      	mov	r1, r8
    e0b4:	436c      	muls	r4, r5
    e0b6:	434d      	muls	r5, r1
    e0b8:	4651      	mov	r1, sl
    e0ba:	444d      	add	r5, r9
    e0bc:	0c0f      	lsrs	r7, r1, #16
    e0be:	197d      	adds	r5, r7, r5
    e0c0:	45a9      	cmp	r9, r5
    e0c2:	d903      	bls.n	e0cc <__aeabi_dmul+0x2fc>
    e0c4:	2180      	movs	r1, #128	; 0x80
    e0c6:	0249      	lsls	r1, r1, #9
    e0c8:	4688      	mov	r8, r1
    e0ca:	4444      	add	r4, r8
    e0cc:	9f04      	ldr	r7, [sp, #16]
    e0ce:	9903      	ldr	r1, [sp, #12]
    e0d0:	46b8      	mov	r8, r7
    e0d2:	4441      	add	r1, r8
    e0d4:	468b      	mov	fp, r1
    e0d6:	4583      	cmp	fp, r0
    e0d8:	4180      	sbcs	r0, r0
    e0da:	4241      	negs	r1, r0
    e0dc:	4688      	mov	r8, r1
    e0de:	4651      	mov	r1, sl
    e0e0:	0408      	lsls	r0, r1, #16
    e0e2:	042f      	lsls	r7, r5, #16
    e0e4:	0c00      	lsrs	r0, r0, #16
    e0e6:	183f      	adds	r7, r7, r0
    e0e8:	4658      	mov	r0, fp
    e0ea:	9902      	ldr	r1, [sp, #8]
    e0ec:	1810      	adds	r0, r2, r0
    e0ee:	4689      	mov	r9, r1
    e0f0:	4290      	cmp	r0, r2
    e0f2:	4192      	sbcs	r2, r2
    e0f4:	444f      	add	r7, r9
    e0f6:	46ba      	mov	sl, r7
    e0f8:	4252      	negs	r2, r2
    e0fa:	4699      	mov	r9, r3
    e0fc:	4693      	mov	fp, r2
    e0fe:	44c2      	add	sl, r8
    e100:	44d1      	add	r9, sl
    e102:	44cb      	add	fp, r9
    e104:	428f      	cmp	r7, r1
    e106:	41bf      	sbcs	r7, r7
    e108:	45c2      	cmp	sl, r8
    e10a:	4189      	sbcs	r1, r1
    e10c:	4599      	cmp	r9, r3
    e10e:	419b      	sbcs	r3, r3
    e110:	4593      	cmp	fp, r2
    e112:	4192      	sbcs	r2, r2
    e114:	427f      	negs	r7, r7
    e116:	4249      	negs	r1, r1
    e118:	0c2d      	lsrs	r5, r5, #16
    e11a:	4252      	negs	r2, r2
    e11c:	430f      	orrs	r7, r1
    e11e:	425b      	negs	r3, r3
    e120:	4313      	orrs	r3, r2
    e122:	197f      	adds	r7, r7, r5
    e124:	18ff      	adds	r7, r7, r3
    e126:	465b      	mov	r3, fp
    e128:	193c      	adds	r4, r7, r4
    e12a:	0ddb      	lsrs	r3, r3, #23
    e12c:	9a05      	ldr	r2, [sp, #20]
    e12e:	0264      	lsls	r4, r4, #9
    e130:	431c      	orrs	r4, r3
    e132:	0243      	lsls	r3, r0, #9
    e134:	4313      	orrs	r3, r2
    e136:	1e5d      	subs	r5, r3, #1
    e138:	41ab      	sbcs	r3, r5
    e13a:	465a      	mov	r2, fp
    e13c:	0dc0      	lsrs	r0, r0, #23
    e13e:	4303      	orrs	r3, r0
    e140:	0252      	lsls	r2, r2, #9
    e142:	4313      	orrs	r3, r2
    e144:	01e2      	lsls	r2, r4, #7
    e146:	d556      	bpl.n	e1f6 <__aeabi_dmul+0x426>
    e148:	2001      	movs	r0, #1
    e14a:	085a      	lsrs	r2, r3, #1
    e14c:	4003      	ands	r3, r0
    e14e:	4313      	orrs	r3, r2
    e150:	07e2      	lsls	r2, r4, #31
    e152:	4313      	orrs	r3, r2
    e154:	0864      	lsrs	r4, r4, #1
    e156:	485a      	ldr	r0, [pc, #360]	; (e2c0 <__aeabi_dmul+0x4f0>)
    e158:	4460      	add	r0, ip
    e15a:	2800      	cmp	r0, #0
    e15c:	dd4d      	ble.n	e1fa <__aeabi_dmul+0x42a>
    e15e:	075a      	lsls	r2, r3, #29
    e160:	d009      	beq.n	e176 <__aeabi_dmul+0x3a6>
    e162:	220f      	movs	r2, #15
    e164:	401a      	ands	r2, r3
    e166:	2a04      	cmp	r2, #4
    e168:	d005      	beq.n	e176 <__aeabi_dmul+0x3a6>
    e16a:	1d1a      	adds	r2, r3, #4
    e16c:	429a      	cmp	r2, r3
    e16e:	419b      	sbcs	r3, r3
    e170:	425b      	negs	r3, r3
    e172:	18e4      	adds	r4, r4, r3
    e174:	0013      	movs	r3, r2
    e176:	01e2      	lsls	r2, r4, #7
    e178:	d504      	bpl.n	e184 <__aeabi_dmul+0x3b4>
    e17a:	2080      	movs	r0, #128	; 0x80
    e17c:	4a51      	ldr	r2, [pc, #324]	; (e2c4 <__aeabi_dmul+0x4f4>)
    e17e:	00c0      	lsls	r0, r0, #3
    e180:	4014      	ands	r4, r2
    e182:	4460      	add	r0, ip
    e184:	4a50      	ldr	r2, [pc, #320]	; (e2c8 <__aeabi_dmul+0x4f8>)
    e186:	4290      	cmp	r0, r2
    e188:	dd00      	ble.n	e18c <__aeabi_dmul+0x3bc>
    e18a:	e6e3      	b.n	df54 <__aeabi_dmul+0x184>
    e18c:	2501      	movs	r5, #1
    e18e:	08db      	lsrs	r3, r3, #3
    e190:	0762      	lsls	r2, r4, #29
    e192:	431a      	orrs	r2, r3
    e194:	0264      	lsls	r4, r4, #9
    e196:	9b01      	ldr	r3, [sp, #4]
    e198:	4691      	mov	r9, r2
    e19a:	0b22      	lsrs	r2, r4, #12
    e19c:	0544      	lsls	r4, r0, #21
    e19e:	0d64      	lsrs	r4, r4, #21
    e1a0:	401d      	ands	r5, r3
    e1a2:	e67c      	b.n	de9e <__aeabi_dmul+0xce>
    e1a4:	2280      	movs	r2, #128	; 0x80
    e1a6:	4659      	mov	r1, fp
    e1a8:	0312      	lsls	r2, r2, #12
    e1aa:	4211      	tst	r1, r2
    e1ac:	d008      	beq.n	e1c0 <__aeabi_dmul+0x3f0>
    e1ae:	4214      	tst	r4, r2
    e1b0:	d106      	bne.n	e1c0 <__aeabi_dmul+0x3f0>
    e1b2:	4322      	orrs	r2, r4
    e1b4:	0312      	lsls	r2, r2, #12
    e1b6:	0b12      	lsrs	r2, r2, #12
    e1b8:	4645      	mov	r5, r8
    e1ba:	4699      	mov	r9, r3
    e1bc:	4c43      	ldr	r4, [pc, #268]	; (e2cc <__aeabi_dmul+0x4fc>)
    e1be:	e66e      	b.n	de9e <__aeabi_dmul+0xce>
    e1c0:	465b      	mov	r3, fp
    e1c2:	431a      	orrs	r2, r3
    e1c4:	0312      	lsls	r2, r2, #12
    e1c6:	0b12      	lsrs	r2, r2, #12
    e1c8:	4c40      	ldr	r4, [pc, #256]	; (e2cc <__aeabi_dmul+0x4fc>)
    e1ca:	e668      	b.n	de9e <__aeabi_dmul+0xce>
    e1cc:	0003      	movs	r3, r0
    e1ce:	4654      	mov	r4, sl
    e1d0:	3b28      	subs	r3, #40	; 0x28
    e1d2:	409c      	lsls	r4, r3
    e1d4:	2300      	movs	r3, #0
    e1d6:	e6b9      	b.n	df4c <__aeabi_dmul+0x17c>
    e1d8:	f000 fc90 	bl	eafc <__clzsi2>
    e1dc:	3020      	adds	r0, #32
    e1de:	e6a6      	b.n	df2e <__aeabi_dmul+0x15e>
    e1e0:	0003      	movs	r3, r0
    e1e2:	3b28      	subs	r3, #40	; 0x28
    e1e4:	409f      	lsls	r7, r3
    e1e6:	2300      	movs	r3, #0
    e1e8:	46bb      	mov	fp, r7
    e1ea:	4699      	mov	r9, r3
    e1ec:	e68a      	b.n	df04 <__aeabi_dmul+0x134>
    e1ee:	f000 fc85 	bl	eafc <__clzsi2>
    e1f2:	3020      	adds	r0, #32
    e1f4:	e674      	b.n	dee0 <__aeabi_dmul+0x110>
    e1f6:	46b4      	mov	ip, r6
    e1f8:	e7ad      	b.n	e156 <__aeabi_dmul+0x386>
    e1fa:	2501      	movs	r5, #1
    e1fc:	1a2a      	subs	r2, r5, r0
    e1fe:	2a38      	cmp	r2, #56	; 0x38
    e200:	dd06      	ble.n	e210 <__aeabi_dmul+0x440>
    e202:	9b01      	ldr	r3, [sp, #4]
    e204:	2400      	movs	r4, #0
    e206:	401d      	ands	r5, r3
    e208:	2300      	movs	r3, #0
    e20a:	2200      	movs	r2, #0
    e20c:	4699      	mov	r9, r3
    e20e:	e646      	b.n	de9e <__aeabi_dmul+0xce>
    e210:	2a1f      	cmp	r2, #31
    e212:	dc21      	bgt.n	e258 <__aeabi_dmul+0x488>
    e214:	2520      	movs	r5, #32
    e216:	0020      	movs	r0, r4
    e218:	1aad      	subs	r5, r5, r2
    e21a:	001e      	movs	r6, r3
    e21c:	40ab      	lsls	r3, r5
    e21e:	40a8      	lsls	r0, r5
    e220:	40d6      	lsrs	r6, r2
    e222:	1e5d      	subs	r5, r3, #1
    e224:	41ab      	sbcs	r3, r5
    e226:	4330      	orrs	r0, r6
    e228:	4318      	orrs	r0, r3
    e22a:	40d4      	lsrs	r4, r2
    e22c:	0743      	lsls	r3, r0, #29
    e22e:	d009      	beq.n	e244 <__aeabi_dmul+0x474>
    e230:	230f      	movs	r3, #15
    e232:	4003      	ands	r3, r0
    e234:	2b04      	cmp	r3, #4
    e236:	d005      	beq.n	e244 <__aeabi_dmul+0x474>
    e238:	0003      	movs	r3, r0
    e23a:	1d18      	adds	r0, r3, #4
    e23c:	4298      	cmp	r0, r3
    e23e:	419b      	sbcs	r3, r3
    e240:	425b      	negs	r3, r3
    e242:	18e4      	adds	r4, r4, r3
    e244:	0223      	lsls	r3, r4, #8
    e246:	d521      	bpl.n	e28c <__aeabi_dmul+0x4bc>
    e248:	2501      	movs	r5, #1
    e24a:	9b01      	ldr	r3, [sp, #4]
    e24c:	2401      	movs	r4, #1
    e24e:	401d      	ands	r5, r3
    e250:	2300      	movs	r3, #0
    e252:	2200      	movs	r2, #0
    e254:	4699      	mov	r9, r3
    e256:	e622      	b.n	de9e <__aeabi_dmul+0xce>
    e258:	251f      	movs	r5, #31
    e25a:	0021      	movs	r1, r4
    e25c:	426d      	negs	r5, r5
    e25e:	1a28      	subs	r0, r5, r0
    e260:	40c1      	lsrs	r1, r0
    e262:	0008      	movs	r0, r1
    e264:	2a20      	cmp	r2, #32
    e266:	d01d      	beq.n	e2a4 <__aeabi_dmul+0x4d4>
    e268:	355f      	adds	r5, #95	; 0x5f
    e26a:	1aaa      	subs	r2, r5, r2
    e26c:	4094      	lsls	r4, r2
    e26e:	4323      	orrs	r3, r4
    e270:	1e5c      	subs	r4, r3, #1
    e272:	41a3      	sbcs	r3, r4
    e274:	2507      	movs	r5, #7
    e276:	4303      	orrs	r3, r0
    e278:	401d      	ands	r5, r3
    e27a:	2200      	movs	r2, #0
    e27c:	2d00      	cmp	r5, #0
    e27e:	d009      	beq.n	e294 <__aeabi_dmul+0x4c4>
    e280:	220f      	movs	r2, #15
    e282:	2400      	movs	r4, #0
    e284:	401a      	ands	r2, r3
    e286:	0018      	movs	r0, r3
    e288:	2a04      	cmp	r2, #4
    e28a:	d1d6      	bne.n	e23a <__aeabi_dmul+0x46a>
    e28c:	0003      	movs	r3, r0
    e28e:	0765      	lsls	r5, r4, #29
    e290:	0264      	lsls	r4, r4, #9
    e292:	0b22      	lsrs	r2, r4, #12
    e294:	08db      	lsrs	r3, r3, #3
    e296:	432b      	orrs	r3, r5
    e298:	2501      	movs	r5, #1
    e29a:	4699      	mov	r9, r3
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	2400      	movs	r4, #0
    e2a0:	401d      	ands	r5, r3
    e2a2:	e5fc      	b.n	de9e <__aeabi_dmul+0xce>
    e2a4:	2400      	movs	r4, #0
    e2a6:	e7e2      	b.n	e26e <__aeabi_dmul+0x49e>
    e2a8:	2280      	movs	r2, #128	; 0x80
    e2aa:	2501      	movs	r5, #1
    e2ac:	0312      	lsls	r2, r2, #12
    e2ae:	4322      	orrs	r2, r4
    e2b0:	9901      	ldr	r1, [sp, #4]
    e2b2:	0312      	lsls	r2, r2, #12
    e2b4:	0b12      	lsrs	r2, r2, #12
    e2b6:	400d      	ands	r5, r1
    e2b8:	4699      	mov	r9, r3
    e2ba:	4c04      	ldr	r4, [pc, #16]	; (e2cc <__aeabi_dmul+0x4fc>)
    e2bc:	e5ef      	b.n	de9e <__aeabi_dmul+0xce>
    e2be:	46c0      	nop			; (mov r8, r8)
    e2c0:	000003ff 	.word	0x000003ff
    e2c4:	feffffff 	.word	0xfeffffff
    e2c8:	000007fe 	.word	0x000007fe
    e2cc:	000007ff 	.word	0x000007ff

0000e2d0 <__aeabi_dsub>:
    e2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2d2:	4646      	mov	r6, r8
    e2d4:	46d6      	mov	lr, sl
    e2d6:	464f      	mov	r7, r9
    e2d8:	030c      	lsls	r4, r1, #12
    e2da:	b5c0      	push	{r6, r7, lr}
    e2dc:	0fcd      	lsrs	r5, r1, #31
    e2de:	004e      	lsls	r6, r1, #1
    e2e0:	0a61      	lsrs	r1, r4, #9
    e2e2:	0f44      	lsrs	r4, r0, #29
    e2e4:	430c      	orrs	r4, r1
    e2e6:	00c1      	lsls	r1, r0, #3
    e2e8:	0058      	lsls	r0, r3, #1
    e2ea:	0d40      	lsrs	r0, r0, #21
    e2ec:	4684      	mov	ip, r0
    e2ee:	468a      	mov	sl, r1
    e2f0:	000f      	movs	r7, r1
    e2f2:	0319      	lsls	r1, r3, #12
    e2f4:	0f50      	lsrs	r0, r2, #29
    e2f6:	0a49      	lsrs	r1, r1, #9
    e2f8:	4301      	orrs	r1, r0
    e2fa:	48c6      	ldr	r0, [pc, #792]	; (e614 <__aeabi_dsub+0x344>)
    e2fc:	0d76      	lsrs	r6, r6, #21
    e2fe:	46a8      	mov	r8, r5
    e300:	0fdb      	lsrs	r3, r3, #31
    e302:	00d2      	lsls	r2, r2, #3
    e304:	4584      	cmp	ip, r0
    e306:	d100      	bne.n	e30a <__aeabi_dsub+0x3a>
    e308:	e0d8      	b.n	e4bc <__aeabi_dsub+0x1ec>
    e30a:	2001      	movs	r0, #1
    e30c:	4043      	eors	r3, r0
    e30e:	42ab      	cmp	r3, r5
    e310:	d100      	bne.n	e314 <__aeabi_dsub+0x44>
    e312:	e0a6      	b.n	e462 <__aeabi_dsub+0x192>
    e314:	4660      	mov	r0, ip
    e316:	1a35      	subs	r5, r6, r0
    e318:	2d00      	cmp	r5, #0
    e31a:	dc00      	bgt.n	e31e <__aeabi_dsub+0x4e>
    e31c:	e105      	b.n	e52a <__aeabi_dsub+0x25a>
    e31e:	2800      	cmp	r0, #0
    e320:	d110      	bne.n	e344 <__aeabi_dsub+0x74>
    e322:	000b      	movs	r3, r1
    e324:	4313      	orrs	r3, r2
    e326:	d100      	bne.n	e32a <__aeabi_dsub+0x5a>
    e328:	e0d7      	b.n	e4da <__aeabi_dsub+0x20a>
    e32a:	1e6b      	subs	r3, r5, #1
    e32c:	2b00      	cmp	r3, #0
    e32e:	d000      	beq.n	e332 <__aeabi_dsub+0x62>
    e330:	e14b      	b.n	e5ca <__aeabi_dsub+0x2fa>
    e332:	4653      	mov	r3, sl
    e334:	1a9f      	subs	r7, r3, r2
    e336:	45ba      	cmp	sl, r7
    e338:	4180      	sbcs	r0, r0
    e33a:	1a64      	subs	r4, r4, r1
    e33c:	4240      	negs	r0, r0
    e33e:	1a24      	subs	r4, r4, r0
    e340:	2601      	movs	r6, #1
    e342:	e01e      	b.n	e382 <__aeabi_dsub+0xb2>
    e344:	4bb3      	ldr	r3, [pc, #716]	; (e614 <__aeabi_dsub+0x344>)
    e346:	429e      	cmp	r6, r3
    e348:	d048      	beq.n	e3dc <__aeabi_dsub+0x10c>
    e34a:	2380      	movs	r3, #128	; 0x80
    e34c:	041b      	lsls	r3, r3, #16
    e34e:	4319      	orrs	r1, r3
    e350:	2d38      	cmp	r5, #56	; 0x38
    e352:	dd00      	ble.n	e356 <__aeabi_dsub+0x86>
    e354:	e119      	b.n	e58a <__aeabi_dsub+0x2ba>
    e356:	2d1f      	cmp	r5, #31
    e358:	dd00      	ble.n	e35c <__aeabi_dsub+0x8c>
    e35a:	e14c      	b.n	e5f6 <__aeabi_dsub+0x326>
    e35c:	2320      	movs	r3, #32
    e35e:	000f      	movs	r7, r1
    e360:	1b5b      	subs	r3, r3, r5
    e362:	0010      	movs	r0, r2
    e364:	409a      	lsls	r2, r3
    e366:	409f      	lsls	r7, r3
    e368:	40e8      	lsrs	r0, r5
    e36a:	1e53      	subs	r3, r2, #1
    e36c:	419a      	sbcs	r2, r3
    e36e:	40e9      	lsrs	r1, r5
    e370:	4307      	orrs	r7, r0
    e372:	4317      	orrs	r7, r2
    e374:	4653      	mov	r3, sl
    e376:	1bdf      	subs	r7, r3, r7
    e378:	1a61      	subs	r1, r4, r1
    e37a:	45ba      	cmp	sl, r7
    e37c:	41a4      	sbcs	r4, r4
    e37e:	4264      	negs	r4, r4
    e380:	1b0c      	subs	r4, r1, r4
    e382:	0223      	lsls	r3, r4, #8
    e384:	d400      	bmi.n	e388 <__aeabi_dsub+0xb8>
    e386:	e0c5      	b.n	e514 <__aeabi_dsub+0x244>
    e388:	0264      	lsls	r4, r4, #9
    e38a:	0a65      	lsrs	r5, r4, #9
    e38c:	2d00      	cmp	r5, #0
    e38e:	d100      	bne.n	e392 <__aeabi_dsub+0xc2>
    e390:	e0f6      	b.n	e580 <__aeabi_dsub+0x2b0>
    e392:	0028      	movs	r0, r5
    e394:	f000 fbb2 	bl	eafc <__clzsi2>
    e398:	0003      	movs	r3, r0
    e39a:	3b08      	subs	r3, #8
    e39c:	2b1f      	cmp	r3, #31
    e39e:	dd00      	ble.n	e3a2 <__aeabi_dsub+0xd2>
    e3a0:	e0e9      	b.n	e576 <__aeabi_dsub+0x2a6>
    e3a2:	2220      	movs	r2, #32
    e3a4:	003c      	movs	r4, r7
    e3a6:	1ad2      	subs	r2, r2, r3
    e3a8:	409d      	lsls	r5, r3
    e3aa:	40d4      	lsrs	r4, r2
    e3ac:	409f      	lsls	r7, r3
    e3ae:	4325      	orrs	r5, r4
    e3b0:	429e      	cmp	r6, r3
    e3b2:	dd00      	ble.n	e3b6 <__aeabi_dsub+0xe6>
    e3b4:	e0db      	b.n	e56e <__aeabi_dsub+0x29e>
    e3b6:	1b9e      	subs	r6, r3, r6
    e3b8:	1c73      	adds	r3, r6, #1
    e3ba:	2b1f      	cmp	r3, #31
    e3bc:	dd00      	ble.n	e3c0 <__aeabi_dsub+0xf0>
    e3be:	e10a      	b.n	e5d6 <__aeabi_dsub+0x306>
    e3c0:	2220      	movs	r2, #32
    e3c2:	0038      	movs	r0, r7
    e3c4:	1ad2      	subs	r2, r2, r3
    e3c6:	0029      	movs	r1, r5
    e3c8:	4097      	lsls	r7, r2
    e3ca:	002c      	movs	r4, r5
    e3cc:	4091      	lsls	r1, r2
    e3ce:	40d8      	lsrs	r0, r3
    e3d0:	1e7a      	subs	r2, r7, #1
    e3d2:	4197      	sbcs	r7, r2
    e3d4:	40dc      	lsrs	r4, r3
    e3d6:	2600      	movs	r6, #0
    e3d8:	4301      	orrs	r1, r0
    e3da:	430f      	orrs	r7, r1
    e3dc:	077b      	lsls	r3, r7, #29
    e3de:	d009      	beq.n	e3f4 <__aeabi_dsub+0x124>
    e3e0:	230f      	movs	r3, #15
    e3e2:	403b      	ands	r3, r7
    e3e4:	2b04      	cmp	r3, #4
    e3e6:	d005      	beq.n	e3f4 <__aeabi_dsub+0x124>
    e3e8:	1d3b      	adds	r3, r7, #4
    e3ea:	42bb      	cmp	r3, r7
    e3ec:	41bf      	sbcs	r7, r7
    e3ee:	427f      	negs	r7, r7
    e3f0:	19e4      	adds	r4, r4, r7
    e3f2:	001f      	movs	r7, r3
    e3f4:	0223      	lsls	r3, r4, #8
    e3f6:	d525      	bpl.n	e444 <__aeabi_dsub+0x174>
    e3f8:	4b86      	ldr	r3, [pc, #536]	; (e614 <__aeabi_dsub+0x344>)
    e3fa:	3601      	adds	r6, #1
    e3fc:	429e      	cmp	r6, r3
    e3fe:	d100      	bne.n	e402 <__aeabi_dsub+0x132>
    e400:	e0af      	b.n	e562 <__aeabi_dsub+0x292>
    e402:	4b85      	ldr	r3, [pc, #532]	; (e618 <__aeabi_dsub+0x348>)
    e404:	2501      	movs	r5, #1
    e406:	401c      	ands	r4, r3
    e408:	4643      	mov	r3, r8
    e40a:	0762      	lsls	r2, r4, #29
    e40c:	08ff      	lsrs	r7, r7, #3
    e40e:	0264      	lsls	r4, r4, #9
    e410:	0576      	lsls	r6, r6, #21
    e412:	4317      	orrs	r7, r2
    e414:	0b24      	lsrs	r4, r4, #12
    e416:	0d76      	lsrs	r6, r6, #21
    e418:	401d      	ands	r5, r3
    e41a:	2100      	movs	r1, #0
    e41c:	0324      	lsls	r4, r4, #12
    e41e:	0b23      	lsrs	r3, r4, #12
    e420:	0d0c      	lsrs	r4, r1, #20
    e422:	4a7e      	ldr	r2, [pc, #504]	; (e61c <__aeabi_dsub+0x34c>)
    e424:	0524      	lsls	r4, r4, #20
    e426:	431c      	orrs	r4, r3
    e428:	4014      	ands	r4, r2
    e42a:	0533      	lsls	r3, r6, #20
    e42c:	4323      	orrs	r3, r4
    e42e:	005b      	lsls	r3, r3, #1
    e430:	07ed      	lsls	r5, r5, #31
    e432:	085b      	lsrs	r3, r3, #1
    e434:	432b      	orrs	r3, r5
    e436:	0038      	movs	r0, r7
    e438:	0019      	movs	r1, r3
    e43a:	bc1c      	pop	{r2, r3, r4}
    e43c:	4690      	mov	r8, r2
    e43e:	4699      	mov	r9, r3
    e440:	46a2      	mov	sl, r4
    e442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e444:	2501      	movs	r5, #1
    e446:	4643      	mov	r3, r8
    e448:	0762      	lsls	r2, r4, #29
    e44a:	08ff      	lsrs	r7, r7, #3
    e44c:	4317      	orrs	r7, r2
    e44e:	08e4      	lsrs	r4, r4, #3
    e450:	401d      	ands	r5, r3
    e452:	4b70      	ldr	r3, [pc, #448]	; (e614 <__aeabi_dsub+0x344>)
    e454:	429e      	cmp	r6, r3
    e456:	d036      	beq.n	e4c6 <__aeabi_dsub+0x1f6>
    e458:	0324      	lsls	r4, r4, #12
    e45a:	0576      	lsls	r6, r6, #21
    e45c:	0b24      	lsrs	r4, r4, #12
    e45e:	0d76      	lsrs	r6, r6, #21
    e460:	e7db      	b.n	e41a <__aeabi_dsub+0x14a>
    e462:	4663      	mov	r3, ip
    e464:	1af3      	subs	r3, r6, r3
    e466:	2b00      	cmp	r3, #0
    e468:	dc00      	bgt.n	e46c <__aeabi_dsub+0x19c>
    e46a:	e094      	b.n	e596 <__aeabi_dsub+0x2c6>
    e46c:	4660      	mov	r0, ip
    e46e:	2800      	cmp	r0, #0
    e470:	d035      	beq.n	e4de <__aeabi_dsub+0x20e>
    e472:	4868      	ldr	r0, [pc, #416]	; (e614 <__aeabi_dsub+0x344>)
    e474:	4286      	cmp	r6, r0
    e476:	d0b1      	beq.n	e3dc <__aeabi_dsub+0x10c>
    e478:	2780      	movs	r7, #128	; 0x80
    e47a:	043f      	lsls	r7, r7, #16
    e47c:	4339      	orrs	r1, r7
    e47e:	2b38      	cmp	r3, #56	; 0x38
    e480:	dc00      	bgt.n	e484 <__aeabi_dsub+0x1b4>
    e482:	e0fd      	b.n	e680 <__aeabi_dsub+0x3b0>
    e484:	430a      	orrs	r2, r1
    e486:	0017      	movs	r7, r2
    e488:	2100      	movs	r1, #0
    e48a:	1e7a      	subs	r2, r7, #1
    e48c:	4197      	sbcs	r7, r2
    e48e:	4457      	add	r7, sl
    e490:	4557      	cmp	r7, sl
    e492:	4180      	sbcs	r0, r0
    e494:	1909      	adds	r1, r1, r4
    e496:	4244      	negs	r4, r0
    e498:	190c      	adds	r4, r1, r4
    e49a:	0223      	lsls	r3, r4, #8
    e49c:	d53a      	bpl.n	e514 <__aeabi_dsub+0x244>
    e49e:	4b5d      	ldr	r3, [pc, #372]	; (e614 <__aeabi_dsub+0x344>)
    e4a0:	3601      	adds	r6, #1
    e4a2:	429e      	cmp	r6, r3
    e4a4:	d100      	bne.n	e4a8 <__aeabi_dsub+0x1d8>
    e4a6:	e14b      	b.n	e740 <__aeabi_dsub+0x470>
    e4a8:	2201      	movs	r2, #1
    e4aa:	4b5b      	ldr	r3, [pc, #364]	; (e618 <__aeabi_dsub+0x348>)
    e4ac:	401c      	ands	r4, r3
    e4ae:	087b      	lsrs	r3, r7, #1
    e4b0:	4017      	ands	r7, r2
    e4b2:	431f      	orrs	r7, r3
    e4b4:	07e2      	lsls	r2, r4, #31
    e4b6:	4317      	orrs	r7, r2
    e4b8:	0864      	lsrs	r4, r4, #1
    e4ba:	e78f      	b.n	e3dc <__aeabi_dsub+0x10c>
    e4bc:	0008      	movs	r0, r1
    e4be:	4310      	orrs	r0, r2
    e4c0:	d000      	beq.n	e4c4 <__aeabi_dsub+0x1f4>
    e4c2:	e724      	b.n	e30e <__aeabi_dsub+0x3e>
    e4c4:	e721      	b.n	e30a <__aeabi_dsub+0x3a>
    e4c6:	0023      	movs	r3, r4
    e4c8:	433b      	orrs	r3, r7
    e4ca:	d100      	bne.n	e4ce <__aeabi_dsub+0x1fe>
    e4cc:	e1b9      	b.n	e842 <__aeabi_dsub+0x572>
    e4ce:	2280      	movs	r2, #128	; 0x80
    e4d0:	0312      	lsls	r2, r2, #12
    e4d2:	4314      	orrs	r4, r2
    e4d4:	0324      	lsls	r4, r4, #12
    e4d6:	0b24      	lsrs	r4, r4, #12
    e4d8:	e79f      	b.n	e41a <__aeabi_dsub+0x14a>
    e4da:	002e      	movs	r6, r5
    e4dc:	e77e      	b.n	e3dc <__aeabi_dsub+0x10c>
    e4de:	0008      	movs	r0, r1
    e4e0:	4310      	orrs	r0, r2
    e4e2:	d100      	bne.n	e4e6 <__aeabi_dsub+0x216>
    e4e4:	e0ca      	b.n	e67c <__aeabi_dsub+0x3ac>
    e4e6:	1e58      	subs	r0, r3, #1
    e4e8:	4684      	mov	ip, r0
    e4ea:	2800      	cmp	r0, #0
    e4ec:	d000      	beq.n	e4f0 <__aeabi_dsub+0x220>
    e4ee:	e0e7      	b.n	e6c0 <__aeabi_dsub+0x3f0>
    e4f0:	4452      	add	r2, sl
    e4f2:	4552      	cmp	r2, sl
    e4f4:	4180      	sbcs	r0, r0
    e4f6:	1864      	adds	r4, r4, r1
    e4f8:	4240      	negs	r0, r0
    e4fa:	1824      	adds	r4, r4, r0
    e4fc:	0017      	movs	r7, r2
    e4fe:	2601      	movs	r6, #1
    e500:	0223      	lsls	r3, r4, #8
    e502:	d507      	bpl.n	e514 <__aeabi_dsub+0x244>
    e504:	2602      	movs	r6, #2
    e506:	e7cf      	b.n	e4a8 <__aeabi_dsub+0x1d8>
    e508:	4664      	mov	r4, ip
    e50a:	432c      	orrs	r4, r5
    e50c:	d100      	bne.n	e510 <__aeabi_dsub+0x240>
    e50e:	e1b3      	b.n	e878 <__aeabi_dsub+0x5a8>
    e510:	002c      	movs	r4, r5
    e512:	4667      	mov	r7, ip
    e514:	077b      	lsls	r3, r7, #29
    e516:	d000      	beq.n	e51a <__aeabi_dsub+0x24a>
    e518:	e762      	b.n	e3e0 <__aeabi_dsub+0x110>
    e51a:	0763      	lsls	r3, r4, #29
    e51c:	08ff      	lsrs	r7, r7, #3
    e51e:	431f      	orrs	r7, r3
    e520:	2501      	movs	r5, #1
    e522:	4643      	mov	r3, r8
    e524:	08e4      	lsrs	r4, r4, #3
    e526:	401d      	ands	r5, r3
    e528:	e793      	b.n	e452 <__aeabi_dsub+0x182>
    e52a:	2d00      	cmp	r5, #0
    e52c:	d178      	bne.n	e620 <__aeabi_dsub+0x350>
    e52e:	1c75      	adds	r5, r6, #1
    e530:	056d      	lsls	r5, r5, #21
    e532:	0d6d      	lsrs	r5, r5, #21
    e534:	2d01      	cmp	r5, #1
    e536:	dc00      	bgt.n	e53a <__aeabi_dsub+0x26a>
    e538:	e0f2      	b.n	e720 <__aeabi_dsub+0x450>
    e53a:	4650      	mov	r0, sl
    e53c:	1a80      	subs	r0, r0, r2
    e53e:	4582      	cmp	sl, r0
    e540:	41bf      	sbcs	r7, r7
    e542:	1a65      	subs	r5, r4, r1
    e544:	427f      	negs	r7, r7
    e546:	1bed      	subs	r5, r5, r7
    e548:	4684      	mov	ip, r0
    e54a:	0228      	lsls	r0, r5, #8
    e54c:	d400      	bmi.n	e550 <__aeabi_dsub+0x280>
    e54e:	e08c      	b.n	e66a <__aeabi_dsub+0x39a>
    e550:	4650      	mov	r0, sl
    e552:	1a17      	subs	r7, r2, r0
    e554:	42ba      	cmp	r2, r7
    e556:	4192      	sbcs	r2, r2
    e558:	1b0c      	subs	r4, r1, r4
    e55a:	4255      	negs	r5, r2
    e55c:	1b65      	subs	r5, r4, r5
    e55e:	4698      	mov	r8, r3
    e560:	e714      	b.n	e38c <__aeabi_dsub+0xbc>
    e562:	2501      	movs	r5, #1
    e564:	4643      	mov	r3, r8
    e566:	2400      	movs	r4, #0
    e568:	401d      	ands	r5, r3
    e56a:	2700      	movs	r7, #0
    e56c:	e755      	b.n	e41a <__aeabi_dsub+0x14a>
    e56e:	4c2a      	ldr	r4, [pc, #168]	; (e618 <__aeabi_dsub+0x348>)
    e570:	1af6      	subs	r6, r6, r3
    e572:	402c      	ands	r4, r5
    e574:	e732      	b.n	e3dc <__aeabi_dsub+0x10c>
    e576:	003d      	movs	r5, r7
    e578:	3828      	subs	r0, #40	; 0x28
    e57a:	4085      	lsls	r5, r0
    e57c:	2700      	movs	r7, #0
    e57e:	e717      	b.n	e3b0 <__aeabi_dsub+0xe0>
    e580:	0038      	movs	r0, r7
    e582:	f000 fabb 	bl	eafc <__clzsi2>
    e586:	3020      	adds	r0, #32
    e588:	e706      	b.n	e398 <__aeabi_dsub+0xc8>
    e58a:	430a      	orrs	r2, r1
    e58c:	0017      	movs	r7, r2
    e58e:	2100      	movs	r1, #0
    e590:	1e7a      	subs	r2, r7, #1
    e592:	4197      	sbcs	r7, r2
    e594:	e6ee      	b.n	e374 <__aeabi_dsub+0xa4>
    e596:	2b00      	cmp	r3, #0
    e598:	d000      	beq.n	e59c <__aeabi_dsub+0x2cc>
    e59a:	e0e5      	b.n	e768 <__aeabi_dsub+0x498>
    e59c:	1c73      	adds	r3, r6, #1
    e59e:	469c      	mov	ip, r3
    e5a0:	055b      	lsls	r3, r3, #21
    e5a2:	0d5b      	lsrs	r3, r3, #21
    e5a4:	2b01      	cmp	r3, #1
    e5a6:	dc00      	bgt.n	e5aa <__aeabi_dsub+0x2da>
    e5a8:	e09f      	b.n	e6ea <__aeabi_dsub+0x41a>
    e5aa:	4b1a      	ldr	r3, [pc, #104]	; (e614 <__aeabi_dsub+0x344>)
    e5ac:	459c      	cmp	ip, r3
    e5ae:	d100      	bne.n	e5b2 <__aeabi_dsub+0x2e2>
    e5b0:	e0c5      	b.n	e73e <__aeabi_dsub+0x46e>
    e5b2:	4452      	add	r2, sl
    e5b4:	4552      	cmp	r2, sl
    e5b6:	4180      	sbcs	r0, r0
    e5b8:	1864      	adds	r4, r4, r1
    e5ba:	4240      	negs	r0, r0
    e5bc:	1824      	adds	r4, r4, r0
    e5be:	07e7      	lsls	r7, r4, #31
    e5c0:	0852      	lsrs	r2, r2, #1
    e5c2:	4317      	orrs	r7, r2
    e5c4:	0864      	lsrs	r4, r4, #1
    e5c6:	4666      	mov	r6, ip
    e5c8:	e708      	b.n	e3dc <__aeabi_dsub+0x10c>
    e5ca:	4812      	ldr	r0, [pc, #72]	; (e614 <__aeabi_dsub+0x344>)
    e5cc:	4285      	cmp	r5, r0
    e5ce:	d100      	bne.n	e5d2 <__aeabi_dsub+0x302>
    e5d0:	e085      	b.n	e6de <__aeabi_dsub+0x40e>
    e5d2:	001d      	movs	r5, r3
    e5d4:	e6bc      	b.n	e350 <__aeabi_dsub+0x80>
    e5d6:	0029      	movs	r1, r5
    e5d8:	3e1f      	subs	r6, #31
    e5da:	40f1      	lsrs	r1, r6
    e5dc:	2b20      	cmp	r3, #32
    e5de:	d100      	bne.n	e5e2 <__aeabi_dsub+0x312>
    e5e0:	e07f      	b.n	e6e2 <__aeabi_dsub+0x412>
    e5e2:	2240      	movs	r2, #64	; 0x40
    e5e4:	1ad3      	subs	r3, r2, r3
    e5e6:	409d      	lsls	r5, r3
    e5e8:	432f      	orrs	r7, r5
    e5ea:	1e7d      	subs	r5, r7, #1
    e5ec:	41af      	sbcs	r7, r5
    e5ee:	2400      	movs	r4, #0
    e5f0:	430f      	orrs	r7, r1
    e5f2:	2600      	movs	r6, #0
    e5f4:	e78e      	b.n	e514 <__aeabi_dsub+0x244>
    e5f6:	002b      	movs	r3, r5
    e5f8:	000f      	movs	r7, r1
    e5fa:	3b20      	subs	r3, #32
    e5fc:	40df      	lsrs	r7, r3
    e5fe:	2d20      	cmp	r5, #32
    e600:	d071      	beq.n	e6e6 <__aeabi_dsub+0x416>
    e602:	2340      	movs	r3, #64	; 0x40
    e604:	1b5d      	subs	r5, r3, r5
    e606:	40a9      	lsls	r1, r5
    e608:	430a      	orrs	r2, r1
    e60a:	1e51      	subs	r1, r2, #1
    e60c:	418a      	sbcs	r2, r1
    e60e:	2100      	movs	r1, #0
    e610:	4317      	orrs	r7, r2
    e612:	e6af      	b.n	e374 <__aeabi_dsub+0xa4>
    e614:	000007ff 	.word	0x000007ff
    e618:	ff7fffff 	.word	0xff7fffff
    e61c:	800fffff 	.word	0x800fffff
    e620:	2e00      	cmp	r6, #0
    e622:	d03e      	beq.n	e6a2 <__aeabi_dsub+0x3d2>
    e624:	4eb3      	ldr	r6, [pc, #716]	; (e8f4 <__aeabi_dsub+0x624>)
    e626:	45b4      	cmp	ip, r6
    e628:	d045      	beq.n	e6b6 <__aeabi_dsub+0x3e6>
    e62a:	2680      	movs	r6, #128	; 0x80
    e62c:	0436      	lsls	r6, r6, #16
    e62e:	426d      	negs	r5, r5
    e630:	4334      	orrs	r4, r6
    e632:	2d38      	cmp	r5, #56	; 0x38
    e634:	dd00      	ble.n	e638 <__aeabi_dsub+0x368>
    e636:	e0a8      	b.n	e78a <__aeabi_dsub+0x4ba>
    e638:	2d1f      	cmp	r5, #31
    e63a:	dd00      	ble.n	e63e <__aeabi_dsub+0x36e>
    e63c:	e11f      	b.n	e87e <__aeabi_dsub+0x5ae>
    e63e:	2620      	movs	r6, #32
    e640:	0027      	movs	r7, r4
    e642:	4650      	mov	r0, sl
    e644:	1b76      	subs	r6, r6, r5
    e646:	40b7      	lsls	r7, r6
    e648:	40e8      	lsrs	r0, r5
    e64a:	4307      	orrs	r7, r0
    e64c:	4650      	mov	r0, sl
    e64e:	40b0      	lsls	r0, r6
    e650:	1e46      	subs	r6, r0, #1
    e652:	41b0      	sbcs	r0, r6
    e654:	40ec      	lsrs	r4, r5
    e656:	4338      	orrs	r0, r7
    e658:	1a17      	subs	r7, r2, r0
    e65a:	42ba      	cmp	r2, r7
    e65c:	4192      	sbcs	r2, r2
    e65e:	1b0c      	subs	r4, r1, r4
    e660:	4252      	negs	r2, r2
    e662:	1aa4      	subs	r4, r4, r2
    e664:	4666      	mov	r6, ip
    e666:	4698      	mov	r8, r3
    e668:	e68b      	b.n	e382 <__aeabi_dsub+0xb2>
    e66a:	4664      	mov	r4, ip
    e66c:	4667      	mov	r7, ip
    e66e:	432c      	orrs	r4, r5
    e670:	d000      	beq.n	e674 <__aeabi_dsub+0x3a4>
    e672:	e68b      	b.n	e38c <__aeabi_dsub+0xbc>
    e674:	2500      	movs	r5, #0
    e676:	2600      	movs	r6, #0
    e678:	2700      	movs	r7, #0
    e67a:	e6ea      	b.n	e452 <__aeabi_dsub+0x182>
    e67c:	001e      	movs	r6, r3
    e67e:	e6ad      	b.n	e3dc <__aeabi_dsub+0x10c>
    e680:	2b1f      	cmp	r3, #31
    e682:	dc60      	bgt.n	e746 <__aeabi_dsub+0x476>
    e684:	2720      	movs	r7, #32
    e686:	1af8      	subs	r0, r7, r3
    e688:	000f      	movs	r7, r1
    e68a:	4684      	mov	ip, r0
    e68c:	4087      	lsls	r7, r0
    e68e:	0010      	movs	r0, r2
    e690:	40d8      	lsrs	r0, r3
    e692:	4307      	orrs	r7, r0
    e694:	4660      	mov	r0, ip
    e696:	4082      	lsls	r2, r0
    e698:	1e50      	subs	r0, r2, #1
    e69a:	4182      	sbcs	r2, r0
    e69c:	40d9      	lsrs	r1, r3
    e69e:	4317      	orrs	r7, r2
    e6a0:	e6f5      	b.n	e48e <__aeabi_dsub+0x1be>
    e6a2:	0026      	movs	r6, r4
    e6a4:	4650      	mov	r0, sl
    e6a6:	4306      	orrs	r6, r0
    e6a8:	d005      	beq.n	e6b6 <__aeabi_dsub+0x3e6>
    e6aa:	43ed      	mvns	r5, r5
    e6ac:	2d00      	cmp	r5, #0
    e6ae:	d0d3      	beq.n	e658 <__aeabi_dsub+0x388>
    e6b0:	4e90      	ldr	r6, [pc, #576]	; (e8f4 <__aeabi_dsub+0x624>)
    e6b2:	45b4      	cmp	ip, r6
    e6b4:	d1bd      	bne.n	e632 <__aeabi_dsub+0x362>
    e6b6:	000c      	movs	r4, r1
    e6b8:	0017      	movs	r7, r2
    e6ba:	4666      	mov	r6, ip
    e6bc:	4698      	mov	r8, r3
    e6be:	e68d      	b.n	e3dc <__aeabi_dsub+0x10c>
    e6c0:	488c      	ldr	r0, [pc, #560]	; (e8f4 <__aeabi_dsub+0x624>)
    e6c2:	4283      	cmp	r3, r0
    e6c4:	d00b      	beq.n	e6de <__aeabi_dsub+0x40e>
    e6c6:	4663      	mov	r3, ip
    e6c8:	e6d9      	b.n	e47e <__aeabi_dsub+0x1ae>
    e6ca:	2d00      	cmp	r5, #0
    e6cc:	d000      	beq.n	e6d0 <__aeabi_dsub+0x400>
    e6ce:	e096      	b.n	e7fe <__aeabi_dsub+0x52e>
    e6d0:	0008      	movs	r0, r1
    e6d2:	4310      	orrs	r0, r2
    e6d4:	d100      	bne.n	e6d8 <__aeabi_dsub+0x408>
    e6d6:	e0e2      	b.n	e89e <__aeabi_dsub+0x5ce>
    e6d8:	000c      	movs	r4, r1
    e6da:	0017      	movs	r7, r2
    e6dc:	4698      	mov	r8, r3
    e6de:	4e85      	ldr	r6, [pc, #532]	; (e8f4 <__aeabi_dsub+0x624>)
    e6e0:	e67c      	b.n	e3dc <__aeabi_dsub+0x10c>
    e6e2:	2500      	movs	r5, #0
    e6e4:	e780      	b.n	e5e8 <__aeabi_dsub+0x318>
    e6e6:	2100      	movs	r1, #0
    e6e8:	e78e      	b.n	e608 <__aeabi_dsub+0x338>
    e6ea:	0023      	movs	r3, r4
    e6ec:	4650      	mov	r0, sl
    e6ee:	4303      	orrs	r3, r0
    e6f0:	2e00      	cmp	r6, #0
    e6f2:	d000      	beq.n	e6f6 <__aeabi_dsub+0x426>
    e6f4:	e0a8      	b.n	e848 <__aeabi_dsub+0x578>
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d100      	bne.n	e6fc <__aeabi_dsub+0x42c>
    e6fa:	e0de      	b.n	e8ba <__aeabi_dsub+0x5ea>
    e6fc:	000b      	movs	r3, r1
    e6fe:	4313      	orrs	r3, r2
    e700:	d100      	bne.n	e704 <__aeabi_dsub+0x434>
    e702:	e66b      	b.n	e3dc <__aeabi_dsub+0x10c>
    e704:	4452      	add	r2, sl
    e706:	4552      	cmp	r2, sl
    e708:	4180      	sbcs	r0, r0
    e70a:	1864      	adds	r4, r4, r1
    e70c:	4240      	negs	r0, r0
    e70e:	1824      	adds	r4, r4, r0
    e710:	0017      	movs	r7, r2
    e712:	0223      	lsls	r3, r4, #8
    e714:	d400      	bmi.n	e718 <__aeabi_dsub+0x448>
    e716:	e6fd      	b.n	e514 <__aeabi_dsub+0x244>
    e718:	4b77      	ldr	r3, [pc, #476]	; (e8f8 <__aeabi_dsub+0x628>)
    e71a:	4666      	mov	r6, ip
    e71c:	401c      	ands	r4, r3
    e71e:	e65d      	b.n	e3dc <__aeabi_dsub+0x10c>
    e720:	0025      	movs	r5, r4
    e722:	4650      	mov	r0, sl
    e724:	4305      	orrs	r5, r0
    e726:	2e00      	cmp	r6, #0
    e728:	d1cf      	bne.n	e6ca <__aeabi_dsub+0x3fa>
    e72a:	2d00      	cmp	r5, #0
    e72c:	d14f      	bne.n	e7ce <__aeabi_dsub+0x4fe>
    e72e:	000c      	movs	r4, r1
    e730:	4314      	orrs	r4, r2
    e732:	d100      	bne.n	e736 <__aeabi_dsub+0x466>
    e734:	e0a0      	b.n	e878 <__aeabi_dsub+0x5a8>
    e736:	000c      	movs	r4, r1
    e738:	0017      	movs	r7, r2
    e73a:	4698      	mov	r8, r3
    e73c:	e64e      	b.n	e3dc <__aeabi_dsub+0x10c>
    e73e:	4666      	mov	r6, ip
    e740:	2400      	movs	r4, #0
    e742:	2700      	movs	r7, #0
    e744:	e685      	b.n	e452 <__aeabi_dsub+0x182>
    e746:	001f      	movs	r7, r3
    e748:	0008      	movs	r0, r1
    e74a:	3f20      	subs	r7, #32
    e74c:	40f8      	lsrs	r0, r7
    e74e:	0007      	movs	r7, r0
    e750:	2b20      	cmp	r3, #32
    e752:	d100      	bne.n	e756 <__aeabi_dsub+0x486>
    e754:	e08e      	b.n	e874 <__aeabi_dsub+0x5a4>
    e756:	2040      	movs	r0, #64	; 0x40
    e758:	1ac3      	subs	r3, r0, r3
    e75a:	4099      	lsls	r1, r3
    e75c:	430a      	orrs	r2, r1
    e75e:	1e51      	subs	r1, r2, #1
    e760:	418a      	sbcs	r2, r1
    e762:	2100      	movs	r1, #0
    e764:	4317      	orrs	r7, r2
    e766:	e692      	b.n	e48e <__aeabi_dsub+0x1be>
    e768:	2e00      	cmp	r6, #0
    e76a:	d114      	bne.n	e796 <__aeabi_dsub+0x4c6>
    e76c:	0026      	movs	r6, r4
    e76e:	4650      	mov	r0, sl
    e770:	4306      	orrs	r6, r0
    e772:	d062      	beq.n	e83a <__aeabi_dsub+0x56a>
    e774:	43db      	mvns	r3, r3
    e776:	2b00      	cmp	r3, #0
    e778:	d15c      	bne.n	e834 <__aeabi_dsub+0x564>
    e77a:	1887      	adds	r7, r0, r2
    e77c:	4297      	cmp	r7, r2
    e77e:	4192      	sbcs	r2, r2
    e780:	1864      	adds	r4, r4, r1
    e782:	4252      	negs	r2, r2
    e784:	18a4      	adds	r4, r4, r2
    e786:	4666      	mov	r6, ip
    e788:	e687      	b.n	e49a <__aeabi_dsub+0x1ca>
    e78a:	4650      	mov	r0, sl
    e78c:	4320      	orrs	r0, r4
    e78e:	1e44      	subs	r4, r0, #1
    e790:	41a0      	sbcs	r0, r4
    e792:	2400      	movs	r4, #0
    e794:	e760      	b.n	e658 <__aeabi_dsub+0x388>
    e796:	4e57      	ldr	r6, [pc, #348]	; (e8f4 <__aeabi_dsub+0x624>)
    e798:	45b4      	cmp	ip, r6
    e79a:	d04e      	beq.n	e83a <__aeabi_dsub+0x56a>
    e79c:	2680      	movs	r6, #128	; 0x80
    e79e:	0436      	lsls	r6, r6, #16
    e7a0:	425b      	negs	r3, r3
    e7a2:	4334      	orrs	r4, r6
    e7a4:	2b38      	cmp	r3, #56	; 0x38
    e7a6:	dd00      	ble.n	e7aa <__aeabi_dsub+0x4da>
    e7a8:	e07f      	b.n	e8aa <__aeabi_dsub+0x5da>
    e7aa:	2b1f      	cmp	r3, #31
    e7ac:	dd00      	ble.n	e7b0 <__aeabi_dsub+0x4e0>
    e7ae:	e08b      	b.n	e8c8 <__aeabi_dsub+0x5f8>
    e7b0:	2620      	movs	r6, #32
    e7b2:	0027      	movs	r7, r4
    e7b4:	4650      	mov	r0, sl
    e7b6:	1af6      	subs	r6, r6, r3
    e7b8:	40b7      	lsls	r7, r6
    e7ba:	40d8      	lsrs	r0, r3
    e7bc:	4307      	orrs	r7, r0
    e7be:	4650      	mov	r0, sl
    e7c0:	40b0      	lsls	r0, r6
    e7c2:	1e46      	subs	r6, r0, #1
    e7c4:	41b0      	sbcs	r0, r6
    e7c6:	4307      	orrs	r7, r0
    e7c8:	40dc      	lsrs	r4, r3
    e7ca:	18bf      	adds	r7, r7, r2
    e7cc:	e7d6      	b.n	e77c <__aeabi_dsub+0x4ac>
    e7ce:	000d      	movs	r5, r1
    e7d0:	4315      	orrs	r5, r2
    e7d2:	d100      	bne.n	e7d6 <__aeabi_dsub+0x506>
    e7d4:	e602      	b.n	e3dc <__aeabi_dsub+0x10c>
    e7d6:	4650      	mov	r0, sl
    e7d8:	1a80      	subs	r0, r0, r2
    e7da:	4582      	cmp	sl, r0
    e7dc:	41bf      	sbcs	r7, r7
    e7de:	1a65      	subs	r5, r4, r1
    e7e0:	427f      	negs	r7, r7
    e7e2:	1bed      	subs	r5, r5, r7
    e7e4:	4684      	mov	ip, r0
    e7e6:	0228      	lsls	r0, r5, #8
    e7e8:	d400      	bmi.n	e7ec <__aeabi_dsub+0x51c>
    e7ea:	e68d      	b.n	e508 <__aeabi_dsub+0x238>
    e7ec:	4650      	mov	r0, sl
    e7ee:	1a17      	subs	r7, r2, r0
    e7f0:	42ba      	cmp	r2, r7
    e7f2:	4192      	sbcs	r2, r2
    e7f4:	1b0c      	subs	r4, r1, r4
    e7f6:	4252      	negs	r2, r2
    e7f8:	1aa4      	subs	r4, r4, r2
    e7fa:	4698      	mov	r8, r3
    e7fc:	e5ee      	b.n	e3dc <__aeabi_dsub+0x10c>
    e7fe:	000d      	movs	r5, r1
    e800:	4315      	orrs	r5, r2
    e802:	d100      	bne.n	e806 <__aeabi_dsub+0x536>
    e804:	e76b      	b.n	e6de <__aeabi_dsub+0x40e>
    e806:	4650      	mov	r0, sl
    e808:	0767      	lsls	r7, r4, #29
    e80a:	08c0      	lsrs	r0, r0, #3
    e80c:	4307      	orrs	r7, r0
    e80e:	2080      	movs	r0, #128	; 0x80
    e810:	08e4      	lsrs	r4, r4, #3
    e812:	0300      	lsls	r0, r0, #12
    e814:	4204      	tst	r4, r0
    e816:	d007      	beq.n	e828 <__aeabi_dsub+0x558>
    e818:	08cd      	lsrs	r5, r1, #3
    e81a:	4205      	tst	r5, r0
    e81c:	d104      	bne.n	e828 <__aeabi_dsub+0x558>
    e81e:	002c      	movs	r4, r5
    e820:	4698      	mov	r8, r3
    e822:	08d7      	lsrs	r7, r2, #3
    e824:	0749      	lsls	r1, r1, #29
    e826:	430f      	orrs	r7, r1
    e828:	0f7b      	lsrs	r3, r7, #29
    e82a:	00e4      	lsls	r4, r4, #3
    e82c:	431c      	orrs	r4, r3
    e82e:	00ff      	lsls	r7, r7, #3
    e830:	4e30      	ldr	r6, [pc, #192]	; (e8f4 <__aeabi_dsub+0x624>)
    e832:	e5d3      	b.n	e3dc <__aeabi_dsub+0x10c>
    e834:	4e2f      	ldr	r6, [pc, #188]	; (e8f4 <__aeabi_dsub+0x624>)
    e836:	45b4      	cmp	ip, r6
    e838:	d1b4      	bne.n	e7a4 <__aeabi_dsub+0x4d4>
    e83a:	000c      	movs	r4, r1
    e83c:	0017      	movs	r7, r2
    e83e:	4666      	mov	r6, ip
    e840:	e5cc      	b.n	e3dc <__aeabi_dsub+0x10c>
    e842:	2700      	movs	r7, #0
    e844:	2400      	movs	r4, #0
    e846:	e5e8      	b.n	e41a <__aeabi_dsub+0x14a>
    e848:	2b00      	cmp	r3, #0
    e84a:	d039      	beq.n	e8c0 <__aeabi_dsub+0x5f0>
    e84c:	000b      	movs	r3, r1
    e84e:	4313      	orrs	r3, r2
    e850:	d100      	bne.n	e854 <__aeabi_dsub+0x584>
    e852:	e744      	b.n	e6de <__aeabi_dsub+0x40e>
    e854:	08c0      	lsrs	r0, r0, #3
    e856:	0767      	lsls	r7, r4, #29
    e858:	4307      	orrs	r7, r0
    e85a:	2080      	movs	r0, #128	; 0x80
    e85c:	08e4      	lsrs	r4, r4, #3
    e85e:	0300      	lsls	r0, r0, #12
    e860:	4204      	tst	r4, r0
    e862:	d0e1      	beq.n	e828 <__aeabi_dsub+0x558>
    e864:	08cb      	lsrs	r3, r1, #3
    e866:	4203      	tst	r3, r0
    e868:	d1de      	bne.n	e828 <__aeabi_dsub+0x558>
    e86a:	08d7      	lsrs	r7, r2, #3
    e86c:	0749      	lsls	r1, r1, #29
    e86e:	430f      	orrs	r7, r1
    e870:	001c      	movs	r4, r3
    e872:	e7d9      	b.n	e828 <__aeabi_dsub+0x558>
    e874:	2100      	movs	r1, #0
    e876:	e771      	b.n	e75c <__aeabi_dsub+0x48c>
    e878:	2500      	movs	r5, #0
    e87a:	2700      	movs	r7, #0
    e87c:	e5e9      	b.n	e452 <__aeabi_dsub+0x182>
    e87e:	002e      	movs	r6, r5
    e880:	0027      	movs	r7, r4
    e882:	3e20      	subs	r6, #32
    e884:	40f7      	lsrs	r7, r6
    e886:	2d20      	cmp	r5, #32
    e888:	d02f      	beq.n	e8ea <__aeabi_dsub+0x61a>
    e88a:	2640      	movs	r6, #64	; 0x40
    e88c:	1b75      	subs	r5, r6, r5
    e88e:	40ac      	lsls	r4, r5
    e890:	4650      	mov	r0, sl
    e892:	4320      	orrs	r0, r4
    e894:	1e44      	subs	r4, r0, #1
    e896:	41a0      	sbcs	r0, r4
    e898:	2400      	movs	r4, #0
    e89a:	4338      	orrs	r0, r7
    e89c:	e6dc      	b.n	e658 <__aeabi_dsub+0x388>
    e89e:	2480      	movs	r4, #128	; 0x80
    e8a0:	2500      	movs	r5, #0
    e8a2:	0324      	lsls	r4, r4, #12
    e8a4:	4e13      	ldr	r6, [pc, #76]	; (e8f4 <__aeabi_dsub+0x624>)
    e8a6:	2700      	movs	r7, #0
    e8a8:	e5d3      	b.n	e452 <__aeabi_dsub+0x182>
    e8aa:	4650      	mov	r0, sl
    e8ac:	4320      	orrs	r0, r4
    e8ae:	0007      	movs	r7, r0
    e8b0:	1e78      	subs	r0, r7, #1
    e8b2:	4187      	sbcs	r7, r0
    e8b4:	2400      	movs	r4, #0
    e8b6:	18bf      	adds	r7, r7, r2
    e8b8:	e760      	b.n	e77c <__aeabi_dsub+0x4ac>
    e8ba:	000c      	movs	r4, r1
    e8bc:	0017      	movs	r7, r2
    e8be:	e58d      	b.n	e3dc <__aeabi_dsub+0x10c>
    e8c0:	000c      	movs	r4, r1
    e8c2:	0017      	movs	r7, r2
    e8c4:	4e0b      	ldr	r6, [pc, #44]	; (e8f4 <__aeabi_dsub+0x624>)
    e8c6:	e589      	b.n	e3dc <__aeabi_dsub+0x10c>
    e8c8:	001e      	movs	r6, r3
    e8ca:	0027      	movs	r7, r4
    e8cc:	3e20      	subs	r6, #32
    e8ce:	40f7      	lsrs	r7, r6
    e8d0:	2b20      	cmp	r3, #32
    e8d2:	d00c      	beq.n	e8ee <__aeabi_dsub+0x61e>
    e8d4:	2640      	movs	r6, #64	; 0x40
    e8d6:	1af3      	subs	r3, r6, r3
    e8d8:	409c      	lsls	r4, r3
    e8da:	4650      	mov	r0, sl
    e8dc:	4320      	orrs	r0, r4
    e8de:	1e44      	subs	r4, r0, #1
    e8e0:	41a0      	sbcs	r0, r4
    e8e2:	4307      	orrs	r7, r0
    e8e4:	2400      	movs	r4, #0
    e8e6:	18bf      	adds	r7, r7, r2
    e8e8:	e748      	b.n	e77c <__aeabi_dsub+0x4ac>
    e8ea:	2400      	movs	r4, #0
    e8ec:	e7d0      	b.n	e890 <__aeabi_dsub+0x5c0>
    e8ee:	2400      	movs	r4, #0
    e8f0:	e7f3      	b.n	e8da <__aeabi_dsub+0x60a>
    e8f2:	46c0      	nop			; (mov r8, r8)
    e8f4:	000007ff 	.word	0x000007ff
    e8f8:	ff7fffff 	.word	0xff7fffff

0000e8fc <__aeabi_d2iz>:
    e8fc:	b530      	push	{r4, r5, lr}
    e8fe:	4d13      	ldr	r5, [pc, #76]	; (e94c <__aeabi_d2iz+0x50>)
    e900:	030a      	lsls	r2, r1, #12
    e902:	004b      	lsls	r3, r1, #1
    e904:	0b12      	lsrs	r2, r2, #12
    e906:	0d5b      	lsrs	r3, r3, #21
    e908:	0fc9      	lsrs	r1, r1, #31
    e90a:	2400      	movs	r4, #0
    e90c:	42ab      	cmp	r3, r5
    e90e:	dd10      	ble.n	e932 <__aeabi_d2iz+0x36>
    e910:	4c0f      	ldr	r4, [pc, #60]	; (e950 <__aeabi_d2iz+0x54>)
    e912:	42a3      	cmp	r3, r4
    e914:	dc0f      	bgt.n	e936 <__aeabi_d2iz+0x3a>
    e916:	2480      	movs	r4, #128	; 0x80
    e918:	4d0e      	ldr	r5, [pc, #56]	; (e954 <__aeabi_d2iz+0x58>)
    e91a:	0364      	lsls	r4, r4, #13
    e91c:	4322      	orrs	r2, r4
    e91e:	1aed      	subs	r5, r5, r3
    e920:	2d1f      	cmp	r5, #31
    e922:	dd0b      	ble.n	e93c <__aeabi_d2iz+0x40>
    e924:	480c      	ldr	r0, [pc, #48]	; (e958 <__aeabi_d2iz+0x5c>)
    e926:	1ac3      	subs	r3, r0, r3
    e928:	40da      	lsrs	r2, r3
    e92a:	4254      	negs	r4, r2
    e92c:	2900      	cmp	r1, #0
    e92e:	d100      	bne.n	e932 <__aeabi_d2iz+0x36>
    e930:	0014      	movs	r4, r2
    e932:	0020      	movs	r0, r4
    e934:	bd30      	pop	{r4, r5, pc}
    e936:	4b09      	ldr	r3, [pc, #36]	; (e95c <__aeabi_d2iz+0x60>)
    e938:	18cc      	adds	r4, r1, r3
    e93a:	e7fa      	b.n	e932 <__aeabi_d2iz+0x36>
    e93c:	4c08      	ldr	r4, [pc, #32]	; (e960 <__aeabi_d2iz+0x64>)
    e93e:	40e8      	lsrs	r0, r5
    e940:	46a4      	mov	ip, r4
    e942:	4463      	add	r3, ip
    e944:	409a      	lsls	r2, r3
    e946:	4302      	orrs	r2, r0
    e948:	e7ef      	b.n	e92a <__aeabi_d2iz+0x2e>
    e94a:	46c0      	nop			; (mov r8, r8)
    e94c:	000003fe 	.word	0x000003fe
    e950:	0000041d 	.word	0x0000041d
    e954:	00000433 	.word	0x00000433
    e958:	00000413 	.word	0x00000413
    e95c:	7fffffff 	.word	0x7fffffff
    e960:	fffffbed 	.word	0xfffffbed

0000e964 <__aeabi_i2d>:
    e964:	b570      	push	{r4, r5, r6, lr}
    e966:	2800      	cmp	r0, #0
    e968:	d030      	beq.n	e9cc <__aeabi_i2d+0x68>
    e96a:	17c3      	asrs	r3, r0, #31
    e96c:	18c4      	adds	r4, r0, r3
    e96e:	405c      	eors	r4, r3
    e970:	0fc5      	lsrs	r5, r0, #31
    e972:	0020      	movs	r0, r4
    e974:	f000 f8c2 	bl	eafc <__clzsi2>
    e978:	4b17      	ldr	r3, [pc, #92]	; (e9d8 <__aeabi_i2d+0x74>)
    e97a:	4a18      	ldr	r2, [pc, #96]	; (e9dc <__aeabi_i2d+0x78>)
    e97c:	1a1b      	subs	r3, r3, r0
    e97e:	1ad2      	subs	r2, r2, r3
    e980:	2a1f      	cmp	r2, #31
    e982:	dd18      	ble.n	e9b6 <__aeabi_i2d+0x52>
    e984:	4a16      	ldr	r2, [pc, #88]	; (e9e0 <__aeabi_i2d+0x7c>)
    e986:	1ad2      	subs	r2, r2, r3
    e988:	4094      	lsls	r4, r2
    e98a:	2200      	movs	r2, #0
    e98c:	0324      	lsls	r4, r4, #12
    e98e:	055b      	lsls	r3, r3, #21
    e990:	0b24      	lsrs	r4, r4, #12
    e992:	0d5b      	lsrs	r3, r3, #21
    e994:	2100      	movs	r1, #0
    e996:	0010      	movs	r0, r2
    e998:	0324      	lsls	r4, r4, #12
    e99a:	0d0a      	lsrs	r2, r1, #20
    e99c:	0b24      	lsrs	r4, r4, #12
    e99e:	0512      	lsls	r2, r2, #20
    e9a0:	4322      	orrs	r2, r4
    e9a2:	4c10      	ldr	r4, [pc, #64]	; (e9e4 <__aeabi_i2d+0x80>)
    e9a4:	051b      	lsls	r3, r3, #20
    e9a6:	4022      	ands	r2, r4
    e9a8:	4313      	orrs	r3, r2
    e9aa:	005b      	lsls	r3, r3, #1
    e9ac:	07ed      	lsls	r5, r5, #31
    e9ae:	085b      	lsrs	r3, r3, #1
    e9b0:	432b      	orrs	r3, r5
    e9b2:	0019      	movs	r1, r3
    e9b4:	bd70      	pop	{r4, r5, r6, pc}
    e9b6:	0021      	movs	r1, r4
    e9b8:	4091      	lsls	r1, r2
    e9ba:	000a      	movs	r2, r1
    e9bc:	210b      	movs	r1, #11
    e9be:	1a08      	subs	r0, r1, r0
    e9c0:	40c4      	lsrs	r4, r0
    e9c2:	055b      	lsls	r3, r3, #21
    e9c4:	0324      	lsls	r4, r4, #12
    e9c6:	0b24      	lsrs	r4, r4, #12
    e9c8:	0d5b      	lsrs	r3, r3, #21
    e9ca:	e7e3      	b.n	e994 <__aeabi_i2d+0x30>
    e9cc:	2500      	movs	r5, #0
    e9ce:	2300      	movs	r3, #0
    e9d0:	2400      	movs	r4, #0
    e9d2:	2200      	movs	r2, #0
    e9d4:	e7de      	b.n	e994 <__aeabi_i2d+0x30>
    e9d6:	46c0      	nop			; (mov r8, r8)
    e9d8:	0000041e 	.word	0x0000041e
    e9dc:	00000433 	.word	0x00000433
    e9e0:	00000413 	.word	0x00000413
    e9e4:	800fffff 	.word	0x800fffff

0000e9e8 <__aeabi_ui2d>:
    e9e8:	b510      	push	{r4, lr}
    e9ea:	1e04      	subs	r4, r0, #0
    e9ec:	d028      	beq.n	ea40 <__aeabi_ui2d+0x58>
    e9ee:	f000 f885 	bl	eafc <__clzsi2>
    e9f2:	4b15      	ldr	r3, [pc, #84]	; (ea48 <__aeabi_ui2d+0x60>)
    e9f4:	4a15      	ldr	r2, [pc, #84]	; (ea4c <__aeabi_ui2d+0x64>)
    e9f6:	1a1b      	subs	r3, r3, r0
    e9f8:	1ad2      	subs	r2, r2, r3
    e9fa:	2a1f      	cmp	r2, #31
    e9fc:	dd15      	ble.n	ea2a <__aeabi_ui2d+0x42>
    e9fe:	4a14      	ldr	r2, [pc, #80]	; (ea50 <__aeabi_ui2d+0x68>)
    ea00:	1ad2      	subs	r2, r2, r3
    ea02:	4094      	lsls	r4, r2
    ea04:	2200      	movs	r2, #0
    ea06:	0324      	lsls	r4, r4, #12
    ea08:	055b      	lsls	r3, r3, #21
    ea0a:	0b24      	lsrs	r4, r4, #12
    ea0c:	0d5b      	lsrs	r3, r3, #21
    ea0e:	2100      	movs	r1, #0
    ea10:	0010      	movs	r0, r2
    ea12:	0324      	lsls	r4, r4, #12
    ea14:	0d0a      	lsrs	r2, r1, #20
    ea16:	0b24      	lsrs	r4, r4, #12
    ea18:	0512      	lsls	r2, r2, #20
    ea1a:	4322      	orrs	r2, r4
    ea1c:	4c0d      	ldr	r4, [pc, #52]	; (ea54 <__aeabi_ui2d+0x6c>)
    ea1e:	051b      	lsls	r3, r3, #20
    ea20:	4022      	ands	r2, r4
    ea22:	4313      	orrs	r3, r2
    ea24:	005b      	lsls	r3, r3, #1
    ea26:	0859      	lsrs	r1, r3, #1
    ea28:	bd10      	pop	{r4, pc}
    ea2a:	0021      	movs	r1, r4
    ea2c:	4091      	lsls	r1, r2
    ea2e:	000a      	movs	r2, r1
    ea30:	210b      	movs	r1, #11
    ea32:	1a08      	subs	r0, r1, r0
    ea34:	40c4      	lsrs	r4, r0
    ea36:	055b      	lsls	r3, r3, #21
    ea38:	0324      	lsls	r4, r4, #12
    ea3a:	0b24      	lsrs	r4, r4, #12
    ea3c:	0d5b      	lsrs	r3, r3, #21
    ea3e:	e7e6      	b.n	ea0e <__aeabi_ui2d+0x26>
    ea40:	2300      	movs	r3, #0
    ea42:	2400      	movs	r4, #0
    ea44:	2200      	movs	r2, #0
    ea46:	e7e2      	b.n	ea0e <__aeabi_ui2d+0x26>
    ea48:	0000041e 	.word	0x0000041e
    ea4c:	00000433 	.word	0x00000433
    ea50:	00000413 	.word	0x00000413
    ea54:	800fffff 	.word	0x800fffff

0000ea58 <__aeabi_f2d>:
    ea58:	0041      	lsls	r1, r0, #1
    ea5a:	0e09      	lsrs	r1, r1, #24
    ea5c:	1c4b      	adds	r3, r1, #1
    ea5e:	b570      	push	{r4, r5, r6, lr}
    ea60:	b2db      	uxtb	r3, r3
    ea62:	0246      	lsls	r6, r0, #9
    ea64:	0a75      	lsrs	r5, r6, #9
    ea66:	0fc4      	lsrs	r4, r0, #31
    ea68:	2b01      	cmp	r3, #1
    ea6a:	dd14      	ble.n	ea96 <__aeabi_f2d+0x3e>
    ea6c:	23e0      	movs	r3, #224	; 0xe0
    ea6e:	009b      	lsls	r3, r3, #2
    ea70:	076d      	lsls	r5, r5, #29
    ea72:	0b36      	lsrs	r6, r6, #12
    ea74:	18cb      	adds	r3, r1, r3
    ea76:	2100      	movs	r1, #0
    ea78:	0d0a      	lsrs	r2, r1, #20
    ea7a:	0028      	movs	r0, r5
    ea7c:	0512      	lsls	r2, r2, #20
    ea7e:	4d1c      	ldr	r5, [pc, #112]	; (eaf0 <__aeabi_f2d+0x98>)
    ea80:	4332      	orrs	r2, r6
    ea82:	055b      	lsls	r3, r3, #21
    ea84:	402a      	ands	r2, r5
    ea86:	085b      	lsrs	r3, r3, #1
    ea88:	4313      	orrs	r3, r2
    ea8a:	005b      	lsls	r3, r3, #1
    ea8c:	07e4      	lsls	r4, r4, #31
    ea8e:	085b      	lsrs	r3, r3, #1
    ea90:	4323      	orrs	r3, r4
    ea92:	0019      	movs	r1, r3
    ea94:	bd70      	pop	{r4, r5, r6, pc}
    ea96:	2900      	cmp	r1, #0
    ea98:	d114      	bne.n	eac4 <__aeabi_f2d+0x6c>
    ea9a:	2d00      	cmp	r5, #0
    ea9c:	d01e      	beq.n	eadc <__aeabi_f2d+0x84>
    ea9e:	0028      	movs	r0, r5
    eaa0:	f000 f82c 	bl	eafc <__clzsi2>
    eaa4:	280a      	cmp	r0, #10
    eaa6:	dc1c      	bgt.n	eae2 <__aeabi_f2d+0x8a>
    eaa8:	230b      	movs	r3, #11
    eaaa:	002a      	movs	r2, r5
    eaac:	1a1b      	subs	r3, r3, r0
    eaae:	40da      	lsrs	r2, r3
    eab0:	0003      	movs	r3, r0
    eab2:	3315      	adds	r3, #21
    eab4:	409d      	lsls	r5, r3
    eab6:	4b0f      	ldr	r3, [pc, #60]	; (eaf4 <__aeabi_f2d+0x9c>)
    eab8:	0312      	lsls	r2, r2, #12
    eaba:	1a1b      	subs	r3, r3, r0
    eabc:	055b      	lsls	r3, r3, #21
    eabe:	0b16      	lsrs	r6, r2, #12
    eac0:	0d5b      	lsrs	r3, r3, #21
    eac2:	e7d8      	b.n	ea76 <__aeabi_f2d+0x1e>
    eac4:	2d00      	cmp	r5, #0
    eac6:	d006      	beq.n	ead6 <__aeabi_f2d+0x7e>
    eac8:	0b32      	lsrs	r2, r6, #12
    eaca:	2680      	movs	r6, #128	; 0x80
    eacc:	0336      	lsls	r6, r6, #12
    eace:	076d      	lsls	r5, r5, #29
    ead0:	4316      	orrs	r6, r2
    ead2:	4b09      	ldr	r3, [pc, #36]	; (eaf8 <__aeabi_f2d+0xa0>)
    ead4:	e7cf      	b.n	ea76 <__aeabi_f2d+0x1e>
    ead6:	4b08      	ldr	r3, [pc, #32]	; (eaf8 <__aeabi_f2d+0xa0>)
    ead8:	2600      	movs	r6, #0
    eada:	e7cc      	b.n	ea76 <__aeabi_f2d+0x1e>
    eadc:	2300      	movs	r3, #0
    eade:	2600      	movs	r6, #0
    eae0:	e7c9      	b.n	ea76 <__aeabi_f2d+0x1e>
    eae2:	0003      	movs	r3, r0
    eae4:	002a      	movs	r2, r5
    eae6:	3b0b      	subs	r3, #11
    eae8:	409a      	lsls	r2, r3
    eaea:	2500      	movs	r5, #0
    eaec:	e7e3      	b.n	eab6 <__aeabi_f2d+0x5e>
    eaee:	46c0      	nop			; (mov r8, r8)
    eaf0:	800fffff 	.word	0x800fffff
    eaf4:	00000389 	.word	0x00000389
    eaf8:	000007ff 	.word	0x000007ff

0000eafc <__clzsi2>:
    eafc:	211c      	movs	r1, #28
    eafe:	2301      	movs	r3, #1
    eb00:	041b      	lsls	r3, r3, #16
    eb02:	4298      	cmp	r0, r3
    eb04:	d301      	bcc.n	eb0a <__clzsi2+0xe>
    eb06:	0c00      	lsrs	r0, r0, #16
    eb08:	3910      	subs	r1, #16
    eb0a:	0a1b      	lsrs	r3, r3, #8
    eb0c:	4298      	cmp	r0, r3
    eb0e:	d301      	bcc.n	eb14 <__clzsi2+0x18>
    eb10:	0a00      	lsrs	r0, r0, #8
    eb12:	3908      	subs	r1, #8
    eb14:	091b      	lsrs	r3, r3, #4
    eb16:	4298      	cmp	r0, r3
    eb18:	d301      	bcc.n	eb1e <__clzsi2+0x22>
    eb1a:	0900      	lsrs	r0, r0, #4
    eb1c:	3904      	subs	r1, #4
    eb1e:	a202      	add	r2, pc, #8	; (adr r2, eb28 <__clzsi2+0x2c>)
    eb20:	5c10      	ldrb	r0, [r2, r0]
    eb22:	1840      	adds	r0, r0, r1
    eb24:	4770      	bx	lr
    eb26:	46c0      	nop			; (mov r8, r8)
    eb28:	02020304 	.word	0x02020304
    eb2c:	01010101 	.word	0x01010101
	...

0000eb38 <__clzdi2>:
    eb38:	b510      	push	{r4, lr}
    eb3a:	2900      	cmp	r1, #0
    eb3c:	d103      	bne.n	eb46 <__clzdi2+0xe>
    eb3e:	f7ff ffdd 	bl	eafc <__clzsi2>
    eb42:	3020      	adds	r0, #32
    eb44:	e002      	b.n	eb4c <__clzdi2+0x14>
    eb46:	1c08      	adds	r0, r1, #0
    eb48:	f7ff ffd8 	bl	eafc <__clzsi2>
    eb4c:	bd10      	pop	{r4, pc}
    eb4e:	46c0      	nop			; (mov r8, r8)

0000eb50 <__ctzsi2>:
    eb50:	4241      	negs	r1, r0
    eb52:	4008      	ands	r0, r1
    eb54:	211c      	movs	r1, #28
    eb56:	2301      	movs	r3, #1
    eb58:	041b      	lsls	r3, r3, #16
    eb5a:	4298      	cmp	r0, r3
    eb5c:	d301      	bcc.n	eb62 <__ctzsi2+0x12>
    eb5e:	0c00      	lsrs	r0, r0, #16
    eb60:	3910      	subs	r1, #16
    eb62:	0a1b      	lsrs	r3, r3, #8
    eb64:	4298      	cmp	r0, r3
    eb66:	d301      	bcc.n	eb6c <__ctzsi2+0x1c>
    eb68:	0a00      	lsrs	r0, r0, #8
    eb6a:	3908      	subs	r1, #8
    eb6c:	091b      	lsrs	r3, r3, #4
    eb6e:	4298      	cmp	r0, r3
    eb70:	d301      	bcc.n	eb76 <__ctzsi2+0x26>
    eb72:	0900      	lsrs	r0, r0, #4
    eb74:	3904      	subs	r1, #4
    eb76:	a202      	add	r2, pc, #8	; (adr r2, eb80 <__ctzsi2+0x30>)
    eb78:	5c10      	ldrb	r0, [r2, r0]
    eb7a:	1a40      	subs	r0, r0, r1
    eb7c:	4770      	bx	lr
    eb7e:	46c0      	nop			; (mov r8, r8)
    eb80:	1d1d1c1b 	.word	0x1d1d1c1b
    eb84:	1e1e1e1e 	.word	0x1e1e1e1e
    eb88:	1f1f1f1f 	.word	0x1f1f1f1f
    eb8c:	1f1f1f1f 	.word	0x1f1f1f1f

0000eb90 <__libc_init_array>:
    eb90:	b570      	push	{r4, r5, r6, lr}
    eb92:	4e0d      	ldr	r6, [pc, #52]	; (ebc8 <__libc_init_array+0x38>)
    eb94:	4d0d      	ldr	r5, [pc, #52]	; (ebcc <__libc_init_array+0x3c>)
    eb96:	2400      	movs	r4, #0
    eb98:	1bad      	subs	r5, r5, r6
    eb9a:	10ad      	asrs	r5, r5, #2
    eb9c:	d005      	beq.n	ebaa <__libc_init_array+0x1a>
    eb9e:	00a3      	lsls	r3, r4, #2
    eba0:	58f3      	ldr	r3, [r6, r3]
    eba2:	3401      	adds	r4, #1
    eba4:	4798      	blx	r3
    eba6:	42a5      	cmp	r5, r4
    eba8:	d1f9      	bne.n	eb9e <__libc_init_array+0xe>
    ebaa:	f006 f91d 	bl	14de8 <_init>
    ebae:	4e08      	ldr	r6, [pc, #32]	; (ebd0 <__libc_init_array+0x40>)
    ebb0:	4d08      	ldr	r5, [pc, #32]	; (ebd4 <__libc_init_array+0x44>)
    ebb2:	2400      	movs	r4, #0
    ebb4:	1bad      	subs	r5, r5, r6
    ebb6:	10ad      	asrs	r5, r5, #2
    ebb8:	d005      	beq.n	ebc6 <__libc_init_array+0x36>
    ebba:	00a3      	lsls	r3, r4, #2
    ebbc:	58f3      	ldr	r3, [r6, r3]
    ebbe:	3401      	adds	r4, #1
    ebc0:	4798      	blx	r3
    ebc2:	42a5      	cmp	r5, r4
    ebc4:	d1f9      	bne.n	ebba <__libc_init_array+0x2a>
    ebc6:	bd70      	pop	{r4, r5, r6, pc}
    ebc8:	00014df4 	.word	0x00014df4
    ebcc:	00014df4 	.word	0x00014df4
    ebd0:	00014df4 	.word	0x00014df4
    ebd4:	00014dfc 	.word	0x00014dfc

0000ebd8 <memset>:
    ebd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebda:	0783      	lsls	r3, r0, #30
    ebdc:	d043      	beq.n	ec66 <memset+0x8e>
    ebde:	1e54      	subs	r4, r2, #1
    ebe0:	2a00      	cmp	r2, #0
    ebe2:	d03f      	beq.n	ec64 <memset+0x8c>
    ebe4:	b2ce      	uxtb	r6, r1
    ebe6:	0002      	movs	r2, r0
    ebe8:	2503      	movs	r5, #3
    ebea:	e002      	b.n	ebf2 <memset+0x1a>
    ebec:	001a      	movs	r2, r3
    ebee:	3c01      	subs	r4, #1
    ebf0:	d338      	bcc.n	ec64 <memset+0x8c>
    ebf2:	1c53      	adds	r3, r2, #1
    ebf4:	7016      	strb	r6, [r2, #0]
    ebf6:	422b      	tst	r3, r5
    ebf8:	d1f8      	bne.n	ebec <memset+0x14>
    ebfa:	2c03      	cmp	r4, #3
    ebfc:	d92a      	bls.n	ec54 <memset+0x7c>
    ebfe:	22ff      	movs	r2, #255	; 0xff
    ec00:	400a      	ands	r2, r1
    ec02:	0215      	lsls	r5, r2, #8
    ec04:	4315      	orrs	r5, r2
    ec06:	042a      	lsls	r2, r5, #16
    ec08:	4315      	orrs	r5, r2
    ec0a:	2c0f      	cmp	r4, #15
    ec0c:	d914      	bls.n	ec38 <memset+0x60>
    ec0e:	0027      	movs	r7, r4
    ec10:	001a      	movs	r2, r3
    ec12:	3f10      	subs	r7, #16
    ec14:	093e      	lsrs	r6, r7, #4
    ec16:	3601      	adds	r6, #1
    ec18:	0136      	lsls	r6, r6, #4
    ec1a:	199e      	adds	r6, r3, r6
    ec1c:	6015      	str	r5, [r2, #0]
    ec1e:	6055      	str	r5, [r2, #4]
    ec20:	6095      	str	r5, [r2, #8]
    ec22:	60d5      	str	r5, [r2, #12]
    ec24:	3210      	adds	r2, #16
    ec26:	4296      	cmp	r6, r2
    ec28:	d1f8      	bne.n	ec1c <memset+0x44>
    ec2a:	220f      	movs	r2, #15
    ec2c:	4397      	bics	r7, r2
    ec2e:	3710      	adds	r7, #16
    ec30:	19db      	adds	r3, r3, r7
    ec32:	4014      	ands	r4, r2
    ec34:	2c03      	cmp	r4, #3
    ec36:	d90d      	bls.n	ec54 <memset+0x7c>
    ec38:	001a      	movs	r2, r3
    ec3a:	1f27      	subs	r7, r4, #4
    ec3c:	08be      	lsrs	r6, r7, #2
    ec3e:	3601      	adds	r6, #1
    ec40:	00b6      	lsls	r6, r6, #2
    ec42:	199e      	adds	r6, r3, r6
    ec44:	c220      	stmia	r2!, {r5}
    ec46:	42b2      	cmp	r2, r6
    ec48:	d1fc      	bne.n	ec44 <memset+0x6c>
    ec4a:	2203      	movs	r2, #3
    ec4c:	4397      	bics	r7, r2
    ec4e:	3704      	adds	r7, #4
    ec50:	19db      	adds	r3, r3, r7
    ec52:	4014      	ands	r4, r2
    ec54:	2c00      	cmp	r4, #0
    ec56:	d005      	beq.n	ec64 <memset+0x8c>
    ec58:	b2c9      	uxtb	r1, r1
    ec5a:	191c      	adds	r4, r3, r4
    ec5c:	7019      	strb	r1, [r3, #0]
    ec5e:	3301      	adds	r3, #1
    ec60:	429c      	cmp	r4, r3
    ec62:	d1fb      	bne.n	ec5c <memset+0x84>
    ec64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec66:	0014      	movs	r4, r2
    ec68:	0003      	movs	r3, r0
    ec6a:	e7c6      	b.n	ebfa <memset+0x22>

0000ec6c <printf>:
    ec6c:	b40f      	push	{r0, r1, r2, r3}
    ec6e:	b500      	push	{lr}
    ec70:	4906      	ldr	r1, [pc, #24]	; (ec8c <printf+0x20>)
    ec72:	b083      	sub	sp, #12
    ec74:	ab04      	add	r3, sp, #16
    ec76:	6808      	ldr	r0, [r1, #0]
    ec78:	cb04      	ldmia	r3!, {r2}
    ec7a:	6881      	ldr	r1, [r0, #8]
    ec7c:	9301      	str	r3, [sp, #4]
    ec7e:	f000 f87b 	bl	ed78 <_vfprintf_r>
    ec82:	b003      	add	sp, #12
    ec84:	bc08      	pop	{r3}
    ec86:	b004      	add	sp, #16
    ec88:	4718      	bx	r3
    ec8a:	46c0      	nop			; (mov r8, r8)
    ec8c:	20000138 	.word	0x20000138

0000ec90 <_puts_r>:
    ec90:	b530      	push	{r4, r5, lr}
    ec92:	0005      	movs	r5, r0
    ec94:	b089      	sub	sp, #36	; 0x24
    ec96:	0008      	movs	r0, r1
    ec98:	000c      	movs	r4, r1
    ec9a:	f000 f83b 	bl	ed14 <strlen>
    ec9e:	ab04      	add	r3, sp, #16
    eca0:	4a15      	ldr	r2, [pc, #84]	; (ecf8 <_puts_r+0x68>)
    eca2:	9301      	str	r3, [sp, #4]
    eca4:	2302      	movs	r3, #2
    eca6:	9206      	str	r2, [sp, #24]
    eca8:	2201      	movs	r2, #1
    ecaa:	9302      	str	r3, [sp, #8]
    ecac:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ecae:	9005      	str	r0, [sp, #20]
    ecb0:	3001      	adds	r0, #1
    ecb2:	9404      	str	r4, [sp, #16]
    ecb4:	9207      	str	r2, [sp, #28]
    ecb6:	9003      	str	r0, [sp, #12]
    ecb8:	68ac      	ldr	r4, [r5, #8]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d017      	beq.n	ecee <_puts_r+0x5e>
    ecbe:	230c      	movs	r3, #12
    ecc0:	5ee2      	ldrsh	r2, [r4, r3]
    ecc2:	2380      	movs	r3, #128	; 0x80
    ecc4:	019b      	lsls	r3, r3, #6
    ecc6:	421a      	tst	r2, r3
    ecc8:	d105      	bne.n	ecd6 <_puts_r+0x46>
    ecca:	4313      	orrs	r3, r2
    eccc:	81a3      	strh	r3, [r4, #12]
    ecce:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ecd0:	4b0a      	ldr	r3, [pc, #40]	; (ecfc <_puts_r+0x6c>)
    ecd2:	4013      	ands	r3, r2
    ecd4:	6663      	str	r3, [r4, #100]	; 0x64
    ecd6:	aa01      	add	r2, sp, #4
    ecd8:	0021      	movs	r1, r4
    ecda:	0028      	movs	r0, r5
    ecdc:	f002 ff12 	bl	11b04 <__sfvwrite_r>
    ece0:	1e43      	subs	r3, r0, #1
    ece2:	4198      	sbcs	r0, r3
    ece4:	230a      	movs	r3, #10
    ece6:	4240      	negs	r0, r0
    ece8:	4318      	orrs	r0, r3
    ecea:	b009      	add	sp, #36	; 0x24
    ecec:	bd30      	pop	{r4, r5, pc}
    ecee:	0028      	movs	r0, r5
    ecf0:	f002 fdb4 	bl	1185c <__sinit>
    ecf4:	e7e3      	b.n	ecbe <_puts_r+0x2e>
    ecf6:	46c0      	nop			; (mov r8, r8)
    ecf8:	00013a38 	.word	0x00013a38
    ecfc:	ffffdfff 	.word	0xffffdfff

0000ed00 <puts>:
    ed00:	b510      	push	{r4, lr}
    ed02:	4b03      	ldr	r3, [pc, #12]	; (ed10 <puts+0x10>)
    ed04:	0001      	movs	r1, r0
    ed06:	6818      	ldr	r0, [r3, #0]
    ed08:	f7ff ffc2 	bl	ec90 <_puts_r>
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	46c0      	nop			; (mov r8, r8)
    ed10:	20000138 	.word	0x20000138

0000ed14 <strlen>:
    ed14:	b510      	push	{r4, lr}
    ed16:	0783      	lsls	r3, r0, #30
    ed18:	d025      	beq.n	ed66 <strlen+0x52>
    ed1a:	7803      	ldrb	r3, [r0, #0]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d024      	beq.n	ed6a <strlen+0x56>
    ed20:	0003      	movs	r3, r0
    ed22:	2103      	movs	r1, #3
    ed24:	e002      	b.n	ed2c <strlen+0x18>
    ed26:	781a      	ldrb	r2, [r3, #0]
    ed28:	2a00      	cmp	r2, #0
    ed2a:	d01a      	beq.n	ed62 <strlen+0x4e>
    ed2c:	3301      	adds	r3, #1
    ed2e:	420b      	tst	r3, r1
    ed30:	d1f9      	bne.n	ed26 <strlen+0x12>
    ed32:	6819      	ldr	r1, [r3, #0]
    ed34:	4a0e      	ldr	r2, [pc, #56]	; (ed70 <strlen+0x5c>)
    ed36:	4c0f      	ldr	r4, [pc, #60]	; (ed74 <strlen+0x60>)
    ed38:	188a      	adds	r2, r1, r2
    ed3a:	438a      	bics	r2, r1
    ed3c:	4222      	tst	r2, r4
    ed3e:	d106      	bne.n	ed4e <strlen+0x3a>
    ed40:	3304      	adds	r3, #4
    ed42:	6819      	ldr	r1, [r3, #0]
    ed44:	4a0a      	ldr	r2, [pc, #40]	; (ed70 <strlen+0x5c>)
    ed46:	188a      	adds	r2, r1, r2
    ed48:	438a      	bics	r2, r1
    ed4a:	4222      	tst	r2, r4
    ed4c:	d0f8      	beq.n	ed40 <strlen+0x2c>
    ed4e:	001a      	movs	r2, r3
    ed50:	781b      	ldrb	r3, [r3, #0]
    ed52:	2b00      	cmp	r3, #0
    ed54:	d003      	beq.n	ed5e <strlen+0x4a>
    ed56:	3201      	adds	r2, #1
    ed58:	7811      	ldrb	r1, [r2, #0]
    ed5a:	2900      	cmp	r1, #0
    ed5c:	d1fb      	bne.n	ed56 <strlen+0x42>
    ed5e:	1a10      	subs	r0, r2, r0
    ed60:	bd10      	pop	{r4, pc}
    ed62:	1a18      	subs	r0, r3, r0
    ed64:	e7fc      	b.n	ed60 <strlen+0x4c>
    ed66:	0003      	movs	r3, r0
    ed68:	e7e3      	b.n	ed32 <strlen+0x1e>
    ed6a:	2000      	movs	r0, #0
    ed6c:	e7f8      	b.n	ed60 <strlen+0x4c>
    ed6e:	46c0      	nop			; (mov r8, r8)
    ed70:	fefefeff 	.word	0xfefefeff
    ed74:	80808080 	.word	0x80808080

0000ed78 <_vfprintf_r>:
    ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed7a:	46de      	mov	lr, fp
    ed7c:	464e      	mov	r6, r9
    ed7e:	4645      	mov	r5, r8
    ed80:	4657      	mov	r7, sl
    ed82:	b5e0      	push	{r5, r6, r7, lr}
    ed84:	b0c3      	sub	sp, #268	; 0x10c
    ed86:	4689      	mov	r9, r1
    ed88:	0014      	movs	r4, r2
    ed8a:	001d      	movs	r5, r3
    ed8c:	930f      	str	r3, [sp, #60]	; 0x3c
    ed8e:	0006      	movs	r6, r0
    ed90:	9006      	str	r0, [sp, #24]
    ed92:	f003 f86f 	bl	11e74 <_localeconv_r>
    ed96:	6803      	ldr	r3, [r0, #0]
    ed98:	0018      	movs	r0, r3
    ed9a:	9319      	str	r3, [sp, #100]	; 0x64
    ed9c:	f7ff ffba 	bl	ed14 <strlen>
    eda0:	9017      	str	r0, [sp, #92]	; 0x5c
    eda2:	2e00      	cmp	r6, #0
    eda4:	d004      	beq.n	edb0 <_vfprintf_r+0x38>
    eda6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    eda8:	9307      	str	r3, [sp, #28]
    edaa:	2b00      	cmp	r3, #0
    edac:	d100      	bne.n	edb0 <_vfprintf_r+0x38>
    edae:	e0a5      	b.n	eefc <_vfprintf_r+0x184>
    edb0:	464b      	mov	r3, r9
    edb2:	2280      	movs	r2, #128	; 0x80
    edb4:	210c      	movs	r1, #12
    edb6:	5e59      	ldrsh	r1, [r3, r1]
    edb8:	0192      	lsls	r2, r2, #6
    edba:	b28b      	uxth	r3, r1
    edbc:	4213      	tst	r3, r2
    edbe:	d109      	bne.n	edd4 <_vfprintf_r+0x5c>
    edc0:	430a      	orrs	r2, r1
    edc2:	464b      	mov	r3, r9
    edc4:	4649      	mov	r1, r9
    edc6:	819a      	strh	r2, [r3, #12]
    edc8:	6e49      	ldr	r1, [r1, #100]	; 0x64
    edca:	4bba      	ldr	r3, [pc, #744]	; (f0b4 <_vfprintf_r+0x33c>)
    edcc:	400b      	ands	r3, r1
    edce:	4649      	mov	r1, r9
    edd0:	664b      	str	r3, [r1, #100]	; 0x64
    edd2:	b293      	uxth	r3, r2
    edd4:	071a      	lsls	r2, r3, #28
    edd6:	d564      	bpl.n	eea2 <_vfprintf_r+0x12a>
    edd8:	464a      	mov	r2, r9
    edda:	6912      	ldr	r2, [r2, #16]
    eddc:	2a00      	cmp	r2, #0
    edde:	d060      	beq.n	eea2 <_vfprintf_r+0x12a>
    ede0:	221a      	movs	r2, #26
    ede2:	4013      	ands	r3, r2
    ede4:	2b0a      	cmp	r3, #10
    ede6:	d06a      	beq.n	eebe <_vfprintf_r+0x146>
    ede8:	ab32      	add	r3, sp, #200	; 0xc8
    edea:	9325      	str	r3, [sp, #148]	; 0x94
    edec:	2300      	movs	r3, #0
    edee:	46cb      	mov	fp, r9
    edf0:	af25      	add	r7, sp, #148	; 0x94
    edf2:	60bb      	str	r3, [r7, #8]
    edf4:	607b      	str	r3, [r7, #4]
    edf6:	9407      	str	r4, [sp, #28]
    edf8:	9314      	str	r3, [sp, #80]	; 0x50
    edfa:	9315      	str	r3, [sp, #84]	; 0x54
    edfc:	9316      	str	r3, [sp, #88]	; 0x58
    edfe:	ae32      	add	r6, sp, #200	; 0xc8
    ee00:	9318      	str	r3, [sp, #96]	; 0x60
    ee02:	931a      	str	r3, [sp, #104]	; 0x68
    ee04:	930a      	str	r3, [sp, #40]	; 0x28
    ee06:	9c07      	ldr	r4, [sp, #28]
    ee08:	7823      	ldrb	r3, [r4, #0]
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d100      	bne.n	ee10 <_vfprintf_r+0x98>
    ee0e:	e079      	b.n	ef04 <_vfprintf_r+0x18c>
    ee10:	2b25      	cmp	r3, #37	; 0x25
    ee12:	d102      	bne.n	ee1a <_vfprintf_r+0xa2>
    ee14:	e076      	b.n	ef04 <_vfprintf_r+0x18c>
    ee16:	2b25      	cmp	r3, #37	; 0x25
    ee18:	d003      	beq.n	ee22 <_vfprintf_r+0xaa>
    ee1a:	3401      	adds	r4, #1
    ee1c:	7823      	ldrb	r3, [r4, #0]
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d1f9      	bne.n	ee16 <_vfprintf_r+0x9e>
    ee22:	9b07      	ldr	r3, [sp, #28]
    ee24:	1ae5      	subs	r5, r4, r3
    ee26:	d010      	beq.n	ee4a <_vfprintf_r+0xd2>
    ee28:	9b07      	ldr	r3, [sp, #28]
    ee2a:	6075      	str	r5, [r6, #4]
    ee2c:	6033      	str	r3, [r6, #0]
    ee2e:	68bb      	ldr	r3, [r7, #8]
    ee30:	195b      	adds	r3, r3, r5
    ee32:	60bb      	str	r3, [r7, #8]
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	3301      	adds	r3, #1
    ee38:	607b      	str	r3, [r7, #4]
    ee3a:	2b07      	cmp	r3, #7
    ee3c:	dc53      	bgt.n	eee6 <_vfprintf_r+0x16e>
    ee3e:	3608      	adds	r6, #8
    ee40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee42:	469c      	mov	ip, r3
    ee44:	44ac      	add	ip, r5
    ee46:	4663      	mov	r3, ip
    ee48:	930a      	str	r3, [sp, #40]	; 0x28
    ee4a:	7823      	ldrb	r3, [r4, #0]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d101      	bne.n	ee54 <_vfprintf_r+0xdc>
    ee50:	f001 f809 	bl	fe66 <_vfprintf_r+0x10ee>
    ee54:	1c63      	adds	r3, r4, #1
    ee56:	9307      	str	r3, [sp, #28]
    ee58:	2300      	movs	r3, #0
    ee5a:	aa16      	add	r2, sp, #88	; 0x58
    ee5c:	77d3      	strb	r3, [r2, #31]
    ee5e:	2201      	movs	r2, #1
    ee60:	4252      	negs	r2, r2
    ee62:	4692      	mov	sl, r2
    ee64:	2200      	movs	r2, #0
    ee66:	920b      	str	r2, [sp, #44]	; 0x2c
    ee68:	3220      	adds	r2, #32
    ee6a:	4691      	mov	r9, r2
    ee6c:	3220      	adds	r2, #32
    ee6e:	7863      	ldrb	r3, [r4, #1]
    ee70:	2100      	movs	r1, #0
    ee72:	2000      	movs	r0, #0
    ee74:	2400      	movs	r4, #0
    ee76:	4694      	mov	ip, r2
    ee78:	9a07      	ldr	r2, [sp, #28]
    ee7a:	3201      	adds	r2, #1
    ee7c:	9207      	str	r2, [sp, #28]
    ee7e:	001a      	movs	r2, r3
    ee80:	3a20      	subs	r2, #32
    ee82:	2a58      	cmp	r2, #88	; 0x58
    ee84:	d900      	bls.n	ee88 <_vfprintf_r+0x110>
    ee86:	e2c9      	b.n	f41c <_vfprintf_r+0x6a4>
    ee88:	4d8b      	ldr	r5, [pc, #556]	; (f0b8 <_vfprintf_r+0x340>)
    ee8a:	0092      	lsls	r2, r2, #2
    ee8c:	58aa      	ldr	r2, [r5, r2]
    ee8e:	4697      	mov	pc, r2
    ee90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee92:	920f      	str	r2, [sp, #60]	; 0x3c
    ee94:	425b      	negs	r3, r3
    ee96:	930b      	str	r3, [sp, #44]	; 0x2c
    ee98:	2304      	movs	r3, #4
    ee9a:	431c      	orrs	r4, r3
    ee9c:	9b07      	ldr	r3, [sp, #28]
    ee9e:	781b      	ldrb	r3, [r3, #0]
    eea0:	e7ea      	b.n	ee78 <_vfprintf_r+0x100>
    eea2:	4649      	mov	r1, r9
    eea4:	9806      	ldr	r0, [sp, #24]
    eea6:	f001 faaf 	bl	10408 <__swsetup_r>
    eeaa:	2800      	cmp	r0, #0
    eeac:	d001      	beq.n	eeb2 <_vfprintf_r+0x13a>
    eeae:	f000 fc54 	bl	f75a <_vfprintf_r+0x9e2>
    eeb2:	464b      	mov	r3, r9
    eeb4:	221a      	movs	r2, #26
    eeb6:	899b      	ldrh	r3, [r3, #12]
    eeb8:	4013      	ands	r3, r2
    eeba:	2b0a      	cmp	r3, #10
    eebc:	d194      	bne.n	ede8 <_vfprintf_r+0x70>
    eebe:	464b      	mov	r3, r9
    eec0:	220e      	movs	r2, #14
    eec2:	5e9b      	ldrsh	r3, [r3, r2]
    eec4:	2b00      	cmp	r3, #0
    eec6:	db8f      	blt.n	ede8 <_vfprintf_r+0x70>
    eec8:	002b      	movs	r3, r5
    eeca:	0022      	movs	r2, r4
    eecc:	4649      	mov	r1, r9
    eece:	9806      	ldr	r0, [sp, #24]
    eed0:	f001 fa60 	bl	10394 <__sbprintf>
    eed4:	900a      	str	r0, [sp, #40]	; 0x28
    eed6:	980a      	ldr	r0, [sp, #40]	; 0x28
    eed8:	b043      	add	sp, #268	; 0x10c
    eeda:	bc3c      	pop	{r2, r3, r4, r5}
    eedc:	4690      	mov	r8, r2
    eede:	4699      	mov	r9, r3
    eee0:	46a2      	mov	sl, r4
    eee2:	46ab      	mov	fp, r5
    eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eee6:	003a      	movs	r2, r7
    eee8:	4659      	mov	r1, fp
    eeea:	9806      	ldr	r0, [sp, #24]
    eeec:	f004 f98c 	bl	13208 <__sprint_r>
    eef0:	2800      	cmp	r0, #0
    eef2:	d001      	beq.n	eef8 <_vfprintf_r+0x180>
    eef4:	f000 fc5b 	bl	f7ae <_vfprintf_r+0xa36>
    eef8:	ae32      	add	r6, sp, #200	; 0xc8
    eefa:	e7a1      	b.n	ee40 <_vfprintf_r+0xc8>
    eefc:	9806      	ldr	r0, [sp, #24]
    eefe:	f002 fcad 	bl	1185c <__sinit>
    ef02:	e755      	b.n	edb0 <_vfprintf_r+0x38>
    ef04:	9c07      	ldr	r4, [sp, #28]
    ef06:	e7a0      	b.n	ee4a <_vfprintf_r+0xd2>
    ef08:	9b07      	ldr	r3, [sp, #28]
    ef0a:	2101      	movs	r1, #1
    ef0c:	781b      	ldrb	r3, [r3, #0]
    ef0e:	202b      	movs	r0, #43	; 0x2b
    ef10:	e7b2      	b.n	ee78 <_vfprintf_r+0x100>
    ef12:	9b07      	ldr	r3, [sp, #28]
    ef14:	1c5a      	adds	r2, r3, #1
    ef16:	781b      	ldrb	r3, [r3, #0]
    ef18:	4690      	mov	r8, r2
    ef1a:	2b2a      	cmp	r3, #42	; 0x2a
    ef1c:	d101      	bne.n	ef22 <_vfprintf_r+0x1aa>
    ef1e:	f001 f9f5 	bl	1030c <_vfprintf_r+0x1594>
    ef22:	001a      	movs	r2, r3
    ef24:	2500      	movs	r5, #0
    ef26:	3a30      	subs	r2, #48	; 0x30
    ef28:	46aa      	mov	sl, r5
    ef2a:	2a09      	cmp	r2, #9
    ef2c:	d901      	bls.n	ef32 <_vfprintf_r+0x1ba>
    ef2e:	f001 f97e 	bl	1022e <_vfprintf_r+0x14b6>
    ef32:	0025      	movs	r5, r4
    ef34:	4653      	mov	r3, sl
    ef36:	4644      	mov	r4, r8
    ef38:	468a      	mov	sl, r1
    ef3a:	4680      	mov	r8, r0
    ef3c:	0099      	lsls	r1, r3, #2
    ef3e:	18cb      	adds	r3, r1, r3
    ef40:	7820      	ldrb	r0, [r4, #0]
    ef42:	005b      	lsls	r3, r3, #1
    ef44:	189b      	adds	r3, r3, r2
    ef46:	0002      	movs	r2, r0
    ef48:	1c61      	adds	r1, r4, #1
    ef4a:	3a30      	subs	r2, #48	; 0x30
    ef4c:	000c      	movs	r4, r1
    ef4e:	2a09      	cmp	r2, #9
    ef50:	d9f4      	bls.n	ef3c <_vfprintf_r+0x1c4>
    ef52:	9107      	str	r1, [sp, #28]
    ef54:	002c      	movs	r4, r5
    ef56:	4651      	mov	r1, sl
    ef58:	469a      	mov	sl, r3
    ef5a:	0003      	movs	r3, r0
    ef5c:	4640      	mov	r0, r8
    ef5e:	e78e      	b.n	ee7e <_vfprintf_r+0x106>
    ef60:	2380      	movs	r3, #128	; 0x80
    ef62:	431c      	orrs	r4, r3
    ef64:	9b07      	ldr	r3, [sp, #28]
    ef66:	781b      	ldrb	r3, [r3, #0]
    ef68:	e786      	b.n	ee78 <_vfprintf_r+0x100>
    ef6a:	9312      	str	r3, [sp, #72]	; 0x48
    ef6c:	2900      	cmp	r1, #0
    ef6e:	d001      	beq.n	ef74 <_vfprintf_r+0x1fc>
    ef70:	f001 f9f6 	bl	10360 <_vfprintf_r+0x15e8>
    ef74:	2310      	movs	r3, #16
    ef76:	431c      	orrs	r4, r3
    ef78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ef7a:	06a3      	lsls	r3, r4, #26
    ef7c:	d501      	bpl.n	ef82 <_vfprintf_r+0x20a>
    ef7e:	f000 fe5f 	bl	fc40 <_vfprintf_r+0xec8>
    ef82:	06e3      	lsls	r3, r4, #27
    ef84:	d501      	bpl.n	ef8a <_vfprintf_r+0x212>
    ef86:	f000 fd38 	bl	f9fa <_vfprintf_r+0xc82>
    ef8a:	0663      	lsls	r3, r4, #25
    ef8c:	d401      	bmi.n	ef92 <_vfprintf_r+0x21a>
    ef8e:	f000 fd34 	bl	f9fa <_vfprintf_r+0xc82>
    ef92:	2100      	movs	r1, #0
    ef94:	5e53      	ldrsh	r3, [r2, r1]
    ef96:	930c      	str	r3, [sp, #48]	; 0x30
    ef98:	3204      	adds	r2, #4
    ef9a:	17db      	asrs	r3, r3, #31
    ef9c:	930d      	str	r3, [sp, #52]	; 0x34
    ef9e:	920f      	str	r2, [sp, #60]	; 0x3c
    efa0:	2b00      	cmp	r3, #0
    efa2:	da01      	bge.n	efa8 <_vfprintf_r+0x230>
    efa4:	f000 fe7b 	bl	fc9e <_vfprintf_r+0xf26>
    efa8:	990c      	ldr	r1, [sp, #48]	; 0x30
    efaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    efac:	0008      	movs	r0, r1
    efae:	ab16      	add	r3, sp, #88	; 0x58
    efb0:	7fdb      	ldrb	r3, [r3, #31]
    efb2:	4310      	orrs	r0, r2
    efb4:	4698      	mov	r8, r3
    efb6:	0002      	movs	r2, r0
    efb8:	2301      	movs	r3, #1
    efba:	4651      	mov	r1, sl
    efbc:	3101      	adds	r1, #1
    efbe:	d100      	bne.n	efc2 <_vfprintf_r+0x24a>
    efc0:	e122      	b.n	f208 <_vfprintf_r+0x490>
    efc2:	2180      	movs	r1, #128	; 0x80
    efc4:	0020      	movs	r0, r4
    efc6:	4388      	bics	r0, r1
    efc8:	9009      	str	r0, [sp, #36]	; 0x24
    efca:	2a00      	cmp	r2, #0
    efcc:	d000      	beq.n	efd0 <_vfprintf_r+0x258>
    efce:	e11f      	b.n	f210 <_vfprintf_r+0x498>
    efd0:	4652      	mov	r2, sl
    efd2:	2a00      	cmp	r2, #0
    efd4:	d000      	beq.n	efd8 <_vfprintf_r+0x260>
    efd6:	e3ec      	b.n	f7b2 <_vfprintf_r+0xa3a>
    efd8:	2b00      	cmp	r3, #0
    efda:	d001      	beq.n	efe0 <_vfprintf_r+0x268>
    efdc:	f000 fcbe 	bl	f95c <_vfprintf_r+0xbe4>
    efe0:	2001      	movs	r0, #1
    efe2:	ab32      	add	r3, sp, #200	; 0xc8
    efe4:	4020      	ands	r0, r4
    efe6:	900e      	str	r0, [sp, #56]	; 0x38
    efe8:	9311      	str	r3, [sp, #68]	; 0x44
    efea:	d008      	beq.n	effe <_vfprintf_r+0x286>
    efec:	2327      	movs	r3, #39	; 0x27
    efee:	2130      	movs	r1, #48	; 0x30
    eff0:	aa28      	add	r2, sp, #160	; 0xa0
    eff2:	54d1      	strb	r1, [r2, r3]
    eff4:	aa16      	add	r2, sp, #88	; 0x58
    eff6:	4694      	mov	ip, r2
    eff8:	3348      	adds	r3, #72	; 0x48
    effa:	4463      	add	r3, ip
    effc:	9311      	str	r3, [sp, #68]	; 0x44
    effe:	4653      	mov	r3, sl
    f000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f002:	9308      	str	r3, [sp, #32]
    f004:	4592      	cmp	sl, r2
    f006:	da00      	bge.n	f00a <_vfprintf_r+0x292>
    f008:	9208      	str	r2, [sp, #32]
    f00a:	2300      	movs	r3, #0
    f00c:	9313      	str	r3, [sp, #76]	; 0x4c
    f00e:	4643      	mov	r3, r8
    f010:	2b00      	cmp	r3, #0
    f012:	d002      	beq.n	f01a <_vfprintf_r+0x2a2>
    f014:	9b08      	ldr	r3, [sp, #32]
    f016:	3301      	adds	r3, #1
    f018:	9308      	str	r3, [sp, #32]
    f01a:	2302      	movs	r3, #2
    f01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f01e:	401a      	ands	r2, r3
    f020:	4691      	mov	r9, r2
    f022:	d002      	beq.n	f02a <_vfprintf_r+0x2b2>
    f024:	9b08      	ldr	r3, [sp, #32]
    f026:	3302      	adds	r3, #2
    f028:	9308      	str	r3, [sp, #32]
    f02a:	2384      	movs	r3, #132	; 0x84
    f02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f02e:	401a      	ands	r2, r3
    f030:	9210      	str	r2, [sp, #64]	; 0x40
    f032:	d000      	beq.n	f036 <_vfprintf_r+0x2be>
    f034:	e214      	b.n	f460 <_vfprintf_r+0x6e8>
    f036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f038:	9a08      	ldr	r2, [sp, #32]
    f03a:	1a9c      	subs	r4, r3, r2
    f03c:	2c00      	cmp	r4, #0
    f03e:	dc00      	bgt.n	f042 <_vfprintf_r+0x2ca>
    f040:	e20e      	b.n	f460 <_vfprintf_r+0x6e8>
    f042:	491e      	ldr	r1, [pc, #120]	; (f0bc <_vfprintf_r+0x344>)
    f044:	68ba      	ldr	r2, [r7, #8]
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	4688      	mov	r8, r1
    f04a:	2c10      	cmp	r4, #16
    f04c:	dd21      	ble.n	f092 <_vfprintf_r+0x31a>
    f04e:	0031      	movs	r1, r6
    f050:	2510      	movs	r5, #16
    f052:	465e      	mov	r6, fp
    f054:	e003      	b.n	f05e <_vfprintf_r+0x2e6>
    f056:	3c10      	subs	r4, #16
    f058:	3108      	adds	r1, #8
    f05a:	2c10      	cmp	r4, #16
    f05c:	dd17      	ble.n	f08e <_vfprintf_r+0x316>
    f05e:	4640      	mov	r0, r8
    f060:	3210      	adds	r2, #16
    f062:	3301      	adds	r3, #1
    f064:	6008      	str	r0, [r1, #0]
    f066:	604d      	str	r5, [r1, #4]
    f068:	60ba      	str	r2, [r7, #8]
    f06a:	607b      	str	r3, [r7, #4]
    f06c:	2b07      	cmp	r3, #7
    f06e:	ddf2      	ble.n	f056 <_vfprintf_r+0x2de>
    f070:	003a      	movs	r2, r7
    f072:	0031      	movs	r1, r6
    f074:	9806      	ldr	r0, [sp, #24]
    f076:	f004 f8c7 	bl	13208 <__sprint_r>
    f07a:	2800      	cmp	r0, #0
    f07c:	d001      	beq.n	f082 <_vfprintf_r+0x30a>
    f07e:	f000 fc81 	bl	f984 <_vfprintf_r+0xc0c>
    f082:	3c10      	subs	r4, #16
    f084:	68ba      	ldr	r2, [r7, #8]
    f086:	687b      	ldr	r3, [r7, #4]
    f088:	a932      	add	r1, sp, #200	; 0xc8
    f08a:	2c10      	cmp	r4, #16
    f08c:	dce7      	bgt.n	f05e <_vfprintf_r+0x2e6>
    f08e:	46b3      	mov	fp, r6
    f090:	000e      	movs	r6, r1
    f092:	4641      	mov	r1, r8
    f094:	6074      	str	r4, [r6, #4]
    f096:	3301      	adds	r3, #1
    f098:	18a4      	adds	r4, r4, r2
    f09a:	6031      	str	r1, [r6, #0]
    f09c:	60bc      	str	r4, [r7, #8]
    f09e:	607b      	str	r3, [r7, #4]
    f0a0:	2b07      	cmp	r3, #7
    f0a2:	dd01      	ble.n	f0a8 <_vfprintf_r+0x330>
    f0a4:	f000 fc60 	bl	f968 <_vfprintf_r+0xbf0>
    f0a8:	ab16      	add	r3, sp, #88	; 0x58
    f0aa:	7fdb      	ldrb	r3, [r3, #31]
    f0ac:	3608      	adds	r6, #8
    f0ae:	4698      	mov	r8, r3
    f0b0:	e1d7      	b.n	f462 <_vfprintf_r+0x6ea>
    f0b2:	46c0      	nop			; (mov r8, r8)
    f0b4:	ffffdfff 	.word	0xffffdfff
    f0b8:	00014a00 	.word	0x00014a00
    f0bc:	00014ba8 	.word	0x00014ba8
    f0c0:	9312      	str	r3, [sp, #72]	; 0x48
    f0c2:	2900      	cmp	r1, #0
    f0c4:	d001      	beq.n	f0ca <_vfprintf_r+0x352>
    f0c6:	f001 f947 	bl	10358 <_vfprintf_r+0x15e0>
    f0ca:	2207      	movs	r2, #7
    f0cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f0ce:	3307      	adds	r3, #7
    f0d0:	4393      	bics	r3, r2
    f0d2:	3201      	adds	r2, #1
    f0d4:	4694      	mov	ip, r2
    f0d6:	449c      	add	ip, r3
    f0d8:	4662      	mov	r2, ip
    f0da:	920f      	str	r2, [sp, #60]	; 0x3c
    f0dc:	681a      	ldr	r2, [r3, #0]
    f0de:	9215      	str	r2, [sp, #84]	; 0x54
    f0e0:	685b      	ldr	r3, [r3, #4]
    f0e2:	2201      	movs	r2, #1
    f0e4:	9316      	str	r3, [sp, #88]	; 0x58
    f0e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f0e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    f0ea:	005b      	lsls	r3, r3, #1
    f0ec:	085b      	lsrs	r3, r3, #1
    f0ee:	4698      	mov	r8, r3
    f0f0:	4252      	negs	r2, r2
    f0f2:	4bd7      	ldr	r3, [pc, #860]	; (f450 <_vfprintf_r+0x6d8>)
    f0f4:	0028      	movs	r0, r5
    f0f6:	4641      	mov	r1, r8
    f0f8:	f004 fad2 	bl	136a0 <__aeabi_dcmpun>
    f0fc:	2800      	cmp	r0, #0
    f0fe:	d001      	beq.n	f104 <_vfprintf_r+0x38c>
    f100:	f000 fde0 	bl	fcc4 <_vfprintf_r+0xf4c>
    f104:	2201      	movs	r2, #1
    f106:	4bd2      	ldr	r3, [pc, #840]	; (f450 <_vfprintf_r+0x6d8>)
    f108:	4252      	negs	r2, r2
    f10a:	0028      	movs	r0, r5
    f10c:	4641      	mov	r1, r8
    f10e:	f7fd fc13 	bl	c938 <__aeabi_dcmple>
    f112:	2800      	cmp	r0, #0
    f114:	d001      	beq.n	f11a <_vfprintf_r+0x3a2>
    f116:	f000 fdd5 	bl	fcc4 <_vfprintf_r+0xf4c>
    f11a:	2200      	movs	r2, #0
    f11c:	2300      	movs	r3, #0
    f11e:	9815      	ldr	r0, [sp, #84]	; 0x54
    f120:	9916      	ldr	r1, [sp, #88]	; 0x58
    f122:	f7fd fbff 	bl	c924 <__aeabi_dcmplt>
    f126:	2800      	cmp	r0, #0
    f128:	d001      	beq.n	f12e <_vfprintf_r+0x3b6>
    f12a:	f000 fffa 	bl	10122 <_vfprintf_r+0x13aa>
    f12e:	ab16      	add	r3, sp, #88	; 0x58
    f130:	7fdb      	ldrb	r3, [r3, #31]
    f132:	4698      	mov	r8, r3
    f134:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f136:	2b47      	cmp	r3, #71	; 0x47
    f138:	dc01      	bgt.n	f13e <_vfprintf_r+0x3c6>
    f13a:	f000 feaa 	bl	fe92 <_vfprintf_r+0x111a>
    f13e:	4bc5      	ldr	r3, [pc, #788]	; (f454 <_vfprintf_r+0x6dc>)
    f140:	9311      	str	r3, [sp, #68]	; 0x44
    f142:	2380      	movs	r3, #128	; 0x80
    f144:	439c      	bics	r4, r3
    f146:	9409      	str	r4, [sp, #36]	; 0x24
    f148:	2303      	movs	r3, #3
    f14a:	9308      	str	r3, [sp, #32]
    f14c:	930e      	str	r3, [sp, #56]	; 0x38
    f14e:	2300      	movs	r3, #0
    f150:	469a      	mov	sl, r3
    f152:	9313      	str	r3, [sp, #76]	; 0x4c
    f154:	e75b      	b.n	f00e <_vfprintf_r+0x296>
    f156:	2308      	movs	r3, #8
    f158:	431c      	orrs	r4, r3
    f15a:	9b07      	ldr	r3, [sp, #28]
    f15c:	781b      	ldrb	r3, [r3, #0]
    f15e:	e68b      	b.n	ee78 <_vfprintf_r+0x100>
    f160:	2200      	movs	r2, #0
    f162:	9d07      	ldr	r5, [sp, #28]
    f164:	3b30      	subs	r3, #48	; 0x30
    f166:	46a8      	mov	r8, r5
    f168:	920b      	str	r2, [sp, #44]	; 0x2c
    f16a:	001a      	movs	r2, r3
    f16c:	0003      	movs	r3, r0
    f16e:	9408      	str	r4, [sp, #32]
    f170:	4640      	mov	r0, r8
    f172:	002c      	movs	r4, r5
    f174:	4698      	mov	r8, r3
    f176:	4655      	mov	r5, sl
    f178:	468a      	mov	sl, r1
    f17a:	0011      	movs	r1, r2
    f17c:	2200      	movs	r2, #0
    f17e:	0093      	lsls	r3, r2, #2
    f180:	189a      	adds	r2, r3, r2
    f182:	7803      	ldrb	r3, [r0, #0]
    f184:	0052      	lsls	r2, r2, #1
    f186:	188a      	adds	r2, r1, r2
    f188:	0019      	movs	r1, r3
    f18a:	3401      	adds	r4, #1
    f18c:	3930      	subs	r1, #48	; 0x30
    f18e:	0020      	movs	r0, r4
    f190:	2909      	cmp	r1, #9
    f192:	d9f4      	bls.n	f17e <_vfprintf_r+0x406>
    f194:	9407      	str	r4, [sp, #28]
    f196:	4651      	mov	r1, sl
    f198:	9c08      	ldr	r4, [sp, #32]
    f19a:	920b      	str	r2, [sp, #44]	; 0x2c
    f19c:	4640      	mov	r0, r8
    f19e:	46aa      	mov	sl, r5
    f1a0:	e66d      	b.n	ee7e <_vfprintf_r+0x106>
    f1a2:	2900      	cmp	r1, #0
    f1a4:	d001      	beq.n	f1aa <_vfprintf_r+0x432>
    f1a6:	f001 f8ce 	bl	10346 <_vfprintf_r+0x15ce>
    f1aa:	06a3      	lsls	r3, r4, #26
    f1ac:	d501      	bpl.n	f1b2 <_vfprintf_r+0x43a>
    f1ae:	f000 fe65 	bl	fe7c <_vfprintf_r+0x1104>
    f1b2:	06e3      	lsls	r3, r4, #27
    f1b4:	d500      	bpl.n	f1b8 <_vfprintf_r+0x440>
    f1b6:	e142      	b.n	f43e <_vfprintf_r+0x6c6>
    f1b8:	0663      	lsls	r3, r4, #25
    f1ba:	d400      	bmi.n	f1be <_vfprintf_r+0x446>
    f1bc:	e13f      	b.n	f43e <_vfprintf_r+0x6c6>
    f1be:	4669      	mov	r1, sp
    f1c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f1c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    f1c4:	681a      	ldr	r2, [r3, #0]
    f1c6:	3304      	adds	r3, #4
    f1c8:	9208      	str	r2, [sp, #32]
    f1ca:	8011      	strh	r1, [r2, #0]
    f1cc:	930f      	str	r3, [sp, #60]	; 0x3c
    f1ce:	e61a      	b.n	ee06 <_vfprintf_r+0x8e>
    f1d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f1d2:	2230      	movs	r2, #48	; 0x30
    f1d4:	680b      	ldr	r3, [r1, #0]
    f1d6:	930c      	str	r3, [sp, #48]	; 0x30
    f1d8:	2300      	movs	r3, #0
    f1da:	930d      	str	r3, [sp, #52]	; 0x34
    f1dc:	3302      	adds	r3, #2
    f1de:	431c      	orrs	r4, r3
    f1e0:	ab1e      	add	r3, sp, #120	; 0x78
    f1e2:	701a      	strb	r2, [r3, #0]
    f1e4:	3248      	adds	r2, #72	; 0x48
    f1e6:	705a      	strb	r2, [r3, #1]
    f1e8:	000b      	movs	r3, r1
    f1ea:	3304      	adds	r3, #4
    f1ec:	930f      	str	r3, [sp, #60]	; 0x3c
    f1ee:	4b9a      	ldr	r3, [pc, #616]	; (f458 <_vfprintf_r+0x6e0>)
    f1f0:	9212      	str	r2, [sp, #72]	; 0x48
    f1f2:	9318      	str	r3, [sp, #96]	; 0x60
    f1f4:	2302      	movs	r3, #2
    f1f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f1f8:	2100      	movs	r1, #0
    f1fa:	a816      	add	r0, sp, #88	; 0x58
    f1fc:	77c1      	strb	r1, [r0, #31]
    f1fe:	4688      	mov	r8, r1
    f200:	4651      	mov	r1, sl
    f202:	3101      	adds	r1, #1
    f204:	d000      	beq.n	f208 <_vfprintf_r+0x490>
    f206:	e6dc      	b.n	efc2 <_vfprintf_r+0x24a>
    f208:	2a00      	cmp	r2, #0
    f20a:	d100      	bne.n	f20e <_vfprintf_r+0x496>
    f20c:	e2d2      	b.n	f7b4 <_vfprintf_r+0xa3c>
    f20e:	9409      	str	r4, [sp, #36]	; 0x24
    f210:	2b01      	cmp	r3, #1
    f212:	d100      	bne.n	f216 <_vfprintf_r+0x49e>
    f214:	e37b      	b.n	f90e <_vfprintf_r+0xb96>
    f216:	2b02      	cmp	r3, #2
    f218:	d000      	beq.n	f21c <_vfprintf_r+0x4a4>
    f21a:	e300      	b.n	f81e <_vfprintf_r+0xaa6>
    f21c:	9c18      	ldr	r4, [sp, #96]	; 0x60
    f21e:	200f      	movs	r0, #15
    f220:	46a1      	mov	r9, r4
    f222:	46b4      	mov	ip, r6
    f224:	ab32      	add	r3, sp, #200	; 0xc8
    f226:	0019      	movs	r1, r3
    f228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f22c:	0004      	movs	r4, r0
    f22e:	464d      	mov	r5, r9
    f230:	4014      	ands	r4, r2
    f232:	5d2c      	ldrb	r4, [r5, r4]
    f234:	071e      	lsls	r6, r3, #28
    f236:	0915      	lsrs	r5, r2, #4
    f238:	3901      	subs	r1, #1
    f23a:	432e      	orrs	r6, r5
    f23c:	700c      	strb	r4, [r1, #0]
    f23e:	091c      	lsrs	r4, r3, #4
    f240:	0023      	movs	r3, r4
    f242:	0034      	movs	r4, r6
    f244:	0032      	movs	r2, r6
    f246:	431c      	orrs	r4, r3
    f248:	d1f0      	bne.n	f22c <_vfprintf_r+0x4b4>
    f24a:	920c      	str	r2, [sp, #48]	; 0x30
    f24c:	930d      	str	r3, [sp, #52]	; 0x34
    f24e:	ab32      	add	r3, sp, #200	; 0xc8
    f250:	1a5b      	subs	r3, r3, r1
    f252:	9111      	str	r1, [sp, #68]	; 0x44
    f254:	4666      	mov	r6, ip
    f256:	930e      	str	r3, [sp, #56]	; 0x38
    f258:	e6d1      	b.n	effe <_vfprintf_r+0x286>
    f25a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f25c:	9312      	str	r3, [sp, #72]	; 0x48
    f25e:	6813      	ldr	r3, [r2, #0]
    f260:	2120      	movs	r1, #32
    f262:	9308      	str	r3, [sp, #32]
    f264:	466b      	mov	r3, sp
    f266:	185b      	adds	r3, r3, r1
    f268:	781b      	ldrb	r3, [r3, #0]
    f26a:	ad28      	add	r5, sp, #160	; 0xa0
    f26c:	702b      	strb	r3, [r5, #0]
    f26e:	2300      	movs	r3, #0
    f270:	a916      	add	r1, sp, #88	; 0x58
    f272:	77cb      	strb	r3, [r1, #31]
    f274:	0013      	movs	r3, r2
    f276:	3304      	adds	r3, #4
    f278:	930f      	str	r3, [sp, #60]	; 0x3c
    f27a:	2300      	movs	r3, #0
    f27c:	9409      	str	r4, [sp, #36]	; 0x24
    f27e:	4698      	mov	r8, r3
    f280:	3301      	adds	r3, #1
    f282:	9308      	str	r3, [sp, #32]
    f284:	930e      	str	r3, [sp, #56]	; 0x38
    f286:	2300      	movs	r3, #0
    f288:	9511      	str	r5, [sp, #68]	; 0x44
    f28a:	469a      	mov	sl, r3
    f28c:	9313      	str	r3, [sp, #76]	; 0x4c
    f28e:	e6c4      	b.n	f01a <_vfprintf_r+0x2a2>
    f290:	9312      	str	r3, [sp, #72]	; 0x48
    f292:	2900      	cmp	r1, #0
    f294:	d100      	bne.n	f298 <_vfprintf_r+0x520>
    f296:	e66f      	b.n	ef78 <_vfprintf_r+0x200>
    f298:	ab16      	add	r3, sp, #88	; 0x58
    f29a:	77d8      	strb	r0, [r3, #31]
    f29c:	e66c      	b.n	ef78 <_vfprintf_r+0x200>
    f29e:	4663      	mov	r3, ip
    f2a0:	431c      	orrs	r4, r3
    f2a2:	9b07      	ldr	r3, [sp, #28]
    f2a4:	781b      	ldrb	r3, [r3, #0]
    f2a6:	e5e7      	b.n	ee78 <_vfprintf_r+0x100>
    f2a8:	9b07      	ldr	r3, [sp, #28]
    f2aa:	781b      	ldrb	r3, [r3, #0]
    f2ac:	2b6c      	cmp	r3, #108	; 0x6c
    f2ae:	d101      	bne.n	f2b4 <_vfprintf_r+0x53c>
    f2b0:	f000 fe33 	bl	ff1a <_vfprintf_r+0x11a2>
    f2b4:	2210      	movs	r2, #16
    f2b6:	4314      	orrs	r4, r2
    f2b8:	e5de      	b.n	ee78 <_vfprintf_r+0x100>
    f2ba:	9312      	str	r3, [sp, #72]	; 0x48
    f2bc:	2310      	movs	r3, #16
    f2be:	431c      	orrs	r4, r3
    f2c0:	06a3      	lsls	r3, r4, #26
    f2c2:	d501      	bpl.n	f2c8 <_vfprintf_r+0x550>
    f2c4:	f000 fc9c 	bl	fc00 <_vfprintf_r+0xe88>
    f2c8:	06e3      	lsls	r3, r4, #27
    f2ca:	d500      	bpl.n	f2ce <_vfprintf_r+0x556>
    f2cc:	e392      	b.n	f9f4 <_vfprintf_r+0xc7c>
    f2ce:	0663      	lsls	r3, r4, #25
    f2d0:	d400      	bmi.n	f2d4 <_vfprintf_r+0x55c>
    f2d2:	e38f      	b.n	f9f4 <_vfprintf_r+0xc7c>
    f2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f2d6:	881a      	ldrh	r2, [r3, #0]
    f2d8:	920c      	str	r2, [sp, #48]	; 0x30
    f2da:	2200      	movs	r2, #0
    f2dc:	3304      	adds	r3, #4
    f2de:	920d      	str	r2, [sp, #52]	; 0x34
    f2e0:	930f      	str	r3, [sp, #60]	; 0x3c
    f2e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f2e4:	2301      	movs	r3, #1
    f2e6:	e787      	b.n	f1f8 <_vfprintf_r+0x480>
    f2e8:	9312      	str	r3, [sp, #72]	; 0x48
    f2ea:	2900      	cmp	r1, #0
    f2ec:	d001      	beq.n	f2f2 <_vfprintf_r+0x57a>
    f2ee:	f001 f83f 	bl	10370 <_vfprintf_r+0x15f8>
    f2f2:	4b5a      	ldr	r3, [pc, #360]	; (f45c <_vfprintf_r+0x6e4>)
    f2f4:	9318      	str	r3, [sp, #96]	; 0x60
    f2f6:	06a3      	lsls	r3, r4, #26
    f2f8:	d501      	bpl.n	f2fe <_vfprintf_r+0x586>
    f2fa:	f000 fc72 	bl	fbe2 <_vfprintf_r+0xe6a>
    f2fe:	06e3      	lsls	r3, r4, #27
    f300:	d500      	bpl.n	f304 <_vfprintf_r+0x58c>
    f302:	e374      	b.n	f9ee <_vfprintf_r+0xc76>
    f304:	0663      	lsls	r3, r4, #25
    f306:	d400      	bmi.n	f30a <_vfprintf_r+0x592>
    f308:	e371      	b.n	f9ee <_vfprintf_r+0xc76>
    f30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f30c:	881a      	ldrh	r2, [r3, #0]
    f30e:	920c      	str	r2, [sp, #48]	; 0x30
    f310:	2200      	movs	r2, #0
    f312:	3304      	adds	r3, #4
    f314:	920d      	str	r2, [sp, #52]	; 0x34
    f316:	930f      	str	r3, [sp, #60]	; 0x3c
    f318:	07e3      	lsls	r3, r4, #31
    f31a:	d400      	bmi.n	f31e <_vfprintf_r+0x5a6>
    f31c:	e35f      	b.n	f9de <_vfprintf_r+0xc66>
    f31e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f322:	000b      	movs	r3, r1
    f324:	4313      	orrs	r3, r2
    f326:	001a      	movs	r2, r3
    f328:	2302      	movs	r3, #2
    f32a:	2a00      	cmp	r2, #0
    f32c:	d100      	bne.n	f330 <_vfprintf_r+0x5b8>
    f32e:	e763      	b.n	f1f8 <_vfprintf_r+0x480>
    f330:	2030      	movs	r0, #48	; 0x30
    f332:	a91e      	add	r1, sp, #120	; 0x78
    f334:	7008      	strb	r0, [r1, #0]
    f336:	2548      	movs	r5, #72	; 0x48
    f338:	4668      	mov	r0, sp
    f33a:	1940      	adds	r0, r0, r5
    f33c:	7800      	ldrb	r0, [r0, #0]
    f33e:	431c      	orrs	r4, r3
    f340:	7048      	strb	r0, [r1, #1]
    f342:	e759      	b.n	f1f8 <_vfprintf_r+0x480>
    f344:	9312      	str	r3, [sp, #72]	; 0x48
    f346:	2310      	movs	r3, #16
    f348:	431c      	orrs	r4, r3
    f34a:	06a3      	lsls	r3, r4, #26
    f34c:	d501      	bpl.n	f352 <_vfprintf_r+0x5da>
    f34e:	f000 fc85 	bl	fc5c <_vfprintf_r+0xee4>
    f352:	06e3      	lsls	r3, r4, #27
    f354:	d500      	bpl.n	f358 <_vfprintf_r+0x5e0>
    f356:	e354      	b.n	fa02 <_vfprintf_r+0xc8a>
    f358:	0663      	lsls	r3, r4, #25
    f35a:	d400      	bmi.n	f35e <_vfprintf_r+0x5e6>
    f35c:	e351      	b.n	fa02 <_vfprintf_r+0xc8a>
    f35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f360:	881a      	ldrh	r2, [r3, #0]
    f362:	920c      	str	r2, [sp, #48]	; 0x30
    f364:	2200      	movs	r2, #0
    f366:	3304      	adds	r3, #4
    f368:	920d      	str	r2, [sp, #52]	; 0x34
    f36a:	930f      	str	r3, [sp, #60]	; 0x3c
    f36c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f36e:	2300      	movs	r3, #0
    f370:	e742      	b.n	f1f8 <_vfprintf_r+0x480>
    f372:	9312      	str	r3, [sp, #72]	; 0x48
    f374:	2900      	cmp	r1, #0
    f376:	d001      	beq.n	f37c <_vfprintf_r+0x604>
    f378:	f000 fff6 	bl	10368 <_vfprintf_r+0x15f0>
    f37c:	4b36      	ldr	r3, [pc, #216]	; (f458 <_vfprintf_r+0x6e0>)
    f37e:	9318      	str	r3, [sp, #96]	; 0x60
    f380:	e7b9      	b.n	f2f6 <_vfprintf_r+0x57e>
    f382:	9b07      	ldr	r3, [sp, #28]
    f384:	781b      	ldrb	r3, [r3, #0]
    f386:	2800      	cmp	r0, #0
    f388:	d000      	beq.n	f38c <_vfprintf_r+0x614>
    f38a:	e575      	b.n	ee78 <_vfprintf_r+0x100>
    f38c:	2101      	movs	r1, #1
    f38e:	3020      	adds	r0, #32
    f390:	e572      	b.n	ee78 <_vfprintf_r+0x100>
    f392:	464b      	mov	r3, r9
    f394:	431c      	orrs	r4, r3
    f396:	9b07      	ldr	r3, [sp, #28]
    f398:	781b      	ldrb	r3, [r3, #0]
    f39a:	e56d      	b.n	ee78 <_vfprintf_r+0x100>
    f39c:	9312      	str	r3, [sp, #72]	; 0x48
    f39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f3a0:	a916      	add	r1, sp, #88	; 0x58
    f3a2:	1d1d      	adds	r5, r3, #4
    f3a4:	681b      	ldr	r3, [r3, #0]
    f3a6:	001a      	movs	r2, r3
    f3a8:	9311      	str	r3, [sp, #68]	; 0x44
    f3aa:	2300      	movs	r3, #0
    f3ac:	77cb      	strb	r3, [r1, #31]
    f3ae:	2a00      	cmp	r2, #0
    f3b0:	d101      	bne.n	f3b6 <_vfprintf_r+0x63e>
    f3b2:	f000 fe78 	bl	100a6 <_vfprintf_r+0x132e>
    f3b6:	4653      	mov	r3, sl
    f3b8:	3301      	adds	r3, #1
    f3ba:	d101      	bne.n	f3c0 <_vfprintf_r+0x648>
    f3bc:	f000 fdc6 	bl	ff4c <_vfprintf_r+0x11d4>
    f3c0:	4652      	mov	r2, sl
    f3c2:	2100      	movs	r1, #0
    f3c4:	9811      	ldr	r0, [sp, #68]	; 0x44
    f3c6:	f003 f8a1 	bl	1250c <memchr>
    f3ca:	2800      	cmp	r0, #0
    f3cc:	d101      	bne.n	f3d2 <_vfprintf_r+0x65a>
    f3ce:	f000 fef2 	bl	101b6 <_vfprintf_r+0x143e>
    f3d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3d4:	1ac3      	subs	r3, r0, r3
    f3d6:	001a      	movs	r2, r3
    f3d8:	930e      	str	r3, [sp, #56]	; 0x38
    f3da:	43db      	mvns	r3, r3
    f3dc:	17db      	asrs	r3, r3, #31
    f3de:	401a      	ands	r2, r3
    f3e0:	ab16      	add	r3, sp, #88	; 0x58
    f3e2:	7fdb      	ldrb	r3, [r3, #31]
    f3e4:	9208      	str	r2, [sp, #32]
    f3e6:	4698      	mov	r8, r3
    f3e8:	2300      	movs	r3, #0
    f3ea:	950f      	str	r5, [sp, #60]	; 0x3c
    f3ec:	9409      	str	r4, [sp, #36]	; 0x24
    f3ee:	469a      	mov	sl, r3
    f3f0:	9313      	str	r3, [sp, #76]	; 0x4c
    f3f2:	e60c      	b.n	f00e <_vfprintf_r+0x296>
    f3f4:	2301      	movs	r3, #1
    f3f6:	431c      	orrs	r4, r3
    f3f8:	9b07      	ldr	r3, [sp, #28]
    f3fa:	781b      	ldrb	r3, [r3, #0]
    f3fc:	e53c      	b.n	ee78 <_vfprintf_r+0x100>
    f3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f400:	1d1a      	adds	r2, r3, #4
    f402:	681b      	ldr	r3, [r3, #0]
    f404:	930b      	str	r3, [sp, #44]	; 0x2c
    f406:	2b00      	cmp	r3, #0
    f408:	da00      	bge.n	f40c <_vfprintf_r+0x694>
    f40a:	e541      	b.n	ee90 <_vfprintf_r+0x118>
    f40c:	9b07      	ldr	r3, [sp, #28]
    f40e:	920f      	str	r2, [sp, #60]	; 0x3c
    f410:	781b      	ldrb	r3, [r3, #0]
    f412:	e531      	b.n	ee78 <_vfprintf_r+0x100>
    f414:	9312      	str	r3, [sp, #72]	; 0x48
    f416:	e798      	b.n	f34a <_vfprintf_r+0x5d2>
    f418:	9312      	str	r3, [sp, #72]	; 0x48
    f41a:	e751      	b.n	f2c0 <_vfprintf_r+0x548>
    f41c:	9312      	str	r3, [sp, #72]	; 0x48
    f41e:	2900      	cmp	r1, #0
    f420:	d001      	beq.n	f426 <_vfprintf_r+0x6ae>
    f422:	f000 ff8c 	bl	1033e <_vfprintf_r+0x15c6>
    f426:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f428:	2b00      	cmp	r3, #0
    f42a:	d101      	bne.n	f430 <_vfprintf_r+0x6b8>
    f42c:	f000 fd1b 	bl	fe66 <_vfprintf_r+0x10ee>
    f430:	ad28      	add	r5, sp, #160	; 0xa0
    f432:	702b      	strb	r3, [r5, #0]
    f434:	2300      	movs	r3, #0
    f436:	aa16      	add	r2, sp, #88	; 0x58
    f438:	77d3      	strb	r3, [r2, #31]
    f43a:	9409      	str	r4, [sp, #36]	; 0x24
    f43c:	e71f      	b.n	f27e <_vfprintf_r+0x506>
    f43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f440:	990a      	ldr	r1, [sp, #40]	; 0x28
    f442:	6813      	ldr	r3, [r2, #0]
    f444:	6019      	str	r1, [r3, #0]
    f446:	0013      	movs	r3, r2
    f448:	3304      	adds	r3, #4
    f44a:	930f      	str	r3, [sp, #60]	; 0x3c
    f44c:	e4db      	b.n	ee06 <_vfprintf_r+0x8e>
    f44e:	46c0      	nop			; (mov r8, r8)
    f450:	7fefffff 	.word	0x7fefffff
    f454:	00014b68 	.word	0x00014b68
    f458:	00014b88 	.word	0x00014b88
    f45c:	00014b74 	.word	0x00014b74
    f460:	68bc      	ldr	r4, [r7, #8]
    f462:	4643      	mov	r3, r8
    f464:	2b00      	cmp	r3, #0
    f466:	d00f      	beq.n	f488 <_vfprintf_r+0x710>
    f468:	aa16      	add	r2, sp, #88	; 0x58
    f46a:	231f      	movs	r3, #31
    f46c:	4694      	mov	ip, r2
    f46e:	4463      	add	r3, ip
    f470:	6033      	str	r3, [r6, #0]
    f472:	2301      	movs	r3, #1
    f474:	6073      	str	r3, [r6, #4]
    f476:	687b      	ldr	r3, [r7, #4]
    f478:	3401      	adds	r4, #1
    f47a:	3301      	adds	r3, #1
    f47c:	60bc      	str	r4, [r7, #8]
    f47e:	607b      	str	r3, [r7, #4]
    f480:	2b07      	cmp	r3, #7
    f482:	dd00      	ble.n	f486 <_vfprintf_r+0x70e>
    f484:	e1ab      	b.n	f7de <_vfprintf_r+0xa66>
    f486:	3608      	adds	r6, #8
    f488:	464b      	mov	r3, r9
    f48a:	2b00      	cmp	r3, #0
    f48c:	d00c      	beq.n	f4a8 <_vfprintf_r+0x730>
    f48e:	ab1e      	add	r3, sp, #120	; 0x78
    f490:	6033      	str	r3, [r6, #0]
    f492:	2302      	movs	r3, #2
    f494:	6073      	str	r3, [r6, #4]
    f496:	687b      	ldr	r3, [r7, #4]
    f498:	3402      	adds	r4, #2
    f49a:	3301      	adds	r3, #1
    f49c:	60bc      	str	r4, [r7, #8]
    f49e:	607b      	str	r3, [r7, #4]
    f4a0:	2b07      	cmp	r3, #7
    f4a2:	dd00      	ble.n	f4a6 <_vfprintf_r+0x72e>
    f4a4:	e1a5      	b.n	f7f2 <_vfprintf_r+0xa7a>
    f4a6:	3608      	adds	r6, #8
    f4a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f4aa:	2b80      	cmp	r3, #128	; 0x80
    f4ac:	d100      	bne.n	f4b0 <_vfprintf_r+0x738>
    f4ae:	e111      	b.n	f6d4 <_vfprintf_r+0x95c>
    f4b0:	4653      	mov	r3, sl
    f4b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f4b4:	1a9d      	subs	r5, r3, r2
    f4b6:	2d00      	cmp	r5, #0
    f4b8:	dd32      	ble.n	f520 <_vfprintf_r+0x7a8>
    f4ba:	4ad3      	ldr	r2, [pc, #844]	; (f808 <_vfprintf_r+0xa90>)
    f4bc:	687b      	ldr	r3, [r7, #4]
    f4be:	4691      	mov	r9, r2
    f4c0:	2d10      	cmp	r5, #16
    f4c2:	dd22      	ble.n	f50a <_vfprintf_r+0x792>
    f4c4:	2210      	movs	r2, #16
    f4c6:	4692      	mov	sl, r2
    f4c8:	0022      	movs	r2, r4
    f4ca:	465c      	mov	r4, fp
    f4cc:	e003      	b.n	f4d6 <_vfprintf_r+0x75e>
    f4ce:	3d10      	subs	r5, #16
    f4d0:	3608      	adds	r6, #8
    f4d2:	2d10      	cmp	r5, #16
    f4d4:	dd17      	ble.n	f506 <_vfprintf_r+0x78e>
    f4d6:	4649      	mov	r1, r9
    f4d8:	6031      	str	r1, [r6, #0]
    f4da:	4651      	mov	r1, sl
    f4dc:	3210      	adds	r2, #16
    f4de:	3301      	adds	r3, #1
    f4e0:	6071      	str	r1, [r6, #4]
    f4e2:	60ba      	str	r2, [r7, #8]
    f4e4:	607b      	str	r3, [r7, #4]
    f4e6:	2b07      	cmp	r3, #7
    f4e8:	ddf1      	ble.n	f4ce <_vfprintf_r+0x756>
    f4ea:	003a      	movs	r2, r7
    f4ec:	0021      	movs	r1, r4
    f4ee:	9806      	ldr	r0, [sp, #24]
    f4f0:	f003 fe8a 	bl	13208 <__sprint_r>
    f4f4:	2800      	cmp	r0, #0
    f4f6:	d000      	beq.n	f4fa <_vfprintf_r+0x782>
    f4f8:	e128      	b.n	f74c <_vfprintf_r+0x9d4>
    f4fa:	3d10      	subs	r5, #16
    f4fc:	68ba      	ldr	r2, [r7, #8]
    f4fe:	687b      	ldr	r3, [r7, #4]
    f500:	ae32      	add	r6, sp, #200	; 0xc8
    f502:	2d10      	cmp	r5, #16
    f504:	dce7      	bgt.n	f4d6 <_vfprintf_r+0x75e>
    f506:	46a3      	mov	fp, r4
    f508:	0014      	movs	r4, r2
    f50a:	464a      	mov	r2, r9
    f50c:	1964      	adds	r4, r4, r5
    f50e:	3301      	adds	r3, #1
    f510:	6032      	str	r2, [r6, #0]
    f512:	6075      	str	r5, [r6, #4]
    f514:	60bc      	str	r4, [r7, #8]
    f516:	607b      	str	r3, [r7, #4]
    f518:	2b07      	cmp	r3, #7
    f51a:	dd00      	ble.n	f51e <_vfprintf_r+0x7a6>
    f51c:	e155      	b.n	f7ca <_vfprintf_r+0xa52>
    f51e:	3608      	adds	r6, #8
    f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f522:	05db      	lsls	r3, r3, #23
    f524:	d500      	bpl.n	f528 <_vfprintf_r+0x7b0>
    f526:	e0b1      	b.n	f68c <_vfprintf_r+0x914>
    f528:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f52a:	6033      	str	r3, [r6, #0]
    f52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f52e:	469c      	mov	ip, r3
    f530:	6073      	str	r3, [r6, #4]
    f532:	687b      	ldr	r3, [r7, #4]
    f534:	4464      	add	r4, ip
    f536:	3301      	adds	r3, #1
    f538:	60bc      	str	r4, [r7, #8]
    f53a:	607b      	str	r3, [r7, #4]
    f53c:	2b07      	cmp	r3, #7
    f53e:	dd00      	ble.n	f542 <_vfprintf_r+0x7ca>
    f540:	e099      	b.n	f676 <_vfprintf_r+0x8fe>
    f542:	3608      	adds	r6, #8
    f544:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f546:	075b      	lsls	r3, r3, #29
    f548:	d53d      	bpl.n	f5c6 <_vfprintf_r+0x84e>
    f54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f54c:	9a08      	ldr	r2, [sp, #32]
    f54e:	1a9d      	subs	r5, r3, r2
    f550:	2d00      	cmp	r5, #0
    f552:	dd38      	ble.n	f5c6 <_vfprintf_r+0x84e>
    f554:	4aad      	ldr	r2, [pc, #692]	; (f80c <_vfprintf_r+0xa94>)
    f556:	687b      	ldr	r3, [r7, #4]
    f558:	4690      	mov	r8, r2
    f55a:	2d10      	cmp	r5, #16
    f55c:	dd22      	ble.n	f5a4 <_vfprintf_r+0x82c>
    f55e:	2210      	movs	r2, #16
    f560:	4691      	mov	r9, r2
    f562:	0022      	movs	r2, r4
    f564:	465c      	mov	r4, fp
    f566:	e003      	b.n	f570 <_vfprintf_r+0x7f8>
    f568:	3d10      	subs	r5, #16
    f56a:	3608      	adds	r6, #8
    f56c:	2d10      	cmp	r5, #16
    f56e:	dd17      	ble.n	f5a0 <_vfprintf_r+0x828>
    f570:	49a6      	ldr	r1, [pc, #664]	; (f80c <_vfprintf_r+0xa94>)
    f572:	3210      	adds	r2, #16
    f574:	6031      	str	r1, [r6, #0]
    f576:	4649      	mov	r1, r9
    f578:	3301      	adds	r3, #1
    f57a:	6071      	str	r1, [r6, #4]
    f57c:	60ba      	str	r2, [r7, #8]
    f57e:	607b      	str	r3, [r7, #4]
    f580:	2b07      	cmp	r3, #7
    f582:	ddf1      	ble.n	f568 <_vfprintf_r+0x7f0>
    f584:	003a      	movs	r2, r7
    f586:	0021      	movs	r1, r4
    f588:	9806      	ldr	r0, [sp, #24]
    f58a:	f003 fe3d 	bl	13208 <__sprint_r>
    f58e:	2800      	cmp	r0, #0
    f590:	d000      	beq.n	f594 <_vfprintf_r+0x81c>
    f592:	e0db      	b.n	f74c <_vfprintf_r+0x9d4>
    f594:	3d10      	subs	r5, #16
    f596:	68ba      	ldr	r2, [r7, #8]
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	ae32      	add	r6, sp, #200	; 0xc8
    f59c:	2d10      	cmp	r5, #16
    f59e:	dce7      	bgt.n	f570 <_vfprintf_r+0x7f8>
    f5a0:	46a3      	mov	fp, r4
    f5a2:	0014      	movs	r4, r2
    f5a4:	4642      	mov	r2, r8
    f5a6:	1964      	adds	r4, r4, r5
    f5a8:	3301      	adds	r3, #1
    f5aa:	c624      	stmia	r6!, {r2, r5}
    f5ac:	60bc      	str	r4, [r7, #8]
    f5ae:	607b      	str	r3, [r7, #4]
    f5b0:	2b07      	cmp	r3, #7
    f5b2:	dd08      	ble.n	f5c6 <_vfprintf_r+0x84e>
    f5b4:	003a      	movs	r2, r7
    f5b6:	4659      	mov	r1, fp
    f5b8:	9806      	ldr	r0, [sp, #24]
    f5ba:	f003 fe25 	bl	13208 <__sprint_r>
    f5be:	2800      	cmp	r0, #0
    f5c0:	d000      	beq.n	f5c4 <_vfprintf_r+0x84c>
    f5c2:	e0f4      	b.n	f7ae <_vfprintf_r+0xa36>
    f5c4:	68bc      	ldr	r4, [r7, #8]
    f5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5c8:	9908      	ldr	r1, [sp, #32]
    f5ca:	428b      	cmp	r3, r1
    f5cc:	da00      	bge.n	f5d0 <_vfprintf_r+0x858>
    f5ce:	000b      	movs	r3, r1
    f5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f5d2:	4694      	mov	ip, r2
    f5d4:	449c      	add	ip, r3
    f5d6:	4663      	mov	r3, ip
    f5d8:	930a      	str	r3, [sp, #40]	; 0x28
    f5da:	2c00      	cmp	r4, #0
    f5dc:	d000      	beq.n	f5e0 <_vfprintf_r+0x868>
    f5de:	e0de      	b.n	f79e <_vfprintf_r+0xa26>
    f5e0:	2300      	movs	r3, #0
    f5e2:	ae32      	add	r6, sp, #200	; 0xc8
    f5e4:	607b      	str	r3, [r7, #4]
    f5e6:	f7ff fc0e 	bl	ee06 <_vfprintf_r+0x8e>
    f5ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f5ec:	2b01      	cmp	r3, #1
    f5ee:	dc00      	bgt.n	f5f2 <_vfprintf_r+0x87a>
    f5f0:	e0b8      	b.n	f764 <_vfprintf_r+0x9ec>
    f5f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f5f4:	3401      	adds	r4, #1
    f5f6:	6033      	str	r3, [r6, #0]
    f5f8:	2301      	movs	r3, #1
    f5fa:	6073      	str	r3, [r6, #4]
    f5fc:	687b      	ldr	r3, [r7, #4]
    f5fe:	60bc      	str	r4, [r7, #8]
    f600:	3301      	adds	r3, #1
    f602:	607b      	str	r3, [r7, #4]
    f604:	2b07      	cmp	r3, #7
    f606:	dd00      	ble.n	f60a <_vfprintf_r+0x892>
    f608:	e2d2      	b.n	fbb0 <_vfprintf_r+0xe38>
    f60a:	3608      	adds	r6, #8
    f60c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f60e:	3301      	adds	r3, #1
    f610:	6032      	str	r2, [r6, #0]
    f612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f614:	4698      	mov	r8, r3
    f616:	4694      	mov	ip, r2
    f618:	4464      	add	r4, ip
    f61a:	6072      	str	r2, [r6, #4]
    f61c:	60bc      	str	r4, [r7, #8]
    f61e:	607b      	str	r3, [r7, #4]
    f620:	2b07      	cmp	r3, #7
    f622:	dd00      	ble.n	f626 <_vfprintf_r+0x8ae>
    f624:	e2d0      	b.n	fbc8 <_vfprintf_r+0xe50>
    f626:	3608      	adds	r6, #8
    f628:	2200      	movs	r2, #0
    f62a:	2300      	movs	r3, #0
    f62c:	9815      	ldr	r0, [sp, #84]	; 0x54
    f62e:	9916      	ldr	r1, [sp, #88]	; 0x58
    f630:	f7fd f972 	bl	c918 <__aeabi_dcmpeq>
    f634:	2800      	cmp	r0, #0
    f636:	d000      	beq.n	f63a <_vfprintf_r+0x8c2>
    f638:	e1a6      	b.n	f988 <_vfprintf_r+0xc10>
    f63a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f63c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f63e:	3501      	adds	r5, #1
    f640:	3b01      	subs	r3, #1
    f642:	6035      	str	r5, [r6, #0]
    f644:	6073      	str	r3, [r6, #4]
    f646:	18e4      	adds	r4, r4, r3
    f648:	2301      	movs	r3, #1
    f64a:	469c      	mov	ip, r3
    f64c:	44e0      	add	r8, ip
    f64e:	4643      	mov	r3, r8
    f650:	60bc      	str	r4, [r7, #8]
    f652:	607b      	str	r3, [r7, #4]
    f654:	2b07      	cmp	r3, #7
    f656:	dd00      	ble.n	f65a <_vfprintf_r+0x8e2>
    f658:	e095      	b.n	f786 <_vfprintf_r+0xa0e>
    f65a:	3608      	adds	r6, #8
    f65c:	ab21      	add	r3, sp, #132	; 0x84
    f65e:	6033      	str	r3, [r6, #0]
    f660:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f662:	469c      	mov	ip, r3
    f664:	6073      	str	r3, [r6, #4]
    f666:	4643      	mov	r3, r8
    f668:	4464      	add	r4, ip
    f66a:	3301      	adds	r3, #1
    f66c:	60bc      	str	r4, [r7, #8]
    f66e:	607b      	str	r3, [r7, #4]
    f670:	2b07      	cmp	r3, #7
    f672:	dc00      	bgt.n	f676 <_vfprintf_r+0x8fe>
    f674:	e765      	b.n	f542 <_vfprintf_r+0x7ca>
    f676:	003a      	movs	r2, r7
    f678:	4659      	mov	r1, fp
    f67a:	9806      	ldr	r0, [sp, #24]
    f67c:	f003 fdc4 	bl	13208 <__sprint_r>
    f680:	2800      	cmp	r0, #0
    f682:	d000      	beq.n	f686 <_vfprintf_r+0x90e>
    f684:	e093      	b.n	f7ae <_vfprintf_r+0xa36>
    f686:	68bc      	ldr	r4, [r7, #8]
    f688:	ae32      	add	r6, sp, #200	; 0xc8
    f68a:	e75b      	b.n	f544 <_vfprintf_r+0x7cc>
    f68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f68e:	2b65      	cmp	r3, #101	; 0x65
    f690:	ddab      	ble.n	f5ea <_vfprintf_r+0x872>
    f692:	2200      	movs	r2, #0
    f694:	2300      	movs	r3, #0
    f696:	9815      	ldr	r0, [sp, #84]	; 0x54
    f698:	9916      	ldr	r1, [sp, #88]	; 0x58
    f69a:	f7fd f93d 	bl	c918 <__aeabi_dcmpeq>
    f69e:	2800      	cmp	r0, #0
    f6a0:	d100      	bne.n	f6a4 <_vfprintf_r+0x92c>
    f6a2:	e0e6      	b.n	f872 <_vfprintf_r+0xafa>
    f6a4:	4b5a      	ldr	r3, [pc, #360]	; (f810 <_vfprintf_r+0xa98>)
    f6a6:	3401      	adds	r4, #1
    f6a8:	6033      	str	r3, [r6, #0]
    f6aa:	2301      	movs	r3, #1
    f6ac:	6073      	str	r3, [r6, #4]
    f6ae:	687b      	ldr	r3, [r7, #4]
    f6b0:	60bc      	str	r4, [r7, #8]
    f6b2:	3301      	adds	r3, #1
    f6b4:	607b      	str	r3, [r7, #4]
    f6b6:	2b07      	cmp	r3, #7
    f6b8:	dd00      	ble.n	f6bc <_vfprintf_r+0x944>
    f6ba:	e393      	b.n	fde4 <_vfprintf_r+0x106c>
    f6bc:	3608      	adds	r6, #8
    f6be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f6c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f6c2:	4293      	cmp	r3, r2
    f6c4:	da00      	bge.n	f6c8 <_vfprintf_r+0x950>
    f6c6:	e19f      	b.n	fa08 <_vfprintf_r+0xc90>
    f6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6ca:	07db      	lsls	r3, r3, #31
    f6cc:	d500      	bpl.n	f6d0 <_vfprintf_r+0x958>
    f6ce:	e19b      	b.n	fa08 <_vfprintf_r+0xc90>
    f6d0:	68bc      	ldr	r4, [r7, #8]
    f6d2:	e737      	b.n	f544 <_vfprintf_r+0x7cc>
    f6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6d6:	9a08      	ldr	r2, [sp, #32]
    f6d8:	1a9d      	subs	r5, r3, r2
    f6da:	2d00      	cmp	r5, #0
    f6dc:	dc00      	bgt.n	f6e0 <_vfprintf_r+0x968>
    f6de:	e6e7      	b.n	f4b0 <_vfprintf_r+0x738>
    f6e0:	4a49      	ldr	r2, [pc, #292]	; (f808 <_vfprintf_r+0xa90>)
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	4691      	mov	r9, r2
    f6e6:	2d10      	cmp	r5, #16
    f6e8:	dd24      	ble.n	f734 <_vfprintf_r+0x9bc>
    f6ea:	2210      	movs	r2, #16
    f6ec:	0021      	movs	r1, r4
    f6ee:	4690      	mov	r8, r2
    f6f0:	465c      	mov	r4, fp
    f6f2:	0032      	movs	r2, r6
    f6f4:	464e      	mov	r6, r9
    f6f6:	e003      	b.n	f700 <_vfprintf_r+0x988>
    f6f8:	3d10      	subs	r5, #16
    f6fa:	3208      	adds	r2, #8
    f6fc:	2d10      	cmp	r5, #16
    f6fe:	dd15      	ble.n	f72c <_vfprintf_r+0x9b4>
    f700:	4640      	mov	r0, r8
    f702:	3110      	adds	r1, #16
    f704:	3301      	adds	r3, #1
    f706:	6016      	str	r6, [r2, #0]
    f708:	6050      	str	r0, [r2, #4]
    f70a:	60b9      	str	r1, [r7, #8]
    f70c:	607b      	str	r3, [r7, #4]
    f70e:	2b07      	cmp	r3, #7
    f710:	ddf2      	ble.n	f6f8 <_vfprintf_r+0x980>
    f712:	003a      	movs	r2, r7
    f714:	0021      	movs	r1, r4
    f716:	9806      	ldr	r0, [sp, #24]
    f718:	f003 fd76 	bl	13208 <__sprint_r>
    f71c:	2800      	cmp	r0, #0
    f71e:	d115      	bne.n	f74c <_vfprintf_r+0x9d4>
    f720:	3d10      	subs	r5, #16
    f722:	68b9      	ldr	r1, [r7, #8]
    f724:	687b      	ldr	r3, [r7, #4]
    f726:	aa32      	add	r2, sp, #200	; 0xc8
    f728:	2d10      	cmp	r5, #16
    f72a:	dce9      	bgt.n	f700 <_vfprintf_r+0x988>
    f72c:	46a3      	mov	fp, r4
    f72e:	46b1      	mov	r9, r6
    f730:	000c      	movs	r4, r1
    f732:	0016      	movs	r6, r2
    f734:	464a      	mov	r2, r9
    f736:	1964      	adds	r4, r4, r5
    f738:	3301      	adds	r3, #1
    f73a:	6032      	str	r2, [r6, #0]
    f73c:	6075      	str	r5, [r6, #4]
    f73e:	60bc      	str	r4, [r7, #8]
    f740:	607b      	str	r3, [r7, #4]
    f742:	2b07      	cmp	r3, #7
    f744:	dd00      	ble.n	f748 <_vfprintf_r+0x9d0>
    f746:	e29e      	b.n	fc86 <_vfprintf_r+0xf0e>
    f748:	3608      	adds	r6, #8
    f74a:	e6b1      	b.n	f4b0 <_vfprintf_r+0x738>
    f74c:	46a1      	mov	r9, r4
    f74e:	464b      	mov	r3, r9
    f750:	899b      	ldrh	r3, [r3, #12]
    f752:	065b      	lsls	r3, r3, #25
    f754:	d401      	bmi.n	f75a <_vfprintf_r+0x9e2>
    f756:	f7ff fbbe 	bl	eed6 <_vfprintf_r+0x15e>
    f75a:	2301      	movs	r3, #1
    f75c:	425b      	negs	r3, r3
    f75e:	930a      	str	r3, [sp, #40]	; 0x28
    f760:	f7ff fbb9 	bl	eed6 <_vfprintf_r+0x15e>
    f764:	2301      	movs	r3, #1
    f766:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f768:	4213      	tst	r3, r2
    f76a:	d000      	beq.n	f76e <_vfprintf_r+0x9f6>
    f76c:	e741      	b.n	f5f2 <_vfprintf_r+0x87a>
    f76e:	6073      	str	r3, [r6, #4]
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f774:	3301      	adds	r3, #1
    f776:	3401      	adds	r4, #1
    f778:	6032      	str	r2, [r6, #0]
    f77a:	60bc      	str	r4, [r7, #8]
    f77c:	4698      	mov	r8, r3
    f77e:	607b      	str	r3, [r7, #4]
    f780:	2b07      	cmp	r3, #7
    f782:	dc00      	bgt.n	f786 <_vfprintf_r+0xa0e>
    f784:	e769      	b.n	f65a <_vfprintf_r+0x8e2>
    f786:	003a      	movs	r2, r7
    f788:	4659      	mov	r1, fp
    f78a:	9806      	ldr	r0, [sp, #24]
    f78c:	f003 fd3c 	bl	13208 <__sprint_r>
    f790:	2800      	cmp	r0, #0
    f792:	d10c      	bne.n	f7ae <_vfprintf_r+0xa36>
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	68bc      	ldr	r4, [r7, #8]
    f798:	4698      	mov	r8, r3
    f79a:	ae32      	add	r6, sp, #200	; 0xc8
    f79c:	e75e      	b.n	f65c <_vfprintf_r+0x8e4>
    f79e:	003a      	movs	r2, r7
    f7a0:	4659      	mov	r1, fp
    f7a2:	9806      	ldr	r0, [sp, #24]
    f7a4:	f003 fd30 	bl	13208 <__sprint_r>
    f7a8:	2800      	cmp	r0, #0
    f7aa:	d100      	bne.n	f7ae <_vfprintf_r+0xa36>
    f7ac:	e718      	b.n	f5e0 <_vfprintf_r+0x868>
    f7ae:	46d9      	mov	r9, fp
    f7b0:	e7cd      	b.n	f74e <_vfprintf_r+0x9d6>
    f7b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f7b4:	2b01      	cmp	r3, #1
    f7b6:	d100      	bne.n	f7ba <_vfprintf_r+0xa42>
    f7b8:	e17e      	b.n	fab8 <_vfprintf_r+0xd40>
    f7ba:	2b02      	cmp	r3, #2
    f7bc:	d12a      	bne.n	f814 <_vfprintf_r+0xa9c>
    f7be:	9409      	str	r4, [sp, #36]	; 0x24
    f7c0:	2300      	movs	r3, #0
    f7c2:	2400      	movs	r4, #0
    f7c4:	930c      	str	r3, [sp, #48]	; 0x30
    f7c6:	940d      	str	r4, [sp, #52]	; 0x34
    f7c8:	e528      	b.n	f21c <_vfprintf_r+0x4a4>
    f7ca:	003a      	movs	r2, r7
    f7cc:	4659      	mov	r1, fp
    f7ce:	9806      	ldr	r0, [sp, #24]
    f7d0:	f003 fd1a 	bl	13208 <__sprint_r>
    f7d4:	2800      	cmp	r0, #0
    f7d6:	d1ea      	bne.n	f7ae <_vfprintf_r+0xa36>
    f7d8:	68bc      	ldr	r4, [r7, #8]
    f7da:	ae32      	add	r6, sp, #200	; 0xc8
    f7dc:	e6a0      	b.n	f520 <_vfprintf_r+0x7a8>
    f7de:	003a      	movs	r2, r7
    f7e0:	4659      	mov	r1, fp
    f7e2:	9806      	ldr	r0, [sp, #24]
    f7e4:	f003 fd10 	bl	13208 <__sprint_r>
    f7e8:	2800      	cmp	r0, #0
    f7ea:	d1e0      	bne.n	f7ae <_vfprintf_r+0xa36>
    f7ec:	68bc      	ldr	r4, [r7, #8]
    f7ee:	ae32      	add	r6, sp, #200	; 0xc8
    f7f0:	e64a      	b.n	f488 <_vfprintf_r+0x710>
    f7f2:	003a      	movs	r2, r7
    f7f4:	4659      	mov	r1, fp
    f7f6:	9806      	ldr	r0, [sp, #24]
    f7f8:	f003 fd06 	bl	13208 <__sprint_r>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	d1d6      	bne.n	f7ae <_vfprintf_r+0xa36>
    f800:	68bc      	ldr	r4, [r7, #8]
    f802:	ae32      	add	r6, sp, #200	; 0xc8
    f804:	e650      	b.n	f4a8 <_vfprintf_r+0x730>
    f806:	46c0      	nop			; (mov r8, r8)
    f808:	00014bb8 	.word	0x00014bb8
    f80c:	00014ba8 	.word	0x00014ba8
    f810:	00014ba4 	.word	0x00014ba4
    f814:	9409      	str	r4, [sp, #36]	; 0x24
    f816:	2300      	movs	r3, #0
    f818:	2400      	movs	r4, #0
    f81a:	930c      	str	r3, [sp, #48]	; 0x30
    f81c:	940d      	str	r4, [sp, #52]	; 0x34
    f81e:	980c      	ldr	r0, [sp, #48]	; 0x30
    f820:	990d      	ldr	r1, [sp, #52]	; 0x34
    f822:	4653      	mov	r3, sl
    f824:	aa32      	add	r2, sp, #200	; 0xc8
    f826:	4691      	mov	r9, r2
    f828:	9308      	str	r3, [sp, #32]
    f82a:	46b2      	mov	sl, r6
    f82c:	e000      	b.n	f830 <_vfprintf_r+0xab8>
    f82e:	46a1      	mov	r9, r4
    f830:	074a      	lsls	r2, r1, #29
    f832:	4694      	mov	ip, r2
    f834:	464b      	mov	r3, r9
    f836:	4665      	mov	r5, ip
    f838:	1e5c      	subs	r4, r3, #1
    f83a:	08c6      	lsrs	r6, r0, #3
    f83c:	2307      	movs	r3, #7
    f83e:	08ca      	lsrs	r2, r1, #3
    f840:	4335      	orrs	r5, r6
    f842:	0011      	movs	r1, r2
    f844:	002a      	movs	r2, r5
    f846:	4003      	ands	r3, r0
    f848:	3330      	adds	r3, #48	; 0x30
    f84a:	7023      	strb	r3, [r4, #0]
    f84c:	0028      	movs	r0, r5
    f84e:	430a      	orrs	r2, r1
    f850:	d1ed      	bne.n	f82e <_vfprintf_r+0xab6>
    f852:	900c      	str	r0, [sp, #48]	; 0x30
    f854:	910d      	str	r1, [sp, #52]	; 0x34
    f856:	9908      	ldr	r1, [sp, #32]
    f858:	4656      	mov	r6, sl
    f85a:	468a      	mov	sl, r1
    f85c:	9909      	ldr	r1, [sp, #36]	; 0x24
    f85e:	464a      	mov	r2, r9
    f860:	9411      	str	r4, [sp, #68]	; 0x44
    f862:	07c9      	lsls	r1, r1, #31
    f864:	d500      	bpl.n	f868 <_vfprintf_r+0xaf0>
    f866:	e116      	b.n	fa96 <_vfprintf_r+0xd1e>
    f868:	ab32      	add	r3, sp, #200	; 0xc8
    f86a:	1b1b      	subs	r3, r3, r4
    f86c:	930e      	str	r3, [sp, #56]	; 0x38
    f86e:	f7ff fbc6 	bl	effe <_vfprintf_r+0x286>
    f872:	981f      	ldr	r0, [sp, #124]	; 0x7c
    f874:	2800      	cmp	r0, #0
    f876:	dc00      	bgt.n	f87a <_vfprintf_r+0xb02>
    f878:	e2be      	b.n	fdf8 <_vfprintf_r+0x1080>
    f87a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f87c:	9914      	ldr	r1, [sp, #80]	; 0x50
    f87e:	0013      	movs	r3, r2
    f880:	4690      	mov	r8, r2
    f882:	428b      	cmp	r3, r1
    f884:	dd00      	ble.n	f888 <_vfprintf_r+0xb10>
    f886:	4688      	mov	r8, r1
    f888:	4643      	mov	r3, r8
    f88a:	2b00      	cmp	r3, #0
    f88c:	dd0c      	ble.n	f8a8 <_vfprintf_r+0xb30>
    f88e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f890:	4444      	add	r4, r8
    f892:	6033      	str	r3, [r6, #0]
    f894:	4643      	mov	r3, r8
    f896:	6073      	str	r3, [r6, #4]
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	60bc      	str	r4, [r7, #8]
    f89c:	3301      	adds	r3, #1
    f89e:	607b      	str	r3, [r7, #4]
    f8a0:	2b07      	cmp	r3, #7
    f8a2:	dd00      	ble.n	f8a6 <_vfprintf_r+0xb2e>
    f8a4:	e3d7      	b.n	10056 <_vfprintf_r+0x12de>
    f8a6:	3608      	adds	r6, #8
    f8a8:	4643      	mov	r3, r8
    f8aa:	43db      	mvns	r3, r3
    f8ac:	4642      	mov	r2, r8
    f8ae:	17db      	asrs	r3, r3, #31
    f8b0:	4013      	ands	r3, r2
    f8b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f8b4:	1ad3      	subs	r3, r2, r3
    f8b6:	4698      	mov	r8, r3
    f8b8:	2b00      	cmp	r3, #0
    f8ba:	dc00      	bgt.n	f8be <_vfprintf_r+0xb46>
    f8bc:	e11b      	b.n	faf6 <_vfprintf_r+0xd7e>
    f8be:	2b10      	cmp	r3, #16
    f8c0:	dc01      	bgt.n	f8c6 <_vfprintf_r+0xb4e>
    f8c2:	f000 fd00 	bl	102c6 <_vfprintf_r+0x154e>
    f8c6:	4ad9      	ldr	r2, [pc, #868]	; (fc2c <_vfprintf_r+0xeb4>)
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	4691      	mov	r9, r2
    f8cc:	2210      	movs	r2, #16
    f8ce:	464d      	mov	r5, r9
    f8d0:	4692      	mov	sl, r2
    f8d2:	0022      	movs	r2, r4
    f8d4:	4644      	mov	r4, r8
    f8d6:	46d8      	mov	r8, fp
    f8d8:	e004      	b.n	f8e4 <_vfprintf_r+0xb6c>
    f8da:	3608      	adds	r6, #8
    f8dc:	3c10      	subs	r4, #16
    f8de:	2c10      	cmp	r4, #16
    f8e0:	dc00      	bgt.n	f8e4 <_vfprintf_r+0xb6c>
    f8e2:	e0f8      	b.n	fad6 <_vfprintf_r+0xd5e>
    f8e4:	4651      	mov	r1, sl
    f8e6:	3210      	adds	r2, #16
    f8e8:	3301      	adds	r3, #1
    f8ea:	6035      	str	r5, [r6, #0]
    f8ec:	6071      	str	r1, [r6, #4]
    f8ee:	60ba      	str	r2, [r7, #8]
    f8f0:	607b      	str	r3, [r7, #4]
    f8f2:	2b07      	cmp	r3, #7
    f8f4:	ddf1      	ble.n	f8da <_vfprintf_r+0xb62>
    f8f6:	003a      	movs	r2, r7
    f8f8:	4641      	mov	r1, r8
    f8fa:	9806      	ldr	r0, [sp, #24]
    f8fc:	f003 fc84 	bl	13208 <__sprint_r>
    f900:	2800      	cmp	r0, #0
    f902:	d000      	beq.n	f906 <_vfprintf_r+0xb8e>
    f904:	e3f4      	b.n	100f0 <_vfprintf_r+0x1378>
    f906:	68ba      	ldr	r2, [r7, #8]
    f908:	687b      	ldr	r3, [r7, #4]
    f90a:	ae32      	add	r6, sp, #200	; 0xc8
    f90c:	e7e6      	b.n	f8dc <_vfprintf_r+0xb64>
    f90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f910:	2b00      	cmp	r3, #0
    f912:	d100      	bne.n	f916 <_vfprintf_r+0xb9e>
    f914:	e0cb      	b.n	faae <_vfprintf_r+0xd36>
    f916:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f91a:	ab32      	add	r3, sp, #200	; 0xc8
    f91c:	46b1      	mov	r9, r6
    f91e:	001e      	movs	r6, r3
    f920:	0020      	movs	r0, r4
    f922:	0029      	movs	r1, r5
    f924:	220a      	movs	r2, #10
    f926:	2300      	movs	r3, #0
    f928:	f7fd f824 	bl	c974 <__aeabi_uldivmod>
    f92c:	3e01      	subs	r6, #1
    f92e:	3230      	adds	r2, #48	; 0x30
    f930:	7032      	strb	r2, [r6, #0]
    f932:	2300      	movs	r3, #0
    f934:	0020      	movs	r0, r4
    f936:	0029      	movs	r1, r5
    f938:	220a      	movs	r2, #10
    f93a:	f7fd f81b 	bl	c974 <__aeabi_uldivmod>
    f93e:	0003      	movs	r3, r0
    f940:	0004      	movs	r4, r0
    f942:	000d      	movs	r5, r1
    f944:	430b      	orrs	r3, r1
    f946:	d1eb      	bne.n	f920 <_vfprintf_r+0xba8>
    f948:	0032      	movs	r2, r6
    f94a:	ab32      	add	r3, sp, #200	; 0xc8
    f94c:	1a9b      	subs	r3, r3, r2
    f94e:	9611      	str	r6, [sp, #68]	; 0x44
    f950:	940c      	str	r4, [sp, #48]	; 0x30
    f952:	950d      	str	r5, [sp, #52]	; 0x34
    f954:	464e      	mov	r6, r9
    f956:	930e      	str	r3, [sp, #56]	; 0x38
    f958:	f7ff fb51 	bl	effe <_vfprintf_r+0x286>
    f95c:	2300      	movs	r3, #0
    f95e:	930e      	str	r3, [sp, #56]	; 0x38
    f960:	ab32      	add	r3, sp, #200	; 0xc8
    f962:	9311      	str	r3, [sp, #68]	; 0x44
    f964:	f7ff fb4b 	bl	effe <_vfprintf_r+0x286>
    f968:	003a      	movs	r2, r7
    f96a:	4659      	mov	r1, fp
    f96c:	9806      	ldr	r0, [sp, #24]
    f96e:	f003 fc4b 	bl	13208 <__sprint_r>
    f972:	2800      	cmp	r0, #0
    f974:	d000      	beq.n	f978 <_vfprintf_r+0xc00>
    f976:	e71a      	b.n	f7ae <_vfprintf_r+0xa36>
    f978:	ab16      	add	r3, sp, #88	; 0x58
    f97a:	7fdb      	ldrb	r3, [r3, #31]
    f97c:	68bc      	ldr	r4, [r7, #8]
    f97e:	4698      	mov	r8, r3
    f980:	ae32      	add	r6, sp, #200	; 0xc8
    f982:	e56e      	b.n	f462 <_vfprintf_r+0x6ea>
    f984:	46b1      	mov	r9, r6
    f986:	e6e2      	b.n	f74e <_vfprintf_r+0x9d6>
    f988:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f98a:	1e5d      	subs	r5, r3, #1
    f98c:	2d00      	cmp	r5, #0
    f98e:	dc00      	bgt.n	f992 <_vfprintf_r+0xc1a>
    f990:	e664      	b.n	f65c <_vfprintf_r+0x8e4>
    f992:	4ba6      	ldr	r3, [pc, #664]	; (fc2c <_vfprintf_r+0xeb4>)
    f994:	4699      	mov	r9, r3
    f996:	2d10      	cmp	r5, #16
    f998:	dc00      	bgt.n	f99c <_vfprintf_r+0xc24>
    f99a:	e14c      	b.n	fc36 <_vfprintf_r+0xebe>
    f99c:	2310      	movs	r3, #16
    f99e:	0022      	movs	r2, r4
    f9a0:	469a      	mov	sl, r3
    f9a2:	465c      	mov	r4, fp
    f9a4:	4643      	mov	r3, r8
    f9a6:	e004      	b.n	f9b2 <_vfprintf_r+0xc3a>
    f9a8:	3608      	adds	r6, #8
    f9aa:	3d10      	subs	r5, #16
    f9ac:	2d10      	cmp	r5, #16
    f9ae:	dc00      	bgt.n	f9b2 <_vfprintf_r+0xc3a>
    f9b0:	e13e      	b.n	fc30 <_vfprintf_r+0xeb8>
    f9b2:	4649      	mov	r1, r9
    f9b4:	6031      	str	r1, [r6, #0]
    f9b6:	4651      	mov	r1, sl
    f9b8:	3210      	adds	r2, #16
    f9ba:	3301      	adds	r3, #1
    f9bc:	6071      	str	r1, [r6, #4]
    f9be:	60ba      	str	r2, [r7, #8]
    f9c0:	607b      	str	r3, [r7, #4]
    f9c2:	2b07      	cmp	r3, #7
    f9c4:	ddf0      	ble.n	f9a8 <_vfprintf_r+0xc30>
    f9c6:	003a      	movs	r2, r7
    f9c8:	0021      	movs	r1, r4
    f9ca:	9806      	ldr	r0, [sp, #24]
    f9cc:	f003 fc1c 	bl	13208 <__sprint_r>
    f9d0:	2800      	cmp	r0, #0
    f9d2:	d000      	beq.n	f9d6 <_vfprintf_r+0xc5e>
    f9d4:	e6ba      	b.n	f74c <_vfprintf_r+0x9d4>
    f9d6:	68ba      	ldr	r2, [r7, #8]
    f9d8:	687b      	ldr	r3, [r7, #4]
    f9da:	ae32      	add	r6, sp, #200	; 0xc8
    f9dc:	e7e5      	b.n	f9aa <_vfprintf_r+0xc32>
    f9de:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f9e2:	0008      	movs	r0, r1
    f9e4:	4310      	orrs	r0, r2
    f9e6:	2302      	movs	r3, #2
    f9e8:	0002      	movs	r2, r0
    f9ea:	f7ff fc05 	bl	f1f8 <_vfprintf_r+0x480>
    f9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f9f0:	681a      	ldr	r2, [r3, #0]
    f9f2:	e48c      	b.n	f30e <_vfprintf_r+0x596>
    f9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f9f6:	681a      	ldr	r2, [r3, #0]
    f9f8:	e46e      	b.n	f2d8 <_vfprintf_r+0x560>
    f9fa:	6813      	ldr	r3, [r2, #0]
    f9fc:	9308      	str	r3, [sp, #32]
    f9fe:	f7ff faca 	bl	ef96 <_vfprintf_r+0x21e>
    fa02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fa04:	681a      	ldr	r2, [r3, #0]
    fa06:	e4ac      	b.n	f362 <_vfprintf_r+0x5ea>
    fa08:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fa0a:	68ba      	ldr	r2, [r7, #8]
    fa0c:	6033      	str	r3, [r6, #0]
    fa0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fa10:	469c      	mov	ip, r3
    fa12:	6073      	str	r3, [r6, #4]
    fa14:	687b      	ldr	r3, [r7, #4]
    fa16:	4462      	add	r2, ip
    fa18:	3301      	adds	r3, #1
    fa1a:	0014      	movs	r4, r2
    fa1c:	60ba      	str	r2, [r7, #8]
    fa1e:	607b      	str	r3, [r7, #4]
    fa20:	2b07      	cmp	r3, #7
    fa22:	dd00      	ble.n	fa26 <_vfprintf_r+0xcae>
    fa24:	e281      	b.n	ff2a <_vfprintf_r+0x11b2>
    fa26:	3608      	adds	r6, #8
    fa28:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fa2a:	1e5d      	subs	r5, r3, #1
    fa2c:	2d00      	cmp	r5, #0
    fa2e:	dc00      	bgt.n	fa32 <_vfprintf_r+0xcba>
    fa30:	e588      	b.n	f544 <_vfprintf_r+0x7cc>
    fa32:	4a7e      	ldr	r2, [pc, #504]	; (fc2c <_vfprintf_r+0xeb4>)
    fa34:	687b      	ldr	r3, [r7, #4]
    fa36:	4691      	mov	r9, r2
    fa38:	2d10      	cmp	r5, #16
    fa3a:	dd21      	ble.n	fa80 <_vfprintf_r+0xd08>
    fa3c:	2210      	movs	r2, #16
    fa3e:	4690      	mov	r8, r2
    fa40:	0022      	movs	r2, r4
    fa42:	464c      	mov	r4, r9
    fa44:	46d9      	mov	r9, fp
    fa46:	e004      	b.n	fa52 <_vfprintf_r+0xcda>
    fa48:	3608      	adds	r6, #8
    fa4a:	3d10      	subs	r5, #16
    fa4c:	2d10      	cmp	r5, #16
    fa4e:	dc00      	bgt.n	fa52 <_vfprintf_r+0xcda>
    fa50:	e1c4      	b.n	fddc <_vfprintf_r+0x1064>
    fa52:	4641      	mov	r1, r8
    fa54:	3210      	adds	r2, #16
    fa56:	3301      	adds	r3, #1
    fa58:	6034      	str	r4, [r6, #0]
    fa5a:	6071      	str	r1, [r6, #4]
    fa5c:	60ba      	str	r2, [r7, #8]
    fa5e:	607b      	str	r3, [r7, #4]
    fa60:	2b07      	cmp	r3, #7
    fa62:	ddf1      	ble.n	fa48 <_vfprintf_r+0xcd0>
    fa64:	003a      	movs	r2, r7
    fa66:	4649      	mov	r1, r9
    fa68:	9806      	ldr	r0, [sp, #24]
    fa6a:	f003 fbcd 	bl	13208 <__sprint_r>
    fa6e:	2800      	cmp	r0, #0
    fa70:	d000      	beq.n	fa74 <_vfprintf_r+0xcfc>
    fa72:	e66c      	b.n	f74e <_vfprintf_r+0x9d6>
    fa74:	68ba      	ldr	r2, [r7, #8]
    fa76:	687b      	ldr	r3, [r7, #4]
    fa78:	ae32      	add	r6, sp, #200	; 0xc8
    fa7a:	e7e6      	b.n	fa4a <_vfprintf_r+0xcd2>
    fa7c:	46a3      	mov	fp, r4
    fa7e:	0014      	movs	r4, r2
    fa80:	464a      	mov	r2, r9
    fa82:	1964      	adds	r4, r4, r5
    fa84:	3301      	adds	r3, #1
    fa86:	6032      	str	r2, [r6, #0]
    fa88:	6075      	str	r5, [r6, #4]
    fa8a:	60bc      	str	r4, [r7, #8]
    fa8c:	607b      	str	r3, [r7, #4]
    fa8e:	2b07      	cmp	r3, #7
    fa90:	dc00      	bgt.n	fa94 <_vfprintf_r+0xd1c>
    fa92:	e556      	b.n	f542 <_vfprintf_r+0x7ca>
    fa94:	e5ef      	b.n	f676 <_vfprintf_r+0x8fe>
    fa96:	2b30      	cmp	r3, #48	; 0x30
    fa98:	d100      	bne.n	fa9c <_vfprintf_r+0xd24>
    fa9a:	e251      	b.n	ff40 <_vfprintf_r+0x11c8>
    fa9c:	2330      	movs	r3, #48	; 0x30
    fa9e:	3a02      	subs	r2, #2
    faa0:	7013      	strb	r3, [r2, #0]
    faa2:	ab32      	add	r3, sp, #200	; 0xc8
    faa4:	1a9b      	subs	r3, r3, r2
    faa6:	930e      	str	r3, [sp, #56]	; 0x38
    faa8:	9211      	str	r2, [sp, #68]	; 0x44
    faaa:	f7ff faa8 	bl	effe <_vfprintf_r+0x286>
    faae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fab0:	2b09      	cmp	r3, #9
    fab2:	d900      	bls.n	fab6 <_vfprintf_r+0xd3e>
    fab4:	e72f      	b.n	f916 <_vfprintf_r+0xb9e>
    fab6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fab8:	2227      	movs	r2, #39	; 0x27
    faba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fabc:	a928      	add	r1, sp, #160	; 0xa0
    fabe:	3330      	adds	r3, #48	; 0x30
    fac0:	548b      	strb	r3, [r1, r2]
    fac2:	2301      	movs	r3, #1
    fac4:	aa16      	add	r2, sp, #88	; 0x58
    fac6:	4694      	mov	ip, r2
    fac8:	930e      	str	r3, [sp, #56]	; 0x38
    faca:	336e      	adds	r3, #110	; 0x6e
    facc:	4463      	add	r3, ip
    face:	9409      	str	r4, [sp, #36]	; 0x24
    fad0:	9311      	str	r3, [sp, #68]	; 0x44
    fad2:	f7ff fa94 	bl	effe <_vfprintf_r+0x286>
    fad6:	46c3      	mov	fp, r8
    fad8:	46a9      	mov	r9, r5
    fada:	46a0      	mov	r8, r4
    fadc:	0014      	movs	r4, r2
    fade:	464a      	mov	r2, r9
    fae0:	6032      	str	r2, [r6, #0]
    fae2:	4642      	mov	r2, r8
    fae4:	4444      	add	r4, r8
    fae6:	3301      	adds	r3, #1
    fae8:	6072      	str	r2, [r6, #4]
    faea:	60bc      	str	r4, [r7, #8]
    faec:	607b      	str	r3, [r7, #4]
    faee:	2b07      	cmp	r3, #7
    faf0:	dd00      	ble.n	faf4 <_vfprintf_r+0xd7c>
    faf2:	e2ea      	b.n	100ca <_vfprintf_r+0x1352>
    faf4:	3608      	adds	r6, #8
    faf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    faf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fafa:	4293      	cmp	r3, r2
    fafc:	db49      	blt.n	fb92 <_vfprintf_r+0xe1a>
    fafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb00:	07d2      	lsls	r2, r2, #31
    fb02:	d446      	bmi.n	fb92 <_vfprintf_r+0xe1a>
    fb04:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fb06:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fb08:	1ad3      	subs	r3, r2, r3
    fb0a:	1a52      	subs	r2, r2, r1
    fb0c:	4690      	mov	r8, r2
    fb0e:	429a      	cmp	r2, r3
    fb10:	dd00      	ble.n	fb14 <_vfprintf_r+0xd9c>
    fb12:	4698      	mov	r8, r3
    fb14:	4642      	mov	r2, r8
    fb16:	2a00      	cmp	r2, #0
    fb18:	dd0f      	ble.n	fb3a <_vfprintf_r+0xdc2>
    fb1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fb1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb1e:	468c      	mov	ip, r1
    fb20:	4462      	add	r2, ip
    fb22:	6032      	str	r2, [r6, #0]
    fb24:	4642      	mov	r2, r8
    fb26:	6072      	str	r2, [r6, #4]
    fb28:	687a      	ldr	r2, [r7, #4]
    fb2a:	4444      	add	r4, r8
    fb2c:	3201      	adds	r2, #1
    fb2e:	60bc      	str	r4, [r7, #8]
    fb30:	607a      	str	r2, [r7, #4]
    fb32:	2a07      	cmp	r2, #7
    fb34:	dd00      	ble.n	fb38 <_vfprintf_r+0xdc0>
    fb36:	e2a7      	b.n	10088 <_vfprintf_r+0x1310>
    fb38:	3608      	adds	r6, #8
    fb3a:	4642      	mov	r2, r8
    fb3c:	43d5      	mvns	r5, r2
    fb3e:	17ed      	asrs	r5, r5, #31
    fb40:	4015      	ands	r5, r2
    fb42:	1b5d      	subs	r5, r3, r5
    fb44:	2d00      	cmp	r5, #0
    fb46:	dc00      	bgt.n	fb4a <_vfprintf_r+0xdd2>
    fb48:	e4fc      	b.n	f544 <_vfprintf_r+0x7cc>
    fb4a:	4a38      	ldr	r2, [pc, #224]	; (fc2c <_vfprintf_r+0xeb4>)
    fb4c:	687b      	ldr	r3, [r7, #4]
    fb4e:	4691      	mov	r9, r2
    fb50:	2d10      	cmp	r5, #16
    fb52:	dd95      	ble.n	fa80 <_vfprintf_r+0xd08>
    fb54:	2210      	movs	r2, #16
    fb56:	4690      	mov	r8, r2
    fb58:	0022      	movs	r2, r4
    fb5a:	465c      	mov	r4, fp
    fb5c:	e003      	b.n	fb66 <_vfprintf_r+0xdee>
    fb5e:	3608      	adds	r6, #8
    fb60:	3d10      	subs	r5, #16
    fb62:	2d10      	cmp	r5, #16
    fb64:	dd8a      	ble.n	fa7c <_vfprintf_r+0xd04>
    fb66:	4649      	mov	r1, r9
    fb68:	6031      	str	r1, [r6, #0]
    fb6a:	4641      	mov	r1, r8
    fb6c:	3210      	adds	r2, #16
    fb6e:	3301      	adds	r3, #1
    fb70:	6071      	str	r1, [r6, #4]
    fb72:	60ba      	str	r2, [r7, #8]
    fb74:	607b      	str	r3, [r7, #4]
    fb76:	2b07      	cmp	r3, #7
    fb78:	ddf1      	ble.n	fb5e <_vfprintf_r+0xde6>
    fb7a:	003a      	movs	r2, r7
    fb7c:	0021      	movs	r1, r4
    fb7e:	9806      	ldr	r0, [sp, #24]
    fb80:	f003 fb42 	bl	13208 <__sprint_r>
    fb84:	2800      	cmp	r0, #0
    fb86:	d000      	beq.n	fb8a <_vfprintf_r+0xe12>
    fb88:	e5e0      	b.n	f74c <_vfprintf_r+0x9d4>
    fb8a:	68ba      	ldr	r2, [r7, #8]
    fb8c:	687b      	ldr	r3, [r7, #4]
    fb8e:	ae32      	add	r6, sp, #200	; 0xc8
    fb90:	e7e6      	b.n	fb60 <_vfprintf_r+0xde8>
    fb92:	9a19      	ldr	r2, [sp, #100]	; 0x64
    fb94:	6032      	str	r2, [r6, #0]
    fb96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fb98:	4694      	mov	ip, r2
    fb9a:	6072      	str	r2, [r6, #4]
    fb9c:	687a      	ldr	r2, [r7, #4]
    fb9e:	4464      	add	r4, ip
    fba0:	3201      	adds	r2, #1
    fba2:	60bc      	str	r4, [r7, #8]
    fba4:	607a      	str	r2, [r7, #4]
    fba6:	2a07      	cmp	r2, #7
    fba8:	dd00      	ble.n	fbac <_vfprintf_r+0xe34>
    fbaa:	e260      	b.n	1006e <_vfprintf_r+0x12f6>
    fbac:	3608      	adds	r6, #8
    fbae:	e7a9      	b.n	fb04 <_vfprintf_r+0xd8c>
    fbb0:	003a      	movs	r2, r7
    fbb2:	4659      	mov	r1, fp
    fbb4:	9806      	ldr	r0, [sp, #24]
    fbb6:	f003 fb27 	bl	13208 <__sprint_r>
    fbba:	2800      	cmp	r0, #0
    fbbc:	d000      	beq.n	fbc0 <_vfprintf_r+0xe48>
    fbbe:	e5f6      	b.n	f7ae <_vfprintf_r+0xa36>
    fbc0:	68bc      	ldr	r4, [r7, #8]
    fbc2:	687b      	ldr	r3, [r7, #4]
    fbc4:	ae32      	add	r6, sp, #200	; 0xc8
    fbc6:	e521      	b.n	f60c <_vfprintf_r+0x894>
    fbc8:	003a      	movs	r2, r7
    fbca:	4659      	mov	r1, fp
    fbcc:	9806      	ldr	r0, [sp, #24]
    fbce:	f003 fb1b 	bl	13208 <__sprint_r>
    fbd2:	2800      	cmp	r0, #0
    fbd4:	d000      	beq.n	fbd8 <_vfprintf_r+0xe60>
    fbd6:	e5ea      	b.n	f7ae <_vfprintf_r+0xa36>
    fbd8:	687b      	ldr	r3, [r7, #4]
    fbda:	68bc      	ldr	r4, [r7, #8]
    fbdc:	4698      	mov	r8, r3
    fbde:	ae32      	add	r6, sp, #200	; 0xc8
    fbe0:	e522      	b.n	f628 <_vfprintf_r+0x8b0>
    fbe2:	2207      	movs	r2, #7
    fbe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fbe6:	3307      	adds	r3, #7
    fbe8:	4393      	bics	r3, r2
    fbea:	3201      	adds	r2, #1
    fbec:	4694      	mov	ip, r2
    fbee:	449c      	add	ip, r3
    fbf0:	4662      	mov	r2, ip
    fbf2:	920f      	str	r2, [sp, #60]	; 0x3c
    fbf4:	681a      	ldr	r2, [r3, #0]
    fbf6:	685b      	ldr	r3, [r3, #4]
    fbf8:	920c      	str	r2, [sp, #48]	; 0x30
    fbfa:	930d      	str	r3, [sp, #52]	; 0x34
    fbfc:	f7ff fb8c 	bl	f318 <_vfprintf_r+0x5a0>
    fc00:	2207      	movs	r2, #7
    fc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fc04:	3307      	adds	r3, #7
    fc06:	4393      	bics	r3, r2
    fc08:	3201      	adds	r2, #1
    fc0a:	4694      	mov	ip, r2
    fc0c:	449c      	add	ip, r3
    fc0e:	4662      	mov	r2, ip
    fc10:	920f      	str	r2, [sp, #60]	; 0x3c
    fc12:	681a      	ldr	r2, [r3, #0]
    fc14:	685b      	ldr	r3, [r3, #4]
    fc16:	0011      	movs	r1, r2
    fc18:	001a      	movs	r2, r3
    fc1a:	0008      	movs	r0, r1
    fc1c:	4310      	orrs	r0, r2
    fc1e:	910c      	str	r1, [sp, #48]	; 0x30
    fc20:	920d      	str	r2, [sp, #52]	; 0x34
    fc22:	2301      	movs	r3, #1
    fc24:	0002      	movs	r2, r0
    fc26:	f7ff fae7 	bl	f1f8 <_vfprintf_r+0x480>
    fc2a:	46c0      	nop			; (mov r8, r8)
    fc2c:	00014bb8 	.word	0x00014bb8
    fc30:	46a3      	mov	fp, r4
    fc32:	4698      	mov	r8, r3
    fc34:	0014      	movs	r4, r2
    fc36:	464b      	mov	r3, r9
    fc38:	6075      	str	r5, [r6, #4]
    fc3a:	6033      	str	r3, [r6, #0]
    fc3c:	1964      	adds	r4, r4, r5
    fc3e:	e503      	b.n	f648 <_vfprintf_r+0x8d0>
    fc40:	2307      	movs	r3, #7
    fc42:	3207      	adds	r2, #7
    fc44:	439a      	bics	r2, r3
    fc46:	3301      	adds	r3, #1
    fc48:	469c      	mov	ip, r3
    fc4a:	4494      	add	ip, r2
    fc4c:	4663      	mov	r3, ip
    fc4e:	930f      	str	r3, [sp, #60]	; 0x3c
    fc50:	6853      	ldr	r3, [r2, #4]
    fc52:	6812      	ldr	r2, [r2, #0]
    fc54:	930d      	str	r3, [sp, #52]	; 0x34
    fc56:	920c      	str	r2, [sp, #48]	; 0x30
    fc58:	f7ff f9a2 	bl	efa0 <_vfprintf_r+0x228>
    fc5c:	2207      	movs	r2, #7
    fc5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fc60:	3307      	adds	r3, #7
    fc62:	4393      	bics	r3, r2
    fc64:	3201      	adds	r2, #1
    fc66:	4694      	mov	ip, r2
    fc68:	449c      	add	ip, r3
    fc6a:	4662      	mov	r2, ip
    fc6c:	920f      	str	r2, [sp, #60]	; 0x3c
    fc6e:	681a      	ldr	r2, [r3, #0]
    fc70:	685b      	ldr	r3, [r3, #4]
    fc72:	0011      	movs	r1, r2
    fc74:	001a      	movs	r2, r3
    fc76:	0008      	movs	r0, r1
    fc78:	4310      	orrs	r0, r2
    fc7a:	910c      	str	r1, [sp, #48]	; 0x30
    fc7c:	920d      	str	r2, [sp, #52]	; 0x34
    fc7e:	2300      	movs	r3, #0
    fc80:	0002      	movs	r2, r0
    fc82:	f7ff fab9 	bl	f1f8 <_vfprintf_r+0x480>
    fc86:	003a      	movs	r2, r7
    fc88:	4659      	mov	r1, fp
    fc8a:	9806      	ldr	r0, [sp, #24]
    fc8c:	f003 fabc 	bl	13208 <__sprint_r>
    fc90:	2800      	cmp	r0, #0
    fc92:	d000      	beq.n	fc96 <_vfprintf_r+0xf1e>
    fc94:	e58b      	b.n	f7ae <_vfprintf_r+0xa36>
    fc96:	68bc      	ldr	r4, [r7, #8]
    fc98:	ae32      	add	r6, sp, #200	; 0xc8
    fc9a:	f7ff fc09 	bl	f4b0 <_vfprintf_r+0x738>
    fc9e:	980c      	ldr	r0, [sp, #48]	; 0x30
    fca0:	990d      	ldr	r1, [sp, #52]	; 0x34
    fca2:	2300      	movs	r3, #0
    fca4:	4242      	negs	r2, r0
    fca6:	418b      	sbcs	r3, r1
    fca8:	0011      	movs	r1, r2
    fcaa:	001a      	movs	r2, r3
    fcac:	232d      	movs	r3, #45	; 0x2d
    fcae:	a816      	add	r0, sp, #88	; 0x58
    fcb0:	77c3      	strb	r3, [r0, #31]
    fcb2:	0008      	movs	r0, r1
    fcb4:	4310      	orrs	r0, r2
    fcb6:	910c      	str	r1, [sp, #48]	; 0x30
    fcb8:	920d      	str	r2, [sp, #52]	; 0x34
    fcba:	4698      	mov	r8, r3
    fcbc:	0002      	movs	r2, r0
    fcbe:	3b2c      	subs	r3, #44	; 0x2c
    fcc0:	f7ff f97b 	bl	efba <_vfprintf_r+0x242>
    fcc4:	9915      	ldr	r1, [sp, #84]	; 0x54
    fcc6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    fcc8:	000a      	movs	r2, r1
    fcca:	0008      	movs	r0, r1
    fccc:	002b      	movs	r3, r5
    fcce:	0029      	movs	r1, r5
    fcd0:	f003 fce6 	bl	136a0 <__aeabi_dcmpun>
    fcd4:	2800      	cmp	r0, #0
    fcd6:	d000      	beq.n	fcda <_vfprintf_r+0xf62>
    fcd8:	e2e8      	b.n	102ac <_vfprintf_r+0x1534>
    fcda:	4653      	mov	r3, sl
    fcdc:	3301      	adds	r3, #1
    fcde:	d100      	bne.n	fce2 <_vfprintf_r+0xf6a>
    fce0:	e1ff      	b.n	100e2 <_vfprintf_r+0x136a>
    fce2:	2320      	movs	r3, #32
    fce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fce6:	439a      	bics	r2, r3
    fce8:	920e      	str	r2, [sp, #56]	; 0x38
    fcea:	2a47      	cmp	r2, #71	; 0x47
    fcec:	d100      	bne.n	fcf0 <_vfprintf_r+0xf78>
    fcee:	e100      	b.n	fef2 <_vfprintf_r+0x117a>
    fcf0:	2380      	movs	r3, #128	; 0x80
    fcf2:	005b      	lsls	r3, r3, #1
    fcf4:	4323      	orrs	r3, r4
    fcf6:	9309      	str	r3, [sp, #36]	; 0x24
    fcf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	da00      	bge.n	fd00 <_vfprintf_r+0xf88>
    fcfe:	e216      	b.n	1012e <_vfprintf_r+0x13b6>
    fd00:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fd02:	9308      	str	r3, [sp, #32]
    fd04:	2300      	movs	r3, #0
    fd06:	4691      	mov	r9, r2
    fd08:	9310      	str	r3, [sp, #64]	; 0x40
    fd0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd0c:	2b66      	cmp	r3, #102	; 0x66
    fd0e:	d100      	bne.n	fd12 <_vfprintf_r+0xf9a>
    fd10:	e1f1      	b.n	100f6 <_vfprintf_r+0x137e>
    fd12:	2b46      	cmp	r3, #70	; 0x46
    fd14:	d100      	bne.n	fd18 <_vfprintf_r+0xfa0>
    fd16:	e0c0      	b.n	fe9a <_vfprintf_r+0x1122>
    fd18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fd1a:	9806      	ldr	r0, [sp, #24]
    fd1c:	3a45      	subs	r2, #69	; 0x45
    fd1e:	0013      	movs	r3, r2
    fd20:	4259      	negs	r1, r3
    fd22:	4159      	adcs	r1, r3
    fd24:	ab20      	add	r3, sp, #128	; 0x80
    fd26:	000d      	movs	r5, r1
    fd28:	9303      	str	r3, [sp, #12]
    fd2a:	ab1f      	add	r3, sp, #124	; 0x7c
    fd2c:	9302      	str	r3, [sp, #8]
    fd2e:	2302      	movs	r3, #2
    fd30:	aa23      	add	r2, sp, #140	; 0x8c
    fd32:	4455      	add	r5, sl
    fd34:	921b      	str	r2, [sp, #108]	; 0x6c
    fd36:	9204      	str	r2, [sp, #16]
    fd38:	9300      	str	r3, [sp, #0]
    fd3a:	9501      	str	r5, [sp, #4]
    fd3c:	9b08      	ldr	r3, [sp, #32]
    fd3e:	464a      	mov	r2, r9
    fd40:	f000 fc8a 	bl	10658 <_dtoa_r>
    fd44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd46:	9011      	str	r0, [sp, #68]	; 0x44
    fd48:	2b67      	cmp	r3, #103	; 0x67
    fd4a:	d000      	beq.n	fd4e <_vfprintf_r+0xfd6>
    fd4c:	e21e      	b.n	1018c <_vfprintf_r+0x1414>
    fd4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fd50:	4698      	mov	r8, r3
    fd52:	44a8      	add	r8, r5
    fd54:	07e3      	lsls	r3, r4, #31
    fd56:	d400      	bmi.n	fd5a <_vfprintf_r+0xfe2>
    fd58:	e27a      	b.n	10250 <_vfprintf_r+0x14d8>
    fd5a:	2300      	movs	r3, #0
    fd5c:	2200      	movs	r2, #0
    fd5e:	4648      	mov	r0, r9
    fd60:	9908      	ldr	r1, [sp, #32]
    fd62:	f7fc fdd9 	bl	c918 <__aeabi_dcmpeq>
    fd66:	4643      	mov	r3, r8
    fd68:	2800      	cmp	r0, #0
    fd6a:	d10a      	bne.n	fd82 <_vfprintf_r+0x100a>
    fd6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fd6e:	4543      	cmp	r3, r8
    fd70:	d207      	bcs.n	fd82 <_vfprintf_r+0x100a>
    fd72:	2130      	movs	r1, #48	; 0x30
    fd74:	4640      	mov	r0, r8
    fd76:	1c5a      	adds	r2, r3, #1
    fd78:	9223      	str	r2, [sp, #140]	; 0x8c
    fd7a:	7019      	strb	r1, [r3, #0]
    fd7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fd7e:	4298      	cmp	r0, r3
    fd80:	d8f9      	bhi.n	fd76 <_vfprintf_r+0xffe>
    fd82:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fd84:	1a9b      	subs	r3, r3, r2
    fd86:	9314      	str	r3, [sp, #80]	; 0x50
    fd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd8a:	2b47      	cmp	r3, #71	; 0x47
    fd8c:	d100      	bne.n	fd90 <_vfprintf_r+0x1018>
    fd8e:	e0ed      	b.n	ff6c <_vfprintf_r+0x11f4>
    fd90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd92:	2b65      	cmp	r3, #101	; 0x65
    fd94:	dc00      	bgt.n	fd98 <_vfprintf_r+0x1020>
    fd96:	e20b      	b.n	101b0 <_vfprintf_r+0x1438>
    fd98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd9a:	2b66      	cmp	r3, #102	; 0x66
    fd9c:	d100      	bne.n	fda0 <_vfprintf_r+0x1028>
    fd9e:	e1e2      	b.n	10166 <_vfprintf_r+0x13ee>
    fda0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fda2:	9313      	str	r3, [sp, #76]	; 0x4c
    fda4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fda6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fda8:	0019      	movs	r1, r3
    fdaa:	4291      	cmp	r1, r2
    fdac:	dd00      	ble.n	fdb0 <_vfprintf_r+0x1038>
    fdae:	e1c9      	b.n	10144 <_vfprintf_r+0x13cc>
    fdb0:	07e3      	lsls	r3, r4, #31
    fdb2:	d500      	bpl.n	fdb6 <_vfprintf_r+0x103e>
    fdb4:	e24e      	b.n	10254 <_vfprintf_r+0x14dc>
    fdb6:	43d3      	mvns	r3, r2
    fdb8:	17db      	asrs	r3, r3, #31
    fdba:	0011      	movs	r1, r2
    fdbc:	401a      	ands	r2, r3
    fdbe:	2367      	movs	r3, #103	; 0x67
    fdc0:	9208      	str	r2, [sp, #32]
    fdc2:	910e      	str	r1, [sp, #56]	; 0x38
    fdc4:	9312      	str	r3, [sp, #72]	; 0x48
    fdc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d000      	beq.n	fdce <_vfprintf_r+0x1056>
    fdcc:	e0c6      	b.n	ff5c <_vfprintf_r+0x11e4>
    fdce:	ab16      	add	r3, sp, #88	; 0x58
    fdd0:	7fdb      	ldrb	r3, [r3, #31]
    fdd2:	4698      	mov	r8, r3
    fdd4:	2300      	movs	r3, #0
    fdd6:	469a      	mov	sl, r3
    fdd8:	f7ff f919 	bl	f00e <_vfprintf_r+0x296>
    fddc:	46cb      	mov	fp, r9
    fdde:	46a1      	mov	r9, r4
    fde0:	0014      	movs	r4, r2
    fde2:	e64d      	b.n	fa80 <_vfprintf_r+0xd08>
    fde4:	003a      	movs	r2, r7
    fde6:	4659      	mov	r1, fp
    fde8:	9806      	ldr	r0, [sp, #24]
    fdea:	f003 fa0d 	bl	13208 <__sprint_r>
    fdee:	2800      	cmp	r0, #0
    fdf0:	d000      	beq.n	fdf4 <_vfprintf_r+0x107c>
    fdf2:	e4dc      	b.n	f7ae <_vfprintf_r+0xa36>
    fdf4:	ae32      	add	r6, sp, #200	; 0xc8
    fdf6:	e462      	b.n	f6be <_vfprintf_r+0x946>
    fdf8:	4be1      	ldr	r3, [pc, #900]	; (10180 <_vfprintf_r+0x1408>)
    fdfa:	3401      	adds	r4, #1
    fdfc:	6033      	str	r3, [r6, #0]
    fdfe:	2301      	movs	r3, #1
    fe00:	6073      	str	r3, [r6, #4]
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	60bc      	str	r4, [r7, #8]
    fe06:	3301      	adds	r3, #1
    fe08:	607b      	str	r3, [r7, #4]
    fe0a:	2b07      	cmp	r3, #7
    fe0c:	dc65      	bgt.n	feda <_vfprintf_r+0x1162>
    fe0e:	3608      	adds	r6, #8
    fe10:	2800      	cmp	r0, #0
    fe12:	d107      	bne.n	fe24 <_vfprintf_r+0x10ac>
    fe14:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fe16:	2b00      	cmp	r3, #0
    fe18:	d104      	bne.n	fe24 <_vfprintf_r+0x10ac>
    fe1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe1c:	07db      	lsls	r3, r3, #31
    fe1e:	d401      	bmi.n	fe24 <_vfprintf_r+0x10ac>
    fe20:	f7ff fb90 	bl	f544 <_vfprintf_r+0x7cc>
    fe24:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fe26:	6033      	str	r3, [r6, #0]
    fe28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fe2a:	1919      	adds	r1, r3, r4
    fe2c:	6073      	str	r3, [r6, #4]
    fe2e:	687b      	ldr	r3, [r7, #4]
    fe30:	60b9      	str	r1, [r7, #8]
    fe32:	3301      	adds	r3, #1
    fe34:	607b      	str	r3, [r7, #4]
    fe36:	2b07      	cmp	r3, #7
    fe38:	dd00      	ble.n	fe3c <_vfprintf_r+0x10c4>
    fe3a:	e1ea      	b.n	10212 <_vfprintf_r+0x149a>
    fe3c:	0032      	movs	r2, r6
    fe3e:	3208      	adds	r2, #8
    fe40:	2800      	cmp	r0, #0
    fe42:	da00      	bge.n	fe46 <_vfprintf_r+0x10ce>
    fe44:	e1c4      	b.n	101d0 <_vfprintf_r+0x1458>
    fe46:	9811      	ldr	r0, [sp, #68]	; 0x44
    fe48:	3301      	adds	r3, #1
    fe4a:	6010      	str	r0, [r2, #0]
    fe4c:	9814      	ldr	r0, [sp, #80]	; 0x50
    fe4e:	607b      	str	r3, [r7, #4]
    fe50:	1844      	adds	r4, r0, r1
    fe52:	6050      	str	r0, [r2, #4]
    fe54:	60bc      	str	r4, [r7, #8]
    fe56:	2b07      	cmp	r3, #7
    fe58:	dd01      	ble.n	fe5e <_vfprintf_r+0x10e6>
    fe5a:	f7ff fc0c 	bl	f676 <_vfprintf_r+0x8fe>
    fe5e:	3208      	adds	r2, #8
    fe60:	0016      	movs	r6, r2
    fe62:	f7ff fb6f 	bl	f544 <_vfprintf_r+0x7cc>
    fe66:	68bb      	ldr	r3, [r7, #8]
    fe68:	46d9      	mov	r9, fp
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d100      	bne.n	fe70 <_vfprintf_r+0x10f8>
    fe6e:	e46e      	b.n	f74e <_vfprintf_r+0x9d6>
    fe70:	003a      	movs	r2, r7
    fe72:	4659      	mov	r1, fp
    fe74:	9806      	ldr	r0, [sp, #24]
    fe76:	f003 f9c7 	bl	13208 <__sprint_r>
    fe7a:	e468      	b.n	f74e <_vfprintf_r+0x9d6>
    fe7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fe7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe80:	680b      	ldr	r3, [r1, #0]
    fe82:	601a      	str	r2, [r3, #0]
    fe84:	17d2      	asrs	r2, r2, #31
    fe86:	605a      	str	r2, [r3, #4]
    fe88:	000b      	movs	r3, r1
    fe8a:	3304      	adds	r3, #4
    fe8c:	930f      	str	r3, [sp, #60]	; 0x3c
    fe8e:	f7fe ffba 	bl	ee06 <_vfprintf_r+0x8e>
    fe92:	4bbc      	ldr	r3, [pc, #752]	; (10184 <_vfprintf_r+0x140c>)
    fe94:	9311      	str	r3, [sp, #68]	; 0x44
    fe96:	f7ff f954 	bl	f142 <_vfprintf_r+0x3ca>
    fe9a:	ab23      	add	r3, sp, #140	; 0x8c
    fe9c:	931b      	str	r3, [sp, #108]	; 0x6c
    fe9e:	9304      	str	r3, [sp, #16]
    fea0:	ab20      	add	r3, sp, #128	; 0x80
    fea2:	9303      	str	r3, [sp, #12]
    fea4:	ab1f      	add	r3, sp, #124	; 0x7c
    fea6:	9302      	str	r3, [sp, #8]
    fea8:	4653      	mov	r3, sl
    feaa:	9301      	str	r3, [sp, #4]
    feac:	2303      	movs	r3, #3
    feae:	464a      	mov	r2, r9
    feb0:	9300      	str	r3, [sp, #0]
    feb2:	9806      	ldr	r0, [sp, #24]
    feb4:	9b08      	ldr	r3, [sp, #32]
    feb6:	f000 fbcf 	bl	10658 <_dtoa_r>
    feba:	4655      	mov	r5, sl
    febc:	9011      	str	r0, [sp, #68]	; 0x44
    febe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fec0:	4698      	mov	r8, r3
    fec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fec4:	44a8      	add	r8, r5
    fec6:	2b46      	cmp	r3, #70	; 0x46
    fec8:	d000      	beq.n	fecc <_vfprintf_r+0x1154>
    feca:	e746      	b.n	fd5a <_vfprintf_r+0xfe2>
    fecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	2b30      	cmp	r3, #48	; 0x30
    fed2:	d015      	beq.n	ff00 <_vfprintf_r+0x1188>
    fed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fed6:	4498      	add	r8, r3
    fed8:	e73f      	b.n	fd5a <_vfprintf_r+0xfe2>
    feda:	003a      	movs	r2, r7
    fedc:	4659      	mov	r1, fp
    fede:	9806      	ldr	r0, [sp, #24]
    fee0:	f003 f992 	bl	13208 <__sprint_r>
    fee4:	2800      	cmp	r0, #0
    fee6:	d000      	beq.n	feea <_vfprintf_r+0x1172>
    fee8:	e461      	b.n	f7ae <_vfprintf_r+0xa36>
    feea:	981f      	ldr	r0, [sp, #124]	; 0x7c
    feec:	68bc      	ldr	r4, [r7, #8]
    feee:	ae32      	add	r6, sp, #200	; 0xc8
    fef0:	e78e      	b.n	fe10 <_vfprintf_r+0x1098>
    fef2:	4653      	mov	r3, sl
    fef4:	2b00      	cmp	r3, #0
    fef6:	d000      	beq.n	fefa <_vfprintf_r+0x1182>
    fef8:	e6fa      	b.n	fcf0 <_vfprintf_r+0xf78>
    fefa:	3301      	adds	r3, #1
    fefc:	469a      	mov	sl, r3
    fefe:	e6f7      	b.n	fcf0 <_vfprintf_r+0xf78>
    ff00:	2200      	movs	r2, #0
    ff02:	2300      	movs	r3, #0
    ff04:	4648      	mov	r0, r9
    ff06:	9908      	ldr	r1, [sp, #32]
    ff08:	f7fc fd06 	bl	c918 <__aeabi_dcmpeq>
    ff0c:	2800      	cmp	r0, #0
    ff0e:	d1e1      	bne.n	fed4 <_vfprintf_r+0x115c>
    ff10:	2301      	movs	r3, #1
    ff12:	1b5b      	subs	r3, r3, r5
    ff14:	931f      	str	r3, [sp, #124]	; 0x7c
    ff16:	4498      	add	r8, r3
    ff18:	e71f      	b.n	fd5a <_vfprintf_r+0xfe2>
    ff1a:	464b      	mov	r3, r9
    ff1c:	9a07      	ldr	r2, [sp, #28]
    ff1e:	431c      	orrs	r4, r3
    ff20:	3201      	adds	r2, #1
    ff22:	7813      	ldrb	r3, [r2, #0]
    ff24:	9207      	str	r2, [sp, #28]
    ff26:	f7fe ffa7 	bl	ee78 <_vfprintf_r+0x100>
    ff2a:	003a      	movs	r2, r7
    ff2c:	4659      	mov	r1, fp
    ff2e:	9806      	ldr	r0, [sp, #24]
    ff30:	f003 f96a 	bl	13208 <__sprint_r>
    ff34:	2800      	cmp	r0, #0
    ff36:	d000      	beq.n	ff3a <_vfprintf_r+0x11c2>
    ff38:	e439      	b.n	f7ae <_vfprintf_r+0xa36>
    ff3a:	68bc      	ldr	r4, [r7, #8]
    ff3c:	ae32      	add	r6, sp, #200	; 0xc8
    ff3e:	e573      	b.n	fa28 <_vfprintf_r+0xcb0>
    ff40:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ff42:	ab32      	add	r3, sp, #200	; 0xc8
    ff44:	1a9b      	subs	r3, r3, r2
    ff46:	930e      	str	r3, [sp, #56]	; 0x38
    ff48:	f7ff f859 	bl	effe <_vfprintf_r+0x286>
    ff4c:	9811      	ldr	r0, [sp, #68]	; 0x44
    ff4e:	f7fe fee1 	bl	ed14 <strlen>
    ff52:	0002      	movs	r2, r0
    ff54:	900e      	str	r0, [sp, #56]	; 0x38
    ff56:	0003      	movs	r3, r0
    ff58:	f7ff fa3f 	bl	f3da <_vfprintf_r+0x662>
    ff5c:	232d      	movs	r3, #45	; 0x2d
    ff5e:	aa16      	add	r2, sp, #88	; 0x58
    ff60:	77d3      	strb	r3, [r2, #31]
    ff62:	4698      	mov	r8, r3
    ff64:	2300      	movs	r3, #0
    ff66:	469a      	mov	sl, r3
    ff68:	f7ff f854 	bl	f014 <_vfprintf_r+0x29c>
    ff6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ff6e:	9313      	str	r3, [sp, #76]	; 0x4c
    ff70:	1cda      	adds	r2, r3, #3
    ff72:	db02      	blt.n	ff7a <_vfprintf_r+0x1202>
    ff74:	459a      	cmp	sl, r3
    ff76:	db00      	blt.n	ff7a <_vfprintf_r+0x1202>
    ff78:	e714      	b.n	fda4 <_vfprintf_r+0x102c>
    ff7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ff7c:	3b02      	subs	r3, #2
    ff7e:	9312      	str	r3, [sp, #72]	; 0x48
    ff80:	222c      	movs	r2, #44	; 0x2c
    ff82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff84:	2148      	movs	r1, #72	; 0x48
    ff86:	1e5d      	subs	r5, r3, #1
    ff88:	ab16      	add	r3, sp, #88	; 0x58
    ff8a:	189b      	adds	r3, r3, r2
    ff8c:	466a      	mov	r2, sp
    ff8e:	1852      	adds	r2, r2, r1
    ff90:	7812      	ldrb	r2, [r2, #0]
    ff92:	951f      	str	r5, [sp, #124]	; 0x7c
    ff94:	701a      	strb	r2, [r3, #0]
    ff96:	2d00      	cmp	r5, #0
    ff98:	da00      	bge.n	ff9c <_vfprintf_r+0x1224>
    ff9a:	e19c      	b.n	102d6 <_vfprintf_r+0x155e>
    ff9c:	212d      	movs	r1, #45	; 0x2d
    ff9e:	232b      	movs	r3, #43	; 0x2b
    ffa0:	aa16      	add	r2, sp, #88	; 0x58
    ffa2:	1852      	adds	r2, r2, r1
    ffa4:	7013      	strb	r3, [r2, #0]
    ffa6:	2d09      	cmp	r5, #9
    ffa8:	dc00      	bgt.n	ffac <_vfprintf_r+0x1234>
    ffaa:	e144      	b.n	10236 <_vfprintf_r+0x14be>
    ffac:	aa16      	add	r2, sp, #88	; 0x58
    ffae:	233b      	movs	r3, #59	; 0x3b
    ffb0:	4694      	mov	ip, r2
    ffb2:	4463      	add	r3, ip
    ffb4:	469a      	mov	sl, r3
    ffb6:	46b1      	mov	r9, r6
    ffb8:	46a0      	mov	r8, r4
    ffba:	4656      	mov	r6, sl
    ffbc:	e000      	b.n	ffc0 <_vfprintf_r+0x1248>
    ffbe:	0026      	movs	r6, r4
    ffc0:	0028      	movs	r0, r5
    ffc2:	210a      	movs	r1, #10
    ffc4:	f7fc fc92 	bl	c8ec <__aeabi_idivmod>
    ffc8:	1e74      	subs	r4, r6, #1
    ffca:	3130      	adds	r1, #48	; 0x30
    ffcc:	7021      	strb	r1, [r4, #0]
    ffce:	0028      	movs	r0, r5
    ffd0:	210a      	movs	r1, #10
    ffd2:	f7fc fba5 	bl	c720 <__divsi3>
    ffd6:	0005      	movs	r5, r0
    ffd8:	2809      	cmp	r0, #9
    ffda:	dcf0      	bgt.n	ffbe <_vfprintf_r+0x1246>
    ffdc:	0023      	movs	r3, r4
    ffde:	4644      	mov	r4, r8
    ffe0:	46b0      	mov	r8, r6
    ffe2:	464e      	mov	r6, r9
    ffe4:	4699      	mov	r9, r3
    ffe6:	0003      	movs	r3, r0
    ffe8:	3330      	adds	r3, #48	; 0x30
    ffea:	b2d8      	uxtb	r0, r3
    ffec:	4643      	mov	r3, r8
    ffee:	3b02      	subs	r3, #2
    fff0:	7018      	strb	r0, [r3, #0]
    fff2:	459a      	cmp	sl, r3
    fff4:	d800      	bhi.n	fff8 <_vfprintf_r+0x1280>
    fff6:	e1aa      	b.n	1034e <_vfprintf_r+0x15d6>
    fff8:	4642      	mov	r2, r8
    fffa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fffc:	4645      	mov	r5, r8
    fffe:	1a99      	subs	r1, r3, r2
   10000:	2301      	movs	r3, #1
   10002:	3107      	adds	r1, #7
   10004:	425b      	negs	r3, r3
   10006:	e001      	b.n	1000c <_vfprintf_r+0x1294>
   10008:	5ce8      	ldrb	r0, [r5, r3]
   1000a:	3301      	adds	r3, #1
   1000c:	aa21      	add	r2, sp, #132	; 0x84
   1000e:	18d2      	adds	r2, r2, r3
   10010:	70d0      	strb	r0, [r2, #3]
   10012:	428b      	cmp	r3, r1
   10014:	d1f8      	bne.n	10008 <_vfprintf_r+0x1290>
   10016:	a916      	add	r1, sp, #88	; 0x58
   10018:	468c      	mov	ip, r1
   1001a:	222e      	movs	r2, #46	; 0x2e
   1001c:	464b      	mov	r3, r9
   1001e:	4462      	add	r2, ip
   10020:	4694      	mov	ip, r2
   10022:	1afb      	subs	r3, r7, r3
   10024:	4463      	add	r3, ip
   10026:	aa21      	add	r2, sp, #132	; 0x84
   10028:	9914      	ldr	r1, [sp, #80]	; 0x50
   1002a:	1a9b      	subs	r3, r3, r2
   1002c:	469c      	mov	ip, r3
   1002e:	000a      	movs	r2, r1
   10030:	4462      	add	r2, ip
   10032:	931a      	str	r3, [sp, #104]	; 0x68
   10034:	920e      	str	r2, [sp, #56]	; 0x38
   10036:	2901      	cmp	r1, #1
   10038:	dc00      	bgt.n	1003c <_vfprintf_r+0x12c4>
   1003a:	e15c      	b.n	102f6 <_vfprintf_r+0x157e>
   1003c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1003e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10040:	4694      	mov	ip, r2
   10042:	4463      	add	r3, ip
   10044:	001a      	movs	r2, r3
   10046:	930e      	str	r3, [sp, #56]	; 0x38
   10048:	43db      	mvns	r3, r3
   1004a:	17db      	asrs	r3, r3, #31
   1004c:	401a      	ands	r2, r3
   1004e:	2300      	movs	r3, #0
   10050:	9208      	str	r2, [sp, #32]
   10052:	9313      	str	r3, [sp, #76]	; 0x4c
   10054:	e6b7      	b.n	fdc6 <_vfprintf_r+0x104e>
   10056:	003a      	movs	r2, r7
   10058:	4659      	mov	r1, fp
   1005a:	9806      	ldr	r0, [sp, #24]
   1005c:	f003 f8d4 	bl	13208 <__sprint_r>
   10060:	2800      	cmp	r0, #0
   10062:	d001      	beq.n	10068 <_vfprintf_r+0x12f0>
   10064:	f7ff fba3 	bl	f7ae <_vfprintf_r+0xa36>
   10068:	68bc      	ldr	r4, [r7, #8]
   1006a:	ae32      	add	r6, sp, #200	; 0xc8
   1006c:	e41c      	b.n	f8a8 <_vfprintf_r+0xb30>
   1006e:	003a      	movs	r2, r7
   10070:	4659      	mov	r1, fp
   10072:	9806      	ldr	r0, [sp, #24]
   10074:	f003 f8c8 	bl	13208 <__sprint_r>
   10078:	2800      	cmp	r0, #0
   1007a:	d001      	beq.n	10080 <_vfprintf_r+0x1308>
   1007c:	f7ff fb97 	bl	f7ae <_vfprintf_r+0xa36>
   10080:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10082:	68bc      	ldr	r4, [r7, #8]
   10084:	ae32      	add	r6, sp, #200	; 0xc8
   10086:	e53d      	b.n	fb04 <_vfprintf_r+0xd8c>
   10088:	003a      	movs	r2, r7
   1008a:	4659      	mov	r1, fp
   1008c:	9806      	ldr	r0, [sp, #24]
   1008e:	f003 f8bb 	bl	13208 <__sprint_r>
   10092:	2800      	cmp	r0, #0
   10094:	d001      	beq.n	1009a <_vfprintf_r+0x1322>
   10096:	f7ff fb8a 	bl	f7ae <_vfprintf_r+0xa36>
   1009a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1009c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1009e:	68bc      	ldr	r4, [r7, #8]
   100a0:	1a9b      	subs	r3, r3, r2
   100a2:	ae32      	add	r6, sp, #200	; 0xc8
   100a4:	e549      	b.n	fb3a <_vfprintf_r+0xdc2>
   100a6:	4653      	mov	r3, sl
   100a8:	9308      	str	r3, [sp, #32]
   100aa:	2b06      	cmp	r3, #6
   100ac:	d901      	bls.n	100b2 <_vfprintf_r+0x133a>
   100ae:	2306      	movs	r3, #6
   100b0:	9308      	str	r3, [sp, #32]
   100b2:	9b08      	ldr	r3, [sp, #32]
   100b4:	950f      	str	r5, [sp, #60]	; 0x3c
   100b6:	930e      	str	r3, [sp, #56]	; 0x38
   100b8:	2300      	movs	r3, #0
   100ba:	4698      	mov	r8, r3
   100bc:	469a      	mov	sl, r3
   100be:	9313      	str	r3, [sp, #76]	; 0x4c
   100c0:	4b31      	ldr	r3, [pc, #196]	; (10188 <_vfprintf_r+0x1410>)
   100c2:	9409      	str	r4, [sp, #36]	; 0x24
   100c4:	9311      	str	r3, [sp, #68]	; 0x44
   100c6:	f7fe ffa8 	bl	f01a <_vfprintf_r+0x2a2>
   100ca:	003a      	movs	r2, r7
   100cc:	4659      	mov	r1, fp
   100ce:	9806      	ldr	r0, [sp, #24]
   100d0:	f003 f89a 	bl	13208 <__sprint_r>
   100d4:	2800      	cmp	r0, #0
   100d6:	d001      	beq.n	100dc <_vfprintf_r+0x1364>
   100d8:	f7ff fb69 	bl	f7ae <_vfprintf_r+0xa36>
   100dc:	68bc      	ldr	r4, [r7, #8]
   100de:	ae32      	add	r6, sp, #200	; 0xc8
   100e0:	e509      	b.n	faf6 <_vfprintf_r+0xd7e>
   100e2:	2320      	movs	r3, #32
   100e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   100e6:	439a      	bics	r2, r3
   100e8:	3b1a      	subs	r3, #26
   100ea:	920e      	str	r2, [sp, #56]	; 0x38
   100ec:	469a      	mov	sl, r3
   100ee:	e5ff      	b.n	fcf0 <_vfprintf_r+0xf78>
   100f0:	46c1      	mov	r9, r8
   100f2:	f7ff fb2c 	bl	f74e <_vfprintf_r+0x9d6>
   100f6:	ab23      	add	r3, sp, #140	; 0x8c
   100f8:	931b      	str	r3, [sp, #108]	; 0x6c
   100fa:	9304      	str	r3, [sp, #16]
   100fc:	ab20      	add	r3, sp, #128	; 0x80
   100fe:	9303      	str	r3, [sp, #12]
   10100:	ab1f      	add	r3, sp, #124	; 0x7c
   10102:	9302      	str	r3, [sp, #8]
   10104:	4653      	mov	r3, sl
   10106:	9301      	str	r3, [sp, #4]
   10108:	2303      	movs	r3, #3
   1010a:	464a      	mov	r2, r9
   1010c:	9300      	str	r3, [sp, #0]
   1010e:	9806      	ldr	r0, [sp, #24]
   10110:	9b08      	ldr	r3, [sp, #32]
   10112:	f000 faa1 	bl	10658 <_dtoa_r>
   10116:	0003      	movs	r3, r0
   10118:	4453      	add	r3, sl
   1011a:	9011      	str	r0, [sp, #68]	; 0x44
   1011c:	4698      	mov	r8, r3
   1011e:	4655      	mov	r5, sl
   10120:	e6d4      	b.n	fecc <_vfprintf_r+0x1154>
   10122:	232d      	movs	r3, #45	; 0x2d
   10124:	aa16      	add	r2, sp, #88	; 0x58
   10126:	77d3      	strb	r3, [r2, #31]
   10128:	4698      	mov	r8, r3
   1012a:	f7ff f803 	bl	f134 <_vfprintf_r+0x3bc>
   1012e:	2280      	movs	r2, #128	; 0x80
   10130:	0612      	lsls	r2, r2, #24
   10132:	4694      	mov	ip, r2
   10134:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10136:	4699      	mov	r9, r3
   10138:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1013a:	4463      	add	r3, ip
   1013c:	9308      	str	r3, [sp, #32]
   1013e:	232d      	movs	r3, #45	; 0x2d
   10140:	9310      	str	r3, [sp, #64]	; 0x40
   10142:	e5e2      	b.n	fd0a <_vfprintf_r+0xf92>
   10144:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10146:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10148:	4694      	mov	ip, r2
   1014a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1014c:	4463      	add	r3, ip
   1014e:	930e      	str	r3, [sp, #56]	; 0x38
   10150:	2a00      	cmp	r2, #0
   10152:	dc00      	bgt.n	10156 <_vfprintf_r+0x13de>
   10154:	e0c8      	b.n	102e8 <_vfprintf_r+0x1570>
   10156:	001a      	movs	r2, r3
   10158:	43db      	mvns	r3, r3
   1015a:	17db      	asrs	r3, r3, #31
   1015c:	401a      	ands	r2, r3
   1015e:	2367      	movs	r3, #103	; 0x67
   10160:	9208      	str	r2, [sp, #32]
   10162:	9312      	str	r3, [sp, #72]	; 0x48
   10164:	e62f      	b.n	fdc6 <_vfprintf_r+0x104e>
   10166:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10168:	9313      	str	r3, [sp, #76]	; 0x4c
   1016a:	2b00      	cmp	r3, #0
   1016c:	dc00      	bgt.n	10170 <_vfprintf_r+0x13f8>
   1016e:	e0db      	b.n	10328 <_vfprintf_r+0x15b0>
   10170:	4652      	mov	r2, sl
   10172:	2a00      	cmp	r2, #0
   10174:	d175      	bne.n	10262 <_vfprintf_r+0x14ea>
   10176:	07e2      	lsls	r2, r4, #31
   10178:	d473      	bmi.n	10262 <_vfprintf_r+0x14ea>
   1017a:	9308      	str	r3, [sp, #32]
   1017c:	930e      	str	r3, [sp, #56]	; 0x38
   1017e:	e622      	b.n	fdc6 <_vfprintf_r+0x104e>
   10180:	00014ba4 	.word	0x00014ba4
   10184:	00014b64 	.word	0x00014b64
   10188:	00014b9c 	.word	0x00014b9c
   1018c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1018e:	4698      	mov	r8, r3
   10190:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10192:	44a8      	add	r8, r5
   10194:	2b47      	cmp	r3, #71	; 0x47
   10196:	d000      	beq.n	1019a <_vfprintf_r+0x1422>
   10198:	e5df      	b.n	fd5a <_vfprintf_r+0xfe2>
   1019a:	07e3      	lsls	r3, r4, #31
   1019c:	d500      	bpl.n	101a0 <_vfprintf_r+0x1428>
   1019e:	e68e      	b.n	febe <_vfprintf_r+0x1146>
   101a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   101a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   101a4:	1a9b      	subs	r3, r3, r2
   101a6:	9314      	str	r3, [sp, #80]	; 0x50
   101a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101aa:	2b47      	cmp	r3, #71	; 0x47
   101ac:	d100      	bne.n	101b0 <_vfprintf_r+0x1438>
   101ae:	e6dd      	b.n	ff6c <_vfprintf_r+0x11f4>
   101b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   101b2:	9313      	str	r3, [sp, #76]	; 0x4c
   101b4:	e6e4      	b.n	ff80 <_vfprintf_r+0x1208>
   101b6:	ab16      	add	r3, sp, #88	; 0x58
   101b8:	7fdb      	ldrb	r3, [r3, #31]
   101ba:	950f      	str	r5, [sp, #60]	; 0x3c
   101bc:	4698      	mov	r8, r3
   101be:	4653      	mov	r3, sl
   101c0:	9308      	str	r3, [sp, #32]
   101c2:	930e      	str	r3, [sp, #56]	; 0x38
   101c4:	2300      	movs	r3, #0
   101c6:	9409      	str	r4, [sp, #36]	; 0x24
   101c8:	469a      	mov	sl, r3
   101ca:	9313      	str	r3, [sp, #76]	; 0x4c
   101cc:	f7fe ff1f 	bl	f00e <_vfprintf_r+0x296>
   101d0:	4244      	negs	r4, r0
   101d2:	3010      	adds	r0, #16
   101d4:	db00      	blt.n	101d8 <_vfprintf_r+0x1460>
   101d6:	e0cf      	b.n	10378 <_vfprintf_r+0x1600>
   101d8:	486b      	ldr	r0, [pc, #428]	; (10388 <_vfprintf_r+0x1610>)
   101da:	2610      	movs	r6, #16
   101dc:	0005      	movs	r5, r0
   101de:	e003      	b.n	101e8 <_vfprintf_r+0x1470>
   101e0:	3208      	adds	r2, #8
   101e2:	3c10      	subs	r4, #16
   101e4:	2c10      	cmp	r4, #16
   101e6:	dd48      	ble.n	1027a <_vfprintf_r+0x1502>
   101e8:	3110      	adds	r1, #16
   101ea:	3301      	adds	r3, #1
   101ec:	6015      	str	r5, [r2, #0]
   101ee:	6056      	str	r6, [r2, #4]
   101f0:	60b9      	str	r1, [r7, #8]
   101f2:	607b      	str	r3, [r7, #4]
   101f4:	2b07      	cmp	r3, #7
   101f6:	ddf3      	ble.n	101e0 <_vfprintf_r+0x1468>
   101f8:	003a      	movs	r2, r7
   101fa:	4659      	mov	r1, fp
   101fc:	9806      	ldr	r0, [sp, #24]
   101fe:	f003 f803 	bl	13208 <__sprint_r>
   10202:	2800      	cmp	r0, #0
   10204:	d001      	beq.n	1020a <_vfprintf_r+0x1492>
   10206:	f7ff fad2 	bl	f7ae <_vfprintf_r+0xa36>
   1020a:	68b9      	ldr	r1, [r7, #8]
   1020c:	687b      	ldr	r3, [r7, #4]
   1020e:	aa32      	add	r2, sp, #200	; 0xc8
   10210:	e7e7      	b.n	101e2 <_vfprintf_r+0x146a>
   10212:	003a      	movs	r2, r7
   10214:	4659      	mov	r1, fp
   10216:	9806      	ldr	r0, [sp, #24]
   10218:	f002 fff6 	bl	13208 <__sprint_r>
   1021c:	2800      	cmp	r0, #0
   1021e:	d001      	beq.n	10224 <_vfprintf_r+0x14ac>
   10220:	f7ff fac5 	bl	f7ae <_vfprintf_r+0xa36>
   10224:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10226:	68b9      	ldr	r1, [r7, #8]
   10228:	687b      	ldr	r3, [r7, #4]
   1022a:	aa32      	add	r2, sp, #200	; 0xc8
   1022c:	e608      	b.n	fe40 <_vfprintf_r+0x10c8>
   1022e:	4642      	mov	r2, r8
   10230:	9207      	str	r2, [sp, #28]
   10232:	f7fe fe24 	bl	ee7e <_vfprintf_r+0x106>
   10236:	212e      	movs	r1, #46	; 0x2e
   10238:	2330      	movs	r3, #48	; 0x30
   1023a:	aa16      	add	r2, sp, #88	; 0x58
   1023c:	1852      	adds	r2, r2, r1
   1023e:	7013      	strb	r3, [r2, #0]
   10240:	002b      	movs	r3, r5
   10242:	aa16      	add	r2, sp, #88	; 0x58
   10244:	3101      	adds	r1, #1
   10246:	3330      	adds	r3, #48	; 0x30
   10248:	1852      	adds	r2, r2, r1
   1024a:	7013      	strb	r3, [r2, #0]
   1024c:	ab22      	add	r3, sp, #136	; 0x88
   1024e:	e6ea      	b.n	10026 <_vfprintf_r+0x12ae>
   10250:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10252:	e596      	b.n	fd82 <_vfprintf_r+0x100a>
   10254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10258:	4694      	mov	ip, r2
   1025a:	4463      	add	r3, ip
   1025c:	001a      	movs	r2, r3
   1025e:	930e      	str	r3, [sp, #56]	; 0x38
   10260:	e77a      	b.n	10158 <_vfprintf_r+0x13e0>
   10262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10266:	4694      	mov	ip, r2
   10268:	4463      	add	r3, ip
   1026a:	4453      	add	r3, sl
   1026c:	001a      	movs	r2, r3
   1026e:	930e      	str	r3, [sp, #56]	; 0x38
   10270:	43db      	mvns	r3, r3
   10272:	17db      	asrs	r3, r3, #31
   10274:	401a      	ands	r2, r3
   10276:	9208      	str	r2, [sp, #32]
   10278:	e5a5      	b.n	fdc6 <_vfprintf_r+0x104e>
   1027a:	46a9      	mov	r9, r5
   1027c:	4648      	mov	r0, r9
   1027e:	1909      	adds	r1, r1, r4
   10280:	3301      	adds	r3, #1
   10282:	6010      	str	r0, [r2, #0]
   10284:	6054      	str	r4, [r2, #4]
   10286:	60b9      	str	r1, [r7, #8]
   10288:	3208      	adds	r2, #8
   1028a:	607b      	str	r3, [r7, #4]
   1028c:	2b07      	cmp	r3, #7
   1028e:	dc00      	bgt.n	10292 <_vfprintf_r+0x151a>
   10290:	e5d9      	b.n	fe46 <_vfprintf_r+0x10ce>
   10292:	003a      	movs	r2, r7
   10294:	4659      	mov	r1, fp
   10296:	9806      	ldr	r0, [sp, #24]
   10298:	f002 ffb6 	bl	13208 <__sprint_r>
   1029c:	2800      	cmp	r0, #0
   1029e:	d001      	beq.n	102a4 <_vfprintf_r+0x152c>
   102a0:	f7ff fa85 	bl	f7ae <_vfprintf_r+0xa36>
   102a4:	68b9      	ldr	r1, [r7, #8]
   102a6:	687b      	ldr	r3, [r7, #4]
   102a8:	aa32      	add	r2, sp, #200	; 0xc8
   102aa:	e5cc      	b.n	fe46 <_vfprintf_r+0x10ce>
   102ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   102ae:	2b47      	cmp	r3, #71	; 0x47
   102b0:	dc0e      	bgt.n	102d0 <_vfprintf_r+0x1558>
   102b2:	4b36      	ldr	r3, [pc, #216]	; (1038c <_vfprintf_r+0x1614>)
   102b4:	9311      	str	r3, [sp, #68]	; 0x44
   102b6:	2380      	movs	r3, #128	; 0x80
   102b8:	439c      	bics	r4, r3
   102ba:	ab16      	add	r3, sp, #88	; 0x58
   102bc:	7fdb      	ldrb	r3, [r3, #31]
   102be:	9409      	str	r4, [sp, #36]	; 0x24
   102c0:	4698      	mov	r8, r3
   102c2:	f7fe ff41 	bl	f148 <_vfprintf_r+0x3d0>
   102c6:	4a30      	ldr	r2, [pc, #192]	; (10388 <_vfprintf_r+0x1610>)
   102c8:	687b      	ldr	r3, [r7, #4]
   102ca:	4691      	mov	r9, r2
   102cc:	f7ff fc07 	bl	fade <_vfprintf_r+0xd66>
   102d0:	4b2f      	ldr	r3, [pc, #188]	; (10390 <_vfprintf_r+0x1618>)
   102d2:	9311      	str	r3, [sp, #68]	; 0x44
   102d4:	e7ef      	b.n	102b6 <_vfprintf_r+0x153e>
   102d6:	2301      	movs	r3, #1
   102d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   102da:	391b      	subs	r1, #27
   102dc:	1a9d      	subs	r5, r3, r2
   102de:	aa16      	add	r2, sp, #88	; 0x58
   102e0:	332c      	adds	r3, #44	; 0x2c
   102e2:	1852      	adds	r2, r2, r1
   102e4:	7013      	strb	r3, [r2, #0]
   102e6:	e65e      	b.n	ffa6 <_vfprintf_r+0x122e>
   102e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   102ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   102ec:	1a98      	subs	r0, r3, r2
   102ee:	1c43      	adds	r3, r0, #1
   102f0:	001a      	movs	r2, r3
   102f2:	930e      	str	r3, [sp, #56]	; 0x38
   102f4:	e730      	b.n	10158 <_vfprintf_r+0x13e0>
   102f6:	2301      	movs	r3, #1
   102f8:	4023      	ands	r3, r4
   102fa:	9313      	str	r3, [sp, #76]	; 0x4c
   102fc:	d000      	beq.n	10300 <_vfprintf_r+0x1588>
   102fe:	e69d      	b.n	1003c <_vfprintf_r+0x12c4>
   10300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10302:	43d3      	mvns	r3, r2
   10304:	17db      	asrs	r3, r3, #31
   10306:	401a      	ands	r2, r3
   10308:	9208      	str	r2, [sp, #32]
   1030a:	e55c      	b.n	fdc6 <_vfprintf_r+0x104e>
   1030c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1030e:	1d1d      	adds	r5, r3, #4
   10310:	681b      	ldr	r3, [r3, #0]
   10312:	46a8      	mov	r8, r5
   10314:	469a      	mov	sl, r3
   10316:	2b00      	cmp	r3, #0
   10318:	db31      	blt.n	1037e <_vfprintf_r+0x1606>
   1031a:	4645      	mov	r5, r8
   1031c:	9b07      	ldr	r3, [sp, #28]
   1031e:	950f      	str	r5, [sp, #60]	; 0x3c
   10320:	785b      	ldrb	r3, [r3, #1]
   10322:	9207      	str	r2, [sp, #28]
   10324:	f7fe fda8 	bl	ee78 <_vfprintf_r+0x100>
   10328:	4653      	mov	r3, sl
   1032a:	2b00      	cmp	r3, #0
   1032c:	d101      	bne.n	10332 <_vfprintf_r+0x15ba>
   1032e:	07e3      	lsls	r3, r4, #31
   10330:	d503      	bpl.n	1033a <_vfprintf_r+0x15c2>
   10332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10334:	1c58      	adds	r0, r3, #1
   10336:	0003      	movs	r3, r0
   10338:	e797      	b.n	1026a <_vfprintf_r+0x14f2>
   1033a:	2301      	movs	r3, #1
   1033c:	e71d      	b.n	1017a <_vfprintf_r+0x1402>
   1033e:	ab16      	add	r3, sp, #88	; 0x58
   10340:	77d8      	strb	r0, [r3, #31]
   10342:	f7ff f870 	bl	f426 <_vfprintf_r+0x6ae>
   10346:	ab16      	add	r3, sp, #88	; 0x58
   10348:	77d8      	strb	r0, [r3, #31]
   1034a:	f7fe ff2e 	bl	f1aa <_vfprintf_r+0x432>
   1034e:	aa16      	add	r2, sp, #88	; 0x58
   10350:	232e      	movs	r3, #46	; 0x2e
   10352:	4694      	mov	ip, r2
   10354:	4463      	add	r3, ip
   10356:	e666      	b.n	10026 <_vfprintf_r+0x12ae>
   10358:	ab16      	add	r3, sp, #88	; 0x58
   1035a:	77d8      	strb	r0, [r3, #31]
   1035c:	f7fe feb5 	bl	f0ca <_vfprintf_r+0x352>
   10360:	ab16      	add	r3, sp, #88	; 0x58
   10362:	77d8      	strb	r0, [r3, #31]
   10364:	f7fe fe06 	bl	ef74 <_vfprintf_r+0x1fc>
   10368:	ab16      	add	r3, sp, #88	; 0x58
   1036a:	77d8      	strb	r0, [r3, #31]
   1036c:	f7ff f806 	bl	f37c <_vfprintf_r+0x604>
   10370:	ab16      	add	r3, sp, #88	; 0x58
   10372:	77d8      	strb	r0, [r3, #31]
   10374:	f7fe ffbd 	bl	f2f2 <_vfprintf_r+0x57a>
   10378:	4803      	ldr	r0, [pc, #12]	; (10388 <_vfprintf_r+0x1610>)
   1037a:	4681      	mov	r9, r0
   1037c:	e77e      	b.n	1027c <_vfprintf_r+0x1504>
   1037e:	2301      	movs	r3, #1
   10380:	425b      	negs	r3, r3
   10382:	469a      	mov	sl, r3
   10384:	e7c9      	b.n	1031a <_vfprintf_r+0x15a2>
   10386:	46c0      	nop			; (mov r8, r8)
   10388:	00014bb8 	.word	0x00014bb8
   1038c:	00014b6c 	.word	0x00014b6c
   10390:	00014b70 	.word	0x00014b70

00010394 <__sbprintf>:
   10394:	b570      	push	{r4, r5, r6, lr}
   10396:	0006      	movs	r6, r0
   10398:	2002      	movs	r0, #2
   1039a:	4c1a      	ldr	r4, [pc, #104]	; (10404 <__sbprintf+0x70>)
   1039c:	44a5      	add	sp, r4
   1039e:	000c      	movs	r4, r1
   103a0:	8989      	ldrh	r1, [r1, #12]
   103a2:	4381      	bics	r1, r0
   103a4:	4668      	mov	r0, sp
   103a6:	8181      	strh	r1, [r0, #12]
   103a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   103aa:	9119      	str	r1, [sp, #100]	; 0x64
   103ac:	89e1      	ldrh	r1, [r4, #14]
   103ae:	81c1      	strh	r1, [r0, #14]
   103b0:	69e1      	ldr	r1, [r4, #28]
   103b2:	0030      	movs	r0, r6
   103b4:	9107      	str	r1, [sp, #28]
   103b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   103b8:	9109      	str	r1, [sp, #36]	; 0x24
   103ba:	a91a      	add	r1, sp, #104	; 0x68
   103bc:	9100      	str	r1, [sp, #0]
   103be:	9104      	str	r1, [sp, #16]
   103c0:	2180      	movs	r1, #128	; 0x80
   103c2:	00c9      	lsls	r1, r1, #3
   103c4:	9102      	str	r1, [sp, #8]
   103c6:	9105      	str	r1, [sp, #20]
   103c8:	2100      	movs	r1, #0
   103ca:	9106      	str	r1, [sp, #24]
   103cc:	4669      	mov	r1, sp
   103ce:	f7fe fcd3 	bl	ed78 <_vfprintf_r>
   103d2:	1e05      	subs	r5, r0, #0
   103d4:	db05      	blt.n	103e2 <__sbprintf+0x4e>
   103d6:	4669      	mov	r1, sp
   103d8:	0030      	movs	r0, r6
   103da:	f001 f9a9 	bl	11730 <_fflush_r>
   103de:	2800      	cmp	r0, #0
   103e0:	d10c      	bne.n	103fc <__sbprintf+0x68>
   103e2:	466b      	mov	r3, sp
   103e4:	899b      	ldrh	r3, [r3, #12]
   103e6:	065b      	lsls	r3, r3, #25
   103e8:	d503      	bpl.n	103f2 <__sbprintf+0x5e>
   103ea:	2240      	movs	r2, #64	; 0x40
   103ec:	89a3      	ldrh	r3, [r4, #12]
   103ee:	4313      	orrs	r3, r2
   103f0:	81a3      	strh	r3, [r4, #12]
   103f2:	0028      	movs	r0, r5
   103f4:	238d      	movs	r3, #141	; 0x8d
   103f6:	00db      	lsls	r3, r3, #3
   103f8:	449d      	add	sp, r3
   103fa:	bd70      	pop	{r4, r5, r6, pc}
   103fc:	2501      	movs	r5, #1
   103fe:	426d      	negs	r5, r5
   10400:	e7ef      	b.n	103e2 <__sbprintf+0x4e>
   10402:	46c0      	nop			; (mov r8, r8)
   10404:	fffffb98 	.word	0xfffffb98

00010408 <__swsetup_r>:
   10408:	4b33      	ldr	r3, [pc, #204]	; (104d8 <__swsetup_r+0xd0>)
   1040a:	b570      	push	{r4, r5, r6, lr}
   1040c:	0005      	movs	r5, r0
   1040e:	6818      	ldr	r0, [r3, #0]
   10410:	000c      	movs	r4, r1
   10412:	2800      	cmp	r0, #0
   10414:	d002      	beq.n	1041c <__swsetup_r+0x14>
   10416:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10418:	2b00      	cmp	r3, #0
   1041a:	d03c      	beq.n	10496 <__swsetup_r+0x8e>
   1041c:	230c      	movs	r3, #12
   1041e:	5ee2      	ldrsh	r2, [r4, r3]
   10420:	b293      	uxth	r3, r2
   10422:	0719      	lsls	r1, r3, #28
   10424:	d50d      	bpl.n	10442 <__swsetup_r+0x3a>
   10426:	6921      	ldr	r1, [r4, #16]
   10428:	2900      	cmp	r1, #0
   1042a:	d015      	beq.n	10458 <__swsetup_r+0x50>
   1042c:	07da      	lsls	r2, r3, #31
   1042e:	d521      	bpl.n	10474 <__swsetup_r+0x6c>
   10430:	2300      	movs	r3, #0
   10432:	60a3      	str	r3, [r4, #8]
   10434:	6963      	ldr	r3, [r4, #20]
   10436:	2000      	movs	r0, #0
   10438:	425b      	negs	r3, r3
   1043a:	61a3      	str	r3, [r4, #24]
   1043c:	2900      	cmp	r1, #0
   1043e:	d021      	beq.n	10484 <__swsetup_r+0x7c>
   10440:	bd70      	pop	{r4, r5, r6, pc}
   10442:	06d9      	lsls	r1, r3, #27
   10444:	d53f      	bpl.n	104c6 <__swsetup_r+0xbe>
   10446:	075b      	lsls	r3, r3, #29
   10448:	d428      	bmi.n	1049c <__swsetup_r+0x94>
   1044a:	6921      	ldr	r1, [r4, #16]
   1044c:	2308      	movs	r3, #8
   1044e:	4313      	orrs	r3, r2
   10450:	81a3      	strh	r3, [r4, #12]
   10452:	b29b      	uxth	r3, r3
   10454:	2900      	cmp	r1, #0
   10456:	d1e9      	bne.n	1042c <__swsetup_r+0x24>
   10458:	22a0      	movs	r2, #160	; 0xa0
   1045a:	2080      	movs	r0, #128	; 0x80
   1045c:	0092      	lsls	r2, r2, #2
   1045e:	0080      	lsls	r0, r0, #2
   10460:	401a      	ands	r2, r3
   10462:	4282      	cmp	r2, r0
   10464:	d0e2      	beq.n	1042c <__swsetup_r+0x24>
   10466:	0021      	movs	r1, r4
   10468:	0028      	movs	r0, r5
   1046a:	f001 fd41 	bl	11ef0 <__smakebuf_r>
   1046e:	89a3      	ldrh	r3, [r4, #12]
   10470:	6921      	ldr	r1, [r4, #16]
   10472:	e7db      	b.n	1042c <__swsetup_r+0x24>
   10474:	2200      	movs	r2, #0
   10476:	079b      	lsls	r3, r3, #30
   10478:	d400      	bmi.n	1047c <__swsetup_r+0x74>
   1047a:	6962      	ldr	r2, [r4, #20]
   1047c:	60a2      	str	r2, [r4, #8]
   1047e:	2000      	movs	r0, #0
   10480:	2900      	cmp	r1, #0
   10482:	d1dd      	bne.n	10440 <__swsetup_r+0x38>
   10484:	220c      	movs	r2, #12
   10486:	5ea3      	ldrsh	r3, [r4, r2]
   10488:	061a      	lsls	r2, r3, #24
   1048a:	d5d9      	bpl.n	10440 <__swsetup_r+0x38>
   1048c:	2240      	movs	r2, #64	; 0x40
   1048e:	4313      	orrs	r3, r2
   10490:	81a3      	strh	r3, [r4, #12]
   10492:	3801      	subs	r0, #1
   10494:	e7d4      	b.n	10440 <__swsetup_r+0x38>
   10496:	f001 f9e1 	bl	1185c <__sinit>
   1049a:	e7bf      	b.n	1041c <__swsetup_r+0x14>
   1049c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1049e:	2900      	cmp	r1, #0
   104a0:	d00a      	beq.n	104b8 <__swsetup_r+0xb0>
   104a2:	0023      	movs	r3, r4
   104a4:	3340      	adds	r3, #64	; 0x40
   104a6:	4299      	cmp	r1, r3
   104a8:	d004      	beq.n	104b4 <__swsetup_r+0xac>
   104aa:	0028      	movs	r0, r5
   104ac:	f001 fa4c 	bl	11948 <_free_r>
   104b0:	230c      	movs	r3, #12
   104b2:	5ee2      	ldrsh	r2, [r4, r3]
   104b4:	2300      	movs	r3, #0
   104b6:	6323      	str	r3, [r4, #48]	; 0x30
   104b8:	2324      	movs	r3, #36	; 0x24
   104ba:	439a      	bics	r2, r3
   104bc:	2300      	movs	r3, #0
   104be:	6921      	ldr	r1, [r4, #16]
   104c0:	6063      	str	r3, [r4, #4]
   104c2:	6021      	str	r1, [r4, #0]
   104c4:	e7c2      	b.n	1044c <__swsetup_r+0x44>
   104c6:	2309      	movs	r3, #9
   104c8:	602b      	str	r3, [r5, #0]
   104ca:	2340      	movs	r3, #64	; 0x40
   104cc:	2001      	movs	r0, #1
   104ce:	431a      	orrs	r2, r3
   104d0:	81a2      	strh	r2, [r4, #12]
   104d2:	4240      	negs	r0, r0
   104d4:	e7b4      	b.n	10440 <__swsetup_r+0x38>
   104d6:	46c0      	nop			; (mov r8, r8)
   104d8:	20000138 	.word	0x20000138

000104dc <register_fini>:
   104dc:	4b03      	ldr	r3, [pc, #12]	; (104ec <register_fini+0x10>)
   104de:	b510      	push	{r4, lr}
   104e0:	2b00      	cmp	r3, #0
   104e2:	d002      	beq.n	104ea <register_fini+0xe>
   104e4:	4802      	ldr	r0, [pc, #8]	; (104f0 <register_fini+0x14>)
   104e6:	f000 f805 	bl	104f4 <atexit>
   104ea:	bd10      	pop	{r4, pc}
   104ec:	00000000 	.word	0x00000000
   104f0:	00011875 	.word	0x00011875

000104f4 <atexit>:
   104f4:	b510      	push	{r4, lr}
   104f6:	0001      	movs	r1, r0
   104f8:	2300      	movs	r3, #0
   104fa:	2200      	movs	r2, #0
   104fc:	2000      	movs	r0, #0
   104fe:	f002 feaf 	bl	13260 <__register_exitproc>
   10502:	bd10      	pop	{r4, pc}

00010504 <quorem>:
   10504:	b5f0      	push	{r4, r5, r6, r7, lr}
   10506:	4645      	mov	r5, r8
   10508:	4680      	mov	r8, r0
   1050a:	46de      	mov	lr, fp
   1050c:	4657      	mov	r7, sl
   1050e:	464e      	mov	r6, r9
   10510:	4642      	mov	r2, r8
   10512:	b5e0      	push	{r5, r6, r7, lr}
   10514:	690c      	ldr	r4, [r1, #16]
   10516:	6912      	ldr	r2, [r2, #16]
   10518:	b085      	sub	sp, #20
   1051a:	000b      	movs	r3, r1
   1051c:	9102      	str	r1, [sp, #8]
   1051e:	2000      	movs	r0, #0
   10520:	4294      	cmp	r4, r2
   10522:	dd00      	ble.n	10526 <quorem+0x22>
   10524:	e090      	b.n	10648 <quorem+0x144>
   10526:	2214      	movs	r2, #20
   10528:	4694      	mov	ip, r2
   1052a:	4463      	add	r3, ip
   1052c:	4699      	mov	r9, r3
   1052e:	464a      	mov	r2, r9
   10530:	3c01      	subs	r4, #1
   10532:	00a3      	lsls	r3, r4, #2
   10534:	18d6      	adds	r6, r2, r3
   10536:	2214      	movs	r2, #20
   10538:	4442      	add	r2, r8
   1053a:	4693      	mov	fp, r2
   1053c:	449b      	add	fp, r3
   1053e:	6833      	ldr	r3, [r6, #0]
   10540:	0015      	movs	r5, r2
   10542:	1c59      	adds	r1, r3, #1
   10544:	465b      	mov	r3, fp
   10546:	6818      	ldr	r0, [r3, #0]
   10548:	9201      	str	r2, [sp, #4]
   1054a:	f7fc f85f 	bl	c60c <__udivsi3>
   1054e:	1e03      	subs	r3, r0, #0
   10550:	9000      	str	r0, [sp, #0]
   10552:	d042      	beq.n	105da <quorem+0xd6>
   10554:	0029      	movs	r1, r5
   10556:	2700      	movs	r7, #0
   10558:	464d      	mov	r5, r9
   1055a:	2000      	movs	r0, #0
   1055c:	46b1      	mov	r9, r6
   1055e:	46a2      	mov	sl, r4
   10560:	003e      	movs	r6, r7
   10562:	0004      	movs	r4, r0
   10564:	469c      	mov	ip, r3
   10566:	002f      	movs	r7, r5
   10568:	0008      	movs	r0, r1
   1056a:	9503      	str	r5, [sp, #12]
   1056c:	4663      	mov	r3, ip
   1056e:	cf04      	ldmia	r7!, {r2}
   10570:	0415      	lsls	r5, r2, #16
   10572:	0c2d      	lsrs	r5, r5, #16
   10574:	435d      	muls	r5, r3
   10576:	0c12      	lsrs	r2, r2, #16
   10578:	435a      	muls	r2, r3
   1057a:	19ad      	adds	r5, r5, r6
   1057c:	0c2b      	lsrs	r3, r5, #16
   1057e:	18d2      	adds	r2, r2, r3
   10580:	6803      	ldr	r3, [r0, #0]
   10582:	042d      	lsls	r5, r5, #16
   10584:	0419      	lsls	r1, r3, #16
   10586:	0c09      	lsrs	r1, r1, #16
   10588:	1909      	adds	r1, r1, r4
   1058a:	0c16      	lsrs	r6, r2, #16
   1058c:	0c2d      	lsrs	r5, r5, #16
   1058e:	0412      	lsls	r2, r2, #16
   10590:	1b49      	subs	r1, r1, r5
   10592:	0c12      	lsrs	r2, r2, #16
   10594:	0c1b      	lsrs	r3, r3, #16
   10596:	1a9b      	subs	r3, r3, r2
   10598:	140a      	asrs	r2, r1, #16
   1059a:	189b      	adds	r3, r3, r2
   1059c:	0409      	lsls	r1, r1, #16
   1059e:	141c      	asrs	r4, r3, #16
   105a0:	0c09      	lsrs	r1, r1, #16
   105a2:	041b      	lsls	r3, r3, #16
   105a4:	4319      	orrs	r1, r3
   105a6:	c002      	stmia	r0!, {r1}
   105a8:	45b9      	cmp	r9, r7
   105aa:	d2df      	bcs.n	1056c <quorem+0x68>
   105ac:	9b03      	ldr	r3, [sp, #12]
   105ae:	464e      	mov	r6, r9
   105b0:	4699      	mov	r9, r3
   105b2:	465b      	mov	r3, fp
   105b4:	681b      	ldr	r3, [r3, #0]
   105b6:	4654      	mov	r4, sl
   105b8:	2b00      	cmp	r3, #0
   105ba:	d10e      	bne.n	105da <quorem+0xd6>
   105bc:	465b      	mov	r3, fp
   105be:	9a01      	ldr	r2, [sp, #4]
   105c0:	3b04      	subs	r3, #4
   105c2:	429a      	cmp	r2, r3
   105c4:	d304      	bcc.n	105d0 <quorem+0xcc>
   105c6:	e006      	b.n	105d6 <quorem+0xd2>
   105c8:	3b04      	subs	r3, #4
   105ca:	3c01      	subs	r4, #1
   105cc:	429a      	cmp	r2, r3
   105ce:	d202      	bcs.n	105d6 <quorem+0xd2>
   105d0:	6819      	ldr	r1, [r3, #0]
   105d2:	2900      	cmp	r1, #0
   105d4:	d0f8      	beq.n	105c8 <quorem+0xc4>
   105d6:	4643      	mov	r3, r8
   105d8:	611c      	str	r4, [r3, #16]
   105da:	9902      	ldr	r1, [sp, #8]
   105dc:	4640      	mov	r0, r8
   105de:	f002 fa9f 	bl	12b20 <__mcmp>
   105e2:	2800      	cmp	r0, #0
   105e4:	db2f      	blt.n	10646 <quorem+0x142>
   105e6:	464f      	mov	r7, r9
   105e8:	2000      	movs	r0, #0
   105ea:	9b00      	ldr	r3, [sp, #0]
   105ec:	9d01      	ldr	r5, [sp, #4]
   105ee:	3301      	adds	r3, #1
   105f0:	9300      	str	r3, [sp, #0]
   105f2:	682b      	ldr	r3, [r5, #0]
   105f4:	cf02      	ldmia	r7!, {r1}
   105f6:	041a      	lsls	r2, r3, #16
   105f8:	0c12      	lsrs	r2, r2, #16
   105fa:	1810      	adds	r0, r2, r0
   105fc:	040a      	lsls	r2, r1, #16
   105fe:	0c12      	lsrs	r2, r2, #16
   10600:	1a82      	subs	r2, r0, r2
   10602:	0c09      	lsrs	r1, r1, #16
   10604:	0c1b      	lsrs	r3, r3, #16
   10606:	1a5b      	subs	r3, r3, r1
   10608:	1411      	asrs	r1, r2, #16
   1060a:	185b      	adds	r3, r3, r1
   1060c:	0412      	lsls	r2, r2, #16
   1060e:	1418      	asrs	r0, r3, #16
   10610:	0c12      	lsrs	r2, r2, #16
   10612:	041b      	lsls	r3, r3, #16
   10614:	4313      	orrs	r3, r2
   10616:	c508      	stmia	r5!, {r3}
   10618:	42be      	cmp	r6, r7
   1061a:	d2ea      	bcs.n	105f2 <quorem+0xee>
   1061c:	9901      	ldr	r1, [sp, #4]
   1061e:	00a3      	lsls	r3, r4, #2
   10620:	468c      	mov	ip, r1
   10622:	4463      	add	r3, ip
   10624:	681a      	ldr	r2, [r3, #0]
   10626:	2a00      	cmp	r2, #0
   10628:	d10d      	bne.n	10646 <quorem+0x142>
   1062a:	3b04      	subs	r3, #4
   1062c:	000a      	movs	r2, r1
   1062e:	4299      	cmp	r1, r3
   10630:	d304      	bcc.n	1063c <quorem+0x138>
   10632:	e006      	b.n	10642 <quorem+0x13e>
   10634:	3b04      	subs	r3, #4
   10636:	3c01      	subs	r4, #1
   10638:	429a      	cmp	r2, r3
   1063a:	d202      	bcs.n	10642 <quorem+0x13e>
   1063c:	6819      	ldr	r1, [r3, #0]
   1063e:	2900      	cmp	r1, #0
   10640:	d0f8      	beq.n	10634 <quorem+0x130>
   10642:	4643      	mov	r3, r8
   10644:	611c      	str	r4, [r3, #16]
   10646:	9800      	ldr	r0, [sp, #0]
   10648:	b005      	add	sp, #20
   1064a:	bc3c      	pop	{r2, r3, r4, r5}
   1064c:	4690      	mov	r8, r2
   1064e:	4699      	mov	r9, r3
   10650:	46a2      	mov	sl, r4
   10652:	46ab      	mov	fp, r5
   10654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10656:	46c0      	nop			; (mov r8, r8)

00010658 <_dtoa_r>:
   10658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1065a:	4657      	mov	r7, sl
   1065c:	464e      	mov	r6, r9
   1065e:	4645      	mov	r5, r8
   10660:	46de      	mov	lr, fp
   10662:	b5e0      	push	{r5, r6, r7, lr}
   10664:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10666:	b099      	sub	sp, #100	; 0x64
   10668:	4682      	mov	sl, r0
   1066a:	001d      	movs	r5, r3
   1066c:	0016      	movs	r6, r2
   1066e:	001f      	movs	r7, r3
   10670:	2900      	cmp	r1, #0
   10672:	d009      	beq.n	10688 <_dtoa_r+0x30>
   10674:	2301      	movs	r3, #1
   10676:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10678:	4093      	lsls	r3, r2
   1067a:	604a      	str	r2, [r1, #4]
   1067c:	608b      	str	r3, [r1, #8]
   1067e:	f002 f843 	bl	12708 <_Bfree>
   10682:	2300      	movs	r3, #0
   10684:	4652      	mov	r2, sl
   10686:	6413      	str	r3, [r2, #64]	; 0x40
   10688:	46b8      	mov	r8, r7
   1068a:	2f00      	cmp	r7, #0
   1068c:	db37      	blt.n	106fe <_dtoa_r+0xa6>
   1068e:	2300      	movs	r3, #0
   10690:	9a25      	ldr	r2, [sp, #148]	; 0x94
   10692:	6013      	str	r3, [r2, #0]
   10694:	4642      	mov	r2, r8
   10696:	4bd6      	ldr	r3, [pc, #856]	; (109f0 <_dtoa_r+0x398>)
   10698:	401a      	ands	r2, r3
   1069a:	429a      	cmp	r2, r3
   1069c:	d018      	beq.n	106d0 <_dtoa_r+0x78>
   1069e:	2200      	movs	r2, #0
   106a0:	2300      	movs	r3, #0
   106a2:	0030      	movs	r0, r6
   106a4:	0039      	movs	r1, r7
   106a6:	f7fc f937 	bl	c918 <__aeabi_dcmpeq>
   106aa:	2800      	cmp	r0, #0
   106ac:	d02f      	beq.n	1070e <_dtoa_r+0xb6>
   106ae:	2301      	movs	r3, #1
   106b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   106b2:	6013      	str	r3, [r2, #0]
   106b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   106b6:	2b00      	cmp	r3, #0
   106b8:	d100      	bne.n	106bc <_dtoa_r+0x64>
   106ba:	e22a      	b.n	10b12 <_dtoa_r+0x4ba>
   106bc:	48cd      	ldr	r0, [pc, #820]	; (109f4 <_dtoa_r+0x39c>)
   106be:	6018      	str	r0, [r3, #0]
   106c0:	3801      	subs	r0, #1
   106c2:	b019      	add	sp, #100	; 0x64
   106c4:	bc3c      	pop	{r2, r3, r4, r5}
   106c6:	4690      	mov	r8, r2
   106c8:	4699      	mov	r9, r3
   106ca:	46a2      	mov	sl, r4
   106cc:	46ab      	mov	fp, r5
   106ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106d0:	4bc9      	ldr	r3, [pc, #804]	; (109f8 <_dtoa_r+0x3a0>)
   106d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   106d4:	6013      	str	r3, [r2, #0]
   106d6:	2e00      	cmp	r6, #0
   106d8:	d10b      	bne.n	106f2 <_dtoa_r+0x9a>
   106da:	4643      	mov	r3, r8
   106dc:	0318      	lsls	r0, r3, #12
   106de:	d108      	bne.n	106f2 <_dtoa_r+0x9a>
   106e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   106e2:	48c6      	ldr	r0, [pc, #792]	; (109fc <_dtoa_r+0x3a4>)
   106e4:	2b00      	cmp	r3, #0
   106e6:	d0ec      	beq.n	106c2 <_dtoa_r+0x6a>
   106e8:	0003      	movs	r3, r0
   106ea:	3308      	adds	r3, #8
   106ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   106ee:	6013      	str	r3, [r2, #0]
   106f0:	e7e7      	b.n	106c2 <_dtoa_r+0x6a>
   106f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   106f4:	48c2      	ldr	r0, [pc, #776]	; (10a00 <_dtoa_r+0x3a8>)
   106f6:	2b00      	cmp	r3, #0
   106f8:	d0e3      	beq.n	106c2 <_dtoa_r+0x6a>
   106fa:	1cc3      	adds	r3, r0, #3
   106fc:	e7f6      	b.n	106ec <_dtoa_r+0x94>
   106fe:	2301      	movs	r3, #1
   10700:	9a25      	ldr	r2, [sp, #148]	; 0x94
   10702:	0068      	lsls	r0, r5, #1
   10704:	6013      	str	r3, [r2, #0]
   10706:	0843      	lsrs	r3, r0, #1
   10708:	4698      	mov	r8, r3
   1070a:	001f      	movs	r7, r3
   1070c:	e7c2      	b.n	10694 <_dtoa_r+0x3c>
   1070e:	ab16      	add	r3, sp, #88	; 0x58
   10710:	9301      	str	r3, [sp, #4]
   10712:	ab17      	add	r3, sp, #92	; 0x5c
   10714:	9300      	str	r3, [sp, #0]
   10716:	0032      	movs	r2, r6
   10718:	003b      	movs	r3, r7
   1071a:	4650      	mov	r0, sl
   1071c:	f002 fab6 	bl	12c8c <__d2b>
   10720:	4643      	mov	r3, r8
   10722:	4683      	mov	fp, r0
   10724:	0d1a      	lsrs	r2, r3, #20
   10726:	d100      	bne.n	1072a <_dtoa_r+0xd2>
   10728:	e1d6      	b.n	10ad8 <_dtoa_r+0x480>
   1072a:	033b      	lsls	r3, r7, #12
   1072c:	4cb5      	ldr	r4, [pc, #724]	; (10a04 <_dtoa_r+0x3ac>)
   1072e:	0b1b      	lsrs	r3, r3, #12
   10730:	431c      	orrs	r4, r3
   10732:	4bb5      	ldr	r3, [pc, #724]	; (10a08 <_dtoa_r+0x3b0>)
   10734:	0030      	movs	r0, r6
   10736:	4698      	mov	r8, r3
   10738:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1073a:	0021      	movs	r1, r4
   1073c:	4699      	mov	r9, r3
   1073e:	2300      	movs	r3, #0
   10740:	4490      	add	r8, r2
   10742:	930f      	str	r3, [sp, #60]	; 0x3c
   10744:	2200      	movs	r2, #0
   10746:	4bb1      	ldr	r3, [pc, #708]	; (10a0c <_dtoa_r+0x3b4>)
   10748:	f7fd fdc2 	bl	e2d0 <__aeabi_dsub>
   1074c:	4ab0      	ldr	r2, [pc, #704]	; (10a10 <_dtoa_r+0x3b8>)
   1074e:	4bb1      	ldr	r3, [pc, #708]	; (10a14 <_dtoa_r+0x3bc>)
   10750:	f7fd fb3e 	bl	ddd0 <__aeabi_dmul>
   10754:	4ab0      	ldr	r2, [pc, #704]	; (10a18 <_dtoa_r+0x3c0>)
   10756:	4bb1      	ldr	r3, [pc, #708]	; (10a1c <_dtoa_r+0x3c4>)
   10758:	f7fc fbf6 	bl	cf48 <__aeabi_dadd>
   1075c:	0004      	movs	r4, r0
   1075e:	4640      	mov	r0, r8
   10760:	000d      	movs	r5, r1
   10762:	f7fe f8ff 	bl	e964 <__aeabi_i2d>
   10766:	4aae      	ldr	r2, [pc, #696]	; (10a20 <_dtoa_r+0x3c8>)
   10768:	4bae      	ldr	r3, [pc, #696]	; (10a24 <_dtoa_r+0x3cc>)
   1076a:	f7fd fb31 	bl	ddd0 <__aeabi_dmul>
   1076e:	0002      	movs	r2, r0
   10770:	000b      	movs	r3, r1
   10772:	0020      	movs	r0, r4
   10774:	0029      	movs	r1, r5
   10776:	f7fc fbe7 	bl	cf48 <__aeabi_dadd>
   1077a:	0004      	movs	r4, r0
   1077c:	000d      	movs	r5, r1
   1077e:	f7fe f8bd 	bl	e8fc <__aeabi_d2iz>
   10782:	2200      	movs	r2, #0
   10784:	9003      	str	r0, [sp, #12]
   10786:	2300      	movs	r3, #0
   10788:	0020      	movs	r0, r4
   1078a:	0029      	movs	r1, r5
   1078c:	f7fc f8ca 	bl	c924 <__aeabi_dcmplt>
   10790:	2800      	cmp	r0, #0
   10792:	d000      	beq.n	10796 <_dtoa_r+0x13e>
   10794:	e2b1      	b.n	10cfa <_dtoa_r+0x6a2>
   10796:	2301      	movs	r3, #1
   10798:	9c03      	ldr	r4, [sp, #12]
   1079a:	930c      	str	r3, [sp, #48]	; 0x30
   1079c:	2c16      	cmp	r4, #22
   1079e:	d810      	bhi.n	107c2 <_dtoa_r+0x16a>
   107a0:	49a1      	ldr	r1, [pc, #644]	; (10a28 <_dtoa_r+0x3d0>)
   107a2:	00e3      	lsls	r3, r4, #3
   107a4:	18c9      	adds	r1, r1, r3
   107a6:	0032      	movs	r2, r6
   107a8:	6808      	ldr	r0, [r1, #0]
   107aa:	6849      	ldr	r1, [r1, #4]
   107ac:	003b      	movs	r3, r7
   107ae:	f7fc f8cd 	bl	c94c <__aeabi_dcmpgt>
   107b2:	2800      	cmp	r0, #0
   107b4:	d100      	bne.n	107b8 <_dtoa_r+0x160>
   107b6:	e31d      	b.n	10df4 <_dtoa_r+0x79c>
   107b8:	0023      	movs	r3, r4
   107ba:	3b01      	subs	r3, #1
   107bc:	9303      	str	r3, [sp, #12]
   107be:	2300      	movs	r3, #0
   107c0:	930c      	str	r3, [sp, #48]	; 0x30
   107c2:	464b      	mov	r3, r9
   107c4:	4642      	mov	r2, r8
   107c6:	1a9a      	subs	r2, r3, r2
   107c8:	2300      	movs	r3, #0
   107ca:	9306      	str	r3, [sp, #24]
   107cc:	0013      	movs	r3, r2
   107ce:	3b01      	subs	r3, #1
   107d0:	9304      	str	r3, [sp, #16]
   107d2:	d500      	bpl.n	107d6 <_dtoa_r+0x17e>
   107d4:	e2a1      	b.n	10d1a <_dtoa_r+0x6c2>
   107d6:	9b03      	ldr	r3, [sp, #12]
   107d8:	2b00      	cmp	r3, #0
   107da:	da00      	bge.n	107de <_dtoa_r+0x186>
   107dc:	e284      	b.n	10ce8 <_dtoa_r+0x690>
   107de:	469c      	mov	ip, r3
   107e0:	930d      	str	r3, [sp, #52]	; 0x34
   107e2:	2300      	movs	r3, #0
   107e4:	9a04      	ldr	r2, [sp, #16]
   107e6:	4699      	mov	r9, r3
   107e8:	0011      	movs	r1, r2
   107ea:	4461      	add	r1, ip
   107ec:	9104      	str	r1, [sp, #16]
   107ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   107f0:	2b09      	cmp	r3, #9
   107f2:	d900      	bls.n	107f6 <_dtoa_r+0x19e>
   107f4:	e18f      	b.n	10b16 <_dtoa_r+0x4be>
   107f6:	2401      	movs	r4, #1
   107f8:	2b05      	cmp	r3, #5
   107fa:	dd02      	ble.n	10802 <_dtoa_r+0x1aa>
   107fc:	2400      	movs	r4, #0
   107fe:	3b04      	subs	r3, #4
   10800:	9322      	str	r3, [sp, #136]	; 0x88
   10802:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10804:	2b03      	cmp	r3, #3
   10806:	d101      	bne.n	1080c <_dtoa_r+0x1b4>
   10808:	f000 fcce 	bl	111a8 <_dtoa_r+0xb50>
   1080c:	dc01      	bgt.n	10812 <_dtoa_r+0x1ba>
   1080e:	f000 fc92 	bl	11136 <_dtoa_r+0xade>
   10812:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10814:	2b04      	cmp	r3, #4
   10816:	d101      	bne.n	1081c <_dtoa_r+0x1c4>
   10818:	f000 fc40 	bl	1109c <_dtoa_r+0xa44>
   1081c:	2301      	movs	r3, #1
   1081e:	930b      	str	r3, [sp, #44]	; 0x2c
   10820:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10822:	2b05      	cmp	r3, #5
   10824:	d001      	beq.n	1082a <_dtoa_r+0x1d2>
   10826:	f000 fc8b 	bl	11140 <_dtoa_r+0xae8>
   1082a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1082c:	9b03      	ldr	r3, [sp, #12]
   1082e:	4694      	mov	ip, r2
   10830:	4463      	add	r3, ip
   10832:	930e      	str	r3, [sp, #56]	; 0x38
   10834:	3301      	adds	r3, #1
   10836:	9307      	str	r3, [sp, #28]
   10838:	1e1d      	subs	r5, r3, #0
   1083a:	dc01      	bgt.n	10840 <_dtoa_r+0x1e8>
   1083c:	f000 fd49 	bl	112d2 <_dtoa_r+0xc7a>
   10840:	9b07      	ldr	r3, [sp, #28]
   10842:	4698      	mov	r8, r3
   10844:	2300      	movs	r3, #0
   10846:	4652      	mov	r2, sl
   10848:	2100      	movs	r1, #0
   1084a:	6453      	str	r3, [r2, #68]	; 0x44
   1084c:	2d17      	cmp	r5, #23
   1084e:	d90a      	bls.n	10866 <_dtoa_r+0x20e>
   10850:	2201      	movs	r2, #1
   10852:	3304      	adds	r3, #4
   10854:	005b      	lsls	r3, r3, #1
   10856:	0018      	movs	r0, r3
   10858:	3014      	adds	r0, #20
   1085a:	0011      	movs	r1, r2
   1085c:	3201      	adds	r2, #1
   1085e:	4285      	cmp	r5, r0
   10860:	d2f8      	bcs.n	10854 <_dtoa_r+0x1fc>
   10862:	4653      	mov	r3, sl
   10864:	6459      	str	r1, [r3, #68]	; 0x44
   10866:	4650      	mov	r0, sl
   10868:	f001 ff26 	bl	126b8 <_Balloc>
   1086c:	4653      	mov	r3, sl
   1086e:	6418      	str	r0, [r3, #64]	; 0x40
   10870:	4643      	mov	r3, r8
   10872:	900a      	str	r0, [sp, #40]	; 0x28
   10874:	2b0e      	cmp	r3, #14
   10876:	d900      	bls.n	1087a <_dtoa_r+0x222>
   10878:	e161      	b.n	10b3e <_dtoa_r+0x4e6>
   1087a:	2c00      	cmp	r4, #0
   1087c:	d100      	bne.n	10880 <_dtoa_r+0x228>
   1087e:	e15e      	b.n	10b3e <_dtoa_r+0x4e6>
   10880:	9610      	str	r6, [sp, #64]	; 0x40
   10882:	9711      	str	r7, [sp, #68]	; 0x44
   10884:	9e03      	ldr	r6, [sp, #12]
   10886:	2e00      	cmp	r6, #0
   10888:	dc01      	bgt.n	1088e <_dtoa_r+0x236>
   1088a:	f000 fd25 	bl	112d8 <_dtoa_r+0xc80>
   1088e:	0032      	movs	r2, r6
   10890:	210f      	movs	r1, #15
   10892:	4b65      	ldr	r3, [pc, #404]	; (10a28 <_dtoa_r+0x3d0>)
   10894:	400a      	ands	r2, r1
   10896:	00d2      	lsls	r2, r2, #3
   10898:	189b      	adds	r3, r3, r2
   1089a:	1136      	asrs	r6, r6, #4
   1089c:	681c      	ldr	r4, [r3, #0]
   1089e:	685d      	ldr	r5, [r3, #4]
   108a0:	06f3      	lsls	r3, r6, #27
   108a2:	d401      	bmi.n	108a8 <_dtoa_r+0x250>
   108a4:	f000 fcca 	bl	1123c <_dtoa_r+0xbe4>
   108a8:	4b60      	ldr	r3, [pc, #384]	; (10a2c <_dtoa_r+0x3d4>)
   108aa:	400e      	ands	r6, r1
   108ac:	6a1a      	ldr	r2, [r3, #32]
   108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   108b0:	9810      	ldr	r0, [sp, #64]	; 0x40
   108b2:	9911      	ldr	r1, [sp, #68]	; 0x44
   108b4:	f7fc fe58 	bl	d568 <__aeabi_ddiv>
   108b8:	2303      	movs	r3, #3
   108ba:	4698      	mov	r8, r3
   108bc:	9008      	str	r0, [sp, #32]
   108be:	9109      	str	r1, [sp, #36]	; 0x24
   108c0:	2e00      	cmp	r6, #0
   108c2:	d011      	beq.n	108e8 <_dtoa_r+0x290>
   108c4:	4f59      	ldr	r7, [pc, #356]	; (10a2c <_dtoa_r+0x3d4>)
   108c6:	2301      	movs	r3, #1
   108c8:	4233      	tst	r3, r6
   108ca:	d009      	beq.n	108e0 <_dtoa_r+0x288>
   108cc:	469c      	mov	ip, r3
   108ce:	683a      	ldr	r2, [r7, #0]
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	0020      	movs	r0, r4
   108d4:	0029      	movs	r1, r5
   108d6:	44e0      	add	r8, ip
   108d8:	f7fd fa7a 	bl	ddd0 <__aeabi_dmul>
   108dc:	0004      	movs	r4, r0
   108de:	000d      	movs	r5, r1
   108e0:	1076      	asrs	r6, r6, #1
   108e2:	3708      	adds	r7, #8
   108e4:	2e00      	cmp	r6, #0
   108e6:	d1ee      	bne.n	108c6 <_dtoa_r+0x26e>
   108e8:	0022      	movs	r2, r4
   108ea:	9808      	ldr	r0, [sp, #32]
   108ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   108ee:	002b      	movs	r3, r5
   108f0:	f7fc fe3a 	bl	d568 <__aeabi_ddiv>
   108f4:	0006      	movs	r6, r0
   108f6:	000f      	movs	r7, r1
   108f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108fa:	2b00      	cmp	r3, #0
   108fc:	d009      	beq.n	10912 <_dtoa_r+0x2ba>
   108fe:	2200      	movs	r2, #0
   10900:	4b40      	ldr	r3, [pc, #256]	; (10a04 <_dtoa_r+0x3ac>)
   10902:	0030      	movs	r0, r6
   10904:	0039      	movs	r1, r7
   10906:	f7fc f80d 	bl	c924 <__aeabi_dcmplt>
   1090a:	2800      	cmp	r0, #0
   1090c:	d001      	beq.n	10912 <_dtoa_r+0x2ba>
   1090e:	f000 fdc2 	bl	11496 <_dtoa_r+0xe3e>
   10912:	4640      	mov	r0, r8
   10914:	f7fe f826 	bl	e964 <__aeabi_i2d>
   10918:	0032      	movs	r2, r6
   1091a:	003b      	movs	r3, r7
   1091c:	f7fd fa58 	bl	ddd0 <__aeabi_dmul>
   10920:	2200      	movs	r2, #0
   10922:	4b43      	ldr	r3, [pc, #268]	; (10a30 <_dtoa_r+0x3d8>)
   10924:	f7fc fb10 	bl	cf48 <__aeabi_dadd>
   10928:	4a42      	ldr	r2, [pc, #264]	; (10a34 <_dtoa_r+0x3dc>)
   1092a:	000b      	movs	r3, r1
   1092c:	4694      	mov	ip, r2
   1092e:	4463      	add	r3, ip
   10930:	9008      	str	r0, [sp, #32]
   10932:	9109      	str	r1, [sp, #36]	; 0x24
   10934:	9309      	str	r3, [sp, #36]	; 0x24
   10936:	9b07      	ldr	r3, [sp, #28]
   10938:	2b00      	cmp	r3, #0
   1093a:	d101      	bne.n	10940 <_dtoa_r+0x2e8>
   1093c:	f000 fc50 	bl	111e0 <_dtoa_r+0xb88>
   10940:	9b03      	ldr	r3, [sp, #12]
   10942:	9313      	str	r3, [sp, #76]	; 0x4c
   10944:	9b07      	ldr	r3, [sp, #28]
   10946:	9312      	str	r3, [sp, #72]	; 0x48
   10948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1094a:	2b00      	cmp	r3, #0
   1094c:	d101      	bne.n	10952 <_dtoa_r+0x2fa>
   1094e:	f000 fd1d 	bl	1138c <_dtoa_r+0xd34>
   10952:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10954:	2000      	movs	r0, #0
   10956:	1e5a      	subs	r2, r3, #1
   10958:	4b33      	ldr	r3, [pc, #204]	; (10a28 <_dtoa_r+0x3d0>)
   1095a:	00d2      	lsls	r2, r2, #3
   1095c:	189b      	adds	r3, r3, r2
   1095e:	681a      	ldr	r2, [r3, #0]
   10960:	685b      	ldr	r3, [r3, #4]
   10962:	4935      	ldr	r1, [pc, #212]	; (10a38 <_dtoa_r+0x3e0>)
   10964:	f7fc fe00 	bl	d568 <__aeabi_ddiv>
   10968:	9a08      	ldr	r2, [sp, #32]
   1096a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1096c:	f7fd fcb0 	bl	e2d0 <__aeabi_dsub>
   10970:	9008      	str	r0, [sp, #32]
   10972:	9109      	str	r1, [sp, #36]	; 0x24
   10974:	0039      	movs	r1, r7
   10976:	0030      	movs	r0, r6
   10978:	f7fd ffc0 	bl	e8fc <__aeabi_d2iz>
   1097c:	0004      	movs	r4, r0
   1097e:	f7fd fff1 	bl	e964 <__aeabi_i2d>
   10982:	0002      	movs	r2, r0
   10984:	000b      	movs	r3, r1
   10986:	0030      	movs	r0, r6
   10988:	0039      	movs	r1, r7
   1098a:	f7fd fca1 	bl	e2d0 <__aeabi_dsub>
   1098e:	0005      	movs	r5, r0
   10990:	000e      	movs	r6, r1
   10992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10994:	3430      	adds	r4, #48	; 0x30
   10996:	1c51      	adds	r1, r2, #1
   10998:	b2e7      	uxtb	r7, r4
   1099a:	9114      	str	r1, [sp, #80]	; 0x50
   1099c:	7017      	strb	r7, [r2, #0]
   1099e:	0033      	movs	r3, r6
   109a0:	9808      	ldr	r0, [sp, #32]
   109a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   109a4:	002a      	movs	r2, r5
   109a6:	f7fb ffd1 	bl	c94c <__aeabi_dcmpgt>
   109aa:	2800      	cmp	r0, #0
   109ac:	d001      	beq.n	109b2 <_dtoa_r+0x35a>
   109ae:	f000 fdfe 	bl	115ae <_dtoa_r+0xf56>
   109b2:	002a      	movs	r2, r5
   109b4:	0033      	movs	r3, r6
   109b6:	2000      	movs	r0, #0
   109b8:	4912      	ldr	r1, [pc, #72]	; (10a04 <_dtoa_r+0x3ac>)
   109ba:	f7fd fc89 	bl	e2d0 <__aeabi_dsub>
   109be:	0002      	movs	r2, r0
   109c0:	000b      	movs	r3, r1
   109c2:	9808      	ldr	r0, [sp, #32]
   109c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   109c6:	f7fb ffc1 	bl	c94c <__aeabi_dcmpgt>
   109ca:	2800      	cmp	r0, #0
   109cc:	d001      	beq.n	109d2 <_dtoa_r+0x37a>
   109ce:	f000 fde7 	bl	115a0 <_dtoa_r+0xf48>
   109d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   109d4:	2b01      	cmp	r3, #1
   109d6:	d101      	bne.n	109dc <_dtoa_r+0x384>
   109d8:	f000 fc78 	bl	112cc <_dtoa_r+0xc74>
   109dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   109de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   109e0:	4694      	mov	ip, r2
   109e2:	4463      	add	r3, ip
   109e4:	4698      	mov	r8, r3
   109e6:	464b      	mov	r3, r9
   109e8:	9312      	str	r3, [sp, #72]	; 0x48
   109ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   109ec:	4699      	mov	r9, r3
   109ee:	e038      	b.n	10a62 <_dtoa_r+0x40a>
   109f0:	7ff00000 	.word	0x7ff00000
   109f4:	00014ba5 	.word	0x00014ba5
   109f8:	0000270f 	.word	0x0000270f
   109fc:	00014bc8 	.word	0x00014bc8
   10a00:	00014bd4 	.word	0x00014bd4
   10a04:	3ff00000 	.word	0x3ff00000
   10a08:	fffffc01 	.word	0xfffffc01
   10a0c:	3ff80000 	.word	0x3ff80000
   10a10:	636f4361 	.word	0x636f4361
   10a14:	3fd287a7 	.word	0x3fd287a7
   10a18:	8b60c8b3 	.word	0x8b60c8b3
   10a1c:	3fc68a28 	.word	0x3fc68a28
   10a20:	509f79fb 	.word	0x509f79fb
   10a24:	3fd34413 	.word	0x3fd34413
   10a28:	00014c10 	.word	0x00014c10
   10a2c:	00014be8 	.word	0x00014be8
   10a30:	401c0000 	.word	0x401c0000
   10a34:	fcc00000 	.word	0xfcc00000
   10a38:	3fe00000 	.word	0x3fe00000
   10a3c:	002a      	movs	r2, r5
   10a3e:	0033      	movs	r3, r6
   10a40:	2000      	movs	r0, #0
   10a42:	49b9      	ldr	r1, [pc, #740]	; (10d28 <_dtoa_r+0x6d0>)
   10a44:	f7fd fc44 	bl	e2d0 <__aeabi_dsub>
   10a48:	9a08      	ldr	r2, [sp, #32]
   10a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a4c:	f7fb ff6a 	bl	c924 <__aeabi_dcmplt>
   10a50:	2800      	cmp	r0, #0
   10a52:	d001      	beq.n	10a58 <_dtoa_r+0x400>
   10a54:	f000 fd74 	bl	11540 <_dtoa_r+0xee8>
   10a58:	46a1      	mov	r9, r4
   10a5a:	4544      	cmp	r4, r8
   10a5c:	d101      	bne.n	10a62 <_dtoa_r+0x40a>
   10a5e:	f000 fc33 	bl	112c8 <_dtoa_r+0xc70>
   10a62:	9808      	ldr	r0, [sp, #32]
   10a64:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a66:	2200      	movs	r2, #0
   10a68:	4bb0      	ldr	r3, [pc, #704]	; (10d2c <_dtoa_r+0x6d4>)
   10a6a:	f7fd f9b1 	bl	ddd0 <__aeabi_dmul>
   10a6e:	2200      	movs	r2, #0
   10a70:	4bae      	ldr	r3, [pc, #696]	; (10d2c <_dtoa_r+0x6d4>)
   10a72:	9008      	str	r0, [sp, #32]
   10a74:	9109      	str	r1, [sp, #36]	; 0x24
   10a76:	0028      	movs	r0, r5
   10a78:	0031      	movs	r1, r6
   10a7a:	f7fd f9a9 	bl	ddd0 <__aeabi_dmul>
   10a7e:	000d      	movs	r5, r1
   10a80:	0004      	movs	r4, r0
   10a82:	f7fd ff3b 	bl	e8fc <__aeabi_d2iz>
   10a86:	0007      	movs	r7, r0
   10a88:	f7fd ff6c 	bl	e964 <__aeabi_i2d>
   10a8c:	0002      	movs	r2, r0
   10a8e:	000b      	movs	r3, r1
   10a90:	0020      	movs	r0, r4
   10a92:	0029      	movs	r1, r5
   10a94:	f7fd fc1c 	bl	e2d0 <__aeabi_dsub>
   10a98:	464b      	mov	r3, r9
   10a9a:	3730      	adds	r7, #48	; 0x30
   10a9c:	b2ff      	uxtb	r7, r7
   10a9e:	1c5c      	adds	r4, r3, #1
   10aa0:	701f      	strb	r7, [r3, #0]
   10aa2:	9a08      	ldr	r2, [sp, #32]
   10aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aa6:	0005      	movs	r5, r0
   10aa8:	000e      	movs	r6, r1
   10aaa:	f7fb ff3b 	bl	c924 <__aeabi_dcmplt>
   10aae:	2800      	cmp	r0, #0
   10ab0:	d0c4      	beq.n	10a3c <_dtoa_r+0x3e4>
   10ab2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10ab4:	9303      	str	r3, [sp, #12]
   10ab6:	4659      	mov	r1, fp
   10ab8:	4650      	mov	r0, sl
   10aba:	f001 fe25 	bl	12708 <_Bfree>
   10abe:	2300      	movs	r3, #0
   10ac0:	7023      	strb	r3, [r4, #0]
   10ac2:	9b03      	ldr	r3, [sp, #12]
   10ac4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10ac6:	3301      	adds	r3, #1
   10ac8:	6013      	str	r3, [r2, #0]
   10aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10acc:	2b00      	cmp	r3, #0
   10ace:	d100      	bne.n	10ad2 <_dtoa_r+0x47a>
   10ad0:	e3a8      	b.n	11224 <_dtoa_r+0xbcc>
   10ad2:	601c      	str	r4, [r3, #0]
   10ad4:	980a      	ldr	r0, [sp, #40]	; 0x28
   10ad6:	e5f4      	b.n	106c2 <_dtoa_r+0x6a>
   10ad8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10ada:	4699      	mov	r9, r3
   10adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10ade:	444b      	add	r3, r9
   10ae0:	001c      	movs	r4, r3
   10ae2:	4b93      	ldr	r3, [pc, #588]	; (10d30 <_dtoa_r+0x6d8>)
   10ae4:	18e3      	adds	r3, r4, r3
   10ae6:	2b20      	cmp	r3, #32
   10ae8:	dc00      	bgt.n	10aec <_dtoa_r+0x494>
   10aea:	e17e      	b.n	10dea <_dtoa_r+0x792>
   10aec:	0031      	movs	r1, r6
   10aee:	4a91      	ldr	r2, [pc, #580]	; (10d34 <_dtoa_r+0x6dc>)
   10af0:	4640      	mov	r0, r8
   10af2:	18a2      	adds	r2, r4, r2
   10af4:	40d1      	lsrs	r1, r2
   10af6:	000a      	movs	r2, r1
   10af8:	2140      	movs	r1, #64	; 0x40
   10afa:	1acb      	subs	r3, r1, r3
   10afc:	4098      	lsls	r0, r3
   10afe:	4310      	orrs	r0, r2
   10b00:	f7fd ff72 	bl	e9e8 <__aeabi_ui2d>
   10b04:	1e63      	subs	r3, r4, #1
   10b06:	4698      	mov	r8, r3
   10b08:	2301      	movs	r3, #1
   10b0a:	4d8b      	ldr	r5, [pc, #556]	; (10d38 <_dtoa_r+0x6e0>)
   10b0c:	930f      	str	r3, [sp, #60]	; 0x3c
   10b0e:	1949      	adds	r1, r1, r5
   10b10:	e618      	b.n	10744 <_dtoa_r+0xec>
   10b12:	488a      	ldr	r0, [pc, #552]	; (10d3c <_dtoa_r+0x6e4>)
   10b14:	e5d5      	b.n	106c2 <_dtoa_r+0x6a>
   10b16:	2300      	movs	r3, #0
   10b18:	4652      	mov	r2, sl
   10b1a:	2100      	movs	r1, #0
   10b1c:	6453      	str	r3, [r2, #68]	; 0x44
   10b1e:	4650      	mov	r0, sl
   10b20:	f001 fdca 	bl	126b8 <_Balloc>
   10b24:	4653      	mov	r3, sl
   10b26:	6418      	str	r0, [r3, #64]	; 0x40
   10b28:	2301      	movs	r3, #1
   10b2a:	425b      	negs	r3, r3
   10b2c:	9307      	str	r3, [sp, #28]
   10b2e:	930e      	str	r3, [sp, #56]	; 0x38
   10b30:	3302      	adds	r3, #2
   10b32:	2200      	movs	r2, #0
   10b34:	930b      	str	r3, [sp, #44]	; 0x2c
   10b36:	2300      	movs	r3, #0
   10b38:	900a      	str	r0, [sp, #40]	; 0x28
   10b3a:	9223      	str	r2, [sp, #140]	; 0x8c
   10b3c:	9322      	str	r3, [sp, #136]	; 0x88
   10b3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10b40:	2b00      	cmp	r3, #0
   10b42:	da00      	bge.n	10b46 <_dtoa_r+0x4ee>
   10b44:	e0ab      	b.n	10c9e <_dtoa_r+0x646>
   10b46:	9a03      	ldr	r2, [sp, #12]
   10b48:	2a0e      	cmp	r2, #14
   10b4a:	dd00      	ble.n	10b4e <_dtoa_r+0x4f6>
   10b4c:	e0a7      	b.n	10c9e <_dtoa_r+0x646>
   10b4e:	4b7c      	ldr	r3, [pc, #496]	; (10d40 <_dtoa_r+0x6e8>)
   10b50:	00d2      	lsls	r2, r2, #3
   10b52:	189b      	adds	r3, r3, r2
   10b54:	685c      	ldr	r4, [r3, #4]
   10b56:	681b      	ldr	r3, [r3, #0]
   10b58:	9304      	str	r3, [sp, #16]
   10b5a:	9405      	str	r4, [sp, #20]
   10b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10b5e:	2b00      	cmp	r3, #0
   10b60:	da00      	bge.n	10b64 <_dtoa_r+0x50c>
   10b62:	e2a7      	b.n	110b4 <_dtoa_r+0xa5c>
   10b64:	9c04      	ldr	r4, [sp, #16]
   10b66:	9d05      	ldr	r5, [sp, #20]
   10b68:	0030      	movs	r0, r6
   10b6a:	0022      	movs	r2, r4
   10b6c:	002b      	movs	r3, r5
   10b6e:	0039      	movs	r1, r7
   10b70:	f7fc fcfa 	bl	d568 <__aeabi_ddiv>
   10b74:	f7fd fec2 	bl	e8fc <__aeabi_d2iz>
   10b78:	4680      	mov	r8, r0
   10b7a:	f7fd fef3 	bl	e964 <__aeabi_i2d>
   10b7e:	0022      	movs	r2, r4
   10b80:	002b      	movs	r3, r5
   10b82:	f7fd f925 	bl	ddd0 <__aeabi_dmul>
   10b86:	0002      	movs	r2, r0
   10b88:	000b      	movs	r3, r1
   10b8a:	0030      	movs	r0, r6
   10b8c:	0039      	movs	r1, r7
   10b8e:	f7fd fb9f 	bl	e2d0 <__aeabi_dsub>
   10b92:	4643      	mov	r3, r8
   10b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b96:	3330      	adds	r3, #48	; 0x30
   10b98:	7013      	strb	r3, [r2, #0]
   10b9a:	9b07      	ldr	r3, [sp, #28]
   10b9c:	0006      	movs	r6, r0
   10b9e:	000f      	movs	r7, r1
   10ba0:	1c54      	adds	r4, r2, #1
   10ba2:	2b01      	cmp	r3, #1
   10ba4:	d04e      	beq.n	10c44 <_dtoa_r+0x5ec>
   10ba6:	2200      	movs	r2, #0
   10ba8:	4b60      	ldr	r3, [pc, #384]	; (10d2c <_dtoa_r+0x6d4>)
   10baa:	f7fd f911 	bl	ddd0 <__aeabi_dmul>
   10bae:	2200      	movs	r2, #0
   10bb0:	2300      	movs	r3, #0
   10bb2:	0006      	movs	r6, r0
   10bb4:	000f      	movs	r7, r1
   10bb6:	f7fb feaf 	bl	c918 <__aeabi_dcmpeq>
   10bba:	2800      	cmp	r0, #0
   10bbc:	d000      	beq.n	10bc0 <_dtoa_r+0x568>
   10bbe:	e77a      	b.n	10ab6 <_dtoa_r+0x45e>
   10bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10bc2:	9a07      	ldr	r2, [sp, #28]
   10bc4:	1c9d      	adds	r5, r3, #2
   10bc6:	469c      	mov	ip, r3
   10bc8:	465b      	mov	r3, fp
   10bca:	9306      	str	r3, [sp, #24]
   10bcc:	4653      	mov	r3, sl
   10bce:	4462      	add	r2, ip
   10bd0:	46aa      	mov	sl, r5
   10bd2:	9c04      	ldr	r4, [sp, #16]
   10bd4:	9d05      	ldr	r5, [sp, #20]
   10bd6:	4691      	mov	r9, r2
   10bd8:	9307      	str	r3, [sp, #28]
   10bda:	e00f      	b.n	10bfc <_dtoa_r+0x5a4>
   10bdc:	2200      	movs	r2, #0
   10bde:	4b53      	ldr	r3, [pc, #332]	; (10d2c <_dtoa_r+0x6d4>)
   10be0:	f7fd f8f6 	bl	ddd0 <__aeabi_dmul>
   10be4:	2301      	movs	r3, #1
   10be6:	469c      	mov	ip, r3
   10be8:	2200      	movs	r2, #0
   10bea:	2300      	movs	r3, #0
   10bec:	0006      	movs	r6, r0
   10bee:	000f      	movs	r7, r1
   10bf0:	44e2      	add	sl, ip
   10bf2:	f7fb fe91 	bl	c918 <__aeabi_dcmpeq>
   10bf6:	2800      	cmp	r0, #0
   10bf8:	d000      	beq.n	10bfc <_dtoa_r+0x5a4>
   10bfa:	e2d9      	b.n	111b0 <_dtoa_r+0xb58>
   10bfc:	0022      	movs	r2, r4
   10bfe:	002b      	movs	r3, r5
   10c00:	0030      	movs	r0, r6
   10c02:	0039      	movs	r1, r7
   10c04:	f7fc fcb0 	bl	d568 <__aeabi_ddiv>
   10c08:	f7fd fe78 	bl	e8fc <__aeabi_d2iz>
   10c0c:	4680      	mov	r8, r0
   10c0e:	f7fd fea9 	bl	e964 <__aeabi_i2d>
   10c12:	0022      	movs	r2, r4
   10c14:	002b      	movs	r3, r5
   10c16:	f7fd f8db 	bl	ddd0 <__aeabi_dmul>
   10c1a:	0002      	movs	r2, r0
   10c1c:	000b      	movs	r3, r1
   10c1e:	0030      	movs	r0, r6
   10c20:	0039      	movs	r1, r7
   10c22:	f7fd fb55 	bl	e2d0 <__aeabi_dsub>
   10c26:	4653      	mov	r3, sl
   10c28:	4642      	mov	r2, r8
   10c2a:	3b01      	subs	r3, #1
   10c2c:	3230      	adds	r2, #48	; 0x30
   10c2e:	0006      	movs	r6, r0
   10c30:	000f      	movs	r7, r1
   10c32:	46d3      	mov	fp, sl
   10c34:	701a      	strb	r2, [r3, #0]
   10c36:	45d1      	cmp	r9, sl
   10c38:	d1d0      	bne.n	10bdc <_dtoa_r+0x584>
   10c3a:	9b06      	ldr	r3, [sp, #24]
   10c3c:	4654      	mov	r4, sl
   10c3e:	469b      	mov	fp, r3
   10c40:	9b07      	ldr	r3, [sp, #28]
   10c42:	469a      	mov	sl, r3
   10c44:	0032      	movs	r2, r6
   10c46:	003b      	movs	r3, r7
   10c48:	0030      	movs	r0, r6
   10c4a:	0039      	movs	r1, r7
   10c4c:	f7fc f97c 	bl	cf48 <__aeabi_dadd>
   10c50:	0006      	movs	r6, r0
   10c52:	000f      	movs	r7, r1
   10c54:	0002      	movs	r2, r0
   10c56:	000b      	movs	r3, r1
   10c58:	9804      	ldr	r0, [sp, #16]
   10c5a:	9905      	ldr	r1, [sp, #20]
   10c5c:	f7fb fe62 	bl	c924 <__aeabi_dcmplt>
   10c60:	2800      	cmp	r0, #0
   10c62:	d10c      	bne.n	10c7e <_dtoa_r+0x626>
   10c64:	9804      	ldr	r0, [sp, #16]
   10c66:	9905      	ldr	r1, [sp, #20]
   10c68:	0032      	movs	r2, r6
   10c6a:	003b      	movs	r3, r7
   10c6c:	f7fb fe54 	bl	c918 <__aeabi_dcmpeq>
   10c70:	2800      	cmp	r0, #0
   10c72:	d100      	bne.n	10c76 <_dtoa_r+0x61e>
   10c74:	e71f      	b.n	10ab6 <_dtoa_r+0x45e>
   10c76:	4643      	mov	r3, r8
   10c78:	07db      	lsls	r3, r3, #31
   10c7a:	d400      	bmi.n	10c7e <_dtoa_r+0x626>
   10c7c:	e71b      	b.n	10ab6 <_dtoa_r+0x45e>
   10c7e:	1e65      	subs	r5, r4, #1
   10c80:	782f      	ldrb	r7, [r5, #0]
   10c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c84:	e006      	b.n	10c94 <_dtoa_r+0x63c>
   10c86:	429d      	cmp	r5, r3
   10c88:	d100      	bne.n	10c8c <_dtoa_r+0x634>
   10c8a:	e351      	b.n	11330 <_dtoa_r+0xcd8>
   10c8c:	3c02      	subs	r4, #2
   10c8e:	7827      	ldrb	r7, [r4, #0]
   10c90:	002c      	movs	r4, r5
   10c92:	3d01      	subs	r5, #1
   10c94:	2f39      	cmp	r7, #57	; 0x39
   10c96:	d0f6      	beq.n	10c86 <_dtoa_r+0x62e>
   10c98:	3701      	adds	r7, #1
   10c9a:	702f      	strb	r7, [r5, #0]
   10c9c:	e70b      	b.n	10ab6 <_dtoa_r+0x45e>
   10c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10ca0:	2a00      	cmp	r2, #0
   10ca2:	d04f      	beq.n	10d44 <_dtoa_r+0x6ec>
   10ca4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10ca6:	2a01      	cmp	r2, #1
   10ca8:	dc00      	bgt.n	10cac <_dtoa_r+0x654>
   10caa:	e22c      	b.n	11106 <_dtoa_r+0xaae>
   10cac:	9b07      	ldr	r3, [sp, #28]
   10cae:	1e5c      	subs	r4, r3, #1
   10cb0:	464b      	mov	r3, r9
   10cb2:	45a1      	cmp	r9, r4
   10cb4:	da00      	bge.n	10cb8 <_dtoa_r+0x660>
   10cb6:	e2b8      	b.n	1122a <_dtoa_r+0xbd2>
   10cb8:	1b1c      	subs	r4, r3, r4
   10cba:	9b07      	ldr	r3, [sp, #28]
   10cbc:	2b00      	cmp	r3, #0
   10cbe:	da00      	bge.n	10cc2 <_dtoa_r+0x66a>
   10cc0:	e3d4      	b.n	1146c <_dtoa_r+0xe14>
   10cc2:	9b06      	ldr	r3, [sp, #24]
   10cc4:	9308      	str	r3, [sp, #32]
   10cc6:	9b07      	ldr	r3, [sp, #28]
   10cc8:	9a06      	ldr	r2, [sp, #24]
   10cca:	2101      	movs	r1, #1
   10ccc:	4694      	mov	ip, r2
   10cce:	449c      	add	ip, r3
   10cd0:	4662      	mov	r2, ip
   10cd2:	9206      	str	r2, [sp, #24]
   10cd4:	9a04      	ldr	r2, [sp, #16]
   10cd6:	4650      	mov	r0, sl
   10cd8:	4694      	mov	ip, r2
   10cda:	449c      	add	ip, r3
   10cdc:	4663      	mov	r3, ip
   10cde:	9304      	str	r3, [sp, #16]
   10ce0:	f001 fdaa 	bl	12838 <__i2b>
   10ce4:	4680      	mov	r8, r0
   10ce6:	e032      	b.n	10d4e <_dtoa_r+0x6f6>
   10ce8:	9a06      	ldr	r2, [sp, #24]
   10cea:	9b03      	ldr	r3, [sp, #12]
   10cec:	1ad2      	subs	r2, r2, r3
   10cee:	425b      	negs	r3, r3
   10cf0:	4699      	mov	r9, r3
   10cf2:	2300      	movs	r3, #0
   10cf4:	9206      	str	r2, [sp, #24]
   10cf6:	930d      	str	r3, [sp, #52]	; 0x34
   10cf8:	e579      	b.n	107ee <_dtoa_r+0x196>
   10cfa:	9803      	ldr	r0, [sp, #12]
   10cfc:	f7fd fe32 	bl	e964 <__aeabi_i2d>
   10d00:	000b      	movs	r3, r1
   10d02:	0002      	movs	r2, r0
   10d04:	0029      	movs	r1, r5
   10d06:	0020      	movs	r0, r4
   10d08:	f7fb fe06 	bl	c918 <__aeabi_dcmpeq>
   10d0c:	0002      	movs	r2, r0
   10d0e:	4250      	negs	r0, r2
   10d10:	4150      	adcs	r0, r2
   10d12:	9b03      	ldr	r3, [sp, #12]
   10d14:	1a1b      	subs	r3, r3, r0
   10d16:	9303      	str	r3, [sp, #12]
   10d18:	e53d      	b.n	10796 <_dtoa_r+0x13e>
   10d1a:	2301      	movs	r3, #1
   10d1c:	1a9b      	subs	r3, r3, r2
   10d1e:	9306      	str	r3, [sp, #24]
   10d20:	2300      	movs	r3, #0
   10d22:	9304      	str	r3, [sp, #16]
   10d24:	e557      	b.n	107d6 <_dtoa_r+0x17e>
   10d26:	46c0      	nop			; (mov r8, r8)
   10d28:	3ff00000 	.word	0x3ff00000
   10d2c:	40240000 	.word	0x40240000
   10d30:	00000432 	.word	0x00000432
   10d34:	00000412 	.word	0x00000412
   10d38:	fe100000 	.word	0xfe100000
   10d3c:	00014ba4 	.word	0x00014ba4
   10d40:	00014c10 	.word	0x00014c10
   10d44:	9b06      	ldr	r3, [sp, #24]
   10d46:	464c      	mov	r4, r9
   10d48:	9308      	str	r3, [sp, #32]
   10d4a:	2300      	movs	r3, #0
   10d4c:	4698      	mov	r8, r3
   10d4e:	9908      	ldr	r1, [sp, #32]
   10d50:	1e0b      	subs	r3, r1, #0
   10d52:	dd0e      	ble.n	10d72 <_dtoa_r+0x71a>
   10d54:	9a04      	ldr	r2, [sp, #16]
   10d56:	2a00      	cmp	r2, #0
   10d58:	dd0b      	ble.n	10d72 <_dtoa_r+0x71a>
   10d5a:	4293      	cmp	r3, r2
   10d5c:	dd00      	ble.n	10d60 <_dtoa_r+0x708>
   10d5e:	e187      	b.n	11070 <_dtoa_r+0xa18>
   10d60:	9a06      	ldr	r2, [sp, #24]
   10d62:	1ad2      	subs	r2, r2, r3
   10d64:	9206      	str	r2, [sp, #24]
   10d66:	9a08      	ldr	r2, [sp, #32]
   10d68:	1ad2      	subs	r2, r2, r3
   10d6a:	9208      	str	r2, [sp, #32]
   10d6c:	9a04      	ldr	r2, [sp, #16]
   10d6e:	1ad3      	subs	r3, r2, r3
   10d70:	9304      	str	r3, [sp, #16]
   10d72:	464b      	mov	r3, r9
   10d74:	2b00      	cmp	r3, #0
   10d76:	d01a      	beq.n	10dae <_dtoa_r+0x756>
   10d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d100      	bne.n	10d80 <_dtoa_r+0x728>
   10d7e:	e1bb      	b.n	110f8 <_dtoa_r+0xaa0>
   10d80:	2c00      	cmp	r4, #0
   10d82:	dd10      	ble.n	10da6 <_dtoa_r+0x74e>
   10d84:	4641      	mov	r1, r8
   10d86:	0022      	movs	r2, r4
   10d88:	4650      	mov	r0, sl
   10d8a:	f001 fe09 	bl	129a0 <__pow5mult>
   10d8e:	465a      	mov	r2, fp
   10d90:	0001      	movs	r1, r0
   10d92:	4680      	mov	r8, r0
   10d94:	4650      	mov	r0, sl
   10d96:	f001 fd59 	bl	1284c <__multiply>
   10d9a:	0005      	movs	r5, r0
   10d9c:	4659      	mov	r1, fp
   10d9e:	4650      	mov	r0, sl
   10da0:	f001 fcb2 	bl	12708 <_Bfree>
   10da4:	46ab      	mov	fp, r5
   10da6:	464b      	mov	r3, r9
   10da8:	1b1a      	subs	r2, r3, r4
   10daa:	d000      	beq.n	10dae <_dtoa_r+0x756>
   10dac:	e1a5      	b.n	110fa <_dtoa_r+0xaa2>
   10dae:	2101      	movs	r1, #1
   10db0:	4650      	mov	r0, sl
   10db2:	f001 fd41 	bl	12838 <__i2b>
   10db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10db8:	4681      	mov	r9, r0
   10dba:	2b00      	cmp	r3, #0
   10dbc:	dd1d      	ble.n	10dfa <_dtoa_r+0x7a2>
   10dbe:	001a      	movs	r2, r3
   10dc0:	0001      	movs	r1, r0
   10dc2:	4650      	mov	r0, sl
   10dc4:	f001 fdec 	bl	129a0 <__pow5mult>
   10dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10dca:	4681      	mov	r9, r0
   10dcc:	2b01      	cmp	r3, #1
   10dce:	dc00      	bgt.n	10dd2 <_dtoa_r+0x77a>
   10dd0:	e150      	b.n	11074 <_dtoa_r+0xa1c>
   10dd2:	2400      	movs	r4, #0
   10dd4:	464b      	mov	r3, r9
   10dd6:	691b      	ldr	r3, [r3, #16]
   10dd8:	3303      	adds	r3, #3
   10dda:	009b      	lsls	r3, r3, #2
   10ddc:	444b      	add	r3, r9
   10dde:	6858      	ldr	r0, [r3, #4]
   10de0:	f001 fce2 	bl	127a8 <__hi0bits>
   10de4:	2320      	movs	r3, #32
   10de6:	1a1b      	subs	r3, r3, r0
   10de8:	e010      	b.n	10e0c <_dtoa_r+0x7b4>
   10dea:	2220      	movs	r2, #32
   10dec:	0030      	movs	r0, r6
   10dee:	1ad3      	subs	r3, r2, r3
   10df0:	4098      	lsls	r0, r3
   10df2:	e685      	b.n	10b00 <_dtoa_r+0x4a8>
   10df4:	2300      	movs	r3, #0
   10df6:	930c      	str	r3, [sp, #48]	; 0x30
   10df8:	e4e3      	b.n	107c2 <_dtoa_r+0x16a>
   10dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10dfc:	2400      	movs	r4, #0
   10dfe:	2b01      	cmp	r3, #1
   10e00:	dc00      	bgt.n	10e04 <_dtoa_r+0x7ac>
   10e02:	e18b      	b.n	1111c <_dtoa_r+0xac4>
   10e04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10e06:	2301      	movs	r3, #1
   10e08:	2a00      	cmp	r2, #0
   10e0a:	d1e3      	bne.n	10dd4 <_dtoa_r+0x77c>
   10e0c:	9904      	ldr	r1, [sp, #16]
   10e0e:	201f      	movs	r0, #31
   10e10:	468c      	mov	ip, r1
   10e12:	4463      	add	r3, ip
   10e14:	4018      	ands	r0, r3
   10e16:	d100      	bne.n	10e1a <_dtoa_r+0x7c2>
   10e18:	e0ae      	b.n	10f78 <_dtoa_r+0x920>
   10e1a:	2320      	movs	r3, #32
   10e1c:	1a1b      	subs	r3, r3, r0
   10e1e:	2b04      	cmp	r3, #4
   10e20:	dc00      	bgt.n	10e24 <_dtoa_r+0x7cc>
   10e22:	e3cc      	b.n	115be <_dtoa_r+0xf66>
   10e24:	231c      	movs	r3, #28
   10e26:	1a18      	subs	r0, r3, r0
   10e28:	9b06      	ldr	r3, [sp, #24]
   10e2a:	469c      	mov	ip, r3
   10e2c:	4484      	add	ip, r0
   10e2e:	4663      	mov	r3, ip
   10e30:	9306      	str	r3, [sp, #24]
   10e32:	9b08      	ldr	r3, [sp, #32]
   10e34:	469c      	mov	ip, r3
   10e36:	4484      	add	ip, r0
   10e38:	4663      	mov	r3, ip
   10e3a:	468c      	mov	ip, r1
   10e3c:	4484      	add	ip, r0
   10e3e:	9308      	str	r3, [sp, #32]
   10e40:	4663      	mov	r3, ip
   10e42:	9304      	str	r3, [sp, #16]
   10e44:	9b06      	ldr	r3, [sp, #24]
   10e46:	2b00      	cmp	r3, #0
   10e48:	dd05      	ble.n	10e56 <_dtoa_r+0x7fe>
   10e4a:	4659      	mov	r1, fp
   10e4c:	001a      	movs	r2, r3
   10e4e:	4650      	mov	r0, sl
   10e50:	f001 fe06 	bl	12a60 <__lshift>
   10e54:	4683      	mov	fp, r0
   10e56:	9b04      	ldr	r3, [sp, #16]
   10e58:	2b00      	cmp	r3, #0
   10e5a:	dd05      	ble.n	10e68 <_dtoa_r+0x810>
   10e5c:	4649      	mov	r1, r9
   10e5e:	001a      	movs	r2, r3
   10e60:	4650      	mov	r0, sl
   10e62:	f001 fdfd 	bl	12a60 <__lshift>
   10e66:	4681      	mov	r9, r0
   10e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e6a:	2b00      	cmp	r3, #0
   10e6c:	d000      	beq.n	10e70 <_dtoa_r+0x818>
   10e6e:	e094      	b.n	10f9a <_dtoa_r+0x942>
   10e70:	9b07      	ldr	r3, [sp, #28]
   10e72:	2b00      	cmp	r3, #0
   10e74:	dc00      	bgt.n	10e78 <_dtoa_r+0x820>
   10e76:	e175      	b.n	11164 <_dtoa_r+0xb0c>
   10e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	d100      	bne.n	10e80 <_dtoa_r+0x828>
   10e7e:	e0a6      	b.n	10fce <_dtoa_r+0x976>
   10e80:	9b08      	ldr	r3, [sp, #32]
   10e82:	2b00      	cmp	r3, #0
   10e84:	dd05      	ble.n	10e92 <_dtoa_r+0x83a>
   10e86:	4641      	mov	r1, r8
   10e88:	001a      	movs	r2, r3
   10e8a:	4650      	mov	r0, sl
   10e8c:	f001 fde8 	bl	12a60 <__lshift>
   10e90:	4680      	mov	r8, r0
   10e92:	4643      	mov	r3, r8
   10e94:	930c      	str	r3, [sp, #48]	; 0x30
   10e96:	2c00      	cmp	r4, #0
   10e98:	d000      	beq.n	10e9c <_dtoa_r+0x844>
   10e9a:	e250      	b.n	1133e <_dtoa_r+0xce6>
   10e9c:	9c07      	ldr	r4, [sp, #28]
   10e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ea0:	3c01      	subs	r4, #1
   10ea2:	0023      	movs	r3, r4
   10ea4:	4694      	mov	ip, r2
   10ea6:	4463      	add	r3, ip
   10ea8:	9308      	str	r3, [sp, #32]
   10eaa:	2301      	movs	r3, #1
   10eac:	4033      	ands	r3, r6
   10eae:	9307      	str	r3, [sp, #28]
   10eb0:	464b      	mov	r3, r9
   10eb2:	9306      	str	r3, [sp, #24]
   10eb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10eb6:	4657      	mov	r7, sl
   10eb8:	4645      	mov	r5, r8
   10eba:	465e      	mov	r6, fp
   10ebc:	4692      	mov	sl, r2
   10ebe:	4698      	mov	r8, r3
   10ec0:	9b06      	ldr	r3, [sp, #24]
   10ec2:	0030      	movs	r0, r6
   10ec4:	0019      	movs	r1, r3
   10ec6:	4699      	mov	r9, r3
   10ec8:	f7ff fb1c 	bl	10504 <quorem>
   10ecc:	0003      	movs	r3, r0
   10ece:	900b      	str	r0, [sp, #44]	; 0x2c
   10ed0:	3330      	adds	r3, #48	; 0x30
   10ed2:	0029      	movs	r1, r5
   10ed4:	0030      	movs	r0, r6
   10ed6:	9304      	str	r3, [sp, #16]
   10ed8:	f001 fe22 	bl	12b20 <__mcmp>
   10edc:	4649      	mov	r1, r9
   10ede:	0004      	movs	r4, r0
   10ee0:	4642      	mov	r2, r8
   10ee2:	0038      	movs	r0, r7
   10ee4:	f001 fe36 	bl	12b54 <__mdiff>
   10ee8:	68c3      	ldr	r3, [r0, #12]
   10eea:	4681      	mov	r9, r0
   10eec:	2b00      	cmp	r3, #0
   10eee:	d000      	beq.n	10ef2 <_dtoa_r+0x89a>
   10ef0:	e11e      	b.n	11130 <_dtoa_r+0xad8>
   10ef2:	0001      	movs	r1, r0
   10ef4:	0030      	movs	r0, r6
   10ef6:	f001 fe13 	bl	12b20 <__mcmp>
   10efa:	4683      	mov	fp, r0
   10efc:	4649      	mov	r1, r9
   10efe:	0038      	movs	r0, r7
   10f00:	f001 fc02 	bl	12708 <_Bfree>
   10f04:	465b      	mov	r3, fp
   10f06:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10f08:	4313      	orrs	r3, r2
   10f0a:	d103      	bne.n	10f14 <_dtoa_r+0x8bc>
   10f0c:	9b07      	ldr	r3, [sp, #28]
   10f0e:	2b00      	cmp	r3, #0
   10f10:	d100      	bne.n	10f14 <_dtoa_r+0x8bc>
   10f12:	e306      	b.n	11522 <_dtoa_r+0xeca>
   10f14:	2c00      	cmp	r4, #0
   10f16:	da00      	bge.n	10f1a <_dtoa_r+0x8c2>
   10f18:	e1a8      	b.n	1126c <_dtoa_r+0xc14>
   10f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10f1c:	431c      	orrs	r4, r3
   10f1e:	d103      	bne.n	10f28 <_dtoa_r+0x8d0>
   10f20:	9b07      	ldr	r3, [sp, #28]
   10f22:	2b00      	cmp	r3, #0
   10f24:	d100      	bne.n	10f28 <_dtoa_r+0x8d0>
   10f26:	e1a1      	b.n	1126c <_dtoa_r+0xc14>
   10f28:	465b      	mov	r3, fp
   10f2a:	2b00      	cmp	r3, #0
   10f2c:	dd00      	ble.n	10f30 <_dtoa_r+0x8d8>
   10f2e:	e282      	b.n	11436 <_dtoa_r+0xdde>
   10f30:	4669      	mov	r1, sp
   10f32:	4652      	mov	r2, sl
   10f34:	4653      	mov	r3, sl
   10f36:	7c09      	ldrb	r1, [r1, #16]
   10f38:	1c5c      	adds	r4, r3, #1
   10f3a:	7011      	strb	r1, [r2, #0]
   10f3c:	9a08      	ldr	r2, [sp, #32]
   10f3e:	4552      	cmp	r2, sl
   10f40:	d100      	bne.n	10f44 <_dtoa_r+0x8ec>
   10f42:	e28a      	b.n	1145a <_dtoa_r+0xe02>
   10f44:	0031      	movs	r1, r6
   10f46:	2300      	movs	r3, #0
   10f48:	220a      	movs	r2, #10
   10f4a:	0038      	movs	r0, r7
   10f4c:	f001 fbe6 	bl	1271c <__multadd>
   10f50:	2300      	movs	r3, #0
   10f52:	0006      	movs	r6, r0
   10f54:	220a      	movs	r2, #10
   10f56:	0029      	movs	r1, r5
   10f58:	0038      	movs	r0, r7
   10f5a:	4545      	cmp	r5, r8
   10f5c:	d100      	bne.n	10f60 <_dtoa_r+0x908>
   10f5e:	e0e1      	b.n	11124 <_dtoa_r+0xacc>
   10f60:	f001 fbdc 	bl	1271c <__multadd>
   10f64:	4641      	mov	r1, r8
   10f66:	0005      	movs	r5, r0
   10f68:	2300      	movs	r3, #0
   10f6a:	220a      	movs	r2, #10
   10f6c:	0038      	movs	r0, r7
   10f6e:	f001 fbd5 	bl	1271c <__multadd>
   10f72:	46a2      	mov	sl, r4
   10f74:	4680      	mov	r8, r0
   10f76:	e7a3      	b.n	10ec0 <_dtoa_r+0x868>
   10f78:	201c      	movs	r0, #28
   10f7a:	9b06      	ldr	r3, [sp, #24]
   10f7c:	469c      	mov	ip, r3
   10f7e:	4484      	add	ip, r0
   10f80:	4663      	mov	r3, ip
   10f82:	9306      	str	r3, [sp, #24]
   10f84:	9b08      	ldr	r3, [sp, #32]
   10f86:	469c      	mov	ip, r3
   10f88:	4484      	add	ip, r0
   10f8a:	4663      	mov	r3, ip
   10f8c:	9308      	str	r3, [sp, #32]
   10f8e:	9b04      	ldr	r3, [sp, #16]
   10f90:	469c      	mov	ip, r3
   10f92:	4484      	add	ip, r0
   10f94:	4663      	mov	r3, ip
   10f96:	9304      	str	r3, [sp, #16]
   10f98:	e754      	b.n	10e44 <_dtoa_r+0x7ec>
   10f9a:	4649      	mov	r1, r9
   10f9c:	4658      	mov	r0, fp
   10f9e:	f001 fdbf 	bl	12b20 <__mcmp>
   10fa2:	2800      	cmp	r0, #0
   10fa4:	db00      	blt.n	10fa8 <_dtoa_r+0x950>
   10fa6:	e763      	b.n	10e70 <_dtoa_r+0x818>
   10fa8:	9b03      	ldr	r3, [sp, #12]
   10faa:	4659      	mov	r1, fp
   10fac:	3b01      	subs	r3, #1
   10fae:	9303      	str	r3, [sp, #12]
   10fb0:	220a      	movs	r2, #10
   10fb2:	2300      	movs	r3, #0
   10fb4:	4650      	mov	r0, sl
   10fb6:	f001 fbb1 	bl	1271c <__multadd>
   10fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10fbc:	4683      	mov	fp, r0
   10fbe:	2b00      	cmp	r3, #0
   10fc0:	d000      	beq.n	10fc4 <_dtoa_r+0x96c>
   10fc2:	e2ca      	b.n	1155a <_dtoa_r+0xf02>
   10fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fc6:	2b00      	cmp	r3, #0
   10fc8:	dc00      	bgt.n	10fcc <_dtoa_r+0x974>
   10fca:	e2d8      	b.n	1157e <_dtoa_r+0xf26>
   10fcc:	9307      	str	r3, [sp, #28]
   10fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10fd0:	465d      	mov	r5, fp
   10fd2:	2400      	movs	r4, #0
   10fd4:	9f07      	ldr	r7, [sp, #28]
   10fd6:	469b      	mov	fp, r3
   10fd8:	e006      	b.n	10fe8 <_dtoa_r+0x990>
   10fda:	0029      	movs	r1, r5
   10fdc:	2300      	movs	r3, #0
   10fde:	220a      	movs	r2, #10
   10fe0:	4650      	mov	r0, sl
   10fe2:	f001 fb9b 	bl	1271c <__multadd>
   10fe6:	0005      	movs	r5, r0
   10fe8:	4649      	mov	r1, r9
   10fea:	0028      	movs	r0, r5
   10fec:	f7ff fa8a 	bl	10504 <quorem>
   10ff0:	465b      	mov	r3, fp
   10ff2:	3030      	adds	r0, #48	; 0x30
   10ff4:	5518      	strb	r0, [r3, r4]
   10ff6:	3401      	adds	r4, #1
   10ff8:	42bc      	cmp	r4, r7
   10ffa:	dbee      	blt.n	10fda <_dtoa_r+0x982>
   10ffc:	46ab      	mov	fp, r5
   10ffe:	0006      	movs	r6, r0
   11000:	9c07      	ldr	r4, [sp, #28]
   11002:	2c00      	cmp	r4, #0
   11004:	dc00      	bgt.n	11008 <_dtoa_r+0x9b0>
   11006:	e237      	b.n	11478 <_dtoa_r+0xe20>
   11008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1100a:	2700      	movs	r7, #0
   1100c:	469c      	mov	ip, r3
   1100e:	4464      	add	r4, ip
   11010:	4659      	mov	r1, fp
   11012:	2201      	movs	r2, #1
   11014:	4650      	mov	r0, sl
   11016:	f001 fd23 	bl	12a60 <__lshift>
   1101a:	4649      	mov	r1, r9
   1101c:	4683      	mov	fp, r0
   1101e:	f001 fd7f 	bl	12b20 <__mcmp>
   11022:	2800      	cmp	r0, #0
   11024:	dc00      	bgt.n	11028 <_dtoa_r+0x9d0>
   11026:	e144      	b.n	112b2 <_dtoa_r+0xc5a>
   11028:	1e65      	subs	r5, r4, #1
   1102a:	782b      	ldrb	r3, [r5, #0]
   1102c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1102e:	e006      	b.n	1103e <_dtoa_r+0x9e6>
   11030:	4295      	cmp	r5, r2
   11032:	d100      	bne.n	11036 <_dtoa_r+0x9de>
   11034:	e0b1      	b.n	1119a <_dtoa_r+0xb42>
   11036:	3c02      	subs	r4, #2
   11038:	7823      	ldrb	r3, [r4, #0]
   1103a:	002c      	movs	r4, r5
   1103c:	3d01      	subs	r5, #1
   1103e:	2b39      	cmp	r3, #57	; 0x39
   11040:	d0f6      	beq.n	11030 <_dtoa_r+0x9d8>
   11042:	3301      	adds	r3, #1
   11044:	702b      	strb	r3, [r5, #0]
   11046:	4649      	mov	r1, r9
   11048:	4650      	mov	r0, sl
   1104a:	f001 fb5d 	bl	12708 <_Bfree>
   1104e:	4643      	mov	r3, r8
   11050:	2b00      	cmp	r3, #0
   11052:	d100      	bne.n	11056 <_dtoa_r+0x9fe>
   11054:	e52f      	b.n	10ab6 <_dtoa_r+0x45e>
   11056:	2f00      	cmp	r7, #0
   11058:	d005      	beq.n	11066 <_dtoa_r+0xa0e>
   1105a:	4547      	cmp	r7, r8
   1105c:	d003      	beq.n	11066 <_dtoa_r+0xa0e>
   1105e:	0039      	movs	r1, r7
   11060:	4650      	mov	r0, sl
   11062:	f001 fb51 	bl	12708 <_Bfree>
   11066:	4641      	mov	r1, r8
   11068:	4650      	mov	r0, sl
   1106a:	f001 fb4d 	bl	12708 <_Bfree>
   1106e:	e522      	b.n	10ab6 <_dtoa_r+0x45e>
   11070:	0013      	movs	r3, r2
   11072:	e675      	b.n	10d60 <_dtoa_r+0x708>
   11074:	2e00      	cmp	r6, #0
   11076:	d000      	beq.n	1107a <_dtoa_r+0xa22>
   11078:	e6ab      	b.n	10dd2 <_dtoa_r+0x77a>
   1107a:	033b      	lsls	r3, r7, #12
   1107c:	2400      	movs	r4, #0
   1107e:	2b00      	cmp	r3, #0
   11080:	d000      	beq.n	11084 <_dtoa_r+0xa2c>
   11082:	e6bf      	b.n	10e04 <_dtoa_r+0x7ac>
   11084:	4bba      	ldr	r3, [pc, #744]	; (11370 <_dtoa_r+0xd18>)
   11086:	423b      	tst	r3, r7
   11088:	d100      	bne.n	1108c <_dtoa_r+0xa34>
   1108a:	e6bb      	b.n	10e04 <_dtoa_r+0x7ac>
   1108c:	9b06      	ldr	r3, [sp, #24]
   1108e:	3401      	adds	r4, #1
   11090:	3301      	adds	r3, #1
   11092:	9306      	str	r3, [sp, #24]
   11094:	9b04      	ldr	r3, [sp, #16]
   11096:	3301      	adds	r3, #1
   11098:	9304      	str	r3, [sp, #16]
   1109a:	e6b3      	b.n	10e04 <_dtoa_r+0x7ac>
   1109c:	2301      	movs	r3, #1
   1109e:	930b      	str	r3, [sp, #44]	; 0x2c
   110a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   110a2:	2b00      	cmp	r3, #0
   110a4:	dc00      	bgt.n	110a8 <_dtoa_r+0xa50>
   110a6:	e0d1      	b.n	1124c <_dtoa_r+0xbf4>
   110a8:	001d      	movs	r5, r3
   110aa:	4698      	mov	r8, r3
   110ac:	930e      	str	r3, [sp, #56]	; 0x38
   110ae:	9307      	str	r3, [sp, #28]
   110b0:	f7ff fbc8 	bl	10844 <_dtoa_r+0x1ec>
   110b4:	9b07      	ldr	r3, [sp, #28]
   110b6:	2b00      	cmp	r3, #0
   110b8:	dd00      	ble.n	110bc <_dtoa_r+0xa64>
   110ba:	e553      	b.n	10b64 <_dtoa_r+0x50c>
   110bc:	d000      	beq.n	110c0 <_dtoa_r+0xa68>
   110be:	e0ad      	b.n	1121c <_dtoa_r+0xbc4>
   110c0:	9804      	ldr	r0, [sp, #16]
   110c2:	9905      	ldr	r1, [sp, #20]
   110c4:	2200      	movs	r2, #0
   110c6:	4bab      	ldr	r3, [pc, #684]	; (11374 <_dtoa_r+0xd1c>)
   110c8:	f7fc fe82 	bl	ddd0 <__aeabi_dmul>
   110cc:	003b      	movs	r3, r7
   110ce:	0032      	movs	r2, r6
   110d0:	f7fb fc46 	bl	c960 <__aeabi_dcmpge>
   110d4:	2300      	movs	r3, #0
   110d6:	4699      	mov	r9, r3
   110d8:	4698      	mov	r8, r3
   110da:	2800      	cmp	r0, #0
   110dc:	d055      	beq.n	1118a <_dtoa_r+0xb32>
   110de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   110e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   110e2:	43db      	mvns	r3, r3
   110e4:	9303      	str	r3, [sp, #12]
   110e6:	4649      	mov	r1, r9
   110e8:	4650      	mov	r0, sl
   110ea:	f001 fb0d 	bl	12708 <_Bfree>
   110ee:	4643      	mov	r3, r8
   110f0:	2b00      	cmp	r3, #0
   110f2:	d100      	bne.n	110f6 <_dtoa_r+0xa9e>
   110f4:	e4df      	b.n	10ab6 <_dtoa_r+0x45e>
   110f6:	e7b6      	b.n	11066 <_dtoa_r+0xa0e>
   110f8:	464a      	mov	r2, r9
   110fa:	4659      	mov	r1, fp
   110fc:	4650      	mov	r0, sl
   110fe:	f001 fc4f 	bl	129a0 <__pow5mult>
   11102:	4683      	mov	fp, r0
   11104:	e653      	b.n	10dae <_dtoa_r+0x756>
   11106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11108:	2a00      	cmp	r2, #0
   1110a:	d100      	bne.n	1110e <_dtoa_r+0xab6>
   1110c:	e1b6      	b.n	1147c <_dtoa_r+0xe24>
   1110e:	4a9a      	ldr	r2, [pc, #616]	; (11378 <_dtoa_r+0xd20>)
   11110:	464c      	mov	r4, r9
   11112:	4694      	mov	ip, r2
   11114:	9a06      	ldr	r2, [sp, #24]
   11116:	4463      	add	r3, ip
   11118:	9208      	str	r2, [sp, #32]
   1111a:	e5d5      	b.n	10cc8 <_dtoa_r+0x670>
   1111c:	2e00      	cmp	r6, #0
   1111e:	d000      	beq.n	11122 <_dtoa_r+0xaca>
   11120:	e670      	b.n	10e04 <_dtoa_r+0x7ac>
   11122:	e7aa      	b.n	1107a <_dtoa_r+0xa22>
   11124:	f001 fafa 	bl	1271c <__multadd>
   11128:	46a2      	mov	sl, r4
   1112a:	0005      	movs	r5, r0
   1112c:	4680      	mov	r8, r0
   1112e:	e6c7      	b.n	10ec0 <_dtoa_r+0x868>
   11130:	2301      	movs	r3, #1
   11132:	469b      	mov	fp, r3
   11134:	e6e2      	b.n	10efc <_dtoa_r+0x8a4>
   11136:	2300      	movs	r3, #0
   11138:	930b      	str	r3, [sp, #44]	; 0x2c
   1113a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1113c:	2b02      	cmp	r3, #2
   1113e:	d0af      	beq.n	110a0 <_dtoa_r+0xa48>
   11140:	2400      	movs	r4, #0
   11142:	4653      	mov	r3, sl
   11144:	0021      	movs	r1, r4
   11146:	645c      	str	r4, [r3, #68]	; 0x44
   11148:	4650      	mov	r0, sl
   1114a:	f001 fab5 	bl	126b8 <_Balloc>
   1114e:	4653      	mov	r3, sl
   11150:	6418      	str	r0, [r3, #64]	; 0x40
   11152:	2301      	movs	r3, #1
   11154:	425b      	negs	r3, r3
   11156:	9307      	str	r3, [sp, #28]
   11158:	930e      	str	r3, [sp, #56]	; 0x38
   1115a:	3302      	adds	r3, #2
   1115c:	900a      	str	r0, [sp, #40]	; 0x28
   1115e:	9423      	str	r4, [sp, #140]	; 0x8c
   11160:	930b      	str	r3, [sp, #44]	; 0x2c
   11162:	e4ec      	b.n	10b3e <_dtoa_r+0x4e6>
   11164:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11166:	2b02      	cmp	r3, #2
   11168:	dc00      	bgt.n	1116c <_dtoa_r+0xb14>
   1116a:	e685      	b.n	10e78 <_dtoa_r+0x820>
   1116c:	9b07      	ldr	r3, [sp, #28]
   1116e:	2b00      	cmp	r3, #0
   11170:	d1b5      	bne.n	110de <_dtoa_r+0xa86>
   11172:	4649      	mov	r1, r9
   11174:	2205      	movs	r2, #5
   11176:	4650      	mov	r0, sl
   11178:	f001 fad0 	bl	1271c <__multadd>
   1117c:	4681      	mov	r9, r0
   1117e:	0001      	movs	r1, r0
   11180:	4658      	mov	r0, fp
   11182:	f001 fccd 	bl	12b20 <__mcmp>
   11186:	2800      	cmp	r0, #0
   11188:	dda9      	ble.n	110de <_dtoa_r+0xa86>
   1118a:	2331      	movs	r3, #49	; 0x31
   1118c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1118e:	7013      	strb	r3, [r2, #0]
   11190:	9b03      	ldr	r3, [sp, #12]
   11192:	1c54      	adds	r4, r2, #1
   11194:	3301      	adds	r3, #1
   11196:	9303      	str	r3, [sp, #12]
   11198:	e7a5      	b.n	110e6 <_dtoa_r+0xa8e>
   1119a:	9b03      	ldr	r3, [sp, #12]
   1119c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1119e:	3301      	adds	r3, #1
   111a0:	9303      	str	r3, [sp, #12]
   111a2:	2331      	movs	r3, #49	; 0x31
   111a4:	7013      	strb	r3, [r2, #0]
   111a6:	e74e      	b.n	11046 <_dtoa_r+0x9ee>
   111a8:	2300      	movs	r3, #0
   111aa:	930b      	str	r3, [sp, #44]	; 0x2c
   111ac:	f7ff fb3d 	bl	1082a <_dtoa_r+0x1d2>
   111b0:	9b06      	ldr	r3, [sp, #24]
   111b2:	465c      	mov	r4, fp
   111b4:	469b      	mov	fp, r3
   111b6:	9b07      	ldr	r3, [sp, #28]
   111b8:	469a      	mov	sl, r3
   111ba:	e47c      	b.n	10ab6 <_dtoa_r+0x45e>
   111bc:	4640      	mov	r0, r8
   111be:	f7fd fbd1 	bl	e964 <__aeabi_i2d>
   111c2:	0032      	movs	r2, r6
   111c4:	003b      	movs	r3, r7
   111c6:	f7fc fe03 	bl	ddd0 <__aeabi_dmul>
   111ca:	2200      	movs	r2, #0
   111cc:	4b6b      	ldr	r3, [pc, #428]	; (1137c <_dtoa_r+0xd24>)
   111ce:	f7fb febb 	bl	cf48 <__aeabi_dadd>
   111d2:	4a6b      	ldr	r2, [pc, #428]	; (11380 <_dtoa_r+0xd28>)
   111d4:	000b      	movs	r3, r1
   111d6:	4694      	mov	ip, r2
   111d8:	4463      	add	r3, ip
   111da:	9008      	str	r0, [sp, #32]
   111dc:	9109      	str	r1, [sp, #36]	; 0x24
   111de:	9309      	str	r3, [sp, #36]	; 0x24
   111e0:	2200      	movs	r2, #0
   111e2:	4b64      	ldr	r3, [pc, #400]	; (11374 <_dtoa_r+0xd1c>)
   111e4:	0030      	movs	r0, r6
   111e6:	0039      	movs	r1, r7
   111e8:	f7fd f872 	bl	e2d0 <__aeabi_dsub>
   111ec:	9e08      	ldr	r6, [sp, #32]
   111ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
   111f0:	0032      	movs	r2, r6
   111f2:	003b      	movs	r3, r7
   111f4:	0004      	movs	r4, r0
   111f6:	000d      	movs	r5, r1
   111f8:	f7fb fba8 	bl	c94c <__aeabi_dcmpgt>
   111fc:	2800      	cmp	r0, #0
   111fe:	d000      	beq.n	11202 <_dtoa_r+0xbaa>
   11200:	e0b2      	b.n	11368 <_dtoa_r+0xd10>
   11202:	2080      	movs	r0, #128	; 0x80
   11204:	0600      	lsls	r0, r0, #24
   11206:	4684      	mov	ip, r0
   11208:	0039      	movs	r1, r7
   1120a:	4461      	add	r1, ip
   1120c:	000b      	movs	r3, r1
   1120e:	0032      	movs	r2, r6
   11210:	0020      	movs	r0, r4
   11212:	0029      	movs	r1, r5
   11214:	f7fb fb86 	bl	c924 <__aeabi_dcmplt>
   11218:	2800      	cmp	r0, #0
   1121a:	d057      	beq.n	112cc <_dtoa_r+0xc74>
   1121c:	2300      	movs	r3, #0
   1121e:	4699      	mov	r9, r3
   11220:	4698      	mov	r8, r3
   11222:	e75c      	b.n	110de <_dtoa_r+0xa86>
   11224:	980a      	ldr	r0, [sp, #40]	; 0x28
   11226:	f7ff fa4c 	bl	106c2 <_dtoa_r+0x6a>
   1122a:	1ae2      	subs	r2, r4, r3
   1122c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1122e:	46a1      	mov	r9, r4
   11230:	469c      	mov	ip, r3
   11232:	4494      	add	ip, r2
   11234:	4663      	mov	r3, ip
   11236:	2400      	movs	r4, #0
   11238:	930d      	str	r3, [sp, #52]	; 0x34
   1123a:	e53e      	b.n	10cba <_dtoa_r+0x662>
   1123c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1123e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11240:	9208      	str	r2, [sp, #32]
   11242:	9309      	str	r3, [sp, #36]	; 0x24
   11244:	2302      	movs	r3, #2
   11246:	4698      	mov	r8, r3
   11248:	f7ff fb3a 	bl	108c0 <_dtoa_r+0x268>
   1124c:	2300      	movs	r3, #0
   1124e:	4652      	mov	r2, sl
   11250:	2100      	movs	r1, #0
   11252:	6453      	str	r3, [r2, #68]	; 0x44
   11254:	4650      	mov	r0, sl
   11256:	f001 fa2f 	bl	126b8 <_Balloc>
   1125a:	4653      	mov	r3, sl
   1125c:	6418      	str	r0, [r3, #64]	; 0x40
   1125e:	2301      	movs	r3, #1
   11260:	900a      	str	r0, [sp, #40]	; 0x28
   11262:	9307      	str	r3, [sp, #28]
   11264:	9323      	str	r3, [sp, #140]	; 0x8c
   11266:	930e      	str	r3, [sp, #56]	; 0x38
   11268:	f7ff fb07 	bl	1087a <_dtoa_r+0x222>
   1126c:	4643      	mov	r3, r8
   1126e:	930c      	str	r3, [sp, #48]	; 0x30
   11270:	465b      	mov	r3, fp
   11272:	9a06      	ldr	r2, [sp, #24]
   11274:	46a8      	mov	r8, r5
   11276:	46b3      	mov	fp, r6
   11278:	4655      	mov	r5, sl
   1127a:	9e04      	ldr	r6, [sp, #16]
   1127c:	4691      	mov	r9, r2
   1127e:	46ba      	mov	sl, r7
   11280:	2b00      	cmp	r3, #0
   11282:	dd10      	ble.n	112a6 <_dtoa_r+0xc4e>
   11284:	4659      	mov	r1, fp
   11286:	2201      	movs	r2, #1
   11288:	0038      	movs	r0, r7
   1128a:	f001 fbe9 	bl	12a60 <__lshift>
   1128e:	4649      	mov	r1, r9
   11290:	4683      	mov	fp, r0
   11292:	f001 fc45 	bl	12b20 <__mcmp>
   11296:	2800      	cmp	r0, #0
   11298:	dc00      	bgt.n	1129c <_dtoa_r+0xc44>
   1129a:	e157      	b.n	1154c <_dtoa_r+0xef4>
   1129c:	2e39      	cmp	r6, #57	; 0x39
   1129e:	d100      	bne.n	112a2 <_dtoa_r+0xc4a>
   112a0:	e122      	b.n	114e8 <_dtoa_r+0xe90>
   112a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   112a4:	3631      	adds	r6, #49	; 0x31
   112a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112a8:	4647      	mov	r7, r8
   112aa:	1c6c      	adds	r4, r5, #1
   112ac:	702e      	strb	r6, [r5, #0]
   112ae:	4698      	mov	r8, r3
   112b0:	e6c9      	b.n	11046 <_dtoa_r+0x9ee>
   112b2:	2800      	cmp	r0, #0
   112b4:	d103      	bne.n	112be <_dtoa_r+0xc66>
   112b6:	07f3      	lsls	r3, r6, #31
   112b8:	d501      	bpl.n	112be <_dtoa_r+0xc66>
   112ba:	e6b5      	b.n	11028 <_dtoa_r+0x9d0>
   112bc:	001c      	movs	r4, r3
   112be:	1e63      	subs	r3, r4, #1
   112c0:	781a      	ldrb	r2, [r3, #0]
   112c2:	2a30      	cmp	r2, #48	; 0x30
   112c4:	d0fa      	beq.n	112bc <_dtoa_r+0xc64>
   112c6:	e6be      	b.n	11046 <_dtoa_r+0x9ee>
   112c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   112ca:	4699      	mov	r9, r3
   112cc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   112ce:	9f11      	ldr	r7, [sp, #68]	; 0x44
   112d0:	e435      	b.n	10b3e <_dtoa_r+0x4e6>
   112d2:	2501      	movs	r5, #1
   112d4:	f7ff fab4 	bl	10840 <_dtoa_r+0x1e8>
   112d8:	9b03      	ldr	r3, [sp, #12]
   112da:	2b00      	cmp	r3, #0
   112dc:	d100      	bne.n	112e0 <_dtoa_r+0xc88>
   112de:	e0d4      	b.n	1148a <_dtoa_r+0xe32>
   112e0:	9810      	ldr	r0, [sp, #64]	; 0x40
   112e2:	9911      	ldr	r1, [sp, #68]	; 0x44
   112e4:	425c      	negs	r4, r3
   112e6:	230f      	movs	r3, #15
   112e8:	4a26      	ldr	r2, [pc, #152]	; (11384 <_dtoa_r+0xd2c>)
   112ea:	4023      	ands	r3, r4
   112ec:	00db      	lsls	r3, r3, #3
   112ee:	18d3      	adds	r3, r2, r3
   112f0:	681a      	ldr	r2, [r3, #0]
   112f2:	685b      	ldr	r3, [r3, #4]
   112f4:	f7fc fd6c 	bl	ddd0 <__aeabi_dmul>
   112f8:	1124      	asrs	r4, r4, #4
   112fa:	0006      	movs	r6, r0
   112fc:	000f      	movs	r7, r1
   112fe:	2c00      	cmp	r4, #0
   11300:	d100      	bne.n	11304 <_dtoa_r+0xcac>
   11302:	e149      	b.n	11598 <_dtoa_r+0xf40>
   11304:	2302      	movs	r3, #2
   11306:	4698      	mov	r8, r3
   11308:	4d1f      	ldr	r5, [pc, #124]	; (11388 <_dtoa_r+0xd30>)
   1130a:	2301      	movs	r3, #1
   1130c:	4223      	tst	r3, r4
   1130e:	d009      	beq.n	11324 <_dtoa_r+0xccc>
   11310:	469c      	mov	ip, r3
   11312:	682a      	ldr	r2, [r5, #0]
   11314:	686b      	ldr	r3, [r5, #4]
   11316:	0030      	movs	r0, r6
   11318:	0039      	movs	r1, r7
   1131a:	44e0      	add	r8, ip
   1131c:	f7fc fd58 	bl	ddd0 <__aeabi_dmul>
   11320:	0006      	movs	r6, r0
   11322:	000f      	movs	r7, r1
   11324:	1064      	asrs	r4, r4, #1
   11326:	3508      	adds	r5, #8
   11328:	2c00      	cmp	r4, #0
   1132a:	d1ee      	bne.n	1130a <_dtoa_r+0xcb2>
   1132c:	f7ff fae4 	bl	108f8 <_dtoa_r+0x2a0>
   11330:	9b03      	ldr	r3, [sp, #12]
   11332:	2730      	movs	r7, #48	; 0x30
   11334:	3301      	adds	r3, #1
   11336:	9303      	str	r3, [sp, #12]
   11338:	2330      	movs	r3, #48	; 0x30
   1133a:	702b      	strb	r3, [r5, #0]
   1133c:	e4ac      	b.n	10c98 <_dtoa_r+0x640>
   1133e:	6859      	ldr	r1, [r3, #4]
   11340:	4650      	mov	r0, sl
   11342:	f001 f9b9 	bl	126b8 <_Balloc>
   11346:	4643      	mov	r3, r8
   11348:	4641      	mov	r1, r8
   1134a:	0004      	movs	r4, r0
   1134c:	691b      	ldr	r3, [r3, #16]
   1134e:	310c      	adds	r1, #12
   11350:	1c9a      	adds	r2, r3, #2
   11352:	0092      	lsls	r2, r2, #2
   11354:	300c      	adds	r0, #12
   11356:	f001 f919 	bl	1258c <memcpy>
   1135a:	2201      	movs	r2, #1
   1135c:	0021      	movs	r1, r4
   1135e:	4650      	mov	r0, sl
   11360:	f001 fb7e 	bl	12a60 <__lshift>
   11364:	900c      	str	r0, [sp, #48]	; 0x30
   11366:	e599      	b.n	10e9c <_dtoa_r+0x844>
   11368:	2300      	movs	r3, #0
   1136a:	4699      	mov	r9, r3
   1136c:	4698      	mov	r8, r3
   1136e:	e70c      	b.n	1118a <_dtoa_r+0xb32>
   11370:	7ff00000 	.word	0x7ff00000
   11374:	40140000 	.word	0x40140000
   11378:	00000433 	.word	0x00000433
   1137c:	401c0000 	.word	0x401c0000
   11380:	fcc00000 	.word	0xfcc00000
   11384:	00014c10 	.word	0x00014c10
   11388:	00014be8 	.word	0x00014be8
   1138c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1138e:	498f      	ldr	r1, [pc, #572]	; (115cc <_dtoa_r+0xf74>)
   11390:	3b01      	subs	r3, #1
   11392:	00db      	lsls	r3, r3, #3
   11394:	18c9      	adds	r1, r1, r3
   11396:	6808      	ldr	r0, [r1, #0]
   11398:	6849      	ldr	r1, [r1, #4]
   1139a:	9a08      	ldr	r2, [sp, #32]
   1139c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1139e:	f7fc fd17 	bl	ddd0 <__aeabi_dmul>
   113a2:	9014      	str	r0, [sp, #80]	; 0x50
   113a4:	9115      	str	r1, [sp, #84]	; 0x54
   113a6:	0039      	movs	r1, r7
   113a8:	0030      	movs	r0, r6
   113aa:	f7fd faa7 	bl	e8fc <__aeabi_d2iz>
   113ae:	0005      	movs	r5, r0
   113b0:	f7fd fad8 	bl	e964 <__aeabi_i2d>
   113b4:	0002      	movs	r2, r0
   113b6:	000b      	movs	r3, r1
   113b8:	0030      	movs	r0, r6
   113ba:	0039      	movs	r1, r7
   113bc:	f7fc ff88 	bl	e2d0 <__aeabi_dsub>
   113c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113c2:	9008      	str	r0, [sp, #32]
   113c4:	9109      	str	r1, [sp, #36]	; 0x24
   113c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   113c8:	001a      	movs	r2, r3
   113ca:	468c      	mov	ip, r1
   113cc:	3530      	adds	r5, #48	; 0x30
   113ce:	4462      	add	r2, ip
   113d0:	1c4c      	adds	r4, r1, #1
   113d2:	700d      	strb	r5, [r1, #0]
   113d4:	4690      	mov	r8, r2
   113d6:	2b01      	cmp	r3, #1
   113d8:	d01b      	beq.n	11412 <_dtoa_r+0xdba>
   113da:	9808      	ldr	r0, [sp, #32]
   113dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   113de:	0025      	movs	r5, r4
   113e0:	2200      	movs	r2, #0
   113e2:	4b7b      	ldr	r3, [pc, #492]	; (115d0 <_dtoa_r+0xf78>)
   113e4:	f7fc fcf4 	bl	ddd0 <__aeabi_dmul>
   113e8:	000f      	movs	r7, r1
   113ea:	0006      	movs	r6, r0
   113ec:	f7fd fa86 	bl	e8fc <__aeabi_d2iz>
   113f0:	0004      	movs	r4, r0
   113f2:	f7fd fab7 	bl	e964 <__aeabi_i2d>
   113f6:	3430      	adds	r4, #48	; 0x30
   113f8:	0002      	movs	r2, r0
   113fa:	000b      	movs	r3, r1
   113fc:	0030      	movs	r0, r6
   113fe:	0039      	movs	r1, r7
   11400:	f7fc ff66 	bl	e2d0 <__aeabi_dsub>
   11404:	702c      	strb	r4, [r5, #0]
   11406:	3501      	adds	r5, #1
   11408:	45a8      	cmp	r8, r5
   1140a:	d1e9      	bne.n	113e0 <_dtoa_r+0xd88>
   1140c:	4644      	mov	r4, r8
   1140e:	9008      	str	r0, [sp, #32]
   11410:	9109      	str	r1, [sp, #36]	; 0x24
   11412:	9814      	ldr	r0, [sp, #80]	; 0x50
   11414:	9915      	ldr	r1, [sp, #84]	; 0x54
   11416:	2200      	movs	r2, #0
   11418:	4b6e      	ldr	r3, [pc, #440]	; (115d4 <_dtoa_r+0xf7c>)
   1141a:	f7fb fd95 	bl	cf48 <__aeabi_dadd>
   1141e:	9a08      	ldr	r2, [sp, #32]
   11420:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11422:	f7fb fa7f 	bl	c924 <__aeabi_dcmplt>
   11426:	2800      	cmp	r0, #0
   11428:	d067      	beq.n	114fa <_dtoa_r+0xea2>
   1142a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1142c:	1e65      	subs	r5, r4, #1
   1142e:	9303      	str	r3, [sp, #12]
   11430:	782f      	ldrb	r7, [r5, #0]
   11432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11434:	e42e      	b.n	10c94 <_dtoa_r+0x63c>
   11436:	4643      	mov	r3, r8
   11438:	46b3      	mov	fp, r6
   1143a:	930c      	str	r3, [sp, #48]	; 0x30
   1143c:	9e04      	ldr	r6, [sp, #16]
   1143e:	9b06      	ldr	r3, [sp, #24]
   11440:	46a8      	mov	r8, r5
   11442:	4699      	mov	r9, r3
   11444:	4655      	mov	r5, sl
   11446:	46ba      	mov	sl, r7
   11448:	2e39      	cmp	r6, #57	; 0x39
   1144a:	d04d      	beq.n	114e8 <_dtoa_r+0xe90>
   1144c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1144e:	3601      	adds	r6, #1
   11450:	4647      	mov	r7, r8
   11452:	1c6c      	adds	r4, r5, #1
   11454:	702e      	strb	r6, [r5, #0]
   11456:	4698      	mov	r8, r3
   11458:	e5f5      	b.n	11046 <_dtoa_r+0x9ee>
   1145a:	4642      	mov	r2, r8
   1145c:	9b06      	ldr	r3, [sp, #24]
   1145e:	46b3      	mov	fp, r6
   11460:	46ba      	mov	sl, r7
   11462:	9e04      	ldr	r6, [sp, #16]
   11464:	4699      	mov	r9, r3
   11466:	002f      	movs	r7, r5
   11468:	4690      	mov	r8, r2
   1146a:	e5d1      	b.n	11010 <_dtoa_r+0x9b8>
   1146c:	9b06      	ldr	r3, [sp, #24]
   1146e:	9a07      	ldr	r2, [sp, #28]
   11470:	1a9b      	subs	r3, r3, r2
   11472:	9308      	str	r3, [sp, #32]
   11474:	2300      	movs	r3, #0
   11476:	e427      	b.n	10cc8 <_dtoa_r+0x670>
   11478:	2401      	movs	r4, #1
   1147a:	e5c5      	b.n	11008 <_dtoa_r+0x9b0>
   1147c:	2336      	movs	r3, #54	; 0x36
   1147e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   11480:	464c      	mov	r4, r9
   11482:	1a9b      	subs	r3, r3, r2
   11484:	9a06      	ldr	r2, [sp, #24]
   11486:	9208      	str	r2, [sp, #32]
   11488:	e41e      	b.n	10cc8 <_dtoa_r+0x670>
   1148a:	2302      	movs	r3, #2
   1148c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1148e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11490:	4698      	mov	r8, r3
   11492:	f7ff fa31 	bl	108f8 <_dtoa_r+0x2a0>
   11496:	9b07      	ldr	r3, [sp, #28]
   11498:	2b00      	cmp	r3, #0
   1149a:	d100      	bne.n	1149e <_dtoa_r+0xe46>
   1149c:	e68e      	b.n	111bc <_dtoa_r+0xb64>
   1149e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   114a0:	2c00      	cmp	r4, #0
   114a2:	dc00      	bgt.n	114a6 <_dtoa_r+0xe4e>
   114a4:	e712      	b.n	112cc <_dtoa_r+0xc74>
   114a6:	9b03      	ldr	r3, [sp, #12]
   114a8:	2200      	movs	r2, #0
   114aa:	3b01      	subs	r3, #1
   114ac:	9313      	str	r3, [sp, #76]	; 0x4c
   114ae:	0030      	movs	r0, r6
   114b0:	4b47      	ldr	r3, [pc, #284]	; (115d0 <_dtoa_r+0xf78>)
   114b2:	0039      	movs	r1, r7
   114b4:	f7fc fc8c 	bl	ddd0 <__aeabi_dmul>
   114b8:	0006      	movs	r6, r0
   114ba:	4640      	mov	r0, r8
   114bc:	000f      	movs	r7, r1
   114be:	3001      	adds	r0, #1
   114c0:	f7fd fa50 	bl	e964 <__aeabi_i2d>
   114c4:	0032      	movs	r2, r6
   114c6:	003b      	movs	r3, r7
   114c8:	f7fc fc82 	bl	ddd0 <__aeabi_dmul>
   114cc:	2200      	movs	r2, #0
   114ce:	4b42      	ldr	r3, [pc, #264]	; (115d8 <_dtoa_r+0xf80>)
   114d0:	f7fb fd3a 	bl	cf48 <__aeabi_dadd>
   114d4:	4a41      	ldr	r2, [pc, #260]	; (115dc <_dtoa_r+0xf84>)
   114d6:	000b      	movs	r3, r1
   114d8:	4694      	mov	ip, r2
   114da:	4463      	add	r3, ip
   114dc:	9008      	str	r0, [sp, #32]
   114de:	9109      	str	r1, [sp, #36]	; 0x24
   114e0:	9412      	str	r4, [sp, #72]	; 0x48
   114e2:	9309      	str	r3, [sp, #36]	; 0x24
   114e4:	f7ff fa30 	bl	10948 <_dtoa_r+0x2f0>
   114e8:	2339      	movs	r3, #57	; 0x39
   114ea:	702b      	strb	r3, [r5, #0]
   114ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   114ee:	4647      	mov	r7, r8
   114f0:	1c6c      	adds	r4, r5, #1
   114f2:	4698      	mov	r8, r3
   114f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   114f6:	2339      	movs	r3, #57	; 0x39
   114f8:	e5a1      	b.n	1103e <_dtoa_r+0x9e6>
   114fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   114fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   114fe:	2000      	movs	r0, #0
   11500:	4934      	ldr	r1, [pc, #208]	; (115d4 <_dtoa_r+0xf7c>)
   11502:	f7fc fee5 	bl	e2d0 <__aeabi_dsub>
   11506:	9a08      	ldr	r2, [sp, #32]
   11508:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1150a:	f7fb fa1f 	bl	c94c <__aeabi_dcmpgt>
   1150e:	2800      	cmp	r0, #0
   11510:	d101      	bne.n	11516 <_dtoa_r+0xebe>
   11512:	e6db      	b.n	112cc <_dtoa_r+0xc74>
   11514:	001c      	movs	r4, r3
   11516:	1e63      	subs	r3, r4, #1
   11518:	781a      	ldrb	r2, [r3, #0]
   1151a:	2a30      	cmp	r2, #48	; 0x30
   1151c:	d0fa      	beq.n	11514 <_dtoa_r+0xebc>
   1151e:	f7ff fac8 	bl	10ab2 <_dtoa_r+0x45a>
   11522:	4643      	mov	r3, r8
   11524:	46b3      	mov	fp, r6
   11526:	930c      	str	r3, [sp, #48]	; 0x30
   11528:	9e04      	ldr	r6, [sp, #16]
   1152a:	9b06      	ldr	r3, [sp, #24]
   1152c:	46a8      	mov	r8, r5
   1152e:	4699      	mov	r9, r3
   11530:	4655      	mov	r5, sl
   11532:	46ba      	mov	sl, r7
   11534:	2e39      	cmp	r6, #57	; 0x39
   11536:	d0d7      	beq.n	114e8 <_dtoa_r+0xe90>
   11538:	2c00      	cmp	r4, #0
   1153a:	dd00      	ble.n	1153e <_dtoa_r+0xee6>
   1153c:	e6b1      	b.n	112a2 <_dtoa_r+0xc4a>
   1153e:	e6b2      	b.n	112a6 <_dtoa_r+0xc4e>
   11540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11542:	464d      	mov	r5, r9
   11544:	9203      	str	r2, [sp, #12]
   11546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11548:	f7ff fba4 	bl	10c94 <_dtoa_r+0x63c>
   1154c:	2800      	cmp	r0, #0
   1154e:	d000      	beq.n	11552 <_dtoa_r+0xefa>
   11550:	e6a9      	b.n	112a6 <_dtoa_r+0xc4e>
   11552:	07f3      	lsls	r3, r6, #31
   11554:	d400      	bmi.n	11558 <_dtoa_r+0xf00>
   11556:	e6a6      	b.n	112a6 <_dtoa_r+0xc4e>
   11558:	e6a0      	b.n	1129c <_dtoa_r+0xc44>
   1155a:	2300      	movs	r3, #0
   1155c:	4641      	mov	r1, r8
   1155e:	220a      	movs	r2, #10
   11560:	4650      	mov	r0, sl
   11562:	f001 f8db 	bl	1271c <__multadd>
   11566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11568:	4680      	mov	r8, r0
   1156a:	2b00      	cmp	r3, #0
   1156c:	dd01      	ble.n	11572 <_dtoa_r+0xf1a>
   1156e:	9307      	str	r3, [sp, #28]
   11570:	e486      	b.n	10e80 <_dtoa_r+0x828>
   11572:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11574:	2b02      	cmp	r3, #2
   11576:	dc1f      	bgt.n	115b8 <_dtoa_r+0xf60>
   11578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1157a:	9307      	str	r3, [sp, #28]
   1157c:	e480      	b.n	10e80 <_dtoa_r+0x828>
   1157e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11580:	2b02      	cmp	r3, #2
   11582:	dc19      	bgt.n	115b8 <_dtoa_r+0xf60>
   11584:	4649      	mov	r1, r9
   11586:	f7fe ffbd 	bl	10504 <quorem>
   1158a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1158c:	3030      	adds	r0, #48	; 0x30
   1158e:	7018      	strb	r0, [r3, #0]
   11590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11592:	0006      	movs	r6, r0
   11594:	9307      	str	r3, [sp, #28]
   11596:	e533      	b.n	11000 <_dtoa_r+0x9a8>
   11598:	2302      	movs	r3, #2
   1159a:	4698      	mov	r8, r3
   1159c:	f7ff f9ac 	bl	108f8 <_dtoa_r+0x2a0>
   115a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   115a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   115a4:	9303      	str	r3, [sp, #12]
   115a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115a8:	001d      	movs	r5, r3
   115aa:	f7ff fb73 	bl	10c94 <_dtoa_r+0x63c>
   115ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   115b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   115b2:	9303      	str	r3, [sp, #12]
   115b4:	f7ff fa7f 	bl	10ab6 <_dtoa_r+0x45e>
   115b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   115ba:	9307      	str	r3, [sp, #28]
   115bc:	e5d6      	b.n	1116c <_dtoa_r+0xb14>
   115be:	2b04      	cmp	r3, #4
   115c0:	d100      	bne.n	115c4 <_dtoa_r+0xf6c>
   115c2:	e43f      	b.n	10e44 <_dtoa_r+0x7ec>
   115c4:	233c      	movs	r3, #60	; 0x3c
   115c6:	1a18      	subs	r0, r3, r0
   115c8:	e4d7      	b.n	10f7a <_dtoa_r+0x922>
   115ca:	46c0      	nop			; (mov r8, r8)
   115cc:	00014c10 	.word	0x00014c10
   115d0:	40240000 	.word	0x40240000
   115d4:	3fe00000 	.word	0x3fe00000
   115d8:	401c0000 	.word	0x401c0000
   115dc:	fcc00000 	.word	0xfcc00000

000115e0 <__sflush_r>:
   115e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115e2:	46c6      	mov	lr, r8
   115e4:	b500      	push	{lr}
   115e6:	230c      	movs	r3, #12
   115e8:	5eca      	ldrsh	r2, [r1, r3]
   115ea:	4680      	mov	r8, r0
   115ec:	b293      	uxth	r3, r2
   115ee:	000c      	movs	r4, r1
   115f0:	0719      	lsls	r1, r3, #28
   115f2:	d440      	bmi.n	11676 <__sflush_r+0x96>
   115f4:	2380      	movs	r3, #128	; 0x80
   115f6:	011b      	lsls	r3, r3, #4
   115f8:	4313      	orrs	r3, r2
   115fa:	6862      	ldr	r2, [r4, #4]
   115fc:	81a3      	strh	r3, [r4, #12]
   115fe:	2a00      	cmp	r2, #0
   11600:	dc00      	bgt.n	11604 <__sflush_r+0x24>
   11602:	e070      	b.n	116e6 <__sflush_r+0x106>
   11604:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11606:	2e00      	cmp	r6, #0
   11608:	d031      	beq.n	1166e <__sflush_r+0x8e>
   1160a:	4642      	mov	r2, r8
   1160c:	4641      	mov	r1, r8
   1160e:	6815      	ldr	r5, [r2, #0]
   11610:	2200      	movs	r2, #0
   11612:	b29b      	uxth	r3, r3
   11614:	600a      	str	r2, [r1, #0]
   11616:	04da      	lsls	r2, r3, #19
   11618:	d400      	bmi.n	1161c <__sflush_r+0x3c>
   1161a:	e069      	b.n	116f0 <__sflush_r+0x110>
   1161c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1161e:	075b      	lsls	r3, r3, #29
   11620:	d506      	bpl.n	11630 <__sflush_r+0x50>
   11622:	6863      	ldr	r3, [r4, #4]
   11624:	1ad2      	subs	r2, r2, r3
   11626:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11628:	2b00      	cmp	r3, #0
   1162a:	d001      	beq.n	11630 <__sflush_r+0x50>
   1162c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1162e:	1ad2      	subs	r2, r2, r3
   11630:	2300      	movs	r3, #0
   11632:	69e1      	ldr	r1, [r4, #28]
   11634:	4640      	mov	r0, r8
   11636:	47b0      	blx	r6
   11638:	1c43      	adds	r3, r0, #1
   1163a:	d03d      	beq.n	116b8 <__sflush_r+0xd8>
   1163c:	89a3      	ldrh	r3, [r4, #12]
   1163e:	4a3a      	ldr	r2, [pc, #232]	; (11728 <__sflush_r+0x148>)
   11640:	4013      	ands	r3, r2
   11642:	2200      	movs	r2, #0
   11644:	6062      	str	r2, [r4, #4]
   11646:	6922      	ldr	r2, [r4, #16]
   11648:	b21b      	sxth	r3, r3
   1164a:	81a3      	strh	r3, [r4, #12]
   1164c:	6022      	str	r2, [r4, #0]
   1164e:	04db      	lsls	r3, r3, #19
   11650:	d447      	bmi.n	116e2 <__sflush_r+0x102>
   11652:	4643      	mov	r3, r8
   11654:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11656:	601d      	str	r5, [r3, #0]
   11658:	2900      	cmp	r1, #0
   1165a:	d008      	beq.n	1166e <__sflush_r+0x8e>
   1165c:	0023      	movs	r3, r4
   1165e:	3340      	adds	r3, #64	; 0x40
   11660:	4299      	cmp	r1, r3
   11662:	d002      	beq.n	1166a <__sflush_r+0x8a>
   11664:	4640      	mov	r0, r8
   11666:	f000 f96f 	bl	11948 <_free_r>
   1166a:	2300      	movs	r3, #0
   1166c:	6323      	str	r3, [r4, #48]	; 0x30
   1166e:	2000      	movs	r0, #0
   11670:	bc04      	pop	{r2}
   11672:	4690      	mov	r8, r2
   11674:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11676:	6926      	ldr	r6, [r4, #16]
   11678:	2e00      	cmp	r6, #0
   1167a:	d0f8      	beq.n	1166e <__sflush_r+0x8e>
   1167c:	6822      	ldr	r2, [r4, #0]
   1167e:	6026      	str	r6, [r4, #0]
   11680:	1b95      	subs	r5, r2, r6
   11682:	2200      	movs	r2, #0
   11684:	079b      	lsls	r3, r3, #30
   11686:	d100      	bne.n	1168a <__sflush_r+0xaa>
   11688:	6962      	ldr	r2, [r4, #20]
   1168a:	60a2      	str	r2, [r4, #8]
   1168c:	2d00      	cmp	r5, #0
   1168e:	dc04      	bgt.n	1169a <__sflush_r+0xba>
   11690:	e7ed      	b.n	1166e <__sflush_r+0x8e>
   11692:	1836      	adds	r6, r6, r0
   11694:	1a2d      	subs	r5, r5, r0
   11696:	2d00      	cmp	r5, #0
   11698:	dde9      	ble.n	1166e <__sflush_r+0x8e>
   1169a:	002b      	movs	r3, r5
   1169c:	0032      	movs	r2, r6
   1169e:	69e1      	ldr	r1, [r4, #28]
   116a0:	4640      	mov	r0, r8
   116a2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   116a4:	47b8      	blx	r7
   116a6:	2800      	cmp	r0, #0
   116a8:	dcf3      	bgt.n	11692 <__sflush_r+0xb2>
   116aa:	2240      	movs	r2, #64	; 0x40
   116ac:	2001      	movs	r0, #1
   116ae:	89a3      	ldrh	r3, [r4, #12]
   116b0:	4240      	negs	r0, r0
   116b2:	4313      	orrs	r3, r2
   116b4:	81a3      	strh	r3, [r4, #12]
   116b6:	e7db      	b.n	11670 <__sflush_r+0x90>
   116b8:	4643      	mov	r3, r8
   116ba:	6819      	ldr	r1, [r3, #0]
   116bc:	291d      	cmp	r1, #29
   116be:	d8f4      	bhi.n	116aa <__sflush_r+0xca>
   116c0:	4b1a      	ldr	r3, [pc, #104]	; (1172c <__sflush_r+0x14c>)
   116c2:	2201      	movs	r2, #1
   116c4:	40cb      	lsrs	r3, r1
   116c6:	439a      	bics	r2, r3
   116c8:	d1ef      	bne.n	116aa <__sflush_r+0xca>
   116ca:	89a3      	ldrh	r3, [r4, #12]
   116cc:	4e16      	ldr	r6, [pc, #88]	; (11728 <__sflush_r+0x148>)
   116ce:	6062      	str	r2, [r4, #4]
   116d0:	4033      	ands	r3, r6
   116d2:	6922      	ldr	r2, [r4, #16]
   116d4:	b21b      	sxth	r3, r3
   116d6:	81a3      	strh	r3, [r4, #12]
   116d8:	6022      	str	r2, [r4, #0]
   116da:	04db      	lsls	r3, r3, #19
   116dc:	d5b9      	bpl.n	11652 <__sflush_r+0x72>
   116de:	2900      	cmp	r1, #0
   116e0:	d1b7      	bne.n	11652 <__sflush_r+0x72>
   116e2:	6520      	str	r0, [r4, #80]	; 0x50
   116e4:	e7b5      	b.n	11652 <__sflush_r+0x72>
   116e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   116e8:	2a00      	cmp	r2, #0
   116ea:	dd00      	ble.n	116ee <__sflush_r+0x10e>
   116ec:	e78a      	b.n	11604 <__sflush_r+0x24>
   116ee:	e7be      	b.n	1166e <__sflush_r+0x8e>
   116f0:	2200      	movs	r2, #0
   116f2:	2301      	movs	r3, #1
   116f4:	69e1      	ldr	r1, [r4, #28]
   116f6:	4640      	mov	r0, r8
   116f8:	47b0      	blx	r6
   116fa:	0002      	movs	r2, r0
   116fc:	1c43      	adds	r3, r0, #1
   116fe:	d002      	beq.n	11706 <__sflush_r+0x126>
   11700:	89a3      	ldrh	r3, [r4, #12]
   11702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11704:	e78b      	b.n	1161e <__sflush_r+0x3e>
   11706:	4643      	mov	r3, r8
   11708:	681b      	ldr	r3, [r3, #0]
   1170a:	2b00      	cmp	r3, #0
   1170c:	d0f8      	beq.n	11700 <__sflush_r+0x120>
   1170e:	2b1d      	cmp	r3, #29
   11710:	d001      	beq.n	11716 <__sflush_r+0x136>
   11712:	2b16      	cmp	r3, #22
   11714:	d103      	bne.n	1171e <__sflush_r+0x13e>
   11716:	4643      	mov	r3, r8
   11718:	2000      	movs	r0, #0
   1171a:	601d      	str	r5, [r3, #0]
   1171c:	e7a8      	b.n	11670 <__sflush_r+0x90>
   1171e:	2140      	movs	r1, #64	; 0x40
   11720:	89a3      	ldrh	r3, [r4, #12]
   11722:	430b      	orrs	r3, r1
   11724:	81a3      	strh	r3, [r4, #12]
   11726:	e7a3      	b.n	11670 <__sflush_r+0x90>
   11728:	fffff7ff 	.word	0xfffff7ff
   1172c:	20400001 	.word	0x20400001

00011730 <_fflush_r>:
   11730:	b570      	push	{r4, r5, r6, lr}
   11732:	0004      	movs	r4, r0
   11734:	000d      	movs	r5, r1
   11736:	2800      	cmp	r0, #0
   11738:	d002      	beq.n	11740 <_fflush_r+0x10>
   1173a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1173c:	2b00      	cmp	r3, #0
   1173e:	d009      	beq.n	11754 <_fflush_r+0x24>
   11740:	220c      	movs	r2, #12
   11742:	5eab      	ldrsh	r3, [r5, r2]
   11744:	2000      	movs	r0, #0
   11746:	2b00      	cmp	r3, #0
   11748:	d003      	beq.n	11752 <_fflush_r+0x22>
   1174a:	0029      	movs	r1, r5
   1174c:	0020      	movs	r0, r4
   1174e:	f7ff ff47 	bl	115e0 <__sflush_r>
   11752:	bd70      	pop	{r4, r5, r6, pc}
   11754:	f000 f882 	bl	1185c <__sinit>
   11758:	e7f2      	b.n	11740 <_fflush_r+0x10>
   1175a:	46c0      	nop			; (mov r8, r8)

0001175c <_cleanup_r>:
   1175c:	b510      	push	{r4, lr}
   1175e:	4902      	ldr	r1, [pc, #8]	; (11768 <_cleanup_r+0xc>)
   11760:	f000 fb52 	bl	11e08 <_fwalk_reent>
   11764:	bd10      	pop	{r4, pc}
   11766:	46c0      	nop			; (mov r8, r8)
   11768:	000133b1 	.word	0x000133b1

0001176c <__sinit.part.1>:
   1176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1176e:	46de      	mov	lr, fp
   11770:	4657      	mov	r7, sl
   11772:	464e      	mov	r6, r9
   11774:	4645      	mov	r5, r8
   11776:	4b34      	ldr	r3, [pc, #208]	; (11848 <__sinit.part.1+0xdc>)
   11778:	b5e0      	push	{r5, r6, r7, lr}
   1177a:	63c3      	str	r3, [r0, #60]	; 0x3c
   1177c:	23b8      	movs	r3, #184	; 0xb8
   1177e:	2400      	movs	r4, #0
   11780:	2203      	movs	r2, #3
   11782:	009b      	lsls	r3, r3, #2
   11784:	50c4      	str	r4, [r0, r3]
   11786:	3304      	adds	r3, #4
   11788:	6845      	ldr	r5, [r0, #4]
   1178a:	50c2      	str	r2, [r0, r3]
   1178c:	3308      	adds	r3, #8
   1178e:	18c2      	adds	r2, r0, r3
   11790:	3b04      	subs	r3, #4
   11792:	50c2      	str	r2, [r0, r3]
   11794:	0006      	movs	r6, r0
   11796:	2304      	movs	r3, #4
   11798:	0028      	movs	r0, r5
   1179a:	602c      	str	r4, [r5, #0]
   1179c:	606c      	str	r4, [r5, #4]
   1179e:	60ac      	str	r4, [r5, #8]
   117a0:	81ab      	strh	r3, [r5, #12]
   117a2:	666c      	str	r4, [r5, #100]	; 0x64
   117a4:	81ec      	strh	r4, [r5, #14]
   117a6:	612c      	str	r4, [r5, #16]
   117a8:	616c      	str	r4, [r5, #20]
   117aa:	61ac      	str	r4, [r5, #24]
   117ac:	2208      	movs	r2, #8
   117ae:	2100      	movs	r1, #0
   117b0:	305c      	adds	r0, #92	; 0x5c
   117b2:	f7fd fa11 	bl	ebd8 <memset>
   117b6:	4b25      	ldr	r3, [pc, #148]	; (1184c <__sinit.part.1+0xe0>)
   117b8:	4f25      	ldr	r7, [pc, #148]	; (11850 <__sinit.part.1+0xe4>)
   117ba:	469a      	mov	sl, r3
   117bc:	622b      	str	r3, [r5, #32]
   117be:	4b25      	ldr	r3, [pc, #148]	; (11854 <__sinit.part.1+0xe8>)
   117c0:	62ef      	str	r7, [r5, #44]	; 0x2c
   117c2:	4699      	mov	r9, r3
   117c4:	626b      	str	r3, [r5, #36]	; 0x24
   117c6:	4b24      	ldr	r3, [pc, #144]	; (11858 <__sinit.part.1+0xec>)
   117c8:	61ed      	str	r5, [r5, #28]
   117ca:	62ab      	str	r3, [r5, #40]	; 0x28
   117cc:	68b5      	ldr	r5, [r6, #8]
   117ce:	4698      	mov	r8, r3
   117d0:	2309      	movs	r3, #9
   117d2:	0028      	movs	r0, r5
   117d4:	81ab      	strh	r3, [r5, #12]
   117d6:	3b08      	subs	r3, #8
   117d8:	602c      	str	r4, [r5, #0]
   117da:	606c      	str	r4, [r5, #4]
   117dc:	60ac      	str	r4, [r5, #8]
   117de:	666c      	str	r4, [r5, #100]	; 0x64
   117e0:	81eb      	strh	r3, [r5, #14]
   117e2:	612c      	str	r4, [r5, #16]
   117e4:	616c      	str	r4, [r5, #20]
   117e6:	61ac      	str	r4, [r5, #24]
   117e8:	2208      	movs	r2, #8
   117ea:	2100      	movs	r1, #0
   117ec:	305c      	adds	r0, #92	; 0x5c
   117ee:	469b      	mov	fp, r3
   117f0:	f7fd f9f2 	bl	ebd8 <memset>
   117f4:	4653      	mov	r3, sl
   117f6:	622b      	str	r3, [r5, #32]
   117f8:	464b      	mov	r3, r9
   117fa:	626b      	str	r3, [r5, #36]	; 0x24
   117fc:	4643      	mov	r3, r8
   117fe:	62ef      	str	r7, [r5, #44]	; 0x2c
   11800:	62ab      	str	r3, [r5, #40]	; 0x28
   11802:	61ed      	str	r5, [r5, #28]
   11804:	68f5      	ldr	r5, [r6, #12]
   11806:	2312      	movs	r3, #18
   11808:	0028      	movs	r0, r5
   1180a:	81ab      	strh	r3, [r5, #12]
   1180c:	3b10      	subs	r3, #16
   1180e:	81eb      	strh	r3, [r5, #14]
   11810:	602c      	str	r4, [r5, #0]
   11812:	606c      	str	r4, [r5, #4]
   11814:	60ac      	str	r4, [r5, #8]
   11816:	666c      	str	r4, [r5, #100]	; 0x64
   11818:	612c      	str	r4, [r5, #16]
   1181a:	616c      	str	r4, [r5, #20]
   1181c:	61ac      	str	r4, [r5, #24]
   1181e:	2208      	movs	r2, #8
   11820:	2100      	movs	r1, #0
   11822:	305c      	adds	r0, #92	; 0x5c
   11824:	f7fd f9d8 	bl	ebd8 <memset>
   11828:	4653      	mov	r3, sl
   1182a:	622b      	str	r3, [r5, #32]
   1182c:	464b      	mov	r3, r9
   1182e:	626b      	str	r3, [r5, #36]	; 0x24
   11830:	4643      	mov	r3, r8
   11832:	62ab      	str	r3, [r5, #40]	; 0x28
   11834:	465b      	mov	r3, fp
   11836:	62ef      	str	r7, [r5, #44]	; 0x2c
   11838:	61ed      	str	r5, [r5, #28]
   1183a:	63b3      	str	r3, [r6, #56]	; 0x38
   1183c:	bc3c      	pop	{r2, r3, r4, r5}
   1183e:	4690      	mov	r8, r2
   11840:	4699      	mov	r9, r3
   11842:	46a2      	mov	sl, r4
   11844:	46ab      	mov	fp, r5
   11846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11848:	0001175d 	.word	0x0001175d
   1184c:	000130e9 	.word	0x000130e9
   11850:	00013179 	.word	0x00013179
   11854:	00013111 	.word	0x00013111
   11858:	0001314d 	.word	0x0001314d

0001185c <__sinit>:
   1185c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1185e:	b510      	push	{r4, lr}
   11860:	2b00      	cmp	r3, #0
   11862:	d101      	bne.n	11868 <__sinit+0xc>
   11864:	f7ff ff82 	bl	1176c <__sinit.part.1>
   11868:	bd10      	pop	{r4, pc}
   1186a:	46c0      	nop			; (mov r8, r8)

0001186c <__sfp_lock_acquire>:
   1186c:	4770      	bx	lr
   1186e:	46c0      	nop			; (mov r8, r8)

00011870 <__sfp_lock_release>:
   11870:	4770      	bx	lr
   11872:	46c0      	nop			; (mov r8, r8)

00011874 <__libc_fini_array>:
   11874:	b570      	push	{r4, r5, r6, lr}
   11876:	4b09      	ldr	r3, [pc, #36]	; (1189c <__libc_fini_array+0x28>)
   11878:	4c09      	ldr	r4, [pc, #36]	; (118a0 <__libc_fini_array+0x2c>)
   1187a:	1ae4      	subs	r4, r4, r3
   1187c:	10a4      	asrs	r4, r4, #2
   1187e:	d009      	beq.n	11894 <__libc_fini_array+0x20>
   11880:	4a08      	ldr	r2, [pc, #32]	; (118a4 <__libc_fini_array+0x30>)
   11882:	18a5      	adds	r5, r4, r2
   11884:	00ad      	lsls	r5, r5, #2
   11886:	18ed      	adds	r5, r5, r3
   11888:	682b      	ldr	r3, [r5, #0]
   1188a:	3c01      	subs	r4, #1
   1188c:	4798      	blx	r3
   1188e:	3d04      	subs	r5, #4
   11890:	2c00      	cmp	r4, #0
   11892:	d1f9      	bne.n	11888 <__libc_fini_array+0x14>
   11894:	f003 fab2 	bl	14dfc <_fini>
   11898:	bd70      	pop	{r4, r5, r6, pc}
   1189a:	46c0      	nop			; (mov r8, r8)
   1189c:	00014e08 	.word	0x00014e08
   118a0:	00014e0c 	.word	0x00014e0c
   118a4:	3fffffff 	.word	0x3fffffff

000118a8 <_malloc_trim_r>:
   118a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118aa:	000c      	movs	r4, r1
   118ac:	0006      	movs	r6, r0
   118ae:	f000 feff 	bl	126b0 <__malloc_lock>
   118b2:	4f20      	ldr	r7, [pc, #128]	; (11934 <_malloc_trim_r+0x8c>)
   118b4:	68bb      	ldr	r3, [r7, #8]
   118b6:	685d      	ldr	r5, [r3, #4]
   118b8:	2303      	movs	r3, #3
   118ba:	439d      	bics	r5, r3
   118bc:	4b1e      	ldr	r3, [pc, #120]	; (11938 <_malloc_trim_r+0x90>)
   118be:	1b2c      	subs	r4, r5, r4
   118c0:	469c      	mov	ip, r3
   118c2:	4464      	add	r4, ip
   118c4:	0b24      	lsrs	r4, r4, #12
   118c6:	4b1d      	ldr	r3, [pc, #116]	; (1193c <_malloc_trim_r+0x94>)
   118c8:	3c01      	subs	r4, #1
   118ca:	0324      	lsls	r4, r4, #12
   118cc:	429c      	cmp	r4, r3
   118ce:	dd07      	ble.n	118e0 <_malloc_trim_r+0x38>
   118d0:	2100      	movs	r1, #0
   118d2:	0030      	movs	r0, r6
   118d4:	f001 fbf6 	bl	130c4 <_sbrk_r>
   118d8:	68bb      	ldr	r3, [r7, #8]
   118da:	195b      	adds	r3, r3, r5
   118dc:	4298      	cmp	r0, r3
   118de:	d004      	beq.n	118ea <_malloc_trim_r+0x42>
   118e0:	0030      	movs	r0, r6
   118e2:	f000 fee7 	bl	126b4 <__malloc_unlock>
   118e6:	2000      	movs	r0, #0
   118e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118ea:	4261      	negs	r1, r4
   118ec:	0030      	movs	r0, r6
   118ee:	f001 fbe9 	bl	130c4 <_sbrk_r>
   118f2:	1c43      	adds	r3, r0, #1
   118f4:	d00d      	beq.n	11912 <_malloc_trim_r+0x6a>
   118f6:	2201      	movs	r2, #1
   118f8:	68bb      	ldr	r3, [r7, #8]
   118fa:	1b2d      	subs	r5, r5, r4
   118fc:	4315      	orrs	r5, r2
   118fe:	605d      	str	r5, [r3, #4]
   11900:	4b0f      	ldr	r3, [pc, #60]	; (11940 <_malloc_trim_r+0x98>)
   11902:	0030      	movs	r0, r6
   11904:	681a      	ldr	r2, [r3, #0]
   11906:	1b14      	subs	r4, r2, r4
   11908:	601c      	str	r4, [r3, #0]
   1190a:	f000 fed3 	bl	126b4 <__malloc_unlock>
   1190e:	2001      	movs	r0, #1
   11910:	e7ea      	b.n	118e8 <_malloc_trim_r+0x40>
   11912:	2100      	movs	r1, #0
   11914:	0030      	movs	r0, r6
   11916:	f001 fbd5 	bl	130c4 <_sbrk_r>
   1191a:	68ba      	ldr	r2, [r7, #8]
   1191c:	1a83      	subs	r3, r0, r2
   1191e:	2b0f      	cmp	r3, #15
   11920:	ddde      	ble.n	118e0 <_malloc_trim_r+0x38>
   11922:	4908      	ldr	r1, [pc, #32]	; (11944 <_malloc_trim_r+0x9c>)
   11924:	6809      	ldr	r1, [r1, #0]
   11926:	1a40      	subs	r0, r0, r1
   11928:	4905      	ldr	r1, [pc, #20]	; (11940 <_malloc_trim_r+0x98>)
   1192a:	6008      	str	r0, [r1, #0]
   1192c:	2101      	movs	r1, #1
   1192e:	430b      	orrs	r3, r1
   11930:	6053      	str	r3, [r2, #4]
   11932:	e7d5      	b.n	118e0 <_malloc_trim_r+0x38>
   11934:	200006d4 	.word	0x200006d4
   11938:	00000fef 	.word	0x00000fef
   1193c:	00000fff 	.word	0x00000fff
   11940:	20001b00 	.word	0x20001b00
   11944:	20000adc 	.word	0x20000adc

00011948 <_free_r>:
   11948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1194a:	0004      	movs	r4, r0
   1194c:	1e0d      	subs	r5, r1, #0
   1194e:	d03c      	beq.n	119ca <_free_r+0x82>
   11950:	f000 feae 	bl	126b0 <__malloc_lock>
   11954:	0029      	movs	r1, r5
   11956:	3908      	subs	r1, #8
   11958:	6848      	ldr	r0, [r1, #4]
   1195a:	2301      	movs	r3, #1
   1195c:	0005      	movs	r5, r0
   1195e:	2603      	movs	r6, #3
   11960:	439d      	bics	r5, r3
   11962:	194a      	adds	r2, r1, r5
   11964:	469c      	mov	ip, r3
   11966:	4f61      	ldr	r7, [pc, #388]	; (11aec <_free_r+0x1a4>)
   11968:	6853      	ldr	r3, [r2, #4]
   1196a:	43b3      	bics	r3, r6
   1196c:	68be      	ldr	r6, [r7, #8]
   1196e:	42b2      	cmp	r2, r6
   11970:	d056      	beq.n	11a20 <_free_r+0xd8>
   11972:	4666      	mov	r6, ip
   11974:	6053      	str	r3, [r2, #4]
   11976:	4206      	tst	r6, r0
   11978:	d10a      	bne.n	11990 <_free_r+0x48>
   1197a:	003e      	movs	r6, r7
   1197c:	6808      	ldr	r0, [r1, #0]
   1197e:	3608      	adds	r6, #8
   11980:	1a09      	subs	r1, r1, r0
   11982:	182d      	adds	r5, r5, r0
   11984:	6888      	ldr	r0, [r1, #8]
   11986:	42b0      	cmp	r0, r6
   11988:	d065      	beq.n	11a56 <_free_r+0x10e>
   1198a:	68ce      	ldr	r6, [r1, #12]
   1198c:	60c6      	str	r6, [r0, #12]
   1198e:	60b0      	str	r0, [r6, #8]
   11990:	2001      	movs	r0, #1
   11992:	18d6      	adds	r6, r2, r3
   11994:	6876      	ldr	r6, [r6, #4]
   11996:	4206      	tst	r6, r0
   11998:	d033      	beq.n	11a02 <_free_r+0xba>
   1199a:	4b55      	ldr	r3, [pc, #340]	; (11af0 <_free_r+0x1a8>)
   1199c:	4328      	orrs	r0, r5
   1199e:	6048      	str	r0, [r1, #4]
   119a0:	514d      	str	r5, [r1, r5]
   119a2:	429d      	cmp	r5, r3
   119a4:	d812      	bhi.n	119cc <_free_r+0x84>
   119a6:	08ed      	lsrs	r5, r5, #3
   119a8:	3bff      	subs	r3, #255	; 0xff
   119aa:	10aa      	asrs	r2, r5, #2
   119ac:	3bff      	subs	r3, #255	; 0xff
   119ae:	4093      	lsls	r3, r2
   119b0:	687a      	ldr	r2, [r7, #4]
   119b2:	00ed      	lsls	r5, r5, #3
   119b4:	4313      	orrs	r3, r2
   119b6:	607b      	str	r3, [r7, #4]
   119b8:	19ef      	adds	r7, r5, r7
   119ba:	68bb      	ldr	r3, [r7, #8]
   119bc:	60cf      	str	r7, [r1, #12]
   119be:	608b      	str	r3, [r1, #8]
   119c0:	60b9      	str	r1, [r7, #8]
   119c2:	60d9      	str	r1, [r3, #12]
   119c4:	0020      	movs	r0, r4
   119c6:	f000 fe75 	bl	126b4 <__malloc_unlock>
   119ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119cc:	0a68      	lsrs	r0, r5, #9
   119ce:	2804      	cmp	r0, #4
   119d0:	d850      	bhi.n	11a74 <_free_r+0x12c>
   119d2:	09a8      	lsrs	r0, r5, #6
   119d4:	0002      	movs	r2, r0
   119d6:	3039      	adds	r0, #57	; 0x39
   119d8:	3238      	adds	r2, #56	; 0x38
   119da:	00c0      	lsls	r0, r0, #3
   119dc:	1838      	adds	r0, r7, r0
   119de:	3808      	subs	r0, #8
   119e0:	6883      	ldr	r3, [r0, #8]
   119e2:	2603      	movs	r6, #3
   119e4:	4298      	cmp	r0, r3
   119e6:	d04c      	beq.n	11a82 <_free_r+0x13a>
   119e8:	685a      	ldr	r2, [r3, #4]
   119ea:	43b2      	bics	r2, r6
   119ec:	4295      	cmp	r5, r2
   119ee:	d230      	bcs.n	11a52 <_free_r+0x10a>
   119f0:	689b      	ldr	r3, [r3, #8]
   119f2:	4298      	cmp	r0, r3
   119f4:	d1f8      	bne.n	119e8 <_free_r+0xa0>
   119f6:	68c3      	ldr	r3, [r0, #12]
   119f8:	60cb      	str	r3, [r1, #12]
   119fa:	6088      	str	r0, [r1, #8]
   119fc:	6099      	str	r1, [r3, #8]
   119fe:	60c1      	str	r1, [r0, #12]
   11a00:	e7e0      	b.n	119c4 <_free_r+0x7c>
   11a02:	18ed      	adds	r5, r5, r3
   11a04:	4e3b      	ldr	r6, [pc, #236]	; (11af4 <_free_r+0x1ac>)
   11a06:	6893      	ldr	r3, [r2, #8]
   11a08:	42b3      	cmp	r3, r6
   11a0a:	d042      	beq.n	11a92 <_free_r+0x14a>
   11a0c:	68d2      	ldr	r2, [r2, #12]
   11a0e:	4328      	orrs	r0, r5
   11a10:	60da      	str	r2, [r3, #12]
   11a12:	6093      	str	r3, [r2, #8]
   11a14:	4b36      	ldr	r3, [pc, #216]	; (11af0 <_free_r+0x1a8>)
   11a16:	6048      	str	r0, [r1, #4]
   11a18:	514d      	str	r5, [r1, r5]
   11a1a:	429d      	cmp	r5, r3
   11a1c:	d8d6      	bhi.n	119cc <_free_r+0x84>
   11a1e:	e7c2      	b.n	119a6 <_free_r+0x5e>
   11a20:	4662      	mov	r2, ip
   11a22:	18eb      	adds	r3, r5, r3
   11a24:	4202      	tst	r2, r0
   11a26:	d106      	bne.n	11a36 <_free_r+0xee>
   11a28:	680a      	ldr	r2, [r1, #0]
   11a2a:	1a89      	subs	r1, r1, r2
   11a2c:	6888      	ldr	r0, [r1, #8]
   11a2e:	189b      	adds	r3, r3, r2
   11a30:	68ca      	ldr	r2, [r1, #12]
   11a32:	60c2      	str	r2, [r0, #12]
   11a34:	6090      	str	r0, [r2, #8]
   11a36:	2201      	movs	r2, #1
   11a38:	431a      	orrs	r2, r3
   11a3a:	604a      	str	r2, [r1, #4]
   11a3c:	4a2e      	ldr	r2, [pc, #184]	; (11af8 <_free_r+0x1b0>)
   11a3e:	60b9      	str	r1, [r7, #8]
   11a40:	6812      	ldr	r2, [r2, #0]
   11a42:	4293      	cmp	r3, r2
   11a44:	d3be      	bcc.n	119c4 <_free_r+0x7c>
   11a46:	4b2d      	ldr	r3, [pc, #180]	; (11afc <_free_r+0x1b4>)
   11a48:	0020      	movs	r0, r4
   11a4a:	6819      	ldr	r1, [r3, #0]
   11a4c:	f7ff ff2c 	bl	118a8 <_malloc_trim_r>
   11a50:	e7b8      	b.n	119c4 <_free_r+0x7c>
   11a52:	0018      	movs	r0, r3
   11a54:	e7cf      	b.n	119f6 <_free_r+0xae>
   11a56:	4666      	mov	r6, ip
   11a58:	18d0      	adds	r0, r2, r3
   11a5a:	6840      	ldr	r0, [r0, #4]
   11a5c:	4230      	tst	r0, r6
   11a5e:	d13f      	bne.n	11ae0 <_free_r+0x198>
   11a60:	6890      	ldr	r0, [r2, #8]
   11a62:	195d      	adds	r5, r3, r5
   11a64:	68d3      	ldr	r3, [r2, #12]
   11a66:	60c3      	str	r3, [r0, #12]
   11a68:	6098      	str	r0, [r3, #8]
   11a6a:	4663      	mov	r3, ip
   11a6c:	432b      	orrs	r3, r5
   11a6e:	604b      	str	r3, [r1, #4]
   11a70:	514d      	str	r5, [r1, r5]
   11a72:	e7a7      	b.n	119c4 <_free_r+0x7c>
   11a74:	2814      	cmp	r0, #20
   11a76:	d814      	bhi.n	11aa2 <_free_r+0x15a>
   11a78:	0002      	movs	r2, r0
   11a7a:	305c      	adds	r0, #92	; 0x5c
   11a7c:	325b      	adds	r2, #91	; 0x5b
   11a7e:	00c0      	lsls	r0, r0, #3
   11a80:	e7ac      	b.n	119dc <_free_r+0x94>
   11a82:	2301      	movs	r3, #1
   11a84:	1092      	asrs	r2, r2, #2
   11a86:	4093      	lsls	r3, r2
   11a88:	687a      	ldr	r2, [r7, #4]
   11a8a:	4313      	orrs	r3, r2
   11a8c:	607b      	str	r3, [r7, #4]
   11a8e:	0003      	movs	r3, r0
   11a90:	e7b2      	b.n	119f8 <_free_r+0xb0>
   11a92:	4328      	orrs	r0, r5
   11a94:	60d9      	str	r1, [r3, #12]
   11a96:	6099      	str	r1, [r3, #8]
   11a98:	60cb      	str	r3, [r1, #12]
   11a9a:	608b      	str	r3, [r1, #8]
   11a9c:	6048      	str	r0, [r1, #4]
   11a9e:	514d      	str	r5, [r1, r5]
   11aa0:	e790      	b.n	119c4 <_free_r+0x7c>
   11aa2:	2854      	cmp	r0, #84	; 0x54
   11aa4:	d805      	bhi.n	11ab2 <_free_r+0x16a>
   11aa6:	0b28      	lsrs	r0, r5, #12
   11aa8:	0002      	movs	r2, r0
   11aaa:	306f      	adds	r0, #111	; 0x6f
   11aac:	326e      	adds	r2, #110	; 0x6e
   11aae:	00c0      	lsls	r0, r0, #3
   11ab0:	e794      	b.n	119dc <_free_r+0x94>
   11ab2:	22aa      	movs	r2, #170	; 0xaa
   11ab4:	0052      	lsls	r2, r2, #1
   11ab6:	4290      	cmp	r0, r2
   11ab8:	d805      	bhi.n	11ac6 <_free_r+0x17e>
   11aba:	0be8      	lsrs	r0, r5, #15
   11abc:	0002      	movs	r2, r0
   11abe:	3078      	adds	r0, #120	; 0x78
   11ac0:	3277      	adds	r2, #119	; 0x77
   11ac2:	00c0      	lsls	r0, r0, #3
   11ac4:	e78a      	b.n	119dc <_free_r+0x94>
   11ac6:	4a0e      	ldr	r2, [pc, #56]	; (11b00 <_free_r+0x1b8>)
   11ac8:	4290      	cmp	r0, r2
   11aca:	d805      	bhi.n	11ad8 <_free_r+0x190>
   11acc:	0ca8      	lsrs	r0, r5, #18
   11ace:	0002      	movs	r2, r0
   11ad0:	307d      	adds	r0, #125	; 0x7d
   11ad2:	327c      	adds	r2, #124	; 0x7c
   11ad4:	00c0      	lsls	r0, r0, #3
   11ad6:	e781      	b.n	119dc <_free_r+0x94>
   11ad8:	20fe      	movs	r0, #254	; 0xfe
   11ada:	227e      	movs	r2, #126	; 0x7e
   11adc:	0080      	lsls	r0, r0, #2
   11ade:	e77d      	b.n	119dc <_free_r+0x94>
   11ae0:	4663      	mov	r3, ip
   11ae2:	432b      	orrs	r3, r5
   11ae4:	604b      	str	r3, [r1, #4]
   11ae6:	6015      	str	r5, [r2, #0]
   11ae8:	e76c      	b.n	119c4 <_free_r+0x7c>
   11aea:	46c0      	nop			; (mov r8, r8)
   11aec:	200006d4 	.word	0x200006d4
   11af0:	000001ff 	.word	0x000001ff
   11af4:	200006dc 	.word	0x200006dc
   11af8:	20000ae0 	.word	0x20000ae0
   11afc:	20001b30 	.word	0x20001b30
   11b00:	00000554 	.word	0x00000554

00011b04 <__sfvwrite_r>:
   11b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b06:	464e      	mov	r6, r9
   11b08:	46de      	mov	lr, fp
   11b0a:	4657      	mov	r7, sl
   11b0c:	4645      	mov	r5, r8
   11b0e:	b5e0      	push	{r5, r6, r7, lr}
   11b10:	6893      	ldr	r3, [r2, #8]
   11b12:	b083      	sub	sp, #12
   11b14:	9000      	str	r0, [sp, #0]
   11b16:	000c      	movs	r4, r1
   11b18:	0016      	movs	r6, r2
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d025      	beq.n	11b6a <__sfvwrite_r+0x66>
   11b1e:	898b      	ldrh	r3, [r1, #12]
   11b20:	071a      	lsls	r2, r3, #28
   11b22:	d52a      	bpl.n	11b7a <__sfvwrite_r+0x76>
   11b24:	690a      	ldr	r2, [r1, #16]
   11b26:	2a00      	cmp	r2, #0
   11b28:	d027      	beq.n	11b7a <__sfvwrite_r+0x76>
   11b2a:	6832      	ldr	r2, [r6, #0]
   11b2c:	4693      	mov	fp, r2
   11b2e:	079a      	lsls	r2, r3, #30
   11b30:	d52f      	bpl.n	11b92 <__sfvwrite_r+0x8e>
   11b32:	4bb2      	ldr	r3, [pc, #712]	; (11dfc <__sfvwrite_r+0x2f8>)
   11b34:	2700      	movs	r7, #0
   11b36:	2500      	movs	r5, #0
   11b38:	4698      	mov	r8, r3
   11b3a:	46b1      	mov	r9, r6
   11b3c:	2d00      	cmp	r5, #0
   11b3e:	d100      	bne.n	11b42 <__sfvwrite_r+0x3e>
   11b40:	e072      	b.n	11c28 <__sfvwrite_r+0x124>
   11b42:	002b      	movs	r3, r5
   11b44:	4545      	cmp	r5, r8
   11b46:	d900      	bls.n	11b4a <__sfvwrite_r+0x46>
   11b48:	4bac      	ldr	r3, [pc, #688]	; (11dfc <__sfvwrite_r+0x2f8>)
   11b4a:	003a      	movs	r2, r7
   11b4c:	69e1      	ldr	r1, [r4, #28]
   11b4e:	9800      	ldr	r0, [sp, #0]
   11b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
   11b52:	47b0      	blx	r6
   11b54:	2800      	cmp	r0, #0
   11b56:	dc00      	bgt.n	11b5a <__sfvwrite_r+0x56>
   11b58:	e073      	b.n	11c42 <__sfvwrite_r+0x13e>
   11b5a:	464b      	mov	r3, r9
   11b5c:	689b      	ldr	r3, [r3, #8]
   11b5e:	183f      	adds	r7, r7, r0
   11b60:	1a2d      	subs	r5, r5, r0
   11b62:	1a18      	subs	r0, r3, r0
   11b64:	464b      	mov	r3, r9
   11b66:	6098      	str	r0, [r3, #8]
   11b68:	d1e8      	bne.n	11b3c <__sfvwrite_r+0x38>
   11b6a:	2000      	movs	r0, #0
   11b6c:	b003      	add	sp, #12
   11b6e:	bc3c      	pop	{r2, r3, r4, r5}
   11b70:	4690      	mov	r8, r2
   11b72:	4699      	mov	r9, r3
   11b74:	46a2      	mov	sl, r4
   11b76:	46ab      	mov	fp, r5
   11b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b7a:	0021      	movs	r1, r4
   11b7c:	9800      	ldr	r0, [sp, #0]
   11b7e:	f7fe fc43 	bl	10408 <__swsetup_r>
   11b82:	2800      	cmp	r0, #0
   11b84:	d000      	beq.n	11b88 <__sfvwrite_r+0x84>
   11b86:	e130      	b.n	11dea <__sfvwrite_r+0x2e6>
   11b88:	6832      	ldr	r2, [r6, #0]
   11b8a:	89a3      	ldrh	r3, [r4, #12]
   11b8c:	4693      	mov	fp, r2
   11b8e:	079a      	lsls	r2, r3, #30
   11b90:	d4cf      	bmi.n	11b32 <__sfvwrite_r+0x2e>
   11b92:	07da      	lsls	r2, r3, #31
   11b94:	d55d      	bpl.n	11c52 <__sfvwrite_r+0x14e>
   11b96:	2300      	movs	r3, #0
   11b98:	2000      	movs	r0, #0
   11b9a:	469a      	mov	sl, r3
   11b9c:	2700      	movs	r7, #0
   11b9e:	001d      	movs	r5, r3
   11ba0:	46b1      	mov	r9, r6
   11ba2:	e029      	b.n	11bf8 <__sfvwrite_r+0xf4>
   11ba4:	2800      	cmp	r0, #0
   11ba6:	d033      	beq.n	11c10 <__sfvwrite_r+0x10c>
   11ba8:	46a8      	mov	r8, r5
   11baa:	42bd      	cmp	r5, r7
   11bac:	d900      	bls.n	11bb0 <__sfvwrite_r+0xac>
   11bae:	46b8      	mov	r8, r7
   11bb0:	6820      	ldr	r0, [r4, #0]
   11bb2:	6922      	ldr	r2, [r4, #16]
   11bb4:	4646      	mov	r6, r8
   11bb6:	6963      	ldr	r3, [r4, #20]
   11bb8:	4290      	cmp	r0, r2
   11bba:	d907      	bls.n	11bcc <__sfvwrite_r+0xc8>
   11bbc:	68a2      	ldr	r2, [r4, #8]
   11bbe:	4694      	mov	ip, r2
   11bc0:	449c      	add	ip, r3
   11bc2:	4662      	mov	r2, ip
   11bc4:	9201      	str	r2, [sp, #4]
   11bc6:	45e0      	cmp	r8, ip
   11bc8:	dd00      	ble.n	11bcc <__sfvwrite_r+0xc8>
   11bca:	e0e9      	b.n	11da0 <__sfvwrite_r+0x29c>
   11bcc:	4598      	cmp	r8, r3
   11bce:	da00      	bge.n	11bd2 <__sfvwrite_r+0xce>
   11bd0:	e08f      	b.n	11cf2 <__sfvwrite_r+0x1ee>
   11bd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   11bd4:	4652      	mov	r2, sl
   11bd6:	69e1      	ldr	r1, [r4, #28]
   11bd8:	9800      	ldr	r0, [sp, #0]
   11bda:	47b0      	blx	r6
   11bdc:	1e06      	subs	r6, r0, #0
   11bde:	dd30      	ble.n	11c42 <__sfvwrite_r+0x13e>
   11be0:	1bad      	subs	r5, r5, r6
   11be2:	2001      	movs	r0, #1
   11be4:	2d00      	cmp	r5, #0
   11be6:	d026      	beq.n	11c36 <__sfvwrite_r+0x132>
   11be8:	464b      	mov	r3, r9
   11bea:	689b      	ldr	r3, [r3, #8]
   11bec:	44b2      	add	sl, r6
   11bee:	1bbf      	subs	r7, r7, r6
   11bf0:	1b9e      	subs	r6, r3, r6
   11bf2:	464b      	mov	r3, r9
   11bf4:	609e      	str	r6, [r3, #8]
   11bf6:	d0b8      	beq.n	11b6a <__sfvwrite_r+0x66>
   11bf8:	2f00      	cmp	r7, #0
   11bfa:	d1d3      	bne.n	11ba4 <__sfvwrite_r+0xa0>
   11bfc:	465b      	mov	r3, fp
   11bfe:	681b      	ldr	r3, [r3, #0]
   11c00:	469a      	mov	sl, r3
   11c02:	465b      	mov	r3, fp
   11c04:	685f      	ldr	r7, [r3, #4]
   11c06:	2308      	movs	r3, #8
   11c08:	469c      	mov	ip, r3
   11c0a:	44e3      	add	fp, ip
   11c0c:	2f00      	cmp	r7, #0
   11c0e:	d0f5      	beq.n	11bfc <__sfvwrite_r+0xf8>
   11c10:	003a      	movs	r2, r7
   11c12:	210a      	movs	r1, #10
   11c14:	4650      	mov	r0, sl
   11c16:	f000 fc79 	bl	1250c <memchr>
   11c1a:	2800      	cmp	r0, #0
   11c1c:	d100      	bne.n	11c20 <__sfvwrite_r+0x11c>
   11c1e:	e0e2      	b.n	11de6 <__sfvwrite_r+0x2e2>
   11c20:	4653      	mov	r3, sl
   11c22:	3001      	adds	r0, #1
   11c24:	1ac5      	subs	r5, r0, r3
   11c26:	e7bf      	b.n	11ba8 <__sfvwrite_r+0xa4>
   11c28:	465b      	mov	r3, fp
   11c2a:	681f      	ldr	r7, [r3, #0]
   11c2c:	685d      	ldr	r5, [r3, #4]
   11c2e:	2308      	movs	r3, #8
   11c30:	469c      	mov	ip, r3
   11c32:	44e3      	add	fp, ip
   11c34:	e782      	b.n	11b3c <__sfvwrite_r+0x38>
   11c36:	0021      	movs	r1, r4
   11c38:	9800      	ldr	r0, [sp, #0]
   11c3a:	f7ff fd79 	bl	11730 <_fflush_r>
   11c3e:	2800      	cmp	r0, #0
   11c40:	d0d2      	beq.n	11be8 <__sfvwrite_r+0xe4>
   11c42:	220c      	movs	r2, #12
   11c44:	5ea3      	ldrsh	r3, [r4, r2]
   11c46:	2240      	movs	r2, #64	; 0x40
   11c48:	2001      	movs	r0, #1
   11c4a:	4313      	orrs	r3, r2
   11c4c:	81a3      	strh	r3, [r4, #12]
   11c4e:	4240      	negs	r0, r0
   11c50:	e78c      	b.n	11b6c <__sfvwrite_r+0x68>
   11c52:	2200      	movs	r2, #0
   11c54:	4691      	mov	r9, r2
   11c56:	464d      	mov	r5, r9
   11c58:	2d00      	cmp	r5, #0
   11c5a:	d023      	beq.n	11ca4 <__sfvwrite_r+0x1a0>
   11c5c:	68a2      	ldr	r2, [r4, #8]
   11c5e:	4690      	mov	r8, r2
   11c60:	2280      	movs	r2, #128	; 0x80
   11c62:	0092      	lsls	r2, r2, #2
   11c64:	4213      	tst	r3, r2
   11c66:	d026      	beq.n	11cb6 <__sfvwrite_r+0x1b2>
   11c68:	46c2      	mov	sl, r8
   11c6a:	4545      	cmp	r5, r8
   11c6c:	d34d      	bcc.n	11d0a <__sfvwrite_r+0x206>
   11c6e:	2290      	movs	r2, #144	; 0x90
   11c70:	00d2      	lsls	r2, r2, #3
   11c72:	4213      	tst	r3, r2
   11c74:	d14e      	bne.n	11d14 <__sfvwrite_r+0x210>
   11c76:	002f      	movs	r7, r5
   11c78:	6820      	ldr	r0, [r4, #0]
   11c7a:	4652      	mov	r2, sl
   11c7c:	4649      	mov	r1, r9
   11c7e:	f000 fcc7 	bl	12610 <memmove>
   11c82:	4642      	mov	r2, r8
   11c84:	68a3      	ldr	r3, [r4, #8]
   11c86:	1a98      	subs	r0, r3, r2
   11c88:	6823      	ldr	r3, [r4, #0]
   11c8a:	60a0      	str	r0, [r4, #8]
   11c8c:	4453      	add	r3, sl
   11c8e:	6023      	str	r3, [r4, #0]
   11c90:	68b3      	ldr	r3, [r6, #8]
   11c92:	44b9      	add	r9, r7
   11c94:	1bed      	subs	r5, r5, r7
   11c96:	1bdf      	subs	r7, r3, r7
   11c98:	60b7      	str	r7, [r6, #8]
   11c9a:	d100      	bne.n	11c9e <__sfvwrite_r+0x19a>
   11c9c:	e765      	b.n	11b6a <__sfvwrite_r+0x66>
   11c9e:	89a3      	ldrh	r3, [r4, #12]
   11ca0:	2d00      	cmp	r5, #0
   11ca2:	d1db      	bne.n	11c5c <__sfvwrite_r+0x158>
   11ca4:	465a      	mov	r2, fp
   11ca6:	6812      	ldr	r2, [r2, #0]
   11ca8:	4691      	mov	r9, r2
   11caa:	465a      	mov	r2, fp
   11cac:	6855      	ldr	r5, [r2, #4]
   11cae:	2208      	movs	r2, #8
   11cb0:	4694      	mov	ip, r2
   11cb2:	44e3      	add	fp, ip
   11cb4:	e7d0      	b.n	11c58 <__sfvwrite_r+0x154>
   11cb6:	6820      	ldr	r0, [r4, #0]
   11cb8:	6923      	ldr	r3, [r4, #16]
   11cba:	4298      	cmp	r0, r3
   11cbc:	d802      	bhi.n	11cc4 <__sfvwrite_r+0x1c0>
   11cbe:	6967      	ldr	r7, [r4, #20]
   11cc0:	42bd      	cmp	r5, r7
   11cc2:	d259      	bcs.n	11d78 <__sfvwrite_r+0x274>
   11cc4:	4647      	mov	r7, r8
   11cc6:	42af      	cmp	r7, r5
   11cc8:	d900      	bls.n	11ccc <__sfvwrite_r+0x1c8>
   11cca:	002f      	movs	r7, r5
   11ccc:	003a      	movs	r2, r7
   11cce:	4649      	mov	r1, r9
   11cd0:	f000 fc9e 	bl	12610 <memmove>
   11cd4:	68a3      	ldr	r3, [r4, #8]
   11cd6:	6822      	ldr	r2, [r4, #0]
   11cd8:	1bdb      	subs	r3, r3, r7
   11cda:	19d2      	adds	r2, r2, r7
   11cdc:	60a3      	str	r3, [r4, #8]
   11cde:	6022      	str	r2, [r4, #0]
   11ce0:	2b00      	cmp	r3, #0
   11ce2:	d1d5      	bne.n	11c90 <__sfvwrite_r+0x18c>
   11ce4:	0021      	movs	r1, r4
   11ce6:	9800      	ldr	r0, [sp, #0]
   11ce8:	f7ff fd22 	bl	11730 <_fflush_r>
   11cec:	2800      	cmp	r0, #0
   11cee:	d0cf      	beq.n	11c90 <__sfvwrite_r+0x18c>
   11cf0:	e7a7      	b.n	11c42 <__sfvwrite_r+0x13e>
   11cf2:	4642      	mov	r2, r8
   11cf4:	4651      	mov	r1, sl
   11cf6:	f000 fc8b 	bl	12610 <memmove>
   11cfa:	4642      	mov	r2, r8
   11cfc:	68a3      	ldr	r3, [r4, #8]
   11cfe:	1a9b      	subs	r3, r3, r2
   11d00:	60a3      	str	r3, [r4, #8]
   11d02:	6823      	ldr	r3, [r4, #0]
   11d04:	4443      	add	r3, r8
   11d06:	6023      	str	r3, [r4, #0]
   11d08:	e76a      	b.n	11be0 <__sfvwrite_r+0xdc>
   11d0a:	46a8      	mov	r8, r5
   11d0c:	6820      	ldr	r0, [r4, #0]
   11d0e:	002f      	movs	r7, r5
   11d10:	46aa      	mov	sl, r5
   11d12:	e7b2      	b.n	11c7a <__sfvwrite_r+0x176>
   11d14:	6921      	ldr	r1, [r4, #16]
   11d16:	6822      	ldr	r2, [r4, #0]
   11d18:	1a52      	subs	r2, r2, r1
   11d1a:	4692      	mov	sl, r2
   11d1c:	6962      	ldr	r2, [r4, #20]
   11d1e:	0057      	lsls	r7, r2, #1
   11d20:	18bf      	adds	r7, r7, r2
   11d22:	0ffa      	lsrs	r2, r7, #31
   11d24:	19d7      	adds	r7, r2, r7
   11d26:	4652      	mov	r2, sl
   11d28:	1c50      	adds	r0, r2, #1
   11d2a:	107f      	asrs	r7, r7, #1
   11d2c:	1940      	adds	r0, r0, r5
   11d2e:	003a      	movs	r2, r7
   11d30:	42b8      	cmp	r0, r7
   11d32:	d901      	bls.n	11d38 <__sfvwrite_r+0x234>
   11d34:	0007      	movs	r7, r0
   11d36:	0002      	movs	r2, r0
   11d38:	055b      	lsls	r3, r3, #21
   11d3a:	d542      	bpl.n	11dc2 <__sfvwrite_r+0x2be>
   11d3c:	0011      	movs	r1, r2
   11d3e:	9800      	ldr	r0, [sp, #0]
   11d40:	f000 f91a 	bl	11f78 <_malloc_r>
   11d44:	4680      	mov	r8, r0
   11d46:	1e03      	subs	r3, r0, #0
   11d48:	d052      	beq.n	11df0 <__sfvwrite_r+0x2ec>
   11d4a:	4652      	mov	r2, sl
   11d4c:	6921      	ldr	r1, [r4, #16]
   11d4e:	f000 fc1d 	bl	1258c <memcpy>
   11d52:	89a3      	ldrh	r3, [r4, #12]
   11d54:	4a2a      	ldr	r2, [pc, #168]	; (11e00 <__sfvwrite_r+0x2fc>)
   11d56:	4013      	ands	r3, r2
   11d58:	2280      	movs	r2, #128	; 0x80
   11d5a:	4313      	orrs	r3, r2
   11d5c:	81a3      	strh	r3, [r4, #12]
   11d5e:	4643      	mov	r3, r8
   11d60:	4640      	mov	r0, r8
   11d62:	6123      	str	r3, [r4, #16]
   11d64:	4653      	mov	r3, sl
   11d66:	4450      	add	r0, sl
   11d68:	6167      	str	r7, [r4, #20]
   11d6a:	1aff      	subs	r7, r7, r3
   11d6c:	60a7      	str	r7, [r4, #8]
   11d6e:	6020      	str	r0, [r4, #0]
   11d70:	46a8      	mov	r8, r5
   11d72:	002f      	movs	r7, r5
   11d74:	46aa      	mov	sl, r5
   11d76:	e780      	b.n	11c7a <__sfvwrite_r+0x176>
   11d78:	4b22      	ldr	r3, [pc, #136]	; (11e04 <__sfvwrite_r+0x300>)
   11d7a:	0028      	movs	r0, r5
   11d7c:	429d      	cmp	r5, r3
   11d7e:	d900      	bls.n	11d82 <__sfvwrite_r+0x27e>
   11d80:	0018      	movs	r0, r3
   11d82:	0039      	movs	r1, r7
   11d84:	f7fa fccc 	bl	c720 <__divsi3>
   11d88:	003b      	movs	r3, r7
   11d8a:	464a      	mov	r2, r9
   11d8c:	4343      	muls	r3, r0
   11d8e:	69e1      	ldr	r1, [r4, #28]
   11d90:	9800      	ldr	r0, [sp, #0]
   11d92:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11d94:	47b8      	blx	r7
   11d96:	2800      	cmp	r0, #0
   11d98:	dc00      	bgt.n	11d9c <__sfvwrite_r+0x298>
   11d9a:	e752      	b.n	11c42 <__sfvwrite_r+0x13e>
   11d9c:	0007      	movs	r7, r0
   11d9e:	e777      	b.n	11c90 <__sfvwrite_r+0x18c>
   11da0:	4666      	mov	r6, ip
   11da2:	4651      	mov	r1, sl
   11da4:	f000 fc34 	bl	12610 <memmove>
   11da8:	46b4      	mov	ip, r6
   11daa:	6823      	ldr	r3, [r4, #0]
   11dac:	0021      	movs	r1, r4
   11dae:	4463      	add	r3, ip
   11db0:	6023      	str	r3, [r4, #0]
   11db2:	9800      	ldr	r0, [sp, #0]
   11db4:	f7ff fcbc 	bl	11730 <_fflush_r>
   11db8:	2800      	cmp	r0, #0
   11dba:	d000      	beq.n	11dbe <__sfvwrite_r+0x2ba>
   11dbc:	e741      	b.n	11c42 <__sfvwrite_r+0x13e>
   11dbe:	9e01      	ldr	r6, [sp, #4]
   11dc0:	e70e      	b.n	11be0 <__sfvwrite_r+0xdc>
   11dc2:	9800      	ldr	r0, [sp, #0]
   11dc4:	f000 ffc0 	bl	12d48 <_realloc_r>
   11dc8:	4680      	mov	r8, r0
   11dca:	2800      	cmp	r0, #0
   11dcc:	d1c7      	bne.n	11d5e <__sfvwrite_r+0x25a>
   11dce:	9d00      	ldr	r5, [sp, #0]
   11dd0:	6921      	ldr	r1, [r4, #16]
   11dd2:	0028      	movs	r0, r5
   11dd4:	f7ff fdb8 	bl	11948 <_free_r>
   11dd8:	2280      	movs	r2, #128	; 0x80
   11dda:	89a3      	ldrh	r3, [r4, #12]
   11ddc:	4393      	bics	r3, r2
   11dde:	3a74      	subs	r2, #116	; 0x74
   11de0:	b21b      	sxth	r3, r3
   11de2:	602a      	str	r2, [r5, #0]
   11de4:	e72f      	b.n	11c46 <__sfvwrite_r+0x142>
   11de6:	1c7d      	adds	r5, r7, #1
   11de8:	e6de      	b.n	11ba8 <__sfvwrite_r+0xa4>
   11dea:	2001      	movs	r0, #1
   11dec:	4240      	negs	r0, r0
   11dee:	e6bd      	b.n	11b6c <__sfvwrite_r+0x68>
   11df0:	9a00      	ldr	r2, [sp, #0]
   11df2:	330c      	adds	r3, #12
   11df4:	6013      	str	r3, [r2, #0]
   11df6:	220c      	movs	r2, #12
   11df8:	5ea3      	ldrsh	r3, [r4, r2]
   11dfa:	e724      	b.n	11c46 <__sfvwrite_r+0x142>
   11dfc:	7ffffc00 	.word	0x7ffffc00
   11e00:	fffffb7f 	.word	0xfffffb7f
   11e04:	7fffffff 	.word	0x7fffffff

00011e08 <_fwalk_reent>:
   11e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e0a:	4647      	mov	r7, r8
   11e0c:	46ce      	mov	lr, r9
   11e0e:	b580      	push	{r7, lr}
   11e10:	27b8      	movs	r7, #184	; 0xb8
   11e12:	4680      	mov	r8, r0
   11e14:	00bf      	lsls	r7, r7, #2
   11e16:	4447      	add	r7, r8
   11e18:	4689      	mov	r9, r1
   11e1a:	2600      	movs	r6, #0
   11e1c:	2f00      	cmp	r7, #0
   11e1e:	d014      	beq.n	11e4a <_fwalk_reent+0x42>
   11e20:	687b      	ldr	r3, [r7, #4]
   11e22:	68bc      	ldr	r4, [r7, #8]
   11e24:	1e5d      	subs	r5, r3, #1
   11e26:	d40d      	bmi.n	11e44 <_fwalk_reent+0x3c>
   11e28:	89a3      	ldrh	r3, [r4, #12]
   11e2a:	2b01      	cmp	r3, #1
   11e2c:	d907      	bls.n	11e3e <_fwalk_reent+0x36>
   11e2e:	220e      	movs	r2, #14
   11e30:	5ea3      	ldrsh	r3, [r4, r2]
   11e32:	3301      	adds	r3, #1
   11e34:	d003      	beq.n	11e3e <_fwalk_reent+0x36>
   11e36:	0021      	movs	r1, r4
   11e38:	4640      	mov	r0, r8
   11e3a:	47c8      	blx	r9
   11e3c:	4306      	orrs	r6, r0
   11e3e:	3468      	adds	r4, #104	; 0x68
   11e40:	3d01      	subs	r5, #1
   11e42:	d2f1      	bcs.n	11e28 <_fwalk_reent+0x20>
   11e44:	683f      	ldr	r7, [r7, #0]
   11e46:	2f00      	cmp	r7, #0
   11e48:	d1ea      	bne.n	11e20 <_fwalk_reent+0x18>
   11e4a:	0030      	movs	r0, r6
   11e4c:	bc0c      	pop	{r2, r3}
   11e4e:	4690      	mov	r8, r2
   11e50:	4699      	mov	r9, r3
   11e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e54 <__locale_mb_cur_max>:
   11e54:	4b05      	ldr	r3, [pc, #20]	; (11e6c <__locale_mb_cur_max+0x18>)
   11e56:	681b      	ldr	r3, [r3, #0]
   11e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11e5a:	2b00      	cmp	r3, #0
   11e5c:	d003      	beq.n	11e66 <__locale_mb_cur_max+0x12>
   11e5e:	2294      	movs	r2, #148	; 0x94
   11e60:	0052      	lsls	r2, r2, #1
   11e62:	5c98      	ldrb	r0, [r3, r2]
   11e64:	4770      	bx	lr
   11e66:	4b02      	ldr	r3, [pc, #8]	; (11e70 <__locale_mb_cur_max+0x1c>)
   11e68:	e7f9      	b.n	11e5e <__locale_mb_cur_max+0xa>
   11e6a:	46c0      	nop			; (mov r8, r8)
   11e6c:	20000138 	.word	0x20000138
   11e70:	20000568 	.word	0x20000568

00011e74 <_localeconv_r>:
   11e74:	4b04      	ldr	r3, [pc, #16]	; (11e88 <_localeconv_r+0x14>)
   11e76:	681b      	ldr	r3, [r3, #0]
   11e78:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11e7a:	2800      	cmp	r0, #0
   11e7c:	d001      	beq.n	11e82 <_localeconv_r+0xe>
   11e7e:	30f0      	adds	r0, #240	; 0xf0
   11e80:	4770      	bx	lr
   11e82:	4802      	ldr	r0, [pc, #8]	; (11e8c <_localeconv_r+0x18>)
   11e84:	e7fb      	b.n	11e7e <_localeconv_r+0xa>
   11e86:	46c0      	nop			; (mov r8, r8)
   11e88:	20000138 	.word	0x20000138
   11e8c:	20000568 	.word	0x20000568

00011e90 <__swhatbuf_r>:
   11e90:	b570      	push	{r4, r5, r6, lr}
   11e92:	000c      	movs	r4, r1
   11e94:	001e      	movs	r6, r3
   11e96:	230e      	movs	r3, #14
   11e98:	5ec9      	ldrsh	r1, [r1, r3]
   11e9a:	b090      	sub	sp, #64	; 0x40
   11e9c:	0015      	movs	r5, r2
   11e9e:	2900      	cmp	r1, #0
   11ea0:	db15      	blt.n	11ece <__swhatbuf_r+0x3e>
   11ea2:	aa01      	add	r2, sp, #4
   11ea4:	f001 fb26 	bl	134f4 <_fstat_r>
   11ea8:	2800      	cmp	r0, #0
   11eaa:	db10      	blt.n	11ece <__swhatbuf_r+0x3e>
   11eac:	22f0      	movs	r2, #240	; 0xf0
   11eae:	9b02      	ldr	r3, [sp, #8]
   11eb0:	0212      	lsls	r2, r2, #8
   11eb2:	4013      	ands	r3, r2
   11eb4:	4a0d      	ldr	r2, [pc, #52]	; (11eec <__swhatbuf_r+0x5c>)
   11eb6:	2080      	movs	r0, #128	; 0x80
   11eb8:	4694      	mov	ip, r2
   11eba:	4463      	add	r3, ip
   11ebc:	425a      	negs	r2, r3
   11ebe:	4153      	adcs	r3, r2
   11ec0:	6033      	str	r3, [r6, #0]
   11ec2:	2380      	movs	r3, #128	; 0x80
   11ec4:	00db      	lsls	r3, r3, #3
   11ec6:	602b      	str	r3, [r5, #0]
   11ec8:	0100      	lsls	r0, r0, #4
   11eca:	b010      	add	sp, #64	; 0x40
   11ecc:	bd70      	pop	{r4, r5, r6, pc}
   11ece:	2300      	movs	r3, #0
   11ed0:	6033      	str	r3, [r6, #0]
   11ed2:	89a3      	ldrh	r3, [r4, #12]
   11ed4:	061b      	lsls	r3, r3, #24
   11ed6:	d503      	bpl.n	11ee0 <__swhatbuf_r+0x50>
   11ed8:	2340      	movs	r3, #64	; 0x40
   11eda:	2000      	movs	r0, #0
   11edc:	602b      	str	r3, [r5, #0]
   11ede:	e7f4      	b.n	11eca <__swhatbuf_r+0x3a>
   11ee0:	2380      	movs	r3, #128	; 0x80
   11ee2:	00db      	lsls	r3, r3, #3
   11ee4:	602b      	str	r3, [r5, #0]
   11ee6:	2000      	movs	r0, #0
   11ee8:	e7ef      	b.n	11eca <__swhatbuf_r+0x3a>
   11eea:	46c0      	nop			; (mov r8, r8)
   11eec:	ffffe000 	.word	0xffffe000

00011ef0 <__smakebuf_r>:
   11ef0:	b570      	push	{r4, r5, r6, lr}
   11ef2:	898b      	ldrh	r3, [r1, #12]
   11ef4:	b082      	sub	sp, #8
   11ef6:	0005      	movs	r5, r0
   11ef8:	000c      	movs	r4, r1
   11efa:	079b      	lsls	r3, r3, #30
   11efc:	d507      	bpl.n	11f0e <__smakebuf_r+0x1e>
   11efe:	0023      	movs	r3, r4
   11f00:	3343      	adds	r3, #67	; 0x43
   11f02:	6023      	str	r3, [r4, #0]
   11f04:	6123      	str	r3, [r4, #16]
   11f06:	2301      	movs	r3, #1
   11f08:	6163      	str	r3, [r4, #20]
   11f0a:	b002      	add	sp, #8
   11f0c:	bd70      	pop	{r4, r5, r6, pc}
   11f0e:	ab01      	add	r3, sp, #4
   11f10:	466a      	mov	r2, sp
   11f12:	f7ff ffbd 	bl	11e90 <__swhatbuf_r>
   11f16:	9900      	ldr	r1, [sp, #0]
   11f18:	0006      	movs	r6, r0
   11f1a:	0028      	movs	r0, r5
   11f1c:	f000 f82c 	bl	11f78 <_malloc_r>
   11f20:	2800      	cmp	r0, #0
   11f22:	d01c      	beq.n	11f5e <__smakebuf_r+0x6e>
   11f24:	2280      	movs	r2, #128	; 0x80
   11f26:	4b13      	ldr	r3, [pc, #76]	; (11f74 <__smakebuf_r+0x84>)
   11f28:	63eb      	str	r3, [r5, #60]	; 0x3c
   11f2a:	89a3      	ldrh	r3, [r4, #12]
   11f2c:	6020      	str	r0, [r4, #0]
   11f2e:	4313      	orrs	r3, r2
   11f30:	9a00      	ldr	r2, [sp, #0]
   11f32:	b21b      	sxth	r3, r3
   11f34:	6162      	str	r2, [r4, #20]
   11f36:	9a01      	ldr	r2, [sp, #4]
   11f38:	81a3      	strh	r3, [r4, #12]
   11f3a:	6120      	str	r0, [r4, #16]
   11f3c:	2a00      	cmp	r2, #0
   11f3e:	d102      	bne.n	11f46 <__smakebuf_r+0x56>
   11f40:	4333      	orrs	r3, r6
   11f42:	81a3      	strh	r3, [r4, #12]
   11f44:	e7e1      	b.n	11f0a <__smakebuf_r+0x1a>
   11f46:	230e      	movs	r3, #14
   11f48:	5ee1      	ldrsh	r1, [r4, r3]
   11f4a:	0028      	movs	r0, r5
   11f4c:	f001 fae6 	bl	1351c <_isatty_r>
   11f50:	2800      	cmp	r0, #0
   11f52:	d00c      	beq.n	11f6e <__smakebuf_r+0x7e>
   11f54:	2201      	movs	r2, #1
   11f56:	89a3      	ldrh	r3, [r4, #12]
   11f58:	4313      	orrs	r3, r2
   11f5a:	b21b      	sxth	r3, r3
   11f5c:	e7f0      	b.n	11f40 <__smakebuf_r+0x50>
   11f5e:	220c      	movs	r2, #12
   11f60:	5ea3      	ldrsh	r3, [r4, r2]
   11f62:	059a      	lsls	r2, r3, #22
   11f64:	d4d1      	bmi.n	11f0a <__smakebuf_r+0x1a>
   11f66:	2202      	movs	r2, #2
   11f68:	4313      	orrs	r3, r2
   11f6a:	81a3      	strh	r3, [r4, #12]
   11f6c:	e7c7      	b.n	11efe <__smakebuf_r+0xe>
   11f6e:	220c      	movs	r2, #12
   11f70:	5ea3      	ldrsh	r3, [r4, r2]
   11f72:	e7e5      	b.n	11f40 <__smakebuf_r+0x50>
   11f74:	0001175d 	.word	0x0001175d

00011f78 <_malloc_r>:
   11f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f7a:	4657      	mov	r7, sl
   11f7c:	4645      	mov	r5, r8
   11f7e:	46de      	mov	lr, fp
   11f80:	464e      	mov	r6, r9
   11f82:	b5e0      	push	{r5, r6, r7, lr}
   11f84:	000d      	movs	r5, r1
   11f86:	350b      	adds	r5, #11
   11f88:	b083      	sub	sp, #12
   11f8a:	0007      	movs	r7, r0
   11f8c:	2d16      	cmp	r5, #22
   11f8e:	d800      	bhi.n	11f92 <_malloc_r+0x1a>
   11f90:	e09f      	b.n	120d2 <_malloc_r+0x15a>
   11f92:	2307      	movs	r3, #7
   11f94:	439d      	bics	r5, r3
   11f96:	d500      	bpl.n	11f9a <_malloc_r+0x22>
   11f98:	e0c4      	b.n	12124 <_malloc_r+0x1ac>
   11f9a:	42a9      	cmp	r1, r5
   11f9c:	d900      	bls.n	11fa0 <_malloc_r+0x28>
   11f9e:	e0c1      	b.n	12124 <_malloc_r+0x1ac>
   11fa0:	f000 fb86 	bl	126b0 <__malloc_lock>
   11fa4:	23f8      	movs	r3, #248	; 0xf8
   11fa6:	33ff      	adds	r3, #255	; 0xff
   11fa8:	429d      	cmp	r5, r3
   11faa:	d800      	bhi.n	11fae <_malloc_r+0x36>
   11fac:	e28f      	b.n	124ce <_malloc_r+0x556>
   11fae:	0a68      	lsrs	r0, r5, #9
   11fb0:	d100      	bne.n	11fb4 <_malloc_r+0x3c>
   11fb2:	e0bb      	b.n	1212c <_malloc_r+0x1b4>
   11fb4:	2804      	cmp	r0, #4
   11fb6:	d900      	bls.n	11fba <_malloc_r+0x42>
   11fb8:	e162      	b.n	12280 <_malloc_r+0x308>
   11fba:	2338      	movs	r3, #56	; 0x38
   11fbc:	4698      	mov	r8, r3
   11fbe:	09a8      	lsrs	r0, r5, #6
   11fc0:	4480      	add	r8, r0
   11fc2:	3039      	adds	r0, #57	; 0x39
   11fc4:	00c1      	lsls	r1, r0, #3
   11fc6:	4ed2      	ldr	r6, [pc, #840]	; (12310 <_malloc_r+0x398>)
   11fc8:	1871      	adds	r1, r6, r1
   11fca:	3908      	subs	r1, #8
   11fcc:	68cc      	ldr	r4, [r1, #12]
   11fce:	42a1      	cmp	r1, r4
   11fd0:	d019      	beq.n	12006 <_malloc_r+0x8e>
   11fd2:	2303      	movs	r3, #3
   11fd4:	6862      	ldr	r2, [r4, #4]
   11fd6:	439a      	bics	r2, r3
   11fd8:	0013      	movs	r3, r2
   11fda:	1b52      	subs	r2, r2, r5
   11fdc:	2a0f      	cmp	r2, #15
   11fde:	dd00      	ble.n	11fe2 <_malloc_r+0x6a>
   11fe0:	e0aa      	b.n	12138 <_malloc_r+0x1c0>
   11fe2:	2a00      	cmp	r2, #0
   11fe4:	db00      	blt.n	11fe8 <_malloc_r+0x70>
   11fe6:	e088      	b.n	120fa <_malloc_r+0x182>
   11fe8:	2303      	movs	r3, #3
   11fea:	469c      	mov	ip, r3
   11fec:	e008      	b.n	12000 <_malloc_r+0x88>
   11fee:	4662      	mov	r2, ip
   11ff0:	6863      	ldr	r3, [r4, #4]
   11ff2:	4393      	bics	r3, r2
   11ff4:	1b5a      	subs	r2, r3, r5
   11ff6:	2a0f      	cmp	r2, #15
   11ff8:	dd00      	ble.n	11ffc <_malloc_r+0x84>
   11ffa:	e09d      	b.n	12138 <_malloc_r+0x1c0>
   11ffc:	2a00      	cmp	r2, #0
   11ffe:	da7c      	bge.n	120fa <_malloc_r+0x182>
   12000:	68e4      	ldr	r4, [r4, #12]
   12002:	42a1      	cmp	r1, r4
   12004:	d1f3      	bne.n	11fee <_malloc_r+0x76>
   12006:	0032      	movs	r2, r6
   12008:	6934      	ldr	r4, [r6, #16]
   1200a:	3208      	adds	r2, #8
   1200c:	4294      	cmp	r4, r2
   1200e:	d100      	bne.n	12012 <_malloc_r+0x9a>
   12010:	e190      	b.n	12334 <_malloc_r+0x3bc>
   12012:	2303      	movs	r3, #3
   12014:	6861      	ldr	r1, [r4, #4]
   12016:	4399      	bics	r1, r3
   12018:	4689      	mov	r9, r1
   1201a:	1b49      	subs	r1, r1, r5
   1201c:	290f      	cmp	r1, #15
   1201e:	dd00      	ble.n	12022 <_malloc_r+0xaa>
   12020:	e162      	b.n	122e8 <_malloc_r+0x370>
   12022:	6172      	str	r2, [r6, #20]
   12024:	6132      	str	r2, [r6, #16]
   12026:	2900      	cmp	r1, #0
   12028:	db00      	blt.n	1202c <_malloc_r+0xb4>
   1202a:	e087      	b.n	1213c <_malloc_r+0x1c4>
   1202c:	4ab9      	ldr	r2, [pc, #740]	; (12314 <_malloc_r+0x39c>)
   1202e:	464b      	mov	r3, r9
   12030:	4591      	cmp	r9, r2
   12032:	d900      	bls.n	12036 <_malloc_r+0xbe>
   12034:	e130      	b.n	12298 <_malloc_r+0x320>
   12036:	08db      	lsrs	r3, r3, #3
   12038:	3aff      	subs	r2, #255	; 0xff
   1203a:	1099      	asrs	r1, r3, #2
   1203c:	3aff      	subs	r2, #255	; 0xff
   1203e:	408a      	lsls	r2, r1
   12040:	00db      	lsls	r3, r3, #3
   12042:	6871      	ldr	r1, [r6, #4]
   12044:	199b      	adds	r3, r3, r6
   12046:	430a      	orrs	r2, r1
   12048:	6899      	ldr	r1, [r3, #8]
   1204a:	6072      	str	r2, [r6, #4]
   1204c:	60e3      	str	r3, [r4, #12]
   1204e:	60a1      	str	r1, [r4, #8]
   12050:	609c      	str	r4, [r3, #8]
   12052:	0013      	movs	r3, r2
   12054:	60cc      	str	r4, [r1, #12]
   12056:	2101      	movs	r1, #1
   12058:	1082      	asrs	r2, r0, #2
   1205a:	4091      	lsls	r1, r2
   1205c:	4299      	cmp	r1, r3
   1205e:	d86f      	bhi.n	12140 <_malloc_r+0x1c8>
   12060:	420b      	tst	r3, r1
   12062:	d105      	bne.n	12070 <_malloc_r+0xf8>
   12064:	2203      	movs	r2, #3
   12066:	4390      	bics	r0, r2
   12068:	0049      	lsls	r1, r1, #1
   1206a:	3004      	adds	r0, #4
   1206c:	420b      	tst	r3, r1
   1206e:	d0fb      	beq.n	12068 <_malloc_r+0xf0>
   12070:	2303      	movs	r3, #3
   12072:	4698      	mov	r8, r3
   12074:	00c3      	lsls	r3, r0, #3
   12076:	4699      	mov	r9, r3
   12078:	44b1      	add	r9, r6
   1207a:	46cc      	mov	ip, r9
   1207c:	4682      	mov	sl, r0
   1207e:	4663      	mov	r3, ip
   12080:	68dc      	ldr	r4, [r3, #12]
   12082:	45a4      	cmp	ip, r4
   12084:	d107      	bne.n	12096 <_malloc_r+0x11e>
   12086:	e157      	b.n	12338 <_malloc_r+0x3c0>
   12088:	2a00      	cmp	r2, #0
   1208a:	db00      	blt.n	1208e <_malloc_r+0x116>
   1208c:	e166      	b.n	1235c <_malloc_r+0x3e4>
   1208e:	68e4      	ldr	r4, [r4, #12]
   12090:	45a4      	cmp	ip, r4
   12092:	d100      	bne.n	12096 <_malloc_r+0x11e>
   12094:	e150      	b.n	12338 <_malloc_r+0x3c0>
   12096:	4642      	mov	r2, r8
   12098:	6863      	ldr	r3, [r4, #4]
   1209a:	4393      	bics	r3, r2
   1209c:	1b5a      	subs	r2, r3, r5
   1209e:	2a0f      	cmp	r2, #15
   120a0:	ddf2      	ble.n	12088 <_malloc_r+0x110>
   120a2:	2001      	movs	r0, #1
   120a4:	4680      	mov	r8, r0
   120a6:	1961      	adds	r1, r4, r5
   120a8:	4305      	orrs	r5, r0
   120aa:	6065      	str	r5, [r4, #4]
   120ac:	68a0      	ldr	r0, [r4, #8]
   120ae:	68e5      	ldr	r5, [r4, #12]
   120b0:	3608      	adds	r6, #8
   120b2:	60c5      	str	r5, [r0, #12]
   120b4:	60a8      	str	r0, [r5, #8]
   120b6:	4640      	mov	r0, r8
   120b8:	60f1      	str	r1, [r6, #12]
   120ba:	60b1      	str	r1, [r6, #8]
   120bc:	4310      	orrs	r0, r2
   120be:	6048      	str	r0, [r1, #4]
   120c0:	60ce      	str	r6, [r1, #12]
   120c2:	608e      	str	r6, [r1, #8]
   120c4:	0038      	movs	r0, r7
   120c6:	50e2      	str	r2, [r4, r3]
   120c8:	f000 faf4 	bl	126b4 <__malloc_unlock>
   120cc:	0020      	movs	r0, r4
   120ce:	3008      	adds	r0, #8
   120d0:	e021      	b.n	12116 <_malloc_r+0x19e>
   120d2:	2910      	cmp	r1, #16
   120d4:	d826      	bhi.n	12124 <_malloc_r+0x1ac>
   120d6:	0038      	movs	r0, r7
   120d8:	f000 faea 	bl	126b0 <__malloc_lock>
   120dc:	2510      	movs	r5, #16
   120de:	2318      	movs	r3, #24
   120e0:	2002      	movs	r0, #2
   120e2:	4e8b      	ldr	r6, [pc, #556]	; (12310 <_malloc_r+0x398>)
   120e4:	18f3      	adds	r3, r6, r3
   120e6:	001a      	movs	r2, r3
   120e8:	685c      	ldr	r4, [r3, #4]
   120ea:	3a08      	subs	r2, #8
   120ec:	4294      	cmp	r4, r2
   120ee:	d100      	bne.n	120f2 <_malloc_r+0x17a>
   120f0:	e12e      	b.n	12350 <_malloc_r+0x3d8>
   120f2:	2303      	movs	r3, #3
   120f4:	6862      	ldr	r2, [r4, #4]
   120f6:	439a      	bics	r2, r3
   120f8:	0013      	movs	r3, r2
   120fa:	68e2      	ldr	r2, [r4, #12]
   120fc:	68a1      	ldr	r1, [r4, #8]
   120fe:	60ca      	str	r2, [r1, #12]
   12100:	6091      	str	r1, [r2, #8]
   12102:	2201      	movs	r2, #1
   12104:	18e3      	adds	r3, r4, r3
   12106:	6859      	ldr	r1, [r3, #4]
   12108:	0038      	movs	r0, r7
   1210a:	430a      	orrs	r2, r1
   1210c:	605a      	str	r2, [r3, #4]
   1210e:	f000 fad1 	bl	126b4 <__malloc_unlock>
   12112:	0020      	movs	r0, r4
   12114:	3008      	adds	r0, #8
   12116:	b003      	add	sp, #12
   12118:	bc3c      	pop	{r2, r3, r4, r5}
   1211a:	4690      	mov	r8, r2
   1211c:	4699      	mov	r9, r3
   1211e:	46a2      	mov	sl, r4
   12120:	46ab      	mov	fp, r5
   12122:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12124:	230c      	movs	r3, #12
   12126:	2000      	movs	r0, #0
   12128:	603b      	str	r3, [r7, #0]
   1212a:	e7f4      	b.n	12116 <_malloc_r+0x19e>
   1212c:	2180      	movs	r1, #128	; 0x80
   1212e:	233f      	movs	r3, #63	; 0x3f
   12130:	2040      	movs	r0, #64	; 0x40
   12132:	0089      	lsls	r1, r1, #2
   12134:	4698      	mov	r8, r3
   12136:	e746      	b.n	11fc6 <_malloc_r+0x4e>
   12138:	4640      	mov	r0, r8
   1213a:	e764      	b.n	12006 <_malloc_r+0x8e>
   1213c:	464b      	mov	r3, r9
   1213e:	e7e0      	b.n	12102 <_malloc_r+0x18a>
   12140:	2303      	movs	r3, #3
   12142:	68b4      	ldr	r4, [r6, #8]
   12144:	6862      	ldr	r2, [r4, #4]
   12146:	439a      	bics	r2, r3
   12148:	4690      	mov	r8, r2
   1214a:	42aa      	cmp	r2, r5
   1214c:	d303      	bcc.n	12156 <_malloc_r+0x1de>
   1214e:	1b53      	subs	r3, r2, r5
   12150:	2b0f      	cmp	r3, #15
   12152:	dd00      	ble.n	12156 <_malloc_r+0x1de>
   12154:	e086      	b.n	12264 <_malloc_r+0x2ec>
   12156:	0023      	movs	r3, r4
   12158:	4443      	add	r3, r8
   1215a:	4a6f      	ldr	r2, [pc, #444]	; (12318 <_malloc_r+0x3a0>)
   1215c:	9301      	str	r3, [sp, #4]
   1215e:	4b6f      	ldr	r3, [pc, #444]	; (1231c <_malloc_r+0x3a4>)
   12160:	4693      	mov	fp, r2
   12162:	681b      	ldr	r3, [r3, #0]
   12164:	6812      	ldr	r2, [r2, #0]
   12166:	18eb      	adds	r3, r5, r3
   12168:	3201      	adds	r2, #1
   1216a:	d100      	bne.n	1216e <_malloc_r+0x1f6>
   1216c:	e168      	b.n	12440 <_malloc_r+0x4c8>
   1216e:	4a6c      	ldr	r2, [pc, #432]	; (12320 <_malloc_r+0x3a8>)
   12170:	4694      	mov	ip, r2
   12172:	4463      	add	r3, ip
   12174:	0b1b      	lsrs	r3, r3, #12
   12176:	031b      	lsls	r3, r3, #12
   12178:	9300      	str	r3, [sp, #0]
   1217a:	9900      	ldr	r1, [sp, #0]
   1217c:	0038      	movs	r0, r7
   1217e:	f000 ffa1 	bl	130c4 <_sbrk_r>
   12182:	0003      	movs	r3, r0
   12184:	4681      	mov	r9, r0
   12186:	3301      	adds	r3, #1
   12188:	d061      	beq.n	1224e <_malloc_r+0x2d6>
   1218a:	9b01      	ldr	r3, [sp, #4]
   1218c:	4283      	cmp	r3, r0
   1218e:	d900      	bls.n	12192 <_malloc_r+0x21a>
   12190:	e0ff      	b.n	12392 <_malloc_r+0x41a>
   12192:	4b64      	ldr	r3, [pc, #400]	; (12324 <_malloc_r+0x3ac>)
   12194:	9a00      	ldr	r2, [sp, #0]
   12196:	469a      	mov	sl, r3
   12198:	681b      	ldr	r3, [r3, #0]
   1219a:	469c      	mov	ip, r3
   1219c:	4653      	mov	r3, sl
   1219e:	4462      	add	r2, ip
   121a0:	601a      	str	r2, [r3, #0]
   121a2:	9b01      	ldr	r3, [sp, #4]
   121a4:	0011      	movs	r1, r2
   121a6:	4283      	cmp	r3, r0
   121a8:	d100      	bne.n	121ac <_malloc_r+0x234>
   121aa:	e155      	b.n	12458 <_malloc_r+0x4e0>
   121ac:	465b      	mov	r3, fp
   121ae:	681b      	ldr	r3, [r3, #0]
   121b0:	3301      	adds	r3, #1
   121b2:	d100      	bne.n	121b6 <_malloc_r+0x23e>
   121b4:	e16c      	b.n	12490 <_malloc_r+0x518>
   121b6:	464b      	mov	r3, r9
   121b8:	9a01      	ldr	r2, [sp, #4]
   121ba:	1a9b      	subs	r3, r3, r2
   121bc:	1859      	adds	r1, r3, r1
   121be:	4653      	mov	r3, sl
   121c0:	6019      	str	r1, [r3, #0]
   121c2:	2307      	movs	r3, #7
   121c4:	464a      	mov	r2, r9
   121c6:	4013      	ands	r3, r2
   121c8:	d100      	bne.n	121cc <_malloc_r+0x254>
   121ca:	e124      	b.n	12416 <_malloc_r+0x49e>
   121cc:	2108      	movs	r1, #8
   121ce:	4689      	mov	r9, r1
   121d0:	4955      	ldr	r1, [pc, #340]	; (12328 <_malloc_r+0x3b0>)
   121d2:	1ad2      	subs	r2, r2, r3
   121d4:	4491      	add	r9, r2
   121d6:	1acb      	subs	r3, r1, r3
   121d8:	9a00      	ldr	r2, [sp, #0]
   121da:	0038      	movs	r0, r7
   121dc:	444a      	add	r2, r9
   121de:	0511      	lsls	r1, r2, #20
   121e0:	0d09      	lsrs	r1, r1, #20
   121e2:	1a5b      	subs	r3, r3, r1
   121e4:	0019      	movs	r1, r3
   121e6:	469b      	mov	fp, r3
   121e8:	f000 ff6c 	bl	130c4 <_sbrk_r>
   121ec:	1c43      	adds	r3, r0, #1
   121ee:	d100      	bne.n	121f2 <_malloc_r+0x27a>
   121f0:	e142      	b.n	12478 <_malloc_r+0x500>
   121f2:	464b      	mov	r3, r9
   121f4:	1ac0      	subs	r0, r0, r3
   121f6:	2301      	movs	r3, #1
   121f8:	4458      	add	r0, fp
   121fa:	4318      	orrs	r0, r3
   121fc:	4653      	mov	r3, sl
   121fe:	681b      	ldr	r3, [r3, #0]
   12200:	445b      	add	r3, fp
   12202:	0019      	movs	r1, r3
   12204:	4653      	mov	r3, sl
   12206:	6019      	str	r1, [r3, #0]
   12208:	464b      	mov	r3, r9
   1220a:	60b3      	str	r3, [r6, #8]
   1220c:	6058      	str	r0, [r3, #4]
   1220e:	42b4      	cmp	r4, r6
   12210:	d013      	beq.n	1223a <_malloc_r+0x2c2>
   12212:	4643      	mov	r3, r8
   12214:	2b0f      	cmp	r3, #15
   12216:	d800      	bhi.n	1221a <_malloc_r+0x2a2>
   12218:	e0e8      	b.n	123ec <_malloc_r+0x474>
   1221a:	4643      	mov	r3, r8
   1221c:	2207      	movs	r2, #7
   1221e:	6860      	ldr	r0, [r4, #4]
   12220:	3b0c      	subs	r3, #12
   12222:	4393      	bics	r3, r2
   12224:	3a06      	subs	r2, #6
   12226:	4002      	ands	r2, r0
   12228:	2005      	movs	r0, #5
   1222a:	431a      	orrs	r2, r3
   1222c:	6062      	str	r2, [r4, #4]
   1222e:	18e2      	adds	r2, r4, r3
   12230:	6050      	str	r0, [r2, #4]
   12232:	6090      	str	r0, [r2, #8]
   12234:	2b0f      	cmp	r3, #15
   12236:	d900      	bls.n	1223a <_malloc_r+0x2c2>
   12238:	e122      	b.n	12480 <_malloc_r+0x508>
   1223a:	4b3c      	ldr	r3, [pc, #240]	; (1232c <_malloc_r+0x3b4>)
   1223c:	681a      	ldr	r2, [r3, #0]
   1223e:	4291      	cmp	r1, r2
   12240:	d900      	bls.n	12244 <_malloc_r+0x2cc>
   12242:	6019      	str	r1, [r3, #0]
   12244:	4b3a      	ldr	r3, [pc, #232]	; (12330 <_malloc_r+0x3b8>)
   12246:	681a      	ldr	r2, [r3, #0]
   12248:	4291      	cmp	r1, r2
   1224a:	d900      	bls.n	1224e <_malloc_r+0x2d6>
   1224c:	6019      	str	r1, [r3, #0]
   1224e:	2303      	movs	r3, #3
   12250:	68b4      	ldr	r4, [r6, #8]
   12252:	6862      	ldr	r2, [r4, #4]
   12254:	439a      	bics	r2, r3
   12256:	1b53      	subs	r3, r2, r5
   12258:	4295      	cmp	r5, r2
   1225a:	d900      	bls.n	1225e <_malloc_r+0x2e6>
   1225c:	e0c9      	b.n	123f2 <_malloc_r+0x47a>
   1225e:	2b0f      	cmp	r3, #15
   12260:	dc00      	bgt.n	12264 <_malloc_r+0x2ec>
   12262:	e0c6      	b.n	123f2 <_malloc_r+0x47a>
   12264:	2201      	movs	r2, #1
   12266:	0029      	movs	r1, r5
   12268:	4313      	orrs	r3, r2
   1226a:	4311      	orrs	r1, r2
   1226c:	1965      	adds	r5, r4, r5
   1226e:	6061      	str	r1, [r4, #4]
   12270:	0038      	movs	r0, r7
   12272:	60b5      	str	r5, [r6, #8]
   12274:	606b      	str	r3, [r5, #4]
   12276:	f000 fa1d 	bl	126b4 <__malloc_unlock>
   1227a:	0020      	movs	r0, r4
   1227c:	3008      	adds	r0, #8
   1227e:	e74a      	b.n	12116 <_malloc_r+0x19e>
   12280:	2814      	cmp	r0, #20
   12282:	d97a      	bls.n	1237a <_malloc_r+0x402>
   12284:	2854      	cmp	r0, #84	; 0x54
   12286:	d900      	bls.n	1228a <_malloc_r+0x312>
   12288:	e0ba      	b.n	12400 <_malloc_r+0x488>
   1228a:	236e      	movs	r3, #110	; 0x6e
   1228c:	4698      	mov	r8, r3
   1228e:	0b28      	lsrs	r0, r5, #12
   12290:	4480      	add	r8, r0
   12292:	306f      	adds	r0, #111	; 0x6f
   12294:	00c1      	lsls	r1, r0, #3
   12296:	e696      	b.n	11fc6 <_malloc_r+0x4e>
   12298:	0a5a      	lsrs	r2, r3, #9
   1229a:	2a04      	cmp	r2, #4
   1229c:	d973      	bls.n	12386 <_malloc_r+0x40e>
   1229e:	2a14      	cmp	r2, #20
   122a0:	d900      	bls.n	122a4 <_malloc_r+0x32c>
   122a2:	e0d0      	b.n	12446 <_malloc_r+0x4ce>
   122a4:	0011      	movs	r1, r2
   122a6:	325c      	adds	r2, #92	; 0x5c
   122a8:	315b      	adds	r1, #91	; 0x5b
   122aa:	00d2      	lsls	r2, r2, #3
   122ac:	2308      	movs	r3, #8
   122ae:	425b      	negs	r3, r3
   122b0:	469c      	mov	ip, r3
   122b2:	18b2      	adds	r2, r6, r2
   122b4:	4494      	add	ip, r2
   122b6:	4663      	mov	r3, ip
   122b8:	689a      	ldr	r2, [r3, #8]
   122ba:	2303      	movs	r3, #3
   122bc:	4698      	mov	r8, r3
   122be:	4594      	cmp	ip, r2
   122c0:	d100      	bne.n	122c4 <_malloc_r+0x34c>
   122c2:	e0ab      	b.n	1241c <_malloc_r+0x4a4>
   122c4:	4643      	mov	r3, r8
   122c6:	6851      	ldr	r1, [r2, #4]
   122c8:	4399      	bics	r1, r3
   122ca:	4589      	cmp	r9, r1
   122cc:	d300      	bcc.n	122d0 <_malloc_r+0x358>
   122ce:	e095      	b.n	123fc <_malloc_r+0x484>
   122d0:	6892      	ldr	r2, [r2, #8]
   122d2:	4594      	cmp	ip, r2
   122d4:	d1f6      	bne.n	122c4 <_malloc_r+0x34c>
   122d6:	4663      	mov	r3, ip
   122d8:	68da      	ldr	r2, [r3, #12]
   122da:	6873      	ldr	r3, [r6, #4]
   122dc:	4661      	mov	r1, ip
   122de:	60e2      	str	r2, [r4, #12]
   122e0:	60a1      	str	r1, [r4, #8]
   122e2:	6094      	str	r4, [r2, #8]
   122e4:	60cc      	str	r4, [r1, #12]
   122e6:	e6b6      	b.n	12056 <_malloc_r+0xde>
   122e8:	2301      	movs	r3, #1
   122ea:	1960      	adds	r0, r4, r5
   122ec:	431d      	orrs	r5, r3
   122ee:	6065      	str	r5, [r4, #4]
   122f0:	6170      	str	r0, [r6, #20]
   122f2:	6130      	str	r0, [r6, #16]
   122f4:	60c2      	str	r2, [r0, #12]
   122f6:	6082      	str	r2, [r0, #8]
   122f8:	001a      	movs	r2, r3
   122fa:	464b      	mov	r3, r9
   122fc:	430a      	orrs	r2, r1
   122fe:	6042      	str	r2, [r0, #4]
   12300:	0038      	movs	r0, r7
   12302:	50e1      	str	r1, [r4, r3]
   12304:	f000 f9d6 	bl	126b4 <__malloc_unlock>
   12308:	0020      	movs	r0, r4
   1230a:	3008      	adds	r0, #8
   1230c:	e703      	b.n	12116 <_malloc_r+0x19e>
   1230e:	46c0      	nop			; (mov r8, r8)
   12310:	200006d4 	.word	0x200006d4
   12314:	000001ff 	.word	0x000001ff
   12318:	20000adc 	.word	0x20000adc
   1231c:	20001b30 	.word	0x20001b30
   12320:	0000100f 	.word	0x0000100f
   12324:	20001b00 	.word	0x20001b00
   12328:	00001008 	.word	0x00001008
   1232c:	20001b28 	.word	0x20001b28
   12330:	20001b2c 	.word	0x20001b2c
   12334:	6873      	ldr	r3, [r6, #4]
   12336:	e68e      	b.n	12056 <_malloc_r+0xde>
   12338:	2308      	movs	r3, #8
   1233a:	469b      	mov	fp, r3
   1233c:	3b07      	subs	r3, #7
   1233e:	44dc      	add	ip, fp
   12340:	469b      	mov	fp, r3
   12342:	44da      	add	sl, fp
   12344:	4643      	mov	r3, r8
   12346:	4652      	mov	r2, sl
   12348:	4213      	tst	r3, r2
   1234a:	d000      	beq.n	1234e <_malloc_r+0x3d6>
   1234c:	e697      	b.n	1207e <_malloc_r+0x106>
   1234e:	e037      	b.n	123c0 <_malloc_r+0x448>
   12350:	68dc      	ldr	r4, [r3, #12]
   12352:	3002      	adds	r0, #2
   12354:	42a3      	cmp	r3, r4
   12356:	d100      	bne.n	1235a <_malloc_r+0x3e2>
   12358:	e655      	b.n	12006 <_malloc_r+0x8e>
   1235a:	e6ca      	b.n	120f2 <_malloc_r+0x17a>
   1235c:	2201      	movs	r2, #1
   1235e:	18e3      	adds	r3, r4, r3
   12360:	6859      	ldr	r1, [r3, #4]
   12362:	0038      	movs	r0, r7
   12364:	430a      	orrs	r2, r1
   12366:	605a      	str	r2, [r3, #4]
   12368:	68e3      	ldr	r3, [r4, #12]
   1236a:	68a2      	ldr	r2, [r4, #8]
   1236c:	60d3      	str	r3, [r2, #12]
   1236e:	609a      	str	r2, [r3, #8]
   12370:	f000 f9a0 	bl	126b4 <__malloc_unlock>
   12374:	0020      	movs	r0, r4
   12376:	3008      	adds	r0, #8
   12378:	e6cd      	b.n	12116 <_malloc_r+0x19e>
   1237a:	235b      	movs	r3, #91	; 0x5b
   1237c:	4698      	mov	r8, r3
   1237e:	4480      	add	r8, r0
   12380:	305c      	adds	r0, #92	; 0x5c
   12382:	00c1      	lsls	r1, r0, #3
   12384:	e61f      	b.n	11fc6 <_malloc_r+0x4e>
   12386:	099a      	lsrs	r2, r3, #6
   12388:	0011      	movs	r1, r2
   1238a:	3239      	adds	r2, #57	; 0x39
   1238c:	3138      	adds	r1, #56	; 0x38
   1238e:	00d2      	lsls	r2, r2, #3
   12390:	e78c      	b.n	122ac <_malloc_r+0x334>
   12392:	42b4      	cmp	r4, r6
   12394:	d000      	beq.n	12398 <_malloc_r+0x420>
   12396:	e75a      	b.n	1224e <_malloc_r+0x2d6>
   12398:	4b4f      	ldr	r3, [pc, #316]	; (124d8 <_malloc_r+0x560>)
   1239a:	9a00      	ldr	r2, [sp, #0]
   1239c:	469a      	mov	sl, r3
   1239e:	681b      	ldr	r3, [r3, #0]
   123a0:	469c      	mov	ip, r3
   123a2:	4653      	mov	r3, sl
   123a4:	4462      	add	r2, ip
   123a6:	0011      	movs	r1, r2
   123a8:	601a      	str	r2, [r3, #0]
   123aa:	e6ff      	b.n	121ac <_malloc_r+0x234>
   123ac:	2308      	movs	r3, #8
   123ae:	425b      	negs	r3, r3
   123b0:	469c      	mov	ip, r3
   123b2:	44e1      	add	r9, ip
   123b4:	464b      	mov	r3, r9
   123b6:	689b      	ldr	r3, [r3, #8]
   123b8:	3801      	subs	r0, #1
   123ba:	4599      	cmp	r9, r3
   123bc:	d000      	beq.n	123c0 <_malloc_r+0x448>
   123be:	e084      	b.n	124ca <_malloc_r+0x552>
   123c0:	4643      	mov	r3, r8
   123c2:	4203      	tst	r3, r0
   123c4:	d1f2      	bne.n	123ac <_malloc_r+0x434>
   123c6:	6873      	ldr	r3, [r6, #4]
   123c8:	438b      	bics	r3, r1
   123ca:	6073      	str	r3, [r6, #4]
   123cc:	0049      	lsls	r1, r1, #1
   123ce:	4299      	cmp	r1, r3
   123d0:	d900      	bls.n	123d4 <_malloc_r+0x45c>
   123d2:	e6b5      	b.n	12140 <_malloc_r+0x1c8>
   123d4:	2900      	cmp	r1, #0
   123d6:	d100      	bne.n	123da <_malloc_r+0x462>
   123d8:	e6b2      	b.n	12140 <_malloc_r+0x1c8>
   123da:	4650      	mov	r0, sl
   123dc:	420b      	tst	r3, r1
   123de:	d000      	beq.n	123e2 <_malloc_r+0x46a>
   123e0:	e648      	b.n	12074 <_malloc_r+0xfc>
   123e2:	0049      	lsls	r1, r1, #1
   123e4:	3004      	adds	r0, #4
   123e6:	420b      	tst	r3, r1
   123e8:	d0fb      	beq.n	123e2 <_malloc_r+0x46a>
   123ea:	e643      	b.n	12074 <_malloc_r+0xfc>
   123ec:	2301      	movs	r3, #1
   123ee:	464a      	mov	r2, r9
   123f0:	6053      	str	r3, [r2, #4]
   123f2:	0038      	movs	r0, r7
   123f4:	f000 f95e 	bl	126b4 <__malloc_unlock>
   123f8:	2000      	movs	r0, #0
   123fa:	e68c      	b.n	12116 <_malloc_r+0x19e>
   123fc:	4694      	mov	ip, r2
   123fe:	e76a      	b.n	122d6 <_malloc_r+0x35e>
   12400:	23aa      	movs	r3, #170	; 0xaa
   12402:	005b      	lsls	r3, r3, #1
   12404:	4298      	cmp	r0, r3
   12406:	d811      	bhi.n	1242c <_malloc_r+0x4b4>
   12408:	3bdd      	subs	r3, #221	; 0xdd
   1240a:	4698      	mov	r8, r3
   1240c:	0be8      	lsrs	r0, r5, #15
   1240e:	4480      	add	r8, r0
   12410:	3078      	adds	r0, #120	; 0x78
   12412:	00c1      	lsls	r1, r0, #3
   12414:	e5d7      	b.n	11fc6 <_malloc_r+0x4e>
   12416:	2380      	movs	r3, #128	; 0x80
   12418:	015b      	lsls	r3, r3, #5
   1241a:	e6dd      	b.n	121d8 <_malloc_r+0x260>
   1241c:	1089      	asrs	r1, r1, #2
   1241e:	3b02      	subs	r3, #2
   12420:	408b      	lsls	r3, r1
   12422:	6872      	ldr	r2, [r6, #4]
   12424:	4313      	orrs	r3, r2
   12426:	6073      	str	r3, [r6, #4]
   12428:	4662      	mov	r2, ip
   1242a:	e757      	b.n	122dc <_malloc_r+0x364>
   1242c:	4b2b      	ldr	r3, [pc, #172]	; (124dc <_malloc_r+0x564>)
   1242e:	4298      	cmp	r0, r3
   12430:	d81c      	bhi.n	1246c <_malloc_r+0x4f4>
   12432:	237c      	movs	r3, #124	; 0x7c
   12434:	4698      	mov	r8, r3
   12436:	0ca8      	lsrs	r0, r5, #18
   12438:	4480      	add	r8, r0
   1243a:	307d      	adds	r0, #125	; 0x7d
   1243c:	00c1      	lsls	r1, r0, #3
   1243e:	e5c2      	b.n	11fc6 <_malloc_r+0x4e>
   12440:	3310      	adds	r3, #16
   12442:	9300      	str	r3, [sp, #0]
   12444:	e699      	b.n	1217a <_malloc_r+0x202>
   12446:	2a54      	cmp	r2, #84	; 0x54
   12448:	d826      	bhi.n	12498 <_malloc_r+0x520>
   1244a:	464b      	mov	r3, r9
   1244c:	0b1a      	lsrs	r2, r3, #12
   1244e:	0011      	movs	r1, r2
   12450:	326f      	adds	r2, #111	; 0x6f
   12452:	316e      	adds	r1, #110	; 0x6e
   12454:	00d2      	lsls	r2, r2, #3
   12456:	e729      	b.n	122ac <_malloc_r+0x334>
   12458:	051b      	lsls	r3, r3, #20
   1245a:	d000      	beq.n	1245e <_malloc_r+0x4e6>
   1245c:	e6a6      	b.n	121ac <_malloc_r+0x234>
   1245e:	2001      	movs	r0, #1
   12460:	9b00      	ldr	r3, [sp, #0]
   12462:	68b2      	ldr	r2, [r6, #8]
   12464:	4443      	add	r3, r8
   12466:	4303      	orrs	r3, r0
   12468:	6053      	str	r3, [r2, #4]
   1246a:	e6e6      	b.n	1223a <_malloc_r+0x2c2>
   1246c:	21fe      	movs	r1, #254	; 0xfe
   1246e:	237e      	movs	r3, #126	; 0x7e
   12470:	207f      	movs	r0, #127	; 0x7f
   12472:	0089      	lsls	r1, r1, #2
   12474:	4698      	mov	r8, r3
   12476:	e5a6      	b.n	11fc6 <_malloc_r+0x4e>
   12478:	2300      	movs	r3, #0
   1247a:	2001      	movs	r0, #1
   1247c:	469b      	mov	fp, r3
   1247e:	e6bd      	b.n	121fc <_malloc_r+0x284>
   12480:	0021      	movs	r1, r4
   12482:	0038      	movs	r0, r7
   12484:	3108      	adds	r1, #8
   12486:	f7ff fa5f 	bl	11948 <_free_r>
   1248a:	4653      	mov	r3, sl
   1248c:	6819      	ldr	r1, [r3, #0]
   1248e:	e6d4      	b.n	1223a <_malloc_r+0x2c2>
   12490:	465b      	mov	r3, fp
   12492:	464a      	mov	r2, r9
   12494:	601a      	str	r2, [r3, #0]
   12496:	e694      	b.n	121c2 <_malloc_r+0x24a>
   12498:	21aa      	movs	r1, #170	; 0xaa
   1249a:	0049      	lsls	r1, r1, #1
   1249c:	428a      	cmp	r2, r1
   1249e:	d806      	bhi.n	124ae <_malloc_r+0x536>
   124a0:	464b      	mov	r3, r9
   124a2:	0bda      	lsrs	r2, r3, #15
   124a4:	0011      	movs	r1, r2
   124a6:	3278      	adds	r2, #120	; 0x78
   124a8:	3177      	adds	r1, #119	; 0x77
   124aa:	00d2      	lsls	r2, r2, #3
   124ac:	e6fe      	b.n	122ac <_malloc_r+0x334>
   124ae:	490b      	ldr	r1, [pc, #44]	; (124dc <_malloc_r+0x564>)
   124b0:	428a      	cmp	r2, r1
   124b2:	d806      	bhi.n	124c2 <_malloc_r+0x54a>
   124b4:	464b      	mov	r3, r9
   124b6:	0c9a      	lsrs	r2, r3, #18
   124b8:	0011      	movs	r1, r2
   124ba:	327d      	adds	r2, #125	; 0x7d
   124bc:	317c      	adds	r1, #124	; 0x7c
   124be:	00d2      	lsls	r2, r2, #3
   124c0:	e6f4      	b.n	122ac <_malloc_r+0x334>
   124c2:	22fe      	movs	r2, #254	; 0xfe
   124c4:	217e      	movs	r1, #126	; 0x7e
   124c6:	0092      	lsls	r2, r2, #2
   124c8:	e6f0      	b.n	122ac <_malloc_r+0x334>
   124ca:	6873      	ldr	r3, [r6, #4]
   124cc:	e77e      	b.n	123cc <_malloc_r+0x454>
   124ce:	002b      	movs	r3, r5
   124d0:	08e8      	lsrs	r0, r5, #3
   124d2:	3308      	adds	r3, #8
   124d4:	e605      	b.n	120e2 <_malloc_r+0x16a>
   124d6:	46c0      	nop			; (mov r8, r8)
   124d8:	20001b00 	.word	0x20001b00
   124dc:	00000554 	.word	0x00000554

000124e0 <__ascii_mbtowc>:
   124e0:	b082      	sub	sp, #8
   124e2:	2900      	cmp	r1, #0
   124e4:	d00a      	beq.n	124fc <__ascii_mbtowc+0x1c>
   124e6:	2a00      	cmp	r2, #0
   124e8:	d00b      	beq.n	12502 <__ascii_mbtowc+0x22>
   124ea:	2b00      	cmp	r3, #0
   124ec:	d00b      	beq.n	12506 <__ascii_mbtowc+0x26>
   124ee:	7813      	ldrb	r3, [r2, #0]
   124f0:	600b      	str	r3, [r1, #0]
   124f2:	7810      	ldrb	r0, [r2, #0]
   124f4:	1e43      	subs	r3, r0, #1
   124f6:	4198      	sbcs	r0, r3
   124f8:	b002      	add	sp, #8
   124fa:	4770      	bx	lr
   124fc:	a901      	add	r1, sp, #4
   124fe:	2a00      	cmp	r2, #0
   12500:	d1f3      	bne.n	124ea <__ascii_mbtowc+0xa>
   12502:	2000      	movs	r0, #0
   12504:	e7f8      	b.n	124f8 <__ascii_mbtowc+0x18>
   12506:	2002      	movs	r0, #2
   12508:	4240      	negs	r0, r0
   1250a:	e7f5      	b.n	124f8 <__ascii_mbtowc+0x18>

0001250c <memchr>:
   1250c:	b570      	push	{r4, r5, r6, lr}
   1250e:	b2cd      	uxtb	r5, r1
   12510:	0783      	lsls	r3, r0, #30
   12512:	d034      	beq.n	1257e <memchr+0x72>
   12514:	1e54      	subs	r4, r2, #1
   12516:	2a00      	cmp	r2, #0
   12518:	d01b      	beq.n	12552 <memchr+0x46>
   1251a:	7803      	ldrb	r3, [r0, #0]
   1251c:	42ab      	cmp	r3, r5
   1251e:	d019      	beq.n	12554 <memchr+0x48>
   12520:	2203      	movs	r2, #3
   12522:	e004      	b.n	1252e <memchr+0x22>
   12524:	3c01      	subs	r4, #1
   12526:	d314      	bcc.n	12552 <memchr+0x46>
   12528:	7803      	ldrb	r3, [r0, #0]
   1252a:	42ab      	cmp	r3, r5
   1252c:	d012      	beq.n	12554 <memchr+0x48>
   1252e:	3001      	adds	r0, #1
   12530:	4210      	tst	r0, r2
   12532:	d1f7      	bne.n	12524 <memchr+0x18>
   12534:	2c03      	cmp	r4, #3
   12536:	d80e      	bhi.n	12556 <memchr+0x4a>
   12538:	2c00      	cmp	r4, #0
   1253a:	d00a      	beq.n	12552 <memchr+0x46>
   1253c:	7803      	ldrb	r3, [r0, #0]
   1253e:	42ab      	cmp	r3, r5
   12540:	d008      	beq.n	12554 <memchr+0x48>
   12542:	1904      	adds	r4, r0, r4
   12544:	e002      	b.n	1254c <memchr+0x40>
   12546:	7803      	ldrb	r3, [r0, #0]
   12548:	42ab      	cmp	r3, r5
   1254a:	d003      	beq.n	12554 <memchr+0x48>
   1254c:	3001      	adds	r0, #1
   1254e:	4284      	cmp	r4, r0
   12550:	d1f9      	bne.n	12546 <memchr+0x3a>
   12552:	2000      	movs	r0, #0
   12554:	bd70      	pop	{r4, r5, r6, pc}
   12556:	22ff      	movs	r2, #255	; 0xff
   12558:	060b      	lsls	r3, r1, #24
   1255a:	0c1b      	lsrs	r3, r3, #16
   1255c:	4011      	ands	r1, r2
   1255e:	4319      	orrs	r1, r3
   12560:	040b      	lsls	r3, r1, #16
   12562:	4e08      	ldr	r6, [pc, #32]	; (12584 <memchr+0x78>)
   12564:	4319      	orrs	r1, r3
   12566:	6803      	ldr	r3, [r0, #0]
   12568:	4a07      	ldr	r2, [pc, #28]	; (12588 <memchr+0x7c>)
   1256a:	404b      	eors	r3, r1
   1256c:	189a      	adds	r2, r3, r2
   1256e:	439a      	bics	r2, r3
   12570:	4232      	tst	r2, r6
   12572:	d1e3      	bne.n	1253c <memchr+0x30>
   12574:	3c04      	subs	r4, #4
   12576:	3004      	adds	r0, #4
   12578:	2c03      	cmp	r4, #3
   1257a:	d8f4      	bhi.n	12566 <memchr+0x5a>
   1257c:	e7dc      	b.n	12538 <memchr+0x2c>
   1257e:	0014      	movs	r4, r2
   12580:	e7d8      	b.n	12534 <memchr+0x28>
   12582:	46c0      	nop			; (mov r8, r8)
   12584:	80808080 	.word	0x80808080
   12588:	fefefeff 	.word	0xfefefeff

0001258c <memcpy>:
   1258c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1258e:	0005      	movs	r5, r0
   12590:	2a0f      	cmp	r2, #15
   12592:	d92f      	bls.n	125f4 <memcpy+0x68>
   12594:	000b      	movs	r3, r1
   12596:	4303      	orrs	r3, r0
   12598:	079b      	lsls	r3, r3, #30
   1259a:	d134      	bne.n	12606 <memcpy+0x7a>
   1259c:	0016      	movs	r6, r2
   1259e:	000c      	movs	r4, r1
   125a0:	0003      	movs	r3, r0
   125a2:	3e10      	subs	r6, #16
   125a4:	0935      	lsrs	r5, r6, #4
   125a6:	3501      	adds	r5, #1
   125a8:	012d      	lsls	r5, r5, #4
   125aa:	1945      	adds	r5, r0, r5
   125ac:	6827      	ldr	r7, [r4, #0]
   125ae:	601f      	str	r7, [r3, #0]
   125b0:	6867      	ldr	r7, [r4, #4]
   125b2:	605f      	str	r7, [r3, #4]
   125b4:	68a7      	ldr	r7, [r4, #8]
   125b6:	609f      	str	r7, [r3, #8]
   125b8:	68e7      	ldr	r7, [r4, #12]
   125ba:	3410      	adds	r4, #16
   125bc:	60df      	str	r7, [r3, #12]
   125be:	3310      	adds	r3, #16
   125c0:	429d      	cmp	r5, r3
   125c2:	d1f3      	bne.n	125ac <memcpy+0x20>
   125c4:	230f      	movs	r3, #15
   125c6:	439e      	bics	r6, r3
   125c8:	3610      	adds	r6, #16
   125ca:	1985      	adds	r5, r0, r6
   125cc:	1989      	adds	r1, r1, r6
   125ce:	4013      	ands	r3, r2
   125d0:	2b03      	cmp	r3, #3
   125d2:	d91a      	bls.n	1260a <memcpy+0x7e>
   125d4:	1f1e      	subs	r6, r3, #4
   125d6:	2300      	movs	r3, #0
   125d8:	08b4      	lsrs	r4, r6, #2
   125da:	3401      	adds	r4, #1
   125dc:	00a4      	lsls	r4, r4, #2
   125de:	58cf      	ldr	r7, [r1, r3]
   125e0:	50ef      	str	r7, [r5, r3]
   125e2:	3304      	adds	r3, #4
   125e4:	42a3      	cmp	r3, r4
   125e6:	d1fa      	bne.n	125de <memcpy+0x52>
   125e8:	2403      	movs	r4, #3
   125ea:	43a6      	bics	r6, r4
   125ec:	1d33      	adds	r3, r6, #4
   125ee:	4022      	ands	r2, r4
   125f0:	18c9      	adds	r1, r1, r3
   125f2:	18ed      	adds	r5, r5, r3
   125f4:	2a00      	cmp	r2, #0
   125f6:	d005      	beq.n	12604 <memcpy+0x78>
   125f8:	2300      	movs	r3, #0
   125fa:	5ccc      	ldrb	r4, [r1, r3]
   125fc:	54ec      	strb	r4, [r5, r3]
   125fe:	3301      	adds	r3, #1
   12600:	4293      	cmp	r3, r2
   12602:	d1fa      	bne.n	125fa <memcpy+0x6e>
   12604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12606:	0005      	movs	r5, r0
   12608:	e7f6      	b.n	125f8 <memcpy+0x6c>
   1260a:	001a      	movs	r2, r3
   1260c:	e7f2      	b.n	125f4 <memcpy+0x68>
   1260e:	46c0      	nop			; (mov r8, r8)

00012610 <memmove>:
   12610:	b5f0      	push	{r4, r5, r6, r7, lr}
   12612:	4288      	cmp	r0, r1
   12614:	d90a      	bls.n	1262c <memmove+0x1c>
   12616:	188b      	adds	r3, r1, r2
   12618:	4298      	cmp	r0, r3
   1261a:	d207      	bcs.n	1262c <memmove+0x1c>
   1261c:	1e53      	subs	r3, r2, #1
   1261e:	2a00      	cmp	r2, #0
   12620:	d003      	beq.n	1262a <memmove+0x1a>
   12622:	5cca      	ldrb	r2, [r1, r3]
   12624:	54c2      	strb	r2, [r0, r3]
   12626:	3b01      	subs	r3, #1
   12628:	d2fb      	bcs.n	12622 <memmove+0x12>
   1262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1262c:	0005      	movs	r5, r0
   1262e:	2a0f      	cmp	r2, #15
   12630:	d808      	bhi.n	12644 <memmove+0x34>
   12632:	2a00      	cmp	r2, #0
   12634:	d0f9      	beq.n	1262a <memmove+0x1a>
   12636:	2300      	movs	r3, #0
   12638:	5ccc      	ldrb	r4, [r1, r3]
   1263a:	54ec      	strb	r4, [r5, r3]
   1263c:	3301      	adds	r3, #1
   1263e:	4293      	cmp	r3, r2
   12640:	d1fa      	bne.n	12638 <memmove+0x28>
   12642:	e7f2      	b.n	1262a <memmove+0x1a>
   12644:	000b      	movs	r3, r1
   12646:	4303      	orrs	r3, r0
   12648:	079b      	lsls	r3, r3, #30
   1264a:	d12d      	bne.n	126a8 <memmove+0x98>
   1264c:	0015      	movs	r5, r2
   1264e:	000c      	movs	r4, r1
   12650:	0003      	movs	r3, r0
   12652:	3d10      	subs	r5, #16
   12654:	092f      	lsrs	r7, r5, #4
   12656:	3701      	adds	r7, #1
   12658:	013f      	lsls	r7, r7, #4
   1265a:	19c7      	adds	r7, r0, r7
   1265c:	6826      	ldr	r6, [r4, #0]
   1265e:	601e      	str	r6, [r3, #0]
   12660:	6866      	ldr	r6, [r4, #4]
   12662:	605e      	str	r6, [r3, #4]
   12664:	68a6      	ldr	r6, [r4, #8]
   12666:	609e      	str	r6, [r3, #8]
   12668:	68e6      	ldr	r6, [r4, #12]
   1266a:	3410      	adds	r4, #16
   1266c:	60de      	str	r6, [r3, #12]
   1266e:	3310      	adds	r3, #16
   12670:	429f      	cmp	r7, r3
   12672:	d1f3      	bne.n	1265c <memmove+0x4c>
   12674:	240f      	movs	r4, #15
   12676:	43a5      	bics	r5, r4
   12678:	3510      	adds	r5, #16
   1267a:	1949      	adds	r1, r1, r5
   1267c:	4014      	ands	r4, r2
   1267e:	1945      	adds	r5, r0, r5
   12680:	2c03      	cmp	r4, #3
   12682:	d913      	bls.n	126ac <memmove+0x9c>
   12684:	2300      	movs	r3, #0
   12686:	1f27      	subs	r7, r4, #4
   12688:	08be      	lsrs	r6, r7, #2
   1268a:	3601      	adds	r6, #1
   1268c:	00b6      	lsls	r6, r6, #2
   1268e:	58cc      	ldr	r4, [r1, r3]
   12690:	50ec      	str	r4, [r5, r3]
   12692:	3304      	adds	r3, #4
   12694:	42b3      	cmp	r3, r6
   12696:	d1fa      	bne.n	1268e <memmove+0x7e>
   12698:	2603      	movs	r6, #3
   1269a:	43b7      	bics	r7, r6
   1269c:	1d3c      	adds	r4, r7, #4
   1269e:	1909      	adds	r1, r1, r4
   126a0:	192d      	adds	r5, r5, r4
   126a2:	4032      	ands	r2, r6
   126a4:	d1c7      	bne.n	12636 <memmove+0x26>
   126a6:	e7c0      	b.n	1262a <memmove+0x1a>
   126a8:	0005      	movs	r5, r0
   126aa:	e7c4      	b.n	12636 <memmove+0x26>
   126ac:	0022      	movs	r2, r4
   126ae:	e7c0      	b.n	12632 <memmove+0x22>

000126b0 <__malloc_lock>:
   126b0:	4770      	bx	lr
   126b2:	46c0      	nop			; (mov r8, r8)

000126b4 <__malloc_unlock>:
   126b4:	4770      	bx	lr
   126b6:	46c0      	nop			; (mov r8, r8)

000126b8 <_Balloc>:
   126b8:	b570      	push	{r4, r5, r6, lr}
   126ba:	0004      	movs	r4, r0
   126bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   126be:	000d      	movs	r5, r1
   126c0:	2800      	cmp	r0, #0
   126c2:	d00a      	beq.n	126da <_Balloc+0x22>
   126c4:	00ab      	lsls	r3, r5, #2
   126c6:	18c3      	adds	r3, r0, r3
   126c8:	6818      	ldr	r0, [r3, #0]
   126ca:	2800      	cmp	r0, #0
   126cc:	d00f      	beq.n	126ee <_Balloc+0x36>
   126ce:	6802      	ldr	r2, [r0, #0]
   126d0:	601a      	str	r2, [r3, #0]
   126d2:	2300      	movs	r3, #0
   126d4:	6103      	str	r3, [r0, #16]
   126d6:	60c3      	str	r3, [r0, #12]
   126d8:	bd70      	pop	{r4, r5, r6, pc}
   126da:	2221      	movs	r2, #33	; 0x21
   126dc:	2104      	movs	r1, #4
   126de:	0020      	movs	r0, r4
   126e0:	f000 fe28 	bl	13334 <_calloc_r>
   126e4:	64e0      	str	r0, [r4, #76]	; 0x4c
   126e6:	2800      	cmp	r0, #0
   126e8:	d1ec      	bne.n	126c4 <_Balloc+0xc>
   126ea:	2000      	movs	r0, #0
   126ec:	e7f4      	b.n	126d8 <_Balloc+0x20>
   126ee:	2601      	movs	r6, #1
   126f0:	40ae      	lsls	r6, r5
   126f2:	1d72      	adds	r2, r6, #5
   126f4:	0092      	lsls	r2, r2, #2
   126f6:	2101      	movs	r1, #1
   126f8:	0020      	movs	r0, r4
   126fa:	f000 fe1b 	bl	13334 <_calloc_r>
   126fe:	2800      	cmp	r0, #0
   12700:	d0f3      	beq.n	126ea <_Balloc+0x32>
   12702:	6045      	str	r5, [r0, #4]
   12704:	6086      	str	r6, [r0, #8]
   12706:	e7e4      	b.n	126d2 <_Balloc+0x1a>

00012708 <_Bfree>:
   12708:	2900      	cmp	r1, #0
   1270a:	d006      	beq.n	1271a <_Bfree+0x12>
   1270c:	684b      	ldr	r3, [r1, #4]
   1270e:	009a      	lsls	r2, r3, #2
   12710:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   12712:	189b      	adds	r3, r3, r2
   12714:	681a      	ldr	r2, [r3, #0]
   12716:	600a      	str	r2, [r1, #0]
   12718:	6019      	str	r1, [r3, #0]
   1271a:	4770      	bx	lr

0001271c <__multadd>:
   1271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1271e:	46ce      	mov	lr, r9
   12720:	4647      	mov	r7, r8
   12722:	4681      	mov	r9, r0
   12724:	0008      	movs	r0, r1
   12726:	b580      	push	{r7, lr}
   12728:	000d      	movs	r5, r1
   1272a:	690c      	ldr	r4, [r1, #16]
   1272c:	001f      	movs	r7, r3
   1272e:	2100      	movs	r1, #0
   12730:	3014      	adds	r0, #20
   12732:	6803      	ldr	r3, [r0, #0]
   12734:	3101      	adds	r1, #1
   12736:	041e      	lsls	r6, r3, #16
   12738:	0c36      	lsrs	r6, r6, #16
   1273a:	4356      	muls	r6, r2
   1273c:	0c1b      	lsrs	r3, r3, #16
   1273e:	4353      	muls	r3, r2
   12740:	19f6      	adds	r6, r6, r7
   12742:	0c37      	lsrs	r7, r6, #16
   12744:	19db      	adds	r3, r3, r7
   12746:	0436      	lsls	r6, r6, #16
   12748:	0c1f      	lsrs	r7, r3, #16
   1274a:	0c36      	lsrs	r6, r6, #16
   1274c:	041b      	lsls	r3, r3, #16
   1274e:	199b      	adds	r3, r3, r6
   12750:	c008      	stmia	r0!, {r3}
   12752:	428c      	cmp	r4, r1
   12754:	dced      	bgt.n	12732 <__multadd+0x16>
   12756:	2f00      	cmp	r7, #0
   12758:	d008      	beq.n	1276c <__multadd+0x50>
   1275a:	68ab      	ldr	r3, [r5, #8]
   1275c:	429c      	cmp	r4, r3
   1275e:	da0a      	bge.n	12776 <__multadd+0x5a>
   12760:	1d23      	adds	r3, r4, #4
   12762:	009b      	lsls	r3, r3, #2
   12764:	18eb      	adds	r3, r5, r3
   12766:	3401      	adds	r4, #1
   12768:	605f      	str	r7, [r3, #4]
   1276a:	612c      	str	r4, [r5, #16]
   1276c:	0028      	movs	r0, r5
   1276e:	bc0c      	pop	{r2, r3}
   12770:	4690      	mov	r8, r2
   12772:	4699      	mov	r9, r3
   12774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12776:	686b      	ldr	r3, [r5, #4]
   12778:	4648      	mov	r0, r9
   1277a:	1c59      	adds	r1, r3, #1
   1277c:	f7ff ff9c 	bl	126b8 <_Balloc>
   12780:	0029      	movs	r1, r5
   12782:	692b      	ldr	r3, [r5, #16]
   12784:	4680      	mov	r8, r0
   12786:	1c9a      	adds	r2, r3, #2
   12788:	0092      	lsls	r2, r2, #2
   1278a:	310c      	adds	r1, #12
   1278c:	300c      	adds	r0, #12
   1278e:	f7ff fefd 	bl	1258c <memcpy>
   12792:	686b      	ldr	r3, [r5, #4]
   12794:	009a      	lsls	r2, r3, #2
   12796:	464b      	mov	r3, r9
   12798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1279a:	189b      	adds	r3, r3, r2
   1279c:	681a      	ldr	r2, [r3, #0]
   1279e:	602a      	str	r2, [r5, #0]
   127a0:	601d      	str	r5, [r3, #0]
   127a2:	4645      	mov	r5, r8
   127a4:	e7dc      	b.n	12760 <__multadd+0x44>
   127a6:	46c0      	nop			; (mov r8, r8)

000127a8 <__hi0bits>:
   127a8:	0003      	movs	r3, r0
   127aa:	0c02      	lsrs	r2, r0, #16
   127ac:	2000      	movs	r0, #0
   127ae:	2a00      	cmp	r2, #0
   127b0:	d101      	bne.n	127b6 <__hi0bits+0xe>
   127b2:	041b      	lsls	r3, r3, #16
   127b4:	3010      	adds	r0, #16
   127b6:	0e1a      	lsrs	r2, r3, #24
   127b8:	d101      	bne.n	127be <__hi0bits+0x16>
   127ba:	3008      	adds	r0, #8
   127bc:	021b      	lsls	r3, r3, #8
   127be:	0f1a      	lsrs	r2, r3, #28
   127c0:	d101      	bne.n	127c6 <__hi0bits+0x1e>
   127c2:	3004      	adds	r0, #4
   127c4:	011b      	lsls	r3, r3, #4
   127c6:	0f9a      	lsrs	r2, r3, #30
   127c8:	d101      	bne.n	127ce <__hi0bits+0x26>
   127ca:	3002      	adds	r0, #2
   127cc:	009b      	lsls	r3, r3, #2
   127ce:	2b00      	cmp	r3, #0
   127d0:	db03      	blt.n	127da <__hi0bits+0x32>
   127d2:	3001      	adds	r0, #1
   127d4:	005b      	lsls	r3, r3, #1
   127d6:	d400      	bmi.n	127da <__hi0bits+0x32>
   127d8:	2020      	movs	r0, #32
   127da:	4770      	bx	lr

000127dc <__lo0bits>:
   127dc:	6803      	ldr	r3, [r0, #0]
   127de:	075a      	lsls	r2, r3, #29
   127e0:	d009      	beq.n	127f6 <__lo0bits+0x1a>
   127e2:	2200      	movs	r2, #0
   127e4:	07d9      	lsls	r1, r3, #31
   127e6:	d404      	bmi.n	127f2 <__lo0bits+0x16>
   127e8:	079a      	lsls	r2, r3, #30
   127ea:	d420      	bmi.n	1282e <__lo0bits+0x52>
   127ec:	2202      	movs	r2, #2
   127ee:	089b      	lsrs	r3, r3, #2
   127f0:	6003      	str	r3, [r0, #0]
   127f2:	0010      	movs	r0, r2
   127f4:	4770      	bx	lr
   127f6:	0419      	lsls	r1, r3, #16
   127f8:	2200      	movs	r2, #0
   127fa:	2900      	cmp	r1, #0
   127fc:	d101      	bne.n	12802 <__lo0bits+0x26>
   127fe:	0c1b      	lsrs	r3, r3, #16
   12800:	3210      	adds	r2, #16
   12802:	21ff      	movs	r1, #255	; 0xff
   12804:	4219      	tst	r1, r3
   12806:	d101      	bne.n	1280c <__lo0bits+0x30>
   12808:	3208      	adds	r2, #8
   1280a:	0a1b      	lsrs	r3, r3, #8
   1280c:	0719      	lsls	r1, r3, #28
   1280e:	d101      	bne.n	12814 <__lo0bits+0x38>
   12810:	3204      	adds	r2, #4
   12812:	091b      	lsrs	r3, r3, #4
   12814:	0799      	lsls	r1, r3, #30
   12816:	d101      	bne.n	1281c <__lo0bits+0x40>
   12818:	3202      	adds	r2, #2
   1281a:	089b      	lsrs	r3, r3, #2
   1281c:	07d9      	lsls	r1, r3, #31
   1281e:	d404      	bmi.n	1282a <__lo0bits+0x4e>
   12820:	085b      	lsrs	r3, r3, #1
   12822:	d101      	bne.n	12828 <__lo0bits+0x4c>
   12824:	2220      	movs	r2, #32
   12826:	e7e4      	b.n	127f2 <__lo0bits+0x16>
   12828:	3201      	adds	r2, #1
   1282a:	6003      	str	r3, [r0, #0]
   1282c:	e7e1      	b.n	127f2 <__lo0bits+0x16>
   1282e:	085b      	lsrs	r3, r3, #1
   12830:	6003      	str	r3, [r0, #0]
   12832:	2201      	movs	r2, #1
   12834:	e7dd      	b.n	127f2 <__lo0bits+0x16>
   12836:	46c0      	nop			; (mov r8, r8)

00012838 <__i2b>:
   12838:	b510      	push	{r4, lr}
   1283a:	000c      	movs	r4, r1
   1283c:	2101      	movs	r1, #1
   1283e:	f7ff ff3b 	bl	126b8 <_Balloc>
   12842:	2301      	movs	r3, #1
   12844:	6144      	str	r4, [r0, #20]
   12846:	6103      	str	r3, [r0, #16]
   12848:	bd10      	pop	{r4, pc}
   1284a:	46c0      	nop			; (mov r8, r8)

0001284c <__multiply>:
   1284c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1284e:	4657      	mov	r7, sl
   12850:	464e      	mov	r6, r9
   12852:	4645      	mov	r5, r8
   12854:	46de      	mov	lr, fp
   12856:	b5e0      	push	{r5, r6, r7, lr}
   12858:	6914      	ldr	r4, [r2, #16]
   1285a:	690e      	ldr	r6, [r1, #16]
   1285c:	b085      	sub	sp, #20
   1285e:	000f      	movs	r7, r1
   12860:	0015      	movs	r5, r2
   12862:	42a6      	cmp	r6, r4
   12864:	da04      	bge.n	12870 <__multiply+0x24>
   12866:	0033      	movs	r3, r6
   12868:	0017      	movs	r7, r2
   1286a:	0026      	movs	r6, r4
   1286c:	000d      	movs	r5, r1
   1286e:	001c      	movs	r4, r3
   12870:	1933      	adds	r3, r6, r4
   12872:	4698      	mov	r8, r3
   12874:	68bb      	ldr	r3, [r7, #8]
   12876:	6879      	ldr	r1, [r7, #4]
   12878:	4598      	cmp	r8, r3
   1287a:	dd00      	ble.n	1287e <__multiply+0x32>
   1287c:	3101      	adds	r1, #1
   1287e:	f7ff ff1b 	bl	126b8 <_Balloc>
   12882:	2214      	movs	r2, #20
   12884:	0003      	movs	r3, r0
   12886:	4694      	mov	ip, r2
   12888:	4463      	add	r3, ip
   1288a:	469b      	mov	fp, r3
   1288c:	4643      	mov	r3, r8
   1288e:	009b      	lsls	r3, r3, #2
   12890:	445b      	add	r3, fp
   12892:	0019      	movs	r1, r3
   12894:	9302      	str	r3, [sp, #8]
   12896:	9003      	str	r0, [sp, #12]
   12898:	465b      	mov	r3, fp
   1289a:	2200      	movs	r2, #0
   1289c:	458b      	cmp	fp, r1
   1289e:	d203      	bcs.n	128a8 <__multiply+0x5c>
   128a0:	9902      	ldr	r1, [sp, #8]
   128a2:	c304      	stmia	r3!, {r2}
   128a4:	4299      	cmp	r1, r3
   128a6:	d8fc      	bhi.n	128a2 <__multiply+0x56>
   128a8:	2314      	movs	r3, #20
   128aa:	00a4      	lsls	r4, r4, #2
   128ac:	469a      	mov	sl, r3
   128ae:	3714      	adds	r7, #20
   128b0:	0023      	movs	r3, r4
   128b2:	46bc      	mov	ip, r7
   128b4:	44aa      	add	sl, r5
   128b6:	00b6      	lsls	r6, r6, #2
   128b8:	4453      	add	r3, sl
   128ba:	9700      	str	r7, [sp, #0]
   128bc:	44b4      	add	ip, r6
   128be:	9301      	str	r3, [sp, #4]
   128c0:	459a      	cmp	sl, r3
   128c2:	d24f      	bcs.n	12964 <__multiply+0x118>
   128c4:	4653      	mov	r3, sl
   128c6:	681b      	ldr	r3, [r3, #0]
   128c8:	041e      	lsls	r6, r3, #16
   128ca:	0c36      	lsrs	r6, r6, #16
   128cc:	d020      	beq.n	12910 <__multiply+0xc4>
   128ce:	465c      	mov	r4, fp
   128d0:	2700      	movs	r7, #0
   128d2:	9d00      	ldr	r5, [sp, #0]
   128d4:	0021      	movs	r1, r4
   128d6:	cc08      	ldmia	r4!, {r3}
   128d8:	cd04      	ldmia	r5!, {r2}
   128da:	4699      	mov	r9, r3
   128dc:	4648      	mov	r0, r9
   128de:	0413      	lsls	r3, r2, #16
   128e0:	0c1b      	lsrs	r3, r3, #16
   128e2:	4373      	muls	r3, r6
   128e4:	0400      	lsls	r0, r0, #16
   128e6:	0c00      	lsrs	r0, r0, #16
   128e8:	181b      	adds	r3, r3, r0
   128ea:	19d8      	adds	r0, r3, r7
   128ec:	0c13      	lsrs	r3, r2, #16
   128ee:	464a      	mov	r2, r9
   128f0:	4373      	muls	r3, r6
   128f2:	0c12      	lsrs	r2, r2, #16
   128f4:	189b      	adds	r3, r3, r2
   128f6:	0c02      	lsrs	r2, r0, #16
   128f8:	189b      	adds	r3, r3, r2
   128fa:	0402      	lsls	r2, r0, #16
   128fc:	0c1f      	lsrs	r7, r3, #16
   128fe:	0c12      	lsrs	r2, r2, #16
   12900:	041b      	lsls	r3, r3, #16
   12902:	4313      	orrs	r3, r2
   12904:	600b      	str	r3, [r1, #0]
   12906:	45ac      	cmp	ip, r5
   12908:	d8e4      	bhi.n	128d4 <__multiply+0x88>
   1290a:	4653      	mov	r3, sl
   1290c:	6027      	str	r7, [r4, #0]
   1290e:	681b      	ldr	r3, [r3, #0]
   12910:	0c1e      	lsrs	r6, r3, #16
   12912:	d020      	beq.n	12956 <__multiply+0x10a>
   12914:	465b      	mov	r3, fp
   12916:	2100      	movs	r1, #0
   12918:	681b      	ldr	r3, [r3, #0]
   1291a:	465c      	mov	r4, fp
   1291c:	0018      	movs	r0, r3
   1291e:	000f      	movs	r7, r1
   12920:	4662      	mov	r2, ip
   12922:	9d00      	ldr	r5, [sp, #0]
   12924:	8829      	ldrh	r1, [r5, #0]
   12926:	0c00      	lsrs	r0, r0, #16
   12928:	4371      	muls	r1, r6
   1292a:	1809      	adds	r1, r1, r0
   1292c:	19c9      	adds	r1, r1, r7
   1292e:	041b      	lsls	r3, r3, #16
   12930:	0408      	lsls	r0, r1, #16
   12932:	0c1b      	lsrs	r3, r3, #16
   12934:	4303      	orrs	r3, r0
   12936:	6023      	str	r3, [r4, #0]
   12938:	cd08      	ldmia	r5!, {r3}
   1293a:	6860      	ldr	r0, [r4, #4]
   1293c:	0c1b      	lsrs	r3, r3, #16
   1293e:	4373      	muls	r3, r6
   12940:	0407      	lsls	r7, r0, #16
   12942:	0c3f      	lsrs	r7, r7, #16
   12944:	19db      	adds	r3, r3, r7
   12946:	0c09      	lsrs	r1, r1, #16
   12948:	185b      	adds	r3, r3, r1
   1294a:	0c1f      	lsrs	r7, r3, #16
   1294c:	3404      	adds	r4, #4
   1294e:	42aa      	cmp	r2, r5
   12950:	d8e8      	bhi.n	12924 <__multiply+0xd8>
   12952:	4694      	mov	ip, r2
   12954:	6023      	str	r3, [r4, #0]
   12956:	2304      	movs	r3, #4
   12958:	4699      	mov	r9, r3
   1295a:	9b01      	ldr	r3, [sp, #4]
   1295c:	44ca      	add	sl, r9
   1295e:	44cb      	add	fp, r9
   12960:	4553      	cmp	r3, sl
   12962:	d8af      	bhi.n	128c4 <__multiply+0x78>
   12964:	4643      	mov	r3, r8
   12966:	2b00      	cmp	r3, #0
   12968:	dd0e      	ble.n	12988 <__multiply+0x13c>
   1296a:	9b02      	ldr	r3, [sp, #8]
   1296c:	3b04      	subs	r3, #4
   1296e:	681a      	ldr	r2, [r3, #0]
   12970:	2a00      	cmp	r2, #0
   12972:	d109      	bne.n	12988 <__multiply+0x13c>
   12974:	4642      	mov	r2, r8
   12976:	e003      	b.n	12980 <__multiply+0x134>
   12978:	3b04      	subs	r3, #4
   1297a:	6819      	ldr	r1, [r3, #0]
   1297c:	2900      	cmp	r1, #0
   1297e:	d102      	bne.n	12986 <__multiply+0x13a>
   12980:	3a01      	subs	r2, #1
   12982:	2a00      	cmp	r2, #0
   12984:	d1f8      	bne.n	12978 <__multiply+0x12c>
   12986:	4690      	mov	r8, r2
   12988:	9b03      	ldr	r3, [sp, #12]
   1298a:	4642      	mov	r2, r8
   1298c:	0018      	movs	r0, r3
   1298e:	611a      	str	r2, [r3, #16]
   12990:	b005      	add	sp, #20
   12992:	bc3c      	pop	{r2, r3, r4, r5}
   12994:	4690      	mov	r8, r2
   12996:	4699      	mov	r9, r3
   12998:	46a2      	mov	sl, r4
   1299a:	46ab      	mov	fp, r5
   1299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1299e:	46c0      	nop			; (mov r8, r8)

000129a0 <__pow5mult>:
   129a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129a2:	4647      	mov	r7, r8
   129a4:	46ce      	mov	lr, r9
   129a6:	2303      	movs	r3, #3
   129a8:	b580      	push	{r7, lr}
   129aa:	4680      	mov	r8, r0
   129ac:	000f      	movs	r7, r1
   129ae:	0014      	movs	r4, r2
   129b0:	4013      	ands	r3, r2
   129b2:	d13a      	bne.n	12a2a <__pow5mult+0x8a>
   129b4:	10a4      	asrs	r4, r4, #2
   129b6:	003e      	movs	r6, r7
   129b8:	2c00      	cmp	r4, #0
   129ba:	d025      	beq.n	12a08 <__pow5mult+0x68>
   129bc:	4643      	mov	r3, r8
   129be:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   129c0:	2d00      	cmp	r5, #0
   129c2:	d03b      	beq.n	12a3c <__pow5mult+0x9c>
   129c4:	003e      	movs	r6, r7
   129c6:	2300      	movs	r3, #0
   129c8:	2701      	movs	r7, #1
   129ca:	4699      	mov	r9, r3
   129cc:	4227      	tst	r7, r4
   129ce:	d107      	bne.n	129e0 <__pow5mult+0x40>
   129d0:	1064      	asrs	r4, r4, #1
   129d2:	d019      	beq.n	12a08 <__pow5mult+0x68>
   129d4:	6828      	ldr	r0, [r5, #0]
   129d6:	2800      	cmp	r0, #0
   129d8:	d01b      	beq.n	12a12 <__pow5mult+0x72>
   129da:	0005      	movs	r5, r0
   129dc:	4227      	tst	r7, r4
   129de:	d0f7      	beq.n	129d0 <__pow5mult+0x30>
   129e0:	002a      	movs	r2, r5
   129e2:	0031      	movs	r1, r6
   129e4:	4640      	mov	r0, r8
   129e6:	f7ff ff31 	bl	1284c <__multiply>
   129ea:	2e00      	cmp	r6, #0
   129ec:	d01b      	beq.n	12a26 <__pow5mult+0x86>
   129ee:	4642      	mov	r2, r8
   129f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   129f2:	6873      	ldr	r3, [r6, #4]
   129f4:	4694      	mov	ip, r2
   129f6:	009b      	lsls	r3, r3, #2
   129f8:	4463      	add	r3, ip
   129fa:	681a      	ldr	r2, [r3, #0]
   129fc:	1064      	asrs	r4, r4, #1
   129fe:	6032      	str	r2, [r6, #0]
   12a00:	601e      	str	r6, [r3, #0]
   12a02:	0006      	movs	r6, r0
   12a04:	2c00      	cmp	r4, #0
   12a06:	d1e5      	bne.n	129d4 <__pow5mult+0x34>
   12a08:	0030      	movs	r0, r6
   12a0a:	bc0c      	pop	{r2, r3}
   12a0c:	4690      	mov	r8, r2
   12a0e:	4699      	mov	r9, r3
   12a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a12:	002a      	movs	r2, r5
   12a14:	0029      	movs	r1, r5
   12a16:	4640      	mov	r0, r8
   12a18:	f7ff ff18 	bl	1284c <__multiply>
   12a1c:	464b      	mov	r3, r9
   12a1e:	6028      	str	r0, [r5, #0]
   12a20:	6003      	str	r3, [r0, #0]
   12a22:	0005      	movs	r5, r0
   12a24:	e7da      	b.n	129dc <__pow5mult+0x3c>
   12a26:	0006      	movs	r6, r0
   12a28:	e7d2      	b.n	129d0 <__pow5mult+0x30>
   12a2a:	4a0b      	ldr	r2, [pc, #44]	; (12a58 <__pow5mult+0xb8>)
   12a2c:	3b01      	subs	r3, #1
   12a2e:	009b      	lsls	r3, r3, #2
   12a30:	589a      	ldr	r2, [r3, r2]
   12a32:	2300      	movs	r3, #0
   12a34:	f7ff fe72 	bl	1271c <__multadd>
   12a38:	0007      	movs	r7, r0
   12a3a:	e7bb      	b.n	129b4 <__pow5mult+0x14>
   12a3c:	2101      	movs	r1, #1
   12a3e:	4640      	mov	r0, r8
   12a40:	f7ff fe3a 	bl	126b8 <_Balloc>
   12a44:	4b05      	ldr	r3, [pc, #20]	; (12a5c <__pow5mult+0xbc>)
   12a46:	0005      	movs	r5, r0
   12a48:	6143      	str	r3, [r0, #20]
   12a4a:	2301      	movs	r3, #1
   12a4c:	6103      	str	r3, [r0, #16]
   12a4e:	4643      	mov	r3, r8
   12a50:	6498      	str	r0, [r3, #72]	; 0x48
   12a52:	2300      	movs	r3, #0
   12a54:	6003      	str	r3, [r0, #0]
   12a56:	e7b5      	b.n	129c4 <__pow5mult+0x24>
   12a58:	00014cd8 	.word	0x00014cd8
   12a5c:	00000271 	.word	0x00000271

00012a60 <__lshift>:
   12a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a62:	464e      	mov	r6, r9
   12a64:	4645      	mov	r5, r8
   12a66:	46de      	mov	lr, fp
   12a68:	4657      	mov	r7, sl
   12a6a:	b5e0      	push	{r5, r6, r7, lr}
   12a6c:	000e      	movs	r6, r1
   12a6e:	6933      	ldr	r3, [r6, #16]
   12a70:	1154      	asrs	r4, r2, #5
   12a72:	4698      	mov	r8, r3
   12a74:	44a0      	add	r8, r4
   12a76:	4643      	mov	r3, r8
   12a78:	1c5d      	adds	r5, r3, #1
   12a7a:	68b3      	ldr	r3, [r6, #8]
   12a7c:	4683      	mov	fp, r0
   12a7e:	4691      	mov	r9, r2
   12a80:	6849      	ldr	r1, [r1, #4]
   12a82:	429d      	cmp	r5, r3
   12a84:	dd03      	ble.n	12a8e <__lshift+0x2e>
   12a86:	3101      	adds	r1, #1
   12a88:	005b      	lsls	r3, r3, #1
   12a8a:	429d      	cmp	r5, r3
   12a8c:	dcfb      	bgt.n	12a86 <__lshift+0x26>
   12a8e:	4658      	mov	r0, fp
   12a90:	f7ff fe12 	bl	126b8 <_Balloc>
   12a94:	0003      	movs	r3, r0
   12a96:	4684      	mov	ip, r0
   12a98:	3314      	adds	r3, #20
   12a9a:	2c00      	cmp	r4, #0
   12a9c:	dd06      	ble.n	12aac <__lshift+0x4c>
   12a9e:	2100      	movs	r1, #0
   12aa0:	00a4      	lsls	r4, r4, #2
   12aa2:	001a      	movs	r2, r3
   12aa4:	191b      	adds	r3, r3, r4
   12aa6:	c202      	stmia	r2!, {r1}
   12aa8:	4293      	cmp	r3, r2
   12aaa:	d1fc      	bne.n	12aa6 <__lshift+0x46>
   12aac:	6932      	ldr	r2, [r6, #16]
   12aae:	4648      	mov	r0, r9
   12ab0:	0097      	lsls	r7, r2, #2
   12ab2:	0031      	movs	r1, r6
   12ab4:	221f      	movs	r2, #31
   12ab6:	3114      	adds	r1, #20
   12ab8:	4010      	ands	r0, r2
   12aba:	19cf      	adds	r7, r1, r7
   12abc:	4681      	mov	r9, r0
   12abe:	2800      	cmp	r0, #0
   12ac0:	d025      	beq.n	12b0e <__lshift+0xae>
   12ac2:	2220      	movs	r2, #32
   12ac4:	1a12      	subs	r2, r2, r0
   12ac6:	4692      	mov	sl, r2
   12ac8:	2200      	movs	r2, #0
   12aca:	4648      	mov	r0, r9
   12acc:	680c      	ldr	r4, [r1, #0]
   12ace:	4084      	lsls	r4, r0
   12ad0:	4650      	mov	r0, sl
   12ad2:	4314      	orrs	r4, r2
   12ad4:	601c      	str	r4, [r3, #0]
   12ad6:	c904      	ldmia	r1!, {r2}
   12ad8:	3304      	adds	r3, #4
   12ada:	40c2      	lsrs	r2, r0
   12adc:	428f      	cmp	r7, r1
   12ade:	d8f4      	bhi.n	12aca <__lshift+0x6a>
   12ae0:	601a      	str	r2, [r3, #0]
   12ae2:	2a00      	cmp	r2, #0
   12ae4:	d001      	beq.n	12aea <__lshift+0x8a>
   12ae6:	4645      	mov	r5, r8
   12ae8:	3502      	adds	r5, #2
   12aea:	4663      	mov	r3, ip
   12aec:	3d01      	subs	r5, #1
   12aee:	611d      	str	r5, [r3, #16]
   12af0:	6873      	ldr	r3, [r6, #4]
   12af2:	4660      	mov	r0, ip
   12af4:	009a      	lsls	r2, r3, #2
   12af6:	465b      	mov	r3, fp
   12af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12afa:	189b      	adds	r3, r3, r2
   12afc:	681a      	ldr	r2, [r3, #0]
   12afe:	6032      	str	r2, [r6, #0]
   12b00:	601e      	str	r6, [r3, #0]
   12b02:	bc3c      	pop	{r2, r3, r4, r5}
   12b04:	4690      	mov	r8, r2
   12b06:	4699      	mov	r9, r3
   12b08:	46a2      	mov	sl, r4
   12b0a:	46ab      	mov	fp, r5
   12b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b0e:	c904      	ldmia	r1!, {r2}
   12b10:	c304      	stmia	r3!, {r2}
   12b12:	428f      	cmp	r7, r1
   12b14:	d9e9      	bls.n	12aea <__lshift+0x8a>
   12b16:	c904      	ldmia	r1!, {r2}
   12b18:	c304      	stmia	r3!, {r2}
   12b1a:	428f      	cmp	r7, r1
   12b1c:	d8f7      	bhi.n	12b0e <__lshift+0xae>
   12b1e:	e7e4      	b.n	12aea <__lshift+0x8a>

00012b20 <__mcmp>:
   12b20:	690a      	ldr	r2, [r1, #16]
   12b22:	6903      	ldr	r3, [r0, #16]
   12b24:	b530      	push	{r4, r5, lr}
   12b26:	0005      	movs	r5, r0
   12b28:	1a98      	subs	r0, r3, r2
   12b2a:	d111      	bne.n	12b50 <__mcmp+0x30>
   12b2c:	0092      	lsls	r2, r2, #2
   12b2e:	3514      	adds	r5, #20
   12b30:	3114      	adds	r1, #20
   12b32:	18ab      	adds	r3, r5, r2
   12b34:	1889      	adds	r1, r1, r2
   12b36:	e001      	b.n	12b3c <__mcmp+0x1c>
   12b38:	429d      	cmp	r5, r3
   12b3a:	d209      	bcs.n	12b50 <__mcmp+0x30>
   12b3c:	3b04      	subs	r3, #4
   12b3e:	3904      	subs	r1, #4
   12b40:	681c      	ldr	r4, [r3, #0]
   12b42:	680a      	ldr	r2, [r1, #0]
   12b44:	4294      	cmp	r4, r2
   12b46:	d0f7      	beq.n	12b38 <__mcmp+0x18>
   12b48:	4294      	cmp	r4, r2
   12b4a:	4180      	sbcs	r0, r0
   12b4c:	2201      	movs	r2, #1
   12b4e:	4310      	orrs	r0, r2
   12b50:	bd30      	pop	{r4, r5, pc}
   12b52:	46c0      	nop			; (mov r8, r8)

00012b54 <__mdiff>:
   12b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b56:	4645      	mov	r5, r8
   12b58:	46de      	mov	lr, fp
   12b5a:	4657      	mov	r7, sl
   12b5c:	464e      	mov	r6, r9
   12b5e:	0014      	movs	r4, r2
   12b60:	690b      	ldr	r3, [r1, #16]
   12b62:	6912      	ldr	r2, [r2, #16]
   12b64:	b5e0      	push	{r5, r6, r7, lr}
   12b66:	4688      	mov	r8, r1
   12b68:	1a9d      	subs	r5, r3, r2
   12b6a:	d11a      	bne.n	12ba2 <__mdiff+0x4e>
   12b6c:	000f      	movs	r7, r1
   12b6e:	2114      	movs	r1, #20
   12b70:	468c      	mov	ip, r1
   12b72:	0092      	lsls	r2, r2, #2
   12b74:	3714      	adds	r7, #20
   12b76:	44a4      	add	ip, r4
   12b78:	18bb      	adds	r3, r7, r2
   12b7a:	4462      	add	r2, ip
   12b7c:	e002      	b.n	12b84 <__mdiff+0x30>
   12b7e:	429f      	cmp	r7, r3
   12b80:	d300      	bcc.n	12b84 <__mdiff+0x30>
   12b82:	e070      	b.n	12c66 <__mdiff+0x112>
   12b84:	3b04      	subs	r3, #4
   12b86:	3a04      	subs	r2, #4
   12b88:	681e      	ldr	r6, [r3, #0]
   12b8a:	6811      	ldr	r1, [r2, #0]
   12b8c:	428e      	cmp	r6, r1
   12b8e:	d0f6      	beq.n	12b7e <__mdiff+0x2a>
   12b90:	d300      	bcc.n	12b94 <__mdiff+0x40>
   12b92:	e071      	b.n	12c78 <__mdiff+0x124>
   12b94:	4643      	mov	r3, r8
   12b96:	003e      	movs	r6, r7
   12b98:	46a0      	mov	r8, r4
   12b9a:	4667      	mov	r7, ip
   12b9c:	001c      	movs	r4, r3
   12b9e:	2501      	movs	r5, #1
   12ba0:	e006      	b.n	12bb0 <__mdiff+0x5c>
   12ba2:	2d00      	cmp	r5, #0
   12ba4:	db6a      	blt.n	12c7c <__mdiff+0x128>
   12ba6:	4647      	mov	r7, r8
   12ba8:	0026      	movs	r6, r4
   12baa:	2500      	movs	r5, #0
   12bac:	3714      	adds	r7, #20
   12bae:	3614      	adds	r6, #20
   12bb0:	4643      	mov	r3, r8
   12bb2:	6859      	ldr	r1, [r3, #4]
   12bb4:	f7ff fd80 	bl	126b8 <_Balloc>
   12bb8:	4643      	mov	r3, r8
   12bba:	4681      	mov	r9, r0
   12bbc:	60c5      	str	r5, [r0, #12]
   12bbe:	6918      	ldr	r0, [r3, #16]
   12bc0:	464d      	mov	r5, r9
   12bc2:	0083      	lsls	r3, r0, #2
   12bc4:	469c      	mov	ip, r3
   12bc6:	6923      	ldr	r3, [r4, #16]
   12bc8:	44bc      	add	ip, r7
   12bca:	009b      	lsls	r3, r3, #2
   12bcc:	4698      	mov	r8, r3
   12bce:	2300      	movs	r3, #0
   12bd0:	44b0      	add	r8, r6
   12bd2:	3514      	adds	r5, #20
   12bd4:	469a      	mov	sl, r3
   12bd6:	e000      	b.n	12bda <__mdiff+0x86>
   12bd8:	0027      	movs	r7, r4
   12bda:	ce04      	ldmia	r6!, {r2}
   12bdc:	003c      	movs	r4, r7
   12bde:	4693      	mov	fp, r2
   12be0:	4659      	mov	r1, fp
   12be2:	cc08      	ldmia	r4!, {r3}
   12be4:	0409      	lsls	r1, r1, #16
   12be6:	041a      	lsls	r2, r3, #16
   12be8:	0c12      	lsrs	r2, r2, #16
   12bea:	4452      	add	r2, sl
   12bec:	0c09      	lsrs	r1, r1, #16
   12bee:	1a52      	subs	r2, r2, r1
   12bf0:	0c19      	lsrs	r1, r3, #16
   12bf2:	465b      	mov	r3, fp
   12bf4:	0c1b      	lsrs	r3, r3, #16
   12bf6:	1acb      	subs	r3, r1, r3
   12bf8:	1411      	asrs	r1, r2, #16
   12bfa:	185b      	adds	r3, r3, r1
   12bfc:	0412      	lsls	r2, r2, #16
   12bfe:	1419      	asrs	r1, r3, #16
   12c00:	0c12      	lsrs	r2, r2, #16
   12c02:	041b      	lsls	r3, r3, #16
   12c04:	468a      	mov	sl, r1
   12c06:	4313      	orrs	r3, r2
   12c08:	1d29      	adds	r1, r5, #4
   12c0a:	602b      	str	r3, [r5, #0]
   12c0c:	000d      	movs	r5, r1
   12c0e:	45b0      	cmp	r8, r6
   12c10:	d8e2      	bhi.n	12bd8 <__mdiff+0x84>
   12c12:	45a4      	cmp	ip, r4
   12c14:	d916      	bls.n	12c44 <__mdiff+0xf0>
   12c16:	cc08      	ldmia	r4!, {r3}
   12c18:	041a      	lsls	r2, r3, #16
   12c1a:	0c12      	lsrs	r2, r2, #16
   12c1c:	4452      	add	r2, sl
   12c1e:	1416      	asrs	r6, r2, #16
   12c20:	0c1b      	lsrs	r3, r3, #16
   12c22:	199b      	adds	r3, r3, r6
   12c24:	0412      	lsls	r2, r2, #16
   12c26:	141e      	asrs	r6, r3, #16
   12c28:	0c12      	lsrs	r2, r2, #16
   12c2a:	041b      	lsls	r3, r3, #16
   12c2c:	4313      	orrs	r3, r2
   12c2e:	46b2      	mov	sl, r6
   12c30:	c508      	stmia	r5!, {r3}
   12c32:	45a4      	cmp	ip, r4
   12c34:	d8ef      	bhi.n	12c16 <__mdiff+0xc2>
   12c36:	4662      	mov	r2, ip
   12c38:	2403      	movs	r4, #3
   12c3a:	1bd2      	subs	r2, r2, r7
   12c3c:	3a05      	subs	r2, #5
   12c3e:	43a2      	bics	r2, r4
   12c40:	3204      	adds	r2, #4
   12c42:	1889      	adds	r1, r1, r2
   12c44:	3904      	subs	r1, #4
   12c46:	2b00      	cmp	r3, #0
   12c48:	d104      	bne.n	12c54 <__mdiff+0x100>
   12c4a:	3904      	subs	r1, #4
   12c4c:	680b      	ldr	r3, [r1, #0]
   12c4e:	3801      	subs	r0, #1
   12c50:	2b00      	cmp	r3, #0
   12c52:	d0fa      	beq.n	12c4a <__mdiff+0xf6>
   12c54:	464b      	mov	r3, r9
   12c56:	6118      	str	r0, [r3, #16]
   12c58:	4648      	mov	r0, r9
   12c5a:	bc3c      	pop	{r2, r3, r4, r5}
   12c5c:	4690      	mov	r8, r2
   12c5e:	4699      	mov	r9, r3
   12c60:	46a2      	mov	sl, r4
   12c62:	46ab      	mov	fp, r5
   12c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c66:	2100      	movs	r1, #0
   12c68:	f7ff fd26 	bl	126b8 <_Balloc>
   12c6c:	2301      	movs	r3, #1
   12c6e:	6103      	str	r3, [r0, #16]
   12c70:	2300      	movs	r3, #0
   12c72:	4681      	mov	r9, r0
   12c74:	6143      	str	r3, [r0, #20]
   12c76:	e7ef      	b.n	12c58 <__mdiff+0x104>
   12c78:	4666      	mov	r6, ip
   12c7a:	e799      	b.n	12bb0 <__mdiff+0x5c>
   12c7c:	0027      	movs	r7, r4
   12c7e:	000e      	movs	r6, r1
   12c80:	46a0      	mov	r8, r4
   12c82:	3714      	adds	r7, #20
   12c84:	3614      	adds	r6, #20
   12c86:	000c      	movs	r4, r1
   12c88:	2501      	movs	r5, #1
   12c8a:	e791      	b.n	12bb0 <__mdiff+0x5c>

00012c8c <__d2b>:
   12c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c8e:	2101      	movs	r1, #1
   12c90:	001c      	movs	r4, r3
   12c92:	b083      	sub	sp, #12
   12c94:	9e08      	ldr	r6, [sp, #32]
   12c96:	0015      	movs	r5, r2
   12c98:	f7ff fd0e 	bl	126b8 <_Balloc>
   12c9c:	0323      	lsls	r3, r4, #12
   12c9e:	0064      	lsls	r4, r4, #1
   12ca0:	0007      	movs	r7, r0
   12ca2:	0b1b      	lsrs	r3, r3, #12
   12ca4:	0d64      	lsrs	r4, r4, #21
   12ca6:	d002      	beq.n	12cae <__d2b+0x22>
   12ca8:	2280      	movs	r2, #128	; 0x80
   12caa:	0352      	lsls	r2, r2, #13
   12cac:	4313      	orrs	r3, r2
   12cae:	9301      	str	r3, [sp, #4]
   12cb0:	2d00      	cmp	r5, #0
   12cb2:	d019      	beq.n	12ce8 <__d2b+0x5c>
   12cb4:	4668      	mov	r0, sp
   12cb6:	9500      	str	r5, [sp, #0]
   12cb8:	f7ff fd90 	bl	127dc <__lo0bits>
   12cbc:	2800      	cmp	r0, #0
   12cbe:	d130      	bne.n	12d22 <__d2b+0x96>
   12cc0:	9b00      	ldr	r3, [sp, #0]
   12cc2:	617b      	str	r3, [r7, #20]
   12cc4:	9b01      	ldr	r3, [sp, #4]
   12cc6:	61bb      	str	r3, [r7, #24]
   12cc8:	1e5a      	subs	r2, r3, #1
   12cca:	4193      	sbcs	r3, r2
   12ccc:	1c5d      	adds	r5, r3, #1
   12cce:	613d      	str	r5, [r7, #16]
   12cd0:	2c00      	cmp	r4, #0
   12cd2:	d014      	beq.n	12cfe <__d2b+0x72>
   12cd4:	4b19      	ldr	r3, [pc, #100]	; (12d3c <__d2b+0xb0>)
   12cd6:	469c      	mov	ip, r3
   12cd8:	2335      	movs	r3, #53	; 0x35
   12cda:	4464      	add	r4, ip
   12cdc:	1824      	adds	r4, r4, r0
   12cde:	1a18      	subs	r0, r3, r0
   12ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ce2:	6034      	str	r4, [r6, #0]
   12ce4:	6018      	str	r0, [r3, #0]
   12ce6:	e019      	b.n	12d1c <__d2b+0x90>
   12ce8:	a801      	add	r0, sp, #4
   12cea:	f7ff fd77 	bl	127dc <__lo0bits>
   12cee:	9b01      	ldr	r3, [sp, #4]
   12cf0:	3020      	adds	r0, #32
   12cf2:	617b      	str	r3, [r7, #20]
   12cf4:	2301      	movs	r3, #1
   12cf6:	2501      	movs	r5, #1
   12cf8:	613b      	str	r3, [r7, #16]
   12cfa:	2c00      	cmp	r4, #0
   12cfc:	d1ea      	bne.n	12cd4 <__d2b+0x48>
   12cfe:	4b10      	ldr	r3, [pc, #64]	; (12d40 <__d2b+0xb4>)
   12d00:	469c      	mov	ip, r3
   12d02:	4b10      	ldr	r3, [pc, #64]	; (12d44 <__d2b+0xb8>)
   12d04:	4460      	add	r0, ip
   12d06:	18eb      	adds	r3, r5, r3
   12d08:	009b      	lsls	r3, r3, #2
   12d0a:	18fb      	adds	r3, r7, r3
   12d0c:	6030      	str	r0, [r6, #0]
   12d0e:	6958      	ldr	r0, [r3, #20]
   12d10:	f7ff fd4a 	bl	127a8 <__hi0bits>
   12d14:	016b      	lsls	r3, r5, #5
   12d16:	1a18      	subs	r0, r3, r0
   12d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d1a:	6018      	str	r0, [r3, #0]
   12d1c:	0038      	movs	r0, r7
   12d1e:	b003      	add	sp, #12
   12d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d22:	9b01      	ldr	r3, [sp, #4]
   12d24:	2220      	movs	r2, #32
   12d26:	0019      	movs	r1, r3
   12d28:	1a12      	subs	r2, r2, r0
   12d2a:	4091      	lsls	r1, r2
   12d2c:	000a      	movs	r2, r1
   12d2e:	40c3      	lsrs	r3, r0
   12d30:	9900      	ldr	r1, [sp, #0]
   12d32:	9301      	str	r3, [sp, #4]
   12d34:	430a      	orrs	r2, r1
   12d36:	617a      	str	r2, [r7, #20]
   12d38:	e7c5      	b.n	12cc6 <__d2b+0x3a>
   12d3a:	46c0      	nop			; (mov r8, r8)
   12d3c:	fffffbcd 	.word	0xfffffbcd
   12d40:	fffffbce 	.word	0xfffffbce
   12d44:	3fffffff 	.word	0x3fffffff

00012d48 <_realloc_r>:
   12d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d4a:	464e      	mov	r6, r9
   12d4c:	4645      	mov	r5, r8
   12d4e:	46de      	mov	lr, fp
   12d50:	4657      	mov	r7, sl
   12d52:	b5e0      	push	{r5, r6, r7, lr}
   12d54:	b085      	sub	sp, #20
   12d56:	9001      	str	r0, [sp, #4]
   12d58:	000e      	movs	r6, r1
   12d5a:	0015      	movs	r5, r2
   12d5c:	2900      	cmp	r1, #0
   12d5e:	d100      	bne.n	12d62 <_realloc_r+0x1a>
   12d60:	e09e      	b.n	12ea0 <_realloc_r+0x158>
   12d62:	0037      	movs	r7, r6
   12d64:	9801      	ldr	r0, [sp, #4]
   12d66:	3f08      	subs	r7, #8
   12d68:	f7ff fca2 	bl	126b0 <__malloc_lock>
   12d6c:	687a      	ldr	r2, [r7, #4]
   12d6e:	2303      	movs	r3, #3
   12d70:	0014      	movs	r4, r2
   12d72:	439c      	bics	r4, r3
   12d74:	002b      	movs	r3, r5
   12d76:	330b      	adds	r3, #11
   12d78:	46b9      	mov	r9, r7
   12d7a:	2b16      	cmp	r3, #22
   12d7c:	d847      	bhi.n	12e0e <_realloc_r+0xc6>
   12d7e:	2110      	movs	r1, #16
   12d80:	2310      	movs	r3, #16
   12d82:	4688      	mov	r8, r1
   12d84:	4545      	cmp	r5, r8
   12d86:	d846      	bhi.n	12e16 <_realloc_r+0xce>
   12d88:	429c      	cmp	r4, r3
   12d8a:	da49      	bge.n	12e20 <_realloc_r+0xd8>
   12d8c:	49cc      	ldr	r1, [pc, #816]	; (130c0 <_realloc_r+0x378>)
   12d8e:	1938      	adds	r0, r7, r4
   12d90:	468b      	mov	fp, r1
   12d92:	6889      	ldr	r1, [r1, #8]
   12d94:	9002      	str	r0, [sp, #8]
   12d96:	4288      	cmp	r0, r1
   12d98:	d100      	bne.n	12d9c <_realloc_r+0x54>
   12d9a:	e0c2      	b.n	12f22 <_realloc_r+0x1da>
   12d9c:	2101      	movs	r1, #1
   12d9e:	468a      	mov	sl, r1
   12da0:	6840      	ldr	r0, [r0, #4]
   12da2:	0001      	movs	r1, r0
   12da4:	9003      	str	r0, [sp, #12]
   12da6:	4650      	mov	r0, sl
   12da8:	4381      	bics	r1, r0
   12daa:	468c      	mov	ip, r1
   12dac:	9902      	ldr	r1, [sp, #8]
   12dae:	468b      	mov	fp, r1
   12db0:	44dc      	add	ip, fp
   12db2:	4661      	mov	r1, ip
   12db4:	6849      	ldr	r1, [r1, #4]
   12db6:	4201      	tst	r1, r0
   12db8:	d04d      	beq.n	12e56 <_realloc_r+0x10e>
   12dba:	4210      	tst	r0, r2
   12dbc:	d100      	bne.n	12dc0 <_realloc_r+0x78>
   12dbe:	e0a2      	b.n	12f06 <_realloc_r+0x1be>
   12dc0:	0029      	movs	r1, r5
   12dc2:	9801      	ldr	r0, [sp, #4]
   12dc4:	f7ff f8d8 	bl	11f78 <_malloc_r>
   12dc8:	1e05      	subs	r5, r0, #0
   12dca:	d039      	beq.n	12e40 <_realloc_r+0xf8>
   12dcc:	2301      	movs	r3, #1
   12dce:	0002      	movs	r2, r0
   12dd0:	6879      	ldr	r1, [r7, #4]
   12dd2:	3a08      	subs	r2, #8
   12dd4:	4399      	bics	r1, r3
   12dd6:	187f      	adds	r7, r7, r1
   12dd8:	42ba      	cmp	r2, r7
   12dda:	d100      	bne.n	12dde <_realloc_r+0x96>
   12ddc:	e12e      	b.n	1303c <_realloc_r+0x2f4>
   12dde:	1f22      	subs	r2, r4, #4
   12de0:	2a24      	cmp	r2, #36	; 0x24
   12de2:	d900      	bls.n	12de6 <_realloc_r+0x9e>
   12de4:	e114      	b.n	13010 <_realloc_r+0x2c8>
   12de6:	2a13      	cmp	r2, #19
   12de8:	d900      	bls.n	12dec <_realloc_r+0xa4>
   12dea:	e0e8      	b.n	12fbe <_realloc_r+0x276>
   12dec:	0003      	movs	r3, r0
   12dee:	0032      	movs	r2, r6
   12df0:	6811      	ldr	r1, [r2, #0]
   12df2:	6019      	str	r1, [r3, #0]
   12df4:	6851      	ldr	r1, [r2, #4]
   12df6:	6059      	str	r1, [r3, #4]
   12df8:	6892      	ldr	r2, [r2, #8]
   12dfa:	609a      	str	r2, [r3, #8]
   12dfc:	9c01      	ldr	r4, [sp, #4]
   12dfe:	0031      	movs	r1, r6
   12e00:	0020      	movs	r0, r4
   12e02:	f7fe fda1 	bl	11948 <_free_r>
   12e06:	0020      	movs	r0, r4
   12e08:	f7ff fc54 	bl	126b4 <__malloc_unlock>
   12e0c:	e01b      	b.n	12e46 <_realloc_r+0xfe>
   12e0e:	2107      	movs	r1, #7
   12e10:	438b      	bics	r3, r1
   12e12:	4698      	mov	r8, r3
   12e14:	d5b6      	bpl.n	12d84 <_realloc_r+0x3c>
   12e16:	230c      	movs	r3, #12
   12e18:	9a01      	ldr	r2, [sp, #4]
   12e1a:	2500      	movs	r5, #0
   12e1c:	6013      	str	r3, [r2, #0]
   12e1e:	e012      	b.n	12e46 <_realloc_r+0xfe>
   12e20:	0035      	movs	r5, r6
   12e22:	4643      	mov	r3, r8
   12e24:	1ae3      	subs	r3, r4, r3
   12e26:	2b0f      	cmp	r3, #15
   12e28:	d825      	bhi.n	12e76 <_realloc_r+0x12e>
   12e2a:	464b      	mov	r3, r9
   12e2c:	2201      	movs	r2, #1
   12e2e:	4649      	mov	r1, r9
   12e30:	685b      	ldr	r3, [r3, #4]
   12e32:	4013      	ands	r3, r2
   12e34:	4323      	orrs	r3, r4
   12e36:	604b      	str	r3, [r1, #4]
   12e38:	444c      	add	r4, r9
   12e3a:	6863      	ldr	r3, [r4, #4]
   12e3c:	431a      	orrs	r2, r3
   12e3e:	6062      	str	r2, [r4, #4]
   12e40:	9801      	ldr	r0, [sp, #4]
   12e42:	f7ff fc37 	bl	126b4 <__malloc_unlock>
   12e46:	0028      	movs	r0, r5
   12e48:	b005      	add	sp, #20
   12e4a:	bc3c      	pop	{r2, r3, r4, r5}
   12e4c:	4690      	mov	r8, r2
   12e4e:	4699      	mov	r9, r3
   12e50:	46a2      	mov	sl, r4
   12e52:	46ab      	mov	fp, r5
   12e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e56:	2103      	movs	r1, #3
   12e58:	9803      	ldr	r0, [sp, #12]
   12e5a:	468c      	mov	ip, r1
   12e5c:	4388      	bics	r0, r1
   12e5e:	1821      	adds	r1, r4, r0
   12e60:	468b      	mov	fp, r1
   12e62:	4299      	cmp	r1, r3
   12e64:	db21      	blt.n	12eaa <_realloc_r+0x162>
   12e66:	9a02      	ldr	r2, [sp, #8]
   12e68:	0035      	movs	r5, r6
   12e6a:	68d3      	ldr	r3, [r2, #12]
   12e6c:	6892      	ldr	r2, [r2, #8]
   12e6e:	465c      	mov	r4, fp
   12e70:	60d3      	str	r3, [r2, #12]
   12e72:	609a      	str	r2, [r3, #8]
   12e74:	e7d5      	b.n	12e22 <_realloc_r+0xda>
   12e76:	464a      	mov	r2, r9
   12e78:	2001      	movs	r0, #1
   12e7a:	4646      	mov	r6, r8
   12e7c:	6852      	ldr	r2, [r2, #4]
   12e7e:	4649      	mov	r1, r9
   12e80:	4002      	ands	r2, r0
   12e82:	4332      	orrs	r2, r6
   12e84:	464e      	mov	r6, r9
   12e86:	4441      	add	r1, r8
   12e88:	4303      	orrs	r3, r0
   12e8a:	6072      	str	r2, [r6, #4]
   12e8c:	444c      	add	r4, r9
   12e8e:	604b      	str	r3, [r1, #4]
   12e90:	6863      	ldr	r3, [r4, #4]
   12e92:	3108      	adds	r1, #8
   12e94:	4318      	orrs	r0, r3
   12e96:	6060      	str	r0, [r4, #4]
   12e98:	9801      	ldr	r0, [sp, #4]
   12e9a:	f7fe fd55 	bl	11948 <_free_r>
   12e9e:	e7cf      	b.n	12e40 <_realloc_r+0xf8>
   12ea0:	0011      	movs	r1, r2
   12ea2:	f7ff f869 	bl	11f78 <_malloc_r>
   12ea6:	0005      	movs	r5, r0
   12ea8:	e7cd      	b.n	12e46 <_realloc_r+0xfe>
   12eaa:	4651      	mov	r1, sl
   12eac:	4211      	tst	r1, r2
   12eae:	d000      	beq.n	12eb2 <_realloc_r+0x16a>
   12eb0:	e786      	b.n	12dc0 <_realloc_r+0x78>
   12eb2:	4661      	mov	r1, ip
   12eb4:	683a      	ldr	r2, [r7, #0]
   12eb6:	1aba      	subs	r2, r7, r2
   12eb8:	4692      	mov	sl, r2
   12eba:	6852      	ldr	r2, [r2, #4]
   12ebc:	438a      	bics	r2, r1
   12ebe:	1880      	adds	r0, r0, r2
   12ec0:	4683      	mov	fp, r0
   12ec2:	44a3      	add	fp, r4
   12ec4:	459b      	cmp	fp, r3
   12ec6:	db26      	blt.n	12f16 <_realloc_r+0x1ce>
   12ec8:	9a02      	ldr	r2, [sp, #8]
   12eca:	68d3      	ldr	r3, [r2, #12]
   12ecc:	6892      	ldr	r2, [r2, #8]
   12ece:	60d3      	str	r3, [r2, #12]
   12ed0:	609a      	str	r2, [r3, #8]
   12ed2:	4653      	mov	r3, sl
   12ed4:	4652      	mov	r2, sl
   12ed6:	4655      	mov	r5, sl
   12ed8:	6892      	ldr	r2, [r2, #8]
   12eda:	68db      	ldr	r3, [r3, #12]
   12edc:	3508      	adds	r5, #8
   12ede:	60d3      	str	r3, [r2, #12]
   12ee0:	609a      	str	r2, [r3, #8]
   12ee2:	1f22      	subs	r2, r4, #4
   12ee4:	2a24      	cmp	r2, #36	; 0x24
   12ee6:	d900      	bls.n	12eea <_realloc_r+0x1a2>
   12ee8:	e096      	b.n	13018 <_realloc_r+0x2d0>
   12eea:	2a13      	cmp	r2, #19
   12eec:	d972      	bls.n	12fd4 <_realloc_r+0x28c>
   12eee:	4653      	mov	r3, sl
   12ef0:	6831      	ldr	r1, [r6, #0]
   12ef2:	6099      	str	r1, [r3, #8]
   12ef4:	6871      	ldr	r1, [r6, #4]
   12ef6:	60d9      	str	r1, [r3, #12]
   12ef8:	2a1b      	cmp	r2, #27
   12efa:	d900      	bls.n	12efe <_realloc_r+0x1b6>
   12efc:	e0a4      	b.n	13048 <_realloc_r+0x300>
   12efe:	0032      	movs	r2, r6
   12f00:	3310      	adds	r3, #16
   12f02:	3208      	adds	r2, #8
   12f04:	e068      	b.n	12fd8 <_realloc_r+0x290>
   12f06:	683a      	ldr	r2, [r7, #0]
   12f08:	1aba      	subs	r2, r7, r2
   12f0a:	4692      	mov	sl, r2
   12f0c:	4651      	mov	r1, sl
   12f0e:	2203      	movs	r2, #3
   12f10:	6849      	ldr	r1, [r1, #4]
   12f12:	4391      	bics	r1, r2
   12f14:	000a      	movs	r2, r1
   12f16:	4693      	mov	fp, r2
   12f18:	44a3      	add	fp, r4
   12f1a:	459b      	cmp	fp, r3
   12f1c:	da00      	bge.n	12f20 <_realloc_r+0x1d8>
   12f1e:	e74f      	b.n	12dc0 <_realloc_r+0x78>
   12f20:	e7d7      	b.n	12ed2 <_realloc_r+0x18a>
   12f22:	2003      	movs	r0, #3
   12f24:	9902      	ldr	r1, [sp, #8]
   12f26:	4684      	mov	ip, r0
   12f28:	6849      	ldr	r1, [r1, #4]
   12f2a:	4381      	bics	r1, r0
   12f2c:	4640      	mov	r0, r8
   12f2e:	1909      	adds	r1, r1, r4
   12f30:	3010      	adds	r0, #16
   12f32:	9002      	str	r0, [sp, #8]
   12f34:	4281      	cmp	r1, r0
   12f36:	da58      	bge.n	12fea <_realloc_r+0x2a2>
   12f38:	07d2      	lsls	r2, r2, #31
   12f3a:	d500      	bpl.n	12f3e <_realloc_r+0x1f6>
   12f3c:	e740      	b.n	12dc0 <_realloc_r+0x78>
   12f3e:	4660      	mov	r0, ip
   12f40:	683a      	ldr	r2, [r7, #0]
   12f42:	1aba      	subs	r2, r7, r2
   12f44:	4692      	mov	sl, r2
   12f46:	6852      	ldr	r2, [r2, #4]
   12f48:	4382      	bics	r2, r0
   12f4a:	9802      	ldr	r0, [sp, #8]
   12f4c:	1851      	adds	r1, r2, r1
   12f4e:	9103      	str	r1, [sp, #12]
   12f50:	4288      	cmp	r0, r1
   12f52:	dce0      	bgt.n	12f16 <_realloc_r+0x1ce>
   12f54:	4653      	mov	r3, sl
   12f56:	4652      	mov	r2, sl
   12f58:	4655      	mov	r5, sl
   12f5a:	6892      	ldr	r2, [r2, #8]
   12f5c:	68db      	ldr	r3, [r3, #12]
   12f5e:	3508      	adds	r5, #8
   12f60:	60d3      	str	r3, [r2, #12]
   12f62:	609a      	str	r2, [r3, #8]
   12f64:	1f22      	subs	r2, r4, #4
   12f66:	2a24      	cmp	r2, #36	; 0x24
   12f68:	d900      	bls.n	12f6c <_realloc_r+0x224>
   12f6a:	e08e      	b.n	1308a <_realloc_r+0x342>
   12f6c:	2a13      	cmp	r2, #19
   12f6e:	d800      	bhi.n	12f72 <_realloc_r+0x22a>
   12f70:	e088      	b.n	13084 <_realloc_r+0x33c>
   12f72:	4653      	mov	r3, sl
   12f74:	6831      	ldr	r1, [r6, #0]
   12f76:	6099      	str	r1, [r3, #8]
   12f78:	6871      	ldr	r1, [r6, #4]
   12f7a:	60d9      	str	r1, [r3, #12]
   12f7c:	2a1b      	cmp	r2, #27
   12f7e:	d900      	bls.n	12f82 <_realloc_r+0x23a>
   12f80:	e088      	b.n	13094 <_realloc_r+0x34c>
   12f82:	0032      	movs	r2, r6
   12f84:	3310      	adds	r3, #16
   12f86:	3208      	adds	r2, #8
   12f88:	6811      	ldr	r1, [r2, #0]
   12f8a:	6019      	str	r1, [r3, #0]
   12f8c:	6851      	ldr	r1, [r2, #4]
   12f8e:	6059      	str	r1, [r3, #4]
   12f90:	6892      	ldr	r2, [r2, #8]
   12f92:	609a      	str	r2, [r3, #8]
   12f94:	4651      	mov	r1, sl
   12f96:	465b      	mov	r3, fp
   12f98:	4642      	mov	r2, r8
   12f9a:	4441      	add	r1, r8
   12f9c:	6099      	str	r1, [r3, #8]
   12f9e:	9b03      	ldr	r3, [sp, #12]
   12fa0:	9801      	ldr	r0, [sp, #4]
   12fa2:	1a9a      	subs	r2, r3, r2
   12fa4:	2301      	movs	r3, #1
   12fa6:	431a      	orrs	r2, r3
   12fa8:	604a      	str	r2, [r1, #4]
   12faa:	4652      	mov	r2, sl
   12fac:	6852      	ldr	r2, [r2, #4]
   12fae:	4013      	ands	r3, r2
   12fb0:	4642      	mov	r2, r8
   12fb2:	4313      	orrs	r3, r2
   12fb4:	4652      	mov	r2, sl
   12fb6:	6053      	str	r3, [r2, #4]
   12fb8:	f7ff fb7c 	bl	126b4 <__malloc_unlock>
   12fbc:	e743      	b.n	12e46 <_realloc_r+0xfe>
   12fbe:	6833      	ldr	r3, [r6, #0]
   12fc0:	6003      	str	r3, [r0, #0]
   12fc2:	6873      	ldr	r3, [r6, #4]
   12fc4:	6043      	str	r3, [r0, #4]
   12fc6:	2a1b      	cmp	r2, #27
   12fc8:	d82d      	bhi.n	13026 <_realloc_r+0x2de>
   12fca:	0003      	movs	r3, r0
   12fcc:	0032      	movs	r2, r6
   12fce:	3308      	adds	r3, #8
   12fd0:	3208      	adds	r2, #8
   12fd2:	e70d      	b.n	12df0 <_realloc_r+0xa8>
   12fd4:	002b      	movs	r3, r5
   12fd6:	0032      	movs	r2, r6
   12fd8:	6811      	ldr	r1, [r2, #0]
   12fda:	465c      	mov	r4, fp
   12fdc:	6019      	str	r1, [r3, #0]
   12fde:	6851      	ldr	r1, [r2, #4]
   12fe0:	46d1      	mov	r9, sl
   12fe2:	6059      	str	r1, [r3, #4]
   12fe4:	6892      	ldr	r2, [r2, #8]
   12fe6:	609a      	str	r2, [r3, #8]
   12fe8:	e71b      	b.n	12e22 <_realloc_r+0xda>
   12fea:	4643      	mov	r3, r8
   12fec:	18fa      	adds	r2, r7, r3
   12fee:	465b      	mov	r3, fp
   12ff0:	609a      	str	r2, [r3, #8]
   12ff2:	4643      	mov	r3, r8
   12ff4:	1ac9      	subs	r1, r1, r3
   12ff6:	2301      	movs	r3, #1
   12ff8:	4319      	orrs	r1, r3
   12ffa:	6051      	str	r1, [r2, #4]
   12ffc:	687a      	ldr	r2, [r7, #4]
   12ffe:	9801      	ldr	r0, [sp, #4]
   13000:	4013      	ands	r3, r2
   13002:	4642      	mov	r2, r8
   13004:	4313      	orrs	r3, r2
   13006:	607b      	str	r3, [r7, #4]
   13008:	f7ff fb54 	bl	126b4 <__malloc_unlock>
   1300c:	0035      	movs	r5, r6
   1300e:	e71a      	b.n	12e46 <_realloc_r+0xfe>
   13010:	0031      	movs	r1, r6
   13012:	f7ff fafd 	bl	12610 <memmove>
   13016:	e6f1      	b.n	12dfc <_realloc_r+0xb4>
   13018:	0031      	movs	r1, r6
   1301a:	0028      	movs	r0, r5
   1301c:	f7ff faf8 	bl	12610 <memmove>
   13020:	465c      	mov	r4, fp
   13022:	46d1      	mov	r9, sl
   13024:	e6fd      	b.n	12e22 <_realloc_r+0xda>
   13026:	68b3      	ldr	r3, [r6, #8]
   13028:	6083      	str	r3, [r0, #8]
   1302a:	68f3      	ldr	r3, [r6, #12]
   1302c:	60c3      	str	r3, [r0, #12]
   1302e:	2a24      	cmp	r2, #36	; 0x24
   13030:	d015      	beq.n	1305e <_realloc_r+0x316>
   13032:	0003      	movs	r3, r0
   13034:	0032      	movs	r2, r6
   13036:	3310      	adds	r3, #16
   13038:	3210      	adds	r2, #16
   1303a:	e6d9      	b.n	12df0 <_realloc_r+0xa8>
   1303c:	6853      	ldr	r3, [r2, #4]
   1303e:	2203      	movs	r2, #3
   13040:	4393      	bics	r3, r2
   13042:	18e4      	adds	r4, r4, r3
   13044:	0035      	movs	r5, r6
   13046:	e6ec      	b.n	12e22 <_realloc_r+0xda>
   13048:	4653      	mov	r3, sl
   1304a:	68b1      	ldr	r1, [r6, #8]
   1304c:	6119      	str	r1, [r3, #16]
   1304e:	68f1      	ldr	r1, [r6, #12]
   13050:	6159      	str	r1, [r3, #20]
   13052:	2a24      	cmp	r2, #36	; 0x24
   13054:	d00c      	beq.n	13070 <_realloc_r+0x328>
   13056:	0032      	movs	r2, r6
   13058:	3318      	adds	r3, #24
   1305a:	3210      	adds	r2, #16
   1305c:	e7bc      	b.n	12fd8 <_realloc_r+0x290>
   1305e:	6933      	ldr	r3, [r6, #16]
   13060:	0032      	movs	r2, r6
   13062:	6103      	str	r3, [r0, #16]
   13064:	0003      	movs	r3, r0
   13066:	6971      	ldr	r1, [r6, #20]
   13068:	3318      	adds	r3, #24
   1306a:	3218      	adds	r2, #24
   1306c:	6141      	str	r1, [r0, #20]
   1306e:	e6bf      	b.n	12df0 <_realloc_r+0xa8>
   13070:	4653      	mov	r3, sl
   13072:	6932      	ldr	r2, [r6, #16]
   13074:	4651      	mov	r1, sl
   13076:	619a      	str	r2, [r3, #24]
   13078:	0032      	movs	r2, r6
   1307a:	6970      	ldr	r0, [r6, #20]
   1307c:	3320      	adds	r3, #32
   1307e:	3218      	adds	r2, #24
   13080:	61c8      	str	r0, [r1, #28]
   13082:	e7a9      	b.n	12fd8 <_realloc_r+0x290>
   13084:	002b      	movs	r3, r5
   13086:	0032      	movs	r2, r6
   13088:	e77e      	b.n	12f88 <_realloc_r+0x240>
   1308a:	0031      	movs	r1, r6
   1308c:	0028      	movs	r0, r5
   1308e:	f7ff fabf 	bl	12610 <memmove>
   13092:	e77f      	b.n	12f94 <_realloc_r+0x24c>
   13094:	4653      	mov	r3, sl
   13096:	68b1      	ldr	r1, [r6, #8]
   13098:	6119      	str	r1, [r3, #16]
   1309a:	68f1      	ldr	r1, [r6, #12]
   1309c:	6159      	str	r1, [r3, #20]
   1309e:	2a24      	cmp	r2, #36	; 0x24
   130a0:	d003      	beq.n	130aa <_realloc_r+0x362>
   130a2:	0032      	movs	r2, r6
   130a4:	3318      	adds	r3, #24
   130a6:	3210      	adds	r2, #16
   130a8:	e76e      	b.n	12f88 <_realloc_r+0x240>
   130aa:	4653      	mov	r3, sl
   130ac:	6932      	ldr	r2, [r6, #16]
   130ae:	4651      	mov	r1, sl
   130b0:	619a      	str	r2, [r3, #24]
   130b2:	0032      	movs	r2, r6
   130b4:	6970      	ldr	r0, [r6, #20]
   130b6:	3320      	adds	r3, #32
   130b8:	3218      	adds	r2, #24
   130ba:	61c8      	str	r0, [r1, #28]
   130bc:	e764      	b.n	12f88 <_realloc_r+0x240>
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	200006d4 	.word	0x200006d4

000130c4 <_sbrk_r>:
   130c4:	2300      	movs	r3, #0
   130c6:	b570      	push	{r4, r5, r6, lr}
   130c8:	4c06      	ldr	r4, [pc, #24]	; (130e4 <_sbrk_r+0x20>)
   130ca:	0005      	movs	r5, r0
   130cc:	0008      	movs	r0, r1
   130ce:	6023      	str	r3, [r4, #0]
   130d0:	f7ee fa88 	bl	15e4 <_sbrk>
   130d4:	1c43      	adds	r3, r0, #1
   130d6:	d000      	beq.n	130da <_sbrk_r+0x16>
   130d8:	bd70      	pop	{r4, r5, r6, pc}
   130da:	6823      	ldr	r3, [r4, #0]
   130dc:	2b00      	cmp	r3, #0
   130de:	d0fb      	beq.n	130d8 <_sbrk_r+0x14>
   130e0:	602b      	str	r3, [r5, #0]
   130e2:	e7f9      	b.n	130d8 <_sbrk_r+0x14>
   130e4:	20001d28 	.word	0x20001d28

000130e8 <__sread>:
   130e8:	b570      	push	{r4, r5, r6, lr}
   130ea:	000c      	movs	r4, r1
   130ec:	250e      	movs	r5, #14
   130ee:	5f49      	ldrsh	r1, [r1, r5]
   130f0:	f000 fa3a 	bl	13568 <_read_r>
   130f4:	2800      	cmp	r0, #0
   130f6:	db03      	blt.n	13100 <__sread+0x18>
   130f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   130fa:	181b      	adds	r3, r3, r0
   130fc:	6523      	str	r3, [r4, #80]	; 0x50
   130fe:	bd70      	pop	{r4, r5, r6, pc}
   13100:	89a3      	ldrh	r3, [r4, #12]
   13102:	4a02      	ldr	r2, [pc, #8]	; (1310c <__sread+0x24>)
   13104:	4013      	ands	r3, r2
   13106:	81a3      	strh	r3, [r4, #12]
   13108:	e7f9      	b.n	130fe <__sread+0x16>
   1310a:	46c0      	nop			; (mov r8, r8)
   1310c:	ffffefff 	.word	0xffffefff

00013110 <__swrite>:
   13110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13112:	0016      	movs	r6, r2
   13114:	001f      	movs	r7, r3
   13116:	220c      	movs	r2, #12
   13118:	5e8b      	ldrsh	r3, [r1, r2]
   1311a:	0005      	movs	r5, r0
   1311c:	000c      	movs	r4, r1
   1311e:	05da      	lsls	r2, r3, #23
   13120:	d507      	bpl.n	13132 <__swrite+0x22>
   13122:	230e      	movs	r3, #14
   13124:	5ec9      	ldrsh	r1, [r1, r3]
   13126:	2200      	movs	r2, #0
   13128:	2302      	movs	r3, #2
   1312a:	f000 fa09 	bl	13540 <_lseek_r>
   1312e:	220c      	movs	r2, #12
   13130:	5ea3      	ldrsh	r3, [r4, r2]
   13132:	4a05      	ldr	r2, [pc, #20]	; (13148 <__swrite+0x38>)
   13134:	0028      	movs	r0, r5
   13136:	4013      	ands	r3, r2
   13138:	81a3      	strh	r3, [r4, #12]
   1313a:	0032      	movs	r2, r6
   1313c:	230e      	movs	r3, #14
   1313e:	5ee1      	ldrsh	r1, [r4, r3]
   13140:	003b      	movs	r3, r7
   13142:	f000 f879 	bl	13238 <_write_r>
   13146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13148:	ffffefff 	.word	0xffffefff

0001314c <__sseek>:
   1314c:	b570      	push	{r4, r5, r6, lr}
   1314e:	000c      	movs	r4, r1
   13150:	250e      	movs	r5, #14
   13152:	5f49      	ldrsh	r1, [r1, r5]
   13154:	f000 f9f4 	bl	13540 <_lseek_r>
   13158:	1c43      	adds	r3, r0, #1
   1315a:	d006      	beq.n	1316a <__sseek+0x1e>
   1315c:	2380      	movs	r3, #128	; 0x80
   1315e:	89a2      	ldrh	r2, [r4, #12]
   13160:	015b      	lsls	r3, r3, #5
   13162:	4313      	orrs	r3, r2
   13164:	81a3      	strh	r3, [r4, #12]
   13166:	6520      	str	r0, [r4, #80]	; 0x50
   13168:	bd70      	pop	{r4, r5, r6, pc}
   1316a:	89a3      	ldrh	r3, [r4, #12]
   1316c:	4a01      	ldr	r2, [pc, #4]	; (13174 <__sseek+0x28>)
   1316e:	4013      	ands	r3, r2
   13170:	81a3      	strh	r3, [r4, #12]
   13172:	e7f9      	b.n	13168 <__sseek+0x1c>
   13174:	ffffefff 	.word	0xffffefff

00013178 <__sclose>:
   13178:	b510      	push	{r4, lr}
   1317a:	230e      	movs	r3, #14
   1317c:	5ec9      	ldrsh	r1, [r1, r3]
   1317e:	f000 f905 	bl	1338c <_close_r>
   13182:	bd10      	pop	{r4, pc}

00013184 <__sprint_r.part.0>:
   13184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13186:	464e      	mov	r6, r9
   13188:	4645      	mov	r5, r8
   1318a:	46de      	mov	lr, fp
   1318c:	4657      	mov	r7, sl
   1318e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13190:	b5e0      	push	{r5, r6, r7, lr}
   13192:	4680      	mov	r8, r0
   13194:	000e      	movs	r6, r1
   13196:	4691      	mov	r9, r2
   13198:	049b      	lsls	r3, r3, #18
   1319a:	d531      	bpl.n	13200 <__sprint_r.part.0+0x7c>
   1319c:	6813      	ldr	r3, [r2, #0]
   1319e:	469a      	mov	sl, r3
   131a0:	6893      	ldr	r3, [r2, #8]
   131a2:	2b00      	cmp	r3, #0
   131a4:	d02a      	beq.n	131fc <__sprint_r.part.0+0x78>
   131a6:	4652      	mov	r2, sl
   131a8:	6852      	ldr	r2, [r2, #4]
   131aa:	2500      	movs	r5, #0
   131ac:	4693      	mov	fp, r2
   131ae:	0897      	lsrs	r7, r2, #2
   131b0:	4652      	mov	r2, sl
   131b2:	6814      	ldr	r4, [r2, #0]
   131b4:	d104      	bne.n	131c0 <__sprint_r.part.0+0x3c>
   131b6:	e016      	b.n	131e6 <__sprint_r.part.0+0x62>
   131b8:	3501      	adds	r5, #1
   131ba:	3404      	adds	r4, #4
   131bc:	42af      	cmp	r7, r5
   131be:	d010      	beq.n	131e2 <__sprint_r.part.0+0x5e>
   131c0:	0032      	movs	r2, r6
   131c2:	6821      	ldr	r1, [r4, #0]
   131c4:	4640      	mov	r0, r8
   131c6:	f000 f985 	bl	134d4 <_fputwc_r>
   131ca:	1c43      	adds	r3, r0, #1
   131cc:	d1f4      	bne.n	131b8 <__sprint_r.part.0+0x34>
   131ce:	464a      	mov	r2, r9
   131d0:	2300      	movs	r3, #0
   131d2:	6093      	str	r3, [r2, #8]
   131d4:	6053      	str	r3, [r2, #4]
   131d6:	bc3c      	pop	{r2, r3, r4, r5}
   131d8:	4690      	mov	r8, r2
   131da:	4699      	mov	r9, r3
   131dc:	46a2      	mov	sl, r4
   131de:	46ab      	mov	fp, r5
   131e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131e2:	464b      	mov	r3, r9
   131e4:	689b      	ldr	r3, [r3, #8]
   131e6:	465a      	mov	r2, fp
   131e8:	2103      	movs	r1, #3
   131ea:	438a      	bics	r2, r1
   131ec:	1a9b      	subs	r3, r3, r2
   131ee:	464a      	mov	r2, r9
   131f0:	6093      	str	r3, [r2, #8]
   131f2:	2208      	movs	r2, #8
   131f4:	4694      	mov	ip, r2
   131f6:	44e2      	add	sl, ip
   131f8:	2b00      	cmp	r3, #0
   131fa:	d1d4      	bne.n	131a6 <__sprint_r.part.0+0x22>
   131fc:	2000      	movs	r0, #0
   131fe:	e7e6      	b.n	131ce <__sprint_r.part.0+0x4a>
   13200:	f7fe fc80 	bl	11b04 <__sfvwrite_r>
   13204:	e7e3      	b.n	131ce <__sprint_r.part.0+0x4a>
   13206:	46c0      	nop			; (mov r8, r8)

00013208 <__sprint_r>:
   13208:	6893      	ldr	r3, [r2, #8]
   1320a:	b510      	push	{r4, lr}
   1320c:	2b00      	cmp	r3, #0
   1320e:	d002      	beq.n	13216 <__sprint_r+0xe>
   13210:	f7ff ffb8 	bl	13184 <__sprint_r.part.0>
   13214:	bd10      	pop	{r4, pc}
   13216:	6053      	str	r3, [r2, #4]
   13218:	2000      	movs	r0, #0
   1321a:	e7fb      	b.n	13214 <__sprint_r+0xc>

0001321c <__ascii_wctomb>:
   1321c:	2900      	cmp	r1, #0
   1321e:	d004      	beq.n	1322a <__ascii_wctomb+0xe>
   13220:	2aff      	cmp	r2, #255	; 0xff
   13222:	d804      	bhi.n	1322e <__ascii_wctomb+0x12>
   13224:	2001      	movs	r0, #1
   13226:	700a      	strb	r2, [r1, #0]
   13228:	4770      	bx	lr
   1322a:	2000      	movs	r0, #0
   1322c:	e7fc      	b.n	13228 <__ascii_wctomb+0xc>
   1322e:	238a      	movs	r3, #138	; 0x8a
   13230:	6003      	str	r3, [r0, #0]
   13232:	2001      	movs	r0, #1
   13234:	4240      	negs	r0, r0
   13236:	e7f7      	b.n	13228 <__ascii_wctomb+0xc>

00013238 <_write_r>:
   13238:	b570      	push	{r4, r5, r6, lr}
   1323a:	0005      	movs	r5, r0
   1323c:	0008      	movs	r0, r1
   1323e:	0011      	movs	r1, r2
   13240:	2200      	movs	r2, #0
   13242:	4c06      	ldr	r4, [pc, #24]	; (1325c <_write_r+0x24>)
   13244:	6022      	str	r2, [r4, #0]
   13246:	001a      	movs	r2, r3
   13248:	f7ed fe90 	bl	f6c <_write>
   1324c:	1c43      	adds	r3, r0, #1
   1324e:	d000      	beq.n	13252 <_write_r+0x1a>
   13250:	bd70      	pop	{r4, r5, r6, pc}
   13252:	6823      	ldr	r3, [r4, #0]
   13254:	2b00      	cmp	r3, #0
   13256:	d0fb      	beq.n	13250 <_write_r+0x18>
   13258:	602b      	str	r3, [r5, #0]
   1325a:	e7f9      	b.n	13250 <_write_r+0x18>
   1325c:	20001d28 	.word	0x20001d28

00013260 <__register_exitproc>:
   13260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13262:	46de      	mov	lr, fp
   13264:	469b      	mov	fp, r3
   13266:	4b31      	ldr	r3, [pc, #196]	; (1332c <__register_exitproc+0xcc>)
   13268:	4645      	mov	r5, r8
   1326a:	681c      	ldr	r4, [r3, #0]
   1326c:	23a4      	movs	r3, #164	; 0xa4
   1326e:	464e      	mov	r6, r9
   13270:	4657      	mov	r7, sl
   13272:	005b      	lsls	r3, r3, #1
   13274:	b5e0      	push	{r5, r6, r7, lr}
   13276:	0005      	movs	r5, r0
   13278:	58e0      	ldr	r0, [r4, r3]
   1327a:	000e      	movs	r6, r1
   1327c:	4690      	mov	r8, r2
   1327e:	2800      	cmp	r0, #0
   13280:	d04b      	beq.n	1331a <__register_exitproc+0xba>
   13282:	6843      	ldr	r3, [r0, #4]
   13284:	2b1f      	cmp	r3, #31
   13286:	dc0d      	bgt.n	132a4 <__register_exitproc+0x44>
   13288:	1c5c      	adds	r4, r3, #1
   1328a:	2d00      	cmp	r5, #0
   1328c:	d121      	bne.n	132d2 <__register_exitproc+0x72>
   1328e:	3302      	adds	r3, #2
   13290:	009b      	lsls	r3, r3, #2
   13292:	6044      	str	r4, [r0, #4]
   13294:	501e      	str	r6, [r3, r0]
   13296:	2000      	movs	r0, #0
   13298:	bc3c      	pop	{r2, r3, r4, r5}
   1329a:	4690      	mov	r8, r2
   1329c:	4699      	mov	r9, r3
   1329e:	46a2      	mov	sl, r4
   132a0:	46ab      	mov	fp, r5
   132a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   132a4:	4b22      	ldr	r3, [pc, #136]	; (13330 <__register_exitproc+0xd0>)
   132a6:	2b00      	cmp	r3, #0
   132a8:	d03c      	beq.n	13324 <__register_exitproc+0xc4>
   132aa:	20c8      	movs	r0, #200	; 0xc8
   132ac:	0040      	lsls	r0, r0, #1
   132ae:	e000      	b.n	132b2 <__register_exitproc+0x52>
   132b0:	bf00      	nop
   132b2:	2800      	cmp	r0, #0
   132b4:	d036      	beq.n	13324 <__register_exitproc+0xc4>
   132b6:	22a4      	movs	r2, #164	; 0xa4
   132b8:	2300      	movs	r3, #0
   132ba:	0052      	lsls	r2, r2, #1
   132bc:	58a1      	ldr	r1, [r4, r2]
   132be:	6043      	str	r3, [r0, #4]
   132c0:	6001      	str	r1, [r0, #0]
   132c2:	50a0      	str	r0, [r4, r2]
   132c4:	3240      	adds	r2, #64	; 0x40
   132c6:	5083      	str	r3, [r0, r2]
   132c8:	3204      	adds	r2, #4
   132ca:	5083      	str	r3, [r0, r2]
   132cc:	2401      	movs	r4, #1
   132ce:	2d00      	cmp	r5, #0
   132d0:	d0dd      	beq.n	1328e <__register_exitproc+0x2e>
   132d2:	009a      	lsls	r2, r3, #2
   132d4:	4691      	mov	r9, r2
   132d6:	4481      	add	r9, r0
   132d8:	4642      	mov	r2, r8
   132da:	2188      	movs	r1, #136	; 0x88
   132dc:	464f      	mov	r7, r9
   132de:	507a      	str	r2, [r7, r1]
   132e0:	22c4      	movs	r2, #196	; 0xc4
   132e2:	0052      	lsls	r2, r2, #1
   132e4:	4690      	mov	r8, r2
   132e6:	4480      	add	r8, r0
   132e8:	4642      	mov	r2, r8
   132ea:	3987      	subs	r1, #135	; 0x87
   132ec:	4099      	lsls	r1, r3
   132ee:	6812      	ldr	r2, [r2, #0]
   132f0:	468a      	mov	sl, r1
   132f2:	430a      	orrs	r2, r1
   132f4:	4694      	mov	ip, r2
   132f6:	4642      	mov	r2, r8
   132f8:	4661      	mov	r1, ip
   132fa:	6011      	str	r1, [r2, #0]
   132fc:	2284      	movs	r2, #132	; 0x84
   132fe:	4649      	mov	r1, r9
   13300:	465f      	mov	r7, fp
   13302:	0052      	lsls	r2, r2, #1
   13304:	508f      	str	r7, [r1, r2]
   13306:	2d02      	cmp	r5, #2
   13308:	d1c1      	bne.n	1328e <__register_exitproc+0x2e>
   1330a:	0002      	movs	r2, r0
   1330c:	4655      	mov	r5, sl
   1330e:	328d      	adds	r2, #141	; 0x8d
   13310:	32ff      	adds	r2, #255	; 0xff
   13312:	6811      	ldr	r1, [r2, #0]
   13314:	430d      	orrs	r5, r1
   13316:	6015      	str	r5, [r2, #0]
   13318:	e7b9      	b.n	1328e <__register_exitproc+0x2e>
   1331a:	0020      	movs	r0, r4
   1331c:	304d      	adds	r0, #77	; 0x4d
   1331e:	30ff      	adds	r0, #255	; 0xff
   13320:	50e0      	str	r0, [r4, r3]
   13322:	e7ae      	b.n	13282 <__register_exitproc+0x22>
   13324:	2001      	movs	r0, #1
   13326:	4240      	negs	r0, r0
   13328:	e7b6      	b.n	13298 <__register_exitproc+0x38>
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	000149fc 	.word	0x000149fc
   13330:	00000000 	.word	0x00000000

00013334 <_calloc_r>:
   13334:	b510      	push	{r4, lr}
   13336:	4351      	muls	r1, r2
   13338:	f7fe fe1e 	bl	11f78 <_malloc_r>
   1333c:	1e04      	subs	r4, r0, #0
   1333e:	d01c      	beq.n	1337a <_calloc_r+0x46>
   13340:	0003      	movs	r3, r0
   13342:	3b08      	subs	r3, #8
   13344:	685a      	ldr	r2, [r3, #4]
   13346:	2303      	movs	r3, #3
   13348:	439a      	bics	r2, r3
   1334a:	3a04      	subs	r2, #4
   1334c:	2a24      	cmp	r2, #36	; 0x24
   1334e:	d816      	bhi.n	1337e <_calloc_r+0x4a>
   13350:	0003      	movs	r3, r0
   13352:	2a13      	cmp	r2, #19
   13354:	d90d      	bls.n	13372 <_calloc_r+0x3e>
   13356:	2100      	movs	r1, #0
   13358:	3308      	adds	r3, #8
   1335a:	6001      	str	r1, [r0, #0]
   1335c:	6041      	str	r1, [r0, #4]
   1335e:	2a1b      	cmp	r2, #27
   13360:	d907      	bls.n	13372 <_calloc_r+0x3e>
   13362:	6081      	str	r1, [r0, #8]
   13364:	60c1      	str	r1, [r0, #12]
   13366:	2a24      	cmp	r2, #36	; 0x24
   13368:	d10d      	bne.n	13386 <_calloc_r+0x52>
   1336a:	0003      	movs	r3, r0
   1336c:	6101      	str	r1, [r0, #16]
   1336e:	3318      	adds	r3, #24
   13370:	6141      	str	r1, [r0, #20]
   13372:	2200      	movs	r2, #0
   13374:	601a      	str	r2, [r3, #0]
   13376:	605a      	str	r2, [r3, #4]
   13378:	609a      	str	r2, [r3, #8]
   1337a:	0020      	movs	r0, r4
   1337c:	bd10      	pop	{r4, pc}
   1337e:	2100      	movs	r1, #0
   13380:	f7fb fc2a 	bl	ebd8 <memset>
   13384:	e7f9      	b.n	1337a <_calloc_r+0x46>
   13386:	0003      	movs	r3, r0
   13388:	3310      	adds	r3, #16
   1338a:	e7f2      	b.n	13372 <_calloc_r+0x3e>

0001338c <_close_r>:
   1338c:	2300      	movs	r3, #0
   1338e:	b570      	push	{r4, r5, r6, lr}
   13390:	4c06      	ldr	r4, [pc, #24]	; (133ac <_close_r+0x20>)
   13392:	0005      	movs	r5, r0
   13394:	0008      	movs	r0, r1
   13396:	6023      	str	r3, [r4, #0]
   13398:	f7ee f936 	bl	1608 <_close>
   1339c:	1c43      	adds	r3, r0, #1
   1339e:	d000      	beq.n	133a2 <_close_r+0x16>
   133a0:	bd70      	pop	{r4, r5, r6, pc}
   133a2:	6823      	ldr	r3, [r4, #0]
   133a4:	2b00      	cmp	r3, #0
   133a6:	d0fb      	beq.n	133a0 <_close_r+0x14>
   133a8:	602b      	str	r3, [r5, #0]
   133aa:	e7f9      	b.n	133a0 <_close_r+0x14>
   133ac:	20001d28 	.word	0x20001d28

000133b0 <_fclose_r>:
   133b0:	b570      	push	{r4, r5, r6, lr}
   133b2:	0005      	movs	r5, r0
   133b4:	1e0c      	subs	r4, r1, #0
   133b6:	d008      	beq.n	133ca <_fclose_r+0x1a>
   133b8:	2800      	cmp	r0, #0
   133ba:	d002      	beq.n	133c2 <_fclose_r+0x12>
   133bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   133be:	2b00      	cmp	r3, #0
   133c0:	d031      	beq.n	13426 <_fclose_r+0x76>
   133c2:	220c      	movs	r2, #12
   133c4:	5ea3      	ldrsh	r3, [r4, r2]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d102      	bne.n	133d0 <_fclose_r+0x20>
   133ca:	2600      	movs	r6, #0
   133cc:	0030      	movs	r0, r6
   133ce:	bd70      	pop	{r4, r5, r6, pc}
   133d0:	0021      	movs	r1, r4
   133d2:	0028      	movs	r0, r5
   133d4:	f7fe f904 	bl	115e0 <__sflush_r>
   133d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   133da:	0006      	movs	r6, r0
   133dc:	2b00      	cmp	r3, #0
   133de:	d004      	beq.n	133ea <_fclose_r+0x3a>
   133e0:	69e1      	ldr	r1, [r4, #28]
   133e2:	0028      	movs	r0, r5
   133e4:	4798      	blx	r3
   133e6:	2800      	cmp	r0, #0
   133e8:	db20      	blt.n	1342c <_fclose_r+0x7c>
   133ea:	89a3      	ldrh	r3, [r4, #12]
   133ec:	061b      	lsls	r3, r3, #24
   133ee:	d420      	bmi.n	13432 <_fclose_r+0x82>
   133f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   133f2:	2900      	cmp	r1, #0
   133f4:	d008      	beq.n	13408 <_fclose_r+0x58>
   133f6:	0023      	movs	r3, r4
   133f8:	3340      	adds	r3, #64	; 0x40
   133fa:	4299      	cmp	r1, r3
   133fc:	d002      	beq.n	13404 <_fclose_r+0x54>
   133fe:	0028      	movs	r0, r5
   13400:	f7fe faa2 	bl	11948 <_free_r>
   13404:	2300      	movs	r3, #0
   13406:	6323      	str	r3, [r4, #48]	; 0x30
   13408:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1340a:	2900      	cmp	r1, #0
   1340c:	d004      	beq.n	13418 <_fclose_r+0x68>
   1340e:	0028      	movs	r0, r5
   13410:	f7fe fa9a 	bl	11948 <_free_r>
   13414:	2300      	movs	r3, #0
   13416:	6463      	str	r3, [r4, #68]	; 0x44
   13418:	f7fe fa28 	bl	1186c <__sfp_lock_acquire>
   1341c:	2300      	movs	r3, #0
   1341e:	81a3      	strh	r3, [r4, #12]
   13420:	f7fe fa26 	bl	11870 <__sfp_lock_release>
   13424:	e7d2      	b.n	133cc <_fclose_r+0x1c>
   13426:	f7fe fa19 	bl	1185c <__sinit>
   1342a:	e7ca      	b.n	133c2 <_fclose_r+0x12>
   1342c:	2601      	movs	r6, #1
   1342e:	4276      	negs	r6, r6
   13430:	e7db      	b.n	133ea <_fclose_r+0x3a>
   13432:	6921      	ldr	r1, [r4, #16]
   13434:	0028      	movs	r0, r5
   13436:	f7fe fa87 	bl	11948 <_free_r>
   1343a:	e7d9      	b.n	133f0 <_fclose_r+0x40>

0001343c <__fputwc>:
   1343c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1343e:	46ce      	mov	lr, r9
   13440:	4647      	mov	r7, r8
   13442:	b580      	push	{r7, lr}
   13444:	b085      	sub	sp, #20
   13446:	4680      	mov	r8, r0
   13448:	4689      	mov	r9, r1
   1344a:	0014      	movs	r4, r2
   1344c:	f7fe fd02 	bl	11e54 <__locale_mb_cur_max>
   13450:	2801      	cmp	r0, #1
   13452:	d031      	beq.n	134b8 <__fputwc+0x7c>
   13454:	0023      	movs	r3, r4
   13456:	af03      	add	r7, sp, #12
   13458:	335c      	adds	r3, #92	; 0x5c
   1345a:	464a      	mov	r2, r9
   1345c:	0039      	movs	r1, r7
   1345e:	4640      	mov	r0, r8
   13460:	f000 f8f4 	bl	1364c <_wcrtomb_r>
   13464:	0006      	movs	r6, r0
   13466:	1c43      	adds	r3, r0, #1
   13468:	d021      	beq.n	134ae <__fputwc+0x72>
   1346a:	2800      	cmp	r0, #0
   1346c:	d030      	beq.n	134d0 <__fputwc+0x94>
   1346e:	7839      	ldrb	r1, [r7, #0]
   13470:	2500      	movs	r5, #0
   13472:	e007      	b.n	13484 <__fputwc+0x48>
   13474:	6823      	ldr	r3, [r4, #0]
   13476:	1c5a      	adds	r2, r3, #1
   13478:	6022      	str	r2, [r4, #0]
   1347a:	7019      	strb	r1, [r3, #0]
   1347c:	3501      	adds	r5, #1
   1347e:	42b5      	cmp	r5, r6
   13480:	d226      	bcs.n	134d0 <__fputwc+0x94>
   13482:	5d79      	ldrb	r1, [r7, r5]
   13484:	68a3      	ldr	r3, [r4, #8]
   13486:	3b01      	subs	r3, #1
   13488:	60a3      	str	r3, [r4, #8]
   1348a:	2b00      	cmp	r3, #0
   1348c:	daf2      	bge.n	13474 <__fputwc+0x38>
   1348e:	69a2      	ldr	r2, [r4, #24]
   13490:	4293      	cmp	r3, r2
   13492:	db01      	blt.n	13498 <__fputwc+0x5c>
   13494:	290a      	cmp	r1, #10
   13496:	d1ed      	bne.n	13474 <__fputwc+0x38>
   13498:	0022      	movs	r2, r4
   1349a:	4640      	mov	r0, r8
   1349c:	f000 f878 	bl	13590 <__swbuf_r>
   134a0:	1c43      	adds	r3, r0, #1
   134a2:	d1eb      	bne.n	1347c <__fputwc+0x40>
   134a4:	b005      	add	sp, #20
   134a6:	bc0c      	pop	{r2, r3}
   134a8:	4690      	mov	r8, r2
   134aa:	4699      	mov	r9, r3
   134ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134ae:	2240      	movs	r2, #64	; 0x40
   134b0:	89a3      	ldrh	r3, [r4, #12]
   134b2:	4313      	orrs	r3, r2
   134b4:	81a3      	strh	r3, [r4, #12]
   134b6:	e7f5      	b.n	134a4 <__fputwc+0x68>
   134b8:	464b      	mov	r3, r9
   134ba:	3b01      	subs	r3, #1
   134bc:	2bfe      	cmp	r3, #254	; 0xfe
   134be:	d8c9      	bhi.n	13454 <__fputwc+0x18>
   134c0:	466a      	mov	r2, sp
   134c2:	464b      	mov	r3, r9
   134c4:	71d3      	strb	r3, [r2, #7]
   134c6:	79d1      	ldrb	r1, [r2, #7]
   134c8:	af03      	add	r7, sp, #12
   134ca:	7039      	strb	r1, [r7, #0]
   134cc:	2601      	movs	r6, #1
   134ce:	e7cf      	b.n	13470 <__fputwc+0x34>
   134d0:	4648      	mov	r0, r9
   134d2:	e7e7      	b.n	134a4 <__fputwc+0x68>

000134d4 <_fputwc_r>:
   134d4:	b510      	push	{r4, lr}
   134d6:	230c      	movs	r3, #12
   134d8:	5ed4      	ldrsh	r4, [r2, r3]
   134da:	2380      	movs	r3, #128	; 0x80
   134dc:	019b      	lsls	r3, r3, #6
   134de:	421c      	tst	r4, r3
   134e0:	d104      	bne.n	134ec <_fputwc_r+0x18>
   134e2:	431c      	orrs	r4, r3
   134e4:	8194      	strh	r4, [r2, #12]
   134e6:	6e54      	ldr	r4, [r2, #100]	; 0x64
   134e8:	4323      	orrs	r3, r4
   134ea:	6653      	str	r3, [r2, #100]	; 0x64
   134ec:	f7ff ffa6 	bl	1343c <__fputwc>
   134f0:	bd10      	pop	{r4, pc}
   134f2:	46c0      	nop			; (mov r8, r8)

000134f4 <_fstat_r>:
   134f4:	2300      	movs	r3, #0
   134f6:	b570      	push	{r4, r5, r6, lr}
   134f8:	4c07      	ldr	r4, [pc, #28]	; (13518 <_fstat_r+0x24>)
   134fa:	0005      	movs	r5, r0
   134fc:	0008      	movs	r0, r1
   134fe:	0011      	movs	r1, r2
   13500:	6023      	str	r3, [r4, #0]
   13502:	f7ee f884 	bl	160e <_fstat>
   13506:	1c43      	adds	r3, r0, #1
   13508:	d000      	beq.n	1350c <_fstat_r+0x18>
   1350a:	bd70      	pop	{r4, r5, r6, pc}
   1350c:	6823      	ldr	r3, [r4, #0]
   1350e:	2b00      	cmp	r3, #0
   13510:	d0fb      	beq.n	1350a <_fstat_r+0x16>
   13512:	602b      	str	r3, [r5, #0]
   13514:	e7f9      	b.n	1350a <_fstat_r+0x16>
   13516:	46c0      	nop			; (mov r8, r8)
   13518:	20001d28 	.word	0x20001d28

0001351c <_isatty_r>:
   1351c:	2300      	movs	r3, #0
   1351e:	b570      	push	{r4, r5, r6, lr}
   13520:	4c06      	ldr	r4, [pc, #24]	; (1353c <_isatty_r+0x20>)
   13522:	0005      	movs	r5, r0
   13524:	0008      	movs	r0, r1
   13526:	6023      	str	r3, [r4, #0]
   13528:	f7ee f876 	bl	1618 <_isatty>
   1352c:	1c43      	adds	r3, r0, #1
   1352e:	d000      	beq.n	13532 <_isatty_r+0x16>
   13530:	bd70      	pop	{r4, r5, r6, pc}
   13532:	6823      	ldr	r3, [r4, #0]
   13534:	2b00      	cmp	r3, #0
   13536:	d0fb      	beq.n	13530 <_isatty_r+0x14>
   13538:	602b      	str	r3, [r5, #0]
   1353a:	e7f9      	b.n	13530 <_isatty_r+0x14>
   1353c:	20001d28 	.word	0x20001d28

00013540 <_lseek_r>:
   13540:	b570      	push	{r4, r5, r6, lr}
   13542:	0005      	movs	r5, r0
   13544:	0008      	movs	r0, r1
   13546:	0011      	movs	r1, r2
   13548:	2200      	movs	r2, #0
   1354a:	4c06      	ldr	r4, [pc, #24]	; (13564 <_lseek_r+0x24>)
   1354c:	6022      	str	r2, [r4, #0]
   1354e:	001a      	movs	r2, r3
   13550:	f7ee f864 	bl	161c <_lseek>
   13554:	1c43      	adds	r3, r0, #1
   13556:	d000      	beq.n	1355a <_lseek_r+0x1a>
   13558:	bd70      	pop	{r4, r5, r6, pc}
   1355a:	6823      	ldr	r3, [r4, #0]
   1355c:	2b00      	cmp	r3, #0
   1355e:	d0fb      	beq.n	13558 <_lseek_r+0x18>
   13560:	602b      	str	r3, [r5, #0]
   13562:	e7f9      	b.n	13558 <_lseek_r+0x18>
   13564:	20001d28 	.word	0x20001d28

00013568 <_read_r>:
   13568:	b570      	push	{r4, r5, r6, lr}
   1356a:	0005      	movs	r5, r0
   1356c:	0008      	movs	r0, r1
   1356e:	0011      	movs	r1, r2
   13570:	2200      	movs	r2, #0
   13572:	4c06      	ldr	r4, [pc, #24]	; (1358c <_read_r+0x24>)
   13574:	6022      	str	r2, [r4, #0]
   13576:	001a      	movs	r2, r3
   13578:	f7ed fd0e 	bl	f98 <_read>
   1357c:	1c43      	adds	r3, r0, #1
   1357e:	d000      	beq.n	13582 <_read_r+0x1a>
   13580:	bd70      	pop	{r4, r5, r6, pc}
   13582:	6823      	ldr	r3, [r4, #0]
   13584:	2b00      	cmp	r3, #0
   13586:	d0fb      	beq.n	13580 <_read_r+0x18>
   13588:	602b      	str	r3, [r5, #0]
   1358a:	e7f9      	b.n	13580 <_read_r+0x18>
   1358c:	20001d28 	.word	0x20001d28

00013590 <__swbuf_r>:
   13590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13592:	0006      	movs	r6, r0
   13594:	000d      	movs	r5, r1
   13596:	0014      	movs	r4, r2
   13598:	2800      	cmp	r0, #0
   1359a:	d002      	beq.n	135a2 <__swbuf_r+0x12>
   1359c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1359e:	2b00      	cmp	r3, #0
   135a0:	d04e      	beq.n	13640 <__swbuf_r+0xb0>
   135a2:	69a3      	ldr	r3, [r4, #24]
   135a4:	60a3      	str	r3, [r4, #8]
   135a6:	230c      	movs	r3, #12
   135a8:	5ee0      	ldrsh	r0, [r4, r3]
   135aa:	b281      	uxth	r1, r0
   135ac:	070b      	lsls	r3, r1, #28
   135ae:	d53c      	bpl.n	1362a <__swbuf_r+0x9a>
   135b0:	6923      	ldr	r3, [r4, #16]
   135b2:	2b00      	cmp	r3, #0
   135b4:	d039      	beq.n	1362a <__swbuf_r+0x9a>
   135b6:	22ff      	movs	r2, #255	; 0xff
   135b8:	b2ef      	uxtb	r7, r5
   135ba:	4015      	ands	r5, r2
   135bc:	2280      	movs	r2, #128	; 0x80
   135be:	0192      	lsls	r2, r2, #6
   135c0:	4211      	tst	r1, r2
   135c2:	d015      	beq.n	135f0 <__swbuf_r+0x60>
   135c4:	6822      	ldr	r2, [r4, #0]
   135c6:	6961      	ldr	r1, [r4, #20]
   135c8:	1ad3      	subs	r3, r2, r3
   135ca:	428b      	cmp	r3, r1
   135cc:	da1b      	bge.n	13606 <__swbuf_r+0x76>
   135ce:	3301      	adds	r3, #1
   135d0:	68a1      	ldr	r1, [r4, #8]
   135d2:	3901      	subs	r1, #1
   135d4:	60a1      	str	r1, [r4, #8]
   135d6:	1c51      	adds	r1, r2, #1
   135d8:	6021      	str	r1, [r4, #0]
   135da:	7017      	strb	r7, [r2, #0]
   135dc:	6962      	ldr	r2, [r4, #20]
   135de:	429a      	cmp	r2, r3
   135e0:	d01a      	beq.n	13618 <__swbuf_r+0x88>
   135e2:	89a3      	ldrh	r3, [r4, #12]
   135e4:	07db      	lsls	r3, r3, #31
   135e6:	d501      	bpl.n	135ec <__swbuf_r+0x5c>
   135e8:	2d0a      	cmp	r5, #10
   135ea:	d015      	beq.n	13618 <__swbuf_r+0x88>
   135ec:	0028      	movs	r0, r5
   135ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   135f0:	4302      	orrs	r2, r0
   135f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   135f4:	81a2      	strh	r2, [r4, #12]
   135f6:	4a14      	ldr	r2, [pc, #80]	; (13648 <__swbuf_r+0xb8>)
   135f8:	400a      	ands	r2, r1
   135fa:	6662      	str	r2, [r4, #100]	; 0x64
   135fc:	6961      	ldr	r1, [r4, #20]
   135fe:	6822      	ldr	r2, [r4, #0]
   13600:	1ad3      	subs	r3, r2, r3
   13602:	428b      	cmp	r3, r1
   13604:	dbe3      	blt.n	135ce <__swbuf_r+0x3e>
   13606:	0021      	movs	r1, r4
   13608:	0030      	movs	r0, r6
   1360a:	f7fe f891 	bl	11730 <_fflush_r>
   1360e:	2800      	cmp	r0, #0
   13610:	d108      	bne.n	13624 <__swbuf_r+0x94>
   13612:	6822      	ldr	r2, [r4, #0]
   13614:	2301      	movs	r3, #1
   13616:	e7db      	b.n	135d0 <__swbuf_r+0x40>
   13618:	0021      	movs	r1, r4
   1361a:	0030      	movs	r0, r6
   1361c:	f7fe f888 	bl	11730 <_fflush_r>
   13620:	2800      	cmp	r0, #0
   13622:	d0e3      	beq.n	135ec <__swbuf_r+0x5c>
   13624:	2501      	movs	r5, #1
   13626:	426d      	negs	r5, r5
   13628:	e7e0      	b.n	135ec <__swbuf_r+0x5c>
   1362a:	0021      	movs	r1, r4
   1362c:	0030      	movs	r0, r6
   1362e:	f7fc feeb 	bl	10408 <__swsetup_r>
   13632:	2800      	cmp	r0, #0
   13634:	d1f6      	bne.n	13624 <__swbuf_r+0x94>
   13636:	230c      	movs	r3, #12
   13638:	5ee0      	ldrsh	r0, [r4, r3]
   1363a:	6923      	ldr	r3, [r4, #16]
   1363c:	b281      	uxth	r1, r0
   1363e:	e7ba      	b.n	135b6 <__swbuf_r+0x26>
   13640:	f7fe f90c 	bl	1185c <__sinit>
   13644:	e7ad      	b.n	135a2 <__swbuf_r+0x12>
   13646:	46c0      	nop			; (mov r8, r8)
   13648:	ffffdfff 	.word	0xffffdfff

0001364c <_wcrtomb_r>:
   1364c:	b570      	push	{r4, r5, r6, lr}
   1364e:	001d      	movs	r5, r3
   13650:	4b11      	ldr	r3, [pc, #68]	; (13698 <_wcrtomb_r+0x4c>)
   13652:	b084      	sub	sp, #16
   13654:	681b      	ldr	r3, [r3, #0]
   13656:	0004      	movs	r4, r0
   13658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1365a:	2900      	cmp	r1, #0
   1365c:	d00e      	beq.n	1367c <_wcrtomb_r+0x30>
   1365e:	2b00      	cmp	r3, #0
   13660:	d016      	beq.n	13690 <_wcrtomb_r+0x44>
   13662:	20e0      	movs	r0, #224	; 0xe0
   13664:	581e      	ldr	r6, [r3, r0]
   13666:	002b      	movs	r3, r5
   13668:	0020      	movs	r0, r4
   1366a:	47b0      	blx	r6
   1366c:	1c43      	adds	r3, r0, #1
   1366e:	d103      	bne.n	13678 <_wcrtomb_r+0x2c>
   13670:	2300      	movs	r3, #0
   13672:	602b      	str	r3, [r5, #0]
   13674:	338a      	adds	r3, #138	; 0x8a
   13676:	6023      	str	r3, [r4, #0]
   13678:	b004      	add	sp, #16
   1367a:	bd70      	pop	{r4, r5, r6, pc}
   1367c:	2b00      	cmp	r3, #0
   1367e:	d009      	beq.n	13694 <_wcrtomb_r+0x48>
   13680:	22e0      	movs	r2, #224	; 0xe0
   13682:	a901      	add	r1, sp, #4
   13684:	589e      	ldr	r6, [r3, r2]
   13686:	0020      	movs	r0, r4
   13688:	002b      	movs	r3, r5
   1368a:	2200      	movs	r2, #0
   1368c:	47b0      	blx	r6
   1368e:	e7ed      	b.n	1366c <_wcrtomb_r+0x20>
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <_wcrtomb_r+0x50>)
   13692:	e7e6      	b.n	13662 <_wcrtomb_r+0x16>
   13694:	4b01      	ldr	r3, [pc, #4]	; (1369c <_wcrtomb_r+0x50>)
   13696:	e7f3      	b.n	13680 <_wcrtomb_r+0x34>
   13698:	20000138 	.word	0x20000138
   1369c:	20000568 	.word	0x20000568

000136a0 <__aeabi_dcmpun>:
   136a0:	b570      	push	{r4, r5, r6, lr}
   136a2:	4e0e      	ldr	r6, [pc, #56]	; (136dc <__aeabi_dcmpun+0x3c>)
   136a4:	030d      	lsls	r5, r1, #12
   136a6:	031c      	lsls	r4, r3, #12
   136a8:	0049      	lsls	r1, r1, #1
   136aa:	005b      	lsls	r3, r3, #1
   136ac:	0b2d      	lsrs	r5, r5, #12
   136ae:	0d49      	lsrs	r1, r1, #21
   136b0:	0b24      	lsrs	r4, r4, #12
   136b2:	0d5b      	lsrs	r3, r3, #21
   136b4:	42b1      	cmp	r1, r6
   136b6:	d004      	beq.n	136c2 <__aeabi_dcmpun+0x22>
   136b8:	4908      	ldr	r1, [pc, #32]	; (136dc <__aeabi_dcmpun+0x3c>)
   136ba:	2000      	movs	r0, #0
   136bc:	428b      	cmp	r3, r1
   136be:	d008      	beq.n	136d2 <__aeabi_dcmpun+0x32>
   136c0:	bd70      	pop	{r4, r5, r6, pc}
   136c2:	4305      	orrs	r5, r0
   136c4:	2001      	movs	r0, #1
   136c6:	2d00      	cmp	r5, #0
   136c8:	d1fa      	bne.n	136c0 <__aeabi_dcmpun+0x20>
   136ca:	4904      	ldr	r1, [pc, #16]	; (136dc <__aeabi_dcmpun+0x3c>)
   136cc:	2000      	movs	r0, #0
   136ce:	428b      	cmp	r3, r1
   136d0:	d1f6      	bne.n	136c0 <__aeabi_dcmpun+0x20>
   136d2:	4314      	orrs	r4, r2
   136d4:	0020      	movs	r0, r4
   136d6:	1e44      	subs	r4, r0, #1
   136d8:	41a0      	sbcs	r0, r4
   136da:	e7f1      	b.n	136c0 <__aeabi_dcmpun+0x20>
   136dc:	000007ff 	.word	0x000007ff
   136e0:	000000f2 	.word	0x000000f2
   136e4:	000004f0 	.word	0x000004f0
   136e8:	00000522 	.word	0x00000522
   136ec:	0000052c 	.word	0x0000052c
   136f0:	0000053a 	.word	0x0000053a
   136f4:	0000054a 	.word	0x0000054a
   136f8:	00000582 	.word	0x00000582
   136fc:	000005a2 	.word	0x000005a2
   13700:	000005d8 	.word	0x000005d8
   13704:	000008d0 	.word	0x000008d0
   13708:	000009f8 	.word	0x000009f8
   1370c:	00000aba 	.word	0x00000aba
   13710:	00000bac 	.word	0x00000bac
   13714:	00000db6 	.word	0x00000db6
   13718:	00000df6 	.word	0x00000df6
   1371c:	00013c1c 	.word	0x00013c1c
   13720:	00013c20 	.word	0x00013c20
   13724:	00013c24 	.word	0x00013c24
   13728:	00013c28 	.word	0x00013c28
   1372c:	00013c34 	.word	0x00013c34
   13730:	33d3e608 	.word	0x33d3e608
   13734:	00000003 	.word	0x00000003
   13738:	23230a0d 	.word	0x23230a0d
   1373c:	23232323 	.word	0x23232323
   13740:	3d3d3d20 	.word	0x3d3d3d20
   13744:	4d203d3d 	.word	0x4d203d3d
   13748:	2d454d4c 	.word	0x2d454d4c
   1374c:	75716552 	.word	0x75716552
   13750:	20747365 	.word	0x20747365
   13754:	4c4d202d 	.word	0x4c4d202d
   13758:	4a5f454d 	.word	0x4a5f454d
   1375c:	204e494f 	.word	0x204e494f
   13760:	3d3d3d3d 	.word	0x3d3d3d3d
   13764:	23232320 	.word	0x23232320
   13768:	0d232323 	.word	0x0d232323
   1376c:	00000000 	.word	0x00000000
   13770:	54415453 	.word	0x54415453
   13774:	20205355 	.word	0x20205355
   13778:	20202020 	.word	0x20202020
   1377c:	7325203a 	.word	0x7325203a
   13780:	00000a0d 	.word	0x00000a0d
   13784:	23232323 	.word	0x23232323
   13788:	3d202323 	.word	0x3d202323
   1378c:	3d3d3d3d 	.word	0x3d3d3d3d
   13790:	494f4a20 	.word	0x494f4a20
   13794:	474e494e 	.word	0x474e494e
   13798:	3d3d3d20 	.word	0x3d3d3d20
   1379c:	2323203d 	.word	0x2323203d
   137a0:	23232323 	.word	0x23232323
   137a4:	0000000d 	.word	0x0000000d
   137a8:	23230a0d 	.word	0x23230a0d
   137ac:	23232323 	.word	0x23232323
   137b0:	3d3d3d20 	.word	0x3d3d3d20
   137b4:	4d203d3d 	.word	0x4d203d3d
   137b8:	2d454d4c 	.word	0x2d454d4c
   137bc:	69646e49 	.word	0x69646e49
   137c0:	69746163 	.word	0x69746163
   137c4:	3d206e6f 	.word	0x3d206e6f
   137c8:	203d3d3d 	.word	0x203d3d3d
   137cc:	23232323 	.word	0x23232323
   137d0:	000d2323 	.word	0x000d2323
   137d4:	23230a0d 	.word	0x23230a0d
   137d8:	23232323 	.word	0x23232323
   137dc:	3d3d3d20 	.word	0x3d3d3d20
   137e0:	4d203d3d 	.word	0x4d203d3d
   137e4:	2d454d4c 	.word	0x2d454d4c
   137e8:	666e6f43 	.word	0x666e6f43
   137ec:	206d7269 	.word	0x206d7269
   137f0:	3d3d3d3d 	.word	0x3d3d3d3d
   137f4:	23232320 	.word	0x23232320
   137f8:	0d232323 	.word	0x0d232323
   137fc:	00000000 	.word	0x00000000
   13800:	23232323 	.word	0x23232323
   13804:	3d202323 	.word	0x3d202323
   13808:	3d3d3d3d 	.word	0x3d3d3d3d
   1380c:	494f4a20 	.word	0x494f4a20
   13810:	2044454e 	.word	0x2044454e
   13814:	3d3d3d3d 	.word	0x3d3d3d3d
   13818:	23232320 	.word	0x23232320
   1381c:	0d232323 	.word	0x0d232323
   13820:	00000000 	.word	0x00000000
   13824:	544f0a0d 	.word	0x544f0a0d
   13828:	0a0d4141 	.word	0x0a0d4141
   1382c:	0000000d 	.word	0x0000000d
   13830:	41766544 	.word	0x41766544
   13834:	20726464 	.word	0x20726464
   13838:	20202020 	.word	0x20202020
   1383c:	3025203a 	.word	0x3025203a
   13840:	0d586c38 	.word	0x0d586c38
   13844:	0000000a 	.word	0x0000000a
   13848:	00000d0a 	.word	0x00000d0a
   1384c:	41544144 	.word	0x41544144
   13850:	54415220 	.word	0x54415220
   13854:	20202045 	.word	0x20202045
   13858:	5244203a 	.word	0x5244203a
   1385c:	0d64255f 	.word	0x0d64255f
   13860:	0000000a 	.word	0x0000000a
   13864:	58323025 	.word	0x58323025
   13868:	00000020 	.word	0x00000020
   1386c:	23230a0d 	.word	0x23230a0d
   13870:	23232323 	.word	0x23232323
   13874:	3d3d3d20 	.word	0x3d3d3d20
   13878:	4d203d3d 	.word	0x4d203d3d
   1387c:	2d535043 	.word	0x2d535043
   13880:	69646e49 	.word	0x69646e49
   13884:	69746163 	.word	0x69746163
   13888:	3d206e6f 	.word	0x3d206e6f
   1388c:	203d3d3d 	.word	0x203d3d3d
   13890:	23232323 	.word	0x23232323
   13894:	000d2323 	.word	0x000d2323
   13898:	23230a0d 	.word	0x23230a0d
   1389c:	23232323 	.word	0x23232323
   138a0:	3d3d3d20 	.word	0x3d3d3d20
   138a4:	4d203d3d 	.word	0x4d203d3d
   138a8:	2d454d4c 	.word	0x2d454d4c
   138ac:	75716552 	.word	0x75716552
   138b0:	20747365 	.word	0x20747365
   138b4:	4c4d202d 	.word	0x4c4d202d
   138b8:	4c5f454d 	.word	0x4c5f454d
   138bc:	5f4b4e49 	.word	0x5f4b4e49
   138c0:	43454843 	.word	0x43454843
   138c4:	3d3d204b 	.word	0x3d3d204b
   138c8:	23203d3d 	.word	0x23203d3d
   138cc:	23232323 	.word	0x23232323
   138d0:	00000d23 	.word	0x00000d23
   138d4:	23230a0d 	.word	0x23230a0d
   138d8:	23232323 	.word	0x23232323
   138dc:	3d3d3d20 	.word	0x3d3d3d20
   138e0:	4d203d3d 	.word	0x4d203d3d
   138e4:	2d454d4c 	.word	0x2d454d4c
   138e8:	75716552 	.word	0x75716552
   138ec:	20747365 	.word	0x20747365
   138f0:	4c4d202d 	.word	0x4c4d202d
   138f4:	545f454d 	.word	0x545f454d
   138f8:	20574358 	.word	0x20574358
   138fc:	3d3d3d3d 	.word	0x3d3d3d3d
   13900:	23232320 	.word	0x23232320
   13904:	0d232323 	.word	0x0d232323
   13908:	00000000 	.word	0x00000000
   1390c:	23230a0d 	.word	0x23230a0d
   13910:	23232323 	.word	0x23232323
   13914:	3d3d3d20 	.word	0x3d3d3d20
   13918:	4d203d3d 	.word	0x4d203d3d
   1391c:	2d454d4c 	.word	0x2d454d4c
   13920:	75716552 	.word	0x75716552
   13924:	20747365 	.word	0x20747365
   13928:	4c4d202d 	.word	0x4c4d202d
   1392c:	545f454d 	.word	0x545f454d
   13930:	31574358 	.word	0x31574358
   13934:	3d3d3d20 	.word	0x3d3d3d20
   13938:	2323203d 	.word	0x2323203d
   1393c:	23232323 	.word	0x23232323
   13940:	0000000d 	.word	0x0000000d
   13944:	23230a0d 	.word	0x23230a0d
   13948:	23232323 	.word	0x23232323
   1394c:	3d3d3d20 	.word	0x3d3d3d20
   13950:	44203d3d 	.word	0x44203d3d
   13954:	4c4e574f 	.word	0x4c4e574f
   13958:	204b4e49 	.word	0x204b4e49
   1395c:	4d415246 	.word	0x4d415246
   13960:	6c252045 	.word	0x6c252045
   13964:	3d3d2075 	.word	0x3d3d2075
   13968:	23203d3d 	.word	0x23203d3d
   1396c:	23232323 	.word	0x23232323
   13970:	000a0d23 	.word	0x000a0d23
   13974:	57205852 	.word	0x57205852
   13978:	4f444e49 	.word	0x4f444e49
   1397c:	20202057 	.word	0x20202057
   13980:	7325203a 	.word	0x7325203a
   13984:	00000a0d 	.word	0x00000a0d
   13988:	50205852 	.word	0x50205852
   1398c:	2054524f 	.word	0x2054524f
   13990:	20202020 	.word	0x20202020
   13994:	6425203a 	.word	0x6425203a
   13998:	00000a0d 	.word	0x00000a0d
   1399c:	44205852 	.word	0x44205852
   139a0:	20415441 	.word	0x20415441
   139a4:	20202020 	.word	0x20202020
   139a8:	000d203a 	.word	0x000d203a
   139ac:	52205852 	.word	0x52205852
   139b0:	20495353 	.word	0x20495353
   139b4:	20202020 	.word	0x20202020
   139b8:	6425203a 	.word	0x6425203a
   139bc:	00000a0d 	.word	0x00000a0d
   139c0:	53205852 	.word	0x53205852
   139c4:	2020524e 	.word	0x2020524e
   139c8:	20202020 	.word	0x20202020
   139cc:	6c25203a 	.word	0x6c25203a
   139d0:	000a0d64 	.word	0x000a0d64
   139d4:	004b4341 	.word	0x004b4341
   139d8:	4b43414e 	.word	0x4b43414e
   139dc:	00000000 	.word	0x00000000
   139e0:	23230a0d 	.word	0x23230a0d
   139e4:	23232323 	.word	0x23232323
   139e8:	3d3d3d20 	.word	0x3d3d3d20
   139ec:	4d203d3d 	.word	0x4d203d3d
   139f0:	2d535043 	.word	0x2d535043
   139f4:	666e6f43 	.word	0x666e6f43
   139f8:	206d7269 	.word	0x206d7269
   139fc:	3d3d3d3d 	.word	0x3d3d3d3d
   13a00:	23232320 	.word	0x23232320
   13a04:	0d232323 	.word	0x0d232323
   13a08:	00000000 	.word	0x00000000
   13a0c:	23230a0d 	.word	0x23230a0d
   13a10:	23232323 	.word	0x23232323
   13a14:	3d3d3d20 	.word	0x3d3d3d20
   13a18:	55203d3d 	.word	0x55203d3d
   13a1c:	4e494c50 	.word	0x4e494c50
   13a20:	5246204b 	.word	0x5246204b
   13a24:	20454d41 	.word	0x20454d41
   13a28:	20756c25 	.word	0x20756c25
   13a2c:	3d3d3d3d 	.word	0x3d3d3d3d
   13a30:	23232320 	.word	0x23232320
   13a34:	0d232323 	.word	0x0d232323
   13a38:	0000000a 	.word	0x0000000a
   13a3c:	53414c43 	.word	0x53414c43
   13a40:	20202053 	.word	0x20202053
   13a44:	20202020 	.word	0x20202020
   13a48:	6325203a 	.word	0x6325203a
   13a4c:	00000a0d 	.word	0x00000a0d
   13a50:	50205854 	.word	0x50205854
   13a54:	2054524f 	.word	0x2054524f
   13a58:	20202020 	.word	0x20202020
   13a5c:	6425203a 	.word	0x6425203a
   13a60:	00000a0d 	.word	0x00000a0d
   13a64:	44205854 	.word	0x44205854
   13a68:	20415441 	.word	0x20415441
   13a6c:	20202020 	.word	0x20202020
   13a70:	0000203a 	.word	0x0000203a
   13a74:	464e4f43 	.word	0x464e4f43
   13a78:	454d5249 	.word	0x454d5249
   13a7c:	202d2044 	.word	0x202d2044
   13a80:	0a0d7325 	.word	0x0a0d7325
   13a84:	00000000 	.word	0x00000000
   13a88:	4f434e55 	.word	0x4f434e55
   13a8c:	5249464e 	.word	0x5249464e
   13a90:	0d44454d 	.word	0x0d44454d
   13a94:	00000000 	.word	0x00000000
   13a98:	204c2f55 	.word	0x204c2f55
   13a9c:	51455246 	.word	0x51455246
   13aa0:	20202020 	.word	0x20202020
   13aa4:	6c25203a 	.word	0x6c25203a
   13aa8:	000a0d75 	.word	0x000a0d75
   13aac:	50205854 	.word	0x50205854
   13ab0:	5245574f 	.word	0x5245574f
   13ab4:	20202020 	.word	0x20202020
   13ab8:	6425203a 	.word	0x6425203a
   13abc:	00000a0d 	.word	0x00000a0d
   13ac0:	4e414843 	.word	0x4e414843
   13ac4:	204c454e 	.word	0x204c454e
   13ac8:	4b53414d 	.word	0x4b53414d
   13acc:	0000203a 	.word	0x0000203a
   13ad0:	58343025 	.word	0x58343025
   13ad4:	00000020 	.word	0x00000020
   13ad8:	00434241 	.word	0x00434241
   13adc:	23232323 	.word	0x23232323
   13ae0:	3d202323 	.word	0x3d202323
   13ae4:	3d3d3d3d 	.word	0x3d3d3d3d
   13ae8:	616c4320 	.word	0x616c4320
   13aec:	20437373 	.word	0x20437373
   13af0:	6f6d6564 	.word	0x6f6d6564
   13af4:	70706120 	.word	0x70706120
   13af8:	6163696c 	.word	0x6163696c
   13afc:	6e6f6974 	.word	0x6e6f6974
   13b00:	2e317620 	.word	0x2e317620
   13b04:	43522e30 	.word	0x43522e30
   13b08:	3d3d2031 	.word	0x3d3d2031
   13b0c:	23203d3d 	.word	0x23203d3d
   13b10:	23232323 	.word	0x23232323
   13b14:	0d0a0d23 	.word	0x0d0a0d23
   13b18:	00000000 	.word	0x00000000
   13b1c:	23230a0d 	.word	0x23230a0d
   13b20:	23232323 	.word	0x23232323
   13b24:	3d3d3d20 	.word	0x3d3d3d20
   13b28:	43203d3d 	.word	0x43203d3d
   13b2c:	20535854 	.word	0x20535854
   13b30:	54534552 	.word	0x54534552
   13b34:	4445524f 	.word	0x4445524f
   13b38:	3d3d3d20 	.word	0x3d3d3d20
   13b3c:	2323203d 	.word	0x2323203d
   13b40:	23232323 	.word	0x23232323
   13b44:	000d0a0d 	.word	0x000d0a0d
   13b48:	45766544 	.word	0x45766544
   13b4c:	20206975 	.word	0x20206975
   13b50:	20202020 	.word	0x20202020
   13b54:	3025203a 	.word	0x3025203a
   13b58:	00005832 	.word	0x00005832
   13b5c:	3230252d 	.word	0x3230252d
   13b60:	00000058 	.word	0x00000058
   13b64:	45707041 	.word	0x45707041
   13b68:	20206975 	.word	0x20206975
   13b6c:	20202020 	.word	0x20202020
   13b70:	3025203a 	.word	0x3025203a
   13b74:	00005832 	.word	0x00005832
   13b78:	4b707041 	.word	0x4b707041
   13b7c:	20207965 	.word	0x20207965
   13b80:	20202020 	.word	0x20202020
   13b84:	3025203a 	.word	0x3025203a
   13b88:	00005832 	.word	0x00005832
   13b8c:	32302520 	.word	0x32302520
   13b90:	00000058 	.word	0x00000058
   13b94:	42410a0d 	.word	0x42410a0d
   13b98:	0d0a0d50 	.word	0x0d0a0d50
   13b9c:	00000000 	.word	0x00000000
   13ba0:	536b774e 	.word	0x536b774e
   13ba4:	2079654b 	.word	0x2079654b
   13ba8:	20202020 	.word	0x20202020
   13bac:	3025203a 	.word	0x3025203a
   13bb0:	00005832 	.word	0x00005832
   13bb4:	53707041 	.word	0x53707041
   13bb8:	2079654b 	.word	0x2079654b
   13bbc:	20202020 	.word	0x20202020
   13bc0:	3025203a 	.word	0x3025203a
   13bc4:	00005832 	.word	0x00005832
   13bc8:	23230a0d 	.word	0x23230a0d
   13bcc:	23232323 	.word	0x23232323
   13bd0:	3d3d3d20 	.word	0x3d3d3d20
   13bd4:	4d203d3d 	.word	0x4d203d3d
   13bd8:	2d535043 	.word	0x2d535043
   13bdc:	75716552 	.word	0x75716552
   13be0:	20747365 	.word	0x20747365
   13be4:	3d3d3d3d 	.word	0x3d3d3d3d
   13be8:	23232320 	.word	0x23232320
   13bec:	0d232323 	.word	0x0d232323
   13bf0:	00000000 	.word	0x00000000
   13bf4:	23230a0d 	.word	0x23230a0d
   13bf8:	23232323 	.word	0x23232323
   13bfc:	3d3d3d20 	.word	0x3d3d3d20
   13c00:	43203d3d 	.word	0x43203d3d
   13c04:	20535854 	.word	0x20535854
   13c08:	524f5453 	.word	0x524f5453
   13c0c:	3d204445 	.word	0x3d204445
   13c10:	203d3d3d 	.word	0x203d3d3d
   13c14:	23232323 	.word	0x23232323
   13c18:	000d2323 	.word	0x000d2323
   13c1c:	00000031 	.word	0x00000031
   13c20:	00000032 	.word	0x00000032
   13c24:	00000043 	.word	0x00000043
   13c28:	676e6950 	.word	0x676e6950
   13c2c:	6f6c532d 	.word	0x6f6c532d
   13c30:	00000074 	.word	0x00000074
   13c34:	746c754d 	.word	0x746c754d
   13c38:	73616369 	.word	0x73616369
   13c3c:	69502074 	.word	0x69502074
   13c40:	532d676e 	.word	0x532d676e
   13c44:	00746f6c 	.word	0x00746f6c
   13c48:	00004b4f 	.word	0x00004b4f
   13c4c:	6f727245 	.word	0x6f727245
   13c50:	00000072 	.word	0x00000072
   13c54:	74207854 	.word	0x74207854
   13c58:	6f656d69 	.word	0x6f656d69
   13c5c:	00007475 	.word	0x00007475
   13c60:	31207852 	.word	0x31207852
   13c64:	6d697420 	.word	0x6d697420
   13c68:	74756f65 	.word	0x74756f65
   13c6c:	00000000 	.word	0x00000000
   13c70:	32207852 	.word	0x32207852
   13c74:	6d697420 	.word	0x6d697420
   13c78:	74756f65 	.word	0x74756f65
   13c7c:	00000000 	.word	0x00000000
   13c80:	20317852 	.word	0x20317852
   13c84:	6f727265 	.word	0x6f727265
   13c88:	00000072 	.word	0x00000072
   13c8c:	20327852 	.word	0x20327852
   13c90:	6f727265 	.word	0x6f727265
   13c94:	00000072 	.word	0x00000072
   13c98:	6e696f4a 	.word	0x6e696f4a
   13c9c:	69616620 	.word	0x69616620
   13ca0:	0064656c 	.word	0x0064656c
   13ca4:	6e776f44 	.word	0x6e776f44
   13ca8:	6b6e696c 	.word	0x6b6e696c
   13cac:	70657220 	.word	0x70657220
   13cb0:	65746165 	.word	0x65746165
   13cb4:	00000064 	.word	0x00000064
   13cb8:	44207854 	.word	0x44207854
   13cbc:	61702052 	.word	0x61702052
   13cc0:	616f6c79 	.word	0x616f6c79
   13cc4:	69732064 	.word	0x69732064
   13cc8:	6520657a 	.word	0x6520657a
   13ccc:	726f7272 	.word	0x726f7272
   13cd0:	00000000 	.word	0x00000000
   13cd4:	6e776f44 	.word	0x6e776f44
   13cd8:	6b6e696c 	.word	0x6b6e696c
   13cdc:	6f6f7420 	.word	0x6f6f7420
   13ce0:	6e616d20 	.word	0x6e616d20
   13ce4:	72662079 	.word	0x72662079
   13ce8:	73656d61 	.word	0x73656d61
   13cec:	736f6c20 	.word	0x736f6c20
   13cf0:	00000073 	.word	0x00000073
   13cf4:	72646441 	.word	0x72646441
   13cf8:	20737365 	.word	0x20737365
   13cfc:	6c696166 	.word	0x6c696166
   13d00:	00000000 	.word	0x00000000
   13d04:	2043494d 	.word	0x2043494d
   13d08:	6c696166 	.word	0x6c696166
   13d0c:	00000000 	.word	0x00000000
   13d10:	746c754d 	.word	0x746c754d
   13d14:	73616369 	.word	0x73616369
   13d18:	61662074 	.word	0x61662074
   13d1c:	00006c69 	.word	0x00006c69
   13d20:	63616542 	.word	0x63616542
   13d24:	6c206e6f 	.word	0x6c206e6f
   13d28:	656b636f 	.word	0x656b636f
   13d2c:	00000064 	.word	0x00000064
   13d30:	63616542 	.word	0x63616542
   13d34:	6c206e6f 	.word	0x6c206e6f
   13d38:	0074736f 	.word	0x0074736f
   13d3c:	63616542 	.word	0x63616542
   13d40:	6e206e6f 	.word	0x6e206e6f
   13d44:	6620746f 	.word	0x6620746f
   13d48:	646e756f 	.word	0x646e756f
   13d4c:	00000000 	.word	0x00000000
   13d50:	79737542 	.word	0x79737542
   13d54:	00000000 	.word	0x00000000
   13d58:	76726553 	.word	0x76726553
   13d5c:	20656369 	.word	0x20656369
   13d60:	6e6b6e75 	.word	0x6e6b6e75
   13d64:	006e776f 	.word	0x006e776f
   13d68:	61726150 	.word	0x61726150
   13d6c:	6574656d 	.word	0x6574656d
   13d70:	6e692072 	.word	0x6e692072
   13d74:	696c6176 	.word	0x696c6176
   13d78:	00000064 	.word	0x00000064
   13d7c:	71657246 	.word	0x71657246
   13d80:	636e6575 	.word	0x636e6575
   13d84:	6e692079 	.word	0x6e692079
   13d88:	696c6176 	.word	0x696c6176
   13d8c:	00000064 	.word	0x00000064
   13d90:	61746144 	.word	0x61746144
   13d94:	65746172 	.word	0x65746172
   13d98:	766e6920 	.word	0x766e6920
   13d9c:	64696c61 	.word	0x64696c61
   13da0:	00000000 	.word	0x00000000
   13da4:	71657246 	.word	0x71657246
   13da8:	636e6575 	.word	0x636e6575
   13dac:	726f2079 	.word	0x726f2079
   13db0:	74616420 	.word	0x74616420
   13db4:	74617261 	.word	0x74617261
   13db8:	6e692065 	.word	0x6e692065
   13dbc:	696c6176 	.word	0x696c6176
   13dc0:	00000064 	.word	0x00000064
   13dc4:	6e206f4e 	.word	0x6e206f4e
   13dc8:	6f777465 	.word	0x6f777465
   13dcc:	6a206b72 	.word	0x6a206b72
   13dd0:	656e696f 	.word	0x656e696f
   13dd4:	00000064 	.word	0x00000064
   13dd8:	676e654c 	.word	0x676e654c
   13ddc:	65206874 	.word	0x65206874
   13de0:	726f7272 	.word	0x726f7272
   13de4:	00000000 	.word	0x00000000
   13de8:	69676552 	.word	0x69676552
   13dec:	6e206e6f 	.word	0x6e206e6f
   13df0:	7320746f 	.word	0x7320746f
   13df4:	6f707075 	.word	0x6f707075
   13df8:	64657472 	.word	0x64657472
   13dfc:	00000000 	.word	0x00000000
   13e00:	70696b53 	.word	0x70696b53
   13e04:	20646570 	.word	0x20646570
   13e08:	20505041 	.word	0x20505041
   13e0c:	61746164 	.word	0x61746164
   13e10:	00000000 	.word	0x00000000
   13e14:	79747544 	.word	0x79747544
   13e18:	6379632d 	.word	0x6379632d
   13e1c:	7220656c 	.word	0x7220656c
   13e20:	72747365 	.word	0x72747365
   13e24:	65746369 	.word	0x65746369
   13e28:	00000064 	.word	0x00000064
   13e2c:	63206f4e 	.word	0x63206f4e
   13e30:	6e6e6168 	.word	0x6e6e6168
   13e34:	66206c65 	.word	0x66206c65
   13e38:	646e756f 	.word	0x646e756f
   13e3c:	00000000 	.word	0x00000000
   13e40:	66206f4e 	.word	0x66206f4e
   13e44:	20656572 	.word	0x20656572
   13e48:	6e616863 	.word	0x6e616863
   13e4c:	206c656e 	.word	0x206c656e
   13e50:	6e756f66 	.word	0x6e756f66
   13e54:	00000064 	.word	0x00000064
   13e58:	79737542 	.word	0x79737542
   13e5c:	61656220 	.word	0x61656220
   13e60:	206e6f63 	.word	0x206e6f63
   13e64:	65736572 	.word	0x65736572
   13e68:	64657672 	.word	0x64657672
   13e6c:	6d697420 	.word	0x6d697420
   13e70:	00000065 	.word	0x00000065
   13e74:	79737542 	.word	0x79737542
   13e78:	6e697020 	.word	0x6e697020
   13e7c:	6c732d67 	.word	0x6c732d67
   13e80:	7720746f 	.word	0x7720746f
   13e84:	6f646e69 	.word	0x6f646e69
   13e88:	69742077 	.word	0x69742077
   13e8c:	0000656d 	.word	0x0000656d
   13e90:	79737542 	.word	0x79737542
   13e94:	6c707520 	.word	0x6c707520
   13e98:	206b6e69 	.word	0x206b6e69
   13e9c:	6c6c6f63 	.word	0x6c6c6f63
   13ea0:	6f697369 	.word	0x6f697369
   13ea4:	0000006e 	.word	0x0000006e
   13ea8:	70797243 	.word	0x70797243
   13eac:	65206f74 	.word	0x65206f74
   13eb0:	726f7272 	.word	0x726f7272
   13eb4:	00000000 	.word	0x00000000
   13eb8:	746e4346 	.word	0x746e4346
   13ebc:	6e616820 	.word	0x6e616820
   13ec0:	72656c64 	.word	0x72656c64
   13ec4:	72726520 	.word	0x72726520
   13ec8:	0000726f 	.word	0x0000726f
   13ecc:	2043414d 	.word	0x2043414d
   13ed0:	6d6d6f63 	.word	0x6d6d6f63
   13ed4:	20646e61 	.word	0x20646e61
   13ed8:	6f727265 	.word	0x6f727265
   13edc:	00000072 	.word	0x00000072
   13ee0:	73616c43 	.word	0x73616c43
   13ee4:	65204273 	.word	0x65204273
   13ee8:	726f7272 	.word	0x726f7272
   13eec:	00000000 	.word	0x00000000
   13ef0:	666e6f43 	.word	0x666e6f43
   13ef4:	206d7269 	.word	0x206d7269
   13ef8:	75657571 	.word	0x75657571
   13efc:	72652065 	.word	0x72652065
   13f00:	00726f72 	.word	0x00726f72
   13f04:	6e6b6e55 	.word	0x6e6b6e55
   13f08:	206e776f 	.word	0x206e776f
   13f0c:	6f727265 	.word	0x6f727265
   13f10:	00000072 	.word	0x00000072
   13f14:	622f2e2e 	.word	0x622f2e2e
   13f18:	6472616f 	.word	0x6472616f
   13f1c:	75636d2f 	.word	0x75636d2f
   13f20:	6d61732f 	.word	0x6d61732f
   13f24:	2f31326c 	.word	0x2f31326c
   13f28:	2f6c7068 	.word	0x2f6c7068
   13f2c:	74726f70 	.word	0x74726f70
   13f30:	6c70682f 	.word	0x6c70682f
   13f34:	6970675f 	.word	0x6970675f
   13f38:	61625f6f 	.word	0x61625f6f
   13f3c:	682e6573 	.word	0x682e6573
   13f40:	00000000 	.word	0x00000000
   13f44:	622f2e2e 	.word	0x622f2e2e
   13f48:	6472616f 	.word	0x6472616f
   13f4c:	75636d2f 	.word	0x75636d2f
   13f50:	6d61732f 	.word	0x6d61732f
   13f54:	2f31326c 	.word	0x2f31326c
   13f58:	2f6c6168 	.word	0x2f6c6168
   13f5c:	2f637273 	.word	0x2f637273
   13f60:	5f6c6168 	.word	0x5f6c6168
   13f64:	632e6f69 	.word	0x632e6f69
   13f68:	00000000 	.word	0x00000000
   13f6c:	622f2e2e 	.word	0x622f2e2e
   13f70:	6472616f 	.word	0x6472616f
   13f74:	75636d2f 	.word	0x75636d2f
   13f78:	6d61732f 	.word	0x6d61732f
   13f7c:	2f31326c 	.word	0x2f31326c
   13f80:	2f6c6168 	.word	0x2f6c6168
   13f84:	2f637273 	.word	0x2f637273
   13f88:	5f6c6168 	.word	0x5f6c6168
   13f8c:	5f697073 	.word	0x5f697073
   13f90:	79735f6d 	.word	0x79735f6d
   13f94:	632e636e 	.word	0x632e636e
   13f98:	00000000 	.word	0x00000000
   13f9c:	622f2e2e 	.word	0x622f2e2e
   13fa0:	6472616f 	.word	0x6472616f
   13fa4:	75636d2f 	.word	0x75636d2f
   13fa8:	6d61732f 	.word	0x6d61732f
   13fac:	2f31326c 	.word	0x2f31326c
   13fb0:	2f6c6168 	.word	0x2f6c6168
   13fb4:	2f637273 	.word	0x2f637273
   13fb8:	5f6c6168 	.word	0x5f6c6168
   13fbc:	72617375 	.word	0x72617375
   13fc0:	79735f74 	.word	0x79735f74
   13fc4:	632e636e 	.word	0x632e636e
   13fc8:	00000000 	.word	0x00000000

00013fcc <_map>:
   13fcc:	00000004 00000014 00000005 00000015     ................
   13fdc:	0000000c 0000002c 0000000d 0000002d     ....,.......-...
   13fec:	0000000e 0000002e 0000000f 0000002f     ............/...
   13ffc:	622f2e2e 6472616f 75636d2f 6d61732f     ../board/mcu/sam
   1400c:	2f31326c 2f6c7068 2f636965 5f6c7068     l21/hpl/eic/hpl_
   1401c:	2e636965 00000063                       eic.c...

00014024 <_i2cms>:
	...

0001403c <sercomspi_regs>:
   1403c:	0001000c 00020000 00000000 01ff0003     ................
   1404c:	00000005 622f2e2e 6472616f 75636d2f     ....../board/mcu
   1405c:	6d61732f 2f31326c 2f6c7068 63726573     /saml21/hpl/serc
   1406c:	682f6d6f 735f6c70 6f637265 00632e6d     om/hpl_sercom.c.

0001407c <Radio>:
   1407c:	0000a225 000098b9 0000a199 00009939     %...........9...
   1408c:	0000a2bd 0000a329 0000a37d 0000a6d5     ....)...}.......
   1409c:	00002379 00009aa1 0000ab8d 00009d85     y#..............
   140ac:	00009db5 00009de5 0000a155 0000a96d     ........U...m...
   140bc:	00009cf1 0000991d 000099dd 000098c5     ................
   140cc:	00009985 0000b121 0000b161 0000b299     ....!...a.......
	...
   140e8:	0000395a 00003984 000039ae 00003a96     Z9...9...9...:..
   140f8:	00003ac8 00003b6c 00003b96 00003bfa     .:..l;...;...;..
   14108:	00003c4a 00003d72 00003d48 00003dd8     J<..r=..H=...=..
   14118:	00003f3e 00003e0e 00003eac 00003fce     >?...>...>...?..
   14128:	00003fe4 0000401e 0000403e 00003934     .?...@..>@..49..
   14138:	00003934 00003934 00003934 00003934     49..49..49..49..
   14148:	00003934 00003934 00003934 00003934     49..49..49..49..
   14158:	00003934 00003934 00003934 00003f2a     49..49..49..*?..
   14168:	0000596e 00005980 00005994 000059a6     nY...Y...Y...Y..
   14178:	000059b6 00005ba4 00005ba4 00005ba4     .Y...[...[...[..
   14188:	00005ba4 00005ba4 00005ba4 00005ba4     .[...[...[...[..
   14198:	00005ba4 00005ba4 00005ba4 00005ba4     .[...[...[...[..
   141a8:	00005ba4 00005ba4 00005ba4 00005ba4     .[...[...[...[..
   141b8:	00005ba4 00005ba4 00005ba4 00005ba4     .[...[...[...[..
   141c8:	00005ba4 00005ba4 000059c6 000059d8     .[...[...Y...Y..
   141d8:	000059ec 00005a06 00005a1a 00005a48     .Y...Z...Z..HZ..
   141e8:	00005a2e 00005a62 00005a74 00005a86     .Z..bZ..tZ...Z..
   141f8:	00005a98 00005aaa 00005abc 00005ace     .Z...Z...Z...Z..
   14208:	00005ae0 00005b04 00005af2 00005b16     .Z...[...Z...[..
   14218:	00005b28 00005b3a 00005b58 00005b4e     ([..:[..X[..N[..
   14228:	00005ba4 00005b68 00005b7c 00005b90     .[..h[..|[...[..
   14238:	00005bf2 00005cce 00005ce8 00005d08     .[...\...\...]..
   14248:	00005d18 00005d28 00005d40 00005d58     .]..(]..@]..X]..
   14258:	00005d70 00005d88 00005da0 00005db8     p]...]...]...]..
   14268:	00005dd0 00005dea 00005e04 00005e1e     .]...]...^...^..
   14278:	00005e38 00005e52 00005e6c 00005e86     8^..R^..l^...^..
   14288:	00005ea0 00005eba 00005f00 00005f1a     .^...^..._..._..
   14298:	00005f34 00005f4e 00005f68 00005f84     4_..N_..h_..._..
   142a8:	00006302 00005f98 0000601a 00006078     .c..._...`..x`..
   142b8:	00006054 0000609c 000060b8 000060ca     T`...`...`...`..
   142c8:	000060dc 000060ee 00006100 00006112     .`...`...a...a..
   142d8:	00006142 000061ac 0000617c 000061de     Ba...a..|a...a..
   142e8:	000061f2 00006206 0000621a 0000622a     .a...b...b..*b..
   142f8:	0000623a 0000628c 000062c6 000063e4     :b...b...b...c..
   14308:	0000647e 000064a6 000064c2 000064f4     ~d...d...d...d..
   14318:	0000651c 00006642 00006642 00006642     .e..Bf..Bf..Bf..
   14328:	00006548 00006642 000065e8 00006578     He..Bf...e..xe..
   14338:	000065b8                                .e..

0001433c <LoRaMacMaxEirpTable>:
   1433c:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1434c:	00006baa 00006bc2 00006baa 00006baa     .k...k...k...k..
   1435c:	00006baa 00006bc2 00006baa 00006baa     .k...k...k...k..
   1436c:	00006bc2 00006baa 00006bc2 00006bc2     .k...k...k...k..
   1437c:	00006baa 00006baa 00006baa 00006baa     .k...k...k...k..
   1438c:	00006baa 00006baa 00006baa 00006baa     .k...k...k...k..
   1439c:	00006baa 00006baa 00006baa 00006baa     .k...k...k...k..
   143ac:	00006baa 00006baa 00006baa 00006baa     .k...k...k...k..
   143bc:	00006baa 00006baa 00006baa 00006baa     .k...k...k...k..
   143cc:	00006bc2                                .k..

000143d0 <CIDsStickyAnsCmds>:
   143d0:	0008050a 00007cf8 00007c94 00007cbc     .....|...|...|..
   143e0:	00007cca 00007cd8 00007ce0 00007ce8     .|...|...|...|..
   143f0:	00007cf0 00007de2 00007df0 00007df8     .|...}...}...}..
   14400:	00007e00 00007e08 00007e10 00007e18     .~...~...~...~..
   14410:	00007ede 00007f16 00007f22 00007f2e     .~......".......
   14420:	00007eae 00007fbe 00007f8e 00007f9a     .~..............
   14430:	00007fa0 00007fa6 00007fac 00007fb2     ................
   14440:	00007fb8 00008ca4 00008caa 00008cb0     ................
   14450:	00008cbc 00008cca 00008cd0 00008cd6     ................
   14460:	00008cde 00008ce6 00008cec 00008cf2     ................
   14470:	00008cfa 00008c9a 00008d10 00008c9a     ................
   14480:	00008d16 00008d20 00008d2a 00008d30     .... ...*...0...
   14490:	00008c9a 00008c9a 00008d36 00008d3e     ........6...>...
   144a0:	00008c8a 00008c9a 00008c9a 00008c9a     ................
   144b0:	00008c9a 00008c9a 00008c9a 00008c9a     ................
   144c0:	00008c9a 00008c9a 00008c9a 00008c9a     ................
   144d0:	00008c9a 00008c9a 00008d44 00008d4a     ........D...J...
   144e0:	00008d56 00008c9a 00008c9a 00008d5c     V...........\...
   144f0:	00008eaa 00008ebe 00008ed2 00008ea6     ................
   14500:	00008ee6 00008ee6 00008ea6 00008ea6     ................
   14510:	00008ea6 00008ea6 00008efa              ............

0001451c <BandwidthsEU868>:
   1451c:	0001e848 0001e848 0001e848 0001e848     H...H...H...H...
   1452c:	0001e848 0001e848 0003d090 00000000     H...H...........

0001453c <DataratesEU868>:
   1453c:	090a0b0c 32070708                       .......2

00014544 <MaxPayloadOfDatarateEU868>:
   14544:	73333333 f2f2f2f2                       333s....

0001454c <MaxPayloadOfDatarateRepeaterEU868>:
   1454c:	73333333 dededede 33be27a0 00000000     333s.....'.3....
   1455c:	00000150 33c134e0 00000000 00000150     P....4.3....P...
   1456c:	33c44220 00000000 00000150 00009efc      B.3....P.......
   1457c:	00009f16 00009f30 00009f4a 00009f64     ....0...J...d...
   1458c:	00009f7e 00009f98 00009fa2 00009fac     ~...............

0001459c <RadioRegsInit>:
   1459c:	00230c00 0e001e0d 011a00d2 00aa1f00     ..#.............
   145ac:	27000724 c1280012 00942900 3000c12a     $..'..(..)..*..0
   145bc:	8f3500d8 00023b00 41000040 40230130     ..5..;..@..A0.#@

000145cc <FskBandwidths>:
   145cc:	00000a28 00000017 00000c1c 0000000f     (...............
   145dc:	00000f3c 00000007 00001450 00000016     <.......P.......
   145ec:	0000189c 0000000e 00001e78 00000006     ........x.......
   145fc:	000028a0 00000015 000030d4 0000000d     .(.......0......
   1460c:	00003cf0 00000005 00005140 00000014     .<......@Q......
   1461c:	000061a8 0000000c 00007a44 00000004     .a......Dz......
   1462c:	0000a2e4 00000013 0000c350 0000000b     ........P.......
   1463c:	0000f424 00000003 00014585 00000012     $........E......
   1464c:	000186a0 0000000a 0001e848 00000002     ........H.......
   1465c:	00028b2c 00000011 00030d40 00000009     ,.......@.......
   1466c:	0003d090 00000001 000493e0 00000000     ................

0001467c <sbox>:
   1467c:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   1468c:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   1469c:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   146ac:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   146bc:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   146cc:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   146dc:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   146ec:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   146fc:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   1470c:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   1471c:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   1472c:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   1473c:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   1474c:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   1475c:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   1476c:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0001477c <gfm2_sbox>:
   1477c:	f6eef8c6 91ded6ff 56ce0260 ec4db5e7     ........`..V..M.
   1478c:	fa891f8f fb8eb2ef 455fb341 9be45323     ........A._E#S..
   1479c:	4c3de175 83f57e6c f9d15168 2a62abe2     u.=Ll~..hQ....b*
   147ac:	9d469508 2f0a3730 df1b240e ea7f4ecd     ..F.07./.$...N..
   147bc:	34581d12 5bb4dc36 7db776a4 135edd52     ..X46..[.v.}R.^.
   147cc:	c100b9a6 b679e340 72678dd4 85b09894     ....@.y...gr....
   147dc:	ed4fc5bb 11669a86 fe04e98a 4b2578a0     ..O...f......x%K
   147ec:	05805da2 f170213f 42af7763 bffde520     .]..?!p.cw.B ...
   147fc:	c3261881 2e8835be 7afc5593 e632bac8     ..&..5...U.z..2.
   1480c:	a39e19c0 0b3b5444 286bc78c ad16bca7     ....DT;...k(....
   1481c:	147464db b8480c92 c443bd9f f2d33139     .dt...H...C.91..
   1482c:	da6e8bd5 499cb101 cff3acd8 1047f4ca     ..n....I......G.
   1483c:	5c4af06f 97735738 3ee8a1cb 0f0d6196     o.J\8Ws....>.a..
   1484c:	cc717ce0 1cf70690 69ae6ac2 273a9917     .|q......j.i..:'
   1485c:	222bebd9 3307a9d2 c9153c2d a550aa87     ..+"...3-<....P.
   1486c:	1a095903 d084d765 1e5a2982 2c6da87b     .Y..e....)Z.{.m,

0001487c <gfm3_sbox>:
   1487c:	8d9984a5 54b1bd0d 7da90350 9ae66219     .......TP..}.b..
   1488c:	87409d45 0bc9eb15 eafd67ec 5b96f7bf     E.@......g.....[
   1489c:	6aae1cc2 4f02415a 0834f45c 3f537393     ...jZA.O\.4..sS?
   148ac:	5e65520c b50fa128 3d9b3609 9fcd6926     .Re^(....6.=&i..
   148bc:	2e749e1b fbeeb22d ce614df6 97713e7b     ..t.-....Ma.{>q.
   148cc:	2c0068f5 edc81f60 4bd946be 4ae8d4de     .h.,`....F.K...J
   148dc:	16e52a6b 9455d7c5 810610cf e3ba44f0     k*....U......D..
   148ec:	8ac0fef3 0448bcad 6375c1df 6d0e1a30     ......H...uc0..m
   148fc:	2f35144c 39cca2e1 4782f257 952be7ac     L.5/...9W..G..+.
   1490c:	7fd198a0 83ab7e66 3cd329ca 761de279     ....f~...).<y..v
   1491c:	1e4e563b e46c0adb a6ef6e5d 8b37a4a8     ;VN...l.]n....7.
   1492c:	b7594332 e0d2648c 2507fab4 18e98eaf     2CY..d.....%....
   1493c:	726f88d5 51c7f124 219c7c23 8586dcdd     ..or$..Q#|.!....
   1494c:	aac44290 120105d8 d0f95fa3 b9275891     .B......._...X'.
   1495c:	33b31338 a78970bb 209222b6 7a78ff49     8..3.p...". I.xz
   1496c:	1780f88f b8c631da 1177b0c3 3ad6fccb     .....1....w....:
   1497c:	0000d760 0000d742 0000d6fc 0000d61a     `...B...........
   1498c:	0000d6fc 0000d734 0000d6fc 0000d61a     ....4...........
   1499c:	0000d742 0000d742 0000d734 0000d61a     B...B...4.......
   149ac:	0000d612 0000d612 0000d612 0000d978     ............x...
   149bc:	0000dfc0 0000de80 0000de80 0000de7c     ............|...
   149cc:	0000df98 0000df98 0000df8a 0000de7c     ............|...
   149dc:	0000df98 0000df8a 0000df98 0000de7c     ............|...
   149ec:	0000dfa0 0000dfa0 0000dfa0 0000e1a4     ................

000149fc <_global_impure_ptr>:
   149fc:	20000140 0000f382 0000f41c 0000f41c     @.. ............
   14a0c:	0000f3f4 0000f41c 0000f41c 0000f41c     ................
   14a1c:	0000f41c 0000f41c 0000f41c 0000f3fe     ................
   14a2c:	0000ef08 0000f41c 0000ee98 0000ef12     ................
   14a3c:	0000f41c 0000ef60 0000f160 0000f160     ....`...`...`...
   14a4c:	0000f160 0000f160 0000f160 0000f160     `...`...`...`...
   14a5c:	0000f160 0000f160 0000f160 0000f41c     `...`...`.......
   14a6c:	0000f41c 0000f41c 0000f41c 0000f41c     ................
   14a7c:	0000f41c 0000f41c 0000f41c 0000f41c     ................
   14a8c:	0000f41c 0000ef6a 0000f0c0 0000f41c     ....j...........
   14a9c:	0000f0c0 0000f41c 0000f41c 0000f41c     ................
   14aac:	0000f41c 0000f156 0000f41c 0000f41c     ....V...........
   14abc:	0000f344 0000f41c 0000f41c 0000f41c     D...............
   14acc:	0000f41c 0000f41c 0000f2ba 0000f41c     ................
   14adc:	0000f41c 0000f2e8 0000f41c 0000f41c     ................
   14aec:	0000f41c 0000f41c 0000f41c 0000f41c     ................
   14afc:	0000f41c 0000f41c 0000f41c 0000f41c     ................
   14b0c:	0000f25a 0000f290 0000f0c0 0000f0c0     Z...............
   14b1c:	0000f0c0 0000f29e 0000f290 0000f41c     ................
   14b2c:	0000f41c 0000f2a8 0000f41c 0000f1a2     ................
   14b3c:	0000f414 0000f1d0 0000f392 0000f41c     ................
   14b4c:	0000f39c 0000f41c 0000f418 0000f41c     ................
   14b5c:	0000f41c 0000f372 00464e49 00666e69     ....r...INF.inf.
   14b6c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   14b7c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   14b8c:	37363534 62613938 66656463 00000000     456789abcdef....
   14b9c:	6c756e28 0000296c 00000030              (null)..0...

00014ba8 <blanks.7223>:
   14ba8:	20202020 20202020 20202020 20202020                     

00014bb8 <zeroes.7224>:
   14bb8:	30303030 30303030 30303030 30303030     0000000000000000
   14bc8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   14bd8:	49534f50 00000058 0000002e 00000000     POSIX...........

00014be8 <__mprec_bigtens>:
   14be8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   14bf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14c08:	7f73bf3c 75154fdd                       <.s..O.u

00014c10 <__mprec_tens>:
   14c10:	00000000 3ff00000 00000000 40240000     .......?......$@
   14c20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14c30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   14c40:	00000000 412e8480 00000000 416312d0     .......A......cA
   14c50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   14c60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   14c70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   14c80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   14c90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14ca0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14cb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14cc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14cd0:	79d99db4 44ea7843                       ...yCx.D

00014cd8 <p05.6040>:
   14cd8:	00000005 00000019 0000007d              ........}...

00014ce4 <_ctype_>:
   14ce4:	20202000 20202020 28282020 20282828     .         ((((( 
   14cf4:	20202020 20202020 20202020 20202020                     
   14d04:	10108820 10101010 10101010 10101010      ...............
   14d14:	04040410 04040404 10040404 10101010     ................
   14d24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14d34:	01010101 01010101 01010101 10101010     ................
   14d44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14d54:	02020202 02020202 02020202 10101010     ................
   14d64:	00000020 00000000 00000000 00000000      ...............
	...

00014de8 <_init>:
   14de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dea:	46c0      	nop			; (mov r8, r8)
   14dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14dee:	bc08      	pop	{r3}
   14df0:	469e      	mov	lr, r3
   14df2:	4770      	bx	lr

00014df4 <__init_array_start>:
   14df4:	000104dd 	.word	0x000104dd

00014df8 <__frame_dummy_init_array_entry>:
   14df8:	000000dd                                ....

00014dfc <_fini>:
   14dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14e02:	bc08      	pop	{r3}
   14e04:	469e      	mov	lr, r3
   14e06:	4770      	bx	lr

00014e08 <__fini_array_start>:
   14e08:	000000b5 	.word	0x000000b5
