
LoRaMac-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000205dc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000205dc  000205dc  000305dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af8  20000000  000205e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040af8  2**0
                  CONTENTS
  4 .bss          000012fc  20000af8  000210dc  00040af8  2**2
                  ALLOC
  5 .stack        00002004  20001df4  000223d8  00040af8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040af8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040b20  2**0
                  CONTENTS, READONLY
  8 .debug_info   00046ab2  00000000  00000000  00040b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006fa3  00000000  00000000  0008762b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ccee  00000000  00000000  0008e5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022b8  00000000  00000000  0009b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001fe8  00000000  00000000  0009d574  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023f59  00000000  00000000  0009f55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f060  00000000  00000000  000c34b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5aea  00000000  00000000  000e2515  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008e18  00000000  00000000  00188000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 3d 00 20 a9 77 01 00 3d 78 01 00 3d 78 01 00     .=. .w..=x..=x..
	...
      2c:	3d 78 01 00 00 00 00 00 00 00 00 00 3d 78 01 00     =x..........=x..
      3c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 51 28 00 00     =x..=x..=x..Q(..
      4c:	81 12 00 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     ....=x..=x..=x..
      5c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     =x..=x..=x..=x..
      6c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     =x..=x..=x..=x..
      7c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     =x..=x..=x..=x..
      8c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     =x..=x..=x..=x..
      9c:	3d 78 01 00 3d 78 01 00 3d 78 01 00 3d 78 01 00     =x..=x..=x..=x..
      ac:	3d 78 01 00 00 00 00 00                             =x......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000af8 	.word	0x20000af8
      d4:	00000000 	.word	0x00000000
      d8:	000205e4 	.word	0x000205e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000afc 	.word	0x20000afc
     108:	000205e4 	.word	0x000205e4
     10c:	000205e4 	.word	0x000205e4
     110:	00000000 	.word	0x00000000

00000114 <NvmCtxMgmtEvent>:
static NvmmDataBlock_t ClassBNvmCtxDataBlock;
#endif
#endif

void NvmCtxMgmtEvent( LoRaMacNvmCtxModule_t module )
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
        {
            break;
        }
    }
#endif
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore( void )
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
    // Resume LoRaMac
    LoRaMacStart( );

    return NVMCTXMGMT_STATUS_SUCCESS;
#else
    return NVMCTXMGMT_STATUS_FAIL;
     12c:	2301      	movs	r3, #1
#endif
}
     12e:	0018      	movs	r0, r3
     130:	46bd      	mov	sp, r7
     132:	bd80      	pop	{r7, pc}

00000134 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore( void )
{
     134:	b580      	push	{r7, lr}
     136:	af00      	add	r7, sp, #0
        LoRaMacMibSetRequestConfirm( &mibReq );
    }

    return status;
#else
    return NVMCTXMGMT_STATUS_FAIL;
     138:	2301      	movs	r3, #1
#endif
}
     13a:	0018      	movs	r0, r3
     13c:	46bd      	mov	sp, r7
     13e:	bd80      	pop	{r7, pc}

00000140 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     148:	f3ef 8310 	mrs	r3, PRIMASK
     14c:	60fb      	str	r3, [r7, #12]
  return(result);
     14e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     150:	687b      	ldr	r3, [r7, #4]
     152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     154:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     156:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	46bd      	mov	sp, r7
     15e:	b004      	add	sp, #16
     160:	bd80      	pop	{r7, pc}

00000162 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     162:	b580      	push	{r7, lr}
     164:	b084      	sub	sp, #16
     166:	af00      	add	r7, sp, #0
     168:	6078      	str	r0, [r7, #4]
     16a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     16e:	687b      	ldr	r3, [r7, #4]
     170:	681b      	ldr	r3, [r3, #0]
     172:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     174:	68fb      	ldr	r3, [r7, #12]
     176:	f383 8810 	msr	PRIMASK, r3
}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	46bd      	mov	sp, r7
     17e:	b004      	add	sp, #16
     180:	bd80      	pop	{r7, pc}
	...

00000184 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     18c:	4b05      	ldr	r3, [pc, #20]	; (1a4 <delay_init+0x20>)
     18e:	687a      	ldr	r2, [r7, #4]
     190:	601a      	str	r2, [r3, #0]
     192:	4b04      	ldr	r3, [pc, #16]	; (1a4 <delay_init+0x20>)
     194:	681b      	ldr	r3, [r3, #0]
     196:	0018      	movs	r0, r3
     198:	4b03      	ldr	r3, [pc, #12]	; (1a8 <delay_init+0x24>)
     19a:	4798      	blx	r3
}
     19c:	46c0      	nop			; (mov r8, r8)
     19e:	46bd      	mov	sp, r7
     1a0:	b002      	add	sp, #8
     1a2:	bd80      	pop	{r7, pc}
     1a4:	20000b14 	.word	0x20000b14
     1a8:	000024ad 	.word	0x000024ad

000001ac <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     1ac:	b590      	push	{r4, r7, lr}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
     1b2:	0002      	movs	r2, r0
     1b4:	1dbb      	adds	r3, r7, #6
     1b6:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1b8:	4b07      	ldr	r3, [pc, #28]	; (1d8 <delay_ms+0x2c>)
     1ba:	681c      	ldr	r4, [r3, #0]
     1bc:	1dbb      	adds	r3, r7, #6
     1be:	881b      	ldrh	r3, [r3, #0]
     1c0:	0018      	movs	r0, r3
     1c2:	4b06      	ldr	r3, [pc, #24]	; (1dc <delay_ms+0x30>)
     1c4:	4798      	blx	r3
     1c6:	0003      	movs	r3, r0
     1c8:	0019      	movs	r1, r3
     1ca:	0020      	movs	r0, r4
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <delay_ms+0x34>)
     1ce:	4798      	blx	r3
}
     1d0:	46c0      	nop			; (mov r8, r8)
     1d2:	46bd      	mov	sp, r7
     1d4:	b003      	add	sp, #12
     1d6:	bd90      	pop	{r4, r7, pc}
     1d8:	20000b14 	.word	0x20000b14
     1dc:	00000c45 	.word	0x00000c45
     1e0:	000024c9 	.word	0x000024c9

000001e4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     1ea:	1dbb      	adds	r3, r7, #6
     1ec:	2200      	movs	r2, #0
     1ee:	801a      	strh	r2, [r3, #0]
     1f0:	e013      	b.n	21a <ext_irq_init+0x36>
		ext_irqs[i].pin = 0xFFFFFFFF;
     1f2:	1dbb      	adds	r3, r7, #6
     1f4:	881b      	ldrh	r3, [r3, #0]
     1f6:	4a0f      	ldr	r2, [pc, #60]	; (234 <ext_irq_init+0x50>)
     1f8:	00db      	lsls	r3, r3, #3
     1fa:	18d3      	adds	r3, r2, r3
     1fc:	3304      	adds	r3, #4
     1fe:	2201      	movs	r2, #1
     200:	4252      	negs	r2, r2
     202:	601a      	str	r2, [r3, #0]
		ext_irqs[i].cb  = NULL;
     204:	1dbb      	adds	r3, r7, #6
     206:	881a      	ldrh	r2, [r3, #0]
     208:	4b0a      	ldr	r3, [pc, #40]	; (234 <ext_irq_init+0x50>)
     20a:	00d2      	lsls	r2, r2, #3
     20c:	2100      	movs	r1, #0
     20e:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     210:	1dbb      	adds	r3, r7, #6
     212:	881a      	ldrh	r2, [r3, #0]
     214:	1dbb      	adds	r3, r7, #6
     216:	3201      	adds	r2, #1
     218:	801a      	strh	r2, [r3, #0]
     21a:	1dbb      	adds	r3, r7, #6
     21c:	881b      	ldrh	r3, [r3, #0]
     21e:	2b05      	cmp	r3, #5
     220:	d9e7      	bls.n	1f2 <ext_irq_init+0xe>
	}

	return _ext_irq_init(process_ext_irq);
     222:	4b05      	ldr	r3, [pc, #20]	; (238 <ext_irq_init+0x54>)
     224:	0018      	movs	r0, r3
     226:	4b05      	ldr	r3, [pc, #20]	; (23c <ext_irq_init+0x58>)
     228:	4798      	blx	r3
     22a:	0003      	movs	r3, r0
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b002      	add	sp, #8
     232:	bd80      	pop	{r7, pc}
     234:	20000b18 	.word	0x20000b18
     238:	00000419 	.word	0x00000419
     23c:	00000f61 	.word	0x00000f61

00000240 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
     240:	b580      	push	{r7, lr}
     242:	b086      	sub	sp, #24
     244:	af00      	add	r7, sp, #0
     246:	6078      	str	r0, [r7, #4]
     248:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
     24a:	2317      	movs	r3, #23
     24c:	18fb      	adds	r3, r7, r3
     24e:	2200      	movs	r2, #0
     250:	701a      	strb	r2, [r3, #0]
     252:	2316      	movs	r3, #22
     254:	18fb      	adds	r3, r7, r3
     256:	2200      	movs	r2, #0
     258:	701a      	strb	r2, [r3, #0]
	bool    found = false;
     25a:	2315      	movs	r3, #21
     25c:	18fb      	adds	r3, r7, r3
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]

	for (; i < EXT_IRQ_AMOUNT; i++) {
     262:	e01d      	b.n	2a0 <ext_irq_register+0x60>
		if (ext_irqs[i].pin == pin) {
     264:	2317      	movs	r3, #23
     266:	18fb      	adds	r3, r7, r3
     268:	781b      	ldrb	r3, [r3, #0]
     26a:	4a69      	ldr	r2, [pc, #420]	; (410 <ext_irq_register+0x1d0>)
     26c:	00db      	lsls	r3, r3, #3
     26e:	18d3      	adds	r3, r2, r3
     270:	3304      	adds	r3, #4
     272:	681a      	ldr	r2, [r3, #0]
     274:	687b      	ldr	r3, [r7, #4]
     276:	429a      	cmp	r2, r3
     278:	d10b      	bne.n	292 <ext_irq_register+0x52>
			ext_irqs[i].cb = cb;
     27a:	2317      	movs	r3, #23
     27c:	18fb      	adds	r3, r7, r3
     27e:	781a      	ldrb	r2, [r3, #0]
     280:	4b63      	ldr	r3, [pc, #396]	; (410 <ext_irq_register+0x1d0>)
     282:	00d2      	lsls	r2, r2, #3
     284:	6839      	ldr	r1, [r7, #0]
     286:	50d1      	str	r1, [r2, r3]
			found          = true;
     288:	2315      	movs	r3, #21
     28a:	18fb      	adds	r3, r7, r3
     28c:	2201      	movs	r2, #1
     28e:	701a      	strb	r2, [r3, #0]
			break;
     290:	e00b      	b.n	2aa <ext_irq_register+0x6a>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     292:	2317      	movs	r3, #23
     294:	18fb      	adds	r3, r7, r3
     296:	781a      	ldrb	r2, [r3, #0]
     298:	2317      	movs	r3, #23
     29a:	18fb      	adds	r3, r7, r3
     29c:	3201      	adds	r2, #1
     29e:	701a      	strb	r2, [r3, #0]
     2a0:	2317      	movs	r3, #23
     2a2:	18fb      	adds	r3, r7, r3
     2a4:	781b      	ldrb	r3, [r3, #0]
     2a6:	2b05      	cmp	r3, #5
     2a8:	d9dc      	bls.n	264 <ext_irq_register+0x24>
		}
	}

	if (NULL == cb) {
     2aa:	683b      	ldr	r3, [r7, #0]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d111      	bne.n	2d4 <ext_irq_register+0x94>
		if (!found) {
     2b0:	2315      	movs	r3, #21
     2b2:	18fb      	adds	r3, r7, r3
     2b4:	781b      	ldrb	r3, [r3, #0]
     2b6:	2201      	movs	r2, #1
     2b8:	4053      	eors	r3, r2
     2ba:	b2db      	uxtb	r3, r3
     2bc:	2b00      	cmp	r3, #0
     2be:	d002      	beq.n	2c6 <ext_irq_register+0x86>
			return ERR_INVALID_ARG;
     2c0:	230d      	movs	r3, #13
     2c2:	425b      	negs	r3, r3
     2c4:	e09f      	b.n	406 <ext_irq_register+0x1c6>
		}
		return _ext_irq_enable(pin, false);
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	2100      	movs	r1, #0
     2ca:	0018      	movs	r0, r3
     2cc:	4b51      	ldr	r3, [pc, #324]	; (414 <ext_irq_register+0x1d4>)
     2ce:	4798      	blx	r3
     2d0:	0003      	movs	r3, r0
     2d2:	e098      	b.n	406 <ext_irq_register+0x1c6>
	}

	if (!found) {
     2d4:	2315      	movs	r3, #21
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	2201      	movs	r2, #1
     2dc:	4053      	eors	r3, r2
     2de:	b2db      	uxtb	r3, r3
     2e0:	2b00      	cmp	r3, #0
     2e2:	d100      	bne.n	2e6 <ext_irq_register+0xa6>
     2e4:	e07e      	b.n	3e4 <ext_irq_register+0x1a4>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     2e6:	2317      	movs	r3, #23
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	2200      	movs	r2, #0
     2ec:	701a      	strb	r2, [r3, #0]
     2ee:	e023      	b.n	338 <ext_irq_register+0xf8>
			if (NULL == ext_irqs[i].cb) {
     2f0:	2317      	movs	r3, #23
     2f2:	18fb      	adds	r3, r7, r3
     2f4:	781a      	ldrb	r2, [r3, #0]
     2f6:	4b46      	ldr	r3, [pc, #280]	; (410 <ext_irq_register+0x1d0>)
     2f8:	00d2      	lsls	r2, r2, #3
     2fa:	58d3      	ldr	r3, [r2, r3]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d114      	bne.n	32a <ext_irq_register+0xea>
				ext_irqs[i].cb  = cb;
     300:	2317      	movs	r3, #23
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	4b42      	ldr	r3, [pc, #264]	; (410 <ext_irq_register+0x1d0>)
     308:	00d2      	lsls	r2, r2, #3
     30a:	6839      	ldr	r1, [r7, #0]
     30c:	50d1      	str	r1, [r2, r3]
				ext_irqs[i].pin = pin;
     30e:	2317      	movs	r3, #23
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	4a3e      	ldr	r2, [pc, #248]	; (410 <ext_irq_register+0x1d0>)
     316:	00db      	lsls	r3, r3, #3
     318:	18d3      	adds	r3, r2, r3
     31a:	3304      	adds	r3, #4
     31c:	687a      	ldr	r2, [r7, #4]
     31e:	601a      	str	r2, [r3, #0]
				found           = true;
     320:	2315      	movs	r3, #21
     322:	18fb      	adds	r3, r7, r3
     324:	2201      	movs	r2, #1
     326:	701a      	strb	r2, [r3, #0]
				break;
     328:	e00b      	b.n	342 <ext_irq_register+0x102>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     32a:	2317      	movs	r3, #23
     32c:	18fb      	adds	r3, r7, r3
     32e:	781a      	ldrb	r2, [r3, #0]
     330:	2317      	movs	r3, #23
     332:	18fb      	adds	r3, r7, r3
     334:	3201      	adds	r2, #1
     336:	701a      	strb	r2, [r3, #0]
     338:	2317      	movs	r3, #23
     33a:	18fb      	adds	r3, r7, r3
     33c:	781b      	ldrb	r3, [r3, #0]
     33e:	2b05      	cmp	r3, #5
     340:	d9d6      	bls.n	2f0 <ext_irq_register+0xb0>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     342:	e045      	b.n	3d0 <ext_irq_register+0x190>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     344:	2317      	movs	r3, #23
     346:	18fb      	adds	r3, r7, r3
     348:	781b      	ldrb	r3, [r3, #0]
     34a:	4a31      	ldr	r2, [pc, #196]	; (410 <ext_irq_register+0x1d0>)
     34c:	00db      	lsls	r3, r3, #3
     34e:	18d3      	adds	r3, r2, r3
     350:	3304      	adds	r3, #4
     352:	681a      	ldr	r2, [r3, #0]
     354:	2316      	movs	r3, #22
     356:	18fb      	adds	r3, r7, r3
     358:	781b      	ldrb	r3, [r3, #0]
     35a:	492d      	ldr	r1, [pc, #180]	; (410 <ext_irq_register+0x1d0>)
     35c:	00db      	lsls	r3, r3, #3
     35e:	18cb      	adds	r3, r1, r3
     360:	3304      	adds	r3, #4
     362:	681b      	ldr	r3, [r3, #0]
     364:	429a      	cmp	r2, r3
     366:	d22c      	bcs.n	3c2 <ext_irq_register+0x182>
     368:	2316      	movs	r3, #22
     36a:	18fb      	adds	r3, r7, r3
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	4a28      	ldr	r2, [pc, #160]	; (410 <ext_irq_register+0x1d0>)
     370:	00db      	lsls	r3, r3, #3
     372:	18d3      	adds	r3, r2, r3
     374:	3304      	adds	r3, #4
     376:	681b      	ldr	r3, [r3, #0]
     378:	3301      	adds	r3, #1
     37a:	d022      	beq.n	3c2 <ext_irq_register+0x182>
				struct ext_irq tmp = ext_irqs[j];
     37c:	2316      	movs	r3, #22
     37e:	18fb      	adds	r3, r7, r3
     380:	781b      	ldrb	r3, [r3, #0]
     382:	220c      	movs	r2, #12
     384:	18ba      	adds	r2, r7, r2
     386:	4922      	ldr	r1, [pc, #136]	; (410 <ext_irq_register+0x1d0>)
     388:	00db      	lsls	r3, r3, #3
     38a:	18cb      	adds	r3, r1, r3
     38c:	cb03      	ldmia	r3!, {r0, r1}
     38e:	c203      	stmia	r2!, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
     390:	2316      	movs	r3, #22
     392:	18fb      	adds	r3, r7, r3
     394:	781b      	ldrb	r3, [r3, #0]
     396:	2217      	movs	r2, #23
     398:	18ba      	adds	r2, r7, r2
     39a:	7812      	ldrb	r2, [r2, #0]
     39c:	481c      	ldr	r0, [pc, #112]	; (410 <ext_irq_register+0x1d0>)
     39e:	00db      	lsls	r3, r3, #3
     3a0:	491b      	ldr	r1, [pc, #108]	; (410 <ext_irq_register+0x1d0>)
     3a2:	00d2      	lsls	r2, r2, #3
     3a4:	18c3      	adds	r3, r0, r3
     3a6:	188a      	adds	r2, r1, r2
     3a8:	ca03      	ldmia	r2!, {r0, r1}
     3aa:	c303      	stmia	r3!, {r0, r1}
				ext_irqs[i] = tmp;
     3ac:	2317      	movs	r3, #23
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	4a17      	ldr	r2, [pc, #92]	; (410 <ext_irq_register+0x1d0>)
     3b4:	00db      	lsls	r3, r3, #3
     3b6:	210c      	movs	r1, #12
     3b8:	1879      	adds	r1, r7, r1
     3ba:	18d3      	adds	r3, r2, r3
     3bc:	000a      	movs	r2, r1
     3be:	ca03      	ldmia	r2!, {r0, r1}
     3c0:	c303      	stmia	r3!, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     3c2:	2316      	movs	r3, #22
     3c4:	18fb      	adds	r3, r7, r3
     3c6:	781a      	ldrb	r2, [r3, #0]
     3c8:	2316      	movs	r3, #22
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	3201      	adds	r2, #1
     3ce:	701a      	strb	r2, [r3, #0]
     3d0:	2316      	movs	r3, #22
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	781b      	ldrb	r3, [r3, #0]
     3d6:	2b05      	cmp	r3, #5
     3d8:	d804      	bhi.n	3e4 <ext_irq_register+0x1a4>
     3da:	2317      	movs	r3, #23
     3dc:	18fb      	adds	r3, r7, r3
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b05      	cmp	r3, #5
     3e2:	d9af      	bls.n	344 <ext_irq_register+0x104>
			}
		}
	}

	if (!found) {
     3e4:	2315      	movs	r3, #21
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	781b      	ldrb	r3, [r3, #0]
     3ea:	2201      	movs	r2, #1
     3ec:	4053      	eors	r3, r2
     3ee:	b2db      	uxtb	r3, r3
     3f0:	2b00      	cmp	r3, #0
     3f2:	d002      	beq.n	3fa <ext_irq_register+0x1ba>
		return ERR_INVALID_ARG;
     3f4:	230d      	movs	r3, #13
     3f6:	425b      	negs	r3, r3
     3f8:	e005      	b.n	406 <ext_irq_register+0x1c6>
	}

	return _ext_irq_enable(pin, true);
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	2101      	movs	r1, #1
     3fe:	0018      	movs	r0, r3
     400:	4b04      	ldr	r3, [pc, #16]	; (414 <ext_irq_register+0x1d4>)
     402:	4798      	blx	r3
     404:	0003      	movs	r3, r0
}
     406:	0018      	movs	r0, r3
     408:	46bd      	mov	sp, r7
     40a:	b006      	add	sp, #24
     40c:	bd80      	pop	{r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	20000b18 	.word	0x20000b18
     414:	00001031 	.word	0x00001031

00000418 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     418:	b580      	push	{r7, lr}
     41a:	b084      	sub	sp, #16
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     420:	230f      	movs	r3, #15
     422:	18fb      	adds	r3, r7, r3
     424:	2200      	movs	r2, #0
     426:	701a      	strb	r2, [r3, #0]
     428:	230e      	movs	r3, #14
     42a:	18fb      	adds	r3, r7, r3
     42c:	2206      	movs	r2, #6
     42e:	701a      	strb	r2, [r3, #0]

	while (upper >= lower) {
     430:	e04b      	b.n	4ca <process_ext_irq+0xb2>
		middle = (upper + lower) >> 1;
     432:	230e      	movs	r3, #14
     434:	18fb      	adds	r3, r7, r3
     436:	781a      	ldrb	r2, [r3, #0]
     438:	230f      	movs	r3, #15
     43a:	18fb      	adds	r3, r7, r3
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	18d3      	adds	r3, r2, r3
     440:	105a      	asrs	r2, r3, #1
     442:	230d      	movs	r3, #13
     444:	18fb      	adds	r3, r7, r3
     446:	701a      	strb	r2, [r3, #0]

		if (ext_irqs[middle].pin == pin) {
     448:	230d      	movs	r3, #13
     44a:	18fb      	adds	r3, r7, r3
     44c:	781b      	ldrb	r3, [r3, #0]
     44e:	4a24      	ldr	r2, [pc, #144]	; (4e0 <process_ext_irq+0xc8>)
     450:	00db      	lsls	r3, r3, #3
     452:	18d3      	adds	r3, r2, r3
     454:	3304      	adds	r3, #4
     456:	681a      	ldr	r2, [r3, #0]
     458:	687b      	ldr	r3, [r7, #4]
     45a:	429a      	cmp	r2, r3
     45c:	d10f      	bne.n	47e <process_ext_irq+0x66>
			if (ext_irqs[middle].cb) {
     45e:	230d      	movs	r3, #13
     460:	18fb      	adds	r3, r7, r3
     462:	781a      	ldrb	r2, [r3, #0]
     464:	4b1e      	ldr	r3, [pc, #120]	; (4e0 <process_ext_irq+0xc8>)
     466:	00d2      	lsls	r2, r2, #3
     468:	58d3      	ldr	r3, [r2, r3]
     46a:	2b00      	cmp	r3, #0
     46c:	d007      	beq.n	47e <process_ext_irq+0x66>
				ext_irqs[middle].cb();
     46e:	230d      	movs	r3, #13
     470:	18fb      	adds	r3, r7, r3
     472:	781a      	ldrb	r2, [r3, #0]
     474:	4b1a      	ldr	r3, [pc, #104]	; (4e0 <process_ext_irq+0xc8>)
     476:	00d2      	lsls	r2, r2, #3
     478:	58d3      	ldr	r3, [r2, r3]
     47a:	4798      	blx	r3
				return;
     47c:	e02d      	b.n	4da <process_ext_irq+0xc2>
			}
		}

		if (ext_irqs[middle].pin < pin) {
     47e:	230d      	movs	r3, #13
     480:	18fb      	adds	r3, r7, r3
     482:	781b      	ldrb	r3, [r3, #0]
     484:	4a16      	ldr	r2, [pc, #88]	; (4e0 <process_ext_irq+0xc8>)
     486:	00db      	lsls	r3, r3, #3
     488:	18d3      	adds	r3, r2, r3
     48a:	3304      	adds	r3, #4
     48c:	681a      	ldr	r2, [r3, #0]
     48e:	687b      	ldr	r3, [r7, #4]
     490:	429a      	cmp	r2, r3
     492:	d20d      	bcs.n	4b0 <process_ext_irq+0x98>
			lower = middle + 1;
     494:	230f      	movs	r3, #15
     496:	18fb      	adds	r3, r7, r3
     498:	220d      	movs	r2, #13
     49a:	18ba      	adds	r2, r7, r2
     49c:	7812      	ldrb	r2, [r2, #0]
     49e:	3201      	adds	r2, #1
     4a0:	701a      	strb	r2, [r3, #0]
     4a2:	230e      	movs	r3, #14
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	220e      	movs	r2, #14
     4a8:	18ba      	adds	r2, r7, r2
     4aa:	7812      	ldrb	r2, [r2, #0]
     4ac:	701a      	strb	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <process_ext_irq+0xb2>
		} else {
			upper = middle - 1;
     4b0:	230e      	movs	r3, #14
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	220d      	movs	r2, #13
     4b6:	18ba      	adds	r2, r7, r2
     4b8:	7812      	ldrb	r2, [r2, #0]
     4ba:	3a01      	subs	r2, #1
     4bc:	701a      	strb	r2, [r3, #0]
     4be:	230f      	movs	r3, #15
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	220f      	movs	r2, #15
     4c4:	18ba      	adds	r2, r7, r2
     4c6:	7812      	ldrb	r2, [r2, #0]
     4c8:	701a      	strb	r2, [r3, #0]
	while (upper >= lower) {
     4ca:	230e      	movs	r3, #14
     4cc:	18fa      	adds	r2, r7, r3
     4ce:	230f      	movs	r3, #15
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	7812      	ldrb	r2, [r2, #0]
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	429a      	cmp	r2, r3
     4d8:	d2ab      	bcs.n	432 <process_ext_irq+0x1a>
		}
	}
}
     4da:	46bd      	mov	sp, r7
     4dc:	b004      	add	sp, #16
     4de:	bd80      	pop	{r7, pc}
     4e0:	20000b18 	.word	0x20000b18

000004e4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b084      	sub	sp, #16
     4e8:	af00      	add	r7, sp, #0
     4ea:	60f8      	str	r0, [r7, #12]
     4ec:	60b9      	str	r1, [r7, #8]
     4ee:	1dbb      	adds	r3, r7, #6
     4f0:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     4f2:	68fb      	ldr	r3, [r7, #12]
     4f4:	2b00      	cmp	r3, #0
     4f6:	d004      	beq.n	502 <io_write+0x1e>
     4f8:	68bb      	ldr	r3, [r7, #8]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d001      	beq.n	502 <io_write+0x1e>
     4fe:	2301      	movs	r3, #1
     500:	e000      	b.n	504 <io_write+0x20>
     502:	2300      	movs	r3, #0
     504:	1c1a      	adds	r2, r3, #0
     506:	2301      	movs	r3, #1
     508:	4013      	ands	r3, r2
     50a:	b2db      	uxtb	r3, r3
     50c:	4908      	ldr	r1, [pc, #32]	; (530 <io_write+0x4c>)
     50e:	223e      	movs	r2, #62	; 0x3e
     510:	0018      	movs	r0, r3
     512:	4b08      	ldr	r3, [pc, #32]	; (534 <io_write+0x50>)
     514:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     516:	68fb      	ldr	r3, [r7, #12]
     518:	681b      	ldr	r3, [r3, #0]
     51a:	1dba      	adds	r2, r7, #6
     51c:	8812      	ldrh	r2, [r2, #0]
     51e:	68b9      	ldr	r1, [r7, #8]
     520:	68f8      	ldr	r0, [r7, #12]
     522:	4798      	blx	r3
     524:	0003      	movs	r3, r0
}
     526:	0018      	movs	r0, r3
     528:	46bd      	mov	sp, r7
     52a:	b004      	add	sp, #16
     52c:	bd80      	pop	{r7, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	0001eda4 	.word	0x0001eda4
     534:	00000995 	.word	0x00000995

00000538 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     538:	b580      	push	{r7, lr}
     53a:	b084      	sub	sp, #16
     53c:	af00      	add	r7, sp, #0
     53e:	60f8      	str	r0, [r7, #12]
     540:	60b9      	str	r1, [r7, #8]
     542:	1dbb      	adds	r3, r7, #6
     544:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     546:	68fb      	ldr	r3, [r7, #12]
     548:	2b00      	cmp	r3, #0
     54a:	d004      	beq.n	556 <io_read+0x1e>
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	2b00      	cmp	r3, #0
     550:	d001      	beq.n	556 <io_read+0x1e>
     552:	2301      	movs	r3, #1
     554:	e000      	b.n	558 <io_read+0x20>
     556:	2300      	movs	r3, #0
     558:	1c1a      	adds	r2, r3, #0
     55a:	2301      	movs	r3, #1
     55c:	4013      	ands	r3, r2
     55e:	b2db      	uxtb	r3, r3
     560:	4908      	ldr	r1, [pc, #32]	; (584 <io_read+0x4c>)
     562:	2247      	movs	r2, #71	; 0x47
     564:	0018      	movs	r0, r3
     566:	4b08      	ldr	r3, [pc, #32]	; (588 <io_read+0x50>)
     568:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     56a:	68fb      	ldr	r3, [r7, #12]
     56c:	685b      	ldr	r3, [r3, #4]
     56e:	1dba      	adds	r2, r7, #6
     570:	8812      	ldrh	r2, [r2, #0]
     572:	68b9      	ldr	r1, [r7, #8]
     574:	68f8      	ldr	r0, [r7, #12]
     576:	4798      	blx	r3
     578:	0003      	movs	r3, r0
}
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	b004      	add	sp, #16
     580:	bd80      	pop	{r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	0001eda4 	.word	0x0001eda4
     588:	00000995 	.word	0x00000995

0000058c <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     58c:	b580      	push	{r7, lr}
     58e:	b084      	sub	sp, #16
     590:	af00      	add	r7, sp, #0
     592:	6078      	str	r0, [r7, #4]
     594:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
     596:	2300      	movs	r3, #0
     598:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <spi_m_sync_init+0x1e>
     5a0:	683b      	ldr	r3, [r7, #0]
     5a2:	2b00      	cmp	r3, #0
     5a4:	d001      	beq.n	5aa <spi_m_sync_init+0x1e>
     5a6:	2301      	movs	r3, #1
     5a8:	e000      	b.n	5ac <spi_m_sync_init+0x20>
     5aa:	2300      	movs	r3, #0
     5ac:	1c1a      	adds	r2, r3, #0
     5ae:	2301      	movs	r3, #1
     5b0:	4013      	ands	r3, r2
     5b2:	b2db      	uxtb	r3, r3
     5b4:	4911      	ldr	r1, [pc, #68]	; (5fc <spi_m_sync_init+0x70>)
     5b6:	2242      	movs	r2, #66	; 0x42
     5b8:	0018      	movs	r0, r3
     5ba:	4b11      	ldr	r3, [pc, #68]	; (600 <spi_m_sync_init+0x74>)
     5bc:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	683a      	ldr	r2, [r7, #0]
     5c2:	601a      	str	r2, [r3, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	683a      	ldr	r2, [r7, #0]
     5c8:	0011      	movs	r1, r2
     5ca:	0018      	movs	r0, r3
     5cc:	4b0d      	ldr	r3, [pc, #52]	; (604 <spi_m_sync_init+0x78>)
     5ce:	4798      	blx	r3
     5d0:	0003      	movs	r3, r0
     5d2:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
     5d4:	68fb      	ldr	r3, [r7, #12]
     5d6:	2b00      	cmp	r3, #0
     5d8:	da01      	bge.n	5de <spi_m_sync_init+0x52>
		return rc;
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	e009      	b.n	5f2 <spi_m_sync_init+0x66>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	4a09      	ldr	r2, [pc, #36]	; (608 <spi_m_sync_init+0x7c>)
     5e2:	821a      	strh	r2, [r3, #16]
	spi->io.read  = _spi_m_sync_io_read;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	4a09      	ldr	r2, [pc, #36]	; (60c <spi_m_sync_init+0x80>)
     5e8:	60da      	str	r2, [r3, #12]
	spi->io.write = _spi_m_sync_io_write;
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	4a08      	ldr	r2, [pc, #32]	; (610 <spi_m_sync_init+0x84>)
     5ee:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
     5f0:	2300      	movs	r3, #0
}
     5f2:	0018      	movs	r0, r3
     5f4:	46bd      	mov	sp, r7
     5f6:	b004      	add	sp, #16
     5f8:	bd80      	pop	{r7, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0001edd8 	.word	0x0001edd8
     600:	00000995 	.word	0x00000995
     604:	000020ad 	.word	0x000020ad
     608:	ffff8000 	.word	0xffff8000
     60c:	00000615 	.word	0x00000615
     610:	00000679 	.word	0x00000679

00000614 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
     614:	b580      	push	{r7, lr}
     616:	b088      	sub	sp, #32
     618:	af00      	add	r7, sp, #0
     61a:	60f8      	str	r0, [r7, #12]
     61c:	60b9      	str	r1, [r7, #8]
     61e:	1dbb      	adds	r3, r7, #6
     620:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
     622:	68fb      	ldr	r3, [r7, #12]
     624:	1e5a      	subs	r2, r3, #1
     626:	4193      	sbcs	r3, r2
     628:	b2db      	uxtb	r3, r3
     62a:	4910      	ldr	r1, [pc, #64]	; (66c <_spi_m_sync_io_read+0x58>)
     62c:	2291      	movs	r2, #145	; 0x91
     62e:	0018      	movs	r0, r3
     630:	4b0f      	ldr	r3, [pc, #60]	; (670 <_spi_m_sync_io_read+0x5c>)
     632:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     634:	68fb      	ldr	r3, [r7, #12]
     636:	3b08      	subs	r3, #8
     638:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
     63a:	2310      	movs	r3, #16
     63c:	18fb      	adds	r3, r7, r3
     63e:	68ba      	ldr	r2, [r7, #8]
     640:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
     642:	2310      	movs	r3, #16
     644:	18fb      	adds	r3, r7, r3
     646:	2200      	movs	r2, #0
     648:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
     64a:	1dbb      	adds	r3, r7, #6
     64c:	881a      	ldrh	r2, [r3, #0]
     64e:	2310      	movs	r3, #16
     650:	18fb      	adds	r3, r7, r3
     652:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
     654:	2310      	movs	r3, #16
     656:	18fa      	adds	r2, r7, r3
     658:	69fb      	ldr	r3, [r7, #28]
     65a:	0011      	movs	r1, r2
     65c:	0018      	movs	r0, r3
     65e:	4b05      	ldr	r3, [pc, #20]	; (674 <_spi_m_sync_io_read+0x60>)
     660:	4798      	blx	r3
     662:	0003      	movs	r3, r0
}
     664:	0018      	movs	r0, r3
     666:	46bd      	mov	sp, r7
     668:	b008      	add	sp, #32
     66a:	bd80      	pop	{r7, pc}
     66c:	0001edd8 	.word	0x0001edd8
     670:	00000995 	.word	0x00000995
     674:	000006dd 	.word	0x000006dd

00000678 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     678:	b580      	push	{r7, lr}
     67a:	b088      	sub	sp, #32
     67c:	af00      	add	r7, sp, #0
     67e:	60f8      	str	r0, [r7, #12]
     680:	60b9      	str	r1, [r7, #8]
     682:	1dbb      	adds	r3, r7, #6
     684:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
     686:	68fb      	ldr	r3, [r7, #12]
     688:	1e5a      	subs	r2, r3, #1
     68a:	4193      	sbcs	r3, r2
     68c:	b2db      	uxtb	r3, r3
     68e:	4910      	ldr	r1, [pc, #64]	; (6d0 <_spi_m_sync_io_write+0x58>)
     690:	22ad      	movs	r2, #173	; 0xad
     692:	0018      	movs	r0, r3
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <_spi_m_sync_io_write+0x5c>)
     696:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     698:	68fb      	ldr	r3, [r7, #12]
     69a:	3b08      	subs	r3, #8
     69c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
     69e:	2310      	movs	r3, #16
     6a0:	18fb      	adds	r3, r7, r3
     6a2:	2200      	movs	r2, #0
     6a4:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
     6a6:	2310      	movs	r3, #16
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	68ba      	ldr	r2, [r7, #8]
     6ac:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
     6ae:	1dbb      	adds	r3, r7, #6
     6b0:	881a      	ldrh	r2, [r3, #0]
     6b2:	2310      	movs	r3, #16
     6b4:	18fb      	adds	r3, r7, r3
     6b6:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
     6b8:	2310      	movs	r3, #16
     6ba:	18fa      	adds	r2, r7, r3
     6bc:	69fb      	ldr	r3, [r7, #28]
     6be:	0011      	movs	r1, r2
     6c0:	0018      	movs	r0, r3
     6c2:	4b05      	ldr	r3, [pc, #20]	; (6d8 <_spi_m_sync_io_write+0x60>)
     6c4:	4798      	blx	r3
     6c6:	0003      	movs	r3, r0
}
     6c8:	0018      	movs	r0, r3
     6ca:	46bd      	mov	sp, r7
     6cc:	b008      	add	sp, #32
     6ce:	bd80      	pop	{r7, pc}
     6d0:	0001edd8 	.word	0x0001edd8
     6d4:	00000995 	.word	0x00000995
     6d8:	000006dd 	.word	0x000006dd

000006dc <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b086      	sub	sp, #24
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
     6e4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d004      	beq.n	6f6 <spi_m_sync_transfer+0x1a>
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d001      	beq.n	6f6 <spi_m_sync_transfer+0x1a>
     6f2:	2301      	movs	r3, #1
     6f4:	e000      	b.n	6f8 <spi_m_sync_transfer+0x1c>
     6f6:	2300      	movs	r3, #0
     6f8:	1c1a      	adds	r2, r3, #0
     6fa:	2301      	movs	r3, #1
     6fc:	4013      	ands	r3, r2
     6fe:	b2db      	uxtb	r3, r3
     700:	490f      	ldr	r1, [pc, #60]	; (740 <spi_m_sync_transfer+0x64>)
     702:	22bd      	movs	r2, #189	; 0xbd
     704:	0018      	movs	r0, r3
     706:	4b0f      	ldr	r3, [pc, #60]	; (744 <spi_m_sync_transfer+0x68>)
     708:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	681a      	ldr	r2, [r3, #0]
     70e:	230c      	movs	r3, #12
     710:	18fb      	adds	r3, r7, r3
     712:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
     714:	683b      	ldr	r3, [r7, #0]
     716:	685a      	ldr	r2, [r3, #4]
     718:	230c      	movs	r3, #12
     71a:	18fb      	adds	r3, r7, r3
     71c:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
     71e:	683b      	ldr	r3, [r7, #0]
     720:	689a      	ldr	r2, [r3, #8]
     722:	230c      	movs	r3, #12
     724:	18fb      	adds	r3, r7, r3
     726:	609a      	str	r2, [r3, #8]

	return _spi_m_sync_trans(&spi->dev, &msg);
     728:	687b      	ldr	r3, [r7, #4]
     72a:	220c      	movs	r2, #12
     72c:	18ba      	adds	r2, r7, r2
     72e:	0011      	movs	r1, r2
     730:	0018      	movs	r0, r3
     732:	4b05      	ldr	r3, [pc, #20]	; (748 <spi_m_sync_transfer+0x6c>)
     734:	4798      	blx	r3
     736:	0003      	movs	r3, r0
}
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b006      	add	sp, #24
     73e:	bd80      	pop	{r7, pc}
     740:	0001edd8 	.word	0x0001edd8
     744:	00000995 	.word	0x00000995
     748:	00002331 	.word	0x00002331

0000074c <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
     74c:	b580      	push	{r7, lr}
     74e:	b086      	sub	sp, #24
     750:	af00      	add	r7, sp, #0
     752:	60f8      	str	r0, [r7, #12]
     754:	60b9      	str	r1, [r7, #8]
     756:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	2b00      	cmp	r3, #0
     75c:	d004      	beq.n	768 <usart_sync_init+0x1c>
     75e:	68bb      	ldr	r3, [r7, #8]
     760:	2b00      	cmp	r3, #0
     762:	d001      	beq.n	768 <usart_sync_init+0x1c>
     764:	2301      	movs	r3, #1
     766:	e000      	b.n	76a <usart_sync_init+0x1e>
     768:	2300      	movs	r3, #0
     76a:	1c1a      	adds	r2, r3, #0
     76c:	2301      	movs	r3, #1
     76e:	4013      	ands	r3, r2
     770:	b2db      	uxtb	r3, r3
     772:	490f      	ldr	r1, [pc, #60]	; (7b0 <usart_sync_init+0x64>)
     774:	223e      	movs	r2, #62	; 0x3e
     776:	0018      	movs	r0, r3
     778:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <usart_sync_init+0x68>)
     77a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	3308      	adds	r3, #8
     780:	68ba      	ldr	r2, [r7, #8]
     782:	0011      	movs	r1, r2
     784:	0018      	movs	r0, r3
     786:	4b0c      	ldr	r3, [pc, #48]	; (7b8 <usart_sync_init+0x6c>)
     788:	4798      	blx	r3
     78a:	0003      	movs	r3, r0
     78c:	617b      	str	r3, [r7, #20]
	if (init_status) {
     78e:	697b      	ldr	r3, [r7, #20]
     790:	2b00      	cmp	r3, #0
     792:	d001      	beq.n	798 <usart_sync_init+0x4c>
		return init_status;
     794:	697b      	ldr	r3, [r7, #20]
     796:	e006      	b.n	7a6 <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
     798:	68fb      	ldr	r3, [r7, #12]
     79a:	4a08      	ldr	r2, [pc, #32]	; (7bc <usart_sync_init+0x70>)
     79c:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
     79e:	68fb      	ldr	r3, [r7, #12]
     7a0:	4a07      	ldr	r2, [pc, #28]	; (7c0 <usart_sync_init+0x74>)
     7a2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     7a4:	2300      	movs	r3, #0
}
     7a6:	0018      	movs	r0, r3
     7a8:	46bd      	mov	sp, r7
     7aa:	b006      	add	sp, #24
     7ac:	bd80      	pop	{r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	0001ee14 	.word	0x0001ee14
     7b4:	00000995 	.word	0x00000995
     7b8:	00001a79 	.word	0x00001a79
     7bc:	000008f5 	.word	0x000008f5
     7c0:	00000841 	.word	0x00000841

000007c4 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	b082      	sub	sp, #8
     7c8:	af00      	add	r7, sp, #0
     7ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	1e5a      	subs	r2, r3, #1
     7d0:	4193      	sbcs	r3, r2
     7d2:	b2db      	uxtb	r3, r3
     7d4:	4907      	ldr	r1, [pc, #28]	; (7f4 <usart_sync_enable+0x30>)
     7d6:	225d      	movs	r2, #93	; 0x5d
     7d8:	0018      	movs	r0, r3
     7da:	4b07      	ldr	r3, [pc, #28]	; (7f8 <usart_sync_enable+0x34>)
     7dc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	3308      	adds	r3, #8
     7e2:	0018      	movs	r0, r3
     7e4:	4b05      	ldr	r3, [pc, #20]	; (7fc <usart_sync_enable+0x38>)
     7e6:	4798      	blx	r3

	return ERR_NONE;
     7e8:	2300      	movs	r3, #0
}
     7ea:	0018      	movs	r0, r3
     7ec:	46bd      	mov	sp, r7
     7ee:	b002      	add	sp, #8
     7f0:	bd80      	pop	{r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	0001ee14 	.word	0x0001ee14
     7f8:	00000995 	.word	0x00000995
     7fc:	00001ab9 	.word	0x00001ab9

00000800 <usart_sync_set_baud_rate>:

/**
 * \brief Set usart baud rate
 */
int32_t usart_sync_set_baud_rate(struct usart_sync_descriptor *const descr, const uint32_t baud_rate)
{
     800:	b580      	push	{r7, lr}
     802:	b082      	sub	sp, #8
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	6039      	str	r1, [r7, #0]
	ASSERT(descr);
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	1e5a      	subs	r2, r3, #1
     80e:	4193      	sbcs	r3, r2
     810:	b2db      	uxtb	r3, r3
     812:	4908      	ldr	r1, [pc, #32]	; (834 <usart_sync_set_baud_rate+0x34>)
     814:	228a      	movs	r2, #138	; 0x8a
     816:	0018      	movs	r0, r3
     818:	4b07      	ldr	r3, [pc, #28]	; (838 <usart_sync_set_baud_rate+0x38>)
     81a:	4798      	blx	r3
	_usart_sync_set_baud_rate(&descr->device, baud_rate);
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	3308      	adds	r3, #8
     820:	683a      	ldr	r2, [r7, #0]
     822:	0011      	movs	r1, r2
     824:	0018      	movs	r0, r3
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <usart_sync_set_baud_rate+0x3c>)
     828:	4798      	blx	r3

	return ERR_NONE;
     82a:	2300      	movs	r3, #0
}
     82c:	0018      	movs	r0, r3
     82e:	46bd      	mov	sp, r7
     830:	b002      	add	sp, #8
     832:	bd80      	pop	{r7, pc}
     834:	0001ee14 	.word	0x0001ee14
     838:	00000995 	.word	0x00000995
     83c:	00001ad9 	.word	0x00001ad9

00000840 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     840:	b580      	push	{r7, lr}
     842:	b086      	sub	sp, #24
     844:	af00      	add	r7, sp, #0
     846:	60f8      	str	r0, [r7, #12]
     848:	60b9      	str	r1, [r7, #8]
     84a:	1dbb      	adds	r3, r7, #6
     84c:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
     84e:	2300      	movs	r3, #0
     850:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     852:	68fb      	ldr	r3, [r7, #12]
     854:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     856:	68fb      	ldr	r3, [r7, #12]
     858:	2b00      	cmp	r3, #0
     85a:	d008      	beq.n	86e <usart_sync_write+0x2e>
     85c:	68bb      	ldr	r3, [r7, #8]
     85e:	2b00      	cmp	r3, #0
     860:	d005      	beq.n	86e <usart_sync_write+0x2e>
     862:	1dbb      	adds	r3, r7, #6
     864:	881b      	ldrh	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d001      	beq.n	86e <usart_sync_write+0x2e>
     86a:	2301      	movs	r3, #1
     86c:	e000      	b.n	870 <usart_sync_write+0x30>
     86e:	2300      	movs	r3, #0
     870:	1c1a      	adds	r2, r3, #0
     872:	2301      	movs	r3, #1
     874:	4013      	ands	r3, r2
     876:	b2db      	uxtb	r3, r3
     878:	491a      	ldr	r1, [pc, #104]	; (8e4 <usart_sync_write+0xa4>)
     87a:	22fb      	movs	r2, #251	; 0xfb
     87c:	0018      	movs	r0, r3
     87e:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <usart_sync_write+0xa8>)
     880:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
     882:	46c0      	nop			; (mov r8, r8)
     884:	693b      	ldr	r3, [r7, #16]
     886:	3308      	adds	r3, #8
     888:	0018      	movs	r0, r3
     88a:	4b18      	ldr	r3, [pc, #96]	; (8ec <usart_sync_write+0xac>)
     88c:	4798      	blx	r3
     88e:	0003      	movs	r3, r0
     890:	001a      	movs	r2, r3
     892:	2301      	movs	r3, #1
     894:	4053      	eors	r3, r2
     896:	b2db      	uxtb	r3, r3
     898:	2b00      	cmp	r3, #0
     89a:	d1f3      	bne.n	884 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     89c:	693b      	ldr	r3, [r7, #16]
     89e:	3308      	adds	r3, #8
     8a0:	0018      	movs	r0, r3
     8a2:	68ba      	ldr	r2, [r7, #8]
     8a4:	697b      	ldr	r3, [r7, #20]
     8a6:	18d3      	adds	r3, r2, r3
     8a8:	781b      	ldrb	r3, [r3, #0]
     8aa:	0019      	movs	r1, r3
     8ac:	4b10      	ldr	r3, [pc, #64]	; (8f0 <usart_sync_write+0xb0>)
     8ae:	4798      	blx	r3
		while (!_usart_sync_is_byte_sent(&descr->device))
     8b0:	46c0      	nop			; (mov r8, r8)
     8b2:	693b      	ldr	r3, [r7, #16]
     8b4:	3308      	adds	r3, #8
     8b6:	0018      	movs	r0, r3
     8b8:	4b0c      	ldr	r3, [pc, #48]	; (8ec <usart_sync_write+0xac>)
     8ba:	4798      	blx	r3
     8bc:	0003      	movs	r3, r0
     8be:	001a      	movs	r2, r3
     8c0:	2301      	movs	r3, #1
     8c2:	4053      	eors	r3, r2
     8c4:	b2db      	uxtb	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d1f3      	bne.n	8b2 <usart_sync_write+0x72>
			;
	} while (++offset < length);
     8ca:	697b      	ldr	r3, [r7, #20]
     8cc:	3301      	adds	r3, #1
     8ce:	617b      	str	r3, [r7, #20]
     8d0:	1dbb      	adds	r3, r7, #6
     8d2:	881b      	ldrh	r3, [r3, #0]
     8d4:	697a      	ldr	r2, [r7, #20]
     8d6:	429a      	cmp	r2, r3
     8d8:	d3e0      	bcc.n	89c <usart_sync_write+0x5c>

	return (int32_t)offset;
     8da:	697b      	ldr	r3, [r7, #20]
}
     8dc:	0018      	movs	r0, r3
     8de:	46bd      	mov	sp, r7
     8e0:	b006      	add	sp, #24
     8e2:	bd80      	pop	{r7, pc}
     8e4:	0001ee14 	.word	0x0001ee14
     8e8:	00000995 	.word	0x00000995
     8ec:	00001b4d 	.word	0x00001b4d
     8f0:	00001afd 	.word	0x00001afd

000008f4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8f4:	b590      	push	{r4, r7, lr}
     8f6:	b087      	sub	sp, #28
     8f8:	af00      	add	r7, sp, #0
     8fa:	60f8      	str	r0, [r7, #12]
     8fc:	60b9      	str	r1, [r7, #8]
     8fe:	1dbb      	adds	r3, r7, #6
     900:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
     902:	2300      	movs	r3, #0
     904:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	2b00      	cmp	r3, #0
     90e:	d008      	beq.n	922 <usart_sync_read+0x2e>
     910:	68bb      	ldr	r3, [r7, #8]
     912:	2b00      	cmp	r3, #0
     914:	d005      	beq.n	922 <usart_sync_read+0x2e>
     916:	1dbb      	adds	r3, r7, #6
     918:	881b      	ldrh	r3, [r3, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d001      	beq.n	922 <usart_sync_read+0x2e>
     91e:	2301      	movs	r3, #1
     920:	e000      	b.n	924 <usart_sync_read+0x30>
     922:	2300      	movs	r3, #0
     924:	1c1a      	adds	r2, r3, #0
     926:	2301      	movs	r3, #1
     928:	4013      	ands	r3, r2
     92a:	b2d8      	uxtb	r0, r3
     92c:	2316      	movs	r3, #22
     92e:	33ff      	adds	r3, #255	; 0xff
     930:	001a      	movs	r2, r3
     932:	4b14      	ldr	r3, [pc, #80]	; (984 <usart_sync_read+0x90>)
     934:	0019      	movs	r1, r3
     936:	4b14      	ldr	r3, [pc, #80]	; (988 <usart_sync_read+0x94>)
     938:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	693b      	ldr	r3, [r7, #16]
     93e:	3308      	adds	r3, #8
     940:	0018      	movs	r0, r3
     942:	4b12      	ldr	r3, [pc, #72]	; (98c <usart_sync_read+0x98>)
     944:	4798      	blx	r3
     946:	0003      	movs	r3, r0
     948:	001a      	movs	r2, r3
     94a:	2301      	movs	r3, #1
     94c:	4053      	eors	r3, r2
     94e:	b2db      	uxtb	r3, r3
     950:	2b00      	cmp	r3, #0
     952:	d1f3      	bne.n	93c <usart_sync_read+0x48>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     954:	68ba      	ldr	r2, [r7, #8]
     956:	697b      	ldr	r3, [r7, #20]
     958:	18d4      	adds	r4, r2, r3
     95a:	693b      	ldr	r3, [r7, #16]
     95c:	3308      	adds	r3, #8
     95e:	0018      	movs	r0, r3
     960:	4b0b      	ldr	r3, [pc, #44]	; (990 <usart_sync_read+0x9c>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
     968:	697b      	ldr	r3, [r7, #20]
     96a:	3301      	adds	r3, #1
     96c:	617b      	str	r3, [r7, #20]
     96e:	1dbb      	adds	r3, r7, #6
     970:	881b      	ldrh	r3, [r3, #0]
     972:	697a      	ldr	r2, [r7, #20]
     974:	429a      	cmp	r2, r3
     976:	d3e0      	bcc.n	93a <usart_sync_read+0x46>

	return (int32_t)offset;
     978:	697b      	ldr	r3, [r7, #20]
}
     97a:	0018      	movs	r0, r3
     97c:	46bd      	mov	sp, r7
     97e:	b007      	add	sp, #28
     980:	bd90      	pop	{r4, r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	0001ee14 	.word	0x0001ee14
     988:	00000995 	.word	0x00000995
     98c:	00001b6d 	.word	0x00001b6d
     990:	00001b29 	.word	0x00001b29

00000994 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	60b9      	str	r1, [r7, #8]
     99c:	607a      	str	r2, [r7, #4]
     99e:	230f      	movs	r3, #15
     9a0:	18fb      	adds	r3, r7, r3
     9a2:	1c02      	adds	r2, r0, #0
     9a4:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
     9a6:	230f      	movs	r3, #15
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2201      	movs	r2, #1
     9ae:	4053      	eors	r3, r2
     9b0:	b2db      	uxtb	r3, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	d000      	beq.n	9b8 <assert+0x24>
		__asm("BKPT #0");
     9b6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     9b8:	46c0      	nop			; (mov r8, r8)
     9ba:	46bd      	mov	sp, r7
     9bc:	b004      	add	sp, #16
     9be:	bd80      	pop	{r7, pc}

000009c0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b084      	sub	sp, #16
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     9c8:	4b0a      	ldr	r3, [pc, #40]	; (9f4 <_sbrk+0x34>)
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d102      	bne.n	9d6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <_sbrk+0x34>)
     9d2:	4a09      	ldr	r2, [pc, #36]	; (9f8 <_sbrk+0x38>)
     9d4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     9d6:	4b07      	ldr	r3, [pc, #28]	; (9f4 <_sbrk+0x34>)
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	60fb      	str	r3, [r7, #12]

	heap += incr;
     9dc:	4b05      	ldr	r3, [pc, #20]	; (9f4 <_sbrk+0x34>)
     9de:	681a      	ldr	r2, [r3, #0]
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	18d2      	adds	r2, r2, r3
     9e4:	4b03      	ldr	r3, [pc, #12]	; (9f4 <_sbrk+0x34>)
     9e6:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
     9e8:	68fb      	ldr	r3, [r7, #12]
}
     9ea:	0018      	movs	r0, r3
     9ec:	46bd      	mov	sp, r7
     9ee:	b004      	add	sp, #16
     9f0:	bd80      	pop	{r7, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	20000b48 	.word	0x20000b48
     9f8:	20003df8 	.word	0x20003df8

000009fc <_close>:

/**
 * \brief Replacement of C library of _close
 */
extern int _close(int file)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b082      	sub	sp, #8
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
     a04:	2301      	movs	r3, #1
     a06:	425b      	negs	r3, r3
}
     a08:	0018      	movs	r0, r3
     a0a:	46bd      	mov	sp, r7
     a0c:	b002      	add	sp, #8
     a0e:	bd80      	pop	{r7, pc}

00000a10 <_fstat>:

/**
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
     a18:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
     a1a:	683b      	ldr	r3, [r7, #0]
     a1c:	2280      	movs	r2, #128	; 0x80
     a1e:	0192      	lsls	r2, r2, #6
     a20:	605a      	str	r2, [r3, #4]

	return 0;
     a22:	2300      	movs	r3, #0
}
     a24:	0018      	movs	r0, r3
     a26:	46bd      	mov	sp, r7
     a28:	b002      	add	sp, #8
     a2a:	bd80      	pop	{r7, pc}

00000a2c <_isatty>:

/**
 * \brief Replacement of C library of _isatty
 */
extern int _isatty(int file)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b082      	sub	sp, #8
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
     a34:	2301      	movs	r3, #1
}
     a36:	0018      	movs	r0, r3
     a38:	46bd      	mov	sp, r7
     a3a:	b002      	add	sp, #8
     a3c:	bd80      	pop	{r7, pc}

00000a3e <_lseek>:

/**
 * \brief Replacement of C library of _lseek
 */
extern int _lseek(int file, int ptr, int dir)
{
     a3e:	b580      	push	{r7, lr}
     a40:	b084      	sub	sp, #16
     a42:	af00      	add	r7, sp, #0
     a44:	60f8      	str	r0, [r7, #12]
     a46:	60b9      	str	r1, [r7, #8]
     a48:	607a      	str	r2, [r7, #4]
	(void)file, (void)ptr, (void)dir;
	return 0;
     a4a:	2300      	movs	r3, #0
}
     a4c:	0018      	movs	r0, r3
     a4e:	46bd      	mov	sp, r7
     a50:	b004      	add	sp, #16
     a52:	bd80      	pop	{r7, pc}

00000a54 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
     a54:	b590      	push	{r4, r7, lr}
     a56:	b083      	sub	sp, #12
     a58:	af00      	add	r7, sp, #0
     a5a:	6039      	str	r1, [r7, #0]
     a5c:	0011      	movs	r1, r2
     a5e:	1dbb      	adds	r3, r7, #6
     a60:	1c02      	adds	r2, r0, #0
     a62:	801a      	strh	r2, [r3, #0]
     a64:	1d7b      	adds	r3, r7, #5
     a66:	1c0a      	adds	r2, r1, #0
     a68:	701a      	strb	r2, [r3, #0]
	switch (power) {
     a6a:	1d7b      	adds	r3, r7, #5
     a6c:	781b      	ldrb	r3, [r3, #0]
     a6e:	3b04      	subs	r3, #4
     a70:	2b04      	cmp	r3, #4
     a72:	d859      	bhi.n	b28 <_get_cycles_for_us_internal+0xd4>
     a74:	009a      	lsls	r2, r3, #2
     a76:	4b34      	ldr	r3, [pc, #208]	; (b48 <_get_cycles_for_us_internal+0xf4>)
     a78:	18d3      	adds	r3, r2, r3
     a7a:	681b      	ldr	r3, [r3, #0]
     a7c:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
     a7e:	1dbb      	adds	r3, r7, #6
     a80:	881c      	ldrh	r4, [r3, #0]
     a82:	683a      	ldr	r2, [r7, #0]
     a84:	4b31      	ldr	r3, [pc, #196]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     a86:	4932      	ldr	r1, [pc, #200]	; (b50 <_get_cycles_for_us_internal+0xfc>)
     a88:	0010      	movs	r0, r2
     a8a:	4798      	blx	r3
     a8c:	0003      	movs	r3, r0
     a8e:	4363      	muls	r3, r4
     a90:	1e5a      	subs	r2, r3, #1
     a92:	4b2e      	ldr	r3, [pc, #184]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     a94:	210a      	movs	r1, #10
     a96:	0010      	movs	r0, r2
     a98:	4798      	blx	r3
     a9a:	0003      	movs	r3, r0
     a9c:	3301      	adds	r3, #1
     a9e:	e04e      	b.n	b3e <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
     aa0:	1dbb      	adds	r3, r7, #6
     aa2:	881c      	ldrh	r4, [r3, #0]
     aa4:	683a      	ldr	r2, [r7, #0]
     aa6:	4b29      	ldr	r3, [pc, #164]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     aa8:	492a      	ldr	r1, [pc, #168]	; (b54 <_get_cycles_for_us_internal+0x100>)
     aaa:	0010      	movs	r0, r2
     aac:	4798      	blx	r3
     aae:	0003      	movs	r3, r0
     ab0:	4363      	muls	r3, r4
     ab2:	1e5a      	subs	r2, r3, #1
     ab4:	4b25      	ldr	r3, [pc, #148]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     ab6:	2164      	movs	r1, #100	; 0x64
     ab8:	0010      	movs	r0, r2
     aba:	4798      	blx	r3
     abc:	0003      	movs	r3, r0
     abe:	3301      	adds	r3, #1
     ac0:	e03d      	b.n	b3e <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
     ac2:	1dbb      	adds	r3, r7, #6
     ac4:	881c      	ldrh	r4, [r3, #0]
     ac6:	6838      	ldr	r0, [r7, #0]
     ac8:	4b20      	ldr	r3, [pc, #128]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     aca:	22fa      	movs	r2, #250	; 0xfa
     acc:	0091      	lsls	r1, r2, #2
     ace:	4798      	blx	r3
     ad0:	0003      	movs	r3, r0
     ad2:	4363      	muls	r3, r4
     ad4:	1e58      	subs	r0, r3, #1
     ad6:	4b1d      	ldr	r3, [pc, #116]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     ad8:	22fa      	movs	r2, #250	; 0xfa
     ada:	0091      	lsls	r1, r2, #2
     adc:	4798      	blx	r3
     ade:	0003      	movs	r3, r0
     ae0:	3301      	adds	r3, #1
     ae2:	e02c      	b.n	b3e <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
     ae4:	1dbb      	adds	r3, r7, #6
     ae6:	881c      	ldrh	r4, [r3, #0]
     ae8:	683a      	ldr	r2, [r7, #0]
     aea:	4b18      	ldr	r3, [pc, #96]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     aec:	2164      	movs	r1, #100	; 0x64
     aee:	0010      	movs	r0, r2
     af0:	4798      	blx	r3
     af2:	0003      	movs	r3, r0
     af4:	4363      	muls	r3, r4
     af6:	1e5a      	subs	r2, r3, #1
     af8:	4b14      	ldr	r3, [pc, #80]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     afa:	4916      	ldr	r1, [pc, #88]	; (b54 <_get_cycles_for_us_internal+0x100>)
     afc:	0010      	movs	r0, r2
     afe:	4798      	blx	r3
     b00:	0003      	movs	r3, r0
     b02:	3301      	adds	r3, #1
     b04:	e01b      	b.n	b3e <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
     b06:	1dbb      	adds	r3, r7, #6
     b08:	881c      	ldrh	r4, [r3, #0]
     b0a:	683a      	ldr	r2, [r7, #0]
     b0c:	4b0f      	ldr	r3, [pc, #60]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     b0e:	210a      	movs	r1, #10
     b10:	0010      	movs	r0, r2
     b12:	4798      	blx	r3
     b14:	0003      	movs	r3, r0
     b16:	4363      	muls	r3, r4
     b18:	1e5a      	subs	r2, r3, #1
     b1a:	4b0c      	ldr	r3, [pc, #48]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     b1c:	490c      	ldr	r1, [pc, #48]	; (b50 <_get_cycles_for_us_internal+0xfc>)
     b1e:	0010      	movs	r0, r2
     b20:	4798      	blx	r3
     b22:	0003      	movs	r3, r0
     b24:	3301      	adds	r3, #1
     b26:	e00a      	b.n	b3e <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
     b28:	1dbb      	adds	r3, r7, #6
     b2a:	881b      	ldrh	r3, [r3, #0]
     b2c:	683a      	ldr	r2, [r7, #0]
     b2e:	4353      	muls	r3, r2
     b30:	1e5a      	subs	r2, r3, #1
     b32:	4b06      	ldr	r3, [pc, #24]	; (b4c <_get_cycles_for_us_internal+0xf8>)
     b34:	4908      	ldr	r1, [pc, #32]	; (b58 <_get_cycles_for_us_internal+0x104>)
     b36:	0010      	movs	r0, r2
     b38:	4798      	blx	r3
     b3a:	0003      	movs	r3, r0
     b3c:	3301      	adds	r3, #1
	}
}
     b3e:	0018      	movs	r0, r3
     b40:	46bd      	mov	sp, r7
     b42:	b003      	add	sp, #12
     b44:	bd90      	pop	{r4, r7, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	0001ee94 	.word	0x0001ee94
     b4c:	00017b4d 	.word	0x00017b4d
     b50:	000186a0 	.word	0x000186a0
     b54:	00002710 	.word	0x00002710
     b58:	000f4240 	.word	0x000f4240

00000b5c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
     b5c:	b590      	push	{r4, r7, lr}
     b5e:	b083      	sub	sp, #12
     b60:	af00      	add	r7, sp, #0
     b62:	6039      	str	r1, [r7, #0]
     b64:	0011      	movs	r1, r2
     b66:	1dbb      	adds	r3, r7, #6
     b68:	1c02      	adds	r2, r0, #0
     b6a:	801a      	strh	r2, [r3, #0]
     b6c:	1d7b      	adds	r3, r7, #5
     b6e:	1c0a      	adds	r2, r1, #0
     b70:	701a      	strb	r2, [r3, #0]
	switch (power) {
     b72:	1d7b      	adds	r3, r7, #5
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	3b04      	subs	r3, #4
     b78:	2b04      	cmp	r3, #4
     b7a:	d84b      	bhi.n	c14 <_get_cycles_for_ms_internal+0xb8>
     b7c:	009a      	lsls	r2, r3, #2
     b7e:	4b2d      	ldr	r3, [pc, #180]	; (c34 <_get_cycles_for_ms_internal+0xd8>)
     b80:	18d3      	adds	r3, r2, r3
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
     b86:	1dbb      	adds	r3, r7, #6
     b88:	881c      	ldrh	r4, [r3, #0]
     b8a:	683a      	ldr	r2, [r7, #0]
     b8c:	4b2a      	ldr	r3, [pc, #168]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     b8e:	492b      	ldr	r1, [pc, #172]	; (c3c <_get_cycles_for_ms_internal+0xe0>)
     b90:	0010      	movs	r0, r2
     b92:	4798      	blx	r3
     b94:	0003      	movs	r3, r0
     b96:	4363      	muls	r3, r4
     b98:	2264      	movs	r2, #100	; 0x64
     b9a:	4353      	muls	r3, r2
     b9c:	e045      	b.n	c2a <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
     b9e:	1dbb      	adds	r3, r7, #6
     ba0:	881c      	ldrh	r4, [r3, #0]
     ba2:	683a      	ldr	r2, [r7, #0]
     ba4:	4b24      	ldr	r3, [pc, #144]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     ba6:	4926      	ldr	r1, [pc, #152]	; (c40 <_get_cycles_for_ms_internal+0xe4>)
     ba8:	0010      	movs	r0, r2
     baa:	4798      	blx	r3
     bac:	0003      	movs	r3, r0
     bae:	4363      	muls	r3, r4
     bb0:	001a      	movs	r2, r3
     bb2:	0013      	movs	r3, r2
     bb4:	009b      	lsls	r3, r3, #2
     bb6:	189b      	adds	r3, r3, r2
     bb8:	005b      	lsls	r3, r3, #1
     bba:	e036      	b.n	c2a <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
     bbc:	1dbb      	adds	r3, r7, #6
     bbe:	881c      	ldrh	r4, [r3, #0]
     bc0:	6838      	ldr	r0, [r7, #0]
     bc2:	4b1d      	ldr	r3, [pc, #116]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     bc4:	22fa      	movs	r2, #250	; 0xfa
     bc6:	0091      	lsls	r1, r2, #2
     bc8:	4798      	blx	r3
     bca:	0003      	movs	r3, r0
     bcc:	4363      	muls	r3, r4
     bce:	e02c      	b.n	c2a <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
     bd0:	1dbb      	adds	r3, r7, #6
     bd2:	881c      	ldrh	r4, [r3, #0]
     bd4:	683a      	ldr	r2, [r7, #0]
     bd6:	4b18      	ldr	r3, [pc, #96]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     bd8:	2164      	movs	r1, #100	; 0x64
     bda:	0010      	movs	r0, r2
     bdc:	4798      	blx	r3
     bde:	0003      	movs	r3, r0
     be0:	4363      	muls	r3, r4
     be2:	1e5a      	subs	r2, r3, #1
     be4:	4b14      	ldr	r3, [pc, #80]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     be6:	210a      	movs	r1, #10
     be8:	0010      	movs	r0, r2
     bea:	4798      	blx	r3
     bec:	0003      	movs	r3, r0
     bee:	3301      	adds	r3, #1
     bf0:	e01b      	b.n	c2a <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
     bf2:	1dbb      	adds	r3, r7, #6
     bf4:	881c      	ldrh	r4, [r3, #0]
     bf6:	683a      	ldr	r2, [r7, #0]
     bf8:	4b0f      	ldr	r3, [pc, #60]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     bfa:	210a      	movs	r1, #10
     bfc:	0010      	movs	r0, r2
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	4363      	muls	r3, r4
     c04:	1e5a      	subs	r2, r3, #1
     c06:	4b0c      	ldr	r3, [pc, #48]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     c08:	2164      	movs	r1, #100	; 0x64
     c0a:	0010      	movs	r0, r2
     c0c:	4798      	blx	r3
     c0e:	0003      	movs	r3, r0
     c10:	3301      	adds	r3, #1
     c12:	e00a      	b.n	c2a <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
     c14:	1dbb      	adds	r3, r7, #6
     c16:	881b      	ldrh	r3, [r3, #0]
     c18:	683a      	ldr	r2, [r7, #0]
     c1a:	4353      	muls	r3, r2
     c1c:	1e58      	subs	r0, r3, #1
     c1e:	4b06      	ldr	r3, [pc, #24]	; (c38 <_get_cycles_for_ms_internal+0xdc>)
     c20:	22fa      	movs	r2, #250	; 0xfa
     c22:	0091      	lsls	r1, r2, #2
     c24:	4798      	blx	r3
     c26:	0003      	movs	r3, r0
     c28:	3301      	adds	r3, #1
	}
}
     c2a:	0018      	movs	r0, r3
     c2c:	46bd      	mov	sp, r7
     c2e:	b003      	add	sp, #12
     c30:	bd90      	pop	{r4, r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	0001eea8 	.word	0x0001eea8
     c38:	00017b4d 	.word	0x00017b4d
     c3c:	000186a0 	.word	0x000186a0
     c40:	00002710 	.word	0x00002710

00000c44 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     c44:	b580      	push	{r7, lr}
     c46:	b082      	sub	sp, #8
     c48:	af00      	add	r7, sp, #0
     c4a:	0002      	movs	r2, r0
     c4c:	1dbb      	adds	r3, r7, #6
     c4e:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
     c50:	4905      	ldr	r1, [pc, #20]	; (c68 <_get_cycles_for_ms+0x24>)
     c52:	1dbb      	adds	r3, r7, #6
     c54:	881b      	ldrh	r3, [r3, #0]
     c56:	2208      	movs	r2, #8
     c58:	0018      	movs	r0, r3
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <_get_cycles_for_ms+0x28>)
     c5c:	4798      	blx	r3
     c5e:	0003      	movs	r3, r0
}
     c60:	0018      	movs	r0, r3
     c62:	46bd      	mov	sp, r7
     c64:	b002      	add	sp, #8
     c66:	bd80      	pop	{r7, pc}
     c68:	00f42400 	.word	0x00f42400
     c6c:	00000b5d 	.word	0x00000b5d

00000c70 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
     c78:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	685a      	ldr	r2, [r3, #4]
     c7e:	683b      	ldr	r3, [r7, #0]
     c80:	005b      	lsls	r3, r3, #1
     c82:	211e      	movs	r1, #30
     c84:	400b      	ands	r3, r1
     c86:	431a      	orrs	r2, r3
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	b002      	add	sp, #8
     c92:	bd80      	pop	{r7, pc}

00000c94 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c94:	b580      	push	{r7, lr}
     c96:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
     c98:	4b0a      	ldr	r3, [pc, #40]	; (cc4 <_init_chip+0x30>)
     c9a:	2100      	movs	r1, #0
     c9c:	0018      	movs	r0, r3
     c9e:	4b0a      	ldr	r3, [pc, #40]	; (cc8 <_init_chip+0x34>)
     ca0:	4798      	blx	r3

	_set_performance_level(2);
     ca2:	2002      	movs	r0, #2
     ca4:	4b09      	ldr	r3, [pc, #36]	; (ccc <_init_chip+0x38>)
     ca6:	4798      	blx	r3

	_osc32kctrl_init_sources();
     ca8:	4b09      	ldr	r3, [pc, #36]	; (cd0 <_init_chip+0x3c>)
     caa:	4798      	blx	r3
	_oscctrl_init_sources();
     cac:	4b09      	ldr	r3, [pc, #36]	; (cd4 <_init_chip+0x40>)
     cae:	4798      	blx	r3
	_mclk_init();
     cb0:	4b09      	ldr	r3, [pc, #36]	; (cd8 <_init_chip+0x44>)
     cb2:	4798      	blx	r3
	_gclk_init_generators();
     cb4:	4b09      	ldr	r3, [pc, #36]	; (cdc <_init_chip+0x48>)
     cb6:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
     cb8:	4b09      	ldr	r3, [pc, #36]	; (ce0 <_init_chip+0x4c>)
     cba:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
     cbc:	46c0      	nop			; (mov r8, r8)
     cbe:	46bd      	mov	sp, r7
     cc0:	bd80      	pop	{r7, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	41004000 	.word	0x41004000
     cc8:	00000c71 	.word	0x00000c71
     ccc:	00001609 	.word	0x00001609
     cd0:	0000142d 	.word	0x0000142d
     cd4:	000014e1 	.word	0x000014e1
     cd8:	0000139d 	.word	0x0000139d
     cdc:	000012c1 	.word	0x000012c1
     ce0:	0000152d 	.word	0x0000152d

00000ce4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b082      	sub	sp, #8
     ce8:	af00      	add	r7, sp, #0
     cea:	0002      	movs	r2, r0
     cec:	1dfb      	adds	r3, r7, #7
     cee:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     cf0:	4b06      	ldr	r3, [pc, #24]	; (d0c <NVIC_EnableIRQ+0x28>)
     cf2:	1dfa      	adds	r2, r7, #7
     cf4:	7812      	ldrb	r2, [r2, #0]
     cf6:	0011      	movs	r1, r2
     cf8:	221f      	movs	r2, #31
     cfa:	400a      	ands	r2, r1
     cfc:	2101      	movs	r1, #1
     cfe:	4091      	lsls	r1, r2
     d00:	000a      	movs	r2, r1
     d02:	601a      	str	r2, [r3, #0]
}
     d04:	46c0      	nop			; (mov r8, r8)
     d06:	46bd      	mov	sp, r7
     d08:	b002      	add	sp, #8
     d0a:	bd80      	pop	{r7, pc}
     d0c:	e000e100 	.word	0xe000e100

00000d10 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     d10:	b580      	push	{r7, lr}
     d12:	b082      	sub	sp, #8
     d14:	af00      	add	r7, sp, #0
     d16:	0002      	movs	r2, r0
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d1c:	4a07      	ldr	r2, [pc, #28]	; (d3c <NVIC_DisableIRQ+0x2c>)
     d1e:	1dfb      	adds	r3, r7, #7
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	0019      	movs	r1, r3
     d24:	231f      	movs	r3, #31
     d26:	400b      	ands	r3, r1
     d28:	2101      	movs	r1, #1
     d2a:	4099      	lsls	r1, r3
     d2c:	000b      	movs	r3, r1
     d2e:	0019      	movs	r1, r3
     d30:	2380      	movs	r3, #128	; 0x80
     d32:	50d1      	str	r1, [r2, r3]
}
     d34:	46c0      	nop			; (mov r8, r8)
     d36:	46bd      	mov	sp, r7
     d38:	b002      	add	sp, #8
     d3a:	bd80      	pop	{r7, pc}
     d3c:	e000e100 	.word	0xe000e100

00000d40 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     d40:	b580      	push	{r7, lr}
     d42:	b082      	sub	sp, #8
     d44:	af00      	add	r7, sp, #0
     d46:	0002      	movs	r2, r0
     d48:	1dfb      	adds	r3, r7, #7
     d4a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     d4c:	4a08      	ldr	r2, [pc, #32]	; (d70 <NVIC_ClearPendingIRQ+0x30>)
     d4e:	1dfb      	adds	r3, r7, #7
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	0019      	movs	r1, r3
     d54:	231f      	movs	r3, #31
     d56:	400b      	ands	r3, r1
     d58:	2101      	movs	r1, #1
     d5a:	4099      	lsls	r1, r3
     d5c:	000b      	movs	r3, r1
     d5e:	0019      	movs	r1, r3
     d60:	23c0      	movs	r3, #192	; 0xc0
     d62:	005b      	lsls	r3, r3, #1
     d64:	50d1      	str	r1, [r2, r3]
}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	46bd      	mov	sp, r7
     d6a:	b002      	add	sp, #8
     d6c:	bd80      	pop	{r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	e000e100 	.word	0xe000e100

00000d74 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
     d74:	b580      	push	{r7, lr}
     d76:	b082      	sub	sp, #8
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
     d7c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	685b      	ldr	r3, [r3, #4]
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	4013      	ands	r3, r2
     d88:	d1fa      	bne.n	d80 <hri_eic_wait_for_sync+0xc>
	};
}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	46bd      	mov	sp, r7
     d8e:	b002      	add	sp, #8
     d90:	bd80      	pop	{r7, pc}

00000d92 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
     d92:	b580      	push	{r7, lr}
     d94:	b082      	sub	sp, #8
     d96:	af00      	add	r7, sp, #0
     d98:	6078      	str	r0, [r7, #4]
     d9a:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	683a      	ldr	r2, [r7, #0]
     da0:	611a      	str	r2, [r3, #16]
}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	46bd      	mov	sp, r7
     da6:	b002      	add	sp, #8
     da8:	bd80      	pop	{r7, pc}

00000daa <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
     daa:	b580      	push	{r7, lr}
     dac:	b082      	sub	sp, #8
     dae:	af00      	add	r7, sp, #0
     db0:	6078      	str	r0, [r7, #4]
     db2:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	683a      	ldr	r2, [r7, #0]
     db8:	60da      	str	r2, [r3, #12]
}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	46bd      	mov	sp, r7
     dbe:	b002      	add	sp, #8
     dc0:	bd80      	pop	{r7, pc}

00000dc2 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
     dc2:	b580      	push	{r7, lr}
     dc4:	b082      	sub	sp, #8
     dc6:	af00      	add	r7, sp, #0
     dc8:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	695b      	ldr	r3, [r3, #20]
}
     dce:	0018      	movs	r0, r3
     dd0:	46bd      	mov	sp, r7
     dd2:	b002      	add	sp, #8
     dd4:	bd80      	pop	{r7, pc}

00000dd6 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
     dd6:	b580      	push	{r7, lr}
     dd8:	b082      	sub	sp, #8
     dda:	af00      	add	r7, sp, #0
     ddc:	6078      	str	r0, [r7, #4]
     dde:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	683a      	ldr	r2, [r7, #0]
     de4:	615a      	str	r2, [r3, #20]
}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	46bd      	mov	sp, r7
     dea:	b002      	add	sp, #8
     dec:	bd80      	pop	{r7, pc}
	...

00000df0 <hri_eic_set_CTRLA_SWRST_bit>:

static inline void hri_eic_set_CTRLA_SWRST_bit(const void *const hw)
{
     df0:	b580      	push	{r7, lr}
     df2:	b082      	sub	sp, #8
     df4:	af00      	add	r7, sp, #0
     df6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST);
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2101      	movs	r1, #1
     dfc:	0018      	movs	r0, r3
     dfe:	4b07      	ldr	r3, [pc, #28]	; (e1c <hri_eic_set_CTRLA_SWRST_bit+0x2c>)
     e00:	4798      	blx	r3
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	b2db      	uxtb	r3, r3
     e08:	2201      	movs	r2, #1
     e0a:	4313      	orrs	r3, r2
     e0c:	b2da      	uxtb	r2, r3
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	46bd      	mov	sp, r7
     e16:	b002      	add	sp, #8
     e18:	bd80      	pop	{r7, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	00000d75 	.word	0x00000d75

00000e20 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
     e20:	b580      	push	{r7, lr}
     e22:	b082      	sub	sp, #8
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2103      	movs	r1, #3
     e2c:	0018      	movs	r0, r3
     e2e:	4b07      	ldr	r3, [pc, #28]	; (e4c <hri_eic_set_CTRLA_ENABLE_bit+0x2c>)
     e30:	4798      	blx	r3
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	2202      	movs	r2, #2
     e3a:	4313      	orrs	r3, r2
     e3c:	b2da      	uxtb	r2, r3
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	46bd      	mov	sp, r7
     e46:	b002      	add	sp, #8
     e48:	bd80      	pop	{r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00000d75 	.word	0x00000d75

00000e50 <hri_eic_get_CTRLA_ENABLE_bit>:

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
     e50:	b580      	push	{r7, lr}
     e52:	b084      	sub	sp, #16
     e54:	af00      	add	r7, sp, #0
     e56:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	2103      	movs	r1, #3
     e5c:	0018      	movs	r0, r3
     e5e:	4b0d      	ldr	r3, [pc, #52]	; (e94 <hri_eic_get_CTRLA_ENABLE_bit+0x44>)
     e60:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
     e62:	230f      	movs	r3, #15
     e64:	18fb      	adds	r3, r7, r3
     e66:	687a      	ldr	r2, [r7, #4]
     e68:	7812      	ldrb	r2, [r2, #0]
     e6a:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & EIC_CTRLA_ENABLE) >> EIC_CTRLA_ENABLE_Pos;
     e6c:	230f      	movs	r3, #15
     e6e:	18fb      	adds	r3, r7, r3
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	085b      	lsrs	r3, r3, #1
     e74:	b2da      	uxtb	r2, r3
     e76:	230f      	movs	r3, #15
     e78:	18fb      	adds	r3, r7, r3
     e7a:	2101      	movs	r1, #1
     e7c:	400a      	ands	r2, r1
     e7e:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
     e80:	230f      	movs	r3, #15
     e82:	18fb      	adds	r3, r7, r3
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	1e5a      	subs	r2, r3, #1
     e88:	4193      	sbcs	r3, r2
     e8a:	b2db      	uxtb	r3, r3
}
     e8c:	0018      	movs	r0, r3
     e8e:	46bd      	mov	sp, r7
     e90:	b004      	add	sp, #16
     e92:	bd80      	pop	{r7, pc}
     e94:	00000d75 	.word	0x00000d75

00000e98 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
     e98:	b580      	push	{r7, lr}
     e9a:	b084      	sub	sp, #16
     e9c:	af00      	add	r7, sp, #0
     e9e:	6078      	str	r0, [r7, #4]
     ea0:	000a      	movs	r2, r1
     ea2:	1cfb      	adds	r3, r7, #3
     ea4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	2103      	movs	r1, #3
     eaa:	0018      	movs	r0, r3
     eac:	4b12      	ldr	r3, [pc, #72]	; (ef8 <hri_eic_write_CTRLA_CKSEL_bit+0x60>)
     eae:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
     eb0:	230f      	movs	r3, #15
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	687a      	ldr	r2, [r7, #4]
     eb6:	7812      	ldrb	r2, [r2, #0]
     eb8:	701a      	strb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     eba:	230f      	movs	r3, #15
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	220f      	movs	r2, #15
     ec0:	18ba      	adds	r2, r7, r2
     ec2:	7812      	ldrb	r2, [r2, #0]
     ec4:	2110      	movs	r1, #16
     ec6:	438a      	bics	r2, r1
     ec8:	701a      	strb	r2, [r3, #0]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
     eca:	1cfb      	adds	r3, r7, #3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	011b      	lsls	r3, r3, #4
     ed0:	b25a      	sxtb	r2, r3
     ed2:	230f      	movs	r3, #15
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	b25b      	sxtb	r3, r3
     eda:	4313      	orrs	r3, r2
     edc:	b25a      	sxtb	r2, r3
     ede:	230f      	movs	r3, #15
     ee0:	18fb      	adds	r3, r7, r3
     ee2:	701a      	strb	r2, [r3, #0]
	((Eic *)hw)->CTRLA.reg = tmp;
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	220f      	movs	r2, #15
     ee8:	18ba      	adds	r2, r7, r2
     eea:	7812      	ldrb	r2, [r2, #0]
     eec:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	46bd      	mov	sp, r7
     ef2:	b004      	add	sp, #16
     ef4:	bd80      	pop	{r7, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00000d75 	.word	0x00000d75

00000efc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
     f04:	000a      	movs	r2, r1
     f06:	1cfb      	adds	r3, r7, #3
     f08:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	1cfa      	adds	r2, r7, #3
     f0e:	7812      	ldrb	r2, [r2, #0]
     f10:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	46bd      	mov	sp, r7
     f16:	b002      	add	sp, #8
     f18:	bd80      	pop	{r7, pc}

00000f1a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
     f1a:	b580      	push	{r7, lr}
     f1c:	b082      	sub	sp, #8
     f1e:	af00      	add	r7, sp, #0
     f20:	6078      	str	r0, [r7, #4]
     f22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	683a      	ldr	r2, [r7, #0]
     f28:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	46bd      	mov	sp, r7
     f2e:	b002      	add	sp, #8
     f30:	bd80      	pop	{r7, pc}

00000f32 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
     f32:	b580      	push	{r7, lr}
     f34:	b084      	sub	sp, #16
     f36:	af00      	add	r7, sp, #0
     f38:	60f8      	str	r0, [r7, #12]
     f3a:	607a      	str	r2, [r7, #4]
     f3c:	230b      	movs	r3, #11
     f3e:	18fb      	adds	r3, r7, r3
     f40:	1c0a      	adds	r2, r1, #0
     f42:	701a      	strb	r2, [r3, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     f44:	230b      	movs	r3, #11
     f46:	18fb      	adds	r3, r7, r3
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	68fa      	ldr	r2, [r7, #12]
     f4c:	3306      	adds	r3, #6
     f4e:	009b      	lsls	r3, r3, #2
     f50:	18d3      	adds	r3, r2, r3
     f52:	3304      	adds	r3, #4
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	601a      	str	r2, [r3, #0]
	EIC_CRITICAL_SECTION_LEAVE();
}
     f58:	46c0      	nop			; (mov r8, r8)
     f5a:	46bd      	mov	sp, r7
     f5c:	b004      	add	sp, #16
     f5e:	bd80      	pop	{r7, pc}

00000f60 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
     f60:	b580      	push	{r7, lr}
     f62:	b082      	sub	sp, #8
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
     f68:	4b23      	ldr	r3, [pc, #140]	; (ff8 <_ext_irq_init+0x98>)
     f6a:	2101      	movs	r1, #1
     f6c:	0018      	movs	r0, r3
     f6e:	4b23      	ldr	r3, [pc, #140]	; (ffc <_ext_irq_init+0x9c>)
     f70:	4798      	blx	r3
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
     f72:	4b21      	ldr	r3, [pc, #132]	; (ff8 <_ext_irq_init+0x98>)
     f74:	0018      	movs	r0, r3
     f76:	4b22      	ldr	r3, [pc, #136]	; (1000 <_ext_irq_init+0xa0>)
     f78:	4798      	blx	r3
     f7a:	1e03      	subs	r3, r0, #0
     f7c:	d002      	beq.n	f84 <_ext_irq_init+0x24>
		return ERR_DENIED;
     f7e:	2311      	movs	r3, #17
     f80:	425b      	negs	r3, r3
     f82:	e035      	b.n	ff0 <_ext_irq_init+0x90>
	}
	hri_eic_set_CTRLA_SWRST_bit(EIC);
     f84:	4b1c      	ldr	r3, [pc, #112]	; (ff8 <_ext_irq_init+0x98>)
     f86:	0018      	movs	r0, r3
     f88:	4b1e      	ldr	r3, [pc, #120]	; (1004 <_ext_irq_init+0xa4>)
     f8a:	4798      	blx	r3
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
     f8c:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <_ext_irq_init+0x98>)
     f8e:	2101      	movs	r1, #1
     f90:	0018      	movs	r0, r3
     f92:	4b1a      	ldr	r3, [pc, #104]	; (ffc <_ext_irq_init+0x9c>)
     f94:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
     f96:	4b18      	ldr	r3, [pc, #96]	; (ff8 <_ext_irq_init+0x98>)
     f98:	2100      	movs	r1, #0
     f9a:	0018      	movs	r0, r3
     f9c:	4b1a      	ldr	r3, [pc, #104]	; (1008 <_ext_irq_init+0xa8>)
     f9e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(
     fa0:	4b15      	ldr	r3, [pc, #84]	; (ff8 <_ext_irq_init+0x98>)
     fa2:	2100      	movs	r1, #0
     fa4:	0018      	movs	r0, r3
     fa6:	4b19      	ldr	r3, [pc, #100]	; (100c <_ext_irq_init+0xac>)
     fa8:	4798      	blx	r3
	    EIC, (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos) | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | 0);

	hri_eic_write_EVCTRL_reg(EIC,
     faa:	4b13      	ldr	r3, [pc, #76]	; (ff8 <_ext_irq_init+0x98>)
     fac:	2100      	movs	r1, #0
     fae:	0018      	movs	r0, r3
     fb0:	4b17      	ldr	r3, [pc, #92]	; (1010 <_ext_irq_init+0xb0>)
     fb2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14)
	                             | (CONF_EIC_EXTINTEO15 << 15)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
     fb4:	2388      	movs	r3, #136	; 0x88
     fb6:	035b      	lsls	r3, r3, #13
     fb8:	480f      	ldr	r0, [pc, #60]	; (ff8 <_ext_irq_init+0x98>)
     fba:	001a      	movs	r2, r3
     fbc:	2100      	movs	r1, #0
     fbe:	4b15      	ldr	r3, [pc, #84]	; (1014 <_ext_irq_init+0xb4>)
     fc0:	4798      	blx	r3
	                             | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos)
	                             | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
     fc2:	4a15      	ldr	r2, [pc, #84]	; (1018 <_ext_irq_init+0xb8>)
     fc4:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <_ext_irq_init+0x98>)
     fc6:	2101      	movs	r1, #1
     fc8:	0018      	movs	r0, r3
     fca:	4b12      	ldr	r3, [pc, #72]	; (1014 <_ext_irq_init+0xb4>)
     fcc:	4798      	blx	r3
	                             | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos)
	                             | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
     fce:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <_ext_irq_init+0x98>)
     fd0:	0018      	movs	r0, r3
     fd2:	4b12      	ldr	r3, [pc, #72]	; (101c <_ext_irq_init+0xbc>)
     fd4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_IRQn);
     fd6:	2003      	movs	r0, #3
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <_ext_irq_init+0xc0>)
     fda:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_IRQn);
     fdc:	2003      	movs	r0, #3
     fde:	4b11      	ldr	r3, [pc, #68]	; (1024 <_ext_irq_init+0xc4>)
     fe0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_IRQn);
     fe2:	2003      	movs	r0, #3
     fe4:	4b10      	ldr	r3, [pc, #64]	; (1028 <_ext_irq_init+0xc8>)
     fe6:	4798      	blx	r3

	callback = cb;
     fe8:	4b10      	ldr	r3, [pc, #64]	; (102c <_ext_irq_init+0xcc>)
     fea:	687a      	ldr	r2, [r7, #4]
     fec:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     fee:	2300      	movs	r3, #0
}
     ff0:	0018      	movs	r0, r3
     ff2:	46bd      	mov	sp, r7
     ff4:	b002      	add	sp, #8
     ff6:	bd80      	pop	{r7, pc}
     ff8:	40002400 	.word	0x40002400
     ffc:	00000d75 	.word	0x00000d75
    1000:	00000e51 	.word	0x00000e51
    1004:	00000df1 	.word	0x00000df1
    1008:	00000e99 	.word	0x00000e99
    100c:	00000efd 	.word	0x00000efd
    1010:	00000f1b 	.word	0x00000f1b
    1014:	00000f33 	.word	0x00000f33
    1018:	11110000 	.word	0x11110000
    101c:	00000e21 	.word	0x00000e21
    1020:	00000d11 	.word	0x00000d11
    1024:	00000d41 	.word	0x00000d41
    1028:	00000ce5 	.word	0x00000ce5
    102c:	20000b4c 	.word	0x20000b4c

00001030 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1030:	b580      	push	{r7, lr}
    1032:	b084      	sub	sp, #16
    1034:	af00      	add	r7, sp, #0
    1036:	6078      	str	r0, [r7, #4]
    1038:	000a      	movs	r2, r1
    103a:	1cfb      	adds	r3, r7, #3
    103c:	701a      	strb	r2, [r3, #0]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    103e:	230f      	movs	r3, #15
    1040:	18fb      	adds	r3, r7, r3
    1042:	22ff      	movs	r2, #255	; 0xff
    1044:	701a      	strb	r2, [r3, #0]
	uint8_t i      = 0;
    1046:	230e      	movs	r3, #14
    1048:	18fb      	adds	r3, r7, r3
    104a:	2200      	movs	r2, #0
    104c:	701a      	strb	r2, [r3, #0]

	for (; i < ARRAY_SIZE(_map); i++) {
    104e:	e01b      	b.n	1088 <_ext_irq_enable+0x58>
		if (_map[i].pin == pin) {
    1050:	230e      	movs	r3, #14
    1052:	18fb      	adds	r3, r7, r3
    1054:	781b      	ldrb	r3, [r3, #0]
    1056:	4a28      	ldr	r2, [pc, #160]	; (10f8 <_ext_irq_enable+0xc8>)
    1058:	00db      	lsls	r3, r3, #3
    105a:	18d3      	adds	r3, r2, r3
    105c:	3304      	adds	r3, #4
    105e:	681a      	ldr	r2, [r3, #0]
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	429a      	cmp	r2, r3
    1064:	d109      	bne.n	107a <_ext_irq_enable+0x4a>
			extint = _map[i].extint;
    1066:	230e      	movs	r3, #14
    1068:	18fb      	adds	r3, r7, r3
    106a:	7819      	ldrb	r1, [r3, #0]
    106c:	230f      	movs	r3, #15
    106e:	18fb      	adds	r3, r7, r3
    1070:	4a21      	ldr	r2, [pc, #132]	; (10f8 <_ext_irq_enable+0xc8>)
    1072:	00c9      	lsls	r1, r1, #3
    1074:	5c8a      	ldrb	r2, [r1, r2]
    1076:	701a      	strb	r2, [r3, #0]
			break;
    1078:	e00b      	b.n	1092 <_ext_irq_enable+0x62>
	for (; i < ARRAY_SIZE(_map); i++) {
    107a:	230e      	movs	r3, #14
    107c:	18fb      	adds	r3, r7, r3
    107e:	781a      	ldrb	r2, [r3, #0]
    1080:	230e      	movs	r3, #14
    1082:	18fb      	adds	r3, r7, r3
    1084:	3201      	adds	r2, #1
    1086:	701a      	strb	r2, [r3, #0]
    1088:	230e      	movs	r3, #14
    108a:	18fb      	adds	r3, r7, r3
    108c:	781b      	ldrb	r3, [r3, #0]
    108e:	2b05      	cmp	r3, #5
    1090:	d9de      	bls.n	1050 <_ext_irq_enable+0x20>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    1092:	230f      	movs	r3, #15
    1094:	18fb      	adds	r3, r7, r3
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2bff      	cmp	r3, #255	; 0xff
    109a:	d102      	bne.n	10a2 <_ext_irq_enable+0x72>
		return -1;
    109c:	2301      	movs	r3, #1
    109e:	425b      	negs	r3, r3
    10a0:	e026      	b.n	10f0 <_ext_irq_enable+0xc0>
	}

	if (enable) {
    10a2:	1cfb      	adds	r3, r7, #3
    10a4:	781b      	ldrb	r3, [r3, #0]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d00b      	beq.n	10c2 <_ext_irq_enable+0x92>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    10aa:	230f      	movs	r3, #15
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	781b      	ldrb	r3, [r3, #0]
    10b0:	2201      	movs	r2, #1
    10b2:	409a      	lsls	r2, r3
    10b4:	0013      	movs	r3, r2
    10b6:	4a11      	ldr	r2, [pc, #68]	; (10fc <_ext_irq_enable+0xcc>)
    10b8:	0019      	movs	r1, r3
    10ba:	0010      	movs	r0, r2
    10bc:	4b10      	ldr	r3, [pc, #64]	; (1100 <_ext_irq_enable+0xd0>)
    10be:	4798      	blx	r3
    10c0:	e015      	b.n	10ee <_ext_irq_enable+0xbe>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    10c2:	230f      	movs	r3, #15
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	2201      	movs	r2, #1
    10ca:	409a      	lsls	r2, r3
    10cc:	0013      	movs	r3, r2
    10ce:	4a0b      	ldr	r2, [pc, #44]	; (10fc <_ext_irq_enable+0xcc>)
    10d0:	0019      	movs	r1, r3
    10d2:	0010      	movs	r0, r2
    10d4:	4b0b      	ldr	r3, [pc, #44]	; (1104 <_ext_irq_enable+0xd4>)
    10d6:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    10d8:	230f      	movs	r3, #15
    10da:	18fb      	adds	r3, r7, r3
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2201      	movs	r2, #1
    10e0:	409a      	lsls	r2, r3
    10e2:	0013      	movs	r3, r2
    10e4:	4a05      	ldr	r2, [pc, #20]	; (10fc <_ext_irq_enable+0xcc>)
    10e6:	0019      	movs	r1, r3
    10e8:	0010      	movs	r0, r2
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <_ext_irq_enable+0xd8>)
    10ec:	4798      	blx	r3
	}

	return ERR_NONE;
    10ee:	2300      	movs	r3, #0
}
    10f0:	0018      	movs	r0, r3
    10f2:	46bd      	mov	sp, r7
    10f4:	b004      	add	sp, #16
    10f6:	bd80      	pop	{r7, pc}
    10f8:	0001eebc 	.word	0x0001eebc
    10fc:	40002400 	.word	0x40002400
    1100:	00000d93 	.word	0x00000d93
    1104:	00000dab 	.word	0x00000dab
    1108:	00000dd7 	.word	0x00000dd7

0000110c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    110c:	b580      	push	{r7, lr}
    110e:	b084      	sub	sp, #16
    1110:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1112:	4b53      	ldr	r3, [pc, #332]	; (1260 <_ext_irq_handler+0x154>)
    1114:	0018      	movs	r0, r3
    1116:	4b53      	ldr	r3, [pc, #332]	; (1264 <_ext_irq_handler+0x158>)
    1118:	4798      	blx	r3
    111a:	0003      	movs	r3, r0
    111c:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    111e:	2301      	movs	r3, #1
    1120:	425b      	negs	r3, r3
    1122:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	4a4e      	ldr	r2, [pc, #312]	; (1260 <_ext_irq_handler+0x154>)
    1128:	0019      	movs	r1, r3
    112a:	0010      	movs	r0, r2
    112c:	4b4e      	ldr	r3, [pc, #312]	; (1268 <_ext_irq_handler+0x15c>)
    112e:	4798      	blx	r3

	ASSERT(callback);
    1130:	4b4e      	ldr	r3, [pc, #312]	; (126c <_ext_irq_handler+0x160>)
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	1e5a      	subs	r2, r3, #1
    1136:	4193      	sbcs	r3, r2
    1138:	b2db      	uxtb	r3, r3
    113a:	494d      	ldr	r1, [pc, #308]	; (1270 <_ext_irq_handler+0x164>)
    113c:	22f0      	movs	r2, #240	; 0xf0
    113e:	0018      	movs	r0, r3
    1140:	4b4c      	ldr	r3, [pc, #304]	; (1274 <_ext_irq_handler+0x168>)
    1142:	4798      	blx	r3

	while (flags) {
    1144:	e084      	b.n	1250 <_ext_irq_handler+0x144>
		pos = ffs(flags) - 1;
    1146:	683b      	ldr	r3, [r7, #0]
    1148:	0018      	movs	r0, r3
    114a:	4b4b      	ldr	r3, [pc, #300]	; (1278 <_ext_irq_handler+0x16c>)
    114c:	4798      	blx	r3
    114e:	0003      	movs	r3, r0
    1150:	b2db      	uxtb	r3, r3
    1152:	3b01      	subs	r3, #1
    1154:	b2da      	uxtb	r2, r3
    1156:	230f      	movs	r3, #15
    1158:	18fb      	adds	r3, r7, r3
    115a:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    115c:	e066      	b.n	122c <_ext_irq_handler+0x120>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    115e:	1dfb      	adds	r3, r7, #7
    1160:	2200      	movs	r2, #0
    1162:	701a      	strb	r2, [r3, #0]
    1164:	1dbb      	adds	r3, r7, #6
    1166:	2206      	movs	r2, #6
    1168:	701a      	strb	r2, [r3, #0]

			while (upper >= lower) {
    116a:	e03b      	b.n	11e4 <_ext_irq_handler+0xd8>
				middle = (upper + lower) >> 1;
    116c:	1dbb      	adds	r3, r7, #6
    116e:	781a      	ldrb	r2, [r3, #0]
    1170:	1dfb      	adds	r3, r7, #7
    1172:	781b      	ldrb	r3, [r3, #0]
    1174:	18d3      	adds	r3, r2, r3
    1176:	105a      	asrs	r2, r3, #1
    1178:	1d7b      	adds	r3, r7, #5
    117a:	701a      	strb	r2, [r3, #0]
				if (_map[middle].extint == pos) {
    117c:	1d7b      	adds	r3, r7, #5
    117e:	781a      	ldrb	r2, [r3, #0]
    1180:	4b3e      	ldr	r3, [pc, #248]	; (127c <_ext_irq_handler+0x170>)
    1182:	00d2      	lsls	r2, r2, #3
    1184:	5cd3      	ldrb	r3, [r2, r3]
    1186:	001a      	movs	r2, r3
    1188:	230f      	movs	r3, #15
    118a:	18fb      	adds	r3, r7, r3
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	b25b      	sxtb	r3, r3
    1190:	429a      	cmp	r2, r3
    1192:	d108      	bne.n	11a6 <_ext_irq_handler+0x9a>
					pin = _map[middle].pin;
    1194:	1d7b      	adds	r3, r7, #5
    1196:	781b      	ldrb	r3, [r3, #0]
    1198:	4a38      	ldr	r2, [pc, #224]	; (127c <_ext_irq_handler+0x170>)
    119a:	00db      	lsls	r3, r3, #3
    119c:	18d3      	adds	r3, r2, r3
    119e:	3304      	adds	r3, #4
    11a0:	681b      	ldr	r3, [r3, #0]
    11a2:	60bb      	str	r3, [r7, #8]
					break;
    11a4:	e024      	b.n	11f0 <_ext_irq_handler+0xe4>
				}
				if (_map[middle].extint < pos) {
    11a6:	1d7b      	adds	r3, r7, #5
    11a8:	781a      	ldrb	r2, [r3, #0]
    11aa:	4b34      	ldr	r3, [pc, #208]	; (127c <_ext_irq_handler+0x170>)
    11ac:	00d2      	lsls	r2, r2, #3
    11ae:	5cd3      	ldrb	r3, [r2, r3]
    11b0:	001a      	movs	r2, r3
    11b2:	230f      	movs	r3, #15
    11b4:	18fb      	adds	r3, r7, r3
    11b6:	781b      	ldrb	r3, [r3, #0]
    11b8:	b25b      	sxtb	r3, r3
    11ba:	429a      	cmp	r2, r3
    11bc:	da09      	bge.n	11d2 <_ext_irq_handler+0xc6>
					lower = middle + 1;
    11be:	1dfb      	adds	r3, r7, #7
    11c0:	1d7a      	adds	r2, r7, #5
    11c2:	7812      	ldrb	r2, [r2, #0]
    11c4:	3201      	adds	r2, #1
    11c6:	701a      	strb	r2, [r3, #0]
    11c8:	1dbb      	adds	r3, r7, #6
    11ca:	1dba      	adds	r2, r7, #6
    11cc:	7812      	ldrb	r2, [r2, #0]
    11ce:	701a      	strb	r2, [r3, #0]
    11d0:	e008      	b.n	11e4 <_ext_irq_handler+0xd8>
				} else {
					upper = middle - 1;
    11d2:	1dbb      	adds	r3, r7, #6
    11d4:	1d7a      	adds	r2, r7, #5
    11d6:	7812      	ldrb	r2, [r2, #0]
    11d8:	3a01      	subs	r2, #1
    11da:	701a      	strb	r2, [r3, #0]
    11dc:	1dfb      	adds	r3, r7, #7
    11de:	1dfa      	adds	r2, r7, #7
    11e0:	7812      	ldrb	r2, [r2, #0]
    11e2:	701a      	strb	r2, [r3, #0]
			while (upper >= lower) {
    11e4:	1dba      	adds	r2, r7, #6
    11e6:	1dfb      	adds	r3, r7, #7
    11e8:	7812      	ldrb	r2, [r2, #0]
    11ea:	781b      	ldrb	r3, [r3, #0]
    11ec:	429a      	cmp	r2, r3
    11ee:	d2bd      	bcs.n	116c <_ext_irq_handler+0x60>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    11f0:	68bb      	ldr	r3, [r7, #8]
    11f2:	3301      	adds	r3, #1
    11f4:	d004      	beq.n	1200 <_ext_irq_handler+0xf4>
				callback(pin);
    11f6:	4b1d      	ldr	r3, [pc, #116]	; (126c <_ext_irq_handler+0x160>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	68ba      	ldr	r2, [r7, #8]
    11fc:	0010      	movs	r0, r2
    11fe:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1200:	230f      	movs	r3, #15
    1202:	18fb      	adds	r3, r7, r3
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	b25b      	sxtb	r3, r3
    1208:	2201      	movs	r2, #1
    120a:	409a      	lsls	r2, r3
    120c:	0013      	movs	r3, r2
    120e:	43db      	mvns	r3, r3
    1210:	683a      	ldr	r2, [r7, #0]
    1212:	4013      	ands	r3, r2
    1214:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    1216:	683b      	ldr	r3, [r7, #0]
    1218:	0018      	movs	r0, r3
    121a:	4b17      	ldr	r3, [pc, #92]	; (1278 <_ext_irq_handler+0x16c>)
    121c:	4798      	blx	r3
    121e:	0003      	movs	r3, r0
    1220:	b2db      	uxtb	r3, r3
    1222:	3b01      	subs	r3, #1
    1224:	b2da      	uxtb	r2, r3
    1226:	230f      	movs	r3, #15
    1228:	18fb      	adds	r3, r7, r3
    122a:	701a      	strb	r2, [r3, #0]
		while (-1 != pos) {
    122c:	230f      	movs	r3, #15
    122e:	18fb      	adds	r3, r7, r3
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	b25b      	sxtb	r3, r3
    1234:	3301      	adds	r3, #1
    1236:	d192      	bne.n	115e <_ext_irq_handler+0x52>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1238:	4b09      	ldr	r3, [pc, #36]	; (1260 <_ext_irq_handler+0x154>)
    123a:	0018      	movs	r0, r3
    123c:	4b09      	ldr	r3, [pc, #36]	; (1264 <_ext_irq_handler+0x158>)
    123e:	4798      	blx	r3
    1240:	0003      	movs	r3, r0
    1242:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1244:	683b      	ldr	r3, [r7, #0]
    1246:	4a06      	ldr	r2, [pc, #24]	; (1260 <_ext_irq_handler+0x154>)
    1248:	0019      	movs	r1, r3
    124a:	0010      	movs	r0, r2
    124c:	4b06      	ldr	r3, [pc, #24]	; (1268 <_ext_irq_handler+0x15c>)
    124e:	4798      	blx	r3
	while (flags) {
    1250:	683b      	ldr	r3, [r7, #0]
    1252:	2b00      	cmp	r3, #0
    1254:	d000      	beq.n	1258 <_ext_irq_handler+0x14c>
    1256:	e776      	b.n	1146 <_ext_irq_handler+0x3a>
	}
}
    1258:	46c0      	nop			; (mov r8, r8)
    125a:	46bd      	mov	sp, r7
    125c:	b004      	add	sp, #16
    125e:	bd80      	pop	{r7, pc}
    1260:	40002400 	.word	0x40002400
    1264:	00000dc3 	.word	0x00000dc3
    1268:	00000dd7 	.word	0x00000dd7
    126c:	20000b4c 	.word	0x20000b4c
    1270:	0001eeec 	.word	0x0001eeec
    1274:	00000995 	.word	0x00000995
    1278:	0001a07d 	.word	0x0001a07d
    127c:	0001eebc 	.word	0x0001eebc

00001280 <EIC_Handler>:

/**
* \brief EIC interrupt handler
*/
void EIC_Handler(void)
{
    1280:	b580      	push	{r7, lr}
    1282:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    1284:	4b02      	ldr	r3, [pc, #8]	; (1290 <EIC_Handler+0x10>)
    1286:	4798      	blx	r3
}
    1288:	46c0      	nop			; (mov r8, r8)
    128a:	46bd      	mov	sp, r7
    128c:	bd80      	pop	{r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	0000110d 	.word	0x0000110d

00001294 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
    1294:	b580      	push	{r7, lr}
    1296:	b084      	sub	sp, #16
    1298:	af00      	add	r7, sp, #0
    129a:	60f8      	str	r0, [r7, #12]
    129c:	607a      	str	r2, [r7, #4]
    129e:	230b      	movs	r3, #11
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	1c0a      	adds	r2, r1, #0
    12a4:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
    12a6:	230b      	movs	r3, #11
    12a8:	18fb      	adds	r3, r7, r3
    12aa:	781a      	ldrb	r2, [r3, #0]
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	3208      	adds	r2, #8
    12b0:	0092      	lsls	r2, r2, #2
    12b2:	6879      	ldr	r1, [r7, #4]
    12b4:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	46bd      	mov	sp, r7
    12ba:	b004      	add	sp, #16
    12bc:	bd80      	pop	{r7, pc}
	...

000012c0 <_gclk_init_generators>:
/**
 * \brief Initializes generators

 */
void _gclk_init_generators(void)
{
    12c0:	b580      	push	{r7, lr}
    12c2:	af00      	add	r7, sp, #0

#if CONF_GCLK_GEN_0_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    12c4:	4a19      	ldr	r2, [pc, #100]	; (132c <_gclk_init_generators+0x6c>)
    12c6:	4b1a      	ldr	r3, [pc, #104]	; (1330 <_gclk_init_generators+0x70>)
    12c8:	2100      	movs	r1, #0
    12ca:	0018      	movs	r0, r3
    12cc:	4b19      	ldr	r3, [pc, #100]	; (1334 <_gclk_init_generators+0x74>)
    12ce:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_0_SOURCE);
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    12d0:	4a16      	ldr	r2, [pc, #88]	; (132c <_gclk_init_generators+0x6c>)
    12d2:	4b17      	ldr	r3, [pc, #92]	; (1330 <_gclk_init_generators+0x70>)
    12d4:	2101      	movs	r1, #1
    12d6:	0018      	movs	r0, r3
    12d8:	4b16      	ldr	r3, [pc, #88]	; (1334 <_gclk_init_generators+0x74>)
    12da:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_1_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_1_SOURCE);
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    12dc:	4a16      	ldr	r2, [pc, #88]	; (1338 <_gclk_init_generators+0x78>)
    12de:	4b14      	ldr	r3, [pc, #80]	; (1330 <_gclk_init_generators+0x70>)
    12e0:	2102      	movs	r1, #2
    12e2:	0018      	movs	r0, r3
    12e4:	4b13      	ldr	r3, [pc, #76]	; (1334 <_gclk_init_generators+0x74>)
    12e6:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_2_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_2_SOURCE);
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    12e8:	4a14      	ldr	r2, [pc, #80]	; (133c <_gclk_init_generators+0x7c>)
    12ea:	4b11      	ldr	r3, [pc, #68]	; (1330 <_gclk_init_generators+0x70>)
    12ec:	2103      	movs	r1, #3
    12ee:	0018      	movs	r0, r3
    12f0:	4b10      	ldr	r3, [pc, #64]	; (1334 <_gclk_init_generators+0x74>)
    12f2:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_3_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_3_SOURCE);
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    12f4:	4a0d      	ldr	r2, [pc, #52]	; (132c <_gclk_init_generators+0x6c>)
    12f6:	4b0e      	ldr	r3, [pc, #56]	; (1330 <_gclk_init_generators+0x70>)
    12f8:	2104      	movs	r1, #4
    12fa:	0018      	movs	r0, r3
    12fc:	4b0d      	ldr	r3, [pc, #52]	; (1334 <_gclk_init_generators+0x74>)
    12fe:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_4_SOURCE);
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    1300:	4a0a      	ldr	r2, [pc, #40]	; (132c <_gclk_init_generators+0x6c>)
    1302:	4b0b      	ldr	r3, [pc, #44]	; (1330 <_gclk_init_generators+0x70>)
    1304:	2105      	movs	r1, #5
    1306:	0018      	movs	r0, r3
    1308:	4b0a      	ldr	r3, [pc, #40]	; (1334 <_gclk_init_generators+0x74>)
    130a:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_5_SOURCE);
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    130c:	4a07      	ldr	r2, [pc, #28]	; (132c <_gclk_init_generators+0x6c>)
    130e:	4b08      	ldr	r3, [pc, #32]	; (1330 <_gclk_init_generators+0x70>)
    1310:	2106      	movs	r1, #6
    1312:	0018      	movs	r0, r3
    1314:	4b07      	ldr	r3, [pc, #28]	; (1334 <_gclk_init_generators+0x74>)
    1316:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_6_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_6_SOURCE);
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	hri_gclk_write_GENCTRL_reg(GCLK,
    1318:	4a04      	ldr	r2, [pc, #16]	; (132c <_gclk_init_generators+0x6c>)
    131a:	4b05      	ldr	r3, [pc, #20]	; (1330 <_gclk_init_generators+0x70>)
    131c:	2107      	movs	r1, #7
    131e:	0018      	movs	r0, r3
    1320:	4b04      	ldr	r3, [pc, #16]	; (1334 <_gclk_init_generators+0x74>)
    1322:	4798      	blx	r3
	                               | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos)
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SOURCE);
#endif
}
    1324:	46c0      	nop			; (mov r8, r8)
    1326:	46bd      	mov	sp, r7
    1328:	bd80      	pop	{r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	00010106 	.word	0x00010106
    1330:	40001800 	.word	0x40001800
    1334:	00001295 	.word	0x00001295
    1338:	00011106 	.word	0x00011106
    133c:	00010103 	.word	0x00010103

00001340 <hri_mclk_write_CPUDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
    1348:	000a      	movs	r2, r1
    134a:	1cfb      	adds	r3, r7, #3
    134c:	701a      	strb	r2, [r3, #0]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	1cfa      	adds	r2, r7, #3
    1352:	7812      	ldrb	r2, [r2, #0]
    1354:	711a      	strb	r2, [r3, #4]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	46bd      	mov	sp, r7
    135a:	b002      	add	sp, #8
    135c:	bd80      	pop	{r7, pc}

0000135e <hri_mclk_write_LPDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_mclk_write_LPDIV_reg(const void *const hw, hri_mclk_lpdiv_reg_t data)
{
    135e:	b580      	push	{r7, lr}
    1360:	b082      	sub	sp, #8
    1362:	af00      	add	r7, sp, #0
    1364:	6078      	str	r0, [r7, #4]
    1366:	000a      	movs	r2, r1
    1368:	1cfb      	adds	r3, r7, #3
    136a:	701a      	strb	r2, [r3, #0]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->LPDIV.reg = data;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	1cfa      	adds	r2, r7, #3
    1370:	7812      	ldrb	r2, [r2, #0]
    1372:	715a      	strb	r2, [r3, #5]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1374:	46c0      	nop			; (mov r8, r8)
    1376:	46bd      	mov	sp, r7
    1378:	b002      	add	sp, #8
    137a:	bd80      	pop	{r7, pc}

0000137c <hri_mclk_write_BUPDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_mclk_write_BUPDIV_reg(const void *const hw, hri_mclk_bupdiv_reg_t data)
{
    137c:	b580      	push	{r7, lr}
    137e:	b082      	sub	sp, #8
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
    1384:	000a      	movs	r2, r1
    1386:	1cfb      	adds	r3, r7, #3
    1388:	701a      	strb	r2, [r3, #0]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->BUPDIV.reg = data;
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	1cfa      	adds	r2, r7, #3
    138e:	7812      	ldrb	r2, [r2, #0]
    1390:	719a      	strb	r2, [r3, #6]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	46bd      	mov	sp, r7
    1396:	b002      	add	sp, #8
    1398:	bd80      	pop	{r7, pc}
	...

0000139c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    13a2:	4b0a      	ldr	r3, [pc, #40]	; (13cc <_mclk_init+0x30>)
    13a4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	2108      	movs	r1, #8
    13aa:	0018      	movs	r0, r3
    13ac:	4b08      	ldr	r3, [pc, #32]	; (13d0 <_mclk_init+0x34>)
    13ae:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2104      	movs	r1, #4
    13b4:	0018      	movs	r0, r3
    13b6:	4b07      	ldr	r3, [pc, #28]	; (13d4 <_mclk_init+0x38>)
    13b8:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	2101      	movs	r1, #1
    13be:	0018      	movs	r0, r3
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <_mclk_init+0x3c>)
    13c2:	4798      	blx	r3
}
    13c4:	46c0      	nop			; (mov r8, r8)
    13c6:	46bd      	mov	sp, r7
    13c8:	b002      	add	sp, #8
    13ca:	bd80      	pop	{r7, pc}
    13cc:	40000400 	.word	0x40000400
    13d0:	0000137d 	.word	0x0000137d
    13d4:	0000135f 	.word	0x0000135f
    13d8:	00001341 	.word	0x00001341

000013dc <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    13dc:	b580      	push	{r7, lr}
    13de:	b082      	sub	sp, #8
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
    13e4:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	683a      	ldr	r2, [r7, #0]
    13ea:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    13ec:	46c0      	nop			; (mov r8, r8)
    13ee:	46bd      	mov	sp, r7
    13f0:	b002      	add	sp, #8
    13f2:	bd80      	pop	{r7, pc}

000013f4 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    13f4:	b580      	push	{r7, lr}
    13f6:	b082      	sub	sp, #8
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	683a      	ldr	r2, [r7, #0]
    1402:	615a      	str	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1404:	46c0      	nop			; (mov r8, r8)
    1406:	46bd      	mov	sp, r7
    1408:	b002      	add	sp, #8
    140a:	bd80      	pop	{r7, pc}

0000140c <hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit>:
{
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	68db      	ldr	r3, [r3, #12]
    1418:	2201      	movs	r2, #1
    141a:	4013      	ands	r3, r2
    141c:	1e5a      	subs	r2, r3, #1
    141e:	4193      	sbcs	r3, r2
    1420:	b2db      	uxtb	r3, r3
}
    1422:	0018      	movs	r0, r3
    1424:	46bd      	mov	sp, r7
    1426:	b002      	add	sp, #8
    1428:	bd80      	pop	{r7, pc}
	...

0000142c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    142c:	b580      	push	{r7, lr}
    142e:	b082      	sub	sp, #8
    1430:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1432:	4b0f      	ldr	r3, [pc, #60]	; (1470 <_osc32kctrl_init_sources+0x44>)
    1434:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1436:	1cbb      	adds	r3, r7, #2
    1438:	2200      	movs	r2, #0
    143a:	801a      	strh	r2, [r3, #0]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(hw,
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	2156      	movs	r1, #86	; 0x56
    1440:	0018      	movs	r0, r3
    1442:	4b0c      	ldr	r3, [pc, #48]	; (1474 <_osc32kctrl_init_sources+0x48>)
    1444:	4798      	blx	r3
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	0018      	movs	r0, r3
    144c:	4b0a      	ldr	r3, [pc, #40]	; (1478 <_osc32kctrl_init_sources+0x4c>)
    144e:	4798      	blx	r3
    1450:	0003      	movs	r3, r0
    1452:	001a      	movs	r2, r3
    1454:	2301      	movs	r3, #1
    1456:	4053      	eors	r3, r2
    1458:	b2db      	uxtb	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	d1f4      	bne.n	1448 <_osc32kctrl_init_sources+0x1c>
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	2104      	movs	r1, #4
    1462:	0018      	movs	r0, r3
    1464:	4b05      	ldr	r3, [pc, #20]	; (147c <_osc32kctrl_init_sources+0x50>)
    1466:	4798      	blx	r3
	(void)calib;
}
    1468:	46c0      	nop			; (mov r8, r8)
    146a:	46bd      	mov	sp, r7
    146c:	b002      	add	sp, #8
    146e:	bd80      	pop	{r7, pc}
    1470:	40001000 	.word	0x40001000
    1474:	000013f5 	.word	0x000013f5
    1478:	0000140d 	.word	0x0000140d
    147c:	000013dd 	.word	0x000013dd

00001480 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC16MCTRL.reg ^= OSCCTRL_OSC16MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
    1486:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	7d1b      	ldrb	r3, [r3, #20]
    148c:	b2db      	uxtb	r3, r3
    148e:	2280      	movs	r2, #128	; 0x80
    1490:	4252      	negs	r2, r2
    1492:	4313      	orrs	r3, r2
    1494:	b2da      	uxtb	r2, r3
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	46bd      	mov	sp, r7
    149e:	b002      	add	sp, #8
    14a0:	bd80      	pop	{r7, pc}

000014a2 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    14a2:	b580      	push	{r7, lr}
    14a4:	b082      	sub	sp, #8
    14a6:	af00      	add	r7, sp, #0
    14a8:	6078      	str	r0, [r7, #4]
    14aa:	000a      	movs	r2, r1
    14ac:	1cfb      	adds	r3, r7, #3
    14ae:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	1cfa      	adds	r2, r7, #3
    14b4:	7812      	ldrb	r2, [r2, #0]
    14b6:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    14b8:	46c0      	nop			; (mov r8, r8)
    14ba:	46bd      	mov	sp, r7
    14bc:	b002      	add	sp, #8
    14be:	bd80      	pop	{r7, pc}

000014c0 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
    14c6:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	68db      	ldr	r3, [r3, #12]
    14cc:	091b      	lsrs	r3, r3, #4
    14ce:	2201      	movs	r2, #1
    14d0:	4013      	ands	r3, r2
    14d2:	1e5a      	subs	r2, r3, #1
    14d4:	4193      	sbcs	r3, r2
    14d6:	b2db      	uxtb	r3, r3
}
    14d8:	0018      	movs	r0, r3
    14da:	46bd      	mov	sp, r7
    14dc:	b002      	add	sp, #8
    14de:	bd80      	pop	{r7, pc}

000014e0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b082      	sub	sp, #8
    14e4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    14e6:	4b0d      	ldr	r3, [pc, #52]	; (151c <_oscctrl_init_sources+0x3c>)
    14e8:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	218e      	movs	r1, #142	; 0x8e
    14ee:	0018      	movs	r0, r3
    14f0:	4b0b      	ldr	r3, [pc, #44]	; (1520 <_oscctrl_init_sources+0x40>)
    14f2:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    14f4:	46c0      	nop			; (mov r8, r8)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	0018      	movs	r0, r3
    14fa:	4b0a      	ldr	r3, [pc, #40]	; (1524 <_oscctrl_init_sources+0x44>)
    14fc:	4798      	blx	r3
    14fe:	0003      	movs	r3, r0
    1500:	001a      	movs	r2, r3
    1502:	2301      	movs	r3, #1
    1504:	4053      	eors	r3, r2
    1506:	b2db      	uxtb	r3, r3
    1508:	2b00      	cmp	r3, #0
    150a:	d1f4      	bne.n	14f6 <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	0018      	movs	r0, r3
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <_oscctrl_init_sources+0x48>)
    1512:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    1514:	46c0      	nop			; (mov r8, r8)
    1516:	46bd      	mov	sp, r7
    1518:	b002      	add	sp, #8
    151a:	bd80      	pop	{r7, pc}
    151c:	40000c00 	.word	0x40000c00
    1520:	000014a3 	.word	0x000014a3
    1524:	000014c1 	.word	0x000014c1
    1528:	00001481 	.word	0x00001481

0000152c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    152c:	b580      	push	{r7, lr}
    152e:	b082      	sub	sp, #8
    1530:	af00      	add	r7, sp, #0
	void *                     hw = (void *)OSCCTRL;
    1532:	4b03      	ldr	r3, [pc, #12]	; (1540 <_oscctrl_init_referenced_generators+0x14>)
    1534:	607b      	str	r3, [r7, #4]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	46bd      	mov	sp, r7
    153a:	b002      	add	sp, #8
    153c:	bd80      	pop	{r7, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	40000c00 	.word	0x40000c00

00001544 <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    1544:	b580      	push	{r7, lr}
    1546:	b082      	sub	sp, #8
    1548:	af00      	add	r7, sp, #0
    154a:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	799b      	ldrb	r3, [r3, #6]
    1550:	b2db      	uxtb	r3, r3
}
    1552:	0018      	movs	r0, r3
    1554:	46bd      	mov	sp, r7
    1556:	b002      	add	sp, #8
    1558:	bd80      	pop	{r7, pc}

0000155a <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    155a:	b580      	push	{r7, lr}
    155c:	b082      	sub	sp, #8
    155e:	af00      	add	r7, sp, #0
    1560:	6078      	str	r0, [r7, #4]
    1562:	000a      	movs	r2, r1
    1564:	1cfb      	adds	r3, r7, #3
    1566:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	1cfa      	adds	r2, r7, #3
    156c:	7812      	ldrb	r2, [r2, #0]
    156e:	719a      	strb	r2, [r3, #6]
}
    1570:	46c0      	nop			; (mov r8, r8)
    1572:	46bd      	mov	sp, r7
    1574:	b002      	add	sp, #8
    1576:	bd80      	pop	{r7, pc}

00001578 <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    1578:	b580      	push	{r7, lr}
    157a:	b084      	sub	sp, #16
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	000a      	movs	r2, r1
    1582:	1cfb      	adds	r3, r7, #3
    1584:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1586:	230f      	movs	r3, #15
    1588:	18fb      	adds	r3, r7, r3
    158a:	687a      	ldr	r2, [r7, #4]
    158c:	7892      	ldrb	r2, [r2, #2]
    158e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    1590:	230f      	movs	r3, #15
    1592:	18fb      	adds	r3, r7, r3
    1594:	1cfa      	adds	r2, r7, #3
    1596:	781b      	ldrb	r3, [r3, #0]
    1598:	7812      	ldrb	r2, [r2, #0]
    159a:	4013      	ands	r3, r2
    159c:	b2da      	uxtb	r2, r3
    159e:	230f      	movs	r3, #15
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	2103      	movs	r1, #3
    15a4:	400a      	ands	r2, r1
    15a6:	701a      	strb	r2, [r3, #0]
	return tmp;
    15a8:	230f      	movs	r3, #15
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	781b      	ldrb	r3, [r3, #0]
}
    15ae:	0018      	movs	r0, r3
    15b0:	46bd      	mov	sp, r7
    15b2:	b004      	add	sp, #16
    15b4:	bd80      	pop	{r7, pc}

000015b6 <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    15b6:	b580      	push	{r7, lr}
    15b8:	b084      	sub	sp, #16
    15ba:	af00      	add	r7, sp, #0
    15bc:	6078      	str	r0, [r7, #4]
    15be:	000a      	movs	r2, r1
    15c0:	1cfb      	adds	r3, r7, #3
    15c2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    15c4:	230f      	movs	r3, #15
    15c6:	18fb      	adds	r3, r7, r3
    15c8:	687a      	ldr	r2, [r7, #4]
    15ca:	7892      	ldrb	r2, [r2, #2]
    15cc:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    15ce:	230f      	movs	r3, #15
    15d0:	18fb      	adds	r3, r7, r3
    15d2:	220f      	movs	r2, #15
    15d4:	18ba      	adds	r2, r7, r2
    15d6:	7812      	ldrb	r2, [r2, #0]
    15d8:	2103      	movs	r1, #3
    15da:	438a      	bics	r2, r1
    15dc:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    15de:	1cfb      	adds	r3, r7, #3
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	2203      	movs	r2, #3
    15e4:	4013      	ands	r3, r2
    15e6:	b2d9      	uxtb	r1, r3
    15e8:	230f      	movs	r3, #15
    15ea:	18fb      	adds	r3, r7, r3
    15ec:	220f      	movs	r2, #15
    15ee:	18ba      	adds	r2, r7, r2
    15f0:	7812      	ldrb	r2, [r2, #0]
    15f2:	430a      	orrs	r2, r1
    15f4:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	220f      	movs	r2, #15
    15fa:	18ba      	adds	r2, r7, r2
    15fc:	7812      	ldrb	r2, [r2, #0]
    15fe:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    1600:	46c0      	nop			; (mov r8, r8)
    1602:	46bd      	mov	sp, r7
    1604:	b004      	add	sp, #16
    1606:	bd80      	pop	{r7, pc}

00001608 <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    1608:	b580      	push	{r7, lr}
    160a:	b082      	sub	sp, #8
    160c:	af00      	add	r7, sp, #0
    160e:	0002      	movs	r2, r0
    1610:	1dfb      	adds	r3, r7, #7
    1612:	701a      	strb	r2, [r3, #0]
	hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    1614:	2380      	movs	r3, #128	; 0x80
    1616:	05db      	lsls	r3, r3, #23
    1618:	21ff      	movs	r1, #255	; 0xff
    161a:	0018      	movs	r0, r3
    161c:	4b10      	ldr	r3, [pc, #64]	; (1660 <_set_performance_level+0x58>)
    161e:	4798      	blx	r3
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1620:	2380      	movs	r3, #128	; 0x80
    1622:	05db      	lsls	r3, r3, #23
    1624:	2103      	movs	r1, #3
    1626:	0018      	movs	r0, r3
    1628:	4b0e      	ldr	r3, [pc, #56]	; (1664 <_set_performance_level+0x5c>)
    162a:	4798      	blx	r3
    162c:	0003      	movs	r3, r0
    162e:	001a      	movs	r2, r3
    1630:	1dfb      	adds	r3, r7, #7
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	4293      	cmp	r3, r2
    1636:	d007      	beq.n	1648 <_set_performance_level+0x40>
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    1638:	1dfb      	adds	r3, r7, #7
    163a:	781a      	ldrb	r2, [r3, #0]
    163c:	2380      	movs	r3, #128	; 0x80
    163e:	05db      	lsls	r3, r3, #23
    1640:	0011      	movs	r1, r2
    1642:	0018      	movs	r0, r3
    1644:	4b08      	ldr	r3, [pc, #32]	; (1668 <_set_performance_level+0x60>)
    1646:	4798      	blx	r3
	}
	while (!hri_pm_read_INTFLAG_reg(PM))
    1648:	46c0      	nop			; (mov r8, r8)
    164a:	2380      	movs	r3, #128	; 0x80
    164c:	05db      	lsls	r3, r3, #23
    164e:	0018      	movs	r0, r3
    1650:	4b06      	ldr	r3, [pc, #24]	; (166c <_set_performance_level+0x64>)
    1652:	4798      	blx	r3
    1654:	1e03      	subs	r3, r0, #0
    1656:	d0f8      	beq.n	164a <_set_performance_level+0x42>
		;
}
    1658:	46c0      	nop			; (mov r8, r8)
    165a:	46bd      	mov	sp, r7
    165c:	b002      	add	sp, #8
    165e:	bd80      	pop	{r7, pc}
    1660:	0000155b 	.word	0x0000155b
    1664:	00001579 	.word	0x00001579
    1668:	000015b7 	.word	0x000015b7
    166c:	00001545 	.word	0x00001545

00001670 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	6078      	str	r0, [r7, #4]
    1678:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	69db      	ldr	r3, [r3, #28]
    1680:	683a      	ldr	r2, [r7, #0]
    1682:	4013      	ands	r3, r2
    1684:	d1fa      	bne.n	167c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	46bd      	mov	sp, r7
    168a:	b002      	add	sp, #8
    168c:	bd80      	pop	{r7, pc}

0000168e <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    168e:	b580      	push	{r7, lr}
    1690:	b082      	sub	sp, #8
    1692:	af00      	add	r7, sp, #0
    1694:	6078      	str	r0, [r7, #4]
    1696:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	69db      	ldr	r3, [r3, #28]
    169c:	683a      	ldr	r2, [r7, #0]
    169e:	4013      	ands	r3, r2
    16a0:	1e5a      	subs	r2, r3, #1
    16a2:	4193      	sbcs	r3, r2
    16a4:	b2db      	uxtb	r3, r3
}
    16a6:	0018      	movs	r0, r3
    16a8:	46bd      	mov	sp, r7
    16aa:	b002      	add	sp, #8
    16ac:	bd80      	pop	{r7, pc}

000016ae <hri_sercomusart_wait_for_sync>:

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    16ae:	b580      	push	{r7, lr}
    16b0:	b082      	sub	sp, #8
    16b2:	af00      	add	r7, sp, #0
    16b4:	6078      	str	r0, [r7, #4]
    16b6:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    16b8:	46c0      	nop			; (mov r8, r8)
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	69db      	ldr	r3, [r3, #28]
    16be:	683a      	ldr	r2, [r7, #0]
    16c0:	4013      	ands	r3, r2
    16c2:	d1fa      	bne.n	16ba <hri_sercomusart_wait_for_sync+0xc>
	};
}
    16c4:	46c0      	nop			; (mov r8, r8)
    16c6:	46bd      	mov	sp, r7
    16c8:	b002      	add	sp, #8
    16ca:	bd80      	pop	{r7, pc}

000016cc <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b084      	sub	sp, #16
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
    16d4:	000a      	movs	r2, r1
    16d6:	1cfb      	adds	r3, r7, #3
    16d8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    16da:	230f      	movs	r3, #15
    16dc:	18fb      	adds	r3, r7, r3
    16de:	687a      	ldr	r2, [r7, #4]
    16e0:	7e12      	ldrb	r2, [r2, #24]
    16e2:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    16e4:	230f      	movs	r3, #15
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	220f      	movs	r2, #15
    16ea:	18ba      	adds	r2, r7, r2
    16ec:	1cf9      	adds	r1, r7, #3
    16ee:	7812      	ldrb	r2, [r2, #0]
    16f0:	7809      	ldrb	r1, [r1, #0]
    16f2:	400a      	ands	r2, r1
    16f4:	701a      	strb	r2, [r3, #0]
	return tmp;
    16f6:	230f      	movs	r3, #15
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	781b      	ldrb	r3, [r3, #0]
}
    16fc:	0018      	movs	r0, r3
    16fe:	46bd      	mov	sp, r7
    1700:	b004      	add	sp, #16
    1702:	bd80      	pop	{r7, pc}

00001704 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    1704:	b580      	push	{r7, lr}
    1706:	b082      	sub	sp, #8
    1708:	af00      	add	r7, sp, #0
    170a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	7e1b      	ldrb	r3, [r3, #24]
    1710:	b2db      	uxtb	r3, r3
}
    1712:	0018      	movs	r0, r3
    1714:	46bd      	mov	sp, r7
    1716:	b002      	add	sp, #8
    1718:	bd80      	pop	{r7, pc}

0000171a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    171a:	b580      	push	{r7, lr}
    171c:	b082      	sub	sp, #8
    171e:	af00      	add	r7, sp, #0
    1720:	6078      	str	r0, [r7, #4]
    1722:	000a      	movs	r2, r1
    1724:	1cfb      	adds	r3, r7, #3
    1726:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	1cfa      	adds	r2, r7, #3
    172c:	7812      	ldrb	r2, [r2, #0]
    172e:	761a      	strb	r2, [r3, #24]
}
    1730:	46c0      	nop			; (mov r8, r8)
    1732:	46bd      	mov	sp, r7
    1734:	b002      	add	sp, #8
    1736:	bd80      	pop	{r7, pc}

00001738 <hri_sercomspi_set_CTRLA_SWRST_bit>:

static inline void hri_sercomspi_set_CTRLA_SWRST_bit(const void *const hw)
{
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	2101      	movs	r1, #1
    1744:	0018      	movs	r0, r3
    1746:	4b06      	ldr	r3, [pc, #24]	; (1760 <hri_sercomspi_set_CTRLA_SWRST_bit+0x28>)
    1748:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	2201      	movs	r2, #1
    1750:	431a      	orrs	r2, r3
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	46bd      	mov	sp, r7
    175a:	b002      	add	sp, #8
    175c:	bd80      	pop	{r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001671 	.word	0x00001671

00001764 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    1764:	b580      	push	{r7, lr}
    1766:	b084      	sub	sp, #16
    1768:	af00      	add	r7, sp, #0
    176a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	2103      	movs	r1, #3
    1770:	0018      	movs	r0, r3
    1772:	4b09      	ldr	r3, [pc, #36]	; (1798 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    1774:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	681b      	ldr	r3, [r3, #0]
    177a:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	085b      	lsrs	r3, r3, #1
    1780:	2201      	movs	r2, #1
    1782:	4013      	ands	r3, r2
    1784:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	1e5a      	subs	r2, r3, #1
    178a:	4193      	sbcs	r3, r2
    178c:	b2db      	uxtb	r3, r3
}
    178e:	0018      	movs	r0, r3
    1790:	46bd      	mov	sp, r7
    1792:	b004      	add	sp, #16
    1794:	bd80      	pop	{r7, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	00001671 	.word	0x00001671

0000179c <hri_sercomspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    179c:	b580      	push	{r7, lr}
    179e:	b082      	sub	sp, #8
    17a0:	af00      	add	r7, sp, #0
    17a2:	6078      	str	r0, [r7, #4]
    17a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	683a      	ldr	r2, [r7, #0]
    17aa:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17ac:	46c0      	nop			; (mov r8, r8)
    17ae:	46bd      	mov	sp, r7
    17b0:	b002      	add	sp, #8
    17b2:	bd80      	pop	{r7, pc}

000017b4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	b082      	sub	sp, #8
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
    17bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	683a      	ldr	r2, [r7, #0]
    17c2:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17c4:	46c0      	nop			; (mov r8, r8)
    17c6:	46bd      	mov	sp, r7
    17c8:	b002      	add	sp, #8
    17ca:	bd80      	pop	{r7, pc}

000017cc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
    17d4:	000a      	movs	r2, r1
    17d6:	1cfb      	adds	r3, r7, #3
    17d8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	1cfa      	adds	r2, r7, #3
    17de:	7812      	ldrb	r2, [r2, #0]
    17e0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	46bd      	mov	sp, r7
    17e6:	b002      	add	sp, #8
    17e8:	bd80      	pop	{r7, pc}

000017ea <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    17ea:	b580      	push	{r7, lr}
    17ec:	b082      	sub	sp, #8
    17ee:	af00      	add	r7, sp, #0
    17f0:	6078      	str	r0, [r7, #4]
    17f2:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	683a      	ldr	r2, [r7, #0]
    17f8:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	46bd      	mov	sp, r7
    17fe:	b002      	add	sp, #8
    1800:	bd80      	pop	{r7, pc}

00001802 <hri_sercomspi_read_DATA_reg>:
{
	return ((Sercom *)hw)->SPI.ADDR.reg;
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    1802:	b580      	push	{r7, lr}
    1804:	b082      	sub	sp, #8
    1806:	af00      	add	r7, sp, #0
    1808:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    180a:	687b      	ldr	r3, [r7, #4]
    180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b002      	add	sp, #8
    1814:	bd80      	pop	{r7, pc}

00001816 <hri_sercomspi_write_DATA_reg>:

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    1816:	b580      	push	{r7, lr}
    1818:	b082      	sub	sp, #8
    181a:	af00      	add	r7, sp, #0
    181c:	6078      	str	r0, [r7, #4]
    181e:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	683a      	ldr	r2, [r7, #0]
    1824:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	46bd      	mov	sp, r7
    182a:	b002      	add	sp, #8
    182c:	bd80      	pop	{r7, pc}

0000182e <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    182e:	b580      	push	{r7, lr}
    1830:	b082      	sub	sp, #8
    1832:	af00      	add	r7, sp, #0
    1834:	6078      	str	r0, [r7, #4]
    1836:	000a      	movs	r2, r1
    1838:	1cfb      	adds	r3, r7, #3
    183a:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	1cfa      	adds	r2, r7, #3
    1840:	2130      	movs	r1, #48	; 0x30
    1842:	7812      	ldrb	r2, [r2, #0]
    1844:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	46bd      	mov	sp, r7
    184a:	b002      	add	sp, #8
    184c:	bd80      	pop	{r7, pc}

0000184e <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    184e:	b580      	push	{r7, lr}
    1850:	b082      	sub	sp, #8
    1852:	af00      	add	r7, sp, #0
    1854:	6078      	str	r0, [r7, #4]
    1856:	000a      	movs	r2, r1
    1858:	1cbb      	adds	r3, r7, #2
    185a:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	1cba      	adds	r2, r7, #2
    1860:	8812      	ldrh	r2, [r2, #0]
    1862:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1864:	46c0      	nop			; (mov r8, r8)
    1866:	46bd      	mov	sp, r7
    1868:	b002      	add	sp, #8
    186a:	bd80      	pop	{r7, pc}

0000186c <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    186c:	b580      	push	{r7, lr}
    186e:	b082      	sub	sp, #8
    1870:	af00      	add	r7, sp, #0
    1872:	6078      	str	r0, [r7, #4]
    1874:	000a      	movs	r2, r1
    1876:	1cbb      	adds	r3, r7, #2
    1878:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	1cba      	adds	r2, r7, #2
    187e:	8812      	ldrh	r2, [r2, #0]
    1880:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	46bd      	mov	sp, r7
    1886:	b002      	add	sp, #8
    1888:	bd80      	pop	{r7, pc}

0000188a <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    188a:	b580      	push	{r7, lr}
    188c:	b082      	sub	sp, #8
    188e:	af00      	add	r7, sp, #0
    1890:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	7e1b      	ldrb	r3, [r3, #24]
    1896:	b2db      	uxtb	r3, r3
    1898:	001a      	movs	r2, r3
    189a:	2301      	movs	r3, #1
    189c:	4013      	ands	r3, r2
    189e:	1e5a      	subs	r2, r3, #1
    18a0:	4193      	sbcs	r3, r2
    18a2:	b2db      	uxtb	r3, r3
}
    18a4:	0018      	movs	r0, r3
    18a6:	46bd      	mov	sp, r7
    18a8:	b002      	add	sp, #8
    18aa:	bd80      	pop	{r7, pc}

000018ac <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	7e1b      	ldrb	r3, [r3, #24]
    18b8:	b2db      	uxtb	r3, r3
    18ba:	089b      	lsrs	r3, r3, #2
    18bc:	2201      	movs	r2, #1
    18be:	4013      	ands	r3, r2
    18c0:	1e5a      	subs	r2, r3, #1
    18c2:	4193      	sbcs	r3, r2
    18c4:	b2db      	uxtb	r3, r3
}
    18c6:	0018      	movs	r0, r3
    18c8:	46bd      	mov	sp, r7
    18ca:	b002      	add	sp, #8
    18cc:	bd80      	pop	{r7, pc}
	...

000018d0 <hri_sercomusart_set_CTRLA_SWRST_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = mask;
}

static inline void hri_sercomusart_set_CTRLA_SWRST_bit(const void *const hw)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	af00      	add	r7, sp, #0
    18d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2101      	movs	r1, #1
    18dc:	0018      	movs	r0, r3
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <hri_sercomusart_set_CTRLA_SWRST_bit+0x28>)
    18e0:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	681b      	ldr	r3, [r3, #0]
    18e6:	2201      	movs	r2, #1
    18e8:	431a      	orrs	r2, r3
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	46bd      	mov	sp, r7
    18f2:	b002      	add	sp, #8
    18f4:	bd80      	pop	{r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	000016af 	.word	0x000016af

000018fc <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	2103      	movs	r1, #3
    1908:	0018      	movs	r0, r3
    190a:	4b06      	ldr	r3, [pc, #24]	; (1924 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    190c:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	2202      	movs	r2, #2
    1914:	431a      	orrs	r2, r3
    1916:	687b      	ldr	r3, [r7, #4]
    1918:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	46bd      	mov	sp, r7
    191e:	b002      	add	sp, #8
    1920:	bd80      	pop	{r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	000016af 	.word	0x000016af

00001928 <hri_sercomusart_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    1928:	b580      	push	{r7, lr}
    192a:	b084      	sub	sp, #16
    192c:	af00      	add	r7, sp, #0
    192e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	2103      	movs	r1, #3
    1934:	0018      	movs	r0, r3
    1936:	4b09      	ldr	r3, [pc, #36]	; (195c <hri_sercomusart_get_CTRLA_ENABLE_bit+0x34>)
    1938:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	085b      	lsrs	r3, r3, #1
    1944:	2201      	movs	r2, #1
    1946:	4013      	ands	r3, r2
    1948:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	1e5a      	subs	r2, r3, #1
    194e:	4193      	sbcs	r3, r2
    1950:	b2db      	uxtb	r3, r3
}
    1952:	0018      	movs	r0, r3
    1954:	46bd      	mov	sp, r7
    1956:	b004      	add	sp, #16
    1958:	bd80      	pop	{r7, pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	000016af 	.word	0x000016af

00001960 <hri_sercomusart_write_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    1960:	b580      	push	{r7, lr}
    1962:	b084      	sub	sp, #16
    1964:	af00      	add	r7, sp, #0
    1966:	6078      	str	r0, [r7, #4]
    1968:	000a      	movs	r2, r1
    196a:	1cfb      	adds	r3, r7, #3
    196c:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	2103      	movs	r1, #3
    1972:	0018      	movs	r0, r3
    1974:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x44>)
    1976:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	681b      	ldr	r3, [r3, #0]
    197c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	2202      	movs	r2, #2
    1982:	4393      	bics	r3, r2
    1984:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    1986:	1cfb      	adds	r3, r7, #3
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	005b      	lsls	r3, r3, #1
    198c:	001a      	movs	r2, r3
    198e:	68fb      	ldr	r3, [r7, #12]
    1990:	4313      	orrs	r3, r2
    1992:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	68fa      	ldr	r2, [r7, #12]
    1998:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	46bd      	mov	sp, r7
    199e:	b004      	add	sp, #16
    19a0:	bd80      	pop	{r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	000016af 	.word	0x000016af

000019a8 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	2103      	movs	r1, #3
    19b4:	0018      	movs	r0, r3
    19b6:	4b06      	ldr	r3, [pc, #24]	; (19d0 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    19b8:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	2202      	movs	r2, #2
    19c0:	4393      	bics	r3, r2
    19c2:	001a      	movs	r2, r3
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19c8:	46c0      	nop			; (mov r8, r8)
    19ca:	46bd      	mov	sp, r7
    19cc:	b002      	add	sp, #8
    19ce:	bd80      	pop	{r7, pc}
    19d0:	000016af 	.word	0x000016af

000019d4 <hri_sercomusart_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    19d4:	b580      	push	{r7, lr}
    19d6:	b082      	sub	sp, #8
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
    19dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	683a      	ldr	r2, [r7, #0]
    19e2:	601a      	str	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	b002      	add	sp, #8
    19ea:	bd80      	pop	{r7, pc}

000019ec <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
    19f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	683a      	ldr	r2, [r7, #0]
    19fa:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	46bd      	mov	sp, r7
    1a00:	b002      	add	sp, #8
    1a02:	bd80      	pop	{r7, pc}

00001a04 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]
    1a0c:	000a      	movs	r2, r1
    1a0e:	1cfb      	adds	r3, r7, #3
    1a10:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	1cfa      	adds	r2, r7, #3
    1a16:	7812      	ldrb	r2, [r2, #0]
    1a18:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	46bd      	mov	sp, r7
    1a1e:	b002      	add	sp, #8
    1a20:	bd80      	pop	{r7, pc}

00001a22 <hri_sercomusart_read_DATA_reg>:
{
	return ((Sercom *)hw)->USART.RXPL.reg;
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1a22:	b580      	push	{r7, lr}
    1a24:	b082      	sub	sp, #8
    1a26:	af00      	add	r7, sp, #0
    1a28:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a2e:	b29b      	uxth	r3, r3
}
    1a30:	0018      	movs	r0, r3
    1a32:	46bd      	mov	sp, r7
    1a34:	b002      	add	sp, #8
    1a36:	bd80      	pop	{r7, pc}

00001a38 <hri_sercomusart_write_DATA_reg>:

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	b082      	sub	sp, #8
    1a3c:	af00      	add	r7, sp, #0
    1a3e:	6078      	str	r0, [r7, #4]
    1a40:	000a      	movs	r2, r1
    1a42:	1cbb      	adds	r3, r7, #2
    1a44:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	1cba      	adds	r2, r7, #2
    1a4a:	8812      	ldrh	r2, [r2, #0]
    1a4c:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	46bd      	mov	sp, r7
    1a52:	b002      	add	sp, #8
    1a54:	bd80      	pop	{r7, pc}

00001a56 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1a56:	b580      	push	{r7, lr}
    1a58:	b082      	sub	sp, #8
    1a5a:	af00      	add	r7, sp, #0
    1a5c:	6078      	str	r0, [r7, #4]
    1a5e:	000a      	movs	r2, r1
    1a60:	1cfb      	adds	r3, r7, #3
    1a62:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	1cfa      	adds	r2, r7, #3
    1a68:	2130      	movs	r1, #48	; 0x30
    1a6a:	7812      	ldrb	r2, [r2, #0]
    1a6c:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	46bd      	mov	sp, r7
    1a72:	b002      	add	sp, #8
    1a74:	bd80      	pop	{r7, pc}
	...

00001a78 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	b082      	sub	sp, #8
    1a7c:	af00      	add	r7, sp, #0
    1a7e:	6078      	str	r0, [r7, #4]
    1a80:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	1e5a      	subs	r2, r3, #1
    1a86:	4193      	sbcs	r3, r2
    1a88:	b2db      	uxtb	r3, r3
    1a8a:	4908      	ldr	r1, [pc, #32]	; (1aac <_usart_sync_init+0x34>)
    1a8c:	22bf      	movs	r2, #191	; 0xbf
    1a8e:	0018      	movs	r0, r3
    1a90:	4b07      	ldr	r3, [pc, #28]	; (1ab0 <_usart_sync_init+0x38>)
    1a92:	4798      	blx	r3

	device->hw = hw;
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	683a      	ldr	r2, [r7, #0]
    1a98:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    1a9a:	683b      	ldr	r3, [r7, #0]
    1a9c:	0018      	movs	r0, r3
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <_usart_sync_init+0x3c>)
    1aa0:	4798      	blx	r3
    1aa2:	0003      	movs	r3, r0
}
    1aa4:	0018      	movs	r0, r3
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b002      	add	sp, #8
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	0001ef20 	.word	0x0001ef20
    1ab0:	00000995 	.word	0x00000995
    1ab4:	00001c45 	.word	0x00001c45

00001ab8 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b082      	sub	sp, #8
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	681b      	ldr	r3, [r3, #0]
    1ac4:	0018      	movs	r0, r3
    1ac6:	4b03      	ldr	r3, [pc, #12]	; (1ad4 <_usart_sync_enable+0x1c>)
    1ac8:	4798      	blx	r3
}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	46bd      	mov	sp, r7
    1ace:	b002      	add	sp, #8
    1ad0:	bd80      	pop	{r7, pc}
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	000018fd 	.word	0x000018fd

00001ad8 <_usart_sync_set_baud_rate>:

/**
 * \brief Set baud rate
 */
void _usart_sync_set_baud_rate(struct _usart_sync_device *const device, const uint32_t baud_rate)
{
    1ad8:	b580      	push	{r7, lr}
    1ada:	b082      	sub	sp, #8
    1adc:	af00      	add	r7, sp, #0
    1ade:	6078      	str	r0, [r7, #4]
    1ae0:	6039      	str	r1, [r7, #0]
	_usart_set_baud_rate(device->hw, baud_rate);
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	683a      	ldr	r2, [r7, #0]
    1ae8:	0011      	movs	r1, r2
    1aea:	0018      	movs	r0, r3
    1aec:	4b02      	ldr	r3, [pc, #8]	; (1af8 <_usart_sync_set_baud_rate+0x20>)
    1aee:	4798      	blx	r3
}
    1af0:	46c0      	nop			; (mov r8, r8)
    1af2:	46bd      	mov	sp, r7
    1af4:	b002      	add	sp, #8
    1af6:	bd80      	pop	{r7, pc}
    1af8:	00001dfd 	.word	0x00001dfd

00001afc <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b082      	sub	sp, #8
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	000a      	movs	r2, r1
    1b06:	1cfb      	adds	r3, r7, #3
    1b08:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	681a      	ldr	r2, [r3, #0]
    1b0e:	1cfb      	adds	r3, r7, #3
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	b29b      	uxth	r3, r3
    1b14:	0019      	movs	r1, r3
    1b16:	0010      	movs	r0, r2
    1b18:	4b02      	ldr	r3, [pc, #8]	; (1b24 <_usart_sync_write_byte+0x28>)
    1b1a:	4798      	blx	r3
}
    1b1c:	46c0      	nop			; (mov r8, r8)
    1b1e:	46bd      	mov	sp, r7
    1b20:	b002      	add	sp, #8
    1b22:	bd80      	pop	{r7, pc}
    1b24:	00001a39 	.word	0x00001a39

00001b28 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	0018      	movs	r0, r3
    1b36:	4b04      	ldr	r3, [pc, #16]	; (1b48 <_usart_sync_read_byte+0x20>)
    1b38:	4798      	blx	r3
    1b3a:	0003      	movs	r3, r0
    1b3c:	b2db      	uxtb	r3, r3
}
    1b3e:	0018      	movs	r0, r3
    1b40:	46bd      	mov	sp, r7
    1b42:	b002      	add	sp, #8
    1b44:	bd80      	pop	{r7, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00001a23 	.word	0x00001a23

00001b4c <_usart_sync_is_byte_sent>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	0018      	movs	r0, r3
    1b5a:	4b03      	ldr	r3, [pc, #12]	; (1b68 <_usart_sync_is_byte_sent+0x1c>)
    1b5c:	4798      	blx	r3
    1b5e:	0003      	movs	r3, r0
}
    1b60:	0018      	movs	r0, r3
    1b62:	46bd      	mov	sp, r7
    1b64:	b002      	add	sp, #8
    1b66:	bd80      	pop	{r7, pc}
    1b68:	0000188b 	.word	0x0000188b

00001b6c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b082      	sub	sp, #8
    1b70:	af00      	add	r7, sp, #0
    1b72:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	0018      	movs	r0, r3
    1b7a:	4b03      	ldr	r3, [pc, #12]	; (1b88 <_usart_sync_is_byte_received+0x1c>)
    1b7c:	4798      	blx	r3
    1b7e:	0003      	movs	r3, r0
}
    1b80:	0018      	movs	r0, r3
    1b82:	46bd      	mov	sp, r7
    1b84:	b002      	add	sp, #8
    1b86:	bd80      	pop	{r7, pc}
    1b88:	000018ad 	.word	0x000018ad

00001b8c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

#if defined __SAML21E18B__ || defined __ATSAML21E18B__ || defined __SAML21G18B__ || defined __ATSAML21G18B__           \
    || defined __SAML21J18B__ || defined __ATSAML21J18B__ || defined __ATSAMR30G18A__ || defined __ATSAMR30E18A__
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	4a08      	ldr	r2, [pc, #32]	; (1bb8 <_sercom_get_hardware_index+0x2c>)
    1b98:	4293      	cmp	r3, r2
    1b9a:	d101      	bne.n	1ba0 <_sercom_get_hardware_index+0x14>
		return 5;
    1b9c:	2305      	movs	r3, #5
    1b9e:	e006      	b.n	1bae <_sercom_get_hardware_index+0x22>
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	22be      	movs	r2, #190	; 0xbe
    1ba4:	0612      	lsls	r2, r2, #24
    1ba6:	4694      	mov	ip, r2
    1ba8:	4463      	add	r3, ip
    1baa:	0a9b      	lsrs	r3, r3, #10
    1bac:	b2db      	uxtb	r3, r3
}
    1bae:	0018      	movs	r0, r3
    1bb0:	46bd      	mov	sp, r7
    1bb2:	b002      	add	sp, #8
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	43000400 	.word	0x43000400

00001bbc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1bbc:	b590      	push	{r4, r7, lr}
    1bbe:	b085      	sub	sp, #20
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1bc4:	230e      	movs	r3, #14
    1bc6:	18fc      	adds	r4, r7, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	0018      	movs	r0, r3
    1bcc:	4b19      	ldr	r3, [pc, #100]	; (1c34 <_get_sercom_index+0x78>)
    1bce:	4798      	blx	r3
    1bd0:	0003      	movs	r3, r0
    1bd2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1bd4:	230f      	movs	r3, #15
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	2200      	movs	r2, #0
    1bda:	701a      	strb	r2, [r3, #0]
    1bdc:	e018      	b.n	1c10 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    1bde:	230f      	movs	r3, #15
    1be0:	18fb      	adds	r3, r7, r3
    1be2:	781a      	ldrb	r2, [r3, #0]
    1be4:	4914      	ldr	r1, [pc, #80]	; (1c38 <_get_sercom_index+0x7c>)
    1be6:	0013      	movs	r3, r2
    1be8:	009b      	lsls	r3, r3, #2
    1bea:	189b      	adds	r3, r3, r2
    1bec:	009b      	lsls	r3, r3, #2
    1bee:	5c5b      	ldrb	r3, [r3, r1]
    1bf0:	220e      	movs	r2, #14
    1bf2:	18ba      	adds	r2, r7, r2
    1bf4:	7812      	ldrb	r2, [r2, #0]
    1bf6:	429a      	cmp	r2, r3
    1bf8:	d103      	bne.n	1c02 <_get_sercom_index+0x46>
			return i;
    1bfa:	230f      	movs	r3, #15
    1bfc:	18fb      	adds	r3, r7, r3
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	e013      	b.n	1c2a <_get_sercom_index+0x6e>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c02:	230f      	movs	r3, #15
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	781a      	ldrb	r2, [r3, #0]
    1c08:	230f      	movs	r3, #15
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	3201      	adds	r2, #1
    1c0e:	701a      	strb	r2, [r3, #0]
    1c10:	230f      	movs	r3, #15
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d0e1      	beq.n	1bde <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    1c1a:	2391      	movs	r3, #145	; 0x91
    1c1c:	009a      	lsls	r2, r3, #2
    1c1e:	4b07      	ldr	r3, [pc, #28]	; (1c3c <_get_sercom_index+0x80>)
    1c20:	0019      	movs	r1, r3
    1c22:	2000      	movs	r0, #0
    1c24:	4b06      	ldr	r3, [pc, #24]	; (1c40 <_get_sercom_index+0x84>)
    1c26:	4798      	blx	r3
	return 0;
    1c28:	2300      	movs	r3, #0
}
    1c2a:	0018      	movs	r0, r3
    1c2c:	46bd      	mov	sp, r7
    1c2e:	b005      	add	sp, #20
    1c30:	bd90      	pop	{r4, r7, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00001b8d 	.word	0x00001b8d
    1c38:	20000000 	.word	0x20000000
    1c3c:	0001ef20 	.word	0x0001ef20
    1c40:	00000995 	.word	0x00000995

00001c44 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1c44:	b590      	push	{r4, r7, lr}
    1c46:	b085      	sub	sp, #20
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1c4c:	230f      	movs	r3, #15
    1c4e:	18fc      	adds	r4, r7, r3
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	0018      	movs	r0, r3
    1c54:	4b5f      	ldr	r3, [pc, #380]	; (1dd4 <_usart_init+0x190>)
    1c56:	4798      	blx	r3
    1c58:	0003      	movs	r3, r0
    1c5a:	7023      	strb	r3, [r4, #0]

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	2101      	movs	r1, #1
    1c60:	0018      	movs	r0, r3
    1c62:	4b5d      	ldr	r3, [pc, #372]	; (1dd8 <_usart_init+0x194>)
    1c64:	4798      	blx	r3
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	0018      	movs	r0, r3
    1c6a:	4b5c      	ldr	r3, [pc, #368]	; (1ddc <_usart_init+0x198>)
    1c6c:	4798      	blx	r3
    1c6e:	1e03      	subs	r3, r0, #0
    1c70:	d002      	beq.n	1c78 <_usart_init+0x34>
		return ERR_DENIED;
    1c72:	2311      	movs	r3, #17
    1c74:	425b      	negs	r3, r3
    1c76:	e0a8      	b.n	1dca <_usart_init+0x186>
	}
	hri_sercomusart_set_CTRLA_SWRST_bit(hw);
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	0018      	movs	r0, r3
    1c7c:	4b58      	ldr	r3, [pc, #352]	; (1de0 <_usart_init+0x19c>)
    1c7e:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	2101      	movs	r1, #1
    1c84:	0018      	movs	r0, r3
    1c86:	4b54      	ldr	r3, [pc, #336]	; (1dd8 <_usart_init+0x194>)
    1c88:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1c8a:	230f      	movs	r3, #15
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	781a      	ldrb	r2, [r3, #0]
    1c90:	4954      	ldr	r1, [pc, #336]	; (1de4 <_usart_init+0x1a0>)
    1c92:	0013      	movs	r3, r2
    1c94:	009b      	lsls	r3, r3, #2
    1c96:	189b      	adds	r3, r3, r2
    1c98:	009b      	lsls	r3, r3, #2
    1c9a:	18cb      	adds	r3, r1, r3
    1c9c:	3304      	adds	r3, #4
    1c9e:	681a      	ldr	r2, [r3, #0]
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	0011      	movs	r1, r2
    1ca4:	0018      	movs	r0, r3
    1ca6:	4b50      	ldr	r3, [pc, #320]	; (1de8 <_usart_init+0x1a4>)
    1ca8:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1caa:	230f      	movs	r3, #15
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781a      	ldrb	r2, [r3, #0]
    1cb0:	494c      	ldr	r1, [pc, #304]	; (1de4 <_usart_init+0x1a0>)
    1cb2:	0013      	movs	r3, r2
    1cb4:	009b      	lsls	r3, r3, #2
    1cb6:	189b      	adds	r3, r3, r2
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	18cb      	adds	r3, r1, r3
    1cbc:	3308      	adds	r3, #8
    1cbe:	681a      	ldr	r2, [r3, #0]
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	0011      	movs	r1, r2
    1cc4:	0018      	movs	r0, r3
    1cc6:	4b49      	ldr	r3, [pc, #292]	; (1dec <_usart_init+0x1a8>)
    1cc8:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1cca:	230f      	movs	r3, #15
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	781a      	ldrb	r2, [r3, #0]
    1cd0:	4944      	ldr	r1, [pc, #272]	; (1de4 <_usart_init+0x1a0>)
    1cd2:	0013      	movs	r3, r2
    1cd4:	009b      	lsls	r3, r3, #2
    1cd6:	189b      	adds	r3, r3, r2
    1cd8:	009b      	lsls	r3, r3, #2
    1cda:	18cb      	adds	r3, r1, r3
    1cdc:	3304      	adds	r3, #4
    1cde:	681a      	ldr	r2, [r3, #0]
    1ce0:	2380      	movs	r3, #128	; 0x80
    1ce2:	019b      	lsls	r3, r3, #6
    1ce4:	4013      	ands	r3, r2
    1ce6:	d10e      	bne.n	1d06 <_usart_init+0xc2>
    1ce8:	230f      	movs	r3, #15
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781a      	ldrb	r2, [r3, #0]
    1cee:	493d      	ldr	r1, [pc, #244]	; (1de4 <_usart_init+0x1a0>)
    1cf0:	0013      	movs	r3, r2
    1cf2:	009b      	lsls	r3, r3, #2
    1cf4:	189b      	adds	r3, r3, r2
    1cf6:	009b      	lsls	r3, r3, #2
    1cf8:	18cb      	adds	r3, r1, r3
    1cfa:	3304      	adds	r3, #4
    1cfc:	681a      	ldr	r2, [r3, #0]
    1cfe:	23c0      	movs	r3, #192	; 0xc0
    1d00:	01db      	lsls	r3, r3, #7
    1d02:	4013      	ands	r3, r2
    1d04:	d030      	beq.n	1d68 <_usart_init+0x124>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1d06:	230f      	movs	r3, #15
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781a      	ldrb	r2, [r3, #0]
    1d0c:	4935      	ldr	r1, [pc, #212]	; (1de4 <_usart_init+0x1a0>)
    1d0e:	0013      	movs	r3, r2
    1d10:	009b      	lsls	r3, r3, #2
    1d12:	189b      	adds	r3, r3, r2
    1d14:	009b      	lsls	r3, r3, #2
    1d16:	18cb      	adds	r3, r1, r3
    1d18:	330c      	adds	r3, #12
    1d1a:	881b      	ldrh	r3, [r3, #0]
    1d1c:	04db      	lsls	r3, r3, #19
    1d1e:	0cdb      	lsrs	r3, r3, #19
    1d20:	b299      	uxth	r1, r3
    1d22:	687a      	ldr	r2, [r7, #4]
    1d24:	8993      	ldrh	r3, [r2, #12]
    1d26:	04c9      	lsls	r1, r1, #19
    1d28:	0cc8      	lsrs	r0, r1, #19
    1d2a:	0b5b      	lsrs	r3, r3, #13
    1d2c:	035b      	lsls	r3, r3, #13
    1d2e:	1c19      	adds	r1, r3, #0
    1d30:	1c03      	adds	r3, r0, #0
    1d32:	430b      	orrs	r3, r1
    1d34:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1d36:	230f      	movs	r3, #15
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781a      	ldrb	r2, [r3, #0]
    1d3c:	4929      	ldr	r1, [pc, #164]	; (1de4 <_usart_init+0x1a0>)
    1d3e:	0013      	movs	r3, r2
    1d40:	009b      	lsls	r3, r3, #2
    1d42:	189b      	adds	r3, r3, r2
    1d44:	009b      	lsls	r3, r3, #2
    1d46:	18cb      	adds	r3, r1, r3
    1d48:	330e      	adds	r3, #14
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	1c1a      	adds	r2, r3, #0
    1d4e:	2307      	movs	r3, #7
    1d50:	4013      	ands	r3, r2
    1d52:	b2d9      	uxtb	r1, r3
    1d54:	687a      	ldr	r2, [r7, #4]
    1d56:	8993      	ldrh	r3, [r2, #12]
    1d58:	0348      	lsls	r0, r1, #13
    1d5a:	04db      	lsls	r3, r3, #19
    1d5c:	0cdb      	lsrs	r3, r3, #19
    1d5e:	1c19      	adds	r1, r3, #0
    1d60:	1c03      	adds	r3, r0, #0
    1d62:	430b      	orrs	r3, r1
    1d64:	8193      	strh	r3, [r2, #12]
    1d66:	e00f      	b.n	1d88 <_usart_init+0x144>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d68:	230f      	movs	r3, #15
    1d6a:	18fb      	adds	r3, r7, r3
    1d6c:	781a      	ldrb	r2, [r3, #0]
    1d6e:	491d      	ldr	r1, [pc, #116]	; (1de4 <_usart_init+0x1a0>)
    1d70:	0013      	movs	r3, r2
    1d72:	009b      	lsls	r3, r3, #2
    1d74:	189b      	adds	r3, r3, r2
    1d76:	009b      	lsls	r3, r3, #2
    1d78:	18cb      	adds	r3, r1, r3
    1d7a:	330c      	adds	r3, #12
    1d7c:	881a      	ldrh	r2, [r3, #0]
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	0011      	movs	r1, r2
    1d82:	0018      	movs	r0, r3
    1d84:	4b1a      	ldr	r3, [pc, #104]	; (1df0 <_usart_init+0x1ac>)
    1d86:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d88:	230f      	movs	r3, #15
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	781a      	ldrb	r2, [r3, #0]
    1d8e:	4915      	ldr	r1, [pc, #84]	; (1de4 <_usart_init+0x1a0>)
    1d90:	0013      	movs	r3, r2
    1d92:	009b      	lsls	r3, r3, #2
    1d94:	189b      	adds	r3, r3, r2
    1d96:	009b      	lsls	r3, r3, #2
    1d98:	18cb      	adds	r3, r1, r3
    1d9a:	330f      	adds	r3, #15
    1d9c:	781a      	ldrb	r2, [r3, #0]
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	0011      	movs	r1, r2
    1da2:	0018      	movs	r0, r3
    1da4:	4b13      	ldr	r3, [pc, #76]	; (1df4 <_usart_init+0x1b0>)
    1da6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1da8:	230f      	movs	r3, #15
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	781a      	ldrb	r2, [r3, #0]
    1dae:	490d      	ldr	r1, [pc, #52]	; (1de4 <_usart_init+0x1a0>)
    1db0:	0013      	movs	r3, r2
    1db2:	009b      	lsls	r3, r3, #2
    1db4:	189b      	adds	r3, r3, r2
    1db6:	009b      	lsls	r3, r3, #2
    1db8:	18cb      	adds	r3, r1, r3
    1dba:	3310      	adds	r3, #16
    1dbc:	781a      	ldrb	r2, [r3, #0]
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	0011      	movs	r1, r2
    1dc2:	0018      	movs	r0, r3
    1dc4:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <_usart_init+0x1b4>)
    1dc6:	4798      	blx	r3

	return ERR_NONE;
    1dc8:	2300      	movs	r3, #0
}
    1dca:	0018      	movs	r0, r3
    1dcc:	46bd      	mov	sp, r7
    1dce:	b005      	add	sp, #20
    1dd0:	bd90      	pop	{r4, r7, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	00001bbd 	.word	0x00001bbd
    1dd8:	000016af 	.word	0x000016af
    1ddc:	00001929 	.word	0x00001929
    1de0:	000018d1 	.word	0x000018d1
    1de4:	20000000 	.word	0x20000000
    1de8:	000019d5 	.word	0x000019d5
    1dec:	000019ed 	.word	0x000019ed
    1df0:	0000186d 	.word	0x0000186d
    1df4:	00001a05 	.word	0x00001a05
    1df8:	00001a57 	.word	0x00001a57

00001dfc <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    1dfc:	b590      	push	{r4, r7, lr}
    1dfe:	b085      	sub	sp, #20
    1e00:	af00      	add	r7, sp, #0
    1e02:	6078      	str	r0, [r7, #4]
    1e04:	6039      	str	r1, [r7, #0]
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    1e06:	230f      	movs	r3, #15
    1e08:	18fc      	adds	r4, r7, r3
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	0018      	movs	r0, r3
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <_usart_set_baud_rate+0x68>)
    1e10:	4798      	blx	r3
    1e12:	0003      	movs	r3, r0
    1e14:	7023      	strb	r3, [r4, #0]

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	0018      	movs	r0, r3
    1e1a:	4b13      	ldr	r3, [pc, #76]	; (1e68 <_usart_set_baud_rate+0x6c>)
    1e1c:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1e1e:	2308      	movs	r3, #8
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	0018      	movs	r0, r3
    1e24:	4b11      	ldr	r3, [pc, #68]	; (1e6c <_usart_set_baud_rate+0x70>)
    1e26:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	2102      	movs	r1, #2
    1e2c:	0018      	movs	r0, r3
    1e2e:	4b10      	ldr	r3, [pc, #64]	; (1e70 <_usart_set_baud_rate+0x74>)
    1e30:	4798      	blx	r3
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    1e32:	683b      	ldr	r3, [r7, #0]
    1e34:	b29a      	uxth	r2, r3
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	0011      	movs	r1, r2
    1e3a:	0018      	movs	r0, r3
    1e3c:	4b0d      	ldr	r3, [pc, #52]	; (1e74 <_usart_set_baud_rate+0x78>)
    1e3e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1e40:	2308      	movs	r3, #8
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	0018      	movs	r0, r3
    1e46:	4b0c      	ldr	r3, [pc, #48]	; (1e78 <_usart_set_baud_rate+0x7c>)
    1e48:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    1e4a:	230f      	movs	r3, #15
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	781a      	ldrb	r2, [r3, #0]
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	0011      	movs	r1, r2
    1e54:	0018      	movs	r0, r3
    1e56:	4b09      	ldr	r3, [pc, #36]	; (1e7c <_usart_set_baud_rate+0x80>)
    1e58:	4798      	blx	r3
}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	46bd      	mov	sp, r7
    1e5e:	b005      	add	sp, #20
    1e60:	bd90      	pop	{r4, r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00001929 	.word	0x00001929
    1e68:	000019a9 	.word	0x000019a9
    1e6c:	00000141 	.word	0x00000141
    1e70:	000016af 	.word	0x000016af
    1e74:	0000186d 	.word	0x0000186d
    1e78:	00000163 	.word	0x00000163
    1e7c:	00001961 	.word	0x00001961

00001e80 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b082      	sub	sp, #8
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d004      	beq.n	1e9a <_spi_load_regs_master+0x1a>
    1e90:	683b      	ldr	r3, [r7, #0]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d001      	beq.n	1e9a <_spi_load_regs_master+0x1a>
    1e96:	2301      	movs	r3, #1
    1e98:	e000      	b.n	1e9c <_spi_load_regs_master+0x1c>
    1e9a:	2300      	movs	r3, #0
    1e9c:	1c1a      	adds	r2, r3, #0
    1e9e:	2301      	movs	r3, #1
    1ea0:	4013      	ands	r3, r2
    1ea2:	b2d8      	uxtb	r0, r3
    1ea4:	238e      	movs	r3, #142	; 0x8e
    1ea6:	011a      	lsls	r2, r3, #4
    1ea8:	4b1f      	ldr	r3, [pc, #124]	; (1f28 <_spi_load_regs_master+0xa8>)
    1eaa:	0019      	movs	r1, r3
    1eac:	4b1f      	ldr	r3, [pc, #124]	; (1f2c <_spi_load_regs_master+0xac>)
    1eae:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1eb0:	683b      	ldr	r3, [r7, #0]
    1eb2:	781a      	ldrb	r2, [r3, #0]
    1eb4:	7859      	ldrb	r1, [r3, #1]
    1eb6:	0209      	lsls	r1, r1, #8
    1eb8:	430a      	orrs	r2, r1
    1eba:	7899      	ldrb	r1, [r3, #2]
    1ebc:	0409      	lsls	r1, r1, #16
    1ebe:	430a      	orrs	r2, r1
    1ec0:	78db      	ldrb	r3, [r3, #3]
    1ec2:	061b      	lsls	r3, r3, #24
    1ec4:	4313      	orrs	r3, r2
    1ec6:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <_spi_load_regs_master+0xb0>)
    1eca:	401a      	ands	r2, r3
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	0011      	movs	r1, r2
    1ed0:	0018      	movs	r0, r3
    1ed2:	4b18      	ldr	r3, [pc, #96]	; (1f34 <_spi_load_regs_master+0xb4>)
    1ed4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    1ed6:	683b      	ldr	r3, [r7, #0]
    1ed8:	791a      	ldrb	r2, [r3, #4]
    1eda:	7959      	ldrb	r1, [r3, #5]
    1edc:	0209      	lsls	r1, r1, #8
    1ede:	430a      	orrs	r2, r1
    1ee0:	7999      	ldrb	r1, [r3, #6]
    1ee2:	0409      	lsls	r1, r1, #16
    1ee4:	430a      	orrs	r2, r1
    1ee6:	79db      	ldrb	r3, [r3, #7]
    1ee8:	061b      	lsls	r3, r3, #24
    1eea:	4313      	orrs	r3, r2
    1eec:	001a      	movs	r2, r3
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    1eee:	4b12      	ldr	r3, [pc, #72]	; (1f38 <_spi_load_regs_master+0xb8>)
    1ef0:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1ef2:	2280      	movs	r2, #128	; 0x80
    1ef4:	0292      	lsls	r2, r2, #10
    1ef6:	431a      	orrs	r2, r3
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	0011      	movs	r1, r2
    1efc:	0018      	movs	r0, r3
    1efe:	4b0f      	ldr	r3, [pc, #60]	; (1f3c <_spi_load_regs_master+0xbc>)
    1f00:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	7b1a      	ldrb	r2, [r3, #12]
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	0011      	movs	r1, r2
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b0c      	ldr	r3, [pc, #48]	; (1f40 <_spi_load_regs_master+0xc0>)
    1f0e:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1f10:	683b      	ldr	r3, [r7, #0]
    1f12:	7b5a      	ldrb	r2, [r3, #13]
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	0011      	movs	r1, r2
    1f18:	0018      	movs	r0, r3
    1f1a:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <_spi_load_regs_master+0xc4>)
    1f1c:	4798      	blx	r3
}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	46bd      	mov	sp, r7
    1f22:	b002      	add	sp, #8
    1f24:	bd80      	pop	{r7, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	0001ef20 	.word	0x0001ef20
    1f2c:	00000995 	.word	0x00000995
    1f30:	fffffefc 	.word	0xfffffefc
    1f34:	0000179d 	.word	0x0000179d
    1f38:	fffd1dbf 	.word	0xfffd1dbf
    1f3c:	000017b5 	.word	0x000017b5
    1f40:	000017cd 	.word	0x000017cd
    1f44:	0000182f 	.word	0x0000182f

00001f48 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
    1f50:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d004      	beq.n	1f62 <_spi_load_regs_slave+0x1a>
    1f58:	683b      	ldr	r3, [r7, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d001      	beq.n	1f62 <_spi_load_regs_slave+0x1a>
    1f5e:	2301      	movs	r3, #1
    1f60:	e000      	b.n	1f64 <_spi_load_regs_slave+0x1c>
    1f62:	2300      	movs	r3, #0
    1f64:	1c1a      	adds	r2, r3, #0
    1f66:	2301      	movs	r3, #1
    1f68:	4013      	ands	r3, r2
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	4a29      	ldr	r2, [pc, #164]	; (2014 <STACK_SIZE+0x14>)
    1f6e:	492a      	ldr	r1, [pc, #168]	; (2018 <STACK_SIZE+0x18>)
    1f70:	0018      	movs	r0, r3
    1f72:	4b2a      	ldr	r3, [pc, #168]	; (201c <STACK_SIZE+0x1c>)
    1f74:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1f76:	683b      	ldr	r3, [r7, #0]
    1f78:	781a      	ldrb	r2, [r3, #0]
    1f7a:	7859      	ldrb	r1, [r3, #1]
    1f7c:	0209      	lsls	r1, r1, #8
    1f7e:	430a      	orrs	r2, r1
    1f80:	7899      	ldrb	r1, [r3, #2]
    1f82:	0409      	lsls	r1, r1, #16
    1f84:	430a      	orrs	r2, r1
    1f86:	78db      	ldrb	r3, [r3, #3]
    1f88:	061b      	lsls	r3, r3, #24
    1f8a:	4313      	orrs	r3, r2
    1f8c:	001a      	movs	r2, r3
	hri_sercomspi_write_CTRLA_reg(
    1f8e:	4b24      	ldr	r3, [pc, #144]	; (2020 <STACK_SIZE+0x20>)
    1f90:	401a      	ands	r2, r3
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	0011      	movs	r1, r2
    1f96:	0018      	movs	r0, r3
    1f98:	4b22      	ldr	r3, [pc, #136]	; (2024 <STACK_SIZE+0x24>)
    1f9a:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1f9c:	683b      	ldr	r3, [r7, #0]
    1f9e:	791a      	ldrb	r2, [r3, #4]
    1fa0:	7959      	ldrb	r1, [r3, #5]
    1fa2:	0209      	lsls	r1, r1, #8
    1fa4:	430a      	orrs	r2, r1
    1fa6:	7999      	ldrb	r1, [r3, #6]
    1fa8:	0409      	lsls	r1, r1, #16
    1faa:	430a      	orrs	r2, r1
    1fac:	79db      	ldrb	r3, [r3, #7]
    1fae:	061b      	lsls	r3, r3, #24
    1fb0:	4313      	orrs	r3, r2
    1fb2:	001a      	movs	r2, r3
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1fb4:	4b1c      	ldr	r3, [pc, #112]	; (2028 <STACK_SIZE+0x28>)
    1fb6:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1fb8:	4a1c      	ldr	r2, [pc, #112]	; (202c <STACK_SIZE+0x2c>)
    1fba:	431a      	orrs	r2, r3
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	0011      	movs	r1, r2
    1fc0:	0018      	movs	r0, r3
    1fc2:	4b1b      	ldr	r3, [pc, #108]	; (2030 <STACK_SIZE+0x30>)
    1fc4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1fc6:	683b      	ldr	r3, [r7, #0]
    1fc8:	7a1a      	ldrb	r2, [r3, #8]
    1fca:	7a59      	ldrb	r1, [r3, #9]
    1fcc:	0209      	lsls	r1, r1, #8
    1fce:	430a      	orrs	r2, r1
    1fd0:	7a99      	ldrb	r1, [r3, #10]
    1fd2:	0409      	lsls	r1, r1, #16
    1fd4:	430a      	orrs	r2, r1
    1fd6:	7adb      	ldrb	r3, [r3, #11]
    1fd8:	061b      	lsls	r3, r3, #24
    1fda:	4313      	orrs	r3, r2
    1fdc:	001a      	movs	r2, r3
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	0011      	movs	r1, r2
    1fe2:	0018      	movs	r0, r3
    1fe4:	4b13      	ldr	r3, [pc, #76]	; (2034 <STACK_SIZE+0x34>)
    1fe6:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1fe8:	683b      	ldr	r3, [r7, #0]
    1fea:	7b5a      	ldrb	r2, [r3, #13]
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	0011      	movs	r1, r2
    1ff0:	0018      	movs	r0, r3
    1ff2:	4b11      	ldr	r3, [pc, #68]	; (2038 <STACK_SIZE+0x38>)
    1ff4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	2301      	movs	r3, #1
    1ffa:	425a      	negs	r2, r3
    1ffc:	687b      	ldr	r3, [r7, #4]
    1ffe:	0011      	movs	r1, r2
    2000:	0018      	movs	r0, r3
    2002:	4b0e      	ldr	r3, [pc, #56]	; (203c <STACK_SIZE+0x3c>)
    2004:	4798      	blx	r3
    2006:	1e03      	subs	r3, r0, #0
    2008:	d1f6      	bne.n	1ff8 <_spi_load_regs_slave+0xb0>
		;
}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	46bd      	mov	sp, r7
    200e:	b002      	add	sp, #8
    2010:	bd80      	pop	{r7, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	000008f4 	.word	0x000008f4
    2018:	0001ef20 	.word	0x0001ef20
    201c:	00000995 	.word	0x00000995
    2020:	fffffefc 	.word	0xfffffefc
    2024:	0000179d 	.word	0x0000179d
    2028:	fffdddbf 	.word	0xfffdddbf
    202c:	00020240 	.word	0x00020240
    2030:	000017b5 	.word	0x000017b5
    2034:	000017eb 	.word	0x000017eb
    2038:	0000182f 	.word	0x0000182f
    203c:	0000168f 	.word	0x0000168f

00002040 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    2040:	b590      	push	{r4, r7, lr}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	220e      	movs	r2, #14
    204c:	18bc      	adds	r4, r7, r2
    204e:	0018      	movs	r0, r3
    2050:	4b14      	ldr	r3, [pc, #80]	; (20a4 <_spi_get_regs+0x64>)
    2052:	4798      	blx	r3
    2054:	0003      	movs	r3, r0
    2056:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2058:	230f      	movs	r3, #15
    205a:	18fb      	adds	r3, r7, r3
    205c:	2200      	movs	r2, #0
    205e:	701a      	strb	r2, [r3, #0]
    2060:	e015      	b.n	208e <_spi_get_regs+0x4e>
		if (sercomspi_regs[i].n == n) {
    2062:	2205      	movs	r2, #5
    2064:	230e      	movs	r3, #14
    2066:	18fb      	adds	r3, r7, r3
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	4293      	cmp	r3, r2
    206c:	d108      	bne.n	2080 <_spi_get_regs+0x40>
			return &sercomspi_regs[i];
    206e:	230f      	movs	r3, #15
    2070:	18fb      	adds	r3, r7, r3
    2072:	781a      	ldrb	r2, [r3, #0]
    2074:	0013      	movs	r3, r2
    2076:	011b      	lsls	r3, r3, #4
    2078:	189b      	adds	r3, r3, r2
    207a:	4a0b      	ldr	r2, [pc, #44]	; (20a8 <_spi_get_regs+0x68>)
    207c:	189b      	adds	r3, r3, r2
    207e:	e00c      	b.n	209a <_spi_get_regs+0x5a>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2080:	230f      	movs	r3, #15
    2082:	18fb      	adds	r3, r7, r3
    2084:	781a      	ldrb	r2, [r3, #0]
    2086:	230f      	movs	r3, #15
    2088:	18fb      	adds	r3, r7, r3
    208a:	3201      	adds	r2, #1
    208c:	701a      	strb	r2, [r3, #0]
    208e:	230f      	movs	r3, #15
    2090:	18fb      	adds	r3, r7, r3
    2092:	781b      	ldrb	r3, [r3, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d0e4      	beq.n	2062 <_spi_get_regs+0x22>
		}
	}

	return NULL;
    2098:	2300      	movs	r3, #0
}
    209a:	0018      	movs	r0, r3
    209c:	46bd      	mov	sp, r7
    209e:	b005      	add	sp, #20
    20a0:	bd90      	pop	{r4, r7, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	00001b8d 	.word	0x00001b8d
    20a8:	0001ef5c 	.word	0x0001ef5c

000020ac <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b084      	sub	sp, #16
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
    20b4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    20b6:	683b      	ldr	r3, [r7, #0]
    20b8:	0018      	movs	r0, r3
    20ba:	4b3a      	ldr	r3, [pc, #232]	; (21a4 <_spi_m_sync_init+0xf8>)
    20bc:	4798      	blx	r3
    20be:	0003      	movs	r3, r0
    20c0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	2b00      	cmp	r3, #0
    20c6:	d004      	beq.n	20d2 <_spi_m_sync_init+0x26>
    20c8:	683b      	ldr	r3, [r7, #0]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d001      	beq.n	20d2 <_spi_m_sync_init+0x26>
    20ce:	2301      	movs	r3, #1
    20d0:	e000      	b.n	20d4 <_spi_m_sync_init+0x28>
    20d2:	2300      	movs	r3, #0
    20d4:	1c1a      	adds	r2, r3, #0
    20d6:	2301      	movs	r3, #1
    20d8:	4013      	ands	r3, r2
    20da:	b2db      	uxtb	r3, r3
    20dc:	4a32      	ldr	r2, [pc, #200]	; (21a8 <_spi_m_sync_init+0xfc>)
    20de:	4933      	ldr	r1, [pc, #204]	; (21ac <_spi_m_sync_init+0x100>)
    20e0:	0018      	movs	r0, r3
    20e2:	4b33      	ldr	r3, [pc, #204]	; (21b0 <_spi_m_sync_init+0x104>)
    20e4:	4798      	blx	r3

	if (regs == NULL) {
    20e6:	68fb      	ldr	r3, [r7, #12]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d102      	bne.n	20f2 <_spi_m_sync_init+0x46>
		return ERR_INVALID_ARG;
    20ec:	230d      	movs	r3, #13
    20ee:	425b      	negs	r3, r3
    20f0:	e053      	b.n	219a <_spi_m_sync_init+0xee>
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    20f2:	683b      	ldr	r3, [r7, #0]
    20f4:	2101      	movs	r1, #1
    20f6:	0018      	movs	r0, r3
    20f8:	4b2e      	ldr	r3, [pc, #184]	; (21b4 <_spi_m_sync_init+0x108>)
    20fa:	4798      	blx	r3
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    20fc:	683b      	ldr	r3, [r7, #0]
    20fe:	0018      	movs	r0, r3
    2100:	4b2d      	ldr	r3, [pc, #180]	; (21b8 <_spi_m_sync_init+0x10c>)
    2102:	4798      	blx	r3
    2104:	1e03      	subs	r3, r0, #0
    2106:	d002      	beq.n	210e <_spi_m_sync_init+0x62>
		return ERR_DENIED;
    2108:	2311      	movs	r3, #17
    210a:	425b      	negs	r3, r3
    210c:	e045      	b.n	219a <_spi_m_sync_init+0xee>
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
    210e:	683b      	ldr	r3, [r7, #0]
    2110:	0018      	movs	r0, r3
    2112:	4b2a      	ldr	r3, [pc, #168]	; (21bc <_spi_m_sync_init+0x110>)
    2114:	4798      	blx	r3
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    2116:	683b      	ldr	r3, [r7, #0]
    2118:	2101      	movs	r1, #1
    211a:	0018      	movs	r0, r3
    211c:	4b25      	ldr	r3, [pc, #148]	; (21b4 <_spi_m_sync_init+0x108>)
    211e:	4798      	blx	r3
	dev->prvt = hw;
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	683a      	ldr	r2, [r7, #0]
    2124:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2126:	68fb      	ldr	r3, [r7, #12]
    2128:	781a      	ldrb	r2, [r3, #0]
    212a:	7859      	ldrb	r1, [r3, #1]
    212c:	0209      	lsls	r1, r1, #8
    212e:	430a      	orrs	r2, r1
    2130:	7899      	ldrb	r1, [r3, #2]
    2132:	0409      	lsls	r1, r1, #16
    2134:	430a      	orrs	r2, r1
    2136:	78db      	ldrb	r3, [r3, #3]
    2138:	061b      	lsls	r3, r3, #24
    213a:	4313      	orrs	r3, r2
    213c:	001a      	movs	r2, r3
    213e:	231c      	movs	r3, #28
    2140:	4013      	ands	r3, r2
    2142:	2b08      	cmp	r3, #8
    2144:	d106      	bne.n	2154 <_spi_m_sync_init+0xa8>
		_spi_load_regs_slave(hw, regs);
    2146:	68fa      	ldr	r2, [r7, #12]
    2148:	683b      	ldr	r3, [r7, #0]
    214a:	0011      	movs	r1, r2
    214c:	0018      	movs	r0, r3
    214e:	4b1c      	ldr	r3, [pc, #112]	; (21c0 <_spi_m_sync_init+0x114>)
    2150:	4798      	blx	r3
    2152:	e005      	b.n	2160 <_spi_m_sync_init+0xb4>
	} else {
		_spi_load_regs_master(hw, regs);
    2154:	68fa      	ldr	r2, [r7, #12]
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	0011      	movs	r1, r2
    215a:	0018      	movs	r0, r3
    215c:	4b19      	ldr	r3, [pc, #100]	; (21c4 <_spi_m_sync_init+0x118>)
    215e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	791a      	ldrb	r2, [r3, #4]
    2164:	7959      	ldrb	r1, [r3, #5]
    2166:	0209      	lsls	r1, r1, #8
    2168:	430a      	orrs	r2, r1
    216a:	7999      	ldrb	r1, [r3, #6]
    216c:	0409      	lsls	r1, r1, #16
    216e:	430a      	orrs	r2, r1
    2170:	79db      	ldrb	r3, [r3, #7]
    2172:	061b      	lsls	r3, r3, #24
    2174:	4313      	orrs	r3, r2
    2176:	001a      	movs	r2, r3
    2178:	2307      	movs	r3, #7
    217a:	4013      	ands	r3, r2
    217c:	d101      	bne.n	2182 <_spi_m_sync_init+0xd6>
    217e:	2201      	movs	r2, #1
    2180:	e000      	b.n	2184 <_spi_m_sync_init+0xd8>
    2182:	2202      	movs	r2, #2
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    2188:	68fb      	ldr	r3, [r7, #12]
    218a:	7b9a      	ldrb	r2, [r3, #14]
    218c:	7bdb      	ldrb	r3, [r3, #15]
    218e:	021b      	lsls	r3, r3, #8
    2190:	4313      	orrs	r3, r2
    2192:	b29a      	uxth	r2, r3
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    2198:	2300      	movs	r3, #0
}
    219a:	0018      	movs	r0, r3
    219c:	46bd      	mov	sp, r7
    219e:	b004      	add	sp, #16
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00002041 	.word	0x00002041
    21a8:	00000916 	.word	0x00000916
    21ac:	0001ef20 	.word	0x0001ef20
    21b0:	00000995 	.word	0x00000995
    21b4:	00001671 	.word	0x00001671
    21b8:	00001765 	.word	0x00001765
    21bc:	00001739 	.word	0x00001739
    21c0:	00001f49 	.word	0x00001f49
    21c4:	00001e81 	.word	0x00001e81

000021c8 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    21c8:	b580      	push	{r7, lr}
    21ca:	b082      	sub	sp, #8
    21cc:	af00      	add	r7, sp, #0
    21ce:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    21d0:	46c0      	nop			; (mov r8, r8)
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2103      	movs	r1, #3
    21d6:	0018      	movs	r0, r3
    21d8:	4b06      	ldr	r3, [pc, #24]	; (21f4 <_spi_wait_bus_idle+0x2c>)
    21da:	4798      	blx	r3
    21dc:	1e03      	subs	r3, r0, #0
    21de:	d0f8      	beq.n	21d2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	2103      	movs	r1, #3
    21e4:	0018      	movs	r0, r3
    21e6:	4b04      	ldr	r3, [pc, #16]	; (21f8 <_spi_wait_bus_idle+0x30>)
    21e8:	4798      	blx	r3
}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	46bd      	mov	sp, r7
    21ee:	b002      	add	sp, #8
    21f0:	bd80      	pop	{r7, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	000016cd 	.word	0x000016cd
    21f8:	0000171b 	.word	0x0000171b

000021fc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b086      	sub	sp, #24
    2200:	af00      	add	r7, sp, #0
    2202:	60f8      	str	r0, [r7, #12]
    2204:	60b9      	str	r1, [r7, #8]
    2206:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2208:	68bb      	ldr	r3, [r7, #8]
    220a:	2204      	movs	r2, #4
    220c:	4013      	ands	r3, r2
    220e:	d101      	bne.n	2214 <_spi_rx_check_and_receive+0x18>
		return false;
    2210:	2300      	movs	r3, #0
    2212:	e024      	b.n	225e <_spi_rx_check_and_receive+0x62>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    2214:	68fb      	ldr	r3, [r7, #12]
    2216:	0018      	movs	r0, r3
    2218:	4b13      	ldr	r3, [pc, #76]	; (2268 <_spi_rx_check_and_receive+0x6c>)
    221a:	4798      	blx	r3
    221c:	0003      	movs	r3, r0
    221e:	617b      	str	r3, [r7, #20]

	if (ctrl->rxbuf) {
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	685b      	ldr	r3, [r3, #4]
    2224:	2b00      	cmp	r3, #0
    2226:	d014      	beq.n	2252 <_spi_rx_check_and_receive+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	685b      	ldr	r3, [r3, #4]
    222c:	1c59      	adds	r1, r3, #1
    222e:	687a      	ldr	r2, [r7, #4]
    2230:	6051      	str	r1, [r2, #4]
    2232:	697a      	ldr	r2, [r7, #20]
    2234:	b2d2      	uxtb	r2, r2
    2236:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	7c1b      	ldrb	r3, [r3, #16]
    223c:	2b01      	cmp	r3, #1
    223e:	d908      	bls.n	2252 <_spi_rx_check_and_receive+0x56>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	685b      	ldr	r3, [r3, #4]
    2244:	1c59      	adds	r1, r3, #1
    2246:	687a      	ldr	r2, [r7, #4]
    2248:	6051      	str	r1, [r2, #4]
    224a:	697a      	ldr	r2, [r7, #20]
    224c:	0a12      	lsrs	r2, r2, #8
    224e:	b2d2      	uxtb	r2, r2
    2250:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	68db      	ldr	r3, [r3, #12]
    2256:	1c5a      	adds	r2, r3, #1
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	60da      	str	r2, [r3, #12]

	return true;
    225c:	2301      	movs	r3, #1
}
    225e:	0018      	movs	r0, r3
    2260:	46bd      	mov	sp, r7
    2262:	b006      	add	sp, #24
    2264:	bd80      	pop	{r7, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	00001803 	.word	0x00001803

0000226c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    226c:	b580      	push	{r7, lr}
    226e:	b086      	sub	sp, #24
    2270:	af00      	add	r7, sp, #0
    2272:	60f8      	str	r0, [r7, #12]
    2274:	60b9      	str	r1, [r7, #8]
    2276:	607a      	str	r2, [r7, #4]
    2278:	001a      	movs	r2, r3
    227a:	1cbb      	adds	r3, r7, #2
    227c:	801a      	strh	r2, [r3, #0]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    227e:	68bb      	ldr	r3, [r7, #8]
    2280:	2201      	movs	r2, #1
    2282:	4013      	ands	r3, r2
    2284:	d02b      	beq.n	22de <_spi_tx_check_and_send+0x72>
		return;
	}

	if (ctrl->txbuf) {
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	681b      	ldr	r3, [r3, #0]
    228a:	2b00      	cmp	r3, #0
    228c:	d018      	beq.n	22c0 <_spi_tx_check_and_send+0x54>
		data = *ctrl->txbuf++;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	1c59      	adds	r1, r3, #1
    2294:	687a      	ldr	r2, [r7, #4]
    2296:	6011      	str	r1, [r2, #0]
    2298:	781b      	ldrb	r3, [r3, #0]
    229a:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	7c1b      	ldrb	r3, [r3, #16]
    22a0:	2b01      	cmp	r3, #1
    22a2:	d910      	bls.n	22c6 <_spi_tx_check_and_send+0x5a>
			data |= (*ctrl->txbuf) << 8;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	021b      	lsls	r3, r3, #8
    22ac:	001a      	movs	r2, r3
    22ae:	697b      	ldr	r3, [r7, #20]
    22b0:	4313      	orrs	r3, r2
    22b2:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	1c5a      	adds	r2, r3, #1
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	601a      	str	r2, [r3, #0]
    22be:	e002      	b.n	22c6 <_spi_tx_check_and_send+0x5a>
		}
	} else {
		data = dummy;
    22c0:	1cbb      	adds	r3, r7, #2
    22c2:	881b      	ldrh	r3, [r3, #0]
    22c4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	689b      	ldr	r3, [r3, #8]
    22ca:	1c5a      	adds	r2, r3, #1
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    22d0:	697a      	ldr	r2, [r7, #20]
    22d2:	68fb      	ldr	r3, [r7, #12]
    22d4:	0011      	movs	r1, r2
    22d6:	0018      	movs	r0, r3
    22d8:	4b03      	ldr	r3, [pc, #12]	; (22e8 <_spi_tx_check_and_send+0x7c>)
    22da:	4798      	blx	r3
    22dc:	e000      	b.n	22e0 <_spi_tx_check_and_send+0x74>
		return;
    22de:	46c0      	nop			; (mov r8, r8)
}
    22e0:	46bd      	mov	sp, r7
    22e2:	b006      	add	sp, #24
    22e4:	bd80      	pop	{r7, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00001817 	.word	0x00001817

000022ec <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	b082      	sub	sp, #8
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
    22f4:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	2280      	movs	r2, #128	; 0x80
    22fa:	4013      	ands	r3, r2
    22fc:	d00d      	beq.n	231a <_spi_err_check+0x2e>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    22fe:	4a09      	ldr	r2, [pc, #36]	; (2324 <_spi_err_check+0x38>)
    2300:	683b      	ldr	r3, [r7, #0]
    2302:	0011      	movs	r1, r2
    2304:	0018      	movs	r0, r3
    2306:	4b08      	ldr	r3, [pc, #32]	; (2328 <_spi_err_check+0x3c>)
    2308:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    230a:	683b      	ldr	r3, [r7, #0]
    230c:	2180      	movs	r1, #128	; 0x80
    230e:	0018      	movs	r0, r3
    2310:	4b06      	ldr	r3, [pc, #24]	; (232c <_spi_err_check+0x40>)
    2312:	4798      	blx	r3
		return ERR_OVERFLOW;
    2314:	2313      	movs	r3, #19
    2316:	425b      	negs	r3, r3
    2318:	e000      	b.n	231c <_spi_err_check+0x30>
	}

	return ERR_NONE;
    231a:	2300      	movs	r3, #0
}
    231c:	0018      	movs	r0, r3
    231e:	46bd      	mov	sp, r7
    2320:	b002      	add	sp, #8
    2322:	bd80      	pop	{r7, pc}
    2324:	0000ffff 	.word	0x0000ffff
    2328:	0000184f 	.word	0x0000184f
    232c:	0000171b 	.word	0x0000171b

00002330 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2330:	b590      	push	{r4, r7, lr}
    2332:	b08b      	sub	sp, #44	; 0x2c
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
    2338:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    2340:	2300      	movs	r3, #0
    2342:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2344:	683b      	ldr	r3, [r7, #0]
    2346:	681a      	ldr	r2, [r3, #0]
    2348:	2308      	movs	r3, #8
    234a:	18fb      	adds	r3, r7, r3
    234c:	601a      	str	r2, [r3, #0]
    234e:	683b      	ldr	r3, [r7, #0]
    2350:	685a      	ldr	r2, [r3, #4]
    2352:	2308      	movs	r3, #8
    2354:	18fb      	adds	r3, r7, r3
    2356:	605a      	str	r2, [r3, #4]
    2358:	2308      	movs	r3, #8
    235a:	18fb      	adds	r3, r7, r3
    235c:	2200      	movs	r2, #0
    235e:	609a      	str	r2, [r3, #8]
    2360:	2308      	movs	r3, #8
    2362:	18fb      	adds	r3, r7, r3
    2364:	2200      	movs	r2, #0
    2366:	60da      	str	r2, [r3, #12]
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	791a      	ldrb	r2, [r3, #4]
    236c:	2308      	movs	r3, #8
    236e:	18fb      	adds	r3, r7, r3
    2370:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
    2372:	687b      	ldr	r3, [r7, #4]
    2374:	2b00      	cmp	r3, #0
    2376:	d004      	beq.n	2382 <_spi_m_sync_trans+0x52>
    2378:	6a3b      	ldr	r3, [r7, #32]
    237a:	2b00      	cmp	r3, #0
    237c:	d001      	beq.n	2382 <_spi_m_sync_trans+0x52>
    237e:	2301      	movs	r3, #1
    2380:	e000      	b.n	2384 <_spi_m_sync_trans+0x54>
    2382:	2300      	movs	r3, #0
    2384:	1c1a      	adds	r2, r3, #0
    2386:	2301      	movs	r3, #1
    2388:	4013      	ands	r3, r2
    238a:	b2db      	uxtb	r3, r3
    238c:	4a34      	ldr	r2, [pc, #208]	; (2460 <_spi_m_sync_trans+0x130>)
    238e:	4935      	ldr	r1, [pc, #212]	; (2464 <_spi_m_sync_trans+0x134>)
    2390:	0018      	movs	r0, r3
    2392:	4b35      	ldr	r3, [pc, #212]	; (2468 <_spi_m_sync_trans+0x138>)
    2394:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2396:	6a3b      	ldr	r3, [r7, #32]
    2398:	2107      	movs	r1, #7
    239a:	0018      	movs	r0, r3
    239c:	4b33      	ldr	r3, [pc, #204]	; (246c <_spi_m_sync_trans+0x13c>)
    239e:	4798      	blx	r3
    23a0:	1e03      	subs	r3, r0, #0
    23a2:	d002      	beq.n	23aa <_spi_m_sync_trans+0x7a>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    23a4:	2304      	movs	r3, #4
    23a6:	425b      	negs	r3, r3
    23a8:	e055      	b.n	2456 <_spi_m_sync_trans+0x126>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    23aa:	6a3b      	ldr	r3, [r7, #32]
    23ac:	0018      	movs	r0, r3
    23ae:	4b30      	ldr	r3, [pc, #192]	; (2470 <_spi_m_sync_trans+0x140>)
    23b0:	4798      	blx	r3
    23b2:	0003      	movs	r3, r0
    23b4:	001a      	movs	r2, r3
    23b6:	2301      	movs	r3, #1
    23b8:	4053      	eors	r3, r2
    23ba:	b2db      	uxtb	r3, r3
    23bc:	2b00      	cmp	r3, #0
    23be:	d002      	beq.n	23c6 <_spi_m_sync_trans+0x96>
		return ERR_NOT_INITIALIZED;
    23c0:	2314      	movs	r3, #20
    23c2:	425b      	negs	r3, r3
    23c4:	e047      	b.n	2456 <_spi_m_sync_trans+0x126>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    23c6:	6a3b      	ldr	r3, [r7, #32]
    23c8:	0018      	movs	r0, r3
    23ca:	4b2a      	ldr	r3, [pc, #168]	; (2474 <_spi_m_sync_trans+0x144>)
    23cc:	4798      	blx	r3
    23ce:	0003      	movs	r3, r0
    23d0:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    23d2:	2308      	movs	r3, #8
    23d4:	18fa      	adds	r2, r7, r3
    23d6:	69f9      	ldr	r1, [r7, #28]
    23d8:	6a3b      	ldr	r3, [r7, #32]
    23da:	0018      	movs	r0, r3
    23dc:	4b26      	ldr	r3, [pc, #152]	; (2478 <_spi_m_sync_trans+0x148>)
    23de:	4798      	blx	r3
    23e0:	0003      	movs	r3, r0
    23e2:	001a      	movs	r2, r3
    23e4:	2301      	movs	r3, #1
    23e6:	4053      	eors	r3, r2
    23e8:	b2db      	uxtb	r3, r3
    23ea:	2b00      	cmp	r3, #0
    23ec:	d00f      	beq.n	240e <_spi_m_sync_trans+0xde>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    23ee:	2308      	movs	r3, #8
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	68da      	ldr	r2, [r3, #12]
    23f4:	2308      	movs	r3, #8
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	689b      	ldr	r3, [r3, #8]
    23fa:	429a      	cmp	r2, r3
    23fc:	d307      	bcc.n	240e <_spi_m_sync_trans+0xde>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	88db      	ldrh	r3, [r3, #6]
    2402:	2208      	movs	r2, #8
    2404:	18ba      	adds	r2, r7, r2
    2406:	69f9      	ldr	r1, [r7, #28]
    2408:	6a38      	ldr	r0, [r7, #32]
    240a:	4c1c      	ldr	r4, [pc, #112]	; (247c <_spi_m_sync_trans+0x14c>)
    240c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    240e:	6a3a      	ldr	r2, [r7, #32]
    2410:	69fb      	ldr	r3, [r7, #28]
    2412:	0011      	movs	r1, r2
    2414:	0018      	movs	r0, r3
    2416:	4b1a      	ldr	r3, [pc, #104]	; (2480 <_spi_m_sync_trans+0x150>)
    2418:	4798      	blx	r3
    241a:	0003      	movs	r3, r0
    241c:	627b      	str	r3, [r7, #36]	; 0x24

		if (rc < 0) {
    241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2420:	2b00      	cmp	r3, #0
    2422:	db12      	blt.n	244a <_spi_m_sync_trans+0x11a>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2424:	2308      	movs	r3, #8
    2426:	18fb      	adds	r3, r7, r3
    2428:	689a      	ldr	r2, [r3, #8]
    242a:	683b      	ldr	r3, [r7, #0]
    242c:	689b      	ldr	r3, [r3, #8]
    242e:	429a      	cmp	r2, r3
    2430:	d3c9      	bcc.n	23c6 <_spi_m_sync_trans+0x96>
    2432:	2308      	movs	r3, #8
    2434:	18fb      	adds	r3, r7, r3
    2436:	68da      	ldr	r2, [r3, #12]
    2438:	683b      	ldr	r3, [r7, #0]
    243a:	689b      	ldr	r3, [r3, #8]
    243c:	429a      	cmp	r2, r3
    243e:	d3c2      	bcc.n	23c6 <_spi_m_sync_trans+0x96>
			rc = ctrl.txcnt;
    2440:	2308      	movs	r3, #8
    2442:	18fb      	adds	r3, r7, r3
    2444:	689b      	ldr	r3, [r3, #8]
    2446:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    2448:	e000      	b.n	244c <_spi_m_sync_trans+0x11c>
			break;
    244a:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    244c:	6a3b      	ldr	r3, [r7, #32]
    244e:	0018      	movs	r0, r3
    2450:	4b0c      	ldr	r3, [pc, #48]	; (2484 <_spi_m_sync_trans+0x154>)
    2452:	4798      	blx	r3

	return rc;
    2454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    2456:	0018      	movs	r0, r3
    2458:	46bd      	mov	sp, r7
    245a:	b00b      	add	sp, #44	; 0x2c
    245c:	bd90      	pop	{r4, r7, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00000a72 	.word	0x00000a72
    2464:	0001ef20 	.word	0x0001ef20
    2468:	00000995 	.word	0x00000995
    246c:	0000168f 	.word	0x0000168f
    2470:	00001765 	.word	0x00001765
    2474:	00001705 	.word	0x00001705
    2478:	000021fd 	.word	0x000021fd
    247c:	0000226d 	.word	0x0000226d
    2480:	000022ed 	.word	0x000022ed
    2484:	000021c9 	.word	0x000021c9

00002488 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    2488:	b580      	push	{r7, lr}
    248a:	b082      	sub	sp, #8
    248c:	af00      	add	r7, sp, #0
    248e:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2490:	4b04      	ldr	r3, [pc, #16]	; (24a4 <_system_time_init+0x1c>)
    2492:	4a05      	ldr	r2, [pc, #20]	; (24a8 <_system_time_init+0x20>)
    2494:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2496:	4b03      	ldr	r3, [pc, #12]	; (24a4 <_system_time_init+0x1c>)
    2498:	2205      	movs	r2, #5
    249a:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46bd      	mov	sp, r7
    24a0:	b002      	add	sp, #8
    24a2:	bd80      	pop	{r7, pc}
    24a4:	e000e010 	.word	0xe000e010
    24a8:	00ffffff 	.word	0x00ffffff

000024ac <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    24ac:	b580      	push	{r7, lr}
    24ae:	b082      	sub	sp, #8
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	0018      	movs	r0, r3
    24b8:	4b02      	ldr	r3, [pc, #8]	; (24c4 <_delay_init+0x18>)
    24ba:	4798      	blx	r3
}
    24bc:	46c0      	nop			; (mov r8, r8)
    24be:	46bd      	mov	sp, r7
    24c0:	b002      	add	sp, #8
    24c2:	bd80      	pop	{r7, pc}
    24c4:	00002489 	.word	0x00002489

000024c8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    24d2:	683b      	ldr	r3, [r7, #0]
    24d4:	0e1a      	lsrs	r2, r3, #24
    24d6:	230f      	movs	r3, #15
    24d8:	18fb      	adds	r3, r7, r3
    24da:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    24dc:	683b      	ldr	r3, [r7, #0]
    24de:	60bb      	str	r3, [r7, #8]

	while (n--) {
    24e0:	e011      	b.n	2506 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    24e2:	4b16      	ldr	r3, [pc, #88]	; (253c <_delay_cycles+0x74>)
    24e4:	4a16      	ldr	r2, [pc, #88]	; (2540 <_delay_cycles+0x78>)
    24e6:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    24e8:	4b14      	ldr	r3, [pc, #80]	; (253c <_delay_cycles+0x74>)
    24ea:	4a15      	ldr	r2, [pc, #84]	; (2540 <_delay_cycles+0x78>)
    24ec:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	4b12      	ldr	r3, [pc, #72]	; (253c <_delay_cycles+0x74>)
    24f2:	681a      	ldr	r2, [r3, #0]
    24f4:	2380      	movs	r3, #128	; 0x80
    24f6:	025b      	lsls	r3, r3, #9
    24f8:	4013      	ands	r3, r2
    24fa:	d0f9      	beq.n	24f0 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    24fc:	68bb      	ldr	r3, [r7, #8]
    24fe:	4a11      	ldr	r2, [pc, #68]	; (2544 <_delay_cycles+0x7c>)
    2500:	4694      	mov	ip, r2
    2502:	4463      	add	r3, ip
    2504:	60bb      	str	r3, [r7, #8]
	while (n--) {
    2506:	230f      	movs	r3, #15
    2508:	18fb      	adds	r3, r7, r3
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	220f      	movs	r2, #15
    250e:	18ba      	adds	r2, r7, r2
    2510:	1e59      	subs	r1, r3, #1
    2512:	7011      	strb	r1, [r2, #0]
    2514:	2b00      	cmp	r3, #0
    2516:	d1e4      	bne.n	24e2 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    2518:	4b08      	ldr	r3, [pc, #32]	; (253c <_delay_cycles+0x74>)
    251a:	68ba      	ldr	r2, [r7, #8]
    251c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    251e:	4b07      	ldr	r3, [pc, #28]	; (253c <_delay_cycles+0x74>)
    2520:	68ba      	ldr	r2, [r7, #8]
    2522:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2524:	46c0      	nop			; (mov r8, r8)
    2526:	4b05      	ldr	r3, [pc, #20]	; (253c <_delay_cycles+0x74>)
    2528:	681a      	ldr	r2, [r3, #0]
    252a:	2380      	movs	r3, #128	; 0x80
    252c:	025b      	lsls	r3, r3, #9
    252e:	4013      	ands	r3, r2
    2530:	d0f9      	beq.n	2526 <_delay_cycles+0x5e>
		;
}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	46bd      	mov	sp, r7
    2536:	b004      	add	sp, #16
    2538:	bd80      	pop	{r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	e000e010 	.word	0xe000e010
    2540:	00ffffff 	.word	0x00ffffff
    2544:	ff000001 	.word	0xff000001

00002548 <NVIC_EnableIRQ>:
{
    2548:	b580      	push	{r7, lr}
    254a:	b082      	sub	sp, #8
    254c:	af00      	add	r7, sp, #0
    254e:	0002      	movs	r2, r0
    2550:	1dfb      	adds	r3, r7, #7
    2552:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <NVIC_EnableIRQ+0x28>)
    2556:	1dfa      	adds	r2, r7, #7
    2558:	7812      	ldrb	r2, [r2, #0]
    255a:	0011      	movs	r1, r2
    255c:	221f      	movs	r2, #31
    255e:	400a      	ands	r2, r1
    2560:	2101      	movs	r1, #1
    2562:	4091      	lsls	r1, r2
    2564:	000a      	movs	r2, r1
    2566:	601a      	str	r2, [r3, #0]
}
    2568:	46c0      	nop			; (mov r8, r8)
    256a:	46bd      	mov	sp, r7
    256c:	b002      	add	sp, #8
    256e:	bd80      	pop	{r7, pc}
    2570:	e000e100 	.word	0xe000e100

00002574 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2574:	b580      	push	{r7, lr}
    2576:	b082      	sub	sp, #8
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	695b      	ldr	r3, [r3, #20]
    2580:	2280      	movs	r2, #128	; 0x80
    2582:	0052      	lsls	r2, r2, #1
    2584:	431a      	orrs	r2, r3
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	46bd      	mov	sp, r7
    258e:	b002      	add	sp, #8
    2590:	bd80      	pop	{r7, pc}

00002592 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcmode2_dbgctrl_reg_t;
typedef uint8_t  hri_rtcmode2_freqcorr_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    2592:	b580      	push	{r7, lr}
    2594:	b082      	sub	sp, #8
    2596:	af00      	add	r7, sp, #0
    2598:	6078      	str	r0, [r7, #4]
    259a:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    259c:	46c0      	nop			; (mov r8, r8)
    259e:	687b      	ldr	r3, [r7, #4]
    25a0:	691b      	ldr	r3, [r3, #16]
    25a2:	683a      	ldr	r2, [r7, #0]
    25a4:	4013      	ands	r3, r2
    25a6:	d1fa      	bne.n	259e <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    25a8:	46c0      	nop			; (mov r8, r8)
    25aa:	46bd      	mov	sp, r7
    25ac:	b002      	add	sp, #8
    25ae:	bd80      	pop	{r7, pc}

000025b0 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	b082      	sub	sp, #8
    25b4:	af00      	add	r7, sp, #0
    25b6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	2280      	movs	r2, #128	; 0x80
    25bc:	0052      	lsls	r2, r2, #1
    25be:	815a      	strh	r2, [r3, #10]
}
    25c0:	46c0      	nop			; (mov r8, r8)
    25c2:	46bd      	mov	sp, r7
    25c4:	b002      	add	sp, #8
    25c6:	bd80      	pop	{r7, pc}

000025c8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b082      	sub	sp, #8
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2280      	movs	r2, #128	; 0x80
    25d4:	0052      	lsls	r2, r2, #1
    25d6:	819a      	strh	r2, [r3, #12]
}
    25d8:	46c0      	nop			; (mov r8, r8)
    25da:	46bd      	mov	sp, r7
    25dc:	b002      	add	sp, #8
    25de:	bd80      	pop	{r7, pc}

000025e0 <hri_rtcmode0_clear_interrupt_OVF_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_OVF) >> RTC_MODE0_INTFLAG_OVF_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_OVF_bit(const void *const hw)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b082      	sub	sp, #8
    25e4:	af00      	add	r7, sp, #0
    25e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    25e8:	687b      	ldr	r3, [r7, #4]
    25ea:	4a03      	ldr	r2, [pc, #12]	; (25f8 <hri_rtcmode0_clear_interrupt_OVF_bit+0x18>)
    25ec:	819a      	strh	r2, [r3, #12]
}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	46bd      	mov	sp, r7
    25f2:	b002      	add	sp, #8
    25f4:	bd80      	pop	{r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	ffff8000 	.word	0xffff8000

000025fc <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b082      	sub	sp, #8
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	899b      	ldrh	r3, [r3, #12]
    2608:	b29b      	uxth	r3, r3
}
    260a:	0018      	movs	r0, r3
    260c:	46bd      	mov	sp, r7
    260e:	b002      	add	sp, #8
    2610:	bd80      	pop	{r7, pc}
	...

00002614 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2614:	b580      	push	{r7, lr}
    2616:	b082      	sub	sp, #8
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    261c:	4a08      	ldr	r2, [pc, #32]	; (2640 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	0011      	movs	r1, r2
    2622:	0018      	movs	r0, r3
    2624:	4b07      	ldr	r3, [pc, #28]	; (2644 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x30>)
    2626:	4798      	blx	r3
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	881b      	ldrh	r3, [r3, #0]
    262c:	b29b      	uxth	r3, r3
    262e:	2202      	movs	r2, #2
    2630:	4313      	orrs	r3, r2
    2632:	b29a      	uxth	r2, r3
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_LEAVE();
}
    2638:	46c0      	nop			; (mov r8, r8)
    263a:	46bd      	mov	sp, r7
    263c:	b002      	add	sp, #8
    263e:	bd80      	pop	{r7, pc}
    2640:	00008003 	.word	0x00008003
    2644:	00002593 	.word	0x00002593

00002648 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    2648:	b580      	push	{r7, lr}
    264a:	b082      	sub	sp, #8
    264c:	af00      	add	r7, sp, #0
    264e:	6078      	str	r0, [r7, #4]
    2650:	000a      	movs	r2, r1
    2652:	1cbb      	adds	r3, r7, #2
    2654:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	1cba      	adds	r2, r7, #2
    265a:	8812      	ldrh	r2, [r2, #0]
    265c:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_LEAVE();
}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	46bd      	mov	sp, r7
    2662:	b002      	add	sp, #8
    2664:	bd80      	pop	{r7, pc}

00002666 <hri_rtcmode0_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
    2666:	b580      	push	{r7, lr}
    2668:	b082      	sub	sp, #8
    266a:	af00      	add	r7, sp, #0
    266c:	6078      	str	r0, [r7, #4]
    266e:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	683a      	ldr	r2, [r7, #0]
    2674:	605a      	str	r2, [r3, #4]
	RTC_CRITICAL_SECTION_LEAVE();
}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	46bd      	mov	sp, r7
    267a:	b002      	add	sp, #8
    267c:	bd80      	pop	{r7, pc}

0000267e <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    267e:	b580      	push	{r7, lr}
    2680:	b082      	sub	sp, #8
    2682:	af00      	add	r7, sp, #0
    2684:	6078      	str	r0, [r7, #4]
    2686:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	683a      	ldr	r2, [r7, #0]
    268c:	619a      	str	r2, [r3, #24]
	RTC_CRITICAL_SECTION_LEAVE();
}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	46bd      	mov	sp, r7
    2692:	b002      	add	sp, #8
    2694:	bd80      	pop	{r7, pc}

00002696 <hri_rtcmode0_read_COUNT_reg>:
	((Rtc *)hw)->MODE0.COUNT.reg ^= mask;
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    2696:	b580      	push	{r7, lr}
    2698:	b082      	sub	sp, #8
    269a:	af00      	add	r7, sp, #0
    269c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	699b      	ldr	r3, [r3, #24]
}
    26a2:	0018      	movs	r0, r3
    26a4:	46bd      	mov	sp, r7
    26a6:	b002      	add	sp, #8
    26a8:	bd80      	pop	{r7, pc}

000026aa <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    26aa:	b580      	push	{r7, lr}
    26ac:	b084      	sub	sp, #16
    26ae:	af00      	add	r7, sp, #0
    26b0:	60f8      	str	r0, [r7, #12]
    26b2:	607a      	str	r2, [r7, #4]
    26b4:	230b      	movs	r3, #11
    26b6:	18fb      	adds	r3, r7, r3
    26b8:	1c0a      	adds	r2, r1, #0
    26ba:	701a      	strb	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    26bc:	230b      	movs	r3, #11
    26be:	18fb      	adds	r3, r7, r3
    26c0:	781a      	ldrb	r2, [r3, #0]
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	3208      	adds	r2, #8
    26c6:	0092      	lsls	r2, r2, #2
    26c8:	6879      	ldr	r1, [r7, #4]
    26ca:	50d1      	str	r1, [r2, r3]
	RTC_CRITICAL_SECTION_LEAVE();
}
    26cc:	46c0      	nop			; (mov r8, r8)
    26ce:	46bd      	mov	sp, r7
    26d0:	b004      	add	sp, #16
    26d2:	bd80      	pop	{r7, pc}

000026d4 <HwTimerInit>:

/**
* \brief Initializes the hw timer module
*/
void HwTimerInit(void)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
#if defined( USE_HWTMR_DEBUG )
    GpioInit( &DbgHwTmrPin, HWTMR_DBG_PIN_0, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif

    hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    26d8:	4b1d      	ldr	r3, [pc, #116]	; (2750 <HwTimerInit+0x7c>)
    26da:	0018      	movs	r0, r3
    26dc:	4b1d      	ldr	r3, [pc, #116]	; (2754 <HwTimerInit+0x80>)
    26de:	4798      	blx	r3
    hri_rtcmode0_write_CTRLA_reg(RTC, RTC_MODE0_CTRLA_SWRST);
    26e0:	4b1d      	ldr	r3, [pc, #116]	; (2758 <HwTimerInit+0x84>)
    26e2:	2101      	movs	r1, #1
    26e4:	0018      	movs	r0, r3
    26e6:	4b1d      	ldr	r3, [pc, #116]	; (275c <HwTimerInit+0x88>)
    26e8:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_SWRST);
    26ea:	4b1b      	ldr	r3, [pc, #108]	; (2758 <HwTimerInit+0x84>)
    26ec:	2101      	movs	r1, #1
    26ee:	0018      	movs	r0, r3
    26f0:	4b1b      	ldr	r3, [pc, #108]	; (2760 <HwTimerInit+0x8c>)
    26f2:	4798      	blx	r3

    hri_rtcmode0_write_CTRLA_reg(RTC, RTC_MODE0_CTRLA_PRESCALER(0) |
    26f4:	2380      	movs	r3, #128	; 0x80
    26f6:	021b      	lsls	r3, r3, #8
    26f8:	4a17      	ldr	r2, [pc, #92]	; (2758 <HwTimerInit+0x84>)
    26fa:	0019      	movs	r1, r3
    26fc:	0010      	movs	r0, r2
    26fe:	4b17      	ldr	r3, [pc, #92]	; (275c <HwTimerInit+0x88>)
    2700:	4798      	blx	r3
                                 RTC_MODE0_CTRLA_COUNTSYNC);
    hri_rtcmode0_write_EVCTRL_reg(RTC, RTC_MODE0_EVCTRL_CMPEO0);
    2702:	2380      	movs	r3, #128	; 0x80
    2704:	005b      	lsls	r3, r3, #1
    2706:	4a14      	ldr	r2, [pc, #80]	; (2758 <HwTimerInit+0x84>)
    2708:	0019      	movs	r1, r3
    270a:	0010      	movs	r0, r2
    270c:	4b15      	ldr	r3, [pc, #84]	; (2764 <HwTimerInit+0x90>)
    270e:	4798      	blx	r3
    hri_rtcmode0_write_COMP_reg(RTC, 0, ( uint32_t )COMPARE_COUNT_MAX_VALUE);
    2710:	2301      	movs	r3, #1
    2712:	425b      	negs	r3, r3
    2714:	4810      	ldr	r0, [pc, #64]	; (2758 <HwTimerInit+0x84>)
    2716:	001a      	movs	r2, r3
    2718:	2100      	movs	r1, #0
    271a:	4b13      	ldr	r3, [pc, #76]	; (2768 <HwTimerInit+0x94>)
    271c:	4798      	blx	r3
    hri_rtcmode0_set_INTEN_CMP0_bit(RTC);
    271e:	4b0e      	ldr	r3, [pc, #56]	; (2758 <HwTimerInit+0x84>)
    2720:	0018      	movs	r0, r3
    2722:	4b12      	ldr	r3, [pc, #72]	; (276c <HwTimerInit+0x98>)
    2724:	4798      	blx	r3

    NVIC_EnableIRQ(RTC_IRQn);
    2726:	2002      	movs	r0, #2
    2728:	4b11      	ldr	r3, [pc, #68]	; (2770 <HwTimerInit+0x9c>)
    272a:	4798      	blx	r3
    hri_rtcmode0_write_COUNT_reg(RTC, 0);
    272c:	4b0a      	ldr	r3, [pc, #40]	; (2758 <HwTimerInit+0x84>)
    272e:	2100      	movs	r1, #0
    2730:	0018      	movs	r0, r3
    2732:	4b10      	ldr	r3, [pc, #64]	; (2774 <HwTimerInit+0xa0>)
    2734:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    2736:	4b08      	ldr	r3, [pc, #32]	; (2758 <HwTimerInit+0x84>)
    2738:	2108      	movs	r1, #8
    273a:	0018      	movs	r0, r3
    273c:	4b08      	ldr	r3, [pc, #32]	; (2760 <HwTimerInit+0x8c>)
    273e:	4798      	blx	r3
    hri_rtcmode0_set_CTRLA_ENABLE_bit(RTC);
    2740:	4b05      	ldr	r3, [pc, #20]	; (2758 <HwTimerInit+0x84>)
    2742:	0018      	movs	r0, r3
    2744:	4b0c      	ldr	r3, [pc, #48]	; (2778 <HwTimerInit+0xa4>)
    2746:	4798      	blx	r3
}
    2748:	46c0      	nop			; (mov r8, r8)
    274a:	46bd      	mov	sp, r7
    274c:	bd80      	pop	{r7, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	40000400 	.word	0x40000400
    2754:	00002575 	.word	0x00002575
    2758:	40002000 	.word	0x40002000
    275c:	00002649 	.word	0x00002649
    2760:	00002593 	.word	0x00002593
    2764:	00002667 	.word	0x00002667
    2768:	000026ab 	.word	0x000026ab
    276c:	000025b1 	.word	0x000025b1
    2770:	00002549 	.word	0x00002549
    2774:	0000267f 	.word	0x0000267f
    2778:	00002615 	.word	0x00002615

0000277c <HwTimerAlarmSetCallback>:
* \brief This function is used to set the callback when the hw timer
* expires.
* \param callback Callback to be registered
*/
void HwTimerAlarmSetCallback(HwTimerCallback_t callback)
{
    277c:	b580      	push	{r7, lr}
    277e:	b082      	sub	sp, #8
    2780:	af00      	add	r7, sp, #0
    2782:	6078      	str	r0, [r7, #4]
    HwTimerAlarmCallback = callback;
    2784:	4b03      	ldr	r3, [pc, #12]	; (2794 <HwTimerAlarmSetCallback+0x18>)
    2786:	687a      	ldr	r2, [r7, #4]
    2788:	601a      	str	r2, [r3, #0]
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	b002      	add	sp, #8
    2790:	bd80      	pop	{r7, pc}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	20000b50 	.word	0x20000b50

00002798 <HwTimerOverflowSetCallback>:
* \brief This function is used to set the callback when the hw timer
* overflows.
* \param callback Callback to be registered
*/
void HwTimerOverflowSetCallback(HwTimerCallback_t callback)
{
    2798:	b580      	push	{r7, lr}
    279a:	b082      	sub	sp, #8
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
    HwTimerOverflowCallback = callback;
    27a0:	4b03      	ldr	r3, [pc, #12]	; (27b0 <HwTimerOverflowSetCallback+0x18>)
    27a2:	687a      	ldr	r2, [r7, #4]
    27a4:	601a      	str	r2, [r3, #0]
}
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	46bd      	mov	sp, r7
    27aa:	b002      	add	sp, #8
    27ac:	bd80      	pop	{r7, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	20000b54 	.word	0x20000b54

000027b4 <HwTimerLoadAbsoluteTicks>:
/**
* \brief Loads the timeout in terms of ticks into the hardware
* \ticks Time value in terms of timer ticks
*/
bool HwTimerLoadAbsoluteTicks(uint32_t ticks)
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b084      	sub	sp, #16
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
#if defined( USE_HWTMR_DEBUG )
    GpioWrite( &DbgHwTmrPin, 1 );
#endif

    RTC_CRITICAL_SECTION_ENTER();
    hri_rtcmode0_write_COMP_reg(RTC, 0, ticks);
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	4813      	ldr	r0, [pc, #76]	; (280c <HwTimerLoadAbsoluteTicks+0x58>)
    27c0:	001a      	movs	r2, r3
    27c2:	2100      	movs	r1, #0
    27c4:	4b12      	ldr	r3, [pc, #72]	; (2810 <HwTimerLoadAbsoluteTicks+0x5c>)
    27c6:	4798      	blx	r3
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_MASK);
    27c8:	4a12      	ldr	r2, [pc, #72]	; (2814 <HwTimerLoadAbsoluteTicks+0x60>)
    27ca:	4b10      	ldr	r3, [pc, #64]	; (280c <HwTimerLoadAbsoluteTicks+0x58>)
    27cc:	0011      	movs	r1, r2
    27ce:	0018      	movs	r0, r3
    27d0:	4b11      	ldr	r3, [pc, #68]	; (2818 <HwTimerLoadAbsoluteTicks+0x64>)
    27d2:	4798      	blx	r3
    uint32_t current = hri_rtcmode0_read_COUNT_reg(RTC);
    27d4:	4b0d      	ldr	r3, [pc, #52]	; (280c <HwTimerLoadAbsoluteTicks+0x58>)
    27d6:	0018      	movs	r0, r3
    27d8:	4b10      	ldr	r3, [pc, #64]	; (281c <HwTimerLoadAbsoluteTicks+0x68>)
    27da:	4798      	blx	r3
    27dc:	0003      	movs	r3, r0
    27de:	60fb      	str	r3, [r7, #12]
    RTC_CRITICAL_SECTION_LEAVE();

    if((ticks - current - 1) >= (COMPARE_COUNT_MAX_VALUE >> 1)) {
    27e0:	687a      	ldr	r2, [r7, #4]
    27e2:	68fb      	ldr	r3, [r7, #12]
    27e4:	1ad3      	subs	r3, r2, r3
    27e6:	3b01      	subs	r3, #1
    27e8:	4a0d      	ldr	r2, [pc, #52]	; (2820 <HwTimerLoadAbsoluteTicks+0x6c>)
    27ea:	4293      	cmp	r3, r2
    27ec:	d901      	bls.n	27f2 <HwTimerLoadAbsoluteTicks+0x3e>
        // if difference is more than half of max assume timer has passed
        return false;
    27ee:	2300      	movs	r3, #0
    27f0:	e007      	b.n	2802 <HwTimerLoadAbsoluteTicks+0x4e>
    }
    if((ticks - current) < 10) {
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	68fb      	ldr	r3, [r7, #12]
    27f6:	1ad3      	subs	r3, r2, r3
    27f8:	2b09      	cmp	r3, #9
    27fa:	d801      	bhi.n	2800 <HwTimerLoadAbsoluteTicks+0x4c>
        // if too close the matching interrupt does not trigger, so handle same as passed
        return false;
    27fc:	2300      	movs	r3, #0
    27fe:	e000      	b.n	2802 <HwTimerLoadAbsoluteTicks+0x4e>
    }
    return true;
    2800:	2301      	movs	r3, #1
}
    2802:	0018      	movs	r0, r3
    2804:	46bd      	mov	sp, r7
    2806:	b004      	add	sp, #16
    2808:	bd80      	pop	{r7, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	40002000 	.word	0x40002000
    2810:	000026ab 	.word	0x000026ab
    2814:	0000802f 	.word	0x0000802f
    2818:	00002593 	.word	0x00002593
    281c:	00002697 	.word	0x00002697
    2820:	7ffffffe 	.word	0x7ffffffe

00002824 <HwTimerGetTime>:
/**
* \brief Gets the absolute time value
* \retval Absolute time in ticks
*/
uint32_t HwTimerGetTime(void)
{
    2824:	b580      	push	{r7, lr}
    2826:	af00      	add	r7, sp, #0
    hri_rtcmode0_wait_for_sync(RTC, RTC_MODE0_SYNCBUSY_COUNT);
    2828:	4b06      	ldr	r3, [pc, #24]	; (2844 <HwTimerGetTime+0x20>)
    282a:	2108      	movs	r1, #8
    282c:	0018      	movs	r0, r3
    282e:	4b06      	ldr	r3, [pc, #24]	; (2848 <HwTimerGetTime+0x24>)
    2830:	4798      	blx	r3
    return hri_rtcmode0_read_COUNT_reg(RTC);
    2832:	4b04      	ldr	r3, [pc, #16]	; (2844 <HwTimerGetTime+0x20>)
    2834:	0018      	movs	r0, r3
    2836:	4b05      	ldr	r3, [pc, #20]	; (284c <HwTimerGetTime+0x28>)
    2838:	4798      	blx	r3
    283a:	0003      	movs	r3, r0
}
    283c:	0018      	movs	r0, r3
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	40002000 	.word	0x40002000
    2848:	00002593 	.word	0x00002593
    284c:	00002697 	.word	0x00002697

00002850 <RTC_Handler>:

/**
* \brief Rtc interrupt handler
*/
void RTC_Handler(void)
{
    2850:	b590      	push	{r4, r7, lr}
    2852:	b083      	sub	sp, #12
    2854:	af00      	add	r7, sp, #0
    /* Read and mask interrupt flag register */
    uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(RTC);
    2856:	1dbc      	adds	r4, r7, #6
    2858:	4b15      	ldr	r3, [pc, #84]	; (28b0 <RTC_Handler+0x60>)
    285a:	0018      	movs	r0, r3
    285c:	4b15      	ldr	r3, [pc, #84]	; (28b4 <RTC_Handler+0x64>)
    285e:	4798      	blx	r3
    2860:	0003      	movs	r3, r0
    2862:	8023      	strh	r3, [r4, #0]

    if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2864:	1dbb      	adds	r3, r7, #6
    2866:	881a      	ldrh	r2, [r3, #0]
    2868:	2380      	movs	r3, #128	; 0x80
    286a:	005b      	lsls	r3, r3, #1
    286c:	4013      	ands	r3, r2
    286e:	d00b      	beq.n	2888 <RTC_Handler+0x38>
#if defined( USE_HWTMR_DEBUG )
        GpioWrite( &DbgHwTmrPin, 0 );
#endif
        hri_rtcmode0_clear_interrupt_CMP0_bit(RTC);
    2870:	4b0f      	ldr	r3, [pc, #60]	; (28b0 <RTC_Handler+0x60>)
    2872:	0018      	movs	r0, r3
    2874:	4b10      	ldr	r3, [pc, #64]	; (28b8 <RTC_Handler+0x68>)
    2876:	4798      	blx	r3
        if (HwTimerAlarmCallback != NULL) {
    2878:	4b10      	ldr	r3, [pc, #64]	; (28bc <RTC_Handler+0x6c>)
    287a:	681b      	ldr	r3, [r3, #0]
    287c:	2b00      	cmp	r3, #0
    287e:	d013      	beq.n	28a8 <RTC_Handler+0x58>
            HwTimerAlarmCallback();
    2880:	4b0e      	ldr	r3, [pc, #56]	; (28bc <RTC_Handler+0x6c>)
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	4798      	blx	r3
        if (HwTimerOverflowCallback != NULL) {
            HwTimerOverflowCallback();
        }
    }

}
    2886:	e00f      	b.n	28a8 <RTC_Handler+0x58>
    else if ( flag & RTC_MODE0_INTFLAG_OVF) {
    2888:	1dbb      	adds	r3, r7, #6
    288a:	2200      	movs	r2, #0
    288c:	5e9b      	ldrsh	r3, [r3, r2]
    288e:	2b00      	cmp	r3, #0
    2890:	da0a      	bge.n	28a8 <RTC_Handler+0x58>
        hri_rtcmode0_clear_interrupt_OVF_bit(RTC);
    2892:	4b07      	ldr	r3, [pc, #28]	; (28b0 <RTC_Handler+0x60>)
    2894:	0018      	movs	r0, r3
    2896:	4b0a      	ldr	r3, [pc, #40]	; (28c0 <RTC_Handler+0x70>)
    2898:	4798      	blx	r3
        if (HwTimerOverflowCallback != NULL) {
    289a:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <RTC_Handler+0x74>)
    289c:	681b      	ldr	r3, [r3, #0]
    289e:	2b00      	cmp	r3, #0
    28a0:	d002      	beq.n	28a8 <RTC_Handler+0x58>
            HwTimerOverflowCallback();
    28a2:	4b08      	ldr	r3, [pc, #32]	; (28c4 <RTC_Handler+0x74>)
    28a4:	681b      	ldr	r3, [r3, #0]
    28a6:	4798      	blx	r3
}
    28a8:	46c0      	nop			; (mov r8, r8)
    28aa:	46bd      	mov	sp, r7
    28ac:	b003      	add	sp, #12
    28ae:	bd90      	pop	{r4, r7, pc}
    28b0:	40002000 	.word	0x40002000
    28b4:	000025fd 	.word	0x000025fd
    28b8:	000025c9 	.word	0x000025c9
    28bc:	20000b50 	.word	0x20000b50
    28c0:	000025e1 	.word	0x000025e1
    28c4:	20000b54 	.word	0x20000b54

000028c8 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
    28c8:	b580      	push	{r7, lr}
    28ca:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
    28cc:	4b08      	ldr	r3, [pc, #32]	; (28f0 <rand1+0x28>)
    28ce:	681b      	ldr	r3, [r3, #0]
    28d0:	4a08      	ldr	r2, [pc, #32]	; (28f4 <rand1+0x2c>)
    28d2:	4353      	muls	r3, r2
    28d4:	4a08      	ldr	r2, [pc, #32]	; (28f8 <rand1+0x30>)
    28d6:	189a      	adds	r2, r3, r2
    28d8:	4b05      	ldr	r3, [pc, #20]	; (28f0 <rand1+0x28>)
    28da:	601a      	str	r2, [r3, #0]
    28dc:	4b04      	ldr	r3, [pc, #16]	; (28f0 <rand1+0x28>)
    28de:	681a      	ldr	r2, [r3, #0]
    28e0:	4b06      	ldr	r3, [pc, #24]	; (28fc <rand1+0x34>)
    28e2:	4907      	ldr	r1, [pc, #28]	; (2900 <rand1+0x38>)
    28e4:	0010      	movs	r0, r2
    28e6:	4798      	blx	r3
    28e8:	000b      	movs	r3, r1
}
    28ea:	0018      	movs	r0, r3
    28ec:	46bd      	mov	sp, r7
    28ee:	bd80      	pop	{r7, pc}
    28f0:	20000014 	.word	0x20000014
    28f4:	41c64e6d 	.word	0x41c64e6d
    28f8:	00003039 	.word	0x00003039
    28fc:	00017c59 	.word	0x00017c59
    2900:	7fffffff 	.word	0x7fffffff

00002904 <srand1>:

void srand1( uint32_t seed )
{
    2904:	b580      	push	{r7, lr}
    2906:	b082      	sub	sp, #8
    2908:	af00      	add	r7, sp, #0
    290a:	6078      	str	r0, [r7, #4]
    next = seed;
    290c:	4b03      	ldr	r3, [pc, #12]	; (291c <srand1+0x18>)
    290e:	687a      	ldr	r2, [r7, #4]
    2910:	601a      	str	r2, [r3, #0]
}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	46bd      	mov	sp, r7
    2916:	b002      	add	sp, #8
    2918:	bd80      	pop	{r7, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	20000014 	.word	0x20000014

00002920 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
    2920:	b580      	push	{r7, lr}
    2922:	b082      	sub	sp, #8
    2924:	af00      	add	r7, sp, #0
    2926:	6078      	str	r0, [r7, #4]
    2928:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
    292a:	4b08      	ldr	r3, [pc, #32]	; (294c <randr+0x2c>)
    292c:	4798      	blx	r3
    292e:	683a      	ldr	r2, [r7, #0]
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	1ad3      	subs	r3, r2, r3
    2934:	1c5a      	adds	r2, r3, #1
    2936:	4b06      	ldr	r3, [pc, #24]	; (2950 <randr+0x30>)
    2938:	0011      	movs	r1, r2
    293a:	4798      	blx	r3
    293c:	000b      	movs	r3, r1
    293e:	001a      	movs	r2, r3
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	18d3      	adds	r3, r2, r3
}
    2944:	0018      	movs	r0, r3
    2946:	46bd      	mov	sp, r7
    2948:	b002      	add	sp, #8
    294a:	bd80      	pop	{r7, pc}
    294c:	000028c9 	.word	0x000028c9
    2950:	00017e2d 	.word	0x00017e2d

00002954 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    2954:	b580      	push	{r7, lr}
    2956:	b084      	sub	sp, #16
    2958:	af00      	add	r7, sp, #0
    295a:	60f8      	str	r0, [r7, #12]
    295c:	60b9      	str	r1, [r7, #8]
    295e:	1dbb      	adds	r3, r7, #6
    2960:	801a      	strh	r2, [r3, #0]
    while( size-- )
    2962:	e007      	b.n	2974 <memcpy1+0x20>
    {
        *dst++ = *src++;
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	1c5a      	adds	r2, r3, #1
    2968:	60fa      	str	r2, [r7, #12]
    296a:	68ba      	ldr	r2, [r7, #8]
    296c:	1c51      	adds	r1, r2, #1
    296e:	60b9      	str	r1, [r7, #8]
    2970:	7812      	ldrb	r2, [r2, #0]
    2972:	701a      	strb	r2, [r3, #0]
    while( size-- )
    2974:	1dbb      	adds	r3, r7, #6
    2976:	881b      	ldrh	r3, [r3, #0]
    2978:	1dba      	adds	r2, r7, #6
    297a:	1e59      	subs	r1, r3, #1
    297c:	8011      	strh	r1, [r2, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d1f0      	bne.n	2964 <memcpy1+0x10>
    }
}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	46bd      	mov	sp, r7
    2986:	b004      	add	sp, #16
    2988:	bd80      	pop	{r7, pc}

0000298a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    298a:	b580      	push	{r7, lr}
    298c:	b084      	sub	sp, #16
    298e:	af00      	add	r7, sp, #0
    2990:	60f8      	str	r0, [r7, #12]
    2992:	60b9      	str	r1, [r7, #8]
    2994:	1dbb      	adds	r3, r7, #6
    2996:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
    2998:	1dbb      	adds	r3, r7, #6
    299a:	881b      	ldrh	r3, [r3, #0]
    299c:	3b01      	subs	r3, #1
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	18d3      	adds	r3, r2, r3
    29a2:	60fb      	str	r3, [r7, #12]
    while( size-- )
    29a4:	e007      	b.n	29b6 <memcpyr+0x2c>
    {
        *dst-- = *src++;
    29a6:	68fb      	ldr	r3, [r7, #12]
    29a8:	1e5a      	subs	r2, r3, #1
    29aa:	60fa      	str	r2, [r7, #12]
    29ac:	68ba      	ldr	r2, [r7, #8]
    29ae:	1c51      	adds	r1, r2, #1
    29b0:	60b9      	str	r1, [r7, #8]
    29b2:	7812      	ldrb	r2, [r2, #0]
    29b4:	701a      	strb	r2, [r3, #0]
    while( size-- )
    29b6:	1dbb      	adds	r3, r7, #6
    29b8:	881b      	ldrh	r3, [r3, #0]
    29ba:	1dba      	adds	r2, r7, #6
    29bc:	1e59      	subs	r1, r3, #1
    29be:	8011      	strh	r1, [r2, #0]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d1f0      	bne.n	29a6 <memcpyr+0x1c>
    }
}
    29c4:	46c0      	nop			; (mov r8, r8)
    29c6:	46bd      	mov	sp, r7
    29c8:	b004      	add	sp, #16
    29ca:	bd80      	pop	{r7, pc}

000029cc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    29cc:	b580      	push	{r7, lr}
    29ce:	b082      	sub	sp, #8
    29d0:	af00      	add	r7, sp, #0
    29d2:	6078      	str	r0, [r7, #4]
    29d4:	0008      	movs	r0, r1
    29d6:	0011      	movs	r1, r2
    29d8:	1cfb      	adds	r3, r7, #3
    29da:	1c02      	adds	r2, r0, #0
    29dc:	701a      	strb	r2, [r3, #0]
    29de:	003b      	movs	r3, r7
    29e0:	1c0a      	adds	r2, r1, #0
    29e2:	801a      	strh	r2, [r3, #0]
    while( size-- )
    29e4:	e005      	b.n	29f2 <memset1+0x26>
    {
        *dst++ = value;
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	1c5a      	adds	r2, r3, #1
    29ea:	607a      	str	r2, [r7, #4]
    29ec:	1cfa      	adds	r2, r7, #3
    29ee:	7812      	ldrb	r2, [r2, #0]
    29f0:	701a      	strb	r2, [r3, #0]
    while( size-- )
    29f2:	003b      	movs	r3, r7
    29f4:	881b      	ldrh	r3, [r3, #0]
    29f6:	003a      	movs	r2, r7
    29f8:	1e59      	subs	r1, r3, #1
    29fa:	8011      	strh	r1, [r2, #0]
    29fc:	2b00      	cmp	r3, #0
    29fe:	d1f2      	bne.n	29e6 <memset1+0x1a>
    }
}
    2a00:	46c0      	nop			; (mov r8, r8)
    2a02:	46bd      	mov	sp, r7
    2a04:	b002      	add	sp, #8
    2a06:	bd80      	pop	{r7, pc}

00002a08 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2a08:	b580      	push	{r7, lr}
    2a0a:	b084      	sub	sp, #16
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	60f8      	str	r0, [r7, #12]
    2a10:	607a      	str	r2, [r7, #4]
    2a12:	230b      	movs	r3, #11
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	1c0a      	adds	r2, r1, #0
    2a18:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2a1a:	230b      	movs	r3, #11
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	781a      	ldrb	r2, [r3, #0]
    2a20:	68fb      	ldr	r3, [r7, #12]
    2a22:	3220      	adds	r2, #32
    2a24:	0092      	lsls	r2, r2, #2
    2a26:	6879      	ldr	r1, [r7, #4]
    2a28:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	46bd      	mov	sp, r7
    2a2e:	b004      	add	sp, #16
    2a30:	bd80      	pop	{r7, pc}

00002a32 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2a32:	b580      	push	{r7, lr}
    2a34:	b082      	sub	sp, #8
    2a36:	af00      	add	r7, sp, #0
    2a38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	695b      	ldr	r3, [r3, #20]
    2a3e:	2280      	movs	r2, #128	; 0x80
    2a40:	0092      	lsls	r2, r2, #2
    2a42:	431a      	orrs	r2, r3
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a48:	46c0      	nop			; (mov r8, r8)
    2a4a:	46bd      	mov	sp, r7
    2a4c:	b002      	add	sp, #8
    2a4e:	bd80      	pop	{r7, pc}

00002a50 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	af00      	add	r7, sp, #0
	_init_chip();
    2a54:	4b02      	ldr	r3, [pc, #8]	; (2a60 <init_mcu+0x10>)
    2a56:	4798      	blx	r3
}
    2a58:	46c0      	nop			; (mov r8, r8)
    2a5a:	46bd      	mov	sp, r7
    2a5c:	bd80      	pop	{r7, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	00000c95 	.word	0x00000c95

00002a64 <BoardCriticalSectionBegin>:
 * Flag to indicate if the MCU is Initialized
 */
static bool McuInitialized = false;

void BoardCriticalSectionBegin( uint32_t *mask )
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b084      	sub	sp, #16
    2a68:	af00      	add	r7, sp, #0
    2a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a6c:	f3ef 8310 	mrs	r3, PRIMASK
    2a70:	60fb      	str	r3, [r7, #12]
  return(result);
    2a72:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2a78:	b672      	cpsid	i
    __disable_irq( );
}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	46bd      	mov	sp, r7
    2a7e:	b004      	add	sp, #16
    2a80:	bd80      	pop	{r7, pc}

00002a82 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
    2a82:	b580      	push	{r7, lr}
    2a84:	b084      	sub	sp, #16
    2a86:	af00      	add	r7, sp, #0
    2a88:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	681b      	ldr	r3, [r3, #0]
    2a8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	f383 8810 	msr	PRIMASK, r3
}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	46bd      	mov	sp, r7
    2a9a:	b004      	add	sp, #16
    2a9c:	bd80      	pop	{r7, pc}
	...

00002aa0 <BoardInitPeriph>:

void BoardInitPeriph( void )
{
    2aa0:	b590      	push	{r4, r7, lr}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af02      	add	r7, sp, #8
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    2aa6:	4807      	ldr	r0, [pc, #28]	; (2ac4 <BoardInitPeriph+0x24>)
    2aa8:	2300      	movs	r3, #0
    2aaa:	9301      	str	r3, [sp, #4]
    2aac:	2300      	movs	r3, #0
    2aae:	9300      	str	r3, [sp, #0]
    2ab0:	2300      	movs	r3, #0
    2ab2:	2201      	movs	r2, #1
    2ab4:	212a      	movs	r1, #42	; 0x2a
    2ab6:	4c04      	ldr	r4, [pc, #16]	; (2ac8 <BoardInitPeriph+0x28>)
    2ab8:	47a0      	blx	r4
}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	46bd      	mov	sp, r7
    2abe:	b001      	add	sp, #4
    2ac0:	bd90      	pop	{r4, r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20001ba4 	.word	0x20001ba4
    2ac8:	00015c51 	.word	0x00015c51

00002acc <BoardInitMcu>:

void BoardInitMcu( void )
{
    2acc:	b590      	push	{r4, r7, lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	af04      	add	r7, sp, #16
    init_mcu( );
    2ad2:	4b1c      	ldr	r3, [pc, #112]	; (2b44 <BoardInitMcu+0x78>)
    2ad4:	4798      	blx	r3
    delay_init( SysTick );
    2ad6:	4b1c      	ldr	r3, [pc, #112]	; (2b48 <BoardInitMcu+0x7c>)
    2ad8:	0018      	movs	r0, r3
    2ada:	4b1c      	ldr	r3, [pc, #112]	; (2b4c <BoardInitMcu+0x80>)
    2adc:	4798      	blx	r3

    hri_gclk_write_PCHCTRL_reg( GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    2ade:	4b1c      	ldr	r3, [pc, #112]	; (2b50 <BoardInitMcu+0x84>)
    2ae0:	2240      	movs	r2, #64	; 0x40
    2ae2:	2103      	movs	r1, #3
    2ae4:	0018      	movs	r0, r3
    2ae6:	4b1b      	ldr	r3, [pc, #108]	; (2b54 <BoardInitMcu+0x88>)
    2ae8:	4798      	blx	r3
    hri_mclk_set_APBAMASK_EIC_bit( MCLK );
    2aea:	4b1b      	ldr	r3, [pc, #108]	; (2b58 <BoardInitMcu+0x8c>)
    2aec:	0018      	movs	r0, r3
    2aee:	4b1b      	ldr	r3, [pc, #108]	; (2b5c <BoardInitMcu+0x90>)
    2af0:	4798      	blx	r3

    RtcInit( );
    2af2:	4b1b      	ldr	r3, [pc, #108]	; (2b60 <BoardInitMcu+0x94>)
    2af4:	4798      	blx	r3

    UartInit( &Uart1, UART_1, UART_TX, UART_RX );
    2af6:	481b      	ldr	r0, [pc, #108]	; (2b64 <BoardInitMcu+0x98>)
    2af8:	2317      	movs	r3, #23
    2afa:	2216      	movs	r2, #22
    2afc:	2100      	movs	r1, #0
    2afe:	4c1a      	ldr	r4, [pc, #104]	; (2b68 <BoardInitMcu+0x9c>)
    2b00:	47a0      	blx	r4
    UartConfig( &Uart1, RX_TX, 921600, UART_8_BIT, UART_1_STOP_BIT, NO_PARITY, NO_FLOW_CTRL );
    2b02:	23e1      	movs	r3, #225	; 0xe1
    2b04:	031a      	lsls	r2, r3, #12
    2b06:	4817      	ldr	r0, [pc, #92]	; (2b64 <BoardInitMcu+0x98>)
    2b08:	2300      	movs	r3, #0
    2b0a:	9302      	str	r3, [sp, #8]
    2b0c:	2300      	movs	r3, #0
    2b0e:	9301      	str	r3, [sp, #4]
    2b10:	2300      	movs	r3, #0
    2b12:	9300      	str	r3, [sp, #0]
    2b14:	2300      	movs	r3, #0
    2b16:	2102      	movs	r1, #2
    2b18:	4c14      	ldr	r4, [pc, #80]	; (2b6c <BoardInitMcu+0xa0>)
    2b1a:	47a0      	blx	r4

    SpiInit( &SX1276.Spi, SPI_1, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
    2b1c:	4814      	ldr	r0, [pc, #80]	; (2b70 <BoardInitMcu+0xa4>)
    2b1e:	2301      	movs	r3, #1
    2b20:	425b      	negs	r3, r3
    2b22:	9301      	str	r3, [sp, #4]
    2b24:	2337      	movs	r3, #55	; 0x37
    2b26:	9300      	str	r3, [sp, #0]
    2b28:	2330      	movs	r3, #48	; 0x30
    2b2a:	2236      	movs	r2, #54	; 0x36
    2b2c:	2100      	movs	r1, #0
    2b2e:	4c11      	ldr	r4, [pc, #68]	; (2b74 <BoardInitMcu+0xa8>)
    2b30:	47a0      	blx	r4
    SX1276IoInit( );
    2b32:	4b11      	ldr	r3, [pc, #68]	; (2b78 <BoardInitMcu+0xac>)
    2b34:	4798      	blx	r3

    McuInitialized = true;
    2b36:	4b11      	ldr	r3, [pc, #68]	; (2b7c <BoardInitMcu+0xb0>)
    2b38:	2201      	movs	r2, #1
    2b3a:	701a      	strb	r2, [r3, #0]
}
    2b3c:	46c0      	nop			; (mov r8, r8)
    2b3e:	46bd      	mov	sp, r7
    2b40:	b001      	add	sp, #4
    2b42:	bd90      	pop	{r4, r7, pc}
    2b44:	00002a51 	.word	0x00002a51
    2b48:	e000e010 	.word	0xe000e010
    2b4c:	00000185 	.word	0x00000185
    2b50:	40001800 	.word	0x40001800
    2b54:	00002a09 	.word	0x00002a09
    2b58:	40000400 	.word	0x40000400
    2b5c:	00002a33 	.word	0x00002a33
    2b60:	000031d1 	.word	0x000031d1
    2b64:	20001b5c 	.word	0x20001b5c
    2b68:	000164b1 	.word	0x000164b1
    2b6c:	00016509 	.word	0x00016509
    2b70:	20001ce8 	.word	0x20001ce8
    2b74:	00003d9d 	.word	0x00003d9d
    2b78:	00004211 	.word	0x00004211
    2b7c:	20000b58 	.word	0x20000b58

00002b80 <BoardGetUniqueId>:
{
    return 0;
}

void BoardGetUniqueId( uint8_t *id )
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b082      	sub	sp, #8
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    // We don't have an ID, so use the one from Commissioning.h
}
    2b88:	46c0      	nop			; (mov r8, r8)
    2b8a:	46bd      	mov	sp, r7
    2b8c:	b002      	add	sp, #8
    2b8e:	bd80      	pop	{r7, pc}

00002b90 <BoardGetBatteryLevel>:

uint8_t BoardGetBatteryLevel( void )
{
    2b90:	b580      	push	{r7, lr}
    2b92:	af00      	add	r7, sp, #0
    return 0; //  Battery level [0: node is connected to an external power source ...
    2b94:	2300      	movs	r3, #0
}
    2b96:	0018      	movs	r0, r3
    2b98:	46bd      	mov	sp, r7
    2b9a:	bd80      	pop	{r7, pc}

00002b9c <BoardLowPowerHandler>:
{
    return USB_POWER;
}

void BoardLowPowerHandler( void )
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    2ba0:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
    2ba2:	b662      	cpsie	i
     */

    // Call low power handling function.

    __enable_irq( );
}
    2ba4:	46c0      	nop			; (mov r8, r8)
    2ba6:	46bd      	mov	sp, r7
    2ba8:	bd80      	pop	{r7, pc}
	...

00002bac <_write>:

/*
 * Function to be used by stdout for printf etc
 */
int _write( int fd, const void *buf, size_t count )
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b084      	sub	sp, #16
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60f8      	str	r0, [r7, #12]
    2bb4:	60b9      	str	r1, [r7, #8]
    2bb6:	607a      	str	r2, [r7, #4]
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )count ) != 0 ){ };
    2bb8:	46c0      	nop			; (mov r8, r8)
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	b29a      	uxth	r2, r3
    2bbe:	68b9      	ldr	r1, [r7, #8]
    2bc0:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <_write+0x2c>)
    2bc2:	0018      	movs	r0, r3
    2bc4:	4b05      	ldr	r3, [pc, #20]	; (2bdc <_write+0x30>)
    2bc6:	4798      	blx	r3
    2bc8:	1e03      	subs	r3, r0, #0
    2bca:	d1f6      	bne.n	2bba <_write+0xe>
    return count;
    2bcc:	687b      	ldr	r3, [r7, #4]
}
    2bce:	0018      	movs	r0, r3
    2bd0:	46bd      	mov	sp, r7
    2bd2:	b004      	add	sp, #16
    2bd4:	bd80      	pop	{r7, pc}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	20001b5c 	.word	0x20001b5c
    2bdc:	00016561 	.word	0x00016561

00002be0 <_read>:

/*
 * Function to be used by stdin for scanf etc
 */
int _read( int fd, const void *buf, size_t count )
{
    2be0:	b590      	push	{r4, r7, lr}
    2be2:	b087      	sub	sp, #28
    2be4:	af00      	add	r7, sp, #0
    2be6:	60f8      	str	r0, [r7, #12]
    2be8:	60b9      	str	r1, [r7, #8]
    2bea:	607a      	str	r2, [r7, #4]
    size_t bytesRead = 0;
    2bec:	2300      	movs	r3, #0
    2bee:	617b      	str	r3, [r7, #20]
    while( UartGetBuffer( &Uart1, ( uint8_t* )buf, count, ( uint16_t* )&bytesRead ) != 0 ){ };
    2bf0:	46c0      	nop			; (mov r8, r8)
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	b29a      	uxth	r2, r3
    2bf6:	2314      	movs	r3, #20
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	68b9      	ldr	r1, [r7, #8]
    2bfc:	4809      	ldr	r0, [pc, #36]	; (2c24 <_read+0x44>)
    2bfe:	4c0a      	ldr	r4, [pc, #40]	; (2c28 <_read+0x48>)
    2c00:	47a0      	blx	r4
    2c02:	1e03      	subs	r3, r0, #0
    2c04:	d1f5      	bne.n	2bf2 <_read+0x12>
    // Echo back the character
    while( UartPutBuffer( &Uart1, ( uint8_t* )buf, ( uint16_t )bytesRead ) != 0 ){ };
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	b29a      	uxth	r2, r3
    2c0c:	68b9      	ldr	r1, [r7, #8]
    2c0e:	4b05      	ldr	r3, [pc, #20]	; (2c24 <_read+0x44>)
    2c10:	0018      	movs	r0, r3
    2c12:	4b06      	ldr	r3, [pc, #24]	; (2c2c <_read+0x4c>)
    2c14:	4798      	blx	r3
    2c16:	1e03      	subs	r3, r0, #0
    2c18:	d1f6      	bne.n	2c08 <_read+0x28>
    return bytesRead;
    2c1a:	697b      	ldr	r3, [r7, #20]
}
    2c1c:	0018      	movs	r0, r3
    2c1e:	46bd      	mov	sp, r7
    2c20:	b007      	add	sp, #28
    2c22:	bd90      	pop	{r4, r7, pc}
    2c24:	20001b5c 	.word	0x20001b5c
    2c28:	0001658d 	.word	0x0001658d
    2c2c:	00016561 	.word	0x00016561

00002c30 <DelayMsMcu>:
 */
#include <hal_delay.h>
#include "delay-board.h"

void DelayMsMcu( uint32_t ms )
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
    delay_ms( ms );
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	b29b      	uxth	r3, r3
    2c3c:	0018      	movs	r0, r3
    2c3e:	4b03      	ldr	r3, [pc, #12]	; (2c4c <DelayMsMcu+0x1c>)
    2c40:	4798      	blx	r3
}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	46bd      	mov	sp, r7
    2c46:	b002      	add	sp, #8
    2c48:	bd80      	pop	{r7, pc}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	000001ad 	.word	0x000001ad

00002c50 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b084      	sub	sp, #16
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	607a      	str	r2, [r7, #4]
    2c5a:	230b      	movs	r3, #11
    2c5c:	18fb      	adds	r3, r7, r3
    2c5e:	1c0a      	adds	r2, r1, #0
    2c60:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c62:	230b      	movs	r3, #11
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	68fa      	ldr	r2, [r7, #12]
    2c6a:	01db      	lsls	r3, r3, #7
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	3308      	adds	r3, #8
    2c70:	687a      	ldr	r2, [r7, #4]
    2c72:	601a      	str	r2, [r3, #0]
}
    2c74:	46c0      	nop			; (mov r8, r8)
    2c76:	46bd      	mov	sp, r7
    2c78:	b004      	add	sp, #16
    2c7a:	bd80      	pop	{r7, pc}

00002c7c <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b084      	sub	sp, #16
    2c80:	af00      	add	r7, sp, #0
    2c82:	60f8      	str	r0, [r7, #12]
    2c84:	607a      	str	r2, [r7, #4]
    2c86:	230b      	movs	r3, #11
    2c88:	18fb      	adds	r3, r7, r3
    2c8a:	1c0a      	adds	r2, r1, #0
    2c8c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c8e:	230b      	movs	r3, #11
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	781b      	ldrb	r3, [r3, #0]
    2c94:	68fa      	ldr	r2, [r7, #12]
    2c96:	01db      	lsls	r3, r3, #7
    2c98:	18d3      	adds	r3, r2, r3
    2c9a:	3304      	adds	r3, #4
    2c9c:	687a      	ldr	r2, [r7, #4]
    2c9e:	601a      	str	r2, [r3, #0]
}
    2ca0:	46c0      	nop			; (mov r8, r8)
    2ca2:	46bd      	mov	sp, r7
    2ca4:	b004      	add	sp, #16
    2ca6:	bd80      	pop	{r7, pc}

00002ca8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	60f8      	str	r0, [r7, #12]
    2cb0:	607a      	str	r2, [r7, #4]
    2cb2:	230b      	movs	r3, #11
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	1c0a      	adds	r2, r1, #0
    2cb8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cba:	230b      	movs	r3, #11
    2cbc:	18fb      	adds	r3, r7, r3
    2cbe:	781b      	ldrb	r3, [r3, #0]
    2cc0:	68fa      	ldr	r2, [r7, #12]
    2cc2:	01db      	lsls	r3, r3, #7
    2cc4:	18d3      	adds	r3, r2, r3
    2cc6:	3318      	adds	r3, #24
    2cc8:	687a      	ldr	r2, [r7, #4]
    2cca:	601a      	str	r2, [r3, #0]
}
    2ccc:	46c0      	nop			; (mov r8, r8)
    2cce:	46bd      	mov	sp, r7
    2cd0:	b004      	add	sp, #16
    2cd2:	bd80      	pop	{r7, pc}

00002cd4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b084      	sub	sp, #16
    2cd8:	af00      	add	r7, sp, #0
    2cda:	60f8      	str	r0, [r7, #12]
    2cdc:	607a      	str	r2, [r7, #4]
    2cde:	230b      	movs	r3, #11
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	1c0a      	adds	r2, r1, #0
    2ce4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce6:	230b      	movs	r3, #11
    2ce8:	18fb      	adds	r3, r7, r3
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	68fa      	ldr	r2, [r7, #12]
    2cee:	01db      	lsls	r3, r3, #7
    2cf0:	18d3      	adds	r3, r2, r3
    2cf2:	3314      	adds	r3, #20
    2cf4:	687a      	ldr	r2, [r7, #4]
    2cf6:	601a      	str	r2, [r3, #0]
}
    2cf8:	46c0      	nop			; (mov r8, r8)
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b004      	add	sp, #16
    2cfe:	bd80      	pop	{r7, pc}

00002d00 <hri_port_write_WRCONFIG_reg>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b084      	sub	sp, #16
    2d04:	af00      	add	r7, sp, #0
    2d06:	60f8      	str	r0, [r7, #12]
    2d08:	607a      	str	r2, [r7, #4]
    2d0a:	230b      	movs	r3, #11
    2d0c:	18fb      	adds	r3, r7, r3
    2d0e:	1c0a      	adds	r2, r1, #0
    2d10:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d12:	230b      	movs	r3, #11
    2d14:	18fb      	adds	r3, r7, r3
    2d16:	781b      	ldrb	r3, [r3, #0]
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	01db      	lsls	r3, r3, #7
    2d1c:	18d3      	adds	r3, r2, r3
    2d1e:	3328      	adds	r3, #40	; 0x28
    2d20:	687a      	ldr	r2, [r7, #4]
    2d22:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d24:	46c0      	nop			; (mov r8, r8)
    2d26:	46bd      	mov	sp, r7
    2d28:	b004      	add	sp, #16
    2d2a:	bd80      	pop	{r7, pc}

00002d2c <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2d2c:	b5b0      	push	{r4, r5, r7, lr}
    2d2e:	b082      	sub	sp, #8
    2d30:	af00      	add	r7, sp, #0
    2d32:	6078      	str	r0, [r7, #4]
    2d34:	0008      	movs	r0, r1
    2d36:	0011      	movs	r1, r2
    2d38:	1cfb      	adds	r3, r7, #3
    2d3a:	1c02      	adds	r2, r0, #0
    2d3c:	701a      	strb	r2, [r3, #0]
    2d3e:	1cbb      	adds	r3, r7, #2
    2d40:	1c0a      	adds	r2, r1, #0
    2d42:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2d44:	1cfb      	adds	r3, r7, #3
    2d46:	781a      	ldrb	r2, [r3, #0]
    2d48:	1cbb      	adds	r3, r7, #2
    2d4a:	781b      	ldrb	r3, [r3, #0]
    2d4c:	1cf9      	adds	r1, r7, #3
    2d4e:	7808      	ldrb	r0, [r1, #0]
    2d50:	1cb9      	adds	r1, r7, #2
    2d52:	7809      	ldrb	r1, [r1, #0]
    2d54:	687c      	ldr	r4, [r7, #4]
    2d56:	2540      	movs	r5, #64	; 0x40
    2d58:	01c0      	lsls	r0, r0, #7
    2d5a:	1820      	adds	r0, r4, r0
    2d5c:	1841      	adds	r1, r0, r1
    2d5e:	1949      	adds	r1, r1, r5
    2d60:	7809      	ldrb	r1, [r1, #0]
    2d62:	b2c9      	uxtb	r1, r1
    2d64:	2004      	movs	r0, #4
    2d66:	4301      	orrs	r1, r0
    2d68:	b2cc      	uxtb	r4, r1
    2d6a:	6879      	ldr	r1, [r7, #4]
    2d6c:	2040      	movs	r0, #64	; 0x40
    2d6e:	01d2      	lsls	r2, r2, #7
    2d70:	188a      	adds	r2, r1, r2
    2d72:	18d3      	adds	r3, r2, r3
    2d74:	181b      	adds	r3, r3, r0
    2d76:	1c22      	adds	r2, r4, #0
    2d78:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	46bd      	mov	sp, r7
    2d7e:	b002      	add	sp, #8
    2d80:	bdb0      	pop	{r4, r5, r7, pc}

00002d82 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2d82:	b5b0      	push	{r4, r5, r7, lr}
    2d84:	b082      	sub	sp, #8
    2d86:	af00      	add	r7, sp, #0
    2d88:	6078      	str	r0, [r7, #4]
    2d8a:	0008      	movs	r0, r1
    2d8c:	0011      	movs	r1, r2
    2d8e:	1cfb      	adds	r3, r7, #3
    2d90:	1c02      	adds	r2, r0, #0
    2d92:	701a      	strb	r2, [r3, #0]
    2d94:	1cbb      	adds	r3, r7, #2
    2d96:	1c0a      	adds	r2, r1, #0
    2d98:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d9a:	1cfb      	adds	r3, r7, #3
    2d9c:	781a      	ldrb	r2, [r3, #0]
    2d9e:	1cbb      	adds	r3, r7, #2
    2da0:	781b      	ldrb	r3, [r3, #0]
    2da2:	1cf9      	adds	r1, r7, #3
    2da4:	7808      	ldrb	r0, [r1, #0]
    2da6:	1cb9      	adds	r1, r7, #2
    2da8:	7809      	ldrb	r1, [r1, #0]
    2daa:	687c      	ldr	r4, [r7, #4]
    2dac:	2540      	movs	r5, #64	; 0x40
    2dae:	01c0      	lsls	r0, r0, #7
    2db0:	1820      	adds	r0, r4, r0
    2db2:	1841      	adds	r1, r0, r1
    2db4:	1949      	adds	r1, r1, r5
    2db6:	7809      	ldrb	r1, [r1, #0]
    2db8:	b2c9      	uxtb	r1, r1
    2dba:	2004      	movs	r0, #4
    2dbc:	4381      	bics	r1, r0
    2dbe:	b2cc      	uxtb	r4, r1
    2dc0:	6879      	ldr	r1, [r7, #4]
    2dc2:	2040      	movs	r0, #64	; 0x40
    2dc4:	01d2      	lsls	r2, r2, #7
    2dc6:	188a      	adds	r2, r1, r2
    2dc8:	18d3      	adds	r3, r2, r3
    2dca:	181b      	adds	r3, r3, r0
    2dcc:	1c22      	adds	r2, r4, #0
    2dce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2dd0:	46c0      	nop			; (mov r8, r8)
    2dd2:	46bd      	mov	sp, r7
    2dd4:	b002      	add	sp, #8
    2dd6:	bdb0      	pop	{r4, r5, r7, pc}

00002dd8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6039      	str	r1, [r7, #0]
    2de0:	0011      	movs	r1, r2
    2de2:	1dfb      	adds	r3, r7, #7
    2de4:	1c02      	adds	r2, r0, #0
    2de6:	701a      	strb	r2, [r3, #0]
    2de8:	1dbb      	adds	r3, r7, #6
    2dea:	1c0a      	adds	r2, r1, #0
    2dec:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    2dee:	1dbb      	adds	r3, r7, #6
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	2b01      	cmp	r3, #1
    2df4:	d023      	beq.n	2e3e <_gpio_set_direction+0x66>
    2df6:	2b02      	cmp	r3, #2
    2df8:	d03f      	beq.n	2e7a <_gpio_set_direction+0xa2>
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d15d      	bne.n	2eba <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    2dfe:	683a      	ldr	r2, [r7, #0]
    2e00:	1dfb      	adds	r3, r7, #7
    2e02:	7819      	ldrb	r1, [r3, #0]
    2e04:	23c0      	movs	r3, #192	; 0xc0
    2e06:	05db      	lsls	r3, r3, #23
    2e08:	0018      	movs	r0, r3
    2e0a:	4b31      	ldr	r3, [pc, #196]	; (2ed0 <_gpio_set_direction+0xf8>)
    2e0c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e0e:	683b      	ldr	r3, [r7, #0]
    2e10:	041b      	lsls	r3, r3, #16
    2e12:	0c1b      	lsrs	r3, r3, #16
    2e14:	2280      	movs	r2, #128	; 0x80
    2e16:	05d2      	lsls	r2, r2, #23
    2e18:	431a      	orrs	r2, r3
    2e1a:	1dfb      	adds	r3, r7, #7
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	482d      	ldr	r0, [pc, #180]	; (2ed4 <_gpio_set_direction+0xfc>)
    2e20:	0019      	movs	r1, r3
    2e22:	4b2d      	ldr	r3, [pc, #180]	; (2ed8 <_gpio_set_direction+0x100>)
    2e24:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2e2a:	22c0      	movs	r2, #192	; 0xc0
    2e2c:	0612      	lsls	r2, r2, #24
    2e2e:	431a      	orrs	r2, r3
    2e30:	1dfb      	adds	r3, r7, #7
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	4827      	ldr	r0, [pc, #156]	; (2ed4 <_gpio_set_direction+0xfc>)
    2e36:	0019      	movs	r1, r3
    2e38:	4b27      	ldr	r3, [pc, #156]	; (2ed8 <_gpio_set_direction+0x100>)
    2e3a:	4798      	blx	r3
		break;
    2e3c:	e043      	b.n	2ec6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    2e3e:	683a      	ldr	r2, [r7, #0]
    2e40:	1dfb      	adds	r3, r7, #7
    2e42:	7819      	ldrb	r1, [r3, #0]
    2e44:	23c0      	movs	r3, #192	; 0xc0
    2e46:	05db      	lsls	r3, r3, #23
    2e48:	0018      	movs	r0, r3
    2e4a:	4b21      	ldr	r3, [pc, #132]	; (2ed0 <_gpio_set_direction+0xf8>)
    2e4c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2e4e:	683b      	ldr	r3, [r7, #0]
    2e50:	041b      	lsls	r3, r3, #16
    2e52:	0c1b      	lsrs	r3, r3, #16
    2e54:	4a21      	ldr	r2, [pc, #132]	; (2edc <_gpio_set_direction+0x104>)
    2e56:	431a      	orrs	r2, r3
    2e58:	1dfb      	adds	r3, r7, #7
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	481d      	ldr	r0, [pc, #116]	; (2ed4 <_gpio_set_direction+0xfc>)
    2e5e:	0019      	movs	r1, r3
    2e60:	4b1d      	ldr	r3, [pc, #116]	; (2ed8 <_gpio_set_direction+0x100>)
    2e62:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2e64:	683b      	ldr	r3, [r7, #0]
    2e66:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2e68:	4a1d      	ldr	r2, [pc, #116]	; (2ee0 <_gpio_set_direction+0x108>)
    2e6a:	431a      	orrs	r2, r3
    2e6c:	1dfb      	adds	r3, r7, #7
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	4818      	ldr	r0, [pc, #96]	; (2ed4 <_gpio_set_direction+0xfc>)
    2e72:	0019      	movs	r1, r3
    2e74:	4b18      	ldr	r3, [pc, #96]	; (2ed8 <_gpio_set_direction+0x100>)
    2e76:	4798      	blx	r3
		break;
    2e78:	e025      	b.n	2ec6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    2e7a:	683a      	ldr	r2, [r7, #0]
    2e7c:	1dfb      	adds	r3, r7, #7
    2e7e:	7819      	ldrb	r1, [r3, #0]
    2e80:	23c0      	movs	r3, #192	; 0xc0
    2e82:	05db      	lsls	r3, r3, #23
    2e84:	0018      	movs	r0, r3
    2e86:	4b17      	ldr	r3, [pc, #92]	; (2ee4 <_gpio_set_direction+0x10c>)
    2e88:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	041b      	lsls	r3, r3, #16
    2e8e:	0c1b      	lsrs	r3, r3, #16
    2e90:	2280      	movs	r2, #128	; 0x80
    2e92:	05d2      	lsls	r2, r2, #23
    2e94:	431a      	orrs	r2, r3
    2e96:	1dfb      	adds	r3, r7, #7
    2e98:	781b      	ldrb	r3, [r3, #0]
    2e9a:	480e      	ldr	r0, [pc, #56]	; (2ed4 <_gpio_set_direction+0xfc>)
    2e9c:	0019      	movs	r1, r3
    2e9e:	4b0e      	ldr	r3, [pc, #56]	; (2ed8 <_gpio_set_direction+0x100>)
    2ea0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2ea2:	683b      	ldr	r3, [r7, #0]
    2ea4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2ea6:	22c0      	movs	r2, #192	; 0xc0
    2ea8:	0612      	lsls	r2, r2, #24
    2eaa:	431a      	orrs	r2, r3
    2eac:	1dfb      	adds	r3, r7, #7
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	4808      	ldr	r0, [pc, #32]	; (2ed4 <_gpio_set_direction+0xfc>)
    2eb2:	0019      	movs	r1, r3
    2eb4:	4b08      	ldr	r3, [pc, #32]	; (2ed8 <_gpio_set_direction+0x100>)
    2eb6:	4798      	blx	r3
		break;
    2eb8:	e005      	b.n	2ec6 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
    2eba:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <_gpio_set_direction+0x110>)
    2ebc:	224e      	movs	r2, #78	; 0x4e
    2ebe:	0019      	movs	r1, r3
    2ec0:	2000      	movs	r0, #0
    2ec2:	4b0a      	ldr	r3, [pc, #40]	; (2eec <_gpio_set_direction+0x114>)
    2ec4:	4798      	blx	r3
	}
}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	46bd      	mov	sp, r7
    2eca:	b002      	add	sp, #8
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	00002c7d 	.word	0x00002c7d
    2ed4:	40002800 	.word	0x40002800
    2ed8:	00002d01 	.word	0x00002d01
    2edc:	40020000 	.word	0x40020000
    2ee0:	c0020000 	.word	0xc0020000
    2ee4:	00002c51 	.word	0x00002c51
    2ee8:	0001ef70 	.word	0x0001ef70
    2eec:	00000995 	.word	0x00000995

00002ef0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b082      	sub	sp, #8
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	6039      	str	r1, [r7, #0]
    2ef8:	0011      	movs	r1, r2
    2efa:	1dfb      	adds	r3, r7, #7
    2efc:	1c02      	adds	r2, r0, #0
    2efe:	701a      	strb	r2, [r3, #0]
    2f00:	1dbb      	adds	r3, r7, #6
    2f02:	1c0a      	adds	r2, r1, #0
    2f04:	701a      	strb	r2, [r3, #0]
	if (level) {
    2f06:	1dbb      	adds	r3, r7, #6
    2f08:	781b      	ldrb	r3, [r3, #0]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d008      	beq.n	2f20 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    2f0e:	683a      	ldr	r2, [r7, #0]
    2f10:	1dfb      	adds	r3, r7, #7
    2f12:	7819      	ldrb	r1, [r3, #0]
    2f14:	23c0      	movs	r3, #192	; 0xc0
    2f16:	05db      	lsls	r3, r3, #23
    2f18:	0018      	movs	r0, r3
    2f1a:	4b07      	ldr	r3, [pc, #28]	; (2f38 <_gpio_set_level+0x48>)
    2f1c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
    2f1e:	e007      	b.n	2f30 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    2f20:	683a      	ldr	r2, [r7, #0]
    2f22:	1dfb      	adds	r3, r7, #7
    2f24:	7819      	ldrb	r1, [r3, #0]
    2f26:	23c0      	movs	r3, #192	; 0xc0
    2f28:	05db      	lsls	r3, r3, #23
    2f2a:	0018      	movs	r0, r3
    2f2c:	4b03      	ldr	r3, [pc, #12]	; (2f3c <_gpio_set_level+0x4c>)
    2f2e:	4798      	blx	r3
}
    2f30:	46c0      	nop			; (mov r8, r8)
    2f32:	46bd      	mov	sp, r7
    2f34:	b002      	add	sp, #8
    2f36:	bd80      	pop	{r7, pc}
    2f38:	00002ca9 	.word	0x00002ca9
    2f3c:	00002cd5 	.word	0x00002cd5

00002f40 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2f40:	b590      	push	{r4, r7, lr}
    2f42:	b083      	sub	sp, #12
    2f44:	af00      	add	r7, sp, #0
    2f46:	0004      	movs	r4, r0
    2f48:	0008      	movs	r0, r1
    2f4a:	0011      	movs	r1, r2
    2f4c:	1dfb      	adds	r3, r7, #7
    2f4e:	1c22      	adds	r2, r4, #0
    2f50:	701a      	strb	r2, [r3, #0]
    2f52:	1dbb      	adds	r3, r7, #6
    2f54:	1c02      	adds	r2, r0, #0
    2f56:	701a      	strb	r2, [r3, #0]
    2f58:	1d7b      	adds	r3, r7, #5
    2f5a:	1c0a      	adds	r2, r1, #0
    2f5c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    2f5e:	1d7b      	adds	r3, r7, #5
    2f60:	781b      	ldrb	r3, [r3, #0]
    2f62:	2b01      	cmp	r3, #1
    2f64:	d00c      	beq.n	2f80 <_gpio_set_pin_pull_mode+0x40>
    2f66:	2b02      	cmp	r3, #2
    2f68:	d029      	beq.n	2fbe <_gpio_set_pin_pull_mode+0x7e>
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d146      	bne.n	2ffc <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2f6e:	1dbb      	adds	r3, r7, #6
    2f70:	781a      	ldrb	r2, [r3, #0]
    2f72:	1dfb      	adds	r3, r7, #7
    2f74:	781b      	ldrb	r3, [r3, #0]
    2f76:	4827      	ldr	r0, [pc, #156]	; (3014 <_gpio_set_pin_pull_mode+0xd4>)
    2f78:	0019      	movs	r1, r3
    2f7a:	4b27      	ldr	r3, [pc, #156]	; (3018 <_gpio_set_pin_pull_mode+0xd8>)
    2f7c:	4798      	blx	r3
		break;
    2f7e:	e044      	b.n	300a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    2f80:	1dbb      	adds	r3, r7, #6
    2f82:	781b      	ldrb	r3, [r3, #0]
    2f84:	2201      	movs	r2, #1
    2f86:	409a      	lsls	r2, r3
    2f88:	1dfb      	adds	r3, r7, #7
    2f8a:	7819      	ldrb	r1, [r3, #0]
    2f8c:	23c0      	movs	r3, #192	; 0xc0
    2f8e:	05db      	lsls	r3, r3, #23
    2f90:	0018      	movs	r0, r3
    2f92:	4b22      	ldr	r3, [pc, #136]	; (301c <_gpio_set_pin_pull_mode+0xdc>)
    2f94:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2f96:	1dbb      	adds	r3, r7, #6
    2f98:	781a      	ldrb	r2, [r3, #0]
    2f9a:	1dfb      	adds	r3, r7, #7
    2f9c:	781b      	ldrb	r3, [r3, #0]
    2f9e:	481d      	ldr	r0, [pc, #116]	; (3014 <_gpio_set_pin_pull_mode+0xd4>)
    2fa0:	0019      	movs	r1, r3
    2fa2:	4b1f      	ldr	r3, [pc, #124]	; (3020 <_gpio_set_pin_pull_mode+0xe0>)
    2fa4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    2fa6:	1dbb      	adds	r3, r7, #6
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	2201      	movs	r2, #1
    2fac:	409a      	lsls	r2, r3
    2fae:	1dfb      	adds	r3, r7, #7
    2fb0:	7819      	ldrb	r1, [r3, #0]
    2fb2:	23c0      	movs	r3, #192	; 0xc0
    2fb4:	05db      	lsls	r3, r3, #23
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b1a      	ldr	r3, [pc, #104]	; (3024 <_gpio_set_pin_pull_mode+0xe4>)
    2fba:	4798      	blx	r3
		break;
    2fbc:	e025      	b.n	300a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    2fbe:	1dbb      	adds	r3, r7, #6
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	2201      	movs	r2, #1
    2fc4:	409a      	lsls	r2, r3
    2fc6:	1dfb      	adds	r3, r7, #7
    2fc8:	7819      	ldrb	r1, [r3, #0]
    2fca:	23c0      	movs	r3, #192	; 0xc0
    2fcc:	05db      	lsls	r3, r3, #23
    2fce:	0018      	movs	r0, r3
    2fd0:	4b12      	ldr	r3, [pc, #72]	; (301c <_gpio_set_pin_pull_mode+0xdc>)
    2fd2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2fd4:	1dbb      	adds	r3, r7, #6
    2fd6:	781a      	ldrb	r2, [r3, #0]
    2fd8:	1dfb      	adds	r3, r7, #7
    2fda:	781b      	ldrb	r3, [r3, #0]
    2fdc:	480d      	ldr	r0, [pc, #52]	; (3014 <_gpio_set_pin_pull_mode+0xd4>)
    2fde:	0019      	movs	r1, r3
    2fe0:	4b0f      	ldr	r3, [pc, #60]	; (3020 <_gpio_set_pin_pull_mode+0xe0>)
    2fe2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    2fe4:	1dbb      	adds	r3, r7, #6
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	2201      	movs	r2, #1
    2fea:	409a      	lsls	r2, r3
    2fec:	1dfb      	adds	r3, r7, #7
    2fee:	7819      	ldrb	r1, [r3, #0]
    2ff0:	23c0      	movs	r3, #192	; 0xc0
    2ff2:	05db      	lsls	r3, r3, #23
    2ff4:	0018      	movs	r0, r3
    2ff6:	4b0c      	ldr	r3, [pc, #48]	; (3028 <_gpio_set_pin_pull_mode+0xe8>)
    2ff8:	4798      	blx	r3
		break;
    2ffa:	e006      	b.n	300a <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
    2ffc:	4b0b      	ldr	r3, [pc, #44]	; (302c <_gpio_set_pin_pull_mode+0xec>)
    2ffe:	2291      	movs	r2, #145	; 0x91
    3000:	0019      	movs	r1, r3
    3002:	2000      	movs	r0, #0
    3004:	4b0a      	ldr	r3, [pc, #40]	; (3030 <_gpio_set_pin_pull_mode+0xf0>)
    3006:	4798      	blx	r3
		break;
    3008:	46c0      	nop			; (mov r8, r8)
	}
}
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	46bd      	mov	sp, r7
    300e:	b003      	add	sp, #12
    3010:	bd90      	pop	{r4, r7, pc}
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	40002800 	.word	0x40002800
    3018:	00002d83 	.word	0x00002d83
    301c:	00002c7d 	.word	0x00002c7d
    3020:	00002d2d 	.word	0x00002d2d
    3024:	00002ca9 	.word	0x00002ca9
    3028:	00002cd5 	.word	0x00002cd5
    302c:	0001ef70 	.word	0x0001ef70
    3030:	00000995 	.word	0x00000995

00003034 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3034:	b580      	push	{r7, lr}
    3036:	b082      	sub	sp, #8
    3038:	af00      	add	r7, sp, #0
    303a:	0002      	movs	r2, r0
    303c:	1dfb      	adds	r3, r7, #7
    303e:	701a      	strb	r2, [r3, #0]
    3040:	1dbb      	adds	r3, r7, #6
    3042:	1c0a      	adds	r2, r1, #0
    3044:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3046:	1dfb      	adds	r3, r7, #7
    3048:	781b      	ldrb	r3, [r3, #0]
    304a:	095b      	lsrs	r3, r3, #5
    304c:	b2d8      	uxtb	r0, r3
    304e:	1dfb      	adds	r3, r7, #7
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	221f      	movs	r2, #31
    3054:	4013      	ands	r3, r2
    3056:	b2d9      	uxtb	r1, r3
    3058:	1dbb      	adds	r3, r7, #6
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	001a      	movs	r2, r3
    305e:	4b03      	ldr	r3, [pc, #12]	; (306c <gpio_set_pin_pull_mode+0x38>)
    3060:	4798      	blx	r3
}
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	46bd      	mov	sp, r7
    3066:	b002      	add	sp, #8
    3068:	bd80      	pop	{r7, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	00002f41 	.word	0x00002f41

00003070 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3070:	b580      	push	{r7, lr}
    3072:	b082      	sub	sp, #8
    3074:	af00      	add	r7, sp, #0
    3076:	0002      	movs	r2, r0
    3078:	1dfb      	adds	r3, r7, #7
    307a:	701a      	strb	r2, [r3, #0]
    307c:	1dbb      	adds	r3, r7, #6
    307e:	1c0a      	adds	r2, r1, #0
    3080:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3082:	1dfb      	adds	r3, r7, #7
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	095b      	lsrs	r3, r3, #5
    3088:	b2d8      	uxtb	r0, r3
    308a:	1dfb      	adds	r3, r7, #7
    308c:	781b      	ldrb	r3, [r3, #0]
    308e:	221f      	movs	r2, #31
    3090:	4013      	ands	r3, r2
    3092:	2201      	movs	r2, #1
    3094:	409a      	lsls	r2, r3
    3096:	0011      	movs	r1, r2
    3098:	1dbb      	adds	r3, r7, #6
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	001a      	movs	r2, r3
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <gpio_set_pin_direction+0x3c>)
    30a0:	4798      	blx	r3
}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	46bd      	mov	sp, r7
    30a6:	b002      	add	sp, #8
    30a8:	bd80      	pop	{r7, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	00002dd9 	.word	0x00002dd9

000030b0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b082      	sub	sp, #8
    30b4:	af00      	add	r7, sp, #0
    30b6:	0002      	movs	r2, r0
    30b8:	1dfb      	adds	r3, r7, #7
    30ba:	701a      	strb	r2, [r3, #0]
    30bc:	1dbb      	adds	r3, r7, #6
    30be:	1c0a      	adds	r2, r1, #0
    30c0:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    30c2:	1dfb      	adds	r3, r7, #7
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	095b      	lsrs	r3, r3, #5
    30c8:	b2d8      	uxtb	r0, r3
    30ca:	1dfb      	adds	r3, r7, #7
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	221f      	movs	r2, #31
    30d0:	4013      	ands	r3, r2
    30d2:	2201      	movs	r2, #1
    30d4:	409a      	lsls	r2, r3
    30d6:	0011      	movs	r1, r2
    30d8:	1dbb      	adds	r3, r7, #6
    30da:	781b      	ldrb	r3, [r3, #0]
    30dc:	001a      	movs	r2, r3
    30de:	4b03      	ldr	r3, [pc, #12]	; (30ec <gpio_set_pin_level+0x3c>)
    30e0:	4798      	blx	r3
}
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	46bd      	mov	sp, r7
    30e6:	b002      	add	sp, #8
    30e8:	bd80      	pop	{r7, pc}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	00002ef1 	.word	0x00002ef1

000030f0 <GpioMcuInit>:
#include <hal_gpio.h>
#include <hal_ext_irq.h>
#include "gpio-board.h"

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
    30f0:	b590      	push	{r4, r7, lr}
    30f2:	b083      	sub	sp, #12
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	000c      	movs	r4, r1
    30fa:	0010      	movs	r0, r2
    30fc:	0019      	movs	r1, r3
    30fe:	1cfb      	adds	r3, r7, #3
    3100:	1c22      	adds	r2, r4, #0
    3102:	701a      	strb	r2, [r3, #0]
    3104:	1cbb      	adds	r3, r7, #2
    3106:	1c02      	adds	r2, r0, #0
    3108:	701a      	strb	r2, [r3, #0]
    310a:	1c7b      	adds	r3, r7, #1
    310c:	1c0a      	adds	r2, r1, #0
    310e:	701a      	strb	r2, [r3, #0]
    obj->pin = pin;
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	1cfa      	adds	r2, r7, #3
    3114:	7812      	ldrb	r2, [r2, #0]
    3116:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
    3118:	1cfb      	adds	r3, r7, #3
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	b25b      	sxtb	r3, r3
    311e:	3301      	adds	r3, #1
    3120:	d02a      	beq.n	3178 <GpioMcuInit+0x88>
        return;
    }

    //obj->port = ( void* )GPIO_PORT( obj->pin );

    if( mode == PIN_INPUT )
    3122:	1cbb      	adds	r3, r7, #2
    3124:	781b      	ldrb	r3, [r3, #0]
    3126:	2b00      	cmp	r3, #0
    3128:	d113      	bne.n	3152 <GpioMcuInit+0x62>
    {
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_IN );
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	781b      	ldrb	r3, [r3, #0]
    312e:	b25b      	sxtb	r3, r3
    3130:	b2db      	uxtb	r3, r3
    3132:	2101      	movs	r1, #1
    3134:	0018      	movs	r0, r3
    3136:	4b12      	ldr	r3, [pc, #72]	; (3180 <GpioMcuInit+0x90>)
    3138:	4798      	blx	r3
        gpio_set_pin_pull_mode( obj->pin, type ); // the pull up/down need to be set after the direction for correct working
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	781b      	ldrb	r3, [r3, #0]
    313e:	b25b      	sxtb	r3, r3
    3140:	b2db      	uxtb	r3, r3
    3142:	2218      	movs	r2, #24
    3144:	18ba      	adds	r2, r7, r2
    3146:	7812      	ldrb	r2, [r2, #0]
    3148:	0011      	movs	r1, r2
    314a:	0018      	movs	r0, r3
    314c:	4b0d      	ldr	r3, [pc, #52]	; (3184 <GpioMcuInit+0x94>)
    314e:	4798      	blx	r3
    3150:	e007      	b.n	3162 <GpioMcuInit+0x72>
    }
    else // mode output
    {
        gpio_set_pin_direction( obj->pin, GPIO_DIRECTION_OUT );
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	781b      	ldrb	r3, [r3, #0]
    3156:	b25b      	sxtb	r3, r3
    3158:	b2db      	uxtb	r3, r3
    315a:	2102      	movs	r1, #2
    315c:	0018      	movs	r0, r3
    315e:	4b08      	ldr	r3, [pc, #32]	; (3180 <GpioMcuInit+0x90>)
    3160:	4798      	blx	r3
    }


    // Sets initial output value
    if( mode == PIN_OUTPUT )
    3162:	1cbb      	adds	r3, r7, #2
    3164:	781b      	ldrb	r3, [r3, #0]
    3166:	2b01      	cmp	r3, #1
    3168:	d107      	bne.n	317a <GpioMcuInit+0x8a>
    {
        GpioMcuWrite( obj, value );
    316a:	69fa      	ldr	r2, [r7, #28]
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	0011      	movs	r1, r2
    3170:	0018      	movs	r0, r3
    3172:	4b05      	ldr	r3, [pc, #20]	; (3188 <GpioMcuInit+0x98>)
    3174:	4798      	blx	r3
    3176:	e000      	b.n	317a <GpioMcuInit+0x8a>
        return;
    3178:	46c0      	nop			; (mov r8, r8)
    }
}
    317a:	46bd      	mov	sp, r7
    317c:	b003      	add	sp, #12
    317e:	bd90      	pop	{r4, r7, pc}
    3180:	00003071 	.word	0x00003071
    3184:	00003035 	.word	0x00003035
    3188:	0000318d 	.word	0x0000318d

0000318c <GpioMcuWrite>:
{
    //ext_irq_register( obj->pin, NULL );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
    318c:	b580      	push	{r7, lr}
    318e:	b082      	sub	sp, #8
    3190:	af00      	add	r7, sp, #0
    3192:	6078      	str	r0, [r7, #4]
    3194:	6039      	str	r1, [r7, #0]

    if( obj == NULL )
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	2b00      	cmp	r3, #0
    319a:	d100      	bne.n	319e <GpioMcuWrite+0x12>
    {
        //assert_param( FAIL );
        while( 1 );
    319c:	e7fe      	b.n	319c <GpioMcuWrite+0x10>
    }
    // Check if pin is not connected
    if( obj->pin == NC )
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	781b      	ldrb	r3, [r3, #0]
    31a2:	b25b      	sxtb	r3, r3
    31a4:	3301      	adds	r3, #1
    31a6:	d00c      	beq.n	31c2 <GpioMcuWrite+0x36>
    {
        return;
    }
    gpio_set_pin_level( obj->pin, value );
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	b25b      	sxtb	r3, r3
    31ae:	b2da      	uxtb	r2, r3
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	1e59      	subs	r1, r3, #1
    31b4:	418b      	sbcs	r3, r1
    31b6:	b2db      	uxtb	r3, r3
    31b8:	0019      	movs	r1, r3
    31ba:	0010      	movs	r0, r2
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <GpioMcuWrite+0x40>)
    31be:	4798      	blx	r3
    31c0:	e000      	b.n	31c4 <GpioMcuWrite+0x38>
        return;
    31c2:	46c0      	nop			; (mov r8, r8)
}
    31c4:	46bd      	mov	sp, r7
    31c6:	b002      	add	sp, #8
    31c8:	bd80      	pop	{r7, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	000030b1 	.word	0x000030b1

000031d0 <RtcInit>:
 * \brief Callback for the hw_timer when counter overflows
 */
static void RtcOverflowIrq( void );

void RtcInit( void )
{
    31d0:	b580      	push	{r7, lr}
    31d2:	af00      	add	r7, sp, #0
    if( RtcInitialized == false )
    31d4:	4b0d      	ldr	r3, [pc, #52]	; (320c <RtcInit+0x3c>)
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	2201      	movs	r2, #1
    31da:	4053      	eors	r3, r2
    31dc:	b2db      	uxtb	r3, r3
    31de:	2b00      	cmp	r3, #0
    31e0:	d011      	beq.n	3206 <RtcInit+0x36>
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
        GpioInit( &DbgRtcPin0, RTC_DBG_PIN_0, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
        GpioInit( &DbgRtcPin1, RTC_DBG_PIN_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
        // RTC timer
        HwTimerInit( );
    31e2:	4b0b      	ldr	r3, [pc, #44]	; (3210 <RtcInit+0x40>)
    31e4:	4798      	blx	r3
        HwTimerAlarmSetCallback( RtcAlarmIrq );
    31e6:	4b0b      	ldr	r3, [pc, #44]	; (3214 <RtcInit+0x44>)
    31e8:	0018      	movs	r0, r3
    31ea:	4b0b      	ldr	r3, [pc, #44]	; (3218 <RtcInit+0x48>)
    31ec:	4798      	blx	r3
        HwTimerOverflowSetCallback( RtcOverflowIrq );
    31ee:	4b0b      	ldr	r3, [pc, #44]	; (321c <RtcInit+0x4c>)
    31f0:	0018      	movs	r0, r3
    31f2:	4b0b      	ldr	r3, [pc, #44]	; (3220 <RtcInit+0x50>)
    31f4:	4798      	blx	r3

        RtcTimerContext.AlarmState = ALARM_STOPPED;
    31f6:	4b0b      	ldr	r3, [pc, #44]	; (3224 <RtcInit+0x54>)
    31f8:	2200      	movs	r2, #0
    31fa:	609a      	str	r2, [r3, #8]
        RtcSetTimerContext( );
    31fc:	4b0a      	ldr	r3, [pc, #40]	; (3228 <RtcInit+0x58>)
    31fe:	4798      	blx	r3
        RtcInitialized = true;
    3200:	4b02      	ldr	r3, [pc, #8]	; (320c <RtcInit+0x3c>)
    3202:	2201      	movs	r2, #1
    3204:	701a      	strb	r2, [r3, #0]
    }
}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	46bd      	mov	sp, r7
    320a:	bd80      	pop	{r7, pc}
    320c:	20000b5c 	.word	0x20000b5c
    3210:	000026d5 	.word	0x000026d5
    3214:	000034d5 	.word	0x000034d5
    3218:	0000277d 	.word	0x0000277d
    321c:	000034fd 	.word	0x000034fd
    3220:	00002799 	.word	0x00002799
    3224:	20000b60 	.word	0x20000b60
    3228:	0000322d 	.word	0x0000322d

0000322c <RtcSetTimerContext>:

uint32_t RtcSetTimerContext( void )
{
    322c:	b580      	push	{r7, lr}
    322e:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )HwTimerGetTime( );
    3230:	4b04      	ldr	r3, [pc, #16]	; (3244 <RtcSetTimerContext+0x18>)
    3232:	4798      	blx	r3
    3234:	0002      	movs	r2, r0
    3236:	4b04      	ldr	r3, [pc, #16]	; (3248 <RtcSetTimerContext+0x1c>)
    3238:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
    323a:	4b03      	ldr	r3, [pc, #12]	; (3248 <RtcSetTimerContext+0x1c>)
    323c:	681b      	ldr	r3, [r3, #0]
}
    323e:	0018      	movs	r0, r3
    3240:	46bd      	mov	sp, r7
    3242:	bd80      	pop	{r7, pc}
    3244:	00002825 	.word	0x00002825
    3248:	20000b60 	.word	0x20000b60

0000324c <RtcGetTimerContext>:

uint32_t RtcGetTimerContext( void )
{
    324c:	b580      	push	{r7, lr}
    324e:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <RtcGetTimerContext+0x10>)
    3252:	681b      	ldr	r3, [r3, #0]
}
    3254:	0018      	movs	r0, r3
    3256:	46bd      	mov	sp, r7
    3258:	bd80      	pop	{r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	20000b60 	.word	0x20000b60

00003260 <RtcGetMinimumTimeout>:

uint32_t RtcGetMinimumTimeout( void )
{
    3260:	b580      	push	{r7, lr}
    3262:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
    3264:	2303      	movs	r3, #3
}
    3266:	0018      	movs	r0, r3
    3268:	46bd      	mov	sp, r7
    326a:	bd80      	pop	{r7, pc}

0000326c <RtcMs2Tick>:

uint32_t RtcMs2Tick( TimerTime_t milliseconds )
{
    326c:	b580      	push	{r7, lr}
    326e:	b082      	sub	sp, #8
    3270:	af00      	add	r7, sp, #0
    3272:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( milliseconds );
    3274:	687b      	ldr	r3, [r7, #4]
}
    3276:	0018      	movs	r0, r3
    3278:	46bd      	mov	sp, r7
    327a:	b002      	add	sp, #8
    327c:	bd80      	pop	{r7, pc}

0000327e <RtcTick2Ms>:

TimerTime_t RtcTick2Ms( uint32_t tick )
{
    327e:	b580      	push	{r7, lr}
    3280:	b084      	sub	sp, #16
    3282:	af00      	add	r7, sp, #0
    3284:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> 10;
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	0a9b      	lsrs	r3, r3, #10
    328a:	60fb      	str	r3, [r7, #12]

    tick = tick & 0x3FF;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	059b      	lsls	r3, r3, #22
    3290:	0d9b      	lsrs	r3, r3, #22
    3292:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> 10 ) );
    3294:	68fb      	ldr	r3, [r7, #12]
    3296:	22fa      	movs	r2, #250	; 0xfa
    3298:	0092      	lsls	r2, r2, #2
    329a:	435a      	muls	r2, r3
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	21fa      	movs	r1, #250	; 0xfa
    32a0:	0089      	lsls	r1, r1, #2
    32a2:	434b      	muls	r3, r1
    32a4:	0a9b      	lsrs	r3, r3, #10
    32a6:	18d3      	adds	r3, r2, r3
}
    32a8:	0018      	movs	r0, r3
    32aa:	46bd      	mov	sp, r7
    32ac:	b004      	add	sp, #16
    32ae:	bd80      	pop	{r7, pc}

000032b0 <RtcSetAlarm>:
        __NOP( );
    }
}

void RtcSetAlarm( uint32_t timeout )
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b082      	sub	sp, #8
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
    RtcStartAlarm( timeout );
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	0018      	movs	r0, r3
    32bc:	4b02      	ldr	r3, [pc, #8]	; (32c8 <RtcSetAlarm+0x18>)
    32be:	4798      	blx	r3
}
    32c0:	46c0      	nop			; (mov r8, r8)
    32c2:	46bd      	mov	sp, r7
    32c4:	b002      	add	sp, #8
    32c6:	bd80      	pop	{r7, pc}
    32c8:	000032e1 	.word	0x000032e1

000032cc <RtcStopAlarm>:

void RtcStopAlarm( void )
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    32d0:	4b02      	ldr	r3, [pc, #8]	; (32dc <RtcStopAlarm+0x10>)
    32d2:	2200      	movs	r2, #0
    32d4:	609a      	str	r2, [r3, #8]
}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	46bd      	mov	sp, r7
    32da:	bd80      	pop	{r7, pc}
    32dc:	20000b60 	.word	0x20000b60

000032e0 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b084      	sub	sp, #16
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
    32e8:	230c      	movs	r3, #12
    32ea:	18fb      	adds	r3, r7, r3
    32ec:	0018      	movs	r0, r3
    32ee:	4b19      	ldr	r3, [pc, #100]	; (3354 <RtcStartAlarm+0x74>)
    32f0:	4798      	blx	r3

    RtcStopAlarm( );
    32f2:	4b19      	ldr	r3, [pc, #100]	; (3358 <RtcStartAlarm+0x78>)
    32f4:	4798      	blx	r3

    RtcTimerContext.Delay = timeout;
    32f6:	4b19      	ldr	r3, [pc, #100]	; (335c <RtcStartAlarm+0x7c>)
    32f8:	687a      	ldr	r2, [r7, #4]
    32fa:	605a      	str	r2, [r3, #4]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin0, 0 );
    GpioWrite( &DbgRtcPin1, 0 );
#endif

    RtcTimeoutPendingInterrupt = true;
    32fc:	4b18      	ldr	r3, [pc, #96]	; (3360 <RtcStartAlarm+0x80>)
    32fe:	2201      	movs	r2, #1
    3300:	701a      	strb	r2, [r3, #0]
    RtcTimeoutPendingPolling = false;
    3302:	4b18      	ldr	r3, [pc, #96]	; (3364 <RtcStartAlarm+0x84>)
    3304:	2200      	movs	r2, #0
    3306:	701a      	strb	r2, [r3, #0]

    RtcTimerContext.AlarmState = ALARM_RUNNING;
    3308:	4b14      	ldr	r3, [pc, #80]	; (335c <RtcStartAlarm+0x7c>)
    330a:	2201      	movs	r2, #1
    330c:	609a      	str	r2, [r3, #8]
    if( HwTimerLoadAbsoluteTicks( RtcTimerContext.Time + RtcTimerContext.Delay ) == false )
    330e:	4b13      	ldr	r3, [pc, #76]	; (335c <RtcStartAlarm+0x7c>)
    3310:	681a      	ldr	r2, [r3, #0]
    3312:	4b12      	ldr	r3, [pc, #72]	; (335c <RtcStartAlarm+0x7c>)
    3314:	685b      	ldr	r3, [r3, #4]
    3316:	18d3      	adds	r3, r2, r3
    3318:	0018      	movs	r0, r3
    331a:	4b13      	ldr	r3, [pc, #76]	; (3368 <RtcStartAlarm+0x88>)
    331c:	4798      	blx	r3
    331e:	0003      	movs	r3, r0
    3320:	001a      	movs	r2, r3
    3322:	2301      	movs	r3, #1
    3324:	4053      	eors	r3, r2
    3326:	b2db      	uxtb	r3, r3
    3328:	2b00      	cmp	r3, #0
    332a:	d00a      	beq.n	3342 <RtcStartAlarm+0x62>
    {
        // If timer already passed
        if( RtcTimeoutPendingInterrupt == true )
    332c:	4b0c      	ldr	r3, [pc, #48]	; (3360 <RtcStartAlarm+0x80>)
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	b2db      	uxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	d005      	beq.n	3342 <RtcStartAlarm+0x62>
        {
            // And interrupt not handled, mark as polling
            RtcTimeoutPendingPolling = true;
    3336:	4b0b      	ldr	r3, [pc, #44]	; (3364 <RtcStartAlarm+0x84>)
    3338:	2201      	movs	r2, #1
    333a:	701a      	strb	r2, [r3, #0]
            RtcTimeoutPendingInterrupt = false;
    333c:	4b08      	ldr	r3, [pc, #32]	; (3360 <RtcStartAlarm+0x80>)
    333e:	2200      	movs	r2, #0
    3340:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin0, 1 );
#endif
        }
    }
    CRITICAL_SECTION_END( );
    3342:	230c      	movs	r3, #12
    3344:	18fb      	adds	r3, r7, r3
    3346:	0018      	movs	r0, r3
    3348:	4b08      	ldr	r3, [pc, #32]	; (336c <RtcStartAlarm+0x8c>)
    334a:	4798      	blx	r3
}
    334c:	46c0      	nop			; (mov r8, r8)
    334e:	46bd      	mov	sp, r7
    3350:	b004      	add	sp, #16
    3352:	bd80      	pop	{r7, pc}
    3354:	00002a65 	.word	0x00002a65
    3358:	000032cd 	.word	0x000032cd
    335c:	20000b60 	.word	0x20000b60
    3360:	20000b5d 	.word	0x20000b5d
    3364:	20000b5e 	.word	0x20000b5e
    3368:	000027b5 	.word	0x000027b5
    336c:	00002a83 	.word	0x00002a83

00003370 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
    3370:	b580      	push	{r7, lr}
    3372:	af00      	add	r7, sp, #0
    return ( uint32_t )HwTimerGetTime( );
    3374:	4b02      	ldr	r3, [pc, #8]	; (3380 <RtcGetTimerValue+0x10>)
    3376:	4798      	blx	r3
    3378:	0003      	movs	r3, r0
}
    337a:	0018      	movs	r0, r3
    337c:	46bd      	mov	sp, r7
    337e:	bd80      	pop	{r7, pc}
    3380:	00002825 	.word	0x00002825

00003384 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
    3384:	b580      	push	{r7, lr}
    3386:	af00      	add	r7, sp, #0
    return ( uint32_t)( HwTimerGetTime( ) - RtcTimerContext.Time );
    3388:	4b04      	ldr	r3, [pc, #16]	; (339c <RtcGetTimerElapsedTime+0x18>)
    338a:	4798      	blx	r3
    338c:	0002      	movs	r2, r0
    338e:	4b04      	ldr	r3, [pc, #16]	; (33a0 <RtcGetTimerElapsedTime+0x1c>)
    3390:	681b      	ldr	r3, [r3, #0]
    3392:	1ad3      	subs	r3, r2, r3
}
    3394:	0018      	movs	r0, r3
    3396:	46bd      	mov	sp, r7
    3398:	bd80      	pop	{r7, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00002825 	.word	0x00002825
    33a0:	20000b60 	.word	0x20000b60

000033a4 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b086      	sub	sp, #24
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    uint32_t ticks = 0;
    33ac:	2300      	movs	r3, #0
    33ae:	617b      	str	r3, [r7, #20]

    uint32_t calendarValue = HwTimerGetTime( );
    33b0:	4b0b      	ldr	r3, [pc, #44]	; (33e0 <RtcGetCalendarTime+0x3c>)
    33b2:	4798      	blx	r3
    33b4:	0003      	movs	r3, r0
    33b6:	613b      	str	r3, [r7, #16]

    uint32_t seconds = ( uint32_t )calendarValue >> 10;
    33b8:	693b      	ldr	r3, [r7, #16]
    33ba:	0a9b      	lsrs	r3, r3, #10
    33bc:	60fb      	str	r3, [r7, #12]

    ticks =  ( uint32_t )calendarValue & 0x3FF;
    33be:	693b      	ldr	r3, [r7, #16]
    33c0:	059b      	lsls	r3, r3, #22
    33c2:	0d9b      	lsrs	r3, r3, #22
    33c4:	617b      	str	r3, [r7, #20]

    *milliseconds = RtcTick2Ms( ticks );
    33c6:	697b      	ldr	r3, [r7, #20]
    33c8:	0018      	movs	r0, r3
    33ca:	4b06      	ldr	r3, [pc, #24]	; (33e4 <RtcGetCalendarTime+0x40>)
    33cc:	4798      	blx	r3
    33ce:	0003      	movs	r3, r0
    33d0:	b29a      	uxth	r2, r3
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	801a      	strh	r2, [r3, #0]

    return seconds;
    33d6:	68fb      	ldr	r3, [r7, #12]
}
    33d8:	0018      	movs	r0, r3
    33da:	46bd      	mov	sp, r7
    33dc:	b006      	add	sp, #24
    33de:	bd80      	pop	{r7, pc}
    33e0:	00002825 	.word	0x00002825
    33e4:	0000327f 	.word	0x0000327f

000033e8 <RtcBkupWrite>:

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b084      	sub	sp, #16
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
    33f0:	6039      	str	r1, [r7, #0]
    CRITICAL_SECTION_BEGIN( );
    33f2:	230c      	movs	r3, #12
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	0018      	movs	r0, r3
    33f8:	4b08      	ldr	r3, [pc, #32]	; (341c <RtcBkupWrite+0x34>)
    33fa:	4798      	blx	r3
    RtcBkupRegisters[0] = data0;
    33fc:	4b08      	ldr	r3, [pc, #32]	; (3420 <RtcBkupWrite+0x38>)
    33fe:	687a      	ldr	r2, [r7, #4]
    3400:	601a      	str	r2, [r3, #0]
    RtcBkupRegisters[1] = data1;
    3402:	4b07      	ldr	r3, [pc, #28]	; (3420 <RtcBkupWrite+0x38>)
    3404:	683a      	ldr	r2, [r7, #0]
    3406:	605a      	str	r2, [r3, #4]
    CRITICAL_SECTION_END( );
    3408:	230c      	movs	r3, #12
    340a:	18fb      	adds	r3, r7, r3
    340c:	0018      	movs	r0, r3
    340e:	4b05      	ldr	r3, [pc, #20]	; (3424 <RtcBkupWrite+0x3c>)
    3410:	4798      	blx	r3
}
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	46bd      	mov	sp, r7
    3416:	b004      	add	sp, #16
    3418:	bd80      	pop	{r7, pc}
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	00002a65 	.word	0x00002a65
    3420:	20000b6c 	.word	0x20000b6c
    3424:	00002a83 	.word	0x00002a83

00003428 <RtcBkupRead>:

void RtcBkupRead( uint32_t* data0, uint32_t* data1 )
{
    3428:	b580      	push	{r7, lr}
    342a:	b084      	sub	sp, #16
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	6039      	str	r1, [r7, #0]
    CRITICAL_SECTION_BEGIN( );
    3432:	230c      	movs	r3, #12
    3434:	18fb      	adds	r3, r7, r3
    3436:	0018      	movs	r0, r3
    3438:	4b09      	ldr	r3, [pc, #36]	; (3460 <RtcBkupRead+0x38>)
    343a:	4798      	blx	r3
    *data0 = RtcBkupRegisters[0];
    343c:	4b09      	ldr	r3, [pc, #36]	; (3464 <RtcBkupRead+0x3c>)
    343e:	681a      	ldr	r2, [r3, #0]
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	601a      	str	r2, [r3, #0]
    *data1 = RtcBkupRegisters[1];
    3444:	4b07      	ldr	r3, [pc, #28]	; (3464 <RtcBkupRead+0x3c>)
    3446:	685a      	ldr	r2, [r3, #4]
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
    344c:	230c      	movs	r3, #12
    344e:	18fb      	adds	r3, r7, r3
    3450:	0018      	movs	r0, r3
    3452:	4b05      	ldr	r3, [pc, #20]	; (3468 <RtcBkupRead+0x40>)
    3454:	4798      	blx	r3
}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	46bd      	mov	sp, r7
    345a:	b004      	add	sp, #16
    345c:	bd80      	pop	{r7, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00002a65 	.word	0x00002a65
    3464:	20000b6c 	.word	0x20000b6c
    3468:	00002a83 	.word	0x00002a83

0000346c <RtcProcess>:

void RtcProcess( void )
{
    346c:	b580      	push	{r7, lr}
    346e:	b082      	sub	sp, #8
    3470:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    3472:	1d3b      	adds	r3, r7, #4
    3474:	0018      	movs	r0, r3
    3476:	4b11      	ldr	r3, [pc, #68]	; (34bc <RtcProcess+0x50>)
    3478:	4798      	blx	r3

    if( (  RtcTimerContext.AlarmState == ALARM_RUNNING ) && ( RtcTimeoutPendingPolling == true ) )
    347a:	4b11      	ldr	r3, [pc, #68]	; (34c0 <RtcProcess+0x54>)
    347c:	689b      	ldr	r3, [r3, #8]
    347e:	2b01      	cmp	r3, #1
    3480:	d113      	bne.n	34aa <RtcProcess+0x3e>
    3482:	4b10      	ldr	r3, [pc, #64]	; (34c4 <RtcProcess+0x58>)
    3484:	781b      	ldrb	r3, [r3, #0]
    3486:	b2db      	uxtb	r3, r3
    3488:	2b00      	cmp	r3, #0
    348a:	d00e      	beq.n	34aa <RtcProcess+0x3e>
    {
        if( RtcGetTimerElapsedTime( ) >= RtcTimerContext.Delay )
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <RtcProcess+0x5c>)
    348e:	4798      	blx	r3
    3490:	0002      	movs	r2, r0
    3492:	4b0b      	ldr	r3, [pc, #44]	; (34c0 <RtcProcess+0x54>)
    3494:	685b      	ldr	r3, [r3, #4]
    3496:	429a      	cmp	r2, r3
    3498:	d307      	bcc.n	34aa <RtcProcess+0x3e>
        {
            RtcTimerContext.AlarmState = ALARM_STOPPED;
    349a:	4b09      	ldr	r3, [pc, #36]	; (34c0 <RtcProcess+0x54>)
    349c:	2200      	movs	r2, #0
    349e:	609a      	str	r2, [r3, #8]

            // Because of one shot the task will be removed after the callback
            RtcTimeoutPendingPolling = false;
    34a0:	4b08      	ldr	r3, [pc, #32]	; (34c4 <RtcProcess+0x58>)
    34a2:	2200      	movs	r2, #0
    34a4:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin0, 0 );
            GpioWrite( &DbgRtcPin1, 1 );
#endif
            // NOTE: The handler should take less then 1 ms otherwise the clock shifts
            TimerIrqHandler( );
    34a6:	4b09      	ldr	r3, [pc, #36]	; (34cc <RtcProcess+0x60>)
    34a8:	4798      	blx	r3
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
            GpioWrite( &DbgRtcPin1, 0 );
#endif
        }
    }
    CRITICAL_SECTION_END( );
    34aa:	1d3b      	adds	r3, r7, #4
    34ac:	0018      	movs	r0, r3
    34ae:	4b08      	ldr	r3, [pc, #32]	; (34d0 <RtcProcess+0x64>)
    34b0:	4798      	blx	r3
}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	46bd      	mov	sp, r7
    34b6:	b002      	add	sp, #8
    34b8:	bd80      	pop	{r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00002a65 	.word	0x00002a65
    34c0:	20000b60 	.word	0x20000b60
    34c4:	20000b5e 	.word	0x20000b5e
    34c8:	00003385 	.word	0x00003385
    34cc:	00016135 	.word	0x00016135
    34d0:	00002a83 	.word	0x00002a83

000034d4 <RtcAlarmIrq>:
{
    return period;
}

static void RtcAlarmIrq( void )
{
    34d4:	b580      	push	{r7, lr}
    34d6:	af00      	add	r7, sp, #0
    RtcTimerContext.AlarmState = ALARM_STOPPED;
    34d8:	4b05      	ldr	r3, [pc, #20]	; (34f0 <RtcAlarmIrq+0x1c>)
    34da:	2200      	movs	r2, #0
    34dc:	609a      	str	r2, [r3, #8]
    // Because of one shot the task will be removed after the callback
    RtcTimeoutPendingInterrupt = false;
    34de:	4b05      	ldr	r3, [pc, #20]	; (34f4 <RtcAlarmIrq+0x20>)
    34e0:	2200      	movs	r2, #0
    34e2:	701a      	strb	r2, [r3, #0]
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin1, 1 );
#endif
    // NOTE: The handler should take less then 1 ms otherwise the clock shifts
    TimerIrqHandler( );
    34e4:	4b04      	ldr	r3, [pc, #16]	; (34f8 <RtcAlarmIrq+0x24>)
    34e6:	4798      	blx	r3
#if( RTC_DEBUG_GPIO_STATE == RTC_DEBUG_ENABLE )
    GpioWrite( &DbgRtcPin1, 0 );
#endif
}
    34e8:	46c0      	nop			; (mov r8, r8)
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000b60 	.word	0x20000b60
    34f4:	20000b5d 	.word	0x20000b5d
    34f8:	00016135 	.word	0x00016135

000034fc <RtcOverflowIrq>:

static void RtcOverflowIrq( void )
{
    34fc:	b580      	push	{r7, lr}
    34fe:	af00      	add	r7, sp, #0
    //RtcTimerContext.Time += ( uint64_t )( 1 << 32 );
}
    3500:	46c0      	nop			; (mov r8, r8)
    3502:	46bd      	mov	sp, r7
    3504:	bd80      	pop	{r7, pc}

00003506 <hri_gclk_write_PCHCTRL_reg>:
{
    3506:	b580      	push	{r7, lr}
    3508:	b084      	sub	sp, #16
    350a:	af00      	add	r7, sp, #0
    350c:	60f8      	str	r0, [r7, #12]
    350e:	607a      	str	r2, [r7, #4]
    3510:	230b      	movs	r3, #11
    3512:	18fb      	adds	r3, r7, r3
    3514:	1c0a      	adds	r2, r1, #0
    3516:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3518:	230b      	movs	r3, #11
    351a:	18fb      	adds	r3, r7, r3
    351c:	781a      	ldrb	r2, [r3, #0]
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	3220      	adds	r2, #32
    3522:	0092      	lsls	r2, r2, #2
    3524:	6879      	ldr	r1, [r7, #4]
    3526:	50d1      	str	r1, [r2, r3]
}
    3528:	46c0      	nop			; (mov r8, r8)
    352a:	46bd      	mov	sp, r7
    352c:	b004      	add	sp, #16
    352e:	bd80      	pop	{r7, pc}

00003530 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    3530:	b580      	push	{r7, lr}
    3532:	b082      	sub	sp, #8
    3534:	af00      	add	r7, sp, #0
    3536:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	6a1b      	ldr	r3, [r3, #32]
    353c:	2202      	movs	r2, #2
    353e:	431a      	orrs	r2, r3
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3544:	46c0      	nop			; (mov r8, r8)
    3546:	46bd      	mov	sp, r7
    3548:	b002      	add	sp, #8
    354a:	bd80      	pop	{r7, pc}

0000354c <hri_port_set_DIR_reg>:
{
    354c:	b580      	push	{r7, lr}
    354e:	b084      	sub	sp, #16
    3550:	af00      	add	r7, sp, #0
    3552:	60f8      	str	r0, [r7, #12]
    3554:	607a      	str	r2, [r7, #4]
    3556:	230b      	movs	r3, #11
    3558:	18fb      	adds	r3, r7, r3
    355a:	1c0a      	adds	r2, r1, #0
    355c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    355e:	230b      	movs	r3, #11
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	68fa      	ldr	r2, [r7, #12]
    3566:	01db      	lsls	r3, r3, #7
    3568:	18d3      	adds	r3, r2, r3
    356a:	3308      	adds	r3, #8
    356c:	687a      	ldr	r2, [r7, #4]
    356e:	601a      	str	r2, [r3, #0]
}
    3570:	46c0      	nop			; (mov r8, r8)
    3572:	46bd      	mov	sp, r7
    3574:	b004      	add	sp, #16
    3576:	bd80      	pop	{r7, pc}

00003578 <hri_port_clear_DIR_reg>:
{
    3578:	b580      	push	{r7, lr}
    357a:	b084      	sub	sp, #16
    357c:	af00      	add	r7, sp, #0
    357e:	60f8      	str	r0, [r7, #12]
    3580:	607a      	str	r2, [r7, #4]
    3582:	230b      	movs	r3, #11
    3584:	18fb      	adds	r3, r7, r3
    3586:	1c0a      	adds	r2, r1, #0
    3588:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    358a:	230b      	movs	r3, #11
    358c:	18fb      	adds	r3, r7, r3
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	68fa      	ldr	r2, [r7, #12]
    3592:	01db      	lsls	r3, r3, #7
    3594:	18d3      	adds	r3, r2, r3
    3596:	3304      	adds	r3, #4
    3598:	687a      	ldr	r2, [r7, #4]
    359a:	601a      	str	r2, [r3, #0]
}
    359c:	46c0      	nop			; (mov r8, r8)
    359e:	46bd      	mov	sp, r7
    35a0:	b004      	add	sp, #16
    35a2:	bd80      	pop	{r7, pc}

000035a4 <hri_port_set_OUT_reg>:
{
    35a4:	b580      	push	{r7, lr}
    35a6:	b084      	sub	sp, #16
    35a8:	af00      	add	r7, sp, #0
    35aa:	60f8      	str	r0, [r7, #12]
    35ac:	607a      	str	r2, [r7, #4]
    35ae:	230b      	movs	r3, #11
    35b0:	18fb      	adds	r3, r7, r3
    35b2:	1c0a      	adds	r2, r1, #0
    35b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    35b6:	230b      	movs	r3, #11
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	68fa      	ldr	r2, [r7, #12]
    35be:	01db      	lsls	r3, r3, #7
    35c0:	18d3      	adds	r3, r2, r3
    35c2:	3318      	adds	r3, #24
    35c4:	687a      	ldr	r2, [r7, #4]
    35c6:	601a      	str	r2, [r3, #0]
}
    35c8:	46c0      	nop			; (mov r8, r8)
    35ca:	46bd      	mov	sp, r7
    35cc:	b004      	add	sp, #16
    35ce:	bd80      	pop	{r7, pc}

000035d0 <hri_port_clear_OUT_reg>:
{
    35d0:	b580      	push	{r7, lr}
    35d2:	b084      	sub	sp, #16
    35d4:	af00      	add	r7, sp, #0
    35d6:	60f8      	str	r0, [r7, #12]
    35d8:	607a      	str	r2, [r7, #4]
    35da:	230b      	movs	r3, #11
    35dc:	18fb      	adds	r3, r7, r3
    35de:	1c0a      	adds	r2, r1, #0
    35e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    35e2:	230b      	movs	r3, #11
    35e4:	18fb      	adds	r3, r7, r3
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	68fa      	ldr	r2, [r7, #12]
    35ea:	01db      	lsls	r3, r3, #7
    35ec:	18d3      	adds	r3, r2, r3
    35ee:	3314      	adds	r3, #20
    35f0:	687a      	ldr	r2, [r7, #4]
    35f2:	601a      	str	r2, [r3, #0]
}
    35f4:	46c0      	nop			; (mov r8, r8)
    35f6:	46bd      	mov	sp, r7
    35f8:	b004      	add	sp, #16
    35fa:	bd80      	pop	{r7, pc}

000035fc <hri_port_write_WRCONFIG_reg>:
{
    35fc:	b580      	push	{r7, lr}
    35fe:	b084      	sub	sp, #16
    3600:	af00      	add	r7, sp, #0
    3602:	60f8      	str	r0, [r7, #12]
    3604:	607a      	str	r2, [r7, #4]
    3606:	230b      	movs	r3, #11
    3608:	18fb      	adds	r3, r7, r3
    360a:	1c0a      	adds	r2, r1, #0
    360c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    360e:	230b      	movs	r3, #11
    3610:	18fb      	adds	r3, r7, r3
    3612:	781b      	ldrb	r3, [r3, #0]
    3614:	68fa      	ldr	r2, [r7, #12]
    3616:	01db      	lsls	r3, r3, #7
    3618:	18d3      	adds	r3, r2, r3
    361a:	3328      	adds	r3, #40	; 0x28
    361c:	687a      	ldr	r2, [r7, #4]
    361e:	601a      	str	r2, [r3, #0]
}
    3620:	46c0      	nop			; (mov r8, r8)
    3622:	46bd      	mov	sp, r7
    3624:	b004      	add	sp, #16
    3626:	bd80      	pop	{r7, pc}

00003628 <hri_port_write_PMUX_PMUXE_bf>:
{
    3628:	b590      	push	{r4, r7, lr}
    362a:	b085      	sub	sp, #20
    362c:	af00      	add	r7, sp, #0
    362e:	6078      	str	r0, [r7, #4]
    3630:	000c      	movs	r4, r1
    3632:	0010      	movs	r0, r2
    3634:	0019      	movs	r1, r3
    3636:	1cfb      	adds	r3, r7, #3
    3638:	1c22      	adds	r2, r4, #0
    363a:	701a      	strb	r2, [r3, #0]
    363c:	1cbb      	adds	r3, r7, #2
    363e:	1c02      	adds	r2, r0, #0
    3640:	701a      	strb	r2, [r3, #0]
    3642:	1c7b      	adds	r3, r7, #1
    3644:	1c0a      	adds	r2, r1, #0
    3646:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3648:	1cfb      	adds	r3, r7, #3
    364a:	7819      	ldrb	r1, [r3, #0]
    364c:	1cbb      	adds	r3, r7, #2
    364e:	781a      	ldrb	r2, [r3, #0]
    3650:	230f      	movs	r3, #15
    3652:	18fb      	adds	r3, r7, r3
    3654:	6878      	ldr	r0, [r7, #4]
    3656:	2430      	movs	r4, #48	; 0x30
    3658:	01c9      	lsls	r1, r1, #7
    365a:	1841      	adds	r1, r0, r1
    365c:	188a      	adds	r2, r1, r2
    365e:	1912      	adds	r2, r2, r4
    3660:	7812      	ldrb	r2, [r2, #0]
    3662:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3664:	230f      	movs	r3, #15
    3666:	18fb      	adds	r3, r7, r3
    3668:	220f      	movs	r2, #15
    366a:	18ba      	adds	r2, r7, r2
    366c:	7812      	ldrb	r2, [r2, #0]
    366e:	210f      	movs	r1, #15
    3670:	438a      	bics	r2, r1
    3672:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    3674:	1c7b      	adds	r3, r7, #1
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	220f      	movs	r2, #15
    367a:	4013      	ands	r3, r2
    367c:	b2d9      	uxtb	r1, r3
    367e:	230f      	movs	r3, #15
    3680:	18fb      	adds	r3, r7, r3
    3682:	220f      	movs	r2, #15
    3684:	18ba      	adds	r2, r7, r2
    3686:	7812      	ldrb	r2, [r2, #0]
    3688:	430a      	orrs	r2, r1
    368a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    368c:	1cfb      	adds	r3, r7, #3
    368e:	781a      	ldrb	r2, [r3, #0]
    3690:	1cbb      	adds	r3, r7, #2
    3692:	781b      	ldrb	r3, [r3, #0]
    3694:	6879      	ldr	r1, [r7, #4]
    3696:	2030      	movs	r0, #48	; 0x30
    3698:	01d2      	lsls	r2, r2, #7
    369a:	188a      	adds	r2, r1, r2
    369c:	18d3      	adds	r3, r2, r3
    369e:	181b      	adds	r3, r3, r0
    36a0:	220f      	movs	r2, #15
    36a2:	18ba      	adds	r2, r7, r2
    36a4:	7812      	ldrb	r2, [r2, #0]
    36a6:	701a      	strb	r2, [r3, #0]
}
    36a8:	46c0      	nop			; (mov r8, r8)
    36aa:	46bd      	mov	sp, r7
    36ac:	b005      	add	sp, #20
    36ae:	bd90      	pop	{r4, r7, pc}

000036b0 <hri_port_write_PMUX_PMUXO_bf>:
{
    36b0:	b590      	push	{r4, r7, lr}
    36b2:	b085      	sub	sp, #20
    36b4:	af00      	add	r7, sp, #0
    36b6:	6078      	str	r0, [r7, #4]
    36b8:	000c      	movs	r4, r1
    36ba:	0010      	movs	r0, r2
    36bc:	0019      	movs	r1, r3
    36be:	1cfb      	adds	r3, r7, #3
    36c0:	1c22      	adds	r2, r4, #0
    36c2:	701a      	strb	r2, [r3, #0]
    36c4:	1cbb      	adds	r3, r7, #2
    36c6:	1c02      	adds	r2, r0, #0
    36c8:	701a      	strb	r2, [r3, #0]
    36ca:	1c7b      	adds	r3, r7, #1
    36cc:	1c0a      	adds	r2, r1, #0
    36ce:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    36d0:	1cfb      	adds	r3, r7, #3
    36d2:	7819      	ldrb	r1, [r3, #0]
    36d4:	1cbb      	adds	r3, r7, #2
    36d6:	781a      	ldrb	r2, [r3, #0]
    36d8:	230f      	movs	r3, #15
    36da:	18fb      	adds	r3, r7, r3
    36dc:	6878      	ldr	r0, [r7, #4]
    36de:	2430      	movs	r4, #48	; 0x30
    36e0:	01c9      	lsls	r1, r1, #7
    36e2:	1841      	adds	r1, r0, r1
    36e4:	188a      	adds	r2, r1, r2
    36e6:	1912      	adds	r2, r2, r4
    36e8:	7812      	ldrb	r2, [r2, #0]
    36ea:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    36ec:	230f      	movs	r3, #15
    36ee:	18fb      	adds	r3, r7, r3
    36f0:	220f      	movs	r2, #15
    36f2:	18ba      	adds	r2, r7, r2
    36f4:	7812      	ldrb	r2, [r2, #0]
    36f6:	210f      	movs	r1, #15
    36f8:	400a      	ands	r2, r1
    36fa:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    36fc:	1c7b      	adds	r3, r7, #1
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	011b      	lsls	r3, r3, #4
    3702:	b2d9      	uxtb	r1, r3
    3704:	230f      	movs	r3, #15
    3706:	18fb      	adds	r3, r7, r3
    3708:	220f      	movs	r2, #15
    370a:	18ba      	adds	r2, r7, r2
    370c:	7812      	ldrb	r2, [r2, #0]
    370e:	430a      	orrs	r2, r1
    3710:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3712:	1cfb      	adds	r3, r7, #3
    3714:	781a      	ldrb	r2, [r3, #0]
    3716:	1cbb      	adds	r3, r7, #2
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	6879      	ldr	r1, [r7, #4]
    371c:	2030      	movs	r0, #48	; 0x30
    371e:	01d2      	lsls	r2, r2, #7
    3720:	188a      	adds	r2, r1, r2
    3722:	18d3      	adds	r3, r2, r3
    3724:	181b      	adds	r3, r3, r0
    3726:	220f      	movs	r2, #15
    3728:	18ba      	adds	r2, r7, r2
    372a:	7812      	ldrb	r2, [r2, #0]
    372c:	701a      	strb	r2, [r3, #0]
}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	46bd      	mov	sp, r7
    3732:	b005      	add	sp, #20
    3734:	bd90      	pop	{r4, r7, pc}

00003736 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    3736:	b590      	push	{r4, r7, lr}
    3738:	b085      	sub	sp, #20
    373a:	af00      	add	r7, sp, #0
    373c:	6078      	str	r0, [r7, #4]
    373e:	000c      	movs	r4, r1
    3740:	0010      	movs	r0, r2
    3742:	0019      	movs	r1, r3
    3744:	1cfb      	adds	r3, r7, #3
    3746:	1c22      	adds	r2, r4, #0
    3748:	701a      	strb	r2, [r3, #0]
    374a:	1cbb      	adds	r3, r7, #2
    374c:	1c02      	adds	r2, r0, #0
    374e:	701a      	strb	r2, [r3, #0]
    3750:	1c7b      	adds	r3, r7, #1
    3752:	1c0a      	adds	r2, r1, #0
    3754:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3756:	1cfb      	adds	r3, r7, #3
    3758:	7819      	ldrb	r1, [r3, #0]
    375a:	1cbb      	adds	r3, r7, #2
    375c:	781a      	ldrb	r2, [r3, #0]
    375e:	230f      	movs	r3, #15
    3760:	18fb      	adds	r3, r7, r3
    3762:	6878      	ldr	r0, [r7, #4]
    3764:	2440      	movs	r4, #64	; 0x40
    3766:	01c9      	lsls	r1, r1, #7
    3768:	1841      	adds	r1, r0, r1
    376a:	188a      	adds	r2, r1, r2
    376c:	1912      	adds	r2, r2, r4
    376e:	7812      	ldrb	r2, [r2, #0]
    3770:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3772:	230f      	movs	r3, #15
    3774:	18fb      	adds	r3, r7, r3
    3776:	220f      	movs	r2, #15
    3778:	18ba      	adds	r2, r7, r2
    377a:	7812      	ldrb	r2, [r2, #0]
    377c:	2101      	movs	r1, #1
    377e:	438a      	bics	r2, r1
    3780:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3782:	1c7b      	adds	r3, r7, #1
    3784:	7819      	ldrb	r1, [r3, #0]
    3786:	230f      	movs	r3, #15
    3788:	18fb      	adds	r3, r7, r3
    378a:	220f      	movs	r2, #15
    378c:	18ba      	adds	r2, r7, r2
    378e:	7812      	ldrb	r2, [r2, #0]
    3790:	430a      	orrs	r2, r1
    3792:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3794:	1cfb      	adds	r3, r7, #3
    3796:	781a      	ldrb	r2, [r3, #0]
    3798:	1cbb      	adds	r3, r7, #2
    379a:	781b      	ldrb	r3, [r3, #0]
    379c:	6879      	ldr	r1, [r7, #4]
    379e:	2040      	movs	r0, #64	; 0x40
    37a0:	01d2      	lsls	r2, r2, #7
    37a2:	188a      	adds	r2, r1, r2
    37a4:	18d3      	adds	r3, r2, r3
    37a6:	181b      	adds	r3, r3, r0
    37a8:	220f      	movs	r2, #15
    37aa:	18ba      	adds	r2, r7, r2
    37ac:	7812      	ldrb	r2, [r2, #0]
    37ae:	701a      	strb	r2, [r3, #0]
}
    37b0:	46c0      	nop			; (mov r8, r8)
    37b2:	46bd      	mov	sp, r7
    37b4:	b005      	add	sp, #20
    37b6:	bd90      	pop	{r4, r7, pc}

000037b8 <hri_port_set_PINCFG_PULLEN_bit>:
{
    37b8:	b5b0      	push	{r4, r5, r7, lr}
    37ba:	b082      	sub	sp, #8
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	0008      	movs	r0, r1
    37c2:	0011      	movs	r1, r2
    37c4:	1cfb      	adds	r3, r7, #3
    37c6:	1c02      	adds	r2, r0, #0
    37c8:	701a      	strb	r2, [r3, #0]
    37ca:	1cbb      	adds	r3, r7, #2
    37cc:	1c0a      	adds	r2, r1, #0
    37ce:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    37d0:	1cfb      	adds	r3, r7, #3
    37d2:	781a      	ldrb	r2, [r3, #0]
    37d4:	1cbb      	adds	r3, r7, #2
    37d6:	781b      	ldrb	r3, [r3, #0]
    37d8:	1cf9      	adds	r1, r7, #3
    37da:	7808      	ldrb	r0, [r1, #0]
    37dc:	1cb9      	adds	r1, r7, #2
    37de:	7809      	ldrb	r1, [r1, #0]
    37e0:	687c      	ldr	r4, [r7, #4]
    37e2:	2540      	movs	r5, #64	; 0x40
    37e4:	01c0      	lsls	r0, r0, #7
    37e6:	1820      	adds	r0, r4, r0
    37e8:	1841      	adds	r1, r0, r1
    37ea:	1949      	adds	r1, r1, r5
    37ec:	7809      	ldrb	r1, [r1, #0]
    37ee:	b2c9      	uxtb	r1, r1
    37f0:	2004      	movs	r0, #4
    37f2:	4301      	orrs	r1, r0
    37f4:	b2cc      	uxtb	r4, r1
    37f6:	6879      	ldr	r1, [r7, #4]
    37f8:	2040      	movs	r0, #64	; 0x40
    37fa:	01d2      	lsls	r2, r2, #7
    37fc:	188a      	adds	r2, r1, r2
    37fe:	18d3      	adds	r3, r2, r3
    3800:	181b      	adds	r3, r3, r0
    3802:	1c22      	adds	r2, r4, #0
    3804:	701a      	strb	r2, [r3, #0]
}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	46bd      	mov	sp, r7
    380a:	b002      	add	sp, #8
    380c:	bdb0      	pop	{r4, r5, r7, pc}

0000380e <hri_port_clear_PINCFG_PULLEN_bit>:
{
    380e:	b5b0      	push	{r4, r5, r7, lr}
    3810:	b082      	sub	sp, #8
    3812:	af00      	add	r7, sp, #0
    3814:	6078      	str	r0, [r7, #4]
    3816:	0008      	movs	r0, r1
    3818:	0011      	movs	r1, r2
    381a:	1cfb      	adds	r3, r7, #3
    381c:	1c02      	adds	r2, r0, #0
    381e:	701a      	strb	r2, [r3, #0]
    3820:	1cbb      	adds	r3, r7, #2
    3822:	1c0a      	adds	r2, r1, #0
    3824:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3826:	1cfb      	adds	r3, r7, #3
    3828:	781a      	ldrb	r2, [r3, #0]
    382a:	1cbb      	adds	r3, r7, #2
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	1cf9      	adds	r1, r7, #3
    3830:	7808      	ldrb	r0, [r1, #0]
    3832:	1cb9      	adds	r1, r7, #2
    3834:	7809      	ldrb	r1, [r1, #0]
    3836:	687c      	ldr	r4, [r7, #4]
    3838:	2540      	movs	r5, #64	; 0x40
    383a:	01c0      	lsls	r0, r0, #7
    383c:	1820      	adds	r0, r4, r0
    383e:	1841      	adds	r1, r0, r1
    3840:	1949      	adds	r1, r1, r5
    3842:	7809      	ldrb	r1, [r1, #0]
    3844:	b2c9      	uxtb	r1, r1
    3846:	2004      	movs	r0, #4
    3848:	4381      	bics	r1, r0
    384a:	b2cc      	uxtb	r4, r1
    384c:	6879      	ldr	r1, [r7, #4]
    384e:	2040      	movs	r0, #64	; 0x40
    3850:	01d2      	lsls	r2, r2, #7
    3852:	188a      	adds	r2, r1, r2
    3854:	18d3      	adds	r3, r2, r3
    3856:	181b      	adds	r3, r3, r0
    3858:	1c22      	adds	r2, r4, #0
    385a:	701a      	strb	r2, [r3, #0]
}
    385c:	46c0      	nop			; (mov r8, r8)
    385e:	46bd      	mov	sp, r7
    3860:	b002      	add	sp, #8
    3862:	bdb0      	pop	{r4, r5, r7, pc}

00003864 <hri_sercomspi_wait_for_sync>:
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	69db      	ldr	r3, [r3, #28]
    3874:	683a      	ldr	r2, [r7, #0]
    3876:	4013      	ands	r3, r2
    3878:	d1fa      	bne.n	3870 <hri_sercomspi_wait_for_sync+0xc>
}
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	46bd      	mov	sp, r7
    387e:	b002      	add	sp, #8
    3880:	bd80      	pop	{r7, pc}

00003882 <hri_sercomspi_read_INTFLAG_reg>:
{
    3882:	b580      	push	{r7, lr}
    3884:	b082      	sub	sp, #8
    3886:	af00      	add	r7, sp, #0
    3888:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	7e1b      	ldrb	r3, [r3, #24]
    388e:	b2db      	uxtb	r3, r3
}
    3890:	0018      	movs	r0, r3
    3892:	46bd      	mov	sp, r7
    3894:	b002      	add	sp, #8
    3896:	bd80      	pop	{r7, pc}

00003898 <hri_sercomspi_clear_INTFLAG_reg>:
{
    3898:	b580      	push	{r7, lr}
    389a:	b082      	sub	sp, #8
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	000a      	movs	r2, r1
    38a2:	1cfb      	adds	r3, r7, #3
    38a4:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	1cfa      	adds	r2, r7, #3
    38aa:	7812      	ldrb	r2, [r2, #0]
    38ac:	761a      	strb	r2, [r3, #24]
}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	46bd      	mov	sp, r7
    38b2:	b002      	add	sp, #8
    38b4:	bd80      	pop	{r7, pc}
	...

000038b8 <hri_sercomspi_set_CTRLA_SWRST_bit>:
{
    38b8:	b580      	push	{r7, lr}
    38ba:	b082      	sub	sp, #8
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	2101      	movs	r1, #1
    38c4:	0018      	movs	r0, r3
    38c6:	4b06      	ldr	r3, [pc, #24]	; (38e0 <hri_sercomspi_set_CTRLA_SWRST_bit+0x28>)
    38c8:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    38ca:	687b      	ldr	r3, [r7, #4]
    38cc:	681b      	ldr	r3, [r3, #0]
    38ce:	2201      	movs	r2, #1
    38d0:	431a      	orrs	r2, r3
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	601a      	str	r2, [r3, #0]
}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	46bd      	mov	sp, r7
    38da:	b002      	add	sp, #8
    38dc:	bd80      	pop	{r7, pc}
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	00003865 	.word	0x00003865

000038e4 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
{
    38e4:	b580      	push	{r7, lr}
    38e6:	b082      	sub	sp, #8
    38e8:	af00      	add	r7, sp, #0
    38ea:	6078      	str	r0, [r7, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	2103      	movs	r1, #3
    38f0:	0018      	movs	r0, r3
    38f2:	4b06      	ldr	r3, [pc, #24]	; (390c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x28>)
    38f4:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    38f6:	687b      	ldr	r3, [r7, #4]
    38f8:	681b      	ldr	r3, [r3, #0]
    38fa:	2202      	movs	r2, #2
    38fc:	431a      	orrs	r2, r3
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	601a      	str	r2, [r3, #0]
}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	46bd      	mov	sp, r7
    3906:	b002      	add	sp, #8
    3908:	bd80      	pop	{r7, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	00003865 	.word	0x00003865

00003910 <hri_sercomspi_write_CTRLA_reg>:
{
    3910:	b580      	push	{r7, lr}
    3912:	b082      	sub	sp, #8
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	683a      	ldr	r2, [r7, #0]
    391e:	601a      	str	r2, [r3, #0]
}
    3920:	46c0      	nop			; (mov r8, r8)
    3922:	46bd      	mov	sp, r7
    3924:	b002      	add	sp, #8
    3926:	bd80      	pop	{r7, pc}

00003928 <hri_sercomspi_write_CTRLB_reg>:
{
    3928:	b580      	push	{r7, lr}
    392a:	b082      	sub	sp, #8
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
    3930:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	683a      	ldr	r2, [r7, #0]
    3936:	605a      	str	r2, [r3, #4]
}
    3938:	46c0      	nop			; (mov r8, r8)
    393a:	46bd      	mov	sp, r7
    393c:	b002      	add	sp, #8
    393e:	bd80      	pop	{r7, pc}

00003940 <hri_sercomspi_write_BAUD_reg>:
{
    3940:	b580      	push	{r7, lr}
    3942:	b082      	sub	sp, #8
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	000a      	movs	r2, r1
    394a:	1cfb      	adds	r3, r7, #3
    394c:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	1cfa      	adds	r2, r7, #3
    3952:	7812      	ldrb	r2, [r2, #0]
    3954:	731a      	strb	r2, [r3, #12]
}
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	46bd      	mov	sp, r7
    395a:	b002      	add	sp, #8
    395c:	bd80      	pop	{r7, pc}

0000395e <hri_sercomspi_read_DATA_reg>:
{
    395e:	b580      	push	{r7, lr}
    3960:	b082      	sub	sp, #8
    3962:	af00      	add	r7, sp, #0
    3964:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    396a:	0018      	movs	r0, r3
    396c:	46bd      	mov	sp, r7
    396e:	b002      	add	sp, #8
    3970:	bd80      	pop	{r7, pc}

00003972 <hri_sercomspi_write_DATA_reg>:
{
    3972:	b580      	push	{r7, lr}
    3974:	b082      	sub	sp, #8
    3976:	af00      	add	r7, sp, #0
    3978:	6078      	str	r0, [r7, #4]
    397a:	6039      	str	r1, [r7, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	683a      	ldr	r2, [r7, #0]
    3980:	629a      	str	r2, [r3, #40]	; 0x28
}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	46bd      	mov	sp, r7
    3986:	b002      	add	sp, #8
    3988:	bd80      	pop	{r7, pc}

0000398a <hri_sercomspi_write_DBGCTRL_reg>:
{
    398a:	b580      	push	{r7, lr}
    398c:	b082      	sub	sp, #8
    398e:	af00      	add	r7, sp, #0
    3990:	6078      	str	r0, [r7, #4]
    3992:	000a      	movs	r2, r1
    3994:	1cfb      	adds	r3, r7, #3
    3996:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	1cfa      	adds	r2, r7, #3
    399c:	2130      	movs	r1, #48	; 0x30
    399e:	7812      	ldrb	r2, [r2, #0]
    39a0:	545a      	strb	r2, [r3, r1]
}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	46bd      	mov	sp, r7
    39a6:	b002      	add	sp, #8
    39a8:	bd80      	pop	{r7, pc}
	...

000039ac <_gpio_set_direction>:
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b082      	sub	sp, #8
    39b0:	af00      	add	r7, sp, #0
    39b2:	6039      	str	r1, [r7, #0]
    39b4:	0011      	movs	r1, r2
    39b6:	1dfb      	adds	r3, r7, #7
    39b8:	1c02      	adds	r2, r0, #0
    39ba:	701a      	strb	r2, [r3, #0]
    39bc:	1dbb      	adds	r3, r7, #6
    39be:	1c0a      	adds	r2, r1, #0
    39c0:	701a      	strb	r2, [r3, #0]
	switch (direction) {
    39c2:	1dbb      	adds	r3, r7, #6
    39c4:	781b      	ldrb	r3, [r3, #0]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d023      	beq.n	3a12 <_gpio_set_direction+0x66>
    39ca:	2b02      	cmp	r3, #2
    39cc:	d03f      	beq.n	3a4e <_gpio_set_direction+0xa2>
    39ce:	2b00      	cmp	r3, #0
    39d0:	d15d      	bne.n	3a8e <_gpio_set_direction+0xe2>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    39d2:	683a      	ldr	r2, [r7, #0]
    39d4:	1dfb      	adds	r3, r7, #7
    39d6:	7819      	ldrb	r1, [r3, #0]
    39d8:	23c0      	movs	r3, #192	; 0xc0
    39da:	05db      	lsls	r3, r3, #23
    39dc:	0018      	movs	r0, r3
    39de:	4b31      	ldr	r3, [pc, #196]	; (3aa4 <_gpio_set_direction+0xf8>)
    39e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    39e2:	683b      	ldr	r3, [r7, #0]
    39e4:	041b      	lsls	r3, r3, #16
    39e6:	0c1b      	lsrs	r3, r3, #16
    39e8:	2280      	movs	r2, #128	; 0x80
    39ea:	05d2      	lsls	r2, r2, #23
    39ec:	431a      	orrs	r2, r3
    39ee:	1dfb      	adds	r3, r7, #7
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	482d      	ldr	r0, [pc, #180]	; (3aa8 <_gpio_set_direction+0xfc>)
    39f4:	0019      	movs	r1, r3
    39f6:	4b2d      	ldr	r3, [pc, #180]	; (3aac <_gpio_set_direction+0x100>)
    39f8:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    39fa:	683b      	ldr	r3, [r7, #0]
    39fc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    39fe:	22c0      	movs	r2, #192	; 0xc0
    3a00:	0612      	lsls	r2, r2, #24
    3a02:	431a      	orrs	r2, r3
    3a04:	1dfb      	adds	r3, r7, #7
    3a06:	781b      	ldrb	r3, [r3, #0]
    3a08:	4827      	ldr	r0, [pc, #156]	; (3aa8 <_gpio_set_direction+0xfc>)
    3a0a:	0019      	movs	r1, r3
    3a0c:	4b27      	ldr	r3, [pc, #156]	; (3aac <_gpio_set_direction+0x100>)
    3a0e:	4798      	blx	r3
		break;
    3a10:	e043      	b.n	3a9a <_gpio_set_direction+0xee>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
    3a12:	683a      	ldr	r2, [r7, #0]
    3a14:	1dfb      	adds	r3, r7, #7
    3a16:	7819      	ldrb	r1, [r3, #0]
    3a18:	23c0      	movs	r3, #192	; 0xc0
    3a1a:	05db      	lsls	r3, r3, #23
    3a1c:	0018      	movs	r0, r3
    3a1e:	4b21      	ldr	r3, [pc, #132]	; (3aa4 <_gpio_set_direction+0xf8>)
    3a20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    3a22:	683b      	ldr	r3, [r7, #0]
    3a24:	041b      	lsls	r3, r3, #16
    3a26:	0c1b      	lsrs	r3, r3, #16
    3a28:	4a21      	ldr	r2, [pc, #132]	; (3ab0 <_gpio_set_direction+0x104>)
    3a2a:	431a      	orrs	r2, r3
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	481d      	ldr	r0, [pc, #116]	; (3aa8 <_gpio_set_direction+0xfc>)
    3a32:	0019      	movs	r1, r3
    3a34:	4b1d      	ldr	r3, [pc, #116]	; (3aac <_gpio_set_direction+0x100>)
    3a36:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    3a38:	683b      	ldr	r3, [r7, #0]
    3a3a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3a3c:	4a1d      	ldr	r2, [pc, #116]	; (3ab4 <_gpio_set_direction+0x108>)
    3a3e:	431a      	orrs	r2, r3
    3a40:	1dfb      	adds	r3, r7, #7
    3a42:	781b      	ldrb	r3, [r3, #0]
    3a44:	4818      	ldr	r0, [pc, #96]	; (3aa8 <_gpio_set_direction+0xfc>)
    3a46:	0019      	movs	r1, r3
    3a48:	4b18      	ldr	r3, [pc, #96]	; (3aac <_gpio_set_direction+0x100>)
    3a4a:	4798      	blx	r3
		break;
    3a4c:	e025      	b.n	3a9a <_gpio_set_direction+0xee>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
    3a4e:	683a      	ldr	r2, [r7, #0]
    3a50:	1dfb      	adds	r3, r7, #7
    3a52:	7819      	ldrb	r1, [r3, #0]
    3a54:	23c0      	movs	r3, #192	; 0xc0
    3a56:	05db      	lsls	r3, r3, #23
    3a58:	0018      	movs	r0, r3
    3a5a:	4b17      	ldr	r3, [pc, #92]	; (3ab8 <_gpio_set_direction+0x10c>)
    3a5c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	041b      	lsls	r3, r3, #16
    3a62:	0c1b      	lsrs	r3, r3, #16
    3a64:	2280      	movs	r2, #128	; 0x80
    3a66:	05d2      	lsls	r2, r2, #23
    3a68:	431a      	orrs	r2, r3
    3a6a:	1dfb      	adds	r3, r7, #7
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	480e      	ldr	r0, [pc, #56]	; (3aa8 <_gpio_set_direction+0xfc>)
    3a70:	0019      	movs	r1, r3
    3a72:	4b0e      	ldr	r3, [pc, #56]	; (3aac <_gpio_set_direction+0x100>)
    3a74:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3a76:	683b      	ldr	r3, [r7, #0]
    3a78:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3a7a:	22c0      	movs	r2, #192	; 0xc0
    3a7c:	0612      	lsls	r2, r2, #24
    3a7e:	431a      	orrs	r2, r3
    3a80:	1dfb      	adds	r3, r7, #7
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	4808      	ldr	r0, [pc, #32]	; (3aa8 <_gpio_set_direction+0xfc>)
    3a86:	0019      	movs	r1, r3
    3a88:	4b08      	ldr	r3, [pc, #32]	; (3aac <_gpio_set_direction+0x100>)
    3a8a:	4798      	blx	r3
		break;
    3a8c:	e005      	b.n	3a9a <_gpio_set_direction+0xee>
		ASSERT(false);
    3a8e:	4b0b      	ldr	r3, [pc, #44]	; (3abc <_gpio_set_direction+0x110>)
    3a90:	224e      	movs	r2, #78	; 0x4e
    3a92:	0019      	movs	r1, r3
    3a94:	2000      	movs	r0, #0
    3a96:	4b0a      	ldr	r3, [pc, #40]	; (3ac0 <_gpio_set_direction+0x114>)
    3a98:	4798      	blx	r3
}
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	46bd      	mov	sp, r7
    3a9e:	b002      	add	sp, #8
    3aa0:	bd80      	pop	{r7, pc}
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	00003579 	.word	0x00003579
    3aa8:	40002800 	.word	0x40002800
    3aac:	000035fd 	.word	0x000035fd
    3ab0:	40020000 	.word	0x40020000
    3ab4:	c0020000 	.word	0xc0020000
    3ab8:	0000354d 	.word	0x0000354d
    3abc:	0001efac 	.word	0x0001efac
    3ac0:	00000995 	.word	0x00000995

00003ac4 <_gpio_set_level>:
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b082      	sub	sp, #8
    3ac8:	af00      	add	r7, sp, #0
    3aca:	6039      	str	r1, [r7, #0]
    3acc:	0011      	movs	r1, r2
    3ace:	1dfb      	adds	r3, r7, #7
    3ad0:	1c02      	adds	r2, r0, #0
    3ad2:	701a      	strb	r2, [r3, #0]
    3ad4:	1dbb      	adds	r3, r7, #6
    3ad6:	1c0a      	adds	r2, r1, #0
    3ad8:	701a      	strb	r2, [r3, #0]
	if (level) {
    3ada:	1dbb      	adds	r3, r7, #6
    3adc:	781b      	ldrb	r3, [r3, #0]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d008      	beq.n	3af4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3ae2:	683a      	ldr	r2, [r7, #0]
    3ae4:	1dfb      	adds	r3, r7, #7
    3ae6:	7819      	ldrb	r1, [r3, #0]
    3ae8:	23c0      	movs	r3, #192	; 0xc0
    3aea:	05db      	lsls	r3, r3, #23
    3aec:	0018      	movs	r0, r3
    3aee:	4b07      	ldr	r3, [pc, #28]	; (3b0c <_gpio_set_level+0x48>)
    3af0:	4798      	blx	r3
}
    3af2:	e007      	b.n	3b04 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3af4:	683a      	ldr	r2, [r7, #0]
    3af6:	1dfb      	adds	r3, r7, #7
    3af8:	7819      	ldrb	r1, [r3, #0]
    3afa:	23c0      	movs	r3, #192	; 0xc0
    3afc:	05db      	lsls	r3, r3, #23
    3afe:	0018      	movs	r0, r3
    3b00:	4b03      	ldr	r3, [pc, #12]	; (3b10 <_gpio_set_level+0x4c>)
    3b02:	4798      	blx	r3
}
    3b04:	46c0      	nop			; (mov r8, r8)
    3b06:	46bd      	mov	sp, r7
    3b08:	b002      	add	sp, #8
    3b0a:	bd80      	pop	{r7, pc}
    3b0c:	000035a5 	.word	0x000035a5
    3b10:	000035d1 	.word	0x000035d1

00003b14 <_gpio_set_pin_pull_mode>:
{
    3b14:	b590      	push	{r4, r7, lr}
    3b16:	b083      	sub	sp, #12
    3b18:	af00      	add	r7, sp, #0
    3b1a:	0004      	movs	r4, r0
    3b1c:	0008      	movs	r0, r1
    3b1e:	0011      	movs	r1, r2
    3b20:	1dfb      	adds	r3, r7, #7
    3b22:	1c22      	adds	r2, r4, #0
    3b24:	701a      	strb	r2, [r3, #0]
    3b26:	1dbb      	adds	r3, r7, #6
    3b28:	1c02      	adds	r2, r0, #0
    3b2a:	701a      	strb	r2, [r3, #0]
    3b2c:	1d7b      	adds	r3, r7, #5
    3b2e:	1c0a      	adds	r2, r1, #0
    3b30:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
    3b32:	1d7b      	adds	r3, r7, #5
    3b34:	781b      	ldrb	r3, [r3, #0]
    3b36:	2b01      	cmp	r3, #1
    3b38:	d00c      	beq.n	3b54 <_gpio_set_pin_pull_mode+0x40>
    3b3a:	2b02      	cmp	r3, #2
    3b3c:	d029      	beq.n	3b92 <_gpio_set_pin_pull_mode+0x7e>
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d146      	bne.n	3bd0 <_gpio_set_pin_pull_mode+0xbc>
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3b42:	1dbb      	adds	r3, r7, #6
    3b44:	781a      	ldrb	r2, [r3, #0]
    3b46:	1dfb      	adds	r3, r7, #7
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	4827      	ldr	r0, [pc, #156]	; (3be8 <_gpio_set_pin_pull_mode+0xd4>)
    3b4c:	0019      	movs	r1, r3
    3b4e:	4b27      	ldr	r3, [pc, #156]	; (3bec <_gpio_set_pin_pull_mode+0xd8>)
    3b50:	4798      	blx	r3
		break;
    3b52:	e044      	b.n	3bde <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3b54:	1dbb      	adds	r3, r7, #6
    3b56:	781b      	ldrb	r3, [r3, #0]
    3b58:	2201      	movs	r2, #1
    3b5a:	409a      	lsls	r2, r3
    3b5c:	1dfb      	adds	r3, r7, #7
    3b5e:	7819      	ldrb	r1, [r3, #0]
    3b60:	23c0      	movs	r3, #192	; 0xc0
    3b62:	05db      	lsls	r3, r3, #23
    3b64:	0018      	movs	r0, r3
    3b66:	4b22      	ldr	r3, [pc, #136]	; (3bf0 <_gpio_set_pin_pull_mode+0xdc>)
    3b68:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3b6a:	1dbb      	adds	r3, r7, #6
    3b6c:	781a      	ldrb	r2, [r3, #0]
    3b6e:	1dfb      	adds	r3, r7, #7
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	481d      	ldr	r0, [pc, #116]	; (3be8 <_gpio_set_pin_pull_mode+0xd4>)
    3b74:	0019      	movs	r1, r3
    3b76:	4b1f      	ldr	r3, [pc, #124]	; (3bf4 <_gpio_set_pin_pull_mode+0xe0>)
    3b78:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3b7a:	1dbb      	adds	r3, r7, #6
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	2201      	movs	r2, #1
    3b80:	409a      	lsls	r2, r3
    3b82:	1dfb      	adds	r3, r7, #7
    3b84:	7819      	ldrb	r1, [r3, #0]
    3b86:	23c0      	movs	r3, #192	; 0xc0
    3b88:	05db      	lsls	r3, r3, #23
    3b8a:	0018      	movs	r0, r3
    3b8c:	4b1a      	ldr	r3, [pc, #104]	; (3bf8 <_gpio_set_pin_pull_mode+0xe4>)
    3b8e:	4798      	blx	r3
		break;
    3b90:	e025      	b.n	3bde <_gpio_set_pin_pull_mode+0xca>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
    3b92:	1dbb      	adds	r3, r7, #6
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	2201      	movs	r2, #1
    3b98:	409a      	lsls	r2, r3
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	7819      	ldrb	r1, [r3, #0]
    3b9e:	23c0      	movs	r3, #192	; 0xc0
    3ba0:	05db      	lsls	r3, r3, #23
    3ba2:	0018      	movs	r0, r3
    3ba4:	4b12      	ldr	r3, [pc, #72]	; (3bf0 <_gpio_set_pin_pull_mode+0xdc>)
    3ba6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3ba8:	1dbb      	adds	r3, r7, #6
    3baa:	781a      	ldrb	r2, [r3, #0]
    3bac:	1dfb      	adds	r3, r7, #7
    3bae:	781b      	ldrb	r3, [r3, #0]
    3bb0:	480d      	ldr	r0, [pc, #52]	; (3be8 <_gpio_set_pin_pull_mode+0xd4>)
    3bb2:	0019      	movs	r1, r3
    3bb4:	4b0f      	ldr	r3, [pc, #60]	; (3bf4 <_gpio_set_pin_pull_mode+0xe0>)
    3bb6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
    3bb8:	1dbb      	adds	r3, r7, #6
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	2201      	movs	r2, #1
    3bbe:	409a      	lsls	r2, r3
    3bc0:	1dfb      	adds	r3, r7, #7
    3bc2:	7819      	ldrb	r1, [r3, #0]
    3bc4:	23c0      	movs	r3, #192	; 0xc0
    3bc6:	05db      	lsls	r3, r3, #23
    3bc8:	0018      	movs	r0, r3
    3bca:	4b0c      	ldr	r3, [pc, #48]	; (3bfc <_gpio_set_pin_pull_mode+0xe8>)
    3bcc:	4798      	blx	r3
		break;
    3bce:	e006      	b.n	3bde <_gpio_set_pin_pull_mode+0xca>
		ASSERT(false);
    3bd0:	4b0b      	ldr	r3, [pc, #44]	; (3c00 <_gpio_set_pin_pull_mode+0xec>)
    3bd2:	2291      	movs	r2, #145	; 0x91
    3bd4:	0019      	movs	r1, r3
    3bd6:	2000      	movs	r0, #0
    3bd8:	4b0a      	ldr	r3, [pc, #40]	; (3c04 <_gpio_set_pin_pull_mode+0xf0>)
    3bda:	4798      	blx	r3
		break;
    3bdc:	46c0      	nop			; (mov r8, r8)
}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	46bd      	mov	sp, r7
    3be2:	b003      	add	sp, #12
    3be4:	bd90      	pop	{r4, r7, pc}
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	40002800 	.word	0x40002800
    3bec:	0000380f 	.word	0x0000380f
    3bf0:	00003579 	.word	0x00003579
    3bf4:	000037b9 	.word	0x000037b9
    3bf8:	000035a5 	.word	0x000035a5
    3bfc:	000035d1 	.word	0x000035d1
    3c00:	0001efac 	.word	0x0001efac
    3c04:	00000995 	.word	0x00000995

00003c08 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3c08:	b590      	push	{r4, r7, lr}
    3c0a:	b085      	sub	sp, #20
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    3c10:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	095a      	lsrs	r2, r3, #5
    3c16:	230f      	movs	r3, #15
    3c18:	18fb      	adds	r3, r7, r3
    3c1a:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	b2da      	uxtb	r2, r3
    3c20:	230e      	movs	r3, #14
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	211f      	movs	r1, #31
    3c26:	400a      	ands	r2, r1
    3c28:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3c2a:	683b      	ldr	r3, [r7, #0]
    3c2c:	3301      	adds	r3, #1
    3c2e:	d10a      	bne.n	3c46 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3c30:	230e      	movs	r3, #14
    3c32:	18fb      	adds	r3, r7, r3
    3c34:	781a      	ldrb	r2, [r3, #0]
    3c36:	230f      	movs	r3, #15
    3c38:	18fb      	adds	r3, r7, r3
    3c3a:	7819      	ldrb	r1, [r3, #0]
    3c3c:	481b      	ldr	r0, [pc, #108]	; (3cac <_gpio_set_pin_function+0xa4>)
    3c3e:	2300      	movs	r3, #0
    3c40:	4c1b      	ldr	r4, [pc, #108]	; (3cb0 <_gpio_set_pin_function+0xa8>)
    3c42:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    3c44:	e02e      	b.n	3ca4 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3c46:	230e      	movs	r3, #14
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	781a      	ldrb	r2, [r3, #0]
    3c4c:	230f      	movs	r3, #15
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	7819      	ldrb	r1, [r3, #0]
    3c52:	4816      	ldr	r0, [pc, #88]	; (3cac <_gpio_set_pin_function+0xa4>)
    3c54:	2301      	movs	r3, #1
    3c56:	4c16      	ldr	r4, [pc, #88]	; (3cb0 <_gpio_set_pin_function+0xa8>)
    3c58:	47a0      	blx	r4
		if (pin & 1) {
    3c5a:	230e      	movs	r3, #14
    3c5c:	18fb      	adds	r3, r7, r3
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2201      	movs	r2, #1
    3c62:	4013      	ands	r3, r2
    3c64:	d00f      	beq.n	3c86 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3c66:	230e      	movs	r3, #14
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	085b      	lsrs	r3, r3, #1
    3c6e:	b2da      	uxtb	r2, r3
    3c70:	683b      	ldr	r3, [r7, #0]
    3c72:	b2d8      	uxtb	r0, r3
    3c74:	230f      	movs	r3, #15
    3c76:	18fb      	adds	r3, r7, r3
    3c78:	7819      	ldrb	r1, [r3, #0]
    3c7a:	4c0c      	ldr	r4, [pc, #48]	; (3cac <_gpio_set_pin_function+0xa4>)
    3c7c:	0003      	movs	r3, r0
    3c7e:	0020      	movs	r0, r4
    3c80:	4c0c      	ldr	r4, [pc, #48]	; (3cb4 <_gpio_set_pin_function+0xac>)
    3c82:	47a0      	blx	r4
}
    3c84:	e00e      	b.n	3ca4 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3c86:	230e      	movs	r3, #14
    3c88:	18fb      	adds	r3, r7, r3
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	085b      	lsrs	r3, r3, #1
    3c8e:	b2da      	uxtb	r2, r3
    3c90:	683b      	ldr	r3, [r7, #0]
    3c92:	b2d8      	uxtb	r0, r3
    3c94:	230f      	movs	r3, #15
    3c96:	18fb      	adds	r3, r7, r3
    3c98:	7819      	ldrb	r1, [r3, #0]
    3c9a:	4c04      	ldr	r4, [pc, #16]	; (3cac <_gpio_set_pin_function+0xa4>)
    3c9c:	0003      	movs	r3, r0
    3c9e:	0020      	movs	r0, r4
    3ca0:	4c05      	ldr	r4, [pc, #20]	; (3cb8 <_gpio_set_pin_function+0xb0>)
    3ca2:	47a0      	blx	r4
}
    3ca4:	46c0      	nop			; (mov r8, r8)
    3ca6:	46bd      	mov	sp, r7
    3ca8:	b005      	add	sp, #20
    3caa:	bd90      	pop	{r4, r7, pc}
    3cac:	40002800 	.word	0x40002800
    3cb0:	00003737 	.word	0x00003737
    3cb4:	000036b1 	.word	0x000036b1
    3cb8:	00003629 	.word	0x00003629

00003cbc <gpio_set_pin_pull_mode>:
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	0002      	movs	r2, r0
    3cc4:	1dfb      	adds	r3, r7, #7
    3cc6:	701a      	strb	r2, [r3, #0]
    3cc8:	1dbb      	adds	r3, r7, #6
    3cca:	1c0a      	adds	r2, r1, #0
    3ccc:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3cce:	1dfb      	adds	r3, r7, #7
    3cd0:	781b      	ldrb	r3, [r3, #0]
    3cd2:	095b      	lsrs	r3, r3, #5
    3cd4:	b2d8      	uxtb	r0, r3
    3cd6:	1dfb      	adds	r3, r7, #7
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	221f      	movs	r2, #31
    3cdc:	4013      	ands	r3, r2
    3cde:	b2d9      	uxtb	r1, r3
    3ce0:	1dbb      	adds	r3, r7, #6
    3ce2:	781b      	ldrb	r3, [r3, #0]
    3ce4:	001a      	movs	r2, r3
    3ce6:	4b03      	ldr	r3, [pc, #12]	; (3cf4 <gpio_set_pin_pull_mode+0x38>)
    3ce8:	4798      	blx	r3
}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	46bd      	mov	sp, r7
    3cee:	b002      	add	sp, #8
    3cf0:	bd80      	pop	{r7, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00003b15 	.word	0x00003b15

00003cf8 <gpio_set_pin_function>:
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3d02:	683a      	ldr	r2, [r7, #0]
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	0011      	movs	r1, r2
    3d08:	0018      	movs	r0, r3
    3d0a:	4b03      	ldr	r3, [pc, #12]	; (3d18 <gpio_set_pin_function+0x20>)
    3d0c:	4798      	blx	r3
}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	46bd      	mov	sp, r7
    3d12:	b002      	add	sp, #8
    3d14:	bd80      	pop	{r7, pc}
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00003c09 	.word	0x00003c09

00003d1c <gpio_set_pin_direction>:
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b082      	sub	sp, #8
    3d20:	af00      	add	r7, sp, #0
    3d22:	0002      	movs	r2, r0
    3d24:	1dfb      	adds	r3, r7, #7
    3d26:	701a      	strb	r2, [r3, #0]
    3d28:	1dbb      	adds	r3, r7, #6
    3d2a:	1c0a      	adds	r2, r1, #0
    3d2c:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3d2e:	1dfb      	adds	r3, r7, #7
    3d30:	781b      	ldrb	r3, [r3, #0]
    3d32:	095b      	lsrs	r3, r3, #5
    3d34:	b2d8      	uxtb	r0, r3
    3d36:	1dfb      	adds	r3, r7, #7
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	221f      	movs	r2, #31
    3d3c:	4013      	ands	r3, r2
    3d3e:	2201      	movs	r2, #1
    3d40:	409a      	lsls	r2, r3
    3d42:	0011      	movs	r1, r2
    3d44:	1dbb      	adds	r3, r7, #6
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	001a      	movs	r2, r3
    3d4a:	4b03      	ldr	r3, [pc, #12]	; (3d58 <gpio_set_pin_direction+0x3c>)
    3d4c:	4798      	blx	r3
}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	46bd      	mov	sp, r7
    3d52:	b002      	add	sp, #8
    3d54:	bd80      	pop	{r7, pc}
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	000039ad 	.word	0x000039ad

00003d5c <gpio_set_pin_level>:
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b082      	sub	sp, #8
    3d60:	af00      	add	r7, sp, #0
    3d62:	0002      	movs	r2, r0
    3d64:	1dfb      	adds	r3, r7, #7
    3d66:	701a      	strb	r2, [r3, #0]
    3d68:	1dbb      	adds	r3, r7, #6
    3d6a:	1c0a      	adds	r2, r1, #0
    3d6c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3d6e:	1dfb      	adds	r3, r7, #7
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	095b      	lsrs	r3, r3, #5
    3d74:	b2d8      	uxtb	r0, r3
    3d76:	1dfb      	adds	r3, r7, #7
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	221f      	movs	r2, #31
    3d7c:	4013      	ands	r3, r2
    3d7e:	2201      	movs	r2, #1
    3d80:	409a      	lsls	r2, r3
    3d82:	0011      	movs	r1, r2
    3d84:	1dbb      	adds	r3, r7, #6
    3d86:	781b      	ldrb	r3, [r3, #0]
    3d88:	001a      	movs	r2, r3
    3d8a:	4b03      	ldr	r3, [pc, #12]	; (3d98 <gpio_set_pin_level+0x3c>)
    3d8c:	4798      	blx	r3
}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	46bd      	mov	sp, r7
    3d92:	b002      	add	sp, #8
    3d94:	bd80      	pop	{r7, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	00003ac5 	.word	0x00003ac5

00003d9c <SpiInit>:
#include "spi-board.h"

struct spi_m_sync_descriptor Spi0;

void SpiInit( Spi_t *obj, SpiId_t spiId, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
    3d9c:	b590      	push	{r4, r7, lr}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	000c      	movs	r4, r1
    3da6:	0010      	movs	r0, r2
    3da8:	0019      	movs	r1, r3
    3daa:	1cfb      	adds	r3, r7, #3
    3dac:	1c22      	adds	r2, r4, #0
    3dae:	701a      	strb	r2, [r3, #0]
    3db0:	1cbb      	adds	r3, r7, #2
    3db2:	1c02      	adds	r2, r0, #0
    3db4:	701a      	strb	r2, [r3, #0]
    3db6:	1c7b      	adds	r3, r7, #1
    3db8:	1c0a      	adds	r2, r1, #0
    3dba:	701a      	strb	r2, [r3, #0]
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    3dbc:	4b40      	ldr	r3, [pc, #256]	; (3ec0 <SpiInit+0x124>)
    3dbe:	2240      	movs	r2, #64	; 0x40
    3dc0:	2118      	movs	r1, #24
    3dc2:	0018      	movs	r0, r3
    3dc4:	4b3f      	ldr	r3, [pc, #252]	; (3ec4 <SpiInit+0x128>)
    3dc6:	4798      	blx	r3
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    3dc8:	4b3d      	ldr	r3, [pc, #244]	; (3ec0 <SpiInit+0x124>)
    3dca:	2240      	movs	r2, #64	; 0x40
    3dcc:	2117      	movs	r1, #23
    3dce:	0018      	movs	r0, r3
    3dd0:	4b3c      	ldr	r3, [pc, #240]	; (3ec4 <SpiInit+0x128>)
    3dd2:	4798      	blx	r3

    hri_mclk_set_APBDMASK_SERCOM5_bit( MCLK );
    3dd4:	4b3c      	ldr	r3, [pc, #240]	; (3ec8 <SpiInit+0x12c>)
    3dd6:	0018      	movs	r0, r3
    3dd8:	4b3c      	ldr	r3, [pc, #240]	; (3ecc <SpiInit+0x130>)
    3dda:	4798      	blx	r3

    spi_m_sync_init( &Spi0, SERCOM5 );
    3ddc:	4a3c      	ldr	r2, [pc, #240]	; (3ed0 <SpiInit+0x134>)
    3dde:	4b3d      	ldr	r3, [pc, #244]	; (3ed4 <SpiInit+0x138>)
    3de0:	0011      	movs	r1, r2
    3de2:	0018      	movs	r0, r3
    3de4:	4b3c      	ldr	r3, [pc, #240]	; (3ed8 <SpiInit+0x13c>)
    3de6:	4798      	blx	r3

    hri_sercomspi_wait_for_sync( SERCOM5, SERCOM_SPI_SYNCBUSY_SWRST );
    3de8:	4b39      	ldr	r3, [pc, #228]	; (3ed0 <SpiInit+0x134>)
    3dea:	2101      	movs	r1, #1
    3dec:	0018      	movs	r0, r3
    3dee:	4b3b      	ldr	r3, [pc, #236]	; (3edc <SpiInit+0x140>)
    3df0:	4798      	blx	r3
    hri_sercomspi_set_CTRLA_SWRST_bit( SERCOM5 );
    3df2:	4b37      	ldr	r3, [pc, #220]	; (3ed0 <SpiInit+0x134>)
    3df4:	0018      	movs	r0, r3
    3df6:	4b3a      	ldr	r3, [pc, #232]	; (3ee0 <SpiInit+0x144>)
    3df8:	4798      	blx	r3
    hri_sercomspi_wait_for_sync( SERCOM5, SERCOM_SPI_SYNCBUSY_SWRST );
    3dfa:	4b35      	ldr	r3, [pc, #212]	; (3ed0 <SpiInit+0x134>)
    3dfc:	2101      	movs	r1, #1
    3dfe:	0018      	movs	r0, r3
    3e00:	4b36      	ldr	r3, [pc, #216]	; (3edc <SpiInit+0x140>)
    3e02:	4798      	blx	r3
    // 0x0001000C DOPO=1 MODE=3
    hri_sercomspi_write_CTRLA_reg( SERCOM5, SERCOM_SPI_CTRLA_MODE( 3 ) | SERCOM_SPI_CTRLA_DOPO( 1 ) );
    3e04:	4a37      	ldr	r2, [pc, #220]	; (3ee4 <SpiInit+0x148>)
    3e06:	4b32      	ldr	r3, [pc, #200]	; (3ed0 <SpiInit+0x134>)
    3e08:	0011      	movs	r1, r2
    3e0a:	0018      	movs	r0, r3
    3e0c:	4b36      	ldr	r3, [pc, #216]	; (3ee8 <SpiInit+0x14c>)
    3e0e:	4798      	blx	r3
    // 0x00020000 RXEN
    hri_sercomspi_write_CTRLB_reg( SERCOM5, SERCOM_SPI_CTRLB_RXEN );
    3e10:	2380      	movs	r3, #128	; 0x80
    3e12:	029b      	lsls	r3, r3, #10
    3e14:	4a2e      	ldr	r2, [pc, #184]	; (3ed0 <SpiInit+0x134>)
    3e16:	0019      	movs	r1, r3
    3e18:	0010      	movs	r0, r2
    3e1a:	4b34      	ldr	r3, [pc, #208]	; (3eec <SpiInit+0x150>)
    3e1c:	4798      	blx	r3
    hri_sercomspi_write_BAUD_reg( SERCOM5, ( ( float )CONF_GCLK_SERCOM5_CORE_FREQUENCY / ( float )( 2 * 1000000 ) ) - 1 );
    3e1e:	4b2c      	ldr	r3, [pc, #176]	; (3ed0 <SpiInit+0x134>)
    3e20:	2107      	movs	r1, #7
    3e22:	0018      	movs	r0, r3
    3e24:	4b32      	ldr	r3, [pc, #200]	; (3ef0 <SpiInit+0x154>)
    3e26:	4798      	blx	r3
    hri_sercomspi_write_DBGCTRL_reg( SERCOM5, 0 );
    3e28:	4b29      	ldr	r3, [pc, #164]	; (3ed0 <SpiInit+0x134>)
    3e2a:	2100      	movs	r1, #0
    3e2c:	0018      	movs	r0, r3
    3e2e:	4b31      	ldr	r3, [pc, #196]	; (3ef4 <SpiInit+0x158>)
    3e30:	4798      	blx	r3

    // Set pin direction to input. MISO
    gpio_set_pin_direction( miso, GPIO_DIRECTION_IN );
    3e32:	1c7b      	adds	r3, r7, #1
    3e34:	781b      	ldrb	r3, [r3, #0]
    3e36:	2101      	movs	r1, #1
    3e38:	0018      	movs	r0, r3
    3e3a:	4b2f      	ldr	r3, [pc, #188]	; (3ef8 <SpiInit+0x15c>)
    3e3c:	4798      	blx	r3
    gpio_set_pin_pull_mode( miso, GPIO_PULL_OFF );
    3e3e:	1c7b      	adds	r3, r7, #1
    3e40:	781b      	ldrb	r3, [r3, #0]
    3e42:	2100      	movs	r1, #0
    3e44:	0018      	movs	r0, r3
    3e46:	4b2d      	ldr	r3, [pc, #180]	; (3efc <SpiInit+0x160>)
    3e48:	4798      	blx	r3
    gpio_set_pin_function( miso, PINMUX_PB16C_SERCOM5_PAD0 );
    3e4a:	1c7b      	adds	r3, r7, #1
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	b25b      	sxtb	r3, r3
    3e50:	4a2b      	ldr	r2, [pc, #172]	; (3f00 <SpiInit+0x164>)
    3e52:	0011      	movs	r1, r2
    3e54:	0018      	movs	r0, r3
    3e56:	4b2b      	ldr	r3, [pc, #172]	; (3f04 <SpiInit+0x168>)
    3e58:	4798      	blx	r3

    // Set pin direction to output. MOSI
    gpio_set_pin_direction( mosi, GPIO_DIRECTION_OUT );
    3e5a:	1cbb      	adds	r3, r7, #2
    3e5c:	781b      	ldrb	r3, [r3, #0]
    3e5e:	2102      	movs	r1, #2
    3e60:	0018      	movs	r0, r3
    3e62:	4b25      	ldr	r3, [pc, #148]	; (3ef8 <SpiInit+0x15c>)
    3e64:	4798      	blx	r3
    gpio_set_pin_level( mosi, false );
    3e66:	1cbb      	adds	r3, r7, #2
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	2100      	movs	r1, #0
    3e6c:	0018      	movs	r0, r3
    3e6e:	4b26      	ldr	r3, [pc, #152]	; (3f08 <SpiInit+0x16c>)
    3e70:	4798      	blx	r3
    gpio_set_pin_function( mosi, PINMUX_PB22D_SERCOM5_PAD2 );
    3e72:	1cbb      	adds	r3, r7, #2
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	b25b      	sxtb	r3, r3
    3e78:	4a24      	ldr	r2, [pc, #144]	; (3f0c <SpiInit+0x170>)
    3e7a:	0011      	movs	r1, r2
    3e7c:	0018      	movs	r0, r3
    3e7e:	4b21      	ldr	r3, [pc, #132]	; (3f04 <SpiInit+0x168>)
    3e80:	4798      	blx	r3

    // Set pin direction to output. CLK
    gpio_set_pin_direction( sclk, GPIO_DIRECTION_OUT );
    3e82:	2318      	movs	r3, #24
    3e84:	18fb      	adds	r3, r7, r3
    3e86:	781b      	ldrb	r3, [r3, #0]
    3e88:	2102      	movs	r1, #2
    3e8a:	0018      	movs	r0, r3
    3e8c:	4b1a      	ldr	r3, [pc, #104]	; (3ef8 <SpiInit+0x15c>)
    3e8e:	4798      	blx	r3
    gpio_set_pin_level( sclk,  false );
    3e90:	2318      	movs	r3, #24
    3e92:	18fb      	adds	r3, r7, r3
    3e94:	781b      	ldrb	r3, [r3, #0]
    3e96:	2100      	movs	r1, #0
    3e98:	0018      	movs	r0, r3
    3e9a:	4b1b      	ldr	r3, [pc, #108]	; (3f08 <SpiInit+0x16c>)
    3e9c:	4798      	blx	r3
    gpio_set_pin_function( sclk, PINMUX_PB23D_SERCOM5_PAD3 );
    3e9e:	2318      	movs	r3, #24
    3ea0:	18fb      	adds	r3, r7, r3
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	b25b      	sxtb	r3, r3
    3ea6:	4a1a      	ldr	r2, [pc, #104]	; (3f10 <SpiInit+0x174>)
    3ea8:	0011      	movs	r1, r2
    3eaa:	0018      	movs	r0, r3
    3eac:	4b15      	ldr	r3, [pc, #84]	; (3f04 <SpiInit+0x168>)
    3eae:	4798      	blx	r3

    hri_sercomspi_set_CTRLA_ENABLE_bit( SERCOM5 );
    3eb0:	4b07      	ldr	r3, [pc, #28]	; (3ed0 <SpiInit+0x134>)
    3eb2:	0018      	movs	r0, r3
    3eb4:	4b17      	ldr	r3, [pc, #92]	; (3f14 <SpiInit+0x178>)
    3eb6:	4798      	blx	r3
}
    3eb8:	46c0      	nop			; (mov r8, r8)
    3eba:	46bd      	mov	sp, r7
    3ebc:	b003      	add	sp, #12
    3ebe:	bd90      	pop	{r4, r7, pc}
    3ec0:	40001800 	.word	0x40001800
    3ec4:	00003507 	.word	0x00003507
    3ec8:	40000400 	.word	0x40000400
    3ecc:	00003531 	.word	0x00003531
    3ed0:	43000400 	.word	0x43000400
    3ed4:	20001bb8 	.word	0x20001bb8
    3ed8:	0000058d 	.word	0x0000058d
    3edc:	00003865 	.word	0x00003865
    3ee0:	000038b9 	.word	0x000038b9
    3ee4:	0001000c 	.word	0x0001000c
    3ee8:	00003911 	.word	0x00003911
    3eec:	00003929 	.word	0x00003929
    3ef0:	00003941 	.word	0x00003941
    3ef4:	0000398b 	.word	0x0000398b
    3ef8:	00003d1d 	.word	0x00003d1d
    3efc:	00003cbd 	.word	0x00003cbd
    3f00:	00300002 	.word	0x00300002
    3f04:	00003cf9 	.word	0x00003cf9
    3f08:	00003d5d 	.word	0x00003d5d
    3f0c:	00360003 	.word	0x00360003
    3f10:	00370003 	.word	0x00370003
    3f14:	000038e5 	.word	0x000038e5

00003f18 <SpiInOut>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    3f20:	000a      	movs	r2, r1
    3f22:	1cbb      	adds	r3, r7, #2
    3f24:	801a      	strh	r2, [r3, #0]
    // Wait for bus idle (ready to write)
    while( ( SERCOM_SPI_INTFLAG_DRE & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	4b1a      	ldr	r3, [pc, #104]	; (3f94 <SpiInOut+0x7c>)
    3f2a:	0018      	movs	r0, r3
    3f2c:	4b1a      	ldr	r3, [pc, #104]	; (3f98 <SpiInOut+0x80>)
    3f2e:	4798      	blx	r3
    3f30:	0003      	movs	r3, r0
    3f32:	001a      	movs	r2, r3
    3f34:	2301      	movs	r3, #1
    3f36:	4013      	ands	r3, r2
    3f38:	b2db      	uxtb	r3, r3
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d0f4      	beq.n	3f28 <SpiInOut+0x10>
    {

    }
    hri_sercomspi_clear_INTFLAG_reg( SERCOM5, SERCOM_SPI_INTFLAG_DRE );
    3f3e:	4b15      	ldr	r3, [pc, #84]	; (3f94 <SpiInOut+0x7c>)
    3f40:	2101      	movs	r1, #1
    3f42:	0018      	movs	r0, r3
    3f44:	4b15      	ldr	r3, [pc, #84]	; (3f9c <SpiInOut+0x84>)
    3f46:	4798      	blx	r3

    // Write byte
    hri_sercomspi_write_DATA_reg( SERCOM5, outData );
    3f48:	1cbb      	adds	r3, r7, #2
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	4a11      	ldr	r2, [pc, #68]	; (3f94 <SpiInOut+0x7c>)
    3f4e:	0019      	movs	r1, r3
    3f50:	0010      	movs	r0, r2
    3f52:	4b13      	ldr	r3, [pc, #76]	; (3fa0 <SpiInOut+0x88>)
    3f54:	4798      	blx	r3

    // Wait for ready to read
    while( ( SERCOM_SPI_INTFLAG_RXC & hri_sercomspi_read_INTFLAG_reg( SERCOM5 ) ) == 0 )
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	4b0e      	ldr	r3, [pc, #56]	; (3f94 <SpiInOut+0x7c>)
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b0e      	ldr	r3, [pc, #56]	; (3f98 <SpiInOut+0x80>)
    3f5e:	4798      	blx	r3
    3f60:	0003      	movs	r3, r0
    3f62:	001a      	movs	r2, r3
    3f64:	2304      	movs	r3, #4
    3f66:	4013      	ands	r3, r2
    3f68:	b2db      	uxtb	r3, r3
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d0f4      	beq.n	3f58 <SpiInOut+0x40>
    {

    }
    hri_sercomspi_clear_INTFLAG_reg( SERCOM5, SERCOM_SPI_INTFLAG_RXC );
    3f6e:	4b09      	ldr	r3, [pc, #36]	; (3f94 <SpiInOut+0x7c>)
    3f70:	2104      	movs	r1, #4
    3f72:	0018      	movs	r0, r3
    3f74:	4b09      	ldr	r3, [pc, #36]	; (3f9c <SpiInOut+0x84>)
    3f76:	4798      	blx	r3

    // Read byte
    outData = ( uint16_t )hri_sercomspi_read_DATA_reg( SERCOM5 );
    3f78:	4b06      	ldr	r3, [pc, #24]	; (3f94 <SpiInOut+0x7c>)
    3f7a:	0018      	movs	r0, r3
    3f7c:	4b09      	ldr	r3, [pc, #36]	; (3fa4 <SpiInOut+0x8c>)
    3f7e:	4798      	blx	r3
    3f80:	0002      	movs	r2, r0
    3f82:	1cbb      	adds	r3, r7, #2
    3f84:	801a      	strh	r2, [r3, #0]

    return outData;
    3f86:	1cbb      	adds	r3, r7, #2
    3f88:	881b      	ldrh	r3, [r3, #0]
}
    3f8a:	0018      	movs	r0, r3
    3f8c:	46bd      	mov	sp, r7
    3f8e:	b002      	add	sp, #8
    3f90:	bd80      	pop	{r7, pc}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	43000400 	.word	0x43000400
    3f98:	00003883 	.word	0x00003883
    3f9c:	00003899 	.word	0x00003899
    3fa0:	00003973 	.word	0x00003973
    3fa4:	0000395f 	.word	0x0000395f

00003fa8 <hri_port_write_PMUX_PMUXE_bf>:
{
    3fa8:	b590      	push	{r4, r7, lr}
    3faa:	b085      	sub	sp, #20
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    3fb0:	000c      	movs	r4, r1
    3fb2:	0010      	movs	r0, r2
    3fb4:	0019      	movs	r1, r3
    3fb6:	1cfb      	adds	r3, r7, #3
    3fb8:	1c22      	adds	r2, r4, #0
    3fba:	701a      	strb	r2, [r3, #0]
    3fbc:	1cbb      	adds	r3, r7, #2
    3fbe:	1c02      	adds	r2, r0, #0
    3fc0:	701a      	strb	r2, [r3, #0]
    3fc2:	1c7b      	adds	r3, r7, #1
    3fc4:	1c0a      	adds	r2, r1, #0
    3fc6:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3fc8:	1cfb      	adds	r3, r7, #3
    3fca:	7819      	ldrb	r1, [r3, #0]
    3fcc:	1cbb      	adds	r3, r7, #2
    3fce:	781a      	ldrb	r2, [r3, #0]
    3fd0:	230f      	movs	r3, #15
    3fd2:	18fb      	adds	r3, r7, r3
    3fd4:	6878      	ldr	r0, [r7, #4]
    3fd6:	2430      	movs	r4, #48	; 0x30
    3fd8:	01c9      	lsls	r1, r1, #7
    3fda:	1841      	adds	r1, r0, r1
    3fdc:	188a      	adds	r2, r1, r2
    3fde:	1912      	adds	r2, r2, r4
    3fe0:	7812      	ldrb	r2, [r2, #0]
    3fe2:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3fe4:	230f      	movs	r3, #15
    3fe6:	18fb      	adds	r3, r7, r3
    3fe8:	220f      	movs	r2, #15
    3fea:	18ba      	adds	r2, r7, r2
    3fec:	7812      	ldrb	r2, [r2, #0]
    3fee:	210f      	movs	r1, #15
    3ff0:	438a      	bics	r2, r1
    3ff2:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    3ff4:	1c7b      	adds	r3, r7, #1
    3ff6:	781b      	ldrb	r3, [r3, #0]
    3ff8:	220f      	movs	r2, #15
    3ffa:	4013      	ands	r3, r2
    3ffc:	b2d9      	uxtb	r1, r3
    3ffe:	230f      	movs	r3, #15
    4000:	18fb      	adds	r3, r7, r3
    4002:	220f      	movs	r2, #15
    4004:	18ba      	adds	r2, r7, r2
    4006:	7812      	ldrb	r2, [r2, #0]
    4008:	430a      	orrs	r2, r1
    400a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    400c:	1cfb      	adds	r3, r7, #3
    400e:	781a      	ldrb	r2, [r3, #0]
    4010:	1cbb      	adds	r3, r7, #2
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	2030      	movs	r0, #48	; 0x30
    4018:	01d2      	lsls	r2, r2, #7
    401a:	188a      	adds	r2, r1, r2
    401c:	18d3      	adds	r3, r2, r3
    401e:	181b      	adds	r3, r3, r0
    4020:	220f      	movs	r2, #15
    4022:	18ba      	adds	r2, r7, r2
    4024:	7812      	ldrb	r2, [r2, #0]
    4026:	701a      	strb	r2, [r3, #0]
}
    4028:	46c0      	nop			; (mov r8, r8)
    402a:	46bd      	mov	sp, r7
    402c:	b005      	add	sp, #20
    402e:	bd90      	pop	{r4, r7, pc}

00004030 <hri_port_write_PMUX_PMUXO_bf>:
{
    4030:	b590      	push	{r4, r7, lr}
    4032:	b085      	sub	sp, #20
    4034:	af00      	add	r7, sp, #0
    4036:	6078      	str	r0, [r7, #4]
    4038:	000c      	movs	r4, r1
    403a:	0010      	movs	r0, r2
    403c:	0019      	movs	r1, r3
    403e:	1cfb      	adds	r3, r7, #3
    4040:	1c22      	adds	r2, r4, #0
    4042:	701a      	strb	r2, [r3, #0]
    4044:	1cbb      	adds	r3, r7, #2
    4046:	1c02      	adds	r2, r0, #0
    4048:	701a      	strb	r2, [r3, #0]
    404a:	1c7b      	adds	r3, r7, #1
    404c:	1c0a      	adds	r2, r1, #0
    404e:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4050:	1cfb      	adds	r3, r7, #3
    4052:	7819      	ldrb	r1, [r3, #0]
    4054:	1cbb      	adds	r3, r7, #2
    4056:	781a      	ldrb	r2, [r3, #0]
    4058:	230f      	movs	r3, #15
    405a:	18fb      	adds	r3, r7, r3
    405c:	6878      	ldr	r0, [r7, #4]
    405e:	2430      	movs	r4, #48	; 0x30
    4060:	01c9      	lsls	r1, r1, #7
    4062:	1841      	adds	r1, r0, r1
    4064:	188a      	adds	r2, r1, r2
    4066:	1912      	adds	r2, r2, r4
    4068:	7812      	ldrb	r2, [r2, #0]
    406a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    406c:	230f      	movs	r3, #15
    406e:	18fb      	adds	r3, r7, r3
    4070:	220f      	movs	r2, #15
    4072:	18ba      	adds	r2, r7, r2
    4074:	7812      	ldrb	r2, [r2, #0]
    4076:	210f      	movs	r1, #15
    4078:	400a      	ands	r2, r1
    407a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    407c:	1c7b      	adds	r3, r7, #1
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	011b      	lsls	r3, r3, #4
    4082:	b2d9      	uxtb	r1, r3
    4084:	230f      	movs	r3, #15
    4086:	18fb      	adds	r3, r7, r3
    4088:	220f      	movs	r2, #15
    408a:	18ba      	adds	r2, r7, r2
    408c:	7812      	ldrb	r2, [r2, #0]
    408e:	430a      	orrs	r2, r1
    4090:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4092:	1cfb      	adds	r3, r7, #3
    4094:	781a      	ldrb	r2, [r3, #0]
    4096:	1cbb      	adds	r3, r7, #2
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	6879      	ldr	r1, [r7, #4]
    409c:	2030      	movs	r0, #48	; 0x30
    409e:	01d2      	lsls	r2, r2, #7
    40a0:	188a      	adds	r2, r1, r2
    40a2:	18d3      	adds	r3, r2, r3
    40a4:	181b      	adds	r3, r3, r0
    40a6:	220f      	movs	r2, #15
    40a8:	18ba      	adds	r2, r7, r2
    40aa:	7812      	ldrb	r2, [r2, #0]
    40ac:	701a      	strb	r2, [r3, #0]
}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	46bd      	mov	sp, r7
    40b2:	b005      	add	sp, #20
    40b4:	bd90      	pop	{r4, r7, pc}

000040b6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    40b6:	b590      	push	{r4, r7, lr}
    40b8:	b085      	sub	sp, #20
    40ba:	af00      	add	r7, sp, #0
    40bc:	6078      	str	r0, [r7, #4]
    40be:	000c      	movs	r4, r1
    40c0:	0010      	movs	r0, r2
    40c2:	0019      	movs	r1, r3
    40c4:	1cfb      	adds	r3, r7, #3
    40c6:	1c22      	adds	r2, r4, #0
    40c8:	701a      	strb	r2, [r3, #0]
    40ca:	1cbb      	adds	r3, r7, #2
    40cc:	1c02      	adds	r2, r0, #0
    40ce:	701a      	strb	r2, [r3, #0]
    40d0:	1c7b      	adds	r3, r7, #1
    40d2:	1c0a      	adds	r2, r1, #0
    40d4:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    40d6:	1cfb      	adds	r3, r7, #3
    40d8:	7819      	ldrb	r1, [r3, #0]
    40da:	1cbb      	adds	r3, r7, #2
    40dc:	781a      	ldrb	r2, [r3, #0]
    40de:	230f      	movs	r3, #15
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	6878      	ldr	r0, [r7, #4]
    40e4:	2440      	movs	r4, #64	; 0x40
    40e6:	01c9      	lsls	r1, r1, #7
    40e8:	1841      	adds	r1, r0, r1
    40ea:	188a      	adds	r2, r1, r2
    40ec:	1912      	adds	r2, r2, r4
    40ee:	7812      	ldrb	r2, [r2, #0]
    40f0:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    40f2:	230f      	movs	r3, #15
    40f4:	18fb      	adds	r3, r7, r3
    40f6:	220f      	movs	r2, #15
    40f8:	18ba      	adds	r2, r7, r2
    40fa:	7812      	ldrb	r2, [r2, #0]
    40fc:	2101      	movs	r1, #1
    40fe:	438a      	bics	r2, r1
    4100:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4102:	1c7b      	adds	r3, r7, #1
    4104:	7819      	ldrb	r1, [r3, #0]
    4106:	230f      	movs	r3, #15
    4108:	18fb      	adds	r3, r7, r3
    410a:	220f      	movs	r2, #15
    410c:	18ba      	adds	r2, r7, r2
    410e:	7812      	ldrb	r2, [r2, #0]
    4110:	430a      	orrs	r2, r1
    4112:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4114:	1cfb      	adds	r3, r7, #3
    4116:	781a      	ldrb	r2, [r3, #0]
    4118:	1cbb      	adds	r3, r7, #2
    411a:	781b      	ldrb	r3, [r3, #0]
    411c:	6879      	ldr	r1, [r7, #4]
    411e:	2040      	movs	r0, #64	; 0x40
    4120:	01d2      	lsls	r2, r2, #7
    4122:	188a      	adds	r2, r1, r2
    4124:	18d3      	adds	r3, r2, r3
    4126:	181b      	adds	r3, r3, r0
    4128:	220f      	movs	r2, #15
    412a:	18ba      	adds	r2, r7, r2
    412c:	7812      	ldrb	r2, [r2, #0]
    412e:	701a      	strb	r2, [r3, #0]
}
    4130:	46c0      	nop			; (mov r8, r8)
    4132:	46bd      	mov	sp, r7
    4134:	b005      	add	sp, #20
    4136:	bd90      	pop	{r4, r7, pc}

00004138 <_gpio_set_pin_function>:
{
    4138:	b590      	push	{r4, r7, lr}
    413a:	b085      	sub	sp, #20
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	095a      	lsrs	r2, r3, #5
    4146:	230f      	movs	r3, #15
    4148:	18fb      	adds	r3, r7, r3
    414a:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	b2da      	uxtb	r2, r3
    4150:	230e      	movs	r3, #14
    4152:	18fb      	adds	r3, r7, r3
    4154:	211f      	movs	r1, #31
    4156:	400a      	ands	r2, r1
    4158:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    415a:	683b      	ldr	r3, [r7, #0]
    415c:	3301      	adds	r3, #1
    415e:	d10a      	bne.n	4176 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4160:	230e      	movs	r3, #14
    4162:	18fb      	adds	r3, r7, r3
    4164:	781a      	ldrb	r2, [r3, #0]
    4166:	230f      	movs	r3, #15
    4168:	18fb      	adds	r3, r7, r3
    416a:	7819      	ldrb	r1, [r3, #0]
    416c:	481b      	ldr	r0, [pc, #108]	; (41dc <_gpio_set_pin_function+0xa4>)
    416e:	2300      	movs	r3, #0
    4170:	4c1b      	ldr	r4, [pc, #108]	; (41e0 <_gpio_set_pin_function+0xa8>)
    4172:	47a0      	blx	r4
}
    4174:	e02e      	b.n	41d4 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4176:	230e      	movs	r3, #14
    4178:	18fb      	adds	r3, r7, r3
    417a:	781a      	ldrb	r2, [r3, #0]
    417c:	230f      	movs	r3, #15
    417e:	18fb      	adds	r3, r7, r3
    4180:	7819      	ldrb	r1, [r3, #0]
    4182:	4816      	ldr	r0, [pc, #88]	; (41dc <_gpio_set_pin_function+0xa4>)
    4184:	2301      	movs	r3, #1
    4186:	4c16      	ldr	r4, [pc, #88]	; (41e0 <_gpio_set_pin_function+0xa8>)
    4188:	47a0      	blx	r4
		if (pin & 1) {
    418a:	230e      	movs	r3, #14
    418c:	18fb      	adds	r3, r7, r3
    418e:	781b      	ldrb	r3, [r3, #0]
    4190:	2201      	movs	r2, #1
    4192:	4013      	ands	r3, r2
    4194:	d00f      	beq.n	41b6 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4196:	230e      	movs	r3, #14
    4198:	18fb      	adds	r3, r7, r3
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	085b      	lsrs	r3, r3, #1
    419e:	b2da      	uxtb	r2, r3
    41a0:	683b      	ldr	r3, [r7, #0]
    41a2:	b2d8      	uxtb	r0, r3
    41a4:	230f      	movs	r3, #15
    41a6:	18fb      	adds	r3, r7, r3
    41a8:	7819      	ldrb	r1, [r3, #0]
    41aa:	4c0c      	ldr	r4, [pc, #48]	; (41dc <_gpio_set_pin_function+0xa4>)
    41ac:	0003      	movs	r3, r0
    41ae:	0020      	movs	r0, r4
    41b0:	4c0c      	ldr	r4, [pc, #48]	; (41e4 <_gpio_set_pin_function+0xac>)
    41b2:	47a0      	blx	r4
}
    41b4:	e00e      	b.n	41d4 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    41b6:	230e      	movs	r3, #14
    41b8:	18fb      	adds	r3, r7, r3
    41ba:	781b      	ldrb	r3, [r3, #0]
    41bc:	085b      	lsrs	r3, r3, #1
    41be:	b2da      	uxtb	r2, r3
    41c0:	683b      	ldr	r3, [r7, #0]
    41c2:	b2d8      	uxtb	r0, r3
    41c4:	230f      	movs	r3, #15
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	7819      	ldrb	r1, [r3, #0]
    41ca:	4c04      	ldr	r4, [pc, #16]	; (41dc <_gpio_set_pin_function+0xa4>)
    41cc:	0003      	movs	r3, r0
    41ce:	0020      	movs	r0, r4
    41d0:	4c05      	ldr	r4, [pc, #20]	; (41e8 <_gpio_set_pin_function+0xb0>)
    41d2:	47a0      	blx	r4
}
    41d4:	46c0      	nop			; (mov r8, r8)
    41d6:	46bd      	mov	sp, r7
    41d8:	b005      	add	sp, #20
    41da:	bd90      	pop	{r4, r7, pc}
    41dc:	40002800 	.word	0x40002800
    41e0:	000040b7 	.word	0x000040b7
    41e4:	00004031 	.word	0x00004031
    41e8:	00003fa9 	.word	0x00003fa9

000041ec <gpio_set_pin_function>:
{
    41ec:	b580      	push	{r7, lr}
    41ee:	b082      	sub	sp, #8
    41f0:	af00      	add	r7, sp, #0
    41f2:	6078      	str	r0, [r7, #4]
    41f4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    41f6:	683a      	ldr	r2, [r7, #0]
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	0011      	movs	r1, r2
    41fc:	0018      	movs	r0, r3
    41fe:	4b03      	ldr	r3, [pc, #12]	; (420c <gpio_set_pin_function+0x20>)
    4200:	4798      	blx	r3
}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	46bd      	mov	sp, r7
    4206:	b002      	add	sp, #8
    4208:	bd80      	pop	{r7, pc}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	00004139 	.word	0x00004139

00004210 <SX1276IoInit>:
Gpio_t DbgPinTx;
Gpio_t DbgPinRx;
#endif

void SX1276IoInit( void )
{
    4210:	b590      	push	{r4, r7, lr}
    4212:	b083      	sub	sp, #12
    4214:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
    4216:	4838      	ldr	r0, [pc, #224]	; (42f8 <SX1276IoInit+0xe8>)
    4218:	2301      	movs	r3, #1
    421a:	9301      	str	r3, [sp, #4]
    421c:	2301      	movs	r3, #1
    421e:	9300      	str	r3, [sp, #0]
    4220:	2300      	movs	r3, #0
    4222:	2201      	movs	r2, #1
    4224:	2111      	movs	r1, #17
    4226:	4c35      	ldr	r4, [pc, #212]	; (42fc <SX1276IoInit+0xec>)
    4228:	47a0      	blx	r4

    ext_irq_init( );
    422a:	4b35      	ldr	r3, [pc, #212]	; (4300 <SX1276IoInit+0xf0>)
    422c:	4798      	blx	r3

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    422e:	4835      	ldr	r0, [pc, #212]	; (4304 <SX1276IoInit+0xf4>)
    4230:	2300      	movs	r3, #0
    4232:	9301      	str	r3, [sp, #4]
    4234:	2300      	movs	r3, #0
    4236:	9300      	str	r3, [sp, #0]
    4238:	2300      	movs	r3, #0
    423a:	2200      	movs	r2, #0
    423c:	2114      	movs	r1, #20
    423e:	4c2f      	ldr	r4, [pc, #188]	; (42fc <SX1276IoInit+0xec>)
    4240:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_0, PINMUX_PA20A_EIC_EXTINT4 );
    4242:	23a0      	movs	r3, #160	; 0xa0
    4244:	035b      	lsls	r3, r3, #13
    4246:	0019      	movs	r1, r3
    4248:	2014      	movs	r0, #20
    424a:	4b2f      	ldr	r3, [pc, #188]	; (4308 <SX1276IoInit+0xf8>)
    424c:	4798      	blx	r3
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    424e:	482f      	ldr	r0, [pc, #188]	; (430c <SX1276IoInit+0xfc>)
    4250:	2300      	movs	r3, #0
    4252:	9301      	str	r3, [sp, #4]
    4254:	2300      	movs	r3, #0
    4256:	9300      	str	r3, [sp, #0]
    4258:	2300      	movs	r3, #0
    425a:	2200      	movs	r2, #0
    425c:	2115      	movs	r1, #21
    425e:	4c27      	ldr	r4, [pc, #156]	; (42fc <SX1276IoInit+0xec>)
    4260:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_1, PINMUX_PA21A_EIC_EXTINT5 );
    4262:	23a8      	movs	r3, #168	; 0xa8
    4264:	035b      	lsls	r3, r3, #13
    4266:	0019      	movs	r1, r3
    4268:	2015      	movs	r0, #21
    426a:	4b27      	ldr	r3, [pc, #156]	; (4308 <SX1276IoInit+0xf8>)
    426c:	4798      	blx	r3
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    426e:	4828      	ldr	r0, [pc, #160]	; (4310 <SX1276IoInit+0x100>)
    4270:	2300      	movs	r3, #0
    4272:	9301      	str	r3, [sp, #4]
    4274:	2300      	movs	r3, #0
    4276:	9300      	str	r3, [sp, #0]
    4278:	2300      	movs	r3, #0
    427a:	2200      	movs	r2, #0
    427c:	212c      	movs	r1, #44	; 0x2c
    427e:	4c1f      	ldr	r4, [pc, #124]	; (42fc <SX1276IoInit+0xec>)
    4280:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_2, PINMUX_PB12A_EIC_EXTINT12 );
    4282:	23b0      	movs	r3, #176	; 0xb0
    4284:	039b      	lsls	r3, r3, #14
    4286:	0019      	movs	r1, r3
    4288:	202c      	movs	r0, #44	; 0x2c
    428a:	4b1f      	ldr	r3, [pc, #124]	; (4308 <SX1276IoInit+0xf8>)
    428c:	4798      	blx	r3
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    428e:	4821      	ldr	r0, [pc, #132]	; (4314 <SX1276IoInit+0x104>)
    4290:	2300      	movs	r3, #0
    4292:	9301      	str	r3, [sp, #4]
    4294:	2300      	movs	r3, #0
    4296:	9300      	str	r3, [sp, #0]
    4298:	2300      	movs	r3, #0
    429a:	2200      	movs	r2, #0
    429c:	212d      	movs	r1, #45	; 0x2d
    429e:	4c17      	ldr	r4, [pc, #92]	; (42fc <SX1276IoInit+0xec>)
    42a0:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_3, PINMUX_PB13A_EIC_EXTINT13 );
    42a2:	23b4      	movs	r3, #180	; 0xb4
    42a4:	039b      	lsls	r3, r3, #14
    42a6:	0019      	movs	r1, r3
    42a8:	202d      	movs	r0, #45	; 0x2d
    42aa:	4b17      	ldr	r3, [pc, #92]	; (4308 <SX1276IoInit+0xf8>)
    42ac:	4798      	blx	r3
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    42ae:	481a      	ldr	r0, [pc, #104]	; (4318 <SX1276IoInit+0x108>)
    42b0:	2300      	movs	r3, #0
    42b2:	9301      	str	r3, [sp, #4]
    42b4:	2300      	movs	r3, #0
    42b6:	9300      	str	r3, [sp, #0]
    42b8:	2300      	movs	r3, #0
    42ba:	2200      	movs	r2, #0
    42bc:	212e      	movs	r1, #46	; 0x2e
    42be:	4c0f      	ldr	r4, [pc, #60]	; (42fc <SX1276IoInit+0xec>)
    42c0:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_4, PINMUX_PB14A_EIC_EXTINT14 );
    42c2:	23b8      	movs	r3, #184	; 0xb8
    42c4:	039b      	lsls	r3, r3, #14
    42c6:	0019      	movs	r1, r3
    42c8:	202e      	movs	r0, #46	; 0x2e
    42ca:	4b0f      	ldr	r3, [pc, #60]	; (4308 <SX1276IoInit+0xf8>)
    42cc:	4798      	blx	r3
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    42ce:	4813      	ldr	r0, [pc, #76]	; (431c <SX1276IoInit+0x10c>)
    42d0:	2300      	movs	r3, #0
    42d2:	9301      	str	r3, [sp, #4]
    42d4:	2300      	movs	r3, #0
    42d6:	9300      	str	r3, [sp, #0]
    42d8:	2300      	movs	r3, #0
    42da:	2200      	movs	r2, #0
    42dc:	212f      	movs	r1, #47	; 0x2f
    42de:	4c07      	ldr	r4, [pc, #28]	; (42fc <SX1276IoInit+0xec>)
    42e0:	47a0      	blx	r4
    gpio_set_pin_function( RADIO_DIO_5, PINMUX_PB15A_EIC_EXTINT15 );
    42e2:	23bc      	movs	r3, #188	; 0xbc
    42e4:	039b      	lsls	r3, r3, #14
    42e6:	0019      	movs	r1, r3
    42e8:	202f      	movs	r0, #47	; 0x2f
    42ea:	4b07      	ldr	r3, [pc, #28]	; (4308 <SX1276IoInit+0xf8>)
    42ec:	4798      	blx	r3

#if defined( USE_RADIO_DEBUG )
    GpioInit( &DbgPinTx, RADIO_DBG_PIN_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &DbgPinRx, RADIO_DBG_PIN_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
    42ee:	46c0      	nop			; (mov r8, r8)
    42f0:	46bd      	mov	sp, r7
    42f2:	b001      	add	sp, #4
    42f4:	bd90      	pop	{r4, r7, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	20001d28 	.word	0x20001d28
    42fc:	00015c51 	.word	0x00015c51
    4300:	000001e5 	.word	0x000001e5
    4304:	20001c70 	.word	0x20001c70
    4308:	000041ed 	.word	0x000041ed
    430c:	20001c84 	.word	0x20001c84
    4310:	20001c98 	.word	0x20001c98
    4314:	20001cac 	.word	0x20001cac
    4318:	20001cc0 	.word	0x20001cc0
    431c:	20001cd4 	.word	0x20001cd4

00004320 <DioIrqHanlderProcess>:
    Dio4IrqHandler,
    Dio5IrqHandler
};

static void DioIrqHanlderProcess( uint8_t index )
{
    4320:	b580      	push	{r7, lr}
    4322:	b082      	sub	sp, #8
    4324:	af00      	add	r7, sp, #0
    4326:	0002      	movs	r2, r0
    4328:	1dfb      	adds	r3, r7, #7
    432a:	701a      	strb	r2, [r3, #0]
    if( ( DioIrqs[index] != NULL ) && ( DioIrqs[index]->IrqHandler != NULL ) )
    432c:	1dfb      	adds	r3, r7, #7
    432e:	781a      	ldrb	r2, [r3, #0]
    4330:	4b0f      	ldr	r3, [pc, #60]	; (4370 <DioIrqHanlderProcess+0x50>)
    4332:	0092      	lsls	r2, r2, #2
    4334:	58d3      	ldr	r3, [r2, r3]
    4336:	2b00      	cmp	r3, #0
    4338:	d015      	beq.n	4366 <DioIrqHanlderProcess+0x46>
    433a:	1dfb      	adds	r3, r7, #7
    433c:	781a      	ldrb	r2, [r3, #0]
    433e:	4b0c      	ldr	r3, [pc, #48]	; (4370 <DioIrqHanlderProcess+0x50>)
    4340:	0092      	lsls	r2, r2, #2
    4342:	58d3      	ldr	r3, [r2, r3]
    4344:	691b      	ldr	r3, [r3, #16]
    4346:	2b00      	cmp	r3, #0
    4348:	d00d      	beq.n	4366 <DioIrqHanlderProcess+0x46>
    {
        DioIrqs[index]->IrqHandler( DioIrqs[index]->Context );
    434a:	1dfb      	adds	r3, r7, #7
    434c:	781a      	ldrb	r2, [r3, #0]
    434e:	4b08      	ldr	r3, [pc, #32]	; (4370 <DioIrqHanlderProcess+0x50>)
    4350:	0092      	lsls	r2, r2, #2
    4352:	58d3      	ldr	r3, [r2, r3]
    4354:	691a      	ldr	r2, [r3, #16]
    4356:	1dfb      	adds	r3, r7, #7
    4358:	7819      	ldrb	r1, [r3, #0]
    435a:	4b05      	ldr	r3, [pc, #20]	; (4370 <DioIrqHanlderProcess+0x50>)
    435c:	0089      	lsls	r1, r1, #2
    435e:	58cb      	ldr	r3, [r1, r3]
    4360:	68db      	ldr	r3, [r3, #12]
    4362:	0018      	movs	r0, r3
    4364:	4790      	blx	r2
    }
}
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	46bd      	mov	sp, r7
    436a:	b002      	add	sp, #8
    436c:	bd80      	pop	{r7, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	20000018 	.word	0x20000018

00004374 <Dio0IrqHandler>:

static void Dio0IrqHandler( void )
{
    4374:	b580      	push	{r7, lr}
    4376:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 0 );
    4378:	2000      	movs	r0, #0
    437a:	4b02      	ldr	r3, [pc, #8]	; (4384 <Dio0IrqHandler+0x10>)
    437c:	4798      	blx	r3
}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	46bd      	mov	sp, r7
    4382:	bd80      	pop	{r7, pc}
    4384:	00004321 	.word	0x00004321

00004388 <Dio1IrqHandler>:

static void Dio1IrqHandler( void )
{
    4388:	b580      	push	{r7, lr}
    438a:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 1 );
    438c:	2001      	movs	r0, #1
    438e:	4b02      	ldr	r3, [pc, #8]	; (4398 <Dio1IrqHandler+0x10>)
    4390:	4798      	blx	r3
}
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	46bd      	mov	sp, r7
    4396:	bd80      	pop	{r7, pc}
    4398:	00004321 	.word	0x00004321

0000439c <Dio2IrqHandler>:

static void Dio2IrqHandler( void )
{
    439c:	b580      	push	{r7, lr}
    439e:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 2 );
    43a0:	2002      	movs	r0, #2
    43a2:	4b02      	ldr	r3, [pc, #8]	; (43ac <Dio2IrqHandler+0x10>)
    43a4:	4798      	blx	r3
}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	46bd      	mov	sp, r7
    43aa:	bd80      	pop	{r7, pc}
    43ac:	00004321 	.word	0x00004321

000043b0 <Dio3IrqHandler>:

static void Dio3IrqHandler( void )
{
    43b0:	b580      	push	{r7, lr}
    43b2:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 3 );
    43b4:	2003      	movs	r0, #3
    43b6:	4b02      	ldr	r3, [pc, #8]	; (43c0 <Dio3IrqHandler+0x10>)
    43b8:	4798      	blx	r3
}
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	46bd      	mov	sp, r7
    43be:	bd80      	pop	{r7, pc}
    43c0:	00004321 	.word	0x00004321

000043c4 <Dio4IrqHandler>:

static void Dio4IrqHandler( void )
{
    43c4:	b580      	push	{r7, lr}
    43c6:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 4 );
    43c8:	2004      	movs	r0, #4
    43ca:	4b02      	ldr	r3, [pc, #8]	; (43d4 <Dio4IrqHandler+0x10>)
    43cc:	4798      	blx	r3
}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	46bd      	mov	sp, r7
    43d2:	bd80      	pop	{r7, pc}
    43d4:	00004321 	.word	0x00004321

000043d8 <Dio5IrqHandler>:

static void Dio5IrqHandler( void )
{
    43d8:	b580      	push	{r7, lr}
    43da:	af00      	add	r7, sp, #0
    DioIrqHanlderProcess( 5 );
    43dc:	2005      	movs	r0, #5
    43de:	4b02      	ldr	r3, [pc, #8]	; (43e8 <Dio5IrqHandler+0x10>)
    43e0:	4798      	blx	r3
}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	46bd      	mov	sp, r7
    43e6:	bd80      	pop	{r7, pc}
    43e8:	00004321 	.word	0x00004321

000043ec <IoIrqInit>:

static void IoIrqInit( uint8_t index, DioIrqHandler *irqHandler )
{
    43ec:	b580      	push	{r7, lr}
    43ee:	b082      	sub	sp, #8
    43f0:	af00      	add	r7, sp, #0
    43f2:	0002      	movs	r2, r0
    43f4:	6039      	str	r1, [r7, #0]
    43f6:	1dfb      	adds	r3, r7, #7
    43f8:	701a      	strb	r2, [r3, #0]
    DioIrqs[index]->IrqHandler = irqHandler;
    43fa:	1dfb      	adds	r3, r7, #7
    43fc:	781a      	ldrb	r2, [r3, #0]
    43fe:	4b0c      	ldr	r3, [pc, #48]	; (4430 <IoIrqInit+0x44>)
    4400:	0092      	lsls	r2, r2, #2
    4402:	58d3      	ldr	r3, [r2, r3]
    4404:	683a      	ldr	r2, [r7, #0]
    4406:	611a      	str	r2, [r3, #16]
    ext_irq_register( DioIrqs[index]->pin, ExtIrqHandlers[index] );
    4408:	1dfb      	adds	r3, r7, #7
    440a:	781a      	ldrb	r2, [r3, #0]
    440c:	4b08      	ldr	r3, [pc, #32]	; (4430 <IoIrqInit+0x44>)
    440e:	0092      	lsls	r2, r2, #2
    4410:	58d3      	ldr	r3, [r2, r3]
    4412:	781b      	ldrb	r3, [r3, #0]
    4414:	b25b      	sxtb	r3, r3
    4416:	0018      	movs	r0, r3
    4418:	1dfb      	adds	r3, r7, #7
    441a:	781a      	ldrb	r2, [r3, #0]
    441c:	4b05      	ldr	r3, [pc, #20]	; (4434 <IoIrqInit+0x48>)
    441e:	0092      	lsls	r2, r2, #2
    4420:	58d3      	ldr	r3, [r2, r3]
    4422:	0019      	movs	r1, r3
    4424:	4b04      	ldr	r3, [pc, #16]	; (4438 <IoIrqInit+0x4c>)
    4426:	4798      	blx	r3
}
    4428:	46c0      	nop			; (mov r8, r8)
    442a:	46bd      	mov	sp, r7
    442c:	b002      	add	sp, #8
    442e:	bd80      	pop	{r7, pc}
    4430:	20000018 	.word	0x20000018
    4434:	20000030 	.word	0x20000030
    4438:	00000241 	.word	0x00000241

0000443c <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
    443c:	b580      	push	{r7, lr}
    443e:	b084      	sub	sp, #16
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    for( int8_t i = 0; i < 5; i++ )
    4444:	230f      	movs	r3, #15
    4446:	18fb      	adds	r3, r7, r3
    4448:	2200      	movs	r2, #0
    444a:	701a      	strb	r2, [r3, #0]
    444c:	e017      	b.n	447e <SX1276IoIrqInit+0x42>
    {
        IoIrqInit( i, irqHandlers[i] );
    444e:	230f      	movs	r3, #15
    4450:	18fb      	adds	r3, r7, r3
    4452:	7818      	ldrb	r0, [r3, #0]
    4454:	230f      	movs	r3, #15
    4456:	18fb      	adds	r3, r7, r3
    4458:	781b      	ldrb	r3, [r3, #0]
    445a:	b25b      	sxtb	r3, r3
    445c:	009b      	lsls	r3, r3, #2
    445e:	687a      	ldr	r2, [r7, #4]
    4460:	18d3      	adds	r3, r2, r3
    4462:	681b      	ldr	r3, [r3, #0]
    4464:	0019      	movs	r1, r3
    4466:	4b0b      	ldr	r3, [pc, #44]	; (4494 <SX1276IoIrqInit+0x58>)
    4468:	4798      	blx	r3
    for( int8_t i = 0; i < 5; i++ )
    446a:	230f      	movs	r3, #15
    446c:	18fb      	adds	r3, r7, r3
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	b25b      	sxtb	r3, r3
    4472:	b2db      	uxtb	r3, r3
    4474:	3301      	adds	r3, #1
    4476:	b2da      	uxtb	r2, r3
    4478:	230f      	movs	r3, #15
    447a:	18fb      	adds	r3, r7, r3
    447c:	701a      	strb	r2, [r3, #0]
    447e:	230f      	movs	r3, #15
    4480:	18fb      	adds	r3, r7, r3
    4482:	781b      	ldrb	r3, [r3, #0]
    4484:	b25b      	sxtb	r3, r3
    4486:	2b04      	cmp	r3, #4
    4488:	dde1      	ble.n	444e <SX1276IoIrqInit+0x12>
    }
}
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	46bd      	mov	sp, r7
    448e:	b004      	add	sp, #16
    4490:	bd80      	pop	{r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	000043ed 	.word	0x000043ed

00004498 <SX1276SetBoardTcxo>:
 * \brief Enables/disables the TCXO if available on board design.
 *
 * \param [IN] state TCXO enabled when true and disabled when false.
 */
static void SX1276SetBoardTcxo( uint8_t state )
{
    4498:	b580      	push	{r7, lr}
    449a:	b082      	sub	sp, #8
    449c:	af00      	add	r7, sp, #0
    449e:	0002      	movs	r2, r0
    44a0:	1dfb      	adds	r3, r7, #7
    44a2:	701a      	strb	r2, [r3, #0]
    else
    {
        TCXO_OFF( );
    }
#endif
}
    44a4:	46c0      	nop			; (mov r8, r8)
    44a6:	46bd      	mov	sp, r7
    44a8:	b002      	add	sp, #8
    44aa:	bd80      	pop	{r7, pc}

000044ac <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
    44ac:	b580      	push	{r7, lr}
    44ae:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
    44b0:	2300      	movs	r3, #0
}
    44b2:	0018      	movs	r0, r3
    44b4:	46bd      	mov	sp, r7
    44b6:	bd80      	pop	{r7, pc}

000044b8 <SX1276Reset>:

void SX1276Reset( void )
{
    44b8:	b590      	push	{r4, r7, lr}
    44ba:	b083      	sub	sp, #12
    44bc:	af02      	add	r7, sp, #8
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
    44be:	2001      	movs	r0, #1
    44c0:	4b0f      	ldr	r3, [pc, #60]	; (4500 <SX1276Reset+0x48>)
    44c2:	4798      	blx	r3

    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    44c4:	480f      	ldr	r0, [pc, #60]	; (4504 <SX1276Reset+0x4c>)
    44c6:	2300      	movs	r3, #0
    44c8:	9301      	str	r3, [sp, #4]
    44ca:	2300      	movs	r3, #0
    44cc:	9300      	str	r3, [sp, #0]
    44ce:	2300      	movs	r3, #0
    44d0:	2201      	movs	r2, #1
    44d2:	210a      	movs	r1, #10
    44d4:	4c0c      	ldr	r4, [pc, #48]	; (4508 <SX1276Reset+0x50>)
    44d6:	47a0      	blx	r4

    // Wait 1 ms
    DelayMs( 1 );
    44d8:	2001      	movs	r0, #1
    44da:	4b0c      	ldr	r3, [pc, #48]	; (450c <SX1276Reset+0x54>)
    44dc:	4798      	blx	r3

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    44de:	4809      	ldr	r0, [pc, #36]	; (4504 <SX1276Reset+0x4c>)
    44e0:	2301      	movs	r3, #1
    44e2:	9301      	str	r3, [sp, #4]
    44e4:	2300      	movs	r3, #0
    44e6:	9300      	str	r3, [sp, #0]
    44e8:	2300      	movs	r3, #0
    44ea:	2200      	movs	r2, #0
    44ec:	210a      	movs	r1, #10
    44ee:	4c06      	ldr	r4, [pc, #24]	; (4508 <SX1276Reset+0x50>)
    44f0:	47a0      	blx	r4

    // Wait 6 ms
    DelayMs( 6 );
    44f2:	2006      	movs	r0, #6
    44f4:	4b05      	ldr	r3, [pc, #20]	; (450c <SX1276Reset+0x54>)
    44f6:	4798      	blx	r3
}
    44f8:	46c0      	nop			; (mov r8, r8)
    44fa:	46bd      	mov	sp, r7
    44fc:	b001      	add	sp, #4
    44fe:	bd90      	pop	{r4, r7, pc}
    4500:	00004499 	.word	0x00004499
    4504:	20001c5c 	.word	0x20001c5c
    4508:	00015c51 	.word	0x00015c51
    450c:	00015c35 	.word	0x00015c35

00004510 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
    4510:	b590      	push	{r4, r7, lr}
    4512:	b085      	sub	sp, #20
    4514:	af00      	add	r7, sp, #0
    4516:	0002      	movs	r2, r0
    4518:	1dfb      	adds	r3, r7, #7
    451a:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
    451c:	230f      	movs	r3, #15
    451e:	18fb      	adds	r3, r7, r3
    4520:	2200      	movs	r2, #0
    4522:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
    4524:	230e      	movs	r3, #14
    4526:	18fb      	adds	r3, r7, r3
    4528:	2200      	movs	r2, #0
    452a:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
    452c:	230f      	movs	r3, #15
    452e:	18fc      	adds	r4, r7, r3
    4530:	2009      	movs	r0, #9
    4532:	4b6d      	ldr	r3, [pc, #436]	; (46e8 <SX1276SetRfTxPower+0x1d8>)
    4534:	4798      	blx	r3
    4536:	0003      	movs	r3, r0
    4538:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
    453a:	230e      	movs	r3, #14
    453c:	18fc      	adds	r4, r7, r3
    453e:	204d      	movs	r0, #77	; 0x4d
    4540:	4b69      	ldr	r3, [pc, #420]	; (46e8 <SX1276SetRfTxPower+0x1d8>)
    4542:	4798      	blx	r3
    4544:	0003      	movs	r3, r0
    4546:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
    4548:	230f      	movs	r3, #15
    454a:	18fb      	adds	r3, r7, r3
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b25b      	sxtb	r3, r3
    4550:	227f      	movs	r2, #127	; 0x7f
    4552:	4013      	ands	r3, r2
    4554:	b25c      	sxtb	r4, r3
    4556:	4b65      	ldr	r3, [pc, #404]	; (46ec <SX1276SetRfTxPower+0x1dc>)
    4558:	22e4      	movs	r2, #228	; 0xe4
    455a:	589b      	ldr	r3, [r3, r2]
    455c:	0018      	movs	r0, r3
    455e:	4b64      	ldr	r3, [pc, #400]	; (46f0 <SX1276SetRfTxPower+0x1e0>)
    4560:	4798      	blx	r3
    4562:	0003      	movs	r3, r0
    4564:	b25b      	sxtb	r3, r3
    4566:	4323      	orrs	r3, r4
    4568:	b25a      	sxtb	r2, r3
    456a:	230f      	movs	r3, #15
    456c:	18fb      	adds	r3, r7, r3
    456e:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
    4570:	230f      	movs	r3, #15
    4572:	18fb      	adds	r3, r7, r3
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	b25b      	sxtb	r3, r3
    4578:	2b00      	cmp	r3, #0
    457a:	da6b      	bge.n	4654 <SX1276SetRfTxPower+0x144>
    {
        if( power > 17 )
    457c:	1dfb      	adds	r3, r7, #7
    457e:	781b      	ldrb	r3, [r3, #0]
    4580:	b25b      	sxtb	r3, r3
    4582:	2b11      	cmp	r3, #17
    4584:	dd08      	ble.n	4598 <SX1276SetRfTxPower+0x88>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
    4586:	230e      	movs	r3, #14
    4588:	18fb      	adds	r3, r7, r3
    458a:	220e      	movs	r2, #14
    458c:	18ba      	adds	r2, r7, r2
    458e:	7812      	ldrb	r2, [r2, #0]
    4590:	2107      	movs	r1, #7
    4592:	430a      	orrs	r2, r1
    4594:	701a      	strb	r2, [r3, #0]
    4596:	e00c      	b.n	45b2 <SX1276SetRfTxPower+0xa2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
    4598:	230e      	movs	r3, #14
    459a:	18fb      	adds	r3, r7, r3
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	b25b      	sxtb	r3, r3
    45a0:	2207      	movs	r2, #7
    45a2:	4393      	bics	r3, r2
    45a4:	b25b      	sxtb	r3, r3
    45a6:	2204      	movs	r2, #4
    45a8:	4313      	orrs	r3, r2
    45aa:	b25a      	sxtb	r2, r3
    45ac:	230e      	movs	r3, #14
    45ae:	18fb      	adds	r3, r7, r3
    45b0:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
    45b2:	230e      	movs	r3, #14
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2207      	movs	r2, #7
    45ba:	4013      	ands	r3, r2
    45bc:	2b07      	cmp	r3, #7
    45be:	d124      	bne.n	460a <SX1276SetRfTxPower+0xfa>
        {
            if( power < 5 )
    45c0:	1dfb      	adds	r3, r7, #7
    45c2:	781b      	ldrb	r3, [r3, #0]
    45c4:	b25b      	sxtb	r3, r3
    45c6:	2b04      	cmp	r3, #4
    45c8:	dc02      	bgt.n	45d0 <SX1276SetRfTxPower+0xc0>
            {
                power = 5;
    45ca:	1dfb      	adds	r3, r7, #7
    45cc:	2205      	movs	r2, #5
    45ce:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
    45d0:	1dfb      	adds	r3, r7, #7
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	b25b      	sxtb	r3, r3
    45d6:	2b14      	cmp	r3, #20
    45d8:	dd02      	ble.n	45e0 <SX1276SetRfTxPower+0xd0>
            {
                power = 20;
    45da:	1dfb      	adds	r3, r7, #7
    45dc:	2214      	movs	r2, #20
    45de:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
    45e0:	230f      	movs	r3, #15
    45e2:	18fb      	adds	r3, r7, r3
    45e4:	781b      	ldrb	r3, [r3, #0]
    45e6:	b25b      	sxtb	r3, r3
    45e8:	220f      	movs	r2, #15
    45ea:	4393      	bics	r3, r2
    45ec:	b25a      	sxtb	r2, r3
    45ee:	1dfb      	adds	r3, r7, #7
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	3b05      	subs	r3, #5
    45f4:	b2db      	uxtb	r3, r3
    45f6:	b25b      	sxtb	r3, r3
    45f8:	210f      	movs	r1, #15
    45fa:	400b      	ands	r3, r1
    45fc:	b25b      	sxtb	r3, r3
    45fe:	4313      	orrs	r3, r2
    4600:	b25a      	sxtb	r2, r3
    4602:	230f      	movs	r3, #15
    4604:	18fb      	adds	r3, r7, r3
    4606:	701a      	strb	r2, [r3, #0]
    4608:	e05c      	b.n	46c4 <SX1276SetRfTxPower+0x1b4>
        }
        else
        {
            if( power < 2 )
    460a:	1dfb      	adds	r3, r7, #7
    460c:	781b      	ldrb	r3, [r3, #0]
    460e:	b25b      	sxtb	r3, r3
    4610:	2b01      	cmp	r3, #1
    4612:	dc02      	bgt.n	461a <SX1276SetRfTxPower+0x10a>
            {
                power = 2;
    4614:	1dfb      	adds	r3, r7, #7
    4616:	2202      	movs	r2, #2
    4618:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
    461a:	1dfb      	adds	r3, r7, #7
    461c:	781b      	ldrb	r3, [r3, #0]
    461e:	b25b      	sxtb	r3, r3
    4620:	2b11      	cmp	r3, #17
    4622:	dd02      	ble.n	462a <SX1276SetRfTxPower+0x11a>
            {
                power = 17;
    4624:	1dfb      	adds	r3, r7, #7
    4626:	2211      	movs	r2, #17
    4628:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
    462a:	230f      	movs	r3, #15
    462c:	18fb      	adds	r3, r7, r3
    462e:	781b      	ldrb	r3, [r3, #0]
    4630:	b25b      	sxtb	r3, r3
    4632:	220f      	movs	r2, #15
    4634:	4393      	bics	r3, r2
    4636:	b25a      	sxtb	r2, r3
    4638:	1dfb      	adds	r3, r7, #7
    463a:	781b      	ldrb	r3, [r3, #0]
    463c:	3b02      	subs	r3, #2
    463e:	b2db      	uxtb	r3, r3
    4640:	b25b      	sxtb	r3, r3
    4642:	210f      	movs	r1, #15
    4644:	400b      	ands	r3, r1
    4646:	b25b      	sxtb	r3, r3
    4648:	4313      	orrs	r3, r2
    464a:	b25a      	sxtb	r2, r3
    464c:	230f      	movs	r3, #15
    464e:	18fb      	adds	r3, r7, r3
    4650:	701a      	strb	r2, [r3, #0]
    4652:	e037      	b.n	46c4 <SX1276SetRfTxPower+0x1b4>
        }
    }
    else
    {
        if( power > 0 )
    4654:	1dfb      	adds	r3, r7, #7
    4656:	781b      	ldrb	r3, [r3, #0]
    4658:	b25b      	sxtb	r3, r3
    465a:	2b00      	cmp	r3, #0
    465c:	dd19      	ble.n	4692 <SX1276SetRfTxPower+0x182>
        {
            if( power > 15 )
    465e:	1dfb      	adds	r3, r7, #7
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	b25b      	sxtb	r3, r3
    4664:	2b0f      	cmp	r3, #15
    4666:	dd02      	ble.n	466e <SX1276SetRfTxPower+0x15e>
            {
                power = 15;
    4668:	1dfb      	adds	r3, r7, #7
    466a:	220f      	movs	r2, #15
    466c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
    466e:	230f      	movs	r3, #15
    4670:	18fb      	adds	r3, r7, r3
    4672:	781b      	ldrb	r3, [r3, #0]
    4674:	b25b      	sxtb	r3, r3
    4676:	227f      	movs	r2, #127	; 0x7f
    4678:	4393      	bics	r3, r2
    467a:	b25b      	sxtb	r3, r3
    467c:	2270      	movs	r2, #112	; 0x70
    467e:	4313      	orrs	r3, r2
    4680:	b25a      	sxtb	r2, r3
    4682:	1dfb      	adds	r3, r7, #7
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	4313      	orrs	r3, r2
    4688:	b25a      	sxtb	r2, r3
    468a:	230f      	movs	r3, #15
    468c:	18fb      	adds	r3, r7, r3
    468e:	701a      	strb	r2, [r3, #0]
    4690:	e018      	b.n	46c4 <SX1276SetRfTxPower+0x1b4>
        }
        else
        {
            if( power < -4 )
    4692:	1dfb      	adds	r3, r7, #7
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	b25b      	sxtb	r3, r3
    4698:	3304      	adds	r3, #4
    469a:	da02      	bge.n	46a2 <SX1276SetRfTxPower+0x192>
            {
                power = -4;
    469c:	1dfb      	adds	r3, r7, #7
    469e:	22fc      	movs	r2, #252	; 0xfc
    46a0:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
    46a2:	230f      	movs	r3, #15
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	781b      	ldrb	r3, [r3, #0]
    46a8:	b25b      	sxtb	r3, r3
    46aa:	227f      	movs	r2, #127	; 0x7f
    46ac:	4393      	bics	r3, r2
    46ae:	b25a      	sxtb	r2, r3
    46b0:	1dfb      	adds	r3, r7, #7
    46b2:	781b      	ldrb	r3, [r3, #0]
    46b4:	3304      	adds	r3, #4
    46b6:	b2db      	uxtb	r3, r3
    46b8:	b25b      	sxtb	r3, r3
    46ba:	4313      	orrs	r3, r2
    46bc:	b25a      	sxtb	r2, r3
    46be:	230f      	movs	r3, #15
    46c0:	18fb      	adds	r3, r7, r3
    46c2:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
    46c4:	230f      	movs	r3, #15
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	0019      	movs	r1, r3
    46cc:	2009      	movs	r0, #9
    46ce:	4b09      	ldr	r3, [pc, #36]	; (46f4 <SX1276SetRfTxPower+0x1e4>)
    46d0:	4798      	blx	r3
    SX1276Write( REG_PADAC, paDac );
    46d2:	230e      	movs	r3, #14
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	0019      	movs	r1, r3
    46da:	204d      	movs	r0, #77	; 0x4d
    46dc:	4b05      	ldr	r3, [pc, #20]	; (46f4 <SX1276SetRfTxPower+0x1e4>)
    46de:	4798      	blx	r3
}
    46e0:	46c0      	nop			; (mov r8, r8)
    46e2:	46bd      	mov	sp, r7
    46e4:	b005      	add	sp, #20
    46e6:	bd90      	pop	{r4, r7, pc}
    46e8:	00014e35 	.word	0x00014e35
    46ec:	20001c5c 	.word	0x20001c5c
    46f0:	000046f9 	.word	0x000046f9
    46f4:	00014e09 	.word	0x00014e09

000046f8 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
    46f8:	b580      	push	{r7, lr}
    46fa:	b082      	sub	sp, #8
    46fc:	af00      	add	r7, sp, #0
    46fe:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
    4700:	2380      	movs	r3, #128	; 0x80
}
    4702:	0018      	movs	r0, r3
    4704:	46bd      	mov	sp, r7
    4706:	b002      	add	sp, #8
    4708:	bd80      	pop	{r7, pc}
	...

0000470c <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
    470c:	b580      	push	{r7, lr}
    470e:	b082      	sub	sp, #8
    4710:	af00      	add	r7, sp, #0
    4712:	0002      	movs	r2, r0
    4714:	1dfb      	adds	r3, r7, #7
    4716:	701a      	strb	r2, [r3, #0]
    // No antenna switch available.
    // Just control the TCXO if available.
    if( RadioIsActive != status )
    4718:	4b0d      	ldr	r3, [pc, #52]	; (4750 <SX1276SetAntSwLowPower+0x44>)
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	1dfa      	adds	r2, r7, #7
    471e:	7812      	ldrb	r2, [r2, #0]
    4720:	429a      	cmp	r2, r3
    4722:	d011      	beq.n	4748 <SX1276SetAntSwLowPower+0x3c>
    {
        RadioIsActive = status;
    4724:	4b0a      	ldr	r3, [pc, #40]	; (4750 <SX1276SetAntSwLowPower+0x44>)
    4726:	1dfa      	adds	r2, r7, #7
    4728:	7812      	ldrb	r2, [r2, #0]
    472a:	701a      	strb	r2, [r3, #0]

        if( status == false )
    472c:	1dfb      	adds	r3, r7, #7
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	2201      	movs	r2, #1
    4732:	4053      	eors	r3, r2
    4734:	b2db      	uxtb	r3, r3
    4736:	2b00      	cmp	r3, #0
    4738:	d003      	beq.n	4742 <SX1276SetAntSwLowPower+0x36>
        {
            SX1276SetBoardTcxo( true );
    473a:	2001      	movs	r0, #1
    473c:	4b05      	ldr	r3, [pc, #20]	; (4754 <SX1276SetAntSwLowPower+0x48>)
    473e:	4798      	blx	r3
        else
        {
            SX1276SetBoardTcxo( false );
        }
    }
}
    4740:	e002      	b.n	4748 <SX1276SetAntSwLowPower+0x3c>
            SX1276SetBoardTcxo( false );
    4742:	2000      	movs	r0, #0
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <SX1276SetAntSwLowPower+0x48>)
    4746:	4798      	blx	r3
}
    4748:	46c0      	nop			; (mov r8, r8)
    474a:	46bd      	mov	sp, r7
    474c:	b002      	add	sp, #8
    474e:	bd80      	pop	{r7, pc}
    4750:	20000b74 	.word	0x20000b74
    4754:	00004499 	.word	0x00004499

00004758 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
    4758:	b580      	push	{r7, lr}
    475a:	b082      	sub	sp, #8
    475c:	af00      	add	r7, sp, #0
    475e:	0002      	movs	r2, r0
    4760:	1dfb      	adds	r3, r7, #7
    4762:	701a      	strb	r2, [r3, #0]
    // No antenna switch available
}
    4764:	46c0      	nop			; (mov r8, r8)
    4766:	46bd      	mov	sp, r7
    4768:	b002      	add	sp, #8
    476a:	bd80      	pop	{r7, pc}

0000476c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
    4774:	2301      	movs	r3, #1
}
    4776:	0018      	movs	r0, r3
    4778:	46bd      	mov	sp, r7
    477a:	b002      	add	sp, #8
    477c:	bd80      	pop	{r7, pc}

0000477e <hri_gclk_write_PCHCTRL_reg>:
{
    477e:	b580      	push	{r7, lr}
    4780:	b084      	sub	sp, #16
    4782:	af00      	add	r7, sp, #0
    4784:	60f8      	str	r0, [r7, #12]
    4786:	607a      	str	r2, [r7, #4]
    4788:	230b      	movs	r3, #11
    478a:	18fb      	adds	r3, r7, r3
    478c:	1c0a      	adds	r2, r1, #0
    478e:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4790:	230b      	movs	r3, #11
    4792:	18fb      	adds	r3, r7, r3
    4794:	781a      	ldrb	r2, [r3, #0]
    4796:	68fb      	ldr	r3, [r7, #12]
    4798:	3220      	adds	r2, #32
    479a:	0092      	lsls	r2, r2, #2
    479c:	6879      	ldr	r1, [r7, #4]
    479e:	50d1      	str	r1, [r2, r3]
}
    47a0:	46c0      	nop			; (mov r8, r8)
    47a2:	46bd      	mov	sp, r7
    47a4:	b004      	add	sp, #16
    47a6:	bd80      	pop	{r7, pc}

000047a8 <hri_mclk_set_APBCMASK_SERCOM3_bit>:
{
    47a8:	b580      	push	{r7, lr}
    47aa:	b082      	sub	sp, #8
    47ac:	af00      	add	r7, sp, #0
    47ae:	6078      	str	r0, [r7, #4]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	69db      	ldr	r3, [r3, #28]
    47b4:	2208      	movs	r2, #8
    47b6:	431a      	orrs	r2, r3
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	61da      	str	r2, [r3, #28]
}
    47bc:	46c0      	nop			; (mov r8, r8)
    47be:	46bd      	mov	sp, r7
    47c0:	b002      	add	sp, #8
    47c2:	bd80      	pop	{r7, pc}

000047c4 <hri_port_write_PMUX_PMUXE_bf>:
{
    47c4:	b590      	push	{r4, r7, lr}
    47c6:	b085      	sub	sp, #20
    47c8:	af00      	add	r7, sp, #0
    47ca:	6078      	str	r0, [r7, #4]
    47cc:	000c      	movs	r4, r1
    47ce:	0010      	movs	r0, r2
    47d0:	0019      	movs	r1, r3
    47d2:	1cfb      	adds	r3, r7, #3
    47d4:	1c22      	adds	r2, r4, #0
    47d6:	701a      	strb	r2, [r3, #0]
    47d8:	1cbb      	adds	r3, r7, #2
    47da:	1c02      	adds	r2, r0, #0
    47dc:	701a      	strb	r2, [r3, #0]
    47de:	1c7b      	adds	r3, r7, #1
    47e0:	1c0a      	adds	r2, r1, #0
    47e2:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47e4:	1cfb      	adds	r3, r7, #3
    47e6:	7819      	ldrb	r1, [r3, #0]
    47e8:	1cbb      	adds	r3, r7, #2
    47ea:	781a      	ldrb	r2, [r3, #0]
    47ec:	230f      	movs	r3, #15
    47ee:	18fb      	adds	r3, r7, r3
    47f0:	6878      	ldr	r0, [r7, #4]
    47f2:	2430      	movs	r4, #48	; 0x30
    47f4:	01c9      	lsls	r1, r1, #7
    47f6:	1841      	adds	r1, r0, r1
    47f8:	188a      	adds	r2, r1, r2
    47fa:	1912      	adds	r2, r2, r4
    47fc:	7812      	ldrb	r2, [r2, #0]
    47fe:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4800:	230f      	movs	r3, #15
    4802:	18fb      	adds	r3, r7, r3
    4804:	220f      	movs	r2, #15
    4806:	18ba      	adds	r2, r7, r2
    4808:	7812      	ldrb	r2, [r2, #0]
    480a:	210f      	movs	r1, #15
    480c:	438a      	bics	r2, r1
    480e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    4810:	1c7b      	adds	r3, r7, #1
    4812:	781b      	ldrb	r3, [r3, #0]
    4814:	220f      	movs	r2, #15
    4816:	4013      	ands	r3, r2
    4818:	b2d9      	uxtb	r1, r3
    481a:	230f      	movs	r3, #15
    481c:	18fb      	adds	r3, r7, r3
    481e:	220f      	movs	r2, #15
    4820:	18ba      	adds	r2, r7, r2
    4822:	7812      	ldrb	r2, [r2, #0]
    4824:	430a      	orrs	r2, r1
    4826:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4828:	1cfb      	adds	r3, r7, #3
    482a:	781a      	ldrb	r2, [r3, #0]
    482c:	1cbb      	adds	r3, r7, #2
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	6879      	ldr	r1, [r7, #4]
    4832:	2030      	movs	r0, #48	; 0x30
    4834:	01d2      	lsls	r2, r2, #7
    4836:	188a      	adds	r2, r1, r2
    4838:	18d3      	adds	r3, r2, r3
    483a:	181b      	adds	r3, r3, r0
    483c:	220f      	movs	r2, #15
    483e:	18ba      	adds	r2, r7, r2
    4840:	7812      	ldrb	r2, [r2, #0]
    4842:	701a      	strb	r2, [r3, #0]
}
    4844:	46c0      	nop			; (mov r8, r8)
    4846:	46bd      	mov	sp, r7
    4848:	b005      	add	sp, #20
    484a:	bd90      	pop	{r4, r7, pc}

0000484c <hri_port_write_PMUX_PMUXO_bf>:
{
    484c:	b590      	push	{r4, r7, lr}
    484e:	b085      	sub	sp, #20
    4850:	af00      	add	r7, sp, #0
    4852:	6078      	str	r0, [r7, #4]
    4854:	000c      	movs	r4, r1
    4856:	0010      	movs	r0, r2
    4858:	0019      	movs	r1, r3
    485a:	1cfb      	adds	r3, r7, #3
    485c:	1c22      	adds	r2, r4, #0
    485e:	701a      	strb	r2, [r3, #0]
    4860:	1cbb      	adds	r3, r7, #2
    4862:	1c02      	adds	r2, r0, #0
    4864:	701a      	strb	r2, [r3, #0]
    4866:	1c7b      	adds	r3, r7, #1
    4868:	1c0a      	adds	r2, r1, #0
    486a:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    486c:	1cfb      	adds	r3, r7, #3
    486e:	7819      	ldrb	r1, [r3, #0]
    4870:	1cbb      	adds	r3, r7, #2
    4872:	781a      	ldrb	r2, [r3, #0]
    4874:	230f      	movs	r3, #15
    4876:	18fb      	adds	r3, r7, r3
    4878:	6878      	ldr	r0, [r7, #4]
    487a:	2430      	movs	r4, #48	; 0x30
    487c:	01c9      	lsls	r1, r1, #7
    487e:	1841      	adds	r1, r0, r1
    4880:	188a      	adds	r2, r1, r2
    4882:	1912      	adds	r2, r2, r4
    4884:	7812      	ldrb	r2, [r2, #0]
    4886:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4888:	230f      	movs	r3, #15
    488a:	18fb      	adds	r3, r7, r3
    488c:	220f      	movs	r2, #15
    488e:	18ba      	adds	r2, r7, r2
    4890:	7812      	ldrb	r2, [r2, #0]
    4892:	210f      	movs	r1, #15
    4894:	400a      	ands	r2, r1
    4896:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    4898:	1c7b      	adds	r3, r7, #1
    489a:	781b      	ldrb	r3, [r3, #0]
    489c:	011b      	lsls	r3, r3, #4
    489e:	b2d9      	uxtb	r1, r3
    48a0:	230f      	movs	r3, #15
    48a2:	18fb      	adds	r3, r7, r3
    48a4:	220f      	movs	r2, #15
    48a6:	18ba      	adds	r2, r7, r2
    48a8:	7812      	ldrb	r2, [r2, #0]
    48aa:	430a      	orrs	r2, r1
    48ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48ae:	1cfb      	adds	r3, r7, #3
    48b0:	781a      	ldrb	r2, [r3, #0]
    48b2:	1cbb      	adds	r3, r7, #2
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	6879      	ldr	r1, [r7, #4]
    48b8:	2030      	movs	r0, #48	; 0x30
    48ba:	01d2      	lsls	r2, r2, #7
    48bc:	188a      	adds	r2, r1, r2
    48be:	18d3      	adds	r3, r2, r3
    48c0:	181b      	adds	r3, r3, r0
    48c2:	220f      	movs	r2, #15
    48c4:	18ba      	adds	r2, r7, r2
    48c6:	7812      	ldrb	r2, [r2, #0]
    48c8:	701a      	strb	r2, [r3, #0]
}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	46bd      	mov	sp, r7
    48ce:	b005      	add	sp, #20
    48d0:	bd90      	pop	{r4, r7, pc}

000048d2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    48d2:	b590      	push	{r4, r7, lr}
    48d4:	b085      	sub	sp, #20
    48d6:	af00      	add	r7, sp, #0
    48d8:	6078      	str	r0, [r7, #4]
    48da:	000c      	movs	r4, r1
    48dc:	0010      	movs	r0, r2
    48de:	0019      	movs	r1, r3
    48e0:	1cfb      	adds	r3, r7, #3
    48e2:	1c22      	adds	r2, r4, #0
    48e4:	701a      	strb	r2, [r3, #0]
    48e6:	1cbb      	adds	r3, r7, #2
    48e8:	1c02      	adds	r2, r0, #0
    48ea:	701a      	strb	r2, [r3, #0]
    48ec:	1c7b      	adds	r3, r7, #1
    48ee:	1c0a      	adds	r2, r1, #0
    48f0:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    48f2:	1cfb      	adds	r3, r7, #3
    48f4:	7819      	ldrb	r1, [r3, #0]
    48f6:	1cbb      	adds	r3, r7, #2
    48f8:	781a      	ldrb	r2, [r3, #0]
    48fa:	230f      	movs	r3, #15
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	6878      	ldr	r0, [r7, #4]
    4900:	2440      	movs	r4, #64	; 0x40
    4902:	01c9      	lsls	r1, r1, #7
    4904:	1841      	adds	r1, r0, r1
    4906:	188a      	adds	r2, r1, r2
    4908:	1912      	adds	r2, r2, r4
    490a:	7812      	ldrb	r2, [r2, #0]
    490c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    490e:	230f      	movs	r3, #15
    4910:	18fb      	adds	r3, r7, r3
    4912:	220f      	movs	r2, #15
    4914:	18ba      	adds	r2, r7, r2
    4916:	7812      	ldrb	r2, [r2, #0]
    4918:	2101      	movs	r1, #1
    491a:	438a      	bics	r2, r1
    491c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    491e:	1c7b      	adds	r3, r7, #1
    4920:	7819      	ldrb	r1, [r3, #0]
    4922:	230f      	movs	r3, #15
    4924:	18fb      	adds	r3, r7, r3
    4926:	220f      	movs	r2, #15
    4928:	18ba      	adds	r2, r7, r2
    492a:	7812      	ldrb	r2, [r2, #0]
    492c:	430a      	orrs	r2, r1
    492e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4930:	1cfb      	adds	r3, r7, #3
    4932:	781a      	ldrb	r2, [r3, #0]
    4934:	1cbb      	adds	r3, r7, #2
    4936:	781b      	ldrb	r3, [r3, #0]
    4938:	6879      	ldr	r1, [r7, #4]
    493a:	2040      	movs	r0, #64	; 0x40
    493c:	01d2      	lsls	r2, r2, #7
    493e:	188a      	adds	r2, r1, r2
    4940:	18d3      	adds	r3, r2, r3
    4942:	181b      	adds	r3, r3, r0
    4944:	220f      	movs	r2, #15
    4946:	18ba      	adds	r2, r7, r2
    4948:	7812      	ldrb	r2, [r2, #0]
    494a:	701a      	strb	r2, [r3, #0]
}
    494c:	46c0      	nop			; (mov r8, r8)
    494e:	46bd      	mov	sp, r7
    4950:	b005      	add	sp, #20
    4952:	bd90      	pop	{r4, r7, pc}

00004954 <_gpio_set_pin_function>:
{
    4954:	b590      	push	{r4, r7, lr}
    4956:	b085      	sub	sp, #20
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	095a      	lsrs	r2, r3, #5
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	b2da      	uxtb	r2, r3
    496c:	230e      	movs	r3, #14
    496e:	18fb      	adds	r3, r7, r3
    4970:	211f      	movs	r1, #31
    4972:	400a      	ands	r2, r1
    4974:	701a      	strb	r2, [r3, #0]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    4976:	683b      	ldr	r3, [r7, #0]
    4978:	3301      	adds	r3, #1
    497a:	d10a      	bne.n	4992 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    497c:	230e      	movs	r3, #14
    497e:	18fb      	adds	r3, r7, r3
    4980:	781a      	ldrb	r2, [r3, #0]
    4982:	230f      	movs	r3, #15
    4984:	18fb      	adds	r3, r7, r3
    4986:	7819      	ldrb	r1, [r3, #0]
    4988:	481b      	ldr	r0, [pc, #108]	; (49f8 <_gpio_set_pin_function+0xa4>)
    498a:	2300      	movs	r3, #0
    498c:	4c1b      	ldr	r4, [pc, #108]	; (49fc <_gpio_set_pin_function+0xa8>)
    498e:	47a0      	blx	r4
}
    4990:	e02e      	b.n	49f0 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4992:	230e      	movs	r3, #14
    4994:	18fb      	adds	r3, r7, r3
    4996:	781a      	ldrb	r2, [r3, #0]
    4998:	230f      	movs	r3, #15
    499a:	18fb      	adds	r3, r7, r3
    499c:	7819      	ldrb	r1, [r3, #0]
    499e:	4816      	ldr	r0, [pc, #88]	; (49f8 <_gpio_set_pin_function+0xa4>)
    49a0:	2301      	movs	r3, #1
    49a2:	4c16      	ldr	r4, [pc, #88]	; (49fc <_gpio_set_pin_function+0xa8>)
    49a4:	47a0      	blx	r4
		if (pin & 1) {
    49a6:	230e      	movs	r3, #14
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	781b      	ldrb	r3, [r3, #0]
    49ac:	2201      	movs	r2, #1
    49ae:	4013      	ands	r3, r2
    49b0:	d00f      	beq.n	49d2 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    49b2:	230e      	movs	r3, #14
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	085b      	lsrs	r3, r3, #1
    49ba:	b2da      	uxtb	r2, r3
    49bc:	683b      	ldr	r3, [r7, #0]
    49be:	b2d8      	uxtb	r0, r3
    49c0:	230f      	movs	r3, #15
    49c2:	18fb      	adds	r3, r7, r3
    49c4:	7819      	ldrb	r1, [r3, #0]
    49c6:	4c0c      	ldr	r4, [pc, #48]	; (49f8 <_gpio_set_pin_function+0xa4>)
    49c8:	0003      	movs	r3, r0
    49ca:	0020      	movs	r0, r4
    49cc:	4c0c      	ldr	r4, [pc, #48]	; (4a00 <_gpio_set_pin_function+0xac>)
    49ce:	47a0      	blx	r4
}
    49d0:	e00e      	b.n	49f0 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    49d2:	230e      	movs	r3, #14
    49d4:	18fb      	adds	r3, r7, r3
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	085b      	lsrs	r3, r3, #1
    49da:	b2da      	uxtb	r2, r3
    49dc:	683b      	ldr	r3, [r7, #0]
    49de:	b2d8      	uxtb	r0, r3
    49e0:	230f      	movs	r3, #15
    49e2:	18fb      	adds	r3, r7, r3
    49e4:	7819      	ldrb	r1, [r3, #0]
    49e6:	4c04      	ldr	r4, [pc, #16]	; (49f8 <_gpio_set_pin_function+0xa4>)
    49e8:	0003      	movs	r3, r0
    49ea:	0020      	movs	r0, r4
    49ec:	4c05      	ldr	r4, [pc, #20]	; (4a04 <_gpio_set_pin_function+0xb0>)
    49ee:	47a0      	blx	r4
}
    49f0:	46c0      	nop			; (mov r8, r8)
    49f2:	46bd      	mov	sp, r7
    49f4:	b005      	add	sp, #20
    49f6:	bd90      	pop	{r4, r7, pc}
    49f8:	40002800 	.word	0x40002800
    49fc:	000048d3 	.word	0x000048d3
    4a00:	0000484d 	.word	0x0000484d
    4a04:	000047c5 	.word	0x000047c5

00004a08 <gpio_set_pin_function>:
{
    4a08:	b580      	push	{r7, lr}
    4a0a:	b082      	sub	sp, #8
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
    4a10:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4a12:	683a      	ldr	r2, [r7, #0]
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	0011      	movs	r1, r2
    4a18:	0018      	movs	r0, r3
    4a1a:	4b03      	ldr	r3, [pc, #12]	; (4a28 <gpio_set_pin_function+0x20>)
    4a1c:	4798      	blx	r3
}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	46bd      	mov	sp, r7
    4a22:	b002      	add	sp, #8
    4a24:	bd80      	pop	{r7, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	00004955 	.word	0x00004955

00004a2c <UartMcuInit>:
#include "uart-board.h"

struct usart_sync_descriptor Usart0;

void UartMcuInit( Uart_t *obj, uint8_t uartId, PinNames tx, PinNames rx )
{
    4a2c:	b590      	push	{r4, r7, lr}
    4a2e:	b083      	sub	sp, #12
    4a30:	af00      	add	r7, sp, #0
    4a32:	6078      	str	r0, [r7, #4]
    4a34:	000c      	movs	r4, r1
    4a36:	0010      	movs	r0, r2
    4a38:	0019      	movs	r1, r3
    4a3a:	1cfb      	adds	r3, r7, #3
    4a3c:	1c22      	adds	r2, r4, #0
    4a3e:	701a      	strb	r2, [r3, #0]
    4a40:	1cbb      	adds	r3, r7, #2
    4a42:	1c02      	adds	r2, r0, #0
    4a44:	701a      	strb	r2, [r3, #0]
    4a46:	1c7b      	adds	r3, r7, #1
    4a48:	1c0a      	adds	r2, r1, #0
    4a4a:	701a      	strb	r2, [r3, #0]
    obj->UartId = uartId;
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	1cfa      	adds	r2, r7, #3
    4a50:	7812      	ldrb	r2, [r2, #0]
    4a52:	701a      	strb	r2, [r3, #0]

    // Clock initialization
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    4a54:	4b16      	ldr	r3, [pc, #88]	; (4ab0 <UartMcuInit+0x84>)
    4a56:	2240      	movs	r2, #64	; 0x40
    4a58:	2115      	movs	r1, #21
    4a5a:	0018      	movs	r0, r3
    4a5c:	4b15      	ldr	r3, [pc, #84]	; (4ab4 <UartMcuInit+0x88>)
    4a5e:	4798      	blx	r3
    hri_gclk_write_PCHCTRL_reg( GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | ( 1 << GCLK_PCHCTRL_CHEN_Pos ) );
    4a60:	4b13      	ldr	r3, [pc, #76]	; (4ab0 <UartMcuInit+0x84>)
    4a62:	2240      	movs	r2, #64	; 0x40
    4a64:	2111      	movs	r1, #17
    4a66:	0018      	movs	r0, r3
    4a68:	4b12      	ldr	r3, [pc, #72]	; (4ab4 <UartMcuInit+0x88>)
    4a6a:	4798      	blx	r3
    hri_mclk_set_APBCMASK_SERCOM3_bit( MCLK );
    4a6c:	4b12      	ldr	r3, [pc, #72]	; (4ab8 <UartMcuInit+0x8c>)
    4a6e:	0018      	movs	r0, r3
    4a70:	4b12      	ldr	r3, [pc, #72]	; (4abc <UartMcuInit+0x90>)
    4a72:	4798      	blx	r3

    // USART initialization
    usart_sync_init( &Usart0, SERCOM3, ( void * )NULL );
    4a74:	4912      	ldr	r1, [pc, #72]	; (4ac0 <UartMcuInit+0x94>)
    4a76:	4b13      	ldr	r3, [pc, #76]	; (4ac4 <UartMcuInit+0x98>)
    4a78:	2200      	movs	r2, #0
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <UartMcuInit+0x9c>)
    4a7e:	4798      	blx	r3

    // UASRT GPIO initialization
    gpio_set_pin_function( tx, PINMUX_PA22C_SERCOM3_PAD0 );
    4a80:	1cbb      	adds	r3, r7, #2
    4a82:	781b      	ldrb	r3, [r3, #0]
    4a84:	b25b      	sxtb	r3, r3
    4a86:	4a11      	ldr	r2, [pc, #68]	; (4acc <UartMcuInit+0xa0>)
    4a88:	0011      	movs	r1, r2
    4a8a:	0018      	movs	r0, r3
    4a8c:	4b10      	ldr	r3, [pc, #64]	; (4ad0 <UartMcuInit+0xa4>)
    4a8e:	4798      	blx	r3
    gpio_set_pin_function( rx, PINMUX_PA23C_SERCOM3_PAD1 );
    4a90:	1c7b      	adds	r3, r7, #1
    4a92:	781b      	ldrb	r3, [r3, #0]
    4a94:	b25b      	sxtb	r3, r3
    4a96:	4a0f      	ldr	r2, [pc, #60]	; (4ad4 <UartMcuInit+0xa8>)
    4a98:	0011      	movs	r1, r2
    4a9a:	0018      	movs	r0, r3
    4a9c:	4b0c      	ldr	r3, [pc, #48]	; (4ad0 <UartMcuInit+0xa4>)
    4a9e:	4798      	blx	r3

    usart_sync_enable( &Usart0 );
    4aa0:	4b08      	ldr	r3, [pc, #32]	; (4ac4 <UartMcuInit+0x98>)
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <UartMcuInit+0xac>)
    4aa6:	4798      	blx	r3
}
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	46bd      	mov	sp, r7
    4aac:	b003      	add	sp, #12
    4aae:	bd90      	pop	{r4, r7, pc}
    4ab0:	40001800 	.word	0x40001800
    4ab4:	0000477f 	.word	0x0000477f
    4ab8:	40000400 	.word	0x40000400
    4abc:	000047a9 	.word	0x000047a9
    4ac0:	42000c00 	.word	0x42000c00
    4ac4:	20001bcc 	.word	0x20001bcc
    4ac8:	0000074d 	.word	0x0000074d
    4acc:	00160002 	.word	0x00160002
    4ad0:	00004a09 	.word	0x00004a09
    4ad4:	00170002 	.word	0x00170002
    4ad8:	000007c5 	.word	0x000007c5

00004adc <UartMcuConfig>:

void UartMcuConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b084      	sub	sp, #16
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	60f8      	str	r0, [r7, #12]
    4ae4:	0008      	movs	r0, r1
    4ae6:	607a      	str	r2, [r7, #4]
    4ae8:	0019      	movs	r1, r3
    4aea:	230b      	movs	r3, #11
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	1c02      	adds	r2, r0, #0
    4af0:	701a      	strb	r2, [r3, #0]
    4af2:	230a      	movs	r3, #10
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	1c0a      	adds	r2, r1, #0
    4af8:	701a      	strb	r2, [r3, #0]
    usart_sync_set_baud_rate( &Usart0, baudrate );
    4afa:	687a      	ldr	r2, [r7, #4]
    4afc:	4b04      	ldr	r3, [pc, #16]	; (4b10 <UartMcuConfig+0x34>)
    4afe:	0011      	movs	r1, r2
    4b00:	0018      	movs	r0, r3
    4b02:	4b04      	ldr	r3, [pc, #16]	; (4b14 <UartMcuConfig+0x38>)
    4b04:	4798      	blx	r3
}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	46bd      	mov	sp, r7
    4b0a:	b004      	add	sp, #16
    4b0c:	bd80      	pop	{r7, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	20001bcc 	.word	0x20001bcc
    4b14:	00000801 	.word	0x00000801

00004b18 <UartMcuPutBuffer>:
        return 1; // Busy
    }
}

uint8_t UartMcuPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b084      	sub	sp, #16
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	60f8      	str	r0, [r7, #12]
    4b20:	60b9      	str	r1, [r7, #8]
    4b22:	1dbb      	adds	r3, r7, #6
    4b24:	801a      	strh	r2, [r3, #0]
    if( io_write( &Usart0.io, buffer, size ) == 0 )
    4b26:	1dbb      	adds	r3, r7, #6
    4b28:	881a      	ldrh	r2, [r3, #0]
    4b2a:	68b9      	ldr	r1, [r7, #8]
    4b2c:	4b06      	ldr	r3, [pc, #24]	; (4b48 <UartMcuPutBuffer+0x30>)
    4b2e:	0018      	movs	r0, r3
    4b30:	4b06      	ldr	r3, [pc, #24]	; (4b4c <UartMcuPutBuffer+0x34>)
    4b32:	4798      	blx	r3
    4b34:	1e03      	subs	r3, r0, #0
    4b36:	d101      	bne.n	4b3c <UartMcuPutBuffer+0x24>
    {
        return 1; //Error
    4b38:	2301      	movs	r3, #1
    4b3a:	e000      	b.n	4b3e <UartMcuPutBuffer+0x26>
    }
    return 0; // OK
    4b3c:	2300      	movs	r3, #0
}
    4b3e:	0018      	movs	r0, r3
    4b40:	46bd      	mov	sp, r7
    4b42:	b004      	add	sp, #16
    4b44:	bd80      	pop	{r7, pc}
    4b46:	46c0      	nop			; (mov r8, r8)
    4b48:	20001bcc 	.word	0x20001bcc
    4b4c:	000004e5 	.word	0x000004e5

00004b50 <UartMcuGetBuffer>:

uint8_t UartMcuGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b084      	sub	sp, #16
    4b54:	af00      	add	r7, sp, #0
    4b56:	60f8      	str	r0, [r7, #12]
    4b58:	60b9      	str	r1, [r7, #8]
    4b5a:	603b      	str	r3, [r7, #0]
    4b5c:	1dbb      	adds	r3, r7, #6
    4b5e:	801a      	strh	r2, [r3, #0]
    *nbReadBytes = io_read( &Usart0.io, buffer, size );
    4b60:	1dbb      	adds	r3, r7, #6
    4b62:	881a      	ldrh	r2, [r3, #0]
    4b64:	68b9      	ldr	r1, [r7, #8]
    4b66:	4b09      	ldr	r3, [pc, #36]	; (4b8c <UartMcuGetBuffer+0x3c>)
    4b68:	0018      	movs	r0, r3
    4b6a:	4b09      	ldr	r3, [pc, #36]	; (4b90 <UartMcuGetBuffer+0x40>)
    4b6c:	4798      	blx	r3
    4b6e:	0003      	movs	r3, r0
    4b70:	b29a      	uxth	r2, r3
    4b72:	683b      	ldr	r3, [r7, #0]
    4b74:	801a      	strh	r2, [r3, #0]
    if( *nbReadBytes == 0 )
    4b76:	683b      	ldr	r3, [r7, #0]
    4b78:	881b      	ldrh	r3, [r3, #0]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d101      	bne.n	4b82 <UartMcuGetBuffer+0x32>
    {
        return 1; // Empty
    4b7e:	2301      	movs	r3, #1
    4b80:	e000      	b.n	4b84 <UartMcuGetBuffer+0x34>
    }
    return 0; // OK
    4b82:	2300      	movs	r3, #0
}
    4b84:	0018      	movs	r0, r3
    4b86:	46bd      	mov	sp, r7
    4b88:	b004      	add	sp, #16
    4b8a:	bd80      	pop	{r7, pc}
    4b8c:	20001bcc 	.word	0x20001bcc
    4b90:	00000539 	.word	0x00000539

00004b94 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
    4b94:	b5b0      	push	{r4, r5, r7, lr}
    4b96:	b082      	sub	sp, #8
    4b98:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
    4b9a:	4b16      	ldr	r3, [pc, #88]	; (4bf4 <OnRadioTxDone+0x60>)
    4b9c:	4798      	blx	r3
    4b9e:	0002      	movs	r2, r0
    4ba0:	4b15      	ldr	r3, [pc, #84]	; (4bf8 <OnRadioTxDone+0x64>)
    4ba2:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
    4ba4:	4d15      	ldr	r5, [pc, #84]	; (4bfc <OnRadioTxDone+0x68>)
    4ba6:	23d4      	movs	r3, #212	; 0xd4
    4ba8:	009c      	lsls	r4, r3, #2
    4baa:	003b      	movs	r3, r7
    4bac:	0018      	movs	r0, r3
    4bae:	4b14      	ldr	r3, [pc, #80]	; (4c00 <OnRadioTxDone+0x6c>)
    4bb0:	4798      	blx	r3
    4bb2:	003a      	movs	r2, r7
    4bb4:	192b      	adds	r3, r5, r4
    4bb6:	ca03      	ldmia	r2!, {r0, r1}
    4bb8:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
    4bba:	4b12      	ldr	r3, [pc, #72]	; (4c04 <OnRadioTxDone+0x70>)
    4bbc:	781a      	ldrb	r2, [r3, #0]
    4bbe:	2110      	movs	r1, #16
    4bc0:	430a      	orrs	r2, r1
    4bc2:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    4bc4:	4a0d      	ldr	r2, [pc, #52]	; (4bfc <OnRadioTxDone+0x68>)
    4bc6:	23d8      	movs	r3, #216	; 0xd8
    4bc8:	009b      	lsls	r3, r3, #2
    4bca:	58d3      	ldr	r3, [r2, r3]
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d00c      	beq.n	4bea <OnRadioTxDone+0x56>
    4bd0:	4a0a      	ldr	r2, [pc, #40]	; (4bfc <OnRadioTxDone+0x68>)
    4bd2:	23d8      	movs	r3, #216	; 0xd8
    4bd4:	009b      	lsls	r3, r3, #2
    4bd6:	58d3      	ldr	r3, [r2, r3]
    4bd8:	68db      	ldr	r3, [r3, #12]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d005      	beq.n	4bea <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    4bde:	4a07      	ldr	r2, [pc, #28]	; (4bfc <OnRadioTxDone+0x68>)
    4be0:	23d8      	movs	r3, #216	; 0xd8
    4be2:	009b      	lsls	r3, r3, #2
    4be4:	58d3      	ldr	r3, [r2, r3]
    4be6:	68db      	ldr	r3, [r3, #12]
    4be8:	4798      	blx	r3
    }
}
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	46bd      	mov	sp, r7
    4bee:	b002      	add	sp, #8
    4bf0:	bdb0      	pop	{r4, r5, r7, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	000163e1 	.word	0x000163e1
    4bf8:	20001bd8 	.word	0x20001bd8
    4bfc:	20000b78 	.word	0x20000b78
    4c00:	00015eb5 	.word	0x00015eb5
    4c04:	2000129c 	.word	0x2000129c

00004c08 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    4c08:	b590      	push	{r4, r7, lr}
    4c0a:	b085      	sub	sp, #20
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	60f8      	str	r0, [r7, #12]
    4c10:	000c      	movs	r4, r1
    4c12:	0010      	movs	r0, r2
    4c14:	0019      	movs	r1, r3
    4c16:	230a      	movs	r3, #10
    4c18:	18fb      	adds	r3, r7, r3
    4c1a:	1c22      	adds	r2, r4, #0
    4c1c:	801a      	strh	r2, [r3, #0]
    4c1e:	2308      	movs	r3, #8
    4c20:	18fb      	adds	r3, r7, r3
    4c22:	1c02      	adds	r2, r0, #0
    4c24:	801a      	strh	r2, [r3, #0]
    4c26:	1dfb      	adds	r3, r7, #7
    4c28:	1c0a      	adds	r2, r1, #0
    4c2a:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
    4c2c:	4b18      	ldr	r3, [pc, #96]	; (4c90 <OnRadioRxDone+0x88>)
    4c2e:	4798      	blx	r3
    4c30:	0002      	movs	r2, r0
    4c32:	4b18      	ldr	r3, [pc, #96]	; (4c94 <OnRadioRxDone+0x8c>)
    4c34:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
    4c36:	4b17      	ldr	r3, [pc, #92]	; (4c94 <OnRadioRxDone+0x8c>)
    4c38:	68fa      	ldr	r2, [r7, #12]
    4c3a:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
    4c3c:	4b15      	ldr	r3, [pc, #84]	; (4c94 <OnRadioRxDone+0x8c>)
    4c3e:	220a      	movs	r2, #10
    4c40:	18ba      	adds	r2, r7, r2
    4c42:	8812      	ldrh	r2, [r2, #0]
    4c44:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
    4c46:	4b13      	ldr	r3, [pc, #76]	; (4c94 <OnRadioRxDone+0x8c>)
    4c48:	2208      	movs	r2, #8
    4c4a:	18ba      	adds	r2, r7, r2
    4c4c:	8812      	ldrh	r2, [r2, #0]
    4c4e:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
    4c50:	4b10      	ldr	r3, [pc, #64]	; (4c94 <OnRadioRxDone+0x8c>)
    4c52:	1dfa      	adds	r2, r7, #7
    4c54:	7812      	ldrb	r2, [r2, #0]
    4c56:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
    4c58:	4b0f      	ldr	r3, [pc, #60]	; (4c98 <OnRadioRxDone+0x90>)
    4c5a:	781a      	ldrb	r2, [r3, #0]
    4c5c:	2108      	movs	r1, #8
    4c5e:	430a      	orrs	r2, r1
    4c60:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    4c62:	4a0e      	ldr	r2, [pc, #56]	; (4c9c <OnRadioRxDone+0x94>)
    4c64:	23d8      	movs	r3, #216	; 0xd8
    4c66:	009b      	lsls	r3, r3, #2
    4c68:	58d3      	ldr	r3, [r2, r3]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d00c      	beq.n	4c88 <OnRadioRxDone+0x80>
    4c6e:	4a0b      	ldr	r2, [pc, #44]	; (4c9c <OnRadioRxDone+0x94>)
    4c70:	23d8      	movs	r3, #216	; 0xd8
    4c72:	009b      	lsls	r3, r3, #2
    4c74:	58d3      	ldr	r3, [r2, r3]
    4c76:	68db      	ldr	r3, [r3, #12]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d005      	beq.n	4c88 <OnRadioRxDone+0x80>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    4c7c:	4a07      	ldr	r2, [pc, #28]	; (4c9c <OnRadioRxDone+0x94>)
    4c7e:	23d8      	movs	r3, #216	; 0xd8
    4c80:	009b      	lsls	r3, r3, #2
    4c82:	58d3      	ldr	r3, [r2, r3]
    4c84:	68db      	ldr	r3, [r3, #12]
    4c86:	4798      	blx	r3
    }
}
    4c88:	46c0      	nop			; (mov r8, r8)
    4c8a:	46bd      	mov	sp, r7
    4c8c:	b005      	add	sp, #20
    4c8e:	bd90      	pop	{r4, r7, pc}
    4c90:	000163e1 	.word	0x000163e1
    4c94:	20001bdc 	.word	0x20001bdc
    4c98:	2000129c 	.word	0x2000129c
    4c9c:	20000b78 	.word	0x20000b78

00004ca0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
    4ca4:	4b0d      	ldr	r3, [pc, #52]	; (4cdc <OnRadioTxTimeout+0x3c>)
    4ca6:	781a      	ldrb	r2, [r3, #0]
    4ca8:	2104      	movs	r1, #4
    4caa:	430a      	orrs	r2, r1
    4cac:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    4cae:	4a0c      	ldr	r2, [pc, #48]	; (4ce0 <OnRadioTxTimeout+0x40>)
    4cb0:	23d8      	movs	r3, #216	; 0xd8
    4cb2:	009b      	lsls	r3, r3, #2
    4cb4:	58d3      	ldr	r3, [r2, r3]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d00c      	beq.n	4cd4 <OnRadioTxTimeout+0x34>
    4cba:	4a09      	ldr	r2, [pc, #36]	; (4ce0 <OnRadioTxTimeout+0x40>)
    4cbc:	23d8      	movs	r3, #216	; 0xd8
    4cbe:	009b      	lsls	r3, r3, #2
    4cc0:	58d3      	ldr	r3, [r2, r3]
    4cc2:	68db      	ldr	r3, [r3, #12]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d005      	beq.n	4cd4 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    4cc8:	4a05      	ldr	r2, [pc, #20]	; (4ce0 <OnRadioTxTimeout+0x40>)
    4cca:	23d8      	movs	r3, #216	; 0xd8
    4ccc:	009b      	lsls	r3, r3, #2
    4cce:	58d3      	ldr	r3, [r2, r3]
    4cd0:	68db      	ldr	r3, [r3, #12]
    4cd2:	4798      	blx	r3
    }
}
    4cd4:	46c0      	nop			; (mov r8, r8)
    4cd6:	46bd      	mov	sp, r7
    4cd8:	bd80      	pop	{r7, pc}
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	2000129c 	.word	0x2000129c
    4ce0:	20000b78 	.word	0x20000b78

00004ce4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    4ce4:	b580      	push	{r7, lr}
    4ce6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
    4ce8:	4b0d      	ldr	r3, [pc, #52]	; (4d20 <OnRadioRxError+0x3c>)
    4cea:	781a      	ldrb	r2, [r3, #0]
    4cec:	2102      	movs	r1, #2
    4cee:	430a      	orrs	r2, r1
    4cf0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    4cf2:	4a0c      	ldr	r2, [pc, #48]	; (4d24 <OnRadioRxError+0x40>)
    4cf4:	23d8      	movs	r3, #216	; 0xd8
    4cf6:	009b      	lsls	r3, r3, #2
    4cf8:	58d3      	ldr	r3, [r2, r3]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d00c      	beq.n	4d18 <OnRadioRxError+0x34>
    4cfe:	4a09      	ldr	r2, [pc, #36]	; (4d24 <OnRadioRxError+0x40>)
    4d00:	23d8      	movs	r3, #216	; 0xd8
    4d02:	009b      	lsls	r3, r3, #2
    4d04:	58d3      	ldr	r3, [r2, r3]
    4d06:	68db      	ldr	r3, [r3, #12]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d005      	beq.n	4d18 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    4d0c:	4a05      	ldr	r2, [pc, #20]	; (4d24 <OnRadioRxError+0x40>)
    4d0e:	23d8      	movs	r3, #216	; 0xd8
    4d10:	009b      	lsls	r3, r3, #2
    4d12:	58d3      	ldr	r3, [r2, r3]
    4d14:	68db      	ldr	r3, [r3, #12]
    4d16:	4798      	blx	r3
    }
}
    4d18:	46c0      	nop			; (mov r8, r8)
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bd80      	pop	{r7, pc}
    4d1e:	46c0      	nop			; (mov r8, r8)
    4d20:	2000129c 	.word	0x2000129c
    4d24:	20000b78 	.word	0x20000b78

00004d28 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
    4d2c:	4b0d      	ldr	r3, [pc, #52]	; (4d64 <OnRadioRxTimeout+0x3c>)
    4d2e:	781a      	ldrb	r2, [r3, #0]
    4d30:	2101      	movs	r1, #1
    4d32:	430a      	orrs	r2, r1
    4d34:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
    4d36:	4a0c      	ldr	r2, [pc, #48]	; (4d68 <OnRadioRxTimeout+0x40>)
    4d38:	23d8      	movs	r3, #216	; 0xd8
    4d3a:	009b      	lsls	r3, r3, #2
    4d3c:	58d3      	ldr	r3, [r2, r3]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d00c      	beq.n	4d5c <OnRadioRxTimeout+0x34>
    4d42:	4a09      	ldr	r2, [pc, #36]	; (4d68 <OnRadioRxTimeout+0x40>)
    4d44:	23d8      	movs	r3, #216	; 0xd8
    4d46:	009b      	lsls	r3, r3, #2
    4d48:	58d3      	ldr	r3, [r2, r3]
    4d4a:	68db      	ldr	r3, [r3, #12]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d005      	beq.n	4d5c <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
    4d50:	4a05      	ldr	r2, [pc, #20]	; (4d68 <OnRadioRxTimeout+0x40>)
    4d52:	23d8      	movs	r3, #216	; 0xd8
    4d54:	009b      	lsls	r3, r3, #2
    4d56:	58d3      	ldr	r3, [r2, r3]
    4d58:	68db      	ldr	r3, [r3, #12]
    4d5a:	4798      	blx	r3
    }
}
    4d5c:	46c0      	nop			; (mov r8, r8)
    4d5e:	46bd      	mov	sp, r7
    4d60:	bd80      	pop	{r7, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	2000129c 	.word	0x2000129c
    4d68:	20000b78 	.word	0x20000b78

00004d6c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
    4d6c:	b580      	push	{r7, lr}
    4d6e:	b084      	sub	sp, #16
    4d70:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    4d72:	4a64      	ldr	r2, [pc, #400]	; (4f04 <ProcessRadioTxDone+0x198>)
    4d74:	239c      	movs	r3, #156	; 0x9c
    4d76:	00db      	lsls	r3, r3, #3
    4d78:	58d3      	ldr	r3, [r2, r3]
    4d7a:	22c8      	movs	r2, #200	; 0xc8
    4d7c:	5c9b      	ldrb	r3, [r3, r2]
    4d7e:	2b02      	cmp	r3, #2
    4d80:	d003      	beq.n	4d8a <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
    4d82:	4b61      	ldr	r3, [pc, #388]	; (4f08 <ProcessRadioTxDone+0x19c>)
    4d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d86:	4798      	blx	r3
    4d88:	e001      	b.n	4d8e <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
    4d8a:	4b60      	ldr	r3, [pc, #384]	; (4f0c <ProcessRadioTxDone+0x1a0>)
    4d8c:	4798      	blx	r3
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
    4d8e:	4a5d      	ldr	r2, [pc, #372]	; (4f04 <ProcessRadioTxDone+0x198>)
    4d90:	23f2      	movs	r3, #242	; 0xf2
    4d92:	009b      	lsls	r3, r3, #2
    4d94:	58d2      	ldr	r2, [r2, r3]
    4d96:	4b5e      	ldr	r3, [pc, #376]	; (4f10 <ProcessRadioTxDone+0x1a4>)
    4d98:	0011      	movs	r1, r2
    4d9a:	0018      	movs	r0, r3
    4d9c:	4b5d      	ldr	r3, [pc, #372]	; (4f14 <ProcessRadioTxDone+0x1a8>)
    4d9e:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    4da0:	4b5b      	ldr	r3, [pc, #364]	; (4f10 <ProcessRadioTxDone+0x1a4>)
    4da2:	0018      	movs	r0, r3
    4da4:	4b5c      	ldr	r3, [pc, #368]	; (4f18 <ProcessRadioTxDone+0x1ac>)
    4da6:	4798      	blx	r3
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    4da8:	4a56      	ldr	r2, [pc, #344]	; (4f04 <ProcessRadioTxDone+0x198>)
    4daa:	239c      	movs	r3, #156	; 0x9c
    4dac:	00db      	lsls	r3, r3, #3
    4dae:	58d3      	ldr	r3, [r2, r3]
    4db0:	22c8      	movs	r2, #200	; 0xc8
    4db2:	5c9b      	ldrb	r3, [r3, r2]
    4db4:	2b02      	cmp	r3, #2
    4db6:	d00c      	beq.n	4dd2 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
    4db8:	4a52      	ldr	r2, [pc, #328]	; (4f04 <ProcessRadioTxDone+0x198>)
    4dba:	23f3      	movs	r3, #243	; 0xf3
    4dbc:	009b      	lsls	r3, r3, #2
    4dbe:	58d2      	ldr	r2, [r2, r3]
    4dc0:	4b56      	ldr	r3, [pc, #344]	; (4f1c <ProcessRadioTxDone+0x1b0>)
    4dc2:	0011      	movs	r1, r2
    4dc4:	0018      	movs	r0, r3
    4dc6:	4b53      	ldr	r3, [pc, #332]	; (4f14 <ProcessRadioTxDone+0x1a8>)
    4dc8:	4798      	blx	r3
        TimerStart( &MacCtx.RxWindowTimer2 );
    4dca:	4b54      	ldr	r3, [pc, #336]	; (4f1c <ProcessRadioTxDone+0x1b0>)
    4dcc:	0018      	movs	r0, r3
    4dce:	4b52      	ldr	r3, [pc, #328]	; (4f18 <ProcessRadioTxDone+0x1ac>)
    4dd0:	4798      	blx	r3
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
    4dd2:	4a4c      	ldr	r2, [pc, #304]	; (4f04 <ProcessRadioTxDone+0x198>)
    4dd4:	239c      	movs	r3, #156	; 0x9c
    4dd6:	00db      	lsls	r3, r3, #3
    4dd8:	58d3      	ldr	r3, [r2, r3]
    4dda:	22c8      	movs	r2, #200	; 0xc8
    4ddc:	5c9b      	ldrb	r3, [r3, r2]
    4dde:	2b02      	cmp	r3, #2
    4de0:	d007      	beq.n	4df2 <ProcessRadioTxDone+0x86>
    4de2:	4a48      	ldr	r2, [pc, #288]	; (4f04 <ProcessRadioTxDone+0x198>)
    4de4:	239c      	movs	r3, #156	; 0x9c
    4de6:	00db      	lsls	r3, r3, #3
    4de8:	58d3      	ldr	r3, [r2, r3]
    4dea:	4a4d      	ldr	r2, [pc, #308]	; (4f20 <ProcessRadioTxDone+0x1b4>)
    4dec:	5c9b      	ldrb	r3, [r3, r2]
    4dee:	2b00      	cmp	r3, #0
    4df0:	d024      	beq.n	4e3c <ProcessRadioTxDone+0xd0>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
    4df2:	230c      	movs	r3, #12
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	2215      	movs	r2, #21
    4df8:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    4dfa:	4a42      	ldr	r2, [pc, #264]	; (4f04 <ProcessRadioTxDone+0x198>)
    4dfc:	239c      	movs	r3, #156	; 0x9c
    4dfe:	00db      	lsls	r3, r3, #3
    4e00:	58d3      	ldr	r3, [r2, r3]
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	220c      	movs	r2, #12
    4e06:	18ba      	adds	r2, r7, r2
    4e08:	0011      	movs	r1, r2
    4e0a:	0018      	movs	r0, r3
    4e0c:	4b45      	ldr	r3, [pc, #276]	; (4f24 <ProcessRadioTxDone+0x1b8>)
    4e0e:	4798      	blx	r3
    4e10:	0003      	movs	r3, r0
    4e12:	001a      	movs	r2, r3
    4e14:	2308      	movs	r3, #8
    4e16:	18fb      	adds	r3, r7, r3
    4e18:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
    4e1a:	4a3a      	ldr	r2, [pc, #232]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e1c:	23f3      	movs	r3, #243	; 0xf3
    4e1e:	009b      	lsls	r3, r3, #2
    4e20:	58d2      	ldr	r2, [r2, r3]
    4e22:	2308      	movs	r3, #8
    4e24:	18fb      	adds	r3, r7, r3
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	18d2      	adds	r2, r2, r3
    4e2a:	4b3f      	ldr	r3, [pc, #252]	; (4f28 <ProcessRadioTxDone+0x1bc>)
    4e2c:	0011      	movs	r1, r2
    4e2e:	0018      	movs	r0, r3
    4e30:	4b38      	ldr	r3, [pc, #224]	; (4f14 <ProcessRadioTxDone+0x1a8>)
    4e32:	4798      	blx	r3
        TimerStart( &MacCtx.AckTimeoutTimer );
    4e34:	4b3c      	ldr	r3, [pc, #240]	; (4f28 <ProcessRadioTxDone+0x1bc>)
    4e36:	0018      	movs	r0, r3
    4e38:	4b37      	ldr	r3, [pc, #220]	; (4f18 <ProcessRadioTxDone+0x1ac>)
    4e3a:	4798      	blx	r3
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    4e3c:	4a31      	ldr	r2, [pc, #196]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e3e:	239c      	movs	r3, #156	; 0x9c
    4e40:	00db      	lsls	r3, r3, #3
    4e42:	58d2      	ldr	r2, [r2, r3]
    4e44:	492f      	ldr	r1, [pc, #188]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e46:	239c      	movs	r3, #156	; 0x9c
    4e48:	00db      	lsls	r3, r3, #3
    4e4a:	58c9      	ldr	r1, [r1, r3]
    4e4c:	2314      	movs	r3, #20
    4e4e:	33ff      	adds	r3, #255	; 0xff
    4e50:	5cc9      	ldrb	r1, [r1, r3]
    4e52:	238a      	movs	r3, #138	; 0x8a
    4e54:	005b      	lsls	r3, r3, #1
    4e56:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
    4e58:	4a2a      	ldr	r2, [pc, #168]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e5a:	239c      	movs	r3, #156	; 0x9c
    4e5c:	00db      	lsls	r3, r3, #3
    4e5e:	58d2      	ldr	r2, [r2, r3]
    4e60:	2314      	movs	r3, #20
    4e62:	33ff      	adds	r3, #255	; 0xff
    4e64:	5cd2      	ldrb	r2, [r2, r3]
    4e66:	003b      	movs	r3, r7
    4e68:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    4e6a:	4a26      	ldr	r2, [pc, #152]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e6c:	239c      	movs	r3, #156	; 0x9c
    4e6e:	00db      	lsls	r3, r3, #3
    4e70:	58d2      	ldr	r2, [r2, r3]
    4e72:	2388      	movs	r3, #136	; 0x88
    4e74:	009b      	lsls	r3, r3, #2
    4e76:	5cd3      	ldrb	r3, [r2, r3]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d103      	bne.n	4e84 <ProcessRadioTxDone+0x118>
    {
        txDone.Joined  = false;
    4e7c:	003b      	movs	r3, r7
    4e7e:	2200      	movs	r2, #0
    4e80:	705a      	strb	r2, [r3, #1]
    4e82:	e002      	b.n	4e8a <ProcessRadioTxDone+0x11e>
    }
    else
    {
        txDone.Joined  = true;
    4e84:	003b      	movs	r3, r7
    4e86:	2201      	movs	r2, #1
    4e88:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
    4e8a:	4b28      	ldr	r3, [pc, #160]	; (4f2c <ProcessRadioTxDone+0x1c0>)
    4e8c:	681a      	ldr	r2, [r3, #0]
    4e8e:	003b      	movs	r3, r7
    4e90:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
    4e92:	4a1c      	ldr	r2, [pc, #112]	; (4f04 <ProcessRadioTxDone+0x198>)
    4e94:	239c      	movs	r3, #156	; 0x9c
    4e96:	00db      	lsls	r3, r3, #3
    4e98:	58d3      	ldr	r3, [r2, r3]
    4e9a:	781b      	ldrb	r3, [r3, #0]
    4e9c:	003a      	movs	r2, r7
    4e9e:	0011      	movs	r1, r2
    4ea0:	0018      	movs	r0, r3
    4ea2:	4b23      	ldr	r3, [pc, #140]	; (4f30 <ProcessRadioTxDone+0x1c4>)
    4ea4:	4798      	blx	r3
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
    4ea6:	4b21      	ldr	r3, [pc, #132]	; (4f2c <ProcessRadioTxDone+0x1c0>)
    4ea8:	6819      	ldr	r1, [r3, #0]
    4eaa:	4a16      	ldr	r2, [pc, #88]	; (4f04 <ProcessRadioTxDone+0x198>)
    4eac:	23d0      	movs	r3, #208	; 0xd0
    4eae:	009b      	lsls	r3, r3, #2
    4eb0:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
    4eb2:	4a14      	ldr	r2, [pc, #80]	; (4f04 <ProcessRadioTxDone+0x198>)
    4eb4:	239c      	movs	r3, #156	; 0x9c
    4eb6:	00db      	lsls	r3, r3, #3
    4eb8:	58d3      	ldr	r3, [r2, r3]
    4eba:	4a19      	ldr	r2, [pc, #100]	; (4f20 <ProcessRadioTxDone+0x1b4>)
    4ebc:	5c9b      	ldrb	r3, [r3, r2]
    4ebe:	2201      	movs	r2, #1
    4ec0:	4053      	eors	r3, r2
    4ec2:	b2db      	uxtb	r3, r3
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d003      	beq.n	4ed0 <ProcessRadioTxDone+0x164>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    4ec8:	4b0e      	ldr	r3, [pc, #56]	; (4f04 <ProcessRadioTxDone+0x198>)
    4eca:	4a1a      	ldr	r2, [pc, #104]	; (4f34 <ProcessRadioTxDone+0x1c8>)
    4ecc:	2100      	movs	r1, #0
    4ece:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.NvmCtx->ChannelsNbTransCounter++;
    4ed0:	4a0c      	ldr	r2, [pc, #48]	; (4f04 <ProcessRadioTxDone+0x198>)
    4ed2:	239c      	movs	r3, #156	; 0x9c
    4ed4:	00db      	lsls	r3, r3, #3
    4ed6:	58d3      	ldr	r3, [r2, r3]
    4ed8:	2288      	movs	r2, #136	; 0x88
    4eda:	0052      	lsls	r2, r2, #1
    4edc:	5c9a      	ldrb	r2, [r3, r2]
    4ede:	3201      	adds	r2, #1
    4ee0:	b2d1      	uxtb	r1, r2
    4ee2:	2288      	movs	r2, #136	; 0x88
    4ee4:	0052      	lsls	r2, r2, #1
    4ee6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    4ee8:	4a06      	ldr	r2, [pc, #24]	; (4f04 <ProcessRadioTxDone+0x198>)
    4eea:	239c      	movs	r3, #156	; 0x9c
    4eec:	00db      	lsls	r3, r3, #3
    4eee:	58d2      	ldr	r2, [r2, r3]
    4ef0:	2388      	movs	r3, #136	; 0x88
    4ef2:	005b      	lsls	r3, r3, #1
    4ef4:	5cd1      	ldrb	r1, [r2, r3]
    4ef6:	4b03      	ldr	r3, [pc, #12]	; (4f04 <ProcessRadioTxDone+0x198>)
    4ef8:	4a0f      	ldr	r2, [pc, #60]	; (4f38 <ProcessRadioTxDone+0x1cc>)
    4efa:	5499      	strb	r1, [r3, r2]

}
    4efc:	46c0      	nop			; (mov r8, r8)
    4efe:	46bd      	mov	sp, r7
    4f00:	b004      	add	sp, #16
    4f02:	bd80      	pop	{r7, pc}
    4f04:	20000b78 	.word	0x20000b78
    4f08:	0001efe8 	.word	0x0001efe8
    4f0c:	000087d5 	.word	0x000087d5
    4f10:	20000f10 	.word	0x20000f10
    4f14:	00016389 	.word	0x00016389
    4f18:	00015fc1 	.word	0x00015fc1
    4f1c:	20000f28 	.word	0x20000f28
    4f20:	00000217 	.word	0x00000217
    4f24:	0000eff1 	.word	0x0000eff1
    4f28:	20000f70 	.word	0x20000f70
    4f2c:	20001bd8 	.word	0x20001bd8
    4f30:	0000f045 	.word	0x0000f045
    4f34:	00000431 	.word	0x00000431
    4f38:	00000435 	.word	0x00000435

00004f3c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
    4f40:	4a12      	ldr	r2, [pc, #72]	; (4f8c <PrepareRxDoneAbort+0x50>)
    4f42:	23d6      	movs	r3, #214	; 0xd6
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	58d3      	ldr	r3, [r2, r3]
    4f48:	2280      	movs	r2, #128	; 0x80
    4f4a:	431a      	orrs	r2, r3
    4f4c:	0011      	movs	r1, r2
    4f4e:	4a0f      	ldr	r2, [pc, #60]	; (4f8c <PrepareRxDoneAbort+0x50>)
    4f50:	23d6      	movs	r3, #214	; 0xd6
    4f52:	009b      	lsls	r3, r3, #2
    4f54:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
    4f56:	4a0d      	ldr	r2, [pc, #52]	; (4f8c <PrepareRxDoneAbort+0x50>)
    4f58:	239c      	movs	r3, #156	; 0x9c
    4f5a:	00db      	lsls	r3, r3, #3
    4f5c:	58d3      	ldr	r3, [r2, r3]
    4f5e:	4a0c      	ldr	r2, [pc, #48]	; (4f90 <PrepareRxDoneAbort+0x54>)
    4f60:	5c9b      	ldrb	r3, [r3, r2]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d002      	beq.n	4f6c <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
    4f66:	2000      	movs	r0, #0
    4f68:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <PrepareRxDoneAbort+0x58>)
    4f6a:	4798      	blx	r3
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
    4f6c:	4b07      	ldr	r3, [pc, #28]	; (4f8c <PrepareRxDoneAbort+0x50>)
    4f6e:	4a0a      	ldr	r2, [pc, #40]	; (4f98 <PrepareRxDoneAbort+0x5c>)
    4f70:	5c99      	ldrb	r1, [r3, r2]
    4f72:	2002      	movs	r0, #2
    4f74:	4301      	orrs	r1, r0
    4f76:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
    4f78:	4b04      	ldr	r3, [pc, #16]	; (4f8c <PrepareRxDoneAbort+0x50>)
    4f7a:	4a07      	ldr	r2, [pc, #28]	; (4f98 <PrepareRxDoneAbort+0x5c>)
    4f7c:	5c99      	ldrb	r1, [r3, r2]
    4f7e:	2010      	movs	r0, #16
    4f80:	4301      	orrs	r1, r0
    4f82:	5499      	strb	r1, [r3, r2]
}
    4f84:	46c0      	nop			; (mov r8, r8)
    4f86:	46bd      	mov	sp, r7
    4f88:	bd80      	pop	{r7, pc}
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	20000b78 	.word	0x20000b78
    4f90:	00000217 	.word	0x00000217
    4f94:	00006701 	.word	0x00006701
    4f98:	00000471 	.word	0x00000471

00004f9c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
    4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9e:	b0a7      	sub	sp, #156	; 0x9c
    4fa0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
    4fa2:	2380      	movs	r3, #128	; 0x80
    4fa4:	18fb      	adds	r3, r7, r3
    4fa6:	2210      	movs	r2, #16
    4fa8:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
    4faa:	4bd8      	ldr	r3, [pc, #864]	; (530c <ProcessRadioRxDone+0x370>)
    4fac:	685b      	ldr	r3, [r3, #4]
    4fae:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
    4fb0:	237a      	movs	r3, #122	; 0x7a
    4fb2:	18fb      	adds	r3, r7, r3
    4fb4:	4ad5      	ldr	r2, [pc, #852]	; (530c <ProcessRadioRxDone+0x370>)
    4fb6:	8912      	ldrh	r2, [r2, #8]
    4fb8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
    4fba:	2378      	movs	r3, #120	; 0x78
    4fbc:	18fb      	adds	r3, r7, r3
    4fbe:	4ad3      	ldr	r2, [pc, #844]	; (530c <ProcessRadioRxDone+0x370>)
    4fc0:	8952      	ldrh	r2, [r2, #10]
    4fc2:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
    4fc4:	2377      	movs	r3, #119	; 0x77
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	4ad0      	ldr	r2, [pc, #832]	; (530c <ProcessRadioRxDone+0x370>)
    4fca:	7b12      	ldrb	r2, [r2, #12]
    4fcc:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
    4fce:	2376      	movs	r3, #118	; 0x76
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	2200      	movs	r2, #0
    4fd4:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
    4fd6:	2300      	movs	r3, #0
    4fd8:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
    4fda:	4acd      	ldr	r2, [pc, #820]	; (5310 <ProcessRadioRxDone+0x374>)
    4fdc:	239c      	movs	r3, #156	; 0x9c
    4fde:	00db      	lsls	r3, r3, #3
    4fe0:	58d3      	ldr	r3, [r2, r3]
    4fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fe4:	2284      	movs	r2, #132	; 0x84
    4fe6:	18ba      	adds	r2, r7, r2
    4fe8:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
    4fea:	2383      	movs	r3, #131	; 0x83
    4fec:	18fb      	adds	r3, r7, r3
    4fee:	2200      	movs	r2, #0
    4ff0:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
    4ff2:	2382      	movs	r3, #130	; 0x82
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	2204      	movs	r2, #4
    4ff8:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;
    uint8_t macCmdPayload[2] = { 0 };
    4ffa:	1d3b      	adds	r3, r7, #4
    4ffc:	2200      	movs	r2, #0
    4ffe:	801a      	strh	r2, [r3, #0]

    MacCtx.McpsConfirm.AckReceived = false;
    5000:	4bc3      	ldr	r3, [pc, #780]	; (5310 <ProcessRadioRxDone+0x374>)
    5002:	4ac4      	ldr	r2, [pc, #784]	; (5314 <ProcessRadioRxDone+0x378>)
    5004:	2100      	movs	r1, #0
    5006:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Rssi = rssi;
    5008:	4bc1      	ldr	r3, [pc, #772]	; (5310 <ProcessRadioRxDone+0x374>)
    500a:	2278      	movs	r2, #120	; 0x78
    500c:	18ba      	adds	r2, r7, r2
    500e:	49c2      	ldr	r1, [pc, #776]	; (5318 <ProcessRadioRxDone+0x37c>)
    5010:	8812      	ldrh	r2, [r2, #0]
    5012:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
    5014:	4bbe      	ldr	r3, [pc, #760]	; (5310 <ProcessRadioRxDone+0x374>)
    5016:	2277      	movs	r2, #119	; 0x77
    5018:	18ba      	adds	r2, r7, r2
    501a:	49c0      	ldr	r1, [pc, #768]	; (531c <ProcessRadioRxDone+0x380>)
    501c:	7812      	ldrb	r2, [r2, #0]
    501e:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
    5020:	4abb      	ldr	r2, [pc, #748]	; (5310 <ProcessRadioRxDone+0x374>)
    5022:	238e      	movs	r3, #142	; 0x8e
    5024:	00db      	lsls	r3, r3, #3
    5026:	5cd1      	ldrb	r1, [r2, r3]
    5028:	4bb9      	ldr	r3, [pc, #740]	; (5310 <ProcessRadioRxDone+0x374>)
    502a:	4abd      	ldr	r2, [pc, #756]	; (5320 <ProcessRadioRxDone+0x384>)
    502c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
    502e:	4bb8      	ldr	r3, [pc, #736]	; (5310 <ProcessRadioRxDone+0x374>)
    5030:	4abc      	ldr	r2, [pc, #752]	; (5324 <ProcessRadioRxDone+0x388>)
    5032:	2100      	movs	r1, #0
    5034:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
    5036:	4bb6      	ldr	r3, [pc, #728]	; (5310 <ProcessRadioRxDone+0x374>)
    5038:	4abb      	ldr	r2, [pc, #748]	; (5328 <ProcessRadioRxDone+0x38c>)
    503a:	2100      	movs	r1, #0
    503c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
    503e:	4bb4      	ldr	r3, [pc, #720]	; (5310 <ProcessRadioRxDone+0x374>)
    5040:	4aba      	ldr	r2, [pc, #744]	; (532c <ProcessRadioRxDone+0x390>)
    5042:	2100      	movs	r1, #0
    5044:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
    5046:	4bb2      	ldr	r3, [pc, #712]	; (5310 <ProcessRadioRxDone+0x374>)
    5048:	4ab9      	ldr	r2, [pc, #740]	; (5330 <ProcessRadioRxDone+0x394>)
    504a:	2100      	movs	r1, #0
    504c:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
    504e:	4ab0      	ldr	r2, [pc, #704]	; (5310 <ProcessRadioRxDone+0x374>)
    5050:	2384      	movs	r3, #132	; 0x84
    5052:	00db      	lsls	r3, r3, #3
    5054:	2100      	movs	r1, #0
    5056:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
    5058:	4bad      	ldr	r3, [pc, #692]	; (5310 <ProcessRadioRxDone+0x374>)
    505a:	4ab6      	ldr	r2, [pc, #728]	; (5334 <ProcessRadioRxDone+0x398>)
    505c:	2100      	movs	r1, #0
    505e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
    5060:	4bab      	ldr	r3, [pc, #684]	; (5310 <ProcessRadioRxDone+0x374>)
    5062:	4ab5      	ldr	r2, [pc, #724]	; (5338 <ProcessRadioRxDone+0x39c>)
    5064:	2100      	movs	r1, #0
    5066:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
    5068:	4aa9      	ldr	r2, [pc, #676]	; (5310 <ProcessRadioRxDone+0x374>)
    506a:	2385      	movs	r3, #133	; 0x85
    506c:	00db      	lsls	r3, r3, #3
    506e:	2100      	movs	r1, #0
    5070:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    5072:	4ba7      	ldr	r3, [pc, #668]	; (5310 <ProcessRadioRxDone+0x374>)
    5074:	4ab1      	ldr	r2, [pc, #708]	; (533c <ProcessRadioRxDone+0x3a0>)
    5076:	2100      	movs	r1, #0
    5078:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
    507a:	4ba5      	ldr	r3, [pc, #660]	; (5310 <ProcessRadioRxDone+0x374>)
    507c:	4ab0      	ldr	r2, [pc, #704]	; (5340 <ProcessRadioRxDone+0x3a4>)
    507e:	2100      	movs	r1, #0
    5080:	5099      	str	r1, [r3, r2]

    Radio.Sleep( );
    5082:	4bb0      	ldr	r3, [pc, #704]	; (5344 <ProcessRadioRxDone+0x3a8>)
    5084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5086:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
    5088:	4baf      	ldr	r3, [pc, #700]	; (5348 <ProcessRadioRxDone+0x3ac>)
    508a:	0018      	movs	r0, r3
    508c:	4baf      	ldr	r3, [pc, #700]	; (534c <ProcessRadioRxDone+0x3b0>)
    508e:	4798      	blx	r3

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
    5090:	237a      	movs	r3, #122	; 0x7a
    5092:	18fb      	adds	r3, r7, r3
    5094:	881a      	ldrh	r2, [r3, #0]
    5096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5098:	0011      	movs	r1, r2
    509a:	0018      	movs	r0, r3
    509c:	4bac      	ldr	r3, [pc, #688]	; (5350 <ProcessRadioRxDone+0x3b4>)
    509e:	4798      	blx	r3
    50a0:	1e03      	subs	r3, r0, #0
    50a2:	d00e      	beq.n	50c2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
    50a4:	4b9a      	ldr	r3, [pc, #616]	; (5310 <ProcessRadioRxDone+0x374>)
    50a6:	2278      	movs	r2, #120	; 0x78
    50a8:	18ba      	adds	r2, r7, r2
    50aa:	49aa      	ldr	r1, [pc, #680]	; (5354 <ProcessRadioRxDone+0x3b8>)
    50ac:	8812      	ldrh	r2, [r2, #0]
    50ae:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
    50b0:	4a97      	ldr	r2, [pc, #604]	; (5310 <ProcessRadioRxDone+0x374>)
    50b2:	2377      	movs	r3, #119	; 0x77
    50b4:	18f9      	adds	r1, r7, r3
    50b6:	238d      	movs	r3, #141	; 0x8d
    50b8:	00db      	lsls	r3, r3, #3
    50ba:	7809      	ldrb	r1, [r1, #0]
    50bc:	54d1      	strb	r1, [r2, r3]
        return;
    50be:	f000 fd7a 	bl	5bb6 <ProcessRadioRxDone+0xc1a>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    50c2:	4a93      	ldr	r2, [pc, #588]	; (5310 <ProcessRadioRxDone+0x374>)
    50c4:	239c      	movs	r3, #156	; 0x9c
    50c6:	00db      	lsls	r3, r3, #3
    50c8:	58d3      	ldr	r3, [r2, r3]
    50ca:	22c8      	movs	r2, #200	; 0xc8
    50cc:	5c9b      	ldrb	r3, [r3, r2]
    50ce:	2b01      	cmp	r3, #1
    50d0:	d11c      	bne.n	510c <ProcessRadioRxDone+0x170>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    50d2:	4ba1      	ldr	r3, [pc, #644]	; (5358 <ProcessRadioRxDone+0x3bc>)
    50d4:	4798      	blx	r3
    50d6:	1e03      	subs	r3, r0, #0
    50d8:	d00a      	beq.n	50f0 <ProcessRadioRxDone+0x154>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    50da:	2000      	movs	r0, #0
    50dc:	4b9f      	ldr	r3, [pc, #636]	; (535c <ProcessRadioRxDone+0x3c0>)
    50de:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( NULL );
    50e0:	2000      	movs	r0, #0
    50e2:	4b9f      	ldr	r3, [pc, #636]	; (5360 <ProcessRadioRxDone+0x3c4>)
    50e4:	4798      	blx	r3
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
    50e6:	4b8a      	ldr	r3, [pc, #552]	; (5310 <ProcessRadioRxDone+0x374>)
    50e8:	4a8d      	ldr	r2, [pc, #564]	; (5320 <ProcessRadioRxDone+0x384>)
    50ea:	2103      	movs	r1, #3
    50ec:	5499      	strb	r1, [r3, r2]
    50ee:	e00d      	b.n	510c <ProcessRadioRxDone+0x170>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    50f0:	4b9c      	ldr	r3, [pc, #624]	; (5364 <ProcessRadioRxDone+0x3c8>)
    50f2:	4798      	blx	r3
    50f4:	1e03      	subs	r3, r0, #0
    50f6:	d009      	beq.n	510c <ProcessRadioRxDone+0x170>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    50f8:	2000      	movs	r0, #0
    50fa:	4b9b      	ldr	r3, [pc, #620]	; (5368 <ProcessRadioRxDone+0x3cc>)
    50fc:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
    50fe:	2000      	movs	r0, #0
    5100:	4b9a      	ldr	r3, [pc, #616]	; (536c <ProcessRadioRxDone+0x3d0>)
    5102:	4798      	blx	r3
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
    5104:	4b82      	ldr	r3, [pc, #520]	; (5310 <ProcessRadioRxDone+0x374>)
    5106:	4a86      	ldr	r2, [pc, #536]	; (5320 <ProcessRadioRxDone+0x384>)
    5108:	2104      	movs	r1, #4
    510a:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
    510c:	2376      	movs	r3, #118	; 0x76
    510e:	18fb      	adds	r3, r7, r3
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	2276      	movs	r2, #118	; 0x76
    5114:	18ba      	adds	r2, r7, r2
    5116:	1c59      	adds	r1, r3, #1
    5118:	7011      	strb	r1, [r2, #0]
    511a:	001a      	movs	r2, r3
    511c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    511e:	189b      	adds	r3, r3, r2
    5120:	781a      	ldrb	r2, [r3, #0]
    5122:	2374      	movs	r3, #116	; 0x74
    5124:	18fb      	adds	r3, r7, r3
    5126:	701a      	strb	r2, [r3, #0]

    // Accept frames of LoRaWAN Major Version 1 only
    if( macHdr.Bits.Major != 0 )
    5128:	2374      	movs	r3, #116	; 0x74
    512a:	18fb      	adds	r3, r7, r3
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2203      	movs	r2, #3
    5130:	4013      	ands	r3, r2
    5132:	b2db      	uxtb	r3, r3
    5134:	2b00      	cmp	r3, #0
    5136:	d007      	beq.n	5148 <ProcessRadioRxDone+0x1ac>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    5138:	4b75      	ldr	r3, [pc, #468]	; (5310 <ProcessRadioRxDone+0x374>)
    513a:	4a8d      	ldr	r2, [pc, #564]	; (5370 <ProcessRadioRxDone+0x3d4>)
    513c:	2101      	movs	r1, #1
    513e:	5499      	strb	r1, [r3, r2]
        PrepareRxDoneAbort( );
    5140:	4b8c      	ldr	r3, [pc, #560]	; (5374 <ProcessRadioRxDone+0x3d8>)
    5142:	4798      	blx	r3
        return;
    5144:	f000 fd37 	bl	5bb6 <ProcessRadioRxDone+0xc1a>
    }

    switch( macHdr.Bits.MType )
    5148:	2374      	movs	r3, #116	; 0x74
    514a:	18fb      	adds	r3, r7, r3
    514c:	781b      	ldrb	r3, [r3, #0]
    514e:	061b      	lsls	r3, r3, #24
    5150:	0f5b      	lsrs	r3, r3, #29
    5152:	b2db      	uxtb	r3, r3
    5154:	2b03      	cmp	r3, #3
    5156:	d100      	bne.n	515a <ProcessRadioRxDone+0x1be>
    5158:	e187      	b.n	546a <ProcessRadioRxDone+0x4ce>
    515a:	dc03      	bgt.n	5164 <ProcessRadioRxDone+0x1c8>
    515c:	2b01      	cmp	r3, #1
    515e:	d00a      	beq.n	5176 <ProcessRadioRxDone+0x1da>
    5160:	f000 fcfc 	bl	5b5c <ProcessRadioRxDone+0xbc0>
    5164:	2b05      	cmp	r3, #5
    5166:	d100      	bne.n	516a <ProcessRadioRxDone+0x1ce>
    5168:	e17b      	b.n	5462 <ProcessRadioRxDone+0x4c6>
    516a:	2b07      	cmp	r3, #7
    516c:	d101      	bne.n	5172 <ProcessRadioRxDone+0x1d6>
    516e:	f000 fcc9 	bl	5b04 <ProcessRadioRxDone+0xb68>
    5172:	f000 fcf3 	bl	5b5c <ProcessRadioRxDone+0xbc0>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
    5176:	230c      	movs	r3, #12
    5178:	18fb      	adds	r3, r7, r3
    517a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    517c:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
    517e:	237a      	movs	r3, #122	; 0x7a
    5180:	18fb      	adds	r3, r7, r3
    5182:	881b      	ldrh	r3, [r3, #0]
    5184:	b2da      	uxtb	r2, r3
    5186:	230c      	movs	r3, #12
    5188:	18fb      	adds	r3, r7, r3
    518a:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) && ( MacCtx.NvmCtx->IsRejoinRequestPending == false ) )
    518c:	4a60      	ldr	r2, [pc, #384]	; (5310 <ProcessRadioRxDone+0x374>)
    518e:	239c      	movs	r3, #156	; 0x9c
    5190:	00db      	lsls	r3, r3, #3
    5192:	58d2      	ldr	r2, [r2, r3]
    5194:	2388      	movs	r3, #136	; 0x88
    5196:	009b      	lsls	r3, r3, #2
    5198:	5cd3      	ldrb	r3, [r2, r3]
    519a:	2b00      	cmp	r3, #0
    519c:	d013      	beq.n	51c6 <ProcessRadioRxDone+0x22a>
    519e:	4a5c      	ldr	r2, [pc, #368]	; (5310 <ProcessRadioRxDone+0x374>)
    51a0:	239c      	movs	r3, #156	; 0x9c
    51a2:	00db      	lsls	r3, r3, #3
    51a4:	58d2      	ldr	r2, [r2, r3]
    51a6:	238e      	movs	r3, #142	; 0x8e
    51a8:	009b      	lsls	r3, r3, #2
    51aa:	5cd3      	ldrb	r3, [r2, r3]
    51ac:	2201      	movs	r2, #1
    51ae:	4053      	eors	r3, r2
    51b0:	b2db      	uxtb	r3, r3
    51b2:	2b00      	cmp	r3, #0
    51b4:	d007      	beq.n	51c6 <ProcessRadioRxDone+0x22a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    51b6:	4b56      	ldr	r3, [pc, #344]	; (5310 <ProcessRadioRxDone+0x374>)
    51b8:	4a6d      	ldr	r2, [pc, #436]	; (5370 <ProcessRadioRxDone+0x3d4>)
    51ba:	2101      	movs	r1, #1
    51bc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    51be:	4b6d      	ldr	r3, [pc, #436]	; (5374 <ProcessRadioRxDone+0x3d8>)
    51c0:	4798      	blx	r3
                return;
    51c2:	f000 fcf8 	bl	5bb6 <ProcessRadioRxDone+0xc1a>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
    51c6:	4b52      	ldr	r3, [pc, #328]	; (5310 <ProcessRadioRxDone+0x374>)
    51c8:	685b      	ldr	r3, [r3, #4]
    51ca:	2280      	movs	r2, #128	; 0x80
    51cc:	18bc      	adds	r4, r7, r2
    51ce:	220c      	movs	r2, #12
    51d0:	18ba      	adds	r2, r7, r2
    51d2:	0019      	movs	r1, r3
    51d4:	20ff      	movs	r0, #255	; 0xff
    51d6:	4b68      	ldr	r3, [pc, #416]	; (5378 <ProcessRadioRxDone+0x3dc>)
    51d8:	4798      	blx	r3
    51da:	0003      	movs	r3, r0
    51dc:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
    51de:	2380      	movs	r3, #128	; 0x80
    51e0:	18fb      	adds	r3, r7, r3
    51e2:	781b      	ldrb	r3, [r3, #0]
    51e4:	2b00      	cmp	r3, #0
    51e6:	d000      	beq.n	51ea <ProcessRadioRxDone+0x24e>
    51e8:	e130      	b.n	544c <ProcessRadioRxDone+0x4b0>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
    51ea:	4a49      	ldr	r2, [pc, #292]	; (5310 <ProcessRadioRxDone+0x374>)
    51ec:	239c      	movs	r3, #156	; 0x9c
    51ee:	00db      	lsls	r3, r3, #3
    51f0:	58d3      	ldr	r3, [r2, r3]
    51f2:	220c      	movs	r2, #12
    51f4:	18ba      	adds	r2, r7, r2
    51f6:	7a52      	ldrb	r2, [r2, #9]
    51f8:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
    51fa:	4a45      	ldr	r2, [pc, #276]	; (5310 <ProcessRadioRxDone+0x374>)
    51fc:	239c      	movs	r3, #156	; 0x9c
    51fe:	00db      	lsls	r3, r3, #3
    5200:	58d3      	ldr	r3, [r2, r3]
    5202:	4943      	ldr	r1, [pc, #268]	; (5310 <ProcessRadioRxDone+0x374>)
    5204:	229c      	movs	r2, #156	; 0x9c
    5206:	00d2      	lsls	r2, r2, #3
    5208:	588a      	ldr	r2, [r1, r2]
    520a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    520c:	220c      	movs	r2, #12
    520e:	18ba      	adds	r2, r7, r2
    5210:	7a92      	ldrb	r2, [r2, #10]
    5212:	0212      	lsls	r2, r2, #8
    5214:	430a      	orrs	r2, r1
    5216:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
    5218:	4a3d      	ldr	r2, [pc, #244]	; (5310 <ProcessRadioRxDone+0x374>)
    521a:	239c      	movs	r3, #156	; 0x9c
    521c:	00db      	lsls	r3, r3, #3
    521e:	58d3      	ldr	r3, [r2, r3]
    5220:	493b      	ldr	r1, [pc, #236]	; (5310 <ProcessRadioRxDone+0x374>)
    5222:	229c      	movs	r2, #156	; 0x9c
    5224:	00d2      	lsls	r2, r2, #3
    5226:	588a      	ldr	r2, [r1, r2]
    5228:	6c11      	ldr	r1, [r2, #64]	; 0x40
    522a:	220c      	movs	r2, #12
    522c:	18ba      	adds	r2, r7, r2
    522e:	7ad2      	ldrb	r2, [r2, #11]
    5230:	0412      	lsls	r2, r2, #16
    5232:	430a      	orrs	r2, r1
    5234:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
    5236:	4a36      	ldr	r2, [pc, #216]	; (5310 <ProcessRadioRxDone+0x374>)
    5238:	239c      	movs	r3, #156	; 0x9c
    523a:	00db      	lsls	r3, r3, #3
    523c:	58d3      	ldr	r3, [r2, r3]
    523e:	220c      	movs	r2, #12
    5240:	18ba      	adds	r2, r7, r2
    5242:	68d2      	ldr	r2, [r2, #12]
    5244:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
    5246:	4a32      	ldr	r2, [pc, #200]	; (5310 <ProcessRadioRxDone+0x374>)
    5248:	239c      	movs	r3, #156	; 0x9c
    524a:	00db      	lsls	r3, r3, #3
    524c:	58d3      	ldr	r3, [r2, r3]
    524e:	220c      	movs	r2, #12
    5250:	18ba      	adds	r2, r7, r2
    5252:	7c12      	ldrb	r2, [r2, #16]
    5254:	0652      	lsls	r2, r2, #25
    5256:	0f52      	lsrs	r2, r2, #29
    5258:	b2d2      	uxtb	r2, r2
    525a:	0011      	movs	r1, r2
    525c:	22f5      	movs	r2, #245	; 0xf5
    525e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
    5260:	4a2b      	ldr	r2, [pc, #172]	; (5310 <ProcessRadioRxDone+0x374>)
    5262:	239c      	movs	r3, #156	; 0x9c
    5264:	00db      	lsls	r3, r3, #3
    5266:	58d3      	ldr	r3, [r2, r3]
    5268:	220c      	movs	r2, #12
    526a:	18ba      	adds	r2, r7, r2
    526c:	7c12      	ldrb	r2, [r2, #16]
    526e:	0712      	lsls	r2, r2, #28
    5270:	0f12      	lsrs	r2, r2, #28
    5272:	b2d2      	uxtb	r2, r2
    5274:	0011      	movs	r1, r2
    5276:	22fc      	movs	r2, #252	; 0xfc
    5278:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
    527a:	4a25      	ldr	r2, [pc, #148]	; (5310 <ProcessRadioRxDone+0x374>)
    527c:	239c      	movs	r3, #156	; 0x9c
    527e:	00db      	lsls	r3, r3, #3
    5280:	58d3      	ldr	r3, [r2, r3]
    5282:	220c      	movs	r2, #12
    5284:	18ba      	adds	r2, r7, r2
    5286:	7c52      	ldrb	r2, [r2, #17]
    5288:	0011      	movs	r1, r2
    528a:	22e4      	movs	r2, #228	; 0xe4
    528c:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
    528e:	4a20      	ldr	r2, [pc, #128]	; (5310 <ProcessRadioRxDone+0x374>)
    5290:	239c      	movs	r3, #156	; 0x9c
    5292:	00db      	lsls	r3, r3, #3
    5294:	58d3      	ldr	r3, [r2, r3]
    5296:	22e4      	movs	r2, #228	; 0xe4
    5298:	589b      	ldr	r3, [r3, r2]
    529a:	2b00      	cmp	r3, #0
    529c:	d106      	bne.n	52ac <ProcessRadioRxDone+0x310>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
    529e:	4a1c      	ldr	r2, [pc, #112]	; (5310 <ProcessRadioRxDone+0x374>)
    52a0:	239c      	movs	r3, #156	; 0x9c
    52a2:	00db      	lsls	r3, r3, #3
    52a4:	58d3      	ldr	r3, [r2, r3]
    52a6:	22e4      	movs	r2, #228	; 0xe4
    52a8:	2101      	movs	r1, #1
    52aa:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
    52ac:	4a18      	ldr	r2, [pc, #96]	; (5310 <ProcessRadioRxDone+0x374>)
    52ae:	239c      	movs	r3, #156	; 0x9c
    52b0:	00db      	lsls	r3, r3, #3
    52b2:	58d3      	ldr	r3, [r2, r3]
    52b4:	4916      	ldr	r1, [pc, #88]	; (5310 <ProcessRadioRxDone+0x374>)
    52b6:	229c      	movs	r2, #156	; 0x9c
    52b8:	00d2      	lsls	r2, r2, #3
    52ba:	588a      	ldr	r2, [r1, r2]
    52bc:	21e4      	movs	r1, #228	; 0xe4
    52be:	5852      	ldr	r2, [r2, r1]
    52c0:	21fa      	movs	r1, #250	; 0xfa
    52c2:	0089      	lsls	r1, r1, #2
    52c4:	434a      	muls	r2, r1
    52c6:	21e4      	movs	r1, #228	; 0xe4
    52c8:	505a      	str	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    52ca:	4a11      	ldr	r2, [pc, #68]	; (5310 <ProcessRadioRxDone+0x374>)
    52cc:	239c      	movs	r3, #156	; 0x9c
    52ce:	00db      	lsls	r3, r3, #3
    52d0:	58d3      	ldr	r3, [r2, r3]
    52d2:	490f      	ldr	r1, [pc, #60]	; (5310 <ProcessRadioRxDone+0x374>)
    52d4:	229c      	movs	r2, #156	; 0x9c
    52d6:	00d2      	lsls	r2, r2, #3
    52d8:	588a      	ldr	r2, [r1, r2]
    52da:	21e4      	movs	r1, #228	; 0xe4
    52dc:	5852      	ldr	r2, [r2, r1]
    52de:	21fa      	movs	r1, #250	; 0xfa
    52e0:	0089      	lsls	r1, r1, #2
    52e2:	468c      	mov	ip, r1
    52e4:	4462      	add	r2, ip
    52e6:	21e8      	movs	r1, #232	; 0xe8
    52e8:	505a      	str	r2, [r3, r1]

                // Is Networkserver's LoRaWAN Version before 1.1.0 ?
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
    52ea:	230c      	movs	r3, #12
    52ec:	18fb      	adds	r3, r7, r3
    52ee:	7c1b      	ldrb	r3, [r3, #16]
    52f0:	227f      	movs	r2, #127	; 0x7f
    52f2:	4393      	bics	r3, r2
    52f4:	b2db      	uxtb	r3, r3
    52f6:	2b00      	cmp	r3, #0
    52f8:	d142      	bne.n	5380 <ProcessRadioRxDone+0x3e4>
                {
                    MacCtx.NvmCtx->Version.Fields.Minor = 0;
    52fa:	4a05      	ldr	r2, [pc, #20]	; (5310 <ProcessRadioRxDone+0x374>)
    52fc:	239c      	movs	r3, #156	; 0x9c
    52fe:	00db      	lsls	r3, r3, #3
    5300:	58d3      	ldr	r3, [r2, r3]
    5302:	4a1e      	ldr	r2, [pc, #120]	; (537c <ProcessRadioRxDone+0x3e0>)
    5304:	2100      	movs	r1, #0
    5306:	5499      	strb	r1, [r3, r2]
    5308:	e041      	b.n	538e <ProcessRadioRxDone+0x3f2>
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	20001bdc 	.word	0x20001bdc
    5310:	20000b78 	.word	0x20000b78
    5314:	00000434 	.word	0x00000434
    5318:	00000422 	.word	0x00000422
    531c:	00000424 	.word	0x00000424
    5320:	00000425 	.word	0x00000425
    5324:	00000417 	.word	0x00000417
    5328:	00000416 	.word	0x00000416
    532c:	00000419 	.word	0x00000419
    5330:	0000041c 	.word	0x0000041c
    5334:	00000421 	.word	0x00000421
    5338:	00000426 	.word	0x00000426
    533c:	00000414 	.word	0x00000414
    5340:	0000042c 	.word	0x0000042c
    5344:	0001efe8 	.word	0x0001efe8
    5348:	20000f28 	.word	0x20000f28
    534c:	0001624d 	.word	0x0001624d
    5350:	0000b8a3 	.word	0x0000b8a3
    5354:	00000466 	.word	0x00000466
    5358:	0000b8c7 	.word	0x0000b8c7
    535c:	0000b83f 	.word	0x0000b83f
    5360:	0000b883 	.word	0x0000b883
    5364:	0000b8d3 	.word	0x0000b8d3
    5368:	0000b853 	.word	0x0000b853
    536c:	0000b893 	.word	0x0000b893
    5370:	00000415 	.word	0x00000415
    5374:	00004f3d 	.word	0x00004f3d
    5378:	0000d6e1 	.word	0x0000d6e1
    537c:	0000021e 	.word	0x0000021e
                }
                else
                {
                    MacCtx.NvmCtx->Version.Fields.Minor = 1;
    5380:	4ae2      	ldr	r2, [pc, #904]	; (570c <ProcessRadioRxDone+0x770>)
    5382:	239c      	movs	r3, #156	; 0x9c
    5384:	00db      	lsls	r3, r3, #3
    5386:	58d3      	ldr	r3, [r2, r3]
    5388:	4ae1      	ldr	r2, [pc, #900]	; (5710 <ProcessRadioRxDone+0x774>)
    538a:	2101      	movs	r1, #1
    538c:	5499      	strb	r1, [r3, r2]
                }

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
    538e:	236c      	movs	r3, #108	; 0x6c
    5390:	18fb      	adds	r3, r7, r3
    5392:	220c      	movs	r2, #12
    5394:	18ba      	adds	r2, r7, r2
    5396:	3212      	adds	r2, #18
    5398:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
    539a:	237a      	movs	r3, #122	; 0x7a
    539c:	18fb      	adds	r3, r7, r3
    539e:	881b      	ldrh	r3, [r3, #0]
    53a0:	b2db      	uxtb	r3, r3
    53a2:	3b11      	subs	r3, #17
    53a4:	b2da      	uxtb	r2, r3
    53a6:	236c      	movs	r3, #108	; 0x6c
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
    53ac:	4ad7      	ldr	r2, [pc, #860]	; (570c <ProcessRadioRxDone+0x770>)
    53ae:	239c      	movs	r3, #156	; 0x9c
    53b0:	00db      	lsls	r3, r3, #3
    53b2:	58d3      	ldr	r3, [r2, r3]
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	226c      	movs	r2, #108	; 0x6c
    53b8:	18ba      	adds	r2, r7, r2
    53ba:	0011      	movs	r1, r2
    53bc:	0018      	movs	r0, r3
    53be:	4bd5      	ldr	r3, [pc, #852]	; (5714 <ProcessRadioRxDone+0x778>)
    53c0:	4798      	blx	r3

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
    53c2:	4ad2      	ldr	r2, [pc, #840]	; (570c <ProcessRadioRxDone+0x770>)
    53c4:	239c      	movs	r3, #156	; 0x9c
    53c6:	00db      	lsls	r3, r3, #3
    53c8:	58d2      	ldr	r2, [r2, r3]
    53ca:	2388      	movs	r3, #136	; 0x88
    53cc:	009b      	lsls	r3, r3, #2
    53ce:	2102      	movs	r1, #2
    53d0:	54d1      	strb	r1, [r2, r3]

                // Add a RekeyInd MAC command to confirm the security key update.
                if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    53d2:	4ace      	ldr	r2, [pc, #824]	; (570c <ProcessRadioRxDone+0x770>)
    53d4:	239c      	movs	r3, #156	; 0x9c
    53d6:	00db      	lsls	r3, r3, #3
    53d8:	58d3      	ldr	r3, [r2, r3]
    53da:	4acd      	ldr	r2, [pc, #820]	; (5710 <ProcessRadioRxDone+0x774>)
    53dc:	5c9b      	ldrb	r3, [r3, r2]
    53de:	2b00      	cmp	r3, #0
    53e0:	d014      	beq.n	540c <ProcessRadioRxDone+0x470>
                {
                    MacCtx.NvmCtx->RekeyIndUplinksCounter = 0;
    53e2:	4aca      	ldr	r2, [pc, #808]	; (570c <ProcessRadioRxDone+0x770>)
    53e4:	239c      	movs	r3, #156	; 0x9c
    53e6:	00db      	lsls	r3, r3, #3
    53e8:	58d3      	ldr	r3, [r2, r3]
    53ea:	4acb      	ldr	r2, [pc, #812]	; (5718 <ProcessRadioRxDone+0x77c>)
    53ec:	2100      	movs	r1, #0
    53ee:	5299      	strh	r1, [r3, r2]
                    macCmdPayload[0] = MacCtx.NvmCtx->Version.Fields.Minor;
    53f0:	4ac6      	ldr	r2, [pc, #792]	; (570c <ProcessRadioRxDone+0x770>)
    53f2:	239c      	movs	r3, #156	; 0x9c
    53f4:	00db      	lsls	r3, r3, #3
    53f6:	58d3      	ldr	r3, [r2, r3]
    53f8:	4ac5      	ldr	r2, [pc, #788]	; (5710 <ProcessRadioRxDone+0x774>)
    53fa:	5c9a      	ldrb	r2, [r3, r2]
    53fc:	1d3b      	adds	r3, r7, #4
    53fe:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
    5400:	1d3b      	adds	r3, r7, #4
    5402:	2201      	movs	r2, #1
    5404:	0019      	movs	r1, r3
    5406:	200b      	movs	r0, #11
    5408:	4bc4      	ldr	r3, [pc, #784]	; (571c <ProcessRadioRxDone+0x780>)
    540a:	4798      	blx	r3
                }

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    540c:	2000      	movs	r0, #0
    540e:	4bc4      	ldr	r3, [pc, #784]	; (5720 <ProcessRadioRxDone+0x784>)
    5410:	4798      	blx	r3
    5412:	1e03      	subs	r3, r0, #0
    5414:	d003      	beq.n	541e <ProcessRadioRxDone+0x482>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
    5416:	2100      	movs	r1, #0
    5418:	2000      	movs	r0, #0
    541a:	4bc2      	ldr	r3, [pc, #776]	; (5724 <ProcessRadioRxDone+0x788>)
    541c:	4798      	blx	r3
                }

                // Rejoin handling
                if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    541e:	4abb      	ldr	r2, [pc, #748]	; (570c <ProcessRadioRxDone+0x770>)
    5420:	239c      	movs	r3, #156	; 0x9c
    5422:	00db      	lsls	r3, r3, #3
    5424:	58d2      	ldr	r2, [r2, r3]
    5426:	238e      	movs	r3, #142	; 0x8e
    5428:	009b      	lsls	r3, r3, #2
    542a:	5cd3      	ldrb	r3, [r2, r3]
    542c:	2b00      	cmp	r3, #0
    542e:	d100      	bne.n	5432 <ProcessRadioRxDone+0x496>
    5430:	e39b      	b.n	5b6a <ProcessRadioRxDone+0xbce>
                {
                    MacCtx.NvmCtx->IsRejoinRequestPending = false;
    5432:	4ab6      	ldr	r2, [pc, #728]	; (570c <ProcessRadioRxDone+0x770>)
    5434:	239c      	movs	r3, #156	; 0x9c
    5436:	00db      	lsls	r3, r3, #3
    5438:	58d2      	ldr	r2, [r2, r3]
    543a:	238e      	movs	r3, #142	; 0x8e
    543c:	009b      	lsls	r3, r3, #2
    543e:	2100      	movs	r1, #0
    5440:	54d1      	strb	r1, [r2, r3]

                    // Stop in any case the ForceRejoinReqCycleTimer
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    5442:	4bb9      	ldr	r3, [pc, #740]	; (5728 <ProcessRadioRxDone+0x78c>)
    5444:	0018      	movs	r0, r3
    5446:	4bb9      	ldr	r3, [pc, #740]	; (572c <ProcessRadioRxDone+0x790>)
    5448:	4798      	blx	r3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
    544a:	e38e      	b.n	5b6a <ProcessRadioRxDone+0xbce>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
    544c:	2000      	movs	r0, #0
    544e:	4bb4      	ldr	r3, [pc, #720]	; (5720 <ProcessRadioRxDone+0x784>)
    5450:	4798      	blx	r3
    5452:	1e03      	subs	r3, r0, #0
    5454:	d100      	bne.n	5458 <ProcessRadioRxDone+0x4bc>
    5456:	e388      	b.n	5b6a <ProcessRadioRxDone+0xbce>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
    5458:	2100      	movs	r1, #0
    545a:	2007      	movs	r0, #7
    545c:	4bb1      	ldr	r3, [pc, #708]	; (5724 <ProcessRadioRxDone+0x788>)
    545e:	4798      	blx	r3
            break;
    5460:	e383      	b.n	5b6a <ProcessRadioRxDone+0xbce>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    5462:	4baa      	ldr	r3, [pc, #680]	; (570c <ProcessRadioRxDone+0x770>)
    5464:	4ab2      	ldr	r2, [pc, #712]	; (5730 <ProcessRadioRxDone+0x794>)
    5466:	2101      	movs	r1, #1
    5468:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    546a:	4aa8      	ldr	r2, [pc, #672]	; (570c <ProcessRadioRxDone+0x770>)
    546c:	239c      	movs	r3, #156	; 0x9c
    546e:	00db      	lsls	r3, r3, #3
    5470:	58d2      	ldr	r2, [r2, r3]
    5472:	2302      	movs	r3, #2
    5474:	33ff      	adds	r3, #255	; 0xff
    5476:	5cd2      	ldrb	r2, [r2, r3]
    5478:	2368      	movs	r3, #104	; 0x68
    547a:	18fb      	adds	r3, r7, r3
    547c:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
    547e:	4aa3      	ldr	r2, [pc, #652]	; (570c <ProcessRadioRxDone+0x770>)
    5480:	2383      	movs	r3, #131	; 0x83
    5482:	00db      	lsls	r3, r3, #3
    5484:	5cd3      	ldrb	r3, [r2, r3]
    5486:	b25a      	sxtb	r2, r3
    5488:	2368      	movs	r3, #104	; 0x68
    548a:	18fb      	adds	r3, r7, r3
    548c:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
    548e:	2368      	movs	r3, #104	; 0x68
    5490:	18fb      	adds	r3, r7, r3
    5492:	220c      	movs	r2, #12
    5494:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
    5496:	4a9d      	ldr	r2, [pc, #628]	; (570c <ProcessRadioRxDone+0x770>)
    5498:	239c      	movs	r3, #156	; 0x9c
    549a:	00db      	lsls	r3, r3, #3
    549c:	58d2      	ldr	r2, [r2, r3]
    549e:	2316      	movs	r3, #22
    54a0:	33ff      	adds	r3, #255	; 0xff
    54a2:	5cd3      	ldrb	r3, [r2, r3]
    54a4:	2b00      	cmp	r3, #0
    54a6:	d003      	beq.n	54b0 <ProcessRadioRxDone+0x514>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    54a8:	2368      	movs	r3, #104	; 0x68
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	220d      	movs	r2, #13
    54ae:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    54b0:	4a96      	ldr	r2, [pc, #600]	; (570c <ProcessRadioRxDone+0x770>)
    54b2:	239c      	movs	r3, #156	; 0x9c
    54b4:	00db      	lsls	r3, r3, #3
    54b6:	58d3      	ldr	r3, [r2, r3]
    54b8:	781b      	ldrb	r3, [r3, #0]
    54ba:	2268      	movs	r2, #104	; 0x68
    54bc:	18ba      	adds	r2, r7, r2
    54be:	0011      	movs	r1, r2
    54c0:	0018      	movs	r0, r3
    54c2:	4b9c      	ldr	r3, [pc, #624]	; (5734 <ProcessRadioRxDone+0x798>)
    54c4:	4798      	blx	r3
    54c6:	0003      	movs	r3, r0
    54c8:	001a      	movs	r2, r3
    54ca:	2364      	movs	r3, #100	; 0x64
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
    54d0:	237a      	movs	r3, #122	; 0x7a
    54d2:	18fb      	adds	r3, r7, r3
    54d4:	881b      	ldrh	r3, [r3, #0]
    54d6:	3b0d      	subs	r3, #13
    54d8:	b29b      	uxth	r3, r3
    54da:	b21b      	sxth	r3, r3
    54dc:	1c1a      	adds	r2, r3, #0
    54de:	b213      	sxth	r3, r2
    54e0:	2b00      	cmp	r3, #0
    54e2:	da01      	bge.n	54e8 <ProcessRadioRxDone+0x54c>
    54e4:	2300      	movs	r3, #0
    54e6:	1c1a      	adds	r2, r3, #0
    54e8:	b212      	sxth	r2, r2
    54ea:	2364      	movs	r3, #100	; 0x64
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	b21b      	sxth	r3, r3
    54f2:	429a      	cmp	r2, r3
    54f4:	dd06      	ble.n	5504 <ProcessRadioRxDone+0x568>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    54f6:	4b85      	ldr	r3, [pc, #532]	; (570c <ProcessRadioRxDone+0x770>)
    54f8:	4a8f      	ldr	r2, [pc, #572]	; (5738 <ProcessRadioRxDone+0x79c>)
    54fa:	2101      	movs	r1, #1
    54fc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    54fe:	4b8f      	ldr	r3, [pc, #572]	; (573c <ProcessRadioRxDone+0x7a0>)
    5500:	4798      	blx	r3
                return;
    5502:	e358      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
            }
            macMsgData.Buffer = payload;
    5504:	2334      	movs	r3, #52	; 0x34
    5506:	18fb      	adds	r3, r7, r3
    5508:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    550a:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
    550c:	237a      	movs	r3, #122	; 0x7a
    550e:	18fb      	adds	r3, r7, r3
    5510:	881b      	ldrh	r3, [r3, #0]
    5512:	b2da      	uxtb	r2, r3
    5514:	2334      	movs	r3, #52	; 0x34
    5516:	18fb      	adds	r3, r7, r3
    5518:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
    551a:	2334      	movs	r3, #52	; 0x34
    551c:	18fb      	adds	r3, r7, r3
    551e:	4a88      	ldr	r2, [pc, #544]	; (5740 <ProcessRadioRxDone+0x7a4>)
    5520:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
    5522:	2334      	movs	r3, #52	; 0x34
    5524:	18fb      	adds	r3, r7, r3
    5526:	2228      	movs	r2, #40	; 0x28
    5528:	21ff      	movs	r1, #255	; 0xff
    552a:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
    552c:	2334      	movs	r3, #52	; 0x34
    552e:	18fb      	adds	r3, r7, r3
    5530:	0018      	movs	r0, r3
    5532:	4b84      	ldr	r3, [pc, #528]	; (5744 <ProcessRadioRxDone+0x7a8>)
    5534:	4798      	blx	r3
    5536:	1e03      	subs	r3, r0, #0
    5538:	d006      	beq.n	5548 <ProcessRadioRxDone+0x5ac>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    553a:	4b74      	ldr	r3, [pc, #464]	; (570c <ProcessRadioRxDone+0x770>)
    553c:	4a7e      	ldr	r2, [pc, #504]	; (5738 <ProcessRadioRxDone+0x79c>)
    553e:	2101      	movs	r1, #1
    5540:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    5542:	4b7e      	ldr	r3, [pc, #504]	; (573c <ProcessRadioRxDone+0x7a0>)
    5544:	4798      	blx	r3
                return;
    5546:	e336      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
    5548:	2334      	movs	r3, #52	; 0x34
    554a:	18fb      	adds	r3, r7, r3
    554c:	689a      	ldr	r2, [r3, #8]
    554e:	4b6f      	ldr	r3, [pc, #444]	; (570c <ProcessRadioRxDone+0x770>)
    5550:	497d      	ldr	r1, [pc, #500]	; (5748 <ProcessRadioRxDone+0x7ac>)
    5552:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
    5554:	1cfa      	adds	r2, r7, #3
    5556:	2334      	movs	r3, #52	; 0x34
    5558:	18fb      	adds	r3, r7, r3
    555a:	0011      	movs	r1, r2
    555c:	0018      	movs	r0, r3
    555e:	4b7b      	ldr	r3, [pc, #492]	; (574c <ProcessRadioRxDone+0x7b0>)
    5560:	4798      	blx	r3
    5562:	1e03      	subs	r3, r0, #0
    5564:	d006      	beq.n	5574 <ProcessRadioRxDone+0x5d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    5566:	4b69      	ldr	r3, [pc, #420]	; (570c <ProcessRadioRxDone+0x770>)
    5568:	4a73      	ldr	r2, [pc, #460]	; (5738 <ProcessRadioRxDone+0x79c>)
    556a:	2101      	movs	r1, #1
    556c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    556e:	4b73      	ldr	r3, [pc, #460]	; (573c <ProcessRadioRxDone+0x7a0>)
    5570:	4798      	blx	r3
                return;
    5572:	e320      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
            }

            //Check if it is a multicast message
            multicast = 0;
    5574:	2383      	movs	r3, #131	; 0x83
    5576:	18fb      	adds	r3, r7, r3
    5578:	2200      	movs	r2, #0
    557a:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
    557c:	2300      	movs	r3, #0
    557e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    5580:	2381      	movs	r3, #129	; 0x81
    5582:	18fb      	adds	r3, r7, r3
    5584:	2200      	movs	r2, #0
    5586:	701a      	strb	r2, [r3, #0]
    5588:	e053      	b.n	5632 <ProcessRadioRxDone+0x696>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    558a:	4a60      	ldr	r2, [pc, #384]	; (570c <ProcessRadioRxDone+0x770>)
    558c:	239c      	movs	r3, #156	; 0x9c
    558e:	00db      	lsls	r3, r3, #3
    5590:	58d2      	ldr	r2, [r2, r3]
    5592:	2381      	movs	r3, #129	; 0x81
    5594:	18fb      	adds	r3, r7, r3
    5596:	781b      	ldrb	r3, [r3, #0]
    5598:	015b      	lsls	r3, r3, #5
    559a:	18d3      	adds	r3, r2, r3
    559c:	334c      	adds	r3, #76	; 0x4c
    559e:	681a      	ldr	r2, [r3, #0]
    55a0:	2334      	movs	r3, #52	; 0x34
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	689b      	ldr	r3, [r3, #8]
    55a6:	429a      	cmp	r2, r3
    55a8:	d13c      	bne.n	5624 <ProcessRadioRxDone+0x688>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
    55aa:	4a58      	ldr	r2, [pc, #352]	; (570c <ProcessRadioRxDone+0x770>)
    55ac:	239c      	movs	r3, #156	; 0x9c
    55ae:	00db      	lsls	r3, r3, #3
    55b0:	58d2      	ldr	r2, [r2, r3]
    55b2:	2381      	movs	r3, #129	; 0x81
    55b4:	18fb      	adds	r3, r7, r3
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	2154      	movs	r1, #84	; 0x54
    55ba:	015b      	lsls	r3, r3, #5
    55bc:	18d3      	adds	r3, r2, r3
    55be:	185b      	adds	r3, r3, r1
    55c0:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
    55c2:	2b00      	cmp	r3, #0
    55c4:	d02e      	beq.n	5624 <ProcessRadioRxDone+0x688>
                {
                    multicast = 1;
    55c6:	2383      	movs	r3, #131	; 0x83
    55c8:	18fb      	adds	r3, r7, r3
    55ca:	2201      	movs	r2, #1
    55cc:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
    55ce:	4a4f      	ldr	r2, [pc, #316]	; (570c <ProcessRadioRxDone+0x770>)
    55d0:	239c      	movs	r3, #156	; 0x9c
    55d2:	00db      	lsls	r3, r3, #3
    55d4:	58d1      	ldr	r1, [r2, r3]
    55d6:	2381      	movs	r3, #129	; 0x81
    55d8:	18fb      	adds	r3, r7, r3
    55da:	781a      	ldrb	r2, [r3, #0]
    55dc:	2382      	movs	r3, #130	; 0x82
    55de:	18fb      	adds	r3, r7, r3
    55e0:	2048      	movs	r0, #72	; 0x48
    55e2:	0152      	lsls	r2, r2, #5
    55e4:	188a      	adds	r2, r1, r2
    55e6:	1812      	adds	r2, r2, r0
    55e8:	7812      	ldrb	r2, [r2, #0]
    55ea:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
    55ec:	4a47      	ldr	r2, [pc, #284]	; (570c <ProcessRadioRxDone+0x770>)
    55ee:	239c      	movs	r3, #156	; 0x9c
    55f0:	00db      	lsls	r3, r3, #3
    55f2:	58d2      	ldr	r2, [r2, r3]
    55f4:	2381      	movs	r3, #129	; 0x81
    55f6:	18fb      	adds	r3, r7, r3
    55f8:	781b      	ldrb	r3, [r3, #0]
    55fa:	015b      	lsls	r3, r3, #5
    55fc:	18d3      	adds	r3, r2, r3
    55fe:	3350      	adds	r3, #80	; 0x50
    5600:	681b      	ldr	r3, [r3, #0]
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
    5606:	4a41      	ldr	r2, [pc, #260]	; (570c <ProcessRadioRxDone+0x770>)
    5608:	239c      	movs	r3, #156	; 0x9c
    560a:	00db      	lsls	r3, r3, #3
    560c:	58d2      	ldr	r2, [r2, r3]
    560e:	2381      	movs	r3, #129	; 0x81
    5610:	18fb      	adds	r3, r7, r3
    5612:	781b      	ldrb	r3, [r3, #0]
    5614:	015b      	lsls	r3, r3, #5
    5616:	18d3      	adds	r3, r2, r3
    5618:	334c      	adds	r3, #76	; 0x4c
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	2284      	movs	r2, #132	; 0x84
    561e:	18ba      	adds	r2, r7, r2
    5620:	6013      	str	r3, [r2, #0]
                    break;
    5622:	e00b      	b.n	563c <ProcessRadioRxDone+0x6a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    5624:	2381      	movs	r3, #129	; 0x81
    5626:	18fb      	adds	r3, r7, r3
    5628:	781a      	ldrb	r2, [r3, #0]
    562a:	2381      	movs	r3, #129	; 0x81
    562c:	18fb      	adds	r3, r7, r3
    562e:	3201      	adds	r2, #1
    5630:	701a      	strb	r2, [r3, #0]
    5632:	2381      	movs	r3, #129	; 0x81
    5634:	18fb      	adds	r3, r7, r3
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	2b03      	cmp	r3, #3
    563a:	d9a6      	bls.n	558a <ProcessRadioRxDone+0x5ee>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
    563c:	2368      	movs	r3, #104	; 0x68
    563e:	18fb      	adds	r3, r7, r3
    5640:	2214      	movs	r2, #20
    5642:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    5644:	4a31      	ldr	r2, [pc, #196]	; (570c <ProcessRadioRxDone+0x770>)
    5646:	239c      	movs	r3, #156	; 0x9c
    5648:	00db      	lsls	r3, r3, #3
    564a:	58d3      	ldr	r3, [r2, r3]
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	2268      	movs	r2, #104	; 0x68
    5650:	18ba      	adds	r2, r7, r2
    5652:	0011      	movs	r1, r2
    5654:	0018      	movs	r0, r3
    5656:	4b37      	ldr	r3, [pc, #220]	; (5734 <ProcessRadioRxDone+0x798>)
    5658:	4798      	blx	r3
    565a:	0003      	movs	r3, r0
    565c:	001a      	movs	r2, r3
    565e:	2364      	movs	r3, #100	; 0x64
    5660:	18fb      	adds	r3, r7, r3
    5662:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
    5664:	1cfb      	adds	r3, r7, #3
    5666:	781d      	ldrb	r5, [r3, #0]
    5668:	4a28      	ldr	r2, [pc, #160]	; (570c <ProcessRadioRxDone+0x770>)
    566a:	239c      	movs	r3, #156	; 0x9c
    566c:	00db      	lsls	r3, r3, #3
    566e:	58d1      	ldr	r1, [r2, r3]
    5670:	2364      	movs	r3, #100	; 0x64
    5672:	18fb      	adds	r3, r7, r3
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	b29b      	uxth	r3, r3
    5678:	2275      	movs	r2, #117	; 0x75
    567a:	18bc      	adds	r4, r7, r2
    567c:	2287      	movs	r2, #135	; 0x87
    567e:	0092      	lsls	r2, r2, #2
    5680:	588e      	ldr	r6, [r1, r2]
    5682:	2234      	movs	r2, #52	; 0x34
    5684:	18b9      	adds	r1, r7, r2
    5686:	2282      	movs	r2, #130	; 0x82
    5688:	18ba      	adds	r2, r7, r2
    568a:	7810      	ldrb	r0, [r2, #0]
    568c:	2208      	movs	r2, #8
    568e:	18ba      	adds	r2, r7, r2
    5690:	9202      	str	r2, [sp, #8]
    5692:	1dfa      	adds	r2, r7, #7
    5694:	9201      	str	r2, [sp, #4]
    5696:	9300      	str	r3, [sp, #0]
    5698:	0033      	movs	r3, r6
    569a:	000a      	movs	r2, r1
    569c:	0029      	movs	r1, r5
    569e:	4d2c      	ldr	r5, [pc, #176]	; (5750 <ProcessRadioRxDone+0x7b4>)
    56a0:	47a8      	blx	r5
    56a2:	0003      	movs	r3, r0
    56a4:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
    56a6:	2375      	movs	r3, #117	; 0x75
    56a8:	18fb      	adds	r3, r7, r3
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d067      	beq.n	5780 <ProcessRadioRxDone+0x7e4>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
    56b0:	2375      	movs	r3, #117	; 0x75
    56b2:	18fb      	adds	r3, r7, r3
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	2b01      	cmp	r3, #1
    56b8:	d14c      	bne.n	5754 <ProcessRadioRxDone+0x7b8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
    56ba:	4b14      	ldr	r3, [pc, #80]	; (570c <ProcessRadioRxDone+0x770>)
    56bc:	4a1e      	ldr	r2, [pc, #120]	; (5738 <ProcessRadioRxDone+0x79c>)
    56be:	2108      	movs	r1, #8
    56c0:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
    56c2:	4a12      	ldr	r2, [pc, #72]	; (570c <ProcessRadioRxDone+0x770>)
    56c4:	239c      	movs	r3, #156	; 0x9c
    56c6:	00db      	lsls	r3, r3, #3
    56c8:	58d3      	ldr	r3, [r2, r3]
    56ca:	4a11      	ldr	r2, [pc, #68]	; (5710 <ProcessRadioRxDone+0x774>)
    56cc:	5c9b      	ldrb	r3, [r3, r2]
    56ce:	2b00      	cmp	r3, #0
    56d0:	d14e      	bne.n	5770 <ProcessRadioRxDone+0x7d4>
    56d2:	2374      	movs	r3, #116	; 0x74
    56d4:	18fb      	adds	r3, r7, r3
    56d6:	781b      	ldrb	r3, [r3, #0]
    56d8:	221f      	movs	r2, #31
    56da:	4393      	bics	r3, r2
    56dc:	b2db      	uxtb	r3, r3
    56de:	2ba0      	cmp	r3, #160	; 0xa0
    56e0:	d146      	bne.n	5770 <ProcessRadioRxDone+0x7d4>
    56e2:	4a0a      	ldr	r2, [pc, #40]	; (570c <ProcessRadioRxDone+0x770>)
    56e4:	239c      	movs	r3, #156	; 0x9c
    56e6:	00db      	lsls	r3, r3, #3
    56e8:	58d2      	ldr	r2, [r2, r3]
    56ea:	238f      	movs	r3, #143	; 0x8f
    56ec:	009b      	lsls	r3, r3, #2
    56ee:	58d2      	ldr	r2, [r2, r3]
    56f0:	2334      	movs	r3, #52	; 0x34
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56f6:	429a      	cmp	r2, r3
    56f8:	d13a      	bne.n	5770 <ProcessRadioRxDone+0x7d4>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
    56fa:	4a04      	ldr	r2, [pc, #16]	; (570c <ProcessRadioRxDone+0x770>)
    56fc:	239c      	movs	r3, #156	; 0x9c
    56fe:	00db      	lsls	r3, r3, #3
    5700:	58d2      	ldr	r2, [r2, r3]
    5702:	2386      	movs	r3, #134	; 0x86
    5704:	009b      	lsls	r3, r3, #2
    5706:	2101      	movs	r1, #1
    5708:	54d1      	strb	r1, [r2, r3]
    570a:	e031      	b.n	5770 <ProcessRadioRxDone+0x7d4>
    570c:	20000b78 	.word	0x20000b78
    5710:	0000021e 	.word	0x0000021e
    5714:	0000f111 	.word	0x0000f111
    5718:	0000023a 	.word	0x0000023a
    571c:	0000bcb5 	.word	0x0000bcb5
    5720:	0000c339 	.word	0x0000c339
    5724:	0000c211 	.word	0x0000c211
    5728:	20001034 	.word	0x20001034
    572c:	0001624d 	.word	0x0001624d
    5730:	00000414 	.word	0x00000414
    5734:	0000eff1 	.word	0x0000eff1
    5738:	00000415 	.word	0x00000415
    573c:	00004f3d 	.word	0x00004f3d
    5740:	20000db8 	.word	0x20000db8
    5744:	0000e685 	.word	0x0000e685
    5748:	0000042c 	.word	0x0000042c
    574c:	00008ff5 	.word	0x00008ff5
    5750:	0000e141 	.word	0x0000e141
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
    5754:	2375      	movs	r3, #117	; 0x75
    5756:	18fb      	adds	r3, r7, r3
    5758:	781b      	ldrb	r3, [r3, #0]
    575a:	2b02      	cmp	r3, #2
    575c:	d104      	bne.n	5768 <ProcessRadioRxDone+0x7cc>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
    575e:	4bd3      	ldr	r3, [pc, #844]	; (5aac <ProcessRadioRxDone+0xb10>)
    5760:	4ad3      	ldr	r2, [pc, #844]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    5762:	210a      	movs	r1, #10
    5764:	5499      	strb	r1, [r3, r2]
    5766:	e003      	b.n	5770 <ProcessRadioRxDone+0x7d4>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    5768:	4bd0      	ldr	r3, [pc, #832]	; (5aac <ProcessRadioRxDone+0xb10>)
    576a:	4ad1      	ldr	r2, [pc, #836]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    576c:	2101      	movs	r1, #1
    576e:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    5770:	68b9      	ldr	r1, [r7, #8]
    5772:	4ace      	ldr	r2, [pc, #824]	; (5aac <ProcessRadioRxDone+0xb10>)
    5774:	2385      	movs	r3, #133	; 0x85
    5776:	00db      	lsls	r3, r3, #3
    5778:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
    577a:	4bce      	ldr	r3, [pc, #824]	; (5ab4 <ProcessRadioRxDone+0xb18>)
    577c:	4798      	blx	r3
                return;
    577e:	e21a      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
    5780:	1dfb      	adds	r3, r7, #7
    5782:	781a      	ldrb	r2, [r3, #0]
    5784:	68bd      	ldr	r5, [r7, #8]
    5786:	2380      	movs	r3, #128	; 0x80
    5788:	18fc      	adds	r4, r7, r3
    578a:	2384      	movs	r3, #132	; 0x84
    578c:	18fb      	adds	r3, r7, r3
    578e:	6819      	ldr	r1, [r3, #0]
    5790:	2382      	movs	r3, #130	; 0x82
    5792:	18fb      	adds	r3, r7, r3
    5794:	7818      	ldrb	r0, [r3, #0]
    5796:	2334      	movs	r3, #52	; 0x34
    5798:	18fb      	adds	r3, r7, r3
    579a:	9300      	str	r3, [sp, #0]
    579c:	002b      	movs	r3, r5
    579e:	4dc6      	ldr	r5, [pc, #792]	; (5ab8 <ProcessRadioRxDone+0xb1c>)
    57a0:	47a8      	blx	r5
    57a2:	0003      	movs	r3, r0
    57a4:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
    57a6:	2380      	movs	r3, #128	; 0x80
    57a8:	18fb      	adds	r3, r7, r3
    57aa:	781b      	ldrb	r3, [r3, #0]
    57ac:	2b00      	cmp	r3, #0
    57ae:	d018      	beq.n	57e2 <ProcessRadioRxDone+0x846>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
    57b0:	2380      	movs	r3, #128	; 0x80
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	781b      	ldrb	r3, [r3, #0]
    57b6:	2b02      	cmp	r3, #2
    57b8:	d10c      	bne.n	57d4 <ProcessRadioRxDone+0x838>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
    57ba:	4bbc      	ldr	r3, [pc, #752]	; (5aac <ProcessRadioRxDone+0xb10>)
    57bc:	4abc      	ldr	r2, [pc, #752]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    57be:	210b      	movs	r1, #11
    57c0:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
    57c2:	4bba      	ldr	r3, [pc, #744]	; (5aac <ProcessRadioRxDone+0xb10>)
    57c4:	4abd      	ldr	r2, [pc, #756]	; (5abc <ProcessRadioRxDone+0xb20>)
    57c6:	5c9b      	ldrb	r3, [r3, r2]
    57c8:	2b02      	cmp	r3, #2
    57ca:	d100      	bne.n	57ce <ProcessRadioRxDone+0x832>
    57cc:	e1f2      	b.n	5bb4 <ProcessRadioRxDone+0xc18>
                    {
                        PrepareRxDoneAbort( );
    57ce:	4bb9      	ldr	r3, [pc, #740]	; (5ab4 <ProcessRadioRxDone+0xb18>)
    57d0:	4798      	blx	r3
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
    57d2:	e1ef      	b.n	5bb4 <ProcessRadioRxDone+0xc18>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
    57d4:	4bb5      	ldr	r3, [pc, #724]	; (5aac <ProcessRadioRxDone+0xb10>)
    57d6:	4ab6      	ldr	r2, [pc, #728]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    57d8:	210c      	movs	r1, #12
    57da:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
    57dc:	4bb5      	ldr	r3, [pc, #724]	; (5ab4 <ProcessRadioRxDone+0xb18>)
    57de:	4798      	blx	r3
                return;
    57e0:	e1e8      	b.n	5bb4 <ProcessRadioRxDone+0xc18>
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    57e2:	4bb2      	ldr	r3, [pc, #712]	; (5aac <ProcessRadioRxDone+0xb10>)
    57e4:	4ab2      	ldr	r2, [pc, #712]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    57e6:	2100      	movs	r1, #0
    57e8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
    57ea:	4bb0      	ldr	r3, [pc, #704]	; (5aac <ProcessRadioRxDone+0xb10>)
    57ec:	2283      	movs	r2, #131	; 0x83
    57ee:	18ba      	adds	r2, r7, r2
    57f0:	49b3      	ldr	r1, [pc, #716]	; (5ac0 <ProcessRadioRxDone+0xb24>)
    57f2:	7812      	ldrb	r2, [r2, #0]
    57f4:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
    57f6:	2334      	movs	r3, #52	; 0x34
    57f8:	18fb      	adds	r3, r7, r3
    57fa:	7b1b      	ldrb	r3, [r3, #12]
    57fc:	06db      	lsls	r3, r3, #27
    57fe:	0fdb      	lsrs	r3, r3, #31
    5800:	b2db      	uxtb	r3, r3
    5802:	0019      	movs	r1, r3
    5804:	4ba9      	ldr	r3, [pc, #676]	; (5aac <ProcessRadioRxDone+0xb10>)
    5806:	4aaf      	ldr	r2, [pc, #700]	; (5ac4 <ProcessRadioRxDone+0xb28>)
    5808:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
    580a:	4ba8      	ldr	r3, [pc, #672]	; (5aac <ProcessRadioRxDone+0xb10>)
    580c:	4aae      	ldr	r2, [pc, #696]	; (5ac8 <ProcessRadioRxDone+0xb2c>)
    580e:	2100      	movs	r1, #0
    5810:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
    5812:	4aa6      	ldr	r2, [pc, #664]	; (5aac <ProcessRadioRxDone+0xb10>)
    5814:	2384      	movs	r3, #132	; 0x84
    5816:	00db      	lsls	r3, r3, #3
    5818:	2100      	movs	r1, #0
    581a:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
    581c:	68b9      	ldr	r1, [r7, #8]
    581e:	4aa3      	ldr	r2, [pc, #652]	; (5aac <ProcessRadioRxDone+0xb10>)
    5820:	2385      	movs	r3, #133	; 0x85
    5822:	00db      	lsls	r3, r3, #3
    5824:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    5826:	2334      	movs	r3, #52	; 0x34
    5828:	18fb      	adds	r3, r7, r3
    582a:	7b1b      	ldrb	r3, [r3, #12]
    582c:	069b      	lsls	r3, r3, #26
    582e:	0fdb      	lsrs	r3, r3, #31
    5830:	b2db      	uxtb	r3, r3
    5832:	1e5a      	subs	r2, r3, #1
    5834:	4193      	sbcs	r3, r2
    5836:	b2d9      	uxtb	r1, r3
    5838:	4b9c      	ldr	r3, [pc, #624]	; (5aac <ProcessRadioRxDone+0xb10>)
    583a:	4aa4      	ldr	r2, [pc, #656]	; (5acc <ProcessRadioRxDone+0xb30>)
    583c:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    583e:	4b9b      	ldr	r3, [pc, #620]	; (5aac <ProcessRadioRxDone+0xb10>)
    5840:	4aa3      	ldr	r2, [pc, #652]	; (5ad0 <ProcessRadioRxDone+0xb34>)
    5842:	2100      	movs	r1, #0
    5844:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
    5846:	2334      	movs	r3, #52	; 0x34
    5848:	18fb      	adds	r3, r7, r3
    584a:	7b1b      	ldrb	r3, [r3, #12]
    584c:	069b      	lsls	r3, r3, #26
    584e:	0fdb      	lsrs	r3, r3, #31
    5850:	b2db      	uxtb	r3, r3
    5852:	1e5a      	subs	r2, r3, #1
    5854:	4193      	sbcs	r3, r2
    5856:	b2d9      	uxtb	r1, r3
    5858:	4b94      	ldr	r3, [pc, #592]	; (5aac <ProcessRadioRxDone+0xb10>)
    585a:	4a9e      	ldr	r2, [pc, #632]	; (5ad4 <ProcessRadioRxDone+0xb38>)
    585c:	5499      	strb	r1, [r3, r2]

            MacCtx.NvmCtx->AdrAckCounter = 0;
    585e:	4a93      	ldr	r2, [pc, #588]	; (5aac <ProcessRadioRxDone+0xb10>)
    5860:	239c      	movs	r3, #156	; 0x9c
    5862:	00db      	lsls	r3, r3, #3
    5864:	58d3      	ldr	r3, [r2, r3]
    5866:	22cc      	movs	r2, #204	; 0xcc
    5868:	2100      	movs	r1, #0
    586a:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
    586c:	2383      	movs	r3, #131	; 0x83
    586e:	18fb      	adds	r3, r7, r3
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	2b01      	cmp	r3, #1
    5874:	d104      	bne.n	5880 <ProcessRadioRxDone+0x8e4>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
    5876:	4b8d      	ldr	r3, [pc, #564]	; (5aac <ProcessRadioRxDone+0xb10>)
    5878:	4a97      	ldr	r2, [pc, #604]	; (5ad8 <ProcessRadioRxDone+0xb3c>)
    587a:	2102      	movs	r1, #2
    587c:	5499      	strb	r1, [r3, r2]
    587e:	e032      	b.n	58e6 <ProcessRadioRxDone+0x94a>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
    5880:	2374      	movs	r3, #116	; 0x74
    5882:	18fb      	adds	r3, r7, r3
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	221f      	movs	r2, #31
    5888:	4393      	bics	r3, r2
    588a:	b2db      	uxtb	r3, r3
    588c:	2ba0      	cmp	r3, #160	; 0xa0
    588e:	d11e      	bne.n	58ce <ProcessRadioRxDone+0x932>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
    5890:	4a86      	ldr	r2, [pc, #536]	; (5aac <ProcessRadioRxDone+0xb10>)
    5892:	239c      	movs	r3, #156	; 0x9c
    5894:	00db      	lsls	r3, r3, #3
    5896:	58d2      	ldr	r2, [r2, r3]
    5898:	2386      	movs	r3, #134	; 0x86
    589a:	009b      	lsls	r3, r3, #2
    589c:	2101      	movs	r1, #1
    589e:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
    58a0:	4a82      	ldr	r2, [pc, #520]	; (5aac <ProcessRadioRxDone+0xb10>)
    58a2:	239c      	movs	r3, #156	; 0x9c
    58a4:	00db      	lsls	r3, r3, #3
    58a6:	58d3      	ldr	r3, [r2, r3]
    58a8:	4a8c      	ldr	r2, [pc, #560]	; (5adc <ProcessRadioRxDone+0xb40>)
    58aa:	5c9b      	ldrb	r3, [r3, r2]
    58ac:	2b00      	cmp	r3, #0
    58ae:	d109      	bne.n	58c4 <ProcessRadioRxDone+0x928>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
    58b0:	4a7e      	ldr	r2, [pc, #504]	; (5aac <ProcessRadioRxDone+0xb10>)
    58b2:	239c      	movs	r3, #156	; 0x9c
    58b4:	00db      	lsls	r3, r3, #3
    58b6:	58d2      	ldr	r2, [r2, r3]
    58b8:	2334      	movs	r3, #52	; 0x34
    58ba:	18fb      	adds	r3, r7, r3
    58bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    58be:	238f      	movs	r3, #143	; 0x8f
    58c0:	009b      	lsls	r3, r3, #2
    58c2:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
    58c4:	4b79      	ldr	r3, [pc, #484]	; (5aac <ProcessRadioRxDone+0xb10>)
    58c6:	4a84      	ldr	r2, [pc, #528]	; (5ad8 <ProcessRadioRxDone+0xb3c>)
    58c8:	2101      	movs	r1, #1
    58ca:	5499      	strb	r1, [r3, r2]
    58cc:	e00b      	b.n	58e6 <ProcessRadioRxDone+0x94a>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
    58ce:	4a77      	ldr	r2, [pc, #476]	; (5aac <ProcessRadioRxDone+0xb10>)
    58d0:	239c      	movs	r3, #156	; 0x9c
    58d2:	00db      	lsls	r3, r3, #3
    58d4:	58d2      	ldr	r2, [r2, r3]
    58d6:	2386      	movs	r3, #134	; 0x86
    58d8:	009b      	lsls	r3, r3, #2
    58da:	2100      	movs	r1, #0
    58dc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
    58de:	4b73      	ldr	r3, [pc, #460]	; (5aac <ProcessRadioRxDone+0xb10>)
    58e0:	4a7d      	ldr	r2, [pc, #500]	; (5ad8 <ProcessRadioRxDone+0xb3c>)
    58e2:	2100      	movs	r1, #0
    58e4:	5499      	strb	r1, [r3, r2]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
    58e6:	1dfb      	adds	r3, r7, #7
    58e8:	781b      	ldrb	r3, [r3, #0]
    58ea:	68ba      	ldr	r2, [r7, #8]
    58ec:	0011      	movs	r1, r2
    58ee:	0018      	movs	r0, r3
    58f0:	4b7b      	ldr	r3, [pc, #492]	; (5ae0 <ProcessRadioRxDone+0xb44>)
    58f2:	4798      	blx	r3
    58f4:	1e03      	subs	r3, r0, #0
    58f6:	d007      	beq.n	5908 <ProcessRadioRxDone+0x96c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    58f8:	4b6c      	ldr	r3, [pc, #432]	; (5aac <ProcessRadioRxDone+0xb10>)
    58fa:	4a6d      	ldr	r2, [pc, #436]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    58fc:	2101      	movs	r1, #1
    58fe:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
    5900:	4b6c      	ldr	r3, [pc, #432]	; (5ab4 <ProcessRadioRxDone+0xb18>)
    5902:	4798      	blx	r3
                return;
    5904:	46c0      	nop			; (mov r8, r8)
    5906:	e156      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
    5908:	4b68      	ldr	r3, [pc, #416]	; (5aac <ProcessRadioRxDone+0xb10>)
    590a:	4a6c      	ldr	r2, [pc, #432]	; (5abc <ProcessRadioRxDone+0xb20>)
    590c:	5c98      	ldrb	r0, [r3, r2]
    590e:	4a67      	ldr	r2, [pc, #412]	; (5aac <ProcessRadioRxDone+0xb10>)
    5910:	2386      	movs	r3, #134	; 0x86
    5912:	00db      	lsls	r3, r3, #3
    5914:	5cd2      	ldrb	r2, [r2, r3]
    5916:	2334      	movs	r3, #52	; 0x34
    5918:	18fb      	adds	r3, r7, r3
    591a:	7b1b      	ldrb	r3, [r3, #12]
    591c:	1c19      	adds	r1, r3, #0
    591e:	4b71      	ldr	r3, [pc, #452]	; (5ae4 <ProcessRadioRxDone+0xb48>)
    5920:	4798      	blx	r3

            switch( fType )
    5922:	1cfb      	adds	r3, r7, #3
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	2b01      	cmp	r3, #1
    5928:	d03a      	beq.n	59a0 <ProcessRadioRxDone+0xa04>
    592a:	dc02      	bgt.n	5932 <ProcessRadioRxDone+0x996>
    592c:	2b00      	cmp	r3, #0
    592e:	d005      	beq.n	593c <ProcessRadioRxDone+0x9a0>
    5930:	e08c      	b.n	5a4c <ProcessRadioRxDone+0xab0>
    5932:	2b02      	cmp	r3, #2
    5934:	d054      	beq.n	59e0 <ProcessRadioRxDone+0xa44>
    5936:	2b03      	cmp	r3, #3
    5938:	d06e      	beq.n	5a18 <ProcessRadioRxDone+0xa7c>
    593a:	e087      	b.n	5a4c <ProcessRadioRxDone+0xab0>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    593c:	2334      	movs	r3, #52	; 0x34
    593e:	18fb      	adds	r3, r7, r3
    5940:	7b1b      	ldrb	r3, [r3, #12]
    5942:	071b      	lsls	r3, r3, #28
    5944:	0f1b      	lsrs	r3, r3, #28
    5946:	b2db      	uxtb	r3, r3
    5948:	001c      	movs	r4, r3
    594a:	4b58      	ldr	r3, [pc, #352]	; (5aac <ProcessRadioRxDone+0xb10>)
    594c:	4a5b      	ldr	r2, [pc, #364]	; (5abc <ProcessRadioRxDone+0xb20>)
    594e:	5c9b      	ldrb	r3, [r3, r2]
    5950:	2277      	movs	r2, #119	; 0x77
    5952:	18ba      	adds	r2, r7, r2
    5954:	2100      	movs	r1, #0
    5956:	5651      	ldrsb	r1, [r2, r1]
    5958:	2234      	movs	r2, #52	; 0x34
    595a:	18ba      	adds	r2, r7, r2
    595c:	3210      	adds	r2, #16
    595e:	0010      	movs	r0, r2
    5960:	9300      	str	r3, [sp, #0]
    5962:	000b      	movs	r3, r1
    5964:	0022      	movs	r2, r4
    5966:	2100      	movs	r1, #0
    5968:	4c5f      	ldr	r4, [pc, #380]	; (5ae8 <ProcessRadioRxDone+0xb4c>)
    596a:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    596c:	2334      	movs	r3, #52	; 0x34
    596e:	18fb      	adds	r3, r7, r3
    5970:	2220      	movs	r2, #32
    5972:	5c99      	ldrb	r1, [r3, r2]
    5974:	4b4d      	ldr	r3, [pc, #308]	; (5aac <ProcessRadioRxDone+0xb10>)
    5976:	4a5d      	ldr	r2, [pc, #372]	; (5aec <ProcessRadioRxDone+0xb50>)
    5978:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    597a:	2334      	movs	r3, #52	; 0x34
    597c:	18fb      	adds	r3, r7, r3
    597e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5980:	4b4a      	ldr	r3, [pc, #296]	; (5aac <ProcessRadioRxDone+0xb10>)
    5982:	4951      	ldr	r1, [pc, #324]	; (5ac8 <ProcessRadioRxDone+0xb2c>)
    5984:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    5986:	2334      	movs	r3, #52	; 0x34
    5988:	18fb      	adds	r3, r7, r3
    598a:	2228      	movs	r2, #40	; 0x28
    598c:	5c99      	ldrb	r1, [r3, r2]
    598e:	4a47      	ldr	r2, [pc, #284]	; (5aac <ProcessRadioRxDone+0xb10>)
    5990:	2384      	movs	r3, #132	; 0x84
    5992:	00db      	lsls	r3, r3, #3
    5994:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
    5996:	4b45      	ldr	r3, [pc, #276]	; (5aac <ProcessRadioRxDone+0xb10>)
    5998:	4a55      	ldr	r2, [pc, #340]	; (5af0 <ProcessRadioRxDone+0xb54>)
    599a:	2101      	movs	r1, #1
    599c:	5499      	strb	r1, [r3, r2]
                    break;
    599e:	e05c      	b.n	5a5a <ProcessRadioRxDone+0xabe>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
    59a0:	2334      	movs	r3, #52	; 0x34
    59a2:	18fb      	adds	r3, r7, r3
    59a4:	7b1b      	ldrb	r3, [r3, #12]
    59a6:	071b      	lsls	r3, r3, #28
    59a8:	0f1b      	lsrs	r3, r3, #28
    59aa:	b2db      	uxtb	r3, r3
    59ac:	001c      	movs	r4, r3
    59ae:	4b3f      	ldr	r3, [pc, #252]	; (5aac <ProcessRadioRxDone+0xb10>)
    59b0:	4a42      	ldr	r2, [pc, #264]	; (5abc <ProcessRadioRxDone+0xb20>)
    59b2:	5c9b      	ldrb	r3, [r3, r2]
    59b4:	2277      	movs	r2, #119	; 0x77
    59b6:	18ba      	adds	r2, r7, r2
    59b8:	2100      	movs	r1, #0
    59ba:	5651      	ldrsb	r1, [r2, r1]
    59bc:	2234      	movs	r2, #52	; 0x34
    59be:	18ba      	adds	r2, r7, r2
    59c0:	3210      	adds	r2, #16
    59c2:	0010      	movs	r0, r2
    59c4:	9300      	str	r3, [sp, #0]
    59c6:	000b      	movs	r3, r1
    59c8:	0022      	movs	r2, r4
    59ca:	2100      	movs	r1, #0
    59cc:	4c46      	ldr	r4, [pc, #280]	; (5ae8 <ProcessRadioRxDone+0xb4c>)
    59ce:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    59d0:	2334      	movs	r3, #52	; 0x34
    59d2:	18fb      	adds	r3, r7, r3
    59d4:	2220      	movs	r2, #32
    59d6:	5c99      	ldrb	r1, [r3, r2]
    59d8:	4b34      	ldr	r3, [pc, #208]	; (5aac <ProcessRadioRxDone+0xb10>)
    59da:	4a44      	ldr	r2, [pc, #272]	; (5aec <ProcessRadioRxDone+0xb50>)
    59dc:	5499      	strb	r1, [r3, r2]
                    break;
    59de:	e03c      	b.n	5a5a <ProcessRadioRxDone+0xabe>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
    59e0:	2334      	movs	r3, #52	; 0x34
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    59e6:	2334      	movs	r3, #52	; 0x34
    59e8:	18fb      	adds	r3, r7, r3
    59ea:	2228      	movs	r2, #40	; 0x28
    59ec:	5c99      	ldrb	r1, [r3, r2]
    59ee:	4b2f      	ldr	r3, [pc, #188]	; (5aac <ProcessRadioRxDone+0xb10>)
    59f0:	4a32      	ldr	r2, [pc, #200]	; (5abc <ProcessRadioRxDone+0xb20>)
    59f2:	5c9b      	ldrb	r3, [r3, r2]
    59f4:	2277      	movs	r2, #119	; 0x77
    59f6:	18ba      	adds	r2, r7, r2
    59f8:	7812      	ldrb	r2, [r2, #0]
    59fa:	b252      	sxtb	r2, r2
    59fc:	9300      	str	r3, [sp, #0]
    59fe:	0013      	movs	r3, r2
    5a00:	000a      	movs	r2, r1
    5a02:	2100      	movs	r1, #0
    5a04:	4c38      	ldr	r4, [pc, #224]	; (5ae8 <ProcessRadioRxDone+0xb4c>)
    5a06:	47a0      	blx	r4
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    5a08:	2334      	movs	r3, #52	; 0x34
    5a0a:	18fb      	adds	r3, r7, r3
    5a0c:	2220      	movs	r2, #32
    5a0e:	5c99      	ldrb	r1, [r3, r2]
    5a10:	4b26      	ldr	r3, [pc, #152]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a12:	4a36      	ldr	r2, [pc, #216]	; (5aec <ProcessRadioRxDone+0xb50>)
    5a14:	5499      	strb	r1, [r3, r2]
                    break;
    5a16:	e020      	b.n	5a5a <ProcessRadioRxDone+0xabe>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
    5a18:	2334      	movs	r3, #52	; 0x34
    5a1a:	18fb      	adds	r3, r7, r3
    5a1c:	2220      	movs	r2, #32
    5a1e:	5c99      	ldrb	r1, [r3, r2]
    5a20:	4b22      	ldr	r3, [pc, #136]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a22:	4a32      	ldr	r2, [pc, #200]	; (5aec <ProcessRadioRxDone+0xb50>)
    5a24:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
    5a26:	2334      	movs	r3, #52	; 0x34
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5a2c:	4b1f      	ldr	r3, [pc, #124]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a2e:	4926      	ldr	r1, [pc, #152]	; (5ac8 <ProcessRadioRxDone+0xb2c>)
    5a30:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
    5a32:	2334      	movs	r3, #52	; 0x34
    5a34:	18fb      	adds	r3, r7, r3
    5a36:	2228      	movs	r2, #40	; 0x28
    5a38:	5c99      	ldrb	r1, [r3, r2]
    5a3a:	4a1c      	ldr	r2, [pc, #112]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a3c:	2384      	movs	r3, #132	; 0x84
    5a3e:	00db      	lsls	r3, r3, #3
    5a40:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
    5a42:	4b1a      	ldr	r3, [pc, #104]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a44:	4a2a      	ldr	r2, [pc, #168]	; (5af0 <ProcessRadioRxDone+0xb54>)
    5a46:	2101      	movs	r1, #1
    5a48:	5499      	strb	r1, [r3, r2]
                    break;
    5a4a:	e006      	b.n	5a5a <ProcessRadioRxDone+0xabe>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    5a4c:	4b17      	ldr	r3, [pc, #92]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a4e:	4a18      	ldr	r2, [pc, #96]	; (5ab0 <ProcessRadioRxDone+0xb14>)
    5a50:	2101      	movs	r1, #1
    5a52:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
    5a54:	4b17      	ldr	r3, [pc, #92]	; (5ab4 <ProcessRadioRxDone+0xb18>)
    5a56:	4798      	blx	r3
                    break;
    5a58:	46c0      	nop			; (mov r8, r8)
            }

            // Rejoin handling
            if( MacCtx.NvmCtx->IsRejoinRequestPending == true )
    5a5a:	4a14      	ldr	r2, [pc, #80]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a5c:	239c      	movs	r3, #156	; 0x9c
    5a5e:	00db      	lsls	r3, r3, #3
    5a60:	58d2      	ldr	r2, [r2, r3]
    5a62:	238e      	movs	r3, #142	; 0x8e
    5a64:	009b      	lsls	r3, r3, #2
    5a66:	5cd3      	ldrb	r3, [r2, r3]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d017      	beq.n	5a9c <ProcessRadioRxDone+0xb00>
            {
                MacCtx.NvmCtx->IsRejoinRequestPending = false;
    5a6c:	4a0f      	ldr	r2, [pc, #60]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a6e:	239c      	movs	r3, #156	; 0x9c
    5a70:	00db      	lsls	r3, r3, #3
    5a72:	58d2      	ldr	r2, [r2, r3]
    5a74:	238e      	movs	r3, #142	; 0x8e
    5a76:	009b      	lsls	r3, r3, #2
    5a78:	2100      	movs	r1, #0
    5a7a:	54d1      	strb	r1, [r2, r3]

                // Stop in any case the ForceRejoinReqCycleTimer
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    5a7c:	4b1d      	ldr	r3, [pc, #116]	; (5af4 <ProcessRadioRxDone+0xb58>)
    5a7e:	0018      	movs	r0, r3
    5a80:	4b1d      	ldr	r3, [pc, #116]	; (5af8 <ProcessRadioRxDone+0xb5c>)
    5a82:	4798      	blx	r3

                // If the rejoin was trigged by MLME, set confirmation status
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    5a84:	4b09      	ldr	r3, [pc, #36]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a86:	4a1d      	ldr	r2, [pc, #116]	; (5afc <ProcessRadioRxDone+0xb60>)
    5a88:	5c9b      	ldrb	r3, [r3, r2]
    5a8a:	2204      	movs	r2, #4
    5a8c:	4013      	ands	r3, r2
    5a8e:	b2db      	uxtb	r3, r3
    5a90:	2b00      	cmp	r3, #0
    5a92:	d003      	beq.n	5a9c <ProcessRadioRxDone+0xb00>
                {
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    5a94:	4b05      	ldr	r3, [pc, #20]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a96:	4a1a      	ldr	r2, [pc, #104]	; (5b00 <ProcessRadioRxDone+0xb64>)
    5a98:	2100      	movs	r1, #0
    5a9a:	5499      	strb	r1, [r3, r2]
                }
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
    5a9c:	4b03      	ldr	r3, [pc, #12]	; (5aac <ProcessRadioRxDone+0xb10>)
    5a9e:	4a17      	ldr	r2, [pc, #92]	; (5afc <ProcessRadioRxDone+0xb60>)
    5aa0:	5c99      	ldrb	r1, [r3, r2]
    5aa2:	2002      	movs	r0, #2
    5aa4:	4301      	orrs	r1, r0
    5aa6:	5499      	strb	r1, [r3, r2]

            break;
    5aa8:	e060      	b.n	5b6c <ProcessRadioRxDone+0xbd0>
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	20000b78 	.word	0x20000b78
    5ab0:	00000415 	.word	0x00000415
    5ab4:	00004f3d 	.word	0x00004f3d
    5ab8:	0000debd 	.word	0x0000debd
    5abc:	00000425 	.word	0x00000425
    5ac0:	00000416 	.word	0x00000416
    5ac4:	00000419 	.word	0x00000419
    5ac8:	0000041c 	.word	0x0000041c
    5acc:	00000426 	.word	0x00000426
    5ad0:	00000431 	.word	0x00000431
    5ad4:	00000434 	.word	0x00000434
    5ad8:	00000414 	.word	0x00000414
    5adc:	0000021e 	.word	0x0000021e
    5ae0:	0000e29d 	.word	0x0000e29d
    5ae4:	00008561 	.word	0x00008561
    5ae8:	00006a91 	.word	0x00006a91
    5aec:	00000417 	.word	0x00000417
    5af0:	00000421 	.word	0x00000421
    5af4:	20001034 	.word	0x20001034
    5af8:	0001624d 	.word	0x0001624d
    5afc:	00000471 	.word	0x00000471
    5b00:	00000445 	.word	0x00000445
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
    5b04:	2376      	movs	r3, #118	; 0x76
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    5b0c:	18d1      	adds	r1, r2, r3
    5b0e:	237a      	movs	r3, #122	; 0x7a
    5b10:	18fb      	adds	r3, r7, r3
    5b12:	881a      	ldrh	r2, [r3, #0]
    5b14:	4b29      	ldr	r3, [pc, #164]	; (5bbc <ProcessRadioRxDone+0xc20>)
    5b16:	0018      	movs	r0, r3
    5b18:	4b29      	ldr	r3, [pc, #164]	; (5bc0 <ProcessRadioRxDone+0xc24>)
    5b1a:	4798      	blx	r3

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
    5b1c:	4b29      	ldr	r3, [pc, #164]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b1e:	4a2a      	ldr	r2, [pc, #168]	; (5bc8 <ProcessRadioRxDone+0xc2c>)
    5b20:	2103      	movs	r1, #3
    5b22:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    5b24:	4b27      	ldr	r3, [pc, #156]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b26:	4a29      	ldr	r2, [pc, #164]	; (5bcc <ProcessRadioRxDone+0xc30>)
    5b28:	2100      	movs	r1, #0
    5b2a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
    5b2c:	4b25      	ldr	r3, [pc, #148]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b2e:	4928      	ldr	r1, [pc, #160]	; (5bd0 <ProcessRadioRxDone+0xc34>)
    5b30:	4a22      	ldr	r2, [pc, #136]	; (5bbc <ProcessRadioRxDone+0xc20>)
    5b32:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
    5b34:	237a      	movs	r3, #122	; 0x7a
    5b36:	18fb      	adds	r3, r7, r3
    5b38:	881b      	ldrh	r3, [r3, #0]
    5b3a:	b2da      	uxtb	r2, r3
    5b3c:	2376      	movs	r3, #118	; 0x76
    5b3e:	18fb      	adds	r3, r7, r3
    5b40:	781b      	ldrb	r3, [r3, #0]
    5b42:	1ad3      	subs	r3, r2, r3
    5b44:	b2d9      	uxtb	r1, r3
    5b46:	4a1f      	ldr	r2, [pc, #124]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b48:	2384      	movs	r3, #132	; 0x84
    5b4a:	00db      	lsls	r3, r3, #3
    5b4c:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
    5b4e:	4b1d      	ldr	r3, [pc, #116]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b50:	4a20      	ldr	r2, [pc, #128]	; (5bd4 <ProcessRadioRxDone+0xc38>)
    5b52:	5c99      	ldrb	r1, [r3, r2]
    5b54:	2002      	movs	r0, #2
    5b56:	4301      	orrs	r1, r0
    5b58:	5499      	strb	r1, [r3, r2]
            break;
    5b5a:	e007      	b.n	5b6c <ProcessRadioRxDone+0xbd0>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    5b5c:	4b19      	ldr	r3, [pc, #100]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b5e:	4a1b      	ldr	r2, [pc, #108]	; (5bcc <ProcessRadioRxDone+0xc30>)
    5b60:	2101      	movs	r1, #1
    5b62:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
    5b64:	4b1c      	ldr	r3, [pc, #112]	; (5bd8 <ProcessRadioRxDone+0xc3c>)
    5b66:	4798      	blx	r3
            break;
    5b68:	e000      	b.n	5b6c <ProcessRadioRxDone+0xbd0>
            break;
    5b6a:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
    5b6c:	4a15      	ldr	r2, [pc, #84]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b6e:	239c      	movs	r3, #156	; 0x9c
    5b70:	00db      	lsls	r3, r3, #3
    5b72:	58d3      	ldr	r3, [r2, r3]
    5b74:	4a19      	ldr	r2, [pc, #100]	; (5bdc <ProcessRadioRxDone+0xc40>)
    5b76:	5c98      	ldrb	r0, [r3, r2]
    5b78:	4a12      	ldr	r2, [pc, #72]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b7a:	239c      	movs	r3, #156	; 0x9c
    5b7c:	00db      	lsls	r3, r3, #3
    5b7e:	58d3      	ldr	r3, [r2, r3]
    5b80:	22c8      	movs	r2, #200	; 0xc8
    5b82:	5c99      	ldrb	r1, [r3, r2]
    5b84:	4b0f      	ldr	r3, [pc, #60]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5b86:	4a16      	ldr	r2, [pc, #88]	; (5be0 <ProcessRadioRxDone+0xc44>)
    5b88:	5c9b      	ldrb	r3, [r3, r2]
    5b8a:	001a      	movs	r2, r3
    5b8c:	4b15      	ldr	r3, [pc, #84]	; (5be4 <ProcessRadioRxDone+0xc48>)
    5b8e:	4798      	blx	r3

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
    5b90:	4b15      	ldr	r3, [pc, #84]	; (5be8 <ProcessRadioRxDone+0xc4c>)
    5b92:	0018      	movs	r0, r3
    5b94:	4b15      	ldr	r3, [pc, #84]	; (5bec <ProcessRadioRxDone+0xc50>)
    5b96:	4798      	blx	r3
    5b98:	0003      	movs	r3, r0
    5b9a:	001a      	movs	r2, r3
    5b9c:	2301      	movs	r3, #1
    5b9e:	4053      	eors	r3, r2
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d007      	beq.n	5bb6 <ProcessRadioRxDone+0xc1a>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
    5ba6:	4b07      	ldr	r3, [pc, #28]	; (5bc4 <ProcessRadioRxDone+0xc28>)
    5ba8:	4a0a      	ldr	r2, [pc, #40]	; (5bd4 <ProcessRadioRxDone+0xc38>)
    5baa:	5c99      	ldrb	r1, [r3, r2]
    5bac:	2010      	movs	r0, #16
    5bae:	4301      	orrs	r1, r0
    5bb0:	5499      	strb	r1, [r3, r2]
    5bb2:	e000      	b.n	5bb6 <ProcessRadioRxDone+0xc1a>
                return;
    5bb4:	46c0      	nop			; (mov r8, r8)
    }
}
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b023      	add	sp, #140	; 0x8c
    5bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bbc:	20000db8 	.word	0x20000db8
    5bc0:	00002955 	.word	0x00002955
    5bc4:	20000b78 	.word	0x20000b78
    5bc8:	00000414 	.word	0x00000414
    5bcc:	00000415 	.word	0x00000415
    5bd0:	0000041c 	.word	0x0000041c
    5bd4:	00000471 	.word	0x00000471
    5bd8:	00004f3d 	.word	0x00004f3d
    5bdc:	00000217 	.word	0x00000217
    5be0:	00000434 	.word	0x00000434
    5be4:	000066a9 	.word	0x000066a9
    5be8:	20000f70 	.word	0x20000f70
    5bec:	00016121 	.word	0x00016121

00005bf0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5bf4:	4a0e      	ldr	r2, [pc, #56]	; (5c30 <ProcessRadioTxTimeout+0x40>)
    5bf6:	239c      	movs	r3, #156	; 0x9c
    5bf8:	00db      	lsls	r3, r3, #3
    5bfa:	58d3      	ldr	r3, [r2, r3]
    5bfc:	22c8      	movs	r2, #200	; 0xc8
    5bfe:	5c9b      	ldrb	r3, [r3, r2]
    5c00:	2b02      	cmp	r3, #2
    5c02:	d003      	beq.n	5c0c <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
    5c04:	4b0b      	ldr	r3, [pc, #44]	; (5c34 <ProcessRadioTxTimeout+0x44>)
    5c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c08:	4798      	blx	r3
    5c0a:	e001      	b.n	5c10 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
    5c0c:	4b0a      	ldr	r3, [pc, #40]	; (5c38 <ProcessRadioTxTimeout+0x48>)
    5c0e:	4798      	blx	r3
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
    5c10:	4b07      	ldr	r3, [pc, #28]	; (5c30 <ProcessRadioTxTimeout+0x40>)
    5c12:	4a0a      	ldr	r2, [pc, #40]	; (5c3c <ProcessRadioTxTimeout+0x4c>)
    5c14:	2102      	movs	r1, #2
    5c16:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
    5c18:	2002      	movs	r0, #2
    5c1a:	4b09      	ldr	r3, [pc, #36]	; (5c40 <ProcessRadioTxTimeout+0x50>)
    5c1c:	4798      	blx	r3
    MacCtx.MacFlags.Bits.MacDone = 1;
    5c1e:	4b04      	ldr	r3, [pc, #16]	; (5c30 <ProcessRadioTxTimeout+0x40>)
    5c20:	4a08      	ldr	r2, [pc, #32]	; (5c44 <ProcessRadioTxTimeout+0x54>)
    5c22:	5c99      	ldrb	r1, [r3, r2]
    5c24:	2010      	movs	r0, #16
    5c26:	4301      	orrs	r1, r0
    5c28:	5499      	strb	r1, [r3, r2]
}
    5c2a:	46c0      	nop			; (mov r8, r8)
    5c2c:	46bd      	mov	sp, r7
    5c2e:	bd80      	pop	{r7, pc}
    5c30:	20000b78 	.word	0x20000b78
    5c34:	0001efe8 	.word	0x0001efe8
    5c38:	000087d5 	.word	0x000087d5
    5c3c:	00000431 	.word	0x00000431
    5c40:	0000c2bd 	.word	0x0000c2bd
    5c44:	00000471 	.word	0x00000471

00005c48 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
    5c48:	b580      	push	{r7, lr}
    5c4a:	b084      	sub	sp, #16
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	0002      	movs	r2, r0
    5c50:	1dfb      	adds	r3, r7, #7
    5c52:	701a      	strb	r2, [r3, #0]
    5c54:	1dbb      	adds	r3, r7, #6
    5c56:	1c0a      	adds	r2, r1, #0
    5c58:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
    5c5a:	230f      	movs	r3, #15
    5c5c:	18fb      	adds	r3, r7, r3
    5c5e:	2200      	movs	r2, #0
    5c60:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5c62:	4a56      	ldr	r2, [pc, #344]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5c64:	239c      	movs	r3, #156	; 0x9c
    5c66:	00db      	lsls	r3, r3, #3
    5c68:	58d3      	ldr	r3, [r2, r3]
    5c6a:	22c8      	movs	r2, #200	; 0xc8
    5c6c:	5c9b      	ldrb	r3, [r3, r2]
    5c6e:	2b02      	cmp	r3, #2
    5c70:	d002      	beq.n	5c78 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
    5c72:	4b53      	ldr	r3, [pc, #332]	; (5dc0 <HandleRadioRxErrorTimeout+0x178>)
    5c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c76:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
    5c78:	4b52      	ldr	r3, [pc, #328]	; (5dc4 <HandleRadioRxErrorTimeout+0x17c>)
    5c7a:	4798      	blx	r3
    5c7c:	1e03      	subs	r3, r0, #0
    5c7e:	d009      	beq.n	5c94 <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
    5c80:	2002      	movs	r0, #2
    5c82:	4b51      	ldr	r3, [pc, #324]	; (5dc8 <HandleRadioRxErrorTimeout+0x180>)
    5c84:	4798      	blx	r3
        LoRaMacClassBBeaconTimerEvent( NULL );
    5c86:	2000      	movs	r0, #0
    5c88:	4b50      	ldr	r3, [pc, #320]	; (5dcc <HandleRadioRxErrorTimeout+0x184>)
    5c8a:	4798      	blx	r3
        classBRx = true;
    5c8c:	230f      	movs	r3, #15
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	2201      	movs	r2, #1
    5c92:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    5c94:	4a49      	ldr	r2, [pc, #292]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5c96:	239c      	movs	r3, #156	; 0x9c
    5c98:	00db      	lsls	r3, r3, #3
    5c9a:	58d3      	ldr	r3, [r2, r3]
    5c9c:	22c8      	movs	r2, #200	; 0xc8
    5c9e:	5c9b      	ldrb	r3, [r3, r2]
    5ca0:	2b01      	cmp	r3, #1
    5ca2:	d11b      	bne.n	5cdc <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    5ca4:	4b4a      	ldr	r3, [pc, #296]	; (5dd0 <HandleRadioRxErrorTimeout+0x188>)
    5ca6:	4798      	blx	r3
    5ca8:	1e03      	subs	r3, r0, #0
    5caa:	d009      	beq.n	5cc0 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    5cac:	2000      	movs	r0, #0
    5cae:	4b49      	ldr	r3, [pc, #292]	; (5dd4 <HandleRadioRxErrorTimeout+0x18c>)
    5cb0:	4798      	blx	r3
            LoRaMacClassBPingSlotTimerEvent( NULL );
    5cb2:	2000      	movs	r0, #0
    5cb4:	4b48      	ldr	r3, [pc, #288]	; (5dd8 <HandleRadioRxErrorTimeout+0x190>)
    5cb6:	4798      	blx	r3
            classBRx = true;
    5cb8:	230f      	movs	r3, #15
    5cba:	18fb      	adds	r3, r7, r3
    5cbc:	2201      	movs	r2, #1
    5cbe:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
    5cc0:	4b46      	ldr	r3, [pc, #280]	; (5ddc <HandleRadioRxErrorTimeout+0x194>)
    5cc2:	4798      	blx	r3
    5cc4:	1e03      	subs	r3, r0, #0
    5cc6:	d009      	beq.n	5cdc <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
    5cc8:	2000      	movs	r0, #0
    5cca:	4b45      	ldr	r3, [pc, #276]	; (5de0 <HandleRadioRxErrorTimeout+0x198>)
    5ccc:	4798      	blx	r3
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
    5cce:	2000      	movs	r0, #0
    5cd0:	4b44      	ldr	r3, [pc, #272]	; (5de4 <HandleRadioRxErrorTimeout+0x19c>)
    5cd2:	4798      	blx	r3
            classBRx = true;
    5cd4:	230f      	movs	r3, #15
    5cd6:	18fb      	adds	r3, r7, r3
    5cd8:	2201      	movs	r2, #1
    5cda:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
    5cdc:	230f      	movs	r3, #15
    5cde:	18fb      	adds	r3, r7, r3
    5ce0:	781b      	ldrb	r3, [r3, #0]
    5ce2:	2201      	movs	r2, #1
    5ce4:	4053      	eors	r3, r2
    5ce6:	b2db      	uxtb	r3, r3
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d058      	beq.n	5d9e <HandleRadioRxErrorTimeout+0x156>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    5cec:	4a33      	ldr	r2, [pc, #204]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5cee:	238e      	movs	r3, #142	; 0x8e
    5cf0:	00db      	lsls	r3, r3, #3
    5cf2:	5cd3      	ldrb	r3, [r2, r3]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d132      	bne.n	5d5e <HandleRadioRxErrorTimeout+0x116>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    5cf8:	4a30      	ldr	r2, [pc, #192]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5cfa:	239c      	movs	r3, #156	; 0x9c
    5cfc:	00db      	lsls	r3, r3, #3
    5cfe:	58d3      	ldr	r3, [r2, r3]
    5d00:	4a39      	ldr	r2, [pc, #228]	; (5de8 <HandleRadioRxErrorTimeout+0x1a0>)
    5d02:	5c9b      	ldrb	r3, [r3, r2]
    5d04:	2b00      	cmp	r3, #0
    5d06:	d004      	beq.n	5d12 <HandleRadioRxErrorTimeout+0xca>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
    5d08:	4b2c      	ldr	r3, [pc, #176]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d0a:	1dfa      	adds	r2, r7, #7
    5d0c:	4937      	ldr	r1, [pc, #220]	; (5dec <HandleRadioRxErrorTimeout+0x1a4>)
    5d0e:	7812      	ldrb	r2, [r2, #0]
    5d10:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
    5d12:	1dfb      	adds	r3, r7, #7
    5d14:	781b      	ldrb	r3, [r3, #0]
    5d16:	0018      	movs	r0, r3
    5d18:	4b35      	ldr	r3, [pc, #212]	; (5df0 <HandleRadioRxErrorTimeout+0x1a8>)
    5d1a:	4798      	blx	r3

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5d1c:	4a27      	ldr	r2, [pc, #156]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d1e:	239c      	movs	r3, #156	; 0x9c
    5d20:	00db      	lsls	r3, r3, #3
    5d22:	58d3      	ldr	r3, [r2, r3]
    5d24:	22c8      	movs	r2, #200	; 0xc8
    5d26:	5c9b      	ldrb	r3, [r3, r2]
    5d28:	2b02      	cmp	r3, #2
    5d2a:	d038      	beq.n	5d9e <HandleRadioRxErrorTimeout+0x156>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
    5d2c:	4a23      	ldr	r2, [pc, #140]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d2e:	23d0      	movs	r3, #208	; 0xd0
    5d30:	009b      	lsls	r3, r3, #2
    5d32:	58d3      	ldr	r3, [r2, r3]
    5d34:	0018      	movs	r0, r3
    5d36:	4b2f      	ldr	r3, [pc, #188]	; (5df4 <HandleRadioRxErrorTimeout+0x1ac>)
    5d38:	4798      	blx	r3
    5d3a:	0001      	movs	r1, r0
    5d3c:	4a1f      	ldr	r2, [pc, #124]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d3e:	23f3      	movs	r3, #243	; 0xf3
    5d40:	009b      	lsls	r3, r3, #2
    5d42:	58d3      	ldr	r3, [r2, r3]
    5d44:	4299      	cmp	r1, r3
    5d46:	d32a      	bcc.n	5d9e <HandleRadioRxErrorTimeout+0x156>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
    5d48:	4b2b      	ldr	r3, [pc, #172]	; (5df8 <HandleRadioRxErrorTimeout+0x1b0>)
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b2b      	ldr	r3, [pc, #172]	; (5dfc <HandleRadioRxErrorTimeout+0x1b4>)
    5d4e:	4798      	blx	r3
                    MacCtx.MacFlags.Bits.MacDone = 1;
    5d50:	4b1a      	ldr	r3, [pc, #104]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d52:	4a2b      	ldr	r2, [pc, #172]	; (5e00 <HandleRadioRxErrorTimeout+0x1b8>)
    5d54:	5c99      	ldrb	r1, [r3, r2]
    5d56:	2010      	movs	r0, #16
    5d58:	4301      	orrs	r1, r0
    5d5a:	5499      	strb	r1, [r3, r2]
    5d5c:	e01f      	b.n	5d9e <HandleRadioRxErrorTimeout+0x156>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
    5d5e:	4a17      	ldr	r2, [pc, #92]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d60:	239c      	movs	r3, #156	; 0x9c
    5d62:	00db      	lsls	r3, r3, #3
    5d64:	58d3      	ldr	r3, [r2, r3]
    5d66:	4a20      	ldr	r2, [pc, #128]	; (5de8 <HandleRadioRxErrorTimeout+0x1a0>)
    5d68:	5c9b      	ldrb	r3, [r3, r2]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d004      	beq.n	5d78 <HandleRadioRxErrorTimeout+0x130>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
    5d6e:	4b13      	ldr	r3, [pc, #76]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d70:	1dba      	adds	r2, r7, #6
    5d72:	491e      	ldr	r1, [pc, #120]	; (5dec <HandleRadioRxErrorTimeout+0x1a4>)
    5d74:	7812      	ldrb	r2, [r2, #0]
    5d76:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
    5d78:	1dbb      	adds	r3, r7, #6
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	0018      	movs	r0, r3
    5d7e:	4b1c      	ldr	r3, [pc, #112]	; (5df0 <HandleRadioRxErrorTimeout+0x1a8>)
    5d80:	4798      	blx	r3

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    5d82:	4a0e      	ldr	r2, [pc, #56]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d84:	239c      	movs	r3, #156	; 0x9c
    5d86:	00db      	lsls	r3, r3, #3
    5d88:	58d3      	ldr	r3, [r2, r3]
    5d8a:	22c8      	movs	r2, #200	; 0xc8
    5d8c:	5c9b      	ldrb	r3, [r3, r2]
    5d8e:	2b02      	cmp	r3, #2
    5d90:	d005      	beq.n	5d9e <HandleRadioRxErrorTimeout+0x156>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
    5d92:	4b0a      	ldr	r3, [pc, #40]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5d94:	4a1a      	ldr	r2, [pc, #104]	; (5e00 <HandleRadioRxErrorTimeout+0x1b8>)
    5d96:	5c99      	ldrb	r1, [r3, r2]
    5d98:	2010      	movs	r0, #16
    5d9a:	4301      	orrs	r1, r0
    5d9c:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    5d9e:	4a07      	ldr	r2, [pc, #28]	; (5dbc <HandleRadioRxErrorTimeout+0x174>)
    5da0:	239c      	movs	r3, #156	; 0x9c
    5da2:	00db      	lsls	r3, r3, #3
    5da4:	58d3      	ldr	r3, [r2, r3]
    5da6:	22c8      	movs	r2, #200	; 0xc8
    5da8:	5c9b      	ldrb	r3, [r3, r2]
    5daa:	2b02      	cmp	r3, #2
    5dac:	d101      	bne.n	5db2 <HandleRadioRxErrorTimeout+0x16a>
    {
        OpenContinuousRx2Window( );
    5dae:	4b15      	ldr	r3, [pc, #84]	; (5e04 <HandleRadioRxErrorTimeout+0x1bc>)
    5db0:	4798      	blx	r3
    }
}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	46bd      	mov	sp, r7
    5db6:	b004      	add	sp, #16
    5db8:	bd80      	pop	{r7, pc}
    5dba:	46c0      	nop			; (mov r8, r8)
    5dbc:	20000b78 	.word	0x20000b78
    5dc0:	0001efe8 	.word	0x0001efe8
    5dc4:	0000b8bb 	.word	0x0000b8bb
    5dc8:	0000b82b 	.word	0x0000b82b
    5dcc:	0000b873 	.word	0x0000b873
    5dd0:	0000b8c7 	.word	0x0000b8c7
    5dd4:	0000b83f 	.word	0x0000b83f
    5dd8:	0000b883 	.word	0x0000b883
    5ddc:	0000b8d3 	.word	0x0000b8d3
    5de0:	0000b853 	.word	0x0000b853
    5de4:	0000b893 	.word	0x0000b893
    5de8:	00000217 	.word	0x00000217
    5dec:	00000431 	.word	0x00000431
    5df0:	0000c2bd 	.word	0x0000c2bd
    5df4:	00016409 	.word	0x00016409
    5df8:	20000f28 	.word	0x20000f28
    5dfc:	0001624d 	.word	0x0001624d
    5e00:	00000471 	.word	0x00000471
    5e04:	000087d5 	.word	0x000087d5

00005e08 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
    5e0c:	2106      	movs	r1, #6
    5e0e:	2005      	movs	r0, #5
    5e10:	4b02      	ldr	r3, [pc, #8]	; (5e1c <ProcessRadioRxError+0x14>)
    5e12:	4798      	blx	r3
}
    5e14:	46c0      	nop			; (mov r8, r8)
    5e16:	46bd      	mov	sp, r7
    5e18:	bd80      	pop	{r7, pc}
    5e1a:	46c0      	nop			; (mov r8, r8)
    5e1c:	00005c49 	.word	0x00005c49

00005e20 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
    5e20:	b580      	push	{r7, lr}
    5e22:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
    5e24:	2104      	movs	r1, #4
    5e26:	2003      	movs	r0, #3
    5e28:	4b02      	ldr	r3, [pc, #8]	; (5e34 <ProcessRadioRxTimeout+0x14>)
    5e2a:	4798      	blx	r3
}
    5e2c:	46c0      	nop			; (mov r8, r8)
    5e2e:	46bd      	mov	sp, r7
    5e30:	bd80      	pop	{r7, pc}
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	00005c49 	.word	0x00005c49

00005e38 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b082      	sub	sp, #8
    5e3c:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    5e3e:	003b      	movs	r3, r7
    5e40:	0018      	movs	r0, r3
    5e42:	4b20      	ldr	r3, [pc, #128]	; (5ec4 <LoRaMacHandleIrqEvents+0x8c>)
    5e44:	4798      	blx	r3
    events = LoRaMacRadioEvents;
    5e46:	4b20      	ldr	r3, [pc, #128]	; (5ec8 <LoRaMacHandleIrqEvents+0x90>)
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
    5e4c:	4b1e      	ldr	r3, [pc, #120]	; (5ec8 <LoRaMacHandleIrqEvents+0x90>)
    5e4e:	2200      	movs	r2, #0
    5e50:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
    5e52:	003b      	movs	r3, r7
    5e54:	0018      	movs	r0, r3
    5e56:	4b1d      	ldr	r3, [pc, #116]	; (5ecc <LoRaMacHandleIrqEvents+0x94>)
    5e58:	4798      	blx	r3

    if( events.Value != 0 )
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d02c      	beq.n	5eba <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
    5e60:	1d3b      	adds	r3, r7, #4
    5e62:	781b      	ldrb	r3, [r3, #0]
    5e64:	2210      	movs	r2, #16
    5e66:	4013      	ands	r3, r2
    5e68:	b2db      	uxtb	r3, r3
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d001      	beq.n	5e72 <LoRaMacHandleIrqEvents+0x3a>
        {
            ProcessRadioTxDone( );
    5e6e:	4b18      	ldr	r3, [pc, #96]	; (5ed0 <LoRaMacHandleIrqEvents+0x98>)
    5e70:	4798      	blx	r3
        }
        if( events.Events.RxDone == 1 )
    5e72:	1d3b      	adds	r3, r7, #4
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	2208      	movs	r2, #8
    5e78:	4013      	ands	r3, r2
    5e7a:	b2db      	uxtb	r3, r3
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d001      	beq.n	5e84 <LoRaMacHandleIrqEvents+0x4c>
        {
            ProcessRadioRxDone( );
    5e80:	4b14      	ldr	r3, [pc, #80]	; (5ed4 <LoRaMacHandleIrqEvents+0x9c>)
    5e82:	4798      	blx	r3
        }
        if( events.Events.TxTimeout == 1 )
    5e84:	1d3b      	adds	r3, r7, #4
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	2204      	movs	r2, #4
    5e8a:	4013      	ands	r3, r2
    5e8c:	b2db      	uxtb	r3, r3
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d001      	beq.n	5e96 <LoRaMacHandleIrqEvents+0x5e>
        {
            ProcessRadioTxTimeout( );
    5e92:	4b11      	ldr	r3, [pc, #68]	; (5ed8 <LoRaMacHandleIrqEvents+0xa0>)
    5e94:	4798      	blx	r3
        }
        if( events.Events.RxError == 1 )
    5e96:	1d3b      	adds	r3, r7, #4
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	2202      	movs	r2, #2
    5e9c:	4013      	ands	r3, r2
    5e9e:	b2db      	uxtb	r3, r3
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d001      	beq.n	5ea8 <LoRaMacHandleIrqEvents+0x70>
        {
            ProcessRadioRxError( );
    5ea4:	4b0d      	ldr	r3, [pc, #52]	; (5edc <LoRaMacHandleIrqEvents+0xa4>)
    5ea6:	4798      	blx	r3
        }
        if( events.Events.RxTimeout == 1 )
    5ea8:	1d3b      	adds	r3, r7, #4
    5eaa:	781b      	ldrb	r3, [r3, #0]
    5eac:	2201      	movs	r2, #1
    5eae:	4013      	ands	r3, r2
    5eb0:	b2db      	uxtb	r3, r3
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d001      	beq.n	5eba <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
    5eb6:	4b0a      	ldr	r3, [pc, #40]	; (5ee0 <LoRaMacHandleIrqEvents+0xa8>)
    5eb8:	4798      	blx	r3
        }
    }
}
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	46bd      	mov	sp, r7
    5ebe:	b002      	add	sp, #8
    5ec0:	bd80      	pop	{r7, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	00002a65 	.word	0x00002a65
    5ec8:	2000129c 	.word	0x2000129c
    5ecc:	00002a83 	.word	0x00002a83
    5ed0:	00004d6d 	.word	0x00004d6d
    5ed4:	00004f9d 	.word	0x00004f9d
    5ed8:	00005bf1 	.word	0x00005bf1
    5edc:	00005e09 	.word	0x00005e09
    5ee0:	00005e21 	.word	0x00005e21

00005ee4 <LoRaMacIsBusy>:

static LoRaMacBoolean_t LoRaMacIsBusy( void )
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
    5ee8:	4a08      	ldr	r2, [pc, #32]	; (5f0c <LoRaMacIsBusy+0x28>)
    5eea:	23d6      	movs	r3, #214	; 0xd6
    5eec:	009b      	lsls	r3, r3, #2
    5eee:	58d3      	ldr	r3, [r2, r3]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d106      	bne.n	5f02 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    5ef4:	4b05      	ldr	r3, [pc, #20]	; (5f0c <LoRaMacIsBusy+0x28>)
    5ef6:	4a06      	ldr	r2, [pc, #24]	; (5f10 <LoRaMacIsBusy+0x2c>)
    5ef8:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
    5efa:	2b01      	cmp	r3, #1
    5efc:	d101      	bne.n	5f02 <LoRaMacIsBusy+0x1e>
    {
        return LORAMAC_FALSE;
    5efe:	2300      	movs	r3, #0
    5f00:	e000      	b.n	5f04 <LoRaMacIsBusy+0x20>
    }
    return LORAMAC_TRUE;
    5f02:	2301      	movs	r3, #1
}
    5f04:	0018      	movs	r0, r3
    5f06:	46bd      	mov	sp, r7
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	20000b78 	.word	0x20000b78
    5f10:	00000472 	.word	0x00000472

00005f14 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b082      	sub	sp, #8
    5f18:	af00      	add	r7, sp, #0
    5f1a:	0002      	movs	r2, r0
    5f1c:	1dfb      	adds	r3, r7, #7
    5f1e:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
    5f20:	4b04      	ldr	r3, [pc, #16]	; (5f34 <LoRaMacEnableRequests+0x20>)
    5f22:	1dfa      	adds	r2, r7, #7
    5f24:	4904      	ldr	r1, [pc, #16]	; (5f38 <LoRaMacEnableRequests+0x24>)
    5f26:	7812      	ldrb	r2, [r2, #0]
    5f28:	545a      	strb	r2, [r3, r1]
}
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	46bd      	mov	sp, r7
    5f2e:	b002      	add	sp, #8
    5f30:	bd80      	pop	{r7, pc}
    5f32:	46c0      	nop			; (mov r8, r8)
    5f34:	20000b78 	.word	0x20000b78
    5f38:	00000472 	.word	0x00000472

00005f3c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
    5f3c:	b580      	push	{r7, lr}
    5f3e:	b082      	sub	sp, #8
    5f40:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
    5f42:	1d3b      	adds	r3, r7, #4
    5f44:	4a2c      	ldr	r2, [pc, #176]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f46:	492d      	ldr	r1, [pc, #180]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5f48:	5c52      	ldrb	r2, [r2, r1]
    5f4a:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
    5f4c:	4a2a      	ldr	r2, [pc, #168]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f4e:	23d6      	movs	r3, #214	; 0xd6
    5f50:	009b      	lsls	r3, r3, #2
    5f52:	58d3      	ldr	r3, [r2, r3]
    5f54:	2b00      	cmp	r3, #0
    5f56:	d14a      	bne.n	5fee <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    5f58:	4b27      	ldr	r3, [pc, #156]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f5a:	4a28      	ldr	r2, [pc, #160]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5f5c:	5c9b      	ldrb	r3, [r3, r2]
    5f5e:	2201      	movs	r2, #1
    5f60:	4013      	ands	r3, r2
    5f62:	b2db      	uxtb	r3, r3
    5f64:	2b00      	cmp	r3, #0
    5f66:	d005      	beq.n	5f74 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
    5f68:	4b23      	ldr	r3, [pc, #140]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f6a:	4a24      	ldr	r2, [pc, #144]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5f6c:	5c99      	ldrb	r1, [r3, r2]
    5f6e:	2001      	movs	r0, #1
    5f70:	4381      	bics	r1, r0
    5f72:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    5f74:	4b20      	ldr	r3, [pc, #128]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f76:	4a21      	ldr	r2, [pc, #132]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5f78:	5c9b      	ldrb	r3, [r3, r2]
    5f7a:	2204      	movs	r2, #4
    5f7c:	4013      	ands	r3, r2
    5f7e:	b2db      	uxtb	r3, r3
    5f80:	2b00      	cmp	r3, #0
    5f82:	d005      	beq.n	5f90 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    5f84:	4b1c      	ldr	r3, [pc, #112]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5f86:	4a1d      	ldr	r2, [pc, #116]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5f88:	5c99      	ldrb	r1, [r3, r2]
    5f8a:	2004      	movs	r0, #4
    5f8c:	4381      	bics	r1, r0
    5f8e:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    5f90:	2001      	movs	r0, #1
    5f92:	4b1b      	ldr	r3, [pc, #108]	; (6000 <LoRaMacHandleRequestEvents+0xc4>)
    5f94:	4798      	blx	r3

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
    5f96:	1d3b      	adds	r3, r7, #4
    5f98:	781b      	ldrb	r3, [r3, #0]
    5f9a:	2201      	movs	r2, #1
    5f9c:	4013      	ands	r3, r2
    5f9e:	b2db      	uxtb	r3, r3
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d007      	beq.n	5fb4 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
    5fa4:	4a14      	ldr	r2, [pc, #80]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5fa6:	23d7      	movs	r3, #215	; 0xd7
    5fa8:	009b      	lsls	r3, r3, #2
    5faa:	58d3      	ldr	r3, [r2, r3]
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	4a15      	ldr	r2, [pc, #84]	; (6004 <LoRaMacHandleRequestEvents+0xc8>)
    5fb0:	0010      	movs	r0, r2
    5fb2:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
    5fb4:	1d3b      	adds	r3, r7, #4
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	2204      	movs	r2, #4
    5fba:	4013      	ands	r3, r2
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d00d      	beq.n	5fde <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
    5fc2:	4b11      	ldr	r3, [pc, #68]	; (6008 <LoRaMacHandleRequestEvents+0xcc>)
    5fc4:	0018      	movs	r0, r3
    5fc6:	4b11      	ldr	r3, [pc, #68]	; (600c <LoRaMacHandleRequestEvents+0xd0>)
    5fc8:	4798      	blx	r3
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
    5fca:	4b11      	ldr	r3, [pc, #68]	; (6010 <LoRaMacHandleRequestEvents+0xd4>)
    5fcc:	4798      	blx	r3
    5fce:	1e03      	subs	r3, r0, #0
    5fd0:	d005      	beq.n	5fde <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
    5fd2:	4b09      	ldr	r3, [pc, #36]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5fd4:	4a09      	ldr	r2, [pc, #36]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5fd6:	5c99      	ldrb	r1, [r3, r2]
    5fd8:	2004      	movs	r0, #4
    5fda:	4301      	orrs	r1, r0
    5fdc:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
    5fde:	4b0d      	ldr	r3, [pc, #52]	; (6014 <LoRaMacHandleRequestEvents+0xd8>)
    5fe0:	4798      	blx	r3

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
    5fe2:	4b05      	ldr	r3, [pc, #20]	; (5ff8 <LoRaMacHandleRequestEvents+0xbc>)
    5fe4:	4a05      	ldr	r2, [pc, #20]	; (5ffc <LoRaMacHandleRequestEvents+0xc0>)
    5fe6:	5c99      	ldrb	r1, [r3, r2]
    5fe8:	2010      	movs	r0, #16
    5fea:	4381      	bics	r1, r0
    5fec:	5499      	strb	r1, [r3, r2]
    }
}
    5fee:	46c0      	nop			; (mov r8, r8)
    5ff0:	46bd      	mov	sp, r7
    5ff2:	b002      	add	sp, #8
    5ff4:	bd80      	pop	{r7, pc}
    5ff6:	46c0      	nop			; (mov r8, r8)
    5ff8:	20000b78 	.word	0x20000b78
    5ffc:	00000471 	.word	0x00000471
    6000:	00005f15 	.word	0x00005f15
    6004:	20000fa8 	.word	0x20000fa8
    6008:	20000fbc 	.word	0x20000fbc
    600c:	0000c371 	.word	0x0000c371
    6010:	0000c445 	.word	0x0000c445
    6014:	0000b909 	.word	0x0000b909

00006018 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
    6018:	b580      	push	{r7, lr}
    601a:	b082      	sub	sp, #8
    601c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
    601e:	4b2d      	ldr	r3, [pc, #180]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6020:	4a2d      	ldr	r2, [pc, #180]	; (60d8 <LoRaMacHandleIndicationEvents+0xc0>)
    6022:	5c9b      	ldrb	r3, [r3, r2]
    6024:	2208      	movs	r2, #8
    6026:	4013      	ands	r3, r2
    6028:	b2db      	uxtb	r3, r3
    602a:	2b00      	cmp	r3, #0
    602c:	d00d      	beq.n	604a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    602e:	4a29      	ldr	r2, [pc, #164]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6030:	23d7      	movs	r3, #215	; 0xd7
    6032:	009b      	lsls	r3, r3, #2
    6034:	58d3      	ldr	r3, [r2, r3]
    6036:	68db      	ldr	r3, [r3, #12]
    6038:	4a28      	ldr	r2, [pc, #160]	; (60dc <LoRaMacHandleIndicationEvents+0xc4>)
    603a:	0010      	movs	r0, r2
    603c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
    603e:	4b25      	ldr	r3, [pc, #148]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6040:	4a25      	ldr	r2, [pc, #148]	; (60d8 <LoRaMacHandleIndicationEvents+0xc0>)
    6042:	5c99      	ldrb	r1, [r3, r2]
    6044:	2008      	movs	r0, #8
    6046:	4381      	bics	r1, r0
    6048:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
    604a:	4a22      	ldr	r2, [pc, #136]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    604c:	23d6      	movs	r3, #214	; 0xd6
    604e:	009b      	lsls	r3, r3, #2
    6050:	58d3      	ldr	r3, [r2, r3]
    6052:	2b00      	cmp	r3, #0
    6054:	d114      	bne.n	6080 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
    6056:	1dfb      	adds	r3, r7, #7
    6058:	2200      	movs	r2, #0
    605a:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
    605c:	1dfb      	adds	r3, r7, #7
    605e:	0018      	movs	r0, r3
    6060:	4b1f      	ldr	r3, [pc, #124]	; (60e0 <LoRaMacHandleIndicationEvents+0xc8>)
    6062:	4798      	blx	r3
        if( isStickyMacCommandPending == true )
    6064:	1dfb      	adds	r3, r7, #7
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	2b00      	cmp	r3, #0
    606a:	d009      	beq.n	6080 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
    606c:	4b1d      	ldr	r3, [pc, #116]	; (60e4 <LoRaMacHandleIndicationEvents+0xcc>)
    606e:	4798      	blx	r3
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
    6070:	4a18      	ldr	r2, [pc, #96]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6072:	23d7      	movs	r3, #215	; 0xd7
    6074:	009b      	lsls	r3, r3, #2
    6076:	58d3      	ldr	r3, [r2, r3]
    6078:	68db      	ldr	r3, [r3, #12]
    607a:	4a18      	ldr	r2, [pc, #96]	; (60dc <LoRaMacHandleIndicationEvents+0xc4>)
    607c:	0010      	movs	r0, r2
    607e:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    6080:	4b14      	ldr	r3, [pc, #80]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6082:	4a15      	ldr	r2, [pc, #84]	; (60d8 <LoRaMacHandleIndicationEvents+0xc0>)
    6084:	5c9b      	ldrb	r3, [r3, r2]
    6086:	2202      	movs	r2, #2
    6088:	4013      	ands	r3, r2
    608a:	b2db      	uxtb	r3, r3
    608c:	2b00      	cmp	r3, #0
    608e:	d01d      	beq.n	60cc <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
    6090:	4b10      	ldr	r3, [pc, #64]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    6092:	4a11      	ldr	r2, [pc, #68]	; (60d8 <LoRaMacHandleIndicationEvents+0xc0>)
    6094:	5c99      	ldrb	r1, [r3, r2]
    6096:	2002      	movs	r0, #2
    6098:	4381      	bics	r1, r0
    609a:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    609c:	4a0d      	ldr	r2, [pc, #52]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    609e:	239c      	movs	r3, #156	; 0x9c
    60a0:	00db      	lsls	r3, r3, #3
    60a2:	58d3      	ldr	r3, [r2, r3]
    60a4:	22c8      	movs	r2, #200	; 0xc8
    60a6:	5c9b      	ldrb	r3, [r3, r2]
    60a8:	2b02      	cmp	r3, #2
    60aa:	d107      	bne.n	60bc <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
    60ac:	4a09      	ldr	r2, [pc, #36]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    60ae:	23d6      	movs	r3, #214	; 0xd6
    60b0:	009b      	lsls	r3, r3, #2
    60b2:	58d3      	ldr	r3, [r2, r3]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d101      	bne.n	60bc <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
    60b8:	4b0b      	ldr	r3, [pc, #44]	; (60e8 <LoRaMacHandleIndicationEvents+0xd0>)
    60ba:	4798      	blx	r3
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
    60bc:	4a05      	ldr	r2, [pc, #20]	; (60d4 <LoRaMacHandleIndicationEvents+0xbc>)
    60be:	23d7      	movs	r3, #215	; 0xd7
    60c0:	009b      	lsls	r3, r3, #2
    60c2:	58d3      	ldr	r3, [r2, r3]
    60c4:	685b      	ldr	r3, [r3, #4]
    60c6:	4a09      	ldr	r2, [pc, #36]	; (60ec <LoRaMacHandleIndicationEvents+0xd4>)
    60c8:	0010      	movs	r0, r2
    60ca:	4798      	blx	r3
    }
}
    60cc:	46c0      	nop			; (mov r8, r8)
    60ce:	46bd      	mov	sp, r7
    60d0:	b002      	add	sp, #8
    60d2:	bd80      	pop	{r7, pc}
    60d4:	20000b78 	.word	0x20000b78
    60d8:	00000471 	.word	0x00000471
    60dc:	20000fd0 	.word	0x20000fd0
    60e0:	0000bfe9 	.word	0x0000bfe9
    60e4:	00006a69 	.word	0x00006a69
    60e8:	000087d5 	.word	0x000087d5
    60ec:	20000f8c 	.word	0x20000f8c

000060f0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
    60f0:	b590      	push	{r4, r7, lr}
    60f2:	b083      	sub	sp, #12
    60f4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
    60f6:	4b30      	ldr	r3, [pc, #192]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    60f8:	4a30      	ldr	r2, [pc, #192]	; (61bc <LoRaMacHandleMcpsRequest+0xcc>)
    60fa:	5c9b      	ldrb	r3, [r3, r2]
    60fc:	2201      	movs	r2, #1
    60fe:	4013      	ands	r3, r2
    6100:	b2db      	uxtb	r3, r3
    6102:	2b00      	cmp	r3, #0
    6104:	d053      	beq.n	61ae <LoRaMacHandleMcpsRequest+0xbe>
    {
        bool stopRetransmission = false;
    6106:	1dfb      	adds	r3, r7, #7
    6108:	2200      	movs	r2, #0
    610a:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
    610c:	1dbb      	adds	r3, r7, #6
    610e:	2200      	movs	r2, #0
    6110:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
    6112:	4a29      	ldr	r2, [pc, #164]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    6114:	2386      	movs	r3, #134	; 0x86
    6116:	00db      	lsls	r3, r3, #3
    6118:	5cd3      	ldrb	r3, [r2, r3]
    611a:	2b00      	cmp	r3, #0
    611c:	d005      	beq.n	612a <LoRaMacHandleMcpsRequest+0x3a>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
    611e:	4a26      	ldr	r2, [pc, #152]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    6120:	2386      	movs	r3, #134	; 0x86
    6122:	00db      	lsls	r3, r3, #3
    6124:	5cd3      	ldrb	r3, [r2, r3]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
    6126:	2b03      	cmp	r3, #3
    6128:	d105      	bne.n	6136 <LoRaMacHandleMcpsRequest+0x46>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
    612a:	1dfc      	adds	r4, r7, #7
    612c:	4b24      	ldr	r3, [pc, #144]	; (61c0 <LoRaMacHandleMcpsRequest+0xd0>)
    612e:	4798      	blx	r3
    6130:	0003      	movs	r3, r0
    6132:	7023      	strb	r3, [r4, #0]
    6134:	e016      	b.n	6164 <LoRaMacHandleMcpsRequest+0x74>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
    6136:	4a20      	ldr	r2, [pc, #128]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    6138:	2386      	movs	r3, #134	; 0x86
    613a:	00db      	lsls	r3, r3, #3
    613c:	5cd3      	ldrb	r3, [r2, r3]
    613e:	2b01      	cmp	r3, #1
    6140:	d110      	bne.n	6164 <LoRaMacHandleMcpsRequest+0x74>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
    6142:	4a1d      	ldr	r2, [pc, #116]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    6144:	239c      	movs	r3, #156	; 0x9c
    6146:	00db      	lsls	r3, r3, #3
    6148:	58d3      	ldr	r3, [r2, r3]
    614a:	4a1e      	ldr	r2, [pc, #120]	; (61c4 <LoRaMacHandleMcpsRequest+0xd4>)
    614c:	5c9b      	ldrb	r3, [r3, r2]
    614e:	2b00      	cmp	r3, #0
    6150:	d005      	beq.n	615e <LoRaMacHandleMcpsRequest+0x6e>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
    6152:	1dfc      	adds	r4, r7, #7
    6154:	4b1c      	ldr	r3, [pc, #112]	; (61c8 <LoRaMacHandleMcpsRequest+0xd8>)
    6156:	4798      	blx	r3
    6158:	0003      	movs	r3, r0
    615a:	7023      	strb	r3, [r4, #0]
    615c:	e002      	b.n	6164 <LoRaMacHandleMcpsRequest+0x74>
            }
            else
            {
                waitForRetransmission = true;
    615e:	1dbb      	adds	r3, r7, #6
    6160:	2201      	movs	r2, #1
    6162:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
    6164:	1dfb      	adds	r3, r7, #7
    6166:	781b      	ldrb	r3, [r3, #0]
    6168:	2b00      	cmp	r3, #0
    616a:	d009      	beq.n	6180 <LoRaMacHandleMcpsRequest+0x90>
        {// Stop retransmission
            StopRetransmission( );
    616c:	4b17      	ldr	r3, [pc, #92]	; (61cc <LoRaMacHandleMcpsRequest+0xdc>)
    616e:	4798      	blx	r3

            if( IsReJoin0Required( ) == true )
    6170:	4b17      	ldr	r3, [pc, #92]	; (61d0 <LoRaMacHandleMcpsRequest+0xe0>)
    6172:	4798      	blx	r3
    6174:	1e03      	subs	r3, r0, #0
    6176:	d01a      	beq.n	61ae <LoRaMacHandleMcpsRequest+0xbe>
            {
                SendReJoinReq( REJOIN_REQ_0 );
    6178:	2000      	movs	r0, #0
    617a:	4b16      	ldr	r3, [pc, #88]	; (61d4 <LoRaMacHandleMcpsRequest+0xe4>)
    617c:	4798      	blx	r3
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
    617e:	e016      	b.n	61ae <LoRaMacHandleMcpsRequest+0xbe>
        else if( waitForRetransmission == false )
    6180:	1dbb      	adds	r3, r7, #6
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	2201      	movs	r2, #1
    6186:	4053      	eors	r3, r2
    6188:	b2db      	uxtb	r3, r3
    618a:	2b00      	cmp	r3, #0
    618c:	d00f      	beq.n	61ae <LoRaMacHandleMcpsRequest+0xbe>
            MacCtx.MacFlags.Bits.MacDone = 0;
    618e:	4b0a      	ldr	r3, [pc, #40]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    6190:	4a0a      	ldr	r2, [pc, #40]	; (61bc <LoRaMacHandleMcpsRequest+0xcc>)
    6192:	5c99      	ldrb	r1, [r3, r2]
    6194:	2010      	movs	r0, #16
    6196:	4381      	bics	r1, r0
    6198:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
    619a:	4a07      	ldr	r2, [pc, #28]	; (61b8 <LoRaMacHandleMcpsRequest+0xc8>)
    619c:	239c      	movs	r3, #156	; 0x9c
    619e:	00db      	lsls	r3, r3, #3
    61a0:	58d3      	ldr	r3, [r2, r3]
    61a2:	4a08      	ldr	r2, [pc, #32]	; (61c4 <LoRaMacHandleMcpsRequest+0xd4>)
    61a4:	2100      	movs	r1, #0
    61a6:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
    61a8:	2000      	movs	r0, #0
    61aa:	4b0b      	ldr	r3, [pc, #44]	; (61d8 <LoRaMacHandleMcpsRequest+0xe8>)
    61ac:	4798      	blx	r3
}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	46bd      	mov	sp, r7
    61b2:	b003      	add	sp, #12
    61b4:	bd90      	pop	{r4, r7, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	20000b78 	.word	0x20000b78
    61bc:	00000471 	.word	0x00000471
    61c0:	00009091 	.word	0x00009091
    61c4:	00000216 	.word	0x00000216
    61c8:	000090fd 	.word	0x000090fd
    61cc:	00009155 	.word	0x00009155
    61d0:	00008769 	.word	0x00008769
    61d4:	00007d7d 	.word	0x00007d7d
    61d8:	00006411 	.word	0x00006411

000061dc <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
    61dc:	b580      	push	{r7, lr}
    61de:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
    61e0:	4b14      	ldr	r3, [pc, #80]	; (6234 <LoRaMacHandleJoinRequest+0x58>)
    61e2:	4a15      	ldr	r2, [pc, #84]	; (6238 <LoRaMacHandleJoinRequest+0x5c>)
    61e4:	5c9b      	ldrb	r3, [r3, r2]
    61e6:	2204      	movs	r2, #4
    61e8:	4013      	ands	r3, r2
    61ea:	b2db      	uxtb	r3, r3
    61ec:	2b00      	cmp	r3, #0
    61ee:	d01e      	beq.n	622e <LoRaMacHandleJoinRequest+0x52>
    61f0:	2000      	movs	r0, #0
    61f2:	4b12      	ldr	r3, [pc, #72]	; (623c <LoRaMacHandleJoinRequest+0x60>)
    61f4:	4798      	blx	r3
    61f6:	1e03      	subs	r3, r0, #0
    61f8:	d019      	beq.n	622e <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
    61fa:	2000      	movs	r0, #0
    61fc:	4b10      	ldr	r3, [pc, #64]	; (6240 <LoRaMacHandleJoinRequest+0x64>)
    61fe:	4798      	blx	r3
    6200:	1e03      	subs	r3, r0, #0
    6202:	d109      	bne.n	6218 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
    6204:	4b0f      	ldr	r3, [pc, #60]	; (6244 <LoRaMacHandleJoinRequest+0x68>)
    6206:	4798      	blx	r3
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    6208:	4a0a      	ldr	r2, [pc, #40]	; (6234 <LoRaMacHandleJoinRequest+0x58>)
    620a:	239c      	movs	r3, #156	; 0x9c
    620c:	00db      	lsls	r3, r3, #3
    620e:	58d2      	ldr	r2, [r2, r3]
    6210:	2388      	movs	r3, #136	; 0x88
    6212:	005b      	lsls	r3, r3, #1
    6214:	2100      	movs	r1, #0
    6216:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    6218:	4a06      	ldr	r2, [pc, #24]	; (6234 <LoRaMacHandleJoinRequest+0x58>)
    621a:	23d6      	movs	r3, #214	; 0xd6
    621c:	009b      	lsls	r3, r3, #2
    621e:	58d3      	ldr	r3, [r2, r3]
    6220:	2202      	movs	r2, #2
    6222:	4393      	bics	r3, r2
    6224:	0019      	movs	r1, r3
    6226:	4a03      	ldr	r2, [pc, #12]	; (6234 <LoRaMacHandleJoinRequest+0x58>)
    6228:	23d6      	movs	r3, #214	; 0xd6
    622a:	009b      	lsls	r3, r3, #2
    622c:	50d1      	str	r1, [r2, r3]
    }
}
    622e:	46c0      	nop			; (mov r8, r8)
    6230:	46bd      	mov	sp, r7
    6232:	bd80      	pop	{r7, pc}
    6234:	20000b78 	.word	0x20000b78
    6238:	00000471 	.word	0x00000471
    623c:	0000c339 	.word	0x0000c339
    6240:	0000c26d 	.word	0x0000c26d
    6244:	0000e369 	.word	0x0000e369

00006248 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
    6248:	b580      	push	{r7, lr}
    624a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
    624c:	4b16      	ldr	r3, [pc, #88]	; (62a8 <LoRaMacCheckForTxTimeout+0x60>)
    624e:	4798      	blx	r3
    6250:	0003      	movs	r3, r0
    6252:	2b02      	cmp	r3, #2
    6254:	d004      	beq.n	6260 <LoRaMacCheckForTxTimeout+0x18>
        ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
    6256:	4b14      	ldr	r3, [pc, #80]	; (62a8 <LoRaMacCheckForTxTimeout+0x60>)
    6258:	4798      	blx	r3
    625a:	0003      	movs	r3, r0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
    625c:	2b02      	cmp	r3, #2
    625e:	d11f      	bne.n	62a0 <LoRaMacCheckForTxTimeout+0x58>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    6260:	4a12      	ldr	r2, [pc, #72]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    6262:	23d6      	movs	r3, #214	; 0xd6
    6264:	009b      	lsls	r3, r3, #2
    6266:	58d3      	ldr	r3, [r2, r3]
    6268:	2202      	movs	r2, #2
    626a:	4393      	bics	r3, r2
    626c:	0019      	movs	r1, r3
    626e:	4a0f      	ldr	r2, [pc, #60]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    6270:	23d6      	movs	r3, #214	; 0xd6
    6272:	009b      	lsls	r3, r3, #2
    6274:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    6276:	4a0d      	ldr	r2, [pc, #52]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    6278:	239c      	movs	r3, #156	; 0x9c
    627a:	00db      	lsls	r3, r3, #3
    627c:	58d2      	ldr	r2, [r2, r3]
    627e:	2388      	movs	r3, #136	; 0x88
    6280:	005b      	lsls	r3, r3, #1
    6282:	5cd1      	ldrb	r1, [r2, r3]
    6284:	4b09      	ldr	r3, [pc, #36]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    6286:	4a0a      	ldr	r2, [pc, #40]	; (62b0 <LoRaMacCheckForTxTimeout+0x68>)
    6288:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
    628a:	4b08      	ldr	r3, [pc, #32]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    628c:	4a09      	ldr	r2, [pc, #36]	; (62b4 <LoRaMacCheckForTxTimeout+0x6c>)
    628e:	2100      	movs	r1, #0
    6290:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
    6292:	4a06      	ldr	r2, [pc, #24]	; (62ac <LoRaMacCheckForTxTimeout+0x64>)
    6294:	2387      	movs	r3, #135	; 0x87
    6296:	00db      	lsls	r3, r3, #3
    6298:	2100      	movs	r1, #0
    629a:	50d1      	str	r1, [r2, r3]
        return 0x01;
    629c:	2301      	movs	r3, #1
    629e:	e000      	b.n	62a2 <LoRaMacCheckForTxTimeout+0x5a>
    }
    return 0x00;
    62a0:	2300      	movs	r3, #0
}
    62a2:	0018      	movs	r0, r3
    62a4:	46bd      	mov	sp, r7
    62a6:	bd80      	pop	{r7, pc}
    62a8:	0000c325 	.word	0x0000c325
    62ac:	20000b78 	.word	0x20000b78
    62b0:	00000435 	.word	0x00000435
    62b4:	00000434 	.word	0x00000434

000062b8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
    62b8:	b580      	push	{r7, lr}
    62ba:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    62bc:	200b      	movs	r0, #11
    62be:	4b12      	ldr	r3, [pc, #72]	; (6308 <LoRaMacCheckForBeaconAcquisition+0x50>)
    62c0:	4798      	blx	r3
    62c2:	1e03      	subs	r3, r0, #0
    62c4:	d01c      	beq.n	6300 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
    62c6:	4b11      	ldr	r3, [pc, #68]	; (630c <LoRaMacCheckForBeaconAcquisition+0x54>)
    62c8:	4a11      	ldr	r2, [pc, #68]	; (6310 <LoRaMacCheckForBeaconAcquisition+0x58>)
    62ca:	5c9b      	ldrb	r3, [r3, r2]
    62cc:	2201      	movs	r2, #1
    62ce:	4013      	ands	r3, r2
    62d0:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
    62d2:	2b00      	cmp	r3, #0
    62d4:	d114      	bne.n	6300 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
    62d6:	4b0d      	ldr	r3, [pc, #52]	; (630c <LoRaMacCheckForBeaconAcquisition+0x54>)
    62d8:	4a0d      	ldr	r2, [pc, #52]	; (6310 <LoRaMacCheckForBeaconAcquisition+0x58>)
    62da:	5c9b      	ldrb	r3, [r3, r2]
    62dc:	2204      	movs	r2, #4
    62de:	4013      	ands	r3, r2
    62e0:	b2db      	uxtb	r3, r3
    62e2:	2b00      	cmp	r3, #0
    62e4:	d00c      	beq.n	6300 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    62e6:	4a09      	ldr	r2, [pc, #36]	; (630c <LoRaMacCheckForBeaconAcquisition+0x54>)
    62e8:	23d6      	movs	r3, #214	; 0xd6
    62ea:	009b      	lsls	r3, r3, #2
    62ec:	58d3      	ldr	r3, [r2, r3]
    62ee:	2202      	movs	r2, #2
    62f0:	4393      	bics	r3, r2
    62f2:	0019      	movs	r1, r3
    62f4:	4a05      	ldr	r2, [pc, #20]	; (630c <LoRaMacCheckForBeaconAcquisition+0x54>)
    62f6:	23d6      	movs	r3, #214	; 0xd6
    62f8:	009b      	lsls	r3, r3, #2
    62fa:	50d1      	str	r1, [r2, r3]
            return 0x01;
    62fc:	2301      	movs	r3, #1
    62fe:	e000      	b.n	6302 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
    6300:	2300      	movs	r3, #0
}
    6302:	0018      	movs	r0, r3
    6304:	46bd      	mov	sp, r7
    6306:	bd80      	pop	{r7, pc}
    6308:	0000c339 	.word	0x0000c339
    630c:	20000b78 	.word	0x20000b78
    6310:	00000471 	.word	0x00000471

00006314 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
    6314:	b580      	push	{r7, lr}
    6316:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
    6318:	4a0f      	ldr	r2, [pc, #60]	; (6358 <LoRaMacCheckForRxAbort+0x44>)
    631a:	23d6      	movs	r3, #214	; 0xd6
    631c:	009b      	lsls	r3, r3, #2
    631e:	58d3      	ldr	r3, [r2, r3]
    6320:	2280      	movs	r2, #128	; 0x80
    6322:	4013      	ands	r3, r2
    6324:	d015      	beq.n	6352 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
    6326:	4a0c      	ldr	r2, [pc, #48]	; (6358 <LoRaMacCheckForRxAbort+0x44>)
    6328:	23d6      	movs	r3, #214	; 0xd6
    632a:	009b      	lsls	r3, r3, #2
    632c:	58d3      	ldr	r3, [r2, r3]
    632e:	2280      	movs	r2, #128	; 0x80
    6330:	4393      	bics	r3, r2
    6332:	0019      	movs	r1, r3
    6334:	4a08      	ldr	r2, [pc, #32]	; (6358 <LoRaMacCheckForRxAbort+0x44>)
    6336:	23d6      	movs	r3, #214	; 0xd6
    6338:	009b      	lsls	r3, r3, #2
    633a:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    633c:	4a06      	ldr	r2, [pc, #24]	; (6358 <LoRaMacCheckForRxAbort+0x44>)
    633e:	23d6      	movs	r3, #214	; 0xd6
    6340:	009b      	lsls	r3, r3, #2
    6342:	58d3      	ldr	r3, [r2, r3]
    6344:	2202      	movs	r2, #2
    6346:	4393      	bics	r3, r2
    6348:	0019      	movs	r1, r3
    634a:	4a03      	ldr	r2, [pc, #12]	; (6358 <LoRaMacCheckForRxAbort+0x44>)
    634c:	23d6      	movs	r3, #214	; 0xd6
    634e:	009b      	lsls	r3, r3, #2
    6350:	50d1      	str	r1, [r2, r3]
    }
}
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	46bd      	mov	sp, r7
    6356:	bd80      	pop	{r7, pc}
    6358:	20000b78 	.word	0x20000b78

0000635c <LoRaMacProcess>:


void LoRaMacProcess( void )
{
    635c:	b580      	push	{r7, lr}
    635e:	b082      	sub	sp, #8
    6360:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
    6362:	1dfb      	adds	r3, r7, #7
    6364:	2200      	movs	r2, #0
    6366:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
    6368:	4b1c      	ldr	r3, [pc, #112]	; (63dc <LoRaMacProcess+0x80>)
    636a:	4798      	blx	r3
    LoRaMacClassBProcess( );
    636c:	4b1c      	ldr	r3, [pc, #112]	; (63e0 <LoRaMacProcess+0x84>)
    636e:	4798      	blx	r3

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
    6370:	4b1c      	ldr	r3, [pc, #112]	; (63e4 <LoRaMacProcess+0x88>)
    6372:	4a1d      	ldr	r2, [pc, #116]	; (63e8 <LoRaMacProcess+0x8c>)
    6374:	5c9b      	ldrb	r3, [r3, r2]
    6376:	2210      	movs	r2, #16
    6378:	4013      	ands	r3, r2
    637a:	b2db      	uxtb	r3, r3
    637c:	2b00      	cmp	r3, #0
    637e:	d027      	beq.n	63d0 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
    6380:	2000      	movs	r0, #0
    6382:	4b1a      	ldr	r3, [pc, #104]	; (63ec <LoRaMacProcess+0x90>)
    6384:	4798      	blx	r3
        LoRaMacCheckForRxAbort( );
    6386:	4b1a      	ldr	r3, [pc, #104]	; (63f0 <LoRaMacProcess+0x94>)
    6388:	4798      	blx	r3

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
    638a:	4b1a      	ldr	r3, [pc, #104]	; (63f4 <LoRaMacProcess+0x98>)
    638c:	4798      	blx	r3
    638e:	1e03      	subs	r3, r0, #0
    6390:	d011      	beq.n	63b6 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
    6392:	4b19      	ldr	r3, [pc, #100]	; (63f8 <LoRaMacProcess+0x9c>)
    6394:	4798      	blx	r3
    6396:	0003      	movs	r3, r0
    6398:	0019      	movs	r1, r3
    639a:	1dfb      	adds	r3, r7, #7
    639c:	1dfa      	adds	r2, r7, #7
    639e:	7812      	ldrb	r2, [r2, #0]
    63a0:	430a      	orrs	r2, r1
    63a2:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
    63a4:	4b15      	ldr	r3, [pc, #84]	; (63fc <LoRaMacProcess+0xa0>)
    63a6:	4798      	blx	r3
    63a8:	0003      	movs	r3, r0
    63aa:	0019      	movs	r1, r3
    63ac:	1dfb      	adds	r3, r7, #7
    63ae:	1dfa      	adds	r2, r7, #7
    63b0:	7812      	ldrb	r2, [r2, #0]
    63b2:	430a      	orrs	r2, r1
    63b4:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
    63b6:	1dfb      	adds	r3, r7, #7
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	2b00      	cmp	r3, #0
    63bc:	d103      	bne.n	63c6 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
    63be:	4b10      	ldr	r3, [pc, #64]	; (6400 <LoRaMacProcess+0xa4>)
    63c0:	4798      	blx	r3
            LoRaMacHandleMcpsRequest( );
    63c2:	4b10      	ldr	r3, [pc, #64]	; (6404 <LoRaMacProcess+0xa8>)
    63c4:	4798      	blx	r3
        }
        LoRaMacHandleRequestEvents( );
    63c6:	4b10      	ldr	r3, [pc, #64]	; (6408 <LoRaMacProcess+0xac>)
    63c8:	4798      	blx	r3
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    63ca:	2001      	movs	r0, #1
    63cc:	4b07      	ldr	r3, [pc, #28]	; (63ec <LoRaMacProcess+0x90>)
    63ce:	4798      	blx	r3
    }
    LoRaMacHandleIndicationEvents( );
    63d0:	4b0e      	ldr	r3, [pc, #56]	; (640c <LoRaMacProcess+0xb0>)
    63d2:	4798      	blx	r3
}
    63d4:	46c0      	nop			; (mov r8, r8)
    63d6:	46bd      	mov	sp, r7
    63d8:	b002      	add	sp, #8
    63da:	bd80      	pop	{r7, pc}
    63dc:	00005e39 	.word	0x00005e39
    63e0:	0000b9c3 	.word	0x0000b9c3
    63e4:	20000b78 	.word	0x20000b78
    63e8:	00000471 	.word	0x00000471
    63ec:	00005f15 	.word	0x00005f15
    63f0:	00006315 	.word	0x00006315
    63f4:	000093a5 	.word	0x000093a5
    63f8:	00006249 	.word	0x00006249
    63fc:	000062b9 	.word	0x000062b9
    6400:	000061dd 	.word	0x000061dd
    6404:	000060f1 	.word	0x000060f1
    6408:	00005f3d 	.word	0x00005f3d
    640c:	00006019 	.word	0x00006019

00006410 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
    6410:	b580      	push	{r7, lr}
    6412:	b082      	sub	sp, #8
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
    6418:	4b1c      	ldr	r3, [pc, #112]	; (648c <OnTxDelayedTimerEvent+0x7c>)
    641a:	0018      	movs	r0, r3
    641c:	4b1c      	ldr	r3, [pc, #112]	; (6490 <OnTxDelayedTimerEvent+0x80>)
    641e:	4798      	blx	r3
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
    6420:	4a1c      	ldr	r2, [pc, #112]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    6422:	23d6      	movs	r3, #214	; 0xd6
    6424:	009b      	lsls	r3, r3, #2
    6426:	58d3      	ldr	r3, [r2, r3]
    6428:	2220      	movs	r2, #32
    642a:	4393      	bics	r3, r2
    642c:	0019      	movs	r1, r3
    642e:	4a19      	ldr	r2, [pc, #100]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    6430:	23d6      	movs	r3, #214	; 0xd6
    6432:	009b      	lsls	r3, r3, #2
    6434:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
    6436:	2001      	movs	r0, #1
    6438:	4b17      	ldr	r3, [pc, #92]	; (6498 <OnTxDelayedTimerEvent+0x88>)
    643a:	4798      	blx	r3
    643c:	1e03      	subs	r3, r0, #0
    643e:	d01f      	beq.n	6480 <OnTxDelayedTimerEvent+0x70>
    6440:	2b0b      	cmp	r3, #11
    6442:	d01d      	beq.n	6480 <OnTxDelayedTimerEvent+0x70>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    6444:	4a13      	ldr	r2, [pc, #76]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    6446:	239c      	movs	r3, #156	; 0x9c
    6448:	00db      	lsls	r3, r3, #3
    644a:	58d3      	ldr	r3, [r2, r3]
    644c:	22d5      	movs	r2, #213	; 0xd5
    644e:	569b      	ldrsb	r3, [r3, r2]
    6450:	b2d9      	uxtb	r1, r3
    6452:	4b10      	ldr	r3, [pc, #64]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    6454:	4a11      	ldr	r2, [pc, #68]	; (649c <OnTxDelayedTimerEvent+0x8c>)
    6456:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbTrans = MacCtx.NvmCtx->ChannelsNbTransCounter;
    6458:	4a0e      	ldr	r2, [pc, #56]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    645a:	239c      	movs	r3, #156	; 0x9c
    645c:	00db      	lsls	r3, r3, #3
    645e:	58d2      	ldr	r2, [r2, r3]
    6460:	2388      	movs	r3, #136	; 0x88
    6462:	005b      	lsls	r3, r3, #1
    6464:	5cd1      	ldrb	r1, [r2, r3]
    6466:	4b0b      	ldr	r3, [pc, #44]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    6468:	4a0d      	ldr	r2, [pc, #52]	; (64a0 <OnTxDelayedTimerEvent+0x90>)
    646a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
    646c:	4b09      	ldr	r3, [pc, #36]	; (6494 <OnTxDelayedTimerEvent+0x84>)
    646e:	4a0d      	ldr	r2, [pc, #52]	; (64a4 <OnTxDelayedTimerEvent+0x94>)
    6470:	2109      	movs	r1, #9
    6472:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
    6474:	2009      	movs	r0, #9
    6476:	4b0c      	ldr	r3, [pc, #48]	; (64a8 <OnTxDelayedTimerEvent+0x98>)
    6478:	4798      	blx	r3
            StopRetransmission( );
    647a:	4b0c      	ldr	r3, [pc, #48]	; (64ac <OnTxDelayedTimerEvent+0x9c>)
    647c:	4798      	blx	r3
            break;
    647e:	e000      	b.n	6482 <OnTxDelayedTimerEvent+0x72>
            break;
    6480:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	46bd      	mov	sp, r7
    6486:	b002      	add	sp, #8
    6488:	bd80      	pop	{r7, pc}
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	20000ef8 	.word	0x20000ef8
    6490:	0001624d 	.word	0x0001624d
    6494:	20000b78 	.word	0x20000b78
    6498:	00007fd5 	.word	0x00007fd5
    649c:	00000432 	.word	0x00000432
    64a0:	00000435 	.word	0x00000435
    64a4:	00000431 	.word	0x00000431
    64a8:	0000c2bd 	.word	0x0000c2bd
    64ac:	00009155 	.word	0x00009155

000064b0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
    64b0:	b580      	push	{r7, lr}
    64b2:	b082      	sub	sp, #8
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer1 );
    64b8:	4b31      	ldr	r3, [pc, #196]	; (6580 <OnRxWindow1TimerEvent+0xd0>)
    64ba:	0018      	movs	r0, r3
    64bc:	4b31      	ldr	r3, [pc, #196]	; (6584 <OnRxWindow1TimerEvent+0xd4>)
    64be:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_1;
    64c0:	4a31      	ldr	r2, [pc, #196]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64c2:	238e      	movs	r3, #142	; 0x8e
    64c4:	00db      	lsls	r3, r3, #3
    64c6:	2100      	movs	r1, #0
    64c8:	54d1      	strb	r1, [r2, r3]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
    64ca:	4a2f      	ldr	r2, [pc, #188]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64cc:	239c      	movs	r3, #156	; 0x9c
    64ce:	00db      	lsls	r3, r3, #3
    64d0:	58d2      	ldr	r2, [r2, r3]
    64d2:	2314      	movs	r3, #20
    64d4:	33ff      	adds	r3, #255	; 0xff
    64d6:	5cd1      	ldrb	r1, [r2, r3]
    64d8:	4a2b      	ldr	r2, [pc, #172]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64da:	23f4      	movs	r3, #244	; 0xf4
    64dc:	009b      	lsls	r3, r3, #2
    64de:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
    64e0:	4a29      	ldr	r2, [pc, #164]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64e2:	239c      	movs	r3, #156	; 0x9c
    64e4:	00db      	lsls	r3, r3, #3
    64e6:	58d3      	ldr	r3, [r2, r3]
    64e8:	22f5      	movs	r2, #245	; 0xf5
    64ea:	5c9b      	ldrb	r3, [r3, r2]
    64ec:	b259      	sxtb	r1, r3
    64ee:	4b26      	ldr	r3, [pc, #152]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64f0:	4a26      	ldr	r2, [pc, #152]	; (658c <OnRxWindow1TimerEvent+0xdc>)
    64f2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    64f4:	4a24      	ldr	r2, [pc, #144]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    64f6:	239c      	movs	r3, #156	; 0x9c
    64f8:	00db      	lsls	r3, r3, #3
    64fa:	58d2      	ldr	r2, [r2, r3]
    64fc:	2302      	movs	r3, #2
    64fe:	33ff      	adds	r3, #255	; 0xff
    6500:	5cd1      	ldrb	r1, [r2, r3]
    6502:	4a21      	ldr	r2, [pc, #132]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6504:	23f8      	movs	r3, #248	; 0xf8
    6506:	009b      	lsls	r3, r3, #2
    6508:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    650a:	4a1f      	ldr	r2, [pc, #124]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    650c:	239c      	movs	r3, #156	; 0x9c
    650e:	00db      	lsls	r3, r3, #3
    6510:	58d2      	ldr	r2, [r2, r3]
    6512:	2316      	movs	r3, #22
    6514:	33ff      	adds	r3, #255	; 0xff
    6516:	5cd1      	ldrb	r1, [r2, r3]
    6518:	4b1b      	ldr	r3, [pc, #108]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    651a:	4a1d      	ldr	r2, [pc, #116]	; (6590 <OnRxWindow1TimerEvent+0xe0>)
    651c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
    651e:	4b1a      	ldr	r3, [pc, #104]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6520:	4a1c      	ldr	r2, [pc, #112]	; (6594 <OnRxWindow1TimerEvent+0xe4>)
    6522:	2100      	movs	r1, #0
    6524:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
    6526:	4a18      	ldr	r2, [pc, #96]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6528:	238e      	movs	r3, #142	; 0x8e
    652a:	00db      	lsls	r3, r3, #3
    652c:	5cd1      	ldrb	r1, [r2, r3]
    652e:	4b16      	ldr	r3, [pc, #88]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6530:	4a19      	ldr	r2, [pc, #100]	; (6598 <OnRxWindow1TimerEvent+0xe8>)
    6532:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    6534:	4a14      	ldr	r2, [pc, #80]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6536:	239c      	movs	r3, #156	; 0x9c
    6538:	00db      	lsls	r3, r3, #3
    653a:	58d3      	ldr	r3, [r2, r3]
    653c:	22c8      	movs	r2, #200	; 0xc8
    653e:	5c9b      	ldrb	r3, [r3, r2]
    6540:	2b02      	cmp	r3, #2
    6542:	d102      	bne.n	654a <OnRxWindow1TimerEvent+0x9a>
    {
        Radio.Standby( );
    6544:	4b15      	ldr	r3, [pc, #84]	; (659c <OnRxWindow1TimerEvent+0xec>)
    6546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6548:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    654a:	4a0f      	ldr	r2, [pc, #60]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    654c:	239c      	movs	r3, #156	; 0x9c
    654e:	00db      	lsls	r3, r3, #3
    6550:	58d3      	ldr	r3, [r2, r3]
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	4a12      	ldr	r2, [pc, #72]	; (65a0 <OnRxWindow1TimerEvent+0xf0>)
    6556:	4913      	ldr	r1, [pc, #76]	; (65a4 <OnRxWindow1TimerEvent+0xf4>)
    6558:	0018      	movs	r0, r3
    655a:	4b13      	ldr	r3, [pc, #76]	; (65a8 <OnRxWindow1TimerEvent+0xf8>)
    655c:	4798      	blx	r3
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    655e:	4b0a      	ldr	r3, [pc, #40]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6560:	4a0c      	ldr	r2, [pc, #48]	; (6594 <OnRxWindow1TimerEvent+0xe4>)
    6562:	5c98      	ldrb	r0, [r3, r2]
    6564:	4a08      	ldr	r2, [pc, #32]	; (6588 <OnRxWindow1TimerEvent+0xd8>)
    6566:	239c      	movs	r3, #156	; 0x9c
    6568:	00db      	lsls	r3, r3, #3
    656a:	58d3      	ldr	r3, [r2, r3]
    656c:	22e0      	movs	r2, #224	; 0xe0
    656e:	589b      	ldr	r3, [r3, r2]
    6570:	0019      	movs	r1, r3
    6572:	4b0e      	ldr	r3, [pc, #56]	; (65ac <OnRxWindow1TimerEvent+0xfc>)
    6574:	4798      	blx	r3
}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	46bd      	mov	sp, r7
    657a:	b002      	add	sp, #8
    657c:	bd80      	pop	{r7, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	20000f10 	.word	0x20000f10
    6584:	0001624d 	.word	0x0001624d
    6588:	20000b78 	.word	0x20000b78
    658c:	000003d3 	.word	0x000003d3
    6590:	000003e1 	.word	0x000003e1
    6594:	000003e2 	.word	0x000003e2
    6598:	000003e3 	.word	0x000003e3
    659c:	0001efe8 	.word	0x0001efe8
    65a0:	20000f90 	.word	0x20000f90
    65a4:	20000f48 	.word	0x20000f48
    65a8:	0000f1bd 	.word	0x0000f1bd
    65ac:	0000676d 	.word	0x0000676d

000065b0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
    65b0:	b580      	push	{r7, lr}
    65b2:	b082      	sub	sp, #8
    65b4:	af00      	add	r7, sp, #0
    65b6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
    65b8:	4b31      	ldr	r3, [pc, #196]	; (6680 <OnRxWindow2TimerEvent+0xd0>)
    65ba:	0018      	movs	r0, r3
    65bc:	4b31      	ldr	r3, [pc, #196]	; (6684 <OnRxWindow2TimerEvent+0xd4>)
    65be:	4798      	blx	r3

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
    65c0:	4a31      	ldr	r2, [pc, #196]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65c2:	239c      	movs	r3, #156	; 0x9c
    65c4:	00db      	lsls	r3, r3, #3
    65c6:	58d2      	ldr	r2, [r2, r3]
    65c8:	2314      	movs	r3, #20
    65ca:	33ff      	adds	r3, #255	; 0xff
    65cc:	5cd1      	ldrb	r1, [r2, r3]
    65ce:	4a2e      	ldr	r2, [pc, #184]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65d0:	23f9      	movs	r3, #249	; 0xf9
    65d2:	009b      	lsls	r3, r3, #2
    65d4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
    65d6:	4a2c      	ldr	r2, [pc, #176]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65d8:	239c      	movs	r3, #156	; 0x9c
    65da:	00db      	lsls	r3, r3, #3
    65dc:	58d3      	ldr	r3, [r2, r3]
    65de:	22f8      	movs	r2, #248	; 0xf8
    65e0:	5899      	ldr	r1, [r3, r2]
    65e2:	4a29      	ldr	r2, [pc, #164]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65e4:	23fa      	movs	r3, #250	; 0xfa
    65e6:	009b      	lsls	r3, r3, #2
    65e8:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    65ea:	4a27      	ldr	r2, [pc, #156]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65ec:	239c      	movs	r3, #156	; 0x9c
    65ee:	00db      	lsls	r3, r3, #3
    65f0:	58d2      	ldr	r2, [r2, r3]
    65f2:	2302      	movs	r3, #2
    65f4:	33ff      	adds	r3, #255	; 0xff
    65f6:	5cd1      	ldrb	r1, [r2, r3]
    65f8:	4a23      	ldr	r2, [pc, #140]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    65fa:	23fd      	movs	r3, #253	; 0xfd
    65fc:	009b      	lsls	r3, r3, #2
    65fe:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    6600:	4a21      	ldr	r2, [pc, #132]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6602:	239c      	movs	r3, #156	; 0x9c
    6604:	00db      	lsls	r3, r3, #3
    6606:	58d2      	ldr	r2, [r2, r3]
    6608:	2316      	movs	r3, #22
    660a:	33ff      	adds	r3, #255	; 0xff
    660c:	5cd1      	ldrb	r1, [r2, r3]
    660e:	4b1e      	ldr	r3, [pc, #120]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6610:	4a1e      	ldr	r2, [pc, #120]	; (668c <OnRxWindow2TimerEvent+0xdc>)
    6612:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    6614:	4b1c      	ldr	r3, [pc, #112]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6616:	4a1e      	ldr	r2, [pc, #120]	; (6690 <OnRxWindow2TimerEvent+0xe0>)
    6618:	2101      	movs	r1, #1
    661a:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
    661c:	4a1a      	ldr	r2, [pc, #104]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    661e:	239c      	movs	r3, #156	; 0x9c
    6620:	00db      	lsls	r3, r3, #3
    6622:	58d3      	ldr	r3, [r2, r3]
    6624:	22c8      	movs	r2, #200	; 0xc8
    6626:	5c9b      	ldrb	r3, [r3, r2]
    6628:	2b02      	cmp	r3, #2
    662a:	d004      	beq.n	6636 <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
    662c:	4b16      	ldr	r3, [pc, #88]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    662e:	4a19      	ldr	r2, [pc, #100]	; (6694 <OnRxWindow2TimerEvent+0xe4>)
    6630:	2100      	movs	r1, #0
    6632:	5499      	strb	r1, [r3, r2]
    6634:	e003      	b.n	663e <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
    6636:	4b14      	ldr	r3, [pc, #80]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6638:	4a16      	ldr	r2, [pc, #88]	; (6694 <OnRxWindow2TimerEvent+0xe4>)
    663a:	2101      	movs	r1, #1
    663c:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
    663e:	4a12      	ldr	r2, [pc, #72]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6640:	239c      	movs	r3, #156	; 0x9c
    6642:	00db      	lsls	r3, r3, #3
    6644:	58d3      	ldr	r3, [r2, r3]
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	4a13      	ldr	r2, [pc, #76]	; (6698 <OnRxWindow2TimerEvent+0xe8>)
    664a:	4914      	ldr	r1, [pc, #80]	; (669c <OnRxWindow2TimerEvent+0xec>)
    664c:	0018      	movs	r0, r3
    664e:	4b14      	ldr	r3, [pc, #80]	; (66a0 <OnRxWindow2TimerEvent+0xf0>)
    6650:	4798      	blx	r3
    6652:	1e03      	subs	r3, r0, #0
    6654:	d010      	beq.n	6678 <OnRxWindow2TimerEvent+0xc8>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
    6656:	4b0c      	ldr	r3, [pc, #48]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6658:	4a0e      	ldr	r2, [pc, #56]	; (6694 <OnRxWindow2TimerEvent+0xe4>)
    665a:	5c98      	ldrb	r0, [r3, r2]
    665c:	4a0a      	ldr	r2, [pc, #40]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    665e:	239c      	movs	r3, #156	; 0x9c
    6660:	00db      	lsls	r3, r3, #3
    6662:	58d3      	ldr	r3, [r2, r3]
    6664:	22e0      	movs	r2, #224	; 0xe0
    6666:	589b      	ldr	r3, [r3, r2]
    6668:	0019      	movs	r1, r3
    666a:	4b0e      	ldr	r3, [pc, #56]	; (66a4 <OnRxWindow2TimerEvent+0xf4>)
    666c:	4798      	blx	r3
        MacCtx.RxSlot = RX_SLOT_WIN_2;
    666e:	4a06      	ldr	r2, [pc, #24]	; (6688 <OnRxWindow2TimerEvent+0xd8>)
    6670:	238e      	movs	r3, #142	; 0x8e
    6672:	00db      	lsls	r3, r3, #3
    6674:	2101      	movs	r1, #1
    6676:	54d1      	strb	r1, [r2, r3]
    }
}
    6678:	46c0      	nop			; (mov r8, r8)
    667a:	46bd      	mov	sp, r7
    667c:	b002      	add	sp, #8
    667e:	bd80      	pop	{r7, pc}
    6680:	20000f28 	.word	0x20000f28
    6684:	0001624d 	.word	0x0001624d
    6688:	20000b78 	.word	0x20000b78
    668c:	000003f5 	.word	0x000003f5
    6690:	000003f7 	.word	0x000003f7
    6694:	000003f6 	.word	0x000003f6
    6698:	20000f90 	.word	0x20000f90
    669c:	20000f5c 	.word	0x20000f5c
    66a0:	0000f1bd 	.word	0x0000f1bd
    66a4:	0000676d 	.word	0x0000676d

000066a8 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
    66a8:	b590      	push	{r4, r7, lr}
    66aa:	b083      	sub	sp, #12
    66ac:	af00      	add	r7, sp, #0
    66ae:	0004      	movs	r4, r0
    66b0:	0008      	movs	r0, r1
    66b2:	0011      	movs	r1, r2
    66b4:	1dfb      	adds	r3, r7, #7
    66b6:	1c22      	adds	r2, r4, #0
    66b8:	701a      	strb	r2, [r3, #0]
    66ba:	1dbb      	adds	r3, r7, #6
    66bc:	1c02      	adds	r2, r0, #0
    66be:	701a      	strb	r2, [r3, #0]
    66c0:	1d7b      	adds	r3, r7, #5
    66c2:	1c0a      	adds	r2, r1, #0
    66c4:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
    66c6:	1dfb      	adds	r3, r7, #7
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	2201      	movs	r2, #1
    66cc:	4053      	eors	r3, r2
    66ce:	b2db      	uxtb	r3, r3
    66d0:	2b00      	cmp	r3, #0
    66d2:	d007      	beq.n	66e4 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
    66d4:	1dbb      	adds	r3, r7, #6
    66d6:	781b      	ldrb	r3, [r3, #0]
    66d8:	2b02      	cmp	r3, #2
    66da:	d10a      	bne.n	66f2 <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
    66dc:	2000      	movs	r0, #0
    66de:	4b07      	ldr	r3, [pc, #28]	; (66fc <CheckToDisableAckTimeout+0x54>)
    66e0:	4798      	blx	r3
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
    66e2:	e006      	b.n	66f2 <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
    66e4:	1d7b      	adds	r3, r7, #5
    66e6:	781b      	ldrb	r3, [r3, #0]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d002      	beq.n	66f2 <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
    66ec:	2000      	movs	r0, #0
    66ee:	4b03      	ldr	r3, [pc, #12]	; (66fc <CheckToDisableAckTimeout+0x54>)
    66f0:	4798      	blx	r3
}
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	46bd      	mov	sp, r7
    66f6:	b003      	add	sp, #12
    66f8:	bd90      	pop	{r4, r7, pc}
    66fa:	46c0      	nop			; (mov r8, r8)
    66fc:	00006701 	.word	0x00006701

00006700 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
    6700:	b580      	push	{r7, lr}
    6702:	b082      	sub	sp, #8
    6704:	af00      	add	r7, sp, #0
    6706:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
    6708:	4b12      	ldr	r3, [pc, #72]	; (6754 <OnAckTimeoutTimerEvent+0x54>)
    670a:	0018      	movs	r0, r3
    670c:	4b12      	ldr	r3, [pc, #72]	; (6758 <OnAckTimeoutTimerEvent+0x58>)
    670e:	4798      	blx	r3

    if( MacCtx.NvmCtx->NodeAckRequested == true )
    6710:	4a12      	ldr	r2, [pc, #72]	; (675c <OnAckTimeoutTimerEvent+0x5c>)
    6712:	239c      	movs	r3, #156	; 0x9c
    6714:	00db      	lsls	r3, r3, #3
    6716:	58d3      	ldr	r3, [r2, r3]
    6718:	4a11      	ldr	r2, [pc, #68]	; (6760 <OnAckTimeoutTimerEvent+0x60>)
    671a:	5c9b      	ldrb	r3, [r3, r2]
    671c:	2b00      	cmp	r3, #0
    671e:	d006      	beq.n	672e <OnAckTimeoutTimerEvent+0x2e>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
    6720:	4a0e      	ldr	r2, [pc, #56]	; (675c <OnAckTimeoutTimerEvent+0x5c>)
    6722:	239c      	movs	r3, #156	; 0x9c
    6724:	00db      	lsls	r3, r3, #3
    6726:	58d3      	ldr	r3, [r2, r3]
    6728:	4a0e      	ldr	r2, [pc, #56]	; (6764 <OnAckTimeoutTimerEvent+0x64>)
    672a:	2101      	movs	r1, #1
    672c:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
    672e:	4a0b      	ldr	r2, [pc, #44]	; (675c <OnAckTimeoutTimerEvent+0x5c>)
    6730:	239c      	movs	r3, #156	; 0x9c
    6732:	00db      	lsls	r3, r3, #3
    6734:	58d3      	ldr	r3, [r2, r3]
    6736:	22c8      	movs	r2, #200	; 0xc8
    6738:	5c9b      	ldrb	r3, [r3, r2]
    673a:	2b02      	cmp	r3, #2
    673c:	d105      	bne.n	674a <OnAckTimeoutTimerEvent+0x4a>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    673e:	4b07      	ldr	r3, [pc, #28]	; (675c <OnAckTimeoutTimerEvent+0x5c>)
    6740:	4a09      	ldr	r2, [pc, #36]	; (6768 <OnAckTimeoutTimerEvent+0x68>)
    6742:	5c99      	ldrb	r1, [r3, r2]
    6744:	2010      	movs	r0, #16
    6746:	4301      	orrs	r1, r0
    6748:	5499      	strb	r1, [r3, r2]
    }
}
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	46bd      	mov	sp, r7
    674e:	b002      	add	sp, #8
    6750:	bd80      	pop	{r7, pc}
    6752:	46c0      	nop			; (mov r8, r8)
    6754:	20000f70 	.word	0x20000f70
    6758:	0001624d 	.word	0x0001624d
    675c:	20000b78 	.word	0x20000b78
    6760:	00000217 	.word	0x00000217
    6764:	00000216 	.word	0x00000216
    6768:	00000471 	.word	0x00000471

0000676c <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
    676c:	b580      	push	{r7, lr}
    676e:	b082      	sub	sp, #8
    6770:	af00      	add	r7, sp, #0
    6772:	0002      	movs	r2, r0
    6774:	6039      	str	r1, [r7, #0]
    6776:	1dfb      	adds	r3, r7, #7
    6778:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
    677a:	1dfb      	adds	r3, r7, #7
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	2201      	movs	r2, #1
    6780:	4053      	eors	r3, r2
    6782:	b2db      	uxtb	r3, r3
    6784:	2b00      	cmp	r3, #0
    6786:	d005      	beq.n	6794 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
    6788:	4b06      	ldr	r3, [pc, #24]	; (67a4 <RxWindowSetup+0x38>)
    678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    678c:	683a      	ldr	r2, [r7, #0]
    678e:	0010      	movs	r0, r2
    6790:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
    6792:	e003      	b.n	679c <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
    6794:	4b03      	ldr	r3, [pc, #12]	; (67a4 <RxWindowSetup+0x38>)
    6796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6798:	2000      	movs	r0, #0
    679a:	4798      	blx	r3
}
    679c:	46c0      	nop			; (mov r8, r8)
    679e:	46bd      	mov	sp, r7
    67a0:	b002      	add	sp, #8
    67a2:	bd80      	pop	{r7, pc}
    67a4:	0001efe8 	.word	0x0001efe8

000067a8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
    67a8:	b590      	push	{r4, r7, lr}
    67aa:	b087      	sub	sp, #28
    67ac:	af02      	add	r7, sp, #8
    67ae:	0002      	movs	r2, r0
    67b0:	1dfb      	adds	r3, r7, #7
    67b2:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    67b4:	230f      	movs	r3, #15
    67b6:	18fb      	adds	r3, r7, r3
    67b8:	2203      	movs	r2, #3
    67ba:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
    67bc:	4a5f      	ldr	r2, [pc, #380]	; (693c <SwitchClass+0x194>)
    67be:	239c      	movs	r3, #156	; 0x9c
    67c0:	00db      	lsls	r3, r3, #3
    67c2:	58d3      	ldr	r3, [r2, r3]
    67c4:	22c8      	movs	r2, #200	; 0xc8
    67c6:	5c9b      	ldrb	r3, [r3, r2]
    67c8:	2b01      	cmp	r3, #1
    67ca:	d06d      	beq.n	68a8 <SwitchClass+0x100>
    67cc:	2b02      	cmp	r3, #2
    67ce:	d100      	bne.n	67d2 <SwitchClass+0x2a>
    67d0:	e081      	b.n	68d6 <SwitchClass+0x12e>
    67d2:	2b00      	cmp	r3, #0
    67d4:	d000      	beq.n	67d8 <SwitchClass+0x30>
    67d6:	e0a9      	b.n	692c <SwitchClass+0x184>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
    67d8:	1dfb      	adds	r3, r7, #7
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	2b01      	cmp	r3, #1
    67de:	d115      	bne.n	680c <SwitchClass+0x64>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
    67e0:	230f      	movs	r3, #15
    67e2:	18fc      	adds	r4, r7, r3
    67e4:	1dfb      	adds	r3, r7, #7
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	0018      	movs	r0, r3
    67ea:	4b55      	ldr	r3, [pc, #340]	; (6940 <SwitchClass+0x198>)
    67ec:	4798      	blx	r3
    67ee:	0003      	movs	r3, r0
    67f0:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
    67f2:	230f      	movs	r3, #15
    67f4:	18fb      	adds	r3, r7, r3
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	2b00      	cmp	r3, #0
    67fa:	d107      	bne.n	680c <SwitchClass+0x64>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
    67fc:	4a4f      	ldr	r2, [pc, #316]	; (693c <SwitchClass+0x194>)
    67fe:	239c      	movs	r3, #156	; 0x9c
    6800:	00db      	lsls	r3, r3, #3
    6802:	58d3      	ldr	r3, [r2, r3]
    6804:	1dfa      	adds	r2, r7, #7
    6806:	21c8      	movs	r1, #200	; 0xc8
    6808:	7812      	ldrb	r2, [r2, #0]
    680a:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
    680c:	1dfb      	adds	r3, r7, #7
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	2b02      	cmp	r3, #2
    6812:	d000      	beq.n	6816 <SwitchClass+0x6e>
    6814:	e085      	b.n	6922 <SwitchClass+0x17a>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    6816:	4a49      	ldr	r2, [pc, #292]	; (693c <SwitchClass+0x194>)
    6818:	239c      	movs	r3, #156	; 0x9c
    681a:	00db      	lsls	r3, r3, #3
    681c:	58d3      	ldr	r3, [r2, r3]
    681e:	1dfa      	adds	r2, r7, #7
    6820:	21c8      	movs	r1, #200	; 0xc8
    6822:	7812      	ldrb	r2, [r2, #0]
    6824:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
    6826:	4a45      	ldr	r2, [pc, #276]	; (693c <SwitchClass+0x194>)
    6828:	239c      	movs	r3, #156	; 0x9c
    682a:	00db      	lsls	r3, r3, #3
    682c:	58d3      	ldr	r3, [r2, r3]
    682e:	4a45      	ldr	r2, [pc, #276]	; (6944 <SwitchClass+0x19c>)
    6830:	2100      	movs	r1, #0
    6832:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
    6834:	4b44      	ldr	r3, [pc, #272]	; (6948 <SwitchClass+0x1a0>)
    6836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6838:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    683a:	4a40      	ldr	r2, [pc, #256]	; (693c <SwitchClass+0x194>)
    683c:	239c      	movs	r3, #156	; 0x9c
    683e:	00db      	lsls	r3, r3, #3
    6840:	58d3      	ldr	r3, [r2, r3]
    6842:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    6844:	4a3d      	ldr	r2, [pc, #244]	; (693c <SwitchClass+0x194>)
    6846:	239c      	movs	r3, #156	; 0x9c
    6848:	00db      	lsls	r3, r3, #3
    684a:	58d3      	ldr	r3, [r2, r3]
    684c:	22fc      	movs	r2, #252	; 0xfc
    684e:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    6850:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
    6852:	4a3a      	ldr	r2, [pc, #232]	; (693c <SwitchClass+0x194>)
    6854:	239c      	movs	r3, #156	; 0x9c
    6856:	00db      	lsls	r3, r3, #3
    6858:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    685a:	22dc      	movs	r2, #220	; 0xdc
    685c:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    685e:	4a37      	ldr	r2, [pc, #220]	; (693c <SwitchClass+0x194>)
    6860:	239c      	movs	r3, #156	; 0x9c
    6862:	00db      	lsls	r3, r3, #3
    6864:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    6866:	22d8      	movs	r2, #216	; 0xd8
    6868:	589a      	ldr	r2, [r3, r2]
    686a:	4b38      	ldr	r3, [pc, #224]	; (694c <SwitchClass+0x1a4>)
    686c:	9300      	str	r3, [sp, #0]
    686e:	0013      	movs	r3, r2
    6870:	0022      	movs	r2, r4
    6872:	4c37      	ldr	r4, [pc, #220]	; (6950 <SwitchClass+0x1a8>)
    6874:	47a0      	blx	r4
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
    6876:	4b37      	ldr	r3, [pc, #220]	; (6954 <SwitchClass+0x1ac>)
    6878:	4798      	blx	r3

                // Add a DeviceModeInd MAC Command to indicate the network a device mode change.
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    687a:	4a30      	ldr	r2, [pc, #192]	; (693c <SwitchClass+0x194>)
    687c:	239c      	movs	r3, #156	; 0x9c
    687e:	00db      	lsls	r3, r3, #3
    6880:	58d3      	ldr	r3, [r2, r3]
    6882:	4a35      	ldr	r2, [pc, #212]	; (6958 <SwitchClass+0x1b0>)
    6884:	5c9b      	ldrb	r3, [r3, r2]
    6886:	2b01      	cmp	r3, #1
    6888:	d109      	bne.n	689e <SwitchClass+0xf6>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    688a:	4a2c      	ldr	r2, [pc, #176]	; (693c <SwitchClass+0x194>)
    688c:	239c      	movs	r3, #156	; 0x9c
    688e:	00db      	lsls	r3, r3, #3
    6890:	58d3      	ldr	r3, [r2, r3]
    6892:	33c8      	adds	r3, #200	; 0xc8
    6894:	2201      	movs	r2, #1
    6896:	0019      	movs	r1, r3
    6898:	2020      	movs	r0, #32
    689a:	4b30      	ldr	r3, [pc, #192]	; (695c <SwitchClass+0x1b4>)
    689c:	4798      	blx	r3
                }

                status = LORAMAC_STATUS_OK;
    689e:	230f      	movs	r3, #15
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	2200      	movs	r2, #0
    68a4:	701a      	strb	r2, [r3, #0]
            }
            break;
    68a6:	e03c      	b.n	6922 <SwitchClass+0x17a>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
    68a8:	230f      	movs	r3, #15
    68aa:	18fc      	adds	r4, r7, r3
    68ac:	1dfb      	adds	r3, r7, #7
    68ae:	781b      	ldrb	r3, [r3, #0]
    68b0:	0018      	movs	r0, r3
    68b2:	4b23      	ldr	r3, [pc, #140]	; (6940 <SwitchClass+0x198>)
    68b4:	4798      	blx	r3
    68b6:	0003      	movs	r3, r0
    68b8:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
    68ba:	230f      	movs	r3, #15
    68bc:	18fb      	adds	r3, r7, r3
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	2b00      	cmp	r3, #0
    68c2:	d130      	bne.n	6926 <SwitchClass+0x17e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    68c4:	4a1d      	ldr	r2, [pc, #116]	; (693c <SwitchClass+0x194>)
    68c6:	239c      	movs	r3, #156	; 0x9c
    68c8:	00db      	lsls	r3, r3, #3
    68ca:	58d3      	ldr	r3, [r2, r3]
    68cc:	1dfa      	adds	r2, r7, #7
    68ce:	21c8      	movs	r1, #200	; 0xc8
    68d0:	7812      	ldrb	r2, [r2, #0]
    68d2:	545a      	strb	r2, [r3, r1]
            }
            break;
    68d4:	e027      	b.n	6926 <SwitchClass+0x17e>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
    68d6:	1dfb      	adds	r3, r7, #7
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	2b00      	cmp	r3, #0
    68dc:	d125      	bne.n	692a <SwitchClass+0x182>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
    68de:	4a17      	ldr	r2, [pc, #92]	; (693c <SwitchClass+0x194>)
    68e0:	239c      	movs	r3, #156	; 0x9c
    68e2:	00db      	lsls	r3, r3, #3
    68e4:	58d3      	ldr	r3, [r2, r3]
    68e6:	1dfa      	adds	r2, r7, #7
    68e8:	21c8      	movs	r1, #200	; 0xc8
    68ea:	7812      	ldrb	r2, [r2, #0]
    68ec:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
    68ee:	4b16      	ldr	r3, [pc, #88]	; (6948 <SwitchClass+0x1a0>)
    68f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    68f2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
    68f4:	230f      	movs	r3, #15
    68f6:	18fb      	adds	r3, r7, r3
    68f8:	2200      	movs	r2, #0
    68fa:	701a      	strb	r2, [r3, #0]

                // Add a DeviceModeInd MAC Command to indicate the network a device mode change.
                if( MacCtx.NvmCtx->Version.Fields.Minor == 1 )
    68fc:	4a0f      	ldr	r2, [pc, #60]	; (693c <SwitchClass+0x194>)
    68fe:	239c      	movs	r3, #156	; 0x9c
    6900:	00db      	lsls	r3, r3, #3
    6902:	58d3      	ldr	r3, [r2, r3]
    6904:	4a14      	ldr	r2, [pc, #80]	; (6958 <SwitchClass+0x1b0>)
    6906:	5c9b      	ldrb	r3, [r3, r2]
    6908:	2b01      	cmp	r3, #1
    690a:	d10e      	bne.n	692a <SwitchClass+0x182>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&MacCtx.NvmCtx->DeviceClass, 1 );
    690c:	4a0b      	ldr	r2, [pc, #44]	; (693c <SwitchClass+0x194>)
    690e:	239c      	movs	r3, #156	; 0x9c
    6910:	00db      	lsls	r3, r3, #3
    6912:	58d3      	ldr	r3, [r2, r3]
    6914:	33c8      	adds	r3, #200	; 0xc8
    6916:	2201      	movs	r2, #1
    6918:	0019      	movs	r1, r3
    691a:	2020      	movs	r0, #32
    691c:	4b0f      	ldr	r3, [pc, #60]	; (695c <SwitchClass+0x1b4>)
    691e:	4798      	blx	r3
                }
            }
            break;
    6920:	e003      	b.n	692a <SwitchClass+0x182>
            break;
    6922:	46c0      	nop			; (mov r8, r8)
    6924:	e002      	b.n	692c <SwitchClass+0x184>
            break;
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	e000      	b.n	692c <SwitchClass+0x184>
            break;
    692a:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
    692c:	230f      	movs	r3, #15
    692e:	18fb      	adds	r3, r7, r3
    6930:	781b      	ldrb	r3, [r3, #0]
}
    6932:	0018      	movs	r0, r3
    6934:	46bd      	mov	sp, r7
    6936:	b005      	add	sp, #20
    6938:	bd90      	pop	{r4, r7, pc}
    693a:	46c0      	nop			; (mov r8, r8)
    693c:	20000b78 	.word	0x20000b78
    6940:	0000b913 	.word	0x0000b913
    6944:	00000217 	.word	0x00000217
    6948:	0001efe8 	.word	0x0001efe8
    694c:	20000f5c 	.word	0x20000f5c
    6950:	0000f171 	.word	0x0000f171
    6954:	000087d5 	.word	0x000087d5
    6958:	0000021e 	.word	0x0000021e
    695c:	0000bcb5 	.word	0x0000bcb5

00006960 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
    6960:	b580      	push	{r7, lr}
    6962:	b084      	sub	sp, #16
    6964:	af00      	add	r7, sp, #0
    6966:	0002      	movs	r2, r0
    6968:	1dfb      	adds	r3, r7, #7
    696a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    696c:	4a1b      	ldr	r2, [pc, #108]	; (69dc <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    696e:	239c      	movs	r3, #156	; 0x9c
    6970:	00db      	lsls	r3, r3, #3
    6972:	58d2      	ldr	r2, [r2, r3]
    6974:	2380      	movs	r3, #128	; 0x80
    6976:	005b      	lsls	r3, r3, #1
    6978:	5cd2      	ldrb	r2, [r2, r3]
    697a:	230c      	movs	r3, #12
    697c:	18fb      	adds	r3, r7, r3
    697e:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
    6980:	230c      	movs	r3, #12
    6982:	18fb      	adds	r3, r7, r3
    6984:	1dfa      	adds	r2, r7, #7
    6986:	7812      	ldrb	r2, [r2, #0]
    6988:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    698a:	230c      	movs	r3, #12
    698c:	18fb      	adds	r3, r7, r3
    698e:	220c      	movs	r2, #12
    6990:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
    6992:	4a12      	ldr	r2, [pc, #72]	; (69dc <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    6994:	239c      	movs	r3, #156	; 0x9c
    6996:	00db      	lsls	r3, r3, #3
    6998:	58d2      	ldr	r2, [r2, r3]
    699a:	2316      	movs	r3, #22
    699c:	33ff      	adds	r3, #255	; 0xff
    699e:	5cd3      	ldrb	r3, [r2, r3]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d003      	beq.n	69ac <GetMaxAppPayloadWithoutFOptsLength+0x4c>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    69a4:	230c      	movs	r3, #12
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	220d      	movs	r2, #13
    69aa:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    69ac:	4a0b      	ldr	r2, [pc, #44]	; (69dc <GetMaxAppPayloadWithoutFOptsLength+0x7c>)
    69ae:	239c      	movs	r3, #156	; 0x9c
    69b0:	00db      	lsls	r3, r3, #3
    69b2:	58d3      	ldr	r3, [r2, r3]
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	220c      	movs	r2, #12
    69b8:	18ba      	adds	r2, r7, r2
    69ba:	0011      	movs	r1, r2
    69bc:	0018      	movs	r0, r3
    69be:	4b08      	ldr	r3, [pc, #32]	; (69e0 <GetMaxAppPayloadWithoutFOptsLength+0x80>)
    69c0:	4798      	blx	r3
    69c2:	0003      	movs	r3, r0
    69c4:	001a      	movs	r2, r3
    69c6:	2308      	movs	r3, #8
    69c8:	18fb      	adds	r3, r7, r3
    69ca:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
    69cc:	2308      	movs	r3, #8
    69ce:	18fb      	adds	r3, r7, r3
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	b2db      	uxtb	r3, r3
}
    69d4:	0018      	movs	r0, r3
    69d6:	46bd      	mov	sp, r7
    69d8:	b004      	add	sp, #16
    69da:	bd80      	pop	{r7, pc}
    69dc:	20000b78 	.word	0x20000b78
    69e0:	0000eff1 	.word	0x0000eff1

000069e4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
    69e4:	b590      	push	{r4, r7, lr}
    69e6:	b085      	sub	sp, #20
    69e8:	af00      	add	r7, sp, #0
    69ea:	0004      	movs	r4, r0
    69ec:	0008      	movs	r0, r1
    69ee:	0011      	movs	r1, r2
    69f0:	1dfb      	adds	r3, r7, #7
    69f2:	1c22      	adds	r2, r4, #0
    69f4:	701a      	strb	r2, [r3, #0]
    69f6:	1dbb      	adds	r3, r7, #6
    69f8:	1c02      	adds	r2, r0, #0
    69fa:	701a      	strb	r2, [r3, #0]
    69fc:	1d7b      	adds	r3, r7, #5
    69fe:	1c0a      	adds	r2, r1, #0
    6a00:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
    6a02:	230e      	movs	r3, #14
    6a04:	18fb      	adds	r3, r7, r3
    6a06:	2200      	movs	r2, #0
    6a08:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
    6a0a:	230c      	movs	r3, #12
    6a0c:	18fb      	adds	r3, r7, r3
    6a0e:	2200      	movs	r2, #0
    6a10:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
    6a12:	1dbb      	adds	r3, r7, #6
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	b25b      	sxtb	r3, r3
    6a18:	0018      	movs	r0, r3
    6a1a:	4b12      	ldr	r3, [pc, #72]	; (6a64 <ValidatePayloadLength+0x80>)
    6a1c:	4798      	blx	r3
    6a1e:	0003      	movs	r3, r0
    6a20:	001a      	movs	r2, r3
    6a22:	230e      	movs	r3, #14
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
    6a28:	1dfb      	adds	r3, r7, #7
    6a2a:	781b      	ldrb	r3, [r3, #0]
    6a2c:	b299      	uxth	r1, r3
    6a2e:	1d7b      	adds	r3, r7, #5
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	b29a      	uxth	r2, r3
    6a34:	230c      	movs	r3, #12
    6a36:	18fb      	adds	r3, r7, r3
    6a38:	188a      	adds	r2, r1, r2
    6a3a:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
    6a3c:	230c      	movs	r3, #12
    6a3e:	18fa      	adds	r2, r7, r3
    6a40:	230e      	movs	r3, #14
    6a42:	18fb      	adds	r3, r7, r3
    6a44:	8812      	ldrh	r2, [r2, #0]
    6a46:	881b      	ldrh	r3, [r3, #0]
    6a48:	429a      	cmp	r2, r3
    6a4a:	d806      	bhi.n	6a5a <ValidatePayloadLength+0x76>
    6a4c:	230c      	movs	r3, #12
    6a4e:	18fb      	adds	r3, r7, r3
    6a50:	881b      	ldrh	r3, [r3, #0]
    6a52:	2bff      	cmp	r3, #255	; 0xff
    6a54:	d801      	bhi.n	6a5a <ValidatePayloadLength+0x76>
    {
        return true;
    6a56:	2301      	movs	r3, #1
    6a58:	e000      	b.n	6a5c <ValidatePayloadLength+0x78>
    }
    return false;
    6a5a:	2300      	movs	r3, #0
}
    6a5c:	0018      	movs	r0, r3
    6a5e:	46bd      	mov	sp, r7
    6a60:	b005      	add	sp, #20
    6a62:	bd90      	pop	{r4, r7, pc}
    6a64:	00006961 	.word	0x00006961

00006a68 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
    6a68:	b580      	push	{r7, lr}
    6a6a:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
    6a6c:	4a06      	ldr	r2, [pc, #24]	; (6a88 <SetMlmeScheduleUplinkIndication+0x20>)
    6a6e:	238b      	movs	r3, #139	; 0x8b
    6a70:	00db      	lsls	r3, r3, #3
    6a72:	2106      	movs	r1, #6
    6a74:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
    6a76:	4b04      	ldr	r3, [pc, #16]	; (6a88 <SetMlmeScheduleUplinkIndication+0x20>)
    6a78:	4a04      	ldr	r2, [pc, #16]	; (6a8c <SetMlmeScheduleUplinkIndication+0x24>)
    6a7a:	5c99      	ldrb	r1, [r3, r2]
    6a7c:	2008      	movs	r0, #8
    6a7e:	4301      	orrs	r1, r0
    6a80:	5499      	strb	r1, [r3, r2]
}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	46bd      	mov	sp, r7
    6a86:	bd80      	pop	{r7, pc}
    6a88:	20000b78 	.word	0x20000b78
    6a8c:	00000471 	.word	0x00000471

00006a90 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
    6a90:	b5b0      	push	{r4, r5, r7, lr}
    6a92:	b0aa      	sub	sp, #168	; 0xa8
    6a94:	af02      	add	r7, sp, #8
    6a96:	6078      	str	r0, [r7, #4]
    6a98:	000c      	movs	r4, r1
    6a9a:	0010      	movs	r0, r2
    6a9c:	0019      	movs	r1, r3
    6a9e:	1cfb      	adds	r3, r7, #3
    6aa0:	1c22      	adds	r2, r4, #0
    6aa2:	701a      	strb	r2, [r3, #0]
    6aa4:	1cbb      	adds	r3, r7, #2
    6aa6:	1c02      	adds	r2, r0, #0
    6aa8:	701a      	strb	r2, [r3, #0]
    6aaa:	1c7b      	adds	r3, r7, #1
    6aac:	1c0a      	adds	r2, r1, #0
    6aae:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
    6ab0:	2373      	movs	r3, #115	; 0x73
    6ab2:	18fb      	adds	r3, r7, r3
    6ab4:	2200      	movs	r2, #0
    6ab6:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
    6ab8:	239f      	movs	r3, #159	; 0x9f
    6aba:	18fb      	adds	r3, r7, r3
    6abc:	2200      	movs	r2, #0
    6abe:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    6ac0:	2370      	movs	r3, #112	; 0x70
    6ac2:	18fb      	adds	r3, r7, r3
    6ac4:	2200      	movs	r2, #0
    6ac6:	701a      	strb	r2, [r3, #0]
    6ac8:	2370      	movs	r3, #112	; 0x70
    6aca:	18fb      	adds	r3, r7, r3
    6acc:	2200      	movs	r2, #0
    6ace:	705a      	strb	r2, [r3, #1]
    MacCommand_t* macCmd;

    while( macIndex < commandsSize )
    6ad0:	f000 ffe5 	bl	7a9e <ProcessMacCommands+0x100e>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
    6ad4:	1cfb      	adds	r3, r7, #3
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	1cfa      	adds	r2, r7, #3
    6ada:	1c59      	adds	r1, r3, #1
    6adc:	7011      	strb	r1, [r2, #0]
    6ade:	001a      	movs	r2, r3
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	189b      	adds	r3, r3, r2
    6ae4:	781b      	ldrb	r3, [r3, #0]
    6ae6:	2b20      	cmp	r3, #32
    6ae8:	d901      	bls.n	6aee <ProcessMacCommands+0x5e>
    6aea:	f000 ffe1 	bl	7ab0 <ProcessMacCommands+0x1020>
    6aee:	009a      	lsls	r2, r3, #2
    6af0:	4bae      	ldr	r3, [pc, #696]	; (6dac <ProcessMacCommands+0x31c>)
    6af2:	18d3      	adds	r3, r2, r3
    6af4:	681b      	ldr	r3, [r3, #0]
    6af6:	469f      	mov	pc, r3
        {
            case SRV_MAC_RESET_CONF:
            {
                uint8_t serverMinorVersion = payload[macIndex++];
    6af8:	1cfb      	adds	r3, r7, #3
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	1cfa      	adds	r2, r7, #3
    6afe:	1c59      	adds	r1, r3, #1
    6b00:	7011      	strb	r1, [r2, #0]
    6b02:	001a      	movs	r2, r3
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	189a      	adds	r2, r3, r2
    6b08:	239a      	movs	r3, #154	; 0x9a
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	7812      	ldrb	r2, [r2, #0]
    6b0e:	701a      	strb	r2, [r3, #0]

                // Compare own LoRaWAN Version with server's
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    6b10:	4aa7      	ldr	r2, [pc, #668]	; (6db0 <ProcessMacCommands+0x320>)
    6b12:	239c      	movs	r3, #156	; 0x9c
    6b14:	00db      	lsls	r3, r3, #3
    6b16:	58d3      	ldr	r3, [r2, r3]
    6b18:	4aa6      	ldr	r2, [pc, #664]	; (6db4 <ProcessMacCommands+0x324>)
    6b1a:	5c9b      	ldrb	r3, [r3, r2]
    6b1c:	229a      	movs	r2, #154	; 0x9a
    6b1e:	18ba      	adds	r2, r7, r2
    6b20:	7812      	ldrb	r2, [r2, #0]
    6b22:	429a      	cmp	r2, r3
    6b24:	d109      	bne.n	6b3a <ProcessMacCommands+0xaa>
                {
                    // If they equal remove the sticky ResetInd MAC-Command.
                    LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd);
    6b26:	236c      	movs	r3, #108	; 0x6c
    6b28:	18fb      	adds	r3, r7, r3
    6b2a:	0019      	movs	r1, r3
    6b2c:	2001      	movs	r0, #1
    6b2e:	4ba2      	ldr	r3, [pc, #648]	; (6db8 <ProcessMacCommands+0x328>)
    6b30:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    6b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6b34:	0018      	movs	r0, r3
    6b36:	4ba1      	ldr	r3, [pc, #644]	; (6dbc <ProcessMacCommands+0x32c>)
    6b38:	4798      	blx	r3
    6b3a:	239f      	movs	r3, #159	; 0x9f
    6b3c:	18fb      	adds	r3, r7, r3
    6b3e:	229f      	movs	r2, #159	; 0x9f
    6b40:	18ba      	adds	r2, r7, r2
    6b42:	7812      	ldrb	r2, [r2, #0]
    6b44:	701a      	strb	r2, [r3, #0]
                }
                break;
    6b46:	f000 ffaa 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
    6b4a:	2003      	movs	r0, #3
    6b4c:	4b9c      	ldr	r3, [pc, #624]	; (6dc0 <ProcessMacCommands+0x330>)
    6b4e:	4798      	blx	r3
    6b50:	1e03      	subs	r3, r0, #0
    6b52:	d01b      	beq.n	6b8c <ProcessMacCommands+0xfc>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
    6b54:	2103      	movs	r1, #3
    6b56:	2000      	movs	r0, #0
    6b58:	4b9a      	ldr	r3, [pc, #616]	; (6dc4 <ProcessMacCommands+0x334>)
    6b5a:	4798      	blx	r3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
    6b5c:	1cfb      	adds	r3, r7, #3
    6b5e:	781b      	ldrb	r3, [r3, #0]
    6b60:	1cfa      	adds	r2, r7, #3
    6b62:	1c59      	adds	r1, r3, #1
    6b64:	7011      	strb	r1, [r2, #0]
    6b66:	001a      	movs	r2, r3
    6b68:	687b      	ldr	r3, [r7, #4]
    6b6a:	189b      	adds	r3, r3, r2
    6b6c:	7819      	ldrb	r1, [r3, #0]
    6b6e:	4b90      	ldr	r3, [pc, #576]	; (6db0 <ProcessMacCommands+0x320>)
    6b70:	4a95      	ldr	r2, [pc, #596]	; (6dc8 <ProcessMacCommands+0x338>)
    6b72:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
    6b74:	1cfb      	adds	r3, r7, #3
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	1cfa      	adds	r2, r7, #3
    6b7a:	1c59      	adds	r1, r3, #1
    6b7c:	7011      	strb	r1, [r2, #0]
    6b7e:	001a      	movs	r2, r3
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	189b      	adds	r3, r3, r2
    6b84:	7819      	ldrb	r1, [r3, #0]
    6b86:	4b8a      	ldr	r3, [pc, #552]	; (6db0 <ProcessMacCommands+0x320>)
    6b88:	4a90      	ldr	r2, [pc, #576]	; (6dcc <ProcessMacCommands+0x33c>)
    6b8a:	5499      	strb	r1, [r3, r2]
    6b8c:	239f      	movs	r3, #159	; 0x9f
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	229f      	movs	r2, #159	; 0x9f
    6b92:	18ba      	adds	r2, r7, r2
    6b94:	7812      	ldrb	r2, [r2, #0]
    6b96:	701a      	strb	r2, [r3, #0]
                }
                break;
    6b98:	f000 ff81 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
    6b9c:	235b      	movs	r3, #91	; 0x5b
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	2200      	movs	r2, #0
    6ba2:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
    6ba4:	235a      	movs	r3, #90	; 0x5a
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	2200      	movs	r2, #0
    6baa:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
    6bac:	2359      	movs	r3, #89	; 0x59
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	2200      	movs	r2, #0
    6bb2:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
    6bb4:	2358      	movs	r3, #88	; 0x58
    6bb6:	18fb      	adds	r3, r7, r3
    6bb8:	2200      	movs	r2, #0
    6bba:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
    6bbc:	239f      	movs	r3, #159	; 0x9f
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	781b      	ldrb	r3, [r3, #0]
    6bc2:	2201      	movs	r2, #1
    6bc4:	4053      	eors	r3, r2
    6bc6:	b2db      	uxtb	r3, r3
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d100      	bne.n	6bce <ProcessMacCommands+0x13e>
    6bcc:	e0b7      	b.n	6d3e <ProcessMacCommands+0x2ae>
                {
                    adrBlockFound = true;
    6bce:	239f      	movs	r3, #159	; 0x9f
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	2201      	movs	r2, #1
    6bd4:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
    6bd6:	1cfb      	adds	r3, r7, #3
    6bd8:	781b      	ldrb	r3, [r3, #0]
    6bda:	3b01      	subs	r3, #1
    6bdc:	687a      	ldr	r2, [r7, #4]
    6bde:	18d2      	adds	r2, r2, r3
    6be0:	235c      	movs	r3, #92	; 0x5c
    6be2:	18fb      	adds	r3, r7, r3
    6be4:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
    6be6:	1cba      	adds	r2, r7, #2
    6be8:	1cfb      	adds	r3, r7, #3
    6bea:	7812      	ldrb	r2, [r2, #0]
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	1ad3      	subs	r3, r2, r3
    6bf0:	b2db      	uxtb	r3, r3
    6bf2:	3301      	adds	r3, #1
    6bf4:	b2da      	uxtb	r2, r3
    6bf6:	235c      	movs	r3, #92	; 0x5c
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    6bfc:	4a6c      	ldr	r2, [pc, #432]	; (6db0 <ProcessMacCommands+0x320>)
    6bfe:	239c      	movs	r3, #156	; 0x9c
    6c00:	00db      	lsls	r3, r3, #3
    6c02:	58d3      	ldr	r3, [r2, r3]
    6c04:	22ca      	movs	r2, #202	; 0xca
    6c06:	5c9a      	ldrb	r2, [r3, r2]
    6c08:	235c      	movs	r3, #92	; 0x5c
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    6c0e:	4a68      	ldr	r2, [pc, #416]	; (6db0 <ProcessMacCommands+0x320>)
    6c10:	239c      	movs	r3, #156	; 0x9c
    6c12:	00db      	lsls	r3, r3, #3
    6c14:	58d2      	ldr	r2, [r2, r3]
    6c16:	2380      	movs	r3, #128	; 0x80
    6c18:	005b      	lsls	r3, r3, #1
    6c1a:	5cd2      	ldrb	r2, [r2, r3]
    6c1c:	235c      	movs	r3, #92	; 0x5c
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    6c22:	4a63      	ldr	r2, [pc, #396]	; (6db0 <ProcessMacCommands+0x320>)
    6c24:	239c      	movs	r3, #156	; 0x9c
    6c26:	00db      	lsls	r3, r3, #3
    6c28:	58d3      	ldr	r3, [r2, r3]
    6c2a:	22d5      	movs	r2, #213	; 0xd5
    6c2c:	569a      	ldrsb	r2, [r3, r2]
    6c2e:	235c      	movs	r3, #92	; 0x5c
    6c30:	18fb      	adds	r3, r7, r3
    6c32:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    6c34:	4a5e      	ldr	r2, [pc, #376]	; (6db0 <ProcessMacCommands+0x320>)
    6c36:	239c      	movs	r3, #156	; 0x9c
    6c38:	00db      	lsls	r3, r3, #3
    6c3a:	58d3      	ldr	r3, [r2, r3]
    6c3c:	22d4      	movs	r2, #212	; 0xd4
    6c3e:	569a      	ldrsb	r2, [r3, r2]
    6c40:	235c      	movs	r3, #92	; 0x5c
    6c42:	18fb      	adds	r3, r7, r3
    6c44:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    6c46:	4a5a      	ldr	r2, [pc, #360]	; (6db0 <ProcessMacCommands+0x320>)
    6c48:	239c      	movs	r3, #156	; 0x9c
    6c4a:	00db      	lsls	r3, r3, #3
    6c4c:	58d3      	ldr	r3, [r2, r3]
    6c4e:	22f4      	movs	r2, #244	; 0xf4
    6c50:	5c9a      	ldrb	r2, [r3, r2]
    6c52:	235c      	movs	r3, #92	; 0x5c
    6c54:	18fb      	adds	r3, r7, r3
    6c56:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
    6c58:	4a55      	ldr	r2, [pc, #340]	; (6db0 <ProcessMacCommands+0x320>)
    6c5a:	239c      	movs	r3, #156	; 0x9c
    6c5c:	00db      	lsls	r3, r3, #3
    6c5e:	58d1      	ldr	r1, [r2, r3]
    6c60:	235c      	movs	r3, #92	; 0x5c
    6c62:	18fb      	adds	r3, r7, r3
    6c64:	2287      	movs	r2, #135	; 0x87
    6c66:	0092      	lsls	r2, r2, #2
    6c68:	588a      	ldr	r2, [r1, r2]
    6c6a:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
    6c6c:	4a50      	ldr	r2, [pc, #320]	; (6db0 <ProcessMacCommands+0x320>)
    6c6e:	239c      	movs	r3, #156	; 0x9c
    6c70:	00db      	lsls	r3, r3, #3
    6c72:	58d3      	ldr	r3, [r2, r3]
    6c74:	7818      	ldrb	r0, [r3, #0]
    6c76:	235a      	movs	r3, #90	; 0x5a
    6c78:	18fc      	adds	r4, r7, r3
    6c7a:	235b      	movs	r3, #91	; 0x5b
    6c7c:	18fa      	adds	r2, r7, r3
    6c7e:	235c      	movs	r3, #92	; 0x5c
    6c80:	18f9      	adds	r1, r7, r3
    6c82:	2358      	movs	r3, #88	; 0x58
    6c84:	18fb      	adds	r3, r7, r3
    6c86:	9301      	str	r3, [sp, #4]
    6c88:	2359      	movs	r3, #89	; 0x59
    6c8a:	18fb      	adds	r3, r7, r3
    6c8c:	9300      	str	r3, [sp, #0]
    6c8e:	0023      	movs	r3, r4
    6c90:	4c4f      	ldr	r4, [pc, #316]	; (6dd0 <ProcessMacCommands+0x340>)
    6c92:	47a0      	blx	r4
    6c94:	0003      	movs	r3, r0
    6c96:	001a      	movs	r2, r3
    6c98:	2373      	movs	r3, #115	; 0x73
    6c9a:	18fb      	adds	r3, r7, r3
    6c9c:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
    6c9e:	2373      	movs	r3, #115	; 0x73
    6ca0:	18fb      	adds	r3, r7, r3
    6ca2:	781b      	ldrb	r3, [r3, #0]
    6ca4:	001a      	movs	r2, r3
    6ca6:	2307      	movs	r3, #7
    6ca8:	4013      	ands	r3, r2
    6caa:	2b07      	cmp	r3, #7
    6cac:	d11c      	bne.n	6ce8 <ProcessMacCommands+0x258>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
    6cae:	4a40      	ldr	r2, [pc, #256]	; (6db0 <ProcessMacCommands+0x320>)
    6cb0:	239c      	movs	r3, #156	; 0x9c
    6cb2:	00db      	lsls	r3, r3, #3
    6cb4:	58d3      	ldr	r3, [r2, r3]
    6cb6:	225b      	movs	r2, #91	; 0x5b
    6cb8:	18ba      	adds	r2, r7, r2
    6cba:	2100      	movs	r1, #0
    6cbc:	5651      	ldrsb	r1, [r2, r1]
    6cbe:	22d5      	movs	r2, #213	; 0xd5
    6cc0:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
    6cc2:	4a3b      	ldr	r2, [pc, #236]	; (6db0 <ProcessMacCommands+0x320>)
    6cc4:	239c      	movs	r3, #156	; 0x9c
    6cc6:	00db      	lsls	r3, r3, #3
    6cc8:	58d3      	ldr	r3, [r2, r3]
    6cca:	225a      	movs	r2, #90	; 0x5a
    6ccc:	18ba      	adds	r2, r7, r2
    6cce:	2100      	movs	r1, #0
    6cd0:	5651      	ldrsb	r1, [r2, r1]
    6cd2:	22d4      	movs	r2, #212	; 0xd4
    6cd4:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
    6cd6:	4a36      	ldr	r2, [pc, #216]	; (6db0 <ProcessMacCommands+0x320>)
    6cd8:	239c      	movs	r3, #156	; 0x9c
    6cda:	00db      	lsls	r3, r3, #3
    6cdc:	58d3      	ldr	r3, [r2, r3]
    6cde:	2259      	movs	r2, #89	; 0x59
    6ce0:	18ba      	adds	r2, r7, r2
    6ce2:	7811      	ldrb	r1, [r2, #0]
    6ce4:	22f4      	movs	r2, #244	; 0xf4
    6ce6:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    6ce8:	239e      	movs	r3, #158	; 0x9e
    6cea:	18fb      	adds	r3, r7, r3
    6cec:	2200      	movs	r2, #0
    6cee:	701a      	strb	r2, [r3, #0]
    6cf0:	e00d      	b.n	6d0e <ProcessMacCommands+0x27e>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
    6cf2:	2373      	movs	r3, #115	; 0x73
    6cf4:	18fb      	adds	r3, r7, r3
    6cf6:	2201      	movs	r2, #1
    6cf8:	0019      	movs	r1, r3
    6cfa:	2003      	movs	r0, #3
    6cfc:	4b35      	ldr	r3, [pc, #212]	; (6dd4 <ProcessMacCommands+0x344>)
    6cfe:	4798      	blx	r3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
    6d00:	239e      	movs	r3, #158	; 0x9e
    6d02:	18fb      	adds	r3, r7, r3
    6d04:	781a      	ldrb	r2, [r3, #0]
    6d06:	239e      	movs	r3, #158	; 0x9e
    6d08:	18fb      	adds	r3, r7, r3
    6d0a:	3201      	adds	r2, #1
    6d0c:	701a      	strb	r2, [r3, #0]
    6d0e:	2358      	movs	r3, #88	; 0x58
    6d10:	18fb      	adds	r3, r7, r3
    6d12:	781a      	ldrb	r2, [r3, #0]
    6d14:	4b30      	ldr	r3, [pc, #192]	; (6dd8 <ProcessMacCommands+0x348>)
    6d16:	2105      	movs	r1, #5
    6d18:	0010      	movs	r0, r2
    6d1a:	4798      	blx	r3
    6d1c:	0003      	movs	r3, r0
    6d1e:	b2db      	uxtb	r3, r3
    6d20:	229e      	movs	r2, #158	; 0x9e
    6d22:	18ba      	adds	r2, r7, r2
    6d24:	7812      	ldrb	r2, [r2, #0]
    6d26:	429a      	cmp	r2, r3
    6d28:	d3e3      	bcc.n	6cf2 <ProcessMacCommands+0x262>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
    6d2a:	2358      	movs	r3, #88	; 0x58
    6d2c:	18fb      	adds	r3, r7, r3
    6d2e:	781a      	ldrb	r2, [r3, #0]
    6d30:	1cfb      	adds	r3, r7, #3
    6d32:	781b      	ldrb	r3, [r3, #0]
    6d34:	18d3      	adds	r3, r2, r3
    6d36:	b2da      	uxtb	r2, r3
    6d38:	1cfb      	adds	r3, r7, #3
    6d3a:	3a01      	subs	r2, #1
    6d3c:	701a      	strb	r2, [r3, #0]
                }
                break;
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	f000 fead 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
    6d44:	4a1a      	ldr	r2, [pc, #104]	; (6db0 <ProcessMacCommands+0x320>)
    6d46:	239c      	movs	r3, #156	; 0x9c
    6d48:	00db      	lsls	r3, r3, #3
    6d4a:	58d2      	ldr	r2, [r2, r3]
    6d4c:	1cfb      	adds	r3, r7, #3
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	1cf9      	adds	r1, r7, #3
    6d52:	1c58      	adds	r0, r3, #1
    6d54:	7008      	strb	r0, [r1, #0]
    6d56:	0019      	movs	r1, r3
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	185b      	adds	r3, r3, r1
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	210f      	movs	r1, #15
    6d60:	400b      	ands	r3, r1
    6d62:	b2d9      	uxtb	r1, r3
    6d64:	2312      	movs	r3, #18
    6d66:	33ff      	adds	r3, #255	; 0xff
    6d68:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
    6d6a:	4a11      	ldr	r2, [pc, #68]	; (6db0 <ProcessMacCommands+0x320>)
    6d6c:	239c      	movs	r3, #156	; 0x9c
    6d6e:	00db      	lsls	r3, r3, #3
    6d70:	58d3      	ldr	r3, [r2, r3]
    6d72:	490f      	ldr	r1, [pc, #60]	; (6db0 <ProcessMacCommands+0x320>)
    6d74:	229c      	movs	r2, #156	; 0x9c
    6d76:	00d2      	lsls	r2, r2, #3
    6d78:	5889      	ldr	r1, [r1, r2]
    6d7a:	2212      	movs	r2, #18
    6d7c:	32ff      	adds	r2, #255	; 0xff
    6d7e:	5c8a      	ldrb	r2, [r1, r2]
    6d80:	0011      	movs	r1, r2
    6d82:	2201      	movs	r2, #1
    6d84:	408a      	lsls	r2, r1
    6d86:	b291      	uxth	r1, r2
    6d88:	4a14      	ldr	r2, [pc, #80]	; (6ddc <ProcessMacCommands+0x34c>)
    6d8a:	5299      	strh	r1, [r3, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
    6d8c:	2370      	movs	r3, #112	; 0x70
    6d8e:	18fb      	adds	r3, r7, r3
    6d90:	2200      	movs	r2, #0
    6d92:	0019      	movs	r1, r3
    6d94:	2004      	movs	r0, #4
    6d96:	4b0f      	ldr	r3, [pc, #60]	; (6dd4 <ProcessMacCommands+0x344>)
    6d98:	4798      	blx	r3
    6d9a:	239f      	movs	r3, #159	; 0x9f
    6d9c:	18fb      	adds	r3, r7, r3
    6d9e:	229f      	movs	r2, #159	; 0x9f
    6da0:	18ba      	adds	r2, r7, r2
    6da2:	7812      	ldrb	r2, [r2, #0]
    6da4:	701a      	strb	r2, [r3, #0]
                break;
    6da6:	f000 fe7a 	bl	7a9e <ProcessMacCommands+0x100e>
    6daa:	46c0      	nop			; (mov r8, r8)
    6dac:	0001f064 	.word	0x0001f064
    6db0:	20000b78 	.word	0x20000b78
    6db4:	0000021e 	.word	0x0000021e
    6db8:	0000bde9 	.word	0x0000bde9
    6dbc:	0000bd6d 	.word	0x0000bd6d
    6dc0:	0000c339 	.word	0x0000c339
    6dc4:	0000c211 	.word	0x0000c211
    6dc8:	0000044c 	.word	0x0000044c
    6dcc:	0000044d 	.word	0x0000044d
    6dd0:	0000f235 	.word	0x0000f235
    6dd4:	0000bcb5 	.word	0x0000bcb5
    6dd8:	00017b4d 	.word	0x00017b4d
    6ddc:	0000021a 	.word	0x0000021a
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
    6de0:	2373      	movs	r3, #115	; 0x73
    6de2:	18fb      	adds	r3, r7, r3
    6de4:	2207      	movs	r2, #7
    6de6:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
    6de8:	1cfb      	adds	r3, r7, #3
    6dea:	781b      	ldrb	r3, [r3, #0]
    6dec:	687a      	ldr	r2, [r7, #4]
    6dee:	18d3      	adds	r3, r2, r3
    6df0:	781b      	ldrb	r3, [r3, #0]
    6df2:	091b      	lsrs	r3, r3, #4
    6df4:	b2db      	uxtb	r3, r3
    6df6:	b25b      	sxtb	r3, r3
    6df8:	2207      	movs	r2, #7
    6dfa:	4013      	ands	r3, r2
    6dfc:	b25a      	sxtb	r2, r3
    6dfe:	2350      	movs	r3, #80	; 0x50
    6e00:	18fb      	adds	r3, r7, r3
    6e02:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
    6e04:	1cfb      	adds	r3, r7, #3
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	687a      	ldr	r2, [r7, #4]
    6e0a:	18d3      	adds	r3, r2, r3
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	b25b      	sxtb	r3, r3
    6e10:	220f      	movs	r2, #15
    6e12:	4013      	ands	r3, r2
    6e14:	b25a      	sxtb	r2, r3
    6e16:	2350      	movs	r3, #80	; 0x50
    6e18:	18fb      	adds	r3, r7, r3
    6e1a:	701a      	strb	r2, [r3, #0]
                macIndex++;
    6e1c:	1cfb      	adds	r3, r7, #3
    6e1e:	781a      	ldrb	r2, [r3, #0]
    6e20:	1cfb      	adds	r3, r7, #3
    6e22:	3201      	adds	r2, #1
    6e24:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
    6e26:	1cfb      	adds	r3, r7, #3
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	1cfa      	adds	r2, r7, #3
    6e2c:	1c59      	adds	r1, r3, #1
    6e2e:	7011      	strb	r1, [r2, #0]
    6e30:	001a      	movs	r2, r3
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	189b      	adds	r3, r3, r2
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	001a      	movs	r2, r3
    6e3a:	2350      	movs	r3, #80	; 0x50
    6e3c:	18fb      	adds	r3, r7, r3
    6e3e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    6e40:	1cfb      	adds	r3, r7, #3
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	1cfa      	adds	r2, r7, #3
    6e46:	1c59      	adds	r1, r3, #1
    6e48:	7011      	strb	r1, [r2, #0]
    6e4a:	001a      	movs	r2, r3
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	189b      	adds	r3, r3, r2
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	021a      	lsls	r2, r3, #8
    6e54:	2350      	movs	r3, #80	; 0x50
    6e56:	18fb      	adds	r3, r7, r3
    6e58:	685b      	ldr	r3, [r3, #4]
    6e5a:	431a      	orrs	r2, r3
    6e5c:	2350      	movs	r3, #80	; 0x50
    6e5e:	18fb      	adds	r3, r7, r3
    6e60:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    6e62:	1cfb      	adds	r3, r7, #3
    6e64:	781b      	ldrb	r3, [r3, #0]
    6e66:	1cfa      	adds	r2, r7, #3
    6e68:	1c59      	adds	r1, r3, #1
    6e6a:	7011      	strb	r1, [r2, #0]
    6e6c:	001a      	movs	r2, r3
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	189b      	adds	r3, r3, r2
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	041a      	lsls	r2, r3, #16
    6e76:	2350      	movs	r3, #80	; 0x50
    6e78:	18fb      	adds	r3, r7, r3
    6e7a:	685b      	ldr	r3, [r3, #4]
    6e7c:	431a      	orrs	r2, r3
    6e7e:	2350      	movs	r3, #80	; 0x50
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
    6e84:	2350      	movs	r3, #80	; 0x50
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	685b      	ldr	r3, [r3, #4]
    6e8a:	2264      	movs	r2, #100	; 0x64
    6e8c:	435a      	muls	r2, r3
    6e8e:	2350      	movs	r3, #80	; 0x50
    6e90:	18fb      	adds	r3, r7, r3
    6e92:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
    6e94:	4aa9      	ldr	r2, [pc, #676]	; (713c <ProcessMacCommands+0x6ac>)
    6e96:	239c      	movs	r3, #156	; 0x9c
    6e98:	00db      	lsls	r3, r3, #3
    6e9a:	58d3      	ldr	r3, [r2, r3]
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	2250      	movs	r2, #80	; 0x50
    6ea0:	18ba      	adds	r2, r7, r2
    6ea2:	0011      	movs	r1, r2
    6ea4:	0018      	movs	r0, r3
    6ea6:	4ba6      	ldr	r3, [pc, #664]	; (7140 <ProcessMacCommands+0x6b0>)
    6ea8:	4798      	blx	r3
    6eaa:	0003      	movs	r3, r0
    6eac:	001a      	movs	r2, r3
    6eae:	2373      	movs	r3, #115	; 0x73
    6eb0:	18fb      	adds	r3, r7, r3
    6eb2:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
    6eb4:	2373      	movs	r3, #115	; 0x73
    6eb6:	18fb      	adds	r3, r7, r3
    6eb8:	781b      	ldrb	r3, [r3, #0]
    6eba:	001a      	movs	r2, r3
    6ebc:	2307      	movs	r3, #7
    6ebe:	4013      	ands	r3, r2
    6ec0:	2b07      	cmp	r3, #7
    6ec2:	d11e      	bne.n	6f02 <ProcessMacCommands+0x472>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
    6ec4:	4a9d      	ldr	r2, [pc, #628]	; (713c <ProcessMacCommands+0x6ac>)
    6ec6:	239c      	movs	r3, #156	; 0x9c
    6ec8:	00db      	lsls	r3, r3, #3
    6eca:	58d3      	ldr	r3, [r2, r3]
    6ecc:	2250      	movs	r2, #80	; 0x50
    6ece:	18ba      	adds	r2, r7, r2
    6ed0:	7812      	ldrb	r2, [r2, #0]
    6ed2:	b252      	sxtb	r2, r2
    6ed4:	b2d1      	uxtb	r1, r2
    6ed6:	22fc      	movs	r2, #252	; 0xfc
    6ed8:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
    6eda:	4a98      	ldr	r2, [pc, #608]	; (713c <ProcessMacCommands+0x6ac>)
    6edc:	239c      	movs	r3, #156	; 0x9c
    6ede:	00db      	lsls	r3, r3, #3
    6ee0:	58d2      	ldr	r2, [r2, r3]
    6ee2:	2350      	movs	r3, #80	; 0x50
    6ee4:	18fb      	adds	r3, r7, r3
    6ee6:	685b      	ldr	r3, [r3, #4]
    6ee8:	21f8      	movs	r1, #248	; 0xf8
    6eea:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
    6eec:	4a93      	ldr	r2, [pc, #588]	; (713c <ProcessMacCommands+0x6ac>)
    6eee:	239c      	movs	r3, #156	; 0x9c
    6ef0:	00db      	lsls	r3, r3, #3
    6ef2:	58d3      	ldr	r3, [r2, r3]
    6ef4:	2250      	movs	r2, #80	; 0x50
    6ef6:	18ba      	adds	r2, r7, r2
    6ef8:	7852      	ldrb	r2, [r2, #1]
    6efa:	b252      	sxtb	r2, r2
    6efc:	b2d1      	uxtb	r1, r2
    6efe:	22f5      	movs	r2, #245	; 0xf5
    6f00:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
    6f02:	2373      	movs	r3, #115	; 0x73
    6f04:	18fb      	adds	r3, r7, r3
    6f06:	781a      	ldrb	r2, [r3, #0]
    6f08:	2370      	movs	r3, #112	; 0x70
    6f0a:	18fb      	adds	r3, r7, r3
    6f0c:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
    6f0e:	2370      	movs	r3, #112	; 0x70
    6f10:	18fb      	adds	r3, r7, r3
    6f12:	2201      	movs	r2, #1
    6f14:	0019      	movs	r1, r3
    6f16:	2005      	movs	r0, #5
    6f18:	4b8a      	ldr	r3, [pc, #552]	; (7144 <ProcessMacCommands+0x6b4>)
    6f1a:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    6f1c:	4b8a      	ldr	r3, [pc, #552]	; (7148 <ProcessMacCommands+0x6b8>)
    6f1e:	4798      	blx	r3
                break;
    6f20:	46c0      	nop			; (mov r8, r8)
    6f22:	239f      	movs	r3, #159	; 0x9f
    6f24:	18fb      	adds	r3, r7, r3
    6f26:	229f      	movs	r2, #159	; 0x9f
    6f28:	18ba      	adds	r2, r7, r2
    6f2a:	7812      	ldrb	r2, [r2, #0]
    6f2c:	701a      	strb	r2, [r3, #0]
    6f2e:	f000 fdb6 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
    6f32:	239d      	movs	r3, #157	; 0x9d
    6f34:	18fb      	adds	r3, r7, r3
    6f36:	22ff      	movs	r2, #255	; 0xff
    6f38:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
    6f3a:	4a80      	ldr	r2, [pc, #512]	; (713c <ProcessMacCommands+0x6ac>)
    6f3c:	23d8      	movs	r3, #216	; 0xd8
    6f3e:	009b      	lsls	r3, r3, #2
    6f40:	58d3      	ldr	r3, [r2, r3]
    6f42:	2b00      	cmp	r3, #0
    6f44:	d010      	beq.n	6f68 <ProcessMacCommands+0x4d8>
    6f46:	4a7d      	ldr	r2, [pc, #500]	; (713c <ProcessMacCommands+0x6ac>)
    6f48:	23d8      	movs	r3, #216	; 0xd8
    6f4a:	009b      	lsls	r3, r3, #2
    6f4c:	58d3      	ldr	r3, [r2, r3]
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	2b00      	cmp	r3, #0
    6f52:	d009      	beq.n	6f68 <ProcessMacCommands+0x4d8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
    6f54:	4a79      	ldr	r2, [pc, #484]	; (713c <ProcessMacCommands+0x6ac>)
    6f56:	23d8      	movs	r3, #216	; 0xd8
    6f58:	009b      	lsls	r3, r3, #2
    6f5a:	58d3      	ldr	r3, [r2, r3]
    6f5c:	681b      	ldr	r3, [r3, #0]
    6f5e:	229d      	movs	r2, #157	; 0x9d
    6f60:	18bc      	adds	r4, r7, r2
    6f62:	4798      	blx	r3
    6f64:	0003      	movs	r3, r0
    6f66:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
    6f68:	2370      	movs	r3, #112	; 0x70
    6f6a:	18fb      	adds	r3, r7, r3
    6f6c:	229d      	movs	r2, #157	; 0x9d
    6f6e:	18ba      	adds	r2, r7, r2
    6f70:	7812      	ldrb	r2, [r2, #0]
    6f72:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
    6f74:	1c7b      	adds	r3, r7, #1
    6f76:	781b      	ldrb	r3, [r3, #0]
    6f78:	223f      	movs	r2, #63	; 0x3f
    6f7a:	4013      	ands	r3, r2
    6f7c:	b2da      	uxtb	r2, r3
    6f7e:	2370      	movs	r3, #112	; 0x70
    6f80:	18fb      	adds	r3, r7, r3
    6f82:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
    6f84:	2370      	movs	r3, #112	; 0x70
    6f86:	18fb      	adds	r3, r7, r3
    6f88:	2202      	movs	r2, #2
    6f8a:	0019      	movs	r1, r3
    6f8c:	2006      	movs	r0, #6
    6f8e:	4b6d      	ldr	r3, [pc, #436]	; (7144 <ProcessMacCommands+0x6b4>)
    6f90:	4798      	blx	r3
    6f92:	239f      	movs	r3, #159	; 0x9f
    6f94:	18fb      	adds	r3, r7, r3
    6f96:	229f      	movs	r2, #159	; 0x9f
    6f98:	18ba      	adds	r2, r7, r2
    6f9a:	7812      	ldrb	r2, [r2, #0]
    6f9c:	701a      	strb	r2, [r3, #0]
                break;
    6f9e:	f000 fd7e 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
    6fa2:	2373      	movs	r3, #115	; 0x73
    6fa4:	18fb      	adds	r3, r7, r3
    6fa6:	2203      	movs	r2, #3
    6fa8:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
    6faa:	1cfb      	adds	r3, r7, #3
    6fac:	781b      	ldrb	r3, [r3, #0]
    6fae:	1cfa      	adds	r2, r7, #3
    6fb0:	1c59      	adds	r1, r3, #1
    6fb2:	7011      	strb	r1, [r2, #0]
    6fb4:	001a      	movs	r2, r3
    6fb6:	687b      	ldr	r3, [r7, #4]
    6fb8:	189b      	adds	r3, r3, r2
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	b25a      	sxtb	r2, r3
    6fbe:	2348      	movs	r3, #72	; 0x48
    6fc0:	18fb      	adds	r3, r7, r3
    6fc2:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
    6fc4:	2348      	movs	r3, #72	; 0x48
    6fc6:	18fb      	adds	r3, r7, r3
    6fc8:	223c      	movs	r2, #60	; 0x3c
    6fca:	18ba      	adds	r2, r7, r2
    6fcc:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
    6fce:	1cfb      	adds	r3, r7, #3
    6fd0:	781b      	ldrb	r3, [r3, #0]
    6fd2:	1cfa      	adds	r2, r7, #3
    6fd4:	1c59      	adds	r1, r3, #1
    6fd6:	7011      	strb	r1, [r2, #0]
    6fd8:	001a      	movs	r2, r3
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	189b      	adds	r3, r3, r2
    6fde:	781b      	ldrb	r3, [r3, #0]
    6fe0:	001a      	movs	r2, r3
    6fe2:	233c      	movs	r3, #60	; 0x3c
    6fe4:	18fb      	adds	r3, r7, r3
    6fe6:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    6fe8:	1cfb      	adds	r3, r7, #3
    6fea:	781b      	ldrb	r3, [r3, #0]
    6fec:	1cfa      	adds	r2, r7, #3
    6fee:	1c59      	adds	r1, r3, #1
    6ff0:	7011      	strb	r1, [r2, #0]
    6ff2:	001a      	movs	r2, r3
    6ff4:	687b      	ldr	r3, [r7, #4]
    6ff6:	189b      	adds	r3, r3, r2
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	021a      	lsls	r2, r3, #8
    6ffc:	233c      	movs	r3, #60	; 0x3c
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	681b      	ldr	r3, [r3, #0]
    7002:	431a      	orrs	r2, r3
    7004:	233c      	movs	r3, #60	; 0x3c
    7006:	18fb      	adds	r3, r7, r3
    7008:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    700a:	1cfb      	adds	r3, r7, #3
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	1cfa      	adds	r2, r7, #3
    7010:	1c59      	adds	r1, r3, #1
    7012:	7011      	strb	r1, [r2, #0]
    7014:	001a      	movs	r2, r3
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	189b      	adds	r3, r3, r2
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	041a      	lsls	r2, r3, #16
    701e:	233c      	movs	r3, #60	; 0x3c
    7020:	18fb      	adds	r3, r7, r3
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	431a      	orrs	r2, r3
    7026:	233c      	movs	r3, #60	; 0x3c
    7028:	18fb      	adds	r3, r7, r3
    702a:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
    702c:	233c      	movs	r3, #60	; 0x3c
    702e:	18fb      	adds	r3, r7, r3
    7030:	681b      	ldr	r3, [r3, #0]
    7032:	2264      	movs	r2, #100	; 0x64
    7034:	435a      	muls	r2, r3
    7036:	233c      	movs	r3, #60	; 0x3c
    7038:	18fb      	adds	r3, r7, r3
    703a:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
    703c:	233c      	movs	r3, #60	; 0x3c
    703e:	18fb      	adds	r3, r7, r3
    7040:	2200      	movs	r2, #0
    7042:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
    7044:	1cfb      	adds	r3, r7, #3
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	1cfa      	adds	r2, r7, #3
    704a:	1c59      	adds	r1, r3, #1
    704c:	7011      	strb	r1, [r2, #0]
    704e:	001a      	movs	r2, r3
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	189b      	adds	r3, r3, r2
    7054:	781b      	ldrb	r3, [r3, #0]
    7056:	b25a      	sxtb	r2, r3
    7058:	233c      	movs	r3, #60	; 0x3c
    705a:	18fb      	adds	r3, r7, r3
    705c:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
    705e:	4a37      	ldr	r2, [pc, #220]	; (713c <ProcessMacCommands+0x6ac>)
    7060:	239c      	movs	r3, #156	; 0x9c
    7062:	00db      	lsls	r3, r3, #3
    7064:	58d3      	ldr	r3, [r2, r3]
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	2248      	movs	r2, #72	; 0x48
    706a:	18ba      	adds	r2, r7, r2
    706c:	0011      	movs	r1, r2
    706e:	0018      	movs	r0, r3
    7070:	4b36      	ldr	r3, [pc, #216]	; (714c <ProcessMacCommands+0x6bc>)
    7072:	4798      	blx	r3
    7074:	0003      	movs	r3, r0
    7076:	001a      	movs	r2, r3
    7078:	2373      	movs	r3, #115	; 0x73
    707a:	18fb      	adds	r3, r7, r3
    707c:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
    707e:	2373      	movs	r3, #115	; 0x73
    7080:	18fb      	adds	r3, r7, r3
    7082:	781a      	ldrb	r2, [r3, #0]
    7084:	2370      	movs	r3, #112	; 0x70
    7086:	18fb      	adds	r3, r7, r3
    7088:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
    708a:	2370      	movs	r3, #112	; 0x70
    708c:	18fb      	adds	r3, r7, r3
    708e:	2201      	movs	r2, #1
    7090:	0019      	movs	r1, r3
    7092:	2007      	movs	r0, #7
    7094:	4b2b      	ldr	r3, [pc, #172]	; (7144 <ProcessMacCommands+0x6b4>)
    7096:	4798      	blx	r3
                break;
    7098:	46c0      	nop			; (mov r8, r8)
    709a:	239f      	movs	r3, #159	; 0x9f
    709c:	18fb      	adds	r3, r7, r3
    709e:	229f      	movs	r2, #159	; 0x9f
    70a0:	18ba      	adds	r2, r7, r2
    70a2:	7812      	ldrb	r2, [r2, #0]
    70a4:	701a      	strb	r2, [r3, #0]
    70a6:	f000 fcfa 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
    70aa:	1cfb      	adds	r3, r7, #3
    70ac:	781b      	ldrb	r3, [r3, #0]
    70ae:	1cfa      	adds	r2, r7, #3
    70b0:	1c59      	adds	r1, r3, #1
    70b2:	7011      	strb	r1, [r2, #0]
    70b4:	001a      	movs	r2, r3
    70b6:	687b      	ldr	r3, [r7, #4]
    70b8:	189b      	adds	r3, r3, r2
    70ba:	781a      	ldrb	r2, [r3, #0]
    70bc:	239c      	movs	r3, #156	; 0x9c
    70be:	18fb      	adds	r3, r7, r3
    70c0:	210f      	movs	r1, #15
    70c2:	400a      	ands	r2, r1
    70c4:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
    70c6:	239c      	movs	r3, #156	; 0x9c
    70c8:	18fb      	adds	r3, r7, r3
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d106      	bne.n	70de <ProcessMacCommands+0x64e>
                {
                    delay++;
    70d0:	239c      	movs	r3, #156	; 0x9c
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	781a      	ldrb	r2, [r3, #0]
    70d6:	239c      	movs	r3, #156	; 0x9c
    70d8:	18fb      	adds	r3, r7, r3
    70da:	3201      	adds	r2, #1
    70dc:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
    70de:	4a17      	ldr	r2, [pc, #92]	; (713c <ProcessMacCommands+0x6ac>)
    70e0:	239c      	movs	r3, #156	; 0x9c
    70e2:	00db      	lsls	r3, r3, #3
    70e4:	58d3      	ldr	r3, [r2, r3]
    70e6:	229c      	movs	r2, #156	; 0x9c
    70e8:	18ba      	adds	r2, r7, r2
    70ea:	7812      	ldrb	r2, [r2, #0]
    70ec:	21fa      	movs	r1, #250	; 0xfa
    70ee:	0089      	lsls	r1, r1, #2
    70f0:	434a      	muls	r2, r1
    70f2:	0011      	movs	r1, r2
    70f4:	22e4      	movs	r2, #228	; 0xe4
    70f6:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
    70f8:	4a10      	ldr	r2, [pc, #64]	; (713c <ProcessMacCommands+0x6ac>)
    70fa:	239c      	movs	r3, #156	; 0x9c
    70fc:	00db      	lsls	r3, r3, #3
    70fe:	58d3      	ldr	r3, [r2, r3]
    7100:	490e      	ldr	r1, [pc, #56]	; (713c <ProcessMacCommands+0x6ac>)
    7102:	229c      	movs	r2, #156	; 0x9c
    7104:	00d2      	lsls	r2, r2, #3
    7106:	588a      	ldr	r2, [r1, r2]
    7108:	21e4      	movs	r1, #228	; 0xe4
    710a:	5852      	ldr	r2, [r2, r1]
    710c:	21fa      	movs	r1, #250	; 0xfa
    710e:	0089      	lsls	r1, r1, #2
    7110:	468c      	mov	ip, r1
    7112:	4462      	add	r2, ip
    7114:	21e8      	movs	r1, #232	; 0xe8
    7116:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
    7118:	2370      	movs	r3, #112	; 0x70
    711a:	18fb      	adds	r3, r7, r3
    711c:	2200      	movs	r2, #0
    711e:	0019      	movs	r1, r3
    7120:	2008      	movs	r0, #8
    7122:	4b08      	ldr	r3, [pc, #32]	; (7144 <ProcessMacCommands+0x6b4>)
    7124:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    7126:	4b08      	ldr	r3, [pc, #32]	; (7148 <ProcessMacCommands+0x6b8>)
    7128:	4798      	blx	r3
    712a:	239f      	movs	r3, #159	; 0x9f
    712c:	18fb      	adds	r3, r7, r3
    712e:	229f      	movs	r2, #159	; 0x9f
    7130:	18ba      	adds	r2, r7, r2
    7132:	7812      	ldrb	r2, [r2, #0]
    7134:	701a      	strb	r2, [r3, #0]
                break;
    7136:	f000 fcb2 	bl	7a9e <ProcessMacCommands+0x100e>
    713a:	46c0      	nop			; (mov r8, r8)
    713c:	20000b78 	.word	0x20000b78
    7140:	0000f279 	.word	0x0000f279
    7144:	0000bcb5 	.word	0x0000bcb5
    7148:	00006a69 	.word	0x00006a69
    714c:	0000f2a9 	.word	0x0000f2a9
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
    7150:	1cfb      	adds	r3, r7, #3
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	1cfa      	adds	r2, r7, #3
    7156:	1c59      	adds	r1, r3, #1
    7158:	7011      	strb	r1, [r2, #0]
    715a:	001a      	movs	r2, r3
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	189a      	adds	r2, r3, r2
    7160:	2399      	movs	r3, #153	; 0x99
    7162:	18fb      	adds	r3, r7, r3
    7164:	7812      	ldrb	r2, [r2, #0]
    7166:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
    7168:	2338      	movs	r3, #56	; 0x38
    716a:	18fb      	adds	r3, r7, r3
    716c:	2200      	movs	r2, #0
    716e:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
    7170:	2338      	movs	r3, #56	; 0x38
    7172:	18fb      	adds	r3, r7, r3
    7174:	2200      	movs	r2, #0
    7176:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
    7178:	2399      	movs	r3, #153	; 0x99
    717a:	18fb      	adds	r3, r7, r3
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	2220      	movs	r2, #32
    7180:	4013      	ands	r3, r2
    7182:	d003      	beq.n	718c <ProcessMacCommands+0x6fc>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
    7184:	2338      	movs	r3, #56	; 0x38
    7186:	18fb      	adds	r3, r7, r3
    7188:	2201      	movs	r2, #1
    718a:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
    718c:	2399      	movs	r3, #153	; 0x99
    718e:	18fb      	adds	r3, r7, r3
    7190:	781b      	ldrb	r3, [r3, #0]
    7192:	2210      	movs	r2, #16
    7194:	4013      	ands	r3, r2
    7196:	d003      	beq.n	71a0 <ProcessMacCommands+0x710>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
    7198:	2338      	movs	r3, #56	; 0x38
    719a:	18fb      	adds	r3, r7, r3
    719c:	2201      	movs	r2, #1
    719e:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
    71a0:	2399      	movs	r3, #153	; 0x99
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	220f      	movs	r2, #15
    71a8:	4013      	ands	r3, r2
    71aa:	b2da      	uxtb	r2, r3
    71ac:	2338      	movs	r3, #56	; 0x38
    71ae:	18fb      	adds	r3, r7, r3
    71b0:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
    71b2:	4aeb      	ldr	r2, [pc, #940]	; (7560 <ProcessMacCommands+0xad0>)
    71b4:	239c      	movs	r3, #156	; 0x9c
    71b6:	00db      	lsls	r3, r3, #3
    71b8:	58d3      	ldr	r3, [r2, r3]
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	2238      	movs	r2, #56	; 0x38
    71be:	18ba      	adds	r2, r7, r2
    71c0:	0011      	movs	r1, r2
    71c2:	0018      	movs	r0, r3
    71c4:	4be7      	ldr	r3, [pc, #924]	; (7564 <ProcessMacCommands+0xad4>)
    71c6:	4798      	blx	r3
    71c8:	0003      	movs	r3, r0
    71ca:	3301      	adds	r3, #1
    71cc:	d060      	beq.n	7290 <ProcessMacCommands+0x800>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
    71ce:	4ae4      	ldr	r2, [pc, #912]	; (7560 <ProcessMacCommands+0xad0>)
    71d0:	239c      	movs	r3, #156	; 0x9c
    71d2:	00db      	lsls	r3, r3, #3
    71d4:	58d2      	ldr	r2, [r2, r3]
    71d6:	2338      	movs	r3, #56	; 0x38
    71d8:	18fb      	adds	r3, r7, r3
    71da:	7819      	ldrb	r1, [r3, #0]
    71dc:	2380      	movs	r3, #128	; 0x80
    71de:	005b      	lsls	r3, r3, #1
    71e0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
    71e2:	4adf      	ldr	r2, [pc, #892]	; (7560 <ProcessMacCommands+0xad0>)
    71e4:	239c      	movs	r3, #156	; 0x9c
    71e6:	00db      	lsls	r3, r3, #3
    71e8:	58d2      	ldr	r2, [r2, r3]
    71ea:	2338      	movs	r3, #56	; 0x38
    71ec:	18fb      	adds	r3, r7, r3
    71ee:	7859      	ldrb	r1, [r3, #1]
    71f0:	2302      	movs	r3, #2
    71f2:	33ff      	adds	r3, #255	; 0xff
    71f4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
    71f6:	4ada      	ldr	r2, [pc, #872]	; (7560 <ProcessMacCommands+0xad0>)
    71f8:	239c      	movs	r3, #156	; 0x9c
    71fa:	00db      	lsls	r3, r3, #3
    71fc:	58d4      	ldr	r4, [r2, r3]
    71fe:	2338      	movs	r3, #56	; 0x38
    7200:	18fb      	adds	r3, r7, r3
    7202:	789b      	ldrb	r3, [r3, #2]
    7204:	001a      	movs	r2, r3
    7206:	4bd8      	ldr	r3, [pc, #864]	; (7568 <ProcessMacCommands+0xad8>)
    7208:	5c9a      	ldrb	r2, [r3, r2]
    720a:	4bd8      	ldr	r3, [pc, #864]	; (756c <ProcessMacCommands+0xadc>)
    720c:	0010      	movs	r0, r2
    720e:	4798      	blx	r3
    7210:	1c02      	adds	r2, r0, #0
    7212:	2382      	movs	r3, #130	; 0x82
    7214:	005b      	lsls	r3, r3, #1
    7216:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
    7218:	2334      	movs	r3, #52	; 0x34
    721a:	18fb      	adds	r3, r7, r3
    721c:	2201      	movs	r2, #1
    721e:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    7220:	4acf      	ldr	r2, [pc, #828]	; (7560 <ProcessMacCommands+0xad0>)
    7222:	239c      	movs	r3, #156	; 0x9c
    7224:	00db      	lsls	r3, r3, #3
    7226:	58d2      	ldr	r2, [r2, r3]
    7228:	2380      	movs	r3, #128	; 0x80
    722a:	005b      	lsls	r3, r3, #1
    722c:	5cd2      	ldrb	r2, [r2, r3]
    722e:	2334      	movs	r3, #52	; 0x34
    7230:	18fb      	adds	r3, r7, r3
    7232:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    7234:	4aca      	ldr	r2, [pc, #808]	; (7560 <ProcessMacCommands+0xad0>)
    7236:	239c      	movs	r3, #156	; 0x9c
    7238:	00db      	lsls	r3, r3, #3
    723a:	58d3      	ldr	r3, [r2, r3]
    723c:	781b      	ldrb	r3, [r3, #0]
    723e:	2234      	movs	r2, #52	; 0x34
    7240:	18ba      	adds	r2, r7, r2
    7242:	0011      	movs	r1, r2
    7244:	0018      	movs	r0, r3
    7246:	4bca      	ldr	r3, [pc, #808]	; (7570 <ProcessMacCommands+0xae0>)
    7248:	4798      	blx	r3
    724a:	0003      	movs	r3, r0
    724c:	001a      	movs	r2, r3
    724e:	2330      	movs	r3, #48	; 0x30
    7250:	18fb      	adds	r3, r7, r3
    7252:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
    7254:	4ac2      	ldr	r2, [pc, #776]	; (7560 <ProcessMacCommands+0xad0>)
    7256:	239c      	movs	r3, #156	; 0x9c
    7258:	00db      	lsls	r3, r3, #3
    725a:	58d2      	ldr	r2, [r2, r3]
    725c:	2330      	movs	r3, #48	; 0x30
    725e:	18fb      	adds	r3, r7, r3
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	b258      	sxtb	r0, r3
    7264:	49be      	ldr	r1, [pc, #760]	; (7560 <ProcessMacCommands+0xad0>)
    7266:	239c      	movs	r3, #156	; 0x9c
    7268:	00db      	lsls	r3, r3, #3
    726a:	58cb      	ldr	r3, [r1, r3]
    726c:	21d5      	movs	r1, #213	; 0xd5
    726e:	565b      	ldrsb	r3, [r3, r1]
    7270:	1c1c      	adds	r4, r3, #0
    7272:	b241      	sxtb	r1, r0
    7274:	b263      	sxtb	r3, r4
    7276:	4299      	cmp	r1, r3
    7278:	da00      	bge.n	727c <ProcessMacCommands+0x7ec>
    727a:	1c20      	adds	r0, r4, #0
    727c:	b241      	sxtb	r1, r0
    727e:	23d5      	movs	r3, #213	; 0xd5
    7280:	54d1      	strb	r1, [r2, r3]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
    7282:	2370      	movs	r3, #112	; 0x70
    7284:	18fb      	adds	r3, r7, r3
    7286:	2200      	movs	r2, #0
    7288:	0019      	movs	r1, r3
    728a:	2009      	movs	r0, #9
    728c:	4bb9      	ldr	r3, [pc, #740]	; (7574 <ProcessMacCommands+0xae4>)
    728e:	4798      	blx	r3
                }
                break;
    7290:	46c0      	nop			; (mov r8, r8)
    7292:	239f      	movs	r3, #159	; 0x9f
    7294:	18fb      	adds	r3, r7, r3
    7296:	229f      	movs	r2, #159	; 0x9f
    7298:	18ba      	adds	r2, r7, r2
    729a:	7812      	ldrb	r2, [r2, #0]
    729c:	701a      	strb	r2, [r3, #0]
    729e:	f000 fbfe 	bl	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_REKEY_CONF:
            {
                uint8_t serverMinorVersion = payload[macIndex++];
    72a2:	1cfb      	adds	r3, r7, #3
    72a4:	781b      	ldrb	r3, [r3, #0]
    72a6:	1cfa      	adds	r2, r7, #3
    72a8:	1c59      	adds	r1, r3, #1
    72aa:	7011      	strb	r1, [r2, #0]
    72ac:	001a      	movs	r2, r3
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	189a      	adds	r2, r3, r2
    72b2:	2398      	movs	r3, #152	; 0x98
    72b4:	18fb      	adds	r3, r7, r3
    72b6:	7812      	ldrb	r2, [r2, #0]
    72b8:	701a      	strb	r2, [r3, #0]

                // Compare own LoRaWAN Version with server's
                if( MacCtx.NvmCtx->Version.Fields.Minor == serverMinorVersion )
    72ba:	4aa9      	ldr	r2, [pc, #676]	; (7560 <ProcessMacCommands+0xad0>)
    72bc:	239c      	movs	r3, #156	; 0x9c
    72be:	00db      	lsls	r3, r3, #3
    72c0:	58d3      	ldr	r3, [r2, r3]
    72c2:	4aad      	ldr	r2, [pc, #692]	; (7578 <ProcessMacCommands+0xae8>)
    72c4:	5c9b      	ldrb	r3, [r3, r2]
    72c6:	2298      	movs	r2, #152	; 0x98
    72c8:	18ba      	adds	r2, r7, r2
    72ca:	7812      	ldrb	r2, [r2, #0]
    72cc:	429a      	cmp	r2, r3
    72ce:	d109      	bne.n	72e4 <ProcessMacCommands+0x854>
                {
                    // If they equal remove the sticky RekeyInd MAC-Command.
                    LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd);
    72d0:	236c      	movs	r3, #108	; 0x6c
    72d2:	18fb      	adds	r3, r7, r3
    72d4:	0019      	movs	r1, r3
    72d6:	200b      	movs	r0, #11
    72d8:	4ba8      	ldr	r3, [pc, #672]	; (757c <ProcessMacCommands+0xaec>)
    72da:	4798      	blx	r3
                    LoRaMacCommandsRemoveCmd( macCmd );
    72dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    72de:	0018      	movs	r0, r3
    72e0:	4ba7      	ldr	r3, [pc, #668]	; (7580 <ProcessMacCommands+0xaf0>)
    72e2:	4798      	blx	r3
    72e4:	239f      	movs	r3, #159	; 0x9f
    72e6:	18fb      	adds	r3, r7, r3
    72e8:	229f      	movs	r2, #159	; 0x9f
    72ea:	18ba      	adds	r2, r7, r2
    72ec:	7812      	ldrb	r2, [r2, #0]
    72ee:	701a      	strb	r2, [r3, #0]
                }
                break;
    72f0:	e3d5      	b.n	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
    72f2:	2373      	movs	r3, #115	; 0x73
    72f4:	18fb      	adds	r3, r7, r3
    72f6:	2203      	movs	r2, #3
    72f8:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
    72fa:	1cfb      	adds	r3, r7, #3
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	1cfa      	adds	r2, r7, #3
    7300:	1c59      	adds	r1, r3, #1
    7302:	7011      	strb	r1, [r2, #0]
    7304:	001a      	movs	r2, r3
    7306:	687b      	ldr	r3, [r7, #4]
    7308:	189b      	adds	r3, r3, r2
    730a:	781a      	ldrb	r2, [r3, #0]
    730c:	2328      	movs	r3, #40	; 0x28
    730e:	18fb      	adds	r3, r7, r3
    7310:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
    7312:	1cfb      	adds	r3, r7, #3
    7314:	781b      	ldrb	r3, [r3, #0]
    7316:	1cfa      	adds	r2, r7, #3
    7318:	1c59      	adds	r1, r3, #1
    731a:	7011      	strb	r1, [r2, #0]
    731c:	001a      	movs	r2, r3
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	189b      	adds	r3, r3, r2
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	001a      	movs	r2, r3
    7326:	2328      	movs	r3, #40	; 0x28
    7328:	18fb      	adds	r3, r7, r3
    732a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
    732c:	1cfb      	adds	r3, r7, #3
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	1cfa      	adds	r2, r7, #3
    7332:	1c59      	adds	r1, r3, #1
    7334:	7011      	strb	r1, [r2, #0]
    7336:	001a      	movs	r2, r3
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	189b      	adds	r3, r3, r2
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	021a      	lsls	r2, r3, #8
    7340:	2328      	movs	r3, #40	; 0x28
    7342:	18fb      	adds	r3, r7, r3
    7344:	685b      	ldr	r3, [r3, #4]
    7346:	431a      	orrs	r2, r3
    7348:	2328      	movs	r3, #40	; 0x28
    734a:	18fb      	adds	r3, r7, r3
    734c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
    734e:	1cfb      	adds	r3, r7, #3
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	1cfa      	adds	r2, r7, #3
    7354:	1c59      	adds	r1, r3, #1
    7356:	7011      	strb	r1, [r2, #0]
    7358:	001a      	movs	r2, r3
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	189b      	adds	r3, r3, r2
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	041a      	lsls	r2, r3, #16
    7362:	2328      	movs	r3, #40	; 0x28
    7364:	18fb      	adds	r3, r7, r3
    7366:	685b      	ldr	r3, [r3, #4]
    7368:	431a      	orrs	r2, r3
    736a:	2328      	movs	r3, #40	; 0x28
    736c:	18fb      	adds	r3, r7, r3
    736e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
    7370:	2328      	movs	r3, #40	; 0x28
    7372:	18fb      	adds	r3, r7, r3
    7374:	685b      	ldr	r3, [r3, #4]
    7376:	2264      	movs	r2, #100	; 0x64
    7378:	435a      	muls	r2, r3
    737a:	2328      	movs	r3, #40	; 0x28
    737c:	18fb      	adds	r3, r7, r3
    737e:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
    7380:	4a77      	ldr	r2, [pc, #476]	; (7560 <ProcessMacCommands+0xad0>)
    7382:	239c      	movs	r3, #156	; 0x9c
    7384:	00db      	lsls	r3, r3, #3
    7386:	58d3      	ldr	r3, [r2, r3]
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	2228      	movs	r2, #40	; 0x28
    738c:	18ba      	adds	r2, r7, r2
    738e:	0011      	movs	r1, r2
    7390:	0018      	movs	r0, r3
    7392:	4b7c      	ldr	r3, [pc, #496]	; (7584 <ProcessMacCommands+0xaf4>)
    7394:	4798      	blx	r3
    7396:	0003      	movs	r3, r0
    7398:	001a      	movs	r2, r3
    739a:	2373      	movs	r3, #115	; 0x73
    739c:	18fb      	adds	r3, r7, r3
    739e:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
    73a0:	2373      	movs	r3, #115	; 0x73
    73a2:	18fb      	adds	r3, r7, r3
    73a4:	781a      	ldrb	r2, [r3, #0]
    73a6:	2370      	movs	r3, #112	; 0x70
    73a8:	18fb      	adds	r3, r7, r3
    73aa:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
    73ac:	2370      	movs	r3, #112	; 0x70
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	2201      	movs	r2, #1
    73b2:	0019      	movs	r1, r3
    73b4:	200a      	movs	r0, #10
    73b6:	4b6f      	ldr	r3, [pc, #444]	; (7574 <ProcessMacCommands+0xae4>)
    73b8:	4798      	blx	r3
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
    73ba:	4b73      	ldr	r3, [pc, #460]	; (7588 <ProcessMacCommands+0xaf8>)
    73bc:	4798      	blx	r3
                break;
    73be:	46c0      	nop			; (mov r8, r8)
    73c0:	239f      	movs	r3, #159	; 0x9f
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	229f      	movs	r2, #159	; 0x9f
    73c6:	18ba      	adds	r2, r7, r2
    73c8:	7812      	ldrb	r2, [r2, #0]
    73ca:	701a      	strb	r2, [r3, #0]
    73cc:	e367      	b.n	7a9e <ProcessMacCommands+0x100e>
                 * +----------------+---------------+
                 * | 7:4 Limit_exp  | 3:0 Delay_exp |
                 * +----------------+---------------+
                 */

                uint8_t delayExp = 0x0F & payload[macIndex];
    73ce:	1cfb      	adds	r3, r7, #3
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	687a      	ldr	r2, [r7, #4]
    73d4:	18d3      	adds	r3, r2, r3
    73d6:	781a      	ldrb	r2, [r3, #0]
    73d8:	2397      	movs	r3, #151	; 0x97
    73da:	18fb      	adds	r3, r7, r3
    73dc:	210f      	movs	r1, #15
    73de:	400a      	ands	r2, r1
    73e0:	701a      	strb	r2, [r3, #0]
                uint8_t limitExp = 0x0F & ( payload[macIndex] >> 4 );
    73e2:	1cfb      	adds	r3, r7, #3
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	687a      	ldr	r2, [r7, #4]
    73e8:	18d3      	adds	r3, r2, r3
    73ea:	781a      	ldrb	r2, [r3, #0]
    73ec:	2396      	movs	r3, #150	; 0x96
    73ee:	18fb      	adds	r3, r7, r3
    73f0:	0912      	lsrs	r2, r2, #4
    73f2:	701a      	strb	r2, [r3, #0]
                macIndex++;
    73f4:	1cfb      	adds	r3, r7, #3
    73f6:	781a      	ldrb	r2, [r3, #0]
    73f8:	1cfb      	adds	r3, r7, #3
    73fa:	3201      	adds	r2, #1
    73fc:	701a      	strb	r2, [r3, #0]

                // ADR_ACK_ DELAY = 2^Delay_exp
                MacCtx.NvmCtx->AdrAckDelay = 0x01 << delayExp;
    73fe:	4a58      	ldr	r2, [pc, #352]	; (7560 <ProcessMacCommands+0xad0>)
    7400:	239c      	movs	r3, #156	; 0x9c
    7402:	00db      	lsls	r3, r3, #3
    7404:	58d3      	ldr	r3, [r2, r3]
    7406:	2297      	movs	r2, #151	; 0x97
    7408:	18ba      	adds	r2, r7, r2
    740a:	7812      	ldrb	r2, [r2, #0]
    740c:	2101      	movs	r1, #1
    740e:	4091      	lsls	r1, r2
    7410:	000a      	movs	r2, r1
    7412:	b291      	uxth	r1, r2
    7414:	22d2      	movs	r2, #210	; 0xd2
    7416:	5299      	strh	r1, [r3, r2]

                // ADR_ACK_LIMIT = 2^Limit_exp
                MacCtx.NvmCtx->AdrAckLimit = 0x01 << limitExp;
    7418:	4a51      	ldr	r2, [pc, #324]	; (7560 <ProcessMacCommands+0xad0>)
    741a:	239c      	movs	r3, #156	; 0x9c
    741c:	00db      	lsls	r3, r3, #3
    741e:	58d3      	ldr	r3, [r2, r3]
    7420:	2296      	movs	r2, #150	; 0x96
    7422:	18ba      	adds	r2, r7, r2
    7424:	7812      	ldrb	r2, [r2, #0]
    7426:	2101      	movs	r1, #1
    7428:	4091      	lsls	r1, r2
    742a:	000a      	movs	r2, r1
    742c:	b291      	uxth	r1, r2
    742e:	22d0      	movs	r2, #208	; 0xd0
    7430:	5299      	strh	r1, [r3, r2]

                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
    7432:	2370      	movs	r3, #112	; 0x70
    7434:	18fb      	adds	r3, r7, r3
    7436:	2200      	movs	r2, #0
    7438:	0019      	movs	r1, r3
    743a:	200c      	movs	r0, #12
    743c:	4b4d      	ldr	r3, [pc, #308]	; (7574 <ProcessMacCommands+0xae4>)
    743e:	4798      	blx	r3
    7440:	239f      	movs	r3, #159	; 0x9f
    7442:	18fb      	adds	r3, r7, r3
    7444:	229f      	movs	r2, #159	; 0x9f
    7446:	18ba      	adds	r2, r7, r2
    7448:	7812      	ldrb	r2, [r2, #0]
    744a:	701a      	strb	r2, [r3, #0]
                break;
    744c:	e327      	b.n	7a9e <ProcessMacCommands+0x100e>
                 * | 13:11 Period | 10:8 Max_Retries | 7 RFU | 6:4 RejoinType | 3:0 DR |
                 * +--------------+------------------+-------+----------------+--------+
                 */

                // Parse payload
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
    744e:	1cfb      	adds	r3, r7, #3
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	687a      	ldr	r2, [r7, #4]
    7454:	18d3      	adds	r3, r2, r3
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	08db      	lsrs	r3, r3, #3
    745a:	b2da      	uxtb	r2, r3
    745c:	2395      	movs	r3, #149	; 0x95
    745e:	18fb      	adds	r3, r7, r3
    7460:	2107      	movs	r1, #7
    7462:	400a      	ands	r2, r1
    7464:	701a      	strb	r2, [r3, #0]
                MacCtx.NvmCtx->ForceRejoinMaxRetries = 0x07 & payload[macIndex];
    7466:	4a3e      	ldr	r2, [pc, #248]	; (7560 <ProcessMacCommands+0xad0>)
    7468:	239c      	movs	r3, #156	; 0x9c
    746a:	00db      	lsls	r3, r3, #3
    746c:	58d3      	ldr	r3, [r2, r3]
    746e:	1cfa      	adds	r2, r7, #3
    7470:	7812      	ldrb	r2, [r2, #0]
    7472:	6879      	ldr	r1, [r7, #4]
    7474:	188a      	adds	r2, r1, r2
    7476:	7812      	ldrb	r2, [r2, #0]
    7478:	2107      	movs	r1, #7
    747a:	400a      	ands	r2, r1
    747c:	b2d1      	uxtb	r1, r2
    747e:	4a43      	ldr	r2, [pc, #268]	; (758c <ProcessMacCommands+0xafc>)
    7480:	5499      	strb	r1, [r3, r2]
                macIndex++;
    7482:	1cfb      	adds	r3, r7, #3
    7484:	781a      	ldrb	r2, [r3, #0]
    7486:	1cfb      	adds	r3, r7, #3
    7488:	3201      	adds	r2, #1
    748a:	701a      	strb	r2, [r3, #0]
                MacCtx.NvmCtx->ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
    748c:	4a34      	ldr	r2, [pc, #208]	; (7560 <ProcessMacCommands+0xad0>)
    748e:	239c      	movs	r3, #156	; 0x9c
    7490:	00db      	lsls	r3, r3, #3
    7492:	58d2      	ldr	r2, [r2, r3]
    7494:	1cfb      	adds	r3, r7, #3
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	6879      	ldr	r1, [r7, #4]
    749a:	18cb      	adds	r3, r1, r3
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	091b      	lsrs	r3, r3, #4
    74a0:	b2db      	uxtb	r3, r3
    74a2:	2107      	movs	r1, #7
    74a4:	400b      	ands	r3, r1
    74a6:	b2d9      	uxtb	r1, r3
    74a8:	238a      	movs	r3, #138	; 0x8a
    74aa:	009b      	lsls	r3, r3, #2
    74ac:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = 0x0F & payload[macIndex];
    74ae:	4a2c      	ldr	r2, [pc, #176]	; (7560 <ProcessMacCommands+0xad0>)
    74b0:	239c      	movs	r3, #156	; 0x9c
    74b2:	00db      	lsls	r3, r3, #3
    74b4:	58d3      	ldr	r3, [r2, r3]
    74b6:	1cfa      	adds	r2, r7, #3
    74b8:	7812      	ldrb	r2, [r2, #0]
    74ba:	6879      	ldr	r1, [r7, #4]
    74bc:	188a      	adds	r2, r1, r2
    74be:	7812      	ldrb	r2, [r2, #0]
    74c0:	b252      	sxtb	r2, r2
    74c2:	210f      	movs	r1, #15
    74c4:	400a      	ands	r2, r1
    74c6:	b251      	sxtb	r1, r2
    74c8:	22d5      	movs	r2, #213	; 0xd5
    74ca:	5499      	strb	r1, [r3, r2]
                macIndex ++;
    74cc:	1cfb      	adds	r3, r7, #3
    74ce:	781a      	ldrb	r2, [r3, #0]
    74d0:	1cfb      	adds	r3, r7, #3
    74d2:	3201      	adds	r2, #1
    74d4:	701a      	strb	r2, [r3, #0]

                // Calc delay between retransmissions: 32 seconds x 2^Period + Rand32
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
    74d6:	2395      	movs	r3, #149	; 0x95
    74d8:	18fb      	adds	r3, r7, r3
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	2220      	movs	r2, #32
    74de:	409a      	lsls	r2, r3
    74e0:	0014      	movs	r4, r2
    74e2:	2120      	movs	r1, #32
    74e4:	2000      	movs	r0, #0
    74e6:	4b2a      	ldr	r3, [pc, #168]	; (7590 <ProcessMacCommands+0xb00>)
    74e8:	4798      	blx	r3
    74ea:	0003      	movs	r3, r0
    74ec:	18e3      	adds	r3, r4, r3
    74ee:	2290      	movs	r2, #144	; 0x90
    74f0:	18ba      	adds	r2, r7, r2
    74f2:	6013      	str	r3, [r2, #0]

                uint32_t forceRejoinReqCycleTime = 0;
    74f4:	2300      	movs	r3, #0
    74f6:	627b      	str	r3, [r7, #36]	; 0x24
                ConvertRejoinCycleTime( rejoinCycleInSec, &forceRejoinReqCycleTime );
    74f8:	2324      	movs	r3, #36	; 0x24
    74fa:	18fa      	adds	r2, r7, r3
    74fc:	2390      	movs	r3, #144	; 0x90
    74fe:	18fb      	adds	r3, r7, r3
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	0011      	movs	r1, r2
    7504:	0018      	movs	r0, r3
    7506:	4b23      	ldr	r3, [pc, #140]	; (7594 <ProcessMacCommands+0xb04>)
    7508:	4798      	blx	r3
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
    750a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    750c:	4b22      	ldr	r3, [pc, #136]	; (7598 <ProcessMacCommands+0xb08>)
    750e:	0011      	movs	r1, r2
    7510:	0018      	movs	r0, r3
    7512:	4b22      	ldr	r3, [pc, #136]	; (759c <ProcessMacCommands+0xb0c>)
    7514:	4798      	blx	r3

                if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    7516:	4a12      	ldr	r2, [pc, #72]	; (7560 <ProcessMacCommands+0xad0>)
    7518:	239c      	movs	r3, #156	; 0x9c
    751a:	00db      	lsls	r3, r3, #3
    751c:	58d2      	ldr	r2, [r2, r3]
    751e:	238a      	movs	r3, #138	; 0x8a
    7520:	009b      	lsls	r3, r3, #2
    7522:	5cd3      	ldrb	r3, [r2, r3]
    7524:	2b00      	cmp	r3, #0
    7526:	d008      	beq.n	753a <ProcessMacCommands+0xaaa>
    7528:	4a0d      	ldr	r2, [pc, #52]	; (7560 <ProcessMacCommands+0xad0>)
    752a:	239c      	movs	r3, #156	; 0x9c
    752c:	00db      	lsls	r3, r3, #3
    752e:	58d2      	ldr	r2, [r2, r3]
    7530:	238a      	movs	r3, #138	; 0x8a
    7532:	009b      	lsls	r3, r3, #2
    7534:	5cd3      	ldrb	r3, [r2, r3]
    7536:	2b01      	cmp	r3, #1
    7538:	d103      	bne.n	7542 <ProcessMacCommands+0xab2>
                {
                    SendReJoinReq( REJOIN_REQ_0 );
    753a:	2000      	movs	r0, #0
    753c:	4b18      	ldr	r3, [pc, #96]	; (75a0 <ProcessMacCommands+0xb10>)
    753e:	4798      	blx	r3
    7540:	e002      	b.n	7548 <ProcessMacCommands+0xab8>
                }
                else
                {
                    SendReJoinReq( REJOIN_REQ_2 );
    7542:	2002      	movs	r0, #2
    7544:	4b16      	ldr	r3, [pc, #88]	; (75a0 <ProcessMacCommands+0xb10>)
    7546:	4798      	blx	r3
                }
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
    7548:	4b13      	ldr	r3, [pc, #76]	; (7598 <ProcessMacCommands+0xb08>)
    754a:	0018      	movs	r0, r3
    754c:	4b15      	ldr	r3, [pc, #84]	; (75a4 <ProcessMacCommands+0xb14>)
    754e:	4798      	blx	r3
                break;
    7550:	46c0      	nop			; (mov r8, r8)
    7552:	239f      	movs	r3, #159	; 0x9f
    7554:	18fb      	adds	r3, r7, r3
    7556:	229f      	movs	r2, #159	; 0x9f
    7558:	18ba      	adds	r2, r7, r2
    755a:	7812      	ldrb	r2, [r2, #0]
    755c:	701a      	strb	r2, [r3, #0]
    755e:	e29e      	b.n	7a9e <ProcessMacCommands+0x100e>
    7560:	20000b78 	.word	0x20000b78
    7564:	0000f2d9 	.word	0x0000f2d9
    7568:	0001f054 	.word	0x0001f054
    756c:	000183e9 	.word	0x000183e9
    7570:	0000eff1 	.word	0x0000eff1
    7574:	0000bcb5 	.word	0x0000bcb5
    7578:	0000021e 	.word	0x0000021e
    757c:	0000bde9 	.word	0x0000bde9
    7580:	0000bd6d 	.word	0x0000bd6d
    7584:	0000f309 	.word	0x0000f309
    7588:	00006a69 	.word	0x00006a69
    758c:	00000226 	.word	0x00000226
    7590:	00002921 	.word	0x00002921
    7594:	0000b169 	.word	0x0000b169
    7598:	20001034 	.word	0x20001034
    759c:	00016389 	.word	0x00016389
    75a0:	00007d7d 	.word	0x00007d7d
    75a4:	00015fc1 	.word	0x00015fc1
                 * +----------------+---------------+
                 * | 7:4 MaxTimeN   | 3:0 MaxCountN |
                 * +----------------+---------------+
                 */

                uint8_t timeOK = 0;
    75a8:	239b      	movs	r3, #155	; 0x9b
    75aa:	18fb      	adds	r3, r7, r3
    75ac:	2200      	movs	r2, #0
    75ae:	701a      	strb	r2, [r3, #0]
                uint8_t maxCountN = 0x0F & payload[macIndex];
    75b0:	1cfb      	adds	r3, r7, #3
    75b2:	781b      	ldrb	r3, [r3, #0]
    75b4:	687a      	ldr	r2, [r7, #4]
    75b6:	18d3      	adds	r3, r2, r3
    75b8:	781a      	ldrb	r2, [r3, #0]
    75ba:	238f      	movs	r3, #143	; 0x8f
    75bc:	18fb      	adds	r3, r7, r3
    75be:	210f      	movs	r1, #15
    75c0:	400a      	ands	r2, r1
    75c2:	701a      	strb	r2, [r3, #0]
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
    75c4:	1cfb      	adds	r3, r7, #3
    75c6:	781b      	ldrb	r3, [r3, #0]
    75c8:	687a      	ldr	r2, [r7, #4]
    75ca:	18d3      	adds	r3, r2, r3
    75cc:	781a      	ldrb	r2, [r3, #0]
    75ce:	238e      	movs	r3, #142	; 0x8e
    75d0:	18fb      	adds	r3, r7, r3
    75d2:	0912      	lsrs	r2, r2, #4
    75d4:	701a      	strb	r2, [r3, #0]
                macIndex ++;
    75d6:	1cfb      	adds	r3, r7, #3
    75d8:	781a      	ldrb	r2, [r3, #0]
    75da:	1cfb      	adds	r3, r7, #3
    75dc:	3201      	adds	r2, #1
    75de:	701a      	strb	r2, [r3, #0]

                // Calc delay between retransmissions: 2^(maxTimeN+10)
                MacCtx.NvmCtx->Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
    75e0:	4af4      	ldr	r2, [pc, #976]	; (79b4 <ProcessMacCommands+0xf24>)
    75e2:	239c      	movs	r3, #156	; 0x9c
    75e4:	00db      	lsls	r3, r3, #3
    75e6:	58d2      	ldr	r2, [r2, r3]
    75e8:	238e      	movs	r3, #142	; 0x8e
    75ea:	18fb      	adds	r3, r7, r3
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	330a      	adds	r3, #10
    75f0:	2101      	movs	r1, #1
    75f2:	4099      	lsls	r1, r3
    75f4:	000b      	movs	r3, r1
    75f6:	0019      	movs	r1, r3
    75f8:	238b      	movs	r3, #139	; 0x8b
    75fa:	009b      	lsls	r3, r3, #2
    75fc:	50d1      	str	r1, [r2, r3]

                // Calc number if uplinks without rejoin request: 2^(maxCountN+4)
                MacCtx.NvmCtx->Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
    75fe:	4aed      	ldr	r2, [pc, #948]	; (79b4 <ProcessMacCommands+0xf24>)
    7600:	239c      	movs	r3, #156	; 0x9c
    7602:	00db      	lsls	r3, r3, #3
    7604:	58d3      	ldr	r3, [r2, r3]
    7606:	228f      	movs	r2, #143	; 0x8f
    7608:	18ba      	adds	r2, r7, r2
    760a:	7812      	ldrb	r2, [r2, #0]
    760c:	3204      	adds	r2, #4
    760e:	2101      	movs	r1, #1
    7610:	4091      	lsls	r1, r2
    7612:	000a      	movs	r2, r1
    7614:	b291      	uxth	r1, r2
    7616:	4ae8      	ldr	r2, [pc, #928]	; (79b8 <ProcessMacCommands+0xf28>)
    7618:	5299      	strh	r1, [r3, r2]

                if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    761a:	4ae6      	ldr	r2, [pc, #920]	; (79b4 <ProcessMacCommands+0xf24>)
    761c:	239c      	movs	r3, #156	; 0x9c
    761e:	00db      	lsls	r3, r3, #3
    7620:	58d2      	ldr	r2, [r2, r3]
    7622:	238b      	movs	r3, #139	; 0x8b
    7624:	009b      	lsls	r3, r3, #2
    7626:	58d3      	ldr	r3, [r2, r3]
    7628:	4ae4      	ldr	r2, [pc, #912]	; (79bc <ProcessMacCommands+0xf2c>)
    762a:	0011      	movs	r1, r2
    762c:	0018      	movs	r0, r3
    762e:	4be4      	ldr	r3, [pc, #912]	; (79c0 <ProcessMacCommands+0xf30>)
    7630:	4798      	blx	r3
    7632:	1e03      	subs	r3, r0, #0
    7634:	d013      	beq.n	765e <ProcessMacCommands+0xbce>
                {
                    timeOK = 0x01;
    7636:	239b      	movs	r3, #155	; 0x9b
    7638:	18fb      	adds	r3, r7, r3
    763a:	2201      	movs	r2, #1
    763c:	701a      	strb	r2, [r3, #0]
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
    763e:	4be1      	ldr	r3, [pc, #900]	; (79c4 <ProcessMacCommands+0xf34>)
    7640:	0018      	movs	r0, r3
    7642:	4be1      	ldr	r3, [pc, #900]	; (79c8 <ProcessMacCommands+0xf38>)
    7644:	4798      	blx	r3
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    7646:	4bdb      	ldr	r3, [pc, #876]	; (79b4 <ProcessMacCommands+0xf24>)
    7648:	4ae0      	ldr	r2, [pc, #896]	; (79cc <ProcessMacCommands+0xf3c>)
    764a:	589a      	ldr	r2, [r3, r2]
    764c:	4bdd      	ldr	r3, [pc, #884]	; (79c4 <ProcessMacCommands+0xf34>)
    764e:	0011      	movs	r1, r2
    7650:	0018      	movs	r0, r3
    7652:	4bdf      	ldr	r3, [pc, #892]	; (79d0 <ProcessMacCommands+0xf40>)
    7654:	4798      	blx	r3
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
    7656:	4bdb      	ldr	r3, [pc, #876]	; (79c4 <ProcessMacCommands+0xf34>)
    7658:	0018      	movs	r0, r3
    765a:	4bde      	ldr	r3, [pc, #888]	; (79d4 <ProcessMacCommands+0xf44>)
    765c:	4798      	blx	r3
                }
                macCmdPayload[0] = timeOK;
    765e:	2370      	movs	r3, #112	; 0x70
    7660:	18fb      	adds	r3, r7, r3
    7662:	229b      	movs	r2, #155	; 0x9b
    7664:	18ba      	adds	r2, r7, r2
    7666:	7812      	ldrb	r2, [r2, #0]
    7668:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
    766a:	2370      	movs	r3, #112	; 0x70
    766c:	18fb      	adds	r3, r7, r3
    766e:	2201      	movs	r2, #1
    7670:	0019      	movs	r1, r3
    7672:	200f      	movs	r0, #15
    7674:	4bd8      	ldr	r3, [pc, #864]	; (79d8 <ProcessMacCommands+0xf48>)
    7676:	4798      	blx	r3
    7678:	239f      	movs	r3, #159	; 0x9f
    767a:	18fb      	adds	r3, r7, r3
    767c:	229f      	movs	r2, #159	; 0x9f
    767e:	18ba      	adds	r2, r7, r2
    7680:	7812      	ldrb	r2, [r2, #0]
    7682:	701a      	strb	r2, [r3, #0]
                break;
    7684:	e20b      	b.n	7a9e <ProcessMacCommands+0x100e>
             }
            case SRV_MAC_DEVICE_MODE_CONF:
            {
                // 1 byte payload which we do not handle.
                macIndex++;
    7686:	1cfb      	adds	r3, r7, #3
    7688:	781a      	ldrb	r2, [r3, #0]
    768a:	1cfb      	adds	r3, r7, #3
    768c:	3201      	adds	r2, #1
    768e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd );
    7690:	236c      	movs	r3, #108	; 0x6c
    7692:	18fb      	adds	r3, r7, r3
    7694:	0019      	movs	r1, r3
    7696:	2020      	movs	r0, #32
    7698:	4bd0      	ldr	r3, [pc, #832]	; (79dc <ProcessMacCommands+0xf4c>)
    769a:	4798      	blx	r3
                LoRaMacCommandsRemoveCmd( macCmd );
    769c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    769e:	0018      	movs	r0, r3
    76a0:	4bcf      	ldr	r3, [pc, #828]	; (79e0 <ProcessMacCommands+0xf50>)
    76a2:	4798      	blx	r3
    76a4:	239f      	movs	r3, #159	; 0x9f
    76a6:	18fb      	adds	r3, r7, r3
    76a8:	229f      	movs	r2, #159	; 0x9f
    76aa:	18ba      	adds	r2, r7, r2
    76ac:	7812      	ldrb	r2, [r2, #0]
    76ae:	701a      	strb	r2, [r3, #0]
                break;
    76b0:	e1f5      	b.n	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
    76b2:	231c      	movs	r3, #28
    76b4:	18fb      	adds	r3, r7, r3
    76b6:	0018      	movs	r0, r3
    76b8:	2308      	movs	r3, #8
    76ba:	001a      	movs	r2, r3
    76bc:	2100      	movs	r1, #0
    76be:	4bc9      	ldr	r3, [pc, #804]	; (79e4 <ProcessMacCommands+0xf54>)
    76c0:	4798      	blx	r3
                SysTime_t sysTime = { 0 };
    76c2:	2314      	movs	r3, #20
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	0018      	movs	r0, r3
    76c8:	2308      	movs	r3, #8
    76ca:	001a      	movs	r2, r3
    76cc:	2100      	movs	r1, #0
    76ce:	4bc5      	ldr	r3, [pc, #788]	; (79e4 <ProcessMacCommands+0xf54>)
    76d0:	4798      	blx	r3
                SysTime_t sysTimeCurrent = { 0 };
    76d2:	230c      	movs	r3, #12
    76d4:	18fb      	adds	r3, r7, r3
    76d6:	0018      	movs	r0, r3
    76d8:	2308      	movs	r3, #8
    76da:	001a      	movs	r2, r3
    76dc:	2100      	movs	r1, #0
    76de:	4bc1      	ldr	r3, [pc, #772]	; (79e4 <ProcessMacCommands+0xf54>)
    76e0:	4798      	blx	r3

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
    76e2:	1cfb      	adds	r3, r7, #3
    76e4:	781b      	ldrb	r3, [r3, #0]
    76e6:	1cfa      	adds	r2, r7, #3
    76e8:	1c59      	adds	r1, r3, #1
    76ea:	7011      	strb	r1, [r2, #0]
    76ec:	001a      	movs	r2, r3
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	189b      	adds	r3, r3, r2
    76f2:	781b      	ldrb	r3, [r3, #0]
    76f4:	001a      	movs	r2, r3
    76f6:	231c      	movs	r3, #28
    76f8:	18fb      	adds	r3, r7, r3
    76fa:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
    76fc:	1cfb      	adds	r3, r7, #3
    76fe:	781b      	ldrb	r3, [r3, #0]
    7700:	1cfa      	adds	r2, r7, #3
    7702:	1c59      	adds	r1, r3, #1
    7704:	7011      	strb	r1, [r2, #0]
    7706:	001a      	movs	r2, r3
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	189b      	adds	r3, r3, r2
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	021a      	lsls	r2, r3, #8
    7710:	231c      	movs	r3, #28
    7712:	18fb      	adds	r3, r7, r3
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	431a      	orrs	r2, r3
    7718:	231c      	movs	r3, #28
    771a:	18fb      	adds	r3, r7, r3
    771c:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
    771e:	1cfb      	adds	r3, r7, #3
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	1cfa      	adds	r2, r7, #3
    7724:	1c59      	adds	r1, r3, #1
    7726:	7011      	strb	r1, [r2, #0]
    7728:	001a      	movs	r2, r3
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	189b      	adds	r3, r3, r2
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	041a      	lsls	r2, r3, #16
    7732:	231c      	movs	r3, #28
    7734:	18fb      	adds	r3, r7, r3
    7736:	681b      	ldr	r3, [r3, #0]
    7738:	431a      	orrs	r2, r3
    773a:	231c      	movs	r3, #28
    773c:	18fb      	adds	r3, r7, r3
    773e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
    7740:	1cfb      	adds	r3, r7, #3
    7742:	781b      	ldrb	r3, [r3, #0]
    7744:	1cfa      	adds	r2, r7, #3
    7746:	1c59      	adds	r1, r3, #1
    7748:	7011      	strb	r1, [r2, #0]
    774a:	001a      	movs	r2, r3
    774c:	687b      	ldr	r3, [r7, #4]
    774e:	189b      	adds	r3, r3, r2
    7750:	781b      	ldrb	r3, [r3, #0]
    7752:	061a      	lsls	r2, r3, #24
    7754:	231c      	movs	r3, #28
    7756:	18fb      	adds	r3, r7, r3
    7758:	681b      	ldr	r3, [r3, #0]
    775a:	431a      	orrs	r2, r3
    775c:	231c      	movs	r3, #28
    775e:	18fb      	adds	r3, r7, r3
    7760:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
    7762:	1cfb      	adds	r3, r7, #3
    7764:	781b      	ldrb	r3, [r3, #0]
    7766:	1cfa      	adds	r2, r7, #3
    7768:	1c59      	adds	r1, r3, #1
    776a:	7011      	strb	r1, [r2, #0]
    776c:	001a      	movs	r2, r3
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	189b      	adds	r3, r3, r2
    7772:	781b      	ldrb	r3, [r3, #0]
    7774:	b21a      	sxth	r2, r3
    7776:	231c      	movs	r3, #28
    7778:	18fb      	adds	r3, r7, r3
    777a:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
    777c:	231c      	movs	r3, #28
    777e:	18fb      	adds	r3, r7, r3
    7780:	2204      	movs	r2, #4
    7782:	5e9b      	ldrsh	r3, [r3, r2]
    7784:	001a      	movs	r2, r3
    7786:	23fa      	movs	r3, #250	; 0xfa
    7788:	009b      	lsls	r3, r3, #2
    778a:	4353      	muls	r3, r2
    778c:	121b      	asrs	r3, r3, #8
    778e:	b21a      	sxth	r2, r3
    7790:	231c      	movs	r3, #28
    7792:	18fb      	adds	r3, r7, r3
    7794:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
    7796:	2314      	movs	r3, #20
    7798:	18fb      	adds	r3, r7, r3
    779a:	221c      	movs	r2, #28
    779c:	18ba      	adds	r2, r7, r2
    779e:	ca03      	ldmia	r2!, {r0, r1}
    77a0:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
    77a2:	2314      	movs	r3, #20
    77a4:	18fb      	adds	r3, r7, r3
    77a6:	681b      	ldr	r3, [r3, #0]
    77a8:	4a8f      	ldr	r2, [pc, #572]	; (79e8 <ProcessMacCommands+0xf58>)
    77aa:	189a      	adds	r2, r3, r2
    77ac:	2314      	movs	r3, #20
    77ae:	18fb      	adds	r3, r7, r3
    77b0:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
    77b2:	230c      	movs	r3, #12
    77b4:	18fb      	adds	r3, r7, r3
    77b6:	0018      	movs	r0, r3
    77b8:	4b8c      	ldr	r3, [pc, #560]	; (79ec <ProcessMacCommands+0xf5c>)
    77ba:	4798      	blx	r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
    77bc:	2374      	movs	r3, #116	; 0x74
    77be:	18fd      	adds	r5, r7, r3
    77c0:	497c      	ldr	r1, [pc, #496]	; (79b4 <ProcessMacCommands+0xf24>)
    77c2:	23d4      	movs	r3, #212	; 0xd4
    77c4:	009b      	lsls	r3, r3, #2
    77c6:	2214      	movs	r2, #20
    77c8:	18ba      	adds	r2, r7, r2
    77ca:	2404      	movs	r4, #4
    77cc:	18c8      	adds	r0, r1, r3
    77ce:	1900      	adds	r0, r0, r4
    77d0:	466c      	mov	r4, sp
    77d2:	6800      	ldr	r0, [r0, #0]
    77d4:	6020      	str	r0, [r4, #0]
    77d6:	58cb      	ldr	r3, [r1, r3]
    77d8:	6811      	ldr	r1, [r2, #0]
    77da:	6852      	ldr	r2, [r2, #4]
    77dc:	0028      	movs	r0, r5
    77de:	4c84      	ldr	r4, [pc, #528]	; (79f0 <ProcessMacCommands+0xf60>)
    77e0:	47a0      	blx	r4
    77e2:	2314      	movs	r3, #20
    77e4:	18fc      	adds	r4, r7, r3
    77e6:	2374      	movs	r3, #116	; 0x74
    77e8:	18fb      	adds	r3, r7, r3
    77ea:	220c      	movs	r2, #12
    77ec:	18ba      	adds	r2, r7, r2
    77ee:	4669      	mov	r1, sp
    77f0:	6858      	ldr	r0, [r3, #4]
    77f2:	6008      	str	r0, [r1, #0]
    77f4:	681b      	ldr	r3, [r3, #0]
    77f6:	6811      	ldr	r1, [r2, #0]
    77f8:	6852      	ldr	r2, [r2, #4]
    77fa:	0020      	movs	r0, r4
    77fc:	4c7d      	ldr	r4, [pc, #500]	; (79f4 <ProcessMacCommands+0xf64>)
    77fe:	47a0      	blx	r4

                // Apply the new system time.
                SysTimeSet( sysTime );
    7800:	2314      	movs	r3, #20
    7802:	18fb      	adds	r3, r7, r3
    7804:	6818      	ldr	r0, [r3, #0]
    7806:	6859      	ldr	r1, [r3, #4]
    7808:	4b7b      	ldr	r3, [pc, #492]	; (79f8 <ProcessMacCommands+0xf68>)
    780a:	4798      	blx	r3
                LoRaMacClassBDeviceTimeAns( );
    780c:	4b7b      	ldr	r3, [pc, #492]	; (79fc <ProcessMacCommands+0xf6c>)
    780e:	4798      	blx	r3
                break;
    7810:	46c0      	nop			; (mov r8, r8)
    7812:	239f      	movs	r3, #159	; 0x9f
    7814:	18fb      	adds	r3, r7, r3
    7816:	229f      	movs	r2, #159	; 0x9f
    7818:	18ba      	adds	r2, r7, r2
    781a:	7812      	ldrb	r2, [r2, #0]
    781c:	701a      	strb	r2, [r3, #0]
    781e:	e13e      	b.n	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
    7820:	4a64      	ldr	r2, [pc, #400]	; (79b4 <ProcessMacCommands+0xf24>)
    7822:	238e      	movs	r3, #142	; 0x8e
    7824:	00db      	lsls	r3, r3, #3
    7826:	5cd3      	ldrb	r3, [r2, r3]
    7828:	2b03      	cmp	r3, #3
    782a:	d007      	beq.n	783c <ProcessMacCommands+0xdac>
    782c:	4a61      	ldr	r2, [pc, #388]	; (79b4 <ProcessMacCommands+0xf24>)
    782e:	238e      	movs	r3, #142	; 0x8e
    7830:	00db      	lsls	r3, r3, #3
    7832:	5cd3      	ldrb	r3, [r2, r3]
    7834:	2b04      	cmp	r3, #4
    7836:	d001      	beq.n	783c <ProcessMacCommands+0xdac>
                {
                    LoRaMacClassBPingSlotInfoAns( );
    7838:	4b71      	ldr	r3, [pc, #452]	; (7a00 <ProcessMacCommands+0xf70>)
    783a:	4798      	blx	r3
    783c:	239f      	movs	r3, #159	; 0x9f
    783e:	18fb      	adds	r3, r7, r3
    7840:	229f      	movs	r2, #159	; 0x9f
    7842:	18ba      	adds	r2, r7, r2
    7844:	7812      	ldrb	r2, [r2, #0]
    7846:	701a      	strb	r2, [r3, #0]
                }
                break;
    7848:	e129      	b.n	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
    784a:	238d      	movs	r3, #141	; 0x8d
    784c:	18fb      	adds	r3, r7, r3
    784e:	2203      	movs	r2, #3
    7850:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
    7852:	2300      	movs	r3, #0
    7854:	2288      	movs	r2, #136	; 0x88
    7856:	18ba      	adds	r2, r7, r2
    7858:	6013      	str	r3, [r2, #0]
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
    785a:	1cfb      	adds	r3, r7, #3
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	1cfa      	adds	r2, r7, #3
    7860:	1c59      	adds	r1, r3, #1
    7862:	7011      	strb	r1, [r2, #0]
    7864:	001a      	movs	r2, r3
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	189b      	adds	r3, r3, r2
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	2288      	movs	r2, #136	; 0x88
    786e:	18ba      	adds	r2, r7, r2
    7870:	6013      	str	r3, [r2, #0]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
    7872:	1cfb      	adds	r3, r7, #3
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	1cfa      	adds	r2, r7, #3
    7878:	1c59      	adds	r1, r3, #1
    787a:	7011      	strb	r1, [r2, #0]
    787c:	001a      	movs	r2, r3
    787e:	687b      	ldr	r3, [r7, #4]
    7880:	189b      	adds	r3, r3, r2
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	021b      	lsls	r3, r3, #8
    7886:	2288      	movs	r2, #136	; 0x88
    7888:	18ba      	adds	r2, r7, r2
    788a:	6812      	ldr	r2, [r2, #0]
    788c:	4313      	orrs	r3, r2
    788e:	2288      	movs	r2, #136	; 0x88
    7890:	18ba      	adds	r2, r7, r2
    7892:	6013      	str	r3, [r2, #0]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
    7894:	1cfb      	adds	r3, r7, #3
    7896:	781b      	ldrb	r3, [r3, #0]
    7898:	1cfa      	adds	r2, r7, #3
    789a:	1c59      	adds	r1, r3, #1
    789c:	7011      	strb	r1, [r2, #0]
    789e:	001a      	movs	r2, r3
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	189b      	adds	r3, r3, r2
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	041b      	lsls	r3, r3, #16
    78a8:	2288      	movs	r2, #136	; 0x88
    78aa:	18ba      	adds	r2, r7, r2
    78ac:	6812      	ldr	r2, [r2, #0]
    78ae:	4313      	orrs	r3, r2
    78b0:	2288      	movs	r2, #136	; 0x88
    78b2:	18ba      	adds	r2, r7, r2
    78b4:	6013      	str	r3, [r2, #0]
                frequency *= 100;
    78b6:	2388      	movs	r3, #136	; 0x88
    78b8:	18fb      	adds	r3, r7, r3
    78ba:	681b      	ldr	r3, [r3, #0]
    78bc:	2264      	movs	r2, #100	; 0x64
    78be:	4353      	muls	r3, r2
    78c0:	2288      	movs	r2, #136	; 0x88
    78c2:	18ba      	adds	r2, r7, r2
    78c4:	6013      	str	r3, [r2, #0]
                datarate = payload[macIndex++] & 0x0F;
    78c6:	1cfb      	adds	r3, r7, #3
    78c8:	781b      	ldrb	r3, [r3, #0]
    78ca:	1cfa      	adds	r2, r7, #3
    78cc:	1c59      	adds	r1, r3, #1
    78ce:	7011      	strb	r1, [r2, #0]
    78d0:	001a      	movs	r2, r3
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	189b      	adds	r3, r3, r2
    78d6:	781a      	ldrb	r2, [r3, #0]
    78d8:	2387      	movs	r3, #135	; 0x87
    78da:	18fb      	adds	r3, r7, r3
    78dc:	210f      	movs	r1, #15
    78de:	400a      	ands	r2, r1
    78e0:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
    78e2:	238d      	movs	r3, #141	; 0x8d
    78e4:	18fc      	adds	r4, r7, r3
    78e6:	2388      	movs	r3, #136	; 0x88
    78e8:	18fb      	adds	r3, r7, r3
    78ea:	681a      	ldr	r2, [r3, #0]
    78ec:	2387      	movs	r3, #135	; 0x87
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	0011      	movs	r1, r2
    78f4:	0018      	movs	r0, r3
    78f6:	4b43      	ldr	r3, [pc, #268]	; (7a04 <ProcessMacCommands+0xf74>)
    78f8:	4798      	blx	r3
    78fa:	0003      	movs	r3, r0
    78fc:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
    78fe:	2370      	movs	r3, #112	; 0x70
    7900:	18fb      	adds	r3, r7, r3
    7902:	228d      	movs	r2, #141	; 0x8d
    7904:	18ba      	adds	r2, r7, r2
    7906:	7812      	ldrb	r2, [r2, #0]
    7908:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
    790a:	2370      	movs	r3, #112	; 0x70
    790c:	18fb      	adds	r3, r7, r3
    790e:	2201      	movs	r2, #1
    7910:	0019      	movs	r1, r3
    7912:	2011      	movs	r0, #17
    7914:	4b30      	ldr	r3, [pc, #192]	; (79d8 <ProcessMacCommands+0xf48>)
    7916:	4798      	blx	r3
    7918:	239f      	movs	r3, #159	; 0x9f
    791a:	18fb      	adds	r3, r7, r3
    791c:	229f      	movs	r2, #159	; 0x9f
    791e:	18ba      	adds	r2, r7, r2
    7920:	7812      	ldrb	r2, [r2, #0]
    7922:	701a      	strb	r2, [r3, #0]
                break;
    7924:	e0bb      	b.n	7a9e <ProcessMacCommands+0x100e>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
    7926:	2384      	movs	r3, #132	; 0x84
    7928:	18fb      	adds	r3, r7, r3
    792a:	2200      	movs	r2, #0
    792c:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
    792e:	2383      	movs	r3, #131	; 0x83
    7930:	18fb      	adds	r3, r7, r3
    7932:	2200      	movs	r2, #0
    7934:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
    7936:	1cfb      	adds	r3, r7, #3
    7938:	781b      	ldrb	r3, [r3, #0]
    793a:	1cfa      	adds	r2, r7, #3
    793c:	1c59      	adds	r1, r3, #1
    793e:	7011      	strb	r1, [r2, #0]
    7940:	001a      	movs	r2, r3
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	189b      	adds	r3, r3, r2
    7946:	781a      	ldrb	r2, [r3, #0]
    7948:	2384      	movs	r3, #132	; 0x84
    794a:	18fb      	adds	r3, r7, r3
    794c:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
    794e:	1cfb      	adds	r3, r7, #3
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	1cfa      	adds	r2, r7, #3
    7954:	1c59      	adds	r1, r3, #1
    7956:	7011      	strb	r1, [r2, #0]
    7958:	001a      	movs	r2, r3
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	189b      	adds	r3, r3, r2
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	021b      	lsls	r3, r3, #8
    7962:	b21a      	sxth	r2, r3
    7964:	2384      	movs	r3, #132	; 0x84
    7966:	18fb      	adds	r3, r7, r3
    7968:	2100      	movs	r1, #0
    796a:	5e5b      	ldrsh	r3, [r3, r1]
    796c:	4313      	orrs	r3, r2
    796e:	b21a      	sxth	r2, r3
    7970:	2384      	movs	r3, #132	; 0x84
    7972:	18fb      	adds	r3, r7, r3
    7974:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
    7976:	1cfb      	adds	r3, r7, #3
    7978:	781b      	ldrb	r3, [r3, #0]
    797a:	1cfa      	adds	r2, r7, #3
    797c:	1c59      	adds	r1, r3, #1
    797e:	7011      	strb	r1, [r2, #0]
    7980:	001a      	movs	r2, r3
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	189a      	adds	r2, r3, r2
    7986:	2383      	movs	r3, #131	; 0x83
    7988:	18fb      	adds	r3, r7, r3
    798a:	7812      	ldrb	r2, [r2, #0]
    798c:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
    798e:	4b1e      	ldr	r3, [pc, #120]	; (7a08 <ProcessMacCommands+0xf78>)
    7990:	681a      	ldr	r2, [r3, #0]
    7992:	2383      	movs	r3, #131	; 0x83
    7994:	18fb      	adds	r3, r7, r3
    7996:	7819      	ldrb	r1, [r3, #0]
    7998:	2384      	movs	r3, #132	; 0x84
    799a:	18fb      	adds	r3, r7, r3
    799c:	881b      	ldrh	r3, [r3, #0]
    799e:	0018      	movs	r0, r3
    79a0:	4b1a      	ldr	r3, [pc, #104]	; (7a0c <ProcessMacCommands+0xf7c>)
    79a2:	4798      	blx	r3
    79a4:	239f      	movs	r3, #159	; 0x9f
    79a6:	18fb      	adds	r3, r7, r3
    79a8:	229f      	movs	r2, #159	; 0x9f
    79aa:	18ba      	adds	r2, r7, r2
    79ac:	7812      	ldrb	r2, [r2, #0]
    79ae:	701a      	strb	r2, [r3, #0]
                break;
    79b0:	e075      	b.n	7a9e <ProcessMacCommands+0x100e>
    79b2:	46c0      	nop			; (mov r8, r8)
    79b4:	20000b78 	.word	0x20000b78
    79b8:	00000222 	.word	0x00000222
    79bc:	2000104c 	.word	0x2000104c
    79c0:	0000b169 	.word	0x0000b169
    79c4:	20000fec 	.word	0x20000fec
    79c8:	0001624d 	.word	0x0001624d
    79cc:	000004d4 	.word	0x000004d4
    79d0:	00016389 	.word	0x00016389
    79d4:	00015fc1 	.word	0x00015fc1
    79d8:	0000bcb5 	.word	0x0000bcb5
    79dc:	0000bde9 	.word	0x0000bde9
    79e0:	0000bd6d 	.word	0x0000bd6d
    79e4:	0001a0e1 	.word	0x0001a0e1
    79e8:	12d53d80 	.word	0x12d53d80
    79ec:	00015eb5 	.word	0x00015eb5
    79f0:	00015d85 	.word	0x00015d85
    79f4:	00015cc5 	.word	0x00015cc5
    79f8:	00015e3d 	.word	0x00015e3d
    79fc:	0000b98b 	.word	0x0000b98b
    7a00:	0000b94d 	.word	0x0000b94d
    7a04:	0000b957 	.word	0x0000b957
    7a08:	20001bdc 	.word	0x20001bdc
    7a0c:	0000b96f 	.word	0x0000b96f
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
    7a10:	2300      	movs	r3, #0
    7a12:	67fb      	str	r3, [r7, #124]	; 0x7c

                    frequency = ( uint32_t )payload[macIndex++];
    7a14:	1cfb      	adds	r3, r7, #3
    7a16:	781b      	ldrb	r3, [r3, #0]
    7a18:	1cfa      	adds	r2, r7, #3
    7a1a:	1c59      	adds	r1, r3, #1
    7a1c:	7011      	strb	r1, [r2, #0]
    7a1e:	001a      	movs	r2, r3
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	189b      	adds	r3, r3, r2
    7a24:	781b      	ldrb	r3, [r3, #0]
    7a26:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
    7a28:	1cfb      	adds	r3, r7, #3
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	1cfa      	adds	r2, r7, #3
    7a2e:	1c59      	adds	r1, r3, #1
    7a30:	7011      	strb	r1, [r2, #0]
    7a32:	001a      	movs	r2, r3
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	189b      	adds	r3, r3, r2
    7a38:	781b      	ldrb	r3, [r3, #0]
    7a3a:	021b      	lsls	r3, r3, #8
    7a3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7a3e:	4313      	orrs	r3, r2
    7a40:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
    7a42:	1cfb      	adds	r3, r7, #3
    7a44:	781b      	ldrb	r3, [r3, #0]
    7a46:	1cfa      	adds	r2, r7, #3
    7a48:	1c59      	adds	r1, r3, #1
    7a4a:	7011      	strb	r1, [r2, #0]
    7a4c:	001a      	movs	r2, r3
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	189b      	adds	r3, r3, r2
    7a52:	781b      	ldrb	r3, [r3, #0]
    7a54:	041b      	lsls	r3, r3, #16
    7a56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7a58:	4313      	orrs	r3, r2
    7a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
                    frequency *= 100;
    7a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a5e:	2264      	movs	r2, #100	; 0x64
    7a60:	4353      	muls	r3, r2
    7a62:	67fb      	str	r3, [r7, #124]	; 0x7c

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
    7a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a66:	0018      	movs	r0, r3
    7a68:	4b13      	ldr	r3, [pc, #76]	; (7ab8 <ProcessMacCommands+0x1028>)
    7a6a:	4798      	blx	r3
    7a6c:	1e03      	subs	r3, r0, #0
    7a6e:	d004      	beq.n	7a7a <ProcessMacCommands+0xfea>
                    {
                        macCmdPayload[0] = 1;
    7a70:	2370      	movs	r3, #112	; 0x70
    7a72:	18fb      	adds	r3, r7, r3
    7a74:	2201      	movs	r2, #1
    7a76:	701a      	strb	r2, [r3, #0]
    7a78:	e003      	b.n	7a82 <ProcessMacCommands+0xff2>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
    7a7a:	2370      	movs	r3, #112	; 0x70
    7a7c:	18fb      	adds	r3, r7, r3
    7a7e:	2200      	movs	r2, #0
    7a80:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
    7a82:	2370      	movs	r3, #112	; 0x70
    7a84:	18fb      	adds	r3, r7, r3
    7a86:	2201      	movs	r2, #1
    7a88:	0019      	movs	r1, r3
    7a8a:	2013      	movs	r0, #19
    7a8c:	4b0b      	ldr	r3, [pc, #44]	; (7abc <ProcessMacCommands+0x102c>)
    7a8e:	4798      	blx	r3
    7a90:	239f      	movs	r3, #159	; 0x9f
    7a92:	18fb      	adds	r3, r7, r3
    7a94:	229f      	movs	r2, #159	; 0x9f
    7a96:	18ba      	adds	r2, r7, r2
    7a98:	7812      	ldrb	r2, [r2, #0]
    7a9a:	701a      	strb	r2, [r3, #0]
                }
                break;
    7a9c:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
    7a9e:	1cfa      	adds	r2, r7, #3
    7aa0:	1cbb      	adds	r3, r7, #2
    7aa2:	7812      	ldrb	r2, [r2, #0]
    7aa4:	781b      	ldrb	r3, [r3, #0]
    7aa6:	429a      	cmp	r2, r3
    7aa8:	d201      	bcs.n	7aae <ProcessMacCommands+0x101e>
    7aaa:	f7ff f813 	bl	6ad4 <ProcessMacCommands+0x44>
    7aae:	e000      	b.n	7ab2 <ProcessMacCommands+0x1022>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
    7ab0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    7ab2:	46bd      	mov	sp, r7
    7ab4:	b028      	add	sp, #160	; 0xa0
    7ab6:	bdb0      	pop	{r4, r5, r7, pc}
    7ab8:	0000b995 	.word	0x0000b995
    7abc:	0000bcb5 	.word	0x0000bcb5

00007ac0 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
    7ac0:	b5b0      	push	{r4, r5, r7, lr}
    7ac2:	b08e      	sub	sp, #56	; 0x38
    7ac4:	af02      	add	r7, sp, #8
    7ac6:	60f8      	str	r0, [r7, #12]
    7ac8:	0008      	movs	r0, r1
    7aca:	607a      	str	r2, [r7, #4]
    7acc:	0019      	movs	r1, r3
    7ace:	230b      	movs	r3, #11
    7ad0:	18fb      	adds	r3, r7, r3
    7ad2:	1c02      	adds	r2, r0, #0
    7ad4:	701a      	strb	r2, [r3, #0]
    7ad6:	2308      	movs	r3, #8
    7ad8:	18fb      	adds	r3, r7, r3
    7ada:	1c0a      	adds	r2, r1, #0
    7adc:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    7ade:	232f      	movs	r3, #47	; 0x2f
    7ae0:	18fb      	adds	r3, r7, r3
    7ae2:	2203      	movs	r2, #3
    7ae4:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    7ae6:	4aa0      	ldr	r2, [pc, #640]	; (7d68 <Send+0x2a8>)
    7ae8:	239c      	movs	r3, #156	; 0x9c
    7aea:	00db      	lsls	r3, r3, #3
    7aec:	58d2      	ldr	r2, [r2, r3]
    7aee:	232e      	movs	r3, #46	; 0x2e
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	21d5      	movs	r1, #213	; 0xd5
    7af4:	5c52      	ldrb	r2, [r2, r1]
    7af6:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    7af8:	4a9b      	ldr	r2, [pc, #620]	; (7d68 <Send+0x2a8>)
    7afa:	239c      	movs	r3, #156	; 0x9c
    7afc:	00db      	lsls	r3, r3, #3
    7afe:	58d2      	ldr	r2, [r2, r3]
    7b00:	232d      	movs	r3, #45	; 0x2d
    7b02:	18fb      	adds	r3, r7, r3
    7b04:	21d4      	movs	r1, #212	; 0xd4
    7b06:	5c52      	ldrb	r2, [r2, r1]
    7b08:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    7b0a:	4a97      	ldr	r2, [pc, #604]	; (7d68 <Send+0x2a8>)
    7b0c:	239c      	movs	r3, #156	; 0x9c
    7b0e:	00db      	lsls	r3, r3, #3
    7b10:	58d3      	ldr	r3, [r2, r3]
    7b12:	22cc      	movs	r2, #204	; 0xcc
    7b14:	589b      	ldr	r3, [r3, r2]
    7b16:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    7b18:	4a93      	ldr	r2, [pc, #588]	; (7d68 <Send+0x2a8>)
    7b1a:	239c      	movs	r3, #156	; 0x9c
    7b1c:	00db      	lsls	r3, r3, #3
    7b1e:	58d2      	ldr	r2, [r2, r3]
    7b20:	2388      	movs	r3, #136	; 0x88
    7b22:	009b      	lsls	r3, r3, #2
    7b24:	5cd3      	ldrb	r3, [r2, r3]
    7b26:	2b00      	cmp	r3, #0
    7b28:	d101      	bne.n	7b2e <Send+0x6e>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
    7b2a:	2307      	movs	r3, #7
    7b2c:	e117      	b.n	7d5e <Send+0x29e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
    7b2e:	4a8e      	ldr	r2, [pc, #568]	; (7d68 <Send+0x2a8>)
    7b30:	239c      	movs	r3, #156	; 0x9c
    7b32:	00db      	lsls	r3, r3, #3
    7b34:	58d2      	ldr	r2, [r2, r3]
    7b36:	2312      	movs	r3, #18
    7b38:	33ff      	adds	r3, #255	; 0xff
    7b3a:	5cd3      	ldrb	r3, [r2, r3]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d104      	bne.n	7b4a <Send+0x8a>
    {
        MacCtx.AggregatedTimeOff = 0;
    7b40:	4a89      	ldr	r2, [pc, #548]	; (7d68 <Send+0x2a8>)
    7b42:	23d1      	movs	r3, #209	; 0xd1
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	2100      	movs	r1, #0
    7b48:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
    7b4a:	232c      	movs	r3, #44	; 0x2c
    7b4c:	18fb      	adds	r3, r7, r3
    7b4e:	2200      	movs	r2, #0
    7b50:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
    7b52:	232c      	movs	r3, #44	; 0x2c
    7b54:	18fb      	adds	r3, r7, r3
    7b56:	781a      	ldrb	r2, [r3, #0]
    7b58:	210f      	movs	r1, #15
    7b5a:	438a      	bics	r2, r1
    7b5c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
    7b5e:	4a82      	ldr	r2, [pc, #520]	; (7d68 <Send+0x2a8>)
    7b60:	239c      	movs	r3, #156	; 0x9c
    7b62:	00db      	lsls	r3, r3, #3
    7b64:	58d3      	ldr	r3, [r2, r3]
    7b66:	22ca      	movs	r2, #202	; 0xca
    7b68:	5c9a      	ldrb	r2, [r3, r2]
    7b6a:	232c      	movs	r3, #44	; 0x2c
    7b6c:	18fb      	adds	r3, r7, r3
    7b6e:	01d0      	lsls	r0, r2, #7
    7b70:	781a      	ldrb	r2, [r3, #0]
    7b72:	217f      	movs	r1, #127	; 0x7f
    7b74:	400a      	ands	r2, r1
    7b76:	1c11      	adds	r1, r2, #0
    7b78:	1c02      	adds	r2, r0, #0
    7b7a:	430a      	orrs	r2, r1
    7b7c:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    7b7e:	4a7a      	ldr	r2, [pc, #488]	; (7d68 <Send+0x2a8>)
    7b80:	239c      	movs	r3, #156	; 0x9c
    7b82:	00db      	lsls	r3, r3, #3
    7b84:	58d3      	ldr	r3, [r2, r3]
    7b86:	22c8      	movs	r2, #200	; 0xc8
    7b88:	5c9b      	ldrb	r3, [r3, r2]
    7b8a:	2b01      	cmp	r3, #1
    7b8c:	d106      	bne.n	7b9c <Send+0xdc>
    {
        fCtrl.Bits.FPending      = 1;
    7b8e:	232c      	movs	r3, #44	; 0x2c
    7b90:	18fb      	adds	r3, r7, r3
    7b92:	781a      	ldrb	r2, [r3, #0]
    7b94:	2110      	movs	r1, #16
    7b96:	430a      	orrs	r2, r1
    7b98:	701a      	strb	r2, [r3, #0]
    7b9a:	e005      	b.n	7ba8 <Send+0xe8>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
    7b9c:	232c      	movs	r3, #44	; 0x2c
    7b9e:	18fb      	adds	r3, r7, r3
    7ba0:	781a      	ldrb	r2, [r3, #0]
    7ba2:	2110      	movs	r1, #16
    7ba4:	438a      	bics	r2, r1
    7ba6:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
    7ba8:	4a6f      	ldr	r2, [pc, #444]	; (7d68 <Send+0x2a8>)
    7baa:	239c      	movs	r3, #156	; 0x9c
    7bac:	00db      	lsls	r3, r3, #3
    7bae:	58d2      	ldr	r2, [r2, r3]
    7bb0:	2386      	movs	r3, #134	; 0x86
    7bb2:	009b      	lsls	r3, r3, #2
    7bb4:	5cd3      	ldrb	r3, [r2, r3]
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d005      	beq.n	7bc6 <Send+0x106>
    {
        fCtrl.Bits.Ack = 1;
    7bba:	232c      	movs	r3, #44	; 0x2c
    7bbc:	18fb      	adds	r3, r7, r3
    7bbe:	781a      	ldrb	r2, [r3, #0]
    7bc0:	2120      	movs	r1, #32
    7bc2:	430a      	orrs	r2, r1
    7bc4:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
    7bc6:	4a68      	ldr	r2, [pc, #416]	; (7d68 <Send+0x2a8>)
    7bc8:	239c      	movs	r3, #156	; 0x9c
    7bca:	00db      	lsls	r3, r3, #3
    7bcc:	58d1      	ldr	r1, [r2, r3]
    7bce:	2314      	movs	r3, #20
    7bd0:	18fb      	adds	r3, r7, r3
    7bd2:	2287      	movs	r2, #135	; 0x87
    7bd4:	0092      	lsls	r2, r2, #2
    7bd6:	588a      	ldr	r2, [r1, r2]
    7bd8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
    7bda:	2314      	movs	r3, #20
    7bdc:	18fb      	adds	r3, r7, r3
    7bde:	2201      	movs	r2, #1
    7be0:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
    7be2:	232c      	movs	r3, #44	; 0x2c
    7be4:	18fb      	adds	r3, r7, r3
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	061b      	lsls	r3, r3, #24
    7bea:	0fdb      	lsrs	r3, r3, #31
    7bec:	b2db      	uxtb	r3, r3
    7bee:	1e5a      	subs	r2, r3, #1
    7bf0:	4193      	sbcs	r3, r2
    7bf2:	b2da      	uxtb	r2, r3
    7bf4:	2314      	movs	r3, #20
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    7bfa:	4a5b      	ldr	r2, [pc, #364]	; (7d68 <Send+0x2a8>)
    7bfc:	239c      	movs	r3, #156	; 0x9c
    7bfe:	00db      	lsls	r3, r3, #3
    7c00:	58d3      	ldr	r3, [r2, r3]
    7c02:	22cc      	movs	r2, #204	; 0xcc
    7c04:	589a      	ldr	r2, [r3, r2]
    7c06:	2314      	movs	r3, #20
    7c08:	18fb      	adds	r3, r7, r3
    7c0a:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    7c0c:	4a56      	ldr	r2, [pc, #344]	; (7d68 <Send+0x2a8>)
    7c0e:	239c      	movs	r3, #156	; 0x9c
    7c10:	00db      	lsls	r3, r3, #3
    7c12:	58d3      	ldr	r3, [r2, r3]
    7c14:	22d0      	movs	r2, #208	; 0xd0
    7c16:	5a9a      	ldrh	r2, [r3, r2]
    7c18:	2314      	movs	r3, #20
    7c1a:	18fb      	adds	r3, r7, r3
    7c1c:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    7c1e:	4a52      	ldr	r2, [pc, #328]	; (7d68 <Send+0x2a8>)
    7c20:	239c      	movs	r3, #156	; 0x9c
    7c22:	00db      	lsls	r3, r3, #3
    7c24:	58d3      	ldr	r3, [r2, r3]
    7c26:	22d2      	movs	r2, #210	; 0xd2
    7c28:	5a9a      	ldrh	r2, [r3, r2]
    7c2a:	2314      	movs	r3, #20
    7c2c:	18fb      	adds	r3, r7, r3
    7c2e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    7c30:	4a4d      	ldr	r2, [pc, #308]	; (7d68 <Send+0x2a8>)
    7c32:	239c      	movs	r3, #156	; 0x9c
    7c34:	00db      	lsls	r3, r3, #3
    7c36:	58d3      	ldr	r3, [r2, r3]
    7c38:	22d5      	movs	r2, #213	; 0xd5
    7c3a:	569a      	ldrsb	r2, [r3, r2]
    7c3c:	2314      	movs	r3, #20
    7c3e:	18fb      	adds	r3, r7, r3
    7c40:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    7c42:	4a49      	ldr	r2, [pc, #292]	; (7d68 <Send+0x2a8>)
    7c44:	239c      	movs	r3, #156	; 0x9c
    7c46:	00db      	lsls	r3, r3, #3
    7c48:	58d3      	ldr	r3, [r2, r3]
    7c4a:	22d4      	movs	r2, #212	; 0xd4
    7c4c:	569a      	ldrsb	r2, [r3, r2]
    7c4e:	2314      	movs	r3, #20
    7c50:	18fb      	adds	r3, r7, r3
    7c52:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    7c54:	4a44      	ldr	r2, [pc, #272]	; (7d68 <Send+0x2a8>)
    7c56:	239c      	movs	r3, #156	; 0x9c
    7c58:	00db      	lsls	r3, r3, #3
    7c5a:	58d2      	ldr	r2, [r2, r3]
    7c5c:	2380      	movs	r3, #128	; 0x80
    7c5e:	005b      	lsls	r3, r3, #1
    7c60:	5cd2      	ldrb	r2, [r2, r3]
    7c62:	2314      	movs	r3, #20
    7c64:	18fb      	adds	r3, r7, r3
    7c66:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    7c68:	4a3f      	ldr	r2, [pc, #252]	; (7d68 <Send+0x2a8>)
    7c6a:	239c      	movs	r3, #156	; 0x9c
    7c6c:	00db      	lsls	r3, r3, #3
    7c6e:	58d3      	ldr	r3, [r2, r3]
    7c70:	781a      	ldrb	r2, [r3, #0]
    7c72:	2314      	movs	r3, #20
    7c74:	18fb      	adds	r3, r7, r3
    7c76:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
    7c78:	4a3b      	ldr	r2, [pc, #236]	; (7d68 <Send+0x2a8>)
    7c7a:	239c      	movs	r3, #156	; 0x9c
    7c7c:	00db      	lsls	r3, r3, #3
    7c7e:	58d3      	ldr	r3, [r2, r3]
    7c80:	33d5      	adds	r3, #213	; 0xd5
    7c82:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
    7c84:	4a38      	ldr	r2, [pc, #224]	; (7d68 <Send+0x2a8>)
    7c86:	239c      	movs	r3, #156	; 0x9c
    7c88:	00db      	lsls	r3, r3, #3
    7c8a:	58d3      	ldr	r3, [r2, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
    7c8c:	33d4      	adds	r3, #212	; 0xd4
    7c8e:	001a      	movs	r2, r3
    7c90:	2328      	movs	r3, #40	; 0x28
    7c92:	18fb      	adds	r3, r7, r3
    7c94:	2014      	movs	r0, #20
    7c96:	1838      	adds	r0, r7, r0
    7c98:	4c34      	ldr	r4, [pc, #208]	; (7d6c <Send+0x2ac>)
    7c9a:	47a0      	blx	r4
    7c9c:	0003      	movs	r3, r0
    7c9e:	0019      	movs	r1, r3
    7ca0:	232c      	movs	r3, #44	; 0x2c
    7ca2:	18fb      	adds	r3, r7, r3
    7ca4:	2201      	movs	r2, #1
    7ca6:	400a      	ands	r2, r1
    7ca8:	0190      	lsls	r0, r2, #6
    7caa:	781a      	ldrb	r2, [r3, #0]
    7cac:	2140      	movs	r1, #64	; 0x40
    7cae:	438a      	bics	r2, r1
    7cb0:	1c11      	adds	r1, r2, #0
    7cb2:	1c02      	adds	r2, r0, #0
    7cb4:	430a      	orrs	r2, r1
    7cb6:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
    7cb8:	232f      	movs	r3, #47	; 0x2f
    7cba:	18fc      	adds	r4, r7, r3
    7cbc:	687d      	ldr	r5, [r7, #4]
    7cbe:	230b      	movs	r3, #11
    7cc0:	18fb      	adds	r3, r7, r3
    7cc2:	781a      	ldrb	r2, [r3, #0]
    7cc4:	232c      	movs	r3, #44	; 0x2c
    7cc6:	18f9      	adds	r1, r7, r3
    7cc8:	68f8      	ldr	r0, [r7, #12]
    7cca:	2308      	movs	r3, #8
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	881b      	ldrh	r3, [r3, #0]
    7cd0:	9300      	str	r3, [sp, #0]
    7cd2:	002b      	movs	r3, r5
    7cd4:	4d26      	ldr	r5, [pc, #152]	; (7d70 <Send+0x2b0>)
    7cd6:	47a8      	blx	r5
    7cd8:	0003      	movs	r3, r0
    7cda:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
    7cdc:	232f      	movs	r3, #47	; 0x2f
    7cde:	18fb      	adds	r3, r7, r3
    7ce0:	781b      	ldrb	r3, [r3, #0]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d004      	beq.n	7cf0 <Send+0x230>
    7ce6:	232f      	movs	r3, #47	; 0x2f
    7ce8:	18fb      	adds	r3, r7, r3
    7cea:	781b      	ldrb	r3, [r3, #0]
    7cec:	2b0a      	cmp	r3, #10
    7cee:	d106      	bne.n	7cfe <Send+0x23e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
    7cf0:	232f      	movs	r3, #47	; 0x2f
    7cf2:	18fc      	adds	r4, r7, r3
    7cf4:	2000      	movs	r0, #0
    7cf6:	4b1f      	ldr	r3, [pc, #124]	; (7d74 <Send+0x2b4>)
    7cf8:	4798      	blx	r3
    7cfa:	0003      	movs	r3, r0
    7cfc:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
    7cfe:	232f      	movs	r3, #47	; 0x2f
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	781b      	ldrb	r3, [r3, #0]
    7d04:	2b00      	cmp	r3, #0
    7d06:	d012      	beq.n	7d2e <Send+0x26e>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
    7d08:	4a17      	ldr	r2, [pc, #92]	; (7d68 <Send+0x2a8>)
    7d0a:	239c      	movs	r3, #156	; 0x9c
    7d0c:	00db      	lsls	r3, r3, #3
    7d0e:	58d3      	ldr	r3, [r2, r3]
    7d10:	222e      	movs	r2, #46	; 0x2e
    7d12:	18ba      	adds	r2, r7, r2
    7d14:	21d5      	movs	r1, #213	; 0xd5
    7d16:	7812      	ldrb	r2, [r2, #0]
    7d18:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
    7d1a:	4a13      	ldr	r2, [pc, #76]	; (7d68 <Send+0x2a8>)
    7d1c:	239c      	movs	r3, #156	; 0x9c
    7d1e:	00db      	lsls	r3, r3, #3
    7d20:	58d3      	ldr	r3, [r2, r3]
    7d22:	222d      	movs	r2, #45	; 0x2d
    7d24:	18ba      	adds	r2, r7, r2
    7d26:	21d4      	movs	r1, #212	; 0xd4
    7d28:	7812      	ldrb	r2, [r2, #0]
    7d2a:	545a      	strb	r2, [r3, r1]
    7d2c:	e014      	b.n	7d58 <Send+0x298>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
    7d2e:	4a0e      	ldr	r2, [pc, #56]	; (7d68 <Send+0x2a8>)
    7d30:	239c      	movs	r3, #156	; 0x9c
    7d32:	00db      	lsls	r3, r3, #3
    7d34:	58d2      	ldr	r2, [r2, r3]
    7d36:	2386      	movs	r3, #134	; 0x86
    7d38:	009b      	lsls	r3, r3, #2
    7d3a:	2100      	movs	r1, #0
    7d3c:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
    7d3e:	4a0a      	ldr	r2, [pc, #40]	; (7d68 <Send+0x2a8>)
    7d40:	239c      	movs	r3, #156	; 0x9c
    7d42:	00db      	lsls	r3, r3, #3
    7d44:	58d3      	ldr	r3, [r2, r3]
    7d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d48:	21cc      	movs	r1, #204	; 0xcc
    7d4a:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
    7d4c:	4b0a      	ldr	r3, [pc, #40]	; (7d78 <Send+0x2b8>)
    7d4e:	4798      	blx	r3
    7d50:	1e03      	subs	r3, r0, #0
    7d52:	d001      	beq.n	7d58 <Send+0x298>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    7d54:	2313      	movs	r3, #19
    7d56:	e002      	b.n	7d5e <Send+0x29e>
        }
    }
    return status;
    7d58:	232f      	movs	r3, #47	; 0x2f
    7d5a:	18fb      	adds	r3, r7, r3
    7d5c:	781b      	ldrb	r3, [r3, #0]
}
    7d5e:	0018      	movs	r0, r3
    7d60:	46bd      	mov	sp, r7
    7d62:	b00c      	add	sp, #48	; 0x30
    7d64:	bdb0      	pop	{r4, r5, r7, pc}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	20000b78 	.word	0x20000b78
    7d6c:	0000b7a9 	.word	0x0000b7a9
    7d70:	000087f9 	.word	0x000087f9
    7d74:	00007fd5 	.word	0x00007fd5
    7d78:	0000be35 	.word	0x0000be35

00007d7c <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
    7d7c:	b590      	push	{r4, r7, lr}
    7d7e:	b085      	sub	sp, #20
    7d80:	af00      	add	r7, sp, #0
    7d82:	0002      	movs	r2, r0
    7d84:	1dfb      	adds	r3, r7, #7
    7d86:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    7d88:	230e      	movs	r3, #14
    7d8a:	18fb      	adds	r3, r7, r3
    7d8c:	2200      	movs	r2, #0
    7d8e:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
    7d90:	230c      	movs	r3, #12
    7d92:	18fb      	adds	r3, r7, r3
    7d94:	2200      	movs	r2, #0
    7d96:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
    7d98:	230f      	movs	r3, #15
    7d9a:	18fb      	adds	r3, r7, r3
    7d9c:	2201      	movs	r2, #1
    7d9e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
    7da0:	1dfb      	adds	r3, r7, #7
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	2b01      	cmp	r3, #1
    7da6:	d009      	beq.n	7dbc <SendReJoinReq+0x40>
    7da8:	dc02      	bgt.n	7db0 <SendReJoinReq+0x34>
    7daa:	2b00      	cmp	r3, #0
    7dac:	d04b      	beq.n	7e46 <SendReJoinReq+0xca>
    7dae:	e0e0      	b.n	7f72 <SendReJoinReq+0x1f6>
    7db0:	2b02      	cmp	r3, #2
    7db2:	d048      	beq.n	7e46 <SendReJoinReq+0xca>
    7db4:	2bff      	cmp	r3, #255	; 0xff
    7db6:	d100      	bne.n	7dba <SendReJoinReq+0x3e>
    7db8:	e0ac      	b.n	7f14 <SendReJoinReq+0x198>
    7dba:	e0da      	b.n	7f72 <SendReJoinReq+0x1f6>
    {
        case REJOIN_REQ_1:
        {
            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    7dbc:	4a79      	ldr	r2, [pc, #484]	; (7fa4 <SendReJoinReq+0x228>)
    7dbe:	239c      	movs	r3, #156	; 0x9c
    7dc0:	00db      	lsls	r3, r3, #3
    7dc2:	58d2      	ldr	r2, [r2, r3]
    7dc4:	238e      	movs	r3, #142	; 0x8e
    7dc6:	009b      	lsls	r3, r3, #2
    7dc8:	2101      	movs	r1, #1
    7dca:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
    7dcc:	4a75      	ldr	r2, [pc, #468]	; (7fa4 <SendReJoinReq+0x228>)
    7dce:	2386      	movs	r3, #134	; 0x86
    7dd0:	005b      	lsls	r3, r3, #1
    7dd2:	2101      	movs	r1, #1
    7dd4:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
    7dd6:	4a73      	ldr	r2, [pc, #460]	; (7fa4 <SendReJoinReq+0x228>)
    7dd8:	2388      	movs	r3, #136	; 0x88
    7dda:	005b      	lsls	r3, r3, #1
    7ddc:	4972      	ldr	r1, [pc, #456]	; (7fa8 <SendReJoinReq+0x22c>)
    7dde:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    7de0:	4a70      	ldr	r2, [pc, #448]	; (7fa4 <SendReJoinReq+0x228>)
    7de2:	238a      	movs	r3, #138	; 0x8a
    7de4:	005b      	lsls	r3, r3, #1
    7de6:	21ff      	movs	r1, #255	; 0xff
    7de8:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
    7dea:	230c      	movs	r3, #12
    7dec:	18fb      	adds	r3, r7, r3
    7dee:	781a      	ldrb	r2, [r3, #0]
    7df0:	211f      	movs	r1, #31
    7df2:	400a      	ands	r2, r1
    7df4:	1c11      	adds	r1, r2, #0
    7df6:	2240      	movs	r2, #64	; 0x40
    7df8:	4252      	negs	r2, r2
    7dfa:	430a      	orrs	r2, r1
    7dfc:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.ReJoin1.MHDR.Value = macHdr.Value;
    7dfe:	230c      	movs	r3, #12
    7e00:	18fb      	adds	r3, r7, r3
    7e02:	7819      	ldrb	r1, [r3, #0]
    7e04:	4a67      	ldr	r2, [pc, #412]	; (7fa4 <SendReJoinReq+0x228>)
    7e06:	2316      	movs	r3, #22
    7e08:	33ff      	adds	r3, #255	; 0xff
    7e0a:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
    7e0c:	4a65      	ldr	r2, [pc, #404]	; (7fa4 <SendReJoinReq+0x228>)
    7e0e:	238b      	movs	r3, #139	; 0x8b
    7e10:	005b      	lsls	r3, r3, #1
    7e12:	2101      	movs	r1, #1
    7e14:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    7e16:	4b63      	ldr	r3, [pc, #396]	; (7fa4 <SendReJoinReq+0x228>)
    7e18:	6859      	ldr	r1, [r3, #4]
    7e1a:	4b64      	ldr	r3, [pc, #400]	; (7fac <SendReJoinReq+0x230>)
    7e1c:	2208      	movs	r2, #8
    7e1e:	0018      	movs	r0, r3
    7e20:	4b63      	ldr	r3, [pc, #396]	; (7fb0 <SendReJoinReq+0x234>)
    7e22:	4798      	blx	r3
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    7e24:	4b5f      	ldr	r3, [pc, #380]	; (7fa4 <SendReJoinReq+0x228>)
    7e26:	6819      	ldr	r1, [r3, #0]
    7e28:	4b62      	ldr	r3, [pc, #392]	; (7fb4 <SendReJoinReq+0x238>)
    7e2a:	2208      	movs	r2, #8
    7e2c:	0018      	movs	r0, r3
    7e2e:	4b60      	ldr	r3, [pc, #384]	; (7fb0 <SendReJoinReq+0x234>)
    7e30:	4798      	blx	r3

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
    7e32:	4b61      	ldr	r3, [pc, #388]	; (7fb8 <SendReJoinReq+0x23c>)
    7e34:	0019      	movs	r1, r3
    7e36:	2009      	movs	r0, #9
    7e38:	4b60      	ldr	r3, [pc, #384]	; (7fbc <SendReJoinReq+0x240>)
    7e3a:	4798      	blx	r3
    7e3c:	1e03      	subs	r3, r0, #0
    7e3e:	d100      	bne.n	7e42 <SendReJoinReq+0xc6>
    7e40:	e09c      	b.n	7f7c <SendReJoinReq+0x200>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    7e42:	2312      	movs	r3, #18
    7e44:	e0aa      	b.n	7f9c <SendReJoinReq+0x220>
            break;
        }
        case REJOIN_REQ_0:
        case REJOIN_REQ_2:
        {
            if( joinReqType == REJOIN_REQ_0 )
    7e46:	1dfb      	adds	r3, r7, #7
    7e48:	781b      	ldrb	r3, [r3, #0]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d105      	bne.n	7e5a <SendReJoinReq+0xde>
            {
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 0;
    7e4e:	4a55      	ldr	r2, [pc, #340]	; (7fa4 <SendReJoinReq+0x228>)
    7e50:	238b      	movs	r3, #139	; 0x8b
    7e52:	005b      	lsls	r3, r3, #1
    7e54:	2100      	movs	r1, #0
    7e56:	54d1      	strb	r1, [r2, r3]
    7e58:	e004      	b.n	7e64 <SendReJoinReq+0xe8>
            }
            else
            {
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 2;
    7e5a:	4a52      	ldr	r2, [pc, #328]	; (7fa4 <SendReJoinReq+0x228>)
    7e5c:	238b      	movs	r3, #139	; 0x8b
    7e5e:	005b      	lsls	r3, r3, #1
    7e60:	2102      	movs	r1, #2
    7e62:	54d1      	strb	r1, [r2, r3]
            }

            MacCtx.NvmCtx->IsRejoinRequestPending = true;
    7e64:	4a4f      	ldr	r2, [pc, #316]	; (7fa4 <SendReJoinReq+0x228>)
    7e66:	239c      	movs	r3, #156	; 0x9c
    7e68:	00db      	lsls	r3, r3, #3
    7e6a:	58d2      	ldr	r2, [r2, r3]
    7e6c:	238e      	movs	r3, #142	; 0x8e
    7e6e:	009b      	lsls	r3, r3, #2
    7e70:	2101      	movs	r1, #1
    7e72:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
    7e74:	4a4b      	ldr	r2, [pc, #300]	; (7fa4 <SendReJoinReq+0x228>)
    7e76:	2386      	movs	r3, #134	; 0x86
    7e78:	005b      	lsls	r3, r3, #1
    7e7a:	2102      	movs	r1, #2
    7e7c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
    7e7e:	4a49      	ldr	r2, [pc, #292]	; (7fa4 <SendReJoinReq+0x228>)
    7e80:	2388      	movs	r3, #136	; 0x88
    7e82:	005b      	lsls	r3, r3, #1
    7e84:	4948      	ldr	r1, [pc, #288]	; (7fa8 <SendReJoinReq+0x22c>)
    7e86:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    7e88:	4a46      	ldr	r2, [pc, #280]	; (7fa4 <SendReJoinReq+0x228>)
    7e8a:	238a      	movs	r3, #138	; 0x8a
    7e8c:	005b      	lsls	r3, r3, #1
    7e8e:	21ff      	movs	r1, #255	; 0xff
    7e90:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
    7e92:	230c      	movs	r3, #12
    7e94:	18fb      	adds	r3, r7, r3
    7e96:	781a      	ldrb	r2, [r3, #0]
    7e98:	211f      	movs	r1, #31
    7e9a:	400a      	ands	r2, r1
    7e9c:	1c11      	adds	r1, r2, #0
    7e9e:	2240      	movs	r2, #64	; 0x40
    7ea0:	4252      	negs	r2, r2
    7ea2:	430a      	orrs	r2, r1
    7ea4:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.ReJoin0or2.MHDR.Value = macHdr.Value;
    7ea6:	230c      	movs	r3, #12
    7ea8:	18fb      	adds	r3, r7, r3
    7eaa:	7819      	ldrb	r1, [r3, #0]
    7eac:	4a3d      	ldr	r2, [pc, #244]	; (7fa4 <SendReJoinReq+0x228>)
    7eae:	2316      	movs	r3, #22
    7eb0:	33ff      	adds	r3, #255	; 0xff
    7eb2:	54d1      	strb	r1, [r2, r3]

            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = MacCtx.NvmCtx->NetID & 0xFF;
    7eb4:	4a3b      	ldr	r2, [pc, #236]	; (7fa4 <SendReJoinReq+0x228>)
    7eb6:	239c      	movs	r3, #156	; 0x9c
    7eb8:	00db      	lsls	r3, r3, #3
    7eba:	58d3      	ldr	r3, [r2, r3]
    7ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ebe:	b2d9      	uxtb	r1, r3
    7ec0:	4a38      	ldr	r2, [pc, #224]	; (7fa4 <SendReJoinReq+0x228>)
    7ec2:	2318      	movs	r3, #24
    7ec4:	33ff      	adds	r3, #255	; 0xff
    7ec6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( MacCtx.NvmCtx->NetID >> 8 ) & 0xFF;
    7ec8:	4a36      	ldr	r2, [pc, #216]	; (7fa4 <SendReJoinReq+0x228>)
    7eca:	239c      	movs	r3, #156	; 0x9c
    7ecc:	00db      	lsls	r3, r3, #3
    7ece:	58d3      	ldr	r3, [r2, r3]
    7ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ed2:	0a1b      	lsrs	r3, r3, #8
    7ed4:	b2d9      	uxtb	r1, r3
    7ed6:	4a33      	ldr	r2, [pc, #204]	; (7fa4 <SendReJoinReq+0x228>)
    7ed8:	238c      	movs	r3, #140	; 0x8c
    7eda:	005b      	lsls	r3, r3, #1
    7edc:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( MacCtx.NvmCtx->NetID >> 16 ) & 0xFF;
    7ede:	4a31      	ldr	r2, [pc, #196]	; (7fa4 <SendReJoinReq+0x228>)
    7ee0:	239c      	movs	r3, #156	; 0x9c
    7ee2:	00db      	lsls	r3, r3, #3
    7ee4:	58d3      	ldr	r3, [r2, r3]
    7ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ee8:	0c1b      	lsrs	r3, r3, #16
    7eea:	b2d9      	uxtb	r1, r3
    7eec:	4a2d      	ldr	r2, [pc, #180]	; (7fa4 <SendReJoinReq+0x228>)
    7eee:	231a      	movs	r3, #26
    7ef0:	33ff      	adds	r3, #255	; 0xff
    7ef2:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    7ef4:	4b2b      	ldr	r3, [pc, #172]	; (7fa4 <SendReJoinReq+0x228>)
    7ef6:	6819      	ldr	r1, [r3, #0]
    7ef8:	4b31      	ldr	r3, [pc, #196]	; (7fc0 <SendReJoinReq+0x244>)
    7efa:	2208      	movs	r2, #8
    7efc:	0018      	movs	r0, r3
    7efe:	4b2c      	ldr	r3, [pc, #176]	; (7fb0 <SendReJoinReq+0x234>)
    7f00:	4798      	blx	r3

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
    7f02:	4b30      	ldr	r3, [pc, #192]	; (7fc4 <SendReJoinReq+0x248>)
    7f04:	0019      	movs	r1, r3
    7f06:	2008      	movs	r0, #8
    7f08:	4b2c      	ldr	r3, [pc, #176]	; (7fbc <SendReJoinReq+0x240>)
    7f0a:	4798      	blx	r3
    7f0c:	1e03      	subs	r3, r0, #0
    7f0e:	d037      	beq.n	7f80 <SendReJoinReq+0x204>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    7f10:	2312      	movs	r3, #18
    7f12:	e043      	b.n	7f9c <SendReJoinReq+0x220>

            break;
        }
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
    7f14:	4a23      	ldr	r2, [pc, #140]	; (7fa4 <SendReJoinReq+0x228>)
    7f16:	2386      	movs	r3, #134	; 0x86
    7f18:	005b      	lsls	r3, r3, #1
    7f1a:	2100      	movs	r1, #0
    7f1c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
    7f1e:	4a21      	ldr	r2, [pc, #132]	; (7fa4 <SendReJoinReq+0x228>)
    7f20:	2388      	movs	r3, #136	; 0x88
    7f22:	005b      	lsls	r3, r3, #1
    7f24:	4920      	ldr	r1, [pc, #128]	; (7fa8 <SendReJoinReq+0x22c>)
    7f26:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    7f28:	4a1e      	ldr	r2, [pc, #120]	; (7fa4 <SendReJoinReq+0x228>)
    7f2a:	238a      	movs	r3, #138	; 0x8a
    7f2c:	005b      	lsls	r3, r3, #1
    7f2e:	21ff      	movs	r1, #255	; 0xff
    7f30:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
    7f32:	230c      	movs	r3, #12
    7f34:	18fb      	adds	r3, r7, r3
    7f36:	781a      	ldrb	r2, [r3, #0]
    7f38:	211f      	movs	r1, #31
    7f3a:	400a      	ands	r2, r1
    7f3c:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
    7f3e:	230c      	movs	r3, #12
    7f40:	18fb      	adds	r3, r7, r3
    7f42:	7819      	ldrb	r1, [r3, #0]
    7f44:	4a17      	ldr	r2, [pc, #92]	; (7fa4 <SendReJoinReq+0x228>)
    7f46:	2316      	movs	r3, #22
    7f48:	33ff      	adds	r3, #255	; 0xff
    7f4a:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
    7f4c:	4b15      	ldr	r3, [pc, #84]	; (7fa4 <SendReJoinReq+0x228>)
    7f4e:	6859      	ldr	r1, [r3, #4]
    7f50:	4b1d      	ldr	r3, [pc, #116]	; (7fc8 <SendReJoinReq+0x24c>)
    7f52:	2208      	movs	r2, #8
    7f54:	0018      	movs	r0, r3
    7f56:	4b16      	ldr	r3, [pc, #88]	; (7fb0 <SendReJoinReq+0x234>)
    7f58:	4798      	blx	r3
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
    7f5a:	4b12      	ldr	r3, [pc, #72]	; (7fa4 <SendReJoinReq+0x228>)
    7f5c:	6819      	ldr	r1, [r3, #0]
    7f5e:	4b1b      	ldr	r3, [pc, #108]	; (7fcc <SendReJoinReq+0x250>)
    7f60:	2208      	movs	r2, #8
    7f62:	0018      	movs	r0, r3
    7f64:	4b12      	ldr	r3, [pc, #72]	; (7fb0 <SendReJoinReq+0x234>)
    7f66:	4798      	blx	r3

            allowDelayedTx = false;
    7f68:	230f      	movs	r3, #15
    7f6a:	18fb      	adds	r3, r7, r3
    7f6c:	2200      	movs	r2, #0
    7f6e:	701a      	strb	r2, [r3, #0]

            break;
    7f70:	e007      	b.n	7f82 <SendReJoinReq+0x206>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    7f72:	230e      	movs	r3, #14
    7f74:	18fb      	adds	r3, r7, r3
    7f76:	2202      	movs	r2, #2
    7f78:	701a      	strb	r2, [r3, #0]
            break;
    7f7a:	e002      	b.n	7f82 <SendReJoinReq+0x206>
            break;
    7f7c:	46c0      	nop			; (mov r8, r8)
    7f7e:	e000      	b.n	7f82 <SendReJoinReq+0x206>
            break;
    7f80:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
    7f82:	230e      	movs	r3, #14
    7f84:	18fc      	adds	r4, r7, r3
    7f86:	230f      	movs	r3, #15
    7f88:	18fb      	adds	r3, r7, r3
    7f8a:	781b      	ldrb	r3, [r3, #0]
    7f8c:	0018      	movs	r0, r3
    7f8e:	4b10      	ldr	r3, [pc, #64]	; (7fd0 <SendReJoinReq+0x254>)
    7f90:	4798      	blx	r3
    7f92:	0003      	movs	r3, r0
    7f94:	7023      	strb	r3, [r4, #0]
    return status;
    7f96:	230e      	movs	r3, #14
    7f98:	18fb      	adds	r3, r7, r3
    7f9a:	781b      	ldrb	r3, [r3, #0]
}
    7f9c:	0018      	movs	r0, r3
    7f9e:	46bd      	mov	sp, r7
    7fa0:	b005      	add	sp, #20
    7fa2:	bd90      	pop	{r4, r7, pc}
    7fa4:	20000b78 	.word	0x20000b78
    7fa8:	20000b82 	.word	0x20000b82
    7fac:	20000c8f 	.word	0x20000c8f
    7fb0:	00002955 	.word	0x00002955
    7fb4:	20000c97 	.word	0x20000c97
    7fb8:	20000ca0 	.word	0x20000ca0
    7fbc:	0000e3c1 	.word	0x0000e3c1
    7fc0:	20000c92 	.word	0x20000c92
    7fc4:	20000c9a 	.word	0x20000c9a
    7fc8:	20000c8e 	.word	0x20000c8e
    7fcc:	20000c96 	.word	0x20000c96
    7fd0:	00007fd5 	.word	0x00007fd5

00007fd4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
    7fd4:	b5b0      	push	{r4, r5, r7, lr}
    7fd6:	b08a      	sub	sp, #40	; 0x28
    7fd8:	af02      	add	r7, sp, #8
    7fda:	0002      	movs	r2, r0
    7fdc:	1dfb      	adds	r3, r7, #7
    7fde:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    7fe0:	231f      	movs	r3, #31
    7fe2:	18fb      	adds	r3, r7, r3
    7fe4:	2203      	movs	r2, #3
    7fe6:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
    7fe8:	2300      	movs	r3, #0
    7fea:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
    7fec:	2300      	movs	r3, #0
    7fee:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
    7ff0:	4ab4      	ldr	r2, [pc, #720]	; (82c4 <ScheduleTx+0x2f0>)
    7ff2:	239c      	movs	r3, #156	; 0x9c
    7ff4:	00db      	lsls	r3, r3, #3
    7ff6:	58d2      	ldr	r2, [r2, r3]
    7ff8:	238a      	movs	r3, #138	; 0x8a
    7ffa:	005b      	lsls	r3, r3, #1
    7ffc:	5cd3      	ldrb	r3, [r2, r3]
    7ffe:	0018      	movs	r0, r3
    8000:	4bb1      	ldr	r3, [pc, #708]	; (82c8 <ScheduleTx+0x2f4>)
    8002:	4798      	blx	r3

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
    8004:	4aaf      	ldr	r2, [pc, #700]	; (82c4 <ScheduleTx+0x2f0>)
    8006:	23d1      	movs	r3, #209	; 0xd1
    8008:	009b      	lsls	r3, r3, #2
    800a:	58d2      	ldr	r2, [r2, r3]
    800c:	230c      	movs	r3, #12
    800e:	18fb      	adds	r3, r7, r3
    8010:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8012:	4aac      	ldr	r2, [pc, #688]	; (82c4 <ScheduleTx+0x2f0>)
    8014:	239c      	movs	r3, #156	; 0x9c
    8016:	00db      	lsls	r3, r3, #3
    8018:	58d3      	ldr	r3, [r2, r3]
    801a:	22d5      	movs	r2, #213	; 0xd5
    801c:	569a      	ldrsb	r2, [r3, r2]
    801e:	230c      	movs	r3, #12
    8020:	18fb      	adds	r3, r7, r3
    8022:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    8024:	4aa7      	ldr	r2, [pc, #668]	; (82c4 <ScheduleTx+0x2f0>)
    8026:	239c      	movs	r3, #156	; 0x9c
    8028:	00db      	lsls	r3, r3, #3
    802a:	58d2      	ldr	r2, [r2, r3]
    802c:	2389      	movs	r3, #137	; 0x89
    802e:	005b      	lsls	r3, r3, #1
    8030:	5cd2      	ldrb	r2, [r2, r3]
    8032:	230c      	movs	r3, #12
    8034:	18fb      	adds	r3, r7, r3
    8036:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    8038:	4aa2      	ldr	r2, [pc, #648]	; (82c4 <ScheduleTx+0x2f0>)
    803a:	239c      	movs	r3, #156	; 0x9c
    803c:	00db      	lsls	r3, r3, #3
    803e:	58d2      	ldr	r2, [r2, r3]
    8040:	2388      	movs	r3, #136	; 0x88
    8042:	009b      	lsls	r3, r3, #2
    8044:	5cd3      	ldrb	r3, [r2, r3]
    8046:	2b00      	cmp	r3, #0
    8048:	d104      	bne.n	8054 <ScheduleTx+0x80>
    {
        nextChan.Joined = false;
    804a:	230c      	movs	r3, #12
    804c:	18fb      	adds	r3, r7, r3
    804e:	2200      	movs	r2, #0
    8050:	725a      	strb	r2, [r3, #9]
    8052:	e003      	b.n	805c <ScheduleTx+0x88>
    }
    else
    {
        nextChan.Joined = true;
    8054:	230c      	movs	r3, #12
    8056:	18fb      	adds	r3, r7, r3
    8058:	2201      	movs	r2, #1
    805a:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
    805c:	4a99      	ldr	r2, [pc, #612]	; (82c4 <ScheduleTx+0x2f0>)
    805e:	23d0      	movs	r3, #208	; 0xd0
    8060:	009b      	lsls	r3, r3, #2
    8062:	58d2      	ldr	r2, [r2, r3]
    8064:	230c      	movs	r3, #12
    8066:	18fb      	adds	r3, r7, r3
    8068:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
    806a:	4a96      	ldr	r2, [pc, #600]	; (82c4 <ScheduleTx+0x2f0>)
    806c:	239c      	movs	r3, #156	; 0x9c
    806e:	00db      	lsls	r3, r3, #3
    8070:	58d3      	ldr	r3, [r2, r3]
    8072:	7818      	ldrb	r0, [r3, #0]
    8074:	4a93      	ldr	r2, [pc, #588]	; (82c4 <ScheduleTx+0x2f0>)
    8076:	239c      	movs	r3, #156	; 0x9c
    8078:	00db      	lsls	r3, r3, #3
    807a:	58d3      	ldr	r3, [r2, r3]
    807c:	3314      	adds	r3, #20
    807e:	33ff      	adds	r3, #255	; 0xff
    8080:	001a      	movs	r2, r3
    8082:	231f      	movs	r3, #31
    8084:	18fc      	adds	r4, r7, r3
    8086:	2318      	movs	r3, #24
    8088:	18fd      	adds	r5, r7, r3
    808a:	230c      	movs	r3, #12
    808c:	18f9      	adds	r1, r7, r3
    808e:	4b8f      	ldr	r3, [pc, #572]	; (82cc <ScheduleTx+0x2f8>)
    8090:	9300      	str	r3, [sp, #0]
    8092:	002b      	movs	r3, r5
    8094:	4d8e      	ldr	r5, [pc, #568]	; (82d0 <ScheduleTx+0x2fc>)
    8096:	47a8      	blx	r5
    8098:	0003      	movs	r3, r0
    809a:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
    809c:	231f      	movs	r3, #31
    809e:	18fb      	adds	r3, r7, r3
    80a0:	781b      	ldrb	r3, [r3, #0]
    80a2:	2b00      	cmp	r3, #0
    80a4:	d026      	beq.n	80f4 <ScheduleTx+0x120>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
    80a6:	231f      	movs	r3, #31
    80a8:	18fb      	adds	r3, r7, r3
    80aa:	781b      	ldrb	r3, [r3, #0]
    80ac:	2b0b      	cmp	r3, #11
    80ae:	d11d      	bne.n	80ec <ScheduleTx+0x118>
    80b0:	1dfb      	adds	r3, r7, #7
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	2b00      	cmp	r3, #0
    80b6:	d019      	beq.n	80ec <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
    80b8:	69bb      	ldr	r3, [r7, #24]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d014      	beq.n	80e8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
    80be:	4a81      	ldr	r2, [pc, #516]	; (82c4 <ScheduleTx+0x2f0>)
    80c0:	23d6      	movs	r3, #214	; 0xd6
    80c2:	009b      	lsls	r3, r3, #2
    80c4:	58d3      	ldr	r3, [r2, r3]
    80c6:	2220      	movs	r2, #32
    80c8:	431a      	orrs	r2, r3
    80ca:	0011      	movs	r1, r2
    80cc:	4a7d      	ldr	r2, [pc, #500]	; (82c4 <ScheduleTx+0x2f0>)
    80ce:	23d6      	movs	r3, #214	; 0xd6
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
    80d4:	69ba      	ldr	r2, [r7, #24]
    80d6:	4b7f      	ldr	r3, [pc, #508]	; (82d4 <ScheduleTx+0x300>)
    80d8:	0011      	movs	r1, r2
    80da:	0018      	movs	r0, r3
    80dc:	4b7e      	ldr	r3, [pc, #504]	; (82d8 <ScheduleTx+0x304>)
    80de:	4798      	blx	r3
                TimerStart( &MacCtx.TxDelayedTimer );
    80e0:	4b7c      	ldr	r3, [pc, #496]	; (82d4 <ScheduleTx+0x300>)
    80e2:	0018      	movs	r0, r3
    80e4:	4b7d      	ldr	r3, [pc, #500]	; (82dc <ScheduleTx+0x308>)
    80e6:	4798      	blx	r3
            }
            return LORAMAC_STATUS_OK;
    80e8:	2300      	movs	r3, #0
    80ea:	e0e6      	b.n	82ba <ScheduleTx+0x2e6>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
    80ec:	231f      	movs	r3, #31
    80ee:	18fb      	adds	r3, r7, r3
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	e0e2      	b.n	82ba <ScheduleTx+0x2e6>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    80f4:	4a73      	ldr	r2, [pc, #460]	; (82c4 <ScheduleTx+0x2f0>)
    80f6:	239c      	movs	r3, #156	; 0x9c
    80f8:	00db      	lsls	r3, r3, #3
    80fa:	58d3      	ldr	r3, [r2, r3]
    80fc:	781d      	ldrb	r5, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
    80fe:	4a71      	ldr	r2, [pc, #452]	; (82c4 <ScheduleTx+0x2f0>)
    8100:	239c      	movs	r3, #156	; 0x9c
    8102:	00db      	lsls	r3, r3, #3
    8104:	58d3      	ldr	r3, [r2, r3]
    8106:	7818      	ldrb	r0, [r3, #0]
    8108:	4a6e      	ldr	r2, [pc, #440]	; (82c4 <ScheduleTx+0x2f0>)
    810a:	239c      	movs	r3, #156	; 0x9c
    810c:	00db      	lsls	r3, r3, #3
    810e:	58d2      	ldr	r2, [r2, r3]
    8110:	2302      	movs	r3, #2
    8112:	33ff      	adds	r3, #255	; 0xff
    8114:	5cd1      	ldrb	r1, [r2, r3]
    8116:	4a6b      	ldr	r2, [pc, #428]	; (82c4 <ScheduleTx+0x2f0>)
    8118:	239c      	movs	r3, #156	; 0x9c
    811a:	00db      	lsls	r3, r3, #3
    811c:	58d3      	ldr	r3, [r2, r3]
    811e:	22d5      	movs	r2, #213	; 0xd5
    8120:	569c      	ldrsb	r4, [r3, r2]
    8122:	4a68      	ldr	r2, [pc, #416]	; (82c4 <ScheduleTx+0x2f0>)
    8124:	239c      	movs	r3, #156	; 0x9c
    8126:	00db      	lsls	r3, r3, #3
    8128:	58d3      	ldr	r3, [r2, r3]
    812a:	22f5      	movs	r2, #245	; 0xf5
    812c:	5c9b      	ldrb	r3, [r3, r2]
    812e:	b25b      	sxtb	r3, r3
    8130:	0022      	movs	r2, r4
    8132:	4c6b      	ldr	r4, [pc, #428]	; (82e0 <ScheduleTx+0x30c>)
    8134:	47a0      	blx	r4
    8136:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    8138:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    813a:	4a62      	ldr	r2, [pc, #392]	; (82c4 <ScheduleTx+0x2f0>)
    813c:	239c      	movs	r3, #156	; 0x9c
    813e:	00db      	lsls	r3, r3, #3
    8140:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    8142:	22dc      	movs	r2, #220	; 0xdc
    8144:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    8146:	4a5f      	ldr	r2, [pc, #380]	; (82c4 <ScheduleTx+0x2f0>)
    8148:	239c      	movs	r3, #156	; 0x9c
    814a:	00db      	lsls	r3, r3, #3
    814c:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    814e:	22d8      	movs	r2, #216	; 0xd8
    8150:	589a      	ldr	r2, [r3, r2]
    8152:	4b64      	ldr	r3, [pc, #400]	; (82e4 <ScheduleTx+0x310>)
    8154:	9300      	str	r3, [sp, #0]
    8156:	0013      	movs	r3, r2
    8158:	0002      	movs	r2, r0
    815a:	0028      	movs	r0, r5
    815c:	4c62      	ldr	r4, [pc, #392]	; (82e8 <ScheduleTx+0x314>)
    815e:	47a0      	blx	r4
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    8160:	4a58      	ldr	r2, [pc, #352]	; (82c4 <ScheduleTx+0x2f0>)
    8162:	239c      	movs	r3, #156	; 0x9c
    8164:	00db      	lsls	r3, r3, #3
    8166:	58d3      	ldr	r3, [r2, r3]
    8168:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    816a:	4a56      	ldr	r2, [pc, #344]	; (82c4 <ScheduleTx+0x2f0>)
    816c:	239c      	movs	r3, #156	; 0x9c
    816e:	00db      	lsls	r3, r3, #3
    8170:	58d3      	ldr	r3, [r2, r3]
    8172:	22fc      	movs	r2, #252	; 0xfc
    8174:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    8176:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    8178:	4a52      	ldr	r2, [pc, #328]	; (82c4 <ScheduleTx+0x2f0>)
    817a:	239c      	movs	r3, #156	; 0x9c
    817c:	00db      	lsls	r3, r3, #3
    817e:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    8180:	22dc      	movs	r2, #220	; 0xdc
    8182:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    8184:	4a4f      	ldr	r2, [pc, #316]	; (82c4 <ScheduleTx+0x2f0>)
    8186:	239c      	movs	r3, #156	; 0x9c
    8188:	00db      	lsls	r3, r3, #3
    818a:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    818c:	22d8      	movs	r2, #216	; 0xd8
    818e:	589a      	ldr	r2, [r3, r2]
    8190:	4b56      	ldr	r3, [pc, #344]	; (82ec <ScheduleTx+0x318>)
    8192:	9300      	str	r3, [sp, #0]
    8194:	0013      	movs	r3, r2
    8196:	0022      	movs	r2, r4
    8198:	4c53      	ldr	r4, [pc, #332]	; (82e8 <ScheduleTx+0x314>)
    819a:	47a0      	blx	r4
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    819c:	4a49      	ldr	r2, [pc, #292]	; (82c4 <ScheduleTx+0x2f0>)
    819e:	239c      	movs	r3, #156	; 0x9c
    81a0:	00db      	lsls	r3, r3, #3
    81a2:	58d2      	ldr	r2, [r2, r3]
    81a4:	2388      	movs	r3, #136	; 0x88
    81a6:	009b      	lsls	r3, r3, #2
    81a8:	5cd3      	ldrb	r3, [r2, r3]
    81aa:	2b00      	cmp	r3, #0
    81ac:	d11e      	bne.n	81ec <ScheduleTx+0x218>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    81ae:	4a45      	ldr	r2, [pc, #276]	; (82c4 <ScheduleTx+0x2f0>)
    81b0:	239c      	movs	r3, #156	; 0x9c
    81b2:	00db      	lsls	r3, r3, #3
    81b4:	58d3      	ldr	r3, [r2, r3]
    81b6:	22ec      	movs	r2, #236	; 0xec
    81b8:	589b      	ldr	r3, [r3, r2]
    81ba:	4942      	ldr	r1, [pc, #264]	; (82c4 <ScheduleTx+0x2f0>)
    81bc:	22f7      	movs	r2, #247	; 0xf7
    81be:	0092      	lsls	r2, r2, #2
    81c0:	588a      	ldr	r2, [r1, r2]
    81c2:	1899      	adds	r1, r3, r2
    81c4:	4a3f      	ldr	r2, [pc, #252]	; (82c4 <ScheduleTx+0x2f0>)
    81c6:	23f2      	movs	r3, #242	; 0xf2
    81c8:	009b      	lsls	r3, r3, #2
    81ca:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    81cc:	4a3d      	ldr	r2, [pc, #244]	; (82c4 <ScheduleTx+0x2f0>)
    81ce:	239c      	movs	r3, #156	; 0x9c
    81d0:	00db      	lsls	r3, r3, #3
    81d2:	58d3      	ldr	r3, [r2, r3]
    81d4:	22f0      	movs	r2, #240	; 0xf0
    81d6:	589b      	ldr	r3, [r3, r2]
    81d8:	493a      	ldr	r1, [pc, #232]	; (82c4 <ScheduleTx+0x2f0>)
    81da:	22fc      	movs	r2, #252	; 0xfc
    81dc:	0092      	lsls	r2, r2, #2
    81de:	588a      	ldr	r2, [r1, r2]
    81e0:	1899      	adds	r1, r3, r2
    81e2:	4a38      	ldr	r2, [pc, #224]	; (82c4 <ScheduleTx+0x2f0>)
    81e4:	23f3      	movs	r3, #243	; 0xf3
    81e6:	009b      	lsls	r3, r3, #2
    81e8:	50d1      	str	r1, [r2, r3]
    81ea:	e03d      	b.n	8268 <ScheduleTx+0x294>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    81ec:	2308      	movs	r3, #8
    81ee:	18fb      	adds	r3, r7, r3
    81f0:	0018      	movs	r0, r3
    81f2:	4b3f      	ldr	r3, [pc, #252]	; (82f0 <ScheduleTx+0x31c>)
    81f4:	4798      	blx	r3
    81f6:	1e03      	subs	r3, r0, #0
    81f8:	d001      	beq.n	81fe <ScheduleTx+0x22a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    81fa:	2313      	movs	r3, #19
    81fc:	e05d      	b.n	82ba <ScheduleTx+0x2e6>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
    81fe:	4b31      	ldr	r3, [pc, #196]	; (82c4 <ScheduleTx+0x2f0>)
    8200:	4a3c      	ldr	r2, [pc, #240]	; (82f4 <ScheduleTx+0x320>)
    8202:	5c98      	ldrb	r0, [r3, r2]
    8204:	4a2f      	ldr	r2, [pc, #188]	; (82c4 <ScheduleTx+0x2f0>)
    8206:	239c      	movs	r3, #156	; 0x9c
    8208:	00db      	lsls	r3, r3, #3
    820a:	58d3      	ldr	r3, [r2, r3]
    820c:	22d5      	movs	r2, #213	; 0xd5
    820e:	569b      	ldrsb	r3, [r3, r2]
    8210:	68ba      	ldr	r2, [r7, #8]
    8212:	b2d2      	uxtb	r2, r2
    8214:	0019      	movs	r1, r3
    8216:	4b38      	ldr	r3, [pc, #224]	; (82f8 <ScheduleTx+0x324>)
    8218:	4798      	blx	r3
    821a:	0003      	movs	r3, r0
    821c:	001a      	movs	r2, r3
    821e:	2301      	movs	r3, #1
    8220:	4053      	eors	r3, r2
    8222:	b2db      	uxtb	r3, r3
    8224:	2b00      	cmp	r3, #0
    8226:	d001      	beq.n	822c <ScheduleTx+0x258>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
    8228:	2308      	movs	r3, #8
    822a:	e046      	b.n	82ba <ScheduleTx+0x2e6>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
    822c:	4a25      	ldr	r2, [pc, #148]	; (82c4 <ScheduleTx+0x2f0>)
    822e:	239c      	movs	r3, #156	; 0x9c
    8230:	00db      	lsls	r3, r3, #3
    8232:	58d3      	ldr	r3, [r2, r3]
    8234:	22e4      	movs	r2, #228	; 0xe4
    8236:	589b      	ldr	r3, [r3, r2]
    8238:	4922      	ldr	r1, [pc, #136]	; (82c4 <ScheduleTx+0x2f0>)
    823a:	22f7      	movs	r2, #247	; 0xf7
    823c:	0092      	lsls	r2, r2, #2
    823e:	588a      	ldr	r2, [r1, r2]
    8240:	1899      	adds	r1, r3, r2
    8242:	4a20      	ldr	r2, [pc, #128]	; (82c4 <ScheduleTx+0x2f0>)
    8244:	23f2      	movs	r3, #242	; 0xf2
    8246:	009b      	lsls	r3, r3, #2
    8248:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
    824a:	4a1e      	ldr	r2, [pc, #120]	; (82c4 <ScheduleTx+0x2f0>)
    824c:	239c      	movs	r3, #156	; 0x9c
    824e:	00db      	lsls	r3, r3, #3
    8250:	58d3      	ldr	r3, [r2, r3]
    8252:	22e8      	movs	r2, #232	; 0xe8
    8254:	589b      	ldr	r3, [r3, r2]
    8256:	491b      	ldr	r1, [pc, #108]	; (82c4 <ScheduleTx+0x2f0>)
    8258:	22fc      	movs	r2, #252	; 0xfc
    825a:	0092      	lsls	r2, r2, #2
    825c:	588a      	ldr	r2, [r1, r2]
    825e:	1899      	adds	r1, r3, r2
    8260:	4a18      	ldr	r2, [pc, #96]	; (82c4 <ScheduleTx+0x2f0>)
    8262:	23f3      	movs	r3, #243	; 0xf3
    8264:	009b      	lsls	r3, r3, #2
    8266:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
    8268:	4a16      	ldr	r2, [pc, #88]	; (82c4 <ScheduleTx+0x2f0>)
    826a:	239c      	movs	r3, #156	; 0x9c
    826c:	00db      	lsls	r3, r3, #3
    826e:	58d3      	ldr	r3, [r2, r3]
    8270:	22d5      	movs	r2, #213	; 0xd5
    8272:	569b      	ldrsb	r3, [r3, r2]
    8274:	b2d8      	uxtb	r0, r3
    8276:	4a13      	ldr	r2, [pc, #76]	; (82c4 <ScheduleTx+0x2f0>)
    8278:	239c      	movs	r3, #156	; 0x9c
    827a:	00db      	lsls	r3, r3, #3
    827c:	58d2      	ldr	r2, [r2, r3]
    827e:	2314      	movs	r3, #20
    8280:	33ff      	adds	r3, #255	; 0xff
    8282:	5cd3      	ldrb	r3, [r2, r3]
    8284:	221e      	movs	r2, #30
    8286:	18bc      	adds	r4, r7, r2
    8288:	0019      	movs	r1, r3
    828a:	4b1c      	ldr	r3, [pc, #112]	; (82fc <ScheduleTx+0x328>)
    828c:	4798      	blx	r3
    828e:	0003      	movs	r3, r0
    8290:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
    8292:	231e      	movs	r3, #30
    8294:	18fb      	adds	r3, r7, r3
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b00      	cmp	r3, #0
    829a:	d003      	beq.n	82a4 <ScheduleTx+0x2d0>
    {
        return retval;
    829c:	231e      	movs	r3, #30
    829e:	18fb      	adds	r3, r7, r3
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	e00a      	b.n	82ba <ScheduleTx+0x2e6>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
    82a4:	4a07      	ldr	r2, [pc, #28]	; (82c4 <ScheduleTx+0x2f0>)
    82a6:	239c      	movs	r3, #156	; 0x9c
    82a8:	00db      	lsls	r3, r3, #3
    82aa:	58d2      	ldr	r2, [r2, r3]
    82ac:	2314      	movs	r3, #20
    82ae:	33ff      	adds	r3, #255	; 0xff
    82b0:	5cd3      	ldrb	r3, [r2, r3]
    82b2:	0018      	movs	r0, r3
    82b4:	4b12      	ldr	r3, [pc, #72]	; (8300 <ScheduleTx+0x32c>)
    82b6:	4798      	blx	r3
    82b8:	0003      	movs	r3, r0
}
    82ba:	0018      	movs	r0, r3
    82bc:	46bd      	mov	sp, r7
    82be:	b008      	add	sp, #32
    82c0:	bdb0      	pop	{r4, r5, r7, pc}
    82c2:	46c0      	nop			; (mov r8, r8)
    82c4:	20000b78 	.word	0x20000b78
    82c8:	00008441 	.word	0x00008441
    82cc:	20000ebc 	.word	0x20000ebc
    82d0:	0000f3b5 	.word	0x0000f3b5
    82d4:	20000ef8 	.word	0x20000ef8
    82d8:	00016389 	.word	0x00016389
    82dc:	00015fc1 	.word	0x00015fc1
    82e0:	0000f421 	.word	0x0000f421
    82e4:	20000f48 	.word	0x20000f48
    82e8:	0000f171 	.word	0x0000f171
    82ec:	20000f5c 	.word	0x20000f5c
    82f0:	0000bf11 	.word	0x0000bf11
    82f4:	0000023f 	.word	0x0000023f
    82f8:	000069e5 	.word	0x000069e5
    82fc:	00008305 	.word	0x00008305
    8300:	00008ac9 	.word	0x00008ac9

00008304 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
    8304:	b5b0      	push	{r4, r5, r7, lr}
    8306:	b084      	sub	sp, #16
    8308:	af00      	add	r7, sp, #0
    830a:	0002      	movs	r2, r0
    830c:	1dfb      	adds	r3, r7, #7
    830e:	701a      	strb	r2, [r3, #0]
    8310:	1dbb      	adds	r3, r7, #6
    8312:	1c0a      	adds	r2, r1, #0
    8314:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
    8316:	230f      	movs	r3, #15
    8318:	18fb      	adds	r3, r7, r3
    831a:	2210      	movs	r2, #16
    831c:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
    831e:	2300      	movs	r3, #0
    8320:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
    8322:	4a40      	ldr	r2, [pc, #256]	; (8424 <SecureFrame+0x120>)
    8324:	2386      	movs	r3, #134	; 0x86
    8326:	005b      	lsls	r3, r3, #1
    8328:	5cd3      	ldrb	r3, [r2, r3]
    832a:	2b01      	cmp	r3, #1
    832c:	d01f      	beq.n	836e <SecureFrame+0x6a>
    832e:	dc02      	bgt.n	8336 <SecureFrame+0x32>
    8330:	2b00      	cmp	r3, #0
    8332:	d005      	beq.n	8340 <SecureFrame+0x3c>
    8334:	e06e      	b.n	8414 <SecureFrame+0x110>
    8336:	2b02      	cmp	r3, #2
    8338:	d030      	beq.n	839c <SecureFrame+0x98>
    833a:	2b04      	cmp	r3, #4
    833c:	d045      	beq.n	83ca <SecureFrame+0xc6>
    833e:	e069      	b.n	8414 <SecureFrame+0x110>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
    8340:	230f      	movs	r3, #15
    8342:	18fc      	adds	r4, r7, r3
    8344:	4b38      	ldr	r3, [pc, #224]	; (8428 <SecureFrame+0x124>)
    8346:	0018      	movs	r0, r3
    8348:	4b38      	ldr	r3, [pc, #224]	; (842c <SecureFrame+0x128>)
    834a:	4798      	blx	r3
    834c:	0003      	movs	r3, r0
    834e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    8350:	230f      	movs	r3, #15
    8352:	18fb      	adds	r3, r7, r3
    8354:	781b      	ldrb	r3, [r3, #0]
    8356:	2b00      	cmp	r3, #0
    8358:	d001      	beq.n	835e <SecureFrame+0x5a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    835a:	2311      	movs	r3, #17
    835c:	e05d      	b.n	841a <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
    835e:	4a31      	ldr	r2, [pc, #196]	; (8424 <SecureFrame+0x120>)
    8360:	238a      	movs	r3, #138	; 0x8a
    8362:	005b      	lsls	r3, r3, #1
    8364:	5cd3      	ldrb	r3, [r2, r3]
    8366:	b29a      	uxth	r2, r3
    8368:	4b2e      	ldr	r3, [pc, #184]	; (8424 <SecureFrame+0x120>)
    836a:	811a      	strh	r2, [r3, #8]
            break;
    836c:	e054      	b.n	8418 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_RE_JOIN_1:
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
    836e:	230f      	movs	r3, #15
    8370:	18fc      	adds	r4, r7, r3
    8372:	4b2d      	ldr	r3, [pc, #180]	; (8428 <SecureFrame+0x124>)
    8374:	0018      	movs	r0, r3
    8376:	4b2e      	ldr	r3, [pc, #184]	; (8430 <SecureFrame+0x12c>)
    8378:	4798      	blx	r3
    837a:	0003      	movs	r3, r0
    837c:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    837e:	230f      	movs	r3, #15
    8380:	18fb      	adds	r3, r7, r3
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	2b00      	cmp	r3, #0
    8386:	d001      	beq.n	838c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    8388:	2311      	movs	r3, #17
    838a:	e046      	b.n	841a <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
    838c:	4a25      	ldr	r2, [pc, #148]	; (8424 <SecureFrame+0x120>)
    838e:	238a      	movs	r3, #138	; 0x8a
    8390:	005b      	lsls	r3, r3, #1
    8392:	5cd3      	ldrb	r3, [r2, r3]
    8394:	b29a      	uxth	r2, r3
    8396:	4b23      	ldr	r3, [pc, #140]	; (8424 <SecureFrame+0x120>)
    8398:	811a      	strh	r2, [r3, #8]
            break;
    839a:	e03d      	b.n	8418 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_RE_JOIN_0_2:
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
    839c:	230f      	movs	r3, #15
    839e:	18fc      	adds	r4, r7, r3
    83a0:	4b21      	ldr	r3, [pc, #132]	; (8428 <SecureFrame+0x124>)
    83a2:	0018      	movs	r0, r3
    83a4:	4b23      	ldr	r3, [pc, #140]	; (8434 <SecureFrame+0x130>)
    83a6:	4798      	blx	r3
    83a8:	0003      	movs	r3, r0
    83aa:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    83ac:	230f      	movs	r3, #15
    83ae:	18fb      	adds	r3, r7, r3
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	2b00      	cmp	r3, #0
    83b4:	d001      	beq.n	83ba <SecureFrame+0xb6>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    83b6:	2311      	movs	r3, #17
    83b8:	e02f      	b.n	841a <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
    83ba:	4a1a      	ldr	r2, [pc, #104]	; (8424 <SecureFrame+0x120>)
    83bc:	238a      	movs	r3, #138	; 0x8a
    83be:	005b      	lsls	r3, r3, #1
    83c0:	5cd3      	ldrb	r3, [r2, r3]
    83c2:	b29a      	uxth	r2, r3
    83c4:	4b17      	ldr	r3, [pc, #92]	; (8424 <SecureFrame+0x120>)
    83c6:	811a      	strh	r2, [r3, #8]
            break;
    83c8:	e026      	b.n	8418 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    83ca:	2308      	movs	r3, #8
    83cc:	18fb      	adds	r3, r7, r3
    83ce:	0018      	movs	r0, r3
    83d0:	4b19      	ldr	r3, [pc, #100]	; (8438 <SecureFrame+0x134>)
    83d2:	4798      	blx	r3
    83d4:	1e03      	subs	r3, r0, #0
    83d6:	d001      	beq.n	83dc <SecureFrame+0xd8>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    83d8:	2312      	movs	r3, #18
    83da:	e01e      	b.n	841a <SecureFrame+0x116>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
    83dc:	68b8      	ldr	r0, [r7, #8]
    83de:	230f      	movs	r3, #15
    83e0:	18fc      	adds	r4, r7, r3
    83e2:	4d11      	ldr	r5, [pc, #68]	; (8428 <SecureFrame+0x124>)
    83e4:	1dbb      	adds	r3, r7, #6
    83e6:	781a      	ldrb	r2, [r3, #0]
    83e8:	1dfb      	adds	r3, r7, #7
    83ea:	7819      	ldrb	r1, [r3, #0]
    83ec:	002b      	movs	r3, r5
    83ee:	4d13      	ldr	r5, [pc, #76]	; (843c <SecureFrame+0x138>)
    83f0:	47a8      	blx	r5
    83f2:	0003      	movs	r3, r0
    83f4:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
    83f6:	230f      	movs	r3, #15
    83f8:	18fb      	adds	r3, r7, r3
    83fa:	781b      	ldrb	r3, [r3, #0]
    83fc:	2b00      	cmp	r3, #0
    83fe:	d001      	beq.n	8404 <SecureFrame+0x100>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
    8400:	2311      	movs	r3, #17
    8402:	e00a      	b.n	841a <SecureFrame+0x116>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
    8404:	4a07      	ldr	r2, [pc, #28]	; (8424 <SecureFrame+0x120>)
    8406:	238a      	movs	r3, #138	; 0x8a
    8408:	005b      	lsls	r3, r3, #1
    840a:	5cd3      	ldrb	r3, [r2, r3]
    840c:	b29a      	uxth	r2, r3
    840e:	4b05      	ldr	r3, [pc, #20]	; (8424 <SecureFrame+0x120>)
    8410:	811a      	strh	r2, [r3, #8]
            break;
    8412:	e001      	b.n	8418 <SecureFrame+0x114>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
    8414:	2303      	movs	r3, #3
    8416:	e000      	b.n	841a <SecureFrame+0x116>
    }
    return LORAMAC_STATUS_OK;
    8418:	2300      	movs	r3, #0
}
    841a:	0018      	movs	r0, r3
    841c:	46bd      	mov	sp, r7
    841e:	b004      	add	sp, #16
    8420:	bdb0      	pop	{r4, r5, r7, pc}
    8422:	46c0      	nop			; (mov r8, r8)
    8424:	20000b78 	.word	0x20000b78
    8428:	20000c88 	.word	0x20000c88
    842c:	0000d4c1 	.word	0x0000d4c1
    8430:	0000d5b9 	.word	0x0000d5b9
    8434:	0000d651 	.word	0x0000d651
    8438:	0000e319 	.word	0x0000e319
    843c:	0000dc5d 	.word	0x0000dc5d

00008440 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
    8440:	b5f0      	push	{r4, r5, r6, r7, lr}
    8442:	b08d      	sub	sp, #52	; 0x34
    8444:	af02      	add	r7, sp, #8
    8446:	0002      	movs	r2, r0
    8448:	230f      	movs	r3, #15
    844a:	18fb      	adds	r3, r7, r3
    844c:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
    844e:	4a3d      	ldr	r2, [pc, #244]	; (8544 <CalculateBackOff+0x104>)
    8450:	239c      	movs	r3, #156	; 0x9c
    8452:	00db      	lsls	r3, r3, #3
    8454:	58d2      	ldr	r2, [r2, r3]
    8456:	2388      	movs	r3, #136	; 0x88
    8458:	009b      	lsls	r3, r3, #2
    845a:	5cd3      	ldrb	r3, [r2, r3]
    845c:	2b00      	cmp	r3, #0
    845e:	d104      	bne.n	846a <CalculateBackOff+0x2a>
    {
        calcBackOff.Joined = false;
    8460:	2310      	movs	r3, #16
    8462:	18fb      	adds	r3, r7, r3
    8464:	2200      	movs	r2, #0
    8466:	701a      	strb	r2, [r3, #0]
    8468:	e003      	b.n	8472 <CalculateBackOff+0x32>
    }
    else
    {
        calcBackOff.Joined = true;
    846a:	2310      	movs	r3, #16
    846c:	18fb      	adds	r3, r7, r3
    846e:	2201      	movs	r2, #1
    8470:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
    8472:	4a34      	ldr	r2, [pc, #208]	; (8544 <CalculateBackOff+0x104>)
    8474:	239c      	movs	r3, #156	; 0x9c
    8476:	00db      	lsls	r3, r3, #3
    8478:	58d2      	ldr	r2, [r2, r3]
    847a:	2389      	movs	r3, #137	; 0x89
    847c:	005b      	lsls	r3, r3, #1
    847e:	5cd2      	ldrb	r2, [r2, r3]
    8480:	2310      	movs	r3, #16
    8482:	18fb      	adds	r3, r7, r3
    8484:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
    8486:	2310      	movs	r3, #16
    8488:	18fb      	adds	r3, r7, r3
    848a:	220f      	movs	r2, #15
    848c:	18ba      	adds	r2, r7, r2
    848e:	7812      	ldrb	r2, [r2, #0]
    8490:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.InitializationTime );
    8492:	2320      	movs	r3, #32
    8494:	18fb      	adds	r3, r7, r3
    8496:	0018      	movs	r0, r3
    8498:	4b2b      	ldr	r3, [pc, #172]	; (8548 <CalculateBackOff+0x108>)
    849a:	4798      	blx	r3
    849c:	2310      	movs	r3, #16
    849e:	18fd      	adds	r5, r7, r3
    84a0:	003e      	movs	r6, r7
    84a2:	4928      	ldr	r1, [pc, #160]	; (8544 <CalculateBackOff+0x104>)
    84a4:	23d2      	movs	r3, #210	; 0xd2
    84a6:	009b      	lsls	r3, r3, #2
    84a8:	2220      	movs	r2, #32
    84aa:	18ba      	adds	r2, r7, r2
    84ac:	2404      	movs	r4, #4
    84ae:	18c8      	adds	r0, r1, r3
    84b0:	1900      	adds	r0, r0, r4
    84b2:	466c      	mov	r4, sp
    84b4:	6800      	ldr	r0, [r0, #0]
    84b6:	6020      	str	r0, [r4, #0]
    84b8:	58cb      	ldr	r3, [r1, r3]
    84ba:	6811      	ldr	r1, [r2, #0]
    84bc:	6852      	ldr	r2, [r2, #4]
    84be:	0030      	movs	r0, r6
    84c0:	4c22      	ldr	r4, [pc, #136]	; (854c <CalculateBackOff+0x10c>)
    84c2:	47a0      	blx	r4
    84c4:	003a      	movs	r2, r7
    84c6:	1d2b      	adds	r3, r5, #4
    84c8:	ca03      	ldmia	r2!, {r0, r1}
    84ca:	c303      	stmia	r3!, {r0, r1}
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
    84cc:	4a1d      	ldr	r2, [pc, #116]	; (8544 <CalculateBackOff+0x104>)
    84ce:	2382      	movs	r3, #130	; 0x82
    84d0:	00db      	lsls	r3, r3, #3
    84d2:	58d2      	ldr	r2, [r2, r3]
    84d4:	2310      	movs	r3, #16
    84d6:	18fb      	adds	r3, r7, r3
    84d8:	60da      	str	r2, [r3, #12]
    calcBackOff.LastTxIsJoinRequest = false;
    84da:	2310      	movs	r3, #16
    84dc:	18fb      	adds	r3, r7, r3
    84de:	2200      	movs	r2, #0
    84e0:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
    84e2:	4b18      	ldr	r3, [pc, #96]	; (8544 <CalculateBackOff+0x104>)
    84e4:	4a1a      	ldr	r2, [pc, #104]	; (8550 <CalculateBackOff+0x110>)
    84e6:	5c9b      	ldrb	r3, [r3, r2]
    84e8:	2204      	movs	r2, #4
    84ea:	4013      	ands	r3, r2
    84ec:	b2db      	uxtb	r3, r3
    84ee:	2b00      	cmp	r3, #0
    84f0:	d008      	beq.n	8504 <CalculateBackOff+0xc4>
    84f2:	2000      	movs	r0, #0
    84f4:	4b17      	ldr	r3, [pc, #92]	; (8554 <CalculateBackOff+0x114>)
    84f6:	4798      	blx	r3
    84f8:	1e03      	subs	r3, r0, #0
    84fa:	d003      	beq.n	8504 <CalculateBackOff+0xc4>
    {
        calcBackOff.LastTxIsJoinRequest = true;
    84fc:	2310      	movs	r3, #16
    84fe:	18fb      	adds	r3, r7, r3
    8500:	2201      	movs	r2, #1
    8502:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
    8504:	4a0f      	ldr	r2, [pc, #60]	; (8544 <CalculateBackOff+0x104>)
    8506:	239c      	movs	r3, #156	; 0x9c
    8508:	00db      	lsls	r3, r3, #3
    850a:	58d3      	ldr	r3, [r2, r3]
    850c:	781b      	ldrb	r3, [r3, #0]
    850e:	2210      	movs	r2, #16
    8510:	18ba      	adds	r2, r7, r2
    8512:	0011      	movs	r1, r2
    8514:	0018      	movs	r0, r3
    8516:	4b10      	ldr	r3, [pc, #64]	; (8558 <CalculateBackOff+0x118>)
    8518:	4798      	blx	r3

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
    851a:	4a0a      	ldr	r2, [pc, #40]	; (8544 <CalculateBackOff+0x104>)
    851c:	239c      	movs	r3, #156	; 0x9c
    851e:	00db      	lsls	r3, r3, #3
    8520:	58d3      	ldr	r3, [r2, r3]
    8522:	4a0e      	ldr	r2, [pc, #56]	; (855c <CalculateBackOff+0x11c>)
    8524:	5a9b      	ldrh	r3, [r3, r2]
    8526:	3b01      	subs	r3, #1
    8528:	4906      	ldr	r1, [pc, #24]	; (8544 <CalculateBackOff+0x104>)
    852a:	2282      	movs	r2, #130	; 0x82
    852c:	00d2      	lsls	r2, r2, #3
    852e:	588a      	ldr	r2, [r1, r2]
    8530:	435a      	muls	r2, r3
    8532:	0011      	movs	r1, r2
    8534:	4a03      	ldr	r2, [pc, #12]	; (8544 <CalculateBackOff+0x104>)
    8536:	23d1      	movs	r3, #209	; 0xd1
    8538:	009b      	lsls	r3, r3, #2
    853a:	50d1      	str	r1, [r2, r3]
}
    853c:	46c0      	nop			; (mov r8, r8)
    853e:	46bd      	mov	sp, r7
    8540:	b00b      	add	sp, #44	; 0x2c
    8542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8544:	20000b78 	.word	0x20000b78
    8548:	00015f41 	.word	0x00015f41
    854c:	00015d85 	.word	0x00015d85
    8550:	00000471 	.word	0x00000471
    8554:	0000c339 	.word	0x0000c339
    8558:	0000f385 	.word	0x0000f385
    855c:	0000021a 	.word	0x0000021a

00008560 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
    8560:	b580      	push	{r7, lr}
    8562:	b082      	sub	sp, #8
    8564:	af00      	add	r7, sp, #0
    8566:	1d3b      	adds	r3, r7, #4
    8568:	7019      	strb	r1, [r3, #0]
    856a:	0011      	movs	r1, r2
    856c:	1dfb      	adds	r3, r7, #7
    856e:	1c02      	adds	r2, r0, #0
    8570:	701a      	strb	r2, [r3, #0]
    8572:	1dbb      	adds	r3, r7, #6
    8574:	1c0a      	adds	r2, r1, #0
    8576:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
    8578:	1dfb      	adds	r3, r7, #7
    857a:	781b      	ldrb	r3, [r3, #0]
    857c:	2b00      	cmp	r3, #0
    857e:	d003      	beq.n	8588 <RemoveMacCommands+0x28>
    8580:	1dfb      	adds	r3, r7, #7
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	2b01      	cmp	r3, #1
    8586:	d10f      	bne.n	85a8 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
    8588:	1dbb      	adds	r3, r7, #6
    858a:	781b      	ldrb	r3, [r3, #0]
    858c:	2b01      	cmp	r3, #1
    858e:	d109      	bne.n	85a4 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
    8590:	1d3b      	adds	r3, r7, #4
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	2220      	movs	r2, #32
    8596:	4013      	ands	r3, r2
    8598:	b2db      	uxtb	r3, r3
    859a:	2b00      	cmp	r3, #0
    859c:	d004      	beq.n	85a8 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
    859e:	4b04      	ldr	r3, [pc, #16]	; (85b0 <RemoveMacCommands+0x50>)
    85a0:	4798      	blx	r3
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
    85a2:	e001      	b.n	85a8 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
    85a4:	4b02      	ldr	r3, [pc, #8]	; (85b0 <RemoveMacCommands+0x50>)
    85a6:	4798      	blx	r3
}
    85a8:	46c0      	nop			; (mov r8, r8)
    85aa:	46bd      	mov	sp, r7
    85ac:	b002      	add	sp, #8
    85ae:	bd80      	pop	{r7, pc}
    85b0:	0000be8d 	.word	0x0000be8d

000085b4 <ResetMacParameters>:


static void ResetMacParameters( void )
{
    85b4:	b580      	push	{r7, lr}
    85b6:	b082      	sub	sp, #8
    85b8:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    85ba:	4a65      	ldr	r2, [pc, #404]	; (8750 <ResetMacParameters+0x19c>)
    85bc:	239c      	movs	r3, #156	; 0x9c
    85be:	00db      	lsls	r3, r3, #3
    85c0:	58d2      	ldr	r2, [r2, r3]
    85c2:	2388      	movs	r3, #136	; 0x88
    85c4:	009b      	lsls	r3, r3, #2
    85c6:	2100      	movs	r1, #0
    85c8:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
    85ca:	4a61      	ldr	r2, [pc, #388]	; (8750 <ResetMacParameters+0x19c>)
    85cc:	239c      	movs	r3, #156	; 0x9c
    85ce:	00db      	lsls	r3, r3, #3
    85d0:	58d3      	ldr	r3, [r2, r3]
    85d2:	22cc      	movs	r2, #204	; 0xcc
    85d4:	2100      	movs	r1, #0
    85d6:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
    85d8:	4b5e      	ldr	r3, [pc, #376]	; (8754 <ResetMacParameters+0x1a0>)
    85da:	4798      	blx	r3

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    85dc:	4a5c      	ldr	r2, [pc, #368]	; (8750 <ResetMacParameters+0x19c>)
    85de:	239c      	movs	r3, #156	; 0x9c
    85e0:	00db      	lsls	r3, r3, #3
    85e2:	58d2      	ldr	r2, [r2, r3]
    85e4:	2388      	movs	r3, #136	; 0x88
    85e6:	005b      	lsls	r3, r3, #1
    85e8:	2100      	movs	r1, #0
    85ea:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    85ec:	4a58      	ldr	r2, [pc, #352]	; (8750 <ResetMacParameters+0x19c>)
    85ee:	239c      	movs	r3, #156	; 0x9c
    85f0:	00db      	lsls	r3, r3, #3
    85f2:	58d3      	ldr	r3, [r2, r3]
    85f4:	4a58      	ldr	r2, [pc, #352]	; (8758 <ResetMacParameters+0x1a4>)
    85f6:	2100      	movs	r1, #0
    85f8:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
    85fa:	4a55      	ldr	r2, [pc, #340]	; (8750 <ResetMacParameters+0x19c>)
    85fc:	239c      	movs	r3, #156	; 0x9c
    85fe:	00db      	lsls	r3, r3, #3
    8600:	58d2      	ldr	r2, [r2, r3]
    8602:	2312      	movs	r3, #18
    8604:	33ff      	adds	r3, #255	; 0xff
    8606:	2100      	movs	r1, #0
    8608:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
    860a:	4a51      	ldr	r2, [pc, #324]	; (8750 <ResetMacParameters+0x19c>)
    860c:	239c      	movs	r3, #156	; 0x9c
    860e:	00db      	lsls	r3, r3, #3
    8610:	58d3      	ldr	r3, [r2, r3]
    8612:	4a52      	ldr	r2, [pc, #328]	; (875c <ResetMacParameters+0x1a8>)
    8614:	2101      	movs	r1, #1
    8616:	5299      	strh	r1, [r3, r2]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    8618:	4a4d      	ldr	r2, [pc, #308]	; (8750 <ResetMacParameters+0x19c>)
    861a:	239c      	movs	r3, #156	; 0x9c
    861c:	00db      	lsls	r3, r3, #3
    861e:	58d3      	ldr	r3, [r2, r3]
    8620:	494b      	ldr	r1, [pc, #300]	; (8750 <ResetMacParameters+0x19c>)
    8622:	229c      	movs	r2, #156	; 0x9c
    8624:	00d2      	lsls	r2, r2, #3
    8626:	588a      	ldr	r2, [r1, r2]
    8628:	2104      	movs	r1, #4
    862a:	5651      	ldrsb	r1, [r2, r1]
    862c:	22d4      	movs	r2, #212	; 0xd4
    862e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    8630:	4a47      	ldr	r2, [pc, #284]	; (8750 <ResetMacParameters+0x19c>)
    8632:	239c      	movs	r3, #156	; 0x9c
    8634:	00db      	lsls	r3, r3, #3
    8636:	58d3      	ldr	r3, [r2, r3]
    8638:	4945      	ldr	r1, [pc, #276]	; (8750 <ResetMacParameters+0x19c>)
    863a:	229c      	movs	r2, #156	; 0x9c
    863c:	00d2      	lsls	r2, r2, #3
    863e:	588a      	ldr	r2, [r1, r2]
    8640:	2105      	movs	r1, #5
    8642:	5651      	ldrsb	r1, [r2, r1]
    8644:	22d5      	movs	r2, #213	; 0xd5
    8646:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
    8648:	4a41      	ldr	r2, [pc, #260]	; (8750 <ResetMacParameters+0x19c>)
    864a:	239c      	movs	r3, #156	; 0x9c
    864c:	00db      	lsls	r3, r3, #3
    864e:	58d3      	ldr	r3, [r2, r3]
    8650:	493f      	ldr	r1, [pc, #252]	; (8750 <ResetMacParameters+0x19c>)
    8652:	229c      	movs	r2, #156	; 0x9c
    8654:	00d2      	lsls	r2, r2, #3
    8656:	588a      	ldr	r2, [r1, r2]
    8658:	2125      	movs	r1, #37	; 0x25
    865a:	5c51      	ldrb	r1, [r2, r1]
    865c:	22f5      	movs	r2, #245	; 0xf5
    865e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    8660:	4a3b      	ldr	r2, [pc, #236]	; (8750 <ResetMacParameters+0x19c>)
    8662:	239c      	movs	r3, #156	; 0x9c
    8664:	00db      	lsls	r3, r3, #3
    8666:	58d3      	ldr	r3, [r2, r3]
    8668:	4939      	ldr	r1, [pc, #228]	; (8750 <ResetMacParameters+0x19c>)
    866a:	229c      	movs	r2, #156	; 0x9c
    866c:	00d2      	lsls	r2, r2, #3
    866e:	588a      	ldr	r2, [r1, r2]
    8670:	21f8      	movs	r1, #248	; 0xf8
    8672:	185b      	adds	r3, r3, r1
    8674:	3228      	adds	r2, #40	; 0x28
    8676:	ca03      	ldmia	r2!, {r0, r1}
    8678:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
    867a:	4a35      	ldr	r2, [pc, #212]	; (8750 <ResetMacParameters+0x19c>)
    867c:	239c      	movs	r3, #156	; 0x9c
    867e:	00db      	lsls	r3, r3, #3
    8680:	58d2      	ldr	r2, [r2, r3]
    8682:	4933      	ldr	r1, [pc, #204]	; (8750 <ResetMacParameters+0x19c>)
    8684:	239c      	movs	r3, #156	; 0x9c
    8686:	00db      	lsls	r3, r3, #3
    8688:	58cb      	ldr	r3, [r1, r3]
    868a:	2130      	movs	r1, #48	; 0x30
    868c:	5c59      	ldrb	r1, [r3, r1]
    868e:	2380      	movs	r3, #128	; 0x80
    8690:	005b      	lsls	r3, r3, #1
    8692:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
    8694:	4a2e      	ldr	r2, [pc, #184]	; (8750 <ResetMacParameters+0x19c>)
    8696:	239c      	movs	r3, #156	; 0x9c
    8698:	00db      	lsls	r3, r3, #3
    869a:	58d2      	ldr	r2, [r2, r3]
    869c:	492c      	ldr	r1, [pc, #176]	; (8750 <ResetMacParameters+0x19c>)
    869e:	239c      	movs	r3, #156	; 0x9c
    86a0:	00db      	lsls	r3, r3, #3
    86a2:	58cb      	ldr	r3, [r1, r3]
    86a4:	2131      	movs	r1, #49	; 0x31
    86a6:	5c59      	ldrb	r1, [r3, r1]
    86a8:	2302      	movs	r3, #2
    86aa:	33ff      	adds	r3, #255	; 0xff
    86ac:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
    86ae:	4a28      	ldr	r2, [pc, #160]	; (8750 <ResetMacParameters+0x19c>)
    86b0:	239c      	movs	r3, #156	; 0x9c
    86b2:	00db      	lsls	r3, r3, #3
    86b4:	58d2      	ldr	r2, [r2, r3]
    86b6:	4926      	ldr	r1, [pc, #152]	; (8750 <ResetMacParameters+0x19c>)
    86b8:	239c      	movs	r3, #156	; 0x9c
    86ba:	00db      	lsls	r3, r3, #3
    86bc:	58cb      	ldr	r3, [r1, r3]
    86be:	6b59      	ldr	r1, [r3, #52]	; 0x34
    86c0:	2382      	movs	r3, #130	; 0x82
    86c2:	005b      	lsls	r3, r3, #1
    86c4:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    86c6:	4a22      	ldr	r2, [pc, #136]	; (8750 <ResetMacParameters+0x19c>)
    86c8:	239c      	movs	r3, #156	; 0x9c
    86ca:	00db      	lsls	r3, r3, #3
    86cc:	58d2      	ldr	r2, [r2, r3]
    86ce:	4920      	ldr	r1, [pc, #128]	; (8750 <ResetMacParameters+0x19c>)
    86d0:	239c      	movs	r3, #156	; 0x9c
    86d2:	00db      	lsls	r3, r3, #3
    86d4:	58cb      	ldr	r3, [r1, r3]
    86d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    86d8:	2384      	movs	r3, #132	; 0x84
    86da:	005b      	lsls	r3, r3, #1
    86dc:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
    86de:	4a1c      	ldr	r2, [pc, #112]	; (8750 <ResetMacParameters+0x19c>)
    86e0:	239c      	movs	r3, #156	; 0x9c
    86e2:	00db      	lsls	r3, r3, #3
    86e4:	58d3      	ldr	r3, [r2, r3]
    86e6:	4a1e      	ldr	r2, [pc, #120]	; (8760 <ResetMacParameters+0x1ac>)
    86e8:	2100      	movs	r1, #0
    86ea:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
    86ec:	4a18      	ldr	r2, [pc, #96]	; (8750 <ResetMacParameters+0x19c>)
    86ee:	239c      	movs	r3, #156	; 0x9c
    86f0:	00db      	lsls	r3, r3, #3
    86f2:	58d2      	ldr	r2, [r2, r3]
    86f4:	2386      	movs	r3, #134	; 0x86
    86f6:	009b      	lsls	r3, r3, #2
    86f8:	2100      	movs	r1, #0
    86fa:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    86fc:	003b      	movs	r3, r7
    86fe:	2201      	movs	r2, #1
    8700:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
    8702:	003b      	movs	r3, r7
    8704:	2200      	movs	r2, #0
    8706:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    8708:	4a11      	ldr	r2, [pc, #68]	; (8750 <ResetMacParameters+0x19c>)
    870a:	239c      	movs	r3, #156	; 0x9c
    870c:	00db      	lsls	r3, r3, #3
    870e:	58d3      	ldr	r3, [r2, r3]
    8710:	781b      	ldrb	r3, [r3, #0]
    8712:	003a      	movs	r2, r7
    8714:	0011      	movs	r1, r2
    8716:	0018      	movs	r0, r3
    8718:	4b12      	ldr	r3, [pc, #72]	; (8764 <ResetMacParameters+0x1b0>)
    871a:	4798      	blx	r3

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
    871c:	4a0c      	ldr	r2, [pc, #48]	; (8750 <ResetMacParameters+0x19c>)
    871e:	239c      	movs	r3, #156	; 0x9c
    8720:	00db      	lsls	r3, r3, #3
    8722:	58d2      	ldr	r2, [r2, r3]
    8724:	2314      	movs	r3, #20
    8726:	33ff      	adds	r3, #255	; 0xff
    8728:	2100      	movs	r1, #0
    872a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
    872c:	4a08      	ldr	r2, [pc, #32]	; (8750 <ResetMacParameters+0x19c>)
    872e:	239c      	movs	r3, #156	; 0x9c
    8730:	00db      	lsls	r3, r3, #3
    8732:	58d2      	ldr	r2, [r2, r3]
    8734:	4906      	ldr	r1, [pc, #24]	; (8750 <ResetMacParameters+0x19c>)
    8736:	239c      	movs	r3, #156	; 0x9c
    8738:	00db      	lsls	r3, r3, #3
    873a:	58c9      	ldr	r1, [r1, r3]
    873c:	2314      	movs	r3, #20
    873e:	33ff      	adds	r3, #255	; 0xff
    8740:	5cc9      	ldrb	r1, [r1, r3]
    8742:	238a      	movs	r3, #138	; 0x8a
    8744:	005b      	lsls	r3, r3, #1
    8746:	54d1      	strb	r1, [r2, r3]
}
    8748:	46c0      	nop			; (mov r8, r8)
    874a:	46bd      	mov	sp, r7
    874c:	b002      	add	sp, #8
    874e:	bd80      	pop	{r7, pc}
    8750:	20000b78 	.word	0x20000b78
    8754:	0000e369 	.word	0x0000e369
    8758:	00000216 	.word	0x00000216
    875c:	0000021a 	.word	0x0000021a
    8760:	00000217 	.word	0x00000217
    8764:	0000f071 	.word	0x0000f071

00008768 <IsReJoin0Required>:

static bool IsReJoin0Required( )
{
    8768:	b580      	push	{r7, lr}
    876a:	af00      	add	r7, sp, #0

    if( ( MacCtx.NvmCtx->Rejoin0UplinksLimit == MacCtx.NvmCtx->Rejoin0UplinksCounter ) && ( MacCtx.NvmCtx->Version.Fields.Minor == 1 ) && ( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 ) )
    876c:	4a16      	ldr	r2, [pc, #88]	; (87c8 <IsReJoin0Required+0x60>)
    876e:	239c      	movs	r3, #156	; 0x9c
    8770:	00db      	lsls	r3, r3, #3
    8772:	58d3      	ldr	r3, [r2, r3]
    8774:	4a15      	ldr	r2, [pc, #84]	; (87cc <IsReJoin0Required+0x64>)
    8776:	5a9a      	ldrh	r2, [r3, r2]
    8778:	4913      	ldr	r1, [pc, #76]	; (87c8 <IsReJoin0Required+0x60>)
    877a:	239c      	movs	r3, #156	; 0x9c
    877c:	00db      	lsls	r3, r3, #3
    877e:	58c9      	ldr	r1, [r1, r3]
    8780:	2389      	movs	r3, #137	; 0x89
    8782:	009b      	lsls	r3, r3, #2
    8784:	5acb      	ldrh	r3, [r1, r3]
    8786:	429a      	cmp	r2, r3
    8788:	d119      	bne.n	87be <IsReJoin0Required+0x56>
    878a:	4a0f      	ldr	r2, [pc, #60]	; (87c8 <IsReJoin0Required+0x60>)
    878c:	239c      	movs	r3, #156	; 0x9c
    878e:	00db      	lsls	r3, r3, #3
    8790:	58d3      	ldr	r3, [r2, r3]
    8792:	4a0f      	ldr	r2, [pc, #60]	; (87d0 <IsReJoin0Required+0x68>)
    8794:	5c9b      	ldrb	r3, [r3, r2]
    8796:	2b01      	cmp	r3, #1
    8798:	d111      	bne.n	87be <IsReJoin0Required+0x56>
    879a:	4a0b      	ldr	r2, [pc, #44]	; (87c8 <IsReJoin0Required+0x60>)
    879c:	239c      	movs	r3, #156	; 0x9c
    879e:	00db      	lsls	r3, r3, #3
    87a0:	58d3      	ldr	r3, [r2, r3]
    87a2:	4a0a      	ldr	r2, [pc, #40]	; (87cc <IsReJoin0Required+0x64>)
    87a4:	5a9b      	ldrh	r3, [r3, r2]
    87a6:	2b00      	cmp	r3, #0
    87a8:	d009      	beq.n	87be <IsReJoin0Required+0x56>
    {
        MacCtx.NvmCtx->Rejoin0UplinksCounter = 0;
    87aa:	4a07      	ldr	r2, [pc, #28]	; (87c8 <IsReJoin0Required+0x60>)
    87ac:	239c      	movs	r3, #156	; 0x9c
    87ae:	00db      	lsls	r3, r3, #3
    87b0:	58d2      	ldr	r2, [r2, r3]
    87b2:	2389      	movs	r3, #137	; 0x89
    87b4:	009b      	lsls	r3, r3, #2
    87b6:	2100      	movs	r1, #0
    87b8:	52d1      	strh	r1, [r2, r3]
        return true;
    87ba:	2301      	movs	r3, #1
    87bc:	e000      	b.n	87c0 <IsReJoin0Required+0x58>
    }
    return false;
    87be:	2300      	movs	r3, #0
}
    87c0:	0018      	movs	r0, r3
    87c2:	46bd      	mov	sp, r7
    87c4:	bd80      	pop	{r7, pc}
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	20000b78 	.word	0x20000b78
    87cc:	00000222 	.word	0x00000222
    87d0:	0000021e 	.word	0x0000021e

000087d4 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
    87d4:	b580      	push	{r7, lr}
    87d6:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
    87d8:	2000      	movs	r0, #0
    87da:	4b05      	ldr	r3, [pc, #20]	; (87f0 <OpenContinuousRx2Window+0x1c>)
    87dc:	4798      	blx	r3
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    87de:	4a05      	ldr	r2, [pc, #20]	; (87f4 <OpenContinuousRx2Window+0x20>)
    87e0:	238e      	movs	r3, #142	; 0x8e
    87e2:	00db      	lsls	r3, r3, #3
    87e4:	2102      	movs	r1, #2
    87e6:	54d1      	strb	r1, [r2, r3]
}
    87e8:	46c0      	nop			; (mov r8, r8)
    87ea:	46bd      	mov	sp, r7
    87ec:	bd80      	pop	{r7, pc}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	000065b1 	.word	0x000065b1
    87f4:	20000b78 	.word	0x20000b78

000087f8 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
    87f8:	b590      	push	{r4, r7, lr}
    87fa:	b089      	sub	sp, #36	; 0x24
    87fc:	af00      	add	r7, sp, #0
    87fe:	60f8      	str	r0, [r7, #12]
    8800:	60b9      	str	r1, [r7, #8]
    8802:	603b      	str	r3, [r7, #0]
    8804:	1dfb      	adds	r3, r7, #7
    8806:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
    8808:	4ba0      	ldr	r3, [pc, #640]	; (8a8c <PrepareFrame+0x294>)
    880a:	2200      	movs	r2, #0
    880c:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
    880e:	4a9f      	ldr	r2, [pc, #636]	; (8a8c <PrepareFrame+0x294>)
    8810:	239c      	movs	r3, #156	; 0x9c
    8812:	00db      	lsls	r3, r3, #3
    8814:	58d3      	ldr	r3, [r2, r3]
    8816:	4a9e      	ldr	r2, [pc, #632]	; (8a90 <PrepareFrame+0x298>)
    8818:	2100      	movs	r1, #0
    881a:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
    881c:	2300      	movs	r3, #0
    881e:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
    8820:	2300      	movs	r3, #0
    8822:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
    8824:	231f      	movs	r3, #31
    8826:	18fb      	adds	r3, r7, r3
    8828:	2200      	movs	r2, #0
    882a:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
    882c:	683b      	ldr	r3, [r7, #0]
    882e:	2b00      	cmp	r3, #0
    8830:	d103      	bne.n	883a <PrepareFrame+0x42>
    {
        fBufferSize = 0;
    8832:	2330      	movs	r3, #48	; 0x30
    8834:	18fb      	adds	r3, r7, r3
    8836:	2200      	movs	r2, #0
    8838:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
    883a:	2330      	movs	r3, #48	; 0x30
    883c:	18fb      	adds	r3, r7, r3
    883e:	881a      	ldrh	r2, [r3, #0]
    8840:	6839      	ldr	r1, [r7, #0]
    8842:	4b94      	ldr	r3, [pc, #592]	; (8a94 <PrepareFrame+0x29c>)
    8844:	0018      	movs	r0, r3
    8846:	4b94      	ldr	r3, [pc, #592]	; (8a98 <PrepareFrame+0x2a0>)
    8848:	4798      	blx	r3
    MacCtx.AppDataSize = fBufferSize;
    884a:	2330      	movs	r3, #48	; 0x30
    884c:	18fb      	adds	r3, r7, r3
    884e:	881b      	ldrh	r3, [r3, #0]
    8850:	b2d9      	uxtb	r1, r3
    8852:	4b8e      	ldr	r3, [pc, #568]	; (8a8c <PrepareFrame+0x294>)
    8854:	4a91      	ldr	r2, [pc, #580]	; (8a9c <PrepareFrame+0x2a4>)
    8856:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
    8858:	68fb      	ldr	r3, [r7, #12]
    885a:	781a      	ldrb	r2, [r3, #0]
    885c:	4b8b      	ldr	r3, [pc, #556]	; (8a8c <PrepareFrame+0x294>)
    885e:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
    8860:	68fb      	ldr	r3, [r7, #12]
    8862:	781b      	ldrb	r3, [r3, #0]
    8864:	061b      	lsls	r3, r3, #24
    8866:	0f5b      	lsrs	r3, r3, #29
    8868:	b2db      	uxtb	r3, r3
    886a:	2b04      	cmp	r3, #4
    886c:	d005      	beq.n	887a <PrepareFrame+0x82>
    886e:	2b07      	cmp	r3, #7
    8870:	d100      	bne.n	8874 <PrepareFrame+0x7c>
    8872:	e0e6      	b.n	8a42 <PrepareFrame+0x24a>
    8874:	2b02      	cmp	r3, #2
    8876:	d007      	beq.n	8888 <PrepareFrame+0x90>
    8878:	e0fd      	b.n	8a76 <PrepareFrame+0x27e>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
    887a:	4a84      	ldr	r2, [pc, #528]	; (8a8c <PrepareFrame+0x294>)
    887c:	239c      	movs	r3, #156	; 0x9c
    887e:	00db      	lsls	r3, r3, #3
    8880:	58d3      	ldr	r3, [r2, r3]
    8882:	4a83      	ldr	r2, [pc, #524]	; (8a90 <PrepareFrame+0x298>)
    8884:	2101      	movs	r1, #1
    8886:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
    8888:	4a80      	ldr	r2, [pc, #512]	; (8a8c <PrepareFrame+0x294>)
    888a:	2386      	movs	r3, #134	; 0x86
    888c:	005b      	lsls	r3, r3, #1
    888e:	2104      	movs	r1, #4
    8890:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
    8892:	4a7e      	ldr	r2, [pc, #504]	; (8a8c <PrepareFrame+0x294>)
    8894:	2388      	movs	r3, #136	; 0x88
    8896:	005b      	lsls	r3, r3, #1
    8898:	4981      	ldr	r1, [pc, #516]	; (8aa0 <PrepareFrame+0x2a8>)
    889a:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
    889c:	4a7b      	ldr	r2, [pc, #492]	; (8a8c <PrepareFrame+0x294>)
    889e:	238a      	movs	r3, #138	; 0x8a
    88a0:	005b      	lsls	r3, r3, #1
    88a2:	21ff      	movs	r1, #255	; 0xff
    88a4:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
    88a6:	68fb      	ldr	r3, [r7, #12]
    88a8:	7819      	ldrb	r1, [r3, #0]
    88aa:	4a78      	ldr	r2, [pc, #480]	; (8a8c <PrepareFrame+0x294>)
    88ac:	2316      	movs	r3, #22
    88ae:	33ff      	adds	r3, #255	; 0xff
    88b0:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
    88b2:	4a76      	ldr	r2, [pc, #472]	; (8a8c <PrepareFrame+0x294>)
    88b4:	1df9      	adds	r1, r7, #7
    88b6:	2398      	movs	r3, #152	; 0x98
    88b8:	005b      	lsls	r3, r3, #1
    88ba:	7809      	ldrb	r1, [r1, #0]
    88bc:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
    88be:	4a73      	ldr	r2, [pc, #460]	; (8a8c <PrepareFrame+0x294>)
    88c0:	239c      	movs	r3, #156	; 0x9c
    88c2:	00db      	lsls	r3, r3, #3
    88c4:	58d3      	ldr	r3, [r2, r3]
    88c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
    88c8:	4a70      	ldr	r2, [pc, #448]	; (8a8c <PrepareFrame+0x294>)
    88ca:	238c      	movs	r3, #140	; 0x8c
    88cc:	005b      	lsls	r3, r3, #1
    88ce:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    88d0:	68bb      	ldr	r3, [r7, #8]
    88d2:	7819      	ldrb	r1, [r3, #0]
    88d4:	4a6d      	ldr	r2, [pc, #436]	; (8a8c <PrepareFrame+0x294>)
    88d6:	238e      	movs	r3, #142	; 0x8e
    88d8:	005b      	lsls	r3, r3, #1
    88da:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
    88dc:	4b6b      	ldr	r3, [pc, #428]	; (8a8c <PrepareFrame+0x294>)
    88de:	4a6f      	ldr	r2, [pc, #444]	; (8a9c <PrepareFrame+0x2a4>)
    88e0:	5c99      	ldrb	r1, [r3, r2]
    88e2:	4a6a      	ldr	r2, [pc, #424]	; (8a8c <PrepareFrame+0x294>)
    88e4:	239c      	movs	r3, #156	; 0x9c
    88e6:	005b      	lsls	r3, r3, #1
    88e8:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
    88ea:	4a68      	ldr	r2, [pc, #416]	; (8a8c <PrepareFrame+0x294>)
    88ec:	239a      	movs	r3, #154	; 0x9a
    88ee:	005b      	lsls	r3, r3, #1
    88f0:	4968      	ldr	r1, [pc, #416]	; (8a94 <PrepareFrame+0x29c>)
    88f2:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    88f4:	2318      	movs	r3, #24
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	0018      	movs	r0, r3
    88fa:	4b6a      	ldr	r3, [pc, #424]	; (8aa4 <PrepareFrame+0x2ac>)
    88fc:	4798      	blx	r3
    88fe:	1e03      	subs	r3, r0, #0
    8900:	d001      	beq.n	8906 <PrepareFrame+0x10e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    8902:	2312      	movs	r3, #18
    8904:	e0bd      	b.n	8a82 <PrepareFrame+0x28a>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
    8906:	69bb      	ldr	r3, [r7, #24]
    8908:	b299      	uxth	r1, r3
    890a:	4a60      	ldr	r2, [pc, #384]	; (8a8c <PrepareFrame+0x294>)
    890c:	238f      	movs	r3, #143	; 0x8f
    890e:	005b      	lsls	r3, r3, #1
    8910:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbTrans = 0;
    8912:	4b5e      	ldr	r3, [pc, #376]	; (8a8c <PrepareFrame+0x294>)
    8914:	4a64      	ldr	r2, [pc, #400]	; (8aa8 <PrepareFrame+0x2b0>)
    8916:	2100      	movs	r1, #0
    8918:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
    891a:	4b5c      	ldr	r3, [pc, #368]	; (8a8c <PrepareFrame+0x294>)
    891c:	4a63      	ldr	r2, [pc, #396]	; (8aac <PrepareFrame+0x2b4>)
    891e:	2100      	movs	r1, #0
    8920:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
    8922:	69ba      	ldr	r2, [r7, #24]
    8924:	4b59      	ldr	r3, [pc, #356]	; (8a8c <PrepareFrame+0x294>)
    8926:	4962      	ldr	r1, [pc, #392]	; (8ab0 <PrepareFrame+0x2b8>)
    8928:	505a      	str	r2, [r3, r1]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    892a:	2314      	movs	r3, #20
    892c:	18fb      	adds	r3, r7, r3
    892e:	0018      	movs	r0, r3
    8930:	4b60      	ldr	r3, [pc, #384]	; (8ab4 <PrepareFrame+0x2bc>)
    8932:	4798      	blx	r3
    8934:	1e03      	subs	r3, r0, #0
    8936:	d001      	beq.n	893c <PrepareFrame+0x144>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    8938:	2313      	movs	r3, #19
    893a:	e0a2      	b.n	8a82 <PrepareFrame+0x28a>
            }

            if( macCmdsSize > 0 )
    893c:	697b      	ldr	r3, [r7, #20]
    893e:	2b00      	cmp	r3, #0
    8940:	d100      	bne.n	8944 <PrepareFrame+0x14c>
    8942:	e09a      	b.n	8a7a <PrepareFrame+0x282>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
    8944:	4a51      	ldr	r2, [pc, #324]	; (8a8c <PrepareFrame+0x294>)
    8946:	239c      	movs	r3, #156	; 0x9c
    8948:	00db      	lsls	r3, r3, #3
    894a:	58d3      	ldr	r3, [r2, r3]
    894c:	22d5      	movs	r2, #213	; 0xd5
    894e:	569b      	ldrsb	r3, [r3, r2]
    8950:	221f      	movs	r2, #31
    8952:	18bc      	adds	r4, r7, r2
    8954:	0018      	movs	r0, r3
    8956:	4b58      	ldr	r3, [pc, #352]	; (8ab8 <PrepareFrame+0x2c0>)
    8958:	4798      	blx	r3
    895a:	0003      	movs	r3, r0
    895c:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
    895e:	4b4b      	ldr	r3, [pc, #300]	; (8a8c <PrepareFrame+0x294>)
    8960:	4a4e      	ldr	r2, [pc, #312]	; (8a9c <PrepareFrame+0x2a4>)
    8962:	5c9b      	ldrb	r3, [r3, r2]
    8964:	2b00      	cmp	r3, #0
    8966:	d025      	beq.n	89b4 <PrepareFrame+0x1bc>
    8968:	697b      	ldr	r3, [r7, #20]
    896a:	2b0f      	cmp	r3, #15
    896c:	d822      	bhi.n	89b4 <PrepareFrame+0x1bc>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
    896e:	4a53      	ldr	r2, [pc, #332]	; (8abc <PrepareFrame+0x2c4>)
    8970:	2314      	movs	r3, #20
    8972:	18fb      	adds	r3, r7, r3
    8974:	0019      	movs	r1, r3
    8976:	200f      	movs	r0, #15
    8978:	4b51      	ldr	r3, [pc, #324]	; (8ac0 <PrepareFrame+0x2c8>)
    897a:	4798      	blx	r3
    897c:	1e03      	subs	r3, r0, #0
    897e:	d001      	beq.n	8984 <PrepareFrame+0x18c>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    8980:	2313      	movs	r3, #19
    8982:	e07e      	b.n	8a82 <PrepareFrame+0x28a>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
    8984:	697b      	ldr	r3, [r7, #20]
    8986:	b2db      	uxtb	r3, r3
    8988:	1c1a      	adds	r2, r3, #0
    898a:	230f      	movs	r3, #15
    898c:	4013      	ands	r3, r2
    898e:	b2da      	uxtb	r2, r3
    8990:	68bb      	ldr	r3, [r7, #8]
    8992:	210f      	movs	r1, #15
    8994:	400a      	ands	r2, r1
    8996:	0010      	movs	r0, r2
    8998:	781a      	ldrb	r2, [r3, #0]
    899a:	210f      	movs	r1, #15
    899c:	438a      	bics	r2, r1
    899e:	1c11      	adds	r1, r2, #0
    89a0:	1c02      	adds	r2, r0, #0
    89a2:	430a      	orrs	r2, r1
    89a4:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
    89a6:	68bb      	ldr	r3, [r7, #8]
    89a8:	7819      	ldrb	r1, [r3, #0]
    89aa:	4a38      	ldr	r2, [pc, #224]	; (8a8c <PrepareFrame+0x294>)
    89ac:	238e      	movs	r3, #142	; 0x8e
    89ae:	005b      	lsls	r3, r3, #1
    89b0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
    89b2:	e062      	b.n	8a7a <PrepareFrame+0x282>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
    89b4:	4b35      	ldr	r3, [pc, #212]	; (8a8c <PrepareFrame+0x294>)
    89b6:	4a39      	ldr	r2, [pc, #228]	; (8a9c <PrepareFrame+0x2a4>)
    89b8:	5c9b      	ldrb	r3, [r3, r2]
    89ba:	2b00      	cmp	r3, #0
    89bc:	d017      	beq.n	89ee <PrepareFrame+0x1f6>
    89be:	697b      	ldr	r3, [r7, #20]
    89c0:	2b0f      	cmp	r3, #15
    89c2:	d914      	bls.n	89ee <PrepareFrame+0x1f6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    89c4:	231f      	movs	r3, #31
    89c6:	18fb      	adds	r3, r7, r3
    89c8:	7818      	ldrb	r0, [r3, #0]
    89ca:	4a30      	ldr	r2, [pc, #192]	; (8a8c <PrepareFrame+0x294>)
    89cc:	239c      	movs	r3, #156	; 0x9c
    89ce:	00db      	lsls	r3, r3, #3
    89d0:	58d3      	ldr	r3, [r2, r3]
    89d2:	3317      	adds	r3, #23
    89d4:	33ff      	adds	r3, #255	; 0xff
    89d6:	001a      	movs	r2, r3
    89d8:	2314      	movs	r3, #20
    89da:	18fb      	adds	r3, r7, r3
    89dc:	0019      	movs	r1, r3
    89de:	4b38      	ldr	r3, [pc, #224]	; (8ac0 <PrepareFrame+0x2c8>)
    89e0:	4798      	blx	r3
    89e2:	1e03      	subs	r3, r0, #0
    89e4:	d001      	beq.n	89ea <PrepareFrame+0x1f2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    89e6:	2313      	movs	r3, #19
    89e8:	e04b      	b.n	8a82 <PrepareFrame+0x28a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
    89ea:	230a      	movs	r3, #10
    89ec:	e049      	b.n	8a82 <PrepareFrame+0x28a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
    89ee:	231f      	movs	r3, #31
    89f0:	18fb      	adds	r3, r7, r3
    89f2:	7818      	ldrb	r0, [r3, #0]
    89f4:	4a25      	ldr	r2, [pc, #148]	; (8a8c <PrepareFrame+0x294>)
    89f6:	239c      	movs	r3, #156	; 0x9c
    89f8:	00db      	lsls	r3, r3, #3
    89fa:	58d3      	ldr	r3, [r2, r3]
    89fc:	3317      	adds	r3, #23
    89fe:	33ff      	adds	r3, #255	; 0xff
    8a00:	001a      	movs	r2, r3
    8a02:	2314      	movs	r3, #20
    8a04:	18fb      	adds	r3, r7, r3
    8a06:	0019      	movs	r1, r3
    8a08:	4b2d      	ldr	r3, [pc, #180]	; (8ac0 <PrepareFrame+0x2c8>)
    8a0a:	4798      	blx	r3
    8a0c:	1e03      	subs	r3, r0, #0
    8a0e:	d001      	beq.n	8a14 <PrepareFrame+0x21c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    8a10:	2313      	movs	r3, #19
    8a12:	e036      	b.n	8a82 <PrepareFrame+0x28a>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
    8a14:	4a1d      	ldr	r2, [pc, #116]	; (8a8c <PrepareFrame+0x294>)
    8a16:	2398      	movs	r3, #152	; 0x98
    8a18:	005b      	lsls	r3, r3, #1
    8a1a:	2100      	movs	r1, #0
    8a1c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
    8a1e:	4a1b      	ldr	r2, [pc, #108]	; (8a8c <PrepareFrame+0x294>)
    8a20:	239c      	movs	r3, #156	; 0x9c
    8a22:	00db      	lsls	r3, r3, #3
    8a24:	58d3      	ldr	r3, [r2, r3]
    8a26:	3317      	adds	r3, #23
    8a28:	33ff      	adds	r3, #255	; 0xff
    8a2a:	0019      	movs	r1, r3
    8a2c:	4a17      	ldr	r2, [pc, #92]	; (8a8c <PrepareFrame+0x294>)
    8a2e:	239a      	movs	r3, #154	; 0x9a
    8a30:	005b      	lsls	r3, r3, #1
    8a32:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
    8a34:	697b      	ldr	r3, [r7, #20]
    8a36:	b2d9      	uxtb	r1, r3
    8a38:	4a14      	ldr	r2, [pc, #80]	; (8a8c <PrepareFrame+0x294>)
    8a3a:	239c      	movs	r3, #156	; 0x9c
    8a3c:	005b      	lsls	r3, r3, #1
    8a3e:	54d1      	strb	r1, [r2, r3]
            break;
    8a40:	e01b      	b.n	8a7a <PrepareFrame+0x282>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
    8a42:	683b      	ldr	r3, [r7, #0]
    8a44:	2b00      	cmp	r3, #0
    8a46:	d01a      	beq.n	8a7e <PrepareFrame+0x286>
    8a48:	4b10      	ldr	r3, [pc, #64]	; (8a8c <PrepareFrame+0x294>)
    8a4a:	4a14      	ldr	r2, [pc, #80]	; (8a9c <PrepareFrame+0x2a4>)
    8a4c:	5c9b      	ldrb	r3, [r3, r2]
    8a4e:	2b00      	cmp	r3, #0
    8a50:	d015      	beq.n	8a7e <PrepareFrame+0x286>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
    8a52:	481c      	ldr	r0, [pc, #112]	; (8ac4 <PrepareFrame+0x2cc>)
    8a54:	4b0d      	ldr	r3, [pc, #52]	; (8a8c <PrepareFrame+0x294>)
    8a56:	4a11      	ldr	r2, [pc, #68]	; (8a9c <PrepareFrame+0x2a4>)
    8a58:	5c9b      	ldrb	r3, [r3, r2]
    8a5a:	b29a      	uxth	r2, r3
    8a5c:	683b      	ldr	r3, [r7, #0]
    8a5e:	0019      	movs	r1, r3
    8a60:	4b0d      	ldr	r3, [pc, #52]	; (8a98 <PrepareFrame+0x2a0>)
    8a62:	4798      	blx	r3
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
    8a64:	4b09      	ldr	r3, [pc, #36]	; (8a8c <PrepareFrame+0x294>)
    8a66:	4a0d      	ldr	r2, [pc, #52]	; (8a9c <PrepareFrame+0x2a4>)
    8a68:	5c9b      	ldrb	r3, [r3, r2]
    8a6a:	b29b      	uxth	r3, r3
    8a6c:	3301      	adds	r3, #1
    8a6e:	b29a      	uxth	r2, r3
    8a70:	4b06      	ldr	r3, [pc, #24]	; (8a8c <PrepareFrame+0x294>)
    8a72:	811a      	strh	r2, [r3, #8]
            }
            break;
    8a74:	e003      	b.n	8a7e <PrepareFrame+0x286>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
    8a76:	2302      	movs	r3, #2
    8a78:	e003      	b.n	8a82 <PrepareFrame+0x28a>
            break;
    8a7a:	46c0      	nop			; (mov r8, r8)
    8a7c:	e000      	b.n	8a80 <PrepareFrame+0x288>
            break;
    8a7e:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
    8a80:	2300      	movs	r3, #0
}
    8a82:	0018      	movs	r0, r3
    8a84:	46bd      	mov	sp, r7
    8a86:	b009      	add	sp, #36	; 0x24
    8a88:	bd90      	pop	{r4, r7, pc}
    8a8a:	46c0      	nop			; (mov r8, r8)
    8a8c:	20000b78 	.word	0x20000b78
    8a90:	00000217 	.word	0x00000217
    8a94:	20000cb8 	.word	0x20000cb8
    8a98:	00002955 	.word	0x00002955
    8a9c:	0000023f 	.word	0x0000023f
    8aa0:	20000b82 	.word	0x20000b82
    8aa4:	0000e319 	.word	0x0000e319
    8aa8:	00000435 	.word	0x00000435
    8aac:	00000434 	.word	0x00000434
    8ab0:	0000043c 	.word	0x0000043c
    8ab4:	0000bf11 	.word	0x0000bf11
    8ab8:	00006961 	.word	0x00006961
    8abc:	20000c98 	.word	0x20000c98
    8ac0:	0000bf3d 	.word	0x0000bf3d
    8ac4:	20000b83 	.word	0x20000b83

00008ac8 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
    8ac8:	b590      	push	{r4, r7, lr}
    8aca:	b089      	sub	sp, #36	; 0x24
    8acc:	af00      	add	r7, sp, #0
    8ace:	0002      	movs	r2, r0
    8ad0:	1dfb      	adds	r3, r7, #7
    8ad2:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
    8ad4:	230b      	movs	r3, #11
    8ad6:	18fb      	adds	r3, r7, r3
    8ad8:	2200      	movs	r2, #0
    8ada:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
    8adc:	230c      	movs	r3, #12
    8ade:	18fb      	adds	r3, r7, r3
    8ae0:	1dfa      	adds	r2, r7, #7
    8ae2:	7812      	ldrb	r2, [r2, #0]
    8ae4:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8ae6:	4a55      	ldr	r2, [pc, #340]	; (8c3c <SendFrameOnChannel+0x174>)
    8ae8:	239c      	movs	r3, #156	; 0x9c
    8aea:	00db      	lsls	r3, r3, #3
    8aec:	58d3      	ldr	r3, [r2, r3]
    8aee:	22d5      	movs	r2, #213	; 0xd5
    8af0:	569a      	ldrsb	r2, [r3, r2]
    8af2:	230c      	movs	r3, #12
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    8af8:	4a50      	ldr	r2, [pc, #320]	; (8c3c <SendFrameOnChannel+0x174>)
    8afa:	239c      	movs	r3, #156	; 0x9c
    8afc:	00db      	lsls	r3, r3, #3
    8afe:	58d3      	ldr	r3, [r2, r3]
    8b00:	22d4      	movs	r2, #212	; 0xd4
    8b02:	569a      	ldrsb	r2, [r3, r2]
    8b04:	230c      	movs	r3, #12
    8b06:	18fb      	adds	r3, r7, r3
    8b08:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    8b0a:	4a4c      	ldr	r2, [pc, #304]	; (8c3c <SendFrameOnChannel+0x174>)
    8b0c:	239c      	movs	r3, #156	; 0x9c
    8b0e:	00db      	lsls	r3, r3, #3
    8b10:	58d2      	ldr	r2, [r2, r3]
    8b12:	2382      	movs	r3, #130	; 0x82
    8b14:	005b      	lsls	r3, r3, #1
    8b16:	58d2      	ldr	r2, [r2, r3]
    8b18:	230c      	movs	r3, #12
    8b1a:	18fb      	adds	r3, r7, r3
    8b1c:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    8b1e:	4a47      	ldr	r2, [pc, #284]	; (8c3c <SendFrameOnChannel+0x174>)
    8b20:	239c      	movs	r3, #156	; 0x9c
    8b22:	00db      	lsls	r3, r3, #3
    8b24:	58d2      	ldr	r2, [r2, r3]
    8b26:	2384      	movs	r3, #132	; 0x84
    8b28:	005b      	lsls	r3, r3, #1
    8b2a:	58d2      	ldr	r2, [r2, r3]
    8b2c:	230c      	movs	r3, #12
    8b2e:	18fb      	adds	r3, r7, r3
    8b30:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
    8b32:	4b42      	ldr	r3, [pc, #264]	; (8c3c <SendFrameOnChannel+0x174>)
    8b34:	891a      	ldrh	r2, [r3, #8]
    8b36:	230c      	movs	r3, #12
    8b38:	18fb      	adds	r3, r7, r3
    8b3a:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
    8b3c:	4b40      	ldr	r3, [pc, #256]	; (8c40 <SendFrameOnChannel+0x178>)
    8b3e:	4798      	blx	r3
    8b40:	1e03      	subs	r3, r0, #0
    8b42:	d001      	beq.n	8b48 <SendFrameOnChannel+0x80>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
    8b44:	230e      	movs	r3, #14
    8b46:	e074      	b.n	8c32 <SendFrameOnChannel+0x16a>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
    8b48:	4a3c      	ldr	r2, [pc, #240]	; (8c3c <SendFrameOnChannel+0x174>)
    8b4a:	239c      	movs	r3, #156	; 0x9c
    8b4c:	00db      	lsls	r3, r3, #3
    8b4e:	58d3      	ldr	r3, [r2, r3]
    8b50:	22c8      	movs	r2, #200	; 0xc8
    8b52:	5c9b      	ldrb	r3, [r3, r2]
    8b54:	2b01      	cmp	r3, #1
    8b56:	d10d      	bne.n	8b74 <SendFrameOnChannel+0xac>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
    8b58:	4b3a      	ldr	r3, [pc, #232]	; (8c44 <SendFrameOnChannel+0x17c>)
    8b5a:	4798      	blx	r3
    8b5c:	1e03      	subs	r3, r0, #0
    8b5e:	d001      	beq.n	8b64 <SendFrameOnChannel+0x9c>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    8b60:	230f      	movs	r3, #15
    8b62:	e066      	b.n	8c32 <SendFrameOnChannel+0x16a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
    8b64:	4b38      	ldr	r3, [pc, #224]	; (8c48 <SendFrameOnChannel+0x180>)
    8b66:	4798      	blx	r3
    8b68:	1e03      	subs	r3, r0, #0
    8b6a:	d001      	beq.n	8b70 <SendFrameOnChannel+0xa8>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
    8b6c:	230f      	movs	r3, #15
    8b6e:	e060      	b.n	8c32 <SendFrameOnChannel+0x16a>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
    8b70:	4b36      	ldr	r3, [pc, #216]	; (8c4c <SendFrameOnChannel+0x184>)
    8b72:	4798      	blx	r3
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
    8b74:	4a31      	ldr	r2, [pc, #196]	; (8c3c <SendFrameOnChannel+0x174>)
    8b76:	239c      	movs	r3, #156	; 0x9c
    8b78:	00db      	lsls	r3, r3, #3
    8b7a:	58d3      	ldr	r3, [r2, r3]
    8b7c:	7818      	ldrb	r0, [r3, #0]
    8b7e:	4b34      	ldr	r3, [pc, #208]	; (8c50 <SendFrameOnChannel+0x188>)
    8b80:	220b      	movs	r2, #11
    8b82:	18ba      	adds	r2, r7, r2
    8b84:	210c      	movs	r1, #12
    8b86:	1879      	adds	r1, r7, r1
    8b88:	4c32      	ldr	r4, [pc, #200]	; (8c54 <SendFrameOnChannel+0x18c>)
    8b8a:	47a0      	blx	r4

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    8b8c:	4b2b      	ldr	r3, [pc, #172]	; (8c3c <SendFrameOnChannel+0x174>)
    8b8e:	4a32      	ldr	r2, [pc, #200]	; (8c58 <SendFrameOnChannel+0x190>)
    8b90:	2101      	movs	r1, #1
    8b92:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8b94:	4a29      	ldr	r2, [pc, #164]	; (8c3c <SendFrameOnChannel+0x174>)
    8b96:	239c      	movs	r3, #156	; 0x9c
    8b98:	00db      	lsls	r3, r3, #3
    8b9a:	58d3      	ldr	r3, [r2, r3]
    8b9c:	22d5      	movs	r2, #213	; 0xd5
    8b9e:	569b      	ldrsb	r3, [r3, r2]
    8ba0:	b2d9      	uxtb	r1, r3
    8ba2:	4b26      	ldr	r3, [pc, #152]	; (8c3c <SendFrameOnChannel+0x174>)
    8ba4:	4a2d      	ldr	r2, [pc, #180]	; (8c5c <SendFrameOnChannel+0x194>)
    8ba6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
    8ba8:	230b      	movs	r3, #11
    8baa:	18fb      	adds	r3, r7, r3
    8bac:	2100      	movs	r1, #0
    8bae:	5659      	ldrsb	r1, [r3, r1]
    8bb0:	4b22      	ldr	r3, [pc, #136]	; (8c3c <SendFrameOnChannel+0x174>)
    8bb2:	4a2b      	ldr	r2, [pc, #172]	; (8c60 <SendFrameOnChannel+0x198>)
    8bb4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
    8bb6:	1dfb      	adds	r3, r7, #7
    8bb8:	7819      	ldrb	r1, [r3, #0]
    8bba:	4a20      	ldr	r2, [pc, #128]	; (8c3c <SendFrameOnChannel+0x174>)
    8bbc:	2388      	movs	r3, #136	; 0x88
    8bbe:	00db      	lsls	r3, r3, #3
    8bc0:	50d1      	str	r1, [r2, r3]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    8bc2:	4a1e      	ldr	r2, [pc, #120]	; (8c3c <SendFrameOnChannel+0x174>)
    8bc4:	2382      	movs	r3, #130	; 0x82
    8bc6:	00db      	lsls	r3, r3, #3
    8bc8:	58d1      	ldr	r1, [r2, r3]
    8bca:	4a1c      	ldr	r2, [pc, #112]	; (8c3c <SendFrameOnChannel+0x174>)
    8bcc:	2387      	movs	r3, #135	; 0x87
    8bce:	00db      	lsls	r3, r3, #3
    8bd0:	50d1      	str	r1, [r2, r3]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
    8bd2:	4a1a      	ldr	r2, [pc, #104]	; (8c3c <SendFrameOnChannel+0x174>)
    8bd4:	2382      	movs	r3, #130	; 0x82
    8bd6:	00db      	lsls	r3, r3, #3
    8bd8:	58d1      	ldr	r1, [r2, r3]
    8bda:	4a18      	ldr	r2, [pc, #96]	; (8c3c <SendFrameOnChannel+0x174>)
    8bdc:	2389      	movs	r3, #137	; 0x89
    8bde:	00db      	lsls	r3, r3, #3
    8be0:	50d1      	str	r1, [r2, r3]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
    8be2:	4b20      	ldr	r3, [pc, #128]	; (8c64 <SendFrameOnChannel+0x19c>)
    8be4:	4798      	blx	r3
    8be6:	1e03      	subs	r3, r0, #0
    8be8:	d00d      	beq.n	8c06 <SendFrameOnChannel+0x13e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
    8bea:	4a14      	ldr	r2, [pc, #80]	; (8c3c <SendFrameOnChannel+0x174>)
    8bec:	2382      	movs	r3, #130	; 0x82
    8bee:	00db      	lsls	r3, r3, #3
    8bf0:	58d3      	ldr	r3, [r2, r3]
    8bf2:	0018      	movs	r0, r3
    8bf4:	4b1c      	ldr	r3, [pc, #112]	; (8c68 <SendFrameOnChannel+0x1a0>)
    8bf6:	4798      	blx	r3
    8bf8:	0003      	movs	r3, r0
    8bfa:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
    8bfc:	69fb      	ldr	r3, [r7, #28]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d001      	beq.n	8c06 <SendFrameOnChannel+0x13e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
    8c02:	2310      	movs	r3, #16
    8c04:	e015      	b.n	8c32 <SendFrameOnChannel+0x16a>
        }
    }

    LoRaMacClassBHaltBeaconing( );
    8c06:	4b19      	ldr	r3, [pc, #100]	; (8c6c <SendFrameOnChannel+0x1a4>)
    8c08:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    8c0a:	4a0c      	ldr	r2, [pc, #48]	; (8c3c <SendFrameOnChannel+0x174>)
    8c0c:	23d6      	movs	r3, #214	; 0xd6
    8c0e:	009b      	lsls	r3, r3, #2
    8c10:	58d3      	ldr	r3, [r2, r3]
    8c12:	2202      	movs	r2, #2
    8c14:	431a      	orrs	r2, r3
    8c16:	0011      	movs	r1, r2
    8c18:	4a08      	ldr	r2, [pc, #32]	; (8c3c <SendFrameOnChannel+0x174>)
    8c1a:	23d6      	movs	r3, #214	; 0xd6
    8c1c:	009b      	lsls	r3, r3, #2
    8c1e:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
    8c20:	4b13      	ldr	r3, [pc, #76]	; (8c70 <SendFrameOnChannel+0x1a8>)
    8c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c24:	4a05      	ldr	r2, [pc, #20]	; (8c3c <SendFrameOnChannel+0x174>)
    8c26:	8912      	ldrh	r2, [r2, #8]
    8c28:	b2d1      	uxtb	r1, r2
    8c2a:	4a12      	ldr	r2, [pc, #72]	; (8c74 <SendFrameOnChannel+0x1ac>)
    8c2c:	0010      	movs	r0, r2
    8c2e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
    8c30:	2300      	movs	r3, #0
}
    8c32:	0018      	movs	r0, r3
    8c34:	46bd      	mov	sp, r7
    8c36:	b009      	add	sp, #36	; 0x24
    8c38:	bd90      	pop	{r4, r7, pc}
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	20000b78 	.word	0x20000b78
    8c40:	0000b8bb 	.word	0x0000b8bb
    8c44:	0000b8c7 	.word	0x0000b8c7
    8c48:	0000b8d3 	.word	0x0000b8d3
    8c4c:	0000b9b9 	.word	0x0000b9b9
    8c50:	20000f88 	.word	0x20000f88
    8c54:	0000f1f9 	.word	0x0000f1f9
    8c58:	00000431 	.word	0x00000431
    8c5c:	00000432 	.word	0x00000432
    8c60:	00000433 	.word	0x00000433
    8c64:	0000b8df 	.word	0x0000b8df
    8c68:	0000b9a7 	.word	0x0000b9a7
    8c6c:	0000b8ff 	.word	0x0000b8ff
    8c70:	0001efe8 	.word	0x0001efe8
    8c74:	20000b82 	.word	0x20000b82

00008c78 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
    8c78:	b580      	push	{r7, lr}
    8c7a:	b086      	sub	sp, #24
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	0002      	movs	r2, r0
    8c80:	1dbb      	adds	r3, r7, #6
    8c82:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
    8c84:	4a27      	ldr	r2, [pc, #156]	; (8d24 <SetTxContinuousWave+0xac>)
    8c86:	239c      	movs	r3, #156	; 0x9c
    8c88:	00db      	lsls	r3, r3, #3
    8c8a:	58d2      	ldr	r2, [r2, r3]
    8c8c:	2314      	movs	r3, #20
    8c8e:	33ff      	adds	r3, #255	; 0xff
    8c90:	5cd2      	ldrb	r2, [r2, r3]
    8c92:	2308      	movs	r3, #8
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    8c98:	4a22      	ldr	r2, [pc, #136]	; (8d24 <SetTxContinuousWave+0xac>)
    8c9a:	239c      	movs	r3, #156	; 0x9c
    8c9c:	00db      	lsls	r3, r3, #3
    8c9e:	58d3      	ldr	r3, [r2, r3]
    8ca0:	22d5      	movs	r2, #213	; 0xd5
    8ca2:	569a      	ldrsb	r2, [r3, r2]
    8ca4:	2308      	movs	r3, #8
    8ca6:	18fb      	adds	r3, r7, r3
    8ca8:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    8caa:	4a1e      	ldr	r2, [pc, #120]	; (8d24 <SetTxContinuousWave+0xac>)
    8cac:	239c      	movs	r3, #156	; 0x9c
    8cae:	00db      	lsls	r3, r3, #3
    8cb0:	58d3      	ldr	r3, [r2, r3]
    8cb2:	22d4      	movs	r2, #212	; 0xd4
    8cb4:	569a      	ldrsb	r2, [r3, r2]
    8cb6:	2308      	movs	r3, #8
    8cb8:	18fb      	adds	r3, r7, r3
    8cba:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
    8cbc:	4a19      	ldr	r2, [pc, #100]	; (8d24 <SetTxContinuousWave+0xac>)
    8cbe:	239c      	movs	r3, #156	; 0x9c
    8cc0:	00db      	lsls	r3, r3, #3
    8cc2:	58d2      	ldr	r2, [r2, r3]
    8cc4:	2382      	movs	r3, #130	; 0x82
    8cc6:	005b      	lsls	r3, r3, #1
    8cc8:	58d2      	ldr	r2, [r2, r3]
    8cca:	2308      	movs	r3, #8
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    8cd0:	4a14      	ldr	r2, [pc, #80]	; (8d24 <SetTxContinuousWave+0xac>)
    8cd2:	239c      	movs	r3, #156	; 0x9c
    8cd4:	00db      	lsls	r3, r3, #3
    8cd6:	58d2      	ldr	r2, [r2, r3]
    8cd8:	2384      	movs	r3, #132	; 0x84
    8cda:	005b      	lsls	r3, r3, #1
    8cdc:	58d2      	ldr	r2, [r2, r3]
    8cde:	2308      	movs	r3, #8
    8ce0:	18fb      	adds	r3, r7, r3
    8ce2:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
    8ce4:	2308      	movs	r3, #8
    8ce6:	18fb      	adds	r3, r7, r3
    8ce8:	1dba      	adds	r2, r7, #6
    8cea:	8812      	ldrh	r2, [r2, #0]
    8cec:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
    8cee:	4a0d      	ldr	r2, [pc, #52]	; (8d24 <SetTxContinuousWave+0xac>)
    8cf0:	239c      	movs	r3, #156	; 0x9c
    8cf2:	00db      	lsls	r3, r3, #3
    8cf4:	58d3      	ldr	r3, [r2, r3]
    8cf6:	781b      	ldrb	r3, [r3, #0]
    8cf8:	2208      	movs	r2, #8
    8cfa:	18ba      	adds	r2, r7, r2
    8cfc:	0011      	movs	r1, r2
    8cfe:	0018      	movs	r0, r3
    8d00:	4b09      	ldr	r3, [pc, #36]	; (8d28 <SetTxContinuousWave+0xb0>)
    8d02:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    8d04:	4a07      	ldr	r2, [pc, #28]	; (8d24 <SetTxContinuousWave+0xac>)
    8d06:	23d6      	movs	r3, #214	; 0xd6
    8d08:	009b      	lsls	r3, r3, #2
    8d0a:	58d3      	ldr	r3, [r2, r3]
    8d0c:	2202      	movs	r2, #2
    8d0e:	431a      	orrs	r2, r3
    8d10:	0011      	movs	r1, r2
    8d12:	4a04      	ldr	r2, [pc, #16]	; (8d24 <SetTxContinuousWave+0xac>)
    8d14:	23d6      	movs	r3, #214	; 0xd6
    8d16:	009b      	lsls	r3, r3, #2
    8d18:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
    8d1a:	2300      	movs	r3, #0
}
    8d1c:	0018      	movs	r0, r3
    8d1e:	46bd      	mov	sp, r7
    8d20:	b006      	add	sp, #24
    8d22:	bd80      	pop	{r7, pc}
    8d24:	20000b78 	.word	0x20000b78
    8d28:	0000f3f1 	.word	0x0000f3f1

00008d2c <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
    8d2c:	b580      	push	{r7, lr}
    8d2e:	b082      	sub	sp, #8
    8d30:	af00      	add	r7, sp, #0
    8d32:	6039      	str	r1, [r7, #0]
    8d34:	0011      	movs	r1, r2
    8d36:	1dbb      	adds	r3, r7, #6
    8d38:	1c02      	adds	r2, r0, #0
    8d3a:	801a      	strh	r2, [r3, #0]
    8d3c:	1d7b      	adds	r3, r7, #5
    8d3e:	1c0a      	adds	r2, r1, #0
    8d40:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
    8d42:	4b0c      	ldr	r3, [pc, #48]	; (8d74 <SetTxContinuousWave1+0x48>)
    8d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8d46:	1d7a      	adds	r2, r7, #5
    8d48:	2100      	movs	r1, #0
    8d4a:	5651      	ldrsb	r1, [r2, r1]
    8d4c:	1dba      	adds	r2, r7, #6
    8d4e:	8812      	ldrh	r2, [r2, #0]
    8d50:	6838      	ldr	r0, [r7, #0]
    8d52:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
    8d54:	4a08      	ldr	r2, [pc, #32]	; (8d78 <SetTxContinuousWave1+0x4c>)
    8d56:	23d6      	movs	r3, #214	; 0xd6
    8d58:	009b      	lsls	r3, r3, #2
    8d5a:	58d3      	ldr	r3, [r2, r3]
    8d5c:	2202      	movs	r2, #2
    8d5e:	431a      	orrs	r2, r3
    8d60:	0011      	movs	r1, r2
    8d62:	4a05      	ldr	r2, [pc, #20]	; (8d78 <SetTxContinuousWave1+0x4c>)
    8d64:	23d6      	movs	r3, #214	; 0xd6
    8d66:	009b      	lsls	r3, r3, #2
    8d68:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
    8d6a:	2300      	movs	r3, #0
}
    8d6c:	0018      	movs	r0, r3
    8d6e:	46bd      	mov	sp, r7
    8d70:	b002      	add	sp, #8
    8d72:	bd80      	pop	{r7, pc}
    8d74:	0001efe8 	.word	0x0001efe8
    8d78:	20000b78 	.word	0x20000b78

00008d7c <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b082      	sub	sp, #8
    8d80:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
    8d82:	4b24      	ldr	r3, [pc, #144]	; (8e14 <GetCtxs+0x98>)
    8d84:	4a24      	ldr	r2, [pc, #144]	; (8e18 <GetCtxs+0x9c>)
    8d86:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
    8d88:	4b22      	ldr	r3, [pc, #136]	; (8e14 <GetCtxs+0x98>)
    8d8a:	2290      	movs	r2, #144	; 0x90
    8d8c:	0092      	lsls	r2, r2, #2
    8d8e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
    8d90:	4b22      	ldr	r3, [pc, #136]	; (8e1c <GetCtxs+0xa0>)
    8d92:	0018      	movs	r0, r3
    8d94:	4b22      	ldr	r3, [pc, #136]	; (8e20 <GetCtxs+0xa4>)
    8d96:	4798      	blx	r3
    8d98:	0002      	movs	r2, r0
    8d9a:	4b1e      	ldr	r3, [pc, #120]	; (8e14 <GetCtxs+0x98>)
    8d9c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
    8d9e:	2300      	movs	r3, #0
    8da0:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
    8da2:	4a20      	ldr	r2, [pc, #128]	; (8e24 <GetCtxs+0xa8>)
    8da4:	239c      	movs	r3, #156	; 0x9c
    8da6:	00db      	lsls	r3, r3, #3
    8da8:	58d3      	ldr	r3, [r2, r3]
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	1d3a      	adds	r2, r7, #4
    8dae:	0011      	movs	r1, r2
    8db0:	0018      	movs	r0, r3
    8db2:	4b1d      	ldr	r3, [pc, #116]	; (8e28 <GetCtxs+0xac>)
    8db4:	4798      	blx	r3
    8db6:	0002      	movs	r2, r0
    8db8:	4b16      	ldr	r3, [pc, #88]	; (8e14 <GetCtxs+0x98>)
    8dba:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
    8dbc:	687a      	ldr	r2, [r7, #4]
    8dbe:	4b15      	ldr	r3, [pc, #84]	; (8e14 <GetCtxs+0x98>)
    8dc0:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
    8dc2:	4b1a      	ldr	r3, [pc, #104]	; (8e2c <GetCtxs+0xb0>)
    8dc4:	0018      	movs	r0, r3
    8dc6:	4b1a      	ldr	r3, [pc, #104]	; (8e30 <GetCtxs+0xb4>)
    8dc8:	4798      	blx	r3
    8dca:	0002      	movs	r2, r0
    8dcc:	4b11      	ldr	r3, [pc, #68]	; (8e14 <GetCtxs+0x98>)
    8dce:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
    8dd0:	4b18      	ldr	r3, [pc, #96]	; (8e34 <GetCtxs+0xb8>)
    8dd2:	0018      	movs	r0, r3
    8dd4:	4b18      	ldr	r3, [pc, #96]	; (8e38 <GetCtxs+0xbc>)
    8dd6:	4798      	blx	r3
    8dd8:	0002      	movs	r2, r0
    8dda:	4b0e      	ldr	r3, [pc, #56]	; (8e14 <GetCtxs+0x98>)
    8ddc:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
    8dde:	4b17      	ldr	r3, [pc, #92]	; (8e3c <GetCtxs+0xc0>)
    8de0:	0018      	movs	r0, r3
    8de2:	4b17      	ldr	r3, [pc, #92]	; (8e40 <GetCtxs+0xc4>)
    8de4:	4798      	blx	r3
    8de6:	0002      	movs	r2, r0
    8de8:	4b0a      	ldr	r3, [pc, #40]	; (8e14 <GetCtxs+0x98>)
    8dea:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
    8dec:	4b15      	ldr	r3, [pc, #84]	; (8e44 <GetCtxs+0xc8>)
    8dee:	0018      	movs	r0, r3
    8df0:	4b15      	ldr	r3, [pc, #84]	; (8e48 <GetCtxs+0xcc>)
    8df2:	4798      	blx	r3
    8df4:	0002      	movs	r2, r0
    8df6:	4b07      	ldr	r3, [pc, #28]	; (8e14 <GetCtxs+0x98>)
    8df8:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
    8dfa:	4b14      	ldr	r3, [pc, #80]	; (8e4c <GetCtxs+0xd0>)
    8dfc:	0018      	movs	r0, r3
    8dfe:	4b14      	ldr	r3, [pc, #80]	; (8e50 <GetCtxs+0xd4>)
    8e00:	4798      	blx	r3
    8e02:	0002      	movs	r2, r0
    8e04:	4b03      	ldr	r3, [pc, #12]	; (8e14 <GetCtxs+0x98>)
    8e06:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
    8e08:	4b02      	ldr	r3, [pc, #8]	; (8e14 <GetCtxs+0x98>)
}
    8e0a:	0018      	movs	r0, r3
    8e0c:	46bd      	mov	sp, r7
    8e0e:	b002      	add	sp, #8
    8e10:	bd80      	pop	{r7, pc}
    8e12:	46c0      	nop			; (mov r8, r8)
    8e14:	20001bec 	.word	0x20001bec
    8e18:	2000105c 	.word	0x2000105c
    8e1c:	20001c00 	.word	0x20001c00
    8e20:	0000d471 	.word	0x0000d471
    8e24:	20000b78 	.word	0x20000b78
    8e28:	0000f0a1 	.word	0x0000f0a1
    8e2c:	20001c08 	.word	0x20001c08
    8e30:	00012f69 	.word	0x00012f69
    8e34:	20001c10 	.word	0x20001c10
    8e38:	0000bc99 	.word	0x0000bc99
    8e3c:	20001c18 	.word	0x20001c18
    8e40:	0000b813 	.word	0x0000b813
    8e44:	20001c20 	.word	0x20001c20
    8e48:	0000c149 	.word	0x0000c149
    8e4c:	20001c28 	.word	0x20001c28
    8e50:	0000e125 	.word	0x0000e125

00008e54 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
    8e54:	b580      	push	{r7, lr}
    8e56:	b088      	sub	sp, #32
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    8e5c:	231f      	movs	r3, #31
    8e5e:	18fb      	adds	r3, r7, r3
    8e60:	2200      	movs	r2, #0
    8e62:	701a      	strb	r2, [r3, #0]
    MacCommand_t* macCmd = NULL;
    8e64:	2300      	movs	r3, #0
    8e66:	61bb      	str	r3, [r7, #24]
    uint8_t cmdPayload = 0;
    8e68:	2317      	movs	r3, #23
    8e6a:	18fb      	adds	r3, r7, r3
    8e6c:	2200      	movs	r2, #0
    8e6e:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState != LORAMAC_STOPPED )
    8e70:	4a53      	ldr	r2, [pc, #332]	; (8fc0 <RestoreCtxs+0x16c>)
    8e72:	23d6      	movs	r3, #214	; 0xd6
    8e74:	009b      	lsls	r3, r3, #2
    8e76:	58d3      	ldr	r3, [r2, r3]
    8e78:	2b01      	cmp	r3, #1
    8e7a:	d001      	beq.n	8e80 <RestoreCtxs+0x2c>
    {
        return LORAMAC_STATUS_BUSY;
    8e7c:	2301      	movs	r3, #1
    8e7e:	e09b      	b.n	8fb8 <RestoreCtxs+0x164>
    }
    if( contexts == NULL )
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	2b00      	cmp	r3, #0
    8e84:	d103      	bne.n	8e8e <RestoreCtxs+0x3a>
    {
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    8e86:	231f      	movs	r3, #31
    8e88:	18fb      	adds	r3, r7, r3
    8e8a:	2203      	movs	r2, #3
    8e8c:	701a      	strb	r2, [r3, #0]
    }

    if( contexts->MacNvmCtx != NULL )
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	681b      	ldr	r3, [r3, #0]
    8e92:	2b00      	cmp	r3, #0
    8e94:	d009      	beq.n	8eaa <RestoreCtxs+0x56>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
    8e96:	687b      	ldr	r3, [r7, #4]
    8e98:	6819      	ldr	r1, [r3, #0]
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	685b      	ldr	r3, [r3, #4]
    8e9e:	b29a      	uxth	r2, r3
    8ea0:	4b48      	ldr	r3, [pc, #288]	; (8fc4 <RestoreCtxs+0x170>)
    8ea2:	0018      	movs	r0, r3
    8ea4:	4b48      	ldr	r3, [pc, #288]	; (8fc8 <RestoreCtxs+0x174>)
    8ea6:	4798      	blx	r3
    8ea8:	e003      	b.n	8eb2 <RestoreCtxs+0x5e>
    }
    else
    {
        status = LORAMAC_STATUS_PARAMETER_INVALID;
    8eaa:	231f      	movs	r3, #31
    8eac:	18fb      	adds	r3, r7, r3
    8eae:	2203      	movs	r2, #3
    8eb0:	701a      	strb	r2, [r3, #0]
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
    8eb2:	230c      	movs	r3, #12
    8eb4:	18fb      	adds	r3, r7, r3
    8eb6:	2202      	movs	r2, #2
    8eb8:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
    8eba:	687b      	ldr	r3, [r7, #4]
    8ebc:	689a      	ldr	r2, [r3, #8]
    8ebe:	230c      	movs	r3, #12
    8ec0:	18fb      	adds	r3, r7, r3
    8ec2:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    8ec4:	4a3e      	ldr	r2, [pc, #248]	; (8fc0 <RestoreCtxs+0x16c>)
    8ec6:	239c      	movs	r3, #156	; 0x9c
    8ec8:	00db      	lsls	r3, r3, #3
    8eca:	58d3      	ldr	r3, [r2, r3]
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	220c      	movs	r2, #12
    8ed0:	18ba      	adds	r2, r7, r2
    8ed2:	0011      	movs	r1, r2
    8ed4:	0018      	movs	r0, r3
    8ed6:	4b3d      	ldr	r3, [pc, #244]	; (8fcc <RestoreCtxs+0x178>)
    8ed8:	4798      	blx	r3

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
    8eda:	687b      	ldr	r3, [r7, #4]
    8edc:	699b      	ldr	r3, [r3, #24]
    8ede:	0018      	movs	r0, r3
    8ee0:	4b3b      	ldr	r3, [pc, #236]	; (8fd0 <RestoreCtxs+0x17c>)
    8ee2:	4798      	blx	r3
    8ee4:	1e03      	subs	r3, r0, #0
    8ee6:	d003      	beq.n	8ef0 <RestoreCtxs+0x9c>
    {
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    8ee8:	231f      	movs	r3, #31
    8eea:	18fb      	adds	r3, r7, r3
    8eec:	2211      	movs	r2, #17
    8eee:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
    8ef0:	687b      	ldr	r3, [r7, #4]
    8ef2:	691b      	ldr	r3, [r3, #16]
    8ef4:	0018      	movs	r0, r3
    8ef6:	4b37      	ldr	r3, [pc, #220]	; (8fd4 <RestoreCtxs+0x180>)
    8ef8:	4798      	blx	r3
    8efa:	1e03      	subs	r3, r0, #0
    8efc:	d003      	beq.n	8f06 <RestoreCtxs+0xb2>
    {
        status = LORAMAC_STATUS_CRYPTO_ERROR;
    8efe:	231f      	movs	r3, #31
    8f00:	18fb      	adds	r3, r7, r3
    8f02:	2211      	movs	r2, #17
    8f04:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8f0a:	0018      	movs	r0, r3
    8f0c:	4b32      	ldr	r3, [pc, #200]	; (8fd8 <RestoreCtxs+0x184>)
    8f0e:	4798      	blx	r3
    8f10:	1e03      	subs	r3, r0, #0
    8f12:	d003      	beq.n	8f1c <RestoreCtxs+0xc8>
    {
        status = LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    8f14:	231f      	movs	r3, #31
    8f16:	18fb      	adds	r3, r7, r3
    8f18:	2212      	movs	r2, #18
    8f1a:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	6a1b      	ldr	r3, [r3, #32]
    8f20:	0018      	movs	r0, r3
    8f22:	4b2e      	ldr	r3, [pc, #184]	; (8fdc <RestoreCtxs+0x188>)
    8f24:	4798      	blx	r3
    8f26:	1e03      	subs	r3, r0, #0
    8f28:	d003      	beq.n	8f32 <RestoreCtxs+0xde>
    {
        status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    8f2a:	231f      	movs	r3, #31
    8f2c:	18fb      	adds	r3, r7, r3
    8f2e:	2213      	movs	r2, #19
    8f30:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
    8f32:	687b      	ldr	r3, [r7, #4]
    8f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f36:	0018      	movs	r0, r3
    8f38:	4b29      	ldr	r3, [pc, #164]	; (8fe0 <RestoreCtxs+0x18c>)
    8f3a:	4798      	blx	r3
    8f3c:	0003      	movs	r3, r0
    8f3e:	001a      	movs	r2, r3
    8f40:	2301      	movs	r3, #1
    8f42:	4053      	eors	r3, r2
    8f44:	b2db      	uxtb	r3, r3
    8f46:	2b00      	cmp	r3, #0
    8f48:	d003      	beq.n	8f52 <RestoreCtxs+0xfe>
    {
        status = LORAMAC_STATUS_CLASS_B_ERROR;
    8f4a:	231f      	movs	r3, #31
    8f4c:	18fb      	adds	r3, r7, r3
    8f4e:	2214      	movs	r2, #20
    8f50:	701a      	strb	r2, [r3, #0]
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f56:	0018      	movs	r0, r3
    8f58:	4b22      	ldr	r3, [pc, #136]	; (8fe4 <RestoreCtxs+0x190>)
    8f5a:	4798      	blx	r3
    8f5c:	0003      	movs	r3, r0
    8f5e:	001a      	movs	r2, r3
    8f60:	2301      	movs	r3, #1
    8f62:	4053      	eors	r3, r2
    8f64:	b2db      	uxtb	r3, r3
    8f66:	2b00      	cmp	r3, #0
    8f68:	d003      	beq.n	8f72 <RestoreCtxs+0x11e>
    {
        status = LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
    8f6a:	231f      	movs	r3, #31
    8f6c:	18fb      	adds	r3, r7, r3
    8f6e:	2215      	movs	r2, #21
    8f70:	701a      	strb	r2, [r3, #0]
    }

    if( status != LORAMAC_STATUS_OK)
    8f72:	231f      	movs	r3, #31
    8f74:	18fb      	adds	r3, r7, r3
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d01a      	beq.n	8fb2 <RestoreCtxs+0x15e>
    {
        if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd ) != LORAMAC_COMMANDS_SUCCESS )
    8f7c:	2318      	movs	r3, #24
    8f7e:	18fb      	adds	r3, r7, r3
    8f80:	0019      	movs	r1, r3
    8f82:	2001      	movs	r0, #1
    8f84:	4b18      	ldr	r3, [pc, #96]	; (8fe8 <RestoreCtxs+0x194>)
    8f86:	4798      	blx	r3
    8f88:	1e03      	subs	r3, r0, #0
    8f8a:	d012      	beq.n	8fb2 <RestoreCtxs+0x15e>
        {
            cmdPayload = 0x0F & MacCtx.NvmCtx->Version.Fields.Minor;
    8f8c:	4a0c      	ldr	r2, [pc, #48]	; (8fc0 <RestoreCtxs+0x16c>)
    8f8e:	239c      	movs	r3, #156	; 0x9c
    8f90:	00db      	lsls	r3, r3, #3
    8f92:	58d3      	ldr	r3, [r2, r3]
    8f94:	4a15      	ldr	r2, [pc, #84]	; (8fec <RestoreCtxs+0x198>)
    8f96:	5c9b      	ldrb	r3, [r3, r2]
    8f98:	220f      	movs	r2, #15
    8f9a:	4013      	ands	r3, r2
    8f9c:	b2da      	uxtb	r2, r3
    8f9e:	2317      	movs	r3, #23
    8fa0:	18fb      	adds	r3, r7, r3
    8fa2:	701a      	strb	r2, [r3, #0]
            LoRaMacCommandsAddCmd( MOTE_MAC_RESET_IND, &cmdPayload, 1 );
    8fa4:	2317      	movs	r3, #23
    8fa6:	18fb      	adds	r3, r7, r3
    8fa8:	2201      	movs	r2, #1
    8faa:	0019      	movs	r1, r3
    8fac:	2001      	movs	r0, #1
    8fae:	4b10      	ldr	r3, [pc, #64]	; (8ff0 <RestoreCtxs+0x19c>)
    8fb0:	4798      	blx	r3
        }
    }
    return status;
    8fb2:	231f      	movs	r3, #31
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	781b      	ldrb	r3, [r3, #0]
}
    8fb8:	0018      	movs	r0, r3
    8fba:	46bd      	mov	sp, r7
    8fbc:	b008      	add	sp, #32
    8fbe:	bd80      	pop	{r7, pc}
    8fc0:	20000b78 	.word	0x20000b78
    8fc4:	2000105c 	.word	0x2000105c
    8fc8:	00002955 	.word	0x00002955
    8fcc:	0000f071 	.word	0x0000f071
    8fd0:	00012f35 	.word	0x00012f35
    8fd4:	0000d441 	.word	0x0000d441
    8fd8:	0000e0f5 	.word	0x0000e0f5
    8fdc:	0000bc69 	.word	0x0000bc69
    8fe0:	0000b801 	.word	0x0000b801
    8fe4:	0000c119 	.word	0x0000c119
    8fe8:	0000bde9 	.word	0x0000bde9
    8fec:	0000021e 	.word	0x0000021e
    8ff0:	0000bcb5 	.word	0x0000bcb5

00008ff4 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    8ff4:	b580      	push	{r7, lr}
    8ff6:	b082      	sub	sp, #8
    8ff8:	af00      	add	r7, sp, #0
    8ffa:	6078      	str	r0, [r7, #4]
    8ffc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
    8ffe:	687b      	ldr	r3, [r7, #4]
    9000:	2b00      	cmp	r3, #0
    9002:	d002      	beq.n	900a <DetermineFrameType+0x16>
    9004:	683b      	ldr	r3, [r7, #0]
    9006:	2b00      	cmp	r3, #0
    9008:	d101      	bne.n	900e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    900a:	2303      	movs	r3, #3
    900c:	e03b      	b.n	9086 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	7b1b      	ldrb	r3, [r3, #12]
    9012:	071b      	lsls	r3, r3, #28
    9014:	0f1b      	lsrs	r3, r3, #28
    9016:	b2db      	uxtb	r3, r3
    9018:	2b00      	cmp	r3, #0
    901a:	dd08      	ble.n	902e <DetermineFrameType+0x3a>
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	2220      	movs	r2, #32
    9020:	5c9b      	ldrb	r3, [r3, r2]
    9022:	2b00      	cmp	r3, #0
    9024:	d003      	beq.n	902e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
    9026:	683b      	ldr	r3, [r7, #0]
    9028:	2200      	movs	r2, #0
    902a:	701a      	strb	r2, [r3, #0]
    902c:	e02a      	b.n	9084 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	2228      	movs	r2, #40	; 0x28
    9032:	5c9b      	ldrb	r3, [r3, r2]
    9034:	2b00      	cmp	r3, #0
    9036:	d103      	bne.n	9040 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
    9038:	683b      	ldr	r3, [r7, #0]
    903a:	2201      	movs	r2, #1
    903c:	701a      	strb	r2, [r3, #0]
    903e:	e021      	b.n	9084 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	7b1b      	ldrb	r3, [r3, #12]
    9044:	220f      	movs	r2, #15
    9046:	4013      	ands	r3, r2
    9048:	b2db      	uxtb	r3, r3
    904a:	2b00      	cmp	r3, #0
    904c:	d108      	bne.n	9060 <DetermineFrameType+0x6c>
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	2220      	movs	r2, #32
    9052:	5c9b      	ldrb	r3, [r3, r2]
    9054:	2b00      	cmp	r3, #0
    9056:	d103      	bne.n	9060 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
    9058:	683b      	ldr	r3, [r7, #0]
    905a:	2202      	movs	r2, #2
    905c:	701a      	strb	r2, [r3, #0]
    905e:	e011      	b.n	9084 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	7b1b      	ldrb	r3, [r3, #12]
    9064:	220f      	movs	r2, #15
    9066:	4013      	ands	r3, r2
    9068:	b2db      	uxtb	r3, r3
    906a:	2b00      	cmp	r3, #0
    906c:	d108      	bne.n	9080 <DetermineFrameType+0x8c>
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	2220      	movs	r2, #32
    9072:	5c9b      	ldrb	r3, [r3, r2]
    9074:	2b00      	cmp	r3, #0
    9076:	d003      	beq.n	9080 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
    9078:	683b      	ldr	r3, [r7, #0]
    907a:	2203      	movs	r2, #3
    907c:	701a      	strb	r2, [r3, #0]
    907e:	e001      	b.n	9084 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    9080:	2316      	movs	r3, #22
    9082:	e000      	b.n	9086 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
    9084:	2300      	movs	r3, #0
}
    9086:	0018      	movs	r0, r3
    9088:	46bd      	mov	sp, r7
    908a:	b002      	add	sp, #8
    908c:	bd80      	pop	{r7, pc}
	...

00009090 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    9090:	b580      	push	{r7, lr}
    9092:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9094:	4a17      	ldr	r2, [pc, #92]	; (90f4 <CheckRetransUnconfirmedUplink+0x64>)
    9096:	239c      	movs	r3, #156	; 0x9c
    9098:	00db      	lsls	r3, r3, #3
    909a:	58d2      	ldr	r2, [r2, r3]
    909c:	2388      	movs	r3, #136	; 0x88
    909e:	005b      	lsls	r3, r3, #1
    90a0:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
    90a2:	4914      	ldr	r1, [pc, #80]	; (90f4 <CheckRetransUnconfirmedUplink+0x64>)
    90a4:	239c      	movs	r3, #156	; 0x9c
    90a6:	00db      	lsls	r3, r3, #3
    90a8:	58cb      	ldr	r3, [r1, r3]
    90aa:	21f4      	movs	r1, #244	; 0xf4
    90ac:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    90ae:	429a      	cmp	r2, r3
    90b0:	d301      	bcc.n	90b6 <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
    90b2:	2301      	movs	r3, #1
    90b4:	e01a      	b.n	90ec <CheckRetransUnconfirmedUplink+0x5c>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    90b6:	4b0f      	ldr	r3, [pc, #60]	; (90f4 <CheckRetransUnconfirmedUplink+0x64>)
    90b8:	4a0f      	ldr	r2, [pc, #60]	; (90f8 <CheckRetransUnconfirmedUplink+0x68>)
    90ba:	5c9b      	ldrb	r3, [r3, r2]
    90bc:	2202      	movs	r2, #2
    90be:	4013      	ands	r3, r2
    90c0:	b2db      	uxtb	r3, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	d011      	beq.n	90ea <CheckRetransUnconfirmedUplink+0x5a>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
    90c6:	4a0b      	ldr	r2, [pc, #44]	; (90f4 <CheckRetransUnconfirmedUplink+0x64>)
    90c8:	239c      	movs	r3, #156	; 0x9c
    90ca:	00db      	lsls	r3, r3, #3
    90cc:	58d3      	ldr	r3, [r2, r3]
    90ce:	22c8      	movs	r2, #200	; 0xc8
    90d0:	5c9b      	ldrb	r3, [r3, r2]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d101      	bne.n	90da <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
    90d6:	2301      	movs	r3, #1
    90d8:	e008      	b.n	90ec <CheckRetransUnconfirmedUplink+0x5c>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
    90da:	4a06      	ldr	r2, [pc, #24]	; (90f4 <CheckRetransUnconfirmedUplink+0x64>)
    90dc:	238e      	movs	r3, #142	; 0x8e
    90de:	00db      	lsls	r3, r3, #3
    90e0:	5cd3      	ldrb	r3, [r2, r3]
    90e2:	2b00      	cmp	r3, #0
    90e4:	d101      	bne.n	90ea <CheckRetransUnconfirmedUplink+0x5a>
            {
                return true;
    90e6:	2301      	movs	r3, #1
    90e8:	e000      	b.n	90ec <CheckRetransUnconfirmedUplink+0x5c>
            }
        }
    }
    return false;
    90ea:	2300      	movs	r3, #0
}
    90ec:	0018      	movs	r0, r3
    90ee:	46bd      	mov	sp, r7
    90f0:	bd80      	pop	{r7, pc}
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	20000b78 	.word	0x20000b78
    90f8:	00000471 	.word	0x00000471

000090fc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    90fc:	b580      	push	{r7, lr}
    90fe:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    9100:	4a11      	ldr	r2, [pc, #68]	; (9148 <CheckRetransConfirmedUplink+0x4c>)
    9102:	239c      	movs	r3, #156	; 0x9c
    9104:	00db      	lsls	r3, r3, #3
    9106:	58d2      	ldr	r2, [r2, r3]
    9108:	2388      	movs	r3, #136	; 0x88
    910a:	005b      	lsls	r3, r3, #1
    910c:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
    910e:	490e      	ldr	r1, [pc, #56]	; (9148 <CheckRetransConfirmedUplink+0x4c>)
    9110:	239c      	movs	r3, #156	; 0x9c
    9112:	00db      	lsls	r3, r3, #3
    9114:	58cb      	ldr	r3, [r1, r3]
    9116:	21f4      	movs	r1, #244	; 0xf4
    9118:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
    911a:	429a      	cmp	r2, r3
    911c:	d301      	bcc.n	9122 <CheckRetransConfirmedUplink+0x26>
    {
        return true;
    911e:	2301      	movs	r3, #1
    9120:	e00f      	b.n	9142 <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
    9122:	4b09      	ldr	r3, [pc, #36]	; (9148 <CheckRetransConfirmedUplink+0x4c>)
    9124:	4a09      	ldr	r2, [pc, #36]	; (914c <CheckRetransConfirmedUplink+0x50>)
    9126:	5c9b      	ldrb	r3, [r3, r2]
    9128:	2202      	movs	r2, #2
    912a:	4013      	ands	r3, r2
    912c:	b2db      	uxtb	r3, r3
    912e:	2b00      	cmp	r3, #0
    9130:	d006      	beq.n	9140 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
    9132:	4b05      	ldr	r3, [pc, #20]	; (9148 <CheckRetransConfirmedUplink+0x4c>)
    9134:	4a06      	ldr	r2, [pc, #24]	; (9150 <CheckRetransConfirmedUplink+0x54>)
    9136:	5c9b      	ldrb	r3, [r3, r2]
    9138:	2b00      	cmp	r3, #0
    913a:	d001      	beq.n	9140 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
    913c:	2301      	movs	r3, #1
    913e:	e000      	b.n	9142 <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
    9140:	2300      	movs	r3, #0
}
    9142:	0018      	movs	r0, r3
    9144:	46bd      	mov	sp, r7
    9146:	bd80      	pop	{r7, pc}
    9148:	20000b78 	.word	0x20000b78
    914c:	00000471 	.word	0x00000471
    9150:	00000434 	.word	0x00000434

00009154 <StopRetransmission>:


static bool StopRetransmission( void )
{
    9154:	b580      	push	{r7, lr}
    9156:	b082      	sub	sp, #8
    9158:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
    915a:	2300      	movs	r3, #0
    915c:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
    915e:	1d3b      	adds	r3, r7, #4
    9160:	0018      	movs	r0, r3
    9162:	4b4d      	ldr	r3, [pc, #308]	; (9298 <StopRetransmission+0x144>)
    9164:	4798      	blx	r3
    9166:	1e03      	subs	r3, r0, #0
    9168:	d001      	beq.n	916e <StopRetransmission+0x1a>
    {
        return false;
    916a:	2300      	movs	r3, #0
    916c:	e090      	b.n	9290 <StopRetransmission+0x13c>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	0018      	movs	r0, r3
    9172:	4b4a      	ldr	r3, [pc, #296]	; (929c <StopRetransmission+0x148>)
    9174:	4798      	blx	r3
    9176:	1e03      	subs	r3, r0, #0
    9178:	d001      	beq.n	917e <StopRetransmission+0x2a>
    {
        return false;
    917a:	2300      	movs	r3, #0
    917c:	e088      	b.n	9290 <StopRetransmission+0x13c>
    }

    // Increase Rejoin Uplinks counter
    if( MacCtx.NvmCtx->Rejoin0UplinksLimit != 0 )
    917e:	4a48      	ldr	r2, [pc, #288]	; (92a0 <StopRetransmission+0x14c>)
    9180:	239c      	movs	r3, #156	; 0x9c
    9182:	00db      	lsls	r3, r3, #3
    9184:	58d3      	ldr	r3, [r2, r3]
    9186:	4a47      	ldr	r2, [pc, #284]	; (92a4 <StopRetransmission+0x150>)
    9188:	5a9b      	ldrh	r3, [r3, r2]
    918a:	2b00      	cmp	r3, #0
    918c:	d00b      	beq.n	91a6 <StopRetransmission+0x52>
    {
        MacCtx.NvmCtx->Rejoin0UplinksCounter++;
    918e:	4a44      	ldr	r2, [pc, #272]	; (92a0 <StopRetransmission+0x14c>)
    9190:	239c      	movs	r3, #156	; 0x9c
    9192:	00db      	lsls	r3, r3, #3
    9194:	58d3      	ldr	r3, [r2, r3]
    9196:	2289      	movs	r2, #137	; 0x89
    9198:	0092      	lsls	r2, r2, #2
    919a:	5a9a      	ldrh	r2, [r3, r2]
    919c:	3201      	adds	r2, #1
    919e:	b291      	uxth	r1, r2
    91a0:	2289      	movs	r2, #137	; 0x89
    91a2:	0092      	lsls	r2, r2, #2
    91a4:	5299      	strh	r1, [r3, r2]
    }

    if( MacCtx.NvmCtx->Version.Fields.Minor >= 1 )
    91a6:	4a3e      	ldr	r2, [pc, #248]	; (92a0 <StopRetransmission+0x14c>)
    91a8:	239c      	movs	r3, #156	; 0x9c
    91aa:	00db      	lsls	r3, r3, #3
    91ac:	58d3      	ldr	r3, [r2, r3]
    91ae:	4a3e      	ldr	r2, [pc, #248]	; (92a8 <StopRetransmission+0x154>)
    91b0:	5c9b      	ldrb	r3, [r3, r2]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d031      	beq.n	921a <StopRetransmission+0xc6>
    {
        MacCommand_t* macCmd;
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
    91b6:	003b      	movs	r3, r7
    91b8:	0019      	movs	r1, r3
    91ba:	200b      	movs	r0, #11
    91bc:	4b3b      	ldr	r3, [pc, #236]	; (92ac <StopRetransmission+0x158>)
    91be:	4798      	blx	r3
    91c0:	1e03      	subs	r3, r0, #0
    91c2:	d12a      	bne.n	921a <StopRetransmission+0xc6>
        {
            // Increase the Rekey Uplinks counter
            MacCtx.NvmCtx->RekeyIndUplinksCounter++;
    91c4:	4a36      	ldr	r2, [pc, #216]	; (92a0 <StopRetransmission+0x14c>)
    91c6:	239c      	movs	r3, #156	; 0x9c
    91c8:	00db      	lsls	r3, r3, #3
    91ca:	58d3      	ldr	r3, [r2, r3]
    91cc:	4a38      	ldr	r2, [pc, #224]	; (92b0 <StopRetransmission+0x15c>)
    91ce:	5a9a      	ldrh	r2, [r3, r2]
    91d0:	3201      	adds	r2, #1
    91d2:	b291      	uxth	r1, r2
    91d4:	4a36      	ldr	r2, [pc, #216]	; (92b0 <StopRetransmission+0x15c>)
    91d6:	5299      	strh	r1, [r3, r2]

            /*
             * If the device has not received a RekeyConf within
             * the first ADR_ACK_LIMIT uplinks it SHALL revert to the Join state.
             */
            if( MacCtx.NvmCtx->RekeyIndUplinksCounter == MacCtx.NvmCtx->AdrAckLimit )
    91d8:	4a31      	ldr	r2, [pc, #196]	; (92a0 <StopRetransmission+0x14c>)
    91da:	239c      	movs	r3, #156	; 0x9c
    91dc:	00db      	lsls	r3, r3, #3
    91de:	58d3      	ldr	r3, [r2, r3]
    91e0:	4a33      	ldr	r2, [pc, #204]	; (92b0 <StopRetransmission+0x15c>)
    91e2:	5a9a      	ldrh	r2, [r3, r2]
    91e4:	492e      	ldr	r1, [pc, #184]	; (92a0 <StopRetransmission+0x14c>)
    91e6:	239c      	movs	r3, #156	; 0x9c
    91e8:	00db      	lsls	r3, r3, #3
    91ea:	58cb      	ldr	r3, [r1, r3]
    91ec:	21d0      	movs	r1, #208	; 0xd0
    91ee:	5a5b      	ldrh	r3, [r3, r1]
    91f0:	429a      	cmp	r2, r3
    91f2:	d112      	bne.n	921a <StopRetransmission+0xc6>
            {
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    91f4:	4a2a      	ldr	r2, [pc, #168]	; (92a0 <StopRetransmission+0x14c>)
    91f6:	239c      	movs	r3, #156	; 0x9c
    91f8:	00db      	lsls	r3, r3, #3
    91fa:	58d2      	ldr	r2, [r2, r3]
    91fc:	2388      	movs	r3, #136	; 0x88
    91fe:	009b      	lsls	r3, r3, #2
    9200:	2100      	movs	r1, #0
    9202:	54d1      	strb	r1, [r2, r3]
                MacCtx.MacFlags.Bits.MlmeInd = 1;
    9204:	4b26      	ldr	r3, [pc, #152]	; (92a0 <StopRetransmission+0x14c>)
    9206:	4a2b      	ldr	r2, [pc, #172]	; (92b4 <StopRetransmission+0x160>)
    9208:	5c99      	ldrb	r1, [r3, r2]
    920a:	2008      	movs	r0, #8
    920c:	4301      	orrs	r1, r0
    920e:	5499      	strb	r1, [r3, r2]
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
    9210:	4a23      	ldr	r2, [pc, #140]	; (92a0 <StopRetransmission+0x14c>)
    9212:	238b      	movs	r3, #139	; 0x8b
    9214:	00db      	lsls	r3, r3, #3
    9216:	210f      	movs	r1, #15
    9218:	54d1      	strb	r1, [r2, r3]
            }
        }
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
    921a:	4b21      	ldr	r3, [pc, #132]	; (92a0 <StopRetransmission+0x14c>)
    921c:	4a25      	ldr	r2, [pc, #148]	; (92b4 <StopRetransmission+0x160>)
    921e:	5c9b      	ldrb	r3, [r3, r2]
    9220:	2202      	movs	r2, #2
    9222:	4013      	ands	r3, r2
    9224:	b2db      	uxtb	r3, r3
    9226:	2b00      	cmp	r3, #0
    9228:	d110      	bne.n	924c <StopRetransmission+0xf8>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
    922a:	4a1d      	ldr	r2, [pc, #116]	; (92a0 <StopRetransmission+0x14c>)
    922c:	239c      	movs	r3, #156	; 0x9c
    922e:	00db      	lsls	r3, r3, #3
    9230:	58d3      	ldr	r3, [r2, r3]
    9232:	22ca      	movs	r2, #202	; 0xca
    9234:	5c9b      	ldrb	r3, [r3, r2]
    9236:	2b00      	cmp	r3, #0
    9238:	d008      	beq.n	924c <StopRetransmission+0xf8>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
    923a:	4a19      	ldr	r2, [pc, #100]	; (92a0 <StopRetransmission+0x14c>)
    923c:	239c      	movs	r3, #156	; 0x9c
    923e:	00db      	lsls	r3, r3, #3
    9240:	58d3      	ldr	r3, [r2, r3]
    9242:	22cc      	movs	r2, #204	; 0xcc
    9244:	589a      	ldr	r2, [r3, r2]
    9246:	3201      	adds	r2, #1
    9248:	21cc      	movs	r1, #204	; 0xcc
    924a:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
    924c:	4a14      	ldr	r2, [pc, #80]	; (92a0 <StopRetransmission+0x14c>)
    924e:	239c      	movs	r3, #156	; 0x9c
    9250:	00db      	lsls	r3, r3, #3
    9252:	58d2      	ldr	r2, [r2, r3]
    9254:	2388      	movs	r3, #136	; 0x88
    9256:	005b      	lsls	r3, r3, #1
    9258:	2100      	movs	r1, #0
    925a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
    925c:	4a10      	ldr	r2, [pc, #64]	; (92a0 <StopRetransmission+0x14c>)
    925e:	239c      	movs	r3, #156	; 0x9c
    9260:	00db      	lsls	r3, r3, #3
    9262:	58d3      	ldr	r3, [r2, r3]
    9264:	4a14      	ldr	r2, [pc, #80]	; (92b8 <StopRetransmission+0x164>)
    9266:	2100      	movs	r1, #0
    9268:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
    926a:	4a0d      	ldr	r2, [pc, #52]	; (92a0 <StopRetransmission+0x14c>)
    926c:	239c      	movs	r3, #156	; 0x9c
    926e:	00db      	lsls	r3, r3, #3
    9270:	58d3      	ldr	r3, [r2, r3]
    9272:	4a12      	ldr	r2, [pc, #72]	; (92bc <StopRetransmission+0x168>)
    9274:	2100      	movs	r1, #0
    9276:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
    9278:	4a09      	ldr	r2, [pc, #36]	; (92a0 <StopRetransmission+0x14c>)
    927a:	23d6      	movs	r3, #214	; 0xd6
    927c:	009b      	lsls	r3, r3, #2
    927e:	58d3      	ldr	r3, [r2, r3]
    9280:	2202      	movs	r2, #2
    9282:	4393      	bics	r3, r2
    9284:	0019      	movs	r1, r3
    9286:	4a06      	ldr	r2, [pc, #24]	; (92a0 <StopRetransmission+0x14c>)
    9288:	23d6      	movs	r3, #214	; 0xd6
    928a:	009b      	lsls	r3, r3, #2
    928c:	50d1      	str	r1, [r2, r3]

    return true;
    928e:	2301      	movs	r3, #1
}
    9290:	0018      	movs	r0, r3
    9292:	46bd      	mov	sp, r7
    9294:	b002      	add	sp, #8
    9296:	bd80      	pop	{r7, pc}
    9298:	0000e319 	.word	0x0000e319
    929c:	0000e345 	.word	0x0000e345
    92a0:	20000b78 	.word	0x20000b78
    92a4:	00000222 	.word	0x00000222
    92a8:	0000021e 	.word	0x0000021e
    92ac:	0000bde9 	.word	0x0000bde9
    92b0:	0000023a 	.word	0x0000023a
    92b4:	00000471 	.word	0x00000471
    92b8:	00000217 	.word	0x00000217
    92bc:	00000216 	.word	0x00000216

000092c0 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    92c0:	b580      	push	{r7, lr}
    92c2:	b082      	sub	sp, #8
    92c4:	af00      	add	r7, sp, #0
    92c6:	0002      	movs	r2, r0
    92c8:	1dfb      	adds	r3, r7, #7
    92ca:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
    92cc:	4a0c      	ldr	r2, [pc, #48]	; (9300 <CallNvmCtxCallback+0x40>)
    92ce:	23d8      	movs	r3, #216	; 0xd8
    92d0:	009b      	lsls	r3, r3, #2
    92d2:	58d3      	ldr	r3, [r2, r3]
    92d4:	2b00      	cmp	r3, #0
    92d6:	d00f      	beq.n	92f8 <CallNvmCtxCallback+0x38>
    92d8:	4a09      	ldr	r2, [pc, #36]	; (9300 <CallNvmCtxCallback+0x40>)
    92da:	23d8      	movs	r3, #216	; 0xd8
    92dc:	009b      	lsls	r3, r3, #2
    92de:	58d3      	ldr	r3, [r2, r3]
    92e0:	689b      	ldr	r3, [r3, #8]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d008      	beq.n	92f8 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
    92e6:	4a06      	ldr	r2, [pc, #24]	; (9300 <CallNvmCtxCallback+0x40>)
    92e8:	23d8      	movs	r3, #216	; 0xd8
    92ea:	009b      	lsls	r3, r3, #2
    92ec:	58d3      	ldr	r3, [r2, r3]
    92ee:	689b      	ldr	r3, [r3, #8]
    92f0:	1dfa      	adds	r2, r7, #7
    92f2:	7812      	ldrb	r2, [r2, #0]
    92f4:	0010      	movs	r0, r2
    92f6:	4798      	blx	r3
    }
}
    92f8:	46c0      	nop			; (mov r8, r8)
    92fa:	46bd      	mov	sp, r7
    92fc:	b002      	add	sp, #8
    92fe:	bd80      	pop	{r7, pc}
    9300:	20000b78 	.word	0x20000b78

00009304 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    9304:	b580      	push	{r7, lr}
    9306:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
    9308:	2000      	movs	r0, #0
    930a:	4b02      	ldr	r3, [pc, #8]	; (9314 <EventMacNvmCtxChanged+0x10>)
    930c:	4798      	blx	r3
}
    930e:	46c0      	nop			; (mov r8, r8)
    9310:	46bd      	mov	sp, r7
    9312:	bd80      	pop	{r7, pc}
    9314:	000092c1 	.word	0x000092c1

00009318 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
    9318:	b580      	push	{r7, lr}
    931a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
    931c:	2001      	movs	r0, #1
    931e:	4b02      	ldr	r3, [pc, #8]	; (9328 <EventRegionNvmCtxChanged+0x10>)
    9320:	4798      	blx	r3
}
    9322:	46c0      	nop			; (mov r8, r8)
    9324:	46bd      	mov	sp, r7
    9326:	bd80      	pop	{r7, pc}
    9328:	000092c1 	.word	0x000092c1

0000932c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
    932c:	b580      	push	{r7, lr}
    932e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
    9330:	2002      	movs	r0, #2
    9332:	4b02      	ldr	r3, [pc, #8]	; (933c <EventCryptoNvmCtxChanged+0x10>)
    9334:	4798      	blx	r3
}
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	46bd      	mov	sp, r7
    933a:	bd80      	pop	{r7, pc}
    933c:	000092c1 	.word	0x000092c1

00009340 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
    9340:	b580      	push	{r7, lr}
    9342:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
    9344:	2003      	movs	r0, #3
    9346:	4b02      	ldr	r3, [pc, #8]	; (9350 <EventSecureElementNvmCtxChanged+0x10>)
    9348:	4798      	blx	r3
}
    934a:	46c0      	nop			; (mov r8, r8)
    934c:	46bd      	mov	sp, r7
    934e:	bd80      	pop	{r7, pc}
    9350:	000092c1 	.word	0x000092c1

00009354 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
    9354:	b580      	push	{r7, lr}
    9356:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
    9358:	2004      	movs	r0, #4
    935a:	4b02      	ldr	r3, [pc, #8]	; (9364 <EventCommandsNvmCtxChanged+0x10>)
    935c:	4798      	blx	r3
}
    935e:	46c0      	nop			; (mov r8, r8)
    9360:	46bd      	mov	sp, r7
    9362:	bd80      	pop	{r7, pc}
    9364:	000092c1 	.word	0x000092c1

00009368 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
    9368:	b580      	push	{r7, lr}
    936a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
    936c:	2005      	movs	r0, #5
    936e:	4b02      	ldr	r3, [pc, #8]	; (9378 <EventClassBNvmCtxChanged+0x10>)
    9370:	4798      	blx	r3
}
    9372:	46c0      	nop			; (mov r8, r8)
    9374:	46bd      	mov	sp, r7
    9376:	bd80      	pop	{r7, pc}
    9378:	000092c1 	.word	0x000092c1

0000937c <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
    937c:	b580      	push	{r7, lr}
    937e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
    9380:	2006      	movs	r0, #6
    9382:	4b02      	ldr	r3, [pc, #8]	; (938c <EventConfirmQueueNvmCtxChanged+0x10>)
    9384:	4798      	blx	r3
}
    9386:	46c0      	nop			; (mov r8, r8)
    9388:	46bd      	mov	sp, r7
    938a:	bd80      	pop	{r7, pc}
    938c:	000092c1 	.word	0x000092c1

00009390 <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
    9390:	b580      	push	{r7, lr}
    9392:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
    9394:	2007      	movs	r0, #7
    9396:	4b02      	ldr	r3, [pc, #8]	; (93a0 <EventFCntHandlerNvmCtxChanged+0x10>)
    9398:	4798      	blx	r3
}
    939a:	46c0      	nop			; (mov r8, r8)
    939c:	46bd      	mov	sp, r7
    939e:	bd80      	pop	{r7, pc}
    93a0:	000092c1 	.word	0x000092c1

000093a4 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
    93a4:	b580      	push	{r7, lr}
    93a6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
    93a8:	4b0a      	ldr	r3, [pc, #40]	; (93d4 <IsRequestPending+0x30>)
    93aa:	4a0b      	ldr	r2, [pc, #44]	; (93d8 <IsRequestPending+0x34>)
    93ac:	5c9b      	ldrb	r3, [r3, r2]
    93ae:	2204      	movs	r2, #4
    93b0:	4013      	ands	r3, r2
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b00      	cmp	r3, #0
    93b6:	d107      	bne.n	93c8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    93b8:	4b06      	ldr	r3, [pc, #24]	; (93d4 <IsRequestPending+0x30>)
    93ba:	4a07      	ldr	r2, [pc, #28]	; (93d8 <IsRequestPending+0x34>)
    93bc:	5c9b      	ldrb	r3, [r3, r2]
    93be:	2201      	movs	r2, #1
    93c0:	4013      	ands	r3, r2
    93c2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
    93c4:	2b00      	cmp	r3, #0
    93c6:	d001      	beq.n	93cc <IsRequestPending+0x28>
    {
        return 1;
    93c8:	2301      	movs	r3, #1
    93ca:	e000      	b.n	93ce <IsRequestPending+0x2a>
    }
    return 0;
    93cc:	2300      	movs	r3, #0
}
    93ce:	0018      	movs	r0, r3
    93d0:	46bd      	mov	sp, r7
    93d2:	bd80      	pop	{r7, pc}
    93d4:	20000b78 	.word	0x20000b78
    93d8:	00000471 	.word	0x00000471

000093dc <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
    93dc:	b5b0      	push	{r4, r5, r7, lr}
    93de:	b096      	sub	sp, #88	; 0x58
    93e0:	af00      	add	r7, sp, #0
    93e2:	6178      	str	r0, [r7, #20]
    93e4:	6139      	str	r1, [r7, #16]
    93e6:	230f      	movs	r3, #15
    93e8:	18fb      	adds	r3, r7, r3
    93ea:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
    93ec:	697b      	ldr	r3, [r7, #20]
    93ee:	2b00      	cmp	r3, #0
    93f0:	d002      	beq.n	93f8 <LoRaMacInitialization+0x1c>
    93f2:	693b      	ldr	r3, [r7, #16]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d102      	bne.n	93fe <LoRaMacInitialization+0x22>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    93f8:	2303      	movs	r3, #3
    93fa:	f000 fbf9 	bl	9bf0 <LoRaMacInitialization+0x814>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
    93fe:	697b      	ldr	r3, [r7, #20]
    9400:	681b      	ldr	r3, [r3, #0]
    9402:	2b00      	cmp	r3, #0
    9404:	d00b      	beq.n	941e <LoRaMacInitialization+0x42>
        ( primitives->MacMcpsIndication == NULL ) ||
    9406:	697b      	ldr	r3, [r7, #20]
    9408:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
    940a:	2b00      	cmp	r3, #0
    940c:	d007      	beq.n	941e <LoRaMacInitialization+0x42>
        ( primitives->MacMlmeConfirm == NULL ) ||
    940e:	697b      	ldr	r3, [r7, #20]
    9410:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
    9412:	2b00      	cmp	r3, #0
    9414:	d003      	beq.n	941e <LoRaMacInitialization+0x42>
        ( primitives->MacMlmeIndication == NULL ) )
    9416:	697b      	ldr	r3, [r7, #20]
    9418:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
    941a:	2b00      	cmp	r3, #0
    941c:	d102      	bne.n	9424 <LoRaMacInitialization+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    941e:	2303      	movs	r3, #3
    9420:	f000 fbe6 	bl	9bf0 <LoRaMacInitialization+0x814>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
    9424:	230f      	movs	r3, #15
    9426:	18fb      	adds	r3, r7, r3
    9428:	781b      	ldrb	r3, [r3, #0]
    942a:	0018      	movs	r0, r3
    942c:	4b05      	ldr	r3, [pc, #20]	; (9444 <LoRaMacInitialization+0x68>)
    942e:	4798      	blx	r3
    9430:	0003      	movs	r3, r0
    9432:	001a      	movs	r2, r3
    9434:	2301      	movs	r3, #1
    9436:	4053      	eors	r3, r2
    9438:	b2db      	uxtb	r3, r3
    943a:	2b00      	cmp	r3, #0
    943c:	d004      	beq.n	9448 <LoRaMacInitialization+0x6c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    943e:	2309      	movs	r3, #9
    9440:	e3d6      	b.n	9bf0 <LoRaMacInitialization+0x814>
    9442:	46c0      	nop			; (mov r8, r8)
    9444:	0000efcd 	.word	0x0000efcd
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
    9448:	4afe      	ldr	r2, [pc, #1016]	; (9844 <LoRaMacInitialization+0x468>)
    944a:	697b      	ldr	r3, [r7, #20]
    944c:	0011      	movs	r1, r2
    944e:	0018      	movs	r0, r3
    9450:	4bfd      	ldr	r3, [pc, #1012]	; (9848 <LoRaMacInitialization+0x46c>)
    9452:	4798      	blx	r3

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
    9454:	2390      	movs	r3, #144	; 0x90
    9456:	009a      	lsls	r2, r3, #2
    9458:	4bfc      	ldr	r3, [pc, #1008]	; (984c <LoRaMacInitialization+0x470>)
    945a:	2100      	movs	r1, #0
    945c:	0018      	movs	r0, r3
    945e:	4bfc      	ldr	r3, [pc, #1008]	; (9850 <LoRaMacInitialization+0x474>)
    9460:	4798      	blx	r3
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
    9462:	4afc      	ldr	r2, [pc, #1008]	; (9854 <LoRaMacInitialization+0x478>)
    9464:	4bfc      	ldr	r3, [pc, #1008]	; (9858 <LoRaMacInitialization+0x47c>)
    9466:	2100      	movs	r1, #0
    9468:	0018      	movs	r0, r3
    946a:	4bf9      	ldr	r3, [pc, #996]	; (9850 <LoRaMacInitialization+0x474>)
    946c:	4798      	blx	r3
    MacCtx.NvmCtx = &NvmMacCtx;
    946e:	4afa      	ldr	r2, [pc, #1000]	; (9858 <LoRaMacInitialization+0x47c>)
    9470:	239c      	movs	r3, #156	; 0x9c
    9472:	00db      	lsls	r3, r3, #3
    9474:	49f5      	ldr	r1, [pc, #980]	; (984c <LoRaMacInitialization+0x470>)
    9476:	50d1      	str	r1, [r2, r3]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->Region = region;
    9478:	4af7      	ldr	r2, [pc, #988]	; (9858 <LoRaMacInitialization+0x47c>)
    947a:	239c      	movs	r3, #156	; 0x9c
    947c:	00db      	lsls	r3, r3, #3
    947e:	58d3      	ldr	r3, [r2, r3]
    9480:	220f      	movs	r2, #15
    9482:	18ba      	adds	r2, r7, r2
    9484:	7812      	ldrb	r2, [r2, #0]
    9486:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
    9488:	4af3      	ldr	r2, [pc, #972]	; (9858 <LoRaMacInitialization+0x47c>)
    948a:	239c      	movs	r3, #156	; 0x9c
    948c:	00db      	lsls	r3, r3, #3
    948e:	58d3      	ldr	r3, [r2, r3]
    9490:	22c8      	movs	r2, #200	; 0xc8
    9492:	2100      	movs	r1, #0
    9494:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
    9496:	4af0      	ldr	r2, [pc, #960]	; (9858 <LoRaMacInitialization+0x47c>)
    9498:	239c      	movs	r3, #156	; 0x9c
    949a:	00db      	lsls	r3, r3, #3
    949c:	58d2      	ldr	r2, [r2, r3]
    949e:	2316      	movs	r3, #22
    94a0:	33ff      	adds	r3, #255	; 0xff
    94a2:	2100      	movs	r1, #0
    94a4:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    94a6:	2324      	movs	r3, #36	; 0x24
    94a8:	18fb      	adds	r3, r7, r3
    94aa:	2201      	movs	r2, #1
    94ac:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 1;
    94ae:	2324      	movs	r3, #36	; 0x24
    94b0:	18fb      	adds	r3, r7, r3
    94b2:	2201      	movs	r2, #1
    94b4:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 0;
    94b6:	2324      	movs	r3, #36	; 0x24
    94b8:	18fb      	adds	r3, r7, r3
    94ba:	2200      	movs	r2, #0
    94bc:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
    94be:	2324      	movs	r3, #36	; 0x24
    94c0:	18fb      	adds	r3, r7, r3
    94c2:	2200      	movs	r2, #0
    94c4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
    94c6:	4ae4      	ldr	r2, [pc, #912]	; (9858 <LoRaMacInitialization+0x47c>)
    94c8:	239c      	movs	r3, #156	; 0x9c
    94ca:	00db      	lsls	r3, r3, #3
    94cc:	58d2      	ldr	r2, [r2, r3]
    94ce:	2387      	movs	r3, #135	; 0x87
    94d0:	009b      	lsls	r3, r3, #2
    94d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    94d4:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
    94d6:	2354      	movs	r3, #84	; 0x54
    94d8:	18fb      	adds	r3, r7, r3
    94da:	220e      	movs	r2, #14
    94dc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    94de:	4ade      	ldr	r2, [pc, #888]	; (9858 <LoRaMacInitialization+0x47c>)
    94e0:	239c      	movs	r3, #156	; 0x9c
    94e2:	00db      	lsls	r3, r3, #3
    94e4:	58d3      	ldr	r3, [r2, r3]
    94e6:	781b      	ldrb	r3, [r3, #0]
    94e8:	2254      	movs	r2, #84	; 0x54
    94ea:	18ba      	adds	r2, r7, r2
    94ec:	0011      	movs	r1, r2
    94ee:	0018      	movs	r0, r3
    94f0:	4bda      	ldr	r3, [pc, #872]	; (985c <LoRaMacInitialization+0x480>)
    94f2:	4798      	blx	r3
    94f4:	0003      	movs	r3, r0
    94f6:	001a      	movs	r2, r3
    94f8:	2350      	movs	r3, #80	; 0x50
    94fa:	18fb      	adds	r3, r7, r3
    94fc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
    94fe:	4ad6      	ldr	r2, [pc, #856]	; (9858 <LoRaMacInitialization+0x47c>)
    9500:	239c      	movs	r3, #156	; 0x9c
    9502:	00db      	lsls	r3, r3, #3
    9504:	58d2      	ldr	r2, [r2, r3]
    9506:	2350      	movs	r3, #80	; 0x50
    9508:	18fb      	adds	r3, r7, r3
    950a:	681b      	ldr	r3, [r3, #0]
    950c:	1e59      	subs	r1, r3, #1
    950e:	418b      	sbcs	r3, r1
    9510:	b2d9      	uxtb	r1, r3
    9512:	2389      	movs	r3, #137	; 0x89
    9514:	005b      	lsls	r3, r3, #1
    9516:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
    9518:	2354      	movs	r3, #84	; 0x54
    951a:	18fb      	adds	r3, r7, r3
    951c:	2209      	movs	r2, #9
    951e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9520:	4acd      	ldr	r2, [pc, #820]	; (9858 <LoRaMacInitialization+0x47c>)
    9522:	239c      	movs	r3, #156	; 0x9c
    9524:	00db      	lsls	r3, r3, #3
    9526:	58d3      	ldr	r3, [r2, r3]
    9528:	781b      	ldrb	r3, [r3, #0]
    952a:	2254      	movs	r2, #84	; 0x54
    952c:	18ba      	adds	r2, r7, r2
    952e:	0011      	movs	r1, r2
    9530:	0018      	movs	r0, r3
    9532:	4bca      	ldr	r3, [pc, #808]	; (985c <LoRaMacInitialization+0x480>)
    9534:	4798      	blx	r3
    9536:	0003      	movs	r3, r0
    9538:	001a      	movs	r2, r3
    953a:	2350      	movs	r3, #80	; 0x50
    953c:	18fb      	adds	r3, r7, r3
    953e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
    9540:	4ac5      	ldr	r2, [pc, #788]	; (9858 <LoRaMacInitialization+0x47c>)
    9542:	239c      	movs	r3, #156	; 0x9c
    9544:	00db      	lsls	r3, r3, #3
    9546:	58d2      	ldr	r2, [r2, r3]
    9548:	2350      	movs	r3, #80	; 0x50
    954a:	18fb      	adds	r3, r7, r3
    954c:	681b      	ldr	r3, [r3, #0]
    954e:	b25b      	sxtb	r3, r3
    9550:	7113      	strb	r3, [r2, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
    9552:	2354      	movs	r3, #84	; 0x54
    9554:	18fb      	adds	r3, r7, r3
    9556:	2205      	movs	r2, #5
    9558:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    955a:	4abf      	ldr	r2, [pc, #764]	; (9858 <LoRaMacInitialization+0x47c>)
    955c:	239c      	movs	r3, #156	; 0x9c
    955e:	00db      	lsls	r3, r3, #3
    9560:	58d3      	ldr	r3, [r2, r3]
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2254      	movs	r2, #84	; 0x54
    9566:	18ba      	adds	r2, r7, r2
    9568:	0011      	movs	r1, r2
    956a:	0018      	movs	r0, r3
    956c:	4bbb      	ldr	r3, [pc, #748]	; (985c <LoRaMacInitialization+0x480>)
    956e:	4798      	blx	r3
    9570:	0003      	movs	r3, r0
    9572:	001a      	movs	r2, r3
    9574:	2350      	movs	r3, #80	; 0x50
    9576:	18fb      	adds	r3, r7, r3
    9578:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
    957a:	4ab7      	ldr	r2, [pc, #732]	; (9858 <LoRaMacInitialization+0x47c>)
    957c:	239c      	movs	r3, #156	; 0x9c
    957e:	00db      	lsls	r3, r3, #3
    9580:	58d2      	ldr	r2, [r2, r3]
    9582:	2350      	movs	r3, #80	; 0x50
    9584:	18fb      	adds	r3, r7, r3
    9586:	681b      	ldr	r3, [r3, #0]
    9588:	b25b      	sxtb	r3, r3
    958a:	7153      	strb	r3, [r2, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
    958c:	2354      	movs	r3, #84	; 0x54
    958e:	18fb      	adds	r3, r7, r3
    9590:	220f      	movs	r2, #15
    9592:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9594:	4ab0      	ldr	r2, [pc, #704]	; (9858 <LoRaMacInitialization+0x47c>)
    9596:	239c      	movs	r3, #156	; 0x9c
    9598:	00db      	lsls	r3, r3, #3
    959a:	58d3      	ldr	r3, [r2, r3]
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	2254      	movs	r2, #84	; 0x54
    95a0:	18ba      	adds	r2, r7, r2
    95a2:	0011      	movs	r1, r2
    95a4:	0018      	movs	r0, r3
    95a6:	4bad      	ldr	r3, [pc, #692]	; (985c <LoRaMacInitialization+0x480>)
    95a8:	4798      	blx	r3
    95aa:	0003      	movs	r3, r0
    95ac:	001a      	movs	r2, r3
    95ae:	2350      	movs	r3, #80	; 0x50
    95b0:	18fb      	adds	r3, r7, r3
    95b2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
    95b4:	4aa8      	ldr	r2, [pc, #672]	; (9858 <LoRaMacInitialization+0x47c>)
    95b6:	239c      	movs	r3, #156	; 0x9c
    95b8:	00db      	lsls	r3, r3, #3
    95ba:	58d3      	ldr	r3, [r2, r3]
    95bc:	2250      	movs	r2, #80	; 0x50
    95be:	18ba      	adds	r2, r7, r2
    95c0:	6812      	ldr	r2, [r2, #0]
    95c2:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    95c4:	2354      	movs	r3, #84	; 0x54
    95c6:	18fb      	adds	r3, r7, r3
    95c8:	2210      	movs	r2, #16
    95ca:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    95cc:	4aa2      	ldr	r2, [pc, #648]	; (9858 <LoRaMacInitialization+0x47c>)
    95ce:	239c      	movs	r3, #156	; 0x9c
    95d0:	00db      	lsls	r3, r3, #3
    95d2:	58d3      	ldr	r3, [r2, r3]
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	2254      	movs	r2, #84	; 0x54
    95d8:	18ba      	adds	r2, r7, r2
    95da:	0011      	movs	r1, r2
    95dc:	0018      	movs	r0, r3
    95de:	4b9f      	ldr	r3, [pc, #636]	; (985c <LoRaMacInitialization+0x480>)
    95e0:	4798      	blx	r3
    95e2:	0003      	movs	r3, r0
    95e4:	001a      	movs	r2, r3
    95e6:	2350      	movs	r3, #80	; 0x50
    95e8:	18fb      	adds	r3, r7, r3
    95ea:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
    95ec:	4a9a      	ldr	r2, [pc, #616]	; (9858 <LoRaMacInitialization+0x47c>)
    95ee:	239c      	movs	r3, #156	; 0x9c
    95f0:	00db      	lsls	r3, r3, #3
    95f2:	58d3      	ldr	r3, [r2, r3]
    95f4:	2250      	movs	r2, #80	; 0x50
    95f6:	18ba      	adds	r2, r7, r2
    95f8:	6812      	ldr	r2, [r2, #0]
    95fa:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    95fc:	2354      	movs	r3, #84	; 0x54
    95fe:	18fb      	adds	r3, r7, r3
    9600:	2211      	movs	r2, #17
    9602:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9604:	4a94      	ldr	r2, [pc, #592]	; (9858 <LoRaMacInitialization+0x47c>)
    9606:	239c      	movs	r3, #156	; 0x9c
    9608:	00db      	lsls	r3, r3, #3
    960a:	58d3      	ldr	r3, [r2, r3]
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	2254      	movs	r2, #84	; 0x54
    9610:	18ba      	adds	r2, r7, r2
    9612:	0011      	movs	r1, r2
    9614:	0018      	movs	r0, r3
    9616:	4b91      	ldr	r3, [pc, #580]	; (985c <LoRaMacInitialization+0x480>)
    9618:	4798      	blx	r3
    961a:	0003      	movs	r3, r0
    961c:	001a      	movs	r2, r3
    961e:	2350      	movs	r3, #80	; 0x50
    9620:	18fb      	adds	r3, r7, r3
    9622:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
    9624:	4a8c      	ldr	r2, [pc, #560]	; (9858 <LoRaMacInitialization+0x47c>)
    9626:	239c      	movs	r3, #156	; 0x9c
    9628:	00db      	lsls	r3, r3, #3
    962a:	58d3      	ldr	r3, [r2, r3]
    962c:	2250      	movs	r2, #80	; 0x50
    962e:	18ba      	adds	r2, r7, r2
    9630:	6812      	ldr	r2, [r2, #0]
    9632:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    9634:	2354      	movs	r3, #84	; 0x54
    9636:	18fb      	adds	r3, r7, r3
    9638:	2212      	movs	r2, #18
    963a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    963c:	4a86      	ldr	r2, [pc, #536]	; (9858 <LoRaMacInitialization+0x47c>)
    963e:	239c      	movs	r3, #156	; 0x9c
    9640:	00db      	lsls	r3, r3, #3
    9642:	58d3      	ldr	r3, [r2, r3]
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	2254      	movs	r2, #84	; 0x54
    9648:	18ba      	adds	r2, r7, r2
    964a:	0011      	movs	r1, r2
    964c:	0018      	movs	r0, r3
    964e:	4b83      	ldr	r3, [pc, #524]	; (985c <LoRaMacInitialization+0x480>)
    9650:	4798      	blx	r3
    9652:	0003      	movs	r3, r0
    9654:	001a      	movs	r2, r3
    9656:	2350      	movs	r3, #80	; 0x50
    9658:	18fb      	adds	r3, r7, r3
    965a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
    965c:	4a7e      	ldr	r2, [pc, #504]	; (9858 <LoRaMacInitialization+0x47c>)
    965e:	239c      	movs	r3, #156	; 0x9c
    9660:	00db      	lsls	r3, r3, #3
    9662:	58d3      	ldr	r3, [r2, r3]
    9664:	2250      	movs	r2, #80	; 0x50
    9666:	18ba      	adds	r2, r7, r2
    9668:	6812      	ldr	r2, [r2, #0]
    966a:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    966c:	2354      	movs	r3, #84	; 0x54
    966e:	18fb      	adds	r3, r7, r3
    9670:	2213      	movs	r2, #19
    9672:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9674:	4a78      	ldr	r2, [pc, #480]	; (9858 <LoRaMacInitialization+0x47c>)
    9676:	239c      	movs	r3, #156	; 0x9c
    9678:	00db      	lsls	r3, r3, #3
    967a:	58d3      	ldr	r3, [r2, r3]
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	2254      	movs	r2, #84	; 0x54
    9680:	18ba      	adds	r2, r7, r2
    9682:	0011      	movs	r1, r2
    9684:	0018      	movs	r0, r3
    9686:	4b75      	ldr	r3, [pc, #468]	; (985c <LoRaMacInitialization+0x480>)
    9688:	4798      	blx	r3
    968a:	0003      	movs	r3, r0
    968c:	001a      	movs	r2, r3
    968e:	2350      	movs	r3, #80	; 0x50
    9690:	18fb      	adds	r3, r7, r3
    9692:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
    9694:	4a70      	ldr	r2, [pc, #448]	; (9858 <LoRaMacInitialization+0x47c>)
    9696:	239c      	movs	r3, #156	; 0x9c
    9698:	00db      	lsls	r3, r3, #3
    969a:	58d3      	ldr	r3, [r2, r3]
    969c:	2250      	movs	r2, #80	; 0x50
    969e:	18ba      	adds	r2, r7, r2
    96a0:	6812      	ldr	r2, [r2, #0]
    96a2:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    96a4:	2354      	movs	r3, #84	; 0x54
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	2216      	movs	r2, #22
    96aa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    96ac:	4a6a      	ldr	r2, [pc, #424]	; (9858 <LoRaMacInitialization+0x47c>)
    96ae:	239c      	movs	r3, #156	; 0x9c
    96b0:	00db      	lsls	r3, r3, #3
    96b2:	58d3      	ldr	r3, [r2, r3]
    96b4:	781b      	ldrb	r3, [r3, #0]
    96b6:	2254      	movs	r2, #84	; 0x54
    96b8:	18ba      	adds	r2, r7, r2
    96ba:	0011      	movs	r1, r2
    96bc:	0018      	movs	r0, r3
    96be:	4b67      	ldr	r3, [pc, #412]	; (985c <LoRaMacInitialization+0x480>)
    96c0:	4798      	blx	r3
    96c2:	0003      	movs	r3, r0
    96c4:	001a      	movs	r2, r3
    96c6:	2350      	movs	r3, #80	; 0x50
    96c8:	18fb      	adds	r3, r7, r3
    96ca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
    96cc:	4a62      	ldr	r2, [pc, #392]	; (9858 <LoRaMacInitialization+0x47c>)
    96ce:	239c      	movs	r3, #156	; 0x9c
    96d0:	00db      	lsls	r3, r3, #3
    96d2:	58d2      	ldr	r2, [r2, r3]
    96d4:	2350      	movs	r3, #80	; 0x50
    96d6:	18fb      	adds	r3, r7, r3
    96d8:	681b      	ldr	r3, [r3, #0]
    96da:	b2d9      	uxtb	r1, r3
    96dc:	2325      	movs	r3, #37	; 0x25
    96de:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    96e0:	2354      	movs	r3, #84	; 0x54
    96e2:	18fb      	adds	r3, r7, r3
    96e4:	2217      	movs	r2, #23
    96e6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    96e8:	4a5b      	ldr	r2, [pc, #364]	; (9858 <LoRaMacInitialization+0x47c>)
    96ea:	239c      	movs	r3, #156	; 0x9c
    96ec:	00db      	lsls	r3, r3, #3
    96ee:	58d3      	ldr	r3, [r2, r3]
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	2254      	movs	r2, #84	; 0x54
    96f4:	18ba      	adds	r2, r7, r2
    96f6:	0011      	movs	r1, r2
    96f8:	0018      	movs	r0, r3
    96fa:	4b58      	ldr	r3, [pc, #352]	; (985c <LoRaMacInitialization+0x480>)
    96fc:	4798      	blx	r3
    96fe:	0003      	movs	r3, r0
    9700:	001a      	movs	r2, r3
    9702:	2350      	movs	r3, #80	; 0x50
    9704:	18fb      	adds	r3, r7, r3
    9706:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    9708:	4a53      	ldr	r2, [pc, #332]	; (9858 <LoRaMacInitialization+0x47c>)
    970a:	239c      	movs	r3, #156	; 0x9c
    970c:	00db      	lsls	r3, r3, #3
    970e:	58d3      	ldr	r3, [r2, r3]
    9710:	2250      	movs	r2, #80	; 0x50
    9712:	18ba      	adds	r2, r7, r2
    9714:	6812      	ldr	r2, [r2, #0]
    9716:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
    9718:	2354      	movs	r3, #84	; 0x54
    971a:	18fb      	adds	r3, r7, r3
    971c:	2218      	movs	r2, #24
    971e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9720:	4a4d      	ldr	r2, [pc, #308]	; (9858 <LoRaMacInitialization+0x47c>)
    9722:	239c      	movs	r3, #156	; 0x9c
    9724:	00db      	lsls	r3, r3, #3
    9726:	58d3      	ldr	r3, [r2, r3]
    9728:	781b      	ldrb	r3, [r3, #0]
    972a:	2254      	movs	r2, #84	; 0x54
    972c:	18ba      	adds	r2, r7, r2
    972e:	0011      	movs	r1, r2
    9730:	0018      	movs	r0, r3
    9732:	4b4a      	ldr	r3, [pc, #296]	; (985c <LoRaMacInitialization+0x480>)
    9734:	4798      	blx	r3
    9736:	0003      	movs	r3, r0
    9738:	001a      	movs	r2, r3
    973a:	2350      	movs	r3, #80	; 0x50
    973c:	18fb      	adds	r3, r7, r3
    973e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
    9740:	4a45      	ldr	r2, [pc, #276]	; (9858 <LoRaMacInitialization+0x47c>)
    9742:	239c      	movs	r3, #156	; 0x9c
    9744:	00db      	lsls	r3, r3, #3
    9746:	58d2      	ldr	r2, [r2, r3]
    9748:	2350      	movs	r3, #80	; 0x50
    974a:	18fb      	adds	r3, r7, r3
    974c:	681b      	ldr	r3, [r3, #0]
    974e:	b2d9      	uxtb	r1, r3
    9750:	232c      	movs	r3, #44	; 0x2c
    9752:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
    9754:	2354      	movs	r3, #84	; 0x54
    9756:	18fb      	adds	r3, r7, r3
    9758:	221d      	movs	r2, #29
    975a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    975c:	4a3e      	ldr	r2, [pc, #248]	; (9858 <LoRaMacInitialization+0x47c>)
    975e:	239c      	movs	r3, #156	; 0x9c
    9760:	00db      	lsls	r3, r3, #3
    9762:	58d3      	ldr	r3, [r2, r3]
    9764:	781b      	ldrb	r3, [r3, #0]
    9766:	2254      	movs	r2, #84	; 0x54
    9768:	18ba      	adds	r2, r7, r2
    976a:	0011      	movs	r1, r2
    976c:	0018      	movs	r0, r3
    976e:	4b3b      	ldr	r3, [pc, #236]	; (985c <LoRaMacInitialization+0x480>)
    9770:	4798      	blx	r3
    9772:	0003      	movs	r3, r0
    9774:	001a      	movs	r2, r3
    9776:	2350      	movs	r3, #80	; 0x50
    9778:	18fb      	adds	r3, r7, r3
    977a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
    977c:	4a36      	ldr	r2, [pc, #216]	; (9858 <LoRaMacInitialization+0x47c>)
    977e:	239c      	movs	r3, #156	; 0x9c
    9780:	00db      	lsls	r3, r3, #3
    9782:	58d2      	ldr	r2, [r2, r3]
    9784:	2350      	movs	r3, #80	; 0x50
    9786:	18fb      	adds	r3, r7, r3
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	b2d9      	uxtb	r1, r3
    978c:	2330      	movs	r3, #48	; 0x30
    978e:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    9790:	2354      	movs	r3, #84	; 0x54
    9792:	18fb      	adds	r3, r7, r3
    9794:	221e      	movs	r2, #30
    9796:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9798:	4a2f      	ldr	r2, [pc, #188]	; (9858 <LoRaMacInitialization+0x47c>)
    979a:	239c      	movs	r3, #156	; 0x9c
    979c:	00db      	lsls	r3, r3, #3
    979e:	58d3      	ldr	r3, [r2, r3]
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	2254      	movs	r2, #84	; 0x54
    97a4:	18ba      	adds	r2, r7, r2
    97a6:	0011      	movs	r1, r2
    97a8:	0018      	movs	r0, r3
    97aa:	4b2c      	ldr	r3, [pc, #176]	; (985c <LoRaMacInitialization+0x480>)
    97ac:	4798      	blx	r3
    97ae:	0003      	movs	r3, r0
    97b0:	001a      	movs	r2, r3
    97b2:	2350      	movs	r3, #80	; 0x50
    97b4:	18fb      	adds	r3, r7, r3
    97b6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
    97b8:	4a27      	ldr	r2, [pc, #156]	; (9858 <LoRaMacInitialization+0x47c>)
    97ba:	239c      	movs	r3, #156	; 0x9c
    97bc:	00db      	lsls	r3, r3, #3
    97be:	58d2      	ldr	r2, [r2, r3]
    97c0:	2350      	movs	r3, #80	; 0x50
    97c2:	18fb      	adds	r3, r7, r3
    97c4:	681b      	ldr	r3, [r3, #0]
    97c6:	b2d9      	uxtb	r1, r3
    97c8:	2331      	movs	r3, #49	; 0x31
    97ca:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    97cc:	2354      	movs	r3, #84	; 0x54
    97ce:	18fb      	adds	r3, r7, r3
    97d0:	221f      	movs	r2, #31
    97d2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    97d4:	4a20      	ldr	r2, [pc, #128]	; (9858 <LoRaMacInitialization+0x47c>)
    97d6:	239c      	movs	r3, #156	; 0x9c
    97d8:	00db      	lsls	r3, r3, #3
    97da:	58d3      	ldr	r3, [r2, r3]
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	2254      	movs	r2, #84	; 0x54
    97e0:	18ba      	adds	r2, r7, r2
    97e2:	0011      	movs	r1, r2
    97e4:	0018      	movs	r0, r3
    97e6:	4b1d      	ldr	r3, [pc, #116]	; (985c <LoRaMacInitialization+0x480>)
    97e8:	4798      	blx	r3
    97ea:	0003      	movs	r3, r0
    97ec:	001a      	movs	r2, r3
    97ee:	2350      	movs	r3, #80	; 0x50
    97f0:	18fb      	adds	r3, r7, r3
    97f2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
    97f4:	4a18      	ldr	r2, [pc, #96]	; (9858 <LoRaMacInitialization+0x47c>)
    97f6:	239c      	movs	r3, #156	; 0x9c
    97f8:	00db      	lsls	r3, r3, #3
    97fa:	58d3      	ldr	r3, [r2, r3]
    97fc:	2250      	movs	r2, #80	; 0x50
    97fe:	18ba      	adds	r2, r7, r2
    9800:	6812      	ldr	r2, [r2, #0]
    9802:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    9804:	2354      	movs	r3, #84	; 0x54
    9806:	18fb      	adds	r3, r7, r3
    9808:	2220      	movs	r2, #32
    980a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    980c:	4a12      	ldr	r2, [pc, #72]	; (9858 <LoRaMacInitialization+0x47c>)
    980e:	239c      	movs	r3, #156	; 0x9c
    9810:	00db      	lsls	r3, r3, #3
    9812:	58d3      	ldr	r3, [r2, r3]
    9814:	781b      	ldrb	r3, [r3, #0]
    9816:	2254      	movs	r2, #84	; 0x54
    9818:	18ba      	adds	r2, r7, r2
    981a:	0011      	movs	r1, r2
    981c:	0018      	movs	r0, r3
    981e:	4b0f      	ldr	r3, [pc, #60]	; (985c <LoRaMacInitialization+0x480>)
    9820:	4798      	blx	r3
    9822:	0003      	movs	r3, r0
    9824:	001a      	movs	r2, r3
    9826:	2350      	movs	r3, #80	; 0x50
    9828:	18fb      	adds	r3, r7, r3
    982a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
    982c:	4a0a      	ldr	r2, [pc, #40]	; (9858 <LoRaMacInitialization+0x47c>)
    982e:	239c      	movs	r3, #156	; 0x9c
    9830:	00db      	lsls	r3, r3, #3
    9832:	58d3      	ldr	r3, [r2, r3]
    9834:	2250      	movs	r2, #80	; 0x50
    9836:	18ba      	adds	r2, r7, r2
    9838:	6812      	ldr	r2, [r2, #0]
    983a:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    983c:	2354      	movs	r3, #84	; 0x54
    983e:	18fb      	adds	r3, r7, r3
    9840:	e00e      	b.n	9860 <LoRaMacInitialization+0x484>
    9842:	46c0      	nop			; (mov r8, r8)
    9844:	0000937d 	.word	0x0000937d
    9848:	0000c0b5 	.word	0x0000c0b5
    984c:	2000105c 	.word	0x2000105c
    9850:	000029cd 	.word	0x000029cd
    9854:	000004e4 	.word	0x000004e4
    9858:	20000b78 	.word	0x20000b78
    985c:	0000eff1 	.word	0x0000eff1
    9860:	220a      	movs	r2, #10
    9862:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9864:	4ae4      	ldr	r2, [pc, #912]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9866:	239c      	movs	r3, #156	; 0x9c
    9868:	00db      	lsls	r3, r3, #3
    986a:	58d3      	ldr	r3, [r2, r3]
    986c:	781b      	ldrb	r3, [r3, #0]
    986e:	2254      	movs	r2, #84	; 0x54
    9870:	18ba      	adds	r2, r7, r2
    9872:	0011      	movs	r1, r2
    9874:	0018      	movs	r0, r3
    9876:	4be1      	ldr	r3, [pc, #900]	; (9bfc <LoRaMacInitialization+0x820>)
    9878:	4798      	blx	r3
    987a:	0003      	movs	r3, r0
    987c:	001a      	movs	r2, r3
    987e:	2350      	movs	r3, #80	; 0x50
    9880:	18fb      	adds	r3, r7, r3
    9882:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
    9884:	4adc      	ldr	r2, [pc, #880]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9886:	239c      	movs	r3, #156	; 0x9c
    9888:	00db      	lsls	r3, r3, #3
    988a:	58d2      	ldr	r2, [r2, r3]
    988c:	2350      	movs	r3, #80	; 0x50
    988e:	18fb      	adds	r3, r7, r3
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	b299      	uxth	r1, r3
    9894:	23d0      	movs	r3, #208	; 0xd0
    9896:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
    9898:	2354      	movs	r3, #84	; 0x54
    989a:	18fb      	adds	r3, r7, r3
    989c:	220b      	movs	r2, #11
    989e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    98a0:	4ad5      	ldr	r2, [pc, #852]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98a2:	239c      	movs	r3, #156	; 0x9c
    98a4:	00db      	lsls	r3, r3, #3
    98a6:	58d3      	ldr	r3, [r2, r3]
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	2254      	movs	r2, #84	; 0x54
    98ac:	18ba      	adds	r2, r7, r2
    98ae:	0011      	movs	r1, r2
    98b0:	0018      	movs	r0, r3
    98b2:	4bd2      	ldr	r3, [pc, #840]	; (9bfc <LoRaMacInitialization+0x820>)
    98b4:	4798      	blx	r3
    98b6:	0003      	movs	r3, r0
    98b8:	001a      	movs	r2, r3
    98ba:	2350      	movs	r3, #80	; 0x50
    98bc:	18fb      	adds	r3, r7, r3
    98be:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
    98c0:	4acd      	ldr	r2, [pc, #820]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98c2:	239c      	movs	r3, #156	; 0x9c
    98c4:	00db      	lsls	r3, r3, #3
    98c6:	58d2      	ldr	r2, [r2, r3]
    98c8:	2350      	movs	r3, #80	; 0x50
    98ca:	18fb      	adds	r3, r7, r3
    98cc:	681b      	ldr	r3, [r3, #0]
    98ce:	b299      	uxth	r1, r3
    98d0:	23d2      	movs	r3, #210	; 0xd2
    98d2:	52d1      	strh	r1, [r2, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
    98d4:	4ac8      	ldr	r2, [pc, #800]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98d6:	239c      	movs	r3, #156	; 0x9c
    98d8:	00db      	lsls	r3, r3, #3
    98da:	58d3      	ldr	r3, [r2, r3]
    98dc:	2224      	movs	r2, #36	; 0x24
    98de:	2101      	movs	r1, #1
    98e0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    98e2:	4ac5      	ldr	r2, [pc, #788]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98e4:	239c      	movs	r3, #156	; 0x9c
    98e6:	00db      	lsls	r3, r3, #3
    98e8:	58d3      	ldr	r3, [r2, r3]
    98ea:	220a      	movs	r2, #10
    98ec:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
    98ee:	4ac2      	ldr	r2, [pc, #776]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98f0:	239c      	movs	r3, #156	; 0x9c
    98f2:	00db      	lsls	r3, r3, #3
    98f4:	58d3      	ldr	r3, [r2, r3]
    98f6:	2206      	movs	r2, #6
    98f8:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    98fa:	4abf      	ldr	r2, [pc, #764]	; (9bf8 <LoRaMacInitialization+0x81c>)
    98fc:	239c      	movs	r3, #156	; 0x9c
    98fe:	00db      	lsls	r3, r3, #3
    9900:	58d2      	ldr	r2, [r2, r3]
    9902:	49bd      	ldr	r1, [pc, #756]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9904:	239c      	movs	r3, #156	; 0x9c
    9906:	00db      	lsls	r3, r3, #3
    9908:	58cb      	ldr	r3, [r1, r3]
    990a:	689b      	ldr	r3, [r3, #8]
    990c:	21d8      	movs	r1, #216	; 0xd8
    990e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    9910:	4ab9      	ldr	r2, [pc, #740]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9912:	239c      	movs	r3, #156	; 0x9c
    9914:	00db      	lsls	r3, r3, #3
    9916:	58d3      	ldr	r3, [r2, r3]
    9918:	49b7      	ldr	r1, [pc, #732]	; (9bf8 <LoRaMacInitialization+0x81c>)
    991a:	229c      	movs	r2, #156	; 0x9c
    991c:	00d2      	lsls	r2, r2, #3
    991e:	588a      	ldr	r2, [r1, r2]
    9920:	7b11      	ldrb	r1, [r2, #12]
    9922:	22dc      	movs	r2, #220	; 0xdc
    9924:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
    9926:	4ab4      	ldr	r2, [pc, #720]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9928:	239c      	movs	r3, #156	; 0x9c
    992a:	00db      	lsls	r3, r3, #3
    992c:	58d2      	ldr	r2, [r2, r3]
    992e:	49b2      	ldr	r1, [pc, #712]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9930:	239c      	movs	r3, #156	; 0x9c
    9932:	00db      	lsls	r3, r3, #3
    9934:	58cb      	ldr	r3, [r1, r3]
    9936:	691b      	ldr	r3, [r3, #16]
    9938:	21e0      	movs	r1, #224	; 0xe0
    993a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
    993c:	4aae      	ldr	r2, [pc, #696]	; (9bf8 <LoRaMacInitialization+0x81c>)
    993e:	239c      	movs	r3, #156	; 0x9c
    9940:	00db      	lsls	r3, r3, #3
    9942:	58d2      	ldr	r2, [r2, r3]
    9944:	49ac      	ldr	r1, [pc, #688]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9946:	239c      	movs	r3, #156	; 0x9c
    9948:	00db      	lsls	r3, r3, #3
    994a:	58cb      	ldr	r3, [r1, r3]
    994c:	695b      	ldr	r3, [r3, #20]
    994e:	21e4      	movs	r1, #228	; 0xe4
    9950:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
    9952:	4aa9      	ldr	r2, [pc, #676]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9954:	239c      	movs	r3, #156	; 0x9c
    9956:	00db      	lsls	r3, r3, #3
    9958:	58d2      	ldr	r2, [r2, r3]
    995a:	49a7      	ldr	r1, [pc, #668]	; (9bf8 <LoRaMacInitialization+0x81c>)
    995c:	239c      	movs	r3, #156	; 0x9c
    995e:	00db      	lsls	r3, r3, #3
    9960:	58cb      	ldr	r3, [r1, r3]
    9962:	699b      	ldr	r3, [r3, #24]
    9964:	21e8      	movs	r1, #232	; 0xe8
    9966:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    9968:	4aa3      	ldr	r2, [pc, #652]	; (9bf8 <LoRaMacInitialization+0x81c>)
    996a:	239c      	movs	r3, #156	; 0x9c
    996c:	00db      	lsls	r3, r3, #3
    996e:	58d2      	ldr	r2, [r2, r3]
    9970:	49a1      	ldr	r1, [pc, #644]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9972:	239c      	movs	r3, #156	; 0x9c
    9974:	00db      	lsls	r3, r3, #3
    9976:	58cb      	ldr	r3, [r1, r3]
    9978:	69db      	ldr	r3, [r3, #28]
    997a:	21ec      	movs	r1, #236	; 0xec
    997c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    997e:	4a9e      	ldr	r2, [pc, #632]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9980:	239c      	movs	r3, #156	; 0x9c
    9982:	00db      	lsls	r3, r3, #3
    9984:	58d2      	ldr	r2, [r2, r3]
    9986:	499c      	ldr	r1, [pc, #624]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9988:	239c      	movs	r3, #156	; 0x9c
    998a:	00db      	lsls	r3, r3, #3
    998c:	58cb      	ldr	r3, [r1, r3]
    998e:	6a1b      	ldr	r3, [r3, #32]
    9990:	21f0      	movs	r1, #240	; 0xf0
    9992:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
    9994:	4a98      	ldr	r2, [pc, #608]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9996:	239c      	movs	r3, #156	; 0x9c
    9998:	00db      	lsls	r3, r3, #3
    999a:	58d3      	ldr	r3, [r2, r3]
    999c:	4996      	ldr	r1, [pc, #600]	; (9bf8 <LoRaMacInitialization+0x81c>)
    999e:	229c      	movs	r2, #156	; 0x9c
    99a0:	00d2      	lsls	r2, r2, #3
    99a2:	588a      	ldr	r2, [r1, r2]
    99a4:	2124      	movs	r1, #36	; 0x24
    99a6:	5c51      	ldrb	r1, [r2, r1]
    99a8:	22f4      	movs	r2, #244	; 0xf4
    99aa:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
    99ac:	4b94      	ldr	r3, [pc, #592]	; (9c00 <LoRaMacInitialization+0x824>)
    99ae:	4798      	blx	r3

    MacCtx.NvmCtx->PublicNetwork = true;
    99b0:	4a91      	ldr	r2, [pc, #580]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99b2:	239c      	movs	r3, #156	; 0x9c
    99b4:	00db      	lsls	r3, r3, #3
    99b6:	58d3      	ldr	r3, [r2, r3]
    99b8:	22c9      	movs	r2, #201	; 0xc9
    99ba:	2101      	movs	r1, #1
    99bc:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
    99be:	4a8e      	ldr	r2, [pc, #568]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99c0:	23d7      	movs	r3, #215	; 0xd7
    99c2:	009b      	lsls	r3, r3, #2
    99c4:	6979      	ldr	r1, [r7, #20]
    99c6:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
    99c8:	4a8b      	ldr	r2, [pc, #556]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99ca:	23d8      	movs	r3, #216	; 0xd8
    99cc:	009b      	lsls	r3, r3, #2
    99ce:	6939      	ldr	r1, [r7, #16]
    99d0:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
    99d2:	4b89      	ldr	r3, [pc, #548]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99d4:	4a8b      	ldr	r2, [pc, #556]	; (9c04 <LoRaMacInitialization+0x828>)
    99d6:	2100      	movs	r1, #0
    99d8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
    99da:	4a87      	ldr	r2, [pc, #540]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99dc:	23d6      	movs	r3, #214	; 0xd6
    99de:	009b      	lsls	r3, r3, #2
    99e0:	2101      	movs	r1, #1
    99e2:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
    99e4:	4a84      	ldr	r2, [pc, #528]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99e6:	23d0      	movs	r3, #208	; 0xd0
    99e8:	009b      	lsls	r3, r3, #2
    99ea:	2100      	movs	r1, #0
    99ec:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
    99ee:	4a82      	ldr	r2, [pc, #520]	; (9bf8 <LoRaMacInitialization+0x81c>)
    99f0:	23d1      	movs	r3, #209	; 0xd1
    99f2:	009b      	lsls	r3, r3, #2
    99f4:	2100      	movs	r1, #0
    99f6:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
    99f8:	4a83      	ldr	r2, [pc, #524]	; (9c08 <LoRaMacInitialization+0x82c>)
    99fa:	4b84      	ldr	r3, [pc, #528]	; (9c0c <LoRaMacInitialization+0x830>)
    99fc:	0011      	movs	r1, r2
    99fe:	0018      	movs	r0, r3
    9a00:	4b83      	ldr	r3, [pc, #524]	; (9c10 <LoRaMacInitialization+0x834>)
    9a02:	4798      	blx	r3
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
    9a04:	4a83      	ldr	r2, [pc, #524]	; (9c14 <LoRaMacInitialization+0x838>)
    9a06:	4b84      	ldr	r3, [pc, #528]	; (9c18 <LoRaMacInitialization+0x83c>)
    9a08:	0011      	movs	r1, r2
    9a0a:	0018      	movs	r0, r3
    9a0c:	4b80      	ldr	r3, [pc, #512]	; (9c10 <LoRaMacInitialization+0x834>)
    9a0e:	4798      	blx	r3
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
    9a10:	4a82      	ldr	r2, [pc, #520]	; (9c1c <LoRaMacInitialization+0x840>)
    9a12:	4b83      	ldr	r3, [pc, #524]	; (9c20 <LoRaMacInitialization+0x844>)
    9a14:	0011      	movs	r1, r2
    9a16:	0018      	movs	r0, r3
    9a18:	4b7d      	ldr	r3, [pc, #500]	; (9c10 <LoRaMacInitialization+0x834>)
    9a1a:	4798      	blx	r3
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
    9a1c:	4a81      	ldr	r2, [pc, #516]	; (9c24 <LoRaMacInitialization+0x848>)
    9a1e:	4b82      	ldr	r3, [pc, #520]	; (9c28 <LoRaMacInitialization+0x84c>)
    9a20:	0011      	movs	r1, r2
    9a22:	0018      	movs	r0, r3
    9a24:	4b7a      	ldr	r3, [pc, #488]	; (9c10 <LoRaMacInitialization+0x834>)
    9a26:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
    9a28:	4a80      	ldr	r2, [pc, #512]	; (9c2c <LoRaMacInitialization+0x850>)
    9a2a:	4b81      	ldr	r3, [pc, #516]	; (9c30 <LoRaMacInitialization+0x854>)
    9a2c:	0011      	movs	r1, r2
    9a2e:	0018      	movs	r0, r3
    9a30:	4b77      	ldr	r3, [pc, #476]	; (9c10 <LoRaMacInitialization+0x834>)
    9a32:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    9a34:	4a7f      	ldr	r2, [pc, #508]	; (9c34 <LoRaMacInitialization+0x858>)
    9a36:	4b80      	ldr	r3, [pc, #512]	; (9c38 <LoRaMacInitialization+0x85c>)
    9a38:	0011      	movs	r1, r2
    9a3a:	0018      	movs	r0, r3
    9a3c:	4b74      	ldr	r3, [pc, #464]	; (9c10 <LoRaMacInitialization+0x834>)
    9a3e:	4798      	blx	r3
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
    9a40:	4a7e      	ldr	r2, [pc, #504]	; (9c3c <LoRaMacInitialization+0x860>)
    9a42:	4b7f      	ldr	r3, [pc, #508]	; (9c40 <LoRaMacInitialization+0x864>)
    9a44:	0011      	movs	r1, r2
    9a46:	0018      	movs	r0, r3
    9a48:	4b71      	ldr	r3, [pc, #452]	; (9c10 <LoRaMacInitialization+0x834>)
    9a4a:	4798      	blx	r3
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
    9a4c:	4a7d      	ldr	r2, [pc, #500]	; (9c44 <LoRaMacInitialization+0x868>)
    9a4e:	4b7e      	ldr	r3, [pc, #504]	; (9c48 <LoRaMacInitialization+0x86c>)
    9a50:	0011      	movs	r1, r2
    9a52:	0018      	movs	r0, r3
    9a54:	4b6e      	ldr	r3, [pc, #440]	; (9c10 <LoRaMacInitialization+0x834>)
    9a56:	4798      	blx	r3

    // Store the current initialization time
    MacCtx.InitializationTime = SysTimeGetMcuTime( );
    9a58:	4d67      	ldr	r5, [pc, #412]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a5a:	23d2      	movs	r3, #210	; 0xd2
    9a5c:	009c      	lsls	r4, r3, #2
    9a5e:	003b      	movs	r3, r7
    9a60:	0018      	movs	r0, r3
    9a62:	4b7a      	ldr	r3, [pc, #488]	; (9c4c <LoRaMacInitialization+0x870>)
    9a64:	4798      	blx	r3
    9a66:	003a      	movs	r2, r7
    9a68:	192b      	adds	r3, r5, r4
    9a6a:	ca03      	ldmia	r2!, {r0, r1}
    9a6c:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
    9a6e:	4a62      	ldr	r2, [pc, #392]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a70:	23d9      	movs	r3, #217	; 0xd9
    9a72:	009b      	lsls	r3, r3, #2
    9a74:	4976      	ldr	r1, [pc, #472]	; (9c50 <LoRaMacInitialization+0x874>)
    9a76:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
    9a78:	4a5f      	ldr	r2, [pc, #380]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a7a:	23db      	movs	r3, #219	; 0xdb
    9a7c:	009b      	lsls	r3, r3, #2
    9a7e:	4975      	ldr	r1, [pc, #468]	; (9c54 <LoRaMacInitialization+0x878>)
    9a80:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
    9a82:	4a5d      	ldr	r2, [pc, #372]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a84:	23dd      	movs	r3, #221	; 0xdd
    9a86:	009b      	lsls	r3, r3, #2
    9a88:	4973      	ldr	r1, [pc, #460]	; (9c58 <LoRaMacInitialization+0x87c>)
    9a8a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    9a8c:	4a5a      	ldr	r2, [pc, #360]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a8e:	23da      	movs	r3, #218	; 0xda
    9a90:	009b      	lsls	r3, r3, #2
    9a92:	4972      	ldr	r1, [pc, #456]	; (9c5c <LoRaMacInitialization+0x880>)
    9a94:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    9a96:	4a58      	ldr	r2, [pc, #352]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9a98:	23dc      	movs	r3, #220	; 0xdc
    9a9a:	009b      	lsls	r3, r3, #2
    9a9c:	4970      	ldr	r1, [pc, #448]	; (9c60 <LoRaMacInitialization+0x884>)
    9a9e:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
    9aa0:	4b70      	ldr	r3, [pc, #448]	; (9c64 <LoRaMacInitialization+0x888>)
    9aa2:	681b      	ldr	r3, [r3, #0]
    9aa4:	4a70      	ldr	r2, [pc, #448]	; (9c68 <LoRaMacInitialization+0x88c>)
    9aa6:	0010      	movs	r0, r2
    9aa8:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    9aaa:	231c      	movs	r3, #28
    9aac:	18fb      	adds	r3, r7, r3
    9aae:	2200      	movs	r2, #0
    9ab0:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
    9ab2:	231c      	movs	r3, #28
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	2200      	movs	r2, #0
    9ab8:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
    9aba:	4a4f      	ldr	r2, [pc, #316]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9abc:	239c      	movs	r3, #156	; 0x9c
    9abe:	00db      	lsls	r3, r3, #3
    9ac0:	58d3      	ldr	r3, [r2, r3]
    9ac2:	781b      	ldrb	r3, [r3, #0]
    9ac4:	221c      	movs	r2, #28
    9ac6:	18ba      	adds	r2, r7, r2
    9ac8:	0011      	movs	r1, r2
    9aca:	0018      	movs	r0, r3
    9acc:	4b67      	ldr	r3, [pc, #412]	; (9c6c <LoRaMacInitialization+0x890>)
    9ace:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
    9ad0:	4b67      	ldr	r3, [pc, #412]	; (9c70 <LoRaMacInitialization+0x894>)
    9ad2:	0018      	movs	r0, r3
    9ad4:	4b67      	ldr	r3, [pc, #412]	; (9c74 <LoRaMacInitialization+0x898>)
    9ad6:	4798      	blx	r3
    9ad8:	1e03      	subs	r3, r0, #0
    9ada:	d001      	beq.n	9ae0 <LoRaMacInitialization+0x704>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    9adc:	2311      	movs	r3, #17
    9ade:	e087      	b.n	9bf0 <LoRaMacInitialization+0x814>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
    9ae0:	4b65      	ldr	r3, [pc, #404]	; (9c78 <LoRaMacInitialization+0x89c>)
    9ae2:	0018      	movs	r0, r3
    9ae4:	4b65      	ldr	r3, [pc, #404]	; (9c7c <LoRaMacInitialization+0x8a0>)
    9ae6:	4798      	blx	r3
    9ae8:	1e03      	subs	r3, r0, #0
    9aea:	d001      	beq.n	9af0 <LoRaMacInitialization+0x714>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    9aec:	2311      	movs	r3, #17
    9aee:	e07f      	b.n	9bf0 <LoRaMacInitialization+0x814>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
    9af0:	4b63      	ldr	r3, [pc, #396]	; (9c80 <LoRaMacInitialization+0x8a4>)
    9af2:	0018      	movs	r0, r3
    9af4:	4b63      	ldr	r3, [pc, #396]	; (9c84 <LoRaMacInitialization+0x8a8>)
    9af6:	4798      	blx	r3
    9af8:	1e03      	subs	r3, r0, #0
    9afa:	d001      	beq.n	9b00 <LoRaMacInitialization+0x724>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    9afc:	2313      	movs	r3, #19
    9afe:	e077      	b.n	9bf0 <LoRaMacInitialization+0x814>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
    9b00:	4b61      	ldr	r3, [pc, #388]	; (9c88 <LoRaMacInitialization+0x8ac>)
    9b02:	0018      	movs	r0, r3
    9b04:	4b61      	ldr	r3, [pc, #388]	; (9c8c <LoRaMacInitialization+0x8b0>)
    9b06:	4798      	blx	r3
    9b08:	1e03      	subs	r3, r0, #0
    9b0a:	d001      	beq.n	9b10 <LoRaMacInitialization+0x734>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
    9b0c:	2312      	movs	r3, #18
    9b0e:	e06f      	b.n	9bf0 <LoRaMacInitialization+0x814>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
    9b10:	4a39      	ldr	r2, [pc, #228]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9b12:	239c      	movs	r3, #156	; 0x9c
    9b14:	00db      	lsls	r3, r3, #3
    9b16:	58d3      	ldr	r3, [r2, r3]
    9b18:	3348      	adds	r3, #72	; 0x48
    9b1a:	0018      	movs	r0, r3
    9b1c:	4b5c      	ldr	r3, [pc, #368]	; (9c90 <LoRaMacInitialization+0x8b4>)
    9b1e:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
    9b20:	4b50      	ldr	r3, [pc, #320]	; (9c64 <LoRaMacInitialization+0x888>)
    9b22:	695b      	ldr	r3, [r3, #20]
    9b24:	4798      	blx	r3
    9b26:	0003      	movs	r3, r0
    9b28:	0018      	movs	r0, r3
    9b2a:	4b5a      	ldr	r3, [pc, #360]	; (9c94 <LoRaMacInitialization+0x8b8>)
    9b2c:	4798      	blx	r3

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    9b2e:	4b4d      	ldr	r3, [pc, #308]	; (9c64 <LoRaMacInitialization+0x888>)
    9b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9b32:	4931      	ldr	r1, [pc, #196]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9b34:	229c      	movs	r2, #156	; 0x9c
    9b36:	00d2      	lsls	r2, r2, #3
    9b38:	588a      	ldr	r2, [r1, r2]
    9b3a:	21c9      	movs	r1, #201	; 0xc9
    9b3c:	5c52      	ldrb	r2, [r2, r1]
    9b3e:	0010      	movs	r0, r2
    9b40:	4798      	blx	r3
    Radio.Sleep( );
    9b42:	4b48      	ldr	r3, [pc, #288]	; (9c64 <LoRaMacInitialization+0x888>)
    9b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b46:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    9b48:	2348      	movs	r3, #72	; 0x48
    9b4a:	18fb      	adds	r3, r7, r3
    9b4c:	2200      	movs	r2, #0
    9b4e:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
    9b50:	2348      	movs	r3, #72	; 0x48
    9b52:	18fb      	adds	r3, r7, r3
    9b54:	2200      	movs	r2, #0
    9b56:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
    9b58:	693b      	ldr	r3, [r7, #16]
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d009      	beq.n	9b72 <LoRaMacInitialization+0x796>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
    9b5e:	693b      	ldr	r3, [r7, #16]
    9b60:	685a      	ldr	r2, [r3, #4]
    9b62:	2348      	movs	r3, #72	; 0x48
    9b64:	18fb      	adds	r3, r7, r3
    9b66:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
    9b68:	693b      	ldr	r3, [r7, #16]
    9b6a:	68da      	ldr	r2, [r3, #12]
    9b6c:	2348      	movs	r3, #72	; 0x48
    9b6e:	18fb      	adds	r3, r7, r3
    9b70:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
    9b72:	2328      	movs	r3, #40	; 0x28
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	4a48      	ldr	r2, [pc, #288]	; (9c98 <LoRaMacInitialization+0x8bc>)
    9b78:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
    9b7a:	2328      	movs	r3, #40	; 0x28
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	4a47      	ldr	r2, [pc, #284]	; (9c9c <LoRaMacInitialization+0x8c0>)
    9b80:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
    9b82:	2328      	movs	r3, #40	; 0x28
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	4a46      	ldr	r2, [pc, #280]	; (9ca0 <LoRaMacInitialization+0x8c4>)
    9b88:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
    9b8a:	2328      	movs	r3, #40	; 0x28
    9b8c:	18fb      	adds	r3, r7, r3
    9b8e:	4a45      	ldr	r2, [pc, #276]	; (9ca4 <LoRaMacInitialization+0x8c8>)
    9b90:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
    9b92:	4a19      	ldr	r2, [pc, #100]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9b94:	239c      	movs	r3, #156	; 0x9c
    9b96:	00db      	lsls	r3, r3, #3
    9b98:	58d3      	ldr	r3, [r2, r3]
    9b9a:	3344      	adds	r3, #68	; 0x44
    9b9c:	001a      	movs	r2, r3
    9b9e:	2328      	movs	r3, #40	; 0x28
    9ba0:	18fb      	adds	r3, r7, r3
    9ba2:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
    9ba4:	4a14      	ldr	r2, [pc, #80]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9ba6:	239c      	movs	r3, #156	; 0x9c
    9ba8:	00db      	lsls	r3, r3, #3
    9baa:	58d3      	ldr	r3, [r2, r3]
    9bac:	001a      	movs	r2, r3
    9bae:	2328      	movs	r3, #40	; 0x28
    9bb0:	18fb      	adds	r3, r7, r3
    9bb2:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
    9bb4:	4a10      	ldr	r2, [pc, #64]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9bb6:	239c      	movs	r3, #156	; 0x9c
    9bb8:	00db      	lsls	r3, r3, #3
    9bba:	58d3      	ldr	r3, [r2, r3]
    9bbc:	33d4      	adds	r3, #212	; 0xd4
    9bbe:	001a      	movs	r2, r3
    9bc0:	2328      	movs	r3, #40	; 0x28
    9bc2:	18fb      	adds	r3, r7, r3
    9bc4:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
    9bc6:	4a0c      	ldr	r2, [pc, #48]	; (9bf8 <LoRaMacInitialization+0x81c>)
    9bc8:	239c      	movs	r3, #156	; 0x9c
    9bca:	00db      	lsls	r3, r3, #3
    9bcc:	58d3      	ldr	r3, [r2, r3]
    9bce:	3348      	adds	r3, #72	; 0x48
    9bd0:	001a      	movs	r2, r3
    9bd2:	2328      	movs	r3, #40	; 0x28
    9bd4:	18fb      	adds	r3, r7, r3
    9bd6:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
    9bd8:	4a33      	ldr	r2, [pc, #204]	; (9ca8 <LoRaMacInitialization+0x8cc>)
    9bda:	2348      	movs	r3, #72	; 0x48
    9bdc:	18f9      	adds	r1, r7, r3
    9bde:	2328      	movs	r3, #40	; 0x28
    9be0:	18fb      	adds	r3, r7, r3
    9be2:	0018      	movs	r0, r3
    9be4:	4b31      	ldr	r3, [pc, #196]	; (9cac <LoRaMacInitialization+0x8d0>)
    9be6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    9be8:	2001      	movs	r0, #1
    9bea:	4b31      	ldr	r3, [pc, #196]	; (9cb0 <LoRaMacInitialization+0x8d4>)
    9bec:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
    9bee:	2300      	movs	r3, #0
}
    9bf0:	0018      	movs	r0, r3
    9bf2:	46bd      	mov	sp, r7
    9bf4:	b016      	add	sp, #88	; 0x58
    9bf6:	bdb0      	pop	{r4, r5, r7, pc}
    9bf8:	20000b78 	.word	0x20000b78
    9bfc:	0000eff1 	.word	0x0000eff1
    9c00:	000085b5 	.word	0x000085b5
    9c04:	00000471 	.word	0x00000471
    9c08:	00006411 	.word	0x00006411
    9c0c:	20000ef8 	.word	0x20000ef8
    9c10:	00015f85 	.word	0x00015f85
    9c14:	000064b1 	.word	0x000064b1
    9c18:	20000f10 	.word	0x20000f10
    9c1c:	000065b1 	.word	0x000065b1
    9c20:	20000f28 	.word	0x20000f28
    9c24:	00006701 	.word	0x00006701
    9c28:	20000f70 	.word	0x20000f70
    9c2c:	0000b199 	.word	0x0000b199
    9c30:	20000fec 	.word	0x20000fec
    9c34:	0000b20d 	.word	0x0000b20d
    9c38:	20001004 	.word	0x20001004
    9c3c:	0000b27d 	.word	0x0000b27d
    9c40:	2000101c 	.word	0x2000101c
    9c44:	0000b2f1 	.word	0x0000b2f1
    9c48:	20001034 	.word	0x20001034
    9c4c:	00015f41 	.word	0x00015f41
    9c50:	00004b95 	.word	0x00004b95
    9c54:	00004c09 	.word	0x00004c09
    9c58:	00004ce5 	.word	0x00004ce5
    9c5c:	00004ca1 	.word	0x00004ca1
    9c60:	00004d29 	.word	0x00004d29
    9c64:	0001efe8 	.word	0x0001efe8
    9c68:	20000edc 	.word	0x20000edc
    9c6c:	0000f071 	.word	0x0000f071
    9c70:	00009341 	.word	0x00009341
    9c74:	00012be1 	.word	0x00012be1
    9c78:	0000932d 	.word	0x0000932d
    9c7c:	0000d37d 	.word	0x0000d37d
    9c80:	00009355 	.word	0x00009355
    9c84:	0000bc2d 	.word	0x0000bc2d
    9c88:	00009391 	.word	0x00009391
    9c8c:	0000e0d1 	.word	0x0000e0d1
    9c90:	0000e415 	.word	0x0000e415
    9c94:	00002905 	.word	0x00002905
    9c98:	20000fd0 	.word	0x20000fd0
    9c9c:	20000f8c 	.word	0x20000f8c
    9ca0:	20000fbc 	.word	0x20000fbc
    9ca4:	20000fe9 	.word	0x20000fe9
    9ca8:	00009369 	.word	0x00009369
    9cac:	0000b7ed 	.word	0x0000b7ed
    9cb0:	00005f15 	.word	0x00005f15

00009cb4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
    9cb8:	4a04      	ldr	r2, [pc, #16]	; (9ccc <LoRaMacStart+0x18>)
    9cba:	23d6      	movs	r3, #214	; 0xd6
    9cbc:	009b      	lsls	r3, r3, #2
    9cbe:	2100      	movs	r1, #0
    9cc0:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
    9cc2:	2300      	movs	r3, #0
}
    9cc4:	0018      	movs	r0, r3
    9cc6:	46bd      	mov	sp, r7
    9cc8:	bd80      	pop	{r7, pc}
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	20000b78 	.word	0x20000b78

00009cd0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
    9cd0:	b590      	push	{r4, r7, lr}
    9cd2:	b08b      	sub	sp, #44	; 0x2c
    9cd4:	af00      	add	r7, sp, #0
    9cd6:	0002      	movs	r2, r0
    9cd8:	6039      	str	r1, [r7, #0]
    9cda:	1dfb      	adds	r3, r7, #7
    9cdc:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    9cde:	4a5d      	ldr	r2, [pc, #372]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9ce0:	239c      	movs	r3, #156	; 0x9c
    9ce2:	00db      	lsls	r3, r3, #3
    9ce4:	58d3      	ldr	r3, [r2, r3]
    9ce6:	22cc      	movs	r2, #204	; 0xcc
    9ce8:	589b      	ldr	r3, [r3, r2]
    9cea:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    9cec:	4a59      	ldr	r2, [pc, #356]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9cee:	239c      	movs	r3, #156	; 0x9c
    9cf0:	00db      	lsls	r3, r3, #3
    9cf2:	58d3      	ldr	r3, [r2, r3]
    9cf4:	2205      	movs	r2, #5
    9cf6:	569a      	ldrsb	r2, [r3, r2]
    9cf8:	230f      	movs	r3, #15
    9cfa:	18fb      	adds	r3, r7, r3
    9cfc:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    9cfe:	4a55      	ldr	r2, [pc, #340]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d00:	239c      	movs	r3, #156	; 0x9c
    9d02:	00db      	lsls	r3, r3, #3
    9d04:	58d3      	ldr	r3, [r2, r3]
    9d06:	2204      	movs	r2, #4
    9d08:	569a      	ldrsb	r2, [r3, r2]
    9d0a:	230e      	movs	r3, #14
    9d0c:	18fb      	adds	r3, r7, r3
    9d0e:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
    9d10:	2300      	movs	r3, #0
    9d12:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
    9d14:	683b      	ldr	r3, [r7, #0]
    9d16:	2b00      	cmp	r3, #0
    9d18:	d101      	bne.n	9d1e <LoRaMacQueryTxPossible+0x4e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    9d1a:	2303      	movs	r3, #3
    9d1c:	e095      	b.n	9e4a <LoRaMacQueryTxPossible+0x17a>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
    9d1e:	4a4d      	ldr	r2, [pc, #308]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d20:	239c      	movs	r3, #156	; 0x9c
    9d22:	00db      	lsls	r3, r3, #3
    9d24:	58d1      	ldr	r1, [r2, r3]
    9d26:	2314      	movs	r3, #20
    9d28:	18fb      	adds	r3, r7, r3
    9d2a:	2287      	movs	r2, #135	; 0x87
    9d2c:	0092      	lsls	r2, r2, #2
    9d2e:	588a      	ldr	r2, [r1, r2]
    9d30:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
    9d32:	2314      	movs	r3, #20
    9d34:	18fb      	adds	r3, r7, r3
    9d36:	2200      	movs	r2, #0
    9d38:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
    9d3a:	4a46      	ldr	r2, [pc, #280]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d3c:	239c      	movs	r3, #156	; 0x9c
    9d3e:	00db      	lsls	r3, r3, #3
    9d40:	58d3      	ldr	r3, [r2, r3]
    9d42:	22ca      	movs	r2, #202	; 0xca
    9d44:	5c9a      	ldrb	r2, [r3, r2]
    9d46:	2314      	movs	r3, #20
    9d48:	18fb      	adds	r3, r7, r3
    9d4a:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    9d4c:	4a41      	ldr	r2, [pc, #260]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d4e:	239c      	movs	r3, #156	; 0x9c
    9d50:	00db      	lsls	r3, r3, #3
    9d52:	58d3      	ldr	r3, [r2, r3]
    9d54:	22cc      	movs	r2, #204	; 0xcc
    9d56:	589a      	ldr	r2, [r3, r2]
    9d58:	2314      	movs	r3, #20
    9d5a:	18fb      	adds	r3, r7, r3
    9d5c:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
    9d5e:	4a3d      	ldr	r2, [pc, #244]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d60:	239c      	movs	r3, #156	; 0x9c
    9d62:	00db      	lsls	r3, r3, #3
    9d64:	58d3      	ldr	r3, [r2, r3]
    9d66:	22d0      	movs	r2, #208	; 0xd0
    9d68:	5a9a      	ldrh	r2, [r3, r2]
    9d6a:	2314      	movs	r3, #20
    9d6c:	18fb      	adds	r3, r7, r3
    9d6e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
    9d70:	4a38      	ldr	r2, [pc, #224]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d72:	239c      	movs	r3, #156	; 0x9c
    9d74:	00db      	lsls	r3, r3, #3
    9d76:	58d3      	ldr	r3, [r2, r3]
    9d78:	22d2      	movs	r2, #210	; 0xd2
    9d7a:	5a9a      	ldrh	r2, [r3, r2]
    9d7c:	2314      	movs	r3, #20
    9d7e:	18fb      	adds	r3, r7, r3
    9d80:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    9d82:	4a34      	ldr	r2, [pc, #208]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d84:	239c      	movs	r3, #156	; 0x9c
    9d86:	00db      	lsls	r3, r3, #3
    9d88:	58d3      	ldr	r3, [r2, r3]
    9d8a:	22d5      	movs	r2, #213	; 0xd5
    9d8c:	569a      	ldrsb	r2, [r3, r2]
    9d8e:	2314      	movs	r3, #20
    9d90:	18fb      	adds	r3, r7, r3
    9d92:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    9d94:	4a2f      	ldr	r2, [pc, #188]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9d96:	239c      	movs	r3, #156	; 0x9c
    9d98:	00db      	lsls	r3, r3, #3
    9d9a:	58d3      	ldr	r3, [r2, r3]
    9d9c:	22d4      	movs	r2, #212	; 0xd4
    9d9e:	569a      	ldrsb	r2, [r3, r2]
    9da0:	2314      	movs	r3, #20
    9da2:	18fb      	adds	r3, r7, r3
    9da4:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    9da6:	4a2b      	ldr	r2, [pc, #172]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9da8:	239c      	movs	r3, #156	; 0x9c
    9daa:	00db      	lsls	r3, r3, #3
    9dac:	58d2      	ldr	r2, [r2, r3]
    9dae:	2380      	movs	r3, #128	; 0x80
    9db0:	005b      	lsls	r3, r3, #1
    9db2:	5cd2      	ldrb	r2, [r2, r3]
    9db4:	2314      	movs	r3, #20
    9db6:	18fb      	adds	r3, r7, r3
    9db8:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
    9dba:	4a26      	ldr	r2, [pc, #152]	; (9e54 <LoRaMacQueryTxPossible+0x184>)
    9dbc:	239c      	movs	r3, #156	; 0x9c
    9dbe:	00db      	lsls	r3, r3, #3
    9dc0:	58d3      	ldr	r3, [r2, r3]
    9dc2:	781a      	ldrb	r2, [r3, #0]
    9dc4:	2314      	movs	r3, #20
    9dc6:	18fb      	adds	r3, r7, r3
    9dc8:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
    9dca:	2310      	movs	r3, #16
    9dcc:	18fb      	adds	r3, r7, r3
    9dce:	220e      	movs	r2, #14
    9dd0:	18ba      	adds	r2, r7, r2
    9dd2:	210f      	movs	r1, #15
    9dd4:	1879      	adds	r1, r7, r1
    9dd6:	2014      	movs	r0, #20
    9dd8:	1838      	adds	r0, r7, r0
    9dda:	4c1f      	ldr	r4, [pc, #124]	; (9e58 <LoRaMacQueryTxPossible+0x188>)
    9ddc:	47a0      	blx	r4

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
    9dde:	230f      	movs	r3, #15
    9de0:	18fb      	adds	r3, r7, r3
    9de2:	781b      	ldrb	r3, [r3, #0]
    9de4:	b25b      	sxtb	r3, r3
    9de6:	0018      	movs	r0, r3
    9de8:	4b1c      	ldr	r3, [pc, #112]	; (9e5c <LoRaMacQueryTxPossible+0x18c>)
    9dea:	4798      	blx	r3
    9dec:	0003      	movs	r3, r0
    9dee:	001a      	movs	r2, r3
    9df0:	683b      	ldr	r3, [r7, #0]
    9df2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
    9df4:	2308      	movs	r3, #8
    9df6:	18fb      	adds	r3, r7, r3
    9df8:	0018      	movs	r0, r3
    9dfa:	4b19      	ldr	r3, [pc, #100]	; (9e60 <LoRaMacQueryTxPossible+0x190>)
    9dfc:	4798      	blx	r3
    9dfe:	1e03      	subs	r3, r0, #0
    9e00:	d001      	beq.n	9e06 <LoRaMacQueryTxPossible+0x136>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    9e02:	2313      	movs	r3, #19
    9e04:	e021      	b.n	9e4a <LoRaMacQueryTxPossible+0x17a>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
    9e06:	68bb      	ldr	r3, [r7, #8]
    9e08:	2b0f      	cmp	r3, #15
    9e0a:	d81a      	bhi.n	9e42 <LoRaMacQueryTxPossible+0x172>
    9e0c:	683b      	ldr	r3, [r7, #0]
    9e0e:	785b      	ldrb	r3, [r3, #1]
    9e10:	001a      	movs	r2, r3
    9e12:	68bb      	ldr	r3, [r7, #8]
    9e14:	429a      	cmp	r2, r3
    9e16:	d314      	bcc.n	9e42 <LoRaMacQueryTxPossible+0x172>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
    9e18:	683b      	ldr	r3, [r7, #0]
    9e1a:	785a      	ldrb	r2, [r3, #1]
    9e1c:	68bb      	ldr	r3, [r7, #8]
    9e1e:	b2db      	uxtb	r3, r3
    9e20:	1ad3      	subs	r3, r2, r3
    9e22:	b2da      	uxtb	r2, r3
    9e24:	683b      	ldr	r3, [r7, #0]
    9e26:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
    9e28:	683b      	ldr	r3, [r7, #0]
    9e2a:	785b      	ldrb	r3, [r3, #1]
    9e2c:	0019      	movs	r1, r3
    9e2e:	1dfb      	adds	r3, r7, #7
    9e30:	781a      	ldrb	r2, [r3, #0]
    9e32:	68bb      	ldr	r3, [r7, #8]
    9e34:	18d3      	adds	r3, r2, r3
    9e36:	4299      	cmp	r1, r3
    9e38:	d301      	bcc.n	9e3e <LoRaMacQueryTxPossible+0x16e>
        {
            return LORAMAC_STATUS_OK;
    9e3a:	2300      	movs	r3, #0
    9e3c:	e005      	b.n	9e4a <LoRaMacQueryTxPossible+0x17a>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
    9e3e:	2308      	movs	r3, #8
    9e40:	e003      	b.n	9e4a <LoRaMacQueryTxPossible+0x17a>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
    9e42:	683b      	ldr	r3, [r7, #0]
    9e44:	2200      	movs	r2, #0
    9e46:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
    9e48:	2308      	movs	r3, #8
    }
}
    9e4a:	0018      	movs	r0, r3
    9e4c:	46bd      	mov	sp, r7
    9e4e:	b00b      	add	sp, #44	; 0x2c
    9e50:	bd90      	pop	{r4, r7, pc}
    9e52:	46c0      	nop			; (mov r8, r8)
    9e54:	20000b78 	.word	0x20000b78
    9e58:	0000b7a9 	.word	0x0000b7a9
    9e5c:	00006961 	.word	0x00006961
    9e60:	0000bf11 	.word	0x0000bf11

00009e64 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
    9e64:	b590      	push	{r4, r7, lr}
    9e66:	b087      	sub	sp, #28
    9e68:	af00      	add	r7, sp, #0
    9e6a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    9e6c:	2317      	movs	r3, #23
    9e6e:	18fb      	adds	r3, r7, r3
    9e70:	2200      	movs	r2, #0
    9e72:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    9e74:	687b      	ldr	r3, [r7, #4]
    9e76:	2b00      	cmp	r3, #0
    9e78:	d101      	bne.n	9e7e <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    9e7a:	2303      	movs	r3, #3
    9e7c:	e159      	b.n	a132 <LoRaMacMibGetRequestConfirm+0x2ce>
    }

    switch( mibGet->Type )
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	2b33      	cmp	r3, #51	; 0x33
    9e84:	d900      	bls.n	9e88 <LoRaMacMibGetRequestConfirm+0x24>
    9e86:	e148      	b.n	a11a <LoRaMacMibGetRequestConfirm+0x2b6>
    9e88:	009a      	lsls	r2, r3, #2
    9e8a:	4bac      	ldr	r3, [pc, #688]	; (a13c <LoRaMacMibGetRequestConfirm+0x2d8>)
    9e8c:	18d3      	adds	r3, r2, r3
    9e8e:	681b      	ldr	r3, [r3, #0]
    9e90:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
    9e92:	4aab      	ldr	r2, [pc, #684]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9e94:	239c      	movs	r3, #156	; 0x9c
    9e96:	00db      	lsls	r3, r3, #3
    9e98:	58d3      	ldr	r3, [r2, r3]
    9e9a:	22c8      	movs	r2, #200	; 0xc8
    9e9c:	5c9a      	ldrb	r2, [r3, r2]
    9e9e:	687b      	ldr	r3, [r7, #4]
    9ea0:	711a      	strb	r2, [r3, #4]
            break;
    9ea2:	e143      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
    9ea4:	4aa6      	ldr	r2, [pc, #664]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9ea6:	239c      	movs	r3, #156	; 0x9c
    9ea8:	00db      	lsls	r3, r3, #3
    9eaa:	58d2      	ldr	r2, [r2, r3]
    9eac:	2388      	movs	r3, #136	; 0x88
    9eae:	009b      	lsls	r3, r3, #2
    9eb0:	5cd2      	ldrb	r2, [r2, r3]
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	711a      	strb	r2, [r3, #4]
            break;
    9eb6:	e139      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
    9eb8:	4aa1      	ldr	r2, [pc, #644]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9eba:	239c      	movs	r3, #156	; 0x9c
    9ebc:	00db      	lsls	r3, r3, #3
    9ebe:	58d3      	ldr	r3, [r2, r3]
    9ec0:	22ca      	movs	r2, #202	; 0xca
    9ec2:	5c9a      	ldrb	r2, [r3, r2]
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	711a      	strb	r2, [r3, #4]
            break;
    9ec8:	e130      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
    9eca:	4a9d      	ldr	r2, [pc, #628]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9ecc:	239c      	movs	r3, #156	; 0x9c
    9ece:	00db      	lsls	r3, r3, #3
    9ed0:	58d3      	ldr	r3, [r2, r3]
    9ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    9ed4:	687b      	ldr	r3, [r7, #4]
    9ed6:	605a      	str	r2, [r3, #4]
            break;
    9ed8:	e128      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
    9eda:	4a99      	ldr	r2, [pc, #612]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9edc:	239c      	movs	r3, #156	; 0x9c
    9ede:	00db      	lsls	r3, r3, #3
    9ee0:	58d3      	ldr	r3, [r2, r3]
    9ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	605a      	str	r2, [r3, #4]
            break;
    9ee8:	e120      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
    9eea:	4a95      	ldr	r2, [pc, #596]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9eec:	239c      	movs	r3, #156	; 0x9c
    9eee:	00db      	lsls	r3, r3, #3
    9ef0:	58d3      	ldr	r3, [r2, r3]
    9ef2:	22c9      	movs	r2, #201	; 0xc9
    9ef4:	5c9a      	ldrb	r2, [r3, r2]
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	711a      	strb	r2, [r3, #4]
            break;
    9efa:	e117      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
    9efc:	4a90      	ldr	r2, [pc, #576]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9efe:	239c      	movs	r3, #156	; 0x9c
    9f00:	00db      	lsls	r3, r3, #3
    9f02:	58d2      	ldr	r2, [r2, r3]
    9f04:	2316      	movs	r3, #22
    9f06:	33ff      	adds	r3, #255	; 0xff
    9f08:	5cd2      	ldrb	r2, [r2, r3]
    9f0a:	687b      	ldr	r3, [r7, #4]
    9f0c:	711a      	strb	r2, [r3, #4]
            break;
    9f0e:	e10d      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
    9f10:	2310      	movs	r3, #16
    9f12:	18fb      	adds	r3, r7, r3
    9f14:	221c      	movs	r2, #28
    9f16:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9f18:	4a89      	ldr	r2, [pc, #548]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9f1a:	239c      	movs	r3, #156	; 0x9c
    9f1c:	00db      	lsls	r3, r3, #3
    9f1e:	58d3      	ldr	r3, [r2, r3]
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	2210      	movs	r2, #16
    9f24:	18ba      	adds	r2, r7, r2
    9f26:	0011      	movs	r1, r2
    9f28:	0018      	movs	r0, r3
    9f2a:	4b86      	ldr	r3, [pc, #536]	; (a144 <LoRaMacMibGetRequestConfirm+0x2e0>)
    9f2c:	4798      	blx	r3
    9f2e:	0003      	movs	r3, r0
    9f30:	001a      	movs	r2, r3
    9f32:	230c      	movs	r3, #12
    9f34:	18fb      	adds	r3, r7, r3
    9f36:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
    9f38:	230c      	movs	r3, #12
    9f3a:	18fb      	adds	r3, r7, r3
    9f3c:	681a      	ldr	r2, [r3, #0]
    9f3e:	687b      	ldr	r3, [r7, #4]
    9f40:	605a      	str	r2, [r3, #4]
            break;
    9f42:	e0f3      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
    9f44:	4a7e      	ldr	r2, [pc, #504]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9f46:	239c      	movs	r3, #156	; 0x9c
    9f48:	00db      	lsls	r3, r3, #3
    9f4a:	58d2      	ldr	r2, [r2, r3]
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	21f8      	movs	r1, #248	; 0xf8
    9f50:	3304      	adds	r3, #4
    9f52:	1852      	adds	r2, r2, r1
    9f54:	ca03      	ldmia	r2!, {r0, r1}
    9f56:	c303      	stmia	r3!, {r0, r1}
            break;
    9f58:	e0e8      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
    9f5a:	4a79      	ldr	r2, [pc, #484]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9f5c:	239c      	movs	r3, #156	; 0x9c
    9f5e:	00db      	lsls	r3, r3, #3
    9f60:	58d2      	ldr	r2, [r2, r3]
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	3304      	adds	r3, #4
    9f66:	3228      	adds	r2, #40	; 0x28
    9f68:	ca03      	ldmia	r2!, {r0, r1}
    9f6a:	c303      	stmia	r3!, {r0, r1}
            break;
    9f6c:	e0de      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
    9f6e:	2310      	movs	r3, #16
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	221a      	movs	r2, #26
    9f74:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9f76:	4a72      	ldr	r2, [pc, #456]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9f78:	239c      	movs	r3, #156	; 0x9c
    9f7a:	00db      	lsls	r3, r3, #3
    9f7c:	58d3      	ldr	r3, [r2, r3]
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	2210      	movs	r2, #16
    9f82:	18ba      	adds	r2, r7, r2
    9f84:	0011      	movs	r1, r2
    9f86:	0018      	movs	r0, r3
    9f88:	4b6e      	ldr	r3, [pc, #440]	; (a144 <LoRaMacMibGetRequestConfirm+0x2e0>)
    9f8a:	4798      	blx	r3
    9f8c:	0003      	movs	r3, r0
    9f8e:	001a      	movs	r2, r3
    9f90:	230c      	movs	r3, #12
    9f92:	18fb      	adds	r3, r7, r3
    9f94:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
    9f96:	230c      	movs	r3, #12
    9f98:	18fb      	adds	r3, r7, r3
    9f9a:	681a      	ldr	r2, [r3, #0]
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	605a      	str	r2, [r3, #4]
            break;
    9fa0:	e0c4      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
    9fa2:	2310      	movs	r3, #16
    9fa4:	18fb      	adds	r3, r7, r3
    9fa6:	2219      	movs	r2, #25
    9fa8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    9faa:	4a65      	ldr	r2, [pc, #404]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9fac:	239c      	movs	r3, #156	; 0x9c
    9fae:	00db      	lsls	r3, r3, #3
    9fb0:	58d3      	ldr	r3, [r2, r3]
    9fb2:	781b      	ldrb	r3, [r3, #0]
    9fb4:	2210      	movs	r2, #16
    9fb6:	18ba      	adds	r2, r7, r2
    9fb8:	0011      	movs	r1, r2
    9fba:	0018      	movs	r0, r3
    9fbc:	4b61      	ldr	r3, [pc, #388]	; (a144 <LoRaMacMibGetRequestConfirm+0x2e0>)
    9fbe:	4798      	blx	r3
    9fc0:	0003      	movs	r3, r0
    9fc2:	001a      	movs	r2, r3
    9fc4:	230c      	movs	r3, #12
    9fc6:	18fb      	adds	r3, r7, r3
    9fc8:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
    9fca:	230c      	movs	r3, #12
    9fcc:	18fb      	adds	r3, r7, r3
    9fce:	681a      	ldr	r2, [r3, #0]
    9fd0:	687b      	ldr	r3, [r7, #4]
    9fd2:	605a      	str	r2, [r3, #4]
            break;
    9fd4:	e0aa      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
    9fd6:	4a5a      	ldr	r2, [pc, #360]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9fd8:	239c      	movs	r3, #156	; 0x9c
    9fda:	00db      	lsls	r3, r3, #3
    9fdc:	58d3      	ldr	r3, [r2, r3]
    9fde:	22f4      	movs	r2, #244	; 0xf4
    9fe0:	5c9a      	ldrb	r2, [r3, r2]
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	711a      	strb	r2, [r3, #4]
            break;
    9fe6:	e0a1      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
    9fe8:	4a55      	ldr	r2, [pc, #340]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9fea:	239c      	movs	r3, #156	; 0x9c
    9fec:	00db      	lsls	r3, r3, #3
    9fee:	58d3      	ldr	r3, [r2, r3]
    9ff0:	22e0      	movs	r2, #224	; 0xe0
    9ff2:	589a      	ldr	r2, [r3, r2]
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	605a      	str	r2, [r3, #4]
            break;
    9ff8:	e098      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
    9ffa:	4a51      	ldr	r2, [pc, #324]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    9ffc:	239c      	movs	r3, #156	; 0x9c
    9ffe:	00db      	lsls	r3, r3, #3
    a000:	58d3      	ldr	r3, [r2, r3]
    a002:	22e4      	movs	r2, #228	; 0xe4
    a004:	589a      	ldr	r2, [r3, r2]
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	605a      	str	r2, [r3, #4]
            break;
    a00a:	e08f      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
    a00c:	4a4c      	ldr	r2, [pc, #304]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a00e:	239c      	movs	r3, #156	; 0x9c
    a010:	00db      	lsls	r3, r3, #3
    a012:	58d3      	ldr	r3, [r2, r3]
    a014:	22e8      	movs	r2, #232	; 0xe8
    a016:	589a      	ldr	r2, [r3, r2]
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	605a      	str	r2, [r3, #4]
            break;
    a01c:	e086      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
    a01e:	4a48      	ldr	r2, [pc, #288]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a020:	239c      	movs	r3, #156	; 0x9c
    a022:	00db      	lsls	r3, r3, #3
    a024:	58d3      	ldr	r3, [r2, r3]
    a026:	22ec      	movs	r2, #236	; 0xec
    a028:	589a      	ldr	r2, [r3, r2]
    a02a:	687b      	ldr	r3, [r7, #4]
    a02c:	605a      	str	r2, [r3, #4]
            break;
    a02e:	e07d      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
    a030:	4a43      	ldr	r2, [pc, #268]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a032:	239c      	movs	r3, #156	; 0x9c
    a034:	00db      	lsls	r3, r3, #3
    a036:	58d3      	ldr	r3, [r2, r3]
    a038:	22f0      	movs	r2, #240	; 0xf0
    a03a:	589a      	ldr	r2, [r3, r2]
    a03c:	687b      	ldr	r3, [r7, #4]
    a03e:	605a      	str	r2, [r3, #4]
            break;
    a040:	e074      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    a042:	4a3f      	ldr	r2, [pc, #252]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a044:	239c      	movs	r3, #156	; 0x9c
    a046:	00db      	lsls	r3, r3, #3
    a048:	58d3      	ldr	r3, [r2, r3]
    a04a:	2205      	movs	r2, #5
    a04c:	569a      	ldrsb	r2, [r3, r2]
    a04e:	687b      	ldr	r3, [r7, #4]
    a050:	711a      	strb	r2, [r3, #4]
            break;
    a052:	e06b      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
    a054:	4a3a      	ldr	r2, [pc, #232]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a056:	239c      	movs	r3, #156	; 0x9c
    a058:	00db      	lsls	r3, r3, #3
    a05a:	58d3      	ldr	r3, [r2, r3]
    a05c:	22d5      	movs	r2, #213	; 0xd5
    a05e:	569a      	ldrsb	r2, [r3, r2]
    a060:	687b      	ldr	r3, [r7, #4]
    a062:	711a      	strb	r2, [r3, #4]
            break;
    a064:	e062      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    a066:	4a36      	ldr	r2, [pc, #216]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a068:	239c      	movs	r3, #156	; 0x9c
    a06a:	00db      	lsls	r3, r3, #3
    a06c:	58d3      	ldr	r3, [r2, r3]
    a06e:	2204      	movs	r2, #4
    a070:	569a      	ldrsb	r2, [r3, r2]
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	711a      	strb	r2, [r3, #4]
            break;
    a076:	e059      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    a078:	4a31      	ldr	r2, [pc, #196]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a07a:	239c      	movs	r3, #156	; 0x9c
    a07c:	00db      	lsls	r3, r3, #3
    a07e:	58d3      	ldr	r3, [r2, r3]
    a080:	22d4      	movs	r2, #212	; 0xd4
    a082:	569a      	ldrsb	r2, [r3, r2]
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	711a      	strb	r2, [r3, #4]
            break;
    a088:	e050      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
    a08a:	4a2d      	ldr	r2, [pc, #180]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a08c:	239c      	movs	r3, #156	; 0x9c
    a08e:	00db      	lsls	r3, r3, #3
    a090:	58d3      	ldr	r3, [r2, r3]
    a092:	22d8      	movs	r2, #216	; 0xd8
    a094:	589a      	ldr	r2, [r3, r2]
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	605a      	str	r2, [r3, #4]
            break;
    a09a:	e047      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
    a09c:	4a28      	ldr	r2, [pc, #160]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a09e:	239c      	movs	r3, #156	; 0x9c
    a0a0:	00db      	lsls	r3, r3, #3
    a0a2:	58d3      	ldr	r3, [r2, r3]
    a0a4:	22dc      	movs	r2, #220	; 0xdc
    a0a6:	5c9a      	ldrb	r2, [r3, r2]
    a0a8:	687b      	ldr	r3, [r7, #4]
    a0aa:	711a      	strb	r2, [r3, #4]
            break;
    a0ac:	e03e      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
    a0ae:	4a24      	ldr	r2, [pc, #144]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a0b0:	239c      	movs	r3, #156	; 0x9c
    a0b2:	00db      	lsls	r3, r3, #3
    a0b4:	58d2      	ldr	r2, [r2, r3]
    a0b6:	2384      	movs	r3, #132	; 0x84
    a0b8:	005b      	lsls	r3, r3, #1
    a0ba:	58d2      	ldr	r2, [r2, r3]
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	605a      	str	r2, [r3, #4]
            break;
    a0c0:	e034      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
    a0c2:	4b21      	ldr	r3, [pc, #132]	; (a148 <LoRaMacMibGetRequestConfirm+0x2e4>)
    a0c4:	4798      	blx	r3
    a0c6:	0002      	movs	r2, r0
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	605a      	str	r2, [r3, #4]
            break;
    a0cc:	e02e      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
    a0ce:	4a1c      	ldr	r2, [pc, #112]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a0d0:	239c      	movs	r3, #156	; 0x9c
    a0d2:	00db      	lsls	r3, r3, #3
    a0d4:	58d3      	ldr	r3, [r2, r3]
    a0d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	605a      	str	r2, [r3, #4]
            break;
    a0dc:	e026      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_REJOIN_0_CYCLE:
        {
            mibGet->Param.Rejoin0CycleInSec = MacCtx.NvmCtx->Rejoin0CycleInSec;
    a0de:	4a18      	ldr	r2, [pc, #96]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a0e0:	239c      	movs	r3, #156	; 0x9c
    a0e2:	00db      	lsls	r3, r3, #3
    a0e4:	58d2      	ldr	r2, [r2, r3]
    a0e6:	238b      	movs	r3, #139	; 0x8b
    a0e8:	009b      	lsls	r3, r3, #2
    a0ea:	58d2      	ldr	r2, [r2, r3]
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	605a      	str	r2, [r3, #4]
            break;
    a0f0:	e01c      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_REJOIN_1_CYCLE:
        {
            mibGet->Param.Rejoin1CycleInSec = MacCtx.NvmCtx->Rejoin1CycleInSec;
    a0f2:	4a13      	ldr	r2, [pc, #76]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a0f4:	239c      	movs	r3, #156	; 0x9c
    a0f6:	00db      	lsls	r3, r3, #3
    a0f8:	58d2      	ldr	r2, [r2, r3]
    a0fa:	238c      	movs	r3, #140	; 0x8c
    a0fc:	009b      	lsls	r3, r3, #2
    a0fe:	58d2      	ldr	r2, [r2, r3]
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	605a      	str	r2, [r3, #4]
            break;
    a104:	e012      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        case MIB_REJOIN_2_CYCLE:
        {
            mibGet->Param.Rejoin2CycleInSec = MacCtx.NvmCtx->Rejoin2CycleInSec;
    a106:	4a0e      	ldr	r2, [pc, #56]	; (a140 <LoRaMacMibGetRequestConfirm+0x2dc>)
    a108:	239c      	movs	r3, #156	; 0x9c
    a10a:	00db      	lsls	r3, r3, #3
    a10c:	58d2      	ldr	r2, [r2, r3]
    a10e:	238d      	movs	r3, #141	; 0x8d
    a110:	009b      	lsls	r3, r3, #2
    a112:	58d2      	ldr	r2, [r2, r3]
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	605a      	str	r2, [r3, #4]
            break;
    a118:	e008      	b.n	a12c <LoRaMacMibGetRequestConfirm+0x2c8>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
    a11a:	2317      	movs	r3, #23
    a11c:	18fc      	adds	r4, r7, r3
    a11e:	687b      	ldr	r3, [r7, #4]
    a120:	0018      	movs	r0, r3
    a122:	4b0a      	ldr	r3, [pc, #40]	; (a14c <LoRaMacMibGetRequestConfirm+0x2e8>)
    a124:	4798      	blx	r3
    a126:	0003      	movs	r3, r0
    a128:	7023      	strb	r3, [r4, #0]
            break;
    a12a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
    a12c:	2317      	movs	r3, #23
    a12e:	18fb      	adds	r3, r7, r3
    a130:	781b      	ldrb	r3, [r3, #0]
}
    a132:	0018      	movs	r0, r3
    a134:	46bd      	mov	sp, r7
    a136:	b007      	add	sp, #28
    a138:	bd90      	pop	{r4, r7, pc}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	0001f0e8 	.word	0x0001f0e8
    a140:	20000b78 	.word	0x20000b78
    a144:	0000eff1 	.word	0x0000eff1
    a148:	00008d7d 	.word	0x00008d7d
    a14c:	0000b929 	.word	0x0000b929

0000a150 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
    a150:	b590      	push	{r4, r7, lr}
    a152:	b089      	sub	sp, #36	; 0x24
    a154:	af02      	add	r7, sp, #8
    a156:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    a158:	2317      	movs	r3, #23
    a15a:	18fb      	adds	r3, r7, r3
    a15c:	2200      	movs	r2, #0
    a15e:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	2b00      	cmp	r3, #0
    a164:	d102      	bne.n	a16c <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    a166:	2303      	movs	r3, #3
    a168:	f000 fcd7 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
    a16c:	4ad9      	ldr	r2, [pc, #868]	; (a4d4 <LoRaMacMibSetRequestConfirm+0x384>)
    a16e:	23d6      	movs	r3, #214	; 0xd6
    a170:	009b      	lsls	r3, r3, #2
    a172:	58d3      	ldr	r3, [r2, r3]
    a174:	2202      	movs	r2, #2
    a176:	4013      	ands	r3, r2
    a178:	d002      	beq.n	a180 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
    a17a:	2301      	movs	r3, #1
    a17c:	f000 fccd 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
    }

    switch( mibSet->Type )
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	781b      	ldrb	r3, [r3, #0]
    a184:	2b32      	cmp	r3, #50	; 0x32
    a186:	d901      	bls.n	a18c <LoRaMacMibSetRequestConfirm+0x3c>
    a188:	f000 fc86 	bl	aa98 <LoRaMacMibSetRequestConfirm+0x948>
    a18c:	009a      	lsls	r2, r3, #2
    a18e:	4bd2      	ldr	r3, [pc, #840]	; (a4d8 <LoRaMacMibSetRequestConfirm+0x388>)
    a190:	18d3      	adds	r3, r2, r3
    a192:	681b      	ldr	r3, [r3, #0]
    a194:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	791b      	ldrb	r3, [r3, #4]
    a19a:	2217      	movs	r2, #23
    a19c:	18bc      	adds	r4, r7, r2
    a19e:	0018      	movs	r0, r3
    a1a0:	4bce      	ldr	r3, [pc, #824]	; (a4dc <LoRaMacMibSetRequestConfirm+0x38c>)
    a1a2:	4798      	blx	r3
    a1a4:	0003      	movs	r3, r0
    a1a6:	7023      	strb	r3, [r4, #0]
            break;
    a1a8:	f000 fcb0 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	791b      	ldrb	r3, [r3, #4]
    a1b0:	2b02      	cmp	r3, #2
    a1b2:	d00a      	beq.n	a1ca <LoRaMacMibSetRequestConfirm+0x7a>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
    a1b4:	4ac7      	ldr	r2, [pc, #796]	; (a4d4 <LoRaMacMibSetRequestConfirm+0x384>)
    a1b6:	239c      	movs	r3, #156	; 0x9c
    a1b8:	00db      	lsls	r3, r3, #3
    a1ba:	58d2      	ldr	r2, [r2, r3]
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	7919      	ldrb	r1, [r3, #4]
    a1c0:	2388      	movs	r3, #136	; 0x88
    a1c2:	009b      	lsls	r3, r3, #2
    a1c4:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a1c6:	f000 fca1 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a1ca:	2317      	movs	r3, #23
    a1cc:	18fb      	adds	r3, r7, r3
    a1ce:	2203      	movs	r2, #3
    a1d0:	701a      	strb	r2, [r3, #0]
            break;
    a1d2:	f000 fc9b 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
    a1d6:	4abf      	ldr	r2, [pc, #764]	; (a4d4 <LoRaMacMibSetRequestConfirm+0x384>)
    a1d8:	239c      	movs	r3, #156	; 0x9c
    a1da:	00db      	lsls	r3, r3, #3
    a1dc:	58d3      	ldr	r3, [r2, r3]
    a1de:	687a      	ldr	r2, [r7, #4]
    a1e0:	7911      	ldrb	r1, [r2, #4]
    a1e2:	22ca      	movs	r2, #202	; 0xca
    a1e4:	5499      	strb	r1, [r3, r2]
            break;
    a1e6:	f000 fc91 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
    a1ea:	4aba      	ldr	r2, [pc, #744]	; (a4d4 <LoRaMacMibSetRequestConfirm+0x384>)
    a1ec:	239c      	movs	r3, #156	; 0x9c
    a1ee:	00db      	lsls	r3, r3, #3
    a1f0:	58d3      	ldr	r3, [r2, r3]
    a1f2:	687a      	ldr	r2, [r7, #4]
    a1f4:	6852      	ldr	r2, [r2, #4]
    a1f6:	641a      	str	r2, [r3, #64]	; 0x40
            break;
    a1f8:	f000 fc88 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
    a1fc:	4ab5      	ldr	r2, [pc, #724]	; (a4d4 <LoRaMacMibSetRequestConfirm+0x384>)
    a1fe:	239c      	movs	r3, #156	; 0x9c
    a200:	00db      	lsls	r3, r3, #3
    a202:	58d3      	ldr	r3, [r2, r3]
    a204:	687a      	ldr	r2, [r7, #4]
    a206:	6852      	ldr	r2, [r2, #4]
    a208:	645a      	str	r2, [r3, #68]	; 0x44
            break;
    a20a:	f000 fc7f 	bl	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	685b      	ldr	r3, [r3, #4]
    a212:	2b00      	cmp	r3, #0
    a214:	d00c      	beq.n	a230 <LoRaMacMibSetRequestConfirm+0xe0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	685b      	ldr	r3, [r3, #4]
    a21a:	0019      	movs	r1, r3
    a21c:	2000      	movs	r0, #0
    a21e:	4bb0      	ldr	r3, [pc, #704]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a220:	4798      	blx	r3
    a222:	1e03      	subs	r3, r0, #0
    a224:	d101      	bne.n	a22a <LoRaMacMibSetRequestConfirm+0xda>
    a226:	f000 fc40 	bl	aaaa <LoRaMacMibSetRequestConfirm+0x95a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a22a:	2311      	movs	r3, #17
    a22c:	f000 fc75 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a230:	2317      	movs	r3, #23
    a232:	18fb      	adds	r3, r7, r3
    a234:	2203      	movs	r2, #3
    a236:	701a      	strb	r2, [r3, #0]
            }
            break;
    a238:	f000 fc37 	bl	aaaa <LoRaMacMibSetRequestConfirm+0x95a>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	685b      	ldr	r3, [r3, #4]
    a240:	2b00      	cmp	r3, #0
    a242:	d00c      	beq.n	a25e <LoRaMacMibSetRequestConfirm+0x10e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
    a244:	687b      	ldr	r3, [r7, #4]
    a246:	685b      	ldr	r3, [r3, #4]
    a248:	0019      	movs	r1, r3
    a24a:	2001      	movs	r0, #1
    a24c:	4ba4      	ldr	r3, [pc, #656]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a24e:	4798      	blx	r3
    a250:	1e03      	subs	r3, r0, #0
    a252:	d101      	bne.n	a258 <LoRaMacMibSetRequestConfirm+0x108>
    a254:	f000 fc2b 	bl	aaae <LoRaMacMibSetRequestConfirm+0x95e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a258:	2311      	movs	r3, #17
    a25a:	f000 fc5e 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a25e:	2317      	movs	r3, #23
    a260:	18fb      	adds	r3, r7, r3
    a262:	2203      	movs	r2, #3
    a264:	701a      	strb	r2, [r3, #0]
            }
            break;
    a266:	f000 fc22 	bl	aaae <LoRaMacMibSetRequestConfirm+0x95e>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
    a26a:	687b      	ldr	r3, [r7, #4]
    a26c:	685b      	ldr	r3, [r3, #4]
    a26e:	2b00      	cmp	r3, #0
    a270:	d00c      	beq.n	a28c <LoRaMacMibSetRequestConfirm+0x13c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	685b      	ldr	r3, [r3, #4]
    a276:	0019      	movs	r1, r3
    a278:	2002      	movs	r0, #2
    a27a:	4b99      	ldr	r3, [pc, #612]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a27c:	4798      	blx	r3
    a27e:	1e03      	subs	r3, r0, #0
    a280:	d101      	bne.n	a286 <LoRaMacMibSetRequestConfirm+0x136>
    a282:	f000 fc16 	bl	aab2 <LoRaMacMibSetRequestConfirm+0x962>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a286:	2311      	movs	r3, #17
    a288:	f000 fc47 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a28c:	2317      	movs	r3, #23
    a28e:	18fb      	adds	r3, r7, r3
    a290:	2203      	movs	r2, #3
    a292:	701a      	strb	r2, [r3, #0]
            }
            break;
    a294:	f000 fc0d 	bl	aab2 <LoRaMacMibSetRequestConfirm+0x962>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	685b      	ldr	r3, [r3, #4]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d00c      	beq.n	a2ba <LoRaMacMibSetRequestConfirm+0x16a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
    a2a0:	687b      	ldr	r3, [r7, #4]
    a2a2:	685b      	ldr	r3, [r3, #4]
    a2a4:	0019      	movs	r1, r3
    a2a6:	2003      	movs	r0, #3
    a2a8:	4b8d      	ldr	r3, [pc, #564]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a2aa:	4798      	blx	r3
    a2ac:	1e03      	subs	r3, r0, #0
    a2ae:	d101      	bne.n	a2b4 <LoRaMacMibSetRequestConfirm+0x164>
    a2b0:	f000 fc01 	bl	aab6 <LoRaMacMibSetRequestConfirm+0x966>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a2b4:	2311      	movs	r3, #17
    a2b6:	f000 fc30 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a2ba:	2317      	movs	r3, #23
    a2bc:	18fb      	adds	r3, r7, r3
    a2be:	2203      	movs	r2, #3
    a2c0:	701a      	strb	r2, [r3, #0]
            }
            break;
    a2c2:	f000 fbf8 	bl	aab6 <LoRaMacMibSetRequestConfirm+0x966>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	685b      	ldr	r3, [r3, #4]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d00c      	beq.n	a2e8 <LoRaMacMibSetRequestConfirm+0x198>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
    a2ce:	687b      	ldr	r3, [r7, #4]
    a2d0:	685b      	ldr	r3, [r3, #4]
    a2d2:	0019      	movs	r1, r3
    a2d4:	2004      	movs	r0, #4
    a2d6:	4b82      	ldr	r3, [pc, #520]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a2d8:	4798      	blx	r3
    a2da:	1e03      	subs	r3, r0, #0
    a2dc:	d101      	bne.n	a2e2 <LoRaMacMibSetRequestConfirm+0x192>
    a2de:	f000 fbec 	bl	aaba <LoRaMacMibSetRequestConfirm+0x96a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a2e2:	2311      	movs	r3, #17
    a2e4:	f000 fc19 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a2e8:	2317      	movs	r3, #23
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	2203      	movs	r2, #3
    a2ee:	701a      	strb	r2, [r3, #0]
            }
            break;
    a2f0:	f000 fbe3 	bl	aaba <LoRaMacMibSetRequestConfirm+0x96a>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
    a2f4:	687b      	ldr	r3, [r7, #4]
    a2f6:	685b      	ldr	r3, [r3, #4]
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d00c      	beq.n	a316 <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
    a2fc:	687b      	ldr	r3, [r7, #4]
    a2fe:	685b      	ldr	r3, [r3, #4]
    a300:	0019      	movs	r1, r3
    a302:	2005      	movs	r0, #5
    a304:	4b76      	ldr	r3, [pc, #472]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a306:	4798      	blx	r3
    a308:	1e03      	subs	r3, r0, #0
    a30a:	d101      	bne.n	a310 <LoRaMacMibSetRequestConfirm+0x1c0>
    a30c:	f000 fbd7 	bl	aabe <LoRaMacMibSetRequestConfirm+0x96e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a310:	2311      	movs	r3, #17
    a312:	f000 fc02 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a316:	2317      	movs	r3, #23
    a318:	18fb      	adds	r3, r7, r3
    a31a:	2203      	movs	r2, #3
    a31c:	701a      	strb	r2, [r3, #0]
            }
            break;
    a31e:	f000 fbce 	bl	aabe <LoRaMacMibSetRequestConfirm+0x96e>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	685b      	ldr	r3, [r3, #4]
    a326:	2b00      	cmp	r3, #0
    a328:	d00c      	beq.n	a344 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	685b      	ldr	r3, [r3, #4]
    a32e:	0019      	movs	r1, r3
    a330:	2006      	movs	r0, #6
    a332:	4b6b      	ldr	r3, [pc, #428]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a334:	4798      	blx	r3
    a336:	1e03      	subs	r3, r0, #0
    a338:	d101      	bne.n	a33e <LoRaMacMibSetRequestConfirm+0x1ee>
    a33a:	f000 fbc2 	bl	aac2 <LoRaMacMibSetRequestConfirm+0x972>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a33e:	2311      	movs	r3, #17
    a340:	f000 fbeb 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a344:	2317      	movs	r3, #23
    a346:	18fb      	adds	r3, r7, r3
    a348:	2203      	movs	r2, #3
    a34a:	701a      	strb	r2, [r3, #0]
            }
            break;
    a34c:	f000 fbb9 	bl	aac2 <LoRaMacMibSetRequestConfirm+0x972>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	685b      	ldr	r3, [r3, #4]
    a354:	2b00      	cmp	r3, #0
    a356:	d00c      	beq.n	a372 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	685b      	ldr	r3, [r3, #4]
    a35c:	0019      	movs	r1, r3
    a35e:	2007      	movs	r0, #7
    a360:	4b5f      	ldr	r3, [pc, #380]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a362:	4798      	blx	r3
    a364:	1e03      	subs	r3, r0, #0
    a366:	d101      	bne.n	a36c <LoRaMacMibSetRequestConfirm+0x21c>
    a368:	f000 fbad 	bl	aac6 <LoRaMacMibSetRequestConfirm+0x976>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a36c:	2311      	movs	r3, #17
    a36e:	f000 fbd4 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a372:	2317      	movs	r3, #23
    a374:	18fb      	adds	r3, r7, r3
    a376:	2203      	movs	r2, #3
    a378:	701a      	strb	r2, [r3, #0]
            }
            break;
    a37a:	f000 fba4 	bl	aac6 <LoRaMacMibSetRequestConfirm+0x976>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	685b      	ldr	r3, [r3, #4]
    a382:	2b00      	cmp	r3, #0
    a384:	d00c      	beq.n	a3a0 <LoRaMacMibSetRequestConfirm+0x250>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
    a386:	687b      	ldr	r3, [r7, #4]
    a388:	685b      	ldr	r3, [r3, #4]
    a38a:	0019      	movs	r1, r3
    a38c:	207f      	movs	r0, #127	; 0x7f
    a38e:	4b54      	ldr	r3, [pc, #336]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a390:	4798      	blx	r3
    a392:	1e03      	subs	r3, r0, #0
    a394:	d101      	bne.n	a39a <LoRaMacMibSetRequestConfirm+0x24a>
    a396:	f000 fb98 	bl	aaca <LoRaMacMibSetRequestConfirm+0x97a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a39a:	2311      	movs	r3, #17
    a39c:	f000 fbbd 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a3a0:	2317      	movs	r3, #23
    a3a2:	18fb      	adds	r3, r7, r3
    a3a4:	2203      	movs	r2, #3
    a3a6:	701a      	strb	r2, [r3, #0]
            }
            break;
    a3a8:	f000 fb8f 	bl	aaca <LoRaMacMibSetRequestConfirm+0x97a>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	685b      	ldr	r3, [r3, #4]
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d00c      	beq.n	a3ce <LoRaMacMibSetRequestConfirm+0x27e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	685b      	ldr	r3, [r3, #4]
    a3b8:	0019      	movs	r1, r3
    a3ba:	2080      	movs	r0, #128	; 0x80
    a3bc:	4b48      	ldr	r3, [pc, #288]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a3be:	4798      	blx	r3
    a3c0:	1e03      	subs	r3, r0, #0
    a3c2:	d101      	bne.n	a3c8 <LoRaMacMibSetRequestConfirm+0x278>
    a3c4:	f000 fb83 	bl	aace <LoRaMacMibSetRequestConfirm+0x97e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a3c8:	2311      	movs	r3, #17
    a3ca:	f000 fba6 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a3ce:	2317      	movs	r3, #23
    a3d0:	18fb      	adds	r3, r7, r3
    a3d2:	2203      	movs	r2, #3
    a3d4:	701a      	strb	r2, [r3, #0]
            }
            break;
    a3d6:	f000 fb7a 	bl	aace <LoRaMacMibSetRequestConfirm+0x97e>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	685b      	ldr	r3, [r3, #4]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d00c      	beq.n	a3fc <LoRaMacMibSetRequestConfirm+0x2ac>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	685b      	ldr	r3, [r3, #4]
    a3e6:	0019      	movs	r1, r3
    a3e8:	2081      	movs	r0, #129	; 0x81
    a3ea:	4b3d      	ldr	r3, [pc, #244]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a3ec:	4798      	blx	r3
    a3ee:	1e03      	subs	r3, r0, #0
    a3f0:	d101      	bne.n	a3f6 <LoRaMacMibSetRequestConfirm+0x2a6>
    a3f2:	f000 fb6e 	bl	aad2 <LoRaMacMibSetRequestConfirm+0x982>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a3f6:	2311      	movs	r3, #17
    a3f8:	f000 fb8f 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a3fc:	2317      	movs	r3, #23
    a3fe:	18fb      	adds	r3, r7, r3
    a400:	2203      	movs	r2, #3
    a402:	701a      	strb	r2, [r3, #0]
            }
            break;
    a404:	e365      	b.n	aad2 <LoRaMacMibSetRequestConfirm+0x982>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
    a406:	687b      	ldr	r3, [r7, #4]
    a408:	685b      	ldr	r3, [r3, #4]
    a40a:	2b00      	cmp	r3, #0
    a40c:	d00b      	beq.n	a426 <LoRaMacMibSetRequestConfirm+0x2d6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	685b      	ldr	r3, [r3, #4]
    a412:	0019      	movs	r1, r3
    a414:	2082      	movs	r0, #130	; 0x82
    a416:	4b32      	ldr	r3, [pc, #200]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a418:	4798      	blx	r3
    a41a:	1e03      	subs	r3, r0, #0
    a41c:	d100      	bne.n	a420 <LoRaMacMibSetRequestConfirm+0x2d0>
    a41e:	e35a      	b.n	aad6 <LoRaMacMibSetRequestConfirm+0x986>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a420:	2311      	movs	r3, #17
    a422:	f000 fb7a 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a426:	2317      	movs	r3, #23
    a428:	18fb      	adds	r3, r7, r3
    a42a:	2203      	movs	r2, #3
    a42c:	701a      	strb	r2, [r3, #0]
            }
            break;
    a42e:	e352      	b.n	aad6 <LoRaMacMibSetRequestConfirm+0x986>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
    a430:	687b      	ldr	r3, [r7, #4]
    a432:	685b      	ldr	r3, [r3, #4]
    a434:	2b00      	cmp	r3, #0
    a436:	d00b      	beq.n	a450 <LoRaMacMibSetRequestConfirm+0x300>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
    a438:	687b      	ldr	r3, [r7, #4]
    a43a:	685b      	ldr	r3, [r3, #4]
    a43c:	0019      	movs	r1, r3
    a43e:	2083      	movs	r0, #131	; 0x83
    a440:	4b27      	ldr	r3, [pc, #156]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a442:	4798      	blx	r3
    a444:	1e03      	subs	r3, r0, #0
    a446:	d100      	bne.n	a44a <LoRaMacMibSetRequestConfirm+0x2fa>
    a448:	e347      	b.n	aada <LoRaMacMibSetRequestConfirm+0x98a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a44a:	2311      	movs	r3, #17
    a44c:	f000 fb65 	bl	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a450:	2317      	movs	r3, #23
    a452:	18fb      	adds	r3, r7, r3
    a454:	2203      	movs	r2, #3
    a456:	701a      	strb	r2, [r3, #0]
            }
            break;
    a458:	e33f      	b.n	aada <LoRaMacMibSetRequestConfirm+0x98a>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
    a45a:	687b      	ldr	r3, [r7, #4]
    a45c:	685b      	ldr	r3, [r3, #4]
    a45e:	2b00      	cmp	r3, #0
    a460:	d00a      	beq.n	a478 <LoRaMacMibSetRequestConfirm+0x328>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
    a462:	687b      	ldr	r3, [r7, #4]
    a464:	685b      	ldr	r3, [r3, #4]
    a466:	0019      	movs	r1, r3
    a468:	2084      	movs	r0, #132	; 0x84
    a46a:	4b1d      	ldr	r3, [pc, #116]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a46c:	4798      	blx	r3
    a46e:	1e03      	subs	r3, r0, #0
    a470:	d100      	bne.n	a474 <LoRaMacMibSetRequestConfirm+0x324>
    a472:	e334      	b.n	aade <LoRaMacMibSetRequestConfirm+0x98e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a474:	2311      	movs	r3, #17
    a476:	e350      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a478:	2317      	movs	r3, #23
    a47a:	18fb      	adds	r3, r7, r3
    a47c:	2203      	movs	r2, #3
    a47e:	701a      	strb	r2, [r3, #0]
            }
            break;
    a480:	e32d      	b.n	aade <LoRaMacMibSetRequestConfirm+0x98e>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
    a482:	687b      	ldr	r3, [r7, #4]
    a484:	685b      	ldr	r3, [r3, #4]
    a486:	2b00      	cmp	r3, #0
    a488:	d00a      	beq.n	a4a0 <LoRaMacMibSetRequestConfirm+0x350>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	685b      	ldr	r3, [r3, #4]
    a48e:	0019      	movs	r1, r3
    a490:	2085      	movs	r0, #133	; 0x85
    a492:	4b13      	ldr	r3, [pc, #76]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a494:	4798      	blx	r3
    a496:	1e03      	subs	r3, r0, #0
    a498:	d100      	bne.n	a49c <LoRaMacMibSetRequestConfirm+0x34c>
    a49a:	e322      	b.n	aae2 <LoRaMacMibSetRequestConfirm+0x992>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a49c:	2311      	movs	r3, #17
    a49e:	e33c      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a4a0:	2317      	movs	r3, #23
    a4a2:	18fb      	adds	r3, r7, r3
    a4a4:	2203      	movs	r2, #3
    a4a6:	701a      	strb	r2, [r3, #0]
            }
            break;
    a4a8:	e31b      	b.n	aae2 <LoRaMacMibSetRequestConfirm+0x992>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	685b      	ldr	r3, [r3, #4]
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d00a      	beq.n	a4c8 <LoRaMacMibSetRequestConfirm+0x378>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	685b      	ldr	r3, [r3, #4]
    a4b6:	0019      	movs	r1, r3
    a4b8:	2086      	movs	r0, #134	; 0x86
    a4ba:	4b09      	ldr	r3, [pc, #36]	; (a4e0 <LoRaMacMibSetRequestConfirm+0x390>)
    a4bc:	4798      	blx	r3
    a4be:	1e03      	subs	r3, r0, #0
    a4c0:	d100      	bne.n	a4c4 <LoRaMacMibSetRequestConfirm+0x374>
    a4c2:	e310      	b.n	aae6 <LoRaMacMibSetRequestConfirm+0x996>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a4c4:	2311      	movs	r3, #17
    a4c6:	e328      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a4c8:	2317      	movs	r3, #23
    a4ca:	18fb      	adds	r3, r7, r3
    a4cc:	2203      	movs	r2, #3
    a4ce:	701a      	strb	r2, [r3, #0]
            }
            break;
    a4d0:	e309      	b.n	aae6 <LoRaMacMibSetRequestConfirm+0x996>
    a4d2:	46c0      	nop			; (mov r8, r8)
    a4d4:	20000b78 	.word	0x20000b78
    a4d8:	0001f1b8 	.word	0x0001f1b8
    a4dc:	000067a9 	.word	0x000067a9
    a4e0:	0000d48d 	.word	0x0000d48d
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
    a4e4:	687b      	ldr	r3, [r7, #4]
    a4e6:	685b      	ldr	r3, [r3, #4]
    a4e8:	2b00      	cmp	r3, #0
    a4ea:	d00a      	beq.n	a502 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	685b      	ldr	r3, [r3, #4]
    a4f0:	0019      	movs	r1, r3
    a4f2:	2087      	movs	r0, #135	; 0x87
    a4f4:	4bd7      	ldr	r3, [pc, #860]	; (a854 <LoRaMacMibSetRequestConfirm+0x704>)
    a4f6:	4798      	blx	r3
    a4f8:	1e03      	subs	r3, r0, #0
    a4fa:	d100      	bne.n	a4fe <LoRaMacMibSetRequestConfirm+0x3ae>
    a4fc:	e2f5      	b.n	aaea <LoRaMacMibSetRequestConfirm+0x99a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a4fe:	2311      	movs	r3, #17
    a500:	e30b      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a502:	2317      	movs	r3, #23
    a504:	18fb      	adds	r3, r7, r3
    a506:	2203      	movs	r2, #3
    a508:	701a      	strb	r2, [r3, #0]
            }
            break;
    a50a:	e2ee      	b.n	aaea <LoRaMacMibSetRequestConfirm+0x99a>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	685b      	ldr	r3, [r3, #4]
    a510:	2b00      	cmp	r3, #0
    a512:	d00a      	beq.n	a52a <LoRaMacMibSetRequestConfirm+0x3da>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	685b      	ldr	r3, [r3, #4]
    a518:	0019      	movs	r1, r3
    a51a:	2088      	movs	r0, #136	; 0x88
    a51c:	4bcd      	ldr	r3, [pc, #820]	; (a854 <LoRaMacMibSetRequestConfirm+0x704>)
    a51e:	4798      	blx	r3
    a520:	1e03      	subs	r3, r0, #0
    a522:	d100      	bne.n	a526 <LoRaMacMibSetRequestConfirm+0x3d6>
    a524:	e2e3      	b.n	aaee <LoRaMacMibSetRequestConfirm+0x99e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a526:	2311      	movs	r3, #17
    a528:	e2f7      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a52a:	2317      	movs	r3, #23
    a52c:	18fb      	adds	r3, r7, r3
    a52e:	2203      	movs	r2, #3
    a530:	701a      	strb	r2, [r3, #0]
            }
            break;
    a532:	e2dc      	b.n	aaee <LoRaMacMibSetRequestConfirm+0x99e>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
    a534:	687b      	ldr	r3, [r7, #4]
    a536:	685b      	ldr	r3, [r3, #4]
    a538:	2b00      	cmp	r3, #0
    a53a:	d00a      	beq.n	a552 <LoRaMacMibSetRequestConfirm+0x402>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	685b      	ldr	r3, [r3, #4]
    a540:	0019      	movs	r1, r3
    a542:	2089      	movs	r0, #137	; 0x89
    a544:	4bc3      	ldr	r3, [pc, #780]	; (a854 <LoRaMacMibSetRequestConfirm+0x704>)
    a546:	4798      	blx	r3
    a548:	1e03      	subs	r3, r0, #0
    a54a:	d100      	bne.n	a54e <LoRaMacMibSetRequestConfirm+0x3fe>
    a54c:	e2d1      	b.n	aaf2 <LoRaMacMibSetRequestConfirm+0x9a2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a54e:	2311      	movs	r3, #17
    a550:	e2e3      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a552:	2317      	movs	r3, #23
    a554:	18fb      	adds	r3, r7, r3
    a556:	2203      	movs	r2, #3
    a558:	701a      	strb	r2, [r3, #0]
            }
            break;
    a55a:	e2ca      	b.n	aaf2 <LoRaMacMibSetRequestConfirm+0x9a2>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
    a55c:	687b      	ldr	r3, [r7, #4]
    a55e:	685b      	ldr	r3, [r3, #4]
    a560:	2b00      	cmp	r3, #0
    a562:	d00a      	beq.n	a57a <LoRaMacMibSetRequestConfirm+0x42a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
    a564:	687b      	ldr	r3, [r7, #4]
    a566:	685b      	ldr	r3, [r3, #4]
    a568:	0019      	movs	r1, r3
    a56a:	208a      	movs	r0, #138	; 0x8a
    a56c:	4bb9      	ldr	r3, [pc, #740]	; (a854 <LoRaMacMibSetRequestConfirm+0x704>)
    a56e:	4798      	blx	r3
    a570:	1e03      	subs	r3, r0, #0
    a572:	d100      	bne.n	a576 <LoRaMacMibSetRequestConfirm+0x426>
    a574:	e2bf      	b.n	aaf6 <LoRaMacMibSetRequestConfirm+0x9a6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a576:	2311      	movs	r3, #17
    a578:	e2cf      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a57a:	2317      	movs	r3, #23
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	2203      	movs	r2, #3
    a580:	701a      	strb	r2, [r3, #0]
            }
            break;
    a582:	e2b8      	b.n	aaf6 <LoRaMacMibSetRequestConfirm+0x9a6>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	685b      	ldr	r3, [r3, #4]
    a588:	2b00      	cmp	r3, #0
    a58a:	d00a      	beq.n	a5a2 <LoRaMacMibSetRequestConfirm+0x452>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
    a58c:	687b      	ldr	r3, [r7, #4]
    a58e:	685b      	ldr	r3, [r3, #4]
    a590:	0019      	movs	r1, r3
    a592:	208b      	movs	r0, #139	; 0x8b
    a594:	4baf      	ldr	r3, [pc, #700]	; (a854 <LoRaMacMibSetRequestConfirm+0x704>)
    a596:	4798      	blx	r3
    a598:	1e03      	subs	r3, r0, #0
    a59a:	d100      	bne.n	a59e <LoRaMacMibSetRequestConfirm+0x44e>
    a59c:	e2ad      	b.n	aafa <LoRaMacMibSetRequestConfirm+0x9aa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    a59e:	2311      	movs	r3, #17
    a5a0:	e2bb      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a5a2:	2317      	movs	r3, #23
    a5a4:	18fb      	adds	r3, r7, r3
    a5a6:	2203      	movs	r2, #3
    a5a8:	701a      	strb	r2, [r3, #0]
            }
            break;
    a5aa:	e2a6      	b.n	aafa <LoRaMacMibSetRequestConfirm+0x9aa>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
    a5ac:	4aaa      	ldr	r2, [pc, #680]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a5ae:	239c      	movs	r3, #156	; 0x9c
    a5b0:	00db      	lsls	r3, r3, #3
    a5b2:	58d3      	ldr	r3, [r2, r3]
    a5b4:	687a      	ldr	r2, [r7, #4]
    a5b6:	7911      	ldrb	r1, [r2, #4]
    a5b8:	22c9      	movs	r2, #201	; 0xc9
    a5ba:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
    a5bc:	4ba7      	ldr	r3, [pc, #668]	; (a85c <LoRaMacMibSetRequestConfirm+0x70c>)
    a5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a5c0:	49a5      	ldr	r1, [pc, #660]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a5c2:	229c      	movs	r2, #156	; 0x9c
    a5c4:	00d2      	lsls	r2, r2, #3
    a5c6:	588a      	ldr	r2, [r1, r2]
    a5c8:	21c9      	movs	r1, #201	; 0xc9
    a5ca:	5c52      	ldrb	r2, [r2, r1]
    a5cc:	0010      	movs	r0, r2
    a5ce:	4798      	blx	r3
            break;
    a5d0:	e29c      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
    a5d2:	4aa1      	ldr	r2, [pc, #644]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a5d4:	239c      	movs	r3, #156	; 0x9c
    a5d6:	00db      	lsls	r3, r3, #3
    a5d8:	58d2      	ldr	r2, [r2, r3]
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	7919      	ldrb	r1, [r3, #4]
    a5de:	2316      	movs	r3, #22
    a5e0:	33ff      	adds	r3, #255	; 0xff
    a5e2:	54d1      	strb	r1, [r2, r3]
            break;
    a5e4:	e292      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	7a1b      	ldrb	r3, [r3, #8]
    a5ea:	b25a      	sxtb	r2, r3
    a5ec:	2308      	movs	r3, #8
    a5ee:	18fb      	adds	r3, r7, r3
    a5f0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    a5f2:	4a99      	ldr	r2, [pc, #612]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a5f4:	239c      	movs	r3, #156	; 0x9c
    a5f6:	00db      	lsls	r3, r3, #3
    a5f8:	58d2      	ldr	r2, [r2, r3]
    a5fa:	2302      	movs	r3, #2
    a5fc:	33ff      	adds	r3, #255	; 0xff
    a5fe:	5cd2      	ldrb	r2, [r2, r3]
    a600:	2308      	movs	r3, #8
    a602:	18fb      	adds	r3, r7, r3
    a604:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    a606:	4a94      	ldr	r2, [pc, #592]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a608:	239c      	movs	r3, #156	; 0x9c
    a60a:	00db      	lsls	r3, r3, #3
    a60c:	58d3      	ldr	r3, [r2, r3]
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	2208      	movs	r2, #8
    a612:	18b9      	adds	r1, r7, r2
    a614:	2206      	movs	r2, #6
    a616:	0018      	movs	r0, r3
    a618:	4b91      	ldr	r3, [pc, #580]	; (a860 <LoRaMacMibSetRequestConfirm+0x710>)
    a61a:	4798      	blx	r3
    a61c:	1e03      	subs	r3, r0, #0
    a61e:	d040      	beq.n	a6a2 <LoRaMacMibSetRequestConfirm+0x552>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
    a620:	4a8d      	ldr	r2, [pc, #564]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a622:	239c      	movs	r3, #156	; 0x9c
    a624:	00db      	lsls	r3, r3, #3
    a626:	58d3      	ldr	r3, [r2, r3]
    a628:	21f8      	movs	r1, #248	; 0xf8
    a62a:	687a      	ldr	r2, [r7, #4]
    a62c:	185b      	adds	r3, r3, r1
    a62e:	3204      	adds	r2, #4
    a630:	ca03      	ldmia	r2!, {r0, r1}
    a632:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
    a634:	4a88      	ldr	r2, [pc, #544]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a636:	239c      	movs	r3, #156	; 0x9c
    a638:	00db      	lsls	r3, r3, #3
    a63a:	58d3      	ldr	r3, [r2, r3]
    a63c:	22c8      	movs	r2, #200	; 0xc8
    a63e:	5c9b      	ldrb	r3, [r3, r2]
    a640:	2b02      	cmp	r3, #2
    a642:	d000      	beq.n	a646 <LoRaMacMibSetRequestConfirm+0x4f6>
    a644:	e25b      	b.n	aafe <LoRaMacMibSetRequestConfirm+0x9ae>
    a646:	4a84      	ldr	r2, [pc, #528]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a648:	239c      	movs	r3, #156	; 0x9c
    a64a:	00db      	lsls	r3, r3, #3
    a64c:	58d2      	ldr	r2, [r2, r3]
    a64e:	2388      	movs	r3, #136	; 0x88
    a650:	009b      	lsls	r3, r3, #2
    a652:	5cd3      	ldrb	r3, [r2, r3]
    a654:	2b00      	cmp	r3, #0
    a656:	d100      	bne.n	a65a <LoRaMacMibSetRequestConfirm+0x50a>
    a658:	e251      	b.n	aafe <LoRaMacMibSetRequestConfirm+0x9ae>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
    a65a:	4b80      	ldr	r3, [pc, #512]	; (a85c <LoRaMacMibSetRequestConfirm+0x70c>)
    a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a65e:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    a660:	4a7d      	ldr	r2, [pc, #500]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a662:	239c      	movs	r3, #156	; 0x9c
    a664:	00db      	lsls	r3, r3, #3
    a666:	58d3      	ldr	r3, [r2, r3]
    a668:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
    a66a:	4a7b      	ldr	r2, [pc, #492]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a66c:	239c      	movs	r3, #156	; 0x9c
    a66e:	00db      	lsls	r3, r3, #3
    a670:	58d3      	ldr	r3, [r2, r3]
    a672:	22fc      	movs	r2, #252	; 0xfc
    a674:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    a676:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
    a678:	4a77      	ldr	r2, [pc, #476]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a67a:	239c      	movs	r3, #156	; 0x9c
    a67c:	00db      	lsls	r3, r3, #3
    a67e:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    a680:	22dc      	movs	r2, #220	; 0xdc
    a682:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
    a684:	4a74      	ldr	r2, [pc, #464]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a686:	239c      	movs	r3, #156	; 0x9c
    a688:	00db      	lsls	r3, r3, #3
    a68a:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
    a68c:	22d8      	movs	r2, #216	; 0xd8
    a68e:	589a      	ldr	r2, [r3, r2]
    a690:	4b74      	ldr	r3, [pc, #464]	; (a864 <LoRaMacMibSetRequestConfirm+0x714>)
    a692:	9300      	str	r3, [sp, #0]
    a694:	0013      	movs	r3, r2
    a696:	0022      	movs	r2, r4
    a698:	4c73      	ldr	r4, [pc, #460]	; (a868 <LoRaMacMibSetRequestConfirm+0x718>)
    a69a:	47a0      	blx	r4
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
    a69c:	4b73      	ldr	r3, [pc, #460]	; (a86c <LoRaMacMibSetRequestConfirm+0x71c>)
    a69e:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a6a0:	e22d      	b.n	aafe <LoRaMacMibSetRequestConfirm+0x9ae>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a6a2:	2317      	movs	r3, #23
    a6a4:	18fb      	adds	r3, r7, r3
    a6a6:	2203      	movs	r2, #3
    a6a8:	701a      	strb	r2, [r3, #0]
            break;
    a6aa:	e228      	b.n	aafe <LoRaMacMibSetRequestConfirm+0x9ae>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	7a1b      	ldrb	r3, [r3, #8]
    a6b0:	b25a      	sxtb	r2, r3
    a6b2:	2308      	movs	r3, #8
    a6b4:	18fb      	adds	r3, r7, r3
    a6b6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
    a6b8:	4a67      	ldr	r2, [pc, #412]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a6ba:	239c      	movs	r3, #156	; 0x9c
    a6bc:	00db      	lsls	r3, r3, #3
    a6be:	58d2      	ldr	r2, [r2, r3]
    a6c0:	2302      	movs	r3, #2
    a6c2:	33ff      	adds	r3, #255	; 0xff
    a6c4:	5cd2      	ldrb	r2, [r2, r3]
    a6c6:	2308      	movs	r3, #8
    a6c8:	18fb      	adds	r3, r7, r3
    a6ca:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
    a6cc:	4a62      	ldr	r2, [pc, #392]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a6ce:	239c      	movs	r3, #156	; 0x9c
    a6d0:	00db      	lsls	r3, r3, #3
    a6d2:	58d3      	ldr	r3, [r2, r3]
    a6d4:	781b      	ldrb	r3, [r3, #0]
    a6d6:	2208      	movs	r2, #8
    a6d8:	18b9      	adds	r1, r7, r2
    a6da:	2206      	movs	r2, #6
    a6dc:	0018      	movs	r0, r3
    a6de:	4b60      	ldr	r3, [pc, #384]	; (a860 <LoRaMacMibSetRequestConfirm+0x710>)
    a6e0:	4798      	blx	r3
    a6e2:	1e03      	subs	r3, r0, #0
    a6e4:	d009      	beq.n	a6fa <LoRaMacMibSetRequestConfirm+0x5aa>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
    a6e6:	4a5c      	ldr	r2, [pc, #368]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a6e8:	239c      	movs	r3, #156	; 0x9c
    a6ea:	00db      	lsls	r3, r3, #3
    a6ec:	58d3      	ldr	r3, [r2, r3]
    a6ee:	687a      	ldr	r2, [r7, #4]
    a6f0:	3328      	adds	r3, #40	; 0x28
    a6f2:	3204      	adds	r2, #4
    a6f4:	ca03      	ldmia	r2!, {r0, r1}
    a6f6:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a6f8:	e208      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a6fa:	2317      	movs	r3, #23
    a6fc:	18fb      	adds	r3, r7, r3
    a6fe:	2203      	movs	r2, #3
    a700:	701a      	strb	r2, [r3, #0]
            break;
    a702:	e203      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	685a      	ldr	r2, [r3, #4]
    a708:	230c      	movs	r3, #12
    a70a:	18fb      	adds	r3, r7, r3
    a70c:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
    a70e:	230c      	movs	r3, #12
    a710:	18fb      	adds	r3, r7, r3
    a712:	2201      	movs	r2, #1
    a714:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    a716:	4a50      	ldr	r2, [pc, #320]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a718:	239c      	movs	r3, #156	; 0x9c
    a71a:	00db      	lsls	r3, r3, #3
    a71c:	58d3      	ldr	r3, [r2, r3]
    a71e:	781b      	ldrb	r3, [r3, #0]
    a720:	220c      	movs	r2, #12
    a722:	18ba      	adds	r2, r7, r2
    a724:	0011      	movs	r1, r2
    a726:	0018      	movs	r0, r3
    a728:	4b51      	ldr	r3, [pc, #324]	; (a870 <LoRaMacMibSetRequestConfirm+0x720>)
    a72a:	4798      	blx	r3
    a72c:	0003      	movs	r3, r0
    a72e:	001a      	movs	r2, r3
    a730:	2301      	movs	r3, #1
    a732:	4053      	eors	r3, r2
    a734:	b2db      	uxtb	r3, r3
    a736:	2b00      	cmp	r3, #0
    a738:	d100      	bne.n	a73c <LoRaMacMibSetRequestConfirm+0x5ec>
    a73a:	e1e2      	b.n	ab02 <LoRaMacMibSetRequestConfirm+0x9b2>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a73c:	2317      	movs	r3, #23
    a73e:	18fb      	adds	r3, r7, r3
    a740:	2203      	movs	r2, #3
    a742:	701a      	strb	r2, [r3, #0]
            }
            break;
    a744:	e1dd      	b.n	ab02 <LoRaMacMibSetRequestConfirm+0x9b2>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
    a746:	687b      	ldr	r3, [r7, #4]
    a748:	685a      	ldr	r2, [r3, #4]
    a74a:	230c      	movs	r3, #12
    a74c:	18fb      	adds	r3, r7, r3
    a74e:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
    a750:	230c      	movs	r3, #12
    a752:	18fb      	adds	r3, r7, r3
    a754:	2200      	movs	r2, #0
    a756:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
    a758:	4a3f      	ldr	r2, [pc, #252]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a75a:	239c      	movs	r3, #156	; 0x9c
    a75c:	00db      	lsls	r3, r3, #3
    a75e:	58d3      	ldr	r3, [r2, r3]
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	220c      	movs	r2, #12
    a764:	18ba      	adds	r2, r7, r2
    a766:	0011      	movs	r1, r2
    a768:	0018      	movs	r0, r3
    a76a:	4b41      	ldr	r3, [pc, #260]	; (a870 <LoRaMacMibSetRequestConfirm+0x720>)
    a76c:	4798      	blx	r3
    a76e:	0003      	movs	r3, r0
    a770:	001a      	movs	r2, r3
    a772:	2301      	movs	r3, #1
    a774:	4053      	eors	r3, r2
    a776:	b2db      	uxtb	r3, r3
    a778:	2b00      	cmp	r3, #0
    a77a:	d100      	bne.n	a77e <LoRaMacMibSetRequestConfirm+0x62e>
    a77c:	e1c3      	b.n	ab06 <LoRaMacMibSetRequestConfirm+0x9b6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a77e:	2317      	movs	r3, #23
    a780:	18fb      	adds	r3, r7, r3
    a782:	2203      	movs	r2, #3
    a784:	701a      	strb	r2, [r3, #0]
            }
            break;
    a786:	e1be      	b.n	ab06 <LoRaMacMibSetRequestConfirm+0x9b6>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	791b      	ldrb	r3, [r3, #4]
    a78c:	2b00      	cmp	r3, #0
    a78e:	d00c      	beq.n	a7aa <LoRaMacMibSetRequestConfirm+0x65a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
    a794:	2b0f      	cmp	r3, #15
    a796:	d808      	bhi.n	a7aa <LoRaMacMibSetRequestConfirm+0x65a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
    a798:	4a2f      	ldr	r2, [pc, #188]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a79a:	239c      	movs	r3, #156	; 0x9c
    a79c:	00db      	lsls	r3, r3, #3
    a79e:	58d3      	ldr	r3, [r2, r3]
    a7a0:	687a      	ldr	r2, [r7, #4]
    a7a2:	7911      	ldrb	r1, [r2, #4]
    a7a4:	22f4      	movs	r2, #244	; 0xf4
    a7a6:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a7a8:	e1b0      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a7aa:	2317      	movs	r3, #23
    a7ac:	18fb      	adds	r3, r7, r3
    a7ae:	2203      	movs	r2, #3
    a7b0:	701a      	strb	r2, [r3, #0]
            break;
    a7b2:	e1ab      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
    a7b4:	4a28      	ldr	r2, [pc, #160]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a7b6:	239c      	movs	r3, #156	; 0x9c
    a7b8:	00db      	lsls	r3, r3, #3
    a7ba:	58d2      	ldr	r2, [r2, r3]
    a7bc:	687b      	ldr	r3, [r7, #4]
    a7be:	685b      	ldr	r3, [r3, #4]
    a7c0:	21e0      	movs	r1, #224	; 0xe0
    a7c2:	5053      	str	r3, [r2, r1]
            break;
    a7c4:	e1a2      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
    a7c6:	4a24      	ldr	r2, [pc, #144]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a7c8:	239c      	movs	r3, #156	; 0x9c
    a7ca:	00db      	lsls	r3, r3, #3
    a7cc:	58d2      	ldr	r2, [r2, r3]
    a7ce:	687b      	ldr	r3, [r7, #4]
    a7d0:	685b      	ldr	r3, [r3, #4]
    a7d2:	21e4      	movs	r1, #228	; 0xe4
    a7d4:	5053      	str	r3, [r2, r1]
            break;
    a7d6:	e199      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
    a7d8:	4a1f      	ldr	r2, [pc, #124]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a7da:	239c      	movs	r3, #156	; 0x9c
    a7dc:	00db      	lsls	r3, r3, #3
    a7de:	58d2      	ldr	r2, [r2, r3]
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	685b      	ldr	r3, [r3, #4]
    a7e4:	21e8      	movs	r1, #232	; 0xe8
    a7e6:	5053      	str	r3, [r2, r1]
            break;
    a7e8:	e190      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
    a7ea:	4a1b      	ldr	r2, [pc, #108]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a7ec:	239c      	movs	r3, #156	; 0x9c
    a7ee:	00db      	lsls	r3, r3, #3
    a7f0:	58d2      	ldr	r2, [r2, r3]
    a7f2:	687b      	ldr	r3, [r7, #4]
    a7f4:	685b      	ldr	r3, [r3, #4]
    a7f6:	21ec      	movs	r1, #236	; 0xec
    a7f8:	5053      	str	r3, [r2, r1]
            break;
    a7fa:	e187      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
    a7fc:	4a16      	ldr	r2, [pc, #88]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a7fe:	239c      	movs	r3, #156	; 0x9c
    a800:	00db      	lsls	r3, r3, #3
    a802:	58d2      	ldr	r2, [r2, r3]
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	685b      	ldr	r3, [r3, #4]
    a808:	21f0      	movs	r1, #240	; 0xf0
    a80a:	5053      	str	r3, [r2, r1]
            break;
    a80c:	e17e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
    a80e:	687b      	ldr	r3, [r7, #4]
    a810:	2204      	movs	r2, #4
    a812:	569a      	ldrsb	r2, [r3, r2]
    a814:	2308      	movs	r3, #8
    a816:	18fb      	adds	r3, r7, r3
    a818:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
    a81a:	4a0f      	ldr	r2, [pc, #60]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a81c:	239c      	movs	r3, #156	; 0x9c
    a81e:	00db      	lsls	r3, r3, #3
    a820:	58d3      	ldr	r3, [r2, r3]
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	2208      	movs	r2, #8
    a826:	18b9      	adds	r1, r7, r2
    a828:	2205      	movs	r2, #5
    a82a:	0018      	movs	r0, r3
    a82c:	4b0c      	ldr	r3, [pc, #48]	; (a860 <LoRaMacMibSetRequestConfirm+0x710>)
    a82e:	4798      	blx	r3
    a830:	1e03      	subs	r3, r0, #0
    a832:	d009      	beq.n	a848 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
    a834:	4a08      	ldr	r2, [pc, #32]	; (a858 <LoRaMacMibSetRequestConfirm+0x708>)
    a836:	239c      	movs	r3, #156	; 0x9c
    a838:	00db      	lsls	r3, r3, #3
    a83a:	58d3      	ldr	r3, [r2, r3]
    a83c:	2208      	movs	r2, #8
    a83e:	18ba      	adds	r2, r7, r2
    a840:	7812      	ldrb	r2, [r2, #0]
    a842:	b252      	sxtb	r2, r2
    a844:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a846:	e161      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a848:	2317      	movs	r3, #23
    a84a:	18fb      	adds	r3, r7, r3
    a84c:	2203      	movs	r2, #3
    a84e:	701a      	strb	r2, [r3, #0]
            break;
    a850:	e15c      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
    a852:	46c0      	nop			; (mov r8, r8)
    a854:	0000d48d 	.word	0x0000d48d
    a858:	20000b78 	.word	0x20000b78
    a85c:	0001efe8 	.word	0x0001efe8
    a860:	0000f0d1 	.word	0x0000f0d1
    a864:	20000f5c 	.word	0x20000f5c
    a868:	0000f171 	.word	0x0000f171
    a86c:	000087d5 	.word	0x000087d5
    a870:	0000f141 	.word	0x0000f141
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	2204      	movs	r2, #4
    a878:	569a      	ldrsb	r2, [r3, r2]
    a87a:	2308      	movs	r3, #8
    a87c:	18fb      	adds	r3, r7, r3
    a87e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    a880:	4aa8      	ldr	r2, [pc, #672]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a882:	239c      	movs	r3, #156	; 0x9c
    a884:	00db      	lsls	r3, r3, #3
    a886:	58d2      	ldr	r2, [r2, r3]
    a888:	2380      	movs	r3, #128	; 0x80
    a88a:	005b      	lsls	r3, r3, #1
    a88c:	5cd2      	ldrb	r2, [r2, r3]
    a88e:	2308      	movs	r3, #8
    a890:	18fb      	adds	r3, r7, r3
    a892:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    a894:	4aa3      	ldr	r2, [pc, #652]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a896:	239c      	movs	r3, #156	; 0x9c
    a898:	00db      	lsls	r3, r3, #3
    a89a:	58d3      	ldr	r3, [r2, r3]
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	2208      	movs	r2, #8
    a8a0:	18b9      	adds	r1, r7, r2
    a8a2:	2204      	movs	r2, #4
    a8a4:	0018      	movs	r0, r3
    a8a6:	4ba0      	ldr	r3, [pc, #640]	; (ab28 <LoRaMacMibSetRequestConfirm+0x9d8>)
    a8a8:	4798      	blx	r3
    a8aa:	1e03      	subs	r3, r0, #0
    a8ac:	d00a      	beq.n	a8c4 <LoRaMacMibSetRequestConfirm+0x774>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    a8ae:	4a9d      	ldr	r2, [pc, #628]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a8b0:	239c      	movs	r3, #156	; 0x9c
    a8b2:	00db      	lsls	r3, r3, #3
    a8b4:	58d3      	ldr	r3, [r2, r3]
    a8b6:	2208      	movs	r2, #8
    a8b8:	18ba      	adds	r2, r7, r2
    a8ba:	2100      	movs	r1, #0
    a8bc:	5651      	ldrsb	r1, [r2, r1]
    a8be:	22d5      	movs	r2, #213	; 0xd5
    a8c0:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a8c2:	e123      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a8c4:	2317      	movs	r3, #23
    a8c6:	18fb      	adds	r3, r7, r3
    a8c8:	2203      	movs	r2, #3
    a8ca:	701a      	strb	r2, [r3, #0]
            break;
    a8cc:	e11e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
    a8ce:	687b      	ldr	r3, [r7, #4]
    a8d0:	2204      	movs	r2, #4
    a8d2:	569a      	ldrsb	r2, [r3, r2]
    a8d4:	2308      	movs	r3, #8
    a8d6:	18fb      	adds	r3, r7, r3
    a8d8:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
    a8da:	4a92      	ldr	r2, [pc, #584]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a8dc:	239c      	movs	r3, #156	; 0x9c
    a8de:	00db      	lsls	r3, r3, #3
    a8e0:	58d3      	ldr	r3, [r2, r3]
    a8e2:	781b      	ldrb	r3, [r3, #0]
    a8e4:	2208      	movs	r2, #8
    a8e6:	18b9      	adds	r1, r7, r2
    a8e8:	2209      	movs	r2, #9
    a8ea:	0018      	movs	r0, r3
    a8ec:	4b8e      	ldr	r3, [pc, #568]	; (ab28 <LoRaMacMibSetRequestConfirm+0x9d8>)
    a8ee:	4798      	blx	r3
    a8f0:	1e03      	subs	r3, r0, #0
    a8f2:	d009      	beq.n	a908 <LoRaMacMibSetRequestConfirm+0x7b8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
    a8f4:	4a8b      	ldr	r2, [pc, #556]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a8f6:	239c      	movs	r3, #156	; 0x9c
    a8f8:	00db      	lsls	r3, r3, #3
    a8fa:	58d3      	ldr	r3, [r2, r3]
    a8fc:	2208      	movs	r2, #8
    a8fe:	18ba      	adds	r2, r7, r2
    a900:	7812      	ldrb	r2, [r2, #0]
    a902:	b252      	sxtb	r2, r2
    a904:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a906:	e101      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a908:	2317      	movs	r3, #23
    a90a:	18fb      	adds	r3, r7, r3
    a90c:	2203      	movs	r2, #3
    a90e:	701a      	strb	r2, [r3, #0]
            break;
    a910:	e0fc      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	2204      	movs	r2, #4
    a916:	569a      	ldrsb	r2, [r3, r2]
    a918:	2308      	movs	r3, #8
    a91a:	18fb      	adds	r3, r7, r3
    a91c:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
    a91e:	4a81      	ldr	r2, [pc, #516]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a920:	239c      	movs	r3, #156	; 0x9c
    a922:	00db      	lsls	r3, r3, #3
    a924:	58d3      	ldr	r3, [r2, r3]
    a926:	781b      	ldrb	r3, [r3, #0]
    a928:	2208      	movs	r2, #8
    a92a:	18b9      	adds	r1, r7, r2
    a92c:	2208      	movs	r2, #8
    a92e:	0018      	movs	r0, r3
    a930:	4b7d      	ldr	r3, [pc, #500]	; (ab28 <LoRaMacMibSetRequestConfirm+0x9d8>)
    a932:	4798      	blx	r3
    a934:	1e03      	subs	r3, r0, #0
    a936:	d00a      	beq.n	a94e <LoRaMacMibSetRequestConfirm+0x7fe>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
    a938:	4a7a      	ldr	r2, [pc, #488]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a93a:	239c      	movs	r3, #156	; 0x9c
    a93c:	00db      	lsls	r3, r3, #3
    a93e:	58d3      	ldr	r3, [r2, r3]
    a940:	2208      	movs	r2, #8
    a942:	18ba      	adds	r2, r7, r2
    a944:	2100      	movs	r1, #0
    a946:	5651      	ldrsb	r1, [r2, r1]
    a948:	22d4      	movs	r2, #212	; 0xd4
    a94a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a94c:	e0de      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a94e:	2317      	movs	r3, #23
    a950:	18fb      	adds	r3, r7, r3
    a952:	2203      	movs	r2, #3
    a954:	701a      	strb	r2, [r3, #0]
            break;
    a956:	e0d9      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
    a958:	4a72      	ldr	r2, [pc, #456]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a95a:	239c      	movs	r3, #156	; 0x9c
    a95c:	00db      	lsls	r3, r3, #3
    a95e:	58d1      	ldr	r1, [r2, r3]
    a960:	4a70      	ldr	r2, [pc, #448]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a962:	239c      	movs	r3, #156	; 0x9c
    a964:	00db      	lsls	r3, r3, #3
    a966:	58d3      	ldr	r3, [r2, r3]
    a968:	687a      	ldr	r2, [r7, #4]
    a96a:	6852      	ldr	r2, [r2, #4]
    a96c:	609a      	str	r2, [r3, #8]
    a96e:	689b      	ldr	r3, [r3, #8]
    a970:	22d8      	movs	r2, #216	; 0xd8
    a972:	508b      	str	r3, [r1, r2]
            break;
    a974:	e0ca      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
    a976:	4a6b      	ldr	r2, [pc, #428]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a978:	239c      	movs	r3, #156	; 0x9c
    a97a:	00db      	lsls	r3, r3, #3
    a97c:	58d2      	ldr	r2, [r2, r3]
    a97e:	4969      	ldr	r1, [pc, #420]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a980:	239c      	movs	r3, #156	; 0x9c
    a982:	00db      	lsls	r3, r3, #3
    a984:	58cb      	ldr	r3, [r1, r3]
    a986:	6879      	ldr	r1, [r7, #4]
    a988:	7909      	ldrb	r1, [r1, #4]
    a98a:	7319      	strb	r1, [r3, #12]
    a98c:	7b19      	ldrb	r1, [r3, #12]
    a98e:	23dc      	movs	r3, #220	; 0xdc
    a990:	54d1      	strb	r1, [r2, r3]
            break;
    a992:	e0bb      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
    a994:	4a63      	ldr	r2, [pc, #396]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a996:	239c      	movs	r3, #156	; 0x9c
    a998:	00db      	lsls	r3, r3, #3
    a99a:	58d2      	ldr	r2, [r2, r3]
    a99c:	687b      	ldr	r3, [r7, #4]
    a99e:	6859      	ldr	r1, [r3, #4]
    a9a0:	2384      	movs	r3, #132	; 0x84
    a9a2:	005b      	lsls	r3, r3, #1
    a9a4:	50d1      	str	r1, [r2, r3]
            break;
    a9a6:	e0b1      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
    a9a8:	4a5e      	ldr	r2, [pc, #376]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a9aa:	239c      	movs	r3, #156	; 0x9c
    a9ac:	00db      	lsls	r3, r3, #3
    a9ae:	58d3      	ldr	r3, [r2, r3]
    a9b0:	687a      	ldr	r2, [r7, #4]
    a9b2:	6852      	ldr	r2, [r2, #4]
    a9b4:	639a      	str	r2, [r3, #56]	; 0x38
            break;
    a9b6:	e0a9      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
    a9b8:	687b      	ldr	r3, [r7, #4]
    a9ba:	685b      	ldr	r3, [r3, #4]
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d009      	beq.n	a9d4 <LoRaMacMibSetRequestConfirm+0x884>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
    a9c0:	687b      	ldr	r3, [r7, #4]
    a9c2:	685b      	ldr	r3, [r3, #4]
    a9c4:	2217      	movs	r2, #23
    a9c6:	18bc      	adds	r4, r7, r2
    a9c8:	0018      	movs	r0, r3
    a9ca:	4b58      	ldr	r3, [pc, #352]	; (ab2c <LoRaMacMibSetRequestConfirm+0x9dc>)
    a9cc:	4798      	blx	r3
    a9ce:	0003      	movs	r3, r0
    a9d0:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    a9d2:	e09b      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    a9d4:	2317      	movs	r3, #23
    a9d6:	18fb      	adds	r3, r7, r3
    a9d8:	2203      	movs	r2, #3
    a9da:	701a      	strb	r2, [r3, #0]
            break;
    a9dc:	e096      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
    a9de:	687b      	ldr	r3, [r7, #4]
    a9e0:	799b      	ldrb	r3, [r3, #6]
    a9e2:	2b01      	cmp	r3, #1
    a9e4:	d812      	bhi.n	aa0c <LoRaMacMibSetRequestConfirm+0x8bc>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
    a9e6:	4a4f      	ldr	r2, [pc, #316]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    a9e8:	239c      	movs	r3, #156	; 0x9c
    a9ea:	00db      	lsls	r3, r3, #3
    a9ec:	58d1      	ldr	r1, [r2, r3]
    a9ee:	2387      	movs	r3, #135	; 0x87
    a9f0:	009a      	lsls	r2, r3, #2
    a9f2:	687b      	ldr	r3, [r7, #4]
    a9f4:	685b      	ldr	r3, [r3, #4]
    a9f6:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
    a9f8:	687b      	ldr	r3, [r7, #4]
    a9fa:	685b      	ldr	r3, [r3, #4]
    a9fc:	0018      	movs	r0, r3
    a9fe:	4b4c      	ldr	r3, [pc, #304]	; (ab30 <LoRaMacMibSetRequestConfirm+0x9e0>)
    aa00:	4798      	blx	r3
    aa02:	1e03      	subs	r3, r0, #0
    aa04:	d100      	bne.n	aa08 <LoRaMacMibSetRequestConfirm+0x8b8>
    aa06:	e080      	b.n	ab0a <LoRaMacMibSetRequestConfirm+0x9ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
    aa08:	2311      	movs	r3, #17
    aa0a:	e086      	b.n	ab1a <LoRaMacMibSetRequestConfirm+0x9ca>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    aa0c:	2317      	movs	r3, #23
    aa0e:	18fb      	adds	r3, r7, r3
    aa10:	2203      	movs	r2, #3
    aa12:	701a      	strb	r2, [r3, #0]
            }
            break;
    aa14:	e079      	b.n	ab0a <LoRaMacMibSetRequestConfirm+0x9ba>
        }
        case MIB_REJOIN_0_CYCLE:
        {
            if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
    aa16:	4a43      	ldr	r2, [pc, #268]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    aa18:	239c      	movs	r3, #156	; 0x9c
    aa1a:	00db      	lsls	r3, r3, #3
    aa1c:	58d2      	ldr	r2, [r2, r3]
    aa1e:	238b      	movs	r3, #139	; 0x8b
    aa20:	009b      	lsls	r3, r3, #2
    aa22:	58d3      	ldr	r3, [r2, r3]
    aa24:	4a43      	ldr	r2, [pc, #268]	; (ab34 <LoRaMacMibSetRequestConfirm+0x9e4>)
    aa26:	0011      	movs	r1, r2
    aa28:	0018      	movs	r0, r3
    aa2a:	4b43      	ldr	r3, [pc, #268]	; (ab38 <LoRaMacMibSetRequestConfirm+0x9e8>)
    aa2c:	4798      	blx	r3
    aa2e:	1e03      	subs	r3, r0, #0
    aa30:	d00c      	beq.n	aa4c <LoRaMacMibSetRequestConfirm+0x8fc>
            {
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    aa32:	4b3c      	ldr	r3, [pc, #240]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    aa34:	4a41      	ldr	r2, [pc, #260]	; (ab3c <LoRaMacMibSetRequestConfirm+0x9ec>)
    aa36:	589a      	ldr	r2, [r3, r2]
    aa38:	4b41      	ldr	r3, [pc, #260]	; (ab40 <LoRaMacMibSetRequestConfirm+0x9f0>)
    aa3a:	0011      	movs	r1, r2
    aa3c:	0018      	movs	r0, r3
    aa3e:	4b41      	ldr	r3, [pc, #260]	; (ab44 <LoRaMacMibSetRequestConfirm+0x9f4>)
    aa40:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin0CycleTimer );
    aa42:	4b3f      	ldr	r3, [pc, #252]	; (ab40 <LoRaMacMibSetRequestConfirm+0x9f0>)
    aa44:	0018      	movs	r0, r3
    aa46:	4b40      	ldr	r3, [pc, #256]	; (ab48 <LoRaMacMibSetRequestConfirm+0x9f8>)
    aa48:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    aa4a:	e05f      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    aa4c:	2317      	movs	r3, #23
    aa4e:	18fb      	adds	r3, r7, r3
    aa50:	2203      	movs	r2, #3
    aa52:	701a      	strb	r2, [r3, #0]
            break;
    aa54:	e05a      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_REJOIN_1_CYCLE:
        {
           if( ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
    aa56:	4a33      	ldr	r2, [pc, #204]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    aa58:	239c      	movs	r3, #156	; 0x9c
    aa5a:	00db      	lsls	r3, r3, #3
    aa5c:	58d2      	ldr	r2, [r2, r3]
    aa5e:	238c      	movs	r3, #140	; 0x8c
    aa60:	009b      	lsls	r3, r3, #2
    aa62:	58d3      	ldr	r3, [r2, r3]
    aa64:	4a39      	ldr	r2, [pc, #228]	; (ab4c <LoRaMacMibSetRequestConfirm+0x9fc>)
    aa66:	0011      	movs	r1, r2
    aa68:	0018      	movs	r0, r3
    aa6a:	4b33      	ldr	r3, [pc, #204]	; (ab38 <LoRaMacMibSetRequestConfirm+0x9e8>)
    aa6c:	4798      	blx	r3
    aa6e:	1e03      	subs	r3, r0, #0
    aa70:	d00d      	beq.n	aa8e <LoRaMacMibSetRequestConfirm+0x93e>
            {
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    aa72:	4a2c      	ldr	r2, [pc, #176]	; (ab24 <LoRaMacMibSetRequestConfirm+0x9d4>)
    aa74:	239b      	movs	r3, #155	; 0x9b
    aa76:	00db      	lsls	r3, r3, #3
    aa78:	58d2      	ldr	r2, [r2, r3]
    aa7a:	4b35      	ldr	r3, [pc, #212]	; (ab50 <LoRaMacMibSetRequestConfirm+0xa00>)
    aa7c:	0011      	movs	r1, r2
    aa7e:	0018      	movs	r0, r3
    aa80:	4b30      	ldr	r3, [pc, #192]	; (ab44 <LoRaMacMibSetRequestConfirm+0x9f4>)
    aa82:	4798      	blx	r3
                TimerStart( &MacCtx.Rejoin1CycleTimer );
    aa84:	4b32      	ldr	r3, [pc, #200]	; (ab50 <LoRaMacMibSetRequestConfirm+0xa00>)
    aa86:	0018      	movs	r0, r3
    aa88:	4b2f      	ldr	r3, [pc, #188]	; (ab48 <LoRaMacMibSetRequestConfirm+0x9f8>)
    aa8a:	4798      	blx	r3
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
    aa8c:	e03e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
    aa8e:	2317      	movs	r3, #23
    aa90:	18fb      	adds	r3, r7, r3
    aa92:	2203      	movs	r2, #3
    aa94:	701a      	strb	r2, [r3, #0]
            break;
    aa96:	e039      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
    aa98:	2317      	movs	r3, #23
    aa9a:	18fc      	adds	r4, r7, r3
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	0018      	movs	r0, r3
    aaa0:	4b2c      	ldr	r3, [pc, #176]	; (ab54 <LoRaMacMibSetRequestConfirm+0xa04>)
    aaa2:	4798      	blx	r3
    aaa4:	0003      	movs	r3, r0
    aaa6:	7023      	strb	r3, [r4, #0]
            break;
    aaa8:	e030      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaaa:	46c0      	nop			; (mov r8, r8)
    aaac:	e02e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaae:	46c0      	nop			; (mov r8, r8)
    aab0:	e02c      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aab2:	46c0      	nop			; (mov r8, r8)
    aab4:	e02a      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	e028      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaba:	46c0      	nop			; (mov r8, r8)
    aabc:	e026      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aabe:	46c0      	nop			; (mov r8, r8)
    aac0:	e024      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aac2:	46c0      	nop			; (mov r8, r8)
    aac4:	e022      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aac6:	46c0      	nop			; (mov r8, r8)
    aac8:	e020      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaca:	46c0      	nop			; (mov r8, r8)
    aacc:	e01e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	e01c      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aad2:	46c0      	nop			; (mov r8, r8)
    aad4:	e01a      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	e018      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aada:	46c0      	nop			; (mov r8, r8)
    aadc:	e016      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aade:	46c0      	nop			; (mov r8, r8)
    aae0:	e014      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aae2:	46c0      	nop			; (mov r8, r8)
    aae4:	e012      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aae6:	46c0      	nop			; (mov r8, r8)
    aae8:	e010      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaea:	46c0      	nop			; (mov r8, r8)
    aaec:	e00e      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaee:	46c0      	nop			; (mov r8, r8)
    aaf0:	e00c      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaf2:	46c0      	nop			; (mov r8, r8)
    aaf4:	e00a      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aaf6:	46c0      	nop			; (mov r8, r8)
    aaf8:	e008      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aafa:	46c0      	nop			; (mov r8, r8)
    aafc:	e006      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    aafe:	46c0      	nop			; (mov r8, r8)
    ab00:	e004      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    ab02:	46c0      	nop			; (mov r8, r8)
    ab04:	e002      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    ab06:	46c0      	nop			; (mov r8, r8)
    ab08:	e000      	b.n	ab0c <LoRaMacMibSetRequestConfirm+0x9bc>
            break;
    ab0a:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
    ab0c:	4b12      	ldr	r3, [pc, #72]	; (ab58 <LoRaMacMibSetRequestConfirm+0xa08>)
    ab0e:	4798      	blx	r3
    EventMacNvmCtxChanged( );
    ab10:	4b12      	ldr	r3, [pc, #72]	; (ab5c <LoRaMacMibSetRequestConfirm+0xa0c>)
    ab12:	4798      	blx	r3
    return status;
    ab14:	2317      	movs	r3, #23
    ab16:	18fb      	adds	r3, r7, r3
    ab18:	781b      	ldrb	r3, [r3, #0]
}
    ab1a:	0018      	movs	r0, r3
    ab1c:	46bd      	mov	sp, r7
    ab1e:	b007      	add	sp, #28
    ab20:	bd90      	pop	{r4, r7, pc}
    ab22:	46c0      	nop			; (mov r8, r8)
    ab24:	20000b78 	.word	0x20000b78
    ab28:	0000f0d1 	.word	0x0000f0d1
    ab2c:	00008e55 	.word	0x00008e55
    ab30:	0000d425 	.word	0x0000d425
    ab34:	2000104c 	.word	0x2000104c
    ab38:	0000b169 	.word	0x0000b169
    ab3c:	000004d4 	.word	0x000004d4
    ab40:	20000fec 	.word	0x20000fec
    ab44:	00016389 	.word	0x00016389
    ab48:	00015fc1 	.word	0x00015fc1
    ab4c:	20001050 	.word	0x20001050
    ab50:	20001004 	.word	0x20001004
    ab54:	0000b93b 	.word	0x0000b93b
    ab58:	00009319 	.word	0x00009319
    ab5c:	00009305 	.word	0x00009305

0000ab60 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    ab60:	b590      	push	{r4, r7, lr}
    ab62:	b087      	sub	sp, #28
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    ab68:	2317      	movs	r3, #23
    ab6a:	18fb      	adds	r3, r7, r3
    ab6c:	2202      	movs	r2, #2
    ab6e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
    ab70:	230c      	movs	r3, #12
    ab72:	18fb      	adds	r3, r7, r3
    ab74:	2200      	movs	r2, #0
    ab76:	701a      	strb	r2, [r3, #0]
    ab78:	230c      	movs	r3, #12
    ab7a:	18fb      	adds	r3, r7, r3
    ab7c:	2200      	movs	r2, #0
    ab7e:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	2b00      	cmp	r3, #0
    ab84:	d101      	bne.n	ab8a <LoRaMacMlmeRequest+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    ab86:	2303      	movs	r3, #3
    ab88:	e179      	b.n	ae7e <LoRaMacMlmeRequest+0x31e>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
    ab8a:	4bbf      	ldr	r3, [pc, #764]	; (ae88 <LoRaMacMlmeRequest+0x328>)
    ab8c:	4798      	blx	r3
    ab8e:	0003      	movs	r3, r0
    ab90:	2b01      	cmp	r3, #1
    ab92:	d101      	bne.n	ab98 <LoRaMacMlmeRequest+0x38>
    {
        return LORAMAC_STATUS_BUSY;
    ab94:	2301      	movs	r3, #1
    ab96:	e172      	b.n	ae7e <LoRaMacMlmeRequest+0x31e>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
    ab98:	4bbc      	ldr	r3, [pc, #752]	; (ae8c <LoRaMacMlmeRequest+0x32c>)
    ab9a:	4798      	blx	r3
    ab9c:	1e03      	subs	r3, r0, #0
    ab9e:	d001      	beq.n	aba4 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
    aba0:	2301      	movs	r3, #1
    aba2:	e16c      	b.n	ae7e <LoRaMacMlmeRequest+0x31e>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
    aba4:	4bba      	ldr	r3, [pc, #744]	; (ae90 <LoRaMacMlmeRequest+0x330>)
    aba6:	4798      	blx	r3
    aba8:	1e03      	subs	r3, r0, #0
    abaa:	d105      	bne.n	abb8 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
    abac:	4bb9      	ldr	r3, [pc, #740]	; (ae94 <LoRaMacMlmeRequest+0x334>)
    abae:	2214      	movs	r2, #20
    abb0:	2100      	movs	r1, #0
    abb2:	0018      	movs	r0, r3
    abb4:	4bb8      	ldr	r3, [pc, #736]	; (ae98 <LoRaMacMlmeRequest+0x338>)
    abb6:	4798      	blx	r3
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    abb8:	4bb8      	ldr	r3, [pc, #736]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    abba:	4ab9      	ldr	r2, [pc, #740]	; (aea0 <LoRaMacMlmeRequest+0x340>)
    abbc:	2101      	movs	r1, #1
    abbe:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
    abc0:	4bb6      	ldr	r3, [pc, #728]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    abc2:	4ab8      	ldr	r2, [pc, #736]	; (aea4 <LoRaMacMlmeRequest+0x344>)
    abc4:	5c99      	ldrb	r1, [r3, r2]
    abc6:	2004      	movs	r0, #4
    abc8:	4301      	orrs	r1, r0
    abca:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	781a      	ldrb	r2, [r3, #0]
    abd0:	2310      	movs	r3, #16
    abd2:	18fb      	adds	r3, r7, r3
    abd4:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    abd6:	2310      	movs	r3, #16
    abd8:	18fb      	adds	r3, r7, r3
    abda:	2201      	movs	r2, #1
    abdc:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
    abde:	2310      	movs	r3, #16
    abe0:	18fb      	adds	r3, r7, r3
    abe2:	2200      	movs	r2, #0
    abe4:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	2b0d      	cmp	r3, #13
    abec:	d900      	bls.n	abf0 <LoRaMacMlmeRequest+0x90>
    abee:	e11a      	b.n	ae26 <LoRaMacMlmeRequest+0x2c6>
    abf0:	009a      	lsls	r2, r3, #2
    abf2:	4bad      	ldr	r3, [pc, #692]	; (aea8 <LoRaMacMlmeRequest+0x348>)
    abf4:	18d3      	adds	r3, r2, r3
    abf6:	681b      	ldr	r3, [r3, #0]
    abf8:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
    abfa:	4aa8      	ldr	r2, [pc, #672]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    abfc:	23d6      	movs	r3, #214	; 0xd6
    abfe:	009b      	lsls	r3, r3, #2
    ac00:	58d3      	ldr	r3, [r2, r3]
    ac02:	2220      	movs	r2, #32
    ac04:	4013      	ands	r3, r2
    ac06:	d001      	beq.n	ac0c <LoRaMacMlmeRequest+0xac>
            {
                return LORAMAC_STATUS_BUSY;
    ac08:	2301      	movs	r3, #1
    ac0a:	e138      	b.n	ae7e <LoRaMacMlmeRequest+0x31e>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	685b      	ldr	r3, [r3, #4]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d003      	beq.n	ac1c <LoRaMacMlmeRequest+0xbc>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d101      	bne.n	ac20 <LoRaMacMlmeRequest+0xc0>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
    ac1c:	2303      	movs	r3, #3
    ac1e:	e12e      	b.n	ae7e <LoRaMacMlmeRequest+0x31e>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
    ac20:	4a9e      	ldr	r2, [pc, #632]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac22:	239c      	movs	r3, #156	; 0x9c
    ac24:	00db      	lsls	r3, r3, #3
    ac26:	58d2      	ldr	r2, [r2, r3]
    ac28:	2388      	movs	r3, #136	; 0x88
    ac2a:	009b      	lsls	r3, r3, #2
    ac2c:	2100      	movs	r1, #0
    ac2e:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
    ac30:	4b9e      	ldr	r3, [pc, #632]	; (aeac <LoRaMacMlmeRequest+0x34c>)
    ac32:	4798      	blx	r3

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
    ac34:	687b      	ldr	r3, [r7, #4]
    ac36:	685a      	ldr	r2, [r3, #4]
    ac38:	4b98      	ldr	r3, [pc, #608]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac3a:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	689a      	ldr	r2, [r3, #8]
    ac40:	4b96      	ldr	r3, [pc, #600]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac42:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
    ac44:	4a95      	ldr	r2, [pc, #596]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac46:	239c      	movs	r3, #156	; 0x9c
    ac48:	00db      	lsls	r3, r3, #3
    ac4a:	58d4      	ldr	r4, [r2, r3]
    ac4c:	4a93      	ldr	r2, [pc, #588]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac4e:	239c      	movs	r3, #156	; 0x9c
    ac50:	00db      	lsls	r3, r3, #3
    ac52:	58d3      	ldr	r3, [r2, r3]
    ac54:	7818      	ldrb	r0, [r3, #0]
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	7b1b      	ldrb	r3, [r3, #12]
    ac5a:	b25b      	sxtb	r3, r3
    ac5c:	2200      	movs	r2, #0
    ac5e:	0019      	movs	r1, r3
    ac60:	4b93      	ldr	r3, [pc, #588]	; (aeb0 <LoRaMacMlmeRequest+0x350>)
    ac62:	4798      	blx	r3
    ac64:	0003      	movs	r3, r0
    ac66:	001a      	movs	r2, r3
    ac68:	23d5      	movs	r3, #213	; 0xd5
    ac6a:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
    ac6c:	2310      	movs	r3, #16
    ac6e:	18fb      	adds	r3, r7, r3
    ac70:	2207      	movs	r2, #7
    ac72:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
    ac74:	2317      	movs	r3, #23
    ac76:	18fc      	adds	r4, r7, r3
    ac78:	20ff      	movs	r0, #255	; 0xff
    ac7a:	4b8e      	ldr	r3, [pc, #568]	; (aeb4 <LoRaMacMlmeRequest+0x354>)
    ac7c:	4798      	blx	r3
    ac7e:	0003      	movs	r3, r0
    ac80:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
    ac82:	2317      	movs	r3, #23
    ac84:	18fb      	adds	r3, r7, r3
    ac86:	781b      	ldrb	r3, [r3, #0]
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d100      	bne.n	ac8e <LoRaMacMlmeRequest+0x12e>
    ac8c:	e0cd      	b.n	ae2a <LoRaMacMlmeRequest+0x2ca>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
    ac8e:	4a83      	ldr	r2, [pc, #524]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac90:	239c      	movs	r3, #156	; 0x9c
    ac92:	00db      	lsls	r3, r3, #3
    ac94:	58d4      	ldr	r4, [r2, r3]
    ac96:	4a81      	ldr	r2, [pc, #516]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ac98:	239c      	movs	r3, #156	; 0x9c
    ac9a:	00db      	lsls	r3, r3, #3
    ac9c:	58d3      	ldr	r3, [r2, r3]
    ac9e:	7818      	ldrb	r0, [r3, #0]
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	7b1b      	ldrb	r3, [r3, #12]
    aca4:	b25b      	sxtb	r3, r3
    aca6:	2201      	movs	r2, #1
    aca8:	0019      	movs	r1, r3
    acaa:	4b81      	ldr	r3, [pc, #516]	; (aeb0 <LoRaMacMlmeRequest+0x350>)
    acac:	4798      	blx	r3
    acae:	0003      	movs	r3, r0
    acb0:	001a      	movs	r2, r3
    acb2:	23d5      	movs	r3, #213	; 0xd5
    acb4:	54e2      	strb	r2, [r4, r3]
            }
            break;
    acb6:	e0b8      	b.n	ae2a <LoRaMacMlmeRequest+0x2ca>
        }
        case MLME_REJOIN_0:
        {
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    acb8:	4b78      	ldr	r3, [pc, #480]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    acba:	4a7a      	ldr	r2, [pc, #488]	; (aea4 <LoRaMacMlmeRequest+0x344>)
    acbc:	5c99      	ldrb	r1, [r3, r2]
    acbe:	2004      	movs	r0, #4
    acc0:	4301      	orrs	r1, r0
    acc2:	5499      	strb	r1, [r3, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	7819      	ldrb	r1, [r3, #0]
    acc8:	4b74      	ldr	r3, [pc, #464]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    acca:	4a7b      	ldr	r2, [pc, #492]	; (aeb8 <LoRaMacMlmeRequest+0x358>)
    accc:	5499      	strb	r1, [r3, r2]

            status = SendReJoinReq( REJOIN_REQ_0 );
    acce:	2317      	movs	r3, #23
    acd0:	18fc      	adds	r4, r7, r3
    acd2:	2000      	movs	r0, #0
    acd4:	4b77      	ldr	r3, [pc, #476]	; (aeb4 <LoRaMacMlmeRequest+0x354>)
    acd6:	4798      	blx	r3
    acd8:	0003      	movs	r3, r0
    acda:	7023      	strb	r3, [r4, #0]

            break;
    acdc:	e0ae      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_REJOIN_1:
        {
            MacCtx.MacFlags.Bits.MlmeReq = 1;
    acde:	4b6f      	ldr	r3, [pc, #444]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ace0:	4a70      	ldr	r2, [pc, #448]	; (aea4 <LoRaMacMlmeRequest+0x344>)
    ace2:	5c99      	ldrb	r1, [r3, r2]
    ace4:	2004      	movs	r0, #4
    ace6:	4301      	orrs	r1, r0
    ace8:	5499      	strb	r1, [r3, r2]
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
    acea:	687b      	ldr	r3, [r7, #4]
    acec:	7819      	ldrb	r1, [r3, #0]
    acee:	4b6b      	ldr	r3, [pc, #428]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    acf0:	4a71      	ldr	r2, [pc, #452]	; (aeb8 <LoRaMacMlmeRequest+0x358>)
    acf2:	5499      	strb	r1, [r3, r2]

            status = SendReJoinReq( REJOIN_REQ_1 );
    acf4:	2317      	movs	r3, #23
    acf6:	18fc      	adds	r4, r7, r3
    acf8:	2001      	movs	r0, #1
    acfa:	4b6e      	ldr	r3, [pc, #440]	; (aeb4 <LoRaMacMlmeRequest+0x354>)
    acfc:	4798      	blx	r3
    acfe:	0003      	movs	r3, r0
    ad00:	7023      	strb	r3, [r4, #0]

            break;
    ad02:	e09b      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    ad04:	2317      	movs	r3, #23
    ad06:	18fb      	adds	r3, r7, r3
    ad08:	2200      	movs	r2, #0
    ad0a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    ad0c:	230c      	movs	r3, #12
    ad0e:	18fb      	adds	r3, r7, r3
    ad10:	2200      	movs	r2, #0
    ad12:	0019      	movs	r1, r3
    ad14:	2002      	movs	r0, #2
    ad16:	4b69      	ldr	r3, [pc, #420]	; (aebc <LoRaMacMlmeRequest+0x35c>)
    ad18:	4798      	blx	r3
    ad1a:	1e03      	subs	r3, r0, #0
    ad1c:	d100      	bne.n	ad20 <LoRaMacMlmeRequest+0x1c0>
    ad1e:	e086      	b.n	ae2e <LoRaMacMlmeRequest+0x2ce>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    ad20:	2317      	movs	r3, #23
    ad22:	18fb      	adds	r3, r7, r3
    ad24:	2213      	movs	r2, #19
    ad26:	701a      	strb	r2, [r3, #0]
            }
            break;
    ad28:	e081      	b.n	ae2e <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
    ad2a:	687b      	ldr	r3, [r7, #4]
    ad2c:	889b      	ldrh	r3, [r3, #4]
    ad2e:	2217      	movs	r2, #23
    ad30:	18bc      	adds	r4, r7, r2
    ad32:	0018      	movs	r0, r3
    ad34:	4b62      	ldr	r3, [pc, #392]	; (aec0 <LoRaMacMlmeRequest+0x360>)
    ad36:	4798      	blx	r3
    ad38:	0003      	movs	r3, r0
    ad3a:	7023      	strb	r3, [r4, #0]
            break;
    ad3c:	e07e      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
    ad3e:	687b      	ldr	r3, [r7, #4]
    ad40:	8898      	ldrh	r0, [r3, #4]
    ad42:	687b      	ldr	r3, [r7, #4]
    ad44:	6899      	ldr	r1, [r3, #8]
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	7b1b      	ldrb	r3, [r3, #12]
    ad4a:	2217      	movs	r2, #23
    ad4c:	18bc      	adds	r4, r7, r2
    ad4e:	001a      	movs	r2, r3
    ad50:	4b5c      	ldr	r3, [pc, #368]	; (aec4 <LoRaMacMlmeRequest+0x364>)
    ad52:	4798      	blx	r3
    ad54:	0003      	movs	r3, r0
    ad56:	7023      	strb	r3, [r4, #0]
            break;
    ad58:	e070      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    ad5a:	2317      	movs	r3, #23
    ad5c:	18fb      	adds	r3, r7, r3
    ad5e:	2200      	movs	r2, #0
    ad60:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    ad62:	230c      	movs	r3, #12
    ad64:	18fb      	adds	r3, r7, r3
    ad66:	2200      	movs	r2, #0
    ad68:	0019      	movs	r1, r3
    ad6a:	200d      	movs	r0, #13
    ad6c:	4b53      	ldr	r3, [pc, #332]	; (aebc <LoRaMacMlmeRequest+0x35c>)
    ad6e:	4798      	blx	r3
    ad70:	1e03      	subs	r3, r0, #0
    ad72:	d05e      	beq.n	ae32 <LoRaMacMlmeRequest+0x2d2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    ad74:	2317      	movs	r3, #23
    ad76:	18fb      	adds	r3, r7, r3
    ad78:	2213      	movs	r2, #19
    ad7a:	701a      	strb	r2, [r3, #0]
            }
            break;
    ad7c:	e059      	b.n	ae32 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
    ad7e:	2316      	movs	r3, #22
    ad80:	18fb      	adds	r3, r7, r3
    ad82:	687a      	ldr	r2, [r7, #4]
    ad84:	7912      	ldrb	r2, [r2, #4]
    ad86:	701a      	strb	r2, [r3, #0]

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	791b      	ldrb	r3, [r3, #4]
    ad8c:	075b      	lsls	r3, r3, #29
    ad8e:	0f5b      	lsrs	r3, r3, #29
    ad90:	b2db      	uxtb	r3, r3
    ad92:	0018      	movs	r0, r3
    ad94:	4b4c      	ldr	r3, [pc, #304]	; (aec8 <LoRaMacMlmeRequest+0x368>)
    ad96:	4798      	blx	r3
            macCmdPayload[0] = value;
    ad98:	230c      	movs	r3, #12
    ad9a:	18fb      	adds	r3, r7, r3
    ad9c:	2216      	movs	r2, #22
    ad9e:	18ba      	adds	r2, r7, r2
    ada0:	7812      	ldrb	r2, [r2, #0]
    ada2:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
    ada4:	2317      	movs	r3, #23
    ada6:	18fb      	adds	r3, r7, r3
    ada8:	2200      	movs	r2, #0
    adaa:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
    adac:	230c      	movs	r3, #12
    adae:	18fb      	adds	r3, r7, r3
    adb0:	2201      	movs	r2, #1
    adb2:	0019      	movs	r1, r3
    adb4:	2010      	movs	r0, #16
    adb6:	4b41      	ldr	r3, [pc, #260]	; (aebc <LoRaMacMlmeRequest+0x35c>)
    adb8:	4798      	blx	r3
    adba:	1e03      	subs	r3, r0, #0
    adbc:	d03b      	beq.n	ae36 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    adbe:	2317      	movs	r3, #23
    adc0:	18fb      	adds	r3, r7, r3
    adc2:	2213      	movs	r2, #19
    adc4:	701a      	strb	r2, [r3, #0]
            }
            break;
    adc6:	e036      	b.n	ae36 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
    adc8:	2317      	movs	r3, #23
    adca:	18fb      	adds	r3, r7, r3
    adcc:	2200      	movs	r2, #0
    adce:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
    add0:	230c      	movs	r3, #12
    add2:	18fb      	adds	r3, r7, r3
    add4:	2200      	movs	r2, #0
    add6:	0019      	movs	r1, r3
    add8:	2012      	movs	r0, #18
    adda:	4b38      	ldr	r3, [pc, #224]	; (aebc <LoRaMacMlmeRequest+0x35c>)
    addc:	4798      	blx	r3
    adde:	1e03      	subs	r3, r0, #0
    ade0:	d02b      	beq.n	ae3a <LoRaMacMlmeRequest+0x2da>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
    ade2:	2317      	movs	r3, #23
    ade4:	18fb      	adds	r3, r7, r3
    ade6:	2213      	movs	r2, #19
    ade8:	701a      	strb	r2, [r3, #0]
            }
            break;
    adea:	e026      	b.n	ae3a <LoRaMacMlmeRequest+0x2da>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
    adec:	2310      	movs	r3, #16
    adee:	18fb      	adds	r3, r7, r3
    adf0:	2201      	movs	r2, #1
    adf2:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
    adf4:	4b35      	ldr	r3, [pc, #212]	; (aecc <LoRaMacMlmeRequest+0x36c>)
    adf6:	4798      	blx	r3
    adf8:	0003      	movs	r3, r0
    adfa:	001a      	movs	r2, r3
    adfc:	2301      	movs	r3, #1
    adfe:	4053      	eors	r3, r2
    ae00:	b2db      	uxtb	r3, r3
    ae02:	2b00      	cmp	r3, #0
    ae04:	d00a      	beq.n	ae1c <LoRaMacMlmeRequest+0x2bc>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
    ae06:	2000      	movs	r0, #0
    ae08:	4b31      	ldr	r3, [pc, #196]	; (aed0 <LoRaMacMlmeRequest+0x370>)
    ae0a:	4798      	blx	r3
                LoRaMacClassBBeaconTimerEvent( NULL );
    ae0c:	2000      	movs	r0, #0
    ae0e:	4b31      	ldr	r3, [pc, #196]	; (aed4 <LoRaMacMlmeRequest+0x374>)
    ae10:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
    ae12:	2317      	movs	r3, #23
    ae14:	18fb      	adds	r3, r7, r3
    ae16:	2200      	movs	r2, #0
    ae18:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
    ae1a:	e00f      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_BUSY;
    ae1c:	2317      	movs	r3, #23
    ae1e:	18fb      	adds	r3, r7, r3
    ae20:	2201      	movs	r2, #1
    ae22:	701a      	strb	r2, [r3, #0]
            break;
    ae24:	e00a      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
        }
        default:
            break;
    ae26:	46c0      	nop			; (mov r8, r8)
    ae28:	e008      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
            break;
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	e006      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
            break;
    ae2e:	46c0      	nop			; (mov r8, r8)
    ae30:	e004      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
            break;
    ae32:	46c0      	nop			; (mov r8, r8)
    ae34:	e002      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
            break;
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	e000      	b.n	ae3c <LoRaMacMlmeRequest+0x2dc>
            break;
    ae3a:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
    ae3c:	2317      	movs	r3, #23
    ae3e:	18fb      	adds	r3, r7, r3
    ae40:	781b      	ldrb	r3, [r3, #0]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d011      	beq.n	ae6a <LoRaMacMlmeRequest+0x30a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
    ae46:	4b12      	ldr	r3, [pc, #72]	; (ae90 <LoRaMacMlmeRequest+0x330>)
    ae48:	4798      	blx	r3
    ae4a:	1e03      	subs	r3, r0, #0
    ae4c:	d114      	bne.n	ae78 <LoRaMacMlmeRequest+0x318>
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
    ae4e:	4a13      	ldr	r2, [pc, #76]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ae50:	239c      	movs	r3, #156	; 0x9c
    ae52:	00db      	lsls	r3, r3, #3
    ae54:	58d3      	ldr	r3, [r2, r3]
    ae56:	4a20      	ldr	r2, [pc, #128]	; (aed8 <LoRaMacMlmeRequest+0x378>)
    ae58:	2100      	movs	r1, #0
    ae5a:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
    ae5c:	4b0f      	ldr	r3, [pc, #60]	; (ae9c <LoRaMacMlmeRequest+0x33c>)
    ae5e:	4a11      	ldr	r2, [pc, #68]	; (aea4 <LoRaMacMlmeRequest+0x344>)
    ae60:	5c99      	ldrb	r1, [r3, r2]
    ae62:	2004      	movs	r0, #4
    ae64:	4381      	bics	r1, r0
    ae66:	5499      	strb	r1, [r3, r2]
    ae68:	e006      	b.n	ae78 <LoRaMacMlmeRequest+0x318>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    ae6a:	2310      	movs	r3, #16
    ae6c:	18fb      	adds	r3, r7, r3
    ae6e:	0018      	movs	r0, r3
    ae70:	4b1a      	ldr	r3, [pc, #104]	; (aedc <LoRaMacMlmeRequest+0x37c>)
    ae72:	4798      	blx	r3
        EventMacNvmCtxChanged( );
    ae74:	4b1a      	ldr	r3, [pc, #104]	; (aee0 <LoRaMacMlmeRequest+0x380>)
    ae76:	4798      	blx	r3
    }
    return status;
    ae78:	2317      	movs	r3, #23
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	781b      	ldrb	r3, [r3, #0]
}
    ae7e:	0018      	movs	r0, r3
    ae80:	46bd      	mov	sp, r7
    ae82:	b007      	add	sp, #28
    ae84:	bd90      	pop	{r4, r7, pc}
    ae86:	46c0      	nop			; (mov r8, r8)
    ae88:	00005ee5 	.word	0x00005ee5
    ae8c:	0000c459 	.word	0x0000c459
    ae90:	0000c445 	.word	0x0000c445
    ae94:	20000fbc 	.word	0x20000fbc
    ae98:	000029cd 	.word	0x000029cd
    ae9c:	20000b78 	.word	0x20000b78
    aea0:	00000445 	.word	0x00000445
    aea4:	00000471 	.word	0x00000471
    aea8:	0001f284 	.word	0x0001f284
    aeac:	000085b5 	.word	0x000085b5
    aeb0:	0000f339 	.word	0x0000f339
    aeb4:	00007d7d 	.word	0x00007d7d
    aeb8:	00000444 	.word	0x00000444
    aebc:	0000bcb5 	.word	0x0000bcb5
    aec0:	00008c79 	.word	0x00008c79
    aec4:	00008d2d 	.word	0x00008d2d
    aec8:	0000b8eb 	.word	0x0000b8eb
    aecc:	0000b867 	.word	0x0000b867
    aed0:	0000b82b 	.word	0x0000b82b
    aed4:	0000b873 	.word	0x0000b873
    aed8:	00000217 	.word	0x00000217
    aedc:	0000c165 	.word	0x0000c165
    aee0:	00009305 	.word	0x00009305

0000aee4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
    aee4:	b5b0      	push	{r4, r5, r7, lr}
    aee6:	b08a      	sub	sp, #40	; 0x28
    aee8:	af00      	add	r7, sp, #0
    aeea:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    aeec:	2327      	movs	r3, #39	; 0x27
    aeee:	18fb      	adds	r3, r7, r3
    aef0:	2202      	movs	r2, #2
    aef2:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
    aef4:	2326      	movs	r3, #38	; 0x26
    aef6:	18fb      	adds	r3, r7, r3
    aef8:	2200      	movs	r2, #0
    aefa:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    aefc:	231d      	movs	r3, #29
    aefe:	18fb      	adds	r3, r7, r3
    af00:	2200      	movs	r2, #0
    af02:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
    af04:	231c      	movs	r3, #28
    af06:	18fb      	adds	r3, r7, r3
    af08:	2200      	movs	r2, #0
    af0a:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
    af0c:	687b      	ldr	r3, [r7, #4]
    af0e:	2b00      	cmp	r3, #0
    af10:	d101      	bne.n	af16 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    af12:	2303      	movs	r3, #3
    af14:	e10d      	b.n	b132 <LoRaMacMcpsRequest+0x24e>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
    af16:	4b89      	ldr	r3, [pc, #548]	; (b13c <LoRaMacMcpsRequest+0x258>)
    af18:	4798      	blx	r3
    af1a:	0003      	movs	r3, r0
    af1c:	2b01      	cmp	r3, #1
    af1e:	d101      	bne.n	af24 <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
    af20:	2301      	movs	r3, #1
    af22:	e106      	b.n	b132 <LoRaMacMcpsRequest+0x24e>
    }

    macHdr.Value = 0;
    af24:	2310      	movs	r3, #16
    af26:	18fb      	adds	r3, r7, r3
    af28:	2200      	movs	r2, #0
    af2a:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
    af2c:	4b84      	ldr	r3, [pc, #528]	; (b140 <LoRaMacMcpsRequest+0x25c>)
    af2e:	2214      	movs	r2, #20
    af30:	2100      	movs	r1, #0
    af32:	0018      	movs	r0, r3
    af34:	4b83      	ldr	r3, [pc, #524]	; (b144 <LoRaMacMcpsRequest+0x260>)
    af36:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
    af38:	4b83      	ldr	r3, [pc, #524]	; (b148 <LoRaMacMcpsRequest+0x264>)
    af3a:	4a84      	ldr	r2, [pc, #528]	; (b14c <LoRaMacMcpsRequest+0x268>)
    af3c:	2101      	movs	r1, #1
    af3e:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	2b01      	cmp	r3, #1
    af46:	d024      	beq.n	af92 <LoRaMacMcpsRequest+0xae>
    af48:	2b03      	cmp	r3, #3
    af4a:	d043      	beq.n	afd4 <LoRaMacMcpsRequest+0xf0>
    af4c:	2b00      	cmp	r3, #0
    af4e:	d000      	beq.n	af52 <LoRaMacMcpsRequest+0x6e>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
    af50:	e059      	b.n	b006 <LoRaMacMcpsRequest+0x122>
            readyToSend = true;
    af52:	231c      	movs	r3, #28
    af54:	18fb      	adds	r3, r7, r3
    af56:	2201      	movs	r2, #1
    af58:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
    af5a:	2310      	movs	r3, #16
    af5c:	18fb      	adds	r3, r7, r3
    af5e:	781a      	ldrb	r2, [r3, #0]
    af60:	211f      	movs	r1, #31
    af62:	400a      	ands	r2, r1
    af64:	1c11      	adds	r1, r2, #0
    af66:	2240      	movs	r2, #64	; 0x40
    af68:	430a      	orrs	r2, r1
    af6a:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
    af6c:	2326      	movs	r3, #38	; 0x26
    af6e:	18fb      	adds	r3, r7, r3
    af70:	687a      	ldr	r2, [r7, #4]
    af72:	7912      	ldrb	r2, [r2, #4]
    af74:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
    af76:	687b      	ldr	r3, [r7, #4]
    af78:	689b      	ldr	r3, [r3, #8]
    af7a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
    af7c:	231e      	movs	r3, #30
    af7e:	18fb      	adds	r3, r7, r3
    af80:	687a      	ldr	r2, [r7, #4]
    af82:	8992      	ldrh	r2, [r2, #12]
    af84:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
    af86:	231d      	movs	r3, #29
    af88:	18fb      	adds	r3, r7, r3
    af8a:	687a      	ldr	r2, [r7, #4]
    af8c:	7b92      	ldrb	r2, [r2, #14]
    af8e:	701a      	strb	r2, [r3, #0]
            break;
    af90:	e039      	b.n	b006 <LoRaMacMcpsRequest+0x122>
            readyToSend = true;
    af92:	231c      	movs	r3, #28
    af94:	18fb      	adds	r3, r7, r3
    af96:	2201      	movs	r2, #1
    af98:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
    af9a:	2310      	movs	r3, #16
    af9c:	18fb      	adds	r3, r7, r3
    af9e:	781a      	ldrb	r2, [r3, #0]
    afa0:	211f      	movs	r1, #31
    afa2:	400a      	ands	r2, r1
    afa4:	1c11      	adds	r1, r2, #0
    afa6:	2280      	movs	r2, #128	; 0x80
    afa8:	4252      	negs	r2, r2
    afaa:	430a      	orrs	r2, r1
    afac:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
    afae:	2326      	movs	r3, #38	; 0x26
    afb0:	18fb      	adds	r3, r7, r3
    afb2:	687a      	ldr	r2, [r7, #4]
    afb4:	7912      	ldrb	r2, [r2, #4]
    afb6:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
    afb8:	687b      	ldr	r3, [r7, #4]
    afba:	689b      	ldr	r3, [r3, #8]
    afbc:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
    afbe:	231e      	movs	r3, #30
    afc0:	18fb      	adds	r3, r7, r3
    afc2:	687a      	ldr	r2, [r7, #4]
    afc4:	8992      	ldrh	r2, [r2, #12]
    afc6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
    afc8:	231d      	movs	r3, #29
    afca:	18fb      	adds	r3, r7, r3
    afcc:	687a      	ldr	r2, [r7, #4]
    afce:	7b92      	ldrb	r2, [r2, #14]
    afd0:	701a      	strb	r2, [r3, #0]
            break;
    afd2:	e018      	b.n	b006 <LoRaMacMcpsRequest+0x122>
            readyToSend = true;
    afd4:	231c      	movs	r3, #28
    afd6:	18fb      	adds	r3, r7, r3
    afd8:	2201      	movs	r2, #1
    afda:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
    afdc:	2310      	movs	r3, #16
    afde:	18fb      	adds	r3, r7, r3
    afe0:	781a      	ldrb	r2, [r3, #0]
    afe2:	2120      	movs	r1, #32
    afe4:	4249      	negs	r1, r1
    afe6:	430a      	orrs	r2, r1
    afe8:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
    afea:	687b      	ldr	r3, [r7, #4]
    afec:	685b      	ldr	r3, [r3, #4]
    afee:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
    aff0:	231e      	movs	r3, #30
    aff2:	18fb      	adds	r3, r7, r3
    aff4:	687a      	ldr	r2, [r7, #4]
    aff6:	8912      	ldrh	r2, [r2, #8]
    aff8:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
    affa:	231d      	movs	r3, #29
    affc:	18fb      	adds	r3, r7, r3
    affe:	687a      	ldr	r2, [r7, #4]
    b000:	7a92      	ldrb	r2, [r2, #10]
    b002:	701a      	strb	r2, [r3, #0]
            break;
    b004:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    b006:	2318      	movs	r3, #24
    b008:	18fb      	adds	r3, r7, r3
    b00a:	2201      	movs	r2, #1
    b00c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    b00e:	4a4e      	ldr	r2, [pc, #312]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b010:	239c      	movs	r3, #156	; 0x9c
    b012:	00db      	lsls	r3, r3, #3
    b014:	58d2      	ldr	r2, [r2, r3]
    b016:	2380      	movs	r3, #128	; 0x80
    b018:	005b      	lsls	r3, r3, #1
    b01a:	5cd2      	ldrb	r2, [r2, r3]
    b01c:	2318      	movs	r3, #24
    b01e:	18fb      	adds	r3, r7, r3
    b020:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
    b022:	4a49      	ldr	r2, [pc, #292]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b024:	239c      	movs	r3, #156	; 0x9c
    b026:	00db      	lsls	r3, r3, #3
    b028:	58d3      	ldr	r3, [r2, r3]
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	2218      	movs	r2, #24
    b02e:	18ba      	adds	r2, r7, r2
    b030:	0011      	movs	r1, r2
    b032:	0018      	movs	r0, r3
    b034:	4b46      	ldr	r3, [pc, #280]	; (b150 <LoRaMacMcpsRequest+0x26c>)
    b036:	4798      	blx	r3
    b038:	0003      	movs	r3, r0
    b03a:	001a      	movs	r2, r3
    b03c:	2314      	movs	r3, #20
    b03e:	18fb      	adds	r3, r7, r3
    b040:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
    b042:	2314      	movs	r3, #20
    b044:	18fb      	adds	r3, r7, r3
    b046:	681b      	ldr	r3, [r3, #0]
    b048:	b259      	sxtb	r1, r3
    b04a:	231d      	movs	r3, #29
    b04c:	18fa      	adds	r2, r7, r3
    b04e:	231d      	movs	r3, #29
    b050:	18fb      	adds	r3, r7, r3
    b052:	781c      	ldrb	r4, [r3, #0]
    b054:	1c0b      	adds	r3, r1, #0
    b056:	b258      	sxtb	r0, r3
    b058:	b261      	sxtb	r1, r4
    b05a:	4288      	cmp	r0, r1
    b05c:	da00      	bge.n	b060 <LoRaMacMcpsRequest+0x17c>
    b05e:	1c23      	adds	r3, r4, #0
    b060:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
    b062:	231c      	movs	r3, #28
    b064:	18fb      	adds	r3, r7, r3
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	2b00      	cmp	r3, #0
    b06a:	d05d      	beq.n	b128 <LoRaMacMcpsRequest+0x244>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
    b06c:	4a36      	ldr	r2, [pc, #216]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b06e:	239c      	movs	r3, #156	; 0x9c
    b070:	00db      	lsls	r3, r3, #3
    b072:	58d3      	ldr	r3, [r2, r3]
    b074:	22ca      	movs	r2, #202	; 0xca
    b076:	5c9b      	ldrb	r3, [r3, r2]
    b078:	2201      	movs	r2, #1
    b07a:	4053      	eors	r3, r2
    b07c:	b2db      	uxtb	r3, r3
    b07e:	2b00      	cmp	r3, #0
    b080:	d029      	beq.n	b0d6 <LoRaMacMcpsRequest+0x1f2>
        {
            verify.DatarateParams.Datarate = datarate;
    b082:	230c      	movs	r3, #12
    b084:	18fb      	adds	r3, r7, r3
    b086:	221d      	movs	r2, #29
    b088:	18ba      	adds	r2, r7, r2
    b08a:	7812      	ldrb	r2, [r2, #0]
    b08c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
    b08e:	4a2e      	ldr	r2, [pc, #184]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b090:	239c      	movs	r3, #156	; 0x9c
    b092:	00db      	lsls	r3, r3, #3
    b094:	58d2      	ldr	r2, [r2, r3]
    b096:	2380      	movs	r3, #128	; 0x80
    b098:	005b      	lsls	r3, r3, #1
    b09a:	5cd2      	ldrb	r2, [r2, r3]
    b09c:	230c      	movs	r3, #12
    b09e:	18fb      	adds	r3, r7, r3
    b0a0:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
    b0a2:	4a29      	ldr	r2, [pc, #164]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b0a4:	239c      	movs	r3, #156	; 0x9c
    b0a6:	00db      	lsls	r3, r3, #3
    b0a8:	58d3      	ldr	r3, [r2, r3]
    b0aa:	781b      	ldrb	r3, [r3, #0]
    b0ac:	220c      	movs	r2, #12
    b0ae:	18b9      	adds	r1, r7, r2
    b0b0:	2204      	movs	r2, #4
    b0b2:	0018      	movs	r0, r3
    b0b4:	4b27      	ldr	r3, [pc, #156]	; (b154 <LoRaMacMcpsRequest+0x270>)
    b0b6:	4798      	blx	r3
    b0b8:	1e03      	subs	r3, r0, #0
    b0ba:	d00a      	beq.n	b0d2 <LoRaMacMcpsRequest+0x1ee>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
    b0bc:	4a22      	ldr	r2, [pc, #136]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b0be:	239c      	movs	r3, #156	; 0x9c
    b0c0:	00db      	lsls	r3, r3, #3
    b0c2:	58d3      	ldr	r3, [r2, r3]
    b0c4:	220c      	movs	r2, #12
    b0c6:	18ba      	adds	r2, r7, r2
    b0c8:	2100      	movs	r1, #0
    b0ca:	5651      	ldrsb	r1, [r2, r1]
    b0cc:	22d5      	movs	r2, #213	; 0xd5
    b0ce:	5499      	strb	r1, [r3, r2]
    b0d0:	e001      	b.n	b0d6 <LoRaMacMcpsRequest+0x1f2>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
    b0d2:	2303      	movs	r3, #3
    b0d4:	e02d      	b.n	b132 <LoRaMacMcpsRequest+0x24e>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
    b0d6:	2327      	movs	r3, #39	; 0x27
    b0d8:	18fc      	adds	r4, r7, r3
    b0da:	231e      	movs	r3, #30
    b0dc:	18fb      	adds	r3, r7, r3
    b0de:	881d      	ldrh	r5, [r3, #0]
    b0e0:	6a3a      	ldr	r2, [r7, #32]
    b0e2:	2326      	movs	r3, #38	; 0x26
    b0e4:	18fb      	adds	r3, r7, r3
    b0e6:	7819      	ldrb	r1, [r3, #0]
    b0e8:	2310      	movs	r3, #16
    b0ea:	18f8      	adds	r0, r7, r3
    b0ec:	002b      	movs	r3, r5
    b0ee:	4d1a      	ldr	r5, [pc, #104]	; (b158 <LoRaMacMcpsRequest+0x274>)
    b0f0:	47a8      	blx	r5
    b0f2:	0003      	movs	r3, r0
    b0f4:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
    b0f6:	2327      	movs	r3, #39	; 0x27
    b0f8:	18fb      	adds	r3, r7, r3
    b0fa:	781b      	ldrb	r3, [r3, #0]
    b0fc:	2b00      	cmp	r3, #0
    b0fe:	d10c      	bne.n	b11a <LoRaMacMcpsRequest+0x236>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
    b100:	687b      	ldr	r3, [r7, #4]
    b102:	7819      	ldrb	r1, [r3, #0]
    b104:	4a10      	ldr	r2, [pc, #64]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b106:	2386      	movs	r3, #134	; 0x86
    b108:	00db      	lsls	r3, r3, #3
    b10a:	54d1      	strb	r1, [r2, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
    b10c:	4b0e      	ldr	r3, [pc, #56]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b10e:	4a13      	ldr	r2, [pc, #76]	; (b15c <LoRaMacMcpsRequest+0x278>)
    b110:	5c99      	ldrb	r1, [r3, r2]
    b112:	2001      	movs	r0, #1
    b114:	4301      	orrs	r1, r0
    b116:	5499      	strb	r1, [r3, r2]
    b118:	e006      	b.n	b128 <LoRaMacMcpsRequest+0x244>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
    b11a:	4a0b      	ldr	r2, [pc, #44]	; (b148 <LoRaMacMcpsRequest+0x264>)
    b11c:	239c      	movs	r3, #156	; 0x9c
    b11e:	00db      	lsls	r3, r3, #3
    b120:	58d3      	ldr	r3, [r2, r3]
    b122:	4a0f      	ldr	r2, [pc, #60]	; (b160 <LoRaMacMcpsRequest+0x27c>)
    b124:	2100      	movs	r1, #0
    b126:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
    b128:	4b0e      	ldr	r3, [pc, #56]	; (b164 <LoRaMacMcpsRequest+0x280>)
    b12a:	4798      	blx	r3
    return status;
    b12c:	2327      	movs	r3, #39	; 0x27
    b12e:	18fb      	adds	r3, r7, r3
    b130:	781b      	ldrb	r3, [r3, #0]
}
    b132:	0018      	movs	r0, r3
    b134:	46bd      	mov	sp, r7
    b136:	b00a      	add	sp, #40	; 0x28
    b138:	bdb0      	pop	{r4, r5, r7, pc}
    b13a:	46c0      	nop			; (mov r8, r8)
    b13c:	00005ee5 	.word	0x00005ee5
    b140:	20000fa8 	.word	0x20000fa8
    b144:	000029cd 	.word	0x000029cd
    b148:	20000b78 	.word	0x20000b78
    b14c:	00000431 	.word	0x00000431
    b150:	0000eff1 	.word	0x0000eff1
    b154:	0000f0d1 	.word	0x0000f0d1
    b158:	00007ac1 	.word	0x00007ac1
    b15c:	00000471 	.word	0x00000471
    b160:	00000217 	.word	0x00000217
    b164:	00009305 	.word	0x00009305

0000b168 <ConvertRejoinCycleTime>:

static bool ConvertRejoinCycleTime( uint32_t rejoinCycleTime, uint32_t* timeInMiliSec )
{
    b168:	b580      	push	{r7, lr}
    b16a:	b082      	sub	sp, #8
    b16c:	af00      	add	r7, sp, #0
    b16e:	6078      	str	r0, [r7, #4]
    b170:	6039      	str	r1, [r7, #0]
    // Our timer implementation do not allow longer times than 4294967295 ms
    if( rejoinCycleTime > 4294967 )
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	4a07      	ldr	r2, [pc, #28]	; (b194 <ConvertRejoinCycleTime+0x2c>)
    b176:	4293      	cmp	r3, r2
    b178:	d907      	bls.n	b18a <ConvertRejoinCycleTime+0x22>
    {
        *timeInMiliSec = rejoinCycleTime * 1000;
    b17a:	687b      	ldr	r3, [r7, #4]
    b17c:	22fa      	movs	r2, #250	; 0xfa
    b17e:	0092      	lsls	r2, r2, #2
    b180:	435a      	muls	r2, r3
    b182:	683b      	ldr	r3, [r7, #0]
    b184:	601a      	str	r2, [r3, #0]
        return true;
    b186:	2301      	movs	r3, #1
    b188:	e000      	b.n	b18c <ConvertRejoinCycleTime+0x24>
    }
    else
    {
        return false;
    b18a:	2300      	movs	r3, #0
    }
}
    b18c:	0018      	movs	r0, r3
    b18e:	46bd      	mov	sp, r7
    b190:	b002      	add	sp, #8
    b192:	bd80      	pop	{r7, pc}
    b194:	00418937 	.word	0x00418937

0000b198 <OnRejoin0CycleTimerEvent>:

static void OnRejoin0CycleTimerEvent( void* context )
{
    b198:	b580      	push	{r7, lr}
    b19a:	b082      	sub	sp, #8
    b19c:	af00      	add	r7, sp, #0
    b19e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.Rejoin0CycleTimer );
    b1a0:	4b11      	ldr	r3, [pc, #68]	; (b1e8 <OnRejoin0CycleTimerEvent+0x50>)
    b1a2:	0018      	movs	r0, r3
    b1a4:	4b11      	ldr	r3, [pc, #68]	; (b1ec <OnRejoin0CycleTimerEvent+0x54>)
    b1a6:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
    b1a8:	4a11      	ldr	r2, [pc, #68]	; (b1f0 <OnRejoin0CycleTimerEvent+0x58>)
    b1aa:	239c      	movs	r3, #156	; 0x9c
    b1ac:	00db      	lsls	r3, r3, #3
    b1ae:	58d2      	ldr	r2, [r2, r3]
    b1b0:	238b      	movs	r3, #139	; 0x8b
    b1b2:	009b      	lsls	r3, r3, #2
    b1b4:	58d3      	ldr	r3, [r2, r3]
    b1b6:	4a0f      	ldr	r2, [pc, #60]	; (b1f4 <OnRejoin0CycleTimerEvent+0x5c>)
    b1b8:	0011      	movs	r1, r2
    b1ba:	0018      	movs	r0, r3
    b1bc:	4b0e      	ldr	r3, [pc, #56]	; (b1f8 <OnRejoin0CycleTimerEvent+0x60>)
    b1be:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_0 );
    b1c0:	2000      	movs	r0, #0
    b1c2:	4b0e      	ldr	r3, [pc, #56]	; (b1fc <OnRejoin0CycleTimerEvent+0x64>)
    b1c4:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
    b1c6:	4b0a      	ldr	r3, [pc, #40]	; (b1f0 <OnRejoin0CycleTimerEvent+0x58>)
    b1c8:	4a0d      	ldr	r2, [pc, #52]	; (b200 <OnRejoin0CycleTimerEvent+0x68>)
    b1ca:	589a      	ldr	r2, [r3, r2]
    b1cc:	4b06      	ldr	r3, [pc, #24]	; (b1e8 <OnRejoin0CycleTimerEvent+0x50>)
    b1ce:	0011      	movs	r1, r2
    b1d0:	0018      	movs	r0, r3
    b1d2:	4b0c      	ldr	r3, [pc, #48]	; (b204 <OnRejoin0CycleTimerEvent+0x6c>)
    b1d4:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin0CycleTimer );
    b1d6:	4b04      	ldr	r3, [pc, #16]	; (b1e8 <OnRejoin0CycleTimerEvent+0x50>)
    b1d8:	0018      	movs	r0, r3
    b1da:	4b0b      	ldr	r3, [pc, #44]	; (b208 <OnRejoin0CycleTimerEvent+0x70>)
    b1dc:	4798      	blx	r3
}
    b1de:	46c0      	nop			; (mov r8, r8)
    b1e0:	46bd      	mov	sp, r7
    b1e2:	b002      	add	sp, #8
    b1e4:	bd80      	pop	{r7, pc}
    b1e6:	46c0      	nop			; (mov r8, r8)
    b1e8:	20000fec 	.word	0x20000fec
    b1ec:	0001624d 	.word	0x0001624d
    b1f0:	20000b78 	.word	0x20000b78
    b1f4:	2000104c 	.word	0x2000104c
    b1f8:	0000b169 	.word	0x0000b169
    b1fc:	00007d7d 	.word	0x00007d7d
    b200:	000004d4 	.word	0x000004d4
    b204:	00016389 	.word	0x00016389
    b208:	00015fc1 	.word	0x00015fc1

0000b20c <OnRejoin1CycleTimerEvent>:

static void OnRejoin1CycleTimerEvent( void* context )
{
    b20c:	b580      	push	{r7, lr}
    b20e:	b082      	sub	sp, #8
    b210:	af00      	add	r7, sp, #0
    b212:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.Rejoin1CycleTimer );
    b214:	4b11      	ldr	r3, [pc, #68]	; (b25c <OnRejoin1CycleTimerEvent+0x50>)
    b216:	0018      	movs	r0, r3
    b218:	4b11      	ldr	r3, [pc, #68]	; (b260 <OnRejoin1CycleTimerEvent+0x54>)
    b21a:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
    b21c:	4a11      	ldr	r2, [pc, #68]	; (b264 <OnRejoin1CycleTimerEvent+0x58>)
    b21e:	239c      	movs	r3, #156	; 0x9c
    b220:	00db      	lsls	r3, r3, #3
    b222:	58d2      	ldr	r2, [r2, r3]
    b224:	238c      	movs	r3, #140	; 0x8c
    b226:	009b      	lsls	r3, r3, #2
    b228:	58d3      	ldr	r3, [r2, r3]
    b22a:	4a0f      	ldr	r2, [pc, #60]	; (b268 <OnRejoin1CycleTimerEvent+0x5c>)
    b22c:	0011      	movs	r1, r2
    b22e:	0018      	movs	r0, r3
    b230:	4b0e      	ldr	r3, [pc, #56]	; (b26c <OnRejoin1CycleTimerEvent+0x60>)
    b232:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_1 );
    b234:	2001      	movs	r0, #1
    b236:	4b0e      	ldr	r3, [pc, #56]	; (b270 <OnRejoin1CycleTimerEvent+0x64>)
    b238:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
    b23a:	4a0a      	ldr	r2, [pc, #40]	; (b264 <OnRejoin1CycleTimerEvent+0x58>)
    b23c:	239b      	movs	r3, #155	; 0x9b
    b23e:	00db      	lsls	r3, r3, #3
    b240:	58d2      	ldr	r2, [r2, r3]
    b242:	4b06      	ldr	r3, [pc, #24]	; (b25c <OnRejoin1CycleTimerEvent+0x50>)
    b244:	0011      	movs	r1, r2
    b246:	0018      	movs	r0, r3
    b248:	4b0a      	ldr	r3, [pc, #40]	; (b274 <OnRejoin1CycleTimerEvent+0x68>)
    b24a:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin1CycleTimer );
    b24c:	4b03      	ldr	r3, [pc, #12]	; (b25c <OnRejoin1CycleTimerEvent+0x50>)
    b24e:	0018      	movs	r0, r3
    b250:	4b09      	ldr	r3, [pc, #36]	; (b278 <OnRejoin1CycleTimerEvent+0x6c>)
    b252:	4798      	blx	r3
}
    b254:	46c0      	nop			; (mov r8, r8)
    b256:	46bd      	mov	sp, r7
    b258:	b002      	add	sp, #8
    b25a:	bd80      	pop	{r7, pc}
    b25c:	20001004 	.word	0x20001004
    b260:	0001624d 	.word	0x0001624d
    b264:	20000b78 	.word	0x20000b78
    b268:	20001050 	.word	0x20001050
    b26c:	0000b169 	.word	0x0000b169
    b270:	00007d7d 	.word	0x00007d7d
    b274:	00016389 	.word	0x00016389
    b278:	00015fc1 	.word	0x00015fc1

0000b27c <OnRejoin2CycleTimerEvent>:

static void OnRejoin2CycleTimerEvent( void* context )
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b082      	sub	sp, #8
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.Rejoin2CycleTimer );
    b284:	4b11      	ldr	r3, [pc, #68]	; (b2cc <OnRejoin2CycleTimerEvent+0x50>)
    b286:	0018      	movs	r0, r3
    b288:	4b11      	ldr	r3, [pc, #68]	; (b2d0 <OnRejoin2CycleTimerEvent+0x54>)
    b28a:	4798      	blx	r3
    ConvertRejoinCycleTime( MacCtx.NvmCtx->Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
    b28c:	4a11      	ldr	r2, [pc, #68]	; (b2d4 <OnRejoin2CycleTimerEvent+0x58>)
    b28e:	239c      	movs	r3, #156	; 0x9c
    b290:	00db      	lsls	r3, r3, #3
    b292:	58d2      	ldr	r2, [r2, r3]
    b294:	238d      	movs	r3, #141	; 0x8d
    b296:	009b      	lsls	r3, r3, #2
    b298:	58d3      	ldr	r3, [r2, r3]
    b29a:	4a0f      	ldr	r2, [pc, #60]	; (b2d8 <OnRejoin2CycleTimerEvent+0x5c>)
    b29c:	0011      	movs	r1, r2
    b29e:	0018      	movs	r0, r3
    b2a0:	4b0e      	ldr	r3, [pc, #56]	; (b2dc <OnRejoin2CycleTimerEvent+0x60>)
    b2a2:	4798      	blx	r3

    SendReJoinReq( REJOIN_REQ_2 );
    b2a4:	2002      	movs	r0, #2
    b2a6:	4b0e      	ldr	r3, [pc, #56]	; (b2e0 <OnRejoin2CycleTimerEvent+0x64>)
    b2a8:	4798      	blx	r3

    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    b2aa:	4b0a      	ldr	r3, [pc, #40]	; (b2d4 <OnRejoin2CycleTimerEvent+0x58>)
    b2ac:	4a0d      	ldr	r2, [pc, #52]	; (b2e4 <OnRejoin2CycleTimerEvent+0x68>)
    b2ae:	589a      	ldr	r2, [r3, r2]
    b2b0:	4b06      	ldr	r3, [pc, #24]	; (b2cc <OnRejoin2CycleTimerEvent+0x50>)
    b2b2:	0011      	movs	r1, r2
    b2b4:	0018      	movs	r0, r3
    b2b6:	4b0c      	ldr	r3, [pc, #48]	; (b2e8 <OnRejoin2CycleTimerEvent+0x6c>)
    b2b8:	4798      	blx	r3
    TimerStart( &MacCtx.Rejoin2CycleTimer );
    b2ba:	4b04      	ldr	r3, [pc, #16]	; (b2cc <OnRejoin2CycleTimerEvent+0x50>)
    b2bc:	0018      	movs	r0, r3
    b2be:	4b0b      	ldr	r3, [pc, #44]	; (b2ec <OnRejoin2CycleTimerEvent+0x70>)
    b2c0:	4798      	blx	r3
}
    b2c2:	46c0      	nop			; (mov r8, r8)
    b2c4:	46bd      	mov	sp, r7
    b2c6:	b002      	add	sp, #8
    b2c8:	bd80      	pop	{r7, pc}
    b2ca:	46c0      	nop			; (mov r8, r8)
    b2cc:	2000101c 	.word	0x2000101c
    b2d0:	0001624d 	.word	0x0001624d
    b2d4:	20000b78 	.word	0x20000b78
    b2d8:	20001054 	.word	0x20001054
    b2dc:	0000b169 	.word	0x0000b169
    b2e0:	00007d7d 	.word	0x00007d7d
    b2e4:	000004dc 	.word	0x000004dc
    b2e8:	00016389 	.word	0x00016389
    b2ec:	00015fc1 	.word	0x00015fc1

0000b2f0 <OnForceRejoinReqCycleTimerEvent>:

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b082      	sub	sp, #8
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	6078      	str	r0, [r7, #4]
    if( MacCtx.NvmCtx->ForceRejoinRetriesCounter == MacCtx.NvmCtx->ForceRejoinMaxRetries )
    b2f8:	4a1f      	ldr	r2, [pc, #124]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b2fa:	239c      	movs	r3, #156	; 0x9c
    b2fc:	00db      	lsls	r3, r3, #3
    b2fe:	58d3      	ldr	r3, [r2, r3]
    b300:	4a1e      	ldr	r2, [pc, #120]	; (b37c <OnForceRejoinReqCycleTimerEvent+0x8c>)
    b302:	5c9a      	ldrb	r2, [r3, r2]
    b304:	491c      	ldr	r1, [pc, #112]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b306:	239c      	movs	r3, #156	; 0x9c
    b308:	00db      	lsls	r3, r3, #3
    b30a:	58cb      	ldr	r3, [r1, r3]
    b30c:	491c      	ldr	r1, [pc, #112]	; (b380 <OnForceRejoinReqCycleTimerEvent+0x90>)
    b30e:	5c5b      	ldrb	r3, [r3, r1]
    b310:	429a      	cmp	r2, r3
    b312:	d10a      	bne.n	b32a <OnForceRejoinReqCycleTimerEvent+0x3a>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
    b314:	4b1b      	ldr	r3, [pc, #108]	; (b384 <OnForceRejoinReqCycleTimerEvent+0x94>)
    b316:	0018      	movs	r0, r3
    b318:	4b1b      	ldr	r3, [pc, #108]	; (b388 <OnForceRejoinReqCycleTimerEvent+0x98>)
    b31a:	4798      	blx	r3
        MacCtx.NvmCtx->ForceRejoinRetriesCounter = 0;
    b31c:	4a16      	ldr	r2, [pc, #88]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b31e:	239c      	movs	r3, #156	; 0x9c
    b320:	00db      	lsls	r3, r3, #3
    b322:	58d3      	ldr	r3, [r2, r3]
    b324:	4a15      	ldr	r2, [pc, #84]	; (b37c <OnForceRejoinReqCycleTimerEvent+0x8c>)
    b326:	2100      	movs	r1, #0
    b328:	5499      	strb	r1, [r3, r2]
    }

    MacCtx.NvmCtx->ForceRejoinRetriesCounter ++;
    b32a:	4a13      	ldr	r2, [pc, #76]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b32c:	239c      	movs	r3, #156	; 0x9c
    b32e:	00db      	lsls	r3, r3, #3
    b330:	58d3      	ldr	r3, [r2, r3]
    b332:	4a12      	ldr	r2, [pc, #72]	; (b37c <OnForceRejoinReqCycleTimerEvent+0x8c>)
    b334:	5c9a      	ldrb	r2, [r3, r2]
    b336:	3201      	adds	r2, #1
    b338:	b2d1      	uxtb	r1, r2
    b33a:	4a10      	ldr	r2, [pc, #64]	; (b37c <OnForceRejoinReqCycleTimerEvent+0x8c>)
    b33c:	5499      	strb	r1, [r3, r2]

    if( ( MacCtx.NvmCtx->ForceRejoinType == 0 ) || ( MacCtx.NvmCtx->ForceRejoinType == 1 ) )
    b33e:	4a0e      	ldr	r2, [pc, #56]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b340:	239c      	movs	r3, #156	; 0x9c
    b342:	00db      	lsls	r3, r3, #3
    b344:	58d2      	ldr	r2, [r2, r3]
    b346:	238a      	movs	r3, #138	; 0x8a
    b348:	009b      	lsls	r3, r3, #2
    b34a:	5cd3      	ldrb	r3, [r2, r3]
    b34c:	2b00      	cmp	r3, #0
    b34e:	d008      	beq.n	b362 <OnForceRejoinReqCycleTimerEvent+0x72>
    b350:	4a09      	ldr	r2, [pc, #36]	; (b378 <OnForceRejoinReqCycleTimerEvent+0x88>)
    b352:	239c      	movs	r3, #156	; 0x9c
    b354:	00db      	lsls	r3, r3, #3
    b356:	58d2      	ldr	r2, [r2, r3]
    b358:	238a      	movs	r3, #138	; 0x8a
    b35a:	009b      	lsls	r3, r3, #2
    b35c:	5cd3      	ldrb	r3, [r2, r3]
    b35e:	2b01      	cmp	r3, #1
    b360:	d103      	bne.n	b36a <OnForceRejoinReqCycleTimerEvent+0x7a>
    {
        SendReJoinReq( REJOIN_REQ_0 );
    b362:	2000      	movs	r0, #0
    b364:	4b09      	ldr	r3, [pc, #36]	; (b38c <OnForceRejoinReqCycleTimerEvent+0x9c>)
    b366:	4798      	blx	r3
    b368:	e002      	b.n	b370 <OnForceRejoinReqCycleTimerEvent+0x80>
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    b36a:	2002      	movs	r0, #2
    b36c:	4b07      	ldr	r3, [pc, #28]	; (b38c <OnForceRejoinReqCycleTimerEvent+0x9c>)
    b36e:	4798      	blx	r3
    }
}
    b370:	46c0      	nop			; (mov r8, r8)
    b372:	46bd      	mov	sp, r7
    b374:	b002      	add	sp, #8
    b376:	bd80      	pop	{r7, pc}
    b378:	20000b78 	.word	0x20000b78
    b37c:	00000227 	.word	0x00000227
    b380:	00000226 	.word	0x00000226
    b384:	20001034 	.word	0x20001034
    b388:	0001624d 	.word	0x0001624d
    b38c:	00007d7d 	.word	0x00007d7d

0000b390 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
    b390:	b580      	push	{r7, lr}
    b392:	b084      	sub	sp, #16
    b394:	af00      	add	r7, sp, #0
    b396:	0002      	movs	r2, r0
    b398:	1dfb      	adds	r3, r7, #7
    b39a:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
    b39c:	230c      	movs	r3, #12
    b39e:	18fb      	adds	r3, r7, r3
    b3a0:	1dfa      	adds	r2, r7, #7
    b3a2:	7812      	ldrb	r2, [r2, #0]
    b3a4:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
    b3a6:	4a0d      	ldr	r2, [pc, #52]	; (b3dc <LoRaMacTestSetDutyCycleOn+0x4c>)
    b3a8:	239c      	movs	r3, #156	; 0x9c
    b3aa:	00db      	lsls	r3, r3, #3
    b3ac:	58d3      	ldr	r3, [r2, r3]
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	220c      	movs	r2, #12
    b3b2:	18b9      	adds	r1, r7, r2
    b3b4:	220e      	movs	r2, #14
    b3b6:	0018      	movs	r0, r3
    b3b8:	4b09      	ldr	r3, [pc, #36]	; (b3e0 <LoRaMacTestSetDutyCycleOn+0x50>)
    b3ba:	4798      	blx	r3
    b3bc:	1e03      	subs	r3, r0, #0
    b3be:	d008      	beq.n	b3d2 <LoRaMacTestSetDutyCycleOn+0x42>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
    b3c0:	4a06      	ldr	r2, [pc, #24]	; (b3dc <LoRaMacTestSetDutyCycleOn+0x4c>)
    b3c2:	239c      	movs	r3, #156	; 0x9c
    b3c4:	00db      	lsls	r3, r3, #3
    b3c6:	58d2      	ldr	r2, [r2, r3]
    b3c8:	1df9      	adds	r1, r7, #7
    b3ca:	2389      	movs	r3, #137	; 0x89
    b3cc:	005b      	lsls	r3, r3, #1
    b3ce:	7809      	ldrb	r1, [r1, #0]
    b3d0:	54d1      	strb	r1, [r2, r3]
    }
}
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	46bd      	mov	sp, r7
    b3d6:	b004      	add	sp, #16
    b3d8:	bd80      	pop	{r7, pc}
    b3da:	46c0      	nop			; (mov r8, r8)
    b3dc:	20000b78 	.word	0x20000b78
    b3e0:	0000f0d1 	.word	0x0000f0d1

0000b3e4 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    b3e4:	b590      	push	{r4, r7, lr}
    b3e6:	b08b      	sub	sp, #44	; 0x2c
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	60f8      	str	r0, [r7, #12]
    b3ec:	60b9      	str	r1, [r7, #8]
    b3ee:	607a      	str	r2, [r7, #4]
    b3f0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
    b3f2:	2327      	movs	r3, #39	; 0x27
    b3f4:	18fb      	adds	r3, r7, r3
    b3f6:	2200      	movs	r2, #0
    b3f8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
    b3fa:	2326      	movs	r3, #38	; 0x26
    b3fc:	18fb      	adds	r3, r7, r3
    b3fe:	68fa      	ldr	r2, [r7, #12]
    b400:	7c12      	ldrb	r2, [r2, #16]
    b402:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
    b404:	2325      	movs	r3, #37	; 0x25
    b406:	18fb      	adds	r3, r7, r3
    b408:	68fa      	ldr	r2, [r7, #12]
    b40a:	7c52      	ldrb	r2, [r2, #17]
    b40c:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
    b40e:	68fb      	ldr	r3, [r7, #12]
    b410:	689a      	ldr	r2, [r3, #8]
    b412:	683b      	ldr	r3, [r7, #0]
    b414:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
    b416:	68fb      	ldr	r3, [r7, #12]
    b418:	795b      	ldrb	r3, [r3, #5]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d100      	bne.n	b420 <CalcNextV10X+0x3c>
    b41e:	e0b6      	b.n	b58e <CalcNextV10X+0x1aa>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
    b420:	2320      	movs	r3, #32
    b422:	18fb      	adds	r3, r7, r3
    b424:	2201      	movs	r2, #1
    b426:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    b428:	68fb      	ldr	r3, [r7, #12]
    b42a:	7c9a      	ldrb	r2, [r3, #18]
    b42c:	2320      	movs	r3, #32
    b42e:	18fb      	adds	r3, r7, r3
    b430:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b432:	68fb      	ldr	r3, [r7, #12]
    b434:	7cdb      	ldrb	r3, [r3, #19]
    b436:	2220      	movs	r2, #32
    b438:	18ba      	adds	r2, r7, r2
    b43a:	0011      	movs	r1, r2
    b43c:	0018      	movs	r0, r3
    b43e:	4b5c      	ldr	r3, [pc, #368]	; (b5b0 <CalcNextV10X+0x1cc>)
    b440:	4798      	blx	r3
    b442:	0003      	movs	r3, r0
    b444:	001a      	movs	r2, r3
    b446:	231c      	movs	r3, #28
    b448:	18fb      	adds	r3, r7, r3
    b44a:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
    b44c:	231c      	movs	r3, #28
    b44e:	18fb      	adds	r3, r7, r3
    b450:	681a      	ldr	r2, [r3, #0]
    b452:	2324      	movs	r3, #36	; 0x24
    b454:	18fb      	adds	r3, r7, r3
    b456:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
    b458:	2326      	movs	r3, #38	; 0x26
    b45a:	18fa      	adds	r2, r7, r3
    b45c:	2324      	movs	r3, #36	; 0x24
    b45e:	18fb      	adds	r3, r7, r3
    b460:	2126      	movs	r1, #38	; 0x26
    b462:	1879      	adds	r1, r7, r1
    b464:	780c      	ldrb	r4, [r1, #0]
    b466:	781b      	ldrb	r3, [r3, #0]
    b468:	b258      	sxtb	r0, r3
    b46a:	b261      	sxtb	r1, r4
    b46c:	4288      	cmp	r0, r1
    b46e:	da00      	bge.n	b472 <CalcNextV10X+0x8e>
    b470:	1c23      	adds	r3, r4, #0
    b472:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
    b474:	2326      	movs	r3, #38	; 0x26
    b476:	18fa      	adds	r2, r7, r3
    b478:	2324      	movs	r3, #36	; 0x24
    b47a:	18fb      	adds	r3, r7, r3
    b47c:	7812      	ldrb	r2, [r2, #0]
    b47e:	b252      	sxtb	r2, r2
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	b25b      	sxtb	r3, r3
    b484:	429a      	cmp	r2, r3
    b486:	d107      	bne.n	b498 <CalcNextV10X+0xb4>
        {
            *adrAckCounter = 0;
    b488:	683b      	ldr	r3, [r7, #0]
    b48a:	2200      	movs	r2, #0
    b48c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
    b48e:	2327      	movs	r3, #39	; 0x27
    b490:	18fb      	adds	r3, r7, r3
    b492:	2200      	movs	r2, #0
    b494:	701a      	strb	r2, [r3, #0]
    b496:	e07a      	b.n	b58e <CalcNextV10X+0x1aa>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
    b498:	68fb      	ldr	r3, [r7, #12]
    b49a:	689b      	ldr	r3, [r3, #8]
    b49c:	68fa      	ldr	r2, [r7, #12]
    b49e:	8992      	ldrh	r2, [r2, #12]
    b4a0:	4293      	cmp	r3, r2
    b4a2:	d31b      	bcc.n	b4dc <CalcNextV10X+0xf8>
            {
                adrAckReq = true;
    b4a4:	2327      	movs	r3, #39	; 0x27
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	2201      	movs	r2, #1
    b4aa:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
    b4ac:	2320      	movs	r3, #32
    b4ae:	18fb      	adds	r3, r7, r3
    b4b0:	2207      	movs	r2, #7
    b4b2:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b4b4:	68fb      	ldr	r3, [r7, #12]
    b4b6:	7cdb      	ldrb	r3, [r3, #19]
    b4b8:	2220      	movs	r2, #32
    b4ba:	18ba      	adds	r2, r7, r2
    b4bc:	0011      	movs	r1, r2
    b4be:	0018      	movs	r0, r3
    b4c0:	4b3b      	ldr	r3, [pc, #236]	; (b5b0 <CalcNextV10X+0x1cc>)
    b4c2:	4798      	blx	r3
    b4c4:	0003      	movs	r3, r0
    b4c6:	001a      	movs	r2, r3
    b4c8:	231c      	movs	r3, #28
    b4ca:	18fb      	adds	r3, r7, r3
    b4cc:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
    b4ce:	231c      	movs	r3, #28
    b4d0:	18fb      	adds	r3, r7, r3
    b4d2:	681a      	ldr	r2, [r3, #0]
    b4d4:	2325      	movs	r3, #37	; 0x25
    b4d6:	18fb      	adds	r3, r7, r3
    b4d8:	701a      	strb	r2, [r3, #0]
    b4da:	e003      	b.n	b4e4 <CalcNextV10X+0x100>
            }
            else
            {
                adrAckReq = false;
    b4dc:	2327      	movs	r3, #39	; 0x27
    b4de:	18fb      	adds	r3, r7, r3
    b4e0:	2200      	movs	r2, #0
    b4e2:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    b4e4:	68fb      	ldr	r3, [r7, #12]
    b4e6:	689b      	ldr	r3, [r3, #8]
    b4e8:	68fa      	ldr	r2, [r7, #12]
    b4ea:	8992      	ldrh	r2, [r2, #12]
    b4ec:	0011      	movs	r1, r2
    b4ee:	68fa      	ldr	r2, [r7, #12]
    b4f0:	89d2      	ldrh	r2, [r2, #14]
    b4f2:	188a      	adds	r2, r1, r2
    b4f4:	4293      	cmp	r3, r2
    b4f6:	d34a      	bcc.n	b58e <CalcNextV10X+0x1aa>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    b4f8:	68fb      	ldr	r3, [r7, #12]
    b4fa:	689a      	ldr	r2, [r3, #8]
    b4fc:	68fb      	ldr	r3, [r7, #12]
    b4fe:	89db      	ldrh	r3, [r3, #14]
    b500:	0019      	movs	r1, r3
    b502:	4b2c      	ldr	r3, [pc, #176]	; (b5b4 <CalcNextV10X+0x1d0>)
    b504:	0010      	movs	r0, r2
    b506:	4798      	blx	r3
    b508:	000b      	movs	r3, r1
    b50a:	2b01      	cmp	r3, #1
    b50c:	d13f      	bne.n	b58e <CalcNextV10X+0x1aa>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    b50e:	2320      	movs	r3, #32
    b510:	18fb      	adds	r3, r7, r3
    b512:	2221      	movs	r2, #33	; 0x21
    b514:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
    b516:	2320      	movs	r3, #32
    b518:	18fb      	adds	r3, r7, r3
    b51a:	2226      	movs	r2, #38	; 0x26
    b51c:	18ba      	adds	r2, r7, r2
    b51e:	7812      	ldrb	r2, [r2, #0]
    b520:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    b522:	68fb      	ldr	r3, [r7, #12]
    b524:	7c9a      	ldrb	r2, [r3, #18]
    b526:	2320      	movs	r3, #32
    b528:	18fb      	adds	r3, r7, r3
    b52a:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b52c:	68fb      	ldr	r3, [r7, #12]
    b52e:	7cdb      	ldrb	r3, [r3, #19]
    b530:	2220      	movs	r2, #32
    b532:	18ba      	adds	r2, r7, r2
    b534:	0011      	movs	r1, r2
    b536:	0018      	movs	r0, r3
    b538:	4b1d      	ldr	r3, [pc, #116]	; (b5b0 <CalcNextV10X+0x1cc>)
    b53a:	4798      	blx	r3
    b53c:	0003      	movs	r3, r0
    b53e:	001a      	movs	r2, r3
    b540:	231c      	movs	r3, #28
    b542:	18fb      	adds	r3, r7, r3
    b544:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
    b546:	231c      	movs	r3, #28
    b548:	18fb      	adds	r3, r7, r3
    b54a:	681a      	ldr	r2, [r3, #0]
    b54c:	2326      	movs	r3, #38	; 0x26
    b54e:	18fb      	adds	r3, r7, r3
    b550:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
    b552:	2326      	movs	r3, #38	; 0x26
    b554:	18fa      	adds	r2, r7, r3
    b556:	2324      	movs	r3, #36	; 0x24
    b558:	18fb      	adds	r3, r7, r3
    b55a:	7812      	ldrb	r2, [r2, #0]
    b55c:	b252      	sxtb	r2, r2
    b55e:	781b      	ldrb	r3, [r3, #0]
    b560:	b25b      	sxtb	r3, r3
    b562:	429a      	cmp	r2, r3
    b564:	d113      	bne.n	b58e <CalcNextV10X+0x1aa>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
    b566:	2327      	movs	r3, #39	; 0x27
    b568:	18fb      	adds	r3, r7, r3
    b56a:	2200      	movs	r2, #0
    b56c:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
    b56e:	68fb      	ldr	r3, [r7, #12]
    b570:	791b      	ldrb	r3, [r3, #4]
    b572:	2b00      	cmp	r3, #0
    b574:	d00b      	beq.n	b58e <CalcNextV10X+0x1aa>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    b576:	2314      	movs	r3, #20
    b578:	18fb      	adds	r3, r7, r3
    b57a:	2201      	movs	r2, #1
    b57c:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    b57e:	68fb      	ldr	r3, [r7, #12]
    b580:	7cdb      	ldrb	r3, [r3, #19]
    b582:	2214      	movs	r2, #20
    b584:	18ba      	adds	r2, r7, r2
    b586:	0011      	movs	r1, r2
    b588:	0018      	movs	r0, r3
    b58a:	4b0b      	ldr	r3, [pc, #44]	; (b5b8 <CalcNextV10X+0x1d4>)
    b58c:	4798      	blx	r3
                }
            }
        }
    }

    *drOut = datarate;
    b58e:	68bb      	ldr	r3, [r7, #8]
    b590:	2226      	movs	r2, #38	; 0x26
    b592:	18ba      	adds	r2, r7, r2
    b594:	7812      	ldrb	r2, [r2, #0]
    b596:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	2225      	movs	r2, #37	; 0x25
    b59c:	18ba      	adds	r2, r7, r2
    b59e:	7812      	ldrb	r2, [r2, #0]
    b5a0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
    b5a2:	2327      	movs	r3, #39	; 0x27
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	781b      	ldrb	r3, [r3, #0]
}
    b5a8:	0018      	movs	r0, r3
    b5aa:	46bd      	mov	sp, r7
    b5ac:	b00b      	add	sp, #44	; 0x2c
    b5ae:	bd90      	pop	{r4, r7, pc}
    b5b0:	0000eff1 	.word	0x0000eff1
    b5b4:	00017c59 	.word	0x00017c59
    b5b8:	0000f071 	.word	0x0000f071

0000b5bc <CalcNextV11X>:

static bool CalcNextV11X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    b5bc:	b590      	push	{r4, r7, lr}
    b5be:	b08b      	sub	sp, #44	; 0x2c
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	60f8      	str	r0, [r7, #12]
    b5c4:	60b9      	str	r1, [r7, #8]
    b5c6:	607a      	str	r2, [r7, #4]
    b5c8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
    b5ca:	2327      	movs	r3, #39	; 0x27
    b5cc:	18fb      	adds	r3, r7, r3
    b5ce:	2200      	movs	r2, #0
    b5d0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
    b5d2:	2326      	movs	r3, #38	; 0x26
    b5d4:	18fb      	adds	r3, r7, r3
    b5d6:	68fa      	ldr	r2, [r7, #12]
    b5d8:	7c12      	ldrb	r2, [r2, #16]
    b5da:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
    b5dc:	2325      	movs	r3, #37	; 0x25
    b5de:	18fb      	adds	r3, r7, r3
    b5e0:	68fa      	ldr	r2, [r7, #12]
    b5e2:	7c52      	ldrb	r2, [r2, #17]
    b5e4:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
    b5e6:	68fb      	ldr	r3, [r7, #12]
    b5e8:	689a      	ldr	r2, [r3, #8]
    b5ea:	683b      	ldr	r3, [r7, #0]
    b5ec:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
    b5ee:	68fb      	ldr	r3, [r7, #12]
    b5f0:	795b      	ldrb	r3, [r3, #5]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d100      	bne.n	b5f8 <CalcNextV11X+0x3c>
    b5f6:	e0bf      	b.n	b778 <CalcNextV11X+0x1bc>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
    b5f8:	2320      	movs	r3, #32
    b5fa:	18fb      	adds	r3, r7, r3
    b5fc:	2201      	movs	r2, #1
    b5fe:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    b600:	68fb      	ldr	r3, [r7, #12]
    b602:	7c9a      	ldrb	r2, [r3, #18]
    b604:	2320      	movs	r3, #32
    b606:	18fb      	adds	r3, r7, r3
    b608:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b60a:	68fb      	ldr	r3, [r7, #12]
    b60c:	7cdb      	ldrb	r3, [r3, #19]
    b60e:	2220      	movs	r2, #32
    b610:	18ba      	adds	r2, r7, r2
    b612:	0011      	movs	r1, r2
    b614:	0018      	movs	r0, r3
    b616:	4b61      	ldr	r3, [pc, #388]	; (b79c <CalcNextV11X+0x1e0>)
    b618:	4798      	blx	r3
    b61a:	0003      	movs	r3, r0
    b61c:	001a      	movs	r2, r3
    b61e:	231c      	movs	r3, #28
    b620:	18fb      	adds	r3, r7, r3
    b622:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
    b624:	231c      	movs	r3, #28
    b626:	18fb      	adds	r3, r7, r3
    b628:	681a      	ldr	r2, [r3, #0]
    b62a:	2324      	movs	r3, #36	; 0x24
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
    b630:	2326      	movs	r3, #38	; 0x26
    b632:	18fa      	adds	r2, r7, r3
    b634:	2324      	movs	r3, #36	; 0x24
    b636:	18fb      	adds	r3, r7, r3
    b638:	2126      	movs	r1, #38	; 0x26
    b63a:	1879      	adds	r1, r7, r1
    b63c:	780c      	ldrb	r4, [r1, #0]
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	b258      	sxtb	r0, r3
    b642:	b261      	sxtb	r1, r4
    b644:	4288      	cmp	r0, r1
    b646:	da00      	bge.n	b64a <CalcNextV11X+0x8e>
    b648:	1c23      	adds	r3, r4, #0
    b64a:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
    b64c:	2326      	movs	r3, #38	; 0x26
    b64e:	18fa      	adds	r2, r7, r3
    b650:	2324      	movs	r3, #36	; 0x24
    b652:	18fb      	adds	r3, r7, r3
    b654:	7812      	ldrb	r2, [r2, #0]
    b656:	b252      	sxtb	r2, r2
    b658:	781b      	ldrb	r3, [r3, #0]
    b65a:	b25b      	sxtb	r3, r3
    b65c:	429a      	cmp	r2, r3
    b65e:	d107      	bne.n	b670 <CalcNextV11X+0xb4>
        {
            *adrAckCounter = 0;
    b660:	683b      	ldr	r3, [r7, #0]
    b662:	2200      	movs	r2, #0
    b664:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
    b666:	2327      	movs	r3, #39	; 0x27
    b668:	18fb      	adds	r3, r7, r3
    b66a:	2200      	movs	r2, #0
    b66c:	701a      	strb	r2, [r3, #0]
    b66e:	e009      	b.n	b684 <CalcNextV11X+0xc8>
        }
        else
        {
            if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
    b670:	68fb      	ldr	r3, [r7, #12]
    b672:	689b      	ldr	r3, [r3, #8]
    b674:	68fa      	ldr	r2, [r7, #12]
    b676:	8992      	ldrh	r2, [r2, #12]
    b678:	4293      	cmp	r3, r2
    b67a:	d303      	bcc.n	b684 <CalcNextV11X+0xc8>
            {
                adrAckReq = true;
    b67c:	2327      	movs	r3, #39	; 0x27
    b67e:	18fb      	adds	r3, r7, r3
    b680:	2201      	movs	r2, #1
    b682:	701a      	strb	r2, [r3, #0]
            }
        }

        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
    b684:	68fb      	ldr	r3, [r7, #12]
    b686:	689b      	ldr	r3, [r3, #8]
    b688:	68fa      	ldr	r2, [r7, #12]
    b68a:	8992      	ldrh	r2, [r2, #12]
    b68c:	0011      	movs	r1, r2
    b68e:	68fa      	ldr	r2, [r7, #12]
    b690:	89d2      	ldrh	r2, [r2, #14]
    b692:	188a      	adds	r2, r1, r2
    b694:	4293      	cmp	r3, r2
    b696:	d36f      	bcc.n	b778 <CalcNextV11X+0x1bc>
        {
            if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + adrNext->AdrAckDelay + adrNext->AdrAckDelay ) )
    b698:	68fb      	ldr	r3, [r7, #12]
    b69a:	689b      	ldr	r3, [r3, #8]
    b69c:	68fa      	ldr	r2, [r7, #12]
    b69e:	8992      	ldrh	r2, [r2, #12]
    b6a0:	0011      	movs	r1, r2
    b6a2:	68fa      	ldr	r2, [r7, #12]
    b6a4:	89d2      	ldrh	r2, [r2, #14]
    b6a6:	188a      	adds	r2, r1, r2
    b6a8:	68f9      	ldr	r1, [r7, #12]
    b6aa:	89c9      	ldrh	r1, [r1, #14]
    b6ac:	1852      	adds	r2, r2, r1
    b6ae:	4293      	cmp	r3, r2
    b6b0:	d34b      	bcc.n	b74a <CalcNextV11X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
    b6b2:	68fb      	ldr	r3, [r7, #12]
    b6b4:	689a      	ldr	r2, [r3, #8]
    b6b6:	68fb      	ldr	r3, [r7, #12]
    b6b8:	89db      	ldrh	r3, [r3, #14]
    b6ba:	0019      	movs	r1, r3
    b6bc:	4b38      	ldr	r3, [pc, #224]	; (b7a0 <CalcNextV11X+0x1e4>)
    b6be:	0010      	movs	r0, r2
    b6c0:	4798      	blx	r3
    b6c2:	000b      	movs	r3, r1
    b6c4:	2b01      	cmp	r3, #1
    b6c6:	d157      	bne.n	b778 <CalcNextV11X+0x1bc>
                {
                    if( datarate == minTxDatarate )
    b6c8:	2326      	movs	r3, #38	; 0x26
    b6ca:	18fa      	adds	r2, r7, r3
    b6cc:	2324      	movs	r3, #36	; 0x24
    b6ce:	18fb      	adds	r3, r7, r3
    b6d0:	7812      	ldrb	r2, [r2, #0]
    b6d2:	b252      	sxtb	r2, r2
    b6d4:	781b      	ldrb	r3, [r3, #0]
    b6d6:	b25b      	sxtb	r3, r3
    b6d8:	429a      	cmp	r2, r3
    b6da:	d113      	bne.n	b704 <CalcNextV11X+0x148>
                    {
                        // Unset adrAckReq as soon as we sent ADR_ACK_DELAY times with  the lowest datarate
                        adrAckReq = false;
    b6dc:	2327      	movs	r3, #39	; 0x27
    b6de:	18fb      	adds	r3, r7, r3
    b6e0:	2200      	movs	r2, #0
    b6e2:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
    b6e4:	68fb      	ldr	r3, [r7, #12]
    b6e6:	791b      	ldrb	r3, [r3, #4]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d00b      	beq.n	b704 <CalcNextV11X+0x148>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
    b6ec:	2314      	movs	r3, #20
    b6ee:	18fb      	adds	r3, r7, r3
    b6f0:	2201      	movs	r2, #1
    b6f2:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
    b6f4:	68fb      	ldr	r3, [r7, #12]
    b6f6:	7cdb      	ldrb	r3, [r3, #19]
    b6f8:	2214      	movs	r2, #20
    b6fa:	18ba      	adds	r2, r7, r2
    b6fc:	0011      	movs	r1, r2
    b6fe:	0018      	movs	r0, r3
    b700:	4b28      	ldr	r3, [pc, #160]	; (b7a4 <CalcNextV11X+0x1e8>)
    b702:	4798      	blx	r3
                        }
                    }

                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
    b704:	2320      	movs	r3, #32
    b706:	18fb      	adds	r3, r7, r3
    b708:	2221      	movs	r2, #33	; 0x21
    b70a:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
    b70c:	2320      	movs	r3, #32
    b70e:	18fb      	adds	r3, r7, r3
    b710:	2226      	movs	r2, #38	; 0x26
    b712:	18ba      	adds	r2, r7, r2
    b714:	7812      	ldrb	r2, [r2, #0]
    b716:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
    b718:	68fb      	ldr	r3, [r7, #12]
    b71a:	7c9a      	ldrb	r2, [r3, #18]
    b71c:	2320      	movs	r3, #32
    b71e:	18fb      	adds	r3, r7, r3
    b720:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b722:	68fb      	ldr	r3, [r7, #12]
    b724:	7cdb      	ldrb	r3, [r3, #19]
    b726:	2220      	movs	r2, #32
    b728:	18ba      	adds	r2, r7, r2
    b72a:	0011      	movs	r1, r2
    b72c:	0018      	movs	r0, r3
    b72e:	4b1b      	ldr	r3, [pc, #108]	; (b79c <CalcNextV11X+0x1e0>)
    b730:	4798      	blx	r3
    b732:	0003      	movs	r3, r0
    b734:	001a      	movs	r2, r3
    b736:	231c      	movs	r3, #28
    b738:	18fb      	adds	r3, r7, r3
    b73a:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
    b73c:	231c      	movs	r3, #28
    b73e:	18fb      	adds	r3, r7, r3
    b740:	681a      	ldr	r2, [r3, #0]
    b742:	2326      	movs	r3, #38	; 0x26
    b744:	18fb      	adds	r3, r7, r3
    b746:	701a      	strb	r2, [r3, #0]
    b748:	e016      	b.n	b778 <CalcNextV11X+0x1bc>
                }
            }
            else
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
    b74a:	2320      	movs	r3, #32
    b74c:	18fb      	adds	r3, r7, r3
    b74e:	2207      	movs	r2, #7
    b750:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
    b752:	68fb      	ldr	r3, [r7, #12]
    b754:	7cdb      	ldrb	r3, [r3, #19]
    b756:	2220      	movs	r2, #32
    b758:	18ba      	adds	r2, r7, r2
    b75a:	0011      	movs	r1, r2
    b75c:	0018      	movs	r0, r3
    b75e:	4b0f      	ldr	r3, [pc, #60]	; (b79c <CalcNextV11X+0x1e0>)
    b760:	4798      	blx	r3
    b762:	0003      	movs	r3, r0
    b764:	001a      	movs	r2, r3
    b766:	231c      	movs	r3, #28
    b768:	18fb      	adds	r3, r7, r3
    b76a:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
    b76c:	231c      	movs	r3, #28
    b76e:	18fb      	adds	r3, r7, r3
    b770:	681a      	ldr	r2, [r3, #0]
    b772:	2325      	movs	r3, #37	; 0x25
    b774:	18fb      	adds	r3, r7, r3
    b776:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    *drOut = datarate;
    b778:	68bb      	ldr	r3, [r7, #8]
    b77a:	2226      	movs	r2, #38	; 0x26
    b77c:	18ba      	adds	r2, r7, r2
    b77e:	7812      	ldrb	r2, [r2, #0]
    b780:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
    b782:	687b      	ldr	r3, [r7, #4]
    b784:	2225      	movs	r2, #37	; 0x25
    b786:	18ba      	adds	r2, r7, r2
    b788:	7812      	ldrb	r2, [r2, #0]
    b78a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
    b78c:	2327      	movs	r3, #39	; 0x27
    b78e:	18fb      	adds	r3, r7, r3
    b790:	781b      	ldrb	r3, [r3, #0]
}
    b792:	0018      	movs	r0, r3
    b794:	46bd      	mov	sp, r7
    b796:	b00b      	add	sp, #44	; 0x2c
    b798:	bd90      	pop	{r4, r7, pc}
    b79a:	46c0      	nop			; (mov r8, r8)
    b79c:	0000eff1 	.word	0x0000eff1
    b7a0:	00017c59 	.word	0x00017c59
    b7a4:	0000f071 	.word	0x0000f071

0000b7a8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
    b7a8:	b590      	push	{r4, r7, lr}
    b7aa:	b085      	sub	sp, #20
    b7ac:	af00      	add	r7, sp, #0
    b7ae:	60f8      	str	r0, [r7, #12]
    b7b0:	60b9      	str	r1, [r7, #8]
    b7b2:	607a      	str	r2, [r7, #4]
    b7b4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
    b7b6:	68fb      	ldr	r3, [r7, #12]
    b7b8:	789b      	ldrb	r3, [r3, #2]
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	d107      	bne.n	b7ce <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    b7be:	683b      	ldr	r3, [r7, #0]
    b7c0:	687a      	ldr	r2, [r7, #4]
    b7c2:	68b9      	ldr	r1, [r7, #8]
    b7c4:	68f8      	ldr	r0, [r7, #12]
    b7c6:	4c07      	ldr	r4, [pc, #28]	; (b7e4 <LoRaMacAdrCalcNext+0x3c>)
    b7c8:	47a0      	blx	r4
    b7ca:	0003      	movs	r3, r0
    b7cc:	e006      	b.n	b7dc <LoRaMacAdrCalcNext+0x34>
    }
    else
    {
        return CalcNextV11X( adrNext, drOut, txPowOut, adrAckCounter );
    b7ce:	683b      	ldr	r3, [r7, #0]
    b7d0:	687a      	ldr	r2, [r7, #4]
    b7d2:	68b9      	ldr	r1, [r7, #8]
    b7d4:	68f8      	ldr	r0, [r7, #12]
    b7d6:	4c04      	ldr	r4, [pc, #16]	; (b7e8 <LoRaMacAdrCalcNext+0x40>)
    b7d8:	47a0      	blx	r4
    b7da:	0003      	movs	r3, r0
    }
}
    b7dc:	0018      	movs	r0, r3
    b7de:	46bd      	mov	sp, r7
    b7e0:	b005      	add	sp, #20
    b7e2:	bd90      	pop	{r4, r7, pc}
    b7e4:	0000b3e5 	.word	0x0000b3e5
    b7e8:	0000b5bd 	.word	0x0000b5bd

0000b7ec <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
    b7ec:	b580      	push	{r7, lr}
    b7ee:	b084      	sub	sp, #16
    b7f0:	af00      	add	r7, sp, #0
    b7f2:	60f8      	str	r0, [r7, #12]
    b7f4:	60b9      	str	r1, [r7, #8]
    b7f6:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b7f8:	46c0      	nop			; (mov r8, r8)
    b7fa:	46bd      	mov	sp, r7
    b7fc:	b004      	add	sp, #16
    b7fe:	bd80      	pop	{r7, pc}

0000b800 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
    b800:	b580      	push	{r7, lr}
    b802:	b082      	sub	sp, #8
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
    b808:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
    b80a:	0018      	movs	r0, r3
    b80c:	46bd      	mov	sp, r7
    b80e:	b002      	add	sp, #8
    b810:	bd80      	pop	{r7, pc}

0000b812 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
    b812:	b580      	push	{r7, lr}
    b814:	b082      	sub	sp, #8
    b816:	af00      	add	r7, sp, #0
    b818:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
    b81a:	687b      	ldr	r3, [r7, #4]
    b81c:	2200      	movs	r2, #0
    b81e:	601a      	str	r2, [r3, #0]
    return NULL;
    b820:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b822:	0018      	movs	r0, r3
    b824:	46bd      	mov	sp, r7
    b826:	b002      	add	sp, #8
    b828:	bd80      	pop	{r7, pc}

0000b82a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
    b82a:	b580      	push	{r7, lr}
    b82c:	b082      	sub	sp, #8
    b82e:	af00      	add	r7, sp, #0
    b830:	0002      	movs	r2, r0
    b832:	1dfb      	adds	r3, r7, #7
    b834:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
    b836:	46c0      	nop			; (mov r8, r8)
    b838:	46bd      	mov	sp, r7
    b83a:	b002      	add	sp, #8
    b83c:	bd80      	pop	{r7, pc}

0000b83e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
    b83e:	b580      	push	{r7, lr}
    b840:	b082      	sub	sp, #8
    b842:	af00      	add	r7, sp, #0
    b844:	0002      	movs	r2, r0
    b846:	1dfb      	adds	r3, r7, #7
    b848:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b84a:	46c0      	nop			; (mov r8, r8)
    b84c:	46bd      	mov	sp, r7
    b84e:	b002      	add	sp, #8
    b850:	bd80      	pop	{r7, pc}

0000b852 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
    b852:	b580      	push	{r7, lr}
    b854:	b082      	sub	sp, #8
    b856:	af00      	add	r7, sp, #0
    b858:	0002      	movs	r2, r0
    b85a:	1dfb      	adds	r3, r7, #7
    b85c:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b85e:	46c0      	nop			; (mov r8, r8)
    b860:	46bd      	mov	sp, r7
    b862:	b002      	add	sp, #8
    b864:	bd80      	pop	{r7, pc}

0000b866 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
    b866:	b580      	push	{r7, lr}
    b868:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
    b86a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b86c:	0018      	movs	r0, r3
    b86e:	46bd      	mov	sp, r7
    b870:	bd80      	pop	{r7, pc}

0000b872 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
    b872:	b580      	push	{r7, lr}
    b874:	b082      	sub	sp, #8
    b876:	af00      	add	r7, sp, #0
    b878:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b87a:	46c0      	nop			; (mov r8, r8)
    b87c:	46bd      	mov	sp, r7
    b87e:	b002      	add	sp, #8
    b880:	bd80      	pop	{r7, pc}

0000b882 <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
    b882:	b580      	push	{r7, lr}
    b884:	b082      	sub	sp, #8
    b886:	af00      	add	r7, sp, #0
    b888:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b88a:	46c0      	nop			; (mov r8, r8)
    b88c:	46bd      	mov	sp, r7
    b88e:	b002      	add	sp, #8
    b890:	bd80      	pop	{r7, pc}

0000b892 <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
    b892:	b580      	push	{r7, lr}
    b894:	b082      	sub	sp, #8
    b896:	af00      	add	r7, sp, #0
    b898:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b89a:	46c0      	nop			; (mov r8, r8)
    b89c:	46bd      	mov	sp, r7
    b89e:	b002      	add	sp, #8
    b8a0:	bd80      	pop	{r7, pc}

0000b8a2 <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
    b8a2:	b580      	push	{r7, lr}
    b8a4:	b082      	sub	sp, #8
    b8a6:	af00      	add	r7, sp, #0
    b8a8:	6078      	str	r0, [r7, #4]
    b8aa:	000a      	movs	r2, r1
    b8ac:	1cbb      	adds	r3, r7, #2
    b8ae:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
    b8b0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b8b2:	0018      	movs	r0, r3
    b8b4:	46bd      	mov	sp, r7
    b8b6:	b002      	add	sp, #8
    b8b8:	bd80      	pop	{r7, pc}

0000b8ba <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
    b8ba:	b580      	push	{r7, lr}
    b8bc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    b8be:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b8c0:	0018      	movs	r0, r3
    b8c2:	46bd      	mov	sp, r7
    b8c4:	bd80      	pop	{r7, pc}

0000b8c6 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
    b8c6:	b580      	push	{r7, lr}
    b8c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    b8ca:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b8cc:	0018      	movs	r0, r3
    b8ce:	46bd      	mov	sp, r7
    b8d0:	bd80      	pop	{r7, pc}

0000b8d2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
    b8d2:	b580      	push	{r7, lr}
    b8d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    b8d6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b8d8:	0018      	movs	r0, r3
    b8da:	46bd      	mov	sp, r7
    b8dc:	bd80      	pop	{r7, pc}

0000b8de <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
    b8de:	b580      	push	{r7, lr}
    b8e0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
    b8e2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b8e4:	0018      	movs	r0, r3
    b8e6:	46bd      	mov	sp, r7
    b8e8:	bd80      	pop	{r7, pc}

0000b8ea <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
    b8ea:	b580      	push	{r7, lr}
    b8ec:	b082      	sub	sp, #8
    b8ee:	af00      	add	r7, sp, #0
    b8f0:	0002      	movs	r2, r0
    b8f2:	1dfb      	adds	r3, r7, #7
    b8f4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b8f6:	46c0      	nop			; (mov r8, r8)
    b8f8:	46bd      	mov	sp, r7
    b8fa:	b002      	add	sp, #8
    b8fc:	bd80      	pop	{r7, pc}

0000b8fe <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
    b8fe:	b580      	push	{r7, lr}
    b900:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	46bd      	mov	sp, r7
    b906:	bd80      	pop	{r7, pc}

0000b908 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
    b908:	b580      	push	{r7, lr}
    b90a:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b90c:	46c0      	nop			; (mov r8, r8)
    b90e:	46bd      	mov	sp, r7
    b910:	bd80      	pop	{r7, pc}

0000b912 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
    b912:	b580      	push	{r7, lr}
    b914:	b082      	sub	sp, #8
    b916:	af00      	add	r7, sp, #0
    b918:	0002      	movs	r2, r0
    b91a:	1dfb      	adds	r3, r7, #7
    b91c:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    b91e:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    b920:	0018      	movs	r0, r3
    b922:	46bd      	mov	sp, r7
    b924:	b002      	add	sp, #8
    b926:	bd80      	pop	{r7, pc}

0000b928 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
    b928:	b580      	push	{r7, lr}
    b92a:	b082      	sub	sp, #8
    b92c:	af00      	add	r7, sp, #0
    b92e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    b930:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    b932:	0018      	movs	r0, r3
    b934:	46bd      	mov	sp, r7
    b936:	b002      	add	sp, #8
    b938:	bd80      	pop	{r7, pc}

0000b93a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
    b93a:	b580      	push	{r7, lr}
    b93c:	b082      	sub	sp, #8
    b93e:	af00      	add	r7, sp, #0
    b940:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
    b942:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
    b944:	0018      	movs	r0, r3
    b946:	46bd      	mov	sp, r7
    b948:	b002      	add	sp, #8
    b94a:	bd80      	pop	{r7, pc}

0000b94c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
    b94c:	b580      	push	{r7, lr}
    b94e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b950:	46c0      	nop			; (mov r8, r8)
    b952:	46bd      	mov	sp, r7
    b954:	bd80      	pop	{r7, pc}

0000b956 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
    b956:	b580      	push	{r7, lr}
    b958:	b082      	sub	sp, #8
    b95a:	af00      	add	r7, sp, #0
    b95c:	0002      	movs	r2, r0
    b95e:	6039      	str	r1, [r7, #0]
    b960:	1dfb      	adds	r3, r7, #7
    b962:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
    b964:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b966:	0018      	movs	r0, r3
    b968:	46bd      	mov	sp, r7
    b96a:	b002      	add	sp, #8
    b96c:	bd80      	pop	{r7, pc}

0000b96e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
    b96e:	b580      	push	{r7, lr}
    b970:	b082      	sub	sp, #8
    b972:	af00      	add	r7, sp, #0
    b974:	603a      	str	r2, [r7, #0]
    b976:	1dbb      	adds	r3, r7, #6
    b978:	1c02      	adds	r2, r0, #0
    b97a:	801a      	strh	r2, [r3, #0]
    b97c:	1d7b      	adds	r3, r7, #5
    b97e:	1c0a      	adds	r2, r1, #0
    b980:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b982:	46c0      	nop			; (mov r8, r8)
    b984:	46bd      	mov	sp, r7
    b986:	b002      	add	sp, #8
    b988:	bd80      	pop	{r7, pc}

0000b98a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
    b98a:	b580      	push	{r7, lr}
    b98c:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b98e:	46c0      	nop			; (mov r8, r8)
    b990:	46bd      	mov	sp, r7
    b992:	bd80      	pop	{r7, pc}

0000b994 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
    b994:	b580      	push	{r7, lr}
    b996:	b082      	sub	sp, #8
    b998:	af00      	add	r7, sp, #0
    b99a:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
    b99c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b99e:	0018      	movs	r0, r3
    b9a0:	46bd      	mov	sp, r7
    b9a2:	b002      	add	sp, #8
    b9a4:	bd80      	pop	{r7, pc}

0000b9a6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
    b9a6:	b580      	push	{r7, lr}
    b9a8:	b082      	sub	sp, #8
    b9aa:	af00      	add	r7, sp, #0
    b9ac:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
    b9ae:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
    b9b0:	0018      	movs	r0, r3
    b9b2:	46bd      	mov	sp, r7
    b9b4:	b002      	add	sp, #8
    b9b6:	bd80      	pop	{r7, pc}

0000b9b8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
    b9b8:	b580      	push	{r7, lr}
    b9ba:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
    b9bc:	46c0      	nop			; (mov r8, r8)
    b9be:	46bd      	mov	sp, r7
    b9c0:	bd80      	pop	{r7, pc}

0000b9c2 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
    b9c2:	b580      	push	{r7, lr}
    b9c4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
    b9c6:	46c0      	nop			; (mov r8, r8)
    b9c8:	46bd      	mov	sp, r7
    b9ca:	bd80      	pop	{r7, pc}

0000b9cc <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
    b9cc:	b580      	push	{r7, lr}
    b9ce:	b084      	sub	sp, #16
    b9d0:	af00      	add	r7, sp, #0
    b9d2:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
    b9d4:	687b      	ldr	r3, [r7, #4]
    b9d6:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
    b9d8:	230e      	movs	r3, #14
    b9da:	18fb      	adds	r3, r7, r3
    b9dc:	2200      	movs	r2, #0
    b9de:	801a      	strh	r2, [r3, #0]
    b9e0:	e010      	b.n	ba04 <isSlotFree+0x38>
    {
        if( mem[size] != 0x00 )
    b9e2:	230e      	movs	r3, #14
    b9e4:	18fb      	adds	r3, r7, r3
    b9e6:	881b      	ldrh	r3, [r3, #0]
    b9e8:	68ba      	ldr	r2, [r7, #8]
    b9ea:	18d3      	adds	r3, r2, r3
    b9ec:	781b      	ldrb	r3, [r3, #0]
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d001      	beq.n	b9f6 <isSlotFree+0x2a>
        {
            return false;
    b9f2:	2300      	movs	r3, #0
    b9f4:	e00c      	b.n	ba10 <isSlotFree+0x44>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
    b9f6:	230e      	movs	r3, #14
    b9f8:	18fb      	adds	r3, r7, r3
    b9fa:	881a      	ldrh	r2, [r3, #0]
    b9fc:	230e      	movs	r3, #14
    b9fe:	18fb      	adds	r3, r7, r3
    ba00:	3201      	adds	r2, #1
    ba02:	801a      	strh	r2, [r3, #0]
    ba04:	230e      	movs	r3, #14
    ba06:	18fb      	adds	r3, r7, r3
    ba08:	881b      	ldrh	r3, [r3, #0]
    ba0a:	2b0f      	cmp	r3, #15
    ba0c:	d9e9      	bls.n	b9e2 <isSlotFree+0x16>
        }
    }
    return true;
    ba0e:	2301      	movs	r3, #1
}
    ba10:	0018      	movs	r0, r3
    ba12:	46bd      	mov	sp, r7
    ba14:	b004      	add	sp, #16
    ba16:	bd80      	pop	{r7, pc}

0000ba18 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
    ba18:	b580      	push	{r7, lr}
    ba1a:	b082      	sub	sp, #8
    ba1c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
    ba1e:	1dfb      	adds	r3, r7, #7
    ba20:	2200      	movs	r2, #0
    ba22:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
    ba24:	e00a      	b.n	ba3c <mallocNewMacCommandSlot+0x24>
    {
        itr++;
    ba26:	1dfb      	adds	r3, r7, #7
    ba28:	781a      	ldrb	r2, [r3, #0]
    ba2a:	1dfb      	adds	r3, r7, #7
    ba2c:	3201      	adds	r2, #1
    ba2e:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
    ba30:	1dfb      	adds	r3, r7, #7
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	2b0f      	cmp	r3, #15
    ba36:	d101      	bne.n	ba3c <mallocNewMacCommandSlot+0x24>
        {
            return 0;
    ba38:	2300      	movs	r3, #0
    ba3a:	e017      	b.n	ba6c <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
    ba3c:	1dfb      	adds	r3, r7, #7
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	011b      	lsls	r3, r3, #4
    ba42:	3308      	adds	r3, #8
    ba44:	001a      	movs	r2, r3
    ba46:	4b0b      	ldr	r3, [pc, #44]	; (ba74 <mallocNewMacCommandSlot+0x5c>)
    ba48:	18d3      	adds	r3, r2, r3
    ba4a:	0018      	movs	r0, r3
    ba4c:	4b0a      	ldr	r3, [pc, #40]	; (ba78 <mallocNewMacCommandSlot+0x60>)
    ba4e:	4798      	blx	r3
    ba50:	0003      	movs	r3, r0
    ba52:	001a      	movs	r2, r3
    ba54:	2301      	movs	r3, #1
    ba56:	4053      	eors	r3, r2
    ba58:	b2db      	uxtb	r3, r3
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d1e3      	bne.n	ba26 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
    ba5e:	1dfb      	adds	r3, r7, #7
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	011b      	lsls	r3, r3, #4
    ba64:	3308      	adds	r3, #8
    ba66:	001a      	movs	r2, r3
    ba68:	4b02      	ldr	r3, [pc, #8]	; (ba74 <mallocNewMacCommandSlot+0x5c>)
    ba6a:	18d3      	adds	r3, r2, r3
}
    ba6c:	0018      	movs	r0, r3
    ba6e:	46bd      	mov	sp, r7
    ba70:	b002      	add	sp, #8
    ba72:	bd80      	pop	{r7, pc}
    ba74:	200012a4 	.word	0x200012a4
    ba78:	0000b9cd 	.word	0x0000b9cd

0000ba7c <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
    ba7c:	b580      	push	{r7, lr}
    ba7e:	b082      	sub	sp, #8
    ba80:	af00      	add	r7, sp, #0
    ba82:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
    ba84:	687b      	ldr	r3, [r7, #4]
    ba86:	2b00      	cmp	r3, #0
    ba88:	d101      	bne.n	ba8e <freeMacCommandSlot+0x12>
    {
        return false;
    ba8a:	2300      	movs	r3, #0
    ba8c:	e006      	b.n	ba9c <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
    ba8e:	687b      	ldr	r3, [r7, #4]
    ba90:	2210      	movs	r2, #16
    ba92:	2100      	movs	r1, #0
    ba94:	0018      	movs	r0, r3
    ba96:	4b03      	ldr	r3, [pc, #12]	; (baa4 <freeMacCommandSlot+0x28>)
    ba98:	4798      	blx	r3

    return true;
    ba9a:	2301      	movs	r3, #1
}
    ba9c:	0018      	movs	r0, r3
    ba9e:	46bd      	mov	sp, r7
    baa0:	b002      	add	sp, #8
    baa2:	bd80      	pop	{r7, pc}
    baa4:	000029cd 	.word	0x000029cd

0000baa8 <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b082      	sub	sp, #8
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
    if( list == 0 )
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	2b00      	cmp	r3, #0
    bab4:	d101      	bne.n	baba <linkedListInit+0x12>
    {
        return false;
    bab6:	2300      	movs	r3, #0
    bab8:	e006      	b.n	bac8 <linkedListInit+0x20>
    }

    list->First = 0;
    baba:	687b      	ldr	r3, [r7, #4]
    babc:	2200      	movs	r2, #0
    babe:	601a      	str	r2, [r3, #0]
    list->Last = 0;
    bac0:	687b      	ldr	r3, [r7, #4]
    bac2:	2200      	movs	r2, #0
    bac4:	605a      	str	r2, [r3, #4]

    return true;
    bac6:	2301      	movs	r3, #1
}
    bac8:	0018      	movs	r0, r3
    baca:	46bd      	mov	sp, r7
    bacc:	b002      	add	sp, #8
    bace:	bd80      	pop	{r7, pc}

0000bad0 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    bad0:	b580      	push	{r7, lr}
    bad2:	b082      	sub	sp, #8
    bad4:	af00      	add	r7, sp, #0
    bad6:	6078      	str	r0, [r7, #4]
    bad8:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    bada:	687b      	ldr	r3, [r7, #4]
    badc:	2b00      	cmp	r3, #0
    bade:	d104      	bne.n	baea <linkedListAdd+0x1a>
    bae0:	683b      	ldr	r3, [r7, #0]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d101      	bne.n	baea <linkedListAdd+0x1a>
    {
        return false;
    bae6:	2300      	movs	r3, #0
    bae8:	e015      	b.n	bb16 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	681b      	ldr	r3, [r3, #0]
    baee:	2b00      	cmp	r3, #0
    baf0:	d102      	bne.n	baf8 <linkedListAdd+0x28>
    {
        list->First = element;
    baf2:	687b      	ldr	r3, [r7, #4]
    baf4:	683a      	ldr	r2, [r7, #0]
    baf6:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
    baf8:	687b      	ldr	r3, [r7, #4]
    bafa:	685b      	ldr	r3, [r3, #4]
    bafc:	2b00      	cmp	r3, #0
    bafe:	d003      	beq.n	bb08 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	685b      	ldr	r3, [r3, #4]
    bb04:	683a      	ldr	r2, [r7, #0]
    bb06:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
    bb08:	683b      	ldr	r3, [r7, #0]
    bb0a:	2200      	movs	r2, #0
    bb0c:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	683a      	ldr	r2, [r7, #0]
    bb12:	605a      	str	r2, [r3, #4]

    return true;
    bb14:	2301      	movs	r3, #1
}
    bb16:	0018      	movs	r0, r3
    bb18:	46bd      	mov	sp, r7
    bb1a:	b002      	add	sp, #8
    bb1c:	bd80      	pop	{r7, pc}

0000bb1e <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    bb1e:	b580      	push	{r7, lr}
    bb20:	b084      	sub	sp, #16
    bb22:	af00      	add	r7, sp, #0
    bb24:	6078      	str	r0, [r7, #4]
    bb26:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    bb28:	687b      	ldr	r3, [r7, #4]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d104      	bne.n	bb38 <linkedListGetPrevious+0x1a>
    bb2e:	683b      	ldr	r3, [r7, #0]
    bb30:	2b00      	cmp	r3, #0
    bb32:	d101      	bne.n	bb38 <linkedListGetPrevious+0x1a>
    {
        return NULL;
    bb34:	2300      	movs	r3, #0
    bb36:	e016      	b.n	bb66 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
    bb3e:	683a      	ldr	r2, [r7, #0]
    bb40:	68fb      	ldr	r3, [r7, #12]
    bb42:	429a      	cmp	r2, r3
    bb44:	d00c      	beq.n	bb60 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
    bb46:	e002      	b.n	bb4e <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
    bb48:	68fb      	ldr	r3, [r7, #12]
    bb4a:	681b      	ldr	r3, [r3, #0]
    bb4c:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
    bb4e:	68fb      	ldr	r3, [r7, #12]
    bb50:	2b00      	cmp	r3, #0
    bb52:	d007      	beq.n	bb64 <linkedListGetPrevious+0x46>
    bb54:	68fb      	ldr	r3, [r7, #12]
    bb56:	681a      	ldr	r2, [r3, #0]
    bb58:	683b      	ldr	r3, [r7, #0]
    bb5a:	429a      	cmp	r2, r3
    bb5c:	d1f4      	bne.n	bb48 <linkedListGetPrevious+0x2a>
    bb5e:	e001      	b.n	bb64 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
    bb60:	2300      	movs	r3, #0
    bb62:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
    bb64:	68fb      	ldr	r3, [r7, #12]
}
    bb66:	0018      	movs	r0, r3
    bb68:	46bd      	mov	sp, r7
    bb6a:	b004      	add	sp, #16
    bb6c:	bd80      	pop	{r7, pc}
	...

0000bb70 <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b084      	sub	sp, #16
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
    bb78:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	2b00      	cmp	r3, #0
    bb7e:	d104      	bne.n	bb8a <linkedListRemove+0x1a>
    bb80:	683b      	ldr	r3, [r7, #0]
    bb82:	2b00      	cmp	r3, #0
    bb84:	d101      	bne.n	bb8a <linkedListRemove+0x1a>
    {
        return false;
    bb86:	2300      	movs	r3, #0
    bb88:	e023      	b.n	bbd2 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
    bb8a:	683a      	ldr	r2, [r7, #0]
    bb8c:	687b      	ldr	r3, [r7, #4]
    bb8e:	0011      	movs	r1, r2
    bb90:	0018      	movs	r0, r3
    bb92:	4b12      	ldr	r3, [pc, #72]	; (bbdc <linkedListRemove+0x6c>)
    bb94:	4798      	blx	r3
    bb96:	0003      	movs	r3, r0
    bb98:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	681a      	ldr	r2, [r3, #0]
    bb9e:	683b      	ldr	r3, [r7, #0]
    bba0:	429a      	cmp	r2, r3
    bba2:	d103      	bne.n	bbac <linkedListRemove+0x3c>
    {
        list->First = element->Next;
    bba4:	683b      	ldr	r3, [r7, #0]
    bba6:	681a      	ldr	r2, [r3, #0]
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	685a      	ldr	r2, [r3, #4]
    bbb0:	683b      	ldr	r3, [r7, #0]
    bbb2:	429a      	cmp	r2, r3
    bbb4:	d102      	bne.n	bbbc <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
    bbb6:	687b      	ldr	r3, [r7, #4]
    bbb8:	68fa      	ldr	r2, [r7, #12]
    bbba:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
    bbbc:	68fb      	ldr	r3, [r7, #12]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d003      	beq.n	bbca <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
    bbc2:	683b      	ldr	r3, [r7, #0]
    bbc4:	681a      	ldr	r2, [r3, #0]
    bbc6:	68fb      	ldr	r3, [r7, #12]
    bbc8:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
    bbca:	683b      	ldr	r3, [r7, #0]
    bbcc:	2200      	movs	r2, #0
    bbce:	601a      	str	r2, [r3, #0]

    return true;
    bbd0:	2301      	movs	r3, #1
}
    bbd2:	0018      	movs	r0, r3
    bbd4:	46bd      	mov	sp, r7
    bbd6:	b004      	add	sp, #16
    bbd8:	bd80      	pop	{r7, pc}
    bbda:	46c0      	nop			; (mov r8, r8)
    bbdc:	0000bb1f 	.word	0x0000bb1f

0000bbe0 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    bbe0:	b580      	push	{r7, lr}
    bbe2:	b082      	sub	sp, #8
    bbe4:	af00      	add	r7, sp, #0
    bbe6:	0002      	movs	r2, r0
    bbe8:	1dfb      	adds	r3, r7, #7
    bbea:	701a      	strb	r2, [r3, #0]
    switch( cid )
    bbec:	1dfb      	adds	r3, r7, #7
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	2b20      	cmp	r3, #32
    bbf2:	d806      	bhi.n	bc02 <IsSticky+0x22>
    bbf4:	009a      	lsls	r2, r3, #2
    bbf6:	4b05      	ldr	r3, [pc, #20]	; (bc0c <IsSticky+0x2c>)
    bbf8:	18d3      	adds	r3, r2, r3
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	469f      	mov	pc, r3
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
    bbfe:	2301      	movs	r3, #1
    bc00:	e000      	b.n	bc04 <IsSticky+0x24>
        default:
            return false;
    bc02:	2300      	movs	r3, #0
    }
}
    bc04:	0018      	movs	r0, r3
    bc06:	46bd      	mov	sp, r7
    bc08:	b002      	add	sp, #8
    bc0a:	bd80      	pop	{r7, pc}
    bc0c:	0001f2d0 	.word	0x0001f2d0

0000bc10 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    bc10:	b580      	push	{r7, lr}
    bc12:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
    bc14:	4b04      	ldr	r3, [pc, #16]	; (bc28 <NvmCtxCallback+0x18>)
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d002      	beq.n	bc22 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
    bc1c:	4b02      	ldr	r3, [pc, #8]	; (bc28 <NvmCtxCallback+0x18>)
    bc1e:	681b      	ldr	r3, [r3, #0]
    bc20:	4798      	blx	r3
    }
}
    bc22:	46c0      	nop			; (mov r8, r8)
    bc24:	46bd      	mov	sp, r7
    bc26:	bd80      	pop	{r7, pc}
    bc28:	200012a0 	.word	0x200012a0

0000bc2c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
    bc2c:	b580      	push	{r7, lr}
    bc2e:	b082      	sub	sp, #8
    bc30:	af00      	add	r7, sp, #0
    bc32:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
    bc34:	4b08      	ldr	r3, [pc, #32]	; (bc58 <LoRaMacCommandsInit+0x2c>)
    bc36:	22fc      	movs	r2, #252	; 0xfc
    bc38:	2100      	movs	r1, #0
    bc3a:	0018      	movs	r0, r3
    bc3c:	4b07      	ldr	r3, [pc, #28]	; (bc5c <LoRaMacCommandsInit+0x30>)
    bc3e:	4798      	blx	r3

    linkedListInit( &NvmCtx.MacCommandList );
    bc40:	4b05      	ldr	r3, [pc, #20]	; (bc58 <LoRaMacCommandsInit+0x2c>)
    bc42:	0018      	movs	r0, r3
    bc44:	4b06      	ldr	r3, [pc, #24]	; (bc60 <LoRaMacCommandsInit+0x34>)
    bc46:	4798      	blx	r3

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
    bc48:	4b06      	ldr	r3, [pc, #24]	; (bc64 <LoRaMacCommandsInit+0x38>)
    bc4a:	687a      	ldr	r2, [r7, #4]
    bc4c:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
    bc4e:	2300      	movs	r3, #0
}
    bc50:	0018      	movs	r0, r3
    bc52:	46bd      	mov	sp, r7
    bc54:	b002      	add	sp, #8
    bc56:	bd80      	pop	{r7, pc}
    bc58:	200012a4 	.word	0x200012a4
    bc5c:	000029cd 	.word	0x000029cd
    bc60:	0000baa9 	.word	0x0000baa9
    bc64:	200012a0 	.word	0x200012a0

0000bc68 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	b082      	sub	sp, #8
    bc6c:	af00      	add	r7, sp, #0
    bc6e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
    bc70:	687b      	ldr	r3, [r7, #4]
    bc72:	2b00      	cmp	r3, #0
    bc74:	d007      	beq.n	bc86 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
    bc76:	6879      	ldr	r1, [r7, #4]
    bc78:	4b05      	ldr	r3, [pc, #20]	; (bc90 <LoRaMacCommandsRestoreNvmCtx+0x28>)
    bc7a:	22fc      	movs	r2, #252	; 0xfc
    bc7c:	0018      	movs	r0, r3
    bc7e:	4b05      	ldr	r3, [pc, #20]	; (bc94 <LoRaMacCommandsRestoreNvmCtx+0x2c>)
    bc80:	4798      	blx	r3
        return LORAMAC_COMMANDS_SUCCESS;
    bc82:	2300      	movs	r3, #0
    bc84:	e000      	b.n	bc88 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bc86:	2301      	movs	r3, #1
    }
}
    bc88:	0018      	movs	r0, r3
    bc8a:	46bd      	mov	sp, r7
    bc8c:	b002      	add	sp, #8
    bc8e:	bd80      	pop	{r7, pc}
    bc90:	200012a4 	.word	0x200012a4
    bc94:	00002955 	.word	0x00002955

0000bc98 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    bc98:	b580      	push	{r7, lr}
    bc9a:	b082      	sub	sp, #8
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
    bca0:	687b      	ldr	r3, [r7, #4]
    bca2:	22fc      	movs	r2, #252	; 0xfc
    bca4:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
    bca6:	4b02      	ldr	r3, [pc, #8]	; (bcb0 <LoRaMacCommandsGetNvmCtx+0x18>)
}
    bca8:	0018      	movs	r0, r3
    bcaa:	46bd      	mov	sp, r7
    bcac:	b002      	add	sp, #8
    bcae:	bd80      	pop	{r7, pc}
    bcb0:	200012a4 	.word	0x200012a4

0000bcb4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
    bcb4:	b580      	push	{r7, lr}
    bcb6:	b086      	sub	sp, #24
    bcb8:	af00      	add	r7, sp, #0
    bcba:	60b9      	str	r1, [r7, #8]
    bcbc:	607a      	str	r2, [r7, #4]
    bcbe:	230f      	movs	r3, #15
    bcc0:	18fb      	adds	r3, r7, r3
    bcc2:	1c02      	adds	r2, r0, #0
    bcc4:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
    bcc6:	68bb      	ldr	r3, [r7, #8]
    bcc8:	2b00      	cmp	r3, #0
    bcca:	d101      	bne.n	bcd0 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bccc:	2301      	movs	r3, #1
    bcce:	e03d      	b.n	bd4c <LoRaMacCommandsAddCmd+0x98>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
    bcd0:	4b20      	ldr	r3, [pc, #128]	; (bd54 <LoRaMacCommandsAddCmd+0xa0>)
    bcd2:	4798      	blx	r3
    bcd4:	0003      	movs	r3, r0
    bcd6:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
    bcd8:	697b      	ldr	r3, [r7, #20]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d101      	bne.n	bce2 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    bcde:	2302      	movs	r3, #2
    bce0:	e034      	b.n	bd4c <LoRaMacCommandsAddCmd+0x98>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
    bce2:	697a      	ldr	r2, [r7, #20]
    bce4:	4b1c      	ldr	r3, [pc, #112]	; (bd58 <LoRaMacCommandsAddCmd+0xa4>)
    bce6:	0011      	movs	r1, r2
    bce8:	0018      	movs	r0, r3
    bcea:	4b1c      	ldr	r3, [pc, #112]	; (bd5c <LoRaMacCommandsAddCmd+0xa8>)
    bcec:	4798      	blx	r3
    bcee:	0003      	movs	r3, r0
    bcf0:	001a      	movs	r2, r3
    bcf2:	2301      	movs	r3, #1
    bcf4:	4053      	eors	r3, r2
    bcf6:	b2db      	uxtb	r3, r3
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d001      	beq.n	bd00 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    bcfc:	2305      	movs	r3, #5
    bcfe:	e025      	b.n	bd4c <LoRaMacCommandsAddCmd+0x98>
    }

    // Set Values
    newCmd->CID = cid;
    bd00:	697b      	ldr	r3, [r7, #20]
    bd02:	220f      	movs	r2, #15
    bd04:	18ba      	adds	r2, r7, r2
    bd06:	7812      	ldrb	r2, [r2, #0]
    bd08:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
    bd0a:	697b      	ldr	r3, [r7, #20]
    bd0c:	687a      	ldr	r2, [r7, #4]
    bd0e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
    bd10:	697b      	ldr	r3, [r7, #20]
    bd12:	3305      	adds	r3, #5
    bd14:	687a      	ldr	r2, [r7, #4]
    bd16:	b292      	uxth	r2, r2
    bd18:	68b9      	ldr	r1, [r7, #8]
    bd1a:	0018      	movs	r0, r3
    bd1c:	4b10      	ldr	r3, [pc, #64]	; (bd60 <LoRaMacCommandsAddCmd+0xac>)
    bd1e:	4798      	blx	r3
    newCmd->IsSticky = IsSticky( cid );
    bd20:	230f      	movs	r3, #15
    bd22:	18fb      	adds	r3, r7, r3
    bd24:	781b      	ldrb	r3, [r3, #0]
    bd26:	0018      	movs	r0, r3
    bd28:	4b0e      	ldr	r3, [pc, #56]	; (bd64 <LoRaMacCommandsAddCmd+0xb0>)
    bd2a:	4798      	blx	r3
    bd2c:	0003      	movs	r3, r0
    bd2e:	001a      	movs	r2, r3
    bd30:	697b      	ldr	r3, [r7, #20]
    bd32:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
    bd34:	4b08      	ldr	r3, [pc, #32]	; (bd58 <LoRaMacCommandsAddCmd+0xa4>)
    bd36:	22f8      	movs	r2, #248	; 0xf8
    bd38:	589a      	ldr	r2, [r3, r2]
    bd3a:	687b      	ldr	r3, [r7, #4]
    bd3c:	18d3      	adds	r3, r2, r3
    bd3e:	1c5a      	adds	r2, r3, #1
    bd40:	4b05      	ldr	r3, [pc, #20]	; (bd58 <LoRaMacCommandsAddCmd+0xa4>)
    bd42:	21f8      	movs	r1, #248	; 0xf8
    bd44:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
    bd46:	4b08      	ldr	r3, [pc, #32]	; (bd68 <LoRaMacCommandsAddCmd+0xb4>)
    bd48:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    bd4a:	2300      	movs	r3, #0
}
    bd4c:	0018      	movs	r0, r3
    bd4e:	46bd      	mov	sp, r7
    bd50:	b006      	add	sp, #24
    bd52:	bd80      	pop	{r7, pc}
    bd54:	0000ba19 	.word	0x0000ba19
    bd58:	200012a4 	.word	0x200012a4
    bd5c:	0000bad1 	.word	0x0000bad1
    bd60:	00002955 	.word	0x00002955
    bd64:	0000bbe1 	.word	0x0000bbe1
    bd68:	0000bc11 	.word	0x0000bc11

0000bd6c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    bd6c:	b580      	push	{r7, lr}
    bd6e:	b082      	sub	sp, #8
    bd70:	af00      	add	r7, sp, #0
    bd72:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
    bd74:	687b      	ldr	r3, [r7, #4]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d101      	bne.n	bd7e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bd7a:	2301      	movs	r3, #1
    bd7c:	e028      	b.n	bdd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    bd7e:	687a      	ldr	r2, [r7, #4]
    bd80:	4b15      	ldr	r3, [pc, #84]	; (bdd8 <LoRaMacCommandsRemoveCmd+0x6c>)
    bd82:	0011      	movs	r1, r2
    bd84:	0018      	movs	r0, r3
    bd86:	4b15      	ldr	r3, [pc, #84]	; (bddc <LoRaMacCommandsRemoveCmd+0x70>)
    bd88:	4798      	blx	r3
    bd8a:	0003      	movs	r3, r0
    bd8c:	001a      	movs	r2, r3
    bd8e:	2301      	movs	r3, #1
    bd90:	4053      	eors	r3, r2
    bd92:	b2db      	uxtb	r3, r3
    bd94:	2b00      	cmp	r3, #0
    bd96:	d001      	beq.n	bd9c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    bd98:	2303      	movs	r3, #3
    bd9a:	e019      	b.n	bdd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
    bd9c:	4b0e      	ldr	r3, [pc, #56]	; (bdd8 <LoRaMacCommandsRemoveCmd+0x6c>)
    bd9e:	22f8      	movs	r2, #248	; 0xf8
    bda0:	589a      	ldr	r2, [r3, r2]
    bda2:	687b      	ldr	r3, [r7, #4]
    bda4:	689b      	ldr	r3, [r3, #8]
    bda6:	1ad3      	subs	r3, r2, r3
    bda8:	1e5a      	subs	r2, r3, #1
    bdaa:	4b0b      	ldr	r3, [pc, #44]	; (bdd8 <LoRaMacCommandsRemoveCmd+0x6c>)
    bdac:	21f8      	movs	r1, #248	; 0xf8
    bdae:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
    bdb0:	687b      	ldr	r3, [r7, #4]
    bdb2:	0018      	movs	r0, r3
    bdb4:	4b0a      	ldr	r3, [pc, #40]	; (bde0 <LoRaMacCommandsRemoveCmd+0x74>)
    bdb6:	4798      	blx	r3
    bdb8:	0003      	movs	r3, r0
    bdba:	001a      	movs	r2, r3
    bdbc:	2301      	movs	r3, #1
    bdbe:	4053      	eors	r3, r2
    bdc0:	b2db      	uxtb	r3, r3
    bdc2:	2b00      	cmp	r3, #0
    bdc4:	d001      	beq.n	bdca <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
    bdc6:	2305      	movs	r3, #5
    bdc8:	e002      	b.n	bdd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
    bdca:	4b06      	ldr	r3, [pc, #24]	; (bde4 <LoRaMacCommandsRemoveCmd+0x78>)
    bdcc:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    bdce:	2300      	movs	r3, #0
}
    bdd0:	0018      	movs	r0, r3
    bdd2:	46bd      	mov	sp, r7
    bdd4:	b002      	add	sp, #8
    bdd6:	bd80      	pop	{r7, pc}
    bdd8:	200012a4 	.word	0x200012a4
    bddc:	0000bb71 	.word	0x0000bb71
    bde0:	0000ba7d 	.word	0x0000ba7d
    bde4:	0000bc11 	.word	0x0000bc11

0000bde8 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    bde8:	b580      	push	{r7, lr}
    bdea:	b084      	sub	sp, #16
    bdec:	af00      	add	r7, sp, #0
    bdee:	0002      	movs	r2, r0
    bdf0:	6039      	str	r1, [r7, #0]
    bdf2:	1dfb      	adds	r3, r7, #7
    bdf4:	701a      	strb	r2, [r3, #0]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    bdf6:	4b0e      	ldr	r3, [pc, #56]	; (be30 <LoRaMacCommandsGetCmd+0x48>)
    bdf8:	681b      	ldr	r3, [r3, #0]
    bdfa:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while(curElement && ( curElement->CID != cid ) )
    bdfc:	e002      	b.n	be04 <LoRaMacCommandsGetCmd+0x1c>
    {
        curElement = curElement->Next;
    bdfe:	68fb      	ldr	r3, [r7, #12]
    be00:	681b      	ldr	r3, [r3, #0]
    be02:	60fb      	str	r3, [r7, #12]
    while(curElement && ( curElement->CID != cid ) )
    be04:	68fb      	ldr	r3, [r7, #12]
    be06:	2b00      	cmp	r3, #0
    be08:	d005      	beq.n	be16 <LoRaMacCommandsGetCmd+0x2e>
    be0a:	68fb      	ldr	r3, [r7, #12]
    be0c:	791b      	ldrb	r3, [r3, #4]
    be0e:	1dfa      	adds	r2, r7, #7
    be10:	7812      	ldrb	r2, [r2, #0]
    be12:	429a      	cmp	r2, r3
    be14:	d1f3      	bne.n	bdfe <LoRaMacCommandsGetCmd+0x16>
    }

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    be16:	68fb      	ldr	r3, [r7, #12]
    be18:	2b00      	cmp	r3, #0
    be1a:	d101      	bne.n	be20 <LoRaMacCommandsGetCmd+0x38>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    be1c:	2303      	movs	r3, #3
    be1e:	e003      	b.n	be28 <LoRaMacCommandsGetCmd+0x40>
    }

    *macCmd = curElement;
    be20:	683b      	ldr	r3, [r7, #0]
    be22:	68fa      	ldr	r2, [r7, #12]
    be24:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
    be26:	2300      	movs	r3, #0
}
    be28:	0018      	movs	r0, r3
    be2a:	46bd      	mov	sp, r7
    be2c:	b004      	add	sp, #16
    be2e:	bd80      	pop	{r7, pc}
    be30:	200012a4 	.word	0x200012a4

0000be34 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
    be34:	b580      	push	{r7, lr}
    be36:	b082      	sub	sp, #8
    be38:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    be3a:	4b11      	ldr	r3, [pc, #68]	; (be80 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
    be3c:	681b      	ldr	r3, [r3, #0]
    be3e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
    be40:	e013      	b.n	be6a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
    be42:	687b      	ldr	r3, [r7, #4]
    be44:	7b1b      	ldrb	r3, [r3, #12]
    be46:	2201      	movs	r2, #1
    be48:	4053      	eors	r3, r2
    be4a:	b2db      	uxtb	r3, r3
    be4c:	2b00      	cmp	r3, #0
    be4e:	d009      	beq.n	be64 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
    be50:	687b      	ldr	r3, [r7, #4]
    be52:	681b      	ldr	r3, [r3, #0]
    be54:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	0018      	movs	r0, r3
    be5a:	4b0a      	ldr	r3, [pc, #40]	; (be84 <LoRaMacCommandsRemoveNoneStickyCmds+0x50>)
    be5c:	4798      	blx	r3
            curElement = nexElement;
    be5e:	683b      	ldr	r3, [r7, #0]
    be60:	607b      	str	r3, [r7, #4]
    be62:	e002      	b.n	be6a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
    be64:	687b      	ldr	r3, [r7, #4]
    be66:	681b      	ldr	r3, [r3, #0]
    be68:	607b      	str	r3, [r7, #4]
    while( curElement )
    be6a:	687b      	ldr	r3, [r7, #4]
    be6c:	2b00      	cmp	r3, #0
    be6e:	d1e8      	bne.n	be42 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
    be70:	4b05      	ldr	r3, [pc, #20]	; (be88 <LoRaMacCommandsRemoveNoneStickyCmds+0x54>)
    be72:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    be74:	2300      	movs	r3, #0
}
    be76:	0018      	movs	r0, r3
    be78:	46bd      	mov	sp, r7
    be7a:	b002      	add	sp, #8
    be7c:	bd80      	pop	{r7, pc}
    be7e:	46c0      	nop			; (mov r8, r8)
    be80:	200012a4 	.word	0x200012a4
    be84:	0000bd6d 	.word	0x0000bd6d
    be88:	0000bc11 	.word	0x0000bc11

0000be8c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
    be8c:	b580      	push	{r7, lr}
    be8e:	b084      	sub	sp, #16
    be90:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
    be92:	4b1b      	ldr	r3, [pc, #108]	; (bf00 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
    be94:	681b      	ldr	r3, [r3, #0]
    be96:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
    be98:	e027      	b.n	beea <LoRaMacCommandsRemoveStickyAnsCmds+0x5e>
    {
        nexElement = curElement->Next;
    be9a:	68fb      	ldr	r3, [r7, #12]
    be9c:	681b      	ldr	r3, [r3, #0]
    be9e:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
    bea0:	68fb      	ldr	r3, [r7, #12]
    bea2:	7b1b      	ldrb	r3, [r3, #12]
    bea4:	2b00      	cmp	r3, #0
    bea6:	d01e      	beq.n	bee6 <LoRaMacCommandsRemoveStickyAnsCmds+0x5a>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
    bea8:	230b      	movs	r3, #11
    beaa:	18fb      	adds	r3, r7, r3
    beac:	2200      	movs	r2, #0
    beae:	701a      	strb	r2, [r3, #0]
    beb0:	e014      	b.n	bedc <LoRaMacCommandsRemoveStickyAnsCmds+0x50>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
    beb2:	68fb      	ldr	r3, [r7, #12]
    beb4:	791a      	ldrb	r2, [r3, #4]
    beb6:	230b      	movs	r3, #11
    beb8:	18fb      	adds	r3, r7, r3
    beba:	781b      	ldrb	r3, [r3, #0]
    bebc:	4911      	ldr	r1, [pc, #68]	; (bf04 <LoRaMacCommandsRemoveStickyAnsCmds+0x78>)
    bebe:	5ccb      	ldrb	r3, [r1, r3]
    bec0:	429a      	cmp	r2, r3
    bec2:	d104      	bne.n	bece <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
    bec4:	68fb      	ldr	r3, [r7, #12]
    bec6:	0018      	movs	r0, r3
    bec8:	4b0f      	ldr	r3, [pc, #60]	; (bf08 <LoRaMacCommandsRemoveStickyAnsCmds+0x7c>)
    beca:	4798      	blx	r3
                    break;
    becc:	e00b      	b.n	bee6 <LoRaMacCommandsRemoveStickyAnsCmds+0x5a>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
    bece:	230b      	movs	r3, #11
    bed0:	18fb      	adds	r3, r7, r3
    bed2:	781a      	ldrb	r2, [r3, #0]
    bed4:	230b      	movs	r3, #11
    bed6:	18fb      	adds	r3, r7, r3
    bed8:	3201      	adds	r2, #1
    beda:	701a      	strb	r2, [r3, #0]
    bedc:	230b      	movs	r3, #11
    bede:	18fb      	adds	r3, r7, r3
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	2b02      	cmp	r3, #2
    bee4:	d9e5      	bls.n	beb2 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
    bee6:	687b      	ldr	r3, [r7, #4]
    bee8:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
    beea:	68fb      	ldr	r3, [r7, #12]
    beec:	2b00      	cmp	r3, #0
    beee:	d1d4      	bne.n	be9a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
    bef0:	4b06      	ldr	r3, [pc, #24]	; (bf0c <LoRaMacCommandsRemoveStickyAnsCmds+0x80>)
    bef2:	4798      	blx	r3

    return LORAMAC_COMMANDS_SUCCESS;
    bef4:	2300      	movs	r3, #0
}
    bef6:	0018      	movs	r0, r3
    bef8:	46bd      	mov	sp, r7
    befa:	b004      	add	sp, #16
    befc:	bd80      	pop	{r7, pc}
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	200012a4 	.word	0x200012a4
    bf04:	0001f2cc 	.word	0x0001f2cc
    bf08:	0000bd6d 	.word	0x0000bd6d
    bf0c:	0000bc11 	.word	0x0000bc11

0000bf10 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    bf10:	b580      	push	{r7, lr}
    bf12:	b082      	sub	sp, #8
    bf14:	af00      	add	r7, sp, #0
    bf16:	6078      	str	r0, [r7, #4]
    if( size == NULL )
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	2b00      	cmp	r3, #0
    bf1c:	d101      	bne.n	bf22 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bf1e:	2301      	movs	r3, #1
    bf20:	e005      	b.n	bf2e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
    bf22:	4b05      	ldr	r3, [pc, #20]	; (bf38 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
    bf24:	22f8      	movs	r2, #248	; 0xf8
    bf26:	589a      	ldr	r2, [r3, r2]
    bf28:	687b      	ldr	r3, [r7, #4]
    bf2a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
    bf2c:	2300      	movs	r3, #0

}
    bf2e:	0018      	movs	r0, r3
    bf30:	46bd      	mov	sp, r7
    bf32:	b002      	add	sp, #8
    bf34:	bd80      	pop	{r7, pc}
    bf36:	46c0      	nop			; (mov r8, r8)
    bf38:	200012a4 	.word	0x200012a4

0000bf3c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
    bf3c:	b580      	push	{r7, lr}
    bf3e:	b086      	sub	sp, #24
    bf40:	af00      	add	r7, sp, #0
    bf42:	60f8      	str	r0, [r7, #12]
    bf44:	60b9      	str	r1, [r7, #8]
    bf46:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    bf48:	687b      	ldr	r3, [r7, #4]
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d002      	beq.n	bf54 <LoRaMacCommandsSerializeCmds+0x18>
    bf4e:	68bb      	ldr	r3, [r7, #8]
    bf50:	2b00      	cmp	r3, #0
    bf52:	d101      	bne.n	bf58 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bf54:	2301      	movs	r3, #1
    bf56:	e03e      	b.n	bfd6 <LoRaMacCommandsSerializeCmds+0x9a>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    bf58:	4b21      	ldr	r3, [pc, #132]	; (bfe0 <LoRaMacCommandsSerializeCmds+0xa4>)
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
    bf5e:	2313      	movs	r3, #19
    bf60:	18fb      	adds	r3, r7, r3
    bf62:	2200      	movs	r2, #0
    bf64:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
    bf66:	e030      	b.n	bfca <LoRaMacCommandsSerializeCmds+0x8e>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
    bf68:	2313      	movs	r3, #19
    bf6a:	18fb      	adds	r3, r7, r3
    bf6c:	781b      	ldrb	r3, [r3, #0]
    bf6e:	68fa      	ldr	r2, [r7, #12]
    bf70:	1ad2      	subs	r2, r2, r3
    bf72:	697b      	ldr	r3, [r7, #20]
    bf74:	689b      	ldr	r3, [r3, #8]
    bf76:	3301      	adds	r3, #1
    bf78:	429a      	cmp	r2, r3
    bf7a:	d32a      	bcc.n	bfd2 <LoRaMacCommandsSerializeCmds+0x96>
        {
            buffer[itr++] = curElement->CID;
    bf7c:	2313      	movs	r3, #19
    bf7e:	18fb      	adds	r3, r7, r3
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	2213      	movs	r2, #19
    bf84:	18ba      	adds	r2, r7, r2
    bf86:	1c59      	adds	r1, r3, #1
    bf88:	7011      	strb	r1, [r2, #0]
    bf8a:	001a      	movs	r2, r3
    bf8c:	687b      	ldr	r3, [r7, #4]
    bf8e:	189b      	adds	r3, r3, r2
    bf90:	697a      	ldr	r2, [r7, #20]
    bf92:	7912      	ldrb	r2, [r2, #4]
    bf94:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
    bf96:	2313      	movs	r3, #19
    bf98:	18fb      	adds	r3, r7, r3
    bf9a:	781b      	ldrb	r3, [r3, #0]
    bf9c:	687a      	ldr	r2, [r7, #4]
    bf9e:	18d0      	adds	r0, r2, r3
    bfa0:	697b      	ldr	r3, [r7, #20]
    bfa2:	1d59      	adds	r1, r3, #5
    bfa4:	697b      	ldr	r3, [r7, #20]
    bfa6:	689b      	ldr	r3, [r3, #8]
    bfa8:	b29b      	uxth	r3, r3
    bfaa:	001a      	movs	r2, r3
    bfac:	4b0d      	ldr	r3, [pc, #52]	; (bfe4 <LoRaMacCommandsSerializeCmds+0xa8>)
    bfae:	4798      	blx	r3
            itr = itr + curElement->PayloadSize;
    bfb0:	697b      	ldr	r3, [r7, #20]
    bfb2:	689b      	ldr	r3, [r3, #8]
    bfb4:	b2d9      	uxtb	r1, r3
    bfb6:	2313      	movs	r3, #19
    bfb8:	18fb      	adds	r3, r7, r3
    bfba:	2213      	movs	r2, #19
    bfbc:	18ba      	adds	r2, r7, r2
    bfbe:	7812      	ldrb	r2, [r2, #0]
    bfc0:	188a      	adds	r2, r1, r2
    bfc2:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
    bfc4:	697b      	ldr	r3, [r7, #20]
    bfc6:	681b      	ldr	r3, [r3, #0]
    bfc8:	617b      	str	r3, [r7, #20]
    while( curElement )
    bfca:	697b      	ldr	r3, [r7, #20]
    bfcc:	2b00      	cmp	r3, #0
    bfce:	d1cb      	bne.n	bf68 <LoRaMacCommandsSerializeCmds+0x2c>
    bfd0:	e000      	b.n	bfd4 <LoRaMacCommandsSerializeCmds+0x98>
            break;
    bfd2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
    bfd4:	2300      	movs	r3, #0
}
    bfd6:	0018      	movs	r0, r3
    bfd8:	46bd      	mov	sp, r7
    bfda:	b006      	add	sp, #24
    bfdc:	bd80      	pop	{r7, pc}
    bfde:	46c0      	nop			; (mov r8, r8)
    bfe0:	200012a4 	.word	0x200012a4
    bfe4:	00002955 	.word	0x00002955

0000bfe8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    bfe8:	b580      	push	{r7, lr}
    bfea:	b084      	sub	sp, #16
    bfec:	af00      	add	r7, sp, #0
    bfee:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
    bff0:	687b      	ldr	r3, [r7, #4]
    bff2:	2b00      	cmp	r3, #0
    bff4:	d101      	bne.n	bffa <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    bff6:	2301      	movs	r3, #1
    bff8:	e016      	b.n	c028 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
    bffa:	4b0d      	ldr	r3, [pc, #52]	; (c030 <LoRaMacCommandsStickyCmdsPending+0x48>)
    bffc:	681b      	ldr	r3, [r3, #0]
    bffe:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
    c000:	687b      	ldr	r3, [r7, #4]
    c002:	2200      	movs	r2, #0
    c004:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
    c006:	e00b      	b.n	c020 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
    c008:	68fb      	ldr	r3, [r7, #12]
    c00a:	7b1b      	ldrb	r3, [r3, #12]
    c00c:	2b00      	cmp	r3, #0
    c00e:	d004      	beq.n	c01a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
    c010:	687b      	ldr	r3, [r7, #4]
    c012:	2201      	movs	r2, #1
    c014:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
    c016:	2300      	movs	r3, #0
    c018:	e006      	b.n	c028 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
    c01a:	68fb      	ldr	r3, [r7, #12]
    c01c:	681b      	ldr	r3, [r3, #0]
    c01e:	60fb      	str	r3, [r7, #12]
    while( curElement )
    c020:	68fb      	ldr	r3, [r7, #12]
    c022:	2b00      	cmp	r3, #0
    c024:	d1f0      	bne.n	c008 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
    c026:	2300      	movs	r3, #0
}
    c028:	0018      	movs	r0, r3
    c02a:	46bd      	mov	sp, r7
    c02c:	b004      	add	sp, #16
    c02e:	bd80      	pop	{r7, pc}
    c030:	200012a4 	.word	0x200012a4

0000c034 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    c034:	b580      	push	{r7, lr}
    c036:	b082      	sub	sp, #8
    c038:	af00      	add	r7, sp, #0
    c03a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
    c03c:	4b09      	ldr	r3, [pc, #36]	; (c064 <IncreaseBufferPointer+0x30>)
    c03e:	691b      	ldr	r3, [r3, #16]
    c040:	3310      	adds	r3, #16
    c042:	001a      	movs	r2, r3
    c044:	687b      	ldr	r3, [r7, #4]
    c046:	429a      	cmp	r2, r3
    c048:	d103      	bne.n	c052 <IncreaseBufferPointer+0x1e>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    c04a:	4b06      	ldr	r3, [pc, #24]	; (c064 <IncreaseBufferPointer+0x30>)
    c04c:	691b      	ldr	r3, [r3, #16]
    c04e:	607b      	str	r3, [r7, #4]
    c050:	e002      	b.n	c058 <IncreaseBufferPointer+0x24>
    }
    else
    {
        // Increase
        bufferPointer++;
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	3304      	adds	r3, #4
    c056:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
    c058:	687b      	ldr	r3, [r7, #4]
}
    c05a:	0018      	movs	r0, r3
    c05c:	46bd      	mov	sp, r7
    c05e:	b002      	add	sp, #8
    c060:	bd80      	pop	{r7, pc}
    c062:	46c0      	nop			; (mov r8, r8)
    c064:	200013b8 	.word	0x200013b8

0000c068 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
    c068:	b580      	push	{r7, lr}
    c06a:	b086      	sub	sp, #24
    c06c:	af00      	add	r7, sp, #0
    c06e:	60b9      	str	r1, [r7, #8]
    c070:	607a      	str	r2, [r7, #4]
    c072:	230f      	movs	r3, #15
    c074:	18fb      	adds	r3, r7, r3
    c076:	1c02      	adds	r2, r0, #0
    c078:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
    c07a:	68bb      	ldr	r3, [r7, #8]
    c07c:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
    c07e:	e00e      	b.n	c09e <GetElement+0x36>
    {
        if( element->Request == request )
    c080:	697b      	ldr	r3, [r7, #20]
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	220f      	movs	r2, #15
    c086:	18ba      	adds	r2, r7, r2
    c088:	7812      	ldrb	r2, [r2, #0]
    c08a:	429a      	cmp	r2, r3
    c08c:	d101      	bne.n	c092 <GetElement+0x2a>
        {
            // We have found the element
            return element;
    c08e:	697b      	ldr	r3, [r7, #20]
    c090:	e00a      	b.n	c0a8 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
    c092:	697b      	ldr	r3, [r7, #20]
    c094:	0018      	movs	r0, r3
    c096:	4b06      	ldr	r3, [pc, #24]	; (c0b0 <GetElement+0x48>)
    c098:	4798      	blx	r3
    c09a:	0003      	movs	r3, r0
    c09c:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
    c09e:	697a      	ldr	r2, [r7, #20]
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	429a      	cmp	r2, r3
    c0a4:	d1ec      	bne.n	c080 <GetElement+0x18>
        }
    }
    return NULL;
    c0a6:	2300      	movs	r3, #0
}
    c0a8:	0018      	movs	r0, r3
    c0aa:	46bd      	mov	sp, r7
    c0ac:	b006      	add	sp, #24
    c0ae:	bd80      	pop	{r7, pc}
    c0b0:	0000c035 	.word	0x0000c035

0000c0b4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
    c0b4:	b580      	push	{r7, lr}
    c0b6:	b082      	sub	sp, #8
    c0b8:	af00      	add	r7, sp, #0
    c0ba:	6078      	str	r0, [r7, #4]
    c0bc:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
    c0be:	4b13      	ldr	r3, [pc, #76]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0c0:	687a      	ldr	r2, [r7, #4]
    c0c2:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
    c0c4:	4b11      	ldr	r3, [pc, #68]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0c6:	4a12      	ldr	r2, [pc, #72]	; (c110 <LoRaMacConfirmQueueInit+0x5c>)
    c0c8:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
    c0ca:	4b10      	ldr	r3, [pc, #64]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0cc:	691b      	ldr	r3, [r3, #16]
    c0ce:	2200      	movs	r2, #0
    c0d0:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    c0d2:	4b0e      	ldr	r3, [pc, #56]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0d4:	691b      	ldr	r3, [r3, #16]
    c0d6:	001a      	movs	r2, r3
    c0d8:	4b0c      	ldr	r3, [pc, #48]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0da:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    c0dc:	4b0b      	ldr	r3, [pc, #44]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0de:	691b      	ldr	r3, [r3, #16]
    c0e0:	001a      	movs	r2, r3
    c0e2:	4b0a      	ldr	r3, [pc, #40]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0e4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
    c0e6:	4b09      	ldr	r3, [pc, #36]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0e8:	691b      	ldr	r3, [r3, #16]
    c0ea:	2214      	movs	r2, #20
    c0ec:	21ff      	movs	r1, #255	; 0xff
    c0ee:	0018      	movs	r0, r3
    c0f0:	4b08      	ldr	r3, [pc, #32]	; (c114 <LoRaMacConfirmQueueInit+0x60>)
    c0f2:	4798      	blx	r3

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
    c0f4:	4b05      	ldr	r3, [pc, #20]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0f6:	691b      	ldr	r3, [r3, #16]
    c0f8:	2201      	movs	r2, #1
    c0fa:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
    c0fc:	4b03      	ldr	r3, [pc, #12]	; (c10c <LoRaMacConfirmQueueInit+0x58>)
    c0fe:	683a      	ldr	r2, [r7, #0]
    c100:	60da      	str	r2, [r3, #12]
}
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	46bd      	mov	sp, r7
    c106:	b002      	add	sp, #8
    c108:	bd80      	pop	{r7, pc}
    c10a:	46c0      	nop			; (mov r8, r8)
    c10c:	200013b8 	.word	0x200013b8
    c110:	200013a0 	.word	0x200013a0
    c114:	000029cd 	.word	0x000029cd

0000c118 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
    c118:	b580      	push	{r7, lr}
    c11a:	b082      	sub	sp, #8
    c11c:	af00      	add	r7, sp, #0
    c11e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
    c120:	687b      	ldr	r3, [r7, #4]
    c122:	2b00      	cmp	r3, #0
    c124:	d007      	beq.n	c136 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
    c126:	6879      	ldr	r1, [r7, #4]
    c128:	4b05      	ldr	r3, [pc, #20]	; (c140 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
    c12a:	2216      	movs	r2, #22
    c12c:	0018      	movs	r0, r3
    c12e:	4b05      	ldr	r3, [pc, #20]	; (c144 <LoRaMacConfirmQueueRestoreNvmCtx+0x2c>)
    c130:	4798      	blx	r3
        return true;
    c132:	2301      	movs	r3, #1
    c134:	e000      	b.n	c138 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
    c136:	2300      	movs	r3, #0
    }
}
    c138:	0018      	movs	r0, r3
    c13a:	46bd      	mov	sp, r7
    c13c:	b002      	add	sp, #8
    c13e:	bd80      	pop	{r7, pc}
    c140:	200013a0 	.word	0x200013a0
    c144:	00002955 	.word	0x00002955

0000c148 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    c148:	b580      	push	{r7, lr}
    c14a:	b082      	sub	sp, #8
    c14c:	af00      	add	r7, sp, #0
    c14e:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    c150:	687b      	ldr	r3, [r7, #4]
    c152:	2216      	movs	r2, #22
    c154:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
    c156:	4b02      	ldr	r3, [pc, #8]	; (c160 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
    c158:	0018      	movs	r0, r3
    c15a:	46bd      	mov	sp, r7
    c15c:	b002      	add	sp, #8
    c15e:	bd80      	pop	{r7, pc}
    c160:	200013a0 	.word	0x200013a0

0000c164 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    c164:	b580      	push	{r7, lr}
    c166:	b082      	sub	sp, #8
    c168:	af00      	add	r7, sp, #0
    c16a:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    c16c:	4b16      	ldr	r3, [pc, #88]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c16e:	691b      	ldr	r3, [r3, #16]
    c170:	7d1b      	ldrb	r3, [r3, #20]
    c172:	2b04      	cmp	r3, #4
    c174:	d901      	bls.n	c17a <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
    c176:	2300      	movs	r3, #0
    c178:	e021      	b.n	c1be <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
    c17a:	4b13      	ldr	r3, [pc, #76]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c17c:	689b      	ldr	r3, [r3, #8]
    c17e:	687a      	ldr	r2, [r7, #4]
    c180:	7812      	ldrb	r2, [r2, #0]
    c182:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    c184:	4b10      	ldr	r3, [pc, #64]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c186:	689b      	ldr	r3, [r3, #8]
    c188:	687a      	ldr	r2, [r7, #4]
    c18a:	7852      	ldrb	r2, [r2, #1]
    c18c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    c18e:	4b0e      	ldr	r3, [pc, #56]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c190:	689b      	ldr	r3, [r3, #8]
    c192:	687a      	ldr	r2, [r7, #4]
    c194:	78d2      	ldrb	r2, [r2, #3]
    c196:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    c198:	4b0b      	ldr	r3, [pc, #44]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c19a:	689b      	ldr	r3, [r3, #8]
    c19c:	2200      	movs	r2, #0
    c19e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
    c1a0:	4b09      	ldr	r3, [pc, #36]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c1a2:	691b      	ldr	r3, [r3, #16]
    c1a4:	7d1a      	ldrb	r2, [r3, #20]
    c1a6:	3201      	adds	r2, #1
    c1a8:	b2d2      	uxtb	r2, r2
    c1aa:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
    c1ac:	4b06      	ldr	r3, [pc, #24]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c1ae:	689b      	ldr	r3, [r3, #8]
    c1b0:	0018      	movs	r0, r3
    c1b2:	4b06      	ldr	r3, [pc, #24]	; (c1cc <LoRaMacConfirmQueueAdd+0x68>)
    c1b4:	4798      	blx	r3
    c1b6:	0002      	movs	r2, r0
    c1b8:	4b03      	ldr	r3, [pc, #12]	; (c1c8 <LoRaMacConfirmQueueAdd+0x64>)
    c1ba:	609a      	str	r2, [r3, #8]

    return true;
    c1bc:	2301      	movs	r3, #1
}
    c1be:	0018      	movs	r0, r3
    c1c0:	46bd      	mov	sp, r7
    c1c2:	b002      	add	sp, #8
    c1c4:	bd80      	pop	{r7, pc}
    c1c6:	46c0      	nop			; (mov r8, r8)
    c1c8:	200013b8 	.word	0x200013b8
    c1cc:	0000c035 	.word	0x0000c035

0000c1d0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    c1d0:	b580      	push	{r7, lr}
    c1d2:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    c1d4:	4b0c      	ldr	r3, [pc, #48]	; (c208 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    c1d6:	691b      	ldr	r3, [r3, #16]
    c1d8:	7d1b      	ldrb	r3, [r3, #20]
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d101      	bne.n	c1e2 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
    c1de:	2300      	movs	r3, #0
    c1e0:	e00e      	b.n	c200 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    c1e2:	4b09      	ldr	r3, [pc, #36]	; (c208 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    c1e4:	691b      	ldr	r3, [r3, #16]
    c1e6:	7d1a      	ldrb	r2, [r3, #20]
    c1e8:	3a01      	subs	r2, #1
    c1ea:	b2d2      	uxtb	r2, r2
    c1ec:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
    c1ee:	4b06      	ldr	r3, [pc, #24]	; (c208 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    c1f0:	685b      	ldr	r3, [r3, #4]
    c1f2:	0018      	movs	r0, r3
    c1f4:	4b05      	ldr	r3, [pc, #20]	; (c20c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
    c1f6:	4798      	blx	r3
    c1f8:	0002      	movs	r2, r0
    c1fa:	4b03      	ldr	r3, [pc, #12]	; (c208 <LoRaMacConfirmQueueRemoveFirst+0x38>)
    c1fc:	605a      	str	r2, [r3, #4]

    return true;
    c1fe:	2301      	movs	r3, #1
}
    c200:	0018      	movs	r0, r3
    c202:	46bd      	mov	sp, r7
    c204:	bd80      	pop	{r7, pc}
    c206:	46c0      	nop			; (mov r8, r8)
    c208:	200013b8 	.word	0x200013b8
    c20c:	0000c035 	.word	0x0000c035

0000c210 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    c210:	b580      	push	{r7, lr}
    c212:	b084      	sub	sp, #16
    c214:	af00      	add	r7, sp, #0
    c216:	0002      	movs	r2, r0
    c218:	1dfb      	adds	r3, r7, #7
    c21a:	701a      	strb	r2, [r3, #0]
    c21c:	1dbb      	adds	r3, r7, #6
    c21e:	1c0a      	adds	r2, r1, #0
    c220:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
    c222:	2300      	movs	r3, #0
    c224:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    c226:	4b0f      	ldr	r3, [pc, #60]	; (c264 <LoRaMacConfirmQueueSetStatus+0x54>)
    c228:	691b      	ldr	r3, [r3, #16]
    c22a:	7d1b      	ldrb	r3, [r3, #20]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d014      	beq.n	c25a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    c230:	4b0c      	ldr	r3, [pc, #48]	; (c264 <LoRaMacConfirmQueueSetStatus+0x54>)
    c232:	6859      	ldr	r1, [r3, #4]
    c234:	4b0b      	ldr	r3, [pc, #44]	; (c264 <LoRaMacConfirmQueueSetStatus+0x54>)
    c236:	689a      	ldr	r2, [r3, #8]
    c238:	1dbb      	adds	r3, r7, #6
    c23a:	781b      	ldrb	r3, [r3, #0]
    c23c:	0018      	movs	r0, r3
    c23e:	4b0a      	ldr	r3, [pc, #40]	; (c268 <LoRaMacConfirmQueueSetStatus+0x58>)
    c240:	4798      	blx	r3
    c242:	0003      	movs	r3, r0
    c244:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
    c246:	68fb      	ldr	r3, [r7, #12]
    c248:	2b00      	cmp	r3, #0
    c24a:	d006      	beq.n	c25a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
    c24c:	68fb      	ldr	r3, [r7, #12]
    c24e:	1dfa      	adds	r2, r7, #7
    c250:	7812      	ldrb	r2, [r2, #0]
    c252:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
    c254:	68fb      	ldr	r3, [r7, #12]
    c256:	2201      	movs	r2, #1
    c258:	709a      	strb	r2, [r3, #2]
        }
    }
}
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	46bd      	mov	sp, r7
    c25e:	b004      	add	sp, #16
    c260:	bd80      	pop	{r7, pc}
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	200013b8 	.word	0x200013b8
    c268:	0000c069 	.word	0x0000c069

0000c26c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
    c26c:	b580      	push	{r7, lr}
    c26e:	b084      	sub	sp, #16
    c270:	af00      	add	r7, sp, #0
    c272:	0002      	movs	r2, r0
    c274:	1dfb      	adds	r3, r7, #7
    c276:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
    c278:	2300      	movs	r3, #0
    c27a:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    c27c:	4b0d      	ldr	r3, [pc, #52]	; (c2b4 <LoRaMacConfirmQueueGetStatus+0x48>)
    c27e:	691b      	ldr	r3, [r3, #16]
    c280:	7d1b      	ldrb	r3, [r3, #20]
    c282:	2b00      	cmp	r3, #0
    c284:	d010      	beq.n	c2a8 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
    c286:	4b0b      	ldr	r3, [pc, #44]	; (c2b4 <LoRaMacConfirmQueueGetStatus+0x48>)
    c288:	6859      	ldr	r1, [r3, #4]
    c28a:	4b0a      	ldr	r3, [pc, #40]	; (c2b4 <LoRaMacConfirmQueueGetStatus+0x48>)
    c28c:	689a      	ldr	r2, [r3, #8]
    c28e:	1dfb      	adds	r3, r7, #7
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	0018      	movs	r0, r3
    c294:	4b08      	ldr	r3, [pc, #32]	; (c2b8 <LoRaMacConfirmQueueGetStatus+0x4c>)
    c296:	4798      	blx	r3
    c298:	0003      	movs	r3, r0
    c29a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
    c29c:	68fb      	ldr	r3, [r7, #12]
    c29e:	2b00      	cmp	r3, #0
    c2a0:	d002      	beq.n	c2a8 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
    c2a2:	68fb      	ldr	r3, [r7, #12]
    c2a4:	785b      	ldrb	r3, [r3, #1]
    c2a6:	e000      	b.n	c2aa <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
    c2a8:	2301      	movs	r3, #1
}
    c2aa:	0018      	movs	r0, r3
    c2ac:	46bd      	mov	sp, r7
    c2ae:	b004      	add	sp, #16
    c2b0:	bd80      	pop	{r7, pc}
    c2b2:	46c0      	nop			; (mov r8, r8)
    c2b4:	200013b8 	.word	0x200013b8
    c2b8:	0000c069 	.word	0x0000c069

0000c2bc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    c2bc:	b580      	push	{r7, lr}
    c2be:	b084      	sub	sp, #16
    c2c0:	af00      	add	r7, sp, #0
    c2c2:	0002      	movs	r2, r0
    c2c4:	1dfb      	adds	r3, r7, #7
    c2c6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
    c2c8:	4b14      	ldr	r3, [pc, #80]	; (c31c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    c2ca:	685b      	ldr	r3, [r3, #4]
    c2cc:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
    c2ce:	4b13      	ldr	r3, [pc, #76]	; (c31c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    c2d0:	691b      	ldr	r3, [r3, #16]
    c2d2:	1dfa      	adds	r2, r7, #7
    c2d4:	7812      	ldrb	r2, [r2, #0]
    c2d6:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
    c2d8:	4b10      	ldr	r3, [pc, #64]	; (c31c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    c2da:	691b      	ldr	r3, [r3, #16]
    c2dc:	7d1b      	ldrb	r3, [r3, #20]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d018      	beq.n	c314 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
    c2e2:	68fb      	ldr	r3, [r7, #12]
    c2e4:	1dfa      	adds	r2, r7, #7
    c2e6:	7812      	ldrb	r2, [r2, #0]
    c2e8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
    c2ea:	68fb      	ldr	r3, [r7, #12]
    c2ec:	78db      	ldrb	r3, [r3, #3]
    c2ee:	2201      	movs	r2, #1
    c2f0:	4053      	eors	r3, r2
    c2f2:	b2db      	uxtb	r3, r3
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	d002      	beq.n	c2fe <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
    c2f8:	68fb      	ldr	r3, [r7, #12]
    c2fa:	2201      	movs	r2, #1
    c2fc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
    c2fe:	68fb      	ldr	r3, [r7, #12]
    c300:	0018      	movs	r0, r3
    c302:	4b07      	ldr	r3, [pc, #28]	; (c320 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
    c304:	4798      	blx	r3
    c306:	0003      	movs	r3, r0
    c308:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
    c30a:	4b04      	ldr	r3, [pc, #16]	; (c31c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
    c30c:	689a      	ldr	r2, [r3, #8]
    c30e:	68fb      	ldr	r3, [r7, #12]
    c310:	429a      	cmp	r2, r3
    c312:	d1e6      	bne.n	c2e2 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
    c314:	46c0      	nop			; (mov r8, r8)
    c316:	46bd      	mov	sp, r7
    c318:	b004      	add	sp, #16
    c31a:	bd80      	pop	{r7, pc}
    c31c:	200013b8 	.word	0x200013b8
    c320:	0000c035 	.word	0x0000c035

0000c324 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
    c324:	b580      	push	{r7, lr}
    c326:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
    c328:	4b02      	ldr	r3, [pc, #8]	; (c334 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
    c32a:	691b      	ldr	r3, [r3, #16]
    c32c:	7d5b      	ldrb	r3, [r3, #21]
}
    c32e:	0018      	movs	r0, r3
    c330:	46bd      	mov	sp, r7
    c332:	bd80      	pop	{r7, pc}
    c334:	200013b8 	.word	0x200013b8

0000c338 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    c338:	b580      	push	{r7, lr}
    c33a:	b082      	sub	sp, #8
    c33c:	af00      	add	r7, sp, #0
    c33e:	0002      	movs	r2, r0
    c340:	1dfb      	adds	r3, r7, #7
    c342:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
    c344:	4b08      	ldr	r3, [pc, #32]	; (c368 <LoRaMacConfirmQueueIsCmdActive+0x30>)
    c346:	6859      	ldr	r1, [r3, #4]
    c348:	4b07      	ldr	r3, [pc, #28]	; (c368 <LoRaMacConfirmQueueIsCmdActive+0x30>)
    c34a:	689a      	ldr	r2, [r3, #8]
    c34c:	1dfb      	adds	r3, r7, #7
    c34e:	781b      	ldrb	r3, [r3, #0]
    c350:	0018      	movs	r0, r3
    c352:	4b06      	ldr	r3, [pc, #24]	; (c36c <LoRaMacConfirmQueueIsCmdActive+0x34>)
    c354:	4798      	blx	r3
    c356:	1e03      	subs	r3, r0, #0
    c358:	d001      	beq.n	c35e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
    c35a:	2301      	movs	r3, #1
    c35c:	e000      	b.n	c360 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
    c35e:	2300      	movs	r3, #0
}
    c360:	0018      	movs	r0, r3
    c362:	46bd      	mov	sp, r7
    c364:	b002      	add	sp, #8
    c366:	bd80      	pop	{r7, pc}
    c368:	200013b8 	.word	0x200013b8
    c36c:	0000c069 	.word	0x0000c069

0000c370 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
    c370:	b580      	push	{r7, lr}
    c372:	b084      	sub	sp, #16
    c374:	af00      	add	r7, sp, #0
    c376:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    c378:	4b2f      	ldr	r3, [pc, #188]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c37a:	691a      	ldr	r2, [r3, #16]
    c37c:	230e      	movs	r3, #14
    c37e:	18fb      	adds	r3, r7, r3
    c380:	7d12      	ldrb	r2, [r2, #20]
    c382:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
    c384:	230d      	movs	r3, #13
    c386:	18fb      	adds	r3, r7, r3
    c388:	2200      	movs	r2, #0
    c38a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
    c38c:	230f      	movs	r3, #15
    c38e:	18fb      	adds	r3, r7, r3
    c390:	2200      	movs	r2, #0
    c392:	701a      	strb	r2, [r3, #0]
    c394:	e043      	b.n	c41e <LoRaMacConfirmQueueHandleCb+0xae>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
    c396:	4b28      	ldr	r3, [pc, #160]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c398:	685b      	ldr	r3, [r3, #4]
    c39a:	781a      	ldrb	r2, [r3, #0]
    c39c:	687b      	ldr	r3, [r7, #4]
    c39e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
    c3a0:	4b25      	ldr	r3, [pc, #148]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3a2:	685b      	ldr	r3, [r3, #4]
    c3a4:	785a      	ldrb	r2, [r3, #1]
    c3a6:	687b      	ldr	r3, [r7, #4]
    c3a8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
    c3aa:	4b23      	ldr	r3, [pc, #140]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3ac:	685a      	ldr	r2, [r3, #4]
    c3ae:	230d      	movs	r3, #13
    c3b0:	18fb      	adds	r3, r7, r3
    c3b2:	7892      	ldrb	r2, [r2, #2]
    c3b4:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
    c3b6:	230d      	movs	r3, #13
    c3b8:	18fb      	adds	r3, r7, r3
    c3ba:	781b      	ldrb	r3, [r3, #0]
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d006      	beq.n	c3ce <LoRaMacConfirmQueueHandleCb+0x5e>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
    c3c0:	4b1d      	ldr	r3, [pc, #116]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	689b      	ldr	r3, [r3, #8]
    c3c6:	687a      	ldr	r2, [r7, #4]
    c3c8:	0010      	movs	r0, r2
    c3ca:	4798      	blx	r3
    c3cc:	e011      	b.n	c3f2 <LoRaMacConfirmQueueHandleCb+0x82>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
    c3ce:	4b1a      	ldr	r3, [pc, #104]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3d0:	685b      	ldr	r3, [r3, #4]
    c3d2:	781a      	ldrb	r2, [r3, #0]
    c3d4:	2308      	movs	r3, #8
    c3d6:	18fb      	adds	r3, r7, r3
    c3d8:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
    c3da:	4b17      	ldr	r3, [pc, #92]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3dc:	685b      	ldr	r3, [r3, #4]
    c3de:	785a      	ldrb	r2, [r3, #1]
    c3e0:	2308      	movs	r3, #8
    c3e2:	18fb      	adds	r3, r7, r3
    c3e4:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
    c3e6:	4b14      	ldr	r3, [pc, #80]	; (c438 <LoRaMacConfirmQueueHandleCb+0xc8>)
    c3e8:	685b      	ldr	r3, [r3, #4]
    c3ea:	78da      	ldrb	r2, [r3, #3]
    c3ec:	2308      	movs	r3, #8
    c3ee:	18fb      	adds	r3, r7, r3
    c3f0:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
    c3f2:	4b12      	ldr	r3, [pc, #72]	; (c43c <LoRaMacConfirmQueueHandleCb+0xcc>)
    c3f4:	4798      	blx	r3

        if( readyToHandle == false )
    c3f6:	230d      	movs	r3, #13
    c3f8:	18fb      	adds	r3, r7, r3
    c3fa:	781b      	ldrb	r3, [r3, #0]
    c3fc:	2201      	movs	r2, #1
    c3fe:	4053      	eors	r3, r2
    c400:	b2db      	uxtb	r3, r3
    c402:	2b00      	cmp	r3, #0
    c404:	d004      	beq.n	c410 <LoRaMacConfirmQueueHandleCb+0xa0>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
    c406:	2308      	movs	r3, #8
    c408:	18fb      	adds	r3, r7, r3
    c40a:	0018      	movs	r0, r3
    c40c:	4b0c      	ldr	r3, [pc, #48]	; (c440 <LoRaMacConfirmQueueHandleCb+0xd0>)
    c40e:	4798      	blx	r3
    for( uint8_t i = 0; i < nbElements; i++ )
    c410:	230f      	movs	r3, #15
    c412:	18fb      	adds	r3, r7, r3
    c414:	781a      	ldrb	r2, [r3, #0]
    c416:	230f      	movs	r3, #15
    c418:	18fb      	adds	r3, r7, r3
    c41a:	3201      	adds	r2, #1
    c41c:	701a      	strb	r2, [r3, #0]
    c41e:	230f      	movs	r3, #15
    c420:	18fa      	adds	r2, r7, r3
    c422:	230e      	movs	r3, #14
    c424:	18fb      	adds	r3, r7, r3
    c426:	7812      	ldrb	r2, [r2, #0]
    c428:	781b      	ldrb	r3, [r3, #0]
    c42a:	429a      	cmp	r2, r3
    c42c:	d3b3      	bcc.n	c396 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
    c42e:	46c0      	nop			; (mov r8, r8)
    c430:	46bd      	mov	sp, r7
    c432:	b004      	add	sp, #16
    c434:	bd80      	pop	{r7, pc}
    c436:	46c0      	nop			; (mov r8, r8)
    c438:	200013b8 	.word	0x200013b8
    c43c:	0000c1d1 	.word	0x0000c1d1
    c440:	0000c165 	.word	0x0000c165

0000c444 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    c444:	b580      	push	{r7, lr}
    c446:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    c448:	4b02      	ldr	r3, [pc, #8]	; (c454 <LoRaMacConfirmQueueGetCnt+0x10>)
    c44a:	691b      	ldr	r3, [r3, #16]
    c44c:	7d1b      	ldrb	r3, [r3, #20]
}
    c44e:	0018      	movs	r0, r3
    c450:	46bd      	mov	sp, r7
    c452:	bd80      	pop	{r7, pc}
    c454:	200013b8 	.word	0x200013b8

0000c458 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    c458:	b580      	push	{r7, lr}
    c45a:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
    c45c:	4b05      	ldr	r3, [pc, #20]	; (c474 <LoRaMacConfirmQueueIsFull+0x1c>)
    c45e:	691b      	ldr	r3, [r3, #16]
    c460:	7d1b      	ldrb	r3, [r3, #20]
    c462:	2b04      	cmp	r3, #4
    c464:	d901      	bls.n	c46a <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
    c466:	2301      	movs	r3, #1
    c468:	e000      	b.n	c46c <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
    c46a:	2300      	movs	r3, #0
    }
}
    c46c:	0018      	movs	r0, r3
    c46e:	46bd      	mov	sp, r7
    c470:	bd80      	pop	{r7, pc}
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	200013b8 	.word	0x200013b8

0000c478 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
    c478:	b590      	push	{r4, r7, lr}
    c47a:	b08f      	sub	sp, #60	; 0x3c
    c47c:	af00      	add	r7, sp, #0
    c47e:	60f8      	str	r0, [r7, #12]
    c480:	0008      	movs	r0, r1
    c482:	0011      	movs	r1, r2
    c484:	607b      	str	r3, [r7, #4]
    c486:	230a      	movs	r3, #10
    c488:	18fb      	adds	r3, r7, r3
    c48a:	1c02      	adds	r2, r0, #0
    c48c:	801a      	strh	r2, [r3, #0]
    c48e:	2309      	movs	r3, #9
    c490:	18fb      	adds	r3, r7, r3
    c492:	1c0a      	adds	r2, r1, #0
    c494:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
    c496:	68fb      	ldr	r3, [r7, #12]
    c498:	2b00      	cmp	r3, #0
    c49a:	d101      	bne.n	c4a0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    c49c:	2307      	movs	r3, #7
    c49e:	e0fe      	b.n	c69e <PayloadEncrypt+0x226>
    }

    uint8_t bufferIndex = 0;
    c4a0:	2337      	movs	r3, #55	; 0x37
    c4a2:	18fb      	adds	r3, r7, r3
    c4a4:	2200      	movs	r2, #0
    c4a6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
    c4a8:	2334      	movs	r3, #52	; 0x34
    c4aa:	18fb      	adds	r3, r7, r3
    c4ac:	2201      	movs	r2, #1
    c4ae:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
    c4b0:	2320      	movs	r3, #32
    c4b2:	18fb      	adds	r3, r7, r3
    c4b4:	0018      	movs	r0, r3
    c4b6:	2310      	movs	r3, #16
    c4b8:	001a      	movs	r2, r3
    c4ba:	2100      	movs	r1, #0
    c4bc:	4b7a      	ldr	r3, [pc, #488]	; (c6a8 <PayloadEncrypt+0x230>)
    c4be:	4798      	blx	r3
    uint8_t aBlock[16] = { 0 };
    c4c0:	2310      	movs	r3, #16
    c4c2:	18fb      	adds	r3, r7, r3
    c4c4:	0018      	movs	r0, r3
    c4c6:	2310      	movs	r3, #16
    c4c8:	001a      	movs	r2, r3
    c4ca:	2100      	movs	r1, #0
    c4cc:	4b76      	ldr	r3, [pc, #472]	; (c6a8 <PayloadEncrypt+0x230>)
    c4ce:	4798      	blx	r3

    aBlock[0] = 0x01;
    c4d0:	2310      	movs	r3, #16
    c4d2:	18fb      	adds	r3, r7, r3
    c4d4:	2201      	movs	r2, #1
    c4d6:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
    c4d8:	2310      	movs	r3, #16
    c4da:	18fb      	adds	r3, r7, r3
    c4dc:	2248      	movs	r2, #72	; 0x48
    c4de:	18ba      	adds	r2, r7, r2
    c4e0:	7812      	ldrb	r2, [r2, #0]
    c4e2:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	b2da      	uxtb	r2, r3
    c4e8:	2310      	movs	r3, #16
    c4ea:	18fb      	adds	r3, r7, r3
    c4ec:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	0a1b      	lsrs	r3, r3, #8
    c4f2:	b2da      	uxtb	r2, r3
    c4f4:	2310      	movs	r3, #16
    c4f6:	18fb      	adds	r3, r7, r3
    c4f8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	0c1b      	lsrs	r3, r3, #16
    c4fe:	b2da      	uxtb	r2, r3
    c500:	2310      	movs	r3, #16
    c502:	18fb      	adds	r3, r7, r3
    c504:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    c506:	687b      	ldr	r3, [r7, #4]
    c508:	0e1b      	lsrs	r3, r3, #24
    c50a:	b2da      	uxtb	r2, r3
    c50c:	2310      	movs	r3, #16
    c50e:	18fb      	adds	r3, r7, r3
    c510:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
    c512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c514:	b2da      	uxtb	r2, r3
    c516:	2310      	movs	r3, #16
    c518:	18fb      	adds	r3, r7, r3
    c51a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c51e:	0a1b      	lsrs	r3, r3, #8
    c520:	b2da      	uxtb	r2, r3
    c522:	2310      	movs	r3, #16
    c524:	18fb      	adds	r3, r7, r3
    c526:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    c528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c52a:	0c1b      	lsrs	r3, r3, #16
    c52c:	b2da      	uxtb	r2, r3
    c52e:	2310      	movs	r3, #16
    c530:	18fb      	adds	r3, r7, r3
    c532:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    c534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c536:	0e1b      	lsrs	r3, r3, #24
    c538:	b2da      	uxtb	r2, r3
    c53a:	2310      	movs	r3, #16
    c53c:	18fb      	adds	r3, r7, r3
    c53e:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
    c540:	e059      	b.n	c5f6 <PayloadEncrypt+0x17e>
    {
        aBlock[15] = ctr & 0xFF;
    c542:	2334      	movs	r3, #52	; 0x34
    c544:	18fb      	adds	r3, r7, r3
    c546:	881b      	ldrh	r3, [r3, #0]
    c548:	b2da      	uxtb	r2, r3
    c54a:	2310      	movs	r3, #16
    c54c:	18fb      	adds	r3, r7, r3
    c54e:	73da      	strb	r2, [r3, #15]
        ctr++;
    c550:	2334      	movs	r3, #52	; 0x34
    c552:	18fb      	adds	r3, r7, r3
    c554:	881a      	ldrh	r2, [r3, #0]
    c556:	2334      	movs	r3, #52	; 0x34
    c558:	18fb      	adds	r3, r7, r3
    c55a:	3201      	adds	r2, #1
    c55c:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    c55e:	2320      	movs	r3, #32
    c560:	18f9      	adds	r1, r7, r3
    c562:	2309      	movs	r3, #9
    c564:	18fb      	adds	r3, r7, r3
    c566:	781a      	ldrb	r2, [r3, #0]
    c568:	2310      	movs	r3, #16
    c56a:	18f8      	adds	r0, r7, r3
    c56c:	000b      	movs	r3, r1
    c56e:	2110      	movs	r1, #16
    c570:	4c4e      	ldr	r4, [pc, #312]	; (c6ac <PayloadEncrypt+0x234>)
    c572:	47a0      	blx	r4
    c574:	1e03      	subs	r3, r0, #0
    c576:	d001      	beq.n	c57c <PayloadEncrypt+0x104>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    c578:	230c      	movs	r3, #12
    c57a:	e090      	b.n	c69e <PayloadEncrypt+0x226>
        }

        for( uint8_t i = 0; i < 16; i++ )
    c57c:	2333      	movs	r3, #51	; 0x33
    c57e:	18fb      	adds	r3, r7, r3
    c580:	2200      	movs	r2, #0
    c582:	701a      	strb	r2, [r3, #0]
    c584:	e024      	b.n	c5d0 <PayloadEncrypt+0x158>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    c586:	2337      	movs	r3, #55	; 0x37
    c588:	18fb      	adds	r3, r7, r3
    c58a:	781a      	ldrb	r2, [r3, #0]
    c58c:	2333      	movs	r3, #51	; 0x33
    c58e:	18fb      	adds	r3, r7, r3
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	18d3      	adds	r3, r2, r3
    c594:	001a      	movs	r2, r3
    c596:	68fb      	ldr	r3, [r7, #12]
    c598:	189b      	adds	r3, r3, r2
    c59a:	2237      	movs	r2, #55	; 0x37
    c59c:	18ba      	adds	r2, r7, r2
    c59e:	7811      	ldrb	r1, [r2, #0]
    c5a0:	2233      	movs	r2, #51	; 0x33
    c5a2:	18ba      	adds	r2, r7, r2
    c5a4:	7812      	ldrb	r2, [r2, #0]
    c5a6:	188a      	adds	r2, r1, r2
    c5a8:	0011      	movs	r1, r2
    c5aa:	68fa      	ldr	r2, [r7, #12]
    c5ac:	1852      	adds	r2, r2, r1
    c5ae:	7811      	ldrb	r1, [r2, #0]
    c5b0:	2233      	movs	r2, #51	; 0x33
    c5b2:	18ba      	adds	r2, r7, r2
    c5b4:	7812      	ldrb	r2, [r2, #0]
    c5b6:	2020      	movs	r0, #32
    c5b8:	1838      	adds	r0, r7, r0
    c5ba:	5c82      	ldrb	r2, [r0, r2]
    c5bc:	404a      	eors	r2, r1
    c5be:	b2d2      	uxtb	r2, r2
    c5c0:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
    c5c2:	2333      	movs	r3, #51	; 0x33
    c5c4:	18fb      	adds	r3, r7, r3
    c5c6:	781a      	ldrb	r2, [r3, #0]
    c5c8:	2333      	movs	r3, #51	; 0x33
    c5ca:	18fb      	adds	r3, r7, r3
    c5cc:	3201      	adds	r2, #1
    c5ce:	701a      	strb	r2, [r3, #0]
    c5d0:	2333      	movs	r3, #51	; 0x33
    c5d2:	18fb      	adds	r3, r7, r3
    c5d4:	781b      	ldrb	r3, [r3, #0]
    c5d6:	2b0f      	cmp	r3, #15
    c5d8:	d9d5      	bls.n	c586 <PayloadEncrypt+0x10e>
        }
        size -= 16;
    c5da:	230a      	movs	r3, #10
    c5dc:	18fb      	adds	r3, r7, r3
    c5de:	220a      	movs	r2, #10
    c5e0:	18ba      	adds	r2, r7, r2
    c5e2:	8812      	ldrh	r2, [r2, #0]
    c5e4:	3a10      	subs	r2, #16
    c5e6:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
    c5e8:	2337      	movs	r3, #55	; 0x37
    c5ea:	18fb      	adds	r3, r7, r3
    c5ec:	2237      	movs	r2, #55	; 0x37
    c5ee:	18ba      	adds	r2, r7, r2
    c5f0:	7812      	ldrb	r2, [r2, #0]
    c5f2:	3210      	adds	r2, #16
    c5f4:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
    c5f6:	230a      	movs	r3, #10
    c5f8:	18fb      	adds	r3, r7, r3
    c5fa:	881b      	ldrh	r3, [r3, #0]
    c5fc:	2b0f      	cmp	r3, #15
    c5fe:	d8a0      	bhi.n	c542 <PayloadEncrypt+0xca>
    }

    if( size > 0 )
    c600:	230a      	movs	r3, #10
    c602:	18fb      	adds	r3, r7, r3
    c604:	881b      	ldrh	r3, [r3, #0]
    c606:	2b00      	cmp	r3, #0
    c608:	d048      	beq.n	c69c <PayloadEncrypt+0x224>
    {
        aBlock[15] = ctr & 0xFF;
    c60a:	2334      	movs	r3, #52	; 0x34
    c60c:	18fb      	adds	r3, r7, r3
    c60e:	881b      	ldrh	r3, [r3, #0]
    c610:	b2da      	uxtb	r2, r3
    c612:	2310      	movs	r3, #16
    c614:	18fb      	adds	r3, r7, r3
    c616:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
    c618:	2320      	movs	r3, #32
    c61a:	18f9      	adds	r1, r7, r3
    c61c:	2309      	movs	r3, #9
    c61e:	18fb      	adds	r3, r7, r3
    c620:	781a      	ldrb	r2, [r3, #0]
    c622:	2310      	movs	r3, #16
    c624:	18f8      	adds	r0, r7, r3
    c626:	000b      	movs	r3, r1
    c628:	2110      	movs	r1, #16
    c62a:	4c20      	ldr	r4, [pc, #128]	; (c6ac <PayloadEncrypt+0x234>)
    c62c:	47a0      	blx	r4
    c62e:	1e03      	subs	r3, r0, #0
    c630:	d001      	beq.n	c636 <PayloadEncrypt+0x1be>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    c632:	230c      	movs	r3, #12
    c634:	e033      	b.n	c69e <PayloadEncrypt+0x226>
        }
        for( uint8_t i = 0; i < size; i++ )
    c636:	2332      	movs	r3, #50	; 0x32
    c638:	18fb      	adds	r3, r7, r3
    c63a:	2200      	movs	r2, #0
    c63c:	701a      	strb	r2, [r3, #0]
    c63e:	e024      	b.n	c68a <PayloadEncrypt+0x212>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    c640:	2337      	movs	r3, #55	; 0x37
    c642:	18fb      	adds	r3, r7, r3
    c644:	781a      	ldrb	r2, [r3, #0]
    c646:	2332      	movs	r3, #50	; 0x32
    c648:	18fb      	adds	r3, r7, r3
    c64a:	781b      	ldrb	r3, [r3, #0]
    c64c:	18d3      	adds	r3, r2, r3
    c64e:	001a      	movs	r2, r3
    c650:	68fb      	ldr	r3, [r7, #12]
    c652:	189b      	adds	r3, r3, r2
    c654:	2237      	movs	r2, #55	; 0x37
    c656:	18ba      	adds	r2, r7, r2
    c658:	7811      	ldrb	r1, [r2, #0]
    c65a:	2232      	movs	r2, #50	; 0x32
    c65c:	18ba      	adds	r2, r7, r2
    c65e:	7812      	ldrb	r2, [r2, #0]
    c660:	188a      	adds	r2, r1, r2
    c662:	0011      	movs	r1, r2
    c664:	68fa      	ldr	r2, [r7, #12]
    c666:	1852      	adds	r2, r2, r1
    c668:	7811      	ldrb	r1, [r2, #0]
    c66a:	2232      	movs	r2, #50	; 0x32
    c66c:	18ba      	adds	r2, r7, r2
    c66e:	7812      	ldrb	r2, [r2, #0]
    c670:	2020      	movs	r0, #32
    c672:	1838      	adds	r0, r7, r0
    c674:	5c82      	ldrb	r2, [r0, r2]
    c676:	404a      	eors	r2, r1
    c678:	b2d2      	uxtb	r2, r2
    c67a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
    c67c:	2332      	movs	r3, #50	; 0x32
    c67e:	18fb      	adds	r3, r7, r3
    c680:	781a      	ldrb	r2, [r3, #0]
    c682:	2332      	movs	r3, #50	; 0x32
    c684:	18fb      	adds	r3, r7, r3
    c686:	3201      	adds	r2, #1
    c688:	701a      	strb	r2, [r3, #0]
    c68a:	2332      	movs	r3, #50	; 0x32
    c68c:	18fb      	adds	r3, r7, r3
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	b29b      	uxth	r3, r3
    c692:	220a      	movs	r2, #10
    c694:	18ba      	adds	r2, r7, r2
    c696:	8812      	ldrh	r2, [r2, #0]
    c698:	429a      	cmp	r2, r3
    c69a:	d8d1      	bhi.n	c640 <PayloadEncrypt+0x1c8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
    c69c:	2300      	movs	r3, #0
}
    c69e:	0018      	movs	r0, r3
    c6a0:	46bd      	mov	sp, r7
    c6a2:	b00f      	add	sp, #60	; 0x3c
    c6a4:	bd90      	pop	{r4, r7, pc}
    c6a6:	46c0      	nop			; (mov r8, r8)
    c6a8:	0001a0e1 	.word	0x0001a0e1
    c6ac:	00013165 	.word	0x00013165

0000c6b0 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
    c6b0:	b590      	push	{r4, r7, lr}
    c6b2:	b08d      	sub	sp, #52	; 0x34
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	0004      	movs	r4, r0
    c6b8:	6039      	str	r1, [r7, #0]
    c6ba:	0010      	movs	r0, r2
    c6bc:	0019      	movs	r1, r3
    c6be:	1dbb      	adds	r3, r7, #6
    c6c0:	1c22      	adds	r2, r4, #0
    c6c2:	801a      	strh	r2, [r3, #0]
    c6c4:	1d7b      	adds	r3, r7, #5
    c6c6:	1c02      	adds	r2, r0, #0
    c6c8:	701a      	strb	r2, [r3, #0]
    c6ca:	1d3b      	adds	r3, r7, #4
    c6cc:	1c0a      	adds	r2, r1, #0
    c6ce:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
    c6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c6d2:	2b00      	cmp	r3, #0
    c6d4:	d101      	bne.n	c6da <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    c6d6:	2307      	movs	r3, #7
    c6d8:	e08d      	b.n	c7f6 <FOptsEncrypt+0x146>
    }

    uint8_t bufferIndex = 0;
    c6da:	232e      	movs	r3, #46	; 0x2e
    c6dc:	18fb      	adds	r3, r7, r3
    c6de:	2200      	movs	r2, #0
    c6e0:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
    c6e2:	231c      	movs	r3, #28
    c6e4:	18fb      	adds	r3, r7, r3
    c6e6:	0018      	movs	r0, r3
    c6e8:	2310      	movs	r3, #16
    c6ea:	001a      	movs	r2, r3
    c6ec:	2100      	movs	r1, #0
    c6ee:	4b44      	ldr	r3, [pc, #272]	; (c800 <FOptsEncrypt+0x150>)
    c6f0:	4798      	blx	r3
    uint8_t aBlock[16] = { 0 };
    c6f2:	230c      	movs	r3, #12
    c6f4:	18fb      	adds	r3, r7, r3
    c6f6:	0018      	movs	r0, r3
    c6f8:	2310      	movs	r3, #16
    c6fa:	001a      	movs	r2, r3
    c6fc:	2100      	movs	r1, #0
    c6fe:	4b40      	ldr	r3, [pc, #256]	; (c800 <FOptsEncrypt+0x150>)
    c700:	4798      	blx	r3

    aBlock[0] = 0x01;
    c702:	230c      	movs	r3, #12
    c704:	18fb      	adds	r3, r7, r3
    c706:	2201      	movs	r2, #1
    c708:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
    c70a:	230c      	movs	r3, #12
    c70c:	18fb      	adds	r3, r7, r3
    c70e:	1d7a      	adds	r2, r7, #5
    c710:	7812      	ldrb	r2, [r2, #0]
    c712:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
    c714:	683b      	ldr	r3, [r7, #0]
    c716:	b2da      	uxtb	r2, r3
    c718:	230c      	movs	r3, #12
    c71a:	18fb      	adds	r3, r7, r3
    c71c:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	0a1b      	lsrs	r3, r3, #8
    c722:	b2da      	uxtb	r2, r3
    c724:	230c      	movs	r3, #12
    c726:	18fb      	adds	r3, r7, r3
    c728:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
    c72a:	683b      	ldr	r3, [r7, #0]
    c72c:	0c1b      	lsrs	r3, r3, #16
    c72e:	b2da      	uxtb	r2, r3
    c730:	230c      	movs	r3, #12
    c732:	18fb      	adds	r3, r7, r3
    c734:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
    c736:	683b      	ldr	r3, [r7, #0]
    c738:	0e1b      	lsrs	r3, r3, #24
    c73a:	b2da      	uxtb	r2, r3
    c73c:	230c      	movs	r3, #12
    c73e:	18fb      	adds	r3, r7, r3
    c740:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
    c742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c744:	b2da      	uxtb	r2, r3
    c746:	230c      	movs	r3, #12
    c748:	18fb      	adds	r3, r7, r3
    c74a:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
    c74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c74e:	0a1b      	lsrs	r3, r3, #8
    c750:	b2da      	uxtb	r2, r3
    c752:	230c      	movs	r3, #12
    c754:	18fb      	adds	r3, r7, r3
    c756:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
    c758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c75a:	0c1b      	lsrs	r3, r3, #16
    c75c:	b2da      	uxtb	r2, r3
    c75e:	230c      	movs	r3, #12
    c760:	18fb      	adds	r3, r7, r3
    c762:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
    c764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c766:	0e1b      	lsrs	r3, r3, #24
    c768:	b2da      	uxtb	r2, r3
    c76a:	230c      	movs	r3, #12
    c76c:	18fb      	adds	r3, r7, r3
    c76e:	735a      	strb	r2, [r3, #13]

    if( size > 0 )
    c770:	1dbb      	adds	r3, r7, #6
    c772:	881b      	ldrh	r3, [r3, #0]
    c774:	2b00      	cmp	r3, #0
    c776:	d03d      	beq.n	c7f4 <FOptsEncrypt+0x144>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
    c778:	231c      	movs	r3, #28
    c77a:	18fb      	adds	r3, r7, r3
    c77c:	220c      	movs	r2, #12
    c77e:	18b8      	adds	r0, r7, r2
    c780:	2206      	movs	r2, #6
    c782:	2110      	movs	r1, #16
    c784:	4c1f      	ldr	r4, [pc, #124]	; (c804 <FOptsEncrypt+0x154>)
    c786:	47a0      	blx	r4
    c788:	1e03      	subs	r3, r0, #0
    c78a:	d001      	beq.n	c790 <FOptsEncrypt+0xe0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    c78c:	230c      	movs	r3, #12
    c78e:	e032      	b.n	c7f6 <FOptsEncrypt+0x146>
        }
        for( uint8_t i = 0; i < size; i++ )
    c790:	232f      	movs	r3, #47	; 0x2f
    c792:	18fb      	adds	r3, r7, r3
    c794:	2200      	movs	r2, #0
    c796:	701a      	strb	r2, [r3, #0]
    c798:	e024      	b.n	c7e4 <FOptsEncrypt+0x134>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
    c79a:	232e      	movs	r3, #46	; 0x2e
    c79c:	18fb      	adds	r3, r7, r3
    c79e:	781a      	ldrb	r2, [r3, #0]
    c7a0:	232f      	movs	r3, #47	; 0x2f
    c7a2:	18fb      	adds	r3, r7, r3
    c7a4:	781b      	ldrb	r3, [r3, #0]
    c7a6:	18d3      	adds	r3, r2, r3
    c7a8:	001a      	movs	r2, r3
    c7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c7ac:	189b      	adds	r3, r3, r2
    c7ae:	222e      	movs	r2, #46	; 0x2e
    c7b0:	18ba      	adds	r2, r7, r2
    c7b2:	7811      	ldrb	r1, [r2, #0]
    c7b4:	222f      	movs	r2, #47	; 0x2f
    c7b6:	18ba      	adds	r2, r7, r2
    c7b8:	7812      	ldrb	r2, [r2, #0]
    c7ba:	188a      	adds	r2, r1, r2
    c7bc:	0011      	movs	r1, r2
    c7be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c7c0:	1852      	adds	r2, r2, r1
    c7c2:	7811      	ldrb	r1, [r2, #0]
    c7c4:	222f      	movs	r2, #47	; 0x2f
    c7c6:	18ba      	adds	r2, r7, r2
    c7c8:	7812      	ldrb	r2, [r2, #0]
    c7ca:	201c      	movs	r0, #28
    c7cc:	1838      	adds	r0, r7, r0
    c7ce:	5c82      	ldrb	r2, [r0, r2]
    c7d0:	404a      	eors	r2, r1
    c7d2:	b2d2      	uxtb	r2, r2
    c7d4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
    c7d6:	232f      	movs	r3, #47	; 0x2f
    c7d8:	18fb      	adds	r3, r7, r3
    c7da:	781a      	ldrb	r2, [r3, #0]
    c7dc:	232f      	movs	r3, #47	; 0x2f
    c7de:	18fb      	adds	r3, r7, r3
    c7e0:	3201      	adds	r2, #1
    c7e2:	701a      	strb	r2, [r3, #0]
    c7e4:	232f      	movs	r3, #47	; 0x2f
    c7e6:	18fb      	adds	r3, r7, r3
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	b29b      	uxth	r3, r3
    c7ec:	1dba      	adds	r2, r7, #6
    c7ee:	8812      	ldrh	r2, [r2, #0]
    c7f0:	429a      	cmp	r2, r3
    c7f2:	d8d2      	bhi.n	c79a <FOptsEncrypt+0xea>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
    c7f4:	2300      	movs	r3, #0
}
    c7f6:	0018      	movs	r0, r3
    c7f8:	46bd      	mov	sp, r7
    c7fa:	b00d      	add	sp, #52	; 0x34
    c7fc:	bd90      	pop	{r4, r7, pc}
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	0001a0e1 	.word	0x0001a0e1
    c804:	00013165 	.word	0x00013165

0000c808 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
    c808:	b590      	push	{r4, r7, lr}
    c80a:	b085      	sub	sp, #20
    c80c:	af00      	add	r7, sp, #0
    c80e:	60f8      	str	r0, [r7, #12]
    c810:	0008      	movs	r0, r1
    c812:	0011      	movs	r1, r2
    c814:	607b      	str	r3, [r7, #4]
    c816:	230a      	movs	r3, #10
    c818:	18fb      	adds	r3, r7, r3
    c81a:	1c02      	adds	r2, r0, #0
    c81c:	801a      	strh	r2, [r3, #0]
    c81e:	2309      	movs	r3, #9
    c820:	18fb      	adds	r3, r7, r3
    c822:	1c0a      	adds	r2, r1, #0
    c824:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    c826:	687c      	ldr	r4, [r7, #4]
    c828:	2309      	movs	r3, #9
    c82a:	18fb      	adds	r3, r7, r3
    c82c:	781a      	ldrb	r2, [r3, #0]
    c82e:	230a      	movs	r3, #10
    c830:	18fb      	adds	r3, r7, r3
    c832:	8819      	ldrh	r1, [r3, #0]
    c834:	68f8      	ldr	r0, [r7, #12]
    c836:	0023      	movs	r3, r4
    c838:	4c05      	ldr	r4, [pc, #20]	; (c850 <ComputeCmac+0x48>)
    c83a:	47a0      	blx	r4
    c83c:	1e03      	subs	r3, r0, #0
    c83e:	d001      	beq.n	c844 <ComputeCmac+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    c840:	230c      	movs	r3, #12
    c842:	e000      	b.n	c846 <ComputeCmac+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    c844:	2300      	movs	r3, #0
}
    c846:	0018      	movs	r0, r3
    c848:	46bd      	mov	sp, r7
    c84a:	b005      	add	sp, #20
    c84c:	bd90      	pop	{r4, r7, pc}
    c84e:	46c0      	nop			; (mov r8, r8)
    c850:	0001308d 	.word	0x0001308d

0000c854 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
    c854:	b590      	push	{r4, r7, lr}
    c856:	b085      	sub	sp, #20
    c858:	af00      	add	r7, sp, #0
    c85a:	60f8      	str	r0, [r7, #12]
    c85c:	0008      	movs	r0, r1
    c85e:	0011      	movs	r1, r2
    c860:	607b      	str	r3, [r7, #4]
    c862:	230a      	movs	r3, #10
    c864:	18fb      	adds	r3, r7, r3
    c866:	1c02      	adds	r2, r0, #0
    c868:	801a      	strh	r2, [r3, #0]
    c86a:	2309      	movs	r3, #9
    c86c:	18fb      	adds	r3, r7, r3
    c86e:	1c0a      	adds	r2, r1, #0
    c870:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
    c872:	2309      	movs	r3, #9
    c874:	18fb      	adds	r3, r7, r3
    c876:	781c      	ldrb	r4, [r3, #0]
    c878:	687a      	ldr	r2, [r7, #4]
    c87a:	230a      	movs	r3, #10
    c87c:	18fb      	adds	r3, r7, r3
    c87e:	8819      	ldrh	r1, [r3, #0]
    c880:	68f8      	ldr	r0, [r7, #12]
    c882:	0023      	movs	r3, r4
    c884:	4c05      	ldr	r4, [pc, #20]	; (c89c <VerifyCmac+0x48>)
    c886:	47a0      	blx	r4
    c888:	1e03      	subs	r3, r0, #0
    c88a:	d001      	beq.n	c890 <VerifyCmac+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    c88c:	230c      	movs	r3, #12
    c88e:	e000      	b.n	c892 <VerifyCmac+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    c890:	2300      	movs	r3, #0
}
    c892:	0018      	movs	r0, r3
    c894:	46bd      	mov	sp, r7
    c896:	b005      	add	sp, #20
    c898:	bd90      	pop	{r4, r7, pc}
    c89a:	46c0      	nop			; (mov r8, r8)
    c89c:	000130dd 	.word	0x000130dd

0000c8a0 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
    c8a0:	b5b0      	push	{r4, r5, r7, lr}
    c8a2:	b084      	sub	sp, #16
    c8a4:	af00      	add	r7, sp, #0
    c8a6:	0005      	movs	r5, r0
    c8a8:	000c      	movs	r4, r1
    c8aa:	0010      	movs	r0, r2
    c8ac:	0019      	movs	r1, r3
    c8ae:	1dbb      	adds	r3, r7, #6
    c8b0:	1c2a      	adds	r2, r5, #0
    c8b2:	801a      	strh	r2, [r3, #0]
    c8b4:	1d7b      	adds	r3, r7, #5
    c8b6:	1c22      	adds	r2, r4, #0
    c8b8:	701a      	strb	r2, [r3, #0]
    c8ba:	1d3b      	adds	r3, r7, #4
    c8bc:	1c02      	adds	r2, r0, #0
    c8be:	701a      	strb	r2, [r3, #0]
    c8c0:	1cfb      	adds	r3, r7, #3
    c8c2:	1c0a      	adds	r2, r1, #0
    c8c4:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
    c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d101      	bne.n	c8d0 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    c8cc:	2307      	movs	r3, #7
    c8ce:	e07a      	b.n	c9c6 <PrepareB0+0x126>
    }

    b0[0] = 0x49;
    c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8d2:	2249      	movs	r2, #73	; 0x49
    c8d4:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
    c8d6:	1d3b      	adds	r3, r7, #4
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d025      	beq.n	c92a <PrepareB0+0x8a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
    c8de:	230e      	movs	r3, #14
    c8e0:	18fb      	adds	r3, r7, r3
    c8e2:	2200      	movs	r2, #0
    c8e4:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
    c8e6:	1cfb      	adds	r3, r7, #3
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d106      	bne.n	c8fc <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
    c8ee:	4b38      	ldr	r3, [pc, #224]	; (c9d0 <PrepareB0+0x130>)
    c8f0:	689b      	ldr	r3, [r3, #8]
    c8f2:	695a      	ldr	r2, [r3, #20]
    c8f4:	230e      	movs	r3, #14
    c8f6:	18fb      	adds	r3, r7, r3
    c8f8:	801a      	strh	r2, [r3, #0]
    c8fa:	e005      	b.n	c908 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
    c8fc:	4b34      	ldr	r3, [pc, #208]	; (c9d0 <PrepareB0+0x130>)
    c8fe:	689b      	ldr	r3, [r3, #8]
    c900:	689a      	ldr	r2, [r3, #8]
    c902:	230e      	movs	r3, #14
    c904:	18fb      	adds	r3, r7, r3
    c906:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
    c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c90a:	3301      	adds	r3, #1
    c90c:	220e      	movs	r2, #14
    c90e:	18ba      	adds	r2, r7, r2
    c910:	8812      	ldrh	r2, [r2, #0]
    c912:	b2d2      	uxtb	r2, r2
    c914:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c918:	3302      	adds	r3, #2
    c91a:	220e      	movs	r2, #14
    c91c:	18ba      	adds	r2, r7, r2
    c91e:	8812      	ldrh	r2, [r2, #0]
    c920:	0a12      	lsrs	r2, r2, #8
    c922:	b292      	uxth	r2, r2
    c924:	b2d2      	uxtb	r2, r2
    c926:	701a      	strb	r2, [r3, #0]
    c928:	e007      	b.n	c93a <PrepareB0+0x9a>
    }
    else
    {
        b0[1] = 0x00;
    c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c92c:	3301      	adds	r3, #1
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
    c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c934:	3302      	adds	r3, #2
    c936:	2200      	movs	r2, #0
    c938:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
    c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c93c:	3303      	adds	r3, #3
    c93e:	2200      	movs	r2, #0
    c940:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
    c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c944:	3304      	adds	r3, #4
    c946:	2200      	movs	r2, #0
    c948:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
    c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c94c:	3305      	adds	r3, #5
    c94e:	1cfa      	adds	r2, r7, #3
    c950:	7812      	ldrb	r2, [r2, #0]
    c952:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
    c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c956:	3306      	adds	r3, #6
    c958:	6a3a      	ldr	r2, [r7, #32]
    c95a:	b2d2      	uxtb	r2, r2
    c95c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
    c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c960:	3307      	adds	r3, #7
    c962:	6a3a      	ldr	r2, [r7, #32]
    c964:	0a12      	lsrs	r2, r2, #8
    c966:	b2d2      	uxtb	r2, r2
    c968:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
    c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c96c:	3308      	adds	r3, #8
    c96e:	6a3a      	ldr	r2, [r7, #32]
    c970:	0c12      	lsrs	r2, r2, #16
    c972:	b2d2      	uxtb	r2, r2
    c974:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
    c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c978:	3309      	adds	r3, #9
    c97a:	6a3a      	ldr	r2, [r7, #32]
    c97c:	0e12      	lsrs	r2, r2, #24
    c97e:	b2d2      	uxtb	r2, r2
    c980:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
    c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c984:	330a      	adds	r3, #10
    c986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c988:	b2d2      	uxtb	r2, r2
    c98a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
    c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c98e:	330b      	adds	r3, #11
    c990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c992:	0a12      	lsrs	r2, r2, #8
    c994:	b2d2      	uxtb	r2, r2
    c996:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
    c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c99a:	330c      	adds	r3, #12
    c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c99e:	0c12      	lsrs	r2, r2, #16
    c9a0:	b2d2      	uxtb	r2, r2
    c9a2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
    c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9a6:	330d      	adds	r3, #13
    c9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c9aa:	0e12      	lsrs	r2, r2, #24
    c9ac:	b2d2      	uxtb	r2, r2
    c9ae:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
    c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9b2:	330e      	adds	r3, #14
    c9b4:	2200      	movs	r2, #0
    c9b6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
    c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9ba:	330f      	adds	r3, #15
    c9bc:	1dba      	adds	r2, r7, #6
    c9be:	8812      	ldrh	r2, [r2, #0]
    c9c0:	b2d2      	uxtb	r2, r2
    c9c2:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
    c9c4:	2300      	movs	r3, #0
}
    c9c6:	0018      	movs	r0, r3
    c9c8:	46bd      	mov	sp, r7
    c9ca:	b004      	add	sp, #16
    c9cc:	bdb0      	pop	{r4, r5, r7, pc}
    c9ce:	46c0      	nop			; (mov r8, r8)
    c9d0:	200013cc 	.word	0x200013cc

0000c9d4 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
    c9d4:	b590      	push	{r4, r7, lr}
    c9d6:	b0cb      	sub	sp, #300	; 0x12c
    c9d8:	af04      	add	r7, sp, #16
    c9da:	6078      	str	r0, [r7, #4]
    c9dc:	000c      	movs	r4, r1
    c9de:	0010      	movs	r0, r2
    c9e0:	0019      	movs	r1, r3
    c9e2:	4b48      	ldr	r3, [pc, #288]	; (cb04 <ComputeCmacB0+0x130>)
    c9e4:	228c      	movs	r2, #140	; 0x8c
    c9e6:	0052      	lsls	r2, r2, #1
    c9e8:	4694      	mov	ip, r2
    c9ea:	44bc      	add	ip, r7
    c9ec:	4463      	add	r3, ip
    c9ee:	1c22      	adds	r2, r4, #0
    c9f0:	801a      	strh	r2, [r3, #0]
    c9f2:	4b45      	ldr	r3, [pc, #276]	; (cb08 <ComputeCmacB0+0x134>)
    c9f4:	228c      	movs	r2, #140	; 0x8c
    c9f6:	0052      	lsls	r2, r2, #1
    c9f8:	4694      	mov	ip, r2
    c9fa:	44bc      	add	ip, r7
    c9fc:	4463      	add	r3, ip
    c9fe:	1c02      	adds	r2, r0, #0
    ca00:	701a      	strb	r2, [r3, #0]
    ca02:	4b42      	ldr	r3, [pc, #264]	; (cb0c <ComputeCmacB0+0x138>)
    ca04:	228c      	movs	r2, #140	; 0x8c
    ca06:	0052      	lsls	r2, r2, #1
    ca08:	4694      	mov	ip, r2
    ca0a:	44bc      	add	ip, r7
    ca0c:	4463      	add	r3, ip
    ca0e:	1c0a      	adds	r2, r1, #0
    ca10:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    ca12:	687b      	ldr	r3, [r7, #4]
    ca14:	2b00      	cmp	r3, #0
    ca16:	d005      	beq.n	ca24 <ComputeCmacB0+0x50>
    ca18:	239a      	movs	r3, #154	; 0x9a
    ca1a:	005b      	lsls	r3, r3, #1
    ca1c:	18fb      	adds	r3, r7, r3
    ca1e:	681b      	ldr	r3, [r3, #0]
    ca20:	2b00      	cmp	r3, #0
    ca22:	d101      	bne.n	ca28 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    ca24:	2307      	movs	r3, #7
    ca26:	e069      	b.n	cafc <ComputeCmacB0+0x128>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    ca28:	4b36      	ldr	r3, [pc, #216]	; (cb04 <ComputeCmacB0+0x130>)
    ca2a:	228c      	movs	r2, #140	; 0x8c
    ca2c:	0052      	lsls	r2, r2, #1
    ca2e:	4694      	mov	ip, r2
    ca30:	44bc      	add	ip, r7
    ca32:	4463      	add	r3, ip
    ca34:	881a      	ldrh	r2, [r3, #0]
    ca36:	2380      	movs	r3, #128	; 0x80
    ca38:	005b      	lsls	r3, r3, #1
    ca3a:	429a      	cmp	r2, r3
    ca3c:	d901      	bls.n	ca42 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    ca3e:	230b      	movs	r3, #11
    ca40:	e05c      	b.n	cafc <ComputeCmacB0+0x128>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    ca42:	2388      	movs	r3, #136	; 0x88
    ca44:	005a      	lsls	r2, r3, #1
    ca46:	2308      	movs	r3, #8
    ca48:	18fb      	adds	r3, r7, r3
    ca4a:	2100      	movs	r1, #0
    ca4c:	0018      	movs	r0, r3
    ca4e:	4b30      	ldr	r3, [pc, #192]	; (cb10 <ComputeCmacB0+0x13c>)
    ca50:	4798      	blx	r3

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
    ca52:	2394      	movs	r3, #148	; 0x94
    ca54:	005b      	lsls	r3, r3, #1
    ca56:	18fb      	adds	r3, r7, r3
    ca58:	781c      	ldrb	r4, [r3, #0]
    ca5a:	4b2c      	ldr	r3, [pc, #176]	; (cb0c <ComputeCmacB0+0x138>)
    ca5c:	228c      	movs	r2, #140	; 0x8c
    ca5e:	0052      	lsls	r2, r2, #1
    ca60:	4694      	mov	ip, r2
    ca62:	44bc      	add	ip, r7
    ca64:	4463      	add	r3, ip
    ca66:	781a      	ldrb	r2, [r3, #0]
    ca68:	4b27      	ldr	r3, [pc, #156]	; (cb08 <ComputeCmacB0+0x134>)
    ca6a:	218c      	movs	r1, #140	; 0x8c
    ca6c:	0049      	lsls	r1, r1, #1
    ca6e:	468c      	mov	ip, r1
    ca70:	44bc      	add	ip, r7
    ca72:	4463      	add	r3, ip
    ca74:	7819      	ldrb	r1, [r3, #0]
    ca76:	4b23      	ldr	r3, [pc, #140]	; (cb04 <ComputeCmacB0+0x130>)
    ca78:	208c      	movs	r0, #140	; 0x8c
    ca7a:	0040      	lsls	r0, r0, #1
    ca7c:	4684      	mov	ip, r0
    ca7e:	44bc      	add	ip, r7
    ca80:	4463      	add	r3, ip
    ca82:	8818      	ldrh	r0, [r3, #0]
    ca84:	2308      	movs	r3, #8
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	9302      	str	r3, [sp, #8]
    ca8a:	2398      	movs	r3, #152	; 0x98
    ca8c:	005b      	lsls	r3, r3, #1
    ca8e:	18fb      	adds	r3, r7, r3
    ca90:	681b      	ldr	r3, [r3, #0]
    ca92:	9301      	str	r3, [sp, #4]
    ca94:	2396      	movs	r3, #150	; 0x96
    ca96:	005b      	lsls	r3, r3, #1
    ca98:	18fb      	adds	r3, r7, r3
    ca9a:	681b      	ldr	r3, [r3, #0]
    ca9c:	9300      	str	r3, [sp, #0]
    ca9e:	0023      	movs	r3, r4
    caa0:	4c1c      	ldr	r4, [pc, #112]	; (cb14 <ComputeCmacB0+0x140>)
    caa2:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    caa4:	2308      	movs	r3, #8
    caa6:	18fb      	adds	r3, r7, r3
    caa8:	3310      	adds	r3, #16
    caaa:	4a16      	ldr	r2, [pc, #88]	; (cb04 <ComputeCmacB0+0x130>)
    caac:	218c      	movs	r1, #140	; 0x8c
    caae:	0049      	lsls	r1, r1, #1
    cab0:	468c      	mov	ip, r1
    cab2:	44bc      	add	ip, r7
    cab4:	4462      	add	r2, ip
    cab6:	8812      	ldrh	r2, [r2, #0]
    cab8:	6879      	ldr	r1, [r7, #4]
    caba:	0018      	movs	r0, r3
    cabc:	4b16      	ldr	r3, [pc, #88]	; (cb18 <ComputeCmacB0+0x144>)
    cabe:	4798      	blx	r3

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    cac0:	4b10      	ldr	r3, [pc, #64]	; (cb04 <ComputeCmacB0+0x130>)
    cac2:	228c      	movs	r2, #140	; 0x8c
    cac4:	0052      	lsls	r2, r2, #1
    cac6:	4694      	mov	ip, r2
    cac8:	44bc      	add	ip, r7
    caca:	4463      	add	r3, ip
    cacc:	881b      	ldrh	r3, [r3, #0]
    cace:	3310      	adds	r3, #16
    cad0:	b299      	uxth	r1, r3
    cad2:	239a      	movs	r3, #154	; 0x9a
    cad4:	005b      	lsls	r3, r3, #1
    cad6:	18fb      	adds	r3, r7, r3
    cad8:	681c      	ldr	r4, [r3, #0]
    cada:	4b0b      	ldr	r3, [pc, #44]	; (cb08 <ComputeCmacB0+0x134>)
    cadc:	228c      	movs	r2, #140	; 0x8c
    cade:	0052      	lsls	r2, r2, #1
    cae0:	4694      	mov	ip, r2
    cae2:	44bc      	add	ip, r7
    cae4:	4463      	add	r3, ip
    cae6:	781a      	ldrb	r2, [r3, #0]
    cae8:	2308      	movs	r3, #8
    caea:	18f8      	adds	r0, r7, r3
    caec:	0023      	movs	r3, r4
    caee:	4c0b      	ldr	r4, [pc, #44]	; (cb1c <ComputeCmacB0+0x148>)
    caf0:	47a0      	blx	r4
    caf2:	1e03      	subs	r3, r0, #0
    caf4:	d001      	beq.n	cafa <ComputeCmacB0+0x126>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    caf6:	230c      	movs	r3, #12
    caf8:	e000      	b.n	cafc <ComputeCmacB0+0x128>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    cafa:	2300      	movs	r3, #0
}
    cafc:	0018      	movs	r0, r3
    cafe:	46bd      	mov	sp, r7
    cb00:	b047      	add	sp, #284	; 0x11c
    cb02:	bd90      	pop	{r4, r7, pc}
    cb04:	fffffeea 	.word	0xfffffeea
    cb08:	fffffee9 	.word	0xfffffee9
    cb0c:	fffffee8 	.word	0xfffffee8
    cb10:	000029cd 	.word	0x000029cd
    cb14:	0000c8a1 	.word	0x0000c8a1
    cb18:	00002955 	.word	0x00002955
    cb1c:	0001308d 	.word	0x0001308d

0000cb20 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
    cb20:	b5b0      	push	{r4, r5, r7, lr}
    cb22:	b0cc      	sub	sp, #304	; 0x130
    cb24:	af04      	add	r7, sp, #16
    cb26:	6078      	str	r0, [r7, #4]
    cb28:	000c      	movs	r4, r1
    cb2a:	0010      	movs	r0, r2
    cb2c:	0019      	movs	r1, r3
    cb2e:	4b50      	ldr	r3, [pc, #320]	; (cc70 <VerifyCmacB0+0x150>)
    cb30:	2290      	movs	r2, #144	; 0x90
    cb32:	0052      	lsls	r2, r2, #1
    cb34:	4694      	mov	ip, r2
    cb36:	44bc      	add	ip, r7
    cb38:	4463      	add	r3, ip
    cb3a:	1c22      	adds	r2, r4, #0
    cb3c:	801a      	strh	r2, [r3, #0]
    cb3e:	4b4d      	ldr	r3, [pc, #308]	; (cc74 <VerifyCmacB0+0x154>)
    cb40:	2290      	movs	r2, #144	; 0x90
    cb42:	0052      	lsls	r2, r2, #1
    cb44:	4694      	mov	ip, r2
    cb46:	44bc      	add	ip, r7
    cb48:	4463      	add	r3, ip
    cb4a:	1c02      	adds	r2, r0, #0
    cb4c:	701a      	strb	r2, [r3, #0]
    cb4e:	4b4a      	ldr	r3, [pc, #296]	; (cc78 <VerifyCmacB0+0x158>)
    cb50:	2290      	movs	r2, #144	; 0x90
    cb52:	0052      	lsls	r2, r2, #1
    cb54:	4694      	mov	ip, r2
    cb56:	44bc      	add	ip, r7
    cb58:	4463      	add	r3, ip
    cb5a:	1c0a      	adds	r2, r1, #0
    cb5c:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d101      	bne.n	cb68 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    cb64:	2307      	movs	r3, #7
    cb66:	e07e      	b.n	cc66 <VerifyCmacB0+0x146>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    cb68:	4b41      	ldr	r3, [pc, #260]	; (cc70 <VerifyCmacB0+0x150>)
    cb6a:	2290      	movs	r2, #144	; 0x90
    cb6c:	0052      	lsls	r2, r2, #1
    cb6e:	4694      	mov	ip, r2
    cb70:	44bc      	add	ip, r7
    cb72:	4463      	add	r3, ip
    cb74:	881a      	ldrh	r2, [r3, #0]
    cb76:	2380      	movs	r3, #128	; 0x80
    cb78:	005b      	lsls	r3, r3, #1
    cb7a:	429a      	cmp	r2, r3
    cb7c:	d901      	bls.n	cb82 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    cb7e:	230b      	movs	r3, #11
    cb80:	e071      	b.n	cc66 <VerifyCmacB0+0x146>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    cb82:	2388      	movs	r3, #136	; 0x88
    cb84:	005a      	lsls	r2, r3, #1
    cb86:	230c      	movs	r3, #12
    cb88:	18fb      	adds	r3, r7, r3
    cb8a:	2100      	movs	r1, #0
    cb8c:	0018      	movs	r0, r3
    cb8e:	4b3b      	ldr	r3, [pc, #236]	; (cc7c <VerifyCmacB0+0x15c>)
    cb90:	4798      	blx	r3

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
    cb92:	2398      	movs	r3, #152	; 0x98
    cb94:	005b      	lsls	r3, r3, #1
    cb96:	18fb      	adds	r3, r7, r3
    cb98:	781c      	ldrb	r4, [r3, #0]
    cb9a:	4b37      	ldr	r3, [pc, #220]	; (cc78 <VerifyCmacB0+0x158>)
    cb9c:	2290      	movs	r2, #144	; 0x90
    cb9e:	0052      	lsls	r2, r2, #1
    cba0:	4694      	mov	ip, r2
    cba2:	44bc      	add	ip, r7
    cba4:	4463      	add	r3, ip
    cba6:	781a      	ldrb	r2, [r3, #0]
    cba8:	4b32      	ldr	r3, [pc, #200]	; (cc74 <VerifyCmacB0+0x154>)
    cbaa:	2190      	movs	r1, #144	; 0x90
    cbac:	0049      	lsls	r1, r1, #1
    cbae:	468c      	mov	ip, r1
    cbb0:	44bc      	add	ip, r7
    cbb2:	4463      	add	r3, ip
    cbb4:	7819      	ldrb	r1, [r3, #0]
    cbb6:	4b2e      	ldr	r3, [pc, #184]	; (cc70 <VerifyCmacB0+0x150>)
    cbb8:	2090      	movs	r0, #144	; 0x90
    cbba:	0040      	lsls	r0, r0, #1
    cbbc:	4684      	mov	ip, r0
    cbbe:	44bc      	add	ip, r7
    cbc0:	4463      	add	r3, ip
    cbc2:	8818      	ldrh	r0, [r3, #0]
    cbc4:	230c      	movs	r3, #12
    cbc6:	18fb      	adds	r3, r7, r3
    cbc8:	9302      	str	r3, [sp, #8]
    cbca:	239c      	movs	r3, #156	; 0x9c
    cbcc:	005b      	lsls	r3, r3, #1
    cbce:	18fb      	adds	r3, r7, r3
    cbd0:	681b      	ldr	r3, [r3, #0]
    cbd2:	9301      	str	r3, [sp, #4]
    cbd4:	239a      	movs	r3, #154	; 0x9a
    cbd6:	005b      	lsls	r3, r3, #1
    cbd8:	18fb      	adds	r3, r7, r3
    cbda:	681b      	ldr	r3, [r3, #0]
    cbdc:	9300      	str	r3, [sp, #0]
    cbde:	0023      	movs	r3, r4
    cbe0:	4c27      	ldr	r4, [pc, #156]	; (cc80 <VerifyCmacB0+0x160>)
    cbe2:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    cbe4:	230c      	movs	r3, #12
    cbe6:	18fb      	adds	r3, r7, r3
    cbe8:	3310      	adds	r3, #16
    cbea:	4a21      	ldr	r2, [pc, #132]	; (cc70 <VerifyCmacB0+0x150>)
    cbec:	2190      	movs	r1, #144	; 0x90
    cbee:	0049      	lsls	r1, r1, #1
    cbf0:	468c      	mov	ip, r1
    cbf2:	44bc      	add	ip, r7
    cbf4:	4462      	add	r2, ip
    cbf6:	8812      	ldrh	r2, [r2, #0]
    cbf8:	6879      	ldr	r1, [r7, #4]
    cbfa:	0018      	movs	r0, r3
    cbfc:	4b21      	ldr	r3, [pc, #132]	; (cc84 <VerifyCmacB0+0x164>)
    cbfe:	4798      	blx	r3

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    cc00:	2320      	movs	r3, #32
    cc02:	33ff      	adds	r3, #255	; 0xff
    cc04:	18fb      	adds	r3, r7, r3
    cc06:	2206      	movs	r2, #6
    cc08:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
    cc0a:	4b19      	ldr	r3, [pc, #100]	; (cc70 <VerifyCmacB0+0x150>)
    cc0c:	2290      	movs	r2, #144	; 0x90
    cc0e:	0052      	lsls	r2, r2, #1
    cc10:	4694      	mov	ip, r2
    cc12:	44bc      	add	ip, r7
    cc14:	4463      	add	r3, ip
    cc16:	881b      	ldrh	r3, [r3, #0]
    cc18:	3310      	adds	r3, #16
    cc1a:	b299      	uxth	r1, r3
    cc1c:	2320      	movs	r3, #32
    cc1e:	33ff      	adds	r3, #255	; 0xff
    cc20:	18fc      	adds	r4, r7, r3
    cc22:	4b14      	ldr	r3, [pc, #80]	; (cc74 <VerifyCmacB0+0x154>)
    cc24:	2290      	movs	r2, #144	; 0x90
    cc26:	0052      	lsls	r2, r2, #1
    cc28:	4694      	mov	ip, r2
    cc2a:	44bc      	add	ip, r7
    cc2c:	4463      	add	r3, ip
    cc2e:	781b      	ldrb	r3, [r3, #0]
    cc30:	229e      	movs	r2, #158	; 0x9e
    cc32:	0052      	lsls	r2, r2, #1
    cc34:	18ba      	adds	r2, r7, r2
    cc36:	6812      	ldr	r2, [r2, #0]
    cc38:	200c      	movs	r0, #12
    cc3a:	1838      	adds	r0, r7, r0
    cc3c:	4d12      	ldr	r5, [pc, #72]	; (cc88 <VerifyCmacB0+0x168>)
    cc3e:	47a8      	blx	r5
    cc40:	0003      	movs	r3, r0
    cc42:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
    cc44:	2320      	movs	r3, #32
    cc46:	33ff      	adds	r3, #255	; 0xff
    cc48:	18fb      	adds	r3, r7, r3
    cc4a:	781b      	ldrb	r3, [r3, #0]
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d101      	bne.n	cc54 <VerifyCmacB0+0x134>
    {
        return LORAMAC_CRYPTO_SUCCESS;
    cc50:	2300      	movs	r3, #0
    cc52:	e008      	b.n	cc66 <VerifyCmacB0+0x146>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
    cc54:	2320      	movs	r3, #32
    cc56:	33ff      	adds	r3, #255	; 0xff
    cc58:	18fb      	adds	r3, r7, r3
    cc5a:	781b      	ldrb	r3, [r3, #0]
    cc5c:	2b01      	cmp	r3, #1
    cc5e:	d101      	bne.n	cc64 <VerifyCmacB0+0x144>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
    cc60:	2301      	movs	r3, #1
    cc62:	e000      	b.n	cc66 <VerifyCmacB0+0x146>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    cc64:	230c      	movs	r3, #12
}
    cc66:	0018      	movs	r0, r3
    cc68:	46bd      	mov	sp, r7
    cc6a:	b048      	add	sp, #288	; 0x120
    cc6c:	bdb0      	pop	{r4, r5, r7, pc}
    cc6e:	46c0      	nop			; (mov r8, r8)
    cc70:	fffffee2 	.word	0xfffffee2
    cc74:	fffffee1 	.word	0xfffffee1
    cc78:	fffffee0 	.word	0xfffffee0
    cc7c:	000029cd 	.word	0x000029cd
    cc80:	0000c8a1 	.word	0x0000c8a1
    cc84:	00002955 	.word	0x00002955
    cc88:	000130dd 	.word	0x000130dd

0000cc8c <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
    cc8c:	b5b0      	push	{r4, r5, r7, lr}
    cc8e:	b084      	sub	sp, #16
    cc90:	af00      	add	r7, sp, #0
    cc92:	0005      	movs	r5, r0
    cc94:	000c      	movs	r4, r1
    cc96:	0010      	movs	r0, r2
    cc98:	0019      	movs	r1, r3
    cc9a:	1dbb      	adds	r3, r7, #6
    cc9c:	1c2a      	adds	r2, r5, #0
    cc9e:	801a      	strh	r2, [r3, #0]
    cca0:	1d7b      	adds	r3, r7, #5
    cca2:	1c22      	adds	r2, r4, #0
    cca4:	701a      	strb	r2, [r3, #0]
    cca6:	1d3b      	adds	r3, r7, #4
    cca8:	1c02      	adds	r2, r0, #0
    ccaa:	701a      	strb	r2, [r3, #0]
    ccac:	1cfb      	adds	r3, r7, #3
    ccae:	1c0a      	adds	r2, r1, #0
    ccb0:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
    ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d101      	bne.n	ccbc <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    ccb8:	2307      	movs	r3, #7
    ccba:	e06e      	b.n	cd9a <PrepareB1+0x10e>
    }

    b1[0] = 0x49;
    ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccbe:	2249      	movs	r2, #73	; 0x49
    ccc0:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
    ccc2:	1d3b      	adds	r3, r7, #4
    ccc4:	781b      	ldrb	r3, [r3, #0]
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d017      	beq.n	ccfa <PrepareB1+0x6e>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
    ccca:	4b36      	ldr	r3, [pc, #216]	; (cda4 <PrepareB1+0x118>)
    cccc:	689b      	ldr	r3, [r3, #8]
    ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ccd0:	681a      	ldr	r2, [r3, #0]
    ccd2:	230e      	movs	r3, #14
    ccd4:	18fb      	adds	r3, r7, r3
    ccd6:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
    ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccda:	3301      	adds	r3, #1
    ccdc:	220e      	movs	r2, #14
    ccde:	18ba      	adds	r2, r7, r2
    cce0:	8812      	ldrh	r2, [r2, #0]
    cce2:	b2d2      	uxtb	r2, r2
    cce4:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
    cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cce8:	3302      	adds	r3, #2
    ccea:	220e      	movs	r2, #14
    ccec:	18ba      	adds	r2, r7, r2
    ccee:	8812      	ldrh	r2, [r2, #0]
    ccf0:	0a12      	lsrs	r2, r2, #8
    ccf2:	b292      	uxth	r2, r2
    ccf4:	b2d2      	uxtb	r2, r2
    ccf6:	701a      	strb	r2, [r3, #0]
    ccf8:	e007      	b.n	cd0a <PrepareB1+0x7e>
    }
    else
    {
        b1[1] = 0x00;
    ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccfc:	3301      	adds	r3, #1
    ccfe:	2200      	movs	r2, #0
    cd00:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
    cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd04:	3302      	adds	r3, #2
    cd06:	2200      	movs	r2, #0
    cd08:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
    cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd0c:	3303      	adds	r3, #3
    cd0e:	1cfa      	adds	r2, r7, #3
    cd10:	7812      	ldrb	r2, [r2, #0]
    cd12:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
    cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd16:	3304      	adds	r3, #4
    cd18:	2220      	movs	r2, #32
    cd1a:	18ba      	adds	r2, r7, r2
    cd1c:	7812      	ldrb	r2, [r2, #0]
    cd1e:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
    cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd22:	3305      	adds	r3, #5
    cd24:	2200      	movs	r2, #0
    cd26:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
    cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd2a:	3306      	adds	r3, #6
    cd2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd2e:	b2d2      	uxtb	r2, r2
    cd30:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
    cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd34:	3307      	adds	r3, #7
    cd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd38:	0a12      	lsrs	r2, r2, #8
    cd3a:	b2d2      	uxtb	r2, r2
    cd3c:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
    cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd40:	3308      	adds	r3, #8
    cd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd44:	0c12      	lsrs	r2, r2, #16
    cd46:	b2d2      	uxtb	r2, r2
    cd48:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
    cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd4c:	3309      	adds	r3, #9
    cd4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd50:	0e12      	lsrs	r2, r2, #24
    cd52:	b2d2      	uxtb	r2, r2
    cd54:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
    cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd58:	330a      	adds	r3, #10
    cd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd5c:	b2d2      	uxtb	r2, r2
    cd5e:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
    cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd62:	330b      	adds	r3, #11
    cd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd66:	0a12      	lsrs	r2, r2, #8
    cd68:	b2d2      	uxtb	r2, r2
    cd6a:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
    cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd6e:	330c      	adds	r3, #12
    cd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd72:	0c12      	lsrs	r2, r2, #16
    cd74:	b2d2      	uxtb	r2, r2
    cd76:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
    cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd7a:	330d      	adds	r3, #13
    cd7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd7e:	0e12      	lsrs	r2, r2, #24
    cd80:	b2d2      	uxtb	r2, r2
    cd82:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
    cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd86:	330e      	adds	r3, #14
    cd88:	2200      	movs	r2, #0
    cd8a:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
    cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd8e:	330f      	adds	r3, #15
    cd90:	1dba      	adds	r2, r7, #6
    cd92:	8812      	ldrh	r2, [r2, #0]
    cd94:	b2d2      	uxtb	r2, r2
    cd96:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
    cd98:	2300      	movs	r3, #0
}
    cd9a:	0018      	movs	r0, r3
    cd9c:	46bd      	mov	sp, r7
    cd9e:	b004      	add	sp, #16
    cda0:	bdb0      	pop	{r4, r5, r7, pc}
    cda2:	46c0      	nop			; (mov r8, r8)
    cda4:	200013cc 	.word	0x200013cc

0000cda8 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
    cda8:	b590      	push	{r4, r7, lr}
    cdaa:	b0cb      	sub	sp, #300	; 0x12c
    cdac:	af04      	add	r7, sp, #16
    cdae:	6078      	str	r0, [r7, #4]
    cdb0:	000c      	movs	r4, r1
    cdb2:	0010      	movs	r0, r2
    cdb4:	0019      	movs	r1, r3
    cdb6:	4b4b      	ldr	r3, [pc, #300]	; (cee4 <ComputeCmacB1+0x13c>)
    cdb8:	228c      	movs	r2, #140	; 0x8c
    cdba:	0052      	lsls	r2, r2, #1
    cdbc:	4694      	mov	ip, r2
    cdbe:	44bc      	add	ip, r7
    cdc0:	4463      	add	r3, ip
    cdc2:	1c22      	adds	r2, r4, #0
    cdc4:	801a      	strh	r2, [r3, #0]
    cdc6:	4b48      	ldr	r3, [pc, #288]	; (cee8 <ComputeCmacB1+0x140>)
    cdc8:	228c      	movs	r2, #140	; 0x8c
    cdca:	0052      	lsls	r2, r2, #1
    cdcc:	4694      	mov	ip, r2
    cdce:	44bc      	add	ip, r7
    cdd0:	4463      	add	r3, ip
    cdd2:	1c02      	adds	r2, r0, #0
    cdd4:	701a      	strb	r2, [r3, #0]
    cdd6:	4b45      	ldr	r3, [pc, #276]	; (ceec <ComputeCmacB1+0x144>)
    cdd8:	228c      	movs	r2, #140	; 0x8c
    cdda:	0052      	lsls	r2, r2, #1
    cddc:	4694      	mov	ip, r2
    cdde:	44bc      	add	ip, r7
    cde0:	4463      	add	r3, ip
    cde2:	1c0a      	adds	r2, r1, #0
    cde4:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	2b00      	cmp	r3, #0
    cdea:	d005      	beq.n	cdf8 <ComputeCmacB1+0x50>
    cdec:	239c      	movs	r3, #156	; 0x9c
    cdee:	005b      	lsls	r3, r3, #1
    cdf0:	18fb      	adds	r3, r7, r3
    cdf2:	681b      	ldr	r3, [r3, #0]
    cdf4:	2b00      	cmp	r3, #0
    cdf6:	d101      	bne.n	cdfc <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    cdf8:	2307      	movs	r3, #7
    cdfa:	e06e      	b.n	ceda <ComputeCmacB1+0x132>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
    cdfc:	4b39      	ldr	r3, [pc, #228]	; (cee4 <ComputeCmacB1+0x13c>)
    cdfe:	228c      	movs	r2, #140	; 0x8c
    ce00:	0052      	lsls	r2, r2, #1
    ce02:	4694      	mov	ip, r2
    ce04:	44bc      	add	ip, r7
    ce06:	4463      	add	r3, ip
    ce08:	881a      	ldrh	r2, [r3, #0]
    ce0a:	2380      	movs	r3, #128	; 0x80
    ce0c:	005b      	lsls	r3, r3, #1
    ce0e:	429a      	cmp	r2, r3
    ce10:	d901      	bls.n	ce16 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
    ce12:	230b      	movs	r3, #11
    ce14:	e061      	b.n	ceda <ComputeCmacB1+0x132>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
    ce16:	2388      	movs	r3, #136	; 0x88
    ce18:	005a      	lsls	r2, r3, #1
    ce1a:	2308      	movs	r3, #8
    ce1c:	18fb      	adds	r3, r7, r3
    ce1e:	2100      	movs	r1, #0
    ce20:	0018      	movs	r0, r3
    ce22:	4b33      	ldr	r3, [pc, #204]	; (cef0 <ComputeCmacB1+0x148>)
    ce24:	4798      	blx	r3

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
    ce26:	2394      	movs	r3, #148	; 0x94
    ce28:	005b      	lsls	r3, r3, #1
    ce2a:	18fb      	adds	r3, r7, r3
    ce2c:	781c      	ldrb	r4, [r3, #0]
    ce2e:	4b2f      	ldr	r3, [pc, #188]	; (ceec <ComputeCmacB1+0x144>)
    ce30:	228c      	movs	r2, #140	; 0x8c
    ce32:	0052      	lsls	r2, r2, #1
    ce34:	4694      	mov	ip, r2
    ce36:	44bc      	add	ip, r7
    ce38:	4463      	add	r3, ip
    ce3a:	781a      	ldrb	r2, [r3, #0]
    ce3c:	4b2a      	ldr	r3, [pc, #168]	; (cee8 <ComputeCmacB1+0x140>)
    ce3e:	218c      	movs	r1, #140	; 0x8c
    ce40:	0049      	lsls	r1, r1, #1
    ce42:	468c      	mov	ip, r1
    ce44:	44bc      	add	ip, r7
    ce46:	4463      	add	r3, ip
    ce48:	7819      	ldrb	r1, [r3, #0]
    ce4a:	4b26      	ldr	r3, [pc, #152]	; (cee4 <ComputeCmacB1+0x13c>)
    ce4c:	208c      	movs	r0, #140	; 0x8c
    ce4e:	0040      	lsls	r0, r0, #1
    ce50:	4684      	mov	ip, r0
    ce52:	44bc      	add	ip, r7
    ce54:	4463      	add	r3, ip
    ce56:	8818      	ldrh	r0, [r3, #0]
    ce58:	2308      	movs	r3, #8
    ce5a:	18fb      	adds	r3, r7, r3
    ce5c:	9303      	str	r3, [sp, #12]
    ce5e:	239a      	movs	r3, #154	; 0x9a
    ce60:	005b      	lsls	r3, r3, #1
    ce62:	18fb      	adds	r3, r7, r3
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	9302      	str	r3, [sp, #8]
    ce68:	2398      	movs	r3, #152	; 0x98
    ce6a:	005b      	lsls	r3, r3, #1
    ce6c:	18fb      	adds	r3, r7, r3
    ce6e:	681b      	ldr	r3, [r3, #0]
    ce70:	9301      	str	r3, [sp, #4]
    ce72:	2396      	movs	r3, #150	; 0x96
    ce74:	005b      	lsls	r3, r3, #1
    ce76:	18fb      	adds	r3, r7, r3
    ce78:	781b      	ldrb	r3, [r3, #0]
    ce7a:	9300      	str	r3, [sp, #0]
    ce7c:	0023      	movs	r3, r4
    ce7e:	4c1d      	ldr	r4, [pc, #116]	; (cef4 <ComputeCmacB1+0x14c>)
    ce80:	47a0      	blx	r4

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
    ce82:	2308      	movs	r3, #8
    ce84:	18fb      	adds	r3, r7, r3
    ce86:	3310      	adds	r3, #16
    ce88:	4a16      	ldr	r2, [pc, #88]	; (cee4 <ComputeCmacB1+0x13c>)
    ce8a:	218c      	movs	r1, #140	; 0x8c
    ce8c:	0049      	lsls	r1, r1, #1
    ce8e:	468c      	mov	ip, r1
    ce90:	44bc      	add	ip, r7
    ce92:	4462      	add	r2, ip
    ce94:	8812      	ldrh	r2, [r2, #0]
    ce96:	6879      	ldr	r1, [r7, #4]
    ce98:	0018      	movs	r0, r3
    ce9a:	4b17      	ldr	r3, [pc, #92]	; (cef8 <ComputeCmacB1+0x150>)
    ce9c:	4798      	blx	r3

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
    ce9e:	4b11      	ldr	r3, [pc, #68]	; (cee4 <ComputeCmacB1+0x13c>)
    cea0:	228c      	movs	r2, #140	; 0x8c
    cea2:	0052      	lsls	r2, r2, #1
    cea4:	4694      	mov	ip, r2
    cea6:	44bc      	add	ip, r7
    cea8:	4463      	add	r3, ip
    ceaa:	881b      	ldrh	r3, [r3, #0]
    ceac:	3310      	adds	r3, #16
    ceae:	b299      	uxth	r1, r3
    ceb0:	239c      	movs	r3, #156	; 0x9c
    ceb2:	005b      	lsls	r3, r3, #1
    ceb4:	18fb      	adds	r3, r7, r3
    ceb6:	681c      	ldr	r4, [r3, #0]
    ceb8:	4b0b      	ldr	r3, [pc, #44]	; (cee8 <ComputeCmacB1+0x140>)
    ceba:	228c      	movs	r2, #140	; 0x8c
    cebc:	0052      	lsls	r2, r2, #1
    cebe:	4694      	mov	ip, r2
    cec0:	44bc      	add	ip, r7
    cec2:	4463      	add	r3, ip
    cec4:	781a      	ldrb	r2, [r3, #0]
    cec6:	2308      	movs	r3, #8
    cec8:	18f8      	adds	r0, r7, r3
    ceca:	0023      	movs	r3, r4
    cecc:	4c0b      	ldr	r4, [pc, #44]	; (cefc <ComputeCmacB1+0x154>)
    cece:	47a0      	blx	r4
    ced0:	1e03      	subs	r3, r0, #0
    ced2:	d001      	beq.n	ced8 <ComputeCmacB1+0x130>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    ced4:	230c      	movs	r3, #12
    ced6:	e000      	b.n	ceda <ComputeCmacB1+0x132>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    ced8:	2300      	movs	r3, #0
}
    ceda:	0018      	movs	r0, r3
    cedc:	46bd      	mov	sp, r7
    cede:	b047      	add	sp, #284	; 0x11c
    cee0:	bd90      	pop	{r4, r7, pc}
    cee2:	46c0      	nop			; (mov r8, r8)
    cee4:	fffffeea 	.word	0xfffffeea
    cee8:	fffffee9 	.word	0xfffffee9
    ceec:	fffffee8 	.word	0xfffffee8
    cef0:	000029cd 	.word	0x000029cd
    cef4:	0000cc8d 	.word	0x0000cc8d
    cef8:	00002955 	.word	0x00002955
    cefc:	0001308d 	.word	0x0001308d

0000cf00 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    cf00:	b580      	push	{r7, lr}
    cf02:	b084      	sub	sp, #16
    cf04:	af00      	add	r7, sp, #0
    cf06:	0002      	movs	r2, r0
    cf08:	6039      	str	r1, [r7, #0]
    cf0a:	1dfb      	adds	r3, r7, #7
    cf0c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
    cf0e:	230f      	movs	r3, #15
    cf10:	18fb      	adds	r3, r7, r3
    cf12:	2200      	movs	r2, #0
    cf14:	701a      	strb	r2, [r3, #0]
    cf16:	e01a      	b.n	cf4e <GetKeyAddrItem+0x4e>
    {
        if( KeyAddrList[i].AddrID == addrID )
    cf18:	230f      	movs	r3, #15
    cf1a:	18fb      	adds	r3, r7, r3
    cf1c:	781a      	ldrb	r2, [r3, #0]
    cf1e:	4b11      	ldr	r3, [pc, #68]	; (cf64 <GetKeyAddrItem+0x64>)
    cf20:	0092      	lsls	r2, r2, #2
    cf22:	5cd3      	ldrb	r3, [r2, r3]
    cf24:	1dfa      	adds	r2, r7, #7
    cf26:	7812      	ldrb	r2, [r2, #0]
    cf28:	429a      	cmp	r2, r3
    cf2a:	d109      	bne.n	cf40 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
    cf2c:	230f      	movs	r3, #15
    cf2e:	18fb      	adds	r3, r7, r3
    cf30:	781b      	ldrb	r3, [r3, #0]
    cf32:	009a      	lsls	r2, r3, #2
    cf34:	4b0b      	ldr	r3, [pc, #44]	; (cf64 <GetKeyAddrItem+0x64>)
    cf36:	18d2      	adds	r2, r2, r3
    cf38:	683b      	ldr	r3, [r7, #0]
    cf3a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
    cf3c:	2300      	movs	r3, #0
    cf3e:	e00c      	b.n	cf5a <GetKeyAddrItem+0x5a>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
    cf40:	230f      	movs	r3, #15
    cf42:	18fb      	adds	r3, r7, r3
    cf44:	781a      	ldrb	r2, [r3, #0]
    cf46:	230f      	movs	r3, #15
    cf48:	18fb      	adds	r3, r7, r3
    cf4a:	3201      	adds	r2, #1
    cf4c:	701a      	strb	r2, [r3, #0]
    cf4e:	230f      	movs	r3, #15
    cf50:	18fb      	adds	r3, r7, r3
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	2b04      	cmp	r3, #4
    cf56:	d9df      	bls.n	cf18 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
    cf58:	2309      	movs	r3, #9
}
    cf5a:	0018      	movs	r0, r3
    cf5c:	46bd      	mov	sp, r7
    cf5e:	b004      	add	sp, #16
    cf60:	bd80      	pop	{r7, pc}
    cf62:	46c0      	nop			; (mov r8, r8)
    cf64:	20000048 	.word	0x20000048

0000cf68 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
    cf68:	b590      	push	{r4, r7, lr}
    cf6a:	b089      	sub	sp, #36	; 0x24
    cf6c:	af00      	add	r7, sp, #0
    cf6e:	60b9      	str	r1, [r7, #8]
    cf70:	607a      	str	r2, [r7, #4]
    cf72:	603b      	str	r3, [r7, #0]
    cf74:	230f      	movs	r3, #15
    cf76:	18fb      	adds	r3, r7, r3
    cf78:	1c02      	adds	r2, r0, #0
    cf7a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
    cf7c:	68bb      	ldr	r3, [r7, #8]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d005      	beq.n	cf8e <DeriveSessionKey10x+0x26>
    cf82:	687b      	ldr	r3, [r7, #4]
    cf84:	2b00      	cmp	r3, #0
    cf86:	d002      	beq.n	cf8e <DeriveSessionKey10x+0x26>
    cf88:	683b      	ldr	r3, [r7, #0]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d101      	bne.n	cf92 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    cf8e:	2307      	movs	r3, #7
    cf90:	e045      	b.n	d01e <DeriveSessionKey10x+0xb6>
    }

    uint8_t compBase[16] = { 0 };
    cf92:	2310      	movs	r3, #16
    cf94:	18fb      	adds	r3, r7, r3
    cf96:	0018      	movs	r0, r3
    cf98:	2310      	movs	r3, #16
    cf9a:	001a      	movs	r2, r3
    cf9c:	2100      	movs	r1, #0
    cf9e:	4b22      	ldr	r3, [pc, #136]	; (d028 <DeriveSessionKey10x+0xc0>)
    cfa0:	4798      	blx	r3

    switch( keyID )
    cfa2:	230f      	movs	r3, #15
    cfa4:	18fb      	adds	r3, r7, r3
    cfa6:	781b      	ldrb	r3, [r3, #0]
    cfa8:	2b04      	cmp	r3, #4
    cfaa:	db0e      	blt.n	cfca <DeriveSessionKey10x+0x62>
    cfac:	2b06      	cmp	r3, #6
    cfae:	dd02      	ble.n	cfb6 <DeriveSessionKey10x+0x4e>
    cfb0:	2b07      	cmp	r3, #7
    cfb2:	d005      	beq.n	cfc0 <DeriveSessionKey10x+0x58>
    cfb4:	e009      	b.n	cfca <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
    cfb6:	2310      	movs	r3, #16
    cfb8:	18fb      	adds	r3, r7, r3
    cfba:	2201      	movs	r2, #1
    cfbc:	701a      	strb	r2, [r3, #0]
            break;
    cfbe:	e006      	b.n	cfce <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
    cfc0:	2310      	movs	r3, #16
    cfc2:	18fb      	adds	r3, r7, r3
    cfc4:	2202      	movs	r2, #2
    cfc6:	701a      	strb	r2, [r3, #0]
            break;
    cfc8:	e001      	b.n	cfce <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    cfca:	2308      	movs	r3, #8
    cfcc:	e027      	b.n	d01e <DeriveSessionKey10x+0xb6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
    cfce:	2310      	movs	r3, #16
    cfd0:	18fb      	adds	r3, r7, r3
    cfd2:	3301      	adds	r3, #1
    cfd4:	68b9      	ldr	r1, [r7, #8]
    cfd6:	2203      	movs	r2, #3
    cfd8:	0018      	movs	r0, r3
    cfda:	4b14      	ldr	r3, [pc, #80]	; (d02c <DeriveSessionKey10x+0xc4>)
    cfdc:	4798      	blx	r3
    memcpy1( compBase + 4, netID, 3 );
    cfde:	2310      	movs	r3, #16
    cfe0:	18fb      	adds	r3, r7, r3
    cfe2:	3304      	adds	r3, #4
    cfe4:	6879      	ldr	r1, [r7, #4]
    cfe6:	2203      	movs	r2, #3
    cfe8:	0018      	movs	r0, r3
    cfea:	4b10      	ldr	r3, [pc, #64]	; (d02c <DeriveSessionKey10x+0xc4>)
    cfec:	4798      	blx	r3
    memcpy1( compBase + 7, devNonce, 2 );
    cfee:	2310      	movs	r3, #16
    cff0:	18fb      	adds	r3, r7, r3
    cff2:	3307      	adds	r3, #7
    cff4:	6839      	ldr	r1, [r7, #0]
    cff6:	2202      	movs	r2, #2
    cff8:	0018      	movs	r0, r3
    cffa:	4b0c      	ldr	r3, [pc, #48]	; (d02c <DeriveSessionKey10x+0xc4>)
    cffc:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    cffe:	230f      	movs	r3, #15
    d000:	18fb      	adds	r3, r7, r3
    d002:	781a      	ldrb	r2, [r3, #0]
    d004:	2310      	movs	r3, #16
    d006:	18f9      	adds	r1, r7, r3
    d008:	4b09      	ldr	r3, [pc, #36]	; (d030 <DeriveSessionKey10x+0xc8>)
    d00a:	6818      	ldr	r0, [r3, #0]
    d00c:	0013      	movs	r3, r2
    d00e:	2201      	movs	r2, #1
    d010:	4c08      	ldr	r4, [pc, #32]	; (d034 <DeriveSessionKey10x+0xcc>)
    d012:	47a0      	blx	r4
    d014:	1e03      	subs	r3, r0, #0
    d016:	d001      	beq.n	d01c <DeriveSessionKey10x+0xb4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d018:	230c      	movs	r3, #12
    d01a:	e000      	b.n	d01e <DeriveSessionKey10x+0xb6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d01c:	2300      	movs	r3, #0
}
    d01e:	0018      	movs	r0, r3
    d020:	46bd      	mov	sp, r7
    d022:	b009      	add	sp, #36	; 0x24
    d024:	bd90      	pop	{r4, r7, pc}
    d026:	46c0      	nop			; (mov r8, r8)
    d028:	0001a0e1 	.word	0x0001a0e1
    d02c:	00002955 	.word	0x00002955
    d030:	200013cc 	.word	0x200013cc
    d034:	00013255 	.word	0x00013255

0000d038 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
    d038:	b590      	push	{r4, r7, lr}
    d03a:	b08b      	sub	sp, #44	; 0x2c
    d03c:	af00      	add	r7, sp, #0
    d03e:	60b9      	str	r1, [r7, #8]
    d040:	607a      	str	r2, [r7, #4]
    d042:	603b      	str	r3, [r7, #0]
    d044:	230f      	movs	r3, #15
    d046:	18fb      	adds	r3, r7, r3
    d048:	1c02      	adds	r2, r0, #0
    d04a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
    d04c:	68bb      	ldr	r3, [r7, #8]
    d04e:	2b00      	cmp	r3, #0
    d050:	d005      	beq.n	d05e <DeriveSessionKey11x+0x26>
    d052:	687b      	ldr	r3, [r7, #4]
    d054:	2b00      	cmp	r3, #0
    d056:	d002      	beq.n	d05e <DeriveSessionKey11x+0x26>
    d058:	683b      	ldr	r3, [r7, #0]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d101      	bne.n	d062 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d05e:	2307      	movs	r3, #7
    d060:	e05d      	b.n	d11e <DeriveSessionKey11x+0xe6>
    }

    uint8_t compBase[16] = { 0 };
    d062:	2314      	movs	r3, #20
    d064:	18fb      	adds	r3, r7, r3
    d066:	0018      	movs	r0, r3
    d068:	2310      	movs	r3, #16
    d06a:	001a      	movs	r2, r3
    d06c:	2100      	movs	r1, #0
    d06e:	4b2e      	ldr	r3, [pc, #184]	; (d128 <DeriveSessionKey11x+0xf0>)
    d070:	4798      	blx	r3
    KeyIdentifier_t rootKeyId = NWK_KEY;
    d072:	2327      	movs	r3, #39	; 0x27
    d074:	18fb      	adds	r3, r7, r3
    d076:	2201      	movs	r2, #1
    d078:	701a      	strb	r2, [r3, #0]

    switch( keyID )
    d07a:	230f      	movs	r3, #15
    d07c:	18fb      	adds	r3, r7, r3
    d07e:	781b      	ldrb	r3, [r3, #0]
    d080:	2b05      	cmp	r3, #5
    d082:	d00d      	beq.n	d0a0 <DeriveSessionKey11x+0x68>
    d084:	dc02      	bgt.n	d08c <DeriveSessionKey11x+0x54>
    d086:	2b04      	cmp	r3, #4
    d088:	d005      	beq.n	d096 <DeriveSessionKey11x+0x5e>
    d08a:	e01c      	b.n	d0c6 <DeriveSessionKey11x+0x8e>
    d08c:	2b06      	cmp	r3, #6
    d08e:	d00c      	beq.n	d0aa <DeriveSessionKey11x+0x72>
    d090:	2b07      	cmp	r3, #7
    d092:	d00f      	beq.n	d0b4 <DeriveSessionKey11x+0x7c>
    d094:	e017      	b.n	d0c6 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
    d096:	2314      	movs	r3, #20
    d098:	18fb      	adds	r3, r7, r3
    d09a:	2201      	movs	r2, #1
    d09c:	701a      	strb	r2, [r3, #0]
            break;
    d09e:	e014      	b.n	d0ca <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
    d0a0:	2314      	movs	r3, #20
    d0a2:	18fb      	adds	r3, r7, r3
    d0a4:	2203      	movs	r2, #3
    d0a6:	701a      	strb	r2, [r3, #0]
            break;
    d0a8:	e00f      	b.n	d0ca <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
    d0aa:	2314      	movs	r3, #20
    d0ac:	18fb      	adds	r3, r7, r3
    d0ae:	2204      	movs	r2, #4
    d0b0:	701a      	strb	r2, [r3, #0]
            break;
    d0b2:	e00a      	b.n	d0ca <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
    d0b4:	2327      	movs	r3, #39	; 0x27
    d0b6:	18fb      	adds	r3, r7, r3
    d0b8:	2200      	movs	r2, #0
    d0ba:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
    d0bc:	2314      	movs	r3, #20
    d0be:	18fb      	adds	r3, r7, r3
    d0c0:	2202      	movs	r2, #2
    d0c2:	701a      	strb	r2, [r3, #0]
            break;
    d0c4:	e001      	b.n	d0ca <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    d0c6:	2308      	movs	r3, #8
    d0c8:	e029      	b.n	d11e <DeriveSessionKey11x+0xe6>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
    d0ca:	2314      	movs	r3, #20
    d0cc:	18fb      	adds	r3, r7, r3
    d0ce:	3301      	adds	r3, #1
    d0d0:	68b9      	ldr	r1, [r7, #8]
    d0d2:	2203      	movs	r2, #3
    d0d4:	0018      	movs	r0, r3
    d0d6:	4b15      	ldr	r3, [pc, #84]	; (d12c <DeriveSessionKey11x+0xf4>)
    d0d8:	4798      	blx	r3
    memcpyr( compBase + 4, joinEUI, 8 );
    d0da:	2314      	movs	r3, #20
    d0dc:	18fb      	adds	r3, r7, r3
    d0de:	3304      	adds	r3, #4
    d0e0:	6879      	ldr	r1, [r7, #4]
    d0e2:	2208      	movs	r2, #8
    d0e4:	0018      	movs	r0, r3
    d0e6:	4b12      	ldr	r3, [pc, #72]	; (d130 <DeriveSessionKey11x+0xf8>)
    d0e8:	4798      	blx	r3
    memcpy1( compBase + 12, devNonce, 2 );
    d0ea:	2314      	movs	r3, #20
    d0ec:	18fb      	adds	r3, r7, r3
    d0ee:	330c      	adds	r3, #12
    d0f0:	6839      	ldr	r1, [r7, #0]
    d0f2:	2202      	movs	r2, #2
    d0f4:	0018      	movs	r0, r3
    d0f6:	4b0d      	ldr	r3, [pc, #52]	; (d12c <DeriveSessionKey11x+0xf4>)
    d0f8:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
    d0fa:	230f      	movs	r3, #15
    d0fc:	18fb      	adds	r3, r7, r3
    d0fe:	781c      	ldrb	r4, [r3, #0]
    d100:	2327      	movs	r3, #39	; 0x27
    d102:	18fb      	adds	r3, r7, r3
    d104:	781a      	ldrb	r2, [r3, #0]
    d106:	2314      	movs	r3, #20
    d108:	18f9      	adds	r1, r7, r3
    d10a:	4b0a      	ldr	r3, [pc, #40]	; (d134 <DeriveSessionKey11x+0xfc>)
    d10c:	6818      	ldr	r0, [r3, #0]
    d10e:	0023      	movs	r3, r4
    d110:	4c09      	ldr	r4, [pc, #36]	; (d138 <DeriveSessionKey11x+0x100>)
    d112:	47a0      	blx	r4
    d114:	1e03      	subs	r3, r0, #0
    d116:	d001      	beq.n	d11c <DeriveSessionKey11x+0xe4>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d118:	230c      	movs	r3, #12
    d11a:	e000      	b.n	d11e <DeriveSessionKey11x+0xe6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d11c:	2300      	movs	r3, #0
}
    d11e:	0018      	movs	r0, r3
    d120:	46bd      	mov	sp, r7
    d122:	b00b      	add	sp, #44	; 0x2c
    d124:	bd90      	pop	{r4, r7, pc}
    d126:	46c0      	nop			; (mov r8, r8)
    d128:	0001a0e1 	.word	0x0001a0e1
    d12c:	00002955 	.word	0x00002955
    d130:	0000298b 	.word	0x0000298b
    d134:	200013cc 	.word	0x200013cc
    d138:	00013255 	.word	0x00013255

0000d13c <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
    d13c:	b590      	push	{r4, r7, lr}
    d13e:	b087      	sub	sp, #28
    d140:	af00      	add	r7, sp, #0
    d142:	0002      	movs	r2, r0
    d144:	6039      	str	r1, [r7, #0]
    d146:	1dfb      	adds	r3, r7, #7
    d148:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
    d14a:	683b      	ldr	r3, [r7, #0]
    d14c:	2b00      	cmp	r3, #0
    d14e:	d101      	bne.n	d154 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d150:	2307      	movs	r3, #7
    d152:	e031      	b.n	d1b8 <DeriveLifeTimeSessionKey+0x7c>
    }

    uint8_t compBase[16] = { 0 };
    d154:	2308      	movs	r3, #8
    d156:	18fb      	adds	r3, r7, r3
    d158:	0018      	movs	r0, r3
    d15a:	2310      	movs	r3, #16
    d15c:	001a      	movs	r2, r3
    d15e:	2100      	movs	r1, #0
    d160:	4b17      	ldr	r3, [pc, #92]	; (d1c0 <DeriveLifeTimeSessionKey+0x84>)
    d162:	4798      	blx	r3

    switch( keyID )
    d164:	1dfb      	adds	r3, r7, #7
    d166:	781b      	ldrb	r3, [r3, #0]
    d168:	2b02      	cmp	r3, #2
    d16a:	d002      	beq.n	d172 <DeriveLifeTimeSessionKey+0x36>
    d16c:	2b03      	cmp	r3, #3
    d16e:	d005      	beq.n	d17c <DeriveLifeTimeSessionKey+0x40>
    d170:	e009      	b.n	d186 <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
    d172:	2308      	movs	r3, #8
    d174:	18fb      	adds	r3, r7, r3
    d176:	2206      	movs	r2, #6
    d178:	701a      	strb	r2, [r3, #0]
            break;
    d17a:	e006      	b.n	d18a <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
    d17c:	2308      	movs	r3, #8
    d17e:	18fb      	adds	r3, r7, r3
    d180:	2205      	movs	r2, #5
    d182:	701a      	strb	r2, [r3, #0]
            break;
    d184:	e001      	b.n	d18a <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    d186:	2308      	movs	r3, #8
    d188:	e016      	b.n	d1b8 <DeriveLifeTimeSessionKey+0x7c>
    }

    memcpyr( compBase + 1, devEUI, 8 );
    d18a:	2308      	movs	r3, #8
    d18c:	18fb      	adds	r3, r7, r3
    d18e:	3301      	adds	r3, #1
    d190:	6839      	ldr	r1, [r7, #0]
    d192:	2208      	movs	r2, #8
    d194:	0018      	movs	r0, r3
    d196:	4b0b      	ldr	r3, [pc, #44]	; (d1c4 <DeriveLifeTimeSessionKey+0x88>)
    d198:	4798      	blx	r3

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
    d19a:	1dfb      	adds	r3, r7, #7
    d19c:	781a      	ldrb	r2, [r3, #0]
    d19e:	2308      	movs	r3, #8
    d1a0:	18f9      	adds	r1, r7, r3
    d1a2:	4b09      	ldr	r3, [pc, #36]	; (d1c8 <DeriveLifeTimeSessionKey+0x8c>)
    d1a4:	6818      	ldr	r0, [r3, #0]
    d1a6:	0013      	movs	r3, r2
    d1a8:	2201      	movs	r2, #1
    d1aa:	4c08      	ldr	r4, [pc, #32]	; (d1cc <DeriveLifeTimeSessionKey+0x90>)
    d1ac:	47a0      	blx	r4
    d1ae:	1e03      	subs	r3, r0, #0
    d1b0:	d001      	beq.n	d1b6 <DeriveLifeTimeSessionKey+0x7a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d1b2:	230c      	movs	r3, #12
    d1b4:	e000      	b.n	d1b8 <DeriveLifeTimeSessionKey+0x7c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d1b6:	2300      	movs	r3, #0
}
    d1b8:	0018      	movs	r0, r3
    d1ba:	46bd      	mov	sp, r7
    d1bc:	b007      	add	sp, #28
    d1be:	bd90      	pop	{r4, r7, pc}
    d1c0:	0001a0e1 	.word	0x0001a0e1
    d1c4:	0000298b 	.word	0x0000298b
    d1c8:	200013cc 	.word	0x200013cc
    d1cc:	00013255 	.word	0x00013255

0000d1d0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    d1d0:	b580      	push	{r7, lr}
    d1d2:	b084      	sub	sp, #16
    d1d4:	af00      	add	r7, sp, #0
    d1d6:	0002      	movs	r2, r0
    d1d8:	6039      	str	r1, [r7, #0]
    d1da:	1dfb      	adds	r3, r7, #7
    d1dc:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
    d1de:	2300      	movs	r3, #0
    d1e0:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
    d1e2:	1dfb      	adds	r3, r7, #7
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b07      	cmp	r3, #7
    d1e8:	d83b      	bhi.n	d262 <CheckFCntDown+0x92>
    d1ea:	009a      	lsls	r2, r3, #2
    d1ec:	4b25      	ldr	r3, [pc, #148]	; (d284 <CheckFCntDown+0xb4>)
    d1ee:	18d3      	adds	r3, r2, r3
    d1f0:	681b      	ldr	r3, [r3, #0]
    d1f2:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
    d1f4:	2300      	movs	r3, #0
    d1f6:	e040      	b.n	d27a <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
    d1f8:	4b23      	ldr	r3, [pc, #140]	; (d288 <CheckFCntDown+0xb8>)
    d1fa:	689b      	ldr	r3, [r3, #8]
    d1fc:	68db      	ldr	r3, [r3, #12]
    d1fe:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
    d200:	4b21      	ldr	r3, [pc, #132]	; (d288 <CheckFCntDown+0xb8>)
    d202:	689b      	ldr	r3, [r3, #8]
    d204:	4a20      	ldr	r2, [pc, #128]	; (d288 <CheckFCntDown+0xb8>)
    d206:	6892      	ldr	r2, [r2, #8]
    d208:	320c      	adds	r2, #12
    d20a:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    d20c:	e02b      	b.n	d266 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
    d20e:	4b1e      	ldr	r3, [pc, #120]	; (d288 <CheckFCntDown+0xb8>)
    d210:	689b      	ldr	r3, [r3, #8]
    d212:	691b      	ldr	r3, [r3, #16]
    d214:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
    d216:	4b1c      	ldr	r3, [pc, #112]	; (d288 <CheckFCntDown+0xb8>)
    d218:	689b      	ldr	r3, [r3, #8]
    d21a:	4a1b      	ldr	r2, [pc, #108]	; (d288 <CheckFCntDown+0xb8>)
    d21c:	6892      	ldr	r2, [r2, #8]
    d21e:	3210      	adds	r2, #16
    d220:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    d222:	e020      	b.n	d266 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
    d224:	4b18      	ldr	r3, [pc, #96]	; (d288 <CheckFCntDown+0xb8>)
    d226:	689b      	ldr	r3, [r3, #8]
    d228:	695b      	ldr	r3, [r3, #20]
    d22a:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    d22c:	4b16      	ldr	r3, [pc, #88]	; (d288 <CheckFCntDown+0xb8>)
    d22e:	689b      	ldr	r3, [r3, #8]
    d230:	4a15      	ldr	r2, [pc, #84]	; (d288 <CheckFCntDown+0xb8>)
    d232:	6892      	ldr	r2, [r2, #8]
    d234:	3214      	adds	r2, #20
    d236:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
    d238:	e015      	b.n	d266 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
    d23a:	4b13      	ldr	r3, [pc, #76]	; (d288 <CheckFCntDown+0xb8>)
    d23c:	689b      	ldr	r3, [r3, #8]
    d23e:	699b      	ldr	r3, [r3, #24]
    d240:	60fb      	str	r3, [r7, #12]
            break;
    d242:	e010      	b.n	d266 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
    d244:	4b10      	ldr	r3, [pc, #64]	; (d288 <CheckFCntDown+0xb8>)
    d246:	689b      	ldr	r3, [r3, #8]
    d248:	69db      	ldr	r3, [r3, #28]
    d24a:	60fb      	str	r3, [r7, #12]
            break;
    d24c:	e00b      	b.n	d266 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
    d24e:	4b0e      	ldr	r3, [pc, #56]	; (d288 <CheckFCntDown+0xb8>)
    d250:	689b      	ldr	r3, [r3, #8]
    d252:	6a1b      	ldr	r3, [r3, #32]
    d254:	60fb      	str	r3, [r7, #12]
            break;
    d256:	e006      	b.n	d266 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
    d258:	4b0b      	ldr	r3, [pc, #44]	; (d288 <CheckFCntDown+0xb8>)
    d25a:	689b      	ldr	r3, [r3, #8]
    d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d25e:	60fb      	str	r3, [r7, #12]
            break;
    d260:	e001      	b.n	d266 <CheckFCntDown+0x96>
        default:
            return false;
    d262:	2300      	movs	r3, #0
    d264:	e009      	b.n	d27a <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
    d266:	683a      	ldr	r2, [r7, #0]
    d268:	68fb      	ldr	r3, [r7, #12]
    d26a:	429a      	cmp	r2, r3
    d26c:	d802      	bhi.n	d274 <CheckFCntDown+0xa4>
    d26e:	68fb      	ldr	r3, [r7, #12]
    d270:	3301      	adds	r3, #1
    d272:	d101      	bne.n	d278 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
    d274:	2301      	movs	r3, #1
    d276:	e000      	b.n	d27a <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
    d278:	2300      	movs	r3, #0
    }
}
    d27a:	0018      	movs	r0, r3
    d27c:	46bd      	mov	sp, r7
    d27e:	b004      	add	sp, #16
    d280:	bd80      	pop	{r7, pc}
    d282:	46c0      	nop			; (mov r8, r8)
    d284:	0001f354 	.word	0x0001f354
    d288:	200013cc 	.word	0x200013cc

0000d28c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    d28c:	b580      	push	{r7, lr}
    d28e:	b082      	sub	sp, #8
    d290:	af00      	add	r7, sp, #0
    d292:	0002      	movs	r2, r0
    d294:	6039      	str	r1, [r7, #0]
    d296:	1dfb      	adds	r3, r7, #7
    d298:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
    d29a:	1dfb      	adds	r3, r7, #7
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	2b07      	cmp	r3, #7
    d2a0:	d827      	bhi.n	d2f2 <UpdateFCntDown+0x66>
    d2a2:	009a      	lsls	r2, r3, #2
    d2a4:	4b17      	ldr	r3, [pc, #92]	; (d304 <UpdateFCntDown+0x78>)
    d2a6:	18d3      	adds	r3, r2, r3
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
    d2ac:	4b16      	ldr	r3, [pc, #88]	; (d308 <UpdateFCntDown+0x7c>)
    d2ae:	689b      	ldr	r3, [r3, #8]
    d2b0:	683a      	ldr	r2, [r7, #0]
    d2b2:	60da      	str	r2, [r3, #12]
            break;
    d2b4:	e01e      	b.n	d2f4 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
    d2b6:	4b14      	ldr	r3, [pc, #80]	; (d308 <UpdateFCntDown+0x7c>)
    d2b8:	689b      	ldr	r3, [r3, #8]
    d2ba:	683a      	ldr	r2, [r7, #0]
    d2bc:	611a      	str	r2, [r3, #16]
            break;
    d2be:	e019      	b.n	d2f4 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
    d2c0:	4b11      	ldr	r3, [pc, #68]	; (d308 <UpdateFCntDown+0x7c>)
    d2c2:	689b      	ldr	r3, [r3, #8]
    d2c4:	683a      	ldr	r2, [r7, #0]
    d2c6:	615a      	str	r2, [r3, #20]
            break;
    d2c8:	e014      	b.n	d2f4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
    d2ca:	4b0f      	ldr	r3, [pc, #60]	; (d308 <UpdateFCntDown+0x7c>)
    d2cc:	689b      	ldr	r3, [r3, #8]
    d2ce:	683a      	ldr	r2, [r7, #0]
    d2d0:	619a      	str	r2, [r3, #24]
            break;
    d2d2:	e00f      	b.n	d2f4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
    d2d4:	4b0c      	ldr	r3, [pc, #48]	; (d308 <UpdateFCntDown+0x7c>)
    d2d6:	689b      	ldr	r3, [r3, #8]
    d2d8:	683a      	ldr	r2, [r7, #0]
    d2da:	61da      	str	r2, [r3, #28]
            break;
    d2dc:	e00a      	b.n	d2f4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
    d2de:	4b0a      	ldr	r3, [pc, #40]	; (d308 <UpdateFCntDown+0x7c>)
    d2e0:	689b      	ldr	r3, [r3, #8]
    d2e2:	683a      	ldr	r2, [r7, #0]
    d2e4:	621a      	str	r2, [r3, #32]
            break;
    d2e6:	e005      	b.n	d2f4 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
    d2e8:	4b07      	ldr	r3, [pc, #28]	; (d308 <UpdateFCntDown+0x7c>)
    d2ea:	689b      	ldr	r3, [r3, #8]
    d2ec:	683a      	ldr	r2, [r7, #0]
    d2ee:	625a      	str	r2, [r3, #36]	; 0x24
            break;
    d2f0:	e000      	b.n	d2f4 <UpdateFCntDown+0x68>
        default:
            break;
    d2f2:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
    d2f4:	4b04      	ldr	r3, [pc, #16]	; (d308 <UpdateFCntDown+0x7c>)
    d2f6:	68db      	ldr	r3, [r3, #12]
    d2f8:	4798      	blx	r3
}
    d2fa:	46c0      	nop			; (mov r8, r8)
    d2fc:	46bd      	mov	sp, r7
    d2fe:	b002      	add	sp, #8
    d300:	bd80      	pop	{r7, pc}
    d302:	46c0      	nop			; (mov r8, r8)
    d304:	0001f374 	.word	0x0001f374
    d308:	200013cc 	.word	0x200013cc

0000d30c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
    d30c:	b580      	push	{r7, lr}
    d30e:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
    d310:	4b16      	ldr	r3, [pc, #88]	; (d36c <ResetFCnts+0x60>)
    d312:	689b      	ldr	r3, [r3, #8]
    d314:	2200      	movs	r2, #0
    d316:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    d318:	4b14      	ldr	r3, [pc, #80]	; (d36c <ResetFCnts+0x60>)
    d31a:	689b      	ldr	r3, [r3, #8]
    d31c:	2201      	movs	r2, #1
    d31e:	4252      	negs	r2, r2
    d320:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    d322:	4b12      	ldr	r3, [pc, #72]	; (d36c <ResetFCnts+0x60>)
    d324:	689b      	ldr	r3, [r3, #8]
    d326:	2201      	movs	r2, #1
    d328:	4252      	negs	r2, r2
    d32a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    d32c:	4b0f      	ldr	r3, [pc, #60]	; (d36c <ResetFCnts+0x60>)
    d32e:	689b      	ldr	r3, [r3, #8]
    d330:	2201      	movs	r2, #1
    d332:	4252      	negs	r2, r2
    d334:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    d336:	4b0d      	ldr	r3, [pc, #52]	; (d36c <ResetFCnts+0x60>)
    d338:	689b      	ldr	r3, [r3, #8]
    d33a:	2201      	movs	r2, #1
    d33c:	4252      	negs	r2, r2
    d33e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    d340:	4b0a      	ldr	r3, [pc, #40]	; (d36c <ResetFCnts+0x60>)
    d342:	689b      	ldr	r3, [r3, #8]
    d344:	2201      	movs	r2, #1
    d346:	4252      	negs	r2, r2
    d348:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    d34a:	4b08      	ldr	r3, [pc, #32]	; (d36c <ResetFCnts+0x60>)
    d34c:	689b      	ldr	r3, [r3, #8]
    d34e:	2201      	movs	r2, #1
    d350:	4252      	negs	r2, r2
    d352:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    d354:	4b05      	ldr	r3, [pc, #20]	; (d36c <ResetFCnts+0x60>)
    d356:	689b      	ldr	r3, [r3, #8]
    d358:	2201      	movs	r2, #1
    d35a:	4252      	negs	r2, r2
    d35c:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
    d35e:	4b03      	ldr	r3, [pc, #12]	; (d36c <ResetFCnts+0x60>)
    d360:	68db      	ldr	r3, [r3, #12]
    d362:	4798      	blx	r3
}
    d364:	46c0      	nop			; (mov r8, r8)
    d366:	46bd      	mov	sp, r7
    d368:	bd80      	pop	{r7, pc}
    d36a:	46c0      	nop			; (mov r8, r8)
    d36c:	200013cc 	.word	0x200013cc

0000d370 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    d370:	b580      	push	{r7, lr}
    d372:	af00      	add	r7, sp, #0
    return;
    d374:	46c0      	nop			; (mov r8, r8)
}
    d376:	46bd      	mov	sp, r7
    d378:	bd80      	pop	{r7, pc}
	...

0000d37c <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
    d37c:	b580      	push	{r7, lr}
    d37e:	b082      	sub	sp, #8
    d380:	af00      	add	r7, sp, #0
    d382:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
    d384:	4b22      	ldr	r3, [pc, #136]	; (d410 <LoRaMacCryptoInit+0x94>)
    d386:	2201      	movs	r2, #1
    d388:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
    d38a:	4b21      	ldr	r3, [pc, #132]	; (d410 <LoRaMacCryptoInit+0x94>)
    d38c:	2201      	movs	r2, #1
    d38e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
    d390:	4b1f      	ldr	r3, [pc, #124]	; (d410 <LoRaMacCryptoInit+0x94>)
    d392:	2200      	movs	r2, #0
    d394:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
    d396:	4b1e      	ldr	r3, [pc, #120]	; (d410 <LoRaMacCryptoInit+0x94>)
    d398:	2200      	movs	r2, #0
    d39a:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
    d39c:	4b1c      	ldr	r3, [pc, #112]	; (d410 <LoRaMacCryptoInit+0x94>)
    d39e:	2200      	movs	r2, #0
    d3a0:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
    d3a2:	4b1b      	ldr	r3, [pc, #108]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3a4:	4a1b      	ldr	r2, [pc, #108]	; (d414 <LoRaMacCryptoInit+0x98>)
    d3a6:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
    d3a8:	687b      	ldr	r3, [r7, #4]
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d003      	beq.n	d3b6 <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
    d3ae:	4b18      	ldr	r3, [pc, #96]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3b0:	687a      	ldr	r2, [r7, #4]
    d3b2:	60da      	str	r2, [r3, #12]
    d3b4:	e002      	b.n	d3bc <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    d3b6:	4b16      	ldr	r3, [pc, #88]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3b8:	4a17      	ldr	r2, [pc, #92]	; (d418 <LoRaMacCryptoInit+0x9c>)
    d3ba:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
    d3bc:	4b14      	ldr	r3, [pc, #80]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3be:	689b      	ldr	r3, [r3, #8]
    d3c0:	2230      	movs	r2, #48	; 0x30
    d3c2:	2100      	movs	r1, #0
    d3c4:	0018      	movs	r0, r3
    d3c6:	4b15      	ldr	r3, [pc, #84]	; (d41c <LoRaMacCryptoInit+0xa0>)
    d3c8:	4798      	blx	r3

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
    d3ca:	4b11      	ldr	r3, [pc, #68]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3cc:	2200      	movs	r2, #0
    d3ce:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    d3d0:	4b0f      	ldr	r3, [pc, #60]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3d2:	689b      	ldr	r3, [r3, #8]
    d3d4:	2200      	movs	r2, #0
    d3d6:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    d3d8:	4b0d      	ldr	r3, [pc, #52]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3da:	689b      	ldr	r3, [r3, #8]
    d3dc:	2201      	movs	r2, #1
    d3de:	4252      	negs	r2, r2
    d3e0:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    d3e2:	4b0b      	ldr	r3, [pc, #44]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3e4:	689b      	ldr	r3, [r3, #8]
    d3e6:	2201      	movs	r2, #1
    d3e8:	4252      	negs	r2, r2
    d3ea:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    d3ec:	4b08      	ldr	r3, [pc, #32]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3ee:	689b      	ldr	r3, [r3, #8]
    d3f0:	2201      	movs	r2, #1
    d3f2:	4252      	negs	r2, r2
    d3f4:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
    d3f6:	4b06      	ldr	r3, [pc, #24]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3f8:	689b      	ldr	r3, [r3, #8]
    d3fa:	4a05      	ldr	r2, [pc, #20]	; (d410 <LoRaMacCryptoInit+0x94>)
    d3fc:	6892      	ldr	r2, [r2, #8]
    d3fe:	3214      	adds	r2, #20
    d400:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
    d402:	4b07      	ldr	r3, [pc, #28]	; (d420 <LoRaMacCryptoInit+0xa4>)
    d404:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    d406:	2300      	movs	r3, #0
}
    d408:	0018      	movs	r0, r3
    d40a:	46bd      	mov	sp, r7
    d40c:	b002      	add	sp, #8
    d40e:	bd80      	pop	{r7, pc}
    d410:	200013cc 	.word	0x200013cc
    d414:	200013dc 	.word	0x200013dc
    d418:	0000d371 	.word	0x0000d371
    d41c:	000029cd 	.word	0x000029cd
    d420:	0000d30d 	.word	0x0000d30d

0000d424 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    d424:	b580      	push	{r7, lr}
    d426:	b082      	sub	sp, #8
    d428:	af00      	add	r7, sp, #0
    d42a:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
    d42c:	4b03      	ldr	r3, [pc, #12]	; (d43c <LoRaMacCryptoSetLrWanVersion+0x18>)
    d42e:	687a      	ldr	r2, [r7, #4]
    d430:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
    d432:	2300      	movs	r3, #0
}
    d434:	0018      	movs	r0, r3
    d436:	46bd      	mov	sp, r7
    d438:	b002      	add	sp, #8
    d43a:	bd80      	pop	{r7, pc}
    d43c:	200013cc 	.word	0x200013cc

0000d440 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
    d440:	b580      	push	{r7, lr}
    d442:	b082      	sub	sp, #8
    d444:	af00      	add	r7, sp, #0
    d446:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
    d448:	687b      	ldr	r3, [r7, #4]
    d44a:	2b00      	cmp	r3, #0
    d44c:	d007      	beq.n	d45e <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
    d44e:	6879      	ldr	r1, [r7, #4]
    d450:	4b05      	ldr	r3, [pc, #20]	; (d468 <LoRaMacCryptoRestoreNvmCtx+0x28>)
    d452:	2230      	movs	r2, #48	; 0x30
    d454:	0018      	movs	r0, r3
    d456:	4b05      	ldr	r3, [pc, #20]	; (d46c <LoRaMacCryptoRestoreNvmCtx+0x2c>)
    d458:	4798      	blx	r3
        return LORAMAC_CRYPTO_SUCCESS;
    d45a:	2300      	movs	r3, #0
    d45c:	e000      	b.n	d460 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d45e:	2307      	movs	r3, #7
    }
}
    d460:	0018      	movs	r0, r3
    d462:	46bd      	mov	sp, r7
    d464:	b002      	add	sp, #8
    d466:	bd80      	pop	{r7, pc}
    d468:	200013dc 	.word	0x200013dc
    d46c:	00002955 	.word	0x00002955

0000d470 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
    d470:	b580      	push	{r7, lr}
    d472:	b082      	sub	sp, #8
    d474:	af00      	add	r7, sp, #0
    d476:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
    d478:	687b      	ldr	r3, [r7, #4]
    d47a:	2230      	movs	r2, #48	; 0x30
    d47c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
    d47e:	4b02      	ldr	r3, [pc, #8]	; (d488 <LoRaMacCryptoGetNvmCtx+0x18>)
}
    d480:	0018      	movs	r0, r3
    d482:	46bd      	mov	sp, r7
    d484:	b002      	add	sp, #8
    d486:	bd80      	pop	{r7, pc}
    d488:	200013dc 	.word	0x200013dc

0000d48c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
    d48c:	b580      	push	{r7, lr}
    d48e:	b082      	sub	sp, #8
    d490:	af00      	add	r7, sp, #0
    d492:	0002      	movs	r2, r0
    d494:	6039      	str	r1, [r7, #0]
    d496:	1dfb      	adds	r3, r7, #7
    d498:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
    d49a:	683a      	ldr	r2, [r7, #0]
    d49c:	1dfb      	adds	r3, r7, #7
    d49e:	781b      	ldrb	r3, [r3, #0]
    d4a0:	0011      	movs	r1, r2
    d4a2:	0018      	movs	r0, r3
    d4a4:	4b05      	ldr	r3, [pc, #20]	; (d4bc <LoRaMacCryptoSetKey+0x30>)
    d4a6:	4798      	blx	r3
    d4a8:	1e03      	subs	r3, r0, #0
    d4aa:	d001      	beq.n	d4b0 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d4ac:	230c      	movs	r3, #12
    d4ae:	e000      	b.n	d4b2 <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
    d4b0:	2300      	movs	r3, #0
}
    d4b2:	0018      	movs	r0, r3
    d4b4:	46bd      	mov	sp, r7
    d4b6:	b002      	add	sp, #8
    d4b8:	bd80      	pop	{r7, pc}
    d4ba:	46c0      	nop			; (mov r8, r8)
    d4bc:	00012f89 	.word	0x00012f89

0000d4c0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    d4c0:	b5b0      	push	{r4, r5, r7, lr}
    d4c2:	b084      	sub	sp, #16
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d101      	bne.n	d4d2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d4ce:	2307      	movs	r3, #7
    d4d0:	e065      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
    d4d2:	230f      	movs	r3, #15
    d4d4:	18fb      	adds	r3, r7, r3
    d4d6:	2201      	movs	r2, #1
    d4d8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    d4da:	230e      	movs	r3, #14
    d4dc:	18fb      	adds	r3, r7, r3
    d4de:	2210      	movs	r2, #16
    d4e0:	701a      	strb	r2, [r3, #0]

    // Add device nonce
    CryptoCtx.NvmCtx->DevNonce++;
    d4e2:	4b31      	ldr	r3, [pc, #196]	; (d5a8 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    d4e4:	689b      	ldr	r3, [r3, #8]
    d4e6:	881a      	ldrh	r2, [r3, #0]
    d4e8:	3201      	adds	r2, #1
    d4ea:	b292      	uxth	r2, r2
    d4ec:	801a      	strh	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    d4ee:	4b2e      	ldr	r3, [pc, #184]	; (d5a8 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    d4f0:	68db      	ldr	r3, [r3, #12]
    d4f2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
    d4f4:	4b2c      	ldr	r3, [pc, #176]	; (d5a8 <LoRaMacCryptoPrepareJoinRequest+0xe8>)
    d4f6:	689b      	ldr	r3, [r3, #8]
    d4f8:	881a      	ldrh	r2, [r3, #0]
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
    d4fe:	687b      	ldr	r3, [r7, #4]
    d500:	330e      	adds	r3, #14
    d502:	220e      	movs	r2, #14
    d504:	18bc      	adds	r4, r7, r2
    d506:	0019      	movs	r1, r3
    d508:	2002      	movs	r0, #2
    d50a:	4b28      	ldr	r3, [pc, #160]	; (d5ac <LoRaMacCryptoPrepareJoinRequest+0xec>)
    d50c:	4798      	blx	r3
    d50e:	0003      	movs	r3, r0
    d510:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    d512:	230e      	movs	r3, #14
    d514:	18fb      	adds	r3, r7, r3
    d516:	781b      	ldrb	r3, [r3, #0]
    d518:	2b00      	cmp	r3, #0
    d51a:	d003      	beq.n	d524 <LoRaMacCryptoPrepareJoinRequest+0x64>
    {
        return retval;
    d51c:	230e      	movs	r3, #14
    d51e:	18fb      	adds	r3, r7, r3
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	e03c      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	330e      	adds	r3, #14
    d528:	220e      	movs	r2, #14
    d52a:	18bc      	adds	r4, r7, r2
    d52c:	0019      	movs	r1, r3
    d52e:	2003      	movs	r0, #3
    d530:	4b1e      	ldr	r3, [pc, #120]	; (d5ac <LoRaMacCryptoPrepareJoinRequest+0xec>)
    d532:	4798      	blx	r3
    d534:	0003      	movs	r3, r0
    d536:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    d538:	230e      	movs	r3, #14
    d53a:	18fb      	adds	r3, r7, r3
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	2b00      	cmp	r3, #0
    d540:	d003      	beq.n	d54a <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
    d542:	230e      	movs	r3, #14
    d544:	18fb      	adds	r3, r7, r3
    d546:	781b      	ldrb	r3, [r3, #0]
    d548:	e029      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	0018      	movs	r0, r3
    d54e:	4b18      	ldr	r3, [pc, #96]	; (d5b0 <LoRaMacCryptoPrepareJoinRequest+0xf0>)
    d550:	4798      	blx	r3
    d552:	1e03      	subs	r3, r0, #0
    d554:	d001      	beq.n	d55a <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d556:	230e      	movs	r3, #14
    d558:	e021      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Compute mic
    retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	6818      	ldr	r0, [r3, #0]
    d55e:	687b      	ldr	r3, [r7, #4]
    d560:	3318      	adds	r3, #24
    d562:	0019      	movs	r1, r3
    d564:	230e      	movs	r3, #14
    d566:	18fc      	adds	r4, r7, r3
    d568:	230f      	movs	r3, #15
    d56a:	18fb      	adds	r3, r7, r3
    d56c:	781a      	ldrb	r2, [r3, #0]
    d56e:	000b      	movs	r3, r1
    d570:	2113      	movs	r1, #19
    d572:	4d10      	ldr	r5, [pc, #64]	; (d5b4 <LoRaMacCryptoPrepareJoinRequest+0xf4>)
    d574:	47a8      	blx	r5
    d576:	0003      	movs	r3, r0
    d578:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    d57a:	230e      	movs	r3, #14
    d57c:	18fb      	adds	r3, r7, r3
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2b00      	cmp	r3, #0
    d582:	d003      	beq.n	d58c <LoRaMacCryptoPrepareJoinRequest+0xcc>
    {
        return retval;
    d584:	230e      	movs	r3, #14
    d586:	18fb      	adds	r3, r7, r3
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	e008      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	0018      	movs	r0, r3
    d590:	4b07      	ldr	r3, [pc, #28]	; (d5b0 <LoRaMacCryptoPrepareJoinRequest+0xf0>)
    d592:	4798      	blx	r3
    d594:	1e03      	subs	r3, r0, #0
    d596:	d001      	beq.n	d59c <LoRaMacCryptoPrepareJoinRequest+0xdc>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d598:	230e      	movs	r3, #14
    d59a:	e000      	b.n	d59e <LoRaMacCryptoPrepareJoinRequest+0xde>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    d59c:	2300      	movs	r3, #0
}
    d59e:	0018      	movs	r0, r3
    d5a0:	46bd      	mov	sp, r7
    d5a2:	b004      	add	sp, #16
    d5a4:	bdb0      	pop	{r4, r5, r7, pc}
    d5a6:	46c0      	nop			; (mov r8, r8)
    d5a8:	200013cc 	.word	0x200013cc
    d5ac:	0000d13d 	.word	0x0000d13d
    d5b0:	0000e8f5 	.word	0x0000e8f5
    d5b4:	0000c809 	.word	0x0000c809

0000d5b8 <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    d5b8:	b5b0      	push	{r4, r5, r7, lr}
    d5ba:	b084      	sub	sp, #16
    d5bc:	af00      	add	r7, sp, #0
    d5be:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    d5c0:	687b      	ldr	r3, [r7, #4]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	d101      	bne.n	d5ca <LoRaMacCryptoPrepareReJoinType1+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d5c6:	2307      	movs	r3, #7
    d5c8:	e036      	b.n	d638 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Check for RJcount1 overflow
    if( CryptoCtx.NvmCtx->RJcount1 == 65535 )
    d5ca:	4b1d      	ldr	r3, [pc, #116]	; (d640 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    d5cc:	689b      	ldr	r3, [r3, #8]
    d5ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    d5d0:	4a1c      	ldr	r2, [pc, #112]	; (d644 <LoRaMacCryptoPrepareReJoinType1+0x8c>)
    d5d2:	4293      	cmp	r3, r2
    d5d4:	d101      	bne.n	d5da <LoRaMacCryptoPrepareReJoinType1+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    d5d6:	230f      	movs	r3, #15
    d5d8:	e02e      	b.n	d638 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	0018      	movs	r0, r3
    d5de:	4b1a      	ldr	r3, [pc, #104]	; (d648 <LoRaMacCryptoPrepareReJoinType1+0x90>)
    d5e0:	4798      	blx	r3
    d5e2:	1e03      	subs	r3, r0, #0
    d5e4:	d001      	beq.n	d5ea <LoRaMacCryptoPrepareReJoinType1+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d5e6:	230e      	movs	r3, #14
    d5e8:	e026      	b.n	d638 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Compute mic
    // cmac = aes128_cmac(JSIntKey, MHDR | RejoinType | JoinEUI| DevEUI | RJcount1)
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC );
    d5ea:	687b      	ldr	r3, [r7, #4]
    d5ec:	6818      	ldr	r0, [r3, #0]
    d5ee:	687b      	ldr	r3, [r7, #4]
    d5f0:	331c      	adds	r3, #28
    d5f2:	220f      	movs	r2, #15
    d5f4:	18bc      	adds	r4, r7, r2
    d5f6:	2202      	movs	r2, #2
    d5f8:	2114      	movs	r1, #20
    d5fa:	4d14      	ldr	r5, [pc, #80]	; (d64c <LoRaMacCryptoPrepareReJoinType1+0x94>)
    d5fc:	47a8      	blx	r5
    d5fe:	0003      	movs	r3, r0
    d600:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    d602:	230f      	movs	r3, #15
    d604:	18fb      	adds	r3, r7, r3
    d606:	781b      	ldrb	r3, [r3, #0]
    d608:	2b00      	cmp	r3, #0
    d60a:	d003      	beq.n	d614 <LoRaMacCryptoPrepareReJoinType1+0x5c>
    {
        return retval;
    d60c:	230f      	movs	r3, #15
    d60e:	18fb      	adds	r3, r7, r3
    d610:	781b      	ldrb	r3, [r3, #0]
    d612:	e011      	b.n	d638 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d614:	687b      	ldr	r3, [r7, #4]
    d616:	0018      	movs	r0, r3
    d618:	4b0b      	ldr	r3, [pc, #44]	; (d648 <LoRaMacCryptoPrepareReJoinType1+0x90>)
    d61a:	4798      	blx	r3
    d61c:	1e03      	subs	r3, r0, #0
    d61e:	d001      	beq.n	d624 <LoRaMacCryptoPrepareReJoinType1+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d620:	230e      	movs	r3, #14
    d622:	e009      	b.n	d638 <LoRaMacCryptoPrepareReJoinType1+0x80>
    }

    // Increment RJcount1
    CryptoCtx.NvmCtx->RJcount1++;
    d624:	4b06      	ldr	r3, [pc, #24]	; (d640 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    d626:	689b      	ldr	r3, [r3, #8]
    d628:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    d62a:	3201      	adds	r2, #1
    d62c:	b292      	uxth	r2, r2
    d62e:	851a      	strh	r2, [r3, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
    d630:	4b03      	ldr	r3, [pc, #12]	; (d640 <LoRaMacCryptoPrepareReJoinType1+0x88>)
    d632:	68db      	ldr	r3, [r3, #12]
    d634:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    d636:	2300      	movs	r3, #0
}
    d638:	0018      	movs	r0, r3
    d63a:	46bd      	mov	sp, r7
    d63c:	b004      	add	sp, #16
    d63e:	bdb0      	pop	{r4, r5, r7, pc}
    d640:	200013cc 	.word	0x200013cc
    d644:	0000ffff 	.word	0x0000ffff
    d648:	0000ea55 	.word	0x0000ea55
    d64c:	0000c809 	.word	0x0000c809

0000d650 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    d650:	b5b0      	push	{r4, r5, r7, lr}
    d652:	b084      	sub	sp, #16
    d654:	af00      	add	r7, sp, #0
    d656:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
    d658:	687b      	ldr	r3, [r7, #4]
    d65a:	2b00      	cmp	r3, #0
    d65c:	d101      	bne.n	d662 <LoRaMacCryptoPrepareReJoinType0or2+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d65e:	2307      	movs	r3, #7
    d660:	e032      	b.n	d6c8 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Check for RJcount0 overflow
    if( CryptoCtx.RJcount0 == 65535 )
    d662:	4b1b      	ldr	r3, [pc, #108]	; (d6d0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    d664:	889b      	ldrh	r3, [r3, #4]
    d666:	4a1b      	ldr	r2, [pc, #108]	; (d6d4 <LoRaMacCryptoPrepareReJoinType0or2+0x84>)
    d668:	4293      	cmp	r3, r2
    d66a:	d101      	bne.n	d670 <LoRaMacCryptoPrepareReJoinType0or2+0x20>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    d66c:	2304      	movs	r3, #4
    d66e:	e02b      	b.n	d6c8 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	0018      	movs	r0, r3
    d674:	4b18      	ldr	r3, [pc, #96]	; (d6d8 <LoRaMacCryptoPrepareReJoinType0or2+0x88>)
    d676:	4798      	blx	r3
    d678:	1e03      	subs	r3, r0, #0
    d67a:	d001      	beq.n	d680 <LoRaMacCryptoPrepareReJoinType0or2+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d67c:	230e      	movs	r3, #14
    d67e:	e023      	b.n	d6c8 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Compute mic
    // cmac = aes128_cmac(SNwkSIntKey, MHDR | Rejoin Type | NetID | DevEUI | RJcount0)
    LoRaMacCryptoStatus_t retval = ComputeCmac( macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC );
    d680:	687b      	ldr	r3, [r7, #4]
    d682:	6818      	ldr	r0, [r3, #0]
    d684:	687b      	ldr	r3, [r7, #4]
    d686:	3314      	adds	r3, #20
    d688:	220f      	movs	r2, #15
    d68a:	18bc      	adds	r4, r7, r2
    d68c:	2205      	movs	r2, #5
    d68e:	210f      	movs	r1, #15
    d690:	4d12      	ldr	r5, [pc, #72]	; (d6dc <LoRaMacCryptoPrepareReJoinType0or2+0x8c>)
    d692:	47a8      	blx	r5
    d694:	0003      	movs	r3, r0
    d696:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    d698:	230f      	movs	r3, #15
    d69a:	18fb      	adds	r3, r7, r3
    d69c:	781b      	ldrb	r3, [r3, #0]
    d69e:	2b00      	cmp	r3, #0
    d6a0:	d003      	beq.n	d6aa <LoRaMacCryptoPrepareReJoinType0or2+0x5a>
    {
        return retval;
    d6a2:	230f      	movs	r3, #15
    d6a4:	18fb      	adds	r3, r7, r3
    d6a6:	781b      	ldrb	r3, [r3, #0]
    d6a8:	e00e      	b.n	d6c8 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    d6aa:	687b      	ldr	r3, [r7, #4]
    d6ac:	0018      	movs	r0, r3
    d6ae:	4b0a      	ldr	r3, [pc, #40]	; (d6d8 <LoRaMacCryptoPrepareReJoinType0or2+0x88>)
    d6b0:	4798      	blx	r3
    d6b2:	1e03      	subs	r3, r0, #0
    d6b4:	d001      	beq.n	d6ba <LoRaMacCryptoPrepareReJoinType0or2+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    d6b6:	230e      	movs	r3, #14
    d6b8:	e006      	b.n	d6c8 <LoRaMacCryptoPrepareReJoinType0or2+0x78>
    }

    // Increment RJcount0
    CryptoCtx.RJcount0++;
    d6ba:	4b05      	ldr	r3, [pc, #20]	; (d6d0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    d6bc:	889b      	ldrh	r3, [r3, #4]
    d6be:	3301      	adds	r3, #1
    d6c0:	b29a      	uxth	r2, r3
    d6c2:	4b03      	ldr	r3, [pc, #12]	; (d6d0 <LoRaMacCryptoPrepareReJoinType0or2+0x80>)
    d6c4:	809a      	strh	r2, [r3, #4]

    return LORAMAC_CRYPTO_SUCCESS;
    d6c6:	2300      	movs	r3, #0
}
    d6c8:	0018      	movs	r0, r3
    d6ca:	46bd      	mov	sp, r7
    d6cc:	b004      	add	sp, #16
    d6ce:	bdb0      	pop	{r4, r5, r7, pc}
    d6d0:	200013cc 	.word	0x200013cc
    d6d4:	0000ffff 	.word	0x0000ffff
    d6d8:	0000ebd1 	.word	0x0000ebd1
    d6dc:	0000c809 	.word	0x0000c809

0000d6e0 <LoRaMacCryptoHandleJoinAccept>:

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
    d6e0:	b5b0      	push	{r4, r5, r7, lr}
    d6e2:	b0cc      	sub	sp, #304	; 0x130
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	60b9      	str	r1, [r7, #8]
    d6e8:	607a      	str	r2, [r7, #4]
    d6ea:	4be4      	ldr	r3, [pc, #912]	; (da7c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    d6ec:	2298      	movs	r2, #152	; 0x98
    d6ee:	0052      	lsls	r2, r2, #1
    d6f0:	4694      	mov	ip, r2
    d6f2:	44bc      	add	ip, r7
    d6f4:	4463      	add	r3, ip
    d6f6:	1c02      	adds	r2, r0, #0
    d6f8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d002      	beq.n	d706 <LoRaMacCryptoHandleJoinAccept+0x26>
    d700:	68bb      	ldr	r3, [r7, #8]
    d702:	2b00      	cmp	r3, #0
    d704:	d101      	bne.n	d70a <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    d706:	2307      	movs	r3, #7
    d708:	e29e      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    d70a:	2328      	movs	r3, #40	; 0x28
    d70c:	33ff      	adds	r3, #255	; 0xff
    d70e:	18fb      	adds	r3, r7, r3
    d710:	2210      	movs	r2, #16
    d712:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
    d714:	232e      	movs	r3, #46	; 0x2e
    d716:	33ff      	adds	r3, #255	; 0xff
    d718:	18fb      	adds	r3, r7, r3
    d71a:	2200      	movs	r2, #0
    d71c:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
    d71e:	4bd8      	ldr	r3, [pc, #864]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d720:	689b      	ldr	r3, [r3, #8]
    d722:	2294      	movs	r2, #148	; 0x94
    d724:	0052      	lsls	r2, r2, #1
    d726:	18ba      	adds	r2, r7, r2
    d728:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
    d72a:	4bd4      	ldr	r3, [pc, #848]	; (da7c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    d72c:	2298      	movs	r2, #152	; 0x98
    d72e:	0052      	lsls	r2, r2, #1
    d730:	4694      	mov	ip, r2
    d732:	44bc      	add	ip, r7
    d734:	4463      	add	r3, ip
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	2bff      	cmp	r3, #255	; 0xff
    d73a:	d10a      	bne.n	d752 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
    d73c:	2397      	movs	r3, #151	; 0x97
    d73e:	005b      	lsls	r3, r3, #1
    d740:	18fb      	adds	r3, r7, r3
    d742:	2201      	movs	r2, #1
    d744:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
    d746:	232e      	movs	r3, #46	; 0x2e
    d748:	33ff      	adds	r3, #255	; 0xff
    d74a:	18fb      	adds	r3, r7, r3
    d74c:	220c      	movs	r2, #12
    d74e:	701a      	strb	r2, [r3, #0]
    d750:	e023      	b.n	d79a <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
    d752:	2397      	movs	r3, #151	; 0x97
    d754:	005b      	lsls	r3, r3, #1
    d756:	18fb      	adds	r3, r7, r3
    d758:	2203      	movs	r2, #3
    d75a:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
    d75c:	4bc7      	ldr	r3, [pc, #796]	; (da7c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    d75e:	2298      	movs	r2, #152	; 0x98
    d760:	0052      	lsls	r2, r2, #1
    d762:	4694      	mov	ip, r2
    d764:	44bc      	add	ip, r7
    d766:	4463      	add	r3, ip
    d768:	781b      	ldrb	r3, [r3, #0]
    d76a:	2b00      	cmp	r3, #0
    d76c:	d008      	beq.n	d780 <LoRaMacCryptoHandleJoinAccept+0xa0>
    d76e:	4bc3      	ldr	r3, [pc, #780]	; (da7c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    d770:	2298      	movs	r2, #152	; 0x98
    d772:	0052      	lsls	r2, r2, #1
    d774:	4694      	mov	ip, r2
    d776:	44bc      	add	ip, r7
    d778:	4463      	add	r3, ip
    d77a:	781b      	ldrb	r3, [r3, #0]
    d77c:	2b02      	cmp	r3, #2
    d77e:	d105      	bne.n	d78c <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
    d780:	4bc0      	ldr	r3, [pc, #768]	; (da84 <LoRaMacCryptoHandleJoinAccept+0x3a4>)
    d782:	2294      	movs	r2, #148	; 0x94
    d784:	0052      	lsls	r2, r2, #1
    d786:	18ba      	adds	r2, r7, r2
    d788:	6013      	str	r3, [r2, #0]
    d78a:	e006      	b.n	d79a <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
    d78c:	4bbc      	ldr	r3, [pc, #752]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d78e:	689b      	ldr	r3, [r3, #8]
    d790:	3328      	adds	r3, #40	; 0x28
    d792:	2294      	movs	r2, #148	; 0x94
    d794:	0052      	lsls	r2, r2, #1
    d796:	18ba      	adds	r2, r7, r2
    d798:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
    d79a:	687b      	ldr	r3, [r7, #4]
    d79c:	791b      	ldrb	r3, [r3, #4]
    d79e:	b29a      	uxth	r2, r3
    d7a0:	232e      	movs	r3, #46	; 0x2e
    d7a2:	33ff      	adds	r3, #255	; 0xff
    d7a4:	18fb      	adds	r3, r7, r3
    d7a6:	781b      	ldrb	r3, [r3, #0]
    d7a8:	b29b      	uxth	r3, r3
    d7aa:	18d3      	adds	r3, r2, r3
    d7ac:	b29a      	uxth	r2, r3
    d7ae:	2314      	movs	r3, #20
    d7b0:	18fb      	adds	r3, r7, r3
    d7b2:	2100      	movs	r1, #0
    d7b4:	0018      	movs	r0, r3
    d7b6:	4bb4      	ldr	r3, [pc, #720]	; (da88 <LoRaMacCryptoHandleJoinAccept+0x3a8>)
    d7b8:	4798      	blx	r3

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
    d7ba:	687b      	ldr	r3, [r7, #4]
    d7bc:	681b      	ldr	r3, [r3, #0]
    d7be:	1c58      	adds	r0, r3, #1
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	791b      	ldrb	r3, [r3, #4]
    d7c4:	b29b      	uxth	r3, r3
    d7c6:	3b01      	subs	r3, #1
    d7c8:	b299      	uxth	r1, r3
    d7ca:	232e      	movs	r3, #46	; 0x2e
    d7cc:	33ff      	adds	r3, #255	; 0xff
    d7ce:	18fb      	adds	r3, r7, r3
    d7d0:	781b      	ldrb	r3, [r3, #0]
    d7d2:	2214      	movs	r2, #20
    d7d4:	18ba      	adds	r2, r7, r2
    d7d6:	18d4      	adds	r4, r2, r3
    d7d8:	2397      	movs	r3, #151	; 0x97
    d7da:	005b      	lsls	r3, r3, #1
    d7dc:	18fb      	adds	r3, r7, r3
    d7de:	781a      	ldrb	r2, [r3, #0]
    d7e0:	0023      	movs	r3, r4
    d7e2:	4caa      	ldr	r4, [pc, #680]	; (da8c <LoRaMacCryptoHandleJoinAccept+0x3ac>)
    d7e4:	47a0      	blx	r4
    d7e6:	1e03      	subs	r3, r0, #0
    d7e8:	d001      	beq.n	d7ee <LoRaMacCryptoHandleJoinAccept+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    d7ea:	230c      	movs	r3, #12
    d7ec:	e22c      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	681b      	ldr	r3, [r3, #0]
    d7f2:	1c58      	adds	r0, r3, #1
    d7f4:	232e      	movs	r3, #46	; 0x2e
    d7f6:	33ff      	adds	r3, #255	; 0xff
    d7f8:	18fb      	adds	r3, r7, r3
    d7fa:	781b      	ldrb	r3, [r3, #0]
    d7fc:	2214      	movs	r2, #20
    d7fe:	18ba      	adds	r2, r7, r2
    d800:	18d1      	adds	r1, r2, r3
    d802:	687b      	ldr	r3, [r7, #4]
    d804:	791b      	ldrb	r3, [r3, #4]
    d806:	b29b      	uxth	r3, r3
    d808:	3b01      	subs	r3, #1
    d80a:	b29b      	uxth	r3, r3
    d80c:	001a      	movs	r2, r3
    d80e:	4ba0      	ldr	r3, [pc, #640]	; (da90 <LoRaMacCryptoHandleJoinAccept+0x3b0>)
    d810:	4798      	blx	r3

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	0018      	movs	r0, r3
    d816:	4b9f      	ldr	r3, [pc, #636]	; (da94 <LoRaMacCryptoHandleJoinAccept+0x3b4>)
    d818:	4798      	blx	r3
    d81a:	1e03      	subs	r3, r0, #0
    d81c:	d001      	beq.n	d822 <LoRaMacCryptoHandleJoinAccept+0x142>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    d81e:	230d      	movs	r3, #13
    d820:	e212      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
    d822:	687b      	ldr	r3, [r7, #4]
    d824:	7c1b      	ldrb	r3, [r3, #16]
    d826:	227f      	movs	r2, #127	; 0x7f
    d828:	4393      	bics	r3, r2
    d82a:	b2db      	uxtb	r3, r3
    d82c:	2b00      	cmp	r3, #0
    d82e:	d008      	beq.n	d842 <LoRaMacCryptoHandleJoinAccept+0x162>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
    d830:	4b93      	ldr	r3, [pc, #588]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d832:	2201      	movs	r2, #1
    d834:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
    d836:	2330      	movs	r3, #48	; 0x30
    d838:	33ff      	adds	r3, #255	; 0xff
    d83a:	18fb      	adds	r3, r7, r3
    d83c:	2202      	movs	r2, #2
    d83e:	701a      	strb	r2, [r3, #0]
    d840:	e007      	b.n	d852 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
    d842:	4b8f      	ldr	r3, [pc, #572]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d844:	2200      	movs	r2, #0
    d846:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
    d848:	2330      	movs	r3, #48	; 0x30
    d84a:	33ff      	adds	r3, #255	; 0xff
    d84c:	18fb      	adds	r3, r7, r3
    d84e:	2201      	movs	r2, #1
    d850:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
    d852:	4b8b      	ldr	r3, [pc, #556]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d854:	789b      	ldrb	r3, [r3, #2]
    d856:	2b00      	cmp	r3, #0
    d858:	d120      	bne.n	d89c <LoRaMacCryptoHandleJoinAccept+0x1bc>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    d85a:	687b      	ldr	r3, [r7, #4]
    d85c:	6818      	ldr	r0, [r3, #0]
    d85e:	687b      	ldr	r3, [r7, #4]
    d860:	791b      	ldrb	r3, [r3, #4]
    d862:	b29b      	uxth	r3, r3
    d864:	3b04      	subs	r3, #4
    d866:	b299      	uxth	r1, r3
    d868:	687b      	ldr	r3, [r7, #4]
    d86a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    d86c:	2328      	movs	r3, #40	; 0x28
    d86e:	33ff      	adds	r3, #255	; 0xff
    d870:	18fc      	adds	r4, r7, r3
    d872:	2330      	movs	r3, #48	; 0x30
    d874:	33ff      	adds	r3, #255	; 0xff
    d876:	18fb      	adds	r3, r7, r3
    d878:	781a      	ldrb	r2, [r3, #0]
    d87a:	002b      	movs	r3, r5
    d87c:	4d86      	ldr	r5, [pc, #536]	; (da98 <LoRaMacCryptoHandleJoinAccept+0x3b8>)
    d87e:	47a8      	blx	r5
    d880:	0003      	movs	r3, r0
    d882:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    d884:	2328      	movs	r3, #40	; 0x28
    d886:	33ff      	adds	r3, #255	; 0xff
    d888:	18fb      	adds	r3, r7, r3
    d88a:	781b      	ldrb	r3, [r3, #0]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d100      	bne.n	d892 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    d890:	e0d5      	b.n	da3e <LoRaMacCryptoHandleJoinAccept+0x35e>
        {
            return retval;
    d892:	2328      	movs	r3, #40	; 0x28
    d894:	33ff      	adds	r3, #255	; 0xff
    d896:	18fb      	adds	r3, r7, r3
    d898:	781b      	ldrb	r3, [r3, #0]
    d89a:	e1d5      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
    d89c:	2392      	movs	r3, #146	; 0x92
    d89e:	005b      	lsls	r3, r3, #1
    d8a0:	18fb      	adds	r3, r7, r3
    d8a2:	2200      	movs	r2, #0
    d8a4:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
    d8a6:	2392      	movs	r3, #146	; 0x92
    d8a8:	005b      	lsls	r3, r3, #1
    d8aa:	18fb      	adds	r3, r7, r3
    d8ac:	881b      	ldrh	r3, [r3, #0]
    d8ae:	2292      	movs	r2, #146	; 0x92
    d8b0:	0052      	lsls	r2, r2, #1
    d8b2:	18ba      	adds	r2, r7, r2
    d8b4:	1c59      	adds	r1, r3, #1
    d8b6:	8011      	strh	r1, [r2, #0]
    d8b8:	0019      	movs	r1, r3
    d8ba:	4b78      	ldr	r3, [pc, #480]	; (da9c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    d8bc:	2298      	movs	r2, #152	; 0x98
    d8be:	0052      	lsls	r2, r2, #1
    d8c0:	4694      	mov	ip, r2
    d8c2:	44bc      	add	ip, r7
    d8c4:	4463      	add	r3, ip
    d8c6:	4a6d      	ldr	r2, [pc, #436]	; (da7c <LoRaMacCryptoHandleJoinAccept+0x39c>)
    d8c8:	2098      	movs	r0, #152	; 0x98
    d8ca:	0040      	lsls	r0, r0, #1
    d8cc:	4684      	mov	ip, r0
    d8ce:	44bc      	add	ip, r7
    d8d0:	4462      	add	r2, ip
    d8d2:	7812      	ldrb	r2, [r2, #0]
    d8d4:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    d8d6:	2392      	movs	r3, #146	; 0x92
    d8d8:	005b      	lsls	r3, r3, #1
    d8da:	18fb      	adds	r3, r7, r3
    d8dc:	881b      	ldrh	r3, [r3, #0]
    d8de:	2214      	movs	r2, #20
    d8e0:	18ba      	adds	r2, r7, r2
    d8e2:	18d3      	adds	r3, r2, r3
    d8e4:	68b9      	ldr	r1, [r7, #8]
    d8e6:	2208      	movs	r2, #8
    d8e8:	0018      	movs	r0, r3
    d8ea:	4b6d      	ldr	r3, [pc, #436]	; (daa0 <LoRaMacCryptoHandleJoinAccept+0x3c0>)
    d8ec:	4798      	blx	r3
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    d8ee:	2392      	movs	r3, #146	; 0x92
    d8f0:	005b      	lsls	r3, r3, #1
    d8f2:	18fb      	adds	r3, r7, r3
    d8f4:	2292      	movs	r2, #146	; 0x92
    d8f6:	0052      	lsls	r2, r2, #1
    d8f8:	18ba      	adds	r2, r7, r2
    d8fa:	8812      	ldrh	r2, [r2, #0]
    d8fc:	3208      	adds	r2, #8
    d8fe:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
    d900:	2392      	movs	r3, #146	; 0x92
    d902:	005b      	lsls	r3, r3, #1
    d904:	18fb      	adds	r3, r7, r3
    d906:	881b      	ldrh	r3, [r3, #0]
    d908:	2292      	movs	r2, #146	; 0x92
    d90a:	0052      	lsls	r2, r2, #1
    d90c:	18ba      	adds	r2, r7, r2
    d90e:	1c59      	adds	r1, r3, #1
    d910:	8011      	strh	r1, [r2, #0]
    d912:	001a      	movs	r2, r3
    d914:	4b5a      	ldr	r3, [pc, #360]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d916:	689b      	ldr	r3, [r3, #8]
    d918:	881b      	ldrh	r3, [r3, #0]
    d91a:	b2d9      	uxtb	r1, r3
    d91c:	4b5f      	ldr	r3, [pc, #380]	; (da9c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    d91e:	2098      	movs	r0, #152	; 0x98
    d920:	0040      	lsls	r0, r0, #1
    d922:	4684      	mov	ip, r0
    d924:	44bc      	add	ip, r7
    d926:	4463      	add	r3, ip
    d928:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
    d92a:	2392      	movs	r3, #146	; 0x92
    d92c:	005b      	lsls	r3, r3, #1
    d92e:	18fb      	adds	r3, r7, r3
    d930:	881b      	ldrh	r3, [r3, #0]
    d932:	2292      	movs	r2, #146	; 0x92
    d934:	0052      	lsls	r2, r2, #1
    d936:	18ba      	adds	r2, r7, r2
    d938:	1c59      	adds	r1, r3, #1
    d93a:	8011      	strh	r1, [r2, #0]
    d93c:	001a      	movs	r2, r3
    d93e:	4b50      	ldr	r3, [pc, #320]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    d940:	689b      	ldr	r3, [r3, #8]
    d942:	881b      	ldrh	r3, [r3, #0]
    d944:	0a1b      	lsrs	r3, r3, #8
    d946:	b29b      	uxth	r3, r3
    d948:	b2d9      	uxtb	r1, r3
    d94a:	4b54      	ldr	r3, [pc, #336]	; (da9c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    d94c:	2098      	movs	r0, #152	; 0x98
    d94e:	0040      	lsls	r0, r0, #1
    d950:	4684      	mov	ip, r0
    d952:	44bc      	add	ip, r7
    d954:	4463      	add	r3, ip
    d956:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
    d958:	2392      	movs	r3, #146	; 0x92
    d95a:	005b      	lsls	r3, r3, #1
    d95c:	18fb      	adds	r3, r7, r3
    d95e:	881b      	ldrh	r3, [r3, #0]
    d960:	2292      	movs	r2, #146	; 0x92
    d962:	0052      	lsls	r2, r2, #1
    d964:	18ba      	adds	r2, r7, r2
    d966:	1c59      	adds	r1, r3, #1
    d968:	8011      	strh	r1, [r2, #0]
    d96a:	001a      	movs	r2, r3
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	7959      	ldrb	r1, [r3, #5]
    d970:	4b4a      	ldr	r3, [pc, #296]	; (da9c <LoRaMacCryptoHandleJoinAccept+0x3bc>)
    d972:	2098      	movs	r0, #152	; 0x98
    d974:	0040      	lsls	r0, r0, #1
    d976:	4684      	mov	ip, r0
    d978:	44bc      	add	ip, r7
    d97a:	4463      	add	r3, ip
    d97c:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	791b      	ldrb	r3, [r3, #4]
    d982:	b29a      	uxth	r2, r3
    d984:	232e      	movs	r3, #46	; 0x2e
    d986:	33ff      	adds	r3, #255	; 0xff
    d988:	18fb      	adds	r3, r7, r3
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	b29b      	uxth	r3, r3
    d98e:	18d3      	adds	r3, r2, r3
    d990:	b29b      	uxth	r3, r3
    d992:	3b05      	subs	r3, #5
    d994:	b299      	uxth	r1, r3
    d996:	687b      	ldr	r3, [r7, #4]
    d998:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    d99a:	2328      	movs	r3, #40	; 0x28
    d99c:	33ff      	adds	r3, #255	; 0xff
    d99e:	18fc      	adds	r4, r7, r3
    d9a0:	2330      	movs	r3, #48	; 0x30
    d9a2:	33ff      	adds	r3, #255	; 0xff
    d9a4:	18fb      	adds	r3, r7, r3
    d9a6:	781a      	ldrb	r2, [r3, #0]
    d9a8:	2314      	movs	r3, #20
    d9aa:	18f8      	adds	r0, r7, r3
    d9ac:	002b      	movs	r3, r5
    d9ae:	4d3a      	ldr	r5, [pc, #232]	; (da98 <LoRaMacCryptoHandleJoinAccept+0x3b8>)
    d9b0:	47a8      	blx	r5
    d9b2:	0003      	movs	r3, r0
    d9b4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    d9b6:	2328      	movs	r3, #40	; 0x28
    d9b8:	33ff      	adds	r3, #255	; 0xff
    d9ba:	18fb      	adds	r3, r7, r3
    d9bc:	781b      	ldrb	r3, [r3, #0]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d004      	beq.n	d9cc <LoRaMacCryptoHandleJoinAccept+0x2ec>
        {
            return retval;
    d9c2:	2328      	movs	r3, #40	; 0x28
    d9c4:	33ff      	adds	r3, #255	; 0xff
    d9c6:	18fb      	adds	r3, r7, r3
    d9c8:	781b      	ldrb	r3, [r3, #0]
    d9ca:	e13d      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
    d9cc:	2300      	movs	r3, #0
    d9ce:	2290      	movs	r2, #144	; 0x90
    d9d0:	0052      	lsls	r2, r2, #1
    d9d2:	18ba      	adds	r2, r7, r2
    d9d4:	6013      	str	r3, [r2, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	799b      	ldrb	r3, [r3, #6]
    d9da:	2290      	movs	r2, #144	; 0x90
    d9dc:	0052      	lsls	r2, r2, #1
    d9de:	18ba      	adds	r2, r7, r2
    d9e0:	6013      	str	r3, [r2, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
    d9e2:	687b      	ldr	r3, [r7, #4]
    d9e4:	79db      	ldrb	r3, [r3, #7]
    d9e6:	021b      	lsls	r3, r3, #8
    d9e8:	2290      	movs	r2, #144	; 0x90
    d9ea:	0052      	lsls	r2, r2, #1
    d9ec:	18ba      	adds	r2, r7, r2
    d9ee:	6812      	ldr	r2, [r2, #0]
    d9f0:	4313      	orrs	r3, r2
    d9f2:	2290      	movs	r2, #144	; 0x90
    d9f4:	0052      	lsls	r2, r2, #1
    d9f6:	18ba      	adds	r2, r7, r2
    d9f8:	6013      	str	r3, [r2, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
    d9fa:	687b      	ldr	r3, [r7, #4]
    d9fc:	7a1b      	ldrb	r3, [r3, #8]
    d9fe:	041b      	lsls	r3, r3, #16
    da00:	2290      	movs	r2, #144	; 0x90
    da02:	0052      	lsls	r2, r2, #1
    da04:	18ba      	adds	r2, r7, r2
    da06:	6812      	ldr	r2, [r2, #0]
    da08:	4313      	orrs	r3, r2
    da0a:	2290      	movs	r2, #144	; 0x90
    da0c:	0052      	lsls	r2, r2, #1
    da0e:	18ba      	adds	r2, r7, r2
    da10:	6013      	str	r3, [r2, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
    da12:	4b1b      	ldr	r3, [pc, #108]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    da14:	689b      	ldr	r3, [r3, #8]
    da16:	685a      	ldr	r2, [r3, #4]
    da18:	2390      	movs	r3, #144	; 0x90
    da1a:	005b      	lsls	r3, r3, #1
    da1c:	18fb      	adds	r3, r7, r3
    da1e:	681b      	ldr	r3, [r3, #0]
    da20:	429a      	cmp	r2, r3
    da22:	d20a      	bcs.n	da3a <LoRaMacCryptoHandleJoinAccept+0x35a>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
    da24:	4b16      	ldr	r3, [pc, #88]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    da26:	689b      	ldr	r3, [r3, #8]
    da28:	2290      	movs	r2, #144	; 0x90
    da2a:	0052      	lsls	r2, r2, #1
    da2c:	18ba      	adds	r2, r7, r2
    da2e:	6812      	ldr	r2, [r2, #0]
    da30:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
    da32:	4b13      	ldr	r3, [pc, #76]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    da34:	68db      	ldr	r3, [r3, #12]
    da36:	4798      	blx	r3
    da38:	e001      	b.n	da3e <LoRaMacCryptoHandleJoinAccept+0x35e>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    da3a:	2303      	movs	r3, #3
    da3c:	e104      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    da3e:	4b10      	ldr	r3, [pc, #64]	; (da80 <LoRaMacCryptoHandleJoinAccept+0x3a0>)
    da40:	789b      	ldrb	r3, [r3, #2]
    da42:	2b01      	cmp	r3, #1
    da44:	d000      	beq.n	da48 <LoRaMacCryptoHandleJoinAccept+0x368>
    da46:	e07d      	b.n	db44 <LoRaMacCryptoHandleJoinAccept+0x464>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	1d99      	adds	r1, r3, #6
    da4c:	2328      	movs	r3, #40	; 0x28
    da4e:	33ff      	adds	r3, #255	; 0xff
    da50:	18fc      	adds	r4, r7, r3
    da52:	2394      	movs	r3, #148	; 0x94
    da54:	005b      	lsls	r3, r3, #1
    da56:	18fb      	adds	r3, r7, r3
    da58:	681b      	ldr	r3, [r3, #0]
    da5a:	68ba      	ldr	r2, [r7, #8]
    da5c:	2004      	movs	r0, #4
    da5e:	4d11      	ldr	r5, [pc, #68]	; (daa4 <LoRaMacCryptoHandleJoinAccept+0x3c4>)
    da60:	47a8      	blx	r5
    da62:	0003      	movs	r3, r0
    da64:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    da66:	2328      	movs	r3, #40	; 0x28
    da68:	33ff      	adds	r3, #255	; 0xff
    da6a:	18fb      	adds	r3, r7, r3
    da6c:	781b      	ldrb	r3, [r3, #0]
    da6e:	2b00      	cmp	r3, #0
    da70:	d01a      	beq.n	daa8 <LoRaMacCryptoHandleJoinAccept+0x3c8>
        {
            return retval;
    da72:	2328      	movs	r3, #40	; 0x28
    da74:	33ff      	adds	r3, #255	; 0xff
    da76:	18fb      	adds	r3, r7, r3
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	e0e5      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    da7c:	fffffedf 	.word	0xfffffedf
    da80:	200013cc 	.word	0x200013cc
    da84:	200013d0 	.word	0x200013d0
    da88:	000029cd 	.word	0x000029cd
    da8c:	00013165 	.word	0x00013165
    da90:	00002955 	.word	0x00002955
    da94:	0000e461 	.word	0x0000e461
    da98:	0000c855 	.word	0x0000c855
    da9c:	fffffee4 	.word	0xfffffee4
    daa0:	0000298b 	.word	0x0000298b
    daa4:	0000d039 	.word	0x0000d039
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    daa8:	687b      	ldr	r3, [r7, #4]
    daaa:	1d99      	adds	r1, r3, #6
    daac:	2328      	movs	r3, #40	; 0x28
    daae:	33ff      	adds	r3, #255	; 0xff
    dab0:	18fc      	adds	r4, r7, r3
    dab2:	2394      	movs	r3, #148	; 0x94
    dab4:	005b      	lsls	r3, r3, #1
    dab6:	18fb      	adds	r3, r7, r3
    dab8:	681b      	ldr	r3, [r3, #0]
    daba:	68ba      	ldr	r2, [r7, #8]
    dabc:	2005      	movs	r0, #5
    dabe:	4d64      	ldr	r5, [pc, #400]	; (dc50 <LoRaMacCryptoHandleJoinAccept+0x570>)
    dac0:	47a8      	blx	r5
    dac2:	0003      	movs	r3, r0
    dac4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    dac6:	2328      	movs	r3, #40	; 0x28
    dac8:	33ff      	adds	r3, #255	; 0xff
    daca:	18fb      	adds	r3, r7, r3
    dacc:	781b      	ldrb	r3, [r3, #0]
    dace:	2b00      	cmp	r3, #0
    dad0:	d004      	beq.n	dadc <LoRaMacCryptoHandleJoinAccept+0x3fc>
        {
            return retval;
    dad2:	2328      	movs	r3, #40	; 0x28
    dad4:	33ff      	adds	r3, #255	; 0xff
    dad6:	18fb      	adds	r3, r7, r3
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	e0b5      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    dadc:	687b      	ldr	r3, [r7, #4]
    dade:	1d99      	adds	r1, r3, #6
    dae0:	2328      	movs	r3, #40	; 0x28
    dae2:	33ff      	adds	r3, #255	; 0xff
    dae4:	18fc      	adds	r4, r7, r3
    dae6:	2394      	movs	r3, #148	; 0x94
    dae8:	005b      	lsls	r3, r3, #1
    daea:	18fb      	adds	r3, r7, r3
    daec:	681b      	ldr	r3, [r3, #0]
    daee:	68ba      	ldr	r2, [r7, #8]
    daf0:	2006      	movs	r0, #6
    daf2:	4d57      	ldr	r5, [pc, #348]	; (dc50 <LoRaMacCryptoHandleJoinAccept+0x570>)
    daf4:	47a8      	blx	r5
    daf6:	0003      	movs	r3, r0
    daf8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    dafa:	2328      	movs	r3, #40	; 0x28
    dafc:	33ff      	adds	r3, #255	; 0xff
    dafe:	18fb      	adds	r3, r7, r3
    db00:	781b      	ldrb	r3, [r3, #0]
    db02:	2b00      	cmp	r3, #0
    db04:	d004      	beq.n	db10 <LoRaMacCryptoHandleJoinAccept+0x430>
        {
            return retval;
    db06:	2328      	movs	r3, #40	; 0x28
    db08:	33ff      	adds	r3, #255	; 0xff
    db0a:	18fb      	adds	r3, r7, r3
    db0c:	781b      	ldrb	r3, [r3, #0]
    db0e:	e09b      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	1d99      	adds	r1, r3, #6
    db14:	2328      	movs	r3, #40	; 0x28
    db16:	33ff      	adds	r3, #255	; 0xff
    db18:	18fc      	adds	r4, r7, r3
    db1a:	2394      	movs	r3, #148	; 0x94
    db1c:	005b      	lsls	r3, r3, #1
    db1e:	18fb      	adds	r3, r7, r3
    db20:	681b      	ldr	r3, [r3, #0]
    db22:	68ba      	ldr	r2, [r7, #8]
    db24:	2007      	movs	r0, #7
    db26:	4d4a      	ldr	r5, [pc, #296]	; (dc50 <LoRaMacCryptoHandleJoinAccept+0x570>)
    db28:	47a8      	blx	r5
    db2a:	0003      	movs	r3, r0
    db2c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    db2e:	2328      	movs	r3, #40	; 0x28
    db30:	33ff      	adds	r3, #255	; 0xff
    db32:	18fb      	adds	r3, r7, r3
    db34:	781b      	ldrb	r3, [r3, #0]
    db36:	2b00      	cmp	r3, #0
    db38:	d06c      	beq.n	dc14 <LoRaMacCryptoHandleJoinAccept+0x534>
        {
            return retval;
    db3a:	2328      	movs	r3, #40	; 0x28
    db3c:	33ff      	adds	r3, #255	; 0xff
    db3e:	18fb      	adds	r3, r7, r3
    db40:	781b      	ldrb	r3, [r3, #0]
    db42:	e081      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	1d99      	adds	r1, r3, #6
    db48:	687b      	ldr	r3, [r7, #4]
    db4a:	3309      	adds	r3, #9
    db4c:	001a      	movs	r2, r3
    db4e:	4b41      	ldr	r3, [pc, #260]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    db50:	689b      	ldr	r3, [r3, #8]
    db52:	2028      	movs	r0, #40	; 0x28
    db54:	30ff      	adds	r0, #255	; 0xff
    db56:	183c      	adds	r4, r7, r0
    db58:	2007      	movs	r0, #7
    db5a:	4d3f      	ldr	r5, [pc, #252]	; (dc58 <LoRaMacCryptoHandleJoinAccept+0x578>)
    db5c:	47a8      	blx	r5
    db5e:	0003      	movs	r3, r0
    db60:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    db62:	2328      	movs	r3, #40	; 0x28
    db64:	33ff      	adds	r3, #255	; 0xff
    db66:	18fb      	adds	r3, r7, r3
    db68:	781b      	ldrb	r3, [r3, #0]
    db6a:	2b00      	cmp	r3, #0
    db6c:	d004      	beq.n	db78 <LoRaMacCryptoHandleJoinAccept+0x498>
        {
            return retval;
    db6e:	2328      	movs	r3, #40	; 0x28
    db70:	33ff      	adds	r3, #255	; 0xff
    db72:	18fb      	adds	r3, r7, r3
    db74:	781b      	ldrb	r3, [r3, #0]
    db76:	e067      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	1d99      	adds	r1, r3, #6
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	3309      	adds	r3, #9
    db80:	001a      	movs	r2, r3
    db82:	4b34      	ldr	r3, [pc, #208]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    db84:	689b      	ldr	r3, [r3, #8]
    db86:	2028      	movs	r0, #40	; 0x28
    db88:	30ff      	adds	r0, #255	; 0xff
    db8a:	183c      	adds	r4, r7, r0
    db8c:	2006      	movs	r0, #6
    db8e:	4d32      	ldr	r5, [pc, #200]	; (dc58 <LoRaMacCryptoHandleJoinAccept+0x578>)
    db90:	47a8      	blx	r5
    db92:	0003      	movs	r3, r0
    db94:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    db96:	2328      	movs	r3, #40	; 0x28
    db98:	33ff      	adds	r3, #255	; 0xff
    db9a:	18fb      	adds	r3, r7, r3
    db9c:	781b      	ldrb	r3, [r3, #0]
    db9e:	2b00      	cmp	r3, #0
    dba0:	d004      	beq.n	dbac <LoRaMacCryptoHandleJoinAccept+0x4cc>
        {
            return retval;
    dba2:	2328      	movs	r3, #40	; 0x28
    dba4:	33ff      	adds	r3, #255	; 0xff
    dba6:	18fb      	adds	r3, r7, r3
    dba8:	781b      	ldrb	r3, [r3, #0]
    dbaa:	e04d      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    dbac:	687b      	ldr	r3, [r7, #4]
    dbae:	1d99      	adds	r1, r3, #6
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	3309      	adds	r3, #9
    dbb4:	001a      	movs	r2, r3
    dbb6:	4b27      	ldr	r3, [pc, #156]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dbb8:	689b      	ldr	r3, [r3, #8]
    dbba:	2028      	movs	r0, #40	; 0x28
    dbbc:	30ff      	adds	r0, #255	; 0xff
    dbbe:	183c      	adds	r4, r7, r0
    dbc0:	2004      	movs	r0, #4
    dbc2:	4d25      	ldr	r5, [pc, #148]	; (dc58 <LoRaMacCryptoHandleJoinAccept+0x578>)
    dbc4:	47a8      	blx	r5
    dbc6:	0003      	movs	r3, r0
    dbc8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    dbca:	2328      	movs	r3, #40	; 0x28
    dbcc:	33ff      	adds	r3, #255	; 0xff
    dbce:	18fb      	adds	r3, r7, r3
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	d004      	beq.n	dbe0 <LoRaMacCryptoHandleJoinAccept+0x500>
        {
            return retval;
    dbd6:	2328      	movs	r3, #40	; 0x28
    dbd8:	33ff      	adds	r3, #255	; 0xff
    dbda:	18fb      	adds	r3, r7, r3
    dbdc:	781b      	ldrb	r3, [r3, #0]
    dbde:	e033      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	1d99      	adds	r1, r3, #6
    dbe4:	687b      	ldr	r3, [r7, #4]
    dbe6:	3309      	adds	r3, #9
    dbe8:	001a      	movs	r2, r3
    dbea:	4b1a      	ldr	r3, [pc, #104]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dbec:	689b      	ldr	r3, [r3, #8]
    dbee:	2028      	movs	r0, #40	; 0x28
    dbf0:	30ff      	adds	r0, #255	; 0xff
    dbf2:	183c      	adds	r4, r7, r0
    dbf4:	2005      	movs	r0, #5
    dbf6:	4d18      	ldr	r5, [pc, #96]	; (dc58 <LoRaMacCryptoHandleJoinAccept+0x578>)
    dbf8:	47a8      	blx	r5
    dbfa:	0003      	movs	r3, r0
    dbfc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    dbfe:	2328      	movs	r3, #40	; 0x28
    dc00:	33ff      	adds	r3, #255	; 0xff
    dc02:	18fb      	adds	r3, r7, r3
    dc04:	781b      	ldrb	r3, [r3, #0]
    dc06:	2b00      	cmp	r3, #0
    dc08:	d004      	beq.n	dc14 <LoRaMacCryptoHandleJoinAccept+0x534>
        {
            return retval;
    dc0a:	2328      	movs	r3, #40	; 0x28
    dc0c:	33ff      	adds	r3, #255	; 0xff
    dc0e:	18fb      	adds	r3, r7, r3
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	e019      	b.n	dc48 <LoRaMacCryptoHandleJoinAccept+0x568>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
    dc14:	4b0f      	ldr	r3, [pc, #60]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc16:	2200      	movs	r2, #0
    dc18:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
    dc1a:	4b0e      	ldr	r3, [pc, #56]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc1c:	689b      	ldr	r3, [r3, #8]
    dc1e:	2200      	movs	r2, #0
    dc20:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
    dc22:	4b0c      	ldr	r3, [pc, #48]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc24:	689b      	ldr	r3, [r3, #8]
    dc26:	2201      	movs	r2, #1
    dc28:	4252      	negs	r2, r2
    dc2a:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
    dc2c:	4b09      	ldr	r3, [pc, #36]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc2e:	689b      	ldr	r3, [r3, #8]
    dc30:	2201      	movs	r2, #1
    dc32:	4252      	negs	r2, r2
    dc34:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
    dc36:	4b07      	ldr	r3, [pc, #28]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc38:	689b      	ldr	r3, [r3, #8]
    dc3a:	2201      	movs	r2, #1
    dc3c:	4252      	negs	r2, r2
    dc3e:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    dc40:	4b04      	ldr	r3, [pc, #16]	; (dc54 <LoRaMacCryptoHandleJoinAccept+0x574>)
    dc42:	68db      	ldr	r3, [r3, #12]
    dc44:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    dc46:	2300      	movs	r3, #0
}
    dc48:	0018      	movs	r0, r3
    dc4a:	46bd      	mov	sp, r7
    dc4c:	b04c      	add	sp, #304	; 0x130
    dc4e:	bdb0      	pop	{r4, r5, r7, pc}
    dc50:	0000d039 	.word	0x0000d039
    dc54:	200013cc 	.word	0x200013cc
    dc58:	0000cf69 	.word	0x0000cf69

0000dc5c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc5e:	b08f      	sub	sp, #60	; 0x3c
    dc60:	af06      	add	r7, sp, #24
    dc62:	60f8      	str	r0, [r7, #12]
    dc64:	0008      	movs	r0, r1
    dc66:	0011      	movs	r1, r2
    dc68:	607b      	str	r3, [r7, #4]
    dc6a:	230b      	movs	r3, #11
    dc6c:	18fb      	adds	r3, r7, r3
    dc6e:	1c02      	adds	r2, r0, #0
    dc70:	701a      	strb	r2, [r3, #0]
    dc72:	230a      	movs	r3, #10
    dc74:	18fb      	adds	r3, r7, r3
    dc76:	1c0a      	adds	r2, r1, #0
    dc78:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    dc7a:	231e      	movs	r3, #30
    dc7c:	18fb      	adds	r3, r7, r3
    dc7e:	2210      	movs	r2, #16
    dc80:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
    dc82:	231f      	movs	r3, #31
    dc84:	18fb      	adds	r3, r7, r3
    dc86:	2207      	movs	r2, #7
    dc88:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
    dc8a:	687b      	ldr	r3, [r7, #4]
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d101      	bne.n	dc94 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    dc90:	2307      	movs	r3, #7
    dc92:	e102      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
    dc94:	4b83      	ldr	r3, [pc, #524]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dc96:	689b      	ldr	r3, [r3, #8]
    dc98:	689a      	ldr	r2, [r3, #8]
    dc9a:	68fb      	ldr	r3, [r7, #12]
    dc9c:	429a      	cmp	r2, r3
    dc9e:	d901      	bls.n	dca4 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    dca0:	2305      	movs	r3, #5
    dca2:	e0fa      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	2220      	movs	r2, #32
    dca8:	5c9b      	ldrb	r3, [r3, r2]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d103      	bne.n	dcb6 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    dcae:	231f      	movs	r3, #31
    dcb0:	18fb      	adds	r3, r7, r3
    dcb2:	2206      	movs	r2, #6
    dcb4:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
    dcb6:	4b7b      	ldr	r3, [pc, #492]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dcb8:	689b      	ldr	r3, [r3, #8]
    dcba:	689a      	ldr	r2, [r3, #8]
    dcbc:	68fb      	ldr	r3, [r7, #12]
    dcbe:	429a      	cmp	r2, r3
    dcc0:	d240      	bcs.n	dd44 <LoRaMacCryptoSecureMessage+0xe8>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    dcc6:	687b      	ldr	r3, [r7, #4]
    dcc8:	2228      	movs	r2, #40	; 0x28
    dcca:	5c9b      	ldrb	r3, [r3, r2]
    dccc:	b299      	uxth	r1, r3
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	689d      	ldr	r5, [r3, #8]
    dcd2:	231e      	movs	r3, #30
    dcd4:	18fc      	adds	r4, r7, r3
    dcd6:	231f      	movs	r3, #31
    dcd8:	18fb      	adds	r3, r7, r3
    dcda:	781a      	ldrb	r2, [r3, #0]
    dcdc:	68fb      	ldr	r3, [r7, #12]
    dcde:	9301      	str	r3, [sp, #4]
    dce0:	2300      	movs	r3, #0
    dce2:	9300      	str	r3, [sp, #0]
    dce4:	002b      	movs	r3, r5
    dce6:	4d70      	ldr	r5, [pc, #448]	; (dea8 <LoRaMacCryptoSecureMessage+0x24c>)
    dce8:	47a8      	blx	r5
    dcea:	0003      	movs	r3, r0
    dcec:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    dcee:	231e      	movs	r3, #30
    dcf0:	18fb      	adds	r3, r7, r3
    dcf2:	781b      	ldrb	r3, [r3, #0]
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d003      	beq.n	dd00 <LoRaMacCryptoSecureMessage+0xa4>
        {
            return retval;
    dcf8:	231e      	movs	r3, #30
    dcfa:	18fb      	adds	r3, r7, r3
    dcfc:	781b      	ldrb	r3, [r3, #0]
    dcfe:	e0cc      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    dd00:	4b68      	ldr	r3, [pc, #416]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dd02:	789b      	ldrb	r3, [r3, #2]
    dd04:	2b01      	cmp	r3, #1
    dd06:	d11d      	bne.n	dd44 <LoRaMacCryptoSecureMessage+0xe8>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	7b1b      	ldrb	r3, [r3, #12]
    dd0c:	071b      	lsls	r3, r3, #28
    dd0e:	0f1b      	lsrs	r3, r3, #28
    dd10:	b2db      	uxtb	r3, r3
    dd12:	b298      	uxth	r0, r3
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	6899      	ldr	r1, [r3, #8]
    dd18:	687b      	ldr	r3, [r7, #4]
    dd1a:	3310      	adds	r3, #16
    dd1c:	221e      	movs	r2, #30
    dd1e:	18bc      	adds	r4, r7, r2
    dd20:	9301      	str	r3, [sp, #4]
    dd22:	68fb      	ldr	r3, [r7, #12]
    dd24:	9300      	str	r3, [sp, #0]
    dd26:	2300      	movs	r3, #0
    dd28:	2200      	movs	r2, #0
    dd2a:	4d60      	ldr	r5, [pc, #384]	; (deac <LoRaMacCryptoSecureMessage+0x250>)
    dd2c:	47a8      	blx	r5
    dd2e:	0003      	movs	r3, r0
    dd30:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
    dd32:	231e      	movs	r3, #30
    dd34:	18fb      	adds	r3, r7, r3
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d003      	beq.n	dd44 <LoRaMacCryptoSecureMessage+0xe8>
            {
                return retval;
    dd3c:	231e      	movs	r3, #30
    dd3e:	18fb      	adds	r3, r7, r3
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	e0aa      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
    dd44:	4b57      	ldr	r3, [pc, #348]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dd46:	689b      	ldr	r3, [r3, #8]
    dd48:	68fa      	ldr	r2, [r7, #12]
    dd4a:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
    dd4c:	4b55      	ldr	r3, [pc, #340]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dd4e:	68db      	ldr	r3, [r3, #12]
    dd50:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    dd52:	687b      	ldr	r3, [r7, #4]
    dd54:	0018      	movs	r0, r3
    dd56:	4b56      	ldr	r3, [pc, #344]	; (deb0 <LoRaMacCryptoSecureMessage+0x254>)
    dd58:	4798      	blx	r3
    dd5a:	1e03      	subs	r3, r0, #0
    dd5c:	d001      	beq.n	dd62 <LoRaMacCryptoSecureMessage+0x106>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    dd5e:	230e      	movs	r3, #14
    dd60:	e09b      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    dd62:	4b50      	ldr	r3, [pc, #320]	; (dea4 <LoRaMacCryptoSecureMessage+0x248>)
    dd64:	789b      	ldrb	r3, [r3, #2]
    dd66:	2b01      	cmp	r3, #1
    dd68:	d16a      	bne.n	de40 <LoRaMacCryptoSecureMessage+0x1e4>
    {
        uint32_t cmacS = 0;
    dd6a:	2300      	movs	r3, #0
    dd6c:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
    dd6e:	2300      	movs	r3, #0
    dd70:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	6818      	ldr	r0, [r3, #0]
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	791b      	ldrb	r3, [r3, #4]
    dd7a:	b29b      	uxth	r3, r3
    dd7c:	3b04      	subs	r3, #4
    dd7e:	b299      	uxth	r1, r3
    dd80:	687b      	ldr	r3, [r7, #4]
    dd82:	7b1b      	ldrb	r3, [r3, #12]
    dd84:	069b      	lsls	r3, r3, #26
    dd86:	0fdb      	lsrs	r3, r3, #31
    dd88:	b2db      	uxtb	r3, r3
    dd8a:	1e5a      	subs	r2, r3, #1
    dd8c:	4193      	sbcs	r3, r2
    dd8e:	b2dd      	uxtb	r5, r3
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	689b      	ldr	r3, [r3, #8]
    dd94:	687a      	ldr	r2, [r7, #4]
    dd96:	89d2      	ldrh	r2, [r2, #14]
    dd98:	0016      	movs	r6, r2
    dd9a:	221e      	movs	r2, #30
    dd9c:	18bc      	adds	r4, r7, r2
    dd9e:	2218      	movs	r2, #24
    dda0:	18ba      	adds	r2, r7, r2
    dda2:	9204      	str	r2, [sp, #16]
    dda4:	9603      	str	r6, [sp, #12]
    dda6:	9302      	str	r3, [sp, #8]
    dda8:	230a      	movs	r3, #10
    ddaa:	18fb      	adds	r3, r7, r3
    ddac:	781b      	ldrb	r3, [r3, #0]
    ddae:	9301      	str	r3, [sp, #4]
    ddb0:	230b      	movs	r3, #11
    ddb2:	18fb      	adds	r3, r7, r3
    ddb4:	781b      	ldrb	r3, [r3, #0]
    ddb6:	9300      	str	r3, [sp, #0]
    ddb8:	002b      	movs	r3, r5
    ddba:	2205      	movs	r2, #5
    ddbc:	4d3d      	ldr	r5, [pc, #244]	; (deb4 <LoRaMacCryptoSecureMessage+0x258>)
    ddbe:	47a8      	blx	r5
    ddc0:	0003      	movs	r3, r0
    ddc2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    ddc4:	231e      	movs	r3, #30
    ddc6:	18fb      	adds	r3, r7, r3
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d003      	beq.n	ddd6 <LoRaMacCryptoSecureMessage+0x17a>
        {
            return retval;
    ddce:	231e      	movs	r3, #30
    ddd0:	18fb      	adds	r3, r7, r3
    ddd2:	781b      	ldrb	r3, [r3, #0]
    ddd4:	e061      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	6818      	ldr	r0, [r3, #0]
    ddda:	687b      	ldr	r3, [r7, #4]
    dddc:	791b      	ldrb	r3, [r3, #4]
    ddde:	b29b      	uxth	r3, r3
    dde0:	3b04      	subs	r3, #4
    dde2:	b299      	uxth	r1, r3
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	7b1b      	ldrb	r3, [r3, #12]
    dde8:	069b      	lsls	r3, r3, #26
    ddea:	0fdb      	lsrs	r3, r3, #31
    ddec:	b2db      	uxtb	r3, r3
    ddee:	1e5a      	subs	r2, r3, #1
    ddf0:	4193      	sbcs	r3, r2
    ddf2:	b2dd      	uxtb	r5, r3
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	689b      	ldr	r3, [r3, #8]
    ddf8:	687a      	ldr	r2, [r7, #4]
    ddfa:	89d2      	ldrh	r2, [r2, #14]
    ddfc:	0016      	movs	r6, r2
    ddfe:	221e      	movs	r2, #30
    de00:	18bc      	adds	r4, r7, r2
    de02:	2214      	movs	r2, #20
    de04:	18ba      	adds	r2, r7, r2
    de06:	9203      	str	r2, [sp, #12]
    de08:	9602      	str	r6, [sp, #8]
    de0a:	9301      	str	r3, [sp, #4]
    de0c:	2300      	movs	r3, #0
    de0e:	9300      	str	r3, [sp, #0]
    de10:	002b      	movs	r3, r5
    de12:	2204      	movs	r2, #4
    de14:	4d28      	ldr	r5, [pc, #160]	; (deb8 <LoRaMacCryptoSecureMessage+0x25c>)
    de16:	47a8      	blx	r5
    de18:	0003      	movs	r3, r0
    de1a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    de1c:	231e      	movs	r3, #30
    de1e:	18fb      	adds	r3, r7, r3
    de20:	781b      	ldrb	r3, [r3, #0]
    de22:	2b00      	cmp	r3, #0
    de24:	d003      	beq.n	de2e <LoRaMacCryptoSecureMessage+0x1d2>
        {
            return retval;
    de26:	231e      	movs	r3, #30
    de28:	18fb      	adds	r3, r7, r3
    de2a:	781b      	ldrb	r3, [r3, #0]
    de2c:	e035      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
    de2e:	697b      	ldr	r3, [r7, #20]
    de30:	041a      	lsls	r2, r3, #16
    de32:	69bb      	ldr	r3, [r7, #24]
    de34:	041b      	lsls	r3, r3, #16
    de36:	0c1b      	lsrs	r3, r3, #16
    de38:	431a      	orrs	r2, r3
    de3a:	687b      	ldr	r3, [r7, #4]
    de3c:	62da      	str	r2, [r3, #44]	; 0x2c
    de3e:	e023      	b.n	de88 <LoRaMacCryptoSecureMessage+0x22c>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	6818      	ldr	r0, [r3, #0]
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	791b      	ldrb	r3, [r3, #4]
    de48:	b29b      	uxth	r3, r3
    de4a:	3b04      	subs	r3, #4
    de4c:	b299      	uxth	r1, r3
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	689b      	ldr	r3, [r3, #8]
    de52:	687a      	ldr	r2, [r7, #4]
    de54:	89d2      	ldrh	r2, [r2, #14]
    de56:	0015      	movs	r5, r2
    de58:	687a      	ldr	r2, [r7, #4]
    de5a:	322c      	adds	r2, #44	; 0x2c
    de5c:	241e      	movs	r4, #30
    de5e:	193c      	adds	r4, r7, r4
    de60:	9203      	str	r2, [sp, #12]
    de62:	9502      	str	r5, [sp, #8]
    de64:	9301      	str	r3, [sp, #4]
    de66:	2300      	movs	r3, #0
    de68:	9300      	str	r3, [sp, #0]
    de6a:	2300      	movs	r3, #0
    de6c:	2206      	movs	r2, #6
    de6e:	4d12      	ldr	r5, [pc, #72]	; (deb8 <LoRaMacCryptoSecureMessage+0x25c>)
    de70:	47a8      	blx	r5
    de72:	0003      	movs	r3, r0
    de74:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    de76:	231e      	movs	r3, #30
    de78:	18fb      	adds	r3, r7, r3
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	2b00      	cmp	r3, #0
    de7e:	d003      	beq.n	de88 <LoRaMacCryptoSecureMessage+0x22c>
        {
            return retval;
    de80:	231e      	movs	r3, #30
    de82:	18fb      	adds	r3, r7, r3
    de84:	781b      	ldrb	r3, [r3, #0]
    de86:	e008      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
    de88:	687b      	ldr	r3, [r7, #4]
    de8a:	0018      	movs	r0, r3
    de8c:	4b08      	ldr	r3, [pc, #32]	; (deb0 <LoRaMacCryptoSecureMessage+0x254>)
    de8e:	4798      	blx	r3
    de90:	1e03      	subs	r3, r0, #0
    de92:	d001      	beq.n	de98 <LoRaMacCryptoSecureMessage+0x23c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    de94:	230e      	movs	r3, #14
    de96:	e000      	b.n	de9a <LoRaMacCryptoSecureMessage+0x23e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
    de98:	2300      	movs	r3, #0
}
    de9a:	0018      	movs	r0, r3
    de9c:	46bd      	mov	sp, r7
    de9e:	b009      	add	sp, #36	; 0x24
    dea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dea2:	46c0      	nop			; (mov r8, r8)
    dea4:	200013cc 	.word	0x200013cc
    dea8:	0000c479 	.word	0x0000c479
    deac:	0000c6b1 	.word	0x0000c6b1
    deb0:	0000ed4d 	.word	0x0000ed4d
    deb4:	0000cda9 	.word	0x0000cda9
    deb8:	0000c9d5 	.word	0x0000c9d5

0000debc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
    debc:	b5b0      	push	{r4, r5, r7, lr}
    debe:	b08a      	sub	sp, #40	; 0x28
    dec0:	af04      	add	r7, sp, #16
    dec2:	60b9      	str	r1, [r7, #8]
    dec4:	0011      	movs	r1, r2
    dec6:	607b      	str	r3, [r7, #4]
    dec8:	230f      	movs	r3, #15
    deca:	18fb      	adds	r3, r7, r3
    decc:	1c02      	adds	r2, r0, #0
    dece:	701a      	strb	r2, [r3, #0]
    ded0:	230e      	movs	r3, #14
    ded2:	18fb      	adds	r3, r7, r3
    ded4:	1c0a      	adds	r2, r1, #0
    ded6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
    ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    deda:	2b00      	cmp	r3, #0
    dedc:	d101      	bne.n	dee2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    dede:	2307      	movs	r3, #7
    dee0:	e0d3      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    dee2:	687a      	ldr	r2, [r7, #4]
    dee4:	230e      	movs	r3, #14
    dee6:	18fb      	adds	r3, r7, r3
    dee8:	781b      	ldrb	r3, [r3, #0]
    deea:	0011      	movs	r1, r2
    deec:	0018      	movs	r0, r3
    deee:	4b69      	ldr	r3, [pc, #420]	; (e094 <LoRaMacCryptoUnsecureMessage+0x1d8>)
    def0:	4798      	blx	r3
    def2:	0003      	movs	r3, r0
    def4:	001a      	movs	r2, r3
    def6:	2301      	movs	r3, #1
    def8:	4053      	eors	r3, r2
    defa:	b2db      	uxtb	r3, r3
    defc:	2b00      	cmp	r3, #0
    defe:	d001      	beq.n	df04 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
    df00:	2305      	movs	r3, #5
    df02:	e0c2      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    df04:	2315      	movs	r3, #21
    df06:	18fb      	adds	r3, r7, r3
    df08:	2210      	movs	r2, #16
    df0a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
    df0c:	2317      	movs	r3, #23
    df0e:	18fb      	adds	r3, r7, r3
    df10:	2207      	movs	r2, #7
    df12:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
    df14:	2314      	movs	r3, #20
    df16:	18fb      	adds	r3, r7, r3
    df18:	2205      	movs	r2, #5
    df1a:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
    df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df1e:	0018      	movs	r0, r3
    df20:	4b5d      	ldr	r3, [pc, #372]	; (e098 <LoRaMacCryptoUnsecureMessage+0x1dc>)
    df22:	4798      	blx	r3
    df24:	1e03      	subs	r3, r0, #0
    df26:	d001      	beq.n	df2c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    df28:	230d      	movs	r3, #13
    df2a:	e0ae      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
    df2c:	2315      	movs	r3, #21
    df2e:	18fc      	adds	r4, r7, r3
    df30:	2310      	movs	r3, #16
    df32:	18fa      	adds	r2, r7, r3
    df34:	230f      	movs	r3, #15
    df36:	18fb      	adds	r3, r7, r3
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	0011      	movs	r1, r2
    df3c:	0018      	movs	r0, r3
    df3e:	4b57      	ldr	r3, [pc, #348]	; (e09c <LoRaMacCryptoUnsecureMessage+0x1e0>)
    df40:	4798      	blx	r3
    df42:	0003      	movs	r3, r0
    df44:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    df46:	2315      	movs	r3, #21
    df48:	18fb      	adds	r3, r7, r3
    df4a:	781b      	ldrb	r3, [r3, #0]
    df4c:	2b00      	cmp	r3, #0
    df4e:	d003      	beq.n	df58 <LoRaMacCryptoUnsecureMessage+0x9c>
    {
        return retval;
    df50:	2315      	movs	r3, #21
    df52:	18fb      	adds	r3, r7, r3
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	e098      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
    df58:	693a      	ldr	r2, [r7, #16]
    df5a:	2317      	movs	r3, #23
    df5c:	18fb      	adds	r3, r7, r3
    df5e:	7852      	ldrb	r2, [r2, #1]
    df60:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
    df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df64:	689a      	ldr	r2, [r3, #8]
    df66:	68bb      	ldr	r3, [r7, #8]
    df68:	429a      	cmp	r2, r3
    df6a:	d001      	beq.n	df70 <LoRaMacCryptoUnsecureMessage+0xb4>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    df6c:	2302      	movs	r3, #2
    df6e:	e08c      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
    df70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df72:	7b1b      	ldrb	r3, [r3, #12]
    df74:	069b      	lsls	r3, r3, #26
    df76:	0fdb      	lsrs	r3, r3, #31
    df78:	b2db      	uxtb	r3, r3
    df7a:	001a      	movs	r2, r3
    df7c:	2316      	movs	r3, #22
    df7e:	18fb      	adds	r3, r7, r3
    df80:	1e51      	subs	r1, r2, #1
    df82:	418a      	sbcs	r2, r1
    df84:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
    df86:	4b46      	ldr	r3, [pc, #280]	; (e0a0 <LoRaMacCryptoUnsecureMessage+0x1e4>)
    df88:	789b      	ldrb	r3, [r3, #2]
    df8a:	2b00      	cmp	r3, #0
    df8c:	d103      	bne.n	df96 <LoRaMacCryptoUnsecureMessage+0xda>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
    df8e:	2316      	movs	r3, #22
    df90:	18fb      	adds	r3, r7, r3
    df92:	2200      	movs	r2, #0
    df94:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
    df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df98:	6818      	ldr	r0, [r3, #0]
    df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df9c:	791b      	ldrb	r3, [r3, #4]
    df9e:	b29b      	uxth	r3, r3
    dfa0:	3b04      	subs	r3, #4
    dfa2:	b299      	uxth	r1, r3
    dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dfa8:	2215      	movs	r2, #21
    dfaa:	18bc      	adds	r4, r7, r2
    dfac:	2216      	movs	r2, #22
    dfae:	18ba      	adds	r2, r7, r2
    dfb0:	7815      	ldrb	r5, [r2, #0]
    dfb2:	2214      	movs	r2, #20
    dfb4:	18ba      	adds	r2, r7, r2
    dfb6:	7812      	ldrb	r2, [r2, #0]
    dfb8:	9303      	str	r3, [sp, #12]
    dfba:	687b      	ldr	r3, [r7, #4]
    dfbc:	9302      	str	r3, [sp, #8]
    dfbe:	68bb      	ldr	r3, [r7, #8]
    dfc0:	9301      	str	r3, [sp, #4]
    dfc2:	2301      	movs	r3, #1
    dfc4:	9300      	str	r3, [sp, #0]
    dfc6:	002b      	movs	r3, r5
    dfc8:	4d36      	ldr	r5, [pc, #216]	; (e0a4 <LoRaMacCryptoUnsecureMessage+0x1e8>)
    dfca:	47a8      	blx	r5
    dfcc:	0003      	movs	r3, r0
    dfce:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    dfd0:	2315      	movs	r3, #21
    dfd2:	18fb      	adds	r3, r7, r3
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	2b00      	cmp	r3, #0
    dfd8:	d003      	beq.n	dfe2 <LoRaMacCryptoUnsecureMessage+0x126>
    {
        return retval;
    dfda:	2315      	movs	r3, #21
    dfdc:	18fb      	adds	r3, r7, r3
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	e053      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
    dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dfe4:	2220      	movs	r2, #32
    dfe6:	5c9b      	ldrb	r3, [r3, r2]
    dfe8:	2b00      	cmp	r3, #0
    dfea:	d103      	bne.n	dff4 <LoRaMacCryptoUnsecureMessage+0x138>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
    dfec:	2317      	movs	r3, #23
    dfee:	18fb      	adds	r3, r7, r3
    dff0:	2206      	movs	r2, #6
    dff2:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
    dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dff6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dffa:	2228      	movs	r2, #40	; 0x28
    dffc:	5c9b      	ldrb	r3, [r3, r2]
    dffe:	b299      	uxth	r1, r3
    e000:	2315      	movs	r3, #21
    e002:	18fc      	adds	r4, r7, r3
    e004:	68bd      	ldr	r5, [r7, #8]
    e006:	2317      	movs	r3, #23
    e008:	18fb      	adds	r3, r7, r3
    e00a:	781a      	ldrb	r2, [r3, #0]
    e00c:	687b      	ldr	r3, [r7, #4]
    e00e:	9301      	str	r3, [sp, #4]
    e010:	2301      	movs	r3, #1
    e012:	9300      	str	r3, [sp, #0]
    e014:	002b      	movs	r3, r5
    e016:	4d24      	ldr	r5, [pc, #144]	; (e0a8 <LoRaMacCryptoUnsecureMessage+0x1ec>)
    e018:	47a8      	blx	r5
    e01a:	0003      	movs	r3, r0
    e01c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
    e01e:	2315      	movs	r3, #21
    e020:	18fb      	adds	r3, r7, r3
    e022:	781b      	ldrb	r3, [r3, #0]
    e024:	2b00      	cmp	r3, #0
    e026:	d003      	beq.n	e030 <LoRaMacCryptoUnsecureMessage+0x174>
    {
        return retval;
    e028:	2315      	movs	r3, #21
    e02a:	18fb      	adds	r3, r7, r3
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	e02c      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
    e030:	4b1b      	ldr	r3, [pc, #108]	; (e0a0 <LoRaMacCryptoUnsecureMessage+0x1e4>)
    e032:	789b      	ldrb	r3, [r3, #2]
    e034:	2b01      	cmp	r3, #1
    e036:	d11f      	bne.n	e078 <LoRaMacCryptoUnsecureMessage+0x1bc>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
    e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e03a:	7b1b      	ldrb	r3, [r3, #12]
    e03c:	071b      	lsls	r3, r3, #28
    e03e:	0f1b      	lsrs	r3, r3, #28
    e040:	b2db      	uxtb	r3, r3
    e042:	b298      	uxth	r0, r3
    e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e046:	3310      	adds	r3, #16
    e048:	2215      	movs	r2, #21
    e04a:	18bc      	adds	r4, r7, r2
    e04c:	220e      	movs	r2, #14
    e04e:	18ba      	adds	r2, r7, r2
    e050:	7812      	ldrb	r2, [r2, #0]
    e052:	68b9      	ldr	r1, [r7, #8]
    e054:	9301      	str	r3, [sp, #4]
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	9300      	str	r3, [sp, #0]
    e05a:	0013      	movs	r3, r2
    e05c:	2201      	movs	r2, #1
    e05e:	4d13      	ldr	r5, [pc, #76]	; (e0ac <LoRaMacCryptoUnsecureMessage+0x1f0>)
    e060:	47a8      	blx	r5
    e062:	0003      	movs	r3, r0
    e064:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
    e066:	2315      	movs	r3, #21
    e068:	18fb      	adds	r3, r7, r3
    e06a:	781b      	ldrb	r3, [r3, #0]
    e06c:	2b00      	cmp	r3, #0
    e06e:	d003      	beq.n	e078 <LoRaMacCryptoUnsecureMessage+0x1bc>
        {
            return retval;
    e070:	2315      	movs	r3, #21
    e072:	18fb      	adds	r3, r7, r3
    e074:	781b      	ldrb	r3, [r3, #0]
    e076:	e008      	b.n	e08a <LoRaMacCryptoUnsecureMessage+0x1ce>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
    e078:	687a      	ldr	r2, [r7, #4]
    e07a:	230e      	movs	r3, #14
    e07c:	18fb      	adds	r3, r7, r3
    e07e:	781b      	ldrb	r3, [r3, #0]
    e080:	0011      	movs	r1, r2
    e082:	0018      	movs	r0, r3
    e084:	4b0a      	ldr	r3, [pc, #40]	; (e0b0 <LoRaMacCryptoUnsecureMessage+0x1f4>)
    e086:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
    e088:	2300      	movs	r3, #0
}
    e08a:	0018      	movs	r0, r3
    e08c:	46bd      	mov	sp, r7
    e08e:	b006      	add	sp, #24
    e090:	bdb0      	pop	{r4, r5, r7, pc}
    e092:	46c0      	nop			; (mov r8, r8)
    e094:	0000d1d1 	.word	0x0000d1d1
    e098:	0000e685 	.word	0x0000e685
    e09c:	0000cf01 	.word	0x0000cf01
    e0a0:	200013cc 	.word	0x200013cc
    e0a4:	0000cb21 	.word	0x0000cb21
    e0a8:	0000c479 	.word	0x0000c479
    e0ac:	0000c6b1 	.word	0x0000c6b1
    e0b0:	0000d28d 	.word	0x0000d28d

0000e0b4 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
    e0b4:	b580      	push	{r7, lr}
    e0b6:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
    e0b8:	4b04      	ldr	r3, [pc, #16]	; (e0cc <NvmCtxChanged+0x18>)
    e0ba:	681b      	ldr	r3, [r3, #0]
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d002      	beq.n	e0c6 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
    e0c0:	4b02      	ldr	r3, [pc, #8]	; (e0cc <NvmCtxChanged+0x18>)
    e0c2:	681b      	ldr	r3, [r3, #0]
    e0c4:	4798      	blx	r3
    }
}
    e0c6:	46c0      	nop			; (mov r8, r8)
    e0c8:	46bd      	mov	sp, r7
    e0ca:	bd80      	pop	{r7, pc}
    e0cc:	20001430 	.word	0x20001430

0000e0d0 <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
    e0d0:	b580      	push	{r7, lr}
    e0d2:	b082      	sub	sp, #8
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
    e0d8:	4b04      	ldr	r3, [pc, #16]	; (e0ec <LoRaMacFCntHandlerInit+0x1c>)
    e0da:	4798      	blx	r3

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
    e0dc:	4b04      	ldr	r3, [pc, #16]	; (e0f0 <LoRaMacFCntHandlerInit+0x20>)
    e0de:	687a      	ldr	r2, [r7, #4]
    e0e0:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e0e2:	2300      	movs	r3, #0
}
    e0e4:	0018      	movs	r0, r3
    e0e6:	46bd      	mov	sp, r7
    e0e8:	b002      	add	sp, #8
    e0ea:	bd80      	pop	{r7, pc}
    e0ec:	0000e369 	.word	0x0000e369
    e0f0:	20001430 	.word	0x20001430

0000e0f4 <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
    e0f4:	b580      	push	{r7, lr}
    e0f6:	b082      	sub	sp, #8
    e0f8:	af00      	add	r7, sp, #0
    e0fa:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	2b00      	cmp	r3, #0
    e100:	d007      	beq.n	e112 <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
    e102:	6879      	ldr	r1, [r7, #4]
    e104:	4b05      	ldr	r3, [pc, #20]	; (e11c <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
    e106:	2224      	movs	r2, #36	; 0x24
    e108:	0018      	movs	r0, r3
    e10a:	4b05      	ldr	r3, [pc, #20]	; (e120 <LoRaMacFCntHandlerRestoreNvmCtx+0x2c>)
    e10c:	4798      	blx	r3
        return LORAMAC_FCNT_HANDLER_SUCCESS;
    e10e:	2300      	movs	r3, #0
    e110:	e000      	b.n	e114 <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    e112:	2304      	movs	r3, #4
    }
}
    e114:	0018      	movs	r0, r3
    e116:	46bd      	mov	sp, r7
    e118:	b002      	add	sp, #8
    e11a:	bd80      	pop	{r7, pc}
    e11c:	2000140c 	.word	0x2000140c
    e120:	00002955 	.word	0x00002955

0000e124 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
    e124:	b580      	push	{r7, lr}
    e126:	b082      	sub	sp, #8
    e128:	af00      	add	r7, sp, #0
    e12a:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
    e12c:	687b      	ldr	r3, [r7, #4]
    e12e:	2224      	movs	r2, #36	; 0x24
    e130:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
    e132:	4b02      	ldr	r3, [pc, #8]	; (e13c <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
    e134:	0018      	movs	r0, r3
    e136:	46bd      	mov	sp, r7
    e138:	b002      	add	sp, #8
    e13a:	bd80      	pop	{r7, pc}
    e13c:	2000140c 	.word	0x2000140c

0000e140 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
    e140:	b580      	push	{r7, lr}
    e142:	b086      	sub	sp, #24
    e144:	af00      	add	r7, sp, #0
    e146:	60ba      	str	r2, [r7, #8]
    e148:	607b      	str	r3, [r7, #4]
    e14a:	230f      	movs	r3, #15
    e14c:	18fb      	adds	r3, r7, r3
    e14e:	1c02      	adds	r2, r0, #0
    e150:	701a      	strb	r2, [r3, #0]
    e152:	230e      	movs	r3, #14
    e154:	18fb      	adds	r3, r7, r3
    e156:	1c0a      	adds	r2, r1, #0
    e158:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
    e15a:	2300      	movs	r3, #0
    e15c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
    e15e:	2300      	movs	r3, #0
    e160:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
    e162:	68bb      	ldr	r3, [r7, #8]
    e164:	2b00      	cmp	r3, #0
    e166:	d005      	beq.n	e174 <LoRaMacGetFCntDown+0x34>
    e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e16a:	2b00      	cmp	r3, #0
    e16c:	d002      	beq.n	e174 <LoRaMacGetFCntDown+0x34>
    e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e170:	2b00      	cmp	r3, #0
    e172:	d101      	bne.n	e178 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    e174:	2304      	movs	r3, #4
    e176:	e088      	b.n	e28a <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
    e178:	230f      	movs	r3, #15
    e17a:	18fb      	adds	r3, r7, r3
    e17c:	781b      	ldrb	r3, [r3, #0]
    e17e:	2b04      	cmp	r3, #4
    e180:	d843      	bhi.n	e20a <LoRaMacGetFCntDown+0xca>
    e182:	009a      	lsls	r2, r3, #2
    e184:	4b43      	ldr	r3, [pc, #268]	; (e294 <LoRaMacGetFCntDown+0x154>)
    e186:	18d3      	adds	r3, r2, r3
    e188:	681b      	ldr	r3, [r3, #0]
    e18a:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
    e18c:	1d3b      	adds	r3, r7, #4
    e18e:	789b      	ldrb	r3, [r3, #2]
    e190:	2b01      	cmp	r3, #1
    e192:	d117      	bne.n	e1c4 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
    e194:	230e      	movs	r3, #14
    e196:	18fb      	adds	r3, r7, r3
    e198:	781b      	ldrb	r3, [r3, #0]
    e19a:	2b00      	cmp	r3, #0
    e19c:	d004      	beq.n	e1a8 <LoRaMacGetFCntDown+0x68>
    e19e:	230e      	movs	r3, #14
    e1a0:	18fb      	adds	r3, r7, r3
    e1a2:	781b      	ldrb	r3, [r3, #0]
    e1a4:	2b03      	cmp	r3, #3
    e1a6:	d106      	bne.n	e1b6 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
    e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1aa:	2202      	movs	r2, #2
    e1ac:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
    e1ae:	4b3a      	ldr	r3, [pc, #232]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1b0:	689b      	ldr	r3, [r3, #8]
    e1b2:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
    e1b4:	e02b      	b.n	e20e <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
    e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1b8:	2201      	movs	r2, #1
    e1ba:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
    e1bc:	4b36      	ldr	r3, [pc, #216]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1be:	685b      	ldr	r3, [r3, #4]
    e1c0:	617b      	str	r3, [r7, #20]
            break;
    e1c2:	e024      	b.n	e20e <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
    e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1c6:	2203      	movs	r2, #3
    e1c8:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
    e1ca:	4b33      	ldr	r3, [pc, #204]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1cc:	68db      	ldr	r3, [r3, #12]
    e1ce:	617b      	str	r3, [r7, #20]
            break;
    e1d0:	e01d      	b.n	e20e <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
    e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1d4:	2204      	movs	r2, #4
    e1d6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
    e1d8:	4b2f      	ldr	r3, [pc, #188]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1da:	691b      	ldr	r3, [r3, #16]
    e1dc:	617b      	str	r3, [r7, #20]
            break;
    e1de:	e016      	b.n	e20e <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
    e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1e2:	2205      	movs	r2, #5
    e1e4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
    e1e6:	4b2c      	ldr	r3, [pc, #176]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1e8:	695b      	ldr	r3, [r3, #20]
    e1ea:	617b      	str	r3, [r7, #20]
            break;
    e1ec:	e00f      	b.n	e20e <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
    e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1f0:	2206      	movs	r2, #6
    e1f2:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    e1f4:	4b28      	ldr	r3, [pc, #160]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e1f6:	69db      	ldr	r3, [r3, #28]
    e1f8:	617b      	str	r3, [r7, #20]
            break;
    e1fa:	e008      	b.n	e20e <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
    e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1fe:	2207      	movs	r2, #7
    e200:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
    e202:	4b25      	ldr	r3, [pc, #148]	; (e298 <LoRaMacGetFCntDown+0x158>)
    e204:	69db      	ldr	r3, [r3, #28]
    e206:	617b      	str	r3, [r7, #20]
            break;
    e208:	e001      	b.n	e20e <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    e20a:	2305      	movs	r3, #5
    e20c:	e03d      	b.n	e28a <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
    e20e:	697b      	ldr	r3, [r7, #20]
    e210:	3301      	adds	r3, #1
    e212:	d105      	bne.n	e220 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
    e214:	68bb      	ldr	r3, [r7, #8]
    e216:	89db      	ldrh	r3, [r3, #14]
    e218:	001a      	movs	r2, r3
    e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e21c:	601a      	str	r2, [r3, #0]
    e21e:	e023      	b.n	e268 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
    e220:	68bb      	ldr	r3, [r7, #8]
    e222:	89db      	ldrh	r3, [r3, #14]
    e224:	001a      	movs	r2, r3
    e226:	697b      	ldr	r3, [r7, #20]
    e228:	041b      	lsls	r3, r3, #16
    e22a:	0c1b      	lsrs	r3, r3, #16
    e22c:	1ad3      	subs	r3, r2, r3
    e22e:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
    e230:	693b      	ldr	r3, [r7, #16]
    e232:	2b00      	cmp	r3, #0
    e234:	dd05      	ble.n	e242 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
    e236:	693a      	ldr	r2, [r7, #16]
    e238:	697b      	ldr	r3, [r7, #20]
    e23a:	18d2      	adds	r2, r2, r3
    e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e23e:	601a      	str	r2, [r3, #0]
    e240:	e012      	b.n	e268 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
    e242:	693b      	ldr	r3, [r7, #16]
    e244:	2b00      	cmp	r3, #0
    e246:	d104      	bne.n	e252 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
    e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e24a:	697a      	ldr	r2, [r7, #20]
    e24c:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
    e24e:	2301      	movs	r3, #1
    e250:	e01b      	b.n	e28a <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
    e252:	697b      	ldr	r3, [r7, #20]
    e254:	0c1b      	lsrs	r3, r3, #16
    e256:	041b      	lsls	r3, r3, #16
    e258:	68ba      	ldr	r2, [r7, #8]
    e25a:	89d2      	ldrh	r2, [r2, #14]
    e25c:	189b      	adds	r3, r3, r2
    e25e:	2280      	movs	r2, #128	; 0x80
    e260:	0252      	lsls	r2, r2, #9
    e262:	189a      	adds	r2, r3, r2
    e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e266:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
    e268:	1d3b      	adds	r3, r7, #4
    e26a:	789b      	ldrb	r3, [r3, #2]
    e26c:	2b00      	cmp	r3, #0
    e26e:	d10b      	bne.n	e288 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
    e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e272:	681b      	ldr	r3, [r3, #0]
    e274:	001a      	movs	r2, r3
    e276:	697b      	ldr	r3, [r7, #20]
    e278:	1ad2      	subs	r2, r2, r3
    e27a:	2320      	movs	r3, #32
    e27c:	18fb      	adds	r3, r7, r3
    e27e:	881b      	ldrh	r3, [r3, #0]
    e280:	429a      	cmp	r2, r3
    e282:	db01      	blt.n	e288 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
    e284:	2302      	movs	r3, #2
    e286:	e000      	b.n	e28a <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e288:	2300      	movs	r3, #0
}
    e28a:	0018      	movs	r0, r3
    e28c:	46bd      	mov	sp, r7
    e28e:	b006      	add	sp, #24
    e290:	bd80      	pop	{r7, pc}
    e292:	46c0      	nop			; (mov r8, r8)
    e294:	0001f394 	.word	0x0001f394
    e298:	2000140c 	.word	0x2000140c

0000e29c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    e29c:	b580      	push	{r7, lr}
    e29e:	b082      	sub	sp, #8
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	0002      	movs	r2, r0
    e2a4:	6039      	str	r1, [r7, #0]
    e2a6:	1dfb      	adds	r3, r7, #7
    e2a8:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
    e2aa:	1dfb      	adds	r3, r7, #7
    e2ac:	781b      	ldrb	r3, [r3, #0]
    e2ae:	2b07      	cmp	r3, #7
    e2b0:	d822      	bhi.n	e2f8 <LoRaMacSetFCntDown+0x5c>
    e2b2:	009a      	lsls	r2, r3, #2
    e2b4:	4b15      	ldr	r3, [pc, #84]	; (e30c <LoRaMacSetFCntDown+0x70>)
    e2b6:	18d3      	adds	r3, r2, r3
    e2b8:	681b      	ldr	r3, [r3, #0]
    e2ba:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
    e2bc:	2303      	movs	r3, #3
    e2be:	e020      	b.n	e302 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
    e2c0:	4b13      	ldr	r3, [pc, #76]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2c2:	683a      	ldr	r2, [r7, #0]
    e2c4:	605a      	str	r2, [r3, #4]
            break;
    e2c6:	e019      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
    e2c8:	4b11      	ldr	r3, [pc, #68]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2ca:	683a      	ldr	r2, [r7, #0]
    e2cc:	609a      	str	r2, [r3, #8]
            break;
    e2ce:	e015      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
    e2d0:	4b0f      	ldr	r3, [pc, #60]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2d2:	683a      	ldr	r2, [r7, #0]
    e2d4:	60da      	str	r2, [r3, #12]
            break;
    e2d6:	e011      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
    e2d8:	4b0d      	ldr	r3, [pc, #52]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2da:	683a      	ldr	r2, [r7, #0]
    e2dc:	611a      	str	r2, [r3, #16]
            break;
    e2de:	e00d      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
    e2e0:	4b0b      	ldr	r3, [pc, #44]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2e2:	683a      	ldr	r2, [r7, #0]
    e2e4:	615a      	str	r2, [r3, #20]
            break;
    e2e6:	e009      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
    e2e8:	4b09      	ldr	r3, [pc, #36]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2ea:	683a      	ldr	r2, [r7, #0]
    e2ec:	619a      	str	r2, [r3, #24]
            break;
    e2ee:	e005      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
    e2f0:	4b07      	ldr	r3, [pc, #28]	; (e310 <LoRaMacSetFCntDown+0x74>)
    e2f2:	683a      	ldr	r2, [r7, #0]
    e2f4:	61da      	str	r2, [r3, #28]
            break;
    e2f6:	e001      	b.n	e2fc <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    e2f8:	2305      	movs	r3, #5
    e2fa:	e002      	b.n	e302 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
    e2fc:	4b05      	ldr	r3, [pc, #20]	; (e314 <LoRaMacSetFCntDown+0x78>)
    e2fe:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e300:	2300      	movs	r3, #0
}
    e302:	0018      	movs	r0, r3
    e304:	46bd      	mov	sp, r7
    e306:	b002      	add	sp, #8
    e308:	bd80      	pop	{r7, pc}
    e30a:	46c0      	nop			; (mov r8, r8)
    e30c:	0001f3a8 	.word	0x0001f3a8
    e310:	2000140c 	.word	0x2000140c
    e314:	0000e0b5 	.word	0x0000e0b5

0000e318 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
    e318:	b580      	push	{r7, lr}
    e31a:	b082      	sub	sp, #8
    e31c:	af00      	add	r7, sp, #0
    e31e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
    e320:	687b      	ldr	r3, [r7, #4]
    e322:	2b00      	cmp	r3, #0
    e324:	d101      	bne.n	e32a <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    e326:	2304      	movs	r3, #4
    e328:	e005      	b.n	e336 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
    e32a:	4b05      	ldr	r3, [pc, #20]	; (e340 <LoRaMacGetFCntUp+0x28>)
    e32c:	681b      	ldr	r3, [r3, #0]
    e32e:	1c5a      	adds	r2, r3, #1
    e330:	687b      	ldr	r3, [r7, #4]
    e332:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e334:	2300      	movs	r3, #0
}
    e336:	0018      	movs	r0, r3
    e338:	46bd      	mov	sp, r7
    e33a:	b002      	add	sp, #8
    e33c:	bd80      	pop	{r7, pc}
    e33e:	46c0      	nop			; (mov r8, r8)
    e340:	2000140c 	.word	0x2000140c

0000e344 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
    e344:	b580      	push	{r7, lr}
    e346:	b082      	sub	sp, #8
    e348:	af00      	add	r7, sp, #0
    e34a:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
    e34c:	4b04      	ldr	r3, [pc, #16]	; (e360 <LoRaMacSetFCntUp+0x1c>)
    e34e:	687a      	ldr	r2, [r7, #4]
    e350:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
    e352:	4b04      	ldr	r3, [pc, #16]	; (e364 <LoRaMacSetFCntUp+0x20>)
    e354:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e356:	2300      	movs	r3, #0
}
    e358:	0018      	movs	r0, r3
    e35a:	46bd      	mov	sp, r7
    e35c:	b002      	add	sp, #8
    e35e:	bd80      	pop	{r7, pc}
    e360:	2000140c 	.word	0x2000140c
    e364:	0000e0b5 	.word	0x0000e0b5

0000e368 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
    e368:	b580      	push	{r7, lr}
    e36a:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
    e36c:	4b12      	ldr	r3, [pc, #72]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e36e:	2200      	movs	r2, #0
    e370:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
    e372:	4b11      	ldr	r3, [pc, #68]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e374:	2201      	movs	r2, #1
    e376:	4252      	negs	r2, r2
    e378:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
    e37a:	4b0f      	ldr	r3, [pc, #60]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e37c:	2201      	movs	r2, #1
    e37e:	4252      	negs	r2, r2
    e380:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
    e382:	4b0d      	ldr	r3, [pc, #52]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e384:	2201      	movs	r2, #1
    e386:	4252      	negs	r2, r2
    e388:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
    e38a:	4b0b      	ldr	r3, [pc, #44]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e38c:	2201      	movs	r2, #1
    e38e:	4252      	negs	r2, r2
    e390:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    e392:	4b09      	ldr	r3, [pc, #36]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e394:	2201      	movs	r2, #1
    e396:	4252      	negs	r2, r2
    e398:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    e39a:	4b07      	ldr	r3, [pc, #28]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e39c:	2201      	movs	r2, #1
    e39e:	4252      	negs	r2, r2
    e3a0:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
    e3a2:	4b05      	ldr	r3, [pc, #20]	; (e3b8 <LoRaMacResetFCnts+0x50>)
    e3a4:	2201      	movs	r2, #1
    e3a6:	4252      	negs	r2, r2
    e3a8:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
    e3aa:	4b04      	ldr	r3, [pc, #16]	; (e3bc <LoRaMacResetFCnts+0x54>)
    e3ac:	4798      	blx	r3

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e3ae:	2300      	movs	r3, #0
}
    e3b0:	0018      	movs	r0, r3
    e3b2:	46bd      	mov	sp, r7
    e3b4:	bd80      	pop	{r7, pc}
    e3b6:	46c0      	nop			; (mov r8, r8)
    e3b8:	2000140c 	.word	0x2000140c
    e3bc:	0000e0b5 	.word	0x0000e0b5

0000e3c0 <LoRaMacGetRJcount>:

LoRaMacFCntHandlerStatus_t LoRaMacGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b082      	sub	sp, #8
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	0002      	movs	r2, r0
    e3c8:	6039      	str	r1, [r7, #0]
    e3ca:	1dfb      	adds	r3, r7, #7
    e3cc:	701a      	strb	r2, [r3, #0]
    if( rJcount == 0 )
    e3ce:	683b      	ldr	r3, [r7, #0]
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d101      	bne.n	e3d8 <LoRaMacGetRJcount+0x18>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    e3d4:	2304      	movs	r3, #4
    e3d6:	e017      	b.n	e408 <LoRaMacGetRJcount+0x48>
    }

    switch( fCntID )
    e3d8:	1dfb      	adds	r3, r7, #7
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	2b08      	cmp	r3, #8
    e3de:	d002      	beq.n	e3e6 <LoRaMacGetRJcount+0x26>
    e3e0:	2b09      	cmp	r3, #9
    e3e2:	d007      	beq.n	e3f4 <LoRaMacGetRJcount+0x34>
    e3e4:	e00d      	b.n	e402 <LoRaMacGetRJcount+0x42>
    {
        case RJ_COUNT_0:
        {
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount0 + 1;
    e3e6:	4b0a      	ldr	r3, [pc, #40]	; (e410 <LoRaMacGetRJcount+0x50>)
    e3e8:	8c1b      	ldrh	r3, [r3, #32]
    e3ea:	3301      	adds	r3, #1
    e3ec:	b29a      	uxth	r2, r3
    e3ee:	683b      	ldr	r3, [r7, #0]
    e3f0:	801a      	strh	r2, [r3, #0]
            break;
    e3f2:	e008      	b.n	e406 <LoRaMacGetRJcount+0x46>
        }
        case RJ_COUNT_1:
        {
            *rJcount = FCntHandlerNvmCtx.FCntList.RJcount1 + 1;
    e3f4:	4b06      	ldr	r3, [pc, #24]	; (e410 <LoRaMacGetRJcount+0x50>)
    e3f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    e3f8:	3301      	adds	r3, #1
    e3fa:	b29a      	uxth	r2, r3
    e3fc:	683b      	ldr	r3, [r7, #0]
    e3fe:	801a      	strh	r2, [r3, #0]
            break;
    e400:	e001      	b.n	e406 <LoRaMacGetRJcount+0x46>
        }
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
    e402:	2305      	movs	r3, #5
    e404:	e000      	b.n	e408 <LoRaMacGetRJcount+0x48>
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e406:	2300      	movs	r3, #0
}
    e408:	0018      	movs	r0, r3
    e40a:	46bd      	mov	sp, r7
    e40c:	b002      	add	sp, #8
    e40e:	bd80      	pop	{r7, pc}
    e410:	2000140c 	.word	0x2000140c

0000e414 <LoRaMacFCntHandlerSetMulticastReference>:
    }
    return LORAMAC_FCNT_HANDLER_SUCCESS;
}

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
    e414:	b580      	push	{r7, lr}
    e416:	b082      	sub	sp, #8
    e418:	af00      	add	r7, sp, #0
    e41a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
    e41c:	687b      	ldr	r3, [r7, #4]
    e41e:	2b00      	cmp	r3, #0
    e420:	d101      	bne.n	e426 <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
    e422:	2304      	movs	r3, #4
    e424:	e00f      	b.n	e446 <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	4a09      	ldr	r2, [pc, #36]	; (e450 <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
    e42a:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	3320      	adds	r3, #32
    e430:	4a08      	ldr	r2, [pc, #32]	; (e454 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
    e432:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
    e434:	687b      	ldr	r3, [r7, #4]
    e436:	3340      	adds	r3, #64	; 0x40
    e438:	4a07      	ldr	r2, [pc, #28]	; (e458 <LoRaMacFCntHandlerSetMulticastReference+0x44>)
    e43a:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	3360      	adds	r3, #96	; 0x60
    e440:	4a06      	ldr	r2, [pc, #24]	; (e45c <LoRaMacFCntHandlerSetMulticastReference+0x48>)
    e442:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
    e444:	2300      	movs	r3, #0
}
    e446:	0018      	movs	r0, r3
    e448:	46bd      	mov	sp, r7
    e44a:	b002      	add	sp, #8
    e44c:	bd80      	pop	{r7, pc}
    e44e:	46c0      	nop			; (mov r8, r8)
    e450:	2000141c 	.word	0x2000141c
    e454:	20001420 	.word	0x20001420
    e458:	20001424 	.word	0x20001424
    e45c:	20001428 	.word	0x20001428

0000e460 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    e460:	b580      	push	{r7, lr}
    e462:	b084      	sub	sp, #16
    e464:	af00      	add	r7, sp, #0
    e466:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    e468:	687b      	ldr	r3, [r7, #4]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d003      	beq.n	e476 <LoRaMacParserJoinAccept+0x16>
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	681b      	ldr	r3, [r3, #0]
    e472:	2b00      	cmp	r3, #0
    e474:	d101      	bne.n	e47a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
    e476:	2302      	movs	r3, #2
    e478:	e0fd      	b.n	e676 <LoRaMacParserJoinAccept+0x216>
    }

    uint16_t bufItr = 0;
    e47a:	230e      	movs	r3, #14
    e47c:	18fb      	adds	r3, r7, r3
    e47e:	2200      	movs	r2, #0
    e480:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    e482:	687b      	ldr	r3, [r7, #4]
    e484:	681a      	ldr	r2, [r3, #0]
    e486:	230e      	movs	r3, #14
    e488:	18fb      	adds	r3, r7, r3
    e48a:	881b      	ldrh	r3, [r3, #0]
    e48c:	210e      	movs	r1, #14
    e48e:	1879      	adds	r1, r7, r1
    e490:	1c58      	adds	r0, r3, #1
    e492:	8008      	strh	r0, [r1, #0]
    e494:	18d3      	adds	r3, r2, r3
    e496:	781a      	ldrb	r2, [r3, #0]
    e498:	687b      	ldr	r3, [r7, #4]
    e49a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	1d98      	adds	r0, r3, #6
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	681a      	ldr	r2, [r3, #0]
    e4a4:	230e      	movs	r3, #14
    e4a6:	18fb      	adds	r3, r7, r3
    e4a8:	881b      	ldrh	r3, [r3, #0]
    e4aa:	18d3      	adds	r3, r2, r3
    e4ac:	2203      	movs	r2, #3
    e4ae:	0019      	movs	r1, r3
    e4b0:	4b73      	ldr	r3, [pc, #460]	; (e680 <LoRaMacParserJoinAccept+0x220>)
    e4b2:	4798      	blx	r3
    bufItr = bufItr + 3;
    e4b4:	230e      	movs	r3, #14
    e4b6:	18fb      	adds	r3, r7, r3
    e4b8:	220e      	movs	r2, #14
    e4ba:	18ba      	adds	r2, r7, r2
    e4bc:	8812      	ldrh	r2, [r2, #0]
    e4be:	3203      	adds	r2, #3
    e4c0:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
    e4c2:	687b      	ldr	r3, [r7, #4]
    e4c4:	3309      	adds	r3, #9
    e4c6:	0018      	movs	r0, r3
    e4c8:	687b      	ldr	r3, [r7, #4]
    e4ca:	681a      	ldr	r2, [r3, #0]
    e4cc:	230e      	movs	r3, #14
    e4ce:	18fb      	adds	r3, r7, r3
    e4d0:	881b      	ldrh	r3, [r3, #0]
    e4d2:	18d3      	adds	r3, r2, r3
    e4d4:	2203      	movs	r2, #3
    e4d6:	0019      	movs	r1, r3
    e4d8:	4b69      	ldr	r3, [pc, #420]	; (e680 <LoRaMacParserJoinAccept+0x220>)
    e4da:	4798      	blx	r3
    bufItr = bufItr + 3;
    e4dc:	230e      	movs	r3, #14
    e4de:	18fb      	adds	r3, r7, r3
    e4e0:	220e      	movs	r2, #14
    e4e2:	18ba      	adds	r2, r7, r2
    e4e4:	8812      	ldrh	r2, [r2, #0]
    e4e6:	3203      	adds	r2, #3
    e4e8:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	681a      	ldr	r2, [r3, #0]
    e4ee:	230e      	movs	r3, #14
    e4f0:	18fb      	adds	r3, r7, r3
    e4f2:	881b      	ldrh	r3, [r3, #0]
    e4f4:	210e      	movs	r1, #14
    e4f6:	1879      	adds	r1, r7, r1
    e4f8:	1c58      	adds	r0, r3, #1
    e4fa:	8008      	strh	r0, [r1, #0]
    e4fc:	18d3      	adds	r3, r2, r3
    e4fe:	781b      	ldrb	r3, [r3, #0]
    e500:	001a      	movs	r2, r3
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    e506:	687b      	ldr	r3, [r7, #4]
    e508:	681a      	ldr	r2, [r3, #0]
    e50a:	230e      	movs	r3, #14
    e50c:	18fb      	adds	r3, r7, r3
    e50e:	881b      	ldrh	r3, [r3, #0]
    e510:	210e      	movs	r1, #14
    e512:	1879      	adds	r1, r7, r1
    e514:	1c58      	adds	r0, r3, #1
    e516:	8008      	strh	r0, [r1, #0]
    e518:	18d3      	adds	r3, r2, r3
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	021a      	lsls	r2, r3, #8
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	68db      	ldr	r3, [r3, #12]
    e522:	431a      	orrs	r2, r3
    e524:	687b      	ldr	r3, [r7, #4]
    e526:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	681a      	ldr	r2, [r3, #0]
    e52c:	230e      	movs	r3, #14
    e52e:	18fb      	adds	r3, r7, r3
    e530:	881b      	ldrh	r3, [r3, #0]
    e532:	210e      	movs	r1, #14
    e534:	1879      	adds	r1, r7, r1
    e536:	1c58      	adds	r0, r3, #1
    e538:	8008      	strh	r0, [r1, #0]
    e53a:	18d3      	adds	r3, r2, r3
    e53c:	781b      	ldrb	r3, [r3, #0]
    e53e:	041a      	lsls	r2, r3, #16
    e540:	687b      	ldr	r3, [r7, #4]
    e542:	68db      	ldr	r3, [r3, #12]
    e544:	431a      	orrs	r2, r3
    e546:	687b      	ldr	r3, [r7, #4]
    e548:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    e54a:	687b      	ldr	r3, [r7, #4]
    e54c:	681a      	ldr	r2, [r3, #0]
    e54e:	230e      	movs	r3, #14
    e550:	18fb      	adds	r3, r7, r3
    e552:	881b      	ldrh	r3, [r3, #0]
    e554:	210e      	movs	r1, #14
    e556:	1879      	adds	r1, r7, r1
    e558:	1c58      	adds	r0, r3, #1
    e55a:	8008      	strh	r0, [r1, #0]
    e55c:	18d3      	adds	r3, r2, r3
    e55e:	781b      	ldrb	r3, [r3, #0]
    e560:	061a      	lsls	r2, r3, #24
    e562:	687b      	ldr	r3, [r7, #4]
    e564:	68db      	ldr	r3, [r3, #12]
    e566:	431a      	orrs	r2, r3
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	681a      	ldr	r2, [r3, #0]
    e570:	230e      	movs	r3, #14
    e572:	18fb      	adds	r3, r7, r3
    e574:	881b      	ldrh	r3, [r3, #0]
    e576:	210e      	movs	r1, #14
    e578:	1879      	adds	r1, r7, r1
    e57a:	1c58      	adds	r0, r3, #1
    e57c:	8008      	strh	r0, [r1, #0]
    e57e:	18d3      	adds	r3, r2, r3
    e580:	781a      	ldrb	r2, [r3, #0]
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
    e586:	687b      	ldr	r3, [r7, #4]
    e588:	681a      	ldr	r2, [r3, #0]
    e58a:	230e      	movs	r3, #14
    e58c:	18fb      	adds	r3, r7, r3
    e58e:	881b      	ldrh	r3, [r3, #0]
    e590:	210e      	movs	r1, #14
    e592:	1879      	adds	r1, r7, r1
    e594:	1c58      	adds	r0, r3, #1
    e596:	8008      	strh	r0, [r1, #0]
    e598:	18d3      	adds	r3, r2, r3
    e59a:	781a      	ldrb	r2, [r3, #0]
    e59c:	687b      	ldr	r3, [r7, #4]
    e59e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	791b      	ldrb	r3, [r3, #4]
    e5a4:	1f1a      	subs	r2, r3, #4
    e5a6:	230e      	movs	r3, #14
    e5a8:	18fb      	adds	r3, r7, r3
    e5aa:	881b      	ldrh	r3, [r3, #0]
    e5ac:	1ad3      	subs	r3, r2, r3
    e5ae:	2b10      	cmp	r3, #16
    e5b0:	d114      	bne.n	e5dc <LoRaMacParserJoinAccept+0x17c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	3312      	adds	r3, #18
    e5b6:	0018      	movs	r0, r3
    e5b8:	687b      	ldr	r3, [r7, #4]
    e5ba:	681a      	ldr	r2, [r3, #0]
    e5bc:	230e      	movs	r3, #14
    e5be:	18fb      	adds	r3, r7, r3
    e5c0:	881b      	ldrh	r3, [r3, #0]
    e5c2:	18d3      	adds	r3, r2, r3
    e5c4:	2210      	movs	r2, #16
    e5c6:	0019      	movs	r1, r3
    e5c8:	4b2d      	ldr	r3, [pc, #180]	; (e680 <LoRaMacParserJoinAccept+0x220>)
    e5ca:	4798      	blx	r3
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
    e5cc:	230e      	movs	r3, #14
    e5ce:	18fb      	adds	r3, r7, r3
    e5d0:	220e      	movs	r2, #14
    e5d2:	18ba      	adds	r2, r7, r2
    e5d4:	8812      	ldrh	r2, [r2, #0]
    e5d6:	3210      	adds	r2, #16
    e5d8:	801a      	strh	r2, [r3, #0]
    e5da:	e00a      	b.n	e5f2 <LoRaMacParserJoinAccept+0x192>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	791b      	ldrb	r3, [r3, #4]
    e5e0:	1f1a      	subs	r2, r3, #4
    e5e2:	230e      	movs	r3, #14
    e5e4:	18fb      	adds	r3, r7, r3
    e5e6:	881b      	ldrh	r3, [r3, #0]
    e5e8:	1ad3      	subs	r3, r2, r3
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	dd01      	ble.n	e5f2 <LoRaMacParserJoinAccept+0x192>
    {
        return LORAMAC_PARSER_FAIL;
    e5ee:	2301      	movs	r3, #1
    e5f0:	e041      	b.n	e676 <LoRaMacParserJoinAccept+0x216>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	681a      	ldr	r2, [r3, #0]
    e5f6:	230e      	movs	r3, #14
    e5f8:	18fb      	adds	r3, r7, r3
    e5fa:	881b      	ldrh	r3, [r3, #0]
    e5fc:	210e      	movs	r1, #14
    e5fe:	1879      	adds	r1, r7, r1
    e600:	1c58      	adds	r0, r3, #1
    e602:	8008      	strh	r0, [r1, #0]
    e604:	18d3      	adds	r3, r2, r3
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	001a      	movs	r2, r3
    e60a:	687b      	ldr	r3, [r7, #4]
    e60c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    e60e:	687b      	ldr	r3, [r7, #4]
    e610:	681a      	ldr	r2, [r3, #0]
    e612:	230e      	movs	r3, #14
    e614:	18fb      	adds	r3, r7, r3
    e616:	881b      	ldrh	r3, [r3, #0]
    e618:	210e      	movs	r1, #14
    e61a:	1879      	adds	r1, r7, r1
    e61c:	1c58      	adds	r0, r3, #1
    e61e:	8008      	strh	r0, [r1, #0]
    e620:	18d3      	adds	r3, r2, r3
    e622:	781b      	ldrb	r3, [r3, #0]
    e624:	021a      	lsls	r2, r3, #8
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e62a:	431a      	orrs	r2, r3
    e62c:	687b      	ldr	r3, [r7, #4]
    e62e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	681a      	ldr	r2, [r3, #0]
    e634:	230e      	movs	r3, #14
    e636:	18fb      	adds	r3, r7, r3
    e638:	881b      	ldrh	r3, [r3, #0]
    e63a:	210e      	movs	r1, #14
    e63c:	1879      	adds	r1, r7, r1
    e63e:	1c58      	adds	r0, r3, #1
    e640:	8008      	strh	r0, [r1, #0]
    e642:	18d3      	adds	r3, r2, r3
    e644:	781b      	ldrb	r3, [r3, #0]
    e646:	041a      	lsls	r2, r3, #16
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e64c:	431a      	orrs	r2, r3
    e64e:	687b      	ldr	r3, [r7, #4]
    e650:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    e652:	687b      	ldr	r3, [r7, #4]
    e654:	681a      	ldr	r2, [r3, #0]
    e656:	230e      	movs	r3, #14
    e658:	18fb      	adds	r3, r7, r3
    e65a:	881b      	ldrh	r3, [r3, #0]
    e65c:	210e      	movs	r1, #14
    e65e:	1879      	adds	r1, r7, r1
    e660:	1c58      	adds	r0, r3, #1
    e662:	8008      	strh	r0, [r1, #0]
    e664:	18d3      	adds	r3, r2, r3
    e666:	781b      	ldrb	r3, [r3, #0]
    e668:	061a      	lsls	r2, r3, #24
    e66a:	687b      	ldr	r3, [r7, #4]
    e66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e66e:	431a      	orrs	r2, r3
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
    e674:	2300      	movs	r3, #0
}
    e676:	0018      	movs	r0, r3
    e678:	46bd      	mov	sp, r7
    e67a:	b004      	add	sp, #16
    e67c:	bd80      	pop	{r7, pc}
    e67e:	46c0      	nop			; (mov r8, r8)
    e680:	00002955 	.word	0x00002955

0000e684 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    e684:	b580      	push	{r7, lr}
    e686:	b084      	sub	sp, #16
    e688:	af00      	add	r7, sp, #0
    e68a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    e68c:	687b      	ldr	r3, [r7, #4]
    e68e:	2b00      	cmp	r3, #0
    e690:	d003      	beq.n	e69a <LoRaMacParserData+0x16>
    e692:	687b      	ldr	r3, [r7, #4]
    e694:	681b      	ldr	r3, [r3, #0]
    e696:	2b00      	cmp	r3, #0
    e698:	d101      	bne.n	e69e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
    e69a:	2302      	movs	r3, #2
    e69c:	e123      	b.n	e8e6 <LoRaMacParserData+0x262>
    }

    uint16_t bufItr = 0;
    e69e:	230e      	movs	r3, #14
    e6a0:	18fb      	adds	r3, r7, r3
    e6a2:	2200      	movs	r2, #0
    e6a4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
    e6a6:	687b      	ldr	r3, [r7, #4]
    e6a8:	681a      	ldr	r2, [r3, #0]
    e6aa:	230e      	movs	r3, #14
    e6ac:	18fb      	adds	r3, r7, r3
    e6ae:	881b      	ldrh	r3, [r3, #0]
    e6b0:	210e      	movs	r1, #14
    e6b2:	1879      	adds	r1, r7, r1
    e6b4:	1c58      	adds	r0, r3, #1
    e6b6:	8008      	strh	r0, [r1, #0]
    e6b8:	18d3      	adds	r3, r2, r3
    e6ba:	781a      	ldrb	r2, [r3, #0]
    e6bc:	687b      	ldr	r3, [r7, #4]
    e6be:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	681a      	ldr	r2, [r3, #0]
    e6c4:	230e      	movs	r3, #14
    e6c6:	18fb      	adds	r3, r7, r3
    e6c8:	881b      	ldrh	r3, [r3, #0]
    e6ca:	210e      	movs	r1, #14
    e6cc:	1879      	adds	r1, r7, r1
    e6ce:	1c58      	adds	r0, r3, #1
    e6d0:	8008      	strh	r0, [r1, #0]
    e6d2:	18d3      	adds	r3, r2, r3
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	001a      	movs	r2, r3
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	681a      	ldr	r2, [r3, #0]
    e6e0:	230e      	movs	r3, #14
    e6e2:	18fb      	adds	r3, r7, r3
    e6e4:	881b      	ldrh	r3, [r3, #0]
    e6e6:	210e      	movs	r1, #14
    e6e8:	1879      	adds	r1, r7, r1
    e6ea:	1c58      	adds	r0, r3, #1
    e6ec:	8008      	strh	r0, [r1, #0]
    e6ee:	18d3      	adds	r3, r2, r3
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	021a      	lsls	r2, r3, #8
    e6f4:	687b      	ldr	r3, [r7, #4]
    e6f6:	689b      	ldr	r3, [r3, #8]
    e6f8:	431a      	orrs	r2, r3
    e6fa:	687b      	ldr	r3, [r7, #4]
    e6fc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
    e6fe:	687b      	ldr	r3, [r7, #4]
    e700:	681a      	ldr	r2, [r3, #0]
    e702:	230e      	movs	r3, #14
    e704:	18fb      	adds	r3, r7, r3
    e706:	881b      	ldrh	r3, [r3, #0]
    e708:	210e      	movs	r1, #14
    e70a:	1879      	adds	r1, r7, r1
    e70c:	1c58      	adds	r0, r3, #1
    e70e:	8008      	strh	r0, [r1, #0]
    e710:	18d3      	adds	r3, r2, r3
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	041a      	lsls	r2, r3, #16
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	689b      	ldr	r3, [r3, #8]
    e71a:	431a      	orrs	r2, r3
    e71c:	687b      	ldr	r3, [r7, #4]
    e71e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	681a      	ldr	r2, [r3, #0]
    e724:	230e      	movs	r3, #14
    e726:	18fb      	adds	r3, r7, r3
    e728:	881b      	ldrh	r3, [r3, #0]
    e72a:	210e      	movs	r1, #14
    e72c:	1879      	adds	r1, r7, r1
    e72e:	1c58      	adds	r0, r3, #1
    e730:	8008      	strh	r0, [r1, #0]
    e732:	18d3      	adds	r3, r2, r3
    e734:	781b      	ldrb	r3, [r3, #0]
    e736:	061a      	lsls	r2, r3, #24
    e738:	687b      	ldr	r3, [r7, #4]
    e73a:	689b      	ldr	r3, [r3, #8]
    e73c:	431a      	orrs	r2, r3
    e73e:	687b      	ldr	r3, [r7, #4]
    e740:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
    e742:	687b      	ldr	r3, [r7, #4]
    e744:	681a      	ldr	r2, [r3, #0]
    e746:	230e      	movs	r3, #14
    e748:	18fb      	adds	r3, r7, r3
    e74a:	881b      	ldrh	r3, [r3, #0]
    e74c:	210e      	movs	r1, #14
    e74e:	1879      	adds	r1, r7, r1
    e750:	1c58      	adds	r0, r3, #1
    e752:	8008      	strh	r0, [r1, #0]
    e754:	18d3      	adds	r3, r2, r3
    e756:	781a      	ldrb	r2, [r3, #0]
    e758:	687b      	ldr	r3, [r7, #4]
    e75a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    e75c:	687b      	ldr	r3, [r7, #4]
    e75e:	681a      	ldr	r2, [r3, #0]
    e760:	230e      	movs	r3, #14
    e762:	18fb      	adds	r3, r7, r3
    e764:	881b      	ldrh	r3, [r3, #0]
    e766:	210e      	movs	r1, #14
    e768:	1879      	adds	r1, r7, r1
    e76a:	1c58      	adds	r0, r3, #1
    e76c:	8008      	strh	r0, [r1, #0]
    e76e:	18d3      	adds	r3, r2, r3
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	b29a      	uxth	r2, r3
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	681a      	ldr	r2, [r3, #0]
    e77c:	230e      	movs	r3, #14
    e77e:	18fb      	adds	r3, r7, r3
    e780:	881b      	ldrh	r3, [r3, #0]
    e782:	210e      	movs	r1, #14
    e784:	1879      	adds	r1, r7, r1
    e786:	1c58      	adds	r0, r3, #1
    e788:	8008      	strh	r0, [r1, #0]
    e78a:	18d3      	adds	r3, r2, r3
    e78c:	781b      	ldrb	r3, [r3, #0]
    e78e:	0219      	lsls	r1, r3, #8
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	89db      	ldrh	r3, [r3, #14]
    e794:	b21a      	sxth	r2, r3
    e796:	b20b      	sxth	r3, r1
    e798:	4313      	orrs	r3, r2
    e79a:	b21b      	sxth	r3, r3
    e79c:	b29a      	uxth	r2, r3
    e79e:	687b      	ldr	r3, [r7, #4]
    e7a0:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    e7a2:	687b      	ldr	r3, [r7, #4]
    e7a4:	7b1b      	ldrb	r3, [r3, #12]
    e7a6:	071b      	lsls	r3, r3, #28
    e7a8:	0f1b      	lsrs	r3, r3, #28
    e7aa:	b2db      	uxtb	r3, r3
    e7ac:	2b0f      	cmp	r3, #15
    e7ae:	dc31      	bgt.n	e814 <LoRaMacParserData+0x190>
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
    e7b0:	687b      	ldr	r3, [r7, #4]
    e7b2:	3310      	adds	r3, #16
    e7b4:	0018      	movs	r0, r3
    e7b6:	687b      	ldr	r3, [r7, #4]
    e7b8:	681a      	ldr	r2, [r3, #0]
    e7ba:	230e      	movs	r3, #14
    e7bc:	18fb      	adds	r3, r7, r3
    e7be:	881b      	ldrh	r3, [r3, #0]
    e7c0:	18d1      	adds	r1, r2, r3
    e7c2:	687b      	ldr	r3, [r7, #4]
    e7c4:	7b1b      	ldrb	r3, [r3, #12]
    e7c6:	071b      	lsls	r3, r3, #28
    e7c8:	0f1b      	lsrs	r3, r3, #28
    e7ca:	b2db      	uxtb	r3, r3
    e7cc:	b29b      	uxth	r3, r3
    e7ce:	001a      	movs	r2, r3
    e7d0:	4b47      	ldr	r3, [pc, #284]	; (e8f0 <LoRaMacParserData+0x26c>)
    e7d2:	4798      	blx	r3
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    e7d4:	687b      	ldr	r3, [r7, #4]
    e7d6:	7b1b      	ldrb	r3, [r3, #12]
    e7d8:	071b      	lsls	r3, r3, #28
    e7da:	0f1b      	lsrs	r3, r3, #28
    e7dc:	b2db      	uxtb	r3, r3
    e7de:	b299      	uxth	r1, r3
    e7e0:	230e      	movs	r3, #14
    e7e2:	18fb      	adds	r3, r7, r3
    e7e4:	220e      	movs	r2, #14
    e7e6:	18ba      	adds	r2, r7, r2
    e7e8:	8812      	ldrh	r2, [r2, #0]
    e7ea:	188a      	adds	r2, r1, r2
    e7ec:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
    e7ee:	687b      	ldr	r3, [r7, #4]
    e7f0:	2220      	movs	r2, #32
    e7f2:	2100      	movs	r1, #0
    e7f4:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
    e7f6:	687b      	ldr	r3, [r7, #4]
    e7f8:	2228      	movs	r2, #40	; 0x28
    e7fa:	2100      	movs	r1, #0
    e7fc:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
    e7fe:	687b      	ldr	r3, [r7, #4]
    e800:	791b      	ldrb	r3, [r3, #4]
    e802:	001a      	movs	r2, r3
    e804:	230e      	movs	r3, #14
    e806:	18fb      	adds	r3, r7, r3
    e808:	881b      	ldrh	r3, [r3, #0]
    e80a:	1ad3      	subs	r3, r2, r3
    e80c:	3b04      	subs	r3, #4
    e80e:	2b00      	cmp	r3, #0
    e810:	dd37      	ble.n	e882 <LoRaMacParserData+0x1fe>
    e812:	e001      	b.n	e818 <LoRaMacParserData+0x194>
        return LORAMAC_PARSER_FAIL;
    e814:	2301      	movs	r3, #1
    e816:	e066      	b.n	e8e6 <LoRaMacParserData+0x262>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
    e818:	687b      	ldr	r3, [r7, #4]
    e81a:	681a      	ldr	r2, [r3, #0]
    e81c:	230e      	movs	r3, #14
    e81e:	18fb      	adds	r3, r7, r3
    e820:	881b      	ldrh	r3, [r3, #0]
    e822:	210e      	movs	r1, #14
    e824:	1879      	adds	r1, r7, r1
    e826:	1c58      	adds	r0, r3, #1
    e828:	8008      	strh	r0, [r1, #0]
    e82a:	18d3      	adds	r3, r2, r3
    e82c:	7819      	ldrb	r1, [r3, #0]
    e82e:	687b      	ldr	r3, [r7, #4]
    e830:	2220      	movs	r2, #32
    e832:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
    e834:	687b      	ldr	r3, [r7, #4]
    e836:	791a      	ldrb	r2, [r3, #4]
    e838:	230e      	movs	r3, #14
    e83a:	18fb      	adds	r3, r7, r3
    e83c:	881b      	ldrh	r3, [r3, #0]
    e83e:	b2db      	uxtb	r3, r3
    e840:	1ad3      	subs	r3, r2, r3
    e842:	b2db      	uxtb	r3, r3
    e844:	3b04      	subs	r3, #4
    e846:	b2d9      	uxtb	r1, r3
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	2228      	movs	r2, #40	; 0x28
    e84c:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	6a58      	ldr	r0, [r3, #36]	; 0x24
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	681a      	ldr	r2, [r3, #0]
    e856:	230e      	movs	r3, #14
    e858:	18fb      	adds	r3, r7, r3
    e85a:	881b      	ldrh	r3, [r3, #0]
    e85c:	18d1      	adds	r1, r2, r3
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	2228      	movs	r2, #40	; 0x28
    e862:	5c9b      	ldrb	r3, [r3, r2]
    e864:	b29b      	uxth	r3, r3
    e866:	001a      	movs	r2, r3
    e868:	4b21      	ldr	r3, [pc, #132]	; (e8f0 <LoRaMacParserData+0x26c>)
    e86a:	4798      	blx	r3
        bufItr = bufItr + macMsg->FRMPayloadSize;
    e86c:	687b      	ldr	r3, [r7, #4]
    e86e:	2228      	movs	r2, #40	; 0x28
    e870:	5c9b      	ldrb	r3, [r3, r2]
    e872:	b299      	uxth	r1, r3
    e874:	230e      	movs	r3, #14
    e876:	18fb      	adds	r3, r7, r3
    e878:	220e      	movs	r2, #14
    e87a:	18ba      	adds	r2, r7, r2
    e87c:	8812      	ldrh	r2, [r2, #0]
    e87e:	188a      	adds	r2, r1, r2
    e880:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    e882:	687b      	ldr	r3, [r7, #4]
    e884:	681a      	ldr	r2, [r3, #0]
    e886:	687b      	ldr	r3, [r7, #4]
    e888:	791b      	ldrb	r3, [r3, #4]
    e88a:	3b04      	subs	r3, #4
    e88c:	18d3      	adds	r3, r2, r3
    e88e:	781b      	ldrb	r3, [r3, #0]
    e890:	001a      	movs	r2, r3
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e89a:	687b      	ldr	r3, [r7, #4]
    e89c:	6819      	ldr	r1, [r3, #0]
    e89e:	687b      	ldr	r3, [r7, #4]
    e8a0:	791b      	ldrb	r3, [r3, #4]
    e8a2:	3b03      	subs	r3, #3
    e8a4:	18cb      	adds	r3, r1, r3
    e8a6:	781b      	ldrb	r3, [r3, #0]
    e8a8:	021b      	lsls	r3, r3, #8
    e8aa:	431a      	orrs	r2, r3
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    e8b0:	687b      	ldr	r3, [r7, #4]
    e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	6819      	ldr	r1, [r3, #0]
    e8b8:	687b      	ldr	r3, [r7, #4]
    e8ba:	791b      	ldrb	r3, [r3, #4]
    e8bc:	3b02      	subs	r3, #2
    e8be:	18cb      	adds	r3, r1, r3
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	041b      	lsls	r3, r3, #16
    e8c4:	431a      	orrs	r2, r3
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
    e8ca:	687b      	ldr	r3, [r7, #4]
    e8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	6819      	ldr	r1, [r3, #0]
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	791b      	ldrb	r3, [r3, #4]
    e8d6:	3b01      	subs	r3, #1
    e8d8:	18cb      	adds	r3, r1, r3
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	061b      	lsls	r3, r3, #24
    e8de:	431a      	orrs	r2, r3
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
    e8e4:	2300      	movs	r3, #0
}
    e8e6:	0018      	movs	r0, r3
    e8e8:	46bd      	mov	sp, r7
    e8ea:	b004      	add	sp, #16
    e8ec:	bd80      	pop	{r7, pc}
    e8ee:	46c0      	nop			; (mov r8, r8)
    e8f0:	00002955 	.word	0x00002955

0000e8f4 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    e8f4:	b580      	push	{r7, lr}
    e8f6:	b084      	sub	sp, #16
    e8f8:	af00      	add	r7, sp, #0
    e8fa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    e8fc:	687b      	ldr	r3, [r7, #4]
    e8fe:	2b00      	cmp	r3, #0
    e900:	d003      	beq.n	e90a <LoRaMacSerializerJoinRequest+0x16>
    e902:	687b      	ldr	r3, [r7, #4]
    e904:	681b      	ldr	r3, [r3, #0]
    e906:	2b00      	cmp	r3, #0
    e908:	d101      	bne.n	e90e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    e90a:	2301      	movs	r3, #1
    e90c:	e09c      	b.n	ea48 <LoRaMacSerializerJoinRequest+0x154>
    }

    uint16_t bufItr = 0;
    e90e:	230e      	movs	r3, #14
    e910:	18fb      	adds	r3, r7, r3
    e912:	2200      	movs	r2, #0
    e914:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
    e916:	687b      	ldr	r3, [r7, #4]
    e918:	791b      	ldrb	r3, [r3, #4]
    e91a:	2b16      	cmp	r3, #22
    e91c:	d801      	bhi.n	e922 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    e91e:	2302      	movs	r3, #2
    e920:	e092      	b.n	ea48 <LoRaMacSerializerJoinRequest+0x154>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    e922:	687b      	ldr	r3, [r7, #4]
    e924:	681a      	ldr	r2, [r3, #0]
    e926:	230e      	movs	r3, #14
    e928:	18fb      	adds	r3, r7, r3
    e92a:	881b      	ldrh	r3, [r3, #0]
    e92c:	210e      	movs	r1, #14
    e92e:	1879      	adds	r1, r7, r1
    e930:	1c58      	adds	r0, r3, #1
    e932:	8008      	strh	r0, [r1, #0]
    e934:	18d3      	adds	r3, r2, r3
    e936:	687a      	ldr	r2, [r7, #4]
    e938:	7952      	ldrb	r2, [r2, #5]
    e93a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    e93c:	687b      	ldr	r3, [r7, #4]
    e93e:	681a      	ldr	r2, [r3, #0]
    e940:	230e      	movs	r3, #14
    e942:	18fb      	adds	r3, r7, r3
    e944:	881b      	ldrh	r3, [r3, #0]
    e946:	18d0      	adds	r0, r2, r3
    e948:	687b      	ldr	r3, [r7, #4]
    e94a:	3306      	adds	r3, #6
    e94c:	2208      	movs	r2, #8
    e94e:	0019      	movs	r1, r3
    e950:	4b3f      	ldr	r3, [pc, #252]	; (ea50 <LoRaMacSerializerJoinRequest+0x15c>)
    e952:	4798      	blx	r3
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    e954:	230e      	movs	r3, #14
    e956:	18fb      	adds	r3, r7, r3
    e958:	220e      	movs	r2, #14
    e95a:	18ba      	adds	r2, r7, r2
    e95c:	8812      	ldrh	r2, [r2, #0]
    e95e:	3208      	adds	r2, #8
    e960:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	681a      	ldr	r2, [r3, #0]
    e966:	230e      	movs	r3, #14
    e968:	18fb      	adds	r3, r7, r3
    e96a:	881b      	ldrh	r3, [r3, #0]
    e96c:	18d0      	adds	r0, r2, r3
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	330e      	adds	r3, #14
    e972:	2208      	movs	r2, #8
    e974:	0019      	movs	r1, r3
    e976:	4b36      	ldr	r3, [pc, #216]	; (ea50 <LoRaMacSerializerJoinRequest+0x15c>)
    e978:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    e97a:	230e      	movs	r3, #14
    e97c:	18fb      	adds	r3, r7, r3
    e97e:	220e      	movs	r2, #14
    e980:	18ba      	adds	r2, r7, r2
    e982:	8812      	ldrh	r2, [r2, #0]
    e984:	3208      	adds	r2, #8
    e986:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	681a      	ldr	r2, [r3, #0]
    e98c:	230e      	movs	r3, #14
    e98e:	18fb      	adds	r3, r7, r3
    e990:	881b      	ldrh	r3, [r3, #0]
    e992:	210e      	movs	r1, #14
    e994:	1879      	adds	r1, r7, r1
    e996:	1c58      	adds	r0, r3, #1
    e998:	8008      	strh	r0, [r1, #0]
    e99a:	18d3      	adds	r3, r2, r3
    e99c:	687a      	ldr	r2, [r7, #4]
    e99e:	8ad2      	ldrh	r2, [r2, #22]
    e9a0:	b2d2      	uxtb	r2, r2
    e9a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	681a      	ldr	r2, [r3, #0]
    e9a8:	230e      	movs	r3, #14
    e9aa:	18fb      	adds	r3, r7, r3
    e9ac:	881b      	ldrh	r3, [r3, #0]
    e9ae:	210e      	movs	r1, #14
    e9b0:	1879      	adds	r1, r7, r1
    e9b2:	1c58      	adds	r0, r3, #1
    e9b4:	8008      	strh	r0, [r1, #0]
    e9b6:	18d3      	adds	r3, r2, r3
    e9b8:	687a      	ldr	r2, [r7, #4]
    e9ba:	8ad2      	ldrh	r2, [r2, #22]
    e9bc:	0a12      	lsrs	r2, r2, #8
    e9be:	b292      	uxth	r2, r2
    e9c0:	b2d2      	uxtb	r2, r2
    e9c2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    e9c4:	687b      	ldr	r3, [r7, #4]
    e9c6:	681a      	ldr	r2, [r3, #0]
    e9c8:	230e      	movs	r3, #14
    e9ca:	18fb      	adds	r3, r7, r3
    e9cc:	881b      	ldrh	r3, [r3, #0]
    e9ce:	210e      	movs	r1, #14
    e9d0:	1879      	adds	r1, r7, r1
    e9d2:	1c58      	adds	r0, r3, #1
    e9d4:	8008      	strh	r0, [r1, #0]
    e9d6:	18d2      	adds	r2, r2, r3
    e9d8:	687b      	ldr	r3, [r7, #4]
    e9da:	699b      	ldr	r3, [r3, #24]
    e9dc:	b2db      	uxtb	r3, r3
    e9de:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    e9e0:	687b      	ldr	r3, [r7, #4]
    e9e2:	681a      	ldr	r2, [r3, #0]
    e9e4:	230e      	movs	r3, #14
    e9e6:	18fb      	adds	r3, r7, r3
    e9e8:	881b      	ldrh	r3, [r3, #0]
    e9ea:	210e      	movs	r1, #14
    e9ec:	1879      	adds	r1, r7, r1
    e9ee:	1c58      	adds	r0, r3, #1
    e9f0:	8008      	strh	r0, [r1, #0]
    e9f2:	18d2      	adds	r2, r2, r3
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	699b      	ldr	r3, [r3, #24]
    e9f8:	0a1b      	lsrs	r3, r3, #8
    e9fa:	b2db      	uxtb	r3, r3
    e9fc:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	681a      	ldr	r2, [r3, #0]
    ea02:	230e      	movs	r3, #14
    ea04:	18fb      	adds	r3, r7, r3
    ea06:	881b      	ldrh	r3, [r3, #0]
    ea08:	210e      	movs	r1, #14
    ea0a:	1879      	adds	r1, r7, r1
    ea0c:	1c58      	adds	r0, r3, #1
    ea0e:	8008      	strh	r0, [r1, #0]
    ea10:	18d2      	adds	r2, r2, r3
    ea12:	687b      	ldr	r3, [r7, #4]
    ea14:	699b      	ldr	r3, [r3, #24]
    ea16:	0c1b      	lsrs	r3, r3, #16
    ea18:	b2db      	uxtb	r3, r3
    ea1a:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	681a      	ldr	r2, [r3, #0]
    ea20:	230e      	movs	r3, #14
    ea22:	18fb      	adds	r3, r7, r3
    ea24:	881b      	ldrh	r3, [r3, #0]
    ea26:	210e      	movs	r1, #14
    ea28:	1879      	adds	r1, r7, r1
    ea2a:	1c58      	adds	r0, r3, #1
    ea2c:	8008      	strh	r0, [r1, #0]
    ea2e:	18d2      	adds	r2, r2, r3
    ea30:	687b      	ldr	r3, [r7, #4]
    ea32:	699b      	ldr	r3, [r3, #24]
    ea34:	0e1b      	lsrs	r3, r3, #24
    ea36:	b2db      	uxtb	r3, r3
    ea38:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    ea3a:	230e      	movs	r3, #14
    ea3c:	18fb      	adds	r3, r7, r3
    ea3e:	881b      	ldrh	r3, [r3, #0]
    ea40:	b2da      	uxtb	r2, r3
    ea42:	687b      	ldr	r3, [r7, #4]
    ea44:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    ea46:	2300      	movs	r3, #0
}
    ea48:	0018      	movs	r0, r3
    ea4a:	46bd      	mov	sp, r7
    ea4c:	b004      	add	sp, #16
    ea4e:	bd80      	pop	{r7, pc}
    ea50:	0000298b 	.word	0x0000298b

0000ea54 <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    ea54:	b580      	push	{r7, lr}
    ea56:	b084      	sub	sp, #16
    ea58:	af00      	add	r7, sp, #0
    ea5a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    ea5c:	687b      	ldr	r3, [r7, #4]
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d003      	beq.n	ea6a <LoRaMacSerializerReJoinType1+0x16>
    ea62:	687b      	ldr	r3, [r7, #4]
    ea64:	681b      	ldr	r3, [r3, #0]
    ea66:	2b00      	cmp	r3, #0
    ea68:	d101      	bne.n	ea6e <LoRaMacSerializerReJoinType1+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    ea6a:	2301      	movs	r3, #1
    ea6c:	e0a9      	b.n	ebc2 <LoRaMacSerializerReJoinType1+0x16e>
    }

    uint16_t bufItr = 0;
    ea6e:	230e      	movs	r3, #14
    ea70:	18fb      	adds	r3, r7, r3
    ea72:	2200      	movs	r2, #0
    ea74:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	791b      	ldrb	r3, [r3, #4]
    ea7a:	2b17      	cmp	r3, #23
    ea7c:	d801      	bhi.n	ea82 <LoRaMacSerializerReJoinType1+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    ea7e:	2302      	movs	r3, #2
    ea80:	e09f      	b.n	ebc2 <LoRaMacSerializerReJoinType1+0x16e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    ea82:	687b      	ldr	r3, [r7, #4]
    ea84:	681a      	ldr	r2, [r3, #0]
    ea86:	230e      	movs	r3, #14
    ea88:	18fb      	adds	r3, r7, r3
    ea8a:	881b      	ldrh	r3, [r3, #0]
    ea8c:	210e      	movs	r1, #14
    ea8e:	1879      	adds	r1, r7, r1
    ea90:	1c58      	adds	r0, r3, #1
    ea92:	8008      	strh	r0, [r1, #0]
    ea94:	18d3      	adds	r3, r2, r3
    ea96:	687a      	ldr	r2, [r7, #4]
    ea98:	7952      	ldrb	r2, [r2, #5]
    ea9a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    ea9c:	687b      	ldr	r3, [r7, #4]
    ea9e:	681a      	ldr	r2, [r3, #0]
    eaa0:	230e      	movs	r3, #14
    eaa2:	18fb      	adds	r3, r7, r3
    eaa4:	881b      	ldrh	r3, [r3, #0]
    eaa6:	210e      	movs	r1, #14
    eaa8:	1879      	adds	r1, r7, r1
    eaaa:	1c58      	adds	r0, r3, #1
    eaac:	8008      	strh	r0, [r1, #0]
    eaae:	18d3      	adds	r3, r2, r3
    eab0:	687a      	ldr	r2, [r7, #4]
    eab2:	7992      	ldrb	r2, [r2, #6]
    eab4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	681a      	ldr	r2, [r3, #0]
    eaba:	230e      	movs	r3, #14
    eabc:	18fb      	adds	r3, r7, r3
    eabe:	881b      	ldrh	r3, [r3, #0]
    eac0:	18d0      	adds	r0, r2, r3
    eac2:	687b      	ldr	r3, [r7, #4]
    eac4:	3307      	adds	r3, #7
    eac6:	2208      	movs	r2, #8
    eac8:	0019      	movs	r1, r3
    eaca:	4b40      	ldr	r3, [pc, #256]	; (ebcc <LoRaMacSerializerReJoinType1+0x178>)
    eacc:	4798      	blx	r3
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
    eace:	230e      	movs	r3, #14
    ead0:	18fb      	adds	r3, r7, r3
    ead2:	220e      	movs	r2, #14
    ead4:	18ba      	adds	r2, r7, r2
    ead6:	8812      	ldrh	r2, [r2, #0]
    ead8:	3208      	adds	r2, #8
    eada:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    eadc:	687b      	ldr	r3, [r7, #4]
    eade:	681a      	ldr	r2, [r3, #0]
    eae0:	230e      	movs	r3, #14
    eae2:	18fb      	adds	r3, r7, r3
    eae4:	881b      	ldrh	r3, [r3, #0]
    eae6:	18d0      	adds	r0, r2, r3
    eae8:	687b      	ldr	r3, [r7, #4]
    eaea:	330f      	adds	r3, #15
    eaec:	2208      	movs	r2, #8
    eaee:	0019      	movs	r1, r3
    eaf0:	4b36      	ldr	r3, [pc, #216]	; (ebcc <LoRaMacSerializerReJoinType1+0x178>)
    eaf2:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    eaf4:	230e      	movs	r3, #14
    eaf6:	18fb      	adds	r3, r7, r3
    eaf8:	220e      	movs	r2, #14
    eafa:	18ba      	adds	r2, r7, r2
    eafc:	8812      	ldrh	r2, [r2, #0]
    eafe:	3208      	adds	r2, #8
    eb00:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
    eb02:	687b      	ldr	r3, [r7, #4]
    eb04:	681a      	ldr	r2, [r3, #0]
    eb06:	230e      	movs	r3, #14
    eb08:	18fb      	adds	r3, r7, r3
    eb0a:	881b      	ldrh	r3, [r3, #0]
    eb0c:	210e      	movs	r1, #14
    eb0e:	1879      	adds	r1, r7, r1
    eb10:	1c58      	adds	r0, r3, #1
    eb12:	8008      	strh	r0, [r1, #0]
    eb14:	18d3      	adds	r3, r2, r3
    eb16:	687a      	ldr	r2, [r7, #4]
    eb18:	8b12      	ldrh	r2, [r2, #24]
    eb1a:	b2d2      	uxtb	r2, r2
    eb1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
    eb1e:	687b      	ldr	r3, [r7, #4]
    eb20:	681a      	ldr	r2, [r3, #0]
    eb22:	230e      	movs	r3, #14
    eb24:	18fb      	adds	r3, r7, r3
    eb26:	881b      	ldrh	r3, [r3, #0]
    eb28:	210e      	movs	r1, #14
    eb2a:	1879      	adds	r1, r7, r1
    eb2c:	1c58      	adds	r0, r3, #1
    eb2e:	8008      	strh	r0, [r1, #0]
    eb30:	18d3      	adds	r3, r2, r3
    eb32:	687a      	ldr	r2, [r7, #4]
    eb34:	8b12      	ldrh	r2, [r2, #24]
    eb36:	0a12      	lsrs	r2, r2, #8
    eb38:	b292      	uxth	r2, r2
    eb3a:	b2d2      	uxtb	r2, r2
    eb3c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    eb3e:	687b      	ldr	r3, [r7, #4]
    eb40:	681a      	ldr	r2, [r3, #0]
    eb42:	230e      	movs	r3, #14
    eb44:	18fb      	adds	r3, r7, r3
    eb46:	881b      	ldrh	r3, [r3, #0]
    eb48:	210e      	movs	r1, #14
    eb4a:	1879      	adds	r1, r7, r1
    eb4c:	1c58      	adds	r0, r3, #1
    eb4e:	8008      	strh	r0, [r1, #0]
    eb50:	18d2      	adds	r2, r2, r3
    eb52:	687b      	ldr	r3, [r7, #4]
    eb54:	69db      	ldr	r3, [r3, #28]
    eb56:	b2db      	uxtb	r3, r3
    eb58:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	681a      	ldr	r2, [r3, #0]
    eb5e:	230e      	movs	r3, #14
    eb60:	18fb      	adds	r3, r7, r3
    eb62:	881b      	ldrh	r3, [r3, #0]
    eb64:	210e      	movs	r1, #14
    eb66:	1879      	adds	r1, r7, r1
    eb68:	1c58      	adds	r0, r3, #1
    eb6a:	8008      	strh	r0, [r1, #0]
    eb6c:	18d2      	adds	r2, r2, r3
    eb6e:	687b      	ldr	r3, [r7, #4]
    eb70:	69db      	ldr	r3, [r3, #28]
    eb72:	0a1b      	lsrs	r3, r3, #8
    eb74:	b2db      	uxtb	r3, r3
    eb76:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    eb78:	687b      	ldr	r3, [r7, #4]
    eb7a:	681a      	ldr	r2, [r3, #0]
    eb7c:	230e      	movs	r3, #14
    eb7e:	18fb      	adds	r3, r7, r3
    eb80:	881b      	ldrh	r3, [r3, #0]
    eb82:	210e      	movs	r1, #14
    eb84:	1879      	adds	r1, r7, r1
    eb86:	1c58      	adds	r0, r3, #1
    eb88:	8008      	strh	r0, [r1, #0]
    eb8a:	18d2      	adds	r2, r2, r3
    eb8c:	687b      	ldr	r3, [r7, #4]
    eb8e:	69db      	ldr	r3, [r3, #28]
    eb90:	0c1b      	lsrs	r3, r3, #16
    eb92:	b2db      	uxtb	r3, r3
    eb94:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    eb96:	687b      	ldr	r3, [r7, #4]
    eb98:	681a      	ldr	r2, [r3, #0]
    eb9a:	230e      	movs	r3, #14
    eb9c:	18fb      	adds	r3, r7, r3
    eb9e:	881b      	ldrh	r3, [r3, #0]
    eba0:	210e      	movs	r1, #14
    eba2:	1879      	adds	r1, r7, r1
    eba4:	1c58      	adds	r0, r3, #1
    eba6:	8008      	strh	r0, [r1, #0]
    eba8:	18d2      	adds	r2, r2, r3
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	69db      	ldr	r3, [r3, #28]
    ebae:	0e1b      	lsrs	r3, r3, #24
    ebb0:	b2db      	uxtb	r3, r3
    ebb2:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    ebb4:	230e      	movs	r3, #14
    ebb6:	18fb      	adds	r3, r7, r3
    ebb8:	881b      	ldrh	r3, [r3, #0]
    ebba:	b2da      	uxtb	r2, r3
    ebbc:	687b      	ldr	r3, [r7, #4]
    ebbe:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    ebc0:	2300      	movs	r3, #0
}
    ebc2:	0018      	movs	r0, r3
    ebc4:	46bd      	mov	sp, r7
    ebc6:	b004      	add	sp, #16
    ebc8:	bd80      	pop	{r7, pc}
    ebca:	46c0      	nop			; (mov r8, r8)
    ebcc:	0000298b 	.word	0x0000298b

0000ebd0 <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    ebd0:	b580      	push	{r7, lr}
    ebd2:	b084      	sub	sp, #16
    ebd4:	af00      	add	r7, sp, #0
    ebd6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    ebd8:	687b      	ldr	r3, [r7, #4]
    ebda:	2b00      	cmp	r3, #0
    ebdc:	d003      	beq.n	ebe6 <LoRaMacSerializerReJoinType0or2+0x16>
    ebde:	687b      	ldr	r3, [r7, #4]
    ebe0:	681b      	ldr	r3, [r3, #0]
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d101      	bne.n	ebea <LoRaMacSerializerReJoinType0or2+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    ebe6:	2301      	movs	r3, #1
    ebe8:	e0a9      	b.n	ed3e <LoRaMacSerializerReJoinType0or2+0x16e>
    }

    uint16_t bufItr = 0;
    ebea:	230e      	movs	r3, #14
    ebec:	18fb      	adds	r3, r7, r3
    ebee:	2200      	movs	r2, #0
    ebf0:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
    ebf2:	687b      	ldr	r3, [r7, #4]
    ebf4:	791b      	ldrb	r3, [r3, #4]
    ebf6:	2b12      	cmp	r3, #18
    ebf8:	d801      	bhi.n	ebfe <LoRaMacSerializerReJoinType0or2+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    ebfa:	2302      	movs	r3, #2
    ebfc:	e09f      	b.n	ed3e <LoRaMacSerializerReJoinType0or2+0x16e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    ebfe:	687b      	ldr	r3, [r7, #4]
    ec00:	681a      	ldr	r2, [r3, #0]
    ec02:	230e      	movs	r3, #14
    ec04:	18fb      	adds	r3, r7, r3
    ec06:	881b      	ldrh	r3, [r3, #0]
    ec08:	210e      	movs	r1, #14
    ec0a:	1879      	adds	r1, r7, r1
    ec0c:	1c58      	adds	r0, r3, #1
    ec0e:	8008      	strh	r0, [r1, #0]
    ec10:	18d3      	adds	r3, r2, r3
    ec12:	687a      	ldr	r2, [r7, #4]
    ec14:	7952      	ldrb	r2, [r2, #5]
    ec16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
    ec18:	687b      	ldr	r3, [r7, #4]
    ec1a:	681a      	ldr	r2, [r3, #0]
    ec1c:	230e      	movs	r3, #14
    ec1e:	18fb      	adds	r3, r7, r3
    ec20:	881b      	ldrh	r3, [r3, #0]
    ec22:	210e      	movs	r1, #14
    ec24:	1879      	adds	r1, r7, r1
    ec26:	1c58      	adds	r0, r3, #1
    ec28:	8008      	strh	r0, [r1, #0]
    ec2a:	18d3      	adds	r3, r2, r3
    ec2c:	687a      	ldr	r2, [r7, #4]
    ec2e:	7992      	ldrb	r2, [r2, #6]
    ec30:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
    ec32:	687b      	ldr	r3, [r7, #4]
    ec34:	681a      	ldr	r2, [r3, #0]
    ec36:	230e      	movs	r3, #14
    ec38:	18fb      	adds	r3, r7, r3
    ec3a:	881b      	ldrh	r3, [r3, #0]
    ec3c:	18d0      	adds	r0, r2, r3
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	3307      	adds	r3, #7
    ec42:	2203      	movs	r2, #3
    ec44:	0019      	movs	r1, r3
    ec46:	4b40      	ldr	r3, [pc, #256]	; (ed48 <LoRaMacSerializerReJoinType0or2+0x178>)
    ec48:	4798      	blx	r3
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;
    ec4a:	230e      	movs	r3, #14
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	220e      	movs	r2, #14
    ec50:	18ba      	adds	r2, r7, r2
    ec52:	8812      	ldrh	r2, [r2, #0]
    ec54:	3203      	adds	r2, #3
    ec56:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
    ec58:	687b      	ldr	r3, [r7, #4]
    ec5a:	681a      	ldr	r2, [r3, #0]
    ec5c:	230e      	movs	r3, #14
    ec5e:	18fb      	adds	r3, r7, r3
    ec60:	881b      	ldrh	r3, [r3, #0]
    ec62:	18d0      	adds	r0, r2, r3
    ec64:	687b      	ldr	r3, [r7, #4]
    ec66:	330a      	adds	r3, #10
    ec68:	2208      	movs	r2, #8
    ec6a:	0019      	movs	r1, r3
    ec6c:	4b36      	ldr	r3, [pc, #216]	; (ed48 <LoRaMacSerializerReJoinType0or2+0x178>)
    ec6e:	4798      	blx	r3
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
    ec70:	230e      	movs	r3, #14
    ec72:	18fb      	adds	r3, r7, r3
    ec74:	220e      	movs	r2, #14
    ec76:	18ba      	adds	r2, r7, r2
    ec78:	8812      	ldrh	r2, [r2, #0]
    ec7a:	3208      	adds	r2, #8
    ec7c:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	681a      	ldr	r2, [r3, #0]
    ec82:	230e      	movs	r3, #14
    ec84:	18fb      	adds	r3, r7, r3
    ec86:	881b      	ldrh	r3, [r3, #0]
    ec88:	210e      	movs	r1, #14
    ec8a:	1879      	adds	r1, r7, r1
    ec8c:	1c58      	adds	r0, r3, #1
    ec8e:	8008      	strh	r0, [r1, #0]
    ec90:	18d3      	adds	r3, r2, r3
    ec92:	687a      	ldr	r2, [r7, #4]
    ec94:	8a52      	ldrh	r2, [r2, #18]
    ec96:	b2d2      	uxtb	r2, r2
    ec98:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	681a      	ldr	r2, [r3, #0]
    ec9e:	230e      	movs	r3, #14
    eca0:	18fb      	adds	r3, r7, r3
    eca2:	881b      	ldrh	r3, [r3, #0]
    eca4:	210e      	movs	r1, #14
    eca6:	1879      	adds	r1, r7, r1
    eca8:	1c58      	adds	r0, r3, #1
    ecaa:	8008      	strh	r0, [r1, #0]
    ecac:	18d3      	adds	r3, r2, r3
    ecae:	687a      	ldr	r2, [r7, #4]
    ecb0:	8a52      	ldrh	r2, [r2, #18]
    ecb2:	0a12      	lsrs	r2, r2, #8
    ecb4:	b292      	uxth	r2, r2
    ecb6:	b2d2      	uxtb	r2, r2
    ecb8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    ecba:	687b      	ldr	r3, [r7, #4]
    ecbc:	681a      	ldr	r2, [r3, #0]
    ecbe:	230e      	movs	r3, #14
    ecc0:	18fb      	adds	r3, r7, r3
    ecc2:	881b      	ldrh	r3, [r3, #0]
    ecc4:	210e      	movs	r1, #14
    ecc6:	1879      	adds	r1, r7, r1
    ecc8:	1c58      	adds	r0, r3, #1
    ecca:	8008      	strh	r0, [r1, #0]
    eccc:	18d2      	adds	r2, r2, r3
    ecce:	687b      	ldr	r3, [r7, #4]
    ecd0:	695b      	ldr	r3, [r3, #20]
    ecd2:	b2db      	uxtb	r3, r3
    ecd4:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    ecd6:	687b      	ldr	r3, [r7, #4]
    ecd8:	681a      	ldr	r2, [r3, #0]
    ecda:	230e      	movs	r3, #14
    ecdc:	18fb      	adds	r3, r7, r3
    ecde:	881b      	ldrh	r3, [r3, #0]
    ece0:	210e      	movs	r1, #14
    ece2:	1879      	adds	r1, r7, r1
    ece4:	1c58      	adds	r0, r3, #1
    ece6:	8008      	strh	r0, [r1, #0]
    ece8:	18d2      	adds	r2, r2, r3
    ecea:	687b      	ldr	r3, [r7, #4]
    ecec:	695b      	ldr	r3, [r3, #20]
    ecee:	0a1b      	lsrs	r3, r3, #8
    ecf0:	b2db      	uxtb	r3, r3
    ecf2:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    ecf4:	687b      	ldr	r3, [r7, #4]
    ecf6:	681a      	ldr	r2, [r3, #0]
    ecf8:	230e      	movs	r3, #14
    ecfa:	18fb      	adds	r3, r7, r3
    ecfc:	881b      	ldrh	r3, [r3, #0]
    ecfe:	210e      	movs	r1, #14
    ed00:	1879      	adds	r1, r7, r1
    ed02:	1c58      	adds	r0, r3, #1
    ed04:	8008      	strh	r0, [r1, #0]
    ed06:	18d2      	adds	r2, r2, r3
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	695b      	ldr	r3, [r3, #20]
    ed0c:	0c1b      	lsrs	r3, r3, #16
    ed0e:	b2db      	uxtb	r3, r3
    ed10:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    ed12:	687b      	ldr	r3, [r7, #4]
    ed14:	681a      	ldr	r2, [r3, #0]
    ed16:	230e      	movs	r3, #14
    ed18:	18fb      	adds	r3, r7, r3
    ed1a:	881b      	ldrh	r3, [r3, #0]
    ed1c:	210e      	movs	r1, #14
    ed1e:	1879      	adds	r1, r7, r1
    ed20:	1c58      	adds	r0, r3, #1
    ed22:	8008      	strh	r0, [r1, #0]
    ed24:	18d2      	adds	r2, r2, r3
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	695b      	ldr	r3, [r3, #20]
    ed2a:	0e1b      	lsrs	r3, r3, #24
    ed2c:	b2db      	uxtb	r3, r3
    ed2e:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    ed30:	230e      	movs	r3, #14
    ed32:	18fb      	adds	r3, r7, r3
    ed34:	881b      	ldrh	r3, [r3, #0]
    ed36:	b2da      	uxtb	r2, r3
    ed38:	687b      	ldr	r3, [r7, #4]
    ed3a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    ed3c:	2300      	movs	r3, #0
}
    ed3e:	0018      	movs	r0, r3
    ed40:	46bd      	mov	sp, r7
    ed42:	b004      	add	sp, #16
    ed44:	bd80      	pop	{r7, pc}
    ed46:	46c0      	nop			; (mov r8, r8)
    ed48:	0000298b 	.word	0x0000298b

0000ed4c <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    ed4c:	b580      	push	{r7, lr}
    ed4e:	b084      	sub	sp, #16
    ed50:	af00      	add	r7, sp, #0
    ed52:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    ed54:	687b      	ldr	r3, [r7, #4]
    ed56:	2b00      	cmp	r3, #0
    ed58:	d003      	beq.n	ed62 <LoRaMacSerializerData+0x16>
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	2b00      	cmp	r3, #0
    ed60:	d101      	bne.n	ed66 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
    ed62:	2301      	movs	r3, #1
    ed64:	e12c      	b.n	efc0 <LoRaMacSerializerData+0x274>
    }

    uint16_t bufItr = 0;
    ed66:	230e      	movs	r3, #14
    ed68:	18fb      	adds	r3, r7, r3
    ed6a:	2200      	movs	r2, #0
    ed6c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
    ed6e:	230c      	movs	r3, #12
    ed70:	18fb      	adds	r3, r7, r3
    ed72:	2208      	movs	r2, #8
    ed74:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
    ed76:	687b      	ldr	r3, [r7, #4]
    ed78:	2228      	movs	r2, #40	; 0x28
    ed7a:	5c9b      	ldrb	r3, [r3, r2]
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	d109      	bne.n	ed94 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	791b      	ldrb	r3, [r3, #4]
    ed84:	b29b      	uxth	r3, r3
    ed86:	220c      	movs	r2, #12
    ed88:	18ba      	adds	r2, r7, r2
    ed8a:	8812      	ldrh	r2, [r2, #0]
    ed8c:	429a      	cmp	r2, r3
    ed8e:	d916      	bls.n	edbe <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    ed90:	2302      	movs	r3, #2
    ed92:	e115      	b.n	efc0 <LoRaMacSerializerData+0x274>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
    ed94:	687b      	ldr	r3, [r7, #4]
    ed96:	791b      	ldrb	r3, [r3, #4]
    ed98:	0018      	movs	r0, r3
    ed9a:	230c      	movs	r3, #12
    ed9c:	18fb      	adds	r3, r7, r3
    ed9e:	881b      	ldrh	r3, [r3, #0]
    eda0:	687a      	ldr	r2, [r7, #4]
    eda2:	7b12      	ldrb	r2, [r2, #12]
    eda4:	0712      	lsls	r2, r2, #28
    eda6:	0f12      	lsrs	r2, r2, #28
    eda8:	b2d2      	uxtb	r2, r2
    edaa:	189b      	adds	r3, r3, r2
    edac:	687a      	ldr	r2, [r7, #4]
    edae:	2128      	movs	r1, #40	; 0x28
    edb0:	5c52      	ldrb	r2, [r2, r1]
    edb2:	189b      	adds	r3, r3, r2
    edb4:	3301      	adds	r3, #1
    edb6:	4298      	cmp	r0, r3
    edb8:	da01      	bge.n	edbe <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    edba:	2302      	movs	r3, #2
    edbc:	e100      	b.n	efc0 <LoRaMacSerializerData+0x274>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    edbe:	687b      	ldr	r3, [r7, #4]
    edc0:	681a      	ldr	r2, [r3, #0]
    edc2:	230e      	movs	r3, #14
    edc4:	18fb      	adds	r3, r7, r3
    edc6:	881b      	ldrh	r3, [r3, #0]
    edc8:	210e      	movs	r1, #14
    edca:	1879      	adds	r1, r7, r1
    edcc:	1c58      	adds	r0, r3, #1
    edce:	8008      	strh	r0, [r1, #0]
    edd0:	18d3      	adds	r3, r2, r3
    edd2:	687a      	ldr	r2, [r7, #4]
    edd4:	7952      	ldrb	r2, [r2, #5]
    edd6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
    edd8:	687b      	ldr	r3, [r7, #4]
    edda:	681a      	ldr	r2, [r3, #0]
    eddc:	230e      	movs	r3, #14
    edde:	18fb      	adds	r3, r7, r3
    ede0:	881b      	ldrh	r3, [r3, #0]
    ede2:	210e      	movs	r1, #14
    ede4:	1879      	adds	r1, r7, r1
    ede6:	1c58      	adds	r0, r3, #1
    ede8:	8008      	strh	r0, [r1, #0]
    edea:	18d2      	adds	r2, r2, r3
    edec:	687b      	ldr	r3, [r7, #4]
    edee:	689b      	ldr	r3, [r3, #8]
    edf0:	b2db      	uxtb	r3, r3
    edf2:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
    edf4:	687b      	ldr	r3, [r7, #4]
    edf6:	681a      	ldr	r2, [r3, #0]
    edf8:	230e      	movs	r3, #14
    edfa:	18fb      	adds	r3, r7, r3
    edfc:	881b      	ldrh	r3, [r3, #0]
    edfe:	210e      	movs	r1, #14
    ee00:	1879      	adds	r1, r7, r1
    ee02:	1c58      	adds	r0, r3, #1
    ee04:	8008      	strh	r0, [r1, #0]
    ee06:	18d2      	adds	r2, r2, r3
    ee08:	687b      	ldr	r3, [r7, #4]
    ee0a:	689b      	ldr	r3, [r3, #8]
    ee0c:	0a1b      	lsrs	r3, r3, #8
    ee0e:	b2db      	uxtb	r3, r3
    ee10:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	681a      	ldr	r2, [r3, #0]
    ee16:	230e      	movs	r3, #14
    ee18:	18fb      	adds	r3, r7, r3
    ee1a:	881b      	ldrh	r3, [r3, #0]
    ee1c:	210e      	movs	r1, #14
    ee1e:	1879      	adds	r1, r7, r1
    ee20:	1c58      	adds	r0, r3, #1
    ee22:	8008      	strh	r0, [r1, #0]
    ee24:	18d2      	adds	r2, r2, r3
    ee26:	687b      	ldr	r3, [r7, #4]
    ee28:	689b      	ldr	r3, [r3, #8]
    ee2a:	0c1b      	lsrs	r3, r3, #16
    ee2c:	b2db      	uxtb	r3, r3
    ee2e:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	681a      	ldr	r2, [r3, #0]
    ee34:	230e      	movs	r3, #14
    ee36:	18fb      	adds	r3, r7, r3
    ee38:	881b      	ldrh	r3, [r3, #0]
    ee3a:	210e      	movs	r1, #14
    ee3c:	1879      	adds	r1, r7, r1
    ee3e:	1c58      	adds	r0, r3, #1
    ee40:	8008      	strh	r0, [r1, #0]
    ee42:	18d2      	adds	r2, r2, r3
    ee44:	687b      	ldr	r3, [r7, #4]
    ee46:	689b      	ldr	r3, [r3, #8]
    ee48:	0e1b      	lsrs	r3, r3, #24
    ee4a:	b2db      	uxtb	r3, r3
    ee4c:	7013      	strb	r3, [r2, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	681a      	ldr	r2, [r3, #0]
    ee52:	230e      	movs	r3, #14
    ee54:	18fb      	adds	r3, r7, r3
    ee56:	881b      	ldrh	r3, [r3, #0]
    ee58:	210e      	movs	r1, #14
    ee5a:	1879      	adds	r1, r7, r1
    ee5c:	1c58      	adds	r0, r3, #1
    ee5e:	8008      	strh	r0, [r1, #0]
    ee60:	18d3      	adds	r3, r2, r3
    ee62:	687a      	ldr	r2, [r7, #4]
    ee64:	7b12      	ldrb	r2, [r2, #12]
    ee66:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    ee68:	687b      	ldr	r3, [r7, #4]
    ee6a:	681a      	ldr	r2, [r3, #0]
    ee6c:	230e      	movs	r3, #14
    ee6e:	18fb      	adds	r3, r7, r3
    ee70:	881b      	ldrh	r3, [r3, #0]
    ee72:	210e      	movs	r1, #14
    ee74:	1879      	adds	r1, r7, r1
    ee76:	1c58      	adds	r0, r3, #1
    ee78:	8008      	strh	r0, [r1, #0]
    ee7a:	18d3      	adds	r3, r2, r3
    ee7c:	687a      	ldr	r2, [r7, #4]
    ee7e:	89d2      	ldrh	r2, [r2, #14]
    ee80:	b2d2      	uxtb	r2, r2
    ee82:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
    ee84:	687b      	ldr	r3, [r7, #4]
    ee86:	681a      	ldr	r2, [r3, #0]
    ee88:	230e      	movs	r3, #14
    ee8a:	18fb      	adds	r3, r7, r3
    ee8c:	881b      	ldrh	r3, [r3, #0]
    ee8e:	210e      	movs	r1, #14
    ee90:	1879      	adds	r1, r7, r1
    ee92:	1c58      	adds	r0, r3, #1
    ee94:	8008      	strh	r0, [r1, #0]
    ee96:	18d3      	adds	r3, r2, r3
    ee98:	687a      	ldr	r2, [r7, #4]
    ee9a:	89d2      	ldrh	r2, [r2, #14]
    ee9c:	0a12      	lsrs	r2, r2, #8
    ee9e:	b292      	uxth	r2, r2
    eea0:	b2d2      	uxtb	r2, r2
    eea2:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
    eea4:	687b      	ldr	r3, [r7, #4]
    eea6:	681a      	ldr	r2, [r3, #0]
    eea8:	230e      	movs	r3, #14
    eeaa:	18fb      	adds	r3, r7, r3
    eeac:	881b      	ldrh	r3, [r3, #0]
    eeae:	18d0      	adds	r0, r2, r3
    eeb0:	687b      	ldr	r3, [r7, #4]
    eeb2:	3310      	adds	r3, #16
    eeb4:	0019      	movs	r1, r3
    eeb6:	687b      	ldr	r3, [r7, #4]
    eeb8:	7b1b      	ldrb	r3, [r3, #12]
    eeba:	071b      	lsls	r3, r3, #28
    eebc:	0f1b      	lsrs	r3, r3, #28
    eebe:	b2db      	uxtb	r3, r3
    eec0:	b29b      	uxth	r3, r3
    eec2:	001a      	movs	r2, r3
    eec4:	4b40      	ldr	r3, [pc, #256]	; (efc8 <LoRaMacSerializerData+0x27c>)
    eec6:	4798      	blx	r3
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
    eec8:	687b      	ldr	r3, [r7, #4]
    eeca:	7b1b      	ldrb	r3, [r3, #12]
    eecc:	071b      	lsls	r3, r3, #28
    eece:	0f1b      	lsrs	r3, r3, #28
    eed0:	b2db      	uxtb	r3, r3
    eed2:	b299      	uxth	r1, r3
    eed4:	230e      	movs	r3, #14
    eed6:	18fb      	adds	r3, r7, r3
    eed8:	220e      	movs	r2, #14
    eeda:	18ba      	adds	r2, r7, r2
    eedc:	8812      	ldrh	r2, [r2, #0]
    eede:	188a      	adds	r2, r1, r2
    eee0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
    eee2:	687b      	ldr	r3, [r7, #4]
    eee4:	2228      	movs	r2, #40	; 0x28
    eee6:	5c9b      	ldrb	r3, [r3, r2]
    eee8:	2b00      	cmp	r3, #0
    eeea:	d00d      	beq.n	ef08 <LoRaMacSerializerData+0x1bc>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	681a      	ldr	r2, [r3, #0]
    eef0:	230e      	movs	r3, #14
    eef2:	18fb      	adds	r3, r7, r3
    eef4:	881b      	ldrh	r3, [r3, #0]
    eef6:	210e      	movs	r1, #14
    eef8:	1879      	adds	r1, r7, r1
    eefa:	1c58      	adds	r0, r3, #1
    eefc:	8008      	strh	r0, [r1, #0]
    eefe:	18d3      	adds	r3, r2, r3
    ef00:	687a      	ldr	r2, [r7, #4]
    ef02:	2120      	movs	r1, #32
    ef04:	5c52      	ldrb	r2, [r2, r1]
    ef06:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
    ef08:	687b      	ldr	r3, [r7, #4]
    ef0a:	681a      	ldr	r2, [r3, #0]
    ef0c:	230e      	movs	r3, #14
    ef0e:	18fb      	adds	r3, r7, r3
    ef10:	881b      	ldrh	r3, [r3, #0]
    ef12:	18d0      	adds	r0, r2, r3
    ef14:	687b      	ldr	r3, [r7, #4]
    ef16:	6a59      	ldr	r1, [r3, #36]	; 0x24
    ef18:	687b      	ldr	r3, [r7, #4]
    ef1a:	2228      	movs	r2, #40	; 0x28
    ef1c:	5c9b      	ldrb	r3, [r3, r2]
    ef1e:	b29b      	uxth	r3, r3
    ef20:	001a      	movs	r2, r3
    ef22:	4b29      	ldr	r3, [pc, #164]	; (efc8 <LoRaMacSerializerData+0x27c>)
    ef24:	4798      	blx	r3
    bufItr = bufItr + macMsg->FRMPayloadSize;
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	2228      	movs	r2, #40	; 0x28
    ef2a:	5c9b      	ldrb	r3, [r3, r2]
    ef2c:	b299      	uxth	r1, r3
    ef2e:	230e      	movs	r3, #14
    ef30:	18fb      	adds	r3, r7, r3
    ef32:	220e      	movs	r2, #14
    ef34:	18ba      	adds	r2, r7, r2
    ef36:	8812      	ldrh	r2, [r2, #0]
    ef38:	188a      	adds	r2, r1, r2
    ef3a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
    ef3c:	687b      	ldr	r3, [r7, #4]
    ef3e:	681a      	ldr	r2, [r3, #0]
    ef40:	230e      	movs	r3, #14
    ef42:	18fb      	adds	r3, r7, r3
    ef44:	881b      	ldrh	r3, [r3, #0]
    ef46:	210e      	movs	r1, #14
    ef48:	1879      	adds	r1, r7, r1
    ef4a:	1c58      	adds	r0, r3, #1
    ef4c:	8008      	strh	r0, [r1, #0]
    ef4e:	18d2      	adds	r2, r2, r3
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef54:	b2db      	uxtb	r3, r3
    ef56:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
    ef58:	687b      	ldr	r3, [r7, #4]
    ef5a:	681a      	ldr	r2, [r3, #0]
    ef5c:	230e      	movs	r3, #14
    ef5e:	18fb      	adds	r3, r7, r3
    ef60:	881b      	ldrh	r3, [r3, #0]
    ef62:	210e      	movs	r1, #14
    ef64:	1879      	adds	r1, r7, r1
    ef66:	1c58      	adds	r0, r3, #1
    ef68:	8008      	strh	r0, [r1, #0]
    ef6a:	18d2      	adds	r2, r2, r3
    ef6c:	687b      	ldr	r3, [r7, #4]
    ef6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef70:	0a1b      	lsrs	r3, r3, #8
    ef72:	b2db      	uxtb	r3, r3
    ef74:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    ef76:	687b      	ldr	r3, [r7, #4]
    ef78:	681a      	ldr	r2, [r3, #0]
    ef7a:	230e      	movs	r3, #14
    ef7c:	18fb      	adds	r3, r7, r3
    ef7e:	881b      	ldrh	r3, [r3, #0]
    ef80:	210e      	movs	r1, #14
    ef82:	1879      	adds	r1, r7, r1
    ef84:	1c58      	adds	r0, r3, #1
    ef86:	8008      	strh	r0, [r1, #0]
    ef88:	18d2      	adds	r2, r2, r3
    ef8a:	687b      	ldr	r3, [r7, #4]
    ef8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef8e:	0c1b      	lsrs	r3, r3, #16
    ef90:	b2db      	uxtb	r3, r3
    ef92:	7013      	strb	r3, [r2, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
    ef94:	687b      	ldr	r3, [r7, #4]
    ef96:	681a      	ldr	r2, [r3, #0]
    ef98:	230e      	movs	r3, #14
    ef9a:	18fb      	adds	r3, r7, r3
    ef9c:	881b      	ldrh	r3, [r3, #0]
    ef9e:	210e      	movs	r1, #14
    efa0:	1879      	adds	r1, r7, r1
    efa2:	1c58      	adds	r0, r3, #1
    efa4:	8008      	strh	r0, [r1, #0]
    efa6:	18d2      	adds	r2, r2, r3
    efa8:	687b      	ldr	r3, [r7, #4]
    efaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    efac:	0e1b      	lsrs	r3, r3, #24
    efae:	b2db      	uxtb	r3, r3
    efb0:	7013      	strb	r3, [r2, #0]

    macMsg->BufSize = bufItr;
    efb2:	230e      	movs	r3, #14
    efb4:	18fb      	adds	r3, r7, r3
    efb6:	881b      	ldrh	r3, [r3, #0]
    efb8:	b2da      	uxtb	r2, r3
    efba:	687b      	ldr	r3, [r7, #4]
    efbc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
    efbe:	2300      	movs	r3, #0
}
    efc0:	0018      	movs	r0, r3
    efc2:	46bd      	mov	sp, r7
    efc4:	b004      	add	sp, #16
    efc6:	bd80      	pop	{r7, pc}
    efc8:	00002955 	.word	0x00002955

0000efcc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    efcc:	b580      	push	{r7, lr}
    efce:	b082      	sub	sp, #8
    efd0:	af00      	add	r7, sp, #0
    efd2:	0002      	movs	r2, r0
    efd4:	1dfb      	adds	r3, r7, #7
    efd6:	701a      	strb	r2, [r3, #0]
    switch( region )
    efd8:	1dfb      	adds	r3, r7, #7
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	2b05      	cmp	r3, #5
    efde:	d101      	bne.n	efe4 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
    efe0:	2301      	movs	r3, #1
    efe2:	e000      	b.n	efe6 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
    efe4:	2300      	movs	r3, #0
        }
    }
}
    efe6:	0018      	movs	r0, r3
    efe8:	46bd      	mov	sp, r7
    efea:	b002      	add	sp, #8
    efec:	bd80      	pop	{r7, pc}
	...

0000eff0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    eff0:	b580      	push	{r7, lr}
    eff2:	b084      	sub	sp, #16
    eff4:	af00      	add	r7, sp, #0
    eff6:	0002      	movs	r2, r0
    eff8:	6039      	str	r1, [r7, #0]
    effa:	1dfb      	adds	r3, r7, #7
    effc:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
    effe:	2308      	movs	r3, #8
    f000:	18fb      	adds	r3, r7, r3
    f002:	2200      	movs	r2, #0
    f004:	601a      	str	r2, [r3, #0]
    switch( region )
    f006:	1dfb      	adds	r3, r7, #7
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	2b05      	cmp	r3, #5
    f00c:	d109      	bne.n	f022 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
    f00e:	683b      	ldr	r3, [r7, #0]
    f010:	0018      	movs	r0, r3
    f012:	4b0b      	ldr	r3, [pc, #44]	; (f040 <RegionGetPhyParam+0x50>)
    f014:	4798      	blx	r3
    f016:	0003      	movs	r3, r0
    f018:	001a      	movs	r2, r3
    f01a:	230c      	movs	r3, #12
    f01c:	18fb      	adds	r3, r7, r3
    f01e:	601a      	str	r2, [r3, #0]
    f020:	e005      	b.n	f02e <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
    f022:	230c      	movs	r3, #12
    f024:	18fb      	adds	r3, r7, r3
    f026:	2208      	movs	r2, #8
    f028:	18ba      	adds	r2, r7, r2
    f02a:	6812      	ldr	r2, [r2, #0]
    f02c:	601a      	str	r2, [r3, #0]
    f02e:	230c      	movs	r3, #12
    f030:	18fb      	adds	r3, r7, r3
    f032:	2200      	movs	r2, #0
    f034:	681a      	ldr	r2, [r3, #0]
    f036:	0013      	movs	r3, r2
        }
    }
}
    f038:	0018      	movs	r0, r3
    f03a:	46bd      	mov	sp, r7
    f03c:	b004      	add	sp, #16
    f03e:	bd80      	pop	{r7, pc}
    f040:	00010435 	.word	0x00010435

0000f044 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    f044:	b580      	push	{r7, lr}
    f046:	b082      	sub	sp, #8
    f048:	af00      	add	r7, sp, #0
    f04a:	0002      	movs	r2, r0
    f04c:	6039      	str	r1, [r7, #0]
    f04e:	1dfb      	adds	r3, r7, #7
    f050:	701a      	strb	r2, [r3, #0]
    switch( region )
    f052:	1dfb      	adds	r3, r7, #7
    f054:	781b      	ldrb	r3, [r3, #0]
    f056:	2b05      	cmp	r3, #5
    f058:	d000      	beq.n	f05c <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
    f05a:	e004      	b.n	f066 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
    f05c:	683b      	ldr	r3, [r7, #0]
    f05e:	0018      	movs	r0, r3
    f060:	4b02      	ldr	r3, [pc, #8]	; (f06c <RegionSetBandTxDone+0x28>)
    f062:	4798      	blx	r3
    f064:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f066:	46bd      	mov	sp, r7
    f068:	b002      	add	sp, #8
    f06a:	bd80      	pop	{r7, pc}
    f06c:	00010649 	.word	0x00010649

0000f070 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    f070:	b580      	push	{r7, lr}
    f072:	b082      	sub	sp, #8
    f074:	af00      	add	r7, sp, #0
    f076:	0002      	movs	r2, r0
    f078:	6039      	str	r1, [r7, #0]
    f07a:	1dfb      	adds	r3, r7, #7
    f07c:	701a      	strb	r2, [r3, #0]
    switch( region )
    f07e:	1dfb      	adds	r3, r7, #7
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	2b05      	cmp	r3, #5
    f084:	d000      	beq.n	f088 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
    f086:	e004      	b.n	f092 <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
    f088:	683b      	ldr	r3, [r7, #0]
    f08a:	0018      	movs	r0, r3
    f08c:	4b03      	ldr	r3, [pc, #12]	; (f09c <RegionInitDefaults+0x2c>)
    f08e:	4798      	blx	r3
    f090:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f092:	46c0      	nop			; (mov r8, r8)
    f094:	46bd      	mov	sp, r7
    f096:	b002      	add	sp, #8
    f098:	bd80      	pop	{r7, pc}
    f09a:	46c0      	nop			; (mov r8, r8)
    f09c:	0001068d 	.word	0x0001068d

0000f0a0 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    f0a0:	b580      	push	{r7, lr}
    f0a2:	b082      	sub	sp, #8
    f0a4:	af00      	add	r7, sp, #0
    f0a6:	0002      	movs	r2, r0
    f0a8:	6039      	str	r1, [r7, #0]
    f0aa:	1dfb      	adds	r3, r7, #7
    f0ac:	701a      	strb	r2, [r3, #0]
    switch( region )
    f0ae:	1dfb      	adds	r3, r7, #7
    f0b0:	781b      	ldrb	r3, [r3, #0]
    f0b2:	2b05      	cmp	r3, #5
    f0b4:	d105      	bne.n	f0c2 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
    f0b6:	683b      	ldr	r3, [r7, #0]
    f0b8:	0018      	movs	r0, r3
    f0ba:	4b04      	ldr	r3, [pc, #16]	; (f0cc <RegionGetNvmCtx+0x2c>)
    f0bc:	4798      	blx	r3
    f0be:	0003      	movs	r3, r0
    f0c0:	e000      	b.n	f0c4 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
    f0c2:	2300      	movs	r3, #0
        }
    }
}
    f0c4:	0018      	movs	r0, r3
    f0c6:	46bd      	mov	sp, r7
    f0c8:	b002      	add	sp, #8
    f0ca:	bd80      	pop	{r7, pc}
    f0cc:	00010791 	.word	0x00010791

0000f0d0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    f0d0:	b580      	push	{r7, lr}
    f0d2:	b082      	sub	sp, #8
    f0d4:	af00      	add	r7, sp, #0
    f0d6:	6039      	str	r1, [r7, #0]
    f0d8:	0011      	movs	r1, r2
    f0da:	1dfb      	adds	r3, r7, #7
    f0dc:	1c02      	adds	r2, r0, #0
    f0de:	701a      	strb	r2, [r3, #0]
    f0e0:	1dbb      	adds	r3, r7, #6
    f0e2:	1c0a      	adds	r2, r1, #0
    f0e4:	701a      	strb	r2, [r3, #0]
    switch( region )
    f0e6:	1dfb      	adds	r3, r7, #7
    f0e8:	781b      	ldrb	r3, [r3, #0]
    f0ea:	2b05      	cmp	r3, #5
    f0ec:	d108      	bne.n	f100 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
    f0ee:	1dbb      	adds	r3, r7, #6
    f0f0:	781a      	ldrb	r2, [r3, #0]
    f0f2:	683b      	ldr	r3, [r7, #0]
    f0f4:	0011      	movs	r1, r2
    f0f6:	0018      	movs	r0, r3
    f0f8:	4b04      	ldr	r3, [pc, #16]	; (f10c <RegionVerify+0x3c>)
    f0fa:	4798      	blx	r3
    f0fc:	0003      	movs	r3, r0
    f0fe:	e000      	b.n	f102 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
    f100:	2300      	movs	r3, #0
        }
    }
}
    f102:	0018      	movs	r0, r3
    f104:	46bd      	mov	sp, r7
    f106:	b002      	add	sp, #8
    f108:	bd80      	pop	{r7, pc}
    f10a:	46c0      	nop			; (mov r8, r8)
    f10c:	000107b1 	.word	0x000107b1

0000f110 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    f110:	b580      	push	{r7, lr}
    f112:	b082      	sub	sp, #8
    f114:	af00      	add	r7, sp, #0
    f116:	0002      	movs	r2, r0
    f118:	6039      	str	r1, [r7, #0]
    f11a:	1dfb      	adds	r3, r7, #7
    f11c:	701a      	strb	r2, [r3, #0]
    switch( region )
    f11e:	1dfb      	adds	r3, r7, #7
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	2b05      	cmp	r3, #5
    f124:	d000      	beq.n	f128 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
    f126:	e004      	b.n	f132 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
    f128:	683b      	ldr	r3, [r7, #0]
    f12a:	0018      	movs	r0, r3
    f12c:	4b03      	ldr	r3, [pc, #12]	; (f13c <RegionApplyCFList+0x2c>)
    f12e:	4798      	blx	r3
    f130:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f132:	46c0      	nop			; (mov r8, r8)
    f134:	46bd      	mov	sp, r7
    f136:	b002      	add	sp, #8
    f138:	bd80      	pop	{r7, pc}
    f13a:	46c0      	nop			; (mov r8, r8)
    f13c:	00010851 	.word	0x00010851

0000f140 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    f140:	b580      	push	{r7, lr}
    f142:	b082      	sub	sp, #8
    f144:	af00      	add	r7, sp, #0
    f146:	0002      	movs	r2, r0
    f148:	6039      	str	r1, [r7, #0]
    f14a:	1dfb      	adds	r3, r7, #7
    f14c:	701a      	strb	r2, [r3, #0]
    switch( region )
    f14e:	1dfb      	adds	r3, r7, #7
    f150:	781b      	ldrb	r3, [r3, #0]
    f152:	2b05      	cmp	r3, #5
    f154:	d105      	bne.n	f162 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
    f156:	683b      	ldr	r3, [r7, #0]
    f158:	0018      	movs	r0, r3
    f15a:	4b04      	ldr	r3, [pc, #16]	; (f16c <RegionChanMaskSet+0x2c>)
    f15c:	4798      	blx	r3
    f15e:	0003      	movs	r3, r0
    f160:	e000      	b.n	f164 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
    f162:	2300      	movs	r3, #0
        }
    }
}
    f164:	0018      	movs	r0, r3
    f166:	46bd      	mov	sp, r7
    f168:	b002      	add	sp, #8
    f16a:	bd80      	pop	{r7, pc}
    f16c:	0001099d 	.word	0x0001099d

0000f170 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    f170:	b590      	push	{r4, r7, lr}
    f172:	b083      	sub	sp, #12
    f174:	af00      	add	r7, sp, #0
    f176:	0004      	movs	r4, r0
    f178:	0008      	movs	r0, r1
    f17a:	0011      	movs	r1, r2
    f17c:	603b      	str	r3, [r7, #0]
    f17e:	1dfb      	adds	r3, r7, #7
    f180:	1c22      	adds	r2, r4, #0
    f182:	701a      	strb	r2, [r3, #0]
    f184:	1dbb      	adds	r3, r7, #6
    f186:	1c02      	adds	r2, r0, #0
    f188:	701a      	strb	r2, [r3, #0]
    f18a:	1d7b      	adds	r3, r7, #5
    f18c:	1c0a      	adds	r2, r1, #0
    f18e:	701a      	strb	r2, [r3, #0]
    switch( region )
    f190:	1dfb      	adds	r3, r7, #7
    f192:	781b      	ldrb	r3, [r3, #0]
    f194:	2b05      	cmp	r3, #5
    f196:	d000      	beq.n	f19a <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
    f198:	e00a      	b.n	f1b0 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
    f19a:	69bc      	ldr	r4, [r7, #24]
    f19c:	683a      	ldr	r2, [r7, #0]
    f19e:	1d7b      	adds	r3, r7, #5
    f1a0:	7819      	ldrb	r1, [r3, #0]
    f1a2:	1dbb      	adds	r3, r7, #6
    f1a4:	2000      	movs	r0, #0
    f1a6:	5618      	ldrsb	r0, [r3, r0]
    f1a8:	0023      	movs	r3, r4
    f1aa:	4c03      	ldr	r4, [pc, #12]	; (f1b8 <RegionComputeRxWindowParameters+0x48>)
    f1ac:	47a0      	blx	r4
    f1ae:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f1b0:	46c0      	nop			; (mov r8, r8)
    f1b2:	46bd      	mov	sp, r7
    f1b4:	b003      	add	sp, #12
    f1b6:	bd90      	pop	{r4, r7, pc}
    f1b8:	000109ed 	.word	0x000109ed

0000f1bc <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    f1bc:	b580      	push	{r7, lr}
    f1be:	b084      	sub	sp, #16
    f1c0:	af00      	add	r7, sp, #0
    f1c2:	60b9      	str	r1, [r7, #8]
    f1c4:	607a      	str	r2, [r7, #4]
    f1c6:	230f      	movs	r3, #15
    f1c8:	18fb      	adds	r3, r7, r3
    f1ca:	1c02      	adds	r2, r0, #0
    f1cc:	701a      	strb	r2, [r3, #0]
    switch( region )
    f1ce:	230f      	movs	r3, #15
    f1d0:	18fb      	adds	r3, r7, r3
    f1d2:	781b      	ldrb	r3, [r3, #0]
    f1d4:	2b05      	cmp	r3, #5
    f1d6:	d107      	bne.n	f1e8 <RegionRxConfig+0x2c>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
    f1d8:	687a      	ldr	r2, [r7, #4]
    f1da:	68bb      	ldr	r3, [r7, #8]
    f1dc:	0011      	movs	r1, r2
    f1de:	0018      	movs	r0, r3
    f1e0:	4b04      	ldr	r3, [pc, #16]	; (f1f4 <RegionRxConfig+0x38>)
    f1e2:	4798      	blx	r3
    f1e4:	0003      	movs	r3, r0
    f1e6:	e000      	b.n	f1ea <RegionRxConfig+0x2e>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
    f1e8:	2300      	movs	r3, #0
        }
    }
}
    f1ea:	0018      	movs	r0, r3
    f1ec:	46bd      	mov	sp, r7
    f1ee:	b004      	add	sp, #16
    f1f0:	bd80      	pop	{r7, pc}
    f1f2:	46c0      	nop			; (mov r8, r8)
    f1f4:	00010ad5 	.word	0x00010ad5

0000f1f8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    f1f8:	b580      	push	{r7, lr}
    f1fa:	b084      	sub	sp, #16
    f1fc:	af00      	add	r7, sp, #0
    f1fe:	60b9      	str	r1, [r7, #8]
    f200:	607a      	str	r2, [r7, #4]
    f202:	603b      	str	r3, [r7, #0]
    f204:	230f      	movs	r3, #15
    f206:	18fb      	adds	r3, r7, r3
    f208:	1c02      	adds	r2, r0, #0
    f20a:	701a      	strb	r2, [r3, #0]
    switch( region )
    f20c:	230f      	movs	r3, #15
    f20e:	18fb      	adds	r3, r7, r3
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	2b05      	cmp	r3, #5
    f214:	d107      	bne.n	f226 <RegionTxConfig+0x2e>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
    f216:	683a      	ldr	r2, [r7, #0]
    f218:	6879      	ldr	r1, [r7, #4]
    f21a:	68bb      	ldr	r3, [r7, #8]
    f21c:	0018      	movs	r0, r3
    f21e:	4b04      	ldr	r3, [pc, #16]	; (f230 <RegionTxConfig+0x38>)
    f220:	4798      	blx	r3
    f222:	0003      	movs	r3, r0
    f224:	e000      	b.n	f228 <RegionTxConfig+0x30>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
    f226:	2300      	movs	r3, #0
        }
    }
}
    f228:	0018      	movs	r0, r3
    f22a:	46bd      	mov	sp, r7
    f22c:	b004      	add	sp, #16
    f22e:	bd80      	pop	{r7, pc}
    f230:	00010cad 	.word	0x00010cad

0000f234 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    f234:	b590      	push	{r4, r7, lr}
    f236:	b087      	sub	sp, #28
    f238:	af02      	add	r7, sp, #8
    f23a:	60b9      	str	r1, [r7, #8]
    f23c:	607a      	str	r2, [r7, #4]
    f23e:	603b      	str	r3, [r7, #0]
    f240:	230f      	movs	r3, #15
    f242:	18fb      	adds	r3, r7, r3
    f244:	1c02      	adds	r2, r0, #0
    f246:	701a      	strb	r2, [r3, #0]
    switch( region )
    f248:	230f      	movs	r3, #15
    f24a:	18fb      	adds	r3, r7, r3
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	2b05      	cmp	r3, #5
    f250:	d10a      	bne.n	f268 <RegionLinkAdrReq+0x34>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
    f252:	6a3c      	ldr	r4, [r7, #32]
    f254:	683a      	ldr	r2, [r7, #0]
    f256:	6879      	ldr	r1, [r7, #4]
    f258:	68b8      	ldr	r0, [r7, #8]
    f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f25c:	9300      	str	r3, [sp, #0]
    f25e:	0023      	movs	r3, r4
    f260:	4c04      	ldr	r4, [pc, #16]	; (f274 <RegionLinkAdrReq+0x40>)
    f262:	47a0      	blx	r4
    f264:	0003      	movs	r3, r0
    f266:	e000      	b.n	f26a <RegionLinkAdrReq+0x36>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
    f268:	2300      	movs	r3, #0
        }
    }
}
    f26a:	0018      	movs	r0, r3
    f26c:	46bd      	mov	sp, r7
    f26e:	b005      	add	sp, #20
    f270:	bd90      	pop	{r4, r7, pc}
    f272:	46c0      	nop			; (mov r8, r8)
    f274:	00010e6d 	.word	0x00010e6d

0000f278 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    f278:	b580      	push	{r7, lr}
    f27a:	b082      	sub	sp, #8
    f27c:	af00      	add	r7, sp, #0
    f27e:	0002      	movs	r2, r0
    f280:	6039      	str	r1, [r7, #0]
    f282:	1dfb      	adds	r3, r7, #7
    f284:	701a      	strb	r2, [r3, #0]
    switch( region )
    f286:	1dfb      	adds	r3, r7, #7
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	2b05      	cmp	r3, #5
    f28c:	d105      	bne.n	f29a <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
    f28e:	683b      	ldr	r3, [r7, #0]
    f290:	0018      	movs	r0, r3
    f292:	4b04      	ldr	r3, [pc, #16]	; (f2a4 <RegionRxParamSetupReq+0x2c>)
    f294:	4798      	blx	r3
    f296:	0003      	movs	r3, r0
    f298:	e000      	b.n	f29c <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
    f29a:	2300      	movs	r3, #0
        }
    }
}
    f29c:	0018      	movs	r0, r3
    f29e:	46bd      	mov	sp, r7
    f2a0:	b002      	add	sp, #8
    f2a2:	bd80      	pop	{r7, pc}
    f2a4:	00011169 	.word	0x00011169

0000f2a8 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    f2a8:	b580      	push	{r7, lr}
    f2aa:	b082      	sub	sp, #8
    f2ac:	af00      	add	r7, sp, #0
    f2ae:	0002      	movs	r2, r0
    f2b0:	6039      	str	r1, [r7, #0]
    f2b2:	1dfb      	adds	r3, r7, #7
    f2b4:	701a      	strb	r2, [r3, #0]
    switch( region )
    f2b6:	1dfb      	adds	r3, r7, #7
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	2b05      	cmp	r3, #5
    f2bc:	d105      	bne.n	f2ca <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
    f2be:	683b      	ldr	r3, [r7, #0]
    f2c0:	0018      	movs	r0, r3
    f2c2:	4b04      	ldr	r3, [pc, #16]	; (f2d4 <RegionNewChannelReq+0x2c>)
    f2c4:	4798      	blx	r3
    f2c6:	0003      	movs	r3, r0
    f2c8:	e000      	b.n	f2cc <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
    f2ca:	2300      	movs	r3, #0
        }
    }
}
    f2cc:	0018      	movs	r0, r3
    f2ce:	46bd      	mov	sp, r7
    f2d0:	b002      	add	sp, #8
    f2d2:	bd80      	pop	{r7, pc}
    f2d4:	0001120d 	.word	0x0001120d

0000f2d8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    f2d8:	b580      	push	{r7, lr}
    f2da:	b082      	sub	sp, #8
    f2dc:	af00      	add	r7, sp, #0
    f2de:	0002      	movs	r2, r0
    f2e0:	6039      	str	r1, [r7, #0]
    f2e2:	1dfb      	adds	r3, r7, #7
    f2e4:	701a      	strb	r2, [r3, #0]
    switch( region )
    f2e6:	1dfb      	adds	r3, r7, #7
    f2e8:	781b      	ldrb	r3, [r3, #0]
    f2ea:	2b05      	cmp	r3, #5
    f2ec:	d105      	bne.n	f2fa <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
    f2ee:	683b      	ldr	r3, [r7, #0]
    f2f0:	0018      	movs	r0, r3
    f2f2:	4b04      	ldr	r3, [pc, #16]	; (f304 <RegionTxParamSetupReq+0x2c>)
    f2f4:	4798      	blx	r3
    f2f6:	0003      	movs	r3, r0
    f2f8:	e000      	b.n	f2fc <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
    f2fa:	2300      	movs	r3, #0
        }
    }
}
    f2fc:	0018      	movs	r0, r3
    f2fe:	46bd      	mov	sp, r7
    f300:	b002      	add	sp, #8
    f302:	bd80      	pop	{r7, pc}
    f304:	000112f9 	.word	0x000112f9

0000f308 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    f308:	b580      	push	{r7, lr}
    f30a:	b082      	sub	sp, #8
    f30c:	af00      	add	r7, sp, #0
    f30e:	0002      	movs	r2, r0
    f310:	6039      	str	r1, [r7, #0]
    f312:	1dfb      	adds	r3, r7, #7
    f314:	701a      	strb	r2, [r3, #0]
    switch( region )
    f316:	1dfb      	adds	r3, r7, #7
    f318:	781b      	ldrb	r3, [r3, #0]
    f31a:	2b05      	cmp	r3, #5
    f31c:	d105      	bne.n	f32a <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
    f31e:	683b      	ldr	r3, [r7, #0]
    f320:	0018      	movs	r0, r3
    f322:	4b04      	ldr	r3, [pc, #16]	; (f334 <RegionDlChannelReq+0x2c>)
    f324:	4798      	blx	r3
    f326:	0003      	movs	r3, r0
    f328:	e000      	b.n	f32c <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
    f32a:	2300      	movs	r3, #0
        }
    }
}
    f32c:	0018      	movs	r0, r3
    f32e:	46bd      	mov	sp, r7
    f330:	b002      	add	sp, #8
    f332:	bd80      	pop	{r7, pc}
    f334:	0001130d 	.word	0x0001130d

0000f338 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    f338:	b590      	push	{r4, r7, lr}
    f33a:	b083      	sub	sp, #12
    f33c:	af00      	add	r7, sp, #0
    f33e:	0004      	movs	r4, r0
    f340:	0008      	movs	r0, r1
    f342:	0011      	movs	r1, r2
    f344:	1dfb      	adds	r3, r7, #7
    f346:	1c22      	adds	r2, r4, #0
    f348:	701a      	strb	r2, [r3, #0]
    f34a:	1dbb      	adds	r3, r7, #6
    f34c:	1c02      	adds	r2, r0, #0
    f34e:	701a      	strb	r2, [r3, #0]
    f350:	1d7b      	adds	r3, r7, #5
    f352:	1c0a      	adds	r2, r1, #0
    f354:	701a      	strb	r2, [r3, #0]
    switch( region )
    f356:	1dfb      	adds	r3, r7, #7
    f358:	781b      	ldrb	r3, [r3, #0]
    f35a:	2b05      	cmp	r3, #5
    f35c:	d10a      	bne.n	f374 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
    f35e:	1d7b      	adds	r3, r7, #5
    f360:	781a      	ldrb	r2, [r3, #0]
    f362:	1dbb      	adds	r3, r7, #6
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	b25b      	sxtb	r3, r3
    f368:	0011      	movs	r1, r2
    f36a:	0018      	movs	r0, r3
    f36c:	4b04      	ldr	r3, [pc, #16]	; (f380 <RegionAlternateDr+0x48>)
    f36e:	4798      	blx	r3
    f370:	0003      	movs	r3, r0
    f372:	e000      	b.n	f376 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
    f374:	2300      	movs	r3, #0
        }
    }
}
    f376:	0018      	movs	r0, r3
    f378:	46bd      	mov	sp, r7
    f37a:	b003      	add	sp, #12
    f37c:	bd90      	pop	{r4, r7, pc}
    f37e:	46c0      	nop			; (mov r8, r8)
    f380:	000113b5 	.word	0x000113b5

0000f384 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    f384:	b580      	push	{r7, lr}
    f386:	b082      	sub	sp, #8
    f388:	af00      	add	r7, sp, #0
    f38a:	0002      	movs	r2, r0
    f38c:	6039      	str	r1, [r7, #0]
    f38e:	1dfb      	adds	r3, r7, #7
    f390:	701a      	strb	r2, [r3, #0]
    switch( region )
    f392:	1dfb      	adds	r3, r7, #7
    f394:	781b      	ldrb	r3, [r3, #0]
    f396:	2b05      	cmp	r3, #5
    f398:	d000      	beq.n	f39c <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
    f39a:	e004      	b.n	f3a6 <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
    f39c:	683b      	ldr	r3, [r7, #0]
    f39e:	0018      	movs	r0, r3
    f3a0:	4b03      	ldr	r3, [pc, #12]	; (f3b0 <RegionCalcBackOff+0x2c>)
    f3a2:	4798      	blx	r3
    f3a4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f3a6:	46c0      	nop			; (mov r8, r8)
    f3a8:	46bd      	mov	sp, r7
    f3aa:	b002      	add	sp, #8
    f3ac:	bd80      	pop	{r7, pc}
    f3ae:	46c0      	nop			; (mov r8, r8)
    f3b0:	000113d5 	.word	0x000113d5

0000f3b4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    f3b4:	b590      	push	{r4, r7, lr}
    f3b6:	b085      	sub	sp, #20
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	60b9      	str	r1, [r7, #8]
    f3bc:	607a      	str	r2, [r7, #4]
    f3be:	603b      	str	r3, [r7, #0]
    f3c0:	230f      	movs	r3, #15
    f3c2:	18fb      	adds	r3, r7, r3
    f3c4:	1c02      	adds	r2, r0, #0
    f3c6:	701a      	strb	r2, [r3, #0]
    switch( region )
    f3c8:	230f      	movs	r3, #15
    f3ca:	18fb      	adds	r3, r7, r3
    f3cc:	781b      	ldrb	r3, [r3, #0]
    f3ce:	2b05      	cmp	r3, #5
    f3d0:	d107      	bne.n	f3e2 <RegionNextChannel+0x2e>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
    f3d2:	6a3b      	ldr	r3, [r7, #32]
    f3d4:	683a      	ldr	r2, [r7, #0]
    f3d6:	6879      	ldr	r1, [r7, #4]
    f3d8:	68b8      	ldr	r0, [r7, #8]
    f3da:	4c04      	ldr	r4, [pc, #16]	; (f3ec <RegionNextChannel+0x38>)
    f3dc:	47a0      	blx	r4
    f3de:	0003      	movs	r3, r0
    f3e0:	e000      	b.n	f3e4 <RegionNextChannel+0x30>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    f3e2:	2309      	movs	r3, #9
        }
    }
}
    f3e4:	0018      	movs	r0, r3
    f3e6:	46bd      	mov	sp, r7
    f3e8:	b005      	add	sp, #20
    f3ea:	bd90      	pop	{r4, r7, pc}
    f3ec:	0001144d 	.word	0x0001144d

0000f3f0 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    f3f0:	b580      	push	{r7, lr}
    f3f2:	b082      	sub	sp, #8
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	0002      	movs	r2, r0
    f3f8:	6039      	str	r1, [r7, #0]
    f3fa:	1dfb      	adds	r3, r7, #7
    f3fc:	701a      	strb	r2, [r3, #0]
    switch( region )
    f3fe:	1dfb      	adds	r3, r7, #7
    f400:	781b      	ldrb	r3, [r3, #0]
    f402:	2b05      	cmp	r3, #5
    f404:	d000      	beq.n	f408 <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
    f406:	e004      	b.n	f412 <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
    f408:	683b      	ldr	r3, [r7, #0]
    f40a:	0018      	movs	r0, r3
    f40c:	4b03      	ldr	r3, [pc, #12]	; (f41c <RegionSetContinuousWave+0x2c>)
    f40e:	4798      	blx	r3
    f410:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    f412:	46c0      	nop			; (mov r8, r8)
    f414:	46bd      	mov	sp, r7
    f416:	b002      	add	sp, #8
    f418:	bd80      	pop	{r7, pc}
    f41a:	46c0      	nop			; (mov r8, r8)
    f41c:	000117b9 	.word	0x000117b9

0000f420 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    f420:	b5b0      	push	{r4, r5, r7, lr}
    f422:	b082      	sub	sp, #8
    f424:	af00      	add	r7, sp, #0
    f426:	0005      	movs	r5, r0
    f428:	000c      	movs	r4, r1
    f42a:	0010      	movs	r0, r2
    f42c:	0019      	movs	r1, r3
    f42e:	1dfb      	adds	r3, r7, #7
    f430:	1c2a      	adds	r2, r5, #0
    f432:	701a      	strb	r2, [r3, #0]
    f434:	1dbb      	adds	r3, r7, #6
    f436:	1c22      	adds	r2, r4, #0
    f438:	701a      	strb	r2, [r3, #0]
    f43a:	1d7b      	adds	r3, r7, #5
    f43c:	1c02      	adds	r2, r0, #0
    f43e:	701a      	strb	r2, [r3, #0]
    f440:	1d3b      	adds	r3, r7, #4
    f442:	1c0a      	adds	r2, r1, #0
    f444:	701a      	strb	r2, [r3, #0]
    switch( region )
    f446:	1dfb      	adds	r3, r7, #7
    f448:	781b      	ldrb	r3, [r3, #0]
    f44a:	2b05      	cmp	r3, #5
    f44c:	d10c      	bne.n	f468 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
    f44e:	1d3b      	adds	r3, r7, #4
    f450:	2200      	movs	r2, #0
    f452:	569a      	ldrsb	r2, [r3, r2]
    f454:	1d7b      	adds	r3, r7, #5
    f456:	2100      	movs	r1, #0
    f458:	5659      	ldrsb	r1, [r3, r1]
    f45a:	1dbb      	adds	r3, r7, #6
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	0018      	movs	r0, r3
    f460:	4b04      	ldr	r3, [pc, #16]	; (f474 <RegionApplyDrOffset+0x54>)
    f462:	4798      	blx	r3
    f464:	0003      	movs	r3, r0
    f466:	e001      	b.n	f46c <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
    f468:	1d7b      	adds	r3, r7, #5
    f46a:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
    f46c:	0018      	movs	r0, r3
    f46e:	46bd      	mov	sp, r7
    f470:	b002      	add	sp, #8
    f472:	bdb0      	pop	{r4, r5, r7, pc}
    f474:	0001186d 	.word	0x0001186d

0000f478 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
    f478:	b580      	push	{r7, lr}
    f47a:	b084      	sub	sp, #16
    f47c:	af00      	add	r7, sp, #0
    f47e:	0002      	movs	r2, r0
    f480:	1dbb      	adds	r3, r7, #6
    f482:	801a      	strh	r2, [r3, #0]
    f484:	1d7b      	adds	r3, r7, #5
    f486:	1c0a      	adds	r2, r1, #0
    f488:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
    f48a:	230f      	movs	r3, #15
    f48c:	18fb      	adds	r3, r7, r3
    f48e:	2200      	movs	r2, #0
    f490:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
    f492:	230e      	movs	r3, #14
    f494:	18fb      	adds	r3, r7, r3
    f496:	2200      	movs	r2, #0
    f498:	701a      	strb	r2, [r3, #0]
    f49a:	e01e      	b.n	f4da <CountChannels+0x62>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
    f49c:	1dbb      	adds	r3, r7, #6
    f49e:	881b      	ldrh	r3, [r3, #0]
    f4a0:	220e      	movs	r2, #14
    f4a2:	18ba      	adds	r2, r7, r2
    f4a4:	7812      	ldrb	r2, [r2, #0]
    f4a6:	2101      	movs	r1, #1
    f4a8:	4091      	lsls	r1, r2
    f4aa:	000a      	movs	r2, r1
    f4ac:	401a      	ands	r2, r3
    f4ae:	230e      	movs	r3, #14
    f4b0:	18fb      	adds	r3, r7, r3
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	2101      	movs	r1, #1
    f4b6:	4099      	lsls	r1, r3
    f4b8:	000b      	movs	r3, r1
    f4ba:	429a      	cmp	r2, r3
    f4bc:	d106      	bne.n	f4cc <CountChannels+0x54>
        {
            nbActiveBits++;
    f4be:	230f      	movs	r3, #15
    f4c0:	18fb      	adds	r3, r7, r3
    f4c2:	781a      	ldrb	r2, [r3, #0]
    f4c4:	230f      	movs	r3, #15
    f4c6:	18fb      	adds	r3, r7, r3
    f4c8:	3201      	adds	r2, #1
    f4ca:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
    f4cc:	230e      	movs	r3, #14
    f4ce:	18fb      	adds	r3, r7, r3
    f4d0:	781a      	ldrb	r2, [r3, #0]
    f4d2:	230e      	movs	r3, #14
    f4d4:	18fb      	adds	r3, r7, r3
    f4d6:	3201      	adds	r2, #1
    f4d8:	701a      	strb	r2, [r3, #0]
    f4da:	230e      	movs	r3, #14
    f4dc:	18fa      	adds	r2, r7, r3
    f4de:	1d7b      	adds	r3, r7, #5
    f4e0:	7812      	ldrb	r2, [r2, #0]
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	429a      	cmp	r2, r3
    f4e6:	d3d9      	bcc.n	f49c <CountChannels+0x24>
        }
    }
    return nbActiveBits;
    f4e8:	230f      	movs	r3, #15
    f4ea:	18fb      	adds	r3, r7, r3
    f4ec:	781b      	ldrb	r3, [r3, #0]
}
    f4ee:	0018      	movs	r0, r3
    f4f0:	46bd      	mov	sp, r7
    f4f2:	b004      	add	sp, #16
    f4f4:	bd80      	pop	{r7, pc}
	...

0000f4f8 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
    f4f8:	b580      	push	{r7, lr}
    f4fa:	b084      	sub	sp, #16
    f4fc:	af00      	add	r7, sp, #0
    f4fe:	003b      	movs	r3, r7
    f500:	6018      	str	r0, [r3, #0]
    f502:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
    f504:	230e      	movs	r3, #14
    f506:	18fb      	adds	r3, r7, r3
    f508:	2200      	movs	r2, #0
    f50a:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
    f50c:	003b      	movs	r3, r7
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	4a0e      	ldr	r2, [pc, #56]	; (f54c <RegionCommonGetJoinDc+0x54>)
    f512:	4293      	cmp	r3, r2
    f514:	d804      	bhi.n	f520 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
    f516:	230e      	movs	r3, #14
    f518:	18fb      	adds	r3, r7, r3
    f51a:	2264      	movs	r2, #100	; 0x64
    f51c:	801a      	strh	r2, [r3, #0]
    f51e:	e00e      	b.n	f53e <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
    f520:	003b      	movs	r3, r7
    f522:	681b      	ldr	r3, [r3, #0]
    f524:	4a0a      	ldr	r2, [pc, #40]	; (f550 <RegionCommonGetJoinDc+0x58>)
    f526:	4293      	cmp	r3, r2
    f528:	d805      	bhi.n	f536 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    f52a:	230e      	movs	r3, #14
    f52c:	18fb      	adds	r3, r7, r3
    f52e:	22fa      	movs	r2, #250	; 0xfa
    f530:	0092      	lsls	r2, r2, #2
    f532:	801a      	strh	r2, [r3, #0]
    f534:	e003      	b.n	f53e <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
    f536:	230e      	movs	r3, #14
    f538:	18fb      	adds	r3, r7, r3
    f53a:	4a06      	ldr	r2, [pc, #24]	; (f554 <RegionCommonGetJoinDc+0x5c>)
    f53c:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
    f53e:	230e      	movs	r3, #14
    f540:	18fb      	adds	r3, r7, r3
    f542:	881b      	ldrh	r3, [r3, #0]
}
    f544:	0018      	movs	r0, r3
    f546:	46bd      	mov	sp, r7
    f548:	b004      	add	sp, #16
    f54a:	bd80      	pop	{r7, pc}
    f54c:	00000e0f 	.word	0x00000e0f
    f550:	00009aaf 	.word	0x00009aaf
    f554:	00002710 	.word	0x00002710

0000f558 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
    f558:	b590      	push	{r4, r7, lr}
    f55a:	b085      	sub	sp, #20
    f55c:	af00      	add	r7, sp, #0
    f55e:	0004      	movs	r4, r0
    f560:	6039      	str	r1, [r7, #0]
    f562:	0010      	movs	r0, r2
    f564:	0019      	movs	r1, r3
    f566:	1dfb      	adds	r3, r7, #7
    f568:	1c22      	adds	r2, r4, #0
    f56a:	701a      	strb	r2, [r3, #0]
    f56c:	1dbb      	adds	r3, r7, #6
    f56e:	1c02      	adds	r2, r0, #0
    f570:	701a      	strb	r2, [r3, #0]
    f572:	1d7b      	adds	r3, r7, #5
    f574:	1c0a      	adds	r2, r1, #0
    f576:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    f578:	2320      	movs	r3, #32
    f57a:	18fb      	adds	r3, r7, r3
    f57c:	2200      	movs	r2, #0
    f57e:	569a      	ldrsb	r2, [r3, r2]
    f580:	1d7b      	adds	r3, r7, #5
    f582:	2100      	movs	r1, #0
    f584:	5659      	ldrsb	r1, [r3, r1]
    f586:	1dbb      	adds	r3, r7, #6
    f588:	781b      	ldrb	r3, [r3, #0]
    f58a:	b25b      	sxtb	r3, r3
    f58c:	0018      	movs	r0, r3
    f58e:	4b42      	ldr	r3, [pc, #264]	; (f698 <RegionCommonChanVerifyDr+0x140>)
    f590:	4798      	blx	r3
    f592:	1e03      	subs	r3, r0, #0
    f594:	d101      	bne.n	f59a <RegionCommonChanVerifyDr+0x42>
    {
        return false;
    f596:	2300      	movs	r3, #0
    f598:	e079      	b.n	f68e <RegionCommonChanVerifyDr+0x136>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
    f59a:	230f      	movs	r3, #15
    f59c:	18fb      	adds	r3, r7, r3
    f59e:	2200      	movs	r2, #0
    f5a0:	701a      	strb	r2, [r3, #0]
    f5a2:	230e      	movs	r3, #14
    f5a4:	18fb      	adds	r3, r7, r3
    f5a6:	2200      	movs	r2, #0
    f5a8:	701a      	strb	r2, [r3, #0]
    f5aa:	e068      	b.n	f67e <RegionCommonChanVerifyDr+0x126>
    {
        for( uint8_t j = 0; j < 16; j++ )
    f5ac:	230d      	movs	r3, #13
    f5ae:	18fb      	adds	r3, r7, r3
    f5b0:	2200      	movs	r2, #0
    f5b2:	701a      	strb	r2, [r3, #0]
    f5b4:	e050      	b.n	f658 <RegionCommonChanVerifyDr+0x100>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
    f5b6:	230e      	movs	r3, #14
    f5b8:	18fb      	adds	r3, r7, r3
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	005b      	lsls	r3, r3, #1
    f5be:	683a      	ldr	r2, [r7, #0]
    f5c0:	18d3      	adds	r3, r2, r3
    f5c2:	881b      	ldrh	r3, [r3, #0]
    f5c4:	001a      	movs	r2, r3
    f5c6:	230d      	movs	r3, #13
    f5c8:	18fb      	adds	r3, r7, r3
    f5ca:	781b      	ldrb	r3, [r3, #0]
    f5cc:	411a      	asrs	r2, r3
    f5ce:	0013      	movs	r3, r2
    f5d0:	2201      	movs	r2, #1
    f5d2:	4013      	ands	r3, r2
    f5d4:	d039      	beq.n	f64a <RegionCommonChanVerifyDr+0xf2>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
    f5d6:	230f      	movs	r3, #15
    f5d8:	18fb      	adds	r3, r7, r3
    f5da:	781a      	ldrb	r2, [r3, #0]
    f5dc:	230d      	movs	r3, #13
    f5de:	18fb      	adds	r3, r7, r3
    f5e0:	781b      	ldrb	r3, [r3, #0]
    f5e2:	18d3      	adds	r3, r2, r3
    f5e4:	001a      	movs	r2, r3
    f5e6:	0013      	movs	r3, r2
    f5e8:	005b      	lsls	r3, r3, #1
    f5ea:	189b      	adds	r3, r3, r2
    f5ec:	009b      	lsls	r3, r3, #2
    f5ee:	001a      	movs	r2, r3
    f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5f2:	189b      	adds	r3, r3, r2
    f5f4:	7a1b      	ldrb	r3, [r3, #8]
    f5f6:	011b      	lsls	r3, r3, #4
    f5f8:	b25b      	sxtb	r3, r3
    f5fa:	111b      	asrs	r3, r3, #4
    f5fc:	b25b      	sxtb	r3, r3
    f5fe:	001a      	movs	r2, r3
    f600:	230f      	movs	r3, #15
    f602:	4013      	ands	r3, r2
    f604:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
    f606:	230f      	movs	r3, #15
    f608:	18fb      	adds	r3, r7, r3
    f60a:	781a      	ldrb	r2, [r3, #0]
    f60c:	230d      	movs	r3, #13
    f60e:	18fb      	adds	r3, r7, r3
    f610:	781b      	ldrb	r3, [r3, #0]
    f612:	18d3      	adds	r3, r2, r3
    f614:	001a      	movs	r2, r3
    f616:	0013      	movs	r3, r2
    f618:	005b      	lsls	r3, r3, #1
    f61a:	189b      	adds	r3, r3, r2
    f61c:	009b      	lsls	r3, r3, #2
    f61e:	001a      	movs	r2, r3
    f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f622:	189b      	adds	r3, r3, r2
    f624:	7a1b      	ldrb	r3, [r3, #8]
    f626:	b25b      	sxtb	r3, r3
    f628:	111b      	asrs	r3, r3, #4
    f62a:	b25b      	sxtb	r3, r3
    f62c:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
    f62e:	230f      	movs	r3, #15
    f630:	4013      	ands	r3, r2
    f632:	b25a      	sxtb	r2, r3
    f634:	1dbb      	adds	r3, r7, #6
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	b25b      	sxtb	r3, r3
    f63a:	0018      	movs	r0, r3
    f63c:	4b16      	ldr	r3, [pc, #88]	; (f698 <RegionCommonChanVerifyDr+0x140>)
    f63e:	4798      	blx	r3
    f640:	0003      	movs	r3, r0
    f642:	2b01      	cmp	r3, #1
    f644:	d101      	bne.n	f64a <RegionCommonChanVerifyDr+0xf2>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
    f646:	2301      	movs	r3, #1
    f648:	e021      	b.n	f68e <RegionCommonChanVerifyDr+0x136>
        for( uint8_t j = 0; j < 16; j++ )
    f64a:	230d      	movs	r3, #13
    f64c:	18fb      	adds	r3, r7, r3
    f64e:	781a      	ldrb	r2, [r3, #0]
    f650:	230d      	movs	r3, #13
    f652:	18fb      	adds	r3, r7, r3
    f654:	3201      	adds	r2, #1
    f656:	701a      	strb	r2, [r3, #0]
    f658:	230d      	movs	r3, #13
    f65a:	18fb      	adds	r3, r7, r3
    f65c:	781b      	ldrb	r3, [r3, #0]
    f65e:	2b0f      	cmp	r3, #15
    f660:	d9a9      	bls.n	f5b6 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
    f662:	230f      	movs	r3, #15
    f664:	18fb      	adds	r3, r7, r3
    f666:	220f      	movs	r2, #15
    f668:	18ba      	adds	r2, r7, r2
    f66a:	7812      	ldrb	r2, [r2, #0]
    f66c:	3210      	adds	r2, #16
    f66e:	701a      	strb	r2, [r3, #0]
    f670:	230e      	movs	r3, #14
    f672:	18fb      	adds	r3, r7, r3
    f674:	781a      	ldrb	r2, [r3, #0]
    f676:	230e      	movs	r3, #14
    f678:	18fb      	adds	r3, r7, r3
    f67a:	3201      	adds	r2, #1
    f67c:	701a      	strb	r2, [r3, #0]
    f67e:	230f      	movs	r3, #15
    f680:	18fa      	adds	r2, r7, r3
    f682:	1dfb      	adds	r3, r7, #7
    f684:	7812      	ldrb	r2, [r2, #0]
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	429a      	cmp	r2, r3
    f68a:	d38f      	bcc.n	f5ac <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
    f68c:	2300      	movs	r3, #0
}
    f68e:	0018      	movs	r0, r3
    f690:	46bd      	mov	sp, r7
    f692:	b005      	add	sp, #20
    f694:	bd90      	pop	{r4, r7, pc}
    f696:	46c0      	nop			; (mov r8, r8)
    f698:	0000f69d 	.word	0x0000f69d

0000f69c <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    f69c:	b590      	push	{r4, r7, lr}
    f69e:	b083      	sub	sp, #12
    f6a0:	af00      	add	r7, sp, #0
    f6a2:	0004      	movs	r4, r0
    f6a4:	0008      	movs	r0, r1
    f6a6:	0011      	movs	r1, r2
    f6a8:	1dfb      	adds	r3, r7, #7
    f6aa:	1c22      	adds	r2, r4, #0
    f6ac:	701a      	strb	r2, [r3, #0]
    f6ae:	1dbb      	adds	r3, r7, #6
    f6b0:	1c02      	adds	r2, r0, #0
    f6b2:	701a      	strb	r2, [r3, #0]
    f6b4:	1d7b      	adds	r3, r7, #5
    f6b6:	1c0a      	adds	r2, r1, #0
    f6b8:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
    f6ba:	1dfa      	adds	r2, r7, #7
    f6bc:	1dbb      	adds	r3, r7, #6
    f6be:	7812      	ldrb	r2, [r2, #0]
    f6c0:	b252      	sxtb	r2, r2
    f6c2:	781b      	ldrb	r3, [r3, #0]
    f6c4:	b25b      	sxtb	r3, r3
    f6c6:	429a      	cmp	r2, r3
    f6c8:	db09      	blt.n	f6de <RegionCommonValueInRange+0x42>
    f6ca:	1dfa      	adds	r2, r7, #7
    f6cc:	1d7b      	adds	r3, r7, #5
    f6ce:	7812      	ldrb	r2, [r2, #0]
    f6d0:	b252      	sxtb	r2, r2
    f6d2:	781b      	ldrb	r3, [r3, #0]
    f6d4:	b25b      	sxtb	r3, r3
    f6d6:	429a      	cmp	r2, r3
    f6d8:	dc01      	bgt.n	f6de <RegionCommonValueInRange+0x42>
    {
        return 1;
    f6da:	2301      	movs	r3, #1
    f6dc:	e000      	b.n	f6e0 <RegionCommonValueInRange+0x44>
    }
    return 0;
    f6de:	2300      	movs	r3, #0
}
    f6e0:	0018      	movs	r0, r3
    f6e2:	46bd      	mov	sp, r7
    f6e4:	b003      	add	sp, #12
    f6e6:	bd90      	pop	{r4, r7, pc}

0000f6e8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    f6e8:	b580      	push	{r7, lr}
    f6ea:	b084      	sub	sp, #16
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	6078      	str	r0, [r7, #4]
    f6f0:	0008      	movs	r0, r1
    f6f2:	0011      	movs	r1, r2
    f6f4:	1cfb      	adds	r3, r7, #3
    f6f6:	1c02      	adds	r2, r0, #0
    f6f8:	701a      	strb	r2, [r3, #0]
    f6fa:	1cbb      	adds	r3, r7, #2
    f6fc:	1c0a      	adds	r2, r1, #0
    f6fe:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
    f700:	230f      	movs	r3, #15
    f702:	18fb      	adds	r3, r7, r3
    f704:	1cfa      	adds	r2, r7, #3
    f706:	7812      	ldrb	r2, [r2, #0]
    f708:	0912      	lsrs	r2, r2, #4
    f70a:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    f70c:	1cbb      	adds	r3, r7, #2
    f70e:	781b      	ldrb	r3, [r3, #0]
    f710:	091b      	lsrs	r3, r3, #4
    f712:	b2db      	uxtb	r3, r3
    f714:	220f      	movs	r2, #15
    f716:	18ba      	adds	r2, r7, r2
    f718:	7812      	ldrb	r2, [r2, #0]
    f71a:	429a      	cmp	r2, r3
    f71c:	d805      	bhi.n	f72a <RegionCommonChanDisable+0x42>
    f71e:	1cfa      	adds	r2, r7, #3
    f720:	1cbb      	adds	r3, r7, #2
    f722:	7812      	ldrb	r2, [r2, #0]
    f724:	781b      	ldrb	r3, [r3, #0]
    f726:	429a      	cmp	r2, r3
    f728:	d301      	bcc.n	f72e <RegionCommonChanDisable+0x46>
    {
        return false;
    f72a:	2300      	movs	r3, #0
    f72c:	e01c      	b.n	f768 <RegionCommonChanDisable+0x80>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
    f72e:	230f      	movs	r3, #15
    f730:	18fb      	adds	r3, r7, r3
    f732:	781b      	ldrb	r3, [r3, #0]
    f734:	005b      	lsls	r3, r3, #1
    f736:	687a      	ldr	r2, [r7, #4]
    f738:	18d3      	adds	r3, r2, r3
    f73a:	220f      	movs	r2, #15
    f73c:	18ba      	adds	r2, r7, r2
    f73e:	7812      	ldrb	r2, [r2, #0]
    f740:	0052      	lsls	r2, r2, #1
    f742:	6879      	ldr	r1, [r7, #4]
    f744:	188a      	adds	r2, r1, r2
    f746:	8812      	ldrh	r2, [r2, #0]
    f748:	b212      	sxth	r2, r2
    f74a:	1cf9      	adds	r1, r7, #3
    f74c:	7809      	ldrb	r1, [r1, #0]
    f74e:	200f      	movs	r0, #15
    f750:	4001      	ands	r1, r0
    f752:	2001      	movs	r0, #1
    f754:	4088      	lsls	r0, r1
    f756:	0001      	movs	r1, r0
    f758:	b209      	sxth	r1, r1
    f75a:	43c9      	mvns	r1, r1
    f75c:	b209      	sxth	r1, r1
    f75e:	400a      	ands	r2, r1
    f760:	b212      	sxth	r2, r2
    f762:	b292      	uxth	r2, r2
    f764:	801a      	strh	r2, [r3, #0]

    return true;
    f766:	2301      	movs	r3, #1
}
    f768:	0018      	movs	r0, r3
    f76a:	46bd      	mov	sp, r7
    f76c:	b004      	add	sp, #16
    f76e:	bd80      	pop	{r7, pc}

0000f770 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    f770:	b580      	push	{r7, lr}
    f772:	b084      	sub	sp, #16
    f774:	af00      	add	r7, sp, #0
    f776:	6078      	str	r0, [r7, #4]
    f778:	0008      	movs	r0, r1
    f77a:	0011      	movs	r1, r2
    f77c:	1cfb      	adds	r3, r7, #3
    f77e:	1c02      	adds	r2, r0, #0
    f780:	701a      	strb	r2, [r3, #0]
    f782:	1cbb      	adds	r3, r7, #2
    f784:	1c0a      	adds	r2, r1, #0
    f786:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
    f788:	230f      	movs	r3, #15
    f78a:	18fb      	adds	r3, r7, r3
    f78c:	2200      	movs	r2, #0
    f78e:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	2b00      	cmp	r3, #0
    f794:	d101      	bne.n	f79a <RegionCommonCountChannels+0x2a>
    {
        return 0;
    f796:	2300      	movs	r3, #0
    f798:	e02a      	b.n	f7f0 <RegionCommonCountChannels+0x80>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    f79a:	230e      	movs	r3, #14
    f79c:	18fb      	adds	r3, r7, r3
    f79e:	1cfa      	adds	r2, r7, #3
    f7a0:	7812      	ldrb	r2, [r2, #0]
    f7a2:	701a      	strb	r2, [r3, #0]
    f7a4:	e01a      	b.n	f7dc <RegionCommonCountChannels+0x6c>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    f7a6:	230e      	movs	r3, #14
    f7a8:	18fb      	adds	r3, r7, r3
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	005b      	lsls	r3, r3, #1
    f7ae:	687a      	ldr	r2, [r7, #4]
    f7b0:	18d3      	adds	r3, r2, r3
    f7b2:	881b      	ldrh	r3, [r3, #0]
    f7b4:	2110      	movs	r1, #16
    f7b6:	0018      	movs	r0, r3
    f7b8:	4b0f      	ldr	r3, [pc, #60]	; (f7f8 <RegionCommonCountChannels+0x88>)
    f7ba:	4798      	blx	r3
    f7bc:	0003      	movs	r3, r0
    f7be:	0019      	movs	r1, r3
    f7c0:	230f      	movs	r3, #15
    f7c2:	18fb      	adds	r3, r7, r3
    f7c4:	220f      	movs	r2, #15
    f7c6:	18ba      	adds	r2, r7, r2
    f7c8:	7812      	ldrb	r2, [r2, #0]
    f7ca:	188a      	adds	r2, r1, r2
    f7cc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
    f7ce:	230e      	movs	r3, #14
    f7d0:	18fb      	adds	r3, r7, r3
    f7d2:	781a      	ldrb	r2, [r3, #0]
    f7d4:	230e      	movs	r3, #14
    f7d6:	18fb      	adds	r3, r7, r3
    f7d8:	3201      	adds	r2, #1
    f7da:	701a      	strb	r2, [r3, #0]
    f7dc:	230e      	movs	r3, #14
    f7de:	18fa      	adds	r2, r7, r3
    f7e0:	1cbb      	adds	r3, r7, #2
    f7e2:	7812      	ldrb	r2, [r2, #0]
    f7e4:	781b      	ldrb	r3, [r3, #0]
    f7e6:	429a      	cmp	r2, r3
    f7e8:	d3dd      	bcc.n	f7a6 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
    f7ea:	230f      	movs	r3, #15
    f7ec:	18fb      	adds	r3, r7, r3
    f7ee:	781b      	ldrb	r3, [r3, #0]
}
    f7f0:	0018      	movs	r0, r3
    f7f2:	46bd      	mov	sp, r7
    f7f4:	b004      	add	sp, #16
    f7f6:	bd80      	pop	{r7, pc}
    f7f8:	0000f479 	.word	0x0000f479

0000f7fc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    f7fc:	b580      	push	{r7, lr}
    f7fe:	b086      	sub	sp, #24
    f800:	af00      	add	r7, sp, #0
    f802:	60f8      	str	r0, [r7, #12]
    f804:	60b9      	str	r1, [r7, #8]
    f806:	1dfb      	adds	r3, r7, #7
    f808:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
    f80a:	68fb      	ldr	r3, [r7, #12]
    f80c:	2b00      	cmp	r3, #0
    f80e:	d023      	beq.n	f858 <RegionCommonChanMaskCopy+0x5c>
    f810:	68bb      	ldr	r3, [r7, #8]
    f812:	2b00      	cmp	r3, #0
    f814:	d020      	beq.n	f858 <RegionCommonChanMaskCopy+0x5c>
    {
        for( uint8_t i = 0; i < len; i++ )
    f816:	2317      	movs	r3, #23
    f818:	18fb      	adds	r3, r7, r3
    f81a:	2200      	movs	r2, #0
    f81c:	701a      	strb	r2, [r3, #0]
    f81e:	e014      	b.n	f84a <RegionCommonChanMaskCopy+0x4e>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
    f820:	2317      	movs	r3, #23
    f822:	18fb      	adds	r3, r7, r3
    f824:	781b      	ldrb	r3, [r3, #0]
    f826:	005b      	lsls	r3, r3, #1
    f828:	68fa      	ldr	r2, [r7, #12]
    f82a:	18d3      	adds	r3, r2, r3
    f82c:	2217      	movs	r2, #23
    f82e:	18ba      	adds	r2, r7, r2
    f830:	7812      	ldrb	r2, [r2, #0]
    f832:	0052      	lsls	r2, r2, #1
    f834:	68b9      	ldr	r1, [r7, #8]
    f836:	188a      	adds	r2, r1, r2
    f838:	8812      	ldrh	r2, [r2, #0]
    f83a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
    f83c:	2317      	movs	r3, #23
    f83e:	18fb      	adds	r3, r7, r3
    f840:	781a      	ldrb	r2, [r3, #0]
    f842:	2317      	movs	r3, #23
    f844:	18fb      	adds	r3, r7, r3
    f846:	3201      	adds	r2, #1
    f848:	701a      	strb	r2, [r3, #0]
    f84a:	2317      	movs	r3, #23
    f84c:	18fa      	adds	r2, r7, r3
    f84e:	1dfb      	adds	r3, r7, #7
    f850:	7812      	ldrb	r2, [r2, #0]
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	429a      	cmp	r2, r3
    f856:	d3e3      	bcc.n	f820 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
    f858:	46c0      	nop			; (mov r8, r8)
    f85a:	46bd      	mov	sp, r7
    f85c:	b006      	add	sp, #24
    f85e:	bd80      	pop	{r7, pc}

0000f860 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    f860:	b580      	push	{r7, lr}
    f862:	b084      	sub	sp, #16
    f864:	af00      	add	r7, sp, #0
    f866:	60b9      	str	r1, [r7, #8]
    f868:	607a      	str	r2, [r7, #4]
    f86a:	230f      	movs	r3, #15
    f86c:	18fb      	adds	r3, r7, r3
    f86e:	1c02      	adds	r2, r0, #0
    f870:	701a      	strb	r2, [r3, #0]
    if( joined == true )
    f872:	230f      	movs	r3, #15
    f874:	18fb      	adds	r3, r7, r3
    f876:	781b      	ldrb	r3, [r3, #0]
    f878:	2b00      	cmp	r3, #0
    f87a:	d003      	beq.n	f884 <RegionCommonSetBandTxDone+0x24>
    {
        band->LastTxDoneTime = lastTxDone;
    f87c:	68bb      	ldr	r3, [r7, #8]
    f87e:	687a      	ldr	r2, [r7, #4]
    f880:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
    f882:	e005      	b.n	f890 <RegionCommonSetBandTxDone+0x30>
        band->LastTxDoneTime = lastTxDone;
    f884:	68bb      	ldr	r3, [r7, #8]
    f886:	687a      	ldr	r2, [r7, #4]
    f888:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
    f88a:	68bb      	ldr	r3, [r7, #8]
    f88c:	687a      	ldr	r2, [r7, #4]
    f88e:	605a      	str	r2, [r3, #4]
}
    f890:	46c0      	nop			; (mov r8, r8)
    f892:	46bd      	mov	sp, r7
    f894:	b004      	add	sp, #16
    f896:	bd80      	pop	{r7, pc}

0000f898 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
    f898:	b590      	push	{r4, r7, lr}
    f89a:	b087      	sub	sp, #28
    f89c:	af00      	add	r7, sp, #0
    f89e:	0004      	movs	r4, r0
    f8a0:	0008      	movs	r0, r1
    f8a2:	603a      	str	r2, [r7, #0]
    f8a4:	0019      	movs	r1, r3
    f8a6:	1dfb      	adds	r3, r7, #7
    f8a8:	1c22      	adds	r2, r4, #0
    f8aa:	701a      	strb	r2, [r3, #0]
    f8ac:	1dbb      	adds	r3, r7, #6
    f8ae:	1c02      	adds	r2, r0, #0
    f8b0:	701a      	strb	r2, [r3, #0]
    f8b2:	1d7b      	adds	r3, r7, #5
    f8b4:	1c0a      	adds	r2, r1, #0
    f8b6:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
    f8b8:	2301      	movs	r3, #1
    f8ba:	425b      	negs	r3, r3
    f8bc:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
    f8be:	2313      	movs	r3, #19
    f8c0:	18fb      	adds	r3, r7, r3
    f8c2:	2200      	movs	r2, #0
    f8c4:	701a      	strb	r2, [r3, #0]
    f8c6:	e0d3      	b.n	fa70 <RegionCommonUpdateBandTimeOff+0x1d8>
    {
        if( joined == false )
    f8c8:	1dfb      	adds	r3, r7, #7
    f8ca:	781b      	ldrb	r3, [r3, #0]
    f8cc:	2201      	movs	r2, #1
    f8ce:	4053      	eors	r3, r2
    f8d0:	b2db      	uxtb	r3, r3
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	d065      	beq.n	f9a2 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
    f8d6:	2313      	movs	r3, #19
    f8d8:	18fb      	adds	r3, r7, r3
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	011b      	lsls	r3, r3, #4
    f8de:	683a      	ldr	r2, [r7, #0]
    f8e0:	18d3      	adds	r3, r2, r3
    f8e2:	685b      	ldr	r3, [r3, #4]
    f8e4:	0018      	movs	r0, r3
    f8e6:	4b69      	ldr	r3, [pc, #420]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    f8e8:	4798      	blx	r3
    f8ea:	0004      	movs	r4, r0
    f8ec:	1dbb      	adds	r3, r7, #6
    f8ee:	781b      	ldrb	r3, [r3, #0]
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d00b      	beq.n	f90c <RegionCommonUpdateBandTimeOff+0x74>
    f8f4:	2313      	movs	r3, #19
    f8f6:	18fb      	adds	r3, r7, r3
    f8f8:	781b      	ldrb	r3, [r3, #0]
    f8fa:	011b      	lsls	r3, r3, #4
    f8fc:	683a      	ldr	r2, [r7, #0]
    f8fe:	18d3      	adds	r3, r2, r3
    f900:	689b      	ldr	r3, [r3, #8]
    f902:	0018      	movs	r0, r3
    f904:	4b61      	ldr	r3, [pc, #388]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    f906:	4798      	blx	r3
    f908:	0003      	movs	r3, r0
    f90a:	e000      	b.n	f90e <RegionCommonUpdateBandTimeOff+0x76>
    f90c:	2300      	movs	r3, #0
    f90e:	429c      	cmp	r4, r3
    f910:	d90b      	bls.n	f92a <RegionCommonUpdateBandTimeOff+0x92>
    f912:	2313      	movs	r3, #19
    f914:	18fb      	adds	r3, r7, r3
    f916:	781b      	ldrb	r3, [r3, #0]
    f918:	011b      	lsls	r3, r3, #4
    f91a:	683a      	ldr	r2, [r7, #0]
    f91c:	18d3      	adds	r3, r2, r3
    f91e:	685b      	ldr	r3, [r3, #4]
    f920:	0018      	movs	r0, r3
    f922:	4b5a      	ldr	r3, [pc, #360]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    f924:	4798      	blx	r3
    f926:	0003      	movs	r3, r0
    f928:	e010      	b.n	f94c <RegionCommonUpdateBandTimeOff+0xb4>
    f92a:	1dbb      	adds	r3, r7, #6
    f92c:	781b      	ldrb	r3, [r3, #0]
    f92e:	2b00      	cmp	r3, #0
    f930:	d00b      	beq.n	f94a <RegionCommonUpdateBandTimeOff+0xb2>
    f932:	2313      	movs	r3, #19
    f934:	18fb      	adds	r3, r7, r3
    f936:	781b      	ldrb	r3, [r3, #0]
    f938:	011b      	lsls	r3, r3, #4
    f93a:	683a      	ldr	r2, [r7, #0]
    f93c:	18d3      	adds	r3, r2, r3
    f93e:	689b      	ldr	r3, [r3, #8]
    f940:	0018      	movs	r0, r3
    f942:	4b52      	ldr	r3, [pc, #328]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    f944:	4798      	blx	r3
    f946:	0003      	movs	r3, r0
    f948:	e000      	b.n	f94c <RegionCommonUpdateBandTimeOff+0xb4>
    f94a:	2300      	movs	r3, #0
    f94c:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
    f94e:	2313      	movs	r3, #19
    f950:	18fb      	adds	r3, r7, r3
    f952:	781b      	ldrb	r3, [r3, #0]
    f954:	011b      	lsls	r3, r3, #4
    f956:	683a      	ldr	r2, [r7, #0]
    f958:	18d3      	adds	r3, r2, r3
    f95a:	68da      	ldr	r2, [r3, #12]
    f95c:	68fb      	ldr	r3, [r7, #12]
    f95e:	429a      	cmp	r2, r3
    f960:	d807      	bhi.n	f972 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
    f962:	2313      	movs	r3, #19
    f964:	18fb      	adds	r3, r7, r3
    f966:	781b      	ldrb	r3, [r3, #0]
    f968:	011b      	lsls	r3, r3, #4
    f96a:	683a      	ldr	r2, [r7, #0]
    f96c:	18d3      	adds	r3, r2, r3
    f96e:	2200      	movs	r2, #0
    f970:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
    f972:	2313      	movs	r3, #19
    f974:	18fb      	adds	r3, r7, r3
    f976:	781b      	ldrb	r3, [r3, #0]
    f978:	011b      	lsls	r3, r3, #4
    f97a:	683a      	ldr	r2, [r7, #0]
    f97c:	18d3      	adds	r3, r2, r3
    f97e:	68db      	ldr	r3, [r3, #12]
    f980:	2b00      	cmp	r3, #0
    f982:	d06e      	beq.n	fa62 <RegionCommonUpdateBandTimeOff+0x1ca>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
    f984:	2313      	movs	r3, #19
    f986:	18fb      	adds	r3, r7, r3
    f988:	781b      	ldrb	r3, [r3, #0]
    f98a:	011b      	lsls	r3, r3, #4
    f98c:	683a      	ldr	r2, [r7, #0]
    f98e:	18d3      	adds	r3, r2, r3
    f990:	68da      	ldr	r2, [r3, #12]
    f992:	68fb      	ldr	r3, [r7, #12]
    f994:	1ad3      	subs	r3, r2, r3
    f996:	697a      	ldr	r2, [r7, #20]
    f998:	4293      	cmp	r3, r2
    f99a:	d900      	bls.n	f99e <RegionCommonUpdateBandTimeOff+0x106>
    f99c:	0013      	movs	r3, r2
    f99e:	617b      	str	r3, [r7, #20]
    f9a0:	e05f      	b.n	fa62 <RegionCommonUpdateBandTimeOff+0x1ca>
            }
        }
        else
        {
            if( dutyCycle == true )
    f9a2:	1dbb      	adds	r3, r7, #6
    f9a4:	781b      	ldrb	r3, [r3, #0]
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	d051      	beq.n	fa4e <RegionCommonUpdateBandTimeOff+0x1b6>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
    f9aa:	2313      	movs	r3, #19
    f9ac:	18fb      	adds	r3, r7, r3
    f9ae:	781b      	ldrb	r3, [r3, #0]
    f9b0:	011b      	lsls	r3, r3, #4
    f9b2:	683a      	ldr	r2, [r7, #0]
    f9b4:	18d3      	adds	r3, r2, r3
    f9b6:	68dc      	ldr	r4, [r3, #12]
    f9b8:	2313      	movs	r3, #19
    f9ba:	18fb      	adds	r3, r7, r3
    f9bc:	781b      	ldrb	r3, [r3, #0]
    f9be:	011b      	lsls	r3, r3, #4
    f9c0:	683a      	ldr	r2, [r7, #0]
    f9c2:	18d3      	adds	r3, r2, r3
    f9c4:	689b      	ldr	r3, [r3, #8]
    f9c6:	0018      	movs	r0, r3
    f9c8:	4b30      	ldr	r3, [pc, #192]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    f9ca:	4798      	blx	r3
    f9cc:	0003      	movs	r3, r0
    f9ce:	429c      	cmp	r4, r3
    f9d0:	d807      	bhi.n	f9e2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    bands[i].TimeOff = 0;
    f9d2:	2313      	movs	r3, #19
    f9d4:	18fb      	adds	r3, r7, r3
    f9d6:	781b      	ldrb	r3, [r3, #0]
    f9d8:	011b      	lsls	r3, r3, #4
    f9da:	683a      	ldr	r2, [r7, #0]
    f9dc:	18d3      	adds	r3, r2, r3
    f9de:	2200      	movs	r2, #0
    f9e0:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
    f9e2:	2313      	movs	r3, #19
    f9e4:	18fb      	adds	r3, r7, r3
    f9e6:	781b      	ldrb	r3, [r3, #0]
    f9e8:	011b      	lsls	r3, r3, #4
    f9ea:	683a      	ldr	r2, [r7, #0]
    f9ec:	18d3      	adds	r3, r2, r3
    f9ee:	68db      	ldr	r3, [r3, #12]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d036      	beq.n	fa62 <RegionCommonUpdateBandTimeOff+0x1ca>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
    f9f4:	2313      	movs	r3, #19
    f9f6:	18fb      	adds	r3, r7, r3
    f9f8:	781b      	ldrb	r3, [r3, #0]
    f9fa:	011b      	lsls	r3, r3, #4
    f9fc:	683a      	ldr	r2, [r7, #0]
    f9fe:	18d3      	adds	r3, r2, r3
    fa00:	68dc      	ldr	r4, [r3, #12]
    fa02:	2313      	movs	r3, #19
    fa04:	18fb      	adds	r3, r7, r3
    fa06:	781b      	ldrb	r3, [r3, #0]
    fa08:	011b      	lsls	r3, r3, #4
    fa0a:	683a      	ldr	r2, [r7, #0]
    fa0c:	18d3      	adds	r3, r2, r3
    fa0e:	689b      	ldr	r3, [r3, #8]
    fa10:	0018      	movs	r0, r3
    fa12:	4b1e      	ldr	r3, [pc, #120]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    fa14:	4798      	blx	r3
    fa16:	0003      	movs	r3, r0
    fa18:	1ae2      	subs	r2, r4, r3
    fa1a:	697b      	ldr	r3, [r7, #20]
    fa1c:	429a      	cmp	r2, r3
    fa1e:	d213      	bcs.n	fa48 <RegionCommonUpdateBandTimeOff+0x1b0>
    fa20:	2313      	movs	r3, #19
    fa22:	18fb      	adds	r3, r7, r3
    fa24:	781b      	ldrb	r3, [r3, #0]
    fa26:	011b      	lsls	r3, r3, #4
    fa28:	683a      	ldr	r2, [r7, #0]
    fa2a:	18d3      	adds	r3, r2, r3
    fa2c:	68dc      	ldr	r4, [r3, #12]
    fa2e:	2313      	movs	r3, #19
    fa30:	18fb      	adds	r3, r7, r3
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	011b      	lsls	r3, r3, #4
    fa36:	683a      	ldr	r2, [r7, #0]
    fa38:	18d3      	adds	r3, r2, r3
    fa3a:	689b      	ldr	r3, [r3, #8]
    fa3c:	0018      	movs	r0, r3
    fa3e:	4b13      	ldr	r3, [pc, #76]	; (fa8c <RegionCommonUpdateBandTimeOff+0x1f4>)
    fa40:	4798      	blx	r3
    fa42:	0003      	movs	r3, r0
    fa44:	1ae3      	subs	r3, r4, r3
    fa46:	e000      	b.n	fa4a <RegionCommonUpdateBandTimeOff+0x1b2>
    fa48:	697b      	ldr	r3, [r7, #20]
    fa4a:	617b      	str	r3, [r7, #20]
    fa4c:	e009      	b.n	fa62 <RegionCommonUpdateBandTimeOff+0x1ca>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
    fa4e:	2300      	movs	r3, #0
    fa50:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
    fa52:	2313      	movs	r3, #19
    fa54:	18fb      	adds	r3, r7, r3
    fa56:	781b      	ldrb	r3, [r3, #0]
    fa58:	011b      	lsls	r3, r3, #4
    fa5a:	683a      	ldr	r2, [r7, #0]
    fa5c:	18d3      	adds	r3, r2, r3
    fa5e:	2200      	movs	r2, #0
    fa60:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
    fa62:	2313      	movs	r3, #19
    fa64:	18fb      	adds	r3, r7, r3
    fa66:	781a      	ldrb	r2, [r3, #0]
    fa68:	2313      	movs	r3, #19
    fa6a:	18fb      	adds	r3, r7, r3
    fa6c:	3201      	adds	r2, #1
    fa6e:	701a      	strb	r2, [r3, #0]
    fa70:	2313      	movs	r3, #19
    fa72:	18fa      	adds	r2, r7, r3
    fa74:	1d7b      	adds	r3, r7, #5
    fa76:	7812      	ldrb	r2, [r2, #0]
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	429a      	cmp	r2, r3
    fa7c:	d200      	bcs.n	fa80 <RegionCommonUpdateBandTimeOff+0x1e8>
    fa7e:	e723      	b.n	f8c8 <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
    fa80:	697b      	ldr	r3, [r7, #20]
}
    fa82:	0018      	movs	r0, r3
    fa84:	46bd      	mov	sp, r7
    fa86:	b007      	add	sp, #28
    fa88:	bd90      	pop	{r4, r7, pc}
    fa8a:	46c0      	nop			; (mov r8, r8)
    fa8c:	00016409 	.word	0x00016409

0000fa90 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    fa90:	b580      	push	{r7, lr}
    fa92:	b084      	sub	sp, #16
    fa94:	af00      	add	r7, sp, #0
    fa96:	6078      	str	r0, [r7, #4]
    fa98:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
    fa9a:	230f      	movs	r3, #15
    fa9c:	18fb      	adds	r3, r7, r3
    fa9e:	2200      	movs	r2, #0
    faa0:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
    faa2:	687b      	ldr	r3, [r7, #4]
    faa4:	781b      	ldrb	r3, [r3, #0]
    faa6:	2b03      	cmp	r3, #3
    faa8:	d141      	bne.n	fb2e <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	3301      	adds	r3, #1
    faae:	781b      	ldrb	r3, [r3, #0]
    fab0:	b25a      	sxtb	r2, r3
    fab2:	683b      	ldr	r3, [r7, #0]
    fab4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
    fab6:	683b      	ldr	r3, [r7, #0]
    fab8:	785b      	ldrb	r3, [r3, #1]
    faba:	b25b      	sxtb	r3, r3
    fabc:	220f      	movs	r2, #15
    fabe:	4013      	ands	r3, r2
    fac0:	b25a      	sxtb	r2, r3
    fac2:	683b      	ldr	r3, [r7, #0]
    fac4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
    fac6:	683b      	ldr	r3, [r7, #0]
    fac8:	785b      	ldrb	r3, [r3, #1]
    faca:	b25b      	sxtb	r3, r3
    facc:	b2db      	uxtb	r3, r3
    face:	091b      	lsrs	r3, r3, #4
    fad0:	b2db      	uxtb	r3, r3
    fad2:	b25a      	sxtb	r2, r3
    fad4:	683b      	ldr	r3, [r7, #0]
    fad6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
    fad8:	687b      	ldr	r3, [r7, #4]
    fada:	3302      	adds	r3, #2
    fadc:	781b      	ldrb	r3, [r3, #0]
    fade:	b29a      	uxth	r2, r3
    fae0:	683b      	ldr	r3, [r7, #0]
    fae2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
    fae4:	683b      	ldr	r3, [r7, #0]
    fae6:	889b      	ldrh	r3, [r3, #4]
    fae8:	b21a      	sxth	r2, r3
    faea:	687b      	ldr	r3, [r7, #4]
    faec:	3303      	adds	r3, #3
    faee:	781b      	ldrb	r3, [r3, #0]
    faf0:	021b      	lsls	r3, r3, #8
    faf2:	b21b      	sxth	r3, r3
    faf4:	4313      	orrs	r3, r2
    faf6:	b21b      	sxth	r3, r3
    faf8:	b29a      	uxth	r2, r3
    fafa:	683b      	ldr	r3, [r7, #0]
    fafc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
    fafe:	687b      	ldr	r3, [r7, #4]
    fb00:	791a      	ldrb	r2, [r3, #4]
    fb02:	683b      	ldr	r3, [r7, #0]
    fb04:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
    fb06:	683b      	ldr	r3, [r7, #0]
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	091b      	lsrs	r3, r3, #4
    fb0c:	b2db      	uxtb	r3, r3
    fb0e:	2207      	movs	r2, #7
    fb10:	4013      	ands	r3, r2
    fb12:	b2da      	uxtb	r2, r3
    fb14:	683b      	ldr	r3, [r7, #0]
    fb16:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
    fb18:	683b      	ldr	r3, [r7, #0]
    fb1a:	781b      	ldrb	r3, [r3, #0]
    fb1c:	220f      	movs	r2, #15
    fb1e:	4013      	ands	r3, r2
    fb20:	b2da      	uxtb	r2, r3
    fb22:	683b      	ldr	r3, [r7, #0]
    fb24:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    fb26:	230f      	movs	r3, #15
    fb28:	18fb      	adds	r3, r7, r3
    fb2a:	2205      	movs	r2, #5
    fb2c:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
    fb2e:	230f      	movs	r3, #15
    fb30:	18fb      	adds	r3, r7, r3
    fb32:	781b      	ldrb	r3, [r3, #0]
}
    fb34:	0018      	movs	r0, r3
    fb36:	46bd      	mov	sp, r7
    fb38:	b004      	add	sp, #16
    fb3a:	bd80      	pop	{r7, pc}

0000fb3c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
    fb3c:	b5b0      	push	{r4, r5, r7, lr}
    fb3e:	b088      	sub	sp, #32
    fb40:	af02      	add	r7, sp, #8
    fb42:	60f8      	str	r0, [r7, #12]
    fb44:	60b9      	str	r1, [r7, #8]
    fb46:	607a      	str	r2, [r7, #4]
    fb48:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
    fb4a:	2317      	movs	r3, #23
    fb4c:	18fb      	adds	r3, r7, r3
    fb4e:	68fa      	ldr	r2, [r7, #12]
    fb50:	7912      	ldrb	r2, [r2, #4]
    fb52:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
    fb54:	2316      	movs	r3, #22
    fb56:	18fb      	adds	r3, r7, r3
    fb58:	68fa      	ldr	r2, [r7, #12]
    fb5a:	7992      	ldrb	r2, [r2, #6]
    fb5c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
    fb5e:	2315      	movs	r3, #21
    fb60:	18fb      	adds	r3, r7, r3
    fb62:	68fa      	ldr	r2, [r7, #12]
    fb64:	79d2      	ldrb	r2, [r2, #7]
    fb66:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
    fb68:	68fb      	ldr	r3, [r7, #12]
    fb6a:	7a1a      	ldrb	r2, [r3, #8]
    fb6c:	2314      	movs	r3, #20
    fb6e:	18fb      	adds	r3, r7, r3
    fb70:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
    fb72:	68fb      	ldr	r3, [r7, #12]
    fb74:	795b      	ldrb	r3, [r3, #5]
    fb76:	2201      	movs	r2, #1
    fb78:	4053      	eors	r3, r2
    fb7a:	b2db      	uxtb	r3, r3
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d00e      	beq.n	fb9e <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is disable juts ignore all parameters except the channel mask
        datarate = verifyParams->CurrentDatarate;
    fb80:	2316      	movs	r3, #22
    fb82:	18fb      	adds	r3, r7, r3
    fb84:	68fa      	ldr	r2, [r7, #12]
    fb86:	7a52      	ldrb	r2, [r2, #9]
    fb88:	701a      	strb	r2, [r3, #0]
        txPower = verifyParams->CurrentTxPower;
    fb8a:	2315      	movs	r3, #21
    fb8c:	18fb      	adds	r3, r7, r3
    fb8e:	68fa      	ldr	r2, [r7, #12]
    fb90:	7a92      	ldrb	r2, [r2, #10]
    fb92:	701a      	strb	r2, [r3, #0]
        nbRepetitions = verifyParams->CurrentNbRep;
    fb94:	2314      	movs	r3, #20
    fb96:	18fb      	adds	r3, r7, r3
    fb98:	68fa      	ldr	r2, [r7, #12]
    fb9a:	7ad2      	ldrb	r2, [r2, #11]
    fb9c:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
    fb9e:	2317      	movs	r3, #23
    fba0:	18fb      	adds	r3, r7, r3
    fba2:	781b      	ldrb	r3, [r3, #0]
    fba4:	2b00      	cmp	r3, #0
    fba6:	d100      	bne.n	fbaa <RegionCommonLinkAdrReqVerifyParams+0x6e>
    fba8:	e06b      	b.n	fc82 <RegionCommonLinkAdrReqVerifyParams+0x146>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( ( verifyParams->Version.Fields.Minor >= 1 ) && ( datarate == 0xF ) )
    fbaa:	68fb      	ldr	r3, [r7, #12]
    fbac:	789b      	ldrb	r3, [r3, #2]
    fbae:	2b00      	cmp	r3, #0
    fbb0:	d00b      	beq.n	fbca <RegionCommonLinkAdrReqVerifyParams+0x8e>
    fbb2:	2316      	movs	r3, #22
    fbb4:	18fb      	adds	r3, r7, r3
    fbb6:	781b      	ldrb	r3, [r3, #0]
    fbb8:	b25b      	sxtb	r3, r3
    fbba:	2b0f      	cmp	r3, #15
    fbbc:	d105      	bne.n	fbca <RegionCommonLinkAdrReqVerifyParams+0x8e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
    fbbe:	2316      	movs	r3, #22
    fbc0:	18fb      	adds	r3, r7, r3
    fbc2:	68fa      	ldr	r2, [r7, #12]
    fbc4:	7a52      	ldrb	r2, [r2, #9]
    fbc6:	701a      	strb	r2, [r3, #0]
    fbc8:	e025      	b.n	fc16 <RegionCommonLinkAdrReqVerifyParams+0xda>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
    fbca:	68fb      	ldr	r3, [r7, #12]
    fbcc:	7b18      	ldrb	r0, [r3, #12]
    fbce:	68fb      	ldr	r3, [r7, #12]
    fbd0:	691c      	ldr	r4, [r3, #16]
    fbd2:	68fb      	ldr	r3, [r7, #12]
    fbd4:	2514      	movs	r5, #20
    fbd6:	575d      	ldrsb	r5, [r3, r5]
    fbd8:	68fb      	ldr	r3, [r7, #12]
    fbda:	2215      	movs	r2, #21
    fbdc:	569a      	ldrsb	r2, [r3, r2]
    fbde:	68fb      	ldr	r3, [r7, #12]
    fbe0:	699b      	ldr	r3, [r3, #24]
    fbe2:	2116      	movs	r1, #22
    fbe4:	1879      	adds	r1, r7, r1
    fbe6:	7809      	ldrb	r1, [r1, #0]
    fbe8:	b249      	sxtb	r1, r1
    fbea:	9301      	str	r3, [sp, #4]
    fbec:	9200      	str	r2, [sp, #0]
    fbee:	002b      	movs	r3, r5
    fbf0:	000a      	movs	r2, r1
    fbf2:	0021      	movs	r1, r4
    fbf4:	4c3d      	ldr	r4, [pc, #244]	; (fcec <RegionCommonLinkAdrReqVerifyParams+0x1b0>)
    fbf6:	47a0      	blx	r4
    fbf8:	0003      	movs	r3, r0
    fbfa:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
    fbfc:	2301      	movs	r3, #1
    fbfe:	4053      	eors	r3, r2
    fc00:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
    fc02:	2b00      	cmp	r3, #0
    fc04:	d007      	beq.n	fc16 <RegionCommonLinkAdrReqVerifyParams+0xda>
        {
            status &= 0xFD; // Datarate KO
    fc06:	2317      	movs	r3, #23
    fc08:	18fb      	adds	r3, r7, r3
    fc0a:	2217      	movs	r2, #23
    fc0c:	18ba      	adds	r2, r7, r2
    fc0e:	7812      	ldrb	r2, [r2, #0]
    fc10:	2102      	movs	r1, #2
    fc12:	438a      	bics	r2, r1
    fc14:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( (  verifyParams->Version.Fields.Minor >= 1 ) && ( txPower == 0xF ) )
    fc16:	68fb      	ldr	r3, [r7, #12]
    fc18:	789b      	ldrb	r3, [r3, #2]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d00b      	beq.n	fc36 <RegionCommonLinkAdrReqVerifyParams+0xfa>
    fc1e:	2315      	movs	r3, #21
    fc20:	18fb      	adds	r3, r7, r3
    fc22:	781b      	ldrb	r3, [r3, #0]
    fc24:	b25b      	sxtb	r3, r3
    fc26:	2b0f      	cmp	r3, #15
    fc28:	d105      	bne.n	fc36 <RegionCommonLinkAdrReqVerifyParams+0xfa>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
    fc2a:	2315      	movs	r3, #21
    fc2c:	18fb      	adds	r3, r7, r3
    fc2e:	68fa      	ldr	r2, [r7, #12]
    fc30:	7a92      	ldrb	r2, [r2, #10]
    fc32:	701a      	strb	r2, [r3, #0]
    fc34:	e025      	b.n	fc82 <RegionCommonLinkAdrReqVerifyParams+0x146>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
    fc36:	68fb      	ldr	r3, [r7, #12]
    fc38:	211d      	movs	r1, #29
    fc3a:	5659      	ldrsb	r1, [r3, r1]
    fc3c:	68fb      	ldr	r3, [r7, #12]
    fc3e:	221c      	movs	r2, #28
    fc40:	569a      	ldrsb	r2, [r3, r2]
    fc42:	2315      	movs	r3, #21
    fc44:	18fb      	adds	r3, r7, r3
    fc46:	781b      	ldrb	r3, [r3, #0]
    fc48:	b25b      	sxtb	r3, r3
    fc4a:	0018      	movs	r0, r3
    fc4c:	4b28      	ldr	r3, [pc, #160]	; (fcf0 <RegionCommonLinkAdrReqVerifyParams+0x1b4>)
    fc4e:	4798      	blx	r3
    fc50:	1e03      	subs	r3, r0, #0
    fc52:	d116      	bne.n	fc82 <RegionCommonLinkAdrReqVerifyParams+0x146>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
    fc54:	68fb      	ldr	r3, [r7, #12]
    fc56:	7f5b      	ldrb	r3, [r3, #29]
    fc58:	b25b      	sxtb	r3, r3
    fc5a:	2215      	movs	r2, #21
    fc5c:	18ba      	adds	r2, r7, r2
    fc5e:	7812      	ldrb	r2, [r2, #0]
    fc60:	b252      	sxtb	r2, r2
    fc62:	429a      	cmp	r2, r3
    fc64:	da05      	bge.n	fc72 <RegionCommonLinkAdrReqVerifyParams+0x136>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
    fc66:	2315      	movs	r3, #21
    fc68:	18fb      	adds	r3, r7, r3
    fc6a:	68fa      	ldr	r2, [r7, #12]
    fc6c:	7f52      	ldrb	r2, [r2, #29]
    fc6e:	701a      	strb	r2, [r3, #0]
    fc70:	e007      	b.n	fc82 <RegionCommonLinkAdrReqVerifyParams+0x146>
            }
            else
            {
                status &= 0xFB; // TxPower KO
    fc72:	2317      	movs	r3, #23
    fc74:	18fb      	adds	r3, r7, r3
    fc76:	2217      	movs	r2, #23
    fc78:	18ba      	adds	r2, r7, r2
    fc7a:	7812      	ldrb	r2, [r2, #0]
    fc7c:	2104      	movs	r1, #4
    fc7e:	438a      	bics	r2, r1
    fc80:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
    fc82:	2317      	movs	r3, #23
    fc84:	18fb      	adds	r3, r7, r3
    fc86:	781b      	ldrb	r3, [r3, #0]
    fc88:	2b07      	cmp	r3, #7
    fc8a:	d119      	bne.n	fcc0 <RegionCommonLinkAdrReqVerifyParams+0x184>
    {
        if( verifyParams->Version.Fields.Minor < 1 )
    fc8c:	68fb      	ldr	r3, [r7, #12]
    fc8e:	789b      	ldrb	r3, [r3, #2]
    fc90:	2b00      	cmp	r3, #0
    fc92:	d10a      	bne.n	fcaa <RegionCommonLinkAdrReqVerifyParams+0x16e>
        {
            if( nbRepetitions == 0 )
    fc94:	2314      	movs	r3, #20
    fc96:	18fb      	adds	r3, r7, r3
    fc98:	781b      	ldrb	r3, [r3, #0]
    fc9a:	b25b      	sxtb	r3, r3
    fc9c:	2b00      	cmp	r3, #0
    fc9e:	d10f      	bne.n	fcc0 <RegionCommonLinkAdrReqVerifyParams+0x184>
            { // Restore the default value.
                nbRepetitions = 1;
    fca0:	2314      	movs	r3, #20
    fca2:	18fb      	adds	r3, r7, r3
    fca4:	2201      	movs	r2, #1
    fca6:	701a      	strb	r2, [r3, #0]
    fca8:	e00a      	b.n	fcc0 <RegionCommonLinkAdrReqVerifyParams+0x184>
            }
        }
        else
        {
            if( nbRepetitions == 0 )
    fcaa:	2314      	movs	r3, #20
    fcac:	18fb      	adds	r3, r7, r3
    fcae:	781b      	ldrb	r3, [r3, #0]
    fcb0:	b25b      	sxtb	r3, r3
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d104      	bne.n	fcc0 <RegionCommonLinkAdrReqVerifyParams+0x184>
            {  // Keep the current NbTrans value unchanged.
                nbRepetitions = verifyParams->CurrentNbRep;
    fcb6:	2314      	movs	r3, #20
    fcb8:	18fb      	adds	r3, r7, r3
    fcba:	68fa      	ldr	r2, [r7, #12]
    fcbc:	7ad2      	ldrb	r2, [r2, #11]
    fcbe:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // Apply changes
    *dr = datarate;
    fcc0:	68bb      	ldr	r3, [r7, #8]
    fcc2:	2216      	movs	r2, #22
    fcc4:	18ba      	adds	r2, r7, r2
    fcc6:	7812      	ldrb	r2, [r2, #0]
    fcc8:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
    fcca:	687b      	ldr	r3, [r7, #4]
    fccc:	2215      	movs	r2, #21
    fcce:	18ba      	adds	r2, r7, r2
    fcd0:	7812      	ldrb	r2, [r2, #0]
    fcd2:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
    fcd4:	2314      	movs	r3, #20
    fcd6:	18fb      	adds	r3, r7, r3
    fcd8:	781a      	ldrb	r2, [r3, #0]
    fcda:	683b      	ldr	r3, [r7, #0]
    fcdc:	701a      	strb	r2, [r3, #0]

    return status;
    fcde:	2317      	movs	r3, #23
    fce0:	18fb      	adds	r3, r7, r3
    fce2:	781b      	ldrb	r3, [r3, #0]
}
    fce4:	0018      	movs	r0, r3
    fce6:	46bd      	mov	sp, r7
    fce8:	b006      	add	sp, #24
    fcea:	bdb0      	pop	{r4, r5, r7, pc}
    fcec:	0000f559 	.word	0x0000f559
    fcf0:	0000f69d 	.word	0x0000f69d

0000fcf4 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    fcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcf6:	b083      	sub	sp, #12
    fcf8:	af00      	add	r7, sp, #0
    fcfa:	0002      	movs	r2, r0
    fcfc:	6039      	str	r1, [r7, #0]
    fcfe:	1dfb      	adds	r3, r7, #7
    fd00:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
    fd02:	1dfb      	adds	r3, r7, #7
    fd04:	781b      	ldrb	r3, [r3, #0]
    fd06:	2201      	movs	r2, #1
    fd08:	409a      	lsls	r2, r3
    fd0a:	4b0e      	ldr	r3, [pc, #56]	; (fd44 <RegionCommonComputeSymbolTimeLoRa+0x50>)
    fd0c:	0010      	movs	r0, r2
    fd0e:	4798      	blx	r3
    fd10:	0005      	movs	r5, r0
    fd12:	000e      	movs	r6, r1
    fd14:	4b0c      	ldr	r3, [pc, #48]	; (fd48 <RegionCommonComputeSymbolTimeLoRa+0x54>)
    fd16:	6838      	ldr	r0, [r7, #0]
    fd18:	4798      	blx	r3
    fd1a:	0002      	movs	r2, r0
    fd1c:	000b      	movs	r3, r1
    fd1e:	4c0b      	ldr	r4, [pc, #44]	; (fd4c <RegionCommonComputeSymbolTimeLoRa+0x58>)
    fd20:	0028      	movs	r0, r5
    fd22:	0031      	movs	r1, r6
    fd24:	47a0      	blx	r4
    fd26:	0003      	movs	r3, r0
    fd28:	000c      	movs	r4, r1
    fd2a:	0018      	movs	r0, r3
    fd2c:	0021      	movs	r1, r4
    fd2e:	4c08      	ldr	r4, [pc, #32]	; (fd50 <RegionCommonComputeSymbolTimeLoRa+0x5c>)
    fd30:	2200      	movs	r2, #0
    fd32:	4b08      	ldr	r3, [pc, #32]	; (fd54 <RegionCommonComputeSymbolTimeLoRa+0x60>)
    fd34:	47a0      	blx	r4
    fd36:	0003      	movs	r3, r0
    fd38:	000c      	movs	r4, r1
}
    fd3a:	0018      	movs	r0, r3
    fd3c:	0021      	movs	r1, r4
    fd3e:	46bd      	mov	sp, r7
    fd40:	b003      	add	sp, #12
    fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd44:	00019e91 	.word	0x00019e91
    fd48:	00019f15 	.word	0x00019f15
    fd4c:	00018a95 	.word	0x00018a95
    fd50:	000192fd 	.word	0x000192fd
    fd54:	408f4000 	.word	0x408f4000

0000fd58 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    fd58:	b590      	push	{r4, r7, lr}
    fd5a:	b083      	sub	sp, #12
    fd5c:	af00      	add	r7, sp, #0
    fd5e:	0002      	movs	r2, r0
    fd60:	1dfb      	adds	r3, r7, #7
    fd62:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
    fd64:	1dfb      	adds	r3, r7, #7
    fd66:	781a      	ldrb	r2, [r3, #0]
    fd68:	4b07      	ldr	r3, [pc, #28]	; (fd88 <RegionCommonComputeSymbolTimeFsk+0x30>)
    fd6a:	0010      	movs	r0, r2
    fd6c:	4798      	blx	r3
    fd6e:	0002      	movs	r2, r0
    fd70:	000b      	movs	r3, r1
    fd72:	4c06      	ldr	r4, [pc, #24]	; (fd8c <RegionCommonComputeSymbolTimeFsk+0x34>)
    fd74:	2000      	movs	r0, #0
    fd76:	4906      	ldr	r1, [pc, #24]	; (fd90 <RegionCommonComputeSymbolTimeFsk+0x38>)
    fd78:	47a0      	blx	r4
    fd7a:	0003      	movs	r3, r0
    fd7c:	000c      	movs	r4, r1
}
    fd7e:	0018      	movs	r0, r3
    fd80:	0021      	movs	r1, r4
    fd82:	46bd      	mov	sp, r7
    fd84:	b003      	add	sp, #12
    fd86:	bd90      	pop	{r4, r7, pc}
    fd88:	00019f15 	.word	0x00019f15
    fd8c:	00018a95 	.word	0x00018a95
    fd90:	40200000 	.word	0x40200000

0000fd94 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
    fd94:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd96:	b087      	sub	sp, #28
    fd98:	af00      	add	r7, sp, #0
    fd9a:	6138      	str	r0, [r7, #16]
    fd9c:	6179      	str	r1, [r7, #20]
    fd9e:	60bb      	str	r3, [r7, #8]
    fda0:	230f      	movs	r3, #15
    fda2:	18fb      	adds	r3, r7, r3
    fda4:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
    fda6:	230f      	movs	r3, #15
    fda8:	18fb      	adds	r3, r7, r3
    fdaa:	781d      	ldrb	r5, [r3, #0]
    fdac:	230f      	movs	r3, #15
    fdae:	18fb      	adds	r3, r7, r3
    fdb0:	781b      	ldrb	r3, [r3, #0]
    fdb2:	3b04      	subs	r3, #4
    fdb4:	005a      	lsls	r2, r3, #1
    fdb6:	4b3a      	ldr	r3, [pc, #232]	; (fea0 <RegionCommonComputeRxWindowParameters+0x10c>)
    fdb8:	0010      	movs	r0, r2
    fdba:	4798      	blx	r3
    fdbc:	4c39      	ldr	r4, [pc, #228]	; (fea4 <RegionCommonComputeRxWindowParameters+0x110>)
    fdbe:	693a      	ldr	r2, [r7, #16]
    fdc0:	697b      	ldr	r3, [r7, #20]
    fdc2:	47a0      	blx	r4
    fdc4:	0003      	movs	r3, r0
    fdc6:	000c      	movs	r4, r1
    fdc8:	603b      	str	r3, [r7, #0]
    fdca:	607c      	str	r4, [r7, #4]
    fdcc:	68bb      	ldr	r3, [r7, #8]
    fdce:	005a      	lsls	r2, r3, #1
    fdd0:	4b35      	ldr	r3, [pc, #212]	; (fea8 <RegionCommonComputeRxWindowParameters+0x114>)
    fdd2:	0010      	movs	r0, r2
    fdd4:	4798      	blx	r3
    fdd6:	0002      	movs	r2, r0
    fdd8:	000b      	movs	r3, r1
    fdda:	4c34      	ldr	r4, [pc, #208]	; (feac <RegionCommonComputeRxWindowParameters+0x118>)
    fddc:	6838      	ldr	r0, [r7, #0]
    fdde:	6879      	ldr	r1, [r7, #4]
    fde0:	47a0      	blx	r4
    fde2:	0003      	movs	r3, r0
    fde4:	000c      	movs	r4, r1
    fde6:	0018      	movs	r0, r3
    fde8:	0021      	movs	r1, r4
    fdea:	4c31      	ldr	r4, [pc, #196]	; (feb0 <RegionCommonComputeRxWindowParameters+0x11c>)
    fdec:	693a      	ldr	r2, [r7, #16]
    fdee:	697b      	ldr	r3, [r7, #20]
    fdf0:	47a0      	blx	r4
    fdf2:	0003      	movs	r3, r0
    fdf4:	000c      	movs	r4, r1
    fdf6:	0018      	movs	r0, r3
    fdf8:	0021      	movs	r1, r4
    fdfa:	4b2e      	ldr	r3, [pc, #184]	; (feb4 <RegionCommonComputeRxWindowParameters+0x120>)
    fdfc:	4798      	blx	r3
    fdfe:	000a      	movs	r2, r1
    fe00:	0001      	movs	r1, r0
    fe02:	4b2d      	ldr	r3, [pc, #180]	; (feb8 <RegionCommonComputeRxWindowParameters+0x124>)
    fe04:	0008      	movs	r0, r1
    fe06:	0011      	movs	r1, r2
    fe08:	4798      	blx	r3
    fe0a:	0002      	movs	r2, r0
    fe0c:	002b      	movs	r3, r5
    fe0e:	4293      	cmp	r3, r2
    fe10:	d200      	bcs.n	fe14 <RegionCommonComputeRxWindowParameters+0x80>
    fe12:	0013      	movs	r3, r2
    fe14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fe16:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
    fe18:	4c22      	ldr	r4, [pc, #136]	; (fea4 <RegionCommonComputeRxWindowParameters+0x110>)
    fe1a:	2200      	movs	r2, #0
    fe1c:	4b27      	ldr	r3, [pc, #156]	; (febc <RegionCommonComputeRxWindowParameters+0x128>)
    fe1e:	6938      	ldr	r0, [r7, #16]
    fe20:	6979      	ldr	r1, [r7, #20]
    fe22:	47a0      	blx	r4
    fe24:	0003      	movs	r3, r0
    fe26:	000c      	movs	r4, r1
    fe28:	001d      	movs	r5, r3
    fe2a:	0026      	movs	r6, r4
    fe2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fe2e:	681a      	ldr	r2, [r3, #0]
    fe30:	4b1d      	ldr	r3, [pc, #116]	; (fea8 <RegionCommonComputeRxWindowParameters+0x114>)
    fe32:	0010      	movs	r0, r2
    fe34:	4798      	blx	r3
    fe36:	4c1b      	ldr	r4, [pc, #108]	; (fea4 <RegionCommonComputeRxWindowParameters+0x110>)
    fe38:	693a      	ldr	r2, [r7, #16]
    fe3a:	697b      	ldr	r3, [r7, #20]
    fe3c:	47a0      	blx	r4
    fe3e:	0003      	movs	r3, r0
    fe40:	000c      	movs	r4, r1
    fe42:	0018      	movs	r0, r3
    fe44:	0021      	movs	r1, r4
    fe46:	4c1a      	ldr	r4, [pc, #104]	; (feb0 <RegionCommonComputeRxWindowParameters+0x11c>)
    fe48:	2200      	movs	r2, #0
    fe4a:	2380      	movs	r3, #128	; 0x80
    fe4c:	05db      	lsls	r3, r3, #23
    fe4e:	47a0      	blx	r4
    fe50:	0003      	movs	r3, r0
    fe52:	000c      	movs	r4, r1
    fe54:	001a      	movs	r2, r3
    fe56:	0023      	movs	r3, r4
    fe58:	4c19      	ldr	r4, [pc, #100]	; (fec0 <RegionCommonComputeRxWindowParameters+0x12c>)
    fe5a:	0028      	movs	r0, r5
    fe5c:	0031      	movs	r1, r6
    fe5e:	47a0      	blx	r4
    fe60:	0003      	movs	r3, r0
    fe62:	000c      	movs	r4, r1
    fe64:	001d      	movs	r5, r3
    fe66:	0026      	movs	r6, r4
    fe68:	4b0f      	ldr	r3, [pc, #60]	; (fea8 <RegionCommonComputeRxWindowParameters+0x114>)
    fe6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    fe6c:	4798      	blx	r3
    fe6e:	0002      	movs	r2, r0
    fe70:	000b      	movs	r3, r1
    fe72:	4c13      	ldr	r4, [pc, #76]	; (fec0 <RegionCommonComputeRxWindowParameters+0x12c>)
    fe74:	0028      	movs	r0, r5
    fe76:	0031      	movs	r1, r6
    fe78:	47a0      	blx	r4
    fe7a:	0003      	movs	r3, r0
    fe7c:	000c      	movs	r4, r1
    fe7e:	0018      	movs	r0, r3
    fe80:	0021      	movs	r1, r4
    fe82:	4b0c      	ldr	r3, [pc, #48]	; (feb4 <RegionCommonComputeRxWindowParameters+0x120>)
    fe84:	4798      	blx	r3
    fe86:	000a      	movs	r2, r1
    fe88:	0001      	movs	r1, r0
    fe8a:	4b0e      	ldr	r3, [pc, #56]	; (fec4 <RegionCommonComputeRxWindowParameters+0x130>)
    fe8c:	0008      	movs	r0, r1
    fe8e:	0011      	movs	r1, r2
    fe90:	4798      	blx	r3
    fe92:	0002      	movs	r2, r0
    fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fe96:	601a      	str	r2, [r3, #0]
}
    fe98:	46c0      	nop			; (mov r8, r8)
    fe9a:	46bd      	mov	sp, r7
    fe9c:	b007      	add	sp, #28
    fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fea0:	00019e91 	.word	0x00019e91
    fea4:	000192fd 	.word	0x000192fd
    fea8:	00019f15 	.word	0x00019f15
    feac:	00018475 	.word	0x00018475
    feb0:	00018a95 	.word	0x00018a95
    feb4:	00017845 	.word	0x00017845
    feb8:	00017ef5 	.word	0x00017ef5
    febc:	40100000 	.word	0x40100000
    fec0:	000197fd 	.word	0x000197fd
    fec4:	00019e29 	.word	0x00019e29

0000fec8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    fec8:	b590      	push	{r4, r7, lr}
    feca:	b087      	sub	sp, #28
    fecc:	af00      	add	r7, sp, #0
    fece:	60b9      	str	r1, [r7, #8]
    fed0:	607a      	str	r2, [r7, #4]
    fed2:	230f      	movs	r3, #15
    fed4:	18fb      	adds	r3, r7, r3
    fed6:	1c02      	adds	r2, r0, #0
    fed8:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
    feda:	2317      	movs	r3, #23
    fedc:	18fb      	adds	r3, r7, r3
    fede:	2200      	movs	r2, #0
    fee0:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
    fee2:	230f      	movs	r3, #15
    fee4:	18fb      	adds	r3, r7, r3
    fee6:	781b      	ldrb	r3, [r3, #0]
    fee8:	b25b      	sxtb	r3, r3
    feea:	005a      	lsls	r2, r3, #1
    feec:	4b15      	ldr	r3, [pc, #84]	; (ff44 <RegionCommonComputeTxPower+0x7c>)
    feee:	0010      	movs	r0, r2
    fef0:	4798      	blx	r3
    fef2:	1c02      	adds	r2, r0, #0
    fef4:	4b14      	ldr	r3, [pc, #80]	; (ff48 <RegionCommonComputeTxPower+0x80>)
    fef6:	1c11      	adds	r1, r2, #0
    fef8:	68b8      	ldr	r0, [r7, #8]
    fefa:	4798      	blx	r3
    fefc:	1c03      	adds	r3, r0, #0
    fefe:	1c1a      	adds	r2, r3, #0
    ff00:	4b11      	ldr	r3, [pc, #68]	; (ff48 <RegionCommonComputeTxPower+0x80>)
    ff02:	6879      	ldr	r1, [r7, #4]
    ff04:	1c10      	adds	r0, r2, #0
    ff06:	4798      	blx	r3
    ff08:	1c03      	adds	r3, r0, #0
    ff0a:	1c1a      	adds	r2, r3, #0
    ff0c:	4b0f      	ldr	r3, [pc, #60]	; (ff4c <RegionCommonComputeTxPower+0x84>)
    ff0e:	1c10      	adds	r0, r2, #0
    ff10:	4798      	blx	r3
    ff12:	0003      	movs	r3, r0
    ff14:	000c      	movs	r4, r1
    ff16:	0018      	movs	r0, r3
    ff18:	0021      	movs	r1, r4
    ff1a:	4b0d      	ldr	r3, [pc, #52]	; (ff50 <RegionCommonComputeTxPower+0x88>)
    ff1c:	4798      	blx	r3
    ff1e:	000a      	movs	r2, r1
    ff20:	0001      	movs	r1, r0
    ff22:	2317      	movs	r3, #23
    ff24:	18fc      	adds	r4, r7, r3
    ff26:	4b0b      	ldr	r3, [pc, #44]	; (ff54 <RegionCommonComputeTxPower+0x8c>)
    ff28:	0008      	movs	r0, r1
    ff2a:	0011      	movs	r1, r2
    ff2c:	4798      	blx	r3
    ff2e:	0003      	movs	r3, r0
    ff30:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
    ff32:	2317      	movs	r3, #23
    ff34:	18fb      	adds	r3, r7, r3
    ff36:	781b      	ldrb	r3, [r3, #0]
    ff38:	b25b      	sxtb	r3, r3
}
    ff3a:	0018      	movs	r0, r3
    ff3c:	46bd      	mov	sp, r7
    ff3e:	b007      	add	sp, #28
    ff40:	bd90      	pop	{r4, r7, pc}
    ff42:	46c0      	nop			; (mov r8, r8)
    ff44:	000183e9 	.word	0x000183e9
    ff48:	000180b1 	.word	0x000180b1
    ff4c:	00019f85 	.word	0x00019f85
    ff50:	00017971 	.word	0x00017971
    ff54:	00019e29 	.word	0x00019e29

0000ff58 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
    ff58:	b590      	push	{r4, r7, lr}
    ff5a:	b085      	sub	sp, #20
    ff5c:	af00      	add	r7, sp, #0
    ff5e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	681a      	ldr	r2, [r3, #0]
    ff64:	687b      	ldr	r3, [r7, #4]
    ff66:	7adb      	ldrb	r3, [r3, #11]
    ff68:	0019      	movs	r1, r3
    ff6a:	000b      	movs	r3, r1
    ff6c:	005b      	lsls	r3, r3, #1
    ff6e:	185b      	adds	r3, r3, r1
    ff70:	009b      	lsls	r3, r3, #2
    ff72:	18d2      	adds	r2, r2, r3
    ff74:	230f      	movs	r3, #15
    ff76:	18fb      	adds	r3, r7, r3
    ff78:	7a52      	ldrb	r2, [r2, #9]
    ff7a:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
    ff7c:	687b      	ldr	r3, [r7, #4]
    ff7e:	685a      	ldr	r2, [r3, #4]
    ff80:	230f      	movs	r3, #15
    ff82:	18fb      	adds	r3, r7, r3
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	011b      	lsls	r3, r3, #4
    ff88:	18d2      	adds	r2, r2, r3
    ff8a:	230c      	movs	r3, #12
    ff8c:	18fb      	adds	r3, r7, r3
    ff8e:	8812      	ldrh	r2, [r2, #0]
    ff90:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
    ff92:	230a      	movs	r3, #10
    ff94:	18fb      	adds	r3, r7, r3
    ff96:	2200      	movs	r2, #0
    ff98:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
    ff9a:	687b      	ldr	r3, [r7, #4]
    ff9c:	685a      	ldr	r2, [r3, #4]
    ff9e:	230f      	movs	r3, #15
    ffa0:	18fb      	adds	r3, r7, r3
    ffa2:	781b      	ldrb	r3, [r3, #0]
    ffa4:	011b      	lsls	r3, r3, #4
    ffa6:	18d3      	adds	r3, r2, r3
    ffa8:	2200      	movs	r2, #0
    ffaa:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
    ffac:	687b      	ldr	r3, [r7, #4]
    ffae:	7a5b      	ldrb	r3, [r3, #9]
    ffb0:	2201      	movs	r2, #1
    ffb2:	4053      	eors	r3, r2
    ffb4:	b2db      	uxtb	r3, r3
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d03e      	beq.n	10038 <RegionCommonCalcBackOff+0xe0>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
    ffba:	230a      	movs	r3, #10
    ffbc:	18fc      	adds	r4, r7, r3
    ffbe:	687b      	ldr	r3, [r7, #4]
    ffc0:	68d8      	ldr	r0, [r3, #12]
    ffc2:	6919      	ldr	r1, [r3, #16]
    ffc4:	4b2d      	ldr	r3, [pc, #180]	; (1007c <RegionCommonCalcBackOff+0x124>)
    ffc6:	4798      	blx	r3
    ffc8:	0003      	movs	r3, r0
    ffca:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
    ffcc:	230c      	movs	r3, #12
    ffce:	18fa      	adds	r2, r7, r3
    ffd0:	230a      	movs	r3, #10
    ffd2:	18fb      	adds	r3, r7, r3
    ffd4:	210c      	movs	r1, #12
    ffd6:	1879      	adds	r1, r7, r1
    ffd8:	880c      	ldrh	r4, [r1, #0]
    ffda:	881b      	ldrh	r3, [r3, #0]
    ffdc:	b298      	uxth	r0, r3
    ffde:	b2a1      	uxth	r1, r4
    ffe0:	4288      	cmp	r0, r1
    ffe2:	d200      	bcs.n	ffe6 <RegionCommonCalcBackOff+0x8e>
    ffe4:	1c23      	adds	r3, r4, #0
    ffe6:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
    ffe8:	687b      	ldr	r3, [r7, #4]
    ffea:	7a9b      	ldrb	r3, [r3, #10]
    ffec:	2201      	movs	r2, #1
    ffee:	4053      	eors	r3, r2
    fff0:	b2db      	uxtb	r3, r3
    fff2:	2b00      	cmp	r3, #0
    fff4:	d010      	beq.n	10018 <RegionCommonCalcBackOff+0xc0>
    fff6:	687b      	ldr	r3, [r7, #4]
    fff8:	7a1b      	ldrb	r3, [r3, #8]
    fffa:	2201      	movs	r2, #1
    fffc:	4053      	eors	r3, r2
    fffe:	b2db      	uxtb	r3, r3
   10000:	2b00      	cmp	r3, #0
   10002:	d009      	beq.n	10018 <RegionCommonCalcBackOff+0xc0>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
   10004:	687b      	ldr	r3, [r7, #4]
   10006:	685a      	ldr	r2, [r3, #4]
   10008:	230f      	movs	r3, #15
   1000a:	18fb      	adds	r3, r7, r3
   1000c:	781b      	ldrb	r3, [r3, #0]
   1000e:	011b      	lsls	r3, r3, #4
   10010:	18d3      	adds	r3, r2, r3
   10012:	2200      	movs	r2, #0
   10014:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
   10016:	e02c      	b.n	10072 <RegionCommonCalcBackOff+0x11a>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
   10018:	687b      	ldr	r3, [r7, #4]
   1001a:	685a      	ldr	r2, [r3, #4]
   1001c:	230f      	movs	r3, #15
   1001e:	18fb      	adds	r3, r7, r3
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	011b      	lsls	r3, r3, #4
   10024:	18d3      	adds	r3, r2, r3
   10026:	220c      	movs	r2, #12
   10028:	18ba      	adds	r2, r7, r2
   1002a:	8812      	ldrh	r2, [r2, #0]
   1002c:	1e51      	subs	r1, r2, #1
   1002e:	687a      	ldr	r2, [r7, #4]
   10030:	6952      	ldr	r2, [r2, #20]
   10032:	434a      	muls	r2, r1
   10034:	60da      	str	r2, [r3, #12]
}
   10036:	e01c      	b.n	10072 <RegionCommonCalcBackOff+0x11a>
        if( calcBackOffParams->DutyCycleEnabled == true )
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	7a9b      	ldrb	r3, [r3, #10]
   1003c:	2b00      	cmp	r3, #0
   1003e:	d00f      	beq.n	10060 <RegionCommonCalcBackOff+0x108>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
   10040:	687b      	ldr	r3, [r7, #4]
   10042:	685a      	ldr	r2, [r3, #4]
   10044:	230f      	movs	r3, #15
   10046:	18fb      	adds	r3, r7, r3
   10048:	781b      	ldrb	r3, [r3, #0]
   1004a:	011b      	lsls	r3, r3, #4
   1004c:	18d3      	adds	r3, r2, r3
   1004e:	220c      	movs	r2, #12
   10050:	18ba      	adds	r2, r7, r2
   10052:	8812      	ldrh	r2, [r2, #0]
   10054:	1e51      	subs	r1, r2, #1
   10056:	687a      	ldr	r2, [r7, #4]
   10058:	6952      	ldr	r2, [r2, #20]
   1005a:	434a      	muls	r2, r1
   1005c:	60da      	str	r2, [r3, #12]
}
   1005e:	e008      	b.n	10072 <RegionCommonCalcBackOff+0x11a>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
   10060:	687b      	ldr	r3, [r7, #4]
   10062:	685a      	ldr	r2, [r3, #4]
   10064:	230f      	movs	r3, #15
   10066:	18fb      	adds	r3, r7, r3
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	011b      	lsls	r3, r3, #4
   1006c:	18d3      	adds	r3, r2, r3
   1006e:	2200      	movs	r2, #0
   10070:	60da      	str	r2, [r3, #12]
}
   10072:	46c0      	nop			; (mov r8, r8)
   10074:	46bd      	mov	sp, r7
   10076:	b005      	add	sp, #20
   10078:	bd90      	pop	{r4, r7, pc}
   1007a:	46c0      	nop			; (mov r8, r8)
   1007c:	0000f4f9 	.word	0x0000f4f9

00010080 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
   10080:	b580      	push	{r7, lr}
   10082:	b084      	sub	sp, #16
   10084:	af00      	add	r7, sp, #0
   10086:	0002      	movs	r2, r0
   10088:	1dfb      	adds	r3, r7, #7
   1008a:	701a      	strb	r2, [r3, #0]
   1008c:	1dbb      	adds	r3, r7, #6
   1008e:	1c0a      	adds	r2, r1, #0
   10090:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
   10092:	230f      	movs	r3, #15
   10094:	18fb      	adds	r3, r7, r3
   10096:	2200      	movs	r2, #0
   10098:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
   1009a:	1dfa      	adds	r2, r7, #7
   1009c:	1dbb      	adds	r3, r7, #6
   1009e:	7812      	ldrb	r2, [r2, #0]
   100a0:	b252      	sxtb	r2, r2
   100a2:	781b      	ldrb	r3, [r3, #0]
   100a4:	b25b      	sxtb	r3, r3
   100a6:	429a      	cmp	r2, r3
   100a8:	d105      	bne.n	100b6 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
   100aa:	230f      	movs	r3, #15
   100ac:	18fb      	adds	r3, r7, r3
   100ae:	1dba      	adds	r2, r7, #6
   100b0:	7812      	ldrb	r2, [r2, #0]
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	e005      	b.n	100c2 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
   100b6:	1dfb      	adds	r3, r7, #7
   100b8:	781a      	ldrb	r2, [r3, #0]
   100ba:	230f      	movs	r3, #15
   100bc:	18fb      	adds	r3, r7, r3
   100be:	3a01      	subs	r2, #1
   100c0:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
   100c2:	230f      	movs	r3, #15
   100c4:	18fb      	adds	r3, r7, r3
   100c6:	781b      	ldrb	r3, [r3, #0]
   100c8:	b25b      	sxtb	r3, r3
}
   100ca:	0018      	movs	r0, r3
   100cc:	46bd      	mov	sp, r7
   100ce:	b004      	add	sp, #16
   100d0:	bd80      	pop	{r7, pc}
	...

000100d4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
   100d4:	b580      	push	{r7, lr}
   100d6:	b082      	sub	sp, #8
   100d8:	af00      	add	r7, sp, #0
   100da:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
   100dc:	4b09      	ldr	r3, [pc, #36]	; (10104 <GetBandwidth+0x30>)
   100de:	687a      	ldr	r2, [r7, #4]
   100e0:	0092      	lsls	r2, r2, #2
   100e2:	58d3      	ldr	r3, [r2, r3]
   100e4:	4a08      	ldr	r2, [pc, #32]	; (10108 <GetBandwidth+0x34>)
   100e6:	4293      	cmp	r3, r2
   100e8:	d004      	beq.n	100f4 <GetBandwidth+0x20>
   100ea:	4a08      	ldr	r2, [pc, #32]	; (1010c <GetBandwidth+0x38>)
   100ec:	4293      	cmp	r3, r2
   100ee:	d003      	beq.n	100f8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
   100f0:	2300      	movs	r3, #0
   100f2:	e002      	b.n	100fa <GetBandwidth+0x26>
        case 250000:
            return 1;
   100f4:	2301      	movs	r3, #1
   100f6:	e000      	b.n	100fa <GetBandwidth+0x26>
        case 500000:
            return 2;
   100f8:	2302      	movs	r3, #2
    }
}
   100fa:	0018      	movs	r0, r3
   100fc:	46bd      	mov	sp, r7
   100fe:	b002      	add	sp, #8
   10100:	bd80      	pop	{r7, pc}
   10102:	46c0      	nop			; (mov r8, r8)
   10104:	0001f3e0 	.word	0x0001f3e0
   10108:	0003d090 	.word	0x0003d090
   1010c:	0007a120 	.word	0x0007a120

00010110 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
   10110:	b590      	push	{r4, r7, lr}
   10112:	b085      	sub	sp, #20
   10114:	af00      	add	r7, sp, #0
   10116:	0004      	movs	r4, r0
   10118:	0008      	movs	r0, r1
   1011a:	0011      	movs	r1, r2
   1011c:	603b      	str	r3, [r7, #0]
   1011e:	1dfb      	adds	r3, r7, #7
   10120:	1c22      	adds	r2, r4, #0
   10122:	701a      	strb	r2, [r3, #0]
   10124:	1dbb      	adds	r3, r7, #6
   10126:	1c02      	adds	r2, r0, #0
   10128:	701a      	strb	r2, [r3, #0]
   1012a:	1d7b      	adds	r3, r7, #5
   1012c:	1c0a      	adds	r2, r1, #0
   1012e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
   10130:	230f      	movs	r3, #15
   10132:	18fb      	adds	r3, r7, r3
   10134:	1dfa      	adds	r2, r7, #7
   10136:	7812      	ldrb	r2, [r2, #0]
   10138:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
   1013a:	230f      	movs	r3, #15
   1013c:	18fa      	adds	r2, r7, r3
   1013e:	1dbb      	adds	r3, r7, #6
   10140:	1df9      	adds	r1, r7, #7
   10142:	780c      	ldrb	r4, [r1, #0]
   10144:	781b      	ldrb	r3, [r3, #0]
   10146:	b258      	sxtb	r0, r3
   10148:	b261      	sxtb	r1, r4
   1014a:	4288      	cmp	r0, r1
   1014c:	da00      	bge.n	10150 <LimitTxPower+0x40>
   1014e:	1c23      	adds	r3, r4, #0
   10150:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
   10152:	230f      	movs	r3, #15
   10154:	18fb      	adds	r3, r7, r3
   10156:	781b      	ldrb	r3, [r3, #0]
   10158:	b25b      	sxtb	r3, r3
}
   1015a:	0018      	movs	r0, r3
   1015c:	46bd      	mov	sp, r7
   1015e:	b005      	add	sp, #20
   10160:	bd90      	pop	{r4, r7, pc}
	...

00010164 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
   10164:	b580      	push	{r7, lr}
   10166:	b082      	sub	sp, #8
   10168:	af00      	add	r7, sp, #0
   1016a:	6078      	str	r0, [r7, #4]
   1016c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
   1016e:	4b2e      	ldr	r3, [pc, #184]	; (10228 <VerifyRfFreq+0xc4>)
   10170:	6a1b      	ldr	r3, [r3, #32]
   10172:	687a      	ldr	r2, [r7, #4]
   10174:	0010      	movs	r0, r2
   10176:	4798      	blx	r3
   10178:	0003      	movs	r3, r0
   1017a:	001a      	movs	r2, r3
   1017c:	2301      	movs	r3, #1
   1017e:	4053      	eors	r3, r2
   10180:	b2db      	uxtb	r3, r3
   10182:	2b00      	cmp	r3, #0
   10184:	d001      	beq.n	1018a <VerifyRfFreq+0x26>
    {
        return false;
   10186:	2300      	movs	r3, #0
   10188:	e04a      	b.n	10220 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
   1018a:	687b      	ldr	r3, [r7, #4]
   1018c:	4a27      	ldr	r2, [pc, #156]	; (1022c <VerifyRfFreq+0xc8>)
   1018e:	4293      	cmp	r3, r2
   10190:	d907      	bls.n	101a2 <VerifyRfFreq+0x3e>
   10192:	687b      	ldr	r3, [r7, #4]
   10194:	4a26      	ldr	r2, [pc, #152]	; (10230 <VerifyRfFreq+0xcc>)
   10196:	4293      	cmp	r3, r2
   10198:	d803      	bhi.n	101a2 <VerifyRfFreq+0x3e>
    {
        *band = 2;
   1019a:	683b      	ldr	r3, [r7, #0]
   1019c:	2202      	movs	r2, #2
   1019e:	701a      	strb	r2, [r3, #0]
   101a0:	e03d      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
   101a2:	687b      	ldr	r3, [r7, #4]
   101a4:	4a22      	ldr	r2, [pc, #136]	; (10230 <VerifyRfFreq+0xcc>)
   101a6:	4293      	cmp	r3, r2
   101a8:	d907      	bls.n	101ba <VerifyRfFreq+0x56>
   101aa:	687b      	ldr	r3, [r7, #4]
   101ac:	4a21      	ldr	r2, [pc, #132]	; (10234 <VerifyRfFreq+0xd0>)
   101ae:	4293      	cmp	r3, r2
   101b0:	d803      	bhi.n	101ba <VerifyRfFreq+0x56>
    {
        *band = 0;
   101b2:	683b      	ldr	r3, [r7, #0]
   101b4:	2200      	movs	r2, #0
   101b6:	701a      	strb	r2, [r3, #0]
   101b8:	e031      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
   101ba:	687b      	ldr	r3, [r7, #4]
   101bc:	4a1d      	ldr	r2, [pc, #116]	; (10234 <VerifyRfFreq+0xd0>)
   101be:	4293      	cmp	r3, r2
   101c0:	d907      	bls.n	101d2 <VerifyRfFreq+0x6e>
   101c2:	687b      	ldr	r3, [r7, #4]
   101c4:	4a1c      	ldr	r2, [pc, #112]	; (10238 <VerifyRfFreq+0xd4>)
   101c6:	4293      	cmp	r3, r2
   101c8:	d803      	bhi.n	101d2 <VerifyRfFreq+0x6e>
    {
        *band = 1;
   101ca:	683b      	ldr	r3, [r7, #0]
   101cc:	2201      	movs	r2, #1
   101ce:	701a      	strb	r2, [r3, #0]
   101d0:	e025      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
   101d2:	687b      	ldr	r3, [r7, #4]
   101d4:	4a19      	ldr	r2, [pc, #100]	; (1023c <VerifyRfFreq+0xd8>)
   101d6:	4293      	cmp	r3, r2
   101d8:	d907      	bls.n	101ea <VerifyRfFreq+0x86>
   101da:	687b      	ldr	r3, [r7, #4]
   101dc:	4a18      	ldr	r2, [pc, #96]	; (10240 <VerifyRfFreq+0xdc>)
   101de:	4293      	cmp	r3, r2
   101e0:	d803      	bhi.n	101ea <VerifyRfFreq+0x86>
    {
        *band = 2;
   101e2:	683b      	ldr	r3, [r7, #0]
   101e4:	2202      	movs	r2, #2
   101e6:	701a      	strb	r2, [r3, #0]
   101e8:	e019      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
   101ea:	687b      	ldr	r3, [r7, #4]
   101ec:	4a15      	ldr	r2, [pc, #84]	; (10244 <VerifyRfFreq+0xe0>)
   101ee:	4293      	cmp	r3, r2
   101f0:	d907      	bls.n	10202 <VerifyRfFreq+0x9e>
   101f2:	687b      	ldr	r3, [r7, #4]
   101f4:	4a14      	ldr	r2, [pc, #80]	; (10248 <VerifyRfFreq+0xe4>)
   101f6:	4293      	cmp	r3, r2
   101f8:	d803      	bhi.n	10202 <VerifyRfFreq+0x9e>
    {
        *band = 3;
   101fa:	683b      	ldr	r3, [r7, #0]
   101fc:	2203      	movs	r2, #3
   101fe:	701a      	strb	r2, [r3, #0]
   10200:	e00d      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
   10202:	687b      	ldr	r3, [r7, #4]
   10204:	4a11      	ldr	r2, [pc, #68]	; (1024c <VerifyRfFreq+0xe8>)
   10206:	4293      	cmp	r3, r2
   10208:	d907      	bls.n	1021a <VerifyRfFreq+0xb6>
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	4a10      	ldr	r2, [pc, #64]	; (10250 <VerifyRfFreq+0xec>)
   1020e:	4293      	cmp	r3, r2
   10210:	d803      	bhi.n	1021a <VerifyRfFreq+0xb6>
    {
        *band = 4;
   10212:	683b      	ldr	r3, [r7, #0]
   10214:	2204      	movs	r2, #4
   10216:	701a      	strb	r2, [r3, #0]
   10218:	e001      	b.n	1021e <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
   1021a:	2300      	movs	r3, #0
   1021c:	e000      	b.n	10220 <VerifyRfFreq+0xbc>
    }
    return true;
   1021e:	2301      	movs	r3, #1
}
   10220:	0018      	movs	r0, r3
   10222:	46bd      	mov	sp, r7
   10224:	b002      	add	sp, #8
   10226:	bd80      	pop	{r7, pc}
   10228:	0001efe8 	.word	0x0001efe8
   1022c:	337055bf 	.word	0x337055bf
   10230:	338eda3f 	.word	0x338eda3f
   10234:	33bca100 	.word	0x33bca100
   10238:	33c5c8c0 	.word	0x33c5c8c0
   1023c:	33c74f5f 	.word	0x33c74f5f
   10240:	33cef080 	.word	0x33cef080
   10244:	33d1fdbf 	.word	0x33d1fdbf
   10248:	33d5ce50 	.word	0x33d5ce50
   1024c:	33d6919f 	.word	0x33d6919f
   10250:	33db2580 	.word	0x33db2580

00010254 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
   10254:	b580      	push	{r7, lr}
   10256:	b086      	sub	sp, #24
   10258:	af00      	add	r7, sp, #0
   1025a:	60ba      	str	r2, [r7, #8]
   1025c:	607b      	str	r3, [r7, #4]
   1025e:	230f      	movs	r3, #15
   10260:	18fb      	adds	r3, r7, r3
   10262:	1c02      	adds	r2, r0, #0
   10264:	701a      	strb	r2, [r3, #0]
   10266:	230e      	movs	r3, #14
   10268:	18fb      	adds	r3, r7, r3
   1026a:	1c0a      	adds	r2, r1, #0
   1026c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
   1026e:	2317      	movs	r3, #23
   10270:	18fb      	adds	r3, r7, r3
   10272:	2200      	movs	r2, #0
   10274:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
   10276:	2316      	movs	r3, #22
   10278:	18fb      	adds	r3, r7, r3
   1027a:	2200      	movs	r2, #0
   1027c:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
   1027e:	2315      	movs	r3, #21
   10280:	18fb      	adds	r3, r7, r3
   10282:	2200      	movs	r2, #0
   10284:	701a      	strb	r2, [r3, #0]
   10286:	2314      	movs	r3, #20
   10288:	18fb      	adds	r3, r7, r3
   1028a:	2200      	movs	r2, #0
   1028c:	701a      	strb	r2, [r3, #0]
   1028e:	e0bc      	b.n	1040a <CountNbOfEnabledChannels+0x1b6>
    {
        for( uint8_t j = 0; j < 16; j++ )
   10290:	2313      	movs	r3, #19
   10292:	18fb      	adds	r3, r7, r3
   10294:	2200      	movs	r2, #0
   10296:	701a      	strb	r2, [r3, #0]
   10298:	e0a3      	b.n	103e2 <CountNbOfEnabledChannels+0x18e>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
   1029a:	2314      	movs	r3, #20
   1029c:	18fb      	adds	r3, r7, r3
   1029e:	781b      	ldrb	r3, [r3, #0]
   102a0:	005b      	lsls	r3, r3, #1
   102a2:	68ba      	ldr	r2, [r7, #8]
   102a4:	18d3      	adds	r3, r2, r3
   102a6:	881b      	ldrh	r3, [r3, #0]
   102a8:	001a      	movs	r2, r3
   102aa:	2313      	movs	r3, #19
   102ac:	18fb      	adds	r3, r7, r3
   102ae:	781b      	ldrb	r3, [r3, #0]
   102b0:	411a      	asrs	r2, r3
   102b2:	0013      	movs	r3, r2
   102b4:	2201      	movs	r2, #1
   102b6:	4013      	ands	r3, r2
   102b8:	d100      	bne.n	102bc <CountNbOfEnabledChannels+0x68>
   102ba:	e08b      	b.n	103d4 <CountNbOfEnabledChannels+0x180>
            {
                if( channels[i + j].Frequency == 0 )
   102bc:	2315      	movs	r3, #21
   102be:	18fb      	adds	r3, r7, r3
   102c0:	781a      	ldrb	r2, [r3, #0]
   102c2:	2313      	movs	r3, #19
   102c4:	18fb      	adds	r3, r7, r3
   102c6:	781b      	ldrb	r3, [r3, #0]
   102c8:	18d3      	adds	r3, r2, r3
   102ca:	001a      	movs	r2, r3
   102cc:	0013      	movs	r3, r2
   102ce:	005b      	lsls	r3, r3, #1
   102d0:	189b      	adds	r3, r3, r2
   102d2:	009b      	lsls	r3, r3, #2
   102d4:	001a      	movs	r2, r3
   102d6:	687b      	ldr	r3, [r7, #4]
   102d8:	189b      	adds	r3, r3, r2
   102da:	681b      	ldr	r3, [r3, #0]
   102dc:	2b00      	cmp	r3, #0
   102de:	d100      	bne.n	102e2 <CountNbOfEnabledChannels+0x8e>
   102e0:	e073      	b.n	103ca <CountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
   102e2:	230f      	movs	r3, #15
   102e4:	18fb      	adds	r3, r7, r3
   102e6:	781b      	ldrb	r3, [r3, #0]
   102e8:	2201      	movs	r2, #1
   102ea:	4053      	eors	r3, r2
   102ec:	b2db      	uxtb	r3, r3
   102ee:	2b00      	cmp	r3, #0
   102f0:	d008      	beq.n	10304 <CountNbOfEnabledChannels+0xb0>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
   102f2:	2313      	movs	r3, #19
   102f4:	18fb      	adds	r3, r7, r3
   102f6:	781b      	ldrb	r3, [r3, #0]
   102f8:	2207      	movs	r2, #7
   102fa:	411a      	asrs	r2, r3
   102fc:	0013      	movs	r3, r2
   102fe:	2201      	movs	r2, #1
   10300:	4013      	ands	r3, r2
   10302:	d064      	beq.n	103ce <CountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
   10304:	230e      	movs	r3, #14
   10306:	18fb      	adds	r3, r7, r3
   10308:	2000      	movs	r0, #0
   1030a:	5618      	ldrsb	r0, [r3, r0]
   1030c:	2315      	movs	r3, #21
   1030e:	18fb      	adds	r3, r7, r3
   10310:	781a      	ldrb	r2, [r3, #0]
   10312:	2313      	movs	r3, #19
   10314:	18fb      	adds	r3, r7, r3
   10316:	781b      	ldrb	r3, [r3, #0]
   10318:	18d3      	adds	r3, r2, r3
   1031a:	001a      	movs	r2, r3
   1031c:	0013      	movs	r3, r2
   1031e:	005b      	lsls	r3, r3, #1
   10320:	189b      	adds	r3, r3, r2
   10322:	009b      	lsls	r3, r3, #2
   10324:	001a      	movs	r2, r3
   10326:	687b      	ldr	r3, [r7, #4]
   10328:	189b      	adds	r3, r3, r2
   1032a:	7a1b      	ldrb	r3, [r3, #8]
   1032c:	011b      	lsls	r3, r3, #4
   1032e:	b25b      	sxtb	r3, r3
   10330:	111b      	asrs	r3, r3, #4
   10332:	b25b      	sxtb	r3, r3
   10334:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
   10336:	2315      	movs	r3, #21
   10338:	18fb      	adds	r3, r7, r3
   1033a:	781a      	ldrb	r2, [r3, #0]
   1033c:	2313      	movs	r3, #19
   1033e:	18fb      	adds	r3, r7, r3
   10340:	781b      	ldrb	r3, [r3, #0]
   10342:	18d3      	adds	r3, r2, r3
   10344:	001a      	movs	r2, r3
   10346:	0013      	movs	r3, r2
   10348:	005b      	lsls	r3, r3, #1
   1034a:	189b      	adds	r3, r3, r2
   1034c:	009b      	lsls	r3, r3, #2
   1034e:	001a      	movs	r2, r3
   10350:	687b      	ldr	r3, [r7, #4]
   10352:	189b      	adds	r3, r3, r2
   10354:	7a1b      	ldrb	r3, [r3, #8]
   10356:	b25b      	sxtb	r3, r3
   10358:	111b      	asrs	r3, r3, #4
   1035a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
   1035c:	001a      	movs	r2, r3
   1035e:	4b34      	ldr	r3, [pc, #208]	; (10430 <CountNbOfEnabledChannels+0x1dc>)
   10360:	4798      	blx	r3
   10362:	1e03      	subs	r3, r0, #0
   10364:	d035      	beq.n	103d2 <CountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
   10366:	2315      	movs	r3, #21
   10368:	18fb      	adds	r3, r7, r3
   1036a:	781a      	ldrb	r2, [r3, #0]
   1036c:	2313      	movs	r3, #19
   1036e:	18fb      	adds	r3, r7, r3
   10370:	781b      	ldrb	r3, [r3, #0]
   10372:	18d3      	adds	r3, r2, r3
   10374:	001a      	movs	r2, r3
   10376:	0013      	movs	r3, r2
   10378:	005b      	lsls	r3, r3, #1
   1037a:	189b      	adds	r3, r3, r2
   1037c:	009b      	lsls	r3, r3, #2
   1037e:	001a      	movs	r2, r3
   10380:	687b      	ldr	r3, [r7, #4]
   10382:	189b      	adds	r3, r3, r2
   10384:	7a5b      	ldrb	r3, [r3, #9]
   10386:	011b      	lsls	r3, r3, #4
   10388:	6a3a      	ldr	r2, [r7, #32]
   1038a:	18d3      	adds	r3, r2, r3
   1038c:	68db      	ldr	r3, [r3, #12]
   1038e:	2b00      	cmp	r3, #0
   10390:	d007      	beq.n	103a2 <CountNbOfEnabledChannels+0x14e>
                { // Check if the band is available for transmission
                    delayTransmission++;
   10392:	2316      	movs	r3, #22
   10394:	18fb      	adds	r3, r7, r3
   10396:	781a      	ldrb	r2, [r3, #0]
   10398:	2316      	movs	r3, #22
   1039a:	18fb      	adds	r3, r7, r3
   1039c:	3201      	adds	r2, #1
   1039e:	701a      	strb	r2, [r3, #0]
                    continue;
   103a0:	e018      	b.n	103d4 <CountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
   103a2:	2317      	movs	r3, #23
   103a4:	18fb      	adds	r3, r7, r3
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	2217      	movs	r2, #23
   103aa:	18ba      	adds	r2, r7, r2
   103ac:	1c59      	adds	r1, r3, #1
   103ae:	7011      	strb	r1, [r2, #0]
   103b0:	001a      	movs	r2, r3
   103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   103b4:	189b      	adds	r3, r3, r2
   103b6:	2215      	movs	r2, #21
   103b8:	18b9      	adds	r1, r7, r2
   103ba:	2213      	movs	r2, #19
   103bc:	18ba      	adds	r2, r7, r2
   103be:	7809      	ldrb	r1, [r1, #0]
   103c0:	7812      	ldrb	r2, [r2, #0]
   103c2:	188a      	adds	r2, r1, r2
   103c4:	b2d2      	uxtb	r2, r2
   103c6:	701a      	strb	r2, [r3, #0]
   103c8:	e004      	b.n	103d4 <CountNbOfEnabledChannels+0x180>
                    continue;
   103ca:	46c0      	nop			; (mov r8, r8)
   103cc:	e002      	b.n	103d4 <CountNbOfEnabledChannels+0x180>
                        continue;
   103ce:	46c0      	nop			; (mov r8, r8)
   103d0:	e000      	b.n	103d4 <CountNbOfEnabledChannels+0x180>
                    continue;
   103d2:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
   103d4:	2313      	movs	r3, #19
   103d6:	18fb      	adds	r3, r7, r3
   103d8:	781a      	ldrb	r2, [r3, #0]
   103da:	2313      	movs	r3, #19
   103dc:	18fb      	adds	r3, r7, r3
   103de:	3201      	adds	r2, #1
   103e0:	701a      	strb	r2, [r3, #0]
   103e2:	2313      	movs	r3, #19
   103e4:	18fb      	adds	r3, r7, r3
   103e6:	781b      	ldrb	r3, [r3, #0]
   103e8:	2b0f      	cmp	r3, #15
   103ea:	d800      	bhi.n	103ee <CountNbOfEnabledChannels+0x19a>
   103ec:	e755      	b.n	1029a <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
   103ee:	2315      	movs	r3, #21
   103f0:	18fb      	adds	r3, r7, r3
   103f2:	2215      	movs	r2, #21
   103f4:	18ba      	adds	r2, r7, r2
   103f6:	7812      	ldrb	r2, [r2, #0]
   103f8:	3210      	adds	r2, #16
   103fa:	701a      	strb	r2, [r3, #0]
   103fc:	2314      	movs	r3, #20
   103fe:	18fb      	adds	r3, r7, r3
   10400:	781a      	ldrb	r2, [r3, #0]
   10402:	2314      	movs	r3, #20
   10404:	18fb      	adds	r3, r7, r3
   10406:	3201      	adds	r2, #1
   10408:	701a      	strb	r2, [r3, #0]
   1040a:	2315      	movs	r3, #21
   1040c:	18fb      	adds	r3, r7, r3
   1040e:	781b      	ldrb	r3, [r3, #0]
   10410:	2b0f      	cmp	r3, #15
   10412:	d800      	bhi.n	10416 <CountNbOfEnabledChannels+0x1c2>
   10414:	e73c      	b.n	10290 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
   10416:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10418:	2216      	movs	r2, #22
   1041a:	18ba      	adds	r2, r7, r2
   1041c:	7812      	ldrb	r2, [r2, #0]
   1041e:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
   10420:	2317      	movs	r3, #23
   10422:	18fb      	adds	r3, r7, r3
   10424:	781b      	ldrb	r3, [r3, #0]
}
   10426:	0018      	movs	r0, r3
   10428:	46bd      	mov	sp, r7
   1042a:	b006      	add	sp, #24
   1042c:	bd80      	pop	{r7, pc}
   1042e:	46c0      	nop			; (mov r8, r8)
   10430:	0000f69d 	.word	0x0000f69d

00010434 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
   10434:	b580      	push	{r7, lr}
   10436:	b084      	sub	sp, #16
   10438:	af00      	add	r7, sp, #0
   1043a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
   1043c:	2308      	movs	r3, #8
   1043e:	18fb      	adds	r3, r7, r3
   10440:	2200      	movs	r2, #0
   10442:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
   10444:	687b      	ldr	r3, [r7, #4]
   10446:	781b      	ldrb	r3, [r3, #0]
   10448:	2b34      	cmp	r3, #52	; 0x34
   1044a:	d900      	bls.n	1044e <RegionEU868GetPhyParam+0x1a>
   1044c:	e0d0      	b.n	105f0 <RegionEU868GetPhyParam+0x1bc>
   1044e:	009a      	lsls	r2, r3, #2
   10450:	4b6f      	ldr	r3, [pc, #444]	; (10610 <RegionEU868GetPhyParam+0x1dc>)
   10452:	18d3      	adds	r3, r2, r3
   10454:	681b      	ldr	r3, [r3, #0]
   10456:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
   10458:	2308      	movs	r3, #8
   1045a:	18fb      	adds	r3, r7, r3
   1045c:	2200      	movs	r2, #0
   1045e:	601a      	str	r2, [r3, #0]
            break;
   10460:	e0c7      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
   10462:	2308      	movs	r3, #8
   10464:	18fb      	adds	r3, r7, r3
   10466:	2200      	movs	r2, #0
   10468:	601a      	str	r2, [r3, #0]
            break;
   1046a:	e0c2      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
   1046c:	2308      	movs	r3, #8
   1046e:	18fb      	adds	r3, r7, r3
   10470:	2200      	movs	r2, #0
   10472:	601a      	str	r2, [r3, #0]
            break;
   10474:	e0bd      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
   10476:	687b      	ldr	r3, [r7, #4]
   10478:	785b      	ldrb	r3, [r3, #1]
   1047a:	b25b      	sxtb	r3, r3
   1047c:	2100      	movs	r1, #0
   1047e:	0018      	movs	r0, r3
   10480:	4b64      	ldr	r3, [pc, #400]	; (10614 <RegionEU868GetPhyParam+0x1e0>)
   10482:	4798      	blx	r3
   10484:	0003      	movs	r3, r0
   10486:	001a      	movs	r2, r3
   10488:	2308      	movs	r3, #8
   1048a:	18fb      	adds	r3, r7, r3
   1048c:	601a      	str	r2, [r3, #0]
            break;
   1048e:	e0b0      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
   10490:	2308      	movs	r3, #8
   10492:	18fb      	adds	r3, r7, r3
   10494:	2200      	movs	r2, #0
   10496:	601a      	str	r2, [r3, #0]
            break;
   10498:	e0ab      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
   1049a:	2308      	movs	r3, #8
   1049c:	18fb      	adds	r3, r7, r3
   1049e:	2200      	movs	r2, #0
   104a0:	601a      	str	r2, [r3, #0]
            break;
   104a2:	e0a6      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
   104a4:	2308      	movs	r3, #8
   104a6:	18fb      	adds	r3, r7, r3
   104a8:	2240      	movs	r2, #64	; 0x40
   104aa:	601a      	str	r2, [r3, #0]
            break;
   104ac:	e0a1      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
   104ae:	2308      	movs	r3, #8
   104b0:	18fb      	adds	r3, r7, r3
   104b2:	2220      	movs	r2, #32
   104b4:	601a      	str	r2, [r3, #0]
            break;
   104b6:	e09c      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
   104b8:	687b      	ldr	r3, [r7, #4]
   104ba:	785b      	ldrb	r3, [r3, #1]
   104bc:	b25b      	sxtb	r3, r3
   104be:	001a      	movs	r2, r3
   104c0:	4b55      	ldr	r3, [pc, #340]	; (10618 <RegionEU868GetPhyParam+0x1e4>)
   104c2:	5c9b      	ldrb	r3, [r3, r2]
   104c4:	001a      	movs	r2, r3
   104c6:	2308      	movs	r3, #8
   104c8:	18fb      	adds	r3, r7, r3
   104ca:	601a      	str	r2, [r3, #0]
            break;
   104cc:	e091      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
   104ce:	687b      	ldr	r3, [r7, #4]
   104d0:	785b      	ldrb	r3, [r3, #1]
   104d2:	b25b      	sxtb	r3, r3
   104d4:	001a      	movs	r2, r3
   104d6:	4b51      	ldr	r3, [pc, #324]	; (1061c <RegionEU868GetPhyParam+0x1e8>)
   104d8:	5c9b      	ldrb	r3, [r3, r2]
   104da:	001a      	movs	r2, r3
   104dc:	2308      	movs	r3, #8
   104de:	18fb      	adds	r3, r7, r3
   104e0:	601a      	str	r2, [r3, #0]
            break;
   104e2:	e086      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
   104e4:	2308      	movs	r3, #8
   104e6:	18fb      	adds	r3, r7, r3
   104e8:	2201      	movs	r2, #1
   104ea:	601a      	str	r2, [r3, #0]
            break;
   104ec:	e081      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
   104ee:	2308      	movs	r3, #8
   104f0:	18fb      	adds	r3, r7, r3
   104f2:	4a4b      	ldr	r2, [pc, #300]	; (10620 <RegionEU868GetPhyParam+0x1ec>)
   104f4:	601a      	str	r2, [r3, #0]
            break;
   104f6:	e07c      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
   104f8:	2308      	movs	r3, #8
   104fa:	18fb      	adds	r3, r7, r3
   104fc:	22fa      	movs	r2, #250	; 0xfa
   104fe:	0092      	lsls	r2, r2, #2
   10500:	601a      	str	r2, [r3, #0]
            break;
   10502:	e076      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
   10504:	2308      	movs	r3, #8
   10506:	18fb      	adds	r3, r7, r3
   10508:	22fa      	movs	r2, #250	; 0xfa
   1050a:	00d2      	lsls	r2, r2, #3
   1050c:	601a      	str	r2, [r3, #0]
            break;
   1050e:	e070      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
   10510:	2308      	movs	r3, #8
   10512:	18fb      	adds	r3, r7, r3
   10514:	4a43      	ldr	r2, [pc, #268]	; (10624 <RegionEU868GetPhyParam+0x1f0>)
   10516:	601a      	str	r2, [r3, #0]
            break;
   10518:	e06b      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
   1051a:	2308      	movs	r3, #8
   1051c:	18fb      	adds	r3, r7, r3
   1051e:	4a42      	ldr	r2, [pc, #264]	; (10628 <RegionEU868GetPhyParam+0x1f4>)
   10520:	601a      	str	r2, [r3, #0]
            break;
   10522:	e066      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
   10524:	2308      	movs	r3, #8
   10526:	18fb      	adds	r3, r7, r3
   10528:	2280      	movs	r2, #128	; 0x80
   1052a:	01d2      	lsls	r2, r2, #7
   1052c:	601a      	str	r2, [r3, #0]
            break;
   1052e:	e060      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
   10530:	23fa      	movs	r3, #250	; 0xfa
   10532:	009b      	lsls	r3, r3, #2
   10534:	4a3d      	ldr	r2, [pc, #244]	; (1062c <RegionEU868GetPhyParam+0x1f8>)
   10536:	0019      	movs	r1, r3
   10538:	0010      	movs	r0, r2
   1053a:	4b3d      	ldr	r3, [pc, #244]	; (10630 <RegionEU868GetPhyParam+0x1fc>)
   1053c:	4798      	blx	r3
   1053e:	0003      	movs	r3, r0
   10540:	22fa      	movs	r2, #250	; 0xfa
   10542:	00d2      	lsls	r2, r2, #3
   10544:	4694      	mov	ip, r2
   10546:	4463      	add	r3, ip
   10548:	001a      	movs	r2, r3
   1054a:	2308      	movs	r3, #8
   1054c:	18fb      	adds	r3, r7, r3
   1054e:	601a      	str	r2, [r3, #0]
            break;
   10550:	e04f      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
   10552:	2308      	movs	r3, #8
   10554:	18fb      	adds	r3, r7, r3
   10556:	2200      	movs	r2, #0
   10558:	601a      	str	r2, [r3, #0]
            break;
   1055a:	e04a      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
   1055c:	2308      	movs	r3, #8
   1055e:	18fb      	adds	r3, r7, r3
   10560:	4a34      	ldr	r2, [pc, #208]	; (10634 <RegionEU868GetPhyParam+0x200>)
   10562:	601a      	str	r2, [r3, #0]
            break;
   10564:	e045      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
   10566:	2308      	movs	r3, #8
   10568:	18fb      	adds	r3, r7, r3
   1056a:	2200      	movs	r2, #0
   1056c:	601a      	str	r2, [r3, #0]
            break;
   1056e:	e040      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
   10570:	2308      	movs	r3, #8
   10572:	18fb      	adds	r3, r7, r3
   10574:	4a30      	ldr	r2, [pc, #192]	; (10638 <RegionEU868GetPhyParam+0x204>)
   10576:	601a      	str	r2, [r3, #0]
            break;
   10578:	e03b      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
   1057a:	2308      	movs	r3, #8
   1057c:	18fb      	adds	r3, r7, r3
   1057e:	4a2f      	ldr	r2, [pc, #188]	; (1063c <RegionEU868GetPhyParam+0x208>)
   10580:	601a      	str	r2, [r3, #0]
            break;
   10582:	e036      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
   10584:	2308      	movs	r3, #8
   10586:	18fb      	adds	r3, r7, r3
   10588:	2210      	movs	r2, #16
   1058a:	601a      	str	r2, [r3, #0]
            break;
   1058c:	e031      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
   1058e:	2308      	movs	r3, #8
   10590:	18fb      	adds	r3, r7, r3
   10592:	4a2b      	ldr	r2, [pc, #172]	; (10640 <RegionEU868GetPhyParam+0x20c>)
   10594:	601a      	str	r2, [r3, #0]
            break;
   10596:	e02c      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
   10598:	2308      	movs	r3, #8
   1059a:	18fb      	adds	r3, r7, r3
   1059c:	2200      	movs	r2, #0
   1059e:	601a      	str	r2, [r3, #0]
            break;
   105a0:	e027      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
   105a2:	2308      	movs	r3, #8
   105a4:	18fb      	adds	r3, r7, r3
   105a6:	2283      	movs	r2, #131	; 0x83
   105a8:	05d2      	lsls	r2, r2, #23
   105aa:	601a      	str	r2, [r3, #0]
            break;
   105ac:	e021      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   105ae:	2308      	movs	r3, #8
   105b0:	18fb      	adds	r3, r7, r3
   105b2:	4a24      	ldr	r2, [pc, #144]	; (10644 <RegionEU868GetPhyParam+0x210>)
   105b4:	601a      	str	r2, [r3, #0]
            break;
   105b6:	e01c      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
   105b8:	2308      	movs	r3, #8
   105ba:	18fb      	adds	r3, r7, r3
   105bc:	4a1d      	ldr	r2, [pc, #116]	; (10634 <RegionEU868GetPhyParam+0x200>)
   105be:	601a      	str	r2, [r3, #0]
            break;
   105c0:	e017      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
   105c2:	2308      	movs	r3, #8
   105c4:	18fb      	adds	r3, r7, r3
   105c6:	2211      	movs	r2, #17
   105c8:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
   105ca:	2308      	movs	r3, #8
   105cc:	18fb      	adds	r3, r7, r3
   105ce:	2202      	movs	r2, #2
   105d0:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
   105d2:	2308      	movs	r3, #8
   105d4:	18fb      	adds	r3, r7, r3
   105d6:	2200      	movs	r2, #0
   105d8:	709a      	strb	r2, [r3, #2]
            break;
   105da:	e00a      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
   105dc:	2308      	movs	r3, #8
   105de:	18fb      	adds	r3, r7, r3
   105e0:	2203      	movs	r2, #3
   105e2:	601a      	str	r2, [r3, #0]
            break;
   105e4:	e005      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
   105e6:	2308      	movs	r3, #8
   105e8:	18fb      	adds	r3, r7, r3
   105ea:	2203      	movs	r2, #3
   105ec:	601a      	str	r2, [r3, #0]
            break;
   105ee:	e000      	b.n	105f2 <RegionEU868GetPhyParam+0x1be>
        }
        default:
        {
            break;
   105f0:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
   105f2:	230c      	movs	r3, #12
   105f4:	18fb      	adds	r3, r7, r3
   105f6:	2208      	movs	r2, #8
   105f8:	18ba      	adds	r2, r7, r2
   105fa:	6812      	ldr	r2, [r2, #0]
   105fc:	601a      	str	r2, [r3, #0]
   105fe:	230c      	movs	r3, #12
   10600:	18fb      	adds	r3, r7, r3
   10602:	2200      	movs	r2, #0
   10604:	681a      	ldr	r2, [r3, #0]
   10606:	0013      	movs	r3, r2
}
   10608:	0018      	movs	r0, r3
   1060a:	46bd      	mov	sp, r7
   1060c:	b004      	add	sp, #16
   1060e:	bd80      	pop	{r7, pc}
   10610:	0001f410 	.word	0x0001f410
   10614:	00010081 	.word	0x00010081
   10618:	0001f400 	.word	0x0001f400
   1061c:	0001f408 	.word	0x0001f408
   10620:	00000bb8 	.word	0x00000bb8
   10624:	00001388 	.word	0x00001388
   10628:	00001770 	.word	0x00001770
   1062c:	fffffc18 	.word	0xfffffc18
   10630:	00002921 	.word	0x00002921
   10634:	33d3e608 	.word	0x33d3e608
   10638:	20001544 	.word	0x20001544
   1063c:	20001546 	.word	0x20001546
   10640:	20001434 	.word	0x20001434
   10644:	4009999a 	.word	0x4009999a

00010648 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
   10648:	b580      	push	{r7, lr}
   1064a:	b082      	sub	sp, #8
   1064c:	af00      	add	r7, sp, #0
   1064e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
   10650:	687b      	ldr	r3, [r7, #4]
   10652:	7858      	ldrb	r0, [r3, #1]
   10654:	687b      	ldr	r3, [r7, #4]
   10656:	781b      	ldrb	r3, [r3, #0]
   10658:	0019      	movs	r1, r3
   1065a:	4a0a      	ldr	r2, [pc, #40]	; (10684 <RegionEU868SetBandTxDone+0x3c>)
   1065c:	000b      	movs	r3, r1
   1065e:	005b      	lsls	r3, r3, #1
   10660:	185b      	adds	r3, r3, r1
   10662:	009b      	lsls	r3, r3, #2
   10664:	18d3      	adds	r3, r2, r3
   10666:	3309      	adds	r3, #9
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	330c      	adds	r3, #12
   1066c:	011a      	lsls	r2, r3, #4
   1066e:	4b05      	ldr	r3, [pc, #20]	; (10684 <RegionEU868SetBandTxDone+0x3c>)
   10670:	18d1      	adds	r1, r2, r3
   10672:	687b      	ldr	r3, [r7, #4]
   10674:	685b      	ldr	r3, [r3, #4]
   10676:	001a      	movs	r2, r3
   10678:	4b03      	ldr	r3, [pc, #12]	; (10688 <RegionEU868SetBandTxDone+0x40>)
   1067a:	4798      	blx	r3
}
   1067c:	46c0      	nop			; (mov r8, r8)
   1067e:	46bd      	mov	sp, r7
   10680:	b002      	add	sp, #8
   10682:	bd80      	pop	{r7, pc}
   10684:	20001434 	.word	0x20001434
   10688:	0000f861 	.word	0x0000f861

0001068c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
   1068c:	b590      	push	{r4, r7, lr}
   1068e:	b097      	sub	sp, #92	; 0x5c
   10690:	af00      	add	r7, sp, #0
   10692:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
   10694:	2308      	movs	r3, #8
   10696:	18fb      	adds	r3, r7, r3
   10698:	0018      	movs	r0, r3
   1069a:	2350      	movs	r3, #80	; 0x50
   1069c:	001a      	movs	r2, r3
   1069e:	2100      	movs	r1, #0
   106a0:	4b31      	ldr	r3, [pc, #196]	; (10768 <RegionEU868InitDefaults+0xdc>)
   106a2:	4798      	blx	r3
   106a4:	2308      	movs	r3, #8
   106a6:	18fb      	adds	r3, r7, r3
   106a8:	2264      	movs	r2, #100	; 0x64
   106aa:	801a      	strh	r2, [r3, #0]
   106ac:	2308      	movs	r3, #8
   106ae:	18fb      	adds	r3, r7, r3
   106b0:	2264      	movs	r2, #100	; 0x64
   106b2:	821a      	strh	r2, [r3, #16]
   106b4:	2308      	movs	r3, #8
   106b6:	18fb      	adds	r3, r7, r3
   106b8:	22fa      	movs	r2, #250	; 0xfa
   106ba:	0092      	lsls	r2, r2, #2
   106bc:	841a      	strh	r2, [r3, #32]
   106be:	2308      	movs	r3, #8
   106c0:	18fb      	adds	r3, r7, r3
   106c2:	220a      	movs	r2, #10
   106c4:	861a      	strh	r2, [r3, #48]	; 0x30
   106c6:	2308      	movs	r3, #8
   106c8:	18fb      	adds	r3, r7, r3
   106ca:	2240      	movs	r2, #64	; 0x40
   106cc:	2164      	movs	r1, #100	; 0x64
   106ce:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	791b      	ldrb	r3, [r3, #4]
   106d4:	2b01      	cmp	r3, #1
   106d6:	d032      	beq.n	1073e <RegionEU868InitDefaults+0xb2>
   106d8:	2b02      	cmp	r3, #2
   106da:	d023      	beq.n	10724 <RegionEU868InitDefaults+0x98>
   106dc:	2b00      	cmp	r3, #0
   106de:	d000      	beq.n	106e2 <RegionEU868InitDefaults+0x56>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
   106e0:	e03d      	b.n	1075e <RegionEU868InitDefaults+0xd2>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   106e2:	2308      	movs	r3, #8
   106e4:	18f9      	adds	r1, r7, r3
   106e6:	4b21      	ldr	r3, [pc, #132]	; (1076c <RegionEU868InitDefaults+0xe0>)
   106e8:	2250      	movs	r2, #80	; 0x50
   106ea:	0018      	movs	r0, r3
   106ec:	4b20      	ldr	r3, [pc, #128]	; (10770 <RegionEU868InitDefaults+0xe4>)
   106ee:	4798      	blx	r3
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
   106f0:	4b20      	ldr	r3, [pc, #128]	; (10774 <RegionEU868InitDefaults+0xe8>)
   106f2:	4a21      	ldr	r2, [pc, #132]	; (10778 <RegionEU868InitDefaults+0xec>)
   106f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   106f6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
   106f8:	4b1e      	ldr	r3, [pc, #120]	; (10774 <RegionEU868InitDefaults+0xe8>)
   106fa:	4a20      	ldr	r2, [pc, #128]	; (1077c <RegionEU868InitDefaults+0xf0>)
   106fc:	330c      	adds	r3, #12
   106fe:	ca13      	ldmia	r2!, {r0, r1, r4}
   10700:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
   10702:	4b1c      	ldr	r3, [pc, #112]	; (10774 <RegionEU868InitDefaults+0xe8>)
   10704:	4a1e      	ldr	r2, [pc, #120]	; (10780 <RegionEU868InitDefaults+0xf4>)
   10706:	3318      	adds	r3, #24
   10708:	ca13      	ldmia	r2!, {r0, r1, r4}
   1070a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   1070c:	4a19      	ldr	r2, [pc, #100]	; (10774 <RegionEU868InitDefaults+0xe8>)
   1070e:	2389      	movs	r3, #137	; 0x89
   10710:	005b      	lsls	r3, r3, #1
   10712:	2107      	movs	r1, #7
   10714:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
   10716:	491b      	ldr	r1, [pc, #108]	; (10784 <RegionEU868InitDefaults+0xf8>)
   10718:	4b1b      	ldr	r3, [pc, #108]	; (10788 <RegionEU868InitDefaults+0xfc>)
   1071a:	2201      	movs	r2, #1
   1071c:	0018      	movs	r0, r3
   1071e:	4b1b      	ldr	r3, [pc, #108]	; (1078c <RegionEU868InitDefaults+0x100>)
   10720:	4798      	blx	r3
            break;
   10722:	e01c      	b.n	1075e <RegionEU868InitDefaults+0xd2>
            if( params->NvmCtx != 0 )
   10724:	687b      	ldr	r3, [r7, #4]
   10726:	681b      	ldr	r3, [r3, #0]
   10728:	2b00      	cmp	r3, #0
   1072a:	d017      	beq.n	1075c <RegionEU868InitDefaults+0xd0>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
   1072c:	687b      	ldr	r3, [r7, #4]
   1072e:	6819      	ldr	r1, [r3, #0]
   10730:	238a      	movs	r3, #138	; 0x8a
   10732:	005a      	lsls	r2, r3, #1
   10734:	4b0f      	ldr	r3, [pc, #60]	; (10774 <RegionEU868InitDefaults+0xe8>)
   10736:	0018      	movs	r0, r3
   10738:	4b0d      	ldr	r3, [pc, #52]	; (10770 <RegionEU868InitDefaults+0xe4>)
   1073a:	4798      	blx	r3
            break;
   1073c:	e00e      	b.n	1075c <RegionEU868InitDefaults+0xd0>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
   1073e:	4a0d      	ldr	r2, [pc, #52]	; (10774 <RegionEU868InitDefaults+0xe8>)
   10740:	2388      	movs	r3, #136	; 0x88
   10742:	005b      	lsls	r3, r3, #1
   10744:	5ad2      	ldrh	r2, [r2, r3]
   10746:	490b      	ldr	r1, [pc, #44]	; (10774 <RegionEU868InitDefaults+0xe8>)
   10748:	2389      	movs	r3, #137	; 0x89
   1074a:	005b      	lsls	r3, r3, #1
   1074c:	5acb      	ldrh	r3, [r1, r3]
   1074e:	4313      	orrs	r3, r2
   10750:	b299      	uxth	r1, r3
   10752:	4a08      	ldr	r2, [pc, #32]	; (10774 <RegionEU868InitDefaults+0xe8>)
   10754:	2388      	movs	r3, #136	; 0x88
   10756:	005b      	lsls	r3, r3, #1
   10758:	52d1      	strh	r1, [r2, r3]
            break;
   1075a:	e000      	b.n	1075e <RegionEU868InitDefaults+0xd2>
            break;
   1075c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1075e:	46c0      	nop			; (mov r8, r8)
   10760:	46bd      	mov	sp, r7
   10762:	b017      	add	sp, #92	; 0x5c
   10764:	bd90      	pop	{r4, r7, pc}
   10766:	46c0      	nop			; (mov r8, r8)
   10768:	0001a0e1 	.word	0x0001a0e1
   1076c:	200014f4 	.word	0x200014f4
   10770:	00002955 	.word	0x00002955
   10774:	20001434 	.word	0x20001434
   10778:	0001f4e4 	.word	0x0001f4e4
   1077c:	0001f4f0 	.word	0x0001f4f0
   10780:	0001f4fc 	.word	0x0001f4fc
   10784:	20001546 	.word	0x20001546
   10788:	20001544 	.word	0x20001544
   1078c:	0000f7fd 	.word	0x0000f7fd

00010790 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
   10790:	b580      	push	{r7, lr}
   10792:	b082      	sub	sp, #8
   10794:	af00      	add	r7, sp, #0
   10796:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
   10798:	687b      	ldr	r3, [r7, #4]
   1079a:	228a      	movs	r2, #138	; 0x8a
   1079c:	0052      	lsls	r2, r2, #1
   1079e:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
   107a0:	4b02      	ldr	r3, [pc, #8]	; (107ac <RegionEU868GetNvmCtx+0x1c>)
}
   107a2:	0018      	movs	r0, r3
   107a4:	46bd      	mov	sp, r7
   107a6:	b002      	add	sp, #8
   107a8:	bd80      	pop	{r7, pc}
   107aa:	46c0      	nop			; (mov r8, r8)
   107ac:	20001434 	.word	0x20001434

000107b0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
   107b0:	b580      	push	{r7, lr}
   107b2:	b082      	sub	sp, #8
   107b4:	af00      	add	r7, sp, #0
   107b6:	6078      	str	r0, [r7, #4]
   107b8:	000a      	movs	r2, r1
   107ba:	1cfb      	adds	r3, r7, #3
   107bc:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
   107be:	1cfb      	adds	r3, r7, #3
   107c0:	781b      	ldrb	r3, [r3, #0]
   107c2:	3b04      	subs	r3, #4
   107c4:	2b0a      	cmp	r3, #10
   107c6:	d83a      	bhi.n	1083e <RegionEU868Verify+0x8e>
   107c8:	009a      	lsls	r2, r3, #2
   107ca:	4b1f      	ldr	r3, [pc, #124]	; (10848 <RegionEU868Verify+0x98>)
   107cc:	18d3      	adds	r3, r2, r3
   107ce:	681b      	ldr	r3, [r3, #0]
   107d0:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
   107d2:	687b      	ldr	r3, [r7, #4]
   107d4:	781b      	ldrb	r3, [r3, #0]
   107d6:	b25b      	sxtb	r3, r3
   107d8:	2207      	movs	r2, #7
   107da:	2100      	movs	r1, #0
   107dc:	0018      	movs	r0, r3
   107de:	4b1b      	ldr	r3, [pc, #108]	; (1084c <RegionEU868Verify+0x9c>)
   107e0:	4798      	blx	r3
   107e2:	0003      	movs	r3, r0
   107e4:	1e5a      	subs	r2, r3, #1
   107e6:	4193      	sbcs	r3, r2
   107e8:	b2db      	uxtb	r3, r3
   107ea:	e029      	b.n	10840 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	781b      	ldrb	r3, [r3, #0]
   107f0:	b25b      	sxtb	r3, r3
   107f2:	2205      	movs	r2, #5
   107f4:	2100      	movs	r1, #0
   107f6:	0018      	movs	r0, r3
   107f8:	4b14      	ldr	r3, [pc, #80]	; (1084c <RegionEU868Verify+0x9c>)
   107fa:	4798      	blx	r3
   107fc:	0003      	movs	r3, r0
   107fe:	1e5a      	subs	r2, r3, #1
   10800:	4193      	sbcs	r3, r2
   10802:	b2db      	uxtb	r3, r3
   10804:	e01c      	b.n	10840 <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
   10806:	687b      	ldr	r3, [r7, #4]
   10808:	781b      	ldrb	r3, [r3, #0]
   1080a:	b25b      	sxtb	r3, r3
   1080c:	2207      	movs	r2, #7
   1080e:	2100      	movs	r1, #0
   10810:	0018      	movs	r0, r3
   10812:	4b0e      	ldr	r3, [pc, #56]	; (1084c <RegionEU868Verify+0x9c>)
   10814:	4798      	blx	r3
   10816:	0003      	movs	r3, r0
   10818:	1e5a      	subs	r2, r3, #1
   1081a:	4193      	sbcs	r3, r2
   1081c:	b2db      	uxtb	r3, r3
   1081e:	e00f      	b.n	10840 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
   10820:	687b      	ldr	r3, [r7, #4]
   10822:	781b      	ldrb	r3, [r3, #0]
   10824:	b25b      	sxtb	r3, r3
   10826:	2207      	movs	r2, #7
   10828:	2100      	movs	r1, #0
   1082a:	0018      	movs	r0, r3
   1082c:	4b07      	ldr	r3, [pc, #28]	; (1084c <RegionEU868Verify+0x9c>)
   1082e:	4798      	blx	r3
   10830:	0003      	movs	r3, r0
   10832:	1e5a      	subs	r2, r3, #1
   10834:	4193      	sbcs	r3, r2
   10836:	b2db      	uxtb	r3, r3
   10838:	e002      	b.n	10840 <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
   1083a:	2301      	movs	r3, #1
   1083c:	e000      	b.n	10840 <RegionEU868Verify+0x90>
        }
        default:
            return false;
   1083e:	2300      	movs	r3, #0
    }
}
   10840:	0018      	movs	r0, r3
   10842:	46bd      	mov	sp, r7
   10844:	b002      	add	sp, #8
   10846:	bd80      	pop	{r7, pc}
   10848:	0001f508 	.word	0x0001f508
   1084c:	0000f69d 	.word	0x0000f69d

00010850 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
   10850:	b580      	push	{r7, lr}
   10852:	b08a      	sub	sp, #40	; 0x28
   10854:	af00      	add	r7, sp, #0
   10856:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   10858:	2318      	movs	r3, #24
   1085a:	18fb      	adds	r3, r7, r3
   1085c:	2250      	movs	r2, #80	; 0x50
   1085e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
   10860:	687b      	ldr	r3, [r7, #4]
   10862:	791b      	ldrb	r3, [r3, #4]
   10864:	2b10      	cmp	r3, #16
   10866:	d000      	beq.n	1086a <RegionEU868ApplyCFList+0x1a>
   10868:	e08d      	b.n	10986 <RegionEU868ApplyCFList+0x136>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
   1086a:	687b      	ldr	r3, [r7, #4]
   1086c:	681b      	ldr	r3, [r3, #0]
   1086e:	330f      	adds	r3, #15
   10870:	781b      	ldrb	r3, [r3, #0]
   10872:	2b00      	cmp	r3, #0
   10874:	d000      	beq.n	10878 <RegionEU868ApplyCFList+0x28>
   10876:	e088      	b.n	1098a <RegionEU868ApplyCFList+0x13a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   10878:	2327      	movs	r3, #39	; 0x27
   1087a:	18fb      	adds	r3, r7, r3
   1087c:	2200      	movs	r2, #0
   1087e:	701a      	strb	r2, [r3, #0]
   10880:	2326      	movs	r3, #38	; 0x26
   10882:	18fb      	adds	r3, r7, r3
   10884:	2203      	movs	r2, #3
   10886:	701a      	strb	r2, [r3, #0]
   10888:	e077      	b.n	1097a <RegionEU868ApplyCFList+0x12a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
   1088a:	2326      	movs	r3, #38	; 0x26
   1088c:	18fb      	adds	r3, r7, r3
   1088e:	781b      	ldrb	r3, [r3, #0]
   10890:	2b07      	cmp	r3, #7
   10892:	d837      	bhi.n	10904 <RegionEU868ApplyCFList+0xb4>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   10894:	687b      	ldr	r3, [r7, #4]
   10896:	681a      	ldr	r2, [r3, #0]
   10898:	2327      	movs	r3, #39	; 0x27
   1089a:	18fb      	adds	r3, r7, r3
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	18d3      	adds	r3, r2, r3
   108a0:	781b      	ldrb	r3, [r3, #0]
   108a2:	001a      	movs	r2, r3
   108a4:	2318      	movs	r3, #24
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   108aa:	2318      	movs	r3, #24
   108ac:	18fb      	adds	r3, r7, r3
   108ae:	681a      	ldr	r2, [r3, #0]
   108b0:	687b      	ldr	r3, [r7, #4]
   108b2:	6819      	ldr	r1, [r3, #0]
   108b4:	2327      	movs	r3, #39	; 0x27
   108b6:	18fb      	adds	r3, r7, r3
   108b8:	781b      	ldrb	r3, [r3, #0]
   108ba:	3301      	adds	r3, #1
   108bc:	18cb      	adds	r3, r1, r3
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	021b      	lsls	r3, r3, #8
   108c2:	431a      	orrs	r2, r3
   108c4:	2318      	movs	r3, #24
   108c6:	18fb      	adds	r3, r7, r3
   108c8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
   108ca:	2318      	movs	r3, #24
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	681a      	ldr	r2, [r3, #0]
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	6819      	ldr	r1, [r3, #0]
   108d4:	2327      	movs	r3, #39	; 0x27
   108d6:	18fb      	adds	r3, r7, r3
   108d8:	781b      	ldrb	r3, [r3, #0]
   108da:	3302      	adds	r3, #2
   108dc:	18cb      	adds	r3, r1, r3
   108de:	781b      	ldrb	r3, [r3, #0]
   108e0:	041b      	lsls	r3, r3, #16
   108e2:	431a      	orrs	r2, r3
   108e4:	2318      	movs	r3, #24
   108e6:	18fb      	adds	r3, r7, r3
   108e8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
   108ea:	2318      	movs	r3, #24
   108ec:	18fb      	adds	r3, r7, r3
   108ee:	681b      	ldr	r3, [r3, #0]
   108f0:	2264      	movs	r2, #100	; 0x64
   108f2:	435a      	muls	r2, r3
   108f4:	2318      	movs	r3, #24
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
   108fa:	2318      	movs	r3, #24
   108fc:	18fb      	adds	r3, r7, r3
   108fe:	2200      	movs	r2, #0
   10900:	605a      	str	r2, [r3, #4]
   10902:	e00b      	b.n	1091c <RegionEU868ApplyCFList+0xcc>
        }
        else
        {
            newChannel.Frequency = 0;
   10904:	2318      	movs	r3, #24
   10906:	18fb      	adds	r3, r7, r3
   10908:	2200      	movs	r2, #0
   1090a:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
   1090c:	2318      	movs	r3, #24
   1090e:	18fb      	adds	r3, r7, r3
   10910:	2200      	movs	r2, #0
   10912:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
   10914:	2318      	movs	r3, #24
   10916:	18fb      	adds	r3, r7, r3
   10918:	2200      	movs	r2, #0
   1091a:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
   1091c:	2318      	movs	r3, #24
   1091e:	18fb      	adds	r3, r7, r3
   10920:	681b      	ldr	r3, [r3, #0]
   10922:	2b00      	cmp	r3, #0
   10924:	d010      	beq.n	10948 <RegionEU868ApplyCFList+0xf8>
        {
            channelAdd.NewChannel = &newChannel;
   10926:	2310      	movs	r3, #16
   10928:	18fb      	adds	r3, r7, r3
   1092a:	2218      	movs	r2, #24
   1092c:	18ba      	adds	r2, r7, r2
   1092e:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
   10930:	2310      	movs	r3, #16
   10932:	18fb      	adds	r3, r7, r3
   10934:	2226      	movs	r2, #38	; 0x26
   10936:	18ba      	adds	r2, r7, r2
   10938:	7812      	ldrb	r2, [r2, #0]
   1093a:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
   1093c:	2310      	movs	r3, #16
   1093e:	18fb      	adds	r3, r7, r3
   10940:	0018      	movs	r0, r3
   10942:	4b14      	ldr	r3, [pc, #80]	; (10994 <RegionEU868ApplyCFList+0x144>)
   10944:	4798      	blx	r3
   10946:	e00a      	b.n	1095e <RegionEU868ApplyCFList+0x10e>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
   10948:	230c      	movs	r3, #12
   1094a:	18fb      	adds	r3, r7, r3
   1094c:	2226      	movs	r2, #38	; 0x26
   1094e:	18ba      	adds	r2, r7, r2
   10950:	7812      	ldrb	r2, [r2, #0]
   10952:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
   10954:	230c      	movs	r3, #12
   10956:	18fb      	adds	r3, r7, r3
   10958:	0018      	movs	r0, r3
   1095a:	4b0f      	ldr	r3, [pc, #60]	; (10998 <RegionEU868ApplyCFList+0x148>)
   1095c:	4798      	blx	r3
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   1095e:	2327      	movs	r3, #39	; 0x27
   10960:	18fb      	adds	r3, r7, r3
   10962:	2227      	movs	r2, #39	; 0x27
   10964:	18ba      	adds	r2, r7, r2
   10966:	7812      	ldrb	r2, [r2, #0]
   10968:	3203      	adds	r2, #3
   1096a:	701a      	strb	r2, [r3, #0]
   1096c:	2326      	movs	r3, #38	; 0x26
   1096e:	18fb      	adds	r3, r7, r3
   10970:	781a      	ldrb	r2, [r3, #0]
   10972:	2326      	movs	r3, #38	; 0x26
   10974:	18fb      	adds	r3, r7, r3
   10976:	3201      	adds	r2, #1
   10978:	701a      	strb	r2, [r3, #0]
   1097a:	2326      	movs	r3, #38	; 0x26
   1097c:	18fb      	adds	r3, r7, r3
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	2b0f      	cmp	r3, #15
   10982:	d982      	bls.n	1088a <RegionEU868ApplyCFList+0x3a>
   10984:	e002      	b.n	1098c <RegionEU868ApplyCFList+0x13c>
        return;
   10986:	46c0      	nop			; (mov r8, r8)
   10988:	e000      	b.n	1098c <RegionEU868ApplyCFList+0x13c>
        return;
   1098a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1098c:	46bd      	mov	sp, r7
   1098e:	b00a      	add	sp, #40	; 0x28
   10990:	bd80      	pop	{r7, pc}
   10992:	46c0      	nop			; (mov r8, r8)
   10994:	000115b5 	.word	0x000115b5
   10998:	00011751 	.word	0x00011751

0001099c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b082      	sub	sp, #8
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
   109a4:	687b      	ldr	r3, [r7, #4]
   109a6:	791b      	ldrb	r3, [r3, #4]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d002      	beq.n	109b2 <RegionEU868ChanMaskSet+0x16>
   109ac:	2b01      	cmp	r3, #1
   109ae:	d008      	beq.n	109c2 <RegionEU868ChanMaskSet+0x26>
   109b0:	e00f      	b.n	109d2 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
   109b2:	687b      	ldr	r3, [r7, #4]
   109b4:	6819      	ldr	r1, [r3, #0]
   109b6:	4b0a      	ldr	r3, [pc, #40]	; (109e0 <RegionEU868ChanMaskSet+0x44>)
   109b8:	2201      	movs	r2, #1
   109ba:	0018      	movs	r0, r3
   109bc:	4b09      	ldr	r3, [pc, #36]	; (109e4 <RegionEU868ChanMaskSet+0x48>)
   109be:	4798      	blx	r3
            break;
   109c0:	e009      	b.n	109d6 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
   109c2:	687b      	ldr	r3, [r7, #4]
   109c4:	6819      	ldr	r1, [r3, #0]
   109c6:	4b08      	ldr	r3, [pc, #32]	; (109e8 <RegionEU868ChanMaskSet+0x4c>)
   109c8:	2201      	movs	r2, #1
   109ca:	0018      	movs	r0, r3
   109cc:	4b05      	ldr	r3, [pc, #20]	; (109e4 <RegionEU868ChanMaskSet+0x48>)
   109ce:	4798      	blx	r3
            break;
   109d0:	e001      	b.n	109d6 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
   109d2:	2300      	movs	r3, #0
   109d4:	e000      	b.n	109d8 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
   109d6:	2301      	movs	r3, #1
}
   109d8:	0018      	movs	r0, r3
   109da:	46bd      	mov	sp, r7
   109dc:	b002      	add	sp, #8
   109de:	bd80      	pop	{r7, pc}
   109e0:	20001544 	.word	0x20001544
   109e4:	0000f7fd 	.word	0x0000f7fd
   109e8:	20001546 	.word	0x20001546

000109ec <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
   109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ee:	b08b      	sub	sp, #44	; 0x2c
   109f0:	af04      	add	r7, sp, #16
   109f2:	60ba      	str	r2, [r7, #8]
   109f4:	607b      	str	r3, [r7, #4]
   109f6:	230f      	movs	r3, #15
   109f8:	18fb      	adds	r3, r7, r3
   109fa:	1c02      	adds	r2, r0, #0
   109fc:	701a      	strb	r2, [r3, #0]
   109fe:	230e      	movs	r3, #14
   10a00:	18fb      	adds	r3, r7, r3
   10a02:	1c0a      	adds	r2, r1, #0
   10a04:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
   10a06:	2300      	movs	r3, #0
   10a08:	2400      	movs	r4, #0
   10a0a:	613b      	str	r3, [r7, #16]
   10a0c:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   10a0e:	230f      	movs	r3, #15
   10a10:	18fb      	adds	r3, r7, r3
   10a12:	781b      	ldrb	r3, [r3, #0]
   10a14:	b25a      	sxtb	r2, r3
   10a16:	2a07      	cmp	r2, #7
   10a18:	dd00      	ble.n	10a1c <RegionEU868ComputeRxWindowParameters+0x30>
   10a1a:	2307      	movs	r3, #7
   10a1c:	b25a      	sxtb	r2, r3
   10a1e:	687b      	ldr	r3, [r7, #4]
   10a20:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	785b      	ldrb	r3, [r3, #1]
   10a26:	b25b      	sxtb	r3, r3
   10a28:	0018      	movs	r0, r3
   10a2a:	4b23      	ldr	r3, [pc, #140]	; (10ab8 <RegionEU868ComputeRxWindowParameters+0xcc>)
   10a2c:	4798      	blx	r3
   10a2e:	0003      	movs	r3, r0
   10a30:	b2da      	uxtb	r2, r3
   10a32:	687b      	ldr	r3, [r7, #4]
   10a34:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
   10a36:	687b      	ldr	r3, [r7, #4]
   10a38:	785b      	ldrb	r3, [r3, #1]
   10a3a:	b25b      	sxtb	r3, r3
   10a3c:	2b07      	cmp	r3, #7
   10a3e:	d10d      	bne.n	10a5c <RegionEU868ComputeRxWindowParameters+0x70>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
   10a40:	687b      	ldr	r3, [r7, #4]
   10a42:	785b      	ldrb	r3, [r3, #1]
   10a44:	b25b      	sxtb	r3, r3
   10a46:	001a      	movs	r2, r3
   10a48:	4b1c      	ldr	r3, [pc, #112]	; (10abc <RegionEU868ComputeRxWindowParameters+0xd0>)
   10a4a:	5c9b      	ldrb	r3, [r3, r2]
   10a4c:	0018      	movs	r0, r3
   10a4e:	4b1c      	ldr	r3, [pc, #112]	; (10ac0 <RegionEU868ComputeRxWindowParameters+0xd4>)
   10a50:	4798      	blx	r3
   10a52:	0003      	movs	r3, r0
   10a54:	000c      	movs	r4, r1
   10a56:	613b      	str	r3, [r7, #16]
   10a58:	617c      	str	r4, [r7, #20]
   10a5a:	e013      	b.n	10a84 <RegionEU868ComputeRxWindowParameters+0x98>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   10a5c:	687b      	ldr	r3, [r7, #4]
   10a5e:	785b      	ldrb	r3, [r3, #1]
   10a60:	b25b      	sxtb	r3, r3
   10a62:	001a      	movs	r2, r3
   10a64:	4b15      	ldr	r3, [pc, #84]	; (10abc <RegionEU868ComputeRxWindowParameters+0xd0>)
   10a66:	5c98      	ldrb	r0, [r3, r2]
   10a68:	687b      	ldr	r3, [r7, #4]
   10a6a:	785b      	ldrb	r3, [r3, #1]
   10a6c:	b25b      	sxtb	r3, r3
   10a6e:	001a      	movs	r2, r3
   10a70:	4b14      	ldr	r3, [pc, #80]	; (10ac4 <RegionEU868ComputeRxWindowParameters+0xd8>)
   10a72:	0092      	lsls	r2, r2, #2
   10a74:	58d3      	ldr	r3, [r2, r3]
   10a76:	0019      	movs	r1, r3
   10a78:	4b13      	ldr	r3, [pc, #76]	; (10ac8 <RegionEU868ComputeRxWindowParameters+0xdc>)
   10a7a:	4798      	blx	r3
   10a7c:	0003      	movs	r3, r0
   10a7e:	000c      	movs	r4, r1
   10a80:	613b      	str	r3, [r7, #16]
   10a82:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   10a84:	4b11      	ldr	r3, [pc, #68]	; (10acc <RegionEU868ComputeRxWindowParameters+0xe0>)
   10a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10a88:	4798      	blx	r3
   10a8a:	0006      	movs	r6, r0
   10a8c:	687b      	ldr	r3, [r7, #4]
   10a8e:	3308      	adds	r3, #8
   10a90:	687a      	ldr	r2, [r7, #4]
   10a92:	320c      	adds	r2, #12
   10a94:	68bd      	ldr	r5, [r7, #8]
   10a96:	210e      	movs	r1, #14
   10a98:	1879      	adds	r1, r7, r1
   10a9a:	780c      	ldrb	r4, [r1, #0]
   10a9c:	6938      	ldr	r0, [r7, #16]
   10a9e:	6979      	ldr	r1, [r7, #20]
   10aa0:	9202      	str	r2, [sp, #8]
   10aa2:	9301      	str	r3, [sp, #4]
   10aa4:	9600      	str	r6, [sp, #0]
   10aa6:	002b      	movs	r3, r5
   10aa8:	0022      	movs	r2, r4
   10aaa:	4c09      	ldr	r4, [pc, #36]	; (10ad0 <RegionEU868ComputeRxWindowParameters+0xe4>)
   10aac:	47a0      	blx	r4
}
   10aae:	46c0      	nop			; (mov r8, r8)
   10ab0:	46bd      	mov	sp, r7
   10ab2:	b007      	add	sp, #28
   10ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ab6:	46c0      	nop			; (mov r8, r8)
   10ab8:	000100d5 	.word	0x000100d5
   10abc:	0001f3d8 	.word	0x0001f3d8
   10ac0:	0000fd59 	.word	0x0000fd59
   10ac4:	0001f3e0 	.word	0x0001f3e0
   10ac8:	0000fcf5 	.word	0x0000fcf5
   10acc:	0001efe8 	.word	0x0001efe8
   10ad0:	0000fd95 	.word	0x0000fd95

00010ad4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
   10ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ad6:	b091      	sub	sp, #68	; 0x44
   10ad8:	af0a      	add	r7, sp, #40	; 0x28
   10ada:	6078      	str	r0, [r7, #4]
   10adc:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
   10ade:	230f      	movs	r3, #15
   10ae0:	18fb      	adds	r3, r7, r3
   10ae2:	687a      	ldr	r2, [r7, #4]
   10ae4:	7852      	ldrb	r2, [r2, #1]
   10ae6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
   10ae8:	2316      	movs	r3, #22
   10aea:	18fb      	adds	r3, r7, r3
   10aec:	2200      	movs	r2, #0
   10aee:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
   10af0:	230e      	movs	r3, #14
   10af2:	18fb      	adds	r3, r7, r3
   10af4:	2200      	movs	r2, #0
   10af6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
   10af8:	687b      	ldr	r3, [r7, #4]
   10afa:	685b      	ldr	r3, [r3, #4]
   10afc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
   10afe:	4b64      	ldr	r3, [pc, #400]	; (10c90 <RegionEU868RxConfig+0x1bc>)
   10b00:	685b      	ldr	r3, [r3, #4]
   10b02:	4798      	blx	r3
   10b04:	1e03      	subs	r3, r0, #0
   10b06:	d001      	beq.n	10b0c <RegionEU868RxConfig+0x38>
    {
        return false;
   10b08:	2300      	movs	r3, #0
   10b0a:	e0bc      	b.n	10c86 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
   10b0c:	687b      	ldr	r3, [r7, #4]
   10b0e:	7cdb      	ldrb	r3, [r3, #19]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d122      	bne.n	10b5a <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
   10b14:	687b      	ldr	r3, [r7, #4]
   10b16:	781b      	ldrb	r3, [r3, #0]
   10b18:	0019      	movs	r1, r3
   10b1a:	4a5e      	ldr	r2, [pc, #376]	; (10c94 <RegionEU868RxConfig+0x1c0>)
   10b1c:	000b      	movs	r3, r1
   10b1e:	005b      	lsls	r3, r3, #1
   10b20:	185b      	adds	r3, r3, r1
   10b22:	009b      	lsls	r3, r3, #2
   10b24:	589b      	ldr	r3, [r3, r2]
   10b26:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
   10b28:	687b      	ldr	r3, [r7, #4]
   10b2a:	781b      	ldrb	r3, [r3, #0]
   10b2c:	0019      	movs	r1, r3
   10b2e:	4a59      	ldr	r2, [pc, #356]	; (10c94 <RegionEU868RxConfig+0x1c0>)
   10b30:	000b      	movs	r3, r1
   10b32:	005b      	lsls	r3, r3, #1
   10b34:	185b      	adds	r3, r3, r1
   10b36:	009b      	lsls	r3, r3, #2
   10b38:	18d3      	adds	r3, r2, r3
   10b3a:	3304      	adds	r3, #4
   10b3c:	681b      	ldr	r3, [r3, #0]
   10b3e:	2b00      	cmp	r3, #0
   10b40:	d00b      	beq.n	10b5a <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
   10b42:	687b      	ldr	r3, [r7, #4]
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	0019      	movs	r1, r3
   10b48:	4a52      	ldr	r2, [pc, #328]	; (10c94 <RegionEU868RxConfig+0x1c0>)
   10b4a:	000b      	movs	r3, r1
   10b4c:	005b      	lsls	r3, r3, #1
   10b4e:	185b      	adds	r3, r3, r1
   10b50:	009b      	lsls	r3, r3, #2
   10b52:	18d3      	adds	r3, r2, r3
   10b54:	3304      	adds	r3, #4
   10b56:	681b      	ldr	r3, [r3, #0]
   10b58:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
   10b5a:	230f      	movs	r3, #15
   10b5c:	18fb      	adds	r3, r7, r3
   10b5e:	781b      	ldrb	r3, [r3, #0]
   10b60:	b25b      	sxtb	r3, r3
   10b62:	4a4d      	ldr	r2, [pc, #308]	; (10c98 <RegionEU868RxConfig+0x1c4>)
   10b64:	5cd2      	ldrb	r2, [r2, r3]
   10b66:	230e      	movs	r3, #14
   10b68:	18fb      	adds	r3, r7, r3
   10b6a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
   10b6c:	4b48      	ldr	r3, [pc, #288]	; (10c90 <RegionEU868RxConfig+0x1bc>)
   10b6e:	68db      	ldr	r3, [r3, #12]
   10b70:	693a      	ldr	r2, [r7, #16]
   10b72:	0010      	movs	r0, r2
   10b74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
   10b76:	230f      	movs	r3, #15
   10b78:	18fb      	adds	r3, r7, r3
   10b7a:	781b      	ldrb	r3, [r3, #0]
   10b7c:	b25b      	sxtb	r3, r3
   10b7e:	2b07      	cmp	r3, #7
   10b80:	d12d      	bne.n	10bde <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
   10b82:	2317      	movs	r3, #23
   10b84:	18fb      	adds	r3, r7, r3
   10b86:	2200      	movs	r2, #0
   10b88:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   10b8a:	4b41      	ldr	r3, [pc, #260]	; (10c90 <RegionEU868RxConfig+0x1bc>)
   10b8c:	699c      	ldr	r4, [r3, #24]
   10b8e:	230e      	movs	r3, #14
   10b90:	18fb      	adds	r3, r7, r3
   10b92:	781b      	ldrb	r3, [r3, #0]
   10b94:	b25b      	sxtb	r3, r3
   10b96:	22fa      	movs	r2, #250	; 0xfa
   10b98:	0092      	lsls	r2, r2, #2
   10b9a:	4353      	muls	r3, r2
   10b9c:	001e      	movs	r6, r3
   10b9e:	687b      	ldr	r3, [r7, #4]
   10ba0:	689b      	ldr	r3, [r3, #8]
   10ba2:	b29b      	uxth	r3, r3
   10ba4:	687a      	ldr	r2, [r7, #4]
   10ba6:	7c92      	ldrb	r2, [r2, #18]
   10ba8:	4d3c      	ldr	r5, [pc, #240]	; (10c9c <RegionEU868RxConfig+0x1c8>)
   10baa:	2117      	movs	r1, #23
   10bac:	1879      	adds	r1, r7, r1
   10bae:	7808      	ldrb	r0, [r1, #0]
   10bb0:	9209      	str	r2, [sp, #36]	; 0x24
   10bb2:	2200      	movs	r2, #0
   10bb4:	9208      	str	r2, [sp, #32]
   10bb6:	2200      	movs	r2, #0
   10bb8:	9207      	str	r2, [sp, #28]
   10bba:	2200      	movs	r2, #0
   10bbc:	9206      	str	r2, [sp, #24]
   10bbe:	2201      	movs	r2, #1
   10bc0:	9205      	str	r2, [sp, #20]
   10bc2:	2200      	movs	r2, #0
   10bc4:	9204      	str	r2, [sp, #16]
   10bc6:	2200      	movs	r2, #0
   10bc8:	9203      	str	r2, [sp, #12]
   10bca:	9302      	str	r3, [sp, #8]
   10bcc:	2305      	movs	r3, #5
   10bce:	9301      	str	r3, [sp, #4]
   10bd0:	4b33      	ldr	r3, [pc, #204]	; (10ca0 <RegionEU868RxConfig+0x1cc>)
   10bd2:	9300      	str	r3, [sp, #0]
   10bd4:	2300      	movs	r3, #0
   10bd6:	0032      	movs	r2, r6
   10bd8:	0029      	movs	r1, r5
   10bda:	47a0      	blx	r4
   10bdc:	e02a      	b.n	10c34 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
   10bde:	2317      	movs	r3, #23
   10be0:	18fb      	adds	r3, r7, r3
   10be2:	2201      	movs	r2, #1
   10be4:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   10be6:	4b2a      	ldr	r3, [pc, #168]	; (10c90 <RegionEU868RxConfig+0x1bc>)
   10be8:	699c      	ldr	r4, [r3, #24]
   10bea:	687b      	ldr	r3, [r7, #4]
   10bec:	789b      	ldrb	r3, [r3, #2]
   10bee:	001e      	movs	r6, r3
   10bf0:	230e      	movs	r3, #14
   10bf2:	18fb      	adds	r3, r7, r3
   10bf4:	2500      	movs	r5, #0
   10bf6:	575d      	ldrsb	r5, [r3, r5]
   10bf8:	687b      	ldr	r3, [r7, #4]
   10bfa:	689b      	ldr	r3, [r3, #8]
   10bfc:	b29b      	uxth	r3, r3
   10bfe:	687a      	ldr	r2, [r7, #4]
   10c00:	7c92      	ldrb	r2, [r2, #18]
   10c02:	2117      	movs	r1, #23
   10c04:	1879      	adds	r1, r7, r1
   10c06:	7808      	ldrb	r0, [r1, #0]
   10c08:	9209      	str	r2, [sp, #36]	; 0x24
   10c0a:	2201      	movs	r2, #1
   10c0c:	9208      	str	r2, [sp, #32]
   10c0e:	2200      	movs	r2, #0
   10c10:	9207      	str	r2, [sp, #28]
   10c12:	2200      	movs	r2, #0
   10c14:	9206      	str	r2, [sp, #24]
   10c16:	2200      	movs	r2, #0
   10c18:	9205      	str	r2, [sp, #20]
   10c1a:	2200      	movs	r2, #0
   10c1c:	9204      	str	r2, [sp, #16]
   10c1e:	2200      	movs	r2, #0
   10c20:	9203      	str	r2, [sp, #12]
   10c22:	9302      	str	r3, [sp, #8]
   10c24:	2308      	movs	r3, #8
   10c26:	9301      	str	r3, [sp, #4]
   10c28:	2300      	movs	r3, #0
   10c2a:	9300      	str	r3, [sp, #0]
   10c2c:	2301      	movs	r3, #1
   10c2e:	002a      	movs	r2, r5
   10c30:	0031      	movs	r1, r6
   10c32:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
   10c34:	687b      	ldr	r3, [r7, #4]
   10c36:	7c5b      	ldrb	r3, [r3, #17]
   10c38:	2b00      	cmp	r3, #0
   10c3a:	d009      	beq.n	10c50 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
   10c3c:	230f      	movs	r3, #15
   10c3e:	18fb      	adds	r3, r7, r3
   10c40:	2200      	movs	r2, #0
   10c42:	569a      	ldrsb	r2, [r3, r2]
   10c44:	2316      	movs	r3, #22
   10c46:	18fb      	adds	r3, r7, r3
   10c48:	4916      	ldr	r1, [pc, #88]	; (10ca4 <RegionEU868RxConfig+0x1d0>)
   10c4a:	5c8a      	ldrb	r2, [r1, r2]
   10c4c:	701a      	strb	r2, [r3, #0]
   10c4e:	e008      	b.n	10c62 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
   10c50:	230f      	movs	r3, #15
   10c52:	18fb      	adds	r3, r7, r3
   10c54:	2200      	movs	r2, #0
   10c56:	569a      	ldrsb	r2, [r3, r2]
   10c58:	2316      	movs	r3, #22
   10c5a:	18fb      	adds	r3, r7, r3
   10c5c:	4912      	ldr	r1, [pc, #72]	; (10ca8 <RegionEU868RxConfig+0x1d4>)
   10c5e:	5c8a      	ldrb	r2, [r1, r2]
   10c60:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
   10c62:	4b0b      	ldr	r3, [pc, #44]	; (10c90 <RegionEU868RxConfig+0x1bc>)
   10c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10c66:	2216      	movs	r2, #22
   10c68:	18ba      	adds	r2, r7, r2
   10c6a:	7812      	ldrb	r2, [r2, #0]
   10c6c:	320d      	adds	r2, #13
   10c6e:	b2d1      	uxtb	r1, r2
   10c70:	2217      	movs	r2, #23
   10c72:	18ba      	adds	r2, r7, r2
   10c74:	7812      	ldrb	r2, [r2, #0]
   10c76:	0010      	movs	r0, r2
   10c78:	4798      	blx	r3

    *datarate = (uint8_t) dr;
   10c7a:	683b      	ldr	r3, [r7, #0]
   10c7c:	220f      	movs	r2, #15
   10c7e:	18ba      	adds	r2, r7, r2
   10c80:	7812      	ldrb	r2, [r2, #0]
   10c82:	701a      	strb	r2, [r3, #0]
    return true;
   10c84:	2301      	movs	r3, #1
}
   10c86:	0018      	movs	r0, r3
   10c88:	46bd      	mov	sp, r7
   10c8a:	b007      	add	sp, #28
   10c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	0001efe8 	.word	0x0001efe8
   10c94:	20001434 	.word	0x20001434
   10c98:	0001f3d8 	.word	0x0001f3d8
   10c9c:	0000c350 	.word	0x0000c350
   10ca0:	00014585 	.word	0x00014585
   10ca4:	0001f408 	.word	0x0001f408
   10ca8:	0001f400 	.word	0x0001f400

00010cac <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   10cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cae:	b093      	sub	sp, #76	; 0x4c
   10cb0:	af0a      	add	r7, sp, #40	; 0x28
   10cb2:	60f8      	str	r0, [r7, #12]
   10cb4:	60b9      	str	r1, [r7, #8]
   10cb6:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   10cb8:	68fb      	ldr	r3, [r7, #12]
   10cba:	785b      	ldrb	r3, [r3, #1]
   10cbc:	b25b      	sxtb	r3, r3
   10cbe:	001a      	movs	r2, r3
   10cc0:	4b61      	ldr	r3, [pc, #388]	; (10e48 <RegionEU868TxConfig+0x19c>)
   10cc2:	5c9a      	ldrb	r2, [r3, r2]
   10cc4:	231e      	movs	r3, #30
   10cc6:	18fb      	adds	r3, r7, r3
   10cc8:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
   10cca:	68fb      	ldr	r3, [r7, #12]
   10ccc:	2002      	movs	r0, #2
   10cce:	5618      	ldrsb	r0, [r3, r0]
   10cd0:	68fb      	ldr	r3, [r7, #12]
   10cd2:	781b      	ldrb	r3, [r3, #0]
   10cd4:	0019      	movs	r1, r3
   10cd6:	4a5d      	ldr	r2, [pc, #372]	; (10e4c <RegionEU868TxConfig+0x1a0>)
   10cd8:	000b      	movs	r3, r1
   10cda:	005b      	lsls	r3, r3, #1
   10cdc:	185b      	adds	r3, r3, r1
   10cde:	009b      	lsls	r3, r3, #2
   10ce0:	18d3      	adds	r3, r2, r3
   10ce2:	3309      	adds	r3, #9
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	4a59      	ldr	r2, [pc, #356]	; (10e4c <RegionEU868TxConfig+0x1a0>)
   10ce8:	330c      	adds	r3, #12
   10cea:	011b      	lsls	r3, r3, #4
   10cec:	18d3      	adds	r3, r2, r3
   10cee:	3302      	adds	r3, #2
   10cf0:	2100      	movs	r1, #0
   10cf2:	5659      	ldrsb	r1, [r3, r1]
   10cf4:	68fb      	ldr	r3, [r7, #12]
   10cf6:	2201      	movs	r2, #1
   10cf8:	569a      	ldrsb	r2, [r3, r2]
   10cfa:	231d      	movs	r3, #29
   10cfc:	18fc      	adds	r4, r7, r3
   10cfe:	4b54      	ldr	r3, [pc, #336]	; (10e50 <RegionEU868TxConfig+0x1a4>)
   10d00:	4d54      	ldr	r5, [pc, #336]	; (10e54 <RegionEU868TxConfig+0x1a8>)
   10d02:	47a8      	blx	r5
   10d04:	0003      	movs	r3, r0
   10d06:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
   10d08:	68fb      	ldr	r3, [r7, #12]
   10d0a:	785b      	ldrb	r3, [r3, #1]
   10d0c:	b25b      	sxtb	r3, r3
   10d0e:	0018      	movs	r0, r3
   10d10:	4b51      	ldr	r3, [pc, #324]	; (10e58 <RegionEU868TxConfig+0x1ac>)
   10d12:	4798      	blx	r3
   10d14:	0003      	movs	r3, r0
   10d16:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
   10d18:	2317      	movs	r3, #23
   10d1a:	18fb      	adds	r3, r7, r3
   10d1c:	2200      	movs	r2, #0
   10d1e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   10d20:	68fb      	ldr	r3, [r7, #12]
   10d22:	6859      	ldr	r1, [r3, #4]
   10d24:	68fb      	ldr	r3, [r7, #12]
   10d26:	689a      	ldr	r2, [r3, #8]
   10d28:	2317      	movs	r3, #23
   10d2a:	18fc      	adds	r4, r7, r3
   10d2c:	231d      	movs	r3, #29
   10d2e:	18fb      	adds	r3, r7, r3
   10d30:	781b      	ldrb	r3, [r3, #0]
   10d32:	b25b      	sxtb	r3, r3
   10d34:	0018      	movs	r0, r3
   10d36:	4b49      	ldr	r3, [pc, #292]	; (10e5c <RegionEU868TxConfig+0x1b0>)
   10d38:	4798      	blx	r3
   10d3a:	0003      	movs	r3, r0
   10d3c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
   10d3e:	4b48      	ldr	r3, [pc, #288]	; (10e60 <RegionEU868TxConfig+0x1b4>)
   10d40:	68da      	ldr	r2, [r3, #12]
   10d42:	68fb      	ldr	r3, [r7, #12]
   10d44:	781b      	ldrb	r3, [r3, #0]
   10d46:	0018      	movs	r0, r3
   10d48:	4940      	ldr	r1, [pc, #256]	; (10e4c <RegionEU868TxConfig+0x1a0>)
   10d4a:	0003      	movs	r3, r0
   10d4c:	005b      	lsls	r3, r3, #1
   10d4e:	181b      	adds	r3, r3, r0
   10d50:	009b      	lsls	r3, r3, #2
   10d52:	585b      	ldr	r3, [r3, r1]
   10d54:	0018      	movs	r0, r3
   10d56:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
   10d58:	68fb      	ldr	r3, [r7, #12]
   10d5a:	785b      	ldrb	r3, [r3, #1]
   10d5c:	b25b      	sxtb	r3, r3
   10d5e:	2b07      	cmp	r3, #7
   10d60:	d12b      	bne.n	10dba <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
   10d62:	231f      	movs	r3, #31
   10d64:	18fb      	adds	r3, r7, r3
   10d66:	2200      	movs	r2, #0
   10d68:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
   10d6a:	4b3d      	ldr	r3, [pc, #244]	; (10e60 <RegionEU868TxConfig+0x1b4>)
   10d6c:	69dc      	ldr	r4, [r3, #28]
   10d6e:	231e      	movs	r3, #30
   10d70:	18fb      	adds	r3, r7, r3
   10d72:	781b      	ldrb	r3, [r3, #0]
   10d74:	b25b      	sxtb	r3, r3
   10d76:	22fa      	movs	r2, #250	; 0xfa
   10d78:	0092      	lsls	r2, r2, #2
   10d7a:	4353      	muls	r3, r2
   10d7c:	001d      	movs	r5, r3
   10d7e:	69ba      	ldr	r2, [r7, #24]
   10d80:	4e38      	ldr	r6, [pc, #224]	; (10e64 <RegionEU868TxConfig+0x1b8>)
   10d82:	2317      	movs	r3, #23
   10d84:	18fb      	adds	r3, r7, r3
   10d86:	2100      	movs	r1, #0
   10d88:	5659      	ldrsb	r1, [r3, r1]
   10d8a:	231f      	movs	r3, #31
   10d8c:	18fb      	adds	r3, r7, r3
   10d8e:	7818      	ldrb	r0, [r3, #0]
   10d90:	4b35      	ldr	r3, [pc, #212]	; (10e68 <RegionEU868TxConfig+0x1bc>)
   10d92:	9308      	str	r3, [sp, #32]
   10d94:	2300      	movs	r3, #0
   10d96:	9307      	str	r3, [sp, #28]
   10d98:	2300      	movs	r3, #0
   10d9a:	9306      	str	r3, [sp, #24]
   10d9c:	2300      	movs	r3, #0
   10d9e:	9305      	str	r3, [sp, #20]
   10da0:	2301      	movs	r3, #1
   10da2:	9304      	str	r3, [sp, #16]
   10da4:	2300      	movs	r3, #0
   10da6:	9303      	str	r3, [sp, #12]
   10da8:	2305      	movs	r3, #5
   10daa:	9302      	str	r3, [sp, #8]
   10dac:	2300      	movs	r3, #0
   10dae:	9301      	str	r3, [sp, #4]
   10db0:	9500      	str	r5, [sp, #0]
   10db2:	0013      	movs	r3, r2
   10db4:	0032      	movs	r2, r6
   10db6:	47a0      	blx	r4
   10db8:	e025      	b.n	10e06 <RegionEU868TxConfig+0x15a>
    }
    else
    {
        modem = MODEM_LORA;
   10dba:	231f      	movs	r3, #31
   10dbc:	18fb      	adds	r3, r7, r3
   10dbe:	2201      	movs	r2, #1
   10dc0:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
   10dc2:	4b27      	ldr	r3, [pc, #156]	; (10e60 <RegionEU868TxConfig+0x1b4>)
   10dc4:	69dc      	ldr	r4, [r3, #28]
   10dc6:	231e      	movs	r3, #30
   10dc8:	18fb      	adds	r3, r7, r3
   10dca:	781b      	ldrb	r3, [r3, #0]
   10dcc:	b25b      	sxtb	r3, r3
   10dce:	69bd      	ldr	r5, [r7, #24]
   10dd0:	2217      	movs	r2, #23
   10dd2:	18ba      	adds	r2, r7, r2
   10dd4:	2100      	movs	r1, #0
   10dd6:	5651      	ldrsb	r1, [r2, r1]
   10dd8:	221f      	movs	r2, #31
   10dda:	18ba      	adds	r2, r7, r2
   10ddc:	7810      	ldrb	r0, [r2, #0]
   10dde:	4a22      	ldr	r2, [pc, #136]	; (10e68 <RegionEU868TxConfig+0x1bc>)
   10de0:	9208      	str	r2, [sp, #32]
   10de2:	2200      	movs	r2, #0
   10de4:	9207      	str	r2, [sp, #28]
   10de6:	2200      	movs	r2, #0
   10de8:	9206      	str	r2, [sp, #24]
   10dea:	2200      	movs	r2, #0
   10dec:	9205      	str	r2, [sp, #20]
   10dee:	2201      	movs	r2, #1
   10df0:	9204      	str	r2, [sp, #16]
   10df2:	2200      	movs	r2, #0
   10df4:	9203      	str	r2, [sp, #12]
   10df6:	2208      	movs	r2, #8
   10df8:	9202      	str	r2, [sp, #8]
   10dfa:	2201      	movs	r2, #1
   10dfc:	9201      	str	r2, [sp, #4]
   10dfe:	9300      	str	r3, [sp, #0]
   10e00:	002b      	movs	r3, r5
   10e02:	2200      	movs	r2, #0
   10e04:	47a0      	blx	r4
    }

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
   10e06:	4b16      	ldr	r3, [pc, #88]	; (10e60 <RegionEU868TxConfig+0x1b4>)
   10e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10e0a:	68fa      	ldr	r2, [r7, #12]
   10e0c:	8992      	ldrh	r2, [r2, #12]
   10e0e:	b2d1      	uxtb	r1, r2
   10e10:	221f      	movs	r2, #31
   10e12:	18ba      	adds	r2, r7, r2
   10e14:	7812      	ldrb	r2, [r2, #0]
   10e16:	0010      	movs	r0, r2
   10e18:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
   10e1a:	4b11      	ldr	r3, [pc, #68]	; (10e60 <RegionEU868TxConfig+0x1b4>)
   10e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10e1e:	68fa      	ldr	r2, [r7, #12]
   10e20:	8992      	ldrh	r2, [r2, #12]
   10e22:	b2d1      	uxtb	r1, r2
   10e24:	221f      	movs	r2, #31
   10e26:	18ba      	adds	r2, r7, r2
   10e28:	7812      	ldrb	r2, [r2, #0]
   10e2a:	0010      	movs	r0, r2
   10e2c:	4798      	blx	r3
   10e2e:	0002      	movs	r2, r0
   10e30:	687b      	ldr	r3, [r7, #4]
   10e32:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
   10e34:	68bb      	ldr	r3, [r7, #8]
   10e36:	221d      	movs	r2, #29
   10e38:	18ba      	adds	r2, r7, r2
   10e3a:	7812      	ldrb	r2, [r2, #0]
   10e3c:	701a      	strb	r2, [r3, #0]
    return true;
   10e3e:	2301      	movs	r3, #1
}
   10e40:	0018      	movs	r0, r3
   10e42:	46bd      	mov	sp, r7
   10e44:	b009      	add	sp, #36	; 0x24
   10e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e48:	0001f3d8 	.word	0x0001f3d8
   10e4c:	20001434 	.word	0x20001434
   10e50:	20001544 	.word	0x20001544
   10e54:	00010111 	.word	0x00010111
   10e58:	000100d5 	.word	0x000100d5
   10e5c:	0000fec9 	.word	0x0000fec9
   10e60:	0001efe8 	.word	0x0001efe8
   10e64:	000061a8 	.word	0x000061a8
   10e68:	00000bb8 	.word	0x00000bb8

00010e6c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   10e6c:	b5b0      	push	{r4, r5, r7, lr}
   10e6e:	b092      	sub	sp, #72	; 0x48
   10e70:	af00      	add	r7, sp, #0
   10e72:	60f8      	str	r0, [r7, #12]
   10e74:	60b9      	str	r1, [r7, #8]
   10e76:	607a      	str	r2, [r7, #4]
   10e78:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
   10e7a:	2347      	movs	r3, #71	; 0x47
   10e7c:	18fb      	adds	r3, r7, r3
   10e7e:	2207      	movs	r2, #7
   10e80:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
   10e82:	2344      	movs	r3, #68	; 0x44
   10e84:	18fb      	adds	r3, r7, r3
   10e86:	2200      	movs	r2, #0
   10e88:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
   10e8a:	2346      	movs	r3, #70	; 0x46
   10e8c:	18fb      	adds	r3, r7, r3
   10e8e:	2200      	movs	r2, #0
   10e90:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
   10e92:	233a      	movs	r3, #58	; 0x3a
   10e94:	18fb      	adds	r3, r7, r3
   10e96:	2200      	movs	r2, #0
   10e98:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
   10e9a:	e0a6      	b.n	10fea <RegionEU868LinkAdrReq+0x17e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
   10e9c:	68fb      	ldr	r3, [r7, #12]
   10e9e:	685a      	ldr	r2, [r3, #4]
   10ea0:	2346      	movs	r3, #70	; 0x46
   10ea2:	18fb      	adds	r3, r7, r3
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	18d3      	adds	r3, r2, r3
   10ea8:	2244      	movs	r2, #68	; 0x44
   10eaa:	18bc      	adds	r4, r7, r2
   10eac:	223c      	movs	r2, #60	; 0x3c
   10eae:	18ba      	adds	r2, r7, r2
   10eb0:	0011      	movs	r1, r2
   10eb2:	0018      	movs	r0, r3
   10eb4:	4ba6      	ldr	r3, [pc, #664]	; (11150 <RegionEU868LinkAdrReq+0x2e4>)
   10eb6:	4798      	blx	r3
   10eb8:	0003      	movs	r3, r0
   10eba:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
   10ebc:	2344      	movs	r3, #68	; 0x44
   10ebe:	18fb      	adds	r3, r7, r3
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d100      	bne.n	10ec8 <RegionEU868LinkAdrReq+0x5c>
   10ec6:	e099      	b.n	10ffc <RegionEU868LinkAdrReq+0x190>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
   10ec8:	2346      	movs	r3, #70	; 0x46
   10eca:	18fb      	adds	r3, r7, r3
   10ecc:	2246      	movs	r2, #70	; 0x46
   10ece:	18b9      	adds	r1, r7, r2
   10ed0:	2244      	movs	r2, #68	; 0x44
   10ed2:	18ba      	adds	r2, r7, r2
   10ed4:	7809      	ldrb	r1, [r1, #0]
   10ed6:	7812      	ldrb	r2, [r2, #0]
   10ed8:	188a      	adds	r2, r1, r2
   10eda:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
   10edc:	2347      	movs	r3, #71	; 0x47
   10ede:	18fb      	adds	r3, r7, r3
   10ee0:	2207      	movs	r2, #7
   10ee2:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
   10ee4:	233c      	movs	r3, #60	; 0x3c
   10ee6:	18fb      	adds	r3, r7, r3
   10ee8:	889a      	ldrh	r2, [r3, #4]
   10eea:	233a      	movs	r3, #58	; 0x3a
   10eec:	18fb      	adds	r3, r7, r3
   10eee:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   10ef0:	233c      	movs	r3, #60	; 0x3c
   10ef2:	18fb      	adds	r3, r7, r3
   10ef4:	78db      	ldrb	r3, [r3, #3]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d10d      	bne.n	10f16 <RegionEU868LinkAdrReq+0xaa>
   10efa:	233a      	movs	r3, #58	; 0x3a
   10efc:	18fb      	adds	r3, r7, r3
   10efe:	881b      	ldrh	r3, [r3, #0]
   10f00:	2b00      	cmp	r3, #0
   10f02:	d108      	bne.n	10f16 <RegionEU868LinkAdrReq+0xaa>
        {
            status &= 0xFE; // Channel mask KO
   10f04:	2347      	movs	r3, #71	; 0x47
   10f06:	18fb      	adds	r3, r7, r3
   10f08:	2247      	movs	r2, #71	; 0x47
   10f0a:	18ba      	adds	r2, r7, r2
   10f0c:	7812      	ldrb	r2, [r2, #0]
   10f0e:	2101      	movs	r1, #1
   10f10:	438a      	bics	r2, r1
   10f12:	701a      	strb	r2, [r3, #0]
   10f14:	e069      	b.n	10fea <RegionEU868LinkAdrReq+0x17e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   10f16:	233c      	movs	r3, #60	; 0x3c
   10f18:	18fb      	adds	r3, r7, r3
   10f1a:	78db      	ldrb	r3, [r3, #3]
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d004      	beq.n	10f2a <RegionEU868LinkAdrReq+0xbe>
   10f20:	233c      	movs	r3, #60	; 0x3c
   10f22:	18fb      	adds	r3, r7, r3
   10f24:	78db      	ldrb	r3, [r3, #3]
   10f26:	2b05      	cmp	r3, #5
   10f28:	d904      	bls.n	10f34 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
   10f2a:	233c      	movs	r3, #60	; 0x3c
   10f2c:	18fb      	adds	r3, r7, r3
   10f2e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   10f30:	2b06      	cmp	r3, #6
   10f32:	d908      	bls.n	10f46 <RegionEU868LinkAdrReq+0xda>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
   10f34:	2347      	movs	r3, #71	; 0x47
   10f36:	18fb      	adds	r3, r7, r3
   10f38:	2247      	movs	r2, #71	; 0x47
   10f3a:	18ba      	adds	r2, r7, r2
   10f3c:	7812      	ldrb	r2, [r2, #0]
   10f3e:	2101      	movs	r1, #1
   10f40:	438a      	bics	r2, r1
   10f42:	701a      	strb	r2, [r3, #0]
   10f44:	e051      	b.n	10fea <RegionEU868LinkAdrReq+0x17e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   10f46:	2345      	movs	r3, #69	; 0x45
   10f48:	18fb      	adds	r3, r7, r3
   10f4a:	2200      	movs	r2, #0
   10f4c:	701a      	strb	r2, [r3, #0]
   10f4e:	e047      	b.n	10fe0 <RegionEU868LinkAdrReq+0x174>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
   10f50:	233c      	movs	r3, #60	; 0x3c
   10f52:	18fb      	adds	r3, r7, r3
   10f54:	78db      	ldrb	r3, [r3, #3]
   10f56:	2b06      	cmp	r3, #6
   10f58:	d11c      	bne.n	10f94 <RegionEU868LinkAdrReq+0x128>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
   10f5a:	2345      	movs	r3, #69	; 0x45
   10f5c:	18fb      	adds	r3, r7, r3
   10f5e:	781a      	ldrb	r2, [r3, #0]
   10f60:	497c      	ldr	r1, [pc, #496]	; (11154 <RegionEU868LinkAdrReq+0x2e8>)
   10f62:	0013      	movs	r3, r2
   10f64:	005b      	lsls	r3, r3, #1
   10f66:	189b      	adds	r3, r3, r2
   10f68:	009b      	lsls	r3, r3, #2
   10f6a:	585b      	ldr	r3, [r3, r1]
   10f6c:	2b00      	cmp	r3, #0
   10f6e:	d030      	beq.n	10fd2 <RegionEU868LinkAdrReq+0x166>
                    {
                        chMask |= 1 << i;
   10f70:	2345      	movs	r3, #69	; 0x45
   10f72:	18fb      	adds	r3, r7, r3
   10f74:	781b      	ldrb	r3, [r3, #0]
   10f76:	2201      	movs	r2, #1
   10f78:	409a      	lsls	r2, r3
   10f7a:	0013      	movs	r3, r2
   10f7c:	b21a      	sxth	r2, r3
   10f7e:	233a      	movs	r3, #58	; 0x3a
   10f80:	18fb      	adds	r3, r7, r3
   10f82:	881b      	ldrh	r3, [r3, #0]
   10f84:	b21b      	sxth	r3, r3
   10f86:	4313      	orrs	r3, r2
   10f88:	b21b      	sxth	r3, r3
   10f8a:	b29a      	uxth	r2, r3
   10f8c:	233a      	movs	r3, #58	; 0x3a
   10f8e:	18fb      	adds	r3, r7, r3
   10f90:	801a      	strh	r2, [r3, #0]
   10f92:	e01e      	b.n	10fd2 <RegionEU868LinkAdrReq+0x166>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   10f94:	233a      	movs	r3, #58	; 0x3a
   10f96:	18fb      	adds	r3, r7, r3
   10f98:	881b      	ldrh	r3, [r3, #0]
   10f9a:	001a      	movs	r2, r3
   10f9c:	2345      	movs	r3, #69	; 0x45
   10f9e:	18fb      	adds	r3, r7, r3
   10fa0:	781b      	ldrb	r3, [r3, #0]
   10fa2:	411a      	asrs	r2, r3
   10fa4:	0013      	movs	r3, r2
   10fa6:	2201      	movs	r2, #1
   10fa8:	4013      	ands	r3, r2
   10faa:	d012      	beq.n	10fd2 <RegionEU868LinkAdrReq+0x166>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
   10fac:	2345      	movs	r3, #69	; 0x45
   10fae:	18fb      	adds	r3, r7, r3
   10fb0:	781a      	ldrb	r2, [r3, #0]
   10fb2:	4968      	ldr	r1, [pc, #416]	; (11154 <RegionEU868LinkAdrReq+0x2e8>)
   10fb4:	0013      	movs	r3, r2
   10fb6:	005b      	lsls	r3, r3, #1
   10fb8:	189b      	adds	r3, r3, r2
   10fba:	009b      	lsls	r3, r3, #2
   10fbc:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   10fbe:	2b00      	cmp	r3, #0
   10fc0:	d107      	bne.n	10fd2 <RegionEU868LinkAdrReq+0x166>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
   10fc2:	2347      	movs	r3, #71	; 0x47
   10fc4:	18fb      	adds	r3, r7, r3
   10fc6:	2247      	movs	r2, #71	; 0x47
   10fc8:	18ba      	adds	r2, r7, r2
   10fca:	7812      	ldrb	r2, [r2, #0]
   10fcc:	2101      	movs	r1, #1
   10fce:	438a      	bics	r2, r1
   10fd0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   10fd2:	2345      	movs	r3, #69	; 0x45
   10fd4:	18fb      	adds	r3, r7, r3
   10fd6:	781a      	ldrb	r2, [r3, #0]
   10fd8:	2345      	movs	r3, #69	; 0x45
   10fda:	18fb      	adds	r3, r7, r3
   10fdc:	3201      	adds	r2, #1
   10fde:	701a      	strb	r2, [r3, #0]
   10fe0:	2345      	movs	r3, #69	; 0x45
   10fe2:	18fb      	adds	r3, r7, r3
   10fe4:	781b      	ldrb	r3, [r3, #0]
   10fe6:	2b0f      	cmp	r3, #15
   10fe8:	d9b2      	bls.n	10f50 <RegionEU868LinkAdrReq+0xe4>
    while( bytesProcessed < linkAdrReq->PayloadSize )
   10fea:	68fb      	ldr	r3, [r7, #12]
   10fec:	7a1b      	ldrb	r3, [r3, #8]
   10fee:	2246      	movs	r2, #70	; 0x46
   10ff0:	18ba      	adds	r2, r7, r2
   10ff2:	7812      	ldrb	r2, [r2, #0]
   10ff4:	429a      	cmp	r2, r3
   10ff6:	d200      	bcs.n	10ffa <RegionEU868LinkAdrReq+0x18e>
   10ff8:	e750      	b.n	10e9c <RegionEU868LinkAdrReq+0x30>
   10ffa:	e000      	b.n	10ffe <RegionEU868LinkAdrReq+0x192>
            break; // break loop, since no more request has been found
   10ffc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
   10ffe:	2334      	movs	r3, #52	; 0x34
   11000:	18fb      	adds	r3, r7, r3
   11002:	2201      	movs	r2, #1
   11004:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
   11006:	68fb      	ldr	r3, [r7, #12]
   11008:	7a5a      	ldrb	r2, [r3, #9]
   1100a:	2334      	movs	r3, #52	; 0x34
   1100c:	18fb      	adds	r3, r7, r3
   1100e:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
   11010:	2334      	movs	r3, #52	; 0x34
   11012:	18fb      	adds	r3, r7, r3
   11014:	0018      	movs	r0, r3
   11016:	4b50      	ldr	r3, [pc, #320]	; (11158 <RegionEU868LinkAdrReq+0x2ec>)
   11018:	4798      	blx	r3
   1101a:	0003      	movs	r3, r0
   1101c:	001a      	movs	r2, r3
   1101e:	2330      	movs	r3, #48	; 0x30
   11020:	18fb      	adds	r3, r7, r3
   11022:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
   11024:	2310      	movs	r3, #16
   11026:	18fb      	adds	r3, r7, r3
   11028:	2247      	movs	r2, #71	; 0x47
   1102a:	18ba      	adds	r2, r7, r2
   1102c:	7812      	ldrb	r2, [r2, #0]
   1102e:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   11030:	68fb      	ldr	r3, [r7, #12]
   11032:	7a9a      	ldrb	r2, [r3, #10]
   11034:	2310      	movs	r3, #16
   11036:	18fb      	adds	r3, r7, r3
   11038:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   1103a:	233c      	movs	r3, #60	; 0x3c
   1103c:	18fb      	adds	r3, r7, r3
   1103e:	2201      	movs	r2, #1
   11040:	569a      	ldrsb	r2, [r3, r2]
   11042:	2310      	movs	r3, #16
   11044:	18fb      	adds	r3, r7, r3
   11046:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   11048:	233c      	movs	r3, #60	; 0x3c
   1104a:	18fb      	adds	r3, r7, r3
   1104c:	2202      	movs	r2, #2
   1104e:	569a      	ldrsb	r2, [r3, r2]
   11050:	2310      	movs	r3, #16
   11052:	18fb      	adds	r3, r7, r3
   11054:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   11056:	233c      	movs	r3, #60	; 0x3c
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781a      	ldrb	r2, [r3, #0]
   1105c:	2310      	movs	r3, #16
   1105e:	18fb      	adds	r3, r7, r3
   11060:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   11062:	68fb      	ldr	r3, [r7, #12]
   11064:	220b      	movs	r2, #11
   11066:	569a      	ldrsb	r2, [r3, r2]
   11068:	2310      	movs	r3, #16
   1106a:	18fb      	adds	r3, r7, r3
   1106c:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
   1106e:	68fb      	ldr	r3, [r7, #12]
   11070:	220c      	movs	r2, #12
   11072:	569a      	ldrsb	r2, [r3, r2]
   11074:	2310      	movs	r3, #16
   11076:	18fb      	adds	r3, r7, r3
   11078:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
   1107a:	68fb      	ldr	r3, [r7, #12]
   1107c:	7b5b      	ldrb	r3, [r3, #13]
   1107e:	b25a      	sxtb	r2, r3
   11080:	2310      	movs	r3, #16
   11082:	18fb      	adds	r3, r7, r3
   11084:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
   11086:	2310      	movs	r3, #16
   11088:	18fb      	adds	r3, r7, r3
   1108a:	2210      	movs	r2, #16
   1108c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
   1108e:	2310      	movs	r3, #16
   11090:	18fb      	adds	r3, r7, r3
   11092:	223a      	movs	r2, #58	; 0x3a
   11094:	18ba      	adds	r2, r7, r2
   11096:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
   11098:	2330      	movs	r3, #48	; 0x30
   1109a:	18fb      	adds	r3, r7, r3
   1109c:	681b      	ldr	r3, [r3, #0]
   1109e:	b25a      	sxtb	r2, r3
   110a0:	2310      	movs	r3, #16
   110a2:	18fb      	adds	r3, r7, r3
   110a4:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
   110a6:	2310      	movs	r3, #16
   110a8:	18fb      	adds	r3, r7, r3
   110aa:	2207      	movs	r2, #7
   110ac:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
   110ae:	2310      	movs	r3, #16
   110b0:	18fb      	adds	r3, r7, r3
   110b2:	4a28      	ldr	r2, [pc, #160]	; (11154 <RegionEU868LinkAdrReq+0x2e8>)
   110b4:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
   110b6:	2310      	movs	r3, #16
   110b8:	18fb      	adds	r3, r7, r3
   110ba:	2207      	movs	r2, #7
   110bc:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
   110be:	2310      	movs	r3, #16
   110c0:	18fb      	adds	r3, r7, r3
   110c2:	2200      	movs	r2, #0
   110c4:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
   110c6:	2310      	movs	r3, #16
   110c8:	18fb      	adds	r3, r7, r3
   110ca:	68fa      	ldr	r2, [r7, #12]
   110cc:	6812      	ldr	r2, [r2, #0]
   110ce:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   110d0:	2347      	movs	r3, #71	; 0x47
   110d2:	18fc      	adds	r4, r7, r3
   110d4:	233c      	movs	r3, #60	; 0x3c
   110d6:	18fd      	adds	r5, r7, r3
   110d8:	233c      	movs	r3, #60	; 0x3c
   110da:	18fb      	adds	r3, r7, r3
   110dc:	1c9a      	adds	r2, r3, #2
   110de:	233c      	movs	r3, #60	; 0x3c
   110e0:	18fb      	adds	r3, r7, r3
   110e2:	1c59      	adds	r1, r3, #1
   110e4:	2310      	movs	r3, #16
   110e6:	18f8      	adds	r0, r7, r3
   110e8:	002b      	movs	r3, r5
   110ea:	4d1c      	ldr	r5, [pc, #112]	; (1115c <RegionEU868LinkAdrReq+0x2f0>)
   110ec:	47a8      	blx	r5
   110ee:	0003      	movs	r3, r0
   110f0:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
   110f2:	2347      	movs	r3, #71	; 0x47
   110f4:	18fb      	adds	r3, r7, r3
   110f6:	781b      	ldrb	r3, [r3, #0]
   110f8:	2b07      	cmp	r3, #7
   110fa:	d10c      	bne.n	11116 <RegionEU868LinkAdrReq+0x2aa>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
   110fc:	4b18      	ldr	r3, [pc, #96]	; (11160 <RegionEU868LinkAdrReq+0x2f4>)
   110fe:	2202      	movs	r2, #2
   11100:	2100      	movs	r1, #0
   11102:	0018      	movs	r0, r3
   11104:	4b17      	ldr	r3, [pc, #92]	; (11164 <RegionEU868LinkAdrReq+0x2f8>)
   11106:	4798      	blx	r3
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
   11108:	233a      	movs	r3, #58	; 0x3a
   1110a:	18fb      	adds	r3, r7, r3
   1110c:	8819      	ldrh	r1, [r3, #0]
   1110e:	4a11      	ldr	r2, [pc, #68]	; (11154 <RegionEU868LinkAdrReq+0x2e8>)
   11110:	2388      	movs	r3, #136	; 0x88
   11112:	005b      	lsls	r3, r3, #1
   11114:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
   11116:	233c      	movs	r3, #60	; 0x3c
   11118:	18fb      	adds	r3, r7, r3
   1111a:	2201      	movs	r2, #1
   1111c:	569a      	ldrsb	r2, [r3, r2]
   1111e:	68bb      	ldr	r3, [r7, #8]
   11120:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
   11122:	233c      	movs	r3, #60	; 0x3c
   11124:	18fb      	adds	r3, r7, r3
   11126:	2202      	movs	r2, #2
   11128:	569a      	ldrsb	r2, [r3, r2]
   1112a:	687b      	ldr	r3, [r7, #4]
   1112c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
   1112e:	233c      	movs	r3, #60	; 0x3c
   11130:	18fb      	adds	r3, r7, r3
   11132:	781a      	ldrb	r2, [r3, #0]
   11134:	683b      	ldr	r3, [r7, #0]
   11136:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
   11138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1113a:	2246      	movs	r2, #70	; 0x46
   1113c:	18ba      	adds	r2, r7, r2
   1113e:	7812      	ldrb	r2, [r2, #0]
   11140:	701a      	strb	r2, [r3, #0]

    return status;
   11142:	2347      	movs	r3, #71	; 0x47
   11144:	18fb      	adds	r3, r7, r3
   11146:	781b      	ldrb	r3, [r3, #0]
}
   11148:	0018      	movs	r0, r3
   1114a:	46bd      	mov	sp, r7
   1114c:	b012      	add	sp, #72	; 0x48
   1114e:	bdb0      	pop	{r4, r5, r7, pc}
   11150:	0000fa91 	.word	0x0000fa91
   11154:	20001434 	.word	0x20001434
   11158:	00010435 	.word	0x00010435
   1115c:	0000fb3d 	.word	0x0000fb3d
   11160:	20001544 	.word	0x20001544
   11164:	000029cd 	.word	0x000029cd

00011168 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
   11168:	b580      	push	{r7, lr}
   1116a:	b084      	sub	sp, #16
   1116c:	af00      	add	r7, sp, #0
   1116e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
   11170:	230f      	movs	r3, #15
   11172:	18fb      	adds	r3, r7, r3
   11174:	2207      	movs	r2, #7
   11176:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
   11178:	230e      	movs	r3, #14
   1117a:	18fb      	adds	r3, r7, r3
   1117c:	2200      	movs	r2, #0
   1117e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
   11180:	687b      	ldr	r3, [r7, #4]
   11182:	685b      	ldr	r3, [r3, #4]
   11184:	220e      	movs	r2, #14
   11186:	18ba      	adds	r2, r7, r2
   11188:	0011      	movs	r1, r2
   1118a:	0018      	movs	r0, r3
   1118c:	4b1d      	ldr	r3, [pc, #116]	; (11204 <RegionEU868RxParamSetupReq+0x9c>)
   1118e:	4798      	blx	r3
   11190:	0003      	movs	r3, r0
   11192:	001a      	movs	r2, r3
   11194:	2301      	movs	r3, #1
   11196:	4053      	eors	r3, r2
   11198:	b2db      	uxtb	r3, r3
   1119a:	2b00      	cmp	r3, #0
   1119c:	d007      	beq.n	111ae <RegionEU868RxParamSetupReq+0x46>
    {
        status &= 0xFE; // Channel frequency KO
   1119e:	230f      	movs	r3, #15
   111a0:	18fb      	adds	r3, r7, r3
   111a2:	220f      	movs	r2, #15
   111a4:	18ba      	adds	r2, r7, r2
   111a6:	7812      	ldrb	r2, [r2, #0]
   111a8:	2101      	movs	r1, #1
   111aa:	438a      	bics	r2, r1
   111ac:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
   111ae:	687b      	ldr	r3, [r7, #4]
   111b0:	781b      	ldrb	r3, [r3, #0]
   111b2:	b25b      	sxtb	r3, r3
   111b4:	2207      	movs	r2, #7
   111b6:	2100      	movs	r1, #0
   111b8:	0018      	movs	r0, r3
   111ba:	4b13      	ldr	r3, [pc, #76]	; (11208 <RegionEU868RxParamSetupReq+0xa0>)
   111bc:	4798      	blx	r3
   111be:	1e03      	subs	r3, r0, #0
   111c0:	d107      	bne.n	111d2 <RegionEU868RxParamSetupReq+0x6a>
    {
        status &= 0xFD; // Datarate KO
   111c2:	230f      	movs	r3, #15
   111c4:	18fb      	adds	r3, r7, r3
   111c6:	220f      	movs	r2, #15
   111c8:	18ba      	adds	r2, r7, r2
   111ca:	7812      	ldrb	r2, [r2, #0]
   111cc:	2102      	movs	r1, #2
   111ce:	438a      	bics	r2, r1
   111d0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
   111d2:	687b      	ldr	r3, [r7, #4]
   111d4:	785b      	ldrb	r3, [r3, #1]
   111d6:	b25b      	sxtb	r3, r3
   111d8:	2205      	movs	r2, #5
   111da:	2100      	movs	r1, #0
   111dc:	0018      	movs	r0, r3
   111de:	4b0a      	ldr	r3, [pc, #40]	; (11208 <RegionEU868RxParamSetupReq+0xa0>)
   111e0:	4798      	blx	r3
   111e2:	1e03      	subs	r3, r0, #0
   111e4:	d107      	bne.n	111f6 <RegionEU868RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
   111e6:	230f      	movs	r3, #15
   111e8:	18fb      	adds	r3, r7, r3
   111ea:	220f      	movs	r2, #15
   111ec:	18ba      	adds	r2, r7, r2
   111ee:	7812      	ldrb	r2, [r2, #0]
   111f0:	2104      	movs	r1, #4
   111f2:	438a      	bics	r2, r1
   111f4:	701a      	strb	r2, [r3, #0]
    }

    return status;
   111f6:	230f      	movs	r3, #15
   111f8:	18fb      	adds	r3, r7, r3
   111fa:	781b      	ldrb	r3, [r3, #0]
}
   111fc:	0018      	movs	r0, r3
   111fe:	46bd      	mov	sp, r7
   11200:	b004      	add	sp, #16
   11202:	bd80      	pop	{r7, pc}
   11204:	00010165 	.word	0x00010165
   11208:	0000f69d 	.word	0x0000f69d

0001120c <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
   1120c:	b580      	push	{r7, lr}
   1120e:	b086      	sub	sp, #24
   11210:	af00      	add	r7, sp, #0
   11212:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
   11214:	2317      	movs	r3, #23
   11216:	18fb      	adds	r3, r7, r3
   11218:	2203      	movs	r2, #3
   1121a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	681b      	ldr	r3, [r3, #0]
   11222:	2b00      	cmp	r3, #0
   11224:	d11b      	bne.n	1125e <RegionEU868NewChannelReq+0x52>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
   11226:	687b      	ldr	r3, [r7, #4]
   11228:	791b      	ldrb	r3, [r3, #4]
   1122a:	b25b      	sxtb	r3, r3
   1122c:	b2da      	uxtb	r2, r3
   1122e:	2308      	movs	r3, #8
   11230:	18fb      	adds	r3, r7, r3
   11232:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   11234:	2308      	movs	r3, #8
   11236:	18fb      	adds	r3, r7, r3
   11238:	0018      	movs	r0, r3
   1123a:	4b2d      	ldr	r3, [pc, #180]	; (112f0 <RegionEU868NewChannelReq+0xe4>)
   1123c:	4798      	blx	r3
   1123e:	0003      	movs	r3, r0
   11240:	001a      	movs	r2, r3
   11242:	2301      	movs	r3, #1
   11244:	4053      	eors	r3, r2
   11246:	b2db      	uxtb	r3, r3
   11248:	2b00      	cmp	r3, #0
   1124a:	d04a      	beq.n	112e2 <RegionEU868NewChannelReq+0xd6>
        {
            status &= 0xFC;
   1124c:	2317      	movs	r3, #23
   1124e:	18fb      	adds	r3, r7, r3
   11250:	2217      	movs	r2, #23
   11252:	18ba      	adds	r2, r7, r2
   11254:	7812      	ldrb	r2, [r2, #0]
   11256:	2103      	movs	r1, #3
   11258:	438a      	bics	r2, r1
   1125a:	701a      	strb	r2, [r3, #0]
   1125c:	e041      	b.n	112e2 <RegionEU868NewChannelReq+0xd6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
   1125e:	687b      	ldr	r3, [r7, #4]
   11260:	681a      	ldr	r2, [r3, #0]
   11262:	230c      	movs	r3, #12
   11264:	18fb      	adds	r3, r7, r3
   11266:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
   11268:	687b      	ldr	r3, [r7, #4]
   1126a:	791b      	ldrb	r3, [r3, #4]
   1126c:	b25b      	sxtb	r3, r3
   1126e:	b2da      	uxtb	r2, r3
   11270:	230c      	movs	r3, #12
   11272:	18fb      	adds	r3, r7, r3
   11274:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
   11276:	230c      	movs	r3, #12
   11278:	18fb      	adds	r3, r7, r3
   1127a:	0018      	movs	r0, r3
   1127c:	4b1d      	ldr	r3, [pc, #116]	; (112f4 <RegionEU868NewChannelReq+0xe8>)
   1127e:	4798      	blx	r3
   11280:	0003      	movs	r3, r0
   11282:	2b04      	cmp	r3, #4
   11284:	d008      	beq.n	11298 <RegionEU868NewChannelReq+0x8c>
   11286:	dc02      	bgt.n	1128e <RegionEU868NewChannelReq+0x82>
   11288:	2b00      	cmp	r3, #0
   1128a:	d029      	beq.n	112e0 <RegionEU868NewChannelReq+0xd4>
   1128c:	e01f      	b.n	112ce <RegionEU868NewChannelReq+0xc2>
   1128e:	2b05      	cmp	r3, #5
   11290:	d00b      	beq.n	112aa <RegionEU868NewChannelReq+0x9e>
   11292:	2b06      	cmp	r3, #6
   11294:	d012      	beq.n	112bc <RegionEU868NewChannelReq+0xb0>
   11296:	e01a      	b.n	112ce <RegionEU868NewChannelReq+0xc2>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
   11298:	2317      	movs	r3, #23
   1129a:	18fb      	adds	r3, r7, r3
   1129c:	2217      	movs	r2, #23
   1129e:	18ba      	adds	r2, r7, r2
   112a0:	7812      	ldrb	r2, [r2, #0]
   112a2:	2101      	movs	r1, #1
   112a4:	438a      	bics	r2, r1
   112a6:	701a      	strb	r2, [r3, #0]
                break;
   112a8:	e01b      	b.n	112e2 <RegionEU868NewChannelReq+0xd6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
   112aa:	2317      	movs	r3, #23
   112ac:	18fb      	adds	r3, r7, r3
   112ae:	2217      	movs	r2, #23
   112b0:	18ba      	adds	r2, r7, r2
   112b2:	7812      	ldrb	r2, [r2, #0]
   112b4:	2102      	movs	r1, #2
   112b6:	438a      	bics	r2, r1
   112b8:	701a      	strb	r2, [r3, #0]
                break;
   112ba:	e012      	b.n	112e2 <RegionEU868NewChannelReq+0xd6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
   112bc:	2317      	movs	r3, #23
   112be:	18fb      	adds	r3, r7, r3
   112c0:	2217      	movs	r2, #23
   112c2:	18ba      	adds	r2, r7, r2
   112c4:	7812      	ldrb	r2, [r2, #0]
   112c6:	2103      	movs	r1, #3
   112c8:	438a      	bics	r2, r1
   112ca:	701a      	strb	r2, [r3, #0]
                break;
   112cc:	e009      	b.n	112e2 <RegionEU868NewChannelReq+0xd6>
            }
            default:
            {
                status &= 0xFC;
   112ce:	2317      	movs	r3, #23
   112d0:	18fb      	adds	r3, r7, r3
   112d2:	2217      	movs	r2, #23
   112d4:	18ba      	adds	r2, r7, r2
   112d6:	7812      	ldrb	r2, [r2, #0]
   112d8:	2103      	movs	r1, #3
   112da:	438a      	bics	r2, r1
   112dc:	701a      	strb	r2, [r3, #0]
                break;
   112de:	e000      	b.n	112e2 <RegionEU868NewChannelReq+0xd6>
                break;
   112e0:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
   112e2:	2317      	movs	r3, #23
   112e4:	18fb      	adds	r3, r7, r3
   112e6:	781b      	ldrb	r3, [r3, #0]
}
   112e8:	0018      	movs	r0, r3
   112ea:	46bd      	mov	sp, r7
   112ec:	b006      	add	sp, #24
   112ee:	bd80      	pop	{r7, pc}
   112f0:	00011751 	.word	0x00011751
   112f4:	000115b5 	.word	0x000115b5

000112f8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
   112f8:	b580      	push	{r7, lr}
   112fa:	b082      	sub	sp, #8
   112fc:	af00      	add	r7, sp, #0
   112fe:	6078      	str	r0, [r7, #4]
    return -1;
   11300:	2301      	movs	r3, #1
   11302:	425b      	negs	r3, r3
}
   11304:	0018      	movs	r0, r3
   11306:	46bd      	mov	sp, r7
   11308:	b002      	add	sp, #8
   1130a:	bd80      	pop	{r7, pc}

0001130c <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
   1130c:	b580      	push	{r7, lr}
   1130e:	b084      	sub	sp, #16
   11310:	af00      	add	r7, sp, #0
   11312:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
   11314:	230f      	movs	r3, #15
   11316:	18fb      	adds	r3, r7, r3
   11318:	2203      	movs	r2, #3
   1131a:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
   1131c:	230e      	movs	r3, #14
   1131e:	18fb      	adds	r3, r7, r3
   11320:	2200      	movs	r2, #0
   11322:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
   11324:	687b      	ldr	r3, [r7, #4]
   11326:	685b      	ldr	r3, [r3, #4]
   11328:	220e      	movs	r2, #14
   1132a:	18ba      	adds	r2, r7, r2
   1132c:	0011      	movs	r1, r2
   1132e:	0018      	movs	r0, r3
   11330:	4b1e      	ldr	r3, [pc, #120]	; (113ac <RegionEU868DlChannelReq+0xa0>)
   11332:	4798      	blx	r3
   11334:	0003      	movs	r3, r0
   11336:	001a      	movs	r2, r3
   11338:	2301      	movs	r3, #1
   1133a:	4053      	eors	r3, r2
   1133c:	b2db      	uxtb	r3, r3
   1133e:	2b00      	cmp	r3, #0
   11340:	d007      	beq.n	11352 <RegionEU868DlChannelReq+0x46>
    {
        status &= 0xFE;
   11342:	230f      	movs	r3, #15
   11344:	18fb      	adds	r3, r7, r3
   11346:	220f      	movs	r2, #15
   11348:	18ba      	adds	r2, r7, r2
   1134a:	7812      	ldrb	r2, [r2, #0]
   1134c:	2101      	movs	r1, #1
   1134e:	438a      	bics	r2, r1
   11350:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
   11352:	687b      	ldr	r3, [r7, #4]
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	0019      	movs	r1, r3
   11358:	4a15      	ldr	r2, [pc, #84]	; (113b0 <RegionEU868DlChannelReq+0xa4>)
   1135a:	000b      	movs	r3, r1
   1135c:	005b      	lsls	r3, r3, #1
   1135e:	185b      	adds	r3, r3, r1
   11360:	009b      	lsls	r3, r3, #2
   11362:	589b      	ldr	r3, [r3, r2]
   11364:	2b00      	cmp	r3, #0
   11366:	d107      	bne.n	11378 <RegionEU868DlChannelReq+0x6c>
    {
        status &= 0xFD;
   11368:	230f      	movs	r3, #15
   1136a:	18fb      	adds	r3, r7, r3
   1136c:	220f      	movs	r2, #15
   1136e:	18ba      	adds	r2, r7, r2
   11370:	7812      	ldrb	r2, [r2, #0]
   11372:	2102      	movs	r1, #2
   11374:	438a      	bics	r2, r1
   11376:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
   11378:	230f      	movs	r3, #15
   1137a:	18fb      	adds	r3, r7, r3
   1137c:	781b      	ldrb	r3, [r3, #0]
   1137e:	2b03      	cmp	r3, #3
   11380:	d10c      	bne.n	1139c <RegionEU868DlChannelReq+0x90>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
   11382:	687b      	ldr	r3, [r7, #4]
   11384:	781b      	ldrb	r3, [r3, #0]
   11386:	0018      	movs	r0, r3
   11388:	687b      	ldr	r3, [r7, #4]
   1138a:	685a      	ldr	r2, [r3, #4]
   1138c:	4908      	ldr	r1, [pc, #32]	; (113b0 <RegionEU868DlChannelReq+0xa4>)
   1138e:	0003      	movs	r3, r0
   11390:	005b      	lsls	r3, r3, #1
   11392:	181b      	adds	r3, r3, r0
   11394:	009b      	lsls	r3, r3, #2
   11396:	18cb      	adds	r3, r1, r3
   11398:	3304      	adds	r3, #4
   1139a:	601a      	str	r2, [r3, #0]
    }

    return status;
   1139c:	230f      	movs	r3, #15
   1139e:	18fb      	adds	r3, r7, r3
   113a0:	781b      	ldrb	r3, [r3, #0]
}
   113a2:	0018      	movs	r0, r3
   113a4:	46bd      	mov	sp, r7
   113a6:	b004      	add	sp, #16
   113a8:	bd80      	pop	{r7, pc}
   113aa:	46c0      	nop			; (mov r8, r8)
   113ac:	00010165 	.word	0x00010165
   113b0:	20001434 	.word	0x20001434

000113b4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
   113b4:	b580      	push	{r7, lr}
   113b6:	b082      	sub	sp, #8
   113b8:	af00      	add	r7, sp, #0
   113ba:	0002      	movs	r2, r0
   113bc:	1dfb      	adds	r3, r7, #7
   113be:	701a      	strb	r2, [r3, #0]
   113c0:	1dbb      	adds	r3, r7, #6
   113c2:	1c0a      	adds	r2, r1, #0
   113c4:	701a      	strb	r2, [r3, #0]
    return currentDr;
   113c6:	1dfb      	adds	r3, r7, #7
   113c8:	781b      	ldrb	r3, [r3, #0]
   113ca:	b25b      	sxtb	r3, r3
}
   113cc:	0018      	movs	r0, r3
   113ce:	46bd      	mov	sp, r7
   113d0:	b002      	add	sp, #8
   113d2:	bd80      	pop	{r7, pc}

000113d4 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
   113d4:	b580      	push	{r7, lr}
   113d6:	b088      	sub	sp, #32
   113d8:	af00      	add	r7, sp, #0
   113da:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
   113dc:	2308      	movs	r3, #8
   113de:	18fb      	adds	r3, r7, r3
   113e0:	4a17      	ldr	r2, [pc, #92]	; (11440 <RegionEU868CalcBackOff+0x6c>)
   113e2:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
   113e4:	2308      	movs	r3, #8
   113e6:	18fb      	adds	r3, r7, r3
   113e8:	4a16      	ldr	r2, [pc, #88]	; (11444 <RegionEU868CalcBackOff+0x70>)
   113ea:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
   113ec:	687b      	ldr	r3, [r7, #4]
   113ee:	785a      	ldrb	r2, [r3, #1]
   113f0:	2308      	movs	r3, #8
   113f2:	18fb      	adds	r3, r7, r3
   113f4:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
   113f6:	687b      	ldr	r3, [r7, #4]
   113f8:	781a      	ldrb	r2, [r3, #0]
   113fa:	2308      	movs	r3, #8
   113fc:	18fb      	adds	r3, r7, r3
   113fe:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
   11400:	687b      	ldr	r3, [r7, #4]
   11402:	789a      	ldrb	r2, [r3, #2]
   11404:	2308      	movs	r3, #8
   11406:	18fb      	adds	r3, r7, r3
   11408:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
   1140a:	687b      	ldr	r3, [r7, #4]
   1140c:	78da      	ldrb	r2, [r3, #3]
   1140e:	2308      	movs	r3, #8
   11410:	18fb      	adds	r3, r7, r3
   11412:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
   11414:	2308      	movs	r3, #8
   11416:	18fb      	adds	r3, r7, r3
   11418:	687a      	ldr	r2, [r7, #4]
   1141a:	330c      	adds	r3, #12
   1141c:	3204      	adds	r2, #4
   1141e:	ca03      	ldmia	r2!, {r0, r1}
   11420:	c303      	stmia	r3!, {r0, r1}
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
   11422:	687b      	ldr	r3, [r7, #4]
   11424:	68da      	ldr	r2, [r3, #12]
   11426:	2308      	movs	r3, #8
   11428:	18fb      	adds	r3, r7, r3
   1142a:	615a      	str	r2, [r3, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
   1142c:	2308      	movs	r3, #8
   1142e:	18fb      	adds	r3, r7, r3
   11430:	0018      	movs	r0, r3
   11432:	4b05      	ldr	r3, [pc, #20]	; (11448 <RegionEU868CalcBackOff+0x74>)
   11434:	4798      	blx	r3
}
   11436:	46c0      	nop			; (mov r8, r8)
   11438:	46bd      	mov	sp, r7
   1143a:	b008      	add	sp, #32
   1143c:	bd80      	pop	{r7, pc}
   1143e:	46c0      	nop			; (mov r8, r8)
   11440:	20001434 	.word	0x20001434
   11444:	200014f4 	.word	0x200014f4
   11448:	0000ff59 	.word	0x0000ff59

0001144c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   1144c:	b5b0      	push	{r4, r5, r7, lr}
   1144e:	b090      	sub	sp, #64	; 0x40
   11450:	af04      	add	r7, sp, #16
   11452:	60f8      	str	r0, [r7, #12]
   11454:	60b9      	str	r1, [r7, #8]
   11456:	607a      	str	r2, [r7, #4]
   11458:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
   1145a:	232f      	movs	r3, #47	; 0x2f
   1145c:	18fb      	adds	r3, r7, r3
   1145e:	2200      	movs	r2, #0
   11460:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
   11462:	2327      	movs	r3, #39	; 0x27
   11464:	18fb      	adds	r3, r7, r3
   11466:	2200      	movs	r2, #0
   11468:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
   1146a:	2314      	movs	r3, #20
   1146c:	18fb      	adds	r3, r7, r3
   1146e:	0018      	movs	r0, r3
   11470:	2310      	movs	r3, #16
   11472:	001a      	movs	r2, r3
   11474:	2100      	movs	r1, #0
   11476:	4b46      	ldr	r3, [pc, #280]	; (11590 <RegionEU868NextChannel+0x144>)
   11478:	4798      	blx	r3
    TimerTime_t nextTxDelay = 0;
   1147a:	2300      	movs	r3, #0
   1147c:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
   1147e:	4b45      	ldr	r3, [pc, #276]	; (11594 <RegionEU868NextChannel+0x148>)
   11480:	2201      	movs	r2, #1
   11482:	2100      	movs	r1, #0
   11484:	0018      	movs	r0, r3
   11486:	4b44      	ldr	r3, [pc, #272]	; (11598 <RegionEU868NextChannel+0x14c>)
   11488:	4798      	blx	r3
   1148a:	1e03      	subs	r3, r0, #0
   1148c:	d10a      	bne.n	114a4 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   1148e:	4a43      	ldr	r2, [pc, #268]	; (1159c <RegionEU868NextChannel+0x150>)
   11490:	2388      	movs	r3, #136	; 0x88
   11492:	005b      	lsls	r3, r3, #1
   11494:	5ad3      	ldrh	r3, [r2, r3]
   11496:	2207      	movs	r2, #7
   11498:	4313      	orrs	r3, r2
   1149a:	b299      	uxth	r1, r3
   1149c:	4a3f      	ldr	r2, [pc, #252]	; (1159c <RegionEU868NextChannel+0x150>)
   1149e:	2388      	movs	r3, #136	; 0x88
   114a0:	005b      	lsls	r3, r3, #1
   114a2:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
   114a4:	68fb      	ldr	r3, [r7, #12]
   114a6:	681c      	ldr	r4, [r3, #0]
   114a8:	68fb      	ldr	r3, [r7, #12]
   114aa:	685b      	ldr	r3, [r3, #4]
   114ac:	0018      	movs	r0, r3
   114ae:	4b3c      	ldr	r3, [pc, #240]	; (115a0 <RegionEU868NextChannel+0x154>)
   114b0:	4798      	blx	r3
   114b2:	0003      	movs	r3, r0
   114b4:	429c      	cmp	r4, r3
   114b6:	d824      	bhi.n	11502 <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
   114b8:	683b      	ldr	r3, [r7, #0]
   114ba:	2200      	movs	r2, #0
   114bc:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
   114be:	68fb      	ldr	r3, [r7, #12]
   114c0:	7a58      	ldrb	r0, [r3, #9]
   114c2:	68fb      	ldr	r3, [r7, #12]
   114c4:	7a99      	ldrb	r1, [r3, #10]
   114c6:	4a37      	ldr	r2, [pc, #220]	; (115a4 <RegionEU868NextChannel+0x158>)
   114c8:	2305      	movs	r3, #5
   114ca:	4c37      	ldr	r4, [pc, #220]	; (115a8 <RegionEU868NextChannel+0x15c>)
   114cc:	47a0      	blx	r4
   114ce:	0003      	movs	r3, r0
   114d0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
   114d2:	68fb      	ldr	r3, [r7, #12]
   114d4:	7a58      	ldrb	r0, [r3, #9]
   114d6:	68fb      	ldr	r3, [r7, #12]
   114d8:	7a1b      	ldrb	r3, [r3, #8]
   114da:	b25b      	sxtb	r3, r3
   114dc:	b2d9      	uxtb	r1, r3
   114de:	232f      	movs	r3, #47	; 0x2f
   114e0:	18fc      	adds	r4, r7, r3
   114e2:	4d2e      	ldr	r5, [pc, #184]	; (1159c <RegionEU868NextChannel+0x150>)
   114e4:	4a2b      	ldr	r2, [pc, #172]	; (11594 <RegionEU868NextChannel+0x148>)
   114e6:	2327      	movs	r3, #39	; 0x27
   114e8:	18fb      	adds	r3, r7, r3
   114ea:	9302      	str	r3, [sp, #8]
   114ec:	2314      	movs	r3, #20
   114ee:	18fb      	adds	r3, r7, r3
   114f0:	9301      	str	r3, [sp, #4]
   114f2:	4b2c      	ldr	r3, [pc, #176]	; (115a4 <RegionEU868NextChannel+0x158>)
   114f4:	9300      	str	r3, [sp, #0]
   114f6:	002b      	movs	r3, r5
   114f8:	4d2c      	ldr	r5, [pc, #176]	; (115ac <RegionEU868NextChannel+0x160>)
   114fa:	47a8      	blx	r5
   114fc:	0003      	movs	r3, r0
   114fe:	7023      	strb	r3, [r4, #0]
   11500:	e011      	b.n	11526 <RegionEU868NextChannel+0xda>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
   11502:	2327      	movs	r3, #39	; 0x27
   11504:	18fb      	adds	r3, r7, r3
   11506:	781b      	ldrb	r3, [r3, #0]
   11508:	3301      	adds	r3, #1
   1150a:	b2da      	uxtb	r2, r3
   1150c:	2327      	movs	r3, #39	; 0x27
   1150e:	18fb      	adds	r3, r7, r3
   11510:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
   11512:	68fb      	ldr	r3, [r7, #12]
   11514:	681c      	ldr	r4, [r3, #0]
   11516:	68fb      	ldr	r3, [r7, #12]
   11518:	685b      	ldr	r3, [r3, #4]
   1151a:	0018      	movs	r0, r3
   1151c:	4b20      	ldr	r3, [pc, #128]	; (115a0 <RegionEU868NextChannel+0x154>)
   1151e:	4798      	blx	r3
   11520:	0003      	movs	r3, r0
   11522:	1ae3      	subs	r3, r4, r3
   11524:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
   11526:	232f      	movs	r3, #47	; 0x2f
   11528:	18fb      	adds	r3, r7, r3
   1152a:	781b      	ldrb	r3, [r3, #0]
   1152c:	2b00      	cmp	r3, #0
   1152e:	d012      	beq.n	11556 <RegionEU868NextChannel+0x10a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
   11530:	232f      	movs	r3, #47	; 0x2f
   11532:	18fb      	adds	r3, r7, r3
   11534:	781b      	ldrb	r3, [r3, #0]
   11536:	3b01      	subs	r3, #1
   11538:	0019      	movs	r1, r3
   1153a:	2000      	movs	r0, #0
   1153c:	4b1c      	ldr	r3, [pc, #112]	; (115b0 <RegionEU868NextChannel+0x164>)
   1153e:	4798      	blx	r3
   11540:	0002      	movs	r2, r0
   11542:	2314      	movs	r3, #20
   11544:	18fb      	adds	r3, r7, r3
   11546:	5c9a      	ldrb	r2, [r3, r2]
   11548:	68bb      	ldr	r3, [r7, #8]
   1154a:	701a      	strb	r2, [r3, #0]

        *time = 0;
   1154c:	687b      	ldr	r3, [r7, #4]
   1154e:	2200      	movs	r2, #0
   11550:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
   11552:	2300      	movs	r3, #0
   11554:	e018      	b.n	11588 <RegionEU868NextChannel+0x13c>
    }
    else
    {
        if( delayTx > 0 )
   11556:	2327      	movs	r3, #39	; 0x27
   11558:	18fb      	adds	r3, r7, r3
   1155a:	781b      	ldrb	r3, [r3, #0]
   1155c:	2b00      	cmp	r3, #0
   1155e:	d004      	beq.n	1156a <RegionEU868NextChannel+0x11e>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
   11560:	687b      	ldr	r3, [r7, #4]
   11562:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11564:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
   11566:	230b      	movs	r3, #11
   11568:	e00e      	b.n	11588 <RegionEU868NextChannel+0x13c>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   1156a:	4a0c      	ldr	r2, [pc, #48]	; (1159c <RegionEU868NextChannel+0x150>)
   1156c:	2388      	movs	r3, #136	; 0x88
   1156e:	005b      	lsls	r3, r3, #1
   11570:	5ad3      	ldrh	r3, [r2, r3]
   11572:	2207      	movs	r2, #7
   11574:	4313      	orrs	r3, r2
   11576:	b299      	uxth	r1, r3
   11578:	4a08      	ldr	r2, [pc, #32]	; (1159c <RegionEU868NextChannel+0x150>)
   1157a:	2388      	movs	r3, #136	; 0x88
   1157c:	005b      	lsls	r3, r3, #1
   1157e:	52d1      	strh	r1, [r2, r3]
        *time = 0;
   11580:	687b      	ldr	r3, [r7, #4]
   11582:	2200      	movs	r2, #0
   11584:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
   11586:	230c      	movs	r3, #12
    }
}
   11588:	0018      	movs	r0, r3
   1158a:	46bd      	mov	sp, r7
   1158c:	b00c      	add	sp, #48	; 0x30
   1158e:	bdb0      	pop	{r4, r5, r7, pc}
   11590:	0001a0e1 	.word	0x0001a0e1
   11594:	20001544 	.word	0x20001544
   11598:	0000f771 	.word	0x0000f771
   1159c:	20001434 	.word	0x20001434
   115a0:	00016409 	.word	0x00016409
   115a4:	200014f4 	.word	0x200014f4
   115a8:	0000f899 	.word	0x0000f899
   115ac:	00010255 	.word	0x00010255
   115b0:	00002921 	.word	0x00002921

000115b4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
   115b4:	b580      	push	{r7, lr}
   115b6:	b084      	sub	sp, #16
   115b8:	af00      	add	r7, sp, #0
   115ba:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
   115bc:	230c      	movs	r3, #12
   115be:	18fb      	adds	r3, r7, r3
   115c0:	2200      	movs	r2, #0
   115c2:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
   115c4:	230f      	movs	r3, #15
   115c6:	18fb      	adds	r3, r7, r3
   115c8:	2200      	movs	r2, #0
   115ca:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
   115cc:	230e      	movs	r3, #14
   115ce:	18fb      	adds	r3, r7, r3
   115d0:	2200      	movs	r2, #0
   115d2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
   115d4:	230d      	movs	r3, #13
   115d6:	18fb      	adds	r3, r7, r3
   115d8:	687a      	ldr	r2, [r7, #4]
   115da:	7912      	ldrb	r2, [r2, #4]
   115dc:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   115de:	230d      	movs	r3, #13
   115e0:	18fb      	adds	r3, r7, r3
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	2b02      	cmp	r3, #2
   115e6:	d801      	bhi.n	115ec <RegionEU868ChannelAdd+0x38>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   115e8:	2306      	movs	r3, #6
   115ea:	e0a4      	b.n	11736 <RegionEU868ChannelAdd+0x182>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
   115ec:	230d      	movs	r3, #13
   115ee:	18fb      	adds	r3, r7, r3
   115f0:	781b      	ldrb	r3, [r3, #0]
   115f2:	2b0f      	cmp	r3, #15
   115f4:	d901      	bls.n	115fa <RegionEU868ChannelAdd+0x46>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
   115f6:	2303      	movs	r3, #3
   115f8:	e09d      	b.n	11736 <RegionEU868ChannelAdd+0x182>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   115fa:	687b      	ldr	r3, [r7, #4]
   115fc:	681b      	ldr	r3, [r3, #0]
   115fe:	7a1b      	ldrb	r3, [r3, #8]
   11600:	011b      	lsls	r3, r3, #4
   11602:	b25b      	sxtb	r3, r3
   11604:	111b      	asrs	r3, r3, #4
   11606:	b25b      	sxtb	r3, r3
   11608:	2207      	movs	r2, #7
   1160a:	2100      	movs	r1, #0
   1160c:	0018      	movs	r0, r3
   1160e:	4b4c      	ldr	r3, [pc, #304]	; (11740 <RegionEU868ChannelAdd+0x18c>)
   11610:	4798      	blx	r3
   11612:	1e03      	subs	r3, r0, #0
   11614:	d103      	bne.n	1161e <RegionEU868ChannelAdd+0x6a>
    {
        drInvalid = true;
   11616:	230f      	movs	r3, #15
   11618:	18fb      	adds	r3, r7, r3
   1161a:	2201      	movs	r2, #1
   1161c:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   1161e:	687b      	ldr	r3, [r7, #4]
   11620:	681b      	ldr	r3, [r3, #0]
   11622:	7a1b      	ldrb	r3, [r3, #8]
   11624:	b25b      	sxtb	r3, r3
   11626:	111b      	asrs	r3, r3, #4
   11628:	b25b      	sxtb	r3, r3
   1162a:	2207      	movs	r2, #7
   1162c:	2100      	movs	r1, #0
   1162e:	0018      	movs	r0, r3
   11630:	4b43      	ldr	r3, [pc, #268]	; (11740 <RegionEU868ChannelAdd+0x18c>)
   11632:	4798      	blx	r3
   11634:	1e03      	subs	r3, r0, #0
   11636:	d103      	bne.n	11640 <RegionEU868ChannelAdd+0x8c>
    {
        drInvalid = true;
   11638:	230f      	movs	r3, #15
   1163a:	18fb      	adds	r3, r7, r3
   1163c:	2201      	movs	r2, #1
   1163e:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   11640:	687b      	ldr	r3, [r7, #4]
   11642:	681b      	ldr	r3, [r3, #0]
   11644:	7a1b      	ldrb	r3, [r3, #8]
   11646:	011b      	lsls	r3, r3, #4
   11648:	b25b      	sxtb	r3, r3
   1164a:	111b      	asrs	r3, r3, #4
   1164c:	b25a      	sxtb	r2, r3
   1164e:	687b      	ldr	r3, [r7, #4]
   11650:	681b      	ldr	r3, [r3, #0]
   11652:	7a1b      	ldrb	r3, [r3, #8]
   11654:	b25b      	sxtb	r3, r3
   11656:	111b      	asrs	r3, r3, #4
   11658:	b25b      	sxtb	r3, r3
   1165a:	429a      	cmp	r2, r3
   1165c:	dd03      	ble.n	11666 <RegionEU868ChannelAdd+0xb2>
    {
        drInvalid = true;
   1165e:	230f      	movs	r3, #15
   11660:	18fb      	adds	r3, r7, r3
   11662:	2201      	movs	r2, #1
   11664:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
   11666:	230e      	movs	r3, #14
   11668:	18fb      	adds	r3, r7, r3
   1166a:	781b      	ldrb	r3, [r3, #0]
   1166c:	2201      	movs	r2, #1
   1166e:	4053      	eors	r3, r2
   11670:	b2db      	uxtb	r3, r3
   11672:	2b00      	cmp	r3, #0
   11674:	d013      	beq.n	1169e <RegionEU868ChannelAdd+0xea>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   11676:	687b      	ldr	r3, [r7, #4]
   11678:	681b      	ldr	r3, [r3, #0]
   1167a:	681b      	ldr	r3, [r3, #0]
   1167c:	220c      	movs	r2, #12
   1167e:	18ba      	adds	r2, r7, r2
   11680:	0011      	movs	r1, r2
   11682:	0018      	movs	r0, r3
   11684:	4b2f      	ldr	r3, [pc, #188]	; (11744 <RegionEU868ChannelAdd+0x190>)
   11686:	4798      	blx	r3
   11688:	0003      	movs	r3, r0
   1168a:	001a      	movs	r2, r3
   1168c:	2301      	movs	r3, #1
   1168e:	4053      	eors	r3, r2
   11690:	b2db      	uxtb	r3, r3
   11692:	2b00      	cmp	r3, #0
   11694:	d003      	beq.n	1169e <RegionEU868ChannelAdd+0xea>
        {
            freqInvalid = true;
   11696:	230e      	movs	r3, #14
   11698:	18fb      	adds	r3, r7, r3
   1169a:	2201      	movs	r2, #1
   1169c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   1169e:	230f      	movs	r3, #15
   116a0:	18fb      	adds	r3, r7, r3
   116a2:	781b      	ldrb	r3, [r3, #0]
   116a4:	2b00      	cmp	r3, #0
   116a6:	d006      	beq.n	116b6 <RegionEU868ChannelAdd+0x102>
   116a8:	230e      	movs	r3, #14
   116aa:	18fb      	adds	r3, r7, r3
   116ac:	781b      	ldrb	r3, [r3, #0]
   116ae:	2b00      	cmp	r3, #0
   116b0:	d001      	beq.n	116b6 <RegionEU868ChannelAdd+0x102>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   116b2:	2306      	movs	r3, #6
   116b4:	e03f      	b.n	11736 <RegionEU868ChannelAdd+0x182>
    }
    if( drInvalid == true )
   116b6:	230f      	movs	r3, #15
   116b8:	18fb      	adds	r3, r7, r3
   116ba:	781b      	ldrb	r3, [r3, #0]
   116bc:	2b00      	cmp	r3, #0
   116be:	d001      	beq.n	116c4 <RegionEU868ChannelAdd+0x110>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
   116c0:	2305      	movs	r3, #5
   116c2:	e038      	b.n	11736 <RegionEU868ChannelAdd+0x182>
    }
    if( freqInvalid == true )
   116c4:	230e      	movs	r3, #14
   116c6:	18fb      	adds	r3, r7, r3
   116c8:	781b      	ldrb	r3, [r3, #0]
   116ca:	2b00      	cmp	r3, #0
   116cc:	d001      	beq.n	116d2 <RegionEU868ChannelAdd+0x11e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
   116ce:	2304      	movs	r3, #4
   116d0:	e031      	b.n	11736 <RegionEU868ChannelAdd+0x182>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
   116d2:	230d      	movs	r3, #13
   116d4:	18fb      	adds	r3, r7, r3
   116d6:	781a      	ldrb	r2, [r3, #0]
   116d8:	0013      	movs	r3, r2
   116da:	005b      	lsls	r3, r3, #1
   116dc:	189b      	adds	r3, r3, r2
   116de:	009b      	lsls	r3, r3, #2
   116e0:	4a19      	ldr	r2, [pc, #100]	; (11748 <RegionEU868ChannelAdd+0x194>)
   116e2:	1898      	adds	r0, r3, r2
   116e4:	687b      	ldr	r3, [r7, #4]
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	220c      	movs	r2, #12
   116ea:	0019      	movs	r1, r3
   116ec:	4b17      	ldr	r3, [pc, #92]	; (1174c <RegionEU868ChannelAdd+0x198>)
   116ee:	4798      	blx	r3
    NvmCtx.Channels[id].Band = band;
   116f0:	230d      	movs	r3, #13
   116f2:	18fb      	adds	r3, r7, r3
   116f4:	781a      	ldrb	r2, [r3, #0]
   116f6:	230c      	movs	r3, #12
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	7818      	ldrb	r0, [r3, #0]
   116fc:	4912      	ldr	r1, [pc, #72]	; (11748 <RegionEU868ChannelAdd+0x194>)
   116fe:	0013      	movs	r3, r2
   11700:	005b      	lsls	r3, r3, #1
   11702:	189b      	adds	r3, r3, r2
   11704:	009b      	lsls	r3, r3, #2
   11706:	18cb      	adds	r3, r1, r3
   11708:	3309      	adds	r3, #9
   1170a:	1c02      	adds	r2, r0, #0
   1170c:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
   1170e:	4a0e      	ldr	r2, [pc, #56]	; (11748 <RegionEU868ChannelAdd+0x194>)
   11710:	2388      	movs	r3, #136	; 0x88
   11712:	005b      	lsls	r3, r3, #1
   11714:	5ad3      	ldrh	r3, [r2, r3]
   11716:	b21a      	sxth	r2, r3
   11718:	230d      	movs	r3, #13
   1171a:	18fb      	adds	r3, r7, r3
   1171c:	781b      	ldrb	r3, [r3, #0]
   1171e:	2101      	movs	r1, #1
   11720:	4099      	lsls	r1, r3
   11722:	000b      	movs	r3, r1
   11724:	b21b      	sxth	r3, r3
   11726:	4313      	orrs	r3, r2
   11728:	b21b      	sxth	r3, r3
   1172a:	b299      	uxth	r1, r3
   1172c:	4a06      	ldr	r2, [pc, #24]	; (11748 <RegionEU868ChannelAdd+0x194>)
   1172e:	2388      	movs	r3, #136	; 0x88
   11730:	005b      	lsls	r3, r3, #1
   11732:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
   11734:	2300      	movs	r3, #0
}
   11736:	0018      	movs	r0, r3
   11738:	46bd      	mov	sp, r7
   1173a:	b004      	add	sp, #16
   1173c:	bd80      	pop	{r7, pc}
   1173e:	46c0      	nop			; (mov r8, r8)
   11740:	0000f69d 	.word	0x0000f69d
   11744:	00010165 	.word	0x00010165
   11748:	20001434 	.word	0x20001434
   1174c:	00002955 	.word	0x00002955

00011750 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
   11750:	b580      	push	{r7, lr}
   11752:	b084      	sub	sp, #16
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
   11758:	230f      	movs	r3, #15
   1175a:	18fb      	adds	r3, r7, r3
   1175c:	687a      	ldr	r2, [r7, #4]
   1175e:	7812      	ldrb	r2, [r2, #0]
   11760:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   11762:	230f      	movs	r3, #15
   11764:	18fb      	adds	r3, r7, r3
   11766:	781b      	ldrb	r3, [r3, #0]
   11768:	2b02      	cmp	r3, #2
   1176a:	d801      	bhi.n	11770 <RegionEU868ChannelsRemove+0x20>
    {
        return false;
   1176c:	2300      	movs	r3, #0
   1176e:	e016      	b.n	1179e <RegionEU868ChannelsRemove+0x4e>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
   11770:	230f      	movs	r3, #15
   11772:	18fb      	adds	r3, r7, r3
   11774:	781a      	ldrb	r2, [r3, #0]
   11776:	490c      	ldr	r1, [pc, #48]	; (117a8 <RegionEU868ChannelsRemove+0x58>)
   11778:	0013      	movs	r3, r2
   1177a:	005b      	lsls	r3, r3, #1
   1177c:	189b      	adds	r3, r3, r2
   1177e:	009b      	lsls	r3, r3, #2
   11780:	18cb      	adds	r3, r1, r3
   11782:	220c      	movs	r2, #12
   11784:	2100      	movs	r1, #0
   11786:	0018      	movs	r0, r3
   11788:	4b08      	ldr	r3, [pc, #32]	; (117ac <RegionEU868ChannelsRemove+0x5c>)
   1178a:	4798      	blx	r3

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   1178c:	230f      	movs	r3, #15
   1178e:	18fb      	adds	r3, r7, r3
   11790:	7819      	ldrb	r1, [r3, #0]
   11792:	4b07      	ldr	r3, [pc, #28]	; (117b0 <RegionEU868ChannelsRemove+0x60>)
   11794:	2210      	movs	r2, #16
   11796:	0018      	movs	r0, r3
   11798:	4b06      	ldr	r3, [pc, #24]	; (117b4 <RegionEU868ChannelsRemove+0x64>)
   1179a:	4798      	blx	r3
   1179c:	0003      	movs	r3, r0
}
   1179e:	0018      	movs	r0, r3
   117a0:	46bd      	mov	sp, r7
   117a2:	b004      	add	sp, #16
   117a4:	bd80      	pop	{r7, pc}
   117a6:	46c0      	nop			; (mov r8, r8)
   117a8:	20001434 	.word	0x20001434
   117ac:	0001a0e1 	.word	0x0001a0e1
   117b0:	20001544 	.word	0x20001544
   117b4:	0000f6e9 	.word	0x0000f6e9

000117b8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
   117b8:	b5b0      	push	{r4, r5, r7, lr}
   117ba:	b084      	sub	sp, #16
   117bc:	af00      	add	r7, sp, #0
   117be:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
   117c0:	687b      	ldr	r3, [r7, #4]
   117c2:	2002      	movs	r0, #2
   117c4:	5618      	ldrsb	r0, [r3, r0]
   117c6:	687b      	ldr	r3, [r7, #4]
   117c8:	781b      	ldrb	r3, [r3, #0]
   117ca:	0019      	movs	r1, r3
   117cc:	4a22      	ldr	r2, [pc, #136]	; (11858 <RegionEU868SetContinuousWave+0xa0>)
   117ce:	000b      	movs	r3, r1
   117d0:	005b      	lsls	r3, r3, #1
   117d2:	185b      	adds	r3, r3, r1
   117d4:	009b      	lsls	r3, r3, #2
   117d6:	18d3      	adds	r3, r2, r3
   117d8:	3309      	adds	r3, #9
   117da:	781b      	ldrb	r3, [r3, #0]
   117dc:	4a1e      	ldr	r2, [pc, #120]	; (11858 <RegionEU868SetContinuousWave+0xa0>)
   117de:	330c      	adds	r3, #12
   117e0:	011b      	lsls	r3, r3, #4
   117e2:	18d3      	adds	r3, r2, r3
   117e4:	3302      	adds	r3, #2
   117e6:	2100      	movs	r1, #0
   117e8:	5659      	ldrsb	r1, [r3, r1]
   117ea:	687b      	ldr	r3, [r7, #4]
   117ec:	2201      	movs	r2, #1
   117ee:	569a      	ldrsb	r2, [r3, r2]
   117f0:	230f      	movs	r3, #15
   117f2:	18fc      	adds	r4, r7, r3
   117f4:	4b19      	ldr	r3, [pc, #100]	; (1185c <RegionEU868SetContinuousWave+0xa4>)
   117f6:	4d1a      	ldr	r5, [pc, #104]	; (11860 <RegionEU868SetContinuousWave+0xa8>)
   117f8:	47a8      	blx	r5
   117fa:	0003      	movs	r3, r0
   117fc:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
   117fe:	230e      	movs	r3, #14
   11800:	18fb      	adds	r3, r7, r3
   11802:	2200      	movs	r2, #0
   11804:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
   11806:	687b      	ldr	r3, [r7, #4]
   11808:	781b      	ldrb	r3, [r3, #0]
   1180a:	0019      	movs	r1, r3
   1180c:	4a12      	ldr	r2, [pc, #72]	; (11858 <RegionEU868SetContinuousWave+0xa0>)
   1180e:	000b      	movs	r3, r1
   11810:	005b      	lsls	r3, r3, #1
   11812:	185b      	adds	r3, r3, r1
   11814:	009b      	lsls	r3, r3, #2
   11816:	589b      	ldr	r3, [r3, r2]
   11818:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
   1181a:	687b      	ldr	r3, [r7, #4]
   1181c:	6859      	ldr	r1, [r3, #4]
   1181e:	687b      	ldr	r3, [r7, #4]
   11820:	689a      	ldr	r2, [r3, #8]
   11822:	230e      	movs	r3, #14
   11824:	18fc      	adds	r4, r7, r3
   11826:	230f      	movs	r3, #15
   11828:	18fb      	adds	r3, r7, r3
   1182a:	781b      	ldrb	r3, [r3, #0]
   1182c:	b25b      	sxtb	r3, r3
   1182e:	0018      	movs	r0, r3
   11830:	4b0c      	ldr	r3, [pc, #48]	; (11864 <RegionEU868SetContinuousWave+0xac>)
   11832:	4798      	blx	r3
   11834:	0003      	movs	r3, r0
   11836:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
   11838:	4b0b      	ldr	r3, [pc, #44]	; (11868 <RegionEU868SetContinuousWave+0xb0>)
   1183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1183c:	687a      	ldr	r2, [r7, #4]
   1183e:	8994      	ldrh	r4, [r2, #12]
   11840:	220e      	movs	r2, #14
   11842:	18ba      	adds	r2, r7, r2
   11844:	2100      	movs	r1, #0
   11846:	5651      	ldrsb	r1, [r2, r1]
   11848:	68b8      	ldr	r0, [r7, #8]
   1184a:	0022      	movs	r2, r4
   1184c:	4798      	blx	r3
}
   1184e:	46c0      	nop			; (mov r8, r8)
   11850:	46bd      	mov	sp, r7
   11852:	b004      	add	sp, #16
   11854:	bdb0      	pop	{r4, r5, r7, pc}
   11856:	46c0      	nop			; (mov r8, r8)
   11858:	20001434 	.word	0x20001434
   1185c:	20001544 	.word	0x20001544
   11860:	00010111 	.word	0x00010111
   11864:	0000fec9 	.word	0x0000fec9
   11868:	0001efe8 	.word	0x0001efe8

0001186c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
   1186c:	b590      	push	{r4, r7, lr}
   1186e:	b085      	sub	sp, #20
   11870:	af00      	add	r7, sp, #0
   11872:	0004      	movs	r4, r0
   11874:	0008      	movs	r0, r1
   11876:	0011      	movs	r1, r2
   11878:	1dfb      	adds	r3, r7, #7
   1187a:	1c22      	adds	r2, r4, #0
   1187c:	701a      	strb	r2, [r3, #0]
   1187e:	1dbb      	adds	r3, r7, #6
   11880:	1c02      	adds	r2, r0, #0
   11882:	701a      	strb	r2, [r3, #0]
   11884:	1d7b      	adds	r3, r7, #5
   11886:	1c0a      	adds	r2, r1, #0
   11888:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
   1188a:	1dbb      	adds	r3, r7, #6
   1188c:	781a      	ldrb	r2, [r3, #0]
   1188e:	1d7b      	adds	r3, r7, #5
   11890:	781b      	ldrb	r3, [r3, #0]
   11892:	1ad3      	subs	r3, r2, r3
   11894:	b2da      	uxtb	r2, r3
   11896:	230f      	movs	r3, #15
   11898:	18fb      	adds	r3, r7, r3
   1189a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
   1189c:	230f      	movs	r3, #15
   1189e:	18fb      	adds	r3, r7, r3
   118a0:	781b      	ldrb	r3, [r3, #0]
   118a2:	2b7f      	cmp	r3, #127	; 0x7f
   118a4:	d903      	bls.n	118ae <RegionEU868ApplyDrOffset+0x42>
    {
        datarate = DR_0;
   118a6:	230f      	movs	r3, #15
   118a8:	18fb      	adds	r3, r7, r3
   118aa:	2200      	movs	r2, #0
   118ac:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
   118ae:	230f      	movs	r3, #15
   118b0:	18fb      	adds	r3, r7, r3
   118b2:	781b      	ldrb	r3, [r3, #0]
}
   118b4:	0018      	movs	r0, r3
   118b6:	46bd      	mov	sp, r7
   118b8:	b005      	add	sp, #20
   118ba:	bd90      	pop	{r4, r7, pc}

000118bc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
   118bc:	b580      	push	{r7, lr}
   118be:	b082      	sub	sp, #8
   118c0:	af00      	add	r7, sp, #0
   118c2:	6078      	str	r0, [r7, #4]
   118c4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
   118c6:	683b      	ldr	r3, [r7, #0]
   118c8:	781a      	ldrb	r2, [r3, #0]
   118ca:	687b      	ldr	r3, [r7, #4]
   118cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
   118ce:	687b      	ldr	r3, [r7, #4]
   118d0:	3301      	adds	r3, #1
   118d2:	683a      	ldr	r2, [r7, #0]
   118d4:	7852      	ldrb	r2, [r2, #1]
   118d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
   118d8:	687b      	ldr	r3, [r7, #4]
   118da:	3302      	adds	r3, #2
   118dc:	683a      	ldr	r2, [r7, #0]
   118de:	7892      	ldrb	r2, [r2, #2]
   118e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
   118e2:	687b      	ldr	r3, [r7, #4]
   118e4:	3303      	adds	r3, #3
   118e6:	683a      	ldr	r2, [r7, #0]
   118e8:	78d2      	ldrb	r2, [r2, #3]
   118ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
   118ec:	687b      	ldr	r3, [r7, #4]
   118ee:	3304      	adds	r3, #4
   118f0:	683a      	ldr	r2, [r7, #0]
   118f2:	7912      	ldrb	r2, [r2, #4]
   118f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
   118f6:	687b      	ldr	r3, [r7, #4]
   118f8:	3305      	adds	r3, #5
   118fa:	683a      	ldr	r2, [r7, #0]
   118fc:	7952      	ldrb	r2, [r2, #5]
   118fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
   11900:	687b      	ldr	r3, [r7, #4]
   11902:	3306      	adds	r3, #6
   11904:	683a      	ldr	r2, [r7, #0]
   11906:	7992      	ldrb	r2, [r2, #6]
   11908:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
   1190a:	687b      	ldr	r3, [r7, #4]
   1190c:	3307      	adds	r3, #7
   1190e:	683a      	ldr	r2, [r7, #0]
   11910:	79d2      	ldrb	r2, [r2, #7]
   11912:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
   11914:	687b      	ldr	r3, [r7, #4]
   11916:	3308      	adds	r3, #8
   11918:	683a      	ldr	r2, [r7, #0]
   1191a:	7a12      	ldrb	r2, [r2, #8]
   1191c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
   1191e:	687b      	ldr	r3, [r7, #4]
   11920:	3309      	adds	r3, #9
   11922:	683a      	ldr	r2, [r7, #0]
   11924:	7a52      	ldrb	r2, [r2, #9]
   11926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
   11928:	687b      	ldr	r3, [r7, #4]
   1192a:	330a      	adds	r3, #10
   1192c:	683a      	ldr	r2, [r7, #0]
   1192e:	7a92      	ldrb	r2, [r2, #10]
   11930:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
   11932:	687b      	ldr	r3, [r7, #4]
   11934:	330b      	adds	r3, #11
   11936:	683a      	ldr	r2, [r7, #0]
   11938:	7ad2      	ldrb	r2, [r2, #11]
   1193a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
   1193c:	687b      	ldr	r3, [r7, #4]
   1193e:	330c      	adds	r3, #12
   11940:	683a      	ldr	r2, [r7, #0]
   11942:	7b12      	ldrb	r2, [r2, #12]
   11944:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
   11946:	687b      	ldr	r3, [r7, #4]
   11948:	330d      	adds	r3, #13
   1194a:	683a      	ldr	r2, [r7, #0]
   1194c:	7b52      	ldrb	r2, [r2, #13]
   1194e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
   11950:	687b      	ldr	r3, [r7, #4]
   11952:	330e      	adds	r3, #14
   11954:	683a      	ldr	r2, [r7, #0]
   11956:	7b92      	ldrb	r2, [r2, #14]
   11958:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
   1195a:	687b      	ldr	r3, [r7, #4]
   1195c:	330f      	adds	r3, #15
   1195e:	683a      	ldr	r2, [r7, #0]
   11960:	7bd2      	ldrb	r2, [r2, #15]
   11962:	701a      	strb	r2, [r3, #0]
#endif
}
   11964:	46c0      	nop			; (mov r8, r8)
   11966:	46bd      	mov	sp, r7
   11968:	b002      	add	sp, #8
   1196a:	bd80      	pop	{r7, pc}

0001196c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
   1196c:	b580      	push	{r7, lr}
   1196e:	b084      	sub	sp, #16
   11970:	af00      	add	r7, sp, #0
   11972:	60f8      	str	r0, [r7, #12]
   11974:	60b9      	str	r1, [r7, #8]
   11976:	1dfb      	adds	r3, r7, #7
   11978:	701a      	strb	r2, [r3, #0]
    while( nn-- )
   1197a:	e007      	b.n	1198c <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
   1197c:	68fb      	ldr	r3, [r7, #12]
   1197e:	1c5a      	adds	r2, r3, #1
   11980:	60fa      	str	r2, [r7, #12]
   11982:	68ba      	ldr	r2, [r7, #8]
   11984:	1c51      	adds	r1, r2, #1
   11986:	60b9      	str	r1, [r7, #8]
   11988:	7812      	ldrb	r2, [r2, #0]
   1198a:	701a      	strb	r2, [r3, #0]
    while( nn-- )
   1198c:	1dfb      	adds	r3, r7, #7
   1198e:	781b      	ldrb	r3, [r3, #0]
   11990:	1dfa      	adds	r2, r7, #7
   11992:	1e59      	subs	r1, r3, #1
   11994:	7011      	strb	r1, [r2, #0]
   11996:	2b00      	cmp	r3, #0
   11998:	d1f0      	bne.n	1197c <copy_block_nn+0x10>
}
   1199a:	46c0      	nop			; (mov r8, r8)
   1199c:	46bd      	mov	sp, r7
   1199e:	b004      	add	sp, #16
   119a0:	bd80      	pop	{r7, pc}

000119a2 <xor_block>:

static void xor_block( void *d, const void *s )
{
   119a2:	b580      	push	{r7, lr}
   119a4:	b082      	sub	sp, #8
   119a6:	af00      	add	r7, sp, #0
   119a8:	6078      	str	r0, [r7, #4]
   119aa:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
   119ac:	687b      	ldr	r3, [r7, #4]
   119ae:	781a      	ldrb	r2, [r3, #0]
   119b0:	683b      	ldr	r3, [r7, #0]
   119b2:	781b      	ldrb	r3, [r3, #0]
   119b4:	4053      	eors	r3, r2
   119b6:	b2da      	uxtb	r2, r3
   119b8:	687b      	ldr	r3, [r7, #4]
   119ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
   119bc:	687b      	ldr	r3, [r7, #4]
   119be:	3301      	adds	r3, #1
   119c0:	687a      	ldr	r2, [r7, #4]
   119c2:	3201      	adds	r2, #1
   119c4:	7811      	ldrb	r1, [r2, #0]
   119c6:	683a      	ldr	r2, [r7, #0]
   119c8:	3201      	adds	r2, #1
   119ca:	7812      	ldrb	r2, [r2, #0]
   119cc:	404a      	eors	r2, r1
   119ce:	b2d2      	uxtb	r2, r2
   119d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
   119d2:	687b      	ldr	r3, [r7, #4]
   119d4:	3302      	adds	r3, #2
   119d6:	687a      	ldr	r2, [r7, #4]
   119d8:	3202      	adds	r2, #2
   119da:	7811      	ldrb	r1, [r2, #0]
   119dc:	683a      	ldr	r2, [r7, #0]
   119de:	3202      	adds	r2, #2
   119e0:	7812      	ldrb	r2, [r2, #0]
   119e2:	404a      	eors	r2, r1
   119e4:	b2d2      	uxtb	r2, r2
   119e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
   119e8:	687b      	ldr	r3, [r7, #4]
   119ea:	3303      	adds	r3, #3
   119ec:	687a      	ldr	r2, [r7, #4]
   119ee:	3203      	adds	r2, #3
   119f0:	7811      	ldrb	r1, [r2, #0]
   119f2:	683a      	ldr	r2, [r7, #0]
   119f4:	3203      	adds	r2, #3
   119f6:	7812      	ldrb	r2, [r2, #0]
   119f8:	404a      	eors	r2, r1
   119fa:	b2d2      	uxtb	r2, r2
   119fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
   119fe:	687b      	ldr	r3, [r7, #4]
   11a00:	3304      	adds	r3, #4
   11a02:	687a      	ldr	r2, [r7, #4]
   11a04:	3204      	adds	r2, #4
   11a06:	7811      	ldrb	r1, [r2, #0]
   11a08:	683a      	ldr	r2, [r7, #0]
   11a0a:	3204      	adds	r2, #4
   11a0c:	7812      	ldrb	r2, [r2, #0]
   11a0e:	404a      	eors	r2, r1
   11a10:	b2d2      	uxtb	r2, r2
   11a12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
   11a14:	687b      	ldr	r3, [r7, #4]
   11a16:	3305      	adds	r3, #5
   11a18:	687a      	ldr	r2, [r7, #4]
   11a1a:	3205      	adds	r2, #5
   11a1c:	7811      	ldrb	r1, [r2, #0]
   11a1e:	683a      	ldr	r2, [r7, #0]
   11a20:	3205      	adds	r2, #5
   11a22:	7812      	ldrb	r2, [r2, #0]
   11a24:	404a      	eors	r2, r1
   11a26:	b2d2      	uxtb	r2, r2
   11a28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
   11a2a:	687b      	ldr	r3, [r7, #4]
   11a2c:	3306      	adds	r3, #6
   11a2e:	687a      	ldr	r2, [r7, #4]
   11a30:	3206      	adds	r2, #6
   11a32:	7811      	ldrb	r1, [r2, #0]
   11a34:	683a      	ldr	r2, [r7, #0]
   11a36:	3206      	adds	r2, #6
   11a38:	7812      	ldrb	r2, [r2, #0]
   11a3a:	404a      	eors	r2, r1
   11a3c:	b2d2      	uxtb	r2, r2
   11a3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
   11a40:	687b      	ldr	r3, [r7, #4]
   11a42:	3307      	adds	r3, #7
   11a44:	687a      	ldr	r2, [r7, #4]
   11a46:	3207      	adds	r2, #7
   11a48:	7811      	ldrb	r1, [r2, #0]
   11a4a:	683a      	ldr	r2, [r7, #0]
   11a4c:	3207      	adds	r2, #7
   11a4e:	7812      	ldrb	r2, [r2, #0]
   11a50:	404a      	eors	r2, r1
   11a52:	b2d2      	uxtb	r2, r2
   11a54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
   11a56:	687b      	ldr	r3, [r7, #4]
   11a58:	3308      	adds	r3, #8
   11a5a:	687a      	ldr	r2, [r7, #4]
   11a5c:	3208      	adds	r2, #8
   11a5e:	7811      	ldrb	r1, [r2, #0]
   11a60:	683a      	ldr	r2, [r7, #0]
   11a62:	3208      	adds	r2, #8
   11a64:	7812      	ldrb	r2, [r2, #0]
   11a66:	404a      	eors	r2, r1
   11a68:	b2d2      	uxtb	r2, r2
   11a6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
   11a6c:	687b      	ldr	r3, [r7, #4]
   11a6e:	3309      	adds	r3, #9
   11a70:	687a      	ldr	r2, [r7, #4]
   11a72:	3209      	adds	r2, #9
   11a74:	7811      	ldrb	r1, [r2, #0]
   11a76:	683a      	ldr	r2, [r7, #0]
   11a78:	3209      	adds	r2, #9
   11a7a:	7812      	ldrb	r2, [r2, #0]
   11a7c:	404a      	eors	r2, r1
   11a7e:	b2d2      	uxtb	r2, r2
   11a80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
   11a82:	687b      	ldr	r3, [r7, #4]
   11a84:	330a      	adds	r3, #10
   11a86:	687a      	ldr	r2, [r7, #4]
   11a88:	320a      	adds	r2, #10
   11a8a:	7811      	ldrb	r1, [r2, #0]
   11a8c:	683a      	ldr	r2, [r7, #0]
   11a8e:	320a      	adds	r2, #10
   11a90:	7812      	ldrb	r2, [r2, #0]
   11a92:	404a      	eors	r2, r1
   11a94:	b2d2      	uxtb	r2, r2
   11a96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
   11a98:	687b      	ldr	r3, [r7, #4]
   11a9a:	330b      	adds	r3, #11
   11a9c:	687a      	ldr	r2, [r7, #4]
   11a9e:	320b      	adds	r2, #11
   11aa0:	7811      	ldrb	r1, [r2, #0]
   11aa2:	683a      	ldr	r2, [r7, #0]
   11aa4:	320b      	adds	r2, #11
   11aa6:	7812      	ldrb	r2, [r2, #0]
   11aa8:	404a      	eors	r2, r1
   11aaa:	b2d2      	uxtb	r2, r2
   11aac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
   11aae:	687b      	ldr	r3, [r7, #4]
   11ab0:	330c      	adds	r3, #12
   11ab2:	687a      	ldr	r2, [r7, #4]
   11ab4:	320c      	adds	r2, #12
   11ab6:	7811      	ldrb	r1, [r2, #0]
   11ab8:	683a      	ldr	r2, [r7, #0]
   11aba:	320c      	adds	r2, #12
   11abc:	7812      	ldrb	r2, [r2, #0]
   11abe:	404a      	eors	r2, r1
   11ac0:	b2d2      	uxtb	r2, r2
   11ac2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
   11ac4:	687b      	ldr	r3, [r7, #4]
   11ac6:	330d      	adds	r3, #13
   11ac8:	687a      	ldr	r2, [r7, #4]
   11aca:	320d      	adds	r2, #13
   11acc:	7811      	ldrb	r1, [r2, #0]
   11ace:	683a      	ldr	r2, [r7, #0]
   11ad0:	320d      	adds	r2, #13
   11ad2:	7812      	ldrb	r2, [r2, #0]
   11ad4:	404a      	eors	r2, r1
   11ad6:	b2d2      	uxtb	r2, r2
   11ad8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
   11ada:	687b      	ldr	r3, [r7, #4]
   11adc:	330e      	adds	r3, #14
   11ade:	687a      	ldr	r2, [r7, #4]
   11ae0:	320e      	adds	r2, #14
   11ae2:	7811      	ldrb	r1, [r2, #0]
   11ae4:	683a      	ldr	r2, [r7, #0]
   11ae6:	320e      	adds	r2, #14
   11ae8:	7812      	ldrb	r2, [r2, #0]
   11aea:	404a      	eors	r2, r1
   11aec:	b2d2      	uxtb	r2, r2
   11aee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
   11af0:	687b      	ldr	r3, [r7, #4]
   11af2:	330f      	adds	r3, #15
   11af4:	687a      	ldr	r2, [r7, #4]
   11af6:	320f      	adds	r2, #15
   11af8:	7811      	ldrb	r1, [r2, #0]
   11afa:	683a      	ldr	r2, [r7, #0]
   11afc:	320f      	adds	r2, #15
   11afe:	7812      	ldrb	r2, [r2, #0]
   11b00:	404a      	eors	r2, r1
   11b02:	b2d2      	uxtb	r2, r2
   11b04:	701a      	strb	r2, [r3, #0]
#endif
}
   11b06:	46c0      	nop			; (mov r8, r8)
   11b08:	46bd      	mov	sp, r7
   11b0a:	b002      	add	sp, #8
   11b0c:	bd80      	pop	{r7, pc}

00011b0e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
   11b0e:	b580      	push	{r7, lr}
   11b10:	b084      	sub	sp, #16
   11b12:	af00      	add	r7, sp, #0
   11b14:	60f8      	str	r0, [r7, #12]
   11b16:	60b9      	str	r1, [r7, #8]
   11b18:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
   11b1a:	68bb      	ldr	r3, [r7, #8]
   11b1c:	781a      	ldrb	r2, [r3, #0]
   11b1e:	687b      	ldr	r3, [r7, #4]
   11b20:	781b      	ldrb	r3, [r3, #0]
   11b22:	4053      	eors	r3, r2
   11b24:	b2da      	uxtb	r2, r3
   11b26:	68fb      	ldr	r3, [r7, #12]
   11b28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
   11b2a:	68fb      	ldr	r3, [r7, #12]
   11b2c:	3301      	adds	r3, #1
   11b2e:	68ba      	ldr	r2, [r7, #8]
   11b30:	3201      	adds	r2, #1
   11b32:	7811      	ldrb	r1, [r2, #0]
   11b34:	687a      	ldr	r2, [r7, #4]
   11b36:	3201      	adds	r2, #1
   11b38:	7812      	ldrb	r2, [r2, #0]
   11b3a:	404a      	eors	r2, r1
   11b3c:	b2d2      	uxtb	r2, r2
   11b3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
   11b40:	68fb      	ldr	r3, [r7, #12]
   11b42:	3302      	adds	r3, #2
   11b44:	68ba      	ldr	r2, [r7, #8]
   11b46:	3202      	adds	r2, #2
   11b48:	7811      	ldrb	r1, [r2, #0]
   11b4a:	687a      	ldr	r2, [r7, #4]
   11b4c:	3202      	adds	r2, #2
   11b4e:	7812      	ldrb	r2, [r2, #0]
   11b50:	404a      	eors	r2, r1
   11b52:	b2d2      	uxtb	r2, r2
   11b54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
   11b56:	68fb      	ldr	r3, [r7, #12]
   11b58:	3303      	adds	r3, #3
   11b5a:	68ba      	ldr	r2, [r7, #8]
   11b5c:	3203      	adds	r2, #3
   11b5e:	7811      	ldrb	r1, [r2, #0]
   11b60:	687a      	ldr	r2, [r7, #4]
   11b62:	3203      	adds	r2, #3
   11b64:	7812      	ldrb	r2, [r2, #0]
   11b66:	404a      	eors	r2, r1
   11b68:	b2d2      	uxtb	r2, r2
   11b6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
   11b6c:	68fb      	ldr	r3, [r7, #12]
   11b6e:	3304      	adds	r3, #4
   11b70:	68ba      	ldr	r2, [r7, #8]
   11b72:	3204      	adds	r2, #4
   11b74:	7811      	ldrb	r1, [r2, #0]
   11b76:	687a      	ldr	r2, [r7, #4]
   11b78:	3204      	adds	r2, #4
   11b7a:	7812      	ldrb	r2, [r2, #0]
   11b7c:	404a      	eors	r2, r1
   11b7e:	b2d2      	uxtb	r2, r2
   11b80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
   11b82:	68fb      	ldr	r3, [r7, #12]
   11b84:	3305      	adds	r3, #5
   11b86:	68ba      	ldr	r2, [r7, #8]
   11b88:	3205      	adds	r2, #5
   11b8a:	7811      	ldrb	r1, [r2, #0]
   11b8c:	687a      	ldr	r2, [r7, #4]
   11b8e:	3205      	adds	r2, #5
   11b90:	7812      	ldrb	r2, [r2, #0]
   11b92:	404a      	eors	r2, r1
   11b94:	b2d2      	uxtb	r2, r2
   11b96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
   11b98:	68fb      	ldr	r3, [r7, #12]
   11b9a:	3306      	adds	r3, #6
   11b9c:	68ba      	ldr	r2, [r7, #8]
   11b9e:	3206      	adds	r2, #6
   11ba0:	7811      	ldrb	r1, [r2, #0]
   11ba2:	687a      	ldr	r2, [r7, #4]
   11ba4:	3206      	adds	r2, #6
   11ba6:	7812      	ldrb	r2, [r2, #0]
   11ba8:	404a      	eors	r2, r1
   11baa:	b2d2      	uxtb	r2, r2
   11bac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
   11bae:	68fb      	ldr	r3, [r7, #12]
   11bb0:	3307      	adds	r3, #7
   11bb2:	68ba      	ldr	r2, [r7, #8]
   11bb4:	3207      	adds	r2, #7
   11bb6:	7811      	ldrb	r1, [r2, #0]
   11bb8:	687a      	ldr	r2, [r7, #4]
   11bba:	3207      	adds	r2, #7
   11bbc:	7812      	ldrb	r2, [r2, #0]
   11bbe:	404a      	eors	r2, r1
   11bc0:	b2d2      	uxtb	r2, r2
   11bc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
   11bc4:	68fb      	ldr	r3, [r7, #12]
   11bc6:	3308      	adds	r3, #8
   11bc8:	68ba      	ldr	r2, [r7, #8]
   11bca:	3208      	adds	r2, #8
   11bcc:	7811      	ldrb	r1, [r2, #0]
   11bce:	687a      	ldr	r2, [r7, #4]
   11bd0:	3208      	adds	r2, #8
   11bd2:	7812      	ldrb	r2, [r2, #0]
   11bd4:	404a      	eors	r2, r1
   11bd6:	b2d2      	uxtb	r2, r2
   11bd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
   11bda:	68fb      	ldr	r3, [r7, #12]
   11bdc:	3309      	adds	r3, #9
   11bde:	68ba      	ldr	r2, [r7, #8]
   11be0:	3209      	adds	r2, #9
   11be2:	7811      	ldrb	r1, [r2, #0]
   11be4:	687a      	ldr	r2, [r7, #4]
   11be6:	3209      	adds	r2, #9
   11be8:	7812      	ldrb	r2, [r2, #0]
   11bea:	404a      	eors	r2, r1
   11bec:	b2d2      	uxtb	r2, r2
   11bee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
   11bf0:	68fb      	ldr	r3, [r7, #12]
   11bf2:	330a      	adds	r3, #10
   11bf4:	68ba      	ldr	r2, [r7, #8]
   11bf6:	320a      	adds	r2, #10
   11bf8:	7811      	ldrb	r1, [r2, #0]
   11bfa:	687a      	ldr	r2, [r7, #4]
   11bfc:	320a      	adds	r2, #10
   11bfe:	7812      	ldrb	r2, [r2, #0]
   11c00:	404a      	eors	r2, r1
   11c02:	b2d2      	uxtb	r2, r2
   11c04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
   11c06:	68fb      	ldr	r3, [r7, #12]
   11c08:	330b      	adds	r3, #11
   11c0a:	68ba      	ldr	r2, [r7, #8]
   11c0c:	320b      	adds	r2, #11
   11c0e:	7811      	ldrb	r1, [r2, #0]
   11c10:	687a      	ldr	r2, [r7, #4]
   11c12:	320b      	adds	r2, #11
   11c14:	7812      	ldrb	r2, [r2, #0]
   11c16:	404a      	eors	r2, r1
   11c18:	b2d2      	uxtb	r2, r2
   11c1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
   11c1c:	68fb      	ldr	r3, [r7, #12]
   11c1e:	330c      	adds	r3, #12
   11c20:	68ba      	ldr	r2, [r7, #8]
   11c22:	320c      	adds	r2, #12
   11c24:	7811      	ldrb	r1, [r2, #0]
   11c26:	687a      	ldr	r2, [r7, #4]
   11c28:	320c      	adds	r2, #12
   11c2a:	7812      	ldrb	r2, [r2, #0]
   11c2c:	404a      	eors	r2, r1
   11c2e:	b2d2      	uxtb	r2, r2
   11c30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
   11c32:	68fb      	ldr	r3, [r7, #12]
   11c34:	330d      	adds	r3, #13
   11c36:	68ba      	ldr	r2, [r7, #8]
   11c38:	320d      	adds	r2, #13
   11c3a:	7811      	ldrb	r1, [r2, #0]
   11c3c:	687a      	ldr	r2, [r7, #4]
   11c3e:	320d      	adds	r2, #13
   11c40:	7812      	ldrb	r2, [r2, #0]
   11c42:	404a      	eors	r2, r1
   11c44:	b2d2      	uxtb	r2, r2
   11c46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
   11c48:	68fb      	ldr	r3, [r7, #12]
   11c4a:	330e      	adds	r3, #14
   11c4c:	68ba      	ldr	r2, [r7, #8]
   11c4e:	320e      	adds	r2, #14
   11c50:	7811      	ldrb	r1, [r2, #0]
   11c52:	687a      	ldr	r2, [r7, #4]
   11c54:	320e      	adds	r2, #14
   11c56:	7812      	ldrb	r2, [r2, #0]
   11c58:	404a      	eors	r2, r1
   11c5a:	b2d2      	uxtb	r2, r2
   11c5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
   11c5e:	68fb      	ldr	r3, [r7, #12]
   11c60:	330f      	adds	r3, #15
   11c62:	68ba      	ldr	r2, [r7, #8]
   11c64:	320f      	adds	r2, #15
   11c66:	7811      	ldrb	r1, [r2, #0]
   11c68:	687a      	ldr	r2, [r7, #4]
   11c6a:	320f      	adds	r2, #15
   11c6c:	7812      	ldrb	r2, [r2, #0]
   11c6e:	404a      	eors	r2, r1
   11c70:	b2d2      	uxtb	r2, r2
   11c72:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
   11c74:	46c0      	nop			; (mov r8, r8)
   11c76:	46bd      	mov	sp, r7
   11c78:	b004      	add	sp, #16
   11c7a:	bd80      	pop	{r7, pc}

00011c7c <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
   11c7c:	b580      	push	{r7, lr}
   11c7e:	b082      	sub	sp, #8
   11c80:	af00      	add	r7, sp, #0
   11c82:	6078      	str	r0, [r7, #4]
   11c84:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
   11c86:	683a      	ldr	r2, [r7, #0]
   11c88:	687b      	ldr	r3, [r7, #4]
   11c8a:	0011      	movs	r1, r2
   11c8c:	0018      	movs	r0, r3
   11c8e:	4b03      	ldr	r3, [pc, #12]	; (11c9c <add_round_key+0x20>)
   11c90:	4798      	blx	r3
}
   11c92:	46c0      	nop			; (mov r8, r8)
   11c94:	46bd      	mov	sp, r7
   11c96:	b002      	add	sp, #8
   11c98:	bd80      	pop	{r7, pc}
   11c9a:	46c0      	nop			; (mov r8, r8)
   11c9c:	000119a3 	.word	0x000119a3

00011ca0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
   11ca0:	b580      	push	{r7, lr}
   11ca2:	b084      	sub	sp, #16
   11ca4:	af00      	add	r7, sp, #0
   11ca6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   11ca8:	687b      	ldr	r3, [r7, #4]
   11caa:	781b      	ldrb	r3, [r3, #0]
   11cac:	001a      	movs	r2, r3
   11cae:	4b4f      	ldr	r3, [pc, #316]	; (11dec <shift_sub_rows+0x14c>)
   11cb0:	5c9a      	ldrb	r2, [r3, r2]
   11cb2:	687b      	ldr	r3, [r7, #4]
   11cb4:	701a      	strb	r2, [r3, #0]
   11cb6:	687b      	ldr	r3, [r7, #4]
   11cb8:	3304      	adds	r3, #4
   11cba:	687a      	ldr	r2, [r7, #4]
   11cbc:	3204      	adds	r2, #4
   11cbe:	7812      	ldrb	r2, [r2, #0]
   11cc0:	0011      	movs	r1, r2
   11cc2:	4a4a      	ldr	r2, [pc, #296]	; (11dec <shift_sub_rows+0x14c>)
   11cc4:	5c52      	ldrb	r2, [r2, r1]
   11cc6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   11cc8:	687b      	ldr	r3, [r7, #4]
   11cca:	3308      	adds	r3, #8
   11ccc:	687a      	ldr	r2, [r7, #4]
   11cce:	3208      	adds	r2, #8
   11cd0:	7812      	ldrb	r2, [r2, #0]
   11cd2:	0011      	movs	r1, r2
   11cd4:	4a45      	ldr	r2, [pc, #276]	; (11dec <shift_sub_rows+0x14c>)
   11cd6:	5c52      	ldrb	r2, [r2, r1]
   11cd8:	701a      	strb	r2, [r3, #0]
   11cda:	687b      	ldr	r3, [r7, #4]
   11cdc:	330c      	adds	r3, #12
   11cde:	687a      	ldr	r2, [r7, #4]
   11ce0:	320c      	adds	r2, #12
   11ce2:	7812      	ldrb	r2, [r2, #0]
   11ce4:	0011      	movs	r1, r2
   11ce6:	4a41      	ldr	r2, [pc, #260]	; (11dec <shift_sub_rows+0x14c>)
   11ce8:	5c52      	ldrb	r2, [r2, r1]
   11cea:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   11cec:	230f      	movs	r3, #15
   11cee:	18fb      	adds	r3, r7, r3
   11cf0:	687a      	ldr	r2, [r7, #4]
   11cf2:	7852      	ldrb	r2, [r2, #1]
   11cf4:	701a      	strb	r2, [r3, #0]
   11cf6:	687b      	ldr	r3, [r7, #4]
   11cf8:	3301      	adds	r3, #1
   11cfa:	687a      	ldr	r2, [r7, #4]
   11cfc:	3205      	adds	r2, #5
   11cfe:	7812      	ldrb	r2, [r2, #0]
   11d00:	0011      	movs	r1, r2
   11d02:	4a3a      	ldr	r2, [pc, #232]	; (11dec <shift_sub_rows+0x14c>)
   11d04:	5c52      	ldrb	r2, [r2, r1]
   11d06:	701a      	strb	r2, [r3, #0]
   11d08:	687b      	ldr	r3, [r7, #4]
   11d0a:	3305      	adds	r3, #5
   11d0c:	687a      	ldr	r2, [r7, #4]
   11d0e:	3209      	adds	r2, #9
   11d10:	7812      	ldrb	r2, [r2, #0]
   11d12:	0011      	movs	r1, r2
   11d14:	4a35      	ldr	r2, [pc, #212]	; (11dec <shift_sub_rows+0x14c>)
   11d16:	5c52      	ldrb	r2, [r2, r1]
   11d18:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   11d1a:	687b      	ldr	r3, [r7, #4]
   11d1c:	3309      	adds	r3, #9
   11d1e:	687a      	ldr	r2, [r7, #4]
   11d20:	320d      	adds	r2, #13
   11d22:	7812      	ldrb	r2, [r2, #0]
   11d24:	0011      	movs	r1, r2
   11d26:	4a31      	ldr	r2, [pc, #196]	; (11dec <shift_sub_rows+0x14c>)
   11d28:	5c52      	ldrb	r2, [r2, r1]
   11d2a:	701a      	strb	r2, [r3, #0]
   11d2c:	687b      	ldr	r3, [r7, #4]
   11d2e:	330d      	adds	r3, #13
   11d30:	220f      	movs	r2, #15
   11d32:	18ba      	adds	r2, r7, r2
   11d34:	7812      	ldrb	r2, [r2, #0]
   11d36:	492d      	ldr	r1, [pc, #180]	; (11dec <shift_sub_rows+0x14c>)
   11d38:	5c8a      	ldrb	r2, [r1, r2]
   11d3a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   11d3c:	230f      	movs	r3, #15
   11d3e:	18fb      	adds	r3, r7, r3
   11d40:	687a      	ldr	r2, [r7, #4]
   11d42:	7892      	ldrb	r2, [r2, #2]
   11d44:	701a      	strb	r2, [r3, #0]
   11d46:	687b      	ldr	r3, [r7, #4]
   11d48:	3302      	adds	r3, #2
   11d4a:	687a      	ldr	r2, [r7, #4]
   11d4c:	320a      	adds	r2, #10
   11d4e:	7812      	ldrb	r2, [r2, #0]
   11d50:	0011      	movs	r1, r2
   11d52:	4a26      	ldr	r2, [pc, #152]	; (11dec <shift_sub_rows+0x14c>)
   11d54:	5c52      	ldrb	r2, [r2, r1]
   11d56:	701a      	strb	r2, [r3, #0]
   11d58:	687b      	ldr	r3, [r7, #4]
   11d5a:	330a      	adds	r3, #10
   11d5c:	220f      	movs	r2, #15
   11d5e:	18ba      	adds	r2, r7, r2
   11d60:	7812      	ldrb	r2, [r2, #0]
   11d62:	4922      	ldr	r1, [pc, #136]	; (11dec <shift_sub_rows+0x14c>)
   11d64:	5c8a      	ldrb	r2, [r1, r2]
   11d66:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   11d68:	230f      	movs	r3, #15
   11d6a:	18fb      	adds	r3, r7, r3
   11d6c:	687a      	ldr	r2, [r7, #4]
   11d6e:	7992      	ldrb	r2, [r2, #6]
   11d70:	701a      	strb	r2, [r3, #0]
   11d72:	687b      	ldr	r3, [r7, #4]
   11d74:	3306      	adds	r3, #6
   11d76:	687a      	ldr	r2, [r7, #4]
   11d78:	320e      	adds	r2, #14
   11d7a:	7812      	ldrb	r2, [r2, #0]
   11d7c:	0011      	movs	r1, r2
   11d7e:	4a1b      	ldr	r2, [pc, #108]	; (11dec <shift_sub_rows+0x14c>)
   11d80:	5c52      	ldrb	r2, [r2, r1]
   11d82:	701a      	strb	r2, [r3, #0]
   11d84:	687b      	ldr	r3, [r7, #4]
   11d86:	330e      	adds	r3, #14
   11d88:	220f      	movs	r2, #15
   11d8a:	18ba      	adds	r2, r7, r2
   11d8c:	7812      	ldrb	r2, [r2, #0]
   11d8e:	4917      	ldr	r1, [pc, #92]	; (11dec <shift_sub_rows+0x14c>)
   11d90:	5c8a      	ldrb	r2, [r1, r2]
   11d92:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   11d94:	230f      	movs	r3, #15
   11d96:	18fb      	adds	r3, r7, r3
   11d98:	687a      	ldr	r2, [r7, #4]
   11d9a:	7bd2      	ldrb	r2, [r2, #15]
   11d9c:	701a      	strb	r2, [r3, #0]
   11d9e:	687b      	ldr	r3, [r7, #4]
   11da0:	330f      	adds	r3, #15
   11da2:	687a      	ldr	r2, [r7, #4]
   11da4:	320b      	adds	r2, #11
   11da6:	7812      	ldrb	r2, [r2, #0]
   11da8:	0011      	movs	r1, r2
   11daa:	4a10      	ldr	r2, [pc, #64]	; (11dec <shift_sub_rows+0x14c>)
   11dac:	5c52      	ldrb	r2, [r2, r1]
   11dae:	701a      	strb	r2, [r3, #0]
   11db0:	687b      	ldr	r3, [r7, #4]
   11db2:	330b      	adds	r3, #11
   11db4:	687a      	ldr	r2, [r7, #4]
   11db6:	3207      	adds	r2, #7
   11db8:	7812      	ldrb	r2, [r2, #0]
   11dba:	0011      	movs	r1, r2
   11dbc:	4a0b      	ldr	r2, [pc, #44]	; (11dec <shift_sub_rows+0x14c>)
   11dbe:	5c52      	ldrb	r2, [r2, r1]
   11dc0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   11dc2:	687b      	ldr	r3, [r7, #4]
   11dc4:	3307      	adds	r3, #7
   11dc6:	687a      	ldr	r2, [r7, #4]
   11dc8:	3203      	adds	r2, #3
   11dca:	7812      	ldrb	r2, [r2, #0]
   11dcc:	0011      	movs	r1, r2
   11dce:	4a07      	ldr	r2, [pc, #28]	; (11dec <shift_sub_rows+0x14c>)
   11dd0:	5c52      	ldrb	r2, [r2, r1]
   11dd2:	701a      	strb	r2, [r3, #0]
   11dd4:	687b      	ldr	r3, [r7, #4]
   11dd6:	3303      	adds	r3, #3
   11dd8:	220f      	movs	r2, #15
   11dda:	18ba      	adds	r2, r7, r2
   11ddc:	7812      	ldrb	r2, [r2, #0]
   11dde:	4903      	ldr	r1, [pc, #12]	; (11dec <shift_sub_rows+0x14c>)
   11de0:	5c8a      	ldrb	r2, [r1, r2]
   11de2:	701a      	strb	r2, [r3, #0]
}
   11de4:	46c0      	nop			; (mov r8, r8)
   11de6:	46bd      	mov	sp, r7
   11de8:	b004      	add	sp, #16
   11dea:	bd80      	pop	{r7, pc}
   11dec:	0001f534 	.word	0x0001f534

00011df0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
   11df0:	b580      	push	{r7, lr}
   11df2:	b086      	sub	sp, #24
   11df4:	af00      	add	r7, sp, #0
   11df6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
   11df8:	687a      	ldr	r2, [r7, #4]
   11dfa:	2308      	movs	r3, #8
   11dfc:	18fb      	adds	r3, r7, r3
   11dfe:	0011      	movs	r1, r2
   11e00:	0018      	movs	r0, r3
   11e02:	4bfe      	ldr	r3, [pc, #1016]	; (121fc <mix_sub_columns+0x40c>)
   11e04:	4798      	blx	r3
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   11e06:	2308      	movs	r3, #8
   11e08:	18fb      	adds	r3, r7, r3
   11e0a:	781b      	ldrb	r3, [r3, #0]
   11e0c:	001a      	movs	r2, r3
   11e0e:	4bfc      	ldr	r3, [pc, #1008]	; (12200 <mix_sub_columns+0x410>)
   11e10:	5c9a      	ldrb	r2, [r3, r2]
   11e12:	2308      	movs	r3, #8
   11e14:	18fb      	adds	r3, r7, r3
   11e16:	795b      	ldrb	r3, [r3, #5]
   11e18:	0019      	movs	r1, r3
   11e1a:	4bfa      	ldr	r3, [pc, #1000]	; (12204 <mix_sub_columns+0x414>)
   11e1c:	5c5b      	ldrb	r3, [r3, r1]
   11e1e:	4053      	eors	r3, r2
   11e20:	b2da      	uxtb	r2, r3
   11e22:	2308      	movs	r3, #8
   11e24:	18fb      	adds	r3, r7, r3
   11e26:	7a9b      	ldrb	r3, [r3, #10]
   11e28:	0019      	movs	r1, r3
   11e2a:	4bf7      	ldr	r3, [pc, #988]	; (12208 <mix_sub_columns+0x418>)
   11e2c:	5c5b      	ldrb	r3, [r3, r1]
   11e2e:	4053      	eors	r3, r2
   11e30:	b2da      	uxtb	r2, r3
   11e32:	2308      	movs	r3, #8
   11e34:	18fb      	adds	r3, r7, r3
   11e36:	7bdb      	ldrb	r3, [r3, #15]
   11e38:	0019      	movs	r1, r3
   11e3a:	4bf3      	ldr	r3, [pc, #972]	; (12208 <mix_sub_columns+0x418>)
   11e3c:	5c5b      	ldrb	r3, [r3, r1]
   11e3e:	4053      	eors	r3, r2
   11e40:	b2da      	uxtb	r2, r3
   11e42:	687b      	ldr	r3, [r7, #4]
   11e44:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	3301      	adds	r3, #1
   11e4a:	2208      	movs	r2, #8
   11e4c:	18ba      	adds	r2, r7, r2
   11e4e:	7812      	ldrb	r2, [r2, #0]
   11e50:	0011      	movs	r1, r2
   11e52:	4aed      	ldr	r2, [pc, #948]	; (12208 <mix_sub_columns+0x418>)
   11e54:	5c51      	ldrb	r1, [r2, r1]
   11e56:	2208      	movs	r2, #8
   11e58:	18ba      	adds	r2, r7, r2
   11e5a:	7952      	ldrb	r2, [r2, #5]
   11e5c:	0010      	movs	r0, r2
   11e5e:	4ae8      	ldr	r2, [pc, #928]	; (12200 <mix_sub_columns+0x410>)
   11e60:	5c12      	ldrb	r2, [r2, r0]
   11e62:	404a      	eors	r2, r1
   11e64:	b2d1      	uxtb	r1, r2
   11e66:	2208      	movs	r2, #8
   11e68:	18ba      	adds	r2, r7, r2
   11e6a:	7a92      	ldrb	r2, [r2, #10]
   11e6c:	0010      	movs	r0, r2
   11e6e:	4ae5      	ldr	r2, [pc, #916]	; (12204 <mix_sub_columns+0x414>)
   11e70:	5c12      	ldrb	r2, [r2, r0]
   11e72:	404a      	eors	r2, r1
   11e74:	b2d1      	uxtb	r1, r2
   11e76:	2208      	movs	r2, #8
   11e78:	18ba      	adds	r2, r7, r2
   11e7a:	7bd2      	ldrb	r2, [r2, #15]
   11e7c:	0010      	movs	r0, r2
   11e7e:	4ae2      	ldr	r2, [pc, #904]	; (12208 <mix_sub_columns+0x418>)
   11e80:	5c12      	ldrb	r2, [r2, r0]
   11e82:	404a      	eors	r2, r1
   11e84:	b2d2      	uxtb	r2, r2
   11e86:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   11e88:	687b      	ldr	r3, [r7, #4]
   11e8a:	3302      	adds	r3, #2
   11e8c:	2208      	movs	r2, #8
   11e8e:	18ba      	adds	r2, r7, r2
   11e90:	7812      	ldrb	r2, [r2, #0]
   11e92:	0011      	movs	r1, r2
   11e94:	4adc      	ldr	r2, [pc, #880]	; (12208 <mix_sub_columns+0x418>)
   11e96:	5c51      	ldrb	r1, [r2, r1]
   11e98:	2208      	movs	r2, #8
   11e9a:	18ba      	adds	r2, r7, r2
   11e9c:	7952      	ldrb	r2, [r2, #5]
   11e9e:	0010      	movs	r0, r2
   11ea0:	4ad9      	ldr	r2, [pc, #868]	; (12208 <mix_sub_columns+0x418>)
   11ea2:	5c12      	ldrb	r2, [r2, r0]
   11ea4:	404a      	eors	r2, r1
   11ea6:	b2d1      	uxtb	r1, r2
   11ea8:	2208      	movs	r2, #8
   11eaa:	18ba      	adds	r2, r7, r2
   11eac:	7a92      	ldrb	r2, [r2, #10]
   11eae:	0010      	movs	r0, r2
   11eb0:	4ad3      	ldr	r2, [pc, #844]	; (12200 <mix_sub_columns+0x410>)
   11eb2:	5c12      	ldrb	r2, [r2, r0]
   11eb4:	404a      	eors	r2, r1
   11eb6:	b2d1      	uxtb	r1, r2
   11eb8:	2208      	movs	r2, #8
   11eba:	18ba      	adds	r2, r7, r2
   11ebc:	7bd2      	ldrb	r2, [r2, #15]
   11ebe:	0010      	movs	r0, r2
   11ec0:	4ad0      	ldr	r2, [pc, #832]	; (12204 <mix_sub_columns+0x414>)
   11ec2:	5c12      	ldrb	r2, [r2, r0]
   11ec4:	404a      	eors	r2, r1
   11ec6:	b2d2      	uxtb	r2, r2
   11ec8:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   11eca:	687b      	ldr	r3, [r7, #4]
   11ecc:	3303      	adds	r3, #3
   11ece:	2208      	movs	r2, #8
   11ed0:	18ba      	adds	r2, r7, r2
   11ed2:	7812      	ldrb	r2, [r2, #0]
   11ed4:	0011      	movs	r1, r2
   11ed6:	4acb      	ldr	r2, [pc, #812]	; (12204 <mix_sub_columns+0x414>)
   11ed8:	5c51      	ldrb	r1, [r2, r1]
   11eda:	2208      	movs	r2, #8
   11edc:	18ba      	adds	r2, r7, r2
   11ede:	7952      	ldrb	r2, [r2, #5]
   11ee0:	0010      	movs	r0, r2
   11ee2:	4ac9      	ldr	r2, [pc, #804]	; (12208 <mix_sub_columns+0x418>)
   11ee4:	5c12      	ldrb	r2, [r2, r0]
   11ee6:	404a      	eors	r2, r1
   11ee8:	b2d1      	uxtb	r1, r2
   11eea:	2208      	movs	r2, #8
   11eec:	18ba      	adds	r2, r7, r2
   11eee:	7a92      	ldrb	r2, [r2, #10]
   11ef0:	0010      	movs	r0, r2
   11ef2:	4ac5      	ldr	r2, [pc, #788]	; (12208 <mix_sub_columns+0x418>)
   11ef4:	5c12      	ldrb	r2, [r2, r0]
   11ef6:	404a      	eors	r2, r1
   11ef8:	b2d1      	uxtb	r1, r2
   11efa:	2208      	movs	r2, #8
   11efc:	18ba      	adds	r2, r7, r2
   11efe:	7bd2      	ldrb	r2, [r2, #15]
   11f00:	0010      	movs	r0, r2
   11f02:	4abf      	ldr	r2, [pc, #764]	; (12200 <mix_sub_columns+0x410>)
   11f04:	5c12      	ldrb	r2, [r2, r0]
   11f06:	404a      	eors	r2, r1
   11f08:	b2d2      	uxtb	r2, r2
   11f0a:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   11f0c:	687b      	ldr	r3, [r7, #4]
   11f0e:	3304      	adds	r3, #4
   11f10:	2208      	movs	r2, #8
   11f12:	18ba      	adds	r2, r7, r2
   11f14:	7912      	ldrb	r2, [r2, #4]
   11f16:	0011      	movs	r1, r2
   11f18:	4ab9      	ldr	r2, [pc, #740]	; (12200 <mix_sub_columns+0x410>)
   11f1a:	5c51      	ldrb	r1, [r2, r1]
   11f1c:	2208      	movs	r2, #8
   11f1e:	18ba      	adds	r2, r7, r2
   11f20:	7a52      	ldrb	r2, [r2, #9]
   11f22:	0010      	movs	r0, r2
   11f24:	4ab7      	ldr	r2, [pc, #732]	; (12204 <mix_sub_columns+0x414>)
   11f26:	5c12      	ldrb	r2, [r2, r0]
   11f28:	404a      	eors	r2, r1
   11f2a:	b2d1      	uxtb	r1, r2
   11f2c:	2208      	movs	r2, #8
   11f2e:	18ba      	adds	r2, r7, r2
   11f30:	7b92      	ldrb	r2, [r2, #14]
   11f32:	0010      	movs	r0, r2
   11f34:	4ab4      	ldr	r2, [pc, #720]	; (12208 <mix_sub_columns+0x418>)
   11f36:	5c12      	ldrb	r2, [r2, r0]
   11f38:	404a      	eors	r2, r1
   11f3a:	b2d1      	uxtb	r1, r2
   11f3c:	2208      	movs	r2, #8
   11f3e:	18ba      	adds	r2, r7, r2
   11f40:	78d2      	ldrb	r2, [r2, #3]
   11f42:	0010      	movs	r0, r2
   11f44:	4ab0      	ldr	r2, [pc, #704]	; (12208 <mix_sub_columns+0x418>)
   11f46:	5c12      	ldrb	r2, [r2, r0]
   11f48:	404a      	eors	r2, r1
   11f4a:	b2d2      	uxtb	r2, r2
   11f4c:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	3305      	adds	r3, #5
   11f52:	2208      	movs	r2, #8
   11f54:	18ba      	adds	r2, r7, r2
   11f56:	7912      	ldrb	r2, [r2, #4]
   11f58:	0011      	movs	r1, r2
   11f5a:	4aab      	ldr	r2, [pc, #684]	; (12208 <mix_sub_columns+0x418>)
   11f5c:	5c51      	ldrb	r1, [r2, r1]
   11f5e:	2208      	movs	r2, #8
   11f60:	18ba      	adds	r2, r7, r2
   11f62:	7a52      	ldrb	r2, [r2, #9]
   11f64:	0010      	movs	r0, r2
   11f66:	4aa6      	ldr	r2, [pc, #664]	; (12200 <mix_sub_columns+0x410>)
   11f68:	5c12      	ldrb	r2, [r2, r0]
   11f6a:	404a      	eors	r2, r1
   11f6c:	b2d1      	uxtb	r1, r2
   11f6e:	2208      	movs	r2, #8
   11f70:	18ba      	adds	r2, r7, r2
   11f72:	7b92      	ldrb	r2, [r2, #14]
   11f74:	0010      	movs	r0, r2
   11f76:	4aa3      	ldr	r2, [pc, #652]	; (12204 <mix_sub_columns+0x414>)
   11f78:	5c12      	ldrb	r2, [r2, r0]
   11f7a:	404a      	eors	r2, r1
   11f7c:	b2d1      	uxtb	r1, r2
   11f7e:	2208      	movs	r2, #8
   11f80:	18ba      	adds	r2, r7, r2
   11f82:	78d2      	ldrb	r2, [r2, #3]
   11f84:	0010      	movs	r0, r2
   11f86:	4aa0      	ldr	r2, [pc, #640]	; (12208 <mix_sub_columns+0x418>)
   11f88:	5c12      	ldrb	r2, [r2, r0]
   11f8a:	404a      	eors	r2, r1
   11f8c:	b2d2      	uxtb	r2, r2
   11f8e:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	3306      	adds	r3, #6
   11f94:	2208      	movs	r2, #8
   11f96:	18ba      	adds	r2, r7, r2
   11f98:	7912      	ldrb	r2, [r2, #4]
   11f9a:	0011      	movs	r1, r2
   11f9c:	4a9a      	ldr	r2, [pc, #616]	; (12208 <mix_sub_columns+0x418>)
   11f9e:	5c51      	ldrb	r1, [r2, r1]
   11fa0:	2208      	movs	r2, #8
   11fa2:	18ba      	adds	r2, r7, r2
   11fa4:	7a52      	ldrb	r2, [r2, #9]
   11fa6:	0010      	movs	r0, r2
   11fa8:	4a97      	ldr	r2, [pc, #604]	; (12208 <mix_sub_columns+0x418>)
   11faa:	5c12      	ldrb	r2, [r2, r0]
   11fac:	404a      	eors	r2, r1
   11fae:	b2d1      	uxtb	r1, r2
   11fb0:	2208      	movs	r2, #8
   11fb2:	18ba      	adds	r2, r7, r2
   11fb4:	7b92      	ldrb	r2, [r2, #14]
   11fb6:	0010      	movs	r0, r2
   11fb8:	4a91      	ldr	r2, [pc, #580]	; (12200 <mix_sub_columns+0x410>)
   11fba:	5c12      	ldrb	r2, [r2, r0]
   11fbc:	404a      	eors	r2, r1
   11fbe:	b2d1      	uxtb	r1, r2
   11fc0:	2208      	movs	r2, #8
   11fc2:	18ba      	adds	r2, r7, r2
   11fc4:	78d2      	ldrb	r2, [r2, #3]
   11fc6:	0010      	movs	r0, r2
   11fc8:	4a8e      	ldr	r2, [pc, #568]	; (12204 <mix_sub_columns+0x414>)
   11fca:	5c12      	ldrb	r2, [r2, r0]
   11fcc:	404a      	eors	r2, r1
   11fce:	b2d2      	uxtb	r2, r2
   11fd0:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
   11fd2:	687b      	ldr	r3, [r7, #4]
   11fd4:	3307      	adds	r3, #7
   11fd6:	2208      	movs	r2, #8
   11fd8:	18ba      	adds	r2, r7, r2
   11fda:	7912      	ldrb	r2, [r2, #4]
   11fdc:	0011      	movs	r1, r2
   11fde:	4a89      	ldr	r2, [pc, #548]	; (12204 <mix_sub_columns+0x414>)
   11fe0:	5c51      	ldrb	r1, [r2, r1]
   11fe2:	2208      	movs	r2, #8
   11fe4:	18ba      	adds	r2, r7, r2
   11fe6:	7a52      	ldrb	r2, [r2, #9]
   11fe8:	0010      	movs	r0, r2
   11fea:	4a87      	ldr	r2, [pc, #540]	; (12208 <mix_sub_columns+0x418>)
   11fec:	5c12      	ldrb	r2, [r2, r0]
   11fee:	404a      	eors	r2, r1
   11ff0:	b2d1      	uxtb	r1, r2
   11ff2:	2208      	movs	r2, #8
   11ff4:	18ba      	adds	r2, r7, r2
   11ff6:	7b92      	ldrb	r2, [r2, #14]
   11ff8:	0010      	movs	r0, r2
   11ffa:	4a83      	ldr	r2, [pc, #524]	; (12208 <mix_sub_columns+0x418>)
   11ffc:	5c12      	ldrb	r2, [r2, r0]
   11ffe:	404a      	eors	r2, r1
   12000:	b2d1      	uxtb	r1, r2
   12002:	2208      	movs	r2, #8
   12004:	18ba      	adds	r2, r7, r2
   12006:	78d2      	ldrb	r2, [r2, #3]
   12008:	0010      	movs	r0, r2
   1200a:	4a7d      	ldr	r2, [pc, #500]	; (12200 <mix_sub_columns+0x410>)
   1200c:	5c12      	ldrb	r2, [r2, r0]
   1200e:	404a      	eors	r2, r1
   12010:	b2d2      	uxtb	r2, r2
   12012:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   12014:	687b      	ldr	r3, [r7, #4]
   12016:	3308      	adds	r3, #8
   12018:	2208      	movs	r2, #8
   1201a:	18ba      	adds	r2, r7, r2
   1201c:	7a12      	ldrb	r2, [r2, #8]
   1201e:	0011      	movs	r1, r2
   12020:	4a77      	ldr	r2, [pc, #476]	; (12200 <mix_sub_columns+0x410>)
   12022:	5c51      	ldrb	r1, [r2, r1]
   12024:	2208      	movs	r2, #8
   12026:	18ba      	adds	r2, r7, r2
   12028:	7b52      	ldrb	r2, [r2, #13]
   1202a:	0010      	movs	r0, r2
   1202c:	4a75      	ldr	r2, [pc, #468]	; (12204 <mix_sub_columns+0x414>)
   1202e:	5c12      	ldrb	r2, [r2, r0]
   12030:	404a      	eors	r2, r1
   12032:	b2d1      	uxtb	r1, r2
   12034:	2208      	movs	r2, #8
   12036:	18ba      	adds	r2, r7, r2
   12038:	7892      	ldrb	r2, [r2, #2]
   1203a:	0010      	movs	r0, r2
   1203c:	4a72      	ldr	r2, [pc, #456]	; (12208 <mix_sub_columns+0x418>)
   1203e:	5c12      	ldrb	r2, [r2, r0]
   12040:	404a      	eors	r2, r1
   12042:	b2d1      	uxtb	r1, r2
   12044:	2208      	movs	r2, #8
   12046:	18ba      	adds	r2, r7, r2
   12048:	79d2      	ldrb	r2, [r2, #7]
   1204a:	0010      	movs	r0, r2
   1204c:	4a6e      	ldr	r2, [pc, #440]	; (12208 <mix_sub_columns+0x418>)
   1204e:	5c12      	ldrb	r2, [r2, r0]
   12050:	404a      	eors	r2, r1
   12052:	b2d2      	uxtb	r2, r2
   12054:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
   12056:	687b      	ldr	r3, [r7, #4]
   12058:	3309      	adds	r3, #9
   1205a:	2208      	movs	r2, #8
   1205c:	18ba      	adds	r2, r7, r2
   1205e:	7a12      	ldrb	r2, [r2, #8]
   12060:	0011      	movs	r1, r2
   12062:	4a69      	ldr	r2, [pc, #420]	; (12208 <mix_sub_columns+0x418>)
   12064:	5c51      	ldrb	r1, [r2, r1]
   12066:	2208      	movs	r2, #8
   12068:	18ba      	adds	r2, r7, r2
   1206a:	7b52      	ldrb	r2, [r2, #13]
   1206c:	0010      	movs	r0, r2
   1206e:	4a64      	ldr	r2, [pc, #400]	; (12200 <mix_sub_columns+0x410>)
   12070:	5c12      	ldrb	r2, [r2, r0]
   12072:	404a      	eors	r2, r1
   12074:	b2d1      	uxtb	r1, r2
   12076:	2208      	movs	r2, #8
   12078:	18ba      	adds	r2, r7, r2
   1207a:	7892      	ldrb	r2, [r2, #2]
   1207c:	0010      	movs	r0, r2
   1207e:	4a61      	ldr	r2, [pc, #388]	; (12204 <mix_sub_columns+0x414>)
   12080:	5c12      	ldrb	r2, [r2, r0]
   12082:	404a      	eors	r2, r1
   12084:	b2d1      	uxtb	r1, r2
   12086:	2208      	movs	r2, #8
   12088:	18ba      	adds	r2, r7, r2
   1208a:	79d2      	ldrb	r2, [r2, #7]
   1208c:	0010      	movs	r0, r2
   1208e:	4a5e      	ldr	r2, [pc, #376]	; (12208 <mix_sub_columns+0x418>)
   12090:	5c12      	ldrb	r2, [r2, r0]
   12092:	404a      	eors	r2, r1
   12094:	b2d2      	uxtb	r2, r2
   12096:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
   12098:	687b      	ldr	r3, [r7, #4]
   1209a:	330a      	adds	r3, #10
   1209c:	2208      	movs	r2, #8
   1209e:	18ba      	adds	r2, r7, r2
   120a0:	7a12      	ldrb	r2, [r2, #8]
   120a2:	0011      	movs	r1, r2
   120a4:	4a58      	ldr	r2, [pc, #352]	; (12208 <mix_sub_columns+0x418>)
   120a6:	5c51      	ldrb	r1, [r2, r1]
   120a8:	2208      	movs	r2, #8
   120aa:	18ba      	adds	r2, r7, r2
   120ac:	7b52      	ldrb	r2, [r2, #13]
   120ae:	0010      	movs	r0, r2
   120b0:	4a55      	ldr	r2, [pc, #340]	; (12208 <mix_sub_columns+0x418>)
   120b2:	5c12      	ldrb	r2, [r2, r0]
   120b4:	404a      	eors	r2, r1
   120b6:	b2d1      	uxtb	r1, r2
   120b8:	2208      	movs	r2, #8
   120ba:	18ba      	adds	r2, r7, r2
   120bc:	7892      	ldrb	r2, [r2, #2]
   120be:	0010      	movs	r0, r2
   120c0:	4a4f      	ldr	r2, [pc, #316]	; (12200 <mix_sub_columns+0x410>)
   120c2:	5c12      	ldrb	r2, [r2, r0]
   120c4:	404a      	eors	r2, r1
   120c6:	b2d1      	uxtb	r1, r2
   120c8:	2208      	movs	r2, #8
   120ca:	18ba      	adds	r2, r7, r2
   120cc:	79d2      	ldrb	r2, [r2, #7]
   120ce:	0010      	movs	r0, r2
   120d0:	4a4c      	ldr	r2, [pc, #304]	; (12204 <mix_sub_columns+0x414>)
   120d2:	5c12      	ldrb	r2, [r2, r0]
   120d4:	404a      	eors	r2, r1
   120d6:	b2d2      	uxtb	r2, r2
   120d8:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   120da:	687b      	ldr	r3, [r7, #4]
   120dc:	330b      	adds	r3, #11
   120de:	2208      	movs	r2, #8
   120e0:	18ba      	adds	r2, r7, r2
   120e2:	7a12      	ldrb	r2, [r2, #8]
   120e4:	0011      	movs	r1, r2
   120e6:	4a47      	ldr	r2, [pc, #284]	; (12204 <mix_sub_columns+0x414>)
   120e8:	5c51      	ldrb	r1, [r2, r1]
   120ea:	2208      	movs	r2, #8
   120ec:	18ba      	adds	r2, r7, r2
   120ee:	7b52      	ldrb	r2, [r2, #13]
   120f0:	0010      	movs	r0, r2
   120f2:	4a45      	ldr	r2, [pc, #276]	; (12208 <mix_sub_columns+0x418>)
   120f4:	5c12      	ldrb	r2, [r2, r0]
   120f6:	404a      	eors	r2, r1
   120f8:	b2d1      	uxtb	r1, r2
   120fa:	2208      	movs	r2, #8
   120fc:	18ba      	adds	r2, r7, r2
   120fe:	7892      	ldrb	r2, [r2, #2]
   12100:	0010      	movs	r0, r2
   12102:	4a41      	ldr	r2, [pc, #260]	; (12208 <mix_sub_columns+0x418>)
   12104:	5c12      	ldrb	r2, [r2, r0]
   12106:	404a      	eors	r2, r1
   12108:	b2d1      	uxtb	r1, r2
   1210a:	2208      	movs	r2, #8
   1210c:	18ba      	adds	r2, r7, r2
   1210e:	79d2      	ldrb	r2, [r2, #7]
   12110:	0010      	movs	r0, r2
   12112:	4a3b      	ldr	r2, [pc, #236]	; (12200 <mix_sub_columns+0x410>)
   12114:	5c12      	ldrb	r2, [r2, r0]
   12116:	404a      	eors	r2, r1
   12118:	b2d2      	uxtb	r2, r2
   1211a:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	330c      	adds	r3, #12
   12120:	2208      	movs	r2, #8
   12122:	18ba      	adds	r2, r7, r2
   12124:	7b12      	ldrb	r2, [r2, #12]
   12126:	0011      	movs	r1, r2
   12128:	4a35      	ldr	r2, [pc, #212]	; (12200 <mix_sub_columns+0x410>)
   1212a:	5c51      	ldrb	r1, [r2, r1]
   1212c:	2208      	movs	r2, #8
   1212e:	18ba      	adds	r2, r7, r2
   12130:	7852      	ldrb	r2, [r2, #1]
   12132:	0010      	movs	r0, r2
   12134:	4a33      	ldr	r2, [pc, #204]	; (12204 <mix_sub_columns+0x414>)
   12136:	5c12      	ldrb	r2, [r2, r0]
   12138:	404a      	eors	r2, r1
   1213a:	b2d1      	uxtb	r1, r2
   1213c:	2208      	movs	r2, #8
   1213e:	18ba      	adds	r2, r7, r2
   12140:	7992      	ldrb	r2, [r2, #6]
   12142:	0010      	movs	r0, r2
   12144:	4a30      	ldr	r2, [pc, #192]	; (12208 <mix_sub_columns+0x418>)
   12146:	5c12      	ldrb	r2, [r2, r0]
   12148:	404a      	eors	r2, r1
   1214a:	b2d1      	uxtb	r1, r2
   1214c:	2208      	movs	r2, #8
   1214e:	18ba      	adds	r2, r7, r2
   12150:	7ad2      	ldrb	r2, [r2, #11]
   12152:	0010      	movs	r0, r2
   12154:	4a2c      	ldr	r2, [pc, #176]	; (12208 <mix_sub_columns+0x418>)
   12156:	5c12      	ldrb	r2, [r2, r0]
   12158:	404a      	eors	r2, r1
   1215a:	b2d2      	uxtb	r2, r2
   1215c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
   1215e:	687b      	ldr	r3, [r7, #4]
   12160:	330d      	adds	r3, #13
   12162:	2208      	movs	r2, #8
   12164:	18ba      	adds	r2, r7, r2
   12166:	7b12      	ldrb	r2, [r2, #12]
   12168:	0011      	movs	r1, r2
   1216a:	4a27      	ldr	r2, [pc, #156]	; (12208 <mix_sub_columns+0x418>)
   1216c:	5c51      	ldrb	r1, [r2, r1]
   1216e:	2208      	movs	r2, #8
   12170:	18ba      	adds	r2, r7, r2
   12172:	7852      	ldrb	r2, [r2, #1]
   12174:	0010      	movs	r0, r2
   12176:	4a22      	ldr	r2, [pc, #136]	; (12200 <mix_sub_columns+0x410>)
   12178:	5c12      	ldrb	r2, [r2, r0]
   1217a:	404a      	eors	r2, r1
   1217c:	b2d1      	uxtb	r1, r2
   1217e:	2208      	movs	r2, #8
   12180:	18ba      	adds	r2, r7, r2
   12182:	7992      	ldrb	r2, [r2, #6]
   12184:	0010      	movs	r0, r2
   12186:	4a1f      	ldr	r2, [pc, #124]	; (12204 <mix_sub_columns+0x414>)
   12188:	5c12      	ldrb	r2, [r2, r0]
   1218a:	404a      	eors	r2, r1
   1218c:	b2d1      	uxtb	r1, r2
   1218e:	2208      	movs	r2, #8
   12190:	18ba      	adds	r2, r7, r2
   12192:	7ad2      	ldrb	r2, [r2, #11]
   12194:	0010      	movs	r0, r2
   12196:	4a1c      	ldr	r2, [pc, #112]	; (12208 <mix_sub_columns+0x418>)
   12198:	5c12      	ldrb	r2, [r2, r0]
   1219a:	404a      	eors	r2, r1
   1219c:	b2d2      	uxtb	r2, r2
   1219e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
   121a0:	687b      	ldr	r3, [r7, #4]
   121a2:	330e      	adds	r3, #14
   121a4:	2208      	movs	r2, #8
   121a6:	18ba      	adds	r2, r7, r2
   121a8:	7b12      	ldrb	r2, [r2, #12]
   121aa:	0011      	movs	r1, r2
   121ac:	4a16      	ldr	r2, [pc, #88]	; (12208 <mix_sub_columns+0x418>)
   121ae:	5c51      	ldrb	r1, [r2, r1]
   121b0:	2208      	movs	r2, #8
   121b2:	18ba      	adds	r2, r7, r2
   121b4:	7852      	ldrb	r2, [r2, #1]
   121b6:	0010      	movs	r0, r2
   121b8:	4a13      	ldr	r2, [pc, #76]	; (12208 <mix_sub_columns+0x418>)
   121ba:	5c12      	ldrb	r2, [r2, r0]
   121bc:	404a      	eors	r2, r1
   121be:	b2d1      	uxtb	r1, r2
   121c0:	2208      	movs	r2, #8
   121c2:	18ba      	adds	r2, r7, r2
   121c4:	7992      	ldrb	r2, [r2, #6]
   121c6:	0010      	movs	r0, r2
   121c8:	4a0d      	ldr	r2, [pc, #52]	; (12200 <mix_sub_columns+0x410>)
   121ca:	5c12      	ldrb	r2, [r2, r0]
   121cc:	404a      	eors	r2, r1
   121ce:	b2d1      	uxtb	r1, r2
   121d0:	2208      	movs	r2, #8
   121d2:	18ba      	adds	r2, r7, r2
   121d4:	7ad2      	ldrb	r2, [r2, #11]
   121d6:	0010      	movs	r0, r2
   121d8:	4a0a      	ldr	r2, [pc, #40]	; (12204 <mix_sub_columns+0x414>)
   121da:	5c12      	ldrb	r2, [r2, r0]
   121dc:	404a      	eors	r2, r1
   121de:	b2d2      	uxtb	r2, r2
   121e0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
   121e2:	687b      	ldr	r3, [r7, #4]
   121e4:	330f      	adds	r3, #15
   121e6:	2208      	movs	r2, #8
   121e8:	18ba      	adds	r2, r7, r2
   121ea:	7b12      	ldrb	r2, [r2, #12]
   121ec:	0011      	movs	r1, r2
   121ee:	4a05      	ldr	r2, [pc, #20]	; (12204 <mix_sub_columns+0x414>)
   121f0:	5c51      	ldrb	r1, [r2, r1]
   121f2:	2208      	movs	r2, #8
   121f4:	18ba      	adds	r2, r7, r2
   121f6:	7852      	ldrb	r2, [r2, #1]
   121f8:	0010      	movs	r0, r2
   121fa:	e007      	b.n	1220c <mix_sub_columns+0x41c>
   121fc:	000118bd 	.word	0x000118bd
   12200:	0001f634 	.word	0x0001f634
   12204:	0001f734 	.word	0x0001f734
   12208:	0001f534 	.word	0x0001f534
   1220c:	4a0c      	ldr	r2, [pc, #48]	; (12240 <mix_sub_columns+0x450>)
   1220e:	5c12      	ldrb	r2, [r2, r0]
   12210:	404a      	eors	r2, r1
   12212:	b2d1      	uxtb	r1, r2
   12214:	2208      	movs	r2, #8
   12216:	18ba      	adds	r2, r7, r2
   12218:	7992      	ldrb	r2, [r2, #6]
   1221a:	0010      	movs	r0, r2
   1221c:	4a08      	ldr	r2, [pc, #32]	; (12240 <mix_sub_columns+0x450>)
   1221e:	5c12      	ldrb	r2, [r2, r0]
   12220:	404a      	eors	r2, r1
   12222:	b2d1      	uxtb	r1, r2
   12224:	2208      	movs	r2, #8
   12226:	18ba      	adds	r2, r7, r2
   12228:	7ad2      	ldrb	r2, [r2, #11]
   1222a:	0010      	movs	r0, r2
   1222c:	4a05      	ldr	r2, [pc, #20]	; (12244 <mix_sub_columns+0x454>)
   1222e:	5c12      	ldrb	r2, [r2, r0]
   12230:	404a      	eors	r2, r1
   12232:	b2d2      	uxtb	r2, r2
   12234:	701a      	strb	r2, [r3, #0]
  }
   12236:	46c0      	nop			; (mov r8, r8)
   12238:	46bd      	mov	sp, r7
   1223a:	b006      	add	sp, #24
   1223c:	bd80      	pop	{r7, pc}
   1223e:	46c0      	nop			; (mov r8, r8)
   12240:	0001f534 	.word	0x0001f534
   12244:	0001f634 	.word	0x0001f634

00012248 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
   12248:	b580      	push	{r7, lr}
   1224a:	b086      	sub	sp, #24
   1224c:	af00      	add	r7, sp, #0
   1224e:	60f8      	str	r0, [r7, #12]
   12250:	607a      	str	r2, [r7, #4]
   12252:	230b      	movs	r3, #11
   12254:	18fb      	adds	r3, r7, r3
   12256:	1c0a      	adds	r2, r1, #0
   12258:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
   1225a:	230b      	movs	r3, #11
   1225c:	18fb      	adds	r3, r7, r3
   1225e:	781b      	ldrb	r3, [r3, #0]
   12260:	2b18      	cmp	r3, #24
   12262:	d009      	beq.n	12278 <aes_set_key+0x30>
   12264:	2b20      	cmp	r3, #32
   12266:	d007      	beq.n	12278 <aes_set_key+0x30>
   12268:	2b10      	cmp	r3, #16
   1226a:	d005      	beq.n	12278 <aes_set_key+0x30>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
   1226c:	687b      	ldr	r3, [r7, #4]
   1226e:	22f0      	movs	r2, #240	; 0xf0
   12270:	2100      	movs	r1, #0
   12272:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
   12274:	23ff      	movs	r3, #255	; 0xff
   12276:	e12b      	b.n	124d0 <aes_set_key+0x288>
        break;
   12278:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
   1227a:	6878      	ldr	r0, [r7, #4]
   1227c:	230b      	movs	r3, #11
   1227e:	18fb      	adds	r3, r7, r3
   12280:	781a      	ldrb	r2, [r3, #0]
   12282:	68fb      	ldr	r3, [r7, #12]
   12284:	0019      	movs	r1, r3
   12286:	4b94      	ldr	r3, [pc, #592]	; (124d8 <aes_set_key+0x290>)
   12288:	4798      	blx	r3
    hi = (keylen + 28) << 2;
   1228a:	230b      	movs	r3, #11
   1228c:	18fb      	adds	r3, r7, r3
   1228e:	781b      	ldrb	r3, [r3, #0]
   12290:	331c      	adds	r3, #28
   12292:	b2da      	uxtb	r2, r3
   12294:	2311      	movs	r3, #17
   12296:	18fb      	adds	r3, r7, r3
   12298:	0092      	lsls	r2, r2, #2
   1229a:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
   1229c:	2311      	movs	r3, #17
   1229e:	18fb      	adds	r3, r7, r3
   122a0:	781b      	ldrb	r3, [r3, #0]
   122a2:	091b      	lsrs	r3, r3, #4
   122a4:	b2db      	uxtb	r3, r3
   122a6:	3b01      	subs	r3, #1
   122a8:	b2d9      	uxtb	r1, r3
   122aa:	687b      	ldr	r3, [r7, #4]
   122ac:	22f0      	movs	r2, #240	; 0xf0
   122ae:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   122b0:	2317      	movs	r3, #23
   122b2:	18fb      	adds	r3, r7, r3
   122b4:	220b      	movs	r2, #11
   122b6:	18ba      	adds	r2, r7, r2
   122b8:	7812      	ldrb	r2, [r2, #0]
   122ba:	701a      	strb	r2, [r3, #0]
   122bc:	2316      	movs	r3, #22
   122be:	18fb      	adds	r3, r7, r3
   122c0:	2201      	movs	r2, #1
   122c2:	701a      	strb	r2, [r3, #0]
   122c4:	e0fa      	b.n	124bc <aes_set_key+0x274>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
   122c6:	2317      	movs	r3, #23
   122c8:	18fb      	adds	r3, r7, r3
   122ca:	781b      	ldrb	r3, [r3, #0]
   122cc:	1f1a      	subs	r2, r3, #4
   122ce:	2315      	movs	r3, #21
   122d0:	18fb      	adds	r3, r7, r3
   122d2:	6879      	ldr	r1, [r7, #4]
   122d4:	5c8a      	ldrb	r2, [r1, r2]
   122d6:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
   122d8:	2317      	movs	r3, #23
   122da:	18fb      	adds	r3, r7, r3
   122dc:	781b      	ldrb	r3, [r3, #0]
   122de:	1eda      	subs	r2, r3, #3
   122e0:	2314      	movs	r3, #20
   122e2:	18fb      	adds	r3, r7, r3
   122e4:	6879      	ldr	r1, [r7, #4]
   122e6:	5c8a      	ldrb	r2, [r1, r2]
   122e8:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
   122ea:	2317      	movs	r3, #23
   122ec:	18fb      	adds	r3, r7, r3
   122ee:	781b      	ldrb	r3, [r3, #0]
   122f0:	1e9a      	subs	r2, r3, #2
   122f2:	2313      	movs	r3, #19
   122f4:	18fb      	adds	r3, r7, r3
   122f6:	6879      	ldr	r1, [r7, #4]
   122f8:	5c8a      	ldrb	r2, [r1, r2]
   122fa:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
   122fc:	2317      	movs	r3, #23
   122fe:	18fb      	adds	r3, r7, r3
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	1e5a      	subs	r2, r3, #1
   12304:	2312      	movs	r3, #18
   12306:	18fb      	adds	r3, r7, r3
   12308:	6879      	ldr	r1, [r7, #4]
   1230a:	5c8a      	ldrb	r2, [r1, r2]
   1230c:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
   1230e:	2317      	movs	r3, #23
   12310:	18fa      	adds	r2, r7, r3
   12312:	230b      	movs	r3, #11
   12314:	18fb      	adds	r3, r7, r3
   12316:	7812      	ldrb	r2, [r2, #0]
   12318:	7819      	ldrb	r1, [r3, #0]
   1231a:	4b70      	ldr	r3, [pc, #448]	; (124dc <aes_set_key+0x294>)
   1231c:	0010      	movs	r0, r2
   1231e:	4798      	blx	r3
   12320:	000b      	movs	r3, r1
   12322:	b2db      	uxtb	r3, r3
   12324:	2b00      	cmp	r3, #0
   12326:	d144      	bne.n	123b2 <aes_set_key+0x16a>
        {
            tt = t0;
   12328:	2310      	movs	r3, #16
   1232a:	18fb      	adds	r3, r7, r3
   1232c:	2215      	movs	r2, #21
   1232e:	18ba      	adds	r2, r7, r2
   12330:	7812      	ldrb	r2, [r2, #0]
   12332:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
   12334:	2314      	movs	r3, #20
   12336:	18fb      	adds	r3, r7, r3
   12338:	781b      	ldrb	r3, [r3, #0]
   1233a:	4a69      	ldr	r2, [pc, #420]	; (124e0 <aes_set_key+0x298>)
   1233c:	5cd1      	ldrb	r1, [r2, r3]
   1233e:	2315      	movs	r3, #21
   12340:	18fb      	adds	r3, r7, r3
   12342:	2216      	movs	r2, #22
   12344:	18ba      	adds	r2, r7, r2
   12346:	7812      	ldrb	r2, [r2, #0]
   12348:	404a      	eors	r2, r1
   1234a:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
   1234c:	2313      	movs	r3, #19
   1234e:	18fb      	adds	r3, r7, r3
   12350:	781a      	ldrb	r2, [r3, #0]
   12352:	2314      	movs	r3, #20
   12354:	18fb      	adds	r3, r7, r3
   12356:	4962      	ldr	r1, [pc, #392]	; (124e0 <aes_set_key+0x298>)
   12358:	5c8a      	ldrb	r2, [r1, r2]
   1235a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
   1235c:	2312      	movs	r3, #18
   1235e:	18fb      	adds	r3, r7, r3
   12360:	781a      	ldrb	r2, [r3, #0]
   12362:	2313      	movs	r3, #19
   12364:	18fb      	adds	r3, r7, r3
   12366:	495e      	ldr	r1, [pc, #376]	; (124e0 <aes_set_key+0x298>)
   12368:	5c8a      	ldrb	r2, [r1, r2]
   1236a:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
   1236c:	2310      	movs	r3, #16
   1236e:	18fb      	adds	r3, r7, r3
   12370:	781a      	ldrb	r2, [r3, #0]
   12372:	2312      	movs	r3, #18
   12374:	18fb      	adds	r3, r7, r3
   12376:	495a      	ldr	r1, [pc, #360]	; (124e0 <aes_set_key+0x298>)
   12378:	5c8a      	ldrb	r2, [r1, r2]
   1237a:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
   1237c:	2316      	movs	r3, #22
   1237e:	18fb      	adds	r3, r7, r3
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	005b      	lsls	r3, r3, #1
   12384:	b25a      	sxtb	r2, r3
   12386:	2316      	movs	r3, #22
   12388:	18fb      	adds	r3, r7, r3
   1238a:	781b      	ldrb	r3, [r3, #0]
   1238c:	09db      	lsrs	r3, r3, #7
   1238e:	b2db      	uxtb	r3, r3
   12390:	1c19      	adds	r1, r3, #0
   12392:	1c0b      	adds	r3, r1, #0
   12394:	18db      	adds	r3, r3, r3
   12396:	185b      	adds	r3, r3, r1
   12398:	1c19      	adds	r1, r3, #0
   1239a:	00c8      	lsls	r0, r1, #3
   1239c:	1c19      	adds	r1, r3, #0
   1239e:	1c03      	adds	r3, r0, #0
   123a0:	18cb      	adds	r3, r1, r3
   123a2:	b2db      	uxtb	r3, r3
   123a4:	b25b      	sxtb	r3, r3
   123a6:	4053      	eors	r3, r2
   123a8:	b25a      	sxtb	r2, r3
   123aa:	2316      	movs	r3, #22
   123ac:	18fb      	adds	r3, r7, r3
   123ae:	701a      	strb	r2, [r3, #0]
   123b0:	e031      	b.n	12416 <aes_set_key+0x1ce>
        }
        else if( keylen > 24 && cc % keylen == 16 )
   123b2:	230b      	movs	r3, #11
   123b4:	18fb      	adds	r3, r7, r3
   123b6:	781b      	ldrb	r3, [r3, #0]
   123b8:	2b18      	cmp	r3, #24
   123ba:	d92c      	bls.n	12416 <aes_set_key+0x1ce>
   123bc:	2317      	movs	r3, #23
   123be:	18fa      	adds	r2, r7, r3
   123c0:	230b      	movs	r3, #11
   123c2:	18fb      	adds	r3, r7, r3
   123c4:	7812      	ldrb	r2, [r2, #0]
   123c6:	7819      	ldrb	r1, [r3, #0]
   123c8:	4b44      	ldr	r3, [pc, #272]	; (124dc <aes_set_key+0x294>)
   123ca:	0010      	movs	r0, r2
   123cc:	4798      	blx	r3
   123ce:	000b      	movs	r3, r1
   123d0:	b2db      	uxtb	r3, r3
   123d2:	2b10      	cmp	r3, #16
   123d4:	d11f      	bne.n	12416 <aes_set_key+0x1ce>
        {
            t0 = s_box(t0);
   123d6:	2315      	movs	r3, #21
   123d8:	18fb      	adds	r3, r7, r3
   123da:	781a      	ldrb	r2, [r3, #0]
   123dc:	2315      	movs	r3, #21
   123de:	18fb      	adds	r3, r7, r3
   123e0:	493f      	ldr	r1, [pc, #252]	; (124e0 <aes_set_key+0x298>)
   123e2:	5c8a      	ldrb	r2, [r1, r2]
   123e4:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
   123e6:	2314      	movs	r3, #20
   123e8:	18fb      	adds	r3, r7, r3
   123ea:	781a      	ldrb	r2, [r3, #0]
   123ec:	2314      	movs	r3, #20
   123ee:	18fb      	adds	r3, r7, r3
   123f0:	493b      	ldr	r1, [pc, #236]	; (124e0 <aes_set_key+0x298>)
   123f2:	5c8a      	ldrb	r2, [r1, r2]
   123f4:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
   123f6:	2313      	movs	r3, #19
   123f8:	18fb      	adds	r3, r7, r3
   123fa:	781a      	ldrb	r2, [r3, #0]
   123fc:	2313      	movs	r3, #19
   123fe:	18fb      	adds	r3, r7, r3
   12400:	4937      	ldr	r1, [pc, #220]	; (124e0 <aes_set_key+0x298>)
   12402:	5c8a      	ldrb	r2, [r1, r2]
   12404:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
   12406:	2312      	movs	r3, #18
   12408:	18fb      	adds	r3, r7, r3
   1240a:	781a      	ldrb	r2, [r3, #0]
   1240c:	2312      	movs	r3, #18
   1240e:	18fb      	adds	r3, r7, r3
   12410:	4933      	ldr	r1, [pc, #204]	; (124e0 <aes_set_key+0x298>)
   12412:	5c8a      	ldrb	r2, [r1, r2]
   12414:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
   12416:	2310      	movs	r3, #16
   12418:	18fb      	adds	r3, r7, r3
   1241a:	2217      	movs	r2, #23
   1241c:	18b9      	adds	r1, r7, r2
   1241e:	220b      	movs	r2, #11
   12420:	18ba      	adds	r2, r7, r2
   12422:	7809      	ldrb	r1, [r1, #0]
   12424:	7812      	ldrb	r2, [r2, #0]
   12426:	1a8a      	subs	r2, r1, r2
   12428:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   1242a:	2317      	movs	r3, #23
   1242c:	18fb      	adds	r3, r7, r3
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	2210      	movs	r2, #16
   12432:	18ba      	adds	r2, r7, r2
   12434:	7812      	ldrb	r2, [r2, #0]
   12436:	6879      	ldr	r1, [r7, #4]
   12438:	5c89      	ldrb	r1, [r1, r2]
   1243a:	2215      	movs	r2, #21
   1243c:	18ba      	adds	r2, r7, r2
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	404a      	eors	r2, r1
   12442:	b2d1      	uxtb	r1, r2
   12444:	687a      	ldr	r2, [r7, #4]
   12446:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   12448:	2317      	movs	r3, #23
   1244a:	18fb      	adds	r3, r7, r3
   1244c:	781b      	ldrb	r3, [r3, #0]
   1244e:	3301      	adds	r3, #1
   12450:	2210      	movs	r2, #16
   12452:	18ba      	adds	r2, r7, r2
   12454:	7812      	ldrb	r2, [r2, #0]
   12456:	3201      	adds	r2, #1
   12458:	6879      	ldr	r1, [r7, #4]
   1245a:	5c89      	ldrb	r1, [r1, r2]
   1245c:	2214      	movs	r2, #20
   1245e:	18ba      	adds	r2, r7, r2
   12460:	7812      	ldrb	r2, [r2, #0]
   12462:	404a      	eors	r2, r1
   12464:	b2d1      	uxtb	r1, r2
   12466:	687a      	ldr	r2, [r7, #4]
   12468:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   1246a:	2317      	movs	r3, #23
   1246c:	18fb      	adds	r3, r7, r3
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	3302      	adds	r3, #2
   12472:	2210      	movs	r2, #16
   12474:	18ba      	adds	r2, r7, r2
   12476:	7812      	ldrb	r2, [r2, #0]
   12478:	3202      	adds	r2, #2
   1247a:	6879      	ldr	r1, [r7, #4]
   1247c:	5c89      	ldrb	r1, [r1, r2]
   1247e:	2213      	movs	r2, #19
   12480:	18ba      	adds	r2, r7, r2
   12482:	7812      	ldrb	r2, [r2, #0]
   12484:	404a      	eors	r2, r1
   12486:	b2d1      	uxtb	r1, r2
   12488:	687a      	ldr	r2, [r7, #4]
   1248a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   1248c:	2317      	movs	r3, #23
   1248e:	18fb      	adds	r3, r7, r3
   12490:	781b      	ldrb	r3, [r3, #0]
   12492:	3303      	adds	r3, #3
   12494:	2210      	movs	r2, #16
   12496:	18ba      	adds	r2, r7, r2
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	3203      	adds	r2, #3
   1249c:	6879      	ldr	r1, [r7, #4]
   1249e:	5c89      	ldrb	r1, [r1, r2]
   124a0:	2212      	movs	r2, #18
   124a2:	18ba      	adds	r2, r7, r2
   124a4:	7812      	ldrb	r2, [r2, #0]
   124a6:	404a      	eors	r2, r1
   124a8:	b2d1      	uxtb	r1, r2
   124aa:	687a      	ldr	r2, [r7, #4]
   124ac:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   124ae:	2317      	movs	r3, #23
   124b0:	18fb      	adds	r3, r7, r3
   124b2:	2217      	movs	r2, #23
   124b4:	18ba      	adds	r2, r7, r2
   124b6:	7812      	ldrb	r2, [r2, #0]
   124b8:	3204      	adds	r2, #4
   124ba:	701a      	strb	r2, [r3, #0]
   124bc:	2317      	movs	r3, #23
   124be:	18fa      	adds	r2, r7, r3
   124c0:	2311      	movs	r3, #17
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	7812      	ldrb	r2, [r2, #0]
   124c6:	781b      	ldrb	r3, [r3, #0]
   124c8:	429a      	cmp	r2, r3
   124ca:	d200      	bcs.n	124ce <aes_set_key+0x286>
   124cc:	e6fb      	b.n	122c6 <aes_set_key+0x7e>
    }
    return 0;
   124ce:	2300      	movs	r3, #0
}
   124d0:	0018      	movs	r0, r3
   124d2:	46bd      	mov	sp, r7
   124d4:	b006      	add	sp, #24
   124d6:	bd80      	pop	{r7, pc}
   124d8:	0001196d 	.word	0x0001196d
   124dc:	00017c59 	.word	0x00017c59
   124e0:	0001f534 	.word	0x0001f534

000124e4 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
   124e4:	b580      	push	{r7, lr}
   124e6:	b08a      	sub	sp, #40	; 0x28
   124e8:	af00      	add	r7, sp, #0
   124ea:	60f8      	str	r0, [r7, #12]
   124ec:	60b9      	str	r1, [r7, #8]
   124ee:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
   124f0:	687b      	ldr	r3, [r7, #4]
   124f2:	22f0      	movs	r2, #240	; 0xf0
   124f4:	5c9b      	ldrb	r3, [r3, r2]
   124f6:	2b00      	cmp	r3, #0
   124f8:	d03e      	beq.n	12578 <aes_encrypt+0x94>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
   124fa:	687a      	ldr	r2, [r7, #4]
   124fc:	68f9      	ldr	r1, [r7, #12]
   124fe:	2314      	movs	r3, #20
   12500:	18fb      	adds	r3, r7, r3
   12502:	0018      	movs	r0, r3
   12504:	4b1f      	ldr	r3, [pc, #124]	; (12584 <aes_encrypt+0xa0>)
   12506:	4798      	blx	r3

        for( r = 1 ; r < ctx->rnd ; ++r )
   12508:	2327      	movs	r3, #39	; 0x27
   1250a:	18fb      	adds	r3, r7, r3
   1250c:	2201      	movs	r2, #1
   1250e:	701a      	strb	r2, [r3, #0]
   12510:	e017      	b.n	12542 <aes_encrypt+0x5e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
   12512:	2314      	movs	r3, #20
   12514:	18fb      	adds	r3, r7, r3
   12516:	0018      	movs	r0, r3
   12518:	4b1b      	ldr	r3, [pc, #108]	; (12588 <aes_encrypt+0xa4>)
   1251a:	4798      	blx	r3
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   1251c:	687b      	ldr	r3, [r7, #4]
   1251e:	2227      	movs	r2, #39	; 0x27
   12520:	18ba      	adds	r2, r7, r2
   12522:	7812      	ldrb	r2, [r2, #0]
   12524:	0112      	lsls	r2, r2, #4
   12526:	189a      	adds	r2, r3, r2
   12528:	2314      	movs	r3, #20
   1252a:	18fb      	adds	r3, r7, r3
   1252c:	0011      	movs	r1, r2
   1252e:	0018      	movs	r0, r3
   12530:	4b16      	ldr	r3, [pc, #88]	; (1258c <aes_encrypt+0xa8>)
   12532:	4798      	blx	r3
        for( r = 1 ; r < ctx->rnd ; ++r )
   12534:	2327      	movs	r3, #39	; 0x27
   12536:	18fb      	adds	r3, r7, r3
   12538:	2227      	movs	r2, #39	; 0x27
   1253a:	18ba      	adds	r2, r7, r2
   1253c:	7812      	ldrb	r2, [r2, #0]
   1253e:	3201      	adds	r2, #1
   12540:	701a      	strb	r2, [r3, #0]
   12542:	687b      	ldr	r3, [r7, #4]
   12544:	22f0      	movs	r2, #240	; 0xf0
   12546:	5c9b      	ldrb	r3, [r3, r2]
   12548:	2227      	movs	r2, #39	; 0x27
   1254a:	18ba      	adds	r2, r7, r2
   1254c:	7812      	ldrb	r2, [r2, #0]
   1254e:	429a      	cmp	r2, r3
   12550:	d3df      	bcc.n	12512 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
   12552:	2314      	movs	r3, #20
   12554:	18fb      	adds	r3, r7, r3
   12556:	0018      	movs	r0, r3
   12558:	4b0d      	ldr	r3, [pc, #52]	; (12590 <aes_encrypt+0xac>)
   1255a:	4798      	blx	r3
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   1255c:	687b      	ldr	r3, [r7, #4]
   1255e:	2227      	movs	r2, #39	; 0x27
   12560:	18ba      	adds	r2, r7, r2
   12562:	7812      	ldrb	r2, [r2, #0]
   12564:	0112      	lsls	r2, r2, #4
   12566:	189a      	adds	r2, r3, r2
   12568:	2314      	movs	r3, #20
   1256a:	18f9      	adds	r1, r7, r3
   1256c:	68bb      	ldr	r3, [r7, #8]
   1256e:	0018      	movs	r0, r3
   12570:	4b04      	ldr	r3, [pc, #16]	; (12584 <aes_encrypt+0xa0>)
   12572:	4798      	blx	r3
    }
    else
        return ( uint8_t )-1;
    return 0;
   12574:	2300      	movs	r3, #0
   12576:	e000      	b.n	1257a <aes_encrypt+0x96>
        return ( uint8_t )-1;
   12578:	23ff      	movs	r3, #255	; 0xff
}
   1257a:	0018      	movs	r0, r3
   1257c:	46bd      	mov	sp, r7
   1257e:	b00a      	add	sp, #40	; 0x28
   12580:	bd80      	pop	{r7, pc}
   12582:	46c0      	nop			; (mov r8, r8)
   12584:	00011b0f 	.word	0x00011b0f
   12588:	00011df1 	.word	0x00011df1
   1258c:	00011c7d 	.word	0x00011c7d
   12590:	00011ca1 	.word	0x00011ca1

00012594 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
   12594:	b580      	push	{r7, lr}
   12596:	b082      	sub	sp, #8
   12598:	af00      	add	r7, sp, #0
   1259a:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
   1259c:	687b      	ldr	r3, [r7, #4]
   1259e:	33f1      	adds	r3, #241	; 0xf1
   125a0:	2210      	movs	r2, #16
   125a2:	2100      	movs	r1, #0
   125a4:	0018      	movs	r0, r3
   125a6:	4b08      	ldr	r3, [pc, #32]	; (125c8 <AES_CMAC_Init+0x34>)
   125a8:	4798      	blx	r3
            ctx->M_n = 0;
   125aa:	687a      	ldr	r2, [r7, #4]
   125ac:	238a      	movs	r3, #138	; 0x8a
   125ae:	005b      	lsls	r3, r3, #1
   125b0:	2100      	movs	r1, #0
   125b2:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
   125b4:	687b      	ldr	r3, [r7, #4]
   125b6:	22f0      	movs	r2, #240	; 0xf0
   125b8:	2100      	movs	r1, #0
   125ba:	0018      	movs	r0, r3
   125bc:	4b02      	ldr	r3, [pc, #8]	; (125c8 <AES_CMAC_Init+0x34>)
   125be:	4798      	blx	r3
}
   125c0:	46c0      	nop			; (mov r8, r8)
   125c2:	46bd      	mov	sp, r7
   125c4:	b002      	add	sp, #8
   125c6:	bd80      	pop	{r7, pc}
   125c8:	000029cd 	.word	0x000029cd

000125cc <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
   125cc:	b580      	push	{r7, lr}
   125ce:	b082      	sub	sp, #8
   125d0:	af00      	add	r7, sp, #0
   125d2:	6078      	str	r0, [r7, #4]
   125d4:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
   125d6:	687a      	ldr	r2, [r7, #4]
   125d8:	683b      	ldr	r3, [r7, #0]
   125da:	2110      	movs	r1, #16
   125dc:	0018      	movs	r0, r3
   125de:	4b03      	ldr	r3, [pc, #12]	; (125ec <AES_CMAC_SetKey+0x20>)
   125e0:	4798      	blx	r3
}
   125e2:	46c0      	nop			; (mov r8, r8)
   125e4:	46bd      	mov	sp, r7
   125e6:	b002      	add	sp, #8
   125e8:	bd80      	pop	{r7, pc}
   125ea:	46c0      	nop			; (mov r8, r8)
   125ec:	00012249 	.word	0x00012249

000125f0 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
   125f0:	b580      	push	{r7, lr}
   125f2:	b08c      	sub	sp, #48	; 0x30
   125f4:	af00      	add	r7, sp, #0
   125f6:	60f8      	str	r0, [r7, #12]
   125f8:	60b9      	str	r1, [r7, #8]
   125fa:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
   125fc:	68fa      	ldr	r2, [r7, #12]
   125fe:	238a      	movs	r3, #138	; 0x8a
   12600:	005b      	lsls	r3, r3, #1
   12602:	58d3      	ldr	r3, [r2, r3]
   12604:	2b00      	cmp	r3, #0
   12606:	d100      	bne.n	1260a <AES_CMAC_Update+0x1a>
   12608:	e09a      	b.n	12740 <AES_CMAC_Update+0x150>
                  mlen = MIN(16 - ctx->M_n, len);
   1260a:	68fa      	ldr	r2, [r7, #12]
   1260c:	238a      	movs	r3, #138	; 0x8a
   1260e:	005b      	lsls	r3, r3, #1
   12610:	58d3      	ldr	r3, [r2, r3]
   12612:	2210      	movs	r2, #16
   12614:	1ad3      	subs	r3, r2, r3
   12616:	687a      	ldr	r2, [r7, #4]
   12618:	4293      	cmp	r3, r2
   1261a:	d900      	bls.n	1261e <AES_CMAC_Update+0x2e>
   1261c:	0013      	movs	r3, r2
   1261e:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
   12620:	68fb      	ldr	r3, [r7, #12]
   12622:	1c9a      	adds	r2, r3, #2
   12624:	32ff      	adds	r2, #255	; 0xff
   12626:	68f9      	ldr	r1, [r7, #12]
   12628:	238a      	movs	r3, #138	; 0x8a
   1262a:	005b      	lsls	r3, r3, #1
   1262c:	58cb      	ldr	r3, [r1, r3]
   1262e:	18d3      	adds	r3, r2, r3
   12630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12632:	b292      	uxth	r2, r2
   12634:	68b9      	ldr	r1, [r7, #8]
   12636:	0018      	movs	r0, r3
   12638:	4b4c      	ldr	r3, [pc, #304]	; (1276c <AES_CMAC_Update+0x17c>)
   1263a:	4798      	blx	r3
                    ctx->M_n += mlen;
   1263c:	68fa      	ldr	r2, [r7, #12]
   1263e:	238a      	movs	r3, #138	; 0x8a
   12640:	005b      	lsls	r3, r3, #1
   12642:	58d2      	ldr	r2, [r2, r3]
   12644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12646:	18d1      	adds	r1, r2, r3
   12648:	68fa      	ldr	r2, [r7, #12]
   1264a:	238a      	movs	r3, #138	; 0x8a
   1264c:	005b      	lsls	r3, r3, #1
   1264e:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
   12650:	68fa      	ldr	r2, [r7, #12]
   12652:	238a      	movs	r3, #138	; 0x8a
   12654:	005b      	lsls	r3, r3, #1
   12656:	58d3      	ldr	r3, [r2, r3]
   12658:	2b0f      	cmp	r3, #15
   1265a:	d800      	bhi.n	1265e <AES_CMAC_Update+0x6e>
   1265c:	e082      	b.n	12764 <AES_CMAC_Update+0x174>
   1265e:	687a      	ldr	r2, [r7, #4]
   12660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12662:	429a      	cmp	r2, r3
   12664:	d100      	bne.n	12668 <AES_CMAC_Update+0x78>
   12666:	e07d      	b.n	12764 <AES_CMAC_Update+0x174>
                            return;
                   XOR(ctx->M_last, ctx->X);
   12668:	2300      	movs	r3, #0
   1266a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1266c:	e018      	b.n	126a0 <AES_CMAC_Update+0xb0>
   1266e:	68fa      	ldr	r2, [r7, #12]
   12670:	21f1      	movs	r1, #241	; 0xf1
   12672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12674:	18d3      	adds	r3, r2, r3
   12676:	185b      	adds	r3, r3, r1
   12678:	781a      	ldrb	r2, [r3, #0]
   1267a:	68f8      	ldr	r0, [r7, #12]
   1267c:	2302      	movs	r3, #2
   1267e:	33ff      	adds	r3, #255	; 0xff
   12680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12682:	1841      	adds	r1, r0, r1
   12684:	18cb      	adds	r3, r1, r3
   12686:	781b      	ldrb	r3, [r3, #0]
   12688:	4053      	eors	r3, r2
   1268a:	b2d8      	uxtb	r0, r3
   1268c:	68fa      	ldr	r2, [r7, #12]
   1268e:	21f1      	movs	r1, #241	; 0xf1
   12690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12692:	18d3      	adds	r3, r2, r3
   12694:	185b      	adds	r3, r3, r1
   12696:	1c02      	adds	r2, r0, #0
   12698:	701a      	strb	r2, [r3, #0]
   1269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1269c:	3301      	adds	r3, #1
   1269e:	62fb      	str	r3, [r7, #44]	; 0x2c
   126a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   126a2:	2b0f      	cmp	r3, #15
   126a4:	dde3      	ble.n	1266e <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	33f1      	adds	r3, #241	; 0xf1
   126aa:	0018      	movs	r0, r3
   126ac:	68fb      	ldr	r3, [r7, #12]
   126ae:	33f1      	adds	r3, #241	; 0xf1
   126b0:	68fa      	ldr	r2, [r7, #12]
   126b2:	0019      	movs	r1, r3
   126b4:	4b2e      	ldr	r3, [pc, #184]	; (12770 <AES_CMAC_Update+0x180>)
   126b6:	4798      	blx	r3
                    data += mlen;
   126b8:	68ba      	ldr	r2, [r7, #8]
   126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126bc:	18d3      	adds	r3, r2, r3
   126be:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
   126c0:	687a      	ldr	r2, [r7, #4]
   126c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126c4:	1ad3      	subs	r3, r2, r3
   126c6:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
   126c8:	e03a      	b.n	12740 <AES_CMAC_Update+0x150>

                    XOR(data, ctx->X);
   126ca:	2300      	movs	r3, #0
   126cc:	62bb      	str	r3, [r7, #40]	; 0x28
   126ce:	e015      	b.n	126fc <AES_CMAC_Update+0x10c>
   126d0:	68fa      	ldr	r2, [r7, #12]
   126d2:	21f1      	movs	r1, #241	; 0xf1
   126d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   126d6:	18d3      	adds	r3, r2, r3
   126d8:	185b      	adds	r3, r3, r1
   126da:	781a      	ldrb	r2, [r3, #0]
   126dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   126de:	68b9      	ldr	r1, [r7, #8]
   126e0:	18cb      	adds	r3, r1, r3
   126e2:	781b      	ldrb	r3, [r3, #0]
   126e4:	4053      	eors	r3, r2
   126e6:	b2d8      	uxtb	r0, r3
   126e8:	68fa      	ldr	r2, [r7, #12]
   126ea:	21f1      	movs	r1, #241	; 0xf1
   126ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   126ee:	18d3      	adds	r3, r2, r3
   126f0:	185b      	adds	r3, r3, r1
   126f2:	1c02      	adds	r2, r0, #0
   126f4:	701a      	strb	r2, [r3, #0]
   126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   126f8:	3301      	adds	r3, #1
   126fa:	62bb      	str	r3, [r7, #40]	; 0x28
   126fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   126fe:	2b0f      	cmp	r3, #15
   12700:	dde6      	ble.n	126d0 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
   12702:	68fb      	ldr	r3, [r7, #12]
   12704:	33f1      	adds	r3, #241	; 0xf1
   12706:	0019      	movs	r1, r3
   12708:	2314      	movs	r3, #20
   1270a:	18fb      	adds	r3, r7, r3
   1270c:	2210      	movs	r2, #16
   1270e:	0018      	movs	r0, r3
   12710:	4b16      	ldr	r3, [pc, #88]	; (1276c <AES_CMAC_Update+0x17c>)
   12712:	4798      	blx	r3
            aes_encrypt( in, in, &ctx->rijndael);
   12714:	68fa      	ldr	r2, [r7, #12]
   12716:	2314      	movs	r3, #20
   12718:	18f9      	adds	r1, r7, r3
   1271a:	2314      	movs	r3, #20
   1271c:	18fb      	adds	r3, r7, r3
   1271e:	0018      	movs	r0, r3
   12720:	4b13      	ldr	r3, [pc, #76]	; (12770 <AES_CMAC_Update+0x180>)
   12722:	4798      	blx	r3
                    memcpy1(&ctx->X[0], in, 16);
   12724:	68fb      	ldr	r3, [r7, #12]
   12726:	33f1      	adds	r3, #241	; 0xf1
   12728:	2214      	movs	r2, #20
   1272a:	18b9      	adds	r1, r7, r2
   1272c:	2210      	movs	r2, #16
   1272e:	0018      	movs	r0, r3
   12730:	4b0e      	ldr	r3, [pc, #56]	; (1276c <AES_CMAC_Update+0x17c>)
   12732:	4798      	blx	r3

                    data += 16;
   12734:	68bb      	ldr	r3, [r7, #8]
   12736:	3310      	adds	r3, #16
   12738:	60bb      	str	r3, [r7, #8]
                    len -= 16;
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	3b10      	subs	r3, #16
   1273e:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
   12740:	687b      	ldr	r3, [r7, #4]
   12742:	2b10      	cmp	r3, #16
   12744:	d8c1      	bhi.n	126ca <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
   12746:	68fb      	ldr	r3, [r7, #12]
   12748:	3302      	adds	r3, #2
   1274a:	33ff      	adds	r3, #255	; 0xff
   1274c:	687a      	ldr	r2, [r7, #4]
   1274e:	b292      	uxth	r2, r2
   12750:	68b9      	ldr	r1, [r7, #8]
   12752:	0018      	movs	r0, r3
   12754:	4b05      	ldr	r3, [pc, #20]	; (1276c <AES_CMAC_Update+0x17c>)
   12756:	4798      	blx	r3
            ctx->M_n = len;
   12758:	68fa      	ldr	r2, [r7, #12]
   1275a:	238a      	movs	r3, #138	; 0x8a
   1275c:	005b      	lsls	r3, r3, #1
   1275e:	6879      	ldr	r1, [r7, #4]
   12760:	50d1      	str	r1, [r2, r3]
   12762:	e000      	b.n	12766 <AES_CMAC_Update+0x176>
                            return;
   12764:	46c0      	nop			; (mov r8, r8)
}
   12766:	46bd      	mov	sp, r7
   12768:	b00c      	add	sp, #48	; 0x30
   1276a:	bd80      	pop	{r7, pc}
   1276c:	00002955 	.word	0x00002955
   12770:	000124e5 	.word	0x000124e5

00012774 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
   12774:	b580      	push	{r7, lr}
   12776:	b092      	sub	sp, #72	; 0x48
   12778:	af00      	add	r7, sp, #0
   1277a:	6078      	str	r0, [r7, #4]
   1277c:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
   1277e:	231c      	movs	r3, #28
   12780:	18fb      	adds	r3, r7, r3
   12782:	2210      	movs	r2, #16
   12784:	2100      	movs	r1, #0
   12786:	0018      	movs	r0, r3
   12788:	4bba      	ldr	r3, [pc, #744]	; (12a74 <AES_CMAC_Final+0x300>)
   1278a:	4798      	blx	r3

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
   1278c:	683a      	ldr	r2, [r7, #0]
   1278e:	231c      	movs	r3, #28
   12790:	18f9      	adds	r1, r7, r3
   12792:	231c      	movs	r3, #28
   12794:	18fb      	adds	r3, r7, r3
   12796:	0018      	movs	r0, r3
   12798:	4bb7      	ldr	r3, [pc, #732]	; (12a78 <AES_CMAC_Final+0x304>)
   1279a:	4798      	blx	r3

            if (K[0] & 0x80) {
   1279c:	231c      	movs	r3, #28
   1279e:	18fb      	adds	r3, r7, r3
   127a0:	781b      	ldrb	r3, [r3, #0]
   127a2:	b25b      	sxtb	r3, r3
   127a4:	2b00      	cmp	r3, #0
   127a6:	da33      	bge.n	12810 <AES_CMAC_Final+0x9c>
                    LSHIFT(K, K);
   127a8:	2300      	movs	r3, #0
   127aa:	647b      	str	r3, [r7, #68]	; 0x44
   127ac:	e01a      	b.n	127e4 <AES_CMAC_Final+0x70>
   127ae:	231c      	movs	r3, #28
   127b0:	18fa      	adds	r2, r7, r3
   127b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   127b4:	18d3      	adds	r3, r2, r3
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	005b      	lsls	r3, r3, #1
   127ba:	b25a      	sxtb	r2, r3
   127bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   127be:	3301      	adds	r3, #1
   127c0:	211c      	movs	r1, #28
   127c2:	1879      	adds	r1, r7, r1
   127c4:	5ccb      	ldrb	r3, [r1, r3]
   127c6:	09db      	lsrs	r3, r3, #7
   127c8:	b2db      	uxtb	r3, r3
   127ca:	b25b      	sxtb	r3, r3
   127cc:	4313      	orrs	r3, r2
   127ce:	b25b      	sxtb	r3, r3
   127d0:	b2d9      	uxtb	r1, r3
   127d2:	231c      	movs	r3, #28
   127d4:	18fa      	adds	r2, r7, r3
   127d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   127d8:	18d3      	adds	r3, r2, r3
   127da:	1c0a      	adds	r2, r1, #0
   127dc:	701a      	strb	r2, [r3, #0]
   127de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   127e0:	3301      	adds	r3, #1
   127e2:	647b      	str	r3, [r7, #68]	; 0x44
   127e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   127e6:	2b0e      	cmp	r3, #14
   127e8:	dde1      	ble.n	127ae <AES_CMAC_Final+0x3a>
   127ea:	231c      	movs	r3, #28
   127ec:	18fb      	adds	r3, r7, r3
   127ee:	7bdb      	ldrb	r3, [r3, #15]
   127f0:	18db      	adds	r3, r3, r3
   127f2:	b2da      	uxtb	r2, r3
   127f4:	231c      	movs	r3, #28
   127f6:	18fb      	adds	r3, r7, r3
   127f8:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
   127fa:	231c      	movs	r3, #28
   127fc:	18fb      	adds	r3, r7, r3
   127fe:	7bdb      	ldrb	r3, [r3, #15]
   12800:	2279      	movs	r2, #121	; 0x79
   12802:	4252      	negs	r2, r2
   12804:	4053      	eors	r3, r2
   12806:	b2da      	uxtb	r2, r3
   12808:	231c      	movs	r3, #28
   1280a:	18fb      	adds	r3, r7, r3
   1280c:	73da      	strb	r2, [r3, #15]
   1280e:	e028      	b.n	12862 <AES_CMAC_Final+0xee>
            } else
                    LSHIFT(K, K);
   12810:	2300      	movs	r3, #0
   12812:	643b      	str	r3, [r7, #64]	; 0x40
   12814:	e01a      	b.n	1284c <AES_CMAC_Final+0xd8>
   12816:	231c      	movs	r3, #28
   12818:	18fa      	adds	r2, r7, r3
   1281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1281c:	18d3      	adds	r3, r2, r3
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	005b      	lsls	r3, r3, #1
   12822:	b25a      	sxtb	r2, r3
   12824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12826:	3301      	adds	r3, #1
   12828:	211c      	movs	r1, #28
   1282a:	1879      	adds	r1, r7, r1
   1282c:	5ccb      	ldrb	r3, [r1, r3]
   1282e:	09db      	lsrs	r3, r3, #7
   12830:	b2db      	uxtb	r3, r3
   12832:	b25b      	sxtb	r3, r3
   12834:	4313      	orrs	r3, r2
   12836:	b25b      	sxtb	r3, r3
   12838:	b2d9      	uxtb	r1, r3
   1283a:	231c      	movs	r3, #28
   1283c:	18fa      	adds	r2, r7, r3
   1283e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12840:	18d3      	adds	r3, r2, r3
   12842:	1c0a      	adds	r2, r1, #0
   12844:	701a      	strb	r2, [r3, #0]
   12846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12848:	3301      	adds	r3, #1
   1284a:	643b      	str	r3, [r7, #64]	; 0x40
   1284c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1284e:	2b0e      	cmp	r3, #14
   12850:	dde1      	ble.n	12816 <AES_CMAC_Final+0xa2>
   12852:	231c      	movs	r3, #28
   12854:	18fb      	adds	r3, r7, r3
   12856:	7bdb      	ldrb	r3, [r3, #15]
   12858:	18db      	adds	r3, r3, r3
   1285a:	b2da      	uxtb	r2, r3
   1285c:	231c      	movs	r3, #28
   1285e:	18fb      	adds	r3, r7, r3
   12860:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
   12862:	683a      	ldr	r2, [r7, #0]
   12864:	238a      	movs	r3, #138	; 0x8a
   12866:	005b      	lsls	r3, r3, #1
   12868:	58d3      	ldr	r3, [r2, r3]
   1286a:	2b10      	cmp	r3, #16
   1286c:	d11f      	bne.n	128ae <AES_CMAC_Final+0x13a>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
   1286e:	2300      	movs	r3, #0
   12870:	63fb      	str	r3, [r7, #60]	; 0x3c
   12872:	e018      	b.n	128a6 <AES_CMAC_Final+0x132>
   12874:	6839      	ldr	r1, [r7, #0]
   12876:	2302      	movs	r3, #2
   12878:	33ff      	adds	r3, #255	; 0xff
   1287a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1287c:	188a      	adds	r2, r1, r2
   1287e:	18d3      	adds	r3, r2, r3
   12880:	781a      	ldrb	r2, [r3, #0]
   12882:	231c      	movs	r3, #28
   12884:	18f9      	adds	r1, r7, r3
   12886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12888:	18cb      	adds	r3, r1, r3
   1288a:	781b      	ldrb	r3, [r3, #0]
   1288c:	4053      	eors	r3, r2
   1288e:	b2d8      	uxtb	r0, r3
   12890:	6839      	ldr	r1, [r7, #0]
   12892:	2302      	movs	r3, #2
   12894:	33ff      	adds	r3, #255	; 0xff
   12896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12898:	188a      	adds	r2, r1, r2
   1289a:	18d3      	adds	r3, r2, r3
   1289c:	1c02      	adds	r2, r0, #0
   1289e:	701a      	strb	r2, [r3, #0]
   128a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   128a2:	3301      	adds	r3, #1
   128a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   128a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   128a8:	2b0f      	cmp	r3, #15
   128aa:	dde3      	ble.n	12874 <AES_CMAC_Final+0x100>
   128ac:	e0a7      	b.n	129fe <AES_CMAC_Final+0x28a>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
   128ae:	231c      	movs	r3, #28
   128b0:	18fb      	adds	r3, r7, r3
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	b25b      	sxtb	r3, r3
   128b6:	2b00      	cmp	r3, #0
   128b8:	da33      	bge.n	12922 <AES_CMAC_Final+0x1ae>
                          LSHIFT(K, K);
   128ba:	2300      	movs	r3, #0
   128bc:	63bb      	str	r3, [r7, #56]	; 0x38
   128be:	e01a      	b.n	128f6 <AES_CMAC_Final+0x182>
   128c0:	231c      	movs	r3, #28
   128c2:	18fa      	adds	r2, r7, r3
   128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   128c6:	18d3      	adds	r3, r2, r3
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	005b      	lsls	r3, r3, #1
   128cc:	b25a      	sxtb	r2, r3
   128ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   128d0:	3301      	adds	r3, #1
   128d2:	211c      	movs	r1, #28
   128d4:	1879      	adds	r1, r7, r1
   128d6:	5ccb      	ldrb	r3, [r1, r3]
   128d8:	09db      	lsrs	r3, r3, #7
   128da:	b2db      	uxtb	r3, r3
   128dc:	b25b      	sxtb	r3, r3
   128de:	4313      	orrs	r3, r2
   128e0:	b25b      	sxtb	r3, r3
   128e2:	b2d9      	uxtb	r1, r3
   128e4:	231c      	movs	r3, #28
   128e6:	18fa      	adds	r2, r7, r3
   128e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   128ea:	18d3      	adds	r3, r2, r3
   128ec:	1c0a      	adds	r2, r1, #0
   128ee:	701a      	strb	r2, [r3, #0]
   128f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   128f2:	3301      	adds	r3, #1
   128f4:	63bb      	str	r3, [r7, #56]	; 0x38
   128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   128f8:	2b0e      	cmp	r3, #14
   128fa:	dde1      	ble.n	128c0 <AES_CMAC_Final+0x14c>
   128fc:	231c      	movs	r3, #28
   128fe:	18fb      	adds	r3, r7, r3
   12900:	7bdb      	ldrb	r3, [r3, #15]
   12902:	18db      	adds	r3, r3, r3
   12904:	b2da      	uxtb	r2, r3
   12906:	231c      	movs	r3, #28
   12908:	18fb      	adds	r3, r7, r3
   1290a:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
   1290c:	231c      	movs	r3, #28
   1290e:	18fb      	adds	r3, r7, r3
   12910:	7bdb      	ldrb	r3, [r3, #15]
   12912:	2279      	movs	r2, #121	; 0x79
   12914:	4252      	negs	r2, r2
   12916:	4053      	eors	r3, r2
   12918:	b2da      	uxtb	r2, r3
   1291a:	231c      	movs	r3, #28
   1291c:	18fb      	adds	r3, r7, r3
   1291e:	73da      	strb	r2, [r3, #15]
   12920:	e028      	b.n	12974 <AES_CMAC_Final+0x200>
                  } else
                           LSHIFT(K, K);
   12922:	2300      	movs	r3, #0
   12924:	637b      	str	r3, [r7, #52]	; 0x34
   12926:	e01a      	b.n	1295e <AES_CMAC_Final+0x1ea>
   12928:	231c      	movs	r3, #28
   1292a:	18fa      	adds	r2, r7, r3
   1292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1292e:	18d3      	adds	r3, r2, r3
   12930:	781b      	ldrb	r3, [r3, #0]
   12932:	005b      	lsls	r3, r3, #1
   12934:	b25a      	sxtb	r2, r3
   12936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12938:	3301      	adds	r3, #1
   1293a:	211c      	movs	r1, #28
   1293c:	1879      	adds	r1, r7, r1
   1293e:	5ccb      	ldrb	r3, [r1, r3]
   12940:	09db      	lsrs	r3, r3, #7
   12942:	b2db      	uxtb	r3, r3
   12944:	b25b      	sxtb	r3, r3
   12946:	4313      	orrs	r3, r2
   12948:	b25b      	sxtb	r3, r3
   1294a:	b2d9      	uxtb	r1, r3
   1294c:	231c      	movs	r3, #28
   1294e:	18fa      	adds	r2, r7, r3
   12950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12952:	18d3      	adds	r3, r2, r3
   12954:	1c0a      	adds	r2, r1, #0
   12956:	701a      	strb	r2, [r3, #0]
   12958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1295a:	3301      	adds	r3, #1
   1295c:	637b      	str	r3, [r7, #52]	; 0x34
   1295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12960:	2b0e      	cmp	r3, #14
   12962:	dde1      	ble.n	12928 <AES_CMAC_Final+0x1b4>
   12964:	231c      	movs	r3, #28
   12966:	18fb      	adds	r3, r7, r3
   12968:	7bdb      	ldrb	r3, [r3, #15]
   1296a:	18db      	adds	r3, r3, r3
   1296c:	b2da      	uxtb	r2, r3
   1296e:	231c      	movs	r3, #28
   12970:	18fb      	adds	r3, r7, r3
   12972:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
   12974:	683a      	ldr	r2, [r7, #0]
   12976:	238a      	movs	r3, #138	; 0x8a
   12978:	005b      	lsls	r3, r3, #1
   1297a:	58d2      	ldr	r2, [r2, r3]
   1297c:	6839      	ldr	r1, [r7, #0]
   1297e:	2302      	movs	r3, #2
   12980:	33ff      	adds	r3, #255	; 0xff
   12982:	188a      	adds	r2, r1, r2
   12984:	18d3      	adds	r3, r2, r3
   12986:	2280      	movs	r2, #128	; 0x80
   12988:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
   1298a:	e00a      	b.n	129a2 <AES_CMAC_Final+0x22e>
                         ctx->M_last[ctx->M_n] = 0;
   1298c:	683a      	ldr	r2, [r7, #0]
   1298e:	238a      	movs	r3, #138	; 0x8a
   12990:	005b      	lsls	r3, r3, #1
   12992:	58d2      	ldr	r2, [r2, r3]
   12994:	6839      	ldr	r1, [r7, #0]
   12996:	2302      	movs	r3, #2
   12998:	33ff      	adds	r3, #255	; 0xff
   1299a:	188a      	adds	r2, r1, r2
   1299c:	18d3      	adds	r3, r2, r3
   1299e:	2200      	movs	r2, #0
   129a0:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
   129a2:	683a      	ldr	r2, [r7, #0]
   129a4:	238a      	movs	r3, #138	; 0x8a
   129a6:	005b      	lsls	r3, r3, #1
   129a8:	58d3      	ldr	r3, [r2, r3]
   129aa:	1c59      	adds	r1, r3, #1
   129ac:	683a      	ldr	r2, [r7, #0]
   129ae:	238a      	movs	r3, #138	; 0x8a
   129b0:	005b      	lsls	r3, r3, #1
   129b2:	50d1      	str	r1, [r2, r3]
   129b4:	683a      	ldr	r2, [r7, #0]
   129b6:	238a      	movs	r3, #138	; 0x8a
   129b8:	005b      	lsls	r3, r3, #1
   129ba:	58d3      	ldr	r3, [r2, r3]
   129bc:	2b0f      	cmp	r3, #15
   129be:	d9e5      	bls.n	1298c <AES_CMAC_Final+0x218>
   
                  XOR(K, ctx->M_last);
   129c0:	2300      	movs	r3, #0
   129c2:	633b      	str	r3, [r7, #48]	; 0x30
   129c4:	e018      	b.n	129f8 <AES_CMAC_Final+0x284>
   129c6:	6839      	ldr	r1, [r7, #0]
   129c8:	2302      	movs	r3, #2
   129ca:	33ff      	adds	r3, #255	; 0xff
   129cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   129ce:	188a      	adds	r2, r1, r2
   129d0:	18d3      	adds	r3, r2, r3
   129d2:	781a      	ldrb	r2, [r3, #0]
   129d4:	231c      	movs	r3, #28
   129d6:	18f9      	adds	r1, r7, r3
   129d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   129da:	18cb      	adds	r3, r1, r3
   129dc:	781b      	ldrb	r3, [r3, #0]
   129de:	4053      	eors	r3, r2
   129e0:	b2d8      	uxtb	r0, r3
   129e2:	6839      	ldr	r1, [r7, #0]
   129e4:	2302      	movs	r3, #2
   129e6:	33ff      	adds	r3, #255	; 0xff
   129e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   129ea:	188a      	adds	r2, r1, r2
   129ec:	18d3      	adds	r3, r2, r3
   129ee:	1c02      	adds	r2, r0, #0
   129f0:	701a      	strb	r2, [r3, #0]
   129f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   129f4:	3301      	adds	r3, #1
   129f6:	633b      	str	r3, [r7, #48]	; 0x30
   129f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   129fa:	2b0f      	cmp	r3, #15
   129fc:	dde3      	ble.n	129c6 <AES_CMAC_Final+0x252>


           }
           XOR(ctx->M_last, ctx->X);
   129fe:	2300      	movs	r3, #0
   12a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   12a02:	e018      	b.n	12a36 <AES_CMAC_Final+0x2c2>
   12a04:	683a      	ldr	r2, [r7, #0]
   12a06:	21f1      	movs	r1, #241	; 0xf1
   12a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a0a:	18d3      	adds	r3, r2, r3
   12a0c:	185b      	adds	r3, r3, r1
   12a0e:	781a      	ldrb	r2, [r3, #0]
   12a10:	6838      	ldr	r0, [r7, #0]
   12a12:	2302      	movs	r3, #2
   12a14:	33ff      	adds	r3, #255	; 0xff
   12a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12a18:	1841      	adds	r1, r0, r1
   12a1a:	18cb      	adds	r3, r1, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	4053      	eors	r3, r2
   12a20:	b2d8      	uxtb	r0, r3
   12a22:	683a      	ldr	r2, [r7, #0]
   12a24:	21f1      	movs	r1, #241	; 0xf1
   12a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a28:	18d3      	adds	r3, r2, r3
   12a2a:	185b      	adds	r3, r3, r1
   12a2c:	1c02      	adds	r2, r0, #0
   12a2e:	701a      	strb	r2, [r3, #0]
   12a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a32:	3301      	adds	r3, #1
   12a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   12a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a38:	2b0f      	cmp	r3, #15
   12a3a:	dde3      	ble.n	12a04 <AES_CMAC_Final+0x290>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
   12a3c:	683b      	ldr	r3, [r7, #0]
   12a3e:	33f1      	adds	r3, #241	; 0xf1
   12a40:	0019      	movs	r1, r3
   12a42:	230c      	movs	r3, #12
   12a44:	18fb      	adds	r3, r7, r3
   12a46:	2210      	movs	r2, #16
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <AES_CMAC_Final+0x308>)
   12a4c:	4798      	blx	r3
       aes_encrypt(in, digest, &ctx->rijndael);
   12a4e:	683a      	ldr	r2, [r7, #0]
   12a50:	6879      	ldr	r1, [r7, #4]
   12a52:	230c      	movs	r3, #12
   12a54:	18fb      	adds	r3, r7, r3
   12a56:	0018      	movs	r0, r3
   12a58:	4b07      	ldr	r3, [pc, #28]	; (12a78 <AES_CMAC_Final+0x304>)
   12a5a:	4798      	blx	r3
           memset1(K, 0, sizeof K);
   12a5c:	231c      	movs	r3, #28
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	2210      	movs	r2, #16
   12a62:	2100      	movs	r1, #0
   12a64:	0018      	movs	r0, r3
   12a66:	4b03      	ldr	r3, [pc, #12]	; (12a74 <AES_CMAC_Final+0x300>)
   12a68:	4798      	blx	r3

}
   12a6a:	46c0      	nop			; (mov r8, r8)
   12a6c:	46bd      	mov	sp, r7
   12a6e:	b012      	add	sp, #72	; 0x48
   12a70:	bd80      	pop	{r7, pc}
   12a72:	46c0      	nop			; (mov r8, r8)
   12a74:	000029cd 	.word	0x000029cd
   12a78:	000124e5 	.word	0x000124e5
   12a7c:	00002955 	.word	0x00002955

00012a80 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
   12a80:	b580      	push	{r7, lr}
   12a82:	b084      	sub	sp, #16
   12a84:	af00      	add	r7, sp, #0
   12a86:	0002      	movs	r2, r0
   12a88:	6039      	str	r1, [r7, #0]
   12a8a:	1dfb      	adds	r3, r7, #7
   12a8c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   12a8e:	230f      	movs	r3, #15
   12a90:	18fb      	adds	r3, r7, r3
   12a92:	2200      	movs	r2, #0
   12a94:	701a      	strb	r2, [r3, #0]
   12a96:	e026      	b.n	12ae6 <GetKeyByID+0x66>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
   12a98:	230f      	movs	r3, #15
   12a9a:	18fb      	adds	r3, r7, r3
   12a9c:	781a      	ldrb	r2, [r3, #0]
   12a9e:	4817      	ldr	r0, [pc, #92]	; (12afc <GetKeyByID+0x7c>)
   12aa0:	2383      	movs	r3, #131	; 0x83
   12aa2:	0099      	lsls	r1, r3, #2
   12aa4:	0013      	movs	r3, r2
   12aa6:	011b      	lsls	r3, r3, #4
   12aa8:	189b      	adds	r3, r3, r2
   12aaa:	18c3      	adds	r3, r0, r3
   12aac:	185b      	adds	r3, r3, r1
   12aae:	781b      	ldrb	r3, [r3, #0]
   12ab0:	1dfa      	adds	r2, r7, #7
   12ab2:	7812      	ldrb	r2, [r2, #0]
   12ab4:	429a      	cmp	r2, r3
   12ab6:	d10f      	bne.n	12ad8 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
   12ab8:	230f      	movs	r3, #15
   12aba:	18fb      	adds	r3, r7, r3
   12abc:	781a      	ldrb	r2, [r3, #0]
   12abe:	0013      	movs	r3, r2
   12ac0:	011b      	lsls	r3, r3, #4
   12ac2:	189b      	adds	r3, r3, r2
   12ac4:	2282      	movs	r2, #130	; 0x82
   12ac6:	0092      	lsls	r2, r2, #2
   12ac8:	189a      	adds	r2, r3, r2
   12aca:	4b0c      	ldr	r3, [pc, #48]	; (12afc <GetKeyByID+0x7c>)
   12acc:	18d3      	adds	r3, r2, r3
   12ace:	1d1a      	adds	r2, r3, #4
   12ad0:	683b      	ldr	r3, [r7, #0]
   12ad2:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
   12ad4:	2300      	movs	r3, #0
   12ad6:	e00c      	b.n	12af2 <GetKeyByID+0x72>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   12ad8:	230f      	movs	r3, #15
   12ada:	18fb      	adds	r3, r7, r3
   12adc:	781a      	ldrb	r2, [r3, #0]
   12ade:	230f      	movs	r3, #15
   12ae0:	18fb      	adds	r3, r7, r3
   12ae2:	3201      	adds	r2, #1
   12ae4:	701a      	strb	r2, [r3, #0]
   12ae6:	230f      	movs	r3, #15
   12ae8:	18fb      	adds	r3, r7, r3
   12aea:	781b      	ldrb	r3, [r3, #0]
   12aec:	2b15      	cmp	r3, #21
   12aee:	d9d3      	bls.n	12a98 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   12af0:	2303      	movs	r3, #3
}
   12af2:	0018      	movs	r0, r3
   12af4:	46bd      	mov	sp, r7
   12af6:	b004      	add	sp, #16
   12af8:	bd80      	pop	{r7, pc}
   12afa:	46c0      	nop			; (mov r8, r8)
   12afc:	20001548 	.word	0x20001548

00012b00 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
   12b00:	b590      	push	{r4, r7, lr}
   12b02:	b08b      	sub	sp, #44	; 0x2c
   12b04:	af00      	add	r7, sp, #0
   12b06:	60f8      	str	r0, [r7, #12]
   12b08:	0008      	movs	r0, r1
   12b0a:	0011      	movs	r1, r2
   12b0c:	607b      	str	r3, [r7, #4]
   12b0e:	230a      	movs	r3, #10
   12b10:	18fb      	adds	r3, r7, r3
   12b12:	1c02      	adds	r2, r0, #0
   12b14:	801a      	strh	r2, [r3, #0]
   12b16:	2309      	movs	r3, #9
   12b18:	18fb      	adds	r3, r7, r3
   12b1a:	1c0a      	adds	r2, r1, #0
   12b1c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
   12b1e:	68fb      	ldr	r3, [r7, #12]
   12b20:	2b00      	cmp	r3, #0
   12b22:	d002      	beq.n	12b2a <ComputeCmac+0x2a>
   12b24:	687b      	ldr	r3, [r7, #4]
   12b26:	2b00      	cmp	r3, #0
   12b28:	d101      	bne.n	12b2e <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   12b2a:	2302      	movs	r3, #2
   12b2c:	e042      	b.n	12bb4 <ComputeCmac+0xb4>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
   12b2e:	4b23      	ldr	r3, [pc, #140]	; (12bbc <ComputeCmac+0xbc>)
   12b30:	0018      	movs	r0, r3
   12b32:	4b23      	ldr	r3, [pc, #140]	; (12bc0 <ComputeCmac+0xc0>)
   12b34:	4798      	blx	r3

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
   12b36:	2327      	movs	r3, #39	; 0x27
   12b38:	18fc      	adds	r4, r7, r3
   12b3a:	2310      	movs	r3, #16
   12b3c:	18fa      	adds	r2, r7, r3
   12b3e:	2309      	movs	r3, #9
   12b40:	18fb      	adds	r3, r7, r3
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	0011      	movs	r1, r2
   12b46:	0018      	movs	r0, r3
   12b48:	4b1e      	ldr	r3, [pc, #120]	; (12bc4 <ComputeCmac+0xc4>)
   12b4a:	4798      	blx	r3
   12b4c:	0003      	movs	r3, r0
   12b4e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
   12b50:	2327      	movs	r3, #39	; 0x27
   12b52:	18fb      	adds	r3, r7, r3
   12b54:	781b      	ldrb	r3, [r3, #0]
   12b56:	2b00      	cmp	r3, #0
   12b58:	d129      	bne.n	12bae <ComputeCmac+0xae>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
   12b5a:	693b      	ldr	r3, [r7, #16]
   12b5c:	1c5a      	adds	r2, r3, #1
   12b5e:	4b17      	ldr	r3, [pc, #92]	; (12bbc <ComputeCmac+0xbc>)
   12b60:	0011      	movs	r1, r2
   12b62:	0018      	movs	r0, r3
   12b64:	4b18      	ldr	r3, [pc, #96]	; (12bc8 <ComputeCmac+0xc8>)
   12b66:	4798      	blx	r3

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
   12b68:	230a      	movs	r3, #10
   12b6a:	18fb      	adds	r3, r7, r3
   12b6c:	881a      	ldrh	r2, [r3, #0]
   12b6e:	68f9      	ldr	r1, [r7, #12]
   12b70:	4b12      	ldr	r3, [pc, #72]	; (12bbc <ComputeCmac+0xbc>)
   12b72:	0018      	movs	r0, r3
   12b74:	4b15      	ldr	r3, [pc, #84]	; (12bcc <ComputeCmac+0xcc>)
   12b76:	4798      	blx	r3

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
   12b78:	4a10      	ldr	r2, [pc, #64]	; (12bbc <ComputeCmac+0xbc>)
   12b7a:	2314      	movs	r3, #20
   12b7c:	18fb      	adds	r3, r7, r3
   12b7e:	0011      	movs	r1, r2
   12b80:	0018      	movs	r0, r3
   12b82:	4b13      	ldr	r3, [pc, #76]	; (12bd0 <ComputeCmac+0xd0>)
   12b84:	4798      	blx	r3

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
   12b86:	2314      	movs	r3, #20
   12b88:	18fb      	adds	r3, r7, r3
   12b8a:	78db      	ldrb	r3, [r3, #3]
   12b8c:	061a      	lsls	r2, r3, #24
   12b8e:	2314      	movs	r3, #20
   12b90:	18fb      	adds	r3, r7, r3
   12b92:	789b      	ldrb	r3, [r3, #2]
   12b94:	041b      	lsls	r3, r3, #16
   12b96:	431a      	orrs	r2, r3
   12b98:	2314      	movs	r3, #20
   12b9a:	18fb      	adds	r3, r7, r3
   12b9c:	785b      	ldrb	r3, [r3, #1]
   12b9e:	021b      	lsls	r3, r3, #8
   12ba0:	4313      	orrs	r3, r2
   12ba2:	2214      	movs	r2, #20
   12ba4:	18ba      	adds	r2, r7, r2
   12ba6:	7812      	ldrb	r2, [r2, #0]
   12ba8:	431a      	orrs	r2, r3
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	601a      	str	r2, [r3, #0]
    }

    return retval;
   12bae:	2327      	movs	r3, #39	; 0x27
   12bb0:	18fb      	adds	r3, r7, r3
   12bb2:	781b      	ldrb	r3, [r3, #0]
}
   12bb4:	0018      	movs	r0, r3
   12bb6:	46bd      	mov	sp, r7
   12bb8:	b00b      	add	sp, #44	; 0x2c
   12bba:	bd90      	pop	{r4, r7, pc}
   12bbc:	2000163c 	.word	0x2000163c
   12bc0:	00012595 	.word	0x00012595
   12bc4:	00012a81 	.word	0x00012a81
   12bc8:	000125cd 	.word	0x000125cd
   12bcc:	000125f1 	.word	0x000125f1
   12bd0:	00012775 	.word	0x00012775

00012bd4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
   12bd4:	b580      	push	{r7, lr}
   12bd6:	af00      	add	r7, sp, #0
    return;
   12bd8:	46c0      	nop			; (mov r8, r8)
}
   12bda:	46bd      	mov	sp, r7
   12bdc:	bd80      	pop	{r7, pc}
	...

00012be0 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
   12be0:	b580      	push	{r7, lr}
   12be2:	b084      	sub	sp, #16
   12be4:	af00      	add	r7, sp, #0
   12be6:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
   12be8:	230f      	movs	r3, #15
   12bea:	18fb      	adds	r3, r7, r3
   12bec:	2200      	movs	r2, #0
   12bee:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
   12bf0:	230f      	movs	r3, #15
   12bf2:	18fb      	adds	r3, r7, r3
   12bf4:	781b      	ldrb	r3, [r3, #0]
   12bf6:	220f      	movs	r2, #15
   12bf8:	18ba      	adds	r2, r7, r2
   12bfa:	1c59      	adds	r1, r3, #1
   12bfc:	7011      	strb	r1, [r2, #0]
   12bfe:	0018      	movs	r0, r3
   12c00:	49c9      	ldr	r1, [pc, #804]	; (12f28 <SecureElementInit+0x348>)
   12c02:	2383      	movs	r3, #131	; 0x83
   12c04:	009a      	lsls	r2, r3, #2
   12c06:	0003      	movs	r3, r0
   12c08:	011b      	lsls	r3, r3, #4
   12c0a:	181b      	adds	r3, r3, r0
   12c0c:	18cb      	adds	r3, r1, r3
   12c0e:	189b      	adds	r3, r3, r2
   12c10:	2200      	movs	r2, #0
   12c12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
   12c14:	230f      	movs	r3, #15
   12c16:	18fb      	adds	r3, r7, r3
   12c18:	781b      	ldrb	r3, [r3, #0]
   12c1a:	220f      	movs	r2, #15
   12c1c:	18ba      	adds	r2, r7, r2
   12c1e:	1c59      	adds	r1, r3, #1
   12c20:	7011      	strb	r1, [r2, #0]
   12c22:	0018      	movs	r0, r3
   12c24:	49c0      	ldr	r1, [pc, #768]	; (12f28 <SecureElementInit+0x348>)
   12c26:	2383      	movs	r3, #131	; 0x83
   12c28:	009a      	lsls	r2, r3, #2
   12c2a:	0003      	movs	r3, r0
   12c2c:	011b      	lsls	r3, r3, #4
   12c2e:	181b      	adds	r3, r3, r0
   12c30:	18cb      	adds	r3, r1, r3
   12c32:	189b      	adds	r3, r3, r2
   12c34:	2201      	movs	r2, #1
   12c36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
   12c38:	230f      	movs	r3, #15
   12c3a:	18fb      	adds	r3, r7, r3
   12c3c:	781b      	ldrb	r3, [r3, #0]
   12c3e:	220f      	movs	r2, #15
   12c40:	18ba      	adds	r2, r7, r2
   12c42:	1c59      	adds	r1, r3, #1
   12c44:	7011      	strb	r1, [r2, #0]
   12c46:	0018      	movs	r0, r3
   12c48:	49b7      	ldr	r1, [pc, #732]	; (12f28 <SecureElementInit+0x348>)
   12c4a:	2383      	movs	r3, #131	; 0x83
   12c4c:	009a      	lsls	r2, r3, #2
   12c4e:	0003      	movs	r3, r0
   12c50:	011b      	lsls	r3, r3, #4
   12c52:	181b      	adds	r3, r3, r0
   12c54:	18cb      	adds	r3, r1, r3
   12c56:	189b      	adds	r3, r3, r2
   12c58:	2202      	movs	r2, #2
   12c5a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
   12c5c:	230f      	movs	r3, #15
   12c5e:	18fb      	adds	r3, r7, r3
   12c60:	781b      	ldrb	r3, [r3, #0]
   12c62:	220f      	movs	r2, #15
   12c64:	18ba      	adds	r2, r7, r2
   12c66:	1c59      	adds	r1, r3, #1
   12c68:	7011      	strb	r1, [r2, #0]
   12c6a:	0018      	movs	r0, r3
   12c6c:	49ae      	ldr	r1, [pc, #696]	; (12f28 <SecureElementInit+0x348>)
   12c6e:	2383      	movs	r3, #131	; 0x83
   12c70:	009a      	lsls	r2, r3, #2
   12c72:	0003      	movs	r3, r0
   12c74:	011b      	lsls	r3, r3, #4
   12c76:	181b      	adds	r3, r3, r0
   12c78:	18cb      	adds	r3, r1, r3
   12c7a:	189b      	adds	r3, r3, r2
   12c7c:	2203      	movs	r2, #3
   12c7e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
   12c80:	230f      	movs	r3, #15
   12c82:	18fb      	adds	r3, r7, r3
   12c84:	781b      	ldrb	r3, [r3, #0]
   12c86:	220f      	movs	r2, #15
   12c88:	18ba      	adds	r2, r7, r2
   12c8a:	1c59      	adds	r1, r3, #1
   12c8c:	7011      	strb	r1, [r2, #0]
   12c8e:	0018      	movs	r0, r3
   12c90:	49a5      	ldr	r1, [pc, #660]	; (12f28 <SecureElementInit+0x348>)
   12c92:	2383      	movs	r3, #131	; 0x83
   12c94:	009a      	lsls	r2, r3, #2
   12c96:	0003      	movs	r3, r0
   12c98:	011b      	lsls	r3, r3, #4
   12c9a:	181b      	adds	r3, r3, r0
   12c9c:	18cb      	adds	r3, r1, r3
   12c9e:	189b      	adds	r3, r3, r2
   12ca0:	2204      	movs	r2, #4
   12ca2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
   12ca4:	230f      	movs	r3, #15
   12ca6:	18fb      	adds	r3, r7, r3
   12ca8:	781b      	ldrb	r3, [r3, #0]
   12caa:	220f      	movs	r2, #15
   12cac:	18ba      	adds	r2, r7, r2
   12cae:	1c59      	adds	r1, r3, #1
   12cb0:	7011      	strb	r1, [r2, #0]
   12cb2:	0018      	movs	r0, r3
   12cb4:	499c      	ldr	r1, [pc, #624]	; (12f28 <SecureElementInit+0x348>)
   12cb6:	2383      	movs	r3, #131	; 0x83
   12cb8:	009a      	lsls	r2, r3, #2
   12cba:	0003      	movs	r3, r0
   12cbc:	011b      	lsls	r3, r3, #4
   12cbe:	181b      	adds	r3, r3, r0
   12cc0:	18cb      	adds	r3, r1, r3
   12cc2:	189b      	adds	r3, r3, r2
   12cc4:	2205      	movs	r2, #5
   12cc6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
   12cc8:	230f      	movs	r3, #15
   12cca:	18fb      	adds	r3, r7, r3
   12ccc:	781b      	ldrb	r3, [r3, #0]
   12cce:	220f      	movs	r2, #15
   12cd0:	18ba      	adds	r2, r7, r2
   12cd2:	1c59      	adds	r1, r3, #1
   12cd4:	7011      	strb	r1, [r2, #0]
   12cd6:	0018      	movs	r0, r3
   12cd8:	4993      	ldr	r1, [pc, #588]	; (12f28 <SecureElementInit+0x348>)
   12cda:	2383      	movs	r3, #131	; 0x83
   12cdc:	009a      	lsls	r2, r3, #2
   12cde:	0003      	movs	r3, r0
   12ce0:	011b      	lsls	r3, r3, #4
   12ce2:	181b      	adds	r3, r3, r0
   12ce4:	18cb      	adds	r3, r1, r3
   12ce6:	189b      	adds	r3, r3, r2
   12ce8:	2206      	movs	r2, #6
   12cea:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
   12cec:	230f      	movs	r3, #15
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	220f      	movs	r2, #15
   12cf4:	18ba      	adds	r2, r7, r2
   12cf6:	1c59      	adds	r1, r3, #1
   12cf8:	7011      	strb	r1, [r2, #0]
   12cfa:	0018      	movs	r0, r3
   12cfc:	498a      	ldr	r1, [pc, #552]	; (12f28 <SecureElementInit+0x348>)
   12cfe:	2383      	movs	r3, #131	; 0x83
   12d00:	009a      	lsls	r2, r3, #2
   12d02:	0003      	movs	r3, r0
   12d04:	011b      	lsls	r3, r3, #4
   12d06:	181b      	adds	r3, r3, r0
   12d08:	18cb      	adds	r3, r1, r3
   12d0a:	189b      	adds	r3, r3, r2
   12d0c:	2207      	movs	r2, #7
   12d0e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
   12d10:	230f      	movs	r3, #15
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	781b      	ldrb	r3, [r3, #0]
   12d16:	220f      	movs	r2, #15
   12d18:	18ba      	adds	r2, r7, r2
   12d1a:	1c59      	adds	r1, r3, #1
   12d1c:	7011      	strb	r1, [r2, #0]
   12d1e:	0018      	movs	r0, r3
   12d20:	4981      	ldr	r1, [pc, #516]	; (12f28 <SecureElementInit+0x348>)
   12d22:	2383      	movs	r3, #131	; 0x83
   12d24:	009a      	lsls	r2, r3, #2
   12d26:	0003      	movs	r3, r0
   12d28:	011b      	lsls	r3, r3, #4
   12d2a:	181b      	adds	r3, r3, r0
   12d2c:	18cb      	adds	r3, r1, r3
   12d2e:	189b      	adds	r3, r3, r2
   12d30:	227f      	movs	r2, #127	; 0x7f
   12d32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
   12d34:	230f      	movs	r3, #15
   12d36:	18fb      	adds	r3, r7, r3
   12d38:	781b      	ldrb	r3, [r3, #0]
   12d3a:	220f      	movs	r2, #15
   12d3c:	18ba      	adds	r2, r7, r2
   12d3e:	1c59      	adds	r1, r3, #1
   12d40:	7011      	strb	r1, [r2, #0]
   12d42:	0018      	movs	r0, r3
   12d44:	4978      	ldr	r1, [pc, #480]	; (12f28 <SecureElementInit+0x348>)
   12d46:	2383      	movs	r3, #131	; 0x83
   12d48:	009a      	lsls	r2, r3, #2
   12d4a:	0003      	movs	r3, r0
   12d4c:	011b      	lsls	r3, r3, #4
   12d4e:	181b      	adds	r3, r3, r0
   12d50:	18cb      	adds	r3, r1, r3
   12d52:	189b      	adds	r3, r3, r2
   12d54:	2280      	movs	r2, #128	; 0x80
   12d56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
   12d58:	230f      	movs	r3, #15
   12d5a:	18fb      	adds	r3, r7, r3
   12d5c:	781b      	ldrb	r3, [r3, #0]
   12d5e:	220f      	movs	r2, #15
   12d60:	18ba      	adds	r2, r7, r2
   12d62:	1c59      	adds	r1, r3, #1
   12d64:	7011      	strb	r1, [r2, #0]
   12d66:	0018      	movs	r0, r3
   12d68:	496f      	ldr	r1, [pc, #444]	; (12f28 <SecureElementInit+0x348>)
   12d6a:	2383      	movs	r3, #131	; 0x83
   12d6c:	009a      	lsls	r2, r3, #2
   12d6e:	0003      	movs	r3, r0
   12d70:	011b      	lsls	r3, r3, #4
   12d72:	181b      	adds	r3, r3, r0
   12d74:	18cb      	adds	r3, r1, r3
   12d76:	189b      	adds	r3, r3, r2
   12d78:	2281      	movs	r2, #129	; 0x81
   12d7a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
   12d7c:	230f      	movs	r3, #15
   12d7e:	18fb      	adds	r3, r7, r3
   12d80:	781b      	ldrb	r3, [r3, #0]
   12d82:	220f      	movs	r2, #15
   12d84:	18ba      	adds	r2, r7, r2
   12d86:	1c59      	adds	r1, r3, #1
   12d88:	7011      	strb	r1, [r2, #0]
   12d8a:	0018      	movs	r0, r3
   12d8c:	4966      	ldr	r1, [pc, #408]	; (12f28 <SecureElementInit+0x348>)
   12d8e:	2383      	movs	r3, #131	; 0x83
   12d90:	009a      	lsls	r2, r3, #2
   12d92:	0003      	movs	r3, r0
   12d94:	011b      	lsls	r3, r3, #4
   12d96:	181b      	adds	r3, r3, r0
   12d98:	18cb      	adds	r3, r1, r3
   12d9a:	189b      	adds	r3, r3, r2
   12d9c:	2282      	movs	r2, #130	; 0x82
   12d9e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
   12da0:	230f      	movs	r3, #15
   12da2:	18fb      	adds	r3, r7, r3
   12da4:	781b      	ldrb	r3, [r3, #0]
   12da6:	220f      	movs	r2, #15
   12da8:	18ba      	adds	r2, r7, r2
   12daa:	1c59      	adds	r1, r3, #1
   12dac:	7011      	strb	r1, [r2, #0]
   12dae:	0018      	movs	r0, r3
   12db0:	495d      	ldr	r1, [pc, #372]	; (12f28 <SecureElementInit+0x348>)
   12db2:	2383      	movs	r3, #131	; 0x83
   12db4:	009a      	lsls	r2, r3, #2
   12db6:	0003      	movs	r3, r0
   12db8:	011b      	lsls	r3, r3, #4
   12dba:	181b      	adds	r3, r3, r0
   12dbc:	18cb      	adds	r3, r1, r3
   12dbe:	189b      	adds	r3, r3, r2
   12dc0:	2283      	movs	r2, #131	; 0x83
   12dc2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
   12dc4:	230f      	movs	r3, #15
   12dc6:	18fb      	adds	r3, r7, r3
   12dc8:	781b      	ldrb	r3, [r3, #0]
   12dca:	220f      	movs	r2, #15
   12dcc:	18ba      	adds	r2, r7, r2
   12dce:	1c59      	adds	r1, r3, #1
   12dd0:	7011      	strb	r1, [r2, #0]
   12dd2:	0018      	movs	r0, r3
   12dd4:	4954      	ldr	r1, [pc, #336]	; (12f28 <SecureElementInit+0x348>)
   12dd6:	2383      	movs	r3, #131	; 0x83
   12dd8:	009a      	lsls	r2, r3, #2
   12dda:	0003      	movs	r3, r0
   12ddc:	011b      	lsls	r3, r3, #4
   12dde:	181b      	adds	r3, r3, r0
   12de0:	18cb      	adds	r3, r1, r3
   12de2:	189b      	adds	r3, r3, r2
   12de4:	2284      	movs	r2, #132	; 0x84
   12de6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
   12de8:	230f      	movs	r3, #15
   12dea:	18fb      	adds	r3, r7, r3
   12dec:	781b      	ldrb	r3, [r3, #0]
   12dee:	220f      	movs	r2, #15
   12df0:	18ba      	adds	r2, r7, r2
   12df2:	1c59      	adds	r1, r3, #1
   12df4:	7011      	strb	r1, [r2, #0]
   12df6:	0018      	movs	r0, r3
   12df8:	494b      	ldr	r1, [pc, #300]	; (12f28 <SecureElementInit+0x348>)
   12dfa:	2383      	movs	r3, #131	; 0x83
   12dfc:	009a      	lsls	r2, r3, #2
   12dfe:	0003      	movs	r3, r0
   12e00:	011b      	lsls	r3, r3, #4
   12e02:	181b      	adds	r3, r3, r0
   12e04:	18cb      	adds	r3, r1, r3
   12e06:	189b      	adds	r3, r3, r2
   12e08:	2285      	movs	r2, #133	; 0x85
   12e0a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
   12e0c:	230f      	movs	r3, #15
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	220f      	movs	r2, #15
   12e14:	18ba      	adds	r2, r7, r2
   12e16:	1c59      	adds	r1, r3, #1
   12e18:	7011      	strb	r1, [r2, #0]
   12e1a:	0018      	movs	r0, r3
   12e1c:	4942      	ldr	r1, [pc, #264]	; (12f28 <SecureElementInit+0x348>)
   12e1e:	2383      	movs	r3, #131	; 0x83
   12e20:	009a      	lsls	r2, r3, #2
   12e22:	0003      	movs	r3, r0
   12e24:	011b      	lsls	r3, r3, #4
   12e26:	181b      	adds	r3, r3, r0
   12e28:	18cb      	adds	r3, r1, r3
   12e2a:	189b      	adds	r3, r3, r2
   12e2c:	2286      	movs	r2, #134	; 0x86
   12e2e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
   12e30:	230f      	movs	r3, #15
   12e32:	18fb      	adds	r3, r7, r3
   12e34:	781b      	ldrb	r3, [r3, #0]
   12e36:	220f      	movs	r2, #15
   12e38:	18ba      	adds	r2, r7, r2
   12e3a:	1c59      	adds	r1, r3, #1
   12e3c:	7011      	strb	r1, [r2, #0]
   12e3e:	0018      	movs	r0, r3
   12e40:	4939      	ldr	r1, [pc, #228]	; (12f28 <SecureElementInit+0x348>)
   12e42:	2383      	movs	r3, #131	; 0x83
   12e44:	009a      	lsls	r2, r3, #2
   12e46:	0003      	movs	r3, r0
   12e48:	011b      	lsls	r3, r3, #4
   12e4a:	181b      	adds	r3, r3, r0
   12e4c:	18cb      	adds	r3, r1, r3
   12e4e:	189b      	adds	r3, r3, r2
   12e50:	2287      	movs	r2, #135	; 0x87
   12e52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
   12e54:	230f      	movs	r3, #15
   12e56:	18fb      	adds	r3, r7, r3
   12e58:	781b      	ldrb	r3, [r3, #0]
   12e5a:	220f      	movs	r2, #15
   12e5c:	18ba      	adds	r2, r7, r2
   12e5e:	1c59      	adds	r1, r3, #1
   12e60:	7011      	strb	r1, [r2, #0]
   12e62:	0018      	movs	r0, r3
   12e64:	4930      	ldr	r1, [pc, #192]	; (12f28 <SecureElementInit+0x348>)
   12e66:	2383      	movs	r3, #131	; 0x83
   12e68:	009a      	lsls	r2, r3, #2
   12e6a:	0003      	movs	r3, r0
   12e6c:	011b      	lsls	r3, r3, #4
   12e6e:	181b      	adds	r3, r3, r0
   12e70:	18cb      	adds	r3, r1, r3
   12e72:	189b      	adds	r3, r3, r2
   12e74:	2288      	movs	r2, #136	; 0x88
   12e76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
   12e78:	230f      	movs	r3, #15
   12e7a:	18fb      	adds	r3, r7, r3
   12e7c:	781b      	ldrb	r3, [r3, #0]
   12e7e:	220f      	movs	r2, #15
   12e80:	18ba      	adds	r2, r7, r2
   12e82:	1c59      	adds	r1, r3, #1
   12e84:	7011      	strb	r1, [r2, #0]
   12e86:	0018      	movs	r0, r3
   12e88:	4927      	ldr	r1, [pc, #156]	; (12f28 <SecureElementInit+0x348>)
   12e8a:	2383      	movs	r3, #131	; 0x83
   12e8c:	009a      	lsls	r2, r3, #2
   12e8e:	0003      	movs	r3, r0
   12e90:	011b      	lsls	r3, r3, #4
   12e92:	181b      	adds	r3, r3, r0
   12e94:	18cb      	adds	r3, r1, r3
   12e96:	189b      	adds	r3, r3, r2
   12e98:	2289      	movs	r2, #137	; 0x89
   12e9a:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
   12e9c:	230f      	movs	r3, #15
   12e9e:	18fb      	adds	r3, r7, r3
   12ea0:	781b      	ldrb	r3, [r3, #0]
   12ea2:	220f      	movs	r2, #15
   12ea4:	18ba      	adds	r2, r7, r2
   12ea6:	1c59      	adds	r1, r3, #1
   12ea8:	7011      	strb	r1, [r2, #0]
   12eaa:	0018      	movs	r0, r3
   12eac:	491e      	ldr	r1, [pc, #120]	; (12f28 <SecureElementInit+0x348>)
   12eae:	2383      	movs	r3, #131	; 0x83
   12eb0:	009a      	lsls	r2, r3, #2
   12eb2:	0003      	movs	r3, r0
   12eb4:	011b      	lsls	r3, r3, #4
   12eb6:	181b      	adds	r3, r3, r0
   12eb8:	18cb      	adds	r3, r1, r3
   12eba:	189b      	adds	r3, r3, r2
   12ebc:	228a      	movs	r2, #138	; 0x8a
   12ebe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
   12ec0:	230f      	movs	r3, #15
   12ec2:	18fb      	adds	r3, r7, r3
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	220f      	movs	r2, #15
   12ec8:	18ba      	adds	r2, r7, r2
   12eca:	1c59      	adds	r1, r3, #1
   12ecc:	7011      	strb	r1, [r2, #0]
   12ece:	0018      	movs	r0, r3
   12ed0:	4915      	ldr	r1, [pc, #84]	; (12f28 <SecureElementInit+0x348>)
   12ed2:	2383      	movs	r3, #131	; 0x83
   12ed4:	009a      	lsls	r2, r3, #2
   12ed6:	0003      	movs	r3, r0
   12ed8:	011b      	lsls	r3, r3, #4
   12eda:	181b      	adds	r3, r3, r0
   12edc:	18cb      	adds	r3, r1, r3
   12ede:	189b      	adds	r3, r3, r2
   12ee0:	228b      	movs	r2, #139	; 0x8b
   12ee2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
   12ee4:	230f      	movs	r3, #15
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	781b      	ldrb	r3, [r3, #0]
   12eea:	220f      	movs	r2, #15
   12eec:	18ba      	adds	r2, r7, r2
   12eee:	1c59      	adds	r1, r3, #1
   12ef0:	7011      	strb	r1, [r2, #0]
   12ef2:	0018      	movs	r0, r3
   12ef4:	490c      	ldr	r1, [pc, #48]	; (12f28 <SecureElementInit+0x348>)
   12ef6:	2383      	movs	r3, #131	; 0x83
   12ef8:	009a      	lsls	r2, r3, #2
   12efa:	0003      	movs	r3, r0
   12efc:	011b      	lsls	r3, r3, #4
   12efe:	181b      	adds	r3, r3, r0
   12f00:	18cb      	adds	r3, r1, r3
   12f02:	189b      	adds	r3, r3, r2
   12f04:	228c      	movs	r2, #140	; 0x8c
   12f06:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	2b00      	cmp	r3, #0
   12f0c:	d003      	beq.n	12f16 <SecureElementInit+0x336>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
   12f0e:	4b07      	ldr	r3, [pc, #28]	; (12f2c <SecureElementInit+0x34c>)
   12f10:	687a      	ldr	r2, [r7, #4]
   12f12:	601a      	str	r2, [r3, #0]
   12f14:	e002      	b.n	12f1c <SecureElementInit+0x33c>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
   12f16:	4b05      	ldr	r3, [pc, #20]	; (12f2c <SecureElementInit+0x34c>)
   12f18:	4a05      	ldr	r2, [pc, #20]	; (12f30 <SecureElementInit+0x350>)
   12f1a:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
   12f1c:	2300      	movs	r3, #0
}
   12f1e:	0018      	movs	r0, r3
   12f20:	46bd      	mov	sp, r7
   12f22:	b004      	add	sp, #16
   12f24:	bd80      	pop	{r7, pc}
   12f26:	46c0      	nop			; (mov r8, r8)
   12f28:	20001548 	.word	0x20001548
   12f2c:	200018cc 	.word	0x200018cc
   12f30:	00012bd5 	.word	0x00012bd5

00012f34 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
   12f34:	b580      	push	{r7, lr}
   12f36:	b082      	sub	sp, #8
   12f38:	af00      	add	r7, sp, #0
   12f3a:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
   12f3c:	687b      	ldr	r3, [r7, #4]
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d008      	beq.n	12f54 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
   12f42:	23e1      	movs	r3, #225	; 0xe1
   12f44:	009a      	lsls	r2, r3, #2
   12f46:	6879      	ldr	r1, [r7, #4]
   12f48:	4b05      	ldr	r3, [pc, #20]	; (12f60 <SecureElementRestoreNvmCtx+0x2c>)
   12f4a:	0018      	movs	r0, r3
   12f4c:	4b05      	ldr	r3, [pc, #20]	; (12f64 <SecureElementRestoreNvmCtx+0x30>)
   12f4e:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
   12f50:	2300      	movs	r3, #0
   12f52:	e000      	b.n	12f56 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
   12f54:	2302      	movs	r3, #2
    }
}
   12f56:	0018      	movs	r0, r3
   12f58:	46bd      	mov	sp, r7
   12f5a:	b002      	add	sp, #8
   12f5c:	bd80      	pop	{r7, pc}
   12f5e:	46c0      	nop			; (mov r8, r8)
   12f60:	20001548 	.word	0x20001548
   12f64:	00002955 	.word	0x00002955

00012f68 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
   12f68:	b580      	push	{r7, lr}
   12f6a:	b082      	sub	sp, #8
   12f6c:	af00      	add	r7, sp, #0
   12f6e:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
   12f70:	687b      	ldr	r3, [r7, #4]
   12f72:	22e1      	movs	r2, #225	; 0xe1
   12f74:	0092      	lsls	r2, r2, #2
   12f76:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
   12f78:	4b02      	ldr	r3, [pc, #8]	; (12f84 <SecureElementGetNvmCtx+0x1c>)
}
   12f7a:	0018      	movs	r0, r3
   12f7c:	46bd      	mov	sp, r7
   12f7e:	b002      	add	sp, #8
   12f80:	bd80      	pop	{r7, pc}
   12f82:	46c0      	nop			; (mov r8, r8)
   12f84:	20001548 	.word	0x20001548

00012f88 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
   12f88:	b5b0      	push	{r4, r5, r7, lr}
   12f8a:	b088      	sub	sp, #32
   12f8c:	af00      	add	r7, sp, #0
   12f8e:	0002      	movs	r2, r0
   12f90:	6039      	str	r1, [r7, #0]
   12f92:	1dfb      	adds	r3, r7, #7
   12f94:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
   12f96:	683b      	ldr	r3, [r7, #0]
   12f98:	2b00      	cmp	r3, #0
   12f9a:	d101      	bne.n	12fa0 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   12f9c:	2302      	movs	r3, #2
   12f9e:	e066      	b.n	1306e <SecureElementSetKey+0xe6>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   12fa0:	231e      	movs	r3, #30
   12fa2:	18fb      	adds	r3, r7, r3
   12fa4:	2206      	movs	r2, #6
   12fa6:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   12fa8:	231f      	movs	r3, #31
   12faa:	18fb      	adds	r3, r7, r3
   12fac:	2200      	movs	r2, #0
   12fae:	701a      	strb	r2, [r3, #0]
   12fb0:	e057      	b.n	13062 <SecureElementSetKey+0xda>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
   12fb2:	231f      	movs	r3, #31
   12fb4:	18fb      	adds	r3, r7, r3
   12fb6:	781a      	ldrb	r2, [r3, #0]
   12fb8:	482f      	ldr	r0, [pc, #188]	; (13078 <SecureElementSetKey+0xf0>)
   12fba:	2383      	movs	r3, #131	; 0x83
   12fbc:	0099      	lsls	r1, r3, #2
   12fbe:	0013      	movs	r3, r2
   12fc0:	011b      	lsls	r3, r3, #4
   12fc2:	189b      	adds	r3, r3, r2
   12fc4:	18c3      	adds	r3, r0, r3
   12fc6:	185b      	adds	r3, r3, r1
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	1dfa      	adds	r2, r7, #7
   12fcc:	7812      	ldrb	r2, [r2, #0]
   12fce:	429a      	cmp	r2, r3
   12fd0:	d140      	bne.n	13054 <SecureElementSetKey+0xcc>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
   12fd2:	231f      	movs	r3, #31
   12fd4:	18fb      	adds	r3, r7, r3
   12fd6:	781a      	ldrb	r2, [r3, #0]
   12fd8:	4827      	ldr	r0, [pc, #156]	; (13078 <SecureElementSetKey+0xf0>)
   12fda:	2383      	movs	r3, #131	; 0x83
   12fdc:	0099      	lsls	r1, r3, #2
   12fde:	0013      	movs	r3, r2
   12fe0:	011b      	lsls	r3, r3, #4
   12fe2:	189b      	adds	r3, r3, r2
   12fe4:	18c3      	adds	r3, r0, r3
   12fe6:	185b      	adds	r3, r3, r1
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	b25b      	sxtb	r3, r3
   12fec:	2b00      	cmp	r3, #0
   12fee:	da1b      	bge.n	13028 <SecureElementSetKey+0xa0>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
   12ff0:	230c      	movs	r3, #12
   12ff2:	18fb      	adds	r3, r7, r3
   12ff4:	0018      	movs	r0, r3
   12ff6:	2310      	movs	r3, #16
   12ff8:	001a      	movs	r2, r3
   12ffa:	2100      	movs	r1, #0
   12ffc:	4b1f      	ldr	r3, [pc, #124]	; (1307c <SecureElementSetKey+0xf4>)
   12ffe:	4798      	blx	r3

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   13000:	231e      	movs	r3, #30
   13002:	18fc      	adds	r4, r7, r3
   13004:	230c      	movs	r3, #12
   13006:	18fb      	adds	r3, r7, r3
   13008:	6838      	ldr	r0, [r7, #0]
   1300a:	227f      	movs	r2, #127	; 0x7f
   1300c:	2110      	movs	r1, #16
   1300e:	4d1c      	ldr	r5, [pc, #112]	; (13080 <SecureElementSetKey+0xf8>)
   13010:	47a8      	blx	r5
   13012:	0003      	movs	r3, r0
   13014:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
   13016:	231e      	movs	r3, #30
   13018:	18fb      	adds	r3, r7, r3
   1301a:	781b      	ldrb	r3, [r3, #0]
   1301c:	2b00      	cmp	r3, #0
   1301e:	d019      	beq.n	13054 <SecureElementSetKey+0xcc>
                {
                    return retval;
   13020:	231e      	movs	r3, #30
   13022:	18fb      	adds	r3, r7, r3
   13024:	781b      	ldrb	r3, [r3, #0]
   13026:	e022      	b.n	1306e <SecureElementSetKey+0xe6>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
   13028:	231f      	movs	r3, #31
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	781a      	ldrb	r2, [r3, #0]
   1302e:	0013      	movs	r3, r2
   13030:	011b      	lsls	r3, r3, #4
   13032:	189b      	adds	r3, r3, r2
   13034:	2282      	movs	r2, #130	; 0x82
   13036:	0092      	lsls	r2, r2, #2
   13038:	189a      	adds	r2, r3, r2
   1303a:	4b0f      	ldr	r3, [pc, #60]	; (13078 <SecureElementSetKey+0xf0>)
   1303c:	18d3      	adds	r3, r2, r3
   1303e:	3305      	adds	r3, #5
   13040:	6839      	ldr	r1, [r7, #0]
   13042:	2210      	movs	r2, #16
   13044:	0018      	movs	r0, r3
   13046:	4b0f      	ldr	r3, [pc, #60]	; (13084 <SecureElementSetKey+0xfc>)
   13048:	4798      	blx	r3
                SeNvmCtxChanged( );
   1304a:	4b0f      	ldr	r3, [pc, #60]	; (13088 <SecureElementSetKey+0x100>)
   1304c:	681b      	ldr	r3, [r3, #0]
   1304e:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
   13050:	2300      	movs	r3, #0
   13052:	e00c      	b.n	1306e <SecureElementSetKey+0xe6>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   13054:	231f      	movs	r3, #31
   13056:	18fb      	adds	r3, r7, r3
   13058:	781a      	ldrb	r2, [r3, #0]
   1305a:	231f      	movs	r3, #31
   1305c:	18fb      	adds	r3, r7, r3
   1305e:	3201      	adds	r2, #1
   13060:	701a      	strb	r2, [r3, #0]
   13062:	231f      	movs	r3, #31
   13064:	18fb      	adds	r3, r7, r3
   13066:	781b      	ldrb	r3, [r3, #0]
   13068:	2b15      	cmp	r3, #21
   1306a:	d9a2      	bls.n	12fb2 <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   1306c:	2303      	movs	r3, #3
}
   1306e:	0018      	movs	r0, r3
   13070:	46bd      	mov	sp, r7
   13072:	b008      	add	sp, #32
   13074:	bdb0      	pop	{r4, r5, r7, pc}
   13076:	46c0      	nop			; (mov r8, r8)
   13078:	20001548 	.word	0x20001548
   1307c:	0001a0e1 	.word	0x0001a0e1
   13080:	00013165 	.word	0x00013165
   13084:	00002955 	.word	0x00002955
   13088:	200018cc 	.word	0x200018cc

0001308c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
   1308c:	b590      	push	{r4, r7, lr}
   1308e:	b085      	sub	sp, #20
   13090:	af00      	add	r7, sp, #0
   13092:	60f8      	str	r0, [r7, #12]
   13094:	0008      	movs	r0, r1
   13096:	0011      	movs	r1, r2
   13098:	607b      	str	r3, [r7, #4]
   1309a:	230a      	movs	r3, #10
   1309c:	18fb      	adds	r3, r7, r3
   1309e:	1c02      	adds	r2, r0, #0
   130a0:	801a      	strh	r2, [r3, #0]
   130a2:	2309      	movs	r3, #9
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1c0a      	adds	r2, r1, #0
   130a8:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
   130aa:	2309      	movs	r3, #9
   130ac:	18fb      	adds	r3, r7, r3
   130ae:	781b      	ldrb	r3, [r3, #0]
   130b0:	2b7e      	cmp	r3, #126	; 0x7e
   130b2:	d901      	bls.n	130b8 <SecureElementComputeAesCmac+0x2c>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   130b4:	2303      	movs	r3, #3
   130b6:	e00b      	b.n	130d0 <SecureElementComputeAesCmac+0x44>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
   130b8:	687c      	ldr	r4, [r7, #4]
   130ba:	2309      	movs	r3, #9
   130bc:	18fb      	adds	r3, r7, r3
   130be:	781a      	ldrb	r2, [r3, #0]
   130c0:	230a      	movs	r3, #10
   130c2:	18fb      	adds	r3, r7, r3
   130c4:	8819      	ldrh	r1, [r3, #0]
   130c6:	68f8      	ldr	r0, [r7, #12]
   130c8:	0023      	movs	r3, r4
   130ca:	4c03      	ldr	r4, [pc, #12]	; (130d8 <SecureElementComputeAesCmac+0x4c>)
   130cc:	47a0      	blx	r4
   130ce:	0003      	movs	r3, r0
}
   130d0:	0018      	movs	r0, r3
   130d2:	46bd      	mov	sp, r7
   130d4:	b005      	add	sp, #20
   130d6:	bd90      	pop	{r4, r7, pc}
   130d8:	00012b01 	.word	0x00012b01

000130dc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
   130dc:	b5b0      	push	{r4, r5, r7, lr}
   130de:	b086      	sub	sp, #24
   130e0:	af00      	add	r7, sp, #0
   130e2:	60f8      	str	r0, [r7, #12]
   130e4:	0008      	movs	r0, r1
   130e6:	607a      	str	r2, [r7, #4]
   130e8:	0019      	movs	r1, r3
   130ea:	230a      	movs	r3, #10
   130ec:	18fb      	adds	r3, r7, r3
   130ee:	1c02      	adds	r2, r0, #0
   130f0:	801a      	strh	r2, [r3, #0]
   130f2:	2309      	movs	r3, #9
   130f4:	18fb      	adds	r3, r7, r3
   130f6:	1c0a      	adds	r2, r1, #0
   130f8:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
   130fa:	68fb      	ldr	r3, [r7, #12]
   130fc:	2b00      	cmp	r3, #0
   130fe:	d101      	bne.n	13104 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   13100:	2302      	movs	r3, #2
   13102:	e029      	b.n	13158 <SecureElementVerifyAesCmac+0x7c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   13104:	2317      	movs	r3, #23
   13106:	18fb      	adds	r3, r7, r3
   13108:	2206      	movs	r2, #6
   1310a:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
   1310c:	2300      	movs	r3, #0
   1310e:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
   13110:	2317      	movs	r3, #23
   13112:	18fc      	adds	r4, r7, r3
   13114:	2310      	movs	r3, #16
   13116:	18fd      	adds	r5, r7, r3
   13118:	2309      	movs	r3, #9
   1311a:	18fb      	adds	r3, r7, r3
   1311c:	781a      	ldrb	r2, [r3, #0]
   1311e:	230a      	movs	r3, #10
   13120:	18fb      	adds	r3, r7, r3
   13122:	8819      	ldrh	r1, [r3, #0]
   13124:	68f8      	ldr	r0, [r7, #12]
   13126:	002b      	movs	r3, r5
   13128:	4d0d      	ldr	r5, [pc, #52]	; (13160 <SecureElementVerifyAesCmac+0x84>)
   1312a:	47a8      	blx	r5
   1312c:	0003      	movs	r3, r0
   1312e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   13130:	2317      	movs	r3, #23
   13132:	18fb      	adds	r3, r7, r3
   13134:	781b      	ldrb	r3, [r3, #0]
   13136:	2b00      	cmp	r3, #0
   13138:	d003      	beq.n	13142 <SecureElementVerifyAesCmac+0x66>
    {
        return retval;
   1313a:	2317      	movs	r3, #23
   1313c:	18fb      	adds	r3, r7, r3
   1313e:	781b      	ldrb	r3, [r3, #0]
   13140:	e00a      	b.n	13158 <SecureElementVerifyAesCmac+0x7c>
    }

    if( expectedCmac != compCmac )
   13142:	693b      	ldr	r3, [r7, #16]
   13144:	687a      	ldr	r2, [r7, #4]
   13146:	429a      	cmp	r2, r3
   13148:	d003      	beq.n	13152 <SecureElementVerifyAesCmac+0x76>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
   1314a:	2317      	movs	r3, #23
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	2201      	movs	r2, #1
   13150:	701a      	strb	r2, [r3, #0]
    }

    return retval;
   13152:	2317      	movs	r3, #23
   13154:	18fb      	adds	r3, r7, r3
   13156:	781b      	ldrb	r3, [r3, #0]
}
   13158:	0018      	movs	r0, r3
   1315a:	46bd      	mov	sp, r7
   1315c:	b006      	add	sp, #24
   1315e:	bdb0      	pop	{r4, r5, r7, pc}
   13160:	00012b01 	.word	0x00012b01

00013164 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
   13164:	b590      	push	{r4, r7, lr}
   13166:	b087      	sub	sp, #28
   13168:	af00      	add	r7, sp, #0
   1316a:	60f8      	str	r0, [r7, #12]
   1316c:	0008      	movs	r0, r1
   1316e:	0011      	movs	r1, r2
   13170:	607b      	str	r3, [r7, #4]
   13172:	230a      	movs	r3, #10
   13174:	18fb      	adds	r3, r7, r3
   13176:	1c02      	adds	r2, r0, #0
   13178:	801a      	strh	r2, [r3, #0]
   1317a:	2309      	movs	r3, #9
   1317c:	18fb      	adds	r3, r7, r3
   1317e:	1c0a      	adds	r2, r1, #0
   13180:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
   13182:	68fb      	ldr	r3, [r7, #12]
   13184:	2b00      	cmp	r3, #0
   13186:	d002      	beq.n	1318e <SecureElementAesEncrypt+0x2a>
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	2b00      	cmp	r3, #0
   1318c:	d101      	bne.n	13192 <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   1318e:	2302      	movs	r3, #2
   13190:	e051      	b.n	13236 <SecureElementAesEncrypt+0xd2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
   13192:	230a      	movs	r3, #10
   13194:	18fb      	adds	r3, r7, r3
   13196:	881b      	ldrh	r3, [r3, #0]
   13198:	220f      	movs	r2, #15
   1319a:	4013      	ands	r3, r2
   1319c:	b29b      	uxth	r3, r3
   1319e:	2b00      	cmp	r3, #0
   131a0:	d001      	beq.n	131a6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   131a2:	2305      	movs	r3, #5
   131a4:	e047      	b.n	13236 <SecureElementAesEncrypt+0xd2>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
   131a6:	4b26      	ldr	r3, [pc, #152]	; (13240 <SecureElementAesEncrypt+0xdc>)
   131a8:	22f0      	movs	r2, #240	; 0xf0
   131aa:	2100      	movs	r1, #0
   131ac:	0018      	movs	r0, r3
   131ae:	4b25      	ldr	r3, [pc, #148]	; (13244 <SecureElementAesEncrypt+0xe0>)
   131b0:	4798      	blx	r3

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
   131b2:	2316      	movs	r3, #22
   131b4:	18fc      	adds	r4, r7, r3
   131b6:	2310      	movs	r3, #16
   131b8:	18fa      	adds	r2, r7, r3
   131ba:	2309      	movs	r3, #9
   131bc:	18fb      	adds	r3, r7, r3
   131be:	781b      	ldrb	r3, [r3, #0]
   131c0:	0011      	movs	r1, r2
   131c2:	0018      	movs	r0, r3
   131c4:	4b20      	ldr	r3, [pc, #128]	; (13248 <SecureElementAesEncrypt+0xe4>)
   131c6:	4798      	blx	r3
   131c8:	0003      	movs	r3, r0
   131ca:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
   131cc:	2316      	movs	r3, #22
   131ce:	18fb      	adds	r3, r7, r3
   131d0:	781b      	ldrb	r3, [r3, #0]
   131d2:	2b00      	cmp	r3, #0
   131d4:	d12c      	bne.n	13230 <SecureElementAesEncrypt+0xcc>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
   131d6:	693b      	ldr	r3, [r7, #16]
   131d8:	3301      	adds	r3, #1
   131da:	4a19      	ldr	r2, [pc, #100]	; (13240 <SecureElementAesEncrypt+0xdc>)
   131dc:	2110      	movs	r1, #16
   131de:	0018      	movs	r0, r3
   131e0:	4b1a      	ldr	r3, [pc, #104]	; (1324c <SecureElementAesEncrypt+0xe8>)
   131e2:	4798      	blx	r3

        uint8_t block = 0;
   131e4:	2317      	movs	r3, #23
   131e6:	18fb      	adds	r3, r7, r3
   131e8:	2200      	movs	r2, #0
   131ea:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
   131ec:	e01b      	b.n	13226 <SecureElementAesEncrypt+0xc2>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
   131ee:	2317      	movs	r3, #23
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	781b      	ldrb	r3, [r3, #0]
   131f4:	68fa      	ldr	r2, [r7, #12]
   131f6:	18d0      	adds	r0, r2, r3
   131f8:	2317      	movs	r3, #23
   131fa:	18fb      	adds	r3, r7, r3
   131fc:	781b      	ldrb	r3, [r3, #0]
   131fe:	687a      	ldr	r2, [r7, #4]
   13200:	18d3      	adds	r3, r2, r3
   13202:	4a0f      	ldr	r2, [pc, #60]	; (13240 <SecureElementAesEncrypt+0xdc>)
   13204:	0019      	movs	r1, r3
   13206:	4b12      	ldr	r3, [pc, #72]	; (13250 <SecureElementAesEncrypt+0xec>)
   13208:	4798      	blx	r3
            block = block + 16;
   1320a:	2317      	movs	r3, #23
   1320c:	18fb      	adds	r3, r7, r3
   1320e:	2217      	movs	r2, #23
   13210:	18ba      	adds	r2, r7, r2
   13212:	7812      	ldrb	r2, [r2, #0]
   13214:	3210      	adds	r2, #16
   13216:	701a      	strb	r2, [r3, #0]
            size = size - 16;
   13218:	230a      	movs	r3, #10
   1321a:	18fb      	adds	r3, r7, r3
   1321c:	220a      	movs	r2, #10
   1321e:	18ba      	adds	r2, r7, r2
   13220:	8812      	ldrh	r2, [r2, #0]
   13222:	3a10      	subs	r2, #16
   13224:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
   13226:	230a      	movs	r3, #10
   13228:	18fb      	adds	r3, r7, r3
   1322a:	881b      	ldrh	r3, [r3, #0]
   1322c:	2b00      	cmp	r3, #0
   1322e:	d1de      	bne.n	131ee <SecureElementAesEncrypt+0x8a>
        }
    }
    return retval;
   13230:	2316      	movs	r3, #22
   13232:	18fb      	adds	r3, r7, r3
   13234:	781b      	ldrb	r3, [r3, #0]
}
   13236:	0018      	movs	r0, r3
   13238:	46bd      	mov	sp, r7
   1323a:	b007      	add	sp, #28
   1323c:	bd90      	pop	{r4, r7, pc}
   1323e:	46c0      	nop			; (mov r8, r8)
   13240:	20001548 	.word	0x20001548
   13244:	000029cd 	.word	0x000029cd
   13248:	00012a81 	.word	0x00012a81
   1324c:	00012249 	.word	0x00012249
   13250:	000124e5 	.word	0x000124e5

00013254 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
   13254:	b5b0      	push	{r4, r5, r7, lr}
   13256:	b08a      	sub	sp, #40	; 0x28
   13258:	af00      	add	r7, sp, #0
   1325a:	60f8      	str	r0, [r7, #12]
   1325c:	60b9      	str	r1, [r7, #8]
   1325e:	0019      	movs	r1, r3
   13260:	1dfb      	adds	r3, r7, #7
   13262:	701a      	strb	r2, [r3, #0]
   13264:	1dbb      	adds	r3, r7, #6
   13266:	1c0a      	adds	r2, r1, #0
   13268:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
   1326a:	68bb      	ldr	r3, [r7, #8]
   1326c:	2b00      	cmp	r3, #0
   1326e:	d101      	bne.n	13274 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
   13270:	2302      	movs	r3, #2
   13272:	e06a      	b.n	1334a <SecureElementDeriveAndStoreKey+0xf6>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
   13274:	2327      	movs	r3, #39	; 0x27
   13276:	18fb      	adds	r3, r7, r3
   13278:	2206      	movs	r2, #6
   1327a:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
   1327c:	2314      	movs	r3, #20
   1327e:	18fb      	adds	r3, r7, r3
   13280:	0018      	movs	r0, r3
   13282:	2310      	movs	r3, #16
   13284:	001a      	movs	r2, r3
   13286:	2100      	movs	r1, #0
   13288:	4b32      	ldr	r3, [pc, #200]	; (13354 <SecureElementDeriveAndStoreKey+0x100>)
   1328a:	4798      	blx	r3

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
   1328c:	1dbb      	adds	r3, r7, #6
   1328e:	781b      	ldrb	r3, [r3, #0]
   13290:	2b7f      	cmp	r3, #127	; 0x7f
   13292:	d10e      	bne.n	132b2 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
   13294:	1dfb      	adds	r3, r7, #7
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	2b00      	cmp	r3, #0
   1329a:	d104      	bne.n	132a6 <SecureElementDeriveAndStoreKey+0x52>
   1329c:	230c      	movs	r3, #12
   1329e:	18fb      	adds	r3, r7, r3
   132a0:	789b      	ldrb	r3, [r3, #2]
   132a2:	2b00      	cmp	r3, #0
   132a4:	d003      	beq.n	132ae <SecureElementDeriveAndStoreKey+0x5a>
   132a6:	1dfb      	adds	r3, r7, #7
   132a8:	781b      	ldrb	r3, [r3, #0]
   132aa:	2b01      	cmp	r3, #1
   132ac:	d101      	bne.n	132b2 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   132ae:	2303      	movs	r3, #3
   132b0:	e04b      	b.n	1334a <SecureElementDeriveAndStoreKey+0xf6>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
   132b2:	68bb      	ldr	r3, [r7, #8]
   132b4:	781a      	ldrb	r2, [r3, #0]
   132b6:	2324      	movs	r3, #36	; 0x24
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
   132bc:	68bb      	ldr	r3, [r7, #8]
   132be:	3301      	adds	r3, #1
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	021b      	lsls	r3, r3, #8
   132c4:	b21a      	sxth	r2, r3
   132c6:	2324      	movs	r3, #36	; 0x24
   132c8:	18fb      	adds	r3, r7, r3
   132ca:	2100      	movs	r1, #0
   132cc:	5e5b      	ldrsh	r3, [r3, r1]
   132ce:	4313      	orrs	r3, r2
   132d0:	b21a      	sxth	r2, r3
   132d2:	2324      	movs	r3, #36	; 0x24
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
   132d8:	1dbb      	adds	r3, r7, #6
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2b7f      	cmp	r3, #127	; 0x7f
   132de:	d108      	bne.n	132f2 <SecureElementDeriveAndStoreKey+0x9e>
   132e0:	2324      	movs	r3, #36	; 0x24
   132e2:	18fb      	adds	r3, r7, r3
   132e4:	881b      	ldrh	r3, [r3, #0]
   132e6:	2b0f      	cmp	r3, #15
   132e8:	d803      	bhi.n	132f2 <SecureElementDeriveAndStoreKey+0x9e>
    {
        return retval;
   132ea:	2327      	movs	r3, #39	; 0x27
   132ec:	18fb      	adds	r3, r7, r3
   132ee:	781b      	ldrb	r3, [r3, #0]
   132f0:	e02b      	b.n	1334a <SecureElementDeriveAndStoreKey+0xf6>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
   132f2:	2327      	movs	r3, #39	; 0x27
   132f4:	18fc      	adds	r4, r7, r3
   132f6:	2314      	movs	r3, #20
   132f8:	18f9      	adds	r1, r7, r3
   132fa:	1dfb      	adds	r3, r7, #7
   132fc:	781a      	ldrb	r2, [r3, #0]
   132fe:	68b8      	ldr	r0, [r7, #8]
   13300:	000b      	movs	r3, r1
   13302:	2110      	movs	r1, #16
   13304:	4d14      	ldr	r5, [pc, #80]	; (13358 <SecureElementDeriveAndStoreKey+0x104>)
   13306:	47a8      	blx	r5
   13308:	0003      	movs	r3, r0
   1330a:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   1330c:	2327      	movs	r3, #39	; 0x27
   1330e:	18fb      	adds	r3, r7, r3
   13310:	781b      	ldrb	r3, [r3, #0]
   13312:	2b00      	cmp	r3, #0
   13314:	d003      	beq.n	1331e <SecureElementDeriveAndStoreKey+0xca>
    {
        return retval;
   13316:	2327      	movs	r3, #39	; 0x27
   13318:	18fb      	adds	r3, r7, r3
   1331a:	781b      	ldrb	r3, [r3, #0]
   1331c:	e015      	b.n	1334a <SecureElementDeriveAndStoreKey+0xf6>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
   1331e:	2327      	movs	r3, #39	; 0x27
   13320:	18fc      	adds	r4, r7, r3
   13322:	2314      	movs	r3, #20
   13324:	18fa      	adds	r2, r7, r3
   13326:	1dbb      	adds	r3, r7, #6
   13328:	781b      	ldrb	r3, [r3, #0]
   1332a:	0011      	movs	r1, r2
   1332c:	0018      	movs	r0, r3
   1332e:	4b0b      	ldr	r3, [pc, #44]	; (1335c <SecureElementDeriveAndStoreKey+0x108>)
   13330:	4798      	blx	r3
   13332:	0003      	movs	r3, r0
   13334:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
   13336:	2327      	movs	r3, #39	; 0x27
   13338:	18fb      	adds	r3, r7, r3
   1333a:	781b      	ldrb	r3, [r3, #0]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d003      	beq.n	13348 <SecureElementDeriveAndStoreKey+0xf4>
    {
        return retval;
   13340:	2327      	movs	r3, #39	; 0x27
   13342:	18fb      	adds	r3, r7, r3
   13344:	781b      	ldrb	r3, [r3, #0]
   13346:	e000      	b.n	1334a <SecureElementDeriveAndStoreKey+0xf6>
    }

    return SECURE_ELEMENT_SUCCESS;
   13348:	2300      	movs	r3, #0
}
   1334a:	0018      	movs	r0, r3
   1334c:	46bd      	mov	sp, r7
   1334e:	b00a      	add	sp, #40	; 0x28
   13350:	bdb0      	pop	{r4, r5, r7, pc}
   13352:	46c0      	nop			; (mov r8, r8)
   13354:	0001a0e1 	.word	0x0001a0e1
   13358:	00013165 	.word	0x00013165
   1335c:	00012f89 	.word	0x00012f89

00013360 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
   13360:	b580      	push	{r7, lr}
   13362:	b084      	sub	sp, #16
   13364:	af00      	add	r7, sp, #0
   13366:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
   13368:	4b2f      	ldr	r3, [pc, #188]	; (13428 <SX1276Init+0xc8>)
   1336a:	687a      	ldr	r2, [r7, #4]
   1336c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1336e:	4a2f      	ldr	r2, [pc, #188]	; (1342c <SX1276Init+0xcc>)
   13370:	4b2f      	ldr	r3, [pc, #188]	; (13430 <SX1276Init+0xd0>)
   13372:	0011      	movs	r1, r2
   13374:	0018      	movs	r0, r3
   13376:	4b2f      	ldr	r3, [pc, #188]	; (13434 <SX1276Init+0xd4>)
   13378:	4798      	blx	r3
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   1337a:	4a2c      	ldr	r2, [pc, #176]	; (1342c <SX1276Init+0xcc>)
   1337c:	4b2e      	ldr	r3, [pc, #184]	; (13438 <SX1276Init+0xd8>)
   1337e:	0011      	movs	r1, r2
   13380:	0018      	movs	r0, r3
   13382:	4b2c      	ldr	r3, [pc, #176]	; (13434 <SX1276Init+0xd4>)
   13384:	4798      	blx	r3
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   13386:	4a29      	ldr	r2, [pc, #164]	; (1342c <SX1276Init+0xcc>)
   13388:	4b2c      	ldr	r3, [pc, #176]	; (1343c <SX1276Init+0xdc>)
   1338a:	0011      	movs	r1, r2
   1338c:	0018      	movs	r0, r3
   1338e:	4b29      	ldr	r3, [pc, #164]	; (13434 <SX1276Init+0xd4>)
   13390:	4798      	blx	r3

    SX1276Reset( );
   13392:	4b2b      	ldr	r3, [pc, #172]	; (13440 <SX1276Init+0xe0>)
   13394:	4798      	blx	r3

    RxChainCalibration( );
   13396:	4b2b      	ldr	r3, [pc, #172]	; (13444 <SX1276Init+0xe4>)
   13398:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1339a:	2000      	movs	r0, #0
   1339c:	4b2a      	ldr	r3, [pc, #168]	; (13448 <SX1276Init+0xe8>)
   1339e:	4798      	blx	r3

    SX1276IoIrqInit( DioIrq );
   133a0:	4b2a      	ldr	r3, [pc, #168]	; (1344c <SX1276Init+0xec>)
   133a2:	0018      	movs	r0, r3
   133a4:	4b2a      	ldr	r3, [pc, #168]	; (13450 <SX1276Init+0xf0>)
   133a6:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   133a8:	230f      	movs	r3, #15
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	2200      	movs	r2, #0
   133ae:	701a      	strb	r2, [r3, #0]
   133b0:	e029      	b.n	13406 <SX1276Init+0xa6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
   133b2:	230f      	movs	r3, #15
   133b4:	18fb      	adds	r3, r7, r3
   133b6:	781a      	ldrb	r2, [r3, #0]
   133b8:	4926      	ldr	r1, [pc, #152]	; (13454 <SX1276Init+0xf4>)
   133ba:	0013      	movs	r3, r2
   133bc:	005b      	lsls	r3, r3, #1
   133be:	189b      	adds	r3, r3, r2
   133c0:	5c5b      	ldrb	r3, [r3, r1]
   133c2:	0018      	movs	r0, r3
   133c4:	4b24      	ldr	r3, [pc, #144]	; (13458 <SX1276Init+0xf8>)
   133c6:	4798      	blx	r3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   133c8:	230f      	movs	r3, #15
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	781a      	ldrb	r2, [r3, #0]
   133ce:	4921      	ldr	r1, [pc, #132]	; (13454 <SX1276Init+0xf4>)
   133d0:	0013      	movs	r3, r2
   133d2:	005b      	lsls	r3, r3, #1
   133d4:	189b      	adds	r3, r3, r2
   133d6:	18cb      	adds	r3, r1, r3
   133d8:	3301      	adds	r3, #1
   133da:	781b      	ldrb	r3, [r3, #0]
   133dc:	b298      	uxth	r0, r3
   133de:	230f      	movs	r3, #15
   133e0:	18fb      	adds	r3, r7, r3
   133e2:	781a      	ldrb	r2, [r3, #0]
   133e4:	491b      	ldr	r1, [pc, #108]	; (13454 <SX1276Init+0xf4>)
   133e6:	0013      	movs	r3, r2
   133e8:	005b      	lsls	r3, r3, #1
   133ea:	189b      	adds	r3, r3, r2
   133ec:	18cb      	adds	r3, r1, r3
   133ee:	3302      	adds	r3, #2
   133f0:	781b      	ldrb	r3, [r3, #0]
   133f2:	0019      	movs	r1, r3
   133f4:	4b19      	ldr	r3, [pc, #100]	; (1345c <SX1276Init+0xfc>)
   133f6:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   133f8:	230f      	movs	r3, #15
   133fa:	18fb      	adds	r3, r7, r3
   133fc:	781a      	ldrb	r2, [r3, #0]
   133fe:	230f      	movs	r3, #15
   13400:	18fb      	adds	r3, r7, r3
   13402:	3201      	adds	r2, #1
   13404:	701a      	strb	r2, [r3, #0]
   13406:	230f      	movs	r3, #15
   13408:	18fb      	adds	r3, r7, r3
   1340a:	781b      	ldrb	r3, [r3, #0]
   1340c:	2b0f      	cmp	r3, #15
   1340e:	d9d0      	bls.n	133b2 <SX1276Init+0x52>
    }

    SX1276SetModem( MODEM_FSK );
   13410:	2000      	movs	r0, #0
   13412:	4b11      	ldr	r3, [pc, #68]	; (13458 <SX1276Init+0xf8>)
   13414:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
   13416:	4b12      	ldr	r3, [pc, #72]	; (13460 <SX1276Init+0x100>)
   13418:	22e0      	movs	r2, #224	; 0xe0
   1341a:	2100      	movs	r1, #0
   1341c:	5499      	strb	r1, [r3, r2]
}
   1341e:	46c0      	nop			; (mov r8, r8)
   13420:	46bd      	mov	sp, r7
   13422:	b004      	add	sp, #16
   13424:	bd80      	pop	{r7, pc}
   13426:	46c0      	nop			; (mov r8, r8)
   13428:	200018d0 	.word	0x200018d0
   1342c:	000150b1 	.word	0x000150b1
   13430:	20001c2c 	.word	0x20001c2c
   13434:	00015f85 	.word	0x00015f85
   13438:	20001da0 	.word	0x20001da0
   1343c:	20001c44 	.word	0x20001c44
   13440:	000044b9 	.word	0x000044b9
   13444:	00013645 	.word	0x00013645
   13448:	00014cd9 	.word	0x00014cd9
   1344c:	2000005c 	.word	0x2000005c
   13450:	0000443d 	.word	0x0000443d
   13454:	0001f834 	.word	0x0001f834
   13458:	00014d41 	.word	0x00014d41
   1345c:	00014e09 	.word	0x00014e09
   13460:	20001c5c 	.word	0x20001c5c

00013464 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
   13464:	b580      	push	{r7, lr}
   13466:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
   13468:	4b02      	ldr	r3, [pc, #8]	; (13474 <SX1276GetStatus+0x10>)
   1346a:	22e0      	movs	r2, #224	; 0xe0
   1346c:	5c9b      	ldrb	r3, [r3, r2]
}
   1346e:	0018      	movs	r0, r3
   13470:	46bd      	mov	sp, r7
   13472:	bd80      	pop	{r7, pc}
   13474:	20001c5c 	.word	0x20001c5c

00013478 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
   13478:	b590      	push	{r4, r7, lr}
   1347a:	b083      	sub	sp, #12
   1347c:	af00      	add	r7, sp, #0
   1347e:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
   13480:	4b16      	ldr	r3, [pc, #88]	; (134dc <SX1276SetChannel+0x64>)
   13482:	21e4      	movs	r1, #228	; 0xe4
   13484:	687a      	ldr	r2, [r7, #4]
   13486:	505a      	str	r2, [r3, r1]
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   13488:	4b15      	ldr	r3, [pc, #84]	; (134e0 <SX1276SetChannel+0x68>)
   1348a:	6878      	ldr	r0, [r7, #4]
   1348c:	4798      	blx	r3
   1348e:	4c15      	ldr	r4, [pc, #84]	; (134e4 <SX1276SetChannel+0x6c>)
   13490:	2200      	movs	r2, #0
   13492:	4b15      	ldr	r3, [pc, #84]	; (134e8 <SX1276SetChannel+0x70>)
   13494:	47a0      	blx	r4
   13496:	0003      	movs	r3, r0
   13498:	000c      	movs	r4, r1
   1349a:	0019      	movs	r1, r3
   1349c:	0022      	movs	r2, r4
   1349e:	4b13      	ldr	r3, [pc, #76]	; (134ec <SX1276SetChannel+0x74>)
   134a0:	0008      	movs	r0, r1
   134a2:	0011      	movs	r1, r2
   134a4:	4798      	blx	r3
   134a6:	0003      	movs	r3, r0
   134a8:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
   134aa:	687b      	ldr	r3, [r7, #4]
   134ac:	0c1b      	lsrs	r3, r3, #16
   134ae:	b2db      	uxtb	r3, r3
   134b0:	0019      	movs	r1, r3
   134b2:	2006      	movs	r0, #6
   134b4:	4b0e      	ldr	r3, [pc, #56]	; (134f0 <SX1276SetChannel+0x78>)
   134b6:	4798      	blx	r3
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	0a1b      	lsrs	r3, r3, #8
   134bc:	b2db      	uxtb	r3, r3
   134be:	0019      	movs	r1, r3
   134c0:	2007      	movs	r0, #7
   134c2:	4b0b      	ldr	r3, [pc, #44]	; (134f0 <SX1276SetChannel+0x78>)
   134c4:	4798      	blx	r3
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	b2db      	uxtb	r3, r3
   134ca:	0019      	movs	r1, r3
   134cc:	2008      	movs	r0, #8
   134ce:	4b08      	ldr	r3, [pc, #32]	; (134f0 <SX1276SetChannel+0x78>)
   134d0:	4798      	blx	r3
}
   134d2:	46c0      	nop			; (mov r8, r8)
   134d4:	46bd      	mov	sp, r7
   134d6:	b003      	add	sp, #12
   134d8:	bd90      	pop	{r4, r7, pc}
   134da:	46c0      	nop			; (mov r8, r8)
   134dc:	20001c5c 	.word	0x20001c5c
   134e0:	00019f15 	.word	0x00019f15
   134e4:	00018a95 	.word	0x00018a95
   134e8:	404e8480 	.word	0x404e8480
   134ec:	00017ef5 	.word	0x00017ef5
   134f0:	00014e09 	.word	0x00014e09

000134f4 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
   134f4:	b590      	push	{r4, r7, lr}
   134f6:	b087      	sub	sp, #28
   134f8:	af00      	add	r7, sp, #0
   134fa:	60b9      	str	r1, [r7, #8]
   134fc:	0011      	movs	r1, r2
   134fe:	607b      	str	r3, [r7, #4]
   13500:	230f      	movs	r3, #15
   13502:	18fb      	adds	r3, r7, r3
   13504:	1c02      	adds	r2, r0, #0
   13506:	701a      	strb	r2, [r3, #0]
   13508:	230c      	movs	r3, #12
   1350a:	18fb      	adds	r3, r7, r3
   1350c:	1c0a      	adds	r2, r1, #0
   1350e:	801a      	strh	r2, [r3, #0]
    bool status = true;
   13510:	2317      	movs	r3, #23
   13512:	18fb      	adds	r3, r7, r3
   13514:	2201      	movs	r2, #1
   13516:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
   13518:	2314      	movs	r3, #20
   1351a:	18fb      	adds	r3, r7, r3
   1351c:	2200      	movs	r2, #0
   1351e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
   13520:	2300      	movs	r3, #0
   13522:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
   13524:	230f      	movs	r3, #15
   13526:	18fb      	adds	r3, r7, r3
   13528:	781b      	ldrb	r3, [r3, #0]
   1352a:	0018      	movs	r0, r3
   1352c:	4b1d      	ldr	r3, [pc, #116]	; (135a4 <SX1276IsChannelFree+0xb0>)
   1352e:	4798      	blx	r3

    SX1276SetChannel( freq );
   13530:	68bb      	ldr	r3, [r7, #8]
   13532:	0018      	movs	r0, r3
   13534:	4b1c      	ldr	r3, [pc, #112]	; (135a8 <SX1276IsChannelFree+0xb4>)
   13536:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   13538:	2005      	movs	r0, #5
   1353a:	4b1c      	ldr	r3, [pc, #112]	; (135ac <SX1276IsChannelFree+0xb8>)
   1353c:	4798      	blx	r3

    DelayMs( 1 );
   1353e:	2001      	movs	r0, #1
   13540:	4b1b      	ldr	r3, [pc, #108]	; (135b0 <SX1276IsChannelFree+0xbc>)
   13542:	4798      	blx	r3

    carrierSenseTime = TimerGetCurrentTime( );
   13544:	4b1b      	ldr	r3, [pc, #108]	; (135b4 <SX1276IsChannelFree+0xc0>)
   13546:	4798      	blx	r3
   13548:	0003      	movs	r3, r0
   1354a:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   1354c:	e018      	b.n	13580 <SX1276IsChannelFree+0x8c>
    {
        rssi = SX1276ReadRssi( modem );
   1354e:	2314      	movs	r3, #20
   13550:	18fc      	adds	r4, r7, r3
   13552:	230f      	movs	r3, #15
   13554:	18fb      	adds	r3, r7, r3
   13556:	781b      	ldrb	r3, [r3, #0]
   13558:	0018      	movs	r0, r3
   1355a:	4b17      	ldr	r3, [pc, #92]	; (135b8 <SX1276IsChannelFree+0xc4>)
   1355c:	4798      	blx	r3
   1355e:	0003      	movs	r3, r0
   13560:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
   13562:	2314      	movs	r3, #20
   13564:	18fa      	adds	r2, r7, r3
   13566:	230c      	movs	r3, #12
   13568:	18fb      	adds	r3, r7, r3
   1356a:	2100      	movs	r1, #0
   1356c:	5e52      	ldrsh	r2, [r2, r1]
   1356e:	2100      	movs	r1, #0
   13570:	5e5b      	ldrsh	r3, [r3, r1]
   13572:	429a      	cmp	r2, r3
   13574:	dd04      	ble.n	13580 <SX1276IsChannelFree+0x8c>
        {
            status = false;
   13576:	2317      	movs	r3, #23
   13578:	18fb      	adds	r3, r7, r3
   1357a:	2200      	movs	r2, #0
   1357c:	701a      	strb	r2, [r3, #0]
            break;
   1357e:	e007      	b.n	13590 <SX1276IsChannelFree+0x9c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   13580:	693b      	ldr	r3, [r7, #16]
   13582:	0018      	movs	r0, r3
   13584:	4b0d      	ldr	r3, [pc, #52]	; (135bc <SX1276IsChannelFree+0xc8>)
   13586:	4798      	blx	r3
   13588:	0002      	movs	r2, r0
   1358a:	687b      	ldr	r3, [r7, #4]
   1358c:	429a      	cmp	r2, r3
   1358e:	d3de      	bcc.n	1354e <SX1276IsChannelFree+0x5a>
        }
    }
    SX1276SetSleep( );
   13590:	4b0b      	ldr	r3, [pc, #44]	; (135c0 <SX1276IsChannelFree+0xcc>)
   13592:	4798      	blx	r3
    return status;
   13594:	2317      	movs	r3, #23
   13596:	18fb      	adds	r3, r7, r3
   13598:	781b      	ldrb	r3, [r3, #0]
}
   1359a:	0018      	movs	r0, r3
   1359c:	46bd      	mov	sp, r7
   1359e:	b007      	add	sp, #28
   135a0:	bd90      	pop	{r4, r7, pc}
   135a2:	46c0      	nop			; (mov r8, r8)
   135a4:	00014d41 	.word	0x00014d41
   135a8:	00013479 	.word	0x00013479
   135ac:	00014cd9 	.word	0x00014cd9
   135b0:	00015c35 	.word	0x00015c35
   135b4:	000163e1 	.word	0x000163e1
   135b8:	00014c3d 	.word	0x00014c3d
   135bc:	00016409 	.word	0x00016409
   135c0:	00014609 	.word	0x00014609

000135c4 <SX1276Random>:

uint32_t SX1276Random( void )
{
   135c4:	b580      	push	{r7, lr}
   135c6:	b082      	sub	sp, #8
   135c8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
   135ca:	2300      	movs	r3, #0
   135cc:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
   135ce:	2001      	movs	r0, #1
   135d0:	4b16      	ldr	r3, [pc, #88]	; (1362c <SX1276Random+0x68>)
   135d2:	4798      	blx	r3

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   135d4:	21ff      	movs	r1, #255	; 0xff
   135d6:	2011      	movs	r0, #17
   135d8:	4b15      	ldr	r3, [pc, #84]	; (13630 <SX1276Random+0x6c>)
   135da:	4798      	blx	r3
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   135dc:	2005      	movs	r0, #5
   135de:	4b15      	ldr	r3, [pc, #84]	; (13634 <SX1276Random+0x70>)
   135e0:	4798      	blx	r3

    for( i = 0; i < 32; i++ )
   135e2:	1dfb      	adds	r3, r7, #7
   135e4:	2200      	movs	r2, #0
   135e6:	701a      	strb	r2, [r3, #0]
   135e8:	e015      	b.n	13616 <SX1276Random+0x52>
    {
        DelayMs( 1 );
   135ea:	2001      	movs	r0, #1
   135ec:	4b12      	ldr	r3, [pc, #72]	; (13638 <SX1276Random+0x74>)
   135ee:	4798      	blx	r3
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   135f0:	202c      	movs	r0, #44	; 0x2c
   135f2:	4b12      	ldr	r3, [pc, #72]	; (1363c <SX1276Random+0x78>)
   135f4:	4798      	blx	r3
   135f6:	0003      	movs	r3, r0
   135f8:	001a      	movs	r2, r3
   135fa:	2301      	movs	r3, #1
   135fc:	401a      	ands	r2, r3
   135fe:	1dfb      	adds	r3, r7, #7
   13600:	781b      	ldrb	r3, [r3, #0]
   13602:	409a      	lsls	r2, r3
   13604:	0013      	movs	r3, r2
   13606:	683a      	ldr	r2, [r7, #0]
   13608:	4313      	orrs	r3, r2
   1360a:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
   1360c:	1dfb      	adds	r3, r7, #7
   1360e:	781a      	ldrb	r2, [r3, #0]
   13610:	1dfb      	adds	r3, r7, #7
   13612:	3201      	adds	r2, #1
   13614:	701a      	strb	r2, [r3, #0]
   13616:	1dfb      	adds	r3, r7, #7
   13618:	781b      	ldrb	r3, [r3, #0]
   1361a:	2b1f      	cmp	r3, #31
   1361c:	d9e5      	bls.n	135ea <SX1276Random+0x26>
    }

    SX1276SetSleep( );
   1361e:	4b08      	ldr	r3, [pc, #32]	; (13640 <SX1276Random+0x7c>)
   13620:	4798      	blx	r3

    return rnd;
   13622:	683b      	ldr	r3, [r7, #0]
}
   13624:	0018      	movs	r0, r3
   13626:	46bd      	mov	sp, r7
   13628:	b002      	add	sp, #8
   1362a:	bd80      	pop	{r7, pc}
   1362c:	00014d41 	.word	0x00014d41
   13630:	00014e09 	.word	0x00014e09
   13634:	00014cd9 	.word	0x00014cd9
   13638:	00015c35 	.word	0x00015c35
   1363c:	00014e35 	.word	0x00014e35
   13640:	00014609 	.word	0x00014609

00013644 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
   13644:	b590      	push	{r4, r7, lr}
   13646:	b083      	sub	sp, #12
   13648:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
   1364a:	1dfc      	adds	r4, r7, #7
   1364c:	2009      	movs	r0, #9
   1364e:	4b34      	ldr	r3, [pc, #208]	; (13720 <RxChainCalibration+0xdc>)
   13650:	4798      	blx	r3
   13652:	0003      	movs	r3, r0
   13654:	7023      	strb	r3, [r4, #0]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13656:	2006      	movs	r0, #6
   13658:	4b31      	ldr	r3, [pc, #196]	; (13720 <RxChainCalibration+0xdc>)
   1365a:	4798      	blx	r3
   1365c:	0003      	movs	r3, r0
   1365e:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   13660:	2007      	movs	r0, #7
   13662:	4b2f      	ldr	r3, [pc, #188]	; (13720 <RxChainCalibration+0xdc>)
   13664:	4798      	blx	r3
   13666:	0003      	movs	r3, r0
   13668:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   1366a:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
   1366c:	2008      	movs	r0, #8
   1366e:	4b2c      	ldr	r3, [pc, #176]	; (13720 <RxChainCalibration+0xdc>)
   13670:	4798      	blx	r3
   13672:	0003      	movs	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   13674:	0022      	movs	r2, r4
   13676:	431a      	orrs	r2, r3
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13678:	4b2a      	ldr	r3, [pc, #168]	; (13724 <RxChainCalibration+0xe0>)
   1367a:	0010      	movs	r0, r2
   1367c:	4798      	blx	r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
   1367e:	4c2a      	ldr	r4, [pc, #168]	; (13728 <RxChainCalibration+0xe4>)
   13680:	2200      	movs	r2, #0
   13682:	4b2a      	ldr	r3, [pc, #168]	; (1372c <RxChainCalibration+0xe8>)
   13684:	47a0      	blx	r4
   13686:	0003      	movs	r3, r0
   13688:	000c      	movs	r4, r1
   1368a:	0019      	movs	r1, r3
   1368c:	0022      	movs	r2, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   1368e:	4b28      	ldr	r3, [pc, #160]	; (13730 <RxChainCalibration+0xec>)
   13690:	0008      	movs	r0, r1
   13692:	0011      	movs	r1, r2
   13694:	4798      	blx	r3
   13696:	0003      	movs	r3, r0
   13698:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
   1369a:	2100      	movs	r1, #0
   1369c:	2009      	movs	r0, #9
   1369e:	4b25      	ldr	r3, [pc, #148]	; (13734 <RxChainCalibration+0xf0>)
   136a0:	4798      	blx	r3

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   136a2:	203b      	movs	r0, #59	; 0x3b
   136a4:	4b1e      	ldr	r3, [pc, #120]	; (13720 <RxChainCalibration+0xdc>)
   136a6:	4798      	blx	r3
   136a8:	0003      	movs	r3, r0
   136aa:	001a      	movs	r2, r3
   136ac:	2340      	movs	r3, #64	; 0x40
   136ae:	4313      	orrs	r3, r2
   136b0:	b2db      	uxtb	r3, r3
   136b2:	0019      	movs	r1, r3
   136b4:	203b      	movs	r0, #59	; 0x3b
   136b6:	4b1f      	ldr	r3, [pc, #124]	; (13734 <RxChainCalibration+0xf0>)
   136b8:	4798      	blx	r3
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   136ba:	46c0      	nop			; (mov r8, r8)
   136bc:	203b      	movs	r0, #59	; 0x3b
   136be:	4b18      	ldr	r3, [pc, #96]	; (13720 <RxChainCalibration+0xdc>)
   136c0:	4798      	blx	r3
   136c2:	0003      	movs	r3, r0
   136c4:	001a      	movs	r2, r3
   136c6:	2320      	movs	r3, #32
   136c8:	4013      	ands	r3, r2
   136ca:	2b20      	cmp	r3, #32
   136cc:	d0f6      	beq.n	136bc <RxChainCalibration+0x78>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
   136ce:	4b1a      	ldr	r3, [pc, #104]	; (13738 <RxChainCalibration+0xf4>)
   136d0:	0018      	movs	r0, r3
   136d2:	4b1a      	ldr	r3, [pc, #104]	; (1373c <RxChainCalibration+0xf8>)
   136d4:	4798      	blx	r3

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   136d6:	203b      	movs	r0, #59	; 0x3b
   136d8:	4b11      	ldr	r3, [pc, #68]	; (13720 <RxChainCalibration+0xdc>)
   136da:	4798      	blx	r3
   136dc:	0003      	movs	r3, r0
   136de:	001a      	movs	r2, r3
   136e0:	2340      	movs	r3, #64	; 0x40
   136e2:	4313      	orrs	r3, r2
   136e4:	b2db      	uxtb	r3, r3
   136e6:	0019      	movs	r1, r3
   136e8:	203b      	movs	r0, #59	; 0x3b
   136ea:	4b12      	ldr	r3, [pc, #72]	; (13734 <RxChainCalibration+0xf0>)
   136ec:	4798      	blx	r3
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   136ee:	46c0      	nop			; (mov r8, r8)
   136f0:	203b      	movs	r0, #59	; 0x3b
   136f2:	4b0b      	ldr	r3, [pc, #44]	; (13720 <RxChainCalibration+0xdc>)
   136f4:	4798      	blx	r3
   136f6:	0003      	movs	r3, r0
   136f8:	001a      	movs	r2, r3
   136fa:	2320      	movs	r3, #32
   136fc:	4013      	ands	r3, r2
   136fe:	2b20      	cmp	r3, #32
   13700:	d0f6      	beq.n	136f0 <RxChainCalibration+0xac>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
   13702:	1dfb      	adds	r3, r7, #7
   13704:	781b      	ldrb	r3, [r3, #0]
   13706:	0019      	movs	r1, r3
   13708:	2009      	movs	r0, #9
   1370a:	4b0a      	ldr	r3, [pc, #40]	; (13734 <RxChainCalibration+0xf0>)
   1370c:	4798      	blx	r3
    SX1276SetChannel( initialFreq );
   1370e:	683b      	ldr	r3, [r7, #0]
   13710:	0018      	movs	r0, r3
   13712:	4b0a      	ldr	r3, [pc, #40]	; (1373c <RxChainCalibration+0xf8>)
   13714:	4798      	blx	r3
}
   13716:	46c0      	nop			; (mov r8, r8)
   13718:	46bd      	mov	sp, r7
   1371a:	b003      	add	sp, #12
   1371c:	bd90      	pop	{r4, r7, pc}
   1371e:	46c0      	nop			; (mov r8, r8)
   13720:	00014e35 	.word	0x00014e35
   13724:	00019f15 	.word	0x00019f15
   13728:	000192fd 	.word	0x000192fd
   1372c:	404e8480 	.word	0x404e8480
   13730:	00017ef5 	.word	0x00017ef5
   13734:	00014e09 	.word	0x00014e09
   13738:	33bca100 	.word	0x33bca100
   1373c:	00013479 	.word	0x00013479

00013740 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
   13740:	b580      	push	{r7, lr}
   13742:	b084      	sub	sp, #16
   13744:	af00      	add	r7, sp, #0
   13746:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13748:	230f      	movs	r3, #15
   1374a:	18fb      	adds	r3, r7, r3
   1374c:	2200      	movs	r2, #0
   1374e:	701a      	strb	r2, [r3, #0]
   13750:	e022      	b.n	13798 <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
   13752:	230f      	movs	r3, #15
   13754:	18fb      	adds	r3, r7, r3
   13756:	781a      	ldrb	r2, [r3, #0]
   13758:	4b14      	ldr	r3, [pc, #80]	; (137ac <GetFskBandwidthRegValue+0x6c>)
   1375a:	00d2      	lsls	r2, r2, #3
   1375c:	58d2      	ldr	r2, [r2, r3]
   1375e:	687b      	ldr	r3, [r7, #4]
   13760:	429a      	cmp	r2, r3
   13762:	d812      	bhi.n	1378a <GetFskBandwidthRegValue+0x4a>
   13764:	230f      	movs	r3, #15
   13766:	18fb      	adds	r3, r7, r3
   13768:	781b      	ldrb	r3, [r3, #0]
   1376a:	1c5a      	adds	r2, r3, #1
   1376c:	4b0f      	ldr	r3, [pc, #60]	; (137ac <GetFskBandwidthRegValue+0x6c>)
   1376e:	00d2      	lsls	r2, r2, #3
   13770:	58d2      	ldr	r2, [r2, r3]
   13772:	687b      	ldr	r3, [r7, #4]
   13774:	429a      	cmp	r2, r3
   13776:	d908      	bls.n	1378a <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
   13778:	230f      	movs	r3, #15
   1377a:	18fb      	adds	r3, r7, r3
   1377c:	781b      	ldrb	r3, [r3, #0]
   1377e:	4a0b      	ldr	r2, [pc, #44]	; (137ac <GetFskBandwidthRegValue+0x6c>)
   13780:	00db      	lsls	r3, r3, #3
   13782:	18d3      	adds	r3, r2, r3
   13784:	3304      	adds	r3, #4
   13786:	781b      	ldrb	r3, [r3, #0]
   13788:	e00c      	b.n	137a4 <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   1378a:	230f      	movs	r3, #15
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781a      	ldrb	r2, [r3, #0]
   13790:	230f      	movs	r3, #15
   13792:	18fb      	adds	r3, r7, r3
   13794:	3201      	adds	r2, #1
   13796:	701a      	strb	r2, [r3, #0]
   13798:	230f      	movs	r3, #15
   1379a:	18fb      	adds	r3, r7, r3
   1379c:	781b      	ldrb	r3, [r3, #0]
   1379e:	2b14      	cmp	r3, #20
   137a0:	d9d7      	bls.n	13752 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
   137a2:	e7fe      	b.n	137a2 <GetFskBandwidthRegValue+0x62>
}
   137a4:	0018      	movs	r0, r3
   137a6:	46bd      	mov	sp, r7
   137a8:	b004      	add	sp, #16
   137aa:	bd80      	pop	{r7, pc}
   137ac:	0001f864 	.word	0x0001f864

000137b0 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
   137b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   137b2:	b085      	sub	sp, #20
   137b4:	af00      	add	r7, sp, #0
   137b6:	60b9      	str	r1, [r7, #8]
   137b8:	607a      	str	r2, [r7, #4]
   137ba:	0019      	movs	r1, r3
   137bc:	230f      	movs	r3, #15
   137be:	18fb      	adds	r3, r7, r3
   137c0:	1c02      	adds	r2, r0, #0
   137c2:	701a      	strb	r2, [r3, #0]
   137c4:	230e      	movs	r3, #14
   137c6:	18fb      	adds	r3, r7, r3
   137c8:	1c0a      	adds	r2, r1, #0
   137ca:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   137cc:	230f      	movs	r3, #15
   137ce:	18fb      	adds	r3, r7, r3
   137d0:	781b      	ldrb	r3, [r3, #0]
   137d2:	0018      	movs	r0, r3
   137d4:	4bb6      	ldr	r3, [pc, #728]	; (13ab0 <SX1276SetRxConfig+0x300>)
   137d6:	4798      	blx	r3

    switch( modem )
   137d8:	230f      	movs	r3, #15
   137da:	18fb      	adds	r3, r7, r3
   137dc:	781b      	ldrb	r3, [r3, #0]
   137de:	2b00      	cmp	r3, #0
   137e0:	d003      	beq.n	137ea <SX1276SetRxConfig+0x3a>
   137e2:	2b01      	cmp	r3, #1
   137e4:	d100      	bne.n	137e8 <SX1276SetRxConfig+0x38>
   137e6:	e0ef      	b.n	139c8 <SX1276SetRxConfig+0x218>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
   137e8:	e263      	b.n	13cb2 <SX1276SetRxConfig+0x502>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   137ea:	4bb2      	ldr	r3, [pc, #712]	; (13ab4 <SX1276SetRxConfig+0x304>)
   137ec:	21f0      	movs	r1, #240	; 0xf0
   137ee:	68ba      	ldr	r2, [r7, #8]
   137f0:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Datarate = datarate;
   137f2:	4bb0      	ldr	r3, [pc, #704]	; (13ab4 <SX1276SetRxConfig+0x304>)
   137f4:	21f8      	movs	r1, #248	; 0xf8
   137f6:	687a      	ldr	r2, [r7, #4]
   137f8:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   137fa:	4bae      	ldr	r3, [pc, #696]	; (13ab4 <SX1276SetRxConfig+0x304>)
   137fc:	21f4      	movs	r1, #244	; 0xf4
   137fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13800:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.FixLen = fixLen;
   13802:	4bac      	ldr	r3, [pc, #688]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13804:	2234      	movs	r2, #52	; 0x34
   13806:	18ba      	adds	r2, r7, r2
   13808:	21fe      	movs	r1, #254	; 0xfe
   1380a:	7812      	ldrb	r2, [r2, #0]
   1380c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
   1380e:	4ba9      	ldr	r3, [pc, #676]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13810:	2238      	movs	r2, #56	; 0x38
   13812:	18ba      	adds	r2, r7, r2
   13814:	21ff      	movs	r1, #255	; 0xff
   13816:	7812      	ldrb	r2, [r2, #0]
   13818:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
   1381a:	4aa6      	ldr	r2, [pc, #664]	; (13ab4 <SX1276SetRxConfig+0x304>)
   1381c:	233c      	movs	r3, #60	; 0x3c
   1381e:	18f9      	adds	r1, r7, r3
   13820:	2380      	movs	r3, #128	; 0x80
   13822:	005b      	lsls	r3, r3, #1
   13824:	7809      	ldrb	r1, [r1, #0]
   13826:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   13828:	4aa2      	ldr	r2, [pc, #648]	; (13ab4 <SX1276SetRxConfig+0x304>)
   1382a:	2320      	movs	r3, #32
   1382c:	2128      	movs	r1, #40	; 0x28
   1382e:	1879      	adds	r1, r7, r1
   13830:	18c9      	adds	r1, r1, r3
   13832:	2302      	movs	r3, #2
   13834:	33ff      	adds	r3, #255	; 0xff
   13836:	7809      	ldrb	r1, [r1, #0]
   13838:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
   1383a:	4a9e      	ldr	r2, [pc, #632]	; (13ab4 <SX1276SetRxConfig+0x304>)
   1383c:	2324      	movs	r3, #36	; 0x24
   1383e:	2128      	movs	r1, #40	; 0x28
   13840:	1879      	adds	r1, r7, r1
   13842:	18c9      	adds	r1, r1, r3
   13844:	2381      	movs	r3, #129	; 0x81
   13846:	005b      	lsls	r3, r3, #1
   13848:	7809      	ldrb	r1, [r1, #0]
   1384a:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   1384c:	4b99      	ldr	r3, [pc, #612]	; (13ab4 <SX1276SetRxConfig+0x304>)
   1384e:	222c      	movs	r2, #44	; 0x2c
   13850:	18ba      	adds	r2, r7, r2
   13852:	21fc      	movs	r1, #252	; 0xfc
   13854:	8812      	ldrh	r2, [r2, #0]
   13856:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
   13858:	2330      	movs	r3, #48	; 0x30
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	881a      	ldrh	r2, [r3, #0]
   1385e:	4b96      	ldr	r3, [pc, #600]	; (13ab8 <SX1276SetRxConfig+0x308>)
   13860:	0010      	movs	r0, r2
   13862:	4798      	blx	r3
   13864:	0005      	movs	r5, r0
   13866:	000e      	movs	r6, r1
   13868:	4b94      	ldr	r3, [pc, #592]	; (13abc <SX1276SetRxConfig+0x30c>)
   1386a:	6878      	ldr	r0, [r7, #4]
   1386c:	4798      	blx	r3
   1386e:	0002      	movs	r2, r0
   13870:	000b      	movs	r3, r1
   13872:	4c93      	ldr	r4, [pc, #588]	; (13ac0 <SX1276SetRxConfig+0x310>)
   13874:	2000      	movs	r0, #0
   13876:	4993      	ldr	r1, [pc, #588]	; (13ac4 <SX1276SetRxConfig+0x314>)
   13878:	47a0      	blx	r4
   1387a:	0003      	movs	r3, r0
   1387c:	000c      	movs	r4, r1
   1387e:	0018      	movs	r0, r3
   13880:	0021      	movs	r1, r4
   13882:	4c91      	ldr	r4, [pc, #580]	; (13ac8 <SX1276SetRxConfig+0x318>)
   13884:	2200      	movs	r2, #0
   13886:	4b91      	ldr	r3, [pc, #580]	; (13acc <SX1276SetRxConfig+0x31c>)
   13888:	47a0      	blx	r4
   1388a:	0003      	movs	r3, r0
   1388c:	000c      	movs	r4, r1
   1388e:	001a      	movs	r2, r3
   13890:	0023      	movs	r3, r4
   13892:	4c8d      	ldr	r4, [pc, #564]	; (13ac8 <SX1276SetRxConfig+0x318>)
   13894:	0028      	movs	r0, r5
   13896:	0031      	movs	r1, r6
   13898:	47a0      	blx	r4
   1389a:	0003      	movs	r3, r0
   1389c:	000c      	movs	r4, r1
   1389e:	0018      	movs	r0, r3
   138a0:	0021      	movs	r1, r4
   138a2:	4c89      	ldr	r4, [pc, #548]	; (13ac8 <SX1276SetRxConfig+0x318>)
   138a4:	2200      	movs	r2, #0
   138a6:	4b8a      	ldr	r3, [pc, #552]	; (13ad0 <SX1276SetRxConfig+0x320>)
   138a8:	47a0      	blx	r4
   138aa:	0003      	movs	r3, r0
   138ac:	000c      	movs	r4, r1
   138ae:	0019      	movs	r1, r3
   138b0:	0022      	movs	r2, r4
   138b2:	4b88      	ldr	r3, [pc, #544]	; (13ad4 <SX1276SetRxConfig+0x324>)
   138b4:	0008      	movs	r0, r1
   138b6:	0011      	movs	r1, r2
   138b8:	4798      	blx	r3
   138ba:	0001      	movs	r1, r0
   138bc:	4a7d      	ldr	r2, [pc, #500]	; (13ab4 <SX1276SetRxConfig+0x304>)
   138be:	2384      	movs	r3, #132	; 0x84
   138c0:	005b      	lsls	r3, r3, #1
   138c2:	50d1      	str	r1, [r2, r3]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
   138c4:	4b7d      	ldr	r3, [pc, #500]	; (13abc <SX1276SetRxConfig+0x30c>)
   138c6:	6878      	ldr	r0, [r7, #4]
   138c8:	4798      	blx	r3
   138ca:	0002      	movs	r2, r0
   138cc:	000b      	movs	r3, r1
   138ce:	4c7c      	ldr	r4, [pc, #496]	; (13ac0 <SX1276SetRxConfig+0x310>)
   138d0:	2000      	movs	r0, #0
   138d2:	4981      	ldr	r1, [pc, #516]	; (13ad8 <SX1276SetRxConfig+0x328>)
   138d4:	47a0      	blx	r4
   138d6:	0003      	movs	r3, r0
   138d8:	000c      	movs	r4, r1
   138da:	0019      	movs	r1, r3
   138dc:	0022      	movs	r2, r4
   138de:	4b7d      	ldr	r3, [pc, #500]	; (13ad4 <SX1276SetRxConfig+0x324>)
   138e0:	0008      	movs	r0, r1
   138e2:	0011      	movs	r1, r2
   138e4:	4798      	blx	r3
   138e6:	0003      	movs	r3, r0
   138e8:	b29b      	uxth	r3, r3
   138ea:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	0a1b      	lsrs	r3, r3, #8
   138f0:	b2db      	uxtb	r3, r3
   138f2:	0019      	movs	r1, r3
   138f4:	2002      	movs	r0, #2
   138f6:	4b79      	ldr	r3, [pc, #484]	; (13adc <SX1276SetRxConfig+0x32c>)
   138f8:	4798      	blx	r3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
   138fa:	687b      	ldr	r3, [r7, #4]
   138fc:	b2db      	uxtb	r3, r3
   138fe:	0019      	movs	r1, r3
   13900:	2003      	movs	r0, #3
   13902:	4b76      	ldr	r3, [pc, #472]	; (13adc <SX1276SetRxConfig+0x32c>)
   13904:	4798      	blx	r3
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
   13906:	68bb      	ldr	r3, [r7, #8]
   13908:	0018      	movs	r0, r3
   1390a:	4b75      	ldr	r3, [pc, #468]	; (13ae0 <SX1276SetRxConfig+0x330>)
   1390c:	4798      	blx	r3
   1390e:	0003      	movs	r3, r0
   13910:	0019      	movs	r1, r3
   13912:	2012      	movs	r0, #18
   13914:	4b71      	ldr	r3, [pc, #452]	; (13adc <SX1276SetRxConfig+0x32c>)
   13916:	4798      	blx	r3
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
   13918:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1391a:	0018      	movs	r0, r3
   1391c:	4b70      	ldr	r3, [pc, #448]	; (13ae0 <SX1276SetRxConfig+0x330>)
   1391e:	4798      	blx	r3
   13920:	0003      	movs	r3, r0
   13922:	0019      	movs	r1, r3
   13924:	2013      	movs	r0, #19
   13926:	4b6d      	ldr	r3, [pc, #436]	; (13adc <SX1276SetRxConfig+0x32c>)
   13928:	4798      	blx	r3
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   1392a:	232c      	movs	r3, #44	; 0x2c
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	881b      	ldrh	r3, [r3, #0]
   13930:	0a1b      	lsrs	r3, r3, #8
   13932:	b29b      	uxth	r3, r3
   13934:	b2db      	uxtb	r3, r3
   13936:	0019      	movs	r1, r3
   13938:	2025      	movs	r0, #37	; 0x25
   1393a:	4b68      	ldr	r3, [pc, #416]	; (13adc <SX1276SetRxConfig+0x32c>)
   1393c:	4798      	blx	r3
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   1393e:	232c      	movs	r3, #44	; 0x2c
   13940:	18fb      	adds	r3, r7, r3
   13942:	881b      	ldrh	r3, [r3, #0]
   13944:	b2db      	uxtb	r3, r3
   13946:	0019      	movs	r1, r3
   13948:	2026      	movs	r0, #38	; 0x26
   1394a:	4b64      	ldr	r3, [pc, #400]	; (13adc <SX1276SetRxConfig+0x32c>)
   1394c:	4798      	blx	r3
            if( fixLen == 1 )
   1394e:	2334      	movs	r3, #52	; 0x34
   13950:	18fb      	adds	r3, r7, r3
   13952:	781b      	ldrb	r3, [r3, #0]
   13954:	2b00      	cmp	r3, #0
   13956:	d007      	beq.n	13968 <SX1276SetRxConfig+0x1b8>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
   13958:	2338      	movs	r3, #56	; 0x38
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	781b      	ldrb	r3, [r3, #0]
   1395e:	0019      	movs	r1, r3
   13960:	2032      	movs	r0, #50	; 0x32
   13962:	4b5e      	ldr	r3, [pc, #376]	; (13adc <SX1276SetRxConfig+0x32c>)
   13964:	4798      	blx	r3
   13966:	e003      	b.n	13970 <SX1276SetRxConfig+0x1c0>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
   13968:	21ff      	movs	r1, #255	; 0xff
   1396a:	2032      	movs	r0, #50	; 0x32
   1396c:	4b5b      	ldr	r3, [pc, #364]	; (13adc <SX1276SetRxConfig+0x32c>)
   1396e:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13970:	2030      	movs	r0, #48	; 0x30
   13972:	4b5c      	ldr	r3, [pc, #368]	; (13ae4 <SX1276SetRxConfig+0x334>)
   13974:	4798      	blx	r3
   13976:	0003      	movs	r3, r0
   13978:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
   1397a:	226f      	movs	r2, #111	; 0x6f
   1397c:	4013      	ands	r3, r2
   1397e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13980:	2334      	movs	r3, #52	; 0x34
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	2b00      	cmp	r3, #0
   13988:	d001      	beq.n	1398e <SX1276SetRxConfig+0x1de>
   1398a:	2300      	movs	r3, #0
   1398c:	e001      	b.n	13992 <SX1276SetRxConfig+0x1e2>
   1398e:	2380      	movs	r3, #128	; 0x80
   13990:	425b      	negs	r3, r3
   13992:	4313      	orrs	r3, r2
   13994:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
   13996:	233c      	movs	r3, #60	; 0x3c
   13998:	18fb      	adds	r3, r7, r3
   1399a:	781b      	ldrb	r3, [r3, #0]
   1399c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   1399e:	b25b      	sxtb	r3, r3
   139a0:	4313      	orrs	r3, r2
   139a2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
   139a4:	b2db      	uxtb	r3, r3
   139a6:	0019      	movs	r1, r3
   139a8:	2030      	movs	r0, #48	; 0x30
   139aa:	4b4c      	ldr	r3, [pc, #304]	; (13adc <SX1276SetRxConfig+0x32c>)
   139ac:	4798      	blx	r3
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   139ae:	2031      	movs	r0, #49	; 0x31
   139b0:	4b4c      	ldr	r3, [pc, #304]	; (13ae4 <SX1276SetRxConfig+0x334>)
   139b2:	4798      	blx	r3
   139b4:	0003      	movs	r3, r0
   139b6:	001a      	movs	r2, r3
   139b8:	2340      	movs	r3, #64	; 0x40
   139ba:	4313      	orrs	r3, r2
   139bc:	b2db      	uxtb	r3, r3
   139be:	0019      	movs	r1, r3
   139c0:	2031      	movs	r0, #49	; 0x31
   139c2:	4b46      	ldr	r3, [pc, #280]	; (13adc <SX1276SetRxConfig+0x32c>)
   139c4:	4798      	blx	r3
        break;
   139c6:	e174      	b.n	13cb2 <SX1276SetRxConfig+0x502>
            if( bandwidth > 2 )
   139c8:	68bb      	ldr	r3, [r7, #8]
   139ca:	2b02      	cmp	r3, #2
   139cc:	d900      	bls.n	139d0 <SX1276SetRxConfig+0x220>
                while( 1 );
   139ce:	e7fe      	b.n	139ce <SX1276SetRxConfig+0x21e>
            bandwidth += 7;
   139d0:	68bb      	ldr	r3, [r7, #8]
   139d2:	3307      	adds	r3, #7
   139d4:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   139d6:	4a37      	ldr	r2, [pc, #220]	; (13ab4 <SX1276SetRxConfig+0x304>)
   139d8:	2390      	movs	r3, #144	; 0x90
   139da:	005b      	lsls	r3, r3, #1
   139dc:	68b9      	ldr	r1, [r7, #8]
   139de:	50d1      	str	r1, [r2, r3]
            SX1276.Settings.LoRa.Datarate = datarate;
   139e0:	4a34      	ldr	r2, [pc, #208]	; (13ab4 <SX1276SetRxConfig+0x304>)
   139e2:	2392      	movs	r3, #146	; 0x92
   139e4:	005b      	lsls	r3, r3, #1
   139e6:	6879      	ldr	r1, [r7, #4]
   139e8:	50d1      	str	r1, [r2, r3]
            SX1276.Settings.LoRa.Coderate = coderate;
   139ea:	4a32      	ldr	r2, [pc, #200]	; (13ab4 <SX1276SetRxConfig+0x304>)
   139ec:	230e      	movs	r3, #14
   139ee:	18f9      	adds	r1, r7, r3
   139f0:	232a      	movs	r3, #42	; 0x2a
   139f2:	33ff      	adds	r3, #255	; 0xff
   139f4:	7809      	ldrb	r1, [r1, #0]
   139f6:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   139f8:	4a2e      	ldr	r2, [pc, #184]	; (13ab4 <SX1276SetRxConfig+0x304>)
   139fa:	232c      	movs	r3, #44	; 0x2c
   139fc:	18f9      	adds	r1, r7, r3
   139fe:	2395      	movs	r3, #149	; 0x95
   13a00:	005b      	lsls	r3, r3, #1
   13a02:	8809      	ldrh	r1, [r1, #0]
   13a04:	52d1      	strh	r1, [r2, r3]
            SX1276.Settings.LoRa.FixLen = fixLen;
   13a06:	4a2b      	ldr	r2, [pc, #172]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a08:	2334      	movs	r3, #52	; 0x34
   13a0a:	18f9      	adds	r1, r7, r3
   13a0c:	2396      	movs	r3, #150	; 0x96
   13a0e:	005b      	lsls	r3, r3, #1
   13a10:	7809      	ldrb	r1, [r1, #0]
   13a12:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
   13a14:	4a27      	ldr	r2, [pc, #156]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a16:	2338      	movs	r3, #56	; 0x38
   13a18:	18f9      	adds	r1, r7, r3
   13a1a:	232e      	movs	r3, #46	; 0x2e
   13a1c:	33ff      	adds	r3, #255	; 0xff
   13a1e:	7809      	ldrb	r1, [r1, #0]
   13a20:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.CrcOn = crcOn;
   13a22:	4a24      	ldr	r2, [pc, #144]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a24:	233c      	movs	r3, #60	; 0x3c
   13a26:	18f9      	adds	r1, r7, r3
   13a28:	2397      	movs	r3, #151	; 0x97
   13a2a:	005b      	lsls	r3, r3, #1
   13a2c:	7809      	ldrb	r1, [r1, #0]
   13a2e:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   13a30:	4a20      	ldr	r2, [pc, #128]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a32:	2340      	movs	r3, #64	; 0x40
   13a34:	18f9      	adds	r1, r7, r3
   13a36:	2330      	movs	r3, #48	; 0x30
   13a38:	33ff      	adds	r3, #255	; 0xff
   13a3a:	7809      	ldrb	r1, [r1, #0]
   13a3c:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13a3e:	4a1d      	ldr	r2, [pc, #116]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a40:	2344      	movs	r3, #68	; 0x44
   13a42:	18f9      	adds	r1, r7, r3
   13a44:	2398      	movs	r3, #152	; 0x98
   13a46:	005b      	lsls	r3, r3, #1
   13a48:	7809      	ldrb	r1, [r1, #0]
   13a4a:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   13a4c:	4a19      	ldr	r2, [pc, #100]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a4e:	2320      	movs	r3, #32
   13a50:	2128      	movs	r1, #40	; 0x28
   13a52:	1879      	adds	r1, r7, r1
   13a54:	18c9      	adds	r1, r1, r3
   13a56:	2332      	movs	r3, #50	; 0x32
   13a58:	33ff      	adds	r3, #255	; 0xff
   13a5a:	7809      	ldrb	r1, [r1, #0]
   13a5c:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
   13a5e:	4a15      	ldr	r2, [pc, #84]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13a60:	2324      	movs	r3, #36	; 0x24
   13a62:	2128      	movs	r1, #40	; 0x28
   13a64:	1879      	adds	r1, r7, r1
   13a66:	18c9      	adds	r1, r1, r3
   13a68:	2399      	movs	r3, #153	; 0x99
   13a6a:	005b      	lsls	r3, r3, #1
   13a6c:	7809      	ldrb	r1, [r1, #0]
   13a6e:	54d1      	strb	r1, [r2, r3]
            if( datarate > 12 )
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	2b0c      	cmp	r3, #12
   13a74:	d902      	bls.n	13a7c <SX1276SetRxConfig+0x2cc>
                datarate = 12;
   13a76:	230c      	movs	r3, #12
   13a78:	607b      	str	r3, [r7, #4]
   13a7a:	e004      	b.n	13a86 <SX1276SetRxConfig+0x2d6>
            else if( datarate < 6 )
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	2b05      	cmp	r3, #5
   13a80:	d801      	bhi.n	13a86 <SX1276SetRxConfig+0x2d6>
                datarate = 6;
   13a82:	2306      	movs	r3, #6
   13a84:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13a86:	68bb      	ldr	r3, [r7, #8]
   13a88:	2b07      	cmp	r3, #7
   13a8a:	d105      	bne.n	13a98 <SX1276SetRxConfig+0x2e8>
   13a8c:	687b      	ldr	r3, [r7, #4]
   13a8e:	2b0b      	cmp	r3, #11
   13a90:	d008      	beq.n	13aa4 <SX1276SetRxConfig+0x2f4>
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2b0c      	cmp	r3, #12
   13a96:	d005      	beq.n	13aa4 <SX1276SetRxConfig+0x2f4>
   13a98:	68bb      	ldr	r3, [r7, #8]
   13a9a:	2b08      	cmp	r3, #8
   13a9c:	d124      	bne.n	13ae8 <SX1276SetRxConfig+0x338>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	2b0c      	cmp	r3, #12
   13aa2:	d121      	bne.n	13ae8 <SX1276SetRxConfig+0x338>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
   13aa4:	4a03      	ldr	r2, [pc, #12]	; (13ab4 <SX1276SetRxConfig+0x304>)
   13aa6:	2394      	movs	r3, #148	; 0x94
   13aa8:	005b      	lsls	r3, r3, #1
   13aaa:	2101      	movs	r1, #1
   13aac:	54d1      	strb	r1, [r2, r3]
   13aae:	e020      	b.n	13af2 <SX1276SetRxConfig+0x342>
   13ab0:	00014d41 	.word	0x00014d41
   13ab4:	20001c5c 	.word	0x20001c5c
   13ab8:	00019e91 	.word	0x00019e91
   13abc:	00019f15 	.word	0x00019f15
   13ac0:	00018a95 	.word	0x00018a95
   13ac4:	3ff00000 	.word	0x3ff00000
   13ac8:	000192fd 	.word	0x000192fd
   13acc:	40200000 	.word	0x40200000
   13ad0:	408f4000 	.word	0x408f4000
   13ad4:	00017ef5 	.word	0x00017ef5
   13ad8:	417e8480 	.word	0x417e8480
   13adc:	00014e09 	.word	0x00014e09
   13ae0:	00013741 	.word	0x00013741
   13ae4:	00014e35 	.word	0x00014e35
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   13ae8:	4a74      	ldr	r2, [pc, #464]	; (13cbc <SX1276SetRxConfig+0x50c>)
   13aea:	2394      	movs	r3, #148	; 0x94
   13aec:	005b      	lsls	r3, r3, #1
   13aee:	2100      	movs	r1, #0
   13af0:	54d1      	strb	r1, [r2, r3]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13af2:	201d      	movs	r0, #29
   13af4:	4b72      	ldr	r3, [pc, #456]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13af6:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13af8:	68bb      	ldr	r3, [r7, #8]
   13afa:	b2db      	uxtb	r3, r3
   13afc:	011b      	lsls	r3, r3, #4
   13afe:	b2da      	uxtb	r2, r3
   13b00:	230e      	movs	r3, #14
   13b02:	18fb      	adds	r3, r7, r3
   13b04:	781b      	ldrb	r3, [r3, #0]
   13b06:	18db      	adds	r3, r3, r3
   13b08:	b2db      	uxtb	r3, r3
   13b0a:	4313      	orrs	r3, r2
   13b0c:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   13b0e:	2334      	movs	r3, #52	; 0x34
   13b10:	18fb      	adds	r3, r7, r3
   13b12:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13b14:	4313      	orrs	r3, r2
   13b16:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   13b18:	0019      	movs	r1, r3
   13b1a:	201d      	movs	r0, #29
   13b1c:	4b69      	ldr	r3, [pc, #420]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13b1e:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   13b20:	201e      	movs	r0, #30
   13b22:	4b67      	ldr	r3, [pc, #412]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13b24:	4798      	blx	r3
   13b26:	0003      	movs	r3, r0
   13b28:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
   13b2a:	2308      	movs	r3, #8
   13b2c:	4013      	ands	r3, r2
   13b2e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
   13b30:	687b      	ldr	r3, [r7, #4]
   13b32:	b2db      	uxtb	r3, r3
   13b34:	011b      	lsls	r3, r3, #4
   13b36:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
   13b38:	4313      	orrs	r3, r2
   13b3a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
   13b3c:	233c      	movs	r3, #60	; 0x3c
   13b3e:	18fb      	adds	r3, r7, r3
   13b40:	781b      	ldrb	r3, [r3, #0]
   13b42:	009b      	lsls	r3, r3, #2
   13b44:	b2db      	uxtb	r3, r3
   13b46:	4313      	orrs	r3, r2
   13b48:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
   13b4a:	2330      	movs	r3, #48	; 0x30
   13b4c:	18fb      	adds	r3, r7, r3
   13b4e:	881b      	ldrh	r3, [r3, #0]
   13b50:	0a1b      	lsrs	r3, r3, #8
   13b52:	b29b      	uxth	r3, r3
   13b54:	b2db      	uxtb	r3, r3
   13b56:	2103      	movs	r1, #3
   13b58:	400b      	ands	r3, r1
   13b5a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
   13b5c:	4313      	orrs	r3, r2
   13b5e:	b2db      	uxtb	r3, r3
   13b60:	0019      	movs	r1, r3
   13b62:	201e      	movs	r0, #30
   13b64:	4b57      	ldr	r3, [pc, #348]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13b66:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   13b68:	2026      	movs	r0, #38	; 0x26
   13b6a:	4b55      	ldr	r3, [pc, #340]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13b6c:	4798      	blx	r3
   13b6e:	0003      	movs	r3, r0
   13b70:	b25b      	sxtb	r3, r3
   13b72:	2208      	movs	r2, #8
   13b74:	4393      	bics	r3, r2
   13b76:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   13b78:	4950      	ldr	r1, [pc, #320]	; (13cbc <SX1276SetRxConfig+0x50c>)
   13b7a:	2394      	movs	r3, #148	; 0x94
   13b7c:	005b      	lsls	r3, r3, #1
   13b7e:	5ccb      	ldrb	r3, [r1, r3]
   13b80:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
   13b82:	b25b      	sxtb	r3, r3
   13b84:	4313      	orrs	r3, r2
   13b86:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
   13b88:	b2db      	uxtb	r3, r3
   13b8a:	0019      	movs	r1, r3
   13b8c:	2026      	movs	r0, #38	; 0x26
   13b8e:	4b4d      	ldr	r3, [pc, #308]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13b90:	4798      	blx	r3
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
   13b92:	2330      	movs	r3, #48	; 0x30
   13b94:	18fb      	adds	r3, r7, r3
   13b96:	881b      	ldrh	r3, [r3, #0]
   13b98:	b2db      	uxtb	r3, r3
   13b9a:	0019      	movs	r1, r3
   13b9c:	201f      	movs	r0, #31
   13b9e:	4b49      	ldr	r3, [pc, #292]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13ba0:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   13ba2:	232c      	movs	r3, #44	; 0x2c
   13ba4:	18fb      	adds	r3, r7, r3
   13ba6:	881b      	ldrh	r3, [r3, #0]
   13ba8:	0a1b      	lsrs	r3, r3, #8
   13baa:	b29b      	uxth	r3, r3
   13bac:	b2db      	uxtb	r3, r3
   13bae:	0019      	movs	r1, r3
   13bb0:	2020      	movs	r0, #32
   13bb2:	4b44      	ldr	r3, [pc, #272]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13bb4:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   13bb6:	232c      	movs	r3, #44	; 0x2c
   13bb8:	18fb      	adds	r3, r7, r3
   13bba:	881b      	ldrh	r3, [r3, #0]
   13bbc:	b2db      	uxtb	r3, r3
   13bbe:	0019      	movs	r1, r3
   13bc0:	2021      	movs	r0, #33	; 0x21
   13bc2:	4b40      	ldr	r3, [pc, #256]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13bc4:	4798      	blx	r3
            if( fixLen == 1 )
   13bc6:	2334      	movs	r3, #52	; 0x34
   13bc8:	18fb      	adds	r3, r7, r3
   13bca:	781b      	ldrb	r3, [r3, #0]
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d006      	beq.n	13bde <SX1276SetRxConfig+0x42e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
   13bd0:	2338      	movs	r3, #56	; 0x38
   13bd2:	18fb      	adds	r3, r7, r3
   13bd4:	781b      	ldrb	r3, [r3, #0]
   13bd6:	0019      	movs	r1, r3
   13bd8:	2022      	movs	r0, #34	; 0x22
   13bda:	4b3a      	ldr	r3, [pc, #232]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13bdc:	4798      	blx	r3
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13bde:	4a37      	ldr	r2, [pc, #220]	; (13cbc <SX1276SetRxConfig+0x50c>)
   13be0:	2330      	movs	r3, #48	; 0x30
   13be2:	33ff      	adds	r3, #255	; 0xff
   13be4:	5cd3      	ldrb	r3, [r2, r3]
   13be6:	2b00      	cmp	r3, #0
   13be8:	d014      	beq.n	13c14 <SX1276SetRxConfig+0x464>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   13bea:	2044      	movs	r0, #68	; 0x44
   13bec:	4b34      	ldr	r3, [pc, #208]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13bee:	4798      	blx	r3
   13bf0:	0003      	movs	r3, r0
   13bf2:	001a      	movs	r2, r3
   13bf4:	2380      	movs	r3, #128	; 0x80
   13bf6:	425b      	negs	r3, r3
   13bf8:	4313      	orrs	r3, r2
   13bfa:	b2db      	uxtb	r3, r3
   13bfc:	0019      	movs	r1, r3
   13bfe:	2044      	movs	r0, #68	; 0x44
   13c00:	4b30      	ldr	r3, [pc, #192]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c02:	4798      	blx	r3
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   13c04:	4a2d      	ldr	r2, [pc, #180]	; (13cbc <SX1276SetRxConfig+0x50c>)
   13c06:	2398      	movs	r3, #152	; 0x98
   13c08:	005b      	lsls	r3, r3, #1
   13c0a:	5cd3      	ldrb	r3, [r2, r3]
   13c0c:	0019      	movs	r1, r3
   13c0e:	2024      	movs	r0, #36	; 0x24
   13c10:	4b2c      	ldr	r3, [pc, #176]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c12:	4798      	blx	r3
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   13c14:	68bb      	ldr	r3, [r7, #8]
   13c16:	2b09      	cmp	r3, #9
   13c18:	d10e      	bne.n	13c38 <SX1276SetRxConfig+0x488>
   13c1a:	4b28      	ldr	r3, [pc, #160]	; (13cbc <SX1276SetRxConfig+0x50c>)
   13c1c:	22e4      	movs	r2, #228	; 0xe4
   13c1e:	589b      	ldr	r3, [r3, r2]
   13c20:	4a29      	ldr	r2, [pc, #164]	; (13cc8 <SX1276SetRxConfig+0x518>)
   13c22:	4293      	cmp	r3, r2
   13c24:	d908      	bls.n	13c38 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_TEST36, 0x02 );
   13c26:	2102      	movs	r1, #2
   13c28:	2036      	movs	r0, #54	; 0x36
   13c2a:	4b26      	ldr	r3, [pc, #152]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c2c:	4798      	blx	r3
                SX1276Write( REG_LR_TEST3A, 0x64 );
   13c2e:	2164      	movs	r1, #100	; 0x64
   13c30:	203a      	movs	r0, #58	; 0x3a
   13c32:	4b24      	ldr	r3, [pc, #144]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c34:	4798      	blx	r3
   13c36:	e00f      	b.n	13c58 <SX1276SetRxConfig+0x4a8>
            else if( bandwidth == 9 )
   13c38:	68bb      	ldr	r3, [r7, #8]
   13c3a:	2b09      	cmp	r3, #9
   13c3c:	d108      	bne.n	13c50 <SX1276SetRxConfig+0x4a0>
                SX1276Write( REG_LR_TEST36, 0x02 );
   13c3e:	2102      	movs	r1, #2
   13c40:	2036      	movs	r0, #54	; 0x36
   13c42:	4b20      	ldr	r3, [pc, #128]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c44:	4798      	blx	r3
                SX1276Write( REG_LR_TEST3A, 0x7F );
   13c46:	217f      	movs	r1, #127	; 0x7f
   13c48:	203a      	movs	r0, #58	; 0x3a
   13c4a:	4b1e      	ldr	r3, [pc, #120]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c4c:	4798      	blx	r3
   13c4e:	e003      	b.n	13c58 <SX1276SetRxConfig+0x4a8>
                SX1276Write( REG_LR_TEST36, 0x03 );
   13c50:	2103      	movs	r1, #3
   13c52:	2036      	movs	r0, #54	; 0x36
   13c54:	4b1b      	ldr	r3, [pc, #108]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c56:	4798      	blx	r3
            if( datarate == 6 )
   13c58:	687b      	ldr	r3, [r7, #4]
   13c5a:	2b06      	cmp	r3, #6
   13c5c:	d114      	bne.n	13c88 <SX1276SetRxConfig+0x4d8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   13c5e:	2031      	movs	r0, #49	; 0x31
   13c60:	4b17      	ldr	r3, [pc, #92]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13c62:	4798      	blx	r3
   13c64:	0003      	movs	r3, r0
   13c66:	b25b      	sxtb	r3, r3
   13c68:	2207      	movs	r2, #7
   13c6a:	4393      	bics	r3, r2
   13c6c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
   13c6e:	2205      	movs	r2, #5
   13c70:	4313      	orrs	r3, r2
   13c72:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13c74:	b2db      	uxtb	r3, r3
   13c76:	0019      	movs	r1, r3
   13c78:	2031      	movs	r0, #49	; 0x31
   13c7a:	4b12      	ldr	r3, [pc, #72]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c7c:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13c7e:	210c      	movs	r1, #12
   13c80:	2037      	movs	r0, #55	; 0x37
   13c82:	4b10      	ldr	r3, [pc, #64]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13c84:	4798      	blx	r3
        break;
   13c86:	e013      	b.n	13cb0 <SX1276SetRxConfig+0x500>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   13c88:	2031      	movs	r0, #49	; 0x31
   13c8a:	4b0d      	ldr	r3, [pc, #52]	; (13cc0 <SX1276SetRxConfig+0x510>)
   13c8c:	4798      	blx	r3
   13c8e:	0003      	movs	r3, r0
   13c90:	b25b      	sxtb	r3, r3
   13c92:	2207      	movs	r2, #7
   13c94:	4393      	bics	r3, r2
   13c96:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
   13c98:	2203      	movs	r2, #3
   13c9a:	4313      	orrs	r3, r2
   13c9c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13c9e:	b2db      	uxtb	r3, r3
   13ca0:	0019      	movs	r1, r3
   13ca2:	2031      	movs	r0, #49	; 0x31
   13ca4:	4b07      	ldr	r3, [pc, #28]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13ca6:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13ca8:	210a      	movs	r1, #10
   13caa:	2037      	movs	r0, #55	; 0x37
   13cac:	4b05      	ldr	r3, [pc, #20]	; (13cc4 <SX1276SetRxConfig+0x514>)
   13cae:	4798      	blx	r3
        break;
   13cb0:	46c0      	nop			; (mov r8, r8)
}
   13cb2:	46c0      	nop			; (mov r8, r8)
   13cb4:	46bd      	mov	sp, r7
   13cb6:	b005      	add	sp, #20
   13cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cba:	46c0      	nop			; (mov r8, r8)
   13cbc:	20001c5c 	.word	0x20001c5c
   13cc0:	00014e35 	.word	0x00014e35
   13cc4:	00014e09 	.word	0x00014e09
   13cc8:	1f4add40 	.word	0x1f4add40

00013ccc <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
   13ccc:	b590      	push	{r4, r7, lr}
   13cce:	b085      	sub	sp, #20
   13cd0:	af00      	add	r7, sp, #0
   13cd2:	60ba      	str	r2, [r7, #8]
   13cd4:	607b      	str	r3, [r7, #4]
   13cd6:	230f      	movs	r3, #15
   13cd8:	18fb      	adds	r3, r7, r3
   13cda:	1c02      	adds	r2, r0, #0
   13cdc:	701a      	strb	r2, [r3, #0]
   13cde:	230e      	movs	r3, #14
   13ce0:	18fb      	adds	r3, r7, r3
   13ce2:	1c0a      	adds	r2, r1, #0
   13ce4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   13ce6:	230f      	movs	r3, #15
   13ce8:	18fb      	adds	r3, r7, r3
   13cea:	781b      	ldrb	r3, [r3, #0]
   13cec:	0018      	movs	r0, r3
   13cee:	4bdf      	ldr	r3, [pc, #892]	; (1406c <SX1276SetTxConfig+0x3a0>)
   13cf0:	4798      	blx	r3

    SX1276SetRfTxPower( power );
   13cf2:	230e      	movs	r3, #14
   13cf4:	18fb      	adds	r3, r7, r3
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	b25b      	sxtb	r3, r3
   13cfa:	0018      	movs	r0, r3
   13cfc:	4bdc      	ldr	r3, [pc, #880]	; (14070 <SX1276SetTxConfig+0x3a4>)
   13cfe:	4798      	blx	r3

    switch( modem )
   13d00:	230f      	movs	r3, #15
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	781b      	ldrb	r3, [r3, #0]
   13d06:	2b00      	cmp	r3, #0
   13d08:	d003      	beq.n	13d12 <SX1276SetTxConfig+0x46>
   13d0a:	2b01      	cmp	r3, #1
   13d0c:	d100      	bne.n	13d10 <SX1276SetTxConfig+0x44>
   13d0e:	e0af      	b.n	13e70 <SX1276SetTxConfig+0x1a4>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
   13d10:	e1d5      	b.n	140be <SX1276SetTxConfig+0x3f2>
            SX1276.Settings.Fsk.Power = power;
   13d12:	4bd8      	ldr	r3, [pc, #864]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d14:	220e      	movs	r2, #14
   13d16:	18ba      	adds	r2, r7, r2
   13d18:	21e8      	movs	r1, #232	; 0xe8
   13d1a:	7812      	ldrb	r2, [r2, #0]
   13d1c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.Fdev = fdev;
   13d1e:	4bd5      	ldr	r3, [pc, #852]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d20:	21ec      	movs	r1, #236	; 0xec
   13d22:	68ba      	ldr	r2, [r7, #8]
   13d24:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   13d26:	4bd3      	ldr	r3, [pc, #844]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d28:	21f0      	movs	r1, #240	; 0xf0
   13d2a:	687a      	ldr	r2, [r7, #4]
   13d2c:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.Datarate = datarate;
   13d2e:	4bd1      	ldr	r3, [pc, #836]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d30:	21f8      	movs	r1, #248	; 0xf8
   13d32:	6a3a      	ldr	r2, [r7, #32]
   13d34:	505a      	str	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   13d36:	4bcf      	ldr	r3, [pc, #828]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d38:	2228      	movs	r2, #40	; 0x28
   13d3a:	18ba      	adds	r2, r7, r2
   13d3c:	21fc      	movs	r1, #252	; 0xfc
   13d3e:	8812      	ldrh	r2, [r2, #0]
   13d40:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.Fsk.FixLen = fixLen;
   13d42:	4bcc      	ldr	r3, [pc, #816]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d44:	222c      	movs	r2, #44	; 0x2c
   13d46:	18ba      	adds	r2, r7, r2
   13d48:	21fe      	movs	r1, #254	; 0xfe
   13d4a:	7812      	ldrb	r2, [r2, #0]
   13d4c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
   13d4e:	4ac9      	ldr	r2, [pc, #804]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d50:	2330      	movs	r3, #48	; 0x30
   13d52:	18f9      	adds	r1, r7, r3
   13d54:	2380      	movs	r3, #128	; 0x80
   13d56:	005b      	lsls	r3, r3, #1
   13d58:	7809      	ldrb	r1, [r1, #0]
   13d5a:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   13d5c:	4ac5      	ldr	r2, [pc, #788]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d5e:	233c      	movs	r3, #60	; 0x3c
   13d60:	18f9      	adds	r1, r7, r3
   13d62:	2302      	movs	r3, #2
   13d64:	33ff      	adds	r3, #255	; 0xff
   13d66:	7809      	ldrb	r1, [r1, #0]
   13d68:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.Fsk.TxTimeout = timeout;
   13d6a:	4ac2      	ldr	r2, [pc, #776]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13d6c:	2382      	movs	r3, #130	; 0x82
   13d6e:	005b      	lsls	r3, r3, #1
   13d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13d72:	50d1      	str	r1, [r2, r3]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
   13d74:	4bc0      	ldr	r3, [pc, #768]	; (14078 <SX1276SetTxConfig+0x3ac>)
   13d76:	68b8      	ldr	r0, [r7, #8]
   13d78:	4798      	blx	r3
   13d7a:	4cc0      	ldr	r4, [pc, #768]	; (1407c <SX1276SetTxConfig+0x3b0>)
   13d7c:	2200      	movs	r2, #0
   13d7e:	4bc0      	ldr	r3, [pc, #768]	; (14080 <SX1276SetTxConfig+0x3b4>)
   13d80:	47a0      	blx	r4
   13d82:	0003      	movs	r3, r0
   13d84:	000c      	movs	r4, r1
   13d86:	0019      	movs	r1, r3
   13d88:	0022      	movs	r2, r4
   13d8a:	4bbe      	ldr	r3, [pc, #760]	; (14084 <SX1276SetTxConfig+0x3b8>)
   13d8c:	0008      	movs	r0, r1
   13d8e:	0011      	movs	r1, r2
   13d90:	4798      	blx	r3
   13d92:	0003      	movs	r3, r0
   13d94:	b29b      	uxth	r3, r3
   13d96:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
   13d98:	68bb      	ldr	r3, [r7, #8]
   13d9a:	0a1b      	lsrs	r3, r3, #8
   13d9c:	b2db      	uxtb	r3, r3
   13d9e:	0019      	movs	r1, r3
   13da0:	2004      	movs	r0, #4
   13da2:	4bb9      	ldr	r3, [pc, #740]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13da4:	4798      	blx	r3
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
   13da6:	68bb      	ldr	r3, [r7, #8]
   13da8:	b2db      	uxtb	r3, r3
   13daa:	0019      	movs	r1, r3
   13dac:	2005      	movs	r0, #5
   13dae:	4bb6      	ldr	r3, [pc, #728]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13db0:	4798      	blx	r3
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
   13db2:	4bb1      	ldr	r3, [pc, #708]	; (14078 <SX1276SetTxConfig+0x3ac>)
   13db4:	6a38      	ldr	r0, [r7, #32]
   13db6:	4798      	blx	r3
   13db8:	0002      	movs	r2, r0
   13dba:	000b      	movs	r3, r1
   13dbc:	4caf      	ldr	r4, [pc, #700]	; (1407c <SX1276SetTxConfig+0x3b0>)
   13dbe:	2000      	movs	r0, #0
   13dc0:	49b2      	ldr	r1, [pc, #712]	; (1408c <SX1276SetTxConfig+0x3c0>)
   13dc2:	47a0      	blx	r4
   13dc4:	0003      	movs	r3, r0
   13dc6:	000c      	movs	r4, r1
   13dc8:	0019      	movs	r1, r3
   13dca:	0022      	movs	r2, r4
   13dcc:	4bad      	ldr	r3, [pc, #692]	; (14084 <SX1276SetTxConfig+0x3b8>)
   13dce:	0008      	movs	r0, r1
   13dd0:	0011      	movs	r1, r2
   13dd2:	4798      	blx	r3
   13dd4:	0003      	movs	r3, r0
   13dd6:	b29b      	uxth	r3, r3
   13dd8:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
   13dda:	6a3b      	ldr	r3, [r7, #32]
   13ddc:	0a1b      	lsrs	r3, r3, #8
   13dde:	b2db      	uxtb	r3, r3
   13de0:	0019      	movs	r1, r3
   13de2:	2002      	movs	r0, #2
   13de4:	4ba8      	ldr	r3, [pc, #672]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13de6:	4798      	blx	r3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
   13de8:	6a3b      	ldr	r3, [r7, #32]
   13dea:	b2db      	uxtb	r3, r3
   13dec:	0019      	movs	r1, r3
   13dee:	2003      	movs	r0, #3
   13df0:	4ba5      	ldr	r3, [pc, #660]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13df2:	4798      	blx	r3
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   13df4:	2328      	movs	r3, #40	; 0x28
   13df6:	18fb      	adds	r3, r7, r3
   13df8:	881b      	ldrh	r3, [r3, #0]
   13dfa:	0a1b      	lsrs	r3, r3, #8
   13dfc:	b29b      	uxth	r3, r3
   13dfe:	b2db      	uxtb	r3, r3
   13e00:	0019      	movs	r1, r3
   13e02:	2025      	movs	r0, #37	; 0x25
   13e04:	4ba0      	ldr	r3, [pc, #640]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13e06:	4798      	blx	r3
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
   13e08:	2328      	movs	r3, #40	; 0x28
   13e0a:	18fb      	adds	r3, r7, r3
   13e0c:	881b      	ldrh	r3, [r3, #0]
   13e0e:	b2db      	uxtb	r3, r3
   13e10:	0019      	movs	r1, r3
   13e12:	2026      	movs	r0, #38	; 0x26
   13e14:	4b9c      	ldr	r3, [pc, #624]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13e16:	4798      	blx	r3
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13e18:	2030      	movs	r0, #48	; 0x30
   13e1a:	4b9d      	ldr	r3, [pc, #628]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13e1c:	4798      	blx	r3
   13e1e:	0003      	movs	r3, r0
   13e20:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
   13e22:	226f      	movs	r2, #111	; 0x6f
   13e24:	4013      	ands	r3, r2
   13e26:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13e28:	232c      	movs	r3, #44	; 0x2c
   13e2a:	18fb      	adds	r3, r7, r3
   13e2c:	781b      	ldrb	r3, [r3, #0]
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d001      	beq.n	13e36 <SX1276SetTxConfig+0x16a>
   13e32:	2300      	movs	r3, #0
   13e34:	e001      	b.n	13e3a <SX1276SetTxConfig+0x16e>
   13e36:	2380      	movs	r3, #128	; 0x80
   13e38:	425b      	negs	r3, r3
   13e3a:	4313      	orrs	r3, r2
   13e3c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
   13e3e:	2330      	movs	r3, #48	; 0x30
   13e40:	18fb      	adds	r3, r7, r3
   13e42:	781b      	ldrb	r3, [r3, #0]
   13e44:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   13e46:	b25b      	sxtb	r3, r3
   13e48:	4313      	orrs	r3, r2
   13e4a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
   13e4c:	b2db      	uxtb	r3, r3
   13e4e:	0019      	movs	r1, r3
   13e50:	2030      	movs	r0, #48	; 0x30
   13e52:	4b8d      	ldr	r3, [pc, #564]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13e54:	4798      	blx	r3
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   13e56:	2031      	movs	r0, #49	; 0x31
   13e58:	4b8d      	ldr	r3, [pc, #564]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13e5a:	4798      	blx	r3
   13e5c:	0003      	movs	r3, r0
   13e5e:	001a      	movs	r2, r3
   13e60:	2340      	movs	r3, #64	; 0x40
   13e62:	4313      	orrs	r3, r2
   13e64:	b2db      	uxtb	r3, r3
   13e66:	0019      	movs	r1, r3
   13e68:	2031      	movs	r0, #49	; 0x31
   13e6a:	4b87      	ldr	r3, [pc, #540]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13e6c:	4798      	blx	r3
        break;
   13e6e:	e126      	b.n	140be <SX1276SetTxConfig+0x3f2>
            SX1276.Settings.LoRa.Power = power;
   13e70:	4a80      	ldr	r2, [pc, #512]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13e72:	230e      	movs	r3, #14
   13e74:	18f9      	adds	r1, r7, r3
   13e76:	238e      	movs	r3, #142	; 0x8e
   13e78:	005b      	lsls	r3, r3, #1
   13e7a:	7809      	ldrb	r1, [r1, #0]
   13e7c:	54d1      	strb	r1, [r2, r3]
            if( bandwidth > 2 )
   13e7e:	687b      	ldr	r3, [r7, #4]
   13e80:	2b02      	cmp	r3, #2
   13e82:	d900      	bls.n	13e86 <SX1276SetTxConfig+0x1ba>
                while( 1 );
   13e84:	e7fe      	b.n	13e84 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
   13e86:	687b      	ldr	r3, [r7, #4]
   13e88:	3307      	adds	r3, #7
   13e8a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   13e8c:	4a79      	ldr	r2, [pc, #484]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13e8e:	2390      	movs	r3, #144	; 0x90
   13e90:	005b      	lsls	r3, r3, #1
   13e92:	6879      	ldr	r1, [r7, #4]
   13e94:	50d1      	str	r1, [r2, r3]
            SX1276.Settings.LoRa.Datarate = datarate;
   13e96:	4a77      	ldr	r2, [pc, #476]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13e98:	2392      	movs	r3, #146	; 0x92
   13e9a:	005b      	lsls	r3, r3, #1
   13e9c:	6a39      	ldr	r1, [r7, #32]
   13e9e:	50d1      	str	r1, [r2, r3]
            SX1276.Settings.LoRa.Coderate = coderate;
   13ea0:	4a74      	ldr	r2, [pc, #464]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ea2:	2324      	movs	r3, #36	; 0x24
   13ea4:	18f9      	adds	r1, r7, r3
   13ea6:	232a      	movs	r3, #42	; 0x2a
   13ea8:	33ff      	adds	r3, #255	; 0xff
   13eaa:	7809      	ldrb	r1, [r1, #0]
   13eac:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   13eae:	4a71      	ldr	r2, [pc, #452]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13eb0:	2328      	movs	r3, #40	; 0x28
   13eb2:	18f9      	adds	r1, r7, r3
   13eb4:	2395      	movs	r3, #149	; 0x95
   13eb6:	005b      	lsls	r3, r3, #1
   13eb8:	8809      	ldrh	r1, [r1, #0]
   13eba:	52d1      	strh	r1, [r2, r3]
            SX1276.Settings.LoRa.FixLen = fixLen;
   13ebc:	4a6d      	ldr	r2, [pc, #436]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ebe:	232c      	movs	r3, #44	; 0x2c
   13ec0:	18f9      	adds	r1, r7, r3
   13ec2:	2396      	movs	r3, #150	; 0x96
   13ec4:	005b      	lsls	r3, r3, #1
   13ec6:	7809      	ldrb	r1, [r1, #0]
   13ec8:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   13eca:	4a6a      	ldr	r2, [pc, #424]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ecc:	2334      	movs	r3, #52	; 0x34
   13ece:	18f9      	adds	r1, r7, r3
   13ed0:	2330      	movs	r3, #48	; 0x30
   13ed2:	33ff      	adds	r3, #255	; 0xff
   13ed4:	7809      	ldrb	r1, [r1, #0]
   13ed6:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13ed8:	4a66      	ldr	r2, [pc, #408]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13eda:	2338      	movs	r3, #56	; 0x38
   13edc:	18f9      	adds	r1, r7, r3
   13ede:	2398      	movs	r3, #152	; 0x98
   13ee0:	005b      	lsls	r3, r3, #1
   13ee2:	7809      	ldrb	r1, [r1, #0]
   13ee4:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.CrcOn = crcOn;
   13ee6:	4a63      	ldr	r2, [pc, #396]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ee8:	2330      	movs	r3, #48	; 0x30
   13eea:	18f9      	adds	r1, r7, r3
   13eec:	2397      	movs	r3, #151	; 0x97
   13eee:	005b      	lsls	r3, r3, #1
   13ef0:	7809      	ldrb	r1, [r1, #0]
   13ef2:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   13ef4:	4a5f      	ldr	r2, [pc, #380]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ef6:	233c      	movs	r3, #60	; 0x3c
   13ef8:	18f9      	adds	r1, r7, r3
   13efa:	2332      	movs	r3, #50	; 0x32
   13efc:	33ff      	adds	r3, #255	; 0xff
   13efe:	7809      	ldrb	r1, [r1, #0]
   13f00:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.LoRa.TxTimeout = timeout;
   13f02:	4a5c      	ldr	r2, [pc, #368]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13f04:	239a      	movs	r3, #154	; 0x9a
   13f06:	005b      	lsls	r3, r3, #1
   13f08:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13f0a:	50d1      	str	r1, [r2, r3]
            if( datarate > 12 )
   13f0c:	6a3b      	ldr	r3, [r7, #32]
   13f0e:	2b0c      	cmp	r3, #12
   13f10:	d902      	bls.n	13f18 <SX1276SetTxConfig+0x24c>
                datarate = 12;
   13f12:	230c      	movs	r3, #12
   13f14:	623b      	str	r3, [r7, #32]
   13f16:	e004      	b.n	13f22 <SX1276SetTxConfig+0x256>
            else if( datarate < 6 )
   13f18:	6a3b      	ldr	r3, [r7, #32]
   13f1a:	2b05      	cmp	r3, #5
   13f1c:	d801      	bhi.n	13f22 <SX1276SetTxConfig+0x256>
                datarate = 6;
   13f1e:	2306      	movs	r3, #6
   13f20:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13f22:	687b      	ldr	r3, [r7, #4]
   13f24:	2b07      	cmp	r3, #7
   13f26:	d105      	bne.n	13f34 <SX1276SetTxConfig+0x268>
   13f28:	6a3b      	ldr	r3, [r7, #32]
   13f2a:	2b0b      	cmp	r3, #11
   13f2c:	d008      	beq.n	13f40 <SX1276SetTxConfig+0x274>
   13f2e:	6a3b      	ldr	r3, [r7, #32]
   13f30:	2b0c      	cmp	r3, #12
   13f32:	d005      	beq.n	13f40 <SX1276SetTxConfig+0x274>
   13f34:	687b      	ldr	r3, [r7, #4]
   13f36:	2b08      	cmp	r3, #8
   13f38:	d108      	bne.n	13f4c <SX1276SetTxConfig+0x280>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   13f3a:	6a3b      	ldr	r3, [r7, #32]
   13f3c:	2b0c      	cmp	r3, #12
   13f3e:	d105      	bne.n	13f4c <SX1276SetTxConfig+0x280>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
   13f40:	4a4c      	ldr	r2, [pc, #304]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13f42:	2394      	movs	r3, #148	; 0x94
   13f44:	005b      	lsls	r3, r3, #1
   13f46:	2101      	movs	r1, #1
   13f48:	54d1      	strb	r1, [r2, r3]
   13f4a:	e004      	b.n	13f56 <SX1276SetTxConfig+0x28a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   13f4c:	4a49      	ldr	r2, [pc, #292]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13f4e:	2394      	movs	r3, #148	; 0x94
   13f50:	005b      	lsls	r3, r3, #1
   13f52:	2100      	movs	r1, #0
   13f54:	54d1      	strb	r1, [r2, r3]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13f56:	4a47      	ldr	r2, [pc, #284]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13f58:	2330      	movs	r3, #48	; 0x30
   13f5a:	33ff      	adds	r3, #255	; 0xff
   13f5c:	5cd3      	ldrb	r3, [r2, r3]
   13f5e:	2b00      	cmp	r3, #0
   13f60:	d014      	beq.n	13f8c <SX1276SetTxConfig+0x2c0>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   13f62:	2044      	movs	r0, #68	; 0x44
   13f64:	4b4a      	ldr	r3, [pc, #296]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13f66:	4798      	blx	r3
   13f68:	0003      	movs	r3, r0
   13f6a:	001a      	movs	r2, r3
   13f6c:	2380      	movs	r3, #128	; 0x80
   13f6e:	425b      	negs	r3, r3
   13f70:	4313      	orrs	r3, r2
   13f72:	b2db      	uxtb	r3, r3
   13f74:	0019      	movs	r1, r3
   13f76:	2044      	movs	r0, #68	; 0x44
   13f78:	4b43      	ldr	r3, [pc, #268]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13f7a:	4798      	blx	r3
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   13f7c:	4a3d      	ldr	r2, [pc, #244]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13f7e:	2398      	movs	r3, #152	; 0x98
   13f80:	005b      	lsls	r3, r3, #1
   13f82:	5cd3      	ldrb	r3, [r2, r3]
   13f84:	0019      	movs	r1, r3
   13f86:	2024      	movs	r0, #36	; 0x24
   13f88:	4b3f      	ldr	r3, [pc, #252]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13f8a:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13f8c:	201d      	movs	r0, #29
   13f8e:	4b40      	ldr	r3, [pc, #256]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13f90:	4798      	blx	r3
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13f92:	687b      	ldr	r3, [r7, #4]
   13f94:	b2db      	uxtb	r3, r3
   13f96:	011b      	lsls	r3, r3, #4
   13f98:	b2da      	uxtb	r2, r3
   13f9a:	2324      	movs	r3, #36	; 0x24
   13f9c:	18fb      	adds	r3, r7, r3
   13f9e:	781b      	ldrb	r3, [r3, #0]
   13fa0:	18db      	adds	r3, r3, r3
   13fa2:	b2db      	uxtb	r3, r3
   13fa4:	4313      	orrs	r3, r2
   13fa6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   13fa8:	232c      	movs	r3, #44	; 0x2c
   13faa:	18fb      	adds	r3, r7, r3
   13fac:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13fae:	4313      	orrs	r3, r2
   13fb0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
   13fb2:	0019      	movs	r1, r3
   13fb4:	201d      	movs	r0, #29
   13fb6:	4b34      	ldr	r3, [pc, #208]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13fb8:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   13fba:	201e      	movs	r0, #30
   13fbc:	4b34      	ldr	r3, [pc, #208]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13fbe:	4798      	blx	r3
   13fc0:	0003      	movs	r3, r0
   13fc2:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
   13fc4:	230b      	movs	r3, #11
   13fc6:	4013      	ands	r3, r2
   13fc8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   13fca:	6a3b      	ldr	r3, [r7, #32]
   13fcc:	b2db      	uxtb	r3, r3
   13fce:	011b      	lsls	r3, r3, #4
   13fd0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
   13fd2:	4313      	orrs	r3, r2
   13fd4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   13fd6:	2330      	movs	r3, #48	; 0x30
   13fd8:	18fb      	adds	r3, r7, r3
   13fda:	781b      	ldrb	r3, [r3, #0]
   13fdc:	009b      	lsls	r3, r3, #2
   13fde:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
   13fe0:	4313      	orrs	r3, r2
   13fe2:	b2db      	uxtb	r3, r3
   13fe4:	0019      	movs	r1, r3
   13fe6:	201e      	movs	r0, #30
   13fe8:	4b27      	ldr	r3, [pc, #156]	; (14088 <SX1276SetTxConfig+0x3bc>)
   13fea:	4798      	blx	r3
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   13fec:	2026      	movs	r0, #38	; 0x26
   13fee:	4b28      	ldr	r3, [pc, #160]	; (14090 <SX1276SetTxConfig+0x3c4>)
   13ff0:	4798      	blx	r3
   13ff2:	0003      	movs	r3, r0
   13ff4:	b25b      	sxtb	r3, r3
   13ff6:	2208      	movs	r2, #8
   13ff8:	4393      	bics	r3, r2
   13ffa:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   13ffc:	491d      	ldr	r1, [pc, #116]	; (14074 <SX1276SetTxConfig+0x3a8>)
   13ffe:	2394      	movs	r3, #148	; 0x94
   14000:	005b      	lsls	r3, r3, #1
   14002:	5ccb      	ldrb	r3, [r1, r3]
   14004:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
   14006:	b25b      	sxtb	r3, r3
   14008:	4313      	orrs	r3, r2
   1400a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
   1400c:	b2db      	uxtb	r3, r3
   1400e:	0019      	movs	r1, r3
   14010:	2026      	movs	r0, #38	; 0x26
   14012:	4b1d      	ldr	r3, [pc, #116]	; (14088 <SX1276SetTxConfig+0x3bc>)
   14014:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   14016:	2328      	movs	r3, #40	; 0x28
   14018:	18fb      	adds	r3, r7, r3
   1401a:	881b      	ldrh	r3, [r3, #0]
   1401c:	0a1b      	lsrs	r3, r3, #8
   1401e:	b29b      	uxth	r3, r3
   14020:	b2db      	uxtb	r3, r3
   14022:	0019      	movs	r1, r3
   14024:	2020      	movs	r0, #32
   14026:	4b18      	ldr	r3, [pc, #96]	; (14088 <SX1276SetTxConfig+0x3bc>)
   14028:	4798      	blx	r3
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
   1402a:	2328      	movs	r3, #40	; 0x28
   1402c:	18fb      	adds	r3, r7, r3
   1402e:	881b      	ldrh	r3, [r3, #0]
   14030:	b2db      	uxtb	r3, r3
   14032:	0019      	movs	r1, r3
   14034:	2021      	movs	r0, #33	; 0x21
   14036:	4b14      	ldr	r3, [pc, #80]	; (14088 <SX1276SetTxConfig+0x3bc>)
   14038:	4798      	blx	r3
            if( datarate == 6 )
   1403a:	6a3b      	ldr	r3, [r7, #32]
   1403c:	2b06      	cmp	r3, #6
   1403e:	d129      	bne.n	14094 <SX1276SetTxConfig+0x3c8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14040:	2031      	movs	r0, #49	; 0x31
   14042:	4b13      	ldr	r3, [pc, #76]	; (14090 <SX1276SetTxConfig+0x3c4>)
   14044:	4798      	blx	r3
   14046:	0003      	movs	r3, r0
   14048:	b25b      	sxtb	r3, r3
   1404a:	2207      	movs	r2, #7
   1404c:	4393      	bics	r3, r2
   1404e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
   14050:	2205      	movs	r2, #5
   14052:	4313      	orrs	r3, r2
   14054:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   14056:	b2db      	uxtb	r3, r3
   14058:	0019      	movs	r1, r3
   1405a:	2031      	movs	r0, #49	; 0x31
   1405c:	4b0a      	ldr	r3, [pc, #40]	; (14088 <SX1276SetTxConfig+0x3bc>)
   1405e:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   14060:	210c      	movs	r1, #12
   14062:	2037      	movs	r0, #55	; 0x37
   14064:	4b08      	ldr	r3, [pc, #32]	; (14088 <SX1276SetTxConfig+0x3bc>)
   14066:	4798      	blx	r3
        break;
   14068:	e028      	b.n	140bc <SX1276SetTxConfig+0x3f0>
   1406a:	46c0      	nop			; (mov r8, r8)
   1406c:	00014d41 	.word	0x00014d41
   14070:	00004511 	.word	0x00004511
   14074:	20001c5c 	.word	0x20001c5c
   14078:	00019f15 	.word	0x00019f15
   1407c:	00018a95 	.word	0x00018a95
   14080:	404e8480 	.word	0x404e8480
   14084:	00017ef5 	.word	0x00017ef5
   14088:	00014e09 	.word	0x00014e09
   1408c:	417e8480 	.word	0x417e8480
   14090:	00014e35 	.word	0x00014e35
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14094:	2031      	movs	r0, #49	; 0x31
   14096:	4b0c      	ldr	r3, [pc, #48]	; (140c8 <SX1276SetTxConfig+0x3fc>)
   14098:	4798      	blx	r3
   1409a:	0003      	movs	r3, r0
   1409c:	b25b      	sxtb	r3, r3
   1409e:	2207      	movs	r2, #7
   140a0:	4393      	bics	r3, r2
   140a2:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
   140a4:	2203      	movs	r2, #3
   140a6:	4313      	orrs	r3, r2
   140a8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   140aa:	b2db      	uxtb	r3, r3
   140ac:	0019      	movs	r1, r3
   140ae:	2031      	movs	r0, #49	; 0x31
   140b0:	4b06      	ldr	r3, [pc, #24]	; (140cc <SX1276SetTxConfig+0x400>)
   140b2:	4798      	blx	r3
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   140b4:	210a      	movs	r1, #10
   140b6:	2037      	movs	r0, #55	; 0x37
   140b8:	4b04      	ldr	r3, [pc, #16]	; (140cc <SX1276SetTxConfig+0x400>)
   140ba:	4798      	blx	r3
        break;
   140bc:	46c0      	nop			; (mov r8, r8)
}
   140be:	46c0      	nop			; (mov r8, r8)
   140c0:	46bd      	mov	sp, r7
   140c2:	b005      	add	sp, #20
   140c4:	bd90      	pop	{r4, r7, pc}
   140c6:	46c0      	nop			; (mov r8, r8)
   140c8:	00014e35 	.word	0x00014e35
   140cc:	00014e09 	.word	0x00014e09

000140d0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
   140d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   140d2:	b097      	sub	sp, #92	; 0x5c
   140d4:	af00      	add	r7, sp, #0
   140d6:	0002      	movs	r2, r0
   140d8:	230f      	movs	r3, #15
   140da:	18fb      	adds	r3, r7, r3
   140dc:	701a      	strb	r2, [r3, #0]
   140de:	230e      	movs	r3, #14
   140e0:	18fb      	adds	r3, r7, r3
   140e2:	1c0a      	adds	r2, r1, #0
   140e4:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
   140e6:	2300      	movs	r3, #0
   140e8:	657b      	str	r3, [r7, #84]	; 0x54

    switch( modem )
   140ea:	230f      	movs	r3, #15
   140ec:	18fb      	adds	r3, r7, r3
   140ee:	781b      	ldrb	r3, [r3, #0]
   140f0:	2b00      	cmp	r3, #0
   140f2:	d003      	beq.n	140fc <SX1276GetTimeOnAir+0x2c>
   140f4:	2b01      	cmp	r3, #1
   140f6:	d100      	bne.n	140fa <SX1276GetTimeOnAir+0x2a>
   140f8:	e08a      	b.n	14210 <SX1276GetTimeOnAir+0x140>
   140fa:	e175      	b.n	143e8 <SX1276GetTimeOnAir+0x318>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   140fc:	4bbd      	ldr	r3, [pc, #756]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   140fe:	22fc      	movs	r2, #252	; 0xfc
   14100:	5a9b      	ldrh	r3, [r3, r2]
   14102:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   14104:	2027      	movs	r0, #39	; 0x27
   14106:	4bbc      	ldr	r3, [pc, #752]	; (143f8 <SX1276GetTimeOnAir+0x328>)
   14108:	4798      	blx	r3
   1410a:	0003      	movs	r3, r0
   1410c:	001a      	movs	r2, r3
   1410e:	23f8      	movs	r3, #248	; 0xf8
   14110:	439a      	bics	r2, r3
   14112:	0013      	movs	r3, r2
   14114:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   14116:	18e2      	adds	r2, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   14118:	4bb8      	ldr	r3, [pc, #736]	; (143fc <SX1276GetTimeOnAir+0x32c>)
   1411a:	0010      	movs	r0, r2
   1411c:	4798      	blx	r3
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
   1411e:	4bb5      	ldr	r3, [pc, #724]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   14120:	22fe      	movs	r2, #254	; 0xfe
   14122:	5c9b      	ldrb	r3, [r3, r2]
   14124:	2b00      	cmp	r3, #0
   14126:	d002      	beq.n	1412e <SX1276GetTimeOnAir+0x5e>
   14128:	2300      	movs	r3, #0
   1412a:	2400      	movs	r4, #0
   1412c:	e001      	b.n	14132 <SX1276GetTimeOnAir+0x62>
   1412e:	2300      	movs	r3, #0
   14130:	4cb3      	ldr	r4, [pc, #716]	; (14400 <SX1276GetTimeOnAir+0x330>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
   14132:	4db4      	ldr	r5, [pc, #720]	; (14404 <SX1276GetTimeOnAir+0x334>)
   14134:	001a      	movs	r2, r3
   14136:	0023      	movs	r3, r4
   14138:	47a8      	blx	r5
   1413a:	0003      	movs	r3, r0
   1413c:	000c      	movs	r4, r1
   1413e:	603b      	str	r3, [r7, #0]
   14140:	607c      	str	r4, [r7, #4]
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
   14142:	2030      	movs	r0, #48	; 0x30
   14144:	4bac      	ldr	r3, [pc, #688]	; (143f8 <SX1276GetTimeOnAir+0x328>)
   14146:	4798      	blx	r3
   14148:	0003      	movs	r3, r0
   1414a:	001a      	movs	r2, r3
   1414c:	23f9      	movs	r3, #249	; 0xf9
   1414e:	439a      	bics	r2, r3
   14150:	1e13      	subs	r3, r2, #0
   14152:	d002      	beq.n	1415a <SX1276GetTimeOnAir+0x8a>
   14154:	2300      	movs	r3, #0
   14156:	4caa      	ldr	r4, [pc, #680]	; (14400 <SX1276GetTimeOnAir+0x330>)
   14158:	e001      	b.n	1415e <SX1276GetTimeOnAir+0x8e>
   1415a:	2300      	movs	r3, #0
   1415c:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
   1415e:	4da9      	ldr	r5, [pc, #676]	; (14404 <SX1276GetTimeOnAir+0x334>)
   14160:	001a      	movs	r2, r3
   14162:	0023      	movs	r3, r4
   14164:	6838      	ldr	r0, [r7, #0]
   14166:	6879      	ldr	r1, [r7, #4]
   14168:	47a8      	blx	r5
   1416a:	0003      	movs	r3, r0
   1416c:	000c      	movs	r4, r1
   1416e:	001d      	movs	r5, r3
   14170:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
   14172:	230e      	movs	r3, #14
   14174:	18fb      	adds	r3, r7, r3
   14176:	781a      	ldrb	r2, [r3, #0]
   14178:	4ba0      	ldr	r3, [pc, #640]	; (143fc <SX1276GetTimeOnAir+0x32c>)
   1417a:	0010      	movs	r0, r2
   1417c:	4798      	blx	r3
   1417e:	0002      	movs	r2, r0
   14180:	000b      	movs	r3, r1
   14182:	4ca0      	ldr	r4, [pc, #640]	; (14404 <SX1276GetTimeOnAir+0x334>)
   14184:	0028      	movs	r0, r5
   14186:	0031      	movs	r1, r6
   14188:	47a0      	blx	r4
   1418a:	0003      	movs	r3, r0
   1418c:	000c      	movs	r4, r1
   1418e:	0018      	movs	r0, r3
   14190:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
   14192:	4a98      	ldr	r2, [pc, #608]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   14194:	2380      	movs	r3, #128	; 0x80
   14196:	005b      	lsls	r3, r3, #1
   14198:	5cd3      	ldrb	r3, [r2, r3]
   1419a:	2b00      	cmp	r3, #0
   1419c:	d003      	beq.n	141a6 <SX1276GetTimeOnAir+0xd6>
   1419e:	2300      	movs	r3, #0
   141a0:	2480      	movs	r4, #128	; 0x80
   141a2:	05e4      	lsls	r4, r4, #23
   141a4:	e001      	b.n	141aa <SX1276GetTimeOnAir+0xda>
   141a6:	2300      	movs	r3, #0
   141a8:	2400      	movs	r4, #0
                                     pktLen +
   141aa:	4d96      	ldr	r5, [pc, #600]	; (14404 <SX1276GetTimeOnAir+0x334>)
   141ac:	001a      	movs	r2, r3
   141ae:	0023      	movs	r3, r4
   141b0:	47a8      	blx	r5
   141b2:	0003      	movs	r3, r0
   141b4:	000c      	movs	r4, r1
   141b6:	0018      	movs	r0, r3
   141b8:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   141ba:	4c93      	ldr	r4, [pc, #588]	; (14408 <SX1276GetTimeOnAir+0x338>)
   141bc:	2200      	movs	r2, #0
   141be:	4b93      	ldr	r3, [pc, #588]	; (1440c <SX1276GetTimeOnAir+0x33c>)
   141c0:	47a0      	blx	r4
   141c2:	0003      	movs	r3, r0
   141c4:	000c      	movs	r4, r1
   141c6:	001d      	movs	r5, r3
   141c8:	0026      	movs	r6, r4
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
   141ca:	4b8a      	ldr	r3, [pc, #552]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   141cc:	22f8      	movs	r2, #248	; 0xf8
   141ce:	589a      	ldr	r2, [r3, r2]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
   141d0:	4b8f      	ldr	r3, [pc, #572]	; (14410 <SX1276GetTimeOnAir+0x340>)
   141d2:	0010      	movs	r0, r2
   141d4:	4798      	blx	r3
   141d6:	0002      	movs	r2, r0
   141d8:	000b      	movs	r3, r1
   141da:	4c8e      	ldr	r4, [pc, #568]	; (14414 <SX1276GetTimeOnAir+0x344>)
   141dc:	0028      	movs	r0, r5
   141de:	0031      	movs	r1, r6
   141e0:	47a0      	blx	r4
   141e2:	0003      	movs	r3, r0
   141e4:	000c      	movs	r4, r1
   141e6:	0018      	movs	r0, r3
   141e8:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
   141ea:	4c87      	ldr	r4, [pc, #540]	; (14408 <SX1276GetTimeOnAir+0x338>)
   141ec:	2200      	movs	r2, #0
   141ee:	4b8a      	ldr	r3, [pc, #552]	; (14418 <SX1276GetTimeOnAir+0x348>)
   141f0:	47a0      	blx	r4
   141f2:	0003      	movs	r3, r0
   141f4:	000c      	movs	r4, r1
   141f6:	0018      	movs	r0, r3
   141f8:	0021      	movs	r1, r4
   141fa:	4b88      	ldr	r3, [pc, #544]	; (1441c <SX1276GetTimeOnAir+0x34c>)
   141fc:	4798      	blx	r3
   141fe:	000a      	movs	r2, r1
   14200:	0001      	movs	r1, r0
   14202:	4b87      	ldr	r3, [pc, #540]	; (14420 <SX1276GetTimeOnAir+0x350>)
   14204:	0008      	movs	r0, r1
   14206:	0011      	movs	r1, r2
   14208:	4798      	blx	r3
   1420a:	0003      	movs	r3, r0
   1420c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        break;
   1420e:	e0eb      	b.n	143e8 <SX1276GetTimeOnAir+0x318>
    case MODEM_LORA:
        {
            double bw = 0.0;
   14210:	2300      	movs	r3, #0
   14212:	2400      	movs	r4, #0
   14214:	64bb      	str	r3, [r7, #72]	; 0x48
   14216:	64fc      	str	r4, [r7, #76]	; 0x4c
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
   14218:	4a76      	ldr	r2, [pc, #472]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   1421a:	2390      	movs	r3, #144	; 0x90
   1421c:	005b      	lsls	r3, r3, #1
   1421e:	58d3      	ldr	r3, [r2, r3]
   14220:	2b08      	cmp	r3, #8
   14222:	d008      	beq.n	14236 <SX1276GetTimeOnAir+0x166>
   14224:	2b09      	cmp	r3, #9
   14226:	d00b      	beq.n	14240 <SX1276GetTimeOnAir+0x170>
   14228:	2b07      	cmp	r3, #7
   1422a:	d10e      	bne.n	1424a <SX1276GetTimeOnAir+0x17a>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
   1422c:	2300      	movs	r3, #0
   1422e:	4c7d      	ldr	r4, [pc, #500]	; (14424 <SX1276GetTimeOnAir+0x354>)
   14230:	64bb      	str	r3, [r7, #72]	; 0x48
   14232:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   14234:	e009      	b.n	1424a <SX1276GetTimeOnAir+0x17a>
            case 8: // 250 kHz
                bw = 250000;
   14236:	2300      	movs	r3, #0
   14238:	4c7b      	ldr	r4, [pc, #492]	; (14428 <SX1276GetTimeOnAir+0x358>)
   1423a:	64bb      	str	r3, [r7, #72]	; 0x48
   1423c:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   1423e:	e004      	b.n	1424a <SX1276GetTimeOnAir+0x17a>
            case 9: // 500 kHz
                bw = 500000;
   14240:	2300      	movs	r3, #0
   14242:	4c7a      	ldr	r4, [pc, #488]	; (1442c <SX1276GetTimeOnAir+0x35c>)
   14244:	64bb      	str	r3, [r7, #72]	; 0x48
   14246:	64fc      	str	r4, [r7, #76]	; 0x4c
                break;
   14248:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
   1424a:	4a6a      	ldr	r2, [pc, #424]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   1424c:	2392      	movs	r3, #146	; 0x92
   1424e:	005b      	lsls	r3, r3, #1
   14250:	58d3      	ldr	r3, [r2, r3]
   14252:	2201      	movs	r2, #1
   14254:	409a      	lsls	r2, r3
   14256:	4b69      	ldr	r3, [pc, #420]	; (143fc <SX1276GetTimeOnAir+0x32c>)
   14258:	0010      	movs	r0, r2
   1425a:	4798      	blx	r3
   1425c:	0002      	movs	r2, r0
   1425e:	000b      	movs	r3, r1
   14260:	4c6c      	ldr	r4, [pc, #432]	; (14414 <SX1276GetTimeOnAir+0x344>)
   14262:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   14264:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   14266:	47a0      	blx	r4
   14268:	0003      	movs	r3, r0
   1426a:	000c      	movs	r4, r1
   1426c:	643b      	str	r3, [r7, #64]	; 0x40
   1426e:	647c      	str	r4, [r7, #68]	; 0x44
            double ts = 1 / rs;
   14270:	4c68      	ldr	r4, [pc, #416]	; (14414 <SX1276GetTimeOnAir+0x344>)
   14272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   14274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14276:	2000      	movs	r0, #0
   14278:	4961      	ldr	r1, [pc, #388]	; (14400 <SX1276GetTimeOnAir+0x330>)
   1427a:	47a0      	blx	r4
   1427c:	0003      	movs	r3, r0
   1427e:	000c      	movs	r4, r1
   14280:	63bb      	str	r3, [r7, #56]	; 0x38
   14282:	63fc      	str	r4, [r7, #60]	; 0x3c
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
   14284:	4a5b      	ldr	r2, [pc, #364]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   14286:	2395      	movs	r3, #149	; 0x95
   14288:	005b      	lsls	r3, r3, #1
   1428a:	5ad3      	ldrh	r3, [r2, r3]
   1428c:	001a      	movs	r2, r3
   1428e:	4b5b      	ldr	r3, [pc, #364]	; (143fc <SX1276GetTimeOnAir+0x32c>)
   14290:	0010      	movs	r0, r2
   14292:	4798      	blx	r3
   14294:	4c5b      	ldr	r4, [pc, #364]	; (14404 <SX1276GetTimeOnAir+0x334>)
   14296:	2200      	movs	r2, #0
   14298:	4b65      	ldr	r3, [pc, #404]	; (14430 <SX1276GetTimeOnAir+0x360>)
   1429a:	47a0      	blx	r4
   1429c:	0003      	movs	r3, r0
   1429e:	000c      	movs	r4, r1
   142a0:	0018      	movs	r0, r3
   142a2:	0021      	movs	r1, r4
   142a4:	4c58      	ldr	r4, [pc, #352]	; (14408 <SX1276GetTimeOnAir+0x338>)
   142a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   142a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   142aa:	47a0      	blx	r4
   142ac:	0003      	movs	r3, r0
   142ae:	000c      	movs	r4, r1
   142b0:	633b      	str	r3, [r7, #48]	; 0x30
   142b2:	637c      	str	r4, [r7, #52]	; 0x34
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   142b4:	230e      	movs	r3, #14
   142b6:	18fb      	adds	r3, r7, r3
   142b8:	781b      	ldrb	r3, [r3, #0]
   142ba:	00db      	lsls	r3, r3, #3
   142bc:	0019      	movs	r1, r3
   142be:	4a4d      	ldr	r2, [pc, #308]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   142c0:	2392      	movs	r3, #146	; 0x92
   142c2:	005b      	lsls	r3, r3, #1
   142c4:	58d3      	ldr	r3, [r2, r3]
   142c6:	009b      	lsls	r3, r3, #2
   142c8:	1acb      	subs	r3, r1, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
   142ca:	494a      	ldr	r1, [pc, #296]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   142cc:	2297      	movs	r2, #151	; 0x97
   142ce:	0052      	lsls	r2, r2, #1
   142d0:	5c8a      	ldrb	r2, [r1, r2]
   142d2:	0112      	lsls	r2, r2, #4
   142d4:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
   142d6:	4947      	ldr	r1, [pc, #284]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   142d8:	2396      	movs	r3, #150	; 0x96
   142da:	005b      	lsls	r3, r3, #1
   142dc:	5ccb      	ldrb	r3, [r1, r3]
   142de:	2b00      	cmp	r3, #0
   142e0:	d001      	beq.n	142e6 <SX1276GetTimeOnAir+0x216>
   142e2:	2314      	movs	r3, #20
   142e4:	e000      	b.n	142e8 <SX1276GetTimeOnAir+0x218>
   142e6:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
   142e8:	1ad3      	subs	r3, r2, r3
   142ea:	331c      	adds	r3, #28
   142ec:	001a      	movs	r2, r3
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   142ee:	4b48      	ldr	r3, [pc, #288]	; (14410 <SX1276GetTimeOnAir+0x340>)
   142f0:	0010      	movs	r0, r2
   142f2:	4798      	blx	r3
   142f4:	0005      	movs	r5, r0
   142f6:	000e      	movs	r6, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
   142f8:	4a3e      	ldr	r2, [pc, #248]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   142fa:	2392      	movs	r3, #146	; 0x92
   142fc:	005b      	lsls	r3, r3, #1
   142fe:	58d2      	ldr	r2, [r2, r3]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
   14300:	493c      	ldr	r1, [pc, #240]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   14302:	2394      	movs	r3, #148	; 0x94
   14304:	005b      	lsls	r3, r3, #1
   14306:	5ccb      	ldrb	r3, [r1, r3]
   14308:	2b00      	cmp	r3, #0
   1430a:	dd01      	ble.n	14310 <SX1276GetTimeOnAir+0x240>
   1430c:	2302      	movs	r3, #2
   1430e:	e000      	b.n	14312 <SX1276GetTimeOnAir+0x242>
   14310:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
   14312:	1ad3      	subs	r3, r2, r3
   14314:	009a      	lsls	r2, r3, #2
   14316:	4b3e      	ldr	r3, [pc, #248]	; (14410 <SX1276GetTimeOnAir+0x340>)
   14318:	0010      	movs	r0, r2
   1431a:	4798      	blx	r3
   1431c:	0002      	movs	r2, r0
   1431e:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   14320:	4c3c      	ldr	r4, [pc, #240]	; (14414 <SX1276GetTimeOnAir+0x344>)
   14322:	0028      	movs	r0, r5
   14324:	0031      	movs	r1, r6
   14326:	47a0      	blx	r4
   14328:	0003      	movs	r3, r0
   1432a:	000c      	movs	r4, r1
   1432c:	0018      	movs	r0, r3
   1432e:	0021      	movs	r1, r4
   14330:	4b40      	ldr	r3, [pc, #256]	; (14434 <SX1276GetTimeOnAir+0x364>)
   14332:	4798      	blx	r3
   14334:	0005      	movs	r5, r0
   14336:	000e      	movs	r6, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
   14338:	4a2e      	ldr	r2, [pc, #184]	; (143f4 <SX1276GetTimeOnAir+0x324>)
   1433a:	232a      	movs	r3, #42	; 0x2a
   1433c:	33ff      	adds	r3, #255	; 0xff
   1433e:	5cd3      	ldrb	r3, [r2, r3]
   14340:	1d1a      	adds	r2, r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
   14342:	4b2e      	ldr	r3, [pc, #184]	; (143fc <SX1276GetTimeOnAir+0x32c>)
   14344:	0010      	movs	r0, r2
   14346:	4798      	blx	r3
   14348:	0002      	movs	r2, r0
   1434a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
   1434c:	4c2e      	ldr	r4, [pc, #184]	; (14408 <SX1276GetTimeOnAir+0x338>)
   1434e:	0028      	movs	r0, r5
   14350:	0031      	movs	r1, r6
   14352:	47a0      	blx	r4
   14354:	0003      	movs	r3, r0
   14356:	000c      	movs	r4, r1
   14358:	62bb      	str	r3, [r7, #40]	; 0x28
   1435a:	62fc      	str	r4, [r7, #44]	; 0x2c
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
   1435c:	4c36      	ldr	r4, [pc, #216]	; (14438 <SX1276GetTimeOnAir+0x368>)
   1435e:	2200      	movs	r2, #0
   14360:	2300      	movs	r3, #0
   14362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14366:	47a0      	blx	r4
   14368:	1e03      	subs	r3, r0, #0
   1436a:	d008      	beq.n	1437e <SX1276GetTimeOnAir+0x2ae>
   1436c:	4c25      	ldr	r4, [pc, #148]	; (14404 <SX1276GetTimeOnAir+0x334>)
   1436e:	2200      	movs	r2, #0
   14370:	4b26      	ldr	r3, [pc, #152]	; (1440c <SX1276GetTimeOnAir+0x33c>)
   14372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14376:	47a0      	blx	r4
   14378:	0003      	movs	r3, r0
   1437a:	000c      	movs	r4, r1
   1437c:	e001      	b.n	14382 <SX1276GetTimeOnAir+0x2b2>
   1437e:	2300      	movs	r3, #0
   14380:	4c22      	ldr	r4, [pc, #136]	; (1440c <SX1276GetTimeOnAir+0x33c>)
   14382:	623b      	str	r3, [r7, #32]
   14384:	627c      	str	r4, [r7, #36]	; 0x24
            double tPayload = nPayload * ts;
   14386:	4c20      	ldr	r4, [pc, #128]	; (14408 <SX1276GetTimeOnAir+0x338>)
   14388:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1438c:	6a38      	ldr	r0, [r7, #32]
   1438e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14390:	47a0      	blx	r4
   14392:	0003      	movs	r3, r0
   14394:	000c      	movs	r4, r1
   14396:	61bb      	str	r3, [r7, #24]
   14398:	61fc      	str	r4, [r7, #28]
            // Time on air
            double tOnAir = tPreamble + tPayload;
   1439a:	4c1a      	ldr	r4, [pc, #104]	; (14404 <SX1276GetTimeOnAir+0x334>)
   1439c:	69ba      	ldr	r2, [r7, #24]
   1439e:	69fb      	ldr	r3, [r7, #28]
   143a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
   143a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   143a4:	47a0      	blx	r4
   143a6:	0003      	movs	r3, r0
   143a8:	000c      	movs	r4, r1
   143aa:	613b      	str	r3, [r7, #16]
   143ac:	617c      	str	r4, [r7, #20]
            // return ms secs
            airTime = floor( tOnAir * 1000 + 0.999 );
   143ae:	4c16      	ldr	r4, [pc, #88]	; (14408 <SX1276GetTimeOnAir+0x338>)
   143b0:	2200      	movs	r2, #0
   143b2:	4b19      	ldr	r3, [pc, #100]	; (14418 <SX1276GetTimeOnAir+0x348>)
   143b4:	6938      	ldr	r0, [r7, #16]
   143b6:	6979      	ldr	r1, [r7, #20]
   143b8:	47a0      	blx	r4
   143ba:	0003      	movs	r3, r0
   143bc:	000c      	movs	r4, r1
   143be:	0018      	movs	r0, r3
   143c0:	0021      	movs	r1, r4
   143c2:	4c10      	ldr	r4, [pc, #64]	; (14404 <SX1276GetTimeOnAir+0x334>)
   143c4:	4a1d      	ldr	r2, [pc, #116]	; (1443c <SX1276GetTimeOnAir+0x36c>)
   143c6:	4b1e      	ldr	r3, [pc, #120]	; (14440 <SX1276GetTimeOnAir+0x370>)
   143c8:	47a0      	blx	r4
   143ca:	0003      	movs	r3, r0
   143cc:	000c      	movs	r4, r1
   143ce:	0018      	movs	r0, r3
   143d0:	0021      	movs	r1, r4
   143d2:	4b1c      	ldr	r3, [pc, #112]	; (14444 <SX1276GetTimeOnAir+0x374>)
   143d4:	4798      	blx	r3
   143d6:	000a      	movs	r2, r1
   143d8:	0001      	movs	r1, r0
   143da:	4b11      	ldr	r3, [pc, #68]	; (14420 <SX1276GetTimeOnAir+0x350>)
   143dc:	0008      	movs	r0, r1
   143de:	0011      	movs	r1, r2
   143e0:	4798      	blx	r3
   143e2:	0003      	movs	r3, r0
   143e4:	657b      	str	r3, [r7, #84]	; 0x54
        }
        break;
   143e6:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
   143e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   143ea:	0018      	movs	r0, r3
   143ec:	46bd      	mov	sp, r7
   143ee:	b017      	add	sp, #92	; 0x5c
   143f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143f2:	46c0      	nop			; (mov r8, r8)
   143f4:	20001c5c 	.word	0x20001c5c
   143f8:	00014e35 	.word	0x00014e35
   143fc:	00019e91 	.word	0x00019e91
   14400:	3ff00000 	.word	0x3ff00000
   14404:	00018475 	.word	0x00018475
   14408:	000192fd 	.word	0x000192fd
   1440c:	40200000 	.word	0x40200000
   14410:	00019f15 	.word	0x00019f15
   14414:	00018a95 	.word	0x00018a95
   14418:	408f4000 	.word	0x408f4000
   1441c:	00017aa1 	.word	0x00017aa1
   14420:	00017ef5 	.word	0x00017ef5
   14424:	40fe8480 	.word	0x40fe8480
   14428:	410e8480 	.word	0x410e8480
   1442c:	411e8480 	.word	0x411e8480
   14430:	40110000 	.word	0x40110000
   14434:	00017845 	.word	0x00017845
   14438:	00017e8d 	.word	0x00017e8d
   1443c:	d916872b 	.word	0xd916872b
   14440:	3feff7ce 	.word	0x3feff7ce
   14444:	00017971 	.word	0x00017971

00014448 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
   14448:	b580      	push	{r7, lr}
   1444a:	b084      	sub	sp, #16
   1444c:	af00      	add	r7, sp, #0
   1444e:	6078      	str	r0, [r7, #4]
   14450:	000a      	movs	r2, r1
   14452:	1cfb      	adds	r3, r7, #3
   14454:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
   14456:	2300      	movs	r3, #0
   14458:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
   1445a:	4b62      	ldr	r3, [pc, #392]	; (145e4 <SX1276Send+0x19c>)
   1445c:	22e1      	movs	r2, #225	; 0xe1
   1445e:	5c9b      	ldrb	r3, [r3, r2]
   14460:	2b00      	cmp	r3, #0
   14462:	d002      	beq.n	1446a <SX1276Send+0x22>
   14464:	2b01      	cmp	r3, #1
   14466:	d05a      	beq.n	1451e <SX1276Send+0xd6>
   14468:	e0b4      	b.n	145d4 <SX1276Send+0x18c>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1446a:	4a5e      	ldr	r2, [pc, #376]	; (145e4 <SX1276Send+0x19c>)
   1446c:	238c      	movs	r3, #140	; 0x8c
   1446e:	005b      	lsls	r3, r3, #1
   14470:	2100      	movs	r1, #0
   14472:	52d1      	strh	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.Size = size;
   14474:	1cfb      	adds	r3, r7, #3
   14476:	781b      	ldrb	r3, [r3, #0]
   14478:	b299      	uxth	r1, r3
   1447a:	4a5a      	ldr	r2, [pc, #360]	; (145e4 <SX1276Send+0x19c>)
   1447c:	238b      	movs	r3, #139	; 0x8b
   1447e:	005b      	lsls	r3, r3, #1
   14480:	52d1      	strh	r1, [r2, r3]

            if( SX1276.Settings.Fsk.FixLen == false )
   14482:	4b58      	ldr	r3, [pc, #352]	; (145e4 <SX1276Send+0x19c>)
   14484:	22fe      	movs	r2, #254	; 0xfe
   14486:	5c9b      	ldrb	r3, [r3, r2]
   14488:	2201      	movs	r2, #1
   1448a:	4053      	eors	r3, r2
   1448c:	b2db      	uxtb	r3, r3
   1448e:	2b00      	cmp	r3, #0
   14490:	d005      	beq.n	1449e <SX1276Send+0x56>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
   14492:	1cfb      	adds	r3, r7, #3
   14494:	2101      	movs	r1, #1
   14496:	0018      	movs	r0, r3
   14498:	4b53      	ldr	r3, [pc, #332]	; (145e8 <SX1276Send+0x1a0>)
   1449a:	4798      	blx	r3
   1449c:	e005      	b.n	144aa <SX1276Send+0x62>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
   1449e:	1cfb      	adds	r3, r7, #3
   144a0:	781b      	ldrb	r3, [r3, #0]
   144a2:	0019      	movs	r1, r3
   144a4:	2032      	movs	r0, #50	; 0x32
   144a6:	4b51      	ldr	r3, [pc, #324]	; (145ec <SX1276Send+0x1a4>)
   144a8:	4798      	blx	r3
            }

            if( ( size > 0 ) && ( size <= 64 ) )
   144aa:	1cfb      	adds	r3, r7, #3
   144ac:	781b      	ldrb	r3, [r3, #0]
   144ae:	2b00      	cmp	r3, #0
   144b0:	d00a      	beq.n	144c8 <SX1276Send+0x80>
   144b2:	1cfb      	adds	r3, r7, #3
   144b4:	781b      	ldrb	r3, [r3, #0]
   144b6:	2b40      	cmp	r3, #64	; 0x40
   144b8:	d806      	bhi.n	144c8 <SX1276Send+0x80>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   144ba:	1cfb      	adds	r3, r7, #3
   144bc:	7819      	ldrb	r1, [r3, #0]
   144be:	4a49      	ldr	r2, [pc, #292]	; (145e4 <SX1276Send+0x19c>)
   144c0:	231c      	movs	r3, #28
   144c2:	33ff      	adds	r3, #255	; 0xff
   144c4:	54d1      	strb	r1, [r2, r3]
   144c6:	e00c      	b.n	144e2 <SX1276Send+0x9a>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
   144c8:	1cfb      	adds	r3, r7, #3
   144ca:	781b      	ldrb	r3, [r3, #0]
   144cc:	b29a      	uxth	r2, r3
   144ce:	6879      	ldr	r1, [r7, #4]
   144d0:	4b47      	ldr	r3, [pc, #284]	; (145f0 <SX1276Send+0x1a8>)
   144d2:	0018      	movs	r0, r3
   144d4:	4b47      	ldr	r3, [pc, #284]	; (145f4 <SX1276Send+0x1ac>)
   144d6:	4798      	blx	r3
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
   144d8:	4a42      	ldr	r2, [pc, #264]	; (145e4 <SX1276Send+0x19c>)
   144da:	231c      	movs	r3, #28
   144dc:	33ff      	adds	r3, #255	; 0xff
   144de:	2120      	movs	r1, #32
   144e0:	54d1      	strb	r1, [r2, r3]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
   144e2:	4a40      	ldr	r2, [pc, #256]	; (145e4 <SX1276Send+0x19c>)
   144e4:	231c      	movs	r3, #28
   144e6:	33ff      	adds	r3, #255	; 0xff
   144e8:	5cd2      	ldrb	r2, [r2, r3]
   144ea:	687b      	ldr	r3, [r7, #4]
   144ec:	0011      	movs	r1, r2
   144ee:	0018      	movs	r0, r3
   144f0:	4b3d      	ldr	r3, [pc, #244]	; (145e8 <SX1276Send+0x1a0>)
   144f2:	4798      	blx	r3
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   144f4:	4a3b      	ldr	r2, [pc, #236]	; (145e4 <SX1276Send+0x19c>)
   144f6:	238c      	movs	r3, #140	; 0x8c
   144f8:	005b      	lsls	r3, r3, #1
   144fa:	5ad2      	ldrh	r2, [r2, r3]
   144fc:	4939      	ldr	r1, [pc, #228]	; (145e4 <SX1276Send+0x19c>)
   144fe:	231c      	movs	r3, #28
   14500:	33ff      	adds	r3, #255	; 0xff
   14502:	5ccb      	ldrb	r3, [r1, r3]
   14504:	b29b      	uxth	r3, r3
   14506:	18d3      	adds	r3, r2, r3
   14508:	b299      	uxth	r1, r3
   1450a:	4a36      	ldr	r2, [pc, #216]	; (145e4 <SX1276Send+0x19c>)
   1450c:	238c      	movs	r3, #140	; 0x8c
   1450e:	005b      	lsls	r3, r3, #1
   14510:	52d1      	strh	r1, [r2, r3]
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   14512:	4a34      	ldr	r2, [pc, #208]	; (145e4 <SX1276Send+0x19c>)
   14514:	2382      	movs	r3, #130	; 0x82
   14516:	005b      	lsls	r3, r3, #1
   14518:	58d3      	ldr	r3, [r2, r3]
   1451a:	60fb      	str	r3, [r7, #12]
        }
        break;
   1451c:	e05a      	b.n	145d4 <SX1276Send+0x18c>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
   1451e:	4a31      	ldr	r2, [pc, #196]	; (145e4 <SX1276Send+0x19c>)
   14520:	2332      	movs	r3, #50	; 0x32
   14522:	33ff      	adds	r3, #255	; 0xff
   14524:	5cd3      	ldrb	r3, [r2, r3]
   14526:	2b00      	cmp	r3, #0
   14528:	d011      	beq.n	1454e <SX1276Send+0x106>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1452a:	2033      	movs	r0, #51	; 0x33
   1452c:	4b32      	ldr	r3, [pc, #200]	; (145f8 <SX1276Send+0x1b0>)
   1452e:	4798      	blx	r3
   14530:	0003      	movs	r3, r0
   14532:	001a      	movs	r2, r3
   14534:	2341      	movs	r3, #65	; 0x41
   14536:	439a      	bics	r2, r3
   14538:	0013      	movs	r3, r2
   1453a:	b2db      	uxtb	r3, r3
   1453c:	0019      	movs	r1, r3
   1453e:	2033      	movs	r0, #51	; 0x33
   14540:	4b2a      	ldr	r3, [pc, #168]	; (145ec <SX1276Send+0x1a4>)
   14542:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   14544:	2119      	movs	r1, #25
   14546:	203b      	movs	r0, #59	; 0x3b
   14548:	4b28      	ldr	r3, [pc, #160]	; (145ec <SX1276Send+0x1a4>)
   1454a:	4798      	blx	r3
   1454c:	e013      	b.n	14576 <SX1276Send+0x12e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1454e:	2033      	movs	r0, #51	; 0x33
   14550:	4b29      	ldr	r3, [pc, #164]	; (145f8 <SX1276Send+0x1b0>)
   14552:	4798      	blx	r3
   14554:	0003      	movs	r3, r0
   14556:	b25b      	sxtb	r3, r3
   14558:	2241      	movs	r2, #65	; 0x41
   1455a:	4393      	bics	r3, r2
   1455c:	b25b      	sxtb	r3, r3
   1455e:	2201      	movs	r2, #1
   14560:	4313      	orrs	r3, r2
   14562:	b25b      	sxtb	r3, r3
   14564:	b2db      	uxtb	r3, r3
   14566:	0019      	movs	r1, r3
   14568:	2033      	movs	r0, #51	; 0x33
   1456a:	4b20      	ldr	r3, [pc, #128]	; (145ec <SX1276Send+0x1a4>)
   1456c:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1456e:	211d      	movs	r1, #29
   14570:	203b      	movs	r0, #59	; 0x3b
   14572:	4b1e      	ldr	r3, [pc, #120]	; (145ec <SX1276Send+0x1a4>)
   14574:	4798      	blx	r3
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
   14576:	1cfb      	adds	r3, r7, #3
   14578:	7819      	ldrb	r1, [r3, #0]
   1457a:	4a1a      	ldr	r2, [pc, #104]	; (145e4 <SX1276Send+0x19c>)
   1457c:	23a0      	movs	r3, #160	; 0xa0
   1457e:	005b      	lsls	r3, r3, #1
   14580:	54d1      	strb	r1, [r2, r3]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   14582:	1cfb      	adds	r3, r7, #3
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	0019      	movs	r1, r3
   14588:	2022      	movs	r0, #34	; 0x22
   1458a:	4b18      	ldr	r3, [pc, #96]	; (145ec <SX1276Send+0x1a4>)
   1458c:	4798      	blx	r3

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   1458e:	2100      	movs	r1, #0
   14590:	200e      	movs	r0, #14
   14592:	4b16      	ldr	r3, [pc, #88]	; (145ec <SX1276Send+0x1a4>)
   14594:	4798      	blx	r3
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   14596:	2100      	movs	r1, #0
   14598:	200d      	movs	r0, #13
   1459a:	4b14      	ldr	r3, [pc, #80]	; (145ec <SX1276Send+0x1a4>)
   1459c:	4798      	blx	r3

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   1459e:	2001      	movs	r0, #1
   145a0:	4b15      	ldr	r3, [pc, #84]	; (145f8 <SX1276Send+0x1b0>)
   145a2:	4798      	blx	r3
   145a4:	0003      	movs	r3, r0
   145a6:	001a      	movs	r2, r3
   145a8:	23f8      	movs	r3, #248	; 0xf8
   145aa:	439a      	bics	r2, r3
   145ac:	1e13      	subs	r3, r2, #0
   145ae:	d104      	bne.n	145ba <SX1276Send+0x172>
            {
                SX1276SetStby( );
   145b0:	4b12      	ldr	r3, [pc, #72]	; (145fc <SX1276Send+0x1b4>)
   145b2:	4798      	blx	r3
                DelayMs( 1 );
   145b4:	2001      	movs	r0, #1
   145b6:	4b12      	ldr	r3, [pc, #72]	; (14600 <SX1276Send+0x1b8>)
   145b8:	4798      	blx	r3
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
   145ba:	1cfb      	adds	r3, r7, #3
   145bc:	781a      	ldrb	r2, [r3, #0]
   145be:	687b      	ldr	r3, [r7, #4]
   145c0:	0011      	movs	r1, r2
   145c2:	0018      	movs	r0, r3
   145c4:	4b08      	ldr	r3, [pc, #32]	; (145e8 <SX1276Send+0x1a0>)
   145c6:	4798      	blx	r3
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   145c8:	4a06      	ldr	r2, [pc, #24]	; (145e4 <SX1276Send+0x19c>)
   145ca:	239a      	movs	r3, #154	; 0x9a
   145cc:	005b      	lsls	r3, r3, #1
   145ce:	58d3      	ldr	r3, [r2, r3]
   145d0:	60fb      	str	r3, [r7, #12]
        }
        break;
   145d2:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
   145d4:	68fb      	ldr	r3, [r7, #12]
   145d6:	0018      	movs	r0, r3
   145d8:	4b0a      	ldr	r3, [pc, #40]	; (14604 <SX1276Send+0x1bc>)
   145da:	4798      	blx	r3
}
   145dc:	46c0      	nop			; (mov r8, r8)
   145de:	46bd      	mov	sp, r7
   145e0:	b004      	add	sp, #16
   145e2:	bd80      	pop	{r7, pc}
   145e4:	20001c5c 	.word	0x20001c5c
   145e8:	00014f91 	.word	0x00014f91
   145ec:	00014e09 	.word	0x00014e09
   145f0:	200018d4 	.word	0x200018d4
   145f4:	00002955 	.word	0x00002955
   145f8:	00014e35 	.word	0x00014e35
   145fc:	00014645 	.word	0x00014645
   14600:	00015c35 	.word	0x00015c35
   14604:	000149f1 	.word	0x000149f1

00014608 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
   14608:	b580      	push	{r7, lr}
   1460a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
   1460c:	4b08      	ldr	r3, [pc, #32]	; (14630 <SX1276SetSleep+0x28>)
   1460e:	0018      	movs	r0, r3
   14610:	4b08      	ldr	r3, [pc, #32]	; (14634 <SX1276SetSleep+0x2c>)
   14612:	4798      	blx	r3
    TimerStop( &TxTimeoutTimer );
   14614:	4b08      	ldr	r3, [pc, #32]	; (14638 <SX1276SetSleep+0x30>)
   14616:	0018      	movs	r0, r3
   14618:	4b06      	ldr	r3, [pc, #24]	; (14634 <SX1276SetSleep+0x2c>)
   1461a:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1461c:	2000      	movs	r0, #0
   1461e:	4b07      	ldr	r3, [pc, #28]	; (1463c <SX1276SetSleep+0x34>)
   14620:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
   14622:	4b07      	ldr	r3, [pc, #28]	; (14640 <SX1276SetSleep+0x38>)
   14624:	22e0      	movs	r2, #224	; 0xe0
   14626:	2100      	movs	r1, #0
   14628:	5499      	strb	r1, [r3, r2]
}
   1462a:	46c0      	nop			; (mov r8, r8)
   1462c:	46bd      	mov	sp, r7
   1462e:	bd80      	pop	{r7, pc}
   14630:	20001da0 	.word	0x20001da0
   14634:	0001624d 	.word	0x0001624d
   14638:	20001c2c 	.word	0x20001c2c
   1463c:	00014cd9 	.word	0x00014cd9
   14640:	20001c5c 	.word	0x20001c5c

00014644 <SX1276SetStby>:

void SX1276SetStby( void )
{
   14644:	b580      	push	{r7, lr}
   14646:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
   14648:	4b08      	ldr	r3, [pc, #32]	; (1466c <SX1276SetStby+0x28>)
   1464a:	0018      	movs	r0, r3
   1464c:	4b08      	ldr	r3, [pc, #32]	; (14670 <SX1276SetStby+0x2c>)
   1464e:	4798      	blx	r3
    TimerStop( &TxTimeoutTimer );
   14650:	4b08      	ldr	r3, [pc, #32]	; (14674 <SX1276SetStby+0x30>)
   14652:	0018      	movs	r0, r3
   14654:	4b06      	ldr	r3, [pc, #24]	; (14670 <SX1276SetStby+0x2c>)
   14656:	4798      	blx	r3

    SX1276SetOpMode( RF_OPMODE_STANDBY );
   14658:	2001      	movs	r0, #1
   1465a:	4b07      	ldr	r3, [pc, #28]	; (14678 <SX1276SetStby+0x34>)
   1465c:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
   1465e:	4b07      	ldr	r3, [pc, #28]	; (1467c <SX1276SetStby+0x38>)
   14660:	22e0      	movs	r2, #224	; 0xe0
   14662:	2100      	movs	r1, #0
   14664:	5499      	strb	r1, [r3, r2]
}
   14666:	46c0      	nop			; (mov r8, r8)
   14668:	46bd      	mov	sp, r7
   1466a:	bd80      	pop	{r7, pc}
   1466c:	20001da0 	.word	0x20001da0
   14670:	0001624d 	.word	0x0001624d
   14674:	20001c2c 	.word	0x20001c2c
   14678:	00014cd9 	.word	0x00014cd9
   1467c:	20001c5c 	.word	0x20001c5c

00014680 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
   14680:	b580      	push	{r7, lr}
   14682:	b084      	sub	sp, #16
   14684:	af00      	add	r7, sp, #0
   14686:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
   14688:	230f      	movs	r3, #15
   1468a:	18fb      	adds	r3, r7, r3
   1468c:	2200      	movs	r2, #0
   1468e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
   14690:	4bc5      	ldr	r3, [pc, #788]	; (149a8 <SX1276SetRx+0x328>)
   14692:	22e1      	movs	r2, #225	; 0xe1
   14694:	5c9b      	ldrb	r3, [r3, r2]
   14696:	2b00      	cmp	r3, #0
   14698:	d002      	beq.n	146a0 <SX1276SetRx+0x20>
   1469a:	2b01      	cmp	r3, #1
   1469c:	d049      	beq.n	14732 <SX1276SetRx+0xb2>
   1469e:	e13d      	b.n	1491c <SX1276SetRx+0x29c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   146a0:	230f      	movs	r3, #15
   146a2:	18fb      	adds	r3, r7, r3
   146a4:	49c0      	ldr	r1, [pc, #768]	; (149a8 <SX1276SetRx+0x328>)
   146a6:	2281      	movs	r2, #129	; 0x81
   146a8:	0052      	lsls	r2, r2, #1
   146aa:	5c8a      	ldrb	r2, [r1, r2]
   146ac:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   146ae:	2040      	movs	r0, #64	; 0x40
   146b0:	4bbe      	ldr	r3, [pc, #760]	; (149ac <SX1276SetRx+0x32c>)
   146b2:	4798      	blx	r3
   146b4:	0003      	movs	r3, r0
   146b6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
   146b8:	2203      	movs	r2, #3
   146ba:	4013      	ands	r3, r2
   146bc:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
   146be:	220c      	movs	r2, #12
   146c0:	4313      	orrs	r3, r2
   146c2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   146c4:	b2db      	uxtb	r3, r3
   146c6:	0019      	movs	r1, r3
   146c8:	2040      	movs	r0, #64	; 0x40
   146ca:	4bb9      	ldr	r3, [pc, #740]	; (149b0 <SX1276SetRx+0x330>)
   146cc:	4798      	blx	r3
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   146ce:	2041      	movs	r0, #65	; 0x41
   146d0:	4bb6      	ldr	r3, [pc, #728]	; (149ac <SX1276SetRx+0x32c>)
   146d2:	4798      	blx	r3
   146d4:	0003      	movs	r3, r0
   146d6:	001a      	movs	r2, r3
   146d8:	233f      	movs	r3, #63	; 0x3f
   146da:	425b      	negs	r3, r3
   146dc:	4313      	orrs	r3, r2
   146de:	b2db      	uxtb	r3, r3
   146e0:	0019      	movs	r1, r3
   146e2:	2041      	movs	r0, #65	; 0x41
   146e4:	4bb2      	ldr	r3, [pc, #712]	; (149b0 <SX1276SetRx+0x330>)
   146e6:	4798      	blx	r3
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   146e8:	2035      	movs	r0, #53	; 0x35
   146ea:	4bb0      	ldr	r3, [pc, #704]	; (149ac <SX1276SetRx+0x32c>)
   146ec:	4798      	blx	r3
   146ee:	0003      	movs	r3, r0
   146f0:	001a      	movs	r2, r3
   146f2:	233f      	movs	r3, #63	; 0x3f
   146f4:	4013      	ands	r3, r2
   146f6:	b2d9      	uxtb	r1, r3
   146f8:	4aab      	ldr	r2, [pc, #684]	; (149a8 <SX1276SetRx+0x328>)
   146fa:	238d      	movs	r3, #141	; 0x8d
   146fc:	005b      	lsls	r3, r3, #1
   146fe:	54d1      	strb	r1, [r2, r3]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   14700:	211e      	movs	r1, #30
   14702:	200d      	movs	r0, #13
   14704:	4baa      	ldr	r3, [pc, #680]	; (149b0 <SX1276SetRx+0x330>)
   14706:	4798      	blx	r3

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   14708:	4aa7      	ldr	r2, [pc, #668]	; (149a8 <SX1276SetRx+0x328>)
   1470a:	2386      	movs	r3, #134	; 0x86
   1470c:	005b      	lsls	r3, r3, #1
   1470e:	2100      	movs	r1, #0
   14710:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   14712:	4aa5      	ldr	r2, [pc, #660]	; (149a8 <SX1276SetRx+0x328>)
   14714:	230e      	movs	r3, #14
   14716:	33ff      	adds	r3, #255	; 0xff
   14718:	2100      	movs	r1, #0
   1471a:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1471c:	4aa2      	ldr	r2, [pc, #648]	; (149a8 <SX1276SetRx+0x328>)
   1471e:	238c      	movs	r3, #140	; 0x8c
   14720:	005b      	lsls	r3, r3, #1
   14722:	2100      	movs	r1, #0
   14724:	52d1      	strh	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.Size = 0;
   14726:	4aa0      	ldr	r2, [pc, #640]	; (149a8 <SX1276SetRx+0x328>)
   14728:	238b      	movs	r3, #139	; 0x8b
   1472a:	005b      	lsls	r3, r3, #1
   1472c:	2100      	movs	r1, #0
   1472e:	52d1      	strh	r1, [r2, r3]
        }
        break;
   14730:	e0f4      	b.n	1491c <SX1276SetRx+0x29c>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
   14732:	4a9d      	ldr	r2, [pc, #628]	; (149a8 <SX1276SetRx+0x328>)
   14734:	2332      	movs	r3, #50	; 0x32
   14736:	33ff      	adds	r3, #255	; 0xff
   14738:	5cd3      	ldrb	r3, [r2, r3]
   1473a:	2b00      	cmp	r3, #0
   1473c:	d010      	beq.n	14760 <SX1276SetRx+0xe0>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1473e:	2033      	movs	r0, #51	; 0x33
   14740:	4b9a      	ldr	r3, [pc, #616]	; (149ac <SX1276SetRx+0x32c>)
   14742:	4798      	blx	r3
   14744:	0003      	movs	r3, r0
   14746:	001a      	movs	r2, r3
   14748:	2341      	movs	r3, #65	; 0x41
   1474a:	4313      	orrs	r3, r2
   1474c:	b2db      	uxtb	r3, r3
   1474e:	0019      	movs	r1, r3
   14750:	2033      	movs	r0, #51	; 0x33
   14752:	4b97      	ldr	r3, [pc, #604]	; (149b0 <SX1276SetRx+0x330>)
   14754:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   14756:	2119      	movs	r1, #25
   14758:	203b      	movs	r0, #59	; 0x3b
   1475a:	4b95      	ldr	r3, [pc, #596]	; (149b0 <SX1276SetRx+0x330>)
   1475c:	4798      	blx	r3
   1475e:	e013      	b.n	14788 <SX1276SetRx+0x108>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   14760:	2033      	movs	r0, #51	; 0x33
   14762:	4b92      	ldr	r3, [pc, #584]	; (149ac <SX1276SetRx+0x32c>)
   14764:	4798      	blx	r3
   14766:	0003      	movs	r3, r0
   14768:	b25b      	sxtb	r3, r3
   1476a:	2241      	movs	r2, #65	; 0x41
   1476c:	4393      	bics	r3, r2
   1476e:	b25b      	sxtb	r3, r3
   14770:	2201      	movs	r2, #1
   14772:	4313      	orrs	r3, r2
   14774:	b25b      	sxtb	r3, r3
   14776:	b2db      	uxtb	r3, r3
   14778:	0019      	movs	r1, r3
   1477a:	2033      	movs	r0, #51	; 0x33
   1477c:	4b8c      	ldr	r3, [pc, #560]	; (149b0 <SX1276SetRx+0x330>)
   1477e:	4798      	blx	r3
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   14780:	211d      	movs	r1, #29
   14782:	203b      	movs	r0, #59	; 0x3b
   14784:	4b8a      	ldr	r3, [pc, #552]	; (149b0 <SX1276SetRx+0x330>)
   14786:	4798      	blx	r3
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   14788:	4a87      	ldr	r2, [pc, #540]	; (149a8 <SX1276SetRx+0x328>)
   1478a:	2390      	movs	r3, #144	; 0x90
   1478c:	005b      	lsls	r3, r3, #1
   1478e:	58d3      	ldr	r3, [r2, r3]
   14790:	2b08      	cmp	r3, #8
   14792:	d900      	bls.n	14796 <SX1276SetRx+0x116>
   14794:	e07e      	b.n	14894 <SX1276SetRx+0x214>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   14796:	2031      	movs	r0, #49	; 0x31
   14798:	4b84      	ldr	r3, [pc, #528]	; (149ac <SX1276SetRx+0x32c>)
   1479a:	4798      	blx	r3
   1479c:	0003      	movs	r3, r0
   1479e:	001a      	movs	r2, r3
   147a0:	237f      	movs	r3, #127	; 0x7f
   147a2:	4013      	ands	r3, r2
   147a4:	b2db      	uxtb	r3, r3
   147a6:	0019      	movs	r1, r3
   147a8:	2031      	movs	r0, #49	; 0x31
   147aa:	4b81      	ldr	r3, [pc, #516]	; (149b0 <SX1276SetRx+0x330>)
   147ac:	4798      	blx	r3
                SX1276Write( REG_LR_TEST30, 0x00 );
   147ae:	2100      	movs	r1, #0
   147b0:	2030      	movs	r0, #48	; 0x30
   147b2:	4b7f      	ldr	r3, [pc, #508]	; (149b0 <SX1276SetRx+0x330>)
   147b4:	4798      	blx	r3
                switch( SX1276.Settings.LoRa.Bandwidth )
   147b6:	4a7c      	ldr	r2, [pc, #496]	; (149a8 <SX1276SetRx+0x328>)
   147b8:	2390      	movs	r3, #144	; 0x90
   147ba:	005b      	lsls	r3, r3, #1
   147bc:	58d3      	ldr	r3, [r2, r3]
   147be:	2b08      	cmp	r3, #8
   147c0:	d875      	bhi.n	148ae <SX1276SetRx+0x22e>
   147c2:	009a      	lsls	r2, r3, #2
   147c4:	4b7b      	ldr	r3, [pc, #492]	; (149b4 <SX1276SetRx+0x334>)
   147c6:	18d3      	adds	r3, r2, r3
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
   147cc:	2148      	movs	r1, #72	; 0x48
   147ce:	202f      	movs	r0, #47	; 0x2f
   147d0:	4b77      	ldr	r3, [pc, #476]	; (149b0 <SX1276SetRx+0x330>)
   147d2:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   147d4:	4b74      	ldr	r3, [pc, #464]	; (149a8 <SX1276SetRx+0x328>)
   147d6:	22e4      	movs	r2, #228	; 0xe4
   147d8:	589b      	ldr	r3, [r3, r2]
   147da:	4a77      	ldr	r2, [pc, #476]	; (149b8 <SX1276SetRx+0x338>)
   147dc:	4694      	mov	ip, r2
   147de:	4463      	add	r3, ip
   147e0:	0018      	movs	r0, r3
   147e2:	4b76      	ldr	r3, [pc, #472]	; (149bc <SX1276SetRx+0x33c>)
   147e4:	4798      	blx	r3
                    break;
   147e6:	e062      	b.n	148ae <SX1276SetRx+0x22e>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   147e8:	2144      	movs	r1, #68	; 0x44
   147ea:	202f      	movs	r0, #47	; 0x2f
   147ec:	4b70      	ldr	r3, [pc, #448]	; (149b0 <SX1276SetRx+0x330>)
   147ee:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   147f0:	4b6d      	ldr	r3, [pc, #436]	; (149a8 <SX1276SetRx+0x328>)
   147f2:	22e4      	movs	r2, #228	; 0xe4
   147f4:	589b      	ldr	r3, [r3, r2]
   147f6:	4a72      	ldr	r2, [pc, #456]	; (149c0 <SX1276SetRx+0x340>)
   147f8:	4694      	mov	ip, r2
   147fa:	4463      	add	r3, ip
   147fc:	0018      	movs	r0, r3
   147fe:	4b6f      	ldr	r3, [pc, #444]	; (149bc <SX1276SetRx+0x33c>)
   14800:	4798      	blx	r3
                    break;
   14802:	e054      	b.n	148ae <SX1276SetRx+0x22e>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   14804:	2144      	movs	r1, #68	; 0x44
   14806:	202f      	movs	r0, #47	; 0x2f
   14808:	4b69      	ldr	r3, [pc, #420]	; (149b0 <SX1276SetRx+0x330>)
   1480a:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   1480c:	4b66      	ldr	r3, [pc, #408]	; (149a8 <SX1276SetRx+0x328>)
   1480e:	22e4      	movs	r2, #228	; 0xe4
   14810:	589b      	ldr	r3, [r3, r2]
   14812:	4a6c      	ldr	r2, [pc, #432]	; (149c4 <SX1276SetRx+0x344>)
   14814:	4694      	mov	ip, r2
   14816:	4463      	add	r3, ip
   14818:	0018      	movs	r0, r3
   1481a:	4b68      	ldr	r3, [pc, #416]	; (149bc <SX1276SetRx+0x33c>)
   1481c:	4798      	blx	r3
                    break;
   1481e:	e046      	b.n	148ae <SX1276SetRx+0x22e>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   14820:	2144      	movs	r1, #68	; 0x44
   14822:	202f      	movs	r0, #47	; 0x2f
   14824:	4b62      	ldr	r3, [pc, #392]	; (149b0 <SX1276SetRx+0x330>)
   14826:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   14828:	4b5f      	ldr	r3, [pc, #380]	; (149a8 <SX1276SetRx+0x328>)
   1482a:	22e4      	movs	r2, #228	; 0xe4
   1482c:	589b      	ldr	r3, [r3, r2]
   1482e:	4a66      	ldr	r2, [pc, #408]	; (149c8 <SX1276SetRx+0x348>)
   14830:	4694      	mov	ip, r2
   14832:	4463      	add	r3, ip
   14834:	0018      	movs	r0, r3
   14836:	4b61      	ldr	r3, [pc, #388]	; (149bc <SX1276SetRx+0x33c>)
   14838:	4798      	blx	r3
                    break;
   1483a:	e038      	b.n	148ae <SX1276SetRx+0x22e>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   1483c:	2144      	movs	r1, #68	; 0x44
   1483e:	202f      	movs	r0, #47	; 0x2f
   14840:	4b5b      	ldr	r3, [pc, #364]	; (149b0 <SX1276SetRx+0x330>)
   14842:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   14844:	4b58      	ldr	r3, [pc, #352]	; (149a8 <SX1276SetRx+0x328>)
   14846:	22e4      	movs	r2, #228	; 0xe4
   14848:	589b      	ldr	r3, [r3, r2]
   1484a:	4a60      	ldr	r2, [pc, #384]	; (149cc <SX1276SetRx+0x34c>)
   1484c:	4694      	mov	ip, r2
   1484e:	4463      	add	r3, ip
   14850:	0018      	movs	r0, r3
   14852:	4b5a      	ldr	r3, [pc, #360]	; (149bc <SX1276SetRx+0x33c>)
   14854:	4798      	blx	r3
                    break;
   14856:	e02a      	b.n	148ae <SX1276SetRx+0x22e>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
   14858:	2144      	movs	r1, #68	; 0x44
   1485a:	202f      	movs	r0, #47	; 0x2f
   1485c:	4b54      	ldr	r3, [pc, #336]	; (149b0 <SX1276SetRx+0x330>)
   1485e:	4798      	blx	r3
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   14860:	4b51      	ldr	r3, [pc, #324]	; (149a8 <SX1276SetRx+0x328>)
   14862:	22e4      	movs	r2, #228	; 0xe4
   14864:	589b      	ldr	r3, [r3, r2]
   14866:	4a5a      	ldr	r2, [pc, #360]	; (149d0 <SX1276SetRx+0x350>)
   14868:	4694      	mov	ip, r2
   1486a:	4463      	add	r3, ip
   1486c:	0018      	movs	r0, r3
   1486e:	4b53      	ldr	r3, [pc, #332]	; (149bc <SX1276SetRx+0x33c>)
   14870:	4798      	blx	r3
                    break;
   14872:	e01c      	b.n	148ae <SX1276SetRx+0x22e>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   14874:	2140      	movs	r1, #64	; 0x40
   14876:	202f      	movs	r0, #47	; 0x2f
   14878:	4b4d      	ldr	r3, [pc, #308]	; (149b0 <SX1276SetRx+0x330>)
   1487a:	4798      	blx	r3
                    break;
   1487c:	e017      	b.n	148ae <SX1276SetRx+0x22e>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   1487e:	2140      	movs	r1, #64	; 0x40
   14880:	202f      	movs	r0, #47	; 0x2f
   14882:	4b4b      	ldr	r3, [pc, #300]	; (149b0 <SX1276SetRx+0x330>)
   14884:	4798      	blx	r3
                    break;
   14886:	e012      	b.n	148ae <SX1276SetRx+0x22e>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
   14888:	2140      	movs	r1, #64	; 0x40
   1488a:	202f      	movs	r0, #47	; 0x2f
   1488c:	4b48      	ldr	r3, [pc, #288]	; (149b0 <SX1276SetRx+0x330>)
   1488e:	4798      	blx	r3
                    break;
   14890:	46c0      	nop			; (mov r8, r8)
   14892:	e00c      	b.n	148ae <SX1276SetRx+0x22e>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   14894:	2031      	movs	r0, #49	; 0x31
   14896:	4b45      	ldr	r3, [pc, #276]	; (149ac <SX1276SetRx+0x32c>)
   14898:	4798      	blx	r3
   1489a:	0003      	movs	r3, r0
   1489c:	001a      	movs	r2, r3
   1489e:	2380      	movs	r3, #128	; 0x80
   148a0:	425b      	negs	r3, r3
   148a2:	4313      	orrs	r3, r2
   148a4:	b2db      	uxtb	r3, r3
   148a6:	0019      	movs	r1, r3
   148a8:	2031      	movs	r0, #49	; 0x31
   148aa:	4b41      	ldr	r3, [pc, #260]	; (149b0 <SX1276SetRx+0x330>)
   148ac:	4798      	blx	r3
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   148ae:	230f      	movs	r3, #15
   148b0:	18fb      	adds	r3, r7, r3
   148b2:	493d      	ldr	r1, [pc, #244]	; (149a8 <SX1276SetRx+0x328>)
   148b4:	2299      	movs	r2, #153	; 0x99
   148b6:	0052      	lsls	r2, r2, #1
   148b8:	5c8a      	ldrb	r2, [r1, r2]
   148ba:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
   148bc:	4a3a      	ldr	r2, [pc, #232]	; (149a8 <SX1276SetRx+0x328>)
   148be:	2330      	movs	r3, #48	; 0x30
   148c0:	33ff      	adds	r3, #255	; 0xff
   148c2:	5cd3      	ldrb	r3, [r2, r3]
   148c4:	2b00      	cmp	r3, #0
   148c6:	d010      	beq.n	148ea <SX1276SetRx+0x26a>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   148c8:	211d      	movs	r1, #29
   148ca:	2011      	movs	r0, #17
   148cc:	4b38      	ldr	r3, [pc, #224]	; (149b0 <SX1276SetRx+0x330>)
   148ce:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   148d0:	2040      	movs	r0, #64	; 0x40
   148d2:	4b36      	ldr	r3, [pc, #216]	; (149ac <SX1276SetRx+0x32c>)
   148d4:	4798      	blx	r3
   148d6:	0003      	movs	r3, r0
   148d8:	001a      	movs	r2, r3
   148da:	2333      	movs	r3, #51	; 0x33
   148dc:	4013      	ands	r3, r2
   148de:	b2db      	uxtb	r3, r3
   148e0:	0019      	movs	r1, r3
   148e2:	2040      	movs	r0, #64	; 0x40
   148e4:	4b32      	ldr	r3, [pc, #200]	; (149b0 <SX1276SetRx+0x330>)
   148e6:	4798      	blx	r3
   148e8:	e00f      	b.n	1490a <SX1276SetRx+0x28a>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   148ea:	211f      	movs	r1, #31
   148ec:	2011      	movs	r0, #17
   148ee:	4b30      	ldr	r3, [pc, #192]	; (149b0 <SX1276SetRx+0x330>)
   148f0:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   148f2:	2040      	movs	r0, #64	; 0x40
   148f4:	4b2d      	ldr	r3, [pc, #180]	; (149ac <SX1276SetRx+0x32c>)
   148f6:	4798      	blx	r3
   148f8:	0003      	movs	r3, r0
   148fa:	001a      	movs	r2, r3
   148fc:	233f      	movs	r3, #63	; 0x3f
   148fe:	4013      	ands	r3, r2
   14900:	b2db      	uxtb	r3, r3
   14902:	0019      	movs	r1, r3
   14904:	2040      	movs	r0, #64	; 0x40
   14906:	4b2a      	ldr	r3, [pc, #168]	; (149b0 <SX1276SetRx+0x330>)
   14908:	4798      	blx	r3
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   1490a:	2100      	movs	r1, #0
   1490c:	200f      	movs	r0, #15
   1490e:	4b28      	ldr	r3, [pc, #160]	; (149b0 <SX1276SetRx+0x330>)
   14910:	4798      	blx	r3
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   14912:	2100      	movs	r1, #0
   14914:	200d      	movs	r0, #13
   14916:	4b26      	ldr	r3, [pc, #152]	; (149b0 <SX1276SetRx+0x330>)
   14918:	4798      	blx	r3
        }
        break;
   1491a:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
   1491c:	2380      	movs	r3, #128	; 0x80
   1491e:	005a      	lsls	r2, r3, #1
   14920:	4b2c      	ldr	r3, [pc, #176]	; (149d4 <SX1276SetRx+0x354>)
   14922:	2100      	movs	r1, #0
   14924:	0018      	movs	r0, r3
   14926:	4b2c      	ldr	r3, [pc, #176]	; (149d8 <SX1276SetRx+0x358>)
   14928:	4798      	blx	r3

    SX1276.Settings.State = RF_RX_RUNNING;
   1492a:	4b1f      	ldr	r3, [pc, #124]	; (149a8 <SX1276SetRx+0x328>)
   1492c:	22e0      	movs	r2, #224	; 0xe0
   1492e:	2101      	movs	r1, #1
   14930:	5499      	strb	r1, [r3, r2]
    if( timeout != 0 )
   14932:	687b      	ldr	r3, [r7, #4]
   14934:	2b00      	cmp	r3, #0
   14936:	d009      	beq.n	1494c <SX1276SetRx+0x2cc>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
   14938:	687a      	ldr	r2, [r7, #4]
   1493a:	4b28      	ldr	r3, [pc, #160]	; (149dc <SX1276SetRx+0x35c>)
   1493c:	0011      	movs	r1, r2
   1493e:	0018      	movs	r0, r3
   14940:	4b27      	ldr	r3, [pc, #156]	; (149e0 <SX1276SetRx+0x360>)
   14942:	4798      	blx	r3
        TimerStart( &RxTimeoutTimer );
   14944:	4b25      	ldr	r3, [pc, #148]	; (149dc <SX1276SetRx+0x35c>)
   14946:	0018      	movs	r0, r3
   14948:	4b26      	ldr	r3, [pc, #152]	; (149e4 <SX1276SetRx+0x364>)
   1494a:	4798      	blx	r3
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
   1494c:	4b16      	ldr	r3, [pc, #88]	; (149a8 <SX1276SetRx+0x328>)
   1494e:	22e1      	movs	r2, #225	; 0xe1
   14950:	5c9b      	ldrb	r3, [r3, r2]
   14952:	2b00      	cmp	r3, #0
   14954:	d118      	bne.n	14988 <SX1276SetRx+0x308>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   14956:	2005      	movs	r0, #5
   14958:	4b23      	ldr	r3, [pc, #140]	; (149e8 <SX1276SetRx+0x368>)
   1495a:	4798      	blx	r3

        if( rxContinuous == false )
   1495c:	230f      	movs	r3, #15
   1495e:	18fb      	adds	r3, r7, r3
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	2201      	movs	r2, #1
   14964:	4053      	eors	r3, r2
   14966:	b2db      	uxtb	r3, r3
   14968:	2b00      	cmp	r3, #0
   1496a:	d019      	beq.n	149a0 <SX1276SetRx+0x320>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   1496c:	4a0e      	ldr	r2, [pc, #56]	; (149a8 <SX1276SetRx+0x328>)
   1496e:	2384      	movs	r3, #132	; 0x84
   14970:	005b      	lsls	r3, r3, #1
   14972:	58d2      	ldr	r2, [r2, r3]
   14974:	4b1d      	ldr	r3, [pc, #116]	; (149ec <SX1276SetRx+0x36c>)
   14976:	0011      	movs	r1, r2
   14978:	0018      	movs	r0, r3
   1497a:	4b19      	ldr	r3, [pc, #100]	; (149e0 <SX1276SetRx+0x360>)
   1497c:	4798      	blx	r3
            TimerStart( &RxTimeoutSyncWord );
   1497e:	4b1b      	ldr	r3, [pc, #108]	; (149ec <SX1276SetRx+0x36c>)
   14980:	0018      	movs	r0, r3
   14982:	4b18      	ldr	r3, [pc, #96]	; (149e4 <SX1276SetRx+0x364>)
   14984:	4798      	blx	r3
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
   14986:	e00b      	b.n	149a0 <SX1276SetRx+0x320>
        if( rxContinuous == true )
   14988:	230f      	movs	r3, #15
   1498a:	18fb      	adds	r3, r7, r3
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	2b00      	cmp	r3, #0
   14990:	d003      	beq.n	1499a <SX1276SetRx+0x31a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   14992:	2005      	movs	r0, #5
   14994:	4b14      	ldr	r3, [pc, #80]	; (149e8 <SX1276SetRx+0x368>)
   14996:	4798      	blx	r3
}
   14998:	e002      	b.n	149a0 <SX1276SetRx+0x320>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   1499a:	2006      	movs	r0, #6
   1499c:	4b12      	ldr	r3, [pc, #72]	; (149e8 <SX1276SetRx+0x368>)
   1499e:	4798      	blx	r3
}
   149a0:	46c0      	nop			; (mov r8, r8)
   149a2:	46bd      	mov	sp, r7
   149a4:	b004      	add	sp, #16
   149a6:	bd80      	pop	{r7, pc}
   149a8:	20001c5c 	.word	0x20001c5c
   149ac:	00014e35 	.word	0x00014e35
   149b0:	00014e09 	.word	0x00014e09
   149b4:	0001f914 	.word	0x0001f914
   149b8:	00001e82 	.word	0x00001e82
   149bc:	00013479 	.word	0x00013479
   149c0:	000028b4 	.word	0x000028b4
   149c4:	00003d04 	.word	0x00003d04
   149c8:	0000515e 	.word	0x0000515e
   149cc:	00007a12 	.word	0x00007a12
   149d0:	0000a2c6 	.word	0x0000a2c6
   149d4:	200018d4 	.word	0x200018d4
   149d8:	0001a0e1 	.word	0x0001a0e1
   149dc:	20001da0 	.word	0x20001da0
   149e0:	00016389 	.word	0x00016389
   149e4:	00015fc1 	.word	0x00015fc1
   149e8:	00014cd9 	.word	0x00014cd9
   149ec:	20001c44 	.word	0x20001c44

000149f0 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
   149f0:	b580      	push	{r7, lr}
   149f2:	b082      	sub	sp, #8
   149f4:	af00      	add	r7, sp, #0
   149f6:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
   149f8:	687a      	ldr	r2, [r7, #4]
   149fa:	4b3a      	ldr	r3, [pc, #232]	; (14ae4 <SX1276SetTx+0xf4>)
   149fc:	0011      	movs	r1, r2
   149fe:	0018      	movs	r0, r3
   14a00:	4b39      	ldr	r3, [pc, #228]	; (14ae8 <SX1276SetTx+0xf8>)
   14a02:	4798      	blx	r3

    switch( SX1276.Settings.Modem )
   14a04:	4b39      	ldr	r3, [pc, #228]	; (14aec <SX1276SetTx+0xfc>)
   14a06:	22e1      	movs	r2, #225	; 0xe1
   14a08:	5c9b      	ldrb	r3, [r3, r2]
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d002      	beq.n	14a14 <SX1276SetTx+0x24>
   14a0e:	2b01      	cmp	r3, #1
   14a10:	d029      	beq.n	14a66 <SX1276SetTx+0x76>
   14a12:	e058      	b.n	14ac6 <SX1276SetTx+0xd6>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   14a14:	2040      	movs	r0, #64	; 0x40
   14a16:	4b36      	ldr	r3, [pc, #216]	; (14af0 <SX1276SetTx+0x100>)
   14a18:	4798      	blx	r3
   14a1a:	0003      	movs	r3, r0
   14a1c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
   14a1e:	2203      	movs	r2, #3
   14a20:	4013      	ands	r3, r2
   14a22:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
   14a24:	2210      	movs	r2, #16
   14a26:	4313      	orrs	r3, r2
   14a28:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   14a2a:	b2db      	uxtb	r3, r3
   14a2c:	0019      	movs	r1, r3
   14a2e:	2040      	movs	r0, #64	; 0x40
   14a30:	4b30      	ldr	r3, [pc, #192]	; (14af4 <SX1276SetTx+0x104>)
   14a32:	4798      	blx	r3
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   14a34:	2041      	movs	r0, #65	; 0x41
   14a36:	4b2e      	ldr	r3, [pc, #184]	; (14af0 <SX1276SetTx+0x100>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	001a      	movs	r2, r3
   14a3e:	233e      	movs	r3, #62	; 0x3e
   14a40:	4013      	ands	r3, r2
   14a42:	b2db      	uxtb	r3, r3
   14a44:	0019      	movs	r1, r3
   14a46:	2041      	movs	r0, #65	; 0x41
   14a48:	4b2a      	ldr	r3, [pc, #168]	; (14af4 <SX1276SetTx+0x104>)
   14a4a:	4798      	blx	r3
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   14a4c:	2035      	movs	r0, #53	; 0x35
   14a4e:	4b28      	ldr	r3, [pc, #160]	; (14af0 <SX1276SetTx+0x100>)
   14a50:	4798      	blx	r3
   14a52:	0003      	movs	r3, r0
   14a54:	001a      	movs	r2, r3
   14a56:	233f      	movs	r3, #63	; 0x3f
   14a58:	4013      	ands	r3, r2
   14a5a:	b2d9      	uxtb	r1, r3
   14a5c:	4a23      	ldr	r2, [pc, #140]	; (14aec <SX1276SetTx+0xfc>)
   14a5e:	238d      	movs	r3, #141	; 0x8d
   14a60:	005b      	lsls	r3, r3, #1
   14a62:	54d1      	strb	r1, [r2, r3]
        }
        break;
   14a64:	e02f      	b.n	14ac6 <SX1276SetTx+0xd6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14a66:	4a21      	ldr	r2, [pc, #132]	; (14aec <SX1276SetTx+0xfc>)
   14a68:	2330      	movs	r3, #48	; 0x30
   14a6a:	33ff      	adds	r3, #255	; 0xff
   14a6c:	5cd3      	ldrb	r3, [r2, r3]
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d014      	beq.n	14a9c <SX1276SetTx+0xac>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   14a72:	21f5      	movs	r1, #245	; 0xf5
   14a74:	2011      	movs	r0, #17
   14a76:	4b1f      	ldr	r3, [pc, #124]	; (14af4 <SX1276SetTx+0x104>)
   14a78:	4798      	blx	r3
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   14a7a:	2040      	movs	r0, #64	; 0x40
   14a7c:	4b1c      	ldr	r3, [pc, #112]	; (14af0 <SX1276SetTx+0x100>)
   14a7e:	4798      	blx	r3
   14a80:	0003      	movs	r3, r0
   14a82:	b25b      	sxtb	r3, r3
   14a84:	2233      	movs	r2, #51	; 0x33
   14a86:	4013      	ands	r3, r2
   14a88:	b25b      	sxtb	r3, r3
   14a8a:	2240      	movs	r2, #64	; 0x40
   14a8c:	4313      	orrs	r3, r2
   14a8e:	b25b      	sxtb	r3, r3
   14a90:	b2db      	uxtb	r3, r3
   14a92:	0019      	movs	r1, r3
   14a94:	2040      	movs	r0, #64	; 0x40
   14a96:	4b17      	ldr	r3, [pc, #92]	; (14af4 <SX1276SetTx+0x104>)
   14a98:	4798      	blx	r3

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
   14a9a:	e013      	b.n	14ac4 <SX1276SetTx+0xd4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   14a9c:	21f7      	movs	r1, #247	; 0xf7
   14a9e:	2011      	movs	r0, #17
   14aa0:	4b14      	ldr	r3, [pc, #80]	; (14af4 <SX1276SetTx+0x104>)
   14aa2:	4798      	blx	r3
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   14aa4:	2040      	movs	r0, #64	; 0x40
   14aa6:	4b12      	ldr	r3, [pc, #72]	; (14af0 <SX1276SetTx+0x100>)
   14aa8:	4798      	blx	r3
   14aaa:	0003      	movs	r3, r0
   14aac:	b25b      	sxtb	r3, r3
   14aae:	223f      	movs	r2, #63	; 0x3f
   14ab0:	4013      	ands	r3, r2
   14ab2:	b25b      	sxtb	r3, r3
   14ab4:	2240      	movs	r2, #64	; 0x40
   14ab6:	4313      	orrs	r3, r2
   14ab8:	b25b      	sxtb	r3, r3
   14aba:	b2db      	uxtb	r3, r3
   14abc:	0019      	movs	r1, r3
   14abe:	2040      	movs	r0, #64	; 0x40
   14ac0:	4b0c      	ldr	r3, [pc, #48]	; (14af4 <SX1276SetTx+0x104>)
   14ac2:	4798      	blx	r3
        break;
   14ac4:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
   14ac6:	4b09      	ldr	r3, [pc, #36]	; (14aec <SX1276SetTx+0xfc>)
   14ac8:	22e0      	movs	r2, #224	; 0xe0
   14aca:	2102      	movs	r1, #2
   14acc:	5499      	strb	r1, [r3, r2]
    TimerStart( &TxTimeoutTimer );
   14ace:	4b05      	ldr	r3, [pc, #20]	; (14ae4 <SX1276SetTx+0xf4>)
   14ad0:	0018      	movs	r0, r3
   14ad2:	4b09      	ldr	r3, [pc, #36]	; (14af8 <SX1276SetTx+0x108>)
   14ad4:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   14ad6:	2003      	movs	r0, #3
   14ad8:	4b08      	ldr	r3, [pc, #32]	; (14afc <SX1276SetTx+0x10c>)
   14ada:	4798      	blx	r3
}
   14adc:	46c0      	nop			; (mov r8, r8)
   14ade:	46bd      	mov	sp, r7
   14ae0:	b002      	add	sp, #8
   14ae2:	bd80      	pop	{r7, pc}
   14ae4:	20001c2c 	.word	0x20001c2c
   14ae8:	00016389 	.word	0x00016389
   14aec:	20001c5c 	.word	0x20001c5c
   14af0:	00014e35 	.word	0x00014e35
   14af4:	00014e09 	.word	0x00014e09
   14af8:	00015fc1 	.word	0x00015fc1
   14afc:	00014cd9 	.word	0x00014cd9

00014b00 <SX1276StartCad>:

void SX1276StartCad( void )
{
   14b00:	b580      	push	{r7, lr}
   14b02:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
   14b04:	4b12      	ldr	r3, [pc, #72]	; (14b50 <SX1276StartCad+0x50>)
   14b06:	22e1      	movs	r2, #225	; 0xe1
   14b08:	5c9b      	ldrb	r3, [r3, r2]
   14b0a:	2b00      	cmp	r3, #0
   14b0c:	d01b      	beq.n	14b46 <SX1276StartCad+0x46>
   14b0e:	2b01      	cmp	r3, #1
   14b10:	d000      	beq.n	14b14 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
   14b12:	e019      	b.n	14b48 <SX1276StartCad+0x48>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   14b14:	21fa      	movs	r1, #250	; 0xfa
   14b16:	2011      	movs	r0, #17
   14b18:	4b0e      	ldr	r3, [pc, #56]	; (14b54 <SX1276StartCad+0x54>)
   14b1a:	4798      	blx	r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
   14b1c:	2040      	movs	r0, #64	; 0x40
   14b1e:	4b0e      	ldr	r3, [pc, #56]	; (14b58 <SX1276StartCad+0x58>)
   14b20:	4798      	blx	r3
   14b22:	0003      	movs	r3, r0
   14b24:	001a      	movs	r2, r3
   14b26:	2303      	movs	r3, #3
   14b28:	439a      	bics	r2, r3
   14b2a:	0013      	movs	r3, r2
   14b2c:	b2db      	uxtb	r3, r3
   14b2e:	0019      	movs	r1, r3
   14b30:	2040      	movs	r0, #64	; 0x40
   14b32:	4b08      	ldr	r3, [pc, #32]	; (14b54 <SX1276StartCad+0x54>)
   14b34:	4798      	blx	r3
            SX1276.Settings.State = RF_CAD;
   14b36:	4b06      	ldr	r3, [pc, #24]	; (14b50 <SX1276StartCad+0x50>)
   14b38:	22e0      	movs	r2, #224	; 0xe0
   14b3a:	2103      	movs	r1, #3
   14b3c:	5499      	strb	r1, [r3, r2]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
   14b3e:	2007      	movs	r0, #7
   14b40:	4b06      	ldr	r3, [pc, #24]	; (14b5c <SX1276StartCad+0x5c>)
   14b42:	4798      	blx	r3
        break;
   14b44:	e000      	b.n	14b48 <SX1276StartCad+0x48>
        break;
   14b46:	46c0      	nop			; (mov r8, r8)
    }
}
   14b48:	46c0      	nop			; (mov r8, r8)
   14b4a:	46bd      	mov	sp, r7
   14b4c:	bd80      	pop	{r7, pc}
   14b4e:	46c0      	nop			; (mov r8, r8)
   14b50:	20001c5c 	.word	0x20001c5c
   14b54:	00014e09 	.word	0x00014e09
   14b58:	00014e35 	.word	0x00014e35
   14b5c:	00014cd9 	.word	0x00014cd9

00014b60 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
   14b60:	b590      	push	{r4, r7, lr}
   14b62:	b08f      	sub	sp, #60	; 0x3c
   14b64:	af0a      	add	r7, sp, #40	; 0x28
   14b66:	6078      	str	r0, [r7, #4]
   14b68:	0008      	movs	r0, r1
   14b6a:	0011      	movs	r1, r2
   14b6c:	1cfb      	adds	r3, r7, #3
   14b6e:	1c02      	adds	r2, r0, #0
   14b70:	701a      	strb	r2, [r3, #0]
   14b72:	003b      	movs	r3, r7
   14b74:	1c0a      	adds	r2, r1, #0
   14b76:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
   14b78:	003b      	movs	r3, r7
   14b7a:	881b      	ldrh	r3, [r3, #0]
   14b7c:	22fa      	movs	r2, #250	; 0xfa
   14b7e:	0092      	lsls	r2, r2, #2
   14b80:	4353      	muls	r3, r2
   14b82:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
   14b84:	687b      	ldr	r3, [r7, #4]
   14b86:	0018      	movs	r0, r3
   14b88:	4b23      	ldr	r3, [pc, #140]	; (14c18 <SX1276SetTxContinuousWave+0xb8>)
   14b8a:	4798      	blx	r3

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   14b8c:	1cfb      	adds	r3, r7, #3
   14b8e:	2100      	movs	r1, #0
   14b90:	5659      	ldrsb	r1, [r3, r1]
   14b92:	68fb      	ldr	r3, [r7, #12]
   14b94:	9308      	str	r3, [sp, #32]
   14b96:	2300      	movs	r3, #0
   14b98:	9307      	str	r3, [sp, #28]
   14b9a:	2300      	movs	r3, #0
   14b9c:	9306      	str	r3, [sp, #24]
   14b9e:	2300      	movs	r3, #0
   14ba0:	9305      	str	r3, [sp, #20]
   14ba2:	2300      	movs	r3, #0
   14ba4:	9304      	str	r3, [sp, #16]
   14ba6:	2300      	movs	r3, #0
   14ba8:	9303      	str	r3, [sp, #12]
   14baa:	2305      	movs	r3, #5
   14bac:	9302      	str	r3, [sp, #8]
   14bae:	2300      	movs	r3, #0
   14bb0:	9301      	str	r3, [sp, #4]
   14bb2:	2396      	movs	r3, #150	; 0x96
   14bb4:	015b      	lsls	r3, r3, #5
   14bb6:	9300      	str	r3, [sp, #0]
   14bb8:	2300      	movs	r3, #0
   14bba:	2200      	movs	r2, #0
   14bbc:	2000      	movs	r0, #0
   14bbe:	4c17      	ldr	r4, [pc, #92]	; (14c1c <SX1276SetTxContinuousWave+0xbc>)
   14bc0:	47a0      	blx	r4

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   14bc2:	2031      	movs	r0, #49	; 0x31
   14bc4:	4b16      	ldr	r3, [pc, #88]	; (14c20 <SX1276SetTxContinuousWave+0xc0>)
   14bc6:	4798      	blx	r3
   14bc8:	0003      	movs	r3, r0
   14bca:	001a      	movs	r2, r3
   14bcc:	2340      	movs	r3, #64	; 0x40
   14bce:	439a      	bics	r2, r3
   14bd0:	0013      	movs	r3, r2
   14bd2:	b2db      	uxtb	r3, r3
   14bd4:	0019      	movs	r1, r3
   14bd6:	2031      	movs	r0, #49	; 0x31
   14bd8:	4b12      	ldr	r3, [pc, #72]	; (14c24 <SX1276SetTxContinuousWave+0xc4>)
   14bda:	4798      	blx	r3
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   14bdc:	21f0      	movs	r1, #240	; 0xf0
   14bde:	2040      	movs	r0, #64	; 0x40
   14be0:	4b10      	ldr	r3, [pc, #64]	; (14c24 <SX1276SetTxContinuousWave+0xc4>)
   14be2:	4798      	blx	r3
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   14be4:	21a0      	movs	r1, #160	; 0xa0
   14be6:	2041      	movs	r0, #65	; 0x41
   14be8:	4b0e      	ldr	r3, [pc, #56]	; (14c24 <SX1276SetTxContinuousWave+0xc4>)
   14bea:	4798      	blx	r3

    TimerSetValue( &TxTimeoutTimer, timeout );
   14bec:	68fa      	ldr	r2, [r7, #12]
   14bee:	4b0e      	ldr	r3, [pc, #56]	; (14c28 <SX1276SetTxContinuousWave+0xc8>)
   14bf0:	0011      	movs	r1, r2
   14bf2:	0018      	movs	r0, r3
   14bf4:	4b0d      	ldr	r3, [pc, #52]	; (14c2c <SX1276SetTxContinuousWave+0xcc>)
   14bf6:	4798      	blx	r3

    SX1276.Settings.State = RF_TX_RUNNING;
   14bf8:	4b0d      	ldr	r3, [pc, #52]	; (14c30 <SX1276SetTxContinuousWave+0xd0>)
   14bfa:	22e0      	movs	r2, #224	; 0xe0
   14bfc:	2102      	movs	r1, #2
   14bfe:	5499      	strb	r1, [r3, r2]
    TimerStart( &TxTimeoutTimer );
   14c00:	4b09      	ldr	r3, [pc, #36]	; (14c28 <SX1276SetTxContinuousWave+0xc8>)
   14c02:	0018      	movs	r0, r3
   14c04:	4b0b      	ldr	r3, [pc, #44]	; (14c34 <SX1276SetTxContinuousWave+0xd4>)
   14c06:	4798      	blx	r3
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   14c08:	2003      	movs	r0, #3
   14c0a:	4b0b      	ldr	r3, [pc, #44]	; (14c38 <SX1276SetTxContinuousWave+0xd8>)
   14c0c:	4798      	blx	r3
}
   14c0e:	46c0      	nop			; (mov r8, r8)
   14c10:	46bd      	mov	sp, r7
   14c12:	b005      	add	sp, #20
   14c14:	bd90      	pop	{r4, r7, pc}
   14c16:	46c0      	nop			; (mov r8, r8)
   14c18:	00013479 	.word	0x00013479
   14c1c:	00013ccd 	.word	0x00013ccd
   14c20:	00014e35 	.word	0x00014e35
   14c24:	00014e09 	.word	0x00014e09
   14c28:	20001c2c 	.word	0x20001c2c
   14c2c:	00016389 	.word	0x00016389
   14c30:	20001c5c 	.word	0x20001c5c
   14c34:	00015fc1 	.word	0x00015fc1
   14c38:	00014cd9 	.word	0x00014cd9

00014c3c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b084      	sub	sp, #16
   14c40:	af00      	add	r7, sp, #0
   14c42:	0002      	movs	r2, r0
   14c44:	1dfb      	adds	r3, r7, #7
   14c46:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
   14c48:	230e      	movs	r3, #14
   14c4a:	18fb      	adds	r3, r7, r3
   14c4c:	2200      	movs	r2, #0
   14c4e:	801a      	strh	r2, [r3, #0]

    switch( modem )
   14c50:	1dfb      	adds	r3, r7, #7
   14c52:	781b      	ldrb	r3, [r3, #0]
   14c54:	2b00      	cmp	r3, #0
   14c56:	d002      	beq.n	14c5e <SX1276ReadRssi+0x22>
   14c58:	2b01      	cmp	r3, #1
   14c5a:	d00d      	beq.n	14c78 <SX1276ReadRssi+0x3c>
   14c5c:	e028      	b.n	14cb0 <SX1276ReadRssi+0x74>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   14c5e:	2011      	movs	r0, #17
   14c60:	4b1a      	ldr	r3, [pc, #104]	; (14ccc <SX1276ReadRssi+0x90>)
   14c62:	4798      	blx	r3
   14c64:	0003      	movs	r3, r0
   14c66:	085b      	lsrs	r3, r3, #1
   14c68:	b2db      	uxtb	r3, r3
   14c6a:	b29b      	uxth	r3, r3
   14c6c:	425b      	negs	r3, r3
   14c6e:	b29a      	uxth	r2, r3
   14c70:	230e      	movs	r3, #14
   14c72:	18fb      	adds	r3, r7, r3
   14c74:	801a      	strh	r2, [r3, #0]
        break;
   14c76:	e021      	b.n	14cbc <SX1276ReadRssi+0x80>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   14c78:	4b15      	ldr	r3, [pc, #84]	; (14cd0 <SX1276ReadRssi+0x94>)
   14c7a:	22e4      	movs	r2, #228	; 0xe4
   14c7c:	589b      	ldr	r3, [r3, r2]
   14c7e:	4a15      	ldr	r2, [pc, #84]	; (14cd4 <SX1276ReadRssi+0x98>)
   14c80:	4293      	cmp	r3, r2
   14c82:	d90a      	bls.n	14c9a <SX1276ReadRssi+0x5e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   14c84:	201b      	movs	r0, #27
   14c86:	4b11      	ldr	r3, [pc, #68]	; (14ccc <SX1276ReadRssi+0x90>)
   14c88:	4798      	blx	r3
   14c8a:	0003      	movs	r3, r0
   14c8c:	b29b      	uxth	r3, r3
   14c8e:	3b9d      	subs	r3, #157	; 0x9d
   14c90:	b29a      	uxth	r2, r3
   14c92:	230e      	movs	r3, #14
   14c94:	18fb      	adds	r3, r7, r3
   14c96:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
   14c98:	e010      	b.n	14cbc <SX1276ReadRssi+0x80>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   14c9a:	201b      	movs	r0, #27
   14c9c:	4b0b      	ldr	r3, [pc, #44]	; (14ccc <SX1276ReadRssi+0x90>)
   14c9e:	4798      	blx	r3
   14ca0:	0003      	movs	r3, r0
   14ca2:	b29b      	uxth	r3, r3
   14ca4:	3ba4      	subs	r3, #164	; 0xa4
   14ca6:	b29a      	uxth	r2, r3
   14ca8:	230e      	movs	r3, #14
   14caa:	18fb      	adds	r3, r7, r3
   14cac:	801a      	strh	r2, [r3, #0]
        break;
   14cae:	e005      	b.n	14cbc <SX1276ReadRssi+0x80>
    default:
        rssi = -1;
   14cb0:	230e      	movs	r3, #14
   14cb2:	18fb      	adds	r3, r7, r3
   14cb4:	2201      	movs	r2, #1
   14cb6:	4252      	negs	r2, r2
   14cb8:	801a      	strh	r2, [r3, #0]
        break;
   14cba:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
   14cbc:	230e      	movs	r3, #14
   14cbe:	18fb      	adds	r3, r7, r3
   14cc0:	2200      	movs	r2, #0
   14cc2:	5e9b      	ldrsh	r3, [r3, r2]
}
   14cc4:	0018      	movs	r0, r3
   14cc6:	46bd      	mov	sp, r7
   14cc8:	b004      	add	sp, #16
   14cca:	bd80      	pop	{r7, pc}
   14ccc:	00014e35 	.word	0x00014e35
   14cd0:	20001c5c 	.word	0x20001c5c
   14cd4:	1f4add40 	.word	0x1f4add40

00014cd8 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
   14cd8:	b580      	push	{r7, lr}
   14cda:	b082      	sub	sp, #8
   14cdc:	af00      	add	r7, sp, #0
   14cde:	0002      	movs	r2, r0
   14ce0:	1dfb      	adds	r3, r7, #7
   14ce2:	701a      	strb	r2, [r3, #0]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
   14ce4:	1dfb      	adds	r3, r7, #7
   14ce6:	781b      	ldrb	r3, [r3, #0]
   14ce8:	2b00      	cmp	r3, #0
   14cea:	d103      	bne.n	14cf4 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
   14cec:	2001      	movs	r0, #1
   14cee:	4b10      	ldr	r3, [pc, #64]	; (14d30 <SX1276SetOpMode+0x58>)
   14cf0:	4798      	blx	r3
   14cf2:	e007      	b.n	14d04 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
   14cf4:	2000      	movs	r0, #0
   14cf6:	4b0e      	ldr	r3, [pc, #56]	; (14d30 <SX1276SetOpMode+0x58>)
   14cf8:	4798      	blx	r3
        SX1276SetAntSw( opMode );
   14cfa:	1dfb      	adds	r3, r7, #7
   14cfc:	781b      	ldrb	r3, [r3, #0]
   14cfe:	0018      	movs	r0, r3
   14d00:	4b0c      	ldr	r3, [pc, #48]	; (14d34 <SX1276SetOpMode+0x5c>)
   14d02:	4798      	blx	r3
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   14d04:	2001      	movs	r0, #1
   14d06:	4b0c      	ldr	r3, [pc, #48]	; (14d38 <SX1276SetOpMode+0x60>)
   14d08:	4798      	blx	r3
   14d0a:	0003      	movs	r3, r0
   14d0c:	b25b      	sxtb	r3, r3
   14d0e:	2207      	movs	r2, #7
   14d10:	4393      	bics	r3, r2
   14d12:	b25a      	sxtb	r2, r3
   14d14:	1dfb      	adds	r3, r7, #7
   14d16:	781b      	ldrb	r3, [r3, #0]
   14d18:	b25b      	sxtb	r3, r3
   14d1a:	4313      	orrs	r3, r2
   14d1c:	b25b      	sxtb	r3, r3
   14d1e:	b2db      	uxtb	r3, r3
   14d20:	0019      	movs	r1, r3
   14d22:	2001      	movs	r0, #1
   14d24:	4b05      	ldr	r3, [pc, #20]	; (14d3c <SX1276SetOpMode+0x64>)
   14d26:	4798      	blx	r3
}
   14d28:	46c0      	nop			; (mov r8, r8)
   14d2a:	46bd      	mov	sp, r7
   14d2c:	b002      	add	sp, #8
   14d2e:	bd80      	pop	{r7, pc}
   14d30:	0000470d 	.word	0x0000470d
   14d34:	00004759 	.word	0x00004759
   14d38:	00014e35 	.word	0x00014e35
   14d3c:	00014e09 	.word	0x00014e09

00014d40 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
   14d40:	b580      	push	{r7, lr}
   14d42:	b082      	sub	sp, #8
   14d44:	af00      	add	r7, sp, #0
   14d46:	0002      	movs	r2, r0
   14d48:	1dfb      	adds	r3, r7, #7
   14d4a:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   14d4c:	2001      	movs	r0, #1
   14d4e:	4b2a      	ldr	r3, [pc, #168]	; (14df8 <SX1276SetModem+0xb8>)
   14d50:	4798      	blx	r3
   14d52:	0003      	movs	r3, r0
   14d54:	b25b      	sxtb	r3, r3
   14d56:	2b00      	cmp	r3, #0
   14d58:	da04      	bge.n	14d64 <SX1276SetModem+0x24>
    {
        SX1276.Settings.Modem = MODEM_LORA;
   14d5a:	4b28      	ldr	r3, [pc, #160]	; (14dfc <SX1276SetModem+0xbc>)
   14d5c:	22e1      	movs	r2, #225	; 0xe1
   14d5e:	2101      	movs	r1, #1
   14d60:	5499      	strb	r1, [r3, r2]
   14d62:	e003      	b.n	14d6c <SX1276SetModem+0x2c>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
   14d64:	4b25      	ldr	r3, [pc, #148]	; (14dfc <SX1276SetModem+0xbc>)
   14d66:	22e1      	movs	r2, #225	; 0xe1
   14d68:	2100      	movs	r1, #0
   14d6a:	5499      	strb	r1, [r3, r2]
    }

    if( SX1276.Settings.Modem == modem )
   14d6c:	4b23      	ldr	r3, [pc, #140]	; (14dfc <SX1276SetModem+0xbc>)
   14d6e:	22e1      	movs	r2, #225	; 0xe1
   14d70:	5c9b      	ldrb	r3, [r3, r2]
   14d72:	1dfa      	adds	r2, r7, #7
   14d74:	7812      	ldrb	r2, [r2, #0]
   14d76:	429a      	cmp	r2, r3
   14d78:	d039      	beq.n	14dee <SX1276SetModem+0xae>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
   14d7a:	4b20      	ldr	r3, [pc, #128]	; (14dfc <SX1276SetModem+0xbc>)
   14d7c:	1dfa      	adds	r2, r7, #7
   14d7e:	21e1      	movs	r1, #225	; 0xe1
   14d80:	7812      	ldrb	r2, [r2, #0]
   14d82:	545a      	strb	r2, [r3, r1]
    switch( SX1276.Settings.Modem )
   14d84:	4b1d      	ldr	r3, [pc, #116]	; (14dfc <SX1276SetModem+0xbc>)
   14d86:	22e1      	movs	r2, #225	; 0xe1
   14d88:	5c9b      	ldrb	r3, [r3, r2]
   14d8a:	2b01      	cmp	r3, #1
   14d8c:	d016      	beq.n	14dbc <SX1276SetModem+0x7c>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
   14d8e:	4b1c      	ldr	r3, [pc, #112]	; (14e00 <SX1276SetModem+0xc0>)
   14d90:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   14d92:	2001      	movs	r0, #1
   14d94:	4b18      	ldr	r3, [pc, #96]	; (14df8 <SX1276SetModem+0xb8>)
   14d96:	4798      	blx	r3
   14d98:	0003      	movs	r3, r0
   14d9a:	001a      	movs	r2, r3
   14d9c:	237f      	movs	r3, #127	; 0x7f
   14d9e:	4013      	ands	r3, r2
   14da0:	b2db      	uxtb	r3, r3
   14da2:	0019      	movs	r1, r3
   14da4:	2001      	movs	r0, #1
   14da6:	4b17      	ldr	r3, [pc, #92]	; (14e04 <SX1276SetModem+0xc4>)
   14da8:	4798      	blx	r3

        SX1276Write( REG_DIOMAPPING1, 0x00 );
   14daa:	2100      	movs	r1, #0
   14dac:	2040      	movs	r0, #64	; 0x40
   14dae:	4b15      	ldr	r3, [pc, #84]	; (14e04 <SX1276SetModem+0xc4>)
   14db0:	4798      	blx	r3
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   14db2:	2130      	movs	r1, #48	; 0x30
   14db4:	2041      	movs	r0, #65	; 0x41
   14db6:	4b13      	ldr	r3, [pc, #76]	; (14e04 <SX1276SetModem+0xc4>)
   14db8:	4798      	blx	r3
        break;
   14dba:	e019      	b.n	14df0 <SX1276SetModem+0xb0>
    case MODEM_LORA:
        SX1276SetSleep( );
   14dbc:	4b10      	ldr	r3, [pc, #64]	; (14e00 <SX1276SetModem+0xc0>)
   14dbe:	4798      	blx	r3
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   14dc0:	2001      	movs	r0, #1
   14dc2:	4b0d      	ldr	r3, [pc, #52]	; (14df8 <SX1276SetModem+0xb8>)
   14dc4:	4798      	blx	r3
   14dc6:	0003      	movs	r3, r0
   14dc8:	001a      	movs	r2, r3
   14dca:	2380      	movs	r3, #128	; 0x80
   14dcc:	425b      	negs	r3, r3
   14dce:	4313      	orrs	r3, r2
   14dd0:	b2db      	uxtb	r3, r3
   14dd2:	0019      	movs	r1, r3
   14dd4:	2001      	movs	r0, #1
   14dd6:	4b0b      	ldr	r3, [pc, #44]	; (14e04 <SX1276SetModem+0xc4>)
   14dd8:	4798      	blx	r3

        SX1276Write( REG_DIOMAPPING1, 0x00 );
   14dda:	2100      	movs	r1, #0
   14ddc:	2040      	movs	r0, #64	; 0x40
   14dde:	4b09      	ldr	r3, [pc, #36]	; (14e04 <SX1276SetModem+0xc4>)
   14de0:	4798      	blx	r3
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   14de2:	2100      	movs	r1, #0
   14de4:	2041      	movs	r0, #65	; 0x41
   14de6:	4b07      	ldr	r3, [pc, #28]	; (14e04 <SX1276SetModem+0xc4>)
   14de8:	4798      	blx	r3
        break;
   14dea:	46c0      	nop			; (mov r8, r8)
   14dec:	e000      	b.n	14df0 <SX1276SetModem+0xb0>
        return;
   14dee:	46c0      	nop			; (mov r8, r8)
    }
}
   14df0:	46bd      	mov	sp, r7
   14df2:	b002      	add	sp, #8
   14df4:	bd80      	pop	{r7, pc}
   14df6:	46c0      	nop			; (mov r8, r8)
   14df8:	00014e35 	.word	0x00014e35
   14dfc:	20001c5c 	.word	0x20001c5c
   14e00:	00014609 	.word	0x00014609
   14e04:	00014e09 	.word	0x00014e09

00014e08 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
   14e08:	b580      	push	{r7, lr}
   14e0a:	b082      	sub	sp, #8
   14e0c:	af00      	add	r7, sp, #0
   14e0e:	0002      	movs	r2, r0
   14e10:	1dbb      	adds	r3, r7, #6
   14e12:	801a      	strh	r2, [r3, #0]
   14e14:	1d7b      	adds	r3, r7, #5
   14e16:	1c0a      	adds	r2, r1, #0
   14e18:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
   14e1a:	1d79      	adds	r1, r7, #5
   14e1c:	1dbb      	adds	r3, r7, #6
   14e1e:	881b      	ldrh	r3, [r3, #0]
   14e20:	2201      	movs	r2, #1
   14e22:	0018      	movs	r0, r3
   14e24:	4b02      	ldr	r3, [pc, #8]	; (14e30 <SX1276Write+0x28>)
   14e26:	4798      	blx	r3
}
   14e28:	46c0      	nop			; (mov r8, r8)
   14e2a:	46bd      	mov	sp, r7
   14e2c:	b002      	add	sp, #8
   14e2e:	bd80      	pop	{r7, pc}
   14e30:	00014e65 	.word	0x00014e65

00014e34 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
   14e34:	b580      	push	{r7, lr}
   14e36:	b084      	sub	sp, #16
   14e38:	af00      	add	r7, sp, #0
   14e3a:	0002      	movs	r2, r0
   14e3c:	1dbb      	adds	r3, r7, #6
   14e3e:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
   14e40:	230f      	movs	r3, #15
   14e42:	18f9      	adds	r1, r7, r3
   14e44:	1dbb      	adds	r3, r7, #6
   14e46:	881b      	ldrh	r3, [r3, #0]
   14e48:	2201      	movs	r2, #1
   14e4a:	0018      	movs	r0, r3
   14e4c:	4b04      	ldr	r3, [pc, #16]	; (14e60 <SX1276Read+0x2c>)
   14e4e:	4798      	blx	r3
    return data;
   14e50:	230f      	movs	r3, #15
   14e52:	18fb      	adds	r3, r7, r3
   14e54:	781b      	ldrb	r3, [r3, #0]
}
   14e56:	0018      	movs	r0, r3
   14e58:	46bd      	mov	sp, r7
   14e5a:	b004      	add	sp, #16
   14e5c:	bd80      	pop	{r7, pc}
   14e5e:	46c0      	nop			; (mov r8, r8)
   14e60:	00014ef9 	.word	0x00014ef9

00014e64 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
   14e64:	b580      	push	{r7, lr}
   14e66:	b084      	sub	sp, #16
   14e68:	af00      	add	r7, sp, #0
   14e6a:	6039      	str	r1, [r7, #0]
   14e6c:	0011      	movs	r1, r2
   14e6e:	1dbb      	adds	r3, r7, #6
   14e70:	1c02      	adds	r2, r0, #0
   14e72:	801a      	strh	r2, [r3, #0]
   14e74:	1d7b      	adds	r3, r7, #5
   14e76:	1c0a      	adds	r2, r1, #0
   14e78:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
   14e7a:	4b1b      	ldr	r3, [pc, #108]	; (14ee8 <SX1276WriteBuffer+0x84>)
   14e7c:	2100      	movs	r1, #0
   14e7e:	0018      	movs	r0, r3
   14e80:	4b1a      	ldr	r3, [pc, #104]	; (14eec <SX1276WriteBuffer+0x88>)
   14e82:	4798      	blx	r3

    SpiInOut( &SX1276.Spi, addr | 0x80 );
   14e84:	1dbb      	adds	r3, r7, #6
   14e86:	881b      	ldrh	r3, [r3, #0]
   14e88:	2280      	movs	r2, #128	; 0x80
   14e8a:	4313      	orrs	r3, r2
   14e8c:	b29a      	uxth	r2, r3
   14e8e:	4b18      	ldr	r3, [pc, #96]	; (14ef0 <SX1276WriteBuffer+0x8c>)
   14e90:	0011      	movs	r1, r2
   14e92:	0018      	movs	r0, r3
   14e94:	4b17      	ldr	r3, [pc, #92]	; (14ef4 <SX1276WriteBuffer+0x90>)
   14e96:	4798      	blx	r3
    for( i = 0; i < size; i++ )
   14e98:	230f      	movs	r3, #15
   14e9a:	18fb      	adds	r3, r7, r3
   14e9c:	2200      	movs	r2, #0
   14e9e:	701a      	strb	r2, [r3, #0]
   14ea0:	e012      	b.n	14ec8 <SX1276WriteBuffer+0x64>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
   14ea2:	230f      	movs	r3, #15
   14ea4:	18fb      	adds	r3, r7, r3
   14ea6:	781b      	ldrb	r3, [r3, #0]
   14ea8:	683a      	ldr	r2, [r7, #0]
   14eaa:	18d3      	adds	r3, r2, r3
   14eac:	781b      	ldrb	r3, [r3, #0]
   14eae:	b29a      	uxth	r2, r3
   14eb0:	4b0f      	ldr	r3, [pc, #60]	; (14ef0 <SX1276WriteBuffer+0x8c>)
   14eb2:	0011      	movs	r1, r2
   14eb4:	0018      	movs	r0, r3
   14eb6:	4b0f      	ldr	r3, [pc, #60]	; (14ef4 <SX1276WriteBuffer+0x90>)
   14eb8:	4798      	blx	r3
    for( i = 0; i < size; i++ )
   14eba:	230f      	movs	r3, #15
   14ebc:	18fb      	adds	r3, r7, r3
   14ebe:	781a      	ldrb	r2, [r3, #0]
   14ec0:	230f      	movs	r3, #15
   14ec2:	18fb      	adds	r3, r7, r3
   14ec4:	3201      	adds	r2, #1
   14ec6:	701a      	strb	r2, [r3, #0]
   14ec8:	230f      	movs	r3, #15
   14eca:	18fa      	adds	r2, r7, r3
   14ecc:	1d7b      	adds	r3, r7, #5
   14ece:	7812      	ldrb	r2, [r2, #0]
   14ed0:	781b      	ldrb	r3, [r3, #0]
   14ed2:	429a      	cmp	r2, r3
   14ed4:	d3e5      	bcc.n	14ea2 <SX1276WriteBuffer+0x3e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
   14ed6:	4b04      	ldr	r3, [pc, #16]	; (14ee8 <SX1276WriteBuffer+0x84>)
   14ed8:	2101      	movs	r1, #1
   14eda:	0018      	movs	r0, r3
   14edc:	4b03      	ldr	r3, [pc, #12]	; (14eec <SX1276WriteBuffer+0x88>)
   14ede:	4798      	blx	r3
}
   14ee0:	46c0      	nop			; (mov r8, r8)
   14ee2:	46bd      	mov	sp, r7
   14ee4:	b004      	add	sp, #16
   14ee6:	bd80      	pop	{r7, pc}
   14ee8:	20001d28 	.word	0x20001d28
   14eec:	00015ca1 	.word	0x00015ca1
   14ef0:	20001ce8 	.word	0x20001ce8
   14ef4:	00003f19 	.word	0x00003f19

00014ef8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
   14ef8:	b590      	push	{r4, r7, lr}
   14efa:	b085      	sub	sp, #20
   14efc:	af00      	add	r7, sp, #0
   14efe:	6039      	str	r1, [r7, #0]
   14f00:	0011      	movs	r1, r2
   14f02:	1dbb      	adds	r3, r7, #6
   14f04:	1c02      	adds	r2, r0, #0
   14f06:	801a      	strh	r2, [r3, #0]
   14f08:	1d7b      	adds	r3, r7, #5
   14f0a:	1c0a      	adds	r2, r1, #0
   14f0c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
   14f0e:	4b1c      	ldr	r3, [pc, #112]	; (14f80 <SX1276ReadBuffer+0x88>)
   14f10:	2100      	movs	r1, #0
   14f12:	0018      	movs	r0, r3
   14f14:	4b1b      	ldr	r3, [pc, #108]	; (14f84 <SX1276ReadBuffer+0x8c>)
   14f16:	4798      	blx	r3

    SpiInOut( &SX1276.Spi, addr & 0x7F );
   14f18:	1dbb      	adds	r3, r7, #6
   14f1a:	881b      	ldrh	r3, [r3, #0]
   14f1c:	227f      	movs	r2, #127	; 0x7f
   14f1e:	4013      	ands	r3, r2
   14f20:	b29a      	uxth	r2, r3
   14f22:	4b19      	ldr	r3, [pc, #100]	; (14f88 <SX1276ReadBuffer+0x90>)
   14f24:	0011      	movs	r1, r2
   14f26:	0018      	movs	r0, r3
   14f28:	4b18      	ldr	r3, [pc, #96]	; (14f8c <SX1276ReadBuffer+0x94>)
   14f2a:	4798      	blx	r3

    for( i = 0; i < size; i++ )
   14f2c:	230f      	movs	r3, #15
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	2200      	movs	r2, #0
   14f32:	701a      	strb	r2, [r3, #0]
   14f34:	e013      	b.n	14f5e <SX1276ReadBuffer+0x66>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
   14f36:	230f      	movs	r3, #15
   14f38:	18fb      	adds	r3, r7, r3
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	683a      	ldr	r2, [r7, #0]
   14f3e:	18d4      	adds	r4, r2, r3
   14f40:	4b11      	ldr	r3, [pc, #68]	; (14f88 <SX1276ReadBuffer+0x90>)
   14f42:	2100      	movs	r1, #0
   14f44:	0018      	movs	r0, r3
   14f46:	4b11      	ldr	r3, [pc, #68]	; (14f8c <SX1276ReadBuffer+0x94>)
   14f48:	4798      	blx	r3
   14f4a:	0003      	movs	r3, r0
   14f4c:	b2db      	uxtb	r3, r3
   14f4e:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
   14f50:	230f      	movs	r3, #15
   14f52:	18fb      	adds	r3, r7, r3
   14f54:	781a      	ldrb	r2, [r3, #0]
   14f56:	230f      	movs	r3, #15
   14f58:	18fb      	adds	r3, r7, r3
   14f5a:	3201      	adds	r2, #1
   14f5c:	701a      	strb	r2, [r3, #0]
   14f5e:	230f      	movs	r3, #15
   14f60:	18fa      	adds	r2, r7, r3
   14f62:	1d7b      	adds	r3, r7, #5
   14f64:	7812      	ldrb	r2, [r2, #0]
   14f66:	781b      	ldrb	r3, [r3, #0]
   14f68:	429a      	cmp	r2, r3
   14f6a:	d3e4      	bcc.n	14f36 <SX1276ReadBuffer+0x3e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
   14f6c:	4b04      	ldr	r3, [pc, #16]	; (14f80 <SX1276ReadBuffer+0x88>)
   14f6e:	2101      	movs	r1, #1
   14f70:	0018      	movs	r0, r3
   14f72:	4b04      	ldr	r3, [pc, #16]	; (14f84 <SX1276ReadBuffer+0x8c>)
   14f74:	4798      	blx	r3
}
   14f76:	46c0      	nop			; (mov r8, r8)
   14f78:	46bd      	mov	sp, r7
   14f7a:	b005      	add	sp, #20
   14f7c:	bd90      	pop	{r4, r7, pc}
   14f7e:	46c0      	nop			; (mov r8, r8)
   14f80:	20001d28 	.word	0x20001d28
   14f84:	00015ca1 	.word	0x00015ca1
   14f88:	20001ce8 	.word	0x20001ce8
   14f8c:	00003f19 	.word	0x00003f19

00014f90 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
   14f90:	b580      	push	{r7, lr}
   14f92:	b082      	sub	sp, #8
   14f94:	af00      	add	r7, sp, #0
   14f96:	6078      	str	r0, [r7, #4]
   14f98:	000a      	movs	r2, r1
   14f9a:	1cfb      	adds	r3, r7, #3
   14f9c:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
   14f9e:	1cfb      	adds	r3, r7, #3
   14fa0:	781a      	ldrb	r2, [r3, #0]
   14fa2:	687b      	ldr	r3, [r7, #4]
   14fa4:	0019      	movs	r1, r3
   14fa6:	2000      	movs	r0, #0
   14fa8:	4b02      	ldr	r3, [pc, #8]	; (14fb4 <SX1276WriteFifo+0x24>)
   14faa:	4798      	blx	r3
}
   14fac:	46c0      	nop			; (mov r8, r8)
   14fae:	46bd      	mov	sp, r7
   14fb0:	b002      	add	sp, #8
   14fb2:	bd80      	pop	{r7, pc}
   14fb4:	00014e65 	.word	0x00014e65

00014fb8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	b082      	sub	sp, #8
   14fbc:	af00      	add	r7, sp, #0
   14fbe:	6078      	str	r0, [r7, #4]
   14fc0:	000a      	movs	r2, r1
   14fc2:	1cfb      	adds	r3, r7, #3
   14fc4:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
   14fc6:	1cfb      	adds	r3, r7, #3
   14fc8:	781a      	ldrb	r2, [r3, #0]
   14fca:	687b      	ldr	r3, [r7, #4]
   14fcc:	0019      	movs	r1, r3
   14fce:	2000      	movs	r0, #0
   14fd0:	4b02      	ldr	r3, [pc, #8]	; (14fdc <SX1276ReadFifo+0x24>)
   14fd2:	4798      	blx	r3
}
   14fd4:	46c0      	nop			; (mov r8, r8)
   14fd6:	46bd      	mov	sp, r7
   14fd8:	b002      	add	sp, #8
   14fda:	bd80      	pop	{r7, pc}
   14fdc:	00014ef9 	.word	0x00014ef9

00014fe0 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b082      	sub	sp, #8
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	0002      	movs	r2, r0
   14fe8:	1dfb      	adds	r3, r7, #7
   14fea:	701a      	strb	r2, [r3, #0]
   14fec:	1dbb      	adds	r3, r7, #6
   14fee:	1c0a      	adds	r2, r1, #0
   14ff0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
   14ff2:	1dfb      	adds	r3, r7, #7
   14ff4:	781b      	ldrb	r3, [r3, #0]
   14ff6:	0018      	movs	r0, r3
   14ff8:	4b11      	ldr	r3, [pc, #68]	; (15040 <SX1276SetMaxPayloadLength+0x60>)
   14ffa:	4798      	blx	r3

    switch( modem )
   14ffc:	1dfb      	adds	r3, r7, #7
   14ffe:	781b      	ldrb	r3, [r3, #0]
   15000:	2b00      	cmp	r3, #0
   15002:	d002      	beq.n	1500a <SX1276SetMaxPayloadLength+0x2a>
   15004:	2b01      	cmp	r3, #1
   15006:	d00f      	beq.n	15028 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
   15008:	e016      	b.n	15038 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
   1500a:	4b0e      	ldr	r3, [pc, #56]	; (15044 <SX1276SetMaxPayloadLength+0x64>)
   1500c:	22fe      	movs	r2, #254	; 0xfe
   1500e:	5c9b      	ldrb	r3, [r3, r2]
   15010:	2201      	movs	r2, #1
   15012:	4053      	eors	r3, r2
   15014:	b2db      	uxtb	r3, r3
   15016:	2b00      	cmp	r3, #0
   15018:	d00d      	beq.n	15036 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
   1501a:	1dbb      	adds	r3, r7, #6
   1501c:	781b      	ldrb	r3, [r3, #0]
   1501e:	0019      	movs	r1, r3
   15020:	2032      	movs	r0, #50	; 0x32
   15022:	4b09      	ldr	r3, [pc, #36]	; (15048 <SX1276SetMaxPayloadLength+0x68>)
   15024:	4798      	blx	r3
        break;
   15026:	e006      	b.n	15036 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   15028:	1dbb      	adds	r3, r7, #6
   1502a:	781b      	ldrb	r3, [r3, #0]
   1502c:	0019      	movs	r1, r3
   1502e:	2023      	movs	r0, #35	; 0x23
   15030:	4b05      	ldr	r3, [pc, #20]	; (15048 <SX1276SetMaxPayloadLength+0x68>)
   15032:	4798      	blx	r3
        break;
   15034:	e000      	b.n	15038 <SX1276SetMaxPayloadLength+0x58>
        break;
   15036:	46c0      	nop			; (mov r8, r8)
}
   15038:	46c0      	nop			; (mov r8, r8)
   1503a:	46bd      	mov	sp, r7
   1503c:	b002      	add	sp, #8
   1503e:	bd80      	pop	{r7, pc}
   15040:	00014d41 	.word	0x00014d41
   15044:	20001c5c 	.word	0x20001c5c
   15048:	00014e09 	.word	0x00014e09

0001504c <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
   1504c:	b580      	push	{r7, lr}
   1504e:	b082      	sub	sp, #8
   15050:	af00      	add	r7, sp, #0
   15052:	0002      	movs	r2, r0
   15054:	1dfb      	adds	r3, r7, #7
   15056:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
   15058:	2001      	movs	r0, #1
   1505a:	4b0c      	ldr	r3, [pc, #48]	; (1508c <SX1276SetPublicNetwork+0x40>)
   1505c:	4798      	blx	r3
    SX1276.Settings.LoRa.PublicNetwork = enable;
   1505e:	4a0c      	ldr	r2, [pc, #48]	; (15090 <SX1276SetPublicNetwork+0x44>)
   15060:	1df9      	adds	r1, r7, #7
   15062:	239c      	movs	r3, #156	; 0x9c
   15064:	005b      	lsls	r3, r3, #1
   15066:	7809      	ldrb	r1, [r1, #0]
   15068:	54d1      	strb	r1, [r2, r3]
    if( enable == true )
   1506a:	1dfb      	adds	r3, r7, #7
   1506c:	781b      	ldrb	r3, [r3, #0]
   1506e:	2b00      	cmp	r3, #0
   15070:	d004      	beq.n	1507c <SX1276SetPublicNetwork+0x30>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   15072:	2134      	movs	r1, #52	; 0x34
   15074:	2039      	movs	r0, #57	; 0x39
   15076:	4b07      	ldr	r3, [pc, #28]	; (15094 <SX1276SetPublicNetwork+0x48>)
   15078:	4798      	blx	r3
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
   1507a:	e003      	b.n	15084 <SX1276SetPublicNetwork+0x38>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   1507c:	2112      	movs	r1, #18
   1507e:	2039      	movs	r0, #57	; 0x39
   15080:	4b04      	ldr	r3, [pc, #16]	; (15094 <SX1276SetPublicNetwork+0x48>)
   15082:	4798      	blx	r3
}
   15084:	46c0      	nop			; (mov r8, r8)
   15086:	46bd      	mov	sp, r7
   15088:	b002      	add	sp, #8
   1508a:	bd80      	pop	{r7, pc}
   1508c:	00014d41 	.word	0x00014d41
   15090:	20001c5c 	.word	0x20001c5c
   15094:	00014e09 	.word	0x00014e09

00015098 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
   15098:	b580      	push	{r7, lr}
   1509a:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   1509c:	4b03      	ldr	r3, [pc, #12]	; (150ac <SX1276GetWakeupTime+0x14>)
   1509e:	4798      	blx	r3
   150a0:	0003      	movs	r3, r0
   150a2:	3301      	adds	r3, #1
}
   150a4:	0018      	movs	r0, r3
   150a6:	46bd      	mov	sp, r7
   150a8:	bd80      	pop	{r7, pc}
   150aa:	46c0      	nop			; (mov r8, r8)
   150ac:	000044ad 	.word	0x000044ad

000150b0 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
   150b0:	b580      	push	{r7, lr}
   150b2:	b084      	sub	sp, #16
   150b4:	af00      	add	r7, sp, #0
   150b6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
   150b8:	4b59      	ldr	r3, [pc, #356]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150ba:	22e0      	movs	r2, #224	; 0xe0
   150bc:	5c9b      	ldrb	r3, [r3, r2]
   150be:	2b01      	cmp	r3, #1
   150c0:	d002      	beq.n	150c8 <SX1276OnTimeoutIrq+0x18>
   150c2:	2b02      	cmp	r3, #2
   150c4:	d04e      	beq.n	15164 <SX1276OnTimeoutIrq+0xb4>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
   150c6:	e0a7      	b.n	15218 <SX1276OnTimeoutIrq+0x168>
        if( SX1276.Settings.Modem == MODEM_FSK )
   150c8:	4b55      	ldr	r3, [pc, #340]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150ca:	22e1      	movs	r2, #225	; 0xe1
   150cc:	5c9b      	ldrb	r3, [r3, r2]
   150ce:	2b00      	cmp	r3, #0
   150d0:	d13a      	bne.n	15148 <SX1276OnTimeoutIrq+0x98>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   150d2:	4a53      	ldr	r2, [pc, #332]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150d4:	2386      	movs	r3, #134	; 0x86
   150d6:	005b      	lsls	r3, r3, #1
   150d8:	2100      	movs	r1, #0
   150da:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   150dc:	4a50      	ldr	r2, [pc, #320]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150de:	230e      	movs	r3, #14
   150e0:	33ff      	adds	r3, #255	; 0xff
   150e2:	2100      	movs	r1, #0
   150e4:	54d1      	strb	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   150e6:	4a4e      	ldr	r2, [pc, #312]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150e8:	238c      	movs	r3, #140	; 0x8c
   150ea:	005b      	lsls	r3, r3, #1
   150ec:	2100      	movs	r1, #0
   150ee:	52d1      	strh	r1, [r2, r3]
            SX1276.Settings.FskPacketHandler.Size = 0;
   150f0:	4a4b      	ldr	r2, [pc, #300]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   150f2:	238b      	movs	r3, #139	; 0x8b
   150f4:	005b      	lsls	r3, r3, #1
   150f6:	2100      	movs	r1, #0
   150f8:	52d1      	strh	r1, [r2, r3]
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   150fa:	210b      	movs	r1, #11
   150fc:	203e      	movs	r0, #62	; 0x3e
   150fe:	4b49      	ldr	r3, [pc, #292]	; (15224 <SX1276OnTimeoutIrq+0x174>)
   15100:	4798      	blx	r3
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   15102:	2110      	movs	r1, #16
   15104:	203f      	movs	r0, #63	; 0x3f
   15106:	4b47      	ldr	r3, [pc, #284]	; (15224 <SX1276OnTimeoutIrq+0x174>)
   15108:	4798      	blx	r3
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1510a:	4a45      	ldr	r2, [pc, #276]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   1510c:	2381      	movs	r3, #129	; 0x81
   1510e:	005b      	lsls	r3, r3, #1
   15110:	5cd3      	ldrb	r3, [r2, r3]
   15112:	2b00      	cmp	r3, #0
   15114:	d010      	beq.n	15138 <SX1276OnTimeoutIrq+0x88>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   15116:	200d      	movs	r0, #13
   15118:	4b43      	ldr	r3, [pc, #268]	; (15228 <SX1276OnTimeoutIrq+0x178>)
   1511a:	4798      	blx	r3
   1511c:	0003      	movs	r3, r0
   1511e:	001a      	movs	r2, r3
   15120:	2340      	movs	r3, #64	; 0x40
   15122:	4313      	orrs	r3, r2
   15124:	b2db      	uxtb	r3, r3
   15126:	0019      	movs	r1, r3
   15128:	200d      	movs	r0, #13
   1512a:	4b3e      	ldr	r3, [pc, #248]	; (15224 <SX1276OnTimeoutIrq+0x174>)
   1512c:	4798      	blx	r3
                TimerStart( &RxTimeoutSyncWord );
   1512e:	4b3f      	ldr	r3, [pc, #252]	; (1522c <SX1276OnTimeoutIrq+0x17c>)
   15130:	0018      	movs	r0, r3
   15132:	4b3f      	ldr	r3, [pc, #252]	; (15230 <SX1276OnTimeoutIrq+0x180>)
   15134:	4798      	blx	r3
   15136:	e007      	b.n	15148 <SX1276OnTimeoutIrq+0x98>
                SX1276.Settings.State = RF_IDLE;
   15138:	4b39      	ldr	r3, [pc, #228]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   1513a:	22e0      	movs	r2, #224	; 0xe0
   1513c:	2100      	movs	r1, #0
   1513e:	5499      	strb	r1, [r3, r2]
                TimerStop( &RxTimeoutSyncWord );
   15140:	4b3a      	ldr	r3, [pc, #232]	; (1522c <SX1276OnTimeoutIrq+0x17c>)
   15142:	0018      	movs	r0, r3
   15144:	4b3b      	ldr	r3, [pc, #236]	; (15234 <SX1276OnTimeoutIrq+0x184>)
   15146:	4798      	blx	r3
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   15148:	4b3b      	ldr	r3, [pc, #236]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   1514a:	681b      	ldr	r3, [r3, #0]
   1514c:	2b00      	cmp	r3, #0
   1514e:	d060      	beq.n	15212 <SX1276OnTimeoutIrq+0x162>
   15150:	4b39      	ldr	r3, [pc, #228]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   15152:	681b      	ldr	r3, [r3, #0]
   15154:	68db      	ldr	r3, [r3, #12]
   15156:	2b00      	cmp	r3, #0
   15158:	d05b      	beq.n	15212 <SX1276OnTimeoutIrq+0x162>
            RadioEvents->RxTimeout( );
   1515a:	4b37      	ldr	r3, [pc, #220]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   1515c:	681b      	ldr	r3, [r3, #0]
   1515e:	68db      	ldr	r3, [r3, #12]
   15160:	4798      	blx	r3
        break;
   15162:	e056      	b.n	15212 <SX1276OnTimeoutIrq+0x162>
        SX1276Reset( );
   15164:	4b35      	ldr	r3, [pc, #212]	; (1523c <SX1276OnTimeoutIrq+0x18c>)
   15166:	4798      	blx	r3
        RxChainCalibration( );
   15168:	4b35      	ldr	r3, [pc, #212]	; (15240 <SX1276OnTimeoutIrq+0x190>)
   1516a:	4798      	blx	r3
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1516c:	2000      	movs	r0, #0
   1516e:	4b35      	ldr	r3, [pc, #212]	; (15244 <SX1276OnTimeoutIrq+0x194>)
   15170:	4798      	blx	r3
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   15172:	230f      	movs	r3, #15
   15174:	18fb      	adds	r3, r7, r3
   15176:	2200      	movs	r2, #0
   15178:	701a      	strb	r2, [r3, #0]
   1517a:	e029      	b.n	151d0 <SX1276OnTimeoutIrq+0x120>
            SX1276SetModem( RadioRegsInit[i].Modem );
   1517c:	230f      	movs	r3, #15
   1517e:	18fb      	adds	r3, r7, r3
   15180:	781a      	ldrb	r2, [r3, #0]
   15182:	4931      	ldr	r1, [pc, #196]	; (15248 <SX1276OnTimeoutIrq+0x198>)
   15184:	0013      	movs	r3, r2
   15186:	005b      	lsls	r3, r3, #1
   15188:	189b      	adds	r3, r3, r2
   1518a:	5c5b      	ldrb	r3, [r3, r1]
   1518c:	0018      	movs	r0, r3
   1518e:	4b2f      	ldr	r3, [pc, #188]	; (1524c <SX1276OnTimeoutIrq+0x19c>)
   15190:	4798      	blx	r3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   15192:	230f      	movs	r3, #15
   15194:	18fb      	adds	r3, r7, r3
   15196:	781a      	ldrb	r2, [r3, #0]
   15198:	492b      	ldr	r1, [pc, #172]	; (15248 <SX1276OnTimeoutIrq+0x198>)
   1519a:	0013      	movs	r3, r2
   1519c:	005b      	lsls	r3, r3, #1
   1519e:	189b      	adds	r3, r3, r2
   151a0:	18cb      	adds	r3, r1, r3
   151a2:	3301      	adds	r3, #1
   151a4:	781b      	ldrb	r3, [r3, #0]
   151a6:	b298      	uxth	r0, r3
   151a8:	230f      	movs	r3, #15
   151aa:	18fb      	adds	r3, r7, r3
   151ac:	781a      	ldrb	r2, [r3, #0]
   151ae:	4926      	ldr	r1, [pc, #152]	; (15248 <SX1276OnTimeoutIrq+0x198>)
   151b0:	0013      	movs	r3, r2
   151b2:	005b      	lsls	r3, r3, #1
   151b4:	189b      	adds	r3, r3, r2
   151b6:	18cb      	adds	r3, r1, r3
   151b8:	3302      	adds	r3, #2
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	0019      	movs	r1, r3
   151be:	4b19      	ldr	r3, [pc, #100]	; (15224 <SX1276OnTimeoutIrq+0x174>)
   151c0:	4798      	blx	r3
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   151c2:	230f      	movs	r3, #15
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	781a      	ldrb	r2, [r3, #0]
   151c8:	230f      	movs	r3, #15
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	3201      	adds	r2, #1
   151ce:	701a      	strb	r2, [r3, #0]
   151d0:	230f      	movs	r3, #15
   151d2:	18fb      	adds	r3, r7, r3
   151d4:	781b      	ldrb	r3, [r3, #0]
   151d6:	2b0f      	cmp	r3, #15
   151d8:	d9d0      	bls.n	1517c <SX1276OnTimeoutIrq+0xcc>
        SX1276SetModem( MODEM_FSK );
   151da:	2000      	movs	r0, #0
   151dc:	4b1b      	ldr	r3, [pc, #108]	; (1524c <SX1276OnTimeoutIrq+0x19c>)
   151de:	4798      	blx	r3
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   151e0:	4a0f      	ldr	r2, [pc, #60]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   151e2:	239c      	movs	r3, #156	; 0x9c
   151e4:	005b      	lsls	r3, r3, #1
   151e6:	5cd3      	ldrb	r3, [r2, r3]
   151e8:	0018      	movs	r0, r3
   151ea:	4b19      	ldr	r3, [pc, #100]	; (15250 <SX1276OnTimeoutIrq+0x1a0>)
   151ec:	4798      	blx	r3
        SX1276.Settings.State = RF_IDLE;
   151ee:	4b0c      	ldr	r3, [pc, #48]	; (15220 <SX1276OnTimeoutIrq+0x170>)
   151f0:	22e0      	movs	r2, #224	; 0xe0
   151f2:	2100      	movs	r1, #0
   151f4:	5499      	strb	r1, [r3, r2]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   151f6:	4b10      	ldr	r3, [pc, #64]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   151f8:	681b      	ldr	r3, [r3, #0]
   151fa:	2b00      	cmp	r3, #0
   151fc:	d00b      	beq.n	15216 <SX1276OnTimeoutIrq+0x166>
   151fe:	4b0e      	ldr	r3, [pc, #56]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   15200:	681b      	ldr	r3, [r3, #0]
   15202:	685b      	ldr	r3, [r3, #4]
   15204:	2b00      	cmp	r3, #0
   15206:	d006      	beq.n	15216 <SX1276OnTimeoutIrq+0x166>
            RadioEvents->TxTimeout( );
   15208:	4b0b      	ldr	r3, [pc, #44]	; (15238 <SX1276OnTimeoutIrq+0x188>)
   1520a:	681b      	ldr	r3, [r3, #0]
   1520c:	685b      	ldr	r3, [r3, #4]
   1520e:	4798      	blx	r3
        break;
   15210:	e001      	b.n	15216 <SX1276OnTimeoutIrq+0x166>
        break;
   15212:	46c0      	nop			; (mov r8, r8)
   15214:	e000      	b.n	15218 <SX1276OnTimeoutIrq+0x168>
        break;
   15216:	46c0      	nop			; (mov r8, r8)
    }
}
   15218:	46c0      	nop			; (mov r8, r8)
   1521a:	46bd      	mov	sp, r7
   1521c:	b004      	add	sp, #16
   1521e:	bd80      	pop	{r7, pc}
   15220:	20001c5c 	.word	0x20001c5c
   15224:	00014e09 	.word	0x00014e09
   15228:	00014e35 	.word	0x00014e35
   1522c:	20001c44 	.word	0x20001c44
   15230:	00015fc1 	.word	0x00015fc1
   15234:	0001624d 	.word	0x0001624d
   15238:	200018d0 	.word	0x200018d0
   1523c:	000044b9 	.word	0x000044b9
   15240:	00013645 	.word	0x00013645
   15244:	00014cd9 	.word	0x00014cd9
   15248:	0001f834 	.word	0x0001f834
   1524c:	00014d41 	.word	0x00014d41
   15250:	0001504d 	.word	0x0001504d

00015254 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
   15254:	b5b0      	push	{r4, r5, r7, lr}
   15256:	b084      	sub	sp, #16
   15258:	af00      	add	r7, sp, #0
   1525a:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
   1525c:	230d      	movs	r3, #13
   1525e:	18fb      	adds	r3, r7, r3
   15260:	2200      	movs	r2, #0
   15262:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
   15264:	4bd0      	ldr	r3, [pc, #832]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15266:	22e0      	movs	r2, #224	; 0xe0
   15268:	5c9b      	ldrb	r3, [r3, r2]
   1526a:	2b01      	cmp	r3, #1
   1526c:	d003      	beq.n	15276 <SX1276OnDio0Irq+0x22>
   1526e:	2b02      	cmp	r3, #2
   15270:	d100      	bne.n	15274 <SX1276OnDio0Irq+0x20>
   15272:	e245      	b.n	15700 <SX1276OnDio0Irq+0x4ac>
                }
                break;
            }
            break;
        default:
            break;
   15274:	e264      	b.n	15740 <SX1276OnDio0Irq+0x4ec>
            switch( SX1276.Settings.Modem )
   15276:	4bcc      	ldr	r3, [pc, #816]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15278:	22e1      	movs	r2, #225	; 0xe1
   1527a:	5c9b      	ldrb	r3, [r3, r2]
   1527c:	2b00      	cmp	r3, #0
   1527e:	d003      	beq.n	15288 <SX1276OnDio0Irq+0x34>
   15280:	2b01      	cmp	r3, #1
   15282:	d100      	bne.n	15286 <SX1276OnDio0Irq+0x32>
   15284:	e11a      	b.n	154bc <SX1276OnDio0Irq+0x268>
                break;
   15286:	e23a      	b.n	156fe <SX1276OnDio0Irq+0x4aa>
                if( SX1276.Settings.Fsk.CrcOn == true )
   15288:	4ac7      	ldr	r2, [pc, #796]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1528a:	2380      	movs	r3, #128	; 0x80
   1528c:	005b      	lsls	r3, r3, #1
   1528e:	5cd3      	ldrb	r3, [r2, r3]
   15290:	2b00      	cmp	r3, #0
   15292:	d060      	beq.n	15356 <SX1276OnDio0Irq+0x102>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   15294:	203f      	movs	r0, #63	; 0x3f
   15296:	4bc5      	ldr	r3, [pc, #788]	; (155ac <SX1276OnDio0Irq+0x358>)
   15298:	4798      	blx	r3
   1529a:	0003      	movs	r3, r0
   1529c:	001a      	movs	r2, r3
   1529e:	230d      	movs	r3, #13
   152a0:	18fb      	adds	r3, r7, r3
   152a2:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   152a4:	230d      	movs	r3, #13
   152a6:	18fb      	adds	r3, r7, r3
   152a8:	781b      	ldrb	r3, [r3, #0]
   152aa:	b2db      	uxtb	r3, r3
   152ac:	001a      	movs	r2, r3
   152ae:	2302      	movs	r3, #2
   152b0:	4013      	ands	r3, r2
   152b2:	2b02      	cmp	r3, #2
   152b4:	d04f      	beq.n	15356 <SX1276OnDio0Irq+0x102>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   152b6:	210b      	movs	r1, #11
   152b8:	203e      	movs	r0, #62	; 0x3e
   152ba:	4bbd      	ldr	r3, [pc, #756]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   152bc:	4798      	blx	r3
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   152be:	2110      	movs	r1, #16
   152c0:	203f      	movs	r0, #63	; 0x3f
   152c2:	4bbb      	ldr	r3, [pc, #748]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   152c4:	4798      	blx	r3
                        TimerStop( &RxTimeoutTimer );
   152c6:	4bbb      	ldr	r3, [pc, #748]	; (155b4 <SX1276OnDio0Irq+0x360>)
   152c8:	0018      	movs	r0, r3
   152ca:	4bbb      	ldr	r3, [pc, #748]	; (155b8 <SX1276OnDio0Irq+0x364>)
   152cc:	4798      	blx	r3
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   152ce:	4ab6      	ldr	r2, [pc, #728]	; (155a8 <SX1276OnDio0Irq+0x354>)
   152d0:	2381      	movs	r3, #129	; 0x81
   152d2:	005b      	lsls	r3, r3, #1
   152d4:	5cd3      	ldrb	r3, [r2, r3]
   152d6:	2201      	movs	r2, #1
   152d8:	4053      	eors	r3, r2
   152da:	b2db      	uxtb	r3, r3
   152dc:	2b00      	cmp	r3, #0
   152de:	d008      	beq.n	152f2 <SX1276OnDio0Irq+0x9e>
                            TimerStop( &RxTimeoutSyncWord );
   152e0:	4bb6      	ldr	r3, [pc, #728]	; (155bc <SX1276OnDio0Irq+0x368>)
   152e2:	0018      	movs	r0, r3
   152e4:	4bb4      	ldr	r3, [pc, #720]	; (155b8 <SX1276OnDio0Irq+0x364>)
   152e6:	4798      	blx	r3
                            SX1276.Settings.State = RF_IDLE;
   152e8:	4baf      	ldr	r3, [pc, #700]	; (155a8 <SX1276OnDio0Irq+0x354>)
   152ea:	22e0      	movs	r2, #224	; 0xe0
   152ec:	2100      	movs	r1, #0
   152ee:	5499      	strb	r1, [r3, r2]
   152f0:	e00f      	b.n	15312 <SX1276OnDio0Irq+0xbe>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   152f2:	200d      	movs	r0, #13
   152f4:	4bad      	ldr	r3, [pc, #692]	; (155ac <SX1276OnDio0Irq+0x358>)
   152f6:	4798      	blx	r3
   152f8:	0003      	movs	r3, r0
   152fa:	001a      	movs	r2, r3
   152fc:	2340      	movs	r3, #64	; 0x40
   152fe:	4313      	orrs	r3, r2
   15300:	b2db      	uxtb	r3, r3
   15302:	0019      	movs	r1, r3
   15304:	200d      	movs	r0, #13
   15306:	4baa      	ldr	r3, [pc, #680]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   15308:	4798      	blx	r3
                            TimerStart( &RxTimeoutSyncWord );
   1530a:	4bac      	ldr	r3, [pc, #688]	; (155bc <SX1276OnDio0Irq+0x368>)
   1530c:	0018      	movs	r0, r3
   1530e:	4bac      	ldr	r3, [pc, #688]	; (155c0 <SX1276OnDio0Irq+0x36c>)
   15310:	4798      	blx	r3
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   15312:	4bac      	ldr	r3, [pc, #688]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15314:	681b      	ldr	r3, [r3, #0]
   15316:	2b00      	cmp	r3, #0
   15318:	d008      	beq.n	1532c <SX1276OnDio0Irq+0xd8>
   1531a:	4baa      	ldr	r3, [pc, #680]	; (155c4 <SX1276OnDio0Irq+0x370>)
   1531c:	681b      	ldr	r3, [r3, #0]
   1531e:	691b      	ldr	r3, [r3, #16]
   15320:	2b00      	cmp	r3, #0
   15322:	d003      	beq.n	1532c <SX1276OnDio0Irq+0xd8>
                            RadioEvents->RxError( );
   15324:	4ba7      	ldr	r3, [pc, #668]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15326:	681b      	ldr	r3, [r3, #0]
   15328:	691b      	ldr	r3, [r3, #16]
   1532a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1532c:	4a9e      	ldr	r2, [pc, #632]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1532e:	2386      	movs	r3, #134	; 0x86
   15330:	005b      	lsls	r3, r3, #1
   15332:	2100      	movs	r1, #0
   15334:	54d1      	strb	r1, [r2, r3]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   15336:	4a9c      	ldr	r2, [pc, #624]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15338:	230e      	movs	r3, #14
   1533a:	33ff      	adds	r3, #255	; 0xff
   1533c:	2100      	movs	r1, #0
   1533e:	54d1      	strb	r1, [r2, r3]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   15340:	4a99      	ldr	r2, [pc, #612]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15342:	238c      	movs	r3, #140	; 0x8c
   15344:	005b      	lsls	r3, r3, #1
   15346:	2100      	movs	r1, #0
   15348:	52d1      	strh	r1, [r2, r3]
                        SX1276.Settings.FskPacketHandler.Size = 0;
   1534a:	4a97      	ldr	r2, [pc, #604]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1534c:	238b      	movs	r3, #139	; 0x8b
   1534e:	005b      	lsls	r3, r3, #1
   15350:	2100      	movs	r1, #0
   15352:	52d1      	strh	r1, [r2, r3]
                        break;
   15354:	e1d3      	b.n	156fe <SX1276OnDio0Irq+0x4aa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   15356:	4a94      	ldr	r2, [pc, #592]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15358:	238b      	movs	r3, #139	; 0x8b
   1535a:	005b      	lsls	r3, r3, #1
   1535c:	5ad3      	ldrh	r3, [r2, r3]
   1535e:	2b00      	cmp	r3, #0
   15360:	d13b      	bne.n	153da <SX1276OnDio0Irq+0x186>
   15362:	4a91      	ldr	r2, [pc, #580]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15364:	238c      	movs	r3, #140	; 0x8c
   15366:	005b      	lsls	r3, r3, #1
   15368:	5ad3      	ldrh	r3, [r2, r3]
   1536a:	2b00      	cmp	r3, #0
   1536c:	d135      	bne.n	153da <SX1276OnDio0Irq+0x186>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1536e:	4b8e      	ldr	r3, [pc, #568]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15370:	22fe      	movs	r2, #254	; 0xfe
   15372:	5c9b      	ldrb	r3, [r3, r2]
   15374:	2201      	movs	r2, #1
   15376:	4053      	eors	r3, r2
   15378:	b2db      	uxtb	r3, r3
   1537a:	2b00      	cmp	r3, #0
   1537c:	d005      	beq.n	1538a <SX1276OnDio0Irq+0x136>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1537e:	4b92      	ldr	r3, [pc, #584]	; (155c8 <SX1276OnDio0Irq+0x374>)
   15380:	2101      	movs	r1, #1
   15382:	0018      	movs	r0, r3
   15384:	4b91      	ldr	r3, [pc, #580]	; (155cc <SX1276OnDio0Irq+0x378>)
   15386:	4798      	blx	r3
   15388:	e008      	b.n	1539c <SX1276OnDio0Irq+0x148>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1538a:	2032      	movs	r0, #50	; 0x32
   1538c:	4b87      	ldr	r3, [pc, #540]	; (155ac <SX1276OnDio0Irq+0x358>)
   1538e:	4798      	blx	r3
   15390:	0003      	movs	r3, r0
   15392:	b299      	uxth	r1, r3
   15394:	4a84      	ldr	r2, [pc, #528]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15396:	238b      	movs	r3, #139	; 0x8b
   15398:	005b      	lsls	r3, r3, #1
   1539a:	52d1      	strh	r1, [r2, r3]
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1539c:	4a82      	ldr	r2, [pc, #520]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1539e:	238c      	movs	r3, #140	; 0x8c
   153a0:	005b      	lsls	r3, r3, #1
   153a2:	5ad3      	ldrh	r3, [r2, r3]
   153a4:	001a      	movs	r2, r3
   153a6:	4b8a      	ldr	r3, [pc, #552]	; (155d0 <SX1276OnDio0Irq+0x37c>)
   153a8:	18d0      	adds	r0, r2, r3
   153aa:	4a7f      	ldr	r2, [pc, #508]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153ac:	238b      	movs	r3, #139	; 0x8b
   153ae:	005b      	lsls	r3, r3, #1
   153b0:	5ad3      	ldrh	r3, [r2, r3]
   153b2:	b2da      	uxtb	r2, r3
   153b4:	497c      	ldr	r1, [pc, #496]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153b6:	238c      	movs	r3, #140	; 0x8c
   153b8:	005b      	lsls	r3, r3, #1
   153ba:	5acb      	ldrh	r3, [r1, r3]
   153bc:	b2db      	uxtb	r3, r3
   153be:	1ad3      	subs	r3, r2, r3
   153c0:	b2db      	uxtb	r3, r3
   153c2:	0019      	movs	r1, r3
   153c4:	4b81      	ldr	r3, [pc, #516]	; (155cc <SX1276OnDio0Irq+0x378>)
   153c6:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   153c8:	4a77      	ldr	r2, [pc, #476]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153ca:	238b      	movs	r3, #139	; 0x8b
   153cc:	005b      	lsls	r3, r3, #1
   153ce:	5ad1      	ldrh	r1, [r2, r3]
   153d0:	4a75      	ldr	r2, [pc, #468]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153d2:	238c      	movs	r3, #140	; 0x8c
   153d4:	005b      	lsls	r3, r3, #1
   153d6:	52d1      	strh	r1, [r2, r3]
   153d8:	e01d      	b.n	15416 <SX1276OnDio0Irq+0x1c2>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   153da:	4a73      	ldr	r2, [pc, #460]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153dc:	238c      	movs	r3, #140	; 0x8c
   153de:	005b      	lsls	r3, r3, #1
   153e0:	5ad3      	ldrh	r3, [r2, r3]
   153e2:	001a      	movs	r2, r3
   153e4:	4b7a      	ldr	r3, [pc, #488]	; (155d0 <SX1276OnDio0Irq+0x37c>)
   153e6:	18d0      	adds	r0, r2, r3
   153e8:	4a6f      	ldr	r2, [pc, #444]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153ea:	238b      	movs	r3, #139	; 0x8b
   153ec:	005b      	lsls	r3, r3, #1
   153ee:	5ad3      	ldrh	r3, [r2, r3]
   153f0:	b2da      	uxtb	r2, r3
   153f2:	496d      	ldr	r1, [pc, #436]	; (155a8 <SX1276OnDio0Irq+0x354>)
   153f4:	238c      	movs	r3, #140	; 0x8c
   153f6:	005b      	lsls	r3, r3, #1
   153f8:	5acb      	ldrh	r3, [r1, r3]
   153fa:	b2db      	uxtb	r3, r3
   153fc:	1ad3      	subs	r3, r2, r3
   153fe:	b2db      	uxtb	r3, r3
   15400:	0019      	movs	r1, r3
   15402:	4b72      	ldr	r3, [pc, #456]	; (155cc <SX1276OnDio0Irq+0x378>)
   15404:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   15406:	4a68      	ldr	r2, [pc, #416]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15408:	238b      	movs	r3, #139	; 0x8b
   1540a:	005b      	lsls	r3, r3, #1
   1540c:	5ad1      	ldrh	r1, [r2, r3]
   1540e:	4a66      	ldr	r2, [pc, #408]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15410:	238c      	movs	r3, #140	; 0x8c
   15412:	005b      	lsls	r3, r3, #1
   15414:	52d1      	strh	r1, [r2, r3]
                TimerStop( &RxTimeoutTimer );
   15416:	4b67      	ldr	r3, [pc, #412]	; (155b4 <SX1276OnDio0Irq+0x360>)
   15418:	0018      	movs	r0, r3
   1541a:	4b67      	ldr	r3, [pc, #412]	; (155b8 <SX1276OnDio0Irq+0x364>)
   1541c:	4798      	blx	r3
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1541e:	4a62      	ldr	r2, [pc, #392]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15420:	2381      	movs	r3, #129	; 0x81
   15422:	005b      	lsls	r3, r3, #1
   15424:	5cd3      	ldrb	r3, [r2, r3]
   15426:	2201      	movs	r2, #1
   15428:	4053      	eors	r3, r2
   1542a:	b2db      	uxtb	r3, r3
   1542c:	2b00      	cmp	r3, #0
   1542e:	d008      	beq.n	15442 <SX1276OnDio0Irq+0x1ee>
                    SX1276.Settings.State = RF_IDLE;
   15430:	4b5d      	ldr	r3, [pc, #372]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15432:	22e0      	movs	r2, #224	; 0xe0
   15434:	2100      	movs	r1, #0
   15436:	5499      	strb	r1, [r3, r2]
                    TimerStop( &RxTimeoutSyncWord );
   15438:	4b60      	ldr	r3, [pc, #384]	; (155bc <SX1276OnDio0Irq+0x368>)
   1543a:	0018      	movs	r0, r3
   1543c:	4b5e      	ldr	r3, [pc, #376]	; (155b8 <SX1276OnDio0Irq+0x364>)
   1543e:	4798      	blx	r3
   15440:	e00f      	b.n	15462 <SX1276OnDio0Irq+0x20e>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   15442:	200d      	movs	r0, #13
   15444:	4b59      	ldr	r3, [pc, #356]	; (155ac <SX1276OnDio0Irq+0x358>)
   15446:	4798      	blx	r3
   15448:	0003      	movs	r3, r0
   1544a:	001a      	movs	r2, r3
   1544c:	2340      	movs	r3, #64	; 0x40
   1544e:	4313      	orrs	r3, r2
   15450:	b2db      	uxtb	r3, r3
   15452:	0019      	movs	r1, r3
   15454:	200d      	movs	r0, #13
   15456:	4b56      	ldr	r3, [pc, #344]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   15458:	4798      	blx	r3
                    TimerStart( &RxTimeoutSyncWord );
   1545a:	4b58      	ldr	r3, [pc, #352]	; (155bc <SX1276OnDio0Irq+0x368>)
   1545c:	0018      	movs	r0, r3
   1545e:	4b58      	ldr	r3, [pc, #352]	; (155c0 <SX1276OnDio0Irq+0x36c>)
   15460:	4798      	blx	r3
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   15462:	4b58      	ldr	r3, [pc, #352]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15464:	681b      	ldr	r3, [r3, #0]
   15466:	2b00      	cmp	r3, #0
   15468:	d013      	beq.n	15492 <SX1276OnDio0Irq+0x23e>
   1546a:	4b56      	ldr	r3, [pc, #344]	; (155c4 <SX1276OnDio0Irq+0x370>)
   1546c:	681b      	ldr	r3, [r3, #0]
   1546e:	689b      	ldr	r3, [r3, #8]
   15470:	2b00      	cmp	r3, #0
   15472:	d00e      	beq.n	15492 <SX1276OnDio0Irq+0x23e>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   15474:	4b53      	ldr	r3, [pc, #332]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15476:	681b      	ldr	r3, [r3, #0]
   15478:	689c      	ldr	r4, [r3, #8]
   1547a:	4a4b      	ldr	r2, [pc, #300]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1547c:	238b      	movs	r3, #139	; 0x8b
   1547e:	005b      	lsls	r3, r3, #1
   15480:	5ad1      	ldrh	r1, [r2, r3]
   15482:	4a49      	ldr	r2, [pc, #292]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15484:	2387      	movs	r3, #135	; 0x87
   15486:	005b      	lsls	r3, r3, #1
   15488:	56d3      	ldrsb	r3, [r2, r3]
   1548a:	b21a      	sxth	r2, r3
   1548c:	4850      	ldr	r0, [pc, #320]	; (155d0 <SX1276OnDio0Irq+0x37c>)
   1548e:	2300      	movs	r3, #0
   15490:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   15492:	4a45      	ldr	r2, [pc, #276]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15494:	2386      	movs	r3, #134	; 0x86
   15496:	005b      	lsls	r3, r3, #1
   15498:	2100      	movs	r1, #0
   1549a:	54d1      	strb	r1, [r2, r3]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
   1549c:	4a42      	ldr	r2, [pc, #264]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1549e:	230e      	movs	r3, #14
   154a0:	33ff      	adds	r3, #255	; 0xff
   154a2:	2100      	movs	r1, #0
   154a4:	54d1      	strb	r1, [r2, r3]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
   154a6:	4a40      	ldr	r2, [pc, #256]	; (155a8 <SX1276OnDio0Irq+0x354>)
   154a8:	238c      	movs	r3, #140	; 0x8c
   154aa:	005b      	lsls	r3, r3, #1
   154ac:	2100      	movs	r1, #0
   154ae:	52d1      	strh	r1, [r2, r3]
                SX1276.Settings.FskPacketHandler.Size = 0;
   154b0:	4a3d      	ldr	r2, [pc, #244]	; (155a8 <SX1276OnDio0Irq+0x354>)
   154b2:	238b      	movs	r3, #139	; 0x8b
   154b4:	005b      	lsls	r3, r3, #1
   154b6:	2100      	movs	r1, #0
   154b8:	52d1      	strh	r1, [r2, r3]
                break;
   154ba:	e120      	b.n	156fe <SX1276OnDio0Irq+0x4aa>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   154bc:	2140      	movs	r1, #64	; 0x40
   154be:	2012      	movs	r0, #18
   154c0:	4b3b      	ldr	r3, [pc, #236]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   154c2:	4798      	blx	r3
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   154c4:	2012      	movs	r0, #18
   154c6:	4b39      	ldr	r3, [pc, #228]	; (155ac <SX1276OnDio0Irq+0x358>)
   154c8:	4798      	blx	r3
   154ca:	0003      	movs	r3, r0
   154cc:	001a      	movs	r2, r3
   154ce:	230d      	movs	r3, #13
   154d0:	18fb      	adds	r3, r7, r3
   154d2:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   154d4:	230d      	movs	r3, #13
   154d6:	18fb      	adds	r3, r7, r3
   154d8:	781b      	ldrb	r3, [r3, #0]
   154da:	b2db      	uxtb	r3, r3
   154dc:	001a      	movs	r2, r3
   154de:	2320      	movs	r3, #32
   154e0:	4013      	ands	r3, r2
   154e2:	2b20      	cmp	r3, #32
   154e4:	d124      	bne.n	15530 <SX1276OnDio0Irq+0x2dc>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   154e6:	2120      	movs	r1, #32
   154e8:	2012      	movs	r0, #18
   154ea:	4b31      	ldr	r3, [pc, #196]	; (155b0 <SX1276OnDio0Irq+0x35c>)
   154ec:	4798      	blx	r3
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   154ee:	4a2e      	ldr	r2, [pc, #184]	; (155a8 <SX1276OnDio0Irq+0x354>)
   154f0:	2399      	movs	r3, #153	; 0x99
   154f2:	005b      	lsls	r3, r3, #1
   154f4:	5cd3      	ldrb	r3, [r2, r3]
   154f6:	2201      	movs	r2, #1
   154f8:	4053      	eors	r3, r2
   154fa:	b2db      	uxtb	r3, r3
   154fc:	2b00      	cmp	r3, #0
   154fe:	d003      	beq.n	15508 <SX1276OnDio0Irq+0x2b4>
                            SX1276.Settings.State = RF_IDLE;
   15500:	4b29      	ldr	r3, [pc, #164]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15502:	22e0      	movs	r2, #224	; 0xe0
   15504:	2100      	movs	r1, #0
   15506:	5499      	strb	r1, [r3, r2]
                        TimerStop( &RxTimeoutTimer );
   15508:	4b2a      	ldr	r3, [pc, #168]	; (155b4 <SX1276OnDio0Irq+0x360>)
   1550a:	0018      	movs	r0, r3
   1550c:	4b2a      	ldr	r3, [pc, #168]	; (155b8 <SX1276OnDio0Irq+0x364>)
   1550e:	4798      	blx	r3
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   15510:	4b2c      	ldr	r3, [pc, #176]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15512:	681b      	ldr	r3, [r3, #0]
   15514:	2b00      	cmp	r3, #0
   15516:	d100      	bne.n	1551a <SX1276OnDio0Irq+0x2c6>
   15518:	e0ee      	b.n	156f8 <SX1276OnDio0Irq+0x4a4>
   1551a:	4b2a      	ldr	r3, [pc, #168]	; (155c4 <SX1276OnDio0Irq+0x370>)
   1551c:	681b      	ldr	r3, [r3, #0]
   1551e:	691b      	ldr	r3, [r3, #16]
   15520:	2b00      	cmp	r3, #0
   15522:	d100      	bne.n	15526 <SX1276OnDio0Irq+0x2d2>
   15524:	e0e8      	b.n	156f8 <SX1276OnDio0Irq+0x4a4>
                            RadioEvents->RxError( );
   15526:	4b27      	ldr	r3, [pc, #156]	; (155c4 <SX1276OnDio0Irq+0x370>)
   15528:	681b      	ldr	r3, [r3, #0]
   1552a:	691b      	ldr	r3, [r3, #16]
   1552c:	4798      	blx	r3
                        break;
   1552e:	e0e3      	b.n	156f8 <SX1276OnDio0Irq+0x4a4>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   15530:	2019      	movs	r0, #25
   15532:	4b1e      	ldr	r3, [pc, #120]	; (155ac <SX1276OnDio0Irq+0x358>)
   15534:	4798      	blx	r3
   15536:	0003      	movs	r3, r0
   15538:	b25b      	sxtb	r3, r3
   1553a:	3302      	adds	r3, #2
   1553c:	109b      	asrs	r3, r3, #2
   1553e:	b259      	sxtb	r1, r3
   15540:	4a19      	ldr	r2, [pc, #100]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15542:	239e      	movs	r3, #158	; 0x9e
   15544:	005b      	lsls	r3, r3, #1
   15546:	54d1      	strb	r1, [r2, r3]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   15548:	201a      	movs	r0, #26
   1554a:	4b18      	ldr	r3, [pc, #96]	; (155ac <SX1276OnDio0Irq+0x358>)
   1554c:	4798      	blx	r3
   1554e:	0003      	movs	r3, r0
   15550:	001a      	movs	r2, r3
   15552:	230e      	movs	r3, #14
   15554:	18fb      	adds	r3, r7, r3
   15556:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   15558:	4a13      	ldr	r2, [pc, #76]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1555a:	239e      	movs	r3, #158	; 0x9e
   1555c:	005b      	lsls	r3, r3, #1
   1555e:	56d3      	ldrsb	r3, [r2, r3]
   15560:	2b00      	cmp	r3, #0
   15562:	da54      	bge.n	1560e <SX1276OnDio0Irq+0x3ba>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   15564:	4b10      	ldr	r3, [pc, #64]	; (155a8 <SX1276OnDio0Irq+0x354>)
   15566:	22e4      	movs	r2, #228	; 0xe4
   15568:	589b      	ldr	r3, [r3, r2]
   1556a:	4a1a      	ldr	r2, [pc, #104]	; (155d4 <SX1276OnDio0Irq+0x380>)
   1556c:	4293      	cmp	r3, r2
   1556e:	d933      	bls.n	155d8 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   15570:	230e      	movs	r3, #14
   15572:	18fb      	adds	r3, r7, r3
   15574:	2200      	movs	r2, #0
   15576:	5e9b      	ldrsh	r3, [r3, r2]
   15578:	111b      	asrs	r3, r3, #4
   1557a:	b21b      	sxth	r3, r3
   1557c:	b29a      	uxth	r2, r3
   1557e:	230e      	movs	r3, #14
   15580:	18fb      	adds	r3, r7, r3
   15582:	881b      	ldrh	r3, [r3, #0]
   15584:	18d3      	adds	r3, r2, r3
   15586:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
   15588:	4907      	ldr	r1, [pc, #28]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1558a:	239e      	movs	r3, #158	; 0x9e
   1558c:	005b      	lsls	r3, r3, #1
   1558e:	56cb      	ldrsb	r3, [r1, r3]
   15590:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   15592:	18d3      	adds	r3, r2, r3
   15594:	b29b      	uxth	r3, r3
   15596:	3b9d      	subs	r3, #157	; 0x9d
   15598:	b29b      	uxth	r3, r3
   1559a:	b219      	sxth	r1, r3
   1559c:	4a02      	ldr	r2, [pc, #8]	; (155a8 <SX1276OnDio0Irq+0x354>)
   1559e:	239f      	movs	r3, #159	; 0x9f
   155a0:	005b      	lsls	r3, r3, #1
   155a2:	52d1      	strh	r1, [r2, r3]
   155a4:	e060      	b.n	15668 <SX1276OnDio0Irq+0x414>
   155a6:	46c0      	nop			; (mov r8, r8)
   155a8:	20001c5c 	.word	0x20001c5c
   155ac:	00014e35 	.word	0x00014e35
   155b0:	00014e09 	.word	0x00014e09
   155b4:	20001da0 	.word	0x20001da0
   155b8:	0001624d 	.word	0x0001624d
   155bc:	20001c44 	.word	0x20001c44
   155c0:	00015fc1 	.word	0x00015fc1
   155c4:	200018d0 	.word	0x200018d0
   155c8:	20001d72 	.word	0x20001d72
   155cc:	00014fb9 	.word	0x00014fb9
   155d0:	200018d4 	.word	0x200018d4
   155d4:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   155d8:	230e      	movs	r3, #14
   155da:	18fb      	adds	r3, r7, r3
   155dc:	2200      	movs	r2, #0
   155de:	5e9b      	ldrsh	r3, [r3, r2]
   155e0:	111b      	asrs	r3, r3, #4
   155e2:	b21b      	sxth	r3, r3
   155e4:	b29a      	uxth	r2, r3
   155e6:	230e      	movs	r3, #14
   155e8:	18fb      	adds	r3, r7, r3
   155ea:	881b      	ldrh	r3, [r3, #0]
   155ec:	18d3      	adds	r3, r2, r3
   155ee:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
   155f0:	4955      	ldr	r1, [pc, #340]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   155f2:	239e      	movs	r3, #158	; 0x9e
   155f4:	005b      	lsls	r3, r3, #1
   155f6:	56cb      	ldrsb	r3, [r1, r3]
   155f8:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   155fa:	18d3      	adds	r3, r2, r3
   155fc:	b29b      	uxth	r3, r3
   155fe:	3ba4      	subs	r3, #164	; 0xa4
   15600:	b29b      	uxth	r3, r3
   15602:	b219      	sxth	r1, r3
   15604:	4a50      	ldr	r2, [pc, #320]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   15606:	239f      	movs	r3, #159	; 0x9f
   15608:	005b      	lsls	r3, r3, #1
   1560a:	52d1      	strh	r1, [r2, r3]
   1560c:	e02c      	b.n	15668 <SX1276OnDio0Irq+0x414>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1560e:	4b4e      	ldr	r3, [pc, #312]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   15610:	22e4      	movs	r2, #228	; 0xe4
   15612:	589b      	ldr	r3, [r3, r2]
   15614:	4a4d      	ldr	r2, [pc, #308]	; (1574c <SX1276OnDio0Irq+0x4f8>)
   15616:	4293      	cmp	r3, r2
   15618:	d913      	bls.n	15642 <SX1276OnDio0Irq+0x3ee>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   1561a:	230e      	movs	r3, #14
   1561c:	18fb      	adds	r3, r7, r3
   1561e:	2200      	movs	r2, #0
   15620:	5e9b      	ldrsh	r3, [r3, r2]
   15622:	111b      	asrs	r3, r3, #4
   15624:	b21b      	sxth	r3, r3
   15626:	b29a      	uxth	r2, r3
   15628:	230e      	movs	r3, #14
   1562a:	18fb      	adds	r3, r7, r3
   1562c:	881b      	ldrh	r3, [r3, #0]
   1562e:	18d3      	adds	r3, r2, r3
   15630:	b29b      	uxth	r3, r3
   15632:	3b9d      	subs	r3, #157	; 0x9d
   15634:	b29b      	uxth	r3, r3
   15636:	b219      	sxth	r1, r3
   15638:	4a43      	ldr	r2, [pc, #268]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   1563a:	239f      	movs	r3, #159	; 0x9f
   1563c:	005b      	lsls	r3, r3, #1
   1563e:	52d1      	strh	r1, [r2, r3]
   15640:	e012      	b.n	15668 <SX1276OnDio0Irq+0x414>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   15642:	230e      	movs	r3, #14
   15644:	18fb      	adds	r3, r7, r3
   15646:	2200      	movs	r2, #0
   15648:	5e9b      	ldrsh	r3, [r3, r2]
   1564a:	111b      	asrs	r3, r3, #4
   1564c:	b21b      	sxth	r3, r3
   1564e:	b29a      	uxth	r2, r3
   15650:	230e      	movs	r3, #14
   15652:	18fb      	adds	r3, r7, r3
   15654:	881b      	ldrh	r3, [r3, #0]
   15656:	18d3      	adds	r3, r2, r3
   15658:	b29b      	uxth	r3, r3
   1565a:	3ba4      	subs	r3, #164	; 0xa4
   1565c:	b29b      	uxth	r3, r3
   1565e:	b219      	sxth	r1, r3
   15660:	4a39      	ldr	r2, [pc, #228]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   15662:	239f      	movs	r3, #159	; 0x9f
   15664:	005b      	lsls	r3, r3, #1
   15666:	52d1      	strh	r1, [r2, r3]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   15668:	2013      	movs	r0, #19
   1566a:	4b39      	ldr	r3, [pc, #228]	; (15750 <SX1276OnDio0Irq+0x4fc>)
   1566c:	4798      	blx	r3
   1566e:	0003      	movs	r3, r0
   15670:	0019      	movs	r1, r3
   15672:	4a35      	ldr	r2, [pc, #212]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   15674:	23a0      	movs	r3, #160	; 0xa0
   15676:	005b      	lsls	r3, r3, #1
   15678:	54d1      	strb	r1, [r2, r3]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   1567a:	2010      	movs	r0, #16
   1567c:	4b34      	ldr	r3, [pc, #208]	; (15750 <SX1276OnDio0Irq+0x4fc>)
   1567e:	4798      	blx	r3
   15680:	0003      	movs	r3, r0
   15682:	0019      	movs	r1, r3
   15684:	200d      	movs	r0, #13
   15686:	4b33      	ldr	r3, [pc, #204]	; (15754 <SX1276OnDio0Irq+0x500>)
   15688:	4798      	blx	r3
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
   1568a:	4a2f      	ldr	r2, [pc, #188]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   1568c:	23a0      	movs	r3, #160	; 0xa0
   1568e:	005b      	lsls	r3, r3, #1
   15690:	5cd2      	ldrb	r2, [r2, r3]
   15692:	4b31      	ldr	r3, [pc, #196]	; (15758 <SX1276OnDio0Irq+0x504>)
   15694:	0011      	movs	r1, r2
   15696:	0018      	movs	r0, r3
   15698:	4b30      	ldr	r3, [pc, #192]	; (1575c <SX1276OnDio0Irq+0x508>)
   1569a:	4798      	blx	r3
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   1569c:	4a2a      	ldr	r2, [pc, #168]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   1569e:	2399      	movs	r3, #153	; 0x99
   156a0:	005b      	lsls	r3, r3, #1
   156a2:	5cd3      	ldrb	r3, [r2, r3]
   156a4:	2201      	movs	r2, #1
   156a6:	4053      	eors	r3, r2
   156a8:	b2db      	uxtb	r3, r3
   156aa:	2b00      	cmp	r3, #0
   156ac:	d003      	beq.n	156b6 <SX1276OnDio0Irq+0x462>
                        SX1276.Settings.State = RF_IDLE;
   156ae:	4b26      	ldr	r3, [pc, #152]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   156b0:	22e0      	movs	r2, #224	; 0xe0
   156b2:	2100      	movs	r1, #0
   156b4:	5499      	strb	r1, [r3, r2]
                    TimerStop( &RxTimeoutTimer );
   156b6:	4b2a      	ldr	r3, [pc, #168]	; (15760 <SX1276OnDio0Irq+0x50c>)
   156b8:	0018      	movs	r0, r3
   156ba:	4b2a      	ldr	r3, [pc, #168]	; (15764 <SX1276OnDio0Irq+0x510>)
   156bc:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   156be:	4b2a      	ldr	r3, [pc, #168]	; (15768 <SX1276OnDio0Irq+0x514>)
   156c0:	681b      	ldr	r3, [r3, #0]
   156c2:	2b00      	cmp	r3, #0
   156c4:	d01a      	beq.n	156fc <SX1276OnDio0Irq+0x4a8>
   156c6:	4b28      	ldr	r3, [pc, #160]	; (15768 <SX1276OnDio0Irq+0x514>)
   156c8:	681b      	ldr	r3, [r3, #0]
   156ca:	689b      	ldr	r3, [r3, #8]
   156cc:	2b00      	cmp	r3, #0
   156ce:	d015      	beq.n	156fc <SX1276OnDio0Irq+0x4a8>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   156d0:	4b25      	ldr	r3, [pc, #148]	; (15768 <SX1276OnDio0Irq+0x514>)
   156d2:	681b      	ldr	r3, [r3, #0]
   156d4:	689c      	ldr	r4, [r3, #8]
   156d6:	4a1c      	ldr	r2, [pc, #112]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   156d8:	23a0      	movs	r3, #160	; 0xa0
   156da:	005b      	lsls	r3, r3, #1
   156dc:	5cd3      	ldrb	r3, [r2, r3]
   156de:	b299      	uxth	r1, r3
   156e0:	4a19      	ldr	r2, [pc, #100]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   156e2:	239f      	movs	r3, #159	; 0x9f
   156e4:	005b      	lsls	r3, r3, #1
   156e6:	5ed5      	ldrsh	r5, [r2, r3]
   156e8:	4a17      	ldr	r2, [pc, #92]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   156ea:	239e      	movs	r3, #158	; 0x9e
   156ec:	005b      	lsls	r3, r3, #1
   156ee:	56d3      	ldrsb	r3, [r2, r3]
   156f0:	4819      	ldr	r0, [pc, #100]	; (15758 <SX1276OnDio0Irq+0x504>)
   156f2:	002a      	movs	r2, r5
   156f4:	47a0      	blx	r4
                break;
   156f6:	e001      	b.n	156fc <SX1276OnDio0Irq+0x4a8>
                        break;
   156f8:	46c0      	nop			; (mov r8, r8)
   156fa:	e021      	b.n	15740 <SX1276OnDio0Irq+0x4ec>
                break;
   156fc:	46c0      	nop			; (mov r8, r8)
            break;
   156fe:	e01f      	b.n	15740 <SX1276OnDio0Irq+0x4ec>
            TimerStop( &TxTimeoutTimer );
   15700:	4b1a      	ldr	r3, [pc, #104]	; (1576c <SX1276OnDio0Irq+0x518>)
   15702:	0018      	movs	r0, r3
   15704:	4b17      	ldr	r3, [pc, #92]	; (15764 <SX1276OnDio0Irq+0x510>)
   15706:	4798      	blx	r3
            switch( SX1276.Settings.Modem )
   15708:	4b0f      	ldr	r3, [pc, #60]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   1570a:	22e1      	movs	r2, #225	; 0xe1
   1570c:	5c9b      	ldrb	r3, [r3, r2]
   1570e:	2b01      	cmp	r3, #1
   15710:	d103      	bne.n	1571a <SX1276OnDio0Irq+0x4c6>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   15712:	2108      	movs	r1, #8
   15714:	2012      	movs	r0, #18
   15716:	4b0f      	ldr	r3, [pc, #60]	; (15754 <SX1276OnDio0Irq+0x500>)
   15718:	4798      	blx	r3
                SX1276.Settings.State = RF_IDLE;
   1571a:	4b0b      	ldr	r3, [pc, #44]	; (15748 <SX1276OnDio0Irq+0x4f4>)
   1571c:	22e0      	movs	r2, #224	; 0xe0
   1571e:	2100      	movs	r1, #0
   15720:	5499      	strb	r1, [r3, r2]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   15722:	4b11      	ldr	r3, [pc, #68]	; (15768 <SX1276OnDio0Irq+0x514>)
   15724:	681b      	ldr	r3, [r3, #0]
   15726:	2b00      	cmp	r3, #0
   15728:	d008      	beq.n	1573c <SX1276OnDio0Irq+0x4e8>
   1572a:	4b0f      	ldr	r3, [pc, #60]	; (15768 <SX1276OnDio0Irq+0x514>)
   1572c:	681b      	ldr	r3, [r3, #0]
   1572e:	681b      	ldr	r3, [r3, #0]
   15730:	2b00      	cmp	r3, #0
   15732:	d003      	beq.n	1573c <SX1276OnDio0Irq+0x4e8>
                    RadioEvents->TxDone( );
   15734:	4b0c      	ldr	r3, [pc, #48]	; (15768 <SX1276OnDio0Irq+0x514>)
   15736:	681b      	ldr	r3, [r3, #0]
   15738:	681b      	ldr	r3, [r3, #0]
   1573a:	4798      	blx	r3
                break;
   1573c:	46c0      	nop			; (mov r8, r8)
            break;
   1573e:	46c0      	nop			; (mov r8, r8)
    }
}
   15740:	46c0      	nop			; (mov r8, r8)
   15742:	46bd      	mov	sp, r7
   15744:	b004      	add	sp, #16
   15746:	bdb0      	pop	{r4, r5, r7, pc}
   15748:	20001c5c 	.word	0x20001c5c
   1574c:	1f4add40 	.word	0x1f4add40
   15750:	00014e35 	.word	0x00014e35
   15754:	00014e09 	.word	0x00014e09
   15758:	200018d4 	.word	0x200018d4
   1575c:	00014fb9 	.word	0x00014fb9
   15760:	20001da0 	.word	0x20001da0
   15764:	0001624d 	.word	0x0001624d
   15768:	200018d0 	.word	0x200018d0
   1576c:	20001c2c 	.word	0x20001c2c

00015770 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
   15770:	b580      	push	{r7, lr}
   15772:	b082      	sub	sp, #8
   15774:	af00      	add	r7, sp, #0
   15776:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
   15778:	4b7d      	ldr	r3, [pc, #500]	; (15970 <SX1276OnDio1Irq+0x200>)
   1577a:	22e0      	movs	r2, #224	; 0xe0
   1577c:	5c9b      	ldrb	r3, [r3, r2]
   1577e:	2b01      	cmp	r3, #1
   15780:	d003      	beq.n	1578a <SX1276OnDio1Irq+0x1a>
   15782:	2b02      	cmp	r3, #2
   15784:	d100      	bne.n	15788 <SX1276OnDio1Irq+0x18>
   15786:	e098      	b.n	158ba <SX1276OnDio1Irq+0x14a>
            default:
                break;
            }
            break;
        default:
            break;
   15788:	e0ee      	b.n	15968 <SX1276OnDio1Irq+0x1f8>
            switch( SX1276.Settings.Modem )
   1578a:	4b79      	ldr	r3, [pc, #484]	; (15970 <SX1276OnDio1Irq+0x200>)
   1578c:	22e1      	movs	r2, #225	; 0xe1
   1578e:	5c9b      	ldrb	r3, [r3, r2]
   15790:	2b00      	cmp	r3, #0
   15792:	d003      	beq.n	1579c <SX1276OnDio1Irq+0x2c>
   15794:	2b01      	cmp	r3, #1
   15796:	d100      	bne.n	1579a <SX1276OnDio1Irq+0x2a>
   15798:	e074      	b.n	15884 <SX1276OnDio1Irq+0x114>
                break;
   1579a:	e08d      	b.n	158b8 <SX1276OnDio1Irq+0x148>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1579c:	4a74      	ldr	r2, [pc, #464]	; (15970 <SX1276OnDio1Irq+0x200>)
   1579e:	238b      	movs	r3, #139	; 0x8b
   157a0:	005b      	lsls	r3, r3, #1
   157a2:	5ad3      	ldrh	r3, [r2, r3]
   157a4:	2b00      	cmp	r3, #0
   157a6:	d11c      	bne.n	157e2 <SX1276OnDio1Irq+0x72>
   157a8:	4a71      	ldr	r2, [pc, #452]	; (15970 <SX1276OnDio1Irq+0x200>)
   157aa:	238c      	movs	r3, #140	; 0x8c
   157ac:	005b      	lsls	r3, r3, #1
   157ae:	5ad3      	ldrh	r3, [r2, r3]
   157b0:	2b00      	cmp	r3, #0
   157b2:	d116      	bne.n	157e2 <SX1276OnDio1Irq+0x72>
                    if( SX1276.Settings.Fsk.FixLen == false )
   157b4:	4b6e      	ldr	r3, [pc, #440]	; (15970 <SX1276OnDio1Irq+0x200>)
   157b6:	22fe      	movs	r2, #254	; 0xfe
   157b8:	5c9b      	ldrb	r3, [r3, r2]
   157ba:	2201      	movs	r2, #1
   157bc:	4053      	eors	r3, r2
   157be:	b2db      	uxtb	r3, r3
   157c0:	2b00      	cmp	r3, #0
   157c2:	d005      	beq.n	157d0 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   157c4:	4b6b      	ldr	r3, [pc, #428]	; (15974 <SX1276OnDio1Irq+0x204>)
   157c6:	2101      	movs	r1, #1
   157c8:	0018      	movs	r0, r3
   157ca:	4b6b      	ldr	r3, [pc, #428]	; (15978 <SX1276OnDio1Irq+0x208>)
   157cc:	4798      	blx	r3
   157ce:	e008      	b.n	157e2 <SX1276OnDio1Irq+0x72>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   157d0:	2032      	movs	r0, #50	; 0x32
   157d2:	4b6a      	ldr	r3, [pc, #424]	; (1597c <SX1276OnDio1Irq+0x20c>)
   157d4:	4798      	blx	r3
   157d6:	0003      	movs	r3, r0
   157d8:	b299      	uxth	r1, r3
   157da:	4a65      	ldr	r2, [pc, #404]	; (15970 <SX1276OnDio1Irq+0x200>)
   157dc:	238b      	movs	r3, #139	; 0x8b
   157de:	005b      	lsls	r3, r3, #1
   157e0:	52d1      	strh	r1, [r2, r3]
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   157e2:	4a63      	ldr	r2, [pc, #396]	; (15970 <SX1276OnDio1Irq+0x200>)
   157e4:	238b      	movs	r3, #139	; 0x8b
   157e6:	005b      	lsls	r3, r3, #1
   157e8:	5ad3      	ldrh	r3, [r2, r3]
   157ea:	0019      	movs	r1, r3
   157ec:	4a60      	ldr	r2, [pc, #384]	; (15970 <SX1276OnDio1Irq+0x200>)
   157ee:	238c      	movs	r3, #140	; 0x8c
   157f0:	005b      	lsls	r3, r3, #1
   157f2:	5ad3      	ldrh	r3, [r2, r3]
   157f4:	1acb      	subs	r3, r1, r3
   157f6:	495e      	ldr	r1, [pc, #376]	; (15970 <SX1276OnDio1Irq+0x200>)
   157f8:	228d      	movs	r2, #141	; 0x8d
   157fa:	0052      	lsls	r2, r2, #1
   157fc:	5c8a      	ldrb	r2, [r1, r2]
   157fe:	4293      	cmp	r3, r2
   15800:	db21      	blt.n	15846 <SX1276OnDio1Irq+0xd6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   15802:	4a5b      	ldr	r2, [pc, #364]	; (15970 <SX1276OnDio1Irq+0x200>)
   15804:	238c      	movs	r3, #140	; 0x8c
   15806:	005b      	lsls	r3, r3, #1
   15808:	5ad3      	ldrh	r3, [r2, r3]
   1580a:	001a      	movs	r2, r3
   1580c:	4b5c      	ldr	r3, [pc, #368]	; (15980 <SX1276OnDio1Irq+0x210>)
   1580e:	18d0      	adds	r0, r2, r3
   15810:	4a57      	ldr	r2, [pc, #348]	; (15970 <SX1276OnDio1Irq+0x200>)
   15812:	238d      	movs	r3, #141	; 0x8d
   15814:	005b      	lsls	r3, r3, #1
   15816:	5cd3      	ldrb	r3, [r2, r3]
   15818:	3b01      	subs	r3, #1
   1581a:	b2db      	uxtb	r3, r3
   1581c:	0019      	movs	r1, r3
   1581e:	4b56      	ldr	r3, [pc, #344]	; (15978 <SX1276OnDio1Irq+0x208>)
   15820:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   15822:	4a53      	ldr	r2, [pc, #332]	; (15970 <SX1276OnDio1Irq+0x200>)
   15824:	238c      	movs	r3, #140	; 0x8c
   15826:	005b      	lsls	r3, r3, #1
   15828:	5ad2      	ldrh	r2, [r2, r3]
   1582a:	4951      	ldr	r1, [pc, #324]	; (15970 <SX1276OnDio1Irq+0x200>)
   1582c:	238d      	movs	r3, #141	; 0x8d
   1582e:	005b      	lsls	r3, r3, #1
   15830:	5ccb      	ldrb	r3, [r1, r3]
   15832:	b29b      	uxth	r3, r3
   15834:	18d3      	adds	r3, r2, r3
   15836:	b29b      	uxth	r3, r3
   15838:	3b01      	subs	r3, #1
   1583a:	b299      	uxth	r1, r3
   1583c:	4a4c      	ldr	r2, [pc, #304]	; (15970 <SX1276OnDio1Irq+0x200>)
   1583e:	238c      	movs	r3, #140	; 0x8c
   15840:	005b      	lsls	r3, r3, #1
   15842:	52d1      	strh	r1, [r2, r3]
                break;
   15844:	e038      	b.n	158b8 <SX1276OnDio1Irq+0x148>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   15846:	4a4a      	ldr	r2, [pc, #296]	; (15970 <SX1276OnDio1Irq+0x200>)
   15848:	238c      	movs	r3, #140	; 0x8c
   1584a:	005b      	lsls	r3, r3, #1
   1584c:	5ad3      	ldrh	r3, [r2, r3]
   1584e:	001a      	movs	r2, r3
   15850:	4b4b      	ldr	r3, [pc, #300]	; (15980 <SX1276OnDio1Irq+0x210>)
   15852:	18d0      	adds	r0, r2, r3
   15854:	4a46      	ldr	r2, [pc, #280]	; (15970 <SX1276OnDio1Irq+0x200>)
   15856:	238b      	movs	r3, #139	; 0x8b
   15858:	005b      	lsls	r3, r3, #1
   1585a:	5ad3      	ldrh	r3, [r2, r3]
   1585c:	b2da      	uxtb	r2, r3
   1585e:	4944      	ldr	r1, [pc, #272]	; (15970 <SX1276OnDio1Irq+0x200>)
   15860:	238c      	movs	r3, #140	; 0x8c
   15862:	005b      	lsls	r3, r3, #1
   15864:	5acb      	ldrh	r3, [r1, r3]
   15866:	b2db      	uxtb	r3, r3
   15868:	1ad3      	subs	r3, r2, r3
   1586a:	b2db      	uxtb	r3, r3
   1586c:	0019      	movs	r1, r3
   1586e:	4b42      	ldr	r3, [pc, #264]	; (15978 <SX1276OnDio1Irq+0x208>)
   15870:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   15872:	4a3f      	ldr	r2, [pc, #252]	; (15970 <SX1276OnDio1Irq+0x200>)
   15874:	238b      	movs	r3, #139	; 0x8b
   15876:	005b      	lsls	r3, r3, #1
   15878:	5ad1      	ldrh	r1, [r2, r3]
   1587a:	4a3d      	ldr	r2, [pc, #244]	; (15970 <SX1276OnDio1Irq+0x200>)
   1587c:	238c      	movs	r3, #140	; 0x8c
   1587e:	005b      	lsls	r3, r3, #1
   15880:	52d1      	strh	r1, [r2, r3]
                break;
   15882:	e019      	b.n	158b8 <SX1276OnDio1Irq+0x148>
                TimerStop( &RxTimeoutTimer );
   15884:	4b3f      	ldr	r3, [pc, #252]	; (15984 <SX1276OnDio1Irq+0x214>)
   15886:	0018      	movs	r0, r3
   15888:	4b3f      	ldr	r3, [pc, #252]	; (15988 <SX1276OnDio1Irq+0x218>)
   1588a:	4798      	blx	r3
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1588c:	2180      	movs	r1, #128	; 0x80
   1588e:	2012      	movs	r0, #18
   15890:	4b3e      	ldr	r3, [pc, #248]	; (1598c <SX1276OnDio1Irq+0x21c>)
   15892:	4798      	blx	r3
                SX1276.Settings.State = RF_IDLE;
   15894:	4b36      	ldr	r3, [pc, #216]	; (15970 <SX1276OnDio1Irq+0x200>)
   15896:	22e0      	movs	r2, #224	; 0xe0
   15898:	2100      	movs	r1, #0
   1589a:	5499      	strb	r1, [r3, r2]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1589c:	4b3c      	ldr	r3, [pc, #240]	; (15990 <SX1276OnDio1Irq+0x220>)
   1589e:	681b      	ldr	r3, [r3, #0]
   158a0:	2b00      	cmp	r3, #0
   158a2:	d008      	beq.n	158b6 <SX1276OnDio1Irq+0x146>
   158a4:	4b3a      	ldr	r3, [pc, #232]	; (15990 <SX1276OnDio1Irq+0x220>)
   158a6:	681b      	ldr	r3, [r3, #0]
   158a8:	68db      	ldr	r3, [r3, #12]
   158aa:	2b00      	cmp	r3, #0
   158ac:	d003      	beq.n	158b6 <SX1276OnDio1Irq+0x146>
                    RadioEvents->RxTimeout( );
   158ae:	4b38      	ldr	r3, [pc, #224]	; (15990 <SX1276OnDio1Irq+0x220>)
   158b0:	681b      	ldr	r3, [r3, #0]
   158b2:	68db      	ldr	r3, [r3, #12]
   158b4:	4798      	blx	r3
                break;
   158b6:	46c0      	nop			; (mov r8, r8)
            break;
   158b8:	e056      	b.n	15968 <SX1276OnDio1Irq+0x1f8>
            switch( SX1276.Settings.Modem )
   158ba:	4b2d      	ldr	r3, [pc, #180]	; (15970 <SX1276OnDio1Irq+0x200>)
   158bc:	22e1      	movs	r2, #225	; 0xe1
   158be:	5c9b      	ldrb	r3, [r3, r2]
   158c0:	2b00      	cmp	r3, #0
   158c2:	d002      	beq.n	158ca <SX1276OnDio1Irq+0x15a>
   158c4:	2b01      	cmp	r3, #1
   158c6:	d04d      	beq.n	15964 <SX1276OnDio1Irq+0x1f4>
                break;
   158c8:	e04d      	b.n	15966 <SX1276OnDio1Irq+0x1f6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   158ca:	4a29      	ldr	r2, [pc, #164]	; (15970 <SX1276OnDio1Irq+0x200>)
   158cc:	238b      	movs	r3, #139	; 0x8b
   158ce:	005b      	lsls	r3, r3, #1
   158d0:	5ad3      	ldrh	r3, [r2, r3]
   158d2:	0019      	movs	r1, r3
   158d4:	4a26      	ldr	r2, [pc, #152]	; (15970 <SX1276OnDio1Irq+0x200>)
   158d6:	238c      	movs	r3, #140	; 0x8c
   158d8:	005b      	lsls	r3, r3, #1
   158da:	5ad3      	ldrh	r3, [r2, r3]
   158dc:	1acb      	subs	r3, r1, r3
   158de:	4924      	ldr	r1, [pc, #144]	; (15970 <SX1276OnDio1Irq+0x200>)
   158e0:	221c      	movs	r2, #28
   158e2:	32ff      	adds	r2, #255	; 0xff
   158e4:	5c8a      	ldrb	r2, [r1, r2]
   158e6:	4293      	cmp	r3, r2
   158e8:	dd1d      	ble.n	15926 <SX1276OnDio1Irq+0x1b6>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   158ea:	4a21      	ldr	r2, [pc, #132]	; (15970 <SX1276OnDio1Irq+0x200>)
   158ec:	238c      	movs	r3, #140	; 0x8c
   158ee:	005b      	lsls	r3, r3, #1
   158f0:	5ad3      	ldrh	r3, [r2, r3]
   158f2:	001a      	movs	r2, r3
   158f4:	4b22      	ldr	r3, [pc, #136]	; (15980 <SX1276OnDio1Irq+0x210>)
   158f6:	18d0      	adds	r0, r2, r3
   158f8:	4a1d      	ldr	r2, [pc, #116]	; (15970 <SX1276OnDio1Irq+0x200>)
   158fa:	231c      	movs	r3, #28
   158fc:	33ff      	adds	r3, #255	; 0xff
   158fe:	5cd3      	ldrb	r3, [r2, r3]
   15900:	0019      	movs	r1, r3
   15902:	4b24      	ldr	r3, [pc, #144]	; (15994 <SX1276OnDio1Irq+0x224>)
   15904:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   15906:	4a1a      	ldr	r2, [pc, #104]	; (15970 <SX1276OnDio1Irq+0x200>)
   15908:	238c      	movs	r3, #140	; 0x8c
   1590a:	005b      	lsls	r3, r3, #1
   1590c:	5ad2      	ldrh	r2, [r2, r3]
   1590e:	4918      	ldr	r1, [pc, #96]	; (15970 <SX1276OnDio1Irq+0x200>)
   15910:	231c      	movs	r3, #28
   15912:	33ff      	adds	r3, #255	; 0xff
   15914:	5ccb      	ldrb	r3, [r1, r3]
   15916:	b29b      	uxth	r3, r3
   15918:	18d3      	adds	r3, r2, r3
   1591a:	b299      	uxth	r1, r3
   1591c:	4a14      	ldr	r2, [pc, #80]	; (15970 <SX1276OnDio1Irq+0x200>)
   1591e:	238c      	movs	r3, #140	; 0x8c
   15920:	005b      	lsls	r3, r3, #1
   15922:	52d1      	strh	r1, [r2, r3]
                break;
   15924:	e01f      	b.n	15966 <SX1276OnDio1Irq+0x1f6>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   15926:	4a12      	ldr	r2, [pc, #72]	; (15970 <SX1276OnDio1Irq+0x200>)
   15928:	238c      	movs	r3, #140	; 0x8c
   1592a:	005b      	lsls	r3, r3, #1
   1592c:	5ad3      	ldrh	r3, [r2, r3]
   1592e:	001a      	movs	r2, r3
   15930:	4b13      	ldr	r3, [pc, #76]	; (15980 <SX1276OnDio1Irq+0x210>)
   15932:	18d0      	adds	r0, r2, r3
   15934:	4a0e      	ldr	r2, [pc, #56]	; (15970 <SX1276OnDio1Irq+0x200>)
   15936:	238b      	movs	r3, #139	; 0x8b
   15938:	005b      	lsls	r3, r3, #1
   1593a:	5ad3      	ldrh	r3, [r2, r3]
   1593c:	b2da      	uxtb	r2, r3
   1593e:	490c      	ldr	r1, [pc, #48]	; (15970 <SX1276OnDio1Irq+0x200>)
   15940:	238c      	movs	r3, #140	; 0x8c
   15942:	005b      	lsls	r3, r3, #1
   15944:	5acb      	ldrh	r3, [r1, r3]
   15946:	b2db      	uxtb	r3, r3
   15948:	1ad3      	subs	r3, r2, r3
   1594a:	b2db      	uxtb	r3, r3
   1594c:	0019      	movs	r1, r3
   1594e:	4b11      	ldr	r3, [pc, #68]	; (15994 <SX1276OnDio1Irq+0x224>)
   15950:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   15952:	4a07      	ldr	r2, [pc, #28]	; (15970 <SX1276OnDio1Irq+0x200>)
   15954:	238b      	movs	r3, #139	; 0x8b
   15956:	005b      	lsls	r3, r3, #1
   15958:	5ad1      	ldrh	r1, [r2, r3]
   1595a:	4a05      	ldr	r2, [pc, #20]	; (15970 <SX1276OnDio1Irq+0x200>)
   1595c:	238c      	movs	r3, #140	; 0x8c
   1595e:	005b      	lsls	r3, r3, #1
   15960:	52d1      	strh	r1, [r2, r3]
                break;
   15962:	e000      	b.n	15966 <SX1276OnDio1Irq+0x1f6>
                break;
   15964:	46c0      	nop			; (mov r8, r8)
            break;
   15966:	46c0      	nop			; (mov r8, r8)
    }
}
   15968:	46c0      	nop			; (mov r8, r8)
   1596a:	46bd      	mov	sp, r7
   1596c:	b002      	add	sp, #8
   1596e:	bd80      	pop	{r7, pc}
   15970:	20001c5c 	.word	0x20001c5c
   15974:	20001d72 	.word	0x20001d72
   15978:	00014fb9 	.word	0x00014fb9
   1597c:	00014e35 	.word	0x00014e35
   15980:	200018d4 	.word	0x200018d4
   15984:	20001da0 	.word	0x20001da0
   15988:	0001624d 	.word	0x0001624d
   1598c:	00014e09 	.word	0x00014e09
   15990:	200018d0 	.word	0x200018d0
   15994:	00014f91 	.word	0x00014f91

00015998 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
   15998:	b590      	push	{r4, r7, lr}
   1599a:	b083      	sub	sp, #12
   1599c:	af00      	add	r7, sp, #0
   1599e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
   159a0:	4b64      	ldr	r3, [pc, #400]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159a2:	22e0      	movs	r2, #224	; 0xe0
   159a4:	5c9b      	ldrb	r3, [r3, r2]
   159a6:	2b01      	cmp	r3, #1
   159a8:	d003      	beq.n	159b2 <SX1276OnDio2Irq+0x1a>
   159aa:	2b02      	cmp	r3, #2
   159ac:	d100      	bne.n	159b0 <SX1276OnDio2Irq+0x18>
   159ae:	e08f      	b.n	15ad0 <SX1276OnDio2Irq+0x138>
            default:
                break;
            }
            break;
        default:
            break;
   159b0:	e0bb      	b.n	15b2a <SX1276OnDio2Irq+0x192>
            switch( SX1276.Settings.Modem )
   159b2:	4b60      	ldr	r3, [pc, #384]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159b4:	22e1      	movs	r2, #225	; 0xe1
   159b6:	5c9b      	ldrb	r3, [r3, r2]
   159b8:	2b00      	cmp	r3, #0
   159ba:	d002      	beq.n	159c2 <SX1276OnDio2Irq+0x2a>
   159bc:	2b01      	cmp	r3, #1
   159be:	d062      	beq.n	15a86 <SX1276OnDio2Irq+0xee>
                break;
   159c0:	e085      	b.n	15ace <SX1276OnDio2Irq+0x136>
                if( SX1276.DIO4.port == NULL )
   159c2:	4b5c      	ldr	r3, [pc, #368]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   159c6:	2b00      	cmp	r3, #0
   159c8:	d104      	bne.n	159d4 <SX1276OnDio2Irq+0x3c>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   159ca:	4a5a      	ldr	r2, [pc, #360]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159cc:	2386      	movs	r3, #134	; 0x86
   159ce:	005b      	lsls	r3, r3, #1
   159d0:	2101      	movs	r1, #1
   159d2:	54d1      	strb	r1, [r2, r3]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
   159d4:	4a57      	ldr	r2, [pc, #348]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159d6:	2386      	movs	r3, #134	; 0x86
   159d8:	005b      	lsls	r3, r3, #1
   159da:	5cd3      	ldrb	r3, [r2, r3]
   159dc:	2b01      	cmp	r3, #1
   159de:	d173      	bne.n	15ac8 <SX1276OnDio2Irq+0x130>
   159e0:	4a54      	ldr	r2, [pc, #336]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159e2:	230e      	movs	r3, #14
   159e4:	33ff      	adds	r3, #255	; 0xff
   159e6:	5cd3      	ldrb	r3, [r2, r3]
   159e8:	2b00      	cmp	r3, #0
   159ea:	d16d      	bne.n	15ac8 <SX1276OnDio2Irq+0x130>
                    TimerStop( &RxTimeoutSyncWord );
   159ec:	4b52      	ldr	r3, [pc, #328]	; (15b38 <SX1276OnDio2Irq+0x1a0>)
   159ee:	0018      	movs	r0, r3
   159f0:	4b52      	ldr	r3, [pc, #328]	; (15b3c <SX1276OnDio2Irq+0x1a4>)
   159f2:	4798      	blx	r3
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   159f4:	4a4f      	ldr	r2, [pc, #316]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   159f6:	230e      	movs	r3, #14
   159f8:	33ff      	adds	r3, #255	; 0xff
   159fa:	2101      	movs	r1, #1
   159fc:	54d1      	strb	r1, [r2, r3]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   159fe:	2011      	movs	r0, #17
   15a00:	4b4f      	ldr	r3, [pc, #316]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15a02:	4798      	blx	r3
   15a04:	0003      	movs	r3, r0
   15a06:	085b      	lsrs	r3, r3, #1
   15a08:	b2db      	uxtb	r3, r3
   15a0a:	425b      	negs	r3, r3
   15a0c:	b2db      	uxtb	r3, r3
   15a0e:	b259      	sxtb	r1, r3
   15a10:	4a48      	ldr	r2, [pc, #288]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15a12:	2387      	movs	r3, #135	; 0x87
   15a14:	005b      	lsls	r3, r3, #1
   15a16:	54d1      	strb	r1, [r2, r3]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   15a18:	201b      	movs	r0, #27
   15a1a:	4b49      	ldr	r3, [pc, #292]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15a1c:	4798      	blx	r3
   15a1e:	0003      	movs	r3, r0
   15a20:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
   15a22:	201c      	movs	r0, #28
   15a24:	4b46      	ldr	r3, [pc, #280]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15a26:	4798      	blx	r3
   15a28:	0003      	movs	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   15a2a:	0022      	movs	r2, r4
   15a2c:	431a      	orrs	r2, r3
   15a2e:	4b45      	ldr	r3, [pc, #276]	; (15b44 <SX1276OnDio2Irq+0x1ac>)
   15a30:	0010      	movs	r0, r2
   15a32:	4798      	blx	r3
   15a34:	000a      	movs	r2, r1
   15a36:	0001      	movs	r1, r0
   15a38:	4b43      	ldr	r3, [pc, #268]	; (15b48 <SX1276OnDio2Irq+0x1b0>)
   15a3a:	0008      	movs	r0, r1
   15a3c:	0011      	movs	r1, r2
   15a3e:	4798      	blx	r3
   15a40:	0002      	movs	r2, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
   15a42:	4b40      	ldr	r3, [pc, #256]	; (15b44 <SX1276OnDio2Irq+0x1ac>)
   15a44:	0010      	movs	r0, r2
   15a46:	4798      	blx	r3
   15a48:	4c40      	ldr	r4, [pc, #256]	; (15b4c <SX1276OnDio2Irq+0x1b4>)
   15a4a:	2200      	movs	r2, #0
   15a4c:	4b40      	ldr	r3, [pc, #256]	; (15b50 <SX1276OnDio2Irq+0x1b8>)
   15a4e:	47a0      	blx	r4
   15a50:	0003      	movs	r3, r0
   15a52:	000c      	movs	r4, r1
   15a54:	0019      	movs	r1, r3
   15a56:	0022      	movs	r2, r4
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   15a58:	4b3b      	ldr	r3, [pc, #236]	; (15b48 <SX1276OnDio2Irq+0x1b0>)
   15a5a:	0008      	movs	r0, r1
   15a5c:	0011      	movs	r1, r2
   15a5e:	4798      	blx	r3
   15a60:	0001      	movs	r1, r0
   15a62:	4a34      	ldr	r2, [pc, #208]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15a64:	2388      	movs	r3, #136	; 0x88
   15a66:	005b      	lsls	r3, r3, #1
   15a68:	50d1      	str	r1, [r2, r3]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   15a6a:	200c      	movs	r0, #12
   15a6c:	4b34      	ldr	r3, [pc, #208]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15a6e:	4798      	blx	r3
   15a70:	0003      	movs	r3, r0
   15a72:	095b      	lsrs	r3, r3, #5
   15a74:	b2db      	uxtb	r3, r3
   15a76:	2207      	movs	r2, #7
   15a78:	4013      	ands	r3, r2
   15a7a:	b2d9      	uxtb	r1, r3
   15a7c:	4a2d      	ldr	r2, [pc, #180]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15a7e:	238a      	movs	r3, #138	; 0x8a
   15a80:	005b      	lsls	r3, r3, #1
   15a82:	54d1      	strb	r1, [r2, r3]
                break;
   15a84:	e020      	b.n	15ac8 <SX1276OnDio2Irq+0x130>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   15a86:	4a2b      	ldr	r2, [pc, #172]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15a88:	2330      	movs	r3, #48	; 0x30
   15a8a:	33ff      	adds	r3, #255	; 0xff
   15a8c:	5cd3      	ldrb	r3, [r2, r3]
   15a8e:	2b00      	cmp	r3, #0
   15a90:	d01c      	beq.n	15acc <SX1276OnDio2Irq+0x134>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   15a92:	2102      	movs	r1, #2
   15a94:	2012      	movs	r0, #18
   15a96:	4b2f      	ldr	r3, [pc, #188]	; (15b54 <SX1276OnDio2Irq+0x1bc>)
   15a98:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   15a9a:	4b2f      	ldr	r3, [pc, #188]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15a9c:	681b      	ldr	r3, [r3, #0]
   15a9e:	2b00      	cmp	r3, #0
   15aa0:	d014      	beq.n	15acc <SX1276OnDio2Irq+0x134>
   15aa2:	4b2d      	ldr	r3, [pc, #180]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15aa4:	681b      	ldr	r3, [r3, #0]
   15aa6:	695b      	ldr	r3, [r3, #20]
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d00f      	beq.n	15acc <SX1276OnDio2Irq+0x134>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   15aac:	4b2a      	ldr	r3, [pc, #168]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15aae:	681b      	ldr	r3, [r3, #0]
   15ab0:	695c      	ldr	r4, [r3, #20]
   15ab2:	201c      	movs	r0, #28
   15ab4:	4b22      	ldr	r3, [pc, #136]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15ab6:	4798      	blx	r3
   15ab8:	0003      	movs	r3, r0
   15aba:	001a      	movs	r2, r3
   15abc:	233f      	movs	r3, #63	; 0x3f
   15abe:	4013      	ands	r3, r2
   15ac0:	b2db      	uxtb	r3, r3
   15ac2:	0018      	movs	r0, r3
   15ac4:	47a0      	blx	r4
                break;
   15ac6:	e001      	b.n	15acc <SX1276OnDio2Irq+0x134>
                break;
   15ac8:	46c0      	nop			; (mov r8, r8)
   15aca:	e02e      	b.n	15b2a <SX1276OnDio2Irq+0x192>
                break;
   15acc:	46c0      	nop			; (mov r8, r8)
            break;
   15ace:	e02c      	b.n	15b2a <SX1276OnDio2Irq+0x192>
            switch( SX1276.Settings.Modem )
   15ad0:	4b18      	ldr	r3, [pc, #96]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15ad2:	22e1      	movs	r2, #225	; 0xe1
   15ad4:	5c9b      	ldrb	r3, [r3, r2]
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	d023      	beq.n	15b22 <SX1276OnDio2Irq+0x18a>
   15ada:	2b01      	cmp	r3, #1
   15adc:	d000      	beq.n	15ae0 <SX1276OnDio2Irq+0x148>
                break;
   15ade:	e023      	b.n	15b28 <SX1276OnDio2Irq+0x190>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   15ae0:	4a14      	ldr	r2, [pc, #80]	; (15b34 <SX1276OnDio2Irq+0x19c>)
   15ae2:	2330      	movs	r3, #48	; 0x30
   15ae4:	33ff      	adds	r3, #255	; 0xff
   15ae6:	5cd3      	ldrb	r3, [r2, r3]
   15ae8:	2b00      	cmp	r3, #0
   15aea:	d01c      	beq.n	15b26 <SX1276OnDio2Irq+0x18e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   15aec:	2102      	movs	r1, #2
   15aee:	2012      	movs	r0, #18
   15af0:	4b18      	ldr	r3, [pc, #96]	; (15b54 <SX1276OnDio2Irq+0x1bc>)
   15af2:	4798      	blx	r3
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   15af4:	4b18      	ldr	r3, [pc, #96]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15af6:	681b      	ldr	r3, [r3, #0]
   15af8:	2b00      	cmp	r3, #0
   15afa:	d014      	beq.n	15b26 <SX1276OnDio2Irq+0x18e>
   15afc:	4b16      	ldr	r3, [pc, #88]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15afe:	681b      	ldr	r3, [r3, #0]
   15b00:	695b      	ldr	r3, [r3, #20]
   15b02:	2b00      	cmp	r3, #0
   15b04:	d00f      	beq.n	15b26 <SX1276OnDio2Irq+0x18e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   15b06:	4b14      	ldr	r3, [pc, #80]	; (15b58 <SX1276OnDio2Irq+0x1c0>)
   15b08:	681b      	ldr	r3, [r3, #0]
   15b0a:	695c      	ldr	r4, [r3, #20]
   15b0c:	201c      	movs	r0, #28
   15b0e:	4b0c      	ldr	r3, [pc, #48]	; (15b40 <SX1276OnDio2Irq+0x1a8>)
   15b10:	4798      	blx	r3
   15b12:	0003      	movs	r3, r0
   15b14:	001a      	movs	r2, r3
   15b16:	233f      	movs	r3, #63	; 0x3f
   15b18:	4013      	ands	r3, r2
   15b1a:	b2db      	uxtb	r3, r3
   15b1c:	0018      	movs	r0, r3
   15b1e:	47a0      	blx	r4
                break;
   15b20:	e001      	b.n	15b26 <SX1276OnDio2Irq+0x18e>
                break;
   15b22:	46c0      	nop			; (mov r8, r8)
   15b24:	e000      	b.n	15b28 <SX1276OnDio2Irq+0x190>
                break;
   15b26:	46c0      	nop			; (mov r8, r8)
            break;
   15b28:	46c0      	nop			; (mov r8, r8)
    }
}
   15b2a:	46c0      	nop			; (mov r8, r8)
   15b2c:	46bd      	mov	sp, r7
   15b2e:	b003      	add	sp, #12
   15b30:	bd90      	pop	{r4, r7, pc}
   15b32:	46c0      	nop			; (mov r8, r8)
   15b34:	20001c5c 	.word	0x20001c5c
   15b38:	20001c44 	.word	0x20001c44
   15b3c:	0001624d 	.word	0x0001624d
   15b40:	00014e35 	.word	0x00014e35
   15b44:	00019e91 	.word	0x00019e91
   15b48:	00019e29 	.word	0x00019e29
   15b4c:	000192fd 	.word	0x000192fd
   15b50:	404e8480 	.word	0x404e8480
   15b54:	00014e09 	.word	0x00014e09
   15b58:	200018d0 	.word	0x200018d0

00015b5c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
   15b5c:	b580      	push	{r7, lr}
   15b5e:	b082      	sub	sp, #8
   15b60:	af00      	add	r7, sp, #0
   15b62:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
   15b64:	4b1e      	ldr	r3, [pc, #120]	; (15be0 <SX1276OnDio3Irq+0x84>)
   15b66:	22e1      	movs	r2, #225	; 0xe1
   15b68:	5c9b      	ldrb	r3, [r3, r2]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d031      	beq.n	15bd2 <SX1276OnDio3Irq+0x76>
   15b6e:	2b01      	cmp	r3, #1
   15b70:	d000      	beq.n	15b74 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
   15b72:	e031      	b.n	15bd8 <SX1276OnDio3Irq+0x7c>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   15b74:	2012      	movs	r0, #18
   15b76:	4b1b      	ldr	r3, [pc, #108]	; (15be4 <SX1276OnDio3Irq+0x88>)
   15b78:	4798      	blx	r3
   15b7a:	0003      	movs	r3, r0
   15b7c:	001a      	movs	r2, r3
   15b7e:	2301      	movs	r3, #1
   15b80:	4013      	ands	r3, r2
   15b82:	2b01      	cmp	r3, #1
   15b84:	d112      	bne.n	15bac <SX1276OnDio3Irq+0x50>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   15b86:	2105      	movs	r1, #5
   15b88:	2012      	movs	r0, #18
   15b8a:	4b17      	ldr	r3, [pc, #92]	; (15be8 <SX1276OnDio3Irq+0x8c>)
   15b8c:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   15b8e:	4b17      	ldr	r3, [pc, #92]	; (15bec <SX1276OnDio3Irq+0x90>)
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	2b00      	cmp	r3, #0
   15b94:	d01f      	beq.n	15bd6 <SX1276OnDio3Irq+0x7a>
   15b96:	4b15      	ldr	r3, [pc, #84]	; (15bec <SX1276OnDio3Irq+0x90>)
   15b98:	681b      	ldr	r3, [r3, #0]
   15b9a:	699b      	ldr	r3, [r3, #24]
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d01a      	beq.n	15bd6 <SX1276OnDio3Irq+0x7a>
                RadioEvents->CadDone( true );
   15ba0:	4b12      	ldr	r3, [pc, #72]	; (15bec <SX1276OnDio3Irq+0x90>)
   15ba2:	681b      	ldr	r3, [r3, #0]
   15ba4:	699b      	ldr	r3, [r3, #24]
   15ba6:	2001      	movs	r0, #1
   15ba8:	4798      	blx	r3
        break;
   15baa:	e014      	b.n	15bd6 <SX1276OnDio3Irq+0x7a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   15bac:	2104      	movs	r1, #4
   15bae:	2012      	movs	r0, #18
   15bb0:	4b0d      	ldr	r3, [pc, #52]	; (15be8 <SX1276OnDio3Irq+0x8c>)
   15bb2:	4798      	blx	r3
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   15bb4:	4b0d      	ldr	r3, [pc, #52]	; (15bec <SX1276OnDio3Irq+0x90>)
   15bb6:	681b      	ldr	r3, [r3, #0]
   15bb8:	2b00      	cmp	r3, #0
   15bba:	d00c      	beq.n	15bd6 <SX1276OnDio3Irq+0x7a>
   15bbc:	4b0b      	ldr	r3, [pc, #44]	; (15bec <SX1276OnDio3Irq+0x90>)
   15bbe:	681b      	ldr	r3, [r3, #0]
   15bc0:	699b      	ldr	r3, [r3, #24]
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d007      	beq.n	15bd6 <SX1276OnDio3Irq+0x7a>
                RadioEvents->CadDone( false );
   15bc6:	4b09      	ldr	r3, [pc, #36]	; (15bec <SX1276OnDio3Irq+0x90>)
   15bc8:	681b      	ldr	r3, [r3, #0]
   15bca:	699b      	ldr	r3, [r3, #24]
   15bcc:	2000      	movs	r0, #0
   15bce:	4798      	blx	r3
        break;
   15bd0:	e001      	b.n	15bd6 <SX1276OnDio3Irq+0x7a>
        break;
   15bd2:	46c0      	nop			; (mov r8, r8)
   15bd4:	e000      	b.n	15bd8 <SX1276OnDio3Irq+0x7c>
        break;
   15bd6:	46c0      	nop			; (mov r8, r8)
    }
}
   15bd8:	46c0      	nop			; (mov r8, r8)
   15bda:	46bd      	mov	sp, r7
   15bdc:	b002      	add	sp, #8
   15bde:	bd80      	pop	{r7, pc}
   15be0:	20001c5c 	.word	0x20001c5c
   15be4:	00014e35 	.word	0x00014e35
   15be8:	00014e09 	.word	0x00014e09
   15bec:	200018d0 	.word	0x200018d0

00015bf0 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
   15bf0:	b580      	push	{r7, lr}
   15bf2:	b082      	sub	sp, #8
   15bf4:	af00      	add	r7, sp, #0
   15bf6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
   15bf8:	4b0d      	ldr	r3, [pc, #52]	; (15c30 <SX1276OnDio4Irq+0x40>)
   15bfa:	22e1      	movs	r2, #225	; 0xe1
   15bfc:	5c9b      	ldrb	r3, [r3, r2]
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d002      	beq.n	15c08 <SX1276OnDio4Irq+0x18>
   15c02:	2b01      	cmp	r3, #1
   15c04:	d00c      	beq.n	15c20 <SX1276OnDio4Irq+0x30>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
   15c06:	e00e      	b.n	15c26 <SX1276OnDio4Irq+0x36>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   15c08:	4a09      	ldr	r2, [pc, #36]	; (15c30 <SX1276OnDio4Irq+0x40>)
   15c0a:	2386      	movs	r3, #134	; 0x86
   15c0c:	005b      	lsls	r3, r3, #1
   15c0e:	5cd3      	ldrb	r3, [r2, r3]
   15c10:	2b00      	cmp	r3, #0
   15c12:	d107      	bne.n	15c24 <SX1276OnDio4Irq+0x34>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   15c14:	4a06      	ldr	r2, [pc, #24]	; (15c30 <SX1276OnDio4Irq+0x40>)
   15c16:	2386      	movs	r3, #134	; 0x86
   15c18:	005b      	lsls	r3, r3, #1
   15c1a:	2101      	movs	r1, #1
   15c1c:	54d1      	strb	r1, [r2, r3]
        break;
   15c1e:	e001      	b.n	15c24 <SX1276OnDio4Irq+0x34>
        break;
   15c20:	46c0      	nop			; (mov r8, r8)
   15c22:	e000      	b.n	15c26 <SX1276OnDio4Irq+0x36>
        break;
   15c24:	46c0      	nop			; (mov r8, r8)
    }
}
   15c26:	46c0      	nop			; (mov r8, r8)
   15c28:	46bd      	mov	sp, r7
   15c2a:	b002      	add	sp, #8
   15c2c:	bd80      	pop	{r7, pc}
   15c2e:	46c0      	nop			; (mov r8, r8)
   15c30:	20001c5c 	.word	0x20001c5c

00015c34 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
   15c34:	b580      	push	{r7, lr}
   15c36:	b082      	sub	sp, #8
   15c38:	af00      	add	r7, sp, #0
   15c3a:	6078      	str	r0, [r7, #4]
    DelayMsMcu( ms );
   15c3c:	687b      	ldr	r3, [r7, #4]
   15c3e:	0018      	movs	r0, r3
   15c40:	4b02      	ldr	r3, [pc, #8]	; (15c4c <DelayMs+0x18>)
   15c42:	4798      	blx	r3
}
   15c44:	46c0      	nop			; (mov r8, r8)
   15c46:	46bd      	mov	sp, r7
   15c48:	b002      	add	sp, #8
   15c4a:	bd80      	pop	{r7, pc}
   15c4c:	00002c31 	.word	0x00002c31

00015c50 <GpioInit>:
 * \author    Gregory Cristian ( Semtech )
 */
#include "gpio-board.h"

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
   15c50:	b590      	push	{r4, r7, lr}
   15c52:	b085      	sub	sp, #20
   15c54:	af02      	add	r7, sp, #8
   15c56:	6078      	str	r0, [r7, #4]
   15c58:	000c      	movs	r4, r1
   15c5a:	0010      	movs	r0, r2
   15c5c:	0019      	movs	r1, r3
   15c5e:	1cfb      	adds	r3, r7, #3
   15c60:	1c22      	adds	r2, r4, #0
   15c62:	701a      	strb	r2, [r3, #0]
   15c64:	1cbb      	adds	r3, r7, #2
   15c66:	1c02      	adds	r2, r0, #0
   15c68:	701a      	strb	r2, [r3, #0]
   15c6a:	1c7b      	adds	r3, r7, #1
   15c6c:	1c0a      	adds	r2, r1, #0
   15c6e:	701a      	strb	r2, [r3, #0]
    GpioMcuInit( obj, pin, mode, config, type, value );
   15c70:	1c7b      	adds	r3, r7, #1
   15c72:	781c      	ldrb	r4, [r3, #0]
   15c74:	1cbb      	adds	r3, r7, #2
   15c76:	781a      	ldrb	r2, [r3, #0]
   15c78:	1cfb      	adds	r3, r7, #3
   15c7a:	2100      	movs	r1, #0
   15c7c:	5659      	ldrsb	r1, [r3, r1]
   15c7e:	6878      	ldr	r0, [r7, #4]
   15c80:	69fb      	ldr	r3, [r7, #28]
   15c82:	9301      	str	r3, [sp, #4]
   15c84:	2318      	movs	r3, #24
   15c86:	18fb      	adds	r3, r7, r3
   15c88:	781b      	ldrb	r3, [r3, #0]
   15c8a:	9300      	str	r3, [sp, #0]
   15c8c:	0023      	movs	r3, r4
   15c8e:	4c03      	ldr	r4, [pc, #12]	; (15c9c <GpioInit+0x4c>)
   15c90:	47a0      	blx	r4
}
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	46bd      	mov	sp, r7
   15c96:	b003      	add	sp, #12
   15c98:	bd90      	pop	{r4, r7, pc}
   15c9a:	46c0      	nop			; (mov r8, r8)
   15c9c:	000030f1 	.word	0x000030f1

00015ca0 <GpioWrite>:
{
    GpioMcuRemoveInterrupt( obj );
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
   15ca0:	b580      	push	{r7, lr}
   15ca2:	b082      	sub	sp, #8
   15ca4:	af00      	add	r7, sp, #0
   15ca6:	6078      	str	r0, [r7, #4]
   15ca8:	6039      	str	r1, [r7, #0]
    GpioMcuWrite( obj, value );
   15caa:	683a      	ldr	r2, [r7, #0]
   15cac:	687b      	ldr	r3, [r7, #4]
   15cae:	0011      	movs	r1, r2
   15cb0:	0018      	movs	r0, r3
   15cb2:	4b03      	ldr	r3, [pc, #12]	; (15cc0 <GpioWrite+0x20>)
   15cb4:	4798      	blx	r3
}
   15cb6:	46c0      	nop			; (mov r8, r8)
   15cb8:	46bd      	mov	sp, r7
   15cba:	b002      	add	sp, #8
   15cbc:	bd80      	pop	{r7, pc}
   15cbe:	46c0      	nop			; (mov r8, r8)
   15cc0:	0000318d 	.word	0x0000318d

00015cc4 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
   15cc4:	b082      	sub	sp, #8
   15cc6:	b580      	push	{r7, lr}
   15cc8:	b086      	sub	sp, #24
   15cca:	af00      	add	r7, sp, #0
   15ccc:	60f8      	str	r0, [r7, #12]
   15cce:	1d38      	adds	r0, r7, #4
   15cd0:	6001      	str	r1, [r0, #0]
   15cd2:	6042      	str	r2, [r0, #4]
   15cd4:	2204      	movs	r2, #4
   15cd6:	2120      	movs	r1, #32
   15cd8:	468c      	mov	ip, r1
   15cda:	44bc      	add	ip, r7
   15cdc:	4462      	add	r2, ip
   15cde:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
   15ce0:	2310      	movs	r3, #16
   15ce2:	18fb      	adds	r3, r7, r3
   15ce4:	2200      	movs	r2, #0
   15ce6:	601a      	str	r2, [r3, #0]
   15ce8:	2310      	movs	r3, #16
   15cea:	18fb      	adds	r3, r7, r3
   15cec:	2200      	movs	r2, #0
   15cee:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
   15cf0:	1d3b      	adds	r3, r7, #4
   15cf2:	681a      	ldr	r2, [r3, #0]
   15cf4:	2304      	movs	r3, #4
   15cf6:	2120      	movs	r1, #32
   15cf8:	468c      	mov	ip, r1
   15cfa:	44bc      	add	ip, r7
   15cfc:	4463      	add	r3, ip
   15cfe:	681b      	ldr	r3, [r3, #0]
   15d00:	18d2      	adds	r2, r2, r3
   15d02:	2310      	movs	r3, #16
   15d04:	18fb      	adds	r3, r7, r3
   15d06:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   15d08:	1d3b      	adds	r3, r7, #4
   15d0a:	2204      	movs	r2, #4
   15d0c:	5e9b      	ldrsh	r3, [r3, r2]
   15d0e:	b29a      	uxth	r2, r3
   15d10:	2304      	movs	r3, #4
   15d12:	2120      	movs	r1, #32
   15d14:	468c      	mov	ip, r1
   15d16:	44bc      	add	ip, r7
   15d18:	4463      	add	r3, ip
   15d1a:	2104      	movs	r1, #4
   15d1c:	5e5b      	ldrsh	r3, [r3, r1]
   15d1e:	b29b      	uxth	r3, r3
   15d20:	18d3      	adds	r3, r2, r3
   15d22:	b29b      	uxth	r3, r3
   15d24:	b21a      	sxth	r2, r3
   15d26:	2310      	movs	r3, #16
   15d28:	18fb      	adds	r3, r7, r3
   15d2a:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
   15d2c:	2310      	movs	r3, #16
   15d2e:	18fb      	adds	r3, r7, r3
   15d30:	2204      	movs	r2, #4
   15d32:	5e9b      	ldrsh	r3, [r3, r2]
   15d34:	4a11      	ldr	r2, [pc, #68]	; (15d7c <SysTimeAdd+0xb8>)
   15d36:	4293      	cmp	r3, r2
   15d38:	dd13      	ble.n	15d62 <SysTimeAdd+0x9e>
    {
        c.Seconds++;
   15d3a:	2310      	movs	r3, #16
   15d3c:	18fb      	adds	r3, r7, r3
   15d3e:	681b      	ldr	r3, [r3, #0]
   15d40:	1c5a      	adds	r2, r3, #1
   15d42:	2310      	movs	r3, #16
   15d44:	18fb      	adds	r3, r7, r3
   15d46:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
   15d48:	2310      	movs	r3, #16
   15d4a:	18fb      	adds	r3, r7, r3
   15d4c:	2204      	movs	r2, #4
   15d4e:	5e9b      	ldrsh	r3, [r3, r2]
   15d50:	b29b      	uxth	r3, r3
   15d52:	4a0b      	ldr	r2, [pc, #44]	; (15d80 <SysTimeAdd+0xbc>)
   15d54:	4694      	mov	ip, r2
   15d56:	4463      	add	r3, ip
   15d58:	b29b      	uxth	r3, r3
   15d5a:	b21a      	sxth	r2, r3
   15d5c:	2310      	movs	r3, #16
   15d5e:	18fb      	adds	r3, r7, r3
   15d60:	809a      	strh	r2, [r3, #4]
    }
    return c;
   15d62:	68fb      	ldr	r3, [r7, #12]
   15d64:	2210      	movs	r2, #16
   15d66:	18ba      	adds	r2, r7, r2
   15d68:	ca03      	ldmia	r2!, {r0, r1}
   15d6a:	c303      	stmia	r3!, {r0, r1}
}
   15d6c:	68f8      	ldr	r0, [r7, #12]
   15d6e:	46bd      	mov	sp, r7
   15d70:	b006      	add	sp, #24
   15d72:	bc80      	pop	{r7}
   15d74:	bc08      	pop	{r3}
   15d76:	b002      	add	sp, #8
   15d78:	4718      	bx	r3
   15d7a:	46c0      	nop			; (mov r8, r8)
   15d7c:	000003e7 	.word	0x000003e7
   15d80:	fffffc18 	.word	0xfffffc18

00015d84 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
   15d84:	b082      	sub	sp, #8
   15d86:	b580      	push	{r7, lr}
   15d88:	b086      	sub	sp, #24
   15d8a:	af00      	add	r7, sp, #0
   15d8c:	60f8      	str	r0, [r7, #12]
   15d8e:	1d38      	adds	r0, r7, #4
   15d90:	6001      	str	r1, [r0, #0]
   15d92:	6042      	str	r2, [r0, #4]
   15d94:	2204      	movs	r2, #4
   15d96:	2120      	movs	r1, #32
   15d98:	468c      	mov	ip, r1
   15d9a:	44bc      	add	ip, r7
   15d9c:	4462      	add	r2, ip
   15d9e:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
   15da0:	2310      	movs	r3, #16
   15da2:	18fb      	adds	r3, r7, r3
   15da4:	2200      	movs	r2, #0
   15da6:	601a      	str	r2, [r3, #0]
   15da8:	2310      	movs	r3, #16
   15daa:	18fb      	adds	r3, r7, r3
   15dac:	2200      	movs	r2, #0
   15dae:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
   15db0:	1d3b      	adds	r3, r7, #4
   15db2:	681a      	ldr	r2, [r3, #0]
   15db4:	2304      	movs	r3, #4
   15db6:	2120      	movs	r1, #32
   15db8:	468c      	mov	ip, r1
   15dba:	44bc      	add	ip, r7
   15dbc:	4463      	add	r3, ip
   15dbe:	681b      	ldr	r3, [r3, #0]
   15dc0:	1ad2      	subs	r2, r2, r3
   15dc2:	2310      	movs	r3, #16
   15dc4:	18fb      	adds	r3, r7, r3
   15dc6:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   15dc8:	1d3b      	adds	r3, r7, #4
   15dca:	2204      	movs	r2, #4
   15dcc:	5e9b      	ldrsh	r3, [r3, r2]
   15dce:	b29a      	uxth	r2, r3
   15dd0:	2304      	movs	r3, #4
   15dd2:	2120      	movs	r1, #32
   15dd4:	468c      	mov	ip, r1
   15dd6:	44bc      	add	ip, r7
   15dd8:	4463      	add	r3, ip
   15dda:	2104      	movs	r1, #4
   15ddc:	5e5b      	ldrsh	r3, [r3, r1]
   15dde:	b29b      	uxth	r3, r3
   15de0:	1ad3      	subs	r3, r2, r3
   15de2:	b29b      	uxth	r3, r3
   15de4:	b21a      	sxth	r2, r3
   15de6:	2310      	movs	r3, #16
   15de8:	18fb      	adds	r3, r7, r3
   15dea:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
   15dec:	2310      	movs	r3, #16
   15dee:	18fb      	adds	r3, r7, r3
   15df0:	2204      	movs	r2, #4
   15df2:	5e9b      	ldrsh	r3, [r3, r2]
   15df4:	2b00      	cmp	r3, #0
   15df6:	da14      	bge.n	15e22 <SysTimeSub+0x9e>
    {
        c.Seconds--;
   15df8:	2310      	movs	r3, #16
   15dfa:	18fb      	adds	r3, r7, r3
   15dfc:	681b      	ldr	r3, [r3, #0]
   15dfe:	1e5a      	subs	r2, r3, #1
   15e00:	2310      	movs	r3, #16
   15e02:	18fb      	adds	r3, r7, r3
   15e04:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
   15e06:	2310      	movs	r3, #16
   15e08:	18fb      	adds	r3, r7, r3
   15e0a:	2204      	movs	r2, #4
   15e0c:	5e9b      	ldrsh	r3, [r3, r2]
   15e0e:	b29b      	uxth	r3, r3
   15e10:	22fa      	movs	r2, #250	; 0xfa
   15e12:	0092      	lsls	r2, r2, #2
   15e14:	4694      	mov	ip, r2
   15e16:	4463      	add	r3, ip
   15e18:	b29b      	uxth	r3, r3
   15e1a:	b21a      	sxth	r2, r3
   15e1c:	2310      	movs	r3, #16
   15e1e:	18fb      	adds	r3, r7, r3
   15e20:	809a      	strh	r2, [r3, #4]
    }
    return c;
   15e22:	68fb      	ldr	r3, [r7, #12]
   15e24:	2210      	movs	r2, #16
   15e26:	18ba      	adds	r2, r7, r2
   15e28:	ca03      	ldmia	r2!, {r0, r1}
   15e2a:	c303      	stmia	r3!, {r0, r1}
}
   15e2c:	68f8      	ldr	r0, [r7, #12]
   15e2e:	46bd      	mov	sp, r7
   15e30:	b006      	add	sp, #24
   15e32:	bc80      	pop	{r7}
   15e34:	bc08      	pop	{r3}
   15e36:	b002      	add	sp, #8
   15e38:	4718      	bx	r3
	...

00015e3c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
   15e3c:	b590      	push	{r4, r7, lr}
   15e3e:	b089      	sub	sp, #36	; 0x24
   15e40:	af02      	add	r7, sp, #8
   15e42:	003b      	movs	r3, r7
   15e44:	6018      	str	r0, [r3, #0]
   15e46:	6059      	str	r1, [r3, #4]
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   15e48:	2308      	movs	r3, #8
   15e4a:	18fb      	adds	r3, r7, r3
   15e4c:	2200      	movs	r2, #0
   15e4e:	601a      	str	r2, [r3, #0]
   15e50:	2308      	movs	r3, #8
   15e52:	18fb      	adds	r3, r7, r3
   15e54:	2200      	movs	r2, #0
   15e56:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   15e58:	2308      	movs	r3, #8
   15e5a:	18fb      	adds	r3, r7, r3
   15e5c:	3304      	adds	r3, #4
   15e5e:	0018      	movs	r0, r3
   15e60:	4b11      	ldr	r3, [pc, #68]	; (15ea8 <SysTimeSet+0x6c>)
   15e62:	4798      	blx	r3
   15e64:	0002      	movs	r2, r0
   15e66:	2308      	movs	r3, #8
   15e68:	18fb      	adds	r3, r7, r3
   15e6a:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );
   15e6c:	2310      	movs	r3, #16
   15e6e:	18fc      	adds	r4, r7, r3
   15e70:	2308      	movs	r3, #8
   15e72:	18fb      	adds	r3, r7, r3
   15e74:	003a      	movs	r2, r7
   15e76:	4669      	mov	r1, sp
   15e78:	6858      	ldr	r0, [r3, #4]
   15e7a:	6008      	str	r0, [r1, #0]
   15e7c:	681b      	ldr	r3, [r3, #0]
   15e7e:	6811      	ldr	r1, [r2, #0]
   15e80:	6852      	ldr	r2, [r2, #4]
   15e82:	0020      	movs	r0, r4
   15e84:	4c09      	ldr	r4, [pc, #36]	; (15eac <SysTimeSet+0x70>)
   15e86:	47a0      	blx	r4

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
   15e88:	2310      	movs	r3, #16
   15e8a:	18fb      	adds	r3, r7, r3
   15e8c:	681a      	ldr	r2, [r3, #0]
   15e8e:	2310      	movs	r3, #16
   15e90:	18fb      	adds	r3, r7, r3
   15e92:	2104      	movs	r1, #4
   15e94:	5e5b      	ldrsh	r3, [r3, r1]
   15e96:	0019      	movs	r1, r3
   15e98:	0010      	movs	r0, r2
   15e9a:	4b05      	ldr	r3, [pc, #20]	; (15eb0 <SysTimeSet+0x74>)
   15e9c:	4798      	blx	r3
}
   15e9e:	46c0      	nop			; (mov r8, r8)
   15ea0:	46bd      	mov	sp, r7
   15ea2:	b007      	add	sp, #28
   15ea4:	bd90      	pop	{r4, r7, pc}
   15ea6:	46c0      	nop			; (mov r8, r8)
   15ea8:	000033a5 	.word	0x000033a5
   15eac:	00015d85 	.word	0x00015d85
   15eb0:	000033e9 	.word	0x000033e9

00015eb4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
   15eb4:	b590      	push	{r4, r7, lr}
   15eb6:	b08b      	sub	sp, #44	; 0x2c
   15eb8:	af02      	add	r7, sp, #8
   15eba:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   15ebc:	2318      	movs	r3, #24
   15ebe:	18fb      	adds	r3, r7, r3
   15ec0:	2200      	movs	r2, #0
   15ec2:	601a      	str	r2, [r3, #0]
   15ec4:	2318      	movs	r3, #24
   15ec6:	18fb      	adds	r3, r7, r3
   15ec8:	2200      	movs	r2, #0
   15eca:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
   15ecc:	2310      	movs	r3, #16
   15ece:	18fb      	adds	r3, r7, r3
   15ed0:	2200      	movs	r2, #0
   15ed2:	601a      	str	r2, [r3, #0]
   15ed4:	2310      	movs	r3, #16
   15ed6:	18fb      	adds	r3, r7, r3
   15ed8:	2200      	movs	r2, #0
   15eda:	809a      	strh	r2, [r3, #4]
    SysTime_t deltaTime;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   15edc:	2318      	movs	r3, #24
   15ede:	18fb      	adds	r3, r7, r3
   15ee0:	3304      	adds	r3, #4
   15ee2:	0018      	movs	r0, r3
   15ee4:	4b13      	ldr	r3, [pc, #76]	; (15f34 <SysTimeGet+0x80>)
   15ee6:	4798      	blx	r3
   15ee8:	0002      	movs	r2, r0
   15eea:	2318      	movs	r3, #24
   15eec:	18fb      	adds	r3, r7, r3
   15eee:	601a      	str	r2, [r3, #0]

    RtcBkupRead( &deltaTime.Seconds, ( uint32_t* )&deltaTime.SubSeconds );
   15ef0:	2308      	movs	r3, #8
   15ef2:	18fb      	adds	r3, r7, r3
   15ef4:	1d1a      	adds	r2, r3, #4
   15ef6:	2308      	movs	r3, #8
   15ef8:	18fb      	adds	r3, r7, r3
   15efa:	0011      	movs	r1, r2
   15efc:	0018      	movs	r0, r3
   15efe:	4b0e      	ldr	r3, [pc, #56]	; (15f38 <SysTimeGet+0x84>)
   15f00:	4798      	blx	r3

    sysTime = SysTimeAdd( deltaTime, calendarTime );
   15f02:	2310      	movs	r3, #16
   15f04:	18fc      	adds	r4, r7, r3
   15f06:	2318      	movs	r3, #24
   15f08:	18fb      	adds	r3, r7, r3
   15f0a:	2208      	movs	r2, #8
   15f0c:	18ba      	adds	r2, r7, r2
   15f0e:	4669      	mov	r1, sp
   15f10:	6858      	ldr	r0, [r3, #4]
   15f12:	6008      	str	r0, [r1, #0]
   15f14:	681b      	ldr	r3, [r3, #0]
   15f16:	6811      	ldr	r1, [r2, #0]
   15f18:	6852      	ldr	r2, [r2, #4]
   15f1a:	0020      	movs	r0, r4
   15f1c:	4c07      	ldr	r4, [pc, #28]	; (15f3c <SysTimeGet+0x88>)
   15f1e:	47a0      	blx	r4

    return sysTime;
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	2210      	movs	r2, #16
   15f24:	18ba      	adds	r2, r7, r2
   15f26:	ca03      	ldmia	r2!, {r0, r1}
   15f28:	c303      	stmia	r3!, {r0, r1}
}
   15f2a:	6878      	ldr	r0, [r7, #4]
   15f2c:	46bd      	mov	sp, r7
   15f2e:	b009      	add	sp, #36	; 0x24
   15f30:	bd90      	pop	{r4, r7, pc}
   15f32:	46c0      	nop			; (mov r8, r8)
   15f34:	000033a5 	.word	0x000033a5
   15f38:	00003429 	.word	0x00003429
   15f3c:	00015cc5 	.word	0x00015cc5

00015f40 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
   15f40:	b580      	push	{r7, lr}
   15f42:	b084      	sub	sp, #16
   15f44:	af00      	add	r7, sp, #0
   15f46:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   15f48:	2308      	movs	r3, #8
   15f4a:	18fb      	adds	r3, r7, r3
   15f4c:	2200      	movs	r2, #0
   15f4e:	601a      	str	r2, [r3, #0]
   15f50:	2308      	movs	r3, #8
   15f52:	18fb      	adds	r3, r7, r3
   15f54:	2200      	movs	r2, #0
   15f56:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   15f58:	2308      	movs	r3, #8
   15f5a:	18fb      	adds	r3, r7, r3
   15f5c:	3304      	adds	r3, #4
   15f5e:	0018      	movs	r0, r3
   15f60:	4b07      	ldr	r3, [pc, #28]	; (15f80 <SysTimeGetMcuTime+0x40>)
   15f62:	4798      	blx	r3
   15f64:	0002      	movs	r2, r0
   15f66:	2308      	movs	r3, #8
   15f68:	18fb      	adds	r3, r7, r3
   15f6a:	601a      	str	r2, [r3, #0]

    return calendarTime;
   15f6c:	687b      	ldr	r3, [r7, #4]
   15f6e:	2208      	movs	r2, #8
   15f70:	18ba      	adds	r2, r7, r2
   15f72:	ca03      	ldmia	r2!, {r0, r1}
   15f74:	c303      	stmia	r3!, {r0, r1}
}
   15f76:	6878      	ldr	r0, [r7, #4]
   15f78:	46bd      	mov	sp, r7
   15f7a:	b004      	add	sp, #16
   15f7c:	bd80      	pop	{r7, pc}
   15f7e:	46c0      	nop			; (mov r8, r8)
   15f80:	000033a5 	.word	0x000033a5

00015f84 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
   15f84:	b580      	push	{r7, lr}
   15f86:	b082      	sub	sp, #8
   15f88:	af00      	add	r7, sp, #0
   15f8a:	6078      	str	r0, [r7, #4]
   15f8c:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	2200      	movs	r2, #0
   15f92:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	2200      	movs	r2, #0
   15f98:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
   15f9a:	687b      	ldr	r3, [r7, #4]
   15f9c:	2200      	movs	r2, #0
   15f9e:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	2200      	movs	r2, #0
   15fa4:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
   15fa6:	687b      	ldr	r3, [r7, #4]
   15fa8:	683a      	ldr	r2, [r7, #0]
   15faa:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	2200      	movs	r2, #0
   15fb0:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
   15fb2:	687b      	ldr	r3, [r7, #4]
   15fb4:	2200      	movs	r2, #0
   15fb6:	615a      	str	r2, [r3, #20]
}
   15fb8:	46c0      	nop			; (mov r8, r8)
   15fba:	46bd      	mov	sp, r7
   15fbc:	b002      	add	sp, #8
   15fbe:	bd80      	pop	{r7, pc}

00015fc0 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
   15fc0:	b580      	push	{r7, lr}
   15fc2:	b084      	sub	sp, #16
   15fc4:	af00      	add	r7, sp, #0
   15fc6:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
   15fc8:	2300      	movs	r3, #0
   15fca:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
   15fcc:	2308      	movs	r3, #8
   15fce:	18fb      	adds	r3, r7, r3
   15fd0:	0018      	movs	r0, r3
   15fd2:	4b24      	ldr	r3, [pc, #144]	; (16064 <TimerStart+0xa4>)
   15fd4:	4798      	blx	r3

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   15fd6:	687b      	ldr	r3, [r7, #4]
   15fd8:	2b00      	cmp	r3, #0
   15fda:	d005      	beq.n	15fe8 <TimerStart+0x28>
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	0018      	movs	r0, r3
   15fe0:	4b21      	ldr	r3, [pc, #132]	; (16068 <TimerStart+0xa8>)
   15fe2:	4798      	blx	r3
   15fe4:	1e03      	subs	r3, r0, #0
   15fe6:	d005      	beq.n	15ff4 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
   15fe8:	2308      	movs	r3, #8
   15fea:	18fb      	adds	r3, r7, r3
   15fec:	0018      	movs	r0, r3
   15fee:	4b1f      	ldr	r3, [pc, #124]	; (1606c <TimerStart+0xac>)
   15ff0:	4798      	blx	r3
   15ff2:	e033      	b.n	1605c <TimerStart+0x9c>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	685a      	ldr	r2, [r3, #4]
   15ff8:	687b      	ldr	r3, [r7, #4]
   15ffa:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
   15ffc:	687b      	ldr	r3, [r7, #4]
   15ffe:	2201      	movs	r2, #1
   16000:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
   16002:	687b      	ldr	r3, [r7, #4]
   16004:	2200      	movs	r2, #0
   16006:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
   16008:	4b19      	ldr	r3, [pc, #100]	; (16070 <TimerStart+0xb0>)
   1600a:	681b      	ldr	r3, [r3, #0]
   1600c:	2b00      	cmp	r3, #0
   1600e:	d106      	bne.n	1601e <TimerStart+0x5e>
    {
        RtcSetTimerContext( );
   16010:	4b18      	ldr	r3, [pc, #96]	; (16074 <TimerStart+0xb4>)
   16012:	4798      	blx	r3
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
   16014:	687b      	ldr	r3, [r7, #4]
   16016:	0018      	movs	r0, r3
   16018:	4b17      	ldr	r3, [pc, #92]	; (16078 <TimerStart+0xb8>)
   1601a:	4798      	blx	r3
   1601c:	e019      	b.n	16052 <TimerStart+0x92>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
   1601e:	4b17      	ldr	r3, [pc, #92]	; (1607c <TimerStart+0xbc>)
   16020:	4798      	blx	r3
   16022:	0003      	movs	r3, r0
   16024:	60fb      	str	r3, [r7, #12]
        obj->Timestamp += elapsedTime;
   16026:	687b      	ldr	r3, [r7, #4]
   16028:	681a      	ldr	r2, [r3, #0]
   1602a:	68fb      	ldr	r3, [r7, #12]
   1602c:	18d2      	adds	r2, r2, r3
   1602e:	687b      	ldr	r3, [r7, #4]
   16030:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	681a      	ldr	r2, [r3, #0]
   16036:	4b0e      	ldr	r3, [pc, #56]	; (16070 <TimerStart+0xb0>)
   16038:	681b      	ldr	r3, [r3, #0]
   1603a:	681b      	ldr	r3, [r3, #0]
   1603c:	429a      	cmp	r2, r3
   1603e:	d204      	bcs.n	1604a <TimerStart+0x8a>
        {
            TimerInsertNewHeadTimer( obj );
   16040:	687b      	ldr	r3, [r7, #4]
   16042:	0018      	movs	r0, r3
   16044:	4b0c      	ldr	r3, [pc, #48]	; (16078 <TimerStart+0xb8>)
   16046:	4798      	blx	r3
   16048:	e003      	b.n	16052 <TimerStart+0x92>
        }
        else
        {
            TimerInsertTimer( obj );
   1604a:	687b      	ldr	r3, [r7, #4]
   1604c:	0018      	movs	r0, r3
   1604e:	4b0c      	ldr	r3, [pc, #48]	; (16080 <TimerStart+0xc0>)
   16050:	4798      	blx	r3
        }
    }
    CRITICAL_SECTION_END( );
   16052:	2308      	movs	r3, #8
   16054:	18fb      	adds	r3, r7, r3
   16056:	0018      	movs	r0, r3
   16058:	4b04      	ldr	r3, [pc, #16]	; (1606c <TimerStart+0xac>)
   1605a:	4798      	blx	r3
}
   1605c:	46bd      	mov	sp, r7
   1605e:	b004      	add	sp, #16
   16060:	bd80      	pop	{r7, pc}
   16062:	46c0      	nop			; (mov r8, r8)
   16064:	00002a65 	.word	0x00002a65
   16068:	00016351 	.word	0x00016351
   1606c:	00002a83 	.word	0x00002a83
   16070:	200019d4 	.word	0x200019d4
   16074:	0000322d 	.word	0x0000322d
   16078:	000160e1 	.word	0x000160e1
   1607c:	00003385 	.word	0x00003385
   16080:	00016085 	.word	0x00016085

00016084 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
   16084:	b580      	push	{r7, lr}
   16086:	b084      	sub	sp, #16
   16088:	af00      	add	r7, sp, #0
   1608a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   1608c:	4b13      	ldr	r3, [pc, #76]	; (160dc <TimerInsertTimer+0x58>)
   1608e:	681b      	ldr	r3, [r3, #0]
   16090:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
   16092:	4b12      	ldr	r3, [pc, #72]	; (160dc <TimerInsertTimer+0x58>)
   16094:	681b      	ldr	r3, [r3, #0]
   16096:	695b      	ldr	r3, [r3, #20]
   16098:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
   1609a:	e012      	b.n	160c2 <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
   1609c:	687b      	ldr	r3, [r7, #4]
   1609e:	681a      	ldr	r2, [r3, #0]
   160a0:	68bb      	ldr	r3, [r7, #8]
   160a2:	681b      	ldr	r3, [r3, #0]
   160a4:	429a      	cmp	r2, r3
   160a6:	d905      	bls.n	160b4 <TimerInsertTimer+0x30>
        {
            cur = next;
   160a8:	68bb      	ldr	r3, [r7, #8]
   160aa:	60fb      	str	r3, [r7, #12]
            next = next->Next;
   160ac:	68bb      	ldr	r3, [r7, #8]
   160ae:	695b      	ldr	r3, [r3, #20]
   160b0:	60bb      	str	r3, [r7, #8]
   160b2:	e006      	b.n	160c2 <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
   160b4:	68fb      	ldr	r3, [r7, #12]
   160b6:	687a      	ldr	r2, [r7, #4]
   160b8:	615a      	str	r2, [r3, #20]
            obj->Next = next;
   160ba:	687b      	ldr	r3, [r7, #4]
   160bc:	68ba      	ldr	r2, [r7, #8]
   160be:	615a      	str	r2, [r3, #20]
            return;
   160c0:	e009      	b.n	160d6 <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
   160c2:	68fb      	ldr	r3, [r7, #12]
   160c4:	695b      	ldr	r3, [r3, #20]
   160c6:	2b00      	cmp	r3, #0
   160c8:	d1e8      	bne.n	1609c <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
   160ca:	68fb      	ldr	r3, [r7, #12]
   160cc:	687a      	ldr	r2, [r7, #4]
   160ce:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
   160d0:	687b      	ldr	r3, [r7, #4]
   160d2:	2200      	movs	r2, #0
   160d4:	615a      	str	r2, [r3, #20]
}
   160d6:	46bd      	mov	sp, r7
   160d8:	b004      	add	sp, #16
   160da:	bd80      	pop	{r7, pc}
   160dc:	200019d4 	.word	0x200019d4

000160e0 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
   160e0:	b580      	push	{r7, lr}
   160e2:	b084      	sub	sp, #16
   160e4:	af00      	add	r7, sp, #0
   160e6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   160e8:	4b0b      	ldr	r3, [pc, #44]	; (16118 <TimerInsertNewHeadTimer+0x38>)
   160ea:	681b      	ldr	r3, [r3, #0]
   160ec:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
   160ee:	68fb      	ldr	r3, [r7, #12]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d002      	beq.n	160fa <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
   160f4:	68fb      	ldr	r3, [r7, #12]
   160f6:	2200      	movs	r2, #0
   160f8:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
   160fa:	687b      	ldr	r3, [r7, #4]
   160fc:	68fa      	ldr	r2, [r7, #12]
   160fe:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
   16100:	4b05      	ldr	r3, [pc, #20]	; (16118 <TimerInsertNewHeadTimer+0x38>)
   16102:	687a      	ldr	r2, [r7, #4]
   16104:	601a      	str	r2, [r3, #0]
    TimerSetTimeout( TimerListHead );
   16106:	4b04      	ldr	r3, [pc, #16]	; (16118 <TimerInsertNewHeadTimer+0x38>)
   16108:	681b      	ldr	r3, [r3, #0]
   1610a:	0018      	movs	r0, r3
   1610c:	4b03      	ldr	r3, [pc, #12]	; (1611c <TimerInsertNewHeadTimer+0x3c>)
   1610e:	4798      	blx	r3
}
   16110:	46c0      	nop			; (mov r8, r8)
   16112:	46bd      	mov	sp, r7
   16114:	b004      	add	sp, #16
   16116:	bd80      	pop	{r7, pc}
   16118:	200019d4 	.word	0x200019d4
   1611c:	00016449 	.word	0x00016449

00016120 <TimerIsStarted>:

bool TimerIsStarted( TimerEvent_t *obj )
{
   16120:	b580      	push	{r7, lr}
   16122:	b082      	sub	sp, #8
   16124:	af00      	add	r7, sp, #0
   16126:	6078      	str	r0, [r7, #4]
    return obj->IsStarted;
   16128:	687b      	ldr	r3, [r7, #4]
   1612a:	7a1b      	ldrb	r3, [r3, #8]
}
   1612c:	0018      	movs	r0, r3
   1612e:	46bd      	mov	sp, r7
   16130:	b002      	add	sp, #8
   16132:	bd80      	pop	{r7, pc}

00016134 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
   16134:	b590      	push	{r4, r7, lr}
   16136:	b087      	sub	sp, #28
   16138:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
   1613a:	4b3f      	ldr	r3, [pc, #252]	; (16238 <TimerIrqHandler+0x104>)
   1613c:	4798      	blx	r3
   1613e:	0003      	movs	r3, r0
   16140:	613b      	str	r3, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
   16142:	4b3e      	ldr	r3, [pc, #248]	; (1623c <TimerIrqHandler+0x108>)
   16144:	4798      	blx	r3
   16146:	0003      	movs	r3, r0
   16148:	60fb      	str	r3, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
   1614a:	68fa      	ldr	r2, [r7, #12]
   1614c:	693b      	ldr	r3, [r7, #16]
   1614e:	1ad3      	subs	r3, r2, r3
   16150:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
   16152:	4b3b      	ldr	r3, [pc, #236]	; (16240 <TimerIrqHandler+0x10c>)
   16154:	681b      	ldr	r3, [r3, #0]
   16156:	2b00      	cmp	r3, #0
   16158:	d01c      	beq.n	16194 <TimerIrqHandler+0x60>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1615a:	4b39      	ldr	r3, [pc, #228]	; (16240 <TimerIrqHandler+0x10c>)
   1615c:	681b      	ldr	r3, [r3, #0]
   1615e:	617b      	str	r3, [r7, #20]
   16160:	e014      	b.n	1618c <TimerIrqHandler+0x58>
        {
            next = cur->Next;
   16162:	697b      	ldr	r3, [r7, #20]
   16164:	695b      	ldr	r3, [r3, #20]
   16166:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
   16168:	687b      	ldr	r3, [r7, #4]
   1616a:	681a      	ldr	r2, [r3, #0]
   1616c:	68bb      	ldr	r3, [r7, #8]
   1616e:	429a      	cmp	r2, r3
   16170:	d906      	bls.n	16180 <TimerIrqHandler+0x4c>
            {
                next->Timestamp -= deltaContext;
   16172:	687b      	ldr	r3, [r7, #4]
   16174:	681a      	ldr	r2, [r3, #0]
   16176:	68bb      	ldr	r3, [r7, #8]
   16178:	1ad2      	subs	r2, r2, r3
   1617a:	687b      	ldr	r3, [r7, #4]
   1617c:	601a      	str	r2, [r3, #0]
   1617e:	e002      	b.n	16186 <TimerIrqHandler+0x52>
            }
            else
            {
                next->Timestamp = 0;
   16180:	687b      	ldr	r3, [r7, #4]
   16182:	2200      	movs	r2, #0
   16184:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   16186:	697b      	ldr	r3, [r7, #20]
   16188:	695b      	ldr	r3, [r3, #20]
   1618a:	617b      	str	r3, [r7, #20]
   1618c:	697b      	ldr	r3, [r7, #20]
   1618e:	695b      	ldr	r3, [r3, #20]
   16190:	2b00      	cmp	r3, #0
   16192:	d1e6      	bne.n	16162 <TimerIrqHandler+0x2e>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
   16194:	4b2a      	ldr	r3, [pc, #168]	; (16240 <TimerIrqHandler+0x10c>)
   16196:	681b      	ldr	r3, [r3, #0]
   16198:	2b00      	cmp	r3, #0
   1619a:	d02c      	beq.n	161f6 <TimerIrqHandler+0xc2>
    {
        cur = TimerListHead;
   1619c:	4b28      	ldr	r3, [pc, #160]	; (16240 <TimerIrqHandler+0x10c>)
   1619e:	681b      	ldr	r3, [r3, #0]
   161a0:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
   161a2:	4b27      	ldr	r3, [pc, #156]	; (16240 <TimerIrqHandler+0x10c>)
   161a4:	681b      	ldr	r3, [r3, #0]
   161a6:	695a      	ldr	r2, [r3, #20]
   161a8:	4b25      	ldr	r3, [pc, #148]	; (16240 <TimerIrqHandler+0x10c>)
   161aa:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
   161ac:	697b      	ldr	r3, [r7, #20]
   161ae:	2200      	movs	r2, #0
   161b0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   161b2:	697b      	ldr	r3, [r7, #20]
   161b4:	68db      	ldr	r3, [r3, #12]
   161b6:	2b00      	cmp	r3, #0
   161b8:	d100      	bne.n	161bc <TimerIrqHandler+0x88>
   161ba:	e7fe      	b.n	161ba <TimerIrqHandler+0x86>
   161bc:	697b      	ldr	r3, [r7, #20]
   161be:	68da      	ldr	r2, [r3, #12]
   161c0:	697b      	ldr	r3, [r7, #20]
   161c2:	691b      	ldr	r3, [r3, #16]
   161c4:	0018      	movs	r0, r3
   161c6:	4790      	blx	r2
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   161c8:	e015      	b.n	161f6 <TimerIrqHandler+0xc2>
    {
        cur = TimerListHead;
   161ca:	4b1d      	ldr	r3, [pc, #116]	; (16240 <TimerIrqHandler+0x10c>)
   161cc:	681b      	ldr	r3, [r3, #0]
   161ce:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
   161d0:	4b1b      	ldr	r3, [pc, #108]	; (16240 <TimerIrqHandler+0x10c>)
   161d2:	681b      	ldr	r3, [r3, #0]
   161d4:	695a      	ldr	r2, [r3, #20]
   161d6:	4b1a      	ldr	r3, [pc, #104]	; (16240 <TimerIrqHandler+0x10c>)
   161d8:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
   161da:	697b      	ldr	r3, [r7, #20]
   161dc:	2200      	movs	r2, #0
   161de:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   161e0:	697b      	ldr	r3, [r7, #20]
   161e2:	68db      	ldr	r3, [r3, #12]
   161e4:	2b00      	cmp	r3, #0
   161e6:	d100      	bne.n	161ea <TimerIrqHandler+0xb6>
   161e8:	e7fe      	b.n	161e8 <TimerIrqHandler+0xb4>
   161ea:	697b      	ldr	r3, [r7, #20]
   161ec:	68da      	ldr	r2, [r3, #12]
   161ee:	697b      	ldr	r3, [r7, #20]
   161f0:	691b      	ldr	r3, [r3, #16]
   161f2:	0018      	movs	r0, r3
   161f4:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   161f6:	4b12      	ldr	r3, [pc, #72]	; (16240 <TimerIrqHandler+0x10c>)
   161f8:	681b      	ldr	r3, [r3, #0]
   161fa:	2b00      	cmp	r3, #0
   161fc:	d007      	beq.n	1620e <TimerIrqHandler+0xda>
   161fe:	4b10      	ldr	r3, [pc, #64]	; (16240 <TimerIrqHandler+0x10c>)
   16200:	681b      	ldr	r3, [r3, #0]
   16202:	681c      	ldr	r4, [r3, #0]
   16204:	4b0f      	ldr	r3, [pc, #60]	; (16244 <TimerIrqHandler+0x110>)
   16206:	4798      	blx	r3
   16208:	0003      	movs	r3, r0
   1620a:	429c      	cmp	r4, r3
   1620c:	d3dd      	bcc.n	161ca <TimerIrqHandler+0x96>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1620e:	4b0c      	ldr	r3, [pc, #48]	; (16240 <TimerIrqHandler+0x10c>)
   16210:	681b      	ldr	r3, [r3, #0]
   16212:	2b00      	cmp	r3, #0
   16214:	d00c      	beq.n	16230 <TimerIrqHandler+0xfc>
   16216:	4b0a      	ldr	r3, [pc, #40]	; (16240 <TimerIrqHandler+0x10c>)
   16218:	681b      	ldr	r3, [r3, #0]
   1621a:	7a5b      	ldrb	r3, [r3, #9]
   1621c:	2201      	movs	r2, #1
   1621e:	4053      	eors	r3, r2
   16220:	b2db      	uxtb	r3, r3
   16222:	2b00      	cmp	r3, #0
   16224:	d004      	beq.n	16230 <TimerIrqHandler+0xfc>
    {
        TimerSetTimeout( TimerListHead );
   16226:	4b06      	ldr	r3, [pc, #24]	; (16240 <TimerIrqHandler+0x10c>)
   16228:	681b      	ldr	r3, [r3, #0]
   1622a:	0018      	movs	r0, r3
   1622c:	4b06      	ldr	r3, [pc, #24]	; (16248 <TimerIrqHandler+0x114>)
   1622e:	4798      	blx	r3
    }
}
   16230:	46c0      	nop			; (mov r8, r8)
   16232:	46bd      	mov	sp, r7
   16234:	b007      	add	sp, #28
   16236:	bd90      	pop	{r4, r7, pc}
   16238:	0000324d 	.word	0x0000324d
   1623c:	0000322d 	.word	0x0000322d
   16240:	200019d4 	.word	0x200019d4
   16244:	00003385 	.word	0x00003385
   16248:	00016449 	.word	0x00016449

0001624c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
   1624c:	b580      	push	{r7, lr}
   1624e:	b086      	sub	sp, #24
   16250:	af00      	add	r7, sp, #0
   16252:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
   16254:	230c      	movs	r3, #12
   16256:	18fb      	adds	r3, r7, r3
   16258:	0018      	movs	r0, r3
   1625a:	4b38      	ldr	r3, [pc, #224]	; (1633c <TimerStop+0xf0>)
   1625c:	4798      	blx	r3

    TimerEvent_t* prev = TimerListHead;
   1625e:	4b38      	ldr	r3, [pc, #224]	; (16340 <TimerStop+0xf4>)
   16260:	681b      	ldr	r3, [r3, #0]
   16262:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
   16264:	4b36      	ldr	r3, [pc, #216]	; (16340 <TimerStop+0xf4>)
   16266:	681b      	ldr	r3, [r3, #0]
   16268:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   1626a:	4b35      	ldr	r3, [pc, #212]	; (16340 <TimerStop+0xf4>)
   1626c:	681b      	ldr	r3, [r3, #0]
   1626e:	2b00      	cmp	r3, #0
   16270:	d002      	beq.n	16278 <TimerStop+0x2c>
   16272:	687b      	ldr	r3, [r7, #4]
   16274:	2b00      	cmp	r3, #0
   16276:	d105      	bne.n	16284 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
   16278:	230c      	movs	r3, #12
   1627a:	18fb      	adds	r3, r7, r3
   1627c:	0018      	movs	r0, r3
   1627e:	4b31      	ldr	r3, [pc, #196]	; (16344 <TimerStop+0xf8>)
   16280:	4798      	blx	r3
   16282:	e057      	b.n	16334 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
   16284:	687b      	ldr	r3, [r7, #4]
   16286:	2200      	movs	r2, #0
   16288:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
   1628a:	4b2d      	ldr	r3, [pc, #180]	; (16340 <TimerStop+0xf4>)
   1628c:	681a      	ldr	r2, [r3, #0]
   1628e:	687b      	ldr	r3, [r7, #4]
   16290:	429a      	cmp	r2, r3
   16292:	d147      	bne.n	16324 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   16294:	4b2a      	ldr	r3, [pc, #168]	; (16340 <TimerStop+0xf4>)
   16296:	681b      	ldr	r3, [r3, #0]
   16298:	7a5b      	ldrb	r3, [r3, #9]
   1629a:	2b00      	cmp	r3, #0
   1629c:	d019      	beq.n	162d2 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
   1629e:	4b28      	ldr	r3, [pc, #160]	; (16340 <TimerStop+0xf4>)
   162a0:	681b      	ldr	r3, [r3, #0]
   162a2:	2200      	movs	r2, #0
   162a4:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   162a6:	4b26      	ldr	r3, [pc, #152]	; (16340 <TimerStop+0xf4>)
   162a8:	681b      	ldr	r3, [r3, #0]
   162aa:	695b      	ldr	r3, [r3, #20]
   162ac:	2b00      	cmp	r3, #0
   162ae:	d00a      	beq.n	162c6 <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
   162b0:	4b23      	ldr	r3, [pc, #140]	; (16340 <TimerStop+0xf4>)
   162b2:	681b      	ldr	r3, [r3, #0]
   162b4:	695a      	ldr	r2, [r3, #20]
   162b6:	4b22      	ldr	r3, [pc, #136]	; (16340 <TimerStop+0xf4>)
   162b8:	601a      	str	r2, [r3, #0]
                TimerSetTimeout( TimerListHead );
   162ba:	4b21      	ldr	r3, [pc, #132]	; (16340 <TimerStop+0xf4>)
   162bc:	681b      	ldr	r3, [r3, #0]
   162be:	0018      	movs	r0, r3
   162c0:	4b21      	ldr	r3, [pc, #132]	; (16348 <TimerStop+0xfc>)
   162c2:	4798      	blx	r3
   162c4:	e031      	b.n	1632a <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
   162c6:	4b21      	ldr	r3, [pc, #132]	; (1634c <TimerStop+0x100>)
   162c8:	4798      	blx	r3
                TimerListHead = NULL;
   162ca:	4b1d      	ldr	r3, [pc, #116]	; (16340 <TimerStop+0xf4>)
   162cc:	2200      	movs	r2, #0
   162ce:	601a      	str	r2, [r3, #0]
   162d0:	e02b      	b.n	1632a <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
   162d2:	4b1b      	ldr	r3, [pc, #108]	; (16340 <TimerStop+0xf4>)
   162d4:	681b      	ldr	r3, [r3, #0]
   162d6:	695b      	ldr	r3, [r3, #20]
   162d8:	2b00      	cmp	r3, #0
   162da:	d005      	beq.n	162e8 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
   162dc:	4b18      	ldr	r3, [pc, #96]	; (16340 <TimerStop+0xf4>)
   162de:	681b      	ldr	r3, [r3, #0]
   162e0:	695a      	ldr	r2, [r3, #20]
   162e2:	4b17      	ldr	r3, [pc, #92]	; (16340 <TimerStop+0xf4>)
   162e4:	601a      	str	r2, [r3, #0]
   162e6:	e020      	b.n	1632a <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
   162e8:	4b15      	ldr	r3, [pc, #84]	; (16340 <TimerStop+0xf4>)
   162ea:	2200      	movs	r2, #0
   162ec:	601a      	str	r2, [r3, #0]
   162ee:	e01c      	b.n	1632a <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
   162f0:	693a      	ldr	r2, [r7, #16]
   162f2:	687b      	ldr	r3, [r7, #4]
   162f4:	429a      	cmp	r2, r3
   162f6:	d110      	bne.n	1631a <TimerStop+0xce>
            {
                if( cur->Next != NULL )
   162f8:	693b      	ldr	r3, [r7, #16]
   162fa:	695b      	ldr	r3, [r3, #20]
   162fc:	2b00      	cmp	r3, #0
   162fe:	d006      	beq.n	1630e <TimerStop+0xc2>
                {
                    cur = cur->Next;
   16300:	693b      	ldr	r3, [r7, #16]
   16302:	695b      	ldr	r3, [r3, #20]
   16304:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
   16306:	697b      	ldr	r3, [r7, #20]
   16308:	693a      	ldr	r2, [r7, #16]
   1630a:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
   1630c:	e00d      	b.n	1632a <TimerStop+0xde>
                    cur = NULL;
   1630e:	2300      	movs	r3, #0
   16310:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
   16312:	697b      	ldr	r3, [r7, #20]
   16314:	693a      	ldr	r2, [r7, #16]
   16316:	615a      	str	r2, [r3, #20]
                break;
   16318:	e007      	b.n	1632a <TimerStop+0xde>
            }
            else
            {
                prev = cur;
   1631a:	693b      	ldr	r3, [r7, #16]
   1631c:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
   1631e:	693b      	ldr	r3, [r7, #16]
   16320:	695b      	ldr	r3, [r3, #20]
   16322:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
   16324:	693b      	ldr	r3, [r7, #16]
   16326:	2b00      	cmp	r3, #0
   16328:	d1e2      	bne.n	162f0 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
   1632a:	230c      	movs	r3, #12
   1632c:	18fb      	adds	r3, r7, r3
   1632e:	0018      	movs	r0, r3
   16330:	4b04      	ldr	r3, [pc, #16]	; (16344 <TimerStop+0xf8>)
   16332:	4798      	blx	r3
}
   16334:	46bd      	mov	sp, r7
   16336:	b006      	add	sp, #24
   16338:	bd80      	pop	{r7, pc}
   1633a:	46c0      	nop			; (mov r8, r8)
   1633c:	00002a65 	.word	0x00002a65
   16340:	200019d4 	.word	0x200019d4
   16344:	00002a83 	.word	0x00002a83
   16348:	00016449 	.word	0x00016449
   1634c:	000032cd 	.word	0x000032cd

00016350 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
   16350:	b580      	push	{r7, lr}
   16352:	b084      	sub	sp, #16
   16354:	af00      	add	r7, sp, #0
   16356:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
   16358:	4b0a      	ldr	r3, [pc, #40]	; (16384 <TimerExists+0x34>)
   1635a:	681b      	ldr	r3, [r3, #0]
   1635c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
   1635e:	e008      	b.n	16372 <TimerExists+0x22>
    {
        if( cur == obj )
   16360:	68fa      	ldr	r2, [r7, #12]
   16362:	687b      	ldr	r3, [r7, #4]
   16364:	429a      	cmp	r2, r3
   16366:	d101      	bne.n	1636c <TimerExists+0x1c>
        {
            return true;
   16368:	2301      	movs	r3, #1
   1636a:	e006      	b.n	1637a <TimerExists+0x2a>
        }
        cur = cur->Next;
   1636c:	68fb      	ldr	r3, [r7, #12]
   1636e:	695b      	ldr	r3, [r3, #20]
   16370:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
   16372:	68fb      	ldr	r3, [r7, #12]
   16374:	2b00      	cmp	r3, #0
   16376:	d1f3      	bne.n	16360 <TimerExists+0x10>
    }
    return false;
   16378:	2300      	movs	r3, #0
}
   1637a:	0018      	movs	r0, r3
   1637c:	46bd      	mov	sp, r7
   1637e:	b004      	add	sp, #16
   16380:	bd80      	pop	{r7, pc}
   16382:	46c0      	nop			; (mov r8, r8)
   16384:	200019d4 	.word	0x200019d4

00016388 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
   16388:	b580      	push	{r7, lr}
   1638a:	b084      	sub	sp, #16
   1638c:	af00      	add	r7, sp, #0
   1638e:	6078      	str	r0, [r7, #4]
   16390:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
   16392:	2300      	movs	r3, #0
   16394:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
   16396:	683b      	ldr	r3, [r7, #0]
   16398:	0018      	movs	r0, r3
   1639a:	4b0e      	ldr	r3, [pc, #56]	; (163d4 <TimerSetValue+0x4c>)
   1639c:	4798      	blx	r3
   1639e:	0003      	movs	r3, r0
   163a0:	60fb      	str	r3, [r7, #12]

    TimerStop( obj );
   163a2:	687b      	ldr	r3, [r7, #4]
   163a4:	0018      	movs	r0, r3
   163a6:	4b0c      	ldr	r3, [pc, #48]	; (163d8 <TimerSetValue+0x50>)
   163a8:	4798      	blx	r3

    minValue = RtcGetMinimumTimeout( );
   163aa:	4b0c      	ldr	r3, [pc, #48]	; (163dc <TimerSetValue+0x54>)
   163ac:	4798      	blx	r3
   163ae:	0003      	movs	r3, r0
   163b0:	60bb      	str	r3, [r7, #8]

    if( ticks < minValue )
   163b2:	68fa      	ldr	r2, [r7, #12]
   163b4:	68bb      	ldr	r3, [r7, #8]
   163b6:	429a      	cmp	r2, r3
   163b8:	d201      	bcs.n	163be <TimerSetValue+0x36>
    {
        ticks = minValue;
   163ba:	68bb      	ldr	r3, [r7, #8]
   163bc:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
   163be:	687b      	ldr	r3, [r7, #4]
   163c0:	68fa      	ldr	r2, [r7, #12]
   163c2:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
   163c4:	687b      	ldr	r3, [r7, #4]
   163c6:	68fa      	ldr	r2, [r7, #12]
   163c8:	605a      	str	r2, [r3, #4]
}
   163ca:	46c0      	nop			; (mov r8, r8)
   163cc:	46bd      	mov	sp, r7
   163ce:	b004      	add	sp, #16
   163d0:	bd80      	pop	{r7, pc}
   163d2:	46c0      	nop			; (mov r8, r8)
   163d4:	0000326d 	.word	0x0000326d
   163d8:	0001624d 	.word	0x0001624d
   163dc:	00003261 	.word	0x00003261

000163e0 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
   163e0:	b580      	push	{r7, lr}
   163e2:	b082      	sub	sp, #8
   163e4:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
   163e6:	4b06      	ldr	r3, [pc, #24]	; (16400 <TimerGetCurrentTime+0x20>)
   163e8:	4798      	blx	r3
   163ea:	0003      	movs	r3, r0
   163ec:	607b      	str	r3, [r7, #4]
    return  RtcTick2Ms( now );
   163ee:	687b      	ldr	r3, [r7, #4]
   163f0:	0018      	movs	r0, r3
   163f2:	4b04      	ldr	r3, [pc, #16]	; (16404 <TimerGetCurrentTime+0x24>)
   163f4:	4798      	blx	r3
   163f6:	0003      	movs	r3, r0
}
   163f8:	0018      	movs	r0, r3
   163fa:	46bd      	mov	sp, r7
   163fc:	b002      	add	sp, #8
   163fe:	bd80      	pop	{r7, pc}
   16400:	00003371 	.word	0x00003371
   16404:	0000327f 	.word	0x0000327f

00016408 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
   16408:	b580      	push	{r7, lr}
   1640a:	b084      	sub	sp, #16
   1640c:	af00      	add	r7, sp, #0
   1640e:	6078      	str	r0, [r7, #4]
    uint32_t nowInTicks = RtcGetTimerValue( );
   16410:	4b0a      	ldr	r3, [pc, #40]	; (1643c <TimerGetElapsedTime+0x34>)
   16412:	4798      	blx	r3
   16414:	0003      	movs	r3, r0
   16416:	60fb      	str	r3, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
   16418:	687b      	ldr	r3, [r7, #4]
   1641a:	0018      	movs	r0, r3
   1641c:	4b08      	ldr	r3, [pc, #32]	; (16440 <TimerGetElapsedTime+0x38>)
   1641e:	4798      	blx	r3
   16420:	0003      	movs	r3, r0
   16422:	60bb      	str	r3, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
   16424:	68fa      	ldr	r2, [r7, #12]
   16426:	68bb      	ldr	r3, [r7, #8]
   16428:	1ad3      	subs	r3, r2, r3
   1642a:	0018      	movs	r0, r3
   1642c:	4b05      	ldr	r3, [pc, #20]	; (16444 <TimerGetElapsedTime+0x3c>)
   1642e:	4798      	blx	r3
   16430:	0003      	movs	r3, r0
}
   16432:	0018      	movs	r0, r3
   16434:	46bd      	mov	sp, r7
   16436:	b004      	add	sp, #16
   16438:	bd80      	pop	{r7, pc}
   1643a:	46c0      	nop			; (mov r8, r8)
   1643c:	00003371 	.word	0x00003371
   16440:	0000326d 	.word	0x0000326d
   16444:	0000327f 	.word	0x0000327f

00016448 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
   16448:	b590      	push	{r4, r7, lr}
   1644a:	b085      	sub	sp, #20
   1644c:	af00      	add	r7, sp, #0
   1644e:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
   16450:	4b0f      	ldr	r3, [pc, #60]	; (16490 <TimerSetTimeout+0x48>)
   16452:	4798      	blx	r3
   16454:	0003      	movs	r3, r0
   16456:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
   16458:	687b      	ldr	r3, [r7, #4]
   1645a:	2201      	movs	r2, #1
   1645c:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1645e:	687b      	ldr	r3, [r7, #4]
   16460:	681c      	ldr	r4, [r3, #0]
   16462:	4b0c      	ldr	r3, [pc, #48]	; (16494 <TimerSetTimeout+0x4c>)
   16464:	4798      	blx	r3
   16466:	0002      	movs	r2, r0
   16468:	68fb      	ldr	r3, [r7, #12]
   1646a:	18d3      	adds	r3, r2, r3
   1646c:	429c      	cmp	r4, r3
   1646e:	d206      	bcs.n	1647e <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   16470:	4b08      	ldr	r3, [pc, #32]	; (16494 <TimerSetTimeout+0x4c>)
   16472:	4798      	blx	r3
   16474:	0002      	movs	r2, r0
   16476:	68fb      	ldr	r3, [r7, #12]
   16478:	18d2      	adds	r2, r2, r3
   1647a:	687b      	ldr	r3, [r7, #4]
   1647c:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   1647e:	687b      	ldr	r3, [r7, #4]
   16480:	681b      	ldr	r3, [r3, #0]
   16482:	0018      	movs	r0, r3
   16484:	4b04      	ldr	r3, [pc, #16]	; (16498 <TimerSetTimeout+0x50>)
   16486:	4798      	blx	r3
}
   16488:	46c0      	nop			; (mov r8, r8)
   1648a:	46bd      	mov	sp, r7
   1648c:	b005      	add	sp, #20
   1648e:	bd90      	pop	{r4, r7, pc}
   16490:	00003261 	.word	0x00003261
   16494:	00003385 	.word	0x00003385
   16498:	000032b1 	.word	0x000032b1

0001649c <TimerProcess>:
{
    return RtcTempCompensation( period, temperature );
}

void TimerProcess( void )
{
   1649c:	b580      	push	{r7, lr}
   1649e:	af00      	add	r7, sp, #0
    RtcProcess( );
   164a0:	4b02      	ldr	r3, [pc, #8]	; (164ac <TimerProcess+0x10>)
   164a2:	4798      	blx	r3
}
   164a4:	46c0      	nop			; (mov r8, r8)
   164a6:	46bd      	mov	sp, r7
   164a8:	bd80      	pop	{r7, pc}
   164aa:	46c0      	nop			; (mov r8, r8)
   164ac:	0000346d 	.word	0x0000346d

000164b0 <UartInit>:
 */
#include "uart-board.h"
#include "uart.h"

void UartInit( Uart_t *obj, UartId_t uartId, PinNames tx, PinNames rx )
{
   164b0:	b590      	push	{r4, r7, lr}
   164b2:	b083      	sub	sp, #12
   164b4:	af00      	add	r7, sp, #0
   164b6:	6078      	str	r0, [r7, #4]
   164b8:	000c      	movs	r4, r1
   164ba:	0010      	movs	r0, r2
   164bc:	0019      	movs	r1, r3
   164be:	1cfb      	adds	r3, r7, #3
   164c0:	1c22      	adds	r2, r4, #0
   164c2:	701a      	strb	r2, [r3, #0]
   164c4:	1cbb      	adds	r3, r7, #2
   164c6:	1c02      	adds	r2, r0, #0
   164c8:	701a      	strb	r2, [r3, #0]
   164ca:	1c7b      	adds	r3, r7, #1
   164cc:	1c0a      	adds	r2, r1, #0
   164ce:	701a      	strb	r2, [r3, #0]
    if( obj->IsInitialized == false )
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	785b      	ldrb	r3, [r3, #1]
   164d4:	2201      	movs	r2, #1
   164d6:	4053      	eors	r3, r2
   164d8:	b2db      	uxtb	r3, r3
   164da:	2b00      	cmp	r3, #0
   164dc:	d00e      	beq.n	164fc <UartInit+0x4c>
    {
        obj->IsInitialized = true;
   164de:	687b      	ldr	r3, [r7, #4]
   164e0:	2201      	movs	r2, #1
   164e2:	705a      	strb	r2, [r3, #1]
        UartMcuInit( obj, uartId, tx, rx );
   164e4:	1c7b      	adds	r3, r7, #1
   164e6:	2400      	movs	r4, #0
   164e8:	571c      	ldrsb	r4, [r3, r4]
   164ea:	1cbb      	adds	r3, r7, #2
   164ec:	2200      	movs	r2, #0
   164ee:	569a      	ldrsb	r2, [r3, r2]
   164f0:	1cfb      	adds	r3, r7, #3
   164f2:	7819      	ldrb	r1, [r3, #0]
   164f4:	6878      	ldr	r0, [r7, #4]
   164f6:	0023      	movs	r3, r4
   164f8:	4c02      	ldr	r4, [pc, #8]	; (16504 <UartInit+0x54>)
   164fa:	47a0      	blx	r4
    }
}
   164fc:	46c0      	nop			; (mov r8, r8)
   164fe:	46bd      	mov	sp, r7
   16500:	b003      	add	sp, #12
   16502:	bd90      	pop	{r4, r7, pc}
   16504:	00004a2d 	.word	0x00004a2d

00016508 <UartConfig>:

void UartConfig( Uart_t *obj, UartMode_t mode, uint32_t baudrate, WordLength_t wordLength, StopBits_t stopBits, Parity_t parity, FlowCtrl_t flowCtrl )
{
   16508:	b590      	push	{r4, r7, lr}
   1650a:	b089      	sub	sp, #36	; 0x24
   1650c:	af04      	add	r7, sp, #16
   1650e:	60f8      	str	r0, [r7, #12]
   16510:	0008      	movs	r0, r1
   16512:	607a      	str	r2, [r7, #4]
   16514:	0019      	movs	r1, r3
   16516:	230b      	movs	r3, #11
   16518:	18fb      	adds	r3, r7, r3
   1651a:	1c02      	adds	r2, r0, #0
   1651c:	701a      	strb	r2, [r3, #0]
   1651e:	230a      	movs	r3, #10
   16520:	18fb      	adds	r3, r7, r3
   16522:	1c0a      	adds	r2, r1, #0
   16524:	701a      	strb	r2, [r3, #0]
    UartMcuConfig( obj, mode, baudrate, wordLength, stopBits, parity, flowCtrl );
   16526:	230a      	movs	r3, #10
   16528:	18fb      	adds	r3, r7, r3
   1652a:	781c      	ldrb	r4, [r3, #0]
   1652c:	687a      	ldr	r2, [r7, #4]
   1652e:	230b      	movs	r3, #11
   16530:	18fb      	adds	r3, r7, r3
   16532:	7819      	ldrb	r1, [r3, #0]
   16534:	68f8      	ldr	r0, [r7, #12]
   16536:	2328      	movs	r3, #40	; 0x28
   16538:	18fb      	adds	r3, r7, r3
   1653a:	781b      	ldrb	r3, [r3, #0]
   1653c:	9302      	str	r3, [sp, #8]
   1653e:	2324      	movs	r3, #36	; 0x24
   16540:	18fb      	adds	r3, r7, r3
   16542:	781b      	ldrb	r3, [r3, #0]
   16544:	9301      	str	r3, [sp, #4]
   16546:	2320      	movs	r3, #32
   16548:	18fb      	adds	r3, r7, r3
   1654a:	781b      	ldrb	r3, [r3, #0]
   1654c:	9300      	str	r3, [sp, #0]
   1654e:	0023      	movs	r3, r4
   16550:	4c02      	ldr	r4, [pc, #8]	; (1655c <UartConfig+0x54>)
   16552:	47a0      	blx	r4
}
   16554:	46c0      	nop			; (mov r8, r8)
   16556:	46bd      	mov	sp, r7
   16558:	b005      	add	sp, #20
   1655a:	bd90      	pop	{r4, r7, pc}
   1655c:	00004add 	.word	0x00004add

00016560 <UartPutBuffer>:
{
    return UartMcuGetChar( obj, data );
}

uint8_t UartPutBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size )
{
   16560:	b580      	push	{r7, lr}
   16562:	b084      	sub	sp, #16
   16564:	af00      	add	r7, sp, #0
   16566:	60f8      	str	r0, [r7, #12]
   16568:	60b9      	str	r1, [r7, #8]
   1656a:	1dbb      	adds	r3, r7, #6
   1656c:	801a      	strh	r2, [r3, #0]
    return UartMcuPutBuffer( obj, buffer, size );
   1656e:	1dbb      	adds	r3, r7, #6
   16570:	881a      	ldrh	r2, [r3, #0]
   16572:	68b9      	ldr	r1, [r7, #8]
   16574:	68fb      	ldr	r3, [r7, #12]
   16576:	0018      	movs	r0, r3
   16578:	4b03      	ldr	r3, [pc, #12]	; (16588 <UartPutBuffer+0x28>)
   1657a:	4798      	blx	r3
   1657c:	0003      	movs	r3, r0
}
   1657e:	0018      	movs	r0, r3
   16580:	46bd      	mov	sp, r7
   16582:	b004      	add	sp, #16
   16584:	bd80      	pop	{r7, pc}
   16586:	46c0      	nop			; (mov r8, r8)
   16588:	00004b19 	.word	0x00004b19

0001658c <UartGetBuffer>:

uint8_t UartGetBuffer( Uart_t *obj, uint8_t *buffer, uint16_t size, uint16_t *nbReadBytes )
{
   1658c:	b590      	push	{r4, r7, lr}
   1658e:	b085      	sub	sp, #20
   16590:	af00      	add	r7, sp, #0
   16592:	60f8      	str	r0, [r7, #12]
   16594:	60b9      	str	r1, [r7, #8]
   16596:	603b      	str	r3, [r7, #0]
   16598:	1dbb      	adds	r3, r7, #6
   1659a:	801a      	strh	r2, [r3, #0]
    return UartMcuGetBuffer( obj, buffer, size, nbReadBytes );
   1659c:	683c      	ldr	r4, [r7, #0]
   1659e:	1dbb      	adds	r3, r7, #6
   165a0:	881a      	ldrh	r2, [r3, #0]
   165a2:	68b9      	ldr	r1, [r7, #8]
   165a4:	68f8      	ldr	r0, [r7, #12]
   165a6:	0023      	movs	r3, r4
   165a8:	4c03      	ldr	r4, [pc, #12]	; (165b8 <UartGetBuffer+0x2c>)
   165aa:	47a0      	blx	r4
   165ac:	0003      	movs	r3, r0
}
   165ae:	0018      	movs	r0, r3
   165b0:	46bd      	mov	sp, r7
   165b2:	b005      	add	sp, #20
   165b4:	bd90      	pop	{r4, r7, pc}
   165b6:	46c0      	nop			; (mov r8, r8)
   165b8:	00004b51 	.word	0x00004b51

000165bc <PrintHexBuffer>:
 * 
 * \param buffer Buffer to be printed
 * \param size   Buffer size to be printed
 */
void PrintHexBuffer( uint8_t *buffer, uint8_t size )
{
   165bc:	b580      	push	{r7, lr}
   165be:	b084      	sub	sp, #16
   165c0:	af00      	add	r7, sp, #0
   165c2:	6078      	str	r0, [r7, #4]
   165c4:	000a      	movs	r2, r1
   165c6:	1cfb      	adds	r3, r7, #3
   165c8:	701a      	strb	r2, [r3, #0]
    uint8_t newline = 0;
   165ca:	230f      	movs	r3, #15
   165cc:	18fb      	adds	r3, r7, r3
   165ce:	2200      	movs	r2, #0
   165d0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < size; i++ )
   165d2:	230e      	movs	r3, #14
   165d4:	18fb      	adds	r3, r7, r3
   165d6:	2200      	movs	r2, #0
   165d8:	701a      	strb	r2, [r3, #0]
   165da:	e02b      	b.n	16634 <PrintHexBuffer+0x78>
    {
        if( newline != 0 )
   165dc:	230f      	movs	r3, #15
   165de:	18fb      	adds	r3, r7, r3
   165e0:	781b      	ldrb	r3, [r3, #0]
   165e2:	2b00      	cmp	r3, #0
   165e4:	d007      	beq.n	165f6 <PrintHexBuffer+0x3a>
        {
            printf( "\r\n" );
   165e6:	4b1b      	ldr	r3, [pc, #108]	; (16654 <PrintHexBuffer+0x98>)
   165e8:	0018      	movs	r0, r3
   165ea:	4b1b      	ldr	r3, [pc, #108]	; (16658 <PrintHexBuffer+0x9c>)
   165ec:	4798      	blx	r3
            newline = 0;
   165ee:	230f      	movs	r3, #15
   165f0:	18fb      	adds	r3, r7, r3
   165f2:	2200      	movs	r2, #0
   165f4:	701a      	strb	r2, [r3, #0]
        }

        printf( "%02X ", buffer[i] );
   165f6:	230e      	movs	r3, #14
   165f8:	18fb      	adds	r3, r7, r3
   165fa:	781b      	ldrb	r3, [r3, #0]
   165fc:	687a      	ldr	r2, [r7, #4]
   165fe:	18d3      	adds	r3, r2, r3
   16600:	781b      	ldrb	r3, [r3, #0]
   16602:	001a      	movs	r2, r3
   16604:	4b15      	ldr	r3, [pc, #84]	; (1665c <PrintHexBuffer+0xa0>)
   16606:	0011      	movs	r1, r2
   16608:	0018      	movs	r0, r3
   1660a:	4b15      	ldr	r3, [pc, #84]	; (16660 <PrintHexBuffer+0xa4>)
   1660c:	4798      	blx	r3

        if( ( ( i + 1 ) % 16 ) == 0 )
   1660e:	230e      	movs	r3, #14
   16610:	18fb      	adds	r3, r7, r3
   16612:	781b      	ldrb	r3, [r3, #0]
   16614:	3301      	adds	r3, #1
   16616:	001a      	movs	r2, r3
   16618:	230f      	movs	r3, #15
   1661a:	4013      	ands	r3, r2
   1661c:	d103      	bne.n	16626 <PrintHexBuffer+0x6a>
        {
            newline = 1;
   1661e:	230f      	movs	r3, #15
   16620:	18fb      	adds	r3, r7, r3
   16622:	2201      	movs	r2, #1
   16624:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < size; i++ )
   16626:	230e      	movs	r3, #14
   16628:	18fb      	adds	r3, r7, r3
   1662a:	781a      	ldrb	r2, [r3, #0]
   1662c:	230e      	movs	r3, #14
   1662e:	18fb      	adds	r3, r7, r3
   16630:	3201      	adds	r2, #1
   16632:	701a      	strb	r2, [r3, #0]
   16634:	230e      	movs	r3, #14
   16636:	18fa      	adds	r2, r7, r3
   16638:	1cfb      	adds	r3, r7, #3
   1663a:	7812      	ldrb	r2, [r2, #0]
   1663c:	781b      	ldrb	r3, [r3, #0]
   1663e:	429a      	cmp	r2, r3
   16640:	d3cc      	bcc.n	165dc <PrintHexBuffer+0x20>
        }
    }
    printf( "\r\n" );
   16642:	4b04      	ldr	r3, [pc, #16]	; (16654 <PrintHexBuffer+0x98>)
   16644:	0018      	movs	r0, r3
   16646:	4b04      	ldr	r3, [pc, #16]	; (16658 <PrintHexBuffer+0x9c>)
   16648:	4798      	blx	r3
}
   1664a:	46c0      	nop			; (mov r8, r8)
   1664c:	46bd      	mov	sp, r7
   1664e:	b004      	add	sp, #16
   16650:	bd80      	pop	{r7, pc}
   16652:	46c0      	nop			; (mov r8, r8)
   16654:	0001fc14 	.word	0x0001fc14
   16658:	0001a239 	.word	0x0001a239
   1665c:	0001fc18 	.word	0x0001fc18
   16660:	0001a175 	.word	0x0001a175

00016664 <JoinNetwork>:

/*!
 * Executes the network Join request
 */
static void JoinNetwork( void )
{
   16664:	b590      	push	{r4, r7, lr}
   16666:	b087      	sub	sp, #28
   16668:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;
    mlmeReq.Type = MLME_JOIN;
   1666a:	1d3b      	adds	r3, r7, #4
   1666c:	2200      	movs	r2, #0
   1666e:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.DevEui = DevEui;
   16670:	1d3b      	adds	r3, r7, #4
   16672:	4a19      	ldr	r2, [pc, #100]	; (166d8 <JoinNetwork+0x74>)
   16674:	605a      	str	r2, [r3, #4]
    mlmeReq.Req.Join.JoinEui = JoinEui;
   16676:	1d3b      	adds	r3, r7, #4
   16678:	4a18      	ldr	r2, [pc, #96]	; (166dc <JoinNetwork+0x78>)
   1667a:	609a      	str	r2, [r3, #8]
    mlmeReq.Req.Join.Datarate = LORAWAN_DEFAULT_DATARATE;
   1667c:	1d3b      	adds	r3, r7, #4
   1667e:	2200      	movs	r2, #0
   16680:	731a      	strb	r2, [r3, #12]

    // Starts the join procedure
    status = LoRaMacMlmeRequest( &mlmeReq );
   16682:	2317      	movs	r3, #23
   16684:	18fc      	adds	r4, r7, r3
   16686:	1d3b      	adds	r3, r7, #4
   16688:	0018      	movs	r0, r3
   1668a:	4b15      	ldr	r3, [pc, #84]	; (166e0 <JoinNetwork+0x7c>)
   1668c:	4798      	blx	r3
   1668e:	0003      	movs	r3, r0
   16690:	7023      	strb	r3, [r4, #0]
    printf( "\r\n###### ===== MLME-Request - MLME_JOIN ==== ######\r\n" );
   16692:	4b14      	ldr	r3, [pc, #80]	; (166e4 <JoinNetwork+0x80>)
   16694:	0018      	movs	r0, r3
   16696:	4b14      	ldr	r3, [pc, #80]	; (166e8 <JoinNetwork+0x84>)
   16698:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
   1669a:	2317      	movs	r3, #23
   1669c:	18fb      	adds	r3, r7, r3
   1669e:	781a      	ldrb	r2, [r3, #0]
   166a0:	4b12      	ldr	r3, [pc, #72]	; (166ec <JoinNetwork+0x88>)
   166a2:	0092      	lsls	r2, r2, #2
   166a4:	58d2      	ldr	r2, [r2, r3]
   166a6:	4b12      	ldr	r3, [pc, #72]	; (166f0 <JoinNetwork+0x8c>)
   166a8:	0011      	movs	r1, r2
   166aa:	0018      	movs	r0, r3
   166ac:	4b11      	ldr	r3, [pc, #68]	; (166f4 <JoinNetwork+0x90>)
   166ae:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
   166b0:	2317      	movs	r3, #23
   166b2:	18fb      	adds	r3, r7, r3
   166b4:	781b      	ldrb	r3, [r3, #0]
   166b6:	2b00      	cmp	r3, #0
   166b8:	d107      	bne.n	166ca <JoinNetwork+0x66>
    {
        printf( "###### ===== JOINING ==== ######\r\n" );
   166ba:	4b0f      	ldr	r3, [pc, #60]	; (166f8 <JoinNetwork+0x94>)
   166bc:	0018      	movs	r0, r3
   166be:	4b0a      	ldr	r3, [pc, #40]	; (166e8 <JoinNetwork+0x84>)
   166c0:	4798      	blx	r3
        DeviceState = DEVICE_STATE_SLEEP;
   166c2:	4b0e      	ldr	r3, [pc, #56]	; (166fc <JoinNetwork+0x98>)
   166c4:	2205      	movs	r2, #5
   166c6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        DeviceState = DEVICE_STATE_CYCLE;
    }
}
   166c8:	e002      	b.n	166d0 <JoinNetwork+0x6c>
        DeviceState = DEVICE_STATE_CYCLE;
   166ca:	4b0c      	ldr	r3, [pc, #48]	; (166fc <JoinNetwork+0x98>)
   166cc:	2204      	movs	r2, #4
   166ce:	701a      	strb	r2, [r3, #0]
}
   166d0:	46c0      	nop			; (mov r8, r8)
   166d2:	46bd      	mov	sp, r7
   166d4:	b007      	add	sp, #28
   166d6:	bd90      	pop	{r4, r7, pc}
   166d8:	20000074 	.word	0x20000074
   166dc:	2000007c 	.word	0x2000007c
   166e0:	0000ab61 	.word	0x0000ab61
   166e4:	0001fc20 	.word	0x0001fc20
   166e8:	0001a239 	.word	0x0001a239
   166ec:	200000a8 	.word	0x200000a8
   166f0:	0001fc58 	.word	0x0001fc58
   166f4:	0001a175 	.word	0x0001a175
   166f8:	0001fc6c 	.word	0x0001fc6c
   166fc:	20001b1d 	.word	0x20001b1d

00016700 <PrepareTxFrame>:

/*!
 * \brief   Prepares the payload of the frame
 */
static void PrepareTxFrame( uint8_t port )
{
   16700:	b580      	push	{r7, lr}
   16702:	b082      	sub	sp, #8
   16704:	af00      	add	r7, sp, #0
   16706:	0002      	movs	r2, r0
   16708:	1dfb      	adds	r3, r7, #7
   1670a:	701a      	strb	r2, [r3, #0]
    switch( port )
   1670c:	1dfb      	adds	r3, r7, #7
   1670e:	781b      	ldrb	r3, [r3, #0]
   16710:	2b02      	cmp	r3, #2
   16712:	d002      	beq.n	1671a <PrepareTxFrame+0x1a>
   16714:	2be0      	cmp	r3, #224	; 0xe0
   16716:	d00d      	beq.n	16734 <PrepareTxFrame+0x34>
                break;
            }
        }
        break;
    default:
        break;
   16718:	e041      	b.n	1679e <PrepareTxFrame+0x9e>
            AppDataSizeBackup = AppDataSize = 1;
   1671a:	4b23      	ldr	r3, [pc, #140]	; (167a8 <PrepareTxFrame+0xa8>)
   1671c:	2201      	movs	r2, #1
   1671e:	701a      	strb	r2, [r3, #0]
   16720:	4b21      	ldr	r3, [pc, #132]	; (167a8 <PrepareTxFrame+0xa8>)
   16722:	781a      	ldrb	r2, [r3, #0]
   16724:	4b21      	ldr	r3, [pc, #132]	; (167ac <PrepareTxFrame+0xac>)
   16726:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[0] = AppLedStateOn;
   16728:	4b21      	ldr	r3, [pc, #132]	; (167b0 <PrepareTxFrame+0xb0>)
   1672a:	781b      	ldrb	r3, [r3, #0]
   1672c:	001a      	movs	r2, r3
   1672e:	4b21      	ldr	r3, [pc, #132]	; (167b4 <PrepareTxFrame+0xb4>)
   16730:	701a      	strb	r2, [r3, #0]
        break;
   16732:	e034      	b.n	1679e <PrepareTxFrame+0x9e>
        if( ComplianceTest.LinkCheck == true )
   16734:	4b20      	ldr	r3, [pc, #128]	; (167b8 <PrepareTxFrame+0xb8>)
   16736:	7b9b      	ldrb	r3, [r3, #14]
   16738:	2b00      	cmp	r3, #0
   1673a:	d014      	beq.n	16766 <PrepareTxFrame+0x66>
            ComplianceTest.LinkCheck = false;
   1673c:	4b1e      	ldr	r3, [pc, #120]	; (167b8 <PrepareTxFrame+0xb8>)
   1673e:	2200      	movs	r2, #0
   16740:	739a      	strb	r2, [r3, #14]
            AppDataSize = 3;
   16742:	4b19      	ldr	r3, [pc, #100]	; (167a8 <PrepareTxFrame+0xa8>)
   16744:	2203      	movs	r2, #3
   16746:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[0] = 5;
   16748:	4b1a      	ldr	r3, [pc, #104]	; (167b4 <PrepareTxFrame+0xb4>)
   1674a:	2205      	movs	r2, #5
   1674c:	701a      	strb	r2, [r3, #0]
            AppDataBuffer[1] = ComplianceTest.DemodMargin;
   1674e:	4b1a      	ldr	r3, [pc, #104]	; (167b8 <PrepareTxFrame+0xb8>)
   16750:	7bda      	ldrb	r2, [r3, #15]
   16752:	4b18      	ldr	r3, [pc, #96]	; (167b4 <PrepareTxFrame+0xb4>)
   16754:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[2] = ComplianceTest.NbGateways;
   16756:	4b18      	ldr	r3, [pc, #96]	; (167b8 <PrepareTxFrame+0xb8>)
   16758:	7c1a      	ldrb	r2, [r3, #16]
   1675a:	4b16      	ldr	r3, [pc, #88]	; (167b4 <PrepareTxFrame+0xb4>)
   1675c:	709a      	strb	r2, [r3, #2]
            ComplianceTest.State = 1;
   1675e:	4b16      	ldr	r3, [pc, #88]	; (167b8 <PrepareTxFrame+0xb8>)
   16760:	2201      	movs	r2, #1
   16762:	705a      	strb	r2, [r3, #1]
        break;
   16764:	e01a      	b.n	1679c <PrepareTxFrame+0x9c>
            switch( ComplianceTest.State )
   16766:	4b14      	ldr	r3, [pc, #80]	; (167b8 <PrepareTxFrame+0xb8>)
   16768:	785b      	ldrb	r3, [r3, #1]
   1676a:	2b01      	cmp	r3, #1
   1676c:	d006      	beq.n	1677c <PrepareTxFrame+0x7c>
   1676e:	2b04      	cmp	r3, #4
   16770:	d000      	beq.n	16774 <PrepareTxFrame+0x74>
        break;
   16772:	e013      	b.n	1679c <PrepareTxFrame+0x9c>
                ComplianceTest.State = 1;
   16774:	4b10      	ldr	r3, [pc, #64]	; (167b8 <PrepareTxFrame+0xb8>)
   16776:	2201      	movs	r2, #1
   16778:	705a      	strb	r2, [r3, #1]
                break;
   1677a:	e00f      	b.n	1679c <PrepareTxFrame+0x9c>
                AppDataSize = 2;
   1677c:	4b0a      	ldr	r3, [pc, #40]	; (167a8 <PrepareTxFrame+0xa8>)
   1677e:	2202      	movs	r2, #2
   16780:	701a      	strb	r2, [r3, #0]
                AppDataBuffer[0] = ComplianceTest.DownLinkCounter >> 8;
   16782:	4b0d      	ldr	r3, [pc, #52]	; (167b8 <PrepareTxFrame+0xb8>)
   16784:	899b      	ldrh	r3, [r3, #12]
   16786:	0a1b      	lsrs	r3, r3, #8
   16788:	b29b      	uxth	r3, r3
   1678a:	b2da      	uxtb	r2, r3
   1678c:	4b09      	ldr	r3, [pc, #36]	; (167b4 <PrepareTxFrame+0xb4>)
   1678e:	701a      	strb	r2, [r3, #0]
                AppDataBuffer[1] = ComplianceTest.DownLinkCounter;
   16790:	4b09      	ldr	r3, [pc, #36]	; (167b8 <PrepareTxFrame+0xb8>)
   16792:	899b      	ldrh	r3, [r3, #12]
   16794:	b2da      	uxtb	r2, r3
   16796:	4b07      	ldr	r3, [pc, #28]	; (167b4 <PrepareTxFrame+0xb4>)
   16798:	705a      	strb	r2, [r3, #1]
                break;
   1679a:	46c0      	nop			; (mov r8, r8)
        break;
   1679c:	46c0      	nop			; (mov r8, r8)
    }
}
   1679e:	46c0      	nop			; (mov r8, r8)
   167a0:	46bd      	mov	sp, r7
   167a2:	b002      	add	sp, #8
   167a4:	bd80      	pop	{r7, pc}
   167a6:	46c0      	nop			; (mov r8, r8)
   167a8:	200000a5 	.word	0x200000a5
   167ac:	200000a6 	.word	0x200000a6
   167b0:	20001ae8 	.word	0x20001ae8
   167b4:	200019d8 	.word	0x200019d8
   167b8:	20001db8 	.word	0x20001db8

000167bc <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
static bool SendFrame( void )
{
   167bc:	b590      	push	{r4, r7, lr}
   167be:	b087      	sub	sp, #28
   167c0:	af00      	add	r7, sp, #0
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
   167c2:	4b3c      	ldr	r3, [pc, #240]	; (168b4 <SendFrame+0xf8>)
   167c4:	781b      	ldrb	r3, [r3, #0]
   167c6:	003a      	movs	r2, r7
   167c8:	0011      	movs	r1, r2
   167ca:	0018      	movs	r0, r3
   167cc:	4b3a      	ldr	r3, [pc, #232]	; (168b8 <SendFrame+0xfc>)
   167ce:	4798      	blx	r3
   167d0:	1e03      	subs	r3, r0, #0
   167d2:	d00c      	beq.n	167ee <SendFrame+0x32>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
   167d4:	1d3b      	adds	r3, r7, #4
   167d6:	2200      	movs	r2, #0
   167d8:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
   167da:	1d3b      	adds	r3, r7, #4
   167dc:	2200      	movs	r2, #0
   167de:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
   167e0:	1d3b      	adds	r3, r7, #4
   167e2:	2200      	movs	r2, #0
   167e4:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
   167e6:	1d3b      	adds	r3, r7, #4
   167e8:	2200      	movs	r2, #0
   167ea:	739a      	strb	r2, [r3, #14]
   167ec:	e028      	b.n	16840 <SendFrame+0x84>
    }
    else
    {
        if( IsTxConfirmed == false )
   167ee:	4b33      	ldr	r3, [pc, #204]	; (168bc <SendFrame+0x100>)
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	2b00      	cmp	r3, #0
   167f4:	d112      	bne.n	1681c <SendFrame+0x60>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
   167f6:	1d3b      	adds	r3, r7, #4
   167f8:	2200      	movs	r2, #0
   167fa:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppPort;
   167fc:	4b30      	ldr	r3, [pc, #192]	; (168c0 <SendFrame+0x104>)
   167fe:	781a      	ldrb	r2, [r3, #0]
   16800:	1d3b      	adds	r3, r7, #4
   16802:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBuffer = AppDataBuffer;
   16804:	1d3b      	adds	r3, r7, #4
   16806:	4a2f      	ldr	r2, [pc, #188]	; (168c4 <SendFrame+0x108>)
   16808:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
   1680a:	4b2a      	ldr	r3, [pc, #168]	; (168b4 <SendFrame+0xf8>)
   1680c:	781b      	ldrb	r3, [r3, #0]
   1680e:	b29a      	uxth	r2, r3
   16810:	1d3b      	adds	r3, r7, #4
   16812:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
   16814:	1d3b      	adds	r3, r7, #4
   16816:	2200      	movs	r2, #0
   16818:	739a      	strb	r2, [r3, #14]
   1681a:	e011      	b.n	16840 <SendFrame+0x84>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
   1681c:	1d3b      	adds	r3, r7, #4
   1681e:	2201      	movs	r2, #1
   16820:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppPort;
   16822:	4b27      	ldr	r3, [pc, #156]	; (168c0 <SendFrame+0x104>)
   16824:	781a      	ldrb	r2, [r3, #0]
   16826:	1d3b      	adds	r3, r7, #4
   16828:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBuffer = AppDataBuffer;
   1682a:	1d3b      	adds	r3, r7, #4
   1682c:	4a25      	ldr	r2, [pc, #148]	; (168c4 <SendFrame+0x108>)
   1682e:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
   16830:	4b20      	ldr	r3, [pc, #128]	; (168b4 <SendFrame+0xf8>)
   16832:	781b      	ldrb	r3, [r3, #0]
   16834:	b29a      	uxth	r2, r3
   16836:	1d3b      	adds	r3, r7, #4
   16838:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
   1683a:	1d3b      	adds	r3, r7, #4
   1683c:	2200      	movs	r2, #0
   1683e:	739a      	strb	r2, [r3, #14]
        }
    }

    // Update global variable
    AppData.MsgType = ( mcpsReq.Type == MCPS_CONFIRMED ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
   16840:	1d3b      	adds	r3, r7, #4
   16842:	781b      	ldrb	r3, [r3, #0]
   16844:	3b01      	subs	r3, #1
   16846:	425a      	negs	r2, r3
   16848:	4153      	adcs	r3, r2
   1684a:	b2db      	uxtb	r3, r3
   1684c:	001a      	movs	r2, r3
   1684e:	4b1e      	ldr	r3, [pc, #120]	; (168c8 <SendFrame+0x10c>)
   16850:	701a      	strb	r2, [r3, #0]
    AppData.Port = mcpsReq.Req.Unconfirmed.fPort;
   16852:	1d3b      	adds	r3, r7, #4
   16854:	791a      	ldrb	r2, [r3, #4]
   16856:	4b1c      	ldr	r3, [pc, #112]	; (168c8 <SendFrame+0x10c>)
   16858:	705a      	strb	r2, [r3, #1]
    AppData.Buffer = mcpsReq.Req.Unconfirmed.fBuffer;
   1685a:	1d3b      	adds	r3, r7, #4
   1685c:	689a      	ldr	r2, [r3, #8]
   1685e:	4b1a      	ldr	r3, [pc, #104]	; (168c8 <SendFrame+0x10c>)
   16860:	605a      	str	r2, [r3, #4]
    AppData.BufferSize = mcpsReq.Req.Unconfirmed.fBufferSize;
   16862:	1d3b      	adds	r3, r7, #4
   16864:	899b      	ldrh	r3, [r3, #12]
   16866:	b2da      	uxtb	r2, r3
   16868:	4b17      	ldr	r3, [pc, #92]	; (168c8 <SendFrame+0x10c>)
   1686a:	709a      	strb	r2, [r3, #2]

    LoRaMacStatus_t status;
    status = LoRaMacMcpsRequest( &mcpsReq );
   1686c:	2317      	movs	r3, #23
   1686e:	18fc      	adds	r4, r7, r3
   16870:	1d3b      	adds	r3, r7, #4
   16872:	0018      	movs	r0, r3
   16874:	4b15      	ldr	r3, [pc, #84]	; (168cc <SendFrame+0x110>)
   16876:	4798      	blx	r3
   16878:	0003      	movs	r3, r0
   1687a:	7023      	strb	r3, [r4, #0]
    printf( "\r\n###### ===== MCPS-Request ==== ######\r\n" );
   1687c:	4b14      	ldr	r3, [pc, #80]	; (168d0 <SendFrame+0x114>)
   1687e:	0018      	movs	r0, r3
   16880:	4b14      	ldr	r3, [pc, #80]	; (168d4 <SendFrame+0x118>)
   16882:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
   16884:	2317      	movs	r3, #23
   16886:	18fb      	adds	r3, r7, r3
   16888:	781a      	ldrb	r2, [r3, #0]
   1688a:	4b13      	ldr	r3, [pc, #76]	; (168d8 <SendFrame+0x11c>)
   1688c:	0092      	lsls	r2, r2, #2
   1688e:	58d2      	ldr	r2, [r2, r3]
   16890:	4b12      	ldr	r3, [pc, #72]	; (168dc <SendFrame+0x120>)
   16892:	0011      	movs	r1, r2
   16894:	0018      	movs	r0, r3
   16896:	4b12      	ldr	r3, [pc, #72]	; (168e0 <SendFrame+0x124>)
   16898:	4798      	blx	r3

    if( status == LORAMAC_STATUS_OK )
   1689a:	2317      	movs	r3, #23
   1689c:	18fb      	adds	r3, r7, r3
   1689e:	781b      	ldrb	r3, [r3, #0]
   168a0:	2b00      	cmp	r3, #0
   168a2:	d101      	bne.n	168a8 <SendFrame+0xec>
    {
        return false;
   168a4:	2300      	movs	r3, #0
   168a6:	e000      	b.n	168aa <SendFrame+0xee>
    }
    return true;
   168a8:	2301      	movs	r3, #1
}
   168aa:	0018      	movs	r0, r3
   168ac:	46bd      	mov	sp, r7
   168ae:	b007      	add	sp, #28
   168b0:	bd90      	pop	{r4, r7, pc}
   168b2:	46c0      	nop			; (mov r8, r8)
   168b4:	200000a5 	.word	0x200000a5
   168b8:	00009cd1 	.word	0x00009cd1
   168bc:	20001aca 	.word	0x20001aca
   168c0:	200000a4 	.word	0x200000a4
   168c4:	200019d8 	.word	0x200019d8
   168c8:	20001b20 	.word	0x20001b20
   168cc:	0000aee5 	.word	0x0000aee5
   168d0:	0001fc90 	.word	0x0001fc90
   168d4:	0001a239 	.word	0x0001a239
   168d8:	200000a8 	.word	0x200000a8
   168dc:	0001fc58 	.word	0x0001fc58
   168e0:	0001a175 	.word	0x0001a175

000168e4 <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void* context )
{
   168e4:	b590      	push	{r4, r7, lr}
   168e6:	b08b      	sub	sp, #44	; 0x2c
   168e8:	af00      	add	r7, sp, #0
   168ea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    TimerStop( &TxNextPacketTimer );
   168ec:	4b13      	ldr	r3, [pc, #76]	; (1693c <OnTxNextPacketTimerEvent+0x58>)
   168ee:	0018      	movs	r0, r3
   168f0:	4b13      	ldr	r3, [pc, #76]	; (16940 <OnTxNextPacketTimerEvent+0x5c>)
   168f2:	4798      	blx	r3

    mibReq.Type = MIB_NETWORK_ACTIVATION;
   168f4:	230c      	movs	r3, #12
   168f6:	18fb      	adds	r3, r7, r3
   168f8:	2201      	movs	r2, #1
   168fa:	701a      	strb	r2, [r3, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
   168fc:	2327      	movs	r3, #39	; 0x27
   168fe:	18fc      	adds	r4, r7, r3
   16900:	230c      	movs	r3, #12
   16902:	18fb      	adds	r3, r7, r3
   16904:	0018      	movs	r0, r3
   16906:	4b0f      	ldr	r3, [pc, #60]	; (16944 <OnTxNextPacketTimerEvent+0x60>)
   16908:	4798      	blx	r3
   1690a:	0003      	movs	r3, r0
   1690c:	7023      	strb	r3, [r4, #0]

    if( status == LORAMAC_STATUS_OK )
   1690e:	2327      	movs	r3, #39	; 0x27
   16910:	18fb      	adds	r3, r7, r3
   16912:	781b      	ldrb	r3, [r3, #0]
   16914:	2b00      	cmp	r3, #0
   16916:	d10d      	bne.n	16934 <OnTxNextPacketTimerEvent+0x50>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
   16918:	230c      	movs	r3, #12
   1691a:	18fb      	adds	r3, r7, r3
   1691c:	791b      	ldrb	r3, [r3, #4]
   1691e:	2b00      	cmp	r3, #0
   16920:	d102      	bne.n	16928 <OnTxNextPacketTimerEvent+0x44>
        {
            // Network not joined yet. Try to join again
            JoinNetwork( );
   16922:	4b09      	ldr	r3, [pc, #36]	; (16948 <OnTxNextPacketTimerEvent+0x64>)
   16924:	4798      	blx	r3
        {
            DeviceState = DEVICE_STATE_SEND;
            NextTx = true;
        }
    }
}
   16926:	e005      	b.n	16934 <OnTxNextPacketTimerEvent+0x50>
            DeviceState = DEVICE_STATE_SEND;
   16928:	4b08      	ldr	r3, [pc, #32]	; (1694c <OnTxNextPacketTimerEvent+0x68>)
   1692a:	2203      	movs	r2, #3
   1692c:	701a      	strb	r2, [r3, #0]
            NextTx = true;
   1692e:	4b08      	ldr	r3, [pc, #32]	; (16950 <OnTxNextPacketTimerEvent+0x6c>)
   16930:	2201      	movs	r2, #1
   16932:	701a      	strb	r2, [r3, #0]
}
   16934:	46c0      	nop			; (mov r8, r8)
   16936:	46bd      	mov	sp, r7
   16938:	b00b      	add	sp, #44	; 0x2c
   1693a:	bd90      	pop	{r4, r7, pc}
   1693c:	20001ad0 	.word	0x20001ad0
   16940:	0001624d 	.word	0x0001624d
   16944:	00009e65 	.word	0x00009e65
   16948:	00016665 	.word	0x00016665
   1694c:	20001b1d 	.word	0x20001b1d
   16950:	200000a7 	.word	0x200000a7

00016954 <OnLed1TimerEvent>:

/*!
 * \brief Function executed on Led 1 Timeout event
 */
static void OnLed1TimerEvent( void* context )
{
   16954:	b580      	push	{r7, lr}
   16956:	b082      	sub	sp, #8
   16958:	af00      	add	r7, sp, #0
   1695a:	6078      	str	r0, [r7, #4]
    TimerStop( &Led1Timer );
   1695c:	4b06      	ldr	r3, [pc, #24]	; (16978 <OnLed1TimerEvent+0x24>)
   1695e:	0018      	movs	r0, r3
   16960:	4b06      	ldr	r3, [pc, #24]	; (1697c <OnLed1TimerEvent+0x28>)
   16962:	4798      	blx	r3
    // Switch LED 1 OFF
    GpioWrite( &Led1, 0 );
   16964:	4b06      	ldr	r3, [pc, #24]	; (16980 <OnLed1TimerEvent+0x2c>)
   16966:	2100      	movs	r1, #0
   16968:	0018      	movs	r0, r3
   1696a:	4b06      	ldr	r3, [pc, #24]	; (16984 <OnLed1TimerEvent+0x30>)
   1696c:	4798      	blx	r3
}
   1696e:	46c0      	nop			; (mov r8, r8)
   16970:	46bd      	mov	sp, r7
   16972:	b002      	add	sp, #8
   16974:	bd80      	pop	{r7, pc}
   16976:	46c0      	nop			; (mov r8, r8)
   16978:	20001aec 	.word	0x20001aec
   1697c:	0001624d 	.word	0x0001624d
   16980:	20001ba4 	.word	0x20001ba4
   16984:	00015ca1 	.word	0x00015ca1

00016988 <OnLed2TimerEvent>:

/*!
 * \brief Function executed on Led 2 Timeout event
 */
static void OnLed2TimerEvent( void* context )
{
   16988:	b580      	push	{r7, lr}
   1698a:	b082      	sub	sp, #8
   1698c:	af00      	add	r7, sp, #0
   1698e:	6078      	str	r0, [r7, #4]
    TimerStop( &Led2Timer );
   16990:	4b06      	ldr	r3, [pc, #24]	; (169ac <OnLed2TimerEvent+0x24>)
   16992:	0018      	movs	r0, r3
   16994:	4b06      	ldr	r3, [pc, #24]	; (169b0 <OnLed2TimerEvent+0x28>)
   16996:	4798      	blx	r3
    // Switch LED 1 OFF
    GpioWrite( &Led1, 0 );
   16998:	4b06      	ldr	r3, [pc, #24]	; (169b4 <OnLed2TimerEvent+0x2c>)
   1699a:	2100      	movs	r1, #0
   1699c:	0018      	movs	r0, r3
   1699e:	4b06      	ldr	r3, [pc, #24]	; (169b8 <OnLed2TimerEvent+0x30>)
   169a0:	4798      	blx	r3
}
   169a2:	46c0      	nop			; (mov r8, r8)
   169a4:	46bd      	mov	sp, r7
   169a6:	b002      	add	sp, #8
   169a8:	bd80      	pop	{r7, pc}
   169aa:	46c0      	nop			; (mov r8, r8)
   169ac:	20001b04 	.word	0x20001b04
   169b0:	0001624d 	.word	0x0001624d
   169b4:	20001ba4 	.word	0x20001ba4
   169b8:	00015ca1 	.word	0x00015ca1

000169bc <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
   169bc:	b580      	push	{r7, lr}
   169be:	b090      	sub	sp, #64	; 0x40
   169c0:	af00      	add	r7, sp, #0
   169c2:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MCPS-Confirm ==== ######\r\n" );
   169c4:	4b72      	ldr	r3, [pc, #456]	; (16b90 <McpsConfirm+0x1d4>)
   169c6:	0018      	movs	r0, r3
   169c8:	4b72      	ldr	r3, [pc, #456]	; (16b94 <McpsConfirm+0x1d8>)
   169ca:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] );
   169cc:	687b      	ldr	r3, [r7, #4]
   169ce:	785b      	ldrb	r3, [r3, #1]
   169d0:	001a      	movs	r2, r3
   169d2:	4b71      	ldr	r3, [pc, #452]	; (16b98 <McpsConfirm+0x1dc>)
   169d4:	0092      	lsls	r2, r2, #2
   169d6:	58d2      	ldr	r2, [r2, r3]
   169d8:	4b70      	ldr	r3, [pc, #448]	; (16b9c <McpsConfirm+0x1e0>)
   169da:	0011      	movs	r1, r2
   169dc:	0018      	movs	r0, r3
   169de:	4b70      	ldr	r3, [pc, #448]	; (16ba0 <McpsConfirm+0x1e4>)
   169e0:	4798      	blx	r3
    if( mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
   169e2:	687b      	ldr	r3, [r7, #4]
   169e4:	785b      	ldrb	r3, [r3, #1]
   169e6:	2b00      	cmp	r3, #0
   169e8:	d116      	bne.n	16a18 <McpsConfirm+0x5c>
    {
    }
    else
    {
        switch( mcpsConfirm->McpsRequest )
   169ea:	687b      	ldr	r3, [r7, #4]
   169ec:	781b      	ldrb	r3, [r3, #0]
   169ee:	2b01      	cmp	r3, #1
   169f0:	d004      	beq.n	169fc <McpsConfirm+0x40>
   169f2:	2b03      	cmp	r3, #3
   169f4:	d004      	beq.n	16a00 <McpsConfirm+0x44>
   169f6:	2b00      	cmp	r3, #0
   169f8:	d004      	beq.n	16a04 <McpsConfirm+0x48>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
   169fa:	e004      	b.n	16a06 <McpsConfirm+0x4a>
                break;
   169fc:	46c0      	nop			; (mov r8, r8)
   169fe:	e002      	b.n	16a06 <McpsConfirm+0x4a>
                break;
   16a00:	46c0      	nop			; (mov r8, r8)
   16a02:	e000      	b.n	16a06 <McpsConfirm+0x4a>
                break;
   16a04:	46c0      	nop			; (mov r8, r8)
        }

        // Switch LED 1 ON
        GpioWrite( &Led1, 0 );
   16a06:	4b67      	ldr	r3, [pc, #412]	; (16ba4 <McpsConfirm+0x1e8>)
   16a08:	2100      	movs	r1, #0
   16a0a:	0018      	movs	r0, r3
   16a0c:	4b66      	ldr	r3, [pc, #408]	; (16ba8 <McpsConfirm+0x1ec>)
   16a0e:	4798      	blx	r3
        TimerStart( &Led1Timer );
   16a10:	4b66      	ldr	r3, [pc, #408]	; (16bac <McpsConfirm+0x1f0>)
   16a12:	0018      	movs	r0, r3
   16a14:	4b66      	ldr	r3, [pc, #408]	; (16bb0 <McpsConfirm+0x1f4>)
   16a16:	4798      	blx	r3
    }
    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
   16a18:	230c      	movs	r3, #12
   16a1a:	18fb      	adds	r3, r7, r3
   16a1c:	2200      	movs	r2, #0
   16a1e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
   16a20:	230c      	movs	r3, #12
   16a22:	18fb      	adds	r3, r7, r3
   16a24:	0018      	movs	r0, r3
   16a26:	4b63      	ldr	r3, [pc, #396]	; (16bb4 <McpsConfirm+0x1f8>)
   16a28:	4798      	blx	r3

    printf( "\r\n###### ===== UPLINK FRAME %lu ==== ######\r\n", mcpsConfirm->UpLinkCounter );
   16a2a:	687b      	ldr	r3, [r7, #4]
   16a2c:	68da      	ldr	r2, [r3, #12]
   16a2e:	4b62      	ldr	r3, [pc, #392]	; (16bb8 <McpsConfirm+0x1fc>)
   16a30:	0011      	movs	r1, r2
   16a32:	0018      	movs	r0, r3
   16a34:	4b5a      	ldr	r3, [pc, #360]	; (16ba0 <McpsConfirm+0x1e4>)
   16a36:	4798      	blx	r3
    printf( "\r\n" );
   16a38:	4b60      	ldr	r3, [pc, #384]	; (16bbc <McpsConfirm+0x200>)
   16a3a:	0018      	movs	r0, r3
   16a3c:	4b55      	ldr	r3, [pc, #340]	; (16b94 <McpsConfirm+0x1d8>)
   16a3e:	4798      	blx	r3

    printf( "CLASS       : %c\r\n", "ABC"[mibReq.Param.Class] );
   16a40:	230c      	movs	r3, #12
   16a42:	18fb      	adds	r3, r7, r3
   16a44:	791b      	ldrb	r3, [r3, #4]
   16a46:	001a      	movs	r2, r3
   16a48:	4b5d      	ldr	r3, [pc, #372]	; (16bc0 <McpsConfirm+0x204>)
   16a4a:	5c9b      	ldrb	r3, [r3, r2]
   16a4c:	001a      	movs	r2, r3
   16a4e:	4b5d      	ldr	r3, [pc, #372]	; (16bc4 <McpsConfirm+0x208>)
   16a50:	0011      	movs	r1, r2
   16a52:	0018      	movs	r0, r3
   16a54:	4b52      	ldr	r3, [pc, #328]	; (16ba0 <McpsConfirm+0x1e4>)
   16a56:	4798      	blx	r3
    printf( "\r\n" );
   16a58:	4b58      	ldr	r3, [pc, #352]	; (16bbc <McpsConfirm+0x200>)
   16a5a:	0018      	movs	r0, r3
   16a5c:	4b4d      	ldr	r3, [pc, #308]	; (16b94 <McpsConfirm+0x1d8>)
   16a5e:	4798      	blx	r3
    printf( "TX PORT     : %d\r\n", AppData.Port );
   16a60:	4b59      	ldr	r3, [pc, #356]	; (16bc8 <McpsConfirm+0x20c>)
   16a62:	785b      	ldrb	r3, [r3, #1]
   16a64:	001a      	movs	r2, r3
   16a66:	4b59      	ldr	r3, [pc, #356]	; (16bcc <McpsConfirm+0x210>)
   16a68:	0011      	movs	r1, r2
   16a6a:	0018      	movs	r0, r3
   16a6c:	4b4c      	ldr	r3, [pc, #304]	; (16ba0 <McpsConfirm+0x1e4>)
   16a6e:	4798      	blx	r3

    if( AppData.BufferSize != 0 )
   16a70:	4b55      	ldr	r3, [pc, #340]	; (16bc8 <McpsConfirm+0x20c>)
   16a72:	789b      	ldrb	r3, [r3, #2]
   16a74:	2b00      	cmp	r3, #0
   16a76:	d020      	beq.n	16aba <McpsConfirm+0xfe>
    {
        printf( "TX DATA     : " );
   16a78:	4b55      	ldr	r3, [pc, #340]	; (16bd0 <McpsConfirm+0x214>)
   16a7a:	0018      	movs	r0, r3
   16a7c:	4b48      	ldr	r3, [pc, #288]	; (16ba0 <McpsConfirm+0x1e4>)
   16a7e:	4798      	blx	r3
        if( AppData.MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
   16a80:	4b51      	ldr	r3, [pc, #324]	; (16bc8 <McpsConfirm+0x20c>)
   16a82:	781b      	ldrb	r3, [r3, #0]
   16a84:	2b01      	cmp	r3, #1
   16a86:	d10c      	bne.n	16aa2 <McpsConfirm+0xe6>
        {
            printf( "CONFIRMED - %s\r\n", ( mcpsConfirm->AckReceived != 0 ) ? "ACK" : "NACK" );
   16a88:	687b      	ldr	r3, [r7, #4]
   16a8a:	791b      	ldrb	r3, [r3, #4]
   16a8c:	2b00      	cmp	r3, #0
   16a8e:	d001      	beq.n	16a94 <McpsConfirm+0xd8>
   16a90:	4b50      	ldr	r3, [pc, #320]	; (16bd4 <McpsConfirm+0x218>)
   16a92:	e000      	b.n	16a96 <McpsConfirm+0xda>
   16a94:	4b50      	ldr	r3, [pc, #320]	; (16bd8 <McpsConfirm+0x21c>)
   16a96:	4a51      	ldr	r2, [pc, #324]	; (16bdc <McpsConfirm+0x220>)
   16a98:	0019      	movs	r1, r3
   16a9a:	0010      	movs	r0, r2
   16a9c:	4b40      	ldr	r3, [pc, #256]	; (16ba0 <McpsConfirm+0x1e4>)
   16a9e:	4798      	blx	r3
   16aa0:	e003      	b.n	16aaa <McpsConfirm+0xee>
        }
        else
        {
            printf( "UNCONFIRMED\r\n" );
   16aa2:	4b4f      	ldr	r3, [pc, #316]	; (16be0 <McpsConfirm+0x224>)
   16aa4:	0018      	movs	r0, r3
   16aa6:	4b3b      	ldr	r3, [pc, #236]	; (16b94 <McpsConfirm+0x1d8>)
   16aa8:	4798      	blx	r3
        }
        PrintHexBuffer( AppData.Buffer, AppData.BufferSize );
   16aaa:	4b47      	ldr	r3, [pc, #284]	; (16bc8 <McpsConfirm+0x20c>)
   16aac:	685a      	ldr	r2, [r3, #4]
   16aae:	4b46      	ldr	r3, [pc, #280]	; (16bc8 <McpsConfirm+0x20c>)
   16ab0:	789b      	ldrb	r3, [r3, #2]
   16ab2:	0019      	movs	r1, r3
   16ab4:	0010      	movs	r0, r2
   16ab6:	4b4b      	ldr	r3, [pc, #300]	; (16be4 <McpsConfirm+0x228>)
   16ab8:	4798      	blx	r3
    }

    printf( "\r\n" );
   16aba:	4b40      	ldr	r3, [pc, #256]	; (16bbc <McpsConfirm+0x200>)
   16abc:	0018      	movs	r0, r3
   16abe:	4b35      	ldr	r3, [pc, #212]	; (16b94 <McpsConfirm+0x1d8>)
   16ac0:	4798      	blx	r3
    printf( "DATA RATE   : DR_%d\r\n", mcpsConfirm->Datarate );
   16ac2:	687b      	ldr	r3, [r7, #4]
   16ac4:	789b      	ldrb	r3, [r3, #2]
   16ac6:	001a      	movs	r2, r3
   16ac8:	4b47      	ldr	r3, [pc, #284]	; (16be8 <McpsConfirm+0x22c>)
   16aca:	0011      	movs	r1, r2
   16acc:	0018      	movs	r0, r3
   16ace:	4b34      	ldr	r3, [pc, #208]	; (16ba0 <McpsConfirm+0x1e4>)
   16ad0:	4798      	blx	r3

    mibGet.Type  = MIB_CHANNELS;
   16ad2:	2324      	movs	r3, #36	; 0x24
   16ad4:	18fb      	adds	r3, r7, r3
   16ad6:	221c      	movs	r2, #28
   16ad8:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
   16ada:	2324      	movs	r3, #36	; 0x24
   16adc:	18fb      	adds	r3, r7, r3
   16ade:	0018      	movs	r0, r3
   16ae0:	4b34      	ldr	r3, [pc, #208]	; (16bb4 <McpsConfirm+0x1f8>)
   16ae2:	4798      	blx	r3
   16ae4:	1e03      	subs	r3, r0, #0
   16ae6:	d10f      	bne.n	16b08 <McpsConfirm+0x14c>
    {
        printf( "U/L FREQ    : %lu\r\n", mibGet.Param.ChannelList[mcpsConfirm->Channel].Frequency );
   16ae8:	2324      	movs	r3, #36	; 0x24
   16aea:	18fb      	adds	r3, r7, r3
   16aec:	6859      	ldr	r1, [r3, #4]
   16aee:	687b      	ldr	r3, [r7, #4]
   16af0:	691a      	ldr	r2, [r3, #16]
   16af2:	0013      	movs	r3, r2
   16af4:	005b      	lsls	r3, r3, #1
   16af6:	189b      	adds	r3, r3, r2
   16af8:	009b      	lsls	r3, r3, #2
   16afa:	18cb      	adds	r3, r1, r3
   16afc:	681a      	ldr	r2, [r3, #0]
   16afe:	4b3b      	ldr	r3, [pc, #236]	; (16bec <McpsConfirm+0x230>)
   16b00:	0011      	movs	r1, r2
   16b02:	0018      	movs	r0, r3
   16b04:	4b26      	ldr	r3, [pc, #152]	; (16ba0 <McpsConfirm+0x1e4>)
   16b06:	4798      	blx	r3
    }

    printf( "TX POWER    : %d\r\n", mcpsConfirm->TxPower );
   16b08:	687b      	ldr	r3, [r7, #4]
   16b0a:	78db      	ldrb	r3, [r3, #3]
   16b0c:	b25b      	sxtb	r3, r3
   16b0e:	001a      	movs	r2, r3
   16b10:	4b37      	ldr	r3, [pc, #220]	; (16bf0 <McpsConfirm+0x234>)
   16b12:	0011      	movs	r1, r2
   16b14:	0018      	movs	r0, r3
   16b16:	4b22      	ldr	r3, [pc, #136]	; (16ba0 <McpsConfirm+0x1e4>)
   16b18:	4798      	blx	r3

    mibGet.Type  = MIB_CHANNELS_MASK;
   16b1a:	2324      	movs	r3, #36	; 0x24
   16b1c:	18fb      	adds	r3, r7, r3
   16b1e:	221f      	movs	r2, #31
   16b20:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
   16b22:	2324      	movs	r3, #36	; 0x24
   16b24:	18fb      	adds	r3, r7, r3
   16b26:	0018      	movs	r0, r3
   16b28:	4b22      	ldr	r3, [pc, #136]	; (16bb4 <McpsConfirm+0x1f8>)
   16b2a:	4798      	blx	r3
   16b2c:	1e03      	subs	r3, r0, #0
   16b2e:	d127      	bne.n	16b80 <McpsConfirm+0x1c4>
    {
        printf("CHANNEL MASK: ");
   16b30:	4b30      	ldr	r3, [pc, #192]	; (16bf4 <McpsConfirm+0x238>)
   16b32:	0018      	movs	r0, r3
   16b34:	4b1a      	ldr	r3, [pc, #104]	; (16ba0 <McpsConfirm+0x1e4>)
   16b36:	4798      	blx	r3
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
   16b38:	233f      	movs	r3, #63	; 0x3f
   16b3a:	18fb      	adds	r3, r7, r3
   16b3c:	2200      	movs	r2, #0
   16b3e:	701a      	strb	r2, [r3, #0]
   16b40:	e015      	b.n	16b6e <McpsConfirm+0x1b2>

#error "Please define a region in the compiler options."

#endif
        {
            printf("%04X ", mibGet.Param.ChannelsMask[i] );
   16b42:	2324      	movs	r3, #36	; 0x24
   16b44:	18fb      	adds	r3, r7, r3
   16b46:	685a      	ldr	r2, [r3, #4]
   16b48:	233f      	movs	r3, #63	; 0x3f
   16b4a:	18fb      	adds	r3, r7, r3
   16b4c:	781b      	ldrb	r3, [r3, #0]
   16b4e:	005b      	lsls	r3, r3, #1
   16b50:	18d3      	adds	r3, r2, r3
   16b52:	881b      	ldrh	r3, [r3, #0]
   16b54:	001a      	movs	r2, r3
   16b56:	4b28      	ldr	r3, [pc, #160]	; (16bf8 <McpsConfirm+0x23c>)
   16b58:	0011      	movs	r1, r2
   16b5a:	0018      	movs	r0, r3
   16b5c:	4b10      	ldr	r3, [pc, #64]	; (16ba0 <McpsConfirm+0x1e4>)
   16b5e:	4798      	blx	r3
        for( uint8_t i = 0; i < 1; i++)
   16b60:	233f      	movs	r3, #63	; 0x3f
   16b62:	18fb      	adds	r3, r7, r3
   16b64:	781a      	ldrb	r2, [r3, #0]
   16b66:	233f      	movs	r3, #63	; 0x3f
   16b68:	18fb      	adds	r3, r7, r3
   16b6a:	3201      	adds	r2, #1
   16b6c:	701a      	strb	r2, [r3, #0]
   16b6e:	233f      	movs	r3, #63	; 0x3f
   16b70:	18fb      	adds	r3, r7, r3
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	2b00      	cmp	r3, #0
   16b76:	d0e4      	beq.n	16b42 <McpsConfirm+0x186>
        }
        printf("\r\n");
   16b78:	4b10      	ldr	r3, [pc, #64]	; (16bbc <McpsConfirm+0x200>)
   16b7a:	0018      	movs	r0, r3
   16b7c:	4b05      	ldr	r3, [pc, #20]	; (16b94 <McpsConfirm+0x1d8>)
   16b7e:	4798      	blx	r3
    }

    printf( "\r\n" );
   16b80:	4b0e      	ldr	r3, [pc, #56]	; (16bbc <McpsConfirm+0x200>)
   16b82:	0018      	movs	r0, r3
   16b84:	4b03      	ldr	r3, [pc, #12]	; (16b94 <McpsConfirm+0x1d8>)
   16b86:	4798      	blx	r3
}
   16b88:	46c0      	nop			; (mov r8, r8)
   16b8a:	46bd      	mov	sp, r7
   16b8c:	b010      	add	sp, #64	; 0x40
   16b8e:	bd80      	pop	{r7, pc}
   16b90:	0001fcbc 	.word	0x0001fcbc
   16b94:	0001a239 	.word	0x0001a239
   16b98:	20000104 	.word	0x20000104
   16b9c:	0001fc58 	.word	0x0001fc58
   16ba0:	0001a175 	.word	0x0001a175
   16ba4:	20001ba4 	.word	0x20001ba4
   16ba8:	00015ca1 	.word	0x00015ca1
   16bac:	20001aec 	.word	0x20001aec
   16bb0:	00015fc1 	.word	0x00015fc1
   16bb4:	00009e65 	.word	0x00009e65
   16bb8:	0001fce8 	.word	0x0001fce8
   16bbc:	0001fc14 	.word	0x0001fc14
   16bc0:	0001fdd8 	.word	0x0001fdd8
   16bc4:	0001fd18 	.word	0x0001fd18
   16bc8:	20001b20 	.word	0x20001b20
   16bcc:	0001fd2c 	.word	0x0001fd2c
   16bd0:	0001fd40 	.word	0x0001fd40
   16bd4:	0001fd50 	.word	0x0001fd50
   16bd8:	0001fd54 	.word	0x0001fd54
   16bdc:	0001fd5c 	.word	0x0001fd5c
   16be0:	0001fd70 	.word	0x0001fd70
   16be4:	000165bd 	.word	0x000165bd
   16be8:	0001fd80 	.word	0x0001fd80
   16bec:	0001fd98 	.word	0x0001fd98
   16bf0:	0001fdac 	.word	0x0001fdac
   16bf4:	0001fdc0 	.word	0x0001fdc0
   16bf8:	0001fdd0 	.word	0x0001fdd0

00016bfc <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
   16bfc:	b590      	push	{r4, r7, lr}
   16bfe:	b0a7      	sub	sp, #156	; 0x9c
   16c00:	af00      	add	r7, sp, #0
   16c02:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MCPS-Indication ==== ######\r\n" );
   16c04:	4bc9      	ldr	r3, [pc, #804]	; (16f2c <McpsIndication+0x330>)
   16c06:	0018      	movs	r0, r3
   16c08:	4bc9      	ldr	r3, [pc, #804]	; (16f30 <McpsIndication+0x334>)
   16c0a:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );
   16c0c:	687b      	ldr	r3, [r7, #4]
   16c0e:	785b      	ldrb	r3, [r3, #1]
   16c10:	001a      	movs	r2, r3
   16c12:	4bc8      	ldr	r3, [pc, #800]	; (16f34 <McpsIndication+0x338>)
   16c14:	0092      	lsls	r2, r2, #2
   16c16:	58d2      	ldr	r2, [r2, r3]
   16c18:	4bc7      	ldr	r3, [pc, #796]	; (16f38 <McpsIndication+0x33c>)
   16c1a:	0011      	movs	r1, r2
   16c1c:	0018      	movs	r0, r3
   16c1e:	4bc7      	ldr	r3, [pc, #796]	; (16f3c <McpsIndication+0x340>)
   16c20:	4798      	blx	r3
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
   16c22:	687b      	ldr	r3, [r7, #4]
   16c24:	785b      	ldrb	r3, [r3, #1]
   16c26:	2b00      	cmp	r3, #0
   16c28:	d000      	beq.n	16c2c <McpsIndication+0x30>
   16c2a:	e25f      	b.n	170ec <McpsIndication+0x4f0>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
   16c2c:	687b      	ldr	r3, [r7, #4]
   16c2e:	781b      	ldrb	r3, [r3, #0]
   16c30:	2b01      	cmp	r3, #1
   16c32:	d008      	beq.n	16c46 <McpsIndication+0x4a>
   16c34:	dc02      	bgt.n	16c3c <McpsIndication+0x40>
   16c36:	2b00      	cmp	r3, #0
   16c38:	d007      	beq.n	16c4a <McpsIndication+0x4e>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
   16c3a:	e00b      	b.n	16c54 <McpsIndication+0x58>
    switch( mcpsIndication->McpsIndication )
   16c3c:	2b02      	cmp	r3, #2
   16c3e:	d006      	beq.n	16c4e <McpsIndication+0x52>
   16c40:	2b03      	cmp	r3, #3
   16c42:	d006      	beq.n	16c52 <McpsIndication+0x56>
            break;
   16c44:	e006      	b.n	16c54 <McpsIndication+0x58>
            break;
   16c46:	46c0      	nop			; (mov r8, r8)
   16c48:	e004      	b.n	16c54 <McpsIndication+0x58>
            break;
   16c4a:	46c0      	nop			; (mov r8, r8)
   16c4c:	e002      	b.n	16c54 <McpsIndication+0x58>
            break;
   16c4e:	46c0      	nop			; (mov r8, r8)
   16c50:	e000      	b.n	16c54 <McpsIndication+0x58>
            break;
   16c52:	46c0      	nop			; (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
   16c54:	687b      	ldr	r3, [r7, #4]
   16c56:	795b      	ldrb	r3, [r3, #5]
   16c58:	2b01      	cmp	r3, #1
   16c5a:	d102      	bne.n	16c62 <McpsIndication+0x66>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        OnTxNextPacketTimerEvent( NULL );
   16c5c:	2000      	movs	r0, #0
   16c5e:	4bb8      	ldr	r3, [pc, #736]	; (16f40 <McpsIndication+0x344>)
   16c60:	4798      	blx	r3
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot

    if( ComplianceTest.Running == true )
   16c62:	4bb8      	ldr	r3, [pc, #736]	; (16f44 <McpsIndication+0x348>)
   16c64:	781b      	ldrb	r3, [r3, #0]
   16c66:	2b00      	cmp	r3, #0
   16c68:	d005      	beq.n	16c76 <McpsIndication+0x7a>
    {
        ComplianceTest.DownLinkCounter++;
   16c6a:	4bb6      	ldr	r3, [pc, #728]	; (16f44 <McpsIndication+0x348>)
   16c6c:	899b      	ldrh	r3, [r3, #12]
   16c6e:	3301      	adds	r3, #1
   16c70:	b29a      	uxth	r2, r3
   16c72:	4bb4      	ldr	r3, [pc, #720]	; (16f44 <McpsIndication+0x348>)
   16c74:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->RxData == true )
   16c76:	687b      	ldr	r3, [r7, #4]
   16c78:	7b5b      	ldrb	r3, [r3, #13]
   16c7a:	2b00      	cmp	r3, #0
   16c7c:	d100      	bne.n	16c80 <McpsIndication+0x84>
   16c7e:	e1d7      	b.n	17030 <McpsIndication+0x434>
    {
        switch( mcpsIndication->Port )
   16c80:	687b      	ldr	r3, [r7, #4]
   16c82:	78db      	ldrb	r3, [r3, #3]
   16c84:	2b01      	cmp	r3, #1
   16c86:	da00      	bge.n	16c8a <McpsIndication+0x8e>
   16c88:	e1cd      	b.n	17026 <McpsIndication+0x42a>
   16c8a:	2b02      	cmp	r3, #2
   16c8c:	dd02      	ble.n	16c94 <McpsIndication+0x98>
   16c8e:	2be0      	cmp	r3, #224	; 0xe0
   16c90:	d011      	beq.n	16cb6 <McpsIndication+0xba>
                    break;
                }
            }
            break;
        default:
            break;
   16c92:	e1c8      	b.n	17026 <McpsIndication+0x42a>
            if( mcpsIndication->BufferSize == 1 )
   16c94:	687b      	ldr	r3, [r7, #4]
   16c96:	7b1b      	ldrb	r3, [r3, #12]
   16c98:	2b01      	cmp	r3, #1
   16c9a:	d000      	beq.n	16c9e <McpsIndication+0xa2>
   16c9c:	e1c5      	b.n	1702a <McpsIndication+0x42e>
                AppLedStateOn = mcpsIndication->Buffer[0] & 0x01;
   16c9e:	687b      	ldr	r3, [r7, #4]
   16ca0:	689b      	ldr	r3, [r3, #8]
   16ca2:	781b      	ldrb	r3, [r3, #0]
   16ca4:	001a      	movs	r2, r3
   16ca6:	2301      	movs	r3, #1
   16ca8:	4013      	ands	r3, r2
   16caa:	1e5a      	subs	r2, r3, #1
   16cac:	4193      	sbcs	r3, r2
   16cae:	b2da      	uxtb	r2, r3
   16cb0:	4ba5      	ldr	r3, [pc, #660]	; (16f48 <McpsIndication+0x34c>)
   16cb2:	701a      	strb	r2, [r3, #0]
            break;
   16cb4:	e1b9      	b.n	1702a <McpsIndication+0x42e>
            if( ComplianceTest.Running == false )
   16cb6:	4ba3      	ldr	r3, [pc, #652]	; (16f44 <McpsIndication+0x348>)
   16cb8:	781b      	ldrb	r3, [r3, #0]
   16cba:	2201      	movs	r2, #1
   16cbc:	4053      	eors	r3, r2
   16cbe:	b2db      	uxtb	r3, r3
   16cc0:	2b00      	cmp	r3, #0
   16cc2:	d04f      	beq.n	16d64 <McpsIndication+0x168>
                if( ( mcpsIndication->BufferSize == 4 ) &&
   16cc4:	687b      	ldr	r3, [r7, #4]
   16cc6:	7b1b      	ldrb	r3, [r3, #12]
   16cc8:	2b04      	cmp	r3, #4
   16cca:	d000      	beq.n	16cce <McpsIndication+0xd2>
   16ccc:	e1af      	b.n	1702e <McpsIndication+0x432>
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
   16cce:	687b      	ldr	r3, [r7, #4]
   16cd0:	689b      	ldr	r3, [r3, #8]
   16cd2:	781b      	ldrb	r3, [r3, #0]
                if( ( mcpsIndication->BufferSize == 4 ) &&
   16cd4:	2b01      	cmp	r3, #1
   16cd6:	d000      	beq.n	16cda <McpsIndication+0xde>
   16cd8:	e1a9      	b.n	1702e <McpsIndication+0x432>
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
   16cda:	687b      	ldr	r3, [r7, #4]
   16cdc:	689b      	ldr	r3, [r3, #8]
   16cde:	3301      	adds	r3, #1
   16ce0:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[0] == 0x01 ) &&
   16ce2:	2b01      	cmp	r3, #1
   16ce4:	d000      	beq.n	16ce8 <McpsIndication+0xec>
   16ce6:	e1a2      	b.n	1702e <McpsIndication+0x432>
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	689b      	ldr	r3, [r3, #8]
   16cec:	3302      	adds	r3, #2
   16cee:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[1] == 0x01 ) &&
   16cf0:	2b01      	cmp	r3, #1
   16cf2:	d000      	beq.n	16cf6 <McpsIndication+0xfa>
   16cf4:	e19b      	b.n	1702e <McpsIndication+0x432>
                    ( mcpsIndication->Buffer[3] == 0x01 ) )
   16cf6:	687b      	ldr	r3, [r7, #4]
   16cf8:	689b      	ldr	r3, [r3, #8]
   16cfa:	3303      	adds	r3, #3
   16cfc:	781b      	ldrb	r3, [r3, #0]
                    ( mcpsIndication->Buffer[2] == 0x01 ) &&
   16cfe:	2b01      	cmp	r3, #1
   16d00:	d000      	beq.n	16d04 <McpsIndication+0x108>
   16d02:	e194      	b.n	1702e <McpsIndication+0x432>
                    IsTxConfirmed = false;
   16d04:	4b91      	ldr	r3, [pc, #580]	; (16f4c <McpsIndication+0x350>)
   16d06:	2200      	movs	r2, #0
   16d08:	701a      	strb	r2, [r3, #0]
                    AppPort = 224;
   16d0a:	4b91      	ldr	r3, [pc, #580]	; (16f50 <McpsIndication+0x354>)
   16d0c:	22e0      	movs	r2, #224	; 0xe0
   16d0e:	701a      	strb	r2, [r3, #0]
                    AppDataSizeBackup = AppDataSize;
   16d10:	4b90      	ldr	r3, [pc, #576]	; (16f54 <McpsIndication+0x358>)
   16d12:	781a      	ldrb	r2, [r3, #0]
   16d14:	4b90      	ldr	r3, [pc, #576]	; (16f58 <McpsIndication+0x35c>)
   16d16:	701a      	strb	r2, [r3, #0]
                    AppDataSize = 2;
   16d18:	4b8e      	ldr	r3, [pc, #568]	; (16f54 <McpsIndication+0x358>)
   16d1a:	2202      	movs	r2, #2
   16d1c:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
   16d1e:	4b89      	ldr	r3, [pc, #548]	; (16f44 <McpsIndication+0x348>)
   16d20:	2200      	movs	r2, #0
   16d22:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.LinkCheck = false;
   16d24:	4b87      	ldr	r3, [pc, #540]	; (16f44 <McpsIndication+0x348>)
   16d26:	2200      	movs	r2, #0
   16d28:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = 0;
   16d2a:	4b86      	ldr	r3, [pc, #536]	; (16f44 <McpsIndication+0x348>)
   16d2c:	2200      	movs	r2, #0
   16d2e:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = 0;
   16d30:	4b84      	ldr	r3, [pc, #528]	; (16f44 <McpsIndication+0x348>)
   16d32:	2200      	movs	r2, #0
   16d34:	741a      	strb	r2, [r3, #16]
                    ComplianceTest.Running = true;
   16d36:	4b83      	ldr	r3, [pc, #524]	; (16f44 <McpsIndication+0x348>)
   16d38:	2201      	movs	r2, #1
   16d3a:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
   16d3c:	4b81      	ldr	r3, [pc, #516]	; (16f44 <McpsIndication+0x348>)
   16d3e:	2201      	movs	r2, #1
   16d40:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
   16d42:	2368      	movs	r3, #104	; 0x68
   16d44:	18fb      	adds	r3, r7, r3
   16d46:	2202      	movs	r2, #2
   16d48:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = true;
   16d4a:	2368      	movs	r3, #104	; 0x68
   16d4c:	18fb      	adds	r3, r7, r3
   16d4e:	2201      	movs	r2, #1
   16d50:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
   16d52:	2368      	movs	r3, #104	; 0x68
   16d54:	18fb      	adds	r3, r7, r3
   16d56:	0018      	movs	r0, r3
   16d58:	4b80      	ldr	r3, [pc, #512]	; (16f5c <McpsIndication+0x360>)
   16d5a:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( false );
   16d5c:	2000      	movs	r0, #0
   16d5e:	4b80      	ldr	r3, [pc, #512]	; (16f60 <McpsIndication+0x364>)
   16d60:	4798      	blx	r3
            break;
   16d62:	e164      	b.n	1702e <McpsIndication+0x432>
                ComplianceTest.State = mcpsIndication->Buffer[0];
   16d64:	687b      	ldr	r3, [r7, #4]
   16d66:	689b      	ldr	r3, [r3, #8]
   16d68:	781a      	ldrb	r2, [r3, #0]
   16d6a:	4b76      	ldr	r3, [pc, #472]	; (16f44 <McpsIndication+0x348>)
   16d6c:	705a      	strb	r2, [r3, #1]
                switch( ComplianceTest.State )
   16d6e:	4b75      	ldr	r3, [pc, #468]	; (16f44 <McpsIndication+0x348>)
   16d70:	785b      	ldrb	r3, [r3, #1]
   16d72:	2b07      	cmp	r3, #7
   16d74:	d900      	bls.n	16d78 <McpsIndication+0x17c>
   16d76:	e154      	b.n	17022 <McpsIndication+0x426>
   16d78:	009a      	lsls	r2, r3, #2
   16d7a:	4b7a      	ldr	r3, [pc, #488]	; (16f64 <McpsIndication+0x368>)
   16d7c:	18d3      	adds	r3, r2, r3
   16d7e:	681b      	ldr	r3, [r3, #0]
   16d80:	469f      	mov	pc, r3
                    IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
   16d82:	4b72      	ldr	r3, [pc, #456]	; (16f4c <McpsIndication+0x350>)
   16d84:	2200      	movs	r2, #0
   16d86:	701a      	strb	r2, [r3, #0]
                    AppPort = LORAWAN_APP_PORT;
   16d88:	4b71      	ldr	r3, [pc, #452]	; (16f50 <McpsIndication+0x354>)
   16d8a:	2202      	movs	r2, #2
   16d8c:	701a      	strb	r2, [r3, #0]
                    AppDataSize = AppDataSizeBackup;
   16d8e:	4b72      	ldr	r3, [pc, #456]	; (16f58 <McpsIndication+0x35c>)
   16d90:	781a      	ldrb	r2, [r3, #0]
   16d92:	4b70      	ldr	r3, [pc, #448]	; (16f54 <McpsIndication+0x358>)
   16d94:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.DownLinkCounter = 0;
   16d96:	4b6b      	ldr	r3, [pc, #428]	; (16f44 <McpsIndication+0x348>)
   16d98:	2200      	movs	r2, #0
   16d9a:	819a      	strh	r2, [r3, #12]
                    ComplianceTest.Running = false;
   16d9c:	4b69      	ldr	r3, [pc, #420]	; (16f44 <McpsIndication+0x348>)
   16d9e:	2200      	movs	r2, #0
   16da0:	701a      	strb	r2, [r3, #0]
                    mibReq.Type = MIB_ADR;
   16da2:	2350      	movs	r3, #80	; 0x50
   16da4:	18fb      	adds	r3, r7, r3
   16da6:	2202      	movs	r2, #2
   16da8:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
   16daa:	2350      	movs	r3, #80	; 0x50
   16dac:	18fb      	adds	r3, r7, r3
   16dae:	2201      	movs	r2, #1
   16db0:	711a      	strb	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
   16db2:	2350      	movs	r3, #80	; 0x50
   16db4:	18fb      	adds	r3, r7, r3
   16db6:	0018      	movs	r0, r3
   16db8:	4b68      	ldr	r3, [pc, #416]	; (16f5c <McpsIndication+0x360>)
   16dba:	4798      	blx	r3
                    LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
   16dbc:	2001      	movs	r0, #1
   16dbe:	4b68      	ldr	r3, [pc, #416]	; (16f60 <McpsIndication+0x364>)
   16dc0:	4798      	blx	r3
                    break;
   16dc2:	e12f      	b.n	17024 <McpsIndication+0x428>
                    AppDataSize = 2;
   16dc4:	4b63      	ldr	r3, [pc, #396]	; (16f54 <McpsIndication+0x358>)
   16dc6:	2202      	movs	r2, #2
   16dc8:	701a      	strb	r2, [r3, #0]
                    break;
   16dca:	e12b      	b.n	17024 <McpsIndication+0x428>
                    IsTxConfirmed = true;
   16dcc:	4b5f      	ldr	r3, [pc, #380]	; (16f4c <McpsIndication+0x350>)
   16dce:	2201      	movs	r2, #1
   16dd0:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
   16dd2:	4b5c      	ldr	r3, [pc, #368]	; (16f44 <McpsIndication+0x348>)
   16dd4:	2201      	movs	r2, #1
   16dd6:	705a      	strb	r2, [r3, #1]
                    break;
   16dd8:	e124      	b.n	17024 <McpsIndication+0x428>
                    IsTxConfirmed = false;
   16dda:	4b5c      	ldr	r3, [pc, #368]	; (16f4c <McpsIndication+0x350>)
   16ddc:	2200      	movs	r2, #0
   16dde:	701a      	strb	r2, [r3, #0]
                    ComplianceTest.State = 1;
   16de0:	4b58      	ldr	r3, [pc, #352]	; (16f44 <McpsIndication+0x348>)
   16de2:	2201      	movs	r2, #1
   16de4:	705a      	strb	r2, [r3, #1]
                    break;
   16de6:	e11d      	b.n	17024 <McpsIndication+0x428>
                    AppDataSize = mcpsIndication->BufferSize;
   16de8:	687b      	ldr	r3, [r7, #4]
   16dea:	7b1a      	ldrb	r2, [r3, #12]
   16dec:	4b59      	ldr	r3, [pc, #356]	; (16f54 <McpsIndication+0x358>)
   16dee:	701a      	strb	r2, [r3, #0]
                    AppDataBuffer[0] = 4;
   16df0:	4b5d      	ldr	r3, [pc, #372]	; (16f68 <McpsIndication+0x36c>)
   16df2:	2204      	movs	r2, #4
   16df4:	701a      	strb	r2, [r3, #0]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
   16df6:	2397      	movs	r3, #151	; 0x97
   16df8:	18fb      	adds	r3, r7, r3
   16dfa:	2201      	movs	r2, #1
   16dfc:	701a      	strb	r2, [r3, #0]
   16dfe:	e014      	b.n	16e2a <McpsIndication+0x22e>
                        AppDataBuffer[i] = mcpsIndication->Buffer[i] + 1;
   16e00:	2397      	movs	r3, #151	; 0x97
   16e02:	18fb      	adds	r3, r7, r3
   16e04:	781a      	ldrb	r2, [r3, #0]
   16e06:	687b      	ldr	r3, [r7, #4]
   16e08:	6899      	ldr	r1, [r3, #8]
   16e0a:	2397      	movs	r3, #151	; 0x97
   16e0c:	18fb      	adds	r3, r7, r3
   16e0e:	781b      	ldrb	r3, [r3, #0]
   16e10:	18cb      	adds	r3, r1, r3
   16e12:	781b      	ldrb	r3, [r3, #0]
   16e14:	3301      	adds	r3, #1
   16e16:	b2d9      	uxtb	r1, r3
   16e18:	4b53      	ldr	r3, [pc, #332]	; (16f68 <McpsIndication+0x36c>)
   16e1a:	5499      	strb	r1, [r3, r2]
                    for( uint8_t i = 1; i < MIN( AppDataSize, LORAWAN_APP_DATA_MAX_SIZE ); i++ )
   16e1c:	2397      	movs	r3, #151	; 0x97
   16e1e:	18fb      	adds	r3, r7, r3
   16e20:	781a      	ldrb	r2, [r3, #0]
   16e22:	2397      	movs	r3, #151	; 0x97
   16e24:	18fb      	adds	r3, r7, r3
   16e26:	3201      	adds	r2, #1
   16e28:	701a      	strb	r2, [r3, #0]
   16e2a:	2397      	movs	r3, #151	; 0x97
   16e2c:	18fb      	adds	r3, r7, r3
   16e2e:	781b      	ldrb	r3, [r3, #0]
   16e30:	4a48      	ldr	r2, [pc, #288]	; (16f54 <McpsIndication+0x358>)
   16e32:	7812      	ldrb	r2, [r2, #0]
   16e34:	2af1      	cmp	r2, #241	; 0xf1
   16e36:	d802      	bhi.n	16e3e <McpsIndication+0x242>
   16e38:	4a46      	ldr	r2, [pc, #280]	; (16f54 <McpsIndication+0x358>)
   16e3a:	7812      	ldrb	r2, [r2, #0]
   16e3c:	e000      	b.n	16e40 <McpsIndication+0x244>
   16e3e:	22f2      	movs	r2, #242	; 0xf2
   16e40:	4293      	cmp	r3, r2
   16e42:	dbdd      	blt.n	16e00 <McpsIndication+0x204>
                    break;
   16e44:	e0ee      	b.n	17024 <McpsIndication+0x428>
                        mlmeReq.Type = MLME_LINK_CHECK;
   16e46:	2340      	movs	r3, #64	; 0x40
   16e48:	18fb      	adds	r3, r7, r3
   16e4a:	2203      	movs	r2, #3
   16e4c:	701a      	strb	r2, [r3, #0]
                        LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
   16e4e:	2396      	movs	r3, #150	; 0x96
   16e50:	18fc      	adds	r4, r7, r3
   16e52:	2340      	movs	r3, #64	; 0x40
   16e54:	18fb      	adds	r3, r7, r3
   16e56:	0018      	movs	r0, r3
   16e58:	4b44      	ldr	r3, [pc, #272]	; (16f6c <McpsIndication+0x370>)
   16e5a:	4798      	blx	r3
   16e5c:	0003      	movs	r3, r0
   16e5e:	7023      	strb	r3, [r4, #0]
                        printf( "\r\n###### ===== MLME-Request - MLME_LINK_CHECK ==== ######\r\n" );
   16e60:	4b43      	ldr	r3, [pc, #268]	; (16f70 <McpsIndication+0x374>)
   16e62:	0018      	movs	r0, r3
   16e64:	4b32      	ldr	r3, [pc, #200]	; (16f30 <McpsIndication+0x334>)
   16e66:	4798      	blx	r3
                        printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
   16e68:	2396      	movs	r3, #150	; 0x96
   16e6a:	18fb      	adds	r3, r7, r3
   16e6c:	781a      	ldrb	r2, [r3, #0]
   16e6e:	4b41      	ldr	r3, [pc, #260]	; (16f74 <McpsIndication+0x378>)
   16e70:	0092      	lsls	r2, r2, #2
   16e72:	58d2      	ldr	r2, [r2, r3]
   16e74:	4b30      	ldr	r3, [pc, #192]	; (16f38 <McpsIndication+0x33c>)
   16e76:	0011      	movs	r1, r2
   16e78:	0018      	movs	r0, r3
   16e7a:	4b30      	ldr	r3, [pc, #192]	; (16f3c <McpsIndication+0x340>)
   16e7c:	4798      	blx	r3
                    break;
   16e7e:	e0d1      	b.n	17024 <McpsIndication+0x428>
                        IsTxConfirmed = LORAWAN_CONFIRMED_MSG_ON;
   16e80:	4b32      	ldr	r3, [pc, #200]	; (16f4c <McpsIndication+0x350>)
   16e82:	2200      	movs	r2, #0
   16e84:	701a      	strb	r2, [r3, #0]
                        AppPort = LORAWAN_APP_PORT;
   16e86:	4b32      	ldr	r3, [pc, #200]	; (16f50 <McpsIndication+0x354>)
   16e88:	2202      	movs	r2, #2
   16e8a:	701a      	strb	r2, [r3, #0]
                        AppDataSize = AppDataSizeBackup;
   16e8c:	4b32      	ldr	r3, [pc, #200]	; (16f58 <McpsIndication+0x35c>)
   16e8e:	781a      	ldrb	r2, [r3, #0]
   16e90:	4b30      	ldr	r3, [pc, #192]	; (16f54 <McpsIndication+0x358>)
   16e92:	701a      	strb	r2, [r3, #0]
                        ComplianceTest.DownLinkCounter = 0;
   16e94:	4b2b      	ldr	r3, [pc, #172]	; (16f44 <McpsIndication+0x348>)
   16e96:	2200      	movs	r2, #0
   16e98:	819a      	strh	r2, [r3, #12]
                        ComplianceTest.Running = false;
   16e9a:	4b2a      	ldr	r3, [pc, #168]	; (16f44 <McpsIndication+0x348>)
   16e9c:	2200      	movs	r2, #0
   16e9e:	701a      	strb	r2, [r3, #0]
                        mibReq.Type = MIB_ADR;
   16ea0:	2328      	movs	r3, #40	; 0x28
   16ea2:	18fb      	adds	r3, r7, r3
   16ea4:	2202      	movs	r2, #2
   16ea6:	701a      	strb	r2, [r3, #0]
                        mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
   16ea8:	2328      	movs	r3, #40	; 0x28
   16eaa:	18fb      	adds	r3, r7, r3
   16eac:	2201      	movs	r2, #1
   16eae:	711a      	strb	r2, [r3, #4]
                        LoRaMacMibSetRequestConfirm( &mibReq );
   16eb0:	2328      	movs	r3, #40	; 0x28
   16eb2:	18fb      	adds	r3, r7, r3
   16eb4:	0018      	movs	r0, r3
   16eb6:	4b29      	ldr	r3, [pc, #164]	; (16f5c <McpsIndication+0x360>)
   16eb8:	4798      	blx	r3
                        LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
   16eba:	2001      	movs	r0, #1
   16ebc:	4b28      	ldr	r3, [pc, #160]	; (16f60 <McpsIndication+0x364>)
   16ebe:	4798      	blx	r3
                        JoinNetwork( );
   16ec0:	4b2d      	ldr	r3, [pc, #180]	; (16f78 <McpsIndication+0x37c>)
   16ec2:	4798      	blx	r3
                    break;
   16ec4:	e0ae      	b.n	17024 <McpsIndication+0x428>
                        if( mcpsIndication->BufferSize == 3 )
   16ec6:	687b      	ldr	r3, [r7, #4]
   16ec8:	7b1b      	ldrb	r3, [r3, #12]
   16eca:	2b03      	cmp	r3, #3
   16ecc:	d158      	bne.n	16f80 <McpsIndication+0x384>
                            mlmeReq.Type = MLME_TXCW;
   16ece:	2318      	movs	r3, #24
   16ed0:	18fb      	adds	r3, r7, r3
   16ed2:	2204      	movs	r2, #4
   16ed4:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
   16ed6:	687b      	ldr	r3, [r7, #4]
   16ed8:	689b      	ldr	r3, [r3, #8]
   16eda:	3301      	adds	r3, #1
   16edc:	781b      	ldrb	r3, [r3, #0]
   16ede:	021b      	lsls	r3, r3, #8
   16ee0:	b21a      	sxth	r2, r3
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	689b      	ldr	r3, [r3, #8]
   16ee6:	3302      	adds	r3, #2
   16ee8:	781b      	ldrb	r3, [r3, #0]
   16eea:	b21b      	sxth	r3, r3
   16eec:	4313      	orrs	r3, r2
   16eee:	b21b      	sxth	r3, r3
   16ef0:	b29a      	uxth	r2, r3
   16ef2:	2318      	movs	r3, #24
   16ef4:	18fb      	adds	r3, r7, r3
   16ef6:	809a      	strh	r2, [r3, #4]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
   16ef8:	2395      	movs	r3, #149	; 0x95
   16efa:	18fc      	adds	r4, r7, r3
   16efc:	2318      	movs	r3, #24
   16efe:	18fb      	adds	r3, r7, r3
   16f00:	0018      	movs	r0, r3
   16f02:	4b1a      	ldr	r3, [pc, #104]	; (16f6c <McpsIndication+0x370>)
   16f04:	4798      	blx	r3
   16f06:	0003      	movs	r3, r0
   16f08:	7023      	strb	r3, [r4, #0]
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW ==== ######\r\n" );
   16f0a:	4b1c      	ldr	r3, [pc, #112]	; (16f7c <McpsIndication+0x380>)
   16f0c:	0018      	movs	r0, r3
   16f0e:	4b08      	ldr	r3, [pc, #32]	; (16f30 <McpsIndication+0x334>)
   16f10:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
   16f12:	2395      	movs	r3, #149	; 0x95
   16f14:	18fb      	adds	r3, r7, r3
   16f16:	781a      	ldrb	r2, [r3, #0]
   16f18:	4b16      	ldr	r3, [pc, #88]	; (16f74 <McpsIndication+0x378>)
   16f1a:	0092      	lsls	r2, r2, #2
   16f1c:	58d2      	ldr	r2, [r2, r3]
   16f1e:	4b06      	ldr	r3, [pc, #24]	; (16f38 <McpsIndication+0x33c>)
   16f20:	0011      	movs	r1, r2
   16f22:	0018      	movs	r0, r3
   16f24:	4b05      	ldr	r3, [pc, #20]	; (16f3c <McpsIndication+0x340>)
   16f26:	4798      	blx	r3
   16f28:	e077      	b.n	1701a <McpsIndication+0x41e>
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	0001fddc 	.word	0x0001fddc
   16f30:	0001a239 	.word	0x0001a239
   16f34:	20000104 	.word	0x20000104
   16f38:	0001fc58 	.word	0x0001fc58
   16f3c:	0001a175 	.word	0x0001a175
   16f40:	000168e5 	.word	0x000168e5
   16f44:	20001db8 	.word	0x20001db8
   16f48:	20001ae8 	.word	0x20001ae8
   16f4c:	20001aca 	.word	0x20001aca
   16f50:	200000a4 	.word	0x200000a4
   16f54:	200000a5 	.word	0x200000a5
   16f58:	200000a6 	.word	0x200000a6
   16f5c:	0000a151 	.word	0x0000a151
   16f60:	0000b391 	.word	0x0000b391
   16f64:	0001ff84 	.word	0x0001ff84
   16f68:	200019d8 	.word	0x200019d8
   16f6c:	0000ab61 	.word	0x0000ab61
   16f70:	0001fe08 	.word	0x0001fe08
   16f74:	200000a8 	.word	0x200000a8
   16f78:	00016665 	.word	0x00016665
   16f7c:	0001fe44 	.word	0x0001fe44
                        else if( mcpsIndication->BufferSize == 7 )
   16f80:	687b      	ldr	r3, [r7, #4]
   16f82:	7b1b      	ldrb	r3, [r3, #12]
   16f84:	2b07      	cmp	r3, #7
   16f86:	d148      	bne.n	1701a <McpsIndication+0x41e>
                            mlmeReq.Type = MLME_TXCW_1;
   16f88:	2308      	movs	r3, #8
   16f8a:	18fb      	adds	r3, r7, r3
   16f8c:	2205      	movs	r2, #5
   16f8e:	701a      	strb	r2, [r3, #0]
                            mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
   16f90:	687b      	ldr	r3, [r7, #4]
   16f92:	689b      	ldr	r3, [r3, #8]
   16f94:	3301      	adds	r3, #1
   16f96:	781b      	ldrb	r3, [r3, #0]
   16f98:	021b      	lsls	r3, r3, #8
   16f9a:	b21a      	sxth	r2, r3
   16f9c:	687b      	ldr	r3, [r7, #4]
   16f9e:	689b      	ldr	r3, [r3, #8]
   16fa0:	3302      	adds	r3, #2
   16fa2:	781b      	ldrb	r3, [r3, #0]
   16fa4:	b21b      	sxth	r3, r3
   16fa6:	4313      	orrs	r3, r2
   16fa8:	b21b      	sxth	r3, r3
   16faa:	b29a      	uxth	r2, r3
   16fac:	2308      	movs	r3, #8
   16fae:	18fb      	adds	r3, r7, r3
   16fb0:	809a      	strh	r2, [r3, #4]
                            mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
   16fb2:	687b      	ldr	r3, [r7, #4]
   16fb4:	689b      	ldr	r3, [r3, #8]
   16fb6:	3303      	adds	r3, #3
   16fb8:	781b      	ldrb	r3, [r3, #0]
   16fba:	041a      	lsls	r2, r3, #16
   16fbc:	687b      	ldr	r3, [r7, #4]
   16fbe:	689b      	ldr	r3, [r3, #8]
   16fc0:	3304      	adds	r3, #4
   16fc2:	781b      	ldrb	r3, [r3, #0]
   16fc4:	021b      	lsls	r3, r3, #8
   16fc6:	431a      	orrs	r2, r3
   16fc8:	687b      	ldr	r3, [r7, #4]
   16fca:	689b      	ldr	r3, [r3, #8]
   16fcc:	3305      	adds	r3, #5
   16fce:	781b      	ldrb	r3, [r3, #0]
   16fd0:	4313      	orrs	r3, r2
   16fd2:	001a      	movs	r2, r3
   16fd4:	2364      	movs	r3, #100	; 0x64
   16fd6:	435a      	muls	r2, r3
   16fd8:	2308      	movs	r3, #8
   16fda:	18fb      	adds	r3, r7, r3
   16fdc:	609a      	str	r2, [r3, #8]
                            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
   16fde:	687b      	ldr	r3, [r7, #4]
   16fe0:	689b      	ldr	r3, [r3, #8]
   16fe2:	799a      	ldrb	r2, [r3, #6]
   16fe4:	2308      	movs	r3, #8
   16fe6:	18fb      	adds	r3, r7, r3
   16fe8:	731a      	strb	r2, [r3, #12]
                            LoRaMacStatus_t status = LoRaMacMlmeRequest( &mlmeReq );
   16fea:	2394      	movs	r3, #148	; 0x94
   16fec:	18fc      	adds	r4, r7, r3
   16fee:	2308      	movs	r3, #8
   16ff0:	18fb      	adds	r3, r7, r3
   16ff2:	0018      	movs	r0, r3
   16ff4:	4b3f      	ldr	r3, [pc, #252]	; (170f4 <McpsIndication+0x4f8>)
   16ff6:	4798      	blx	r3
   16ff8:	0003      	movs	r3, r0
   16ffa:	7023      	strb	r3, [r4, #0]
                            printf( "\r\n###### ===== MLME-Request - MLME_TXCW1 ==== ######\r\n" );
   16ffc:	4b3e      	ldr	r3, [pc, #248]	; (170f8 <McpsIndication+0x4fc>)
   16ffe:	0018      	movs	r0, r3
   17000:	4b3e      	ldr	r3, [pc, #248]	; (170fc <McpsIndication+0x500>)
   17002:	4798      	blx	r3
                            printf( "STATUS      : %s\r\n", MacStatusStrings[status] );
   17004:	2394      	movs	r3, #148	; 0x94
   17006:	18fb      	adds	r3, r7, r3
   17008:	781a      	ldrb	r2, [r3, #0]
   1700a:	4b3d      	ldr	r3, [pc, #244]	; (17100 <McpsIndication+0x504>)
   1700c:	0092      	lsls	r2, r2, #2
   1700e:	58d2      	ldr	r2, [r2, r3]
   17010:	4b3c      	ldr	r3, [pc, #240]	; (17104 <McpsIndication+0x508>)
   17012:	0011      	movs	r1, r2
   17014:	0018      	movs	r0, r3
   17016:	4b3c      	ldr	r3, [pc, #240]	; (17108 <McpsIndication+0x50c>)
   17018:	4798      	blx	r3
                        ComplianceTest.State = 1;
   1701a:	4b3c      	ldr	r3, [pc, #240]	; (1710c <McpsIndication+0x510>)
   1701c:	2201      	movs	r2, #1
   1701e:	705a      	strb	r2, [r3, #1]
                    break;
   17020:	e000      	b.n	17024 <McpsIndication+0x428>
                    break;
   17022:	46c0      	nop			; (mov r8, r8)
            break;
   17024:	e003      	b.n	1702e <McpsIndication+0x432>
            break;
   17026:	46c0      	nop			; (mov r8, r8)
   17028:	e002      	b.n	17030 <McpsIndication+0x434>
            break;
   1702a:	46c0      	nop			; (mov r8, r8)
   1702c:	e000      	b.n	17030 <McpsIndication+0x434>
            break;
   1702e:	46c0      	nop			; (mov r8, r8)
        }
    }

    // Switch LED 1 ON for each received downlink
    GpioWrite( &Led1, 1 );
   17030:	4b37      	ldr	r3, [pc, #220]	; (17110 <McpsIndication+0x514>)
   17032:	2101      	movs	r1, #1
   17034:	0018      	movs	r0, r3
   17036:	4b37      	ldr	r3, [pc, #220]	; (17114 <McpsIndication+0x518>)
   17038:	4798      	blx	r3
    TimerStart( &Led2Timer );
   1703a:	4b37      	ldr	r3, [pc, #220]	; (17118 <McpsIndication+0x51c>)
   1703c:	0018      	movs	r0, r3
   1703e:	4b37      	ldr	r3, [pc, #220]	; (1711c <McpsIndication+0x520>)
   17040:	4798      	blx	r3

    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
   17042:	2380      	movs	r3, #128	; 0x80
   17044:	18fb      	adds	r3, r7, r3
   17046:	4a36      	ldr	r2, [pc, #216]	; (17120 <McpsIndication+0x524>)
   17048:	ca13      	ldmia	r2!, {r0, r1, r4}
   1704a:	c313      	stmia	r3!, {r0, r1, r4}
   1704c:	ca03      	ldmia	r2!, {r0, r1}
   1704e:	c303      	stmia	r3!, {r0, r1}

    printf( "\r\n###### ===== DOWNLINK FRAME %lu ==== ######\r\n", mcpsIndication->DownLinkCounter );
   17050:	687b      	ldr	r3, [r7, #4]
   17052:	695a      	ldr	r2, [r3, #20]
   17054:	4b33      	ldr	r3, [pc, #204]	; (17124 <McpsIndication+0x528>)
   17056:	0011      	movs	r1, r2
   17058:	0018      	movs	r0, r3
   1705a:	4b2b      	ldr	r3, [pc, #172]	; (17108 <McpsIndication+0x50c>)
   1705c:	4798      	blx	r3

    printf( "RX WINDOW   : %s\r\n", slotStrings[mcpsIndication->RxSlot] );
   1705e:	687b      	ldr	r3, [r7, #4]
   17060:	7c5b      	ldrb	r3, [r3, #17]
   17062:	001a      	movs	r2, r3
   17064:	2380      	movs	r3, #128	; 0x80
   17066:	18fb      	adds	r3, r7, r3
   17068:	0092      	lsls	r2, r2, #2
   1706a:	58d2      	ldr	r2, [r2, r3]
   1706c:	4b2e      	ldr	r3, [pc, #184]	; (17128 <McpsIndication+0x52c>)
   1706e:	0011      	movs	r1, r2
   17070:	0018      	movs	r0, r3
   17072:	4b25      	ldr	r3, [pc, #148]	; (17108 <McpsIndication+0x50c>)
   17074:	4798      	blx	r3
    
    printf( "RX PORT     : %d\r\n", mcpsIndication->Port );
   17076:	687b      	ldr	r3, [r7, #4]
   17078:	78db      	ldrb	r3, [r3, #3]
   1707a:	001a      	movs	r2, r3
   1707c:	4b2b      	ldr	r3, [pc, #172]	; (1712c <McpsIndication+0x530>)
   1707e:	0011      	movs	r1, r2
   17080:	0018      	movs	r0, r3
   17082:	4b21      	ldr	r3, [pc, #132]	; (17108 <McpsIndication+0x50c>)
   17084:	4798      	blx	r3

    if( mcpsIndication->BufferSize != 0 )
   17086:	687b      	ldr	r3, [r7, #4]
   17088:	7b1b      	ldrb	r3, [r3, #12]
   1708a:	2b00      	cmp	r3, #0
   1708c:	d00b      	beq.n	170a6 <McpsIndication+0x4aa>
    {
        printf( "RX DATA     : \r\n" );
   1708e:	4b28      	ldr	r3, [pc, #160]	; (17130 <McpsIndication+0x534>)
   17090:	0018      	movs	r0, r3
   17092:	4b1a      	ldr	r3, [pc, #104]	; (170fc <McpsIndication+0x500>)
   17094:	4798      	blx	r3
        PrintHexBuffer( mcpsIndication->Buffer, mcpsIndication->BufferSize );
   17096:	687b      	ldr	r3, [r7, #4]
   17098:	689a      	ldr	r2, [r3, #8]
   1709a:	687b      	ldr	r3, [r7, #4]
   1709c:	7b1b      	ldrb	r3, [r3, #12]
   1709e:	0019      	movs	r1, r3
   170a0:	0010      	movs	r0, r2
   170a2:	4b24      	ldr	r3, [pc, #144]	; (17134 <McpsIndication+0x538>)
   170a4:	4798      	blx	r3
    }

    printf( "\r\n" );
   170a6:	4b24      	ldr	r3, [pc, #144]	; (17138 <McpsIndication+0x53c>)
   170a8:	0018      	movs	r0, r3
   170aa:	4b14      	ldr	r3, [pc, #80]	; (170fc <McpsIndication+0x500>)
   170ac:	4798      	blx	r3
    printf( "DATA RATE   : DR_%d\r\n", mcpsIndication->RxDatarate );
   170ae:	687b      	ldr	r3, [r7, #4]
   170b0:	791b      	ldrb	r3, [r3, #4]
   170b2:	001a      	movs	r2, r3
   170b4:	4b21      	ldr	r3, [pc, #132]	; (1713c <McpsIndication+0x540>)
   170b6:	0011      	movs	r1, r2
   170b8:	0018      	movs	r0, r3
   170ba:	4b13      	ldr	r3, [pc, #76]	; (17108 <McpsIndication+0x50c>)
   170bc:	4798      	blx	r3
    printf( "RX RSSI     : %d\r\n", mcpsIndication->Rssi );
   170be:	687b      	ldr	r3, [r7, #4]
   170c0:	220e      	movs	r2, #14
   170c2:	5e9b      	ldrsh	r3, [r3, r2]
   170c4:	001a      	movs	r2, r3
   170c6:	4b1e      	ldr	r3, [pc, #120]	; (17140 <McpsIndication+0x544>)
   170c8:	0011      	movs	r1, r2
   170ca:	0018      	movs	r0, r3
   170cc:	4b0e      	ldr	r3, [pc, #56]	; (17108 <McpsIndication+0x50c>)
   170ce:	4798      	blx	r3
    printf( "RX SNR      : %d\r\n", mcpsIndication->Snr );
   170d0:	687b      	ldr	r3, [r7, #4]
   170d2:	7c1b      	ldrb	r3, [r3, #16]
   170d4:	b25b      	sxtb	r3, r3
   170d6:	001a      	movs	r2, r3
   170d8:	4b1a      	ldr	r3, [pc, #104]	; (17144 <McpsIndication+0x548>)
   170da:	0011      	movs	r1, r2
   170dc:	0018      	movs	r0, r3
   170de:	4b0a      	ldr	r3, [pc, #40]	; (17108 <McpsIndication+0x50c>)
   170e0:	4798      	blx	r3

    printf( "\r\n" );
   170e2:	4b15      	ldr	r3, [pc, #84]	; (17138 <McpsIndication+0x53c>)
   170e4:	0018      	movs	r0, r3
   170e6:	4b05      	ldr	r3, [pc, #20]	; (170fc <McpsIndication+0x500>)
   170e8:	4798      	blx	r3
   170ea:	e000      	b.n	170ee <McpsIndication+0x4f2>
        return;
   170ec:	46c0      	nop			; (mov r8, r8)
}
   170ee:	46bd      	mov	sp, r7
   170f0:	b027      	add	sp, #156	; 0x9c
   170f2:	bd90      	pop	{r4, r7, pc}
   170f4:	0000ab61 	.word	0x0000ab61
   170f8:	0001fe7c 	.word	0x0001fe7c
   170fc:	0001a239 	.word	0x0001a239
   17100:	200000a8 	.word	0x200000a8
   17104:	0001fc58 	.word	0x0001fc58
   17108:	0001a175 	.word	0x0001a175
   1710c:	20001db8 	.word	0x20001db8
   17110:	20001ba4 	.word	0x20001ba4
   17114:	00015ca1 	.word	0x00015ca1
   17118:	20001b04 	.word	0x20001b04
   1711c:	00015fc1 	.word	0x00015fc1
   17120:	0001ff70 	.word	0x0001ff70
   17124:	0001feb4 	.word	0x0001feb4
   17128:	0001fee4 	.word	0x0001fee4
   1712c:	0001fef8 	.word	0x0001fef8
   17130:	0001ff0c 	.word	0x0001ff0c
   17134:	000165bd 	.word	0x000165bd
   17138:	0001fc14 	.word	0x0001fc14
   1713c:	0001fd80 	.word	0x0001fd80
   17140:	0001ff1c 	.word	0x0001ff1c
   17144:	0001ff30 	.word	0x0001ff30

00017148 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
   17148:	b580      	push	{r7, lr}
   1714a:	b088      	sub	sp, #32
   1714c:	af00      	add	r7, sp, #0
   1714e:	6078      	str	r0, [r7, #4]
    printf( "\r\n###### ===== MLME-Confirm ==== ######\r\n" );
   17150:	4b36      	ldr	r3, [pc, #216]	; (1722c <MlmeConfirm+0xe4>)
   17152:	0018      	movs	r0, r3
   17154:	4b36      	ldr	r3, [pc, #216]	; (17230 <MlmeConfirm+0xe8>)
   17156:	4798      	blx	r3
    printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
   17158:	687b      	ldr	r3, [r7, #4]
   1715a:	785b      	ldrb	r3, [r3, #1]
   1715c:	001a      	movs	r2, r3
   1715e:	4b35      	ldr	r3, [pc, #212]	; (17234 <MlmeConfirm+0xec>)
   17160:	0092      	lsls	r2, r2, #2
   17162:	58d2      	ldr	r2, [r2, r3]
   17164:	4b34      	ldr	r3, [pc, #208]	; (17238 <MlmeConfirm+0xf0>)
   17166:	0011      	movs	r1, r2
   17168:	0018      	movs	r0, r3
   1716a:	4b34      	ldr	r3, [pc, #208]	; (1723c <MlmeConfirm+0xf4>)
   1716c:	4798      	blx	r3
    if( mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
    {
    }
    switch( mlmeConfirm->MlmeRequest )
   1716e:	687b      	ldr	r3, [r7, #4]
   17170:	781b      	ldrb	r3, [r3, #0]
   17172:	2b00      	cmp	r3, #0
   17174:	d002      	beq.n	1717c <MlmeConfirm+0x34>
   17176:	2b03      	cmp	r3, #3
   17178:	d03f      	beq.n	171fa <MlmeConfirm+0xb2>
                }
            }
            break;
        }
        default:
            break;
   1717a:	e052      	b.n	17222 <MlmeConfirm+0xda>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
   1717c:	687b      	ldr	r3, [r7, #4]
   1717e:	785b      	ldrb	r3, [r3, #1]
   17180:	2b00      	cmp	r3, #0
   17182:	d137      	bne.n	171f4 <MlmeConfirm+0xac>
                printf( "###### ===== JOINED ==== ######\r\n" );
   17184:	4b2e      	ldr	r3, [pc, #184]	; (17240 <MlmeConfirm+0xf8>)
   17186:	0018      	movs	r0, r3
   17188:	4b29      	ldr	r3, [pc, #164]	; (17230 <MlmeConfirm+0xe8>)
   1718a:	4798      	blx	r3
                printf( "\r\nOTAA\r\n\r\n" );
   1718c:	4b2d      	ldr	r3, [pc, #180]	; (17244 <MlmeConfirm+0xfc>)
   1718e:	0018      	movs	r0, r3
   17190:	4b27      	ldr	r3, [pc, #156]	; (17230 <MlmeConfirm+0xe8>)
   17192:	4798      	blx	r3
                mibGet.Type = MIB_DEV_ADDR;
   17194:	2308      	movs	r3, #8
   17196:	18fb      	adds	r3, r7, r3
   17198:	2204      	movs	r2, #4
   1719a:	701a      	strb	r2, [r3, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
   1719c:	2308      	movs	r3, #8
   1719e:	18fb      	adds	r3, r7, r3
   171a0:	0018      	movs	r0, r3
   171a2:	4b29      	ldr	r3, [pc, #164]	; (17248 <MlmeConfirm+0x100>)
   171a4:	4798      	blx	r3
                printf( "DevAddr     : %08lX\r\n", mibGet.Param.DevAddr );
   171a6:	2308      	movs	r3, #8
   171a8:	18fb      	adds	r3, r7, r3
   171aa:	685a      	ldr	r2, [r3, #4]
   171ac:	4b27      	ldr	r3, [pc, #156]	; (1724c <MlmeConfirm+0x104>)
   171ae:	0011      	movs	r1, r2
   171b0:	0018      	movs	r0, r3
   171b2:	4b22      	ldr	r3, [pc, #136]	; (1723c <MlmeConfirm+0xf4>)
   171b4:	4798      	blx	r3
                printf( "\n\r\n" );
   171b6:	4b26      	ldr	r3, [pc, #152]	; (17250 <MlmeConfirm+0x108>)
   171b8:	0018      	movs	r0, r3
   171ba:	4b1d      	ldr	r3, [pc, #116]	; (17230 <MlmeConfirm+0xe8>)
   171bc:	4798      	blx	r3
                mibGet.Type = MIB_CHANNELS_DATARATE;
   171be:	2308      	movs	r3, #8
   171c0:	18fb      	adds	r3, r7, r3
   171c2:	2228      	movs	r2, #40	; 0x28
   171c4:	701a      	strb	r2, [r3, #0]
                LoRaMacMibGetRequestConfirm( &mibGet );
   171c6:	2308      	movs	r3, #8
   171c8:	18fb      	adds	r3, r7, r3
   171ca:	0018      	movs	r0, r3
   171cc:	4b1e      	ldr	r3, [pc, #120]	; (17248 <MlmeConfirm+0x100>)
   171ce:	4798      	blx	r3
                printf( "DATA RATE   : DR_%d\r\n", mibGet.Param.ChannelsDatarate );
   171d0:	2308      	movs	r3, #8
   171d2:	18fb      	adds	r3, r7, r3
   171d4:	791b      	ldrb	r3, [r3, #4]
   171d6:	b25b      	sxtb	r3, r3
   171d8:	001a      	movs	r2, r3
   171da:	4b1e      	ldr	r3, [pc, #120]	; (17254 <MlmeConfirm+0x10c>)
   171dc:	0011      	movs	r1, r2
   171de:	0018      	movs	r0, r3
   171e0:	4b16      	ldr	r3, [pc, #88]	; (1723c <MlmeConfirm+0xf4>)
   171e2:	4798      	blx	r3
                printf( "\r\n" );
   171e4:	4b1c      	ldr	r3, [pc, #112]	; (17258 <MlmeConfirm+0x110>)
   171e6:	0018      	movs	r0, r3
   171e8:	4b11      	ldr	r3, [pc, #68]	; (17230 <MlmeConfirm+0xe8>)
   171ea:	4798      	blx	r3
                DeviceState = DEVICE_STATE_SEND;
   171ec:	4b1b      	ldr	r3, [pc, #108]	; (1725c <MlmeConfirm+0x114>)
   171ee:	2203      	movs	r2, #3
   171f0:	701a      	strb	r2, [r3, #0]
            break;
   171f2:	e016      	b.n	17222 <MlmeConfirm+0xda>
                JoinNetwork( );
   171f4:	4b1a      	ldr	r3, [pc, #104]	; (17260 <MlmeConfirm+0x118>)
   171f6:	4798      	blx	r3
            break;
   171f8:	e013      	b.n	17222 <MlmeConfirm+0xda>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
   171fa:	687b      	ldr	r3, [r7, #4]
   171fc:	785b      	ldrb	r3, [r3, #1]
   171fe:	2b00      	cmp	r3, #0
   17200:	d10e      	bne.n	17220 <MlmeConfirm+0xd8>
                if( ComplianceTest.Running == true )
   17202:	4b18      	ldr	r3, [pc, #96]	; (17264 <MlmeConfirm+0x11c>)
   17204:	781b      	ldrb	r3, [r3, #0]
   17206:	2b00      	cmp	r3, #0
   17208:	d00a      	beq.n	17220 <MlmeConfirm+0xd8>
                    ComplianceTest.LinkCheck = true;
   1720a:	4b16      	ldr	r3, [pc, #88]	; (17264 <MlmeConfirm+0x11c>)
   1720c:	2201      	movs	r2, #1
   1720e:	739a      	strb	r2, [r3, #14]
                    ComplianceTest.DemodMargin = mlmeConfirm->DemodMargin;
   17210:	687b      	ldr	r3, [r7, #4]
   17212:	7a1a      	ldrb	r2, [r3, #8]
   17214:	4b13      	ldr	r3, [pc, #76]	; (17264 <MlmeConfirm+0x11c>)
   17216:	73da      	strb	r2, [r3, #15]
                    ComplianceTest.NbGateways = mlmeConfirm->NbGateways;
   17218:	687b      	ldr	r3, [r7, #4]
   1721a:	7a5a      	ldrb	r2, [r3, #9]
   1721c:	4b11      	ldr	r3, [pc, #68]	; (17264 <MlmeConfirm+0x11c>)
   1721e:	741a      	strb	r2, [r3, #16]
            break;
   17220:	46c0      	nop			; (mov r8, r8)
    }
}
   17222:	46c0      	nop			; (mov r8, r8)
   17224:	46bd      	mov	sp, r7
   17226:	b008      	add	sp, #32
   17228:	bd80      	pop	{r7, pc}
   1722a:	46c0      	nop			; (mov r8, r8)
   1722c:	0001ffa4 	.word	0x0001ffa4
   17230:	0001a239 	.word	0x0001a239
   17234:	20000104 	.word	0x20000104
   17238:	0001fc58 	.word	0x0001fc58
   1723c:	0001a175 	.word	0x0001a175
   17240:	0001ffd0 	.word	0x0001ffd0
   17244:	0001fff4 	.word	0x0001fff4
   17248:	00009e65 	.word	0x00009e65
   1724c:	00020000 	.word	0x00020000
   17250:	00020018 	.word	0x00020018
   17254:	0001fd80 	.word	0x0001fd80
   17258:	0001fc14 	.word	0x0001fc14
   1725c:	20001b1d 	.word	0x20001b1d
   17260:	00016665 	.word	0x00016665
   17264:	20001db8 	.word	0x20001db8

00017268 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] mlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
   17268:	b580      	push	{r7, lr}
   1726a:	b082      	sub	sp, #8
   1726c:	af00      	add	r7, sp, #0
   1726e:	6078      	str	r0, [r7, #4]
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
   17270:	687b      	ldr	r3, [r7, #4]
   17272:	785b      	ldrb	r3, [r3, #1]
   17274:	2b0e      	cmp	r3, #14
   17276:	d00e      	beq.n	17296 <MlmeIndication+0x2e>
    {
        printf( "\r\n###### ===== MLME-Indication ==== ######\r\n" );
   17278:	4b0d      	ldr	r3, [pc, #52]	; (172b0 <MlmeIndication+0x48>)
   1727a:	0018      	movs	r0, r3
   1727c:	4b0d      	ldr	r3, [pc, #52]	; (172b4 <MlmeIndication+0x4c>)
   1727e:	4798      	blx	r3
        printf( "STATUS      : %s\r\n", EventInfoStatusStrings[mlmeIndication->Status] );
   17280:	687b      	ldr	r3, [r7, #4]
   17282:	785b      	ldrb	r3, [r3, #1]
   17284:	001a      	movs	r2, r3
   17286:	4b0c      	ldr	r3, [pc, #48]	; (172b8 <MlmeIndication+0x50>)
   17288:	0092      	lsls	r2, r2, #2
   1728a:	58d2      	ldr	r2, [r2, r3]
   1728c:	4b0b      	ldr	r3, [pc, #44]	; (172bc <MlmeIndication+0x54>)
   1728e:	0011      	movs	r1, r2
   17290:	0018      	movs	r0, r3
   17292:	4b0b      	ldr	r3, [pc, #44]	; (172c0 <MlmeIndication+0x58>)
   17294:	4798      	blx	r3
    }
    if( mlmeIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
    {
    }
    switch( mlmeIndication->MlmeIndication )
   17296:	687b      	ldr	r3, [r7, #4]
   17298:	781b      	ldrb	r3, [r3, #0]
   1729a:	2b06      	cmp	r3, #6
   1729c:	d000      	beq.n	172a0 <MlmeIndication+0x38>
        {// The MAC signals that we shall provide an uplink as soon as possible
            OnTxNextPacketTimerEvent( NULL );
            break;
        }
        default:
            break;
   1729e:	e003      	b.n	172a8 <MlmeIndication+0x40>
            OnTxNextPacketTimerEvent( NULL );
   172a0:	2000      	movs	r0, #0
   172a2:	4b08      	ldr	r3, [pc, #32]	; (172c4 <MlmeIndication+0x5c>)
   172a4:	4798      	blx	r3
            break;
   172a6:	46c0      	nop			; (mov r8, r8)
    }
}
   172a8:	46c0      	nop			; (mov r8, r8)
   172aa:	46bd      	mov	sp, r7
   172ac:	b002      	add	sp, #8
   172ae:	bd80      	pop	{r7, pc}
   172b0:	0002001c 	.word	0x0002001c
   172b4:	0001a239 	.word	0x0001a239
   172b8:	20000104 	.word	0x20000104
   172bc:	0001fc58 	.word	0x0001fc58
   172c0:	0001a175 	.word	0x0001a175
   172c4:	000168e5 	.word	0x000168e5

000172c8 <OnMacProcessNotify>:

void OnMacProcessNotify( void )
{
   172c8:	b580      	push	{r7, lr}
   172ca:	af00      	add	r7, sp, #0
    IsMacProcessPending = 1;
   172cc:	4b02      	ldr	r3, [pc, #8]	; (172d8 <OnMacProcessNotify+0x10>)
   172ce:	2201      	movs	r2, #1
   172d0:	701a      	strb	r2, [r3, #0]
}
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	46bd      	mov	sp, r7
   172d6:	bd80      	pop	{r7, pc}
   172d8:	20001b1c 	.word	0x20001b1c

000172dc <main>:

/**
 * Main application entry point.
 */
int main( void )
{
   172dc:	b590      	push	{r4, r7, lr}
   172de:	b095      	sub	sp, #84	; 0x54
   172e0:	af00      	add	r7, sp, #0
    LoRaMacPrimitives_t macPrimitives;
    LoRaMacCallback_t macCallbacks;
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    BoardInitMcu( );
   172e2:	4be0      	ldr	r3, [pc, #896]	; (17664 <main+0x388>)
   172e4:	4798      	blx	r3
    BoardInitPeriph( );
   172e6:	4be0      	ldr	r3, [pc, #896]	; (17668 <main+0x38c>)
   172e8:	4798      	blx	r3

    macPrimitives.MacMcpsConfirm = McpsConfirm;
   172ea:	2330      	movs	r3, #48	; 0x30
   172ec:	18fb      	adds	r3, r7, r3
   172ee:	4adf      	ldr	r2, [pc, #892]	; (1766c <main+0x390>)
   172f0:	601a      	str	r2, [r3, #0]
    macPrimitives.MacMcpsIndication = McpsIndication;
   172f2:	2330      	movs	r3, #48	; 0x30
   172f4:	18fb      	adds	r3, r7, r3
   172f6:	4ade      	ldr	r2, [pc, #888]	; (17670 <main+0x394>)
   172f8:	605a      	str	r2, [r3, #4]
    macPrimitives.MacMlmeConfirm = MlmeConfirm;
   172fa:	2330      	movs	r3, #48	; 0x30
   172fc:	18fb      	adds	r3, r7, r3
   172fe:	4add      	ldr	r2, [pc, #884]	; (17674 <main+0x398>)
   17300:	609a      	str	r2, [r3, #8]
    macPrimitives.MacMlmeIndication = MlmeIndication;
   17302:	2330      	movs	r3, #48	; 0x30
   17304:	18fb      	adds	r3, r7, r3
   17306:	4adc      	ldr	r2, [pc, #880]	; (17678 <main+0x39c>)
   17308:	60da      	str	r2, [r3, #12]
    macCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
   1730a:	2320      	movs	r3, #32
   1730c:	18fb      	adds	r3, r7, r3
   1730e:	4adb      	ldr	r2, [pc, #876]	; (1767c <main+0x3a0>)
   17310:	601a      	str	r2, [r3, #0]
    macCallbacks.GetTemperatureLevel = NULL;
   17312:	2320      	movs	r3, #32
   17314:	18fb      	adds	r3, r7, r3
   17316:	2200      	movs	r2, #0
   17318:	605a      	str	r2, [r3, #4]
    macCallbacks.NvmContextChange = NvmCtxMgmtEvent;
   1731a:	2320      	movs	r3, #32
   1731c:	18fb      	adds	r3, r7, r3
   1731e:	4ad8      	ldr	r2, [pc, #864]	; (17680 <main+0x3a4>)
   17320:	609a      	str	r2, [r3, #8]
    macCallbacks.MacProcessNotify = OnMacProcessNotify;
   17322:	2320      	movs	r3, #32
   17324:	18fb      	adds	r3, r7, r3
   17326:	4ad7      	ldr	r2, [pc, #860]	; (17684 <main+0x3a8>)
   17328:	60da      	str	r2, [r3, #12]

    LoRaMacInitialization( &macPrimitives, &macCallbacks, ACTIVE_REGION );
   1732a:	2320      	movs	r3, #32
   1732c:	18f9      	adds	r1, r7, r3
   1732e:	2330      	movs	r3, #48	; 0x30
   17330:	18fb      	adds	r3, r7, r3
   17332:	2205      	movs	r2, #5
   17334:	0018      	movs	r0, r3
   17336:	4bd4      	ldr	r3, [pc, #848]	; (17688 <main+0x3ac>)
   17338:	4798      	blx	r3

    DeviceState = DEVICE_STATE_RESTORE;
   1733a:	4bd4      	ldr	r3, [pc, #848]	; (1768c <main+0x3b0>)
   1733c:	2200      	movs	r2, #0
   1733e:	701a      	strb	r2, [r3, #0]

    printf( "###### ===== ClassC demo application v1.0.RC1 ==== ######\r\n\r\n" );
   17340:	4bd3      	ldr	r3, [pc, #844]	; (17690 <main+0x3b4>)
   17342:	0018      	movs	r0, r3
   17344:	4bd3      	ldr	r3, [pc, #844]	; (17694 <main+0x3b8>)
   17346:	4798      	blx	r3

    while( 1 )
    {
        // Tick the RTC to execute callback in context of the main loop (in stead of the IRQ)
        TimerProcess( );
   17348:	4bd3      	ldr	r3, [pc, #844]	; (17698 <main+0x3bc>)
   1734a:	4798      	blx	r3
        // Process Radio IRQ
        if( Radio.IrqProcess != NULL )
   1734c:	4bd3      	ldr	r3, [pc, #844]	; (1769c <main+0x3c0>)
   1734e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   17350:	2b00      	cmp	r3, #0
   17352:	d002      	beq.n	1735a <main+0x7e>
        {
            Radio.IrqProcess( );
   17354:	4bd1      	ldr	r3, [pc, #836]	; (1769c <main+0x3c0>)
   17356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   17358:	4798      	blx	r3
        }
        // Processes the LoRaMac events
        LoRaMacProcess( );
   1735a:	4bd1      	ldr	r3, [pc, #836]	; (176a0 <main+0x3c4>)
   1735c:	4798      	blx	r3

        switch( DeviceState )
   1735e:	4bcb      	ldr	r3, [pc, #812]	; (1768c <main+0x3b0>)
   17360:	781b      	ldrb	r3, [r3, #0]
   17362:	2b05      	cmp	r3, #5
   17364:	d900      	bls.n	17368 <main+0x8c>
   17366:	e209      	b.n	1777c <main+0x4a0>
   17368:	009a      	lsls	r2, r3, #2
   1736a:	4bce      	ldr	r3, [pc, #824]	; (176a4 <main+0x3c8>)
   1736c:	18d3      	adds	r3, r2, r3
   1736e:	681b      	ldr	r3, [r3, #0]
   17370:	469f      	mov	pc, r3
        {
            case DEVICE_STATE_RESTORE:
            {
                // Try to restore from NVM and query the mac if possible.
                if( NvmCtxMgmtRestore( ) == NVMCTXMGMT_STATUS_SUCCESS )
   17372:	4bcd      	ldr	r3, [pc, #820]	; (176a8 <main+0x3cc>)
   17374:	4798      	blx	r3
   17376:	1e03      	subs	r3, r0, #0
   17378:	d104      	bne.n	17384 <main+0xa8>
                {
                    printf( "\r\n###### ===== CTXS RESTORED ==== ######\r\n\r\n" );
   1737a:	4bcc      	ldr	r3, [pc, #816]	; (176ac <main+0x3d0>)
   1737c:	0018      	movs	r0, r3
   1737e:	4bc5      	ldr	r3, [pc, #788]	; (17694 <main+0x3b8>)
   17380:	4798      	blx	r3
   17382:	e03d      	b.n	17400 <main+0x124>
                }
                else
                {
                    mibReq.Type = MIB_APP_KEY;
   17384:	2308      	movs	r3, #8
   17386:	18fb      	adds	r3, r7, r3
   17388:	2205      	movs	r2, #5
   1738a:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.AppKey = AppKey;
   1738c:	2308      	movs	r3, #8
   1738e:	18fb      	adds	r3, r7, r3
   17390:	4ac7      	ldr	r2, [pc, #796]	; (176b0 <main+0x3d4>)
   17392:	605a      	str	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
   17394:	2308      	movs	r3, #8
   17396:	18fb      	adds	r3, r7, r3
   17398:	0018      	movs	r0, r3
   1739a:	4bc6      	ldr	r3, [pc, #792]	; (176b4 <main+0x3d8>)
   1739c:	4798      	blx	r3

                    mibReq.Type = MIB_NWK_KEY;
   1739e:	2308      	movs	r3, #8
   173a0:	18fb      	adds	r3, r7, r3
   173a2:	2206      	movs	r2, #6
   173a4:	701a      	strb	r2, [r3, #0]
                    mibReq.Param.NwkKey = NwkKey;
   173a6:	2308      	movs	r3, #8
   173a8:	18fb      	adds	r3, r7, r3
   173aa:	4ac3      	ldr	r2, [pc, #780]	; (176b8 <main+0x3dc>)
   173ac:	605a      	str	r2, [r3, #4]
                    LoRaMacMibSetRequestConfirm( &mibReq );
   173ae:	2308      	movs	r3, #8
   173b0:	18fb      	adds	r3, r7, r3
   173b2:	0018      	movs	r0, r3
   173b4:	4bbf      	ldr	r3, [pc, #764]	; (176b4 <main+0x3d8>)
   173b6:	4798      	blx	r3

                    // Initialize LoRaMac device unique ID if not already defined in Commissioning.h
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
   173b8:	4bc0      	ldr	r3, [pc, #768]	; (176bc <main+0x3e0>)
   173ba:	781b      	ldrb	r3, [r3, #0]
   173bc:	2b00      	cmp	r3, #0
   173be:	d11f      	bne.n	17400 <main+0x124>
   173c0:	4bbe      	ldr	r3, [pc, #760]	; (176bc <main+0x3e0>)
   173c2:	785b      	ldrb	r3, [r3, #1]
   173c4:	2b00      	cmp	r3, #0
   173c6:	d11b      	bne.n	17400 <main+0x124>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
   173c8:	4bbc      	ldr	r3, [pc, #752]	; (176bc <main+0x3e0>)
   173ca:	789b      	ldrb	r3, [r3, #2]
                    if( ( DevEui[0] == 0 ) && ( DevEui[1] == 0 ) &&
   173cc:	2b00      	cmp	r3, #0
   173ce:	d117      	bne.n	17400 <main+0x124>
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
   173d0:	4bba      	ldr	r3, [pc, #744]	; (176bc <main+0x3e0>)
   173d2:	78db      	ldrb	r3, [r3, #3]
   173d4:	2b00      	cmp	r3, #0
   173d6:	d113      	bne.n	17400 <main+0x124>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
   173d8:	4bb8      	ldr	r3, [pc, #736]	; (176bc <main+0x3e0>)
   173da:	791b      	ldrb	r3, [r3, #4]
                        ( DevEui[2] == 0 ) && ( DevEui[3] == 0 ) &&
   173dc:	2b00      	cmp	r3, #0
   173de:	d10f      	bne.n	17400 <main+0x124>
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
   173e0:	4bb6      	ldr	r3, [pc, #728]	; (176bc <main+0x3e0>)
   173e2:	795b      	ldrb	r3, [r3, #5]
   173e4:	2b00      	cmp	r3, #0
   173e6:	d10b      	bne.n	17400 <main+0x124>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
   173e8:	4bb4      	ldr	r3, [pc, #720]	; (176bc <main+0x3e0>)
   173ea:	799b      	ldrb	r3, [r3, #6]
                        ( DevEui[4] == 0 ) && ( DevEui[5] == 0 ) &&
   173ec:	2b00      	cmp	r3, #0
   173ee:	d107      	bne.n	17400 <main+0x124>
                        ( DevEui[6] == 0 ) && ( DevEui[7] == 0 ) )
   173f0:	4bb2      	ldr	r3, [pc, #712]	; (176bc <main+0x3e0>)
   173f2:	79db      	ldrb	r3, [r3, #7]
   173f4:	2b00      	cmp	r3, #0
   173f6:	d103      	bne.n	17400 <main+0x124>
                    {
                        BoardGetUniqueId( DevEui );
   173f8:	4bb0      	ldr	r3, [pc, #704]	; (176bc <main+0x3e0>)
   173fa:	0018      	movs	r0, r3
   173fc:	4bb0      	ldr	r3, [pc, #704]	; (176c0 <main+0x3e4>)
   173fe:	4798      	blx	r3
                    mibReq.Type = MIB_APP_S_KEY;
                    mibReq.Param.AppSKey = AppSKey;
                    LoRaMacMibSetRequestConfirm( &mibReq );
#endif
                }
                DeviceState = DEVICE_STATE_START;
   17400:	4ba2      	ldr	r3, [pc, #648]	; (1768c <main+0x3b0>)
   17402:	2201      	movs	r2, #1
   17404:	701a      	strb	r2, [r3, #0]
                break;
   17406:	e1be      	b.n	17786 <main+0x4aa>
            }

            case DEVICE_STATE_START:
            {
                TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
   17408:	4aae      	ldr	r2, [pc, #696]	; (176c4 <main+0x3e8>)
   1740a:	4baf      	ldr	r3, [pc, #700]	; (176c8 <main+0x3ec>)
   1740c:	0011      	movs	r1, r2
   1740e:	0018      	movs	r0, r3
   17410:	4bae      	ldr	r3, [pc, #696]	; (176cc <main+0x3f0>)
   17412:	4798      	blx	r3

                TimerInit( &Led1Timer, OnLed1TimerEvent );
   17414:	4aae      	ldr	r2, [pc, #696]	; (176d0 <main+0x3f4>)
   17416:	4baf      	ldr	r3, [pc, #700]	; (176d4 <main+0x3f8>)
   17418:	0011      	movs	r1, r2
   1741a:	0018      	movs	r0, r3
   1741c:	4bab      	ldr	r3, [pc, #684]	; (176cc <main+0x3f0>)
   1741e:	4798      	blx	r3
                TimerSetValue( &Led1Timer, 25 );
   17420:	4bac      	ldr	r3, [pc, #688]	; (176d4 <main+0x3f8>)
   17422:	2119      	movs	r1, #25
   17424:	0018      	movs	r0, r3
   17426:	4bac      	ldr	r3, [pc, #688]	; (176d8 <main+0x3fc>)
   17428:	4798      	blx	r3

                TimerInit( &Led2Timer, OnLed2TimerEvent );
   1742a:	4aac      	ldr	r2, [pc, #688]	; (176dc <main+0x400>)
   1742c:	4bac      	ldr	r3, [pc, #688]	; (176e0 <main+0x404>)
   1742e:	0011      	movs	r1, r2
   17430:	0018      	movs	r0, r3
   17432:	4ba6      	ldr	r3, [pc, #664]	; (176cc <main+0x3f0>)
   17434:	4798      	blx	r3
                TimerSetValue( &Led2Timer, 25 );
   17436:	4baa      	ldr	r3, [pc, #680]	; (176e0 <main+0x404>)
   17438:	2119      	movs	r1, #25
   1743a:	0018      	movs	r0, r3
   1743c:	4ba6      	ldr	r3, [pc, #664]	; (176d8 <main+0x3fc>)
   1743e:	4798      	blx	r3

                mibReq.Type = MIB_PUBLIC_NETWORK;
   17440:	2308      	movs	r3, #8
   17442:	18fb      	adds	r3, r7, r3
   17444:	221a      	movs	r2, #26
   17446:	701a      	strb	r2, [r3, #0]
                mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
   17448:	2308      	movs	r3, #8
   1744a:	18fb      	adds	r3, r7, r3
   1744c:	2201      	movs	r2, #1
   1744e:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
   17450:	2308      	movs	r3, #8
   17452:	18fb      	adds	r3, r7, r3
   17454:	0018      	movs	r0, r3
   17456:	4b97      	ldr	r3, [pc, #604]	; (176b4 <main+0x3d8>)
   17458:	4798      	blx	r3

                mibReq.Type = MIB_ADR;
   1745a:	2308      	movs	r3, #8
   1745c:	18fb      	adds	r3, r7, r3
   1745e:	2202      	movs	r2, #2
   17460:	701a      	strb	r2, [r3, #0]
                mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
   17462:	2308      	movs	r3, #8
   17464:	18fb      	adds	r3, r7, r3
   17466:	2201      	movs	r2, #1
   17468:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
   1746a:	2308      	movs	r3, #8
   1746c:	18fb      	adds	r3, r7, r3
   1746e:	0018      	movs	r0, r3
   17470:	4b90      	ldr	r3, [pc, #576]	; (176b4 <main+0x3d8>)
   17472:	4798      	blx	r3

#if defined( REGION_EU868 )
                LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
   17474:	2001      	movs	r0, #1
   17476:	4b9b      	ldr	r3, [pc, #620]	; (176e4 <main+0x408>)
   17478:	4798      	blx	r3

#if( USE_TTN_NETWORK == 1 )
                mibReq.Type = MIB_RX2_DEFAULT_CHANNEL;
   1747a:	2308      	movs	r3, #8
   1747c:	18fb      	adds	r3, r7, r3
   1747e:	221e      	movs	r2, #30
   17480:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Rx2DefaultChannel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
   17482:	2308      	movs	r3, #8
   17484:	18fb      	adds	r3, r7, r3
   17486:	4a98      	ldr	r2, [pc, #608]	; (176e8 <main+0x40c>)
   17488:	3304      	adds	r3, #4
   1748a:	ca03      	ldmia	r2!, {r0, r1}
   1748c:	c303      	stmia	r3!, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
   1748e:	2308      	movs	r3, #8
   17490:	18fb      	adds	r3, r7, r3
   17492:	0018      	movs	r0, r3
   17494:	4b87      	ldr	r3, [pc, #540]	; (176b4 <main+0x3d8>)
   17496:	4798      	blx	r3

                mibReq.Type = MIB_RX2_CHANNEL;
   17498:	2308      	movs	r3, #8
   1749a:	18fb      	adds	r3, r7, r3
   1749c:	221d      	movs	r2, #29
   1749e:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Rx2Channel = ( Rx2ChannelParams_t ){ 869525000, DR_3 };
   174a0:	2308      	movs	r3, #8
   174a2:	18fb      	adds	r3, r7, r3
   174a4:	4a90      	ldr	r2, [pc, #576]	; (176e8 <main+0x40c>)
   174a6:	3304      	adds	r3, #4
   174a8:	ca03      	ldmia	r2!, {r0, r1}
   174aa:	c303      	stmia	r3!, {r0, r1}
                LoRaMacMibSetRequestConfirm( &mibReq );
   174ac:	2308      	movs	r3, #8
   174ae:	18fb      	adds	r3, r7, r3
   174b0:	0018      	movs	r0, r3
   174b2:	4b80      	ldr	r3, [pc, #512]	; (176b4 <main+0x3d8>)
   174b4:	4798      	blx	r3
#endif

#endif
                mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
   174b6:	2308      	movs	r3, #8
   174b8:	18fb      	adds	r3, r7, r3
   174ba:	222b      	movs	r2, #43	; 0x2b
   174bc:	701a      	strb	r2, [r3, #0]
                mibReq.Param.SystemMaxRxError = 20;
   174be:	2308      	movs	r3, #8
   174c0:	18fb      	adds	r3, r7, r3
   174c2:	2214      	movs	r2, #20
   174c4:	605a      	str	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
   174c6:	2308      	movs	r3, #8
   174c8:	18fb      	adds	r3, r7, r3
   174ca:	0018      	movs	r0, r3
   174cc:	4b79      	ldr	r3, [pc, #484]	; (176b4 <main+0x3d8>)
   174ce:	4798      	blx	r3

                mibReq.Type = MIB_DEVICE_CLASS;
   174d0:	2308      	movs	r3, #8
   174d2:	18fb      	adds	r3, r7, r3
   174d4:	2200      	movs	r2, #0
   174d6:	701a      	strb	r2, [r3, #0]
                mibReq.Param.Class = CLASS_C;
   174d8:	2308      	movs	r3, #8
   174da:	18fb      	adds	r3, r7, r3
   174dc:	2202      	movs	r2, #2
   174de:	711a      	strb	r2, [r3, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
   174e0:	2308      	movs	r3, #8
   174e2:	18fb      	adds	r3, r7, r3
   174e4:	0018      	movs	r0, r3
   174e6:	4b73      	ldr	r3, [pc, #460]	; (176b4 <main+0x3d8>)
   174e8:	4798      	blx	r3

                LoRaMacStart( );
   174ea:	4b80      	ldr	r3, [pc, #512]	; (176ec <main+0x410>)
   174ec:	4798      	blx	r3

                mibReq.Type = MIB_NETWORK_ACTIVATION;
   174ee:	2308      	movs	r3, #8
   174f0:	18fb      	adds	r3, r7, r3
   174f2:	2201      	movs	r2, #1
   174f4:	701a      	strb	r2, [r3, #0]
                status = LoRaMacMibGetRequestConfirm( &mibReq );
   174f6:	2343      	movs	r3, #67	; 0x43
   174f8:	18fc      	adds	r4, r7, r3
   174fa:	2308      	movs	r3, #8
   174fc:	18fb      	adds	r3, r7, r3
   174fe:	0018      	movs	r0, r3
   17500:	4b7b      	ldr	r3, [pc, #492]	; (176f0 <main+0x414>)
   17502:	4798      	blx	r3
   17504:	0003      	movs	r3, r0
   17506:	7023      	strb	r3, [r4, #0]

                if( status == LORAMAC_STATUS_OK )
   17508:	2343      	movs	r3, #67	; 0x43
   1750a:	18fb      	adds	r3, r7, r3
   1750c:	781b      	ldrb	r3, [r3, #0]
   1750e:	2b00      	cmp	r3, #0
   17510:	d000      	beq.n	17514 <main+0x238>
   17512:	e137      	b.n	17784 <main+0x4a8>
                {
                    if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
   17514:	2308      	movs	r3, #8
   17516:	18fb      	adds	r3, r7, r3
   17518:	791b      	ldrb	r3, [r3, #4]
   1751a:	2b00      	cmp	r3, #0
   1751c:	d103      	bne.n	17526 <main+0x24a>
                    {
                        DeviceState = DEVICE_STATE_JOIN;
   1751e:	4b5b      	ldr	r3, [pc, #364]	; (1768c <main+0x3b0>)
   17520:	2202      	movs	r2, #2
   17522:	701a      	strb	r2, [r3, #0]
   17524:	e006      	b.n	17534 <main+0x258>
                    }
                    else
                    {
                        DeviceState = DEVICE_STATE_SEND;
   17526:	4b59      	ldr	r3, [pc, #356]	; (1768c <main+0x3b0>)
   17528:	2203      	movs	r2, #3
   1752a:	701a      	strb	r2, [r3, #0]
                        NextTx = true;
   1752c:	4b71      	ldr	r3, [pc, #452]	; (176f4 <main+0x418>)
   1752e:	2201      	movs	r2, #1
   17530:	701a      	strb	r2, [r3, #0]
						break;
   17532:	e128      	b.n	17786 <main+0x4aa>
                    }
                } else break;
            }
            case DEVICE_STATE_JOIN:
            {
                printf( "DevEui      : %02X", DevEui[0] );
   17534:	4b61      	ldr	r3, [pc, #388]	; (176bc <main+0x3e0>)
   17536:	781b      	ldrb	r3, [r3, #0]
   17538:	001a      	movs	r2, r3
   1753a:	4b6f      	ldr	r3, [pc, #444]	; (176f8 <main+0x41c>)
   1753c:	0011      	movs	r1, r2
   1753e:	0018      	movs	r0, r3
   17540:	4b6e      	ldr	r3, [pc, #440]	; (176fc <main+0x420>)
   17542:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
   17544:	2301      	movs	r3, #1
   17546:	64fb      	str	r3, [r7, #76]	; 0x4c
   17548:	e00c      	b.n	17564 <main+0x288>
                {
                    printf( "-%02X", DevEui[i] );
   1754a:	4a5c      	ldr	r2, [pc, #368]	; (176bc <main+0x3e0>)
   1754c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1754e:	18d3      	adds	r3, r2, r3
   17550:	781b      	ldrb	r3, [r3, #0]
   17552:	001a      	movs	r2, r3
   17554:	4b6a      	ldr	r3, [pc, #424]	; (17700 <main+0x424>)
   17556:	0011      	movs	r1, r2
   17558:	0018      	movs	r0, r3
   1755a:	4b68      	ldr	r3, [pc, #416]	; (176fc <main+0x420>)
   1755c:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
   1755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17560:	3301      	adds	r3, #1
   17562:	64fb      	str	r3, [r7, #76]	; 0x4c
   17564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17566:	2b07      	cmp	r3, #7
   17568:	ddef      	ble.n	1754a <main+0x26e>
                }
                printf( "\r\n" );
   1756a:	4b66      	ldr	r3, [pc, #408]	; (17704 <main+0x428>)
   1756c:	0018      	movs	r0, r3
   1756e:	4b49      	ldr	r3, [pc, #292]	; (17694 <main+0x3b8>)
   17570:	4798      	blx	r3
                printf( "AppEui      : %02X", JoinEui[0] );
   17572:	4b65      	ldr	r3, [pc, #404]	; (17708 <main+0x42c>)
   17574:	781b      	ldrb	r3, [r3, #0]
   17576:	001a      	movs	r2, r3
   17578:	4b64      	ldr	r3, [pc, #400]	; (1770c <main+0x430>)
   1757a:	0011      	movs	r1, r2
   1757c:	0018      	movs	r0, r3
   1757e:	4b5f      	ldr	r3, [pc, #380]	; (176fc <main+0x420>)
   17580:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
   17582:	2301      	movs	r3, #1
   17584:	64bb      	str	r3, [r7, #72]	; 0x48
   17586:	e00c      	b.n	175a2 <main+0x2c6>
                {
                    printf( "-%02X", JoinEui[i] );
   17588:	4a5f      	ldr	r2, [pc, #380]	; (17708 <main+0x42c>)
   1758a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1758c:	18d3      	adds	r3, r2, r3
   1758e:	781b      	ldrb	r3, [r3, #0]
   17590:	001a      	movs	r2, r3
   17592:	4b5b      	ldr	r3, [pc, #364]	; (17700 <main+0x424>)
   17594:	0011      	movs	r1, r2
   17596:	0018      	movs	r0, r3
   17598:	4b58      	ldr	r3, [pc, #352]	; (176fc <main+0x420>)
   1759a:	4798      	blx	r3
                for( int i = 1; i < 8; i++ )
   1759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1759e:	3301      	adds	r3, #1
   175a0:	64bb      	str	r3, [r7, #72]	; 0x48
   175a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   175a4:	2b07      	cmp	r3, #7
   175a6:	ddef      	ble.n	17588 <main+0x2ac>
                }
                printf( "\r\n" );
   175a8:	4b56      	ldr	r3, [pc, #344]	; (17704 <main+0x428>)
   175aa:	0018      	movs	r0, r3
   175ac:	4b39      	ldr	r3, [pc, #228]	; (17694 <main+0x3b8>)
   175ae:	4798      	blx	r3
                printf( "AppKey      : %02X", NwkKey[0] );
   175b0:	4b41      	ldr	r3, [pc, #260]	; (176b8 <main+0x3dc>)
   175b2:	781b      	ldrb	r3, [r3, #0]
   175b4:	001a      	movs	r2, r3
   175b6:	4b56      	ldr	r3, [pc, #344]	; (17710 <main+0x434>)
   175b8:	0011      	movs	r1, r2
   175ba:	0018      	movs	r0, r3
   175bc:	4b4f      	ldr	r3, [pc, #316]	; (176fc <main+0x420>)
   175be:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
   175c0:	2301      	movs	r3, #1
   175c2:	647b      	str	r3, [r7, #68]	; 0x44
   175c4:	e00c      	b.n	175e0 <main+0x304>
                {
                    printf( " %02X", NwkKey[i] );
   175c6:	4a3c      	ldr	r2, [pc, #240]	; (176b8 <main+0x3dc>)
   175c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   175ca:	18d3      	adds	r3, r2, r3
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	001a      	movs	r2, r3
   175d0:	4b50      	ldr	r3, [pc, #320]	; (17714 <main+0x438>)
   175d2:	0011      	movs	r1, r2
   175d4:	0018      	movs	r0, r3
   175d6:	4b49      	ldr	r3, [pc, #292]	; (176fc <main+0x420>)
   175d8:	4798      	blx	r3
                for( int i = 1; i < 16; i++ )
   175da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   175dc:	3301      	adds	r3, #1
   175de:	647b      	str	r3, [r7, #68]	; 0x44
   175e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   175e2:	2b0f      	cmp	r3, #15
   175e4:	ddef      	ble.n	175c6 <main+0x2ea>
                }
                printf( "\n\r\n" );
   175e6:	4b4c      	ldr	r3, [pc, #304]	; (17718 <main+0x43c>)
   175e8:	0018      	movs	r0, r3
   175ea:	4b2a      	ldr	r3, [pc, #168]	; (17694 <main+0x3b8>)
   175ec:	4798      	blx	r3
                mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
                LoRaMacMibSetRequestConfirm( &mibReq );

                DeviceState = DEVICE_STATE_SEND;
#else
                JoinNetwork( );
   175ee:	4b4b      	ldr	r3, [pc, #300]	; (1771c <main+0x440>)
   175f0:	4798      	blx	r3
#endif
                break;
   175f2:	e0c8      	b.n	17786 <main+0x4aa>
            }
            case DEVICE_STATE_SEND:
            {
                if( NextTx == true )
   175f4:	4b3f      	ldr	r3, [pc, #252]	; (176f4 <main+0x418>)
   175f6:	781b      	ldrb	r3, [r3, #0]
   175f8:	2b00      	cmp	r3, #0
   175fa:	d00a      	beq.n	17612 <main+0x336>
                {
                    PrepareTxFrame( AppPort );
   175fc:	4b48      	ldr	r3, [pc, #288]	; (17720 <main+0x444>)
   175fe:	781b      	ldrb	r3, [r3, #0]
   17600:	0018      	movs	r0, r3
   17602:	4b48      	ldr	r3, [pc, #288]	; (17724 <main+0x448>)
   17604:	4798      	blx	r3

                    NextTx = SendFrame( );
   17606:	4b48      	ldr	r3, [pc, #288]	; (17728 <main+0x44c>)
   17608:	4798      	blx	r3
   1760a:	0003      	movs	r3, r0
   1760c:	001a      	movs	r2, r3
   1760e:	4b39      	ldr	r3, [pc, #228]	; (176f4 <main+0x418>)
   17610:	701a      	strb	r2, [r3, #0]
                }
                DeviceState = DEVICE_STATE_CYCLE;
   17612:	4b1e      	ldr	r3, [pc, #120]	; (1768c <main+0x3b0>)
   17614:	2204      	movs	r2, #4
   17616:	701a      	strb	r2, [r3, #0]
                break;
   17618:	e0b5      	b.n	17786 <main+0x4aa>
            }
            case DEVICE_STATE_CYCLE:
            {
                DeviceState = DEVICE_STATE_SLEEP;
   1761a:	4b1c      	ldr	r3, [pc, #112]	; (1768c <main+0x3b0>)
   1761c:	2205      	movs	r2, #5
   1761e:	701a      	strb	r2, [r3, #0]
                if( ComplianceTest.Running == true )
   17620:	4b42      	ldr	r3, [pc, #264]	; (1772c <main+0x450>)
   17622:	781b      	ldrb	r3, [r3, #0]
   17624:	2b00      	cmp	r3, #0
   17626:	d003      	beq.n	17630 <main+0x354>
                {
                    // Schedule next packet transmission
                    TxDutyCycleTime = 5000; // 5000 ms
   17628:	4b41      	ldr	r3, [pc, #260]	; (17730 <main+0x454>)
   1762a:	4a42      	ldr	r2, [pc, #264]	; (17734 <main+0x458>)
   1762c:	601a      	str	r2, [r3, #0]
   1762e:	e00d      	b.n	1764c <main+0x370>
                }
                else
                {
                    // Schedule next packet transmission
                    TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
   17630:	23fa      	movs	r3, #250	; 0xfa
   17632:	009b      	lsls	r3, r3, #2
   17634:	4a40      	ldr	r2, [pc, #256]	; (17738 <main+0x45c>)
   17636:	0019      	movs	r1, r3
   17638:	0010      	movs	r0, r2
   1763a:	4b40      	ldr	r3, [pc, #256]	; (1773c <main+0x460>)
   1763c:	4798      	blx	r3
   1763e:	0003      	movs	r3, r0
   17640:	4a3c      	ldr	r2, [pc, #240]	; (17734 <main+0x458>)
   17642:	4694      	mov	ip, r2
   17644:	4463      	add	r3, ip
   17646:	001a      	movs	r2, r3
   17648:	4b39      	ldr	r3, [pc, #228]	; (17730 <main+0x454>)
   1764a:	601a      	str	r2, [r3, #0]
                }

                // Schedule next packet transmission
                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
   1764c:	4b38      	ldr	r3, [pc, #224]	; (17730 <main+0x454>)
   1764e:	681a      	ldr	r2, [r3, #0]
   17650:	4b1d      	ldr	r3, [pc, #116]	; (176c8 <main+0x3ec>)
   17652:	0011      	movs	r1, r2
   17654:	0018      	movs	r0, r3
   17656:	4b20      	ldr	r3, [pc, #128]	; (176d8 <main+0x3fc>)
   17658:	4798      	blx	r3
                TimerStart( &TxNextPacketTimer );
   1765a:	4b1b      	ldr	r3, [pc, #108]	; (176c8 <main+0x3ec>)
   1765c:	0018      	movs	r0, r3
   1765e:	4b38      	ldr	r3, [pc, #224]	; (17740 <main+0x464>)
   17660:	4798      	blx	r3
                break;
   17662:	e090      	b.n	17786 <main+0x4aa>
   17664:	00002acd 	.word	0x00002acd
   17668:	00002aa1 	.word	0x00002aa1
   1766c:	000169bd 	.word	0x000169bd
   17670:	00016bfd 	.word	0x00016bfd
   17674:	00017149 	.word	0x00017149
   17678:	00017269 	.word	0x00017269
   1767c:	00002b91 	.word	0x00002b91
   17680:	00000115 	.word	0x00000115
   17684:	000172c9 	.word	0x000172c9
   17688:	000093dd 	.word	0x000093dd
   1768c:	20001b1d 	.word	0x20001b1d
   17690:	00020048 	.word	0x00020048
   17694:	0001a239 	.word	0x0001a239
   17698:	0001649d 	.word	0x0001649d
   1769c:	0001efe8 	.word	0x0001efe8
   176a0:	0000635d 	.word	0x0000635d
   176a4:	00020130 	.word	0x00020130
   176a8:	00000135 	.word	0x00000135
   176ac:	00020088 	.word	0x00020088
   176b0:	20000084 	.word	0x20000084
   176b4:	0000a151 	.word	0x0000a151
   176b8:	20000094 	.word	0x20000094
   176bc:	20000074 	.word	0x20000074
   176c0:	00002b81 	.word	0x00002b81
   176c4:	000168e5 	.word	0x000168e5
   176c8:	20001ad0 	.word	0x20001ad0
   176cc:	00015f85 	.word	0x00015f85
   176d0:	00016955 	.word	0x00016955
   176d4:	20001aec 	.word	0x20001aec
   176d8:	00016389 	.word	0x00016389
   176dc:	00016989 	.word	0x00016989
   176e0:	20001b04 	.word	0x20001b04
   176e4:	0000b391 	.word	0x0000b391
   176e8:	00020128 	.word	0x00020128
   176ec:	00009cb5 	.word	0x00009cb5
   176f0:	00009e65 	.word	0x00009e65
   176f4:	200000a7 	.word	0x200000a7
   176f8:	000200b4 	.word	0x000200b4
   176fc:	0001a175 	.word	0x0001a175
   17700:	000200c8 	.word	0x000200c8
   17704:	0001fc14 	.word	0x0001fc14
   17708:	2000007c 	.word	0x2000007c
   1770c:	000200d0 	.word	0x000200d0
   17710:	000200e4 	.word	0x000200e4
   17714:	000200f8 	.word	0x000200f8
   17718:	00020018 	.word	0x00020018
   1771c:	00016665 	.word	0x00016665
   17720:	200000a4 	.word	0x200000a4
   17724:	00016701 	.word	0x00016701
   17728:	000167bd 	.word	0x000167bd
   1772c:	20001db8 	.word	0x20001db8
   17730:	20001acc 	.word	0x20001acc
   17734:	00001388 	.word	0x00001388
   17738:	fffffc18 	.word	0xfffffc18
   1773c:	00002921 	.word	0x00002921
   17740:	00015fc1 	.word	0x00015fc1
            }
            case DEVICE_STATE_SLEEP:
            {
                if( NvmCtxMgmtStore( ) == NVMCTXMGMT_STATUS_SUCCESS )
   17744:	4b10      	ldr	r3, [pc, #64]	; (17788 <main+0x4ac>)
   17746:	4798      	blx	r3
   17748:	1e03      	subs	r3, r0, #0
   1774a:	d103      	bne.n	17754 <main+0x478>
                {
                    printf( "\r\n###### ===== CTXS STORED ==== ######\r\n" );
   1774c:	4b0f      	ldr	r3, [pc, #60]	; (1778c <main+0x4b0>)
   1774e:	0018      	movs	r0, r3
   17750:	4b0f      	ldr	r3, [pc, #60]	; (17790 <main+0x4b4>)
   17752:	4798      	blx	r3
                }

                CRITICAL_SECTION_BEGIN( );
   17754:	1d3b      	adds	r3, r7, #4
   17756:	0018      	movs	r0, r3
   17758:	4b0e      	ldr	r3, [pc, #56]	; (17794 <main+0x4b8>)
   1775a:	4798      	blx	r3
                if( IsMacProcessPending == 1 )
   1775c:	4b0e      	ldr	r3, [pc, #56]	; (17798 <main+0x4bc>)
   1775e:	781b      	ldrb	r3, [r3, #0]
   17760:	2b01      	cmp	r3, #1
   17762:	d103      	bne.n	1776c <main+0x490>
                {
                    // Clear flag and prevent MCU to go into low power modes.
                    IsMacProcessPending = 0;
   17764:	4b0c      	ldr	r3, [pc, #48]	; (17798 <main+0x4bc>)
   17766:	2200      	movs	r2, #0
   17768:	701a      	strb	r2, [r3, #0]
   1776a:	e001      	b.n	17770 <main+0x494>
                }
                else
                {
                    // The MCU wakes up through events
                    BoardLowPowerHandler( );
   1776c:	4b0b      	ldr	r3, [pc, #44]	; (1779c <main+0x4c0>)
   1776e:	4798      	blx	r3
                }
                CRITICAL_SECTION_END( );
   17770:	1d3b      	adds	r3, r7, #4
   17772:	0018      	movs	r0, r3
   17774:	4b0a      	ldr	r3, [pc, #40]	; (177a0 <main+0x4c4>)
   17776:	4798      	blx	r3
                break;
   17778:	46c0      	nop			; (mov r8, r8)
   1777a:	e004      	b.n	17786 <main+0x4aa>
            }
            default:
            {
                DeviceState = DEVICE_STATE_START;
   1777c:	4b09      	ldr	r3, [pc, #36]	; (177a4 <main+0x4c8>)
   1777e:	2201      	movs	r2, #1
   17780:	701a      	strb	r2, [r3, #0]
                break;
   17782:	e000      	b.n	17786 <main+0x4aa>
                } else break;
   17784:	46c0      	nop			; (mov r8, r8)
        TimerProcess( );
   17786:	e5df      	b.n	17348 <main+0x6c>
   17788:	00000129 	.word	0x00000129
   1778c:	00020100 	.word	0x00020100
   17790:	0001a239 	.word	0x0001a239
   17794:	00002a65 	.word	0x00002a65
   17798:	20001b1c 	.word	0x20001b1c
   1779c:	00002b9d 	.word	0x00002b9d
   177a0:	00002a83 	.word	0x00002a83
   177a4:	20001b1d 	.word	0x20001b1d

000177a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   177a8:	b580      	push	{r7, lr}
   177aa:	b082      	sub	sp, #8
   177ac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   177ae:	4b19      	ldr	r3, [pc, #100]	; (17814 <Reset_Handler+0x6c>)
   177b0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   177b2:	4b19      	ldr	r3, [pc, #100]	; (17818 <Reset_Handler+0x70>)
   177b4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   177b6:	687a      	ldr	r2, [r7, #4]
   177b8:	683b      	ldr	r3, [r7, #0]
   177ba:	429a      	cmp	r2, r3
   177bc:	d00c      	beq.n	177d8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   177be:	e007      	b.n	177d0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   177c0:	683b      	ldr	r3, [r7, #0]
   177c2:	1d1a      	adds	r2, r3, #4
   177c4:	603a      	str	r2, [r7, #0]
   177c6:	687a      	ldr	r2, [r7, #4]
   177c8:	1d11      	adds	r1, r2, #4
   177ca:	6079      	str	r1, [r7, #4]
   177cc:	6812      	ldr	r2, [r2, #0]
   177ce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   177d0:	683a      	ldr	r2, [r7, #0]
   177d2:	4b12      	ldr	r3, [pc, #72]	; (1781c <Reset_Handler+0x74>)
   177d4:	429a      	cmp	r2, r3
   177d6:	d3f3      	bcc.n	177c0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   177d8:	4b11      	ldr	r3, [pc, #68]	; (17820 <Reset_Handler+0x78>)
   177da:	603b      	str	r3, [r7, #0]
   177dc:	e004      	b.n	177e8 <Reset_Handler+0x40>
                *pDest++ = 0;
   177de:	683b      	ldr	r3, [r7, #0]
   177e0:	1d1a      	adds	r2, r3, #4
   177e2:	603a      	str	r2, [r7, #0]
   177e4:	2200      	movs	r2, #0
   177e6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   177e8:	683a      	ldr	r2, [r7, #0]
   177ea:	4b0e      	ldr	r3, [pc, #56]	; (17824 <Reset_Handler+0x7c>)
   177ec:	429a      	cmp	r2, r3
   177ee:	d3f6      	bcc.n	177de <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   177f0:	4b0d      	ldr	r3, [pc, #52]	; (17828 <Reset_Handler+0x80>)
   177f2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   177f4:	4b0d      	ldr	r3, [pc, #52]	; (1782c <Reset_Handler+0x84>)
   177f6:	687a      	ldr	r2, [r7, #4]
   177f8:	21ff      	movs	r1, #255	; 0xff
   177fa:	438a      	bics	r2, r1
   177fc:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   177fe:	4a0c      	ldr	r2, [pc, #48]	; (17830 <Reset_Handler+0x88>)
   17800:	6853      	ldr	r3, [r2, #4]
   17802:	2180      	movs	r1, #128	; 0x80
   17804:	430b      	orrs	r3, r1
   17806:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   17808:	4b0a      	ldr	r3, [pc, #40]	; (17834 <Reset_Handler+0x8c>)
   1780a:	4798      	blx	r3

        /* Branch to main function */
        main();
   1780c:	4b0a      	ldr	r3, [pc, #40]	; (17838 <Reset_Handler+0x90>)
   1780e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   17810:	e7fe      	b.n	17810 <Reset_Handler+0x68>
   17812:	46c0      	nop			; (mov r8, r8)
   17814:	000205e4 	.word	0x000205e4
   17818:	20000000 	.word	0x20000000
   1781c:	20000af8 	.word	0x20000af8
   17820:	20000af8 	.word	0x20000af8
   17824:	20001df4 	.word	0x20001df4
   17828:	00000000 	.word	0x00000000
   1782c:	e000ed00 	.word	0xe000ed00
   17830:	41004000 	.word	0x41004000
   17834:	0001a099 	.word	0x0001a099
   17838:	000172dd 	.word	0x000172dd

0001783c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   1783c:	b580      	push	{r7, lr}
   1783e:	af00      	add	r7, sp, #0
        while (1) {
   17840:	e7fe      	b.n	17840 <Dummy_Handler+0x4>
	...

00017844 <ceil>:
   17844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17846:	4657      	mov	r7, sl
   17848:	464e      	mov	r6, r9
   1784a:	4645      	mov	r5, r8
   1784c:	46de      	mov	lr, fp
   1784e:	004b      	lsls	r3, r1, #1
   17850:	4a41      	ldr	r2, [pc, #260]	; (17958 <ceil+0x114>)
   17852:	0d5b      	lsrs	r3, r3, #21
   17854:	b5e0      	push	{r5, r6, r7, lr}
   17856:	189f      	adds	r7, r3, r2
   17858:	0005      	movs	r5, r0
   1785a:	000c      	movs	r4, r1
   1785c:	4680      	mov	r8, r0
   1785e:	000e      	movs	r6, r1
   17860:	4689      	mov	r9, r1
   17862:	4682      	mov	sl, r0
   17864:	2f13      	cmp	r7, #19
   17866:	dc26      	bgt.n	178b6 <ceil+0x72>
   17868:	2f00      	cmp	r7, #0
   1786a:	db56      	blt.n	1791a <ceil+0xd6>
   1786c:	4b3b      	ldr	r3, [pc, #236]	; (1795c <ceil+0x118>)
   1786e:	413b      	asrs	r3, r7
   17870:	4698      	mov	r8, r3
   17872:	000b      	movs	r3, r1
   17874:	4642      	mov	r2, r8
   17876:	4013      	ands	r3, r2
   17878:	4303      	orrs	r3, r0
   1787a:	d016      	beq.n	178aa <ceil+0x66>
   1787c:	4a38      	ldr	r2, [pc, #224]	; (17960 <ceil+0x11c>)
   1787e:	4b39      	ldr	r3, [pc, #228]	; (17964 <ceil+0x120>)
   17880:	f000 fdf8 	bl	18474 <__aeabi_dadd>
   17884:	2200      	movs	r2, #0
   17886:	2300      	movs	r3, #0
   17888:	f000 fb00 	bl	17e8c <__aeabi_dcmpgt>
   1788c:	2800      	cmp	r0, #0
   1788e:	d00a      	beq.n	178a6 <ceil+0x62>
   17890:	2c00      	cmp	r4, #0
   17892:	dd03      	ble.n	1789c <ceil+0x58>
   17894:	2380      	movs	r3, #128	; 0x80
   17896:	035b      	lsls	r3, r3, #13
   17898:	413b      	asrs	r3, r7
   1789a:	4499      	add	r9, r3
   1789c:	4643      	mov	r3, r8
   1789e:	464e      	mov	r6, r9
   178a0:	439e      	bics	r6, r3
   178a2:	2300      	movs	r3, #0
   178a4:	469a      	mov	sl, r3
   178a6:	4650      	mov	r0, sl
   178a8:	0031      	movs	r1, r6
   178aa:	bc3c      	pop	{r2, r3, r4, r5}
   178ac:	4690      	mov	r8, r2
   178ae:	4699      	mov	r9, r3
   178b0:	46a2      	mov	sl, r4
   178b2:	46ab      	mov	fp, r5
   178b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178b6:	2f33      	cmp	r7, #51	; 0x33
   178b8:	dd08      	ble.n	178cc <ceil+0x88>
   178ba:	2380      	movs	r3, #128	; 0x80
   178bc:	00db      	lsls	r3, r3, #3
   178be:	429f      	cmp	r7, r3
   178c0:	d1f3      	bne.n	178aa <ceil+0x66>
   178c2:	0002      	movs	r2, r0
   178c4:	000b      	movs	r3, r1
   178c6:	f000 fdd5 	bl	18474 <__aeabi_dadd>
   178ca:	e7ee      	b.n	178aa <ceil+0x66>
   178cc:	4a26      	ldr	r2, [pc, #152]	; (17968 <ceil+0x124>)
   178ce:	4694      	mov	ip, r2
   178d0:	2201      	movs	r2, #1
   178d2:	4463      	add	r3, ip
   178d4:	4252      	negs	r2, r2
   178d6:	40da      	lsrs	r2, r3
   178d8:	4693      	mov	fp, r2
   178da:	4202      	tst	r2, r0
   178dc:	d0e5      	beq.n	178aa <ceil+0x66>
   178de:	4a20      	ldr	r2, [pc, #128]	; (17960 <ceil+0x11c>)
   178e0:	4b20      	ldr	r3, [pc, #128]	; (17964 <ceil+0x120>)
   178e2:	f000 fdc7 	bl	18474 <__aeabi_dadd>
   178e6:	2200      	movs	r2, #0
   178e8:	2300      	movs	r3, #0
   178ea:	f000 facf 	bl	17e8c <__aeabi_dcmpgt>
   178ee:	2800      	cmp	r0, #0
   178f0:	d0d9      	beq.n	178a6 <ceil+0x62>
   178f2:	2c00      	cmp	r4, #0
   178f4:	dd28      	ble.n	17948 <ceil+0x104>
   178f6:	2f14      	cmp	r7, #20
   178f8:	d023      	beq.n	17942 <ceil+0xfe>
   178fa:	2334      	movs	r3, #52	; 0x34
   178fc:	1bdb      	subs	r3, r3, r7
   178fe:	2701      	movs	r7, #1
   17900:	409f      	lsls	r7, r3
   17902:	197f      	adds	r7, r7, r5
   17904:	42af      	cmp	r7, r5
   17906:	419b      	sbcs	r3, r3
   17908:	425b      	negs	r3, r3
   1790a:	4499      	add	r9, r3
   1790c:	465b      	mov	r3, fp
   1790e:	439f      	bics	r7, r3
   17910:	464e      	mov	r6, r9
   17912:	46ba      	mov	sl, r7
   17914:	0031      	movs	r1, r6
   17916:	4650      	mov	r0, sl
   17918:	e7c7      	b.n	178aa <ceil+0x66>
   1791a:	4a11      	ldr	r2, [pc, #68]	; (17960 <ceil+0x11c>)
   1791c:	4b11      	ldr	r3, [pc, #68]	; (17964 <ceil+0x120>)
   1791e:	f000 fda9 	bl	18474 <__aeabi_dadd>
   17922:	2200      	movs	r2, #0
   17924:	2300      	movs	r3, #0
   17926:	f000 fab1 	bl	17e8c <__aeabi_dcmpgt>
   1792a:	2800      	cmp	r0, #0
   1792c:	d0bb      	beq.n	178a6 <ceil+0x62>
   1792e:	2c00      	cmp	r4, #0
   17930:	db0c      	blt.n	1794c <ceil+0x108>
   17932:	2300      	movs	r3, #0
   17934:	432c      	orrs	r4, r5
   17936:	469a      	mov	sl, r3
   17938:	2600      	movs	r6, #0
   1793a:	2c00      	cmp	r4, #0
   1793c:	d0b3      	beq.n	178a6 <ceil+0x62>
   1793e:	4e0b      	ldr	r6, [pc, #44]	; (1796c <ceil+0x128>)
   17940:	e7b1      	b.n	178a6 <ceil+0x62>
   17942:	2301      	movs	r3, #1
   17944:	469c      	mov	ip, r3
   17946:	44e1      	add	r9, ip
   17948:	4647      	mov	r7, r8
   1794a:	e7df      	b.n	1790c <ceil+0xc8>
   1794c:	2300      	movs	r3, #0
   1794e:	2680      	movs	r6, #128	; 0x80
   17950:	469a      	mov	sl, r3
   17952:	0636      	lsls	r6, r6, #24
   17954:	e7a7      	b.n	178a6 <ceil+0x62>
   17956:	46c0      	nop			; (mov r8, r8)
   17958:	fffffc01 	.word	0xfffffc01
   1795c:	000fffff 	.word	0x000fffff
   17960:	8800759c 	.word	0x8800759c
   17964:	7e37e43c 	.word	0x7e37e43c
   17968:	fffffbed 	.word	0xfffffbed
   1796c:	3ff00000 	.word	0x3ff00000

00017970 <floor>:
   17970:	4a45      	ldr	r2, [pc, #276]	; (17a88 <floor+0x118>)
   17972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17974:	4657      	mov	r7, sl
   17976:	4692      	mov	sl, r2
   17978:	004b      	lsls	r3, r1, #1
   1797a:	0d5b      	lsrs	r3, r3, #21
   1797c:	449a      	add	sl, r3
   1797e:	464e      	mov	r6, r9
   17980:	4645      	mov	r5, r8
   17982:	46de      	mov	lr, fp
   17984:	4652      	mov	r2, sl
   17986:	b5e0      	push	{r5, r6, r7, lr}
   17988:	000c      	movs	r4, r1
   1798a:	0005      	movs	r5, r0
   1798c:	000e      	movs	r6, r1
   1798e:	4689      	mov	r9, r1
   17990:	0007      	movs	r7, r0
   17992:	2a13      	cmp	r2, #19
   17994:	dc22      	bgt.n	179dc <floor+0x6c>
   17996:	2a00      	cmp	r2, #0
   17998:	db47      	blt.n	17a2a <floor+0xba>
   1799a:	4652      	mov	r2, sl
   1799c:	4b3b      	ldr	r3, [pc, #236]	; (17a8c <floor+0x11c>)
   1799e:	4113      	asrs	r3, r2
   179a0:	4698      	mov	r8, r3
   179a2:	000b      	movs	r3, r1
   179a4:	4642      	mov	r2, r8
   179a6:	4013      	ands	r3, r2
   179a8:	4303      	orrs	r3, r0
   179aa:	d011      	beq.n	179d0 <floor+0x60>
   179ac:	4a38      	ldr	r2, [pc, #224]	; (17a90 <floor+0x120>)
   179ae:	4b39      	ldr	r3, [pc, #228]	; (17a94 <floor+0x124>)
   179b0:	f000 fd60 	bl	18474 <__aeabi_dadd>
   179b4:	2200      	movs	r2, #0
   179b6:	2300      	movs	r3, #0
   179b8:	f000 fa68 	bl	17e8c <__aeabi_dcmpgt>
   179bc:	2800      	cmp	r0, #0
   179be:	d005      	beq.n	179cc <floor+0x5c>
   179c0:	2c00      	cmp	r4, #0
   179c2:	db41      	blt.n	17a48 <floor+0xd8>
   179c4:	464e      	mov	r6, r9
   179c6:	4643      	mov	r3, r8
   179c8:	2700      	movs	r7, #0
   179ca:	439e      	bics	r6, r3
   179cc:	0038      	movs	r0, r7
   179ce:	0031      	movs	r1, r6
   179d0:	bc3c      	pop	{r2, r3, r4, r5}
   179d2:	4690      	mov	r8, r2
   179d4:	4699      	mov	r9, r3
   179d6:	46a2      	mov	sl, r4
   179d8:	46ab      	mov	fp, r5
   179da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179dc:	4652      	mov	r2, sl
   179de:	2a33      	cmp	r2, #51	; 0x33
   179e0:	dd08      	ble.n	179f4 <floor+0x84>
   179e2:	2380      	movs	r3, #128	; 0x80
   179e4:	00db      	lsls	r3, r3, #3
   179e6:	459a      	cmp	sl, r3
   179e8:	d1f2      	bne.n	179d0 <floor+0x60>
   179ea:	0002      	movs	r2, r0
   179ec:	000b      	movs	r3, r1
   179ee:	f000 fd41 	bl	18474 <__aeabi_dadd>
   179f2:	e7ed      	b.n	179d0 <floor+0x60>
   179f4:	4a28      	ldr	r2, [pc, #160]	; (17a98 <floor+0x128>)
   179f6:	4694      	mov	ip, r2
   179f8:	2201      	movs	r2, #1
   179fa:	4463      	add	r3, ip
   179fc:	4252      	negs	r2, r2
   179fe:	40da      	lsrs	r2, r3
   17a00:	4693      	mov	fp, r2
   17a02:	4202      	tst	r2, r0
   17a04:	d0e4      	beq.n	179d0 <floor+0x60>
   17a06:	4a22      	ldr	r2, [pc, #136]	; (17a90 <floor+0x120>)
   17a08:	4b22      	ldr	r3, [pc, #136]	; (17a94 <floor+0x124>)
   17a0a:	f000 fd33 	bl	18474 <__aeabi_dadd>
   17a0e:	2200      	movs	r2, #0
   17a10:	2300      	movs	r3, #0
   17a12:	f000 fa3b 	bl	17e8c <__aeabi_dcmpgt>
   17a16:	2800      	cmp	r0, #0
   17a18:	d0d8      	beq.n	179cc <floor+0x5c>
   17a1a:	2c00      	cmp	r4, #0
   17a1c:	db1a      	blt.n	17a54 <floor+0xe4>
   17a1e:	465b      	mov	r3, fp
   17a20:	464e      	mov	r6, r9
   17a22:	439f      	bics	r7, r3
   17a24:	0038      	movs	r0, r7
   17a26:	0031      	movs	r1, r6
   17a28:	e7d2      	b.n	179d0 <floor+0x60>
   17a2a:	4a19      	ldr	r2, [pc, #100]	; (17a90 <floor+0x120>)
   17a2c:	4b19      	ldr	r3, [pc, #100]	; (17a94 <floor+0x124>)
   17a2e:	f000 fd21 	bl	18474 <__aeabi_dadd>
   17a32:	2200      	movs	r2, #0
   17a34:	2300      	movs	r3, #0
   17a36:	f000 fa29 	bl	17e8c <__aeabi_dcmpgt>
   17a3a:	2800      	cmp	r0, #0
   17a3c:	d0c6      	beq.n	179cc <floor+0x5c>
   17a3e:	2c00      	cmp	r4, #0
   17a40:	db16      	blt.n	17a70 <floor+0x100>
   17a42:	2700      	movs	r7, #0
   17a44:	2600      	movs	r6, #0
   17a46:	e7c1      	b.n	179cc <floor+0x5c>
   17a48:	2380      	movs	r3, #128	; 0x80
   17a4a:	4652      	mov	r2, sl
   17a4c:	035b      	lsls	r3, r3, #13
   17a4e:	4113      	asrs	r3, r2
   17a50:	4499      	add	r9, r3
   17a52:	e7b7      	b.n	179c4 <floor+0x54>
   17a54:	4653      	mov	r3, sl
   17a56:	2b14      	cmp	r3, #20
   17a58:	d012      	beq.n	17a80 <floor+0x110>
   17a5a:	2334      	movs	r3, #52	; 0x34
   17a5c:	4652      	mov	r2, sl
   17a5e:	2701      	movs	r7, #1
   17a60:	1a9b      	subs	r3, r3, r2
   17a62:	409f      	lsls	r7, r3
   17a64:	197f      	adds	r7, r7, r5
   17a66:	42af      	cmp	r7, r5
   17a68:	419b      	sbcs	r3, r3
   17a6a:	425b      	negs	r3, r3
   17a6c:	4499      	add	r9, r3
   17a6e:	e7d6      	b.n	17a1e <floor+0xae>
   17a70:	0064      	lsls	r4, r4, #1
   17a72:	0864      	lsrs	r4, r4, #1
   17a74:	4325      	orrs	r5, r4
   17a76:	2700      	movs	r7, #0
   17a78:	2d00      	cmp	r5, #0
   17a7a:	d0a7      	beq.n	179cc <floor+0x5c>
   17a7c:	4e07      	ldr	r6, [pc, #28]	; (17a9c <floor+0x12c>)
   17a7e:	e7a5      	b.n	179cc <floor+0x5c>
   17a80:	3b13      	subs	r3, #19
   17a82:	469c      	mov	ip, r3
   17a84:	44e1      	add	r9, ip
   17a86:	e7ca      	b.n	17a1e <floor+0xae>
   17a88:	fffffc01 	.word	0xfffffc01
   17a8c:	000fffff 	.word	0x000fffff
   17a90:	8800759c 	.word	0x8800759c
   17a94:	7e37e43c 	.word	0x7e37e43c
   17a98:	fffffbed 	.word	0xfffffbed
   17a9c:	bff00000 	.word	0xbff00000

00017aa0 <round>:
   17aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17aa2:	4a26      	ldr	r2, [pc, #152]	; (17b3c <round+0x9c>)
   17aa4:	004b      	lsls	r3, r1, #1
   17aa6:	0d5b      	lsrs	r3, r3, #21
   17aa8:	189a      	adds	r2, r3, r2
   17aaa:	0007      	movs	r7, r0
   17aac:	000c      	movs	r4, r1
   17aae:	2a13      	cmp	r2, #19
   17ab0:	dc10      	bgt.n	17ad4 <round+0x34>
   17ab2:	2a00      	cmp	r2, #0
   17ab4:	db39      	blt.n	17b2a <round+0x8a>
   17ab6:	4b22      	ldr	r3, [pc, #136]	; (17b40 <round+0xa0>)
   17ab8:	4113      	asrs	r3, r2
   17aba:	420b      	tst	r3, r1
   17abc:	d030      	beq.n	17b20 <round+0x80>
   17abe:	2480      	movs	r4, #128	; 0x80
   17ac0:	0324      	lsls	r4, r4, #12
   17ac2:	4114      	asrs	r4, r2
   17ac4:	2000      	movs	r0, #0
   17ac6:	1864      	adds	r4, r4, r1
   17ac8:	439c      	bics	r4, r3
   17aca:	0006      	movs	r6, r0
   17acc:	0025      	movs	r5, r4
   17ace:	0030      	movs	r0, r6
   17ad0:	0029      	movs	r1, r5
   17ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ad4:	2a33      	cmp	r2, #51	; 0x33
   17ad6:	dd0c      	ble.n	17af2 <round+0x52>
   17ad8:	2380      	movs	r3, #128	; 0x80
   17ada:	0006      	movs	r6, r0
   17adc:	00db      	lsls	r3, r3, #3
   17ade:	000d      	movs	r5, r1
   17ae0:	429a      	cmp	r2, r3
   17ae2:	d1f4      	bne.n	17ace <round+0x2e>
   17ae4:	0002      	movs	r2, r0
   17ae6:	000b      	movs	r3, r1
   17ae8:	f000 fcc4 	bl	18474 <__aeabi_dadd>
   17aec:	0006      	movs	r6, r0
   17aee:	000d      	movs	r5, r1
   17af0:	e7ed      	b.n	17ace <round+0x2e>
   17af2:	4d14      	ldr	r5, [pc, #80]	; (17b44 <round+0xa4>)
   17af4:	0006      	movs	r6, r0
   17af6:	46ac      	mov	ip, r5
   17af8:	2501      	movs	r5, #1
   17afa:	4463      	add	r3, ip
   17afc:	426d      	negs	r5, r5
   17afe:	40dd      	lsrs	r5, r3
   17b00:	46ac      	mov	ip, r5
   17b02:	4663      	mov	r3, ip
   17b04:	000d      	movs	r5, r1
   17b06:	4203      	tst	r3, r0
   17b08:	d0e1      	beq.n	17ace <round+0x2e>
   17b0a:	2333      	movs	r3, #51	; 0x33
   17b0c:	1a9a      	subs	r2, r3, r2
   17b0e:	3b32      	subs	r3, #50	; 0x32
   17b10:	4093      	lsls	r3, r2
   17b12:	1818      	adds	r0, r3, r0
   17b14:	4287      	cmp	r7, r0
   17b16:	d900      	bls.n	17b1a <round+0x7a>
   17b18:	1c4c      	adds	r4, r1, #1
   17b1a:	4663      	mov	r3, ip
   17b1c:	4398      	bics	r0, r3
   17b1e:	e7d4      	b.n	17aca <round+0x2a>
   17b20:	0006      	movs	r6, r0
   17b22:	000d      	movs	r5, r1
   17b24:	2800      	cmp	r0, #0
   17b26:	d1ca      	bne.n	17abe <round+0x1e>
   17b28:	e7d1      	b.n	17ace <round+0x2e>
   17b2a:	0fc9      	lsrs	r1, r1, #31
   17b2c:	07cc      	lsls	r4, r1, #31
   17b2e:	2000      	movs	r0, #0
   17b30:	1c53      	adds	r3, r2, #1
   17b32:	d1ca      	bne.n	17aca <round+0x2a>
   17b34:	4b04      	ldr	r3, [pc, #16]	; (17b48 <round+0xa8>)
   17b36:	431c      	orrs	r4, r3
   17b38:	e7c7      	b.n	17aca <round+0x2a>
   17b3a:	46c0      	nop			; (mov r8, r8)
   17b3c:	fffffc01 	.word	0xfffffc01
   17b40:	000fffff 	.word	0x000fffff
   17b44:	fffffbed 	.word	0xfffffbed
   17b48:	3ff00000 	.word	0x3ff00000

00017b4c <__udivsi3>:
   17b4c:	2200      	movs	r2, #0
   17b4e:	0843      	lsrs	r3, r0, #1
   17b50:	428b      	cmp	r3, r1
   17b52:	d374      	bcc.n	17c3e <__udivsi3+0xf2>
   17b54:	0903      	lsrs	r3, r0, #4
   17b56:	428b      	cmp	r3, r1
   17b58:	d35f      	bcc.n	17c1a <__udivsi3+0xce>
   17b5a:	0a03      	lsrs	r3, r0, #8
   17b5c:	428b      	cmp	r3, r1
   17b5e:	d344      	bcc.n	17bea <__udivsi3+0x9e>
   17b60:	0b03      	lsrs	r3, r0, #12
   17b62:	428b      	cmp	r3, r1
   17b64:	d328      	bcc.n	17bb8 <__udivsi3+0x6c>
   17b66:	0c03      	lsrs	r3, r0, #16
   17b68:	428b      	cmp	r3, r1
   17b6a:	d30d      	bcc.n	17b88 <__udivsi3+0x3c>
   17b6c:	22ff      	movs	r2, #255	; 0xff
   17b6e:	0209      	lsls	r1, r1, #8
   17b70:	ba12      	rev	r2, r2
   17b72:	0c03      	lsrs	r3, r0, #16
   17b74:	428b      	cmp	r3, r1
   17b76:	d302      	bcc.n	17b7e <__udivsi3+0x32>
   17b78:	1212      	asrs	r2, r2, #8
   17b7a:	0209      	lsls	r1, r1, #8
   17b7c:	d065      	beq.n	17c4a <__udivsi3+0xfe>
   17b7e:	0b03      	lsrs	r3, r0, #12
   17b80:	428b      	cmp	r3, r1
   17b82:	d319      	bcc.n	17bb8 <__udivsi3+0x6c>
   17b84:	e000      	b.n	17b88 <__udivsi3+0x3c>
   17b86:	0a09      	lsrs	r1, r1, #8
   17b88:	0bc3      	lsrs	r3, r0, #15
   17b8a:	428b      	cmp	r3, r1
   17b8c:	d301      	bcc.n	17b92 <__udivsi3+0x46>
   17b8e:	03cb      	lsls	r3, r1, #15
   17b90:	1ac0      	subs	r0, r0, r3
   17b92:	4152      	adcs	r2, r2
   17b94:	0b83      	lsrs	r3, r0, #14
   17b96:	428b      	cmp	r3, r1
   17b98:	d301      	bcc.n	17b9e <__udivsi3+0x52>
   17b9a:	038b      	lsls	r3, r1, #14
   17b9c:	1ac0      	subs	r0, r0, r3
   17b9e:	4152      	adcs	r2, r2
   17ba0:	0b43      	lsrs	r3, r0, #13
   17ba2:	428b      	cmp	r3, r1
   17ba4:	d301      	bcc.n	17baa <__udivsi3+0x5e>
   17ba6:	034b      	lsls	r3, r1, #13
   17ba8:	1ac0      	subs	r0, r0, r3
   17baa:	4152      	adcs	r2, r2
   17bac:	0b03      	lsrs	r3, r0, #12
   17bae:	428b      	cmp	r3, r1
   17bb0:	d301      	bcc.n	17bb6 <__udivsi3+0x6a>
   17bb2:	030b      	lsls	r3, r1, #12
   17bb4:	1ac0      	subs	r0, r0, r3
   17bb6:	4152      	adcs	r2, r2
   17bb8:	0ac3      	lsrs	r3, r0, #11
   17bba:	428b      	cmp	r3, r1
   17bbc:	d301      	bcc.n	17bc2 <__udivsi3+0x76>
   17bbe:	02cb      	lsls	r3, r1, #11
   17bc0:	1ac0      	subs	r0, r0, r3
   17bc2:	4152      	adcs	r2, r2
   17bc4:	0a83      	lsrs	r3, r0, #10
   17bc6:	428b      	cmp	r3, r1
   17bc8:	d301      	bcc.n	17bce <__udivsi3+0x82>
   17bca:	028b      	lsls	r3, r1, #10
   17bcc:	1ac0      	subs	r0, r0, r3
   17bce:	4152      	adcs	r2, r2
   17bd0:	0a43      	lsrs	r3, r0, #9
   17bd2:	428b      	cmp	r3, r1
   17bd4:	d301      	bcc.n	17bda <__udivsi3+0x8e>
   17bd6:	024b      	lsls	r3, r1, #9
   17bd8:	1ac0      	subs	r0, r0, r3
   17bda:	4152      	adcs	r2, r2
   17bdc:	0a03      	lsrs	r3, r0, #8
   17bde:	428b      	cmp	r3, r1
   17be0:	d301      	bcc.n	17be6 <__udivsi3+0x9a>
   17be2:	020b      	lsls	r3, r1, #8
   17be4:	1ac0      	subs	r0, r0, r3
   17be6:	4152      	adcs	r2, r2
   17be8:	d2cd      	bcs.n	17b86 <__udivsi3+0x3a>
   17bea:	09c3      	lsrs	r3, r0, #7
   17bec:	428b      	cmp	r3, r1
   17bee:	d301      	bcc.n	17bf4 <__udivsi3+0xa8>
   17bf0:	01cb      	lsls	r3, r1, #7
   17bf2:	1ac0      	subs	r0, r0, r3
   17bf4:	4152      	adcs	r2, r2
   17bf6:	0983      	lsrs	r3, r0, #6
   17bf8:	428b      	cmp	r3, r1
   17bfa:	d301      	bcc.n	17c00 <__udivsi3+0xb4>
   17bfc:	018b      	lsls	r3, r1, #6
   17bfe:	1ac0      	subs	r0, r0, r3
   17c00:	4152      	adcs	r2, r2
   17c02:	0943      	lsrs	r3, r0, #5
   17c04:	428b      	cmp	r3, r1
   17c06:	d301      	bcc.n	17c0c <__udivsi3+0xc0>
   17c08:	014b      	lsls	r3, r1, #5
   17c0a:	1ac0      	subs	r0, r0, r3
   17c0c:	4152      	adcs	r2, r2
   17c0e:	0903      	lsrs	r3, r0, #4
   17c10:	428b      	cmp	r3, r1
   17c12:	d301      	bcc.n	17c18 <__udivsi3+0xcc>
   17c14:	010b      	lsls	r3, r1, #4
   17c16:	1ac0      	subs	r0, r0, r3
   17c18:	4152      	adcs	r2, r2
   17c1a:	08c3      	lsrs	r3, r0, #3
   17c1c:	428b      	cmp	r3, r1
   17c1e:	d301      	bcc.n	17c24 <__udivsi3+0xd8>
   17c20:	00cb      	lsls	r3, r1, #3
   17c22:	1ac0      	subs	r0, r0, r3
   17c24:	4152      	adcs	r2, r2
   17c26:	0883      	lsrs	r3, r0, #2
   17c28:	428b      	cmp	r3, r1
   17c2a:	d301      	bcc.n	17c30 <__udivsi3+0xe4>
   17c2c:	008b      	lsls	r3, r1, #2
   17c2e:	1ac0      	subs	r0, r0, r3
   17c30:	4152      	adcs	r2, r2
   17c32:	0843      	lsrs	r3, r0, #1
   17c34:	428b      	cmp	r3, r1
   17c36:	d301      	bcc.n	17c3c <__udivsi3+0xf0>
   17c38:	004b      	lsls	r3, r1, #1
   17c3a:	1ac0      	subs	r0, r0, r3
   17c3c:	4152      	adcs	r2, r2
   17c3e:	1a41      	subs	r1, r0, r1
   17c40:	d200      	bcs.n	17c44 <__udivsi3+0xf8>
   17c42:	4601      	mov	r1, r0
   17c44:	4152      	adcs	r2, r2
   17c46:	4610      	mov	r0, r2
   17c48:	4770      	bx	lr
   17c4a:	e7ff      	b.n	17c4c <__udivsi3+0x100>
   17c4c:	b501      	push	{r0, lr}
   17c4e:	2000      	movs	r0, #0
   17c50:	f000 f8f0 	bl	17e34 <__aeabi_idiv0>
   17c54:	bd02      	pop	{r1, pc}
   17c56:	46c0      	nop			; (mov r8, r8)

00017c58 <__aeabi_uidivmod>:
   17c58:	2900      	cmp	r1, #0
   17c5a:	d0f7      	beq.n	17c4c <__udivsi3+0x100>
   17c5c:	e776      	b.n	17b4c <__udivsi3>
   17c5e:	4770      	bx	lr

00017c60 <__divsi3>:
   17c60:	4603      	mov	r3, r0
   17c62:	430b      	orrs	r3, r1
   17c64:	d47f      	bmi.n	17d66 <__divsi3+0x106>
   17c66:	2200      	movs	r2, #0
   17c68:	0843      	lsrs	r3, r0, #1
   17c6a:	428b      	cmp	r3, r1
   17c6c:	d374      	bcc.n	17d58 <__divsi3+0xf8>
   17c6e:	0903      	lsrs	r3, r0, #4
   17c70:	428b      	cmp	r3, r1
   17c72:	d35f      	bcc.n	17d34 <__divsi3+0xd4>
   17c74:	0a03      	lsrs	r3, r0, #8
   17c76:	428b      	cmp	r3, r1
   17c78:	d344      	bcc.n	17d04 <__divsi3+0xa4>
   17c7a:	0b03      	lsrs	r3, r0, #12
   17c7c:	428b      	cmp	r3, r1
   17c7e:	d328      	bcc.n	17cd2 <__divsi3+0x72>
   17c80:	0c03      	lsrs	r3, r0, #16
   17c82:	428b      	cmp	r3, r1
   17c84:	d30d      	bcc.n	17ca2 <__divsi3+0x42>
   17c86:	22ff      	movs	r2, #255	; 0xff
   17c88:	0209      	lsls	r1, r1, #8
   17c8a:	ba12      	rev	r2, r2
   17c8c:	0c03      	lsrs	r3, r0, #16
   17c8e:	428b      	cmp	r3, r1
   17c90:	d302      	bcc.n	17c98 <__divsi3+0x38>
   17c92:	1212      	asrs	r2, r2, #8
   17c94:	0209      	lsls	r1, r1, #8
   17c96:	d065      	beq.n	17d64 <__divsi3+0x104>
   17c98:	0b03      	lsrs	r3, r0, #12
   17c9a:	428b      	cmp	r3, r1
   17c9c:	d319      	bcc.n	17cd2 <__divsi3+0x72>
   17c9e:	e000      	b.n	17ca2 <__divsi3+0x42>
   17ca0:	0a09      	lsrs	r1, r1, #8
   17ca2:	0bc3      	lsrs	r3, r0, #15
   17ca4:	428b      	cmp	r3, r1
   17ca6:	d301      	bcc.n	17cac <__divsi3+0x4c>
   17ca8:	03cb      	lsls	r3, r1, #15
   17caa:	1ac0      	subs	r0, r0, r3
   17cac:	4152      	adcs	r2, r2
   17cae:	0b83      	lsrs	r3, r0, #14
   17cb0:	428b      	cmp	r3, r1
   17cb2:	d301      	bcc.n	17cb8 <__divsi3+0x58>
   17cb4:	038b      	lsls	r3, r1, #14
   17cb6:	1ac0      	subs	r0, r0, r3
   17cb8:	4152      	adcs	r2, r2
   17cba:	0b43      	lsrs	r3, r0, #13
   17cbc:	428b      	cmp	r3, r1
   17cbe:	d301      	bcc.n	17cc4 <__divsi3+0x64>
   17cc0:	034b      	lsls	r3, r1, #13
   17cc2:	1ac0      	subs	r0, r0, r3
   17cc4:	4152      	adcs	r2, r2
   17cc6:	0b03      	lsrs	r3, r0, #12
   17cc8:	428b      	cmp	r3, r1
   17cca:	d301      	bcc.n	17cd0 <__divsi3+0x70>
   17ccc:	030b      	lsls	r3, r1, #12
   17cce:	1ac0      	subs	r0, r0, r3
   17cd0:	4152      	adcs	r2, r2
   17cd2:	0ac3      	lsrs	r3, r0, #11
   17cd4:	428b      	cmp	r3, r1
   17cd6:	d301      	bcc.n	17cdc <__divsi3+0x7c>
   17cd8:	02cb      	lsls	r3, r1, #11
   17cda:	1ac0      	subs	r0, r0, r3
   17cdc:	4152      	adcs	r2, r2
   17cde:	0a83      	lsrs	r3, r0, #10
   17ce0:	428b      	cmp	r3, r1
   17ce2:	d301      	bcc.n	17ce8 <__divsi3+0x88>
   17ce4:	028b      	lsls	r3, r1, #10
   17ce6:	1ac0      	subs	r0, r0, r3
   17ce8:	4152      	adcs	r2, r2
   17cea:	0a43      	lsrs	r3, r0, #9
   17cec:	428b      	cmp	r3, r1
   17cee:	d301      	bcc.n	17cf4 <__divsi3+0x94>
   17cf0:	024b      	lsls	r3, r1, #9
   17cf2:	1ac0      	subs	r0, r0, r3
   17cf4:	4152      	adcs	r2, r2
   17cf6:	0a03      	lsrs	r3, r0, #8
   17cf8:	428b      	cmp	r3, r1
   17cfa:	d301      	bcc.n	17d00 <__divsi3+0xa0>
   17cfc:	020b      	lsls	r3, r1, #8
   17cfe:	1ac0      	subs	r0, r0, r3
   17d00:	4152      	adcs	r2, r2
   17d02:	d2cd      	bcs.n	17ca0 <__divsi3+0x40>
   17d04:	09c3      	lsrs	r3, r0, #7
   17d06:	428b      	cmp	r3, r1
   17d08:	d301      	bcc.n	17d0e <__divsi3+0xae>
   17d0a:	01cb      	lsls	r3, r1, #7
   17d0c:	1ac0      	subs	r0, r0, r3
   17d0e:	4152      	adcs	r2, r2
   17d10:	0983      	lsrs	r3, r0, #6
   17d12:	428b      	cmp	r3, r1
   17d14:	d301      	bcc.n	17d1a <__divsi3+0xba>
   17d16:	018b      	lsls	r3, r1, #6
   17d18:	1ac0      	subs	r0, r0, r3
   17d1a:	4152      	adcs	r2, r2
   17d1c:	0943      	lsrs	r3, r0, #5
   17d1e:	428b      	cmp	r3, r1
   17d20:	d301      	bcc.n	17d26 <__divsi3+0xc6>
   17d22:	014b      	lsls	r3, r1, #5
   17d24:	1ac0      	subs	r0, r0, r3
   17d26:	4152      	adcs	r2, r2
   17d28:	0903      	lsrs	r3, r0, #4
   17d2a:	428b      	cmp	r3, r1
   17d2c:	d301      	bcc.n	17d32 <__divsi3+0xd2>
   17d2e:	010b      	lsls	r3, r1, #4
   17d30:	1ac0      	subs	r0, r0, r3
   17d32:	4152      	adcs	r2, r2
   17d34:	08c3      	lsrs	r3, r0, #3
   17d36:	428b      	cmp	r3, r1
   17d38:	d301      	bcc.n	17d3e <__divsi3+0xde>
   17d3a:	00cb      	lsls	r3, r1, #3
   17d3c:	1ac0      	subs	r0, r0, r3
   17d3e:	4152      	adcs	r2, r2
   17d40:	0883      	lsrs	r3, r0, #2
   17d42:	428b      	cmp	r3, r1
   17d44:	d301      	bcc.n	17d4a <__divsi3+0xea>
   17d46:	008b      	lsls	r3, r1, #2
   17d48:	1ac0      	subs	r0, r0, r3
   17d4a:	4152      	adcs	r2, r2
   17d4c:	0843      	lsrs	r3, r0, #1
   17d4e:	428b      	cmp	r3, r1
   17d50:	d301      	bcc.n	17d56 <__divsi3+0xf6>
   17d52:	004b      	lsls	r3, r1, #1
   17d54:	1ac0      	subs	r0, r0, r3
   17d56:	4152      	adcs	r2, r2
   17d58:	1a41      	subs	r1, r0, r1
   17d5a:	d200      	bcs.n	17d5e <__divsi3+0xfe>
   17d5c:	4601      	mov	r1, r0
   17d5e:	4152      	adcs	r2, r2
   17d60:	4610      	mov	r0, r2
   17d62:	4770      	bx	lr
   17d64:	e05d      	b.n	17e22 <__divsi3+0x1c2>
   17d66:	0fca      	lsrs	r2, r1, #31
   17d68:	d000      	beq.n	17d6c <__divsi3+0x10c>
   17d6a:	4249      	negs	r1, r1
   17d6c:	1003      	asrs	r3, r0, #32
   17d6e:	d300      	bcc.n	17d72 <__divsi3+0x112>
   17d70:	4240      	negs	r0, r0
   17d72:	4053      	eors	r3, r2
   17d74:	2200      	movs	r2, #0
   17d76:	469c      	mov	ip, r3
   17d78:	0903      	lsrs	r3, r0, #4
   17d7a:	428b      	cmp	r3, r1
   17d7c:	d32d      	bcc.n	17dda <__divsi3+0x17a>
   17d7e:	0a03      	lsrs	r3, r0, #8
   17d80:	428b      	cmp	r3, r1
   17d82:	d312      	bcc.n	17daa <__divsi3+0x14a>
   17d84:	22fc      	movs	r2, #252	; 0xfc
   17d86:	0189      	lsls	r1, r1, #6
   17d88:	ba12      	rev	r2, r2
   17d8a:	0a03      	lsrs	r3, r0, #8
   17d8c:	428b      	cmp	r3, r1
   17d8e:	d30c      	bcc.n	17daa <__divsi3+0x14a>
   17d90:	0189      	lsls	r1, r1, #6
   17d92:	1192      	asrs	r2, r2, #6
   17d94:	428b      	cmp	r3, r1
   17d96:	d308      	bcc.n	17daa <__divsi3+0x14a>
   17d98:	0189      	lsls	r1, r1, #6
   17d9a:	1192      	asrs	r2, r2, #6
   17d9c:	428b      	cmp	r3, r1
   17d9e:	d304      	bcc.n	17daa <__divsi3+0x14a>
   17da0:	0189      	lsls	r1, r1, #6
   17da2:	d03a      	beq.n	17e1a <__divsi3+0x1ba>
   17da4:	1192      	asrs	r2, r2, #6
   17da6:	e000      	b.n	17daa <__divsi3+0x14a>
   17da8:	0989      	lsrs	r1, r1, #6
   17daa:	09c3      	lsrs	r3, r0, #7
   17dac:	428b      	cmp	r3, r1
   17dae:	d301      	bcc.n	17db4 <__divsi3+0x154>
   17db0:	01cb      	lsls	r3, r1, #7
   17db2:	1ac0      	subs	r0, r0, r3
   17db4:	4152      	adcs	r2, r2
   17db6:	0983      	lsrs	r3, r0, #6
   17db8:	428b      	cmp	r3, r1
   17dba:	d301      	bcc.n	17dc0 <__divsi3+0x160>
   17dbc:	018b      	lsls	r3, r1, #6
   17dbe:	1ac0      	subs	r0, r0, r3
   17dc0:	4152      	adcs	r2, r2
   17dc2:	0943      	lsrs	r3, r0, #5
   17dc4:	428b      	cmp	r3, r1
   17dc6:	d301      	bcc.n	17dcc <__divsi3+0x16c>
   17dc8:	014b      	lsls	r3, r1, #5
   17dca:	1ac0      	subs	r0, r0, r3
   17dcc:	4152      	adcs	r2, r2
   17dce:	0903      	lsrs	r3, r0, #4
   17dd0:	428b      	cmp	r3, r1
   17dd2:	d301      	bcc.n	17dd8 <__divsi3+0x178>
   17dd4:	010b      	lsls	r3, r1, #4
   17dd6:	1ac0      	subs	r0, r0, r3
   17dd8:	4152      	adcs	r2, r2
   17dda:	08c3      	lsrs	r3, r0, #3
   17ddc:	428b      	cmp	r3, r1
   17dde:	d301      	bcc.n	17de4 <__divsi3+0x184>
   17de0:	00cb      	lsls	r3, r1, #3
   17de2:	1ac0      	subs	r0, r0, r3
   17de4:	4152      	adcs	r2, r2
   17de6:	0883      	lsrs	r3, r0, #2
   17de8:	428b      	cmp	r3, r1
   17dea:	d301      	bcc.n	17df0 <__divsi3+0x190>
   17dec:	008b      	lsls	r3, r1, #2
   17dee:	1ac0      	subs	r0, r0, r3
   17df0:	4152      	adcs	r2, r2
   17df2:	d2d9      	bcs.n	17da8 <__divsi3+0x148>
   17df4:	0843      	lsrs	r3, r0, #1
   17df6:	428b      	cmp	r3, r1
   17df8:	d301      	bcc.n	17dfe <__divsi3+0x19e>
   17dfa:	004b      	lsls	r3, r1, #1
   17dfc:	1ac0      	subs	r0, r0, r3
   17dfe:	4152      	adcs	r2, r2
   17e00:	1a41      	subs	r1, r0, r1
   17e02:	d200      	bcs.n	17e06 <__divsi3+0x1a6>
   17e04:	4601      	mov	r1, r0
   17e06:	4663      	mov	r3, ip
   17e08:	4152      	adcs	r2, r2
   17e0a:	105b      	asrs	r3, r3, #1
   17e0c:	4610      	mov	r0, r2
   17e0e:	d301      	bcc.n	17e14 <__divsi3+0x1b4>
   17e10:	4240      	negs	r0, r0
   17e12:	2b00      	cmp	r3, #0
   17e14:	d500      	bpl.n	17e18 <__divsi3+0x1b8>
   17e16:	4249      	negs	r1, r1
   17e18:	4770      	bx	lr
   17e1a:	4663      	mov	r3, ip
   17e1c:	105b      	asrs	r3, r3, #1
   17e1e:	d300      	bcc.n	17e22 <__divsi3+0x1c2>
   17e20:	4240      	negs	r0, r0
   17e22:	b501      	push	{r0, lr}
   17e24:	2000      	movs	r0, #0
   17e26:	f000 f805 	bl	17e34 <__aeabi_idiv0>
   17e2a:	bd02      	pop	{r1, pc}

00017e2c <__aeabi_idivmod>:
   17e2c:	2900      	cmp	r1, #0
   17e2e:	d0f8      	beq.n	17e22 <__divsi3+0x1c2>
   17e30:	e716      	b.n	17c60 <__divsi3>
   17e32:	4770      	bx	lr

00017e34 <__aeabi_idiv0>:
   17e34:	4770      	bx	lr
   17e36:	46c0      	nop			; (mov r8, r8)

00017e38 <__aeabi_cdrcmple>:
   17e38:	4684      	mov	ip, r0
   17e3a:	1c10      	adds	r0, r2, #0
   17e3c:	4662      	mov	r2, ip
   17e3e:	468c      	mov	ip, r1
   17e40:	1c19      	adds	r1, r3, #0
   17e42:	4663      	mov	r3, ip
   17e44:	e000      	b.n	17e48 <__aeabi_cdcmpeq>
   17e46:	46c0      	nop			; (mov r8, r8)

00017e48 <__aeabi_cdcmpeq>:
   17e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   17e4a:	f001 f9f5 	bl	19238 <__ledf2>
   17e4e:	2800      	cmp	r0, #0
   17e50:	d401      	bmi.n	17e56 <__aeabi_cdcmpeq+0xe>
   17e52:	2100      	movs	r1, #0
   17e54:	42c8      	cmn	r0, r1
   17e56:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00017e58 <__aeabi_dcmpeq>:
   17e58:	b510      	push	{r4, lr}
   17e5a:	f001 f94f 	bl	190fc <__eqdf2>
   17e5e:	4240      	negs	r0, r0
   17e60:	3001      	adds	r0, #1
   17e62:	bd10      	pop	{r4, pc}

00017e64 <__aeabi_dcmplt>:
   17e64:	b510      	push	{r4, lr}
   17e66:	f001 f9e7 	bl	19238 <__ledf2>
   17e6a:	2800      	cmp	r0, #0
   17e6c:	db01      	blt.n	17e72 <__aeabi_dcmplt+0xe>
   17e6e:	2000      	movs	r0, #0
   17e70:	bd10      	pop	{r4, pc}
   17e72:	2001      	movs	r0, #1
   17e74:	bd10      	pop	{r4, pc}
   17e76:	46c0      	nop			; (mov r8, r8)

00017e78 <__aeabi_dcmple>:
   17e78:	b510      	push	{r4, lr}
   17e7a:	f001 f9dd 	bl	19238 <__ledf2>
   17e7e:	2800      	cmp	r0, #0
   17e80:	dd01      	ble.n	17e86 <__aeabi_dcmple+0xe>
   17e82:	2000      	movs	r0, #0
   17e84:	bd10      	pop	{r4, pc}
   17e86:	2001      	movs	r0, #1
   17e88:	bd10      	pop	{r4, pc}
   17e8a:	46c0      	nop			; (mov r8, r8)

00017e8c <__aeabi_dcmpgt>:
   17e8c:	b510      	push	{r4, lr}
   17e8e:	f001 f96f 	bl	19170 <__gedf2>
   17e92:	2800      	cmp	r0, #0
   17e94:	dc01      	bgt.n	17e9a <__aeabi_dcmpgt+0xe>
   17e96:	2000      	movs	r0, #0
   17e98:	bd10      	pop	{r4, pc}
   17e9a:	2001      	movs	r0, #1
   17e9c:	bd10      	pop	{r4, pc}
   17e9e:	46c0      	nop			; (mov r8, r8)

00017ea0 <__aeabi_dcmpge>:
   17ea0:	b510      	push	{r4, lr}
   17ea2:	f001 f965 	bl	19170 <__gedf2>
   17ea6:	2800      	cmp	r0, #0
   17ea8:	da01      	bge.n	17eae <__aeabi_dcmpge+0xe>
   17eaa:	2000      	movs	r0, #0
   17eac:	bd10      	pop	{r4, pc}
   17eae:	2001      	movs	r0, #1
   17eb0:	bd10      	pop	{r4, pc}
   17eb2:	46c0      	nop			; (mov r8, r8)

00017eb4 <__aeabi_uldivmod>:
   17eb4:	2b00      	cmp	r3, #0
   17eb6:	d111      	bne.n	17edc <__aeabi_uldivmod+0x28>
   17eb8:	2a00      	cmp	r2, #0
   17eba:	d10f      	bne.n	17edc <__aeabi_uldivmod+0x28>
   17ebc:	2900      	cmp	r1, #0
   17ebe:	d100      	bne.n	17ec2 <__aeabi_uldivmod+0xe>
   17ec0:	2800      	cmp	r0, #0
   17ec2:	d002      	beq.n	17eca <__aeabi_uldivmod+0x16>
   17ec4:	2100      	movs	r1, #0
   17ec6:	43c9      	mvns	r1, r1
   17ec8:	1c08      	adds	r0, r1, #0
   17eca:	b407      	push	{r0, r1, r2}
   17ecc:	4802      	ldr	r0, [pc, #8]	; (17ed8 <__aeabi_uldivmod+0x24>)
   17ece:	a102      	add	r1, pc, #8	; (adr r1, 17ed8 <__aeabi_uldivmod+0x24>)
   17ed0:	1840      	adds	r0, r0, r1
   17ed2:	9002      	str	r0, [sp, #8]
   17ed4:	bd03      	pop	{r0, r1, pc}
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	ffffff5d 	.word	0xffffff5d
   17edc:	b403      	push	{r0, r1}
   17ede:	4668      	mov	r0, sp
   17ee0:	b501      	push	{r0, lr}
   17ee2:	9802      	ldr	r0, [sp, #8]
   17ee4:	f000 f824 	bl	17f30 <__udivmoddi4>
   17ee8:	9b01      	ldr	r3, [sp, #4]
   17eea:	469e      	mov	lr, r3
   17eec:	b002      	add	sp, #8
   17eee:	bc0c      	pop	{r2, r3}
   17ef0:	4770      	bx	lr
   17ef2:	46c0      	nop			; (mov r8, r8)

00017ef4 <__aeabi_d2uiz>:
   17ef4:	b570      	push	{r4, r5, r6, lr}
   17ef6:	2200      	movs	r2, #0
   17ef8:	4b0c      	ldr	r3, [pc, #48]	; (17f2c <__aeabi_d2uiz+0x38>)
   17efa:	0004      	movs	r4, r0
   17efc:	000d      	movs	r5, r1
   17efe:	f7ff ffcf 	bl	17ea0 <__aeabi_dcmpge>
   17f02:	2800      	cmp	r0, #0
   17f04:	d104      	bne.n	17f10 <__aeabi_d2uiz+0x1c>
   17f06:	0020      	movs	r0, r4
   17f08:	0029      	movs	r1, r5
   17f0a:	f001 ff8d 	bl	19e28 <__aeabi_d2iz>
   17f0e:	bd70      	pop	{r4, r5, r6, pc}
   17f10:	4b06      	ldr	r3, [pc, #24]	; (17f2c <__aeabi_d2uiz+0x38>)
   17f12:	2200      	movs	r2, #0
   17f14:	0020      	movs	r0, r4
   17f16:	0029      	movs	r1, r5
   17f18:	f001 fc70 	bl	197fc <__aeabi_dsub>
   17f1c:	f001 ff84 	bl	19e28 <__aeabi_d2iz>
   17f20:	2380      	movs	r3, #128	; 0x80
   17f22:	061b      	lsls	r3, r3, #24
   17f24:	469c      	mov	ip, r3
   17f26:	4460      	add	r0, ip
   17f28:	e7f1      	b.n	17f0e <__aeabi_d2uiz+0x1a>
   17f2a:	46c0      	nop			; (mov r8, r8)
   17f2c:	41e00000 	.word	0x41e00000

00017f30 <__udivmoddi4>:
   17f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f32:	4657      	mov	r7, sl
   17f34:	464e      	mov	r6, r9
   17f36:	4645      	mov	r5, r8
   17f38:	46de      	mov	lr, fp
   17f3a:	b5e0      	push	{r5, r6, r7, lr}
   17f3c:	0004      	movs	r4, r0
   17f3e:	b083      	sub	sp, #12
   17f40:	000d      	movs	r5, r1
   17f42:	4692      	mov	sl, r2
   17f44:	4699      	mov	r9, r3
   17f46:	428b      	cmp	r3, r1
   17f48:	d82f      	bhi.n	17faa <__udivmoddi4+0x7a>
   17f4a:	d02c      	beq.n	17fa6 <__udivmoddi4+0x76>
   17f4c:	4649      	mov	r1, r9
   17f4e:	4650      	mov	r0, sl
   17f50:	f002 f888 	bl	1a064 <__clzdi2>
   17f54:	0029      	movs	r1, r5
   17f56:	0006      	movs	r6, r0
   17f58:	0020      	movs	r0, r4
   17f5a:	f002 f883 	bl	1a064 <__clzdi2>
   17f5e:	1a33      	subs	r3, r6, r0
   17f60:	4698      	mov	r8, r3
   17f62:	3b20      	subs	r3, #32
   17f64:	469b      	mov	fp, r3
   17f66:	d500      	bpl.n	17f6a <__udivmoddi4+0x3a>
   17f68:	e074      	b.n	18054 <__udivmoddi4+0x124>
   17f6a:	4653      	mov	r3, sl
   17f6c:	465a      	mov	r2, fp
   17f6e:	4093      	lsls	r3, r2
   17f70:	001f      	movs	r7, r3
   17f72:	4653      	mov	r3, sl
   17f74:	4642      	mov	r2, r8
   17f76:	4093      	lsls	r3, r2
   17f78:	001e      	movs	r6, r3
   17f7a:	42af      	cmp	r7, r5
   17f7c:	d829      	bhi.n	17fd2 <__udivmoddi4+0xa2>
   17f7e:	d026      	beq.n	17fce <__udivmoddi4+0x9e>
   17f80:	465b      	mov	r3, fp
   17f82:	1ba4      	subs	r4, r4, r6
   17f84:	41bd      	sbcs	r5, r7
   17f86:	2b00      	cmp	r3, #0
   17f88:	da00      	bge.n	17f8c <__udivmoddi4+0x5c>
   17f8a:	e079      	b.n	18080 <__udivmoddi4+0x150>
   17f8c:	2200      	movs	r2, #0
   17f8e:	2300      	movs	r3, #0
   17f90:	9200      	str	r2, [sp, #0]
   17f92:	9301      	str	r3, [sp, #4]
   17f94:	2301      	movs	r3, #1
   17f96:	465a      	mov	r2, fp
   17f98:	4093      	lsls	r3, r2
   17f9a:	9301      	str	r3, [sp, #4]
   17f9c:	2301      	movs	r3, #1
   17f9e:	4642      	mov	r2, r8
   17fa0:	4093      	lsls	r3, r2
   17fa2:	9300      	str	r3, [sp, #0]
   17fa4:	e019      	b.n	17fda <__udivmoddi4+0xaa>
   17fa6:	4282      	cmp	r2, r0
   17fa8:	d9d0      	bls.n	17f4c <__udivmoddi4+0x1c>
   17faa:	2200      	movs	r2, #0
   17fac:	2300      	movs	r3, #0
   17fae:	9200      	str	r2, [sp, #0]
   17fb0:	9301      	str	r3, [sp, #4]
   17fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17fb4:	2b00      	cmp	r3, #0
   17fb6:	d001      	beq.n	17fbc <__udivmoddi4+0x8c>
   17fb8:	601c      	str	r4, [r3, #0]
   17fba:	605d      	str	r5, [r3, #4]
   17fbc:	9800      	ldr	r0, [sp, #0]
   17fbe:	9901      	ldr	r1, [sp, #4]
   17fc0:	b003      	add	sp, #12
   17fc2:	bc3c      	pop	{r2, r3, r4, r5}
   17fc4:	4690      	mov	r8, r2
   17fc6:	4699      	mov	r9, r3
   17fc8:	46a2      	mov	sl, r4
   17fca:	46ab      	mov	fp, r5
   17fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fce:	42a3      	cmp	r3, r4
   17fd0:	d9d6      	bls.n	17f80 <__udivmoddi4+0x50>
   17fd2:	2200      	movs	r2, #0
   17fd4:	2300      	movs	r3, #0
   17fd6:	9200      	str	r2, [sp, #0]
   17fd8:	9301      	str	r3, [sp, #4]
   17fda:	4643      	mov	r3, r8
   17fdc:	2b00      	cmp	r3, #0
   17fde:	d0e8      	beq.n	17fb2 <__udivmoddi4+0x82>
   17fe0:	07fb      	lsls	r3, r7, #31
   17fe2:	0872      	lsrs	r2, r6, #1
   17fe4:	431a      	orrs	r2, r3
   17fe6:	4646      	mov	r6, r8
   17fe8:	087b      	lsrs	r3, r7, #1
   17fea:	e00e      	b.n	1800a <__udivmoddi4+0xda>
   17fec:	42ab      	cmp	r3, r5
   17fee:	d101      	bne.n	17ff4 <__udivmoddi4+0xc4>
   17ff0:	42a2      	cmp	r2, r4
   17ff2:	d80c      	bhi.n	1800e <__udivmoddi4+0xde>
   17ff4:	1aa4      	subs	r4, r4, r2
   17ff6:	419d      	sbcs	r5, r3
   17ff8:	2001      	movs	r0, #1
   17ffa:	1924      	adds	r4, r4, r4
   17ffc:	416d      	adcs	r5, r5
   17ffe:	2100      	movs	r1, #0
   18000:	3e01      	subs	r6, #1
   18002:	1824      	adds	r4, r4, r0
   18004:	414d      	adcs	r5, r1
   18006:	2e00      	cmp	r6, #0
   18008:	d006      	beq.n	18018 <__udivmoddi4+0xe8>
   1800a:	42ab      	cmp	r3, r5
   1800c:	d9ee      	bls.n	17fec <__udivmoddi4+0xbc>
   1800e:	3e01      	subs	r6, #1
   18010:	1924      	adds	r4, r4, r4
   18012:	416d      	adcs	r5, r5
   18014:	2e00      	cmp	r6, #0
   18016:	d1f8      	bne.n	1800a <__udivmoddi4+0xda>
   18018:	465b      	mov	r3, fp
   1801a:	9800      	ldr	r0, [sp, #0]
   1801c:	9901      	ldr	r1, [sp, #4]
   1801e:	1900      	adds	r0, r0, r4
   18020:	4169      	adcs	r1, r5
   18022:	2b00      	cmp	r3, #0
   18024:	db22      	blt.n	1806c <__udivmoddi4+0x13c>
   18026:	002b      	movs	r3, r5
   18028:	465a      	mov	r2, fp
   1802a:	40d3      	lsrs	r3, r2
   1802c:	002a      	movs	r2, r5
   1802e:	4644      	mov	r4, r8
   18030:	40e2      	lsrs	r2, r4
   18032:	001c      	movs	r4, r3
   18034:	465b      	mov	r3, fp
   18036:	0015      	movs	r5, r2
   18038:	2b00      	cmp	r3, #0
   1803a:	db2c      	blt.n	18096 <__udivmoddi4+0x166>
   1803c:	0026      	movs	r6, r4
   1803e:	409e      	lsls	r6, r3
   18040:	0033      	movs	r3, r6
   18042:	0026      	movs	r6, r4
   18044:	4647      	mov	r7, r8
   18046:	40be      	lsls	r6, r7
   18048:	0032      	movs	r2, r6
   1804a:	1a80      	subs	r0, r0, r2
   1804c:	4199      	sbcs	r1, r3
   1804e:	9000      	str	r0, [sp, #0]
   18050:	9101      	str	r1, [sp, #4]
   18052:	e7ae      	b.n	17fb2 <__udivmoddi4+0x82>
   18054:	4642      	mov	r2, r8
   18056:	2320      	movs	r3, #32
   18058:	1a9b      	subs	r3, r3, r2
   1805a:	4652      	mov	r2, sl
   1805c:	40da      	lsrs	r2, r3
   1805e:	4641      	mov	r1, r8
   18060:	0013      	movs	r3, r2
   18062:	464a      	mov	r2, r9
   18064:	408a      	lsls	r2, r1
   18066:	0017      	movs	r7, r2
   18068:	431f      	orrs	r7, r3
   1806a:	e782      	b.n	17f72 <__udivmoddi4+0x42>
   1806c:	4642      	mov	r2, r8
   1806e:	2320      	movs	r3, #32
   18070:	1a9b      	subs	r3, r3, r2
   18072:	002a      	movs	r2, r5
   18074:	4646      	mov	r6, r8
   18076:	409a      	lsls	r2, r3
   18078:	0023      	movs	r3, r4
   1807a:	40f3      	lsrs	r3, r6
   1807c:	4313      	orrs	r3, r2
   1807e:	e7d5      	b.n	1802c <__udivmoddi4+0xfc>
   18080:	4642      	mov	r2, r8
   18082:	2320      	movs	r3, #32
   18084:	2100      	movs	r1, #0
   18086:	1a9b      	subs	r3, r3, r2
   18088:	2200      	movs	r2, #0
   1808a:	9100      	str	r1, [sp, #0]
   1808c:	9201      	str	r2, [sp, #4]
   1808e:	2201      	movs	r2, #1
   18090:	40da      	lsrs	r2, r3
   18092:	9201      	str	r2, [sp, #4]
   18094:	e782      	b.n	17f9c <__udivmoddi4+0x6c>
   18096:	4642      	mov	r2, r8
   18098:	2320      	movs	r3, #32
   1809a:	0026      	movs	r6, r4
   1809c:	1a9b      	subs	r3, r3, r2
   1809e:	40de      	lsrs	r6, r3
   180a0:	002f      	movs	r7, r5
   180a2:	46b4      	mov	ip, r6
   180a4:	4097      	lsls	r7, r2
   180a6:	4666      	mov	r6, ip
   180a8:	003b      	movs	r3, r7
   180aa:	4333      	orrs	r3, r6
   180ac:	e7c9      	b.n	18042 <__udivmoddi4+0x112>
   180ae:	46c0      	nop			; (mov r8, r8)

000180b0 <__aeabi_fsub>:
   180b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   180b2:	464f      	mov	r7, r9
   180b4:	46d6      	mov	lr, sl
   180b6:	4646      	mov	r6, r8
   180b8:	0044      	lsls	r4, r0, #1
   180ba:	b5c0      	push	{r6, r7, lr}
   180bc:	0fc2      	lsrs	r2, r0, #31
   180be:	0247      	lsls	r7, r0, #9
   180c0:	0248      	lsls	r0, r1, #9
   180c2:	0a40      	lsrs	r0, r0, #9
   180c4:	4684      	mov	ip, r0
   180c6:	4666      	mov	r6, ip
   180c8:	0a7b      	lsrs	r3, r7, #9
   180ca:	0048      	lsls	r0, r1, #1
   180cc:	0fc9      	lsrs	r1, r1, #31
   180ce:	469a      	mov	sl, r3
   180d0:	0e24      	lsrs	r4, r4, #24
   180d2:	0015      	movs	r5, r2
   180d4:	00db      	lsls	r3, r3, #3
   180d6:	0e00      	lsrs	r0, r0, #24
   180d8:	4689      	mov	r9, r1
   180da:	00f6      	lsls	r6, r6, #3
   180dc:	28ff      	cmp	r0, #255	; 0xff
   180de:	d100      	bne.n	180e2 <__aeabi_fsub+0x32>
   180e0:	e08f      	b.n	18202 <__aeabi_fsub+0x152>
   180e2:	2101      	movs	r1, #1
   180e4:	464f      	mov	r7, r9
   180e6:	404f      	eors	r7, r1
   180e8:	0039      	movs	r1, r7
   180ea:	4291      	cmp	r1, r2
   180ec:	d066      	beq.n	181bc <__aeabi_fsub+0x10c>
   180ee:	1a22      	subs	r2, r4, r0
   180f0:	2a00      	cmp	r2, #0
   180f2:	dc00      	bgt.n	180f6 <__aeabi_fsub+0x46>
   180f4:	e09d      	b.n	18232 <__aeabi_fsub+0x182>
   180f6:	2800      	cmp	r0, #0
   180f8:	d13d      	bne.n	18176 <__aeabi_fsub+0xc6>
   180fa:	2e00      	cmp	r6, #0
   180fc:	d100      	bne.n	18100 <__aeabi_fsub+0x50>
   180fe:	e08b      	b.n	18218 <__aeabi_fsub+0x168>
   18100:	1e51      	subs	r1, r2, #1
   18102:	2900      	cmp	r1, #0
   18104:	d000      	beq.n	18108 <__aeabi_fsub+0x58>
   18106:	e0b5      	b.n	18274 <__aeabi_fsub+0x1c4>
   18108:	2401      	movs	r4, #1
   1810a:	1b9b      	subs	r3, r3, r6
   1810c:	015a      	lsls	r2, r3, #5
   1810e:	d544      	bpl.n	1819a <__aeabi_fsub+0xea>
   18110:	019b      	lsls	r3, r3, #6
   18112:	099f      	lsrs	r7, r3, #6
   18114:	0038      	movs	r0, r7
   18116:	f001 ff87 	bl	1a028 <__clzsi2>
   1811a:	3805      	subs	r0, #5
   1811c:	4087      	lsls	r7, r0
   1811e:	4284      	cmp	r4, r0
   18120:	dd00      	ble.n	18124 <__aeabi_fsub+0x74>
   18122:	e096      	b.n	18252 <__aeabi_fsub+0x1a2>
   18124:	1b04      	subs	r4, r0, r4
   18126:	003a      	movs	r2, r7
   18128:	2020      	movs	r0, #32
   1812a:	3401      	adds	r4, #1
   1812c:	40e2      	lsrs	r2, r4
   1812e:	1b04      	subs	r4, r0, r4
   18130:	40a7      	lsls	r7, r4
   18132:	003b      	movs	r3, r7
   18134:	1e5f      	subs	r7, r3, #1
   18136:	41bb      	sbcs	r3, r7
   18138:	2400      	movs	r4, #0
   1813a:	4313      	orrs	r3, r2
   1813c:	075a      	lsls	r2, r3, #29
   1813e:	d004      	beq.n	1814a <__aeabi_fsub+0x9a>
   18140:	220f      	movs	r2, #15
   18142:	401a      	ands	r2, r3
   18144:	2a04      	cmp	r2, #4
   18146:	d000      	beq.n	1814a <__aeabi_fsub+0x9a>
   18148:	3304      	adds	r3, #4
   1814a:	015a      	lsls	r2, r3, #5
   1814c:	d527      	bpl.n	1819e <__aeabi_fsub+0xee>
   1814e:	3401      	adds	r4, #1
   18150:	2cff      	cmp	r4, #255	; 0xff
   18152:	d100      	bne.n	18156 <__aeabi_fsub+0xa6>
   18154:	e079      	b.n	1824a <__aeabi_fsub+0x19a>
   18156:	2201      	movs	r2, #1
   18158:	019b      	lsls	r3, r3, #6
   1815a:	0a5b      	lsrs	r3, r3, #9
   1815c:	b2e4      	uxtb	r4, r4
   1815e:	402a      	ands	r2, r5
   18160:	025b      	lsls	r3, r3, #9
   18162:	05e4      	lsls	r4, r4, #23
   18164:	0a58      	lsrs	r0, r3, #9
   18166:	07d2      	lsls	r2, r2, #31
   18168:	4320      	orrs	r0, r4
   1816a:	4310      	orrs	r0, r2
   1816c:	bc1c      	pop	{r2, r3, r4}
   1816e:	4690      	mov	r8, r2
   18170:	4699      	mov	r9, r3
   18172:	46a2      	mov	sl, r4
   18174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18176:	2cff      	cmp	r4, #255	; 0xff
   18178:	d0e0      	beq.n	1813c <__aeabi_fsub+0x8c>
   1817a:	2180      	movs	r1, #128	; 0x80
   1817c:	04c9      	lsls	r1, r1, #19
   1817e:	430e      	orrs	r6, r1
   18180:	2a1b      	cmp	r2, #27
   18182:	dc7b      	bgt.n	1827c <__aeabi_fsub+0x1cc>
   18184:	0031      	movs	r1, r6
   18186:	2020      	movs	r0, #32
   18188:	40d1      	lsrs	r1, r2
   1818a:	1a82      	subs	r2, r0, r2
   1818c:	4096      	lsls	r6, r2
   1818e:	1e72      	subs	r2, r6, #1
   18190:	4196      	sbcs	r6, r2
   18192:	430e      	orrs	r6, r1
   18194:	1b9b      	subs	r3, r3, r6
   18196:	015a      	lsls	r2, r3, #5
   18198:	d4ba      	bmi.n	18110 <__aeabi_fsub+0x60>
   1819a:	075a      	lsls	r2, r3, #29
   1819c:	d1d0      	bne.n	18140 <__aeabi_fsub+0x90>
   1819e:	2201      	movs	r2, #1
   181a0:	08df      	lsrs	r7, r3, #3
   181a2:	402a      	ands	r2, r5
   181a4:	2cff      	cmp	r4, #255	; 0xff
   181a6:	d133      	bne.n	18210 <__aeabi_fsub+0x160>
   181a8:	2f00      	cmp	r7, #0
   181aa:	d100      	bne.n	181ae <__aeabi_fsub+0xfe>
   181ac:	e0a8      	b.n	18300 <__aeabi_fsub+0x250>
   181ae:	2380      	movs	r3, #128	; 0x80
   181b0:	03db      	lsls	r3, r3, #15
   181b2:	433b      	orrs	r3, r7
   181b4:	025b      	lsls	r3, r3, #9
   181b6:	0a5b      	lsrs	r3, r3, #9
   181b8:	24ff      	movs	r4, #255	; 0xff
   181ba:	e7d1      	b.n	18160 <__aeabi_fsub+0xb0>
   181bc:	1a21      	subs	r1, r4, r0
   181be:	2900      	cmp	r1, #0
   181c0:	dd4c      	ble.n	1825c <__aeabi_fsub+0x1ac>
   181c2:	2800      	cmp	r0, #0
   181c4:	d02a      	beq.n	1821c <__aeabi_fsub+0x16c>
   181c6:	2cff      	cmp	r4, #255	; 0xff
   181c8:	d0b8      	beq.n	1813c <__aeabi_fsub+0x8c>
   181ca:	2080      	movs	r0, #128	; 0x80
   181cc:	04c0      	lsls	r0, r0, #19
   181ce:	4306      	orrs	r6, r0
   181d0:	291b      	cmp	r1, #27
   181d2:	dd00      	ble.n	181d6 <__aeabi_fsub+0x126>
   181d4:	e0af      	b.n	18336 <__aeabi_fsub+0x286>
   181d6:	0030      	movs	r0, r6
   181d8:	2720      	movs	r7, #32
   181da:	40c8      	lsrs	r0, r1
   181dc:	1a79      	subs	r1, r7, r1
   181de:	408e      	lsls	r6, r1
   181e0:	1e71      	subs	r1, r6, #1
   181e2:	418e      	sbcs	r6, r1
   181e4:	4306      	orrs	r6, r0
   181e6:	199b      	adds	r3, r3, r6
   181e8:	0159      	lsls	r1, r3, #5
   181ea:	d5d6      	bpl.n	1819a <__aeabi_fsub+0xea>
   181ec:	3401      	adds	r4, #1
   181ee:	2cff      	cmp	r4, #255	; 0xff
   181f0:	d100      	bne.n	181f4 <__aeabi_fsub+0x144>
   181f2:	e085      	b.n	18300 <__aeabi_fsub+0x250>
   181f4:	2201      	movs	r2, #1
   181f6:	497a      	ldr	r1, [pc, #488]	; (183e0 <__aeabi_fsub+0x330>)
   181f8:	401a      	ands	r2, r3
   181fa:	085b      	lsrs	r3, r3, #1
   181fc:	400b      	ands	r3, r1
   181fe:	4313      	orrs	r3, r2
   18200:	e79c      	b.n	1813c <__aeabi_fsub+0x8c>
   18202:	2e00      	cmp	r6, #0
   18204:	d000      	beq.n	18208 <__aeabi_fsub+0x158>
   18206:	e770      	b.n	180ea <__aeabi_fsub+0x3a>
   18208:	e76b      	b.n	180e2 <__aeabi_fsub+0x32>
   1820a:	1e3b      	subs	r3, r7, #0
   1820c:	d1c5      	bne.n	1819a <__aeabi_fsub+0xea>
   1820e:	2200      	movs	r2, #0
   18210:	027b      	lsls	r3, r7, #9
   18212:	0a5b      	lsrs	r3, r3, #9
   18214:	b2e4      	uxtb	r4, r4
   18216:	e7a3      	b.n	18160 <__aeabi_fsub+0xb0>
   18218:	0014      	movs	r4, r2
   1821a:	e78f      	b.n	1813c <__aeabi_fsub+0x8c>
   1821c:	2e00      	cmp	r6, #0
   1821e:	d04d      	beq.n	182bc <__aeabi_fsub+0x20c>
   18220:	1e48      	subs	r0, r1, #1
   18222:	2800      	cmp	r0, #0
   18224:	d157      	bne.n	182d6 <__aeabi_fsub+0x226>
   18226:	199b      	adds	r3, r3, r6
   18228:	2401      	movs	r4, #1
   1822a:	015a      	lsls	r2, r3, #5
   1822c:	d5b5      	bpl.n	1819a <__aeabi_fsub+0xea>
   1822e:	2402      	movs	r4, #2
   18230:	e7e0      	b.n	181f4 <__aeabi_fsub+0x144>
   18232:	2a00      	cmp	r2, #0
   18234:	d125      	bne.n	18282 <__aeabi_fsub+0x1d2>
   18236:	1c62      	adds	r2, r4, #1
   18238:	b2d2      	uxtb	r2, r2
   1823a:	2a01      	cmp	r2, #1
   1823c:	dd72      	ble.n	18324 <__aeabi_fsub+0x274>
   1823e:	1b9f      	subs	r7, r3, r6
   18240:	017a      	lsls	r2, r7, #5
   18242:	d535      	bpl.n	182b0 <__aeabi_fsub+0x200>
   18244:	1af7      	subs	r7, r6, r3
   18246:	000d      	movs	r5, r1
   18248:	e764      	b.n	18114 <__aeabi_fsub+0x64>
   1824a:	2201      	movs	r2, #1
   1824c:	2300      	movs	r3, #0
   1824e:	402a      	ands	r2, r5
   18250:	e786      	b.n	18160 <__aeabi_fsub+0xb0>
   18252:	003b      	movs	r3, r7
   18254:	4a63      	ldr	r2, [pc, #396]	; (183e4 <__aeabi_fsub+0x334>)
   18256:	1a24      	subs	r4, r4, r0
   18258:	4013      	ands	r3, r2
   1825a:	e76f      	b.n	1813c <__aeabi_fsub+0x8c>
   1825c:	2900      	cmp	r1, #0
   1825e:	d16c      	bne.n	1833a <__aeabi_fsub+0x28a>
   18260:	1c61      	adds	r1, r4, #1
   18262:	b2c8      	uxtb	r0, r1
   18264:	2801      	cmp	r0, #1
   18266:	dd4e      	ble.n	18306 <__aeabi_fsub+0x256>
   18268:	29ff      	cmp	r1, #255	; 0xff
   1826a:	d049      	beq.n	18300 <__aeabi_fsub+0x250>
   1826c:	199b      	adds	r3, r3, r6
   1826e:	085b      	lsrs	r3, r3, #1
   18270:	000c      	movs	r4, r1
   18272:	e763      	b.n	1813c <__aeabi_fsub+0x8c>
   18274:	2aff      	cmp	r2, #255	; 0xff
   18276:	d041      	beq.n	182fc <__aeabi_fsub+0x24c>
   18278:	000a      	movs	r2, r1
   1827a:	e781      	b.n	18180 <__aeabi_fsub+0xd0>
   1827c:	2601      	movs	r6, #1
   1827e:	1b9b      	subs	r3, r3, r6
   18280:	e789      	b.n	18196 <__aeabi_fsub+0xe6>
   18282:	2c00      	cmp	r4, #0
   18284:	d01c      	beq.n	182c0 <__aeabi_fsub+0x210>
   18286:	28ff      	cmp	r0, #255	; 0xff
   18288:	d021      	beq.n	182ce <__aeabi_fsub+0x21e>
   1828a:	2480      	movs	r4, #128	; 0x80
   1828c:	04e4      	lsls	r4, r4, #19
   1828e:	4252      	negs	r2, r2
   18290:	4323      	orrs	r3, r4
   18292:	2a1b      	cmp	r2, #27
   18294:	dd00      	ble.n	18298 <__aeabi_fsub+0x1e8>
   18296:	e096      	b.n	183c6 <__aeabi_fsub+0x316>
   18298:	001c      	movs	r4, r3
   1829a:	2520      	movs	r5, #32
   1829c:	40d4      	lsrs	r4, r2
   1829e:	1aaa      	subs	r2, r5, r2
   182a0:	4093      	lsls	r3, r2
   182a2:	1e5a      	subs	r2, r3, #1
   182a4:	4193      	sbcs	r3, r2
   182a6:	4323      	orrs	r3, r4
   182a8:	1af3      	subs	r3, r6, r3
   182aa:	0004      	movs	r4, r0
   182ac:	000d      	movs	r5, r1
   182ae:	e72d      	b.n	1810c <__aeabi_fsub+0x5c>
   182b0:	2f00      	cmp	r7, #0
   182b2:	d000      	beq.n	182b6 <__aeabi_fsub+0x206>
   182b4:	e72e      	b.n	18114 <__aeabi_fsub+0x64>
   182b6:	2200      	movs	r2, #0
   182b8:	2400      	movs	r4, #0
   182ba:	e7a9      	b.n	18210 <__aeabi_fsub+0x160>
   182bc:	000c      	movs	r4, r1
   182be:	e73d      	b.n	1813c <__aeabi_fsub+0x8c>
   182c0:	2b00      	cmp	r3, #0
   182c2:	d058      	beq.n	18376 <__aeabi_fsub+0x2c6>
   182c4:	43d2      	mvns	r2, r2
   182c6:	2a00      	cmp	r2, #0
   182c8:	d0ee      	beq.n	182a8 <__aeabi_fsub+0x1f8>
   182ca:	28ff      	cmp	r0, #255	; 0xff
   182cc:	d1e1      	bne.n	18292 <__aeabi_fsub+0x1e2>
   182ce:	0033      	movs	r3, r6
   182d0:	24ff      	movs	r4, #255	; 0xff
   182d2:	000d      	movs	r5, r1
   182d4:	e732      	b.n	1813c <__aeabi_fsub+0x8c>
   182d6:	29ff      	cmp	r1, #255	; 0xff
   182d8:	d010      	beq.n	182fc <__aeabi_fsub+0x24c>
   182da:	0001      	movs	r1, r0
   182dc:	e778      	b.n	181d0 <__aeabi_fsub+0x120>
   182de:	2b00      	cmp	r3, #0
   182e0:	d06e      	beq.n	183c0 <__aeabi_fsub+0x310>
   182e2:	24ff      	movs	r4, #255	; 0xff
   182e4:	2e00      	cmp	r6, #0
   182e6:	d100      	bne.n	182ea <__aeabi_fsub+0x23a>
   182e8:	e728      	b.n	1813c <__aeabi_fsub+0x8c>
   182ea:	2280      	movs	r2, #128	; 0x80
   182ec:	4651      	mov	r1, sl
   182ee:	03d2      	lsls	r2, r2, #15
   182f0:	4211      	tst	r1, r2
   182f2:	d003      	beq.n	182fc <__aeabi_fsub+0x24c>
   182f4:	4661      	mov	r1, ip
   182f6:	4211      	tst	r1, r2
   182f8:	d100      	bne.n	182fc <__aeabi_fsub+0x24c>
   182fa:	0033      	movs	r3, r6
   182fc:	24ff      	movs	r4, #255	; 0xff
   182fe:	e71d      	b.n	1813c <__aeabi_fsub+0x8c>
   18300:	24ff      	movs	r4, #255	; 0xff
   18302:	2300      	movs	r3, #0
   18304:	e72c      	b.n	18160 <__aeabi_fsub+0xb0>
   18306:	2c00      	cmp	r4, #0
   18308:	d1e9      	bne.n	182de <__aeabi_fsub+0x22e>
   1830a:	2b00      	cmp	r3, #0
   1830c:	d063      	beq.n	183d6 <__aeabi_fsub+0x326>
   1830e:	2e00      	cmp	r6, #0
   18310:	d100      	bne.n	18314 <__aeabi_fsub+0x264>
   18312:	e713      	b.n	1813c <__aeabi_fsub+0x8c>
   18314:	199b      	adds	r3, r3, r6
   18316:	015a      	lsls	r2, r3, #5
   18318:	d400      	bmi.n	1831c <__aeabi_fsub+0x26c>
   1831a:	e73e      	b.n	1819a <__aeabi_fsub+0xea>
   1831c:	4a31      	ldr	r2, [pc, #196]	; (183e4 <__aeabi_fsub+0x334>)
   1831e:	000c      	movs	r4, r1
   18320:	4013      	ands	r3, r2
   18322:	e70b      	b.n	1813c <__aeabi_fsub+0x8c>
   18324:	2c00      	cmp	r4, #0
   18326:	d11e      	bne.n	18366 <__aeabi_fsub+0x2b6>
   18328:	2b00      	cmp	r3, #0
   1832a:	d12f      	bne.n	1838c <__aeabi_fsub+0x2dc>
   1832c:	2e00      	cmp	r6, #0
   1832e:	d04f      	beq.n	183d0 <__aeabi_fsub+0x320>
   18330:	0033      	movs	r3, r6
   18332:	000d      	movs	r5, r1
   18334:	e702      	b.n	1813c <__aeabi_fsub+0x8c>
   18336:	2601      	movs	r6, #1
   18338:	e755      	b.n	181e6 <__aeabi_fsub+0x136>
   1833a:	2c00      	cmp	r4, #0
   1833c:	d11f      	bne.n	1837e <__aeabi_fsub+0x2ce>
   1833e:	2b00      	cmp	r3, #0
   18340:	d043      	beq.n	183ca <__aeabi_fsub+0x31a>
   18342:	43c9      	mvns	r1, r1
   18344:	2900      	cmp	r1, #0
   18346:	d00b      	beq.n	18360 <__aeabi_fsub+0x2b0>
   18348:	28ff      	cmp	r0, #255	; 0xff
   1834a:	d039      	beq.n	183c0 <__aeabi_fsub+0x310>
   1834c:	291b      	cmp	r1, #27
   1834e:	dc44      	bgt.n	183da <__aeabi_fsub+0x32a>
   18350:	001c      	movs	r4, r3
   18352:	2720      	movs	r7, #32
   18354:	40cc      	lsrs	r4, r1
   18356:	1a79      	subs	r1, r7, r1
   18358:	408b      	lsls	r3, r1
   1835a:	1e59      	subs	r1, r3, #1
   1835c:	418b      	sbcs	r3, r1
   1835e:	4323      	orrs	r3, r4
   18360:	199b      	adds	r3, r3, r6
   18362:	0004      	movs	r4, r0
   18364:	e740      	b.n	181e8 <__aeabi_fsub+0x138>
   18366:	2b00      	cmp	r3, #0
   18368:	d11a      	bne.n	183a0 <__aeabi_fsub+0x2f0>
   1836a:	2e00      	cmp	r6, #0
   1836c:	d124      	bne.n	183b8 <__aeabi_fsub+0x308>
   1836e:	2780      	movs	r7, #128	; 0x80
   18370:	2200      	movs	r2, #0
   18372:	03ff      	lsls	r7, r7, #15
   18374:	e71b      	b.n	181ae <__aeabi_fsub+0xfe>
   18376:	0033      	movs	r3, r6
   18378:	0004      	movs	r4, r0
   1837a:	000d      	movs	r5, r1
   1837c:	e6de      	b.n	1813c <__aeabi_fsub+0x8c>
   1837e:	28ff      	cmp	r0, #255	; 0xff
   18380:	d01e      	beq.n	183c0 <__aeabi_fsub+0x310>
   18382:	2480      	movs	r4, #128	; 0x80
   18384:	04e4      	lsls	r4, r4, #19
   18386:	4249      	negs	r1, r1
   18388:	4323      	orrs	r3, r4
   1838a:	e7df      	b.n	1834c <__aeabi_fsub+0x29c>
   1838c:	2e00      	cmp	r6, #0
   1838e:	d100      	bne.n	18392 <__aeabi_fsub+0x2e2>
   18390:	e6d4      	b.n	1813c <__aeabi_fsub+0x8c>
   18392:	1b9f      	subs	r7, r3, r6
   18394:	017a      	lsls	r2, r7, #5
   18396:	d400      	bmi.n	1839a <__aeabi_fsub+0x2ea>
   18398:	e737      	b.n	1820a <__aeabi_fsub+0x15a>
   1839a:	1af3      	subs	r3, r6, r3
   1839c:	000d      	movs	r5, r1
   1839e:	e6cd      	b.n	1813c <__aeabi_fsub+0x8c>
   183a0:	24ff      	movs	r4, #255	; 0xff
   183a2:	2e00      	cmp	r6, #0
   183a4:	d100      	bne.n	183a8 <__aeabi_fsub+0x2f8>
   183a6:	e6c9      	b.n	1813c <__aeabi_fsub+0x8c>
   183a8:	2280      	movs	r2, #128	; 0x80
   183aa:	4650      	mov	r0, sl
   183ac:	03d2      	lsls	r2, r2, #15
   183ae:	4210      	tst	r0, r2
   183b0:	d0a4      	beq.n	182fc <__aeabi_fsub+0x24c>
   183b2:	4660      	mov	r0, ip
   183b4:	4210      	tst	r0, r2
   183b6:	d1a1      	bne.n	182fc <__aeabi_fsub+0x24c>
   183b8:	0033      	movs	r3, r6
   183ba:	000d      	movs	r5, r1
   183bc:	24ff      	movs	r4, #255	; 0xff
   183be:	e6bd      	b.n	1813c <__aeabi_fsub+0x8c>
   183c0:	0033      	movs	r3, r6
   183c2:	24ff      	movs	r4, #255	; 0xff
   183c4:	e6ba      	b.n	1813c <__aeabi_fsub+0x8c>
   183c6:	2301      	movs	r3, #1
   183c8:	e76e      	b.n	182a8 <__aeabi_fsub+0x1f8>
   183ca:	0033      	movs	r3, r6
   183cc:	0004      	movs	r4, r0
   183ce:	e6b5      	b.n	1813c <__aeabi_fsub+0x8c>
   183d0:	2700      	movs	r7, #0
   183d2:	2200      	movs	r2, #0
   183d4:	e71c      	b.n	18210 <__aeabi_fsub+0x160>
   183d6:	0033      	movs	r3, r6
   183d8:	e6b0      	b.n	1813c <__aeabi_fsub+0x8c>
   183da:	2301      	movs	r3, #1
   183dc:	e7c0      	b.n	18360 <__aeabi_fsub+0x2b0>
   183de:	46c0      	nop			; (mov r8, r8)
   183e0:	7dffffff 	.word	0x7dffffff
   183e4:	fbffffff 	.word	0xfbffffff

000183e8 <__aeabi_ui2f>:
   183e8:	b510      	push	{r4, lr}
   183ea:	1e04      	subs	r4, r0, #0
   183ec:	d027      	beq.n	1843e <__aeabi_ui2f+0x56>
   183ee:	f001 fe1b 	bl	1a028 <__clzsi2>
   183f2:	239e      	movs	r3, #158	; 0x9e
   183f4:	1a1b      	subs	r3, r3, r0
   183f6:	2b96      	cmp	r3, #150	; 0x96
   183f8:	dc0a      	bgt.n	18410 <__aeabi_ui2f+0x28>
   183fa:	2296      	movs	r2, #150	; 0x96
   183fc:	1ad2      	subs	r2, r2, r3
   183fe:	4094      	lsls	r4, r2
   18400:	0264      	lsls	r4, r4, #9
   18402:	0a64      	lsrs	r4, r4, #9
   18404:	b2db      	uxtb	r3, r3
   18406:	0264      	lsls	r4, r4, #9
   18408:	05db      	lsls	r3, r3, #23
   1840a:	0a60      	lsrs	r0, r4, #9
   1840c:	4318      	orrs	r0, r3
   1840e:	bd10      	pop	{r4, pc}
   18410:	2b99      	cmp	r3, #153	; 0x99
   18412:	dc17      	bgt.n	18444 <__aeabi_ui2f+0x5c>
   18414:	2299      	movs	r2, #153	; 0x99
   18416:	1ad2      	subs	r2, r2, r3
   18418:	2a00      	cmp	r2, #0
   1841a:	dd27      	ble.n	1846c <__aeabi_ui2f+0x84>
   1841c:	4094      	lsls	r4, r2
   1841e:	0022      	movs	r2, r4
   18420:	4c13      	ldr	r4, [pc, #76]	; (18470 <__aeabi_ui2f+0x88>)
   18422:	4014      	ands	r4, r2
   18424:	0751      	lsls	r1, r2, #29
   18426:	d004      	beq.n	18432 <__aeabi_ui2f+0x4a>
   18428:	210f      	movs	r1, #15
   1842a:	400a      	ands	r2, r1
   1842c:	2a04      	cmp	r2, #4
   1842e:	d000      	beq.n	18432 <__aeabi_ui2f+0x4a>
   18430:	3404      	adds	r4, #4
   18432:	0162      	lsls	r2, r4, #5
   18434:	d412      	bmi.n	1845c <__aeabi_ui2f+0x74>
   18436:	01a4      	lsls	r4, r4, #6
   18438:	0a64      	lsrs	r4, r4, #9
   1843a:	b2db      	uxtb	r3, r3
   1843c:	e7e3      	b.n	18406 <__aeabi_ui2f+0x1e>
   1843e:	2300      	movs	r3, #0
   18440:	2400      	movs	r4, #0
   18442:	e7e0      	b.n	18406 <__aeabi_ui2f+0x1e>
   18444:	22b9      	movs	r2, #185	; 0xb9
   18446:	0021      	movs	r1, r4
   18448:	1ad2      	subs	r2, r2, r3
   1844a:	4091      	lsls	r1, r2
   1844c:	000a      	movs	r2, r1
   1844e:	1e51      	subs	r1, r2, #1
   18450:	418a      	sbcs	r2, r1
   18452:	2105      	movs	r1, #5
   18454:	1a09      	subs	r1, r1, r0
   18456:	40cc      	lsrs	r4, r1
   18458:	4314      	orrs	r4, r2
   1845a:	e7db      	b.n	18414 <__aeabi_ui2f+0x2c>
   1845c:	4b04      	ldr	r3, [pc, #16]	; (18470 <__aeabi_ui2f+0x88>)
   1845e:	401c      	ands	r4, r3
   18460:	239f      	movs	r3, #159	; 0x9f
   18462:	01a4      	lsls	r4, r4, #6
   18464:	1a1b      	subs	r3, r3, r0
   18466:	0a64      	lsrs	r4, r4, #9
   18468:	b2db      	uxtb	r3, r3
   1846a:	e7cc      	b.n	18406 <__aeabi_ui2f+0x1e>
   1846c:	0022      	movs	r2, r4
   1846e:	e7d7      	b.n	18420 <__aeabi_ui2f+0x38>
   18470:	fbffffff 	.word	0xfbffffff

00018474 <__aeabi_dadd>:
   18474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18476:	4645      	mov	r5, r8
   18478:	46de      	mov	lr, fp
   1847a:	4657      	mov	r7, sl
   1847c:	464e      	mov	r6, r9
   1847e:	030c      	lsls	r4, r1, #12
   18480:	b5e0      	push	{r5, r6, r7, lr}
   18482:	004e      	lsls	r6, r1, #1
   18484:	0fc9      	lsrs	r1, r1, #31
   18486:	4688      	mov	r8, r1
   18488:	000d      	movs	r5, r1
   1848a:	0a61      	lsrs	r1, r4, #9
   1848c:	0f44      	lsrs	r4, r0, #29
   1848e:	430c      	orrs	r4, r1
   18490:	00c7      	lsls	r7, r0, #3
   18492:	0319      	lsls	r1, r3, #12
   18494:	0058      	lsls	r0, r3, #1
   18496:	0fdb      	lsrs	r3, r3, #31
   18498:	469b      	mov	fp, r3
   1849a:	0a4b      	lsrs	r3, r1, #9
   1849c:	0f51      	lsrs	r1, r2, #29
   1849e:	430b      	orrs	r3, r1
   184a0:	0d76      	lsrs	r6, r6, #21
   184a2:	0d40      	lsrs	r0, r0, #21
   184a4:	0019      	movs	r1, r3
   184a6:	00d2      	lsls	r2, r2, #3
   184a8:	45d8      	cmp	r8, fp
   184aa:	d100      	bne.n	184ae <__aeabi_dadd+0x3a>
   184ac:	e0ae      	b.n	1860c <__aeabi_dadd+0x198>
   184ae:	1a35      	subs	r5, r6, r0
   184b0:	2d00      	cmp	r5, #0
   184b2:	dc00      	bgt.n	184b6 <__aeabi_dadd+0x42>
   184b4:	e0f6      	b.n	186a4 <__aeabi_dadd+0x230>
   184b6:	2800      	cmp	r0, #0
   184b8:	d10f      	bne.n	184da <__aeabi_dadd+0x66>
   184ba:	4313      	orrs	r3, r2
   184bc:	d100      	bne.n	184c0 <__aeabi_dadd+0x4c>
   184be:	e0db      	b.n	18678 <__aeabi_dadd+0x204>
   184c0:	1e6b      	subs	r3, r5, #1
   184c2:	2b00      	cmp	r3, #0
   184c4:	d000      	beq.n	184c8 <__aeabi_dadd+0x54>
   184c6:	e137      	b.n	18738 <__aeabi_dadd+0x2c4>
   184c8:	1aba      	subs	r2, r7, r2
   184ca:	4297      	cmp	r7, r2
   184cc:	41bf      	sbcs	r7, r7
   184ce:	1a64      	subs	r4, r4, r1
   184d0:	427f      	negs	r7, r7
   184d2:	1be4      	subs	r4, r4, r7
   184d4:	2601      	movs	r6, #1
   184d6:	0017      	movs	r7, r2
   184d8:	e024      	b.n	18524 <__aeabi_dadd+0xb0>
   184da:	4bc6      	ldr	r3, [pc, #792]	; (187f4 <__aeabi_dadd+0x380>)
   184dc:	429e      	cmp	r6, r3
   184de:	d04d      	beq.n	1857c <__aeabi_dadd+0x108>
   184e0:	2380      	movs	r3, #128	; 0x80
   184e2:	041b      	lsls	r3, r3, #16
   184e4:	4319      	orrs	r1, r3
   184e6:	2d38      	cmp	r5, #56	; 0x38
   184e8:	dd00      	ble.n	184ec <__aeabi_dadd+0x78>
   184ea:	e107      	b.n	186fc <__aeabi_dadd+0x288>
   184ec:	2d1f      	cmp	r5, #31
   184ee:	dd00      	ble.n	184f2 <__aeabi_dadd+0x7e>
   184f0:	e138      	b.n	18764 <__aeabi_dadd+0x2f0>
   184f2:	2020      	movs	r0, #32
   184f4:	1b43      	subs	r3, r0, r5
   184f6:	469a      	mov	sl, r3
   184f8:	000b      	movs	r3, r1
   184fa:	4650      	mov	r0, sl
   184fc:	4083      	lsls	r3, r0
   184fe:	4699      	mov	r9, r3
   18500:	0013      	movs	r3, r2
   18502:	4648      	mov	r0, r9
   18504:	40eb      	lsrs	r3, r5
   18506:	4318      	orrs	r0, r3
   18508:	0003      	movs	r3, r0
   1850a:	4650      	mov	r0, sl
   1850c:	4082      	lsls	r2, r0
   1850e:	1e50      	subs	r0, r2, #1
   18510:	4182      	sbcs	r2, r0
   18512:	40e9      	lsrs	r1, r5
   18514:	431a      	orrs	r2, r3
   18516:	1aba      	subs	r2, r7, r2
   18518:	1a61      	subs	r1, r4, r1
   1851a:	4297      	cmp	r7, r2
   1851c:	41a4      	sbcs	r4, r4
   1851e:	0017      	movs	r7, r2
   18520:	4264      	negs	r4, r4
   18522:	1b0c      	subs	r4, r1, r4
   18524:	0223      	lsls	r3, r4, #8
   18526:	d562      	bpl.n	185ee <__aeabi_dadd+0x17a>
   18528:	0264      	lsls	r4, r4, #9
   1852a:	0a65      	lsrs	r5, r4, #9
   1852c:	2d00      	cmp	r5, #0
   1852e:	d100      	bne.n	18532 <__aeabi_dadd+0xbe>
   18530:	e0df      	b.n	186f2 <__aeabi_dadd+0x27e>
   18532:	0028      	movs	r0, r5
   18534:	f001 fd78 	bl	1a028 <__clzsi2>
   18538:	0003      	movs	r3, r0
   1853a:	3b08      	subs	r3, #8
   1853c:	2b1f      	cmp	r3, #31
   1853e:	dd00      	ble.n	18542 <__aeabi_dadd+0xce>
   18540:	e0d2      	b.n	186e8 <__aeabi_dadd+0x274>
   18542:	2220      	movs	r2, #32
   18544:	003c      	movs	r4, r7
   18546:	1ad2      	subs	r2, r2, r3
   18548:	409d      	lsls	r5, r3
   1854a:	40d4      	lsrs	r4, r2
   1854c:	409f      	lsls	r7, r3
   1854e:	4325      	orrs	r5, r4
   18550:	429e      	cmp	r6, r3
   18552:	dd00      	ble.n	18556 <__aeabi_dadd+0xe2>
   18554:	e0c4      	b.n	186e0 <__aeabi_dadd+0x26c>
   18556:	1b9e      	subs	r6, r3, r6
   18558:	1c73      	adds	r3, r6, #1
   1855a:	2b1f      	cmp	r3, #31
   1855c:	dd00      	ble.n	18560 <__aeabi_dadd+0xec>
   1855e:	e0f1      	b.n	18744 <__aeabi_dadd+0x2d0>
   18560:	2220      	movs	r2, #32
   18562:	0038      	movs	r0, r7
   18564:	0029      	movs	r1, r5
   18566:	1ad2      	subs	r2, r2, r3
   18568:	40d8      	lsrs	r0, r3
   1856a:	4091      	lsls	r1, r2
   1856c:	4097      	lsls	r7, r2
   1856e:	002c      	movs	r4, r5
   18570:	4301      	orrs	r1, r0
   18572:	1e78      	subs	r0, r7, #1
   18574:	4187      	sbcs	r7, r0
   18576:	40dc      	lsrs	r4, r3
   18578:	2600      	movs	r6, #0
   1857a:	430f      	orrs	r7, r1
   1857c:	077b      	lsls	r3, r7, #29
   1857e:	d009      	beq.n	18594 <__aeabi_dadd+0x120>
   18580:	230f      	movs	r3, #15
   18582:	403b      	ands	r3, r7
   18584:	2b04      	cmp	r3, #4
   18586:	d005      	beq.n	18594 <__aeabi_dadd+0x120>
   18588:	1d3b      	adds	r3, r7, #4
   1858a:	42bb      	cmp	r3, r7
   1858c:	41bf      	sbcs	r7, r7
   1858e:	427f      	negs	r7, r7
   18590:	19e4      	adds	r4, r4, r7
   18592:	001f      	movs	r7, r3
   18594:	0223      	lsls	r3, r4, #8
   18596:	d52c      	bpl.n	185f2 <__aeabi_dadd+0x17e>
   18598:	4b96      	ldr	r3, [pc, #600]	; (187f4 <__aeabi_dadd+0x380>)
   1859a:	3601      	adds	r6, #1
   1859c:	429e      	cmp	r6, r3
   1859e:	d100      	bne.n	185a2 <__aeabi_dadd+0x12e>
   185a0:	e09a      	b.n	186d8 <__aeabi_dadd+0x264>
   185a2:	4645      	mov	r5, r8
   185a4:	4b94      	ldr	r3, [pc, #592]	; (187f8 <__aeabi_dadd+0x384>)
   185a6:	08ff      	lsrs	r7, r7, #3
   185a8:	401c      	ands	r4, r3
   185aa:	0760      	lsls	r0, r4, #29
   185ac:	0576      	lsls	r6, r6, #21
   185ae:	0264      	lsls	r4, r4, #9
   185b0:	4307      	orrs	r7, r0
   185b2:	0b24      	lsrs	r4, r4, #12
   185b4:	0d76      	lsrs	r6, r6, #21
   185b6:	2100      	movs	r1, #0
   185b8:	0324      	lsls	r4, r4, #12
   185ba:	0b23      	lsrs	r3, r4, #12
   185bc:	0d0c      	lsrs	r4, r1, #20
   185be:	4a8f      	ldr	r2, [pc, #572]	; (187fc <__aeabi_dadd+0x388>)
   185c0:	0524      	lsls	r4, r4, #20
   185c2:	431c      	orrs	r4, r3
   185c4:	4014      	ands	r4, r2
   185c6:	0533      	lsls	r3, r6, #20
   185c8:	4323      	orrs	r3, r4
   185ca:	005b      	lsls	r3, r3, #1
   185cc:	07ed      	lsls	r5, r5, #31
   185ce:	085b      	lsrs	r3, r3, #1
   185d0:	432b      	orrs	r3, r5
   185d2:	0038      	movs	r0, r7
   185d4:	0019      	movs	r1, r3
   185d6:	bc3c      	pop	{r2, r3, r4, r5}
   185d8:	4690      	mov	r8, r2
   185da:	4699      	mov	r9, r3
   185dc:	46a2      	mov	sl, r4
   185de:	46ab      	mov	fp, r5
   185e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   185e2:	4664      	mov	r4, ip
   185e4:	4304      	orrs	r4, r0
   185e6:	d100      	bne.n	185ea <__aeabi_dadd+0x176>
   185e8:	e211      	b.n	18a0e <__aeabi_dadd+0x59a>
   185ea:	0004      	movs	r4, r0
   185ec:	4667      	mov	r7, ip
   185ee:	077b      	lsls	r3, r7, #29
   185f0:	d1c6      	bne.n	18580 <__aeabi_dadd+0x10c>
   185f2:	4645      	mov	r5, r8
   185f4:	0760      	lsls	r0, r4, #29
   185f6:	08ff      	lsrs	r7, r7, #3
   185f8:	4307      	orrs	r7, r0
   185fa:	08e4      	lsrs	r4, r4, #3
   185fc:	4b7d      	ldr	r3, [pc, #500]	; (187f4 <__aeabi_dadd+0x380>)
   185fe:	429e      	cmp	r6, r3
   18600:	d030      	beq.n	18664 <__aeabi_dadd+0x1f0>
   18602:	0324      	lsls	r4, r4, #12
   18604:	0576      	lsls	r6, r6, #21
   18606:	0b24      	lsrs	r4, r4, #12
   18608:	0d76      	lsrs	r6, r6, #21
   1860a:	e7d4      	b.n	185b6 <__aeabi_dadd+0x142>
   1860c:	1a33      	subs	r3, r6, r0
   1860e:	469a      	mov	sl, r3
   18610:	2b00      	cmp	r3, #0
   18612:	dd78      	ble.n	18706 <__aeabi_dadd+0x292>
   18614:	2800      	cmp	r0, #0
   18616:	d031      	beq.n	1867c <__aeabi_dadd+0x208>
   18618:	4876      	ldr	r0, [pc, #472]	; (187f4 <__aeabi_dadd+0x380>)
   1861a:	4286      	cmp	r6, r0
   1861c:	d0ae      	beq.n	1857c <__aeabi_dadd+0x108>
   1861e:	2080      	movs	r0, #128	; 0x80
   18620:	0400      	lsls	r0, r0, #16
   18622:	4301      	orrs	r1, r0
   18624:	4653      	mov	r3, sl
   18626:	2b38      	cmp	r3, #56	; 0x38
   18628:	dc00      	bgt.n	1862c <__aeabi_dadd+0x1b8>
   1862a:	e0e9      	b.n	18800 <__aeabi_dadd+0x38c>
   1862c:	430a      	orrs	r2, r1
   1862e:	1e51      	subs	r1, r2, #1
   18630:	418a      	sbcs	r2, r1
   18632:	2100      	movs	r1, #0
   18634:	19d2      	adds	r2, r2, r7
   18636:	42ba      	cmp	r2, r7
   18638:	41bf      	sbcs	r7, r7
   1863a:	1909      	adds	r1, r1, r4
   1863c:	427c      	negs	r4, r7
   1863e:	0017      	movs	r7, r2
   18640:	190c      	adds	r4, r1, r4
   18642:	0223      	lsls	r3, r4, #8
   18644:	d5d3      	bpl.n	185ee <__aeabi_dadd+0x17a>
   18646:	4b6b      	ldr	r3, [pc, #428]	; (187f4 <__aeabi_dadd+0x380>)
   18648:	3601      	adds	r6, #1
   1864a:	429e      	cmp	r6, r3
   1864c:	d100      	bne.n	18650 <__aeabi_dadd+0x1dc>
   1864e:	e13a      	b.n	188c6 <__aeabi_dadd+0x452>
   18650:	2001      	movs	r0, #1
   18652:	4b69      	ldr	r3, [pc, #420]	; (187f8 <__aeabi_dadd+0x384>)
   18654:	401c      	ands	r4, r3
   18656:	087b      	lsrs	r3, r7, #1
   18658:	4007      	ands	r7, r0
   1865a:	431f      	orrs	r7, r3
   1865c:	07e0      	lsls	r0, r4, #31
   1865e:	4307      	orrs	r7, r0
   18660:	0864      	lsrs	r4, r4, #1
   18662:	e78b      	b.n	1857c <__aeabi_dadd+0x108>
   18664:	0023      	movs	r3, r4
   18666:	433b      	orrs	r3, r7
   18668:	d100      	bne.n	1866c <__aeabi_dadd+0x1f8>
   1866a:	e1cb      	b.n	18a04 <__aeabi_dadd+0x590>
   1866c:	2280      	movs	r2, #128	; 0x80
   1866e:	0312      	lsls	r2, r2, #12
   18670:	4314      	orrs	r4, r2
   18672:	0324      	lsls	r4, r4, #12
   18674:	0b24      	lsrs	r4, r4, #12
   18676:	e79e      	b.n	185b6 <__aeabi_dadd+0x142>
   18678:	002e      	movs	r6, r5
   1867a:	e77f      	b.n	1857c <__aeabi_dadd+0x108>
   1867c:	0008      	movs	r0, r1
   1867e:	4310      	orrs	r0, r2
   18680:	d100      	bne.n	18684 <__aeabi_dadd+0x210>
   18682:	e0b4      	b.n	187ee <__aeabi_dadd+0x37a>
   18684:	1e58      	subs	r0, r3, #1
   18686:	2800      	cmp	r0, #0
   18688:	d000      	beq.n	1868c <__aeabi_dadd+0x218>
   1868a:	e0de      	b.n	1884a <__aeabi_dadd+0x3d6>
   1868c:	18ba      	adds	r2, r7, r2
   1868e:	42ba      	cmp	r2, r7
   18690:	419b      	sbcs	r3, r3
   18692:	1864      	adds	r4, r4, r1
   18694:	425b      	negs	r3, r3
   18696:	18e4      	adds	r4, r4, r3
   18698:	0017      	movs	r7, r2
   1869a:	2601      	movs	r6, #1
   1869c:	0223      	lsls	r3, r4, #8
   1869e:	d5a6      	bpl.n	185ee <__aeabi_dadd+0x17a>
   186a0:	2602      	movs	r6, #2
   186a2:	e7d5      	b.n	18650 <__aeabi_dadd+0x1dc>
   186a4:	2d00      	cmp	r5, #0
   186a6:	d16e      	bne.n	18786 <__aeabi_dadd+0x312>
   186a8:	1c70      	adds	r0, r6, #1
   186aa:	0540      	lsls	r0, r0, #21
   186ac:	0d40      	lsrs	r0, r0, #21
   186ae:	2801      	cmp	r0, #1
   186b0:	dc00      	bgt.n	186b4 <__aeabi_dadd+0x240>
   186b2:	e0f9      	b.n	188a8 <__aeabi_dadd+0x434>
   186b4:	1ab8      	subs	r0, r7, r2
   186b6:	4684      	mov	ip, r0
   186b8:	4287      	cmp	r7, r0
   186ba:	4180      	sbcs	r0, r0
   186bc:	1ae5      	subs	r5, r4, r3
   186be:	4240      	negs	r0, r0
   186c0:	1a2d      	subs	r5, r5, r0
   186c2:	0228      	lsls	r0, r5, #8
   186c4:	d400      	bmi.n	186c8 <__aeabi_dadd+0x254>
   186c6:	e089      	b.n	187dc <__aeabi_dadd+0x368>
   186c8:	1bd7      	subs	r7, r2, r7
   186ca:	42ba      	cmp	r2, r7
   186cc:	4192      	sbcs	r2, r2
   186ce:	1b1c      	subs	r4, r3, r4
   186d0:	4252      	negs	r2, r2
   186d2:	1aa5      	subs	r5, r4, r2
   186d4:	46d8      	mov	r8, fp
   186d6:	e729      	b.n	1852c <__aeabi_dadd+0xb8>
   186d8:	4645      	mov	r5, r8
   186da:	2400      	movs	r4, #0
   186dc:	2700      	movs	r7, #0
   186de:	e76a      	b.n	185b6 <__aeabi_dadd+0x142>
   186e0:	4c45      	ldr	r4, [pc, #276]	; (187f8 <__aeabi_dadd+0x384>)
   186e2:	1af6      	subs	r6, r6, r3
   186e4:	402c      	ands	r4, r5
   186e6:	e749      	b.n	1857c <__aeabi_dadd+0x108>
   186e8:	003d      	movs	r5, r7
   186ea:	3828      	subs	r0, #40	; 0x28
   186ec:	4085      	lsls	r5, r0
   186ee:	2700      	movs	r7, #0
   186f0:	e72e      	b.n	18550 <__aeabi_dadd+0xdc>
   186f2:	0038      	movs	r0, r7
   186f4:	f001 fc98 	bl	1a028 <__clzsi2>
   186f8:	3020      	adds	r0, #32
   186fa:	e71d      	b.n	18538 <__aeabi_dadd+0xc4>
   186fc:	430a      	orrs	r2, r1
   186fe:	1e51      	subs	r1, r2, #1
   18700:	418a      	sbcs	r2, r1
   18702:	2100      	movs	r1, #0
   18704:	e707      	b.n	18516 <__aeabi_dadd+0xa2>
   18706:	2b00      	cmp	r3, #0
   18708:	d000      	beq.n	1870c <__aeabi_dadd+0x298>
   1870a:	e0f3      	b.n	188f4 <__aeabi_dadd+0x480>
   1870c:	1c70      	adds	r0, r6, #1
   1870e:	0543      	lsls	r3, r0, #21
   18710:	0d5b      	lsrs	r3, r3, #21
   18712:	2b01      	cmp	r3, #1
   18714:	dc00      	bgt.n	18718 <__aeabi_dadd+0x2a4>
   18716:	e0ad      	b.n	18874 <__aeabi_dadd+0x400>
   18718:	4b36      	ldr	r3, [pc, #216]	; (187f4 <__aeabi_dadd+0x380>)
   1871a:	4298      	cmp	r0, r3
   1871c:	d100      	bne.n	18720 <__aeabi_dadd+0x2ac>
   1871e:	e0d1      	b.n	188c4 <__aeabi_dadd+0x450>
   18720:	18ba      	adds	r2, r7, r2
   18722:	42ba      	cmp	r2, r7
   18724:	41bf      	sbcs	r7, r7
   18726:	1864      	adds	r4, r4, r1
   18728:	427f      	negs	r7, r7
   1872a:	19e4      	adds	r4, r4, r7
   1872c:	07e7      	lsls	r7, r4, #31
   1872e:	0852      	lsrs	r2, r2, #1
   18730:	4317      	orrs	r7, r2
   18732:	0864      	lsrs	r4, r4, #1
   18734:	0006      	movs	r6, r0
   18736:	e721      	b.n	1857c <__aeabi_dadd+0x108>
   18738:	482e      	ldr	r0, [pc, #184]	; (187f4 <__aeabi_dadd+0x380>)
   1873a:	4285      	cmp	r5, r0
   1873c:	d100      	bne.n	18740 <__aeabi_dadd+0x2cc>
   1873e:	e093      	b.n	18868 <__aeabi_dadd+0x3f4>
   18740:	001d      	movs	r5, r3
   18742:	e6d0      	b.n	184e6 <__aeabi_dadd+0x72>
   18744:	0029      	movs	r1, r5
   18746:	3e1f      	subs	r6, #31
   18748:	40f1      	lsrs	r1, r6
   1874a:	2b20      	cmp	r3, #32
   1874c:	d100      	bne.n	18750 <__aeabi_dadd+0x2dc>
   1874e:	e08d      	b.n	1886c <__aeabi_dadd+0x3f8>
   18750:	2240      	movs	r2, #64	; 0x40
   18752:	1ad3      	subs	r3, r2, r3
   18754:	409d      	lsls	r5, r3
   18756:	432f      	orrs	r7, r5
   18758:	1e7d      	subs	r5, r7, #1
   1875a:	41af      	sbcs	r7, r5
   1875c:	2400      	movs	r4, #0
   1875e:	430f      	orrs	r7, r1
   18760:	2600      	movs	r6, #0
   18762:	e744      	b.n	185ee <__aeabi_dadd+0x17a>
   18764:	002b      	movs	r3, r5
   18766:	0008      	movs	r0, r1
   18768:	3b20      	subs	r3, #32
   1876a:	40d8      	lsrs	r0, r3
   1876c:	0003      	movs	r3, r0
   1876e:	2d20      	cmp	r5, #32
   18770:	d100      	bne.n	18774 <__aeabi_dadd+0x300>
   18772:	e07d      	b.n	18870 <__aeabi_dadd+0x3fc>
   18774:	2040      	movs	r0, #64	; 0x40
   18776:	1b45      	subs	r5, r0, r5
   18778:	40a9      	lsls	r1, r5
   1877a:	430a      	orrs	r2, r1
   1877c:	1e51      	subs	r1, r2, #1
   1877e:	418a      	sbcs	r2, r1
   18780:	2100      	movs	r1, #0
   18782:	431a      	orrs	r2, r3
   18784:	e6c7      	b.n	18516 <__aeabi_dadd+0xa2>
   18786:	2e00      	cmp	r6, #0
   18788:	d050      	beq.n	1882c <__aeabi_dadd+0x3b8>
   1878a:	4e1a      	ldr	r6, [pc, #104]	; (187f4 <__aeabi_dadd+0x380>)
   1878c:	42b0      	cmp	r0, r6
   1878e:	d057      	beq.n	18840 <__aeabi_dadd+0x3cc>
   18790:	2680      	movs	r6, #128	; 0x80
   18792:	426b      	negs	r3, r5
   18794:	4699      	mov	r9, r3
   18796:	0436      	lsls	r6, r6, #16
   18798:	4334      	orrs	r4, r6
   1879a:	464b      	mov	r3, r9
   1879c:	2b38      	cmp	r3, #56	; 0x38
   1879e:	dd00      	ble.n	187a2 <__aeabi_dadd+0x32e>
   187a0:	e0d6      	b.n	18950 <__aeabi_dadd+0x4dc>
   187a2:	2b1f      	cmp	r3, #31
   187a4:	dd00      	ble.n	187a8 <__aeabi_dadd+0x334>
   187a6:	e135      	b.n	18a14 <__aeabi_dadd+0x5a0>
   187a8:	2620      	movs	r6, #32
   187aa:	1af5      	subs	r5, r6, r3
   187ac:	0026      	movs	r6, r4
   187ae:	40ae      	lsls	r6, r5
   187b0:	46b2      	mov	sl, r6
   187b2:	003e      	movs	r6, r7
   187b4:	40de      	lsrs	r6, r3
   187b6:	46ac      	mov	ip, r5
   187b8:	0035      	movs	r5, r6
   187ba:	4656      	mov	r6, sl
   187bc:	432e      	orrs	r6, r5
   187be:	4665      	mov	r5, ip
   187c0:	40af      	lsls	r7, r5
   187c2:	1e7d      	subs	r5, r7, #1
   187c4:	41af      	sbcs	r7, r5
   187c6:	40dc      	lsrs	r4, r3
   187c8:	4337      	orrs	r7, r6
   187ca:	1bd7      	subs	r7, r2, r7
   187cc:	42ba      	cmp	r2, r7
   187ce:	4192      	sbcs	r2, r2
   187d0:	1b0c      	subs	r4, r1, r4
   187d2:	4252      	negs	r2, r2
   187d4:	1aa4      	subs	r4, r4, r2
   187d6:	0006      	movs	r6, r0
   187d8:	46d8      	mov	r8, fp
   187da:	e6a3      	b.n	18524 <__aeabi_dadd+0xb0>
   187dc:	4664      	mov	r4, ip
   187de:	4667      	mov	r7, ip
   187e0:	432c      	orrs	r4, r5
   187e2:	d000      	beq.n	187e6 <__aeabi_dadd+0x372>
   187e4:	e6a2      	b.n	1852c <__aeabi_dadd+0xb8>
   187e6:	2500      	movs	r5, #0
   187e8:	2600      	movs	r6, #0
   187ea:	2700      	movs	r7, #0
   187ec:	e706      	b.n	185fc <__aeabi_dadd+0x188>
   187ee:	001e      	movs	r6, r3
   187f0:	e6c4      	b.n	1857c <__aeabi_dadd+0x108>
   187f2:	46c0      	nop			; (mov r8, r8)
   187f4:	000007ff 	.word	0x000007ff
   187f8:	ff7fffff 	.word	0xff7fffff
   187fc:	800fffff 	.word	0x800fffff
   18800:	2b1f      	cmp	r3, #31
   18802:	dc63      	bgt.n	188cc <__aeabi_dadd+0x458>
   18804:	2020      	movs	r0, #32
   18806:	1ac3      	subs	r3, r0, r3
   18808:	0008      	movs	r0, r1
   1880a:	4098      	lsls	r0, r3
   1880c:	469c      	mov	ip, r3
   1880e:	4683      	mov	fp, r0
   18810:	4653      	mov	r3, sl
   18812:	0010      	movs	r0, r2
   18814:	40d8      	lsrs	r0, r3
   18816:	0003      	movs	r3, r0
   18818:	4658      	mov	r0, fp
   1881a:	4318      	orrs	r0, r3
   1881c:	4663      	mov	r3, ip
   1881e:	409a      	lsls	r2, r3
   18820:	1e53      	subs	r3, r2, #1
   18822:	419a      	sbcs	r2, r3
   18824:	4653      	mov	r3, sl
   18826:	4302      	orrs	r2, r0
   18828:	40d9      	lsrs	r1, r3
   1882a:	e703      	b.n	18634 <__aeabi_dadd+0x1c0>
   1882c:	0026      	movs	r6, r4
   1882e:	433e      	orrs	r6, r7
   18830:	d006      	beq.n	18840 <__aeabi_dadd+0x3cc>
   18832:	43eb      	mvns	r3, r5
   18834:	4699      	mov	r9, r3
   18836:	2b00      	cmp	r3, #0
   18838:	d0c7      	beq.n	187ca <__aeabi_dadd+0x356>
   1883a:	4e94      	ldr	r6, [pc, #592]	; (18a8c <__aeabi_dadd+0x618>)
   1883c:	42b0      	cmp	r0, r6
   1883e:	d1ac      	bne.n	1879a <__aeabi_dadd+0x326>
   18840:	000c      	movs	r4, r1
   18842:	0017      	movs	r7, r2
   18844:	0006      	movs	r6, r0
   18846:	46d8      	mov	r8, fp
   18848:	e698      	b.n	1857c <__aeabi_dadd+0x108>
   1884a:	4b90      	ldr	r3, [pc, #576]	; (18a8c <__aeabi_dadd+0x618>)
   1884c:	459a      	cmp	sl, r3
   1884e:	d00b      	beq.n	18868 <__aeabi_dadd+0x3f4>
   18850:	4682      	mov	sl, r0
   18852:	e6e7      	b.n	18624 <__aeabi_dadd+0x1b0>
   18854:	2800      	cmp	r0, #0
   18856:	d000      	beq.n	1885a <__aeabi_dadd+0x3e6>
   18858:	e09e      	b.n	18998 <__aeabi_dadd+0x524>
   1885a:	0018      	movs	r0, r3
   1885c:	4310      	orrs	r0, r2
   1885e:	d100      	bne.n	18862 <__aeabi_dadd+0x3ee>
   18860:	e0e9      	b.n	18a36 <__aeabi_dadd+0x5c2>
   18862:	001c      	movs	r4, r3
   18864:	0017      	movs	r7, r2
   18866:	46d8      	mov	r8, fp
   18868:	4e88      	ldr	r6, [pc, #544]	; (18a8c <__aeabi_dadd+0x618>)
   1886a:	e687      	b.n	1857c <__aeabi_dadd+0x108>
   1886c:	2500      	movs	r5, #0
   1886e:	e772      	b.n	18756 <__aeabi_dadd+0x2e2>
   18870:	2100      	movs	r1, #0
   18872:	e782      	b.n	1877a <__aeabi_dadd+0x306>
   18874:	0023      	movs	r3, r4
   18876:	433b      	orrs	r3, r7
   18878:	2e00      	cmp	r6, #0
   1887a:	d000      	beq.n	1887e <__aeabi_dadd+0x40a>
   1887c:	e0ab      	b.n	189d6 <__aeabi_dadd+0x562>
   1887e:	2b00      	cmp	r3, #0
   18880:	d100      	bne.n	18884 <__aeabi_dadd+0x410>
   18882:	e0e7      	b.n	18a54 <__aeabi_dadd+0x5e0>
   18884:	000b      	movs	r3, r1
   18886:	4313      	orrs	r3, r2
   18888:	d100      	bne.n	1888c <__aeabi_dadd+0x418>
   1888a:	e677      	b.n	1857c <__aeabi_dadd+0x108>
   1888c:	18ba      	adds	r2, r7, r2
   1888e:	42ba      	cmp	r2, r7
   18890:	41bf      	sbcs	r7, r7
   18892:	1864      	adds	r4, r4, r1
   18894:	427f      	negs	r7, r7
   18896:	19e4      	adds	r4, r4, r7
   18898:	0223      	lsls	r3, r4, #8
   1889a:	d400      	bmi.n	1889e <__aeabi_dadd+0x42a>
   1889c:	e0f2      	b.n	18a84 <__aeabi_dadd+0x610>
   1889e:	4b7c      	ldr	r3, [pc, #496]	; (18a90 <__aeabi_dadd+0x61c>)
   188a0:	0017      	movs	r7, r2
   188a2:	401c      	ands	r4, r3
   188a4:	0006      	movs	r6, r0
   188a6:	e669      	b.n	1857c <__aeabi_dadd+0x108>
   188a8:	0020      	movs	r0, r4
   188aa:	4338      	orrs	r0, r7
   188ac:	2e00      	cmp	r6, #0
   188ae:	d1d1      	bne.n	18854 <__aeabi_dadd+0x3e0>
   188b0:	2800      	cmp	r0, #0
   188b2:	d15b      	bne.n	1896c <__aeabi_dadd+0x4f8>
   188b4:	001c      	movs	r4, r3
   188b6:	4314      	orrs	r4, r2
   188b8:	d100      	bne.n	188bc <__aeabi_dadd+0x448>
   188ba:	e0a8      	b.n	18a0e <__aeabi_dadd+0x59a>
   188bc:	001c      	movs	r4, r3
   188be:	0017      	movs	r7, r2
   188c0:	46d8      	mov	r8, fp
   188c2:	e65b      	b.n	1857c <__aeabi_dadd+0x108>
   188c4:	0006      	movs	r6, r0
   188c6:	2400      	movs	r4, #0
   188c8:	2700      	movs	r7, #0
   188ca:	e697      	b.n	185fc <__aeabi_dadd+0x188>
   188cc:	4650      	mov	r0, sl
   188ce:	000b      	movs	r3, r1
   188d0:	3820      	subs	r0, #32
   188d2:	40c3      	lsrs	r3, r0
   188d4:	4699      	mov	r9, r3
   188d6:	4653      	mov	r3, sl
   188d8:	2b20      	cmp	r3, #32
   188da:	d100      	bne.n	188de <__aeabi_dadd+0x46a>
   188dc:	e095      	b.n	18a0a <__aeabi_dadd+0x596>
   188de:	2340      	movs	r3, #64	; 0x40
   188e0:	4650      	mov	r0, sl
   188e2:	1a1b      	subs	r3, r3, r0
   188e4:	4099      	lsls	r1, r3
   188e6:	430a      	orrs	r2, r1
   188e8:	1e51      	subs	r1, r2, #1
   188ea:	418a      	sbcs	r2, r1
   188ec:	464b      	mov	r3, r9
   188ee:	2100      	movs	r1, #0
   188f0:	431a      	orrs	r2, r3
   188f2:	e69f      	b.n	18634 <__aeabi_dadd+0x1c0>
   188f4:	2e00      	cmp	r6, #0
   188f6:	d130      	bne.n	1895a <__aeabi_dadd+0x4e6>
   188f8:	0026      	movs	r6, r4
   188fa:	433e      	orrs	r6, r7
   188fc:	d067      	beq.n	189ce <__aeabi_dadd+0x55a>
   188fe:	43db      	mvns	r3, r3
   18900:	469a      	mov	sl, r3
   18902:	2b00      	cmp	r3, #0
   18904:	d01c      	beq.n	18940 <__aeabi_dadd+0x4cc>
   18906:	4e61      	ldr	r6, [pc, #388]	; (18a8c <__aeabi_dadd+0x618>)
   18908:	42b0      	cmp	r0, r6
   1890a:	d060      	beq.n	189ce <__aeabi_dadd+0x55a>
   1890c:	4653      	mov	r3, sl
   1890e:	2b38      	cmp	r3, #56	; 0x38
   18910:	dd00      	ble.n	18914 <__aeabi_dadd+0x4a0>
   18912:	e096      	b.n	18a42 <__aeabi_dadd+0x5ce>
   18914:	2b1f      	cmp	r3, #31
   18916:	dd00      	ble.n	1891a <__aeabi_dadd+0x4a6>
   18918:	e09f      	b.n	18a5a <__aeabi_dadd+0x5e6>
   1891a:	2620      	movs	r6, #32
   1891c:	1af3      	subs	r3, r6, r3
   1891e:	0026      	movs	r6, r4
   18920:	409e      	lsls	r6, r3
   18922:	469c      	mov	ip, r3
   18924:	46b3      	mov	fp, r6
   18926:	4653      	mov	r3, sl
   18928:	003e      	movs	r6, r7
   1892a:	40de      	lsrs	r6, r3
   1892c:	0033      	movs	r3, r6
   1892e:	465e      	mov	r6, fp
   18930:	431e      	orrs	r6, r3
   18932:	4663      	mov	r3, ip
   18934:	409f      	lsls	r7, r3
   18936:	1e7b      	subs	r3, r7, #1
   18938:	419f      	sbcs	r7, r3
   1893a:	4653      	mov	r3, sl
   1893c:	40dc      	lsrs	r4, r3
   1893e:	4337      	orrs	r7, r6
   18940:	18bf      	adds	r7, r7, r2
   18942:	4297      	cmp	r7, r2
   18944:	4192      	sbcs	r2, r2
   18946:	1864      	adds	r4, r4, r1
   18948:	4252      	negs	r2, r2
   1894a:	18a4      	adds	r4, r4, r2
   1894c:	0006      	movs	r6, r0
   1894e:	e678      	b.n	18642 <__aeabi_dadd+0x1ce>
   18950:	4327      	orrs	r7, r4
   18952:	1e7c      	subs	r4, r7, #1
   18954:	41a7      	sbcs	r7, r4
   18956:	2400      	movs	r4, #0
   18958:	e737      	b.n	187ca <__aeabi_dadd+0x356>
   1895a:	4e4c      	ldr	r6, [pc, #304]	; (18a8c <__aeabi_dadd+0x618>)
   1895c:	42b0      	cmp	r0, r6
   1895e:	d036      	beq.n	189ce <__aeabi_dadd+0x55a>
   18960:	2680      	movs	r6, #128	; 0x80
   18962:	425b      	negs	r3, r3
   18964:	0436      	lsls	r6, r6, #16
   18966:	469a      	mov	sl, r3
   18968:	4334      	orrs	r4, r6
   1896a:	e7cf      	b.n	1890c <__aeabi_dadd+0x498>
   1896c:	0018      	movs	r0, r3
   1896e:	4310      	orrs	r0, r2
   18970:	d100      	bne.n	18974 <__aeabi_dadd+0x500>
   18972:	e603      	b.n	1857c <__aeabi_dadd+0x108>
   18974:	1ab8      	subs	r0, r7, r2
   18976:	4684      	mov	ip, r0
   18978:	4567      	cmp	r7, ip
   1897a:	41ad      	sbcs	r5, r5
   1897c:	1ae0      	subs	r0, r4, r3
   1897e:	426d      	negs	r5, r5
   18980:	1b40      	subs	r0, r0, r5
   18982:	0205      	lsls	r5, r0, #8
   18984:	d400      	bmi.n	18988 <__aeabi_dadd+0x514>
   18986:	e62c      	b.n	185e2 <__aeabi_dadd+0x16e>
   18988:	1bd7      	subs	r7, r2, r7
   1898a:	42ba      	cmp	r2, r7
   1898c:	4192      	sbcs	r2, r2
   1898e:	1b1c      	subs	r4, r3, r4
   18990:	4252      	negs	r2, r2
   18992:	1aa4      	subs	r4, r4, r2
   18994:	46d8      	mov	r8, fp
   18996:	e5f1      	b.n	1857c <__aeabi_dadd+0x108>
   18998:	0018      	movs	r0, r3
   1899a:	4310      	orrs	r0, r2
   1899c:	d100      	bne.n	189a0 <__aeabi_dadd+0x52c>
   1899e:	e763      	b.n	18868 <__aeabi_dadd+0x3f4>
   189a0:	08f8      	lsrs	r0, r7, #3
   189a2:	0767      	lsls	r7, r4, #29
   189a4:	4307      	orrs	r7, r0
   189a6:	2080      	movs	r0, #128	; 0x80
   189a8:	08e4      	lsrs	r4, r4, #3
   189aa:	0300      	lsls	r0, r0, #12
   189ac:	4204      	tst	r4, r0
   189ae:	d008      	beq.n	189c2 <__aeabi_dadd+0x54e>
   189b0:	08dd      	lsrs	r5, r3, #3
   189b2:	4205      	tst	r5, r0
   189b4:	d105      	bne.n	189c2 <__aeabi_dadd+0x54e>
   189b6:	08d2      	lsrs	r2, r2, #3
   189b8:	0759      	lsls	r1, r3, #29
   189ba:	4311      	orrs	r1, r2
   189bc:	000f      	movs	r7, r1
   189be:	002c      	movs	r4, r5
   189c0:	46d8      	mov	r8, fp
   189c2:	0f7b      	lsrs	r3, r7, #29
   189c4:	00e4      	lsls	r4, r4, #3
   189c6:	431c      	orrs	r4, r3
   189c8:	00ff      	lsls	r7, r7, #3
   189ca:	4e30      	ldr	r6, [pc, #192]	; (18a8c <__aeabi_dadd+0x618>)
   189cc:	e5d6      	b.n	1857c <__aeabi_dadd+0x108>
   189ce:	000c      	movs	r4, r1
   189d0:	0017      	movs	r7, r2
   189d2:	0006      	movs	r6, r0
   189d4:	e5d2      	b.n	1857c <__aeabi_dadd+0x108>
   189d6:	2b00      	cmp	r3, #0
   189d8:	d038      	beq.n	18a4c <__aeabi_dadd+0x5d8>
   189da:	000b      	movs	r3, r1
   189dc:	4313      	orrs	r3, r2
   189de:	d100      	bne.n	189e2 <__aeabi_dadd+0x56e>
   189e0:	e742      	b.n	18868 <__aeabi_dadd+0x3f4>
   189e2:	08f8      	lsrs	r0, r7, #3
   189e4:	0767      	lsls	r7, r4, #29
   189e6:	4307      	orrs	r7, r0
   189e8:	2080      	movs	r0, #128	; 0x80
   189ea:	08e4      	lsrs	r4, r4, #3
   189ec:	0300      	lsls	r0, r0, #12
   189ee:	4204      	tst	r4, r0
   189f0:	d0e7      	beq.n	189c2 <__aeabi_dadd+0x54e>
   189f2:	08cb      	lsrs	r3, r1, #3
   189f4:	4203      	tst	r3, r0
   189f6:	d1e4      	bne.n	189c2 <__aeabi_dadd+0x54e>
   189f8:	08d2      	lsrs	r2, r2, #3
   189fa:	0749      	lsls	r1, r1, #29
   189fc:	4311      	orrs	r1, r2
   189fe:	000f      	movs	r7, r1
   18a00:	001c      	movs	r4, r3
   18a02:	e7de      	b.n	189c2 <__aeabi_dadd+0x54e>
   18a04:	2700      	movs	r7, #0
   18a06:	2400      	movs	r4, #0
   18a08:	e5d5      	b.n	185b6 <__aeabi_dadd+0x142>
   18a0a:	2100      	movs	r1, #0
   18a0c:	e76b      	b.n	188e6 <__aeabi_dadd+0x472>
   18a0e:	2500      	movs	r5, #0
   18a10:	2700      	movs	r7, #0
   18a12:	e5f3      	b.n	185fc <__aeabi_dadd+0x188>
   18a14:	464e      	mov	r6, r9
   18a16:	0025      	movs	r5, r4
   18a18:	3e20      	subs	r6, #32
   18a1a:	40f5      	lsrs	r5, r6
   18a1c:	464b      	mov	r3, r9
   18a1e:	002e      	movs	r6, r5
   18a20:	2b20      	cmp	r3, #32
   18a22:	d02d      	beq.n	18a80 <__aeabi_dadd+0x60c>
   18a24:	2540      	movs	r5, #64	; 0x40
   18a26:	1aed      	subs	r5, r5, r3
   18a28:	40ac      	lsls	r4, r5
   18a2a:	4327      	orrs	r7, r4
   18a2c:	1e7c      	subs	r4, r7, #1
   18a2e:	41a7      	sbcs	r7, r4
   18a30:	2400      	movs	r4, #0
   18a32:	4337      	orrs	r7, r6
   18a34:	e6c9      	b.n	187ca <__aeabi_dadd+0x356>
   18a36:	2480      	movs	r4, #128	; 0x80
   18a38:	2500      	movs	r5, #0
   18a3a:	0324      	lsls	r4, r4, #12
   18a3c:	4e13      	ldr	r6, [pc, #76]	; (18a8c <__aeabi_dadd+0x618>)
   18a3e:	2700      	movs	r7, #0
   18a40:	e5dc      	b.n	185fc <__aeabi_dadd+0x188>
   18a42:	4327      	orrs	r7, r4
   18a44:	1e7c      	subs	r4, r7, #1
   18a46:	41a7      	sbcs	r7, r4
   18a48:	2400      	movs	r4, #0
   18a4a:	e779      	b.n	18940 <__aeabi_dadd+0x4cc>
   18a4c:	000c      	movs	r4, r1
   18a4e:	0017      	movs	r7, r2
   18a50:	4e0e      	ldr	r6, [pc, #56]	; (18a8c <__aeabi_dadd+0x618>)
   18a52:	e593      	b.n	1857c <__aeabi_dadd+0x108>
   18a54:	000c      	movs	r4, r1
   18a56:	0017      	movs	r7, r2
   18a58:	e590      	b.n	1857c <__aeabi_dadd+0x108>
   18a5a:	4656      	mov	r6, sl
   18a5c:	0023      	movs	r3, r4
   18a5e:	3e20      	subs	r6, #32
   18a60:	40f3      	lsrs	r3, r6
   18a62:	4699      	mov	r9, r3
   18a64:	4653      	mov	r3, sl
   18a66:	2b20      	cmp	r3, #32
   18a68:	d00e      	beq.n	18a88 <__aeabi_dadd+0x614>
   18a6a:	2340      	movs	r3, #64	; 0x40
   18a6c:	4656      	mov	r6, sl
   18a6e:	1b9b      	subs	r3, r3, r6
   18a70:	409c      	lsls	r4, r3
   18a72:	4327      	orrs	r7, r4
   18a74:	1e7c      	subs	r4, r7, #1
   18a76:	41a7      	sbcs	r7, r4
   18a78:	464b      	mov	r3, r9
   18a7a:	2400      	movs	r4, #0
   18a7c:	431f      	orrs	r7, r3
   18a7e:	e75f      	b.n	18940 <__aeabi_dadd+0x4cc>
   18a80:	2400      	movs	r4, #0
   18a82:	e7d2      	b.n	18a2a <__aeabi_dadd+0x5b6>
   18a84:	0017      	movs	r7, r2
   18a86:	e5b2      	b.n	185ee <__aeabi_dadd+0x17a>
   18a88:	2400      	movs	r4, #0
   18a8a:	e7f2      	b.n	18a72 <__aeabi_dadd+0x5fe>
   18a8c:	000007ff 	.word	0x000007ff
   18a90:	ff7fffff 	.word	0xff7fffff

00018a94 <__aeabi_ddiv>:
   18a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a96:	4657      	mov	r7, sl
   18a98:	4645      	mov	r5, r8
   18a9a:	46de      	mov	lr, fp
   18a9c:	464e      	mov	r6, r9
   18a9e:	b5e0      	push	{r5, r6, r7, lr}
   18aa0:	004c      	lsls	r4, r1, #1
   18aa2:	030e      	lsls	r6, r1, #12
   18aa4:	b087      	sub	sp, #28
   18aa6:	4683      	mov	fp, r0
   18aa8:	4692      	mov	sl, r2
   18aaa:	001d      	movs	r5, r3
   18aac:	4680      	mov	r8, r0
   18aae:	0b36      	lsrs	r6, r6, #12
   18ab0:	0d64      	lsrs	r4, r4, #21
   18ab2:	0fcf      	lsrs	r7, r1, #31
   18ab4:	2c00      	cmp	r4, #0
   18ab6:	d04f      	beq.n	18b58 <__aeabi_ddiv+0xc4>
   18ab8:	4b6f      	ldr	r3, [pc, #444]	; (18c78 <__aeabi_ddiv+0x1e4>)
   18aba:	429c      	cmp	r4, r3
   18abc:	d035      	beq.n	18b2a <__aeabi_ddiv+0x96>
   18abe:	2380      	movs	r3, #128	; 0x80
   18ac0:	0f42      	lsrs	r2, r0, #29
   18ac2:	041b      	lsls	r3, r3, #16
   18ac4:	00f6      	lsls	r6, r6, #3
   18ac6:	4313      	orrs	r3, r2
   18ac8:	4333      	orrs	r3, r6
   18aca:	4699      	mov	r9, r3
   18acc:	00c3      	lsls	r3, r0, #3
   18ace:	4698      	mov	r8, r3
   18ad0:	4b6a      	ldr	r3, [pc, #424]	; (18c7c <__aeabi_ddiv+0x1e8>)
   18ad2:	2600      	movs	r6, #0
   18ad4:	469c      	mov	ip, r3
   18ad6:	2300      	movs	r3, #0
   18ad8:	4464      	add	r4, ip
   18ada:	9303      	str	r3, [sp, #12]
   18adc:	032b      	lsls	r3, r5, #12
   18ade:	0b1b      	lsrs	r3, r3, #12
   18ae0:	469b      	mov	fp, r3
   18ae2:	006b      	lsls	r3, r5, #1
   18ae4:	0fed      	lsrs	r5, r5, #31
   18ae6:	4650      	mov	r0, sl
   18ae8:	0d5b      	lsrs	r3, r3, #21
   18aea:	9501      	str	r5, [sp, #4]
   18aec:	d05e      	beq.n	18bac <__aeabi_ddiv+0x118>
   18aee:	4a62      	ldr	r2, [pc, #392]	; (18c78 <__aeabi_ddiv+0x1e4>)
   18af0:	4293      	cmp	r3, r2
   18af2:	d053      	beq.n	18b9c <__aeabi_ddiv+0x108>
   18af4:	465a      	mov	r2, fp
   18af6:	00d1      	lsls	r1, r2, #3
   18af8:	2280      	movs	r2, #128	; 0x80
   18afa:	0f40      	lsrs	r0, r0, #29
   18afc:	0412      	lsls	r2, r2, #16
   18afe:	4302      	orrs	r2, r0
   18b00:	430a      	orrs	r2, r1
   18b02:	4693      	mov	fp, r2
   18b04:	4652      	mov	r2, sl
   18b06:	00d1      	lsls	r1, r2, #3
   18b08:	4a5c      	ldr	r2, [pc, #368]	; (18c7c <__aeabi_ddiv+0x1e8>)
   18b0a:	4694      	mov	ip, r2
   18b0c:	2200      	movs	r2, #0
   18b0e:	4463      	add	r3, ip
   18b10:	0038      	movs	r0, r7
   18b12:	4068      	eors	r0, r5
   18b14:	4684      	mov	ip, r0
   18b16:	9002      	str	r0, [sp, #8]
   18b18:	1ae4      	subs	r4, r4, r3
   18b1a:	4316      	orrs	r6, r2
   18b1c:	2e0f      	cmp	r6, #15
   18b1e:	d900      	bls.n	18b22 <__aeabi_ddiv+0x8e>
   18b20:	e0b4      	b.n	18c8c <__aeabi_ddiv+0x1f8>
   18b22:	4b57      	ldr	r3, [pc, #348]	; (18c80 <__aeabi_ddiv+0x1ec>)
   18b24:	00b6      	lsls	r6, r6, #2
   18b26:	599b      	ldr	r3, [r3, r6]
   18b28:	469f      	mov	pc, r3
   18b2a:	0003      	movs	r3, r0
   18b2c:	4333      	orrs	r3, r6
   18b2e:	4699      	mov	r9, r3
   18b30:	d16c      	bne.n	18c0c <__aeabi_ddiv+0x178>
   18b32:	2300      	movs	r3, #0
   18b34:	4698      	mov	r8, r3
   18b36:	3302      	adds	r3, #2
   18b38:	2608      	movs	r6, #8
   18b3a:	9303      	str	r3, [sp, #12]
   18b3c:	e7ce      	b.n	18adc <__aeabi_ddiv+0x48>
   18b3e:	46cb      	mov	fp, r9
   18b40:	4641      	mov	r1, r8
   18b42:	9a03      	ldr	r2, [sp, #12]
   18b44:	9701      	str	r7, [sp, #4]
   18b46:	2a02      	cmp	r2, #2
   18b48:	d165      	bne.n	18c16 <__aeabi_ddiv+0x182>
   18b4a:	9b01      	ldr	r3, [sp, #4]
   18b4c:	4c4a      	ldr	r4, [pc, #296]	; (18c78 <__aeabi_ddiv+0x1e4>)
   18b4e:	469c      	mov	ip, r3
   18b50:	2300      	movs	r3, #0
   18b52:	2200      	movs	r2, #0
   18b54:	4698      	mov	r8, r3
   18b56:	e06b      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18b58:	0003      	movs	r3, r0
   18b5a:	4333      	orrs	r3, r6
   18b5c:	4699      	mov	r9, r3
   18b5e:	d04e      	beq.n	18bfe <__aeabi_ddiv+0x16a>
   18b60:	2e00      	cmp	r6, #0
   18b62:	d100      	bne.n	18b66 <__aeabi_ddiv+0xd2>
   18b64:	e1bc      	b.n	18ee0 <__aeabi_ddiv+0x44c>
   18b66:	0030      	movs	r0, r6
   18b68:	f001 fa5e 	bl	1a028 <__clzsi2>
   18b6c:	0003      	movs	r3, r0
   18b6e:	3b0b      	subs	r3, #11
   18b70:	2b1c      	cmp	r3, #28
   18b72:	dd00      	ble.n	18b76 <__aeabi_ddiv+0xe2>
   18b74:	e1ac      	b.n	18ed0 <__aeabi_ddiv+0x43c>
   18b76:	221d      	movs	r2, #29
   18b78:	1ad3      	subs	r3, r2, r3
   18b7a:	465a      	mov	r2, fp
   18b7c:	0001      	movs	r1, r0
   18b7e:	40da      	lsrs	r2, r3
   18b80:	3908      	subs	r1, #8
   18b82:	408e      	lsls	r6, r1
   18b84:	0013      	movs	r3, r2
   18b86:	4333      	orrs	r3, r6
   18b88:	4699      	mov	r9, r3
   18b8a:	465b      	mov	r3, fp
   18b8c:	408b      	lsls	r3, r1
   18b8e:	4698      	mov	r8, r3
   18b90:	2300      	movs	r3, #0
   18b92:	4c3c      	ldr	r4, [pc, #240]	; (18c84 <__aeabi_ddiv+0x1f0>)
   18b94:	2600      	movs	r6, #0
   18b96:	1a24      	subs	r4, r4, r0
   18b98:	9303      	str	r3, [sp, #12]
   18b9a:	e79f      	b.n	18adc <__aeabi_ddiv+0x48>
   18b9c:	4651      	mov	r1, sl
   18b9e:	465a      	mov	r2, fp
   18ba0:	4311      	orrs	r1, r2
   18ba2:	d129      	bne.n	18bf8 <__aeabi_ddiv+0x164>
   18ba4:	2200      	movs	r2, #0
   18ba6:	4693      	mov	fp, r2
   18ba8:	3202      	adds	r2, #2
   18baa:	e7b1      	b.n	18b10 <__aeabi_ddiv+0x7c>
   18bac:	4659      	mov	r1, fp
   18bae:	4301      	orrs	r1, r0
   18bb0:	d01e      	beq.n	18bf0 <__aeabi_ddiv+0x15c>
   18bb2:	465b      	mov	r3, fp
   18bb4:	2b00      	cmp	r3, #0
   18bb6:	d100      	bne.n	18bba <__aeabi_ddiv+0x126>
   18bb8:	e19e      	b.n	18ef8 <__aeabi_ddiv+0x464>
   18bba:	4658      	mov	r0, fp
   18bbc:	f001 fa34 	bl	1a028 <__clzsi2>
   18bc0:	0003      	movs	r3, r0
   18bc2:	3b0b      	subs	r3, #11
   18bc4:	2b1c      	cmp	r3, #28
   18bc6:	dd00      	ble.n	18bca <__aeabi_ddiv+0x136>
   18bc8:	e18f      	b.n	18eea <__aeabi_ddiv+0x456>
   18bca:	0002      	movs	r2, r0
   18bcc:	4659      	mov	r1, fp
   18bce:	3a08      	subs	r2, #8
   18bd0:	4091      	lsls	r1, r2
   18bd2:	468b      	mov	fp, r1
   18bd4:	211d      	movs	r1, #29
   18bd6:	1acb      	subs	r3, r1, r3
   18bd8:	4651      	mov	r1, sl
   18bda:	40d9      	lsrs	r1, r3
   18bdc:	000b      	movs	r3, r1
   18bde:	4659      	mov	r1, fp
   18be0:	430b      	orrs	r3, r1
   18be2:	4651      	mov	r1, sl
   18be4:	469b      	mov	fp, r3
   18be6:	4091      	lsls	r1, r2
   18be8:	4b26      	ldr	r3, [pc, #152]	; (18c84 <__aeabi_ddiv+0x1f0>)
   18bea:	2200      	movs	r2, #0
   18bec:	1a1b      	subs	r3, r3, r0
   18bee:	e78f      	b.n	18b10 <__aeabi_ddiv+0x7c>
   18bf0:	2300      	movs	r3, #0
   18bf2:	2201      	movs	r2, #1
   18bf4:	469b      	mov	fp, r3
   18bf6:	e78b      	b.n	18b10 <__aeabi_ddiv+0x7c>
   18bf8:	4651      	mov	r1, sl
   18bfa:	2203      	movs	r2, #3
   18bfc:	e788      	b.n	18b10 <__aeabi_ddiv+0x7c>
   18bfe:	2300      	movs	r3, #0
   18c00:	4698      	mov	r8, r3
   18c02:	3301      	adds	r3, #1
   18c04:	2604      	movs	r6, #4
   18c06:	2400      	movs	r4, #0
   18c08:	9303      	str	r3, [sp, #12]
   18c0a:	e767      	b.n	18adc <__aeabi_ddiv+0x48>
   18c0c:	2303      	movs	r3, #3
   18c0e:	46b1      	mov	r9, r6
   18c10:	9303      	str	r3, [sp, #12]
   18c12:	260c      	movs	r6, #12
   18c14:	e762      	b.n	18adc <__aeabi_ddiv+0x48>
   18c16:	2a03      	cmp	r2, #3
   18c18:	d100      	bne.n	18c1c <__aeabi_ddiv+0x188>
   18c1a:	e25c      	b.n	190d6 <__aeabi_ddiv+0x642>
   18c1c:	9b01      	ldr	r3, [sp, #4]
   18c1e:	2a01      	cmp	r2, #1
   18c20:	d000      	beq.n	18c24 <__aeabi_ddiv+0x190>
   18c22:	e1e4      	b.n	18fee <__aeabi_ddiv+0x55a>
   18c24:	4013      	ands	r3, r2
   18c26:	469c      	mov	ip, r3
   18c28:	2300      	movs	r3, #0
   18c2a:	2400      	movs	r4, #0
   18c2c:	2200      	movs	r2, #0
   18c2e:	4698      	mov	r8, r3
   18c30:	2100      	movs	r1, #0
   18c32:	0312      	lsls	r2, r2, #12
   18c34:	0b13      	lsrs	r3, r2, #12
   18c36:	0d0a      	lsrs	r2, r1, #20
   18c38:	0512      	lsls	r2, r2, #20
   18c3a:	431a      	orrs	r2, r3
   18c3c:	0523      	lsls	r3, r4, #20
   18c3e:	4c12      	ldr	r4, [pc, #72]	; (18c88 <__aeabi_ddiv+0x1f4>)
   18c40:	4640      	mov	r0, r8
   18c42:	4022      	ands	r2, r4
   18c44:	4313      	orrs	r3, r2
   18c46:	4662      	mov	r2, ip
   18c48:	005b      	lsls	r3, r3, #1
   18c4a:	07d2      	lsls	r2, r2, #31
   18c4c:	085b      	lsrs	r3, r3, #1
   18c4e:	4313      	orrs	r3, r2
   18c50:	0019      	movs	r1, r3
   18c52:	b007      	add	sp, #28
   18c54:	bc3c      	pop	{r2, r3, r4, r5}
   18c56:	4690      	mov	r8, r2
   18c58:	4699      	mov	r9, r3
   18c5a:	46a2      	mov	sl, r4
   18c5c:	46ab      	mov	fp, r5
   18c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c60:	2300      	movs	r3, #0
   18c62:	2280      	movs	r2, #128	; 0x80
   18c64:	469c      	mov	ip, r3
   18c66:	0312      	lsls	r2, r2, #12
   18c68:	4698      	mov	r8, r3
   18c6a:	4c03      	ldr	r4, [pc, #12]	; (18c78 <__aeabi_ddiv+0x1e4>)
   18c6c:	e7e0      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18c6e:	2300      	movs	r3, #0
   18c70:	4c01      	ldr	r4, [pc, #4]	; (18c78 <__aeabi_ddiv+0x1e4>)
   18c72:	2200      	movs	r2, #0
   18c74:	4698      	mov	r8, r3
   18c76:	e7db      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18c78:	000007ff 	.word	0x000007ff
   18c7c:	fffffc01 	.word	0xfffffc01
   18c80:	00020148 	.word	0x00020148
   18c84:	fffffc0d 	.word	0xfffffc0d
   18c88:	800fffff 	.word	0x800fffff
   18c8c:	45d9      	cmp	r9, fp
   18c8e:	d900      	bls.n	18c92 <__aeabi_ddiv+0x1fe>
   18c90:	e139      	b.n	18f06 <__aeabi_ddiv+0x472>
   18c92:	d100      	bne.n	18c96 <__aeabi_ddiv+0x202>
   18c94:	e134      	b.n	18f00 <__aeabi_ddiv+0x46c>
   18c96:	2300      	movs	r3, #0
   18c98:	4646      	mov	r6, r8
   18c9a:	464d      	mov	r5, r9
   18c9c:	469a      	mov	sl, r3
   18c9e:	3c01      	subs	r4, #1
   18ca0:	465b      	mov	r3, fp
   18ca2:	0e0a      	lsrs	r2, r1, #24
   18ca4:	021b      	lsls	r3, r3, #8
   18ca6:	431a      	orrs	r2, r3
   18ca8:	020b      	lsls	r3, r1, #8
   18caa:	0c17      	lsrs	r7, r2, #16
   18cac:	9303      	str	r3, [sp, #12]
   18cae:	0413      	lsls	r3, r2, #16
   18cb0:	0c1b      	lsrs	r3, r3, #16
   18cb2:	0039      	movs	r1, r7
   18cb4:	0028      	movs	r0, r5
   18cb6:	4690      	mov	r8, r2
   18cb8:	9301      	str	r3, [sp, #4]
   18cba:	f7fe ff47 	bl	17b4c <__udivsi3>
   18cbe:	0002      	movs	r2, r0
   18cc0:	9b01      	ldr	r3, [sp, #4]
   18cc2:	4683      	mov	fp, r0
   18cc4:	435a      	muls	r2, r3
   18cc6:	0028      	movs	r0, r5
   18cc8:	0039      	movs	r1, r7
   18cca:	4691      	mov	r9, r2
   18ccc:	f7fe ffc4 	bl	17c58 <__aeabi_uidivmod>
   18cd0:	0c35      	lsrs	r5, r6, #16
   18cd2:	0409      	lsls	r1, r1, #16
   18cd4:	430d      	orrs	r5, r1
   18cd6:	45a9      	cmp	r9, r5
   18cd8:	d90d      	bls.n	18cf6 <__aeabi_ddiv+0x262>
   18cda:	465b      	mov	r3, fp
   18cdc:	4445      	add	r5, r8
   18cde:	3b01      	subs	r3, #1
   18ce0:	45a8      	cmp	r8, r5
   18ce2:	d900      	bls.n	18ce6 <__aeabi_ddiv+0x252>
   18ce4:	e13a      	b.n	18f5c <__aeabi_ddiv+0x4c8>
   18ce6:	45a9      	cmp	r9, r5
   18ce8:	d800      	bhi.n	18cec <__aeabi_ddiv+0x258>
   18cea:	e137      	b.n	18f5c <__aeabi_ddiv+0x4c8>
   18cec:	2302      	movs	r3, #2
   18cee:	425b      	negs	r3, r3
   18cf0:	469c      	mov	ip, r3
   18cf2:	4445      	add	r5, r8
   18cf4:	44e3      	add	fp, ip
   18cf6:	464b      	mov	r3, r9
   18cf8:	1aeb      	subs	r3, r5, r3
   18cfa:	0039      	movs	r1, r7
   18cfc:	0018      	movs	r0, r3
   18cfe:	9304      	str	r3, [sp, #16]
   18d00:	f7fe ff24 	bl	17b4c <__udivsi3>
   18d04:	9b01      	ldr	r3, [sp, #4]
   18d06:	0005      	movs	r5, r0
   18d08:	4343      	muls	r3, r0
   18d0a:	0039      	movs	r1, r7
   18d0c:	9804      	ldr	r0, [sp, #16]
   18d0e:	4699      	mov	r9, r3
   18d10:	f7fe ffa2 	bl	17c58 <__aeabi_uidivmod>
   18d14:	0433      	lsls	r3, r6, #16
   18d16:	0409      	lsls	r1, r1, #16
   18d18:	0c1b      	lsrs	r3, r3, #16
   18d1a:	430b      	orrs	r3, r1
   18d1c:	4599      	cmp	r9, r3
   18d1e:	d909      	bls.n	18d34 <__aeabi_ddiv+0x2a0>
   18d20:	4443      	add	r3, r8
   18d22:	1e6a      	subs	r2, r5, #1
   18d24:	4598      	cmp	r8, r3
   18d26:	d900      	bls.n	18d2a <__aeabi_ddiv+0x296>
   18d28:	e11a      	b.n	18f60 <__aeabi_ddiv+0x4cc>
   18d2a:	4599      	cmp	r9, r3
   18d2c:	d800      	bhi.n	18d30 <__aeabi_ddiv+0x29c>
   18d2e:	e117      	b.n	18f60 <__aeabi_ddiv+0x4cc>
   18d30:	3d02      	subs	r5, #2
   18d32:	4443      	add	r3, r8
   18d34:	464a      	mov	r2, r9
   18d36:	1a9b      	subs	r3, r3, r2
   18d38:	465a      	mov	r2, fp
   18d3a:	0412      	lsls	r2, r2, #16
   18d3c:	432a      	orrs	r2, r5
   18d3e:	9903      	ldr	r1, [sp, #12]
   18d40:	4693      	mov	fp, r2
   18d42:	0c10      	lsrs	r0, r2, #16
   18d44:	0c0a      	lsrs	r2, r1, #16
   18d46:	4691      	mov	r9, r2
   18d48:	0409      	lsls	r1, r1, #16
   18d4a:	465a      	mov	r2, fp
   18d4c:	0c09      	lsrs	r1, r1, #16
   18d4e:	464e      	mov	r6, r9
   18d50:	000d      	movs	r5, r1
   18d52:	0412      	lsls	r2, r2, #16
   18d54:	0c12      	lsrs	r2, r2, #16
   18d56:	4345      	muls	r5, r0
   18d58:	9105      	str	r1, [sp, #20]
   18d5a:	4351      	muls	r1, r2
   18d5c:	4372      	muls	r2, r6
   18d5e:	4370      	muls	r0, r6
   18d60:	1952      	adds	r2, r2, r5
   18d62:	0c0e      	lsrs	r6, r1, #16
   18d64:	18b2      	adds	r2, r6, r2
   18d66:	4295      	cmp	r5, r2
   18d68:	d903      	bls.n	18d72 <__aeabi_ddiv+0x2de>
   18d6a:	2580      	movs	r5, #128	; 0x80
   18d6c:	026d      	lsls	r5, r5, #9
   18d6e:	46ac      	mov	ip, r5
   18d70:	4460      	add	r0, ip
   18d72:	0c15      	lsrs	r5, r2, #16
   18d74:	0409      	lsls	r1, r1, #16
   18d76:	0412      	lsls	r2, r2, #16
   18d78:	0c09      	lsrs	r1, r1, #16
   18d7a:	1828      	adds	r0, r5, r0
   18d7c:	1852      	adds	r2, r2, r1
   18d7e:	4283      	cmp	r3, r0
   18d80:	d200      	bcs.n	18d84 <__aeabi_ddiv+0x2f0>
   18d82:	e0ce      	b.n	18f22 <__aeabi_ddiv+0x48e>
   18d84:	d100      	bne.n	18d88 <__aeabi_ddiv+0x2f4>
   18d86:	e0c8      	b.n	18f1a <__aeabi_ddiv+0x486>
   18d88:	1a1d      	subs	r5, r3, r0
   18d8a:	4653      	mov	r3, sl
   18d8c:	1a9e      	subs	r6, r3, r2
   18d8e:	45b2      	cmp	sl, r6
   18d90:	4192      	sbcs	r2, r2
   18d92:	4252      	negs	r2, r2
   18d94:	1aab      	subs	r3, r5, r2
   18d96:	469a      	mov	sl, r3
   18d98:	4598      	cmp	r8, r3
   18d9a:	d100      	bne.n	18d9e <__aeabi_ddiv+0x30a>
   18d9c:	e117      	b.n	18fce <__aeabi_ddiv+0x53a>
   18d9e:	0039      	movs	r1, r7
   18da0:	0018      	movs	r0, r3
   18da2:	f7fe fed3 	bl	17b4c <__udivsi3>
   18da6:	9b01      	ldr	r3, [sp, #4]
   18da8:	0005      	movs	r5, r0
   18daa:	4343      	muls	r3, r0
   18dac:	0039      	movs	r1, r7
   18dae:	4650      	mov	r0, sl
   18db0:	9304      	str	r3, [sp, #16]
   18db2:	f7fe ff51 	bl	17c58 <__aeabi_uidivmod>
   18db6:	9804      	ldr	r0, [sp, #16]
   18db8:	040b      	lsls	r3, r1, #16
   18dba:	0c31      	lsrs	r1, r6, #16
   18dbc:	4319      	orrs	r1, r3
   18dbe:	4288      	cmp	r0, r1
   18dc0:	d909      	bls.n	18dd6 <__aeabi_ddiv+0x342>
   18dc2:	4441      	add	r1, r8
   18dc4:	1e6b      	subs	r3, r5, #1
   18dc6:	4588      	cmp	r8, r1
   18dc8:	d900      	bls.n	18dcc <__aeabi_ddiv+0x338>
   18dca:	e107      	b.n	18fdc <__aeabi_ddiv+0x548>
   18dcc:	4288      	cmp	r0, r1
   18dce:	d800      	bhi.n	18dd2 <__aeabi_ddiv+0x33e>
   18dd0:	e104      	b.n	18fdc <__aeabi_ddiv+0x548>
   18dd2:	3d02      	subs	r5, #2
   18dd4:	4441      	add	r1, r8
   18dd6:	9b04      	ldr	r3, [sp, #16]
   18dd8:	1acb      	subs	r3, r1, r3
   18dda:	0018      	movs	r0, r3
   18ddc:	0039      	movs	r1, r7
   18dde:	9304      	str	r3, [sp, #16]
   18de0:	f7fe feb4 	bl	17b4c <__udivsi3>
   18de4:	9b01      	ldr	r3, [sp, #4]
   18de6:	4682      	mov	sl, r0
   18de8:	4343      	muls	r3, r0
   18dea:	0039      	movs	r1, r7
   18dec:	9804      	ldr	r0, [sp, #16]
   18dee:	9301      	str	r3, [sp, #4]
   18df0:	f7fe ff32 	bl	17c58 <__aeabi_uidivmod>
   18df4:	9801      	ldr	r0, [sp, #4]
   18df6:	040b      	lsls	r3, r1, #16
   18df8:	0431      	lsls	r1, r6, #16
   18dfa:	0c09      	lsrs	r1, r1, #16
   18dfc:	4319      	orrs	r1, r3
   18dfe:	4288      	cmp	r0, r1
   18e00:	d90d      	bls.n	18e1e <__aeabi_ddiv+0x38a>
   18e02:	4653      	mov	r3, sl
   18e04:	4441      	add	r1, r8
   18e06:	3b01      	subs	r3, #1
   18e08:	4588      	cmp	r8, r1
   18e0a:	d900      	bls.n	18e0e <__aeabi_ddiv+0x37a>
   18e0c:	e0e8      	b.n	18fe0 <__aeabi_ddiv+0x54c>
   18e0e:	4288      	cmp	r0, r1
   18e10:	d800      	bhi.n	18e14 <__aeabi_ddiv+0x380>
   18e12:	e0e5      	b.n	18fe0 <__aeabi_ddiv+0x54c>
   18e14:	2302      	movs	r3, #2
   18e16:	425b      	negs	r3, r3
   18e18:	469c      	mov	ip, r3
   18e1a:	4441      	add	r1, r8
   18e1c:	44e2      	add	sl, ip
   18e1e:	9b01      	ldr	r3, [sp, #4]
   18e20:	042d      	lsls	r5, r5, #16
   18e22:	1ace      	subs	r6, r1, r3
   18e24:	4651      	mov	r1, sl
   18e26:	4329      	orrs	r1, r5
   18e28:	9d05      	ldr	r5, [sp, #20]
   18e2a:	464f      	mov	r7, r9
   18e2c:	002a      	movs	r2, r5
   18e2e:	040b      	lsls	r3, r1, #16
   18e30:	0c08      	lsrs	r0, r1, #16
   18e32:	0c1b      	lsrs	r3, r3, #16
   18e34:	435a      	muls	r2, r3
   18e36:	4345      	muls	r5, r0
   18e38:	437b      	muls	r3, r7
   18e3a:	4378      	muls	r0, r7
   18e3c:	195b      	adds	r3, r3, r5
   18e3e:	0c17      	lsrs	r7, r2, #16
   18e40:	18fb      	adds	r3, r7, r3
   18e42:	429d      	cmp	r5, r3
   18e44:	d903      	bls.n	18e4e <__aeabi_ddiv+0x3ba>
   18e46:	2580      	movs	r5, #128	; 0x80
   18e48:	026d      	lsls	r5, r5, #9
   18e4a:	46ac      	mov	ip, r5
   18e4c:	4460      	add	r0, ip
   18e4e:	0c1d      	lsrs	r5, r3, #16
   18e50:	0412      	lsls	r2, r2, #16
   18e52:	041b      	lsls	r3, r3, #16
   18e54:	0c12      	lsrs	r2, r2, #16
   18e56:	1828      	adds	r0, r5, r0
   18e58:	189b      	adds	r3, r3, r2
   18e5a:	4286      	cmp	r6, r0
   18e5c:	d200      	bcs.n	18e60 <__aeabi_ddiv+0x3cc>
   18e5e:	e093      	b.n	18f88 <__aeabi_ddiv+0x4f4>
   18e60:	d100      	bne.n	18e64 <__aeabi_ddiv+0x3d0>
   18e62:	e08e      	b.n	18f82 <__aeabi_ddiv+0x4ee>
   18e64:	2301      	movs	r3, #1
   18e66:	4319      	orrs	r1, r3
   18e68:	4ba0      	ldr	r3, [pc, #640]	; (190ec <__aeabi_ddiv+0x658>)
   18e6a:	18e3      	adds	r3, r4, r3
   18e6c:	2b00      	cmp	r3, #0
   18e6e:	dc00      	bgt.n	18e72 <__aeabi_ddiv+0x3de>
   18e70:	e099      	b.n	18fa6 <__aeabi_ddiv+0x512>
   18e72:	074a      	lsls	r2, r1, #29
   18e74:	d000      	beq.n	18e78 <__aeabi_ddiv+0x3e4>
   18e76:	e09e      	b.n	18fb6 <__aeabi_ddiv+0x522>
   18e78:	465a      	mov	r2, fp
   18e7a:	01d2      	lsls	r2, r2, #7
   18e7c:	d506      	bpl.n	18e8c <__aeabi_ddiv+0x3f8>
   18e7e:	465a      	mov	r2, fp
   18e80:	4b9b      	ldr	r3, [pc, #620]	; (190f0 <__aeabi_ddiv+0x65c>)
   18e82:	401a      	ands	r2, r3
   18e84:	2380      	movs	r3, #128	; 0x80
   18e86:	4693      	mov	fp, r2
   18e88:	00db      	lsls	r3, r3, #3
   18e8a:	18e3      	adds	r3, r4, r3
   18e8c:	4a99      	ldr	r2, [pc, #612]	; (190f4 <__aeabi_ddiv+0x660>)
   18e8e:	4293      	cmp	r3, r2
   18e90:	dd68      	ble.n	18f64 <__aeabi_ddiv+0x4d0>
   18e92:	2301      	movs	r3, #1
   18e94:	9a02      	ldr	r2, [sp, #8]
   18e96:	4c98      	ldr	r4, [pc, #608]	; (190f8 <__aeabi_ddiv+0x664>)
   18e98:	401a      	ands	r2, r3
   18e9a:	2300      	movs	r3, #0
   18e9c:	4694      	mov	ip, r2
   18e9e:	4698      	mov	r8, r3
   18ea0:	2200      	movs	r2, #0
   18ea2:	e6c5      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18ea4:	2280      	movs	r2, #128	; 0x80
   18ea6:	464b      	mov	r3, r9
   18ea8:	0312      	lsls	r2, r2, #12
   18eaa:	4213      	tst	r3, r2
   18eac:	d00a      	beq.n	18ec4 <__aeabi_ddiv+0x430>
   18eae:	465b      	mov	r3, fp
   18eb0:	4213      	tst	r3, r2
   18eb2:	d106      	bne.n	18ec2 <__aeabi_ddiv+0x42e>
   18eb4:	431a      	orrs	r2, r3
   18eb6:	0312      	lsls	r2, r2, #12
   18eb8:	0b12      	lsrs	r2, r2, #12
   18eba:	46ac      	mov	ip, r5
   18ebc:	4688      	mov	r8, r1
   18ebe:	4c8e      	ldr	r4, [pc, #568]	; (190f8 <__aeabi_ddiv+0x664>)
   18ec0:	e6b6      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18ec2:	464b      	mov	r3, r9
   18ec4:	431a      	orrs	r2, r3
   18ec6:	0312      	lsls	r2, r2, #12
   18ec8:	0b12      	lsrs	r2, r2, #12
   18eca:	46bc      	mov	ip, r7
   18ecc:	4c8a      	ldr	r4, [pc, #552]	; (190f8 <__aeabi_ddiv+0x664>)
   18ece:	e6af      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18ed0:	0003      	movs	r3, r0
   18ed2:	465a      	mov	r2, fp
   18ed4:	3b28      	subs	r3, #40	; 0x28
   18ed6:	409a      	lsls	r2, r3
   18ed8:	2300      	movs	r3, #0
   18eda:	4691      	mov	r9, r2
   18edc:	4698      	mov	r8, r3
   18ede:	e657      	b.n	18b90 <__aeabi_ddiv+0xfc>
   18ee0:	4658      	mov	r0, fp
   18ee2:	f001 f8a1 	bl	1a028 <__clzsi2>
   18ee6:	3020      	adds	r0, #32
   18ee8:	e640      	b.n	18b6c <__aeabi_ddiv+0xd8>
   18eea:	0003      	movs	r3, r0
   18eec:	4652      	mov	r2, sl
   18eee:	3b28      	subs	r3, #40	; 0x28
   18ef0:	409a      	lsls	r2, r3
   18ef2:	2100      	movs	r1, #0
   18ef4:	4693      	mov	fp, r2
   18ef6:	e677      	b.n	18be8 <__aeabi_ddiv+0x154>
   18ef8:	f001 f896 	bl	1a028 <__clzsi2>
   18efc:	3020      	adds	r0, #32
   18efe:	e65f      	b.n	18bc0 <__aeabi_ddiv+0x12c>
   18f00:	4588      	cmp	r8, r1
   18f02:	d200      	bcs.n	18f06 <__aeabi_ddiv+0x472>
   18f04:	e6c7      	b.n	18c96 <__aeabi_ddiv+0x202>
   18f06:	464b      	mov	r3, r9
   18f08:	07de      	lsls	r6, r3, #31
   18f0a:	085d      	lsrs	r5, r3, #1
   18f0c:	4643      	mov	r3, r8
   18f0e:	085b      	lsrs	r3, r3, #1
   18f10:	431e      	orrs	r6, r3
   18f12:	4643      	mov	r3, r8
   18f14:	07db      	lsls	r3, r3, #31
   18f16:	469a      	mov	sl, r3
   18f18:	e6c2      	b.n	18ca0 <__aeabi_ddiv+0x20c>
   18f1a:	2500      	movs	r5, #0
   18f1c:	4592      	cmp	sl, r2
   18f1e:	d300      	bcc.n	18f22 <__aeabi_ddiv+0x48e>
   18f20:	e733      	b.n	18d8a <__aeabi_ddiv+0x2f6>
   18f22:	9e03      	ldr	r6, [sp, #12]
   18f24:	4659      	mov	r1, fp
   18f26:	46b4      	mov	ip, r6
   18f28:	44e2      	add	sl, ip
   18f2a:	45b2      	cmp	sl, r6
   18f2c:	41ad      	sbcs	r5, r5
   18f2e:	426d      	negs	r5, r5
   18f30:	4445      	add	r5, r8
   18f32:	18eb      	adds	r3, r5, r3
   18f34:	3901      	subs	r1, #1
   18f36:	4598      	cmp	r8, r3
   18f38:	d207      	bcs.n	18f4a <__aeabi_ddiv+0x4b6>
   18f3a:	4298      	cmp	r0, r3
   18f3c:	d900      	bls.n	18f40 <__aeabi_ddiv+0x4ac>
   18f3e:	e07f      	b.n	19040 <__aeabi_ddiv+0x5ac>
   18f40:	d100      	bne.n	18f44 <__aeabi_ddiv+0x4b0>
   18f42:	e0bc      	b.n	190be <__aeabi_ddiv+0x62a>
   18f44:	1a1d      	subs	r5, r3, r0
   18f46:	468b      	mov	fp, r1
   18f48:	e71f      	b.n	18d8a <__aeabi_ddiv+0x2f6>
   18f4a:	4598      	cmp	r8, r3
   18f4c:	d1fa      	bne.n	18f44 <__aeabi_ddiv+0x4b0>
   18f4e:	9d03      	ldr	r5, [sp, #12]
   18f50:	4555      	cmp	r5, sl
   18f52:	d9f2      	bls.n	18f3a <__aeabi_ddiv+0x4a6>
   18f54:	4643      	mov	r3, r8
   18f56:	468b      	mov	fp, r1
   18f58:	1a1d      	subs	r5, r3, r0
   18f5a:	e716      	b.n	18d8a <__aeabi_ddiv+0x2f6>
   18f5c:	469b      	mov	fp, r3
   18f5e:	e6ca      	b.n	18cf6 <__aeabi_ddiv+0x262>
   18f60:	0015      	movs	r5, r2
   18f62:	e6e7      	b.n	18d34 <__aeabi_ddiv+0x2a0>
   18f64:	465a      	mov	r2, fp
   18f66:	08c9      	lsrs	r1, r1, #3
   18f68:	0752      	lsls	r2, r2, #29
   18f6a:	430a      	orrs	r2, r1
   18f6c:	055b      	lsls	r3, r3, #21
   18f6e:	4690      	mov	r8, r2
   18f70:	0d5c      	lsrs	r4, r3, #21
   18f72:	465a      	mov	r2, fp
   18f74:	2301      	movs	r3, #1
   18f76:	9902      	ldr	r1, [sp, #8]
   18f78:	0252      	lsls	r2, r2, #9
   18f7a:	4019      	ands	r1, r3
   18f7c:	0b12      	lsrs	r2, r2, #12
   18f7e:	468c      	mov	ip, r1
   18f80:	e656      	b.n	18c30 <__aeabi_ddiv+0x19c>
   18f82:	2b00      	cmp	r3, #0
   18f84:	d100      	bne.n	18f88 <__aeabi_ddiv+0x4f4>
   18f86:	e76f      	b.n	18e68 <__aeabi_ddiv+0x3d4>
   18f88:	4446      	add	r6, r8
   18f8a:	1e4a      	subs	r2, r1, #1
   18f8c:	45b0      	cmp	r8, r6
   18f8e:	d929      	bls.n	18fe4 <__aeabi_ddiv+0x550>
   18f90:	0011      	movs	r1, r2
   18f92:	4286      	cmp	r6, r0
   18f94:	d000      	beq.n	18f98 <__aeabi_ddiv+0x504>
   18f96:	e765      	b.n	18e64 <__aeabi_ddiv+0x3d0>
   18f98:	9a03      	ldr	r2, [sp, #12]
   18f9a:	4293      	cmp	r3, r2
   18f9c:	d000      	beq.n	18fa0 <__aeabi_ddiv+0x50c>
   18f9e:	e761      	b.n	18e64 <__aeabi_ddiv+0x3d0>
   18fa0:	e762      	b.n	18e68 <__aeabi_ddiv+0x3d4>
   18fa2:	2101      	movs	r1, #1
   18fa4:	4249      	negs	r1, r1
   18fa6:	2001      	movs	r0, #1
   18fa8:	1ac2      	subs	r2, r0, r3
   18faa:	2a38      	cmp	r2, #56	; 0x38
   18fac:	dd21      	ble.n	18ff2 <__aeabi_ddiv+0x55e>
   18fae:	9b02      	ldr	r3, [sp, #8]
   18fb0:	4003      	ands	r3, r0
   18fb2:	469c      	mov	ip, r3
   18fb4:	e638      	b.n	18c28 <__aeabi_ddiv+0x194>
   18fb6:	220f      	movs	r2, #15
   18fb8:	400a      	ands	r2, r1
   18fba:	2a04      	cmp	r2, #4
   18fbc:	d100      	bne.n	18fc0 <__aeabi_ddiv+0x52c>
   18fbe:	e75b      	b.n	18e78 <__aeabi_ddiv+0x3e4>
   18fc0:	000a      	movs	r2, r1
   18fc2:	1d11      	adds	r1, r2, #4
   18fc4:	4291      	cmp	r1, r2
   18fc6:	4192      	sbcs	r2, r2
   18fc8:	4252      	negs	r2, r2
   18fca:	4493      	add	fp, r2
   18fcc:	e754      	b.n	18e78 <__aeabi_ddiv+0x3e4>
   18fce:	4b47      	ldr	r3, [pc, #284]	; (190ec <__aeabi_ddiv+0x658>)
   18fd0:	18e3      	adds	r3, r4, r3
   18fd2:	2b00      	cmp	r3, #0
   18fd4:	dde5      	ble.n	18fa2 <__aeabi_ddiv+0x50e>
   18fd6:	2201      	movs	r2, #1
   18fd8:	4252      	negs	r2, r2
   18fda:	e7f2      	b.n	18fc2 <__aeabi_ddiv+0x52e>
   18fdc:	001d      	movs	r5, r3
   18fde:	e6fa      	b.n	18dd6 <__aeabi_ddiv+0x342>
   18fe0:	469a      	mov	sl, r3
   18fe2:	e71c      	b.n	18e1e <__aeabi_ddiv+0x38a>
   18fe4:	42b0      	cmp	r0, r6
   18fe6:	d839      	bhi.n	1905c <__aeabi_ddiv+0x5c8>
   18fe8:	d06e      	beq.n	190c8 <__aeabi_ddiv+0x634>
   18fea:	0011      	movs	r1, r2
   18fec:	e73a      	b.n	18e64 <__aeabi_ddiv+0x3d0>
   18fee:	9302      	str	r3, [sp, #8]
   18ff0:	e73a      	b.n	18e68 <__aeabi_ddiv+0x3d4>
   18ff2:	2a1f      	cmp	r2, #31
   18ff4:	dc3c      	bgt.n	19070 <__aeabi_ddiv+0x5dc>
   18ff6:	2320      	movs	r3, #32
   18ff8:	1a9b      	subs	r3, r3, r2
   18ffa:	000c      	movs	r4, r1
   18ffc:	4658      	mov	r0, fp
   18ffe:	4099      	lsls	r1, r3
   19000:	4098      	lsls	r0, r3
   19002:	1e4b      	subs	r3, r1, #1
   19004:	4199      	sbcs	r1, r3
   19006:	465b      	mov	r3, fp
   19008:	40d4      	lsrs	r4, r2
   1900a:	40d3      	lsrs	r3, r2
   1900c:	4320      	orrs	r0, r4
   1900e:	4308      	orrs	r0, r1
   19010:	001a      	movs	r2, r3
   19012:	0743      	lsls	r3, r0, #29
   19014:	d009      	beq.n	1902a <__aeabi_ddiv+0x596>
   19016:	230f      	movs	r3, #15
   19018:	4003      	ands	r3, r0
   1901a:	2b04      	cmp	r3, #4
   1901c:	d005      	beq.n	1902a <__aeabi_ddiv+0x596>
   1901e:	0001      	movs	r1, r0
   19020:	1d08      	adds	r0, r1, #4
   19022:	4288      	cmp	r0, r1
   19024:	419b      	sbcs	r3, r3
   19026:	425b      	negs	r3, r3
   19028:	18d2      	adds	r2, r2, r3
   1902a:	0213      	lsls	r3, r2, #8
   1902c:	d53a      	bpl.n	190a4 <__aeabi_ddiv+0x610>
   1902e:	2301      	movs	r3, #1
   19030:	9a02      	ldr	r2, [sp, #8]
   19032:	2401      	movs	r4, #1
   19034:	401a      	ands	r2, r3
   19036:	2300      	movs	r3, #0
   19038:	4694      	mov	ip, r2
   1903a:	4698      	mov	r8, r3
   1903c:	2200      	movs	r2, #0
   1903e:	e5f7      	b.n	18c30 <__aeabi_ddiv+0x19c>
   19040:	2102      	movs	r1, #2
   19042:	4249      	negs	r1, r1
   19044:	468c      	mov	ip, r1
   19046:	9d03      	ldr	r5, [sp, #12]
   19048:	44e3      	add	fp, ip
   1904a:	46ac      	mov	ip, r5
   1904c:	44e2      	add	sl, ip
   1904e:	45aa      	cmp	sl, r5
   19050:	41ad      	sbcs	r5, r5
   19052:	426d      	negs	r5, r5
   19054:	4445      	add	r5, r8
   19056:	18ed      	adds	r5, r5, r3
   19058:	1a2d      	subs	r5, r5, r0
   1905a:	e696      	b.n	18d8a <__aeabi_ddiv+0x2f6>
   1905c:	1e8a      	subs	r2, r1, #2
   1905e:	9903      	ldr	r1, [sp, #12]
   19060:	004d      	lsls	r5, r1, #1
   19062:	428d      	cmp	r5, r1
   19064:	4189      	sbcs	r1, r1
   19066:	4249      	negs	r1, r1
   19068:	4441      	add	r1, r8
   1906a:	1876      	adds	r6, r6, r1
   1906c:	9503      	str	r5, [sp, #12]
   1906e:	e78f      	b.n	18f90 <__aeabi_ddiv+0x4fc>
   19070:	201f      	movs	r0, #31
   19072:	4240      	negs	r0, r0
   19074:	1ac3      	subs	r3, r0, r3
   19076:	4658      	mov	r0, fp
   19078:	40d8      	lsrs	r0, r3
   1907a:	0003      	movs	r3, r0
   1907c:	2a20      	cmp	r2, #32
   1907e:	d028      	beq.n	190d2 <__aeabi_ddiv+0x63e>
   19080:	2040      	movs	r0, #64	; 0x40
   19082:	465d      	mov	r5, fp
   19084:	1a82      	subs	r2, r0, r2
   19086:	4095      	lsls	r5, r2
   19088:	4329      	orrs	r1, r5
   1908a:	1e4a      	subs	r2, r1, #1
   1908c:	4191      	sbcs	r1, r2
   1908e:	4319      	orrs	r1, r3
   19090:	2307      	movs	r3, #7
   19092:	2200      	movs	r2, #0
   19094:	400b      	ands	r3, r1
   19096:	d009      	beq.n	190ac <__aeabi_ddiv+0x618>
   19098:	230f      	movs	r3, #15
   1909a:	2200      	movs	r2, #0
   1909c:	400b      	ands	r3, r1
   1909e:	0008      	movs	r0, r1
   190a0:	2b04      	cmp	r3, #4
   190a2:	d1bd      	bne.n	19020 <__aeabi_ddiv+0x58c>
   190a4:	0001      	movs	r1, r0
   190a6:	0753      	lsls	r3, r2, #29
   190a8:	0252      	lsls	r2, r2, #9
   190aa:	0b12      	lsrs	r2, r2, #12
   190ac:	08c9      	lsrs	r1, r1, #3
   190ae:	4319      	orrs	r1, r3
   190b0:	2301      	movs	r3, #1
   190b2:	4688      	mov	r8, r1
   190b4:	9902      	ldr	r1, [sp, #8]
   190b6:	2400      	movs	r4, #0
   190b8:	4019      	ands	r1, r3
   190ba:	468c      	mov	ip, r1
   190bc:	e5b8      	b.n	18c30 <__aeabi_ddiv+0x19c>
   190be:	4552      	cmp	r2, sl
   190c0:	d8be      	bhi.n	19040 <__aeabi_ddiv+0x5ac>
   190c2:	468b      	mov	fp, r1
   190c4:	2500      	movs	r5, #0
   190c6:	e660      	b.n	18d8a <__aeabi_ddiv+0x2f6>
   190c8:	9d03      	ldr	r5, [sp, #12]
   190ca:	429d      	cmp	r5, r3
   190cc:	d3c6      	bcc.n	1905c <__aeabi_ddiv+0x5c8>
   190ce:	0011      	movs	r1, r2
   190d0:	e762      	b.n	18f98 <__aeabi_ddiv+0x504>
   190d2:	2500      	movs	r5, #0
   190d4:	e7d8      	b.n	19088 <__aeabi_ddiv+0x5f4>
   190d6:	2280      	movs	r2, #128	; 0x80
   190d8:	465b      	mov	r3, fp
   190da:	0312      	lsls	r2, r2, #12
   190dc:	431a      	orrs	r2, r3
   190de:	9b01      	ldr	r3, [sp, #4]
   190e0:	0312      	lsls	r2, r2, #12
   190e2:	0b12      	lsrs	r2, r2, #12
   190e4:	469c      	mov	ip, r3
   190e6:	4688      	mov	r8, r1
   190e8:	4c03      	ldr	r4, [pc, #12]	; (190f8 <__aeabi_ddiv+0x664>)
   190ea:	e5a1      	b.n	18c30 <__aeabi_ddiv+0x19c>
   190ec:	000003ff 	.word	0x000003ff
   190f0:	feffffff 	.word	0xfeffffff
   190f4:	000007fe 	.word	0x000007fe
   190f8:	000007ff 	.word	0x000007ff

000190fc <__eqdf2>:
   190fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   190fe:	464f      	mov	r7, r9
   19100:	4646      	mov	r6, r8
   19102:	46d6      	mov	lr, sl
   19104:	005c      	lsls	r4, r3, #1
   19106:	b5c0      	push	{r6, r7, lr}
   19108:	031f      	lsls	r7, r3, #12
   1910a:	0fdb      	lsrs	r3, r3, #31
   1910c:	469a      	mov	sl, r3
   1910e:	4b17      	ldr	r3, [pc, #92]	; (1916c <__eqdf2+0x70>)
   19110:	030e      	lsls	r6, r1, #12
   19112:	004d      	lsls	r5, r1, #1
   19114:	4684      	mov	ip, r0
   19116:	4680      	mov	r8, r0
   19118:	0b36      	lsrs	r6, r6, #12
   1911a:	0d6d      	lsrs	r5, r5, #21
   1911c:	0fc9      	lsrs	r1, r1, #31
   1911e:	4691      	mov	r9, r2
   19120:	0b3f      	lsrs	r7, r7, #12
   19122:	0d64      	lsrs	r4, r4, #21
   19124:	2001      	movs	r0, #1
   19126:	429d      	cmp	r5, r3
   19128:	d008      	beq.n	1913c <__eqdf2+0x40>
   1912a:	429c      	cmp	r4, r3
   1912c:	d001      	beq.n	19132 <__eqdf2+0x36>
   1912e:	42a5      	cmp	r5, r4
   19130:	d00b      	beq.n	1914a <__eqdf2+0x4e>
   19132:	bc1c      	pop	{r2, r3, r4}
   19134:	4690      	mov	r8, r2
   19136:	4699      	mov	r9, r3
   19138:	46a2      	mov	sl, r4
   1913a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1913c:	4663      	mov	r3, ip
   1913e:	4333      	orrs	r3, r6
   19140:	d1f7      	bne.n	19132 <__eqdf2+0x36>
   19142:	42ac      	cmp	r4, r5
   19144:	d1f5      	bne.n	19132 <__eqdf2+0x36>
   19146:	433a      	orrs	r2, r7
   19148:	d1f3      	bne.n	19132 <__eqdf2+0x36>
   1914a:	2001      	movs	r0, #1
   1914c:	42be      	cmp	r6, r7
   1914e:	d1f0      	bne.n	19132 <__eqdf2+0x36>
   19150:	45c8      	cmp	r8, r9
   19152:	d1ee      	bne.n	19132 <__eqdf2+0x36>
   19154:	4551      	cmp	r1, sl
   19156:	d007      	beq.n	19168 <__eqdf2+0x6c>
   19158:	2d00      	cmp	r5, #0
   1915a:	d1ea      	bne.n	19132 <__eqdf2+0x36>
   1915c:	4663      	mov	r3, ip
   1915e:	431e      	orrs	r6, r3
   19160:	0030      	movs	r0, r6
   19162:	1e46      	subs	r6, r0, #1
   19164:	41b0      	sbcs	r0, r6
   19166:	e7e4      	b.n	19132 <__eqdf2+0x36>
   19168:	2000      	movs	r0, #0
   1916a:	e7e2      	b.n	19132 <__eqdf2+0x36>
   1916c:	000007ff 	.word	0x000007ff

00019170 <__gedf2>:
   19170:	b5f0      	push	{r4, r5, r6, r7, lr}
   19172:	4645      	mov	r5, r8
   19174:	46de      	mov	lr, fp
   19176:	4657      	mov	r7, sl
   19178:	464e      	mov	r6, r9
   1917a:	b5e0      	push	{r5, r6, r7, lr}
   1917c:	031f      	lsls	r7, r3, #12
   1917e:	0b3d      	lsrs	r5, r7, #12
   19180:	4f2c      	ldr	r7, [pc, #176]	; (19234 <__gedf2+0xc4>)
   19182:	030e      	lsls	r6, r1, #12
   19184:	004c      	lsls	r4, r1, #1
   19186:	46ab      	mov	fp, r5
   19188:	005d      	lsls	r5, r3, #1
   1918a:	4684      	mov	ip, r0
   1918c:	0b36      	lsrs	r6, r6, #12
   1918e:	0d64      	lsrs	r4, r4, #21
   19190:	0fc9      	lsrs	r1, r1, #31
   19192:	4690      	mov	r8, r2
   19194:	0d6d      	lsrs	r5, r5, #21
   19196:	0fdb      	lsrs	r3, r3, #31
   19198:	42bc      	cmp	r4, r7
   1919a:	d02a      	beq.n	191f2 <__gedf2+0x82>
   1919c:	4f25      	ldr	r7, [pc, #148]	; (19234 <__gedf2+0xc4>)
   1919e:	42bd      	cmp	r5, r7
   191a0:	d02d      	beq.n	191fe <__gedf2+0x8e>
   191a2:	2c00      	cmp	r4, #0
   191a4:	d10f      	bne.n	191c6 <__gedf2+0x56>
   191a6:	4330      	orrs	r0, r6
   191a8:	0007      	movs	r7, r0
   191aa:	4681      	mov	r9, r0
   191ac:	4278      	negs	r0, r7
   191ae:	4178      	adcs	r0, r7
   191b0:	b2c0      	uxtb	r0, r0
   191b2:	2d00      	cmp	r5, #0
   191b4:	d117      	bne.n	191e6 <__gedf2+0x76>
   191b6:	465f      	mov	r7, fp
   191b8:	433a      	orrs	r2, r7
   191ba:	d114      	bne.n	191e6 <__gedf2+0x76>
   191bc:	464b      	mov	r3, r9
   191be:	2000      	movs	r0, #0
   191c0:	2b00      	cmp	r3, #0
   191c2:	d00a      	beq.n	191da <__gedf2+0x6a>
   191c4:	e006      	b.n	191d4 <__gedf2+0x64>
   191c6:	2d00      	cmp	r5, #0
   191c8:	d102      	bne.n	191d0 <__gedf2+0x60>
   191ca:	4658      	mov	r0, fp
   191cc:	4302      	orrs	r2, r0
   191ce:	d001      	beq.n	191d4 <__gedf2+0x64>
   191d0:	4299      	cmp	r1, r3
   191d2:	d018      	beq.n	19206 <__gedf2+0x96>
   191d4:	4248      	negs	r0, r1
   191d6:	2101      	movs	r1, #1
   191d8:	4308      	orrs	r0, r1
   191da:	bc3c      	pop	{r2, r3, r4, r5}
   191dc:	4690      	mov	r8, r2
   191de:	4699      	mov	r9, r3
   191e0:	46a2      	mov	sl, r4
   191e2:	46ab      	mov	fp, r5
   191e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191e6:	2800      	cmp	r0, #0
   191e8:	d0f2      	beq.n	191d0 <__gedf2+0x60>
   191ea:	2001      	movs	r0, #1
   191ec:	3b01      	subs	r3, #1
   191ee:	4318      	orrs	r0, r3
   191f0:	e7f3      	b.n	191da <__gedf2+0x6a>
   191f2:	0037      	movs	r7, r6
   191f4:	4307      	orrs	r7, r0
   191f6:	d0d1      	beq.n	1919c <__gedf2+0x2c>
   191f8:	2002      	movs	r0, #2
   191fa:	4240      	negs	r0, r0
   191fc:	e7ed      	b.n	191da <__gedf2+0x6a>
   191fe:	465f      	mov	r7, fp
   19200:	4317      	orrs	r7, r2
   19202:	d0ce      	beq.n	191a2 <__gedf2+0x32>
   19204:	e7f8      	b.n	191f8 <__gedf2+0x88>
   19206:	42ac      	cmp	r4, r5
   19208:	dce4      	bgt.n	191d4 <__gedf2+0x64>
   1920a:	da03      	bge.n	19214 <__gedf2+0xa4>
   1920c:	1e48      	subs	r0, r1, #1
   1920e:	2101      	movs	r1, #1
   19210:	4308      	orrs	r0, r1
   19212:	e7e2      	b.n	191da <__gedf2+0x6a>
   19214:	455e      	cmp	r6, fp
   19216:	d8dd      	bhi.n	191d4 <__gedf2+0x64>
   19218:	d006      	beq.n	19228 <__gedf2+0xb8>
   1921a:	2000      	movs	r0, #0
   1921c:	455e      	cmp	r6, fp
   1921e:	d2dc      	bcs.n	191da <__gedf2+0x6a>
   19220:	2301      	movs	r3, #1
   19222:	1e48      	subs	r0, r1, #1
   19224:	4318      	orrs	r0, r3
   19226:	e7d8      	b.n	191da <__gedf2+0x6a>
   19228:	45c4      	cmp	ip, r8
   1922a:	d8d3      	bhi.n	191d4 <__gedf2+0x64>
   1922c:	2000      	movs	r0, #0
   1922e:	45c4      	cmp	ip, r8
   19230:	d3f6      	bcc.n	19220 <__gedf2+0xb0>
   19232:	e7d2      	b.n	191da <__gedf2+0x6a>
   19234:	000007ff 	.word	0x000007ff

00019238 <__ledf2>:
   19238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1923a:	464e      	mov	r6, r9
   1923c:	4645      	mov	r5, r8
   1923e:	46de      	mov	lr, fp
   19240:	4657      	mov	r7, sl
   19242:	005c      	lsls	r4, r3, #1
   19244:	b5e0      	push	{r5, r6, r7, lr}
   19246:	031f      	lsls	r7, r3, #12
   19248:	0fdb      	lsrs	r3, r3, #31
   1924a:	4699      	mov	r9, r3
   1924c:	4b2a      	ldr	r3, [pc, #168]	; (192f8 <__ledf2+0xc0>)
   1924e:	030e      	lsls	r6, r1, #12
   19250:	004d      	lsls	r5, r1, #1
   19252:	0fc9      	lsrs	r1, r1, #31
   19254:	4684      	mov	ip, r0
   19256:	0b36      	lsrs	r6, r6, #12
   19258:	0d6d      	lsrs	r5, r5, #21
   1925a:	468b      	mov	fp, r1
   1925c:	4690      	mov	r8, r2
   1925e:	0b3f      	lsrs	r7, r7, #12
   19260:	0d64      	lsrs	r4, r4, #21
   19262:	429d      	cmp	r5, r3
   19264:	d020      	beq.n	192a8 <__ledf2+0x70>
   19266:	4b24      	ldr	r3, [pc, #144]	; (192f8 <__ledf2+0xc0>)
   19268:	429c      	cmp	r4, r3
   1926a:	d022      	beq.n	192b2 <__ledf2+0x7a>
   1926c:	2d00      	cmp	r5, #0
   1926e:	d112      	bne.n	19296 <__ledf2+0x5e>
   19270:	4330      	orrs	r0, r6
   19272:	4243      	negs	r3, r0
   19274:	4143      	adcs	r3, r0
   19276:	b2db      	uxtb	r3, r3
   19278:	2c00      	cmp	r4, #0
   1927a:	d01f      	beq.n	192bc <__ledf2+0x84>
   1927c:	2b00      	cmp	r3, #0
   1927e:	d00c      	beq.n	1929a <__ledf2+0x62>
   19280:	464b      	mov	r3, r9
   19282:	2001      	movs	r0, #1
   19284:	3b01      	subs	r3, #1
   19286:	4303      	orrs	r3, r0
   19288:	0018      	movs	r0, r3
   1928a:	bc3c      	pop	{r2, r3, r4, r5}
   1928c:	4690      	mov	r8, r2
   1928e:	4699      	mov	r9, r3
   19290:	46a2      	mov	sl, r4
   19292:	46ab      	mov	fp, r5
   19294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19296:	2c00      	cmp	r4, #0
   19298:	d016      	beq.n	192c8 <__ledf2+0x90>
   1929a:	45cb      	cmp	fp, r9
   1929c:	d017      	beq.n	192ce <__ledf2+0x96>
   1929e:	465b      	mov	r3, fp
   192a0:	4259      	negs	r1, r3
   192a2:	2301      	movs	r3, #1
   192a4:	430b      	orrs	r3, r1
   192a6:	e7ef      	b.n	19288 <__ledf2+0x50>
   192a8:	0031      	movs	r1, r6
   192aa:	2302      	movs	r3, #2
   192ac:	4301      	orrs	r1, r0
   192ae:	d1eb      	bne.n	19288 <__ledf2+0x50>
   192b0:	e7d9      	b.n	19266 <__ledf2+0x2e>
   192b2:	0039      	movs	r1, r7
   192b4:	2302      	movs	r3, #2
   192b6:	4311      	orrs	r1, r2
   192b8:	d1e6      	bne.n	19288 <__ledf2+0x50>
   192ba:	e7d7      	b.n	1926c <__ledf2+0x34>
   192bc:	433a      	orrs	r2, r7
   192be:	d1dd      	bne.n	1927c <__ledf2+0x44>
   192c0:	2300      	movs	r3, #0
   192c2:	2800      	cmp	r0, #0
   192c4:	d0e0      	beq.n	19288 <__ledf2+0x50>
   192c6:	e7ea      	b.n	1929e <__ledf2+0x66>
   192c8:	433a      	orrs	r2, r7
   192ca:	d1e6      	bne.n	1929a <__ledf2+0x62>
   192cc:	e7e7      	b.n	1929e <__ledf2+0x66>
   192ce:	42a5      	cmp	r5, r4
   192d0:	dce5      	bgt.n	1929e <__ledf2+0x66>
   192d2:	db05      	blt.n	192e0 <__ledf2+0xa8>
   192d4:	42be      	cmp	r6, r7
   192d6:	d8e2      	bhi.n	1929e <__ledf2+0x66>
   192d8:	d007      	beq.n	192ea <__ledf2+0xb2>
   192da:	2300      	movs	r3, #0
   192dc:	42be      	cmp	r6, r7
   192de:	d2d3      	bcs.n	19288 <__ledf2+0x50>
   192e0:	4659      	mov	r1, fp
   192e2:	2301      	movs	r3, #1
   192e4:	3901      	subs	r1, #1
   192e6:	430b      	orrs	r3, r1
   192e8:	e7ce      	b.n	19288 <__ledf2+0x50>
   192ea:	45c4      	cmp	ip, r8
   192ec:	d8d7      	bhi.n	1929e <__ledf2+0x66>
   192ee:	2300      	movs	r3, #0
   192f0:	45c4      	cmp	ip, r8
   192f2:	d3f5      	bcc.n	192e0 <__ledf2+0xa8>
   192f4:	e7c8      	b.n	19288 <__ledf2+0x50>
   192f6:	46c0      	nop			; (mov r8, r8)
   192f8:	000007ff 	.word	0x000007ff

000192fc <__aeabi_dmul>:
   192fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   192fe:	4657      	mov	r7, sl
   19300:	4645      	mov	r5, r8
   19302:	46de      	mov	lr, fp
   19304:	464e      	mov	r6, r9
   19306:	b5e0      	push	{r5, r6, r7, lr}
   19308:	030c      	lsls	r4, r1, #12
   1930a:	4698      	mov	r8, r3
   1930c:	004e      	lsls	r6, r1, #1
   1930e:	0b23      	lsrs	r3, r4, #12
   19310:	b087      	sub	sp, #28
   19312:	0007      	movs	r7, r0
   19314:	4692      	mov	sl, r2
   19316:	469b      	mov	fp, r3
   19318:	0d76      	lsrs	r6, r6, #21
   1931a:	0fcd      	lsrs	r5, r1, #31
   1931c:	2e00      	cmp	r6, #0
   1931e:	d06b      	beq.n	193f8 <__aeabi_dmul+0xfc>
   19320:	4b6d      	ldr	r3, [pc, #436]	; (194d8 <__aeabi_dmul+0x1dc>)
   19322:	429e      	cmp	r6, r3
   19324:	d035      	beq.n	19392 <__aeabi_dmul+0x96>
   19326:	2480      	movs	r4, #128	; 0x80
   19328:	465b      	mov	r3, fp
   1932a:	0f42      	lsrs	r2, r0, #29
   1932c:	0424      	lsls	r4, r4, #16
   1932e:	00db      	lsls	r3, r3, #3
   19330:	4314      	orrs	r4, r2
   19332:	431c      	orrs	r4, r3
   19334:	00c3      	lsls	r3, r0, #3
   19336:	4699      	mov	r9, r3
   19338:	4b68      	ldr	r3, [pc, #416]	; (194dc <__aeabi_dmul+0x1e0>)
   1933a:	46a3      	mov	fp, r4
   1933c:	469c      	mov	ip, r3
   1933e:	2300      	movs	r3, #0
   19340:	2700      	movs	r7, #0
   19342:	4466      	add	r6, ip
   19344:	9302      	str	r3, [sp, #8]
   19346:	4643      	mov	r3, r8
   19348:	031c      	lsls	r4, r3, #12
   1934a:	005a      	lsls	r2, r3, #1
   1934c:	0fdb      	lsrs	r3, r3, #31
   1934e:	4650      	mov	r0, sl
   19350:	0b24      	lsrs	r4, r4, #12
   19352:	0d52      	lsrs	r2, r2, #21
   19354:	4698      	mov	r8, r3
   19356:	d100      	bne.n	1935a <__aeabi_dmul+0x5e>
   19358:	e076      	b.n	19448 <__aeabi_dmul+0x14c>
   1935a:	4b5f      	ldr	r3, [pc, #380]	; (194d8 <__aeabi_dmul+0x1dc>)
   1935c:	429a      	cmp	r2, r3
   1935e:	d06d      	beq.n	1943c <__aeabi_dmul+0x140>
   19360:	2380      	movs	r3, #128	; 0x80
   19362:	0f41      	lsrs	r1, r0, #29
   19364:	041b      	lsls	r3, r3, #16
   19366:	430b      	orrs	r3, r1
   19368:	495c      	ldr	r1, [pc, #368]	; (194dc <__aeabi_dmul+0x1e0>)
   1936a:	00e4      	lsls	r4, r4, #3
   1936c:	468c      	mov	ip, r1
   1936e:	431c      	orrs	r4, r3
   19370:	00c3      	lsls	r3, r0, #3
   19372:	2000      	movs	r0, #0
   19374:	4462      	add	r2, ip
   19376:	4641      	mov	r1, r8
   19378:	18b6      	adds	r6, r6, r2
   1937a:	4069      	eors	r1, r5
   1937c:	1c72      	adds	r2, r6, #1
   1937e:	9101      	str	r1, [sp, #4]
   19380:	4694      	mov	ip, r2
   19382:	4307      	orrs	r7, r0
   19384:	2f0f      	cmp	r7, #15
   19386:	d900      	bls.n	1938a <__aeabi_dmul+0x8e>
   19388:	e0b0      	b.n	194ec <__aeabi_dmul+0x1f0>
   1938a:	4a55      	ldr	r2, [pc, #340]	; (194e0 <__aeabi_dmul+0x1e4>)
   1938c:	00bf      	lsls	r7, r7, #2
   1938e:	59d2      	ldr	r2, [r2, r7]
   19390:	4697      	mov	pc, r2
   19392:	465b      	mov	r3, fp
   19394:	4303      	orrs	r3, r0
   19396:	4699      	mov	r9, r3
   19398:	d000      	beq.n	1939c <__aeabi_dmul+0xa0>
   1939a:	e087      	b.n	194ac <__aeabi_dmul+0x1b0>
   1939c:	2300      	movs	r3, #0
   1939e:	469b      	mov	fp, r3
   193a0:	3302      	adds	r3, #2
   193a2:	2708      	movs	r7, #8
   193a4:	9302      	str	r3, [sp, #8]
   193a6:	e7ce      	b.n	19346 <__aeabi_dmul+0x4a>
   193a8:	4642      	mov	r2, r8
   193aa:	9201      	str	r2, [sp, #4]
   193ac:	2802      	cmp	r0, #2
   193ae:	d067      	beq.n	19480 <__aeabi_dmul+0x184>
   193b0:	2803      	cmp	r0, #3
   193b2:	d100      	bne.n	193b6 <__aeabi_dmul+0xba>
   193b4:	e20e      	b.n	197d4 <__aeabi_dmul+0x4d8>
   193b6:	2801      	cmp	r0, #1
   193b8:	d000      	beq.n	193bc <__aeabi_dmul+0xc0>
   193ba:	e162      	b.n	19682 <__aeabi_dmul+0x386>
   193bc:	2300      	movs	r3, #0
   193be:	2400      	movs	r4, #0
   193c0:	2200      	movs	r2, #0
   193c2:	4699      	mov	r9, r3
   193c4:	9901      	ldr	r1, [sp, #4]
   193c6:	4001      	ands	r1, r0
   193c8:	b2cd      	uxtb	r5, r1
   193ca:	2100      	movs	r1, #0
   193cc:	0312      	lsls	r2, r2, #12
   193ce:	0d0b      	lsrs	r3, r1, #20
   193d0:	0b12      	lsrs	r2, r2, #12
   193d2:	051b      	lsls	r3, r3, #20
   193d4:	4313      	orrs	r3, r2
   193d6:	4a43      	ldr	r2, [pc, #268]	; (194e4 <__aeabi_dmul+0x1e8>)
   193d8:	0524      	lsls	r4, r4, #20
   193da:	4013      	ands	r3, r2
   193dc:	431c      	orrs	r4, r3
   193de:	0064      	lsls	r4, r4, #1
   193e0:	07ed      	lsls	r5, r5, #31
   193e2:	0864      	lsrs	r4, r4, #1
   193e4:	432c      	orrs	r4, r5
   193e6:	4648      	mov	r0, r9
   193e8:	0021      	movs	r1, r4
   193ea:	b007      	add	sp, #28
   193ec:	bc3c      	pop	{r2, r3, r4, r5}
   193ee:	4690      	mov	r8, r2
   193f0:	4699      	mov	r9, r3
   193f2:	46a2      	mov	sl, r4
   193f4:	46ab      	mov	fp, r5
   193f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193f8:	4303      	orrs	r3, r0
   193fa:	4699      	mov	r9, r3
   193fc:	d04f      	beq.n	1949e <__aeabi_dmul+0x1a2>
   193fe:	465b      	mov	r3, fp
   19400:	2b00      	cmp	r3, #0
   19402:	d100      	bne.n	19406 <__aeabi_dmul+0x10a>
   19404:	e189      	b.n	1971a <__aeabi_dmul+0x41e>
   19406:	4658      	mov	r0, fp
   19408:	f000 fe0e 	bl	1a028 <__clzsi2>
   1940c:	0003      	movs	r3, r0
   1940e:	3b0b      	subs	r3, #11
   19410:	2b1c      	cmp	r3, #28
   19412:	dd00      	ble.n	19416 <__aeabi_dmul+0x11a>
   19414:	e17a      	b.n	1970c <__aeabi_dmul+0x410>
   19416:	221d      	movs	r2, #29
   19418:	1ad3      	subs	r3, r2, r3
   1941a:	003a      	movs	r2, r7
   1941c:	0001      	movs	r1, r0
   1941e:	465c      	mov	r4, fp
   19420:	40da      	lsrs	r2, r3
   19422:	3908      	subs	r1, #8
   19424:	408c      	lsls	r4, r1
   19426:	0013      	movs	r3, r2
   19428:	408f      	lsls	r7, r1
   1942a:	4323      	orrs	r3, r4
   1942c:	469b      	mov	fp, r3
   1942e:	46b9      	mov	r9, r7
   19430:	2300      	movs	r3, #0
   19432:	4e2d      	ldr	r6, [pc, #180]	; (194e8 <__aeabi_dmul+0x1ec>)
   19434:	2700      	movs	r7, #0
   19436:	1a36      	subs	r6, r6, r0
   19438:	9302      	str	r3, [sp, #8]
   1943a:	e784      	b.n	19346 <__aeabi_dmul+0x4a>
   1943c:	4653      	mov	r3, sl
   1943e:	4323      	orrs	r3, r4
   19440:	d12a      	bne.n	19498 <__aeabi_dmul+0x19c>
   19442:	2400      	movs	r4, #0
   19444:	2002      	movs	r0, #2
   19446:	e796      	b.n	19376 <__aeabi_dmul+0x7a>
   19448:	4653      	mov	r3, sl
   1944a:	4323      	orrs	r3, r4
   1944c:	d020      	beq.n	19490 <__aeabi_dmul+0x194>
   1944e:	2c00      	cmp	r4, #0
   19450:	d100      	bne.n	19454 <__aeabi_dmul+0x158>
   19452:	e157      	b.n	19704 <__aeabi_dmul+0x408>
   19454:	0020      	movs	r0, r4
   19456:	f000 fde7 	bl	1a028 <__clzsi2>
   1945a:	0003      	movs	r3, r0
   1945c:	3b0b      	subs	r3, #11
   1945e:	2b1c      	cmp	r3, #28
   19460:	dd00      	ble.n	19464 <__aeabi_dmul+0x168>
   19462:	e149      	b.n	196f8 <__aeabi_dmul+0x3fc>
   19464:	211d      	movs	r1, #29
   19466:	1acb      	subs	r3, r1, r3
   19468:	4651      	mov	r1, sl
   1946a:	0002      	movs	r2, r0
   1946c:	40d9      	lsrs	r1, r3
   1946e:	4653      	mov	r3, sl
   19470:	3a08      	subs	r2, #8
   19472:	4094      	lsls	r4, r2
   19474:	4093      	lsls	r3, r2
   19476:	430c      	orrs	r4, r1
   19478:	4a1b      	ldr	r2, [pc, #108]	; (194e8 <__aeabi_dmul+0x1ec>)
   1947a:	1a12      	subs	r2, r2, r0
   1947c:	2000      	movs	r0, #0
   1947e:	e77a      	b.n	19376 <__aeabi_dmul+0x7a>
   19480:	2501      	movs	r5, #1
   19482:	9b01      	ldr	r3, [sp, #4]
   19484:	4c14      	ldr	r4, [pc, #80]	; (194d8 <__aeabi_dmul+0x1dc>)
   19486:	401d      	ands	r5, r3
   19488:	2300      	movs	r3, #0
   1948a:	2200      	movs	r2, #0
   1948c:	4699      	mov	r9, r3
   1948e:	e79c      	b.n	193ca <__aeabi_dmul+0xce>
   19490:	2400      	movs	r4, #0
   19492:	2200      	movs	r2, #0
   19494:	2001      	movs	r0, #1
   19496:	e76e      	b.n	19376 <__aeabi_dmul+0x7a>
   19498:	4653      	mov	r3, sl
   1949a:	2003      	movs	r0, #3
   1949c:	e76b      	b.n	19376 <__aeabi_dmul+0x7a>
   1949e:	2300      	movs	r3, #0
   194a0:	469b      	mov	fp, r3
   194a2:	3301      	adds	r3, #1
   194a4:	2704      	movs	r7, #4
   194a6:	2600      	movs	r6, #0
   194a8:	9302      	str	r3, [sp, #8]
   194aa:	e74c      	b.n	19346 <__aeabi_dmul+0x4a>
   194ac:	2303      	movs	r3, #3
   194ae:	4681      	mov	r9, r0
   194b0:	270c      	movs	r7, #12
   194b2:	9302      	str	r3, [sp, #8]
   194b4:	e747      	b.n	19346 <__aeabi_dmul+0x4a>
   194b6:	2280      	movs	r2, #128	; 0x80
   194b8:	2300      	movs	r3, #0
   194ba:	2500      	movs	r5, #0
   194bc:	0312      	lsls	r2, r2, #12
   194be:	4699      	mov	r9, r3
   194c0:	4c05      	ldr	r4, [pc, #20]	; (194d8 <__aeabi_dmul+0x1dc>)
   194c2:	e782      	b.n	193ca <__aeabi_dmul+0xce>
   194c4:	465c      	mov	r4, fp
   194c6:	464b      	mov	r3, r9
   194c8:	9802      	ldr	r0, [sp, #8]
   194ca:	e76f      	b.n	193ac <__aeabi_dmul+0xb0>
   194cc:	465c      	mov	r4, fp
   194ce:	464b      	mov	r3, r9
   194d0:	9501      	str	r5, [sp, #4]
   194d2:	9802      	ldr	r0, [sp, #8]
   194d4:	e76a      	b.n	193ac <__aeabi_dmul+0xb0>
   194d6:	46c0      	nop			; (mov r8, r8)
   194d8:	000007ff 	.word	0x000007ff
   194dc:	fffffc01 	.word	0xfffffc01
   194e0:	00020188 	.word	0x00020188
   194e4:	800fffff 	.word	0x800fffff
   194e8:	fffffc0d 	.word	0xfffffc0d
   194ec:	464a      	mov	r2, r9
   194ee:	4649      	mov	r1, r9
   194f0:	0c17      	lsrs	r7, r2, #16
   194f2:	0c1a      	lsrs	r2, r3, #16
   194f4:	041b      	lsls	r3, r3, #16
   194f6:	0c1b      	lsrs	r3, r3, #16
   194f8:	0408      	lsls	r0, r1, #16
   194fa:	0019      	movs	r1, r3
   194fc:	0c00      	lsrs	r0, r0, #16
   194fe:	4341      	muls	r1, r0
   19500:	0015      	movs	r5, r2
   19502:	4688      	mov	r8, r1
   19504:	0019      	movs	r1, r3
   19506:	437d      	muls	r5, r7
   19508:	4379      	muls	r1, r7
   1950a:	9503      	str	r5, [sp, #12]
   1950c:	4689      	mov	r9, r1
   1950e:	0029      	movs	r1, r5
   19510:	0015      	movs	r5, r2
   19512:	4345      	muls	r5, r0
   19514:	444d      	add	r5, r9
   19516:	9502      	str	r5, [sp, #8]
   19518:	4645      	mov	r5, r8
   1951a:	0c2d      	lsrs	r5, r5, #16
   1951c:	46aa      	mov	sl, r5
   1951e:	9d02      	ldr	r5, [sp, #8]
   19520:	4455      	add	r5, sl
   19522:	45a9      	cmp	r9, r5
   19524:	d906      	bls.n	19534 <__aeabi_dmul+0x238>
   19526:	468a      	mov	sl, r1
   19528:	2180      	movs	r1, #128	; 0x80
   1952a:	0249      	lsls	r1, r1, #9
   1952c:	4689      	mov	r9, r1
   1952e:	44ca      	add	sl, r9
   19530:	4651      	mov	r1, sl
   19532:	9103      	str	r1, [sp, #12]
   19534:	0c29      	lsrs	r1, r5, #16
   19536:	9104      	str	r1, [sp, #16]
   19538:	4641      	mov	r1, r8
   1953a:	0409      	lsls	r1, r1, #16
   1953c:	042d      	lsls	r5, r5, #16
   1953e:	0c09      	lsrs	r1, r1, #16
   19540:	4688      	mov	r8, r1
   19542:	0029      	movs	r1, r5
   19544:	0c25      	lsrs	r5, r4, #16
   19546:	0424      	lsls	r4, r4, #16
   19548:	4441      	add	r1, r8
   1954a:	0c24      	lsrs	r4, r4, #16
   1954c:	9105      	str	r1, [sp, #20]
   1954e:	0021      	movs	r1, r4
   19550:	4341      	muls	r1, r0
   19552:	4688      	mov	r8, r1
   19554:	0021      	movs	r1, r4
   19556:	4379      	muls	r1, r7
   19558:	468a      	mov	sl, r1
   1955a:	4368      	muls	r0, r5
   1955c:	4641      	mov	r1, r8
   1955e:	4450      	add	r0, sl
   19560:	4681      	mov	r9, r0
   19562:	0c08      	lsrs	r0, r1, #16
   19564:	4448      	add	r0, r9
   19566:	436f      	muls	r7, r5
   19568:	4582      	cmp	sl, r0
   1956a:	d903      	bls.n	19574 <__aeabi_dmul+0x278>
   1956c:	2180      	movs	r1, #128	; 0x80
   1956e:	0249      	lsls	r1, r1, #9
   19570:	4689      	mov	r9, r1
   19572:	444f      	add	r7, r9
   19574:	0c01      	lsrs	r1, r0, #16
   19576:	4689      	mov	r9, r1
   19578:	0039      	movs	r1, r7
   1957a:	4449      	add	r1, r9
   1957c:	9102      	str	r1, [sp, #8]
   1957e:	4641      	mov	r1, r8
   19580:	040f      	lsls	r7, r1, #16
   19582:	9904      	ldr	r1, [sp, #16]
   19584:	0c3f      	lsrs	r7, r7, #16
   19586:	4688      	mov	r8, r1
   19588:	0400      	lsls	r0, r0, #16
   1958a:	19c0      	adds	r0, r0, r7
   1958c:	4480      	add	r8, r0
   1958e:	4641      	mov	r1, r8
   19590:	9104      	str	r1, [sp, #16]
   19592:	4659      	mov	r1, fp
   19594:	0c0f      	lsrs	r7, r1, #16
   19596:	0409      	lsls	r1, r1, #16
   19598:	0c09      	lsrs	r1, r1, #16
   1959a:	4688      	mov	r8, r1
   1959c:	4359      	muls	r1, r3
   1959e:	468a      	mov	sl, r1
   195a0:	0039      	movs	r1, r7
   195a2:	4351      	muls	r1, r2
   195a4:	4689      	mov	r9, r1
   195a6:	4641      	mov	r1, r8
   195a8:	434a      	muls	r2, r1
   195aa:	4651      	mov	r1, sl
   195ac:	0c09      	lsrs	r1, r1, #16
   195ae:	468b      	mov	fp, r1
   195b0:	437b      	muls	r3, r7
   195b2:	18d2      	adds	r2, r2, r3
   195b4:	445a      	add	r2, fp
   195b6:	4293      	cmp	r3, r2
   195b8:	d903      	bls.n	195c2 <__aeabi_dmul+0x2c6>
   195ba:	2380      	movs	r3, #128	; 0x80
   195bc:	025b      	lsls	r3, r3, #9
   195be:	469b      	mov	fp, r3
   195c0:	44d9      	add	r9, fp
   195c2:	4651      	mov	r1, sl
   195c4:	0409      	lsls	r1, r1, #16
   195c6:	0c09      	lsrs	r1, r1, #16
   195c8:	468a      	mov	sl, r1
   195ca:	4641      	mov	r1, r8
   195cc:	4361      	muls	r1, r4
   195ce:	437c      	muls	r4, r7
   195d0:	0c13      	lsrs	r3, r2, #16
   195d2:	0412      	lsls	r2, r2, #16
   195d4:	444b      	add	r3, r9
   195d6:	4452      	add	r2, sl
   195d8:	46a1      	mov	r9, r4
   195da:	468a      	mov	sl, r1
   195dc:	003c      	movs	r4, r7
   195de:	4641      	mov	r1, r8
   195e0:	436c      	muls	r4, r5
   195e2:	434d      	muls	r5, r1
   195e4:	4651      	mov	r1, sl
   195e6:	444d      	add	r5, r9
   195e8:	0c0f      	lsrs	r7, r1, #16
   195ea:	197d      	adds	r5, r7, r5
   195ec:	45a9      	cmp	r9, r5
   195ee:	d903      	bls.n	195f8 <__aeabi_dmul+0x2fc>
   195f0:	2180      	movs	r1, #128	; 0x80
   195f2:	0249      	lsls	r1, r1, #9
   195f4:	4688      	mov	r8, r1
   195f6:	4444      	add	r4, r8
   195f8:	9f04      	ldr	r7, [sp, #16]
   195fa:	9903      	ldr	r1, [sp, #12]
   195fc:	46b8      	mov	r8, r7
   195fe:	4441      	add	r1, r8
   19600:	468b      	mov	fp, r1
   19602:	4583      	cmp	fp, r0
   19604:	4180      	sbcs	r0, r0
   19606:	4241      	negs	r1, r0
   19608:	4688      	mov	r8, r1
   1960a:	4651      	mov	r1, sl
   1960c:	0408      	lsls	r0, r1, #16
   1960e:	042f      	lsls	r7, r5, #16
   19610:	0c00      	lsrs	r0, r0, #16
   19612:	183f      	adds	r7, r7, r0
   19614:	4658      	mov	r0, fp
   19616:	9902      	ldr	r1, [sp, #8]
   19618:	1810      	adds	r0, r2, r0
   1961a:	4689      	mov	r9, r1
   1961c:	4290      	cmp	r0, r2
   1961e:	4192      	sbcs	r2, r2
   19620:	444f      	add	r7, r9
   19622:	46ba      	mov	sl, r7
   19624:	4252      	negs	r2, r2
   19626:	4699      	mov	r9, r3
   19628:	4693      	mov	fp, r2
   1962a:	44c2      	add	sl, r8
   1962c:	44d1      	add	r9, sl
   1962e:	44cb      	add	fp, r9
   19630:	428f      	cmp	r7, r1
   19632:	41bf      	sbcs	r7, r7
   19634:	45c2      	cmp	sl, r8
   19636:	4189      	sbcs	r1, r1
   19638:	4599      	cmp	r9, r3
   1963a:	419b      	sbcs	r3, r3
   1963c:	4593      	cmp	fp, r2
   1963e:	4192      	sbcs	r2, r2
   19640:	427f      	negs	r7, r7
   19642:	4249      	negs	r1, r1
   19644:	0c2d      	lsrs	r5, r5, #16
   19646:	4252      	negs	r2, r2
   19648:	430f      	orrs	r7, r1
   1964a:	425b      	negs	r3, r3
   1964c:	4313      	orrs	r3, r2
   1964e:	197f      	adds	r7, r7, r5
   19650:	18ff      	adds	r7, r7, r3
   19652:	465b      	mov	r3, fp
   19654:	193c      	adds	r4, r7, r4
   19656:	0ddb      	lsrs	r3, r3, #23
   19658:	9a05      	ldr	r2, [sp, #20]
   1965a:	0264      	lsls	r4, r4, #9
   1965c:	431c      	orrs	r4, r3
   1965e:	0243      	lsls	r3, r0, #9
   19660:	4313      	orrs	r3, r2
   19662:	1e5d      	subs	r5, r3, #1
   19664:	41ab      	sbcs	r3, r5
   19666:	465a      	mov	r2, fp
   19668:	0dc0      	lsrs	r0, r0, #23
   1966a:	4303      	orrs	r3, r0
   1966c:	0252      	lsls	r2, r2, #9
   1966e:	4313      	orrs	r3, r2
   19670:	01e2      	lsls	r2, r4, #7
   19672:	d556      	bpl.n	19722 <__aeabi_dmul+0x426>
   19674:	2001      	movs	r0, #1
   19676:	085a      	lsrs	r2, r3, #1
   19678:	4003      	ands	r3, r0
   1967a:	4313      	orrs	r3, r2
   1967c:	07e2      	lsls	r2, r4, #31
   1967e:	4313      	orrs	r3, r2
   19680:	0864      	lsrs	r4, r4, #1
   19682:	485a      	ldr	r0, [pc, #360]	; (197ec <__aeabi_dmul+0x4f0>)
   19684:	4460      	add	r0, ip
   19686:	2800      	cmp	r0, #0
   19688:	dd4d      	ble.n	19726 <__aeabi_dmul+0x42a>
   1968a:	075a      	lsls	r2, r3, #29
   1968c:	d009      	beq.n	196a2 <__aeabi_dmul+0x3a6>
   1968e:	220f      	movs	r2, #15
   19690:	401a      	ands	r2, r3
   19692:	2a04      	cmp	r2, #4
   19694:	d005      	beq.n	196a2 <__aeabi_dmul+0x3a6>
   19696:	1d1a      	adds	r2, r3, #4
   19698:	429a      	cmp	r2, r3
   1969a:	419b      	sbcs	r3, r3
   1969c:	425b      	negs	r3, r3
   1969e:	18e4      	adds	r4, r4, r3
   196a0:	0013      	movs	r3, r2
   196a2:	01e2      	lsls	r2, r4, #7
   196a4:	d504      	bpl.n	196b0 <__aeabi_dmul+0x3b4>
   196a6:	2080      	movs	r0, #128	; 0x80
   196a8:	4a51      	ldr	r2, [pc, #324]	; (197f0 <__aeabi_dmul+0x4f4>)
   196aa:	00c0      	lsls	r0, r0, #3
   196ac:	4014      	ands	r4, r2
   196ae:	4460      	add	r0, ip
   196b0:	4a50      	ldr	r2, [pc, #320]	; (197f4 <__aeabi_dmul+0x4f8>)
   196b2:	4290      	cmp	r0, r2
   196b4:	dd00      	ble.n	196b8 <__aeabi_dmul+0x3bc>
   196b6:	e6e3      	b.n	19480 <__aeabi_dmul+0x184>
   196b8:	2501      	movs	r5, #1
   196ba:	08db      	lsrs	r3, r3, #3
   196bc:	0762      	lsls	r2, r4, #29
   196be:	431a      	orrs	r2, r3
   196c0:	0264      	lsls	r4, r4, #9
   196c2:	9b01      	ldr	r3, [sp, #4]
   196c4:	4691      	mov	r9, r2
   196c6:	0b22      	lsrs	r2, r4, #12
   196c8:	0544      	lsls	r4, r0, #21
   196ca:	0d64      	lsrs	r4, r4, #21
   196cc:	401d      	ands	r5, r3
   196ce:	e67c      	b.n	193ca <__aeabi_dmul+0xce>
   196d0:	2280      	movs	r2, #128	; 0x80
   196d2:	4659      	mov	r1, fp
   196d4:	0312      	lsls	r2, r2, #12
   196d6:	4211      	tst	r1, r2
   196d8:	d008      	beq.n	196ec <__aeabi_dmul+0x3f0>
   196da:	4214      	tst	r4, r2
   196dc:	d106      	bne.n	196ec <__aeabi_dmul+0x3f0>
   196de:	4322      	orrs	r2, r4
   196e0:	0312      	lsls	r2, r2, #12
   196e2:	0b12      	lsrs	r2, r2, #12
   196e4:	4645      	mov	r5, r8
   196e6:	4699      	mov	r9, r3
   196e8:	4c43      	ldr	r4, [pc, #268]	; (197f8 <__aeabi_dmul+0x4fc>)
   196ea:	e66e      	b.n	193ca <__aeabi_dmul+0xce>
   196ec:	465b      	mov	r3, fp
   196ee:	431a      	orrs	r2, r3
   196f0:	0312      	lsls	r2, r2, #12
   196f2:	0b12      	lsrs	r2, r2, #12
   196f4:	4c40      	ldr	r4, [pc, #256]	; (197f8 <__aeabi_dmul+0x4fc>)
   196f6:	e668      	b.n	193ca <__aeabi_dmul+0xce>
   196f8:	0003      	movs	r3, r0
   196fa:	4654      	mov	r4, sl
   196fc:	3b28      	subs	r3, #40	; 0x28
   196fe:	409c      	lsls	r4, r3
   19700:	2300      	movs	r3, #0
   19702:	e6b9      	b.n	19478 <__aeabi_dmul+0x17c>
   19704:	f000 fc90 	bl	1a028 <__clzsi2>
   19708:	3020      	adds	r0, #32
   1970a:	e6a6      	b.n	1945a <__aeabi_dmul+0x15e>
   1970c:	0003      	movs	r3, r0
   1970e:	3b28      	subs	r3, #40	; 0x28
   19710:	409f      	lsls	r7, r3
   19712:	2300      	movs	r3, #0
   19714:	46bb      	mov	fp, r7
   19716:	4699      	mov	r9, r3
   19718:	e68a      	b.n	19430 <__aeabi_dmul+0x134>
   1971a:	f000 fc85 	bl	1a028 <__clzsi2>
   1971e:	3020      	adds	r0, #32
   19720:	e674      	b.n	1940c <__aeabi_dmul+0x110>
   19722:	46b4      	mov	ip, r6
   19724:	e7ad      	b.n	19682 <__aeabi_dmul+0x386>
   19726:	2501      	movs	r5, #1
   19728:	1a2a      	subs	r2, r5, r0
   1972a:	2a38      	cmp	r2, #56	; 0x38
   1972c:	dd06      	ble.n	1973c <__aeabi_dmul+0x440>
   1972e:	9b01      	ldr	r3, [sp, #4]
   19730:	2400      	movs	r4, #0
   19732:	401d      	ands	r5, r3
   19734:	2300      	movs	r3, #0
   19736:	2200      	movs	r2, #0
   19738:	4699      	mov	r9, r3
   1973a:	e646      	b.n	193ca <__aeabi_dmul+0xce>
   1973c:	2a1f      	cmp	r2, #31
   1973e:	dc21      	bgt.n	19784 <__aeabi_dmul+0x488>
   19740:	2520      	movs	r5, #32
   19742:	0020      	movs	r0, r4
   19744:	1aad      	subs	r5, r5, r2
   19746:	001e      	movs	r6, r3
   19748:	40ab      	lsls	r3, r5
   1974a:	40a8      	lsls	r0, r5
   1974c:	40d6      	lsrs	r6, r2
   1974e:	1e5d      	subs	r5, r3, #1
   19750:	41ab      	sbcs	r3, r5
   19752:	4330      	orrs	r0, r6
   19754:	4318      	orrs	r0, r3
   19756:	40d4      	lsrs	r4, r2
   19758:	0743      	lsls	r3, r0, #29
   1975a:	d009      	beq.n	19770 <__aeabi_dmul+0x474>
   1975c:	230f      	movs	r3, #15
   1975e:	4003      	ands	r3, r0
   19760:	2b04      	cmp	r3, #4
   19762:	d005      	beq.n	19770 <__aeabi_dmul+0x474>
   19764:	0003      	movs	r3, r0
   19766:	1d18      	adds	r0, r3, #4
   19768:	4298      	cmp	r0, r3
   1976a:	419b      	sbcs	r3, r3
   1976c:	425b      	negs	r3, r3
   1976e:	18e4      	adds	r4, r4, r3
   19770:	0223      	lsls	r3, r4, #8
   19772:	d521      	bpl.n	197b8 <__aeabi_dmul+0x4bc>
   19774:	2501      	movs	r5, #1
   19776:	9b01      	ldr	r3, [sp, #4]
   19778:	2401      	movs	r4, #1
   1977a:	401d      	ands	r5, r3
   1977c:	2300      	movs	r3, #0
   1977e:	2200      	movs	r2, #0
   19780:	4699      	mov	r9, r3
   19782:	e622      	b.n	193ca <__aeabi_dmul+0xce>
   19784:	251f      	movs	r5, #31
   19786:	0021      	movs	r1, r4
   19788:	426d      	negs	r5, r5
   1978a:	1a28      	subs	r0, r5, r0
   1978c:	40c1      	lsrs	r1, r0
   1978e:	0008      	movs	r0, r1
   19790:	2a20      	cmp	r2, #32
   19792:	d01d      	beq.n	197d0 <__aeabi_dmul+0x4d4>
   19794:	355f      	adds	r5, #95	; 0x5f
   19796:	1aaa      	subs	r2, r5, r2
   19798:	4094      	lsls	r4, r2
   1979a:	4323      	orrs	r3, r4
   1979c:	1e5c      	subs	r4, r3, #1
   1979e:	41a3      	sbcs	r3, r4
   197a0:	2507      	movs	r5, #7
   197a2:	4303      	orrs	r3, r0
   197a4:	401d      	ands	r5, r3
   197a6:	2200      	movs	r2, #0
   197a8:	2d00      	cmp	r5, #0
   197aa:	d009      	beq.n	197c0 <__aeabi_dmul+0x4c4>
   197ac:	220f      	movs	r2, #15
   197ae:	2400      	movs	r4, #0
   197b0:	401a      	ands	r2, r3
   197b2:	0018      	movs	r0, r3
   197b4:	2a04      	cmp	r2, #4
   197b6:	d1d6      	bne.n	19766 <__aeabi_dmul+0x46a>
   197b8:	0003      	movs	r3, r0
   197ba:	0765      	lsls	r5, r4, #29
   197bc:	0264      	lsls	r4, r4, #9
   197be:	0b22      	lsrs	r2, r4, #12
   197c0:	08db      	lsrs	r3, r3, #3
   197c2:	432b      	orrs	r3, r5
   197c4:	2501      	movs	r5, #1
   197c6:	4699      	mov	r9, r3
   197c8:	9b01      	ldr	r3, [sp, #4]
   197ca:	2400      	movs	r4, #0
   197cc:	401d      	ands	r5, r3
   197ce:	e5fc      	b.n	193ca <__aeabi_dmul+0xce>
   197d0:	2400      	movs	r4, #0
   197d2:	e7e2      	b.n	1979a <__aeabi_dmul+0x49e>
   197d4:	2280      	movs	r2, #128	; 0x80
   197d6:	2501      	movs	r5, #1
   197d8:	0312      	lsls	r2, r2, #12
   197da:	4322      	orrs	r2, r4
   197dc:	9901      	ldr	r1, [sp, #4]
   197de:	0312      	lsls	r2, r2, #12
   197e0:	0b12      	lsrs	r2, r2, #12
   197e2:	400d      	ands	r5, r1
   197e4:	4699      	mov	r9, r3
   197e6:	4c04      	ldr	r4, [pc, #16]	; (197f8 <__aeabi_dmul+0x4fc>)
   197e8:	e5ef      	b.n	193ca <__aeabi_dmul+0xce>
   197ea:	46c0      	nop			; (mov r8, r8)
   197ec:	000003ff 	.word	0x000003ff
   197f0:	feffffff 	.word	0xfeffffff
   197f4:	000007fe 	.word	0x000007fe
   197f8:	000007ff 	.word	0x000007ff

000197fc <__aeabi_dsub>:
   197fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   197fe:	4646      	mov	r6, r8
   19800:	46d6      	mov	lr, sl
   19802:	464f      	mov	r7, r9
   19804:	030c      	lsls	r4, r1, #12
   19806:	b5c0      	push	{r6, r7, lr}
   19808:	0fcd      	lsrs	r5, r1, #31
   1980a:	004e      	lsls	r6, r1, #1
   1980c:	0a61      	lsrs	r1, r4, #9
   1980e:	0f44      	lsrs	r4, r0, #29
   19810:	430c      	orrs	r4, r1
   19812:	00c1      	lsls	r1, r0, #3
   19814:	0058      	lsls	r0, r3, #1
   19816:	0d40      	lsrs	r0, r0, #21
   19818:	4684      	mov	ip, r0
   1981a:	468a      	mov	sl, r1
   1981c:	000f      	movs	r7, r1
   1981e:	0319      	lsls	r1, r3, #12
   19820:	0f50      	lsrs	r0, r2, #29
   19822:	0a49      	lsrs	r1, r1, #9
   19824:	4301      	orrs	r1, r0
   19826:	48c6      	ldr	r0, [pc, #792]	; (19b40 <__aeabi_dsub+0x344>)
   19828:	0d76      	lsrs	r6, r6, #21
   1982a:	46a8      	mov	r8, r5
   1982c:	0fdb      	lsrs	r3, r3, #31
   1982e:	00d2      	lsls	r2, r2, #3
   19830:	4584      	cmp	ip, r0
   19832:	d100      	bne.n	19836 <__aeabi_dsub+0x3a>
   19834:	e0d8      	b.n	199e8 <__aeabi_dsub+0x1ec>
   19836:	2001      	movs	r0, #1
   19838:	4043      	eors	r3, r0
   1983a:	42ab      	cmp	r3, r5
   1983c:	d100      	bne.n	19840 <__aeabi_dsub+0x44>
   1983e:	e0a6      	b.n	1998e <__aeabi_dsub+0x192>
   19840:	4660      	mov	r0, ip
   19842:	1a35      	subs	r5, r6, r0
   19844:	2d00      	cmp	r5, #0
   19846:	dc00      	bgt.n	1984a <__aeabi_dsub+0x4e>
   19848:	e105      	b.n	19a56 <__aeabi_dsub+0x25a>
   1984a:	2800      	cmp	r0, #0
   1984c:	d110      	bne.n	19870 <__aeabi_dsub+0x74>
   1984e:	000b      	movs	r3, r1
   19850:	4313      	orrs	r3, r2
   19852:	d100      	bne.n	19856 <__aeabi_dsub+0x5a>
   19854:	e0d7      	b.n	19a06 <__aeabi_dsub+0x20a>
   19856:	1e6b      	subs	r3, r5, #1
   19858:	2b00      	cmp	r3, #0
   1985a:	d000      	beq.n	1985e <__aeabi_dsub+0x62>
   1985c:	e14b      	b.n	19af6 <__aeabi_dsub+0x2fa>
   1985e:	4653      	mov	r3, sl
   19860:	1a9f      	subs	r7, r3, r2
   19862:	45ba      	cmp	sl, r7
   19864:	4180      	sbcs	r0, r0
   19866:	1a64      	subs	r4, r4, r1
   19868:	4240      	negs	r0, r0
   1986a:	1a24      	subs	r4, r4, r0
   1986c:	2601      	movs	r6, #1
   1986e:	e01e      	b.n	198ae <__aeabi_dsub+0xb2>
   19870:	4bb3      	ldr	r3, [pc, #716]	; (19b40 <__aeabi_dsub+0x344>)
   19872:	429e      	cmp	r6, r3
   19874:	d048      	beq.n	19908 <__aeabi_dsub+0x10c>
   19876:	2380      	movs	r3, #128	; 0x80
   19878:	041b      	lsls	r3, r3, #16
   1987a:	4319      	orrs	r1, r3
   1987c:	2d38      	cmp	r5, #56	; 0x38
   1987e:	dd00      	ble.n	19882 <__aeabi_dsub+0x86>
   19880:	e119      	b.n	19ab6 <__aeabi_dsub+0x2ba>
   19882:	2d1f      	cmp	r5, #31
   19884:	dd00      	ble.n	19888 <__aeabi_dsub+0x8c>
   19886:	e14c      	b.n	19b22 <__aeabi_dsub+0x326>
   19888:	2320      	movs	r3, #32
   1988a:	000f      	movs	r7, r1
   1988c:	1b5b      	subs	r3, r3, r5
   1988e:	0010      	movs	r0, r2
   19890:	409a      	lsls	r2, r3
   19892:	409f      	lsls	r7, r3
   19894:	40e8      	lsrs	r0, r5
   19896:	1e53      	subs	r3, r2, #1
   19898:	419a      	sbcs	r2, r3
   1989a:	40e9      	lsrs	r1, r5
   1989c:	4307      	orrs	r7, r0
   1989e:	4317      	orrs	r7, r2
   198a0:	4653      	mov	r3, sl
   198a2:	1bdf      	subs	r7, r3, r7
   198a4:	1a61      	subs	r1, r4, r1
   198a6:	45ba      	cmp	sl, r7
   198a8:	41a4      	sbcs	r4, r4
   198aa:	4264      	negs	r4, r4
   198ac:	1b0c      	subs	r4, r1, r4
   198ae:	0223      	lsls	r3, r4, #8
   198b0:	d400      	bmi.n	198b4 <__aeabi_dsub+0xb8>
   198b2:	e0c5      	b.n	19a40 <__aeabi_dsub+0x244>
   198b4:	0264      	lsls	r4, r4, #9
   198b6:	0a65      	lsrs	r5, r4, #9
   198b8:	2d00      	cmp	r5, #0
   198ba:	d100      	bne.n	198be <__aeabi_dsub+0xc2>
   198bc:	e0f6      	b.n	19aac <__aeabi_dsub+0x2b0>
   198be:	0028      	movs	r0, r5
   198c0:	f000 fbb2 	bl	1a028 <__clzsi2>
   198c4:	0003      	movs	r3, r0
   198c6:	3b08      	subs	r3, #8
   198c8:	2b1f      	cmp	r3, #31
   198ca:	dd00      	ble.n	198ce <__aeabi_dsub+0xd2>
   198cc:	e0e9      	b.n	19aa2 <__aeabi_dsub+0x2a6>
   198ce:	2220      	movs	r2, #32
   198d0:	003c      	movs	r4, r7
   198d2:	1ad2      	subs	r2, r2, r3
   198d4:	409d      	lsls	r5, r3
   198d6:	40d4      	lsrs	r4, r2
   198d8:	409f      	lsls	r7, r3
   198da:	4325      	orrs	r5, r4
   198dc:	429e      	cmp	r6, r3
   198de:	dd00      	ble.n	198e2 <__aeabi_dsub+0xe6>
   198e0:	e0db      	b.n	19a9a <__aeabi_dsub+0x29e>
   198e2:	1b9e      	subs	r6, r3, r6
   198e4:	1c73      	adds	r3, r6, #1
   198e6:	2b1f      	cmp	r3, #31
   198e8:	dd00      	ble.n	198ec <__aeabi_dsub+0xf0>
   198ea:	e10a      	b.n	19b02 <__aeabi_dsub+0x306>
   198ec:	2220      	movs	r2, #32
   198ee:	0038      	movs	r0, r7
   198f0:	1ad2      	subs	r2, r2, r3
   198f2:	0029      	movs	r1, r5
   198f4:	4097      	lsls	r7, r2
   198f6:	002c      	movs	r4, r5
   198f8:	4091      	lsls	r1, r2
   198fa:	40d8      	lsrs	r0, r3
   198fc:	1e7a      	subs	r2, r7, #1
   198fe:	4197      	sbcs	r7, r2
   19900:	40dc      	lsrs	r4, r3
   19902:	2600      	movs	r6, #0
   19904:	4301      	orrs	r1, r0
   19906:	430f      	orrs	r7, r1
   19908:	077b      	lsls	r3, r7, #29
   1990a:	d009      	beq.n	19920 <__aeabi_dsub+0x124>
   1990c:	230f      	movs	r3, #15
   1990e:	403b      	ands	r3, r7
   19910:	2b04      	cmp	r3, #4
   19912:	d005      	beq.n	19920 <__aeabi_dsub+0x124>
   19914:	1d3b      	adds	r3, r7, #4
   19916:	42bb      	cmp	r3, r7
   19918:	41bf      	sbcs	r7, r7
   1991a:	427f      	negs	r7, r7
   1991c:	19e4      	adds	r4, r4, r7
   1991e:	001f      	movs	r7, r3
   19920:	0223      	lsls	r3, r4, #8
   19922:	d525      	bpl.n	19970 <__aeabi_dsub+0x174>
   19924:	4b86      	ldr	r3, [pc, #536]	; (19b40 <__aeabi_dsub+0x344>)
   19926:	3601      	adds	r6, #1
   19928:	429e      	cmp	r6, r3
   1992a:	d100      	bne.n	1992e <__aeabi_dsub+0x132>
   1992c:	e0af      	b.n	19a8e <__aeabi_dsub+0x292>
   1992e:	4b85      	ldr	r3, [pc, #532]	; (19b44 <__aeabi_dsub+0x348>)
   19930:	2501      	movs	r5, #1
   19932:	401c      	ands	r4, r3
   19934:	4643      	mov	r3, r8
   19936:	0762      	lsls	r2, r4, #29
   19938:	08ff      	lsrs	r7, r7, #3
   1993a:	0264      	lsls	r4, r4, #9
   1993c:	0576      	lsls	r6, r6, #21
   1993e:	4317      	orrs	r7, r2
   19940:	0b24      	lsrs	r4, r4, #12
   19942:	0d76      	lsrs	r6, r6, #21
   19944:	401d      	ands	r5, r3
   19946:	2100      	movs	r1, #0
   19948:	0324      	lsls	r4, r4, #12
   1994a:	0b23      	lsrs	r3, r4, #12
   1994c:	0d0c      	lsrs	r4, r1, #20
   1994e:	4a7e      	ldr	r2, [pc, #504]	; (19b48 <__aeabi_dsub+0x34c>)
   19950:	0524      	lsls	r4, r4, #20
   19952:	431c      	orrs	r4, r3
   19954:	4014      	ands	r4, r2
   19956:	0533      	lsls	r3, r6, #20
   19958:	4323      	orrs	r3, r4
   1995a:	005b      	lsls	r3, r3, #1
   1995c:	07ed      	lsls	r5, r5, #31
   1995e:	085b      	lsrs	r3, r3, #1
   19960:	432b      	orrs	r3, r5
   19962:	0038      	movs	r0, r7
   19964:	0019      	movs	r1, r3
   19966:	bc1c      	pop	{r2, r3, r4}
   19968:	4690      	mov	r8, r2
   1996a:	4699      	mov	r9, r3
   1996c:	46a2      	mov	sl, r4
   1996e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19970:	2501      	movs	r5, #1
   19972:	4643      	mov	r3, r8
   19974:	0762      	lsls	r2, r4, #29
   19976:	08ff      	lsrs	r7, r7, #3
   19978:	4317      	orrs	r7, r2
   1997a:	08e4      	lsrs	r4, r4, #3
   1997c:	401d      	ands	r5, r3
   1997e:	4b70      	ldr	r3, [pc, #448]	; (19b40 <__aeabi_dsub+0x344>)
   19980:	429e      	cmp	r6, r3
   19982:	d036      	beq.n	199f2 <__aeabi_dsub+0x1f6>
   19984:	0324      	lsls	r4, r4, #12
   19986:	0576      	lsls	r6, r6, #21
   19988:	0b24      	lsrs	r4, r4, #12
   1998a:	0d76      	lsrs	r6, r6, #21
   1998c:	e7db      	b.n	19946 <__aeabi_dsub+0x14a>
   1998e:	4663      	mov	r3, ip
   19990:	1af3      	subs	r3, r6, r3
   19992:	2b00      	cmp	r3, #0
   19994:	dc00      	bgt.n	19998 <__aeabi_dsub+0x19c>
   19996:	e094      	b.n	19ac2 <__aeabi_dsub+0x2c6>
   19998:	4660      	mov	r0, ip
   1999a:	2800      	cmp	r0, #0
   1999c:	d035      	beq.n	19a0a <__aeabi_dsub+0x20e>
   1999e:	4868      	ldr	r0, [pc, #416]	; (19b40 <__aeabi_dsub+0x344>)
   199a0:	4286      	cmp	r6, r0
   199a2:	d0b1      	beq.n	19908 <__aeabi_dsub+0x10c>
   199a4:	2780      	movs	r7, #128	; 0x80
   199a6:	043f      	lsls	r7, r7, #16
   199a8:	4339      	orrs	r1, r7
   199aa:	2b38      	cmp	r3, #56	; 0x38
   199ac:	dc00      	bgt.n	199b0 <__aeabi_dsub+0x1b4>
   199ae:	e0fd      	b.n	19bac <__aeabi_dsub+0x3b0>
   199b0:	430a      	orrs	r2, r1
   199b2:	0017      	movs	r7, r2
   199b4:	2100      	movs	r1, #0
   199b6:	1e7a      	subs	r2, r7, #1
   199b8:	4197      	sbcs	r7, r2
   199ba:	4457      	add	r7, sl
   199bc:	4557      	cmp	r7, sl
   199be:	4180      	sbcs	r0, r0
   199c0:	1909      	adds	r1, r1, r4
   199c2:	4244      	negs	r4, r0
   199c4:	190c      	adds	r4, r1, r4
   199c6:	0223      	lsls	r3, r4, #8
   199c8:	d53a      	bpl.n	19a40 <__aeabi_dsub+0x244>
   199ca:	4b5d      	ldr	r3, [pc, #372]	; (19b40 <__aeabi_dsub+0x344>)
   199cc:	3601      	adds	r6, #1
   199ce:	429e      	cmp	r6, r3
   199d0:	d100      	bne.n	199d4 <__aeabi_dsub+0x1d8>
   199d2:	e14b      	b.n	19c6c <__aeabi_dsub+0x470>
   199d4:	2201      	movs	r2, #1
   199d6:	4b5b      	ldr	r3, [pc, #364]	; (19b44 <__aeabi_dsub+0x348>)
   199d8:	401c      	ands	r4, r3
   199da:	087b      	lsrs	r3, r7, #1
   199dc:	4017      	ands	r7, r2
   199de:	431f      	orrs	r7, r3
   199e0:	07e2      	lsls	r2, r4, #31
   199e2:	4317      	orrs	r7, r2
   199e4:	0864      	lsrs	r4, r4, #1
   199e6:	e78f      	b.n	19908 <__aeabi_dsub+0x10c>
   199e8:	0008      	movs	r0, r1
   199ea:	4310      	orrs	r0, r2
   199ec:	d000      	beq.n	199f0 <__aeabi_dsub+0x1f4>
   199ee:	e724      	b.n	1983a <__aeabi_dsub+0x3e>
   199f0:	e721      	b.n	19836 <__aeabi_dsub+0x3a>
   199f2:	0023      	movs	r3, r4
   199f4:	433b      	orrs	r3, r7
   199f6:	d100      	bne.n	199fa <__aeabi_dsub+0x1fe>
   199f8:	e1b9      	b.n	19d6e <__aeabi_dsub+0x572>
   199fa:	2280      	movs	r2, #128	; 0x80
   199fc:	0312      	lsls	r2, r2, #12
   199fe:	4314      	orrs	r4, r2
   19a00:	0324      	lsls	r4, r4, #12
   19a02:	0b24      	lsrs	r4, r4, #12
   19a04:	e79f      	b.n	19946 <__aeabi_dsub+0x14a>
   19a06:	002e      	movs	r6, r5
   19a08:	e77e      	b.n	19908 <__aeabi_dsub+0x10c>
   19a0a:	0008      	movs	r0, r1
   19a0c:	4310      	orrs	r0, r2
   19a0e:	d100      	bne.n	19a12 <__aeabi_dsub+0x216>
   19a10:	e0ca      	b.n	19ba8 <__aeabi_dsub+0x3ac>
   19a12:	1e58      	subs	r0, r3, #1
   19a14:	4684      	mov	ip, r0
   19a16:	2800      	cmp	r0, #0
   19a18:	d000      	beq.n	19a1c <__aeabi_dsub+0x220>
   19a1a:	e0e7      	b.n	19bec <__aeabi_dsub+0x3f0>
   19a1c:	4452      	add	r2, sl
   19a1e:	4552      	cmp	r2, sl
   19a20:	4180      	sbcs	r0, r0
   19a22:	1864      	adds	r4, r4, r1
   19a24:	4240      	negs	r0, r0
   19a26:	1824      	adds	r4, r4, r0
   19a28:	0017      	movs	r7, r2
   19a2a:	2601      	movs	r6, #1
   19a2c:	0223      	lsls	r3, r4, #8
   19a2e:	d507      	bpl.n	19a40 <__aeabi_dsub+0x244>
   19a30:	2602      	movs	r6, #2
   19a32:	e7cf      	b.n	199d4 <__aeabi_dsub+0x1d8>
   19a34:	4664      	mov	r4, ip
   19a36:	432c      	orrs	r4, r5
   19a38:	d100      	bne.n	19a3c <__aeabi_dsub+0x240>
   19a3a:	e1b3      	b.n	19da4 <__aeabi_dsub+0x5a8>
   19a3c:	002c      	movs	r4, r5
   19a3e:	4667      	mov	r7, ip
   19a40:	077b      	lsls	r3, r7, #29
   19a42:	d000      	beq.n	19a46 <__aeabi_dsub+0x24a>
   19a44:	e762      	b.n	1990c <__aeabi_dsub+0x110>
   19a46:	0763      	lsls	r3, r4, #29
   19a48:	08ff      	lsrs	r7, r7, #3
   19a4a:	431f      	orrs	r7, r3
   19a4c:	2501      	movs	r5, #1
   19a4e:	4643      	mov	r3, r8
   19a50:	08e4      	lsrs	r4, r4, #3
   19a52:	401d      	ands	r5, r3
   19a54:	e793      	b.n	1997e <__aeabi_dsub+0x182>
   19a56:	2d00      	cmp	r5, #0
   19a58:	d178      	bne.n	19b4c <__aeabi_dsub+0x350>
   19a5a:	1c75      	adds	r5, r6, #1
   19a5c:	056d      	lsls	r5, r5, #21
   19a5e:	0d6d      	lsrs	r5, r5, #21
   19a60:	2d01      	cmp	r5, #1
   19a62:	dc00      	bgt.n	19a66 <__aeabi_dsub+0x26a>
   19a64:	e0f2      	b.n	19c4c <__aeabi_dsub+0x450>
   19a66:	4650      	mov	r0, sl
   19a68:	1a80      	subs	r0, r0, r2
   19a6a:	4582      	cmp	sl, r0
   19a6c:	41bf      	sbcs	r7, r7
   19a6e:	1a65      	subs	r5, r4, r1
   19a70:	427f      	negs	r7, r7
   19a72:	1bed      	subs	r5, r5, r7
   19a74:	4684      	mov	ip, r0
   19a76:	0228      	lsls	r0, r5, #8
   19a78:	d400      	bmi.n	19a7c <__aeabi_dsub+0x280>
   19a7a:	e08c      	b.n	19b96 <__aeabi_dsub+0x39a>
   19a7c:	4650      	mov	r0, sl
   19a7e:	1a17      	subs	r7, r2, r0
   19a80:	42ba      	cmp	r2, r7
   19a82:	4192      	sbcs	r2, r2
   19a84:	1b0c      	subs	r4, r1, r4
   19a86:	4255      	negs	r5, r2
   19a88:	1b65      	subs	r5, r4, r5
   19a8a:	4698      	mov	r8, r3
   19a8c:	e714      	b.n	198b8 <__aeabi_dsub+0xbc>
   19a8e:	2501      	movs	r5, #1
   19a90:	4643      	mov	r3, r8
   19a92:	2400      	movs	r4, #0
   19a94:	401d      	ands	r5, r3
   19a96:	2700      	movs	r7, #0
   19a98:	e755      	b.n	19946 <__aeabi_dsub+0x14a>
   19a9a:	4c2a      	ldr	r4, [pc, #168]	; (19b44 <__aeabi_dsub+0x348>)
   19a9c:	1af6      	subs	r6, r6, r3
   19a9e:	402c      	ands	r4, r5
   19aa0:	e732      	b.n	19908 <__aeabi_dsub+0x10c>
   19aa2:	003d      	movs	r5, r7
   19aa4:	3828      	subs	r0, #40	; 0x28
   19aa6:	4085      	lsls	r5, r0
   19aa8:	2700      	movs	r7, #0
   19aaa:	e717      	b.n	198dc <__aeabi_dsub+0xe0>
   19aac:	0038      	movs	r0, r7
   19aae:	f000 fabb 	bl	1a028 <__clzsi2>
   19ab2:	3020      	adds	r0, #32
   19ab4:	e706      	b.n	198c4 <__aeabi_dsub+0xc8>
   19ab6:	430a      	orrs	r2, r1
   19ab8:	0017      	movs	r7, r2
   19aba:	2100      	movs	r1, #0
   19abc:	1e7a      	subs	r2, r7, #1
   19abe:	4197      	sbcs	r7, r2
   19ac0:	e6ee      	b.n	198a0 <__aeabi_dsub+0xa4>
   19ac2:	2b00      	cmp	r3, #0
   19ac4:	d000      	beq.n	19ac8 <__aeabi_dsub+0x2cc>
   19ac6:	e0e5      	b.n	19c94 <__aeabi_dsub+0x498>
   19ac8:	1c73      	adds	r3, r6, #1
   19aca:	469c      	mov	ip, r3
   19acc:	055b      	lsls	r3, r3, #21
   19ace:	0d5b      	lsrs	r3, r3, #21
   19ad0:	2b01      	cmp	r3, #1
   19ad2:	dc00      	bgt.n	19ad6 <__aeabi_dsub+0x2da>
   19ad4:	e09f      	b.n	19c16 <__aeabi_dsub+0x41a>
   19ad6:	4b1a      	ldr	r3, [pc, #104]	; (19b40 <__aeabi_dsub+0x344>)
   19ad8:	459c      	cmp	ip, r3
   19ada:	d100      	bne.n	19ade <__aeabi_dsub+0x2e2>
   19adc:	e0c5      	b.n	19c6a <__aeabi_dsub+0x46e>
   19ade:	4452      	add	r2, sl
   19ae0:	4552      	cmp	r2, sl
   19ae2:	4180      	sbcs	r0, r0
   19ae4:	1864      	adds	r4, r4, r1
   19ae6:	4240      	negs	r0, r0
   19ae8:	1824      	adds	r4, r4, r0
   19aea:	07e7      	lsls	r7, r4, #31
   19aec:	0852      	lsrs	r2, r2, #1
   19aee:	4317      	orrs	r7, r2
   19af0:	0864      	lsrs	r4, r4, #1
   19af2:	4666      	mov	r6, ip
   19af4:	e708      	b.n	19908 <__aeabi_dsub+0x10c>
   19af6:	4812      	ldr	r0, [pc, #72]	; (19b40 <__aeabi_dsub+0x344>)
   19af8:	4285      	cmp	r5, r0
   19afa:	d100      	bne.n	19afe <__aeabi_dsub+0x302>
   19afc:	e085      	b.n	19c0a <__aeabi_dsub+0x40e>
   19afe:	001d      	movs	r5, r3
   19b00:	e6bc      	b.n	1987c <__aeabi_dsub+0x80>
   19b02:	0029      	movs	r1, r5
   19b04:	3e1f      	subs	r6, #31
   19b06:	40f1      	lsrs	r1, r6
   19b08:	2b20      	cmp	r3, #32
   19b0a:	d100      	bne.n	19b0e <__aeabi_dsub+0x312>
   19b0c:	e07f      	b.n	19c0e <__aeabi_dsub+0x412>
   19b0e:	2240      	movs	r2, #64	; 0x40
   19b10:	1ad3      	subs	r3, r2, r3
   19b12:	409d      	lsls	r5, r3
   19b14:	432f      	orrs	r7, r5
   19b16:	1e7d      	subs	r5, r7, #1
   19b18:	41af      	sbcs	r7, r5
   19b1a:	2400      	movs	r4, #0
   19b1c:	430f      	orrs	r7, r1
   19b1e:	2600      	movs	r6, #0
   19b20:	e78e      	b.n	19a40 <__aeabi_dsub+0x244>
   19b22:	002b      	movs	r3, r5
   19b24:	000f      	movs	r7, r1
   19b26:	3b20      	subs	r3, #32
   19b28:	40df      	lsrs	r7, r3
   19b2a:	2d20      	cmp	r5, #32
   19b2c:	d071      	beq.n	19c12 <__aeabi_dsub+0x416>
   19b2e:	2340      	movs	r3, #64	; 0x40
   19b30:	1b5d      	subs	r5, r3, r5
   19b32:	40a9      	lsls	r1, r5
   19b34:	430a      	orrs	r2, r1
   19b36:	1e51      	subs	r1, r2, #1
   19b38:	418a      	sbcs	r2, r1
   19b3a:	2100      	movs	r1, #0
   19b3c:	4317      	orrs	r7, r2
   19b3e:	e6af      	b.n	198a0 <__aeabi_dsub+0xa4>
   19b40:	000007ff 	.word	0x000007ff
   19b44:	ff7fffff 	.word	0xff7fffff
   19b48:	800fffff 	.word	0x800fffff
   19b4c:	2e00      	cmp	r6, #0
   19b4e:	d03e      	beq.n	19bce <__aeabi_dsub+0x3d2>
   19b50:	4eb3      	ldr	r6, [pc, #716]	; (19e20 <__aeabi_dsub+0x624>)
   19b52:	45b4      	cmp	ip, r6
   19b54:	d045      	beq.n	19be2 <__aeabi_dsub+0x3e6>
   19b56:	2680      	movs	r6, #128	; 0x80
   19b58:	0436      	lsls	r6, r6, #16
   19b5a:	426d      	negs	r5, r5
   19b5c:	4334      	orrs	r4, r6
   19b5e:	2d38      	cmp	r5, #56	; 0x38
   19b60:	dd00      	ble.n	19b64 <__aeabi_dsub+0x368>
   19b62:	e0a8      	b.n	19cb6 <__aeabi_dsub+0x4ba>
   19b64:	2d1f      	cmp	r5, #31
   19b66:	dd00      	ble.n	19b6a <__aeabi_dsub+0x36e>
   19b68:	e11f      	b.n	19daa <__aeabi_dsub+0x5ae>
   19b6a:	2620      	movs	r6, #32
   19b6c:	0027      	movs	r7, r4
   19b6e:	4650      	mov	r0, sl
   19b70:	1b76      	subs	r6, r6, r5
   19b72:	40b7      	lsls	r7, r6
   19b74:	40e8      	lsrs	r0, r5
   19b76:	4307      	orrs	r7, r0
   19b78:	4650      	mov	r0, sl
   19b7a:	40b0      	lsls	r0, r6
   19b7c:	1e46      	subs	r6, r0, #1
   19b7e:	41b0      	sbcs	r0, r6
   19b80:	40ec      	lsrs	r4, r5
   19b82:	4338      	orrs	r0, r7
   19b84:	1a17      	subs	r7, r2, r0
   19b86:	42ba      	cmp	r2, r7
   19b88:	4192      	sbcs	r2, r2
   19b8a:	1b0c      	subs	r4, r1, r4
   19b8c:	4252      	negs	r2, r2
   19b8e:	1aa4      	subs	r4, r4, r2
   19b90:	4666      	mov	r6, ip
   19b92:	4698      	mov	r8, r3
   19b94:	e68b      	b.n	198ae <__aeabi_dsub+0xb2>
   19b96:	4664      	mov	r4, ip
   19b98:	4667      	mov	r7, ip
   19b9a:	432c      	orrs	r4, r5
   19b9c:	d000      	beq.n	19ba0 <__aeabi_dsub+0x3a4>
   19b9e:	e68b      	b.n	198b8 <__aeabi_dsub+0xbc>
   19ba0:	2500      	movs	r5, #0
   19ba2:	2600      	movs	r6, #0
   19ba4:	2700      	movs	r7, #0
   19ba6:	e6ea      	b.n	1997e <__aeabi_dsub+0x182>
   19ba8:	001e      	movs	r6, r3
   19baa:	e6ad      	b.n	19908 <__aeabi_dsub+0x10c>
   19bac:	2b1f      	cmp	r3, #31
   19bae:	dc60      	bgt.n	19c72 <__aeabi_dsub+0x476>
   19bb0:	2720      	movs	r7, #32
   19bb2:	1af8      	subs	r0, r7, r3
   19bb4:	000f      	movs	r7, r1
   19bb6:	4684      	mov	ip, r0
   19bb8:	4087      	lsls	r7, r0
   19bba:	0010      	movs	r0, r2
   19bbc:	40d8      	lsrs	r0, r3
   19bbe:	4307      	orrs	r7, r0
   19bc0:	4660      	mov	r0, ip
   19bc2:	4082      	lsls	r2, r0
   19bc4:	1e50      	subs	r0, r2, #1
   19bc6:	4182      	sbcs	r2, r0
   19bc8:	40d9      	lsrs	r1, r3
   19bca:	4317      	orrs	r7, r2
   19bcc:	e6f5      	b.n	199ba <__aeabi_dsub+0x1be>
   19bce:	0026      	movs	r6, r4
   19bd0:	4650      	mov	r0, sl
   19bd2:	4306      	orrs	r6, r0
   19bd4:	d005      	beq.n	19be2 <__aeabi_dsub+0x3e6>
   19bd6:	43ed      	mvns	r5, r5
   19bd8:	2d00      	cmp	r5, #0
   19bda:	d0d3      	beq.n	19b84 <__aeabi_dsub+0x388>
   19bdc:	4e90      	ldr	r6, [pc, #576]	; (19e20 <__aeabi_dsub+0x624>)
   19bde:	45b4      	cmp	ip, r6
   19be0:	d1bd      	bne.n	19b5e <__aeabi_dsub+0x362>
   19be2:	000c      	movs	r4, r1
   19be4:	0017      	movs	r7, r2
   19be6:	4666      	mov	r6, ip
   19be8:	4698      	mov	r8, r3
   19bea:	e68d      	b.n	19908 <__aeabi_dsub+0x10c>
   19bec:	488c      	ldr	r0, [pc, #560]	; (19e20 <__aeabi_dsub+0x624>)
   19bee:	4283      	cmp	r3, r0
   19bf0:	d00b      	beq.n	19c0a <__aeabi_dsub+0x40e>
   19bf2:	4663      	mov	r3, ip
   19bf4:	e6d9      	b.n	199aa <__aeabi_dsub+0x1ae>
   19bf6:	2d00      	cmp	r5, #0
   19bf8:	d000      	beq.n	19bfc <__aeabi_dsub+0x400>
   19bfa:	e096      	b.n	19d2a <__aeabi_dsub+0x52e>
   19bfc:	0008      	movs	r0, r1
   19bfe:	4310      	orrs	r0, r2
   19c00:	d100      	bne.n	19c04 <__aeabi_dsub+0x408>
   19c02:	e0e2      	b.n	19dca <__aeabi_dsub+0x5ce>
   19c04:	000c      	movs	r4, r1
   19c06:	0017      	movs	r7, r2
   19c08:	4698      	mov	r8, r3
   19c0a:	4e85      	ldr	r6, [pc, #532]	; (19e20 <__aeabi_dsub+0x624>)
   19c0c:	e67c      	b.n	19908 <__aeabi_dsub+0x10c>
   19c0e:	2500      	movs	r5, #0
   19c10:	e780      	b.n	19b14 <__aeabi_dsub+0x318>
   19c12:	2100      	movs	r1, #0
   19c14:	e78e      	b.n	19b34 <__aeabi_dsub+0x338>
   19c16:	0023      	movs	r3, r4
   19c18:	4650      	mov	r0, sl
   19c1a:	4303      	orrs	r3, r0
   19c1c:	2e00      	cmp	r6, #0
   19c1e:	d000      	beq.n	19c22 <__aeabi_dsub+0x426>
   19c20:	e0a8      	b.n	19d74 <__aeabi_dsub+0x578>
   19c22:	2b00      	cmp	r3, #0
   19c24:	d100      	bne.n	19c28 <__aeabi_dsub+0x42c>
   19c26:	e0de      	b.n	19de6 <__aeabi_dsub+0x5ea>
   19c28:	000b      	movs	r3, r1
   19c2a:	4313      	orrs	r3, r2
   19c2c:	d100      	bne.n	19c30 <__aeabi_dsub+0x434>
   19c2e:	e66b      	b.n	19908 <__aeabi_dsub+0x10c>
   19c30:	4452      	add	r2, sl
   19c32:	4552      	cmp	r2, sl
   19c34:	4180      	sbcs	r0, r0
   19c36:	1864      	adds	r4, r4, r1
   19c38:	4240      	negs	r0, r0
   19c3a:	1824      	adds	r4, r4, r0
   19c3c:	0017      	movs	r7, r2
   19c3e:	0223      	lsls	r3, r4, #8
   19c40:	d400      	bmi.n	19c44 <__aeabi_dsub+0x448>
   19c42:	e6fd      	b.n	19a40 <__aeabi_dsub+0x244>
   19c44:	4b77      	ldr	r3, [pc, #476]	; (19e24 <__aeabi_dsub+0x628>)
   19c46:	4666      	mov	r6, ip
   19c48:	401c      	ands	r4, r3
   19c4a:	e65d      	b.n	19908 <__aeabi_dsub+0x10c>
   19c4c:	0025      	movs	r5, r4
   19c4e:	4650      	mov	r0, sl
   19c50:	4305      	orrs	r5, r0
   19c52:	2e00      	cmp	r6, #0
   19c54:	d1cf      	bne.n	19bf6 <__aeabi_dsub+0x3fa>
   19c56:	2d00      	cmp	r5, #0
   19c58:	d14f      	bne.n	19cfa <__aeabi_dsub+0x4fe>
   19c5a:	000c      	movs	r4, r1
   19c5c:	4314      	orrs	r4, r2
   19c5e:	d100      	bne.n	19c62 <__aeabi_dsub+0x466>
   19c60:	e0a0      	b.n	19da4 <__aeabi_dsub+0x5a8>
   19c62:	000c      	movs	r4, r1
   19c64:	0017      	movs	r7, r2
   19c66:	4698      	mov	r8, r3
   19c68:	e64e      	b.n	19908 <__aeabi_dsub+0x10c>
   19c6a:	4666      	mov	r6, ip
   19c6c:	2400      	movs	r4, #0
   19c6e:	2700      	movs	r7, #0
   19c70:	e685      	b.n	1997e <__aeabi_dsub+0x182>
   19c72:	001f      	movs	r7, r3
   19c74:	0008      	movs	r0, r1
   19c76:	3f20      	subs	r7, #32
   19c78:	40f8      	lsrs	r0, r7
   19c7a:	0007      	movs	r7, r0
   19c7c:	2b20      	cmp	r3, #32
   19c7e:	d100      	bne.n	19c82 <__aeabi_dsub+0x486>
   19c80:	e08e      	b.n	19da0 <__aeabi_dsub+0x5a4>
   19c82:	2040      	movs	r0, #64	; 0x40
   19c84:	1ac3      	subs	r3, r0, r3
   19c86:	4099      	lsls	r1, r3
   19c88:	430a      	orrs	r2, r1
   19c8a:	1e51      	subs	r1, r2, #1
   19c8c:	418a      	sbcs	r2, r1
   19c8e:	2100      	movs	r1, #0
   19c90:	4317      	orrs	r7, r2
   19c92:	e692      	b.n	199ba <__aeabi_dsub+0x1be>
   19c94:	2e00      	cmp	r6, #0
   19c96:	d114      	bne.n	19cc2 <__aeabi_dsub+0x4c6>
   19c98:	0026      	movs	r6, r4
   19c9a:	4650      	mov	r0, sl
   19c9c:	4306      	orrs	r6, r0
   19c9e:	d062      	beq.n	19d66 <__aeabi_dsub+0x56a>
   19ca0:	43db      	mvns	r3, r3
   19ca2:	2b00      	cmp	r3, #0
   19ca4:	d15c      	bne.n	19d60 <__aeabi_dsub+0x564>
   19ca6:	1887      	adds	r7, r0, r2
   19ca8:	4297      	cmp	r7, r2
   19caa:	4192      	sbcs	r2, r2
   19cac:	1864      	adds	r4, r4, r1
   19cae:	4252      	negs	r2, r2
   19cb0:	18a4      	adds	r4, r4, r2
   19cb2:	4666      	mov	r6, ip
   19cb4:	e687      	b.n	199c6 <__aeabi_dsub+0x1ca>
   19cb6:	4650      	mov	r0, sl
   19cb8:	4320      	orrs	r0, r4
   19cba:	1e44      	subs	r4, r0, #1
   19cbc:	41a0      	sbcs	r0, r4
   19cbe:	2400      	movs	r4, #0
   19cc0:	e760      	b.n	19b84 <__aeabi_dsub+0x388>
   19cc2:	4e57      	ldr	r6, [pc, #348]	; (19e20 <__aeabi_dsub+0x624>)
   19cc4:	45b4      	cmp	ip, r6
   19cc6:	d04e      	beq.n	19d66 <__aeabi_dsub+0x56a>
   19cc8:	2680      	movs	r6, #128	; 0x80
   19cca:	0436      	lsls	r6, r6, #16
   19ccc:	425b      	negs	r3, r3
   19cce:	4334      	orrs	r4, r6
   19cd0:	2b38      	cmp	r3, #56	; 0x38
   19cd2:	dd00      	ble.n	19cd6 <__aeabi_dsub+0x4da>
   19cd4:	e07f      	b.n	19dd6 <__aeabi_dsub+0x5da>
   19cd6:	2b1f      	cmp	r3, #31
   19cd8:	dd00      	ble.n	19cdc <__aeabi_dsub+0x4e0>
   19cda:	e08b      	b.n	19df4 <__aeabi_dsub+0x5f8>
   19cdc:	2620      	movs	r6, #32
   19cde:	0027      	movs	r7, r4
   19ce0:	4650      	mov	r0, sl
   19ce2:	1af6      	subs	r6, r6, r3
   19ce4:	40b7      	lsls	r7, r6
   19ce6:	40d8      	lsrs	r0, r3
   19ce8:	4307      	orrs	r7, r0
   19cea:	4650      	mov	r0, sl
   19cec:	40b0      	lsls	r0, r6
   19cee:	1e46      	subs	r6, r0, #1
   19cf0:	41b0      	sbcs	r0, r6
   19cf2:	4307      	orrs	r7, r0
   19cf4:	40dc      	lsrs	r4, r3
   19cf6:	18bf      	adds	r7, r7, r2
   19cf8:	e7d6      	b.n	19ca8 <__aeabi_dsub+0x4ac>
   19cfa:	000d      	movs	r5, r1
   19cfc:	4315      	orrs	r5, r2
   19cfe:	d100      	bne.n	19d02 <__aeabi_dsub+0x506>
   19d00:	e602      	b.n	19908 <__aeabi_dsub+0x10c>
   19d02:	4650      	mov	r0, sl
   19d04:	1a80      	subs	r0, r0, r2
   19d06:	4582      	cmp	sl, r0
   19d08:	41bf      	sbcs	r7, r7
   19d0a:	1a65      	subs	r5, r4, r1
   19d0c:	427f      	negs	r7, r7
   19d0e:	1bed      	subs	r5, r5, r7
   19d10:	4684      	mov	ip, r0
   19d12:	0228      	lsls	r0, r5, #8
   19d14:	d400      	bmi.n	19d18 <__aeabi_dsub+0x51c>
   19d16:	e68d      	b.n	19a34 <__aeabi_dsub+0x238>
   19d18:	4650      	mov	r0, sl
   19d1a:	1a17      	subs	r7, r2, r0
   19d1c:	42ba      	cmp	r2, r7
   19d1e:	4192      	sbcs	r2, r2
   19d20:	1b0c      	subs	r4, r1, r4
   19d22:	4252      	negs	r2, r2
   19d24:	1aa4      	subs	r4, r4, r2
   19d26:	4698      	mov	r8, r3
   19d28:	e5ee      	b.n	19908 <__aeabi_dsub+0x10c>
   19d2a:	000d      	movs	r5, r1
   19d2c:	4315      	orrs	r5, r2
   19d2e:	d100      	bne.n	19d32 <__aeabi_dsub+0x536>
   19d30:	e76b      	b.n	19c0a <__aeabi_dsub+0x40e>
   19d32:	4650      	mov	r0, sl
   19d34:	0767      	lsls	r7, r4, #29
   19d36:	08c0      	lsrs	r0, r0, #3
   19d38:	4307      	orrs	r7, r0
   19d3a:	2080      	movs	r0, #128	; 0x80
   19d3c:	08e4      	lsrs	r4, r4, #3
   19d3e:	0300      	lsls	r0, r0, #12
   19d40:	4204      	tst	r4, r0
   19d42:	d007      	beq.n	19d54 <__aeabi_dsub+0x558>
   19d44:	08cd      	lsrs	r5, r1, #3
   19d46:	4205      	tst	r5, r0
   19d48:	d104      	bne.n	19d54 <__aeabi_dsub+0x558>
   19d4a:	002c      	movs	r4, r5
   19d4c:	4698      	mov	r8, r3
   19d4e:	08d7      	lsrs	r7, r2, #3
   19d50:	0749      	lsls	r1, r1, #29
   19d52:	430f      	orrs	r7, r1
   19d54:	0f7b      	lsrs	r3, r7, #29
   19d56:	00e4      	lsls	r4, r4, #3
   19d58:	431c      	orrs	r4, r3
   19d5a:	00ff      	lsls	r7, r7, #3
   19d5c:	4e30      	ldr	r6, [pc, #192]	; (19e20 <__aeabi_dsub+0x624>)
   19d5e:	e5d3      	b.n	19908 <__aeabi_dsub+0x10c>
   19d60:	4e2f      	ldr	r6, [pc, #188]	; (19e20 <__aeabi_dsub+0x624>)
   19d62:	45b4      	cmp	ip, r6
   19d64:	d1b4      	bne.n	19cd0 <__aeabi_dsub+0x4d4>
   19d66:	000c      	movs	r4, r1
   19d68:	0017      	movs	r7, r2
   19d6a:	4666      	mov	r6, ip
   19d6c:	e5cc      	b.n	19908 <__aeabi_dsub+0x10c>
   19d6e:	2700      	movs	r7, #0
   19d70:	2400      	movs	r4, #0
   19d72:	e5e8      	b.n	19946 <__aeabi_dsub+0x14a>
   19d74:	2b00      	cmp	r3, #0
   19d76:	d039      	beq.n	19dec <__aeabi_dsub+0x5f0>
   19d78:	000b      	movs	r3, r1
   19d7a:	4313      	orrs	r3, r2
   19d7c:	d100      	bne.n	19d80 <__aeabi_dsub+0x584>
   19d7e:	e744      	b.n	19c0a <__aeabi_dsub+0x40e>
   19d80:	08c0      	lsrs	r0, r0, #3
   19d82:	0767      	lsls	r7, r4, #29
   19d84:	4307      	orrs	r7, r0
   19d86:	2080      	movs	r0, #128	; 0x80
   19d88:	08e4      	lsrs	r4, r4, #3
   19d8a:	0300      	lsls	r0, r0, #12
   19d8c:	4204      	tst	r4, r0
   19d8e:	d0e1      	beq.n	19d54 <__aeabi_dsub+0x558>
   19d90:	08cb      	lsrs	r3, r1, #3
   19d92:	4203      	tst	r3, r0
   19d94:	d1de      	bne.n	19d54 <__aeabi_dsub+0x558>
   19d96:	08d7      	lsrs	r7, r2, #3
   19d98:	0749      	lsls	r1, r1, #29
   19d9a:	430f      	orrs	r7, r1
   19d9c:	001c      	movs	r4, r3
   19d9e:	e7d9      	b.n	19d54 <__aeabi_dsub+0x558>
   19da0:	2100      	movs	r1, #0
   19da2:	e771      	b.n	19c88 <__aeabi_dsub+0x48c>
   19da4:	2500      	movs	r5, #0
   19da6:	2700      	movs	r7, #0
   19da8:	e5e9      	b.n	1997e <__aeabi_dsub+0x182>
   19daa:	002e      	movs	r6, r5
   19dac:	0027      	movs	r7, r4
   19dae:	3e20      	subs	r6, #32
   19db0:	40f7      	lsrs	r7, r6
   19db2:	2d20      	cmp	r5, #32
   19db4:	d02f      	beq.n	19e16 <__aeabi_dsub+0x61a>
   19db6:	2640      	movs	r6, #64	; 0x40
   19db8:	1b75      	subs	r5, r6, r5
   19dba:	40ac      	lsls	r4, r5
   19dbc:	4650      	mov	r0, sl
   19dbe:	4320      	orrs	r0, r4
   19dc0:	1e44      	subs	r4, r0, #1
   19dc2:	41a0      	sbcs	r0, r4
   19dc4:	2400      	movs	r4, #0
   19dc6:	4338      	orrs	r0, r7
   19dc8:	e6dc      	b.n	19b84 <__aeabi_dsub+0x388>
   19dca:	2480      	movs	r4, #128	; 0x80
   19dcc:	2500      	movs	r5, #0
   19dce:	0324      	lsls	r4, r4, #12
   19dd0:	4e13      	ldr	r6, [pc, #76]	; (19e20 <__aeabi_dsub+0x624>)
   19dd2:	2700      	movs	r7, #0
   19dd4:	e5d3      	b.n	1997e <__aeabi_dsub+0x182>
   19dd6:	4650      	mov	r0, sl
   19dd8:	4320      	orrs	r0, r4
   19dda:	0007      	movs	r7, r0
   19ddc:	1e78      	subs	r0, r7, #1
   19dde:	4187      	sbcs	r7, r0
   19de0:	2400      	movs	r4, #0
   19de2:	18bf      	adds	r7, r7, r2
   19de4:	e760      	b.n	19ca8 <__aeabi_dsub+0x4ac>
   19de6:	000c      	movs	r4, r1
   19de8:	0017      	movs	r7, r2
   19dea:	e58d      	b.n	19908 <__aeabi_dsub+0x10c>
   19dec:	000c      	movs	r4, r1
   19dee:	0017      	movs	r7, r2
   19df0:	4e0b      	ldr	r6, [pc, #44]	; (19e20 <__aeabi_dsub+0x624>)
   19df2:	e589      	b.n	19908 <__aeabi_dsub+0x10c>
   19df4:	001e      	movs	r6, r3
   19df6:	0027      	movs	r7, r4
   19df8:	3e20      	subs	r6, #32
   19dfa:	40f7      	lsrs	r7, r6
   19dfc:	2b20      	cmp	r3, #32
   19dfe:	d00c      	beq.n	19e1a <__aeabi_dsub+0x61e>
   19e00:	2640      	movs	r6, #64	; 0x40
   19e02:	1af3      	subs	r3, r6, r3
   19e04:	409c      	lsls	r4, r3
   19e06:	4650      	mov	r0, sl
   19e08:	4320      	orrs	r0, r4
   19e0a:	1e44      	subs	r4, r0, #1
   19e0c:	41a0      	sbcs	r0, r4
   19e0e:	4307      	orrs	r7, r0
   19e10:	2400      	movs	r4, #0
   19e12:	18bf      	adds	r7, r7, r2
   19e14:	e748      	b.n	19ca8 <__aeabi_dsub+0x4ac>
   19e16:	2400      	movs	r4, #0
   19e18:	e7d0      	b.n	19dbc <__aeabi_dsub+0x5c0>
   19e1a:	2400      	movs	r4, #0
   19e1c:	e7f3      	b.n	19e06 <__aeabi_dsub+0x60a>
   19e1e:	46c0      	nop			; (mov r8, r8)
   19e20:	000007ff 	.word	0x000007ff
   19e24:	ff7fffff 	.word	0xff7fffff

00019e28 <__aeabi_d2iz>:
   19e28:	b530      	push	{r4, r5, lr}
   19e2a:	4d13      	ldr	r5, [pc, #76]	; (19e78 <__aeabi_d2iz+0x50>)
   19e2c:	030a      	lsls	r2, r1, #12
   19e2e:	004b      	lsls	r3, r1, #1
   19e30:	0b12      	lsrs	r2, r2, #12
   19e32:	0d5b      	lsrs	r3, r3, #21
   19e34:	0fc9      	lsrs	r1, r1, #31
   19e36:	2400      	movs	r4, #0
   19e38:	42ab      	cmp	r3, r5
   19e3a:	dd10      	ble.n	19e5e <__aeabi_d2iz+0x36>
   19e3c:	4c0f      	ldr	r4, [pc, #60]	; (19e7c <__aeabi_d2iz+0x54>)
   19e3e:	42a3      	cmp	r3, r4
   19e40:	dc0f      	bgt.n	19e62 <__aeabi_d2iz+0x3a>
   19e42:	2480      	movs	r4, #128	; 0x80
   19e44:	4d0e      	ldr	r5, [pc, #56]	; (19e80 <__aeabi_d2iz+0x58>)
   19e46:	0364      	lsls	r4, r4, #13
   19e48:	4322      	orrs	r2, r4
   19e4a:	1aed      	subs	r5, r5, r3
   19e4c:	2d1f      	cmp	r5, #31
   19e4e:	dd0b      	ble.n	19e68 <__aeabi_d2iz+0x40>
   19e50:	480c      	ldr	r0, [pc, #48]	; (19e84 <__aeabi_d2iz+0x5c>)
   19e52:	1ac3      	subs	r3, r0, r3
   19e54:	40da      	lsrs	r2, r3
   19e56:	4254      	negs	r4, r2
   19e58:	2900      	cmp	r1, #0
   19e5a:	d100      	bne.n	19e5e <__aeabi_d2iz+0x36>
   19e5c:	0014      	movs	r4, r2
   19e5e:	0020      	movs	r0, r4
   19e60:	bd30      	pop	{r4, r5, pc}
   19e62:	4b09      	ldr	r3, [pc, #36]	; (19e88 <__aeabi_d2iz+0x60>)
   19e64:	18cc      	adds	r4, r1, r3
   19e66:	e7fa      	b.n	19e5e <__aeabi_d2iz+0x36>
   19e68:	4c08      	ldr	r4, [pc, #32]	; (19e8c <__aeabi_d2iz+0x64>)
   19e6a:	40e8      	lsrs	r0, r5
   19e6c:	46a4      	mov	ip, r4
   19e6e:	4463      	add	r3, ip
   19e70:	409a      	lsls	r2, r3
   19e72:	4302      	orrs	r2, r0
   19e74:	e7ef      	b.n	19e56 <__aeabi_d2iz+0x2e>
   19e76:	46c0      	nop			; (mov r8, r8)
   19e78:	000003fe 	.word	0x000003fe
   19e7c:	0000041d 	.word	0x0000041d
   19e80:	00000433 	.word	0x00000433
   19e84:	00000413 	.word	0x00000413
   19e88:	7fffffff 	.word	0x7fffffff
   19e8c:	fffffbed 	.word	0xfffffbed

00019e90 <__aeabi_i2d>:
   19e90:	b570      	push	{r4, r5, r6, lr}
   19e92:	2800      	cmp	r0, #0
   19e94:	d030      	beq.n	19ef8 <__aeabi_i2d+0x68>
   19e96:	17c3      	asrs	r3, r0, #31
   19e98:	18c4      	adds	r4, r0, r3
   19e9a:	405c      	eors	r4, r3
   19e9c:	0fc5      	lsrs	r5, r0, #31
   19e9e:	0020      	movs	r0, r4
   19ea0:	f000 f8c2 	bl	1a028 <__clzsi2>
   19ea4:	4b17      	ldr	r3, [pc, #92]	; (19f04 <__aeabi_i2d+0x74>)
   19ea6:	4a18      	ldr	r2, [pc, #96]	; (19f08 <__aeabi_i2d+0x78>)
   19ea8:	1a1b      	subs	r3, r3, r0
   19eaa:	1ad2      	subs	r2, r2, r3
   19eac:	2a1f      	cmp	r2, #31
   19eae:	dd18      	ble.n	19ee2 <__aeabi_i2d+0x52>
   19eb0:	4a16      	ldr	r2, [pc, #88]	; (19f0c <__aeabi_i2d+0x7c>)
   19eb2:	1ad2      	subs	r2, r2, r3
   19eb4:	4094      	lsls	r4, r2
   19eb6:	2200      	movs	r2, #0
   19eb8:	0324      	lsls	r4, r4, #12
   19eba:	055b      	lsls	r3, r3, #21
   19ebc:	0b24      	lsrs	r4, r4, #12
   19ebe:	0d5b      	lsrs	r3, r3, #21
   19ec0:	2100      	movs	r1, #0
   19ec2:	0010      	movs	r0, r2
   19ec4:	0324      	lsls	r4, r4, #12
   19ec6:	0d0a      	lsrs	r2, r1, #20
   19ec8:	0b24      	lsrs	r4, r4, #12
   19eca:	0512      	lsls	r2, r2, #20
   19ecc:	4322      	orrs	r2, r4
   19ece:	4c10      	ldr	r4, [pc, #64]	; (19f10 <__aeabi_i2d+0x80>)
   19ed0:	051b      	lsls	r3, r3, #20
   19ed2:	4022      	ands	r2, r4
   19ed4:	4313      	orrs	r3, r2
   19ed6:	005b      	lsls	r3, r3, #1
   19ed8:	07ed      	lsls	r5, r5, #31
   19eda:	085b      	lsrs	r3, r3, #1
   19edc:	432b      	orrs	r3, r5
   19ede:	0019      	movs	r1, r3
   19ee0:	bd70      	pop	{r4, r5, r6, pc}
   19ee2:	0021      	movs	r1, r4
   19ee4:	4091      	lsls	r1, r2
   19ee6:	000a      	movs	r2, r1
   19ee8:	210b      	movs	r1, #11
   19eea:	1a08      	subs	r0, r1, r0
   19eec:	40c4      	lsrs	r4, r0
   19eee:	055b      	lsls	r3, r3, #21
   19ef0:	0324      	lsls	r4, r4, #12
   19ef2:	0b24      	lsrs	r4, r4, #12
   19ef4:	0d5b      	lsrs	r3, r3, #21
   19ef6:	e7e3      	b.n	19ec0 <__aeabi_i2d+0x30>
   19ef8:	2500      	movs	r5, #0
   19efa:	2300      	movs	r3, #0
   19efc:	2400      	movs	r4, #0
   19efe:	2200      	movs	r2, #0
   19f00:	e7de      	b.n	19ec0 <__aeabi_i2d+0x30>
   19f02:	46c0      	nop			; (mov r8, r8)
   19f04:	0000041e 	.word	0x0000041e
   19f08:	00000433 	.word	0x00000433
   19f0c:	00000413 	.word	0x00000413
   19f10:	800fffff 	.word	0x800fffff

00019f14 <__aeabi_ui2d>:
   19f14:	b510      	push	{r4, lr}
   19f16:	1e04      	subs	r4, r0, #0
   19f18:	d028      	beq.n	19f6c <__aeabi_ui2d+0x58>
   19f1a:	f000 f885 	bl	1a028 <__clzsi2>
   19f1e:	4b15      	ldr	r3, [pc, #84]	; (19f74 <__aeabi_ui2d+0x60>)
   19f20:	4a15      	ldr	r2, [pc, #84]	; (19f78 <__aeabi_ui2d+0x64>)
   19f22:	1a1b      	subs	r3, r3, r0
   19f24:	1ad2      	subs	r2, r2, r3
   19f26:	2a1f      	cmp	r2, #31
   19f28:	dd15      	ble.n	19f56 <__aeabi_ui2d+0x42>
   19f2a:	4a14      	ldr	r2, [pc, #80]	; (19f7c <__aeabi_ui2d+0x68>)
   19f2c:	1ad2      	subs	r2, r2, r3
   19f2e:	4094      	lsls	r4, r2
   19f30:	2200      	movs	r2, #0
   19f32:	0324      	lsls	r4, r4, #12
   19f34:	055b      	lsls	r3, r3, #21
   19f36:	0b24      	lsrs	r4, r4, #12
   19f38:	0d5b      	lsrs	r3, r3, #21
   19f3a:	2100      	movs	r1, #0
   19f3c:	0010      	movs	r0, r2
   19f3e:	0324      	lsls	r4, r4, #12
   19f40:	0d0a      	lsrs	r2, r1, #20
   19f42:	0b24      	lsrs	r4, r4, #12
   19f44:	0512      	lsls	r2, r2, #20
   19f46:	4322      	orrs	r2, r4
   19f48:	4c0d      	ldr	r4, [pc, #52]	; (19f80 <__aeabi_ui2d+0x6c>)
   19f4a:	051b      	lsls	r3, r3, #20
   19f4c:	4022      	ands	r2, r4
   19f4e:	4313      	orrs	r3, r2
   19f50:	005b      	lsls	r3, r3, #1
   19f52:	0859      	lsrs	r1, r3, #1
   19f54:	bd10      	pop	{r4, pc}
   19f56:	0021      	movs	r1, r4
   19f58:	4091      	lsls	r1, r2
   19f5a:	000a      	movs	r2, r1
   19f5c:	210b      	movs	r1, #11
   19f5e:	1a08      	subs	r0, r1, r0
   19f60:	40c4      	lsrs	r4, r0
   19f62:	055b      	lsls	r3, r3, #21
   19f64:	0324      	lsls	r4, r4, #12
   19f66:	0b24      	lsrs	r4, r4, #12
   19f68:	0d5b      	lsrs	r3, r3, #21
   19f6a:	e7e6      	b.n	19f3a <__aeabi_ui2d+0x26>
   19f6c:	2300      	movs	r3, #0
   19f6e:	2400      	movs	r4, #0
   19f70:	2200      	movs	r2, #0
   19f72:	e7e2      	b.n	19f3a <__aeabi_ui2d+0x26>
   19f74:	0000041e 	.word	0x0000041e
   19f78:	00000433 	.word	0x00000433
   19f7c:	00000413 	.word	0x00000413
   19f80:	800fffff 	.word	0x800fffff

00019f84 <__aeabi_f2d>:
   19f84:	0041      	lsls	r1, r0, #1
   19f86:	0e09      	lsrs	r1, r1, #24
   19f88:	1c4b      	adds	r3, r1, #1
   19f8a:	b570      	push	{r4, r5, r6, lr}
   19f8c:	b2db      	uxtb	r3, r3
   19f8e:	0246      	lsls	r6, r0, #9
   19f90:	0a75      	lsrs	r5, r6, #9
   19f92:	0fc4      	lsrs	r4, r0, #31
   19f94:	2b01      	cmp	r3, #1
   19f96:	dd14      	ble.n	19fc2 <__aeabi_f2d+0x3e>
   19f98:	23e0      	movs	r3, #224	; 0xe0
   19f9a:	009b      	lsls	r3, r3, #2
   19f9c:	076d      	lsls	r5, r5, #29
   19f9e:	0b36      	lsrs	r6, r6, #12
   19fa0:	18cb      	adds	r3, r1, r3
   19fa2:	2100      	movs	r1, #0
   19fa4:	0d0a      	lsrs	r2, r1, #20
   19fa6:	0028      	movs	r0, r5
   19fa8:	0512      	lsls	r2, r2, #20
   19faa:	4d1c      	ldr	r5, [pc, #112]	; (1a01c <__aeabi_f2d+0x98>)
   19fac:	4332      	orrs	r2, r6
   19fae:	055b      	lsls	r3, r3, #21
   19fb0:	402a      	ands	r2, r5
   19fb2:	085b      	lsrs	r3, r3, #1
   19fb4:	4313      	orrs	r3, r2
   19fb6:	005b      	lsls	r3, r3, #1
   19fb8:	07e4      	lsls	r4, r4, #31
   19fba:	085b      	lsrs	r3, r3, #1
   19fbc:	4323      	orrs	r3, r4
   19fbe:	0019      	movs	r1, r3
   19fc0:	bd70      	pop	{r4, r5, r6, pc}
   19fc2:	2900      	cmp	r1, #0
   19fc4:	d114      	bne.n	19ff0 <__aeabi_f2d+0x6c>
   19fc6:	2d00      	cmp	r5, #0
   19fc8:	d01e      	beq.n	1a008 <__aeabi_f2d+0x84>
   19fca:	0028      	movs	r0, r5
   19fcc:	f000 f82c 	bl	1a028 <__clzsi2>
   19fd0:	280a      	cmp	r0, #10
   19fd2:	dc1c      	bgt.n	1a00e <__aeabi_f2d+0x8a>
   19fd4:	230b      	movs	r3, #11
   19fd6:	002a      	movs	r2, r5
   19fd8:	1a1b      	subs	r3, r3, r0
   19fda:	40da      	lsrs	r2, r3
   19fdc:	0003      	movs	r3, r0
   19fde:	3315      	adds	r3, #21
   19fe0:	409d      	lsls	r5, r3
   19fe2:	4b0f      	ldr	r3, [pc, #60]	; (1a020 <__aeabi_f2d+0x9c>)
   19fe4:	0312      	lsls	r2, r2, #12
   19fe6:	1a1b      	subs	r3, r3, r0
   19fe8:	055b      	lsls	r3, r3, #21
   19fea:	0b16      	lsrs	r6, r2, #12
   19fec:	0d5b      	lsrs	r3, r3, #21
   19fee:	e7d8      	b.n	19fa2 <__aeabi_f2d+0x1e>
   19ff0:	2d00      	cmp	r5, #0
   19ff2:	d006      	beq.n	1a002 <__aeabi_f2d+0x7e>
   19ff4:	0b32      	lsrs	r2, r6, #12
   19ff6:	2680      	movs	r6, #128	; 0x80
   19ff8:	0336      	lsls	r6, r6, #12
   19ffa:	076d      	lsls	r5, r5, #29
   19ffc:	4316      	orrs	r6, r2
   19ffe:	4b09      	ldr	r3, [pc, #36]	; (1a024 <__aeabi_f2d+0xa0>)
   1a000:	e7cf      	b.n	19fa2 <__aeabi_f2d+0x1e>
   1a002:	4b08      	ldr	r3, [pc, #32]	; (1a024 <__aeabi_f2d+0xa0>)
   1a004:	2600      	movs	r6, #0
   1a006:	e7cc      	b.n	19fa2 <__aeabi_f2d+0x1e>
   1a008:	2300      	movs	r3, #0
   1a00a:	2600      	movs	r6, #0
   1a00c:	e7c9      	b.n	19fa2 <__aeabi_f2d+0x1e>
   1a00e:	0003      	movs	r3, r0
   1a010:	002a      	movs	r2, r5
   1a012:	3b0b      	subs	r3, #11
   1a014:	409a      	lsls	r2, r3
   1a016:	2500      	movs	r5, #0
   1a018:	e7e3      	b.n	19fe2 <__aeabi_f2d+0x5e>
   1a01a:	46c0      	nop			; (mov r8, r8)
   1a01c:	800fffff 	.word	0x800fffff
   1a020:	00000389 	.word	0x00000389
   1a024:	000007ff 	.word	0x000007ff

0001a028 <__clzsi2>:
   1a028:	211c      	movs	r1, #28
   1a02a:	2301      	movs	r3, #1
   1a02c:	041b      	lsls	r3, r3, #16
   1a02e:	4298      	cmp	r0, r3
   1a030:	d301      	bcc.n	1a036 <__clzsi2+0xe>
   1a032:	0c00      	lsrs	r0, r0, #16
   1a034:	3910      	subs	r1, #16
   1a036:	0a1b      	lsrs	r3, r3, #8
   1a038:	4298      	cmp	r0, r3
   1a03a:	d301      	bcc.n	1a040 <__clzsi2+0x18>
   1a03c:	0a00      	lsrs	r0, r0, #8
   1a03e:	3908      	subs	r1, #8
   1a040:	091b      	lsrs	r3, r3, #4
   1a042:	4298      	cmp	r0, r3
   1a044:	d301      	bcc.n	1a04a <__clzsi2+0x22>
   1a046:	0900      	lsrs	r0, r0, #4
   1a048:	3904      	subs	r1, #4
   1a04a:	a202      	add	r2, pc, #8	; (adr r2, 1a054 <__clzsi2+0x2c>)
   1a04c:	5c10      	ldrb	r0, [r2, r0]
   1a04e:	1840      	adds	r0, r0, r1
   1a050:	4770      	bx	lr
   1a052:	46c0      	nop			; (mov r8, r8)
   1a054:	02020304 	.word	0x02020304
   1a058:	01010101 	.word	0x01010101
	...

0001a064 <__clzdi2>:
   1a064:	b510      	push	{r4, lr}
   1a066:	2900      	cmp	r1, #0
   1a068:	d103      	bne.n	1a072 <__clzdi2+0xe>
   1a06a:	f7ff ffdd 	bl	1a028 <__clzsi2>
   1a06e:	3020      	adds	r0, #32
   1a070:	e002      	b.n	1a078 <__clzdi2+0x14>
   1a072:	1c08      	adds	r0, r1, #0
   1a074:	f7ff ffd8 	bl	1a028 <__clzsi2>
   1a078:	bd10      	pop	{r4, pc}
   1a07a:	46c0      	nop			; (mov r8, r8)

0001a07c <ffs>:
   1a07c:	b510      	push	{r4, lr}
   1a07e:	2200      	movs	r2, #0
   1a080:	2800      	cmp	r0, #0
   1a082:	d007      	beq.n	1a094 <ffs+0x18>
   1a084:	2300      	movs	r3, #0
   1a086:	2401      	movs	r4, #1
   1a088:	0001      	movs	r1, r0
   1a08a:	4119      	asrs	r1, r3
   1a08c:	1c5a      	adds	r2, r3, #1
   1a08e:	0013      	movs	r3, r2
   1a090:	420c      	tst	r4, r1
   1a092:	d0f9      	beq.n	1a088 <ffs+0xc>
   1a094:	0010      	movs	r0, r2
   1a096:	bd10      	pop	{r4, pc}

0001a098 <__libc_init_array>:
   1a098:	b570      	push	{r4, r5, r6, lr}
   1a09a:	4e0d      	ldr	r6, [pc, #52]	; (1a0d0 <__libc_init_array+0x38>)
   1a09c:	4d0d      	ldr	r5, [pc, #52]	; (1a0d4 <__libc_init_array+0x3c>)
   1a09e:	2400      	movs	r4, #0
   1a0a0:	1bad      	subs	r5, r5, r6
   1a0a2:	10ad      	asrs	r5, r5, #2
   1a0a4:	d005      	beq.n	1a0b2 <__libc_init_array+0x1a>
   1a0a6:	00a3      	lsls	r3, r4, #2
   1a0a8:	58f3      	ldr	r3, [r6, r3]
   1a0aa:	3401      	adds	r4, #1
   1a0ac:	4798      	blx	r3
   1a0ae:	42a5      	cmp	r5, r4
   1a0b0:	d1f9      	bne.n	1a0a6 <__libc_init_array+0xe>
   1a0b2:	f006 fa81 	bl	205b8 <_init>
   1a0b6:	4e08      	ldr	r6, [pc, #32]	; (1a0d8 <__libc_init_array+0x40>)
   1a0b8:	4d08      	ldr	r5, [pc, #32]	; (1a0dc <__libc_init_array+0x44>)
   1a0ba:	2400      	movs	r4, #0
   1a0bc:	1bad      	subs	r5, r5, r6
   1a0be:	10ad      	asrs	r5, r5, #2
   1a0c0:	d005      	beq.n	1a0ce <__libc_init_array+0x36>
   1a0c2:	00a3      	lsls	r3, r4, #2
   1a0c4:	58f3      	ldr	r3, [r6, r3]
   1a0c6:	3401      	adds	r4, #1
   1a0c8:	4798      	blx	r3
   1a0ca:	42a5      	cmp	r5, r4
   1a0cc:	d1f9      	bne.n	1a0c2 <__libc_init_array+0x2a>
   1a0ce:	bd70      	pop	{r4, r5, r6, pc}
   1a0d0:	000205c4 	.word	0x000205c4
   1a0d4:	000205c4 	.word	0x000205c4
   1a0d8:	000205c4 	.word	0x000205c4
   1a0dc:	000205cc 	.word	0x000205cc

0001a0e0 <memset>:
   1a0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0e2:	0783      	lsls	r3, r0, #30
   1a0e4:	d043      	beq.n	1a16e <memset+0x8e>
   1a0e6:	1e54      	subs	r4, r2, #1
   1a0e8:	2a00      	cmp	r2, #0
   1a0ea:	d03f      	beq.n	1a16c <memset+0x8c>
   1a0ec:	b2ce      	uxtb	r6, r1
   1a0ee:	0002      	movs	r2, r0
   1a0f0:	2503      	movs	r5, #3
   1a0f2:	e002      	b.n	1a0fa <memset+0x1a>
   1a0f4:	001a      	movs	r2, r3
   1a0f6:	3c01      	subs	r4, #1
   1a0f8:	d338      	bcc.n	1a16c <memset+0x8c>
   1a0fa:	1c53      	adds	r3, r2, #1
   1a0fc:	7016      	strb	r6, [r2, #0]
   1a0fe:	422b      	tst	r3, r5
   1a100:	d1f8      	bne.n	1a0f4 <memset+0x14>
   1a102:	2c03      	cmp	r4, #3
   1a104:	d92a      	bls.n	1a15c <memset+0x7c>
   1a106:	22ff      	movs	r2, #255	; 0xff
   1a108:	400a      	ands	r2, r1
   1a10a:	0215      	lsls	r5, r2, #8
   1a10c:	4315      	orrs	r5, r2
   1a10e:	042a      	lsls	r2, r5, #16
   1a110:	4315      	orrs	r5, r2
   1a112:	2c0f      	cmp	r4, #15
   1a114:	d914      	bls.n	1a140 <memset+0x60>
   1a116:	0027      	movs	r7, r4
   1a118:	001a      	movs	r2, r3
   1a11a:	3f10      	subs	r7, #16
   1a11c:	093e      	lsrs	r6, r7, #4
   1a11e:	3601      	adds	r6, #1
   1a120:	0136      	lsls	r6, r6, #4
   1a122:	199e      	adds	r6, r3, r6
   1a124:	6015      	str	r5, [r2, #0]
   1a126:	6055      	str	r5, [r2, #4]
   1a128:	6095      	str	r5, [r2, #8]
   1a12a:	60d5      	str	r5, [r2, #12]
   1a12c:	3210      	adds	r2, #16
   1a12e:	4296      	cmp	r6, r2
   1a130:	d1f8      	bne.n	1a124 <memset+0x44>
   1a132:	220f      	movs	r2, #15
   1a134:	4397      	bics	r7, r2
   1a136:	3710      	adds	r7, #16
   1a138:	19db      	adds	r3, r3, r7
   1a13a:	4014      	ands	r4, r2
   1a13c:	2c03      	cmp	r4, #3
   1a13e:	d90d      	bls.n	1a15c <memset+0x7c>
   1a140:	001a      	movs	r2, r3
   1a142:	1f27      	subs	r7, r4, #4
   1a144:	08be      	lsrs	r6, r7, #2
   1a146:	3601      	adds	r6, #1
   1a148:	00b6      	lsls	r6, r6, #2
   1a14a:	199e      	adds	r6, r3, r6
   1a14c:	c220      	stmia	r2!, {r5}
   1a14e:	42b2      	cmp	r2, r6
   1a150:	d1fc      	bne.n	1a14c <memset+0x6c>
   1a152:	2203      	movs	r2, #3
   1a154:	4397      	bics	r7, r2
   1a156:	3704      	adds	r7, #4
   1a158:	19db      	adds	r3, r3, r7
   1a15a:	4014      	ands	r4, r2
   1a15c:	2c00      	cmp	r4, #0
   1a15e:	d005      	beq.n	1a16c <memset+0x8c>
   1a160:	b2c9      	uxtb	r1, r1
   1a162:	191c      	adds	r4, r3, r4
   1a164:	7019      	strb	r1, [r3, #0]
   1a166:	3301      	adds	r3, #1
   1a168:	429c      	cmp	r4, r3
   1a16a:	d1fb      	bne.n	1a164 <memset+0x84>
   1a16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a16e:	0014      	movs	r4, r2
   1a170:	0003      	movs	r3, r0
   1a172:	e7c6      	b.n	1a102 <memset+0x22>

0001a174 <printf>:
   1a174:	b40f      	push	{r0, r1, r2, r3}
   1a176:	b500      	push	{lr}
   1a178:	4906      	ldr	r1, [pc, #24]	; (1a194 <printf+0x20>)
   1a17a:	b083      	sub	sp, #12
   1a17c:	ab04      	add	r3, sp, #16
   1a17e:	6808      	ldr	r0, [r1, #0]
   1a180:	cb04      	ldmia	r3!, {r2}
   1a182:	6881      	ldr	r1, [r0, #8]
   1a184:	9301      	str	r3, [sp, #4]
   1a186:	f000 f893 	bl	1a2b0 <_vfprintf_r>
   1a18a:	b003      	add	sp, #12
   1a18c:	bc08      	pop	{r3}
   1a18e:	b004      	add	sp, #16
   1a190:	4718      	bx	r3
   1a192:	46c0      	nop			; (mov r8, r8)
   1a194:	20000148 	.word	0x20000148

0001a198 <_puts_r>:
   1a198:	b530      	push	{r4, r5, lr}
   1a19a:	0004      	movs	r4, r0
   1a19c:	b089      	sub	sp, #36	; 0x24
   1a19e:	0008      	movs	r0, r1
   1a1a0:	000d      	movs	r5, r1
   1a1a2:	f000 f853 	bl	1a24c <strlen>
   1a1a6:	ab04      	add	r3, sp, #16
   1a1a8:	4a21      	ldr	r2, [pc, #132]	; (1a230 <_puts_r+0x98>)
   1a1aa:	9301      	str	r3, [sp, #4]
   1a1ac:	2302      	movs	r3, #2
   1a1ae:	9206      	str	r2, [sp, #24]
   1a1b0:	2201      	movs	r2, #1
   1a1b2:	9302      	str	r3, [sp, #8]
   1a1b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a1b6:	9005      	str	r0, [sp, #20]
   1a1b8:	3001      	adds	r0, #1
   1a1ba:	9504      	str	r5, [sp, #16]
   1a1bc:	9207      	str	r2, [sp, #28]
   1a1be:	9003      	str	r0, [sp, #12]
   1a1c0:	68a5      	ldr	r5, [r4, #8]
   1a1c2:	2b00      	cmp	r3, #0
   1a1c4:	d02f      	beq.n	1a226 <_puts_r+0x8e>
   1a1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a1c8:	07db      	lsls	r3, r3, #31
   1a1ca:	d424      	bmi.n	1a216 <_puts_r+0x7e>
   1a1cc:	230c      	movs	r3, #12
   1a1ce:	5eea      	ldrsh	r2, [r5, r3]
   1a1d0:	b291      	uxth	r1, r2
   1a1d2:	058b      	lsls	r3, r1, #22
   1a1d4:	d51c      	bpl.n	1a210 <_puts_r+0x78>
   1a1d6:	2380      	movs	r3, #128	; 0x80
   1a1d8:	019b      	lsls	r3, r3, #6
   1a1da:	4219      	tst	r1, r3
   1a1dc:	d105      	bne.n	1a1ea <_puts_r+0x52>
   1a1de:	4313      	orrs	r3, r2
   1a1e0:	81ab      	strh	r3, [r5, #12]
   1a1e2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   1a1e4:	4b13      	ldr	r3, [pc, #76]	; (1a234 <_puts_r+0x9c>)
   1a1e6:	4013      	ands	r3, r2
   1a1e8:	666b      	str	r3, [r5, #100]	; 0x64
   1a1ea:	0020      	movs	r0, r4
   1a1ec:	aa01      	add	r2, sp, #4
   1a1ee:	0029      	movs	r1, r5
   1a1f0:	f002 ff84 	bl	1d0fc <__sfvwrite_r>
   1a1f4:	1e44      	subs	r4, r0, #1
   1a1f6:	41a0      	sbcs	r0, r4
   1a1f8:	4244      	negs	r4, r0
   1a1fa:	200a      	movs	r0, #10
   1a1fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a1fe:	4304      	orrs	r4, r0
   1a200:	07db      	lsls	r3, r3, #31
   1a202:	d402      	bmi.n	1a20a <_puts_r+0x72>
   1a204:	89ab      	ldrh	r3, [r5, #12]
   1a206:	059b      	lsls	r3, r3, #22
   1a208:	d509      	bpl.n	1a21e <_puts_r+0x86>
   1a20a:	0020      	movs	r0, r4
   1a20c:	b009      	add	sp, #36	; 0x24
   1a20e:	bd30      	pop	{r4, r5, pc}
   1a210:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a212:	f003 f93d 	bl	1d490 <__retarget_lock_acquire_recursive>
   1a216:	230c      	movs	r3, #12
   1a218:	5eea      	ldrsh	r2, [r5, r3]
   1a21a:	b291      	uxth	r1, r2
   1a21c:	e7db      	b.n	1a1d6 <_puts_r+0x3e>
   1a21e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a220:	f003 f938 	bl	1d494 <__retarget_lock_release_recursive>
   1a224:	e7f1      	b.n	1a20a <_puts_r+0x72>
   1a226:	0020      	movs	r0, r4
   1a228:	f002 fde0 	bl	1cdec <__sinit>
   1a22c:	e7cb      	b.n	1a1c6 <_puts_r+0x2e>
   1a22e:	46c0      	nop			; (mov r8, r8)
   1a230:	000201cc 	.word	0x000201cc
   1a234:	ffffdfff 	.word	0xffffdfff

0001a238 <puts>:
   1a238:	b510      	push	{r4, lr}
   1a23a:	4b03      	ldr	r3, [pc, #12]	; (1a248 <puts+0x10>)
   1a23c:	0001      	movs	r1, r0
   1a23e:	6818      	ldr	r0, [r3, #0]
   1a240:	f7ff ffaa 	bl	1a198 <_puts_r>
   1a244:	bd10      	pop	{r4, pc}
   1a246:	46c0      	nop			; (mov r8, r8)
   1a248:	20000148 	.word	0x20000148

0001a24c <strlen>:
   1a24c:	b510      	push	{r4, lr}
   1a24e:	0783      	lsls	r3, r0, #30
   1a250:	d025      	beq.n	1a29e <strlen+0x52>
   1a252:	7803      	ldrb	r3, [r0, #0]
   1a254:	2b00      	cmp	r3, #0
   1a256:	d024      	beq.n	1a2a2 <strlen+0x56>
   1a258:	0003      	movs	r3, r0
   1a25a:	2103      	movs	r1, #3
   1a25c:	e002      	b.n	1a264 <strlen+0x18>
   1a25e:	781a      	ldrb	r2, [r3, #0]
   1a260:	2a00      	cmp	r2, #0
   1a262:	d01a      	beq.n	1a29a <strlen+0x4e>
   1a264:	3301      	adds	r3, #1
   1a266:	420b      	tst	r3, r1
   1a268:	d1f9      	bne.n	1a25e <strlen+0x12>
   1a26a:	6819      	ldr	r1, [r3, #0]
   1a26c:	4a0e      	ldr	r2, [pc, #56]	; (1a2a8 <strlen+0x5c>)
   1a26e:	4c0f      	ldr	r4, [pc, #60]	; (1a2ac <strlen+0x60>)
   1a270:	188a      	adds	r2, r1, r2
   1a272:	438a      	bics	r2, r1
   1a274:	4222      	tst	r2, r4
   1a276:	d106      	bne.n	1a286 <strlen+0x3a>
   1a278:	3304      	adds	r3, #4
   1a27a:	6819      	ldr	r1, [r3, #0]
   1a27c:	4a0a      	ldr	r2, [pc, #40]	; (1a2a8 <strlen+0x5c>)
   1a27e:	188a      	adds	r2, r1, r2
   1a280:	438a      	bics	r2, r1
   1a282:	4222      	tst	r2, r4
   1a284:	d0f8      	beq.n	1a278 <strlen+0x2c>
   1a286:	001a      	movs	r2, r3
   1a288:	781b      	ldrb	r3, [r3, #0]
   1a28a:	2b00      	cmp	r3, #0
   1a28c:	d003      	beq.n	1a296 <strlen+0x4a>
   1a28e:	3201      	adds	r2, #1
   1a290:	7811      	ldrb	r1, [r2, #0]
   1a292:	2900      	cmp	r1, #0
   1a294:	d1fb      	bne.n	1a28e <strlen+0x42>
   1a296:	1a10      	subs	r0, r2, r0
   1a298:	bd10      	pop	{r4, pc}
   1a29a:	1a18      	subs	r0, r3, r0
   1a29c:	e7fc      	b.n	1a298 <strlen+0x4c>
   1a29e:	0003      	movs	r3, r0
   1a2a0:	e7e3      	b.n	1a26a <strlen+0x1e>
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	e7f8      	b.n	1a298 <strlen+0x4c>
   1a2a6:	46c0      	nop			; (mov r8, r8)
   1a2a8:	fefefeff 	.word	0xfefefeff
   1a2ac:	80808080 	.word	0x80808080

0001a2b0 <_vfprintf_r>:
   1a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2b2:	46de      	mov	lr, fp
   1a2b4:	464e      	mov	r6, r9
   1a2b6:	4645      	mov	r5, r8
   1a2b8:	4657      	mov	r7, sl
   1a2ba:	b5e0      	push	{r5, r6, r7, lr}
   1a2bc:	b0c3      	sub	sp, #268	; 0x10c
   1a2be:	4689      	mov	r9, r1
   1a2c0:	0014      	movs	r4, r2
   1a2c2:	001d      	movs	r5, r3
   1a2c4:	930f      	str	r3, [sp, #60]	; 0x3c
   1a2c6:	0006      	movs	r6, r0
   1a2c8:	9006      	str	r0, [sp, #24]
   1a2ca:	f003 f8cf 	bl	1d46c <_localeconv_r>
   1a2ce:	6803      	ldr	r3, [r0, #0]
   1a2d0:	0018      	movs	r0, r3
   1a2d2:	9318      	str	r3, [sp, #96]	; 0x60
   1a2d4:	f7ff ffba 	bl	1a24c <strlen>
   1a2d8:	9017      	str	r0, [sp, #92]	; 0x5c
   1a2da:	2e00      	cmp	r6, #0
   1a2dc:	d004      	beq.n	1a2e8 <_vfprintf_r+0x38>
   1a2de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a2e0:	9307      	str	r3, [sp, #28]
   1a2e2:	2b00      	cmp	r3, #0
   1a2e4:	d100      	bne.n	1a2e8 <_vfprintf_r+0x38>
   1a2e6:	e0a7      	b.n	1a438 <_vfprintf_r+0x188>
   1a2e8:	464b      	mov	r3, r9
   1a2ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a2ec:	07db      	lsls	r3, r3, #31
   1a2ee:	d478      	bmi.n	1a3e2 <_vfprintf_r+0x132>
   1a2f0:	464b      	mov	r3, r9
   1a2f2:	210c      	movs	r1, #12
   1a2f4:	5e59      	ldrsh	r1, [r3, r1]
   1a2f6:	b28b      	uxth	r3, r1
   1a2f8:	059a      	lsls	r2, r3, #22
   1a2fa:	d56e      	bpl.n	1a3da <_vfprintf_r+0x12a>
   1a2fc:	2280      	movs	r2, #128	; 0x80
   1a2fe:	0192      	lsls	r2, r2, #6
   1a300:	4213      	tst	r3, r2
   1a302:	d109      	bne.n	1a318 <_vfprintf_r+0x68>
   1a304:	430a      	orrs	r2, r1
   1a306:	464b      	mov	r3, r9
   1a308:	4649      	mov	r1, r9
   1a30a:	819a      	strh	r2, [r3, #12]
   1a30c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1a30e:	4bcc      	ldr	r3, [pc, #816]	; (1a640 <_vfprintf_r+0x390>)
   1a310:	400b      	ands	r3, r1
   1a312:	4649      	mov	r1, r9
   1a314:	664b      	str	r3, [r1, #100]	; 0x64
   1a316:	b293      	uxth	r3, r2
   1a318:	071a      	lsls	r2, r3, #28
   1a31a:	d567      	bpl.n	1a3ec <_vfprintf_r+0x13c>
   1a31c:	464a      	mov	r2, r9
   1a31e:	6912      	ldr	r2, [r2, #16]
   1a320:	2a00      	cmp	r2, #0
   1a322:	d063      	beq.n	1a3ec <_vfprintf_r+0x13c>
   1a324:	221a      	movs	r2, #26
   1a326:	401a      	ands	r2, r3
   1a328:	2a0a      	cmp	r2, #10
   1a32a:	d100      	bne.n	1a32e <_vfprintf_r+0x7e>
   1a32c:	e088      	b.n	1a440 <_vfprintf_r+0x190>
   1a32e:	ab32      	add	r3, sp, #200	; 0xc8
   1a330:	9325      	str	r3, [sp, #148]	; 0x94
   1a332:	2300      	movs	r3, #0
   1a334:	46cb      	mov	fp, r9
   1a336:	af25      	add	r7, sp, #148	; 0x94
   1a338:	60bb      	str	r3, [r7, #8]
   1a33a:	607b      	str	r3, [r7, #4]
   1a33c:	9407      	str	r4, [sp, #28]
   1a33e:	9314      	str	r3, [sp, #80]	; 0x50
   1a340:	9316      	str	r3, [sp, #88]	; 0x58
   1a342:	9315      	str	r3, [sp, #84]	; 0x54
   1a344:	ae32      	add	r6, sp, #200	; 0xc8
   1a346:	9319      	str	r3, [sp, #100]	; 0x64
   1a348:	931a      	str	r3, [sp, #104]	; 0x68
   1a34a:	930a      	str	r3, [sp, #40]	; 0x28
   1a34c:	9c07      	ldr	r4, [sp, #28]
   1a34e:	7823      	ldrb	r3, [r4, #0]
   1a350:	2b00      	cmp	r3, #0
   1a352:	d101      	bne.n	1a358 <_vfprintf_r+0xa8>
   1a354:	f000 fd9e 	bl	1ae94 <_vfprintf_r+0xbe4>
   1a358:	2b25      	cmp	r3, #37	; 0x25
   1a35a:	d103      	bne.n	1a364 <_vfprintf_r+0xb4>
   1a35c:	f000 fd9a 	bl	1ae94 <_vfprintf_r+0xbe4>
   1a360:	2b25      	cmp	r3, #37	; 0x25
   1a362:	d003      	beq.n	1a36c <_vfprintf_r+0xbc>
   1a364:	3401      	adds	r4, #1
   1a366:	7823      	ldrb	r3, [r4, #0]
   1a368:	2b00      	cmp	r3, #0
   1a36a:	d1f9      	bne.n	1a360 <_vfprintf_r+0xb0>
   1a36c:	9b07      	ldr	r3, [sp, #28]
   1a36e:	1ae5      	subs	r5, r4, r3
   1a370:	d010      	beq.n	1a394 <_vfprintf_r+0xe4>
   1a372:	9b07      	ldr	r3, [sp, #28]
   1a374:	6075      	str	r5, [r6, #4]
   1a376:	6033      	str	r3, [r6, #0]
   1a378:	68bb      	ldr	r3, [r7, #8]
   1a37a:	195b      	adds	r3, r3, r5
   1a37c:	60bb      	str	r3, [r7, #8]
   1a37e:	687b      	ldr	r3, [r7, #4]
   1a380:	3301      	adds	r3, #1
   1a382:	607b      	str	r3, [r7, #4]
   1a384:	2b07      	cmp	r3, #7
   1a386:	dc4c      	bgt.n	1a422 <_vfprintf_r+0x172>
   1a388:	3608      	adds	r6, #8
   1a38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a38c:	469c      	mov	ip, r3
   1a38e:	44ac      	add	ip, r5
   1a390:	4663      	mov	r3, ip
   1a392:	930a      	str	r3, [sp, #40]	; 0x28
   1a394:	7823      	ldrb	r3, [r4, #0]
   1a396:	2b00      	cmp	r3, #0
   1a398:	d101      	bne.n	1a39e <_vfprintf_r+0xee>
   1a39a:	f000 fc99 	bl	1acd0 <_vfprintf_r+0xa20>
   1a39e:	1c63      	adds	r3, r4, #1
   1a3a0:	9307      	str	r3, [sp, #28]
   1a3a2:	2300      	movs	r3, #0
   1a3a4:	aa16      	add	r2, sp, #88	; 0x58
   1a3a6:	77d3      	strb	r3, [r2, #31]
   1a3a8:	2201      	movs	r2, #1
   1a3aa:	4252      	negs	r2, r2
   1a3ac:	4692      	mov	sl, r2
   1a3ae:	2200      	movs	r2, #0
   1a3b0:	920b      	str	r2, [sp, #44]	; 0x2c
   1a3b2:	3220      	adds	r2, #32
   1a3b4:	4691      	mov	r9, r2
   1a3b6:	3220      	adds	r2, #32
   1a3b8:	7863      	ldrb	r3, [r4, #1]
   1a3ba:	2100      	movs	r1, #0
   1a3bc:	2000      	movs	r0, #0
   1a3be:	2400      	movs	r4, #0
   1a3c0:	4694      	mov	ip, r2
   1a3c2:	9a07      	ldr	r2, [sp, #28]
   1a3c4:	3201      	adds	r2, #1
   1a3c6:	9207      	str	r2, [sp, #28]
   1a3c8:	001a      	movs	r2, r3
   1a3ca:	3a20      	subs	r2, #32
   1a3cc:	2a58      	cmp	r2, #88	; 0x58
   1a3ce:	d900      	bls.n	1a3d2 <_vfprintf_r+0x122>
   1a3d0:	e2e7      	b.n	1a9a2 <_vfprintf_r+0x6f2>
   1a3d2:	4d9c      	ldr	r5, [pc, #624]	; (1a644 <_vfprintf_r+0x394>)
   1a3d4:	0092      	lsls	r2, r2, #2
   1a3d6:	58aa      	ldr	r2, [r5, r2]
   1a3d8:	4697      	mov	pc, r2
   1a3da:	464b      	mov	r3, r9
   1a3dc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a3de:	f003 f857 	bl	1d490 <__retarget_lock_acquire_recursive>
   1a3e2:	464b      	mov	r3, r9
   1a3e4:	210c      	movs	r1, #12
   1a3e6:	5e59      	ldrsh	r1, [r3, r1]
   1a3e8:	b28b      	uxth	r3, r1
   1a3ea:	e787      	b.n	1a2fc <_vfprintf_r+0x4c>
   1a3ec:	4649      	mov	r1, r9
   1a3ee:	9806      	ldr	r0, [sp, #24]
   1a3f0:	f001 fb0e 	bl	1ba10 <__swsetup_r>
   1a3f4:	464b      	mov	r3, r9
   1a3f6:	2800      	cmp	r0, #0
   1a3f8:	d03a      	beq.n	1a470 <_vfprintf_r+0x1c0>
   1a3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a3fc:	07db      	lsls	r3, r3, #31
   1a3fe:	d405      	bmi.n	1a40c <_vfprintf_r+0x15c>
   1a400:	464b      	mov	r3, r9
   1a402:	899b      	ldrh	r3, [r3, #12]
   1a404:	059b      	lsls	r3, r3, #22
   1a406:	d401      	bmi.n	1a40c <_vfprintf_r+0x15c>
   1a408:	f000 ffcf 	bl	1b3aa <_vfprintf_r+0x10fa>
   1a40c:	2301      	movs	r3, #1
   1a40e:	425b      	negs	r3, r3
   1a410:	930a      	str	r3, [sp, #40]	; 0x28
   1a412:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a414:	b043      	add	sp, #268	; 0x10c
   1a416:	bc3c      	pop	{r2, r3, r4, r5}
   1a418:	4690      	mov	r8, r2
   1a41a:	4699      	mov	r9, r3
   1a41c:	46a2      	mov	sl, r4
   1a41e:	46ab      	mov	fp, r5
   1a420:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a422:	003a      	movs	r2, r7
   1a424:	4659      	mov	r1, fp
   1a426:	9806      	ldr	r0, [sp, #24]
   1a428:	f004 fa02 	bl	1e830 <__sprint_r>
   1a42c:	2800      	cmp	r0, #0
   1a42e:	d001      	beq.n	1a434 <_vfprintf_r+0x184>
   1a430:	f000 fcce 	bl	1add0 <_vfprintf_r+0xb20>
   1a434:	ae32      	add	r6, sp, #200	; 0xc8
   1a436:	e7a8      	b.n	1a38a <_vfprintf_r+0xda>
   1a438:	9806      	ldr	r0, [sp, #24]
   1a43a:	f002 fcd7 	bl	1cdec <__sinit>
   1a43e:	e753      	b.n	1a2e8 <_vfprintf_r+0x38>
   1a440:	464a      	mov	r2, r9
   1a442:	210e      	movs	r1, #14
   1a444:	5e52      	ldrsh	r2, [r2, r1]
   1a446:	2a00      	cmp	r2, #0
   1a448:	da00      	bge.n	1a44c <_vfprintf_r+0x19c>
   1a44a:	e770      	b.n	1a32e <_vfprintf_r+0x7e>
   1a44c:	464a      	mov	r2, r9
   1a44e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1a450:	07d2      	lsls	r2, r2, #31
   1a452:	d405      	bmi.n	1a460 <_vfprintf_r+0x1b0>
   1a454:	059b      	lsls	r3, r3, #22
   1a456:	d403      	bmi.n	1a460 <_vfprintf_r+0x1b0>
   1a458:	464b      	mov	r3, r9
   1a45a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a45c:	f003 f81a 	bl	1d494 <__retarget_lock_release_recursive>
   1a460:	002b      	movs	r3, r5
   1a462:	0022      	movs	r2, r4
   1a464:	4649      	mov	r1, r9
   1a466:	9806      	ldr	r0, [sp, #24]
   1a468:	f001 fa8e 	bl	1b988 <__sbprintf>
   1a46c:	900a      	str	r0, [sp, #40]	; 0x28
   1a46e:	e7d0      	b.n	1a412 <_vfprintf_r+0x162>
   1a470:	899b      	ldrh	r3, [r3, #12]
   1a472:	e757      	b.n	1a324 <_vfprintf_r+0x74>
   1a474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a476:	920f      	str	r2, [sp, #60]	; 0x3c
   1a478:	425b      	negs	r3, r3
   1a47a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a47c:	2304      	movs	r3, #4
   1a47e:	431c      	orrs	r4, r3
   1a480:	9b07      	ldr	r3, [sp, #28]
   1a482:	781b      	ldrb	r3, [r3, #0]
   1a484:	e79d      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a486:	9b07      	ldr	r3, [sp, #28]
   1a488:	2101      	movs	r1, #1
   1a48a:	781b      	ldrb	r3, [r3, #0]
   1a48c:	202b      	movs	r0, #43	; 0x2b
   1a48e:	e798      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a490:	9b07      	ldr	r3, [sp, #28]
   1a492:	1c5a      	adds	r2, r3, #1
   1a494:	781b      	ldrb	r3, [r3, #0]
   1a496:	4690      	mov	r8, r2
   1a498:	2b2a      	cmp	r3, #42	; 0x2a
   1a49a:	d101      	bne.n	1a4a0 <_vfprintf_r+0x1f0>
   1a49c:	f001 fa38 	bl	1b910 <_vfprintf_r+0x1660>
   1a4a0:	001a      	movs	r2, r3
   1a4a2:	2500      	movs	r5, #0
   1a4a4:	3a30      	subs	r2, #48	; 0x30
   1a4a6:	46aa      	mov	sl, r5
   1a4a8:	2a09      	cmp	r2, #9
   1a4aa:	d901      	bls.n	1a4b0 <_vfprintf_r+0x200>
   1a4ac:	f001 f96d 	bl	1b78a <_vfprintf_r+0x14da>
   1a4b0:	0025      	movs	r5, r4
   1a4b2:	4643      	mov	r3, r8
   1a4b4:	4654      	mov	r4, sl
   1a4b6:	4688      	mov	r8, r1
   1a4b8:	4682      	mov	sl, r0
   1a4ba:	00a1      	lsls	r1, r4, #2
   1a4bc:	190c      	adds	r4, r1, r4
   1a4be:	7818      	ldrb	r0, [r3, #0]
   1a4c0:	0064      	lsls	r4, r4, #1
   1a4c2:	18a4      	adds	r4, r4, r2
   1a4c4:	0002      	movs	r2, r0
   1a4c6:	1c59      	adds	r1, r3, #1
   1a4c8:	3a30      	subs	r2, #48	; 0x30
   1a4ca:	000b      	movs	r3, r1
   1a4cc:	2a09      	cmp	r2, #9
   1a4ce:	d9f4      	bls.n	1a4ba <_vfprintf_r+0x20a>
   1a4d0:	9107      	str	r1, [sp, #28]
   1a4d2:	0003      	movs	r3, r0
   1a4d4:	4641      	mov	r1, r8
   1a4d6:	4650      	mov	r0, sl
   1a4d8:	46a2      	mov	sl, r4
   1a4da:	002c      	movs	r4, r5
   1a4dc:	e774      	b.n	1a3c8 <_vfprintf_r+0x118>
   1a4de:	9312      	str	r3, [sp, #72]	; 0x48
   1a4e0:	2900      	cmp	r1, #0
   1a4e2:	d001      	beq.n	1a4e8 <_vfprintf_r+0x238>
   1a4e4:	f001 fa2e 	bl	1b944 <_vfprintf_r+0x1694>
   1a4e8:	4b57      	ldr	r3, [pc, #348]	; (1a648 <_vfprintf_r+0x398>)
   1a4ea:	9319      	str	r3, [sp, #100]	; 0x64
   1a4ec:	06a3      	lsls	r3, r4, #26
   1a4ee:	d501      	bpl.n	1a4f4 <_vfprintf_r+0x244>
   1a4f0:	f000 fe9a 	bl	1b228 <_vfprintf_r+0xf78>
   1a4f4:	06e3      	lsls	r3, r4, #27
   1a4f6:	d501      	bpl.n	1a4fc <_vfprintf_r+0x24c>
   1a4f8:	f000 fd9a 	bl	1b030 <_vfprintf_r+0xd80>
   1a4fc:	0663      	lsls	r3, r4, #25
   1a4fe:	d401      	bmi.n	1a504 <_vfprintf_r+0x254>
   1a500:	f000 fd96 	bl	1b030 <_vfprintf_r+0xd80>
   1a504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a506:	881a      	ldrh	r2, [r3, #0]
   1a508:	920c      	str	r2, [sp, #48]	; 0x30
   1a50a:	2200      	movs	r2, #0
   1a50c:	3304      	adds	r3, #4
   1a50e:	920d      	str	r2, [sp, #52]	; 0x34
   1a510:	930f      	str	r3, [sp, #60]	; 0x3c
   1a512:	07e3      	lsls	r3, r4, #31
   1a514:	d401      	bmi.n	1a51a <_vfprintf_r+0x26a>
   1a516:	f000 fd76 	bl	1b006 <_vfprintf_r+0xd56>
   1a51a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a51c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a51e:	000b      	movs	r3, r1
   1a520:	4313      	orrs	r3, r2
   1a522:	001a      	movs	r2, r3
   1a524:	2302      	movs	r3, #2
   1a526:	2a00      	cmp	r2, #0
   1a528:	d008      	beq.n	1a53c <_vfprintf_r+0x28c>
   1a52a:	2030      	movs	r0, #48	; 0x30
   1a52c:	a91e      	add	r1, sp, #120	; 0x78
   1a52e:	7008      	strb	r0, [r1, #0]
   1a530:	2548      	movs	r5, #72	; 0x48
   1a532:	4668      	mov	r0, sp
   1a534:	1940      	adds	r0, r0, r5
   1a536:	7800      	ldrb	r0, [r0, #0]
   1a538:	431c      	orrs	r4, r3
   1a53a:	7048      	strb	r0, [r1, #1]
   1a53c:	2100      	movs	r1, #0
   1a53e:	4688      	mov	r8, r1
   1a540:	a816      	add	r0, sp, #88	; 0x58
   1a542:	77c1      	strb	r1, [r0, #31]
   1a544:	4651      	mov	r1, sl
   1a546:	3101      	adds	r1, #1
   1a548:	d100      	bne.n	1a54c <_vfprintf_r+0x29c>
   1a54a:	e0e6      	b.n	1a71a <_vfprintf_r+0x46a>
   1a54c:	2180      	movs	r1, #128	; 0x80
   1a54e:	0020      	movs	r0, r4
   1a550:	4388      	bics	r0, r1
   1a552:	9009      	str	r0, [sp, #36]	; 0x24
   1a554:	2a00      	cmp	r2, #0
   1a556:	d000      	beq.n	1a55a <_vfprintf_r+0x2aa>
   1a558:	e0e3      	b.n	1a722 <_vfprintf_r+0x472>
   1a55a:	4652      	mov	r2, sl
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d001      	beq.n	1a564 <_vfprintf_r+0x2b4>
   1a560:	f000 fc38 	bl	1add4 <_vfprintf_r+0xb24>
   1a564:	2b00      	cmp	r3, #0
   1a566:	d001      	beq.n	1a56c <_vfprintf_r+0x2bc>
   1a568:	f000 fd0c 	bl	1af84 <_vfprintf_r+0xcd4>
   1a56c:	2001      	movs	r0, #1
   1a56e:	ab32      	add	r3, sp, #200	; 0xc8
   1a570:	4020      	ands	r0, r4
   1a572:	900e      	str	r0, [sp, #56]	; 0x38
   1a574:	9311      	str	r3, [sp, #68]	; 0x44
   1a576:	d008      	beq.n	1a58a <_vfprintf_r+0x2da>
   1a578:	2327      	movs	r3, #39	; 0x27
   1a57a:	2130      	movs	r1, #48	; 0x30
   1a57c:	aa28      	add	r2, sp, #160	; 0xa0
   1a57e:	54d1      	strb	r1, [r2, r3]
   1a580:	aa16      	add	r2, sp, #88	; 0x58
   1a582:	4694      	mov	ip, r2
   1a584:	3348      	adds	r3, #72	; 0x48
   1a586:	4463      	add	r3, ip
   1a588:	9311      	str	r3, [sp, #68]	; 0x44
   1a58a:	4653      	mov	r3, sl
   1a58c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a58e:	9308      	str	r3, [sp, #32]
   1a590:	4592      	cmp	sl, r2
   1a592:	da00      	bge.n	1a596 <_vfprintf_r+0x2e6>
   1a594:	9208      	str	r2, [sp, #32]
   1a596:	2300      	movs	r3, #0
   1a598:	9313      	str	r3, [sp, #76]	; 0x4c
   1a59a:	4643      	mov	r3, r8
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d002      	beq.n	1a5a6 <_vfprintf_r+0x2f6>
   1a5a0:	9b08      	ldr	r3, [sp, #32]
   1a5a2:	3301      	adds	r3, #1
   1a5a4:	9308      	str	r3, [sp, #32]
   1a5a6:	2302      	movs	r3, #2
   1a5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a5aa:	401a      	ands	r2, r3
   1a5ac:	4691      	mov	r9, r2
   1a5ae:	d002      	beq.n	1a5b6 <_vfprintf_r+0x306>
   1a5b0:	9b08      	ldr	r3, [sp, #32]
   1a5b2:	3302      	adds	r3, #2
   1a5b4:	9308      	str	r3, [sp, #32]
   1a5b6:	2384      	movs	r3, #132	; 0x84
   1a5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a5ba:	401a      	ands	r2, r3
   1a5bc:	9210      	str	r2, [sp, #64]	; 0x40
   1a5be:	d000      	beq.n	1a5c2 <_vfprintf_r+0x312>
   1a5c0:	e207      	b.n	1a9d2 <_vfprintf_r+0x722>
   1a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a5c4:	9a08      	ldr	r2, [sp, #32]
   1a5c6:	1a9c      	subs	r4, r3, r2
   1a5c8:	2c00      	cmp	r4, #0
   1a5ca:	dc00      	bgt.n	1a5ce <_vfprintf_r+0x31e>
   1a5cc:	e201      	b.n	1a9d2 <_vfprintf_r+0x722>
   1a5ce:	491f      	ldr	r1, [pc, #124]	; (1a64c <_vfprintf_r+0x39c>)
   1a5d0:	68ba      	ldr	r2, [r7, #8]
   1a5d2:	687b      	ldr	r3, [r7, #4]
   1a5d4:	4688      	mov	r8, r1
   1a5d6:	2c10      	cmp	r4, #16
   1a5d8:	dd21      	ble.n	1a61e <_vfprintf_r+0x36e>
   1a5da:	0031      	movs	r1, r6
   1a5dc:	2510      	movs	r5, #16
   1a5de:	465e      	mov	r6, fp
   1a5e0:	e003      	b.n	1a5ea <_vfprintf_r+0x33a>
   1a5e2:	3c10      	subs	r4, #16
   1a5e4:	3108      	adds	r1, #8
   1a5e6:	2c10      	cmp	r4, #16
   1a5e8:	dd17      	ble.n	1a61a <_vfprintf_r+0x36a>
   1a5ea:	4640      	mov	r0, r8
   1a5ec:	3210      	adds	r2, #16
   1a5ee:	3301      	adds	r3, #1
   1a5f0:	6008      	str	r0, [r1, #0]
   1a5f2:	604d      	str	r5, [r1, #4]
   1a5f4:	60ba      	str	r2, [r7, #8]
   1a5f6:	607b      	str	r3, [r7, #4]
   1a5f8:	2b07      	cmp	r3, #7
   1a5fa:	ddf2      	ble.n	1a5e2 <_vfprintf_r+0x332>
   1a5fc:	003a      	movs	r2, r7
   1a5fe:	0031      	movs	r1, r6
   1a600:	9806      	ldr	r0, [sp, #24]
   1a602:	f004 f915 	bl	1e830 <__sprint_r>
   1a606:	2800      	cmp	r0, #0
   1a608:	d001      	beq.n	1a60e <_vfprintf_r+0x35e>
   1a60a:	f000 fccf 	bl	1afac <_vfprintf_r+0xcfc>
   1a60e:	3c10      	subs	r4, #16
   1a610:	68ba      	ldr	r2, [r7, #8]
   1a612:	687b      	ldr	r3, [r7, #4]
   1a614:	a932      	add	r1, sp, #200	; 0xc8
   1a616:	2c10      	cmp	r4, #16
   1a618:	dce7      	bgt.n	1a5ea <_vfprintf_r+0x33a>
   1a61a:	46b3      	mov	fp, r6
   1a61c:	000e      	movs	r6, r1
   1a61e:	4641      	mov	r1, r8
   1a620:	6074      	str	r4, [r6, #4]
   1a622:	3301      	adds	r3, #1
   1a624:	18a4      	adds	r4, r4, r2
   1a626:	6031      	str	r1, [r6, #0]
   1a628:	60bc      	str	r4, [r7, #8]
   1a62a:	607b      	str	r3, [r7, #4]
   1a62c:	2b07      	cmp	r3, #7
   1a62e:	dd01      	ble.n	1a634 <_vfprintf_r+0x384>
   1a630:	f000 fcae 	bl	1af90 <_vfprintf_r+0xce0>
   1a634:	ab16      	add	r3, sp, #88	; 0x58
   1a636:	7fdb      	ldrb	r3, [r3, #31]
   1a638:	3608      	adds	r6, #8
   1a63a:	4698      	mov	r8, r3
   1a63c:	e1ca      	b.n	1a9d4 <_vfprintf_r+0x724>
   1a63e:	46c0      	nop			; (mov r8, r8)
   1a640:	ffffdfff 	.word	0xffffdfff
   1a644:	000201d0 	.word	0x000201d0
   1a648:	00020358 	.word	0x00020358
   1a64c:	00020378 	.word	0x00020378
   1a650:	2200      	movs	r2, #0
   1a652:	9d07      	ldr	r5, [sp, #28]
   1a654:	3b30      	subs	r3, #48	; 0x30
   1a656:	46a8      	mov	r8, r5
   1a658:	920b      	str	r2, [sp, #44]	; 0x2c
   1a65a:	001a      	movs	r2, r3
   1a65c:	9408      	str	r4, [sp, #32]
   1a65e:	002c      	movs	r4, r5
   1a660:	4655      	mov	r5, sl
   1a662:	4682      	mov	sl, r0
   1a664:	4640      	mov	r0, r8
   1a666:	4688      	mov	r8, r1
   1a668:	0011      	movs	r1, r2
   1a66a:	2200      	movs	r2, #0
   1a66c:	0093      	lsls	r3, r2, #2
   1a66e:	189a      	adds	r2, r3, r2
   1a670:	7803      	ldrb	r3, [r0, #0]
   1a672:	0052      	lsls	r2, r2, #1
   1a674:	188a      	adds	r2, r1, r2
   1a676:	0019      	movs	r1, r3
   1a678:	3401      	adds	r4, #1
   1a67a:	3930      	subs	r1, #48	; 0x30
   1a67c:	0020      	movs	r0, r4
   1a67e:	2909      	cmp	r1, #9
   1a680:	d9f4      	bls.n	1a66c <_vfprintf_r+0x3bc>
   1a682:	9407      	str	r4, [sp, #28]
   1a684:	4650      	mov	r0, sl
   1a686:	9c08      	ldr	r4, [sp, #32]
   1a688:	920b      	str	r2, [sp, #44]	; 0x2c
   1a68a:	4641      	mov	r1, r8
   1a68c:	46aa      	mov	sl, r5
   1a68e:	e69b      	b.n	1a3c8 <_vfprintf_r+0x118>
   1a690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a692:	9312      	str	r3, [sp, #72]	; 0x48
   1a694:	6813      	ldr	r3, [r2, #0]
   1a696:	2120      	movs	r1, #32
   1a698:	9308      	str	r3, [sp, #32]
   1a69a:	466b      	mov	r3, sp
   1a69c:	185b      	adds	r3, r3, r1
   1a69e:	781b      	ldrb	r3, [r3, #0]
   1a6a0:	ad28      	add	r5, sp, #160	; 0xa0
   1a6a2:	702b      	strb	r3, [r5, #0]
   1a6a4:	2300      	movs	r3, #0
   1a6a6:	a916      	add	r1, sp, #88	; 0x58
   1a6a8:	77cb      	strb	r3, [r1, #31]
   1a6aa:	0013      	movs	r3, r2
   1a6ac:	3304      	adds	r3, #4
   1a6ae:	930f      	str	r3, [sp, #60]	; 0x3c
   1a6b0:	2300      	movs	r3, #0
   1a6b2:	9409      	str	r4, [sp, #36]	; 0x24
   1a6b4:	4698      	mov	r8, r3
   1a6b6:	3301      	adds	r3, #1
   1a6b8:	9308      	str	r3, [sp, #32]
   1a6ba:	930e      	str	r3, [sp, #56]	; 0x38
   1a6bc:	2300      	movs	r3, #0
   1a6be:	9511      	str	r5, [sp, #68]	; 0x44
   1a6c0:	469a      	mov	sl, r3
   1a6c2:	9313      	str	r3, [sp, #76]	; 0x4c
   1a6c4:	e76f      	b.n	1a5a6 <_vfprintf_r+0x2f6>
   1a6c6:	9312      	str	r3, [sp, #72]	; 0x48
   1a6c8:	2900      	cmp	r1, #0
   1a6ca:	d001      	beq.n	1a6d0 <_vfprintf_r+0x420>
   1a6cc:	f001 f94d 	bl	1b96a <_vfprintf_r+0x16ba>
   1a6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a6d2:	06a3      	lsls	r3, r4, #26
   1a6d4:	d501      	bpl.n	1a6da <_vfprintf_r+0x42a>
   1a6d6:	f000 fd5a 	bl	1b18e <_vfprintf_r+0xede>
   1a6da:	06e3      	lsls	r3, r4, #27
   1a6dc:	d501      	bpl.n	1a6e2 <_vfprintf_r+0x432>
   1a6de:	f000 fcab 	bl	1b038 <_vfprintf_r+0xd88>
   1a6e2:	0663      	lsls	r3, r4, #25
   1a6e4:	d401      	bmi.n	1a6ea <_vfprintf_r+0x43a>
   1a6e6:	f000 fca7 	bl	1b038 <_vfprintf_r+0xd88>
   1a6ea:	2100      	movs	r1, #0
   1a6ec:	5e53      	ldrsh	r3, [r2, r1]
   1a6ee:	930c      	str	r3, [sp, #48]	; 0x30
   1a6f0:	3204      	adds	r2, #4
   1a6f2:	17db      	asrs	r3, r3, #31
   1a6f4:	930d      	str	r3, [sp, #52]	; 0x34
   1a6f6:	920f      	str	r2, [sp, #60]	; 0x3c
   1a6f8:	2b00      	cmp	r3, #0
   1a6fa:	da01      	bge.n	1a700 <_vfprintf_r+0x450>
   1a6fc:	f000 fdb2 	bl	1b264 <_vfprintf_r+0xfb4>
   1a700:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a704:	0008      	movs	r0, r1
   1a706:	4651      	mov	r1, sl
   1a708:	ab16      	add	r3, sp, #88	; 0x58
   1a70a:	7fdb      	ldrb	r3, [r3, #31]
   1a70c:	4310      	orrs	r0, r2
   1a70e:	4698      	mov	r8, r3
   1a710:	0002      	movs	r2, r0
   1a712:	2301      	movs	r3, #1
   1a714:	3101      	adds	r1, #1
   1a716:	d000      	beq.n	1a71a <_vfprintf_r+0x46a>
   1a718:	e718      	b.n	1a54c <_vfprintf_r+0x29c>
   1a71a:	2a00      	cmp	r2, #0
   1a71c:	d100      	bne.n	1a720 <_vfprintf_r+0x470>
   1a71e:	e35a      	b.n	1add6 <_vfprintf_r+0xb26>
   1a720:	9409      	str	r4, [sp, #36]	; 0x24
   1a722:	2b01      	cmp	r3, #1
   1a724:	d101      	bne.n	1a72a <_vfprintf_r+0x47a>
   1a726:	f000 fc06 	bl	1af36 <_vfprintf_r+0xc86>
   1a72a:	2b02      	cmp	r3, #2
   1a72c:	d000      	beq.n	1a730 <_vfprintf_r+0x480>
   1a72e:	e380      	b.n	1ae32 <_vfprintf_r+0xb82>
   1a730:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1a732:	200f      	movs	r0, #15
   1a734:	46a1      	mov	r9, r4
   1a736:	46b4      	mov	ip, r6
   1a738:	ab32      	add	r3, sp, #200	; 0xc8
   1a73a:	0019      	movs	r1, r3
   1a73c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a740:	0004      	movs	r4, r0
   1a742:	464d      	mov	r5, r9
   1a744:	4014      	ands	r4, r2
   1a746:	5d2c      	ldrb	r4, [r5, r4]
   1a748:	071e      	lsls	r6, r3, #28
   1a74a:	0915      	lsrs	r5, r2, #4
   1a74c:	3901      	subs	r1, #1
   1a74e:	432e      	orrs	r6, r5
   1a750:	700c      	strb	r4, [r1, #0]
   1a752:	091c      	lsrs	r4, r3, #4
   1a754:	0023      	movs	r3, r4
   1a756:	0034      	movs	r4, r6
   1a758:	0032      	movs	r2, r6
   1a75a:	431c      	orrs	r4, r3
   1a75c:	d1f0      	bne.n	1a740 <_vfprintf_r+0x490>
   1a75e:	920c      	str	r2, [sp, #48]	; 0x30
   1a760:	930d      	str	r3, [sp, #52]	; 0x34
   1a762:	ab32      	add	r3, sp, #200	; 0xc8
   1a764:	1a5b      	subs	r3, r3, r1
   1a766:	9111      	str	r1, [sp, #68]	; 0x44
   1a768:	4666      	mov	r6, ip
   1a76a:	930e      	str	r3, [sp, #56]	; 0x38
   1a76c:	e70d      	b.n	1a58a <_vfprintf_r+0x2da>
   1a76e:	4663      	mov	r3, ip
   1a770:	431c      	orrs	r4, r3
   1a772:	9b07      	ldr	r3, [sp, #28]
   1a774:	781b      	ldrb	r3, [r3, #0]
   1a776:	e624      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a778:	9b07      	ldr	r3, [sp, #28]
   1a77a:	781b      	ldrb	r3, [r3, #0]
   1a77c:	2b6c      	cmp	r3, #108	; 0x6c
   1a77e:	d101      	bne.n	1a784 <_vfprintf_r+0x4d4>
   1a780:	f000 fe8c 	bl	1b49c <_vfprintf_r+0x11ec>
   1a784:	2210      	movs	r2, #16
   1a786:	4314      	orrs	r4, r2
   1a788:	e61b      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a78a:	2900      	cmp	r1, #0
   1a78c:	d001      	beq.n	1a792 <_vfprintf_r+0x4e2>
   1a78e:	f001 f8d5 	bl	1b93c <_vfprintf_r+0x168c>
   1a792:	06a3      	lsls	r3, r4, #26
   1a794:	d501      	bpl.n	1a79a <_vfprintf_r+0x4ea>
   1a796:	f000 fe76 	bl	1b486 <_vfprintf_r+0x11d6>
   1a79a:	06e3      	lsls	r3, r4, #27
   1a79c:	d500      	bpl.n	1a7a0 <_vfprintf_r+0x4f0>
   1a79e:	e110      	b.n	1a9c2 <_vfprintf_r+0x712>
   1a7a0:	0663      	lsls	r3, r4, #25
   1a7a2:	d400      	bmi.n	1a7a6 <_vfprintf_r+0x4f6>
   1a7a4:	e10d      	b.n	1a9c2 <_vfprintf_r+0x712>
   1a7a6:	4669      	mov	r1, sp
   1a7a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a7aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1a7ac:	681a      	ldr	r2, [r3, #0]
   1a7ae:	3304      	adds	r3, #4
   1a7b0:	9208      	str	r2, [sp, #32]
   1a7b2:	8011      	strh	r1, [r2, #0]
   1a7b4:	930f      	str	r3, [sp, #60]	; 0x3c
   1a7b6:	e5c9      	b.n	1a34c <_vfprintf_r+0x9c>
   1a7b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a7ba:	2230      	movs	r2, #48	; 0x30
   1a7bc:	680b      	ldr	r3, [r1, #0]
   1a7be:	930c      	str	r3, [sp, #48]	; 0x30
   1a7c0:	2300      	movs	r3, #0
   1a7c2:	930d      	str	r3, [sp, #52]	; 0x34
   1a7c4:	3302      	adds	r3, #2
   1a7c6:	431c      	orrs	r4, r3
   1a7c8:	ab1e      	add	r3, sp, #120	; 0x78
   1a7ca:	701a      	strb	r2, [r3, #0]
   1a7cc:	3248      	adds	r2, #72	; 0x48
   1a7ce:	705a      	strb	r2, [r3, #1]
   1a7d0:	000b      	movs	r3, r1
   1a7d2:	3304      	adds	r3, #4
   1a7d4:	930f      	str	r3, [sp, #60]	; 0x3c
   1a7d6:	4bc1      	ldr	r3, [pc, #772]	; (1aadc <_vfprintf_r+0x82c>)
   1a7d8:	9212      	str	r2, [sp, #72]	; 0x48
   1a7da:	9319      	str	r3, [sp, #100]	; 0x64
   1a7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a7de:	2302      	movs	r3, #2
   1a7e0:	e6ac      	b.n	1a53c <_vfprintf_r+0x28c>
   1a7e2:	464b      	mov	r3, r9
   1a7e4:	431c      	orrs	r4, r3
   1a7e6:	9b07      	ldr	r3, [sp, #28]
   1a7e8:	781b      	ldrb	r3, [r3, #0]
   1a7ea:	e5ea      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a7ec:	9312      	str	r3, [sp, #72]	; 0x48
   1a7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a7f0:	a916      	add	r1, sp, #88	; 0x58
   1a7f2:	1d1d      	adds	r5, r3, #4
   1a7f4:	681b      	ldr	r3, [r3, #0]
   1a7f6:	001a      	movs	r2, r3
   1a7f8:	9311      	str	r3, [sp, #68]	; 0x44
   1a7fa:	2300      	movs	r3, #0
   1a7fc:	77cb      	strb	r3, [r1, #31]
   1a7fe:	2a00      	cmp	r2, #0
   1a800:	d101      	bne.n	1a806 <_vfprintf_r+0x556>
   1a802:	f000 ff01 	bl	1b608 <_vfprintf_r+0x1358>
   1a806:	4653      	mov	r3, sl
   1a808:	3301      	adds	r3, #1
   1a80a:	d101      	bne.n	1a810 <_vfprintf_r+0x560>
   1a80c:	f000 fe64 	bl	1b4d8 <_vfprintf_r+0x1228>
   1a810:	4652      	mov	r2, sl
   1a812:	2100      	movs	r1, #0
   1a814:	9811      	ldr	r0, [sp, #68]	; 0x44
   1a816:	f003 f981 	bl	1db1c <memchr>
   1a81a:	2800      	cmp	r0, #0
   1a81c:	d101      	bne.n	1a822 <_vfprintf_r+0x572>
   1a81e:	f000 ff78 	bl	1b712 <_vfprintf_r+0x1462>
   1a822:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a824:	1ac3      	subs	r3, r0, r3
   1a826:	001a      	movs	r2, r3
   1a828:	930e      	str	r3, [sp, #56]	; 0x38
   1a82a:	43db      	mvns	r3, r3
   1a82c:	17db      	asrs	r3, r3, #31
   1a82e:	401a      	ands	r2, r3
   1a830:	ab16      	add	r3, sp, #88	; 0x58
   1a832:	7fdb      	ldrb	r3, [r3, #31]
   1a834:	9208      	str	r2, [sp, #32]
   1a836:	4698      	mov	r8, r3
   1a838:	2300      	movs	r3, #0
   1a83a:	950f      	str	r5, [sp, #60]	; 0x3c
   1a83c:	9409      	str	r4, [sp, #36]	; 0x24
   1a83e:	469a      	mov	sl, r3
   1a840:	9313      	str	r3, [sp, #76]	; 0x4c
   1a842:	e6aa      	b.n	1a59a <_vfprintf_r+0x2ea>
   1a844:	2308      	movs	r3, #8
   1a846:	431c      	orrs	r4, r3
   1a848:	9b07      	ldr	r3, [sp, #28]
   1a84a:	781b      	ldrb	r3, [r3, #0]
   1a84c:	e5b9      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a84e:	9312      	str	r3, [sp, #72]	; 0x48
   1a850:	2310      	movs	r3, #16
   1a852:	431c      	orrs	r4, r3
   1a854:	06a3      	lsls	r3, r4, #26
   1a856:	d501      	bpl.n	1a85c <_vfprintf_r+0x5ac>
   1a858:	f000 fca7 	bl	1b1aa <_vfprintf_r+0xefa>
   1a85c:	06e3      	lsls	r3, r4, #27
   1a85e:	d500      	bpl.n	1a862 <_vfprintf_r+0x5b2>
   1a860:	e3ee      	b.n	1b040 <_vfprintf_r+0xd90>
   1a862:	0663      	lsls	r3, r4, #25
   1a864:	d400      	bmi.n	1a868 <_vfprintf_r+0x5b8>
   1a866:	e3eb      	b.n	1b040 <_vfprintf_r+0xd90>
   1a868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a86a:	881a      	ldrh	r2, [r3, #0]
   1a86c:	920c      	str	r2, [sp, #48]	; 0x30
   1a86e:	2200      	movs	r2, #0
   1a870:	3304      	adds	r3, #4
   1a872:	920d      	str	r2, [sp, #52]	; 0x34
   1a874:	930f      	str	r3, [sp, #60]	; 0x3c
   1a876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a878:	2300      	movs	r3, #0
   1a87a:	e65f      	b.n	1a53c <_vfprintf_r+0x28c>
   1a87c:	9312      	str	r3, [sp, #72]	; 0x48
   1a87e:	2310      	movs	r3, #16
   1a880:	431c      	orrs	r4, r3
   1a882:	06a3      	lsls	r3, r4, #26
   1a884:	d501      	bpl.n	1a88a <_vfprintf_r+0x5da>
   1a886:	f000 fcba 	bl	1b1fe <_vfprintf_r+0xf4e>
   1a88a:	06e3      	lsls	r3, r4, #27
   1a88c:	d500      	bpl.n	1a890 <_vfprintf_r+0x5e0>
   1a88e:	e3da      	b.n	1b046 <_vfprintf_r+0xd96>
   1a890:	0663      	lsls	r3, r4, #25
   1a892:	d400      	bmi.n	1a896 <_vfprintf_r+0x5e6>
   1a894:	e3d7      	b.n	1b046 <_vfprintf_r+0xd96>
   1a896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a898:	881a      	ldrh	r2, [r3, #0]
   1a89a:	920c      	str	r2, [sp, #48]	; 0x30
   1a89c:	2200      	movs	r2, #0
   1a89e:	3304      	adds	r3, #4
   1a8a0:	920d      	str	r2, [sp, #52]	; 0x34
   1a8a2:	930f      	str	r3, [sp, #60]	; 0x3c
   1a8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a8a6:	2301      	movs	r3, #1
   1a8a8:	e648      	b.n	1a53c <_vfprintf_r+0x28c>
   1a8aa:	9312      	str	r3, [sp, #72]	; 0x48
   1a8ac:	2900      	cmp	r1, #0
   1a8ae:	d001      	beq.n	1a8b4 <_vfprintf_r+0x604>
   1a8b0:	f001 f857 	bl	1b962 <_vfprintf_r+0x16b2>
   1a8b4:	4b8a      	ldr	r3, [pc, #552]	; (1aae0 <_vfprintf_r+0x830>)
   1a8b6:	9319      	str	r3, [sp, #100]	; 0x64
   1a8b8:	e618      	b.n	1a4ec <_vfprintf_r+0x23c>
   1a8ba:	2301      	movs	r3, #1
   1a8bc:	431c      	orrs	r4, r3
   1a8be:	9b07      	ldr	r3, [sp, #28]
   1a8c0:	781b      	ldrb	r3, [r3, #0]
   1a8c2:	e57e      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a8c4:	2380      	movs	r3, #128	; 0x80
   1a8c6:	431c      	orrs	r4, r3
   1a8c8:	9b07      	ldr	r3, [sp, #28]
   1a8ca:	781b      	ldrb	r3, [r3, #0]
   1a8cc:	e579      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a8ce:	9b07      	ldr	r3, [sp, #28]
   1a8d0:	781b      	ldrb	r3, [r3, #0]
   1a8d2:	2800      	cmp	r0, #0
   1a8d4:	d000      	beq.n	1a8d8 <_vfprintf_r+0x628>
   1a8d6:	e574      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a8d8:	2101      	movs	r1, #1
   1a8da:	3020      	adds	r0, #32
   1a8dc:	e571      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a8de:	9312      	str	r3, [sp, #72]	; 0x48
   1a8e0:	2900      	cmp	r1, #0
   1a8e2:	d001      	beq.n	1a8e8 <_vfprintf_r+0x638>
   1a8e4:	f001 f839 	bl	1b95a <_vfprintf_r+0x16aa>
   1a8e8:	2207      	movs	r2, #7
   1a8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a8ec:	3307      	adds	r3, #7
   1a8ee:	4393      	bics	r3, r2
   1a8f0:	3201      	adds	r2, #1
   1a8f2:	4694      	mov	ip, r2
   1a8f4:	449c      	add	ip, r3
   1a8f6:	4662      	mov	r2, ip
   1a8f8:	920f      	str	r2, [sp, #60]	; 0x3c
   1a8fa:	681a      	ldr	r2, [r3, #0]
   1a8fc:	9216      	str	r2, [sp, #88]	; 0x58
   1a8fe:	685b      	ldr	r3, [r3, #4]
   1a900:	2201      	movs	r2, #1
   1a902:	9315      	str	r3, [sp, #84]	; 0x54
   1a904:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a906:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1a908:	005b      	lsls	r3, r3, #1
   1a90a:	085b      	lsrs	r3, r3, #1
   1a90c:	4698      	mov	r8, r3
   1a90e:	4252      	negs	r2, r2
   1a910:	4b74      	ldr	r3, [pc, #464]	; (1aae4 <_vfprintf_r+0x834>)
   1a912:	0028      	movs	r0, r5
   1a914:	4641      	mov	r1, r8
   1a916:	f004 fa25 	bl	1ed64 <__aeabi_dcmpun>
   1a91a:	2800      	cmp	r0, #0
   1a91c:	d001      	beq.n	1a922 <_vfprintf_r+0x672>
   1a91e:	f000 fcb4 	bl	1b28a <_vfprintf_r+0xfda>
   1a922:	2201      	movs	r2, #1
   1a924:	4b6f      	ldr	r3, [pc, #444]	; (1aae4 <_vfprintf_r+0x834>)
   1a926:	4252      	negs	r2, r2
   1a928:	0028      	movs	r0, r5
   1a92a:	4641      	mov	r1, r8
   1a92c:	f7fd faa4 	bl	17e78 <__aeabi_dcmple>
   1a930:	2800      	cmp	r0, #0
   1a932:	d001      	beq.n	1a938 <_vfprintf_r+0x688>
   1a934:	f000 fca9 	bl	1b28a <_vfprintf_r+0xfda>
   1a938:	2200      	movs	r2, #0
   1a93a:	2300      	movs	r3, #0
   1a93c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a93e:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a940:	f7fd fa90 	bl	17e64 <__aeabi_dcmplt>
   1a944:	2800      	cmp	r0, #0
   1a946:	d001      	beq.n	1a94c <_vfprintf_r+0x69c>
   1a948:	f000 fd55 	bl	1b3f6 <_vfprintf_r+0x1146>
   1a94c:	ab16      	add	r3, sp, #88	; 0x58
   1a94e:	7fdb      	ldrb	r3, [r3, #31]
   1a950:	4698      	mov	r8, r3
   1a952:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a954:	2b47      	cmp	r3, #71	; 0x47
   1a956:	dd01      	ble.n	1a95c <_vfprintf_r+0x6ac>
   1a958:	f000 fdb4 	bl	1b4c4 <_vfprintf_r+0x1214>
   1a95c:	4b62      	ldr	r3, [pc, #392]	; (1aae8 <_vfprintf_r+0x838>)
   1a95e:	9311      	str	r3, [sp, #68]	; 0x44
   1a960:	2380      	movs	r3, #128	; 0x80
   1a962:	439c      	bics	r4, r3
   1a964:	3b7d      	subs	r3, #125	; 0x7d
   1a966:	9308      	str	r3, [sp, #32]
   1a968:	930e      	str	r3, [sp, #56]	; 0x38
   1a96a:	2300      	movs	r3, #0
   1a96c:	9409      	str	r4, [sp, #36]	; 0x24
   1a96e:	469a      	mov	sl, r3
   1a970:	9313      	str	r3, [sp, #76]	; 0x4c
   1a972:	e612      	b.n	1a59a <_vfprintf_r+0x2ea>
   1a974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a976:	1d1a      	adds	r2, r3, #4
   1a978:	681b      	ldr	r3, [r3, #0]
   1a97a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	da00      	bge.n	1a982 <_vfprintf_r+0x6d2>
   1a980:	e578      	b.n	1a474 <_vfprintf_r+0x1c4>
   1a982:	9b07      	ldr	r3, [sp, #28]
   1a984:	920f      	str	r2, [sp, #60]	; 0x3c
   1a986:	781b      	ldrb	r3, [r3, #0]
   1a988:	e51b      	b.n	1a3c2 <_vfprintf_r+0x112>
   1a98a:	9312      	str	r3, [sp, #72]	; 0x48
   1a98c:	2900      	cmp	r1, #0
   1a98e:	d001      	beq.n	1a994 <_vfprintf_r+0x6e4>
   1a990:	f000 ffcc 	bl	1b92c <_vfprintf_r+0x167c>
   1a994:	2310      	movs	r3, #16
   1a996:	431c      	orrs	r4, r3
   1a998:	e69a      	b.n	1a6d0 <_vfprintf_r+0x420>
   1a99a:	9312      	str	r3, [sp, #72]	; 0x48
   1a99c:	e771      	b.n	1a882 <_vfprintf_r+0x5d2>
   1a99e:	9312      	str	r3, [sp, #72]	; 0x48
   1a9a0:	e758      	b.n	1a854 <_vfprintf_r+0x5a4>
   1a9a2:	9312      	str	r3, [sp, #72]	; 0x48
   1a9a4:	2900      	cmp	r1, #0
   1a9a6:	d001      	beq.n	1a9ac <_vfprintf_r+0x6fc>
   1a9a8:	f000 ffd3 	bl	1b952 <_vfprintf_r+0x16a2>
   1a9ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a9ae:	2b00      	cmp	r3, #0
   1a9b0:	d100      	bne.n	1a9b4 <_vfprintf_r+0x704>
   1a9b2:	e18d      	b.n	1acd0 <_vfprintf_r+0xa20>
   1a9b4:	ad28      	add	r5, sp, #160	; 0xa0
   1a9b6:	702b      	strb	r3, [r5, #0]
   1a9b8:	2300      	movs	r3, #0
   1a9ba:	aa16      	add	r2, sp, #88	; 0x58
   1a9bc:	77d3      	strb	r3, [r2, #31]
   1a9be:	9409      	str	r4, [sp, #36]	; 0x24
   1a9c0:	e678      	b.n	1a6b4 <_vfprintf_r+0x404>
   1a9c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a9c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a9c6:	6813      	ldr	r3, [r2, #0]
   1a9c8:	6019      	str	r1, [r3, #0]
   1a9ca:	0013      	movs	r3, r2
   1a9cc:	3304      	adds	r3, #4
   1a9ce:	930f      	str	r3, [sp, #60]	; 0x3c
   1a9d0:	e4bc      	b.n	1a34c <_vfprintf_r+0x9c>
   1a9d2:	68bc      	ldr	r4, [r7, #8]
   1a9d4:	4643      	mov	r3, r8
   1a9d6:	2b00      	cmp	r3, #0
   1a9d8:	d00f      	beq.n	1a9fa <_vfprintf_r+0x74a>
   1a9da:	aa16      	add	r2, sp, #88	; 0x58
   1a9dc:	231f      	movs	r3, #31
   1a9de:	4694      	mov	ip, r2
   1a9e0:	4463      	add	r3, ip
   1a9e2:	6033      	str	r3, [r6, #0]
   1a9e4:	2301      	movs	r3, #1
   1a9e6:	6073      	str	r3, [r6, #4]
   1a9e8:	687b      	ldr	r3, [r7, #4]
   1a9ea:	3401      	adds	r4, #1
   1a9ec:	3301      	adds	r3, #1
   1a9ee:	60bc      	str	r4, [r7, #8]
   1a9f0:	607b      	str	r3, [r7, #4]
   1a9f2:	2b07      	cmp	r3, #7
   1a9f4:	dd00      	ble.n	1a9f8 <_vfprintf_r+0x748>
   1a9f6:	e203      	b.n	1ae00 <_vfprintf_r+0xb50>
   1a9f8:	3608      	adds	r6, #8
   1a9fa:	464b      	mov	r3, r9
   1a9fc:	2b00      	cmp	r3, #0
   1a9fe:	d00c      	beq.n	1aa1a <_vfprintf_r+0x76a>
   1aa00:	ab1e      	add	r3, sp, #120	; 0x78
   1aa02:	6033      	str	r3, [r6, #0]
   1aa04:	2302      	movs	r3, #2
   1aa06:	6073      	str	r3, [r6, #4]
   1aa08:	687b      	ldr	r3, [r7, #4]
   1aa0a:	3402      	adds	r4, #2
   1aa0c:	3301      	adds	r3, #1
   1aa0e:	60bc      	str	r4, [r7, #8]
   1aa10:	607b      	str	r3, [r7, #4]
   1aa12:	2b07      	cmp	r3, #7
   1aa14:	dd00      	ble.n	1aa18 <_vfprintf_r+0x768>
   1aa16:	e1fd      	b.n	1ae14 <_vfprintf_r+0xb64>
   1aa18:	3608      	adds	r6, #8
   1aa1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1aa1c:	2b80      	cmp	r3, #128	; 0x80
   1aa1e:	d100      	bne.n	1aa22 <_vfprintf_r+0x772>
   1aa20:	e173      	b.n	1ad0a <_vfprintf_r+0xa5a>
   1aa22:	4653      	mov	r3, sl
   1aa24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1aa26:	1a9d      	subs	r5, r3, r2
   1aa28:	2d00      	cmp	r5, #0
   1aa2a:	dd32      	ble.n	1aa92 <_vfprintf_r+0x7e2>
   1aa2c:	4a2f      	ldr	r2, [pc, #188]	; (1aaec <_vfprintf_r+0x83c>)
   1aa2e:	687b      	ldr	r3, [r7, #4]
   1aa30:	4691      	mov	r9, r2
   1aa32:	2d10      	cmp	r5, #16
   1aa34:	dd22      	ble.n	1aa7c <_vfprintf_r+0x7cc>
   1aa36:	2210      	movs	r2, #16
   1aa38:	4692      	mov	sl, r2
   1aa3a:	0022      	movs	r2, r4
   1aa3c:	465c      	mov	r4, fp
   1aa3e:	e003      	b.n	1aa48 <_vfprintf_r+0x798>
   1aa40:	3d10      	subs	r5, #16
   1aa42:	3608      	adds	r6, #8
   1aa44:	2d10      	cmp	r5, #16
   1aa46:	dd17      	ble.n	1aa78 <_vfprintf_r+0x7c8>
   1aa48:	4649      	mov	r1, r9
   1aa4a:	6031      	str	r1, [r6, #0]
   1aa4c:	4651      	mov	r1, sl
   1aa4e:	3210      	adds	r2, #16
   1aa50:	3301      	adds	r3, #1
   1aa52:	6071      	str	r1, [r6, #4]
   1aa54:	60ba      	str	r2, [r7, #8]
   1aa56:	607b      	str	r3, [r7, #4]
   1aa58:	2b07      	cmp	r3, #7
   1aa5a:	ddf1      	ble.n	1aa40 <_vfprintf_r+0x790>
   1aa5c:	003a      	movs	r2, r7
   1aa5e:	0021      	movs	r1, r4
   1aa60:	9806      	ldr	r0, [sp, #24]
   1aa62:	f003 fee5 	bl	1e830 <__sprint_r>
   1aa66:	2800      	cmp	r0, #0
   1aa68:	d000      	beq.n	1aa6c <_vfprintf_r+0x7bc>
   1aa6a:	e18a      	b.n	1ad82 <_vfprintf_r+0xad2>
   1aa6c:	3d10      	subs	r5, #16
   1aa6e:	68ba      	ldr	r2, [r7, #8]
   1aa70:	687b      	ldr	r3, [r7, #4]
   1aa72:	ae32      	add	r6, sp, #200	; 0xc8
   1aa74:	2d10      	cmp	r5, #16
   1aa76:	dce7      	bgt.n	1aa48 <_vfprintf_r+0x798>
   1aa78:	46a3      	mov	fp, r4
   1aa7a:	0014      	movs	r4, r2
   1aa7c:	464a      	mov	r2, r9
   1aa7e:	1964      	adds	r4, r4, r5
   1aa80:	3301      	adds	r3, #1
   1aa82:	6032      	str	r2, [r6, #0]
   1aa84:	6075      	str	r5, [r6, #4]
   1aa86:	60bc      	str	r4, [r7, #8]
   1aa88:	607b      	str	r3, [r7, #4]
   1aa8a:	2b07      	cmp	r3, #7
   1aa8c:	dd00      	ble.n	1aa90 <_vfprintf_r+0x7e0>
   1aa8e:	e1ad      	b.n	1adec <_vfprintf_r+0xb3c>
   1aa90:	3608      	adds	r6, #8
   1aa92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aa94:	05db      	lsls	r3, r3, #23
   1aa96:	d500      	bpl.n	1aa9a <_vfprintf_r+0x7ea>
   1aa98:	e0be      	b.n	1ac18 <_vfprintf_r+0x968>
   1aa9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1aa9c:	6033      	str	r3, [r6, #0]
   1aa9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aaa0:	469c      	mov	ip, r3
   1aaa2:	6073      	str	r3, [r6, #4]
   1aaa4:	687b      	ldr	r3, [r7, #4]
   1aaa6:	4464      	add	r4, ip
   1aaa8:	3301      	adds	r3, #1
   1aaaa:	60bc      	str	r4, [r7, #8]
   1aaac:	607b      	str	r3, [r7, #4]
   1aaae:	2b07      	cmp	r3, #7
   1aab0:	dd00      	ble.n	1aab4 <_vfprintf_r+0x804>
   1aab2:	e0a6      	b.n	1ac02 <_vfprintf_r+0x952>
   1aab4:	3608      	adds	r6, #8
   1aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aab8:	075b      	lsls	r3, r3, #29
   1aaba:	d54a      	bpl.n	1ab52 <_vfprintf_r+0x8a2>
   1aabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aabe:	9a08      	ldr	r2, [sp, #32]
   1aac0:	1a9d      	subs	r5, r3, r2
   1aac2:	2d00      	cmp	r5, #0
   1aac4:	dd45      	ble.n	1ab52 <_vfprintf_r+0x8a2>
   1aac6:	4a0a      	ldr	r2, [pc, #40]	; (1aaf0 <_vfprintf_r+0x840>)
   1aac8:	687b      	ldr	r3, [r7, #4]
   1aaca:	4690      	mov	r8, r2
   1aacc:	2d10      	cmp	r5, #16
   1aace:	dd2f      	ble.n	1ab30 <_vfprintf_r+0x880>
   1aad0:	2210      	movs	r2, #16
   1aad2:	4691      	mov	r9, r2
   1aad4:	0022      	movs	r2, r4
   1aad6:	465c      	mov	r4, fp
   1aad8:	e010      	b.n	1aafc <_vfprintf_r+0x84c>
   1aada:	46c0      	nop			; (mov r8, r8)
   1aadc:	00020358 	.word	0x00020358
   1aae0:	00020344 	.word	0x00020344
   1aae4:	7fefffff 	.word	0x7fefffff
   1aae8:	00020334 	.word	0x00020334
   1aaec:	00020388 	.word	0x00020388
   1aaf0:	00020378 	.word	0x00020378
   1aaf4:	3d10      	subs	r5, #16
   1aaf6:	3608      	adds	r6, #8
   1aaf8:	2d10      	cmp	r5, #16
   1aafa:	dd17      	ble.n	1ab2c <_vfprintf_r+0x87c>
   1aafc:	49d1      	ldr	r1, [pc, #836]	; (1ae44 <_vfprintf_r+0xb94>)
   1aafe:	3210      	adds	r2, #16
   1ab00:	6031      	str	r1, [r6, #0]
   1ab02:	4649      	mov	r1, r9
   1ab04:	3301      	adds	r3, #1
   1ab06:	6071      	str	r1, [r6, #4]
   1ab08:	60ba      	str	r2, [r7, #8]
   1ab0a:	607b      	str	r3, [r7, #4]
   1ab0c:	2b07      	cmp	r3, #7
   1ab0e:	ddf1      	ble.n	1aaf4 <_vfprintf_r+0x844>
   1ab10:	003a      	movs	r2, r7
   1ab12:	0021      	movs	r1, r4
   1ab14:	9806      	ldr	r0, [sp, #24]
   1ab16:	f003 fe8b 	bl	1e830 <__sprint_r>
   1ab1a:	2800      	cmp	r0, #0
   1ab1c:	d000      	beq.n	1ab20 <_vfprintf_r+0x870>
   1ab1e:	e130      	b.n	1ad82 <_vfprintf_r+0xad2>
   1ab20:	3d10      	subs	r5, #16
   1ab22:	68ba      	ldr	r2, [r7, #8]
   1ab24:	687b      	ldr	r3, [r7, #4]
   1ab26:	ae32      	add	r6, sp, #200	; 0xc8
   1ab28:	2d10      	cmp	r5, #16
   1ab2a:	dce7      	bgt.n	1aafc <_vfprintf_r+0x84c>
   1ab2c:	46a3      	mov	fp, r4
   1ab2e:	0014      	movs	r4, r2
   1ab30:	4642      	mov	r2, r8
   1ab32:	1964      	adds	r4, r4, r5
   1ab34:	3301      	adds	r3, #1
   1ab36:	c624      	stmia	r6!, {r2, r5}
   1ab38:	60bc      	str	r4, [r7, #8]
   1ab3a:	607b      	str	r3, [r7, #4]
   1ab3c:	2b07      	cmp	r3, #7
   1ab3e:	dd08      	ble.n	1ab52 <_vfprintf_r+0x8a2>
   1ab40:	003a      	movs	r2, r7
   1ab42:	4659      	mov	r1, fp
   1ab44:	9806      	ldr	r0, [sp, #24]
   1ab46:	f003 fe73 	bl	1e830 <__sprint_r>
   1ab4a:	2800      	cmp	r0, #0
   1ab4c:	d000      	beq.n	1ab50 <_vfprintf_r+0x8a0>
   1ab4e:	e13f      	b.n	1add0 <_vfprintf_r+0xb20>
   1ab50:	68bc      	ldr	r4, [r7, #8]
   1ab52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab54:	9908      	ldr	r1, [sp, #32]
   1ab56:	428b      	cmp	r3, r1
   1ab58:	da00      	bge.n	1ab5c <_vfprintf_r+0x8ac>
   1ab5a:	000b      	movs	r3, r1
   1ab5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ab5e:	4694      	mov	ip, r2
   1ab60:	449c      	add	ip, r3
   1ab62:	4663      	mov	r3, ip
   1ab64:	930a      	str	r3, [sp, #40]	; 0x28
   1ab66:	2c00      	cmp	r4, #0
   1ab68:	d000      	beq.n	1ab6c <_vfprintf_r+0x8bc>
   1ab6a:	e129      	b.n	1adc0 <_vfprintf_r+0xb10>
   1ab6c:	2300      	movs	r3, #0
   1ab6e:	ae32      	add	r6, sp, #200	; 0xc8
   1ab70:	607b      	str	r3, [r7, #4]
   1ab72:	f7ff fbeb 	bl	1a34c <_vfprintf_r+0x9c>
   1ab76:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ab78:	2b01      	cmp	r3, #1
   1ab7a:	dc00      	bgt.n	1ab7e <_vfprintf_r+0x8ce>
   1ab7c:	e103      	b.n	1ad86 <_vfprintf_r+0xad6>
   1ab7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ab80:	3401      	adds	r4, #1
   1ab82:	6033      	str	r3, [r6, #0]
   1ab84:	2301      	movs	r3, #1
   1ab86:	6073      	str	r3, [r6, #4]
   1ab88:	687b      	ldr	r3, [r7, #4]
   1ab8a:	60bc      	str	r4, [r7, #8]
   1ab8c:	3301      	adds	r3, #1
   1ab8e:	607b      	str	r3, [r7, #4]
   1ab90:	2b07      	cmp	r3, #7
   1ab92:	dd00      	ble.n	1ab96 <_vfprintf_r+0x8e6>
   1ab94:	e2ef      	b.n	1b176 <_vfprintf_r+0xec6>
   1ab96:	3608      	adds	r6, #8
   1ab98:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ab9a:	3301      	adds	r3, #1
   1ab9c:	6032      	str	r2, [r6, #0]
   1ab9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1aba0:	4698      	mov	r8, r3
   1aba2:	4694      	mov	ip, r2
   1aba4:	4464      	add	r4, ip
   1aba6:	6072      	str	r2, [r6, #4]
   1aba8:	60bc      	str	r4, [r7, #8]
   1abaa:	607b      	str	r3, [r7, #4]
   1abac:	2b07      	cmp	r3, #7
   1abae:	dd00      	ble.n	1abb2 <_vfprintf_r+0x902>
   1abb0:	e318      	b.n	1b1e4 <_vfprintf_r+0xf34>
   1abb2:	3608      	adds	r6, #8
   1abb4:	2200      	movs	r2, #0
   1abb6:	2300      	movs	r3, #0
   1abb8:	9816      	ldr	r0, [sp, #88]	; 0x58
   1abba:	9915      	ldr	r1, [sp, #84]	; 0x54
   1abbc:	f7fd f94c 	bl	17e58 <__aeabi_dcmpeq>
   1abc0:	2800      	cmp	r0, #0
   1abc2:	d000      	beq.n	1abc6 <_vfprintf_r+0x916>
   1abc4:	e1f4      	b.n	1afb0 <_vfprintf_r+0xd00>
   1abc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1abc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1abca:	3501      	adds	r5, #1
   1abcc:	3b01      	subs	r3, #1
   1abce:	6035      	str	r5, [r6, #0]
   1abd0:	6073      	str	r3, [r6, #4]
   1abd2:	18e4      	adds	r4, r4, r3
   1abd4:	2301      	movs	r3, #1
   1abd6:	469c      	mov	ip, r3
   1abd8:	44e0      	add	r8, ip
   1abda:	4643      	mov	r3, r8
   1abdc:	60bc      	str	r4, [r7, #8]
   1abde:	607b      	str	r3, [r7, #4]
   1abe0:	2b07      	cmp	r3, #7
   1abe2:	dd00      	ble.n	1abe6 <_vfprintf_r+0x936>
   1abe4:	e0e0      	b.n	1ada8 <_vfprintf_r+0xaf8>
   1abe6:	3608      	adds	r6, #8
   1abe8:	ab21      	add	r3, sp, #132	; 0x84
   1abea:	6033      	str	r3, [r6, #0]
   1abec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1abee:	469c      	mov	ip, r3
   1abf0:	6073      	str	r3, [r6, #4]
   1abf2:	4643      	mov	r3, r8
   1abf4:	4464      	add	r4, ip
   1abf6:	3301      	adds	r3, #1
   1abf8:	60bc      	str	r4, [r7, #8]
   1abfa:	607b      	str	r3, [r7, #4]
   1abfc:	2b07      	cmp	r3, #7
   1abfe:	dc00      	bgt.n	1ac02 <_vfprintf_r+0x952>
   1ac00:	e758      	b.n	1aab4 <_vfprintf_r+0x804>
   1ac02:	003a      	movs	r2, r7
   1ac04:	4659      	mov	r1, fp
   1ac06:	9806      	ldr	r0, [sp, #24]
   1ac08:	f003 fe12 	bl	1e830 <__sprint_r>
   1ac0c:	2800      	cmp	r0, #0
   1ac0e:	d000      	beq.n	1ac12 <_vfprintf_r+0x962>
   1ac10:	e0de      	b.n	1add0 <_vfprintf_r+0xb20>
   1ac12:	68bc      	ldr	r4, [r7, #8]
   1ac14:	ae32      	add	r6, sp, #200	; 0xc8
   1ac16:	e74e      	b.n	1aab6 <_vfprintf_r+0x806>
   1ac18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ac1a:	2b65      	cmp	r3, #101	; 0x65
   1ac1c:	ddab      	ble.n	1ab76 <_vfprintf_r+0x8c6>
   1ac1e:	2200      	movs	r2, #0
   1ac20:	2300      	movs	r3, #0
   1ac22:	9816      	ldr	r0, [sp, #88]	; 0x58
   1ac24:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ac26:	f7fd f917 	bl	17e58 <__aeabi_dcmpeq>
   1ac2a:	2800      	cmp	r0, #0
   1ac2c:	d100      	bne.n	1ac30 <_vfprintf_r+0x980>
   1ac2e:	e134      	b.n	1ae9a <_vfprintf_r+0xbea>
   1ac30:	4b85      	ldr	r3, [pc, #532]	; (1ae48 <_vfprintf_r+0xb98>)
   1ac32:	3401      	adds	r4, #1
   1ac34:	6033      	str	r3, [r6, #0]
   1ac36:	2301      	movs	r3, #1
   1ac38:	6073      	str	r3, [r6, #4]
   1ac3a:	687b      	ldr	r3, [r7, #4]
   1ac3c:	60bc      	str	r4, [r7, #8]
   1ac3e:	3301      	adds	r3, #1
   1ac40:	607b      	str	r3, [r7, #4]
   1ac42:	2b07      	cmp	r3, #7
   1ac44:	dd00      	ble.n	1ac48 <_vfprintf_r+0x998>
   1ac46:	e3dc      	b.n	1b402 <_vfprintf_r+0x1152>
   1ac48:	3608      	adds	r6, #8
   1ac4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ac4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ac4e:	4293      	cmp	r3, r2
   1ac50:	db03      	blt.n	1ac5a <_vfprintf_r+0x9aa>
   1ac52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac54:	07db      	lsls	r3, r3, #31
   1ac56:	d400      	bmi.n	1ac5a <_vfprintf_r+0x9aa>
   1ac58:	e3b7      	b.n	1b3ca <_vfprintf_r+0x111a>
   1ac5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ac5c:	68ba      	ldr	r2, [r7, #8]
   1ac5e:	6033      	str	r3, [r6, #0]
   1ac60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ac62:	469c      	mov	ip, r3
   1ac64:	6073      	str	r3, [r6, #4]
   1ac66:	687b      	ldr	r3, [r7, #4]
   1ac68:	4462      	add	r2, ip
   1ac6a:	3301      	adds	r3, #1
   1ac6c:	0014      	movs	r4, r2
   1ac6e:	60ba      	str	r2, [r7, #8]
   1ac70:	607b      	str	r3, [r7, #4]
   1ac72:	2b07      	cmp	r3, #7
   1ac74:	dd01      	ble.n	1ac7a <_vfprintf_r+0x9ca>
   1ac76:	f000 fc19 	bl	1b4ac <_vfprintf_r+0x11fc>
   1ac7a:	3608      	adds	r6, #8
   1ac7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ac7e:	1e5d      	subs	r5, r3, #1
   1ac80:	2d00      	cmp	r5, #0
   1ac82:	dc00      	bgt.n	1ac86 <_vfprintf_r+0x9d6>
   1ac84:	e717      	b.n	1aab6 <_vfprintf_r+0x806>
   1ac86:	4a71      	ldr	r2, [pc, #452]	; (1ae4c <_vfprintf_r+0xb9c>)
   1ac88:	687b      	ldr	r3, [r7, #4]
   1ac8a:	4691      	mov	r9, r2
   1ac8c:	2d10      	cmp	r5, #16
   1ac8e:	dc00      	bgt.n	1ac92 <_vfprintf_r+0x9e2>
   1ac90:	e1c3      	b.n	1b01a <_vfprintf_r+0xd6a>
   1ac92:	2210      	movs	r2, #16
   1ac94:	4690      	mov	r8, r2
   1ac96:	0022      	movs	r2, r4
   1ac98:	464c      	mov	r4, r9
   1ac9a:	46d9      	mov	r9, fp
   1ac9c:	e004      	b.n	1aca8 <_vfprintf_r+0x9f8>
   1ac9e:	3608      	adds	r6, #8
   1aca0:	3d10      	subs	r5, #16
   1aca2:	2d10      	cmp	r5, #16
   1aca4:	dc00      	bgt.n	1aca8 <_vfprintf_r+0x9f8>
   1aca6:	e37c      	b.n	1b3a2 <_vfprintf_r+0x10f2>
   1aca8:	4641      	mov	r1, r8
   1acaa:	3210      	adds	r2, #16
   1acac:	3301      	adds	r3, #1
   1acae:	6034      	str	r4, [r6, #0]
   1acb0:	6071      	str	r1, [r6, #4]
   1acb2:	60ba      	str	r2, [r7, #8]
   1acb4:	607b      	str	r3, [r7, #4]
   1acb6:	2b07      	cmp	r3, #7
   1acb8:	ddf1      	ble.n	1ac9e <_vfprintf_r+0x9ee>
   1acba:	003a      	movs	r2, r7
   1acbc:	4649      	mov	r1, r9
   1acbe:	9806      	ldr	r0, [sp, #24]
   1acc0:	f003 fdb6 	bl	1e830 <__sprint_r>
   1acc4:	2800      	cmp	r0, #0
   1acc6:	d10b      	bne.n	1ace0 <_vfprintf_r+0xa30>
   1acc8:	68ba      	ldr	r2, [r7, #8]
   1acca:	687b      	ldr	r3, [r7, #4]
   1accc:	ae32      	add	r6, sp, #200	; 0xc8
   1acce:	e7e7      	b.n	1aca0 <_vfprintf_r+0x9f0>
   1acd0:	68bb      	ldr	r3, [r7, #8]
   1acd2:	46d9      	mov	r9, fp
   1acd4:	2b00      	cmp	r3, #0
   1acd6:	d001      	beq.n	1acdc <_vfprintf_r+0xa2c>
   1acd8:	f000 fd4c 	bl	1b774 <_vfprintf_r+0x14c4>
   1acdc:	2300      	movs	r3, #0
   1acde:	607b      	str	r3, [r7, #4]
   1ace0:	464b      	mov	r3, r9
   1ace2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1ace4:	07db      	lsls	r3, r3, #31
   1ace6:	d40d      	bmi.n	1ad04 <_vfprintf_r+0xa54>
   1ace8:	464b      	mov	r3, r9
   1acea:	899b      	ldrh	r3, [r3, #12]
   1acec:	059a      	lsls	r2, r3, #22
   1acee:	d505      	bpl.n	1acfc <_vfprintf_r+0xa4c>
   1acf0:	065b      	lsls	r3, r3, #25
   1acf2:	d401      	bmi.n	1acf8 <_vfprintf_r+0xa48>
   1acf4:	f7ff fb8d 	bl	1a412 <_vfprintf_r+0x162>
   1acf8:	f7ff fb88 	bl	1a40c <_vfprintf_r+0x15c>
   1acfc:	464b      	mov	r3, r9
   1acfe:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1ad00:	f002 fbc8 	bl	1d494 <__retarget_lock_release_recursive>
   1ad04:	464b      	mov	r3, r9
   1ad06:	899b      	ldrh	r3, [r3, #12]
   1ad08:	e7f2      	b.n	1acf0 <_vfprintf_r+0xa40>
   1ad0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad0c:	9a08      	ldr	r2, [sp, #32]
   1ad0e:	1a9d      	subs	r5, r3, r2
   1ad10:	2d00      	cmp	r5, #0
   1ad12:	dc00      	bgt.n	1ad16 <_vfprintf_r+0xa66>
   1ad14:	e685      	b.n	1aa22 <_vfprintf_r+0x772>
   1ad16:	4a4d      	ldr	r2, [pc, #308]	; (1ae4c <_vfprintf_r+0xb9c>)
   1ad18:	687b      	ldr	r3, [r7, #4]
   1ad1a:	4691      	mov	r9, r2
   1ad1c:	2d10      	cmp	r5, #16
   1ad1e:	dd24      	ble.n	1ad6a <_vfprintf_r+0xaba>
   1ad20:	2210      	movs	r2, #16
   1ad22:	0021      	movs	r1, r4
   1ad24:	4690      	mov	r8, r2
   1ad26:	465c      	mov	r4, fp
   1ad28:	0032      	movs	r2, r6
   1ad2a:	464e      	mov	r6, r9
   1ad2c:	e003      	b.n	1ad36 <_vfprintf_r+0xa86>
   1ad2e:	3d10      	subs	r5, #16
   1ad30:	3208      	adds	r2, #8
   1ad32:	2d10      	cmp	r5, #16
   1ad34:	dd15      	ble.n	1ad62 <_vfprintf_r+0xab2>
   1ad36:	4640      	mov	r0, r8
   1ad38:	3110      	adds	r1, #16
   1ad3a:	3301      	adds	r3, #1
   1ad3c:	6016      	str	r6, [r2, #0]
   1ad3e:	6050      	str	r0, [r2, #4]
   1ad40:	60b9      	str	r1, [r7, #8]
   1ad42:	607b      	str	r3, [r7, #4]
   1ad44:	2b07      	cmp	r3, #7
   1ad46:	ddf2      	ble.n	1ad2e <_vfprintf_r+0xa7e>
   1ad48:	003a      	movs	r2, r7
   1ad4a:	0021      	movs	r1, r4
   1ad4c:	9806      	ldr	r0, [sp, #24]
   1ad4e:	f003 fd6f 	bl	1e830 <__sprint_r>
   1ad52:	2800      	cmp	r0, #0
   1ad54:	d115      	bne.n	1ad82 <_vfprintf_r+0xad2>
   1ad56:	3d10      	subs	r5, #16
   1ad58:	68b9      	ldr	r1, [r7, #8]
   1ad5a:	687b      	ldr	r3, [r7, #4]
   1ad5c:	aa32      	add	r2, sp, #200	; 0xc8
   1ad5e:	2d10      	cmp	r5, #16
   1ad60:	dce9      	bgt.n	1ad36 <_vfprintf_r+0xa86>
   1ad62:	46a3      	mov	fp, r4
   1ad64:	46b1      	mov	r9, r6
   1ad66:	000c      	movs	r4, r1
   1ad68:	0016      	movs	r6, r2
   1ad6a:	464a      	mov	r2, r9
   1ad6c:	1964      	adds	r4, r4, r5
   1ad6e:	3301      	adds	r3, #1
   1ad70:	6032      	str	r2, [r6, #0]
   1ad72:	6075      	str	r5, [r6, #4]
   1ad74:	60bc      	str	r4, [r7, #8]
   1ad76:	607b      	str	r3, [r7, #4]
   1ad78:	2b07      	cmp	r3, #7
   1ad7a:	dd00      	ble.n	1ad7e <_vfprintf_r+0xace>
   1ad7c:	e263      	b.n	1b246 <_vfprintf_r+0xf96>
   1ad7e:	3608      	adds	r6, #8
   1ad80:	e64f      	b.n	1aa22 <_vfprintf_r+0x772>
   1ad82:	46a1      	mov	r9, r4
   1ad84:	e7ac      	b.n	1ace0 <_vfprintf_r+0xa30>
   1ad86:	2301      	movs	r3, #1
   1ad88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ad8a:	4213      	tst	r3, r2
   1ad8c:	d000      	beq.n	1ad90 <_vfprintf_r+0xae0>
   1ad8e:	e6f6      	b.n	1ab7e <_vfprintf_r+0x8ce>
   1ad90:	6073      	str	r3, [r6, #4]
   1ad92:	687b      	ldr	r3, [r7, #4]
   1ad94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ad96:	3301      	adds	r3, #1
   1ad98:	3401      	adds	r4, #1
   1ad9a:	6032      	str	r2, [r6, #0]
   1ad9c:	60bc      	str	r4, [r7, #8]
   1ad9e:	4698      	mov	r8, r3
   1ada0:	607b      	str	r3, [r7, #4]
   1ada2:	2b07      	cmp	r3, #7
   1ada4:	dc00      	bgt.n	1ada8 <_vfprintf_r+0xaf8>
   1ada6:	e71e      	b.n	1abe6 <_vfprintf_r+0x936>
   1ada8:	003a      	movs	r2, r7
   1adaa:	4659      	mov	r1, fp
   1adac:	9806      	ldr	r0, [sp, #24]
   1adae:	f003 fd3f 	bl	1e830 <__sprint_r>
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d10c      	bne.n	1add0 <_vfprintf_r+0xb20>
   1adb6:	687b      	ldr	r3, [r7, #4]
   1adb8:	68bc      	ldr	r4, [r7, #8]
   1adba:	4698      	mov	r8, r3
   1adbc:	ae32      	add	r6, sp, #200	; 0xc8
   1adbe:	e713      	b.n	1abe8 <_vfprintf_r+0x938>
   1adc0:	003a      	movs	r2, r7
   1adc2:	4659      	mov	r1, fp
   1adc4:	9806      	ldr	r0, [sp, #24]
   1adc6:	f003 fd33 	bl	1e830 <__sprint_r>
   1adca:	2800      	cmp	r0, #0
   1adcc:	d100      	bne.n	1add0 <_vfprintf_r+0xb20>
   1adce:	e6cd      	b.n	1ab6c <_vfprintf_r+0x8bc>
   1add0:	46d9      	mov	r9, fp
   1add2:	e785      	b.n	1ace0 <_vfprintf_r+0xa30>
   1add4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1add6:	2b01      	cmp	r3, #1
   1add8:	d100      	bne.n	1addc <_vfprintf_r+0xb2c>
   1adda:	e148      	b.n	1b06e <_vfprintf_r+0xdbe>
   1addc:	2b02      	cmp	r3, #2
   1adde:	d123      	bne.n	1ae28 <_vfprintf_r+0xb78>
   1ade0:	9409      	str	r4, [sp, #36]	; 0x24
   1ade2:	2300      	movs	r3, #0
   1ade4:	2400      	movs	r4, #0
   1ade6:	930c      	str	r3, [sp, #48]	; 0x30
   1ade8:	940d      	str	r4, [sp, #52]	; 0x34
   1adea:	e4a1      	b.n	1a730 <_vfprintf_r+0x480>
   1adec:	003a      	movs	r2, r7
   1adee:	4659      	mov	r1, fp
   1adf0:	9806      	ldr	r0, [sp, #24]
   1adf2:	f003 fd1d 	bl	1e830 <__sprint_r>
   1adf6:	2800      	cmp	r0, #0
   1adf8:	d1ea      	bne.n	1add0 <_vfprintf_r+0xb20>
   1adfa:	68bc      	ldr	r4, [r7, #8]
   1adfc:	ae32      	add	r6, sp, #200	; 0xc8
   1adfe:	e648      	b.n	1aa92 <_vfprintf_r+0x7e2>
   1ae00:	003a      	movs	r2, r7
   1ae02:	4659      	mov	r1, fp
   1ae04:	9806      	ldr	r0, [sp, #24]
   1ae06:	f003 fd13 	bl	1e830 <__sprint_r>
   1ae0a:	2800      	cmp	r0, #0
   1ae0c:	d1e0      	bne.n	1add0 <_vfprintf_r+0xb20>
   1ae0e:	68bc      	ldr	r4, [r7, #8]
   1ae10:	ae32      	add	r6, sp, #200	; 0xc8
   1ae12:	e5f2      	b.n	1a9fa <_vfprintf_r+0x74a>
   1ae14:	003a      	movs	r2, r7
   1ae16:	4659      	mov	r1, fp
   1ae18:	9806      	ldr	r0, [sp, #24]
   1ae1a:	f003 fd09 	bl	1e830 <__sprint_r>
   1ae1e:	2800      	cmp	r0, #0
   1ae20:	d1d6      	bne.n	1add0 <_vfprintf_r+0xb20>
   1ae22:	68bc      	ldr	r4, [r7, #8]
   1ae24:	ae32      	add	r6, sp, #200	; 0xc8
   1ae26:	e5f8      	b.n	1aa1a <_vfprintf_r+0x76a>
   1ae28:	9409      	str	r4, [sp, #36]	; 0x24
   1ae2a:	2300      	movs	r3, #0
   1ae2c:	2400      	movs	r4, #0
   1ae2e:	930c      	str	r3, [sp, #48]	; 0x30
   1ae30:	940d      	str	r4, [sp, #52]	; 0x34
   1ae32:	980c      	ldr	r0, [sp, #48]	; 0x30
   1ae34:	990d      	ldr	r1, [sp, #52]	; 0x34
   1ae36:	4653      	mov	r3, sl
   1ae38:	aa32      	add	r2, sp, #200	; 0xc8
   1ae3a:	4691      	mov	r9, r2
   1ae3c:	9308      	str	r3, [sp, #32]
   1ae3e:	46b2      	mov	sl, r6
   1ae40:	e007      	b.n	1ae52 <_vfprintf_r+0xba2>
   1ae42:	46c0      	nop			; (mov r8, r8)
   1ae44:	00020378 	.word	0x00020378
   1ae48:	00020374 	.word	0x00020374
   1ae4c:	00020388 	.word	0x00020388
   1ae50:	46a1      	mov	r9, r4
   1ae52:	074a      	lsls	r2, r1, #29
   1ae54:	4694      	mov	ip, r2
   1ae56:	464b      	mov	r3, r9
   1ae58:	4665      	mov	r5, ip
   1ae5a:	1e5c      	subs	r4, r3, #1
   1ae5c:	08c6      	lsrs	r6, r0, #3
   1ae5e:	2307      	movs	r3, #7
   1ae60:	08ca      	lsrs	r2, r1, #3
   1ae62:	4335      	orrs	r5, r6
   1ae64:	0011      	movs	r1, r2
   1ae66:	002a      	movs	r2, r5
   1ae68:	4003      	ands	r3, r0
   1ae6a:	3330      	adds	r3, #48	; 0x30
   1ae6c:	7023      	strb	r3, [r4, #0]
   1ae6e:	0028      	movs	r0, r5
   1ae70:	430a      	orrs	r2, r1
   1ae72:	d1ed      	bne.n	1ae50 <_vfprintf_r+0xba0>
   1ae74:	900c      	str	r0, [sp, #48]	; 0x30
   1ae76:	910d      	str	r1, [sp, #52]	; 0x34
   1ae78:	9908      	ldr	r1, [sp, #32]
   1ae7a:	4656      	mov	r6, sl
   1ae7c:	468a      	mov	sl, r1
   1ae7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ae80:	464a      	mov	r2, r9
   1ae82:	9411      	str	r4, [sp, #68]	; 0x44
   1ae84:	07c9      	lsls	r1, r1, #31
   1ae86:	d500      	bpl.n	1ae8a <_vfprintf_r+0xbda>
   1ae88:	e0e0      	b.n	1b04c <_vfprintf_r+0xd9c>
   1ae8a:	ab32      	add	r3, sp, #200	; 0xc8
   1ae8c:	1b1b      	subs	r3, r3, r4
   1ae8e:	930e      	str	r3, [sp, #56]	; 0x38
   1ae90:	f7ff fb7b 	bl	1a58a <_vfprintf_r+0x2da>
   1ae94:	9c07      	ldr	r4, [sp, #28]
   1ae96:	f7ff fa7d 	bl	1a394 <_vfprintf_r+0xe4>
   1ae9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1ae9c:	2800      	cmp	r0, #0
   1ae9e:	dc00      	bgt.n	1aea2 <_vfprintf_r+0xbf2>
   1aea0:	e2b9      	b.n	1b416 <_vfprintf_r+0x1166>
   1aea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1aea4:	9914      	ldr	r1, [sp, #80]	; 0x50
   1aea6:	0013      	movs	r3, r2
   1aea8:	4690      	mov	r8, r2
   1aeaa:	428b      	cmp	r3, r1
   1aeac:	dd00      	ble.n	1aeb0 <_vfprintf_r+0xc00>
   1aeae:	4688      	mov	r8, r1
   1aeb0:	4643      	mov	r3, r8
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	dd0c      	ble.n	1aed0 <_vfprintf_r+0xc20>
   1aeb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1aeb8:	4444      	add	r4, r8
   1aeba:	6033      	str	r3, [r6, #0]
   1aebc:	4643      	mov	r3, r8
   1aebe:	6073      	str	r3, [r6, #4]
   1aec0:	687b      	ldr	r3, [r7, #4]
   1aec2:	60bc      	str	r4, [r7, #8]
   1aec4:	3301      	adds	r3, #1
   1aec6:	607b      	str	r3, [r7, #4]
   1aec8:	2b07      	cmp	r3, #7
   1aeca:	dd00      	ble.n	1aece <_vfprintf_r+0xc1e>
   1aecc:	e389      	b.n	1b5e2 <_vfprintf_r+0x1332>
   1aece:	3608      	adds	r6, #8
   1aed0:	4643      	mov	r3, r8
   1aed2:	43db      	mvns	r3, r3
   1aed4:	4642      	mov	r2, r8
   1aed6:	17db      	asrs	r3, r3, #31
   1aed8:	4013      	ands	r3, r2
   1aeda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1aedc:	1ad3      	subs	r3, r2, r3
   1aede:	4698      	mov	r8, r3
   1aee0:	2b00      	cmp	r3, #0
   1aee2:	dc00      	bgt.n	1aee6 <_vfprintf_r+0xc36>
   1aee4:	e0eb      	b.n	1b0be <_vfprintf_r+0xe0e>
   1aee6:	2b10      	cmp	r3, #16
   1aee8:	dc01      	bgt.n	1aeee <_vfprintf_r+0xc3e>
   1aeea:	f000 fcd9 	bl	1b8a0 <_vfprintf_r+0x15f0>
   1aeee:	4adc      	ldr	r2, [pc, #880]	; (1b260 <_vfprintf_r+0xfb0>)
   1aef0:	687b      	ldr	r3, [r7, #4]
   1aef2:	4691      	mov	r9, r2
   1aef4:	2210      	movs	r2, #16
   1aef6:	464d      	mov	r5, r9
   1aef8:	4692      	mov	sl, r2
   1aefa:	0022      	movs	r2, r4
   1aefc:	4644      	mov	r4, r8
   1aefe:	46d8      	mov	r8, fp
   1af00:	e004      	b.n	1af0c <_vfprintf_r+0xc5c>
   1af02:	3608      	adds	r6, #8
   1af04:	3c10      	subs	r4, #16
   1af06:	2c10      	cmp	r4, #16
   1af08:	dc00      	bgt.n	1af0c <_vfprintf_r+0xc5c>
   1af0a:	e0bf      	b.n	1b08c <_vfprintf_r+0xddc>
   1af0c:	4651      	mov	r1, sl
   1af0e:	3210      	adds	r2, #16
   1af10:	3301      	adds	r3, #1
   1af12:	6035      	str	r5, [r6, #0]
   1af14:	6071      	str	r1, [r6, #4]
   1af16:	60ba      	str	r2, [r7, #8]
   1af18:	607b      	str	r3, [r7, #4]
   1af1a:	2b07      	cmp	r3, #7
   1af1c:	ddf1      	ble.n	1af02 <_vfprintf_r+0xc52>
   1af1e:	003a      	movs	r2, r7
   1af20:	4641      	mov	r1, r8
   1af22:	9806      	ldr	r0, [sp, #24]
   1af24:	f003 fc84 	bl	1e830 <__sprint_r>
   1af28:	2800      	cmp	r0, #0
   1af2a:	d000      	beq.n	1af2e <_vfprintf_r+0xc7e>
   1af2c:	e3b6      	b.n	1b69c <_vfprintf_r+0x13ec>
   1af2e:	68ba      	ldr	r2, [r7, #8]
   1af30:	687b      	ldr	r3, [r7, #4]
   1af32:	ae32      	add	r6, sp, #200	; 0xc8
   1af34:	e7e6      	b.n	1af04 <_vfprintf_r+0xc54>
   1af36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af38:	2b00      	cmp	r3, #0
   1af3a:	d100      	bne.n	1af3e <_vfprintf_r+0xc8e>
   1af3c:	e092      	b.n	1b064 <_vfprintf_r+0xdb4>
   1af3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1af40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1af42:	ab32      	add	r3, sp, #200	; 0xc8
   1af44:	46b1      	mov	r9, r6
   1af46:	001e      	movs	r6, r3
   1af48:	0020      	movs	r0, r4
   1af4a:	0029      	movs	r1, r5
   1af4c:	220a      	movs	r2, #10
   1af4e:	2300      	movs	r3, #0
   1af50:	f7fc ffb0 	bl	17eb4 <__aeabi_uldivmod>
   1af54:	3e01      	subs	r6, #1
   1af56:	3230      	adds	r2, #48	; 0x30
   1af58:	7032      	strb	r2, [r6, #0]
   1af5a:	2300      	movs	r3, #0
   1af5c:	0020      	movs	r0, r4
   1af5e:	0029      	movs	r1, r5
   1af60:	220a      	movs	r2, #10
   1af62:	f7fc ffa7 	bl	17eb4 <__aeabi_uldivmod>
   1af66:	0003      	movs	r3, r0
   1af68:	0004      	movs	r4, r0
   1af6a:	000d      	movs	r5, r1
   1af6c:	430b      	orrs	r3, r1
   1af6e:	d1eb      	bne.n	1af48 <_vfprintf_r+0xc98>
   1af70:	0032      	movs	r2, r6
   1af72:	ab32      	add	r3, sp, #200	; 0xc8
   1af74:	1a9b      	subs	r3, r3, r2
   1af76:	9611      	str	r6, [sp, #68]	; 0x44
   1af78:	940c      	str	r4, [sp, #48]	; 0x30
   1af7a:	950d      	str	r5, [sp, #52]	; 0x34
   1af7c:	464e      	mov	r6, r9
   1af7e:	930e      	str	r3, [sp, #56]	; 0x38
   1af80:	f7ff fb03 	bl	1a58a <_vfprintf_r+0x2da>
   1af84:	2300      	movs	r3, #0
   1af86:	930e      	str	r3, [sp, #56]	; 0x38
   1af88:	ab32      	add	r3, sp, #200	; 0xc8
   1af8a:	9311      	str	r3, [sp, #68]	; 0x44
   1af8c:	f7ff fafd 	bl	1a58a <_vfprintf_r+0x2da>
   1af90:	003a      	movs	r2, r7
   1af92:	4659      	mov	r1, fp
   1af94:	9806      	ldr	r0, [sp, #24]
   1af96:	f003 fc4b 	bl	1e830 <__sprint_r>
   1af9a:	2800      	cmp	r0, #0
   1af9c:	d000      	beq.n	1afa0 <_vfprintf_r+0xcf0>
   1af9e:	e717      	b.n	1add0 <_vfprintf_r+0xb20>
   1afa0:	ab16      	add	r3, sp, #88	; 0x58
   1afa2:	7fdb      	ldrb	r3, [r3, #31]
   1afa4:	68bc      	ldr	r4, [r7, #8]
   1afa6:	4698      	mov	r8, r3
   1afa8:	ae32      	add	r6, sp, #200	; 0xc8
   1afaa:	e513      	b.n	1a9d4 <_vfprintf_r+0x724>
   1afac:	46b1      	mov	r9, r6
   1afae:	e697      	b.n	1ace0 <_vfprintf_r+0xa30>
   1afb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1afb2:	1e5d      	subs	r5, r3, #1
   1afb4:	2d00      	cmp	r5, #0
   1afb6:	dc00      	bgt.n	1afba <_vfprintf_r+0xd0a>
   1afb8:	e616      	b.n	1abe8 <_vfprintf_r+0x938>
   1afba:	4ba9      	ldr	r3, [pc, #676]	; (1b260 <_vfprintf_r+0xfb0>)
   1afbc:	4699      	mov	r9, r3
   1afbe:	2d10      	cmp	r5, #16
   1afc0:	dc00      	bgt.n	1afc4 <_vfprintf_r+0xd14>
   1afc2:	e10a      	b.n	1b1da <_vfprintf_r+0xf2a>
   1afc4:	2310      	movs	r3, #16
   1afc6:	0022      	movs	r2, r4
   1afc8:	469a      	mov	sl, r3
   1afca:	465c      	mov	r4, fp
   1afcc:	4643      	mov	r3, r8
   1afce:	e004      	b.n	1afda <_vfprintf_r+0xd2a>
   1afd0:	3608      	adds	r6, #8
   1afd2:	3d10      	subs	r5, #16
   1afd4:	2d10      	cmp	r5, #16
   1afd6:	dc00      	bgt.n	1afda <_vfprintf_r+0xd2a>
   1afd8:	e0fc      	b.n	1b1d4 <_vfprintf_r+0xf24>
   1afda:	4649      	mov	r1, r9
   1afdc:	6031      	str	r1, [r6, #0]
   1afde:	4651      	mov	r1, sl
   1afe0:	3210      	adds	r2, #16
   1afe2:	3301      	adds	r3, #1
   1afe4:	6071      	str	r1, [r6, #4]
   1afe6:	60ba      	str	r2, [r7, #8]
   1afe8:	607b      	str	r3, [r7, #4]
   1afea:	2b07      	cmp	r3, #7
   1afec:	ddf0      	ble.n	1afd0 <_vfprintf_r+0xd20>
   1afee:	003a      	movs	r2, r7
   1aff0:	0021      	movs	r1, r4
   1aff2:	9806      	ldr	r0, [sp, #24]
   1aff4:	f003 fc1c 	bl	1e830 <__sprint_r>
   1aff8:	2800      	cmp	r0, #0
   1affa:	d000      	beq.n	1affe <_vfprintf_r+0xd4e>
   1affc:	e6c1      	b.n	1ad82 <_vfprintf_r+0xad2>
   1affe:	68ba      	ldr	r2, [r7, #8]
   1b000:	687b      	ldr	r3, [r7, #4]
   1b002:	ae32      	add	r6, sp, #200	; 0xc8
   1b004:	e7e5      	b.n	1afd2 <_vfprintf_r+0xd22>
   1b006:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b00a:	0008      	movs	r0, r1
   1b00c:	4310      	orrs	r0, r2
   1b00e:	2302      	movs	r3, #2
   1b010:	0002      	movs	r2, r0
   1b012:	f7ff fa93 	bl	1a53c <_vfprintf_r+0x28c>
   1b016:	46a3      	mov	fp, r4
   1b018:	0014      	movs	r4, r2
   1b01a:	464a      	mov	r2, r9
   1b01c:	1964      	adds	r4, r4, r5
   1b01e:	3301      	adds	r3, #1
   1b020:	6032      	str	r2, [r6, #0]
   1b022:	6075      	str	r5, [r6, #4]
   1b024:	60bc      	str	r4, [r7, #8]
   1b026:	607b      	str	r3, [r7, #4]
   1b028:	2b07      	cmp	r3, #7
   1b02a:	dc00      	bgt.n	1b02e <_vfprintf_r+0xd7e>
   1b02c:	e542      	b.n	1aab4 <_vfprintf_r+0x804>
   1b02e:	e5e8      	b.n	1ac02 <_vfprintf_r+0x952>
   1b030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b032:	681a      	ldr	r2, [r3, #0]
   1b034:	f7ff fa68 	bl	1a508 <_vfprintf_r+0x258>
   1b038:	6813      	ldr	r3, [r2, #0]
   1b03a:	9308      	str	r3, [sp, #32]
   1b03c:	f7ff fb57 	bl	1a6ee <_vfprintf_r+0x43e>
   1b040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b042:	681a      	ldr	r2, [r3, #0]
   1b044:	e412      	b.n	1a86c <_vfprintf_r+0x5bc>
   1b046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b048:	681a      	ldr	r2, [r3, #0]
   1b04a:	e426      	b.n	1a89a <_vfprintf_r+0x5ea>
   1b04c:	2b30      	cmp	r3, #48	; 0x30
   1b04e:	d100      	bne.n	1b052 <_vfprintf_r+0xda2>
   1b050:	e23c      	b.n	1b4cc <_vfprintf_r+0x121c>
   1b052:	2330      	movs	r3, #48	; 0x30
   1b054:	3a02      	subs	r2, #2
   1b056:	7013      	strb	r3, [r2, #0]
   1b058:	ab32      	add	r3, sp, #200	; 0xc8
   1b05a:	1a9b      	subs	r3, r3, r2
   1b05c:	930e      	str	r3, [sp, #56]	; 0x38
   1b05e:	9211      	str	r2, [sp, #68]	; 0x44
   1b060:	f7ff fa93 	bl	1a58a <_vfprintf_r+0x2da>
   1b064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b066:	2b09      	cmp	r3, #9
   1b068:	d900      	bls.n	1b06c <_vfprintf_r+0xdbc>
   1b06a:	e768      	b.n	1af3e <_vfprintf_r+0xc8e>
   1b06c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b06e:	2227      	movs	r2, #39	; 0x27
   1b070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b072:	a928      	add	r1, sp, #160	; 0xa0
   1b074:	3330      	adds	r3, #48	; 0x30
   1b076:	548b      	strb	r3, [r1, r2]
   1b078:	2301      	movs	r3, #1
   1b07a:	aa16      	add	r2, sp, #88	; 0x58
   1b07c:	4694      	mov	ip, r2
   1b07e:	930e      	str	r3, [sp, #56]	; 0x38
   1b080:	336e      	adds	r3, #110	; 0x6e
   1b082:	4463      	add	r3, ip
   1b084:	9409      	str	r4, [sp, #36]	; 0x24
   1b086:	9311      	str	r3, [sp, #68]	; 0x44
   1b088:	f7ff fa7f 	bl	1a58a <_vfprintf_r+0x2da>
   1b08c:	46c3      	mov	fp, r8
   1b08e:	46a9      	mov	r9, r5
   1b090:	46a0      	mov	r8, r4
   1b092:	0014      	movs	r4, r2
   1b094:	464a      	mov	r2, r9
   1b096:	6032      	str	r2, [r6, #0]
   1b098:	4642      	mov	r2, r8
   1b09a:	4444      	add	r4, r8
   1b09c:	3301      	adds	r3, #1
   1b09e:	6072      	str	r2, [r6, #4]
   1b0a0:	60bc      	str	r4, [r7, #8]
   1b0a2:	607b      	str	r3, [r7, #4]
   1b0a4:	2b07      	cmp	r3, #7
   1b0a6:	dc00      	bgt.n	1b0aa <_vfprintf_r+0xdfa>
   1b0a8:	e18d      	b.n	1b3c6 <_vfprintf_r+0x1116>
   1b0aa:	003a      	movs	r2, r7
   1b0ac:	4659      	mov	r1, fp
   1b0ae:	9806      	ldr	r0, [sp, #24]
   1b0b0:	f003 fbbe 	bl	1e830 <__sprint_r>
   1b0b4:	2800      	cmp	r0, #0
   1b0b6:	d000      	beq.n	1b0ba <_vfprintf_r+0xe0a>
   1b0b8:	e68a      	b.n	1add0 <_vfprintf_r+0xb20>
   1b0ba:	68bc      	ldr	r4, [r7, #8]
   1b0bc:	ae32      	add	r6, sp, #200	; 0xc8
   1b0be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b0c2:	4293      	cmp	r3, r2
   1b0c4:	db00      	blt.n	1b0c8 <_vfprintf_r+0xe18>
   1b0c6:	e179      	b.n	1b3bc <_vfprintf_r+0x110c>
   1b0c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1b0ca:	6032      	str	r2, [r6, #0]
   1b0cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b0ce:	4694      	mov	ip, r2
   1b0d0:	6072      	str	r2, [r6, #4]
   1b0d2:	687a      	ldr	r2, [r7, #4]
   1b0d4:	4464      	add	r4, ip
   1b0d6:	3201      	adds	r2, #1
   1b0d8:	60bc      	str	r4, [r7, #8]
   1b0da:	607a      	str	r2, [r7, #4]
   1b0dc:	2a07      	cmp	r2, #7
   1b0de:	dd00      	ble.n	1b0e2 <_vfprintf_r+0xe32>
   1b0e0:	e176      	b.n	1b3d0 <_vfprintf_r+0x1120>
   1b0e2:	3608      	adds	r6, #8
   1b0e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b0e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b0e8:	1ad3      	subs	r3, r2, r3
   1b0ea:	1a52      	subs	r2, r2, r1
   1b0ec:	4690      	mov	r8, r2
   1b0ee:	429a      	cmp	r2, r3
   1b0f0:	dd00      	ble.n	1b0f4 <_vfprintf_r+0xe44>
   1b0f2:	4698      	mov	r8, r3
   1b0f4:	4642      	mov	r2, r8
   1b0f6:	2a00      	cmp	r2, #0
   1b0f8:	dd0f      	ble.n	1b11a <_vfprintf_r+0xe6a>
   1b0fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b0fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b0fe:	468c      	mov	ip, r1
   1b100:	4462      	add	r2, ip
   1b102:	6032      	str	r2, [r6, #0]
   1b104:	4642      	mov	r2, r8
   1b106:	6072      	str	r2, [r6, #4]
   1b108:	687a      	ldr	r2, [r7, #4]
   1b10a:	4444      	add	r4, r8
   1b10c:	3201      	adds	r2, #1
   1b10e:	60bc      	str	r4, [r7, #8]
   1b110:	607a      	str	r2, [r7, #4]
   1b112:	2a07      	cmp	r2, #7
   1b114:	dd00      	ble.n	1b118 <_vfprintf_r+0xe68>
   1b116:	e289      	b.n	1b62c <_vfprintf_r+0x137c>
   1b118:	3608      	adds	r6, #8
   1b11a:	4642      	mov	r2, r8
   1b11c:	43d5      	mvns	r5, r2
   1b11e:	17ed      	asrs	r5, r5, #31
   1b120:	4015      	ands	r5, r2
   1b122:	1b5d      	subs	r5, r3, r5
   1b124:	2d00      	cmp	r5, #0
   1b126:	dc00      	bgt.n	1b12a <_vfprintf_r+0xe7a>
   1b128:	e4c5      	b.n	1aab6 <_vfprintf_r+0x806>
   1b12a:	4a4d      	ldr	r2, [pc, #308]	; (1b260 <_vfprintf_r+0xfb0>)
   1b12c:	687b      	ldr	r3, [r7, #4]
   1b12e:	4691      	mov	r9, r2
   1b130:	2d10      	cmp	r5, #16
   1b132:	dc00      	bgt.n	1b136 <_vfprintf_r+0xe86>
   1b134:	e771      	b.n	1b01a <_vfprintf_r+0xd6a>
   1b136:	2210      	movs	r2, #16
   1b138:	4690      	mov	r8, r2
   1b13a:	0022      	movs	r2, r4
   1b13c:	465c      	mov	r4, fp
   1b13e:	e004      	b.n	1b14a <_vfprintf_r+0xe9a>
   1b140:	3608      	adds	r6, #8
   1b142:	3d10      	subs	r5, #16
   1b144:	2d10      	cmp	r5, #16
   1b146:	dc00      	bgt.n	1b14a <_vfprintf_r+0xe9a>
   1b148:	e765      	b.n	1b016 <_vfprintf_r+0xd66>
   1b14a:	4649      	mov	r1, r9
   1b14c:	6031      	str	r1, [r6, #0]
   1b14e:	4641      	mov	r1, r8
   1b150:	3210      	adds	r2, #16
   1b152:	3301      	adds	r3, #1
   1b154:	6071      	str	r1, [r6, #4]
   1b156:	60ba      	str	r2, [r7, #8]
   1b158:	607b      	str	r3, [r7, #4]
   1b15a:	2b07      	cmp	r3, #7
   1b15c:	ddf0      	ble.n	1b140 <_vfprintf_r+0xe90>
   1b15e:	003a      	movs	r2, r7
   1b160:	0021      	movs	r1, r4
   1b162:	9806      	ldr	r0, [sp, #24]
   1b164:	f003 fb64 	bl	1e830 <__sprint_r>
   1b168:	2800      	cmp	r0, #0
   1b16a:	d000      	beq.n	1b16e <_vfprintf_r+0xebe>
   1b16c:	e609      	b.n	1ad82 <_vfprintf_r+0xad2>
   1b16e:	68ba      	ldr	r2, [r7, #8]
   1b170:	687b      	ldr	r3, [r7, #4]
   1b172:	ae32      	add	r6, sp, #200	; 0xc8
   1b174:	e7e5      	b.n	1b142 <_vfprintf_r+0xe92>
   1b176:	003a      	movs	r2, r7
   1b178:	4659      	mov	r1, fp
   1b17a:	9806      	ldr	r0, [sp, #24]
   1b17c:	f003 fb58 	bl	1e830 <__sprint_r>
   1b180:	2800      	cmp	r0, #0
   1b182:	d000      	beq.n	1b186 <_vfprintf_r+0xed6>
   1b184:	e624      	b.n	1add0 <_vfprintf_r+0xb20>
   1b186:	68bc      	ldr	r4, [r7, #8]
   1b188:	687b      	ldr	r3, [r7, #4]
   1b18a:	ae32      	add	r6, sp, #200	; 0xc8
   1b18c:	e504      	b.n	1ab98 <_vfprintf_r+0x8e8>
   1b18e:	2307      	movs	r3, #7
   1b190:	3207      	adds	r2, #7
   1b192:	439a      	bics	r2, r3
   1b194:	3301      	adds	r3, #1
   1b196:	469c      	mov	ip, r3
   1b198:	4494      	add	ip, r2
   1b19a:	4663      	mov	r3, ip
   1b19c:	930f      	str	r3, [sp, #60]	; 0x3c
   1b19e:	6853      	ldr	r3, [r2, #4]
   1b1a0:	6812      	ldr	r2, [r2, #0]
   1b1a2:	930d      	str	r3, [sp, #52]	; 0x34
   1b1a4:	920c      	str	r2, [sp, #48]	; 0x30
   1b1a6:	f7ff faa7 	bl	1a6f8 <_vfprintf_r+0x448>
   1b1aa:	2207      	movs	r2, #7
   1b1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b1ae:	3307      	adds	r3, #7
   1b1b0:	4393      	bics	r3, r2
   1b1b2:	3201      	adds	r2, #1
   1b1b4:	4694      	mov	ip, r2
   1b1b6:	449c      	add	ip, r3
   1b1b8:	4662      	mov	r2, ip
   1b1ba:	920f      	str	r2, [sp, #60]	; 0x3c
   1b1bc:	681a      	ldr	r2, [r3, #0]
   1b1be:	685b      	ldr	r3, [r3, #4]
   1b1c0:	0011      	movs	r1, r2
   1b1c2:	001a      	movs	r2, r3
   1b1c4:	0008      	movs	r0, r1
   1b1c6:	4310      	orrs	r0, r2
   1b1c8:	910c      	str	r1, [sp, #48]	; 0x30
   1b1ca:	920d      	str	r2, [sp, #52]	; 0x34
   1b1cc:	2300      	movs	r3, #0
   1b1ce:	0002      	movs	r2, r0
   1b1d0:	f7ff f9b4 	bl	1a53c <_vfprintf_r+0x28c>
   1b1d4:	46a3      	mov	fp, r4
   1b1d6:	4698      	mov	r8, r3
   1b1d8:	0014      	movs	r4, r2
   1b1da:	464b      	mov	r3, r9
   1b1dc:	6075      	str	r5, [r6, #4]
   1b1de:	6033      	str	r3, [r6, #0]
   1b1e0:	1964      	adds	r4, r4, r5
   1b1e2:	e4f7      	b.n	1abd4 <_vfprintf_r+0x924>
   1b1e4:	003a      	movs	r2, r7
   1b1e6:	4659      	mov	r1, fp
   1b1e8:	9806      	ldr	r0, [sp, #24]
   1b1ea:	f003 fb21 	bl	1e830 <__sprint_r>
   1b1ee:	2800      	cmp	r0, #0
   1b1f0:	d000      	beq.n	1b1f4 <_vfprintf_r+0xf44>
   1b1f2:	e5ed      	b.n	1add0 <_vfprintf_r+0xb20>
   1b1f4:	687b      	ldr	r3, [r7, #4]
   1b1f6:	68bc      	ldr	r4, [r7, #8]
   1b1f8:	4698      	mov	r8, r3
   1b1fa:	ae32      	add	r6, sp, #200	; 0xc8
   1b1fc:	e4da      	b.n	1abb4 <_vfprintf_r+0x904>
   1b1fe:	2207      	movs	r2, #7
   1b200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b202:	3307      	adds	r3, #7
   1b204:	4393      	bics	r3, r2
   1b206:	3201      	adds	r2, #1
   1b208:	4694      	mov	ip, r2
   1b20a:	449c      	add	ip, r3
   1b20c:	4662      	mov	r2, ip
   1b20e:	920f      	str	r2, [sp, #60]	; 0x3c
   1b210:	681a      	ldr	r2, [r3, #0]
   1b212:	685b      	ldr	r3, [r3, #4]
   1b214:	0011      	movs	r1, r2
   1b216:	001a      	movs	r2, r3
   1b218:	0008      	movs	r0, r1
   1b21a:	4310      	orrs	r0, r2
   1b21c:	910c      	str	r1, [sp, #48]	; 0x30
   1b21e:	920d      	str	r2, [sp, #52]	; 0x34
   1b220:	2301      	movs	r3, #1
   1b222:	0002      	movs	r2, r0
   1b224:	f7ff f98a 	bl	1a53c <_vfprintf_r+0x28c>
   1b228:	2207      	movs	r2, #7
   1b22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b22c:	3307      	adds	r3, #7
   1b22e:	4393      	bics	r3, r2
   1b230:	3201      	adds	r2, #1
   1b232:	4694      	mov	ip, r2
   1b234:	449c      	add	ip, r3
   1b236:	4662      	mov	r2, ip
   1b238:	920f      	str	r2, [sp, #60]	; 0x3c
   1b23a:	681a      	ldr	r2, [r3, #0]
   1b23c:	685b      	ldr	r3, [r3, #4]
   1b23e:	920c      	str	r2, [sp, #48]	; 0x30
   1b240:	930d      	str	r3, [sp, #52]	; 0x34
   1b242:	f7ff f966 	bl	1a512 <_vfprintf_r+0x262>
   1b246:	003a      	movs	r2, r7
   1b248:	4659      	mov	r1, fp
   1b24a:	9806      	ldr	r0, [sp, #24]
   1b24c:	f003 faf0 	bl	1e830 <__sprint_r>
   1b250:	2800      	cmp	r0, #0
   1b252:	d000      	beq.n	1b256 <_vfprintf_r+0xfa6>
   1b254:	e5bc      	b.n	1add0 <_vfprintf_r+0xb20>
   1b256:	68bc      	ldr	r4, [r7, #8]
   1b258:	ae32      	add	r6, sp, #200	; 0xc8
   1b25a:	f7ff fbe2 	bl	1aa22 <_vfprintf_r+0x772>
   1b25e:	46c0      	nop			; (mov r8, r8)
   1b260:	00020388 	.word	0x00020388
   1b264:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b266:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b268:	2300      	movs	r3, #0
   1b26a:	4242      	negs	r2, r0
   1b26c:	418b      	sbcs	r3, r1
   1b26e:	0011      	movs	r1, r2
   1b270:	001a      	movs	r2, r3
   1b272:	232d      	movs	r3, #45	; 0x2d
   1b274:	a816      	add	r0, sp, #88	; 0x58
   1b276:	77c3      	strb	r3, [r0, #31]
   1b278:	0008      	movs	r0, r1
   1b27a:	4310      	orrs	r0, r2
   1b27c:	910c      	str	r1, [sp, #48]	; 0x30
   1b27e:	920d      	str	r2, [sp, #52]	; 0x34
   1b280:	4698      	mov	r8, r3
   1b282:	0002      	movs	r2, r0
   1b284:	3b2c      	subs	r3, #44	; 0x2c
   1b286:	f7ff f95d 	bl	1a544 <_vfprintf_r+0x294>
   1b28a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b28c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b28e:	000a      	movs	r2, r1
   1b290:	0008      	movs	r0, r1
   1b292:	002b      	movs	r3, r5
   1b294:	0029      	movs	r1, r5
   1b296:	f003 fd65 	bl	1ed64 <__aeabi_dcmpun>
   1b29a:	2800      	cmp	r0, #0
   1b29c:	d000      	beq.n	1b2a0 <_vfprintf_r+0xff0>
   1b29e:	e2c6      	b.n	1b82e <_vfprintf_r+0x157e>
   1b2a0:	4653      	mov	r3, sl
   1b2a2:	3301      	adds	r3, #1
   1b2a4:	d100      	bne.n	1b2a8 <_vfprintf_r+0xff8>
   1b2a6:	e09f      	b.n	1b3e8 <_vfprintf_r+0x1138>
   1b2a8:	2320      	movs	r3, #32
   1b2aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b2ac:	439a      	bics	r2, r3
   1b2ae:	920e      	str	r2, [sp, #56]	; 0x38
   1b2b0:	2a47      	cmp	r2, #71	; 0x47
   1b2b2:	d100      	bne.n	1b2b6 <_vfprintf_r+0x1006>
   1b2b4:	e1a1      	b.n	1b5fa <_vfprintf_r+0x134a>
   1b2b6:	2380      	movs	r3, #128	; 0x80
   1b2b8:	005b      	lsls	r3, r3, #1
   1b2ba:	4323      	orrs	r3, r4
   1b2bc:	9309      	str	r3, [sp, #36]	; 0x24
   1b2be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b2c0:	2b00      	cmp	r3, #0
   1b2c2:	da00      	bge.n	1b2c6 <_vfprintf_r+0x1016>
   1b2c4:	e1ed      	b.n	1b6a2 <_vfprintf_r+0x13f2>
   1b2c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b2c8:	9308      	str	r3, [sp, #32]
   1b2ca:	2300      	movs	r3, #0
   1b2cc:	4691      	mov	r9, r2
   1b2ce:	9310      	str	r3, [sp, #64]	; 0x40
   1b2d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b2d2:	2b66      	cmp	r3, #102	; 0x66
   1b2d4:	d100      	bne.n	1b2d8 <_vfprintf_r+0x1028>
   1b2d6:	e1b8      	b.n	1b64a <_vfprintf_r+0x139a>
   1b2d8:	2b46      	cmp	r3, #70	; 0x46
   1b2da:	d100      	bne.n	1b2de <_vfprintf_r+0x102e>
   1b2dc:	e237      	b.n	1b74e <_vfprintf_r+0x149e>
   1b2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b2e0:	9806      	ldr	r0, [sp, #24]
   1b2e2:	3a45      	subs	r2, #69	; 0x45
   1b2e4:	0013      	movs	r3, r2
   1b2e6:	4259      	negs	r1, r3
   1b2e8:	4159      	adcs	r1, r3
   1b2ea:	ab20      	add	r3, sp, #128	; 0x80
   1b2ec:	000d      	movs	r5, r1
   1b2ee:	9303      	str	r3, [sp, #12]
   1b2f0:	ab1f      	add	r3, sp, #124	; 0x7c
   1b2f2:	9302      	str	r3, [sp, #8]
   1b2f4:	2302      	movs	r3, #2
   1b2f6:	aa23      	add	r2, sp, #140	; 0x8c
   1b2f8:	4455      	add	r5, sl
   1b2fa:	921b      	str	r2, [sp, #108]	; 0x6c
   1b2fc:	9204      	str	r2, [sp, #16]
   1b2fe:	9300      	str	r3, [sp, #0]
   1b300:	9501      	str	r5, [sp, #4]
   1b302:	9b08      	ldr	r3, [sp, #32]
   1b304:	464a      	mov	r2, r9
   1b306:	f000 fcab 	bl	1bc60 <_dtoa_r>
   1b30a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b30c:	9011      	str	r0, [sp, #68]	; 0x44
   1b30e:	2b67      	cmp	r3, #103	; 0x67
   1b310:	d000      	beq.n	1b314 <_vfprintf_r+0x1064>
   1b312:	e20b      	b.n	1b72c <_vfprintf_r+0x147c>
   1b314:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b316:	4698      	mov	r8, r3
   1b318:	44a8      	add	r8, r5
   1b31a:	07e3      	lsls	r3, r4, #31
   1b31c:	d400      	bmi.n	1b320 <_vfprintf_r+0x1070>
   1b31e:	e277      	b.n	1b810 <_vfprintf_r+0x1560>
   1b320:	2300      	movs	r3, #0
   1b322:	2200      	movs	r2, #0
   1b324:	4648      	mov	r0, r9
   1b326:	9908      	ldr	r1, [sp, #32]
   1b328:	f7fc fd96 	bl	17e58 <__aeabi_dcmpeq>
   1b32c:	4643      	mov	r3, r8
   1b32e:	2800      	cmp	r0, #0
   1b330:	d10a      	bne.n	1b348 <_vfprintf_r+0x1098>
   1b332:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b334:	4543      	cmp	r3, r8
   1b336:	d207      	bcs.n	1b348 <_vfprintf_r+0x1098>
   1b338:	2130      	movs	r1, #48	; 0x30
   1b33a:	4640      	mov	r0, r8
   1b33c:	1c5a      	adds	r2, r3, #1
   1b33e:	9223      	str	r2, [sp, #140]	; 0x8c
   1b340:	7019      	strb	r1, [r3, #0]
   1b342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b344:	4298      	cmp	r0, r3
   1b346:	d8f9      	bhi.n	1b33c <_vfprintf_r+0x108c>
   1b348:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b34a:	1a9b      	subs	r3, r3, r2
   1b34c:	9314      	str	r3, [sp, #80]	; 0x50
   1b34e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b350:	2b47      	cmp	r3, #71	; 0x47
   1b352:	d100      	bne.n	1b356 <_vfprintf_r+0x10a6>
   1b354:	e0d0      	b.n	1b4f8 <_vfprintf_r+0x1248>
   1b356:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b358:	2b65      	cmp	r3, #101	; 0x65
   1b35a:	dc00      	bgt.n	1b35e <_vfprintf_r+0x10ae>
   1b35c:	e2d5      	b.n	1b90a <_vfprintf_r+0x165a>
   1b35e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b360:	2b66      	cmp	r3, #102	; 0x66
   1b362:	d100      	bne.n	1b366 <_vfprintf_r+0x10b6>
   1b364:	e1c6      	b.n	1b6f4 <_vfprintf_r+0x1444>
   1b366:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b368:	9313      	str	r3, [sp, #76]	; 0x4c
   1b36a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b36c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b36e:	0019      	movs	r1, r3
   1b370:	4291      	cmp	r1, r2
   1b372:	dd00      	ble.n	1b376 <_vfprintf_r+0x10c6>
   1b374:	e1a0      	b.n	1b6b8 <_vfprintf_r+0x1408>
   1b376:	07e3      	lsls	r3, r4, #31
   1b378:	d500      	bpl.n	1b37c <_vfprintf_r+0x10cc>
   1b37a:	e242      	b.n	1b802 <_vfprintf_r+0x1552>
   1b37c:	43d3      	mvns	r3, r2
   1b37e:	17db      	asrs	r3, r3, #31
   1b380:	0011      	movs	r1, r2
   1b382:	401a      	ands	r2, r3
   1b384:	2367      	movs	r3, #103	; 0x67
   1b386:	9208      	str	r2, [sp, #32]
   1b388:	910e      	str	r1, [sp, #56]	; 0x38
   1b38a:	9312      	str	r3, [sp, #72]	; 0x48
   1b38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b38e:	2b00      	cmp	r3, #0
   1b390:	d000      	beq.n	1b394 <_vfprintf_r+0x10e4>
   1b392:	e0a9      	b.n	1b4e8 <_vfprintf_r+0x1238>
   1b394:	ab16      	add	r3, sp, #88	; 0x58
   1b396:	7fdb      	ldrb	r3, [r3, #31]
   1b398:	4698      	mov	r8, r3
   1b39a:	2300      	movs	r3, #0
   1b39c:	469a      	mov	sl, r3
   1b39e:	f7ff f8fc 	bl	1a59a <_vfprintf_r+0x2ea>
   1b3a2:	46cb      	mov	fp, r9
   1b3a4:	46a1      	mov	r9, r4
   1b3a6:	0014      	movs	r4, r2
   1b3a8:	e637      	b.n	1b01a <_vfprintf_r+0xd6a>
   1b3aa:	464b      	mov	r3, r9
   1b3ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b3ae:	f002 f871 	bl	1d494 <__retarget_lock_release_recursive>
   1b3b2:	2301      	movs	r3, #1
   1b3b4:	425b      	negs	r3, r3
   1b3b6:	930a      	str	r3, [sp, #40]	; 0x28
   1b3b8:	f7ff f82b 	bl	1a412 <_vfprintf_r+0x162>
   1b3bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b3be:	07d2      	lsls	r2, r2, #31
   1b3c0:	d400      	bmi.n	1b3c4 <_vfprintf_r+0x1114>
   1b3c2:	e68f      	b.n	1b0e4 <_vfprintf_r+0xe34>
   1b3c4:	e680      	b.n	1b0c8 <_vfprintf_r+0xe18>
   1b3c6:	3608      	adds	r6, #8
   1b3c8:	e679      	b.n	1b0be <_vfprintf_r+0xe0e>
   1b3ca:	68bc      	ldr	r4, [r7, #8]
   1b3cc:	f7ff fb73 	bl	1aab6 <_vfprintf_r+0x806>
   1b3d0:	003a      	movs	r2, r7
   1b3d2:	4659      	mov	r1, fp
   1b3d4:	9806      	ldr	r0, [sp, #24]
   1b3d6:	f003 fa2b 	bl	1e830 <__sprint_r>
   1b3da:	2800      	cmp	r0, #0
   1b3dc:	d000      	beq.n	1b3e0 <_vfprintf_r+0x1130>
   1b3de:	e4f7      	b.n	1add0 <_vfprintf_r+0xb20>
   1b3e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b3e2:	68bc      	ldr	r4, [r7, #8]
   1b3e4:	ae32      	add	r6, sp, #200	; 0xc8
   1b3e6:	e67d      	b.n	1b0e4 <_vfprintf_r+0xe34>
   1b3e8:	2320      	movs	r3, #32
   1b3ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b3ec:	439a      	bics	r2, r3
   1b3ee:	3b1a      	subs	r3, #26
   1b3f0:	920e      	str	r2, [sp, #56]	; 0x38
   1b3f2:	469a      	mov	sl, r3
   1b3f4:	e75f      	b.n	1b2b6 <_vfprintf_r+0x1006>
   1b3f6:	232d      	movs	r3, #45	; 0x2d
   1b3f8:	aa16      	add	r2, sp, #88	; 0x58
   1b3fa:	77d3      	strb	r3, [r2, #31]
   1b3fc:	4698      	mov	r8, r3
   1b3fe:	f7ff faa8 	bl	1a952 <_vfprintf_r+0x6a2>
   1b402:	003a      	movs	r2, r7
   1b404:	4659      	mov	r1, fp
   1b406:	9806      	ldr	r0, [sp, #24]
   1b408:	f003 fa12 	bl	1e830 <__sprint_r>
   1b40c:	2800      	cmp	r0, #0
   1b40e:	d000      	beq.n	1b412 <_vfprintf_r+0x1162>
   1b410:	e4de      	b.n	1add0 <_vfprintf_r+0xb20>
   1b412:	ae32      	add	r6, sp, #200	; 0xc8
   1b414:	e419      	b.n	1ac4a <_vfprintf_r+0x99a>
   1b416:	4be3      	ldr	r3, [pc, #908]	; (1b7a4 <_vfprintf_r+0x14f4>)
   1b418:	3401      	adds	r4, #1
   1b41a:	6033      	str	r3, [r6, #0]
   1b41c:	2301      	movs	r3, #1
   1b41e:	6073      	str	r3, [r6, #4]
   1b420:	687b      	ldr	r3, [r7, #4]
   1b422:	60bc      	str	r4, [r7, #8]
   1b424:	3301      	adds	r3, #1
   1b426:	607b      	str	r3, [r7, #4]
   1b428:	2b07      	cmp	r3, #7
   1b42a:	dd00      	ble.n	1b42e <_vfprintf_r+0x117e>
   1b42c:	e155      	b.n	1b6da <_vfprintf_r+0x142a>
   1b42e:	3608      	adds	r6, #8
   1b430:	2800      	cmp	r0, #0
   1b432:	d107      	bne.n	1b444 <_vfprintf_r+0x1194>
   1b434:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b436:	2b00      	cmp	r3, #0
   1b438:	d104      	bne.n	1b444 <_vfprintf_r+0x1194>
   1b43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b43c:	07db      	lsls	r3, r3, #31
   1b43e:	d401      	bmi.n	1b444 <_vfprintf_r+0x1194>
   1b440:	f7ff fb39 	bl	1aab6 <_vfprintf_r+0x806>
   1b444:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b446:	6033      	str	r3, [r6, #0]
   1b448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b44a:	1919      	adds	r1, r3, r4
   1b44c:	6073      	str	r3, [r6, #4]
   1b44e:	687b      	ldr	r3, [r7, #4]
   1b450:	60b9      	str	r1, [r7, #8]
   1b452:	3301      	adds	r3, #1
   1b454:	607b      	str	r3, [r7, #4]
   1b456:	2b07      	cmp	r3, #7
   1b458:	dd00      	ble.n	1b45c <_vfprintf_r+0x11ac>
   1b45a:	e1c4      	b.n	1b7e6 <_vfprintf_r+0x1536>
   1b45c:	0032      	movs	r2, r6
   1b45e:	3208      	adds	r2, #8
   1b460:	2800      	cmp	r0, #0
   1b462:	da00      	bge.n	1b466 <_vfprintf_r+0x11b6>
   1b464:	e195      	b.n	1b792 <_vfprintf_r+0x14e2>
   1b466:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b468:	3301      	adds	r3, #1
   1b46a:	6010      	str	r0, [r2, #0]
   1b46c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b46e:	607b      	str	r3, [r7, #4]
   1b470:	1844      	adds	r4, r0, r1
   1b472:	6050      	str	r0, [r2, #4]
   1b474:	60bc      	str	r4, [r7, #8]
   1b476:	2b07      	cmp	r3, #7
   1b478:	dd01      	ble.n	1b47e <_vfprintf_r+0x11ce>
   1b47a:	f7ff fbc2 	bl	1ac02 <_vfprintf_r+0x952>
   1b47e:	3208      	adds	r2, #8
   1b480:	0016      	movs	r6, r2
   1b482:	f7ff fb18 	bl	1aab6 <_vfprintf_r+0x806>
   1b486:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b48a:	680b      	ldr	r3, [r1, #0]
   1b48c:	601a      	str	r2, [r3, #0]
   1b48e:	17d2      	asrs	r2, r2, #31
   1b490:	605a      	str	r2, [r3, #4]
   1b492:	000b      	movs	r3, r1
   1b494:	3304      	adds	r3, #4
   1b496:	930f      	str	r3, [sp, #60]	; 0x3c
   1b498:	f7fe ff58 	bl	1a34c <_vfprintf_r+0x9c>
   1b49c:	464b      	mov	r3, r9
   1b49e:	9a07      	ldr	r2, [sp, #28]
   1b4a0:	431c      	orrs	r4, r3
   1b4a2:	3201      	adds	r2, #1
   1b4a4:	7813      	ldrb	r3, [r2, #0]
   1b4a6:	9207      	str	r2, [sp, #28]
   1b4a8:	f7fe ff8b 	bl	1a3c2 <_vfprintf_r+0x112>
   1b4ac:	003a      	movs	r2, r7
   1b4ae:	4659      	mov	r1, fp
   1b4b0:	9806      	ldr	r0, [sp, #24]
   1b4b2:	f003 f9bd 	bl	1e830 <__sprint_r>
   1b4b6:	2800      	cmp	r0, #0
   1b4b8:	d000      	beq.n	1b4bc <_vfprintf_r+0x120c>
   1b4ba:	e489      	b.n	1add0 <_vfprintf_r+0xb20>
   1b4bc:	68bc      	ldr	r4, [r7, #8]
   1b4be:	ae32      	add	r6, sp, #200	; 0xc8
   1b4c0:	f7ff fbdc 	bl	1ac7c <_vfprintf_r+0x9cc>
   1b4c4:	4bb8      	ldr	r3, [pc, #736]	; (1b7a8 <_vfprintf_r+0x14f8>)
   1b4c6:	9311      	str	r3, [sp, #68]	; 0x44
   1b4c8:	f7ff fa4a 	bl	1a960 <_vfprintf_r+0x6b0>
   1b4cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b4ce:	ab32      	add	r3, sp, #200	; 0xc8
   1b4d0:	1a9b      	subs	r3, r3, r2
   1b4d2:	930e      	str	r3, [sp, #56]	; 0x38
   1b4d4:	f7ff f859 	bl	1a58a <_vfprintf_r+0x2da>
   1b4d8:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b4da:	f7fe feb7 	bl	1a24c <strlen>
   1b4de:	0002      	movs	r2, r0
   1b4e0:	900e      	str	r0, [sp, #56]	; 0x38
   1b4e2:	0003      	movs	r3, r0
   1b4e4:	f7ff f9a1 	bl	1a82a <_vfprintf_r+0x57a>
   1b4e8:	232d      	movs	r3, #45	; 0x2d
   1b4ea:	aa16      	add	r2, sp, #88	; 0x58
   1b4ec:	77d3      	strb	r3, [r2, #31]
   1b4ee:	4698      	mov	r8, r3
   1b4f0:	2300      	movs	r3, #0
   1b4f2:	469a      	mov	sl, r3
   1b4f4:	f7ff f854 	bl	1a5a0 <_vfprintf_r+0x2f0>
   1b4f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b4fa:	9313      	str	r3, [sp, #76]	; 0x4c
   1b4fc:	1cda      	adds	r2, r3, #3
   1b4fe:	db02      	blt.n	1b506 <_vfprintf_r+0x1256>
   1b500:	459a      	cmp	sl, r3
   1b502:	db00      	blt.n	1b506 <_vfprintf_r+0x1256>
   1b504:	e731      	b.n	1b36a <_vfprintf_r+0x10ba>
   1b506:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b508:	3b02      	subs	r3, #2
   1b50a:	9312      	str	r3, [sp, #72]	; 0x48
   1b50c:	222c      	movs	r2, #44	; 0x2c
   1b50e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b510:	2148      	movs	r1, #72	; 0x48
   1b512:	1e5d      	subs	r5, r3, #1
   1b514:	ab16      	add	r3, sp, #88	; 0x58
   1b516:	189b      	adds	r3, r3, r2
   1b518:	466a      	mov	r2, sp
   1b51a:	1852      	adds	r2, r2, r1
   1b51c:	7812      	ldrb	r2, [r2, #0]
   1b51e:	951f      	str	r5, [sp, #124]	; 0x7c
   1b520:	701a      	strb	r2, [r3, #0]
   1b522:	2d00      	cmp	r5, #0
   1b524:	da00      	bge.n	1b528 <_vfprintf_r+0x1278>
   1b526:	e1cb      	b.n	1b8c0 <_vfprintf_r+0x1610>
   1b528:	212d      	movs	r1, #45	; 0x2d
   1b52a:	232b      	movs	r3, #43	; 0x2b
   1b52c:	aa16      	add	r2, sp, #88	; 0x58
   1b52e:	1852      	adds	r2, r2, r1
   1b530:	7013      	strb	r3, [r2, #0]
   1b532:	2d09      	cmp	r5, #9
   1b534:	dc00      	bgt.n	1b538 <_vfprintf_r+0x1288>
   1b536:	e16d      	b.n	1b814 <_vfprintf_r+0x1564>
   1b538:	aa16      	add	r2, sp, #88	; 0x58
   1b53a:	233b      	movs	r3, #59	; 0x3b
   1b53c:	4694      	mov	ip, r2
   1b53e:	4463      	add	r3, ip
   1b540:	469a      	mov	sl, r3
   1b542:	46b1      	mov	r9, r6
   1b544:	46a0      	mov	r8, r4
   1b546:	4656      	mov	r6, sl
   1b548:	e000      	b.n	1b54c <_vfprintf_r+0x129c>
   1b54a:	0026      	movs	r6, r4
   1b54c:	0028      	movs	r0, r5
   1b54e:	210a      	movs	r1, #10
   1b550:	f7fc fc6c 	bl	17e2c <__aeabi_idivmod>
   1b554:	1e74      	subs	r4, r6, #1
   1b556:	3130      	adds	r1, #48	; 0x30
   1b558:	7021      	strb	r1, [r4, #0]
   1b55a:	0028      	movs	r0, r5
   1b55c:	210a      	movs	r1, #10
   1b55e:	f7fc fb7f 	bl	17c60 <__divsi3>
   1b562:	0005      	movs	r5, r0
   1b564:	2809      	cmp	r0, #9
   1b566:	dcf0      	bgt.n	1b54a <_vfprintf_r+0x129a>
   1b568:	0023      	movs	r3, r4
   1b56a:	4644      	mov	r4, r8
   1b56c:	46b0      	mov	r8, r6
   1b56e:	464e      	mov	r6, r9
   1b570:	4699      	mov	r9, r3
   1b572:	0003      	movs	r3, r0
   1b574:	3330      	adds	r3, #48	; 0x30
   1b576:	b2d8      	uxtb	r0, r3
   1b578:	4643      	mov	r3, r8
   1b57a:	3b02      	subs	r3, #2
   1b57c:	7018      	strb	r0, [r3, #0]
   1b57e:	459a      	cmp	sl, r3
   1b580:	d800      	bhi.n	1b584 <_vfprintf_r+0x12d4>
   1b582:	e1f6      	b.n	1b972 <_vfprintf_r+0x16c2>
   1b584:	4642      	mov	r2, r8
   1b586:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b588:	4645      	mov	r5, r8
   1b58a:	1a99      	subs	r1, r3, r2
   1b58c:	2301      	movs	r3, #1
   1b58e:	3107      	adds	r1, #7
   1b590:	425b      	negs	r3, r3
   1b592:	e001      	b.n	1b598 <_vfprintf_r+0x12e8>
   1b594:	5ce8      	ldrb	r0, [r5, r3]
   1b596:	3301      	adds	r3, #1
   1b598:	aa21      	add	r2, sp, #132	; 0x84
   1b59a:	18d2      	adds	r2, r2, r3
   1b59c:	70d0      	strb	r0, [r2, #3]
   1b59e:	428b      	cmp	r3, r1
   1b5a0:	d1f8      	bne.n	1b594 <_vfprintf_r+0x12e4>
   1b5a2:	a916      	add	r1, sp, #88	; 0x58
   1b5a4:	468c      	mov	ip, r1
   1b5a6:	222e      	movs	r2, #46	; 0x2e
   1b5a8:	464b      	mov	r3, r9
   1b5aa:	4462      	add	r2, ip
   1b5ac:	4694      	mov	ip, r2
   1b5ae:	1afb      	subs	r3, r7, r3
   1b5b0:	4463      	add	r3, ip
   1b5b2:	aa21      	add	r2, sp, #132	; 0x84
   1b5b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b5b6:	1a9b      	subs	r3, r3, r2
   1b5b8:	469c      	mov	ip, r3
   1b5ba:	000a      	movs	r2, r1
   1b5bc:	4462      	add	r2, ip
   1b5be:	931a      	str	r3, [sp, #104]	; 0x68
   1b5c0:	920e      	str	r2, [sp, #56]	; 0x38
   1b5c2:	2901      	cmp	r1, #1
   1b5c4:	dc00      	bgt.n	1b5c8 <_vfprintf_r+0x1318>
   1b5c6:	e170      	b.n	1b8aa <_vfprintf_r+0x15fa>
   1b5c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b5cc:	4694      	mov	ip, r2
   1b5ce:	4463      	add	r3, ip
   1b5d0:	001a      	movs	r2, r3
   1b5d2:	930e      	str	r3, [sp, #56]	; 0x38
   1b5d4:	43db      	mvns	r3, r3
   1b5d6:	17db      	asrs	r3, r3, #31
   1b5d8:	401a      	ands	r2, r3
   1b5da:	2300      	movs	r3, #0
   1b5dc:	9208      	str	r2, [sp, #32]
   1b5de:	9313      	str	r3, [sp, #76]	; 0x4c
   1b5e0:	e6d4      	b.n	1b38c <_vfprintf_r+0x10dc>
   1b5e2:	003a      	movs	r2, r7
   1b5e4:	4659      	mov	r1, fp
   1b5e6:	9806      	ldr	r0, [sp, #24]
   1b5e8:	f003 f922 	bl	1e830 <__sprint_r>
   1b5ec:	2800      	cmp	r0, #0
   1b5ee:	d001      	beq.n	1b5f4 <_vfprintf_r+0x1344>
   1b5f0:	f7ff fbee 	bl	1add0 <_vfprintf_r+0xb20>
   1b5f4:	68bc      	ldr	r4, [r7, #8]
   1b5f6:	ae32      	add	r6, sp, #200	; 0xc8
   1b5f8:	e46a      	b.n	1aed0 <_vfprintf_r+0xc20>
   1b5fa:	4653      	mov	r3, sl
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	d000      	beq.n	1b602 <_vfprintf_r+0x1352>
   1b600:	e659      	b.n	1b2b6 <_vfprintf_r+0x1006>
   1b602:	3301      	adds	r3, #1
   1b604:	469a      	mov	sl, r3
   1b606:	e656      	b.n	1b2b6 <_vfprintf_r+0x1006>
   1b608:	4653      	mov	r3, sl
   1b60a:	9308      	str	r3, [sp, #32]
   1b60c:	2b06      	cmp	r3, #6
   1b60e:	d901      	bls.n	1b614 <_vfprintf_r+0x1364>
   1b610:	2306      	movs	r3, #6
   1b612:	9308      	str	r3, [sp, #32]
   1b614:	9b08      	ldr	r3, [sp, #32]
   1b616:	950f      	str	r5, [sp, #60]	; 0x3c
   1b618:	930e      	str	r3, [sp, #56]	; 0x38
   1b61a:	2300      	movs	r3, #0
   1b61c:	4698      	mov	r8, r3
   1b61e:	469a      	mov	sl, r3
   1b620:	9313      	str	r3, [sp, #76]	; 0x4c
   1b622:	4b62      	ldr	r3, [pc, #392]	; (1b7ac <_vfprintf_r+0x14fc>)
   1b624:	9409      	str	r4, [sp, #36]	; 0x24
   1b626:	9311      	str	r3, [sp, #68]	; 0x44
   1b628:	f7fe ffbd 	bl	1a5a6 <_vfprintf_r+0x2f6>
   1b62c:	003a      	movs	r2, r7
   1b62e:	4659      	mov	r1, fp
   1b630:	9806      	ldr	r0, [sp, #24]
   1b632:	f003 f8fd 	bl	1e830 <__sprint_r>
   1b636:	2800      	cmp	r0, #0
   1b638:	d001      	beq.n	1b63e <_vfprintf_r+0x138e>
   1b63a:	f7ff fbc9 	bl	1add0 <_vfprintf_r+0xb20>
   1b63e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b640:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b642:	68bc      	ldr	r4, [r7, #8]
   1b644:	1a9b      	subs	r3, r3, r2
   1b646:	ae32      	add	r6, sp, #200	; 0xc8
   1b648:	e567      	b.n	1b11a <_vfprintf_r+0xe6a>
   1b64a:	ab23      	add	r3, sp, #140	; 0x8c
   1b64c:	931b      	str	r3, [sp, #108]	; 0x6c
   1b64e:	9304      	str	r3, [sp, #16]
   1b650:	ab20      	add	r3, sp, #128	; 0x80
   1b652:	9303      	str	r3, [sp, #12]
   1b654:	ab1f      	add	r3, sp, #124	; 0x7c
   1b656:	9302      	str	r3, [sp, #8]
   1b658:	4653      	mov	r3, sl
   1b65a:	9301      	str	r3, [sp, #4]
   1b65c:	2303      	movs	r3, #3
   1b65e:	464a      	mov	r2, r9
   1b660:	9300      	str	r3, [sp, #0]
   1b662:	9806      	ldr	r0, [sp, #24]
   1b664:	9b08      	ldr	r3, [sp, #32]
   1b666:	f000 fafb 	bl	1bc60 <_dtoa_r>
   1b66a:	0003      	movs	r3, r0
   1b66c:	4453      	add	r3, sl
   1b66e:	4698      	mov	r8, r3
   1b670:	4655      	mov	r5, sl
   1b672:	9011      	str	r0, [sp, #68]	; 0x44
   1b674:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b676:	781b      	ldrb	r3, [r3, #0]
   1b678:	2b30      	cmp	r3, #48	; 0x30
   1b67a:	d002      	beq.n	1b682 <_vfprintf_r+0x13d2>
   1b67c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b67e:	4498      	add	r8, r3
   1b680:	e64e      	b.n	1b320 <_vfprintf_r+0x1070>
   1b682:	2200      	movs	r2, #0
   1b684:	2300      	movs	r3, #0
   1b686:	4648      	mov	r0, r9
   1b688:	9908      	ldr	r1, [sp, #32]
   1b68a:	f7fc fbe5 	bl	17e58 <__aeabi_dcmpeq>
   1b68e:	2800      	cmp	r0, #0
   1b690:	d1f4      	bne.n	1b67c <_vfprintf_r+0x13cc>
   1b692:	2301      	movs	r3, #1
   1b694:	1b5b      	subs	r3, r3, r5
   1b696:	931f      	str	r3, [sp, #124]	; 0x7c
   1b698:	4498      	add	r8, r3
   1b69a:	e641      	b.n	1b320 <_vfprintf_r+0x1070>
   1b69c:	46c1      	mov	r9, r8
   1b69e:	f7ff fb1f 	bl	1ace0 <_vfprintf_r+0xa30>
   1b6a2:	2280      	movs	r2, #128	; 0x80
   1b6a4:	0612      	lsls	r2, r2, #24
   1b6a6:	4694      	mov	ip, r2
   1b6a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b6aa:	4699      	mov	r9, r3
   1b6ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b6ae:	4463      	add	r3, ip
   1b6b0:	9308      	str	r3, [sp, #32]
   1b6b2:	232d      	movs	r3, #45	; 0x2d
   1b6b4:	9310      	str	r3, [sp, #64]	; 0x40
   1b6b6:	e60b      	b.n	1b2d0 <_vfprintf_r+0x1020>
   1b6b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b6ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b6bc:	4694      	mov	ip, r2
   1b6be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b6c0:	4463      	add	r3, ip
   1b6c2:	930e      	str	r3, [sp, #56]	; 0x38
   1b6c4:	2a00      	cmp	r2, #0
   1b6c6:	dc00      	bgt.n	1b6ca <_vfprintf_r+0x141a>
   1b6c8:	e0e3      	b.n	1b892 <_vfprintf_r+0x15e2>
   1b6ca:	001a      	movs	r2, r3
   1b6cc:	43db      	mvns	r3, r3
   1b6ce:	17db      	asrs	r3, r3, #31
   1b6d0:	401a      	ands	r2, r3
   1b6d2:	2367      	movs	r3, #103	; 0x67
   1b6d4:	9208      	str	r2, [sp, #32]
   1b6d6:	9312      	str	r3, [sp, #72]	; 0x48
   1b6d8:	e658      	b.n	1b38c <_vfprintf_r+0x10dc>
   1b6da:	003a      	movs	r2, r7
   1b6dc:	4659      	mov	r1, fp
   1b6de:	9806      	ldr	r0, [sp, #24]
   1b6e0:	f003 f8a6 	bl	1e830 <__sprint_r>
   1b6e4:	2800      	cmp	r0, #0
   1b6e6:	d001      	beq.n	1b6ec <_vfprintf_r+0x143c>
   1b6e8:	f7ff fb72 	bl	1add0 <_vfprintf_r+0xb20>
   1b6ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b6ee:	68bc      	ldr	r4, [r7, #8]
   1b6f0:	ae32      	add	r6, sp, #200	; 0xc8
   1b6f2:	e69d      	b.n	1b430 <_vfprintf_r+0x1180>
   1b6f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b6f6:	9313      	str	r3, [sp, #76]	; 0x4c
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	dc00      	bgt.n	1b6fe <_vfprintf_r+0x144e>
   1b6fc:	e0f2      	b.n	1b8e4 <_vfprintf_r+0x1634>
   1b6fe:	4652      	mov	r2, sl
   1b700:	2a00      	cmp	r2, #0
   1b702:	d000      	beq.n	1b706 <_vfprintf_r+0x1456>
   1b704:	e0a0      	b.n	1b848 <_vfprintf_r+0x1598>
   1b706:	07e2      	lsls	r2, r4, #31
   1b708:	d500      	bpl.n	1b70c <_vfprintf_r+0x145c>
   1b70a:	e09d      	b.n	1b848 <_vfprintf_r+0x1598>
   1b70c:	9308      	str	r3, [sp, #32]
   1b70e:	930e      	str	r3, [sp, #56]	; 0x38
   1b710:	e63c      	b.n	1b38c <_vfprintf_r+0x10dc>
   1b712:	ab16      	add	r3, sp, #88	; 0x58
   1b714:	7fdb      	ldrb	r3, [r3, #31]
   1b716:	950f      	str	r5, [sp, #60]	; 0x3c
   1b718:	4698      	mov	r8, r3
   1b71a:	4653      	mov	r3, sl
   1b71c:	9308      	str	r3, [sp, #32]
   1b71e:	930e      	str	r3, [sp, #56]	; 0x38
   1b720:	2300      	movs	r3, #0
   1b722:	9409      	str	r4, [sp, #36]	; 0x24
   1b724:	469a      	mov	sl, r3
   1b726:	9313      	str	r3, [sp, #76]	; 0x4c
   1b728:	f7fe ff37 	bl	1a59a <_vfprintf_r+0x2ea>
   1b72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b72e:	4698      	mov	r8, r3
   1b730:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b732:	44a8      	add	r8, r5
   1b734:	2b47      	cmp	r3, #71	; 0x47
   1b736:	d000      	beq.n	1b73a <_vfprintf_r+0x148a>
   1b738:	e5f2      	b.n	1b320 <_vfprintf_r+0x1070>
   1b73a:	07e3      	lsls	r3, r4, #31
   1b73c:	d400      	bmi.n	1b740 <_vfprintf_r+0x1490>
   1b73e:	e0dc      	b.n	1b8fa <_vfprintf_r+0x164a>
   1b740:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b742:	4698      	mov	r8, r3
   1b744:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b746:	44a8      	add	r8, r5
   1b748:	2b46      	cmp	r3, #70	; 0x46
   1b74a:	d093      	beq.n	1b674 <_vfprintf_r+0x13c4>
   1b74c:	e5e8      	b.n	1b320 <_vfprintf_r+0x1070>
   1b74e:	ab23      	add	r3, sp, #140	; 0x8c
   1b750:	931b      	str	r3, [sp, #108]	; 0x6c
   1b752:	9304      	str	r3, [sp, #16]
   1b754:	ab20      	add	r3, sp, #128	; 0x80
   1b756:	9303      	str	r3, [sp, #12]
   1b758:	ab1f      	add	r3, sp, #124	; 0x7c
   1b75a:	9302      	str	r3, [sp, #8]
   1b75c:	4653      	mov	r3, sl
   1b75e:	9301      	str	r3, [sp, #4]
   1b760:	2303      	movs	r3, #3
   1b762:	464a      	mov	r2, r9
   1b764:	9300      	str	r3, [sp, #0]
   1b766:	9806      	ldr	r0, [sp, #24]
   1b768:	9b08      	ldr	r3, [sp, #32]
   1b76a:	f000 fa79 	bl	1bc60 <_dtoa_r>
   1b76e:	4655      	mov	r5, sl
   1b770:	9011      	str	r0, [sp, #68]	; 0x44
   1b772:	e7e5      	b.n	1b740 <_vfprintf_r+0x1490>
   1b774:	003a      	movs	r2, r7
   1b776:	4659      	mov	r1, fp
   1b778:	9806      	ldr	r0, [sp, #24]
   1b77a:	f003 f859 	bl	1e830 <__sprint_r>
   1b77e:	2800      	cmp	r0, #0
   1b780:	d101      	bne.n	1b786 <_vfprintf_r+0x14d6>
   1b782:	f7ff faab 	bl	1acdc <_vfprintf_r+0xa2c>
   1b786:	f7ff faab 	bl	1ace0 <_vfprintf_r+0xa30>
   1b78a:	4642      	mov	r2, r8
   1b78c:	9207      	str	r2, [sp, #28]
   1b78e:	f7fe fe1b 	bl	1a3c8 <_vfprintf_r+0x118>
   1b792:	4244      	negs	r4, r0
   1b794:	3010      	adds	r0, #16
   1b796:	db00      	blt.n	1b79a <_vfprintf_r+0x14ea>
   1b798:	e0d8      	b.n	1b94c <_vfprintf_r+0x169c>
   1b79a:	4805      	ldr	r0, [pc, #20]	; (1b7b0 <_vfprintf_r+0x1500>)
   1b79c:	2610      	movs	r6, #16
   1b79e:	0005      	movs	r5, r0
   1b7a0:	e00c      	b.n	1b7bc <_vfprintf_r+0x150c>
   1b7a2:	46c0      	nop			; (mov r8, r8)
   1b7a4:	00020374 	.word	0x00020374
   1b7a8:	00020338 	.word	0x00020338
   1b7ac:	0002036c 	.word	0x0002036c
   1b7b0:	00020388 	.word	0x00020388
   1b7b4:	3208      	adds	r2, #8
   1b7b6:	3c10      	subs	r4, #16
   1b7b8:	2c10      	cmp	r4, #16
   1b7ba:	dd51      	ble.n	1b860 <_vfprintf_r+0x15b0>
   1b7bc:	3110      	adds	r1, #16
   1b7be:	3301      	adds	r3, #1
   1b7c0:	6015      	str	r5, [r2, #0]
   1b7c2:	6056      	str	r6, [r2, #4]
   1b7c4:	60b9      	str	r1, [r7, #8]
   1b7c6:	607b      	str	r3, [r7, #4]
   1b7c8:	2b07      	cmp	r3, #7
   1b7ca:	ddf3      	ble.n	1b7b4 <_vfprintf_r+0x1504>
   1b7cc:	003a      	movs	r2, r7
   1b7ce:	4659      	mov	r1, fp
   1b7d0:	9806      	ldr	r0, [sp, #24]
   1b7d2:	f003 f82d 	bl	1e830 <__sprint_r>
   1b7d6:	2800      	cmp	r0, #0
   1b7d8:	d001      	beq.n	1b7de <_vfprintf_r+0x152e>
   1b7da:	f7ff faf9 	bl	1add0 <_vfprintf_r+0xb20>
   1b7de:	68b9      	ldr	r1, [r7, #8]
   1b7e0:	687b      	ldr	r3, [r7, #4]
   1b7e2:	aa32      	add	r2, sp, #200	; 0xc8
   1b7e4:	e7e7      	b.n	1b7b6 <_vfprintf_r+0x1506>
   1b7e6:	003a      	movs	r2, r7
   1b7e8:	4659      	mov	r1, fp
   1b7ea:	9806      	ldr	r0, [sp, #24]
   1b7ec:	f003 f820 	bl	1e830 <__sprint_r>
   1b7f0:	2800      	cmp	r0, #0
   1b7f2:	d001      	beq.n	1b7f8 <_vfprintf_r+0x1548>
   1b7f4:	f7ff faec 	bl	1add0 <_vfprintf_r+0xb20>
   1b7f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b7fa:	68b9      	ldr	r1, [r7, #8]
   1b7fc:	687b      	ldr	r3, [r7, #4]
   1b7fe:	aa32      	add	r2, sp, #200	; 0xc8
   1b800:	e62e      	b.n	1b460 <_vfprintf_r+0x11b0>
   1b802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b806:	4694      	mov	ip, r2
   1b808:	4463      	add	r3, ip
   1b80a:	001a      	movs	r2, r3
   1b80c:	930e      	str	r3, [sp, #56]	; 0x38
   1b80e:	e75d      	b.n	1b6cc <_vfprintf_r+0x141c>
   1b810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b812:	e599      	b.n	1b348 <_vfprintf_r+0x1098>
   1b814:	212e      	movs	r1, #46	; 0x2e
   1b816:	2330      	movs	r3, #48	; 0x30
   1b818:	aa16      	add	r2, sp, #88	; 0x58
   1b81a:	1852      	adds	r2, r2, r1
   1b81c:	7013      	strb	r3, [r2, #0]
   1b81e:	002b      	movs	r3, r5
   1b820:	aa16      	add	r2, sp, #88	; 0x58
   1b822:	3101      	adds	r1, #1
   1b824:	3330      	adds	r3, #48	; 0x30
   1b826:	1852      	adds	r2, r2, r1
   1b828:	7013      	strb	r3, [r2, #0]
   1b82a:	ab22      	add	r3, sp, #136	; 0x88
   1b82c:	e6c1      	b.n	1b5b2 <_vfprintf_r+0x1302>
   1b82e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b830:	2b00      	cmp	r3, #0
   1b832:	db52      	blt.n	1b8da <_vfprintf_r+0x162a>
   1b834:	ab16      	add	r3, sp, #88	; 0x58
   1b836:	7fdb      	ldrb	r3, [r3, #31]
   1b838:	4698      	mov	r8, r3
   1b83a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b83c:	2b47      	cmp	r3, #71	; 0x47
   1b83e:	dc48      	bgt.n	1b8d2 <_vfprintf_r+0x1622>
   1b840:	4b4e      	ldr	r3, [pc, #312]	; (1b97c <_vfprintf_r+0x16cc>)
   1b842:	9311      	str	r3, [sp, #68]	; 0x44
   1b844:	f7ff f88c 	bl	1a960 <_vfprintf_r+0x6b0>
   1b848:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b84a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b84c:	4694      	mov	ip, r2
   1b84e:	4463      	add	r3, ip
   1b850:	4453      	add	r3, sl
   1b852:	001a      	movs	r2, r3
   1b854:	930e      	str	r3, [sp, #56]	; 0x38
   1b856:	43db      	mvns	r3, r3
   1b858:	17db      	asrs	r3, r3, #31
   1b85a:	401a      	ands	r2, r3
   1b85c:	9208      	str	r2, [sp, #32]
   1b85e:	e595      	b.n	1b38c <_vfprintf_r+0x10dc>
   1b860:	46a9      	mov	r9, r5
   1b862:	4648      	mov	r0, r9
   1b864:	1909      	adds	r1, r1, r4
   1b866:	3301      	adds	r3, #1
   1b868:	6010      	str	r0, [r2, #0]
   1b86a:	6054      	str	r4, [r2, #4]
   1b86c:	60b9      	str	r1, [r7, #8]
   1b86e:	3208      	adds	r2, #8
   1b870:	607b      	str	r3, [r7, #4]
   1b872:	2b07      	cmp	r3, #7
   1b874:	dc00      	bgt.n	1b878 <_vfprintf_r+0x15c8>
   1b876:	e5f6      	b.n	1b466 <_vfprintf_r+0x11b6>
   1b878:	003a      	movs	r2, r7
   1b87a:	4659      	mov	r1, fp
   1b87c:	9806      	ldr	r0, [sp, #24]
   1b87e:	f002 ffd7 	bl	1e830 <__sprint_r>
   1b882:	2800      	cmp	r0, #0
   1b884:	d001      	beq.n	1b88a <_vfprintf_r+0x15da>
   1b886:	f7ff faa3 	bl	1add0 <_vfprintf_r+0xb20>
   1b88a:	68b9      	ldr	r1, [r7, #8]
   1b88c:	687b      	ldr	r3, [r7, #4]
   1b88e:	aa32      	add	r2, sp, #200	; 0xc8
   1b890:	e5e9      	b.n	1b466 <_vfprintf_r+0x11b6>
   1b892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b896:	1a98      	subs	r0, r3, r2
   1b898:	1c43      	adds	r3, r0, #1
   1b89a:	001a      	movs	r2, r3
   1b89c:	930e      	str	r3, [sp, #56]	; 0x38
   1b89e:	e715      	b.n	1b6cc <_vfprintf_r+0x141c>
   1b8a0:	4a37      	ldr	r2, [pc, #220]	; (1b980 <_vfprintf_r+0x16d0>)
   1b8a2:	687b      	ldr	r3, [r7, #4]
   1b8a4:	4691      	mov	r9, r2
   1b8a6:	f7ff fbf5 	bl	1b094 <_vfprintf_r+0xde4>
   1b8aa:	2301      	movs	r3, #1
   1b8ac:	4023      	ands	r3, r4
   1b8ae:	9313      	str	r3, [sp, #76]	; 0x4c
   1b8b0:	d000      	beq.n	1b8b4 <_vfprintf_r+0x1604>
   1b8b2:	e689      	b.n	1b5c8 <_vfprintf_r+0x1318>
   1b8b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b8b6:	43d3      	mvns	r3, r2
   1b8b8:	17db      	asrs	r3, r3, #31
   1b8ba:	401a      	ands	r2, r3
   1b8bc:	9208      	str	r2, [sp, #32]
   1b8be:	e565      	b.n	1b38c <_vfprintf_r+0x10dc>
   1b8c0:	2301      	movs	r3, #1
   1b8c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b8c4:	391b      	subs	r1, #27
   1b8c6:	1a9d      	subs	r5, r3, r2
   1b8c8:	aa16      	add	r2, sp, #88	; 0x58
   1b8ca:	332c      	adds	r3, #44	; 0x2c
   1b8cc:	1852      	adds	r2, r2, r1
   1b8ce:	7013      	strb	r3, [r2, #0]
   1b8d0:	e62f      	b.n	1b532 <_vfprintf_r+0x1282>
   1b8d2:	4b2c      	ldr	r3, [pc, #176]	; (1b984 <_vfprintf_r+0x16d4>)
   1b8d4:	9311      	str	r3, [sp, #68]	; 0x44
   1b8d6:	f7ff f843 	bl	1a960 <_vfprintf_r+0x6b0>
   1b8da:	232d      	movs	r3, #45	; 0x2d
   1b8dc:	aa16      	add	r2, sp, #88	; 0x58
   1b8de:	77d3      	strb	r3, [r2, #31]
   1b8e0:	4698      	mov	r8, r3
   1b8e2:	e7aa      	b.n	1b83a <_vfprintf_r+0x158a>
   1b8e4:	4653      	mov	r3, sl
   1b8e6:	2b00      	cmp	r3, #0
   1b8e8:	d101      	bne.n	1b8ee <_vfprintf_r+0x163e>
   1b8ea:	07e3      	lsls	r3, r4, #31
   1b8ec:	d503      	bpl.n	1b8f6 <_vfprintf_r+0x1646>
   1b8ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b8f0:	1c58      	adds	r0, r3, #1
   1b8f2:	0003      	movs	r3, r0
   1b8f4:	e7ac      	b.n	1b850 <_vfprintf_r+0x15a0>
   1b8f6:	2301      	movs	r3, #1
   1b8f8:	e708      	b.n	1b70c <_vfprintf_r+0x145c>
   1b8fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b8fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b8fe:	1a9b      	subs	r3, r3, r2
   1b900:	9314      	str	r3, [sp, #80]	; 0x50
   1b902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b904:	2b47      	cmp	r3, #71	; 0x47
   1b906:	d100      	bne.n	1b90a <_vfprintf_r+0x165a>
   1b908:	e5f6      	b.n	1b4f8 <_vfprintf_r+0x1248>
   1b90a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b90c:	9313      	str	r3, [sp, #76]	; 0x4c
   1b90e:	e5fd      	b.n	1b50c <_vfprintf_r+0x125c>
   1b910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b912:	1d1d      	adds	r5, r3, #4
   1b914:	681b      	ldr	r3, [r3, #0]
   1b916:	46a8      	mov	r8, r5
   1b918:	469a      	mov	sl, r3
   1b91a:	2b00      	cmp	r3, #0
   1b91c:	db0a      	blt.n	1b934 <_vfprintf_r+0x1684>
   1b91e:	4645      	mov	r5, r8
   1b920:	9b07      	ldr	r3, [sp, #28]
   1b922:	950f      	str	r5, [sp, #60]	; 0x3c
   1b924:	785b      	ldrb	r3, [r3, #1]
   1b926:	9207      	str	r2, [sp, #28]
   1b928:	f7fe fd4b 	bl	1a3c2 <_vfprintf_r+0x112>
   1b92c:	ab16      	add	r3, sp, #88	; 0x58
   1b92e:	77d8      	strb	r0, [r3, #31]
   1b930:	f7ff f830 	bl	1a994 <_vfprintf_r+0x6e4>
   1b934:	2301      	movs	r3, #1
   1b936:	425b      	negs	r3, r3
   1b938:	469a      	mov	sl, r3
   1b93a:	e7f0      	b.n	1b91e <_vfprintf_r+0x166e>
   1b93c:	ab16      	add	r3, sp, #88	; 0x58
   1b93e:	77d8      	strb	r0, [r3, #31]
   1b940:	f7fe ff27 	bl	1a792 <_vfprintf_r+0x4e2>
   1b944:	ab16      	add	r3, sp, #88	; 0x58
   1b946:	77d8      	strb	r0, [r3, #31]
   1b948:	f7fe fdce 	bl	1a4e8 <_vfprintf_r+0x238>
   1b94c:	480c      	ldr	r0, [pc, #48]	; (1b980 <_vfprintf_r+0x16d0>)
   1b94e:	4681      	mov	r9, r0
   1b950:	e787      	b.n	1b862 <_vfprintf_r+0x15b2>
   1b952:	ab16      	add	r3, sp, #88	; 0x58
   1b954:	77d8      	strb	r0, [r3, #31]
   1b956:	f7ff f829 	bl	1a9ac <_vfprintf_r+0x6fc>
   1b95a:	ab16      	add	r3, sp, #88	; 0x58
   1b95c:	77d8      	strb	r0, [r3, #31]
   1b95e:	f7fe ffc3 	bl	1a8e8 <_vfprintf_r+0x638>
   1b962:	ab16      	add	r3, sp, #88	; 0x58
   1b964:	77d8      	strb	r0, [r3, #31]
   1b966:	f7fe ffa5 	bl	1a8b4 <_vfprintf_r+0x604>
   1b96a:	ab16      	add	r3, sp, #88	; 0x58
   1b96c:	77d8      	strb	r0, [r3, #31]
   1b96e:	f7fe feaf 	bl	1a6d0 <_vfprintf_r+0x420>
   1b972:	aa16      	add	r2, sp, #88	; 0x58
   1b974:	232e      	movs	r3, #46	; 0x2e
   1b976:	4694      	mov	ip, r2
   1b978:	4463      	add	r3, ip
   1b97a:	e61a      	b.n	1b5b2 <_vfprintf_r+0x1302>
   1b97c:	0002033c 	.word	0x0002033c
   1b980:	00020388 	.word	0x00020388
   1b984:	00020340 	.word	0x00020340

0001b988 <__sbprintf>:
   1b988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b98a:	0015      	movs	r5, r2
   1b98c:	2202      	movs	r2, #2
   1b98e:	4c1e      	ldr	r4, [pc, #120]	; (1ba08 <__sbprintf+0x80>)
   1b990:	001f      	movs	r7, r3
   1b992:	898b      	ldrh	r3, [r1, #12]
   1b994:	44a5      	add	sp, r4
   1b996:	4393      	bics	r3, r2
   1b998:	466a      	mov	r2, sp
   1b99a:	8193      	strh	r3, [r2, #12]
   1b99c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1b99e:	0006      	movs	r6, r0
   1b9a0:	9319      	str	r3, [sp, #100]	; 0x64
   1b9a2:	89cb      	ldrh	r3, [r1, #14]
   1b9a4:	a816      	add	r0, sp, #88	; 0x58
   1b9a6:	81d3      	strh	r3, [r2, #14]
   1b9a8:	69cb      	ldr	r3, [r1, #28]
   1b9aa:	000c      	movs	r4, r1
   1b9ac:	9307      	str	r3, [sp, #28]
   1b9ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1b9b0:	9309      	str	r3, [sp, #36]	; 0x24
   1b9b2:	ab1a      	add	r3, sp, #104	; 0x68
   1b9b4:	9300      	str	r3, [sp, #0]
   1b9b6:	9304      	str	r3, [sp, #16]
   1b9b8:	2380      	movs	r3, #128	; 0x80
   1b9ba:	00db      	lsls	r3, r3, #3
   1b9bc:	9302      	str	r3, [sp, #8]
   1b9be:	9305      	str	r3, [sp, #20]
   1b9c0:	2300      	movs	r3, #0
   1b9c2:	9306      	str	r3, [sp, #24]
   1b9c4:	f001 fd60 	bl	1d488 <__retarget_lock_init_recursive>
   1b9c8:	002a      	movs	r2, r5
   1b9ca:	003b      	movs	r3, r7
   1b9cc:	4669      	mov	r1, sp
   1b9ce:	0030      	movs	r0, r6
   1b9d0:	f7fe fc6e 	bl	1a2b0 <_vfprintf_r>
   1b9d4:	1e05      	subs	r5, r0, #0
   1b9d6:	db05      	blt.n	1b9e4 <__sbprintf+0x5c>
   1b9d8:	4669      	mov	r1, sp
   1b9da:	0030      	movs	r0, r6
   1b9dc:	f001 f9ac 	bl	1cd38 <_fflush_r>
   1b9e0:	2800      	cmp	r0, #0
   1b9e2:	d10e      	bne.n	1ba02 <__sbprintf+0x7a>
   1b9e4:	466b      	mov	r3, sp
   1b9e6:	899b      	ldrh	r3, [r3, #12]
   1b9e8:	065b      	lsls	r3, r3, #25
   1b9ea:	d503      	bpl.n	1b9f4 <__sbprintf+0x6c>
   1b9ec:	2240      	movs	r2, #64	; 0x40
   1b9ee:	89a3      	ldrh	r3, [r4, #12]
   1b9f0:	4313      	orrs	r3, r2
   1b9f2:	81a3      	strh	r3, [r4, #12]
   1b9f4:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b9f6:	f001 fd49 	bl	1d48c <__retarget_lock_close_recursive>
   1b9fa:	0028      	movs	r0, r5
   1b9fc:	4b03      	ldr	r3, [pc, #12]	; (1ba0c <__sbprintf+0x84>)
   1b9fe:	449d      	add	sp, r3
   1ba00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba02:	2501      	movs	r5, #1
   1ba04:	426d      	negs	r5, r5
   1ba06:	e7ed      	b.n	1b9e4 <__sbprintf+0x5c>
   1ba08:	fffffb94 	.word	0xfffffb94
   1ba0c:	0000046c 	.word	0x0000046c

0001ba10 <__swsetup_r>:
   1ba10:	4b33      	ldr	r3, [pc, #204]	; (1bae0 <__swsetup_r+0xd0>)
   1ba12:	b570      	push	{r4, r5, r6, lr}
   1ba14:	0005      	movs	r5, r0
   1ba16:	6818      	ldr	r0, [r3, #0]
   1ba18:	000c      	movs	r4, r1
   1ba1a:	2800      	cmp	r0, #0
   1ba1c:	d002      	beq.n	1ba24 <__swsetup_r+0x14>
   1ba1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ba20:	2b00      	cmp	r3, #0
   1ba22:	d03c      	beq.n	1ba9e <__swsetup_r+0x8e>
   1ba24:	230c      	movs	r3, #12
   1ba26:	5ee2      	ldrsh	r2, [r4, r3]
   1ba28:	b293      	uxth	r3, r2
   1ba2a:	0719      	lsls	r1, r3, #28
   1ba2c:	d50d      	bpl.n	1ba4a <__swsetup_r+0x3a>
   1ba2e:	6921      	ldr	r1, [r4, #16]
   1ba30:	2900      	cmp	r1, #0
   1ba32:	d015      	beq.n	1ba60 <__swsetup_r+0x50>
   1ba34:	07da      	lsls	r2, r3, #31
   1ba36:	d521      	bpl.n	1ba7c <__swsetup_r+0x6c>
   1ba38:	2300      	movs	r3, #0
   1ba3a:	60a3      	str	r3, [r4, #8]
   1ba3c:	6963      	ldr	r3, [r4, #20]
   1ba3e:	2000      	movs	r0, #0
   1ba40:	425b      	negs	r3, r3
   1ba42:	61a3      	str	r3, [r4, #24]
   1ba44:	2900      	cmp	r1, #0
   1ba46:	d021      	beq.n	1ba8c <__swsetup_r+0x7c>
   1ba48:	bd70      	pop	{r4, r5, r6, pc}
   1ba4a:	06d9      	lsls	r1, r3, #27
   1ba4c:	d53f      	bpl.n	1bace <__swsetup_r+0xbe>
   1ba4e:	075b      	lsls	r3, r3, #29
   1ba50:	d428      	bmi.n	1baa4 <__swsetup_r+0x94>
   1ba52:	6921      	ldr	r1, [r4, #16]
   1ba54:	2308      	movs	r3, #8
   1ba56:	4313      	orrs	r3, r2
   1ba58:	81a3      	strh	r3, [r4, #12]
   1ba5a:	b29b      	uxth	r3, r3
   1ba5c:	2900      	cmp	r1, #0
   1ba5e:	d1e9      	bne.n	1ba34 <__swsetup_r+0x24>
   1ba60:	22a0      	movs	r2, #160	; 0xa0
   1ba62:	2080      	movs	r0, #128	; 0x80
   1ba64:	0092      	lsls	r2, r2, #2
   1ba66:	0080      	lsls	r0, r0, #2
   1ba68:	401a      	ands	r2, r3
   1ba6a:	4282      	cmp	r2, r0
   1ba6c:	d0e2      	beq.n	1ba34 <__swsetup_r+0x24>
   1ba6e:	0021      	movs	r1, r4
   1ba70:	0028      	movs	r0, r5
   1ba72:	f001 fd41 	bl	1d4f8 <__smakebuf_r>
   1ba76:	89a3      	ldrh	r3, [r4, #12]
   1ba78:	6921      	ldr	r1, [r4, #16]
   1ba7a:	e7db      	b.n	1ba34 <__swsetup_r+0x24>
   1ba7c:	2200      	movs	r2, #0
   1ba7e:	079b      	lsls	r3, r3, #30
   1ba80:	d400      	bmi.n	1ba84 <__swsetup_r+0x74>
   1ba82:	6962      	ldr	r2, [r4, #20]
   1ba84:	60a2      	str	r2, [r4, #8]
   1ba86:	2000      	movs	r0, #0
   1ba88:	2900      	cmp	r1, #0
   1ba8a:	d1dd      	bne.n	1ba48 <__swsetup_r+0x38>
   1ba8c:	220c      	movs	r2, #12
   1ba8e:	5ea3      	ldrsh	r3, [r4, r2]
   1ba90:	061a      	lsls	r2, r3, #24
   1ba92:	d5d9      	bpl.n	1ba48 <__swsetup_r+0x38>
   1ba94:	2240      	movs	r2, #64	; 0x40
   1ba96:	4313      	orrs	r3, r2
   1ba98:	81a3      	strh	r3, [r4, #12]
   1ba9a:	3801      	subs	r0, #1
   1ba9c:	e7d4      	b.n	1ba48 <__swsetup_r+0x38>
   1ba9e:	f001 f9a5 	bl	1cdec <__sinit>
   1baa2:	e7bf      	b.n	1ba24 <__swsetup_r+0x14>
   1baa4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1baa6:	2900      	cmp	r1, #0
   1baa8:	d00a      	beq.n	1bac0 <__swsetup_r+0xb0>
   1baaa:	0023      	movs	r3, r4
   1baac:	3340      	adds	r3, #64	; 0x40
   1baae:	4299      	cmp	r1, r3
   1bab0:	d004      	beq.n	1babc <__swsetup_r+0xac>
   1bab2:	0028      	movs	r0, r5
   1bab4:	f001 fa44 	bl	1cf40 <_free_r>
   1bab8:	230c      	movs	r3, #12
   1baba:	5ee2      	ldrsh	r2, [r4, r3]
   1babc:	2300      	movs	r3, #0
   1babe:	6323      	str	r3, [r4, #48]	; 0x30
   1bac0:	2324      	movs	r3, #36	; 0x24
   1bac2:	439a      	bics	r2, r3
   1bac4:	2300      	movs	r3, #0
   1bac6:	6921      	ldr	r1, [r4, #16]
   1bac8:	6063      	str	r3, [r4, #4]
   1baca:	6021      	str	r1, [r4, #0]
   1bacc:	e7c2      	b.n	1ba54 <__swsetup_r+0x44>
   1bace:	2309      	movs	r3, #9
   1bad0:	602b      	str	r3, [r5, #0]
   1bad2:	2340      	movs	r3, #64	; 0x40
   1bad4:	2001      	movs	r0, #1
   1bad6:	431a      	orrs	r2, r3
   1bad8:	81a2      	strh	r2, [r4, #12]
   1bada:	4240      	negs	r0, r0
   1badc:	e7b4      	b.n	1ba48 <__swsetup_r+0x38>
   1bade:	46c0      	nop			; (mov r8, r8)
   1bae0:	20000148 	.word	0x20000148

0001bae4 <register_fini>:
   1bae4:	4b03      	ldr	r3, [pc, #12]	; (1baf4 <register_fini+0x10>)
   1bae6:	b510      	push	{r4, lr}
   1bae8:	2b00      	cmp	r3, #0
   1baea:	d002      	beq.n	1baf2 <register_fini+0xe>
   1baec:	4802      	ldr	r0, [pc, #8]	; (1baf8 <register_fini+0x14>)
   1baee:	f000 f805 	bl	1bafc <atexit>
   1baf2:	bd10      	pop	{r4, pc}
   1baf4:	00000000 	.word	0x00000000
   1baf8:	0001ce6d 	.word	0x0001ce6d

0001bafc <atexit>:
   1bafc:	b510      	push	{r4, lr}
   1bafe:	0001      	movs	r1, r0
   1bb00:	2300      	movs	r3, #0
   1bb02:	2200      	movs	r2, #0
   1bb04:	2000      	movs	r0, #0
   1bb06:	f002 febf 	bl	1e888 <__register_exitproc>
   1bb0a:	bd10      	pop	{r4, pc}

0001bb0c <quorem>:
   1bb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb0e:	4645      	mov	r5, r8
   1bb10:	4680      	mov	r8, r0
   1bb12:	46de      	mov	lr, fp
   1bb14:	4657      	mov	r7, sl
   1bb16:	464e      	mov	r6, r9
   1bb18:	4642      	mov	r2, r8
   1bb1a:	b5e0      	push	{r5, r6, r7, lr}
   1bb1c:	690c      	ldr	r4, [r1, #16]
   1bb1e:	6912      	ldr	r2, [r2, #16]
   1bb20:	b085      	sub	sp, #20
   1bb22:	000b      	movs	r3, r1
   1bb24:	9102      	str	r1, [sp, #8]
   1bb26:	2000      	movs	r0, #0
   1bb28:	4294      	cmp	r4, r2
   1bb2a:	dd00      	ble.n	1bb2e <quorem+0x22>
   1bb2c:	e090      	b.n	1bc50 <quorem+0x144>
   1bb2e:	2214      	movs	r2, #20
   1bb30:	4694      	mov	ip, r2
   1bb32:	4463      	add	r3, ip
   1bb34:	4699      	mov	r9, r3
   1bb36:	464a      	mov	r2, r9
   1bb38:	3c01      	subs	r4, #1
   1bb3a:	00a3      	lsls	r3, r4, #2
   1bb3c:	18d6      	adds	r6, r2, r3
   1bb3e:	2214      	movs	r2, #20
   1bb40:	4442      	add	r2, r8
   1bb42:	4693      	mov	fp, r2
   1bb44:	449b      	add	fp, r3
   1bb46:	6833      	ldr	r3, [r6, #0]
   1bb48:	0015      	movs	r5, r2
   1bb4a:	1c59      	adds	r1, r3, #1
   1bb4c:	465b      	mov	r3, fp
   1bb4e:	6818      	ldr	r0, [r3, #0]
   1bb50:	9201      	str	r2, [sp, #4]
   1bb52:	f7fb fffb 	bl	17b4c <__udivsi3>
   1bb56:	1e03      	subs	r3, r0, #0
   1bb58:	9000      	str	r0, [sp, #0]
   1bb5a:	d042      	beq.n	1bbe2 <quorem+0xd6>
   1bb5c:	0029      	movs	r1, r5
   1bb5e:	2700      	movs	r7, #0
   1bb60:	464d      	mov	r5, r9
   1bb62:	2000      	movs	r0, #0
   1bb64:	46b1      	mov	r9, r6
   1bb66:	46a2      	mov	sl, r4
   1bb68:	003e      	movs	r6, r7
   1bb6a:	0004      	movs	r4, r0
   1bb6c:	469c      	mov	ip, r3
   1bb6e:	002f      	movs	r7, r5
   1bb70:	0008      	movs	r0, r1
   1bb72:	9503      	str	r5, [sp, #12]
   1bb74:	4663      	mov	r3, ip
   1bb76:	cf04      	ldmia	r7!, {r2}
   1bb78:	0415      	lsls	r5, r2, #16
   1bb7a:	0c2d      	lsrs	r5, r5, #16
   1bb7c:	435d      	muls	r5, r3
   1bb7e:	0c12      	lsrs	r2, r2, #16
   1bb80:	435a      	muls	r2, r3
   1bb82:	19ad      	adds	r5, r5, r6
   1bb84:	0c2b      	lsrs	r3, r5, #16
   1bb86:	18d2      	adds	r2, r2, r3
   1bb88:	6803      	ldr	r3, [r0, #0]
   1bb8a:	042d      	lsls	r5, r5, #16
   1bb8c:	0419      	lsls	r1, r3, #16
   1bb8e:	0c09      	lsrs	r1, r1, #16
   1bb90:	1909      	adds	r1, r1, r4
   1bb92:	0c16      	lsrs	r6, r2, #16
   1bb94:	0c2d      	lsrs	r5, r5, #16
   1bb96:	0412      	lsls	r2, r2, #16
   1bb98:	1b49      	subs	r1, r1, r5
   1bb9a:	0c12      	lsrs	r2, r2, #16
   1bb9c:	0c1b      	lsrs	r3, r3, #16
   1bb9e:	1a9b      	subs	r3, r3, r2
   1bba0:	140a      	asrs	r2, r1, #16
   1bba2:	189b      	adds	r3, r3, r2
   1bba4:	0409      	lsls	r1, r1, #16
   1bba6:	141c      	asrs	r4, r3, #16
   1bba8:	0c09      	lsrs	r1, r1, #16
   1bbaa:	041b      	lsls	r3, r3, #16
   1bbac:	4319      	orrs	r1, r3
   1bbae:	c002      	stmia	r0!, {r1}
   1bbb0:	45b9      	cmp	r9, r7
   1bbb2:	d2df      	bcs.n	1bb74 <quorem+0x68>
   1bbb4:	9b03      	ldr	r3, [sp, #12]
   1bbb6:	464e      	mov	r6, r9
   1bbb8:	4699      	mov	r9, r3
   1bbba:	465b      	mov	r3, fp
   1bbbc:	681b      	ldr	r3, [r3, #0]
   1bbbe:	4654      	mov	r4, sl
   1bbc0:	2b00      	cmp	r3, #0
   1bbc2:	d10e      	bne.n	1bbe2 <quorem+0xd6>
   1bbc4:	465b      	mov	r3, fp
   1bbc6:	9a01      	ldr	r2, [sp, #4]
   1bbc8:	3b04      	subs	r3, #4
   1bbca:	429a      	cmp	r2, r3
   1bbcc:	d304      	bcc.n	1bbd8 <quorem+0xcc>
   1bbce:	e006      	b.n	1bbde <quorem+0xd2>
   1bbd0:	3b04      	subs	r3, #4
   1bbd2:	3c01      	subs	r4, #1
   1bbd4:	429a      	cmp	r2, r3
   1bbd6:	d202      	bcs.n	1bbde <quorem+0xd2>
   1bbd8:	6819      	ldr	r1, [r3, #0]
   1bbda:	2900      	cmp	r1, #0
   1bbdc:	d0f8      	beq.n	1bbd0 <quorem+0xc4>
   1bbde:	4643      	mov	r3, r8
   1bbe0:	611c      	str	r4, [r3, #16]
   1bbe2:	9902      	ldr	r1, [sp, #8]
   1bbe4:	4640      	mov	r0, r8
   1bbe6:	f002 faaf 	bl	1e148 <__mcmp>
   1bbea:	2800      	cmp	r0, #0
   1bbec:	db2f      	blt.n	1bc4e <quorem+0x142>
   1bbee:	464f      	mov	r7, r9
   1bbf0:	2000      	movs	r0, #0
   1bbf2:	9b00      	ldr	r3, [sp, #0]
   1bbf4:	9d01      	ldr	r5, [sp, #4]
   1bbf6:	3301      	adds	r3, #1
   1bbf8:	9300      	str	r3, [sp, #0]
   1bbfa:	682b      	ldr	r3, [r5, #0]
   1bbfc:	cf02      	ldmia	r7!, {r1}
   1bbfe:	041a      	lsls	r2, r3, #16
   1bc00:	0c12      	lsrs	r2, r2, #16
   1bc02:	1810      	adds	r0, r2, r0
   1bc04:	040a      	lsls	r2, r1, #16
   1bc06:	0c12      	lsrs	r2, r2, #16
   1bc08:	1a82      	subs	r2, r0, r2
   1bc0a:	0c09      	lsrs	r1, r1, #16
   1bc0c:	0c1b      	lsrs	r3, r3, #16
   1bc0e:	1a5b      	subs	r3, r3, r1
   1bc10:	1411      	asrs	r1, r2, #16
   1bc12:	185b      	adds	r3, r3, r1
   1bc14:	0412      	lsls	r2, r2, #16
   1bc16:	1418      	asrs	r0, r3, #16
   1bc18:	0c12      	lsrs	r2, r2, #16
   1bc1a:	041b      	lsls	r3, r3, #16
   1bc1c:	4313      	orrs	r3, r2
   1bc1e:	c508      	stmia	r5!, {r3}
   1bc20:	42be      	cmp	r6, r7
   1bc22:	d2ea      	bcs.n	1bbfa <quorem+0xee>
   1bc24:	9901      	ldr	r1, [sp, #4]
   1bc26:	00a3      	lsls	r3, r4, #2
   1bc28:	468c      	mov	ip, r1
   1bc2a:	4463      	add	r3, ip
   1bc2c:	681a      	ldr	r2, [r3, #0]
   1bc2e:	2a00      	cmp	r2, #0
   1bc30:	d10d      	bne.n	1bc4e <quorem+0x142>
   1bc32:	3b04      	subs	r3, #4
   1bc34:	000a      	movs	r2, r1
   1bc36:	4299      	cmp	r1, r3
   1bc38:	d304      	bcc.n	1bc44 <quorem+0x138>
   1bc3a:	e006      	b.n	1bc4a <quorem+0x13e>
   1bc3c:	3b04      	subs	r3, #4
   1bc3e:	3c01      	subs	r4, #1
   1bc40:	429a      	cmp	r2, r3
   1bc42:	d202      	bcs.n	1bc4a <quorem+0x13e>
   1bc44:	6819      	ldr	r1, [r3, #0]
   1bc46:	2900      	cmp	r1, #0
   1bc48:	d0f8      	beq.n	1bc3c <quorem+0x130>
   1bc4a:	4643      	mov	r3, r8
   1bc4c:	611c      	str	r4, [r3, #16]
   1bc4e:	9800      	ldr	r0, [sp, #0]
   1bc50:	b005      	add	sp, #20
   1bc52:	bc3c      	pop	{r2, r3, r4, r5}
   1bc54:	4690      	mov	r8, r2
   1bc56:	4699      	mov	r9, r3
   1bc58:	46a2      	mov	sl, r4
   1bc5a:	46ab      	mov	fp, r5
   1bc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc5e:	46c0      	nop			; (mov r8, r8)

0001bc60 <_dtoa_r>:
   1bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc62:	4657      	mov	r7, sl
   1bc64:	464e      	mov	r6, r9
   1bc66:	4645      	mov	r5, r8
   1bc68:	46de      	mov	lr, fp
   1bc6a:	b5e0      	push	{r5, r6, r7, lr}
   1bc6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1bc6e:	b099      	sub	sp, #100	; 0x64
   1bc70:	4682      	mov	sl, r0
   1bc72:	001d      	movs	r5, r3
   1bc74:	0016      	movs	r6, r2
   1bc76:	001f      	movs	r7, r3
   1bc78:	2900      	cmp	r1, #0
   1bc7a:	d009      	beq.n	1bc90 <_dtoa_r+0x30>
   1bc7c:	2301      	movs	r3, #1
   1bc7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1bc80:	4093      	lsls	r3, r2
   1bc82:	604a      	str	r2, [r1, #4]
   1bc84:	608b      	str	r3, [r1, #8]
   1bc86:	f002 f853 	bl	1dd30 <_Bfree>
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	4652      	mov	r2, sl
   1bc8e:	6413      	str	r3, [r2, #64]	; 0x40
   1bc90:	46b8      	mov	r8, r7
   1bc92:	2f00      	cmp	r7, #0
   1bc94:	db37      	blt.n	1bd06 <_dtoa_r+0xa6>
   1bc96:	2300      	movs	r3, #0
   1bc98:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1bc9a:	6013      	str	r3, [r2, #0]
   1bc9c:	4642      	mov	r2, r8
   1bc9e:	4bd6      	ldr	r3, [pc, #856]	; (1bff8 <_dtoa_r+0x398>)
   1bca0:	401a      	ands	r2, r3
   1bca2:	429a      	cmp	r2, r3
   1bca4:	d018      	beq.n	1bcd8 <_dtoa_r+0x78>
   1bca6:	2200      	movs	r2, #0
   1bca8:	2300      	movs	r3, #0
   1bcaa:	0030      	movs	r0, r6
   1bcac:	0039      	movs	r1, r7
   1bcae:	f7fc f8d3 	bl	17e58 <__aeabi_dcmpeq>
   1bcb2:	2800      	cmp	r0, #0
   1bcb4:	d02f      	beq.n	1bd16 <_dtoa_r+0xb6>
   1bcb6:	2301      	movs	r3, #1
   1bcb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bcba:	6013      	str	r3, [r2, #0]
   1bcbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d100      	bne.n	1bcc4 <_dtoa_r+0x64>
   1bcc2:	e22a      	b.n	1c11a <_dtoa_r+0x4ba>
   1bcc4:	48cd      	ldr	r0, [pc, #820]	; (1bffc <_dtoa_r+0x39c>)
   1bcc6:	6018      	str	r0, [r3, #0]
   1bcc8:	3801      	subs	r0, #1
   1bcca:	b019      	add	sp, #100	; 0x64
   1bccc:	bc3c      	pop	{r2, r3, r4, r5}
   1bcce:	4690      	mov	r8, r2
   1bcd0:	4699      	mov	r9, r3
   1bcd2:	46a2      	mov	sl, r4
   1bcd4:	46ab      	mov	fp, r5
   1bcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcd8:	4bc9      	ldr	r3, [pc, #804]	; (1c000 <_dtoa_r+0x3a0>)
   1bcda:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bcdc:	6013      	str	r3, [r2, #0]
   1bcde:	2e00      	cmp	r6, #0
   1bce0:	d10b      	bne.n	1bcfa <_dtoa_r+0x9a>
   1bce2:	4643      	mov	r3, r8
   1bce4:	0318      	lsls	r0, r3, #12
   1bce6:	d108      	bne.n	1bcfa <_dtoa_r+0x9a>
   1bce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bcea:	48c6      	ldr	r0, [pc, #792]	; (1c004 <_dtoa_r+0x3a4>)
   1bcec:	2b00      	cmp	r3, #0
   1bcee:	d0ec      	beq.n	1bcca <_dtoa_r+0x6a>
   1bcf0:	0003      	movs	r3, r0
   1bcf2:	3308      	adds	r3, #8
   1bcf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1bcf6:	6013      	str	r3, [r2, #0]
   1bcf8:	e7e7      	b.n	1bcca <_dtoa_r+0x6a>
   1bcfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bcfc:	48c2      	ldr	r0, [pc, #776]	; (1c008 <_dtoa_r+0x3a8>)
   1bcfe:	2b00      	cmp	r3, #0
   1bd00:	d0e3      	beq.n	1bcca <_dtoa_r+0x6a>
   1bd02:	1cc3      	adds	r3, r0, #3
   1bd04:	e7f6      	b.n	1bcf4 <_dtoa_r+0x94>
   1bd06:	2301      	movs	r3, #1
   1bd08:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1bd0a:	0068      	lsls	r0, r5, #1
   1bd0c:	6013      	str	r3, [r2, #0]
   1bd0e:	0843      	lsrs	r3, r0, #1
   1bd10:	4698      	mov	r8, r3
   1bd12:	001f      	movs	r7, r3
   1bd14:	e7c2      	b.n	1bc9c <_dtoa_r+0x3c>
   1bd16:	ab16      	add	r3, sp, #88	; 0x58
   1bd18:	9301      	str	r3, [sp, #4]
   1bd1a:	ab17      	add	r3, sp, #92	; 0x5c
   1bd1c:	9300      	str	r3, [sp, #0]
   1bd1e:	0032      	movs	r2, r6
   1bd20:	003b      	movs	r3, r7
   1bd22:	4650      	mov	r0, sl
   1bd24:	f002 fac6 	bl	1e2b4 <__d2b>
   1bd28:	4643      	mov	r3, r8
   1bd2a:	4683      	mov	fp, r0
   1bd2c:	0d1a      	lsrs	r2, r3, #20
   1bd2e:	d100      	bne.n	1bd32 <_dtoa_r+0xd2>
   1bd30:	e1d6      	b.n	1c0e0 <_dtoa_r+0x480>
   1bd32:	033b      	lsls	r3, r7, #12
   1bd34:	4cb5      	ldr	r4, [pc, #724]	; (1c00c <_dtoa_r+0x3ac>)
   1bd36:	0b1b      	lsrs	r3, r3, #12
   1bd38:	431c      	orrs	r4, r3
   1bd3a:	4bb5      	ldr	r3, [pc, #724]	; (1c010 <_dtoa_r+0x3b0>)
   1bd3c:	0030      	movs	r0, r6
   1bd3e:	4698      	mov	r8, r3
   1bd40:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1bd42:	0021      	movs	r1, r4
   1bd44:	4699      	mov	r9, r3
   1bd46:	2300      	movs	r3, #0
   1bd48:	4490      	add	r8, r2
   1bd4a:	930f      	str	r3, [sp, #60]	; 0x3c
   1bd4c:	2200      	movs	r2, #0
   1bd4e:	4bb1      	ldr	r3, [pc, #708]	; (1c014 <_dtoa_r+0x3b4>)
   1bd50:	f7fd fd54 	bl	197fc <__aeabi_dsub>
   1bd54:	4ab0      	ldr	r2, [pc, #704]	; (1c018 <_dtoa_r+0x3b8>)
   1bd56:	4bb1      	ldr	r3, [pc, #708]	; (1c01c <_dtoa_r+0x3bc>)
   1bd58:	f7fd fad0 	bl	192fc <__aeabi_dmul>
   1bd5c:	4ab0      	ldr	r2, [pc, #704]	; (1c020 <_dtoa_r+0x3c0>)
   1bd5e:	4bb1      	ldr	r3, [pc, #708]	; (1c024 <_dtoa_r+0x3c4>)
   1bd60:	f7fc fb88 	bl	18474 <__aeabi_dadd>
   1bd64:	0004      	movs	r4, r0
   1bd66:	4640      	mov	r0, r8
   1bd68:	000d      	movs	r5, r1
   1bd6a:	f7fe f891 	bl	19e90 <__aeabi_i2d>
   1bd6e:	4aae      	ldr	r2, [pc, #696]	; (1c028 <_dtoa_r+0x3c8>)
   1bd70:	4bae      	ldr	r3, [pc, #696]	; (1c02c <_dtoa_r+0x3cc>)
   1bd72:	f7fd fac3 	bl	192fc <__aeabi_dmul>
   1bd76:	0002      	movs	r2, r0
   1bd78:	000b      	movs	r3, r1
   1bd7a:	0020      	movs	r0, r4
   1bd7c:	0029      	movs	r1, r5
   1bd7e:	f7fc fb79 	bl	18474 <__aeabi_dadd>
   1bd82:	0004      	movs	r4, r0
   1bd84:	000d      	movs	r5, r1
   1bd86:	f7fe f84f 	bl	19e28 <__aeabi_d2iz>
   1bd8a:	2200      	movs	r2, #0
   1bd8c:	9003      	str	r0, [sp, #12]
   1bd8e:	2300      	movs	r3, #0
   1bd90:	0020      	movs	r0, r4
   1bd92:	0029      	movs	r1, r5
   1bd94:	f7fc f866 	bl	17e64 <__aeabi_dcmplt>
   1bd98:	2800      	cmp	r0, #0
   1bd9a:	d000      	beq.n	1bd9e <_dtoa_r+0x13e>
   1bd9c:	e2b1      	b.n	1c302 <_dtoa_r+0x6a2>
   1bd9e:	2301      	movs	r3, #1
   1bda0:	9c03      	ldr	r4, [sp, #12]
   1bda2:	930c      	str	r3, [sp, #48]	; 0x30
   1bda4:	2c16      	cmp	r4, #22
   1bda6:	d810      	bhi.n	1bdca <_dtoa_r+0x16a>
   1bda8:	49a1      	ldr	r1, [pc, #644]	; (1c030 <_dtoa_r+0x3d0>)
   1bdaa:	00e3      	lsls	r3, r4, #3
   1bdac:	18c9      	adds	r1, r1, r3
   1bdae:	0032      	movs	r2, r6
   1bdb0:	6808      	ldr	r0, [r1, #0]
   1bdb2:	6849      	ldr	r1, [r1, #4]
   1bdb4:	003b      	movs	r3, r7
   1bdb6:	f7fc f869 	bl	17e8c <__aeabi_dcmpgt>
   1bdba:	2800      	cmp	r0, #0
   1bdbc:	d100      	bne.n	1bdc0 <_dtoa_r+0x160>
   1bdbe:	e31d      	b.n	1c3fc <_dtoa_r+0x79c>
   1bdc0:	0023      	movs	r3, r4
   1bdc2:	3b01      	subs	r3, #1
   1bdc4:	9303      	str	r3, [sp, #12]
   1bdc6:	2300      	movs	r3, #0
   1bdc8:	930c      	str	r3, [sp, #48]	; 0x30
   1bdca:	464b      	mov	r3, r9
   1bdcc:	4642      	mov	r2, r8
   1bdce:	1a9a      	subs	r2, r3, r2
   1bdd0:	2300      	movs	r3, #0
   1bdd2:	9306      	str	r3, [sp, #24]
   1bdd4:	0013      	movs	r3, r2
   1bdd6:	3b01      	subs	r3, #1
   1bdd8:	9304      	str	r3, [sp, #16]
   1bdda:	d500      	bpl.n	1bdde <_dtoa_r+0x17e>
   1bddc:	e2a1      	b.n	1c322 <_dtoa_r+0x6c2>
   1bdde:	9b03      	ldr	r3, [sp, #12]
   1bde0:	2b00      	cmp	r3, #0
   1bde2:	da00      	bge.n	1bde6 <_dtoa_r+0x186>
   1bde4:	e284      	b.n	1c2f0 <_dtoa_r+0x690>
   1bde6:	469c      	mov	ip, r3
   1bde8:	930d      	str	r3, [sp, #52]	; 0x34
   1bdea:	2300      	movs	r3, #0
   1bdec:	9a04      	ldr	r2, [sp, #16]
   1bdee:	4699      	mov	r9, r3
   1bdf0:	0011      	movs	r1, r2
   1bdf2:	4461      	add	r1, ip
   1bdf4:	9104      	str	r1, [sp, #16]
   1bdf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1bdf8:	2b09      	cmp	r3, #9
   1bdfa:	d900      	bls.n	1bdfe <_dtoa_r+0x19e>
   1bdfc:	e18f      	b.n	1c11e <_dtoa_r+0x4be>
   1bdfe:	2401      	movs	r4, #1
   1be00:	2b05      	cmp	r3, #5
   1be02:	dd02      	ble.n	1be0a <_dtoa_r+0x1aa>
   1be04:	2400      	movs	r4, #0
   1be06:	3b04      	subs	r3, #4
   1be08:	9322      	str	r3, [sp, #136]	; 0x88
   1be0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1be0c:	2b03      	cmp	r3, #3
   1be0e:	d101      	bne.n	1be14 <_dtoa_r+0x1b4>
   1be10:	f000 fcce 	bl	1c7b0 <_dtoa_r+0xb50>
   1be14:	dc01      	bgt.n	1be1a <_dtoa_r+0x1ba>
   1be16:	f000 fc92 	bl	1c73e <_dtoa_r+0xade>
   1be1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1be1c:	2b04      	cmp	r3, #4
   1be1e:	d101      	bne.n	1be24 <_dtoa_r+0x1c4>
   1be20:	f000 fc40 	bl	1c6a4 <_dtoa_r+0xa44>
   1be24:	2301      	movs	r3, #1
   1be26:	930b      	str	r3, [sp, #44]	; 0x2c
   1be28:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1be2a:	2b05      	cmp	r3, #5
   1be2c:	d001      	beq.n	1be32 <_dtoa_r+0x1d2>
   1be2e:	f000 fc8b 	bl	1c748 <_dtoa_r+0xae8>
   1be32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1be34:	9b03      	ldr	r3, [sp, #12]
   1be36:	4694      	mov	ip, r2
   1be38:	4463      	add	r3, ip
   1be3a:	930e      	str	r3, [sp, #56]	; 0x38
   1be3c:	3301      	adds	r3, #1
   1be3e:	9307      	str	r3, [sp, #28]
   1be40:	1e1d      	subs	r5, r3, #0
   1be42:	dc01      	bgt.n	1be48 <_dtoa_r+0x1e8>
   1be44:	f000 fd49 	bl	1c8da <_dtoa_r+0xc7a>
   1be48:	9b07      	ldr	r3, [sp, #28]
   1be4a:	4698      	mov	r8, r3
   1be4c:	2300      	movs	r3, #0
   1be4e:	4652      	mov	r2, sl
   1be50:	2100      	movs	r1, #0
   1be52:	6453      	str	r3, [r2, #68]	; 0x44
   1be54:	2d17      	cmp	r5, #23
   1be56:	d90a      	bls.n	1be6e <_dtoa_r+0x20e>
   1be58:	2201      	movs	r2, #1
   1be5a:	3304      	adds	r3, #4
   1be5c:	005b      	lsls	r3, r3, #1
   1be5e:	0018      	movs	r0, r3
   1be60:	3014      	adds	r0, #20
   1be62:	0011      	movs	r1, r2
   1be64:	3201      	adds	r2, #1
   1be66:	4285      	cmp	r5, r0
   1be68:	d2f8      	bcs.n	1be5c <_dtoa_r+0x1fc>
   1be6a:	4653      	mov	r3, sl
   1be6c:	6459      	str	r1, [r3, #68]	; 0x44
   1be6e:	4650      	mov	r0, sl
   1be70:	f001 ff36 	bl	1dce0 <_Balloc>
   1be74:	4653      	mov	r3, sl
   1be76:	6418      	str	r0, [r3, #64]	; 0x40
   1be78:	4643      	mov	r3, r8
   1be7a:	900a      	str	r0, [sp, #40]	; 0x28
   1be7c:	2b0e      	cmp	r3, #14
   1be7e:	d900      	bls.n	1be82 <_dtoa_r+0x222>
   1be80:	e161      	b.n	1c146 <_dtoa_r+0x4e6>
   1be82:	2c00      	cmp	r4, #0
   1be84:	d100      	bne.n	1be88 <_dtoa_r+0x228>
   1be86:	e15e      	b.n	1c146 <_dtoa_r+0x4e6>
   1be88:	9610      	str	r6, [sp, #64]	; 0x40
   1be8a:	9711      	str	r7, [sp, #68]	; 0x44
   1be8c:	9e03      	ldr	r6, [sp, #12]
   1be8e:	2e00      	cmp	r6, #0
   1be90:	dc01      	bgt.n	1be96 <_dtoa_r+0x236>
   1be92:	f000 fd25 	bl	1c8e0 <_dtoa_r+0xc80>
   1be96:	0032      	movs	r2, r6
   1be98:	210f      	movs	r1, #15
   1be9a:	4b65      	ldr	r3, [pc, #404]	; (1c030 <_dtoa_r+0x3d0>)
   1be9c:	400a      	ands	r2, r1
   1be9e:	00d2      	lsls	r2, r2, #3
   1bea0:	189b      	adds	r3, r3, r2
   1bea2:	1136      	asrs	r6, r6, #4
   1bea4:	681c      	ldr	r4, [r3, #0]
   1bea6:	685d      	ldr	r5, [r3, #4]
   1bea8:	06f3      	lsls	r3, r6, #27
   1beaa:	d401      	bmi.n	1beb0 <_dtoa_r+0x250>
   1beac:	f000 fcca 	bl	1c844 <_dtoa_r+0xbe4>
   1beb0:	4b60      	ldr	r3, [pc, #384]	; (1c034 <_dtoa_r+0x3d4>)
   1beb2:	400e      	ands	r6, r1
   1beb4:	6a1a      	ldr	r2, [r3, #32]
   1beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1beb8:	9810      	ldr	r0, [sp, #64]	; 0x40
   1beba:	9911      	ldr	r1, [sp, #68]	; 0x44
   1bebc:	f7fc fdea 	bl	18a94 <__aeabi_ddiv>
   1bec0:	2303      	movs	r3, #3
   1bec2:	4698      	mov	r8, r3
   1bec4:	9008      	str	r0, [sp, #32]
   1bec6:	9109      	str	r1, [sp, #36]	; 0x24
   1bec8:	2e00      	cmp	r6, #0
   1beca:	d011      	beq.n	1bef0 <_dtoa_r+0x290>
   1becc:	4f59      	ldr	r7, [pc, #356]	; (1c034 <_dtoa_r+0x3d4>)
   1bece:	2301      	movs	r3, #1
   1bed0:	4233      	tst	r3, r6
   1bed2:	d009      	beq.n	1bee8 <_dtoa_r+0x288>
   1bed4:	469c      	mov	ip, r3
   1bed6:	683a      	ldr	r2, [r7, #0]
   1bed8:	687b      	ldr	r3, [r7, #4]
   1beda:	0020      	movs	r0, r4
   1bedc:	0029      	movs	r1, r5
   1bede:	44e0      	add	r8, ip
   1bee0:	f7fd fa0c 	bl	192fc <__aeabi_dmul>
   1bee4:	0004      	movs	r4, r0
   1bee6:	000d      	movs	r5, r1
   1bee8:	1076      	asrs	r6, r6, #1
   1beea:	3708      	adds	r7, #8
   1beec:	2e00      	cmp	r6, #0
   1beee:	d1ee      	bne.n	1bece <_dtoa_r+0x26e>
   1bef0:	0022      	movs	r2, r4
   1bef2:	9808      	ldr	r0, [sp, #32]
   1bef4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bef6:	002b      	movs	r3, r5
   1bef8:	f7fc fdcc 	bl	18a94 <__aeabi_ddiv>
   1befc:	0006      	movs	r6, r0
   1befe:	000f      	movs	r7, r1
   1bf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf02:	2b00      	cmp	r3, #0
   1bf04:	d009      	beq.n	1bf1a <_dtoa_r+0x2ba>
   1bf06:	2200      	movs	r2, #0
   1bf08:	4b40      	ldr	r3, [pc, #256]	; (1c00c <_dtoa_r+0x3ac>)
   1bf0a:	0030      	movs	r0, r6
   1bf0c:	0039      	movs	r1, r7
   1bf0e:	f7fb ffa9 	bl	17e64 <__aeabi_dcmplt>
   1bf12:	2800      	cmp	r0, #0
   1bf14:	d001      	beq.n	1bf1a <_dtoa_r+0x2ba>
   1bf16:	f000 fdc2 	bl	1ca9e <_dtoa_r+0xe3e>
   1bf1a:	4640      	mov	r0, r8
   1bf1c:	f7fd ffb8 	bl	19e90 <__aeabi_i2d>
   1bf20:	0032      	movs	r2, r6
   1bf22:	003b      	movs	r3, r7
   1bf24:	f7fd f9ea 	bl	192fc <__aeabi_dmul>
   1bf28:	2200      	movs	r2, #0
   1bf2a:	4b43      	ldr	r3, [pc, #268]	; (1c038 <_dtoa_r+0x3d8>)
   1bf2c:	f7fc faa2 	bl	18474 <__aeabi_dadd>
   1bf30:	4a42      	ldr	r2, [pc, #264]	; (1c03c <_dtoa_r+0x3dc>)
   1bf32:	000b      	movs	r3, r1
   1bf34:	4694      	mov	ip, r2
   1bf36:	4463      	add	r3, ip
   1bf38:	9008      	str	r0, [sp, #32]
   1bf3a:	9109      	str	r1, [sp, #36]	; 0x24
   1bf3c:	9309      	str	r3, [sp, #36]	; 0x24
   1bf3e:	9b07      	ldr	r3, [sp, #28]
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	d101      	bne.n	1bf48 <_dtoa_r+0x2e8>
   1bf44:	f000 fc50 	bl	1c7e8 <_dtoa_r+0xb88>
   1bf48:	9b03      	ldr	r3, [sp, #12]
   1bf4a:	9313      	str	r3, [sp, #76]	; 0x4c
   1bf4c:	9b07      	ldr	r3, [sp, #28]
   1bf4e:	9312      	str	r3, [sp, #72]	; 0x48
   1bf50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bf52:	2b00      	cmp	r3, #0
   1bf54:	d101      	bne.n	1bf5a <_dtoa_r+0x2fa>
   1bf56:	f000 fd1d 	bl	1c994 <_dtoa_r+0xd34>
   1bf5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bf5c:	2000      	movs	r0, #0
   1bf5e:	1e5a      	subs	r2, r3, #1
   1bf60:	4b33      	ldr	r3, [pc, #204]	; (1c030 <_dtoa_r+0x3d0>)
   1bf62:	00d2      	lsls	r2, r2, #3
   1bf64:	189b      	adds	r3, r3, r2
   1bf66:	681a      	ldr	r2, [r3, #0]
   1bf68:	685b      	ldr	r3, [r3, #4]
   1bf6a:	4935      	ldr	r1, [pc, #212]	; (1c040 <_dtoa_r+0x3e0>)
   1bf6c:	f7fc fd92 	bl	18a94 <__aeabi_ddiv>
   1bf70:	9a08      	ldr	r2, [sp, #32]
   1bf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bf74:	f7fd fc42 	bl	197fc <__aeabi_dsub>
   1bf78:	9008      	str	r0, [sp, #32]
   1bf7a:	9109      	str	r1, [sp, #36]	; 0x24
   1bf7c:	0039      	movs	r1, r7
   1bf7e:	0030      	movs	r0, r6
   1bf80:	f7fd ff52 	bl	19e28 <__aeabi_d2iz>
   1bf84:	0004      	movs	r4, r0
   1bf86:	f7fd ff83 	bl	19e90 <__aeabi_i2d>
   1bf8a:	0002      	movs	r2, r0
   1bf8c:	000b      	movs	r3, r1
   1bf8e:	0030      	movs	r0, r6
   1bf90:	0039      	movs	r1, r7
   1bf92:	f7fd fc33 	bl	197fc <__aeabi_dsub>
   1bf96:	0005      	movs	r5, r0
   1bf98:	000e      	movs	r6, r1
   1bf9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bf9c:	3430      	adds	r4, #48	; 0x30
   1bf9e:	1c51      	adds	r1, r2, #1
   1bfa0:	b2e7      	uxtb	r7, r4
   1bfa2:	9114      	str	r1, [sp, #80]	; 0x50
   1bfa4:	7017      	strb	r7, [r2, #0]
   1bfa6:	0033      	movs	r3, r6
   1bfa8:	9808      	ldr	r0, [sp, #32]
   1bfaa:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bfac:	002a      	movs	r2, r5
   1bfae:	f7fb ff6d 	bl	17e8c <__aeabi_dcmpgt>
   1bfb2:	2800      	cmp	r0, #0
   1bfb4:	d001      	beq.n	1bfba <_dtoa_r+0x35a>
   1bfb6:	f000 fdfe 	bl	1cbb6 <_dtoa_r+0xf56>
   1bfba:	002a      	movs	r2, r5
   1bfbc:	0033      	movs	r3, r6
   1bfbe:	2000      	movs	r0, #0
   1bfc0:	4912      	ldr	r1, [pc, #72]	; (1c00c <_dtoa_r+0x3ac>)
   1bfc2:	f7fd fc1b 	bl	197fc <__aeabi_dsub>
   1bfc6:	0002      	movs	r2, r0
   1bfc8:	000b      	movs	r3, r1
   1bfca:	9808      	ldr	r0, [sp, #32]
   1bfcc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1bfce:	f7fb ff5d 	bl	17e8c <__aeabi_dcmpgt>
   1bfd2:	2800      	cmp	r0, #0
   1bfd4:	d001      	beq.n	1bfda <_dtoa_r+0x37a>
   1bfd6:	f000 fde7 	bl	1cba8 <_dtoa_r+0xf48>
   1bfda:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bfdc:	2b01      	cmp	r3, #1
   1bfde:	d101      	bne.n	1bfe4 <_dtoa_r+0x384>
   1bfe0:	f000 fc78 	bl	1c8d4 <_dtoa_r+0xc74>
   1bfe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bfe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bfe8:	4694      	mov	ip, r2
   1bfea:	4463      	add	r3, ip
   1bfec:	4698      	mov	r8, r3
   1bfee:	464b      	mov	r3, r9
   1bff0:	9312      	str	r3, [sp, #72]	; 0x48
   1bff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bff4:	4699      	mov	r9, r3
   1bff6:	e038      	b.n	1c06a <_dtoa_r+0x40a>
   1bff8:	7ff00000 	.word	0x7ff00000
   1bffc:	00020375 	.word	0x00020375
   1c000:	0000270f 	.word	0x0000270f
   1c004:	00020398 	.word	0x00020398
   1c008:	000203a4 	.word	0x000203a4
   1c00c:	3ff00000 	.word	0x3ff00000
   1c010:	fffffc01 	.word	0xfffffc01
   1c014:	3ff80000 	.word	0x3ff80000
   1c018:	636f4361 	.word	0x636f4361
   1c01c:	3fd287a7 	.word	0x3fd287a7
   1c020:	8b60c8b3 	.word	0x8b60c8b3
   1c024:	3fc68a28 	.word	0x3fc68a28
   1c028:	509f79fb 	.word	0x509f79fb
   1c02c:	3fd34413 	.word	0x3fd34413
   1c030:	000203e0 	.word	0x000203e0
   1c034:	000203b8 	.word	0x000203b8
   1c038:	401c0000 	.word	0x401c0000
   1c03c:	fcc00000 	.word	0xfcc00000
   1c040:	3fe00000 	.word	0x3fe00000
   1c044:	002a      	movs	r2, r5
   1c046:	0033      	movs	r3, r6
   1c048:	2000      	movs	r0, #0
   1c04a:	49b9      	ldr	r1, [pc, #740]	; (1c330 <_dtoa_r+0x6d0>)
   1c04c:	f7fd fbd6 	bl	197fc <__aeabi_dsub>
   1c050:	9a08      	ldr	r2, [sp, #32]
   1c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c054:	f7fb ff06 	bl	17e64 <__aeabi_dcmplt>
   1c058:	2800      	cmp	r0, #0
   1c05a:	d001      	beq.n	1c060 <_dtoa_r+0x400>
   1c05c:	f000 fd74 	bl	1cb48 <_dtoa_r+0xee8>
   1c060:	46a1      	mov	r9, r4
   1c062:	4544      	cmp	r4, r8
   1c064:	d101      	bne.n	1c06a <_dtoa_r+0x40a>
   1c066:	f000 fc33 	bl	1c8d0 <_dtoa_r+0xc70>
   1c06a:	9808      	ldr	r0, [sp, #32]
   1c06c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c06e:	2200      	movs	r2, #0
   1c070:	4bb0      	ldr	r3, [pc, #704]	; (1c334 <_dtoa_r+0x6d4>)
   1c072:	f7fd f943 	bl	192fc <__aeabi_dmul>
   1c076:	2200      	movs	r2, #0
   1c078:	4bae      	ldr	r3, [pc, #696]	; (1c334 <_dtoa_r+0x6d4>)
   1c07a:	9008      	str	r0, [sp, #32]
   1c07c:	9109      	str	r1, [sp, #36]	; 0x24
   1c07e:	0028      	movs	r0, r5
   1c080:	0031      	movs	r1, r6
   1c082:	f7fd f93b 	bl	192fc <__aeabi_dmul>
   1c086:	000d      	movs	r5, r1
   1c088:	0004      	movs	r4, r0
   1c08a:	f7fd fecd 	bl	19e28 <__aeabi_d2iz>
   1c08e:	0007      	movs	r7, r0
   1c090:	f7fd fefe 	bl	19e90 <__aeabi_i2d>
   1c094:	0002      	movs	r2, r0
   1c096:	000b      	movs	r3, r1
   1c098:	0020      	movs	r0, r4
   1c09a:	0029      	movs	r1, r5
   1c09c:	f7fd fbae 	bl	197fc <__aeabi_dsub>
   1c0a0:	464b      	mov	r3, r9
   1c0a2:	3730      	adds	r7, #48	; 0x30
   1c0a4:	b2ff      	uxtb	r7, r7
   1c0a6:	1c5c      	adds	r4, r3, #1
   1c0a8:	701f      	strb	r7, [r3, #0]
   1c0aa:	9a08      	ldr	r2, [sp, #32]
   1c0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c0ae:	0005      	movs	r5, r0
   1c0b0:	000e      	movs	r6, r1
   1c0b2:	f7fb fed7 	bl	17e64 <__aeabi_dcmplt>
   1c0b6:	2800      	cmp	r0, #0
   1c0b8:	d0c4      	beq.n	1c044 <_dtoa_r+0x3e4>
   1c0ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c0bc:	9303      	str	r3, [sp, #12]
   1c0be:	4659      	mov	r1, fp
   1c0c0:	4650      	mov	r0, sl
   1c0c2:	f001 fe35 	bl	1dd30 <_Bfree>
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	7023      	strb	r3, [r4, #0]
   1c0ca:	9b03      	ldr	r3, [sp, #12]
   1c0cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c0ce:	3301      	adds	r3, #1
   1c0d0:	6013      	str	r3, [r2, #0]
   1c0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c0d4:	2b00      	cmp	r3, #0
   1c0d6:	d100      	bne.n	1c0da <_dtoa_r+0x47a>
   1c0d8:	e3a8      	b.n	1c82c <_dtoa_r+0xbcc>
   1c0da:	601c      	str	r4, [r3, #0]
   1c0dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c0de:	e5f4      	b.n	1bcca <_dtoa_r+0x6a>
   1c0e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c0e2:	4699      	mov	r9, r3
   1c0e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c0e6:	444b      	add	r3, r9
   1c0e8:	001c      	movs	r4, r3
   1c0ea:	4b93      	ldr	r3, [pc, #588]	; (1c338 <_dtoa_r+0x6d8>)
   1c0ec:	18e3      	adds	r3, r4, r3
   1c0ee:	2b20      	cmp	r3, #32
   1c0f0:	dc00      	bgt.n	1c0f4 <_dtoa_r+0x494>
   1c0f2:	e17e      	b.n	1c3f2 <_dtoa_r+0x792>
   1c0f4:	0031      	movs	r1, r6
   1c0f6:	4a91      	ldr	r2, [pc, #580]	; (1c33c <_dtoa_r+0x6dc>)
   1c0f8:	4640      	mov	r0, r8
   1c0fa:	18a2      	adds	r2, r4, r2
   1c0fc:	40d1      	lsrs	r1, r2
   1c0fe:	000a      	movs	r2, r1
   1c100:	2140      	movs	r1, #64	; 0x40
   1c102:	1acb      	subs	r3, r1, r3
   1c104:	4098      	lsls	r0, r3
   1c106:	4310      	orrs	r0, r2
   1c108:	f7fd ff04 	bl	19f14 <__aeabi_ui2d>
   1c10c:	1e63      	subs	r3, r4, #1
   1c10e:	4698      	mov	r8, r3
   1c110:	2301      	movs	r3, #1
   1c112:	4d8b      	ldr	r5, [pc, #556]	; (1c340 <_dtoa_r+0x6e0>)
   1c114:	930f      	str	r3, [sp, #60]	; 0x3c
   1c116:	1949      	adds	r1, r1, r5
   1c118:	e618      	b.n	1bd4c <_dtoa_r+0xec>
   1c11a:	488a      	ldr	r0, [pc, #552]	; (1c344 <_dtoa_r+0x6e4>)
   1c11c:	e5d5      	b.n	1bcca <_dtoa_r+0x6a>
   1c11e:	2300      	movs	r3, #0
   1c120:	4652      	mov	r2, sl
   1c122:	2100      	movs	r1, #0
   1c124:	6453      	str	r3, [r2, #68]	; 0x44
   1c126:	4650      	mov	r0, sl
   1c128:	f001 fdda 	bl	1dce0 <_Balloc>
   1c12c:	4653      	mov	r3, sl
   1c12e:	6418      	str	r0, [r3, #64]	; 0x40
   1c130:	2301      	movs	r3, #1
   1c132:	425b      	negs	r3, r3
   1c134:	9307      	str	r3, [sp, #28]
   1c136:	930e      	str	r3, [sp, #56]	; 0x38
   1c138:	3302      	adds	r3, #2
   1c13a:	2200      	movs	r2, #0
   1c13c:	930b      	str	r3, [sp, #44]	; 0x2c
   1c13e:	2300      	movs	r3, #0
   1c140:	900a      	str	r0, [sp, #40]	; 0x28
   1c142:	9223      	str	r2, [sp, #140]	; 0x8c
   1c144:	9322      	str	r3, [sp, #136]	; 0x88
   1c146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c148:	2b00      	cmp	r3, #0
   1c14a:	da00      	bge.n	1c14e <_dtoa_r+0x4ee>
   1c14c:	e0ab      	b.n	1c2a6 <_dtoa_r+0x646>
   1c14e:	9a03      	ldr	r2, [sp, #12]
   1c150:	2a0e      	cmp	r2, #14
   1c152:	dd00      	ble.n	1c156 <_dtoa_r+0x4f6>
   1c154:	e0a7      	b.n	1c2a6 <_dtoa_r+0x646>
   1c156:	4b7c      	ldr	r3, [pc, #496]	; (1c348 <_dtoa_r+0x6e8>)
   1c158:	00d2      	lsls	r2, r2, #3
   1c15a:	189b      	adds	r3, r3, r2
   1c15c:	685c      	ldr	r4, [r3, #4]
   1c15e:	681b      	ldr	r3, [r3, #0]
   1c160:	9304      	str	r3, [sp, #16]
   1c162:	9405      	str	r4, [sp, #20]
   1c164:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c166:	2b00      	cmp	r3, #0
   1c168:	da00      	bge.n	1c16c <_dtoa_r+0x50c>
   1c16a:	e2a7      	b.n	1c6bc <_dtoa_r+0xa5c>
   1c16c:	9c04      	ldr	r4, [sp, #16]
   1c16e:	9d05      	ldr	r5, [sp, #20]
   1c170:	0030      	movs	r0, r6
   1c172:	0022      	movs	r2, r4
   1c174:	002b      	movs	r3, r5
   1c176:	0039      	movs	r1, r7
   1c178:	f7fc fc8c 	bl	18a94 <__aeabi_ddiv>
   1c17c:	f7fd fe54 	bl	19e28 <__aeabi_d2iz>
   1c180:	4680      	mov	r8, r0
   1c182:	f7fd fe85 	bl	19e90 <__aeabi_i2d>
   1c186:	0022      	movs	r2, r4
   1c188:	002b      	movs	r3, r5
   1c18a:	f7fd f8b7 	bl	192fc <__aeabi_dmul>
   1c18e:	0002      	movs	r2, r0
   1c190:	000b      	movs	r3, r1
   1c192:	0030      	movs	r0, r6
   1c194:	0039      	movs	r1, r7
   1c196:	f7fd fb31 	bl	197fc <__aeabi_dsub>
   1c19a:	4643      	mov	r3, r8
   1c19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c19e:	3330      	adds	r3, #48	; 0x30
   1c1a0:	7013      	strb	r3, [r2, #0]
   1c1a2:	9b07      	ldr	r3, [sp, #28]
   1c1a4:	0006      	movs	r6, r0
   1c1a6:	000f      	movs	r7, r1
   1c1a8:	1c54      	adds	r4, r2, #1
   1c1aa:	2b01      	cmp	r3, #1
   1c1ac:	d04e      	beq.n	1c24c <_dtoa_r+0x5ec>
   1c1ae:	2200      	movs	r2, #0
   1c1b0:	4b60      	ldr	r3, [pc, #384]	; (1c334 <_dtoa_r+0x6d4>)
   1c1b2:	f7fd f8a3 	bl	192fc <__aeabi_dmul>
   1c1b6:	2200      	movs	r2, #0
   1c1b8:	2300      	movs	r3, #0
   1c1ba:	0006      	movs	r6, r0
   1c1bc:	000f      	movs	r7, r1
   1c1be:	f7fb fe4b 	bl	17e58 <__aeabi_dcmpeq>
   1c1c2:	2800      	cmp	r0, #0
   1c1c4:	d000      	beq.n	1c1c8 <_dtoa_r+0x568>
   1c1c6:	e77a      	b.n	1c0be <_dtoa_r+0x45e>
   1c1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c1ca:	9a07      	ldr	r2, [sp, #28]
   1c1cc:	1c9d      	adds	r5, r3, #2
   1c1ce:	469c      	mov	ip, r3
   1c1d0:	465b      	mov	r3, fp
   1c1d2:	9306      	str	r3, [sp, #24]
   1c1d4:	4653      	mov	r3, sl
   1c1d6:	4462      	add	r2, ip
   1c1d8:	46aa      	mov	sl, r5
   1c1da:	9c04      	ldr	r4, [sp, #16]
   1c1dc:	9d05      	ldr	r5, [sp, #20]
   1c1de:	4691      	mov	r9, r2
   1c1e0:	9307      	str	r3, [sp, #28]
   1c1e2:	e00f      	b.n	1c204 <_dtoa_r+0x5a4>
   1c1e4:	2200      	movs	r2, #0
   1c1e6:	4b53      	ldr	r3, [pc, #332]	; (1c334 <_dtoa_r+0x6d4>)
   1c1e8:	f7fd f888 	bl	192fc <__aeabi_dmul>
   1c1ec:	2301      	movs	r3, #1
   1c1ee:	469c      	mov	ip, r3
   1c1f0:	2200      	movs	r2, #0
   1c1f2:	2300      	movs	r3, #0
   1c1f4:	0006      	movs	r6, r0
   1c1f6:	000f      	movs	r7, r1
   1c1f8:	44e2      	add	sl, ip
   1c1fa:	f7fb fe2d 	bl	17e58 <__aeabi_dcmpeq>
   1c1fe:	2800      	cmp	r0, #0
   1c200:	d000      	beq.n	1c204 <_dtoa_r+0x5a4>
   1c202:	e2d9      	b.n	1c7b8 <_dtoa_r+0xb58>
   1c204:	0022      	movs	r2, r4
   1c206:	002b      	movs	r3, r5
   1c208:	0030      	movs	r0, r6
   1c20a:	0039      	movs	r1, r7
   1c20c:	f7fc fc42 	bl	18a94 <__aeabi_ddiv>
   1c210:	f7fd fe0a 	bl	19e28 <__aeabi_d2iz>
   1c214:	4680      	mov	r8, r0
   1c216:	f7fd fe3b 	bl	19e90 <__aeabi_i2d>
   1c21a:	0022      	movs	r2, r4
   1c21c:	002b      	movs	r3, r5
   1c21e:	f7fd f86d 	bl	192fc <__aeabi_dmul>
   1c222:	0002      	movs	r2, r0
   1c224:	000b      	movs	r3, r1
   1c226:	0030      	movs	r0, r6
   1c228:	0039      	movs	r1, r7
   1c22a:	f7fd fae7 	bl	197fc <__aeabi_dsub>
   1c22e:	4653      	mov	r3, sl
   1c230:	4642      	mov	r2, r8
   1c232:	3b01      	subs	r3, #1
   1c234:	3230      	adds	r2, #48	; 0x30
   1c236:	0006      	movs	r6, r0
   1c238:	000f      	movs	r7, r1
   1c23a:	46d3      	mov	fp, sl
   1c23c:	701a      	strb	r2, [r3, #0]
   1c23e:	45d1      	cmp	r9, sl
   1c240:	d1d0      	bne.n	1c1e4 <_dtoa_r+0x584>
   1c242:	9b06      	ldr	r3, [sp, #24]
   1c244:	4654      	mov	r4, sl
   1c246:	469b      	mov	fp, r3
   1c248:	9b07      	ldr	r3, [sp, #28]
   1c24a:	469a      	mov	sl, r3
   1c24c:	0032      	movs	r2, r6
   1c24e:	003b      	movs	r3, r7
   1c250:	0030      	movs	r0, r6
   1c252:	0039      	movs	r1, r7
   1c254:	f7fc f90e 	bl	18474 <__aeabi_dadd>
   1c258:	0006      	movs	r6, r0
   1c25a:	000f      	movs	r7, r1
   1c25c:	0002      	movs	r2, r0
   1c25e:	000b      	movs	r3, r1
   1c260:	9804      	ldr	r0, [sp, #16]
   1c262:	9905      	ldr	r1, [sp, #20]
   1c264:	f7fb fdfe 	bl	17e64 <__aeabi_dcmplt>
   1c268:	2800      	cmp	r0, #0
   1c26a:	d10c      	bne.n	1c286 <_dtoa_r+0x626>
   1c26c:	9804      	ldr	r0, [sp, #16]
   1c26e:	9905      	ldr	r1, [sp, #20]
   1c270:	0032      	movs	r2, r6
   1c272:	003b      	movs	r3, r7
   1c274:	f7fb fdf0 	bl	17e58 <__aeabi_dcmpeq>
   1c278:	2800      	cmp	r0, #0
   1c27a:	d100      	bne.n	1c27e <_dtoa_r+0x61e>
   1c27c:	e71f      	b.n	1c0be <_dtoa_r+0x45e>
   1c27e:	4643      	mov	r3, r8
   1c280:	07db      	lsls	r3, r3, #31
   1c282:	d400      	bmi.n	1c286 <_dtoa_r+0x626>
   1c284:	e71b      	b.n	1c0be <_dtoa_r+0x45e>
   1c286:	1e65      	subs	r5, r4, #1
   1c288:	782f      	ldrb	r7, [r5, #0]
   1c28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c28c:	e006      	b.n	1c29c <_dtoa_r+0x63c>
   1c28e:	429d      	cmp	r5, r3
   1c290:	d100      	bne.n	1c294 <_dtoa_r+0x634>
   1c292:	e351      	b.n	1c938 <_dtoa_r+0xcd8>
   1c294:	3c02      	subs	r4, #2
   1c296:	7827      	ldrb	r7, [r4, #0]
   1c298:	002c      	movs	r4, r5
   1c29a:	3d01      	subs	r5, #1
   1c29c:	2f39      	cmp	r7, #57	; 0x39
   1c29e:	d0f6      	beq.n	1c28e <_dtoa_r+0x62e>
   1c2a0:	3701      	adds	r7, #1
   1c2a2:	702f      	strb	r7, [r5, #0]
   1c2a4:	e70b      	b.n	1c0be <_dtoa_r+0x45e>
   1c2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c2a8:	2a00      	cmp	r2, #0
   1c2aa:	d04f      	beq.n	1c34c <_dtoa_r+0x6ec>
   1c2ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c2ae:	2a01      	cmp	r2, #1
   1c2b0:	dc00      	bgt.n	1c2b4 <_dtoa_r+0x654>
   1c2b2:	e22c      	b.n	1c70e <_dtoa_r+0xaae>
   1c2b4:	9b07      	ldr	r3, [sp, #28]
   1c2b6:	1e5c      	subs	r4, r3, #1
   1c2b8:	464b      	mov	r3, r9
   1c2ba:	45a1      	cmp	r9, r4
   1c2bc:	da00      	bge.n	1c2c0 <_dtoa_r+0x660>
   1c2be:	e2b8      	b.n	1c832 <_dtoa_r+0xbd2>
   1c2c0:	1b1c      	subs	r4, r3, r4
   1c2c2:	9b07      	ldr	r3, [sp, #28]
   1c2c4:	2b00      	cmp	r3, #0
   1c2c6:	da00      	bge.n	1c2ca <_dtoa_r+0x66a>
   1c2c8:	e3d4      	b.n	1ca74 <_dtoa_r+0xe14>
   1c2ca:	9b06      	ldr	r3, [sp, #24]
   1c2cc:	9308      	str	r3, [sp, #32]
   1c2ce:	9b07      	ldr	r3, [sp, #28]
   1c2d0:	9a06      	ldr	r2, [sp, #24]
   1c2d2:	2101      	movs	r1, #1
   1c2d4:	4694      	mov	ip, r2
   1c2d6:	449c      	add	ip, r3
   1c2d8:	4662      	mov	r2, ip
   1c2da:	9206      	str	r2, [sp, #24]
   1c2dc:	9a04      	ldr	r2, [sp, #16]
   1c2de:	4650      	mov	r0, sl
   1c2e0:	4694      	mov	ip, r2
   1c2e2:	449c      	add	ip, r3
   1c2e4:	4663      	mov	r3, ip
   1c2e6:	9304      	str	r3, [sp, #16]
   1c2e8:	f001 fdba 	bl	1de60 <__i2b>
   1c2ec:	4680      	mov	r8, r0
   1c2ee:	e032      	b.n	1c356 <_dtoa_r+0x6f6>
   1c2f0:	9a06      	ldr	r2, [sp, #24]
   1c2f2:	9b03      	ldr	r3, [sp, #12]
   1c2f4:	1ad2      	subs	r2, r2, r3
   1c2f6:	425b      	negs	r3, r3
   1c2f8:	4699      	mov	r9, r3
   1c2fa:	2300      	movs	r3, #0
   1c2fc:	9206      	str	r2, [sp, #24]
   1c2fe:	930d      	str	r3, [sp, #52]	; 0x34
   1c300:	e579      	b.n	1bdf6 <_dtoa_r+0x196>
   1c302:	9803      	ldr	r0, [sp, #12]
   1c304:	f7fd fdc4 	bl	19e90 <__aeabi_i2d>
   1c308:	000b      	movs	r3, r1
   1c30a:	0002      	movs	r2, r0
   1c30c:	0029      	movs	r1, r5
   1c30e:	0020      	movs	r0, r4
   1c310:	f7fb fda2 	bl	17e58 <__aeabi_dcmpeq>
   1c314:	0002      	movs	r2, r0
   1c316:	4250      	negs	r0, r2
   1c318:	4150      	adcs	r0, r2
   1c31a:	9b03      	ldr	r3, [sp, #12]
   1c31c:	1a1b      	subs	r3, r3, r0
   1c31e:	9303      	str	r3, [sp, #12]
   1c320:	e53d      	b.n	1bd9e <_dtoa_r+0x13e>
   1c322:	2301      	movs	r3, #1
   1c324:	1a9b      	subs	r3, r3, r2
   1c326:	9306      	str	r3, [sp, #24]
   1c328:	2300      	movs	r3, #0
   1c32a:	9304      	str	r3, [sp, #16]
   1c32c:	e557      	b.n	1bdde <_dtoa_r+0x17e>
   1c32e:	46c0      	nop			; (mov r8, r8)
   1c330:	3ff00000 	.word	0x3ff00000
   1c334:	40240000 	.word	0x40240000
   1c338:	00000432 	.word	0x00000432
   1c33c:	00000412 	.word	0x00000412
   1c340:	fe100000 	.word	0xfe100000
   1c344:	00020374 	.word	0x00020374
   1c348:	000203e0 	.word	0x000203e0
   1c34c:	9b06      	ldr	r3, [sp, #24]
   1c34e:	464c      	mov	r4, r9
   1c350:	9308      	str	r3, [sp, #32]
   1c352:	2300      	movs	r3, #0
   1c354:	4698      	mov	r8, r3
   1c356:	9908      	ldr	r1, [sp, #32]
   1c358:	1e0b      	subs	r3, r1, #0
   1c35a:	dd0e      	ble.n	1c37a <_dtoa_r+0x71a>
   1c35c:	9a04      	ldr	r2, [sp, #16]
   1c35e:	2a00      	cmp	r2, #0
   1c360:	dd0b      	ble.n	1c37a <_dtoa_r+0x71a>
   1c362:	4293      	cmp	r3, r2
   1c364:	dd00      	ble.n	1c368 <_dtoa_r+0x708>
   1c366:	e187      	b.n	1c678 <_dtoa_r+0xa18>
   1c368:	9a06      	ldr	r2, [sp, #24]
   1c36a:	1ad2      	subs	r2, r2, r3
   1c36c:	9206      	str	r2, [sp, #24]
   1c36e:	9a08      	ldr	r2, [sp, #32]
   1c370:	1ad2      	subs	r2, r2, r3
   1c372:	9208      	str	r2, [sp, #32]
   1c374:	9a04      	ldr	r2, [sp, #16]
   1c376:	1ad3      	subs	r3, r2, r3
   1c378:	9304      	str	r3, [sp, #16]
   1c37a:	464b      	mov	r3, r9
   1c37c:	2b00      	cmp	r3, #0
   1c37e:	d01a      	beq.n	1c3b6 <_dtoa_r+0x756>
   1c380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c382:	2b00      	cmp	r3, #0
   1c384:	d100      	bne.n	1c388 <_dtoa_r+0x728>
   1c386:	e1bb      	b.n	1c700 <_dtoa_r+0xaa0>
   1c388:	2c00      	cmp	r4, #0
   1c38a:	dd10      	ble.n	1c3ae <_dtoa_r+0x74e>
   1c38c:	4641      	mov	r1, r8
   1c38e:	0022      	movs	r2, r4
   1c390:	4650      	mov	r0, sl
   1c392:	f001 fe19 	bl	1dfc8 <__pow5mult>
   1c396:	465a      	mov	r2, fp
   1c398:	0001      	movs	r1, r0
   1c39a:	4680      	mov	r8, r0
   1c39c:	4650      	mov	r0, sl
   1c39e:	f001 fd69 	bl	1de74 <__multiply>
   1c3a2:	0005      	movs	r5, r0
   1c3a4:	4659      	mov	r1, fp
   1c3a6:	4650      	mov	r0, sl
   1c3a8:	f001 fcc2 	bl	1dd30 <_Bfree>
   1c3ac:	46ab      	mov	fp, r5
   1c3ae:	464b      	mov	r3, r9
   1c3b0:	1b1a      	subs	r2, r3, r4
   1c3b2:	d000      	beq.n	1c3b6 <_dtoa_r+0x756>
   1c3b4:	e1a5      	b.n	1c702 <_dtoa_r+0xaa2>
   1c3b6:	2101      	movs	r1, #1
   1c3b8:	4650      	mov	r0, sl
   1c3ba:	f001 fd51 	bl	1de60 <__i2b>
   1c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c3c0:	4681      	mov	r9, r0
   1c3c2:	2b00      	cmp	r3, #0
   1c3c4:	dd1d      	ble.n	1c402 <_dtoa_r+0x7a2>
   1c3c6:	001a      	movs	r2, r3
   1c3c8:	0001      	movs	r1, r0
   1c3ca:	4650      	mov	r0, sl
   1c3cc:	f001 fdfc 	bl	1dfc8 <__pow5mult>
   1c3d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c3d2:	4681      	mov	r9, r0
   1c3d4:	2b01      	cmp	r3, #1
   1c3d6:	dc00      	bgt.n	1c3da <_dtoa_r+0x77a>
   1c3d8:	e150      	b.n	1c67c <_dtoa_r+0xa1c>
   1c3da:	2400      	movs	r4, #0
   1c3dc:	464b      	mov	r3, r9
   1c3de:	691b      	ldr	r3, [r3, #16]
   1c3e0:	3303      	adds	r3, #3
   1c3e2:	009b      	lsls	r3, r3, #2
   1c3e4:	444b      	add	r3, r9
   1c3e6:	6858      	ldr	r0, [r3, #4]
   1c3e8:	f001 fcf2 	bl	1ddd0 <__hi0bits>
   1c3ec:	2320      	movs	r3, #32
   1c3ee:	1a1b      	subs	r3, r3, r0
   1c3f0:	e010      	b.n	1c414 <_dtoa_r+0x7b4>
   1c3f2:	2220      	movs	r2, #32
   1c3f4:	0030      	movs	r0, r6
   1c3f6:	1ad3      	subs	r3, r2, r3
   1c3f8:	4098      	lsls	r0, r3
   1c3fa:	e685      	b.n	1c108 <_dtoa_r+0x4a8>
   1c3fc:	2300      	movs	r3, #0
   1c3fe:	930c      	str	r3, [sp, #48]	; 0x30
   1c400:	e4e3      	b.n	1bdca <_dtoa_r+0x16a>
   1c402:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c404:	2400      	movs	r4, #0
   1c406:	2b01      	cmp	r3, #1
   1c408:	dc00      	bgt.n	1c40c <_dtoa_r+0x7ac>
   1c40a:	e18b      	b.n	1c724 <_dtoa_r+0xac4>
   1c40c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c40e:	2301      	movs	r3, #1
   1c410:	2a00      	cmp	r2, #0
   1c412:	d1e3      	bne.n	1c3dc <_dtoa_r+0x77c>
   1c414:	9904      	ldr	r1, [sp, #16]
   1c416:	201f      	movs	r0, #31
   1c418:	468c      	mov	ip, r1
   1c41a:	4463      	add	r3, ip
   1c41c:	4018      	ands	r0, r3
   1c41e:	d100      	bne.n	1c422 <_dtoa_r+0x7c2>
   1c420:	e0ae      	b.n	1c580 <_dtoa_r+0x920>
   1c422:	2320      	movs	r3, #32
   1c424:	1a1b      	subs	r3, r3, r0
   1c426:	2b04      	cmp	r3, #4
   1c428:	dc00      	bgt.n	1c42c <_dtoa_r+0x7cc>
   1c42a:	e3cc      	b.n	1cbc6 <_dtoa_r+0xf66>
   1c42c:	231c      	movs	r3, #28
   1c42e:	1a18      	subs	r0, r3, r0
   1c430:	9b06      	ldr	r3, [sp, #24]
   1c432:	469c      	mov	ip, r3
   1c434:	4484      	add	ip, r0
   1c436:	4663      	mov	r3, ip
   1c438:	9306      	str	r3, [sp, #24]
   1c43a:	9b08      	ldr	r3, [sp, #32]
   1c43c:	469c      	mov	ip, r3
   1c43e:	4484      	add	ip, r0
   1c440:	4663      	mov	r3, ip
   1c442:	468c      	mov	ip, r1
   1c444:	4484      	add	ip, r0
   1c446:	9308      	str	r3, [sp, #32]
   1c448:	4663      	mov	r3, ip
   1c44a:	9304      	str	r3, [sp, #16]
   1c44c:	9b06      	ldr	r3, [sp, #24]
   1c44e:	2b00      	cmp	r3, #0
   1c450:	dd05      	ble.n	1c45e <_dtoa_r+0x7fe>
   1c452:	4659      	mov	r1, fp
   1c454:	001a      	movs	r2, r3
   1c456:	4650      	mov	r0, sl
   1c458:	f001 fe16 	bl	1e088 <__lshift>
   1c45c:	4683      	mov	fp, r0
   1c45e:	9b04      	ldr	r3, [sp, #16]
   1c460:	2b00      	cmp	r3, #0
   1c462:	dd05      	ble.n	1c470 <_dtoa_r+0x810>
   1c464:	4649      	mov	r1, r9
   1c466:	001a      	movs	r2, r3
   1c468:	4650      	mov	r0, sl
   1c46a:	f001 fe0d 	bl	1e088 <__lshift>
   1c46e:	4681      	mov	r9, r0
   1c470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c472:	2b00      	cmp	r3, #0
   1c474:	d000      	beq.n	1c478 <_dtoa_r+0x818>
   1c476:	e094      	b.n	1c5a2 <_dtoa_r+0x942>
   1c478:	9b07      	ldr	r3, [sp, #28]
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	dc00      	bgt.n	1c480 <_dtoa_r+0x820>
   1c47e:	e175      	b.n	1c76c <_dtoa_r+0xb0c>
   1c480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c482:	2b00      	cmp	r3, #0
   1c484:	d100      	bne.n	1c488 <_dtoa_r+0x828>
   1c486:	e0a6      	b.n	1c5d6 <_dtoa_r+0x976>
   1c488:	9b08      	ldr	r3, [sp, #32]
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	dd05      	ble.n	1c49a <_dtoa_r+0x83a>
   1c48e:	4641      	mov	r1, r8
   1c490:	001a      	movs	r2, r3
   1c492:	4650      	mov	r0, sl
   1c494:	f001 fdf8 	bl	1e088 <__lshift>
   1c498:	4680      	mov	r8, r0
   1c49a:	4643      	mov	r3, r8
   1c49c:	930c      	str	r3, [sp, #48]	; 0x30
   1c49e:	2c00      	cmp	r4, #0
   1c4a0:	d000      	beq.n	1c4a4 <_dtoa_r+0x844>
   1c4a2:	e250      	b.n	1c946 <_dtoa_r+0xce6>
   1c4a4:	9c07      	ldr	r4, [sp, #28]
   1c4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c4a8:	3c01      	subs	r4, #1
   1c4aa:	0023      	movs	r3, r4
   1c4ac:	4694      	mov	ip, r2
   1c4ae:	4463      	add	r3, ip
   1c4b0:	9308      	str	r3, [sp, #32]
   1c4b2:	2301      	movs	r3, #1
   1c4b4:	4033      	ands	r3, r6
   1c4b6:	9307      	str	r3, [sp, #28]
   1c4b8:	464b      	mov	r3, r9
   1c4ba:	9306      	str	r3, [sp, #24]
   1c4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c4be:	4657      	mov	r7, sl
   1c4c0:	4645      	mov	r5, r8
   1c4c2:	465e      	mov	r6, fp
   1c4c4:	4692      	mov	sl, r2
   1c4c6:	4698      	mov	r8, r3
   1c4c8:	9b06      	ldr	r3, [sp, #24]
   1c4ca:	0030      	movs	r0, r6
   1c4cc:	0019      	movs	r1, r3
   1c4ce:	4699      	mov	r9, r3
   1c4d0:	f7ff fb1c 	bl	1bb0c <quorem>
   1c4d4:	0003      	movs	r3, r0
   1c4d6:	900b      	str	r0, [sp, #44]	; 0x2c
   1c4d8:	3330      	adds	r3, #48	; 0x30
   1c4da:	0029      	movs	r1, r5
   1c4dc:	0030      	movs	r0, r6
   1c4de:	9304      	str	r3, [sp, #16]
   1c4e0:	f001 fe32 	bl	1e148 <__mcmp>
   1c4e4:	4649      	mov	r1, r9
   1c4e6:	0004      	movs	r4, r0
   1c4e8:	4642      	mov	r2, r8
   1c4ea:	0038      	movs	r0, r7
   1c4ec:	f001 fe46 	bl	1e17c <__mdiff>
   1c4f0:	68c3      	ldr	r3, [r0, #12]
   1c4f2:	4681      	mov	r9, r0
   1c4f4:	2b00      	cmp	r3, #0
   1c4f6:	d000      	beq.n	1c4fa <_dtoa_r+0x89a>
   1c4f8:	e11e      	b.n	1c738 <_dtoa_r+0xad8>
   1c4fa:	0001      	movs	r1, r0
   1c4fc:	0030      	movs	r0, r6
   1c4fe:	f001 fe23 	bl	1e148 <__mcmp>
   1c502:	4683      	mov	fp, r0
   1c504:	4649      	mov	r1, r9
   1c506:	0038      	movs	r0, r7
   1c508:	f001 fc12 	bl	1dd30 <_Bfree>
   1c50c:	465b      	mov	r3, fp
   1c50e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c510:	4313      	orrs	r3, r2
   1c512:	d103      	bne.n	1c51c <_dtoa_r+0x8bc>
   1c514:	9b07      	ldr	r3, [sp, #28]
   1c516:	2b00      	cmp	r3, #0
   1c518:	d100      	bne.n	1c51c <_dtoa_r+0x8bc>
   1c51a:	e306      	b.n	1cb2a <_dtoa_r+0xeca>
   1c51c:	2c00      	cmp	r4, #0
   1c51e:	da00      	bge.n	1c522 <_dtoa_r+0x8c2>
   1c520:	e1a8      	b.n	1c874 <_dtoa_r+0xc14>
   1c522:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c524:	431c      	orrs	r4, r3
   1c526:	d103      	bne.n	1c530 <_dtoa_r+0x8d0>
   1c528:	9b07      	ldr	r3, [sp, #28]
   1c52a:	2b00      	cmp	r3, #0
   1c52c:	d100      	bne.n	1c530 <_dtoa_r+0x8d0>
   1c52e:	e1a1      	b.n	1c874 <_dtoa_r+0xc14>
   1c530:	465b      	mov	r3, fp
   1c532:	2b00      	cmp	r3, #0
   1c534:	dd00      	ble.n	1c538 <_dtoa_r+0x8d8>
   1c536:	e282      	b.n	1ca3e <_dtoa_r+0xdde>
   1c538:	4669      	mov	r1, sp
   1c53a:	4652      	mov	r2, sl
   1c53c:	4653      	mov	r3, sl
   1c53e:	7c09      	ldrb	r1, [r1, #16]
   1c540:	1c5c      	adds	r4, r3, #1
   1c542:	7011      	strb	r1, [r2, #0]
   1c544:	9a08      	ldr	r2, [sp, #32]
   1c546:	4552      	cmp	r2, sl
   1c548:	d100      	bne.n	1c54c <_dtoa_r+0x8ec>
   1c54a:	e28a      	b.n	1ca62 <_dtoa_r+0xe02>
   1c54c:	0031      	movs	r1, r6
   1c54e:	2300      	movs	r3, #0
   1c550:	220a      	movs	r2, #10
   1c552:	0038      	movs	r0, r7
   1c554:	f001 fbf6 	bl	1dd44 <__multadd>
   1c558:	2300      	movs	r3, #0
   1c55a:	0006      	movs	r6, r0
   1c55c:	220a      	movs	r2, #10
   1c55e:	0029      	movs	r1, r5
   1c560:	0038      	movs	r0, r7
   1c562:	4545      	cmp	r5, r8
   1c564:	d100      	bne.n	1c568 <_dtoa_r+0x908>
   1c566:	e0e1      	b.n	1c72c <_dtoa_r+0xacc>
   1c568:	f001 fbec 	bl	1dd44 <__multadd>
   1c56c:	4641      	mov	r1, r8
   1c56e:	0005      	movs	r5, r0
   1c570:	2300      	movs	r3, #0
   1c572:	220a      	movs	r2, #10
   1c574:	0038      	movs	r0, r7
   1c576:	f001 fbe5 	bl	1dd44 <__multadd>
   1c57a:	46a2      	mov	sl, r4
   1c57c:	4680      	mov	r8, r0
   1c57e:	e7a3      	b.n	1c4c8 <_dtoa_r+0x868>
   1c580:	201c      	movs	r0, #28
   1c582:	9b06      	ldr	r3, [sp, #24]
   1c584:	469c      	mov	ip, r3
   1c586:	4484      	add	ip, r0
   1c588:	4663      	mov	r3, ip
   1c58a:	9306      	str	r3, [sp, #24]
   1c58c:	9b08      	ldr	r3, [sp, #32]
   1c58e:	469c      	mov	ip, r3
   1c590:	4484      	add	ip, r0
   1c592:	4663      	mov	r3, ip
   1c594:	9308      	str	r3, [sp, #32]
   1c596:	9b04      	ldr	r3, [sp, #16]
   1c598:	469c      	mov	ip, r3
   1c59a:	4484      	add	ip, r0
   1c59c:	4663      	mov	r3, ip
   1c59e:	9304      	str	r3, [sp, #16]
   1c5a0:	e754      	b.n	1c44c <_dtoa_r+0x7ec>
   1c5a2:	4649      	mov	r1, r9
   1c5a4:	4658      	mov	r0, fp
   1c5a6:	f001 fdcf 	bl	1e148 <__mcmp>
   1c5aa:	2800      	cmp	r0, #0
   1c5ac:	db00      	blt.n	1c5b0 <_dtoa_r+0x950>
   1c5ae:	e763      	b.n	1c478 <_dtoa_r+0x818>
   1c5b0:	9b03      	ldr	r3, [sp, #12]
   1c5b2:	4659      	mov	r1, fp
   1c5b4:	3b01      	subs	r3, #1
   1c5b6:	9303      	str	r3, [sp, #12]
   1c5b8:	220a      	movs	r2, #10
   1c5ba:	2300      	movs	r3, #0
   1c5bc:	4650      	mov	r0, sl
   1c5be:	f001 fbc1 	bl	1dd44 <__multadd>
   1c5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c5c4:	4683      	mov	fp, r0
   1c5c6:	2b00      	cmp	r3, #0
   1c5c8:	d000      	beq.n	1c5cc <_dtoa_r+0x96c>
   1c5ca:	e2ca      	b.n	1cb62 <_dtoa_r+0xf02>
   1c5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c5ce:	2b00      	cmp	r3, #0
   1c5d0:	dc00      	bgt.n	1c5d4 <_dtoa_r+0x974>
   1c5d2:	e2d8      	b.n	1cb86 <_dtoa_r+0xf26>
   1c5d4:	9307      	str	r3, [sp, #28]
   1c5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c5d8:	465d      	mov	r5, fp
   1c5da:	2400      	movs	r4, #0
   1c5dc:	9f07      	ldr	r7, [sp, #28]
   1c5de:	469b      	mov	fp, r3
   1c5e0:	e006      	b.n	1c5f0 <_dtoa_r+0x990>
   1c5e2:	0029      	movs	r1, r5
   1c5e4:	2300      	movs	r3, #0
   1c5e6:	220a      	movs	r2, #10
   1c5e8:	4650      	mov	r0, sl
   1c5ea:	f001 fbab 	bl	1dd44 <__multadd>
   1c5ee:	0005      	movs	r5, r0
   1c5f0:	4649      	mov	r1, r9
   1c5f2:	0028      	movs	r0, r5
   1c5f4:	f7ff fa8a 	bl	1bb0c <quorem>
   1c5f8:	465b      	mov	r3, fp
   1c5fa:	3030      	adds	r0, #48	; 0x30
   1c5fc:	5518      	strb	r0, [r3, r4]
   1c5fe:	3401      	adds	r4, #1
   1c600:	42bc      	cmp	r4, r7
   1c602:	dbee      	blt.n	1c5e2 <_dtoa_r+0x982>
   1c604:	46ab      	mov	fp, r5
   1c606:	0006      	movs	r6, r0
   1c608:	9c07      	ldr	r4, [sp, #28]
   1c60a:	2c00      	cmp	r4, #0
   1c60c:	dc00      	bgt.n	1c610 <_dtoa_r+0x9b0>
   1c60e:	e237      	b.n	1ca80 <_dtoa_r+0xe20>
   1c610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c612:	2700      	movs	r7, #0
   1c614:	469c      	mov	ip, r3
   1c616:	4464      	add	r4, ip
   1c618:	4659      	mov	r1, fp
   1c61a:	2201      	movs	r2, #1
   1c61c:	4650      	mov	r0, sl
   1c61e:	f001 fd33 	bl	1e088 <__lshift>
   1c622:	4649      	mov	r1, r9
   1c624:	4683      	mov	fp, r0
   1c626:	f001 fd8f 	bl	1e148 <__mcmp>
   1c62a:	2800      	cmp	r0, #0
   1c62c:	dc00      	bgt.n	1c630 <_dtoa_r+0x9d0>
   1c62e:	e144      	b.n	1c8ba <_dtoa_r+0xc5a>
   1c630:	1e65      	subs	r5, r4, #1
   1c632:	782b      	ldrb	r3, [r5, #0]
   1c634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c636:	e006      	b.n	1c646 <_dtoa_r+0x9e6>
   1c638:	4295      	cmp	r5, r2
   1c63a:	d100      	bne.n	1c63e <_dtoa_r+0x9de>
   1c63c:	e0b1      	b.n	1c7a2 <_dtoa_r+0xb42>
   1c63e:	3c02      	subs	r4, #2
   1c640:	7823      	ldrb	r3, [r4, #0]
   1c642:	002c      	movs	r4, r5
   1c644:	3d01      	subs	r5, #1
   1c646:	2b39      	cmp	r3, #57	; 0x39
   1c648:	d0f6      	beq.n	1c638 <_dtoa_r+0x9d8>
   1c64a:	3301      	adds	r3, #1
   1c64c:	702b      	strb	r3, [r5, #0]
   1c64e:	4649      	mov	r1, r9
   1c650:	4650      	mov	r0, sl
   1c652:	f001 fb6d 	bl	1dd30 <_Bfree>
   1c656:	4643      	mov	r3, r8
   1c658:	2b00      	cmp	r3, #0
   1c65a:	d100      	bne.n	1c65e <_dtoa_r+0x9fe>
   1c65c:	e52f      	b.n	1c0be <_dtoa_r+0x45e>
   1c65e:	2f00      	cmp	r7, #0
   1c660:	d005      	beq.n	1c66e <_dtoa_r+0xa0e>
   1c662:	4547      	cmp	r7, r8
   1c664:	d003      	beq.n	1c66e <_dtoa_r+0xa0e>
   1c666:	0039      	movs	r1, r7
   1c668:	4650      	mov	r0, sl
   1c66a:	f001 fb61 	bl	1dd30 <_Bfree>
   1c66e:	4641      	mov	r1, r8
   1c670:	4650      	mov	r0, sl
   1c672:	f001 fb5d 	bl	1dd30 <_Bfree>
   1c676:	e522      	b.n	1c0be <_dtoa_r+0x45e>
   1c678:	0013      	movs	r3, r2
   1c67a:	e675      	b.n	1c368 <_dtoa_r+0x708>
   1c67c:	2e00      	cmp	r6, #0
   1c67e:	d000      	beq.n	1c682 <_dtoa_r+0xa22>
   1c680:	e6ab      	b.n	1c3da <_dtoa_r+0x77a>
   1c682:	033b      	lsls	r3, r7, #12
   1c684:	2400      	movs	r4, #0
   1c686:	2b00      	cmp	r3, #0
   1c688:	d000      	beq.n	1c68c <_dtoa_r+0xa2c>
   1c68a:	e6bf      	b.n	1c40c <_dtoa_r+0x7ac>
   1c68c:	4bba      	ldr	r3, [pc, #744]	; (1c978 <_dtoa_r+0xd18>)
   1c68e:	423b      	tst	r3, r7
   1c690:	d100      	bne.n	1c694 <_dtoa_r+0xa34>
   1c692:	e6bb      	b.n	1c40c <_dtoa_r+0x7ac>
   1c694:	9b06      	ldr	r3, [sp, #24]
   1c696:	3401      	adds	r4, #1
   1c698:	3301      	adds	r3, #1
   1c69a:	9306      	str	r3, [sp, #24]
   1c69c:	9b04      	ldr	r3, [sp, #16]
   1c69e:	3301      	adds	r3, #1
   1c6a0:	9304      	str	r3, [sp, #16]
   1c6a2:	e6b3      	b.n	1c40c <_dtoa_r+0x7ac>
   1c6a4:	2301      	movs	r3, #1
   1c6a6:	930b      	str	r3, [sp, #44]	; 0x2c
   1c6a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c6aa:	2b00      	cmp	r3, #0
   1c6ac:	dc00      	bgt.n	1c6b0 <_dtoa_r+0xa50>
   1c6ae:	e0d1      	b.n	1c854 <_dtoa_r+0xbf4>
   1c6b0:	001d      	movs	r5, r3
   1c6b2:	4698      	mov	r8, r3
   1c6b4:	930e      	str	r3, [sp, #56]	; 0x38
   1c6b6:	9307      	str	r3, [sp, #28]
   1c6b8:	f7ff fbc8 	bl	1be4c <_dtoa_r+0x1ec>
   1c6bc:	9b07      	ldr	r3, [sp, #28]
   1c6be:	2b00      	cmp	r3, #0
   1c6c0:	dd00      	ble.n	1c6c4 <_dtoa_r+0xa64>
   1c6c2:	e553      	b.n	1c16c <_dtoa_r+0x50c>
   1c6c4:	d000      	beq.n	1c6c8 <_dtoa_r+0xa68>
   1c6c6:	e0ad      	b.n	1c824 <_dtoa_r+0xbc4>
   1c6c8:	9804      	ldr	r0, [sp, #16]
   1c6ca:	9905      	ldr	r1, [sp, #20]
   1c6cc:	2200      	movs	r2, #0
   1c6ce:	4bab      	ldr	r3, [pc, #684]	; (1c97c <_dtoa_r+0xd1c>)
   1c6d0:	f7fc fe14 	bl	192fc <__aeabi_dmul>
   1c6d4:	003b      	movs	r3, r7
   1c6d6:	0032      	movs	r2, r6
   1c6d8:	f7fb fbe2 	bl	17ea0 <__aeabi_dcmpge>
   1c6dc:	2300      	movs	r3, #0
   1c6de:	4699      	mov	r9, r3
   1c6e0:	4698      	mov	r8, r3
   1c6e2:	2800      	cmp	r0, #0
   1c6e4:	d055      	beq.n	1c792 <_dtoa_r+0xb32>
   1c6e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c6e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c6ea:	43db      	mvns	r3, r3
   1c6ec:	9303      	str	r3, [sp, #12]
   1c6ee:	4649      	mov	r1, r9
   1c6f0:	4650      	mov	r0, sl
   1c6f2:	f001 fb1d 	bl	1dd30 <_Bfree>
   1c6f6:	4643      	mov	r3, r8
   1c6f8:	2b00      	cmp	r3, #0
   1c6fa:	d100      	bne.n	1c6fe <_dtoa_r+0xa9e>
   1c6fc:	e4df      	b.n	1c0be <_dtoa_r+0x45e>
   1c6fe:	e7b6      	b.n	1c66e <_dtoa_r+0xa0e>
   1c700:	464a      	mov	r2, r9
   1c702:	4659      	mov	r1, fp
   1c704:	4650      	mov	r0, sl
   1c706:	f001 fc5f 	bl	1dfc8 <__pow5mult>
   1c70a:	4683      	mov	fp, r0
   1c70c:	e653      	b.n	1c3b6 <_dtoa_r+0x756>
   1c70e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c710:	2a00      	cmp	r2, #0
   1c712:	d100      	bne.n	1c716 <_dtoa_r+0xab6>
   1c714:	e1b6      	b.n	1ca84 <_dtoa_r+0xe24>
   1c716:	4a9a      	ldr	r2, [pc, #616]	; (1c980 <_dtoa_r+0xd20>)
   1c718:	464c      	mov	r4, r9
   1c71a:	4694      	mov	ip, r2
   1c71c:	9a06      	ldr	r2, [sp, #24]
   1c71e:	4463      	add	r3, ip
   1c720:	9208      	str	r2, [sp, #32]
   1c722:	e5d5      	b.n	1c2d0 <_dtoa_r+0x670>
   1c724:	2e00      	cmp	r6, #0
   1c726:	d000      	beq.n	1c72a <_dtoa_r+0xaca>
   1c728:	e670      	b.n	1c40c <_dtoa_r+0x7ac>
   1c72a:	e7aa      	b.n	1c682 <_dtoa_r+0xa22>
   1c72c:	f001 fb0a 	bl	1dd44 <__multadd>
   1c730:	46a2      	mov	sl, r4
   1c732:	0005      	movs	r5, r0
   1c734:	4680      	mov	r8, r0
   1c736:	e6c7      	b.n	1c4c8 <_dtoa_r+0x868>
   1c738:	2301      	movs	r3, #1
   1c73a:	469b      	mov	fp, r3
   1c73c:	e6e2      	b.n	1c504 <_dtoa_r+0x8a4>
   1c73e:	2300      	movs	r3, #0
   1c740:	930b      	str	r3, [sp, #44]	; 0x2c
   1c742:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c744:	2b02      	cmp	r3, #2
   1c746:	d0af      	beq.n	1c6a8 <_dtoa_r+0xa48>
   1c748:	2400      	movs	r4, #0
   1c74a:	4653      	mov	r3, sl
   1c74c:	0021      	movs	r1, r4
   1c74e:	645c      	str	r4, [r3, #68]	; 0x44
   1c750:	4650      	mov	r0, sl
   1c752:	f001 fac5 	bl	1dce0 <_Balloc>
   1c756:	4653      	mov	r3, sl
   1c758:	6418      	str	r0, [r3, #64]	; 0x40
   1c75a:	2301      	movs	r3, #1
   1c75c:	425b      	negs	r3, r3
   1c75e:	9307      	str	r3, [sp, #28]
   1c760:	930e      	str	r3, [sp, #56]	; 0x38
   1c762:	3302      	adds	r3, #2
   1c764:	900a      	str	r0, [sp, #40]	; 0x28
   1c766:	9423      	str	r4, [sp, #140]	; 0x8c
   1c768:	930b      	str	r3, [sp, #44]	; 0x2c
   1c76a:	e4ec      	b.n	1c146 <_dtoa_r+0x4e6>
   1c76c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c76e:	2b02      	cmp	r3, #2
   1c770:	dc00      	bgt.n	1c774 <_dtoa_r+0xb14>
   1c772:	e685      	b.n	1c480 <_dtoa_r+0x820>
   1c774:	9b07      	ldr	r3, [sp, #28]
   1c776:	2b00      	cmp	r3, #0
   1c778:	d1b5      	bne.n	1c6e6 <_dtoa_r+0xa86>
   1c77a:	4649      	mov	r1, r9
   1c77c:	2205      	movs	r2, #5
   1c77e:	4650      	mov	r0, sl
   1c780:	f001 fae0 	bl	1dd44 <__multadd>
   1c784:	4681      	mov	r9, r0
   1c786:	0001      	movs	r1, r0
   1c788:	4658      	mov	r0, fp
   1c78a:	f001 fcdd 	bl	1e148 <__mcmp>
   1c78e:	2800      	cmp	r0, #0
   1c790:	dda9      	ble.n	1c6e6 <_dtoa_r+0xa86>
   1c792:	2331      	movs	r3, #49	; 0x31
   1c794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c796:	7013      	strb	r3, [r2, #0]
   1c798:	9b03      	ldr	r3, [sp, #12]
   1c79a:	1c54      	adds	r4, r2, #1
   1c79c:	3301      	adds	r3, #1
   1c79e:	9303      	str	r3, [sp, #12]
   1c7a0:	e7a5      	b.n	1c6ee <_dtoa_r+0xa8e>
   1c7a2:	9b03      	ldr	r3, [sp, #12]
   1c7a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c7a6:	3301      	adds	r3, #1
   1c7a8:	9303      	str	r3, [sp, #12]
   1c7aa:	2331      	movs	r3, #49	; 0x31
   1c7ac:	7013      	strb	r3, [r2, #0]
   1c7ae:	e74e      	b.n	1c64e <_dtoa_r+0x9ee>
   1c7b0:	2300      	movs	r3, #0
   1c7b2:	930b      	str	r3, [sp, #44]	; 0x2c
   1c7b4:	f7ff fb3d 	bl	1be32 <_dtoa_r+0x1d2>
   1c7b8:	9b06      	ldr	r3, [sp, #24]
   1c7ba:	465c      	mov	r4, fp
   1c7bc:	469b      	mov	fp, r3
   1c7be:	9b07      	ldr	r3, [sp, #28]
   1c7c0:	469a      	mov	sl, r3
   1c7c2:	e47c      	b.n	1c0be <_dtoa_r+0x45e>
   1c7c4:	4640      	mov	r0, r8
   1c7c6:	f7fd fb63 	bl	19e90 <__aeabi_i2d>
   1c7ca:	0032      	movs	r2, r6
   1c7cc:	003b      	movs	r3, r7
   1c7ce:	f7fc fd95 	bl	192fc <__aeabi_dmul>
   1c7d2:	2200      	movs	r2, #0
   1c7d4:	4b6b      	ldr	r3, [pc, #428]	; (1c984 <_dtoa_r+0xd24>)
   1c7d6:	f7fb fe4d 	bl	18474 <__aeabi_dadd>
   1c7da:	4a6b      	ldr	r2, [pc, #428]	; (1c988 <_dtoa_r+0xd28>)
   1c7dc:	000b      	movs	r3, r1
   1c7de:	4694      	mov	ip, r2
   1c7e0:	4463      	add	r3, ip
   1c7e2:	9008      	str	r0, [sp, #32]
   1c7e4:	9109      	str	r1, [sp, #36]	; 0x24
   1c7e6:	9309      	str	r3, [sp, #36]	; 0x24
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	4b64      	ldr	r3, [pc, #400]	; (1c97c <_dtoa_r+0xd1c>)
   1c7ec:	0030      	movs	r0, r6
   1c7ee:	0039      	movs	r1, r7
   1c7f0:	f7fd f804 	bl	197fc <__aeabi_dsub>
   1c7f4:	9e08      	ldr	r6, [sp, #32]
   1c7f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1c7f8:	0032      	movs	r2, r6
   1c7fa:	003b      	movs	r3, r7
   1c7fc:	0004      	movs	r4, r0
   1c7fe:	000d      	movs	r5, r1
   1c800:	f7fb fb44 	bl	17e8c <__aeabi_dcmpgt>
   1c804:	2800      	cmp	r0, #0
   1c806:	d000      	beq.n	1c80a <_dtoa_r+0xbaa>
   1c808:	e0b2      	b.n	1c970 <_dtoa_r+0xd10>
   1c80a:	2080      	movs	r0, #128	; 0x80
   1c80c:	0600      	lsls	r0, r0, #24
   1c80e:	4684      	mov	ip, r0
   1c810:	0039      	movs	r1, r7
   1c812:	4461      	add	r1, ip
   1c814:	000b      	movs	r3, r1
   1c816:	0032      	movs	r2, r6
   1c818:	0020      	movs	r0, r4
   1c81a:	0029      	movs	r1, r5
   1c81c:	f7fb fb22 	bl	17e64 <__aeabi_dcmplt>
   1c820:	2800      	cmp	r0, #0
   1c822:	d057      	beq.n	1c8d4 <_dtoa_r+0xc74>
   1c824:	2300      	movs	r3, #0
   1c826:	4699      	mov	r9, r3
   1c828:	4698      	mov	r8, r3
   1c82a:	e75c      	b.n	1c6e6 <_dtoa_r+0xa86>
   1c82c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c82e:	f7ff fa4c 	bl	1bcca <_dtoa_r+0x6a>
   1c832:	1ae2      	subs	r2, r4, r3
   1c834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c836:	46a1      	mov	r9, r4
   1c838:	469c      	mov	ip, r3
   1c83a:	4494      	add	ip, r2
   1c83c:	4663      	mov	r3, ip
   1c83e:	2400      	movs	r4, #0
   1c840:	930d      	str	r3, [sp, #52]	; 0x34
   1c842:	e53e      	b.n	1c2c2 <_dtoa_r+0x662>
   1c844:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c846:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c848:	9208      	str	r2, [sp, #32]
   1c84a:	9309      	str	r3, [sp, #36]	; 0x24
   1c84c:	2302      	movs	r3, #2
   1c84e:	4698      	mov	r8, r3
   1c850:	f7ff fb3a 	bl	1bec8 <_dtoa_r+0x268>
   1c854:	2300      	movs	r3, #0
   1c856:	4652      	mov	r2, sl
   1c858:	2100      	movs	r1, #0
   1c85a:	6453      	str	r3, [r2, #68]	; 0x44
   1c85c:	4650      	mov	r0, sl
   1c85e:	f001 fa3f 	bl	1dce0 <_Balloc>
   1c862:	4653      	mov	r3, sl
   1c864:	6418      	str	r0, [r3, #64]	; 0x40
   1c866:	2301      	movs	r3, #1
   1c868:	900a      	str	r0, [sp, #40]	; 0x28
   1c86a:	9307      	str	r3, [sp, #28]
   1c86c:	9323      	str	r3, [sp, #140]	; 0x8c
   1c86e:	930e      	str	r3, [sp, #56]	; 0x38
   1c870:	f7ff fb07 	bl	1be82 <_dtoa_r+0x222>
   1c874:	4643      	mov	r3, r8
   1c876:	930c      	str	r3, [sp, #48]	; 0x30
   1c878:	465b      	mov	r3, fp
   1c87a:	9a06      	ldr	r2, [sp, #24]
   1c87c:	46a8      	mov	r8, r5
   1c87e:	46b3      	mov	fp, r6
   1c880:	4655      	mov	r5, sl
   1c882:	9e04      	ldr	r6, [sp, #16]
   1c884:	4691      	mov	r9, r2
   1c886:	46ba      	mov	sl, r7
   1c888:	2b00      	cmp	r3, #0
   1c88a:	dd10      	ble.n	1c8ae <_dtoa_r+0xc4e>
   1c88c:	4659      	mov	r1, fp
   1c88e:	2201      	movs	r2, #1
   1c890:	0038      	movs	r0, r7
   1c892:	f001 fbf9 	bl	1e088 <__lshift>
   1c896:	4649      	mov	r1, r9
   1c898:	4683      	mov	fp, r0
   1c89a:	f001 fc55 	bl	1e148 <__mcmp>
   1c89e:	2800      	cmp	r0, #0
   1c8a0:	dc00      	bgt.n	1c8a4 <_dtoa_r+0xc44>
   1c8a2:	e157      	b.n	1cb54 <_dtoa_r+0xef4>
   1c8a4:	2e39      	cmp	r6, #57	; 0x39
   1c8a6:	d100      	bne.n	1c8aa <_dtoa_r+0xc4a>
   1c8a8:	e122      	b.n	1caf0 <_dtoa_r+0xe90>
   1c8aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1c8ac:	3631      	adds	r6, #49	; 0x31
   1c8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c8b0:	4647      	mov	r7, r8
   1c8b2:	1c6c      	adds	r4, r5, #1
   1c8b4:	702e      	strb	r6, [r5, #0]
   1c8b6:	4698      	mov	r8, r3
   1c8b8:	e6c9      	b.n	1c64e <_dtoa_r+0x9ee>
   1c8ba:	2800      	cmp	r0, #0
   1c8bc:	d103      	bne.n	1c8c6 <_dtoa_r+0xc66>
   1c8be:	07f3      	lsls	r3, r6, #31
   1c8c0:	d501      	bpl.n	1c8c6 <_dtoa_r+0xc66>
   1c8c2:	e6b5      	b.n	1c630 <_dtoa_r+0x9d0>
   1c8c4:	001c      	movs	r4, r3
   1c8c6:	1e63      	subs	r3, r4, #1
   1c8c8:	781a      	ldrb	r2, [r3, #0]
   1c8ca:	2a30      	cmp	r2, #48	; 0x30
   1c8cc:	d0fa      	beq.n	1c8c4 <_dtoa_r+0xc64>
   1c8ce:	e6be      	b.n	1c64e <_dtoa_r+0x9ee>
   1c8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c8d2:	4699      	mov	r9, r3
   1c8d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1c8d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1c8d8:	e435      	b.n	1c146 <_dtoa_r+0x4e6>
   1c8da:	2501      	movs	r5, #1
   1c8dc:	f7ff fab4 	bl	1be48 <_dtoa_r+0x1e8>
   1c8e0:	9b03      	ldr	r3, [sp, #12]
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	d100      	bne.n	1c8e8 <_dtoa_r+0xc88>
   1c8e6:	e0d4      	b.n	1ca92 <_dtoa_r+0xe32>
   1c8e8:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c8ea:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c8ec:	425c      	negs	r4, r3
   1c8ee:	230f      	movs	r3, #15
   1c8f0:	4a26      	ldr	r2, [pc, #152]	; (1c98c <_dtoa_r+0xd2c>)
   1c8f2:	4023      	ands	r3, r4
   1c8f4:	00db      	lsls	r3, r3, #3
   1c8f6:	18d3      	adds	r3, r2, r3
   1c8f8:	681a      	ldr	r2, [r3, #0]
   1c8fa:	685b      	ldr	r3, [r3, #4]
   1c8fc:	f7fc fcfe 	bl	192fc <__aeabi_dmul>
   1c900:	1124      	asrs	r4, r4, #4
   1c902:	0006      	movs	r6, r0
   1c904:	000f      	movs	r7, r1
   1c906:	2c00      	cmp	r4, #0
   1c908:	d100      	bne.n	1c90c <_dtoa_r+0xcac>
   1c90a:	e149      	b.n	1cba0 <_dtoa_r+0xf40>
   1c90c:	2302      	movs	r3, #2
   1c90e:	4698      	mov	r8, r3
   1c910:	4d1f      	ldr	r5, [pc, #124]	; (1c990 <_dtoa_r+0xd30>)
   1c912:	2301      	movs	r3, #1
   1c914:	4223      	tst	r3, r4
   1c916:	d009      	beq.n	1c92c <_dtoa_r+0xccc>
   1c918:	469c      	mov	ip, r3
   1c91a:	682a      	ldr	r2, [r5, #0]
   1c91c:	686b      	ldr	r3, [r5, #4]
   1c91e:	0030      	movs	r0, r6
   1c920:	0039      	movs	r1, r7
   1c922:	44e0      	add	r8, ip
   1c924:	f7fc fcea 	bl	192fc <__aeabi_dmul>
   1c928:	0006      	movs	r6, r0
   1c92a:	000f      	movs	r7, r1
   1c92c:	1064      	asrs	r4, r4, #1
   1c92e:	3508      	adds	r5, #8
   1c930:	2c00      	cmp	r4, #0
   1c932:	d1ee      	bne.n	1c912 <_dtoa_r+0xcb2>
   1c934:	f7ff fae4 	bl	1bf00 <_dtoa_r+0x2a0>
   1c938:	9b03      	ldr	r3, [sp, #12]
   1c93a:	2730      	movs	r7, #48	; 0x30
   1c93c:	3301      	adds	r3, #1
   1c93e:	9303      	str	r3, [sp, #12]
   1c940:	2330      	movs	r3, #48	; 0x30
   1c942:	702b      	strb	r3, [r5, #0]
   1c944:	e4ac      	b.n	1c2a0 <_dtoa_r+0x640>
   1c946:	6859      	ldr	r1, [r3, #4]
   1c948:	4650      	mov	r0, sl
   1c94a:	f001 f9c9 	bl	1dce0 <_Balloc>
   1c94e:	4643      	mov	r3, r8
   1c950:	4641      	mov	r1, r8
   1c952:	0004      	movs	r4, r0
   1c954:	691b      	ldr	r3, [r3, #16]
   1c956:	310c      	adds	r1, #12
   1c958:	1c9a      	adds	r2, r3, #2
   1c95a:	0092      	lsls	r2, r2, #2
   1c95c:	300c      	adds	r0, #12
   1c95e:	f001 f91d 	bl	1db9c <memcpy>
   1c962:	2201      	movs	r2, #1
   1c964:	0021      	movs	r1, r4
   1c966:	4650      	mov	r0, sl
   1c968:	f001 fb8e 	bl	1e088 <__lshift>
   1c96c:	900c      	str	r0, [sp, #48]	; 0x30
   1c96e:	e599      	b.n	1c4a4 <_dtoa_r+0x844>
   1c970:	2300      	movs	r3, #0
   1c972:	4699      	mov	r9, r3
   1c974:	4698      	mov	r8, r3
   1c976:	e70c      	b.n	1c792 <_dtoa_r+0xb32>
   1c978:	7ff00000 	.word	0x7ff00000
   1c97c:	40140000 	.word	0x40140000
   1c980:	00000433 	.word	0x00000433
   1c984:	401c0000 	.word	0x401c0000
   1c988:	fcc00000 	.word	0xfcc00000
   1c98c:	000203e0 	.word	0x000203e0
   1c990:	000203b8 	.word	0x000203b8
   1c994:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c996:	498f      	ldr	r1, [pc, #572]	; (1cbd4 <_dtoa_r+0xf74>)
   1c998:	3b01      	subs	r3, #1
   1c99a:	00db      	lsls	r3, r3, #3
   1c99c:	18c9      	adds	r1, r1, r3
   1c99e:	6808      	ldr	r0, [r1, #0]
   1c9a0:	6849      	ldr	r1, [r1, #4]
   1c9a2:	9a08      	ldr	r2, [sp, #32]
   1c9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c9a6:	f7fc fca9 	bl	192fc <__aeabi_dmul>
   1c9aa:	9014      	str	r0, [sp, #80]	; 0x50
   1c9ac:	9115      	str	r1, [sp, #84]	; 0x54
   1c9ae:	0039      	movs	r1, r7
   1c9b0:	0030      	movs	r0, r6
   1c9b2:	f7fd fa39 	bl	19e28 <__aeabi_d2iz>
   1c9b6:	0005      	movs	r5, r0
   1c9b8:	f7fd fa6a 	bl	19e90 <__aeabi_i2d>
   1c9bc:	0002      	movs	r2, r0
   1c9be:	000b      	movs	r3, r1
   1c9c0:	0030      	movs	r0, r6
   1c9c2:	0039      	movs	r1, r7
   1c9c4:	f7fc ff1a 	bl	197fc <__aeabi_dsub>
   1c9c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c9ca:	9008      	str	r0, [sp, #32]
   1c9cc:	9109      	str	r1, [sp, #36]	; 0x24
   1c9ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c9d0:	001a      	movs	r2, r3
   1c9d2:	468c      	mov	ip, r1
   1c9d4:	3530      	adds	r5, #48	; 0x30
   1c9d6:	4462      	add	r2, ip
   1c9d8:	1c4c      	adds	r4, r1, #1
   1c9da:	700d      	strb	r5, [r1, #0]
   1c9dc:	4690      	mov	r8, r2
   1c9de:	2b01      	cmp	r3, #1
   1c9e0:	d01b      	beq.n	1ca1a <_dtoa_r+0xdba>
   1c9e2:	9808      	ldr	r0, [sp, #32]
   1c9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c9e6:	0025      	movs	r5, r4
   1c9e8:	2200      	movs	r2, #0
   1c9ea:	4b7b      	ldr	r3, [pc, #492]	; (1cbd8 <_dtoa_r+0xf78>)
   1c9ec:	f7fc fc86 	bl	192fc <__aeabi_dmul>
   1c9f0:	000f      	movs	r7, r1
   1c9f2:	0006      	movs	r6, r0
   1c9f4:	f7fd fa18 	bl	19e28 <__aeabi_d2iz>
   1c9f8:	0004      	movs	r4, r0
   1c9fa:	f7fd fa49 	bl	19e90 <__aeabi_i2d>
   1c9fe:	3430      	adds	r4, #48	; 0x30
   1ca00:	0002      	movs	r2, r0
   1ca02:	000b      	movs	r3, r1
   1ca04:	0030      	movs	r0, r6
   1ca06:	0039      	movs	r1, r7
   1ca08:	f7fc fef8 	bl	197fc <__aeabi_dsub>
   1ca0c:	702c      	strb	r4, [r5, #0]
   1ca0e:	3501      	adds	r5, #1
   1ca10:	45a8      	cmp	r8, r5
   1ca12:	d1e9      	bne.n	1c9e8 <_dtoa_r+0xd88>
   1ca14:	4644      	mov	r4, r8
   1ca16:	9008      	str	r0, [sp, #32]
   1ca18:	9109      	str	r1, [sp, #36]	; 0x24
   1ca1a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1ca1c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ca1e:	2200      	movs	r2, #0
   1ca20:	4b6e      	ldr	r3, [pc, #440]	; (1cbdc <_dtoa_r+0xf7c>)
   1ca22:	f7fb fd27 	bl	18474 <__aeabi_dadd>
   1ca26:	9a08      	ldr	r2, [sp, #32]
   1ca28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ca2a:	f7fb fa1b 	bl	17e64 <__aeabi_dcmplt>
   1ca2e:	2800      	cmp	r0, #0
   1ca30:	d067      	beq.n	1cb02 <_dtoa_r+0xea2>
   1ca32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ca34:	1e65      	subs	r5, r4, #1
   1ca36:	9303      	str	r3, [sp, #12]
   1ca38:	782f      	ldrb	r7, [r5, #0]
   1ca3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ca3c:	e42e      	b.n	1c29c <_dtoa_r+0x63c>
   1ca3e:	4643      	mov	r3, r8
   1ca40:	46b3      	mov	fp, r6
   1ca42:	930c      	str	r3, [sp, #48]	; 0x30
   1ca44:	9e04      	ldr	r6, [sp, #16]
   1ca46:	9b06      	ldr	r3, [sp, #24]
   1ca48:	46a8      	mov	r8, r5
   1ca4a:	4699      	mov	r9, r3
   1ca4c:	4655      	mov	r5, sl
   1ca4e:	46ba      	mov	sl, r7
   1ca50:	2e39      	cmp	r6, #57	; 0x39
   1ca52:	d04d      	beq.n	1caf0 <_dtoa_r+0xe90>
   1ca54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ca56:	3601      	adds	r6, #1
   1ca58:	4647      	mov	r7, r8
   1ca5a:	1c6c      	adds	r4, r5, #1
   1ca5c:	702e      	strb	r6, [r5, #0]
   1ca5e:	4698      	mov	r8, r3
   1ca60:	e5f5      	b.n	1c64e <_dtoa_r+0x9ee>
   1ca62:	4642      	mov	r2, r8
   1ca64:	9b06      	ldr	r3, [sp, #24]
   1ca66:	46b3      	mov	fp, r6
   1ca68:	46ba      	mov	sl, r7
   1ca6a:	9e04      	ldr	r6, [sp, #16]
   1ca6c:	4699      	mov	r9, r3
   1ca6e:	002f      	movs	r7, r5
   1ca70:	4690      	mov	r8, r2
   1ca72:	e5d1      	b.n	1c618 <_dtoa_r+0x9b8>
   1ca74:	9b06      	ldr	r3, [sp, #24]
   1ca76:	9a07      	ldr	r2, [sp, #28]
   1ca78:	1a9b      	subs	r3, r3, r2
   1ca7a:	9308      	str	r3, [sp, #32]
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	e427      	b.n	1c2d0 <_dtoa_r+0x670>
   1ca80:	2401      	movs	r4, #1
   1ca82:	e5c5      	b.n	1c610 <_dtoa_r+0x9b0>
   1ca84:	2336      	movs	r3, #54	; 0x36
   1ca86:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ca88:	464c      	mov	r4, r9
   1ca8a:	1a9b      	subs	r3, r3, r2
   1ca8c:	9a06      	ldr	r2, [sp, #24]
   1ca8e:	9208      	str	r2, [sp, #32]
   1ca90:	e41e      	b.n	1c2d0 <_dtoa_r+0x670>
   1ca92:	2302      	movs	r3, #2
   1ca94:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ca96:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ca98:	4698      	mov	r8, r3
   1ca9a:	f7ff fa31 	bl	1bf00 <_dtoa_r+0x2a0>
   1ca9e:	9b07      	ldr	r3, [sp, #28]
   1caa0:	2b00      	cmp	r3, #0
   1caa2:	d100      	bne.n	1caa6 <_dtoa_r+0xe46>
   1caa4:	e68e      	b.n	1c7c4 <_dtoa_r+0xb64>
   1caa6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1caa8:	2c00      	cmp	r4, #0
   1caaa:	dc00      	bgt.n	1caae <_dtoa_r+0xe4e>
   1caac:	e712      	b.n	1c8d4 <_dtoa_r+0xc74>
   1caae:	9b03      	ldr	r3, [sp, #12]
   1cab0:	2200      	movs	r2, #0
   1cab2:	3b01      	subs	r3, #1
   1cab4:	9313      	str	r3, [sp, #76]	; 0x4c
   1cab6:	0030      	movs	r0, r6
   1cab8:	4b47      	ldr	r3, [pc, #284]	; (1cbd8 <_dtoa_r+0xf78>)
   1caba:	0039      	movs	r1, r7
   1cabc:	f7fc fc1e 	bl	192fc <__aeabi_dmul>
   1cac0:	0006      	movs	r6, r0
   1cac2:	4640      	mov	r0, r8
   1cac4:	000f      	movs	r7, r1
   1cac6:	3001      	adds	r0, #1
   1cac8:	f7fd f9e2 	bl	19e90 <__aeabi_i2d>
   1cacc:	0032      	movs	r2, r6
   1cace:	003b      	movs	r3, r7
   1cad0:	f7fc fc14 	bl	192fc <__aeabi_dmul>
   1cad4:	2200      	movs	r2, #0
   1cad6:	4b42      	ldr	r3, [pc, #264]	; (1cbe0 <_dtoa_r+0xf80>)
   1cad8:	f7fb fccc 	bl	18474 <__aeabi_dadd>
   1cadc:	4a41      	ldr	r2, [pc, #260]	; (1cbe4 <_dtoa_r+0xf84>)
   1cade:	000b      	movs	r3, r1
   1cae0:	4694      	mov	ip, r2
   1cae2:	4463      	add	r3, ip
   1cae4:	9008      	str	r0, [sp, #32]
   1cae6:	9109      	str	r1, [sp, #36]	; 0x24
   1cae8:	9412      	str	r4, [sp, #72]	; 0x48
   1caea:	9309      	str	r3, [sp, #36]	; 0x24
   1caec:	f7ff fa30 	bl	1bf50 <_dtoa_r+0x2f0>
   1caf0:	2339      	movs	r3, #57	; 0x39
   1caf2:	702b      	strb	r3, [r5, #0]
   1caf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1caf6:	4647      	mov	r7, r8
   1caf8:	1c6c      	adds	r4, r5, #1
   1cafa:	4698      	mov	r8, r3
   1cafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cafe:	2339      	movs	r3, #57	; 0x39
   1cb00:	e5a1      	b.n	1c646 <_dtoa_r+0x9e6>
   1cb02:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cb04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cb06:	2000      	movs	r0, #0
   1cb08:	4934      	ldr	r1, [pc, #208]	; (1cbdc <_dtoa_r+0xf7c>)
   1cb0a:	f7fc fe77 	bl	197fc <__aeabi_dsub>
   1cb0e:	9a08      	ldr	r2, [sp, #32]
   1cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cb12:	f7fb f9bb 	bl	17e8c <__aeabi_dcmpgt>
   1cb16:	2800      	cmp	r0, #0
   1cb18:	d101      	bne.n	1cb1e <_dtoa_r+0xebe>
   1cb1a:	e6db      	b.n	1c8d4 <_dtoa_r+0xc74>
   1cb1c:	001c      	movs	r4, r3
   1cb1e:	1e63      	subs	r3, r4, #1
   1cb20:	781a      	ldrb	r2, [r3, #0]
   1cb22:	2a30      	cmp	r2, #48	; 0x30
   1cb24:	d0fa      	beq.n	1cb1c <_dtoa_r+0xebc>
   1cb26:	f7ff fac8 	bl	1c0ba <_dtoa_r+0x45a>
   1cb2a:	4643      	mov	r3, r8
   1cb2c:	46b3      	mov	fp, r6
   1cb2e:	930c      	str	r3, [sp, #48]	; 0x30
   1cb30:	9e04      	ldr	r6, [sp, #16]
   1cb32:	9b06      	ldr	r3, [sp, #24]
   1cb34:	46a8      	mov	r8, r5
   1cb36:	4699      	mov	r9, r3
   1cb38:	4655      	mov	r5, sl
   1cb3a:	46ba      	mov	sl, r7
   1cb3c:	2e39      	cmp	r6, #57	; 0x39
   1cb3e:	d0d7      	beq.n	1caf0 <_dtoa_r+0xe90>
   1cb40:	2c00      	cmp	r4, #0
   1cb42:	dd00      	ble.n	1cb46 <_dtoa_r+0xee6>
   1cb44:	e6b1      	b.n	1c8aa <_dtoa_r+0xc4a>
   1cb46:	e6b2      	b.n	1c8ae <_dtoa_r+0xc4e>
   1cb48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cb4a:	464d      	mov	r5, r9
   1cb4c:	9203      	str	r2, [sp, #12]
   1cb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cb50:	f7ff fba4 	bl	1c29c <_dtoa_r+0x63c>
   1cb54:	2800      	cmp	r0, #0
   1cb56:	d000      	beq.n	1cb5a <_dtoa_r+0xefa>
   1cb58:	e6a9      	b.n	1c8ae <_dtoa_r+0xc4e>
   1cb5a:	07f3      	lsls	r3, r6, #31
   1cb5c:	d400      	bmi.n	1cb60 <_dtoa_r+0xf00>
   1cb5e:	e6a6      	b.n	1c8ae <_dtoa_r+0xc4e>
   1cb60:	e6a0      	b.n	1c8a4 <_dtoa_r+0xc44>
   1cb62:	2300      	movs	r3, #0
   1cb64:	4641      	mov	r1, r8
   1cb66:	220a      	movs	r2, #10
   1cb68:	4650      	mov	r0, sl
   1cb6a:	f001 f8eb 	bl	1dd44 <__multadd>
   1cb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cb70:	4680      	mov	r8, r0
   1cb72:	2b00      	cmp	r3, #0
   1cb74:	dd01      	ble.n	1cb7a <_dtoa_r+0xf1a>
   1cb76:	9307      	str	r3, [sp, #28]
   1cb78:	e486      	b.n	1c488 <_dtoa_r+0x828>
   1cb7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb7c:	2b02      	cmp	r3, #2
   1cb7e:	dc1f      	bgt.n	1cbc0 <_dtoa_r+0xf60>
   1cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cb82:	9307      	str	r3, [sp, #28]
   1cb84:	e480      	b.n	1c488 <_dtoa_r+0x828>
   1cb86:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb88:	2b02      	cmp	r3, #2
   1cb8a:	dc19      	bgt.n	1cbc0 <_dtoa_r+0xf60>
   1cb8c:	4649      	mov	r1, r9
   1cb8e:	f7fe ffbd 	bl	1bb0c <quorem>
   1cb92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cb94:	3030      	adds	r0, #48	; 0x30
   1cb96:	7018      	strb	r0, [r3, #0]
   1cb98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cb9a:	0006      	movs	r6, r0
   1cb9c:	9307      	str	r3, [sp, #28]
   1cb9e:	e533      	b.n	1c608 <_dtoa_r+0x9a8>
   1cba0:	2302      	movs	r3, #2
   1cba2:	4698      	mov	r8, r3
   1cba4:	f7ff f9ac 	bl	1bf00 <_dtoa_r+0x2a0>
   1cba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cbaa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cbac:	9303      	str	r3, [sp, #12]
   1cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cbb0:	001d      	movs	r5, r3
   1cbb2:	f7ff fb73 	bl	1c29c <_dtoa_r+0x63c>
   1cbb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cbb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cbba:	9303      	str	r3, [sp, #12]
   1cbbc:	f7ff fa7f 	bl	1c0be <_dtoa_r+0x45e>
   1cbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cbc2:	9307      	str	r3, [sp, #28]
   1cbc4:	e5d6      	b.n	1c774 <_dtoa_r+0xb14>
   1cbc6:	2b04      	cmp	r3, #4
   1cbc8:	d100      	bne.n	1cbcc <_dtoa_r+0xf6c>
   1cbca:	e43f      	b.n	1c44c <_dtoa_r+0x7ec>
   1cbcc:	233c      	movs	r3, #60	; 0x3c
   1cbce:	1a18      	subs	r0, r3, r0
   1cbd0:	e4d7      	b.n	1c582 <_dtoa_r+0x922>
   1cbd2:	46c0      	nop			; (mov r8, r8)
   1cbd4:	000203e0 	.word	0x000203e0
   1cbd8:	40240000 	.word	0x40240000
   1cbdc:	3fe00000 	.word	0x3fe00000
   1cbe0:	401c0000 	.word	0x401c0000
   1cbe4:	fcc00000 	.word	0xfcc00000

0001cbe8 <__sflush_r>:
   1cbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbea:	46c6      	mov	lr, r8
   1cbec:	b500      	push	{lr}
   1cbee:	230c      	movs	r3, #12
   1cbf0:	5eca      	ldrsh	r2, [r1, r3]
   1cbf2:	4680      	mov	r8, r0
   1cbf4:	b293      	uxth	r3, r2
   1cbf6:	000c      	movs	r4, r1
   1cbf8:	0719      	lsls	r1, r3, #28
   1cbfa:	d440      	bmi.n	1cc7e <__sflush_r+0x96>
   1cbfc:	2380      	movs	r3, #128	; 0x80
   1cbfe:	011b      	lsls	r3, r3, #4
   1cc00:	4313      	orrs	r3, r2
   1cc02:	6862      	ldr	r2, [r4, #4]
   1cc04:	81a3      	strh	r3, [r4, #12]
   1cc06:	2a00      	cmp	r2, #0
   1cc08:	dc00      	bgt.n	1cc0c <__sflush_r+0x24>
   1cc0a:	e070      	b.n	1ccee <__sflush_r+0x106>
   1cc0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1cc0e:	2e00      	cmp	r6, #0
   1cc10:	d031      	beq.n	1cc76 <__sflush_r+0x8e>
   1cc12:	4642      	mov	r2, r8
   1cc14:	4641      	mov	r1, r8
   1cc16:	6815      	ldr	r5, [r2, #0]
   1cc18:	2200      	movs	r2, #0
   1cc1a:	b29b      	uxth	r3, r3
   1cc1c:	600a      	str	r2, [r1, #0]
   1cc1e:	04da      	lsls	r2, r3, #19
   1cc20:	d400      	bmi.n	1cc24 <__sflush_r+0x3c>
   1cc22:	e069      	b.n	1ccf8 <__sflush_r+0x110>
   1cc24:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1cc26:	075b      	lsls	r3, r3, #29
   1cc28:	d506      	bpl.n	1cc38 <__sflush_r+0x50>
   1cc2a:	6863      	ldr	r3, [r4, #4]
   1cc2c:	1ad2      	subs	r2, r2, r3
   1cc2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cc30:	2b00      	cmp	r3, #0
   1cc32:	d001      	beq.n	1cc38 <__sflush_r+0x50>
   1cc34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1cc36:	1ad2      	subs	r2, r2, r3
   1cc38:	2300      	movs	r3, #0
   1cc3a:	69e1      	ldr	r1, [r4, #28]
   1cc3c:	4640      	mov	r0, r8
   1cc3e:	47b0      	blx	r6
   1cc40:	1c43      	adds	r3, r0, #1
   1cc42:	d03d      	beq.n	1ccc0 <__sflush_r+0xd8>
   1cc44:	89a3      	ldrh	r3, [r4, #12]
   1cc46:	4a3a      	ldr	r2, [pc, #232]	; (1cd30 <__sflush_r+0x148>)
   1cc48:	4013      	ands	r3, r2
   1cc4a:	2200      	movs	r2, #0
   1cc4c:	6062      	str	r2, [r4, #4]
   1cc4e:	6922      	ldr	r2, [r4, #16]
   1cc50:	b21b      	sxth	r3, r3
   1cc52:	81a3      	strh	r3, [r4, #12]
   1cc54:	6022      	str	r2, [r4, #0]
   1cc56:	04db      	lsls	r3, r3, #19
   1cc58:	d447      	bmi.n	1ccea <__sflush_r+0x102>
   1cc5a:	4643      	mov	r3, r8
   1cc5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1cc5e:	601d      	str	r5, [r3, #0]
   1cc60:	2900      	cmp	r1, #0
   1cc62:	d008      	beq.n	1cc76 <__sflush_r+0x8e>
   1cc64:	0023      	movs	r3, r4
   1cc66:	3340      	adds	r3, #64	; 0x40
   1cc68:	4299      	cmp	r1, r3
   1cc6a:	d002      	beq.n	1cc72 <__sflush_r+0x8a>
   1cc6c:	4640      	mov	r0, r8
   1cc6e:	f000 f967 	bl	1cf40 <_free_r>
   1cc72:	2300      	movs	r3, #0
   1cc74:	6323      	str	r3, [r4, #48]	; 0x30
   1cc76:	2000      	movs	r0, #0
   1cc78:	bc04      	pop	{r2}
   1cc7a:	4690      	mov	r8, r2
   1cc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc7e:	6926      	ldr	r6, [r4, #16]
   1cc80:	2e00      	cmp	r6, #0
   1cc82:	d0f8      	beq.n	1cc76 <__sflush_r+0x8e>
   1cc84:	6822      	ldr	r2, [r4, #0]
   1cc86:	6026      	str	r6, [r4, #0]
   1cc88:	1b95      	subs	r5, r2, r6
   1cc8a:	2200      	movs	r2, #0
   1cc8c:	079b      	lsls	r3, r3, #30
   1cc8e:	d100      	bne.n	1cc92 <__sflush_r+0xaa>
   1cc90:	6962      	ldr	r2, [r4, #20]
   1cc92:	60a2      	str	r2, [r4, #8]
   1cc94:	2d00      	cmp	r5, #0
   1cc96:	dc04      	bgt.n	1cca2 <__sflush_r+0xba>
   1cc98:	e7ed      	b.n	1cc76 <__sflush_r+0x8e>
   1cc9a:	1836      	adds	r6, r6, r0
   1cc9c:	1a2d      	subs	r5, r5, r0
   1cc9e:	2d00      	cmp	r5, #0
   1cca0:	dde9      	ble.n	1cc76 <__sflush_r+0x8e>
   1cca2:	002b      	movs	r3, r5
   1cca4:	0032      	movs	r2, r6
   1cca6:	69e1      	ldr	r1, [r4, #28]
   1cca8:	4640      	mov	r0, r8
   1ccaa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1ccac:	47b8      	blx	r7
   1ccae:	2800      	cmp	r0, #0
   1ccb0:	dcf3      	bgt.n	1cc9a <__sflush_r+0xb2>
   1ccb2:	2240      	movs	r2, #64	; 0x40
   1ccb4:	2001      	movs	r0, #1
   1ccb6:	89a3      	ldrh	r3, [r4, #12]
   1ccb8:	4240      	negs	r0, r0
   1ccba:	4313      	orrs	r3, r2
   1ccbc:	81a3      	strh	r3, [r4, #12]
   1ccbe:	e7db      	b.n	1cc78 <__sflush_r+0x90>
   1ccc0:	4643      	mov	r3, r8
   1ccc2:	6819      	ldr	r1, [r3, #0]
   1ccc4:	291d      	cmp	r1, #29
   1ccc6:	d8f4      	bhi.n	1ccb2 <__sflush_r+0xca>
   1ccc8:	4b1a      	ldr	r3, [pc, #104]	; (1cd34 <__sflush_r+0x14c>)
   1ccca:	2201      	movs	r2, #1
   1cccc:	40cb      	lsrs	r3, r1
   1ccce:	439a      	bics	r2, r3
   1ccd0:	d1ef      	bne.n	1ccb2 <__sflush_r+0xca>
   1ccd2:	89a3      	ldrh	r3, [r4, #12]
   1ccd4:	4e16      	ldr	r6, [pc, #88]	; (1cd30 <__sflush_r+0x148>)
   1ccd6:	6062      	str	r2, [r4, #4]
   1ccd8:	4033      	ands	r3, r6
   1ccda:	6922      	ldr	r2, [r4, #16]
   1ccdc:	b21b      	sxth	r3, r3
   1ccde:	81a3      	strh	r3, [r4, #12]
   1cce0:	6022      	str	r2, [r4, #0]
   1cce2:	04db      	lsls	r3, r3, #19
   1cce4:	d5b9      	bpl.n	1cc5a <__sflush_r+0x72>
   1cce6:	2900      	cmp	r1, #0
   1cce8:	d1b7      	bne.n	1cc5a <__sflush_r+0x72>
   1ccea:	6520      	str	r0, [r4, #80]	; 0x50
   1ccec:	e7b5      	b.n	1cc5a <__sflush_r+0x72>
   1ccee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1ccf0:	2a00      	cmp	r2, #0
   1ccf2:	dd00      	ble.n	1ccf6 <__sflush_r+0x10e>
   1ccf4:	e78a      	b.n	1cc0c <__sflush_r+0x24>
   1ccf6:	e7be      	b.n	1cc76 <__sflush_r+0x8e>
   1ccf8:	2200      	movs	r2, #0
   1ccfa:	2301      	movs	r3, #1
   1ccfc:	69e1      	ldr	r1, [r4, #28]
   1ccfe:	4640      	mov	r0, r8
   1cd00:	47b0      	blx	r6
   1cd02:	0002      	movs	r2, r0
   1cd04:	1c43      	adds	r3, r0, #1
   1cd06:	d002      	beq.n	1cd0e <__sflush_r+0x126>
   1cd08:	89a3      	ldrh	r3, [r4, #12]
   1cd0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1cd0c:	e78b      	b.n	1cc26 <__sflush_r+0x3e>
   1cd0e:	4643      	mov	r3, r8
   1cd10:	681b      	ldr	r3, [r3, #0]
   1cd12:	2b00      	cmp	r3, #0
   1cd14:	d0f8      	beq.n	1cd08 <__sflush_r+0x120>
   1cd16:	2b1d      	cmp	r3, #29
   1cd18:	d001      	beq.n	1cd1e <__sflush_r+0x136>
   1cd1a:	2b16      	cmp	r3, #22
   1cd1c:	d103      	bne.n	1cd26 <__sflush_r+0x13e>
   1cd1e:	4643      	mov	r3, r8
   1cd20:	2000      	movs	r0, #0
   1cd22:	601d      	str	r5, [r3, #0]
   1cd24:	e7a8      	b.n	1cc78 <__sflush_r+0x90>
   1cd26:	2140      	movs	r1, #64	; 0x40
   1cd28:	89a3      	ldrh	r3, [r4, #12]
   1cd2a:	430b      	orrs	r3, r1
   1cd2c:	81a3      	strh	r3, [r4, #12]
   1cd2e:	e7a3      	b.n	1cc78 <__sflush_r+0x90>
   1cd30:	fffff7ff 	.word	0xfffff7ff
   1cd34:	20400001 	.word	0x20400001

0001cd38 <_fflush_r>:
   1cd38:	b570      	push	{r4, r5, r6, lr}
   1cd3a:	0005      	movs	r5, r0
   1cd3c:	000c      	movs	r4, r1
   1cd3e:	2800      	cmp	r0, #0
   1cd40:	d002      	beq.n	1cd48 <_fflush_r+0x10>
   1cd42:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1cd44:	2b00      	cmp	r3, #0
   1cd46:	d016      	beq.n	1cd76 <_fflush_r+0x3e>
   1cd48:	220c      	movs	r2, #12
   1cd4a:	5ea3      	ldrsh	r3, [r4, r2]
   1cd4c:	2600      	movs	r6, #0
   1cd4e:	2b00      	cmp	r3, #0
   1cd50:	d00f      	beq.n	1cd72 <_fflush_r+0x3a>
   1cd52:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1cd54:	07d2      	lsls	r2, r2, #31
   1cd56:	d401      	bmi.n	1cd5c <_fflush_r+0x24>
   1cd58:	059b      	lsls	r3, r3, #22
   1cd5a:	d513      	bpl.n	1cd84 <_fflush_r+0x4c>
   1cd5c:	0021      	movs	r1, r4
   1cd5e:	0028      	movs	r0, r5
   1cd60:	f7ff ff42 	bl	1cbe8 <__sflush_r>
   1cd64:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1cd66:	0006      	movs	r6, r0
   1cd68:	07db      	lsls	r3, r3, #31
   1cd6a:	d402      	bmi.n	1cd72 <_fflush_r+0x3a>
   1cd6c:	89a3      	ldrh	r3, [r4, #12]
   1cd6e:	059b      	lsls	r3, r3, #22
   1cd70:	d504      	bpl.n	1cd7c <_fflush_r+0x44>
   1cd72:	0030      	movs	r0, r6
   1cd74:	bd70      	pop	{r4, r5, r6, pc}
   1cd76:	f000 f839 	bl	1cdec <__sinit>
   1cd7a:	e7e5      	b.n	1cd48 <_fflush_r+0x10>
   1cd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1cd7e:	f000 fb89 	bl	1d494 <__retarget_lock_release_recursive>
   1cd82:	e7f6      	b.n	1cd72 <_fflush_r+0x3a>
   1cd84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1cd86:	f000 fb83 	bl	1d490 <__retarget_lock_acquire_recursive>
   1cd8a:	e7e7      	b.n	1cd5c <_fflush_r+0x24>

0001cd8c <_cleanup_r>:
   1cd8c:	b510      	push	{r4, lr}
   1cd8e:	4902      	ldr	r1, [pc, #8]	; (1cd98 <_cleanup_r+0xc>)
   1cd90:	f000 fb36 	bl	1d400 <_fwalk_reent>
   1cd94:	bd10      	pop	{r4, pc}
   1cd96:	46c0      	nop			; (mov r8, r8)
   1cd98:	0001e9f9 	.word	0x0001e9f9

0001cd9c <std.isra.0>:
   1cd9c:	2300      	movs	r3, #0
   1cd9e:	b510      	push	{r4, lr}
   1cda0:	0004      	movs	r4, r0
   1cda2:	6003      	str	r3, [r0, #0]
   1cda4:	6043      	str	r3, [r0, #4]
   1cda6:	6083      	str	r3, [r0, #8]
   1cda8:	8181      	strh	r1, [r0, #12]
   1cdaa:	6643      	str	r3, [r0, #100]	; 0x64
   1cdac:	81c2      	strh	r2, [r0, #14]
   1cdae:	6103      	str	r3, [r0, #16]
   1cdb0:	6143      	str	r3, [r0, #20]
   1cdb2:	6183      	str	r3, [r0, #24]
   1cdb4:	2208      	movs	r2, #8
   1cdb6:	2100      	movs	r1, #0
   1cdb8:	305c      	adds	r0, #92	; 0x5c
   1cdba:	f7fd f991 	bl	1a0e0 <memset>
   1cdbe:	0020      	movs	r0, r4
   1cdc0:	4b06      	ldr	r3, [pc, #24]	; (1cddc <std.isra.0+0x40>)
   1cdc2:	61e4      	str	r4, [r4, #28]
   1cdc4:	6223      	str	r3, [r4, #32]
   1cdc6:	4b06      	ldr	r3, [pc, #24]	; (1cde0 <std.isra.0+0x44>)
   1cdc8:	3058      	adds	r0, #88	; 0x58
   1cdca:	6263      	str	r3, [r4, #36]	; 0x24
   1cdcc:	4b05      	ldr	r3, [pc, #20]	; (1cde4 <std.isra.0+0x48>)
   1cdce:	62a3      	str	r3, [r4, #40]	; 0x28
   1cdd0:	4b05      	ldr	r3, [pc, #20]	; (1cde8 <std.isra.0+0x4c>)
   1cdd2:	62e3      	str	r3, [r4, #44]	; 0x2c
   1cdd4:	f000 fb58 	bl	1d488 <__retarget_lock_init_recursive>
   1cdd8:	bd10      	pop	{r4, pc}
   1cdda:	46c0      	nop			; (mov r8, r8)
   1cddc:	0001e711 	.word	0x0001e711
   1cde0:	0001e739 	.word	0x0001e739
   1cde4:	0001e775 	.word	0x0001e775
   1cde8:	0001e7a1 	.word	0x0001e7a1

0001cdec <__sinit>:
   1cdec:	b570      	push	{r4, r5, r6, lr}
   1cdee:	0004      	movs	r4, r0
   1cdf0:	4d14      	ldr	r5, [pc, #80]	; (1ce44 <__sinit+0x58>)
   1cdf2:	0028      	movs	r0, r5
   1cdf4:	f000 fb4c 	bl	1d490 <__retarget_lock_acquire_recursive>
   1cdf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d11d      	bne.n	1ce3a <__sinit+0x4e>
   1cdfe:	4a12      	ldr	r2, [pc, #72]	; (1ce48 <__sinit+0x5c>)
   1ce00:	2104      	movs	r1, #4
   1ce02:	63e2      	str	r2, [r4, #60]	; 0x3c
   1ce04:	22b8      	movs	r2, #184	; 0xb8
   1ce06:	0092      	lsls	r2, r2, #2
   1ce08:	50a3      	str	r3, [r4, r2]
   1ce0a:	23b9      	movs	r3, #185	; 0xb9
   1ce0c:	2203      	movs	r2, #3
   1ce0e:	009b      	lsls	r3, r3, #2
   1ce10:	50e2      	str	r2, [r4, r3]
   1ce12:	3308      	adds	r3, #8
   1ce14:	18e2      	adds	r2, r4, r3
   1ce16:	3b04      	subs	r3, #4
   1ce18:	50e2      	str	r2, [r4, r3]
   1ce1a:	6860      	ldr	r0, [r4, #4]
   1ce1c:	2200      	movs	r2, #0
   1ce1e:	f7ff ffbd 	bl	1cd9c <std.isra.0>
   1ce22:	2201      	movs	r2, #1
   1ce24:	2109      	movs	r1, #9
   1ce26:	68a0      	ldr	r0, [r4, #8]
   1ce28:	f7ff ffb8 	bl	1cd9c <std.isra.0>
   1ce2c:	2202      	movs	r2, #2
   1ce2e:	2112      	movs	r1, #18
   1ce30:	68e0      	ldr	r0, [r4, #12]
   1ce32:	f7ff ffb3 	bl	1cd9c <std.isra.0>
   1ce36:	2301      	movs	r3, #1
   1ce38:	63a3      	str	r3, [r4, #56]	; 0x38
   1ce3a:	0028      	movs	r0, r5
   1ce3c:	f000 fb2a 	bl	1d494 <__retarget_lock_release_recursive>
   1ce40:	bd70      	pop	{r4, r5, r6, pc}
   1ce42:	46c0      	nop			; (mov r8, r8)
   1ce44:	20001dd8 	.word	0x20001dd8
   1ce48:	0001cd8d 	.word	0x0001cd8d

0001ce4c <__sfp_lock_acquire>:
   1ce4c:	b510      	push	{r4, lr}
   1ce4e:	4802      	ldr	r0, [pc, #8]	; (1ce58 <__sfp_lock_acquire+0xc>)
   1ce50:	f000 fb1e 	bl	1d490 <__retarget_lock_acquire_recursive>
   1ce54:	bd10      	pop	{r4, pc}
   1ce56:	46c0      	nop			; (mov r8, r8)
   1ce58:	20001dec 	.word	0x20001dec

0001ce5c <__sfp_lock_release>:
   1ce5c:	b510      	push	{r4, lr}
   1ce5e:	4802      	ldr	r0, [pc, #8]	; (1ce68 <__sfp_lock_release+0xc>)
   1ce60:	f000 fb18 	bl	1d494 <__retarget_lock_release_recursive>
   1ce64:	bd10      	pop	{r4, pc}
   1ce66:	46c0      	nop			; (mov r8, r8)
   1ce68:	20001dec 	.word	0x20001dec

0001ce6c <__libc_fini_array>:
   1ce6c:	b570      	push	{r4, r5, r6, lr}
   1ce6e:	4b09      	ldr	r3, [pc, #36]	; (1ce94 <__libc_fini_array+0x28>)
   1ce70:	4c09      	ldr	r4, [pc, #36]	; (1ce98 <__libc_fini_array+0x2c>)
   1ce72:	1ae4      	subs	r4, r4, r3
   1ce74:	10a4      	asrs	r4, r4, #2
   1ce76:	d009      	beq.n	1ce8c <__libc_fini_array+0x20>
   1ce78:	4a08      	ldr	r2, [pc, #32]	; (1ce9c <__libc_fini_array+0x30>)
   1ce7a:	18a5      	adds	r5, r4, r2
   1ce7c:	00ad      	lsls	r5, r5, #2
   1ce7e:	18ed      	adds	r5, r5, r3
   1ce80:	682b      	ldr	r3, [r5, #0]
   1ce82:	3c01      	subs	r4, #1
   1ce84:	4798      	blx	r3
   1ce86:	3d04      	subs	r5, #4
   1ce88:	2c00      	cmp	r4, #0
   1ce8a:	d1f9      	bne.n	1ce80 <__libc_fini_array+0x14>
   1ce8c:	f003 fb9e 	bl	205cc <_fini>
   1ce90:	bd70      	pop	{r4, r5, r6, pc}
   1ce92:	46c0      	nop			; (mov r8, r8)
   1ce94:	000205d8 	.word	0x000205d8
   1ce98:	000205dc 	.word	0x000205dc
   1ce9c:	3fffffff 	.word	0x3fffffff

0001cea0 <_malloc_trim_r>:
   1cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cea2:	000c      	movs	r4, r1
   1cea4:	0006      	movs	r6, r0
   1cea6:	f000 ff0b 	bl	1dcc0 <__malloc_lock>
   1ceaa:	4f20      	ldr	r7, [pc, #128]	; (1cf2c <_malloc_trim_r+0x8c>)
   1ceac:	68bb      	ldr	r3, [r7, #8]
   1ceae:	685d      	ldr	r5, [r3, #4]
   1ceb0:	2303      	movs	r3, #3
   1ceb2:	439d      	bics	r5, r3
   1ceb4:	4b1e      	ldr	r3, [pc, #120]	; (1cf30 <_malloc_trim_r+0x90>)
   1ceb6:	1b2c      	subs	r4, r5, r4
   1ceb8:	469c      	mov	ip, r3
   1ceba:	4464      	add	r4, ip
   1cebc:	0b24      	lsrs	r4, r4, #12
   1cebe:	4b1d      	ldr	r3, [pc, #116]	; (1cf34 <_malloc_trim_r+0x94>)
   1cec0:	3c01      	subs	r4, #1
   1cec2:	0324      	lsls	r4, r4, #12
   1cec4:	429c      	cmp	r4, r3
   1cec6:	dd07      	ble.n	1ced8 <_malloc_trim_r+0x38>
   1cec8:	2100      	movs	r1, #0
   1ceca:	0030      	movs	r0, r6
   1cecc:	f001 fc0e 	bl	1e6ec <_sbrk_r>
   1ced0:	68bb      	ldr	r3, [r7, #8]
   1ced2:	195b      	adds	r3, r3, r5
   1ced4:	4298      	cmp	r0, r3
   1ced6:	d004      	beq.n	1cee2 <_malloc_trim_r+0x42>
   1ced8:	0030      	movs	r0, r6
   1ceda:	f000 fef9 	bl	1dcd0 <__malloc_unlock>
   1cede:	2000      	movs	r0, #0
   1cee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cee2:	4261      	negs	r1, r4
   1cee4:	0030      	movs	r0, r6
   1cee6:	f001 fc01 	bl	1e6ec <_sbrk_r>
   1ceea:	1c43      	adds	r3, r0, #1
   1ceec:	d00d      	beq.n	1cf0a <_malloc_trim_r+0x6a>
   1ceee:	2201      	movs	r2, #1
   1cef0:	68bb      	ldr	r3, [r7, #8]
   1cef2:	1b2d      	subs	r5, r5, r4
   1cef4:	4315      	orrs	r5, r2
   1cef6:	605d      	str	r5, [r3, #4]
   1cef8:	4b0f      	ldr	r3, [pc, #60]	; (1cf38 <_malloc_trim_r+0x98>)
   1cefa:	0030      	movs	r0, r6
   1cefc:	681a      	ldr	r2, [r3, #0]
   1cefe:	1b14      	subs	r4, r2, r4
   1cf00:	601c      	str	r4, [r3, #0]
   1cf02:	f000 fee5 	bl	1dcd0 <__malloc_unlock>
   1cf06:	2001      	movs	r0, #1
   1cf08:	e7ea      	b.n	1cee0 <_malloc_trim_r+0x40>
   1cf0a:	2100      	movs	r1, #0
   1cf0c:	0030      	movs	r0, r6
   1cf0e:	f001 fbed 	bl	1e6ec <_sbrk_r>
   1cf12:	68ba      	ldr	r2, [r7, #8]
   1cf14:	1a83      	subs	r3, r0, r2
   1cf16:	2b0f      	cmp	r3, #15
   1cf18:	ddde      	ble.n	1ced8 <_malloc_trim_r+0x38>
   1cf1a:	4908      	ldr	r1, [pc, #32]	; (1cf3c <_malloc_trim_r+0x9c>)
   1cf1c:	6809      	ldr	r1, [r1, #0]
   1cf1e:	1a40      	subs	r0, r0, r1
   1cf20:	4905      	ldr	r1, [pc, #20]	; (1cf38 <_malloc_trim_r+0x98>)
   1cf22:	6008      	str	r0, [r1, #0]
   1cf24:	2101      	movs	r1, #1
   1cf26:	430b      	orrs	r3, r1
   1cf28:	6053      	str	r3, [r2, #4]
   1cf2a:	e7d5      	b.n	1ced8 <_malloc_trim_r+0x38>
   1cf2c:	200006e8 	.word	0x200006e8
   1cf30:	00000fef 	.word	0x00000fef
   1cf34:	00000fff 	.word	0x00000fff
   1cf38:	20001b28 	.word	0x20001b28
   1cf3c:	20000af0 	.word	0x20000af0

0001cf40 <_free_r>:
   1cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf42:	0004      	movs	r4, r0
   1cf44:	1e0d      	subs	r5, r1, #0
   1cf46:	d03c      	beq.n	1cfc2 <_free_r+0x82>
   1cf48:	f000 feba 	bl	1dcc0 <__malloc_lock>
   1cf4c:	0029      	movs	r1, r5
   1cf4e:	3908      	subs	r1, #8
   1cf50:	6848      	ldr	r0, [r1, #4]
   1cf52:	2301      	movs	r3, #1
   1cf54:	0005      	movs	r5, r0
   1cf56:	2603      	movs	r6, #3
   1cf58:	439d      	bics	r5, r3
   1cf5a:	194a      	adds	r2, r1, r5
   1cf5c:	469c      	mov	ip, r3
   1cf5e:	4f61      	ldr	r7, [pc, #388]	; (1d0e4 <_free_r+0x1a4>)
   1cf60:	6853      	ldr	r3, [r2, #4]
   1cf62:	43b3      	bics	r3, r6
   1cf64:	68be      	ldr	r6, [r7, #8]
   1cf66:	42b2      	cmp	r2, r6
   1cf68:	d056      	beq.n	1d018 <_free_r+0xd8>
   1cf6a:	4666      	mov	r6, ip
   1cf6c:	6053      	str	r3, [r2, #4]
   1cf6e:	4206      	tst	r6, r0
   1cf70:	d10a      	bne.n	1cf88 <_free_r+0x48>
   1cf72:	003e      	movs	r6, r7
   1cf74:	6808      	ldr	r0, [r1, #0]
   1cf76:	3608      	adds	r6, #8
   1cf78:	1a09      	subs	r1, r1, r0
   1cf7a:	182d      	adds	r5, r5, r0
   1cf7c:	6888      	ldr	r0, [r1, #8]
   1cf7e:	42b0      	cmp	r0, r6
   1cf80:	d065      	beq.n	1d04e <_free_r+0x10e>
   1cf82:	68ce      	ldr	r6, [r1, #12]
   1cf84:	60c6      	str	r6, [r0, #12]
   1cf86:	60b0      	str	r0, [r6, #8]
   1cf88:	2001      	movs	r0, #1
   1cf8a:	18d6      	adds	r6, r2, r3
   1cf8c:	6876      	ldr	r6, [r6, #4]
   1cf8e:	4206      	tst	r6, r0
   1cf90:	d033      	beq.n	1cffa <_free_r+0xba>
   1cf92:	4b55      	ldr	r3, [pc, #340]	; (1d0e8 <_free_r+0x1a8>)
   1cf94:	4328      	orrs	r0, r5
   1cf96:	6048      	str	r0, [r1, #4]
   1cf98:	514d      	str	r5, [r1, r5]
   1cf9a:	429d      	cmp	r5, r3
   1cf9c:	d812      	bhi.n	1cfc4 <_free_r+0x84>
   1cf9e:	08ed      	lsrs	r5, r5, #3
   1cfa0:	3bff      	subs	r3, #255	; 0xff
   1cfa2:	10aa      	asrs	r2, r5, #2
   1cfa4:	3bff      	subs	r3, #255	; 0xff
   1cfa6:	4093      	lsls	r3, r2
   1cfa8:	687a      	ldr	r2, [r7, #4]
   1cfaa:	00ed      	lsls	r5, r5, #3
   1cfac:	4313      	orrs	r3, r2
   1cfae:	607b      	str	r3, [r7, #4]
   1cfb0:	19ef      	adds	r7, r5, r7
   1cfb2:	68bb      	ldr	r3, [r7, #8]
   1cfb4:	60cf      	str	r7, [r1, #12]
   1cfb6:	608b      	str	r3, [r1, #8]
   1cfb8:	60b9      	str	r1, [r7, #8]
   1cfba:	60d9      	str	r1, [r3, #12]
   1cfbc:	0020      	movs	r0, r4
   1cfbe:	f000 fe87 	bl	1dcd0 <__malloc_unlock>
   1cfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cfc4:	0a68      	lsrs	r0, r5, #9
   1cfc6:	2804      	cmp	r0, #4
   1cfc8:	d850      	bhi.n	1d06c <_free_r+0x12c>
   1cfca:	09a8      	lsrs	r0, r5, #6
   1cfcc:	0002      	movs	r2, r0
   1cfce:	3039      	adds	r0, #57	; 0x39
   1cfd0:	3238      	adds	r2, #56	; 0x38
   1cfd2:	00c0      	lsls	r0, r0, #3
   1cfd4:	1838      	adds	r0, r7, r0
   1cfd6:	3808      	subs	r0, #8
   1cfd8:	6883      	ldr	r3, [r0, #8]
   1cfda:	2603      	movs	r6, #3
   1cfdc:	4298      	cmp	r0, r3
   1cfde:	d04c      	beq.n	1d07a <_free_r+0x13a>
   1cfe0:	685a      	ldr	r2, [r3, #4]
   1cfe2:	43b2      	bics	r2, r6
   1cfe4:	4295      	cmp	r5, r2
   1cfe6:	d230      	bcs.n	1d04a <_free_r+0x10a>
   1cfe8:	689b      	ldr	r3, [r3, #8]
   1cfea:	4298      	cmp	r0, r3
   1cfec:	d1f8      	bne.n	1cfe0 <_free_r+0xa0>
   1cfee:	68c3      	ldr	r3, [r0, #12]
   1cff0:	60cb      	str	r3, [r1, #12]
   1cff2:	6088      	str	r0, [r1, #8]
   1cff4:	6099      	str	r1, [r3, #8]
   1cff6:	60c1      	str	r1, [r0, #12]
   1cff8:	e7e0      	b.n	1cfbc <_free_r+0x7c>
   1cffa:	18ed      	adds	r5, r5, r3
   1cffc:	4e3b      	ldr	r6, [pc, #236]	; (1d0ec <_free_r+0x1ac>)
   1cffe:	6893      	ldr	r3, [r2, #8]
   1d000:	42b3      	cmp	r3, r6
   1d002:	d042      	beq.n	1d08a <_free_r+0x14a>
   1d004:	68d2      	ldr	r2, [r2, #12]
   1d006:	4328      	orrs	r0, r5
   1d008:	60da      	str	r2, [r3, #12]
   1d00a:	6093      	str	r3, [r2, #8]
   1d00c:	4b36      	ldr	r3, [pc, #216]	; (1d0e8 <_free_r+0x1a8>)
   1d00e:	6048      	str	r0, [r1, #4]
   1d010:	514d      	str	r5, [r1, r5]
   1d012:	429d      	cmp	r5, r3
   1d014:	d8d6      	bhi.n	1cfc4 <_free_r+0x84>
   1d016:	e7c2      	b.n	1cf9e <_free_r+0x5e>
   1d018:	4662      	mov	r2, ip
   1d01a:	18eb      	adds	r3, r5, r3
   1d01c:	4202      	tst	r2, r0
   1d01e:	d106      	bne.n	1d02e <_free_r+0xee>
   1d020:	680a      	ldr	r2, [r1, #0]
   1d022:	1a89      	subs	r1, r1, r2
   1d024:	6888      	ldr	r0, [r1, #8]
   1d026:	189b      	adds	r3, r3, r2
   1d028:	68ca      	ldr	r2, [r1, #12]
   1d02a:	60c2      	str	r2, [r0, #12]
   1d02c:	6090      	str	r0, [r2, #8]
   1d02e:	2201      	movs	r2, #1
   1d030:	431a      	orrs	r2, r3
   1d032:	604a      	str	r2, [r1, #4]
   1d034:	4a2e      	ldr	r2, [pc, #184]	; (1d0f0 <_free_r+0x1b0>)
   1d036:	60b9      	str	r1, [r7, #8]
   1d038:	6812      	ldr	r2, [r2, #0]
   1d03a:	4293      	cmp	r3, r2
   1d03c:	d3be      	bcc.n	1cfbc <_free_r+0x7c>
   1d03e:	4b2d      	ldr	r3, [pc, #180]	; (1d0f4 <_free_r+0x1b4>)
   1d040:	0020      	movs	r0, r4
   1d042:	6819      	ldr	r1, [r3, #0]
   1d044:	f7ff ff2c 	bl	1cea0 <_malloc_trim_r>
   1d048:	e7b8      	b.n	1cfbc <_free_r+0x7c>
   1d04a:	0018      	movs	r0, r3
   1d04c:	e7cf      	b.n	1cfee <_free_r+0xae>
   1d04e:	4666      	mov	r6, ip
   1d050:	18d0      	adds	r0, r2, r3
   1d052:	6840      	ldr	r0, [r0, #4]
   1d054:	4230      	tst	r0, r6
   1d056:	d13f      	bne.n	1d0d8 <_free_r+0x198>
   1d058:	6890      	ldr	r0, [r2, #8]
   1d05a:	195d      	adds	r5, r3, r5
   1d05c:	68d3      	ldr	r3, [r2, #12]
   1d05e:	60c3      	str	r3, [r0, #12]
   1d060:	6098      	str	r0, [r3, #8]
   1d062:	4663      	mov	r3, ip
   1d064:	432b      	orrs	r3, r5
   1d066:	604b      	str	r3, [r1, #4]
   1d068:	514d      	str	r5, [r1, r5]
   1d06a:	e7a7      	b.n	1cfbc <_free_r+0x7c>
   1d06c:	2814      	cmp	r0, #20
   1d06e:	d814      	bhi.n	1d09a <_free_r+0x15a>
   1d070:	0002      	movs	r2, r0
   1d072:	305c      	adds	r0, #92	; 0x5c
   1d074:	325b      	adds	r2, #91	; 0x5b
   1d076:	00c0      	lsls	r0, r0, #3
   1d078:	e7ac      	b.n	1cfd4 <_free_r+0x94>
   1d07a:	2301      	movs	r3, #1
   1d07c:	1092      	asrs	r2, r2, #2
   1d07e:	4093      	lsls	r3, r2
   1d080:	687a      	ldr	r2, [r7, #4]
   1d082:	4313      	orrs	r3, r2
   1d084:	607b      	str	r3, [r7, #4]
   1d086:	0003      	movs	r3, r0
   1d088:	e7b2      	b.n	1cff0 <_free_r+0xb0>
   1d08a:	4328      	orrs	r0, r5
   1d08c:	60d9      	str	r1, [r3, #12]
   1d08e:	6099      	str	r1, [r3, #8]
   1d090:	60cb      	str	r3, [r1, #12]
   1d092:	608b      	str	r3, [r1, #8]
   1d094:	6048      	str	r0, [r1, #4]
   1d096:	514d      	str	r5, [r1, r5]
   1d098:	e790      	b.n	1cfbc <_free_r+0x7c>
   1d09a:	2854      	cmp	r0, #84	; 0x54
   1d09c:	d805      	bhi.n	1d0aa <_free_r+0x16a>
   1d09e:	0b28      	lsrs	r0, r5, #12
   1d0a0:	0002      	movs	r2, r0
   1d0a2:	306f      	adds	r0, #111	; 0x6f
   1d0a4:	326e      	adds	r2, #110	; 0x6e
   1d0a6:	00c0      	lsls	r0, r0, #3
   1d0a8:	e794      	b.n	1cfd4 <_free_r+0x94>
   1d0aa:	22aa      	movs	r2, #170	; 0xaa
   1d0ac:	0052      	lsls	r2, r2, #1
   1d0ae:	4290      	cmp	r0, r2
   1d0b0:	d805      	bhi.n	1d0be <_free_r+0x17e>
   1d0b2:	0be8      	lsrs	r0, r5, #15
   1d0b4:	0002      	movs	r2, r0
   1d0b6:	3078      	adds	r0, #120	; 0x78
   1d0b8:	3277      	adds	r2, #119	; 0x77
   1d0ba:	00c0      	lsls	r0, r0, #3
   1d0bc:	e78a      	b.n	1cfd4 <_free_r+0x94>
   1d0be:	4a0e      	ldr	r2, [pc, #56]	; (1d0f8 <_free_r+0x1b8>)
   1d0c0:	4290      	cmp	r0, r2
   1d0c2:	d805      	bhi.n	1d0d0 <_free_r+0x190>
   1d0c4:	0ca8      	lsrs	r0, r5, #18
   1d0c6:	0002      	movs	r2, r0
   1d0c8:	307d      	adds	r0, #125	; 0x7d
   1d0ca:	327c      	adds	r2, #124	; 0x7c
   1d0cc:	00c0      	lsls	r0, r0, #3
   1d0ce:	e781      	b.n	1cfd4 <_free_r+0x94>
   1d0d0:	20fe      	movs	r0, #254	; 0xfe
   1d0d2:	227e      	movs	r2, #126	; 0x7e
   1d0d4:	0080      	lsls	r0, r0, #2
   1d0d6:	e77d      	b.n	1cfd4 <_free_r+0x94>
   1d0d8:	4663      	mov	r3, ip
   1d0da:	432b      	orrs	r3, r5
   1d0dc:	604b      	str	r3, [r1, #4]
   1d0de:	6015      	str	r5, [r2, #0]
   1d0e0:	e76c      	b.n	1cfbc <_free_r+0x7c>
   1d0e2:	46c0      	nop			; (mov r8, r8)
   1d0e4:	200006e8 	.word	0x200006e8
   1d0e8:	000001ff 	.word	0x000001ff
   1d0ec:	200006f0 	.word	0x200006f0
   1d0f0:	20000af4 	.word	0x20000af4
   1d0f4:	20001b58 	.word	0x20001b58
   1d0f8:	00000554 	.word	0x00000554

0001d0fc <__sfvwrite_r>:
   1d0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0fe:	464e      	mov	r6, r9
   1d100:	46de      	mov	lr, fp
   1d102:	4657      	mov	r7, sl
   1d104:	4645      	mov	r5, r8
   1d106:	b5e0      	push	{r5, r6, r7, lr}
   1d108:	6893      	ldr	r3, [r2, #8]
   1d10a:	b083      	sub	sp, #12
   1d10c:	9000      	str	r0, [sp, #0]
   1d10e:	000c      	movs	r4, r1
   1d110:	0016      	movs	r6, r2
   1d112:	2b00      	cmp	r3, #0
   1d114:	d025      	beq.n	1d162 <__sfvwrite_r+0x66>
   1d116:	898b      	ldrh	r3, [r1, #12]
   1d118:	071a      	lsls	r2, r3, #28
   1d11a:	d52a      	bpl.n	1d172 <__sfvwrite_r+0x76>
   1d11c:	690a      	ldr	r2, [r1, #16]
   1d11e:	2a00      	cmp	r2, #0
   1d120:	d027      	beq.n	1d172 <__sfvwrite_r+0x76>
   1d122:	6832      	ldr	r2, [r6, #0]
   1d124:	4693      	mov	fp, r2
   1d126:	079a      	lsls	r2, r3, #30
   1d128:	d52f      	bpl.n	1d18a <__sfvwrite_r+0x8e>
   1d12a:	4bb2      	ldr	r3, [pc, #712]	; (1d3f4 <__sfvwrite_r+0x2f8>)
   1d12c:	2700      	movs	r7, #0
   1d12e:	2500      	movs	r5, #0
   1d130:	4698      	mov	r8, r3
   1d132:	46b1      	mov	r9, r6
   1d134:	2d00      	cmp	r5, #0
   1d136:	d100      	bne.n	1d13a <__sfvwrite_r+0x3e>
   1d138:	e072      	b.n	1d220 <__sfvwrite_r+0x124>
   1d13a:	002b      	movs	r3, r5
   1d13c:	4545      	cmp	r5, r8
   1d13e:	d900      	bls.n	1d142 <__sfvwrite_r+0x46>
   1d140:	4bac      	ldr	r3, [pc, #688]	; (1d3f4 <__sfvwrite_r+0x2f8>)
   1d142:	003a      	movs	r2, r7
   1d144:	69e1      	ldr	r1, [r4, #28]
   1d146:	9800      	ldr	r0, [sp, #0]
   1d148:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d14a:	47b0      	blx	r6
   1d14c:	2800      	cmp	r0, #0
   1d14e:	dc00      	bgt.n	1d152 <__sfvwrite_r+0x56>
   1d150:	e073      	b.n	1d23a <__sfvwrite_r+0x13e>
   1d152:	464b      	mov	r3, r9
   1d154:	689b      	ldr	r3, [r3, #8]
   1d156:	183f      	adds	r7, r7, r0
   1d158:	1a2d      	subs	r5, r5, r0
   1d15a:	1a18      	subs	r0, r3, r0
   1d15c:	464b      	mov	r3, r9
   1d15e:	6098      	str	r0, [r3, #8]
   1d160:	d1e8      	bne.n	1d134 <__sfvwrite_r+0x38>
   1d162:	2000      	movs	r0, #0
   1d164:	b003      	add	sp, #12
   1d166:	bc3c      	pop	{r2, r3, r4, r5}
   1d168:	4690      	mov	r8, r2
   1d16a:	4699      	mov	r9, r3
   1d16c:	46a2      	mov	sl, r4
   1d16e:	46ab      	mov	fp, r5
   1d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d172:	0021      	movs	r1, r4
   1d174:	9800      	ldr	r0, [sp, #0]
   1d176:	f7fe fc4b 	bl	1ba10 <__swsetup_r>
   1d17a:	2800      	cmp	r0, #0
   1d17c:	d000      	beq.n	1d180 <__sfvwrite_r+0x84>
   1d17e:	e130      	b.n	1d3e2 <__sfvwrite_r+0x2e6>
   1d180:	6832      	ldr	r2, [r6, #0]
   1d182:	89a3      	ldrh	r3, [r4, #12]
   1d184:	4693      	mov	fp, r2
   1d186:	079a      	lsls	r2, r3, #30
   1d188:	d4cf      	bmi.n	1d12a <__sfvwrite_r+0x2e>
   1d18a:	07da      	lsls	r2, r3, #31
   1d18c:	d55d      	bpl.n	1d24a <__sfvwrite_r+0x14e>
   1d18e:	2300      	movs	r3, #0
   1d190:	2000      	movs	r0, #0
   1d192:	469a      	mov	sl, r3
   1d194:	2700      	movs	r7, #0
   1d196:	001d      	movs	r5, r3
   1d198:	46b1      	mov	r9, r6
   1d19a:	e029      	b.n	1d1f0 <__sfvwrite_r+0xf4>
   1d19c:	2800      	cmp	r0, #0
   1d19e:	d033      	beq.n	1d208 <__sfvwrite_r+0x10c>
   1d1a0:	46a8      	mov	r8, r5
   1d1a2:	42bd      	cmp	r5, r7
   1d1a4:	d900      	bls.n	1d1a8 <__sfvwrite_r+0xac>
   1d1a6:	46b8      	mov	r8, r7
   1d1a8:	6820      	ldr	r0, [r4, #0]
   1d1aa:	6922      	ldr	r2, [r4, #16]
   1d1ac:	4646      	mov	r6, r8
   1d1ae:	6963      	ldr	r3, [r4, #20]
   1d1b0:	4290      	cmp	r0, r2
   1d1b2:	d907      	bls.n	1d1c4 <__sfvwrite_r+0xc8>
   1d1b4:	68a2      	ldr	r2, [r4, #8]
   1d1b6:	4694      	mov	ip, r2
   1d1b8:	449c      	add	ip, r3
   1d1ba:	4662      	mov	r2, ip
   1d1bc:	9201      	str	r2, [sp, #4]
   1d1be:	45e0      	cmp	r8, ip
   1d1c0:	dd00      	ble.n	1d1c4 <__sfvwrite_r+0xc8>
   1d1c2:	e0e9      	b.n	1d398 <__sfvwrite_r+0x29c>
   1d1c4:	4598      	cmp	r8, r3
   1d1c6:	da00      	bge.n	1d1ca <__sfvwrite_r+0xce>
   1d1c8:	e08f      	b.n	1d2ea <__sfvwrite_r+0x1ee>
   1d1ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d1cc:	4652      	mov	r2, sl
   1d1ce:	69e1      	ldr	r1, [r4, #28]
   1d1d0:	9800      	ldr	r0, [sp, #0]
   1d1d2:	47b0      	blx	r6
   1d1d4:	1e06      	subs	r6, r0, #0
   1d1d6:	dd30      	ble.n	1d23a <__sfvwrite_r+0x13e>
   1d1d8:	1bad      	subs	r5, r5, r6
   1d1da:	2001      	movs	r0, #1
   1d1dc:	2d00      	cmp	r5, #0
   1d1de:	d026      	beq.n	1d22e <__sfvwrite_r+0x132>
   1d1e0:	464b      	mov	r3, r9
   1d1e2:	689b      	ldr	r3, [r3, #8]
   1d1e4:	44b2      	add	sl, r6
   1d1e6:	1bbf      	subs	r7, r7, r6
   1d1e8:	1b9e      	subs	r6, r3, r6
   1d1ea:	464b      	mov	r3, r9
   1d1ec:	609e      	str	r6, [r3, #8]
   1d1ee:	d0b8      	beq.n	1d162 <__sfvwrite_r+0x66>
   1d1f0:	2f00      	cmp	r7, #0
   1d1f2:	d1d3      	bne.n	1d19c <__sfvwrite_r+0xa0>
   1d1f4:	465b      	mov	r3, fp
   1d1f6:	681b      	ldr	r3, [r3, #0]
   1d1f8:	469a      	mov	sl, r3
   1d1fa:	465b      	mov	r3, fp
   1d1fc:	685f      	ldr	r7, [r3, #4]
   1d1fe:	2308      	movs	r3, #8
   1d200:	469c      	mov	ip, r3
   1d202:	44e3      	add	fp, ip
   1d204:	2f00      	cmp	r7, #0
   1d206:	d0f5      	beq.n	1d1f4 <__sfvwrite_r+0xf8>
   1d208:	003a      	movs	r2, r7
   1d20a:	210a      	movs	r1, #10
   1d20c:	4650      	mov	r0, sl
   1d20e:	f000 fc85 	bl	1db1c <memchr>
   1d212:	2800      	cmp	r0, #0
   1d214:	d100      	bne.n	1d218 <__sfvwrite_r+0x11c>
   1d216:	e0e2      	b.n	1d3de <__sfvwrite_r+0x2e2>
   1d218:	4653      	mov	r3, sl
   1d21a:	3001      	adds	r0, #1
   1d21c:	1ac5      	subs	r5, r0, r3
   1d21e:	e7bf      	b.n	1d1a0 <__sfvwrite_r+0xa4>
   1d220:	465b      	mov	r3, fp
   1d222:	681f      	ldr	r7, [r3, #0]
   1d224:	685d      	ldr	r5, [r3, #4]
   1d226:	2308      	movs	r3, #8
   1d228:	469c      	mov	ip, r3
   1d22a:	44e3      	add	fp, ip
   1d22c:	e782      	b.n	1d134 <__sfvwrite_r+0x38>
   1d22e:	0021      	movs	r1, r4
   1d230:	9800      	ldr	r0, [sp, #0]
   1d232:	f7ff fd81 	bl	1cd38 <_fflush_r>
   1d236:	2800      	cmp	r0, #0
   1d238:	d0d2      	beq.n	1d1e0 <__sfvwrite_r+0xe4>
   1d23a:	220c      	movs	r2, #12
   1d23c:	5ea3      	ldrsh	r3, [r4, r2]
   1d23e:	2240      	movs	r2, #64	; 0x40
   1d240:	2001      	movs	r0, #1
   1d242:	4313      	orrs	r3, r2
   1d244:	81a3      	strh	r3, [r4, #12]
   1d246:	4240      	negs	r0, r0
   1d248:	e78c      	b.n	1d164 <__sfvwrite_r+0x68>
   1d24a:	2200      	movs	r2, #0
   1d24c:	4691      	mov	r9, r2
   1d24e:	464d      	mov	r5, r9
   1d250:	2d00      	cmp	r5, #0
   1d252:	d023      	beq.n	1d29c <__sfvwrite_r+0x1a0>
   1d254:	68a2      	ldr	r2, [r4, #8]
   1d256:	4690      	mov	r8, r2
   1d258:	2280      	movs	r2, #128	; 0x80
   1d25a:	0092      	lsls	r2, r2, #2
   1d25c:	4213      	tst	r3, r2
   1d25e:	d026      	beq.n	1d2ae <__sfvwrite_r+0x1b2>
   1d260:	46c2      	mov	sl, r8
   1d262:	4545      	cmp	r5, r8
   1d264:	d34d      	bcc.n	1d302 <__sfvwrite_r+0x206>
   1d266:	2290      	movs	r2, #144	; 0x90
   1d268:	00d2      	lsls	r2, r2, #3
   1d26a:	4213      	tst	r3, r2
   1d26c:	d14e      	bne.n	1d30c <__sfvwrite_r+0x210>
   1d26e:	002f      	movs	r7, r5
   1d270:	6820      	ldr	r0, [r4, #0]
   1d272:	4652      	mov	r2, sl
   1d274:	4649      	mov	r1, r9
   1d276:	f000 fcd3 	bl	1dc20 <memmove>
   1d27a:	4642      	mov	r2, r8
   1d27c:	68a3      	ldr	r3, [r4, #8]
   1d27e:	1a98      	subs	r0, r3, r2
   1d280:	6823      	ldr	r3, [r4, #0]
   1d282:	60a0      	str	r0, [r4, #8]
   1d284:	4453      	add	r3, sl
   1d286:	6023      	str	r3, [r4, #0]
   1d288:	68b3      	ldr	r3, [r6, #8]
   1d28a:	44b9      	add	r9, r7
   1d28c:	1bed      	subs	r5, r5, r7
   1d28e:	1bdf      	subs	r7, r3, r7
   1d290:	60b7      	str	r7, [r6, #8]
   1d292:	d100      	bne.n	1d296 <__sfvwrite_r+0x19a>
   1d294:	e765      	b.n	1d162 <__sfvwrite_r+0x66>
   1d296:	89a3      	ldrh	r3, [r4, #12]
   1d298:	2d00      	cmp	r5, #0
   1d29a:	d1db      	bne.n	1d254 <__sfvwrite_r+0x158>
   1d29c:	465a      	mov	r2, fp
   1d29e:	6812      	ldr	r2, [r2, #0]
   1d2a0:	4691      	mov	r9, r2
   1d2a2:	465a      	mov	r2, fp
   1d2a4:	6855      	ldr	r5, [r2, #4]
   1d2a6:	2208      	movs	r2, #8
   1d2a8:	4694      	mov	ip, r2
   1d2aa:	44e3      	add	fp, ip
   1d2ac:	e7d0      	b.n	1d250 <__sfvwrite_r+0x154>
   1d2ae:	6820      	ldr	r0, [r4, #0]
   1d2b0:	6923      	ldr	r3, [r4, #16]
   1d2b2:	4298      	cmp	r0, r3
   1d2b4:	d802      	bhi.n	1d2bc <__sfvwrite_r+0x1c0>
   1d2b6:	6967      	ldr	r7, [r4, #20]
   1d2b8:	42bd      	cmp	r5, r7
   1d2ba:	d259      	bcs.n	1d370 <__sfvwrite_r+0x274>
   1d2bc:	4647      	mov	r7, r8
   1d2be:	42af      	cmp	r7, r5
   1d2c0:	d900      	bls.n	1d2c4 <__sfvwrite_r+0x1c8>
   1d2c2:	002f      	movs	r7, r5
   1d2c4:	003a      	movs	r2, r7
   1d2c6:	4649      	mov	r1, r9
   1d2c8:	f000 fcaa 	bl	1dc20 <memmove>
   1d2cc:	68a3      	ldr	r3, [r4, #8]
   1d2ce:	6822      	ldr	r2, [r4, #0]
   1d2d0:	1bdb      	subs	r3, r3, r7
   1d2d2:	19d2      	adds	r2, r2, r7
   1d2d4:	60a3      	str	r3, [r4, #8]
   1d2d6:	6022      	str	r2, [r4, #0]
   1d2d8:	2b00      	cmp	r3, #0
   1d2da:	d1d5      	bne.n	1d288 <__sfvwrite_r+0x18c>
   1d2dc:	0021      	movs	r1, r4
   1d2de:	9800      	ldr	r0, [sp, #0]
   1d2e0:	f7ff fd2a 	bl	1cd38 <_fflush_r>
   1d2e4:	2800      	cmp	r0, #0
   1d2e6:	d0cf      	beq.n	1d288 <__sfvwrite_r+0x18c>
   1d2e8:	e7a7      	b.n	1d23a <__sfvwrite_r+0x13e>
   1d2ea:	4642      	mov	r2, r8
   1d2ec:	4651      	mov	r1, sl
   1d2ee:	f000 fc97 	bl	1dc20 <memmove>
   1d2f2:	4642      	mov	r2, r8
   1d2f4:	68a3      	ldr	r3, [r4, #8]
   1d2f6:	1a9b      	subs	r3, r3, r2
   1d2f8:	60a3      	str	r3, [r4, #8]
   1d2fa:	6823      	ldr	r3, [r4, #0]
   1d2fc:	4443      	add	r3, r8
   1d2fe:	6023      	str	r3, [r4, #0]
   1d300:	e76a      	b.n	1d1d8 <__sfvwrite_r+0xdc>
   1d302:	46a8      	mov	r8, r5
   1d304:	6820      	ldr	r0, [r4, #0]
   1d306:	002f      	movs	r7, r5
   1d308:	46aa      	mov	sl, r5
   1d30a:	e7b2      	b.n	1d272 <__sfvwrite_r+0x176>
   1d30c:	6921      	ldr	r1, [r4, #16]
   1d30e:	6822      	ldr	r2, [r4, #0]
   1d310:	1a52      	subs	r2, r2, r1
   1d312:	4692      	mov	sl, r2
   1d314:	6962      	ldr	r2, [r4, #20]
   1d316:	0057      	lsls	r7, r2, #1
   1d318:	18bf      	adds	r7, r7, r2
   1d31a:	0ffa      	lsrs	r2, r7, #31
   1d31c:	19d7      	adds	r7, r2, r7
   1d31e:	4652      	mov	r2, sl
   1d320:	1c50      	adds	r0, r2, #1
   1d322:	107f      	asrs	r7, r7, #1
   1d324:	1940      	adds	r0, r0, r5
   1d326:	003a      	movs	r2, r7
   1d328:	42b8      	cmp	r0, r7
   1d32a:	d901      	bls.n	1d330 <__sfvwrite_r+0x234>
   1d32c:	0007      	movs	r7, r0
   1d32e:	0002      	movs	r2, r0
   1d330:	055b      	lsls	r3, r3, #21
   1d332:	d542      	bpl.n	1d3ba <__sfvwrite_r+0x2be>
   1d334:	0011      	movs	r1, r2
   1d336:	9800      	ldr	r0, [sp, #0]
   1d338:	f000 f926 	bl	1d588 <_malloc_r>
   1d33c:	4680      	mov	r8, r0
   1d33e:	1e03      	subs	r3, r0, #0
   1d340:	d052      	beq.n	1d3e8 <__sfvwrite_r+0x2ec>
   1d342:	4652      	mov	r2, sl
   1d344:	6921      	ldr	r1, [r4, #16]
   1d346:	f000 fc29 	bl	1db9c <memcpy>
   1d34a:	89a3      	ldrh	r3, [r4, #12]
   1d34c:	4a2a      	ldr	r2, [pc, #168]	; (1d3f8 <__sfvwrite_r+0x2fc>)
   1d34e:	4013      	ands	r3, r2
   1d350:	2280      	movs	r2, #128	; 0x80
   1d352:	4313      	orrs	r3, r2
   1d354:	81a3      	strh	r3, [r4, #12]
   1d356:	4643      	mov	r3, r8
   1d358:	4640      	mov	r0, r8
   1d35a:	6123      	str	r3, [r4, #16]
   1d35c:	4653      	mov	r3, sl
   1d35e:	4450      	add	r0, sl
   1d360:	6167      	str	r7, [r4, #20]
   1d362:	1aff      	subs	r7, r7, r3
   1d364:	60a7      	str	r7, [r4, #8]
   1d366:	6020      	str	r0, [r4, #0]
   1d368:	46a8      	mov	r8, r5
   1d36a:	002f      	movs	r7, r5
   1d36c:	46aa      	mov	sl, r5
   1d36e:	e780      	b.n	1d272 <__sfvwrite_r+0x176>
   1d370:	4b22      	ldr	r3, [pc, #136]	; (1d3fc <__sfvwrite_r+0x300>)
   1d372:	0028      	movs	r0, r5
   1d374:	429d      	cmp	r5, r3
   1d376:	d900      	bls.n	1d37a <__sfvwrite_r+0x27e>
   1d378:	0018      	movs	r0, r3
   1d37a:	0039      	movs	r1, r7
   1d37c:	f7fa fc70 	bl	17c60 <__divsi3>
   1d380:	003b      	movs	r3, r7
   1d382:	464a      	mov	r2, r9
   1d384:	4343      	muls	r3, r0
   1d386:	69e1      	ldr	r1, [r4, #28]
   1d388:	9800      	ldr	r0, [sp, #0]
   1d38a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d38c:	47b8      	blx	r7
   1d38e:	2800      	cmp	r0, #0
   1d390:	dc00      	bgt.n	1d394 <__sfvwrite_r+0x298>
   1d392:	e752      	b.n	1d23a <__sfvwrite_r+0x13e>
   1d394:	0007      	movs	r7, r0
   1d396:	e777      	b.n	1d288 <__sfvwrite_r+0x18c>
   1d398:	4666      	mov	r6, ip
   1d39a:	4651      	mov	r1, sl
   1d39c:	f000 fc40 	bl	1dc20 <memmove>
   1d3a0:	46b4      	mov	ip, r6
   1d3a2:	6823      	ldr	r3, [r4, #0]
   1d3a4:	0021      	movs	r1, r4
   1d3a6:	4463      	add	r3, ip
   1d3a8:	6023      	str	r3, [r4, #0]
   1d3aa:	9800      	ldr	r0, [sp, #0]
   1d3ac:	f7ff fcc4 	bl	1cd38 <_fflush_r>
   1d3b0:	2800      	cmp	r0, #0
   1d3b2:	d000      	beq.n	1d3b6 <__sfvwrite_r+0x2ba>
   1d3b4:	e741      	b.n	1d23a <__sfvwrite_r+0x13e>
   1d3b6:	9e01      	ldr	r6, [sp, #4]
   1d3b8:	e70e      	b.n	1d1d8 <__sfvwrite_r+0xdc>
   1d3ba:	9800      	ldr	r0, [sp, #0]
   1d3bc:	f000 ffd8 	bl	1e370 <_realloc_r>
   1d3c0:	4680      	mov	r8, r0
   1d3c2:	2800      	cmp	r0, #0
   1d3c4:	d1c7      	bne.n	1d356 <__sfvwrite_r+0x25a>
   1d3c6:	9d00      	ldr	r5, [sp, #0]
   1d3c8:	6921      	ldr	r1, [r4, #16]
   1d3ca:	0028      	movs	r0, r5
   1d3cc:	f7ff fdb8 	bl	1cf40 <_free_r>
   1d3d0:	2280      	movs	r2, #128	; 0x80
   1d3d2:	89a3      	ldrh	r3, [r4, #12]
   1d3d4:	4393      	bics	r3, r2
   1d3d6:	3a74      	subs	r2, #116	; 0x74
   1d3d8:	b21b      	sxth	r3, r3
   1d3da:	602a      	str	r2, [r5, #0]
   1d3dc:	e72f      	b.n	1d23e <__sfvwrite_r+0x142>
   1d3de:	1c7d      	adds	r5, r7, #1
   1d3e0:	e6de      	b.n	1d1a0 <__sfvwrite_r+0xa4>
   1d3e2:	2001      	movs	r0, #1
   1d3e4:	4240      	negs	r0, r0
   1d3e6:	e6bd      	b.n	1d164 <__sfvwrite_r+0x68>
   1d3e8:	9a00      	ldr	r2, [sp, #0]
   1d3ea:	330c      	adds	r3, #12
   1d3ec:	6013      	str	r3, [r2, #0]
   1d3ee:	220c      	movs	r2, #12
   1d3f0:	5ea3      	ldrsh	r3, [r4, r2]
   1d3f2:	e724      	b.n	1d23e <__sfvwrite_r+0x142>
   1d3f4:	7ffffc00 	.word	0x7ffffc00
   1d3f8:	fffffb7f 	.word	0xfffffb7f
   1d3fc:	7fffffff 	.word	0x7fffffff

0001d400 <_fwalk_reent>:
   1d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d402:	4647      	mov	r7, r8
   1d404:	46ce      	mov	lr, r9
   1d406:	b580      	push	{r7, lr}
   1d408:	27b8      	movs	r7, #184	; 0xb8
   1d40a:	4680      	mov	r8, r0
   1d40c:	00bf      	lsls	r7, r7, #2
   1d40e:	4447      	add	r7, r8
   1d410:	4689      	mov	r9, r1
   1d412:	2600      	movs	r6, #0
   1d414:	2f00      	cmp	r7, #0
   1d416:	d014      	beq.n	1d442 <_fwalk_reent+0x42>
   1d418:	687b      	ldr	r3, [r7, #4]
   1d41a:	68bc      	ldr	r4, [r7, #8]
   1d41c:	1e5d      	subs	r5, r3, #1
   1d41e:	d40d      	bmi.n	1d43c <_fwalk_reent+0x3c>
   1d420:	89a3      	ldrh	r3, [r4, #12]
   1d422:	2b01      	cmp	r3, #1
   1d424:	d907      	bls.n	1d436 <_fwalk_reent+0x36>
   1d426:	220e      	movs	r2, #14
   1d428:	5ea3      	ldrsh	r3, [r4, r2]
   1d42a:	3301      	adds	r3, #1
   1d42c:	d003      	beq.n	1d436 <_fwalk_reent+0x36>
   1d42e:	0021      	movs	r1, r4
   1d430:	4640      	mov	r0, r8
   1d432:	47c8      	blx	r9
   1d434:	4306      	orrs	r6, r0
   1d436:	3468      	adds	r4, #104	; 0x68
   1d438:	3d01      	subs	r5, #1
   1d43a:	d2f1      	bcs.n	1d420 <_fwalk_reent+0x20>
   1d43c:	683f      	ldr	r7, [r7, #0]
   1d43e:	2f00      	cmp	r7, #0
   1d440:	d1ea      	bne.n	1d418 <_fwalk_reent+0x18>
   1d442:	0030      	movs	r0, r6
   1d444:	bc0c      	pop	{r2, r3}
   1d446:	4690      	mov	r8, r2
   1d448:	4699      	mov	r9, r3
   1d44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d44c <__locale_mb_cur_max>:
   1d44c:	4b05      	ldr	r3, [pc, #20]	; (1d464 <__locale_mb_cur_max+0x18>)
   1d44e:	681b      	ldr	r3, [r3, #0]
   1d450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1d452:	2b00      	cmp	r3, #0
   1d454:	d003      	beq.n	1d45e <__locale_mb_cur_max+0x12>
   1d456:	2294      	movs	r2, #148	; 0x94
   1d458:	0052      	lsls	r2, r2, #1
   1d45a:	5c98      	ldrb	r0, [r3, r2]
   1d45c:	4770      	bx	lr
   1d45e:	4b02      	ldr	r3, [pc, #8]	; (1d468 <__locale_mb_cur_max+0x1c>)
   1d460:	e7f9      	b.n	1d456 <__locale_mb_cur_max+0xa>
   1d462:	46c0      	nop			; (mov r8, r8)
   1d464:	20000148 	.word	0x20000148
   1d468:	2000057c 	.word	0x2000057c

0001d46c <_localeconv_r>:
   1d46c:	4b04      	ldr	r3, [pc, #16]	; (1d480 <_localeconv_r+0x14>)
   1d46e:	681b      	ldr	r3, [r3, #0]
   1d470:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1d472:	2800      	cmp	r0, #0
   1d474:	d001      	beq.n	1d47a <_localeconv_r+0xe>
   1d476:	30f0      	adds	r0, #240	; 0xf0
   1d478:	4770      	bx	lr
   1d47a:	4802      	ldr	r0, [pc, #8]	; (1d484 <_localeconv_r+0x18>)
   1d47c:	e7fb      	b.n	1d476 <_localeconv_r+0xa>
   1d47e:	46c0      	nop			; (mov r8, r8)
   1d480:	20000148 	.word	0x20000148
   1d484:	2000057c 	.word	0x2000057c

0001d488 <__retarget_lock_init_recursive>:
   1d488:	4770      	bx	lr
   1d48a:	46c0      	nop			; (mov r8, r8)

0001d48c <__retarget_lock_close_recursive>:
   1d48c:	4770      	bx	lr
   1d48e:	46c0      	nop			; (mov r8, r8)

0001d490 <__retarget_lock_acquire_recursive>:
   1d490:	4770      	bx	lr
   1d492:	46c0      	nop			; (mov r8, r8)

0001d494 <__retarget_lock_release_recursive>:
   1d494:	4770      	bx	lr
   1d496:	46c0      	nop			; (mov r8, r8)

0001d498 <__swhatbuf_r>:
   1d498:	b570      	push	{r4, r5, r6, lr}
   1d49a:	000c      	movs	r4, r1
   1d49c:	001e      	movs	r6, r3
   1d49e:	230e      	movs	r3, #14
   1d4a0:	5ec9      	ldrsh	r1, [r1, r3]
   1d4a2:	b090      	sub	sp, #64	; 0x40
   1d4a4:	0015      	movs	r5, r2
   1d4a6:	2900      	cmp	r1, #0
   1d4a8:	db15      	blt.n	1d4d6 <__swhatbuf_r+0x3e>
   1d4aa:	aa01      	add	r2, sp, #4
   1d4ac:	f001 fb84 	bl	1ebb8 <_fstat_r>
   1d4b0:	2800      	cmp	r0, #0
   1d4b2:	db10      	blt.n	1d4d6 <__swhatbuf_r+0x3e>
   1d4b4:	22f0      	movs	r2, #240	; 0xf0
   1d4b6:	9b02      	ldr	r3, [sp, #8]
   1d4b8:	0212      	lsls	r2, r2, #8
   1d4ba:	4013      	ands	r3, r2
   1d4bc:	4a0d      	ldr	r2, [pc, #52]	; (1d4f4 <__swhatbuf_r+0x5c>)
   1d4be:	2080      	movs	r0, #128	; 0x80
   1d4c0:	4694      	mov	ip, r2
   1d4c2:	4463      	add	r3, ip
   1d4c4:	425a      	negs	r2, r3
   1d4c6:	4153      	adcs	r3, r2
   1d4c8:	6033      	str	r3, [r6, #0]
   1d4ca:	2380      	movs	r3, #128	; 0x80
   1d4cc:	00db      	lsls	r3, r3, #3
   1d4ce:	602b      	str	r3, [r5, #0]
   1d4d0:	0100      	lsls	r0, r0, #4
   1d4d2:	b010      	add	sp, #64	; 0x40
   1d4d4:	bd70      	pop	{r4, r5, r6, pc}
   1d4d6:	2300      	movs	r3, #0
   1d4d8:	6033      	str	r3, [r6, #0]
   1d4da:	89a3      	ldrh	r3, [r4, #12]
   1d4dc:	061b      	lsls	r3, r3, #24
   1d4de:	d503      	bpl.n	1d4e8 <__swhatbuf_r+0x50>
   1d4e0:	2340      	movs	r3, #64	; 0x40
   1d4e2:	2000      	movs	r0, #0
   1d4e4:	602b      	str	r3, [r5, #0]
   1d4e6:	e7f4      	b.n	1d4d2 <__swhatbuf_r+0x3a>
   1d4e8:	2380      	movs	r3, #128	; 0x80
   1d4ea:	00db      	lsls	r3, r3, #3
   1d4ec:	602b      	str	r3, [r5, #0]
   1d4ee:	2000      	movs	r0, #0
   1d4f0:	e7ef      	b.n	1d4d2 <__swhatbuf_r+0x3a>
   1d4f2:	46c0      	nop			; (mov r8, r8)
   1d4f4:	ffffe000 	.word	0xffffe000

0001d4f8 <__smakebuf_r>:
   1d4f8:	b570      	push	{r4, r5, r6, lr}
   1d4fa:	898b      	ldrh	r3, [r1, #12]
   1d4fc:	b082      	sub	sp, #8
   1d4fe:	0006      	movs	r6, r0
   1d500:	000c      	movs	r4, r1
   1d502:	079b      	lsls	r3, r3, #30
   1d504:	d507      	bpl.n	1d516 <__smakebuf_r+0x1e>
   1d506:	0023      	movs	r3, r4
   1d508:	3343      	adds	r3, #67	; 0x43
   1d50a:	6023      	str	r3, [r4, #0]
   1d50c:	6123      	str	r3, [r4, #16]
   1d50e:	2301      	movs	r3, #1
   1d510:	6163      	str	r3, [r4, #20]
   1d512:	b002      	add	sp, #8
   1d514:	bd70      	pop	{r4, r5, r6, pc}
   1d516:	ab01      	add	r3, sp, #4
   1d518:	466a      	mov	r2, sp
   1d51a:	f7ff ffbd 	bl	1d498 <__swhatbuf_r>
   1d51e:	9900      	ldr	r1, [sp, #0]
   1d520:	0005      	movs	r5, r0
   1d522:	0030      	movs	r0, r6
   1d524:	f000 f830 	bl	1d588 <_malloc_r>
   1d528:	2800      	cmp	r0, #0
   1d52a:	d01e      	beq.n	1d56a <__smakebuf_r+0x72>
   1d52c:	2280      	movs	r2, #128	; 0x80
   1d52e:	4b15      	ldr	r3, [pc, #84]	; (1d584 <__smakebuf_r+0x8c>)
   1d530:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d532:	89a3      	ldrh	r3, [r4, #12]
   1d534:	6020      	str	r0, [r4, #0]
   1d536:	4313      	orrs	r3, r2
   1d538:	9a00      	ldr	r2, [sp, #0]
   1d53a:	b21b      	sxth	r3, r3
   1d53c:	6162      	str	r2, [r4, #20]
   1d53e:	9a01      	ldr	r2, [sp, #4]
   1d540:	81a3      	strh	r3, [r4, #12]
   1d542:	6120      	str	r0, [r4, #16]
   1d544:	2a00      	cmp	r2, #0
   1d546:	d102      	bne.n	1d54e <__smakebuf_r+0x56>
   1d548:	432b      	orrs	r3, r5
   1d54a:	81a3      	strh	r3, [r4, #12]
   1d54c:	e7e1      	b.n	1d512 <__smakebuf_r+0x1a>
   1d54e:	230e      	movs	r3, #14
   1d550:	5ee1      	ldrsh	r1, [r4, r3]
   1d552:	0030      	movs	r0, r6
   1d554:	f001 fb44 	bl	1ebe0 <_isatty_r>
   1d558:	2800      	cmp	r0, #0
   1d55a:	d010      	beq.n	1d57e <__smakebuf_r+0x86>
   1d55c:	2203      	movs	r2, #3
   1d55e:	89a3      	ldrh	r3, [r4, #12]
   1d560:	4393      	bics	r3, r2
   1d562:	2201      	movs	r2, #1
   1d564:	4313      	orrs	r3, r2
   1d566:	b21b      	sxth	r3, r3
   1d568:	e7ee      	b.n	1d548 <__smakebuf_r+0x50>
   1d56a:	220c      	movs	r2, #12
   1d56c:	5ea3      	ldrsh	r3, [r4, r2]
   1d56e:	059a      	lsls	r2, r3, #22
   1d570:	d4cf      	bmi.n	1d512 <__smakebuf_r+0x1a>
   1d572:	2203      	movs	r2, #3
   1d574:	4393      	bics	r3, r2
   1d576:	2202      	movs	r2, #2
   1d578:	4313      	orrs	r3, r2
   1d57a:	81a3      	strh	r3, [r4, #12]
   1d57c:	e7c3      	b.n	1d506 <__smakebuf_r+0xe>
   1d57e:	220c      	movs	r2, #12
   1d580:	5ea3      	ldrsh	r3, [r4, r2]
   1d582:	e7e1      	b.n	1d548 <__smakebuf_r+0x50>
   1d584:	0001cd8d 	.word	0x0001cd8d

0001d588 <_malloc_r>:
   1d588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d58a:	4657      	mov	r7, sl
   1d58c:	4645      	mov	r5, r8
   1d58e:	46de      	mov	lr, fp
   1d590:	464e      	mov	r6, r9
   1d592:	b5e0      	push	{r5, r6, r7, lr}
   1d594:	000d      	movs	r5, r1
   1d596:	350b      	adds	r5, #11
   1d598:	b083      	sub	sp, #12
   1d59a:	0007      	movs	r7, r0
   1d59c:	2d16      	cmp	r5, #22
   1d59e:	d800      	bhi.n	1d5a2 <_malloc_r+0x1a>
   1d5a0:	e09f      	b.n	1d6e2 <_malloc_r+0x15a>
   1d5a2:	2307      	movs	r3, #7
   1d5a4:	439d      	bics	r5, r3
   1d5a6:	d500      	bpl.n	1d5aa <_malloc_r+0x22>
   1d5a8:	e0c4      	b.n	1d734 <_malloc_r+0x1ac>
   1d5aa:	42a9      	cmp	r1, r5
   1d5ac:	d900      	bls.n	1d5b0 <_malloc_r+0x28>
   1d5ae:	e0c1      	b.n	1d734 <_malloc_r+0x1ac>
   1d5b0:	f000 fb86 	bl	1dcc0 <__malloc_lock>
   1d5b4:	23f8      	movs	r3, #248	; 0xf8
   1d5b6:	33ff      	adds	r3, #255	; 0xff
   1d5b8:	429d      	cmp	r5, r3
   1d5ba:	d800      	bhi.n	1d5be <_malloc_r+0x36>
   1d5bc:	e28f      	b.n	1dade <_malloc_r+0x556>
   1d5be:	0a68      	lsrs	r0, r5, #9
   1d5c0:	d100      	bne.n	1d5c4 <_malloc_r+0x3c>
   1d5c2:	e0bb      	b.n	1d73c <_malloc_r+0x1b4>
   1d5c4:	2804      	cmp	r0, #4
   1d5c6:	d900      	bls.n	1d5ca <_malloc_r+0x42>
   1d5c8:	e162      	b.n	1d890 <_malloc_r+0x308>
   1d5ca:	2338      	movs	r3, #56	; 0x38
   1d5cc:	4698      	mov	r8, r3
   1d5ce:	09a8      	lsrs	r0, r5, #6
   1d5d0:	4480      	add	r8, r0
   1d5d2:	3039      	adds	r0, #57	; 0x39
   1d5d4:	00c1      	lsls	r1, r0, #3
   1d5d6:	4ed2      	ldr	r6, [pc, #840]	; (1d920 <_malloc_r+0x398>)
   1d5d8:	1871      	adds	r1, r6, r1
   1d5da:	3908      	subs	r1, #8
   1d5dc:	68cc      	ldr	r4, [r1, #12]
   1d5de:	42a1      	cmp	r1, r4
   1d5e0:	d019      	beq.n	1d616 <_malloc_r+0x8e>
   1d5e2:	2303      	movs	r3, #3
   1d5e4:	6862      	ldr	r2, [r4, #4]
   1d5e6:	439a      	bics	r2, r3
   1d5e8:	0013      	movs	r3, r2
   1d5ea:	1b52      	subs	r2, r2, r5
   1d5ec:	2a0f      	cmp	r2, #15
   1d5ee:	dd00      	ble.n	1d5f2 <_malloc_r+0x6a>
   1d5f0:	e0aa      	b.n	1d748 <_malloc_r+0x1c0>
   1d5f2:	2a00      	cmp	r2, #0
   1d5f4:	db00      	blt.n	1d5f8 <_malloc_r+0x70>
   1d5f6:	e088      	b.n	1d70a <_malloc_r+0x182>
   1d5f8:	2303      	movs	r3, #3
   1d5fa:	469c      	mov	ip, r3
   1d5fc:	e008      	b.n	1d610 <_malloc_r+0x88>
   1d5fe:	4662      	mov	r2, ip
   1d600:	6863      	ldr	r3, [r4, #4]
   1d602:	4393      	bics	r3, r2
   1d604:	1b5a      	subs	r2, r3, r5
   1d606:	2a0f      	cmp	r2, #15
   1d608:	dd00      	ble.n	1d60c <_malloc_r+0x84>
   1d60a:	e09d      	b.n	1d748 <_malloc_r+0x1c0>
   1d60c:	2a00      	cmp	r2, #0
   1d60e:	da7c      	bge.n	1d70a <_malloc_r+0x182>
   1d610:	68e4      	ldr	r4, [r4, #12]
   1d612:	42a1      	cmp	r1, r4
   1d614:	d1f3      	bne.n	1d5fe <_malloc_r+0x76>
   1d616:	0032      	movs	r2, r6
   1d618:	6934      	ldr	r4, [r6, #16]
   1d61a:	3208      	adds	r2, #8
   1d61c:	4294      	cmp	r4, r2
   1d61e:	d100      	bne.n	1d622 <_malloc_r+0x9a>
   1d620:	e190      	b.n	1d944 <_malloc_r+0x3bc>
   1d622:	2303      	movs	r3, #3
   1d624:	6861      	ldr	r1, [r4, #4]
   1d626:	4399      	bics	r1, r3
   1d628:	4689      	mov	r9, r1
   1d62a:	1b49      	subs	r1, r1, r5
   1d62c:	290f      	cmp	r1, #15
   1d62e:	dd00      	ble.n	1d632 <_malloc_r+0xaa>
   1d630:	e162      	b.n	1d8f8 <_malloc_r+0x370>
   1d632:	6172      	str	r2, [r6, #20]
   1d634:	6132      	str	r2, [r6, #16]
   1d636:	2900      	cmp	r1, #0
   1d638:	db00      	blt.n	1d63c <_malloc_r+0xb4>
   1d63a:	e087      	b.n	1d74c <_malloc_r+0x1c4>
   1d63c:	4ab9      	ldr	r2, [pc, #740]	; (1d924 <_malloc_r+0x39c>)
   1d63e:	464b      	mov	r3, r9
   1d640:	4591      	cmp	r9, r2
   1d642:	d900      	bls.n	1d646 <_malloc_r+0xbe>
   1d644:	e130      	b.n	1d8a8 <_malloc_r+0x320>
   1d646:	08db      	lsrs	r3, r3, #3
   1d648:	3aff      	subs	r2, #255	; 0xff
   1d64a:	1099      	asrs	r1, r3, #2
   1d64c:	3aff      	subs	r2, #255	; 0xff
   1d64e:	408a      	lsls	r2, r1
   1d650:	00db      	lsls	r3, r3, #3
   1d652:	6871      	ldr	r1, [r6, #4]
   1d654:	199b      	adds	r3, r3, r6
   1d656:	430a      	orrs	r2, r1
   1d658:	6899      	ldr	r1, [r3, #8]
   1d65a:	6072      	str	r2, [r6, #4]
   1d65c:	60e3      	str	r3, [r4, #12]
   1d65e:	60a1      	str	r1, [r4, #8]
   1d660:	609c      	str	r4, [r3, #8]
   1d662:	0013      	movs	r3, r2
   1d664:	60cc      	str	r4, [r1, #12]
   1d666:	2101      	movs	r1, #1
   1d668:	1082      	asrs	r2, r0, #2
   1d66a:	4091      	lsls	r1, r2
   1d66c:	4299      	cmp	r1, r3
   1d66e:	d86f      	bhi.n	1d750 <_malloc_r+0x1c8>
   1d670:	420b      	tst	r3, r1
   1d672:	d105      	bne.n	1d680 <_malloc_r+0xf8>
   1d674:	2203      	movs	r2, #3
   1d676:	4390      	bics	r0, r2
   1d678:	0049      	lsls	r1, r1, #1
   1d67a:	3004      	adds	r0, #4
   1d67c:	420b      	tst	r3, r1
   1d67e:	d0fb      	beq.n	1d678 <_malloc_r+0xf0>
   1d680:	2303      	movs	r3, #3
   1d682:	4698      	mov	r8, r3
   1d684:	00c3      	lsls	r3, r0, #3
   1d686:	4699      	mov	r9, r3
   1d688:	44b1      	add	r9, r6
   1d68a:	46cc      	mov	ip, r9
   1d68c:	4682      	mov	sl, r0
   1d68e:	4663      	mov	r3, ip
   1d690:	68dc      	ldr	r4, [r3, #12]
   1d692:	45a4      	cmp	ip, r4
   1d694:	d107      	bne.n	1d6a6 <_malloc_r+0x11e>
   1d696:	e157      	b.n	1d948 <_malloc_r+0x3c0>
   1d698:	2a00      	cmp	r2, #0
   1d69a:	db00      	blt.n	1d69e <_malloc_r+0x116>
   1d69c:	e166      	b.n	1d96c <_malloc_r+0x3e4>
   1d69e:	68e4      	ldr	r4, [r4, #12]
   1d6a0:	45a4      	cmp	ip, r4
   1d6a2:	d100      	bne.n	1d6a6 <_malloc_r+0x11e>
   1d6a4:	e150      	b.n	1d948 <_malloc_r+0x3c0>
   1d6a6:	4642      	mov	r2, r8
   1d6a8:	6863      	ldr	r3, [r4, #4]
   1d6aa:	4393      	bics	r3, r2
   1d6ac:	1b5a      	subs	r2, r3, r5
   1d6ae:	2a0f      	cmp	r2, #15
   1d6b0:	ddf2      	ble.n	1d698 <_malloc_r+0x110>
   1d6b2:	2001      	movs	r0, #1
   1d6b4:	4680      	mov	r8, r0
   1d6b6:	1961      	adds	r1, r4, r5
   1d6b8:	4305      	orrs	r5, r0
   1d6ba:	6065      	str	r5, [r4, #4]
   1d6bc:	68a0      	ldr	r0, [r4, #8]
   1d6be:	68e5      	ldr	r5, [r4, #12]
   1d6c0:	3608      	adds	r6, #8
   1d6c2:	60c5      	str	r5, [r0, #12]
   1d6c4:	60a8      	str	r0, [r5, #8]
   1d6c6:	4640      	mov	r0, r8
   1d6c8:	60f1      	str	r1, [r6, #12]
   1d6ca:	60b1      	str	r1, [r6, #8]
   1d6cc:	4310      	orrs	r0, r2
   1d6ce:	6048      	str	r0, [r1, #4]
   1d6d0:	60ce      	str	r6, [r1, #12]
   1d6d2:	608e      	str	r6, [r1, #8]
   1d6d4:	0038      	movs	r0, r7
   1d6d6:	50e2      	str	r2, [r4, r3]
   1d6d8:	f000 fafa 	bl	1dcd0 <__malloc_unlock>
   1d6dc:	0020      	movs	r0, r4
   1d6de:	3008      	adds	r0, #8
   1d6e0:	e021      	b.n	1d726 <_malloc_r+0x19e>
   1d6e2:	2910      	cmp	r1, #16
   1d6e4:	d826      	bhi.n	1d734 <_malloc_r+0x1ac>
   1d6e6:	0038      	movs	r0, r7
   1d6e8:	f000 faea 	bl	1dcc0 <__malloc_lock>
   1d6ec:	2510      	movs	r5, #16
   1d6ee:	2318      	movs	r3, #24
   1d6f0:	2002      	movs	r0, #2
   1d6f2:	4e8b      	ldr	r6, [pc, #556]	; (1d920 <_malloc_r+0x398>)
   1d6f4:	18f3      	adds	r3, r6, r3
   1d6f6:	001a      	movs	r2, r3
   1d6f8:	685c      	ldr	r4, [r3, #4]
   1d6fa:	3a08      	subs	r2, #8
   1d6fc:	4294      	cmp	r4, r2
   1d6fe:	d100      	bne.n	1d702 <_malloc_r+0x17a>
   1d700:	e12e      	b.n	1d960 <_malloc_r+0x3d8>
   1d702:	2303      	movs	r3, #3
   1d704:	6862      	ldr	r2, [r4, #4]
   1d706:	439a      	bics	r2, r3
   1d708:	0013      	movs	r3, r2
   1d70a:	68e2      	ldr	r2, [r4, #12]
   1d70c:	68a1      	ldr	r1, [r4, #8]
   1d70e:	60ca      	str	r2, [r1, #12]
   1d710:	6091      	str	r1, [r2, #8]
   1d712:	2201      	movs	r2, #1
   1d714:	18e3      	adds	r3, r4, r3
   1d716:	6859      	ldr	r1, [r3, #4]
   1d718:	0038      	movs	r0, r7
   1d71a:	430a      	orrs	r2, r1
   1d71c:	605a      	str	r2, [r3, #4]
   1d71e:	f000 fad7 	bl	1dcd0 <__malloc_unlock>
   1d722:	0020      	movs	r0, r4
   1d724:	3008      	adds	r0, #8
   1d726:	b003      	add	sp, #12
   1d728:	bc3c      	pop	{r2, r3, r4, r5}
   1d72a:	4690      	mov	r8, r2
   1d72c:	4699      	mov	r9, r3
   1d72e:	46a2      	mov	sl, r4
   1d730:	46ab      	mov	fp, r5
   1d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d734:	230c      	movs	r3, #12
   1d736:	2000      	movs	r0, #0
   1d738:	603b      	str	r3, [r7, #0]
   1d73a:	e7f4      	b.n	1d726 <_malloc_r+0x19e>
   1d73c:	2180      	movs	r1, #128	; 0x80
   1d73e:	233f      	movs	r3, #63	; 0x3f
   1d740:	2040      	movs	r0, #64	; 0x40
   1d742:	0089      	lsls	r1, r1, #2
   1d744:	4698      	mov	r8, r3
   1d746:	e746      	b.n	1d5d6 <_malloc_r+0x4e>
   1d748:	4640      	mov	r0, r8
   1d74a:	e764      	b.n	1d616 <_malloc_r+0x8e>
   1d74c:	464b      	mov	r3, r9
   1d74e:	e7e0      	b.n	1d712 <_malloc_r+0x18a>
   1d750:	2303      	movs	r3, #3
   1d752:	68b4      	ldr	r4, [r6, #8]
   1d754:	6862      	ldr	r2, [r4, #4]
   1d756:	439a      	bics	r2, r3
   1d758:	4690      	mov	r8, r2
   1d75a:	42aa      	cmp	r2, r5
   1d75c:	d303      	bcc.n	1d766 <_malloc_r+0x1de>
   1d75e:	1b53      	subs	r3, r2, r5
   1d760:	2b0f      	cmp	r3, #15
   1d762:	dd00      	ble.n	1d766 <_malloc_r+0x1de>
   1d764:	e086      	b.n	1d874 <_malloc_r+0x2ec>
   1d766:	0023      	movs	r3, r4
   1d768:	4443      	add	r3, r8
   1d76a:	4a6f      	ldr	r2, [pc, #444]	; (1d928 <_malloc_r+0x3a0>)
   1d76c:	9301      	str	r3, [sp, #4]
   1d76e:	4b6f      	ldr	r3, [pc, #444]	; (1d92c <_malloc_r+0x3a4>)
   1d770:	4693      	mov	fp, r2
   1d772:	681b      	ldr	r3, [r3, #0]
   1d774:	6812      	ldr	r2, [r2, #0]
   1d776:	18eb      	adds	r3, r5, r3
   1d778:	3201      	adds	r2, #1
   1d77a:	d100      	bne.n	1d77e <_malloc_r+0x1f6>
   1d77c:	e168      	b.n	1da50 <_malloc_r+0x4c8>
   1d77e:	4a6c      	ldr	r2, [pc, #432]	; (1d930 <_malloc_r+0x3a8>)
   1d780:	4694      	mov	ip, r2
   1d782:	4463      	add	r3, ip
   1d784:	0b1b      	lsrs	r3, r3, #12
   1d786:	031b      	lsls	r3, r3, #12
   1d788:	9300      	str	r3, [sp, #0]
   1d78a:	9900      	ldr	r1, [sp, #0]
   1d78c:	0038      	movs	r0, r7
   1d78e:	f000 ffad 	bl	1e6ec <_sbrk_r>
   1d792:	0003      	movs	r3, r0
   1d794:	4681      	mov	r9, r0
   1d796:	3301      	adds	r3, #1
   1d798:	d061      	beq.n	1d85e <_malloc_r+0x2d6>
   1d79a:	9b01      	ldr	r3, [sp, #4]
   1d79c:	4283      	cmp	r3, r0
   1d79e:	d900      	bls.n	1d7a2 <_malloc_r+0x21a>
   1d7a0:	e0ff      	b.n	1d9a2 <_malloc_r+0x41a>
   1d7a2:	4b64      	ldr	r3, [pc, #400]	; (1d934 <_malloc_r+0x3ac>)
   1d7a4:	9a00      	ldr	r2, [sp, #0]
   1d7a6:	469a      	mov	sl, r3
   1d7a8:	681b      	ldr	r3, [r3, #0]
   1d7aa:	469c      	mov	ip, r3
   1d7ac:	4653      	mov	r3, sl
   1d7ae:	4462      	add	r2, ip
   1d7b0:	601a      	str	r2, [r3, #0]
   1d7b2:	9b01      	ldr	r3, [sp, #4]
   1d7b4:	0011      	movs	r1, r2
   1d7b6:	4283      	cmp	r3, r0
   1d7b8:	d100      	bne.n	1d7bc <_malloc_r+0x234>
   1d7ba:	e155      	b.n	1da68 <_malloc_r+0x4e0>
   1d7bc:	465b      	mov	r3, fp
   1d7be:	681b      	ldr	r3, [r3, #0]
   1d7c0:	3301      	adds	r3, #1
   1d7c2:	d100      	bne.n	1d7c6 <_malloc_r+0x23e>
   1d7c4:	e16c      	b.n	1daa0 <_malloc_r+0x518>
   1d7c6:	464b      	mov	r3, r9
   1d7c8:	9a01      	ldr	r2, [sp, #4]
   1d7ca:	1a9b      	subs	r3, r3, r2
   1d7cc:	1859      	adds	r1, r3, r1
   1d7ce:	4653      	mov	r3, sl
   1d7d0:	6019      	str	r1, [r3, #0]
   1d7d2:	2307      	movs	r3, #7
   1d7d4:	464a      	mov	r2, r9
   1d7d6:	4013      	ands	r3, r2
   1d7d8:	d100      	bne.n	1d7dc <_malloc_r+0x254>
   1d7da:	e124      	b.n	1da26 <_malloc_r+0x49e>
   1d7dc:	2108      	movs	r1, #8
   1d7de:	4689      	mov	r9, r1
   1d7e0:	4955      	ldr	r1, [pc, #340]	; (1d938 <_malloc_r+0x3b0>)
   1d7e2:	1ad2      	subs	r2, r2, r3
   1d7e4:	4491      	add	r9, r2
   1d7e6:	1acb      	subs	r3, r1, r3
   1d7e8:	9a00      	ldr	r2, [sp, #0]
   1d7ea:	0038      	movs	r0, r7
   1d7ec:	444a      	add	r2, r9
   1d7ee:	0511      	lsls	r1, r2, #20
   1d7f0:	0d09      	lsrs	r1, r1, #20
   1d7f2:	1a5b      	subs	r3, r3, r1
   1d7f4:	0019      	movs	r1, r3
   1d7f6:	469b      	mov	fp, r3
   1d7f8:	f000 ff78 	bl	1e6ec <_sbrk_r>
   1d7fc:	1c43      	adds	r3, r0, #1
   1d7fe:	d100      	bne.n	1d802 <_malloc_r+0x27a>
   1d800:	e142      	b.n	1da88 <_malloc_r+0x500>
   1d802:	464b      	mov	r3, r9
   1d804:	1ac0      	subs	r0, r0, r3
   1d806:	2301      	movs	r3, #1
   1d808:	4458      	add	r0, fp
   1d80a:	4318      	orrs	r0, r3
   1d80c:	4653      	mov	r3, sl
   1d80e:	681b      	ldr	r3, [r3, #0]
   1d810:	445b      	add	r3, fp
   1d812:	0019      	movs	r1, r3
   1d814:	4653      	mov	r3, sl
   1d816:	6019      	str	r1, [r3, #0]
   1d818:	464b      	mov	r3, r9
   1d81a:	60b3      	str	r3, [r6, #8]
   1d81c:	6058      	str	r0, [r3, #4]
   1d81e:	42b4      	cmp	r4, r6
   1d820:	d013      	beq.n	1d84a <_malloc_r+0x2c2>
   1d822:	4643      	mov	r3, r8
   1d824:	2b0f      	cmp	r3, #15
   1d826:	d800      	bhi.n	1d82a <_malloc_r+0x2a2>
   1d828:	e0e8      	b.n	1d9fc <_malloc_r+0x474>
   1d82a:	4643      	mov	r3, r8
   1d82c:	2207      	movs	r2, #7
   1d82e:	6860      	ldr	r0, [r4, #4]
   1d830:	3b0c      	subs	r3, #12
   1d832:	4393      	bics	r3, r2
   1d834:	3a06      	subs	r2, #6
   1d836:	4002      	ands	r2, r0
   1d838:	2005      	movs	r0, #5
   1d83a:	431a      	orrs	r2, r3
   1d83c:	6062      	str	r2, [r4, #4]
   1d83e:	18e2      	adds	r2, r4, r3
   1d840:	6050      	str	r0, [r2, #4]
   1d842:	6090      	str	r0, [r2, #8]
   1d844:	2b0f      	cmp	r3, #15
   1d846:	d900      	bls.n	1d84a <_malloc_r+0x2c2>
   1d848:	e122      	b.n	1da90 <_malloc_r+0x508>
   1d84a:	4b3c      	ldr	r3, [pc, #240]	; (1d93c <_malloc_r+0x3b4>)
   1d84c:	681a      	ldr	r2, [r3, #0]
   1d84e:	4291      	cmp	r1, r2
   1d850:	d900      	bls.n	1d854 <_malloc_r+0x2cc>
   1d852:	6019      	str	r1, [r3, #0]
   1d854:	4b3a      	ldr	r3, [pc, #232]	; (1d940 <_malloc_r+0x3b8>)
   1d856:	681a      	ldr	r2, [r3, #0]
   1d858:	4291      	cmp	r1, r2
   1d85a:	d900      	bls.n	1d85e <_malloc_r+0x2d6>
   1d85c:	6019      	str	r1, [r3, #0]
   1d85e:	2303      	movs	r3, #3
   1d860:	68b4      	ldr	r4, [r6, #8]
   1d862:	6862      	ldr	r2, [r4, #4]
   1d864:	439a      	bics	r2, r3
   1d866:	1b53      	subs	r3, r2, r5
   1d868:	4295      	cmp	r5, r2
   1d86a:	d900      	bls.n	1d86e <_malloc_r+0x2e6>
   1d86c:	e0c9      	b.n	1da02 <_malloc_r+0x47a>
   1d86e:	2b0f      	cmp	r3, #15
   1d870:	dc00      	bgt.n	1d874 <_malloc_r+0x2ec>
   1d872:	e0c6      	b.n	1da02 <_malloc_r+0x47a>
   1d874:	2201      	movs	r2, #1
   1d876:	0029      	movs	r1, r5
   1d878:	4313      	orrs	r3, r2
   1d87a:	4311      	orrs	r1, r2
   1d87c:	1965      	adds	r5, r4, r5
   1d87e:	6061      	str	r1, [r4, #4]
   1d880:	0038      	movs	r0, r7
   1d882:	60b5      	str	r5, [r6, #8]
   1d884:	606b      	str	r3, [r5, #4]
   1d886:	f000 fa23 	bl	1dcd0 <__malloc_unlock>
   1d88a:	0020      	movs	r0, r4
   1d88c:	3008      	adds	r0, #8
   1d88e:	e74a      	b.n	1d726 <_malloc_r+0x19e>
   1d890:	2814      	cmp	r0, #20
   1d892:	d97a      	bls.n	1d98a <_malloc_r+0x402>
   1d894:	2854      	cmp	r0, #84	; 0x54
   1d896:	d900      	bls.n	1d89a <_malloc_r+0x312>
   1d898:	e0ba      	b.n	1da10 <_malloc_r+0x488>
   1d89a:	236e      	movs	r3, #110	; 0x6e
   1d89c:	4698      	mov	r8, r3
   1d89e:	0b28      	lsrs	r0, r5, #12
   1d8a0:	4480      	add	r8, r0
   1d8a2:	306f      	adds	r0, #111	; 0x6f
   1d8a4:	00c1      	lsls	r1, r0, #3
   1d8a6:	e696      	b.n	1d5d6 <_malloc_r+0x4e>
   1d8a8:	0a5a      	lsrs	r2, r3, #9
   1d8aa:	2a04      	cmp	r2, #4
   1d8ac:	d973      	bls.n	1d996 <_malloc_r+0x40e>
   1d8ae:	2a14      	cmp	r2, #20
   1d8b0:	d900      	bls.n	1d8b4 <_malloc_r+0x32c>
   1d8b2:	e0d0      	b.n	1da56 <_malloc_r+0x4ce>
   1d8b4:	0011      	movs	r1, r2
   1d8b6:	325c      	adds	r2, #92	; 0x5c
   1d8b8:	315b      	adds	r1, #91	; 0x5b
   1d8ba:	00d2      	lsls	r2, r2, #3
   1d8bc:	2308      	movs	r3, #8
   1d8be:	425b      	negs	r3, r3
   1d8c0:	469c      	mov	ip, r3
   1d8c2:	18b2      	adds	r2, r6, r2
   1d8c4:	4494      	add	ip, r2
   1d8c6:	4663      	mov	r3, ip
   1d8c8:	689a      	ldr	r2, [r3, #8]
   1d8ca:	2303      	movs	r3, #3
   1d8cc:	4698      	mov	r8, r3
   1d8ce:	4594      	cmp	ip, r2
   1d8d0:	d100      	bne.n	1d8d4 <_malloc_r+0x34c>
   1d8d2:	e0ab      	b.n	1da2c <_malloc_r+0x4a4>
   1d8d4:	4643      	mov	r3, r8
   1d8d6:	6851      	ldr	r1, [r2, #4]
   1d8d8:	4399      	bics	r1, r3
   1d8da:	4589      	cmp	r9, r1
   1d8dc:	d300      	bcc.n	1d8e0 <_malloc_r+0x358>
   1d8de:	e095      	b.n	1da0c <_malloc_r+0x484>
   1d8e0:	6892      	ldr	r2, [r2, #8]
   1d8e2:	4594      	cmp	ip, r2
   1d8e4:	d1f6      	bne.n	1d8d4 <_malloc_r+0x34c>
   1d8e6:	4663      	mov	r3, ip
   1d8e8:	68da      	ldr	r2, [r3, #12]
   1d8ea:	6873      	ldr	r3, [r6, #4]
   1d8ec:	4661      	mov	r1, ip
   1d8ee:	60e2      	str	r2, [r4, #12]
   1d8f0:	60a1      	str	r1, [r4, #8]
   1d8f2:	6094      	str	r4, [r2, #8]
   1d8f4:	60cc      	str	r4, [r1, #12]
   1d8f6:	e6b6      	b.n	1d666 <_malloc_r+0xde>
   1d8f8:	2301      	movs	r3, #1
   1d8fa:	1960      	adds	r0, r4, r5
   1d8fc:	431d      	orrs	r5, r3
   1d8fe:	6065      	str	r5, [r4, #4]
   1d900:	6170      	str	r0, [r6, #20]
   1d902:	6130      	str	r0, [r6, #16]
   1d904:	60c2      	str	r2, [r0, #12]
   1d906:	6082      	str	r2, [r0, #8]
   1d908:	001a      	movs	r2, r3
   1d90a:	464b      	mov	r3, r9
   1d90c:	430a      	orrs	r2, r1
   1d90e:	6042      	str	r2, [r0, #4]
   1d910:	0038      	movs	r0, r7
   1d912:	50e1      	str	r1, [r4, r3]
   1d914:	f000 f9dc 	bl	1dcd0 <__malloc_unlock>
   1d918:	0020      	movs	r0, r4
   1d91a:	3008      	adds	r0, #8
   1d91c:	e703      	b.n	1d726 <_malloc_r+0x19e>
   1d91e:	46c0      	nop			; (mov r8, r8)
   1d920:	200006e8 	.word	0x200006e8
   1d924:	000001ff 	.word	0x000001ff
   1d928:	20000af0 	.word	0x20000af0
   1d92c:	20001b58 	.word	0x20001b58
   1d930:	0000100f 	.word	0x0000100f
   1d934:	20001b28 	.word	0x20001b28
   1d938:	00001008 	.word	0x00001008
   1d93c:	20001b50 	.word	0x20001b50
   1d940:	20001b54 	.word	0x20001b54
   1d944:	6873      	ldr	r3, [r6, #4]
   1d946:	e68e      	b.n	1d666 <_malloc_r+0xde>
   1d948:	2308      	movs	r3, #8
   1d94a:	469b      	mov	fp, r3
   1d94c:	3b07      	subs	r3, #7
   1d94e:	44dc      	add	ip, fp
   1d950:	469b      	mov	fp, r3
   1d952:	44da      	add	sl, fp
   1d954:	4643      	mov	r3, r8
   1d956:	4652      	mov	r2, sl
   1d958:	4213      	tst	r3, r2
   1d95a:	d000      	beq.n	1d95e <_malloc_r+0x3d6>
   1d95c:	e697      	b.n	1d68e <_malloc_r+0x106>
   1d95e:	e037      	b.n	1d9d0 <_malloc_r+0x448>
   1d960:	68dc      	ldr	r4, [r3, #12]
   1d962:	3002      	adds	r0, #2
   1d964:	42a3      	cmp	r3, r4
   1d966:	d100      	bne.n	1d96a <_malloc_r+0x3e2>
   1d968:	e655      	b.n	1d616 <_malloc_r+0x8e>
   1d96a:	e6ca      	b.n	1d702 <_malloc_r+0x17a>
   1d96c:	2201      	movs	r2, #1
   1d96e:	18e3      	adds	r3, r4, r3
   1d970:	6859      	ldr	r1, [r3, #4]
   1d972:	0038      	movs	r0, r7
   1d974:	430a      	orrs	r2, r1
   1d976:	605a      	str	r2, [r3, #4]
   1d978:	68e3      	ldr	r3, [r4, #12]
   1d97a:	68a2      	ldr	r2, [r4, #8]
   1d97c:	60d3      	str	r3, [r2, #12]
   1d97e:	609a      	str	r2, [r3, #8]
   1d980:	f000 f9a6 	bl	1dcd0 <__malloc_unlock>
   1d984:	0020      	movs	r0, r4
   1d986:	3008      	adds	r0, #8
   1d988:	e6cd      	b.n	1d726 <_malloc_r+0x19e>
   1d98a:	235b      	movs	r3, #91	; 0x5b
   1d98c:	4698      	mov	r8, r3
   1d98e:	4480      	add	r8, r0
   1d990:	305c      	adds	r0, #92	; 0x5c
   1d992:	00c1      	lsls	r1, r0, #3
   1d994:	e61f      	b.n	1d5d6 <_malloc_r+0x4e>
   1d996:	099a      	lsrs	r2, r3, #6
   1d998:	0011      	movs	r1, r2
   1d99a:	3239      	adds	r2, #57	; 0x39
   1d99c:	3138      	adds	r1, #56	; 0x38
   1d99e:	00d2      	lsls	r2, r2, #3
   1d9a0:	e78c      	b.n	1d8bc <_malloc_r+0x334>
   1d9a2:	42b4      	cmp	r4, r6
   1d9a4:	d000      	beq.n	1d9a8 <_malloc_r+0x420>
   1d9a6:	e75a      	b.n	1d85e <_malloc_r+0x2d6>
   1d9a8:	4b4f      	ldr	r3, [pc, #316]	; (1dae8 <_malloc_r+0x560>)
   1d9aa:	9a00      	ldr	r2, [sp, #0]
   1d9ac:	469a      	mov	sl, r3
   1d9ae:	681b      	ldr	r3, [r3, #0]
   1d9b0:	469c      	mov	ip, r3
   1d9b2:	4653      	mov	r3, sl
   1d9b4:	4462      	add	r2, ip
   1d9b6:	0011      	movs	r1, r2
   1d9b8:	601a      	str	r2, [r3, #0]
   1d9ba:	e6ff      	b.n	1d7bc <_malloc_r+0x234>
   1d9bc:	2308      	movs	r3, #8
   1d9be:	425b      	negs	r3, r3
   1d9c0:	469c      	mov	ip, r3
   1d9c2:	44e1      	add	r9, ip
   1d9c4:	464b      	mov	r3, r9
   1d9c6:	689b      	ldr	r3, [r3, #8]
   1d9c8:	3801      	subs	r0, #1
   1d9ca:	4599      	cmp	r9, r3
   1d9cc:	d000      	beq.n	1d9d0 <_malloc_r+0x448>
   1d9ce:	e084      	b.n	1dada <_malloc_r+0x552>
   1d9d0:	4643      	mov	r3, r8
   1d9d2:	4203      	tst	r3, r0
   1d9d4:	d1f2      	bne.n	1d9bc <_malloc_r+0x434>
   1d9d6:	6873      	ldr	r3, [r6, #4]
   1d9d8:	438b      	bics	r3, r1
   1d9da:	6073      	str	r3, [r6, #4]
   1d9dc:	0049      	lsls	r1, r1, #1
   1d9de:	4299      	cmp	r1, r3
   1d9e0:	d900      	bls.n	1d9e4 <_malloc_r+0x45c>
   1d9e2:	e6b5      	b.n	1d750 <_malloc_r+0x1c8>
   1d9e4:	2900      	cmp	r1, #0
   1d9e6:	d100      	bne.n	1d9ea <_malloc_r+0x462>
   1d9e8:	e6b2      	b.n	1d750 <_malloc_r+0x1c8>
   1d9ea:	4650      	mov	r0, sl
   1d9ec:	420b      	tst	r3, r1
   1d9ee:	d000      	beq.n	1d9f2 <_malloc_r+0x46a>
   1d9f0:	e648      	b.n	1d684 <_malloc_r+0xfc>
   1d9f2:	0049      	lsls	r1, r1, #1
   1d9f4:	3004      	adds	r0, #4
   1d9f6:	420b      	tst	r3, r1
   1d9f8:	d0fb      	beq.n	1d9f2 <_malloc_r+0x46a>
   1d9fa:	e643      	b.n	1d684 <_malloc_r+0xfc>
   1d9fc:	2301      	movs	r3, #1
   1d9fe:	464a      	mov	r2, r9
   1da00:	6053      	str	r3, [r2, #4]
   1da02:	0038      	movs	r0, r7
   1da04:	f000 f964 	bl	1dcd0 <__malloc_unlock>
   1da08:	2000      	movs	r0, #0
   1da0a:	e68c      	b.n	1d726 <_malloc_r+0x19e>
   1da0c:	4694      	mov	ip, r2
   1da0e:	e76a      	b.n	1d8e6 <_malloc_r+0x35e>
   1da10:	23aa      	movs	r3, #170	; 0xaa
   1da12:	005b      	lsls	r3, r3, #1
   1da14:	4298      	cmp	r0, r3
   1da16:	d811      	bhi.n	1da3c <_malloc_r+0x4b4>
   1da18:	3bdd      	subs	r3, #221	; 0xdd
   1da1a:	4698      	mov	r8, r3
   1da1c:	0be8      	lsrs	r0, r5, #15
   1da1e:	4480      	add	r8, r0
   1da20:	3078      	adds	r0, #120	; 0x78
   1da22:	00c1      	lsls	r1, r0, #3
   1da24:	e5d7      	b.n	1d5d6 <_malloc_r+0x4e>
   1da26:	2380      	movs	r3, #128	; 0x80
   1da28:	015b      	lsls	r3, r3, #5
   1da2a:	e6dd      	b.n	1d7e8 <_malloc_r+0x260>
   1da2c:	1089      	asrs	r1, r1, #2
   1da2e:	3b02      	subs	r3, #2
   1da30:	408b      	lsls	r3, r1
   1da32:	6872      	ldr	r2, [r6, #4]
   1da34:	4313      	orrs	r3, r2
   1da36:	6073      	str	r3, [r6, #4]
   1da38:	4662      	mov	r2, ip
   1da3a:	e757      	b.n	1d8ec <_malloc_r+0x364>
   1da3c:	4b2b      	ldr	r3, [pc, #172]	; (1daec <_malloc_r+0x564>)
   1da3e:	4298      	cmp	r0, r3
   1da40:	d81c      	bhi.n	1da7c <_malloc_r+0x4f4>
   1da42:	237c      	movs	r3, #124	; 0x7c
   1da44:	4698      	mov	r8, r3
   1da46:	0ca8      	lsrs	r0, r5, #18
   1da48:	4480      	add	r8, r0
   1da4a:	307d      	adds	r0, #125	; 0x7d
   1da4c:	00c1      	lsls	r1, r0, #3
   1da4e:	e5c2      	b.n	1d5d6 <_malloc_r+0x4e>
   1da50:	3310      	adds	r3, #16
   1da52:	9300      	str	r3, [sp, #0]
   1da54:	e699      	b.n	1d78a <_malloc_r+0x202>
   1da56:	2a54      	cmp	r2, #84	; 0x54
   1da58:	d826      	bhi.n	1daa8 <_malloc_r+0x520>
   1da5a:	464b      	mov	r3, r9
   1da5c:	0b1a      	lsrs	r2, r3, #12
   1da5e:	0011      	movs	r1, r2
   1da60:	326f      	adds	r2, #111	; 0x6f
   1da62:	316e      	adds	r1, #110	; 0x6e
   1da64:	00d2      	lsls	r2, r2, #3
   1da66:	e729      	b.n	1d8bc <_malloc_r+0x334>
   1da68:	051b      	lsls	r3, r3, #20
   1da6a:	d000      	beq.n	1da6e <_malloc_r+0x4e6>
   1da6c:	e6a6      	b.n	1d7bc <_malloc_r+0x234>
   1da6e:	2001      	movs	r0, #1
   1da70:	9b00      	ldr	r3, [sp, #0]
   1da72:	68b2      	ldr	r2, [r6, #8]
   1da74:	4443      	add	r3, r8
   1da76:	4303      	orrs	r3, r0
   1da78:	6053      	str	r3, [r2, #4]
   1da7a:	e6e6      	b.n	1d84a <_malloc_r+0x2c2>
   1da7c:	21fe      	movs	r1, #254	; 0xfe
   1da7e:	237e      	movs	r3, #126	; 0x7e
   1da80:	207f      	movs	r0, #127	; 0x7f
   1da82:	0089      	lsls	r1, r1, #2
   1da84:	4698      	mov	r8, r3
   1da86:	e5a6      	b.n	1d5d6 <_malloc_r+0x4e>
   1da88:	2300      	movs	r3, #0
   1da8a:	2001      	movs	r0, #1
   1da8c:	469b      	mov	fp, r3
   1da8e:	e6bd      	b.n	1d80c <_malloc_r+0x284>
   1da90:	0021      	movs	r1, r4
   1da92:	0038      	movs	r0, r7
   1da94:	3108      	adds	r1, #8
   1da96:	f7ff fa53 	bl	1cf40 <_free_r>
   1da9a:	4653      	mov	r3, sl
   1da9c:	6819      	ldr	r1, [r3, #0]
   1da9e:	e6d4      	b.n	1d84a <_malloc_r+0x2c2>
   1daa0:	465b      	mov	r3, fp
   1daa2:	464a      	mov	r2, r9
   1daa4:	601a      	str	r2, [r3, #0]
   1daa6:	e694      	b.n	1d7d2 <_malloc_r+0x24a>
   1daa8:	21aa      	movs	r1, #170	; 0xaa
   1daaa:	0049      	lsls	r1, r1, #1
   1daac:	428a      	cmp	r2, r1
   1daae:	d806      	bhi.n	1dabe <_malloc_r+0x536>
   1dab0:	464b      	mov	r3, r9
   1dab2:	0bda      	lsrs	r2, r3, #15
   1dab4:	0011      	movs	r1, r2
   1dab6:	3278      	adds	r2, #120	; 0x78
   1dab8:	3177      	adds	r1, #119	; 0x77
   1daba:	00d2      	lsls	r2, r2, #3
   1dabc:	e6fe      	b.n	1d8bc <_malloc_r+0x334>
   1dabe:	490b      	ldr	r1, [pc, #44]	; (1daec <_malloc_r+0x564>)
   1dac0:	428a      	cmp	r2, r1
   1dac2:	d806      	bhi.n	1dad2 <_malloc_r+0x54a>
   1dac4:	464b      	mov	r3, r9
   1dac6:	0c9a      	lsrs	r2, r3, #18
   1dac8:	0011      	movs	r1, r2
   1daca:	327d      	adds	r2, #125	; 0x7d
   1dacc:	317c      	adds	r1, #124	; 0x7c
   1dace:	00d2      	lsls	r2, r2, #3
   1dad0:	e6f4      	b.n	1d8bc <_malloc_r+0x334>
   1dad2:	22fe      	movs	r2, #254	; 0xfe
   1dad4:	217e      	movs	r1, #126	; 0x7e
   1dad6:	0092      	lsls	r2, r2, #2
   1dad8:	e6f0      	b.n	1d8bc <_malloc_r+0x334>
   1dada:	6873      	ldr	r3, [r6, #4]
   1dadc:	e77e      	b.n	1d9dc <_malloc_r+0x454>
   1dade:	002b      	movs	r3, r5
   1dae0:	08e8      	lsrs	r0, r5, #3
   1dae2:	3308      	adds	r3, #8
   1dae4:	e605      	b.n	1d6f2 <_malloc_r+0x16a>
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	20001b28 	.word	0x20001b28
   1daec:	00000554 	.word	0x00000554

0001daf0 <__ascii_mbtowc>:
   1daf0:	b082      	sub	sp, #8
   1daf2:	2900      	cmp	r1, #0
   1daf4:	d00a      	beq.n	1db0c <__ascii_mbtowc+0x1c>
   1daf6:	2a00      	cmp	r2, #0
   1daf8:	d00b      	beq.n	1db12 <__ascii_mbtowc+0x22>
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	d00b      	beq.n	1db16 <__ascii_mbtowc+0x26>
   1dafe:	7813      	ldrb	r3, [r2, #0]
   1db00:	600b      	str	r3, [r1, #0]
   1db02:	7810      	ldrb	r0, [r2, #0]
   1db04:	1e43      	subs	r3, r0, #1
   1db06:	4198      	sbcs	r0, r3
   1db08:	b002      	add	sp, #8
   1db0a:	4770      	bx	lr
   1db0c:	a901      	add	r1, sp, #4
   1db0e:	2a00      	cmp	r2, #0
   1db10:	d1f3      	bne.n	1dafa <__ascii_mbtowc+0xa>
   1db12:	2000      	movs	r0, #0
   1db14:	e7f8      	b.n	1db08 <__ascii_mbtowc+0x18>
   1db16:	2002      	movs	r0, #2
   1db18:	4240      	negs	r0, r0
   1db1a:	e7f5      	b.n	1db08 <__ascii_mbtowc+0x18>

0001db1c <memchr>:
   1db1c:	b570      	push	{r4, r5, r6, lr}
   1db1e:	b2cd      	uxtb	r5, r1
   1db20:	0783      	lsls	r3, r0, #30
   1db22:	d034      	beq.n	1db8e <memchr+0x72>
   1db24:	1e54      	subs	r4, r2, #1
   1db26:	2a00      	cmp	r2, #0
   1db28:	d01b      	beq.n	1db62 <memchr+0x46>
   1db2a:	7803      	ldrb	r3, [r0, #0]
   1db2c:	42ab      	cmp	r3, r5
   1db2e:	d019      	beq.n	1db64 <memchr+0x48>
   1db30:	2203      	movs	r2, #3
   1db32:	e004      	b.n	1db3e <memchr+0x22>
   1db34:	3c01      	subs	r4, #1
   1db36:	d314      	bcc.n	1db62 <memchr+0x46>
   1db38:	7803      	ldrb	r3, [r0, #0]
   1db3a:	42ab      	cmp	r3, r5
   1db3c:	d012      	beq.n	1db64 <memchr+0x48>
   1db3e:	3001      	adds	r0, #1
   1db40:	4210      	tst	r0, r2
   1db42:	d1f7      	bne.n	1db34 <memchr+0x18>
   1db44:	2c03      	cmp	r4, #3
   1db46:	d80e      	bhi.n	1db66 <memchr+0x4a>
   1db48:	2c00      	cmp	r4, #0
   1db4a:	d00a      	beq.n	1db62 <memchr+0x46>
   1db4c:	7803      	ldrb	r3, [r0, #0]
   1db4e:	42ab      	cmp	r3, r5
   1db50:	d008      	beq.n	1db64 <memchr+0x48>
   1db52:	1904      	adds	r4, r0, r4
   1db54:	e002      	b.n	1db5c <memchr+0x40>
   1db56:	7803      	ldrb	r3, [r0, #0]
   1db58:	42ab      	cmp	r3, r5
   1db5a:	d003      	beq.n	1db64 <memchr+0x48>
   1db5c:	3001      	adds	r0, #1
   1db5e:	4284      	cmp	r4, r0
   1db60:	d1f9      	bne.n	1db56 <memchr+0x3a>
   1db62:	2000      	movs	r0, #0
   1db64:	bd70      	pop	{r4, r5, r6, pc}
   1db66:	22ff      	movs	r2, #255	; 0xff
   1db68:	060b      	lsls	r3, r1, #24
   1db6a:	0c1b      	lsrs	r3, r3, #16
   1db6c:	4011      	ands	r1, r2
   1db6e:	4319      	orrs	r1, r3
   1db70:	040b      	lsls	r3, r1, #16
   1db72:	4e08      	ldr	r6, [pc, #32]	; (1db94 <memchr+0x78>)
   1db74:	4319      	orrs	r1, r3
   1db76:	6803      	ldr	r3, [r0, #0]
   1db78:	4a07      	ldr	r2, [pc, #28]	; (1db98 <memchr+0x7c>)
   1db7a:	404b      	eors	r3, r1
   1db7c:	189a      	adds	r2, r3, r2
   1db7e:	439a      	bics	r2, r3
   1db80:	4232      	tst	r2, r6
   1db82:	d1e3      	bne.n	1db4c <memchr+0x30>
   1db84:	3c04      	subs	r4, #4
   1db86:	3004      	adds	r0, #4
   1db88:	2c03      	cmp	r4, #3
   1db8a:	d8f4      	bhi.n	1db76 <memchr+0x5a>
   1db8c:	e7dc      	b.n	1db48 <memchr+0x2c>
   1db8e:	0014      	movs	r4, r2
   1db90:	e7d8      	b.n	1db44 <memchr+0x28>
   1db92:	46c0      	nop			; (mov r8, r8)
   1db94:	80808080 	.word	0x80808080
   1db98:	fefefeff 	.word	0xfefefeff

0001db9c <memcpy>:
   1db9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db9e:	0005      	movs	r5, r0
   1dba0:	2a0f      	cmp	r2, #15
   1dba2:	d92f      	bls.n	1dc04 <memcpy+0x68>
   1dba4:	000b      	movs	r3, r1
   1dba6:	4303      	orrs	r3, r0
   1dba8:	079b      	lsls	r3, r3, #30
   1dbaa:	d134      	bne.n	1dc16 <memcpy+0x7a>
   1dbac:	0016      	movs	r6, r2
   1dbae:	000c      	movs	r4, r1
   1dbb0:	0003      	movs	r3, r0
   1dbb2:	3e10      	subs	r6, #16
   1dbb4:	0935      	lsrs	r5, r6, #4
   1dbb6:	3501      	adds	r5, #1
   1dbb8:	012d      	lsls	r5, r5, #4
   1dbba:	1945      	adds	r5, r0, r5
   1dbbc:	6827      	ldr	r7, [r4, #0]
   1dbbe:	601f      	str	r7, [r3, #0]
   1dbc0:	6867      	ldr	r7, [r4, #4]
   1dbc2:	605f      	str	r7, [r3, #4]
   1dbc4:	68a7      	ldr	r7, [r4, #8]
   1dbc6:	609f      	str	r7, [r3, #8]
   1dbc8:	68e7      	ldr	r7, [r4, #12]
   1dbca:	3410      	adds	r4, #16
   1dbcc:	60df      	str	r7, [r3, #12]
   1dbce:	3310      	adds	r3, #16
   1dbd0:	429d      	cmp	r5, r3
   1dbd2:	d1f3      	bne.n	1dbbc <memcpy+0x20>
   1dbd4:	230f      	movs	r3, #15
   1dbd6:	439e      	bics	r6, r3
   1dbd8:	3610      	adds	r6, #16
   1dbda:	1985      	adds	r5, r0, r6
   1dbdc:	1989      	adds	r1, r1, r6
   1dbde:	4013      	ands	r3, r2
   1dbe0:	2b03      	cmp	r3, #3
   1dbe2:	d91a      	bls.n	1dc1a <memcpy+0x7e>
   1dbe4:	1f1e      	subs	r6, r3, #4
   1dbe6:	2300      	movs	r3, #0
   1dbe8:	08b4      	lsrs	r4, r6, #2
   1dbea:	3401      	adds	r4, #1
   1dbec:	00a4      	lsls	r4, r4, #2
   1dbee:	58cf      	ldr	r7, [r1, r3]
   1dbf0:	50ef      	str	r7, [r5, r3]
   1dbf2:	3304      	adds	r3, #4
   1dbf4:	42a3      	cmp	r3, r4
   1dbf6:	d1fa      	bne.n	1dbee <memcpy+0x52>
   1dbf8:	2403      	movs	r4, #3
   1dbfa:	43a6      	bics	r6, r4
   1dbfc:	1d33      	adds	r3, r6, #4
   1dbfe:	4022      	ands	r2, r4
   1dc00:	18c9      	adds	r1, r1, r3
   1dc02:	18ed      	adds	r5, r5, r3
   1dc04:	2a00      	cmp	r2, #0
   1dc06:	d005      	beq.n	1dc14 <memcpy+0x78>
   1dc08:	2300      	movs	r3, #0
   1dc0a:	5ccc      	ldrb	r4, [r1, r3]
   1dc0c:	54ec      	strb	r4, [r5, r3]
   1dc0e:	3301      	adds	r3, #1
   1dc10:	4293      	cmp	r3, r2
   1dc12:	d1fa      	bne.n	1dc0a <memcpy+0x6e>
   1dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc16:	0005      	movs	r5, r0
   1dc18:	e7f6      	b.n	1dc08 <memcpy+0x6c>
   1dc1a:	001a      	movs	r2, r3
   1dc1c:	e7f2      	b.n	1dc04 <memcpy+0x68>
   1dc1e:	46c0      	nop			; (mov r8, r8)

0001dc20 <memmove>:
   1dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc22:	4288      	cmp	r0, r1
   1dc24:	d90a      	bls.n	1dc3c <memmove+0x1c>
   1dc26:	188b      	adds	r3, r1, r2
   1dc28:	4298      	cmp	r0, r3
   1dc2a:	d207      	bcs.n	1dc3c <memmove+0x1c>
   1dc2c:	1e53      	subs	r3, r2, #1
   1dc2e:	2a00      	cmp	r2, #0
   1dc30:	d003      	beq.n	1dc3a <memmove+0x1a>
   1dc32:	5cca      	ldrb	r2, [r1, r3]
   1dc34:	54c2      	strb	r2, [r0, r3]
   1dc36:	3b01      	subs	r3, #1
   1dc38:	d2fb      	bcs.n	1dc32 <memmove+0x12>
   1dc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc3c:	0005      	movs	r5, r0
   1dc3e:	2a0f      	cmp	r2, #15
   1dc40:	d808      	bhi.n	1dc54 <memmove+0x34>
   1dc42:	2a00      	cmp	r2, #0
   1dc44:	d0f9      	beq.n	1dc3a <memmove+0x1a>
   1dc46:	2300      	movs	r3, #0
   1dc48:	5ccc      	ldrb	r4, [r1, r3]
   1dc4a:	54ec      	strb	r4, [r5, r3]
   1dc4c:	3301      	adds	r3, #1
   1dc4e:	4293      	cmp	r3, r2
   1dc50:	d1fa      	bne.n	1dc48 <memmove+0x28>
   1dc52:	e7f2      	b.n	1dc3a <memmove+0x1a>
   1dc54:	000b      	movs	r3, r1
   1dc56:	4303      	orrs	r3, r0
   1dc58:	079b      	lsls	r3, r3, #30
   1dc5a:	d12d      	bne.n	1dcb8 <memmove+0x98>
   1dc5c:	0015      	movs	r5, r2
   1dc5e:	000c      	movs	r4, r1
   1dc60:	0003      	movs	r3, r0
   1dc62:	3d10      	subs	r5, #16
   1dc64:	092f      	lsrs	r7, r5, #4
   1dc66:	3701      	adds	r7, #1
   1dc68:	013f      	lsls	r7, r7, #4
   1dc6a:	19c7      	adds	r7, r0, r7
   1dc6c:	6826      	ldr	r6, [r4, #0]
   1dc6e:	601e      	str	r6, [r3, #0]
   1dc70:	6866      	ldr	r6, [r4, #4]
   1dc72:	605e      	str	r6, [r3, #4]
   1dc74:	68a6      	ldr	r6, [r4, #8]
   1dc76:	609e      	str	r6, [r3, #8]
   1dc78:	68e6      	ldr	r6, [r4, #12]
   1dc7a:	3410      	adds	r4, #16
   1dc7c:	60de      	str	r6, [r3, #12]
   1dc7e:	3310      	adds	r3, #16
   1dc80:	429f      	cmp	r7, r3
   1dc82:	d1f3      	bne.n	1dc6c <memmove+0x4c>
   1dc84:	240f      	movs	r4, #15
   1dc86:	43a5      	bics	r5, r4
   1dc88:	3510      	adds	r5, #16
   1dc8a:	1949      	adds	r1, r1, r5
   1dc8c:	4014      	ands	r4, r2
   1dc8e:	1945      	adds	r5, r0, r5
   1dc90:	2c03      	cmp	r4, #3
   1dc92:	d913      	bls.n	1dcbc <memmove+0x9c>
   1dc94:	2300      	movs	r3, #0
   1dc96:	1f27      	subs	r7, r4, #4
   1dc98:	08be      	lsrs	r6, r7, #2
   1dc9a:	3601      	adds	r6, #1
   1dc9c:	00b6      	lsls	r6, r6, #2
   1dc9e:	58cc      	ldr	r4, [r1, r3]
   1dca0:	50ec      	str	r4, [r5, r3]
   1dca2:	3304      	adds	r3, #4
   1dca4:	42b3      	cmp	r3, r6
   1dca6:	d1fa      	bne.n	1dc9e <memmove+0x7e>
   1dca8:	2603      	movs	r6, #3
   1dcaa:	43b7      	bics	r7, r6
   1dcac:	1d3c      	adds	r4, r7, #4
   1dcae:	1909      	adds	r1, r1, r4
   1dcb0:	192d      	adds	r5, r5, r4
   1dcb2:	4032      	ands	r2, r6
   1dcb4:	d1c7      	bne.n	1dc46 <memmove+0x26>
   1dcb6:	e7c0      	b.n	1dc3a <memmove+0x1a>
   1dcb8:	0005      	movs	r5, r0
   1dcba:	e7c4      	b.n	1dc46 <memmove+0x26>
   1dcbc:	0022      	movs	r2, r4
   1dcbe:	e7c0      	b.n	1dc42 <memmove+0x22>

0001dcc0 <__malloc_lock>:
   1dcc0:	b510      	push	{r4, lr}
   1dcc2:	4802      	ldr	r0, [pc, #8]	; (1dccc <__malloc_lock+0xc>)
   1dcc4:	f7ff fbe4 	bl	1d490 <__retarget_lock_acquire_recursive>
   1dcc8:	bd10      	pop	{r4, pc}
   1dcca:	46c0      	nop			; (mov r8, r8)
   1dccc:	20001ddc 	.word	0x20001ddc

0001dcd0 <__malloc_unlock>:
   1dcd0:	b510      	push	{r4, lr}
   1dcd2:	4802      	ldr	r0, [pc, #8]	; (1dcdc <__malloc_unlock+0xc>)
   1dcd4:	f7ff fbde 	bl	1d494 <__retarget_lock_release_recursive>
   1dcd8:	bd10      	pop	{r4, pc}
   1dcda:	46c0      	nop			; (mov r8, r8)
   1dcdc:	20001ddc 	.word	0x20001ddc

0001dce0 <_Balloc>:
   1dce0:	b570      	push	{r4, r5, r6, lr}
   1dce2:	0004      	movs	r4, r0
   1dce4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1dce6:	000d      	movs	r5, r1
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d00a      	beq.n	1dd02 <_Balloc+0x22>
   1dcec:	00ab      	lsls	r3, r5, #2
   1dcee:	18c3      	adds	r3, r0, r3
   1dcf0:	6818      	ldr	r0, [r3, #0]
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d00f      	beq.n	1dd16 <_Balloc+0x36>
   1dcf6:	6802      	ldr	r2, [r0, #0]
   1dcf8:	601a      	str	r2, [r3, #0]
   1dcfa:	2300      	movs	r3, #0
   1dcfc:	6103      	str	r3, [r0, #16]
   1dcfe:	60c3      	str	r3, [r0, #12]
   1dd00:	bd70      	pop	{r4, r5, r6, pc}
   1dd02:	2221      	movs	r2, #33	; 0x21
   1dd04:	2104      	movs	r1, #4
   1dd06:	0020      	movs	r0, r4
   1dd08:	f000 fe38 	bl	1e97c <_calloc_r>
   1dd0c:	64e0      	str	r0, [r4, #76]	; 0x4c
   1dd0e:	2800      	cmp	r0, #0
   1dd10:	d1ec      	bne.n	1dcec <_Balloc+0xc>
   1dd12:	2000      	movs	r0, #0
   1dd14:	e7f4      	b.n	1dd00 <_Balloc+0x20>
   1dd16:	2601      	movs	r6, #1
   1dd18:	40ae      	lsls	r6, r5
   1dd1a:	1d72      	adds	r2, r6, #5
   1dd1c:	0092      	lsls	r2, r2, #2
   1dd1e:	2101      	movs	r1, #1
   1dd20:	0020      	movs	r0, r4
   1dd22:	f000 fe2b 	bl	1e97c <_calloc_r>
   1dd26:	2800      	cmp	r0, #0
   1dd28:	d0f3      	beq.n	1dd12 <_Balloc+0x32>
   1dd2a:	6045      	str	r5, [r0, #4]
   1dd2c:	6086      	str	r6, [r0, #8]
   1dd2e:	e7e4      	b.n	1dcfa <_Balloc+0x1a>

0001dd30 <_Bfree>:
   1dd30:	2900      	cmp	r1, #0
   1dd32:	d006      	beq.n	1dd42 <_Bfree+0x12>
   1dd34:	684b      	ldr	r3, [r1, #4]
   1dd36:	009a      	lsls	r2, r3, #2
   1dd38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1dd3a:	189b      	adds	r3, r3, r2
   1dd3c:	681a      	ldr	r2, [r3, #0]
   1dd3e:	600a      	str	r2, [r1, #0]
   1dd40:	6019      	str	r1, [r3, #0]
   1dd42:	4770      	bx	lr

0001dd44 <__multadd>:
   1dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd46:	46ce      	mov	lr, r9
   1dd48:	4647      	mov	r7, r8
   1dd4a:	4681      	mov	r9, r0
   1dd4c:	0008      	movs	r0, r1
   1dd4e:	b580      	push	{r7, lr}
   1dd50:	000d      	movs	r5, r1
   1dd52:	690c      	ldr	r4, [r1, #16]
   1dd54:	001f      	movs	r7, r3
   1dd56:	2100      	movs	r1, #0
   1dd58:	3014      	adds	r0, #20
   1dd5a:	6803      	ldr	r3, [r0, #0]
   1dd5c:	3101      	adds	r1, #1
   1dd5e:	041e      	lsls	r6, r3, #16
   1dd60:	0c36      	lsrs	r6, r6, #16
   1dd62:	4356      	muls	r6, r2
   1dd64:	0c1b      	lsrs	r3, r3, #16
   1dd66:	4353      	muls	r3, r2
   1dd68:	19f6      	adds	r6, r6, r7
   1dd6a:	0c37      	lsrs	r7, r6, #16
   1dd6c:	19db      	adds	r3, r3, r7
   1dd6e:	0436      	lsls	r6, r6, #16
   1dd70:	0c1f      	lsrs	r7, r3, #16
   1dd72:	0c36      	lsrs	r6, r6, #16
   1dd74:	041b      	lsls	r3, r3, #16
   1dd76:	199b      	adds	r3, r3, r6
   1dd78:	c008      	stmia	r0!, {r3}
   1dd7a:	428c      	cmp	r4, r1
   1dd7c:	dced      	bgt.n	1dd5a <__multadd+0x16>
   1dd7e:	2f00      	cmp	r7, #0
   1dd80:	d008      	beq.n	1dd94 <__multadd+0x50>
   1dd82:	68ab      	ldr	r3, [r5, #8]
   1dd84:	429c      	cmp	r4, r3
   1dd86:	da0a      	bge.n	1dd9e <__multadd+0x5a>
   1dd88:	1d23      	adds	r3, r4, #4
   1dd8a:	009b      	lsls	r3, r3, #2
   1dd8c:	18eb      	adds	r3, r5, r3
   1dd8e:	3401      	adds	r4, #1
   1dd90:	605f      	str	r7, [r3, #4]
   1dd92:	612c      	str	r4, [r5, #16]
   1dd94:	0028      	movs	r0, r5
   1dd96:	bc0c      	pop	{r2, r3}
   1dd98:	4690      	mov	r8, r2
   1dd9a:	4699      	mov	r9, r3
   1dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd9e:	686b      	ldr	r3, [r5, #4]
   1dda0:	4648      	mov	r0, r9
   1dda2:	1c59      	adds	r1, r3, #1
   1dda4:	f7ff ff9c 	bl	1dce0 <_Balloc>
   1dda8:	0029      	movs	r1, r5
   1ddaa:	692b      	ldr	r3, [r5, #16]
   1ddac:	4680      	mov	r8, r0
   1ddae:	1c9a      	adds	r2, r3, #2
   1ddb0:	0092      	lsls	r2, r2, #2
   1ddb2:	310c      	adds	r1, #12
   1ddb4:	300c      	adds	r0, #12
   1ddb6:	f7ff fef1 	bl	1db9c <memcpy>
   1ddba:	686b      	ldr	r3, [r5, #4]
   1ddbc:	009a      	lsls	r2, r3, #2
   1ddbe:	464b      	mov	r3, r9
   1ddc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ddc2:	189b      	adds	r3, r3, r2
   1ddc4:	681a      	ldr	r2, [r3, #0]
   1ddc6:	602a      	str	r2, [r5, #0]
   1ddc8:	601d      	str	r5, [r3, #0]
   1ddca:	4645      	mov	r5, r8
   1ddcc:	e7dc      	b.n	1dd88 <__multadd+0x44>
   1ddce:	46c0      	nop			; (mov r8, r8)

0001ddd0 <__hi0bits>:
   1ddd0:	0003      	movs	r3, r0
   1ddd2:	0c02      	lsrs	r2, r0, #16
   1ddd4:	2000      	movs	r0, #0
   1ddd6:	2a00      	cmp	r2, #0
   1ddd8:	d101      	bne.n	1ddde <__hi0bits+0xe>
   1ddda:	041b      	lsls	r3, r3, #16
   1dddc:	3010      	adds	r0, #16
   1ddde:	0e1a      	lsrs	r2, r3, #24
   1dde0:	d101      	bne.n	1dde6 <__hi0bits+0x16>
   1dde2:	3008      	adds	r0, #8
   1dde4:	021b      	lsls	r3, r3, #8
   1dde6:	0f1a      	lsrs	r2, r3, #28
   1dde8:	d101      	bne.n	1ddee <__hi0bits+0x1e>
   1ddea:	3004      	adds	r0, #4
   1ddec:	011b      	lsls	r3, r3, #4
   1ddee:	0f9a      	lsrs	r2, r3, #30
   1ddf0:	d101      	bne.n	1ddf6 <__hi0bits+0x26>
   1ddf2:	3002      	adds	r0, #2
   1ddf4:	009b      	lsls	r3, r3, #2
   1ddf6:	2b00      	cmp	r3, #0
   1ddf8:	db03      	blt.n	1de02 <__hi0bits+0x32>
   1ddfa:	3001      	adds	r0, #1
   1ddfc:	005b      	lsls	r3, r3, #1
   1ddfe:	d400      	bmi.n	1de02 <__hi0bits+0x32>
   1de00:	2020      	movs	r0, #32
   1de02:	4770      	bx	lr

0001de04 <__lo0bits>:
   1de04:	6803      	ldr	r3, [r0, #0]
   1de06:	075a      	lsls	r2, r3, #29
   1de08:	d009      	beq.n	1de1e <__lo0bits+0x1a>
   1de0a:	2200      	movs	r2, #0
   1de0c:	07d9      	lsls	r1, r3, #31
   1de0e:	d404      	bmi.n	1de1a <__lo0bits+0x16>
   1de10:	079a      	lsls	r2, r3, #30
   1de12:	d420      	bmi.n	1de56 <__lo0bits+0x52>
   1de14:	2202      	movs	r2, #2
   1de16:	089b      	lsrs	r3, r3, #2
   1de18:	6003      	str	r3, [r0, #0]
   1de1a:	0010      	movs	r0, r2
   1de1c:	4770      	bx	lr
   1de1e:	0419      	lsls	r1, r3, #16
   1de20:	2200      	movs	r2, #0
   1de22:	2900      	cmp	r1, #0
   1de24:	d101      	bne.n	1de2a <__lo0bits+0x26>
   1de26:	0c1b      	lsrs	r3, r3, #16
   1de28:	3210      	adds	r2, #16
   1de2a:	21ff      	movs	r1, #255	; 0xff
   1de2c:	4219      	tst	r1, r3
   1de2e:	d101      	bne.n	1de34 <__lo0bits+0x30>
   1de30:	3208      	adds	r2, #8
   1de32:	0a1b      	lsrs	r3, r3, #8
   1de34:	0719      	lsls	r1, r3, #28
   1de36:	d101      	bne.n	1de3c <__lo0bits+0x38>
   1de38:	3204      	adds	r2, #4
   1de3a:	091b      	lsrs	r3, r3, #4
   1de3c:	0799      	lsls	r1, r3, #30
   1de3e:	d101      	bne.n	1de44 <__lo0bits+0x40>
   1de40:	3202      	adds	r2, #2
   1de42:	089b      	lsrs	r3, r3, #2
   1de44:	07d9      	lsls	r1, r3, #31
   1de46:	d404      	bmi.n	1de52 <__lo0bits+0x4e>
   1de48:	085b      	lsrs	r3, r3, #1
   1de4a:	d101      	bne.n	1de50 <__lo0bits+0x4c>
   1de4c:	2220      	movs	r2, #32
   1de4e:	e7e4      	b.n	1de1a <__lo0bits+0x16>
   1de50:	3201      	adds	r2, #1
   1de52:	6003      	str	r3, [r0, #0]
   1de54:	e7e1      	b.n	1de1a <__lo0bits+0x16>
   1de56:	085b      	lsrs	r3, r3, #1
   1de58:	6003      	str	r3, [r0, #0]
   1de5a:	2201      	movs	r2, #1
   1de5c:	e7dd      	b.n	1de1a <__lo0bits+0x16>
   1de5e:	46c0      	nop			; (mov r8, r8)

0001de60 <__i2b>:
   1de60:	b510      	push	{r4, lr}
   1de62:	000c      	movs	r4, r1
   1de64:	2101      	movs	r1, #1
   1de66:	f7ff ff3b 	bl	1dce0 <_Balloc>
   1de6a:	2301      	movs	r3, #1
   1de6c:	6144      	str	r4, [r0, #20]
   1de6e:	6103      	str	r3, [r0, #16]
   1de70:	bd10      	pop	{r4, pc}
   1de72:	46c0      	nop			; (mov r8, r8)

0001de74 <__multiply>:
   1de74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de76:	4657      	mov	r7, sl
   1de78:	464e      	mov	r6, r9
   1de7a:	4645      	mov	r5, r8
   1de7c:	46de      	mov	lr, fp
   1de7e:	b5e0      	push	{r5, r6, r7, lr}
   1de80:	6914      	ldr	r4, [r2, #16]
   1de82:	690e      	ldr	r6, [r1, #16]
   1de84:	b085      	sub	sp, #20
   1de86:	000f      	movs	r7, r1
   1de88:	0015      	movs	r5, r2
   1de8a:	42a6      	cmp	r6, r4
   1de8c:	da04      	bge.n	1de98 <__multiply+0x24>
   1de8e:	0033      	movs	r3, r6
   1de90:	0017      	movs	r7, r2
   1de92:	0026      	movs	r6, r4
   1de94:	000d      	movs	r5, r1
   1de96:	001c      	movs	r4, r3
   1de98:	1933      	adds	r3, r6, r4
   1de9a:	4698      	mov	r8, r3
   1de9c:	68bb      	ldr	r3, [r7, #8]
   1de9e:	6879      	ldr	r1, [r7, #4]
   1dea0:	4598      	cmp	r8, r3
   1dea2:	dd00      	ble.n	1dea6 <__multiply+0x32>
   1dea4:	3101      	adds	r1, #1
   1dea6:	f7ff ff1b 	bl	1dce0 <_Balloc>
   1deaa:	2214      	movs	r2, #20
   1deac:	0003      	movs	r3, r0
   1deae:	4694      	mov	ip, r2
   1deb0:	4463      	add	r3, ip
   1deb2:	469b      	mov	fp, r3
   1deb4:	4643      	mov	r3, r8
   1deb6:	009b      	lsls	r3, r3, #2
   1deb8:	445b      	add	r3, fp
   1deba:	0019      	movs	r1, r3
   1debc:	9302      	str	r3, [sp, #8]
   1debe:	9003      	str	r0, [sp, #12]
   1dec0:	465b      	mov	r3, fp
   1dec2:	2200      	movs	r2, #0
   1dec4:	458b      	cmp	fp, r1
   1dec6:	d203      	bcs.n	1ded0 <__multiply+0x5c>
   1dec8:	9902      	ldr	r1, [sp, #8]
   1deca:	c304      	stmia	r3!, {r2}
   1decc:	4299      	cmp	r1, r3
   1dece:	d8fc      	bhi.n	1deca <__multiply+0x56>
   1ded0:	2314      	movs	r3, #20
   1ded2:	00a4      	lsls	r4, r4, #2
   1ded4:	469a      	mov	sl, r3
   1ded6:	3714      	adds	r7, #20
   1ded8:	0023      	movs	r3, r4
   1deda:	46bc      	mov	ip, r7
   1dedc:	44aa      	add	sl, r5
   1dede:	00b6      	lsls	r6, r6, #2
   1dee0:	4453      	add	r3, sl
   1dee2:	9700      	str	r7, [sp, #0]
   1dee4:	44b4      	add	ip, r6
   1dee6:	9301      	str	r3, [sp, #4]
   1dee8:	459a      	cmp	sl, r3
   1deea:	d24f      	bcs.n	1df8c <__multiply+0x118>
   1deec:	4653      	mov	r3, sl
   1deee:	681b      	ldr	r3, [r3, #0]
   1def0:	041e      	lsls	r6, r3, #16
   1def2:	0c36      	lsrs	r6, r6, #16
   1def4:	d020      	beq.n	1df38 <__multiply+0xc4>
   1def6:	465c      	mov	r4, fp
   1def8:	2700      	movs	r7, #0
   1defa:	9d00      	ldr	r5, [sp, #0]
   1defc:	0021      	movs	r1, r4
   1defe:	cc08      	ldmia	r4!, {r3}
   1df00:	cd04      	ldmia	r5!, {r2}
   1df02:	4699      	mov	r9, r3
   1df04:	4648      	mov	r0, r9
   1df06:	0413      	lsls	r3, r2, #16
   1df08:	0c1b      	lsrs	r3, r3, #16
   1df0a:	4373      	muls	r3, r6
   1df0c:	0400      	lsls	r0, r0, #16
   1df0e:	0c00      	lsrs	r0, r0, #16
   1df10:	181b      	adds	r3, r3, r0
   1df12:	19d8      	adds	r0, r3, r7
   1df14:	0c13      	lsrs	r3, r2, #16
   1df16:	464a      	mov	r2, r9
   1df18:	4373      	muls	r3, r6
   1df1a:	0c12      	lsrs	r2, r2, #16
   1df1c:	189b      	adds	r3, r3, r2
   1df1e:	0c02      	lsrs	r2, r0, #16
   1df20:	189b      	adds	r3, r3, r2
   1df22:	0402      	lsls	r2, r0, #16
   1df24:	0c1f      	lsrs	r7, r3, #16
   1df26:	0c12      	lsrs	r2, r2, #16
   1df28:	041b      	lsls	r3, r3, #16
   1df2a:	4313      	orrs	r3, r2
   1df2c:	600b      	str	r3, [r1, #0]
   1df2e:	45ac      	cmp	ip, r5
   1df30:	d8e4      	bhi.n	1defc <__multiply+0x88>
   1df32:	4653      	mov	r3, sl
   1df34:	6027      	str	r7, [r4, #0]
   1df36:	681b      	ldr	r3, [r3, #0]
   1df38:	0c1e      	lsrs	r6, r3, #16
   1df3a:	d020      	beq.n	1df7e <__multiply+0x10a>
   1df3c:	465b      	mov	r3, fp
   1df3e:	2100      	movs	r1, #0
   1df40:	681b      	ldr	r3, [r3, #0]
   1df42:	465c      	mov	r4, fp
   1df44:	0018      	movs	r0, r3
   1df46:	000f      	movs	r7, r1
   1df48:	4662      	mov	r2, ip
   1df4a:	9d00      	ldr	r5, [sp, #0]
   1df4c:	8829      	ldrh	r1, [r5, #0]
   1df4e:	0c00      	lsrs	r0, r0, #16
   1df50:	4371      	muls	r1, r6
   1df52:	1809      	adds	r1, r1, r0
   1df54:	19c9      	adds	r1, r1, r7
   1df56:	041b      	lsls	r3, r3, #16
   1df58:	0408      	lsls	r0, r1, #16
   1df5a:	0c1b      	lsrs	r3, r3, #16
   1df5c:	4303      	orrs	r3, r0
   1df5e:	6023      	str	r3, [r4, #0]
   1df60:	cd08      	ldmia	r5!, {r3}
   1df62:	6860      	ldr	r0, [r4, #4]
   1df64:	0c1b      	lsrs	r3, r3, #16
   1df66:	4373      	muls	r3, r6
   1df68:	0407      	lsls	r7, r0, #16
   1df6a:	0c3f      	lsrs	r7, r7, #16
   1df6c:	19db      	adds	r3, r3, r7
   1df6e:	0c09      	lsrs	r1, r1, #16
   1df70:	185b      	adds	r3, r3, r1
   1df72:	0c1f      	lsrs	r7, r3, #16
   1df74:	3404      	adds	r4, #4
   1df76:	42aa      	cmp	r2, r5
   1df78:	d8e8      	bhi.n	1df4c <__multiply+0xd8>
   1df7a:	4694      	mov	ip, r2
   1df7c:	6023      	str	r3, [r4, #0]
   1df7e:	2304      	movs	r3, #4
   1df80:	4699      	mov	r9, r3
   1df82:	9b01      	ldr	r3, [sp, #4]
   1df84:	44ca      	add	sl, r9
   1df86:	44cb      	add	fp, r9
   1df88:	4553      	cmp	r3, sl
   1df8a:	d8af      	bhi.n	1deec <__multiply+0x78>
   1df8c:	4643      	mov	r3, r8
   1df8e:	2b00      	cmp	r3, #0
   1df90:	dd0e      	ble.n	1dfb0 <__multiply+0x13c>
   1df92:	9b02      	ldr	r3, [sp, #8]
   1df94:	3b04      	subs	r3, #4
   1df96:	681a      	ldr	r2, [r3, #0]
   1df98:	2a00      	cmp	r2, #0
   1df9a:	d109      	bne.n	1dfb0 <__multiply+0x13c>
   1df9c:	4642      	mov	r2, r8
   1df9e:	e003      	b.n	1dfa8 <__multiply+0x134>
   1dfa0:	3b04      	subs	r3, #4
   1dfa2:	6819      	ldr	r1, [r3, #0]
   1dfa4:	2900      	cmp	r1, #0
   1dfa6:	d102      	bne.n	1dfae <__multiply+0x13a>
   1dfa8:	3a01      	subs	r2, #1
   1dfaa:	2a00      	cmp	r2, #0
   1dfac:	d1f8      	bne.n	1dfa0 <__multiply+0x12c>
   1dfae:	4690      	mov	r8, r2
   1dfb0:	9b03      	ldr	r3, [sp, #12]
   1dfb2:	4642      	mov	r2, r8
   1dfb4:	0018      	movs	r0, r3
   1dfb6:	611a      	str	r2, [r3, #16]
   1dfb8:	b005      	add	sp, #20
   1dfba:	bc3c      	pop	{r2, r3, r4, r5}
   1dfbc:	4690      	mov	r8, r2
   1dfbe:	4699      	mov	r9, r3
   1dfc0:	46a2      	mov	sl, r4
   1dfc2:	46ab      	mov	fp, r5
   1dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dfc6:	46c0      	nop			; (mov r8, r8)

0001dfc8 <__pow5mult>:
   1dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfca:	4647      	mov	r7, r8
   1dfcc:	46ce      	mov	lr, r9
   1dfce:	2303      	movs	r3, #3
   1dfd0:	b580      	push	{r7, lr}
   1dfd2:	4680      	mov	r8, r0
   1dfd4:	000f      	movs	r7, r1
   1dfd6:	0014      	movs	r4, r2
   1dfd8:	4013      	ands	r3, r2
   1dfda:	d13a      	bne.n	1e052 <__pow5mult+0x8a>
   1dfdc:	10a4      	asrs	r4, r4, #2
   1dfde:	003e      	movs	r6, r7
   1dfe0:	2c00      	cmp	r4, #0
   1dfe2:	d025      	beq.n	1e030 <__pow5mult+0x68>
   1dfe4:	4643      	mov	r3, r8
   1dfe6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1dfe8:	2d00      	cmp	r5, #0
   1dfea:	d03b      	beq.n	1e064 <__pow5mult+0x9c>
   1dfec:	003e      	movs	r6, r7
   1dfee:	2300      	movs	r3, #0
   1dff0:	2701      	movs	r7, #1
   1dff2:	4699      	mov	r9, r3
   1dff4:	4227      	tst	r7, r4
   1dff6:	d107      	bne.n	1e008 <__pow5mult+0x40>
   1dff8:	1064      	asrs	r4, r4, #1
   1dffa:	d019      	beq.n	1e030 <__pow5mult+0x68>
   1dffc:	6828      	ldr	r0, [r5, #0]
   1dffe:	2800      	cmp	r0, #0
   1e000:	d01b      	beq.n	1e03a <__pow5mult+0x72>
   1e002:	0005      	movs	r5, r0
   1e004:	4227      	tst	r7, r4
   1e006:	d0f7      	beq.n	1dff8 <__pow5mult+0x30>
   1e008:	002a      	movs	r2, r5
   1e00a:	0031      	movs	r1, r6
   1e00c:	4640      	mov	r0, r8
   1e00e:	f7ff ff31 	bl	1de74 <__multiply>
   1e012:	2e00      	cmp	r6, #0
   1e014:	d01b      	beq.n	1e04e <__pow5mult+0x86>
   1e016:	4642      	mov	r2, r8
   1e018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1e01a:	6873      	ldr	r3, [r6, #4]
   1e01c:	4694      	mov	ip, r2
   1e01e:	009b      	lsls	r3, r3, #2
   1e020:	4463      	add	r3, ip
   1e022:	681a      	ldr	r2, [r3, #0]
   1e024:	1064      	asrs	r4, r4, #1
   1e026:	6032      	str	r2, [r6, #0]
   1e028:	601e      	str	r6, [r3, #0]
   1e02a:	0006      	movs	r6, r0
   1e02c:	2c00      	cmp	r4, #0
   1e02e:	d1e5      	bne.n	1dffc <__pow5mult+0x34>
   1e030:	0030      	movs	r0, r6
   1e032:	bc0c      	pop	{r2, r3}
   1e034:	4690      	mov	r8, r2
   1e036:	4699      	mov	r9, r3
   1e038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e03a:	002a      	movs	r2, r5
   1e03c:	0029      	movs	r1, r5
   1e03e:	4640      	mov	r0, r8
   1e040:	f7ff ff18 	bl	1de74 <__multiply>
   1e044:	464b      	mov	r3, r9
   1e046:	6028      	str	r0, [r5, #0]
   1e048:	6003      	str	r3, [r0, #0]
   1e04a:	0005      	movs	r5, r0
   1e04c:	e7da      	b.n	1e004 <__pow5mult+0x3c>
   1e04e:	0006      	movs	r6, r0
   1e050:	e7d2      	b.n	1dff8 <__pow5mult+0x30>
   1e052:	4a0b      	ldr	r2, [pc, #44]	; (1e080 <__pow5mult+0xb8>)
   1e054:	3b01      	subs	r3, #1
   1e056:	009b      	lsls	r3, r3, #2
   1e058:	589a      	ldr	r2, [r3, r2]
   1e05a:	2300      	movs	r3, #0
   1e05c:	f7ff fe72 	bl	1dd44 <__multadd>
   1e060:	0007      	movs	r7, r0
   1e062:	e7bb      	b.n	1dfdc <__pow5mult+0x14>
   1e064:	2101      	movs	r1, #1
   1e066:	4640      	mov	r0, r8
   1e068:	f7ff fe3a 	bl	1dce0 <_Balloc>
   1e06c:	4b05      	ldr	r3, [pc, #20]	; (1e084 <__pow5mult+0xbc>)
   1e06e:	0005      	movs	r5, r0
   1e070:	6143      	str	r3, [r0, #20]
   1e072:	2301      	movs	r3, #1
   1e074:	6103      	str	r3, [r0, #16]
   1e076:	4643      	mov	r3, r8
   1e078:	6498      	str	r0, [r3, #72]	; 0x48
   1e07a:	2300      	movs	r3, #0
   1e07c:	6003      	str	r3, [r0, #0]
   1e07e:	e7b5      	b.n	1dfec <__pow5mult+0x24>
   1e080:	000204a8 	.word	0x000204a8
   1e084:	00000271 	.word	0x00000271

0001e088 <__lshift>:
   1e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e08a:	464e      	mov	r6, r9
   1e08c:	4645      	mov	r5, r8
   1e08e:	46de      	mov	lr, fp
   1e090:	4657      	mov	r7, sl
   1e092:	b5e0      	push	{r5, r6, r7, lr}
   1e094:	000e      	movs	r6, r1
   1e096:	6933      	ldr	r3, [r6, #16]
   1e098:	1154      	asrs	r4, r2, #5
   1e09a:	4698      	mov	r8, r3
   1e09c:	44a0      	add	r8, r4
   1e09e:	4643      	mov	r3, r8
   1e0a0:	1c5d      	adds	r5, r3, #1
   1e0a2:	68b3      	ldr	r3, [r6, #8]
   1e0a4:	4683      	mov	fp, r0
   1e0a6:	4691      	mov	r9, r2
   1e0a8:	6849      	ldr	r1, [r1, #4]
   1e0aa:	429d      	cmp	r5, r3
   1e0ac:	dd03      	ble.n	1e0b6 <__lshift+0x2e>
   1e0ae:	3101      	adds	r1, #1
   1e0b0:	005b      	lsls	r3, r3, #1
   1e0b2:	429d      	cmp	r5, r3
   1e0b4:	dcfb      	bgt.n	1e0ae <__lshift+0x26>
   1e0b6:	4658      	mov	r0, fp
   1e0b8:	f7ff fe12 	bl	1dce0 <_Balloc>
   1e0bc:	0003      	movs	r3, r0
   1e0be:	4684      	mov	ip, r0
   1e0c0:	3314      	adds	r3, #20
   1e0c2:	2c00      	cmp	r4, #0
   1e0c4:	dd06      	ble.n	1e0d4 <__lshift+0x4c>
   1e0c6:	2100      	movs	r1, #0
   1e0c8:	00a4      	lsls	r4, r4, #2
   1e0ca:	001a      	movs	r2, r3
   1e0cc:	191b      	adds	r3, r3, r4
   1e0ce:	c202      	stmia	r2!, {r1}
   1e0d0:	4293      	cmp	r3, r2
   1e0d2:	d1fc      	bne.n	1e0ce <__lshift+0x46>
   1e0d4:	6932      	ldr	r2, [r6, #16]
   1e0d6:	4648      	mov	r0, r9
   1e0d8:	0097      	lsls	r7, r2, #2
   1e0da:	0031      	movs	r1, r6
   1e0dc:	221f      	movs	r2, #31
   1e0de:	3114      	adds	r1, #20
   1e0e0:	4010      	ands	r0, r2
   1e0e2:	19cf      	adds	r7, r1, r7
   1e0e4:	4681      	mov	r9, r0
   1e0e6:	2800      	cmp	r0, #0
   1e0e8:	d025      	beq.n	1e136 <__lshift+0xae>
   1e0ea:	2220      	movs	r2, #32
   1e0ec:	1a12      	subs	r2, r2, r0
   1e0ee:	4692      	mov	sl, r2
   1e0f0:	2200      	movs	r2, #0
   1e0f2:	4648      	mov	r0, r9
   1e0f4:	680c      	ldr	r4, [r1, #0]
   1e0f6:	4084      	lsls	r4, r0
   1e0f8:	4650      	mov	r0, sl
   1e0fa:	4314      	orrs	r4, r2
   1e0fc:	601c      	str	r4, [r3, #0]
   1e0fe:	c904      	ldmia	r1!, {r2}
   1e100:	3304      	adds	r3, #4
   1e102:	40c2      	lsrs	r2, r0
   1e104:	428f      	cmp	r7, r1
   1e106:	d8f4      	bhi.n	1e0f2 <__lshift+0x6a>
   1e108:	601a      	str	r2, [r3, #0]
   1e10a:	2a00      	cmp	r2, #0
   1e10c:	d001      	beq.n	1e112 <__lshift+0x8a>
   1e10e:	4645      	mov	r5, r8
   1e110:	3502      	adds	r5, #2
   1e112:	4663      	mov	r3, ip
   1e114:	3d01      	subs	r5, #1
   1e116:	611d      	str	r5, [r3, #16]
   1e118:	6873      	ldr	r3, [r6, #4]
   1e11a:	4660      	mov	r0, ip
   1e11c:	009a      	lsls	r2, r3, #2
   1e11e:	465b      	mov	r3, fp
   1e120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e122:	189b      	adds	r3, r3, r2
   1e124:	681a      	ldr	r2, [r3, #0]
   1e126:	6032      	str	r2, [r6, #0]
   1e128:	601e      	str	r6, [r3, #0]
   1e12a:	bc3c      	pop	{r2, r3, r4, r5}
   1e12c:	4690      	mov	r8, r2
   1e12e:	4699      	mov	r9, r3
   1e130:	46a2      	mov	sl, r4
   1e132:	46ab      	mov	fp, r5
   1e134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e136:	c904      	ldmia	r1!, {r2}
   1e138:	c304      	stmia	r3!, {r2}
   1e13a:	428f      	cmp	r7, r1
   1e13c:	d9e9      	bls.n	1e112 <__lshift+0x8a>
   1e13e:	c904      	ldmia	r1!, {r2}
   1e140:	c304      	stmia	r3!, {r2}
   1e142:	428f      	cmp	r7, r1
   1e144:	d8f7      	bhi.n	1e136 <__lshift+0xae>
   1e146:	e7e4      	b.n	1e112 <__lshift+0x8a>

0001e148 <__mcmp>:
   1e148:	690a      	ldr	r2, [r1, #16]
   1e14a:	6903      	ldr	r3, [r0, #16]
   1e14c:	b530      	push	{r4, r5, lr}
   1e14e:	0005      	movs	r5, r0
   1e150:	1a98      	subs	r0, r3, r2
   1e152:	d111      	bne.n	1e178 <__mcmp+0x30>
   1e154:	0092      	lsls	r2, r2, #2
   1e156:	3514      	adds	r5, #20
   1e158:	3114      	adds	r1, #20
   1e15a:	18ab      	adds	r3, r5, r2
   1e15c:	1889      	adds	r1, r1, r2
   1e15e:	e001      	b.n	1e164 <__mcmp+0x1c>
   1e160:	429d      	cmp	r5, r3
   1e162:	d209      	bcs.n	1e178 <__mcmp+0x30>
   1e164:	3b04      	subs	r3, #4
   1e166:	3904      	subs	r1, #4
   1e168:	681c      	ldr	r4, [r3, #0]
   1e16a:	680a      	ldr	r2, [r1, #0]
   1e16c:	4294      	cmp	r4, r2
   1e16e:	d0f7      	beq.n	1e160 <__mcmp+0x18>
   1e170:	4294      	cmp	r4, r2
   1e172:	4180      	sbcs	r0, r0
   1e174:	2201      	movs	r2, #1
   1e176:	4310      	orrs	r0, r2
   1e178:	bd30      	pop	{r4, r5, pc}
   1e17a:	46c0      	nop			; (mov r8, r8)

0001e17c <__mdiff>:
   1e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e17e:	4645      	mov	r5, r8
   1e180:	46de      	mov	lr, fp
   1e182:	4657      	mov	r7, sl
   1e184:	464e      	mov	r6, r9
   1e186:	0014      	movs	r4, r2
   1e188:	690b      	ldr	r3, [r1, #16]
   1e18a:	6912      	ldr	r2, [r2, #16]
   1e18c:	b5e0      	push	{r5, r6, r7, lr}
   1e18e:	4688      	mov	r8, r1
   1e190:	1a9d      	subs	r5, r3, r2
   1e192:	d11a      	bne.n	1e1ca <__mdiff+0x4e>
   1e194:	000f      	movs	r7, r1
   1e196:	2114      	movs	r1, #20
   1e198:	468c      	mov	ip, r1
   1e19a:	0092      	lsls	r2, r2, #2
   1e19c:	3714      	adds	r7, #20
   1e19e:	44a4      	add	ip, r4
   1e1a0:	18bb      	adds	r3, r7, r2
   1e1a2:	4462      	add	r2, ip
   1e1a4:	e002      	b.n	1e1ac <__mdiff+0x30>
   1e1a6:	429f      	cmp	r7, r3
   1e1a8:	d300      	bcc.n	1e1ac <__mdiff+0x30>
   1e1aa:	e070      	b.n	1e28e <__mdiff+0x112>
   1e1ac:	3b04      	subs	r3, #4
   1e1ae:	3a04      	subs	r2, #4
   1e1b0:	681e      	ldr	r6, [r3, #0]
   1e1b2:	6811      	ldr	r1, [r2, #0]
   1e1b4:	428e      	cmp	r6, r1
   1e1b6:	d0f6      	beq.n	1e1a6 <__mdiff+0x2a>
   1e1b8:	d300      	bcc.n	1e1bc <__mdiff+0x40>
   1e1ba:	e071      	b.n	1e2a0 <__mdiff+0x124>
   1e1bc:	4643      	mov	r3, r8
   1e1be:	003e      	movs	r6, r7
   1e1c0:	46a0      	mov	r8, r4
   1e1c2:	4667      	mov	r7, ip
   1e1c4:	001c      	movs	r4, r3
   1e1c6:	2501      	movs	r5, #1
   1e1c8:	e006      	b.n	1e1d8 <__mdiff+0x5c>
   1e1ca:	2d00      	cmp	r5, #0
   1e1cc:	db6a      	blt.n	1e2a4 <__mdiff+0x128>
   1e1ce:	4647      	mov	r7, r8
   1e1d0:	0026      	movs	r6, r4
   1e1d2:	2500      	movs	r5, #0
   1e1d4:	3714      	adds	r7, #20
   1e1d6:	3614      	adds	r6, #20
   1e1d8:	4643      	mov	r3, r8
   1e1da:	6859      	ldr	r1, [r3, #4]
   1e1dc:	f7ff fd80 	bl	1dce0 <_Balloc>
   1e1e0:	4643      	mov	r3, r8
   1e1e2:	4681      	mov	r9, r0
   1e1e4:	60c5      	str	r5, [r0, #12]
   1e1e6:	6918      	ldr	r0, [r3, #16]
   1e1e8:	464d      	mov	r5, r9
   1e1ea:	0083      	lsls	r3, r0, #2
   1e1ec:	469c      	mov	ip, r3
   1e1ee:	6923      	ldr	r3, [r4, #16]
   1e1f0:	44bc      	add	ip, r7
   1e1f2:	009b      	lsls	r3, r3, #2
   1e1f4:	4698      	mov	r8, r3
   1e1f6:	2300      	movs	r3, #0
   1e1f8:	44b0      	add	r8, r6
   1e1fa:	3514      	adds	r5, #20
   1e1fc:	469a      	mov	sl, r3
   1e1fe:	e000      	b.n	1e202 <__mdiff+0x86>
   1e200:	0027      	movs	r7, r4
   1e202:	ce04      	ldmia	r6!, {r2}
   1e204:	003c      	movs	r4, r7
   1e206:	4693      	mov	fp, r2
   1e208:	4659      	mov	r1, fp
   1e20a:	cc08      	ldmia	r4!, {r3}
   1e20c:	0409      	lsls	r1, r1, #16
   1e20e:	041a      	lsls	r2, r3, #16
   1e210:	0c12      	lsrs	r2, r2, #16
   1e212:	4452      	add	r2, sl
   1e214:	0c09      	lsrs	r1, r1, #16
   1e216:	1a52      	subs	r2, r2, r1
   1e218:	0c19      	lsrs	r1, r3, #16
   1e21a:	465b      	mov	r3, fp
   1e21c:	0c1b      	lsrs	r3, r3, #16
   1e21e:	1acb      	subs	r3, r1, r3
   1e220:	1411      	asrs	r1, r2, #16
   1e222:	185b      	adds	r3, r3, r1
   1e224:	0412      	lsls	r2, r2, #16
   1e226:	1419      	asrs	r1, r3, #16
   1e228:	0c12      	lsrs	r2, r2, #16
   1e22a:	041b      	lsls	r3, r3, #16
   1e22c:	468a      	mov	sl, r1
   1e22e:	4313      	orrs	r3, r2
   1e230:	1d29      	adds	r1, r5, #4
   1e232:	602b      	str	r3, [r5, #0]
   1e234:	000d      	movs	r5, r1
   1e236:	45b0      	cmp	r8, r6
   1e238:	d8e2      	bhi.n	1e200 <__mdiff+0x84>
   1e23a:	45a4      	cmp	ip, r4
   1e23c:	d916      	bls.n	1e26c <__mdiff+0xf0>
   1e23e:	cc08      	ldmia	r4!, {r3}
   1e240:	041a      	lsls	r2, r3, #16
   1e242:	0c12      	lsrs	r2, r2, #16
   1e244:	4452      	add	r2, sl
   1e246:	1416      	asrs	r6, r2, #16
   1e248:	0c1b      	lsrs	r3, r3, #16
   1e24a:	199b      	adds	r3, r3, r6
   1e24c:	0412      	lsls	r2, r2, #16
   1e24e:	141e      	asrs	r6, r3, #16
   1e250:	0c12      	lsrs	r2, r2, #16
   1e252:	041b      	lsls	r3, r3, #16
   1e254:	4313      	orrs	r3, r2
   1e256:	46b2      	mov	sl, r6
   1e258:	c508      	stmia	r5!, {r3}
   1e25a:	45a4      	cmp	ip, r4
   1e25c:	d8ef      	bhi.n	1e23e <__mdiff+0xc2>
   1e25e:	4662      	mov	r2, ip
   1e260:	2403      	movs	r4, #3
   1e262:	1bd2      	subs	r2, r2, r7
   1e264:	3a05      	subs	r2, #5
   1e266:	43a2      	bics	r2, r4
   1e268:	3204      	adds	r2, #4
   1e26a:	1889      	adds	r1, r1, r2
   1e26c:	3904      	subs	r1, #4
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d104      	bne.n	1e27c <__mdiff+0x100>
   1e272:	3904      	subs	r1, #4
   1e274:	680b      	ldr	r3, [r1, #0]
   1e276:	3801      	subs	r0, #1
   1e278:	2b00      	cmp	r3, #0
   1e27a:	d0fa      	beq.n	1e272 <__mdiff+0xf6>
   1e27c:	464b      	mov	r3, r9
   1e27e:	6118      	str	r0, [r3, #16]
   1e280:	4648      	mov	r0, r9
   1e282:	bc3c      	pop	{r2, r3, r4, r5}
   1e284:	4690      	mov	r8, r2
   1e286:	4699      	mov	r9, r3
   1e288:	46a2      	mov	sl, r4
   1e28a:	46ab      	mov	fp, r5
   1e28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e28e:	2100      	movs	r1, #0
   1e290:	f7ff fd26 	bl	1dce0 <_Balloc>
   1e294:	2301      	movs	r3, #1
   1e296:	6103      	str	r3, [r0, #16]
   1e298:	2300      	movs	r3, #0
   1e29a:	4681      	mov	r9, r0
   1e29c:	6143      	str	r3, [r0, #20]
   1e29e:	e7ef      	b.n	1e280 <__mdiff+0x104>
   1e2a0:	4666      	mov	r6, ip
   1e2a2:	e799      	b.n	1e1d8 <__mdiff+0x5c>
   1e2a4:	0027      	movs	r7, r4
   1e2a6:	000e      	movs	r6, r1
   1e2a8:	46a0      	mov	r8, r4
   1e2aa:	3714      	adds	r7, #20
   1e2ac:	3614      	adds	r6, #20
   1e2ae:	000c      	movs	r4, r1
   1e2b0:	2501      	movs	r5, #1
   1e2b2:	e791      	b.n	1e1d8 <__mdiff+0x5c>

0001e2b4 <__d2b>:
   1e2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2b6:	2101      	movs	r1, #1
   1e2b8:	001c      	movs	r4, r3
   1e2ba:	b083      	sub	sp, #12
   1e2bc:	9e08      	ldr	r6, [sp, #32]
   1e2be:	0015      	movs	r5, r2
   1e2c0:	f7ff fd0e 	bl	1dce0 <_Balloc>
   1e2c4:	0323      	lsls	r3, r4, #12
   1e2c6:	0064      	lsls	r4, r4, #1
   1e2c8:	0007      	movs	r7, r0
   1e2ca:	0b1b      	lsrs	r3, r3, #12
   1e2cc:	0d64      	lsrs	r4, r4, #21
   1e2ce:	d002      	beq.n	1e2d6 <__d2b+0x22>
   1e2d0:	2280      	movs	r2, #128	; 0x80
   1e2d2:	0352      	lsls	r2, r2, #13
   1e2d4:	4313      	orrs	r3, r2
   1e2d6:	9301      	str	r3, [sp, #4]
   1e2d8:	2d00      	cmp	r5, #0
   1e2da:	d019      	beq.n	1e310 <__d2b+0x5c>
   1e2dc:	4668      	mov	r0, sp
   1e2de:	9500      	str	r5, [sp, #0]
   1e2e0:	f7ff fd90 	bl	1de04 <__lo0bits>
   1e2e4:	2800      	cmp	r0, #0
   1e2e6:	d130      	bne.n	1e34a <__d2b+0x96>
   1e2e8:	9b00      	ldr	r3, [sp, #0]
   1e2ea:	617b      	str	r3, [r7, #20]
   1e2ec:	9b01      	ldr	r3, [sp, #4]
   1e2ee:	61bb      	str	r3, [r7, #24]
   1e2f0:	1e5a      	subs	r2, r3, #1
   1e2f2:	4193      	sbcs	r3, r2
   1e2f4:	1c5d      	adds	r5, r3, #1
   1e2f6:	613d      	str	r5, [r7, #16]
   1e2f8:	2c00      	cmp	r4, #0
   1e2fa:	d014      	beq.n	1e326 <__d2b+0x72>
   1e2fc:	4b19      	ldr	r3, [pc, #100]	; (1e364 <__d2b+0xb0>)
   1e2fe:	469c      	mov	ip, r3
   1e300:	2335      	movs	r3, #53	; 0x35
   1e302:	4464      	add	r4, ip
   1e304:	1824      	adds	r4, r4, r0
   1e306:	1a18      	subs	r0, r3, r0
   1e308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e30a:	6034      	str	r4, [r6, #0]
   1e30c:	6018      	str	r0, [r3, #0]
   1e30e:	e019      	b.n	1e344 <__d2b+0x90>
   1e310:	a801      	add	r0, sp, #4
   1e312:	f7ff fd77 	bl	1de04 <__lo0bits>
   1e316:	9b01      	ldr	r3, [sp, #4]
   1e318:	3020      	adds	r0, #32
   1e31a:	617b      	str	r3, [r7, #20]
   1e31c:	2301      	movs	r3, #1
   1e31e:	2501      	movs	r5, #1
   1e320:	613b      	str	r3, [r7, #16]
   1e322:	2c00      	cmp	r4, #0
   1e324:	d1ea      	bne.n	1e2fc <__d2b+0x48>
   1e326:	4b10      	ldr	r3, [pc, #64]	; (1e368 <__d2b+0xb4>)
   1e328:	469c      	mov	ip, r3
   1e32a:	4b10      	ldr	r3, [pc, #64]	; (1e36c <__d2b+0xb8>)
   1e32c:	4460      	add	r0, ip
   1e32e:	18eb      	adds	r3, r5, r3
   1e330:	009b      	lsls	r3, r3, #2
   1e332:	18fb      	adds	r3, r7, r3
   1e334:	6030      	str	r0, [r6, #0]
   1e336:	6958      	ldr	r0, [r3, #20]
   1e338:	f7ff fd4a 	bl	1ddd0 <__hi0bits>
   1e33c:	016b      	lsls	r3, r5, #5
   1e33e:	1a18      	subs	r0, r3, r0
   1e340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e342:	6018      	str	r0, [r3, #0]
   1e344:	0038      	movs	r0, r7
   1e346:	b003      	add	sp, #12
   1e348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e34a:	9b01      	ldr	r3, [sp, #4]
   1e34c:	2220      	movs	r2, #32
   1e34e:	0019      	movs	r1, r3
   1e350:	1a12      	subs	r2, r2, r0
   1e352:	4091      	lsls	r1, r2
   1e354:	000a      	movs	r2, r1
   1e356:	40c3      	lsrs	r3, r0
   1e358:	9900      	ldr	r1, [sp, #0]
   1e35a:	9301      	str	r3, [sp, #4]
   1e35c:	430a      	orrs	r2, r1
   1e35e:	617a      	str	r2, [r7, #20]
   1e360:	e7c5      	b.n	1e2ee <__d2b+0x3a>
   1e362:	46c0      	nop			; (mov r8, r8)
   1e364:	fffffbcd 	.word	0xfffffbcd
   1e368:	fffffbce 	.word	0xfffffbce
   1e36c:	3fffffff 	.word	0x3fffffff

0001e370 <_realloc_r>:
   1e370:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e372:	464e      	mov	r6, r9
   1e374:	4645      	mov	r5, r8
   1e376:	46de      	mov	lr, fp
   1e378:	4657      	mov	r7, sl
   1e37a:	b5e0      	push	{r5, r6, r7, lr}
   1e37c:	b085      	sub	sp, #20
   1e37e:	9001      	str	r0, [sp, #4]
   1e380:	000e      	movs	r6, r1
   1e382:	0015      	movs	r5, r2
   1e384:	2900      	cmp	r1, #0
   1e386:	d100      	bne.n	1e38a <_realloc_r+0x1a>
   1e388:	e09e      	b.n	1e4c8 <_realloc_r+0x158>
   1e38a:	0037      	movs	r7, r6
   1e38c:	9801      	ldr	r0, [sp, #4]
   1e38e:	3f08      	subs	r7, #8
   1e390:	f7ff fc96 	bl	1dcc0 <__malloc_lock>
   1e394:	687a      	ldr	r2, [r7, #4]
   1e396:	2303      	movs	r3, #3
   1e398:	0014      	movs	r4, r2
   1e39a:	439c      	bics	r4, r3
   1e39c:	002b      	movs	r3, r5
   1e39e:	330b      	adds	r3, #11
   1e3a0:	46b9      	mov	r9, r7
   1e3a2:	2b16      	cmp	r3, #22
   1e3a4:	d847      	bhi.n	1e436 <_realloc_r+0xc6>
   1e3a6:	2110      	movs	r1, #16
   1e3a8:	2310      	movs	r3, #16
   1e3aa:	4688      	mov	r8, r1
   1e3ac:	4545      	cmp	r5, r8
   1e3ae:	d846      	bhi.n	1e43e <_realloc_r+0xce>
   1e3b0:	429c      	cmp	r4, r3
   1e3b2:	da49      	bge.n	1e448 <_realloc_r+0xd8>
   1e3b4:	49cc      	ldr	r1, [pc, #816]	; (1e6e8 <_realloc_r+0x378>)
   1e3b6:	1938      	adds	r0, r7, r4
   1e3b8:	468b      	mov	fp, r1
   1e3ba:	6889      	ldr	r1, [r1, #8]
   1e3bc:	9002      	str	r0, [sp, #8]
   1e3be:	4288      	cmp	r0, r1
   1e3c0:	d100      	bne.n	1e3c4 <_realloc_r+0x54>
   1e3c2:	e0c2      	b.n	1e54a <_realloc_r+0x1da>
   1e3c4:	2101      	movs	r1, #1
   1e3c6:	468a      	mov	sl, r1
   1e3c8:	6840      	ldr	r0, [r0, #4]
   1e3ca:	0001      	movs	r1, r0
   1e3cc:	9003      	str	r0, [sp, #12]
   1e3ce:	4650      	mov	r0, sl
   1e3d0:	4381      	bics	r1, r0
   1e3d2:	468c      	mov	ip, r1
   1e3d4:	9902      	ldr	r1, [sp, #8]
   1e3d6:	468b      	mov	fp, r1
   1e3d8:	44dc      	add	ip, fp
   1e3da:	4661      	mov	r1, ip
   1e3dc:	6849      	ldr	r1, [r1, #4]
   1e3de:	4201      	tst	r1, r0
   1e3e0:	d04d      	beq.n	1e47e <_realloc_r+0x10e>
   1e3e2:	4210      	tst	r0, r2
   1e3e4:	d100      	bne.n	1e3e8 <_realloc_r+0x78>
   1e3e6:	e0a2      	b.n	1e52e <_realloc_r+0x1be>
   1e3e8:	0029      	movs	r1, r5
   1e3ea:	9801      	ldr	r0, [sp, #4]
   1e3ec:	f7ff f8cc 	bl	1d588 <_malloc_r>
   1e3f0:	1e05      	subs	r5, r0, #0
   1e3f2:	d039      	beq.n	1e468 <_realloc_r+0xf8>
   1e3f4:	2301      	movs	r3, #1
   1e3f6:	0002      	movs	r2, r0
   1e3f8:	6879      	ldr	r1, [r7, #4]
   1e3fa:	3a08      	subs	r2, #8
   1e3fc:	4399      	bics	r1, r3
   1e3fe:	187f      	adds	r7, r7, r1
   1e400:	42ba      	cmp	r2, r7
   1e402:	d100      	bne.n	1e406 <_realloc_r+0x96>
   1e404:	e12e      	b.n	1e664 <_realloc_r+0x2f4>
   1e406:	1f22      	subs	r2, r4, #4
   1e408:	2a24      	cmp	r2, #36	; 0x24
   1e40a:	d900      	bls.n	1e40e <_realloc_r+0x9e>
   1e40c:	e114      	b.n	1e638 <_realloc_r+0x2c8>
   1e40e:	2a13      	cmp	r2, #19
   1e410:	d900      	bls.n	1e414 <_realloc_r+0xa4>
   1e412:	e0e8      	b.n	1e5e6 <_realloc_r+0x276>
   1e414:	0003      	movs	r3, r0
   1e416:	0032      	movs	r2, r6
   1e418:	6811      	ldr	r1, [r2, #0]
   1e41a:	6019      	str	r1, [r3, #0]
   1e41c:	6851      	ldr	r1, [r2, #4]
   1e41e:	6059      	str	r1, [r3, #4]
   1e420:	6892      	ldr	r2, [r2, #8]
   1e422:	609a      	str	r2, [r3, #8]
   1e424:	9c01      	ldr	r4, [sp, #4]
   1e426:	0031      	movs	r1, r6
   1e428:	0020      	movs	r0, r4
   1e42a:	f7fe fd89 	bl	1cf40 <_free_r>
   1e42e:	0020      	movs	r0, r4
   1e430:	f7ff fc4e 	bl	1dcd0 <__malloc_unlock>
   1e434:	e01b      	b.n	1e46e <_realloc_r+0xfe>
   1e436:	2107      	movs	r1, #7
   1e438:	438b      	bics	r3, r1
   1e43a:	4698      	mov	r8, r3
   1e43c:	d5b6      	bpl.n	1e3ac <_realloc_r+0x3c>
   1e43e:	230c      	movs	r3, #12
   1e440:	9a01      	ldr	r2, [sp, #4]
   1e442:	2500      	movs	r5, #0
   1e444:	6013      	str	r3, [r2, #0]
   1e446:	e012      	b.n	1e46e <_realloc_r+0xfe>
   1e448:	0035      	movs	r5, r6
   1e44a:	4643      	mov	r3, r8
   1e44c:	1ae3      	subs	r3, r4, r3
   1e44e:	2b0f      	cmp	r3, #15
   1e450:	d825      	bhi.n	1e49e <_realloc_r+0x12e>
   1e452:	464b      	mov	r3, r9
   1e454:	2201      	movs	r2, #1
   1e456:	4649      	mov	r1, r9
   1e458:	685b      	ldr	r3, [r3, #4]
   1e45a:	4013      	ands	r3, r2
   1e45c:	4323      	orrs	r3, r4
   1e45e:	604b      	str	r3, [r1, #4]
   1e460:	444c      	add	r4, r9
   1e462:	6863      	ldr	r3, [r4, #4]
   1e464:	431a      	orrs	r2, r3
   1e466:	6062      	str	r2, [r4, #4]
   1e468:	9801      	ldr	r0, [sp, #4]
   1e46a:	f7ff fc31 	bl	1dcd0 <__malloc_unlock>
   1e46e:	0028      	movs	r0, r5
   1e470:	b005      	add	sp, #20
   1e472:	bc3c      	pop	{r2, r3, r4, r5}
   1e474:	4690      	mov	r8, r2
   1e476:	4699      	mov	r9, r3
   1e478:	46a2      	mov	sl, r4
   1e47a:	46ab      	mov	fp, r5
   1e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e47e:	2103      	movs	r1, #3
   1e480:	9803      	ldr	r0, [sp, #12]
   1e482:	468c      	mov	ip, r1
   1e484:	4388      	bics	r0, r1
   1e486:	1821      	adds	r1, r4, r0
   1e488:	468b      	mov	fp, r1
   1e48a:	4299      	cmp	r1, r3
   1e48c:	db21      	blt.n	1e4d2 <_realloc_r+0x162>
   1e48e:	9a02      	ldr	r2, [sp, #8]
   1e490:	0035      	movs	r5, r6
   1e492:	68d3      	ldr	r3, [r2, #12]
   1e494:	6892      	ldr	r2, [r2, #8]
   1e496:	465c      	mov	r4, fp
   1e498:	60d3      	str	r3, [r2, #12]
   1e49a:	609a      	str	r2, [r3, #8]
   1e49c:	e7d5      	b.n	1e44a <_realloc_r+0xda>
   1e49e:	464a      	mov	r2, r9
   1e4a0:	2001      	movs	r0, #1
   1e4a2:	4646      	mov	r6, r8
   1e4a4:	6852      	ldr	r2, [r2, #4]
   1e4a6:	4649      	mov	r1, r9
   1e4a8:	4002      	ands	r2, r0
   1e4aa:	4332      	orrs	r2, r6
   1e4ac:	464e      	mov	r6, r9
   1e4ae:	4441      	add	r1, r8
   1e4b0:	4303      	orrs	r3, r0
   1e4b2:	6072      	str	r2, [r6, #4]
   1e4b4:	444c      	add	r4, r9
   1e4b6:	604b      	str	r3, [r1, #4]
   1e4b8:	6863      	ldr	r3, [r4, #4]
   1e4ba:	3108      	adds	r1, #8
   1e4bc:	4318      	orrs	r0, r3
   1e4be:	6060      	str	r0, [r4, #4]
   1e4c0:	9801      	ldr	r0, [sp, #4]
   1e4c2:	f7fe fd3d 	bl	1cf40 <_free_r>
   1e4c6:	e7cf      	b.n	1e468 <_realloc_r+0xf8>
   1e4c8:	0011      	movs	r1, r2
   1e4ca:	f7ff f85d 	bl	1d588 <_malloc_r>
   1e4ce:	0005      	movs	r5, r0
   1e4d0:	e7cd      	b.n	1e46e <_realloc_r+0xfe>
   1e4d2:	4651      	mov	r1, sl
   1e4d4:	4211      	tst	r1, r2
   1e4d6:	d000      	beq.n	1e4da <_realloc_r+0x16a>
   1e4d8:	e786      	b.n	1e3e8 <_realloc_r+0x78>
   1e4da:	4661      	mov	r1, ip
   1e4dc:	683a      	ldr	r2, [r7, #0]
   1e4de:	1aba      	subs	r2, r7, r2
   1e4e0:	4692      	mov	sl, r2
   1e4e2:	6852      	ldr	r2, [r2, #4]
   1e4e4:	438a      	bics	r2, r1
   1e4e6:	1880      	adds	r0, r0, r2
   1e4e8:	4683      	mov	fp, r0
   1e4ea:	44a3      	add	fp, r4
   1e4ec:	459b      	cmp	fp, r3
   1e4ee:	db26      	blt.n	1e53e <_realloc_r+0x1ce>
   1e4f0:	9a02      	ldr	r2, [sp, #8]
   1e4f2:	68d3      	ldr	r3, [r2, #12]
   1e4f4:	6892      	ldr	r2, [r2, #8]
   1e4f6:	60d3      	str	r3, [r2, #12]
   1e4f8:	609a      	str	r2, [r3, #8]
   1e4fa:	4653      	mov	r3, sl
   1e4fc:	4652      	mov	r2, sl
   1e4fe:	4655      	mov	r5, sl
   1e500:	6892      	ldr	r2, [r2, #8]
   1e502:	68db      	ldr	r3, [r3, #12]
   1e504:	3508      	adds	r5, #8
   1e506:	60d3      	str	r3, [r2, #12]
   1e508:	609a      	str	r2, [r3, #8]
   1e50a:	1f22      	subs	r2, r4, #4
   1e50c:	2a24      	cmp	r2, #36	; 0x24
   1e50e:	d900      	bls.n	1e512 <_realloc_r+0x1a2>
   1e510:	e096      	b.n	1e640 <_realloc_r+0x2d0>
   1e512:	2a13      	cmp	r2, #19
   1e514:	d972      	bls.n	1e5fc <_realloc_r+0x28c>
   1e516:	4653      	mov	r3, sl
   1e518:	6831      	ldr	r1, [r6, #0]
   1e51a:	6099      	str	r1, [r3, #8]
   1e51c:	6871      	ldr	r1, [r6, #4]
   1e51e:	60d9      	str	r1, [r3, #12]
   1e520:	2a1b      	cmp	r2, #27
   1e522:	d900      	bls.n	1e526 <_realloc_r+0x1b6>
   1e524:	e0a4      	b.n	1e670 <_realloc_r+0x300>
   1e526:	0032      	movs	r2, r6
   1e528:	3310      	adds	r3, #16
   1e52a:	3208      	adds	r2, #8
   1e52c:	e068      	b.n	1e600 <_realloc_r+0x290>
   1e52e:	683a      	ldr	r2, [r7, #0]
   1e530:	1aba      	subs	r2, r7, r2
   1e532:	4692      	mov	sl, r2
   1e534:	4651      	mov	r1, sl
   1e536:	2203      	movs	r2, #3
   1e538:	6849      	ldr	r1, [r1, #4]
   1e53a:	4391      	bics	r1, r2
   1e53c:	000a      	movs	r2, r1
   1e53e:	4693      	mov	fp, r2
   1e540:	44a3      	add	fp, r4
   1e542:	459b      	cmp	fp, r3
   1e544:	da00      	bge.n	1e548 <_realloc_r+0x1d8>
   1e546:	e74f      	b.n	1e3e8 <_realloc_r+0x78>
   1e548:	e7d7      	b.n	1e4fa <_realloc_r+0x18a>
   1e54a:	2003      	movs	r0, #3
   1e54c:	9902      	ldr	r1, [sp, #8]
   1e54e:	4684      	mov	ip, r0
   1e550:	6849      	ldr	r1, [r1, #4]
   1e552:	4381      	bics	r1, r0
   1e554:	4640      	mov	r0, r8
   1e556:	1909      	adds	r1, r1, r4
   1e558:	3010      	adds	r0, #16
   1e55a:	9002      	str	r0, [sp, #8]
   1e55c:	4281      	cmp	r1, r0
   1e55e:	da58      	bge.n	1e612 <_realloc_r+0x2a2>
   1e560:	07d2      	lsls	r2, r2, #31
   1e562:	d500      	bpl.n	1e566 <_realloc_r+0x1f6>
   1e564:	e740      	b.n	1e3e8 <_realloc_r+0x78>
   1e566:	4660      	mov	r0, ip
   1e568:	683a      	ldr	r2, [r7, #0]
   1e56a:	1aba      	subs	r2, r7, r2
   1e56c:	4692      	mov	sl, r2
   1e56e:	6852      	ldr	r2, [r2, #4]
   1e570:	4382      	bics	r2, r0
   1e572:	9802      	ldr	r0, [sp, #8]
   1e574:	1851      	adds	r1, r2, r1
   1e576:	9103      	str	r1, [sp, #12]
   1e578:	4288      	cmp	r0, r1
   1e57a:	dce0      	bgt.n	1e53e <_realloc_r+0x1ce>
   1e57c:	4653      	mov	r3, sl
   1e57e:	4652      	mov	r2, sl
   1e580:	4655      	mov	r5, sl
   1e582:	6892      	ldr	r2, [r2, #8]
   1e584:	68db      	ldr	r3, [r3, #12]
   1e586:	3508      	adds	r5, #8
   1e588:	60d3      	str	r3, [r2, #12]
   1e58a:	609a      	str	r2, [r3, #8]
   1e58c:	1f22      	subs	r2, r4, #4
   1e58e:	2a24      	cmp	r2, #36	; 0x24
   1e590:	d900      	bls.n	1e594 <_realloc_r+0x224>
   1e592:	e08e      	b.n	1e6b2 <_realloc_r+0x342>
   1e594:	2a13      	cmp	r2, #19
   1e596:	d800      	bhi.n	1e59a <_realloc_r+0x22a>
   1e598:	e088      	b.n	1e6ac <_realloc_r+0x33c>
   1e59a:	4653      	mov	r3, sl
   1e59c:	6831      	ldr	r1, [r6, #0]
   1e59e:	6099      	str	r1, [r3, #8]
   1e5a0:	6871      	ldr	r1, [r6, #4]
   1e5a2:	60d9      	str	r1, [r3, #12]
   1e5a4:	2a1b      	cmp	r2, #27
   1e5a6:	d900      	bls.n	1e5aa <_realloc_r+0x23a>
   1e5a8:	e088      	b.n	1e6bc <_realloc_r+0x34c>
   1e5aa:	0032      	movs	r2, r6
   1e5ac:	3310      	adds	r3, #16
   1e5ae:	3208      	adds	r2, #8
   1e5b0:	6811      	ldr	r1, [r2, #0]
   1e5b2:	6019      	str	r1, [r3, #0]
   1e5b4:	6851      	ldr	r1, [r2, #4]
   1e5b6:	6059      	str	r1, [r3, #4]
   1e5b8:	6892      	ldr	r2, [r2, #8]
   1e5ba:	609a      	str	r2, [r3, #8]
   1e5bc:	4651      	mov	r1, sl
   1e5be:	465b      	mov	r3, fp
   1e5c0:	4642      	mov	r2, r8
   1e5c2:	4441      	add	r1, r8
   1e5c4:	6099      	str	r1, [r3, #8]
   1e5c6:	9b03      	ldr	r3, [sp, #12]
   1e5c8:	9801      	ldr	r0, [sp, #4]
   1e5ca:	1a9a      	subs	r2, r3, r2
   1e5cc:	2301      	movs	r3, #1
   1e5ce:	431a      	orrs	r2, r3
   1e5d0:	604a      	str	r2, [r1, #4]
   1e5d2:	4652      	mov	r2, sl
   1e5d4:	6852      	ldr	r2, [r2, #4]
   1e5d6:	4013      	ands	r3, r2
   1e5d8:	4642      	mov	r2, r8
   1e5da:	4313      	orrs	r3, r2
   1e5dc:	4652      	mov	r2, sl
   1e5de:	6053      	str	r3, [r2, #4]
   1e5e0:	f7ff fb76 	bl	1dcd0 <__malloc_unlock>
   1e5e4:	e743      	b.n	1e46e <_realloc_r+0xfe>
   1e5e6:	6833      	ldr	r3, [r6, #0]
   1e5e8:	6003      	str	r3, [r0, #0]
   1e5ea:	6873      	ldr	r3, [r6, #4]
   1e5ec:	6043      	str	r3, [r0, #4]
   1e5ee:	2a1b      	cmp	r2, #27
   1e5f0:	d82d      	bhi.n	1e64e <_realloc_r+0x2de>
   1e5f2:	0003      	movs	r3, r0
   1e5f4:	0032      	movs	r2, r6
   1e5f6:	3308      	adds	r3, #8
   1e5f8:	3208      	adds	r2, #8
   1e5fa:	e70d      	b.n	1e418 <_realloc_r+0xa8>
   1e5fc:	002b      	movs	r3, r5
   1e5fe:	0032      	movs	r2, r6
   1e600:	6811      	ldr	r1, [r2, #0]
   1e602:	465c      	mov	r4, fp
   1e604:	6019      	str	r1, [r3, #0]
   1e606:	6851      	ldr	r1, [r2, #4]
   1e608:	46d1      	mov	r9, sl
   1e60a:	6059      	str	r1, [r3, #4]
   1e60c:	6892      	ldr	r2, [r2, #8]
   1e60e:	609a      	str	r2, [r3, #8]
   1e610:	e71b      	b.n	1e44a <_realloc_r+0xda>
   1e612:	4643      	mov	r3, r8
   1e614:	18fa      	adds	r2, r7, r3
   1e616:	465b      	mov	r3, fp
   1e618:	609a      	str	r2, [r3, #8]
   1e61a:	4643      	mov	r3, r8
   1e61c:	1ac9      	subs	r1, r1, r3
   1e61e:	2301      	movs	r3, #1
   1e620:	4319      	orrs	r1, r3
   1e622:	6051      	str	r1, [r2, #4]
   1e624:	687a      	ldr	r2, [r7, #4]
   1e626:	9801      	ldr	r0, [sp, #4]
   1e628:	4013      	ands	r3, r2
   1e62a:	4642      	mov	r2, r8
   1e62c:	4313      	orrs	r3, r2
   1e62e:	607b      	str	r3, [r7, #4]
   1e630:	f7ff fb4e 	bl	1dcd0 <__malloc_unlock>
   1e634:	0035      	movs	r5, r6
   1e636:	e71a      	b.n	1e46e <_realloc_r+0xfe>
   1e638:	0031      	movs	r1, r6
   1e63a:	f7ff faf1 	bl	1dc20 <memmove>
   1e63e:	e6f1      	b.n	1e424 <_realloc_r+0xb4>
   1e640:	0031      	movs	r1, r6
   1e642:	0028      	movs	r0, r5
   1e644:	f7ff faec 	bl	1dc20 <memmove>
   1e648:	465c      	mov	r4, fp
   1e64a:	46d1      	mov	r9, sl
   1e64c:	e6fd      	b.n	1e44a <_realloc_r+0xda>
   1e64e:	68b3      	ldr	r3, [r6, #8]
   1e650:	6083      	str	r3, [r0, #8]
   1e652:	68f3      	ldr	r3, [r6, #12]
   1e654:	60c3      	str	r3, [r0, #12]
   1e656:	2a24      	cmp	r2, #36	; 0x24
   1e658:	d015      	beq.n	1e686 <_realloc_r+0x316>
   1e65a:	0003      	movs	r3, r0
   1e65c:	0032      	movs	r2, r6
   1e65e:	3310      	adds	r3, #16
   1e660:	3210      	adds	r2, #16
   1e662:	e6d9      	b.n	1e418 <_realloc_r+0xa8>
   1e664:	6853      	ldr	r3, [r2, #4]
   1e666:	2203      	movs	r2, #3
   1e668:	4393      	bics	r3, r2
   1e66a:	18e4      	adds	r4, r4, r3
   1e66c:	0035      	movs	r5, r6
   1e66e:	e6ec      	b.n	1e44a <_realloc_r+0xda>
   1e670:	4653      	mov	r3, sl
   1e672:	68b1      	ldr	r1, [r6, #8]
   1e674:	6119      	str	r1, [r3, #16]
   1e676:	68f1      	ldr	r1, [r6, #12]
   1e678:	6159      	str	r1, [r3, #20]
   1e67a:	2a24      	cmp	r2, #36	; 0x24
   1e67c:	d00c      	beq.n	1e698 <_realloc_r+0x328>
   1e67e:	0032      	movs	r2, r6
   1e680:	3318      	adds	r3, #24
   1e682:	3210      	adds	r2, #16
   1e684:	e7bc      	b.n	1e600 <_realloc_r+0x290>
   1e686:	6933      	ldr	r3, [r6, #16]
   1e688:	0032      	movs	r2, r6
   1e68a:	6103      	str	r3, [r0, #16]
   1e68c:	0003      	movs	r3, r0
   1e68e:	6971      	ldr	r1, [r6, #20]
   1e690:	3318      	adds	r3, #24
   1e692:	3218      	adds	r2, #24
   1e694:	6141      	str	r1, [r0, #20]
   1e696:	e6bf      	b.n	1e418 <_realloc_r+0xa8>
   1e698:	4653      	mov	r3, sl
   1e69a:	6932      	ldr	r2, [r6, #16]
   1e69c:	4651      	mov	r1, sl
   1e69e:	619a      	str	r2, [r3, #24]
   1e6a0:	0032      	movs	r2, r6
   1e6a2:	6970      	ldr	r0, [r6, #20]
   1e6a4:	3320      	adds	r3, #32
   1e6a6:	3218      	adds	r2, #24
   1e6a8:	61c8      	str	r0, [r1, #28]
   1e6aa:	e7a9      	b.n	1e600 <_realloc_r+0x290>
   1e6ac:	002b      	movs	r3, r5
   1e6ae:	0032      	movs	r2, r6
   1e6b0:	e77e      	b.n	1e5b0 <_realloc_r+0x240>
   1e6b2:	0031      	movs	r1, r6
   1e6b4:	0028      	movs	r0, r5
   1e6b6:	f7ff fab3 	bl	1dc20 <memmove>
   1e6ba:	e77f      	b.n	1e5bc <_realloc_r+0x24c>
   1e6bc:	4653      	mov	r3, sl
   1e6be:	68b1      	ldr	r1, [r6, #8]
   1e6c0:	6119      	str	r1, [r3, #16]
   1e6c2:	68f1      	ldr	r1, [r6, #12]
   1e6c4:	6159      	str	r1, [r3, #20]
   1e6c6:	2a24      	cmp	r2, #36	; 0x24
   1e6c8:	d003      	beq.n	1e6d2 <_realloc_r+0x362>
   1e6ca:	0032      	movs	r2, r6
   1e6cc:	3318      	adds	r3, #24
   1e6ce:	3210      	adds	r2, #16
   1e6d0:	e76e      	b.n	1e5b0 <_realloc_r+0x240>
   1e6d2:	4653      	mov	r3, sl
   1e6d4:	6932      	ldr	r2, [r6, #16]
   1e6d6:	4651      	mov	r1, sl
   1e6d8:	619a      	str	r2, [r3, #24]
   1e6da:	0032      	movs	r2, r6
   1e6dc:	6970      	ldr	r0, [r6, #20]
   1e6de:	3320      	adds	r3, #32
   1e6e0:	3218      	adds	r2, #24
   1e6e2:	61c8      	str	r0, [r1, #28]
   1e6e4:	e764      	b.n	1e5b0 <_realloc_r+0x240>
   1e6e6:	46c0      	nop			; (mov r8, r8)
   1e6e8:	200006e8 	.word	0x200006e8

0001e6ec <_sbrk_r>:
   1e6ec:	2300      	movs	r3, #0
   1e6ee:	b570      	push	{r4, r5, r6, lr}
   1e6f0:	4c06      	ldr	r4, [pc, #24]	; (1e70c <_sbrk_r+0x20>)
   1e6f2:	0005      	movs	r5, r0
   1e6f4:	0008      	movs	r0, r1
   1e6f6:	6023      	str	r3, [r4, #0]
   1e6f8:	f7e2 f962 	bl	9c0 <_sbrk>
   1e6fc:	1c43      	adds	r3, r0, #1
   1e6fe:	d000      	beq.n	1e702 <_sbrk_r+0x16>
   1e700:	bd70      	pop	{r4, r5, r6, pc}
   1e702:	6823      	ldr	r3, [r4, #0]
   1e704:	2b00      	cmp	r3, #0
   1e706:	d0fb      	beq.n	1e700 <_sbrk_r+0x14>
   1e708:	602b      	str	r3, [r5, #0]
   1e70a:	e7f9      	b.n	1e700 <_sbrk_r+0x14>
   1e70c:	20001df0 	.word	0x20001df0

0001e710 <__sread>:
   1e710:	b570      	push	{r4, r5, r6, lr}
   1e712:	000c      	movs	r4, r1
   1e714:	250e      	movs	r5, #14
   1e716:	5f49      	ldrsh	r1, [r1, r5]
   1e718:	f000 fa88 	bl	1ec2c <_read_r>
   1e71c:	2800      	cmp	r0, #0
   1e71e:	db03      	blt.n	1e728 <__sread+0x18>
   1e720:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e722:	181b      	adds	r3, r3, r0
   1e724:	6523      	str	r3, [r4, #80]	; 0x50
   1e726:	bd70      	pop	{r4, r5, r6, pc}
   1e728:	89a3      	ldrh	r3, [r4, #12]
   1e72a:	4a02      	ldr	r2, [pc, #8]	; (1e734 <__sread+0x24>)
   1e72c:	4013      	ands	r3, r2
   1e72e:	81a3      	strh	r3, [r4, #12]
   1e730:	e7f9      	b.n	1e726 <__sread+0x16>
   1e732:	46c0      	nop			; (mov r8, r8)
   1e734:	ffffefff 	.word	0xffffefff

0001e738 <__swrite>:
   1e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e73a:	0016      	movs	r6, r2
   1e73c:	001f      	movs	r7, r3
   1e73e:	220c      	movs	r2, #12
   1e740:	5e8b      	ldrsh	r3, [r1, r2]
   1e742:	0005      	movs	r5, r0
   1e744:	000c      	movs	r4, r1
   1e746:	05da      	lsls	r2, r3, #23
   1e748:	d507      	bpl.n	1e75a <__swrite+0x22>
   1e74a:	230e      	movs	r3, #14
   1e74c:	5ec9      	ldrsh	r1, [r1, r3]
   1e74e:	2200      	movs	r2, #0
   1e750:	2302      	movs	r3, #2
   1e752:	f000 fa57 	bl	1ec04 <_lseek_r>
   1e756:	220c      	movs	r2, #12
   1e758:	5ea3      	ldrsh	r3, [r4, r2]
   1e75a:	4a05      	ldr	r2, [pc, #20]	; (1e770 <__swrite+0x38>)
   1e75c:	0028      	movs	r0, r5
   1e75e:	4013      	ands	r3, r2
   1e760:	81a3      	strh	r3, [r4, #12]
   1e762:	0032      	movs	r2, r6
   1e764:	230e      	movs	r3, #14
   1e766:	5ee1      	ldrsh	r1, [r4, r3]
   1e768:	003b      	movs	r3, r7
   1e76a:	f000 f879 	bl	1e860 <_write_r>
   1e76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e770:	ffffefff 	.word	0xffffefff

0001e774 <__sseek>:
   1e774:	b570      	push	{r4, r5, r6, lr}
   1e776:	000c      	movs	r4, r1
   1e778:	250e      	movs	r5, #14
   1e77a:	5f49      	ldrsh	r1, [r1, r5]
   1e77c:	f000 fa42 	bl	1ec04 <_lseek_r>
   1e780:	1c43      	adds	r3, r0, #1
   1e782:	d006      	beq.n	1e792 <__sseek+0x1e>
   1e784:	2380      	movs	r3, #128	; 0x80
   1e786:	89a2      	ldrh	r2, [r4, #12]
   1e788:	015b      	lsls	r3, r3, #5
   1e78a:	4313      	orrs	r3, r2
   1e78c:	81a3      	strh	r3, [r4, #12]
   1e78e:	6520      	str	r0, [r4, #80]	; 0x50
   1e790:	bd70      	pop	{r4, r5, r6, pc}
   1e792:	89a3      	ldrh	r3, [r4, #12]
   1e794:	4a01      	ldr	r2, [pc, #4]	; (1e79c <__sseek+0x28>)
   1e796:	4013      	ands	r3, r2
   1e798:	81a3      	strh	r3, [r4, #12]
   1e79a:	e7f9      	b.n	1e790 <__sseek+0x1c>
   1e79c:	ffffefff 	.word	0xffffefff

0001e7a0 <__sclose>:
   1e7a0:	b510      	push	{r4, lr}
   1e7a2:	230e      	movs	r3, #14
   1e7a4:	5ec9      	ldrsh	r1, [r1, r3]
   1e7a6:	f000 f915 	bl	1e9d4 <_close_r>
   1e7aa:	bd10      	pop	{r4, pc}

0001e7ac <__sprint_r.part.0>:
   1e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7ae:	464e      	mov	r6, r9
   1e7b0:	4645      	mov	r5, r8
   1e7b2:	46de      	mov	lr, fp
   1e7b4:	4657      	mov	r7, sl
   1e7b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e7b8:	b5e0      	push	{r5, r6, r7, lr}
   1e7ba:	4680      	mov	r8, r0
   1e7bc:	000e      	movs	r6, r1
   1e7be:	4691      	mov	r9, r2
   1e7c0:	049b      	lsls	r3, r3, #18
   1e7c2:	d531      	bpl.n	1e828 <__sprint_r.part.0+0x7c>
   1e7c4:	6813      	ldr	r3, [r2, #0]
   1e7c6:	469a      	mov	sl, r3
   1e7c8:	6893      	ldr	r3, [r2, #8]
   1e7ca:	2b00      	cmp	r3, #0
   1e7cc:	d02a      	beq.n	1e824 <__sprint_r.part.0+0x78>
   1e7ce:	4652      	mov	r2, sl
   1e7d0:	6852      	ldr	r2, [r2, #4]
   1e7d2:	2500      	movs	r5, #0
   1e7d4:	4693      	mov	fp, r2
   1e7d6:	0897      	lsrs	r7, r2, #2
   1e7d8:	4652      	mov	r2, sl
   1e7da:	6814      	ldr	r4, [r2, #0]
   1e7dc:	d104      	bne.n	1e7e8 <__sprint_r.part.0+0x3c>
   1e7de:	e016      	b.n	1e80e <__sprint_r.part.0+0x62>
   1e7e0:	3501      	adds	r5, #1
   1e7e2:	3404      	adds	r4, #4
   1e7e4:	42af      	cmp	r7, r5
   1e7e6:	d010      	beq.n	1e80a <__sprint_r.part.0+0x5e>
   1e7e8:	0032      	movs	r2, r6
   1e7ea:	6821      	ldr	r1, [r4, #0]
   1e7ec:	4640      	mov	r0, r8
   1e7ee:	f000 f9b5 	bl	1eb5c <_fputwc_r>
   1e7f2:	1c43      	adds	r3, r0, #1
   1e7f4:	d1f4      	bne.n	1e7e0 <__sprint_r.part.0+0x34>
   1e7f6:	464a      	mov	r2, r9
   1e7f8:	2300      	movs	r3, #0
   1e7fa:	6093      	str	r3, [r2, #8]
   1e7fc:	6053      	str	r3, [r2, #4]
   1e7fe:	bc3c      	pop	{r2, r3, r4, r5}
   1e800:	4690      	mov	r8, r2
   1e802:	4699      	mov	r9, r3
   1e804:	46a2      	mov	sl, r4
   1e806:	46ab      	mov	fp, r5
   1e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e80a:	464b      	mov	r3, r9
   1e80c:	689b      	ldr	r3, [r3, #8]
   1e80e:	465a      	mov	r2, fp
   1e810:	2103      	movs	r1, #3
   1e812:	438a      	bics	r2, r1
   1e814:	1a9b      	subs	r3, r3, r2
   1e816:	464a      	mov	r2, r9
   1e818:	6093      	str	r3, [r2, #8]
   1e81a:	2208      	movs	r2, #8
   1e81c:	4694      	mov	ip, r2
   1e81e:	44e2      	add	sl, ip
   1e820:	2b00      	cmp	r3, #0
   1e822:	d1d4      	bne.n	1e7ce <__sprint_r.part.0+0x22>
   1e824:	2000      	movs	r0, #0
   1e826:	e7e6      	b.n	1e7f6 <__sprint_r.part.0+0x4a>
   1e828:	f7fe fc68 	bl	1d0fc <__sfvwrite_r>
   1e82c:	e7e3      	b.n	1e7f6 <__sprint_r.part.0+0x4a>
   1e82e:	46c0      	nop			; (mov r8, r8)

0001e830 <__sprint_r>:
   1e830:	6893      	ldr	r3, [r2, #8]
   1e832:	b510      	push	{r4, lr}
   1e834:	2b00      	cmp	r3, #0
   1e836:	d002      	beq.n	1e83e <__sprint_r+0xe>
   1e838:	f7ff ffb8 	bl	1e7ac <__sprint_r.part.0>
   1e83c:	bd10      	pop	{r4, pc}
   1e83e:	6053      	str	r3, [r2, #4]
   1e840:	2000      	movs	r0, #0
   1e842:	e7fb      	b.n	1e83c <__sprint_r+0xc>

0001e844 <__ascii_wctomb>:
   1e844:	2900      	cmp	r1, #0
   1e846:	d004      	beq.n	1e852 <__ascii_wctomb+0xe>
   1e848:	2aff      	cmp	r2, #255	; 0xff
   1e84a:	d804      	bhi.n	1e856 <__ascii_wctomb+0x12>
   1e84c:	2001      	movs	r0, #1
   1e84e:	700a      	strb	r2, [r1, #0]
   1e850:	4770      	bx	lr
   1e852:	2000      	movs	r0, #0
   1e854:	e7fc      	b.n	1e850 <__ascii_wctomb+0xc>
   1e856:	238a      	movs	r3, #138	; 0x8a
   1e858:	6003      	str	r3, [r0, #0]
   1e85a:	2001      	movs	r0, #1
   1e85c:	4240      	negs	r0, r0
   1e85e:	e7f7      	b.n	1e850 <__ascii_wctomb+0xc>

0001e860 <_write_r>:
   1e860:	b570      	push	{r4, r5, r6, lr}
   1e862:	0005      	movs	r5, r0
   1e864:	0008      	movs	r0, r1
   1e866:	0011      	movs	r1, r2
   1e868:	2200      	movs	r2, #0
   1e86a:	4c06      	ldr	r4, [pc, #24]	; (1e884 <_write_r+0x24>)
   1e86c:	6022      	str	r2, [r4, #0]
   1e86e:	001a      	movs	r2, r3
   1e870:	f7e4 f99c 	bl	2bac <_write>
   1e874:	1c43      	adds	r3, r0, #1
   1e876:	d000      	beq.n	1e87a <_write_r+0x1a>
   1e878:	bd70      	pop	{r4, r5, r6, pc}
   1e87a:	6823      	ldr	r3, [r4, #0]
   1e87c:	2b00      	cmp	r3, #0
   1e87e:	d0fb      	beq.n	1e878 <_write_r+0x18>
   1e880:	602b      	str	r3, [r5, #0]
   1e882:	e7f9      	b.n	1e878 <_write_r+0x18>
   1e884:	20001df0 	.word	0x20001df0

0001e888 <__register_exitproc>:
   1e888:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e88a:	464e      	mov	r6, r9
   1e88c:	4645      	mov	r5, r8
   1e88e:	46de      	mov	lr, fp
   1e890:	4657      	mov	r7, sl
   1e892:	b5e0      	push	{r5, r6, r7, lr}
   1e894:	4d36      	ldr	r5, [pc, #216]	; (1e970 <__register_exitproc+0xe8>)
   1e896:	b083      	sub	sp, #12
   1e898:	0006      	movs	r6, r0
   1e89a:	6828      	ldr	r0, [r5, #0]
   1e89c:	4698      	mov	r8, r3
   1e89e:	000f      	movs	r7, r1
   1e8a0:	4691      	mov	r9, r2
   1e8a2:	f7fe fdf5 	bl	1d490 <__retarget_lock_acquire_recursive>
   1e8a6:	4b33      	ldr	r3, [pc, #204]	; (1e974 <__register_exitproc+0xec>)
   1e8a8:	681c      	ldr	r4, [r3, #0]
   1e8aa:	23a4      	movs	r3, #164	; 0xa4
   1e8ac:	005b      	lsls	r3, r3, #1
   1e8ae:	58e0      	ldr	r0, [r4, r3]
   1e8b0:	2800      	cmp	r0, #0
   1e8b2:	d052      	beq.n	1e95a <__register_exitproc+0xd2>
   1e8b4:	6843      	ldr	r3, [r0, #4]
   1e8b6:	2b1f      	cmp	r3, #31
   1e8b8:	dc13      	bgt.n	1e8e2 <__register_exitproc+0x5a>
   1e8ba:	1c5a      	adds	r2, r3, #1
   1e8bc:	9201      	str	r2, [sp, #4]
   1e8be:	2e00      	cmp	r6, #0
   1e8c0:	d128      	bne.n	1e914 <__register_exitproc+0x8c>
   1e8c2:	9a01      	ldr	r2, [sp, #4]
   1e8c4:	3302      	adds	r3, #2
   1e8c6:	009b      	lsls	r3, r3, #2
   1e8c8:	6042      	str	r2, [r0, #4]
   1e8ca:	501f      	str	r7, [r3, r0]
   1e8cc:	6828      	ldr	r0, [r5, #0]
   1e8ce:	f7fe fde1 	bl	1d494 <__retarget_lock_release_recursive>
   1e8d2:	2000      	movs	r0, #0
   1e8d4:	b003      	add	sp, #12
   1e8d6:	bc3c      	pop	{r2, r3, r4, r5}
   1e8d8:	4690      	mov	r8, r2
   1e8da:	4699      	mov	r9, r3
   1e8dc:	46a2      	mov	sl, r4
   1e8de:	46ab      	mov	fp, r5
   1e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8e2:	4b25      	ldr	r3, [pc, #148]	; (1e978 <__register_exitproc+0xf0>)
   1e8e4:	2b00      	cmp	r3, #0
   1e8e6:	d03d      	beq.n	1e964 <__register_exitproc+0xdc>
   1e8e8:	20c8      	movs	r0, #200	; 0xc8
   1e8ea:	0040      	lsls	r0, r0, #1
   1e8ec:	e000      	b.n	1e8f0 <__register_exitproc+0x68>
   1e8ee:	bf00      	nop
   1e8f0:	2800      	cmp	r0, #0
   1e8f2:	d037      	beq.n	1e964 <__register_exitproc+0xdc>
   1e8f4:	22a4      	movs	r2, #164	; 0xa4
   1e8f6:	2300      	movs	r3, #0
   1e8f8:	0052      	lsls	r2, r2, #1
   1e8fa:	58a1      	ldr	r1, [r4, r2]
   1e8fc:	6043      	str	r3, [r0, #4]
   1e8fe:	6001      	str	r1, [r0, #0]
   1e900:	50a0      	str	r0, [r4, r2]
   1e902:	3240      	adds	r2, #64	; 0x40
   1e904:	5083      	str	r3, [r0, r2]
   1e906:	3204      	adds	r2, #4
   1e908:	5083      	str	r3, [r0, r2]
   1e90a:	3301      	adds	r3, #1
   1e90c:	9301      	str	r3, [sp, #4]
   1e90e:	2300      	movs	r3, #0
   1e910:	2e00      	cmp	r6, #0
   1e912:	d0d6      	beq.n	1e8c2 <__register_exitproc+0x3a>
   1e914:	009a      	lsls	r2, r3, #2
   1e916:	4692      	mov	sl, r2
   1e918:	4482      	add	sl, r0
   1e91a:	464a      	mov	r2, r9
   1e91c:	2188      	movs	r1, #136	; 0x88
   1e91e:	4654      	mov	r4, sl
   1e920:	5062      	str	r2, [r4, r1]
   1e922:	22c4      	movs	r2, #196	; 0xc4
   1e924:	0052      	lsls	r2, r2, #1
   1e926:	4691      	mov	r9, r2
   1e928:	4481      	add	r9, r0
   1e92a:	464a      	mov	r2, r9
   1e92c:	3987      	subs	r1, #135	; 0x87
   1e92e:	4099      	lsls	r1, r3
   1e930:	6812      	ldr	r2, [r2, #0]
   1e932:	468b      	mov	fp, r1
   1e934:	430a      	orrs	r2, r1
   1e936:	4694      	mov	ip, r2
   1e938:	464a      	mov	r2, r9
   1e93a:	4661      	mov	r1, ip
   1e93c:	6011      	str	r1, [r2, #0]
   1e93e:	2284      	movs	r2, #132	; 0x84
   1e940:	4641      	mov	r1, r8
   1e942:	0052      	lsls	r2, r2, #1
   1e944:	50a1      	str	r1, [r4, r2]
   1e946:	2e02      	cmp	r6, #2
   1e948:	d1bb      	bne.n	1e8c2 <__register_exitproc+0x3a>
   1e94a:	0002      	movs	r2, r0
   1e94c:	465c      	mov	r4, fp
   1e94e:	328d      	adds	r2, #141	; 0x8d
   1e950:	32ff      	adds	r2, #255	; 0xff
   1e952:	6811      	ldr	r1, [r2, #0]
   1e954:	430c      	orrs	r4, r1
   1e956:	6014      	str	r4, [r2, #0]
   1e958:	e7b3      	b.n	1e8c2 <__register_exitproc+0x3a>
   1e95a:	0020      	movs	r0, r4
   1e95c:	304d      	adds	r0, #77	; 0x4d
   1e95e:	30ff      	adds	r0, #255	; 0xff
   1e960:	50e0      	str	r0, [r4, r3]
   1e962:	e7a7      	b.n	1e8b4 <__register_exitproc+0x2c>
   1e964:	6828      	ldr	r0, [r5, #0]
   1e966:	f7fe fd95 	bl	1d494 <__retarget_lock_release_recursive>
   1e96a:	2001      	movs	r0, #1
   1e96c:	4240      	negs	r0, r0
   1e96e:	e7b1      	b.n	1e8d4 <__register_exitproc+0x4c>
   1e970:	20000578 	.word	0x20000578
   1e974:	000201c8 	.word	0x000201c8
   1e978:	00000000 	.word	0x00000000

0001e97c <_calloc_r>:
   1e97c:	b510      	push	{r4, lr}
   1e97e:	4351      	muls	r1, r2
   1e980:	f7fe fe02 	bl	1d588 <_malloc_r>
   1e984:	1e04      	subs	r4, r0, #0
   1e986:	d01c      	beq.n	1e9c2 <_calloc_r+0x46>
   1e988:	0003      	movs	r3, r0
   1e98a:	3b08      	subs	r3, #8
   1e98c:	685a      	ldr	r2, [r3, #4]
   1e98e:	2303      	movs	r3, #3
   1e990:	439a      	bics	r2, r3
   1e992:	3a04      	subs	r2, #4
   1e994:	2a24      	cmp	r2, #36	; 0x24
   1e996:	d816      	bhi.n	1e9c6 <_calloc_r+0x4a>
   1e998:	0003      	movs	r3, r0
   1e99a:	2a13      	cmp	r2, #19
   1e99c:	d90d      	bls.n	1e9ba <_calloc_r+0x3e>
   1e99e:	2100      	movs	r1, #0
   1e9a0:	3308      	adds	r3, #8
   1e9a2:	6001      	str	r1, [r0, #0]
   1e9a4:	6041      	str	r1, [r0, #4]
   1e9a6:	2a1b      	cmp	r2, #27
   1e9a8:	d907      	bls.n	1e9ba <_calloc_r+0x3e>
   1e9aa:	6081      	str	r1, [r0, #8]
   1e9ac:	60c1      	str	r1, [r0, #12]
   1e9ae:	2a24      	cmp	r2, #36	; 0x24
   1e9b0:	d10d      	bne.n	1e9ce <_calloc_r+0x52>
   1e9b2:	0003      	movs	r3, r0
   1e9b4:	6101      	str	r1, [r0, #16]
   1e9b6:	3318      	adds	r3, #24
   1e9b8:	6141      	str	r1, [r0, #20]
   1e9ba:	2200      	movs	r2, #0
   1e9bc:	601a      	str	r2, [r3, #0]
   1e9be:	605a      	str	r2, [r3, #4]
   1e9c0:	609a      	str	r2, [r3, #8]
   1e9c2:	0020      	movs	r0, r4
   1e9c4:	bd10      	pop	{r4, pc}
   1e9c6:	2100      	movs	r1, #0
   1e9c8:	f7fb fb8a 	bl	1a0e0 <memset>
   1e9cc:	e7f9      	b.n	1e9c2 <_calloc_r+0x46>
   1e9ce:	0003      	movs	r3, r0
   1e9d0:	3310      	adds	r3, #16
   1e9d2:	e7f2      	b.n	1e9ba <_calloc_r+0x3e>

0001e9d4 <_close_r>:
   1e9d4:	2300      	movs	r3, #0
   1e9d6:	b570      	push	{r4, r5, r6, lr}
   1e9d8:	4c06      	ldr	r4, [pc, #24]	; (1e9f4 <_close_r+0x20>)
   1e9da:	0005      	movs	r5, r0
   1e9dc:	0008      	movs	r0, r1
   1e9de:	6023      	str	r3, [r4, #0]
   1e9e0:	f7e2 f80c 	bl	9fc <_close>
   1e9e4:	1c43      	adds	r3, r0, #1
   1e9e6:	d000      	beq.n	1e9ea <_close_r+0x16>
   1e9e8:	bd70      	pop	{r4, r5, r6, pc}
   1e9ea:	6823      	ldr	r3, [r4, #0]
   1e9ec:	2b00      	cmp	r3, #0
   1e9ee:	d0fb      	beq.n	1e9e8 <_close_r+0x14>
   1e9f0:	602b      	str	r3, [r5, #0]
   1e9f2:	e7f9      	b.n	1e9e8 <_close_r+0x14>
   1e9f4:	20001df0 	.word	0x20001df0

0001e9f8 <_fclose_r>:
   1e9f8:	b570      	push	{r4, r5, r6, lr}
   1e9fa:	0005      	movs	r5, r0
   1e9fc:	1e0c      	subs	r4, r1, #0
   1e9fe:	d040      	beq.n	1ea82 <_fclose_r+0x8a>
   1ea00:	2800      	cmp	r0, #0
   1ea02:	d002      	beq.n	1ea0a <_fclose_r+0x12>
   1ea04:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ea06:	2b00      	cmp	r3, #0
   1ea08:	d03e      	beq.n	1ea88 <_fclose_r+0x90>
   1ea0a:	2601      	movs	r6, #1
   1ea0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ea0e:	4233      	tst	r3, r6
   1ea10:	d133      	bne.n	1ea7a <_fclose_r+0x82>
   1ea12:	89a3      	ldrh	r3, [r4, #12]
   1ea14:	059b      	lsls	r3, r3, #22
   1ea16:	d543      	bpl.n	1eaa0 <_fclose_r+0xa8>
   1ea18:	0021      	movs	r1, r4
   1ea1a:	0028      	movs	r0, r5
   1ea1c:	f7fe f8e4 	bl	1cbe8 <__sflush_r>
   1ea20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ea22:	0006      	movs	r6, r0
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d004      	beq.n	1ea32 <_fclose_r+0x3a>
   1ea28:	69e1      	ldr	r1, [r4, #28]
   1ea2a:	0028      	movs	r0, r5
   1ea2c:	4798      	blx	r3
   1ea2e:	2800      	cmp	r0, #0
   1ea30:	db44      	blt.n	1eabc <_fclose_r+0xc4>
   1ea32:	89a3      	ldrh	r3, [r4, #12]
   1ea34:	061b      	lsls	r3, r3, #24
   1ea36:	d42a      	bmi.n	1ea8e <_fclose_r+0x96>
   1ea38:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1ea3a:	2900      	cmp	r1, #0
   1ea3c:	d008      	beq.n	1ea50 <_fclose_r+0x58>
   1ea3e:	0023      	movs	r3, r4
   1ea40:	3340      	adds	r3, #64	; 0x40
   1ea42:	4299      	cmp	r1, r3
   1ea44:	d002      	beq.n	1ea4c <_fclose_r+0x54>
   1ea46:	0028      	movs	r0, r5
   1ea48:	f7fe fa7a 	bl	1cf40 <_free_r>
   1ea4c:	2300      	movs	r3, #0
   1ea4e:	6323      	str	r3, [r4, #48]	; 0x30
   1ea50:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1ea52:	2900      	cmp	r1, #0
   1ea54:	d004      	beq.n	1ea60 <_fclose_r+0x68>
   1ea56:	0028      	movs	r0, r5
   1ea58:	f7fe fa72 	bl	1cf40 <_free_r>
   1ea5c:	2300      	movs	r3, #0
   1ea5e:	6463      	str	r3, [r4, #68]	; 0x44
   1ea60:	f7fe f9f4 	bl	1ce4c <__sfp_lock_acquire>
   1ea64:	2300      	movs	r3, #0
   1ea66:	81a3      	strh	r3, [r4, #12]
   1ea68:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ea6a:	07db      	lsls	r3, r3, #31
   1ea6c:	d514      	bpl.n	1ea98 <_fclose_r+0xa0>
   1ea6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ea70:	f7fe fd0c 	bl	1d48c <__retarget_lock_close_recursive>
   1ea74:	f7fe f9f2 	bl	1ce5c <__sfp_lock_release>
   1ea78:	e004      	b.n	1ea84 <_fclose_r+0x8c>
   1ea7a:	220c      	movs	r2, #12
   1ea7c:	5ea3      	ldrsh	r3, [r4, r2]
   1ea7e:	2b00      	cmp	r3, #0
   1ea80:	d1ca      	bne.n	1ea18 <_fclose_r+0x20>
   1ea82:	2600      	movs	r6, #0
   1ea84:	0030      	movs	r0, r6
   1ea86:	bd70      	pop	{r4, r5, r6, pc}
   1ea88:	f7fe f9b0 	bl	1cdec <__sinit>
   1ea8c:	e7bd      	b.n	1ea0a <_fclose_r+0x12>
   1ea8e:	6921      	ldr	r1, [r4, #16]
   1ea90:	0028      	movs	r0, r5
   1ea92:	f7fe fa55 	bl	1cf40 <_free_r>
   1ea96:	e7cf      	b.n	1ea38 <_fclose_r+0x40>
   1ea98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ea9a:	f7fe fcfb 	bl	1d494 <__retarget_lock_release_recursive>
   1ea9e:	e7e6      	b.n	1ea6e <_fclose_r+0x76>
   1eaa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eaa2:	f7fe fcf5 	bl	1d490 <__retarget_lock_acquire_recursive>
   1eaa6:	220c      	movs	r2, #12
   1eaa8:	5ea3      	ldrsh	r3, [r4, r2]
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	d1b4      	bne.n	1ea18 <_fclose_r+0x20>
   1eaae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1eab0:	401e      	ands	r6, r3
   1eab2:	d1e6      	bne.n	1ea82 <_fclose_r+0x8a>
   1eab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eab6:	f7fe fced 	bl	1d494 <__retarget_lock_release_recursive>
   1eaba:	e7e3      	b.n	1ea84 <_fclose_r+0x8c>
   1eabc:	2601      	movs	r6, #1
   1eabe:	4276      	negs	r6, r6
   1eac0:	e7b7      	b.n	1ea32 <_fclose_r+0x3a>
   1eac2:	46c0      	nop			; (mov r8, r8)

0001eac4 <__fputwc>:
   1eac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eac6:	46ce      	mov	lr, r9
   1eac8:	4647      	mov	r7, r8
   1eaca:	b580      	push	{r7, lr}
   1eacc:	b085      	sub	sp, #20
   1eace:	4680      	mov	r8, r0
   1ead0:	4689      	mov	r9, r1
   1ead2:	0014      	movs	r4, r2
   1ead4:	f7fe fcba 	bl	1d44c <__locale_mb_cur_max>
   1ead8:	2801      	cmp	r0, #1
   1eada:	d031      	beq.n	1eb40 <__fputwc+0x7c>
   1eadc:	0023      	movs	r3, r4
   1eade:	af03      	add	r7, sp, #12
   1eae0:	335c      	adds	r3, #92	; 0x5c
   1eae2:	464a      	mov	r2, r9
   1eae4:	0039      	movs	r1, r7
   1eae6:	4640      	mov	r0, r8
   1eae8:	f000 f912 	bl	1ed10 <_wcrtomb_r>
   1eaec:	0006      	movs	r6, r0
   1eaee:	1c43      	adds	r3, r0, #1
   1eaf0:	d021      	beq.n	1eb36 <__fputwc+0x72>
   1eaf2:	2800      	cmp	r0, #0
   1eaf4:	d030      	beq.n	1eb58 <__fputwc+0x94>
   1eaf6:	7839      	ldrb	r1, [r7, #0]
   1eaf8:	2500      	movs	r5, #0
   1eafa:	e007      	b.n	1eb0c <__fputwc+0x48>
   1eafc:	6823      	ldr	r3, [r4, #0]
   1eafe:	1c5a      	adds	r2, r3, #1
   1eb00:	6022      	str	r2, [r4, #0]
   1eb02:	7019      	strb	r1, [r3, #0]
   1eb04:	3501      	adds	r5, #1
   1eb06:	42b5      	cmp	r5, r6
   1eb08:	d226      	bcs.n	1eb58 <__fputwc+0x94>
   1eb0a:	5d79      	ldrb	r1, [r7, r5]
   1eb0c:	68a3      	ldr	r3, [r4, #8]
   1eb0e:	3b01      	subs	r3, #1
   1eb10:	60a3      	str	r3, [r4, #8]
   1eb12:	2b00      	cmp	r3, #0
   1eb14:	daf2      	bge.n	1eafc <__fputwc+0x38>
   1eb16:	69a2      	ldr	r2, [r4, #24]
   1eb18:	4293      	cmp	r3, r2
   1eb1a:	db01      	blt.n	1eb20 <__fputwc+0x5c>
   1eb1c:	290a      	cmp	r1, #10
   1eb1e:	d1ed      	bne.n	1eafc <__fputwc+0x38>
   1eb20:	0022      	movs	r2, r4
   1eb22:	4640      	mov	r0, r8
   1eb24:	f000 f896 	bl	1ec54 <__swbuf_r>
   1eb28:	1c43      	adds	r3, r0, #1
   1eb2a:	d1eb      	bne.n	1eb04 <__fputwc+0x40>
   1eb2c:	b005      	add	sp, #20
   1eb2e:	bc0c      	pop	{r2, r3}
   1eb30:	4690      	mov	r8, r2
   1eb32:	4699      	mov	r9, r3
   1eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb36:	2240      	movs	r2, #64	; 0x40
   1eb38:	89a3      	ldrh	r3, [r4, #12]
   1eb3a:	4313      	orrs	r3, r2
   1eb3c:	81a3      	strh	r3, [r4, #12]
   1eb3e:	e7f5      	b.n	1eb2c <__fputwc+0x68>
   1eb40:	464b      	mov	r3, r9
   1eb42:	3b01      	subs	r3, #1
   1eb44:	2bfe      	cmp	r3, #254	; 0xfe
   1eb46:	d8c9      	bhi.n	1eadc <__fputwc+0x18>
   1eb48:	466a      	mov	r2, sp
   1eb4a:	464b      	mov	r3, r9
   1eb4c:	71d3      	strb	r3, [r2, #7]
   1eb4e:	79d1      	ldrb	r1, [r2, #7]
   1eb50:	af03      	add	r7, sp, #12
   1eb52:	7039      	strb	r1, [r7, #0]
   1eb54:	2601      	movs	r6, #1
   1eb56:	e7cf      	b.n	1eaf8 <__fputwc+0x34>
   1eb58:	4648      	mov	r0, r9
   1eb5a:	e7e7      	b.n	1eb2c <__fputwc+0x68>

0001eb5c <_fputwc_r>:
   1eb5c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1eb5e:	b570      	push	{r4, r5, r6, lr}
   1eb60:	0005      	movs	r5, r0
   1eb62:	000e      	movs	r6, r1
   1eb64:	0014      	movs	r4, r2
   1eb66:	07db      	lsls	r3, r3, #31
   1eb68:	d41e      	bmi.n	1eba8 <_fputwc_r+0x4c>
   1eb6a:	230c      	movs	r3, #12
   1eb6c:	5ed2      	ldrsh	r2, [r2, r3]
   1eb6e:	b291      	uxth	r1, r2
   1eb70:	058b      	lsls	r3, r1, #22
   1eb72:	d516      	bpl.n	1eba2 <_fputwc_r+0x46>
   1eb74:	2380      	movs	r3, #128	; 0x80
   1eb76:	019b      	lsls	r3, r3, #6
   1eb78:	4219      	tst	r1, r3
   1eb7a:	d104      	bne.n	1eb86 <_fputwc_r+0x2a>
   1eb7c:	431a      	orrs	r2, r3
   1eb7e:	81a2      	strh	r2, [r4, #12]
   1eb80:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1eb82:	4313      	orrs	r3, r2
   1eb84:	6663      	str	r3, [r4, #100]	; 0x64
   1eb86:	0028      	movs	r0, r5
   1eb88:	0022      	movs	r2, r4
   1eb8a:	0031      	movs	r1, r6
   1eb8c:	f7ff ff9a 	bl	1eac4 <__fputwc>
   1eb90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1eb92:	0005      	movs	r5, r0
   1eb94:	07db      	lsls	r3, r3, #31
   1eb96:	d402      	bmi.n	1eb9e <_fputwc_r+0x42>
   1eb98:	89a3      	ldrh	r3, [r4, #12]
   1eb9a:	059b      	lsls	r3, r3, #22
   1eb9c:	d508      	bpl.n	1ebb0 <_fputwc_r+0x54>
   1eb9e:	0028      	movs	r0, r5
   1eba0:	bd70      	pop	{r4, r5, r6, pc}
   1eba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1eba4:	f7fe fc74 	bl	1d490 <__retarget_lock_acquire_recursive>
   1eba8:	230c      	movs	r3, #12
   1ebaa:	5ee2      	ldrsh	r2, [r4, r3]
   1ebac:	b291      	uxth	r1, r2
   1ebae:	e7e1      	b.n	1eb74 <_fputwc_r+0x18>
   1ebb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ebb2:	f7fe fc6f 	bl	1d494 <__retarget_lock_release_recursive>
   1ebb6:	e7f2      	b.n	1eb9e <_fputwc_r+0x42>

0001ebb8 <_fstat_r>:
   1ebb8:	2300      	movs	r3, #0
   1ebba:	b570      	push	{r4, r5, r6, lr}
   1ebbc:	4c07      	ldr	r4, [pc, #28]	; (1ebdc <_fstat_r+0x24>)
   1ebbe:	0005      	movs	r5, r0
   1ebc0:	0008      	movs	r0, r1
   1ebc2:	0011      	movs	r1, r2
   1ebc4:	6023      	str	r3, [r4, #0]
   1ebc6:	f7e1 ff23 	bl	a10 <_fstat>
   1ebca:	1c43      	adds	r3, r0, #1
   1ebcc:	d000      	beq.n	1ebd0 <_fstat_r+0x18>
   1ebce:	bd70      	pop	{r4, r5, r6, pc}
   1ebd0:	6823      	ldr	r3, [r4, #0]
   1ebd2:	2b00      	cmp	r3, #0
   1ebd4:	d0fb      	beq.n	1ebce <_fstat_r+0x16>
   1ebd6:	602b      	str	r3, [r5, #0]
   1ebd8:	e7f9      	b.n	1ebce <_fstat_r+0x16>
   1ebda:	46c0      	nop			; (mov r8, r8)
   1ebdc:	20001df0 	.word	0x20001df0

0001ebe0 <_isatty_r>:
   1ebe0:	2300      	movs	r3, #0
   1ebe2:	b570      	push	{r4, r5, r6, lr}
   1ebe4:	4c06      	ldr	r4, [pc, #24]	; (1ec00 <_isatty_r+0x20>)
   1ebe6:	0005      	movs	r5, r0
   1ebe8:	0008      	movs	r0, r1
   1ebea:	6023      	str	r3, [r4, #0]
   1ebec:	f7e1 ff1e 	bl	a2c <_isatty>
   1ebf0:	1c43      	adds	r3, r0, #1
   1ebf2:	d000      	beq.n	1ebf6 <_isatty_r+0x16>
   1ebf4:	bd70      	pop	{r4, r5, r6, pc}
   1ebf6:	6823      	ldr	r3, [r4, #0]
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	d0fb      	beq.n	1ebf4 <_isatty_r+0x14>
   1ebfc:	602b      	str	r3, [r5, #0]
   1ebfe:	e7f9      	b.n	1ebf4 <_isatty_r+0x14>
   1ec00:	20001df0 	.word	0x20001df0

0001ec04 <_lseek_r>:
   1ec04:	b570      	push	{r4, r5, r6, lr}
   1ec06:	0005      	movs	r5, r0
   1ec08:	0008      	movs	r0, r1
   1ec0a:	0011      	movs	r1, r2
   1ec0c:	2200      	movs	r2, #0
   1ec0e:	4c06      	ldr	r4, [pc, #24]	; (1ec28 <_lseek_r+0x24>)
   1ec10:	6022      	str	r2, [r4, #0]
   1ec12:	001a      	movs	r2, r3
   1ec14:	f7e1 ff13 	bl	a3e <_lseek>
   1ec18:	1c43      	adds	r3, r0, #1
   1ec1a:	d000      	beq.n	1ec1e <_lseek_r+0x1a>
   1ec1c:	bd70      	pop	{r4, r5, r6, pc}
   1ec1e:	6823      	ldr	r3, [r4, #0]
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d0fb      	beq.n	1ec1c <_lseek_r+0x18>
   1ec24:	602b      	str	r3, [r5, #0]
   1ec26:	e7f9      	b.n	1ec1c <_lseek_r+0x18>
   1ec28:	20001df0 	.word	0x20001df0

0001ec2c <_read_r>:
   1ec2c:	b570      	push	{r4, r5, r6, lr}
   1ec2e:	0005      	movs	r5, r0
   1ec30:	0008      	movs	r0, r1
   1ec32:	0011      	movs	r1, r2
   1ec34:	2200      	movs	r2, #0
   1ec36:	4c06      	ldr	r4, [pc, #24]	; (1ec50 <_read_r+0x24>)
   1ec38:	6022      	str	r2, [r4, #0]
   1ec3a:	001a      	movs	r2, r3
   1ec3c:	f7e3 ffd0 	bl	2be0 <_read>
   1ec40:	1c43      	adds	r3, r0, #1
   1ec42:	d000      	beq.n	1ec46 <_read_r+0x1a>
   1ec44:	bd70      	pop	{r4, r5, r6, pc}
   1ec46:	6823      	ldr	r3, [r4, #0]
   1ec48:	2b00      	cmp	r3, #0
   1ec4a:	d0fb      	beq.n	1ec44 <_read_r+0x18>
   1ec4c:	602b      	str	r3, [r5, #0]
   1ec4e:	e7f9      	b.n	1ec44 <_read_r+0x18>
   1ec50:	20001df0 	.word	0x20001df0

0001ec54 <__swbuf_r>:
   1ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec56:	0006      	movs	r6, r0
   1ec58:	000d      	movs	r5, r1
   1ec5a:	0014      	movs	r4, r2
   1ec5c:	2800      	cmp	r0, #0
   1ec5e:	d002      	beq.n	1ec66 <__swbuf_r+0x12>
   1ec60:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ec62:	2b00      	cmp	r3, #0
   1ec64:	d04e      	beq.n	1ed04 <__swbuf_r+0xb0>
   1ec66:	69a3      	ldr	r3, [r4, #24]
   1ec68:	60a3      	str	r3, [r4, #8]
   1ec6a:	230c      	movs	r3, #12
   1ec6c:	5ee0      	ldrsh	r0, [r4, r3]
   1ec6e:	b281      	uxth	r1, r0
   1ec70:	070b      	lsls	r3, r1, #28
   1ec72:	d53c      	bpl.n	1ecee <__swbuf_r+0x9a>
   1ec74:	6923      	ldr	r3, [r4, #16]
   1ec76:	2b00      	cmp	r3, #0
   1ec78:	d039      	beq.n	1ecee <__swbuf_r+0x9a>
   1ec7a:	22ff      	movs	r2, #255	; 0xff
   1ec7c:	b2ef      	uxtb	r7, r5
   1ec7e:	4015      	ands	r5, r2
   1ec80:	2280      	movs	r2, #128	; 0x80
   1ec82:	0192      	lsls	r2, r2, #6
   1ec84:	4211      	tst	r1, r2
   1ec86:	d015      	beq.n	1ecb4 <__swbuf_r+0x60>
   1ec88:	6822      	ldr	r2, [r4, #0]
   1ec8a:	6961      	ldr	r1, [r4, #20]
   1ec8c:	1ad3      	subs	r3, r2, r3
   1ec8e:	428b      	cmp	r3, r1
   1ec90:	da1b      	bge.n	1ecca <__swbuf_r+0x76>
   1ec92:	3301      	adds	r3, #1
   1ec94:	68a1      	ldr	r1, [r4, #8]
   1ec96:	3901      	subs	r1, #1
   1ec98:	60a1      	str	r1, [r4, #8]
   1ec9a:	1c51      	adds	r1, r2, #1
   1ec9c:	6021      	str	r1, [r4, #0]
   1ec9e:	7017      	strb	r7, [r2, #0]
   1eca0:	6962      	ldr	r2, [r4, #20]
   1eca2:	429a      	cmp	r2, r3
   1eca4:	d01a      	beq.n	1ecdc <__swbuf_r+0x88>
   1eca6:	89a3      	ldrh	r3, [r4, #12]
   1eca8:	07db      	lsls	r3, r3, #31
   1ecaa:	d501      	bpl.n	1ecb0 <__swbuf_r+0x5c>
   1ecac:	2d0a      	cmp	r5, #10
   1ecae:	d015      	beq.n	1ecdc <__swbuf_r+0x88>
   1ecb0:	0028      	movs	r0, r5
   1ecb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ecb4:	4302      	orrs	r2, r0
   1ecb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1ecb8:	81a2      	strh	r2, [r4, #12]
   1ecba:	4a14      	ldr	r2, [pc, #80]	; (1ed0c <__swbuf_r+0xb8>)
   1ecbc:	400a      	ands	r2, r1
   1ecbe:	6662      	str	r2, [r4, #100]	; 0x64
   1ecc0:	6961      	ldr	r1, [r4, #20]
   1ecc2:	6822      	ldr	r2, [r4, #0]
   1ecc4:	1ad3      	subs	r3, r2, r3
   1ecc6:	428b      	cmp	r3, r1
   1ecc8:	dbe3      	blt.n	1ec92 <__swbuf_r+0x3e>
   1ecca:	0021      	movs	r1, r4
   1eccc:	0030      	movs	r0, r6
   1ecce:	f7fe f833 	bl	1cd38 <_fflush_r>
   1ecd2:	2800      	cmp	r0, #0
   1ecd4:	d108      	bne.n	1ece8 <__swbuf_r+0x94>
   1ecd6:	6822      	ldr	r2, [r4, #0]
   1ecd8:	2301      	movs	r3, #1
   1ecda:	e7db      	b.n	1ec94 <__swbuf_r+0x40>
   1ecdc:	0021      	movs	r1, r4
   1ecde:	0030      	movs	r0, r6
   1ece0:	f7fe f82a 	bl	1cd38 <_fflush_r>
   1ece4:	2800      	cmp	r0, #0
   1ece6:	d0e3      	beq.n	1ecb0 <__swbuf_r+0x5c>
   1ece8:	2501      	movs	r5, #1
   1ecea:	426d      	negs	r5, r5
   1ecec:	e7e0      	b.n	1ecb0 <__swbuf_r+0x5c>
   1ecee:	0021      	movs	r1, r4
   1ecf0:	0030      	movs	r0, r6
   1ecf2:	f7fc fe8d 	bl	1ba10 <__swsetup_r>
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	d1f6      	bne.n	1ece8 <__swbuf_r+0x94>
   1ecfa:	230c      	movs	r3, #12
   1ecfc:	5ee0      	ldrsh	r0, [r4, r3]
   1ecfe:	6923      	ldr	r3, [r4, #16]
   1ed00:	b281      	uxth	r1, r0
   1ed02:	e7ba      	b.n	1ec7a <__swbuf_r+0x26>
   1ed04:	f7fe f872 	bl	1cdec <__sinit>
   1ed08:	e7ad      	b.n	1ec66 <__swbuf_r+0x12>
   1ed0a:	46c0      	nop			; (mov r8, r8)
   1ed0c:	ffffdfff 	.word	0xffffdfff

0001ed10 <_wcrtomb_r>:
   1ed10:	b570      	push	{r4, r5, r6, lr}
   1ed12:	001d      	movs	r5, r3
   1ed14:	4b11      	ldr	r3, [pc, #68]	; (1ed5c <_wcrtomb_r+0x4c>)
   1ed16:	b084      	sub	sp, #16
   1ed18:	681b      	ldr	r3, [r3, #0]
   1ed1a:	0004      	movs	r4, r0
   1ed1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ed1e:	2900      	cmp	r1, #0
   1ed20:	d00e      	beq.n	1ed40 <_wcrtomb_r+0x30>
   1ed22:	2b00      	cmp	r3, #0
   1ed24:	d016      	beq.n	1ed54 <_wcrtomb_r+0x44>
   1ed26:	20e0      	movs	r0, #224	; 0xe0
   1ed28:	581e      	ldr	r6, [r3, r0]
   1ed2a:	002b      	movs	r3, r5
   1ed2c:	0020      	movs	r0, r4
   1ed2e:	47b0      	blx	r6
   1ed30:	1c43      	adds	r3, r0, #1
   1ed32:	d103      	bne.n	1ed3c <_wcrtomb_r+0x2c>
   1ed34:	2300      	movs	r3, #0
   1ed36:	602b      	str	r3, [r5, #0]
   1ed38:	338a      	adds	r3, #138	; 0x8a
   1ed3a:	6023      	str	r3, [r4, #0]
   1ed3c:	b004      	add	sp, #16
   1ed3e:	bd70      	pop	{r4, r5, r6, pc}
   1ed40:	2b00      	cmp	r3, #0
   1ed42:	d009      	beq.n	1ed58 <_wcrtomb_r+0x48>
   1ed44:	22e0      	movs	r2, #224	; 0xe0
   1ed46:	a901      	add	r1, sp, #4
   1ed48:	589e      	ldr	r6, [r3, r2]
   1ed4a:	0020      	movs	r0, r4
   1ed4c:	002b      	movs	r3, r5
   1ed4e:	2200      	movs	r2, #0
   1ed50:	47b0      	blx	r6
   1ed52:	e7ed      	b.n	1ed30 <_wcrtomb_r+0x20>
   1ed54:	4b02      	ldr	r3, [pc, #8]	; (1ed60 <_wcrtomb_r+0x50>)
   1ed56:	e7e6      	b.n	1ed26 <_wcrtomb_r+0x16>
   1ed58:	4b01      	ldr	r3, [pc, #4]	; (1ed60 <_wcrtomb_r+0x50>)
   1ed5a:	e7f3      	b.n	1ed44 <_wcrtomb_r+0x34>
   1ed5c:	20000148 	.word	0x20000148
   1ed60:	2000057c 	.word	0x2000057c

0001ed64 <__aeabi_dcmpun>:
   1ed64:	b570      	push	{r4, r5, r6, lr}
   1ed66:	4e0e      	ldr	r6, [pc, #56]	; (1eda0 <__aeabi_dcmpun+0x3c>)
   1ed68:	030d      	lsls	r5, r1, #12
   1ed6a:	031c      	lsls	r4, r3, #12
   1ed6c:	0049      	lsls	r1, r1, #1
   1ed6e:	005b      	lsls	r3, r3, #1
   1ed70:	0b2d      	lsrs	r5, r5, #12
   1ed72:	0d49      	lsrs	r1, r1, #21
   1ed74:	0b24      	lsrs	r4, r4, #12
   1ed76:	0d5b      	lsrs	r3, r3, #21
   1ed78:	42b1      	cmp	r1, r6
   1ed7a:	d004      	beq.n	1ed86 <__aeabi_dcmpun+0x22>
   1ed7c:	4908      	ldr	r1, [pc, #32]	; (1eda0 <__aeabi_dcmpun+0x3c>)
   1ed7e:	2000      	movs	r0, #0
   1ed80:	428b      	cmp	r3, r1
   1ed82:	d008      	beq.n	1ed96 <__aeabi_dcmpun+0x32>
   1ed84:	bd70      	pop	{r4, r5, r6, pc}
   1ed86:	4305      	orrs	r5, r0
   1ed88:	2001      	movs	r0, #1
   1ed8a:	2d00      	cmp	r5, #0
   1ed8c:	d1fa      	bne.n	1ed84 <__aeabi_dcmpun+0x20>
   1ed8e:	4904      	ldr	r1, [pc, #16]	; (1eda0 <__aeabi_dcmpun+0x3c>)
   1ed90:	2000      	movs	r0, #0
   1ed92:	428b      	cmp	r3, r1
   1ed94:	d1f6      	bne.n	1ed84 <__aeabi_dcmpun+0x20>
   1ed96:	4314      	orrs	r4, r2
   1ed98:	0020      	movs	r0, r4
   1ed9a:	1e44      	subs	r4, r0, #1
   1ed9c:	41a0      	sbcs	r0, r4
   1ed9e:	e7f1      	b.n	1ed84 <__aeabi_dcmpun+0x20>
   1eda0:	000007ff 	.word	0x000007ff
   1eda4:	2e2f2e2e 	.word	0x2e2f2e2e
   1eda8:	2e2e2f2e 	.word	0x2e2e2f2e
   1edac:	2f2e2e2f 	.word	0x2f2e2e2f
   1edb0:	2f637273 	.word	0x2f637273
   1edb4:	72616f62 	.word	0x72616f62
   1edb8:	6d2f7364 	.word	0x6d2f7364
   1edbc:	732f7563 	.word	0x732f7563
   1edc0:	326c6d61 	.word	0x326c6d61
   1edc4:	61682f31 	.word	0x61682f31
   1edc8:	72732f6c 	.word	0x72732f6c
   1edcc:	61682f63 	.word	0x61682f63
   1edd0:	6f695f6c 	.word	0x6f695f6c
   1edd4:	0000632e 	.word	0x0000632e
   1edd8:	2e2f2e2e 	.word	0x2e2f2e2e
   1eddc:	2e2e2f2e 	.word	0x2e2e2f2e
   1ede0:	2f2e2e2f 	.word	0x2f2e2e2f
   1ede4:	2f637273 	.word	0x2f637273
   1ede8:	72616f62 	.word	0x72616f62
   1edec:	6d2f7364 	.word	0x6d2f7364
   1edf0:	732f7563 	.word	0x732f7563
   1edf4:	326c6d61 	.word	0x326c6d61
   1edf8:	61682f31 	.word	0x61682f31
   1edfc:	72732f6c 	.word	0x72732f6c
   1ee00:	61682f63 	.word	0x61682f63
   1ee04:	70735f6c 	.word	0x70735f6c
   1ee08:	5f6d5f69 	.word	0x5f6d5f69
   1ee0c:	636e7973 	.word	0x636e7973
   1ee10:	0000632e 	.word	0x0000632e
   1ee14:	2e2f2e2e 	.word	0x2e2f2e2e
   1ee18:	2e2e2f2e 	.word	0x2e2e2f2e
   1ee1c:	2f2e2e2f 	.word	0x2f2e2e2f
   1ee20:	2f637273 	.word	0x2f637273
   1ee24:	72616f62 	.word	0x72616f62
   1ee28:	6d2f7364 	.word	0x6d2f7364
   1ee2c:	732f7563 	.word	0x732f7563
   1ee30:	326c6d61 	.word	0x326c6d61
   1ee34:	61682f31 	.word	0x61682f31
   1ee38:	72732f6c 	.word	0x72732f6c
   1ee3c:	61682f63 	.word	0x61682f63
   1ee40:	73755f6c 	.word	0x73755f6c
   1ee44:	5f747261 	.word	0x5f747261
   1ee48:	636e7973 	.word	0x636e7973
   1ee4c:	0000632e 	.word	0x0000632e
   1ee50:	2e2f2e2e 	.word	0x2e2f2e2e
   1ee54:	2e2e2f2e 	.word	0x2e2e2f2e
   1ee58:	2f2e2e2f 	.word	0x2f2e2e2f
   1ee5c:	2f637273 	.word	0x2f637273
   1ee60:	72616f62 	.word	0x72616f62
   1ee64:	6d2f7364 	.word	0x6d2f7364
   1ee68:	732f7563 	.word	0x732f7563
   1ee6c:	326c6d61 	.word	0x326c6d61
   1ee70:	70682f31 	.word	0x70682f31
   1ee74:	6f632f6c 	.word	0x6f632f6c
   1ee78:	682f6572 	.word	0x682f6572
   1ee7c:	635f6c70 	.word	0x635f6c70
   1ee80:	5f65726f 	.word	0x5f65726f
   1ee84:	6c70306d 	.word	0x6c70306d
   1ee88:	625f7375 	.word	0x625f7375
   1ee8c:	2e657361 	.word	0x2e657361
   1ee90:	00000063 	.word	0x00000063
   1ee94:	00000b06 	.word	0x00000b06
   1ee98:	00000ae4 	.word	0x00000ae4
   1ee9c:	00000ac2 	.word	0x00000ac2
   1eea0:	00000aa0 	.word	0x00000aa0
   1eea4:	00000a7e 	.word	0x00000a7e
   1eea8:	00000bf2 	.word	0x00000bf2
   1eeac:	00000bd0 	.word	0x00000bd0
   1eeb0:	00000bbc 	.word	0x00000bbc
   1eeb4:	00000b9e 	.word	0x00000b9e
   1eeb8:	00000b86 	.word	0x00000b86

0001eebc <_map>:
   1eebc:	00000004 00000014 00000005 00000015     ................
   1eecc:	0000000c 0000002c 0000000d 0000002d     ....,.......-...
   1eedc:	0000000e 0000002e 0000000f 0000002f     ............/...
   1eeec:	2e2f2e2e 2e2e2f2e 2f2e2e2f 2f637273     ../../../../src/
   1eefc:	72616f62 6d2f7364 732f7563 326c6d61     boards/mcu/saml2
   1ef0c:	70682f31 69652f6c 70682f63 69655f6c     1/hpl/eic/hpl_ei
   1ef1c:	00632e63 2e2f2e2e 2e2e2f2e 2f2e2e2f     c.c.../../../../
   1ef2c:	2f637273 72616f62 6d2f7364 732f7563     src/boards/mcu/s
   1ef3c:	326c6d61 70682f31 65732f6c 6d6f6372     aml21/hpl/sercom
   1ef4c:	6c70682f 7265735f 2e6d6f63 00000063     /hpl_sercom.c...

0001ef5c <sercomspi_regs>:
   1ef5c:	0001000c 00020000 00000000 01ff0003     ................
   1ef6c:	00000005 2e2f2e2e 2e2e2f2e 2f2e2e2f     ....../../../../
   1ef7c:	2f637273 72616f62 6d2f7364 732f7563     src/boards/mcu/s
   1ef8c:	326c6d61 70682f31 6f702f6c 682f7472     aml21/hpl/port/h
   1ef9c:	675f6c70 5f6f6970 65736162 0000682e     pl_gpio_base.h..
   1efac:	2e2f2e2e 2e2e2f2e 2f2e2e2f 2f637273     ../../../../src/
   1efbc:	72616f62 6d2f7364 732f7563 326c6d61     boards/mcu/saml2
   1efcc:	70682f31 6f702f6c 682f7472 675f6c70     1/hpl/port/hpl_g
   1efdc:	5f6f6970 65736162 0000682e              pio_base.h..

0001efe8 <Radio>:
   1efe8:	00013361 00013465 00014d41 00013479     a3..e4..AM..y4..
   1eff8:	000134f5 000135c5 000137b1 00013ccd     .4...5...7...<..
   1f008:	0000476d 000140d1 00014449 00014609     mG...@..ID...F..
   1f018:	00014645 00014681 00014b01 00014b61     EF...F...K..aK..
   1f028:	00014c3d 00014e09 00014e35 00014e65     =L...N..5N..eN..
   1f038:	00014ef9 00014fe1 0001504d 00015099     .N...O..MP...P..
	...

0001f054 <LoRaMacMaxEirpTable>:
   1f054:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1f064:	00007ab0 00006af8 00006b4a 00006b9c     .z...j..Jk...k..
   1f074:	00006d44 00006de0 00006f32 00006fa2     Dm...m..2o...o..
   1f084:	000070aa 00007150 000072f2 000072a2     .p..Pq...r...r..
   1f094:	000073ce 000076b2 0000744e 000075a8     .s...v..Nt...u..
   1f0a4:	00007820 0000784a 00007926 00007a10      x..Jx..&y...z..
   1f0b4:	00007ab0 00007ab0 00007ab0 00007ab0     .z...z...z...z..
   1f0c4:	00007ab0 00007ab0 00007ab0 00007ab0     .z...z...z...z..
   1f0d4:	00007ab0 00007ab0 00007ab0 00007ab0     .z...z...z...z..
   1f0e4:	00007686 00009e92 00009ea4 00009eb8     .v..............
   1f0f4:	00009eca 00009eda 0000a11a 0000a11a     ................
   1f104:	0000a11a 0000a11a 0000a11a 0000a11a     ................
   1f114:	0000a11a 0000a11a 0000a11a 0000a11a     ................
   1f124:	0000a11a 0000a11a 0000a11a 0000a11a     ................
   1f134:	0000a11a 0000a11a 0000a11a 0000a11a     ................
   1f144:	0000a11a 0000a11a 0000a11a 00009eea     ................
   1f154:	00009efc 00009f10 00009f44 00009f5a     ........D...Z...
   1f164:	00009fa2 00009f6e 00009fd6 00009fe8     ....n...........
   1f174:	00009ffa 0000a00c 0000a01e 0000a030     ............0...
   1f184:	0000a042 0000a054 0000a078 0000a066     B...T...x...f...
   1f194:	0000a08a 0000a09c 0000a0ae 0000a0ce     ................
   1f1a4:	0000a0c2 0000a11a 0000a0de 0000a0f2     ................
   1f1b4:	0000a106 0000a196 0000a1ac 0000a1d6     ................
   1f1c4:	0000a1ea 0000a1fc 0000a20e 0000a23c     ............<...
   1f1d4:	0000a26a 0000a298 0000a2c6 0000a2f4     j...............
   1f1e4:	0000a322 0000a350 0000a37e 0000a3ac     "...P...~.......
   1f1f4:	0000a3da 0000a406 0000a430 0000a45a     ........0...Z...
   1f204:	0000a482 0000a4aa 0000a4e4 0000a50c     ................
   1f214:	0000a534 0000a55c 0000a584 0000a5ac     4...\...........
   1f224:	0000a5d2 0000aa98 0000a5e6 0000a6ac     ................
   1f234:	0000a746 0000a704 0000a788 0000a7b4     F...............
   1f244:	0000a7c6 0000a7d8 0000a7ea 0000a7fc     ................
   1f254:	0000a80e 0000a874 0000a912 0000a8ce     ....t...........
   1f264:	0000a958 0000a976 0000a994 0000a9a8     X...v...........
   1f274:	0000a9b8 0000a9de 0000aa16 0000aa56     ............V...
   1f284:	0000abfa 0000acb8 0000acde 0000ad04     ................
   1f294:	0000ad2a 0000ad3e 0000ae26 0000ae26     *...>...&...&...
   1f2a4:	0000ae26 0000ad5a 0000ae26 0000adec     &...Z...&.......
   1f2b4:	0000ad7e 0000adc8                       ~.......

0001f2bc <LoRaMacMaxEirpTable>:
   1f2bc:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001f2cc <CIDsStickyAnsCmds>:
   1f2cc:	0008050a 0000bc02 0000bbfe 0000bc02     ................
   1f2dc:	0000bc02 0000bc02 0000bbfe 0000bc02     ................
   1f2ec:	0000bc02 0000bbfe 0000bc02 0000bbfe     ................
   1f2fc:	0000bbfe 0000bc02 0000bc02 0000bc02     ................
   1f30c:	0000bc02 0000bc02 0000bc02 0000bc02     ................
   1f31c:	0000bc02 0000bc02 0000bc02 0000bc02     ................
   1f32c:	0000bc02 0000bc02 0000bc02 0000bc02     ................
   1f33c:	0000bc02 0000bc02 0000bc02 0000bc02     ................
   1f34c:	0000bc02 0000bbfe 0000d1f4 0000d1f8     ................
   1f35c:	0000d20e 0000d224 0000d23a 0000d244     ....$...:...D...
   1f36c:	0000d24e 0000d258 0000d2f2 0000d2ac     N...X...........
   1f37c:	0000d2b6 0000d2c0 0000d2ca 0000d2d4     ................
   1f38c:	0000d2de 0000d2e8 0000e1d2 0000e1e0     ................
   1f39c:	0000e1ee 0000e1fc 0000e18c 0000e2bc     ................
   1f3ac:	0000e2c0 0000e2c8 0000e2d0 0000e2d8     ................
   1f3bc:	0000e2e0 0000e2e8 0000e2f0              ............

0001f3c8 <LoRaMacMaxEirpTable>:
   1f3c8:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001f3d8 <DataratesEU868>:
   1f3d8:	090a0b0c 32070708                       .......2

0001f3e0 <BandwidthsEU868>:
   1f3e0:	0001e848 0001e848 0001e848 0001e848     H...H...H...H...
   1f3f0:	0001e848 0001e848 0003d090 00000000     H...H...........

0001f400 <MaxPayloadOfDatarateEU868>:
   1f400:	73333333 f2f2f2f2                       333s....

0001f408 <MaxPayloadOfDatarateRepeaterEU868>:
   1f408:	73333333 dededede 00010458 00010462     333s....X...b...
   1f418:	000105f0 000105f0 000105f0 0001046c     ............l...
   1f428:	000105f0 00010490 000105f0 0001049a     ................
   1f438:	000104a4 000104ae 000104b8 000104ce     ................
   1f448:	000104e4 000104ee 000104f8 00010504     ................
   1f458:	00010510 0001051a 00010524 00010530     ........$...0...
   1f468:	00010552 0001055c 00010566 00010570     R...\...f...p...
   1f478:	0001057a 00010584 0001058e 00010598     z...............
   1f488:	00010598 000105a2 000105ae 00010476     ............v...
   1f498:	000105f0 000105f0 000105f0 000105f0     ................
   1f4a8:	000105f0 000105f0 000105f0 000105f0     ................
   1f4b8:	000105f0 000105f0 000105f0 000105f0     ................
   1f4c8:	000105f0 000105b8 000105c2 000105dc     ................
   1f4d8:	000105f0 000105f0 000105e6 33be27a0     .............'.3
   1f4e8:	00000000 00000150 33c134e0 00000000     ....P....4.3....
   1f4f8:	00000150 33c44220 00000000 00000150     P... B.3....P...
   1f508:	000107d2 000107ec 00010806 0001083e     ............>...
   1f518:	00010820 00010820 0001083e 0001083e      ... ...>...>...
   1f528:	0001083e 0001083e 0001083a              >...>...:...

0001f534 <sbox>:
   1f534:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   1f544:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   1f554:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   1f564:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   1f574:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   1f584:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   1f594:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   1f5a4:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   1f5b4:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   1f5c4:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   1f5d4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   1f5e4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   1f5f4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   1f604:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   1f614:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   1f624:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0001f634 <gfm2_sbox>:
   1f634:	f6eef8c6 91ded6ff 56ce0260 ec4db5e7     ........`..V..M.
   1f644:	fa891f8f fb8eb2ef 455fb341 9be45323     ........A._E#S..
   1f654:	4c3de175 83f57e6c f9d15168 2a62abe2     u.=Ll~..hQ....b*
   1f664:	9d469508 2f0a3730 df1b240e ea7f4ecd     ..F.07./.$...N..
   1f674:	34581d12 5bb4dc36 7db776a4 135edd52     ..X46..[.v.}R.^.
   1f684:	c100b9a6 b679e340 72678dd4 85b09894     ....@.y...gr....
   1f694:	ed4fc5bb 11669a86 fe04e98a 4b2578a0     ..O...f......x%K
   1f6a4:	05805da2 f170213f 42af7763 bffde520     .]..?!p.cw.B ...
   1f6b4:	c3261881 2e8835be 7afc5593 e632bac8     ..&..5...U.z..2.
   1f6c4:	a39e19c0 0b3b5444 286bc78c ad16bca7     ....DT;...k(....
   1f6d4:	147464db b8480c92 c443bd9f f2d33139     .dt...H...C.91..
   1f6e4:	da6e8bd5 499cb101 cff3acd8 1047f4ca     ..n....I......G.
   1f6f4:	5c4af06f 97735738 3ee8a1cb 0f0d6196     o.J\8Ws....>.a..
   1f704:	cc717ce0 1cf70690 69ae6ac2 273a9917     .|q......j.i..:'
   1f714:	222bebd9 3307a9d2 c9153c2d a550aa87     ..+"...3-<....P.
   1f724:	1a095903 d084d765 1e5a2982 2c6da87b     .Y..e....)Z.{.m,

0001f734 <gfm3_sbox>:
   1f734:	8d9984a5 54b1bd0d 7da90350 9ae66219     .......TP..}.b..
   1f744:	87409d45 0bc9eb15 eafd67ec 5b96f7bf     E.@......g.....[
   1f754:	6aae1cc2 4f02415a 0834f45c 3f537393     ...jZA.O\.4..sS?
   1f764:	5e65520c b50fa128 3d9b3609 9fcd6926     .Re^(....6.=&i..
   1f774:	2e749e1b fbeeb22d ce614df6 97713e7b     ..t.-....Ma.{>q.
   1f784:	2c0068f5 edc81f60 4bd946be 4ae8d4de     .h.,`....F.K...J
   1f794:	16e52a6b 9455d7c5 810610cf e3ba44f0     k*....U......D..
   1f7a4:	8ac0fef3 0448bcad 6375c1df 6d0e1a30     ......H...uc0..m
   1f7b4:	2f35144c 39cca2e1 4782f257 952be7ac     L.5/...9W..G..+.
   1f7c4:	7fd198a0 83ab7e66 3cd329ca 761de279     ....f~...).<y..v
   1f7d4:	1e4e563b e46c0adb a6ef6e5d 8b37a4a8     ;VN...l.]n....7.
   1f7e4:	b7594332 e0d2648c 2507fab4 18e98eaf     2CY..d.....%....
   1f7f4:	726f88d5 51c7f124 219c7c23 8586dcdd     ..or$..Q#|.!....
   1f804:	aac44290 120105d8 d0f95fa3 b9275891     .B......._...X'.
   1f814:	33b31338 a78970bb 209222b6 7a78ff49     8..3.p...". I.xz
   1f824:	1780f88f b8c631da 1177b0c3 3ad6fccb     .....1....w....:

0001f834 <RadioRegsInit>:
   1f834:	00230c00 0e001e0d 011a00d2 00aa1f00     ..#.............
   1f844:	27000724 c1280012 00942900 3000c12a     $..'..(..)..*..0
   1f854:	8f3500d8 00023b00 41000040 40230130     ..5..;..@..A0.#@

0001f864 <FskBandwidths>:
   1f864:	00000a28 00000017 00000c1c 0000000f     (...............
   1f874:	00000f3c 00000007 00001450 00000016     <.......P.......
   1f884:	0000189c 0000000e 00001e78 00000006     ........x.......
   1f894:	000028a0 00000015 000030d4 0000000d     .(.......0......
   1f8a4:	00003cf0 00000005 00005140 00000014     .<......@Q......
   1f8b4:	000061a8 0000000c 00007a44 00000004     .a......Dz......
   1f8c4:	0000a2e4 00000013 0000c350 0000000b     ........P.......
   1f8d4:	0000f424 00000003 00014585 00000012     $........E......
   1f8e4:	000186a0 0000000a 0001e848 00000002     ........H.......
   1f8f4:	00028b2c 00000011 00030d40 00000009     ,.......@.......
   1f904:	0003d090 00000001 000493e0 00000000     ................
   1f914:	000147cc 000147e8 00014804 00014820     .G...G...H.. H..
   1f924:	0001483c 00014858 00014874 0001487e     <H..XH..tH..~H..
   1f934:	00014888                                .H..

0001f938 <LoRaMacMaxEirpTable>:
   1f938:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1f948:	00004b4f 79737542 00000000 76726553     OK..Busy....Serv
   1f958:	20656369 6e6b6e75 006e776f 61726150     ice unknown.Para
   1f968:	6574656d 6e692072 696c6176 00000064     meter invalid...
   1f978:	71657246 636e6575 6e692079 696c6176     Frequency invali
   1f988:	00000064 61746144 65746172 766e6920     d...Datarate inv
   1f998:	64696c61 00000000 71657246 636e6575     alid....Frequenc
   1f9a8:	726f2079 74616420 74617261 6e692065     y or datarate in
   1f9b8:	696c6176 00000064 6e206f4e 6f777465     valid...No netwo
   1f9c8:	6a206b72 656e696f 00000064 676e654c     rk joined...Leng
   1f9d8:	65206874 726f7272 00000000 69676552     th error....Regi
   1f9e8:	6e206e6f 7320746f 6f707075 64657472     on not supported
   1f9f8:	00000000 70696b53 20646570 20505041     ....Skipped APP 
   1fa08:	61746164 00000000 79747544 6379632d     data....Duty-cyc
   1fa18:	7220656c 72747365 65746369 00000064     le restricted...
   1fa28:	63206f4e 6e6e6168 66206c65 646e756f     No channel found
   1fa38:	00000000 66206f4e 20656572 6e616863     ....No free chan
   1fa48:	206c656e 6e756f66 00000064 79737542     nel found...Busy
   1fa58:	61656220 206e6f63 65736572 64657672      beacon reserved
   1fa68:	6d697420 00000065 79737542 6e697020      time...Busy pin
   1fa78:	6c732d67 7720746f 6f646e69 69742077     g-slot window ti
   1fa88:	0000656d 79737542 6c707520 206b6e69     me..Busy uplink 
   1fa98:	6c6c6f63 6f697369 0000006e 70797243     collision...Cryp
   1faa8:	65206f74 726f7272 00000000 746e4346     to error....FCnt
   1fab8:	6e616820 72656c64 72726520 0000726f      handler error..
   1fac8:	2043414d 6d6d6f63 20646e61 6f727265     MAC command erro
   1fad8:	00000072 73616c43 65204273 726f7272     r...ClassB error
   1fae8:	00000000 666e6f43 206d7269 75657571     ....Confirm queu
   1faf8:	72652065 00726f72 6e6b6e55 206e776f     e error.Unknown 
   1fb08:	6f727265 00000072 6f727245 00000072     error...Error...
   1fb18:	74207854 6f656d69 00007475 31207852     Tx timeout..Rx 1
   1fb28:	6d697420 74756f65 00000000 32207852      timeout....Rx 2
   1fb38:	6d697420 74756f65 00000000 20317852      timeout....Rx1 
   1fb48:	6f727265 00000072 20327852 6f727265     error...Rx2 erro
   1fb58:	00000072 6e696f4a 69616620 0064656c     r...Join failed.
   1fb68:	6e776f44 6b6e696c 70657220 65746165     Downlink repeate
   1fb78:	00000064 44207854 61702052 616f6c79     d...Tx DR payloa
   1fb88:	69732064 6520657a 726f7272 00000000     d size error....
   1fb98:	6e776f44 6b6e696c 6f6f7420 6e616d20     Downlink too man
   1fba8:	72662079 73656d61 736f6c20 00000073     y frames loss...
   1fbb8:	72646441 20737365 6c696166 00000000     Address fail....
   1fbc8:	2043494d 6c696166 00000000 746c754d     MIC fail....Mult
   1fbd8:	73616369 61662074 00006c69 63616542     icast fail..Beac
   1fbe8:	6c206e6f 656b636f 00000064 63616542     on locked...Beac
   1fbf8:	6c206e6f 0074736f 63616542 6e206e6f     on lost.Beacon n
   1fc08:	6620746f 646e756f 00000000 0000000d     ot found........
   1fc18:	58323025 00000020 23230a0d 23232323     %02X .....######
   1fc28:	3d3d3d20 4d203d3d 2d454d4c 75716552      ===== MLME-Requ
   1fc38:	20747365 4c4d202d 4a5f454d 204e494f     est - MLME_JOIN 
   1fc48:	3d3d3d3d 23232320 0d232323 00000000     ==== ######.....
   1fc58:	54415453 20205355 20202020 7325203a     STATUS      : %s
   1fc68:	00000a0d 23232323 3d202323 3d3d3d3d     ....###### =====
   1fc78:	494f4a20 474e494e 3d3d3d20 2323203d      JOINING ==== ##
   1fc88:	23232323 0000000d 23230a0d 23232323     ####......######
   1fc98:	3d3d3d20 4d203d3d 2d535043 75716552      ===== MCPS-Requ
   1fca8:	20747365 3d3d3d3d 23232320 0d232323     est ==== ######.
   1fcb8:	00000000 23230a0d 23232323 3d3d3d20     ......###### ===
   1fcc8:	4d203d3d 2d535043 666e6f43 206d7269     == MCPS-Confirm 
   1fcd8:	3d3d3d3d 23232320 0d232323 00000000     ==== ######.....
   1fce8:	23230a0d 23232323 3d3d3d20 55203d3d     ..###### ===== U
   1fcf8:	4e494c50 5246204b 20454d41 20756c25     PLINK FRAME %lu 
   1fd08:	3d3d3d3d 23232320 0d232323 0000000a     ==== ######.....
   1fd18:	53414c43 20202053 20202020 6325203a     CLASS       : %c
   1fd28:	00000a0d 50205854 2054524f 20202020     ....TX PORT     
   1fd38:	6425203a 00000a0d 44205854 20415441     : %d....TX DATA 
   1fd48:	20202020 0000203a 004b4341 4b43414e         : ..ACK.NACK
   1fd58:	00000000 464e4f43 454d5249 202d2044     ....CONFIRMED - 
   1fd68:	0a0d7325 00000000 4f434e55 5249464e     %s......UNCONFIR
   1fd78:	0d44454d 00000000 41544144 54415220     MED.....DATA RAT
   1fd88:	20202045 5244203a 0d64255f 0000000a     E   : DR_%d.....
   1fd98:	204c2f55 51455246 20202020 6c25203a     U/L FREQ    : %l
   1fda8:	000a0d75 50205854 5245574f 20202020     u...TX POWER    
   1fdb8:	6425203a 00000a0d 4e414843 204c454e     : %d....CHANNEL 
   1fdc8:	4b53414d 0000203a 58343025 00000020     MASK: ..%04X ...
   1fdd8:	00434241 23230a0d 23232323 3d3d3d20     ABC...###### ===
   1fde8:	4d203d3d 2d535043 69646e49 69746163     == MCPS-Indicati
   1fdf8:	3d206e6f 203d3d3d 23232323 000d2323     on ==== ######..
   1fe08:	23230a0d 23232323 3d3d3d20 4d203d3d     ..###### ===== M
   1fe18:	2d454d4c 75716552 20747365 4c4d202d     LME-Request - ML
   1fe28:	4c5f454d 5f4b4e49 43454843 3d3d204b     ME_LINK_CHECK ==
   1fe38:	23203d3d 23232323 00000d23 23230a0d     == ######.....##
   1fe48:	23232323 3d3d3d20 4d203d3d 2d454d4c     #### ===== MLME-
   1fe58:	75716552 20747365 4c4d202d 545f454d     Request - MLME_T
   1fe68:	20574358 3d3d3d3d 23232320 0d232323     XCW ==== ######.
   1fe78:	00000000 23230a0d 23232323 3d3d3d20     ......###### ===
   1fe88:	4d203d3d 2d454d4c 75716552 20747365     == MLME-Request 
   1fe98:	4c4d202d 545f454d 31574358 3d3d3d20     - MLME_TXCW1 ===
   1fea8:	2323203d 23232323 0000000d 23230a0d     = ######......##
   1feb8:	23232323 3d3d3d20 44203d3d 4c4e574f     #### ===== DOWNL
   1fec8:	204b4e49 4d415246 6c252045 3d3d2075     INK FRAME %lu ==
   1fed8:	23203d3d 23232323 000a0d23 57205852     == ######...RX W
   1fee8:	4f444e49 20202057 7325203a 00000a0d     INDOW   : %s....
   1fef8:	50205852 2054524f 20202020 6425203a     RX PORT     : %d
   1ff08:	00000a0d 44205852 20415441 20202020     ....RX DATA     
   1ff18:	000d203a 52205852 20495353 20202020     : ..RX RSSI     
   1ff28:	6425203a 00000a0d 53205852 2020524e     : %d....RX SNR  
   1ff38:	20202020 6425203a 00000a0d 00000031         : %d....1...
   1ff48:	00000032 00000043 676e6950 6f6c532d     2...C...Ping-Slo
   1ff58:	00000074 746c754d 73616369 69502074     t...Multicast Pi
   1ff68:	532d676e 00746f6c 0001ff44 0001ff48     ng-Slot.D...H...
   1ff78:	0001ff4c 0001ff50 0001ff5c 00016d82     L...P...\....m..
   1ff88:	00016dc4 00016dcc 00016dda 00016de8     .m...m...m...m..
   1ff98:	00016e46 00016e80 00016ec6 23230a0d     Fn...n...n....##
   1ffa8:	23232323 3d3d3d20 4d203d3d 2d454d4c     #### ===== MLME-
   1ffb8:	666e6f43 206d7269 3d3d3d3d 23232320     Confirm ==== ###
   1ffc8:	0d232323 00000000 23232323 3d202323     ###.....###### =
   1ffd8:	3d3d3d3d 494f4a20 2044454e 3d3d3d3d     ==== JOINED ====
   1ffe8:	23232320 0d232323 00000000 544f0a0d      ######.......OT
   1fff8:	0a0d4141 0000000d 41766544 20726464     AA......DevAddr 
   20008:	20202020 3025203a 0d586c38 0000000a         : %08lX.....
   20018:	00000d0a 23230a0d 23232323 3d3d3d20     ......###### ===
   20028:	4d203d3d 2d454d4c 69646e49 69746163     == MLME-Indicati
   20038:	3d206e6f 203d3d3d 23232323 000d2323     on ==== ######..
   20048:	23232323 3d202323 3d3d3d3d 616c4320     ###### ===== Cla
   20058:	20437373 6f6d6564 70706120 6163696c     ssC demo applica
   20068:	6e6f6974 2e317620 43522e30 3d3d2031     tion v1.0.RC1 ==
   20078:	23203d3d 23232323 0d0a0d23 00000000     == ######.......
   20088:	23230a0d 23232323 3d3d3d20 43203d3d     ..###### ===== C
   20098:	20535854 54534552 4445524f 3d3d3d20     TXS RESTORED ===
   200a8:	2323203d 23232323 000d0a0d 45766544     = ######....DevE
   200b8:	20206975 20202020 3025203a 00005832     ui      : %02X..
   200c8:	3230252d 00000058 45707041 20206975     -%02X...AppEui  
   200d8:	20202020 3025203a 00005832 4b707041         : %02X..AppK
   200e8:	20207965 20202020 3025203a 00005832     ey      : %02X..
   200f8:	32302520 00000058 23230a0d 23232323      %02X.....######
   20108:	3d3d3d20 43203d3d 20535854 524f5453      ===== CTXS STOR
   20118:	3d204445 203d3d3d 23232323 000d2323     ED ==== ######..
   20128:	33d3e608 00000003 00017372 00017408     ...3....rs...t..
   20138:	00017534 000175f4 0001761a 00017744     4u...u...v..Dw..
   20148:	00018c8c 00018c6e 00018c28 00018b46     ....n...(...F...
   20158:	00018c28 00018c60 00018c28 00018b46     (...`...(...F...
   20168:	00018c6e 00018c6e 00018c60 00018b46     n...n...`...F...
   20178:	00018b3e 00018b3e 00018b3e 00018ea4     >...>...>.......
   20188:	000194ec 000193ac 000193ac 000193a8     ................
   20198:	000194c4 000194c4 000194b6 000193a8     ................
   201a8:	000194c4 000194b6 000194c4 000193a8     ................
   201b8:	000194cc 000194cc 000194cc 000196d0     ................

000201c8 <_global_impure_ptr>:
   201c8:	20000150 0000000a 0001a8ce 0001a9a2     P.. ............
   201d8:	0001a9a2 0001a8ba 0001a9a2 0001a9a2     ................
   201e8:	0001a9a2 0001a9a2 0001a9a2 0001a9a2     ................
   201f8:	0001a974 0001a486 0001a9a2 0001a47c     t...........|...
   20208:	0001a490 0001a9a2 0001a8c4 0001a650     ............P...
   20218:	0001a650 0001a650 0001a650 0001a650     P...P...P...P...
   20228:	0001a650 0001a650 0001a650 0001a650     P...P...P...P...
   20238:	0001a9a2 0001a9a2 0001a9a2 0001a9a2     ................
   20248:	0001a9a2 0001a9a2 0001a9a2 0001a9a2     ................
   20258:	0001a9a2 0001a9a2 0001a98a 0001a8de     ................
   20268:	0001a9a2 0001a8de 0001a9a2 0001a9a2     ................
   20278:	0001a9a2 0001a9a2 0001a844 0001a9a2     ........D.......
   20288:	0001a9a2 0001a84e 0001a9a2 0001a9a2     ....N...........
   20298:	0001a9a2 0001a9a2 0001a9a2 0001a87c     ............|...
   202a8:	0001a9a2 0001a9a2 0001a8aa 0001a9a2     ................
   202b8:	0001a9a2 0001a9a2 0001a9a2 0001a9a2     ................
   202c8:	0001a9a2 0001a9a2 0001a9a2 0001a9a2     ................
   202d8:	0001a9a2 0001a690 0001a6c6 0001a8de     ................
   202e8:	0001a8de 0001a8de 0001a76e 0001a6c6     ........n.......
   202f8:	0001a9a2 0001a9a2 0001a778 0001a9a2     ........x.......
   20308:	0001a78a 0001a99e 0001a7b8 0001a7e2     ................
   20318:	0001a9a2 0001a7ec 0001a9a2 0001a99a     ................
   20328:	0001a9a2 0001a9a2 0001a4de 00464e49     ............INF.
   20338:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   20348:	37363534 42413938 46454443 00000000     456789ABCDEF....
   20358:	33323130 37363534 62613938 66656463     0123456789abcdef
   20368:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

00020378 <blanks.7238>:
   20378:	20202020 20202020 20202020 20202020                     

00020388 <zeroes.7239>:
   20388:	30303030 30303030 30303030 30303030     0000000000000000
   20398:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   203a8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000203b8 <__mprec_bigtens>:
   203b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   203c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   203d8:	7f73bf3c 75154fdd                       <.s..O.u

000203e0 <__mprec_tens>:
   203e0:	00000000 3ff00000 00000000 40240000     .......?......$@
   203f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   20400:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   20410:	00000000 412e8480 00000000 416312d0     .......A......cA
   20420:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   20430:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   20440:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   20450:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   20460:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   20470:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   20480:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   20490:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   204a0:	79d99db4 44ea7843                       ...yCx.D

000204a8 <p05.6055>:
   204a8:	00000005 00000019 0000007d              ........}...

000204b4 <_ctype_>:
   204b4:	20202000 20202020 28282020 20282828     .         ((((( 
   204c4:	20202020 20202020 20202020 20202020                     
   204d4:	10108820 10101010 10101010 10101010      ...............
   204e4:	04040410 04040404 10040404 10101010     ................
   204f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   20504:	01010101 01010101 01010101 10101010     ................
   20514:	42421010 42424242 02020202 02020202     ..BBBBBB........
   20524:	02020202 02020202 02020202 10101010     ................
   20534:	00000020 00000000 00000000 00000000      ...............
	...

000205b8 <_init>:
   205b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205ba:	46c0      	nop			; (mov r8, r8)
   205bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   205be:	bc08      	pop	{r3}
   205c0:	469e      	mov	lr, r3
   205c2:	4770      	bx	lr

000205c4 <__init_array_start>:
   205c4:	0001bae5 	.word	0x0001bae5

000205c8 <__frame_dummy_init_array_entry>:
   205c8:	000000dd                                ....

000205cc <_fini>:
   205cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205ce:	46c0      	nop			; (mov r8, r8)
   205d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   205d2:	bc08      	pop	{r3}
   205d4:	469e      	mov	lr, r3
   205d6:	4770      	bx	lr

000205d8 <__fini_array_start>:
   205d8:	000000b5 	.word	0x000000b5
